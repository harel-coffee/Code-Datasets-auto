<tt style='background-color:#E8E8E8;'> core. <a href=' /resource.py#L113'>get_script_home</a>()</tt>	Get the directory containing the program entry module.
<tt style='background-color:#E8E8E8;'> core. <a href=' /resource.py#L151'>get_settings_path</a>(name)</tt>	Get a directory to save user preferences.
<tt style='background-color:#E8E8E8;'> core.Location <a href=' /resource.py#L199'>open</a>(filename,mode)</tt>	Open a file at this location.
<tt style='background-color:#E8E8E8;'> core.FileLocation <a href=' /resource.py#L220'>__init__</a>(path)</tt>	Create a location given a relative or absolute path.
<tt style='background-color:#E8E8E8;'> core.ZIPLocation <a href=' /resource.py#L237'>__init__</a>(zip,dir)</tt>	Create a location given an open zip file and a path within that file.
<tt style='background-color:#E8E8E8;'> core.URLLocation <a href=' /resource.py#L268'>__init__</a>(base_url)</tt>	Create a location given a base url.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L299'>__init__</a>(path,script_home)</tt>	Create a loader for the given path.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L332'>reindex</a>()</tt>	Refresh the file index.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L417'>file</a>(name,mode)</tt>	Load a resource.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L436'>location</a>(name)</tt>	Get the location of a resource.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L456'>add_font</a>(name)</tt>	Add a font resource to the application.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L494'>_get_texture_atlas_bin</a>(width,height)</tt>	A heuristic for determining the atlas bin to use for a given image size.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L519'>image</a>(name,flip_x,flip_y,rotate)</tt>	Load an image with optional transformation.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L558'>animation</a>(name,flip_x,flip_y,rotate)</tt>	Load an animation with optional transformation.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L594'>get_cached_image_names</a>()</tt>	Get a list of image filenames that have been cached.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L605'>get_cached_animation_names</a>()</tt>	Get a list of animation filenames that have been cached.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L616'>get_texture_bins</a>()</tt>	Get a list of texture bins in use.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L627'>media</a>(name,streaming)</tt>	Load a sound or video resource.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L658'>texture</a>(name)</tt>	Load a texture.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L680'>html</a>(name)</tt>	Load an html document.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L693'>attributed</a>(name)</tt>	Load an attributed text document.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L708'>text</a>(name)</tt>	Load a plain text document.
<tt style='background-color:#E8E8E8;'> core.Loader <a href=' /resource.py#L721'>get_cached_texture_names</a>()</tt>	Get the names of textures currently cached.
<tt style='background-color:#E8E8E8;'> core. <a href=' /debug.py#L39'>debug_print</a>(enabled_or_option)</tt>	Get a debug printer that is enabled based on a boolean input or a pyglet option.
<tt style='background-color:#E8E8E8;'> core.SpriteGroup <a href=' /sprite.py#L121'>__init__</a>(texture,blend_src,blend_dest,parent)</tt>	Create a sprite group.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L190'>__init__</a>(img,x,y,blend_src)</tt>	Create a sprite.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L253'>delete</a>()</tt>	Force immediate removal of the sprite from video memory.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L324'>group</a>()</tt>	Parent graphics group.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L346'>image</a>()</tt>	Image or animation to display.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L454'>position</a>()</tt>	The x y coordinates of the sprite as a tuple.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L459'>set_position</a>(x,y)</tt>	Set the x and y coordinates of the sprite simultaneously.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L483'>x</a>()</tt>	X coordinate of the sprite.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L496'>y</a>()</tt>	Y coordinate of the sprite.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L512'>rotation</a>()</tt>	Clockwise rotation of the sprite in degrees.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L528'>scale</a>()</tt>	Base scaling factor.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L544'>scale_x</a>()</tt>	Horizontal scaling factor.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L560'>scale_y</a>()</tt>	Vertical scaling factor.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L565'>update</a>(x,y,rotation,scale)</tt>	Simultaneously change the position rotation or scale.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L601'>width</a>()</tt>	Scaled width of the sprite.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L614'>height</a>()</tt>	Scaled height of the sprite.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L675'>visible</a>()</tt>	True if the sprite will be drawn.
<tt style='background-color:#E8E8E8;'> core.Sprite <a href=' /sprite.py#L680'>draw</a>()</tt>	Draw the sprite at its current position.
<tt style='background-color:#E8E8E8;'> core.LibraryLoader <a href=' /lib.py#L106'>load_library</a>()</tt>	Find and load a library.
<tt style='background-color:#E8E8E8;'> core.MachOLibraryLoader <a href=' /lib.py#L196'>find_library</a>(path)</tt>	Implements the dylib search as specified in apple documentation http //developer.
<tt style='background-color:#E8E8E8;'> core.MachOLibraryLoader <a href=' /lib.py#L253'>find_framework</a>(path)</tt>	Implement runtime framework search as described by http //developer.
<tt style='background-color:#E8E8E8;'> core.EventDispatcher <a href=' /event.py#L162'>register_event_type</a>(cls,name)</tt>	Register an event type with the dispatcher.
<tt style='background-color:#E8E8E8;'> core.EventDispatcher <a href=' /event.py#L180'>push_handlers</a>()</tt>	Push a level onto the top of the handler stack then attach zero or more event handlers.
<tt style='background-color:#E8E8E8;'> core.EventDispatcher <a href=' /event.py#L197'>_get_handlers</a>(args,kwargs)</tt>	Implement handler matching on arguments for set_handlers and remove_handlers.
<tt style='background-color:#E8E8E8;'> core.EventDispatcher <a href=' /event.py#L219'>set_handlers</a>()</tt>	Attach one or more event handlers to the top level of the handler stack.
<tt style='background-color:#E8E8E8;'> core.EventDispatcher <a href=' /event.py#L232'>set_handler</a>(name,handler)</tt>	Attach a single event handler.
<tt style='background-color:#E8E8E8;'> core.EventDispatcher <a href=' /event.py#L248'>pop_handlers</a>()</tt>	Pop the top level of event handlers off the stack.
<tt style='background-color:#E8E8E8;'> core.EventDispatcher <a href=' /event.py#L255'>remove_handlers</a>()</tt>	Remove event handlers from the event stack.
<tt style='background-color:#E8E8E8;'> core.EventDispatcher <a href=' /event.py#L296'>remove_handler</a>(name,handler)</tt>	Remove a single event handler.
<tt style='background-color:#E8E8E8;'> core.EventDispatcher <a href=' /event.py#L320'>dispatch_event</a>(event_type)</tt>	Dispatch a single event to the attached handlers.
<tt style='background-color:#E8E8E8;'> core.EventDispatcher <a href=' /event.py#L425'>event</a>()</tt>	Function decorator for an event handler.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__init__.py#L230'>_choose_darwin_platform</a>()</tt>	Choose between darwin's carbon and cocoa implementations.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__init__.py#L246'>_read_environment</a>()</tt>	Read defaults for options from environment.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L245'>__init__</a>(fps_limit,time_function)</tt>	Initialise a clock with optional framerate limit and custom time function.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L271'>update_time</a>()</tt>	Get the elapsed time since the last call to update_time.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L296'>call_scheduled_functions</a>(dt)</tt>	Call scheduled functions that elapsed on the last update_time.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L384'>tick</a>(poll)</tt>	Signify that one frame has passed.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L416'>_limit</a>()</tt>	Sleep until the next frame is due called automatically by.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L443'>get_sleep_time</a>(sleep_idle)</tt>	Get the time until the next item is scheduled.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L489'>set_fps_limit</a>(fps_limit)</tt>	Set the framerate limit.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L509'>get_fps_limit</a>()</tt>	Get the framerate limit.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L521'>get_fps</a>()</tt>	Get the average fps of recent history.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L534'>_get_nearest_ts</a>()</tt>	Schedule from now unless now is sufficiently close to last_ts in which case use last_ts.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L603'>schedule</a>(func)</tt>	Schedule a function to be called every frame.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L621'>schedule_once</a>(func,delay)</tt>	Schedule a function to be called once after delay seconds.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L637'>schedule_interval</a>(func,interval)</tt>	Schedule a function to be called every interval seconds.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L657'>schedule_interval_soft</a>(func,interval)</tt>	Schedule a function to be called every interval seconds beginning at a time that does not coincide with other scheduled.
<tt style='background-color:#E8E8E8;'> core.Clock <a href=' /clock.py#L693'>unschedule</a>(func)</tt>	Remove a function from the schedule.
<tt style='background-color:#E8E8E8;'> core. <a href=' /clock.py#L718'>set_default</a>(default)</tt>	Set the default clock to use for all module-level functions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /clock.py#L731'>get_default</a>()</tt>	Return the clock instance that is used by all module-level clock functions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /clock.py#L741'>tick</a>(poll)</tt>	Signify that one frame has passed on the default clock.
<tt style='background-color:#E8E8E8;'> core. <a href=' /clock.py#L762'>get_sleep_time</a>(sleep_idle)</tt>	Get the time until the next item is scheduled on the default clock.
<tt style='background-color:#E8E8E8;'> core. <a href=' /clock.py#L782'>get_fps</a>()</tt>	Return the current measured fps of the default clock.
<tt style='background-color:#E8E8E8;'> core. <a href=' /clock.py#L790'>set_fps_limit</a>(fps_limit)</tt>	Set the framerate limit for the default clock.
<tt style='background-color:#E8E8E8;'> core. <a href=' /clock.py#L803'>get_fps_limit</a>()</tt>	Get the framerate limit for the default clock.
<tt style='background-color:#E8E8E8;'> core. <a href=' /clock.py#L813'>schedule</a>(func)</tt>	Schedule 'func' to be called every frame on the default clock.
<tt style='background-color:#E8E8E8;'> core. <a href=' /clock.py#L826'>schedule_interval</a>(func,interval)</tt>	Schedule 'func' to be called every 'interval' seconds on the default clock.
<tt style='background-color:#E8E8E8;'> core. <a href=' /clock.py#L843'>schedule_interval_soft</a>(func,interval)</tt>	Schedule 'func' to be called every 'interval' seconds on the default clock beginning at a time that does not coincide with other scheduled.
<tt style='background-color:#E8E8E8;'> core. <a href=' /clock.py#L865'>schedule_once</a>(func,delay)</tt>	Schedule 'func' to be called once after 'delay' seconds can be a float on the default clock.
<tt style='background-color:#E8E8E8;'> core. <a href=' /clock.py#L884'>unschedule</a>(func)</tt>	Remove 'func' from the default clock's schedule no error.
<tt style='background-color:#E8E8E8;'> core.ClockDisplay <a href=' /clock.py#L912'>__init__</a>(font,interval,format,color)</tt>	Create a clockdisplay.
<tt style='background-color:#E8E8E8;'> core.ClockDisplay <a href=' /clock.py#L953'>unschedule</a>()</tt>	Remove the display from its clock's schedule.
<tt style='background-color:#E8E8E8;'> core.ClockDisplay <a href=' /clock.py#L966'>update_text</a>(dt)</tt>	Scheduled method to update the label text.
<tt style='background-color:#E8E8E8;'> core.ClockDisplay <a href=' /clock.py#L971'>draw</a>()</tt>	Method called each frame to render the label.
<tt style='background-color:#E8E8E8;'> core. <a href=' /info.py#L57'>dump_python</a>()</tt>	Dump python version and environment to stdout.
<tt style='background-color:#E8E8E8;'> core. <a href=' /info.py#L75'>dump_pyglet</a>()</tt>	Dump pyglet version and options.
<tt style='background-color:#E8E8E8;'> core. <a href=' /info.py#L84'>dump_window</a>()</tt>	Dump display window screen and default config info.
<tt style='background-color:#E8E8E8;'> core. <a href=' /info.py#L103'>dump_gl</a>(context)</tt>	Dump gl info.
<tt style='background-color:#E8E8E8;'> core. <a href=' /info.py#L118'>dump_glu</a>()</tt>	Dump glu info.
<tt style='background-color:#E8E8E8;'> core. <a href=' /info.py#L128'>dump_glx</a>()</tt>	Dump glx info.
<tt style='background-color:#E8E8E8;'> core. <a href=' /info.py#L157'>dump_media</a>()</tt>	Dump pyglet media info.
<tt style='background-color:#E8E8E8;'> core. <a href=' /info.py#L162'>dump_avbin</a>()</tt>	Dump avbin info.
<tt style='background-color:#E8E8E8;'> core. <a href=' /info.py#L173'>dump_al</a>()</tt>	Dump openal info.
<tt style='background-color:#E8E8E8;'> core. <a href=' /info.py#L188'>dump_wintab</a>()</tt>	Dump wintab info.
<tt style='background-color:#E8E8E8;'> core. <a href=' /info.py#L212'>dump</a>()</tt>	Dump all information to stdout.
<tt style='background-color:#E8E8E8;'> canvas.Display <a href=' /canvas/base.py#L29'>__init__</a>(name,x_screen)</tt>	Create a display connection for the given name and screen.
<tt style='background-color:#E8E8E8;'> canvas.Display <a href=' /canvas/base.py#L55'>get_screens</a>()</tt>	Get the available screens.
<tt style='background-color:#E8E8E8;'> canvas.Display <a href=' /canvas/base.py#L69'>get_default_screen</a>()</tt>	Get the default screen as specified by the user's operating system preferences.
<tt style='background-color:#E8E8E8;'> canvas.Display <a href=' /canvas/base.py#L77'>get_windows</a>()</tt>	Get the windows currently attached to this display.
<tt style='background-color:#E8E8E8;'> canvas.Screen <a href=' /canvas/base.py#L104'>__init__</a>(display,x,y,width)</tt>	:parameters display : ~pyglet.
<tt style='background-color:#E8E8E8;'> canvas.Screen <a href=' /canvas/base.py#L134'>get_best_config</a>(template)</tt>	Get the best available gl config.
<tt style='background-color:#E8E8E8;'> canvas.Screen <a href=' /canvas/base.py#L168'>get_matching_configs</a>(template)</tt>	Get a list of configs that match a specification.
<tt style='background-color:#E8E8E8;'> canvas.Screen <a href=' /canvas/base.py#L186'>get_modes</a>()</tt>	Get a list of screen modes supported by this screen.
<tt style='background-color:#E8E8E8;'> canvas.Screen <a href=' /canvas/base.py#L195'>get_mode</a>()</tt>	Get the current display mode for this screen.
<tt style='background-color:#E8E8E8;'> canvas.Screen <a href=' /canvas/base.py#L204'>get_closest_mode</a>(width,height)</tt>	Get the screen mode that best matches a given size.
<tt style='background-color:#E8E8E8;'> canvas.Screen <a href=' /canvas/base.py#L253'>set_mode</a>(mode)</tt>	Set the display mode for this screen.
<tt style='background-color:#E8E8E8;'> canvas.Screen <a href=' /canvas/base.py#L266'>restore_mode</a>()</tt>	Restore the screen mode to the user's default.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/__init__.py#L64'>get_display</a>()</tt>	Get the default display device.
<tt style='background-color:#E8E8E8;'> canvas.CarbonDisplay <a href=' /canvas/carbon.py#L146'>_on_quit</a>()</tt>	Called when the user tries to quit the application.
<tt style='background-color:#E8E8E8;'> font. <a href=' /font/win32query.py#L301'>_enum_font_names</a>(logfont,textmetricex,fonttype,param)</tt>	Callback function to be executed during enumfontfamiliesex call for each font name.
<tt style='background-color:#E8E8E8;'> font. <a href=' /font/win32query.py#L382'>query</a>(charset)</tt>	Prepare and call enumfontfamiliesex.
<tt style='background-color:#E8E8E8;'> font. <a href=' /font/__init__.py#L95'>have_font</a>(name,refresh)</tt>	Return true if font with specified name is present the result.
<tt style='background-color:#E8E8E8;'> font. <a href=' /font/win32query.py#L445'>font_list</a>(vector_only,monospace_only)</tt>	Return list of system installed font names.
<tt style='background-color:#E8E8E8;'> font.TruetypeInfo <a href=' /font/ttf.py#L114'>__init__</a>(filename)</tt>	Read the given truetype file.
<tt style='background-color:#E8E8E8;'> font.TruetypeInfo <a href=' /font/ttf.py#L155'>get_font_selection_flags</a>()</tt>	Return the font selection flags as defined in os/2 table.
<tt style='background-color:#E8E8E8;'> font.TruetypeInfo <a href=' /font/ttf.py#L163'>is_bold</a>()</tt>	Returns true iff the font describes itself as bold.
<tt style='background-color:#E8E8E8;'> font.TruetypeInfo <a href=' /font/ttf.py#L167'>is_italic</a>()</tt>	Returns true iff the font describes itself as italic.
<tt style='background-color:#E8E8E8;'> font.TruetypeInfo <a href=' /font/ttf.py#L171'>get_names</a>()</tt>	Returns a dictionary of names defined in the file.
<tt style='background-color:#E8E8E8;'> font.TruetypeInfo <a href=' /font/ttf.py#L201'>get_name</a>(name,platform,languages)</tt>	Returns the value of the given name in this font.
<tt style='background-color:#E8E8E8;'> font.TruetypeInfo <a href=' /font/ttf.py#L283'>get_horizontal_metrics</a>()</tt>	Return all horizontal metric entries in table format.
<tt style='background-color:#E8E8E8;'> font.TruetypeInfo <a href=' /font/ttf.py#L292'>get_character_advances</a>()</tt>	Return a dictionary of character->advance.
<tt style='background-color:#E8E8E8;'> font.TruetypeInfo <a href=' /font/ttf.py#L309'>get_glyph_advances</a>()</tt>	Return a dictionary of glyph->advance.
<tt style='background-color:#E8E8E8;'> font.TruetypeInfo <a href=' /font/ttf.py#L318'>get_character_kernings</a>()</tt>	Return a dictionary of left right ->kerning the key of the dictionary is a tuple of left right.
<tt style='background-color:#E8E8E8;'> font.TruetypeInfo <a href=' /font/ttf.py#L338'>get_glyph_kernings</a>()</tt>	Return a dictionary of left right ->kerning the key of the dictionary is a tuple of left right.
<tt style='background-color:#E8E8E8;'> font.TruetypeInfo <a href=' /font/ttf.py#L374'>get_glyph_map</a>()</tt>	Calculate and return a reverse character map.
<tt style='background-color:#E8E8E8;'> font.TruetypeInfo <a href=' /font/ttf.py#L389'>get_character_map</a>()</tt>	Return the character map.
<tt style='background-color:#E8E8E8;'> font.TruetypeInfo <a href=' /font/ttf.py#L452'>close</a>()</tt>	Close the font file.
<tt style='background-color:#E8E8E8;'> font. <a href=' /font/ttf.py#L463'>_read_table</a>()</tt>	Generic table constructor used for table formats listed at end of file.
<tt style='background-color:#E8E8E8;'> font. <a href=' /font/base.py#L114'>get_grapheme_clusters</a>(text)</tt>	Implements table 2 of uax #29 grapheme cluster boundaries.
<tt style='background-color:#E8E8E8;'> font.Glyph <a href=' /font/base.py#L164'>set_bearings</a>(baseline,left_side_bearing,advance)</tt>	Set metrics for this glyph.
<tt style='background-color:#E8E8E8;'> font.GlyphTextureAtlas <a href=' /font/base.py#L221'>apply_blend_state</a>()</tt>	Set the opengl blend state for the glyphs in this texture.
<tt style='background-color:#E8E8E8;'> font.GlyphTextureAtlas <a href=' /font/base.py#L227'>fit</a>(image)</tt>	Place image within this texture.
<tt style='background-color:#E8E8E8;'> font.Font <a href=' /font/base.py#L300'>add_font_data</a>(cls,data)</tt>	Add font data to the font loader.
<tt style='background-color:#E8E8E8;'> font.Font <a href=' /font/base.py#L314'>have_font</a>(cls,name)</tt>	Determine if a font with the given name is installed.
<tt style='background-color:#E8E8E8;'> font.Font <a href=' /font/base.py#L326'>create_glyph</a>(image)</tt>	Create a glyph using the given image.
<tt style='background-color:#E8E8E8;'> font.Font <a href=' /font/base.py#L363'>get_glyphs</a>(text)</tt>	Create and return a list of glyphs for text.
<tt style='background-color:#E8E8E8;'> font.Font <a href=' /font/base.py#L390'>get_glyphs_for_width</a>(text,width)</tt>	Return a list of glyphs for text that fit within the given width.
<tt style='background-color:#E8E8E8;'> font. <a href=' /font/__init__.py#L95'>have_font</a>(name)</tt>	Check if specified system font name is available.
<tt style='background-color:#E8E8E8;'> font. <a href=' /font/__init__.py#L100'>load</a>(name,size,bold,italic)</tt>	Load a font for rendering.
<tt style='background-color:#E8E8E8;'> font. <a href=' /font/__init__.py#L175'>add_file</a>(font)</tt>	Add a font to pyglet's search path.
<tt style='background-color:#E8E8E8;'> font. <a href=' /font/__init__.py#L199'>add_directory</a>(dir)</tt>	Add a directory of fonts to pyglet's search path.
<tt style='background-color:#E8E8E8;'> font.GlyphString <a href=' /font/text.py#L88'>__init__</a>(text,glyphs,x,y)</tt>	Create a glyph string.
<tt style='background-color:#E8E8E8;'> font.GlyphString <a href=' /font/text.py#L144'>get_break_index</a>(from_index,width)</tt>	Find a breakpoint within the text for a given width.
<tt style='background-color:#E8E8E8;'> font.GlyphString <a href=' /font/text.py#L181'>get_subwidth</a>(from_index,to_index)</tt>	Return the width of a slice of this string.
<tt style='background-color:#E8E8E8;'> font.GlyphString <a href=' /font/text.py#L199'>draw</a>(from_index,to_index)</tt>	Draw a region of the glyph string.
<tt style='background-color:#E8E8E8;'> font.Text <a href=' /font/text.py#L298'>__init__</a>(font,text,x,y)</tt>	Create displayable text.
<tt style='background-color:#E8E8E8;'> font.CarbonGlyphRenderer <a href=' /font/carbon.py#L327'>_create_bitmap_context</a>(width,height)</tt>	Create or recreate bitmap and quartz context.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy. <a href=' /libs/darwin/cocoapy/cocoalibs.py#L52'>get_NSString</a>(string)</tt>	Autoreleased version of cfstr.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy. <a href=' /libs/darwin/cocoapy/cocoalibs.py#L116'>cfnumber_to_number</a>(cfnumber)</tt>	Convert cfnumber to python int or float.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy. <a href=' /libs/darwin/cocoapy/cocoalibs.py#L141'>cftype_to_value</a>(cftype)</tt>	Convert a cftype into an equivalent python type.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy. <a href=' /libs/darwin/cocoapy/cocoalibs.py#L163'>cfset_to_set</a>(cfset)</tt>	Convert cfset to python set.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy. <a href=' /libs/darwin/cocoapy/cocoalibs.py#L176'>cfarray_to_list</a>(cfarray)</tt>	Convert cfarray to python list.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy. <a href=' /libs/darwin/cocoapy/runtime.py#L426'>x86_should_use_stret</a>(restype)</tt>	Try to figure out when a return type will be passed on stack.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy. <a href=' /libs/darwin/cocoapy/runtime.py#L437'>should_use_fpret</a>(restype)</tt>	Determine if objc_msgsend_fpret is required to return a floating point type.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy. <a href=' /libs/darwin/cocoapy/runtime.py#L508'>parse_type_encoding</a>(encoding)</tt>	Takes a type encoding string and outputs a list of the separated type codes.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCMethod <a href=' /libs/darwin/cocoapy/runtime.py#L670'>__init__</a>(method)</tt>	Initialize with an objective-c method pointer we then determine.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCMethod <a href=' /libs/darwin/cocoapy/runtime.py#L704'>ctype_for_encoding</a>(encoding)</tt>	Return ctypes type for an encoded objective-c type.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCMethod <a href=' /libs/darwin/cocoapy/runtime.py#L722'>get_prototype</a>()</tt>	Returns a ctypes cfunctype for the method.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCMethod <a href=' /libs/darwin/cocoapy/runtime.py#L737'>get_callable</a>()</tt>	Returns a python-callable version of the method's imp.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCMethod <a href=' /libs/darwin/cocoapy/runtime.py#L749'>__call__</a>(objc_id)</tt>	Call the method with the given id and arguments you do not need.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCBoundMethod <a href=' /libs/darwin/cocoapy/runtime.py#L775'>__init__</a>(method,objc_id)</tt>	Initialize with a method and objcinstance or objcclass object.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCBoundMethod <a href=' /libs/darwin/cocoapy/runtime.py#L783'>__call__</a>()</tt>	Call the method with the given arguments.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCClass <a href=' /libs/darwin/cocoapy/runtime.py#L799'>__new__</a>(cls,class_name_or_ptr)</tt>	Create a new objcclass instance or return a previously created instance for the given objective-c class.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCClass <a href=' /libs/darwin/cocoapy/runtime.py#L840'>cache_instance_methods</a>()</tt>	Create and store python representations of all instance methods implemented by this class but does not find methods of superclass.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCClass <a href=' /libs/darwin/cocoapy/runtime.py#L850'>cache_class_methods</a>()</tt>	Create and store python representations of all class methods implemented by this class but does not find methods of superclass.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCClass <a href=' /libs/darwin/cocoapy/runtime.py#L860'>get_instance_method</a>(name)</tt>	Returns a python representation of the named instance method either by looking it up in the cached list of methods or by searching.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCClass <a href=' /libs/darwin/cocoapy/runtime.py#L877'>get_class_method</a>(name)</tt>	Returns a python representation of the named class method either by looking it up in the cached list of methods or by searching.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCClass <a href=' /libs/darwin/cocoapy/runtime.py#L894'>__getattr__</a>(name)</tt>	Returns a callable method object with the given name.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCInstance <a href=' /libs/darwin/cocoapy/runtime.py#L917'>__new__</a>(cls,object_ptr)</tt>	Create a new objcinstance or return a previously created one for the given object_ptr which should be an objective-c id.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCInstance <a href=' /libs/darwin/cocoapy/runtime.py#L970'>__getattr__</a>(name)</tt>	Returns a callable method object with the given name.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy. <a href=' /libs/darwin/cocoapy/runtime.py#L993'>convert_method_arguments</a>(encoding,args)</tt>	Used by objcsubclass to convert objective-c method arguments to python values before passing them on to the python-defined method.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCSubclass <a href=' /libs/darwin/cocoapy/runtime.py#L1072'>register</a>()</tt>	Register the new class with the objective-c runtime.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCSubclass <a href=' /libs/darwin/cocoapy/runtime.py#L1078'>add_ivar</a>(varname,vartype)</tt>	Add instance variable named varname to the subclass.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCSubclass <a href=' /libs/darwin/cocoapy/runtime.py#L1094'>rawmethod</a>(encoding)</tt>	Decorator for instance methods without any fancy shenanigans.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCSubclass <a href=' /libs/darwin/cocoapy/runtime.py#L1109'>method</a>(encoding)</tt>	Function decorator for instance methods.
<tt style='background-color:#E8E8E8;'> libs.darwin.cocoapy.ObjCSubclass <a href=' /libs/darwin/cocoapy/runtime.py#L1132'>classmethod</a>(encoding)</tt>	Function decorator for class methods.
<tt style='background-color:#E8E8E8;'> app.XlibSelectDevice <a href=' /app/xlib.py#L52'>fileno</a>()</tt>	Get the file handle for select() for this device.
<tt style='background-color:#E8E8E8;'> app.XlibSelectDevice <a href=' /app/xlib.py#L59'>select</a>()</tt>	Perform event processing on the device.
<tt style='background-color:#E8E8E8;'> app.XlibSelectDevice <a href=' /app/xlib.py#L67'>poll</a>()</tt>	Check if the device has events ready to process.
<tt style='background-color:#E8E8E8;'> app.PlatformEventLoop <a href=' /app/base.py#L30'>is_running</a>()</tt>	Return true if the event loop is currently processing or false if it is blocked or not activated.
<tt style='background-color:#E8E8E8;'> app.PlatformEventLoop <a href=' /app/base.py#L38'>post_event</a>(dispatcher,event)</tt>	Post an event into the main application thread.
<tt style='background-color:#E8E8E8;'> app.PlatformEventLoop <a href=' /app/base.py#L62'>dispatch_posted_events</a>()</tt>	Immediately dispatch all pending events.
<tt style='background-color:#E8E8E8;'> app.PlatformEventLoop <a href=' /app/base.py#L75'>notify</a>()</tt>	Notify the event loop that something needs processing.
<tt style='background-color:#E8E8E8;'> app.PlatformEventLoop <a href=' /app/base.py#L87'>step</a>(timeout)</tt>	:todo in mac/linux return true if didn't time out.
<tt style='background-color:#E8E8E8;'> app.EventLoop <a href=' /app/base.py#L145'>_run</a>()</tt>	The simplest standard run loop using constant timeout suitable.
<tt style='background-color:#E8E8E8;'> app.EventLoop <a href=' /app/base.py#L154'>_run_estimated</a>()</tt>	Run-loop that continually estimates function mapping requested timeout to measured timeout using a least-squares linear regression.
<tt style='background-color:#E8E8E8;'> app.EventLoop <a href=' /app/base.py#L220'>enter_blocking</a>()</tt>	Called by pyglet internal processes when the operating system is about to block due to a user interaction.
<tt style='background-color:#E8E8E8;'> app.EventLoop <a href=' /app/base.py#L237'>exit_blocking</a>()</tt>	Called by pyglet internal processes when the blocking operation completes.
<tt style='background-color:#E8E8E8;'> app.EventLoop <a href=' /app/base.py#L247'>idle</a>()</tt>	Called during each iteration of the event loop.
<tt style='background-color:#E8E8E8;'> app.EventLoop <a href=' /app/base.py#L309'>exit</a>()</tt>	Safely exit the event loop at the end of the current iteration.
<tt style='background-color:#E8E8E8;'> app.EventLoop <a href=' /app/base.py#L319'>sleep</a>(timeout)</tt>	Wait for some amount of time or until the has_exit flag is set or exit is called.
<tt style='background-color:#E8E8E8;'> app.EventLoop <a href=' /app/base.py#L341'>on_window_close</a>(window)</tt>	Default window close handler.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/__init__.py#L140'>run</a>()</tt>	Begin processing events scheduled functions and window updates.
<tt style='background-color:#E8E8E8;'> app. <a href=' /app/__init__.py#L150'>exit</a>()</tt>	Exit the application event loop.
<tt style='background-color:#E8E8E8;'> media.Player <a href=' /media/player.py#L247'>seek_next_frame</a>()</tt>	Step forwards one video frame in the current source.
<tt style='background-color:#E8E8E8;'> media.Player <a href=' /media/player.py#L307'>on_player_eos</a>()</tt>	The player ran out of sources.
<tt style='background-color:#E8E8E8;'> media.Player <a href=' /media/player.py#L315'>on_source_group_eos</a>()</tt>	The current source group ran out of data.
<tt style='background-color:#E8E8E8;'> media.PlayerGroup <a href=' /media/player.py#L349'>__init__</a>(players)</tt>	Create a player group for the given set of players.
<tt style='background-color:#E8E8E8;'> media.PlayerGroup <a href=' /media/player.py#L362'>play</a>()</tt>	Begin playing all players in the group simultaneously.
<tt style='background-color:#E8E8E8;'> media.PlayerGroup <a href=' /media/player.py#L372'>pause</a>()</tt>	Pause all players in the group simultaneously.
<tt style='background-color:#E8E8E8;'> media.MediaThread <a href=' /media/threads.py#L96'>stop</a>()</tt>	Stop the thread and wait for it to terminate.
<tt style='background-color:#E8E8E8;'> media.MediaThread <a href=' /media/threads.py#L109'>sleep</a>(timeout)</tt>	Wait for some amount of time or until notified.
<tt style='background-color:#E8E8E8;'> media.MediaThread <a href=' /media/threads.py#L122'>notify</a>()</tt>	Interrupt the current sleep operation.
<tt style='background-color:#E8E8E8;'> media.sources. <a href=' /media/sources/loader.py#L46'>load</a>(filename,file,streaming)</tt>	Load a source from a file.
<tt style='background-color:#E8E8E8;'> media.sources.ProceduralSource <a href=' /media/sources/procedural.py#L220'>get_audio_data</a>(num_bytes)</tt>	Return num_bytes bytes of audio data.
<tt style='background-color:#E8E8E8;'> media.sources.ProceduralSource <a href=' /media/sources/procedural.py#L233'>_generate_data</a>(num_bytes,offset)</tt>	Generate num_bytes bytes of data.
<tt style='background-color:#E8E8E8;'> media.sources.ProceduralSource <a href=' /media/sources/procedural.py#L250'>save</a>(filename)</tt>	Save the audio to disk as a standard riff wave.
<tt style='background-color:#E8E8E8;'> media.sources.AudioData <a href=' /media/sources/base.py#L149'>consume</a>(bytes,audio_format)</tt>	Remove some data from beginning of packet all events are.
<tt style='background-color:#E8E8E8;'> media.sources.AudioData <a href=' /media/sources/base.py#L175'>get_string_data</a>()</tt>	Return data as a string python 3 return as bytes.
<tt style='background-color:#E8E8E8;'> media.sources.Source <a href=' /media/sources/base.py#L259'>play</a>()</tt>	Play the source.
<tt style='background-color:#E8E8E8;'> media.sources.Source <a href=' /media/sources/base.py#L273'>get_animation</a>()</tt>	Import all video frames into memory as an animation.
<tt style='background-color:#E8E8E8;'> media.sources.Source <a href=' /media/sources/base.py#L305'>get_next_video_timestamp</a>()</tt>	Get the timestamp of the next video frame.
<tt style='background-color:#E8E8E8;'> media.sources.Source <a href=' /media/sources/base.py#L316'>get_next_video_frame</a>()</tt>	Get the next video frame.
<tt style='background-color:#E8E8E8;'> media.sources.Source <a href=' /media/sources/base.py#L333'>seek</a>(timestamp)</tt>	Seek to given timestamp.
<tt style='background-color:#E8E8E8;'> media.sources.Source <a href=' /media/sources/base.py#L337'>_get_queue_source</a>()</tt>	Return the source to be used as the queue source for a player.
<tt style='background-color:#E8E8E8;'> media.sources.Source <a href=' /media/sources/base.py#L343'>get_audio_data</a>(bytes)</tt>	Get next packet of audio data.
<tt style='background-color:#E8E8E8;'> media.sources.StreamingSource <a href=' /media/sources/base.py#L372'>_get_queue_source</a>()</tt>	Return the source to be used as the queue source for a player.
<tt style='background-color:#E8E8E8;'> media.sources.StaticSource <a href=' /media/sources/base.py#L389'>__init__</a>(source)</tt>	Construct a staticsource for the data in source.
<tt style='background-color:#E8E8E8;'> media.sources.StaticMemorySource <a href=' /media/sources/base.py#L435'>__init__</a>(data,audio_format)</tt>	Construct a memory source over the given data buffer.
<tt style='background-color:#E8E8E8;'> media.sources.SourceGroup <a href=' /media/sources/base.py#L544'>get_audio_data</a>(bytes)</tt>	Get next audio packet.
<tt style='background-color:#E8E8E8;'> media.sources.SourceGroup <a href=' /media/sources/base.py#L584'>translate_timestamp</a>(timestamp)</tt>	Get source-relative timestamp for the audio player's timestamp.
<tt style='background-color:#E8E8E8;'> media.sources.SourceGroup <a href=' /media/sources/base.py#L600'>get_next_video_timestamp</a>()</tt>	Get the timestamp of the next video frame.
<tt style='background-color:#E8E8E8;'> media.sources.SourceGroup <a href=' /media/sources/base.py#L616'>get_next_video_frame</a>()</tt>	Get the next video frame.
<tt style='background-color:#E8E8E8;'> media.sources.AVbinSource <a href=' /media/sources/avbin.py#L515'>_ensure_video_packets</a>()</tt>	Process packets until a video packet has been queued and begun decoding.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L42'>__init__</a>(source_group,player)</tt>	Create a new audio player.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L59'>stop</a>()</tt>	Stop pause playback.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L63'>delete</a>()</tt>	Stop playing and clean up all resources used by player.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L67'>_play_group</a>(audio_players)</tt>	Begin simultaneous playback on a list of audio players.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L73'>_stop_group</a>(audio_players)</tt>	Stop simultaneous playback on a list of audio players.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L79'>clear</a>()</tt>	Clear all buffered data and prepare for replacement data.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L86'>get_time</a>()</tt>	Return approximation of current playback time within current source.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L98'>set_volume</a>(volume)</tt>	See player volume.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L102'>set_position</a>(position)</tt>	See player position.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L106'>set_min_distance</a>(min_distance)</tt>	See player min_distance.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L110'>set_max_distance</a>(max_distance)</tt>	See player max_distance.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L114'>set_pitch</a>(pitch)</tt>	See player pitch.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L118'>set_cone_orientation</a>(cone_orientation)</tt>	See player cone_orientation.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L122'>set_cone_inner_angle</a>(cone_inner_angle)</tt>	See player cone_inner_angle.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L126'>set_cone_outer_angle</a>(cone_outer_angle)</tt>	See player cone_outer_angle.
<tt style='background-color:#E8E8E8;'> media.drivers.AbstractAudioPlayer <a href=' /media/drivers/base.py#L130'>set_cone_outer_gain</a>(cone_outer_gain)</tt>	See player cone_outer_gain.
<tt style='background-color:#E8E8E8;'> media.drivers.SilentAudioPacket <a href=' /media/drivers/silent.py#L53'>consume</a>(dt)</tt>	Try to consume dt seconds of audio data return number of seconds consumed.
<tt style='background-color:#E8E8E8;'> media.drivers.SilentAudioPlayerPacketConsumer <a href=' /media/drivers/silent.py#L240'>_consume_data</a>()</tt>	Consume content of packets that should have been played back up to now.
<tt style='background-color:#E8E8E8;'> media.drivers.SilentAudioPlayerPacketConsumer <a href=' /media/drivers/silent.py#L254'>_calculate_offset</a>()</tt>	Calculate the current offset into the cached packages.
<tt style='background-color:#E8E8E8;'> media.drivers.SilentAudioPlayerPacketConsumer <a href=' /media/drivers/silent.py#L267'>_buffer_data</a>()</tt>	Read data from the audio source into the internal buffer.
<tt style='background-color:#E8E8E8;'> media.drivers.SilentAudioPlayerPacketConsumer <a href=' /media/drivers/silent.py#L287'>_add_audio_data</a>(audio_data)</tt>	Add a package of audio data to the internal buffer update timestamps to reflect.
<tt style='background-color:#E8E8E8;'> media.drivers.SilentAudioPlayerPacketConsumer <a href=' /media/drivers/silent.py#L293'>_get_sleep_time</a>()</tt>	Determine how long to sleep until next event or next batch of data needs to be read.
<tt style='background-color:#E8E8E8;'> media.drivers.SilentAudioPlayerPacketConsumer <a href=' /media/drivers/silent.py#L318'>_dispatch_events</a>()</tt>	Dispatch any events for the current timestamp.
<tt style='background-color:#E8E8E8;'> media.drivers.directsound.DirectSoundBufferFactory <a href=' /media/drivers/directsound/interface.py#L142'>_create_primary_buffer_desc</a>(cls)</tt>	Primary buffer with 3d and volume capabilities.
<tt style='background-color:#E8E8E8;'> media.drivers.directsound.DirectSoundBuffer <a href=' /media/drivers/directsound/interface.py#L205'>current_position</a>()</tt>	Tuple of current play position and current write position.
<tt style='background-color:#E8E8E8;'> media.drivers.directsound.DirectSoundBuffer <a href=' /media/drivers/directsound/interface.py#L262'>min_distance</a>()</tt>	The minimum distance which is the distance from the listener at which sounds in this buffer begin to be attenuated.
<tt style='background-color:#E8E8E8;'> media.drivers.directsound.DirectSoundBuffer <a href=' /media/drivers/directsound/interface.py#L282'>max_distance</a>()</tt>	The maximum distance which is the distance from the listener beyond which sounds in this buffer are no longer attenuated.
<tt style='background-color:#E8E8E8;'> media.drivers.directsound.DirectSoundBuffer <a href=' /media/drivers/directsound/interface.py#L297'>frequency</a>(value)</tt>	The frequency in samples per second at which the buffer is playing.
<tt style='background-color:#E8E8E8;'> media.drivers.directsound.DirectSoundBuffer <a href=' /media/drivers/directsound/interface.py#L316'>cone_orientation</a>()</tt>	The orientation of the sound projection cone.
<tt style='background-color:#E8E8E8;'> media.drivers.directsound.DirectSoundBuffer <a href=' /media/drivers/directsound/interface.py#L325'>cone_angles</a>()</tt>	The inside and outside angles of the sound projection cone.
<tt style='background-color:#E8E8E8;'> media.drivers.directsound.DirectSoundBuffer <a href=' /media/drivers/directsound/interface.py#L338'>set_cone_angles</a>(inside,outside)</tt>	The inside and outside angles of the sound projection cone.
<tt style='background-color:#E8E8E8;'> media.drivers.directsound.DirectSoundBuffer <a href=' /media/drivers/directsound/interface.py#L357'>cone_outside_volume</a>()</tt>	The volume of the sound outside the outside angle of the sound projection cone.
<tt style='background-color:#E8E8E8;'> media.drivers.directsound. <a href=' /media/drivers/directsound/adaptation.py#L55'>_gain2db</a>(gain)</tt>	Convert linear gain in range [0 0 1 0] to 100ths of db.
<tt style='background-color:#E8E8E8;'> media.drivers.directsound. <a href=' /media/drivers/directsound/adaptation.py#L68'>_db2gain</a>(db)</tt>	Convert 100ths of db to linear gain.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioMainLoop <a href=' /media/drivers/pulse/interface.py#L93'>start</a>()</tt>	Start running the mainloop.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioMainLoop <a href=' /media/drivers/pulse/interface.py#L102'>delete</a>()</tt>	Clean up the mainloop.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioMainLoop <a href=' /media/drivers/pulse/interface.py#L112'>lock</a>()</tt>	Lock the threaded mainloop against events required for all.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioMainLoop <a href=' /media/drivers/pulse/interface.py#L119'>unlock</a>()</tt>	Unlock the mainloop thread.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioMainLoop <a href=' /media/drivers/pulse/interface.py#L127'>signal</a>()</tt>	Signal the mainloop thread to break from a wait.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioMainLoop <a href=' /media/drivers/pulse/interface.py#L132'>wait</a>()</tt>	Wait for a signal.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioMainLoop <a href=' /media/drivers/pulse/interface.py#L147'>_context_new</a>()</tt>	Construct a new context in this mainloop.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioMainLoop <a href=' /media/drivers/pulse/interface.py#L153'>_get_app_name</a>()</tt>	Get the application name as advertised to the pulseaudio server.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioLockable <a href=' /media/drivers/pulse/interface.py#L170'>lock</a>()</tt>	Lock the threaded mainloop against events required for all.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioLockable <a href=' /media/drivers/pulse/interface.py#L175'>unlock</a>()</tt>	Unlock the mainloop thread.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioLockable <a href=' /media/drivers/pulse/interface.py#L179'>signal</a>()</tt>	Signal the mainloop thread to break from a wait.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioLockable <a href=' /media/drivers/pulse/interface.py#L183'>wait</a>()</tt>	Wait for a signal.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioContext <a href=' /media/drivers/pulse/interface.py#L216'>delete</a>()</tt>	Completely shut down pulseaudio client.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioContext <a href=' /media/drivers/pulse/interface.py#L261'>connect</a>(server)</tt>	Connect the context to a pulseaudio server.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioContext <a href=' /media/drivers/pulse/interface.py#L283'>create_stream</a>(audio_format)</tt>	Create a new audio stream.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioContext <a href=' /media/drivers/pulse/interface.py#L300'>create_sample_spec</a>(audio_format)</tt>	Create a pulseaudio sample spec from pyglet audio format.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioContext <a href=' /media/drivers/pulse/interface.py#L318'>set_input_volume</a>(stream,volume)</tt>	Set the volume for a stream.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioStream <a href=' /media/drivers/pulse/interface.py#L597'>on_write_needed</a>(nbytes,underflow)</tt>	A write is requested from pulseaudio.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioOperation <a href=' /media/drivers/pulse/interface.py#L661'>wait</a>()</tt>	Wait until operation is either done or cancelled.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioDriver <a href=' /media/drivers/pulse/adaptation.py#L65'>connect</a>(server)</tt>	Connect to pulseaudio server.
<tt style='background-color:#E8E8E8;'> media.drivers.pulse.PulseAudioDriver <a href=' /media/drivers/pulse/adaptation.py#L88'>delete</a>()</tt>	Completely shut down pulseaudio client.
<tt style='background-color:#E8E8E8;'> media.drivers.openal.OpenALObject <a href=' /media/drivers/openal/interface.py#L67'>_check_error</a>(cls,message)</tt>	Check whether there is an openal error and raise exception if present.
<tt style='background-color:#E8E8E8;'> media.drivers.openal.OpenALObject <a href=' /media/drivers/openal/interface.py#L79'>_raise_error</a>(cls,message)</tt>	Raise an exception try to check for openal error code too.
<tt style='background-color:#E8E8E8;'> media.drivers.openal.OpenALDevice <a href=' /media/drivers/openal/interface.py#L150'>check_context_error</a>(message)</tt>	Check whether there is an openal error and raise exception if present.
<tt style='background-color:#E8E8E8;'> media.drivers.openal.OpenALDevice <a href=' /media/drivers/openal/interface.py#L161'>_raise_context_error</a>(message)</tt>	Raise an exception try to check for openal error code too.
<tt style='background-color:#E8E8E8;'> media.drivers.openal.OpenALBufferPool <a href=' /media/drivers/openal/interface.py#L500'>get_buffer</a>()</tt>	Convenience for returning one buffer name.
<tt style='background-color:#E8E8E8;'> media.drivers.openal.OpenALBufferPool <a href=' /media/drivers/openal/interface.py#L504'>get_buffers</a>(number)</tt>	Returns an array containing number buffer names the returned list must.
<tt style='background-color:#E8E8E8;'> media.drivers.openal.OpenALBufferPool <a href=' /media/drivers/openal/interface.py#L523'>unqueue_buffer</a>(buf)</tt>	A buffer has finished playing free it.
<tt style='background-color:#E8E8E8;'> media.drivers.openal.OpenALBufferPool <a href=' /media/drivers/openal/interface.py#L528'>create_buffer</a>()</tt>	Create a new buffer.
<tt style='background-color:#E8E8E8;'> gl.GLUInfo <a href=' /gl/glu_info.py#L85'>set_active_context</a>()</tt>	Store information for the currently active context.
<tt style='background-color:#E8E8E8;'> gl.GLUInfo <a href=' /gl/glu_info.py#L97'>have_version</a>(major,minor,release)</tt>	Determine if a version of glu is supported.
<tt style='background-color:#E8E8E8;'> gl.GLUInfo <a href=' /gl/glu_info.py#L119'>get_version</a>()</tt>	Get the current glu version.
<tt style='background-color:#E8E8E8;'> gl.GLUInfo <a href=' /gl/glu_info.py#L129'>have_extension</a>(extension)</tt>	Determine if a glu extension is available.
<tt style='background-color:#E8E8E8;'> gl.GLUInfo <a href=' /gl/glu_info.py#L144'>get_extensions</a>()</tt>	Get a list of available glu extensions.
<tt style='background-color:#E8E8E8;'> gl.Config <a href=' /gl/base.py#L87'>__init__</a>()</tt>	Create a template config with the given attributes.
<tt style='background-color:#E8E8E8;'> gl.Config <a href=' /gl/base.py#L108'>get_gl_attributes</a>()</tt>	Return a list of attributes set on this config.
<tt style='background-color:#E8E8E8;'> gl.Config <a href=' /gl/base.py#L117'>match</a>(canvas)</tt>	Return a list of matching complete configs for the given canvas.
<tt style='background-color:#E8E8E8;'> gl.Config <a href=' /gl/base.py#L130'>create_context</a>(share)</tt>	Create a gl context that satisifies this configuration.
<tt style='background-color:#E8E8E8;'> gl.Config <a href=' /gl/base.py#L146'>is_complete</a>()</tt>	Determine if this config is complete and able to create a context.
<tt style='background-color:#E8E8E8;'> gl.CanvasConfig <a href=' /gl/base.py#L189'>create_context</a>(share)</tt>	Create a gl context that satisifies this configuration.
<tt style='background-color:#E8E8E8;'> gl.Context <a href=' /gl/base.py#L326'>destroy</a>()</tt>	Release the context.
<tt style='background-color:#E8E8E8;'> gl.Context <a href=' /gl/base.py#L344'>delete_texture</a>(texture_id)</tt>	Safely delete a texture belonging to this context.
<tt style='background-color:#E8E8E8;'> gl.Context <a href=' /gl/base.py#L363'>delete_buffer</a>(buffer_id)</tt>	Safely delete a buffer object belonging to this context.
<tt style='background-color:#E8E8E8;'> gl.Context <a href=' /gl/base.py#L381'>get_info</a>()</tt>	Get the opengl information for this context.
<tt style='background-color:#E8E8E8;'> gl.GLInfo <a href=' /gl/gl_info.py#L87'>set_active_context</a>()</tt>	Store information for the currently active context.
<tt style='background-color:#E8E8E8;'> gl.GLInfo <a href=' /gl/gl_info.py#L115'>have_extension</a>(extension)</tt>	Determine if an opengl extension is available.
<tt style='background-color:#E8E8E8;'> gl.GLInfo <a href=' /gl/gl_info.py#L130'>get_extensions</a>()</tt>	Get a list of available opengl extensions.
<tt style='background-color:#E8E8E8;'> gl.GLInfo <a href=' /gl/gl_info.py#L140'>get_version</a>()</tt>	Get the current opengl version.
<tt style='background-color:#E8E8E8;'> gl.GLInfo <a href=' /gl/gl_info.py#L150'>have_version</a>(major,minor,release)</tt>	Determine if a version of opengl is supported.
<tt style='background-color:#E8E8E8;'> gl.GLInfo <a href=' /gl/gl_info.py#L175'>get_renderer</a>()</tt>	Determine the renderer string of the opengl context.
<tt style='background-color:#E8E8E8;'> gl.GLInfo <a href=' /gl/gl_info.py#L184'>get_vendor</a>()</tt>	Determine the vendor string of the opengl context.
<tt style='background-color:#E8E8E8;'> gl. <a href=' /gl/gl_info.py#L206'>have_context</a>()</tt>	Determine if a default opengl context has been set yet.
<tt style='background-color:#E8E8E8;'> gl.Win32Config <a href=' /gl/win32.py#L31'>_get_pixel_format_descriptor_matching_configs</a>(canvas)</tt>	Get matching configs using standard pixelformatdescriptor technique.
<tt style='background-color:#E8E8E8;'> gl.Win32Config <a href=' /gl/win32.py#L79'>_get_arb_pixel_format_matching_configs</a>(canvas)</tt>	Get configs using the wgl_arb_pixel_format extension.
<tt style='background-color:#E8E8E8;'> gl. <a href=' /gl/__init__.py#L119'>get_current_context</a>()</tt>	Return the active opengl context.
<tt style='background-color:#E8E8E8;'> image. <a href=' /image/__init__.py#L158'>load</a>(filename,file,decoder)</tt>	Load an image from a file.
<tt style='background-color:#E8E8E8;'> image. <a href=' /image/__init__.py#L211'>create</a>(width,height,pattern)</tt>	Create an image optionally filled with the given pattern.
<tt style='background-color:#E8E8E8;'> image.ImagePattern <a href=' /image/__init__.py#L246'>create_image</a>(width,height)</tt>	Create an image of the given size.
<tt style='background-color:#E8E8E8;'> image.SolidColorImagePattern <a href=' /image/__init__.py#L263'>__init__</a>(color)</tt>	Create a solid image pattern with the given color.
<tt style='background-color:#E8E8E8;'> image.CheckerImagePattern <a href=' /image/__init__.py#L283'>__init__</a>(color1,color2)</tt>	Initialise with the given colors.
<tt style='background-color:#E8E8E8;'> image.AbstractImage <a href=' /image/__init__.py#L334'>get_image_data</a>()</tt>	Get an imagedata view of this image.
<tt style='background-color:#E8E8E8;'> image.AbstractImage <a href=' /image/__init__.py#L346'>image_data</a>()</tt>	An imagedata view of this image.
<tt style='background-color:#E8E8E8;'> image.AbstractImage <a href=' /image/__init__.py#L359'>get_texture</a>(rectangle,force_rectangle)</tt>	A texture view of this image.
<tt style='background-color:#E8E8E8;'> image.AbstractImage <a href=' /image/__init__.py#L399'>texture</a>()</tt>	Get a texture view of this image.
<tt style='background-color:#E8E8E8;'> image.AbstractImage <a href=' /image/__init__.py#L412'>get_mipmapped_texture</a>()</tt>	Retrieve a texture instance with all mipmap levels filled in.
<tt style='background-color:#E8E8E8;'> image.AbstractImage <a href=' /image/__init__.py#L423'>mipmapped_texture</a>()</tt>	A texture view of this image.
<tt style='background-color:#E8E8E8;'> image.AbstractImage <a href=' /image/__init__.py#L436'>get_region</a>(x,y,width,height)</tt>	Retrieve a rectangular region of this image.
<tt style='background-color:#E8E8E8;'> image.AbstractImage <a href=' /image/__init__.py#L453'>save</a>(filename,file,encoder)</tt>	Save this image to a file.
<tt style='background-color:#E8E8E8;'> image.AbstractImage <a href=' /image/__init__.py#L488'>blit</a>(x,y,z)</tt>	Draw this image to the active framebuffers.
<tt style='background-color:#E8E8E8;'> image.AbstractImage <a href=' /image/__init__.py#L496'>blit_into</a>(source,x,y,z)</tt>	Draw source on this image.
<tt style='background-color:#E8E8E8;'> image.AbstractImage <a href=' /image/__init__.py#L509'>blit_to_texture</a>(target,level,x,y)</tt>	Draw this image on the currently bound texture at target.
<tt style='background-color:#E8E8E8;'> image.AbstractImageSequence <a href=' /image/__init__.py#L529'>get_texture_sequence</a>()</tt>	Get a texturesequence.
<tt style='background-color:#E8E8E8;'> image.AbstractImageSequence <a href=' /image/__init__.py#L538'>texture_sequence</a>()</tt>	Access this image sequence as a texture sequence.
<tt style='background-color:#E8E8E8;'> image.AbstractImageSequence <a href=' /image/__init__.py#L548'>get_animation</a>(period,loop)</tt>	Create an animation over this image sequence for the given constant framerate.
<tt style='background-color:#E8E8E8;'> image.AbstractImageSequence <a href=' /image/__init__.py#L564'>__getitem__</a>(slice)</tt>	Retrieve a list of image.
<tt style='background-color:#E8E8E8;'> image.AbstractImageSequence <a href=' /image/__init__.py#L571'>__setitem__</a>(slice,image)</tt>	Replace one or more images in the sequence.
<tt style='background-color:#E8E8E8;'> image.AbstractImageSequence <a href=' /image/__init__.py#L585'>__iter__</a>()</tt>	Iterate over the images in sequence.
<tt style='background-color:#E8E8E8;'> image.ImageData <a href=' /image/__init__.py#L657'>__init__</a>(width,height,format,data)</tt>	Initialise image data.
<tt style='background-color:#E8E8E8;'> image.ImageData <a href=' /image/__init__.py#L711'>format</a>()</tt>	Format string of the data read-write.
<tt style='background-color:#E8E8E8;'> image.ImageData <a href=' /image/__init__.py#L742'>data</a>()</tt>	The byte data of the image read-write.
<tt style='background-color:#E8E8E8;'> image.ImageData <a href=' /image/__init__.py#L746'>get_data</a>(format,pitch)</tt>	Get the byte data of the image.
<tt style='background-color:#E8E8E8;'> image.ImageData <a href=' /image/__init__.py#L764'>set_data</a>(format,pitch,data)</tt>	Set the byte data of the image.
<tt style='background-color:#E8E8E8;'> image.ImageData <a href=' /image/__init__.py#L784'>set_mipmap_image</a>(level,image)</tt>	Set a mipmap image for a particular level.
<tt style='background-color:#E8E8E8;'> image.ImageData <a href=' /image/__init__.py#L819'>create_texture</a>(cls,rectangle,force_rectangle)</tt>	Create a texture containing this image.
<tt style='background-color:#E8E8E8;'> image.ImageData <a href=' /image/__init__.py#L862'>get_mipmapped_texture</a>()</tt>	Return a texture with mipmaps.
<tt style='background-color:#E8E8E8;'> image.ImageData <a href=' /image/__init__.py#L913'>get_region</a>(x,y,width,height)</tt>	Retrieve a rectangular region of this image data.
<tt style='background-color:#E8E8E8;'> image.ImageData <a href=' /image/__init__.py#L933'>blit_to_texture</a>(target,level,x,y)</tt>	Draw this image to to the currently bound texture at target.
<tt style='background-color:#E8E8E8;'> image.ImageData <a href=' /image/__init__.py#L1039'>_convert</a>(format,pitch)</tt>	Return data in the desired format does not alter this instance's current format or pitch.
<tt style='background-color:#E8E8E8;'> image.CompressedImageData <a href=' /image/__init__.py#L1260'>__init__</a>(width,height,gl_format,data)</tt>	Construct a compressedimagedata with the given compressed data.
<tt style='background-color:#E8E8E8;'> image.CompressedImageData <a href=' /image/__init__.py#L1292'>set_mipmap_data</a>(level,data)</tt>	Set data for a mipmap level.
<tt style='background-color:#E8E8E8;'> image.CompressedImageData <a href=' /image/__init__.py#L1316'>_verify_driver_supported</a>()</tt>	Assert that the extension required for this image data is supported.
<tt style='background-color:#E8E8E8;'> image.Texture <a href=' /image/__init__.py#L1476'>delete</a>()</tt>	Delete the texture from video memory.
<tt style='background-color:#E8E8E8;'> image.Texture <a href=' /image/__init__.py#L1494'>create</a>(cls,width,height,internalformat)</tt>	Create an empty texture.
<tt style='background-color:#E8E8E8;'> image.Texture <a href=' /image/__init__.py#L1583'>create_for_size</a>(cls,target,min_width,min_height)</tt>	Create a texture with dimensions at least min_width min_height.
<tt style='background-color:#E8E8E8;'> image.Texture <a href=' /image/__init__.py#L1645'>get_image_data</a>(z)</tt>	Get the image data of this texture.
<tt style='background-color:#E8E8E8;'> image.Texture <a href=' /image/__init__.py#L1677'>image_data</a>()</tt>	An imagedata view of this texture.
<tt style='background-color:#E8E8E8;'> image.Texture <a href=' /image/__init__.py#L1730'>get_transform</a>(flip_x,flip_y,rotate)</tt>	Create a copy of this image applying a simple transformation.
<tt style='background-color:#E8E8E8;'> image.TileableTexture <a href=' /image/__init__.py#L1935'>blit_tiled</a>(x,y,z,width)</tt>	Blit this texture tiled over the given area.
<tt style='background-color:#E8E8E8;'> image.BufferManager <a href=' /image/__init__.py#L2021'>get_viewport</a>()</tt>	Get the current opengl viewport dimensions.
<tt style='background-color:#E8E8E8;'> image.BufferManager <a href=' /image/__init__.py#L2031'>get_color_buffer</a>()</tt>	Get the color buffer.
<tt style='background-color:#E8E8E8;'> image.BufferManager <a href=' /image/__init__.py#L2045'>get_aux_buffer</a>()</tt>	Get a free auxiliary buffer.
<tt style='background-color:#E8E8E8;'> image.BufferManager <a href=' /image/__init__.py#L2068'>get_depth_buffer</a>()</tt>	Get the depth buffer.
<tt style='background-color:#E8E8E8;'> image.BufferManager <a href=' /image/__init__.py#L2082'>get_buffer_mask</a>()</tt>	Get a free bitmask buffer.
<tt style='background-color:#E8E8E8;'> image. <a href=' /image/__init__.py#L2107'>get_buffer_manager</a>()</tt>	Get the buffer manager for the current opengl context.
<tt style='background-color:#E8E8E8;'> image.ImageGrid <a href=' /image/__init__.py#L2255'>__init__</a>(image,rows,columns,item_width)</tt>	Construct a grid for the given image.
<tt style='background-color:#E8E8E8;'> image. <a href=' /image/__init__.py#L2474'>load_animation</a>(filename,file,decoder)</tt>	Load an animation from a file.
<tt style='background-color:#E8E8E8;'> image.Animation <a href=' /image/__init__.py#L2527'>__init__</a>(frames)</tt>	Create an animation directly from a list of frames.
<tt style='background-color:#E8E8E8;'> image.Animation <a href=' /image/__init__.py#L2538'>add_to_texture_bin</a>(bin)</tt>	Add the images of the animation to a texturebin.
<tt style='background-color:#E8E8E8;'> image.Animation <a href=' /image/__init__.py#L2552'>get_transform</a>(flip_x,flip_y,rotate)</tt>	Create a copy of this animation applying a simple transformation.
<tt style='background-color:#E8E8E8;'> image.Animation <a href=' /image/__init__.py#L2574'>get_duration</a>()</tt>	Get the total duration of the animation in seconds.
<tt style='background-color:#E8E8E8;'> image.Animation <a href=' /image/__init__.py#L2581'>get_max_width</a>()</tt>	Get the maximum image frame width.
<tt style='background-color:#E8E8E8;'> image.Animation <a href=' /image/__init__.py#L2592'>get_max_height</a>()</tt>	Get the maximum image frame height.
<tt style='background-color:#E8E8E8;'> image.Animation <a href=' /image/__init__.py#L2603'>from_image_sequence</a>(cls,sequence,period,loop)</tt>	Create an animation from a list of images and a constant framerate.
<tt style='background-color:#E8E8E8;'> image.AnimationFrame <a href=' /image/__init__.py#L2627'>__init__</a>(image,duration)</tt>	Create an animation frame from an image.
<tt style='background-color:#E8E8E8;'> image. <a href=' /image/atlas.py#L71'>get_max_texture_size</a>()</tt>	Query the maximum texture size available.
<tt style='background-color:#E8E8E8;'> image.Allocator <a href=' /image/atlas.py#L114'>__init__</a>(width,height)</tt>	Create an allocator of the given size.
<tt style='background-color:#E8E8E8;'> image.Allocator <a href=' /image/atlas.py#L130'>alloc</a>(width,height)</tt>	Get a free area in the allocator of the given size.
<tt style='background-color:#E8E8E8;'> image.Allocator <a href=' /image/atlas.py#L162'>get_usage</a>()</tt>	Get the fraction of area already allocated.
<tt style='background-color:#E8E8E8;'> image.Allocator <a href=' /image/atlas.py#L171'>get_fragmentation</a>()</tt>	Get the fraction of area that's unlikely to ever be used based on current allocation behaviour.
<tt style='background-color:#E8E8E8;'> image.TextureAtlas <a href=' /image/atlas.py#L188'>__init__</a>(width,height)</tt>	Create a texture atlas of the given size.
<tt style='background-color:#E8E8E8;'> image.TextureAtlas <a href=' /image/atlas.py#L206'>add</a>(img)</tt>	Add an image to the atlas.
<tt style='background-color:#E8E8E8;'> image.TextureBin <a href=' /image/atlas.py#L235'>__init__</a>(texture_width,texture_height)</tt>	Create a texture bin for holding atlases of the given size.
<tt style='background-color:#E8E8E8;'> image.TextureBin <a href=' /image/atlas.py#L253'>add</a>(img)</tt>	Add an image into this texture bin.
<tt style='background-color:#E8E8E8;'> image.codecs.PackedImageData <a href=' /image/codecs/s3tc.py#L96'>get_texture</a>(rectangle,force_rectangle)</tt>	The parameters 'rectangle' and 'force_rectangle' are ignored.
<tt style='background-color:#E8E8E8;'> image.codecs. <a href=' /image/codecs/gif.py#L79'>read</a>(file)</tt>	Read a gif file stream.
<tt style='background-color:#E8E8E8;'> image.codecs. <a href=' /image/codecs/gdkpixbuf2.py#L81'>_gerror_to_string</a>(error)</tt>	Convert a gerror to a string.
<tt style='background-color:#E8E8E8;'> image.codecs.ImageDecoder <a href=' /image/codecs/__init__.py#L73'>get_file_extensions</a>()</tt>	Return a list of accepted file extensions e g [' png', ' bmp'].
<tt style='background-color:#E8E8E8;'> image.codecs.ImageDecoder <a href=' /image/codecs/__init__.py#L79'>get_animation_file_extensions</a>()</tt>	Return a list of accepted file extensions e g [' gif', ' flc'].
<tt style='background-color:#E8E8E8;'> image.codecs.ImageDecoder <a href=' /image/codecs/__init__.py#L85'>decode</a>(file,filename)</tt>	Decode the given file object and return an instance of image.
<tt style='background-color:#E8E8E8;'> image.codecs.ImageDecoder <a href=' /image/codecs/__init__.py#L92'>decode_animation</a>(file,filename)</tt>	Decode the given file object and return an instance of animation.
<tt style='background-color:#E8E8E8;'> image.codecs.ImageEncoder <a href=' /image/codecs/__init__.py#L100'>get_file_extensions</a>()</tt>	Return a list of accepted file extensions e g [' png', ' bmp'].
<tt style='background-color:#E8E8E8;'> image.codecs.ImageEncoder <a href=' /image/codecs/__init__.py#L106'>encode</a>(image,file,filename,options)</tt>	Encode the given image to the given file filename.
<tt style='background-color:#E8E8E8;'> image.codecs. <a href=' /image/codecs/__init__.py#L114'>get_encoders</a>(filename)</tt>	Get an ordered list of encoders to attempt filename can be used.
<tt style='background-color:#E8E8E8;'> image.codecs. <a href=' /image/codecs/__init__.py#L125'>get_decoders</a>(filename)</tt>	Get an ordered list of decoders to attempt filename can be used.
<tt style='background-color:#E8E8E8;'> image.codecs. <a href=' /image/codecs/__init__.py#L136'>get_animation_decoders</a>(filename)</tt>	Get an ordered list of decoders to attempt filename can be used.
<tt style='background-color:#E8E8E8;'> image.codecs. <a href=' /image/codecs/__init__.py#L147'>add_decoders</a>(module)</tt>	Add a decoder module the module must define get_decoders once.
<tt style='background-color:#E8E8E8;'> image.codecs. <a href=' /image/codecs/__init__.py#L163'>add_encoders</a>(module)</tt>	Add an encoder module the module must define get_encoders once.
<tt style='background-color:#E8E8E8;'> input.CarbonTabletCanvas <a href=' /input/carbon_tablet.py#L62'>_tablet_event</a>(next_handler,ev,data)</tt>	Process tablet event and return true if some event was processed.
<tt style='background-color:#E8E8E8;'> input.Device <a href=' /input/base.py#L84'>open</a>(window,exclusive)</tt>	Open the device to begin receiving input from it.
<tt style='background-color:#E8E8E8;'> input.Device <a href=' /input/base.py#L105'>close</a>()</tt>	Close the device.
<tt style='background-color:#E8E8E8;'> input.Device <a href=' /input/base.py#L109'>get_controls</a>()</tt>	Get a list of controls provided by the device.
<tt style='background-color:#E8E8E8;'> input.Control <a href=' /input/base.py#L159'>value</a>()</tt>	Current value of the control.
<tt style='background-color:#E8E8E8;'> input.Joystick <a href=' /input/base.py#L463'>open</a>(window,exclusive)</tt>	Open the joystick device see device open.
<tt style='background-color:#E8E8E8;'> input.Joystick <a href=' /input/base.py#L467'>close</a>()</tt>	Close the joystick device see device close.
<tt style='background-color:#E8E8E8;'> input.Joystick <a href=' /input/base.py#L471'>on_joyaxis_motion</a>(joystick,axis,value)</tt>	The value of a joystick axis changed.
<tt style='background-color:#E8E8E8;'> input.Joystick <a href=' /input/base.py#L483'>on_joybutton_press</a>(joystick,button)</tt>	A button on the joystick was pressed.
<tt style='background-color:#E8E8E8;'> input.Joystick <a href=' /input/base.py#L493'>on_joybutton_release</a>(joystick,button)</tt>	A button on the joystick was released.
<tt style='background-color:#E8E8E8;'> input.Joystick <a href=' /input/base.py#L503'>on_joyhat_motion</a>(joystick,hat_x,hat_y)</tt>	The value of the joystick hat switch changed.
<tt style='background-color:#E8E8E8;'> input.AppleRemote <a href=' /input/base.py#L573'>open</a>(window,exclusive)</tt>	Open the device see device open.
<tt style='background-color:#E8E8E8;'> input.AppleRemote <a href=' /input/base.py#L577'>close</a>()</tt>	Close the device see device close.
<tt style='background-color:#E8E8E8;'> input.AppleRemote <a href=' /input/base.py#L581'>on_button_press</a>(button)</tt>	A button on the remote was pressed.
<tt style='background-color:#E8E8E8;'> input.AppleRemote <a href=' /input/base.py#L598'>on_button_release</a>(button)</tt>	A button on the remote was released.
<tt style='background-color:#E8E8E8;'> input.Tablet <a href=' /input/base.py#L630'>open</a>(window)</tt>	Open a tablet device for a window.
<tt style='background-color:#E8E8E8;'> input.TabletCanvas <a href=' /input/base.py#L666'>close</a>()</tt>	Close the tablet device for this window.
<tt style='background-color:#E8E8E8;'> input. <a href=' /input/__init__.py#L93'>get_apple_remote</a>(display)</tt>	Get the apple remote control device.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/vertexattribute.py#L180'>interleave_attributes</a>(attributes)</tt>	Interleave attribute offsets.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/vertexattribute.py#L202'>serialize_attributes</a>(count,attributes)</tt>	Serialize attribute offsets.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/vertexattribute.py#L221'>create_attribute</a>(format)</tt>	Create a vertex attribute description from a format string.
<tt style='background-color:#E8E8E8;'> graphics.AbstractAttribute <a href=' /graphics/vertexattribute.py#L271'>__init__</a>(count,gl_type)</tt>	Create the attribute accessor.
<tt style='background-color:#E8E8E8;'> graphics.AbstractAttribute <a href=' /graphics/vertexattribute.py#L290'>enable</a>()</tt>	Enable the attribute using glenableclientstate.
<tt style='background-color:#E8E8E8;'> graphics.AbstractAttribute <a href=' /graphics/vertexattribute.py#L294'>set_pointer</a>(offset)</tt>	Setup this attribute to point to the currently bound buffer at the given offset.
<tt style='background-color:#E8E8E8;'> graphics.AbstractAttribute <a href=' /graphics/vertexattribute.py#L309'>get_region</a>(buffer,start,count)</tt>	Map a buffer region using this attribute as an accessor.
<tt style='background-color:#E8E8E8;'> graphics.AbstractAttribute <a href=' /graphics/vertexattribute.py#L350'>set_region</a>(buffer,start,count,data)</tt>	Set the data over a region of the buffer.
<tt style='background-color:#E8E8E8;'> graphics.TexCoordAttribute <a href=' /graphics/vertexattribute.py#L474'>convert_to_multi_tex_coord_attribute</a>()</tt>	Changes the class of the attribute to multitexcoordattribute.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/__init__.py#L176'>draw</a>(size,mode)</tt>	Draw a primitive immediately.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/__init__.py#L210'>draw_indexed</a>(size,mode,indices)</tt>	Draw a primitive with indexed vertices immediately.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/__init__.py#L255'>_parse_data</a>(data)</tt>	Given a list of data items returns (formats initial_arrays).
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/__init__.py#L278'>vertex_list</a>(count)</tt>	Create a vertexlist not associated with a batch group or mode.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/__init__.py#L294'>vertex_list_indexed</a>(count,indices)</tt>	Create an indexedvertexlist not associated with a batch group or mode.
<tt style='background-color:#E8E8E8;'> graphics.Batch <a href=' /graphics/__init__.py#L323'>__init__</a>()</tt>	Create a graphics batch.
<tt style='background-color:#E8E8E8;'> graphics.Batch <a href=' /graphics/__init__.py#L338'>invalidate</a>()</tt>	Force the batch to update the draw list.
<tt style='background-color:#E8E8E8;'> graphics.Batch <a href=' /graphics/__init__.py#L348'>add</a>(count,mode,group)</tt>	Add a vertex list to the batch.
<tt style='background-color:#E8E8E8;'> graphics.Batch <a href=' /graphics/__init__.py#L376'>add_indexed</a>(count,mode,group,indices)</tt>	Add an indexed vertex list to the batch.
<tt style='background-color:#E8E8E8;'> graphics.Batch <a href=' /graphics/__init__.py#L408'>migrate</a>(vertex_list,mode,group,batch)</tt>	Migrate a vertex list to another batch and/or group.
<tt style='background-color:#E8E8E8;'> graphics.Batch <a href=' /graphics/__init__.py#L476'>_update_draw_list</a>()</tt>	Visit group tree in preorder and create a list of bound methods to call.
<tt style='background-color:#E8E8E8;'> graphics.Batch <a href=' /graphics/__init__.py#L553'>draw</a>()</tt>	Draw the batch.
<tt style='background-color:#E8E8E8;'> graphics.Batch <a href=' /graphics/__init__.py#L562'>draw_subset</a>(vertex_lists)</tt>	Draw only some vertex lists in the batch.
<tt style='background-color:#E8E8E8;'> graphics.Group <a href=' /graphics/__init__.py#L609'>__init__</a>(parent)</tt>	Create a group.
<tt style='background-color:#E8E8E8;'> graphics.Group <a href=' /graphics/__init__.py#L623'>set_state</a>()</tt>	Apply the opengl state change.
<tt style='background-color:#E8E8E8;'> graphics.Group <a href=' /graphics/__init__.py#L629'>unset_state</a>()</tt>	Repeal the opengl state change.
<tt style='background-color:#E8E8E8;'> graphics.Group <a href=' /graphics/__init__.py#L635'>set_state_recursive</a>()</tt>	Set this group and its ancestry.
<tt style='background-color:#E8E8E8;'> graphics.Group <a href=' /graphics/__init__.py#L646'>unset_state_recursive</a>()</tt>	Unset this group and its ancestry.
<tt style='background-color:#E8E8E8;'> graphics.TextureGroup <a href=' /graphics/__init__.py#L674'>__init__</a>(texture,parent)</tt>	Create a texture group.
<tt style='background-color:#E8E8E8;'> graphics.OrderedGroup <a href=' /graphics/__init__.py#L719'>__init__</a>(order,parent)</tt>	Create an ordered group.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/vertexdomain.py#L94'>create_attribute_usage</a>(format)</tt>	Create an attribute and usage pair from a format string the.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/vertexdomain.py#L128'>create_domain</a>()</tt>	Create a vertex domain covering the given attribute usage formats.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/vertexdomain.py#L140'>create_indexed_domain</a>()</tt>	Create an indexed vertex domain covering the given attribute usage formats.
<tt style='background-color:#E8E8E8;'> graphics.VertexDomain <a href=' /graphics/vertexdomain.py#L246'>_safe_alloc</a>(count)</tt>	Allocate vertices resizing the buffers if necessary.
<tt style='background-color:#E8E8E8;'> graphics.VertexDomain <a href=' /graphics/vertexdomain.py#L258'>_safe_realloc</a>(start,count,new_count)</tt>	Reallocate vertices resizing the buffers if necessary.
<tt style='background-color:#E8E8E8;'> graphics.VertexDomain <a href=' /graphics/vertexdomain.py#L270'>create</a>(count)</tt>	Create a vertexlist in this domain.
<tt style='background-color:#E8E8E8;'> graphics.VertexDomain <a href=' /graphics/vertexdomain.py#L282'>draw</a>(mode,vertex_list)</tt>	Draw vertices in the domain.
<tt style='background-color:#E8E8E8;'> graphics.VertexList <a href=' /graphics/vertexdomain.py#L347'>get_size</a>()</tt>	Get the number of vertices in the list.
<tt style='background-color:#E8E8E8;'> graphics.VertexList <a href=' /graphics/vertexdomain.py#L354'>get_domain</a>()</tt>	Get the domain this vertex list belongs to.
<tt style='background-color:#E8E8E8;'> graphics.VertexList <a href=' /graphics/vertexdomain.py#L361'>draw</a>(mode)</tt>	Draw this vertex list in the given opengl mode.
<tt style='background-color:#E8E8E8;'> graphics.VertexList <a href=' /graphics/vertexdomain.py#L371'>resize</a>(count)</tt>	Resize this group.
<tt style='background-color:#E8E8E8;'> graphics.VertexList <a href=' /graphics/vertexdomain.py#L400'>delete</a>()</tt>	Delete this group.
<tt style='background-color:#E8E8E8;'> graphics.VertexList <a href=' /graphics/vertexdomain.py#L404'>migrate</a>(domain)</tt>	Move this group from its current domain and add to the specified one.
<tt style='background-color:#E8E8E8;'> graphics.IndexedVertexDomain <a href=' /graphics/vertexdomain.py#L659'>_safe_index_alloc</a>(count)</tt>	Allocate indices resizing the buffers if necessary.
<tt style='background-color:#E8E8E8;'> graphics.IndexedVertexDomain <a href=' /graphics/vertexdomain.py#L670'>_safe_index_realloc</a>(start,count,new_count)</tt>	Reallocate indices resizing the buffers if necessary.
<tt style='background-color:#E8E8E8;'> graphics.IndexedVertexDomain <a href=' /graphics/vertexdomain.py#L681'>create</a>(count,index_count)</tt>	Create an indexedvertexlist in this domain.
<tt style='background-color:#E8E8E8;'> graphics.IndexedVertexDomain <a href=' /graphics/vertexdomain.py#L695'>get_index_region</a>(start,count)</tt>	Get a region of the index buffer.
<tt style='background-color:#E8E8E8;'> graphics.IndexedVertexDomain <a href=' /graphics/vertexdomain.py#L711'>draw</a>(mode,vertex_list)</tt>	Draw vertices in the domain.
<tt style='background-color:#E8E8E8;'> graphics.IndexedVertexList <a href=' /graphics/vertexdomain.py#L780'>resize</a>(count,index_count)</tt>	Resize this group.
<tt style='background-color:#E8E8E8;'> graphics.IndexedVertexList <a href=' /graphics/vertexdomain.py#L812'>delete</a>()</tt>	Delete this group.
<tt style='background-color:#E8E8E8;'> graphics.IndexedVertexList <a href=' /graphics/vertexdomain.py#L817'>migrate</a>(domain)</tt>	Move this group from its current indexed domain and add to the specified one.
<tt style='background-color:#E8E8E8;'> graphics.Allocator <a href=' /graphics/allocation.py#L95'>__init__</a>(capacity)</tt>	Create an allocator for a buffer of the specified capacity.
<tt style='background-color:#E8E8E8;'> graphics.Allocator <a href=' /graphics/allocation.py#L124'>set_capacity</a>(size)</tt>	Resize the maximum buffer size.
<tt style='background-color:#E8E8E8;'> graphics.Allocator <a href=' /graphics/allocation.py#L137'>alloc</a>(size)</tt>	Allocate memory in the buffer.
<tt style='background-color:#E8E8E8;'> graphics.Allocator <a href=' /graphics/allocation.py#L197'>realloc</a>(start,size,new_size)</tt>	Reallocate a region of the buffer.
<tt style='background-color:#E8E8E8;'> graphics.Allocator <a href=' /graphics/allocation.py#L283'>dealloc</a>(start,size)</tt>	Free a region of the buffer.
<tt style='background-color:#E8E8E8;'> graphics.Allocator <a href=' /graphics/allocation.py#L343'>get_allocated_regions</a>()</tt>	Get a list of aggregate allocated regions.
<tt style='background-color:#E8E8E8;'> graphics.Allocator <a href=' /graphics/allocation.py#L355'>get_fragmented_free_size</a>()</tt>	Returns the amount of space unused not including the final free block.
<tt style='background-color:#E8E8E8;'> graphics.Allocator <a href=' /graphics/allocation.py#L374'>get_free_size</a>()</tt>	Return the amount of space unused.
<tt style='background-color:#E8E8E8;'> graphics.Allocator <a href=' /graphics/allocation.py#L385'>get_usage</a>()</tt>	Return fraction of capacity currently allocated.
<tt style='background-color:#E8E8E8;'> graphics.Allocator <a href=' /graphics/allocation.py#L392'>get_fragmentation</a>()</tt>	Return fraction of free space that is not expandable.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/vertexbuffer.py#L66'>create_buffer</a>(size,target,usage,vbo)</tt>	Create a buffer of vertex data.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/vertexbuffer.py#L94'>create_mappable_buffer</a>(size,target,usage,vbo)</tt>	Create a mappable buffer of vertex data.
<tt style='background-color:#E8E8E8;'> graphics.AbstractBuffer <a href=' /graphics/vertexbuffer.py#L141'>bind</a>()</tt>	Bind this buffer to its opengl target.
<tt style='background-color:#E8E8E8;'> graphics.AbstractBuffer <a href=' /graphics/vertexbuffer.py#L145'>unbind</a>()</tt>	Reset the buffer's opengl target.
<tt style='background-color:#E8E8E8;'> graphics.AbstractBuffer <a href=' /graphics/vertexbuffer.py#L149'>set_data</a>(data)</tt>	Set the entire contents of the buffer.
<tt style='background-color:#E8E8E8;'> graphics.AbstractBuffer <a href=' /graphics/vertexbuffer.py#L159'>set_data_region</a>(data,start,length)</tt>	Set part of the buffer contents.
<tt style='background-color:#E8E8E8;'> graphics.AbstractBuffer <a href=' /graphics/vertexbuffer.py#L173'>map</a>(invalidate)</tt>	Map the entire buffer into system memory.
<tt style='background-color:#E8E8E8;'> graphics.AbstractBuffer <a href=' /graphics/vertexbuffer.py#L189'>unmap</a>()</tt>	Unmap a previously mapped memory block.
<tt style='background-color:#E8E8E8;'> graphics.AbstractBuffer <a href=' /graphics/vertexbuffer.py#L193'>resize</a>(size)</tt>	Resize the buffer to a new size.
<tt style='background-color:#E8E8E8;'> graphics.AbstractBuffer <a href=' /graphics/vertexbuffer.py#L202'>delete</a>()</tt>	Delete this buffer reducing system resource usage.
<tt style='background-color:#E8E8E8;'> graphics.AbstractMappable <a href=' /graphics/vertexbuffer.py#L207'>get_region</a>(start,size,ptr_type)</tt>	Map a region of the buffer into a ctypes array of the desired type.
<tt style='background-color:#E8E8E8;'> graphics.AbstractBufferRegion <a href=' /graphics/vertexbuffer.py#L451'>invalidate</a>()</tt>	Mark this region as changed.
<tt style='background-color:#E8E8E8;'> graphics.IndirectArrayRegion <a href=' /graphics/vertexbuffer.py#L490'>__init__</a>(region,size,component_count,component_stride)</tt>	Wrap a buffer region.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L242'>isarray</a>(x)</tt>	Same as isinstance x array except on python 2 2 where it.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L275'>interleave_planes</a>(ipixels,apixels,ipsize,apsize)</tt>	Interleave colour planes e g rgb + a = rgba.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L305'>check_palette</a>(palette)</tt>	Check a palette argument (to the :class writer class) for validity.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L334'>check_sizes</a>(size,width,height)</tt>	Check that these arguments in supplied are consistent.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L355'>check_color</a>(c,greyscale,which)</tt>	Checks that a colour argument for transparent or background options is the right form.
<tt style='background-color:#E8E8E8;'> extlibs.Writer <a href=' /extlibs/png.py#L401'>__init__</a>(width,height,size,greyscale)</tt>	Create a png encoder object.
<tt style='background-color:#E8E8E8;'> extlibs.Writer <a href=' /extlibs/png.py#L638'>make_palette</a>()</tt>	Create the byte sequences for a plte and if necessary a trns chunk.
<tt style='background-color:#E8E8E8;'> extlibs.Writer <a href=' /extlibs/png.py#L657'>write</a>(outfile,rows)</tt>	Write a png image to the output file rows should be.
<tt style='background-color:#E8E8E8;'> extlibs.Writer <a href=' /extlibs/png.py#L684'>write_passes</a>(outfile,rows,packed)</tt>	Write a png image to the output file.
<tt style='background-color:#E8E8E8;'> extlibs.Writer <a href=' /extlibs/png.py#L852'>write_array</a>(outfile,pixels)</tt>	Write an array in flat row flat pixel format as a png file on the output file.
<tt style='background-color:#E8E8E8;'> extlibs.Writer <a href=' /extlibs/png.py#L863'>write_packed</a>(outfile,rows)</tt>	Write png file to outfile the pixel data comes from rows.
<tt style='background-color:#E8E8E8;'> extlibs.Writer <a href=' /extlibs/png.py#L883'>convert_pnm</a>(infile,outfile)</tt>	Convert a pnm file containing raw pixel data into a png file with the parameters set in the writer object.
<tt style='background-color:#E8E8E8;'> extlibs.Writer <a href=' /extlibs/png.py#L899'>convert_ppm_and_pgm</a>(ppmfile,pgmfile,outfile)</tt>	Convert a ppm and pgm file containing raw pixel data into a png outfile with the parameters set in the writer object.
<tt style='background-color:#E8E8E8;'> extlibs.Writer <a href=' /extlibs/png.py#L920'>file_scanlines</a>(infile)</tt>	Generates boxed rows in flat pixel format from the input file infile.
<tt style='background-color:#E8E8E8;'> extlibs.Writer <a href=' /extlibs/png.py#L946'>array_scanlines</a>(pixels)</tt>	Generates boxed rows flat pixels from flat rows flat pixels in an array.
<tt style='background-color:#E8E8E8;'> extlibs.Writer <a href=' /extlibs/png.py#L960'>array_scanlines_interlace</a>(pixels)</tt>	Generator for interlaced scanlines from an array pixels is.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L996'>write_chunk</a>(outfile,tag,data)</tt>	Write a png chunk to the output file including length and checksum.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L1011'>write_chunks</a>(out,chunks)</tt>	Create a png file by writing out the chunks.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L1018'>filter_scanline</a>(type,line,fo,prev)</tt>	Apply a scanline filter to a scanline type specifies the.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L1105'>from_array</a>(a,mode,info)</tt>	Create a png :class image object from a 2- or 3-dimensional array.
<tt style='background-color:#E8E8E8;'> extlibs.Image <a href=' /extlibs/png.py#L1330'>save</a>(file)</tt>	Save the image to *file* if *file* looks like an open file.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1377'>__init__</a>(_guess)</tt>	Create a png decoder object.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1424'>chunk</a>(seek,lenient)</tt>	Read the next png chunk from the input file returns a (*type*,*data*) tuple.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1477'>chunks</a>()</tt>	Return an iterator that will yield each chunk as a (*chunktype*, *content*) pair.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1488'>undo_filter</a>(filter_type,scanline,previous)</tt>	Undo the filter for a scanline scanline is a sequence of.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1599'>deinterlace</a>(raw)</tt>	Read raw pixel data undo filters deinterlace and flatten.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1647'>iterboxed</a>(rows)</tt>	Iterator that yields each scanline in boxed row flat pixel format.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1677'>serialtoflat</a>(bytes,width)</tt>	Convert serial format byte stream pixel data to flat row flat pixel.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1704'>iterstraight</a>(raw)</tt>	Iterator that undoes the effect of filtering and yields each row in serialised format as a sequence of bytes.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1733'>validate_signature</a>()</tt>	If signature header has not been read then read and validate it otherwise do nothing.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1744'>preamble</a>(lenient)</tt>	Extract the image metadata by reading the initial part of the png file up to the start of the idat chunk.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1767'>chunklentype</a>()</tt>	Reads just enough of the input to determine the next chunk's length and type returned as a (*length*, *type*) pair.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1785'>process_chunk</a>(lenient)</tt>	Process the next chunk and its data this only processes the.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1907'>read</a>(lenient)</tt>	Read the png file and decode it returns (width, height,.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1980'>read_flat</a>()</tt>	Read a png file and decode it into flat row flat pixel format.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L1998'>palette</a>(alpha)</tt>	Returns a palette that is a sequence of 3-tuples or 4-tuples synthesizing it from the plte and trns chunks.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L2021'>asDirect</a>()</tt>	Returns the image data as a direct representation of an x * y * planes array.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L2126'>asFloat</a>(maxval)</tt>	Return image pixels as per :meth asdirect method but scale all pixel values to be floating point values between 0.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L2142'>_as_rescale</a>(get,targetbitdepth)</tt>	Helper used by :meth asrgb8 and :meth asrgba8.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L2158'>asRGB8</a>()</tt>	Return the image data as an rgb pixels with 8-bits per sample.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L2179'>asRGBA8</a>()</tt>	Return the image data as rgba pixels with 8-bits per sample.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L2189'>asRGB</a>()</tt>	Return image as rgb pixels rgb colour images are passed.
<tt style='background-color:#E8E8E8;'> extlibs.Reader <a href=' /extlibs/png.py#L2218'>asRGBA</a>()</tt>	Return image as rgba pixels greyscales are expanded into.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L2266'>check_bitdepth_colortype</a>(bitdepth,colortype)</tt>	Check that bitdepth and colortype are both valid and specified in a valid combination.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L2489'>read_pam_header</a>(infile)</tt>	Read the rest of a pam header infile should be positioned.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L2529'>read_pnm_header</a>(infile,supported)</tt>	Read a pnm header returning format width height depth maxval.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L2606'>write_pnm</a>(file,width,height,pixels)</tt>	Write a netpbm pnm/pam file.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L2652'>color_triple</a>(color)</tt>	Convert a command line colour value to a rgb triple of integers.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L2670'>_add_common_options</a>(parser)</tt>	Call *parser add_option* for each of the options that are.
<tt style='background-color:#E8E8E8;'> extlibs. <a href=' /extlibs/png.py#L2692'>_main</a>(argv)</tt>	Run the png encoder with options from the command line.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize. <a href=' /extlibs/future/py2_3/libfuturize/fixer_util.py#L31'>commatize</a>(leafs)</tt>	Accepts/turns (name name name name).
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize. <a href=' /extlibs/future/py2_3/libfuturize/fixer_util.py#L43'>indentation</a>(node)</tt>	Returns the indentation for this node iff a node is in a suite then it has indentation.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize. <a href=' /extlibs/future/py2_3/libfuturize/fixer_util.py#L64'>indentation_step</a>(node)</tt>	Dirty little trick to get the difference between each indentation level implemented by finding the shortest indentation string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize. <a href=' /extlibs/future/py2_3/libfuturize/fixer_util.py#L80'>suitify</a>(parent)</tt>	Turn the stuff after the first colon in parent's children.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize. <a href=' /extlibs/future/py2_3/libfuturize/fixer_util.py#L104'>NameImport</a>(package,as_name,prefix)</tt>	Accepts a package name node name to import it as string and.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize. <a href=' /extlibs/future/py2_3/libfuturize/fixer_util.py#L121'>import_binding_scope</a>(node)</tt>	Generator yields all nodes for which a node (an import_stmt) has scope.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize. <a href=' /extlibs/future/py2_3/libfuturize/fixer_util.py#L190'>future_import</a>(feature,node)</tt>	This seems to work.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize. <a href=' /extlibs/future/py2_3/libfuturize/fixer_util.py#L231'>future_import2</a>(feature,node)</tt>	An alternative to future_import() which might not work.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize. <a href=' /extlibs/future/py2_3/libfuturize/fixer_util.py#L263'>parse_args</a>(arglist,scheme)</tt>	Parse a list of arguments into a dict.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize. <a href=' /extlibs/future/py2_3/libfuturize/fixer_util.py#L294'>touch_import_top</a>(package,name_to_import,node)</tt>	Works like does_tree_import but adds an import statement at the top if it was not imported (but below any __future__ imports).
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize. <a href=' /extlibs/future/py2_3/libfuturize/fixer_util.py#L390'>check_future_import</a>(node)</tt>	If this is a future import return set of symbols that are imported else return none.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize. <a href=' /extlibs/future/py2_3/libfuturize/fixer_util.py#L433'>is_shebang_comment</a>(node)</tt>	Comments are prefixes for leaf nodes returns whether the given node has a.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize. <a href=' /extlibs/future/py2_3/libfuturize/fixer_util.py#L444'>is_encoding_comment</a>(node)</tt>	Comments are prefixes for leaf nodes returns whether the given node has a.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize.fixes. <a href=' /extlibs/future/py2_3/libfuturize/fixes/fix_division_safe.py#L22'>match_division</a>(node)</tt>	__future__ division redefines the meaning of a single slash for division.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize.fixes.FixDivisionSafe <a href=' /extlibs/future/py2_3/libfuturize/fixes/fix_division_safe.py#L42'>start_tree</a>(tree,name)</tt>	Skip this fixer if "__future__ division" is already imported.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize.fixes.FixDivisionSafe <a href=' /extlibs/future/py2_3/libfuturize/fixes/fix_oldstr_wrap.py#L60'>match</a>(node)</tt>	Since the tree needs to be fixed once and only once if and only if it matches then we can start discarding matches after we make the first.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize.fixes. <a href=' /extlibs/future/py2_3/libfuturize/fixes/fix_metaclass.py#L38'>has_metaclass</a>(parent)</tt>	We have to check the cls_node without changing it.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize.fixes. <a href=' /extlibs/future/py2_3/libfuturize/fixes/fix_metaclass.py#L57'>fixup_parse_tree</a>(cls_node)</tt>	One-line classes don't get a suite in the parse tree so we add.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize.fixes. <a href=' /extlibs/future/py2_3/libfuturize/fixes/fix_metaclass.py#L83'>fixup_simple_stmt</a>(parent,i,stmt_node)</tt>	If there is a semi-colon all the parts count as part of the same simple_stmt.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize.fixes. <a href=' /extlibs/future/py2_3/libfuturize/fixes/fix_metaclass.py#L135'>fixup_indent</a>(suite)</tt>	If an indent is followed by a thing with a prefix then nuke the prefix.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize.fixes.FixAbsoluteImport <a href=' /extlibs/future/py2_3/libfuturize/fixes/fix_absolute_import.py#L31'>transform</a>(node,results)</tt>	Copied from fiximport transform(), but with this line added in.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libfuturize.fixes.FixAbsoluteImport <a href=' /extlibs/future/py2_3/libfuturize/fixes/fix_absolute_import.py#L73'>probably_a_local_import</a>(imp_name)</tt>	Like the corresponding method in the base class but this also supports cython modules.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes. <a href=' /extlibs/future/py2_3/libpasteurize/fixes/fix_division.py#L8'>match_division</a>(node)</tt>	__future__ division redefines the meaning of a single slash for division.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes.FixDivision <a href=' /extlibs/future/py2_3/libpasteurize/fixes/fix_division.py#L20'>match</a>(node)</tt>	Since the tree needs to be fixed once and only once if and only if it matches then we can start discarding matches after we make the first.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes. <a href=' /extlibs/future/py2_3/libpasteurize/fixes/fix_imports2.py#L132'>all_modules_subpattern</a>()</tt>	Builds a pattern for all toplevel names.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes. <a href=' /extlibs/future/py2_3/libpasteurize/fixes/fix_imports2.py#L145'>build_import_pattern</a>(mapping1,mapping2)</tt>	Mapping1 a dict mapping py3k modules to all possible py2k replacements.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes. <a href=' /extlibs/future/py2_3/libpasteurize/fixes/fix_unpacking.py#L14'>assignment_source</a>(num_pre,num_post,LISTNAME,ITERNAME)</tt>	Accepts num_pre and num_post which are counts of values.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes.FixUnpacking <a href=' /extlibs/future/py2_3/libpasteurize/fixes/fix_unpacking.py#L64'>fix_implicit_context</a>(node,results)</tt>	Only example of the implicit context is a for loop so only fix that.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes.FixUnpacking <a href=' /extlibs/future/py2_3/libpasteurize/fixes/fix_unpacking.py#L83'>transform</a>(node,results)</tt>	A b c d e f *g h i = range 100 changes to.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes. <a href=' /extlibs/future/py2_3/libpasteurize/fixes/fix_imports.py#L78'>all_patterns</a>(name)</tt>	Accepts a string and returns a pattern of possible patterns involving that name called by simple_mapping_to_pattern for each name in the mapping it receives.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes. <a href=' /extlibs/future/py2_3/libpasteurize/fixes/fix_kwargs.py#L17'>gen_params</a>(raw_params)</tt>	Generator that yields tuples of (name default_value) for each parameter in the list if no default is given then it is default_value is none (not leaf(token.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes. <a href=' /extlibs/future/py2_3/libpasteurize/fixes/fix_kwargs.py#L43'>remove_params</a>(raw_params,kwargs_default)</tt>	Removes all keyword-only args from the params list and a bare star if any.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes. <a href=' /extlibs/future/py2_3/libpasteurize/fixes/fix_kwargs.py#L65'>needs_fixing</a>(raw_params,kwargs_default)</tt>	Returns string with the name of the kwargs dict if the params after the first star need fixing.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes.FixAnnotations <a href=' /extlibs/future/py2_3/libpasteurize/fixes/fix_annotations.py#L27'>transform</a>(node,results)</tt>	This just strips annotations from the funcdef completely.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes.Feature <a href=' /extlibs/future/py2_3/libpasteurize/fixes/feature_base.py#L25'>message_text</a>()</tt>	Format the above text with the name and minimum version required.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes.Features <a href=' /extlibs/future/py2_3/libpasteurize/fixes/feature_base.py#L38'>update_mapping</a>()</tt>	Called every time we care about the mapping of names to features.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes.Features <a href=' /extlibs/future/py2_3/libpasteurize/fixes/feature_base.py#L44'>PATTERN</a>()</tt>	Uses the mapping of names to features to return a pattern suitable for using the lib2to3 patcomp.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.libpasteurize.fixes.Features <a href=' /extlibs/future/py2_3/libpasteurize/fixes/feature_base.py#L53'>__getitem__</a>(key)</tt>	Implement a simple mapping to get patterns from names.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.past.types.olddict <a href=' /extlibs/future/py2_3/past/types/olddict.py#L55'>has_key</a>(k)</tt>	D has_key k -> true if d has a key k else false.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.past.types.olddict <a href=' /extlibs/future/py2_3/past/types/olddict.py#L89'>__native__</a>()</tt>	Hook for the past utils native() function.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.past.types. <a href=' /extlibs/future/py2_3/past/types/oldstr.py#L19'>unescape</a>(s)</tt>	Interprets strings with escape sequences example.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.past.translation.RTs <a href=' /extlibs/future/py2_3/past/translation/__init__.py#L131'>setup</a>()</tt>	Call this before using the refactoring tools to create them on demand if needed.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.past.translation.RTs <a href=' /extlibs/future/py2_3/past/translation/__init__.py#L142'>setup_detect_python2</a>()</tt>	Call this before using the refactoring tools to create them on demand if needed.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.past.translation. <a href=' /extlibs/future/py2_3/past/translation/__init__.py#L171'>splitall</a>(path)</tt>	Split a path into all components from python cookbook.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.past.translation. <a href=' /extlibs/future/py2_3/past/translation/__init__.py#L190'>common_substring</a>(s1,s2)</tt>	Returns the longest common substring to the two strings starting from the left.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.past.translation. <a href=' /extlibs/future/py2_3/past/translation/__init__.py#L207'>detect_python2</a>(source,pathname)</tt>	Returns a bool indicating whether we think the code is py2.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.past.translation.Py2Fixer <a href=' /extlibs/future/py2_3/past/translation/__init__.py#L258'>include</a>(paths)</tt>	Pass in a sequence of module names such as 'plotrique plotting' that.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.past.translation.Py2Fixer <a href=' /extlibs/future/py2_3/past/translation/__init__.py#L266'>exclude</a>(paths)</tt>	Pass in a sequence of strings such as 'mymodule' that if present at the leftmost side of the full package name would cause.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.past.translation. <a href=' /extlibs/future/py2_3/past/translation/__init__.py#L448'>detect_hooks</a>()</tt>	Returns true if the import hooks are installed false if not.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.past.utils. <a href=' /extlibs/future/py2_3/past/utils/__init__.py#L24'>with_metaclass</a>(meta)</tt>	Function from jinja2/_compat py license bsd.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.past.utils. <a href=' /extlibs/future/py2_3/past/utils/__init__.py#L59'>native</a>(obj)</tt>	On py2 this is a no-op native obj -> obj on py3 returns the corresponding native py3 types that are.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.past.utils. <a href=' /extlibs/future/py2_3/past/utils/__init__.py#L85'>old_div</a>(a,b)</tt>	Equivalent to a / b on python 2 without from __future__ import division.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newlist <a href=' /extlibs/future/py2_3/future/types/newlist.py#L38'>copy</a>()</tt>	L copy() -> list -- a shallow copy of l.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newlist <a href=' /extlibs/future/py2_3/future/types/newlist.py#L44'>clear</a>()</tt>	L clear() -> none -- remove all items from l.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newlist <a href=' /extlibs/future/py2_3/future/types/newlist.py#L49'>__new__</a>(cls)</tt>	List() -> new empty list.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newlist <a href=' /extlibs/future/py2_3/future/types/newlist.py#L66'>__radd__</a>(left)</tt>	Left + self.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newlist <a href=' /extlibs/future/py2_3/future/types/newlist.py#L73'>__getitem__</a>(y)</tt>	X __getitem__ y <==> x[y].
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newlist <a href=' /extlibs/future/py2_3/future/types/newlist.py#L85'>__native__</a>()</tt>	Hook for the future utils native() function.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newobject <a href=' /extlibs/future/py2_3/future/types/newobject.py#L125'>__native__</a>()</tt>	Hook for the future utils native() function.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newint <a href=' /extlibs/future/py2_3/future/types/newint.py#L35'>__new__</a>(cls,x,base)</tt>	From the py3 int docstring | int(x=0) -> integer.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newint <a href=' /extlibs/future/py2_3/future/types/newint.py#L89'>__repr__</a>()</tt>	Without the l suffix.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newint <a href=' /extlibs/future/py2_3/future/types/newint.py#L275'>__bool__</a>()</tt>	So subclasses can override this py3-style.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newint <a href=' /extlibs/future/py2_3/future/types/newint.py#L284'>to_bytes</a>(length,byteorder,signed)</tt>	Return an array of bytes representing an integer.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newint <a href=' /extlibs/future/py2_3/future/types/newint.py#L329'>from_bytes</a>(cls,mybytes,byteorder,signed)</tt>	Return the integer represented by the given array of bytes.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newrange <a href=' /extlibs/future/py2_3/future/types/newrange.py#L85'>index</a>(value)</tt>	Return the 0-based position of integer value in the sequence this range represents.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newrange <a href=' /extlibs/future/py2_3/future/types/newrange.py#L94'>count</a>(value)</tt>	Return the number of ocurrences of integer value in the sequence this range represents.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newrange <a href=' /extlibs/future/py2_3/future/types/newrange.py#L100'>__contains__</a>(value)</tt>	Return true if the integer value occurs in the sequence this range represents.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newrange <a href=' /extlibs/future/py2_3/future/types/newrange.py#L112'>__getitem__</a>(index)</tt>	Return the element at position index in the sequence this range represents or raise :class indexerror if the.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newrange <a href=' /extlibs/future/py2_3/future/types/newrange.py#L125'>__getitem_slice</a>(slce)</tt>	Return a range which represents the requested slce of the sequence represented by this range.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newrange <a href=' /extlibs/future/py2_3/future/types/newrange.py#L134'>__iter__</a>()</tt>	Return an iterator which enumerates the elements of the sequence this range represents.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newbytes <a href=' /extlibs/future/py2_3/future/types/newbytes.py#L36'>__new__</a>(cls)</tt>	From the py3 bytes docstring bytes(iterable_of_ints) -> bytes.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newbytes <a href=' /extlibs/future/py2_3/future/types/newbytes.py#L189'>decode</a>(encoding,errors)</tt>	Returns a newstr i e unicode subclass.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newbytes <a href=' /extlibs/future/py2_3/future/types/newbytes.py#L248'>splitlines</a>(keepends)</tt>	B splitlines([keepends]) -> list of lines.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newbytes <a href=' /extlibs/future/py2_3/future/types/newbytes.py#L278'>rindex</a>(sub)</tt>	S rindex(sub [,start [,end]]) -> int.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newbytes <a href=' /extlibs/future/py2_3/future/types/newbytes.py#L289'>index</a>(sub)</tt>	Returns index of sub in bytes.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newbytes <a href=' /extlibs/future/py2_3/future/types/newbytes.py#L355'>__getattribute__</a>(name)</tt>	A trick to cause the hasattr builtin-fn to return false for the 'encode' method on py2.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newbytes <a href=' /extlibs/future/py2_3/future/types/newbytes.py#L364'>rstrip</a>(bytes_to_strip)</tt>	Strip trailing bytes contained in the argument.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newbytes <a href=' /extlibs/future/py2_3/future/types/newbytes.py#L372'>strip</a>(bytes_to_strip)</tt>	Strip leading and trailing bytes contained in the argument.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newbytes <a href=' /extlibs/future/py2_3/future/types/newbytes.py#L380'>lower</a>()</tt>	B lower() -> copy of b.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newbytes <a href=' /extlibs/future/py2_3/future/types/newbytes.py#L388'>upper</a>()</tt>	B upper() -> copy of b.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newbytes <a href=' /extlibs/future/py2_3/future/types/newbytes.py#L397'>maketrans</a>(cls,frm,to)</tt>	B maketrans frm to -> translation table.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newstr <a href=' /extlibs/future/py2_3/future/types/newstr.py#L70'>__new__</a>(cls)</tt>	From the py3 str docstring str(object='') -> str.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newstr <a href=' /extlibs/future/py2_3/future/types/newstr.py#L104'>__repr__</a>()</tt>	Without the u prefix.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newstr <a href=' /extlibs/future/py2_3/future/types/newstr.py#L112'>__getitem__</a>(y)</tt>	Warning python <= 2 7 6 has a bug that causes this method never to be called.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newstr <a href=' /extlibs/future/py2_3/future/types/newstr.py#L136'>__radd__</a>(left)</tt>	Left + self.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newstr <a href=' /extlibs/future/py2_3/future/types/newstr.py#L179'>encode</a>(encoding,errors)</tt>	Returns bytes encode s using the codec registered for encoding.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newstr <a href=' /extlibs/future/py2_3/future/types/newstr.py#L264'>index</a>(sub)</tt>	Like newstr find() but raise valueerror when the substring is not.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newstr <a href=' /extlibs/future/py2_3/future/types/newstr.py#L275'>splitlines</a>(keepends)</tt>	S splitlines(keepends=false) -> list of strings.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newstr <a href=' /extlibs/future/py2_3/future/types/newstr.py#L324'>__getattribute__</a>(name)</tt>	A trick to cause the hasattr builtin-fn to return false for the 'decode' method on py2.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newstr <a href=' /extlibs/future/py2_3/future/types/newstr.py#L333'>__native__</a>()</tt>	A hook for the future utils native() function.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newstr <a href=' /extlibs/future/py2_3/future/types/newstr.py#L339'>maketrans</a>(x,y,z)</tt>	Return a translation table usable for str translate().
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newstr <a href=' /extlibs/future/py2_3/future/types/newstr.py#L378'>translate</a>(table)</tt>	S translate table -> str.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newdict <a href=' /extlibs/future/py2_3/future/types/newdict.py#L41'>items</a>()</tt>	On python 2 7+:.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newdict <a href=' /extlibs/future/py2_3/future/types/newdict.py#L55'>keys</a>()</tt>	On python 2 7+:.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newdict <a href=' /extlibs/future/py2_3/future/types/newdict.py#L69'>values</a>()</tt>	On python 2 7+:.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newdict <a href=' /extlibs/future/py2_3/future/types/newdict.py#L83'>__new__</a>(cls)</tt>	Dict() -> new empty dictionary dict mapping -> new dictionary initialized from a mapping object's.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types.newdict <a href=' /extlibs/future/py2_3/future/types/newdict.py#L104'>__native__</a>()</tt>	Hook for the future utils native() function.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types. <a href=' /extlibs/future/py2_3/future/types/__init__.py#L100'>disallow_types</a>(argnums,disallowed_types)</tt>	A decorator that raises a typeerror if any of the given numbered arguments is of the corresponding given type (e.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.types. <a href=' /extlibs/future/py2_3/future/types/__init__.py#L170'>no</a>(mytype,argnums)</tt>	A shortcut for the disallow_types decorator that disallows only one type in any position in argnums.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports. <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L153'>_eintr_retry</a>(func)</tt>	Restart a system call interrupted by eintr.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.BaseServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L209'>__init__</a>(server_address,RequestHandlerClass)</tt>	Constructor may be extended do not override.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.BaseServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L216'>server_activate</a>()</tt>	Called by constructor to activate the server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.BaseServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L224'>serve_forever</a>(poll_interval)</tt>	Handle one request at a time until shutdown.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.BaseServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L248'>shutdown</a>()</tt>	Stops the serve_forever loop.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.BaseServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L258'>service_actions</a>()</tt>	Called by the serve_forever() loop.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.BaseServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L277'>handle_request</a>()</tt>	Handle one request possibly blocking.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.BaseServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L295'>_handle_request_noblock</a>()</tt>	Handle one request without blocking.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.BaseServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L313'>handle_timeout</a>()</tt>	Called if no new request arrives within self timeout.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.BaseServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L320'>verify_request</a>(request,client_address)</tt>	Verify the request may be overridden.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.BaseServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L337'>server_close</a>()</tt>	Called to clean-up the server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.BaseServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L345'>finish_request</a>(request,client_address)</tt>	Finish one request by instantiating requesthandlerclass.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.BaseServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L349'>shutdown_request</a>(request)</tt>	Called to shutdown and close an individual request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.BaseServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L353'>close_request</a>(request)</tt>	Called to clean up an individual request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.BaseServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L357'>handle_error</a>(request,client_address)</tt>	Handle an error gracefully may be overridden.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.TCPServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L426'>__init__</a>(server_address,RequestHandlerClass,bind_and_activate)</tt>	Constructor may be extended do not override.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.TCPServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L435'>server_bind</a>()</tt>	Called by constructor to bind the socket.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.TCPServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L446'>server_activate</a>()</tt>	Called by constructor to activate the server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.TCPServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L454'>server_close</a>()</tt>	Called to clean-up the server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.TCPServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L462'>fileno</a>()</tt>	Return socket file number.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.TCPServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L470'>get_request</a>()</tt>	Get the request and client address from the socket.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.TCPServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L478'>shutdown_request</a>(request)</tt>	Called to shutdown and close an individual request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.TCPServer <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L488'>close_request</a>(request)</tt>	Called to clean up an individual request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.ForkingMixIn <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L527'>collect_children</a>()</tt>	Internal routine to wait for children that have exited.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.ForkingMixIn <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L559'>handle_timeout</a>()</tt>	Wait for zombies after self timeout seconds of inactivity.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.ForkingMixIn <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L566'>service_actions</a>()</tt>	Collect the zombie child processes regularly in the forkingmixin.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.ForkingMixIn <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L573'>process_request</a>(request,client_address)</tt>	Fork a new subprocess to process the request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.ThreadingMixIn <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L605'>process_request_thread</a>(request,client_address)</tt>	Same as in baseserver but as a thread.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.ThreadingMixIn <a href=' /extlibs/future/py2_3/future/backports/socketserver.py#L618'>process_request</a>(request,client_address)</tt>	Start a new thread to process the request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports. <a href=' /extlibs/future/py2_3/future/backports/misc.py#L17'>ceil</a>(x)</tt>	Return the ceiling of x as an int.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L57'>__init__</a>()</tt>	Initialize an ordered dictionary signature is the same as for.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L73'>__setitem__</a>(key,value,dict_setitem)</tt>	Od __setitem__ i y <==> od[i]=y.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L84'>__delitem__</a>(key,dict_delitem)</tt>	Od __delitem__ y <==> del od[y].
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L94'>__iter__</a>()</tt>	Od __iter__() <==> iter od.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L102'>__reversed__</a>()</tt>	Od __reversed__() <==> reversed od.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L110'>clear</a>()</tt>	Od clear() -> none remove all items from od.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L122'>popitem</a>(last)</tt>	Od popitem() -> k v return and remove a key value pair.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L147'>keys</a>()</tt>	Od keys() -> list of keys in od.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L151'>values</a>()</tt>	Od values() -> list of values in od.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L155'>items</a>()</tt>	Od items() -> list of key value pairs in od.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L159'>iterkeys</a>()</tt>	Od iterkeys() -> an iterator over the keys in od.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L163'>itervalues</a>()</tt>	Od itervalues -> an iterator over the values in od.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L168'>iteritems</a>()</tt>	Od iteritems -> an iterator over the key value items in od.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L173'>update</a>()</tt>	Od update(e **f) -> none update od from dict/iterable e and f.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L207'>pop</a>(key,default)</tt>	Od pop(k[,d]) -> v remove specified key and return the corresponding value if key is not found d is returned if given.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L220'>setdefault</a>(key,default)</tt>	Od setdefault(k[,d]) -> od get k d also set od[k]=d if k not in od.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L227'>__repr__</a>(_repr_running)</tt>	Od __repr__() <==> repr od.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L240'>__reduce__</a>()</tt>	Return state information for pickling.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L250'>copy</a>()</tt>	Od copy() -> a shallow copy of od.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L254'>fromkeys</a>(cls,iterable,value)</tt>	Od fromkeys(s[, v]) -> new ordered dictionary with keys from s and.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L264'>__eq__</a>(other)</tt>	Od __eq__ y <==> od==y comparison to another od is.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L279'>viewkeys</a>()</tt>	Od viewkeys() -> a set-like object providing a view on od's keys.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L283'>viewvalues</a>()</tt>	Od viewvalues() -> an object providing a view on od's values.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._OrderedDict <a href=' /extlibs/future/py2_3/future/backports/misc.py#L287'>viewitems</a>()</tt>	Od viewitems() -> a set-like object providing a view on od's items.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._Counter <a href=' /extlibs/future/py2_3/future/backports/misc.py#L312'>__init__</a>(iterable)</tt>	Create a new empty counter object and if given count elements.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._Counter <a href=' /extlibs/future/py2_3/future/backports/misc.py#L328'>most_common</a>(n)</tt>	List the n most common elements and their counts from the most common to the least.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._Counter <a href=' /extlibs/future/py2_3/future/backports/misc.py#L340'>elements</a>()</tt>	Iterator over elements repeating each as many times as its count.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._Counter <a href=' /extlibs/future/py2_3/future/backports/misc.py#L362'>update</a>(iterable)</tt>	Like dict update() but add counts instead of replacing them.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._Counter <a href=' /extlibs/future/py2_3/future/backports/misc.py#L391'>copy</a>()</tt>	Like dict copy() but returns a counter instance instead of a dict.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._Counter <a href=' /extlibs/future/py2_3/future/backports/misc.py#L395'>__delitem__</a>(elem)</tt>	Like dict __delitem__() but does not raise keyerror for missing.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._Counter <a href=' /extlibs/future/py2_3/future/backports/misc.py#L416'>__add__</a>(other)</tt>	Add counts from two counters.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._Counter <a href=' /extlibs/future/py2_3/future/backports/misc.py#L433'>__sub__</a>(other)</tt>	Subtract count but keep only results with positive counts.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._Counter <a href=' /extlibs/future/py2_3/future/backports/misc.py#L449'>__or__</a>(other)</tt>	Union is the maximum of value in either of the input counters.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports._Counter <a href=' /extlibs/future/py2_3/future/backports/misc.py#L466'>__and__</a>(other)</tt>	Intersection is the minimum of corresponding counts.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports. <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L46'>_is_leap</a>(year)</tt>	Year -> 1 if leap year else 0.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports. <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L50'>_days_before_year</a>(year)</tt>	Year -> number of days before january 1st of year.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports. <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L55'>_days_in_month</a>(year,month)</tt>	Year month -> number of days in that month in that year.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports. <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L62'>_days_before_month</a>(year,month)</tt>	Year month -> number of days in year preceding first day of month.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports. <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L67'>_ymd2ord</a>(year,month,day)</tt>	Year month day -> ordinal considering 01-jan-0001 as day 1.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports. <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L92'>_ord2ymd</a>(n)</tt>	Ordinal -> year month day considering 01-jan-0001 as day 1.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.timedelta <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L449'>total_seconds</a>()</tt>	Total seconds in the duration.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L678'>fromtimestamp</a>(cls,t)</tt>	Construct a date from a posix timestamp (like time time()).
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L684'>today</a>(cls)</tt>	Construct a date from time time().
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L690'>fromordinal</a>(cls,n)</tt>	Contruct a date from a proleptic gregorian ordinal.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L702'>__repr__</a>()</tt>	Convert to formal string for repr().
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L723'>ctime</a>()</tt>	Return ctime() style string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L731'>strftime</a>(fmt)</tt>	Format using strftime().
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L740'>isoformat</a>()</tt>	Return the date formatted according to iso.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L771'>timetuple</a>()</tt>	Return local time tuple compatible with time localtime().
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L776'>toordinal</a>()</tt>	Return proleptic gregorian ordinal for the year month and day.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L784'>replace</a>(year,month,day)</tt>	Return a new date with new values for the specified fields.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L839'>__add__</a>(other)</tt>	Add a date to a timedelta.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L850'>__sub__</a>(other)</tt>	Subtract two dates or a date and a timedelta.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L860'>weekday</a>()</tt>	Return day of the week where monday == 0 sunday == 6.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L866'>isoweekday</a>()</tt>	Return day of the week where monday == 1 sunday == 7.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.date <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L871'>isocalendar</a>()</tt>	Return a 3-tuple containing iso year week number and weekday.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.tzinfo <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L925'>tzname</a>(dt)</tt>	Datetime -> string name of time zone.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.tzinfo <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L929'>utcoffset</a>(dt)</tt>	Datetime -> minutes east of utc negative for west of utc.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.tzinfo <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L933'>dst</a>(dt)</tt>	Datetime -> dst offset in minutes east of utc.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.tzinfo <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L941'>fromutc</a>(dt)</tt>	Datetime in utc -> datetime in local time.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.time <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1056'>tzinfo</a>()</tt>	Timezone info object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.time <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1144'>_tzstr</a>(sep)</tt>	Return formatted timezone offset +xx xx or none.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.time <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1160'>__repr__</a>()</tt>	Convert to formal string for repr().
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.time <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1175'>isoformat</a>()</tt>	Return the time formatted according to iso.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.time <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1190'>strftime</a>(fmt)</tt>	Format using strftime() the date part of the timestamp passed.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.time <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1208'>utcoffset</a>()</tt>	Return the timezone offset in minutes east of utc negative west of utc.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.time <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1217'>tzname</a>()</tt>	Return the timezone name.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.time <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1230'>dst</a>()</tt>	Return 0 if dst is not in effect or the dst offset in minutes eastward if dst is in effect.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.time <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1245'>replace</a>(hour,minute,second,microsecond)</tt>	Return a new time with new values for the specified fields.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1348'>tzinfo</a>()</tt>	Timezone info object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1353'>fromtimestamp</a>(cls,t,tz)</tt>	Construct a datetime from a posix timestamp (like time time()).
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1381'>utcfromtimestamp</a>(cls,t)</tt>	Construct a utc datetime from a posix timestamp (like time time()).
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1403'>now</a>(cls,tz)</tt>	Construct a datetime from time time() and optional time zone info.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1409'>utcnow</a>(cls)</tt>	Construct a utc datetime from time time().
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1415'>combine</a>(cls,date,time)</tt>	Construct a datetime from a given date and a given time.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1426'>timetuple</a>()</tt>	Return local time tuple compatible with time localtime().
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1439'>timestamp</a>()</tt>	Return posix timestamp as float.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1448'>utctimetuple</a>()</tt>	Return utc time tuple compatible with time gmtime().
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1457'>date</a>()</tt>	Return the date part.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1461'>time</a>()</tt>	Return the time part with tzinfo none.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1465'>timetz</a>()</tt>	Return the time part with same tzinfo.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1470'>replace</a>(year,month,day,hour)</tt>	Return a new datetime with new values for the specified fields.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1541'>ctime</a>()</tt>	Return ctime() style string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1551'>isoformat</a>(sep)</tt>	Return the time formatted according to iso.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1580'>__repr__</a>()</tt>	Convert to formal string for repr().
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1595'>__str__</a>()</tt>	Convert to string for str().
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1599'>strptime</a>(cls,date_string,format)</tt>	String format -> new datetime parsed from a string (like time strptime()).
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1605'>utcoffset</a>()</tt>	Return the timezone offset in minutes east of utc negative west of utc.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1614'>tzname</a>()</tt>	Return the timezone name.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1625'>dst</a>()</tt>	Return 0 if dst is not in effect or the dst offset in minutes eastward if dst is in effect.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1721'>__add__</a>(other)</tt>	Add a datetime and a timedelta.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.datetime <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1742'>__sub__</a>(other)</tt>	Subtract two datetimes or a datetime and a timedelta.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.timezone <a href=' /extlibs/future/py2_3/future/backports/datetime.py#L1869'>__repr__</a>()</tt>	Convert to formal string for repr().
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.socket <a href=' /extlibs/future/py2_3/future/backports/socket.py#L114'>__repr__</a>()</tt>	Wrap __repr__() to reveal the real class name.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.socket <a href=' /extlibs/future/py2_3/future/backports/socket.py#L127'>dup</a>()</tt>	Dup() -> socket object return a new socket object connected to the same system resource.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.socket <a href=' /extlibs/future/py2_3/future/backports/socket.py#L137'>accept</a>()</tt>	Accept() -> socket object address info wait for an incoming connection.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.socket <a href=' /extlibs/future/py2_3/future/backports/socket.py#L153'>makefile</a>(mode,buffering)</tt>	Makefile -> an i/o stream connected to the socket.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.socket <a href=' /extlibs/future/py2_3/future/backports/socket.py#L217'>detach</a>()</tt>	Detach() -> file descriptor close the socket object without closing the underlying file descriptor.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports. <a href=' /extlibs/future/py2_3/future/backports/socket.py#L227'>fromfd</a>(fd,family,type,proto)</tt>	Fromfd(fd family type[, proto]) -> socket object create a socket object from a duplicate of the given file.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.SocketIO <a href=' /extlibs/future/py2_3/future/backports/socket.py#L297'>readinto</a>(b)</tt>	Read up to len b bytes into the writable buffer *b* and return the number of bytes read.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.SocketIO <a href=' /extlibs/future/py2_3/future/backports/socket.py#L322'>write</a>(b)</tt>	Write the given bytes or bytearray object *b* to the socket and return the number of bytes written.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.SocketIO <a href=' /extlibs/future/py2_3/future/backports/socket.py#L338'>readable</a>()</tt>	True if the socketio is open for reading.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.SocketIO <a href=' /extlibs/future/py2_3/future/backports/socket.py#L345'>writable</a>()</tt>	True if the socketio is open for writing.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.SocketIO <a href=' /extlibs/future/py2_3/future/backports/socket.py#L352'>seekable</a>()</tt>	True if the socketio is open for seeking.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.SocketIO <a href=' /extlibs/future/py2_3/future/backports/socket.py#L359'>fileno</a>()</tt>	Return the file descriptor of the underlying socket.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.SocketIO <a href=' /extlibs/future/py2_3/future/backports/socket.py#L376'>close</a>()</tt>	Close the socketio object this doesn't close the underlying.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports. <a href=' /extlibs/future/py2_3/future/backports/socket.py#L387'>getfqdn</a>(name)</tt>	Get fully qualified domain name from name.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports. <a href=' /extlibs/future/py2_3/future/backports/socket.py#L415'>create_connection</a>(address,timeout,source_address)</tt>	Connect to *address* and return the socket object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.ParserBase <a href=' /extlibs/future/py2_3/future/backports/_markupbase.py#L67'>getpos</a>()</tt>	Return current line number and offset.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L178'>urlretrieve</a>(url,filename,reporthook,data)</tt>	Retrieve a url into a temporary location on disk.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L258'>request_host</a>(request)</tt>	Return request-host as defined by rfc 2965.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.Request <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L304'>get_method</a>()</tt>	Return a string indicating the http request method.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.OpenerDirector <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L470'>open</a>(fullurl,data,timeout)</tt>	Accept a url or a request object python-future if the url is passed as a byte-string decode it first.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L544'>build_opener</a>()</tt>	Create an opener object from a list of handlers.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.HTTPRedirectHandler <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L630'>redirect_request</a>(req,fp,code,msg)</tt>	Return a request or none in response to a redirect.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L726'>_parse_proxy</a>(proxy)</tt>	Return (scheme user password host/port) given a url or an authority.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.HTTPPasswordMgr <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L866'>reduce_uri</a>(uri,default_port)</tt>	Accept authority or uri and extract only the authority and path.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.HTTPPasswordMgr <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L889'>is_suburi</a>(base,test)</tt>	Check if test is below base in a uri tree both args must be uris in reduced form.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.AbstractHTTPHandler <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1245'>do_open</a>(http_class,req)</tt>	Return an httpresponse object for the request using http_class.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1355'>parse_keqv_list</a>(l)</tt>	Parse list of key=value strings where keys are not duplicated.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1365'>parse_http_list</a>(s)</tt>	Parse lists as described by rfc 2068 section 2.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.URLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1663'>addheader</a>()</tt>	Add a header to be used by the http interface only e.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.URLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1669'>open</a>(fullurl,data)</tt>	Use urlopener() open file instead of open(file 'r').
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.URLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1705'>open_unknown</a>(fullurl,data)</tt>	Overridable interface to open unknown url type.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.URLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1710'>open_unknown_proxy</a>(proxy,fullurl,data)</tt>	Overridable interface to open unknown url type.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.URLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1716'>retrieve</a>(url,filename,reporthook,data)</tt>	Retrieve url returns filename headers for a local object or tempfilename headers for a remote object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.URLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1782'>_open_generic_http</a>(connection_factory,url,data)</tt>	Make an http connection using connection_class.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.URLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1874'>open_http</a>(url,data)</tt>	Use http protocol.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.URLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1878'>http_error</a>(url,fp,errcode,errmsg)</tt>	Handle http errors.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.URLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1894'>http_error_default</a>(url,fp,errcode,errmsg)</tt>	Default error handler close the connection and raise ioerror.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.URLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1909'>open_file</a>(url)</tt>	Use local file or ftp depending on form of url.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.URLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1918'>open_local_file</a>(url)</tt>	Use local file.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.URLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L1950'>open_ftp</a>(url)</tt>	Use ftp protocol.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.URLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2008'>open_data</a>(url,data)</tt>	Use "data" url.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.FancyURLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2059'>http_error_default</a>(url,fp,errcode,errmsg)</tt>	Default error handling -- don't raise an exception.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.FancyURLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2063'>http_error_302</a>(url,fp,errcode,errmsg)</tt>	Error 302 -- relocated temporarily.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.FancyURLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2107'>http_error_301</a>(url,fp,errcode,errmsg)</tt>	Error 301 -- also relocated permanently.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.FancyURLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2111'>http_error_303</a>(url,fp,errcode,errmsg)</tt>	Error 303 -- also relocated essentially identical to 302.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.FancyURLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2115'>http_error_307</a>(url,fp,errcode,errmsg)</tt>	Error 307 -- relocated but turn post into error.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.FancyURLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2122'>http_error_401</a>(url,fp,errcode,errmsg)</tt>	Error 401 -- authentication required.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.FancyURLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2147'>http_error_407</a>(url,fp,errcode,errmsg)</tt>	Error 407 -- proxy authentication required.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.FancyURLopener <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2247'>prompt_user_passwd</a>(host,realm)</tt>	Override this in a gui environment!.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2263'>localhost</a>()</tt>	Return the ip address of the magic hostname 'localhost'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2271'>thishost</a>()</tt>	Return the ip addresses of the current host.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2282'>ftperrors</a>()</tt>	Return the set of errors raised by the ftp class.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2291'>noheaders</a>()</tt>	Return an empty email message object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2395'>getproxies_environment</a>()</tt>	Return a dictionary of scheme -> proxy server url mappings.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2411'>proxy_bypass_environment</a>(host)</tt>	Test if proxies should not be used for a particular host.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/request.py#L2434'>_proxy_bypass_macosx_sysconf</a>(host,proxy_settings)</tt>	Return true iff this host shouldn't be accessed using a proxy this function uses the macosx framework systemconfiguration.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.RobotFileParser <a href=' /extlibs/future/py2_3/future/backports/urllib/robotparser.py#L38'>mtime</a>()</tt>	Returns the time the robots txt file was last fetched.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.RobotFileParser <a href=' /extlibs/future/py2_3/future/backports/urllib/robotparser.py#L47'>modified</a>()</tt>	Sets the time the robots txt file was last fetched to the.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.RobotFileParser <a href=' /extlibs/future/py2_3/future/backports/urllib/robotparser.py#L55'>set_url</a>(url)</tt>	Sets the url referring to a robots txt file.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.RobotFileParser <a href=' /extlibs/future/py2_3/future/backports/urllib/robotparser.py#L60'>read</a>()</tt>	Reads the robots txt url and feeds it to the parser.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.RobotFileParser <a href=' /extlibs/future/py2_3/future/backports/urllib/robotparser.py#L82'>parse</a>(lines)</tt>	Parse the input lines from a robots txt file.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.RobotFileParser <a href=' /extlibs/future/py2_3/future/backports/urllib/robotparser.py#L133'>can_fetch</a>(useragent,url)</tt>	Using the parsed robots txt decide if useragent can fetch url.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.Entry <a href=' /extlibs/future/py2_3/future/backports/urllib/robotparser.py#L191'>applies_to</a>(useragent)</tt>	Check if this entry applies to the specified agent.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L78'>clear_cache</a>()</tt>	Clear the parse cache and the quoters cache.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L292'>urlparse</a>(url,scheme,allow_fragments)</tt>	Parse a url into 6 components <scheme>://<netloc>/<path>;<params>?<query>#<fragment>.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L325'>urlsplit</a>(url,scheme,allow_fragments)</tt>	Parse a url into 5 components <scheme>://<netloc>/<path>?<query>#<fragment>.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L381'>urlunparse</a>(components)</tt>	Put a parsed url back together again this may result in a.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L392'>urlunsplit</a>(components)</tt>	Combine the elements of a tuple as returned by urlsplit() into a complete url as a string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L411'>urljoin</a>(base,url,allow_fragments)</tt>	Join a base url and a possibly relative url to form an absolute interpretation of the latter.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L464'>urldefrag</a>(url)</tt>	Removes any existing fragment from url.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L484'>unquote_to_bytes</a>(string)</tt>	Unquote_to_bytes('abc%20def') -> b'abc def'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L515'>unquote</a>(string,encoding,errors)</tt>	Replace %xx escapes by their single-character equivalent the optional.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L540'>parse_qs</a>(qs,keep_blank_values,strict_parsing,encoding)</tt>	Parse a query given as a string argument.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L572'>parse_qsl</a>(qs,keep_blank_values,strict_parsing,encoding)</tt>	Parse a query given as a string argument.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L620'>unquote_plus</a>(string,encoding,errors)</tt>	Like unquote(), but also replace plus signs by spaces as required for unquoting html form values.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib.Quoter <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L644'>__init__</a>(safe)</tt>	Safe bytes object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L658'>quote</a>(string,safe,encoding,errors)</tt>	Quote('abc def') -> 'abc%20def' each part of a url e.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L702'>quote_plus</a>(string,safe,encoding,errors)</tt>	Like quote(), but also replace ' ' with '+', as required for quoting html form values.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L719'>quote_from_bytes</a>(bs,safe)</tt>	Like quote(), but accepts a bytes object rather than a str and does not perform string-to-bytes encoding.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L747'>urlencode</a>(query,doseq,safe,encoding)</tt>	Encode a sequence of two-element tuples or dictionary into a url query string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L840'>to_bytes</a>(url)</tt>	To_bytes(u"url") --> 'url'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L853'>unwrap</a>(url)</tt>	Unwrap('<url type //host/path>') --> 'type //host/path'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L862'>splittype</a>(url)</tt>	Splittype('type opaquestring') --> 'type', 'opaquestring'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L876'>splithost</a>(url)</tt>	Splithost('//host[:port]/path') --> 'host[:port]', '/path'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L893'>splituser</a>(host)</tt>	Splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L905'>splitpasswd</a>(user)</tt>	Splitpasswd('user passwd') -> 'user', 'passwd'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L918'>splitport</a>(host)</tt>	Splitport('host port') --> 'host', 'port'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L930'>splitnport</a>(host,defport)</tt>	Split host and port returning numeric port.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L952'>splitquery</a>(url)</tt>	Splitquery('/path?query') --> '/path', 'query'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L964'>splittag</a>(url)</tt>	Splittag('/path#tag') --> '/path', 'tag'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L975'>splitattr</a>(url)</tt>	Splitattr('/path attr1=value1 attr2=value2 ') ->.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.urllib. <a href=' /extlibs/future/py2_3/future/backports/urllib/parse.py#L982'>splitvalue</a>(attr)</tt>	Splitvalue('attr=value') --> 'attr', 'value'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.html. <a href=' /extlibs/future/py2_3/future/backports/html/__init__.py#L17'>escape</a>(s,quote)</tt>	Replace special characters "&", "<" and ">" to html-safe sequences.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.html.HTMLParser <a href=' /extlibs/future/py2_3/future/backports/html/parser.py#L122'>__init__</a>(strict)</tt>	Initialize and reset this instance.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.html.HTMLParser <a href=' /extlibs/future/py2_3/future/backports/html/parser.py#L135'>reset</a>()</tt>	Reset this instance loses all unprocessed data.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.html.HTMLParser <a href=' /extlibs/future/py2_3/future/backports/html/parser.py#L143'>feed</a>(data)</tt>	Feed data to the parser.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.html.HTMLParser <a href=' /extlibs/future/py2_3/future/backports/html/parser.py#L152'>close</a>()</tt>	Handle any buffered data.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.html.HTMLParser <a href=' /extlibs/future/py2_3/future/backports/html/parser.py#L161'>get_starttag_text</a>()</tt>	Return full source of start tag '< >'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email._PolicyBase <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L48'>__init__</a>()</tt>	Create new policy possibly overriding some defaults.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email._PolicyBase <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L67'>clone</a>()</tt>	Return a new instance with specified attributes changed.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email._PolicyBase <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L92'>__add__</a>(other)</tt>	Non-default values from right operand override those from left.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Policy <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L166'>handle_defect</a>(obj,defect)</tt>	Based on policy either raise defect or call register_defect.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Policy <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L185'>register_defect</a>(obj,defect)</tt>	Record 'defect' on 'obj'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Policy <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L198'>header_max_count</a>(name)</tt>	Return the maximum allowed number of headers named 'name'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Policy <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L217'>header_source_parse</a>(sourcelines)</tt>	Given a list of linesep terminated strings constituting the lines of a single header return the name value tuple that should be stored.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Policy <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L227'>header_store_parse</a>(name,value)</tt>	Given the header name and the value provided by the application program return the name value that should be stored in the model.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Policy <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L234'>header_fetch_parse</a>(name,value)</tt>	Given the header name and the value from the model return the value to be returned to the application program that is requesting that.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Policy <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L245'>fold</a>(name,value)</tt>	Given the header name and the value from the model return a string containing linesep characters that implement the folding of the header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Policy <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L257'>fold_binary</a>(name,value)</tt>	Given the header name and the value from the model return binary data containing linesep characters that implement the folding of the.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Compat32 <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L288'>header_source_parse</a>(sourcelines)</tt>	+ the name is parsed as everything up to the ':' and returned unmodified.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Compat32 <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L300'>header_store_parse</a>(name,value)</tt>	+ the name and value are returned unmodified.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Compat32 <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L306'>header_fetch_parse</a>(name,value)</tt>	+ if the value contains binary data it is converted into a header object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Compat32 <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L313'>fold</a>(name,value)</tt>	+ headers are folded using the header folding algorithm which preserves.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Compat32 <a href=' /extlibs/future/py2_3/future/backports/email/_policybase.py#L323'>fold_binary</a>(name,value)</tt>	+ headers are folded using the header folding algorithm which preserves.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Generator <a href=' /extlibs/future/py2_3/future/backports/email/generator.py#L76'>flatten</a>(msg,unixfrom,linesep)</tt>	Print the message object tree rooted at msg to the output file specified when the generator instance was created.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Generator <a href=' /extlibs/future/py2_3/future/backports/email/generator.py#L123'>clone</a>(fp)</tt>	Clone this generator with the exact same options.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.DecodedGenerator <a href=' /extlibs/future/py2_3/future/backports/email/generator.py#L444'>__init__</a>(outfp,mangle_from_,maxheaderlen,fmt)</tt>	Like generator __init__() except that an additional optional.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.EmailPolicy <a href=' /extlibs/future/py2_3/future/backports/email/policy.py#L78'>header_max_count</a>(name)</tt>	+ the implementation for this class returns the max_count attribute from.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.EmailPolicy <a href=' /extlibs/future/py2_3/future/backports/email/policy.py#L96'>header_source_parse</a>(sourcelines)</tt>	+ the name is parsed as everything up to the ':' and returned unmodified.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.EmailPolicy <a href=' /extlibs/future/py2_3/future/backports/email/policy.py#L109'>header_store_parse</a>(name,value)</tt>	+ the name is returned unchanged.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.EmailPolicy <a href=' /extlibs/future/py2_3/future/backports/email/policy.py#L126'>header_fetch_parse</a>(name,value)</tt>	+ if the value has a 'name' attribute it is returned to unmodified.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.EmailPolicy <a href=' /extlibs/future/py2_3/future/backports/email/policy.py#L139'>fold</a>(name,value)</tt>	+ header folding is controlled by the refold_source policy setting.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.EmailPolicy <a href=' /extlibs/future/py2_3/future/backports/email/policy.py#L160'>fold_binary</a>(name,value)</tt>	+ the same as fold if cte_type is 7bit except that the returned value is.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/charset.py#L110'>add_charset</a>(charset,header_enc,body_enc,output_charset)</tt>	Add character set properties to the global registry.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/charset.py#L138'>add_alias</a>(alias,canonical)</tt>	Add a character set alias.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/charset.py#L147'>add_codec</a>(charset,codecname)</tt>	Add a codec that map characters in the given charset to/from unicode.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Charset <a href=' /extlibs/future/py2_3/future/backports/email/charset.py#L255'>get_body_encoding</a>()</tt>	Return the content-transfer-encoding used for body encoding.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Charset <a href=' /extlibs/future/py2_3/future/backports/email/charset.py#L276'>get_output_charset</a>()</tt>	Return the output character set.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Charset <a href=' /extlibs/future/py2_3/future/backports/email/charset.py#L284'>header_encode</a>(string)</tt>	Header-encode a string by converting it first to bytes.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Charset <a href=' /extlibs/future/py2_3/future/backports/email/charset.py#L303'>header_encode_lines</a>(string,maxlengths)</tt>	Header-encode a string by converting it first to bytes.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Charset <a href=' /extlibs/future/py2_3/future/backports/email/charset.py#L380'>body_encode</a>(string)</tt>	Body-encode a string by converting it first to bytes.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Address <a href=' /extlibs/future/py2_3/future/backports/email/headerregistry.py#L23'>__init__</a>(display_name,username,domain,addr_spec)</tt>	Create an object represeting a full email address.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Address <a href=' /extlibs/future/py2_3/future/backports/email/headerregistry.py#L72'>addr_spec</a>()</tt>	The addr_spec (username@domain) portion of the address quoted according to rfc 5322 rules but with no content transfer encoding.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Group <a href=' /extlibs/future/py2_3/future/backports/email/headerregistry.py#L113'>__init__</a>(display_name,addresses)</tt>	Create an object representing an address group.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.HeaderRegistry <a href=' /extlibs/future/py2_3/future/backports/email/headerregistry.py#L554'>__init__</a>(base_class,default_class,use_default_map)</tt>	Create a header_factory that works with the policy api.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.HeaderRegistry <a href=' /extlibs/future/py2_3/future/backports/email/headerregistry.py#L572'>map_to_type</a>(name,cls)</tt>	Register cls as the specialized class for handling "name" headers.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.HeaderRegistry <a href=' /extlibs/future/py2_3/future/backports/email/headerregistry.py#L582'>__call__</a>(name,value)</tt>	Create a header instance for header 'name' from 'value'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L44'>_formatparam</a>(param,value,quote)</tt>	Convenience function to format and return a key=value pair.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L136'>__str__</a>()</tt>	Return the entire formatted message as a string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L143'>as_string</a>(unixfrom,maxheaderlen)</tt>	Return the entire formatted message as a unicode string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L158'>is_multipart</a>()</tt>	Return true if the message consists of multiple parts.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L174'>attach</a>(payload)</tt>	Add the given payload to the current payload.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L186'>get_payload</a>(i,decode)</tt>	Return a reference to the payload.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L277'>set_payload</a>(payload,charset)</tt>	Set the payload to the given value.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L287'>set_charset</a>(charset)</tt>	Set the charset of the payload to a given character set.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L325'>get_charset</a>()</tt>	Return the charset instance associated with the message's payload.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L333'>__len__</a>()</tt>	Return the total number of headers including duplicates.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L337'>__getitem__</a>(name)</tt>	Get a header value.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L348'>__setitem__</a>(name,val)</tt>	Set the value of a header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L366'>__delitem__</a>(name)</tt>	Delete all occurrences of a header if present.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L385'>keys</a>()</tt>	Return a list of all the message's header field names.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L395'>values</a>()</tt>	Return a list of all the message's header values.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L406'>items</a>()</tt>	Get all the message's header fields and values.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L417'>get</a>(name,failobj)</tt>	Get a header value.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L434'>set_raw</a>(name,value)</tt>	Store name and value in the model without modification.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L441'>raw_items</a>()</tt>	Return the name value header pairs without modification.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L452'>get_all</a>(name,failobj)</tt>	Return a list of all the values for the named field.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L470'>add_header</a>(_name,_value)</tt>	Extended header setting.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L500'>replace_header</a>(_name,_value)</tt>	Replace a header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L519'>get_content_type</a>()</tt>	Return the message's content type.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L543'>get_content_maintype</a>()</tt>	Return the message's main content type.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L552'>get_content_subtype</a>()</tt>	Returns the message's sub-content type.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L561'>get_default_type</a>()</tt>	Return the default' content type.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L570'>set_default_type</a>(ctype)</tt>	Set the default' content type.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L600'>get_params</a>(failobj,header,unquote)</tt>	Return the message's content-type parameters as a list.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L622'>get_param</a>(param,failobj,header,unquote)</tt>	Return the parameter value if found in the content-type header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L656'>set_param</a>(param,value,header,requote)</tt>	Set a parameter in the content-type header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L704'>del_param</a>(param,header,requote)</tt>	Remove the given parameter completely from the content-type header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L726'>set_type</a>(type,header,requote)</tt>	Set the main type and subtype for the content-type header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L758'>get_filename</a>(failobj)</tt>	Return the filename associated with the payload if present.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L774'>get_boundary</a>(failobj)</tt>	Return the boundary associated with the payload if present.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L787'>set_boundary</a>(boundary)</tt>	Set the boundary parameter in content-type to 'boundary'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L833'>get_content_charset</a>(failobj)</tt>	Return the charset parameter of the content-type header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Message <a href=' /extlibs/future/py2_3/future/backports/email/message.py#L863'>get_charsets</a>(failobj)</tt>	Return a list containing the charset s used in this message.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/iterators.py#L23'>walk</a>()</tt>	Walk over the message tree yielding each subpart.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/iterators.py#L37'>body_line_iterator</a>(msg,decode)</tt>	Iterate over the parts returning string payloads line-by-line.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/iterators.py#L49'>typed_subpart_iterator</a>(msg,maintype,subtype)</tt>	Iterate over the subparts with a given mime type.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/iterators.py#L62'>_structure</a>(msg,fp,level,include_default)</tt>	A handy debugging aid.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/header.py#L62'>decode_header</a>(header)</tt>	Decode a message header value without converting charset.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/header.py#L157'>make_header</a>(decoded_seq,maxlinelen,header_name,continuation_ws)</tt>	Create a header from a sequence of pairs as returned by decode_header() decode_header() takes a header value string and returns a sequence of.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Header <a href=' /extlibs/future/py2_3/future/backports/email/header.py#L180'>__init__</a>(s,charset,maxlinelen,header_name)</tt>	Create a mime-compliant header that can contain many character sets.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Header <a href=' /extlibs/future/py2_3/future/backports/email/header.py#L227'>__str__</a>()</tt>	Return the string value of the header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Header <a href=' /extlibs/future/py2_3/future/backports/email/header.py#L268'>append</a>(s,charset,errors)</tt>	Append a string to the mime header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Header <a href=' /extlibs/future/py2_3/future/backports/email/header.py#L311'>_nonctext</a>(s)</tt>	True if string s is not a ctext character of rfc822.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Header <a href=' /extlibs/future/py2_3/future/backports/email/header.py#L316'>encode</a>(splitchars,maxlinelen,linesep)</tt>	Encode a message header into an rfc-compliant format.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/quoprimime.py#L78'>header_check</a>(octet)</tt>	Return true if the octet should be escaped with header quopri.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/quoprimime.py#L83'>body_check</a>(octet)</tt>	Return true if the octet should be escaped with body quopri.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/base64mime.py#L54'>header_length</a>(bytearray)</tt>	Return the length of s when it is encoded with base64.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/quoprimime.py#L101'>body_length</a>(bytearray)</tt>	Return a body quoted-printable encoding length.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/utils.py#L247'>unquote</a>(s)</tt>	Turn a string in the form =ab to the ascii character with value 0xab.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/base64mime.py#L64'>header_encode</a>(header_bytes,charset)</tt>	Encode a single header line with base64 encoding in a given charset.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email._body_accumulator <a href=' /extlibs/future/py2_3/future/backports/email/quoprimime.py#L162'>write_str</a>(s)</tt>	Add string s to the accumulated body.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email._body_accumulator <a href=' /extlibs/future/py2_3/future/backports/email/quoprimime.py#L167'>newline</a>()</tt>	Write eol then start new line.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email._body_accumulator <a href=' /extlibs/future/py2_3/future/backports/email/quoprimime.py#L172'>write_soft_break</a>()</tt>	Write a soft break then start a new line.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email._body_accumulator <a href=' /extlibs/future/py2_3/future/backports/email/quoprimime.py#L177'>write_wrapped</a>(s,extra_room)</tt>	Add a soft line break if needed then write s.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/base64mime.py#L78'>body_encode</a>(body,maxlinelen,eol)</tt>	Encode with quoted-printable wrapping at maxlinelen characters.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_encoded_words.py#L150'>decode</a>(encoded,eol)</tt>	Decode a quoted-printable string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/quoprimime.py#L311'>_unquote_match</a>(match)</tt>	Turn a match in the form =ab to the ascii character with value 0xab.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/quoprimime.py#L318'>header_decode</a>(s)</tt>	Decode a string encoded with rfc 2045 mime header q' encoding.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L63'>_parsedate_tz</a>(data)</tt>	Convert date to extended time tuple.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L180'>parsedate</a>(data)</tt>	Convert a time string to a time tuple.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L189'>mktime_tz</a>(data)</tt>	Turn a 10-tuple as returned by parsedate_tz() into a posix timestamp.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L199'>quote</a>(str)</tt>	Prepare string to be used in a quoted string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.AddrlistClass <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L219'>__init__</a>(field)</tt>	Initialize a new instance.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.AddrlistClass <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L238'>gotonext</a>()</tt>	Skip white space and extract comments.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.AddrlistClass <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L252'>getaddrlist</a>()</tt>	Parse all addresses.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.AddrlistClass <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L266'>getaddress</a>()</tt>	Parse the next address.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.AddrlistClass <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L325'>getrouteaddr</a>()</tt>	Parse a route address return-path value.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.AddrlistClass <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L357'>getaddrspec</a>()</tt>	Parse an rfc 2822 addr-spec.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.AddrlistClass <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L390'>getdomain</a>()</tt>	Get the complete domain name from an address.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.AddrlistClass <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L409'>getdelimited</a>(beginchar,endchars,allowcomments)</tt>	Parse a header fragment delimited by special characters.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.AddrlistClass <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L446'>getquote</a>()</tt>	Get a quote-delimited fragment from self's field.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.AddrlistClass <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L450'>getcomment</a>()</tt>	Get a parenthesis-delimited fragment from self's field.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.AddrlistClass <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L454'>getdomainliteral</a>()</tt>	Parse an rfc 2822 domain-literal.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.AddrlistClass <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L458'>getatom</a>(atomends)</tt>	Parse an rfc 2822 atom.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.AddrlistClass <a href=' /extlibs/future/py2_3/future/backports/email/_parseaddr.py#L478'>getphraselist</a>()</tt>	Parse a sequence of rfc 2822 phrases.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/base64mime.py#L78'>body_encode</a>(s,maxlinelen,eol)</tt>	Encode a string with base64.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_encoded_words.py#L150'>decode</a>(string)</tt>	Decode a raw base64 string returning a bytes object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/__init__.py#L48'>message_from_string</a>(s)</tt>	Parse a string into a message object model.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/__init__.py#L56'>message_from_bytes</a>(s)</tt>	Parse a bytes string into a message object model.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/__init__.py#L64'>message_from_file</a>(fp)</tt>	Read a file and parse its contents into a message object model.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/__init__.py#L72'>message_from_binary_file</a>(fp)</tt>	Read a binary file and parse its contents into a message object model.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1359'>_validate_xtext</a>(xtext)</tt>	If input token contains ascii non-printables register a defect.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1369'>_get_ptext_to_endchars</a>(value,endchars)</tt>	Scan printables/quoted-pairs until endchars and return unquoted ptext.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1400'>_decode_ew_run</a>(value)</tt>	Decode a run of rfc2047 encoded words.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1429'>get_fws</a>(value)</tt>	Fws = 1*wsp this isn't the rfc definition.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1441'>get_encoded_word</a>(value)</tt>	Encoded-word = "=?" charset "?" encoding "?" encoded-text "?=".
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1485'>get_unstructured</a>(value)</tt>	Unstructured = (*([fws] vchar) *wsp) / obs-unstruct obs-unstruct = *((*lf *cr * obs-utext *lf *cr)) / fws).
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1540'>get_qp_ctext</a>(value)</tt>	Ctext = <printable ascii except \ > this is not the rfc ctext since we are handling nested comments in comment.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1557'>get_qcontent</a>(value)</tt>	Qcontent = qtext / quoted-pair we allow anything except the dquote character but if we find any ascii.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1572'>get_atext</a>(value)</tt>	Atext = <matches _atext_matcher> we allow any non-atom_ends in atext but add an invalidatextdefect to.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1588'>get_bare_quoted_string</a>(value)</tt>	Bare-quoted-string = dquote *([fws] qcontent) [fws] dquote a quoted-string without the leading or trailing white space.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1612'>get_comment</a>(value)</tt>	Comment = "(" *([fws] ccontent) [fws] ")" ccontent = ctext / quoted-pair / comment.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1637'>get_cfws</a>(value)</tt>	Cfws = (1*([fws] comment) [fws]) / fws.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1650'>get_quoted_string</a>(value)</tt>	Quoted-string = [cfws] <bare-quoted-string> [cfws] 'bare-quoted-string' is an intermediate class defined by this.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1668'>get_atom</a>(value)</tt>	Atom = [cfws] 1*atext [cfws].
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1686'>get_dot_atom_text</a>(value)</tt>	Dot-text = 1*atext *(" " 1*atext).
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1705'>get_dot_atom</a>(value)</tt>	Dot-atom = [cfws] dot-atom-text [cfws].
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1720'>get_word</a>(value)</tt>	Word = atom / quoted-string either atom or quoted-string may start with cfws.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1751'>get_phrase</a>(value)</tt>	Phrase = 1*word / obs-phrase obs-phrase = word *(word / ".
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1789'>get_local_part</a>(value)</tt>	Local-part = dot-atom / quoted-string / obs-local-part.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1828'>get_obs_local_part</a>(value)</tt>	Obs-local-part = word *(" " word).
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1875'>get_dtext</a>(value)</tt>	Dtext = <printable ascii except \ [ ]> / obs-dtext obs-dtext = obs-no-ws-ctl / quoted-pair.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1903'>get_domain_literal</a>(value)</tt>	Domain-literal = [cfws] "[" *([fws] dtext) [fws] "]" [cfws].
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1942'>get_domain</a>(value)</tt>	Domain = dot-atom / domain-literal / obs-domain obs-domain = atom *(".
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1978'>get_addr_spec</a>(value)</tt>	Addr-spec = local-part "@" domain.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L1994'>get_obs_route</a>(value)</tt>	Obs-route = obs-domain-list ":" obs-domain-list = *(cfws / ",") "@" domain *("," [cfws] ["@" domain]).
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2035'>get_angle_addr</a>(value)</tt>	Angle-addr = [cfws] "<" addr-spec ">" [cfws] / obs-angle-addr.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2081'>get_display_name</a>(value)</tt>	Display-name = phrase because this is simply a name-rule we don't return a display-name.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2096'>get_name_addr</a>(value)</tt>	Name-addr = [display-name] angle-addr.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2126'>get_mailbox</a>(value)</tt>	Mailbox = name-addr / addr-spec.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2147'>get_invalid_mailbox</a>(value,endchars)</tt>	Read everything up to one of the chars in endchars.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2165'>get_mailbox_list</a>(value)</tt>	Mailbox-list = (mailbox *("," mailbox)) / obs-mbox-list obs-mbox-list = *([cfws] ",") mailbox *("," [mailbox / cfws]).
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2222'>get_group_list</a>(value)</tt>	Group-list = mailbox-list / cfws / obs-group-list.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2259'>get_group</a>(value)</tt>	Group = display-name ":" [group-list] ";" [cfws].
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2289'>get_address</a>(value)</tt>	Address = mailbox / group note that counter-intuitively an address can be either a single address or.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2318'>get_address_list</a>(value)</tt>	Address_list = (address *("," address)) / obs-addr-list obs-addr-list = *([cfws] ",") address *("," [address / cfws]).
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2380'>parse_mime_version</a>(value)</tt>	Mime-version = [cfws] 1*digit [cfws] " " [cfws] 1*digit [cfws].
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2448'>get_invalid_parameter</a>(value)</tt>	Read everything up to the next ';'.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2466'>get_ttext</a>(value)</tt>	Ttext = <matches _ttext_matcher> we allow any non-token_ends in ttext but add defects to the token's.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2485'>get_token</a>(value)</tt>	Token = [cfws] 1*ttext [cfws] the rfc equivalent of ttext is any us-ascii chars except space ctls or.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2508'>get_attrtext</a>(value)</tt>	Attrtext = 1*(any non-attribute_ends character) we allow any non-attribute_ends in attrtext but add defects to the.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2527'>get_attribute</a>(value)</tt>	[cfws] 1*attrtext [cfws] this version of the bnf makes the cfws explicit and as usual we use a.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2550'>get_extended_attrtext</a>(value)</tt>	Attrtext = 1*(any non-attribute_ends character plus '%') this is a special parsing routine so that we get a value that.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2568'>get_extended_attribute</a>(value)</tt>	[cfws] 1*extended_attrtext [cfws] this is like the non-extended version except we allow % characters so that.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2590'>get_section</a>(value)</tt>	'*' digits the formal bnf is more complicated because leading 0s are not allowed.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2620'>get_value</a>(value)</tt>	Quoted-string / attribute.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2642'>get_parameter</a>(value)</tt>	Attribute [section] ["*"] [cfws] "=" value the cfws is implied by the rfc but not made explicit in the bnf.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2781'>parse_mime_parameters</a>(value)</tt>	Parameter *( ";" parameter that bnf is meant to indicate this routine should only be called after.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2833'>_find_mime_parameters</a>(tokenlist,value)</tt>	Do our best to find the parameters in an invalid mime header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2849'>parse_content_type_header</a>(value)</tt>	Maintype "/" subtype *( ";" parameter the maintype and substype are tokens.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_header_value_parser.py#L2906'>parse_content_disposition_header</a>(value)</tt>	Disposition-type *( ";" parameter.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/utils.py#L80'>formataddr</a>(pair,charset)</tt>	The inverse of parseaddr(), this takes a 2-tuple of the form (realname email_address) and returns the string value suitable.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/utils.py#L114'>getaddresses</a>(fieldvalues)</tt>	Return a list of realname email for each fieldvalue.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/utils.py#L142'>formatdate</a>(timeval,localtime,usegmt)</tt>	Returns a date string as specified by rfc 2822 e g :.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/utils.py#L187'>format_datetime</a>(dt,usegmt)</tt>	Turn a datetime into a date string as specified in rfc 2822.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/utils.py#L206'>make_msgid</a>(idstring,domain)</tt>	Returns a string suitable for rfc 2822 compliant message-id e g.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/utils.py#L247'>unquote</a>(str)</tt>	Remove quotes from a string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/utils.py#L259'>decode_rfc2231</a>(s)</tt>	Decode string according to rfc 2231.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/utils.py#L267'>encode_rfc2231</a>(s,charset,language)</tt>	Encode string according to rfc 2231.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/utils.py#L285'>decode_params</a>(params)</tt>	Decode parameters list according to rfc 2231.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/utils.py#L363'>localtime</a>(dt,isdst)</tt>	Return local time as an aware datetime object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/encoders.py#L33'>encode_base64</a>(msg)</tt>	Encode the message's payload in base64.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/encoders.py#L44'>encode_quopri</a>(msg)</tt>	Encode the message's payload in quoted-printable.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/encoders.py#L55'>encode_7or8bit</a>(msg)</tt>	Set the content-transfer-encoding header to 7bit or 8bit.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Parser <a href=' /extlibs/future/py2_3/future/backports/email/parser.py#L21'>__init__</a>(_class)</tt>	Parser of rfc 2822 and mime email messages.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Parser <a href=' /extlibs/future/py2_3/future/backports/email/parser.py#L47'>parse</a>(fp,headersonly)</tt>	Create a message structure from the data in a file.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.Parser <a href=' /extlibs/future/py2_3/future/backports/email/parser.py#L65'>parsestr</a>(text,headersonly)</tt>	Create a message structure from a string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.BytesParser <a href=' /extlibs/future/py2_3/future/backports/email/parser.py#L87'>__init__</a>()</tt>	Parser of binary rfc 2822 and mime email messages.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.BytesParser <a href=' /extlibs/future/py2_3/future/backports/email/parser.py#L105'>parse</a>(fp,headersonly)</tt>	Create a message structure from the data in a binary file.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.BytesParser <a href=' /extlibs/future/py2_3/future/backports/email/parser.py#L118'>parsebytes</a>(text,headersonly)</tt>	Create a message structure from a byte string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.BufferedSubFile <a href=' /extlibs/future/py2_3/future/backports/email/feedparser.py#L102'>push</a>(data)</tt>	Push some new data into this object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.FeedParser <a href=' /extlibs/future/py2_3/future/backports/email/feedparser.py#L174'>feed</a>(data)</tt>	Push more data into the parser.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.FeedParser <a href=' /extlibs/future/py2_3/future/backports/email/feedparser.py#L185'>close</a>()</tt>	Parse all remaining data and return the root message object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_encoded_words.py#L150'>decode</a>(ew)</tt>	Decode encoded word and return string charset lang defects tuple.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email. <a href=' /extlibs/future/py2_3/future/backports/email/_encoded_words.py#L202'>encode</a>(string,charset,encoding,lang)</tt>	Encode string using the cte encoding that produces the shorter result.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.mime.MIMEBase <a href=' /extlibs/future/py2_3/future/backports/email/mime/base.py#L15'>__init__</a>(_maintype,_subtype)</tt>	This constructor adds a content-type and a mime-version header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.mime.MIMEMessage <a href=' /extlibs/future/py2_3/future/backports/email/mime/message.py#L19'>__init__</a>(_msg,_subtype)</tt>	Create a message/* type mime document.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.mime.MIMEApplication <a href=' /extlibs/future/py2_3/future/backports/email/mime/application.py#L19'>__init__</a>(_data,_subtype,_encoder)</tt>	Create an application/* type mime document.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.mime.MIMEText <a href=' /extlibs/future/py2_3/future/backports/email/mime/text.py#L19'>__init__</a>(_text,_subtype,_charset)</tt>	Create a text/* type mime document.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.mime.MIMEImage <a href=' /extlibs/future/py2_3/future/backports/email/mime/image.py#L21'>__init__</a>(_imagedata,_subtype,_encoder)</tt>	Create an image/* type mime document.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.mime.MIMEMultipart <a href=' /extlibs/future/py2_3/future/backports/email/mime/multipart.py#L18'>__init__</a>(_subtype,boundary,_subparts)</tt>	Creates a multipart/* type message.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.mime. <a href=' /extlibs/future/py2_3/future/backports/email/mime/audio.py#L27'>_whatsnd</a>(data)</tt>	Try to identify a sound file type.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.email.mime.MIMEAudio <a href=' /extlibs/future/py2_3/future/backports/email/mime/audio.py#L46'>__init__</a>(_audiodata,_subtype,_encoder)</tt>	Create an audio/* type mime document.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc. <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L128'>resolve_dotted_attribute</a>(obj,attr,allow_dotted_names)</tt>	Resolve_dotted_attribute(a 'b c d') => a b c d.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc. <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L152'>list_public_methods</a>(obj)</tt>	Returns a list of attribute strings found in the specified.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.SimpleXMLRPCDispatcher <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L177'>register_instance</a>(instance,allow_dotted_names)</tt>	Registers an instance to respond to xml-rpc requests.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.SimpleXMLRPCDispatcher <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L213'>register_function</a>(function,name)</tt>	Registers a function to respond to xml-rpc requests.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.SimpleXMLRPCDispatcher <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L224'>register_introspection_functions</a>()</tt>	Registers the xml-rpc introspection methods in the system namespace.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.SimpleXMLRPCDispatcher <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L235'>register_multicall_functions</a>()</tt>	Registers the xml-rpc multicall method in the system namespace.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.SimpleXMLRPCDispatcher <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L243'>_marshaled_dispatch</a>(data,dispatch_method,path)</tt>	Dispatches an xml-rpc method from marshalled xml data.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.SimpleXMLRPCDispatcher <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L280'>system_listMethods</a>()</tt>	System listmethods() => ['add', 'subtract', 'multiple'].
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.SimpleXMLRPCDispatcher <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L298'>system_methodSignature</a>(method_name)</tt>	System methodsignature('add') => [double int int].
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.SimpleXMLRPCDispatcher <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L311'>system_methodHelp</a>(method_name)</tt>	System methodhelp('add') => "adds two integers together".
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.SimpleXMLRPCDispatcher <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L342'>system_multicall</a>(call_list)</tt>	System multicall([{'methodname': 'add', 'params': [2 2]}, ]) => [[4], ].
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.SimpleXMLRPCDispatcher <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L374'>_dispatch</a>(method,params)</tt>	Dispatches the xml-rpc method.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.SimpleXMLRPCRequestHandler <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L463'>do_POST</a>()</tt>	Handles the http post request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.SimpleXMLRPCRequestHandler <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L560'>log_request</a>(code,size)</tt>	Selectively log an accepted request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.CGIXMLRPCRequestHandler <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L647'>handle_xmlrpc</a>(request_text)</tt>	Handle a single xml-rpc request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.CGIXMLRPCRequestHandler <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L659'>handle_get</a>()</tt>	Handle a single http get request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.CGIXMLRPCRequestHandler <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L684'>handle_request</a>(request_text)</tt>	Handle a single xml-rpc request passed through a cgi post method.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.ServerHTMLDoc <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L713'>markup</a>(text,escape,funcs,classes)</tt>	Mark up some plain text given a context of symbols to look for.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.ServerHTMLDoc <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L754'>docroutine</a>(object,name,mod,funcs)</tt>	Produce html documentation for a function or method object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.ServerHTMLDoc <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L799'>docserver</a>(server_name,package_documentation,methods)</tt>	Produce html documentation for an xml-rpc server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.XMLRPCDocGenerator <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L839'>set_server_title</a>(server_title)</tt>	Set the html title of the generated server documentation.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.XMLRPCDocGenerator <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L844'>set_server_name</a>(server_name)</tt>	Set the name of the generated html server documentation.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.XMLRPCDocGenerator <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L849'>set_server_documentation</a>(server_documentation)</tt>	Set the documentation string for the entire server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.XMLRPCDocGenerator <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L854'>generate_html_documentation</a>()</tt>	Generate_html_documentation() => html documentation for the server generates html documentation for the server using introspection for.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.DocXMLRPCRequestHandler <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L915'>do_GET</a>()</tt>	Handles the http get request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.DocCGIXMLRPCRequestHandler <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/server.py#L954'>handle_get</a>()</tt>	Handles the http get request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc. <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/client.py#L892'>getparser</a>(use_datetime,use_builtin_types)</tt>	Getparser() -> parser unmarshaller create an instance of the fastest available parser and attach it.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc. <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/client.py#L931'>dumps</a>(params,methodname,methodresponse,encoding)</tt>	Data [,options] -> marshalled data convert an argument tuple or a fault instance to an xml-rpc.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc. <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/client.py#L1008'>loads</a>(data,use_datetime,use_builtin_types)</tt>	Data -> unmarshalled data method name convert an xml-rpc packet to unmarshalled data plus a method.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc. <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/client.py#L1030'>gzip_encode</a>(data)</tt>	Data -> gzip encoded data.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc. <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/client.py#L1054'>gzip_decode</a>(data)</tt>	Gzip encoded data -> unencoded data.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.xmlrpc.ServerProxy <a href=' /extlibs/future/py2_3/future/backports/xmlrpc/client.py#L1459'>__call__</a>(attr)</tt>	A workaround to get special attributes on the serverproxy.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPServer <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L139'>server_bind</a>()</tt>	Override server_bind to store the server name.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L268'>parse_request</a>()</tt>	Parse a request internal.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L349'>handle_expect_100</a>()</tt>	Decide what to do with an "expect 100-continue" header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L367'>handle_one_request</a>()</tt>	Handle a single http request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L402'>handle</a>()</tt>	Handle multiple requests if necessary.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L410'>send_error</a>(code,message)</tt>	Send and log an error reply.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L441'>send_response</a>(code,message)</tt>	Add the response header to the headers buffer and log the response code.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L454'>send_response_only</a>(code,message)</tt>	Send the response header only.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L468'>send_header</a>(keyword,value)</tt>	Send a mime header to the headers buffer.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L482'>end_headers</a>()</tt>	Send the blank line ending the mime headers.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L493'>log_request</a>(code,size)</tt>	Log an accepted request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L503'>log_error</a>(format)</tt>	Log an error.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L517'>log_message</a>(format)</tt>	Log an arbitrary message.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L539'>version_string</a>()</tt>	Return the server software version string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L543'>date_time_string</a>(timestamp)</tt>	Return the current date and time formatted for a message header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L554'>log_date_time_string</a>()</tt>	Return the current time formatted for logging.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L568'>address_string</a>()</tt>	Return the client address.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.SimpleHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L675'>do_GET</a>()</tt>	Serve a get request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.SimpleHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L682'>do_HEAD</a>()</tt>	Serve a head request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.SimpleHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L688'>send_head</a>()</tt>	Common code for get and head commands.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.SimpleHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L729'>list_directory</a>(path)</tt>	Helper to produce a directory listing absent index html.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.SimpleHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L781'>translate_path</a>(path)</tt>	Translate a /-separated path to the local filename syntax.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.SimpleHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L803'>copyfile</a>(source,outputfile)</tt>	Copy all data between two file objects.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.SimpleHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L819'>guess_type</a>(path)</tt>	Guess the type of a file.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L856'>_url_collapse_path</a>(path)</tt>	Given a url path remove extra '/'s and ' ' path elements and collapse.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L901'>nobody_uid</a>()</tt>	Internal routine to get nobody's uid.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L917'>executable</a>(path)</tt>	Test for executable file.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CGIHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L939'>do_POST</a>()</tt>	Serve a post request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CGIHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L951'>send_head</a>()</tt>	Version of send_head that support cgi scripts.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CGIHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L958'>is_cgi</a>()</tt>	Test whether self path corresponds to a cgi script.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CGIHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L984'>is_executable</a>(path)</tt>	Test whether argument path is an executable file.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CGIHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L988'>is_python</a>(path)</tt>	Test whether argument path is a python script.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CGIHTTPRequestHandler <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L993'>run_cgi</a>()</tt>	Execute a cgi script.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/server.py#L1192'>test</a>(HandlerClass,ServerClass,protocol,port)</tt>	Test the http request handler class.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookies.py#L234'>_quote</a>(str,LegalChars)</tt>	Quote a string for use in a cookie header.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseCookie <a href=' /extlibs/future/py2_3/future/backports/http/cookies.py#L472'>value_decode</a>(val)</tt>	Real_value coded_value = value_decode string called prior to setting a cookie's value from the network.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseCookie <a href=' /extlibs/future/py2_3/future/backports/http/cookies.py#L481'>value_encode</a>(val)</tt>	Real_value coded_value = value_encode value called prior to setting a cookie's value from the dictionary.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseCookie <a href=' /extlibs/future/py2_3/future/backports/http/cookies.py#L494'>__set</a>(key,real_value,coded_value)</tt>	Private method for setting a cookie's value.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseCookie <a href=' /extlibs/future/py2_3/future/backports/http/cookies.py#L500'>__setitem__</a>(key,value)</tt>	Dictionary style assignment.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseCookie <a href=' /extlibs/future/py2_3/future/backports/http/cookies.py#L505'>output</a>(attrs,header,sep)</tt>	Return a string suitable for http.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseCookie <a href=' /extlibs/future/py2_3/future/backports/http/cookies.py#L527'>js_output</a>(attrs)</tt>	Return a string suitable for javascript.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.BaseCookie <a href=' /extlibs/future/py2_3/future/backports/http/cookies.py#L535'>load</a>(rawdata)</tt>	Load cookies from a string (presumably http_cookie) or from a dictionary.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPMessage <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L235'>getallmatchingheaders</a>(name)</tt>	Find all header lines matching a given header name.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L258'>parse_headers</a>(fp,_class)</tt>	Parses only rfc2822 headers from a file pointer.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPResponse <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L494'>isclosed</a>()</tt>	True if the connection is closed.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPResponse <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L678'>_safe_read</a>(amt)</tt>	Read the number of bytes requested compensating for partial reads.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPResponse <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L701'>_safe_readinto</a>(b)</tt>	Same as _safe_read but for reading into a buffer.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPResponse <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L729'>getheaders</a>()</tt>	Return list of header value tuples.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPConnection <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L780'>set_tunnel</a>(host,port,headers)</tt>	Sets up the host and the port for the http connect tunnelling.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPConnection <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L844'>connect</a>()</tt>	Connect to the host and port specified in __init__.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPConnection <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L851'>close</a>()</tt>	Close the connection to the http server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPConnection <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L861'>send</a>(data)</tt>	Send data' to the server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPConnection <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L911'>_output</a>(s)</tt>	Add a line of output to the current request buffer.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPConnection <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L918'>_send_output</a>(message_body)</tt>	Send the currently buffered request and clear the buffer.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPConnection <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L939'>putrequest</a>(method,url,skip_host,skip_accept_encoding)</tt>	Send a request to the server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPConnection <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L1055'>putheader</a>(header)</tt>	Send a request header line to the server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPConnection <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L1075'>endheaders</a>(message_body)</tt>	Indicate that the last header line has been sent to the server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPConnection <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L1090'>request</a>(method,url,body,headers)</tt>	Send a complete request to the server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.HTTPConnection <a href=' /extlibs/future/py2_3/future/backports/http/client.py#L1132'>getresponse</a>()</tt>	Get the response from the server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L100'>time2isoz</a>(t)</tt>	Return a string representing time in seconds since epoch t.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L119'>time2netscape</a>(t)</tt>	Return a string representing time in seconds since epoch t.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L231'>http2time</a>(text)</tt>	Returns time in seconds since epoch of time represented by a string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L303'>iso2time</a>(text)</tt>	As for http2time but parses the iso 8601 formats.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L336'>unmatched</a>(match)</tt>	Return unmatched part of re match object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L345'>split_header_words</a>(header_values)</tt>	Parse header values into a list of lists containing key value pairs.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L431'>join_header_words</a>(lists)</tt>	Do the inverse almost of the conversion done by split_header_words.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L463'>parse_ns_headers</a>(ns_headers)</tt>	Ad-hoc parser for netscape protocol cookie-attributes.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L516'>is_HDN</a>(text)</tt>	Return true if text is a host domain name.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L531'>domain_match</a>(A,B)</tt>	Return true if domain a domain-matches domain b according to rfc 2965.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L570'>liberal_is_HDN</a>(text)</tt>	Return true if text is a sort-of-like a host domain name.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L580'>user_domain_match</a>(A,B)</tt>	For blocking/accepting domains.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L601'>request_host</a>(request)</tt>	Return request-host as defined by rfc 2965.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L617'>eff_request_host</a>(request)</tt>	Return a tuple request-host effective request-host name.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L628'>request_path</a>(request)</tt>	Path component of request-uri as defined by rfc 2965.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L658'>escape_path</a>(path)</tt>	Escape any invalid characters in http url and uppercase all escapes.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L672'>reach</a>(h)</tt>	Return reach of host h as defined by rfc 2965 section 1.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L707'>is_third_party</a>(request)</tt>	Rfc 2965 section 3 3 6.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookiePolicy <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L837'>set_ok</a>(cookie,request)</tt>	Return true if and only if cookie should be accepted from server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookiePolicy <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L846'>return_ok</a>(cookie,request)</tt>	Return true if and only if cookie should be returned to server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookiePolicy <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L850'>domain_return_ok</a>(domain,request)</tt>	Return false if cookies should not be returned given cookie domain.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookiePolicy <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L855'>path_return_ok</a>(path,request)</tt>	Return false if cookies should not be returned given cookie path.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.DefaultCookiePolicy <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L871'>__init__</a>(blocked_domains,allowed_domains,netscape,rfc2965)</tt>	Constructor arguments should be passed as keyword arguments only.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.DefaultCookiePolicy <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L904'>blocked_domains</a>()</tt>	Return the sequence of blocked domains as a tuple.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.DefaultCookiePolicy <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L907'>set_blocked_domains</a>(blocked_domains)</tt>	Set the sequence of blocked domains.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.DefaultCookiePolicy <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L917'>allowed_domains</a>()</tt>	Return none or the sequence of allowed domains as a tuple.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.DefaultCookiePolicy <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L920'>set_allowed_domains</a>(allowed_domains)</tt>	Set the sequence of allowed domains or none.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.DefaultCookiePolicy <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L934'>set_ok</a>(cookie,request)</tt>	If you override set_ok(), be sure to call this method if it returns.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.DefaultCookiePolicy <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1080'>return_ok</a>(cookie,request)</tt>	If you override return_ok(), be sure to call this method if it.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1202'>deepvalues</a>(mapping)</tt>	Iterates over nested mapping depth-first in sorted order by key.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1267'>_cookies_for_request</a>(request)</tt>	Return a list of cookies to be returned to server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1274'>_cookie_attrs</a>(cookies)</tt>	Return a list of cookie-attributes to be returned to server.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1333'>add_cookie_header</a>(request)</tt>	Add correct cookie header to request urllib request request object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1366'>_normalized_cookie_tuples</a>(attrs_set)</tt>	Return list of tuples containing normalised cookie information.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1576'>make_cookies</a>(response,request)</tt>	Return sequence of cookie objects extracted from response object.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1630'>set_cookie_if_ok</a>(cookie,request)</tt>	Set a cookie if policy says it's ok to do so.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1643'>set_cookie</a>(cookie)</tt>	Set a cookie without checking whether or not it should be set.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1656'>extract_cookies</a>(response,request)</tt>	Extract cookies from response where allowable given the request.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1670'>clear</a>(domain,path,name)</tt>	Clear some cookies.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1697'>clear_session_cookies</a>()</tt>	Discard all session cookies.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1712'>clear_expired_cookies</a>()</tt>	Discard all expired cookies.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.CookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1734'>__len__</a>()</tt>	Return number of contained cookies.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.FileCookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1758'>__init__</a>(filename,delayload,policy)</tt>	Cookies are not loaded from the named file until either the load() or.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.FileCookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1773'>save</a>(filename,ignore_discard,ignore_expires)</tt>	Save cookies to a file.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.FileCookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1777'>load</a>(filename,ignore_discard,ignore_expires)</tt>	Load cookies from a file.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.FileCookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1789'>revert</a>(filename,ignore_discard,ignore_expires)</tt>	Clear all cookies and reload cookies from a saved file.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http. <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1816'>lwp_cookie_str</a>(cookie)</tt>	Return string representation of cookie in an the lwp cookie file format.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.backports.http.LWPCookieJar <a href=' /extlibs/future/py2_3/future/backports/http/cookiejar.py#L1857'>as_lwp_str</a>(ignore_discard,ignore_expires)</tt>	Return cookies as a string of "\n"-separated "set-cookie3" headers.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/surrogateescape.py#L40'>surrogateescape_handler</a>(exc)</tt>	Pure python implementation of the pep 383 the "surrogateescape" error handler of python 3.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/surrogateescape.py#L71'>replace_surrogate_encode</a>(mystring)</tt>	Returns a unicode string not the more logical bytes because the codecs register_error functionality expects this.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/surrogateescape.py#L100'>replace_surrogate_decode</a>(mybytes)</tt>	Returns a unicode string.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/surrogateescape.py#L177'>register_surrogateescape</a>()</tt>	Registers the surrogateescape error handler on python 2 only.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L86'>python_2_unicode_compatible</a>(cls)</tt>	A decorator that defines __unicode__ and __str__ methods under python 2.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L102'>with_metaclass</a>(meta)</tt>	Function from jinja2/_compat py license bsd.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L233'>isidentifier</a>(s,dotted)</tt>	A function equivalent to the str isidentifier method on py3.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L247'>viewitems</a>(obj)</tt>	Function for iterating over dictionary items with the same set-like behaviour on py2.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L259'>viewkeys</a>(obj)</tt>	Function for iterating over dictionary keys with the same set-like behaviour on py2.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L271'>viewvalues</a>(obj)</tt>	Function for iterating over dictionary values with the same set-like behaviour on py2.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L283'>iteritems</a>(obj)</tt>	Use this only if compatibility with python versions before 2 7 is.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L293'>iterkeys</a>(obj)</tt>	Use this only if compatibility with python versions before 2 7 is.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L303'>itervalues</a>(obj)</tt>	Use this only if compatibility with python versions before 2 7 is.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L313'>bind_method</a>(cls,name,func)</tt>	Bind a method to class python 2 and python 3 compatible.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L341'>_get_caller_globals_and_locals</a>()</tt>	Returns the globals and locals of the calling frame.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L353'>_repr_strip</a>(mystring)</tt>	Returns the string without any initial or final quotes.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L461'>implements_iterator</a>(cls)</tt>	From jinja2/_compat py license bsd.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L499'>is_new_style</a>(cls)</tt>	Python 2 7 has both new-style and old-style classes old-style classes can.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L515'>istext</a>(obj)</tt>	Deprecated use :.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L525'>isbytes</a>(obj)</tt>	Deprecated use :.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L535'>isnewbytes</a>(obj)</tt>	Equivalent to the result of isinstance obj newbytes were __instancecheck__ not overridden on the newbytes subclass.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L548'>isint</a>(obj)</tt>	Deprecated tests whether an object is a py3 int or either a py2 int or.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L567'>native</a>(obj)</tt>	On py3 this is a no-op native obj -> obj.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L621'>old_div</a>(a,b)</tt>	Deprecated import old_div from past utils instead.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.utils. <a href=' /extlibs/future/py2_3/future/utils/__init__.py#L636'>as_native_str</a>(encoding)</tt>	A decorator to turn a function or method call that returns text i e.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.standard_library.RenameImport <a href=' /extlibs/future/py2_3/future/standard_library/__init__.py#L242'>__init__</a>(old_to_new)</tt>	Pass in a dictionary-like object mapping from old names to new names.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.standard_library.RenameImport <a href=' /extlibs/future/py2_3/future/standard_library/__init__.py#L277'>_find_and_load_module</a>(name,path)</tt>	Finds and loads it but if there's a in the name handles it.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.standard_library. <a href=' /extlibs/future/py2_3/future/standard_library/__init__.py#L339'>is_py2_stdlib_module</a>(m)</tt>	Tries to infer whether the module m is from the python 2 standard library.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.standard_library. <a href=' /extlibs/future/py2_3/future/standard_library/__init__.py#L369'>scrub_py2_sys_modules</a>()</tt>	Removes any python 2 standard library modules from sys modules that.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.standard_library. <a href=' /extlibs/future/py2_3/future/standard_library/__init__.py#L426'>restore_sys_modules</a>(scrubbed)</tt>	Add any previously scrubbed modules back to the sys modules cache.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.standard_library. <a href=' /extlibs/future/py2_3/future/standard_library/__init__.py#L440'>install_aliases</a>()</tt>	Monkey-patches the standard library in py2 6/7 to provide.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.standard_library. <a href=' /extlibs/future/py2_3/future/standard_library/__init__.py#L520'>install_hooks</a>()</tt>	This function installs the future standard_library import hook into.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.standard_library. <a href=' /extlibs/future/py2_3/future/standard_library/__init__.py#L540'>enable_hooks</a>()</tt>	Deprecated use install_hooks() instead this will be removed by.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.standard_library. <a href=' /extlibs/future/py2_3/future/standard_library/__init__.py#L548'>remove_hooks</a>(scrub_sys_modules)</tt>	This function removes the import hook from sys meta_path.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.standard_library. <a href=' /extlibs/future/py2_3/future/standard_library/__init__.py#L568'>disable_hooks</a>()</tt>	Deprecated use remove_hooks() instead this will be removed by.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.standard_library. <a href=' /extlibs/future/py2_3/future/standard_library/__init__.py#L576'>detect_hooks</a>()</tt>	Returns true if the import hooks are installed false if not.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.standard_library. <a href=' /extlibs/future/py2_3/future/standard_library/__init__.py#L597'>cache_py2_modules</a>()</tt>	Currently this function is unneeded as we are not attempting to provide import hooks for modules with ambiguous names email urllib pickle.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.standard_library. <a href=' /extlibs/future/py2_3/future/standard_library/__init__.py#L625'>import_</a>(module_name,backport)</tt>	Pass a potentially dotted module name of a python 3 standard library module.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.standard_library. <a href=' /extlibs/future/py2_3/future/standard_library/__init__.py#L698'>from_import</a>(module_name)</tt>	Example use >>> httpconnection = from_import('http.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.builtins. <a href=' /extlibs/future/py2_3/future/builtins/disabled.py#L48'>disabled_function</a>(name)</tt>	Returns a function that cannot be called.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.builtins. <a href=' /extlibs/future/py2_3/future/builtins/newnext.py#L43'>newnext</a>(iterator,default)</tt>	Next(iterator[, default]) return the next item from the iterator.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.builtins. <a href=' /extlibs/future/py2_3/future/builtins/newround.py#L12'>newround</a>(number,ndigits)</tt>	See python 3 documentation uses banker's rounding.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.builtins. <a href=' /extlibs/future/py2_3/future/builtins/newround.py#L55'>from_float_26</a>(f)</tt>	Converts a float to a decimal number exactly.
<tt style='background-color:#E8E8E8;'> extlibs.future.py2_3.future.builtins. <a href=' /extlibs/future/py2_3/future/builtins/newsuper.py#L45'>newsuper</a>(typ,type_or_obj,framedepth)</tt>	Like builtin super(), but capable of magic.
<tt style='background-color:#E8E8E8;'> window. <a href=' /window/key.py#L98'>modifiers_string</a>(modifiers)</tt>	Return a string describing a set of modifiers.
<tt style='background-color:#E8E8E8;'> window. <a href=' /window/key.py#L134'>symbol_string</a>(symbol)</tt>	Return a string describing a key symbol.
<tt style='background-color:#E8E8E8;'> window. <a href=' /window/key.py#L154'>motion_string</a>(motion)</tt>	Return a string describing a text motion.
<tt style='background-color:#E8E8E8;'> window. <a href=' /window/key.py#L171'>user_key</a>(scancode)</tt>	Return a key symbol for a key not supported by pyglet.
<tt style='background-color:#E8E8E8;'> window.WindowEventLogger <a href=' /window/event.py#L90'>__init__</a>(logfile)</tt>	Create a windoweventlogger which writes to logfile.
<tt style='background-color:#E8E8E8;'> window.MouseCursor <a href=' /window/__init__.py#L176'>draw</a>(x,y)</tt>	Abstract render method.
<tt style='background-color:#E8E8E8;'> window.ImageMouseCursor <a href=' /window/__init__.py#L207'>__init__</a>(image,hot_x,hot_y)</tt>	Create a mouse cursor from an image.
<tt style='background-color:#E8E8E8;'> window. <a href=' /window/__init__.py#L234'>_PlatformEventHandler</a>(data)</tt>	Decorator for platform event handlers.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L427'>__init__</a>(width,height,caption,resizable)</tt>	Create a window.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L598'>_recreate</a>(changes)</tt>	Recreate the window with current attributes.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L609'>flip</a>()</tt>	Swap the opengl front and back buffers.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L621'>switch_to</a>()</tt>	Make this window the current opengl rendering context.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L631'>set_fullscreen</a>(fullscreen,screen,mode,width)</tt>	Toggle to or from fullscreen.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L733'>on_resize</a>(width,height)</tt>	A default resize event handler.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L753'>on_close</a>()</tt>	Default on_close handler.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L760'>on_key_press</a>(symbol,modifiers)</tt>	Default on_key_press handler.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L767'>close</a>()</tt>	Close the window.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L787'>draw_mouse_cursor</a>()</tt>	Draw the custom mouse cursor.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L825'>caption</a>()</tt>	The window caption title read-only.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L833'>resizeable</a>()</tt>	True if the window is resizable read-only.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L841'>style</a>()</tt>	The window style one of the window_style_* constants.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L850'>fullscreen</a>()</tt>	True if the window is currently fullscreen read-only.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L858'>visible</a>()</tt>	True if the window is currently visible read-only.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L866'>vsync</a>()</tt>	True if buffer flips are synchronised to the screen's vertical retrace.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L875'>display</a>()</tt>	The display this window belongs to read-only.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L883'>screen</a>()</tt>	The screen this window is fullscreen in read-only.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L891'>config</a>()</tt>	A gl config describing the context of this window read-only.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L899'>context</a>()</tt>	The opengl context attached to this window read-only.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L916'>width</a>()</tt>	The width of the window in pixels read-write.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L928'>height</a>()</tt>	The height of the window in pixels read-write.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L932'>set_caption</a>(caption)</tt>	Set the window's caption.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L945'>set_minimum_size</a>(width,height)</tt>	Set the minimum size of the window.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L966'>set_maximum_size</a>(width,height)</tt>	Set the maximum size of the window.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L988'>set_size</a>(width,height)</tt>	Resize the window.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1005'>get_size</a>()</tt>	Return the current size of the window.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1015'>set_location</a>(x,y)</tt>	Set the position of the window.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1029'>get_location</a>()</tt>	Return the current position of the window.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1038'>activate</a>()</tt>	Attempt to restore keyboard focus to the window.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1048'>set_visible</a>(visible)</tt>	Show or hide the window.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1059'>minimize</a>()</tt>	Minimize the window.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1064'>maximize</a>()</tt>	Maximize the window.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1073'>set_vsync</a>(vsync)</tt>	Enable or disable vertical sync control.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1098'>set_mouse_visible</a>(visible)</tt>	Show or hide the mouse cursor.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1113'>set_mouse_platform_visible</a>(platform_visible)</tt>	Set the platform-drawn mouse cursor visibility this is called.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1129'>set_mouse_cursor</a>(cursor)</tt>	Change the appearance of the mouse cursor.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1145'>set_exclusive_mouse</a>(exclusive)</tt>	Hide the mouse cursor and direct all mouse events to this window.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1162'>set_exclusive_keyboard</a>(exclusive)</tt>	Prevent the user from switching away from this window using keyboard accelerators.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1179'>get_system_mouse_cursor</a>(name)</tt>	Obtain a system mouse cursor.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1196'>set_icon</a>()</tt>	Set the window icon.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1213'>clear</a>()</tt>	Clear the window.
<tt style='background-color:#E8E8E8;'> window.BaseWindow <a href=' /window/__init__.py#L1228'>dispatch_events</a>()</tt>	Poll the operating system event queue for new events and call attached event handlers.
<tt style='background-color:#E8E8E8;'> window.FPSDisplay <a href=' /window/__init__.py#L1703'>update</a>()</tt>	Records a new data point at the current time this method.
<tt style='background-color:#E8E8E8;'> window.FPSDisplay <a href=' /window/__init__.py#L1718'>set_fps</a>(fps)</tt>	Set the label text for the given fps estimation.
<tt style='background-color:#E8E8E8;'> window.FPSDisplay <a href=' /window/__init__.py#L1730'>draw</a>()</tt>	Draw the label.
<tt style='background-color:#E8E8E8;'> window. <a href=' /window/__init__.py#L1783'>get_platform</a>()</tt>	Get an instance of the platform most appropriate for this system.
<tt style='background-color:#E8E8E8;'> window.Platform <a href=' /window/__init__.py#L1803'>get_display</a>(name)</tt>	Get a display device by name.
<tt style='background-color:#E8E8E8;'> window.Platform <a href=' /window/__init__.py#L1829'>get_default_display</a>()</tt>	Get the default display device.
<tt style='background-color:#E8E8E8;'> window. <a href=' /window/mouse.py#L41'>buttons_string</a>(buttons)</tt>	Return a string describing a set of active mouse buttons.
<tt style='background-color:#E8E8E8;'> window.win32.Win32Window <a href=' /window/win32/__init__.py#L414'>_reset_exclusive_mouse_screen</a>()</tt>	Recalculate screen coords of mouse warp point for exclusive mouse.
<tt style='background-color:#E8E8E8;'> window.cocoa.CocoaWindow <a href=' /window/cocoa/__init__.py#L610'>on_resize</a>(width,height)</tt>	Override default implementation to support retina displays.
<tt style='background-color:#E8E8E8;'> text. <a href=' /text/layout.py#L179'>_parse_distance</a>(distance,dpi)</tt>	Parse a distance string and return corresponding distance in pixels as an integer.
<tt style='background-color:#E8E8E8;'> text._GlyphBox <a href=' /text/layout.py#L305'>__init__</a>(owner,font,glyphs,advance)</tt>	Create a run of glyphs sharing the same texture.
<tt style='background-color:#E8E8E8;'> text._InlineElementBox <a href=' /text/layout.py#L444'>__init__</a>(element)</tt>	Create a glyph run holding a single element.
<tt style='background-color:#E8E8E8;'> text.TextLayout <a href=' /text/layout.py#L745'>__init__</a>(document,width,height,multiline)</tt>	Create a text layout.
<tt style='background-color:#E8E8E8;'> text.TextLayout <a href=' /text/layout.py#L810'>begin_update</a>()</tt>	Indicate that a number of changes to the layout or document are about to occur.
<tt style='background-color:#E8E8E8;'> text.TextLayout <a href=' /text/layout.py#L824'>end_update</a>()</tt>	Perform pending layout changes since begin_update.
<tt style='background-color:#E8E8E8;'> text.TextLayout <a href=' /text/layout.py#L840'>delete</a>()</tt>	Remove this layout from its batch.
<tt style='background-color:#E8E8E8;'> text.TextLayout <a href=' /text/layout.py#L850'>draw</a>()</tt>	Draw this text layout.
<tt style='background-color:#E8E8E8;'> text.TextLayout <a href=' /text/layout.py#L988'>on_insert_text</a>(start,text)</tt>	Event handler for abstractdocument on_insert_text.
<tt style='background-color:#E8E8E8;'> text.TextLayout <a href=' /text/layout.py#L996'>on_delete_text</a>(start,end)</tt>	Event handler for abstractdocument on_delete_text.
<tt style='background-color:#E8E8E8;'> text.TextLayout <a href=' /text/layout.py#L1004'>on_style_text</a>(start,end,attributes)</tt>	Event handler for abstractdocument on_style_text.
<tt style='background-color:#E8E8E8;'> text.TextLayout <a href=' /text/layout.py#L1046'>_flow_glyphs_wrap</a>(glyphs,owner_runs,start,end)</tt>	Word-wrap styled text into lines of fixed width.
<tt style='background-color:#E8E8E8;'> text.IncrementalTextLayout <a href=' /text/layout.py#L2127'>set_selection</a>(start,end)</tt>	Set the text selection range.
<tt style='background-color:#E8E8E8;'> text.IncrementalTextLayout <a href=' /text/layout.py#L2217'>get_position_from_point</a>(x,y)</tt>	Get the closest document position to a point.
<tt style='background-color:#E8E8E8;'> text.IncrementalTextLayout <a href=' /text/layout.py#L2230'>get_point_from_position</a>(position,line)</tt>	Get the x y coordinates of a position in the document.
<tt style='background-color:#E8E8E8;'> text.IncrementalTextLayout <a href=' /text/layout.py#L2276'>get_line_from_point</a>(x,y)</tt>	Get the closest line index to a point.
<tt style='background-color:#E8E8E8;'> text.IncrementalTextLayout <a href=' /text/layout.py#L2299'>get_point_from_line</a>(line)</tt>	Get the x y coordinates of a line index.
<tt style='background-color:#E8E8E8;'> text.IncrementalTextLayout <a href=' /text/layout.py#L2313'>get_line_from_position</a>(position)</tt>	Get the line index of a character position in the document.
<tt style='background-color:#E8E8E8;'> text.IncrementalTextLayout <a href=' /text/layout.py#L2329'>get_position_from_line</a>(line)</tt>	Get the first document character position of a given line index.
<tt style='background-color:#E8E8E8;'> text.IncrementalTextLayout <a href=' /text/layout.py#L2340'>get_position_on_line</a>(line,x)</tt>	Get the closest document position for a given line index and x coordinate.
<tt style='background-color:#E8E8E8;'> text.IncrementalTextLayout <a href=' /text/layout.py#L2366'>get_line_count</a>()</tt>	Get the number of lines in the text layout.
<tt style='background-color:#E8E8E8;'> text.IncrementalTextLayout <a href=' /text/layout.py#L2373'>ensure_line_visible</a>(line)</tt>	Adjust view_y so that the line with the given index is visible.
<tt style='background-color:#E8E8E8;'> text.IncrementalTextLayout <a href=' /text/layout.py#L2389'>ensure_x_visible</a>(x)</tt>	Adjust view_x so that the given x coordinate is visible.
<tt style='background-color:#E8E8E8;'> text.DocumentDecoder <a href=' /text/__init__.py#L95'>decode</a>(text,location)</tt>	Decode document text.
<tt style='background-color:#E8E8E8;'> text. <a href=' /text/__init__.py#L110'>get_decoder</a>(filename,mimetype)</tt>	Get a document decoder for the given filename and mime type.
<tt style='background-color:#E8E8E8;'> text. <a href=' /text/__init__.py#L156'>load</a>(filename,file,mimetype)</tt>	Load a document from a file.
<tt style='background-color:#E8E8E8;'> text. <a href=' /text/__init__.py#L187'>decode_html</a>(text,location)</tt>	Create a document directly from some html formatted text.
<tt style='background-color:#E8E8E8;'> text. <a href=' /text/__init__.py#L203'>decode_attributed</a>(text)</tt>	Create a document directly from some attributed text.
<tt style='background-color:#E8E8E8;'> text. <a href=' /text/__init__.py#L218'>decode_text</a>(text)</tt>	Create a document directly from some plain text.
<tt style='background-color:#E8E8E8;'> text.DocumentLabel <a href=' /text/__init__.py#L238'>__init__</a>(document,x,y,width)</tt>	Create a label for a given document.
<tt style='background-color:#E8E8E8;'> text.DocumentLabel <a href=' /text/__init__.py#L291'>text</a>()</tt>	The text of the label.
<tt style='background-color:#E8E8E8;'> text.DocumentLabel <a href=' /text/__init__.py#L321'>font_name</a>()</tt>	Font family name.
<tt style='background-color:#E8E8E8;'> text.DocumentLabel <a href=' /text/__init__.py#L334'>font_size</a>()</tt>	Font size in points.
<tt style='background-color:#E8E8E8;'> text.DocumentLabel <a href=' /text/__init__.py#L347'>bold</a>()</tt>	Bold font style.
<tt style='background-color:#E8E8E8;'> text.DocumentLabel <a href=' /text/__init__.py#L360'>italic</a>()</tt>	Italic font style.
<tt style='background-color:#E8E8E8;'> text.DocumentLabel <a href=' /text/__init__.py#L365'>get_style</a>(name)</tt>	Get a document style value by name.
<tt style='background-color:#E8E8E8;'> text.DocumentLabel <a href=' /text/__init__.py#L380'>set_style</a>(name,value)</tt>	Set a document style value by name over the whole document.
<tt style='background-color:#E8E8E8;'> text.Label <a href=' /text/__init__.py#L398'>__init__</a>(text,font_name,font_size,bold)</tt>	Create a plain text label.
<tt style='background-color:#E8E8E8;'> text.HTMLLabel <a href=' /text/__init__.py#L472'>__init__</a>(text,location,x,y)</tt>	Create a label with an html string.
<tt style='background-color:#E8E8E8;'> text.HTMLLabel <a href=' /text/__init__.py#L524'>text</a>()</tt>	Html formatted text of the label.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L106'>__init__</a>(layout,batch,color)</tt>	Create a caret for a layout.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L138'>delete</a>()</tt>	Remove the caret from its batch.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L255'>get_style</a>(attribute)</tt>	Get the document's named style at the caret's current position.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L280'>set_style</a>(attributes)</tt>	Set the document style at the caret's current position.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L311'>move_to_point</a>(x,y)</tt>	Move the caret close to the given window coordinate.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L330'>select_to_point</a>(x,y)</tt>	Move the caret close to the given window coordinate while maintaining the mark.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L346'>select_word</a>(x,y)</tt>	Select the word at the given window coordinate.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L375'>select_paragraph</a>(x,y)</tt>	Select the paragraph at the given window coordinate.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L419'>on_text</a>(text)</tt>	Handler for the pyglet window window on_text event.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L436'>on_text_motion</a>(motion,select)</tt>	Handler for the pyglet window window on_text_motion event.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L505'>on_text_motion_select</a>(motion)</tt>	Handler for the pyglet window window on_text_motion_select event.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L517'>on_mouse_scroll</a>(x,y,scroll_x,scroll_y)</tt>	Handler for the pyglet window window on_mouse_scroll event.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L531'>on_mouse_press</a>(x,y,button,modifiers)</tt>	Handler for the pyglet window window on_mouse_press event.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L563'>on_mouse_drag</a>(x,y,dx,dy)</tt>	Handler for the pyglet window window on_mouse_drag event.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L576'>on_activate</a>()</tt>	Handler for the pyglet window window on_activate event.
<tt style='background-color:#E8E8E8;'> text.Caret <a href=' /text/caret.py#L585'>on_deactivate</a>()</tt>	Handler for the pyglet window window on_deactivate event.
<tt style='background-color:#E8E8E8;'> text.InlineElement <a href=' /text/document.py#L224'>place</a>(layout,x,y)</tt>	Construct an instance of the element at the given coordinates.
<tt style='background-color:#E8E8E8;'> text.InlineElement <a href=' /text/document.py#L251'>remove</a>(layout)</tt>	Remove this element from a layout.
<tt style='background-color:#E8E8E8;'> text.AbstractDocument <a href=' /text/document.py#L301'>get_paragraph_start</a>(pos)</tt>	Get the starting position of a paragraph.
<tt style='background-color:#E8E8E8;'> text.AbstractDocument <a href=' /text/document.py#L321'>get_paragraph_end</a>(pos)</tt>	Get the end position of a paragraph.
<tt style='background-color:#E8E8E8;'> text.AbstractDocument <a href=' /text/document.py#L335'>get_style_runs</a>(attribute)</tt>	Get a style iterator over the given style attribute.
<tt style='background-color:#E8E8E8;'> text.AbstractDocument <a href=' /text/document.py#L346'>get_style</a>(attribute,position)</tt>	Get an attribute style at the given position.
<tt style='background-color:#E8E8E8;'> text.AbstractDocument <a href=' /text/document.py#L359'>get_style_range</a>(attribute,start,end)</tt>	Get an attribute style over the given range.
<tt style='background-color:#E8E8E8;'> text.AbstractDocument <a href=' /text/document.py#L382'>get_font_runs</a>(dpi)</tt>	Get a style iterator over the pyglet font font instances used in.
<tt style='background-color:#E8E8E8;'> text.AbstractDocument <a href=' /text/document.py#L399'>get_font</a>(position,dpi)</tt>	Get the font instance used at the given position.
<tt style='background-color:#E8E8E8;'> text.AbstractDocument <a href=' /text/document.py#L416'>insert_text</a>(start,text,attributes)</tt>	Insert text into the document.
<tt style='background-color:#E8E8E8;'> text.AbstractDocument <a href=' /text/document.py#L439'>delete_text</a>(start,end)</tt>	Delete text from the document.
<tt style='background-color:#E8E8E8;'> text.AbstractDocument <a href=' /text/document.py#L461'>insert_element</a>(position,element,attributes)</tt>	Insert a element into the document.
<tt style='background-color:#E8E8E8;'> text.AbstractDocument <a href=' /text/document.py#L484'>get_element</a>(position)</tt>	Get the element at a specified position.
<tt style='background-color:#E8E8E8;'> text.AbstractDocument <a href=' /text/document.py#L498'>set_style</a>(start,end,attributes)</tt>	Set text style of some or all of the document.
<tt style='background-color:#E8E8E8;'> text.AbstractDocument <a href=' /text/document.py#L516'>set_paragraph_style</a>(start,end,attributes)</tt>	Set the style for a range of paragraphs.
<tt style='background-color:#E8E8E8;'> text.RunList <a href=' /text/runlist.py#L73'>__init__</a>(size,initial)</tt>	Create a run list of the given size and a default value.
<tt style='background-color:#E8E8E8;'> text.RunList <a href=' /text/runlist.py#L85'>insert</a>(pos,length)</tt>	Insert characters into the run list.
<tt style='background-color:#E8E8E8;'> text.RunList <a href=' /text/runlist.py#L106'>delete</a>(start,end)</tt>	Remove characters from the run list.
<tt style='background-color:#E8E8E8;'> text.RunList <a href=' /text/runlist.py#L131'>set_run</a>(start,end,value)</tt>	Set the value of a range of characters.
<tt style='background-color:#E8E8E8;'> text.RunList <a href=' /text/runlist.py#L200'>get_run_iterator</a>()</tt>	Get an extended iterator over the run list.
<tt style='background-color:#E8E8E8;'> text.RunList <a href=' /text/runlist.py#L207'>__getitem__</a>(index)</tt>	Get the value at a character position.
<tt style='background-color:#E8E8E8;'> text.AbstractRunIterator <a href=' /text/runlist.py#L263'>__getitem__</a>(index)</tt>	Get the value at a given index.
<tt style='background-color:#E8E8E8;'> text.AbstractRunIterator <a href=' /text/runlist.py#L275'>ranges</a>(start,end)</tt>	Iterate over a subrange of the run list.
<tt style='background-color:#E8E8E8;'> text.OverriddenRunIterator <a href=' /text/runlist.py#L316'>__init__</a>(base_iterator,start,end,value)</tt>	Create a derived iterator.
<tt style='background-color:#E8E8E8;'> text.FilteredRunIterator <a href=' /text/runlist.py#L360'>__init__</a>(base_iterator,filter,default)</tt>	Create a filtered run iterator.
<tt style='background-color:#E8E8E8;'> text.formats.ListBuilder <a href=' /text/formats/structured.py#L91'>begin</a>(decoder,style)</tt>	Begin a list.
<tt style='background-color:#E8E8E8;'> text.formats.ListBuilder <a href=' /text/formats/structured.py#L112'>item</a>(decoder,style,value)</tt>	Begin a list item.
<tt style='background-color:#E8E8E8;'> text.formats.ListBuilder <a href=' /text/formats/structured.py#L130'>get_mark</a>(value)</tt>	Get the mark text for the next list item.
<tt style='background-color:#E8E8E8;'> text.formats.UnorderedListBuilder <a href=' /text/formats/structured.py#L143'>__init__</a>(mark)</tt>	Create an unordered list with constant mark text.
<tt style='background-color:#E8E8E8;'> text.formats.OrderedListBuilder <a href=' /text/formats/structured.py#L160'>__init__</a>(start,format)</tt>	Create an ordered list with sequentially numbered mark text.
