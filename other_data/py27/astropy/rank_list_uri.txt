<tt style='background-color:#E8E8E8;'> core. <a href=' /logger.py#L87'>_init_log</a>()</tt>	Initializes the astropy log--in most circumstances this is called automatically when importing astropy.
<tt style='background-color:#E8E8E8;'> core. <a href=' /logger.py#L105'>_teardown_log</a>()</tt>	Shut down exception and warning logging if enabled and clear all astropy loggers from the logging module's cache.
<tt style='background-color:#E8E8E8;'> core.AstropyLogger <a href=' /logger.py#L225'>enable_warnings_logging</a>()</tt>	Enable logging of warnings warn() calls.
<tt style='background-color:#E8E8E8;'> core.AstropyLogger <a href=' /logger.py#L240'>disable_warnings_logging</a>()</tt>	Disable logging of warnings warn() calls.
<tt style='background-color:#E8E8E8;'> core.AstropyLogger <a href=' /logger.py#L282'>exception_logging_enabled</a>()</tt>	Determine if the exception-logging mechanism is enabled.
<tt style='background-color:#E8E8E8;'> core.AstropyLogger <a href=' /logger.py#L301'>enable_exception_logging</a>()</tt>	Enable logging of exceptions once called any uncaught exceptions will be emitted with level.
<tt style='background-color:#E8E8E8;'> core.AstropyLogger <a href=' /logger.py#L342'>disable_exception_logging</a>()</tt>	Disable logging of exceptions once called any uncaught exceptions will no longer be emitted by this.
<tt style='background-color:#E8E8E8;'> core.AstropyLogger <a href=' /logger.py#L371'>enable_color</a>()</tt>	Enable colorized output.
<tt style='background-color:#E8E8E8;'> core.AstropyLogger <a href=' /logger.py#L377'>disable_color</a>()</tt>	Disable colorized output.
<tt style='background-color:#E8E8E8;'> core.AstropyLogger <a href=' /logger.py#L383'>log_to_file</a>(filename,filter_level,filter_origin)</tt>	Context manager to temporarily log messages to a file.
<tt style='background-color:#E8E8E8;'> core.AstropyLogger <a href=' /logger.py#L432'>log_to_list</a>(filter_level,filter_origin)</tt>	Context manager to temporarily log messages to a list.
<tt style='background-color:#E8E8E8;'> core.AstropyLogger <a href=' /logger.py#L475'>_set_defaults</a>()</tt>	Reset logger to its initial state.
<tt style='background-color:#E8E8E8;'> core.StreamHandler <a href=' /logger.py#L541'>emit</a>(record)</tt>	The formatter for stderr.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__init__.py#L19'>_is_astropy_source</a>(path)</tt>	Returns whether the source for this module is directly in an astropy source distribution or checkout.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__init__.py#L37'>_is_astropy_setup</a>()</tt>	Returns whether we are currently being imported in the context of running astropy's setup.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__init__.py#L90'>_check_numpy</a>()</tt>	Check that numpy is installed and it is of the minimum version we require.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__init__.py#L291'>online_help</a>(query)</tt>	Search the online astropy documentation for the given query.
<tt style='background-color:#E8E8E8;'> convolution.Kernel <a href=' /convolution/core.py#L49'>truncation</a>()</tt>	Deviation from the normalization to one.
<tt style='background-color:#E8E8E8;'> convolution.Kernel <a href=' /convolution/core.py#L56'>is_bool</a>()</tt>	Indicates if kernel is bool.
<tt style='background-color:#E8E8E8;'> convolution.Kernel <a href=' /convolution/core.py#L66'>model</a>()</tt>	Kernel response model.
<tt style='background-color:#E8E8E8;'> convolution.Kernel <a href=' /convolution/core.py#L80'>center</a>()</tt>	Index of the kernel center.
<tt style='background-color:#E8E8E8;'> convolution.Kernel <a href=' /convolution/core.py#L87'>normalize</a>(mode)</tt>	Normalize the filter kernel.
<tt style='background-color:#E8E8E8;'> convolution.Kernel <a href=' /convolution/core.py#L117'>shape</a>()</tt>	Shape of the kernel array.
<tt style='background-color:#E8E8E8;'> convolution.Kernel <a href=' /convolution/core.py#L124'>separable</a>()</tt>	Indicates if the filter kernel is separable.
<tt style='background-color:#E8E8E8;'> convolution.Kernel <a href=' /convolution/core.py#L170'>__array__</a>()</tt>	Array representation of the kernel.
<tt style='background-color:#E8E8E8;'> convolution.Kernel <a href=' /convolution/core.py#L146'>__add__</a>(kernel)</tt>	Add two filter kernels.
<tt style='background-color:#E8E8E8;'> convolution.Kernel <a href=' /convolution/core.py#L152'>__sub__</a>(kernel)</tt>	Subtract two filter kernels.
<tt style='background-color:#E8E8E8;'> convolution.Kernel <a href=' /convolution/core.py#L158'>__mul__</a>(value)</tt>	Multiply kernel with number or convolve two kernels.
<tt style='background-color:#E8E8E8;'> convolution.Kernel <a href=' /convolution/core.py#L164'>__rmul__</a>(value)</tt>	Multiply kernel with number or convolve two kernels.
<tt style='background-color:#E8E8E8;'> convolution.Kernel <a href=' /convolution/core.py#L176'>__array_wrap__</a>(array,context)</tt>	Wrapper for multiplication with numpy arrays.
<tt style='background-color:#E8E8E8;'> convolution. <a href=' /convolution/core.py#L315'>kernel_arithmetics</a>(kernel,value,operation)</tt>	Add subtract or multiply two kernels.
<tt style='background-color:#E8E8E8;'> convolution.CustomKernel <a href=' /convolution/kernels.py#L996'>array</a>()</tt>	Filter kernel array.
<tt style='background-color:#E8E8E8;'> convolution.CustomKernel <a href=' /convolution/kernels.py#L996'>array</a>(array)</tt>	Filter kernel array setter.
<tt style='background-color:#E8E8E8;'> convolution. <a href=' /convolution/convolve.py#L24'>convolve</a>(array,kernel,boundary,fill_value)</tt>	Convolve an array with a kernel.
<tt style='background-color:#E8E8E8;'> convolution. <a href=' /convolution/convolve.py#L253'>convolve_fft</a>(array,kernel,boundary,fill_value)</tt>	Convolve an ndarray with an nd-kernel returns a convolved image with.
<tt style='background-color:#E8E8E8;'> convolution. <a href=' /convolution/utils.py#L25'>add_kernel_arrays_1D</a>(array_1,array_2)</tt>	Add two 1d kernel arrays of different size.
<tt style='background-color:#E8E8E8;'> convolution. <a href=' /convolution/utils.py#L48'>add_kernel_arrays_2D</a>(array_1,array_2)</tt>	Add two 2d kernel arrays of different size.
<tt style='background-color:#E8E8E8;'> convolution. <a href=' /convolution/utils.py#L75'>discretize_model</a>(model,x_range,y_range,mode)</tt>	Function to evaluate analytical model functions on a grid.
<tt style='background-color:#E8E8E8;'> convolution. <a href=' /convolution/utils.py#L190'>discretize_center_1D</a>(model,x_range)</tt>	Discretize model by taking the value at the center of the bin.
<tt style='background-color:#E8E8E8;'> convolution. <a href=' /convolution/utils.py#L198'>discretize_center_2D</a>(model,x_range,y_range)</tt>	Discretize model by taking the value at the center of the pixel.
<tt style='background-color:#E8E8E8;'> convolution. <a href=' /convolution/utils.py#L208'>discretize_linear_1D</a>(model,x_range)</tt>	Discretize model by performing a linear interpolation.
<tt style='background-color:#E8E8E8;'> convolution. <a href=' /convolution/utils.py#L218'>discretize_bilinear_2D</a>(model,x_range,y_range)</tt>	Discretize model by performing a bilinear interpolation.
<tt style='background-color:#E8E8E8;'> convolution. <a href=' /convolution/utils.py#L237'>discretize_oversample_1D</a>(model,x_range,factor)</tt>	Discretize model by taking the average on an oversampled grid.
<tt style='background-color:#E8E8E8;'> convolution. <a href=' /convolution/utils.py#L252'>discretize_oversample_2D</a>(model,x_range,y_range,factor)</tt>	Discretize model by taking the average on an oversampled grid.
<tt style='background-color:#E8E8E8;'> convolution. <a href=' /convolution/utils.py#L271'>discretize_integrate_1D</a>(model,x_range)</tt>	Discretize model by integrating numerically the model over the bin.
<tt style='background-color:#E8E8E8;'> convolution. <a href=' /convolution/utils.py#L286'>discretize_integrate_2D</a>(model,x_range,y_range)</tt>	Discretize model by integrating the model over the pixel.
<tt style='background-color:#E8E8E8;'> nddata. <a href=' /nddata/decorators.py#L26'>support_nddata</a>(_func,accepts,repack,returns)</tt>	Decorator to wrap functions that could accept an nddata instance with its properties passed as function arguments.
<tt style='background-color:#E8E8E8;'> nddata.NDUncertainty <a href=' /nddata/nduncertainty.py#L104'>uncertainty_type</a>()</tt>	Str : short description of the type of uncertainty.
<tt style='background-color:#E8E8E8;'> nddata.NDUncertainty <a href=' /nddata/nduncertainty.py#L112'>supports_correlated</a>()</tt>	Bool : supports uncertainty propagation with correlated uncertainties?.
<tt style='background-color:#E8E8E8;'> nddata.NDUncertainty <a href=' /nddata/nduncertainty.py#L132'>array</a>()</tt>	Numpy ndarray : the uncertainty's value.
<tt style='background-color:#E8E8E8;'> nddata.NDUncertainty <a href=' /nddata/nduncertainty.py#L138'>unit</a>()</tt>	~astropy units unit : the unit of the uncertainty if any.
<tt style='background-color:#E8E8E8;'> nddata.NDUncertainty <a href=' /nddata/nduncertainty.py#L180'>parent_nddata</a>()</tt>	Nddata : reference to nddata instance with this uncertainty.
<tt style='background-color:#E8E8E8;'> nddata.NDUncertainty <a href=' /nddata/nduncertainty.py#L198'>__getitem__</a>(item)</tt>	Normal slicing on the array keep the unit and return a reference.
<tt style='background-color:#E8E8E8;'> nddata.NDUncertainty <a href=' /nddata/nduncertainty.py#L203'>propagate</a>(operation,other_nddata,result_data,correlation)</tt>	Calculate the resulting uncertainty given an operation on the data.
<tt style='background-color:#E8E8E8;'> nddata.NDUncertainty <a href=' /nddata/nduncertainty.py#L274'>_convert_uncertainty</a>(other_uncert)</tt>	Checks if the uncertainties are compatible for propagation.
<tt style='background-color:#E8E8E8;'> nddata.UnknownUncertainty <a href=' /nddata/nduncertainty.py#L335'>supports_correlated</a>()</tt>	False : uncertainty propagation is *not* possible for this class.
<tt style='background-color:#E8E8E8;'> nddata.UnknownUncertainty <a href=' /nddata/nduncertainty.py#L341'>uncertainty_type</a>()</tt>	"unknown" : unknownuncertainty implements any unknown uncertainty type.
<tt style='background-color:#E8E8E8;'> nddata.UnknownUncertainty <a href=' /nddata/nduncertainty.py#L348'>_convert_uncertainty</a>(other_uncert)</tt>	Raise an exception because unknown uncertainty types cannot implement propagation.
<tt style='background-color:#E8E8E8;'> nddata.UnknownUncertainty <a href=' /nddata/nduncertainty.py#L355'>_propagate_add</a>(other_uncert,result_data,correlation)</tt>	Not possible for unknown uncertainty types.
<tt style='background-color:#E8E8E8;'> nddata.StdDevUncertainty <a href=' /nddata/nduncertainty.py#L414'>supports_correlated</a>()</tt>	True : stddevuncertainty allows to propagate correlated uncertainties.
<tt style='background-color:#E8E8E8;'> nddata.StdDevUncertainty <a href=' /nddata/nduncertainty.py#L424'>uncertainty_type</a>()</tt>	"std" : stddevuncertainty implements standard deviation.
<tt style='background-color:#E8E8E8;'> nddata.NDDataBase <a href=' /nddata/nddata_base.py#L28'>data</a>()</tt>	The stored dataset.
<tt style='background-color:#E8E8E8;'> nddata.NDDataBase <a href=' /nddata/nddata_base.py#L34'>mask</a>()</tt>	Mask for the dataset.
<tt style='background-color:#E8E8E8;'> nddata.NDDataBase <a href=' /nddata/nddata_base.py#L43'>unit</a>()</tt>	Unit for the dataset.
<tt style='background-color:#E8E8E8;'> nddata.NDDataBase <a href=' /nddata/nddata_base.py#L49'>wcs</a>()</tt>	World coordinate system wcs for the dataset.
<tt style='background-color:#E8E8E8;'> nddata.NDDataBase <a href=' /nddata/nddata_base.py#L55'>meta</a>()</tt>	Additional meta information about the dataset.
<tt style='background-color:#E8E8E8;'> nddata.NDDataBase <a href=' /nddata/nddata_base.py#L63'>uncertainty</a>()</tt>	Uncertainty in the dataset.
<tt style='background-color:#E8E8E8;'> nddata.NDDataArray <a href=' /nddata/compat.py#L187'>shape</a>()</tt>	Shape tuple of this object's data.
<tt style='background-color:#E8E8E8;'> nddata.NDDataArray <a href=' /nddata/compat.py#L194'>size</a>()</tt>	Integer size of this object's data.
<tt style='background-color:#E8E8E8;'> nddata.NDDataArray <a href=' /nddata/compat.py#L201'>dtype</a>()</tt>	Numpy dtype of this object's data.
<tt style='background-color:#E8E8E8;'> nddata.NDDataArray <a href=' /nddata/compat.py#L208'>ndim</a>()</tt>	Integer dimensions of this object's data.
<tt style='background-color:#E8E8E8;'> nddata.NDDataArray <a href=' /nddata/compat.py#L236'>__array__</a>()</tt>	This allows code that requests a numpy array to use an nddata object as a numpy array.
<tt style='background-color:#E8E8E8;'> nddata.NDDataArray <a href=' /nddata/compat.py#L246'>__array_prepare__</a>(array,context)</tt>	This ensures that a masked array is returned if self is masked.
<tt style='background-color:#E8E8E8;'> nddata.NDDataArray <a href=' /nddata/compat.py#L255'>convert_unit_to</a>(unit,equivalencies)</tt>	Returns a new nddata object whose values have been converted to a new unit.
<tt style='background-color:#E8E8E8;'> nddata. <a href=' /nddata/utils.py#L34'>_round</a>(a)</tt>	Always round up.
<tt style='background-color:#E8E8E8;'> nddata. <a href=' /nddata/utils.py#L43'>_offset</a>(a)</tt>	Offset by 0 5 for an even array.
<tt style='background-color:#E8E8E8;'> nddata. <a href=' /nddata/utils.py#L57'>overlap_slices</a>(large_array_shape,small_array_shape,position,mode)</tt>	Get slices for the overlapping part of a small and a large array.
<tt style='background-color:#E8E8E8;'> nddata. <a href=' /nddata/utils.py#L160'>extract_array</a>(array_large,shape,position,mode)</tt>	Extract a smaller array of the given shape and position from a larger array.
<tt style='background-color:#E8E8E8;'> nddata. <a href=' /nddata/utils.py#L252'>add_array</a>(array_large,array_small,position)</tt>	Add a smaller array at a given position in a larger array.
<tt style='background-color:#E8E8E8;'> nddata. <a href=' /nddata/utils.py#L303'>subpixel_indices</a>(position,subsampling)</tt>	Convert decimal points to indices given a subsampling factor.
<tt style='background-color:#E8E8E8;'> nddata. <a href=' /nddata/utils.py#L346'>block_reduce</a>(data,block_size,func)</tt>	Downsample a data array by applying a function to local blocks.
<tt style='background-color:#E8E8E8;'> nddata. <a href=' /nddata/utils.py#L417'>block_replicate</a>(data,block_size,conserve_sum)</tt>	Upsample a data array by block replication.
<tt style='background-color:#E8E8E8;'> nddata.Cutout2D <a href=' /nddata/utils.py#L700'>to_original_position</a>(cutout_position)</tt>	Convert an x y position in the cutout array to the original x y position in the original large array.
<tt style='background-color:#E8E8E8;'> nddata.Cutout2D <a href=' /nddata/utils.py#L719'>to_cutout_position</a>(original_position)</tt>	Convert an x y position in the original large array to the x y position in the cutout array.
<tt style='background-color:#E8E8E8;'> nddata.Cutout2D <a href=' /nddata/utils.py#L738'>plot_on_original</a>(ax,fill)</tt>	Plot the cutout region on a matplotlib axes instance.
<tt style='background-color:#E8E8E8;'> nddata.Cutout2D <a href=' /nddata/utils.py#L778'>_calc_center</a>(slices)</tt>	Calculate the center position the center position will be.
<tt style='background-color:#E8E8E8;'> nddata.Cutout2D <a href=' /nddata/utils.py#L789'>_calc_bbox</a>(slices)</tt>	Calculate a minimal bounding box in the form ( ymin ymax xmin xmax ).
<tt style='background-color:#E8E8E8;'> nddata.Cutout2D <a href=' /nddata/utils.py#L801'>origin_original</a>()</tt>	The x y index of the origin pixel of the cutout with respect to the original array.
<tt style='background-color:#E8E8E8;'> nddata.Cutout2D <a href=' /nddata/utils.py#L811'>origin_cutout</a>()</tt>	The x y index of the origin pixel of the cutout with respect to the cutout array.
<tt style='background-color:#E8E8E8;'> nddata.Cutout2D <a href=' /nddata/utils.py#L820'>position_original</a>()</tt>	The x y position index rounded to the nearest pixel in the original array.
<tt style='background-color:#E8E8E8;'> nddata.Cutout2D <a href=' /nddata/utils.py#L829'>position_cutout</a>()</tt>	The x y position index rounded to the nearest pixel in the cutout array.
<tt style='background-color:#E8E8E8;'> nddata.Cutout2D <a href=' /nddata/utils.py#L838'>center_original</a>()</tt>	The central x y position of the cutout array with respect to the original array.
<tt style='background-color:#E8E8E8;'> nddata.Cutout2D <a href=' /nddata/utils.py#L847'>center_cutout</a>()</tt>	The central x y position of the cutout array with respect to the cutout array.
<tt style='background-color:#E8E8E8;'> nddata.Cutout2D <a href=' /nddata/utils.py#L856'>bbox_original</a>()</tt>	The bounding box ( ymin ymax xmin xmax ) of the minimal rectangular region of the cutout array with respect to the.
<tt style='background-color:#E8E8E8;'> nddata.Cutout2D <a href=' /nddata/utils.py#L866'>bbox_cutout</a>()</tt>	The bounding box ( ymin ymax xmin xmax ) of the minimal rectangular region of the cutout array with respect to the.
<tt style='background-color:#E8E8E8;'> nddata.NDData <a href=' /nddata/nddata.py#L240'>data</a>()</tt>	~numpy ndarray-like : the stored dataset.
<tt style='background-color:#E8E8E8;'> nddata.NDData <a href=' /nddata/nddata.py#L257'>mask</a>()</tt>	Any type : mask for the dataset if any.
<tt style='background-color:#E8E8E8;'> nddata.NDData <a href=' /nddata/nddata.py#L261'>unit</a>()</tt>	~astropy units unit : unit for the dataset if any.
<tt style='background-color:#E8E8E8;'> nddata.NDData <a href=' /nddata/nddata.py#L268'>wcs</a>()</tt>	Any type : a world coordinate system wcs for the dataset if any.
<tt style='background-color:#E8E8E8;'> nddata.NDData <a href=' /nddata/nddata.py#L287'>uncertainty</a>()</tt>	Any type : uncertainty in the dataset if any.
<tt style='background-color:#E8E8E8;'> nddata.mixins.NDSlicingMixin <a href=' /nddata/mixins/ndslicing.py#L64'>_slice</a>(item)</tt>	Collects the sliced attributes and passes them back as dict.
<tt style='background-color:#E8E8E8;'> nddata.mixins.NDIOMixin <a href=' /nddata/mixins/ndio.py#L19'>read</a>(cls)</tt>	Read and parse gridded n-dimensional data and return as an nddata-derived object.
<tt style='background-color:#E8E8E8;'> nddata.mixins.NDIOMixin <a href=' /nddata/mixins/ndio.py#L31'>write</a>()</tt>	Write a gridded n-dimensional data object out in specified format.
<tt style='background-color:#E8E8E8;'> nddata.mixins.NDArithmeticMixin <a href=' /nddata/mixins/ndarithmetic.py#L170'>_arithmetic</a>(operation,operand,propagate_uncertainties,handle_mask)</tt>	Base method which calculates the result of the arithmetic operation.
<tt style='background-color:#E8E8E8;'> nddata.mixins.NDArithmeticMixin <a href=' /nddata/mixins/ndarithmetic.py#L293'>_arithmetic_data</a>(operation,operand)</tt>	Calculate the resulting data parameters.
<tt style='background-color:#E8E8E8;'> nddata.mixins.NDArithmeticMixin <a href=' /nddata/mixins/ndarithmetic.py#L332'>_arithmetic_uncertainty</a>(operation,operand,result,correlation)</tt>	Calculate the resulting uncertainty.
<tt style='background-color:#E8E8E8;'> nddata.mixins.NDArithmeticMixin <a href=' /nddata/mixins/ndarithmetic.py#L404'>_arithmetic_mask</a>(operation,operand,handle_mask)</tt>	Calculate the resulting mask this is implemented as the piecewise or operation if both have a.
<tt style='background-color:#E8E8E8;'> nddata.mixins.NDArithmeticMixin <a href=' /nddata/mixins/ndarithmetic.py#L447'>_arithmetic_wcs</a>(operation,operand,compare_wcs)</tt>	Calculate the resulting wcs.
<tt style='background-color:#E8E8E8;'> nddata.mixins.NDArithmeticMixin <a href=' /nddata/mixins/ndarithmetic.py#L494'>_arithmetic_meta</a>(operation,operand,handle_meta)</tt>	Calculate the resulting meta.
<tt style='background-color:#E8E8E8;'> nddata.mixins.NDArithmeticMixin <a href=' /nddata/mixins/ndarithmetic.py#L546'>_prepare_then_do_arithmetic</a>(self_or_cls,operation,operand,operand2)</tt>	Intermediate method called by public arithmetics (i e add).
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/registry.py#L52'>delay_doc_updates</a>(cls)</tt>	Contextmanager to disable documentation updates when registering reader and writer.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/registry.py#L88'>get_formats</a>(data_class,readwrite)</tt>	Get the list of registered i/o formats as a table.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/registry.py#L156'>_update__doc__</a>(data_class,readwrite)</tt>	Update the docstring to include all the available readers / writers for the data_class.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/registry.py#L215'>register_reader</a>(data_format,data_class,function,force)</tt>	Register a reader function.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/registry.py#L244'>register_writer</a>(data_format,data_class,function,force)</tt>	Register a table writer function.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/registry.py#L273'>register_identifier</a>(data_format,data_class,identifier,force)</tt>	Associate an identifier function with a specific data type.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/registry.py#L327'>identify_format</a>(origin,data_class_required,path,fileobj)</tt>	Loop through identifiers to see which formats match.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/registry.py#L372'>get_reader</a>(data_format,data_class)</tt>	Get reader for data_format.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/registry.py#L400'>get_writer</a>(data_format,data_class)</tt>	Get writer for data_format.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/registry.py#L428'>read</a>(cls)</tt>	Read in data.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/registry.py#L490'>write</a>(data)</tt>	Write out data.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/registry.py#L521'>_is_best_match</a>(class1,class2,format_classes)</tt>	Determine if class2 is the "best" match for class1 in the list of classes.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/registry.py#L537'>_get_valid_format</a>(mode,cls,path,fileobj)</tt>	Returns the first valid format that can be used to read/write the data in question.
<tt style='background-color:#E8E8E8;'> io.ascii.CommentedHeaderHeader <a href=' /io/ascii/basic.py#L115'>process_lines</a>(lines)</tt>	Return only lines that start with the comment regexp for these.
<tt style='background-color:#E8E8E8;'> io.ascii.CommentedHeader <a href=' /io/ascii/basic.py#L150'>read</a>(table)</tt>	Read input data file-like object filename list of strings or single string into a table and return the result.
<tt style='background-color:#E8E8E8;'> io.ascii.CommentedHeader <a href=' /io/ascii/basic.py#L166'>write_header</a>(lines,meta)</tt>	Write comment lines after rather than before the header.
<tt style='background-color:#E8E8E8;'> io.ascii.Csv <a href=' /io/ascii/basic.py#L278'>inconsistent_handler</a>(str_vals,ncols)</tt>	Adjust row if it is too short.
<tt style='background-color:#E8E8E8;'> io.ascii.RdbHeader <a href=' /io/ascii/basic.py#L316'>get_cols</a>(lines)</tt>	Initialize the header column objects from the table lines.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/ui.py#L50'>_probably_html</a>(table,maxchars)</tt>	Determine if table probably contains html content see pr #3693 and issue.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/ui.py#L96'>set_guess</a>(guess)</tt>	Set the default value of the guess parameter for read() parameters.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/core.py#L1336'>_get_reader</a>(Reader,Inputter,Outputter)</tt>	Initialize a table reader allowing for common customizations see ui get_reader().
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/ui.py#L183'>read</a>(table,guess)</tt>	Read the input table and return the table most of.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/ui.py#L358'>_guess</a>(table,read_kwargs,format,fast_reader)</tt>	Try to read the table using various sets of keyword args start with the.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/ui.py#L517'>_get_guess_kwargs_list</a>(read_kwargs)</tt>	Get the full list of reader keyword argument dicts that are the basis for the format guessing process.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/core.py#L1425'>_get_writer</a>(Writer,fast_writer)</tt>	Initialize a table writer allowing for common customizations this.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/ui.py#L651'>write</a>(table,output,format,Writer)</tt>	Write the input table to filename most of the default behavior.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/ui.py#L742'>get_read_trace</a>()</tt>	Return a traceback of the attempted read formats for the last call to ~astropy.
<tt style='background-color:#E8E8E8;'> io.ascii.FixedWidthHeader <a href=' /io/ascii/fixedwidth.py#L85'>get_cols</a>(lines)</tt>	Initialize the header column objects from the table lines.
<tt style='background-color:#E8E8E8;'> io.ascii.FixedWidthHeader <a href=' /io/ascii/fixedwidth.py#L160'>get_fixedwidth_params</a>(line)</tt>	Split line on the delimiter and determine column values and column start and end positions.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/latex.py#L37'>add_dictval_to_list</a>(adict,key,alist)</tt>	Add a value from a dictionary to a list.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/latex.py#L55'>find_latex_line</a>(lines,latex)</tt>	Find the first line which matches a patters parameters.
<tt style='background-color:#E8E8E8;'> io.ascii.LatexSplitter <a href=' /io/ascii/latex.py#L92'>process_line</a>(line)</tt>	Remove whitespace at the beginning or end of line also remove.
<tt style='background-color:#E8E8E8;'> io.ascii.LatexSplitter <a href=' /io/ascii/latex.py#L103'>process_val</a>(val)</tt>	Remove whitespace and {} at the beginning or end of value.
<tt style='background-color:#E8E8E8;'> io.ascii.LatexSplitter <a href=' /io/ascii/latex.py#L110'>join</a>(vals)</tt>	Join values together and add a few extra spaces for readability.
<tt style='background-color:#E8E8E8;'> io.ascii.AASTexHeaderSplitter <a href=' /io/ascii/latex.py#L338'>process_line</a>(line)</tt>	Extract column names from tablehead.
<tt style='background-color:#E8E8E8;'> io.ascii.CdsHeader <a href=' /io/ascii/cds.py#L45'>get_cols</a>(lines)</tt>	Initialize the header column objects from the table lines for a cds header.
<tt style='background-color:#E8E8E8;'> io.ascii.CdsData <a href=' /io/ascii/cds.py#L164'>process_lines</a>(lines)</tt>	Skip over cds header by finding the last section delimiter.
<tt style='background-color:#E8E8E8;'> io.ascii.Cds <a href=' /io/ascii/cds.py#L293'>write</a>(table)</tt>	Not available for the cds class raises notimplementederror.
<tt style='background-color:#E8E8E8;'> io.ascii.CsvWriter <a href=' /io/ascii/core.py#L79'>writerow</a>(values)</tt>	Similar to csv writer writerow but with the custom quoting behavior.
<tt style='background-color:#E8E8E8;'> io.ascii.CsvWriter <a href=' /io/ascii/core.py#L96'>writerows</a>(values_list)</tt>	Similar to csv writer writerows but with the custom quoting behavior.
<tt style='background-color:#E8E8E8;'> io.ascii.CsvWriter <a href=' /io/ascii/core.py#L114'>_writerow</a>(writerow_func,values,has_empty)</tt>	Call writerow_func either writerow or writerows with values.
<tt style='background-color:#E8E8E8;'> io.ascii.MaskedConstant <a href=' /io/ascii/core.py#L148'>__hash__</a>()</tt>	All instances of this class shall have the same hash.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseInputter <a href=' /io/ascii/core.py#L259'>get_lines</a>(table)</tt>	Get the lines from the table input the input table can be one of.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseInputter <a href=' /io/ascii/core.py#L299'>process_lines</a>(lines)</tt>	Process lines for subsequent use in the default case do nothing.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseSplitter <a href=' /io/ascii/core.py#L335'>process_line</a>(line)</tt>	Remove whitespace at the beginning or end of line this is especially useful for.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseSplitter <a href=' /io/ascii/core.py#L340'>process_val</a>(val)</tt>	Remove whitespace at the beginning or end of value.
<tt style='background-color:#E8E8E8;'> io.ascii.DefaultSplitter <a href=' /io/ascii/core.py#L391'>process_line</a>(line)</tt>	Remove whitespace at the beginning or end of line this is especially useful for.
<tt style='background-color:#E8E8E8;'> io.ascii.DefaultSplitter <a href=' /io/ascii/core.py#L400'>__call__</a>(lines)</tt>	Return an iterator over the table lines, where each iterator output is a list of the split line values.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/core.py#L461'>_replace_tab_with_space</a>(line,escapechar,quotechar)</tt>	Replace tabs with spaces in given string preserving quoted substrings parameters.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/core.py#L491'>_get_line_index</a>(line_or_func,lines)</tt>	Return the appropriate line index depending on line_or_func which can be either a function a positive or negative int or none.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseHeader <a href=' /io/ascii/core.py#L531'>update_meta</a>(lines,meta)</tt>	Extract any table-level metadata e g keywords comments column metadata from.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseHeader <a href=' /io/ascii/core.py#L547'>get_cols</a>(lines)</tt>	Initialize the header column objects from the table lines.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseHeader <a href=' /io/ascii/core.py#L584'>process_lines</a>(lines)</tt>	Generator to yield non-blank and non-comment lines.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseHeader <a href=' /io/ascii/core.py#L605'>colnames</a>()</tt>	Return the column names of the table.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseHeader <a href=' /io/ascii/core.py#L622'>check_column_names</a>(names,strict_names,guessing)</tt>	Check column names.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseData <a href=' /io/ascii/core.py#L686'>process_lines</a>(lines)</tt>	Strip out comment lines and blank lines from list of lines.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseData <a href=' /io/ascii/core.py#L708'>get_data_lines</a>(lines)</tt>	Set the data_lines attribute to the lines slice comprising the table data values.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseData <a href=' /io/ascii/core.py#L720'>get_str_vals</a>()</tt>	Return a generator that returns a list of column values as strings for each data line.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseData <a href=' /io/ascii/core.py#L725'>masks</a>(cols)</tt>	Set fill value for each column and then apply that fill value in the first step it is evaluated with value from fill_values applies to.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseData <a href=' /io/ascii/core.py#L736'>_set_fill_values</a>(cols)</tt>	Set the fill values of the individual cols based on fill_values of basedata fill values has the following form.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseData <a href=' /io/ascii/core.py#L780'>_set_masks</a>(cols)</tt>	Replace string values in col str_vals and set masks.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseData <a href=' /io/ascii/core.py#L790'>_replace_vals</a>(cols)</tt>	Replace string values in col str_vals.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseData <a href=' /io/ascii/core.py#L802'>str_vals</a>()</tt>	Convert all values in table to a list of lists of strings.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/core.py#L832'>convert_numpy</a>(numpy_type)</tt>	Return a tuple containing a function which converts a list into a numpy array and the type produced by the converter function.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseOutputter <a href=' /io/ascii/core.py#L907'>_validate_and_copy</a>(col,converters)</tt>	Validate the format for the type converters and then copy those which are valid converters for this column (i.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/core.py#L1030'>_apply_include_exclude_names</a>(table,names,include_names,exclude_names)</tt>	Apply names include_names and exclude_names to a table.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseReader <a href=' /io/ascii/core.py#L1111'>read</a>(table)</tt>	Read the table and return the results in a format determined by the outputter attribute.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseReader <a href=' /io/ascii/core.py#L1194'>inconsistent_handler</a>(str_vals,ncols)</tt>	Adjust or skip data entries if a row is inconsistent with the header.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseReader <a href=' /io/ascii/core.py#L1222'>comment_lines</a>()</tt>	Return lines in the table that match header comment regexp.
<tt style='background-color:#E8E8E8;'> io.ascii.BaseReader <a href=' /io/ascii/core.py#L1238'>write</a>(table)</tt>	Write table as list of strings.
<tt style='background-color:#E8E8E8;'> io.ascii.WhitespaceSplitter <a href=' /io/ascii/core.py#L1312'>process_line</a>(line)</tt>	Replace tab with space within line while respecting quoted substrings.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/html.py#L48'>identify_table</a>(soup,htmldict,numtable)</tt>	Checks whether the given beautifulsoup tag is the table the user intends to process.
<tt style='background-color:#E8E8E8;'> io.ascii.HTMLInputter <a href=' /io/ascii/html.py#L78'>process_lines</a>(lines)</tt>	Convert the given input into a list of soupstring rows for further processing.
<tt style='background-color:#E8E8E8;'> io.ascii.HTMLSplitter <a href=' /io/ascii/html.py#L120'>__call__</a>(lines)</tt>	Return html data from lines as a generator.
<tt style='background-color:#E8E8E8;'> io.ascii.HTMLOutputter <a href=' /io/ascii/html.py#L154'>__call__</a>(cols,meta)</tt>	Process the data in multidimensional columns.
<tt style='background-color:#E8E8E8;'> io.ascii.HTMLHeader <a href=' /io/ascii/html.py#L180'>start_line</a>(lines)</tt>	Return the line number at which header data begins.
<tt style='background-color:#E8E8E8;'> io.ascii.HTMLHeader <a href=' /io/ascii/html.py#L194'>_set_cols_from_names</a>()</tt>	Set columns from header names handling multicolumns appropriately.
<tt style='background-color:#E8E8E8;'> io.ascii.HTMLData <a href=' /io/ascii/html.py#L221'>start_line</a>(lines)</tt>	Return the line number at which table data begins.
<tt style='background-color:#E8E8E8;'> io.ascii.HTMLData <a href=' /io/ascii/html.py#L239'>end_line</a>(lines)</tt>	Return the line number at which table data ends.
<tt style='background-color:#E8E8E8;'> io.ascii.HTML <a href=' /io/ascii/html.py#L322'>__init__</a>(htmldict)</tt>	Initialize classes for html reading and writing.
<tt style='background-color:#E8E8E8;'> io.ascii.HTML <a href=' /io/ascii/html.py#L334'>read</a>(table)</tt>	Read the table in html format and return a resulting table.
<tt style='background-color:#E8E8E8;'> io.ascii.HTML <a href=' /io/ascii/html.py#L342'>write</a>(table)</tt>	Return data in table converted to html as a list of strings.
<tt style='background-color:#E8E8E8;'> io.ascii.HTML <a href=' /io/ascii/html.py#L445'>fill_values</a>(col,col_str_iters)</tt>	Return an iterator of the values with replacements based on fill_values.
<tt style='background-color:#E8E8E8;'> io.ascii.FastBasic <a href=' /io/ascii/fastbasic.py#L61'>read</a>(table)</tt>	Read input data file-like object filename list of strings or single string into a table and return the result.
<tt style='background-color:#E8E8E8;'> io.ascii.FastBasic <a href=' /io/ascii/fastbasic.py#L134'>write</a>(table,output)</tt>	Use a fast cython method to write table data to output where output is a filename or file-like object.
<tt style='background-color:#E8E8E8;'> io.ascii.FastCsv <a href=' /io/ascii/fastbasic.py#L170'>write</a>(table,output)</tt>	Override the default write method of fastbasic to output masked values as empty fields.
<tt style='background-color:#E8E8E8;'> io.ascii.FastNoHeader <a href=' /io/ascii/fastbasic.py#L204'>write</a>(table,output)</tt>	Override the default writing behavior in fastbasic so that columns names are not included in output.
<tt style='background-color:#E8E8E8;'> io.ascii.FastCommentedHeader <a href=' /io/ascii/fastbasic.py#L228'>read</a>(table)</tt>	Read input data file-like object filename list of strings or single string into a table and return the result.
<tt style='background-color:#E8E8E8;'> io.ascii.FastCommentedHeader <a href=' /io/ascii/fastbasic.py#L263'>write</a>(table,output)</tt>	Override the default writing behavior in fastbasic so that column names are commented.
<tt style='background-color:#E8E8E8;'> io.ascii.FastRdb <a href=' /io/ascii/fastbasic.py#L333'>write</a>(table,output)</tt>	Override the default writing behavior in fastbasic to output a line with column types after the column name line.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/misc.py#L18'>first_true_index</a>(iterable,pred,default)</tt>	Find the first index position for the which the callable pred returns true.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/misc.py#L28'>first_false_index</a>(iterable,pred,default)</tt>	Find the first index position for the which the callable pred returns false.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/misc.py#L37'>sortmore</a>()</tt>	Sorts any number of lists according to optionally given item sorting key function s and/or a global sorting key function.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/misc.py#L121'>groupmore</a>(func)</tt>	Extends the itertools groupby functionality to arbitrary number of iterators.
<tt style='background-color:#E8E8E8;'> io.ascii.EcsvHeader <a href=' /io/ascii/ecsv.py#L25'>process_lines</a>(lines)</tt>	Return only non-blank lines that start with the comment regexp for these.
<tt style='background-color:#E8E8E8;'> io.ascii.EcsvHeader <a href=' /io/ascii/ecsv.py#L42'>write</a>(lines)</tt>	Write header information in the ecsv ascii format this format.
<tt style='background-color:#E8E8E8;'> io.ascii.EcsvHeader <a href=' /io/ascii/ecsv.py#L77'>write_comments</a>(lines,meta)</tt>	Override the default write_comments to do nothing since this is handled in the custom write method.
<tt style='background-color:#E8E8E8;'> io.ascii.EcsvHeader <a href=' /io/ascii/ecsv.py#L84'>update_meta</a>(lines,meta)</tt>	Override the default update_meta to do nothing this process is done.
<tt style='background-color:#E8E8E8;'> io.ascii.EcsvHeader <a href=' /io/ascii/ecsv.py#L91'>get_cols</a>(lines)</tt>	Initialize the header column objects from the table lines.
<tt style='background-color:#E8E8E8;'> io.ascii.SExtractorHeader <a href=' /io/ascii/sextractor.py#L22'>get_cols</a>(lines)</tt>	Initialize the header column objects from the table lines for a sextractor header.
<tt style='background-color:#E8E8E8;'> io.ascii.SExtractor <a href=' /io/ascii/sextractor.py#L139'>read</a>(table)</tt>	Read input data file-like object filename list of strings or single string into a table and return the result.
<tt style='background-color:#E8E8E8;'> io.ascii.DaophotHeader <a href=' /io/ascii/daophot.py#L42'>parse_col_defs</a>(grouped_lines_dict)</tt>	Parse a series of column definition lines like below there may be several.
<tt style='background-color:#E8E8E8;'> io.ascii.DaophotHeader <a href=' /io/ascii/daophot.py#L95'>update_meta</a>(lines,meta)</tt>	Extract table-level keywords for daophot table these are indicated by.
<tt style='background-color:#E8E8E8;'> io.ascii.DaophotHeader <a href=' /io/ascii/daophot.py#L135'>extract_keyword_line</a>(line)</tt>	Extract info from a header keyword line (#k).
<tt style='background-color:#E8E8E8;'> io.ascii.DaophotHeader <a href=' /io/ascii/daophot.py#L147'>get_cols</a>(lines)</tt>	Initialize the header column objects from the table lines for a daophot header.
<tt style='background-color:#E8E8E8;'> io.ascii.DaophotInputter <a href=' /io/ascii/daophot.py#L230'>search_multiline</a>(lines,depth)</tt>	Search lines for special continuation character to determine number of continued rows in a datablock.
<tt style='background-color:#E8E8E8;'> io.ascii.IpacHeader <a href=' /io/ascii/ipac.py#L86'>process_lines</a>(lines)</tt>	Generator to yield ipac header lines i e those starting and ending with.
<tt style='background-color:#E8E8E8;'> io.ascii.IpacHeader <a href=' /io/ascii/ipac.py#L95'>update_meta</a>(lines,meta)</tt>	Extract table-level comments and keywords for ipac table see.
<tt style='background-color:#E8E8E8;'> io.ascii.IpacHeader <a href=' /io/ascii/ipac.py#L164'>get_cols</a>(lines)</tt>	Initialize the header column objects from the table lines.
<tt style='background-color:#E8E8E8;'> io.ascii.IpacData <a href=' /io/ascii/ipac.py#L319'>write</a>(lines,widths,vals_list)</tt>	Ipac writer modified from fixedwidth writer.
<tt style='background-color:#E8E8E8;'> io.ascii.Ipac <a href=' /io/ascii/ipac.py#L440'>write</a>(table)</tt>	Write table as list of strings.
<tt style='background-color:#E8E8E8;'> io.misc. <a href=' /io/misc/pickle_helpers.py#L18'>fnunpickle</a>(fileorname,number,usecPickle)</tt>	Unpickle pickled objects from a specified file and return the contents.
<tt style='background-color:#E8E8E8;'> io.misc. <a href=' /io/misc/pickle_helpers.py#L84'>fnpickle</a>(object,fileorname,usecPickle,protocol)</tt>	Pickle an object to a specified file.
<tt style='background-color:#E8E8E8;'> io.misc. <a href=' /io/misc/hdf5.py#L25'>_find_all_structured_arrays</a>(handle)</tt>	Find all structured arrays in an hdf5 file.
<tt style='background-color:#E8E8E8;'> io.misc. <a href=' /io/misc/hdf5.py#L59'>read_table_hdf5</a>(input,path)</tt>	Read a table object from an hdf5 file this requires h5py <http //h5py.
<tt style='background-color:#E8E8E8;'> io.misc. <a href=' /io/misc/hdf5.py#L161'>write_table_hdf5</a>(table,output,path,compression)</tt>	Write a table object to an hdf5 file this requires h5py <http //h5py.
<tt style='background-color:#E8E8E8;'> io.misc. <a href=' /io/misc/yaml.py#L246'>load</a>(stream)</tt>	Parse the first yaml document in a stream using the astropyloader and produce the corresponding python object.
<tt style='background-color:#E8E8E8;'> io.misc. <a href=' /io/misc/yaml.py#L263'>load_all</a>(stream)</tt>	Parse the all yaml documents in a stream using the astropyloader class and produce the corresponding python object.
<tt style='background-color:#E8E8E8;'> io.misc. <a href=' /io/misc/yaml.py#L281'>dump</a>(data,stream)</tt>	Serialize a python object into a yaml stream using the astropydumper class.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/_numpy_hacks.py#L10'>realign_dtype</a>(dtype,offsets)</tt>	Given a numpy struct dtype object an a list of integer offsets with one offset per field in the dtype returns a new dtype where each field has the.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_record <a href=' /io/fits/fitsrec.py#L102'>__repr__</a>()</tt>	Display a single row.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_record <a href=' /io/fits/fitsrec.py#L112'>field</a>(field)</tt>	Get the field data of the record.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_record <a href=' /io/fits/fitsrec.py#L119'>setfield</a>(field,value)</tt>	Set the field data of the record.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L158'>__new__</a>(subtype,input)</tt>	Construct a fits record array from a recarray.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L189'>__reduce__</a>()</tt>	Return a 3-tuple for pickling a fits_rec use the super-class.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L256'>_init</a>()</tt>	Initializes internal attributes specific to fits-isms.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L268'>from_columns</a>(cls,columns,nrows,fill)</tt>	Given a coldefs object of unknown origin initialize a new fits_rec object.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L561'>copy</a>(order)</tt>	The numpy documentation lies numpy ndarray copy is not equivalent to.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L577'>columns</a>()</tt>	A user-visible accessor for the coldefs.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L634'>names</a>()</tt>	List of column names.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L645'>formats</a>()</tt>	List of column fits formats.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L654'>_raw_itemsize</a>()</tt>	Returns the size of row items that would be written to the raw fits file taking into account the possibility of unicode columns being.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L676'>field</a>(key)</tt>	A view of a column's data as an array.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L726'>_cache_field</a>(name,field)</tt>	Do not store fields in _converted if one of its bases is self or if it has a common base with self.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L754'>_update_column_attribute_changed</a>(column,idx,attr,old_value)</tt>	Update how the data is formatted depending on changes to column attributes initiated by the user through the column interface.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L770'>_update_column_name</a>(column,idx,old_name,name)</tt>	Update the dtype field names when a column name is changed.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L777'>_convert_x</a>(field,recformat)</tt>	Convert a raw table column to a bit array as specified by the fits x format.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L786'>_convert_p</a>(column,field,recformat)</tt>	Convert a raw table column of fits p or q format descriptors to a vla column with the array data returned from the heap.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L828'>_convert_ascii</a>(column,field)</tt>	Special handling for ascii table columns to convert columns containing numeric types to actual numeric arrays from the string representation.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L869'>_convert_other</a>(column,field,recformat)</tt>	Perform conversions on any other fixed-width column data types.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L995'>_get_heap_data</a>()</tt>	Returns a pointer into the table's raw data to its heap if present.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L1009'>_get_raw_data</a>()</tt>	Returns the base array of self that "raw data array" that is the array in the format that it was first read from a file before it was.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L1033'>_get_scale_factors</a>(column)</tt>	Get all the scaling flags and factors for one column.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L1060'>_scale_back</a>(update_heap_pointers)</tt>	Update the parent array using the latest scaled array.
<tt style='background-color:#E8E8E8;'> io.fits.FITS_rec <a href=' /io/fits/fitsrec.py#L1210'>_scale_back_ascii</a>(col_idx,input_field,output_field)</tt>	Convert internal array values back to ascii table representation.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/fitsrec.py#L1282'>_get_recarray_field</a>(array,key)</tt>	Compatibility function for using the recarray base class's field method.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/fitsrec.py#L1299'>_rstrip_inplace</a>(array,chars)</tt>	Performs an in-place rstrip operation on string arrays.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/fitsrec.py#L1321'>_ascii_encode</a>(inarray,out)</tt>	Takes a unicode array and fills the output string array with the ascii encodings if possible of the elements of the input array.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/fitsrec.py#L1356'>_has_unicode_fields</a>(array)</tt>	Returns true if any fields in a structured array have unicode dtype.
<tt style='background-color:#E8E8E8;'> io.fits.NotifierMixin <a href=' /io/fits/util.py#L98'>_add_listener</a>(listener)</tt>	Add an object to the list of listeners to notify of changes to this object.
<tt style='background-color:#E8E8E8;'> io.fits.NotifierMixin <a href=' /io/fits/util.py#L111'>_remove_listener</a>(listener)</tt>	Removes the specified listener from the listeners list this relies.
<tt style='background-color:#E8E8E8;'> io.fits.NotifierMixin <a href=' /io/fits/util.py#L123'>_notify</a>(notification)</tt>	Notify all listeners of some particular state change by calling their _update_<notification> method with the given *args and.
<tt style='background-color:#E8E8E8;'> io.fits.NotifierMixin <a href=' /io/fits/util.py#L149'>__getstate__</a>()</tt>	Exclude listeners when saving the listener's state since they may be ephemeral.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L168'>first</a>(iterable)</tt>	Returns the first item returned by iterating over an iterable object.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L182'>itersubclasses</a>(cls,_seen)</tt>	Itersubclasses cls generator over all subclasses of a given class in depth first order.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L224'>ignore_sigint</a>(func)</tt>	This decorator registers a custom sigint handler to catch and ignore sigint until the wrapped function is completed.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L270'>pairwise</a>(iterable)</tt>	Return the items of an iterable paired with its next item.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L284'>encode_ascii</a>(s)</tt>	In python 2 this is a no-op strings are left alone in python 3 this.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L294'>decode_ascii</a>(s)</tt>	In python 2 this is a no-op strings are left alone in python 3 this.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L304'>isreadable</a>(f)</tt>	Returns true if the file-like object can be read from this is a common-.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L328'>iswritable</a>(f)</tt>	Returns true if the file-like object can be written to this is a common-.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L412'>fileobj_name</a>(f)</tt>	Returns the 'name' of file-like object f if it has anything that could be called its name.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L440'>fileobj_closed</a>(f)</tt>	Returns true if the given file-like object is closed or if f is a string and assumed to be a pathname.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L462'>fileobj_mode</a>(f)</tt>	Returns the 'mode' string of a file-like object if such a thing exists.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L495'>_fileobj_normalize_mode</a>(f)</tt>	Takes care of some corner cases in python where the mode string is either oddly formatted or does not truly represent the file mode.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L520'>fileobj_is_binary</a>(f)</tt>	Returns true if the give file or file-like object has a file open in binary mode.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L570'>fill</a>(text,width)</tt>	Like :func textwrap wrap but preserves existing paragraphs which.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L595'>_array_from_file</a>(infile,dtype,count,sep)</tt>	Create a numpy array from a file or a file-like object.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L632'>_array_to_file</a>(arr,outfile)</tt>	Write a numpy array to a file or a file-like object.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L684'>_array_to_file_like</a>(arr,fileobj)</tt>	Write a ~numpy ndarray to a file-like object (which is not supported by.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L727'>_write_string</a>(f,s)</tt>	Write a string to a file encoding to ascii if the file is open in binary mode or decoding if the file is open in text mode.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L748'>_convert_array</a>(array,dtype)</tt>	Converts an array to a new dtype--if the itemsize of the new dtype is the same as the old dtype and both types are not numeric a view is.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L767'>_unsigned_zero</a>(dtype)</tt>	Given a numpy dtype finds its "zero" point which is exactly in the middle of its range.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L785'>_str_to_num</a>(val)</tt>	Converts a given string to either an int or a float if necessary.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L796'>_words_group</a>(input,strlen)</tt>	Split a long string into parts where each part is no longer than strlen and no word is cut into two pieces.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L835'>_tmp_name</a>(input)</tt>	Create a temporary file name which should not already exist use the.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/util.py#L848'>_get_array_mmap</a>(array)</tt>	If the array has an mmap mmap at base of its base chain return the mmap.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L87'>getheader</a>(filename)</tt>	Get the header from an extension of a fits file.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L127'>getdata</a>(filename)</tt>	Get the data from an extension of a fits file and optionally the header.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L248'>getval</a>(filename,keyword)</tt>	Get a keyword's value from a header in a fits file.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L284'>setval</a>(filename,keyword)</tt>	Set a keyword's value from a header in a fits file.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L360'>delval</a>(filename,keyword)</tt>	Delete all instances of keyword from a header in a fits file.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L399'>writeto</a>(filename,data,header,output_verify)</tt>	Create a new fits file using the supplied data/header.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L446'>table_to_hdu</a>(table)</tt>	Convert an ~astropy table table object to a fits.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L551'>append</a>(filename,data,header,checksum)</tt>	Append the header/data to fits file if filename exists create if not.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L621'>update</a>(filename,data)</tt>	Update the specified extension with the input data/header.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L681'>info</a>(filename,output)</tt>	Print the summary information on a fits file.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L721'>printdiff</a>(inputa,inputb)</tt>	Compare two parts of a fits file including entire fits files fits hdulist objects and fits hdu objects.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L831'>tabledump</a>(filename,datafile,cdfile,hfile)</tt>	Dump a table hdu to a file in ascii format the table may be.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L903'>tableload</a>(datafile,cdfile,hfile)</tt>	Create a table from the input ascii files the input is from up.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L941'>_getext</a>(filename,mode)</tt>	Open the input file return the hdulist and the extension.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/convenience.py#L1049'>_get_file_mode</a>(filename,default)</tt>	Allow file object to already be opened in any of the valid modes and and leave the file in the same state opened or closed as when.
<tt style='background-color:#E8E8E8;'> io.fits._BaseColumnFormat <a href=' /io/fits/column.py#L174'>dtype</a>()</tt>	The numpy dtype object created from the format's associated recformat.
<tt style='background-color:#E8E8E8;'> io.fits._BaseColumnFormat <a href=' /io/fits/column.py#L182'>from_column_format</a>(cls,format)</tt>	Creates a column format object from another column format object regardless of their type.
<tt style='background-color:#E8E8E8;'> io.fits._ColumnFormat <a href=' /io/fits/column.py#L220'>from_recformat</a>(cls,recformat)</tt>	Creates a column format from a numpy record dtype format.
<tt style='background-color:#E8E8E8;'> io.fits._ColumnFormat <a href=' /io/fits/column.py#L226'>recformat</a>()</tt>	Returns the equivalent numpy record format string.
<tt style='background-color:#E8E8E8;'> io.fits._ColumnFormat <a href=' /io/fits/column.py#L232'>canonical</a>()</tt>	Returns a 'canonical' string representation of this format.
<tt style='background-color:#E8E8E8;'> io.fits._AsciiColumnFormat <a href=' /io/fits/column.py#L285'>from_recformat</a>(cls,recformat)</tt>	Creates a column format from a numpy record dtype format.
<tt style='background-color:#E8E8E8;'> io.fits._AsciiColumnFormat <a href=' /io/fits/column.py#L291'>recformat</a>()</tt>	Returns the equivalent numpy record format string.
<tt style='background-color:#E8E8E8;'> io.fits._AsciiColumnFormat <a href=' /io/fits/column.py#L297'>canonical</a>()</tt>	Returns a 'canonical' string representation of this format.
<tt style='background-color:#E8E8E8;'> io.fits.ColumnAttribute <a href=' /io/fits/column.py#L443'>__call__</a>(func)</tt>	Set the validator for this column attribute.
<tt style='background-color:#E8E8E8;'> io.fits.Column <a href=' /io/fits/column.py#L465'>__init__</a>(name,format,unit,null)</tt>	Construct a column by specifying attributes all attributes.
<tt style='background-color:#E8E8E8;'> io.fits.Column <a href=' /io/fits/column.py#L604'>__eq__</a>(other)</tt>	Two columns are equal if their name and format are the same other.
<tt style='background-color:#E8E8E8;'> io.fits.Column <a href=' /io/fits/column.py#L615'>__hash__</a>()</tt>	Like __eq__, the hash of a column should be based on the unique column name and format and be case-insensitive with respect to the column.
<tt style='background-color:#E8E8E8;'> io.fits.Column <a href=' /io/fits/column.py#L732'>array</a>()</tt>	The numpy ~numpy ndarray associated with this column.
<tt style='background-color:#E8E8E8;'> io.fits.Column <a href=' /io/fits/column.py#L775'>ascii</a>()</tt>	Whether this column represents an column in an ascii table.
<tt style='background-color:#E8E8E8;'> io.fits.Column <a href=' /io/fits/column.py#L785'>copy</a>()</tt>	Return a copy of this column.
<tt style='background-color:#E8E8E8;'> io.fits.Column <a href=' /io/fits/column.py#L793'>_convert_format</a>(format,cls)</tt>	The format argument to this class's initializer may come in many forms.
<tt style='background-color:#E8E8E8;'> io.fits.Column <a href=' /io/fits/column.py#L822'>_verify_keywords</a>(cls,name,format,unit)</tt>	Given the keyword arguments used to initialize a column specifically those that typically read from a fits header so excluding array.
<tt style='background-color:#E8E8E8;'> io.fits.Column <a href=' /io/fits/column.py#L985'>_determine_formats</a>(cls,format,start,dim)</tt>	Given a format string and whether or not the column is for an ascii table (ascii=none means unspecified but lean toward binary table.
<tt style='background-color:#E8E8E8;'> io.fits.ColDefs <a href=' /io/fits/column.py#L1203'>_init_from_coldefs</a>(coldefs)</tt>	Initialize from an existing coldefs object just copy the columns and convert their formats if necessary.
<tt style='background-color:#E8E8E8;'> io.fits.ColDefs <a href=' /io/fits/column.py#L1307'>_copy_column</a>(column)</tt>	Utility function used currently only by _init_from_coldefs to help convert columns from binary format to ascii format or vice.
<tt style='background-color:#E8E8E8;'> io.fits.ColDefs <a href=' /io/fits/column.py#L1355'>__getattr__</a>(name)</tt>	Automatically returns the values for the given keyword attribute for all columns in this list.
<tt style='background-color:#E8E8E8;'> io.fits.ColDefs <a href=' /io/fits/column.py#L1424'>_dims</a>()</tt>	Returns the values of the tdimn keywords parsed into tuples.
<tt style='background-color:#E8E8E8;'> io.fits.ColDefs <a href=' /io/fits/column.py#L1480'>_update_column_attribute_changed</a>(column,attr,old_value,new_value)</tt>	Handle column attribute changed notifications from columns that are members of this coldefs.
<tt style='background-color:#E8E8E8;'> io.fits.ColDefs <a href=' /io/fits/column.py#L1505'>add_col</a>(column)</tt>	Append one column to the column definition.
<tt style='background-color:#E8E8E8;'> io.fits.ColDefs <a href=' /io/fits/column.py#L1530'>del_col</a>(col_name)</tt>	Delete the definition of one column.
<tt style='background-color:#E8E8E8;'> io.fits.ColDefs <a href=' /io/fits/column.py#L1560'>change_attrib</a>(col_name,attrib,new_value)</tt>	Change an attribute (in the keyword_attributes list) of a column.
<tt style='background-color:#E8E8E8;'> io.fits.ColDefs <a href=' /io/fits/column.py#L1578'>change_name</a>(col_name,new_name)</tt>	Change a column's name.
<tt style='background-color:#E8E8E8;'> io.fits.ColDefs <a href=' /io/fits/column.py#L1596'>change_unit</a>(col_name,new_unit)</tt>	Change a column's unit.
<tt style='background-color:#E8E8E8;'> io.fits.ColDefs <a href=' /io/fits/column.py#L1611'>info</a>(attrib,output)</tt>	Get attribute s information of the column definition.
<tt style='background-color:#E8E8E8;'> io.fits._AsciiColDefs <a href=' /io/fits/column.py#L1692'>spans</a>()</tt>	A list of the widths of each field in the table.
<tt style='background-color:#E8E8E8;'> io.fits._AsciiColDefs <a href=' /io/fits/column.py#L1719'>_update_field_metrics</a>()</tt>	Updates the list of the start columns the list of the widths of each field and the total width of each record in the table.
<tt style='background-color:#E8E8E8;'> io.fits._VLF <a href=' /io/fits/column.py#L1778'>__setitem__</a>(key,value)</tt>	To make sure the new item has consistent data type to avoid misalignment.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/column.py#L1796'>_get_index</a>(names,key)</tt>	Get the index of the key in the names list.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/column.py#L1842'>_unwrapx</a>(input,output,repeat)</tt>	Unwrap the x format column into a boolean array.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/column.py#L1867'>_wrapx</a>(input,output,repeat)</tt>	Wrap the x format column boolean array into an uint8 array.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/column.py#L1898'>_makep</a>(array,descr_output,format,nrows)</tt>	Construct the p or q format column array both the data descriptors and the data.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/column.py#L1960'>_parse_tformat</a>(tform)</tt>	Parse tformn keyword for a binary table into a repeat format option tuple.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/column.py#L1981'>_parse_ascii_tformat</a>(tform,strict)</tt>	Parse the tformn keywords for ascii tables into a format width precision tuple (the latter is always zero unless format is one of 'e',.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/column.py#L2050'>_parse_tdim</a>(tdim)</tt>	Parse the tdim value into a tuple (may return an empty tuple if the value tdim value is empty or invalid).
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/column.py#L2064'>_scalar_to_format</a>(value)</tt>	Given a scalar value or string returns the minimum fits column format that can represent that value.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/column.py#L2089'>_cmp_recformats</a>(f1,f2)</tt>	Compares two numpy recformats using the ordering given by formatorder.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/column.py#L2101'>_convert_fits2record</a>(format)</tt>	Convert fits format spec to record format spec.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/column.py#L2139'>_convert_record2fits</a>(format)</tt>	Convert record format spec to fits format spec.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/column.py#L2183'>_dtype_to_recformat</a>(dtype)</tt>	Utility function for converting a dtype object or string that instantiates a dtype (e.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/column.py#L2208'>_convert_format</a>(format,reverse)</tt>	Convert fits format spec to record format spec do the opposite if.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/column.py#L2220'>_convert_ascii_format</a>(format,reverse)</tt>	Convert ascii table format spec to record format spec.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/connect.py#L50'>is_fits</a>(origin,filepath,fileobj)</tt>	Determine whether origin is a fits file.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/connect.py#L79'>read_table_fits</a>(input,hdu)</tt>	Read a table object from an fits file parameters.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/connect.py#L194'>write_table_fits</a>(input,output,overwrite)</tt>	Write a table object to a fits file parameters.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L223'>keyword</a>()</tt>	Returns the keyword name parsed from the card image.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L223'>keyword</a>(keyword)</tt>	Set the key attribute once set it cannot be modified.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L368'>value</a>()</tt>	The value associated with the keyword stored in this card.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L381'>rawkeyword</a>()</tt>	On record-valued keyword cards this is the name of the standard <= 8 character fits keyword that this rvkc is stored in.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L396'>rawvalue</a>()</tt>	On record-valued keyword cards this is the raw string value in the <field-specifier>: <value> format stored in the card in order.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L450'>comment</a>()</tt>	Get the comment attribute from the card image if not already set.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L489'>field_specifier</a>()</tt>	The field-specifier of record-valued keyword cards always none on normal cards.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L494'>image</a>()</tt>	The card "image", that is the 80 byte character string that represents this card in an actual fits header.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L507'>is_blank</a>()</tt>	True if the card is completely blank--that is it has no keyword value or comment.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L528'>fromstring</a>(cls,image)</tt>	Construct a card object from a raw string it will pad the string.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L542'>normalize_keyword</a>(cls,keyword)</tt>	Classmethod to convert a keyword value that may contain a field-specifier to uppercase.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L576'>_check_if_rvkc</a>()</tt>	Determine whether or not the card is a record-valued keyword card.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L626'>_check_if_rvkc_image</a>()</tt>	Implements card _check_if_rvkc for the case of an unparsed card.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L659'>_init_rvkc</a>(keyword,field_specifier,field,value)</tt>	Sort of addendum to card __init__ to set the appropriate internal.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L712'>_parse_value</a>()</tt>	Extract the keyword value from the card image.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L779'>_parse_comment</a>()</tt>	Extract the keyword value from the card image.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L803'>_split</a>()</tt>	Split the card image between the keyword and the rest of the card.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L843'>_fix_value</a>()</tt>	Fix the card image for fixable non-standard compliance.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L980'>_format_long_image</a>()</tt>	Break up long string value/comment into continue cards.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L1032'>_format_long_commentary_image</a>()</tt>	If a commentary card's value is too long to fit on a single card this will render the card as multiple consecutive commentary card of the.
<tt style='background-color:#E8E8E8;'> io.fits.Card <a href=' /io/fits/card.py#L1138'>_itersubcards</a>()</tt>	If the card image is greater than 80 characters it should consist of a normal card followed by one or more continue card.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/card.py#L1160'>_int_or_float</a>(s)</tt>	Converts an a string to an int if possible or to a float.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/card.py#L1180'>_format_value</a>(value)</tt>	Converts a card value to its appropriate string representation as defined by the fits format.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/card.py#L1217'>_format_float</a>(value)</tt>	Format a floating number to make sure it gets the decimal point.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/card.py#L1249'>_pad</a>(input)</tt>	Pad blank space to the input string to be multiple of 80.
<tt style='background-color:#E8E8E8;'> io.fits._BaseDiff <a href=' /io/fits/diff.py#L69'>__init__</a>(a,b)</tt>	The _basediff class does not implement a _diff method and should not be instantiated directly.
<tt style='background-color:#E8E8E8;'> io.fits._BaseDiff <a href=' /io/fits/diff.py#L86'>__nonzero__</a>()</tt>	A _basediff object acts as true in a boolean context if the two objects compared are identical.
<tt style='background-color:#E8E8E8;'> io.fits._BaseDiff <a href=' /io/fits/diff.py#L98'>fromdiff</a>(cls,other,a,b)</tt>	Returns a new diff object of a specific subclass from an existing diff object passing on the values for any arguments they share in common.
<tt style='background-color:#E8E8E8;'> io.fits._BaseDiff <a href=' /io/fits/diff.py#L125'>identical</a>()</tt>	True if all the diff_* attributes on this diff instance are.
<tt style='background-color:#E8E8E8;'> io.fits._BaseDiff <a href=' /io/fits/diff.py#L139'>report</a>(fileobj,indent,overwrite)</tt>	Generates a text report on the differences if any between two objects and either returns it as a string or writes it to a file-like.
<tt style='background-color:#E8E8E8;'> io.fits.HDUDiff <a href=' /io/fits/diff.py#L438'>__init__</a>(a,b,ignore_keywords,ignore_comments)</tt>	See fitsdiff for explanations of the initialization parameters.
<tt style='background-color:#E8E8E8;'> io.fits.HeaderDiff <a href=' /io/fits/diff.py#L577'>__init__</a>(a,b,ignore_keywords,ignore_comments)</tt>	See fitsdiff for explanations of the initialization parameters.
<tt style='background-color:#E8E8E8;'> io.fits.ImageDataDiff <a href=' /io/fits/diff.py#L834'>__init__</a>(a,b,numdiffs,rtol)</tt>	See fitsdiff for explanations of the initialization parameters.
<tt style='background-color:#E8E8E8;'> io.fits.RawDataDiff <a href=' /io/fits/diff.py#L953'>__init__</a>(a,b,numdiffs)</tt>	See fitsdiff for explanations of the initialization parameters.
<tt style='background-color:#E8E8E8;'> io.fits.TableDataDiff <a href=' /io/fits/diff.py#L1044'>__init__</a>(a,b,ignore_fields,numdiffs)</tt>	See fitsdiff for explanations of the initialization parameters.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/diff.py#L1283'>diff_values</a>(a,b,rtol,atol)</tt>	Diff two scalar values if both values are floats they are compared to.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/diff.py#L1297'>report_diff_values</a>(fileobj,a,b,ind)</tt>	Write a diff between two values to the specified file-like object.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/diff.py#L1347'>report_diff_keyword_attr</a>(fileobj,attr,diffs,keyword)</tt>	Write a diff between two header keyword values or comments to the specified file-like object.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/diff.py#L1367'>where_not_allclose</a>(a,b,rtol,atol)</tt>	A version of numpy allclose that returns the indices where the two arrays.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L80'>__init__</a>(cards,copy)</tt>	Construct a header from an iterable and/or text file.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L261'>__eq__</a>(other)</tt>	Two headers are equal only if they have the exact same string representation.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L278'>cards</a>()</tt>	The underlying physical cards that make up this header it can be looked at but it should not be modified directly.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L287'>comments</a>()</tt>	View the comments associated with each keyword if any.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L321'>_modified</a>()</tt>	Whether or not the header has been modified this is a property so that it can also check each card for modifications--cards may have been.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L325'>fromstring</a>(cls,data,sep)</tt>	Creates an hdu header from a byte string containing the entire header data.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L395'>fromfile</a>(cls,fileobj,sep,endcard)</tt>	Similar to :meth header fromstring, but reads the header string from.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L455'>_from_blocks</a>(cls,block_iter,is_binary,sep)</tt>	The meat of header fromfile; in a separate method so that.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L553'>_find_end_card</a>(cls,block,card_len)</tt>	Utility method to search a header block for the end card and handle invalid end cards.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L598'>tostring</a>(sep,endcard,padding)</tt>	Returns a string representation of the header.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L643'>tofile</a>(fileobj,sep,endcard,padding)</tt>	Writes the header to file or file-like object.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L708'>fromtextfile</a>(cls,fileobj,endcard)</tt>	Read a header from a simple text file or file-like object.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L725'>totextfile</a>(fileobj,endcard,overwrite)</tt>	Write the header as text to a file or a file-like object.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L746'>clear</a>()</tt>	Remove all cards from the header.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L755'>copy</a>(strip)</tt>	Make a copy of the :class header.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L787'>fromkeys</a>(cls,iterable,value)</tt>	Similar to :meth dict fromkeys--creates a new header from an.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L818'>get</a>(key,default)</tt>	Similar to :meth dict get--returns the value associated with keyword.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L844'>set</a>(keyword,value,comment,before)</tt>	Set the value and/or comment and/or position of a specified keyword.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L933'>items</a>()</tt>	Like :meth dict items.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L938'>iteritems</a>()</tt>	Like :meth dict iteritems.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L944'>iterkeys</a>()</tt>	Like :meth dict iterkeys--iterating directly over the header.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L952'>itervalues</a>()</tt>	Like :meth dict itervalues.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L958'>keys</a>()</tt>	Return a list of keywords in the header in the order they appear--like :meth dict.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L966'>pop</a>()</tt>	Works like :meth list pop if no arguments or an index argument are.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L991'>popitem</a>()</tt>	Similar to :meth dict popitem.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1001'>setdefault</a>(key,default)</tt>	Similar to :meth dict setdefault.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1010'>update</a>()</tt>	Update the header with new keyword values updating the values of existing keywords and appending new keywords otherwise similar to.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1120'>values</a>()</tt>	Returns a list of the values of all cards in the header.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1125'>append</a>(card,useblanks,bottom,end)</tt>	Appends a new keyword+value card to the end of the header similar to list.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1215'>extend</a>(cards,strip,unique,update)</tt>	Appends multiple keyword+value cards to the end of the header similar to list.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1315'>count</a>(keyword)</tt>	Returns the count of the given keyword in the header similar to list.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1336'>index</a>(keyword,start,stop)</tt>	Returns the index if the first instance of the given keyword in the header similar to list.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1375'>insert</a>(key,card,useblanks,after)</tt>	Inserts a new keyword+value card into the header at a given location similar to list.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1469'>remove</a>(keyword,ignore_missing,remove_all)</tt>	Removes the first instance of the given keyword from the header similar to list.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1498'>rename_keyword</a>(oldkeyword,newkeyword,force)</tt>	Rename a card's keyword in the header.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1537'>add_history</a>(value,before,after)</tt>	Add a history card.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1555'>add_comment</a>(value,before,after)</tt>	Add a comment card.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1573'>add_blank</a>(value,before,after)</tt>	Add a blank card.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1591'>_update</a>(card)</tt>	The real update code if keyword already exists its value and/or.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1634'>_cardindex</a>(key)</tt>	Returns an index into the _cards list given a valid lookup key.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1685'>_keyword_from_index</a>(idx)</tt>	Given an integer index return the keyword repeat tuple that index refers to.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1704'>_relativeinsert</a>(card,before,after,replace)</tt>	Inserts a new card before or after an existing card used to implement support for the legacy before/after keyword arguments to.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1763'>_updateindices</a>(idx,increment)</tt>	For all cards with index above idx increment or decrement its index value in the keyword_indices dict.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1780'>_countblanks</a>()</tt>	Returns the number of blank cards at the end of the header.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1795'>_haswildcard</a>(keyword)</tt>	Return true if the input keyword contains a wildcard pattern.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1801'>_wildcardmatch</a>(pattern)</tt>	Returns a list of indices of the cards matching the given wildcard pattern.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1818'>_set_slice</a>(key,value,target)</tt>	Used to implement header __setitem__ and cardaccessor __setitem__.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1839'>_splitcommentary</a>(keyword,value)</tt>	Given a commentary keyword and value returns a list of the one or more cards needed to represent the full value.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1866'>_strip</a>()</tt>	Strip cards specific to a certain kind of header.
<tt style='background-color:#E8E8E8;'> io.fits.Header <a href=' /io/fits/header.py#L1914'>_add_commentary</a>(key,value,before,after)</tt>	Add a commentary card.
<tt style='background-color:#E8E8E8;'> io.fits._CardAccessor <a href=' /io/fits/header.py#L1993'>_setslice</a>(item,value)</tt>	Helper for implementing __setitem__ on _cardaccessor subclasses slices should always be handled in this same way.
<tt style='background-color:#E8E8E8;'> io.fits._HeaderComments <a href=' /io/fits/header.py#L2031'>__repr__</a>()</tt>	Returns a simple list of all keywords and their comments.
<tt style='background-color:#E8E8E8;'> io.fits._HeaderComments <a href=' /io/fits/header.py#L2041'>__getitem__</a>(item)</tt>	Slices and filter strings return a new _headercomments containing the returned cards.
<tt style='background-color:#E8E8E8;'> io.fits._HeaderComments <a href=' /io/fits/header.py#L2053'>__setitem__</a>(item,comment)</tt>	Set/update the comment on specified card or cards.
<tt style='background-color:#E8E8E8;'> io.fits._HeaderCommentaryCards <a href=' /io/fits/header.py#L2105'>__setitem__</a>(item,value)</tt>	Set the value of a specified commentary card or cards.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/header.py#L2120'>_block_size</a>(sep)</tt>	Determine the size of a fits header block if a non-blank separator is used between cards.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/header.py#L2129'>_pad_length</a>(stringlen)</tt>	Bytes needed to pad the input stringlen to the next fits block.
<tt style='background-color:#E8E8E8;'> io.fits._Verify <a href=' /io/fits/verify.py#L34'>run_option</a>(option,err_text,fix_text,fix)</tt>	Execute the verification with selected option.
<tt style='background-color:#E8E8E8;'> io.fits._Verify <a href=' /io/fits/verify.py#L54'>verify</a>(option)</tt>	Verify all values in the instance.
<tt style='background-color:#E8E8E8;'> io.fits._ErrList <a href=' /io/fits/verify.py#L140'>iter_lines</a>(filter,shift)</tt>	Iterate the nested structure as a list of strings with appropriate indentations for each level of structure.
<tt style='background-color:#E8E8E8;'> io.fits._File <a href=' /io/fits/file.py#L215'>readarray</a>(size,offset,dtype,shape)</tt>	Similar to file read(), but returns the contents of the underlying.
<tt style='background-color:#E8E8E8;'> io.fits._File <a href=' /io/fits/file.py#L301'>writearray</a>(array)</tt>	Similar to file write(), but writes a numpy array instead of a string.
<tt style='background-color:#E8E8E8;'> io.fits._File <a href=' /io/fits/file.py#L347'>close</a>()</tt>	Close the 'physical' fits file.
<tt style='background-color:#E8E8E8;'> io.fits._File <a href=' /io/fits/file.py#L362'>_maybe_close_mmap</a>(refcount_delta)</tt>	When mmap is in use these objects hold a reference to the mmap of the file (so there is only one shared by all hdus that reference this.
<tt style='background-color:#E8E8E8;'> io.fits._File <a href=' /io/fits/file.py#L376'>_overwrite_existing</a>(overwrite,fileobj,closed)</tt>	Overwrite an existing file if overwrite is true, otherwise raise an ioerror.
<tt style='background-color:#E8E8E8;'> io.fits._File <a href=' /io/fits/file.py#L396'>_open_fileobj</a>(fileobj,mode,overwrite)</tt>	Open a fits file from a file object or a gzipfile object.
<tt style='background-color:#E8E8E8;'> io.fits._File <a href=' /io/fits/file.py#L430'>_open_filelike</a>(fileobj,mode,overwrite)</tt>	Open a fits file from a file-like object i e one that has.
<tt style='background-color:#E8E8E8;'> io.fits._File <a href=' /io/fits/file.py#L469'>_open_filename</a>(filename,mode,overwrite)</tt>	Open a fits file from a filename string.
<tt style='background-color:#E8E8E8;'> io.fits._File <a href=' /io/fits/file.py#L509'>_mmap_available</a>(cls)</tt>	Tests that mmap and specifically mmap flush works this may.
<tt style='background-color:#E8E8E8;'> io.fits._File <a href=' /io/fits/file.py#L546'>_open_zipfile</a>(fileobj,mode)</tt>	Limited support for zipfile zipfile objects containing a single.
<tt style='background-color:#E8E8E8;'> io.fits. <a href=' /io/fits/file.py#L576'>_is_random_access_file_backed</a>(fileobj)</tt>	Returns true if fileobj is a file or io fileio object or a.
<tt style='background-color:#E8E8E8;'> io.fits.scripts. <a href=' /io/fits/scripts/fitsinfo.py#L33'>fitsinfo</a>(filename)</tt>	Print a summary of the hdus in a fits file.
<tt style='background-color:#E8E8E8;'> io.fits.scripts. <a href=' /io/fits/scripts/fitsheader.py#L284'>main</a>(args)</tt>	This is the main function called by the fitsheader script.
<tt style='background-color:#E8E8E8;'> io.fits.scripts. <a href=' /io/fits/scripts/fitscheck.py#L128'>verify_checksums</a>(filename)</tt>	Prints a message if any hdu in filename has a bad checksum or datasum.
<tt style='background-color:#E8E8E8;'> io.fits.scripts. <a href=' /io/fits/scripts/fitscheck.py#L156'>verify_compliance</a>(filename)</tt>	Check for fits standard compliance.
<tt style='background-color:#E8E8E8;'> io.fits.scripts. <a href=' /io/fits/scripts/fitscheck.py#L169'>update</a>(filename)</tt>	Sets the checksum and datasum keywords for each hdu of filename.
<tt style='background-color:#E8E8E8;'> io.fits.scripts. <a href=' /io/fits/scripts/fitscheck.py#L187'>process_file</a>(filename)</tt>	Handle a single fits file returning the count of checksum and compliance.
<tt style='background-color:#E8E8E8;'> io.fits.scripts. <a href=' /io/fits/scripts/fitsheader.py#L284'>main</a>()</tt>	Processes command line parameters into options and files then checks or update fits datasum and checksum keywords for the specified files.
<tt style='background-color:#E8E8E8;'> io.fits.scripts.HeaderFormatter <a href=' /io/fits/scripts/fitsheader.py#L84'>parse</a>(extensions,keywords,compressed)</tt>	Returns the fits file header s in a readable format.
<tt style='background-color:#E8E8E8;'> io.fits.scripts.HeaderFormatter <a href=' /io/fits/scripts/fitsheader.py#L131'>_parse_internal</a>(hdukeys,keywords,compressed)</tt>	The meat of the formatting in a separate method to allow overriding.
<tt style='background-color:#E8E8E8;'> io.fits.scripts.HeaderFormatter <a href=' /io/fits/scripts/fitsheader.py#L151'>_get_cards</a>(hdukey,keywords,compressed)</tt>	Returns a list of astropy io fits card card objects.
<tt style='background-color:#E8E8E8;'> io.fits.scripts.TableHeaderFormatter <a href=' /io/fits/scripts/fitsheader.py#L215'>_parse_internal</a>(hdukeys,keywords,compressed)</tt>	Method called by the parse method in the parent class.
<tt style='background-color:#E8E8E8;'> io.fits.scripts. <a href=' /io/fits/scripts/fitsheader.py#L233'>print_headers_traditional</a>(args)</tt>	Prints fits header s using the traditional 80-char format.
<tt style='background-color:#E8E8E8;'> io.fits.scripts. <a href=' /io/fits/scripts/fitsheader.py#L253'>print_headers_as_table</a>(args)</tt>	Prints fits header s in a machine-readable table format.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableLikeHDU <a href=' /io/fits/hdu/table.py#L66'>match_header</a>(cls,header)</tt>	This is an abstract hdu type for hdus that contain table-like data.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableLikeHDU <a href=' /io/fits/hdu/table.py#L76'>from_columns</a>(cls,columns,header,nrows)</tt>	Given either a coldefs object a sequence of column objects or another table hdu or table data (a fits_rec or multi-field.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableLikeHDU <a href=' /io/fits/hdu/table.py#L131'>columns</a>()</tt>	The :class coldefs objects describing the columns in this table.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableLikeHDU <a href=' /io/fits/hdu/table.py#L141'>_nrows</a>()</tt>	Table-like hdus must provide an attribute that specifies the number of rows in the hdu's table.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableLikeHDU <a href=' /io/fits/hdu/table.py#L152'>_get_tbdata</a>()</tt>	Get the table data from an input hdu object.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableLikeHDU <a href=' /io/fits/hdu/table.py#L208'>_update_column_added</a>(columns,column)</tt>	Update the data upon addition of a new column through the coldefs interface.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableLikeHDU <a href=' /io/fits/hdu/table.py#L221'>_update_column_removed</a>(columns,col_idx)</tt>	Update the data upon removal of a column through the coldefs interface.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableBaseHDU <a href=' /io/fits/hdu/table.py#L382'>match_header</a>(cls,header)</tt>	This is an abstract type that implements the shared functionality of the ascii and binary table hdu types which should be used instead of.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableBaseHDU <a href=' /io/fits/hdu/table.py#L392'>columns</a>()</tt>	The :class coldefs objects describing the columns in this table.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableBaseHDU <a href=' /io/fits/hdu/table.py#L481'>update</a>()</tt>	Update header keywords to reflect recent changes of columns.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableBaseHDU <a href=' /io/fits/hdu/table.py#L493'>copy</a>()</tt>	Make a copy of the table hdu both header and data are copied.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableBaseHDU <a href=' /io/fits/hdu/table.py#L534'>_verify</a>(option)</tt>	_tablebasehdu verify method.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableBaseHDU <a href=' /io/fits/hdu/table.py#L551'>_summary</a>()</tt>	Summarize the hdu name dimensions and formats.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableBaseHDU <a href=' /io/fits/hdu/table.py#L588'>_update_column_attribute_changed</a>(column,col_idx,attr,old_value)</tt>	Update the header when one of the column objects is updated.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableBaseHDU <a href=' /io/fits/hdu/table.py#L628'>_clear_table_keywords</a>(index)</tt>	Wipe out any existing table definition keywords from the header.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._TableBaseHDU <a href=' /io/fits/hdu/table.py#L679'>_populate_table_keywords</a>()</tt>	Populate the new table definition keywords from the header.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.TableHDU <a href=' /io/fits/hdu/table.py#L747'>_calculate_datasum</a>(blocking)</tt>	Calculate the value for the datasum card in the hdu.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.TableHDU <a href=' /io/fits/hdu/table.py#L771'>_verify</a>(option)</tt>	Tablehdu verify method.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.BinTableHDU <a href=' /io/fits/hdu/table.py#L803'>_calculate_datasum_with_heap</a>(blocking)</tt>	Calculate the value for the datasum card given the input data.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.BinTableHDU <a href=' /io/fits/hdu/table.py#L835'>_calculate_datasum</a>(blocking)</tt>	Calculate the value for the datasum card in the hdu.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.BinTableHDU <a href=' /io/fits/hdu/table.py#L981'>dump</a>(datafile,cdfile,hfile,overwrite)</tt>	Dump the table hdu to a file in ascii format the table may be dumped.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.BinTableHDU <a href=' /io/fits/hdu/table.py#L1052'>load</a>(cls,datafile,cdfile,hfile)</tt>	Create a table from the input ascii files the input is from up to.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.BinTableHDU <a href=' /io/fits/hdu/table.py#L1137'>_dump_data</a>(fileobj)</tt>	Write the table data in the ascii format read by bintablehdu load().
<tt style='background-color:#E8E8E8;'> io.fits.hdu.BinTableHDU <a href=' /io/fits/hdu/table.py#L1215'>_dump_coldefs</a>(fileobj)</tt>	Write the column definition parameters in the ascii format read by bintablehdu.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.BinTableHDU <a href=' /io/fits/hdu/table.py#L1240'>_load_data</a>(cls,fileobj,coldefs)</tt>	Read the table data from the ascii file output by bintablehdu dump().
<tt style='background-color:#E8E8E8;'> io.fits.hdu.BinTableHDU <a href=' /io/fits/hdu/table.py#L1382'>_load_coldefs</a>(cls,fileobj)</tt>	Read the table column definitions from the ascii file output by bintablehdu.
<tt style='background-color:#E8E8E8;'> io.fits.hdu. <a href=' /io/fits/hdu/table.py#L1416'>_binary_table_byte_swap</a>(data)</tt>	Ensures that all the data of a binary fits table (represented as a fits_rec object) is in a big-endian byte order.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.Group <a href=' /io/fits/hdu/groups.py#L39'>par</a>(parname)</tt>	Get the group parameter value.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.Group <a href=' /io/fits/hdu/groups.py#L59'>setpar</a>(parname,value)</tt>	Set the group parameter value.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.GroupData <a href=' /io/fits/hdu/groups.py#L218'>data</a>()</tt>	The raw group data represented as a multi-dimensional numpy ndarray.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.GroupData <a href=' /io/fits/hdu/groups.py#L232'>par</a>(parname)</tt>	Get the group parameter values.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.GroupsHDU <a href=' /io/fits/hdu/groups.py#L285'>data</a>()</tt>	The data of a random group fits file will be like a binary table's data.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.GroupsHDU <a href=' /io/fits/hdu/groups.py#L298'>parnames</a>()</tt>	The names of the group parameters as described by the header.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.GroupsHDU <a href=' /io/fits/hdu/groups.py#L364'>size</a>()</tt>	Returns the size in bytes of the hdu's data part.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.GroupsHDU <a href=' /io/fits/hdu/groups.py#L450'>_writedata_internal</a>(fileobj)</tt>	Basically copy/pasted from _imagebasehdu _writedata_internal(), but.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.GroupsHDU <a href=' /io/fits/hdu/groups.py#L515'>_calculate_datasum</a>(blocking)</tt>	Calculate the value for the datasum card in the hdu.
<tt style='background-color:#E8E8E8;'> io.fits.hdu. <a href=' /io/fits/hdu/groups.py#L572'>_par_indices</a>(names)</tt>	Given a list of objects returns a mapping of objects in that list to the index or indices at which that object was found in the list.
<tt style='background-color:#E8E8E8;'> io.fits.hdu. <a href=' /io/fits/hdu/groups.py#L589'>_unique_parnames</a>(names)</tt>	Given a list of parnames including possible duplicates returns a new list of parnames with duplicates prepended by one or more underscores to make.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.CompImageHDU <a href=' /io/fits/hdu/compressed.py#L706'>_update_header_data</a>(image_header,name,compression_type,tile_size)</tt>	Update the table header (_header) to the compressed image format and to match the input data if any.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.CompImageHDU <a href=' /io/fits/hdu/compressed.py#L1466'>shape</a>()</tt>	Shape of the image array--should be equivalent to self data shape.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.CompImageHDU <a href=' /io/fits/hdu/compressed.py#L1596'>_summary</a>()</tt>	Summarize the hdu name dimensions and formats.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.CompImageHDU <a href=' /io/fits/hdu/compressed.py#L1628'>_update_compressed_data</a>()</tt>	Compress the image data so that it may be written to a file.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.CompImageHDU <a href=' /io/fits/hdu/compressed.py#L1692'>scale</a>(type,option,bscale,bzero)</tt>	Scale image data by using bscale and bzero.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.CompImageHDU <a href=' /io/fits/hdu/compressed.py#L1836'>_writeheader</a>(fileobj)</tt>	Bypasses bintablehdu _writeheader() which updates the header with.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.CompImageHDU <a href=' /io/fits/hdu/compressed.py#L1845'>_writedata</a>(fileobj)</tt>	Wrap the basic _writedata method to restore the data.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.CompImageHDU <a href=' /io/fits/hdu/compressed.py#L1872'>_dtype_for_bitpix</a>()</tt>	Determine the dtype that the data should be converted to depending on the bitpix value in the header and possibly on the bscale value as.
<tt style='background-color:#E8E8E8;'> io.fits.hdu. <a href=' /io/fits/hdu/hdulist.py#L31'>fitsopen</a>(name,mode,memmap,save_backup)</tt>	Factory function to open a fits file and return an hdulist object.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L175'>__init__</a>(hdus,file)</tt>	Construct a hdulist object.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L274'>__getitem__</a>(key)</tt>	Get an hdu from the hdulist, indexed by number or name.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L316'>__contains__</a>(item)</tt>	Returns true if hdulist index_of item succeeds.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L328'>__setitem__</a>(key,hdu)</tt>	Set an hdu to the hdulist, indexed by number or name.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L354'>__delitem__</a>(key)</tt>	Delete an hdu from the hdulist, indexed by number or name.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L390'>fromfile</a>(cls,fileobj,mode,memmap)</tt>	Creates an hdulist instance from a file-like object.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L406'>fromstring</a>(cls,data)</tt>	Creates an hdulist instance from a string or other in-memory data buffer containing an entire fits file.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L451'>fileinfo</a>(index)</tt>	Returns a dictionary detailing information about the locations of the indexed hdu within any associated file.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L518'>insert</a>(index,hdu)</tt>	Insert an hdu into the hdulist at the given index.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L583'>append</a>(hdu)</tt>	Append a new hdu to the hdulist.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L630'>index_of</a>(key)</tt>	Get the index of an hdu from the hdulist.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L687'>_positive_index_of</a>(key)</tt>	Same as index_of but ensures always returning a positive index or zero.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L713'>readall</a>()</tt>	Read data of all hdus into memory.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L722'>flush</a>(output_verify,verbose)</tt>	Force a write of the hdulist back to the file for append and update modes only.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L787'>update_extend</a>()</tt>	Make sure that if the primary header needs the keyword extend that it has it and it is correct.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L819'>writeto</a>(fileobj,output_verify,overwrite,checksum)</tt>	Write the hdulist to a new file.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L923'>_close</a>(output_verify,verbose,closed)</tt>	Internal implementation of close() that does not allow further hdus to be loaded.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L944'>info</a>(output)</tt>	Summarize the info of the hdus in this hdulist.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L989'>filename</a>()</tt>	Return the file name associated with the hdulist object if one exists.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L1005'>_readfrom</a>(cls,fileobj,data,mode)</tt>	Provides the implementations from hdulist fromfile and.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L1060'>_try_while_unread_hdus</a>(func,index)</tt>	Attempt an operation that accesses an hdu by index/name that can fail if not all hdus have been read yet.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L1105'>_read_next_hdu</a>()</tt>	Lazily load a single hdu from the fileobj or data string the hdulist was opened from unless no further hdus are found.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L1238'>_flush_update</a>()</tt>	Implements flushing changes to a file in update mode.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L1265'>_flush_resize</a>()</tt>	Implements flushing changes in update mode when parts of one or more hdu need to be resized.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.HDUList <a href=' /io/fits/hdu/hdulist.py#L1374'>_wasresized</a>(verbose)</tt>	Determine if any changes to the hdulist will require a file resize when flushing the file.
<tt style='background-color:#E8E8E8;'> io.fits.hdu. <a href=' /io/fits/hdu/base.py#L57'>_hdu_class_from_header</a>(cls,header)</tt>	Used primarily by _basehdu __new__ to find an appropriate hdu class to use.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._BaseHDU <a href=' /io/fits/hdu/base.py#L137'>__new__</a>(cls,data,header)</tt>	Iterates through the subclasses of _basehdu and uses that class's match_header() method to determine which subclass to instantiate.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._BaseHDU <a href=' /io/fits/hdu/base.py#L259'>fromstring</a>(cls,data,checksum,ignore_missing_end)</tt>	Creates a new hdu object of the appropriate type from a string containing the hdu's entire header and optionally its data.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._BaseHDU <a href=' /io/fits/hdu/base.py#L298'>readfrom</a>(cls,fileobj,checksum,ignore_missing_end)</tt>	Read the hdu from a file normally an hdu should be opened with.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._BaseHDU <a href=' /io/fits/hdu/base.py#L337'>writeto</a>(name,output_verify,overwrite,checksum)</tt>	Write the hdu to a new file this is a convenience method to.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._BaseHDU <a href=' /io/fits/hdu/base.py#L377'>_readfrom_internal</a>(cls,data,header,checksum)</tt>	Provides the bulk of the internal implementation for readfrom and fromstring.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._BaseHDU <a href=' /io/fits/hdu/base.py#L466'>_get_raw_data</a>(shape,code,offset)</tt>	Return raw array from either the hdu's memory buffer or underlying file.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._BaseHDU <a href=' /io/fits/hdu/base.py#L493'>_update_uint_scale_keywords</a>()</tt>	If the data is unsigned int 16 32 or 64 add bscale/bzero cards to header.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._BaseHDU <a href=' /io/fits/hdu/base.py#L512'>_update_checksum</a>(checksum,checksum_keyword,datasum_keyword)</tt>	Update the 'checksum' and 'datasum' keywords in the header (or keywords with equivalent semantics given by the checksum_keyword.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._BaseHDU <a href=' /io/fits/hdu/base.py#L618'>_writedata_internal</a>(fileobj)</tt>	The beginning and end of most _writedata() implementations are the same but the details of writing the data array itself can vary between.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._BaseHDU <a href=' /io/fits/hdu/base.py#L631'>_writedata_direct_copy</a>(fileobj)</tt>	Copies the data directly from one file/buffer to the new file.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._CorruptedHDU <a href=' /io/fits/hdu/base.py#L763'>size</a>()</tt>	Returns the size in bytes of the hdu's data part.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._NonstandardHDU <a href=' /io/fits/hdu/base.py#L800'>match_header</a>(cls,header)</tt>	Matches any hdu that has the 'simple' keyword but is not a standard primary or groups hdu.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._NonstandardHDU <a href=' /io/fits/hdu/base.py#L820'>size</a>()</tt>	Returns the size in bytes of the hdu's data part.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._NonstandardHDU <a href=' /io/fits/hdu/base.py#L831'>_writedata</a>(fileobj)</tt>	Differs from the base class :class _writedata in that it doesn't automatically add padding and treats the data as a string of raw bytes.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._NonstandardHDU <a href=' /io/fits/hdu/base.py#L861'>data</a>()</tt>	Return the file data.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L889'>match_header</a>(cls,header)</tt>	Matches any hdu that is not recognized as having either the simple or xtension keyword in its header's first card but is nonetheless not.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L902'>size</a>()</tt>	Size in bytes of the data portion of the hdu.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L920'>filebytes</a>()</tt>	Calculates and returns the number of bytes that this hdu will write to a file.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L930'>fileinfo</a>()</tt>	Returns a dictionary detailing information about the locations of this hdu within any associated file.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L966'>copy</a>()</tt>	Make a copy of the hdu both header and data are copied.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L1044'>req_cards</a>(keyword,pos,test,fix_value)</tt>	Check the existence location and value of a required card.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L1162'>add_datasum</a>(when,blocking,datasum_keyword)</tt>	Add the datasum card to this hdu with the value set to the checksum calculated for the data.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L1203'>add_checksum</a>(when,override_datasum,blocking,checksum_keyword)</tt>	Add the checksum and datasum cards to this hdu with the values set to the checksum calculated for the hdu and the.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L1264'>verify_datasum</a>(blocking)</tt>	Verify that the value in the datasum keyword matches the value calculated for the datasum of the current hdu data.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L1294'>verify_checksum</a>(blocking)</tt>	Verify that the value in the checksum keyword matches the value calculated for the current hdu checksum.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L1328'>_verify_checksum_datasum</a>(blocking)</tt>	Verify the checksum/datasum values if the cards exist in the header.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L1363'>_get_timestamp</a>()</tt>	Return the current timestamp in iso 8601 format with microseconds stripped off.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L1373'>_calculate_datasum</a>(blocking)</tt>	Calculate the value for the datasum card in the hdu.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L1394'>_calculate_checksum</a>(datasum,blocking,checksum_keyword)</tt>	Calculate the value of the checksum card in the hdu.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L1418'>_compute_checksum</a>(data,sum32,blocking)</tt>	Compute the ones-complement checksum of a sequence of bytes.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L1454'>_compute_hdu_checksum</a>(data,sum32)</tt>	Translated from fits checksum proposal by seaman pence and rots.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L1508'>_encode_byte</a>(byte)</tt>	Encode a single byte.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ValidHDU <a href=' /io/fits/hdu/base.py#L1531'>_char_encode</a>(value)</tt>	Encodes the checksum value using the algorithm described in spr section a.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.ExtensionHDU <a href=' /io/fits/hdu/base.py#L1573'>match_header</a>(cls,header)</tt>	This class should never be instantiated directly either a standard.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.ExtensionHDU <a href=' /io/fits/hdu/base.py#L1583'>writeto</a>(name,output_verify,overwrite,checksum)</tt>	Works similarly to the normal writeto(), but prepends a default primaryhdu are required by extension hdus (which cannot stand on.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.NonstandardExtHDU <a href=' /io/fits/hdu/base.py#L1633'>match_header</a>(cls,header)</tt>	Matches any extension hdu that is not one of the standard extension hdu types.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.NonstandardExtHDU <a href=' /io/fits/hdu/base.py#L1656'>data</a>()</tt>	Return the file data.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.StreamingHDU <a href=' /io/fits/hdu/streaming.py#L37'>__init__</a>(name,header)</tt>	Construct a streaminghdu object given a file name and a header.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.StreamingHDU <a href=' /io/fits/hdu/streaming.py#L142'>write</a>(data)</tt>	Write the given data to the stream.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.StreamingHDU <a href=' /io/fits/hdu/streaming.py#L198'>size</a>()</tt>	Return the size in bytes of the data portion of the hdu.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.StreamingHDU <a href=' /io/fits/hdu/streaming.py#L226'>close</a>()</tt>	Close the physical fits file.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ImageBaseHDU <a href=' /io/fits/hdu/image.py#L176'>match_header</a>(cls,header)</tt>	_imagebasehdu is sort of an abstract class for hdus containing image data as opposed to table data and should never be used directly.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ImageBaseHDU <a href=' /io/fits/hdu/image.py#L189'>section</a>()</tt>	Access a section of the image array without loading the entire array into memory.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ImageBaseHDU <a href=' /io/fits/hdu/image.py#L206'>shape</a>()</tt>	Shape of the image array--should be equivalent to self data shape.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ImageBaseHDU <a href=' /io/fits/hdu/image.py#L248'>data</a>()</tt>	Image/array data as a ~numpy ndarray.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ImageBaseHDU <a href=' /io/fits/hdu/image.py#L311'>update_header</a>()</tt>	Update the header keywords to agree with the data.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ImageBaseHDU <a href=' /io/fits/hdu/image.py#L378'>_update_header_scale_info</a>(dtype)</tt>	Delete bscale/bzero from header if necessary.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ImageBaseHDU <a href=' /io/fits/hdu/image.py#L431'>scale</a>(type,option,bscale,bzero)</tt>	Scale image data by using bscale/bzero.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ImageBaseHDU <a href=' /io/fits/hdu/image.py#L462'>_scale_internal</a>(type,option,bscale,bzero)</tt>	This is an internal implementation of the scale method which also supports handling blank properly.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ImageBaseHDU <a href=' /io/fits/hdu/image.py#L646'>_dtype_for_bitpix</a>()</tt>	Determine the dtype that the data should be converted to depending on the bitpix value in the header and possibly on the bscale value as.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ImageBaseHDU <a href=' /io/fits/hdu/image.py#L667'>_convert_pseudo_unsigned</a>(data)</tt>	Handle "pseudo-unsigned" integers if the user requested it returns.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ImageBaseHDU <a href=' /io/fits/hdu/image.py#L691'>_get_scaled_image_data</a>(offset,shape)</tt>	Internal function for reading image data from a file and apply scale factors to it.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ImageBaseHDU <a href=' /io/fits/hdu/image.py#L764'>_summary</a>()</tt>	Summarize the hdu name dimensions and formats.
<tt style='background-color:#E8E8E8;'> io.fits.hdu._ImageBaseHDU <a href=' /io/fits/hdu/image.py#L797'>_calculate_datasum</a>(blocking)</tt>	Calculate the value for the datasum card in the hdu.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.PrimaryHDU <a href=' /io/fits/hdu/image.py#L941'>__init__</a>(data,header,do_not_scale_image_data,ignore_blank)</tt>	Construct a primary hdu.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.ImageHDU <a href=' /io/fits/hdu/image.py#L1036'>__init__</a>(data,header,name,do_not_scale_image_data)</tt>	Construct an image hdu.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.ImageHDU <a href=' /io/fits/hdu/image.py#L1091'>_verify</a>(option)</tt>	Imagehdu verify method.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.FitsHDU <a href=' /io/fits/hdu/nonstandard.py#L42'>fromfile</a>(cls,filename,compress)</tt>	Like fitshdu fromhdulist(), but creates a fitshdu from a file on.
<tt style='background-color:#E8E8E8;'> io.fits.hdu.FitsHDU <a href=' /io/fits/hdu/nonstandard.py#L58'>fromhdulist</a>(cls,hdulist,compress)</tt>	Creates a new fitshdu from a given hdulist object.
<tt style='background-color:#E8E8E8;'> io.votable.UCDWords <a href=' /io/votable/ucd.py#L43'>is_primary</a>(name)</tt>	Returns true if *name* is a valid primary name.
<tt style='background-color:#E8E8E8;'> io.votable.UCDWords <a href=' /io/votable/ucd.py#L49'>is_secondary</a>(name)</tt>	Returns true if *name* is a valid secondary name.
<tt style='background-color:#E8E8E8;'> io.votable.UCDWords <a href=' /io/votable/ucd.py#L55'>get_description</a>(name)</tt>	Returns the official english description of the given ucd *name*.
<tt style='background-color:#E8E8E8;'> io.votable.UCDWords <a href=' /io/votable/ucd.py#L62'>normalize_capitalization</a>(name)</tt>	Returns the standard capitalization form of the given name.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/ucd.py#L71'>parse_ucd</a>(ucd,check_controlled_vocabulary,has_colon)</tt>	Parse the ucd into its component parts.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/tree.py#L254'>check_ucd</a>(ucd,check_controlled_vocabulary,has_colon)</tt>	Returns false if *ucd* is not a valid unified content descriptor_.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/util.py#L26'>convert_to_writable_filelike</a>(fd,compressed)</tt>	Returns a writable file-like object suitable for streaming output.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/util.py#L101'>coerce_range_list_param</a>(p,frames,numeric)</tt>	Coerces and/or verifies the object *p* into a valid range-list-format parameter.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/util.py#L205'>version_compare</a>(a,b)</tt>	Compare two votable version identifiers.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/table.py#L31'>parse</a>(source,columns,invalid,pedantic)</tt>	Parses a votable_ xml file or file-like object and returns a ~astropy.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/table.py#L143'>parse_single_table</a>(source)</tt>	Parses a votable_ xml file or file-like object reading and returning only the first ~astropy.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/table.py#L163'>writeto</a>(table,file,tabledata_format)</tt>	Writes a ~astropy io votable tree votablefile to a votable_ xml file.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/table.py#L192'>validate</a>(source,output,xmllint,filename)</tt>	Prints a validation report for the given file.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/table.py#L319'>from_table</a>(table,table_id)</tt>	Given an ~astropy table table object return a.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/connect.py#L15'>is_votable</a>(source)</tt>	Reads the header of a file to determine if it is a votable file.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/table.py#L371'>reset_vo_warnings</a>()</tt>	Resets all of the vo warning state so that warnings that have already been emitted will be emitted again.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/connect.py#L15'>is_votable</a>(origin,filepath,fileobj)</tt>	Reads the header of a file to determine if it is a votable file.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/connect.py#L47'>read_table_votable</a>(input,table_id,use_names_over_ids)</tt>	Read a table object from an vo table file parameters.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/connect.py#L116'>write_table_votable</a>(input,output,table_id,overwrite)</tt>	Write a table object to an vo table file parameters.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/xmlutil.py#L24'>check_id</a>(ID,name,config,pos)</tt>	Raises a ~astropy io votable exceptions votablespecerror if *id*.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/xmlutil.py#L38'>fix_id</a>(ID,config,pos)</tt>	Given an arbitrary string create one that can be used as an xml id.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/xmlutil.py#L56'>check_token</a>(token,attr_name,config,pos)</tt>	Raises a valueerror if *token* is not a valid xml token.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/xmlutil.py#L67'>check_mime_content_type</a>(content_type,config,pos)</tt>	Raises a ~astropy io votable exceptions votablespecerror if.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/xmlutil.py#L81'>check_anyuri</a>(uri,config,pos)</tt>	Raises a ~astropy io votable exceptions votablespecerror if.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/xmlutil.py#L94'>validate_schema</a>(filename,version)</tt>	Validates the given file against the appropriate votable schema.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/exceptions.py#L80'>warn_or_raise</a>(warning_class,exception_class,args,config)</tt>	Warn or raise an exception depending on the pedantic setting.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/exceptions.py#L95'>vo_raise</a>(exception_class,args,config,pos)</tt>	Raise an exception with proper position information if available.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/exceptions.py#L104'>vo_reraise</a>(exc,config,pos,additional)</tt>	Raise an exception with proper position information if available.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/exceptions.py#L122'>vo_warn</a>(warning_class,args,config,pos)</tt>	Warn with proper position information if available.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/exceptions.py#L143'>parse_vowarning</a>(line)</tt>	Parses the vo warning string back into its parts.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/converters.py#L69'>_make_masked_array</a>(data,mask)</tt>	Masked arrays of zero length that also have a mask of zero length cause problems in numpy (at least in 1.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/converters.py#L85'>bitarray_to_bool</a>(data,length)</tt>	Converts a bit array a string of bits in a bytes object to a boolean numpy array.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/converters.py#L119'>bool_to_bitarray</a>(value)</tt>	Converts a numpy boolean array to a bit array a string of bits in a bytes object.
<tt style='background-color:#E8E8E8;'> io.votable.Converter <a href=' /io/votable/converters.py#L184'>supports_empty_values</a>(config)</tt>	Returns true when the field can be completely empty.
<tt style='background-color:#E8E8E8;'> io.votable.Converter <a href=' /io/votable/converters.py#L190'>parse</a>(value,config,pos)</tt>	Convert the string *value* from the tabledata_ format into an object with the correct native in-memory datatype and mask flag.
<tt style='background-color:#E8E8E8;'> io.votable.Converter <a href=' /io/votable/converters.py#L209'>parse_scalar</a>(value,config,pos)</tt>	Parse a single scalar of the underlying type of the converter.
<tt style='background-color:#E8E8E8;'> io.votable.Converter <a href=' /io/votable/converters.py#L229'>output</a>(value,mask)</tt>	Convert the object *value* in the native in-memory datatype to a unicode string suitable for serializing in the tabledata_.
<tt style='background-color:#E8E8E8;'> io.votable.Converter <a href=' /io/votable/converters.py#L251'>binparse</a>(read)</tt>	Reads some number of bytes from the binary_ format representation by calling the function *read*, and returns the.
<tt style='background-color:#E8E8E8;'> io.votable.Converter <a href=' /io/votable/converters.py#L273'>binoutput</a>(value,mask)</tt>	Convert the object *value* in the native in-memory datatype to a string of bytes suitable for serialization in the binary_.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/converters.py#L1244'>get_converter</a>(field,config,pos)</tt>	Get an appropriate converter instance for a given field.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/converters.py#L1353'>numpy_to_votable_dtype</a>(dtype,shape)</tt>	Converts a numpy dtype and shape to a dictionary of attributes for a votable field element and correspond to that type.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/converters.py#L1389'>table_column_to_votable_datatype</a>(column)</tt>	Given a astropy table column instance returns the attributes.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/tree.py#L63'>_resize</a>(masked,new_size)</tt>	Masked arrays can not be resized inplace and np resize and.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/tree.py#L83'>_lookup_by_attr_factory</a>(attr,unique,iterator,element_name)</tt>	Creates a function useful for looking up an element by a given attribute.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/tree.py#L146'>_lookup_by_id_or_name_factory</a>(iterator,element_name,doc)</tt>	Like _lookup_by_attr_factory, but looks in both the "id" and "name" attributes.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/tree.py#L176'>_get_default_unit_format</a>(config)</tt>	Get the default unit format as specified in the votable spec.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/tree.py#L185'>_get_unit_format</a>(config)</tt>	Get the unit format based on the configuration.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/tree.py#L199'>check_astroyear</a>(year,field,config,pos)</tt>	Raises a ~astropy io votable exceptions votablespecerror if.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/tree.py#L224'>check_string</a>(string,attr_name,config,pos)</tt>	Raises a ~astropy io votable exceptions votablespecerror if.
<tt style='background-color:#E8E8E8;'> io.votable. <a href=' /io/votable/tree.py#L254'>check_ucd</a>(ucd,config,pos)</tt>	Warns or raises a ~astropy.
<tt style='background-color:#E8E8E8;'> io.votable._IDProperty <a href=' /io/votable/tree.py#L304'>ID</a>()</tt>	The xml id_ of the element may be none or a string.
<tt style='background-color:#E8E8E8;'> io.votable._NameProperty <a href=' /io/votable/tree.py#L320'>name</a>()</tt>	An optional name for the element.
<tt style='background-color:#E8E8E8;'> io.votable._XtypeProperty <a href=' /io/votable/tree.py#L340'>xtype</a>()</tt>	Extended data type information.
<tt style='background-color:#E8E8E8;'> io.votable._UtypeProperty <a href=' /io/votable/tree.py#L364'>utype</a>()</tt>	The usage-specific or unique type_ of the element.
<tt style='background-color:#E8E8E8;'> io.votable._UcdProperty <a href=' /io/votable/tree.py#L390'>ucd</a>()</tt>	The unified content descriptor_ for the element.
<tt style='background-color:#E8E8E8;'> io.votable._DescriptionProperty <a href=' /io/votable/tree.py#L408'>description</a>()</tt>	An optional string describing the element corresponds to the.
<tt style='background-color:#E8E8E8;'> io.votable.Element <a href=' /io/votable/tree.py#L435'>parse</a>(iterator,config)</tt>	For internal use parse the xml content of the children of the.
<tt style='background-color:#E8E8E8;'> io.votable.Element <a href=' /io/votable/tree.py#L457'>to_xml</a>(w)</tt>	For internal use output the element to xml.
<tt style='background-color:#E8E8E8;'> io.votable.SimpleElementWithContent <a href=' /io/votable/tree.py#L534'>content</a>()</tt>	The content of the element.
<tt style='background-color:#E8E8E8;'> io.votable.Link <a href=' /io/votable/tree.py#L596'>content_role</a>()</tt>	Defines the mime role of the referenced object must be one of.
<tt style='background-color:#E8E8E8;'> io.votable.Link <a href=' /io/votable/tree.py#L610'>content_type</a>()</tt>	Defines the mime content type of the referenced object.
<tt style='background-color:#E8E8E8;'> io.votable.Link <a href=' /io/votable/tree.py#L627'>href</a>()</tt>	A uri to an arbitrary protocol the vo package only supports.
<tt style='background-color:#E8E8E8;'> io.votable.Info <a href=' /io/votable/tree.py#L701'>name</a>()</tt>	[*required*] the key of the key-value pair.
<tt style='background-color:#E8E8E8;'> io.votable.Info <a href=' /io/votable/tree.py#L716'>value</a>()</tt>	[*required*] the value of the key-value pair (always stored.
<tt style='background-color:#E8E8E8;'> io.votable.Info <a href=' /io/votable/tree.py#L733'>content</a>()</tt>	The content inside the info element.
<tt style='background-color:#E8E8E8;'> io.votable.Info <a href=' /io/votable/tree.py#L768'>ref</a>()</tt>	Refer to another info_ element by id_, defined previously in the document.
<tt style='background-color:#E8E8E8;'> io.votable.Info <a href=' /io/votable/tree.py#L805'>unit</a>()</tt>	A string specifying the units_ for the info_.
<tt style='background-color:#E8E8E8;'> io.votable.Values <a href=' /io/votable/tree.py#L875'>null</a>()</tt>	For integral datatypes *null* is used to define the value used for missing values.
<tt style='background-color:#E8E8E8;'> io.votable.Values <a href=' /io/votable/tree.py#L894'>type</a>()</tt>	[*required*] defines the applicability of the domain defined by this values_ element.
<tt style='background-color:#E8E8E8;'> io.votable.Values <a href=' /io/votable/tree.py#L928'>ref</a>()</tt>	Refer to another values_ element by id_, defined previously in the document for min/max/option information.
<tt style='background-color:#E8E8E8;'> io.votable.Values <a href=' /io/votable/tree.py#L946'>min</a>()</tt>	The minimum value of the domain see :attr min_inclusive.
<tt style='background-color:#E8E8E8;'> io.votable.Values <a href=' /io/votable/tree.py#L964'>min_inclusive</a>()</tt>	When true, the domain includes the minimum value.
<tt style='background-color:#E8E8E8;'> io.votable.Values <a href=' /io/votable/tree.py#L982'>max</a>()</tt>	The maximum value of the domain see :attr max_inclusive.
<tt style='background-color:#E8E8E8;'> io.votable.Values <a href=' /io/votable/tree.py#L1000'>max_inclusive</a>()</tt>	When true, the domain includes the maximum value.
<tt style='background-color:#E8E8E8;'> io.votable.Values <a href=' /io/votable/tree.py#L1004'>options</a>()</tt>	A list of string key-value tuples defining other option elements for the domain.
<tt style='background-color:#E8E8E8;'> io.votable.Values <a href=' /io/votable/tree.py#L1056'>is_defaults</a>()</tt>	Are the settings on this value element all the same as the.
<tt style='background-color:#E8E8E8;'> io.votable.Field <a href=' /io/votable/tree.py#L1243'>uniqify_names</a>(cls,fields)</tt>	Make sure that all names and titles in a list of fields are unique by appending numbers if necessary.
<tt style='background-color:#E8E8E8;'> io.votable.Field <a href=' /io/votable/tree.py#L1301'>datatype</a>()</tt>	[*required*] the datatype of the column valid values (as.
<tt style='background-color:#E8E8E8;'> io.votable.Field <a href=' /io/votable/tree.py#L1330'>precision</a>()</tt>	Along with :attr width, defines the numerical accuracy_ associated with the data.
<tt style='background-color:#E8E8E8;'> io.votable.Field <a href=' /io/votable/tree.py#L1354'>width</a>()</tt>	Along with :attr precision, defines the numerical accuracy_ associated with the data.
<tt style='background-color:#E8E8E8;'> io.votable.Field <a href=' /io/votable/tree.py#L1374'>ref</a>()</tt>	On field_ elements ref is used only for informational purposes for example to refer to a coosys_ element.
<tt style='background-color:#E8E8E8;'> io.votable.Field <a href=' /io/votable/tree.py#L1407'>unit</a>()</tt>	A string specifying the units_ for the field_.
<tt style='background-color:#E8E8E8;'> io.votable.Field <a href=' /io/votable/tree.py#L1428'>arraysize</a>()</tt>	Specifies the size of the multidimensional array if this field_ contains more than a single value.
<tt style='background-color:#E8E8E8;'> io.votable.Field <a href=' /io/votable/tree.py#L1444'>type</a>()</tt>	The type attribute on field_ elements is reserved for future extensions.
<tt style='background-color:#E8E8E8;'> io.votable.Field <a href=' /io/votable/tree.py#L1461'>values</a>()</tt>	A :class values instance (or none) defining the domain of the column.
<tt style='background-color:#E8E8E8;'> io.votable.Field <a href=' /io/votable/tree.py#L1465'>links</a>()</tt>	A list of :class link instances used to reference more details about the meaning of the field_.
<tt style='background-color:#E8E8E8;'> io.votable.Field <a href=' /io/votable/tree.py#L1522'>to_table_column</a>(column)</tt>	Sets the attributes of a given astropy table column instance.
<tt style='background-color:#E8E8E8;'> io.votable.Field <a href=' /io/votable/tree.py#L1543'>from_table_column</a>(cls,votable,column)</tt>	Restores a field instance from a given astropy.
<tt style='background-color:#E8E8E8;'> io.votable.Param <a href=' /io/votable/tree.py#L1603'>value</a>()</tt>	[*required*] the constant value of the parameter its type is.
<tt style='background-color:#E8E8E8;'> io.votable.CooSys <a href=' /io/votable/tree.py#L1666'>ID</a>()</tt>	[*required*] the xml id of the coosys_ element used for cross-referencing.
<tt style='background-color:#E8E8E8;'> io.votable.CooSys <a href=' /io/votable/tree.py#L1692'>system</a>()</tt>	Specifies the type of coordinate system valid choices are.
<tt style='background-color:#E8E8E8;'> io.votable.CooSys <a href=' /io/votable/tree.py#L1710'>equinox</a>()</tt>	A parameter required to fix the equatorial or ecliptic systems (as e.
<tt style='background-color:#E8E8E8;'> io.votable.CooSys <a href=' /io/votable/tree.py#L1727'>epoch</a>()</tt>	Specifies the epoch of the positions it must be a string.
<tt style='background-color:#E8E8E8;'> io.votable.FieldRef <a href=' /io/votable/tree.py#L1742'>__init__</a>(table,ref,ucd,utype)</tt>	*table* is the :class table object that this :class fieldref is a member of.
<tt style='background-color:#E8E8E8;'> io.votable.FieldRef <a href=' /io/votable/tree.py#L1781'>ref</a>()</tt>	The id_ of the field_ that this fieldref_ references.
<tt style='background-color:#E8E8E8;'> io.votable.FieldRef <a href=' /io/votable/tree.py#L1785'>get_ref</a>()</tt>	Lookup the :class field instance that this :class fieldref references.
<tt style='background-color:#E8E8E8;'> io.votable.ParamRef <a href=' /io/votable/tree.py#L1847'>ref</a>()</tt>	The id_ of the param_ that this paramref_ references.
<tt style='background-color:#E8E8E8;'> io.votable.ParamRef <a href=' /io/votable/tree.py#L1851'>get_ref</a>()</tt>	Lookup the :class param instance that this :class paramref references.
<tt style='background-color:#E8E8E8;'> io.votable.Group <a href=' /io/votable/tree.py#L1917'>ref</a>()</tt>	Currently ignored as it's not clear from the spec how this is meant to work.
<tt style='background-color:#E8E8E8;'> io.votable.Group <a href=' /io/votable/tree.py#L1921'>entries</a>()</tt>	[read-only] a list of members of the group_ this list may.
<tt style='background-color:#E8E8E8;'> io.votable.Group <a href=' /io/votable/tree.py#L1983'>iter_fields_and_params</a>()</tt>	Recursively iterate over all :class param elements in this :class group.
<tt style='background-color:#E8E8E8;'> io.votable.Group <a href=' /io/votable/tree.py#L1995'>iter_groups</a>()</tt>	Recursively iterate over all sub-:class group instances in this :class group.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2112'>ref</a>(ref)</tt>	Refer to another table previously defined by the *ref* id_ for all metadata (field_, param_ etc.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2133'>format</a>()</tt>	[*required*] the serialization format of the table must be.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2149'>nrows</a>()</tt>	[*immutable*] the number of rows in the table as specified in the xml file.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2157'>fields</a>()</tt>	A list of :class field objects describing the types of each of the data columns.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2165'>params</a>()</tt>	A list of parameters constant-valued columns for the table.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2173'>groups</a>()</tt>	A list of :class group objects describing how the columns and parameters are grouped.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2183'>links</a>()</tt>	A list of :class link objects pointers to other documents or servers through a uri for the table.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2191'>infos</a>()</tt>	A list of :class info objects for the table allows for.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2199'>is_empty</a>()</tt>	Returns true if this table doesn't contain any real data because it was skipped over by the parser (through use of the.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2207'>create_arrays</a>(nrows,config)</tt>	Create a new array to hold the data based on the current set of fields and store them in the *array* and member variable.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2254'>_resize_strategy</a>(size)</tt>	Return a new larger size based on size used for reallocating an array when it fills up.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2841'>to_table</a>(use_names_over_ids)</tt>	Convert this vo table to an astropy table table instance.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2896'>from_table</a>(cls,votable,table)</tt>	Create a table instance from a given astropy table table.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2923'>iter_fields_and_params</a>()</tt>	Recursively iterate over all field and param elements in the table.
<tt style='background-color:#E8E8E8;'> io.votable.Table <a href=' /io/votable/tree.py#L2955'>iter_groups</a>()</tt>	Recursively iterate over all group elements in the table.
<tt style='background-color:#E8E8E8;'> io.votable.Resource <a href=' /io/votable/tree.py#L3036'>type</a>()</tt>	[*required*] the type of the resource must be either.
<tt style='background-color:#E8E8E8;'> io.votable.Resource <a href=' /io/votable/tree.py#L3042'>extra_attributes</a>()</tt>	A dictionary of string keys to string values containing any extra attributes of the resource_ element that are not defined.
<tt style='background-color:#E8E8E8;'> io.votable.Resource <a href=' /io/votable/tree.py#L3052'>coordinate_systems</a>()</tt>	A list of coordinate system definitions (coosys_ elements) for the resource_.
<tt style='background-color:#E8E8E8;'> io.votable.Resource <a href=' /io/votable/tree.py#L3060'>infos</a>()</tt>	A list of informational parameters key-value pairs for the resource.
<tt style='background-color:#E8E8E8;'> io.votable.Resource <a href=' /io/votable/tree.py#L3068'>params</a>()</tt>	A list of parameters constant-valued columns for the resource.
<tt style='background-color:#E8E8E8;'> io.votable.Resource <a href=' /io/votable/tree.py#L3076'>links</a>()</tt>	A list of links pointers to other documents or servers through a uri for the resource.
<tt style='background-color:#E8E8E8;'> io.votable.Resource <a href=' /io/votable/tree.py#L3085'>tables</a>()</tt>	A list of tables in the resource must contain only.
<tt style='background-color:#E8E8E8;'> io.votable.Resource <a href=' /io/votable/tree.py#L3093'>resources</a>()</tt>	A list of nested resources inside this resource must contain.
<tt style='background-color:#E8E8E8;'> io.votable.Resource <a href=' /io/votable/tree.py#L3171'>iter_tables</a>()</tt>	Recursively iterates over all tables in the resource and nested resources.
<tt style='background-color:#E8E8E8;'> io.votable.Resource <a href=' /io/votable/tree.py#L3182'>iter_fields_and_params</a>()</tt>	Recursively iterates over all field_ and param_ elements in the resource its tables and nested resources.
<tt style='background-color:#E8E8E8;'> io.votable.Resource <a href=' /io/votable/tree.py#L3196'>iter_coosys</a>()</tt>	Recursively iterates over all the coosys_ elements in the resource and nested resources.
<tt style='background-color:#E8E8E8;'> io.votable.Resource <a href=' /io/votable/tree.py#L3207'>iter_info</a>()</tt>	Recursively iterates over all the info_ elements in the resource and nested resources.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3264'>version</a>()</tt>	The version of the votable specification that the file uses.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3273'>coordinate_systems</a>()</tt>	A list of coordinate system descriptions for the file must.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3281'>params</a>()</tt>	A list of parameters constant-valued columns that apply to the entire file.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3289'>infos</a>()</tt>	A list of informational parameters key-value pairs for the entire file.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3297'>resources</a>()</tt>	A list of resources in the order they appear in the file.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3305'>groups</a>()</tt>	A list of groups in the order they appear in the file only.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3404'>to_xml</a>(fd,write_null_values,compressed,tabledata_format)</tt>	Write to an xml file.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3489'>iter_tables</a>()</tt>	Iterates over all tables in the votable file in a "flat" way ignoring the nesting of resources etc.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3498'>get_first_table</a>()</tt>	Often you know there is only one table in the file and that's all you need.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3522'>get_table_by_index</a>(idx)</tt>	Get a table by its ordinal position in the file.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3532'>iter_fields_and_params</a>()</tt>	Recursively iterate over all field_ and param_ elements in the votable_ file.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3561'>iter_values</a>()</tt>	Recursively iterate over all values_ elements in the votable_ file.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3576'>iter_groups</a>()</tt>	Recursively iterate over all group_ elements in the votable_ file.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3599'>iter_coosys</a>()</tt>	Recursively iterate over all coosys_ elements in the votable_ file.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3614'>iter_info</a>()</tt>	Recursively iterate over all info_ elements in the votable_ file.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3629'>set_all_tables_format</a>(format)</tt>	Set the output storage format of all tables in the file.
<tt style='background-color:#E8E8E8;'> io.votable.VOTableFile <a href=' /io/votable/tree.py#L3636'>from_table</a>(cls,table,table_id)</tt>	Create a votablefile instance from a given astropy.
<tt style='background-color:#E8E8E8;'> io.votable.validator. <a href=' /io/votable/validator/main.py#L79'>make_validation_report</a>(urls,destdir,multiprocess,stilts)</tt>	Validates a large collection of web-accessible votable files.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L133'>__len__</a>()</tt>	Number of rows in index.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L139'>replace_col</a>(prev_col,new_col)</tt>	Replace an indexed column with an updated reference.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L152'>reload</a>()</tt>	Recreate the index based on data in self columns.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L158'>col_position</a>(col_name)</tt>	Return the position of col_name in self columns.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L172'>insert_row</a>(pos,vals,columns)</tt>	Insert a new row from the given values.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L197'>get_row_specifier</a>(row_specifier)</tt>	Return an iterable corresponding to the input row specifier.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L217'>remove_rows</a>(row_specifier)</tt>	Remove the given rows from the index.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L238'>remove_row</a>(row,reorder)</tt>	Remove the given row from the index.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L256'>find</a>(key)</tt>	Return the row values corresponding to key in sorted order.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L267'>same_prefix</a>(key)</tt>	Return rows whose keys contain the supplied key as a prefix.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L278'>same_prefix_range</a>(lower,upper,bounds)</tt>	Return rows whose keys have a prefix in the given range.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L304'>range</a>(lower,upper,bounds)</tt>	Return rows within the given range.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L322'>replace</a>(row,col_name,val)</tt>	Replace the value of a column at a given position.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L340'>replace_rows</a>(col_slice)</tt>	Modify rows in this index to agree with the specified slice.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L356'>sort</a>()</tt>	Make row numbers follow the same sort order as the keys of the index.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L363'>sorted_data</a>()</tt>	Returns a list of rows in sorted order based on keys essentially acts as an argsort() on columns.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L370'>__getitem__</a>(item)</tt>	Returns a sliced version of this index.
<tt style='background-color:#E8E8E8;'> table.Index <a href=' /table/index.py#L392'>__deepcopy__</a>(memo)</tt>	Return a deep copy of this index.
<tt style='background-color:#E8E8E8;'> table.SlicedIndex <a href=' /table/index.py#L450'>stop</a>()</tt>	The stopping position of the slice or the end of the index if this is an original slice.
<tt style='background-color:#E8E8E8;'> table.SlicedIndex <a href=' /table/index.py#L458'>__getitem__</a>(item)</tt>	Returns another slice of this index slice.
<tt style='background-color:#E8E8E8;'> table.SlicedIndex <a href=' /table/index.py#L476'>sliced_coords</a>(rows)</tt>	Convert the input rows to the sliced coordinate system.
<tt style='background-color:#E8E8E8;'> table.SlicedIndex <a href=' /table/index.py#L504'>orig_coords</a>(row)</tt>	Convert the input row from sliced coordinates back to original coordinates.
<tt style='background-color:#E8E8E8;'> table.SlicedIndex <a href=' /table/index.py#L585'>get_slice</a>(col_slice,item)</tt>	Return a newly created index from the given slice.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/index.py#L613'>get_index</a>(table,table_copy)</tt>	Inputs a table and some subset of its columns and returns an index corresponding to this subset or none.
<tt style='background-color:#E8E8E8;'> table._IndexModeContext <a href=' /table/index.py#L697'>_get_copy_on_getitem_shim</a>(cls)</tt>	This creates a subclass of the column's class which overrides that class's __getitem__, such that when returning a slice of the.
<tt style='background-color:#E8E8E8;'> table.TableIndices <a href=' /table/index.py#L743'>__getitem__</a>(item)</tt>	Retrieve an item from the list of indices.
<tt style='background-color:#E8E8E8;'> table.TableLoc <a href=' /table/index.py#L786'>__getitem__</a>(item)</tt>	Retrieve table rows by value slice.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/table.py#L53'>descr</a>(col)</tt>	Array-interface compliant full description of a column.
<tt style='background-color:#E8E8E8;'> table.TableColumns <a href=' /table/table.py#L99'>__getitem__</a>(item)</tt>	Get items from a tablecolumns object.
<tt style='background-color:#E8E8E8;'> table.TableColumns <a href=' /table/table.py#L153'>isinstance</a>(cls)</tt>	Return a list of columns which are instances of the specified classes.
<tt style='background-color:#E8E8E8;'> table.TableColumns <a href=' /table/table.py#L170'>not_isinstance</a>(cls)</tt>	Return a list of columns which are not instances of the specified classes.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L237'>as_array</a>(keep_byteorder)</tt>	Return a new copy of the table in the form of a structured np ndarray or.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L448'>_mask</a>()</tt>	This is needed so that comparison of a masked table and a maskedarray works.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L455'>filled</a>(fill_value)</tt>	Return a copy of self with masked values filled.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L479'>indices</a>()</tt>	Return the indices associated with columns of the table as a tableindices object.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L492'>loc</a>()</tt>	Return a tableloc object that can be used for retrieving rows by index in a given data range.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L501'>iloc</a>()</tt>	Return a tableiloc object that can be used for retrieving indexed rows in the order they appear in the index.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L509'>add_index</a>(colnames,engine,unique)</tt>	Insert a new index among one or more columns.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L542'>remove_indices</a>(colname)</tt>	Remove all indices involving the given column.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L564'>index_mode</a>(mode)</tt>	Return a context manager for an indexing mode.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L585'>__array__</a>(dtype)</tt>	Support converting table to np array via np array table.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L604'>_check_names_dtype</a>(names,dtype,n_cols)</tt>	Make sure that names and dtype are both iterable and have the same length as data.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L645'>_init_from_list</a>(data,names,dtype,n_cols)</tt>	Initialize table from a list of columns a column can be a.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L686'>_init_from_ndarray</a>(data,names,dtype,n_cols)</tt>	Initialize table from an ndarray structured array.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L711'>_init_from_dict</a>(data,names,dtype,n_cols)</tt>	Initialize table from a dictionary of columns.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L721'>_init_from_table</a>(data,names,dtype,n_cols)</tt>	Initialize table from an existing table object.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L732'>_convert_col_for_table</a>(col)</tt>	Make sure that all column objects have correct class for this type of table.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L743'>_init_from_cols</a>(cols)</tt>	Initialize table from a list of column or mixin objects.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L773'>_new_from_slice</a>(slice_)</tt>	Create a new table as a referenced slice from self.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L794'>_make_table_from_cols</a>(table,cols)</tt>	Make table in-place so that it represents the given list of cols.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L814'>itercols</a>()</tt>	Iterate over the columns of this table.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L885'>has_mixin_columns</a>()</tt>	True if table has any mixin columns defined as columns that are not column subclasses.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L893'>_add_as_mixin_column</a>(col)</tt>	Determine if col should be added to the table directly as a mixin column.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L905'>pprint</a>(max_lines,max_width,show_name,show_unit)</tt>	Print a formatted string representation of the table.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L967'>show_in_notebook</a>(tableid,css,display_length,table_class)</tt>	Render the table in html and show it in the ipython notebook.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1032'>show_in_browser</a>(max_lines,jsviewer,browser,jskwargs)</tt>	Render the table in html and show it in a web browser.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1112'>pformat</a>(max_lines,max_width,show_name,show_unit)</tt>	Return a list of lines for the formatted string representation of the table.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1183'>more</a>(max_lines,max_width,show_name,show_unit)</tt>	Interactively browse table with a paging interface.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1371'>field</a>(item)</tt>	Return column[item] for recarray compatibility.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1384'>_set_masked</a>(masked)</tt>	Set the table masked property.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1444'>index_column</a>(name)</tt>	Return the positional index of column name.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1481'>add_column</a>(col,index,name,rename_duplicate)</tt>	Add a new column object col to the table if index.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1570'>add_columns</a>(cols,indexes,names,copy)</tt>	Add a list of new column objects cols to the table if a.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1707'>_replace_column_warnings</a>(name,col)</tt>	Same as replace_column but issues warnings under various circumstances.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1762'>replace_column</a>(name,col)</tt>	Replace column name with the new col object.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1792'>remove_row</a>(index)</tt>	Remove a row from the table.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1830'>remove_rows</a>(row_specifier)</tt>	Remove rows from the table.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1893'>remove_column</a>(name)</tt>	Remove a column from the table.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1934'>remove_columns</a>(names)</tt>	Remove several columns from the table.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L1991'>_convert_string_dtype</a>(in_kind,out_kind,python3_only)</tt>	Convert string-like columns to/from bytestring and unicode internal only.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2023'>convert_bytestring_to_unicode</a>(python3_only)</tt>	Convert bytestring columns (dtype kind='s') to unicode (dtype kind='u') assuming.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2045'>convert_unicode_to_bytestring</a>(python3_only)</tt>	Convert ascii-only unicode columns (dtype kind='u') to bytestring (dtype kind='s').
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2066'>keep_columns</a>(names)</tt>	Keep only the columns specified remove the others.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2125'>rename_column</a>(name,new_name)</tt>	Rename a column.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2169'>add_row</a>(vals,mask)</tt>	Add a new row to the end of the table.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2222'>insert_row</a>(index,vals,mask)</tt>	Add a new row before the given index position in the table.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2371'>argsort</a>(keys,kind)</tt>	Return the indices which would sort the table according to one or more key columns.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2412'>sort</a>(keys)</tt>	Sort the table according to one or more keys this operates.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2471'>reverse</a>()</tt>	Reverse the row order of table rows the table is reversed.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2504'>read</a>(cls)</tt>	Read and parse a data table and return as a table.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2522'>write</a>()</tt>	Write this table object out in the specified format.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2539'>copy</a>(copy_data)</tt>	Return a copy of the table.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2628'>group_by</a>(keys)</tt>	Group this table by the specified keys this effectively splits the table into groups which correspond to.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2658'>to_pandas</a>()</tt>	Return a :class pandas dataframe instance.
<tt style='background-color:#E8E8E8;'> table.Table <a href=' /table/table.py#L2700'>from_pandas</a>(cls,dataframe)</tt>	Create a table from a :class pandas dataframe instance.
<tt style='background-color:#E8E8E8;'> table.QTable <a href=' /table/table.py#L2781'>_add_as_mixin_column</a>(col)</tt>	Determine if col should be added to the table directly as a mixin column.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/sorted_array.py#L7'>_searchsorted</a>(array,val,side)</tt>	Call np searchsorted or use a custom binary.
<tt style='background-color:#E8E8E8;'> table.SortedArray <a href=' /table/sorted_array.py#L53'>add</a>(key,row)</tt>	Add a new entry to the sorted array.
<tt style='background-color:#E8E8E8;'> table.SortedArray <a href=' /table/sorted_array.py#L74'>_get_key_slice</a>(i,begin,end)</tt>	Retrieve the ith slice of the sorted array from begin to end.
<tt style='background-color:#E8E8E8;'> table.SortedArray <a href=' /table/sorted_array.py#L84'>find_pos</a>(key,data,exact)</tt>	Return the index of the largest key in data greater than or equal to the given key data pair.
<tt style='background-color:#E8E8E8;'> table.SortedArray <a href=' /table/sorted_array.py#L127'>find</a>(key)</tt>	Find all rows matching the given key.
<tt style='background-color:#E8E8E8;'> table.SortedArray <a href=' /table/sorted_array.py#L162'>range</a>(lower,upper,bounds)</tt>	Find values in the given range.
<tt style='background-color:#E8E8E8;'> table.SortedArray <a href=' /table/sorted_array.py#L197'>remove</a>(key,data)</tt>	Remove the given entry from the sorted array.
<tt style='background-color:#E8E8E8;'> table.SortedArray <a href=' /table/sorted_array.py#L223'>shift_left</a>(row)</tt>	Decrement all row numbers greater than the input row.
<tt style='background-color:#E8E8E8;'> table.SortedArray <a href=' /table/sorted_array.py#L234'>shift_right</a>(row)</tt>	Increment all row numbers greater than or equal to the input row.
<tt style='background-color:#E8E8E8;'> table.SortedArray <a href=' /table/sorted_array.py#L245'>replace_rows</a>(row_map)</tt>	Replace all rows with the values they map to in the given dictionary.
<tt style='background-color:#E8E8E8;'> table.SortedArray <a href=' /table/sorted_array.py#L270'>items</a>()</tt>	Retrieve all array items as a list of pairs of the form [(key [row 1 row 2.
<tt style='background-color:#E8E8E8;'> table.SortedArray <a href=' /table/sorted_array.py#L286'>sort</a>()</tt>	Make row order align with key order.
<tt style='background-color:#E8E8E8;'> table.SortedArray <a href=' /table/sorted_array.py#L292'>sorted_data</a>()</tt>	Return rows in sorted order.
<tt style='background-color:#E8E8E8;'> table.SortedArray <a href=' /table/sorted_array.py#L298'>__getitem__</a>(item)</tt>	Return a sliced reference to this sorted array.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/table_helpers.py#L57'>simple_table</a>(size,cols,kinds,masked)</tt>	Return a simple table for testing.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/table_helpers.py#L122'>complex_table</a>()</tt>	Return a masked table from the io votable test set that has a wide variety.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/operations.py#L31'>_merge_col_meta</a>(out,tables,col_name_map,idx_left)</tt>	Merge column meta data for the out table.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/operations.py#L105'>_get_list_of_tables</a>(tables)</tt>	Check that tables is a table or sequence of tables returns the.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/operations.py#L126'>_get_out_class</a>(tables)</tt>	From a list of table instances get the merged output table class.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/operations.py#L574'>_join</a>(left,right,keys,join_type)</tt>	Perform a join of the left and right tables on specified keys.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/operations.py#L195'>vstack</a>(tables,join_type,metadata_conflicts)</tt>	Stack tables vertically along rows a join_type of 'exact' means that the tables must all have exactly.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/operations.py#L262'>hstack</a>(tables,join_type,uniq_col_name,table_names)</tt>	Stack tables along columns horizontally a join_type of 'exact' means that the tables must all.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/operations.py#L334'>unique</a>(input_table,keys,silent,keep)</tt>	Returns the unique rows of a table.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/np_utils.py#L28'>get_col_name_map</a>(arrays,common_names,uniq_col_name,table_names)</tt>	Find the column names mapping when merging the list of structured ndarrays arrays.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/np_utils.py#L84'>get_descrs</a>(arrays,col_name_map)</tt>	Find the dtypes descrs resulting from merging the list of arrays' dtypes using the column name mapping col_name_map.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/np_utils.py#L121'>common_dtype</a>(cols)</tt>	Use numpy to find the common dtype for a list of structured ndarray columns.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/operations.py#L715'>_vstack</a>(arrays,join_type,col_name_map)</tt>	Stack tables vertically by rows a join_type of 'exact' default means that the arrays must all.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/operations.py#L814'>_hstack</a>(arrays,join_type,uniq_col_name,table_names)</tt>	Stack tables horizontally by columns a join_type of 'exact' default means that the arrays must all.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/groups.py#L23'>_table_group_by</a>(table,keys)</tt>	Get groups for table on specified keys.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/groups.py#L103'>column_group_by</a>(column,keys)</tt>	Get groups for column on specified keys.
<tt style='background-color:#E8E8E8;'> table.ColumnGroups <a href=' /table/groups.py#L271'>filter</a>(func)</tt>	Filter groups in the column based on evaluating function func on each group sub-table.
<tt style='background-color:#E8E8E8;'> table.TableGroups <a href=' /table/groups.py#L311'>key_colnames</a>()</tt>	Return the names of columns in the parent table that were used for grouping.
<tt style='background-color:#E8E8E8;'> table.TableGroups <a href=' /table/groups.py#L330'>aggregate</a>(func)</tt>	Aggregate each group in the table into a single row by applying the reduction function func to group values in each column.
<tt style='background-color:#E8E8E8;'> table.TableGroups <a href=' /table/groups.py#L365'>filter</a>(func)</tt>	Filter groups in the table based on evaluating function func on each group sub-table.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/column.py#L60'>col_copy</a>(col,copy_indices)</tt>	This is a mixin-safe version of column copy() (with copy_data=true).
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L189'>copy</a>(order,data,copy_data)</tt>	Return a copy of the current instance.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L233'>__setstate__</a>(state)</tt>	Restore the internal state of the column/maskedcolumn for pickling purposes.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L256'>__reduce__</a>()</tt>	Return a 3-tuple for pickling a column use the super-class.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L296'>__array_wrap__</a>(out_arr,context)</tt>	__array_wrap__ is called at the end of every ufunc.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L331'>name</a>()</tt>	The name of this column.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L341'>descr</a>()</tt>	Array-interface compliant full description of the column.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L350'>iter_str_vals</a>()</tt>	Return an iterator that yields the string-formatted values of this column.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L367'>attrs_equal</a>(col)</tt>	Compare the column attributes of col to this object.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L396'>pformat</a>(max_lines,show_name,show_unit,show_dtype)</tt>	Return a list of formatted string representation of column values.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L436'>pprint</a>(max_lines,show_name,show_unit,show_dtype)</tt>	Print a formatted string representation of column values.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L471'>more</a>(max_lines,show_name,show_unit)</tt>	Interactively browse column with a paging interface.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L520'>unit</a>()</tt>	The unit associated with this column may be a string or a.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L524'>convert_unit_to</a>(new_unit,equivalencies)</tt>	Converts the values of the column in-place from the current unit to the given unit.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L559'>group_by</a>(keys)</tt>	Group this column by the specified keys this effectively splits the column into groups which correspond to.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L583'>_copy_groups</a>(out)</tt>	Copy current groups into a copy of self out.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L599'>quantity</a>()</tt>	A view of this table column as a ~astropy units quantity object with.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L610'>to</a>(unit,equivalencies)</tt>	Converts this table column to a ~astropy units quantity object with.
<tt style='background-color:#E8E8E8;'> table.BaseColumn <a href=' /table/column.py#L632'>_copy_attrs</a>(obj)</tt>	Copy key column attributes from obj to self.
<tt style='background-color:#E8E8E8;'> table.Column <a href=' /table/column.py#L817'>insert</a>(obj,values)</tt>	Insert values before the given indices in the column and return a new ~astropy.
<tt style='background-color:#E8E8E8;'> table.MaskedColumn <a href=' /table/column.py#L976'>_fix_fill_value</a>(val)</tt>	Fix a fill value if needed to work around a bug with setting the fill value of a string array in maskedarray with python 3.
<tt style='background-color:#E8E8E8;'> table.MaskedColumn <a href=' /table/column.py#L995'>fill_value</a>(val)</tt>	Set fill value both in the masked column view and in the parent table if it exists.
<tt style='background-color:#E8E8E8;'> table.MaskedColumn <a href=' /table/column.py#L1027'>filled</a>(fill_value)</tt>	Return a copy of self with masked values filled with a given value.
<tt style='background-color:#E8E8E8;'> table.MaskedColumn <a href=' /table/column.py#L1055'>insert</a>(obj,values,mask)</tt>	Insert values along the given axis before the given indices and return a new ~astropy.
<tt style='background-color:#E8E8E8;'> table.ColumnDict <a href=' /table/meta.py#L41'>items</a>()</tt>	Return items as a columnorderlist which sorts in the preferred way for column attributes.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/meta.py#L48'>_construct_odict</a>(load,node)</tt>	Construct ordereddict from !!omap in yaml safe load.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/meta.py#L102'>_repr_pairs</a>(dump,tag,sequence,flow_style)</tt>	This is the same code as baserepresenter represent_sequence(),.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/meta.py#L131'>_repr_odict</a>(dumper,data)</tt>	Represent ordereddict in yaml dump.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/meta.py#L147'>_repr_column_dict</a>(dumper,data)</tt>	Represent columndict in yaml dump.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/meta.py#L158'>_get_col_attributes</a>(col)</tt>	Extract information from a column apart from the values that is required to fully serialize the column.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/meta.py#L185'>get_yaml_from_table</a>(table)</tt>	Return lines with a yaml representation of header content from the table.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/meta.py#L207'>get_yaml_from_header</a>(header)</tt>	Return lines with a yaml representation of header content from a table.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/meta.py#L294'>get_header_from_yaml</a>(lines)</tt>	Get a header dict from input lines which should be valid yaml in the ecsv meta format.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/np_utils.py#L163'>fix_column_name</a>(val)</tt>	Fixes column names so that they are compatible with numpy on python 2.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/np_utils.py#L183'>recarray_fromrecords</a>(rec_list)</tt>	Partial replacement for ~numpy core records fromrecords which includes.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/pprint.py#L34'>_use_str_for_masked_values</a>(format_func)</tt>	Wrap format function to trap masked values.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/pprint.py#L43'>_possible_string_format_functions</a>(format_)</tt>	Iterate through possible string-derived format functions.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/pprint.py#L53'>get_auto_format_func</a>(col_name,possible_string_format_functions)</tt>	Return a wrapped auto_format_func function which is used in formatting table columns.
<tt style='background-color:#E8E8E8;'> table.TableFormatter <a href=' /table/pprint.py#L147'>_get_pprint_size</a>(max_lines,max_width)</tt>	Get the output size number of lines and character width for column and table pformat/pprint methods.
<tt style='background-color:#E8E8E8;'> table.TableFormatter <a href=' /table/pprint.py#L200'>_pformat_col</a>(col,max_lines,show_name,show_unit)</tt>	Return a list of formatted string representation of column values.
<tt style='background-color:#E8E8E8;'> table.TableFormatter <a href=' /table/pprint.py#L322'>_pformat_col_iter</a>(col,max_lines,show_name,show_unit)</tt>	Iterator which yields formatted string representation of column values.
<tt style='background-color:#E8E8E8;'> table.TableFormatter <a href=' /table/pprint.py#L460'>_pformat_table</a>(table,max_lines,max_width,show_name)</tt>	Return a list of lines for the formatted string representation of the table.
<tt style='background-color:#E8E8E8;'> table.TableFormatter <a href=' /table/pprint.py#L600'>_more_tabcol</a>(tabcol,max_lines,max_width,show_name)</tt>	Interactive "more" of a table or column.
<tt style='background-color:#E8E8E8;'> table.Node <a href=' /table/bst.py#L120'>replace</a>(child,new_child)</tt>	Replace this node's child with a new child.
<tt style='background-color:#E8E8E8;'> table.Node <a href=' /table/bst.py#L131'>remove</a>(child)</tt>	Remove the given child.
<tt style='background-color:#E8E8E8;'> table.Node <a href=' /table/bst.py#L137'>set</a>(other)</tt>	Copy the given node.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L174'>add</a>(key,data)</tt>	Add a key data pair.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L205'>find</a>(key)</tt>	Return all data values corresponding to a given key.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L222'>find_node</a>(key)</tt>	Find the node associated with the given key.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L230'>shift_left</a>(row)</tt>	Decrement all rows larger than the given row.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L237'>shift_right</a>(row)</tt>	Increment all rows greater than or equal to the given row.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L259'>traverse</a>(order)</tt>	Return nodes of the bst in the given order.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L280'>items</a>()</tt>	Return bst items in order as key data pairs.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L286'>sort</a>()</tt>	Make row order align with key order.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L296'>sorted_data</a>()</tt>	Return bst rows sorted by key values.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L332'>remove</a>(key,data)</tt>	Remove data corresponding to the given key.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L376'>is_valid</a>()</tt>	Returns whether this is a valid bst.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L389'>range</a>(lower,upper,bounds)</tt>	Return all nodes with keys in the given range.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L408'>range_nodes</a>(lower,upper,bounds)</tt>	Return nodes in the given range.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L419'>same_prefix</a>(val)</tt>	Assuming the given value has smaller length than keys return nodes whose keys have this value as a prefix.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L464'>height</a>()</tt>	Return the bst height.
<tt style='background-color:#E8E8E8;'> table.BST <a href=' /table/bst.py#L477'>replace_rows</a>(row_map)</tt>	Replace all rows with the values they map to in the given dictionary.
<tt style='background-color:#E8E8E8;'> table.FastBase <a href=' /table/bst.py#L513'>add</a>(key,val)</tt>	Add a key value pair.
<tt style='background-color:#E8E8E8;'> table.FastBase <a href=' /table/bst.py#L527'>find</a>(key)</tt>	Find rows corresponding to the given key.
<tt style='background-color:#E8E8E8;'> table.FastBase <a href=' /table/bst.py#L537'>remove</a>(key,data)</tt>	Remove data from the given key.
<tt style='background-color:#E8E8E8;'> table.FastBase <a href=' /table/bst.py#L561'>shift_left</a>(row)</tt>	Decrement rows larger than the given row.
<tt style='background-color:#E8E8E8;'> table.FastBase <a href=' /table/bst.py#L573'>shift_right</a>(row)</tt>	Increment rows greater than or equal to the given row.
<tt style='background-color:#E8E8E8;'> table.FastBase <a href=' /table/bst.py#L585'>traverse</a>()</tt>	Return all nodes in this bst.
<tt style='background-color:#E8E8E8;'> table.FastBase <a href=' /table/bst.py#L596'>items</a>()</tt>	Return a list of key data tuples.
<tt style='background-color:#E8E8E8;'> table.FastBase <a href=' /table/bst.py#L604'>sort</a>()</tt>	Make row order align with key order.
<tt style='background-color:#E8E8E8;'> table.FastBase <a href=' /table/bst.py#L618'>sorted_data</a>()</tt>	Return a list of rows in order sorted by key.
<tt style='background-color:#E8E8E8;'> table.FastBase <a href=' /table/bst.py#L626'>range</a>(lower,upper,bounds)</tt>	Return row values in the given range.
<tt style='background-color:#E8E8E8;'> table.FastBase <a href=' /table/bst.py#L642'>replace_rows</a>(row_map)</tt>	Replace rows with the values in row_map.
<tt style='background-color:#E8E8E8;'> table.Row <a href=' /table/row.py#L63'>__array__</a>(dtype)</tt>	Support converting row to np array via np array table.
<tt style='background-color:#E8E8E8;'> table.Row <a href=' /table/row.py#L92'>as_void</a>()</tt>	Returns a *read-only* copy of the row values in the form of np void or.
<tt style='background-color:#E8E8E8;'> table.Row <a href=' /table/row.py#L165'>_base_repr_</a>(html)</tt>	Display row as a single-line table but with appropriate header line.
<tt style='background-color:#E8E8E8;'> table. <a href=' /table/info.py#L15'>table_info</a>(tbl,option,out)</tt>	Write summary information about column to the out filehandle.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/quantity_helper.py#L18'>get_converter</a>(from_unit,to_unit)</tt>	Like unit _get_converter except returns none if no scaling is needed.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/imperial.py#L156'>enable</a>()</tt>	Enable imperial units so they appear in results of ~astropy.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/core.py#L40'>_flatten_units_collection</a>(items)</tt>	Given a list of sequences modules or dictionaries of units or single units return a flat set of all the units found.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/core.py#L69'>_normalize_equivalencies</a>(equivalencies)</tt>	Normalizes equivalencies ensuring each is a 4-tuple of the form :.
<tt style='background-color:#E8E8E8;'> units._UnitRegistry <a href=' /units/core.py#L158'>set_enabled_units</a>(units)</tt>	Sets the units enabled in the unit registry.
<tt style='background-color:#E8E8E8;'> units._UnitRegistry <a href=' /units/core.py#L177'>add_enabled_units</a>(units)</tt>	Adds to the set of units enabled in the unit registry.
<tt style='background-color:#E8E8E8;'> units._UnitRegistry <a href=' /units/core.py#L215'>get_units_with_physical_type</a>(unit)</tt>	Get all units in the registry with the same physical type as the given unit.
<tt style='background-color:#E8E8E8;'> units._UnitRegistry <a href=' /units/core.py#L230'>set_enabled_equivalencies</a>(equivalencies)</tt>	Sets the equivalencies enabled in the unit registry.
<tt style='background-color:#E8E8E8;'> units._UnitRegistry <a href=' /units/core.py#L249'>add_enabled_equivalencies</a>(equivalencies)</tt>	Adds to the set of equivalencies enabled in the unit registry.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/core.py#L289'>set_enabled_units</a>(units)</tt>	Sets the units enabled in the unit registry.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/core.py#L341'>add_enabled_units</a>(units)</tt>	Adds to the set of units enabled in the unit registry.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/core.py#L396'>set_enabled_equivalencies</a>(equivalencies)</tt>	Sets the equivalencies enabled in the unit registry.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/core.py#L430'>add_enabled_equivalencies</a>(equivalencies)</tt>	Adds to the equivalencies enabled in the unit registry.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L510'>_repr_latex_</a>()</tt>	Generate latex representation of unit name this is used by.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L521'>__bytes__</a>()</tt>	Return string representation for unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L527'>__unicode__</a>()</tt>	Return string representation for unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L540'>_get_physical_type_id</a>()</tt>	Returns an identifier that uniquely identifies the physical type of this unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L554'>names</a>()</tt>	Returns all of the names associated with this unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L563'>name</a>()</tt>	Returns the canonical short name associated with this unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L572'>aliases</a>()</tt>	Returns the alias long names for this unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L581'>scale</a>()</tt>	Return the scale of the unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L588'>bases</a>()</tt>	Return the bases of the unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L595'>powers</a>()</tt>	Return the powers of the unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L602'>to_string</a>(format)</tt>	Output the unit in the given format as a string.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L616'>__format__</a>(format_spec)</tt>	Try to format units using a formatter.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L623'>_normalize_equivalencies</a>(equivalencies)</tt>	Normalizes equivalencies ensuring each is a 4-tuple of the form : (from_unit to_unit forward_func backward_func).
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L802'>_is_equivalent</a>(other,equivalencies)</tt>	Returns true if this unit is equivalent to other.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L833'>_apply_equivalencies</a>(unit,other,equivalencies)</tt>	Internal function (used from _get_converter) to apply equivalence pairs.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L912'>get_converter</a>(other,equivalencies)</tt>	Return the conversion function to convert values from self to the specified unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L944'>_to</a>(other)</tt>	Returns the scale to the specified unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L977'>to</a>(other,value,equivalencies)</tt>	Return the converted values in the specified unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L1010'>in_units</a>(other,value,equivalencies)</tt>	Alias for to for backward compatibility with pynbody.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L1017'>decompose</a>(bases)</tt>	Return a unit object composed of only irreducible units.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L1160'>compose</a>(equivalencies,units,max_depth,include_prefix_units)</tt>	Return the simplest possible composite unit s that represent the given unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L1284'>to_system</a>(system)</tt>	Converts this unit into ones belonging to the given system.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L1329'>si</a>()</tt>	Returns a copy of the current unit instance in si units.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L1338'>cgs</a>()</tt>	Returns a copy of the current unit instance with cgs units.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L1346'>physical_type</a>()</tt>	Return the physical type on the unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L1361'>_get_units_with_same_physical_type</a>(equivalencies)</tt>	Return a list of registered units with the same physical type as this unit.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L1426'>find_equivalent_units</a>(equivalencies,units,include_prefix_units)</tt>	Return a list of all the units that are the same type as self.
<tt style='background-color:#E8E8E8;'> units.UnitBase <a href=' /units/core.py#L1462'>is_unity</a>()</tt>	Returns true if the unit is unscaled and dimensionless.
<tt style='background-color:#E8E8E8;'> units.NamedUnit <a href=' /units/core.py#L1546'>_generate_doc</a>()</tt>	Generate a docstring for the unit if the user didn't supply one.
<tt style='background-color:#E8E8E8;'> units.NamedUnit <a href=' /units/core.py#L1558'>get_format_name</a>(format)</tt>	Get a name for this unit that is specific to a particular format.
<tt style='background-color:#E8E8E8;'> units.NamedUnit <a href=' /units/core.py#L1578'>names</a>()</tt>	Returns all of the names associated with this unit.
<tt style='background-color:#E8E8E8;'> units.NamedUnit <a href=' /units/core.py#L1585'>name</a>()</tt>	Returns the canonical short name associated with this unit.
<tt style='background-color:#E8E8E8;'> units.NamedUnit <a href=' /units/core.py#L1592'>aliases</a>()</tt>	Returns the alias long names for this unit.
<tt style='background-color:#E8E8E8;'> units.NamedUnit <a href=' /units/core.py#L1599'>short_names</a>()</tt>	Returns all of the short names associated with this unit.
<tt style='background-color:#E8E8E8;'> units.NamedUnit <a href=' /units/core.py#L1606'>long_names</a>()</tt>	Returns all of the long names associated with this unit.
<tt style='background-color:#E8E8E8;'> units.NamedUnit <a href=' /units/core.py#L1613'>_inject</a>(namespace)</tt>	Injects the unit and all of its aliases in the given namespace dictionary.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/core.py#L1634'>_recreate_irreducible_unit</a>(cls,names,registered)</tt>	This is used to reconstruct units when passed around by multiprocessing.
<tt style='background-color:#E8E8E8;'> units.IrreducibleUnit <a href=' /units/core.py#L1674'>represents</a>()</tt>	The unit that this named unit represents.
<tt style='background-color:#E8E8E8;'> units.Unit <a href=' /units/core.py#L1954'>represents</a>()</tt>	The unit that this named unit represents.
<tt style='background-color:#E8E8E8;'> units.CompositeUnit <a href=' /units/core.py#L2041'>scale</a>()</tt>	Return the scale of the composite unit.
<tt style='background-color:#E8E8E8;'> units.CompositeUnit <a href=' /units/core.py#L2048'>bases</a>()</tt>	Return the bases of the composite unit.
<tt style='background-color:#E8E8E8;'> units.CompositeUnit <a href=' /units/core.py#L2055'>powers</a>()</tt>	Return the powers of the composite unit.
<tt style='background-color:#E8E8E8;'> units.CompositeUnit <a href=' /units/core.py#L2116'>__copy__</a>()</tt>	For compatibility with python copy module.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/core.py#L2180'>_add_prefixes</a>(u,excludes,namespace,prefixes)</tt>	Set up all of the standard metric prefixes for a unit this.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/core.py#L2238'>def_unit</a>(s,represents,doc,format)</tt>	Factory function for defining new units.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/core.py#L2309'>_condition_arg</a>(value)</tt>	Validate value is acceptable for conversion purposes.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/quantity.py#L56'>_can_have_arbitrary_unit</a>(value)</tt>	Test whether the items in value can have arbitrary units numbers whose value does not change upon a unit change i.
<tt style='background-color:#E8E8E8;'> units.QuantityIterator <a href=' /units/quantity.py#L114'>__next__</a>()</tt>	Return the next value or raise stopiteration.
<tt style='background-color:#E8E8E8;'> units.QuantityInfo <a href=' /units/quantity.py#L139'>possible_string_format_functions</a>(format_)</tt>	Iterate through possible string-derived format functions.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L645'>__quantity_subclass__</a>(unit)</tt>	Overridden by subclasses to change what kind of view is created based on the output unit of an operation.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L663'>_new_view</a>(obj,unit)</tt>	Create a quantity view of some array-like input and set the unit by default return a view of obj of the same class as self and.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L720'>_set_unit</a>(unit)</tt>	Set the unit.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L757'>to</a>(unit,equivalencies)</tt>	Returns a new ~astropy units quantity object with the specified.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L786'>value</a>()</tt>	The numerical value of this quantity.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L795'>unit</a>()</tt>	A ~astropy units unitbase object representing the unit of this.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L804'>equivalencies</a>()</tt>	A list of equivalencies that will be applied by default during unit conversions.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L813'>si</a>()</tt>	Returns a copy of the current quantity instance with si units the.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L823'>cgs</a>()</tt>	Returns a copy of the current quantity instance with cgs units the.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L833'>isscalar</a>()</tt>	True if the value of this quantity is a scalar or false if it is an array-like object.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L853'>__dir__</a>()</tt>	Quantities are able to directly convert to other units that have the same physical type.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L869'>__getattr__</a>(attr)</tt>	Quantities are able to directly convert to other units that have the same physical type.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L930'>__mul__</a>(other)</tt>	Multiplication between quantity objects and other objects.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L941'>__imul__</a>(other)</tt>	In-place multiplication between quantity objects and others.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L950'>__rmul__</a>(other)</tt>	Right multiplication between quantity objects and other objects.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L957'>__truediv__</a>(other)</tt>	Division between quantity objects and other objects.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L968'>__itruediv__</a>(other)</tt>	Inplace division between quantity objects and other objects.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L977'>__rtruediv__</a>(other)</tt>	Right division between quantity objects and other objects.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L985'>__div__</a>(other)</tt>	Division between quantity objects.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L989'>__idiv__</a>(other)</tt>	Division between quantity objects.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L993'>__rdiv__</a>(other)</tt>	Division between quantity objects.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L1012'>__pos__</a>()</tt>	Plus the quantity this is implemented in case users use +q where q is.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L1068'>__nonzero__</a>()</tt>	Quantities should always be treated as non-false there is too much potential for ambiguity otherwise.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L1139'>_repr_latex_</a>()</tt>	Generate a latex representation of the quantity and its unit.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L1182'>__format__</a>(format_spec)</tt>	Format quantities using the new-style python formatting codes as specifiers for the number.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L1202'>decompose</a>(bases)</tt>	Generates a new quantity with the units decomposed.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L1224'>_decompose</a>(allowscaledunits,bases)</tt>	Generates a new quantity with the units decomposed decomposed.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L1342'>flat</a>()</tt>	A 1-d iterator over the quantity array.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L1376'>_wrap_function</a>(function)</tt>	Wrap a numpy function returning a quantity with the proper unit parameters.
<tt style='background-color:#E8E8E8;'> units.Quantity <a href=' /units/quantity.py#L1510'>insert</a>(obj,values,axis)</tt>	Insert values along the given axis before the given indices and return a new ~astropy.
<tt style='background-color:#E8E8E8;'> units.QuantityInput <a href=' /units/decorators.py#L13'>as_decorator</a>(cls,func)</tt>	A decorator for validating the units of arguments to functions.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/equivalencies.py#L26'>dimensionless_angles</a>()</tt>	Allow angles to be equivalent to dimensionless (with 1 rad = 1 m/m = 1).
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/equivalencies.py#L36'>logarithmic</a>()</tt>	Allow logarithmic units to be converted to dimensionless fractions.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/equivalencies.py#L44'>parallax</a>()</tt>	Returns a list of equivalence pairs that handle the conversion between parallax angle and distance.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/equivalencies.py#L54'>spectral</a>()</tt>	Returns a list of equivalence pairs that handle spectral wavelength wave number frequency and energy equivalences.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/equivalencies.py#L89'>spectral_density</a>(wav,factor)</tt>	Returns a list of equivalence pairs that handle spectral density with regard to wavelength and frequency.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/equivalencies.py#L219'>doppler_radio</a>(rest)</tt>	Return the equivalency pairs for the radio convention for velocity.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/equivalencies.py#L286'>doppler_optical</a>(rest)</tt>	Return the equivalency pairs for the optical convention for velocity.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/equivalencies.py#L354'>doppler_relativistic</a>(rest)</tt>	Return the equivalency pairs for the relativistic convention for velocity.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/equivalencies.py#L429'>mass_energy</a>()</tt>	Returns a list of equivalence pairs that handle the conversion between mass and energy.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/equivalencies.py#L447'>brightness_temperature</a>(beam_area,disp)</tt>	Defines the conversion between jy/beam and "brightness temperature", :math t_b, in kelvins.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/equivalencies.py#L509'>temperature</a>()</tt>	Convert between kelvin celsius and fahrenheit here because unit and compositeunit cannot do addition or subtraction properly.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/equivalencies.py#L521'>temperature_energy</a>()</tt>	Convert between kelvin and kev ev to an equivalent amount.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/equivalencies.py#L536'>pixel_scale</a>(pixscale)</tt>	Convert between pixel distances (in units of pix) and angular units given a particular pixscale.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/equivalencies.py#L557'>plate_scale</a>(platescale)</tt>	Convert between lengths to be interpreted as lengths in the focal plane and angular units with a specified platescale.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/utils.py#L30'>_get_first_sentence</a>(s)</tt>	Get the first sentence from a string and remove any carriage returns.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/utils.py#L42'>_iter_unit_summary</a>(namespace)</tt>	Generates the unit doc represents aliases prefixes tuple used to format the unit summary docs in generate_unit_summary.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/utils.py#L84'>generate_unit_summary</a>(namespace)</tt>	Generates a summary of units from a given namespace this is used.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/utils.py#L155'>validate_power</a>(p,support_tuples)</tt>	Convert a power to a floating point value an integer or a fraction.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/utils.py#L209'>resolve_fractions</a>(a,b)</tt>	If either input is a fraction convert the other to a fraction.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/physical.py#L28'>def_physical_type</a>(unit,name)</tt>	Adds a new physical unit mapping.
<tt style='background-color:#E8E8E8;'> units. <a href=' /units/physical.py#L48'>get_physical_type</a>(unit)</tt>	Given a unit returns the name of the physical quantity it represents.
<tt style='background-color:#E8E8E8;'> units.function. <a href=' /units/function/magnitude_zero_points.py#L57'>enable</a>()</tt>	Enable magnitude zero point units so they appear in results of ~astropy.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L57'>_default_function_unit</a>()</tt>	Default function unit corresponding to the function.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L67'>_quantity_class</a>()</tt>	Function quantity class corresponding to this function unit.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L75'>from_physical</a>(x)</tt>	Transformation from value in physical to value in function units.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L83'>to_physical</a>(x)</tt>	Transformation from value in function to value in physical units.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L122'>_copy</a>(physical_unit)</tt>	Copy oneself possibly with a different physical unit.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L136'>equivalencies</a>()</tt>	List of equivalencies between function and physical units.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L146'>decompose</a>(bases)</tt>	Copy the current unit with the physical unit decomposed.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L153'>si</a>()</tt>	Copy the current function unit with the physical unit in si.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L158'>cgs</a>()</tt>	Copy the current function unit with the physical unit in cgs.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L163'>_get_physical_type_id</a>()</tt>	Get physical type corresponding to physical unit.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L167'>physical_type</a>()</tt>	Return the physical type of the physical unit (e g 'length').
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L172'>is_equivalent</a>(other,equivalencies)</tt>	Returns true if this unit is equivalent to other.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L205'>to</a>(other,value,equivalencies)</tt>	Return the converted values in the specified unit.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L336'>to_string</a>(format)</tt>	Output the unit in the given format as a string.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L364'>__str__</a>()</tt>	Return string representation for unit.
<tt style='background-color:#E8E8E8;'> units.function.FunctionUnitBase <a href=' /units/function/core.py#L384'>_repr_latex_</a>()</tt>	Generate latex representation of unit name this is used by.
<tt style='background-color:#E8E8E8;'> units.function.FunctionQuantity <a href=' /units/function/core.py#L501'>physical</a>()</tt>	The physical quantity corresponding the function one.
<tt style='background-color:#E8E8E8;'> units.function.FunctionQuantity <a href=' /units/function/core.py#L506'>_function_view</a>()</tt>	View as quantity with function unit dropping the physical unit.
<tt style='background-color:#E8E8E8;'> units.function.FunctionQuantity <a href=' /units/function/core.py#L515'>si</a>()</tt>	Return a copy with the physical unit in si units.
<tt style='background-color:#E8E8E8;'> units.function.FunctionQuantity <a href=' /units/function/core.py#L520'>cgs</a>()</tt>	Return a copy with the physical unit in cgs units.
<tt style='background-color:#E8E8E8;'> units.function.FunctionQuantity <a href=' /units/function/core.py#L525'>decompose</a>(bases)</tt>	Generate a new functionquantity with the physical unit decomposed.
<tt style='background-color:#E8E8E8;'> units.function.FunctionQuantity <a href=' /units/function/core.py#L533'>__array_prepare__</a>(obj,context)</tt>	Check that the ufunc can deal with a functionquantity.
<tt style='background-color:#E8E8E8;'> units.function.FunctionQuantity <a href=' /units/function/core.py#L596'>_comparison</a>(other,comparison_func)</tt>	Do a comparison between self and other raising unitserror when other cannot be converted to self because it has different physical.
<tt style='background-color:#E8E8E8;'> units.function.LogUnit <a href=' /units/function/logarithmic.py#L43'>from_physical</a>(x)</tt>	Transformation from value in physical to value in logarithmic units.
<tt style='background-color:#E8E8E8;'> units.function.LogUnit <a href=' /units/function/logarithmic.py#L48'>to_physical</a>(x)</tt>	Transformation from value in logarithmic to value in physical units.
<tt style='background-color:#E8E8E8;'> units.function.LogUnit <a href=' /units/function/logarithmic.py#L56'>_add_and_adjust_physical_unit</a>(other,sign_self,sign_other)</tt>	Add/subtract logunit to/from another unit and adjust physical unit.
<tt style='background-color:#E8E8E8;'> units.format.Generic <a href=' /units/format/generic.py#L166'>_make_parser</a>(cls)</tt>	The grammar here is based on the description in the fits standard.
<tt style='background-color:#E8E8E8;'> units.format.Latex <a href=' /units/format/latex.py#L90'>format_exponential_notation</a>(cls,val)</tt>	Formats a value in exponential notation for latex.
<tt style='background-color:#E8E8E8;'> units.format.CDS <a href=' /units/format/cds.py#L134'>_make_parser</a>(cls)</tt>	The grammar here is based on the description in the standards for astronomical catalogues 2.
<tt style='background-color:#E8E8E8;'> units.format.Base <a href=' /units/format/base.py#L39'>parse</a>(cls,s)</tt>	Convert a string to a unit object.
<tt style='background-color:#E8E8E8;'> units.format.Base <a href=' /units/format/base.py#L48'>to_string</a>(cls,u)</tt>	Convert a unit object to a string.
<tt style='background-color:#E8E8E8;'> units.format. <a href=' /units/format/__init__.py#L33'>get_format</a>(format)</tt>	Get a formatter by name.
<tt style='background-color:#E8E8E8;'> units.format.OGIP <a href=' /units/format/ogip.py#L172'>_make_parser</a>(cls)</tt>	The grammar here is based on the description in the specification of physical units within ogip fits files.
<tt style='background-color:#E8E8E8;'> units.format. <a href=' /units/format/utils.py#L18'>get_grouped_by_powers</a>(bases,powers)</tt>	Groups the powers and bases in the given ~astropy.
<tt style='background-color:#E8E8E8;'> units.format. <a href=' /units/format/utils.py#L49'>split_mantissa_exponent</a>(v)</tt>	Given a number split it into its mantissa and base 10 exponent parts each as strings.
<tt style='background-color:#E8E8E8;'> units.format. <a href=' /units/format/utils.py#L82'>decompose_to_known_units</a>(unit,func)</tt>	Partially decomposes a unit so it is only composed of units that are "known" to a given format.
<tt style='background-color:#E8E8E8;'> units.format. <a href=' /units/format/utils.py#L117'>format_power</a>(power)</tt>	Converts a value for a power (which may be floating point or a fractions.
<tt style='background-color:#E8E8E8;'> units.format. <a href=' /units/format/utils.py#L156'>did_you_mean_units</a>(s,all_units,deprecated_units,format_decomposed)</tt>	A wrapper around astropy utils misc did_you_mean that deals with.
<tt style='background-color:#E8E8E8;'> units.format. <a href=' /units/format/utils.py#L195'>unit_deprecation_warning</a>(s,unit,standard_name,format_decomposed)</tt>	Raises a unitswarning about a deprecated unit in a given format.
<tt style='background-color:#E8E8E8;'> extern. <a href=' /extern/six.py#L19'>_find_module</a>(name,path)</tt>	Alternative to imp find_module that can also search in subpackages.
<tt style='background-color:#E8E8E8;'> extern.configobj.InterpolationEngine <a href=' /extern/configobj/configobj.py#L358'>_fetch</a>(key)</tt>	Helper function to fetch values from owning section.
<tt style='background-color:#E8E8E8;'> extern.configobj.InterpolationEngine <a href=' /extern/configobj/configobj.py#L392'>_parse_match</a>(match)</tt>	Implementation-dependent helper function.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L488'>__init__</a>(parent,depth,main,indict)</tt>	* parent is the section above.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L554'>__getitem__</a>(key)</tt>	Fetch the item and do string interpolation.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L571'>__setitem__</a>(key,value,unrepr)</tt>	Correctly set a value.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L630'>__delitem__</a>(key)</tt>	Remove items from the sequence when deleting.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L641'>get</a>(key,default)</tt>	A version of get that doesn't bypass string interpolation.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L649'>update</a>(indict)</tt>	A version of update that uses our __setitem__.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L657'>pop</a>(key,default)</tt>	'd pop(k[,d]) -> v remove specified key and return the corresponding value.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L673'>popitem</a>()</tt>	Pops the first key val.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L684'>clear</a>()</tt>	A version of clear that also affects scalars/sections also clears comments and configspec.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L702'>setdefault</a>(key,default)</tt>	A version of setdefault that sets sequence if appropriate.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L711'>items</a>()</tt>	D items() -> list of d's key value pairs as 2-tuples.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L716'>keys</a>()</tt>	D keys() -> list of d's keys.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L721'>values</a>()</tt>	D values() -> list of d's values.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L726'>iteritems</a>()</tt>	D iteritems() -> an iterator over the key value items of d.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L731'>iterkeys</a>()</tt>	D iterkeys() -> an iterator over the keys of d.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L738'>itervalues</a>()</tt>	D itervalues() -> an iterator over the values of d.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L743'>__repr__</a>()</tt>	X __repr__() <==> repr x.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L759'>dict</a>()</tt>	Return a deepcopy of self as a dictionary.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L787'>merge</a>(indict)</tt>	A recursive update - useful for merging config files.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L814'>rename</a>(oldkey,newkey)</tt>	Change a keyname to another without changing position in sequence.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L844'>walk</a>(function,raise_errors,call_on_sections)</tt>	Walk every member and call a function on the keyword and value.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L929'>as_bool</a>(key)</tt>	Accepts a key as input the corresponding value must be a string or.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L973'>as_int</a>(key)</tt>	A convenience method which coerces the specified value to an integer.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L996'>as_float</a>(key)</tt>	A convenience method which coerces the specified value to a float.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L1018'>as_list</a>(key)</tt>	A convenience method which fetches the specified value guaranteeing that it is a list.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L1040'>restore_default</a>(key)</tt>	Restore and return default value for the specified key.
<tt style='background-color:#E8E8E8;'> extern.configobj.Section <a href=' /extern/configobj/configobj.py#L1056'>restore_defaults</a>()</tt>	Recursively restore default values to all members that have them.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1176'>__init__</a>(infile,options,configspec,encoding)</tt>	Parse a config file or create a config file object.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1373'>_handle_bom</a>(infile)</tt>	Handle any bom and decode if necessary.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1490'>_a_to_u</a>(aString)</tt>	Decode ascii strings to unicode if a self encoding is specified.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1498'>_decode</a>(infile,encoding)</tt>	Decode infile to unicode using the specified encoding.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1523'>_decode_element</a>(line)</tt>	Decode element to unicode if necessary.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1532'>_str</a>(value)</tt>	Used by stringify within validate to turn non-string values into strings.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1545'>_parse</a>(infile)</tt>	Actually parse the config file.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1712'>_match_depth</a>(sect,depth)</tt>	Given a section and a depth level walk back through the sections parents to see if the depth level matches a previous section.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1731'>_handle_error</a>(text,ErrorClass,infile,cur_index)</tt>	Handle an error according to the error settings.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1750'>_unquote</a>(value)</tt>	Return an unquoted version of a value.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1760'>_quote</a>(value,multiline)</tt>	Return a safely quoted version of a value.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1851'>_handle_value</a>(value)</tt>	Given a value string unquote remove comment handle lists.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1900'>_multiline</a>(value,infile,cur_index,maxline)</tt>	Extract the value where we are in a multiline situation.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1935'>_handle_configspec</a>(configspec)</tt>	Parse the configspec.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1956'>_set_configspec</a>(section,copy)</tt>	Called by validate handles setting the configspec on subsections.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1984'>_write_line</a>(indent_string,entry,this_entry,comment)</tt>	Write an individual line for the write method.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L1998'>_write_marker</a>(indent_string,depth,entry,comment)</tt>	Write a section marker line.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L2007'>_handle_comment</a>(comment)</tt>	Deal with a comment.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L2019'>write</a>(outfile,section)</tt>	Write the current configobj as a file teknico fixme use stringio instead of real files.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L2133'>validate</a>(validator,preserve_errors,copy,section)</tt>	Test the configobj against a configspec.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L2340'>reset</a>()</tt>	Clear configobj instance and restore to 'freshly created' state.
<tt style='background-color:#E8E8E8;'> extern.configobj.ConfigObj <a href=' /extern/configobj/configobj.py#L2351'>reload</a>()</tt>	Reload a configobj from file.
<tt style='background-color:#E8E8E8;'> extern.configobj.SimpleVal <a href=' /extern/configobj/configobj.py#L2392'>check</a>(check,member,missing)</tt>	A dummy check method always returns the value unchanged.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/configobj.py#L2399'>flatten_errors</a>(cfg,res,levels,results)</tt>	An example function that will turn a nested dictionary of results (as returned by configobj.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/configobj.py#L2459'>get_extra_values</a>(conf,_prepend)</tt>	Find all the values and sections not in the configspec from a validated configobj.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L275'>dottedQuadToNum</a>(ip)</tt>	Convert decimal dotted quad string to long integer >>> int(dottedquadtonum('1 ')).
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L305'>numToDottedQuad</a>(num)</tt>	Convert int or long int to dotted quad string >>> numtodottedquad(long -1.
<tt style='background-color:#E8E8E8;'> extern.configobj.VdtUnknownCheckError <a href=' /extern/configobj/validate.py#L378'>__init__</a>(value)</tt>	>>> raise vdtunknowncheckerror('yoda') traceback most recent call last :.
<tt style='background-color:#E8E8E8;'> extern.configobj.VdtParamError <a href=' /extern/configobj/validate.py#L390'>__init__</a>(name,value)</tt>	>>> raise vdtparamerror('yoda', 'jedi') traceback most recent call last :.
<tt style='background-color:#E8E8E8;'> extern.configobj.VdtTypeError <a href=' /extern/configobj/validate.py#L402'>__init__</a>(value)</tt>	>>> raise vdttypeerror('jedi') traceback most recent call last :.
<tt style='background-color:#E8E8E8;'> extern.configobj.VdtValueError <a href=' /extern/configobj/validate.py#L414'>__init__</a>(value)</tt>	>>> raise vdtvalueerror('jedi') traceback most recent call last :.
<tt style='background-color:#E8E8E8;'> extern.configobj.VdtValueTooSmallError <a href=' /extern/configobj/validate.py#L426'>__init__</a>(value)</tt>	>>> raise vdtvaluetoosmallerror('0') traceback most recent call last :.
<tt style='background-color:#E8E8E8;'> extern.configobj.VdtValueTooBigError <a href=' /extern/configobj/validate.py#L438'>__init__</a>(value)</tt>	>>> raise vdtvaluetoobigerror('1') traceback most recent call last :.
<tt style='background-color:#E8E8E8;'> extern.configobj.VdtValueTooShortError <a href=' /extern/configobj/validate.py#L450'>__init__</a>(value)</tt>	>>> raise vdtvaluetooshorterror('jed') traceback most recent call last :.
<tt style='background-color:#E8E8E8;'> extern.configobj.VdtValueTooLongError <a href=' /extern/configobj/validate.py#L464'>__init__</a>(value)</tt>	>>> raise vdtvaluetoolongerror('jedie') traceback most recent call last :.
<tt style='background-color:#E8E8E8;'> extern.configobj.Validator <a href=' /extern/configobj/validate.py#L564'>__init__</a>(functions)</tt>	>>> vtri = validator().
<tt style='background-color:#E8E8E8;'> extern.configobj.Validator <a href=' /extern/configobj/validate.py#L594'>check</a>(check,value,missing)</tt>	Usage check check value arguments.
<tt style='background-color:#E8E8E8;'> extern.configobj.Validator <a href=' /extern/configobj/validate.py#L701'>_unquote</a>(val)</tt>	Unquote a value if necessary.
<tt style='background-color:#E8E8E8;'> extern.configobj.Validator <a href=' /extern/configobj/validate.py#L708'>_list_handle</a>(listmatch)</tt>	Take apart a keyword=list('val 'val') type string.
<tt style='background-color:#E8E8E8;'> extern.configobj.Validator <a href=' /extern/configobj/validate.py#L718'>_pass</a>(value)</tt>	Dummy check that always passes >>> vtor.
<tt style='background-color:#E8E8E8;'> extern.configobj.Validator <a href=' /extern/configobj/validate.py#L730'>get_default_value</a>(check)</tt>	Given a check return the default value for the check converted to the right type.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L747'>_is_num_param</a>(names,values,to_float)</tt>	Return numbers from inputs or raise vdtparamerror.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L784'>is_integer</a>(value,min,max)</tt>	A check that tests that a given value is an integer int or long and optionally between bounds.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L840'>is_float</a>(value,min,max)</tt>	A check that tests that a given value is a float an integer will be accepted and optionally - that it is between bounds.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L898'>is_boolean</a>(value)</tt>	Check if the value represents a boolean.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L958'>is_ip_addr</a>(value)</tt>	Check that the supplied value is an internet protocol address v 4.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L995'>is_list</a>(value,min,max)</tt>	Check that the value is a list of values.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L1040'>is_tuple</a>(value,min,max)</tt>	Check that the value is a tuple of values.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L1074'>is_string</a>(value,min,max)</tt>	Check that the supplied value is a string.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L1110'>is_int_list</a>(value,min,max)</tt>	Check that the value is a list of integers.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L1133'>is_bool_list</a>(value,min,max)</tt>	Check that the value is a list of booleans.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L1158'>is_float_list</a>(value,min,max)</tt>	Check that the value is a list of floats.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L1181'>is_string_list</a>(value,min,max)</tt>	Check that the value is a list of strings.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L1207'>is_ip_addr_list</a>(value,min,max)</tt>	Check that the value is a list of ip addresses.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L1228'>force_list</a>(value,min,max)</tt>	Check that a value is a list coercing strings into a list with one member.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L1260'>is_mixed_list</a>(value)</tt>	Check that the value is a list.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L1317'>is_option</a>(value)</tt>	This check matches the value to any of a set of options.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L1337'>_test</a>(value)</tt>	A function that exists for test purposes.
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L1421'>_test2</a>()</tt>	>>> >>> v = validator().
<tt style='background-color:#E8E8E8;'> extern.configobj. <a href=' /extern/configobj/validate.py#L1431'>_test3</a>()</tt>	>>> vtor check('string(default="")', '', missing=true).
<tt style='background-color:#E8E8E8;'> extern.ply. <a href=' /extern/ply/cpp.py#L45'>CPP_INTEGER</a>(t)</tt>	(((( 0x | 0x )[0-9a-fa-f]+)|(\d+))([uu][ll]|[ll][uu]|[uu]|[ll])?).
<tt style='background-color:#E8E8E8;'> extern.ply. <a href=' /extern/ply/cpp.py#L61'>t_CPP_CHAR</a>(t)</tt>	L ?\'([^\\\n]|(\\( |\n)))*?\'.
<tt style='background-color:#E8E8E8;'> extern.bundled. <a href=' /extern/bundled/six.py#L75'>_add_doc</a>(func,doc)</tt>	Add documentation to a function.
<tt style='background-color:#E8E8E8;'> extern.bundled. <a href=' /extern/bundled/six.py#L80'>_import_module</a>(name)</tt>	Import module returning the module after the last dot.
<tt style='background-color:#E8E8E8;'> extern.bundled._SixMetaPathImporter <a href=' /extern/bundled/six.py#L209'>is_package</a>(fullname)</tt>	Return true if the named module is a package.
<tt style='background-color:#E8E8E8;'> extern.bundled. <a href=' /extern/bundled/six.py#L486'>add_move</a>(move)</tt>	Add an item to six moves.
<tt style='background-color:#E8E8E8;'> extern.bundled. <a href=' /extern/bundled/six.py#L491'>remove_move</a>(name)</tt>	Remove item from six moves.
<tt style='background-color:#E8E8E8;'> extern.bundled. <a href=' /extern/bundled/six.py#L800'>with_metaclass</a>(meta)</tt>	Create a base class with a metaclass.
<tt style='background-color:#E8E8E8;'> extern.bundled. <a href=' /extern/bundled/six.py#L812'>add_metaclass</a>(metaclass)</tt>	Class decorator for creating a class with a metaclass.
<tt style='background-color:#E8E8E8;'> extern.bundled. <a href=' /extern/bundled/six.py#L828'>python_2_unicode_compatible</a>(klass)</tt>	A decorator that defines __unicode__ and __str__ methods under python 2.
<tt style='background-color:#E8E8E8;'> analytic_functions. <a href=' /analytic_functions/blackbody.py#L35'>blackbody_nu</a>(in_x,temperature)</tt>	Calculate blackbody flux per steradian :math b_{\nu} t.
<tt style='background-color:#E8E8E8;'> analytic_functions. <a href=' /analytic_functions/blackbody.py#L106'>blackbody_lambda</a>(in_x,temperature)</tt>	Like :func blackbody_nu but for :math b_{\lambda} t.
<tt style='background-color:#E8E8E8;'> _erfa.Return <a href=' /_erfa/erfa_generator.py#L248'>nd_dtype</a>()</tt>	This if the return type has a multi-dimensional output like.
<tt style='background-color:#E8E8E8;'> _erfa.Function <a href=' /_erfa/erfa_generator.py#L317'>args_by_inout</a>(inout_filter,prop,join)</tt>	Gives all of the arguments and/or returned values depending on whether they are inputs outputs etc.
<tt style='background-color:#E8E8E8;'> modeling.Mapping <a href=' /modeling/mappings.py#L60'>inputs</a>()</tt>	The name s of the input variable s on which a model is evaluated.
<tt style='background-color:#E8E8E8;'> modeling.Mapping <a href=' /modeling/mappings.py#L68'>outputs</a>()</tt>	The name s of the output s of the model.
<tt style='background-color:#E8E8E8;'> modeling.Mapping <a href=' /modeling/mappings.py#L74'>mapping</a>()</tt>	Integers representing indices of the inputs.
<tt style='background-color:#E8E8E8;'> modeling.Mapping <a href=' /modeling/mappings.py#L100'>inverse</a>()</tt>	A mapping representing the inverse of the current mapping.
<tt style='background-color:#E8E8E8;'> modeling.Identity <a href=' /modeling/mappings.py#L168'>inverse</a>()</tt>	The inverse transformation.
<tt style='background-color:#E8E8E8;'> modeling.PolynomialBase <a href=' /modeling/polynomial.py#L44'>param_names</a>()</tt>	Coefficient names generated based on the model's polynomial degree and number of dimensions.
<tt style='background-color:#E8E8E8;'> modeling.PolynomialModel <a href=' /modeling/polynomial.py#L108'>degree</a>()</tt>	Degree of polynomial.
<tt style='background-color:#E8E8E8;'> modeling.PolynomialModel <a href=' /modeling/polynomial.py#L114'>get_num_coeff</a>(ndim)</tt>	Return the number of coefficients in one parameter set.
<tt style='background-color:#E8E8E8;'> modeling.OrthoPolynomialBase <a href=' /modeling/polynomial.py#L212'>get_num_coeff</a>()</tt>	Determine how many coefficients are needed.
<tt style='background-color:#E8E8E8;'> modeling.OrthoPolynomialBase <a href=' /modeling/polynomial.py#L294'>_fcache</a>(x,y)</tt>	To be implemented by subclasses.
<tt style='background-color:#E8E8E8;'> modeling.Chebyshev1D <a href=' /modeling/polynomial.py#L347'>fit_deriv</a>(x)</tt>	Computes the vandermonde matrix.
<tt style='background-color:#E8E8E8;'> modeling.Chebyshev1D <a href=' /modeling/polynomial.py#L387'>clenshaw</a>(x,coeffs)</tt>	Evaluates the polynomial using clenshaw's algorithm.
<tt style='background-color:#E8E8E8;'> modeling.Hermite1D <a href=' /modeling/polynomial.py#L434'>fit_deriv</a>(x)</tt>	Computes the vandermonde matrix.
<tt style='background-color:#E8E8E8;'> modeling.Hermite2D <a href=' /modeling/polynomial.py#L530'>_fcache</a>(x,y)</tt>	Calculate the individual hermite functions once and store them in a dictionary to be reused.
<tt style='background-color:#E8E8E8;'> modeling.Hermite2D <a href=' /modeling/polynomial.py#L549'>fit_deriv</a>(x,y)</tt>	Derivatives with respect to the coefficients.
<tt style='background-color:#E8E8E8;'> modeling.Hermite2D <a href=' /modeling/polynomial.py#L590'>_hermderiv1d</a>(x,deg)</tt>	Derivative of 1d hermite series.
<tt style='background-color:#E8E8E8;'> modeling.Legendre1D <a href=' /modeling/polynomial.py#L645'>fit_deriv</a>(x)</tt>	Computes the vandermonde matrix.
<tt style='background-color:#E8E8E8;'> modeling.Polynomial1D <a href=' /modeling/polynomial.py#L730'>fit_deriv</a>(x)</tt>	Computes the vandermonde matrix.
<tt style='background-color:#E8E8E8;'> modeling.Polynomial2D <a href=' /modeling/polynomial.py#L835'>fit_deriv</a>(x,y)</tt>	Computes the vandermonde matrix.
<tt style='background-color:#E8E8E8;'> modeling.Polynomial2D <a href=' /modeling/polynomial.py#L887'>multivariate_horner</a>(x,y,coeffs)</tt>	Multivariate horner's scheme.
<tt style='background-color:#E8E8E8;'> modeling.Chebyshev2D <a href=' /modeling/polynomial.py#L948'>_fcache</a>(x,y)</tt>	Calculate the individual chebyshev functions once and store them in a dictionary to be reused.
<tt style='background-color:#E8E8E8;'> modeling.Chebyshev2D <a href=' /modeling/polynomial.py#L967'>fit_deriv</a>(x,y)</tt>	Derivatives with respect to the coefficients.
<tt style='background-color:#E8E8E8;'> modeling.Chebyshev2D <a href=' /modeling/polynomial.py#L1008'>_chebderiv1d</a>(x,deg)</tt>	Derivative of 1d chebyshev series.
<tt style='background-color:#E8E8E8;'> modeling.Legendre2D <a href=' /modeling/polynomial.py#L1060'>_fcache</a>(x,y)</tt>	Calculate the individual legendre functions once and store them in a dictionary to be reused.
<tt style='background-color:#E8E8E8;'> modeling.Legendre2D <a href=' /modeling/polynomial.py#L1081'>fit_deriv</a>(x,y)</tt>	Derivatives with respect to the coefficients.
<tt style='background-color:#E8E8E8;'> modeling.Legendre2D <a href=' /modeling/polynomial.py#L1117'>_legendderiv1d</a>(x,deg)</tt>	Derivative of 1d legendre polynomial.
<tt style='background-color:#E8E8E8;'> modeling._SIP1D <a href=' /modeling/polynomial.py#L1165'>get_num_coeff</a>(ndim)</tt>	Return the number of coefficients in one param set.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/core.py#L61'>_model_oper</a>(oper)</tt>	Returns a function that evaluates a given python arithmetic operator between two models.
<tt style='background-color:#E8E8E8;'> modeling._ModelMeta <a href=' /modeling/core.py#L138'>__repr__</a>(cls)</tt>	Custom repr for model subclasses.
<tt style='background-color:#E8E8E8;'> modeling._ModelMeta <a href=' /modeling/core.py#L145'>_repr_pretty_</a>(cls,p,cycle)</tt>	Repr for ipython's pretty printer.
<tt style='background-color:#E8E8E8;'> modeling._ModelMeta <a href=' /modeling/core.py#L175'>name</a>(cls)</tt>	The name of this model class--equivalent to cls __name__.
<tt style='background-color:#E8E8E8;'> modeling._ModelMeta <a href=' /modeling/core.py#L194'>_is_concrete</a>(cls)</tt>	A class-level property that determines whether the class is a concrete implementation of a model--i.
<tt style='background-color:#E8E8E8;'> modeling._ModelMeta <a href=' /modeling/core.py#L203'>rename</a>(cls,name)</tt>	Creates a copy of this model class with a new name.
<tt style='background-color:#E8E8E8;'> modeling._ModelMeta <a href=' /modeling/core.py#L269'>_create_bounding_box_property</a>(cls,members)</tt>	Takes any bounding_box defined on a concrete model subclass either as a fixed tuple or a property or method and wraps it in the generic.
<tt style='background-color:#E8E8E8;'> modeling._ModelMeta <a href=' /modeling/core.py#L313'>_create_bounding_box_subclass</a>(cls,func,sig)</tt>	For models that take optional arguments for defining their bounding box we create a subclass of _boundingbox with a __call__ method.
<tt style='background-color:#E8E8E8;'> modeling._ModelMeta <a href=' /modeling/core.py#L428'>_format_cls_repr</a>(cls,keywords)</tt>	Internal implementation of __repr__.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L678'>__call__</a>()</tt>	Evaluate this model using the given input s and the parameter values that were specified when the model was instantiated.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L713'>name</a>()</tt>	User-provided name for this model instance.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L713'>name</a>(val)</tt>	Assign a new name to this model.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L719'>n_inputs</a>()</tt>	The number of inputs to this model.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L729'>n_outputs</a>()</tt>	The number of outputs from this model.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L738'>model_set_axis</a>()</tt>	The index of the model set axis--that is the axis of a parameter array that pertains to which model a parameter value pertains to--as.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L752'>param_sets</a>()</tt>	Return parameters as a pset.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L785'>parameters</a>()</tt>	A flattened array of all parameter values in all parameter sets.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L785'>parameters</a>(value)</tt>	Assigning to this attribute updates the parameters array rather than replacing it.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L806'>fixed</a>()</tt>	A dict mapping parameter names to their fixed constraint.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L814'>tied</a>()</tt>	A dict mapping parameter names to their tied constraint.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L822'>bounds</a>()</tt>	A dict mapping parameter names to their upper and lower bounds as min max tuples.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L831'>eqcons</a>()</tt>	List of parameter equality constraints.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L837'>ineqcons</a>()</tt>	List of parameter inequality constraints.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L897'>inverse</a>()</tt>	Resets the model's inverse to its default if one exists otherwise the model will have no inverse.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L906'>has_user_inverse</a>()</tt>	A flag indicating whether or not a custom inverse model has been assigned to this model by a user via assignment to model.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1029'>bounding_box</a>()</tt>	A tuple of length n_inputs defining the bounding box limits or none for no bounding box.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1029'>bounding_box</a>(bounding_box)</tt>	Assigns the bounding box limits.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1033'>has_user_bounding_box</a>()</tt>	A flag indicating whether or not a custom bounding_box has been assigned to this model by a user via assignment to.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1045'>evaluate</a>()</tt>	Evaluate the model on some input variables.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1049'>render</a>(out,coords)</tt>	Evaluate a model at fixed positions respecting the bounding_box.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1164'>prepare_inputs</a>()</tt>	This method is used in ~astropy modeling model __call__ to ensure.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1204'>copy</a>()</tt>	Return a copy of this model.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1214'>rename</a>(name)</tt>	Return a copy of this model with a new name.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1223'>n_submodels</a>()</tt>	Return the number of components in a single model which is obviously 1.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1232'>_from_existing</a>(existing,param_names)</tt>	Creates a new instance of cls that shares its underlying parameter values with an existing model instance given by existing.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1281'>_initialize_constraints</a>(kwargs)</tt>	Pop parameter constraint values off the keyword arguments passed to model.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1311'>_initialize_parameters</a>(args,kwargs)</tt>	Initialize the _parameters array that stores raw parameter values for all parameter sets for use with vectorized fitting algorithms on.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1493'>_check_param_broadcast</a>(params,max_ndim)</tt>	This subroutine checks that all parameter arrays can be broadcast against each other and determines the shapes parameters must have in.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1562'>_param_sets</a>(raw)</tt>	Implementation of the model param_sets property.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1612'>_format_repr</a>(args,kwargs,defaults)</tt>	Internal implementation of __repr__.
<tt style='background-color:#E8E8E8;'> modeling.Model <a href=' /modeling/core.py#L1643'>_format_str</a>(keywords)</tt>	Internal implementation of __str__.
<tt style='background-color:#E8E8E8;'> modeling._CompoundModelMeta <a href=' /modeling/core.py#L1841'>__dir__</a>(cls)</tt>	Returns a list of attributes defined on a compound model including all of its parameters.
<tt style='background-color:#E8E8E8;'> modeling._CompoundModelMeta <a href=' /modeling/core.py#L1944'>_from_operator</a>(mcls,operator,left,right)</tt>	Given a python operator (represented by a string such as '+' or '*', and two model classes or instances return a new compound.
<tt style='background-color:#E8E8E8;'> modeling._CompoundModelMeta <a href=' /modeling/core.py#L2088'>_make_user_inverse</a>(mcls,operator,left,right)</tt>	Generates an inverse model for this _compoundmodel when either model in the operation has a *custom inverse* that was manually.
<tt style='background-color:#E8E8E8;'> modeling._CompoundModelMeta <a href=' /modeling/core.py#L2143'>_init_param_descriptors</a>(cls)</tt>	This routine sets up the names for all the parameters on a compound model including figuring out unique names for those parameters and.
<tt style='background-color:#E8E8E8;'> modeling._CompoundModelMeta <a href=' /modeling/core.py#L2191'>_init_param_names</a>(cls)</tt>	This subroutine is solely for setting up the param_names attribute itself.
<tt style='background-color:#E8E8E8;'> modeling._CompoundModelMeta <a href=' /modeling/core.py#L2254'>_normalize_index</a>(cls,index)</tt>	Converts an index given to __getitem__ to either an integer or a slice with integer start and stop values.
<tt style='background-color:#E8E8E8;'> modeling._CompoundModelMeta <a href=' /modeling/core.py#L2324'>_get_slice</a>(cls,start,stop)</tt>	Return a new model build from a sub-expression of the expression represented by this model.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/core.py#L2503'>custom_model</a>()</tt>	Create a model from a user defined function the inputs and parameters of.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/core.py#L2586'>_custom_model_wrapper</a>(func,fit_deriv)</tt>	Internal implementation custom_model.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/core.py#L2647'>render_model</a>(model,arr,coords)</tt>	Evaluates a model on an input array evaluation is limited to.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/core.py#L2897'>_validate_input_shapes</a>(inputs,argnames,n_models,model_set_axis)</tt>	Perform basic validation of model inputs--that they are mutually broadcastable and that they have the minimum dimensions for the given.
<tt style='background-color:#E8E8E8;'> modeling.Fitter <a href=' /modeling/fitting.py#L125'>objective_function</a>(fps)</tt>	Function to minimize.
<tt style='background-color:#E8E8E8;'> modeling.Fitter <a href=' /modeling/fitting.py#L151'>__call__</a>()</tt>	This method performs the actual fitting and modifies the parameter list of a model.
<tt style='background-color:#E8E8E8;'> modeling.LinearLSQFitter <a href=' /modeling/fitting.py#L197'>_map_domain_window</a>(model,x,y)</tt>	Maps domain into window for a polynomial model which has these attributes.
<tt style='background-color:#E8E8E8;'> modeling.LinearLSQFitter <a href=' /modeling/fitting.py#L223'>__call__</a>(model,x,y,z)</tt>	Fit data to this model.
<tt style='background-color:#E8E8E8;'> modeling.LevMarLSQFitter <a href=' /modeling/fitting.py#L486'>objective_function</a>(fps)</tt>	Function to minimize.
<tt style='background-color:#E8E8E8;'> modeling.LevMarLSQFitter <a href=' /modeling/fitting.py#L507'>__call__</a>(model,x,y,z)</tt>	Fit data to this model.
<tt style='background-color:#E8E8E8;'> modeling.LevMarLSQFitter <a href=' /modeling/fitting.py#L580'>_wrap_deriv</a>(params,model,weights,x)</tt>	Wraps the method calculating the jacobian of the function to account for model constraints.
<tt style='background-color:#E8E8E8;'> modeling.SLSQPLSQFitter <a href=' /modeling/fitting.py#L645'>__call__</a>(model,x,y,z)</tt>	Fit data to this model.
<tt style='background-color:#E8E8E8;'> modeling.SimplexLSQFitter <a href=' /modeling/fitting.py#L711'>__call__</a>(model,x,y,z)</tt>	Fit data to this model.
<tt style='background-color:#E8E8E8;'> modeling.JointFitter <a href=' /modeling/fitting.py#L797'>objective_function</a>(fps)</tt>	Function to minimize.
<tt style='background-color:#E8E8E8;'> modeling.JointFitter <a href=' /modeling/fitting.py#L858'>__call__</a>()</tt>	Fit data to these models keeping some of the parameters common to the two models.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/fitting.py#L904'>_convert_input</a>(x,y,z,n_models)</tt>	Convert inputs to float arrays.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/fitting.py#L952'>_fitter_to_model_params</a>(model,fps)</tt>	Constructs the full list of model parameters from the fitted and constrained parameters.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/fitting.py#L1007'>_model_to_fit_params</a>(model)</tt>	Convert a model instance's parameter array to an array that can be used with a fitter that doesn't natively support fixed or tied parameters.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/fitting.py#L1032'>_validate_constraints</a>(supported_constraints,model)</tt>	Make sure model constraints are supported by the current fitter.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/fitting.py#L1058'>_validate_model</a>(model,supported_constraints)</tt>	Check that model and fitter are compatible and return a copy of the model.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/fitting.py#L1079'>populate_entry_points</a>(entry_points)</tt>	This injects entry points into the astropy modeling fitting namespace.
<tt style='background-color:#E8E8E8;'> modeling.Projection <a href=' /modeling/projections.py#L109'>inverse</a>()</tt>	Inverse projection--all projection models must provide an inverse.
<tt style='background-color:#E8E8E8;'> modeling.AffineTransformation2D <a href=' /modeling/projections.py#L1876'>matrix</a>(value)</tt>	Validates that the input matrix is a 2x2 2d array.
<tt style='background-color:#E8E8E8;'> modeling.AffineTransformation2D <a href=' /modeling/projections.py#L1884'>translation</a>(value)</tt>	Validates that the translation vector is a 2d vector this allows.
<tt style='background-color:#E8E8E8;'> modeling.AffineTransformation2D <a href=' /modeling/projections.py#L1918'>evaluate</a>(cls,x,y,matrix)</tt>	Apply the transformation to a set of 2d cartesian coordinates given as two lists--one for the x coordinates and one for a y coordinates--or a.
<tt style='background-color:#E8E8E8;'> modeling._Tabular <a href=' /modeling/tabular.py#L152'>bounding_box</a>()</tt>	Tuple defining the default bounding_box limits (points_low points_high).
<tt style='background-color:#E8E8E8;'> modeling._Tabular <a href=' /modeling/tabular.py#L174'>evaluate</a>()</tt>	Return the interpolated values at the input coordinates.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/tabular.py#L193'>tabular_model</a>(dim,name)</tt>	Make a tabular model where n_inputs is based on the dimension of the lookup_table.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/statistic.py#L14'>leastsquare</a>(measured_vals,updated_model,weights,x)</tt>	Least square statistic with optional weights.
<tt style='background-color:#E8E8E8;'> modeling.PowerLaw1D <a href=' /modeling/powerlaws.py#L49'>evaluate</a>(x,amplitude,x_0,alpha)</tt>	One dimensional power law model function.
<tt style='background-color:#E8E8E8;'> modeling.PowerLaw1D <a href=' /modeling/powerlaws.py#L56'>fit_deriv</a>(x,amplitude,x_0,alpha)</tt>	One dimensional power law derivative with respect to parameters.
<tt style='background-color:#E8E8E8;'> modeling.BrokenPowerLaw1D <a href=' /modeling/powerlaws.py#L108'>evaluate</a>(x,amplitude,x_break,alpha_1)</tt>	One dimensional broken power law model function.
<tt style='background-color:#E8E8E8;'> modeling.BrokenPowerLaw1D <a href=' /modeling/powerlaws.py#L116'>fit_deriv</a>(x,amplitude,x_break,alpha_1)</tt>	One dimensional broken power law derivative with respect to parameters.
<tt style='background-color:#E8E8E8;'> modeling.SmoothlyBrokenPowerLaw1D <a href=' /modeling/powerlaws.py#L243'>evaluate</a>(x,amplitude,log_break,alpha_1)</tt>	One dimensional smoothly broken power law model function.
<tt style='background-color:#E8E8E8;'> modeling.SmoothlyBrokenPowerLaw1D <a href=' /modeling/powerlaws.py#L291'>fit_deriv</a>(x,amplitude,log_break,alpha_1)</tt>	One dimensional smoothly broken power law derivative with respect.
<tt style='background-color:#E8E8E8;'> modeling.ExponentialCutoffPowerLaw1D <a href=' /modeling/powerlaws.py#L384'>evaluate</a>(x,amplitude,x_0,alpha)</tt>	One dimensional exponential cutoff power law model function.
<tt style='background-color:#E8E8E8;'> modeling.ExponentialCutoffPowerLaw1D <a href=' /modeling/powerlaws.py#L391'>fit_deriv</a>(x,amplitude,x_0,alpha)</tt>	One dimensional exponential cutoff power law derivative with respect to parameters.
<tt style='background-color:#E8E8E8;'> modeling.LogParabola1D <a href=' /modeling/powerlaws.py#L438'>evaluate</a>(x,amplitude,x_0,alpha)</tt>	One dimensional log parabola model function.
<tt style='background-color:#E8E8E8;'> modeling.LogParabola1D <a href=' /modeling/powerlaws.py#L446'>fit_deriv</a>(x,amplitude,x_0,alpha)</tt>	One dimensional log parabola derivative with respect to parameters.
<tt style='background-color:#E8E8E8;'> modeling.Optimization <a href=' /modeling/optimizers.py#L60'>maxiter</a>()</tt>	Maximum number of iterations.
<tt style='background-color:#E8E8E8;'> modeling.Optimization <a href=' /modeling/optimizers.py#L70'>eps</a>()</tt>	Step for the forward difference approximation of the jacobian.
<tt style='background-color:#E8E8E8;'> modeling.Optimization <a href=' /modeling/optimizers.py#L70'>eps</a>(val)</tt>	Set eps value.
<tt style='background-color:#E8E8E8;'> modeling.SLSQP <a href=' /modeling/optimizers.py#L122'>__call__</a>(objfunc,initval,fargs)</tt>	Run the solver.
<tt style='background-color:#E8E8E8;'> modeling.Simplex <a href=' /modeling/optimizers.py#L202'>__call__</a>(objfunc,initval,fargs)</tt>	Run the solver.
<tt style='background-color:#E8E8E8;'> modeling.ExpressionTree <a href=' /modeling/utils.py#L91'>evaluate</a>(operators,getter,start,stop)</tt>	Evaluate the expression represented by this tree.
<tt style='background-color:#E8E8E8;'> modeling.AliasDict <a href=' /modeling/utils.py#L322'>__iter__</a>()</tt>	First iterates over keys from the parent dict if the aliased keys are present in the parent followed by any keys in the local store.
<tt style='background-color:#E8E8E8;'> modeling._BoundingBox <a href=' /modeling/utils.py#L382'>validate</a>(cls,model,bounding_box)</tt>	Validate a given bounding box sequence against the given model (which may be either a subclass of ~astropy.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/utils.py#L424'>make_binary_operator_eval</a>(oper,f,g)</tt>	Given a binary operator as a callable of two arguments oper and two callables f and g which accept the same arguments.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/utils.py#L451'>poly_map_domain</a>(oldx,domain,window)</tt>	Map domain into window by shifting and scaling.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/utils.py#L471'>comb</a>(N,k)</tt>	The number of combinations of n things taken k at a time.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/utils.py#L491'>array_repr_oneline</a>(array)</tt>	Represents a multi-dimensional numpy array flattened onto a single line.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/utils.py#L500'>combine_labels</a>(left,right)</tt>	For use with the join operator &: combine left input/output labels with right input/output labels.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/utils.py#L517'>ellipse_extent</a>(a,b,theta)</tt>	Calculates the extent of a box encapsulating a rotated 2d ellipse.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/utils.py#L577'>get_inputs_and_params</a>(func)</tt>	Given a callable determine the input variables and the parameters.
<tt style='background-color:#E8E8E8;'> modeling._EulerRotation <a href=' /modeling/rotations.py#L67'>rotation_matrix_from_angle</a>(angle)</tt>	Clockwise rotation matrix.
<tt style='background-color:#E8E8E8;'> modeling.Rotation2D <a href=' /modeling/rotations.py#L275'>evaluate</a>(cls,x,y,angle)</tt>	Apply the rotation to a set of 2d cartesian coordinates given as two lists--one for the x coordinates and one for a y coordinates--or a.
<tt style='background-color:#E8E8E8;'> modeling. <a href=' /modeling/parameters.py#L33'>_tofloat</a>(value)</tt>	Convert a parameter to float or float array.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L312'>default</a>()</tt>	Parameter default value.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L354'>value</a>()</tt>	The unadorned value proxied by this parameter.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L365'>shape</a>()</tt>	The shape of this parameter's value array.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L387'>size</a>()</tt>	The size of this parameter's value array.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L408'>fixed</a>()</tt>	Boolean indicating if the parameter is kept fixed during fitting.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L408'>fixed</a>(value)</tt>	Fix a parameter.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L433'>tied</a>()</tt>	Indicates that this parameter is linked to another one.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L433'>tied</a>(value)</tt>	Tie a parameter.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L455'>bounds</a>()</tt>	The minimum and maximum values of a parameter as a tuple.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L455'>bounds</a>(value)</tt>	Set the minimum and maximum values of a parameter from a tuple.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L483'>min</a>()</tt>	A value used as a lower bound when fitting a parameter.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L483'>min</a>(value)</tt>	Set a minimum value of a parameter.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L499'>max</a>()</tt>	A value used as an upper bound when fitting a parameter.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L499'>max</a>(value)</tt>	Set a maximum value of a parameter.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L509'>validator</a>()</tt>	Used as a decorator to set the validator method for a parameter.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L586'>copy</a>(name,description,default,getter)</tt>	Make a copy of this parameter, overriding any of its core attributes in the process or an exact copy.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L621'>_raw_value</a>()</tt>	Currently for internal use only.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L636'>_bind</a>(model)</tt>	Bind the parameter to a specific model instance don't use this directly on *unbound* parameters i.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L647'>_get_model_value</a>(model)</tt>	This method implements how to retrieve the value of this parameter from the model instance.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L673'>_set_model_value</a>(model,value)</tt>	This method implements how to store the value of a parameter on the model instance.
<tt style='background-color:#E8E8E8;'> modeling.Parameter <a href=' /modeling/parameters.py#L700'>_create_value_wrapper</a>(wrapper,model)</tt>	Wraps a getter/setter function to support optionally passing in a reference to the model object as the second argument.
<tt style='background-color:#E8E8E8;'> modeling.BaseGaussian1D <a href=' /modeling/functional_models.py#L37'>bounding_box</a>(factor)</tt>	Tuple defining the default bounding_box limits (x_low x_high).
<tt style='background-color:#E8E8E8;'> modeling.Gaussian1D <a href=' /modeling/functional_models.py#L152'>evaluate</a>(x,amplitude,mean,stddev)</tt>	Gaussian1d model function.
<tt style='background-color:#E8E8E8;'> modeling.Gaussian1D <a href=' /modeling/functional_models.py#L159'>fit_deriv</a>(x,amplitude,mean,stddev)</tt>	Gaussian1d model function derivatives.
<tt style='background-color:#E8E8E8;'> modeling.GaussianAbsorption1D <a href=' /modeling/functional_models.py#L215'>evaluate</a>(x,amplitude,mean,stddev)</tt>	Gaussianabsorption1d model function.
<tt style='background-color:#E8E8E8;'> modeling.GaussianAbsorption1D <a href=' /modeling/functional_models.py#L222'>fit_deriv</a>(x,amplitude,mean,stddev)</tt>	Gaussianabsorption1d model function derivatives.
<tt style='background-color:#E8E8E8;'> modeling.Gaussian2D <a href=' /modeling/functional_models.py#L352'>bounding_box</a>(factor)</tt>	Tuple defining the default bounding_box limits in each dimension ((y_low y_high), (x_low x_high)).
<tt style='background-color:#E8E8E8;'> modeling.Gaussian2D <a href=' /modeling/functional_models.py#L390'>evaluate</a>(x,y,amplitude,x_mean)</tt>	Two dimensional gaussian function.
<tt style='background-color:#E8E8E8;'> modeling.Gaussian2D <a href=' /modeling/functional_models.py#L407'>fit_deriv</a>(x,y,amplitude,x_mean)</tt>	Two dimensional gaussian function derivative with respect to parameters.
<tt style='background-color:#E8E8E8;'> modeling.RedshiftScaleFactor <a href=' /modeling/functional_models.py#L528'>evaluate</a>(x,z)</tt>	One dimensional redshiftscalefactor model function.
<tt style='background-color:#E8E8E8;'> modeling.RedshiftScaleFactor <a href=' /modeling/functional_models.py#L534'>fit_deriv</a>(x,z)</tt>	One dimensional redshiftscalefactor model derivative.
<tt style='background-color:#E8E8E8;'> modeling.RedshiftScaleFactor <a href=' /modeling/functional_models.py#L541'>inverse</a>()</tt>	Inverse redshiftscalefactor model.
<tt style='background-color:#E8E8E8;'> modeling.Sersic1D <a href=' /modeling/functional_models.py#L628'>evaluate</a>(cls,r,amplitude,r_eff)</tt>	One dimensional sersic profile function.
<tt style='background-color:#E8E8E8;'> modeling.Sine1D <a href=' /modeling/functional_models.py#L693'>evaluate</a>(x,amplitude,frequency,phase)</tt>	One dimensional sine model function.
<tt style='background-color:#E8E8E8;'> modeling.Sine1D <a href=' /modeling/functional_models.py#L699'>fit_deriv</a>(x,amplitude,frequency,phase)</tt>	One dimensional sine model derivative.
<tt style='background-color:#E8E8E8;'> modeling.Linear1D <a href=' /modeling/functional_models.py#L738'>evaluate</a>(x,slope,intercept)</tt>	One dimensional line model function.
<tt style='background-color:#E8E8E8;'> modeling.Linear1D <a href=' /modeling/functional_models.py#L744'>fit_deriv</a>(x,slope,intercept)</tt>	One dimensional line model derivative with respect to parameters.
<tt style='background-color:#E8E8E8;'> modeling.Planar2D <a href=' /modeling/functional_models.py#L790'>evaluate</a>(x,y,slope_x,slope_y)</tt>	Two dimensional plane model function.
<tt style='background-color:#E8E8E8;'> modeling.Planar2D <a href=' /modeling/functional_models.py#L796'>fit_deriv</a>(x,y,slope_x,slope_y)</tt>	Two dimensional plane model derivative with respect to parameters.
<tt style='background-color:#E8E8E8;'> modeling.Lorentz1D <a href=' /modeling/functional_models.py#L857'>evaluate</a>(x,amplitude,x_0,fwhm)</tt>	One dimensional lorentzian model function.
<tt style='background-color:#E8E8E8;'> modeling.Lorentz1D <a href=' /modeling/functional_models.py#L864'>fit_deriv</a>(x,amplitude,x_0,fwhm)</tt>	One dimensional lorentzian model derivative with respect to parameters.
<tt style='background-color:#E8E8E8;'> modeling.Lorentz1D <a href=' /modeling/functional_models.py#L874'>bounding_box</a>(factor)</tt>	Tuple defining the default bounding_box limits (x_low x_high).
<tt style='background-color:#E8E8E8;'> modeling.Const1D <a href=' /modeling/functional_models.py#L1029'>evaluate</a>(x,amplitude)</tt>	One dimensional constant model function.
<tt style='background-color:#E8E8E8;'> modeling.Const1D <a href=' /modeling/functional_models.py#L1044'>fit_deriv</a>(x,amplitude)</tt>	One dimensional constant model derivative with respect to parameters.
<tt style='background-color:#E8E8E8;'> modeling.Const2D <a href=' /modeling/functional_models.py#L1075'>evaluate</a>(x,y,amplitude)</tt>	Two dimensional constant model function.
<tt style='background-color:#E8E8E8;'> modeling.Ellipse2D <a href=' /modeling/functional_models.py#L1168'>evaluate</a>(x,y,amplitude,x_0)</tt>	Two dimensional ellipse model function.
<tt style='background-color:#E8E8E8;'> modeling.Ellipse2D <a href=' /modeling/functional_models.py#L1181'>bounding_box</a>()</tt>	Tuple defining the default bounding_box limits.
<tt style='background-color:#E8E8E8;'> modeling.Disk2D <a href=' /modeling/functional_models.py#L1236'>evaluate</a>(x,y,amplitude,x_0)</tt>	Two dimensional disk model function.
<tt style='background-color:#E8E8E8;'> modeling.Disk2D <a href=' /modeling/functional_models.py#L1243'>bounding_box</a>()</tt>	Tuple defining the default bounding_box limits.
<tt style='background-color:#E8E8E8;'> modeling.Ring2D <a href=' /modeling/functional_models.py#L1315'>evaluate</a>(x,y,amplitude,x_0)</tt>	Two dimensional ring model function.
<tt style='background-color:#E8E8E8;'> modeling.Ring2D <a href=' /modeling/functional_models.py#L1323'>bounding_box</a>()</tt>	Tuple defining the default bounding_box.
<tt style='background-color:#E8E8E8;'> modeling.Box1D <a href=' /modeling/functional_models.py#L1408'>evaluate</a>(x,amplitude,x_0,width)</tt>	One dimensional box model function.
<tt style='background-color:#E8E8E8;'> modeling.Box1D <a href=' /modeling/functional_models.py#L1416'>fit_deriv</a>(cls,x,amplitude,x_0)</tt>	One dimensional box model derivative with respect to parameters.
<tt style='background-color:#E8E8E8;'> modeling.Box1D <a href=' /modeling/functional_models.py#L1425'>bounding_box</a>()</tt>	Tuple defining the default bounding_box limits.
<tt style='background-color:#E8E8E8;'> modeling.Box2D <a href=' /modeling/functional_models.py#L1481'>evaluate</a>(x,y,amplitude,x_0)</tt>	Two dimensional box model function.
<tt style='background-color:#E8E8E8;'> modeling.Box2D <a href=' /modeling/functional_models.py#L1491'>bounding_box</a>()</tt>	Tuple defining the default bounding_box.
<tt style='background-color:#E8E8E8;'> modeling.Trapezoid1D <a href=' /modeling/functional_models.py#L1553'>evaluate</a>(x,amplitude,x_0,width)</tt>	One dimensional trapezoid model function.
<tt style='background-color:#E8E8E8;'> modeling.Trapezoid1D <a href=' /modeling/functional_models.py#L1573'>bounding_box</a>()</tt>	Tuple defining the default bounding_box limits.
<tt style='background-color:#E8E8E8;'> modeling.TrapezoidDisk2D <a href=' /modeling/functional_models.py#L1614'>evaluate</a>(x,y,amplitude,x_0)</tt>	Two dimensional trapezoid disk model function.
<tt style='background-color:#E8E8E8;'> modeling.TrapezoidDisk2D <a href=' /modeling/functional_models.py#L1625'>bounding_box</a>()</tt>	Tuple defining the default bounding_box.
<tt style='background-color:#E8E8E8;'> modeling.MexicanHat1D <a href=' /modeling/functional_models.py#L1692'>evaluate</a>(x,amplitude,x_0,sigma)</tt>	One dimensional mexican hat model function.
<tt style='background-color:#E8E8E8;'> modeling.MexicanHat1D <a href=' /modeling/functional_models.py#L1699'>bounding_box</a>(factor)</tt>	Tuple defining the default bounding_box limits (x_low x_high).
<tt style='background-color:#E8E8E8;'> modeling.MexicanHat2D <a href=' /modeling/functional_models.py#L1751'>evaluate</a>(x,y,amplitude,x_0)</tt>	Two dimensional mexican hat model function.
<tt style='background-color:#E8E8E8;'> modeling.AiryDisk2D <a href=' /modeling/functional_models.py#L1809'>evaluate</a>(cls,x,y,amplitude)</tt>	Two dimensional airy model function.
<tt style='background-color:#E8E8E8;'> modeling.Moffat1D <a href=' /modeling/functional_models.py#L1886'>evaluate</a>(x,amplitude,x_0,gamma)</tt>	One dimensional moffat model function.
<tt style='background-color:#E8E8E8;'> modeling.Moffat1D <a href=' /modeling/functional_models.py#L1892'>fit_deriv</a>(x,amplitude,x_0,gamma)</tt>	One dimensional moffat model derivative with respect to parameters.
<tt style='background-color:#E8E8E8;'> modeling.Moffat2D <a href=' /modeling/functional_models.py#L1942'>evaluate</a>(x,y,amplitude,x_0)</tt>	Two dimensional moffat model function.
<tt style='background-color:#E8E8E8;'> modeling.Moffat2D <a href=' /modeling/functional_models.py#L1949'>fit_deriv</a>(x,y,amplitude,x_0)</tt>	Two dimensional moffat model derivative with respect to parameters.
<tt style='background-color:#E8E8E8;'> modeling.Sersic2D <a href=' /modeling/functional_models.py#L2046'>evaluate</a>(cls,x,y,amplitude)</tt>	Two dimensional sersic profile function.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/baseframe.py#L46'>_get_repr_cls</a>(value)</tt>	Return a valid representation class from value or raise exception.
<tt style='background-color:#E8E8E8;'> coordinates.FrameAttribute <a href=' /coordinates/baseframe.py#L177'>convert_input</a>(value)</tt>	Validate the input value and convert to expected attribute class.
<tt style='background-color:#E8E8E8;'> coordinates.TimeFrameAttribute <a href=' /coordinates/baseframe.py#L263'>convert_input</a>(value)</tt>	Convert input value to a time object and validate by running through the time constructor.
<tt style='background-color:#E8E8E8;'> coordinates.CartesianRepresentationFrameAttribute <a href=' /coordinates/baseframe.py#L324'>convert_input</a>(value)</tt>	Checks that the input is a cartesianrepresentation with the correct unit or the special value [0 0 0].
<tt style='background-color:#E8E8E8;'> coordinates.QuantityFrameAttribute <a href=' /coordinates/baseframe.py#L390'>convert_input</a>(value)</tt>	Checks that the input is a quantity with the necessary units (or the special value 0).
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocationAttribute <a href=' /coordinates/baseframe.py#L443'>convert_input</a>(value)</tt>	Checks that the input is a quantity with the necessary units (or the special value 0).
<tt style='background-color:#E8E8E8;'> coordinates.CoordinateAttribute <a href=' /coordinates/baseframe.py#L500'>convert_input</a>(value)</tt>	Checks that the input is a skycoord with the necessary units (or the special value none).
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L703'>cache</a>()</tt>	Cache for this frame a dict it stores anything that should be.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L725'>data</a>()</tt>	The coordinate data for this object if this frame has no data an.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L737'>has_data</a>()</tt>	True if this frame has data, false otherwise.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L783'>representation</a>()</tt>	The representation of the data in this frame as a class that is subclassed from ~astropy.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L827'>representation_info</a>()</tt>	A dictionary with the information of what attribute names for this frame apply to particular representations.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L859'>realize_frame</a>(representation)</tt>	Generates a new frame *with new data* from another frame which may or may not have data.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L880'>represent_as</a>(new_representation,in_frame_units)</tt>	Generate and return a new representation of this frame's data as a representation object.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L946'>transform_to</a>(new_frame)</tt>	Transform this object's coordinate data to a new frame.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L990'>is_transformable_to</a>(new_frame)</tt>	Determines if this coordinate frame can be transformed to another given frame.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L1034'>is_frame_attr_default</a>(attrnm)</tt>	Determine whether or not a frame attribute has its value because it's the default value or because this frame was created with that value.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L1053'>is_equivalent_frame</a>(other)</tt>	Checks if this object is the same frame as the other object.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L1102'>_data_repr</a>()</tt>	Returns a string representation of the coordinate data.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L1134'>_frame_attrs_repr</a>()</tt>	Returns a string representation of the frame's attributes if any.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L1141'>_apply</a>(method)</tt>	Create a new instance applying a method to the underlying data.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L1196'>__dir__</a>()</tt>	Override the builtin dir behavior to include representation names.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L1208'>__getattr__</a>(attr)</tt>	Allow access to attributes defined in self.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L1252'>separation</a>(other)</tt>	Computes on-sky separation between this coordinate and another.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L1286'>separation_3d</a>(other)</tt>	Computes three dimensional separation between this coordinate and another.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L1323'>cartesian</a>()</tt>	Shorthand for a cartesian representation of the coordinates in this object.
<tt style='background-color:#E8E8E8;'> coordinates.BaseCoordinateFrame <a href=' /coordinates/baseframe.py#L1334'>spherical</a>()</tt>	Shorthand for a spherical representation of the coordinates in this object.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/orbital_elements.py#L176'>calc_moon</a>(t)</tt>	Lunar position model elp2000-82 of (chapront-touze' and chapront 1983 124 50) this is the simplified version of jean meeus astronomical algorithms.
<tt style='background-color:#E8E8E8;'> coordinates.TransformGraph <a href=' /coordinates/transformations.py#L59'>frame_set</a>()</tt>	A set of all the frame classes present in this transformgraph.
<tt style='background-color:#E8E8E8;'> coordinates.TransformGraph <a href=' /coordinates/transformations.py#L73'>frame_attributes</a>()</tt>	A dict of all the attributes of all frame classes in this transformgraph.
<tt style='background-color:#E8E8E8;'> coordinates.TransformGraph <a href=' /coordinates/transformations.py#L86'>invalidate_cache</a>()</tt>	Invalidates the cache that stores optimizations for traversing the transform graph.
<tt style='background-color:#E8E8E8;'> coordinates.TransformGraph <a href=' /coordinates/transformations.py#L99'>add_transform</a>(fromsys,tosys,transform)</tt>	Add a new coordinate transformation to the graph.
<tt style='background-color:#E8E8E8;'> coordinates.TransformGraph <a href=' /coordinates/transformations.py#L131'>remove_transform</a>(fromsys,tosys,transform)</tt>	Removes a coordinate transform from the graph.
<tt style='background-color:#E8E8E8;'> coordinates.TransformGraph <a href=' /coordinates/transformations.py#L179'>find_shortest_path</a>(fromsys,tosys)</tt>	Computes the shortest distance along the transform graph from one system to another.
<tt style='background-color:#E8E8E8;'> coordinates.TransformGraph <a href=' /coordinates/transformations.py#L297'>get_transform</a>(fromsys,tosys)</tt>	Generates and returns the compositetransform for a transformation between two coordinate systems.
<tt style='background-color:#E8E8E8;'> coordinates.TransformGraph <a href=' /coordinates/transformations.py#L348'>lookup_name</a>(name)</tt>	Tries to locate the coordinate class with the provided alias.
<tt style='background-color:#E8E8E8;'> coordinates.TransformGraph <a href=' /coordinates/transformations.py#L366'>get_names</a>()</tt>	Returns all available transform names they will all be.
<tt style='background-color:#E8E8E8;'> coordinates.TransformGraph <a href=' /coordinates/transformations.py#L378'>to_dot_graph</a>(priorities,addnodes,savefn,savelayout)</tt>	Converts this transform graph to the graphviz_ dot format.
<tt style='background-color:#E8E8E8;'> coordinates.TransformGraph <a href=' /coordinates/transformations.py#L471'>to_networkx_graph</a>()</tt>	Converts this transform graph into a networkx graph.
<tt style='background-color:#E8E8E8;'> coordinates.TransformGraph <a href=' /coordinates/transformations.py#L505'>transform</a>(transcls,fromsys,tosys,priority)</tt>	A function decorator for defining transformations.
<tt style='background-color:#E8E8E8;'> coordinates.CoordinateTransform <a href=' /coordinates/transformations.py#L619'>register</a>(graph)</tt>	Add this transformation to the requested transformation graph replacing anything already connecting these two coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.CoordinateTransform <a href=' /coordinates/transformations.py#L631'>unregister</a>(graph)</tt>	Remove this transformation from the requested transformation graph.
<tt style='background-color:#E8E8E8;'> coordinates.CoordinateTransform <a href=' /coordinates/transformations.py#L648'>__call__</a>(fromcoord,toframe)</tt>	Does the actual coordinate transformation from the fromsys class to the tosys class.
<tt style='background-color:#E8E8E8;'> coordinates.CompositeTransform <a href=' /coordinates/transformations.py#L884'>_combine_statics</a>(transforms)</tt>	Combines together sequences of staticmatrixtransforms into a single transform and returns it.
<tt style='background-color:#E8E8E8;'> coordinates.Angle <a href=' /coordinates/angles.py#L117'>_tuple_to_float</a>(angle,unit)</tt>	Converts an angle represented as a 3-tuple or 2-tuple into a floating point number in the given unit.
<tt style='background-color:#E8E8E8;'> coordinates.Angle <a href=' /coordinates/angles.py#L138'>hour</a>()</tt>	The angle's value in hours read-only property.
<tt style='background-color:#E8E8E8;'> coordinates.Angle <a href=' /coordinates/angles.py#L145'>hms</a>()</tt>	The angle's value in hours as a named tuple with h m s members.
<tt style='background-color:#E8E8E8;'> coordinates.Angle <a href=' /coordinates/angles.py#L153'>dms</a>()</tt>	The angle's value in degrees as a named tuple with d m s members.
<tt style='background-color:#E8E8E8;'> coordinates.Angle <a href=' /coordinates/angles.py#L161'>signed_dms</a>()</tt>	The angle's value in degrees as a named tuple with sign d m s members.
<tt style='background-color:#E8E8E8;'> coordinates.Angle <a href=' /coordinates/angles.py#L174'>to_string</a>(unit,decimal,sep,precision)</tt>	A string representation of the angle.
<tt style='background-color:#E8E8E8;'> coordinates.Angle <a href=' /coordinates/angles.py#L345'>wrap_at</a>(wrap_angle,inplace)</tt>	Wrap the angle object at the given wrap_angle.
<tt style='background-color:#E8E8E8;'> coordinates.Angle <a href=' /coordinates/angles.py#L394'>is_within_bounds</a>(lower,upper)</tt>	Check if all angle s satisfy lower <= angle < upper if lower is not specified (or none) then no lower bounds check is.
<tt style='background-color:#E8E8E8;'> coordinates.Latitude <a href=' /coordinates/angles.py#L501'>_validate_angles</a>(angles)</tt>	Check that angles are between -90 and 90 degrees.
<tt style='background-color:#E8E8E8;'> coordinates.Longitude <a href=' /coordinates/angles.py#L611'>_wrap_internal</a>()</tt>	Wrap the internal values in the longitude object using the.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/matrix_utilities.py#L43'>rotation_matrix</a>(angle,axis,unit)</tt>	Generate matrices for rotation by some angle around some axis.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/matrix_utilities.py#L103'>angle_axis</a>(matrix)</tt>	Angle of rotation and rotation axis for a given rotation matrix.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/matrix_utilities.py#L16'>matrix_product</a>()</tt>	Matrix multiply all arguments together.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/matrix_utilities.py#L32'>matrix_transpose</a>(matrix)</tt>	Transpose a matrix or stack of matrices by swapping the last two axes.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/matching.py#L19'>match_coordinates_3d</a>(matchcoord,catalogcoord,nthneighbor,storekdtree)</tt>	Finds the nearest 3-dimensional matches of a coordinate or coordinates in a set of catalog coordinates.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/matching.py#L89'>match_coordinates_sky</a>(matchcoord,catalogcoord,nthneighbor,storekdtree)</tt>	Finds the nearest on-sky matches of a coordinate or coordinates in a set of catalog coordinates.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/matching.py#L173'>search_around_3d</a>(coords1,coords2,distlimit,storekdtree)</tt>	Searches for pairs of points that are at least as close as a specified distance in 3d space.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/matching.py#L276'>search_around_sky</a>(coords1,coords2,seplimit,storekdtree)</tt>	Searches for pairs of points that have an angular separation at least as close as a specified angle.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/matching.py#L405'>_get_cartesian_kdtree</a>(coord,attrname_or_kdt,forceunit)</tt>	This is a utility function to retrieve (and build/cache if necessary) a 3d cartesian kd-tree from various sorts of astropy coordinate objects.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/calculation.py#L60'>horoscope</a>(birthday,corrected)</tt>	Enter your birthday as an astropy time time object and.
<tt style='background-color:#E8E8E8;'> coordinates.SiteRegistry <a href=' /coordinates/sites.py#L41'>__getitem__</a>(site_name)</tt>	Returns an earthlocation for a known site in this registry.
<tt style='background-color:#E8E8E8;'> coordinates.SiteRegistry <a href=' /coordinates/sites.py#L73'>names</a>()</tt>	The names in this registry note that these are *not* exactly the same.
<tt style='background-color:#E8E8E8;'> coordinates.SiteRegistry <a href=' /coordinates/sites.py#L87'>add_site</a>(names,locationobj)</tt>	Adds a location to the registry.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/sites.py#L117'>get_builtin_sites</a>()</tt>	Load observatory database from data/observatories json and parse them into.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/sites.py#L126'>get_downloaded_sites</a>(jsonurl)</tt>	Load observatory database from data astropy org and parse into a siteregistry.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L280'>_check_hour_range</a>(hrs)</tt>	Checks that the given value is in the range -24 24.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L290'>_check_minute_range</a>(m)</tt>	Checks that the given value is in the range [0 60] if the value.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L302'>_check_second_range</a>(sec)</tt>	Checks that the given value is in the range [0 60] if the value.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L316'>check_hms_ranges</a>(h,m,s)</tt>	Checks that the given hour minute and second are all within reasonable range.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L327'>parse_angle</a>(angle,unit,debug)</tt>	Parses an input string value into an angle value.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L361'>degrees_to_dms</a>(d)</tt>	Convert a floating-point degree value into a degree arcminute arcsecond tuple.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L375'>dms_to_degrees</a>(d,m,s)</tt>	Convert degrees arcminute arcsecond to a float degrees value.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L402'>hms_to_hours</a>(h,m,s)</tt>	Convert hour minute second to a float hour value.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L428'>hms_to_degrees</a>(h,m,s)</tt>	Convert hour minute second to a float degrees value.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L436'>hms_to_radians</a>(h,m,s)</tt>	Convert hour minute second to a float radians value.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L444'>hms_to_dms</a>(h,m,s)</tt>	Convert degrees arcminutes arcseconds to an hour minute second tuple.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L453'>hours_to_decimal</a>(h)</tt>	Convert any parseable hour value into a float value.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L461'>hours_to_radians</a>(h)</tt>	Convert an angle in hours to radians.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L469'>hours_to_hms</a>(h)</tt>	Convert an floating-point hour value into an hour minute second tuple.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L484'>radians_to_degrees</a>(r)</tt>	Convert an angle in radians to degrees.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L491'>radians_to_hours</a>(r)</tt>	Convert an angle in radians to hours.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L498'>radians_to_hms</a>(r)</tt>	Convert an angle in radians to an hour minute second tuple.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L507'>radians_to_dms</a>(r)</tt>	Convert an angle in radians to an degree arcminute arcsecond tuple.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L517'>sexagesimal_to_string</a>(values,precision,pad,sep)</tt>	Given an already separated tuple of sexagesimal values returns a string.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L606'>hours_to_string</a>(h,precision,pad,sep)</tt>	Takes a decimal hour value and returns a string formatted as hms with separator specified by the 'sep' parameter.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L619'>degrees_to_string</a>(d,precision,pad,sep)</tt>	Takes a decimal hour value and returns a string formatted as dms with separator specified by the 'sep' parameter.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L631'>angular_separation</a>(lon1,lat1,lon2,lat2)</tt>	Angular separation between two points on a sphere.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/angle_utilities.py#L671'>position_angle</a>(lon1,lat1,lon2,lat2)</tt>	Position angle east of north between two points on a sphere.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/earth_orientation.py#L26'>eccentricity</a>(jd)</tt>	Eccentricity of the earth's orbit at the requested julian date.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/earth_orientation.py#L52'>mean_lon_of_perigee</a>(jd)</tt>	Computes the mean longitude of perigee of the earth's orbit at the requested julian date.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/earth_orientation.py#L79'>obliquity</a>(jd,algorithm)</tt>	Computes the obliquity of the earth at the requested julian date.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/earth_orientation.py#L125'>precession_matrix_Capitaine</a>(fromepoch,toepoch)</tt>	Computes the precession matrix from one julian epoch to another.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/earth_orientation.py#L154'>_precess_from_J2000_Capitaine</a>(epoch)</tt>	Computes the precession matrix from j2000 to the given julian epoch.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/earth_orientation.py#L180'>_precession_matrix_besselian</a>(epoch1,epoch2)</tt>	Computes the precession matrix from one besselian epoch to another using newcomb's method.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/earth_orientation.py#L215'>_load_nutation_data</a>(datastr,seriestype)</tt>	Loads nutation series from data stored in string form.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/earth_orientation.py#L350'>nutation_components2000B</a>(jd)</tt>	Computes nutation components following the iau 2000b specification.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/earth_orientation.py#L400'>nutation_matrix</a>(epoch)</tt>	Nutation matrix generated from nutation components.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L146'>from_geocentric</a>(cls,x,y,z)</tt>	Location on earth initialized from geocentric coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L195'>from_geodetic</a>(cls,lon,lat,height)</tt>	Location on earth initialized from geodetic coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L247'>of_site</a>(cls,site_name)</tt>	Return an object of this class for a known observatory/site by name.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L296'>of_address</a>(cls,address,get_height)</tt>	Return an object of this class for a given address by querying the google maps geocoding api.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L362'>get_site_names</a>(cls)</tt>	Get list of names of observatories for use with ~astropy.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L390'>_get_site_registry</a>(cls,force_download,force_builtin)</tt>	Gets the site registry the first time this either downloads or loads.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L442'>ellipsoid</a>()</tt>	The default ellipsoid used to convert to geodetic coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L446'>geodetic</a>()</tt>	Convert to geodetic coordinates for the default ellipsoid.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L451'>to_geodetic</a>(ellipsoid)</tt>	Convert to geodetic coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L484'>longitude</a>()</tt>	Longitude of the location for the default ellipsoid.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L489'>latitude</a>()</tt>	Latitude of the location for the default ellipsoid.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L494'>height</a>()</tt>	Height of the location for the default ellipsoid.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L500'>geocentric</a>()</tt>	Convert to a tuple with x y and z as quantities.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L505'>to_geocentric</a>()</tt>	Convert to a tuple with x y and z as quantities.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L509'>get_itrs</a>(obstime)</tt>	Generates an ~astropy coordinates itrs object with the location of.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L536'>get_gcrs_posvel</a>(obstime)</tt>	Calculate the gcrs position and velocity of this object at the requested obstime.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L563'>x</a>()</tt>	The x component of the geocentric coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L568'>y</a>()</tt>	The y component of the geocentric coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.EarthLocation <a href=' /coordinates/earth.py#L573'>z</a>()</tt>	The z component of the geocentric coordinates.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/name_resolve.py#L61'>_parse_response</a>(resp_data)</tt>	Given a string response from sesame parse out the coordinates by looking for a line starting with a j meaning icrs j2000 coordinates.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/name_resolve.py#L89'>get_icrs_coordinates</a>(name)</tt>	Retrieve an icrs object by using an online name resolving service to retrieve coordinates for the specified name.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/solar_system.py#L147'>_get_kernel</a>(value)</tt>	Try importing jplephem download/retrieve from cache the satellite planet kernel corresponding to the given ephemeris.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/solar_system.py#L178'>_get_body_barycentric_posvel</a>(body,time,ephemeris,get_velocity)</tt>	Calculate the barycentric position and velocity of a solar system body.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/solar_system.py#L301'>get_body_barycentric_posvel</a>(body,time,ephemeris)</tt>	Calculate the barycentric position and velocity of a solar system body.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/solar_system.py#L339'>get_body_barycentric</a>(body,time,ephemeris)</tt>	Calculate the barycentric position of a solar system body.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/solar_system.py#L373'>_get_apparent_body_position</a>(body,time,ephemeris)</tt>	Calculate the apparent position of body body relative to earth.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/solar_system.py#L421'>get_body</a>(body,time,location,ephemeris)</tt>	Get a ~astropy coordinates skycoord for a solar system body as observed.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/solar_system.py#L467'>get_moon</a>(time,location,ephemeris)</tt>	Get a ~astropy coordinates skycoord for the earth's moon as observed.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/solar_system.py#L498'>_apparent_position_in_true_coordinates</a>(skycoord)</tt>	Convert skycoord in gcrs frame into one in which ra and dec are defined w.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/funcs.py#L30'>cartesian_to_spherical</a>(x,y,z)</tt>	Converts 3d rectangular cartesian coordinates to spherical polar coordinates.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/funcs.py#L78'>spherical_to_cartesian</a>(r,lat,lon)</tt>	Converts spherical polar coordinates to rectangular cartesian coordinates.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/funcs.py#L126'>get_sun</a>(time)</tt>	Determines the location of the sun at a given time (or times if the input is an array ~astropy.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/funcs.py#L173'>concatenate</a>(coords)</tt>	Combine multiple coordinate objects into a single ~astropy.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/funcs.py#L201'>get_constellation</a>(coord,short_name,constellation_list)</tt>	Determines the constellation s a given coordinate object contains.
<tt style='background-color:#E8E8E8;'> coordinates.Distance <a href=' /coordinates/distances.py#L154'>z</a>()</tt>	Short for self compute_z().
<tt style='background-color:#E8E8E8;'> coordinates.Distance <a href=' /coordinates/distances.py#L159'>compute_z</a>(cosmology)</tt>	The redshift for this distance assuming its physical distance is a luminosity distance.
<tt style='background-color:#E8E8E8;'> coordinates.Distance <a href=' /coordinates/distances.py#L183'>distmod</a>()</tt>	The distance modulus as a ~astropy units quantity.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/distances.py#L195'>_convert_to_and_validate_length_unit</a>(unit,allow_dimensionless)</tt>	Raises unitserror if not a length unit.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L243'>_apply</a>(method)</tt>	Create a new instance applying a method to the underlying data.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L305'>_parse_inputs</a>(args,kwargs)</tt>	Assemble a validated and sanitized keyword args dict for instantiating a skycoord and coordinate object from the provided args, and kwargs.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L378'>transform_to</a>(frame,merge_attributes)</tt>	Transform this coordinate to a new frame.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L470'>__getattr__</a>(attr)</tt>	Overrides getattr to return coordinates that this can be transformed to based on the alias attr in the master transform graph.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L555'>__dir__</a>()</tt>	Override the builtin dir behavior to include - transforms available by aliases.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L591'>to_string</a>(style)</tt>	A string representation of the coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L656'>is_equivalent_frame</a>(other)</tt>	Checks if this object's frame as the same as that of the other object.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L697'>separation</a>(other)</tt>	Computes on-sky separation between this coordinate and another.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L741'>separation_3d</a>(other)</tt>	Computes three dimensional separation between this coordinate and another.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L780'>spherical_offsets_to</a>(tocoord)</tt>	Computes angular offsets to go *from* this coordinate *to* another.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L827'>match_to_catalog_sky</a>(catalogcoord,nthneighbor)</tt>	Finds the nearest on-sky matches of this coordinate in a set of catalog coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L888'>match_to_catalog_3d</a>(catalogcoord,nthneighbor)</tt>	Finds the nearest 3-dimensional matches of this coordinate to a set of catalog coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L954'>search_around_sky</a>(searcharoundcoords,seplimit)</tt>	Searches for all coordinates in this object around a supplied set of points within a given on-sky separation.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L1012'>search_around_3d</a>(searcharoundcoords,distlimit)</tt>	Searches for all coordinates in this object around a supplied set of points within a given 3d radius.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L1070'>position_angle</a>(other)</tt>	Computes the on-sky position angle east of north between this skycoord and another.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L1116'>skyoffset_frame</a>(rotation)</tt>	Returns the sky offset frame with this skycoord at the origin.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L1134'>get_constellation</a>(short_name,constellation_list)</tt>	Determines the constellation s of the coordinates this skycoord contains.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L1171'>to_pixel</a>(wcs,origin,mode)</tt>	Convert this coordinate to pixel coordinates using a ~astropy wcs wcs.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L1197'>from_pixel</a>(cls,xp,yp,wcs)</tt>	Create a new skycoord from pixel coordinates using an ~astropy.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L1229'>guess_from_table</a>(cls,table)</tt>	A convenience method to create and return a new skycoord from the data in an astropy table.
<tt style='background-color:#E8E8E8;'> coordinates.SkyCoord <a href=' /coordinates/sky_coordinate.py#L1305'>from_name</a>(cls,name,frame)</tt>	Given a name query the cds name resolver to attempt to retrieve coordinate information for that object.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/sky_coordinate.py#L1341'>_get_frame_class</a>(frame)</tt>	Get a frame class from the input frame, which could be a frame name string or frame class.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/sky_coordinate.py#L1364'>_get_frame</a>(args,kwargs)</tt>	Determine the coordinate frame from input skycoord args and kwargs this.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/sky_coordinate.py#L1457'>_get_units</a>(args,kwargs)</tt>	Get the longitude unit and latitude unit from kwargs possible enhancement.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/sky_coordinate.py#L1488'>_parse_coordinate_arg</a>(coords,frame,units,init_kwargs)</tt>	Single unnamed arg supplied this must be.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/sky_coordinate.py#L1649'>_get_representation_attrs</a>(frame,units,kwargs)</tt>	Find instances of the "representation attributes" for specifying data for this frame.
<tt style='background-color:#E8E8E8;'> coordinates. <a href=' /coordinates/sky_coordinate.py#L1671'>_parse_ra_dec</a>(coord_str)</tt>	Parse ra and dec values from a coordinate string currently the.
<tt style='background-color:#E8E8E8;'> coordinates.BaseRepresentation <a href=' /coordinates/representation.py#L132'>components</a>()</tt>	A tuple with the in-order names of the coordinate components.
<tt style='background-color:#E8E8E8;'> coordinates.BaseRepresentation <a href=' /coordinates/representation.py#L144'>_apply</a>(method)</tt>	Create a new representation with method applied to the arrays.
<tt style='background-color:#E8E8E8;'> coordinates.BaseRepresentation <a href=' /coordinates/representation.py#L194'>shape</a>()</tt>	The shape of the instance and underlying arrays.
<tt style='background-color:#E8E8E8;'> coordinates.BaseRepresentation <a href=' /coordinates/representation.py#L213'>_values</a>()</tt>	Turn the coordinates into a record array with the coordinate values.
<tt style='background-color:#E8E8E8;'> coordinates.BaseRepresentation <a href=' /coordinates/representation.py#L226'>_units</a>()</tt>	Return a dictionary with the units of the coordinate components.
<tt style='background-color:#E8E8E8;'> coordinates.BaseRepresentation <a href=' /coordinates/representation.py#L351'>dot</a>(other)</tt>	Dot product of two representations.
<tt style='background-color:#E8E8E8;'> coordinates.BaseRepresentation <a href=' /coordinates/representation.py#L370'>cross</a>(other)</tt>	Vector cross product of two representations.
<tt style='background-color:#E8E8E8;'> coordinates.CartesianRepresentation <a href=' /coordinates/representation.py#L475'>x</a>()</tt>	The x component of the point s.
<tt style='background-color:#E8E8E8;'> coordinates.CartesianRepresentation <a href=' /coordinates/representation.py#L482'>y</a>()</tt>	The y component of the point s.
<tt style='background-color:#E8E8E8;'> coordinates.CartesianRepresentation <a href=' /coordinates/representation.py#L489'>z</a>()</tt>	The z component of the point s.
<tt style='background-color:#E8E8E8;'> coordinates.CartesianRepresentation <a href=' /coordinates/representation.py#L496'>get_xyz</a>(xyz_axis)</tt>	Return a vector array of the x y and z coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.CartesianRepresentation <a href=' /coordinates/representation.py#L544'>transform</a>(matrix)</tt>	Transform the cartesian coordinates using a 3x3 matrix.
<tt style='background-color:#E8E8E8;'> coordinates.CartesianRepresentation <a href=' /coordinates/representation.py#L644'>dot</a>(other)</tt>	Dot product of two representations.
<tt style='background-color:#E8E8E8;'> coordinates.CartesianRepresentation <a href=' /coordinates/representation.py#L668'>cross</a>(other)</tt>	Cross product of two representations.
<tt style='background-color:#E8E8E8;'> coordinates.UnitSphericalRepresentation <a href=' /coordinates/representation.py#L736'>lon</a>()</tt>	The longitude of the point s.
<tt style='background-color:#E8E8E8;'> coordinates.UnitSphericalRepresentation <a href=' /coordinates/representation.py#L743'>lat</a>()</tt>	The latitude of the point s.
<tt style='background-color:#E8E8E8;'> coordinates.UnitSphericalRepresentation <a href=' /coordinates/representation.py#L750'>to_cartesian</a>()</tt>	Converts spherical polar coordinates to 3d rectangular cartesian coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.UnitSphericalRepresentation <a href=' /coordinates/representation.py#L762'>from_cartesian</a>(cls,cart)</tt>	Converts 3d rectangular cartesian coordinates to spherical polar coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.UnitSphericalRepresentation <a href=' /coordinates/representation.py#L849'>cross</a>(other)</tt>	Cross product of two representations.
<tt style='background-color:#E8E8E8;'> coordinates.SphericalRepresentation <a href=' /coordinates/representation.py#L924'>lon</a>()</tt>	The longitude of the point s.
<tt style='background-color:#E8E8E8;'> coordinates.SphericalRepresentation <a href=' /coordinates/representation.py#L931'>lat</a>()</tt>	The latitude of the point s.
<tt style='background-color:#E8E8E8;'> coordinates.SphericalRepresentation <a href=' /coordinates/representation.py#L938'>distance</a>()</tt>	The distance from the origin to the point s.
<tt style='background-color:#E8E8E8;'> coordinates.SphericalRepresentation <a href=' /coordinates/representation.py#L956'>to_cartesian</a>()</tt>	Converts spherical polar coordinates to 3d rectangular cartesian coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.SphericalRepresentation <a href=' /coordinates/representation.py#L974'>from_cartesian</a>(cls,cart)</tt>	Converts 3d rectangular cartesian coordinates to spherical polar coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.PhysicsSphericalRepresentation <a href=' /coordinates/representation.py#L1068'>phi</a>()</tt>	The azimuth of the point s.
<tt style='background-color:#E8E8E8;'> coordinates.PhysicsSphericalRepresentation <a href=' /coordinates/representation.py#L1075'>theta</a>()</tt>	The elevation of the point s.
<tt style='background-color:#E8E8E8;'> coordinates.PhysicsSphericalRepresentation <a href=' /coordinates/representation.py#L1082'>r</a>()</tt>	The distance from the origin to the point s.
<tt style='background-color:#E8E8E8;'> coordinates.PhysicsSphericalRepresentation <a href=' /coordinates/representation.py#L1099'>to_cartesian</a>()</tt>	Converts spherical polar coordinates to 3d rectangular cartesian coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.PhysicsSphericalRepresentation <a href=' /coordinates/representation.py#L1117'>from_cartesian</a>(cls,cart)</tt>	Converts 3d rectangular cartesian coordinates to spherical polar coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.CylindricalRepresentation <a href=' /coordinates/representation.py#L1194'>rho</a>()</tt>	The distance of the point s from the z-axis.
<tt style='background-color:#E8E8E8;'> coordinates.CylindricalRepresentation <a href=' /coordinates/representation.py#L1201'>phi</a>()</tt>	The azimuth of the point s.
<tt style='background-color:#E8E8E8;'> coordinates.CylindricalRepresentation <a href=' /coordinates/representation.py#L1208'>z</a>()</tt>	The height of the point s.
<tt style='background-color:#E8E8E8;'> coordinates.CylindricalRepresentation <a href=' /coordinates/representation.py#L1215'>from_cartesian</a>(cls,cart)</tt>	Converts 3d rectangular cartesian coordinates to cylindrical polar coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.CylindricalRepresentation <a href=' /coordinates/representation.py#L1228'>to_cartesian</a>()</tt>	Converts cylindrical polar coordinates to 3d rectangular cartesian coordinates.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames.ITRS <a href=' /coordinates/builtin_frames/itrs.py#L24'>earth_location</a>()</tt>	The data in this frame as an ~astropy coordinates earthlocation class.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames.AltAz <a href=' /coordinates/builtin_frames/altaz.py#L98'>secz</a>()</tt>	Secant if the zenith angle for this coordinate a common estimate of the airmass.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames.AltAz <a href=' /coordinates/builtin_frames/altaz.py#L106'>zen</a>()</tt>	The zenith angle for this coordinate.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames. <a href=' /coordinates/builtin_frames/skyoffset.py#L19'>make_skyoffset_cls</a>(framecls)</tt>	Create a new class that is the sky offset frame for a specific class of origin frame.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames.Galactocentric <a href=' /coordinates/builtin_frames/galactocentric.py#L138'>get_roll0</a>(cls)</tt>	The additional roll angle about the final x axis necessary to align the final z axis to match the galactic yz-plane.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames.FK4NoETerms <a href=' /coordinates/builtin_frames/fk4.py#L107'>_precession_matrix</a>(oldequinox,newequinox)</tt>	Compute and return the precession matrix for fk4 using newcomb's method.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames. <a href=' /coordinates/builtin_frames/fk4.py#L139'>fk4_e_terms</a>(equinox)</tt>	Return the e-terms of aberation vector.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames. <a href=' /coordinates/builtin_frames/__init__.py#L58'>_make_transform_graph_docs</a>()</tt>	Generates a string for use with the coordinate package's docstring.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames. <a href=' /coordinates/builtin_frames/fk4_fk5_transforms.py#L32'>_fk4_B_matrix</a>(obstime)</tt>	This is a correction term in the fk4 transformations because fk4 is a.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames. <a href=' /coordinates/builtin_frames/icrs_fk5_transforms.py#L16'>_icrs_to_fk5_matrix</a>()</tt>	B-matrix from usno circular 179 used by the icrs->fk5 transformation.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames. <a href=' /coordinates/builtin_frames/utils.py#L38'>get_polar_motion</a>(time)</tt>	Gets the two polar motion components in radians for use with apio13.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames. <a href=' /coordinates/builtin_frames/utils.py#L68'>_warn_iers</a>(ierserr)</tt>	Generate a warning for an iersrangeerror parameters.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames. <a href=' /coordinates/builtin_frames/utils.py#L80'>get_dut1utc</a>(time)</tt>	This function is used to get ut1-utc in coordinates because normally it gives an error outside the iers range but in coordinates we want to allow.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames. <a href=' /coordinates/builtin_frames/utils.py#L93'>get_jd12</a>(time,scale)</tt>	Gets jd1 and jd2 from a time object in a particular scale.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames. <a href=' /coordinates/builtin_frames/utils.py#L121'>norm</a>(p)</tt>	Normalise a p-vector.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames. <a href=' /coordinates/builtin_frames/utils.py#L128'>get_cip</a>(jd1,jd2)</tt>	Find the x y coordinates of the cip and the cio locator s.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames. <a href=' /coordinates/builtin_frames/utils.py#L157'>aticq</a>(ri,di,astrom)</tt>	A slightly modified version of the erfa function eraaticq.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames. <a href=' /coordinates/builtin_frames/utils.py#L214'>atciqz</a>(rc,dc,astrom)</tt>	A slightly modified version of the erfa function eraatciqz.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames. <a href=' /coordinates/builtin_frames/utils.py#L262'>prepare_earth_position_vel</a>(time)</tt>	Get barycentric position and velocity and heliocentric position of earth parameters.
<tt style='background-color:#E8E8E8;'> coordinates.builtin_frames.FK5 <a href=' /coordinates/builtin_frames/fk5.py#L51'>_precession_matrix</a>(oldequinox,newequinox)</tt>	Compute and return the precession matrix for fk5 based on capitaine et al.
<tt style='background-color:#E8E8E8;'> constants.Constant <a href=' /constants/constant.py#L138'>copy</a>()</tt>	Return a copy of this constant instance since they are by.
<tt style='background-color:#E8E8E8;'> constants.Constant <a href=' /constants/constant.py#L147'>abbrev</a>()</tt>	A typical ascii text abbreviation of the constant also generally the same as the python variable used for this constant.
<tt style='background-color:#E8E8E8;'> constants.Constant <a href=' /constants/constant.py#L155'>name</a>()</tt>	The full name of the constant.
<tt style='background-color:#E8E8E8;'> constants.Constant <a href=' /constants/constant.py#L161'>_unit</a>()</tt>	The unit s in which this constant is defined.
<tt style='background-color:#E8E8E8;'> constants.Constant <a href=' /constants/constant.py#L167'>uncertainty</a>()</tt>	The known uncertainty in this constant's value.
<tt style='background-color:#E8E8E8;'> constants.Constant <a href=' /constants/constant.py#L173'>reference</a>()</tt>	The source used for the value of this constant.
<tt style='background-color:#E8E8E8;'> constants.Constant <a href=' /constants/constant.py#L179'>system</a>()</tt>	The system of units in which this constant is defined (typically none so long as the constant's units can be directly converted.
<tt style='background-color:#E8E8E8;'> constants.Constant <a href=' /constants/constant.py#L188'>si</a>()</tt>	If the constant is defined in the si system return that instance of the constant else convert to a quantity in the appropriate si units.
<tt style='background-color:#E8E8E8;'> constants.Constant <a href=' /constants/constant.py#L197'>cgs</a>()</tt>	If the constant is defined in the cgs system return that instance of the constant else convert to a quantity in the appropriate cgs units.
<tt style='background-color:#E8E8E8;'> constants.EMConstant <a href=' /constants/constant.py#L217'>cgs</a>()</tt>	Overridden for emconstant to raise a typeerror emphasizing that there are multiple em extensions to cgs.
<tt style='background-color:#E8E8E8;'> config. <a href=' /config/paths.py#L20'>_find_home</a>()</tt>	Locates and return the home directory or best approximation on this system.
<tt style='background-color:#E8E8E8;'> config. <a href=' /config/paths.py#L92'>get_config_dir</a>(create)</tt>	Determines the astropy configuration directory name and creates the directory if it doesn't exist.
<tt style='background-color:#E8E8E8;'> config. <a href=' /config/paths.py#L133'>get_cache_dir</a>()</tt>	Determines the astropy cache directory name and creates the directory if it doesn't exist.
<tt style='background-color:#E8E8E8;'> config._SetTempPath <a href=' /config/paths.py#L197'>__call__</a>(func)</tt>	Implements use as a decorator.
<tt style='background-color:#E8E8E8;'> config.ConfigNamespace <a href=' /config/configuration.py#L99'>set_temp</a>(attr,value)</tt>	Temporarily set a configuration value.
<tt style='background-color:#E8E8E8;'> config.ConfigNamespace <a href=' /config/configuration.py#L123'>reload</a>(attr)</tt>	Reload a configuration item from the configuration file.
<tt style='background-color:#E8E8E8;'> config.ConfigNamespace <a href=' /config/configuration.py#L142'>reset</a>(attr)</tt>	Reset a configuration item to its default.
<tt style='background-color:#E8E8E8;'> config.ConfigItem <a href=' /config/configuration.py#L280'>set</a>(value)</tt>	Sets the current value of this configitem.
<tt style='background-color:#E8E8E8;'> config.ConfigItem <a href=' /config/configuration.py#L307'>set_temp</a>(value)</tt>	Sets this item to a specified value only inside a with block.
<tt style='background-color:#E8E8E8;'> config.ConfigItem <a href=' /config/configuration.py#L335'>reload</a>()</tt>	Reloads the value of this configitem from the relevant configuration file.
<tt style='background-color:#E8E8E8;'> config.ConfigItem <a href=' /config/configuration.py#L380'>__call__</a>()</tt>	Returns the value of this configitem returns.
<tt style='background-color:#E8E8E8;'> config.ConfigItem <a href=' /config/configuration.py#L447'>_validate_val</a>(val)</tt>	Validates the provided value based on cfgtype and returns the.
<tt style='background-color:#E8E8E8;'> config. <a href=' /config/configuration.py#L464'>get_config_filename</a>(packageormod)</tt>	Get the filename of the config file associated with the given package or module.
<tt style='background-color:#E8E8E8;'> config. <a href=' /config/configuration.py#L481'>get_config</a>(packageormod,reload)</tt>	Gets the configuration object or section associated with a particular package or module.
<tt style='background-color:#E8E8E8;'> config. <a href=' /config/configuration.py#L557'>reload_config</a>(packageormod)</tt>	Reloads configuration settings from a configuration file for the root package of the requested package/module.
<tt style='background-color:#E8E8E8;'> config. <a href=' /config/configuration.py#L579'>is_unedited_config_file</a>(content,template_content)</tt>	Determines if a config file can be safely replaced because it doesn't actually contain any meaningful content.
<tt style='background-color:#E8E8E8;'> config. <a href=' /config/configuration.py#L629'>update_default_config</a>(pkg,default_cfg_dir_or_fn,version)</tt>	Checks if the configuration file for the specified package exists and if not copy over the default configuration.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/info_theory.py#L18'>bayesian_info_criterion</a>(log_likelihood,n_params,n_samples)</tt>	Computes the bayesian information criterion bic given the log of the likelihood function evaluated at the estimated or analytically derived.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/info_theory.py#L117'>bayesian_info_criterion_lsq</a>(ssr,n_params,n_samples)</tt>	Computes the bayesian information criterion bic assuming that the observations come from a gaussian distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/info_theory.py#L201'>akaike_info_criterion</a>(log_likelihood,n_params,n_samples)</tt>	Computes the akaike information criterion aic.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/info_theory.py#L307'>akaike_info_criterion_lsq</a>(ssr,n_params,n_samples)</tt>	Computes the akaike information criterion assuming that the observations are gaussian distributed.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/bayesian_blocks.py#L57'>bayesian_blocks</a>(t,x,sigma,fitness)</tt>	Compute optimal segmentation of data with scargle's bayesian blocks this is a flexible implementation of the bayesian blocks algorithm.
<tt style='background-color:#E8E8E8;'> stats.FitnessFunc <a href=' /stats/bayesian_blocks.py#L201'>validate_input</a>(t,x,sigma)</tt>	Validate inputs to the model.
<tt style='background-color:#E8E8E8;'> stats.FitnessFunc <a href=' /stats/bayesian_blocks.py#L273'>p0_prior</a>(N)</tt>	Empirical prior parametrized by the false alarm probability p0 see eq.
<tt style='background-color:#E8E8E8;'> stats.FitnessFunc <a href=' /stats/bayesian_blocks.py#L290'>compute_ncp_prior</a>(N)</tt>	If ncp_prior is not explicitly defined compute it from gamma or p0.
<tt style='background-color:#E8E8E8;'> stats.FitnessFunc <a href=' /stats/bayesian_blocks.py#L302'>fit</a>(t,x,sigma)</tt>	Fit the bayesian blocks model given the specified fitness function.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/histogram.py#L21'>histogram</a>(a,bins,range,weights)</tt>	Enhanced histogram function providing adaptive binnings this is a histogram function that enables the use of more sophisticated.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/histogram.py#L96'>scott_bin_width</a>(data,return_bins)</tt>	Return the optimal histogram bin width using scott's rule scott's rule is a normal reference rule it minimizes the integrated.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/histogram.py#L157'>freedman_bin_width</a>(data,return_bins)</tt>	Return the optimal histogram bin width using the freedman-diaconis rule the freedman-diaconis rule is a normal reference rule like scott's.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/histogram.py#L221'>knuth_bin_width</a>(data,return_bins,quiet)</tt>	Return the optimal histogram bin width using knuth's rule.
<tt style='background-color:#E8E8E8;'> stats._KnuthF <a href=' /stats/histogram.py#L324'>bins</a>(M)</tt>	Return the bin edges given a width dx.
<tt style='background-color:#E8E8E8;'> stats._KnuthF <a href=' /stats/histogram.py#L331'>eval</a>(M)</tt>	Evaluate the knuth function parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/circstats.py#L60'>circmean</a>(data,axis,weights)</tt>	Computes the circular mean angle of an array of circular data.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/circstats.py#L102'>circvar</a>(data,axis,weights)</tt>	Computes the circular variance of an array of circular data.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/circstats.py#L155'>circmoment</a>(data,p,centered,axis)</tt>	Computes the p-th trigonometric circular moment for an array of circular data.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/circstats.py#L210'>circcorrcoef</a>(alpha,beta,axis,weights_alpha)</tt>	Computes the circular correlation coefficient between two array of circular data.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/circstats.py#L274'>rayleightest</a>(data,axis,weights)</tt>	Performs the rayleigh test of uniformity.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/circstats.py#L341'>vtest</a>(data,mu,axis,weights)</tt>	Performs the rayleigh test of uniformity where the alternative hypothesis h1 is assumed to have a known mean angle mu.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/circstats.py#L415'>vonmisesmle</a>(data,axis)</tt>	Computes the maximum likelihood estimator mle for the parameters of the von mises distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sigma_clipping.py#L14'>sigma_clip</a>(data,sigma,sigma_lower,sigma_upper)</tt>	Perform sigma-clipping on the provided data.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sigma_clipping.py#L204'>sigma_clipped_stats</a>(data,mask,mask_value,sigma)</tt>	Calculate sigma-clipped statistics on the provided data.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/funcs.py#L49'>binom_conf_interval</a>(k,n,conf,interval)</tt>	Binomial proportion confidence interval given k successes n trials.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/funcs.py#L275'>binned_binom_proportion</a>(x,success,bins,range)</tt>	Binomial proportion and confidence interval in bins of a continuous variable x.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/funcs.py#L464'>poisson_conf_interval</a>(n,interval,sigma,background)</tt>	Poisson parameter confidence interval given observed counts parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/funcs.py#L722'>median_absolute_deviation</a>(a,axis,func)</tt>	Calculate the median absolute deviation mad.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/funcs.py#L788'>mad_std</a>(data,axis,func)</tt>	Calculate a robust standard deviation using the median absolute deviation mad.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/funcs.py#L841'>biweight_location</a>(a,c,M,axis)</tt>	Compute the biweight location.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/funcs.py#L929'>biweight_midvariance</a>(a,c,M,axis)</tt>	Compute the biweight midvariance.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/funcs.py#L1034'>biweight_midcovariance</a>(a,c,M,transpose)</tt>	Compute the biweight midcovariance.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/funcs.py#L1127'>signal_to_noise_oir_ccd</a>(t,source_eps,sky_eps,dark_eps)</tt>	Computes the signal to noise ratio for source being observed in the optical/ir using a ccd.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/funcs.py#L1170'>bootstrap</a>(data,bootnum,samples,bootfunc)</tt>	Performs bootstrap resampling on numpy arrays.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/funcs.py#L1283'>_scipy_kraft_burrows_nousek</a>(N,B,CL)</tt>	Upper limit on a poisson count rate the implementation is based on kraft burrows and nousek.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/funcs.py#L1368'>_mpmath_kraft_burrows_nousek</a>(N,B,CL)</tt>	Upper limit on a poisson count rate the implementation is based on kraft burrows and nousek in.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/funcs.py#L1445'>_kraft_burrows_nousek</a>(N,B,CL)</tt>	Upper limit on a poisson count rate the implementation is based on kraft burrows and nousek in.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/jackknife.py#L13'>jackknife_resampling</a>(data)</tt>	Performs jackknife resampling on numpy arrays.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/jackknife.py#L60'>jackknife_stats</a>(data,statistic,conf_lvl)</tt>	Performs jackknife estimation on the basis of jackknife resamples.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.LombScargle <a href=' /stats/lombscargle/core.py#L164'>autofrequency</a>(samples_per_peak,nyquist_factor,minimum_frequency,maximum_frequency)</tt>	Determine a suitable frequency grid for data.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.LombScargle <a href=' /stats/lombscargle/core.py#L215'>autopower</a>(method,method_kwds,normalization,samples_per_peak)</tt>	Compute lomb-scargle power at automatically-determined frequencies parameters.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.LombScargle <a href=' /stats/lombscargle/core.py#L273'>power</a>(frequency,normalization,method,assume_regular_frequency)</tt>	Compute the lomb-scargle power at the given frequencies parameters.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.LombScargle <a href=' /stats/lombscargle/core.py#L334'>model</a>(t,frequency)</tt>	Compute the lomb-scargle model at the given frequency parameters.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.implementations. <a href=' /stats/lombscargle/implementations/slow_impl.py#L7'>lombscargle_slow</a>(t,y,dy,frequency)</tt>	Lomb-scargle periodogram this is a pure-python implementation of the original lomb-scargle formalism.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.implementations. <a href=' /stats/lombscargle/implementations/fastchi2_impl.py#L9'>lombscargle_fastchi2</a>(t,y,dy,f0)</tt>	Lomb-scargle periodogram this implements a fast chi-squared periodogram using the algorithm.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.implementations. <a href=' /stats/lombscargle/implementations/main.py#L60'>_get_frequency_grid</a>(frequency,assume_regular_frequency)</tt>	Utility to get grid parameters from a frequency array parameters.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.implementations. <a href=' /stats/lombscargle/implementations/main.py#L86'>validate_method</a>(method,dy,fit_mean,nterms)</tt>	Validate the method argument and if method='auto'.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.implementations. <a href=' /stats/lombscargle/implementations/main.py#L122'>lombscargle</a>(t,y,dy,frequency)</tt>	Compute the lomb-scargle periodogram with a given method.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.implementations. <a href=' /stats/lombscargle/implementations/chi2_impl.py#L8'>lombscargle_chi2</a>(t,y,dy,frequency)</tt>	Lomb-scargle periodogram this implements a chi-squared-based periodogram which is relatively slow.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.implementations. <a href=' /stats/lombscargle/implementations/fast_impl.py#L7'>lombscargle_fast</a>(t,y,dy,f0)</tt>	Fast lomb-scargle periodogram this implements the press & rybicki method [1]_ for fast o[n log n ].
<tt style='background-color:#E8E8E8;'> stats.lombscargle.implementations. <a href=' /stats/lombscargle/implementations/mle.py#L7'>design_matrix</a>(t,frequency,dy,bias)</tt>	Compute the lomb-scargle design matrix at the given frequency this is the matrix x such that the periodic model at the given frequency.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.implementations. <a href=' /stats/lombscargle/implementations/mle.py#L58'>periodic_fit</a>(t,y,dy,frequency)</tt>	Compute the lomb-scargle model fit at a given frequency.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.implementations. <a href=' /stats/lombscargle/implementations/scipy_impl.py#L6'>lombscargle_scipy</a>(t,y,frequency,normalization)</tt>	Lomb-scargle periodogram this is a wrapper of scipy.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.implementations. <a href=' /stats/lombscargle/implementations/utils.py#L9'>add_at</a>(arr,ind,vals)</tt>	Utility that computes np add at().
<tt style='background-color:#E8E8E8;'> stats.lombscargle.implementations. <a href=' /stats/lombscargle/implementations/utils.py#L26'>bitceil</a>(N)</tt>	Find the bit i e power of 2 immediately greater than or equal to n.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.implementations. <a href=' /stats/lombscargle/implementations/utils.py#L42'>extirpolate</a>(x,y,N,M)</tt>	Extirpolate the values x y onto an integer grid range n using lagrange polynomial weights on the m nearest points.
<tt style='background-color:#E8E8E8;'> stats.lombscargle.implementations. <a href=' /stats/lombscargle/implementations/utils.py#L108'>trig_sum</a>(t,h,df,N)</tt>	Compute approximate trigonometric sums for a number of frequencies this routine computes weighted sine and cosine sums.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L298'>_namelead</a>()</tt>	Helper function for constructing __repr__.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L317'>H0</a>()</tt>	Return the hubble constant as an ~astropy units quantity at z=0.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L322'>Om0</a>()</tt>	Omega matter matter density/critical density at z=0.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L327'>Ode0</a>()</tt>	Omega dark energy dark energy density/critical density at z=0.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L332'>Ob0</a>()</tt>	Omega baryon baryonic matter density/critical density at z=0.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L337'>Odm0</a>()</tt>	Omega dark matter dark matter density/critical density at z=0.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L342'>Ok0</a>()</tt>	Omega curvature the effective curvature density/critical density.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L348'>Tcmb0</a>()</tt>	Temperature of the cmb as ~astropy units quantity at z=0.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L353'>Tnu0</a>()</tt>	Temperature of the neutrino background as ~astropy units quantity at z=0.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L358'>Neff</a>()</tt>	Number of effective neutrino species.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L363'>has_massive_nu</a>()</tt>	Does this cosmology have at least one massive neutrino species?.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L370'>m_nu</a>()</tt>	Mass of neutrino species.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L388'>h</a>()</tt>	Dimensionless hubble constant h = h_0 / 100 [km/sec/mpc].
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L393'>hubble_time</a>()</tt>	Hubble time as ~astropy units quantity.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L398'>hubble_distance</a>()</tt>	Hubble distance as ~astropy units quantity.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L403'>critical_density0</a>()</tt>	Critical density as ~astropy units quantity at z=0.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L408'>Ogamma0</a>()</tt>	Omega gamma the density/critical density of photons at z=0.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L413'>Onu0</a>()</tt>	Omega nu the density/critical density of neutrinos at z=0.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L418'>clone</a>()</tt>	Returns a copy of this object potentially with some changes.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L479'>w</a>(z)</tt>	The dark energy equation of state.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L504'>Om</a>(z)</tt>	Return the density parameter for non-relativistic matter at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L529'>Ob</a>(z)</tt>	Return the density parameter for baryonic matter at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L555'>Odm</a>(z)</tt>	Return the density parameter for dark matter at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L586'>Ok</a>(z)</tt>	Return the equivalent density parameter for curvature at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L612'>Ode</a>(z)</tt>	Return the density parameter for dark energy at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L638'>Ogamma</a>(z)</tt>	Return the density parameter for photons at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L657'>Onu</a>(z)</tt>	Return the density parameter for massless neutrinos at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L686'>Tcmb</a>(z)</tt>	Return the cmb temperature at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L704'>Tnu</a>(z)</tt>	Return the neutrino temperature at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L722'>nu_relative_density</a>(z)</tt>	Neutrino density function relative to the energy density in photons.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L793'>_w_integrand</a>(ln1pz)</tt>	Internal convenience function for w z integral.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L803'>de_density_scale</a>(z)</tt>	Evaluates the redshift dependence of the dark energy density.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L853'>efunc</a>(z)</tt>	Function used to calculate h z the hubble parameter.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L887'>inv_efunc</a>(z)</tt>	Inverse of efunc.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L914'>_lookback_time_integrand_scalar</a>(z)</tt>	Integrand of the lookback time.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L935'>_tfunc</a>(z)</tt>	Integrand of the lookback time.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L961'>lookback_time_integrand</a>(z)</tt>	Integrand of the lookback time.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L986'>_abs_distance_integrand_scalar</a>(z)</tt>	Integrand of the absorption distance.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1007'>_xfunc</a>(z)</tt>	Integrand of the absorption distance.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1032'>abs_distance_integrand</a>(z)</tt>	Integrand of the absorption distance.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1056'>H</a>(z)</tt>	Hubble parameter (km/s/mpc) at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1072'>scale_factor</a>(z)</tt>	Scale factor at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1093'>lookback_time</a>(z)</tt>	Lookback time in gyr to redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1118'>lookback_distance</a>(z)</tt>	The lookback distance is the light travel time distance to a given redshift.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1137'>age</a>(z)</tt>	Age of the universe in gyr at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1160'>critical_density</a>(z)</tt>	Critical density in grams per cubic cm at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1176'>comoving_distance</a>(z)</tt>	Comoving line-of-sight distance in mpc at a given redshift.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1197'>_comoving_distance_z1z2</a>(z1,z2)</tt>	Comoving line-of-sight distance in mpc between objects at redshifts z1 and z2.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1221'>comoving_transverse_distance</a>(z)</tt>	Comoving transverse distance in mpc at a given redshift.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1247'>_comoving_transverse_distance_z1z2</a>(z1,z2)</tt>	Comoving transverse distance in mpc between two redshifts.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1284'>angular_diameter_distance</a>(z)</tt>	Angular diameter distance in mpc at a given redshift.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1310'>luminosity_distance</a>(z)</tt>	Luminosity distance in mpc at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1341'>angular_diameter_distance_z1z2</a>(z1,z2)</tt>	Angular diameter distance between objects at 2 redshifts.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1362'>absorption_distance</a>(z)</tt>	Absorption distance at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1389'>distmod</a>(z)</tt>	Distance modulus at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1417'>comoving_volume</a>(z)</tt>	Comoving volume in cubic mpc at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1451'>differential_comoving_volume</a>(z)</tt>	Differential comoving volume at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1477'>kpc_comoving_per_arcmin</a>(z)</tt>	Separation in transverse comoving kpc corresponding to an arcminute at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1495'>kpc_proper_per_arcmin</a>(z)</tt>	Separation in transverse proper kpc corresponding to an arcminute at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1513'>arcsec_per_kpc_comoving</a>(z)</tt>	Angular separation in arcsec corresponding to a comoving kpc at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.FLRW <a href=' /cosmology/core.py#L1531'>arcsec_per_kpc_proper</a>(z)</tt>	Angular separation in arcsec corresponding to a proper kpc at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.LambdaCDM <a href=' /cosmology/core.py#L1626'>w</a>(z)</tt>	Returns dark energy equation of state at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.LambdaCDM <a href=' /cosmology/core.py#L1653'>de_density_scale</a>(z)</tt>	Evaluates the redshift dependence of the dark energy density.
<tt style='background-color:#E8E8E8;'> cosmology.LambdaCDM <a href=' /cosmology/core.py#L1677'>efunc</a>(z)</tt>	Function used to calculate h z the hubble parameter.
<tt style='background-color:#E8E8E8;'> cosmology.LambdaCDM <a href=' /cosmology/core.py#L1709'>inv_efunc</a>(z)</tt>	Function used to calculate :math \frac{1}{h_z}.
<tt style='background-color:#E8E8E8;'> cosmology.FlatLambdaCDM <a href=' /cosmology/core.py#L1814'>efunc</a>(z)</tt>	Function used to calculate h z the hubble parameter.
<tt style='background-color:#E8E8E8;'> cosmology.FlatLambdaCDM <a href=' /cosmology/core.py#L1846'>inv_efunc</a>(z)</tt>	Function used to calculate :math \frac{1}{h_z}.
<tt style='background-color:#E8E8E8;'> cosmology.wCDM <a href=' /cosmology/core.py#L1967'>w0</a>()</tt>	Dark energy equation of state.
<tt style='background-color:#E8E8E8;'> cosmology.wCDM <a href=' /cosmology/core.py#L1972'>w</a>(z)</tt>	Returns dark energy equation of state at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.wCDM <a href=' /cosmology/core.py#L1999'>de_density_scale</a>(z)</tt>	Evaluates the redshift dependence of the dark energy density.
<tt style='background-color:#E8E8E8;'> cosmology.wCDM <a href=' /cosmology/core.py#L2023'>efunc</a>(z)</tt>	Function used to calculate h z the hubble parameter.
<tt style='background-color:#E8E8E8;'> cosmology.wCDM <a href=' /cosmology/core.py#L2053'>inv_efunc</a>(z)</tt>	Function used to calculate :math \frac{1}{h_z}.
<tt style='background-color:#E8E8E8;'> cosmology.FlatwCDM <a href=' /cosmology/core.py#L2174'>efunc</a>(z)</tt>	Function used to calculate h z the hubble parameter.
<tt style='background-color:#E8E8E8;'> cosmology.FlatwCDM <a href=' /cosmology/core.py#L2204'>inv_efunc</a>(z)</tt>	Function used to calculate :math \frac{1}{h_z}.
<tt style='background-color:#E8E8E8;'> cosmology.w0waCDM <a href=' /cosmology/core.py#L2332'>w0</a>()</tt>	Dark energy equation of state at z=0.
<tt style='background-color:#E8E8E8;'> cosmology.w0waCDM <a href=' /cosmology/core.py#L2337'>wa</a>()</tt>	Negative derivative of dark energy equation of state w r t a.
<tt style='background-color:#E8E8E8;'> cosmology.w0waCDM <a href=' /cosmology/core.py#L2342'>w</a>(z)</tt>	Returns dark energy equation of state at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.w0waCDM <a href=' /cosmology/core.py#L2369'>de_density_scale</a>(z)</tt>	Evaluates the redshift dependence of the dark energy density.
<tt style='background-color:#E8E8E8;'> cosmology.wpwaCDM <a href=' /cosmology/core.py#L2609'>wp</a>()</tt>	Dark energy equation of state at the pivot redshift zp.
<tt style='background-color:#E8E8E8;'> cosmology.wpwaCDM <a href=' /cosmology/core.py#L2614'>wa</a>()</tt>	Negative derivative of dark energy equation of state w r t a.
<tt style='background-color:#E8E8E8;'> cosmology.wpwaCDM <a href=' /cosmology/core.py#L2619'>zp</a>()</tt>	The pivot redshift where w z = wp.
<tt style='background-color:#E8E8E8;'> cosmology.wpwaCDM <a href=' /cosmology/core.py#L2624'>w</a>(z)</tt>	Returns dark energy equation of state at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.wpwaCDM <a href=' /cosmology/core.py#L2653'>de_density_scale</a>(z)</tt>	Evaluates the redshift dependence of the dark energy density.
<tt style='background-color:#E8E8E8;'> cosmology.w0wzCDM <a href=' /cosmology/core.py#L2790'>w0</a>()</tt>	Dark energy equation of state at z=0.
<tt style='background-color:#E8E8E8;'> cosmology.w0wzCDM <a href=' /cosmology/core.py#L2795'>wz</a>()</tt>	Derivative of the dark energy equation of state w r t z.
<tt style='background-color:#E8E8E8;'> cosmology.w0wzCDM <a href=' /cosmology/core.py#L2800'>w</a>(z)</tt>	Returns dark energy equation of state at redshift z.
<tt style='background-color:#E8E8E8;'> cosmology.w0wzCDM <a href=' /cosmology/core.py#L2827'>de_density_scale</a>(z)</tt>	Evaluates the redshift dependence of the dark energy density.
<tt style='background-color:#E8E8E8;'> cosmology. <a href=' /cosmology/core.py#L2866'>_float_or_none</a>(x,digits)</tt>	Helper function to format a variable that can be a float or none.
<tt style='background-color:#E8E8E8;'> cosmology. <a href=' /cosmology/core.py#L2874'>vectorize_if_needed</a>(func)</tt>	Helper function to vectorize functions on array inputs.
<tt style='background-color:#E8E8E8;'> cosmology.default_cosmology <a href=' /cosmology/core.py#L2930'>get_cosmology_from_string</a>(arg)</tt>	Return a cosmology instance from a string.
<tt style='background-color:#E8E8E8;'> cosmology. <a href=' /cosmology/funcs.py#L19'>z_at_value</a>(func,fval,zmin,zmax)</tt>	Find the redshift z at which func z = fval.
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/setup_package.py#L44'>determine_64_bit_int</a>()</tt>	The only configuration parameter needed at compile-time is how to specify a 64-bit signed integer.
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/setup_package.py#L73'>write_wcsconfig_h</a>(paths)</tt>	Writes out the wcsconfig h header with local configuration.
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/__init__.py#L37'>get_include</a>()</tt>	Get the path to astropy wcs's c header files.
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/utils.py#L18'>add_stokes_axis_to_wcs</a>(wcs,add_before_ind)</tt>	Add a new stokes axis that is uncorrelated with any other axes.
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/utils.py#L114'>wcs_to_celestial_frame</a>(wcs)</tt>	For a given wcs return the coordinate frame that matches the celestial component of the wcs.
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/utils.py#L152'>proj_plane_pixel_scales</a>(wcs)</tt>	For a wcs returns pixel scales along each axis of the image pixel at the crpix location once it is projected onto the.
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/utils.py#L196'>proj_plane_pixel_area</a>(wcs)</tt>	For a **celestial** wcs (see astropy wcs wcs celestial) returns pixel.
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/utils.py#L257'>is_proj_plane_distorted</a>(wcs,maxerr)</tt>	For a wcs returns false if square image detector pixels stay square when projected onto the "plane of intermediate world coordinates".
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/utils.py#L324'>non_celestial_pixel_scales</a>(inwcs)</tt>	Calculate the pixel scale along each axis of a non-celestial wcs for example one with mixed spectral and spatial axes.
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/utils.py#L351'>_has_distortion</a>(wcs)</tt>	True if contains any sip or image distortion components.
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/utils.py#L362'>skycoord_to_pixel</a>(coords,wcs,origin,mode)</tt>	Convert a set of skycoord coordinates into pixels.
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/utils.py#L433'>pixel_to_skycoord</a>(xp,yp,wcs,origin)</tt>	Convert a set of pixel coordinates into a ~astropy coordinates skycoord.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L533'>copy</a>()</tt>	Return a shallow copy of the object.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L546'>deepcopy</a>()</tt>	Return a deep copy of the object.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L563'>_fix_scamp</a>()</tt>	Remove scamp's pvi_m distortion parameters if sip distortion parameters are also present.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L606'>fix</a>(translate_units,naxis)</tt>	Perform the fix operations from wcslib and warn about any changes it has made.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L654'>calc_footprint</a>(header,undistort,axes,center)</tt>	Calculates the footprint of the image on the sky.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L723'>_read_det2im_kw</a>(header,fobj,err)</tt>	Create a distortion paper_ type lookup table for detector to image plane correction.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L824'>_write_det2im</a>(hdulist)</tt>	Writes a distortion paper_ type lookup table to the given astropy.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L870'>_read_distortion_kw</a>(header,fobj,dist,err)</tt>	Reads distortion paper_ table-lookup keywords and data and returns a 2-tuple of ~astropy.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L944'>_write_distortion_kw</a>(hdulist,dist)</tt>	Write out distortion paper_ keywords to the given fits.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L990'>_remove_sip_kw</a>(header)</tt>	Remove sip information from a header.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L1000'>_read_sip_kw</a>(header,wcskey)</tt>	Reads sip_ header keywords and returns a ~astropy wcs sip.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L1119'>_write_sip_kw</a>()</tt>	Write out sip keywords returns a dictionary of key-value.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L1206'>_array_converter</a>(func,sky)</tt>	A helper function to support reading either a pair of arrays or a single nx2 array.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L2394'>to_fits</a>(relax,key)</tt>	Generate an astropy io fits hdulist object with all of the.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L2437'>to_header</a>(relax,key)</tt>	Generate an astropy io fits header object with the basic wcs.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L2626'>to_header_string</a>(relax)</tt>	Identical to to_header, but returns a string containing the header cards.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L2633'>footprint_to_file</a>(filename,color,width,coordsys)</tt>	Writes out a ds9_ style regions file it can be loaded.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L2720'>__repr__</a>()</tt>	Return a short description simply porting the behavior from.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L2754'>get_axis_types</a>()</tt>	Similar to self wcsprm axis_types <astropy wcs wcsprm axis_types>.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L2851'>__reduce__</a>()</tt>	Support pickling of wcs objects this is done by serializing.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L2865'>dropaxis</a>(dropax)</tt>	Remove an axis from the wcs.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L2889'>swapaxes</a>(ax0,ax1)</tt>	Swap axes in a wcs.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L2912'>reorient_celestial_first</a>()</tt>	Reorient the wcs such that the celestial axes are first followed by the spectral axis followed by any others.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L2920'>slice</a>(view,numpy_order)</tt>	Slice a wcs instance using a numpy slice the order of the slice should.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L3012'>axis_type_names</a>()</tt>	World names for each coordinate axis.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L3029'>celestial</a>()</tt>	A copy of the current wcs with only the celestial axes included.
<tt style='background-color:#E8E8E8;'> wcs.WCS <a href=' /wcs/wcs.py#L3069'>_as_mpl_axes</a>()</tt>	Compatibility hook for matplotlib and wcsaxes.
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/wcs.py#L3091'>__WCS_unpickle__</a>(cls,dct,fits_data)</tt>	Unpickles a wcs object from a serialized fits string.
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/wcs.py#L3107'>find_all_wcs</a>(header,relax,keysel,fix)</tt>	Find all the wcs transformations in the given header.
<tt style='background-color:#E8E8E8;'> wcs. <a href=' /wcs/wcs.py#L3198'>validate</a>(source)</tt>	Prints a wcs validation report for the given fits file.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/console.py#L106'>_get_stdout</a>(stderr)</tt>	This utility function contains the logic to determine what streams to use by default for standard out/err.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/console.py#L137'>isatty</a>(file)</tt>	Returns true if file is a tty.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/console.py#L178'>terminal_size</a>(file)</tt>	Returns a tuple height width containing the height and width of the terminal.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/console.py#L219'>_color_text</a>(text,color)</tt>	Returns a string wrapped in ansi color codes for coloring the text in a terminal :.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/console.py#L266'>_decode_preferred_encoding</a>(s)</tt>	Decode the supplied byte string using the preferred encoding for the locale (locale.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/console.py#L284'>_write_with_fallback</a>(s,write,fileobj)</tt>	Write the supplied string with the given write function like write s , but use a writer for the locale's preferred encoding in case.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/console.py#L328'>color_print</a>()</tt>	Prints colors and styles to the terminal uses ansi escape sequences.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/console.py#L396'>strip_ansi_codes</a>(s)</tt>	Remove ansi color codes from the string.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/console.py#L403'>human_time</a>(seconds)</tt>	Returns a human-friendly time string that is always exactly 6 characters long.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/console.py#L452'>human_file_size</a>(size)</tt>	Returns a human-friendly string representing a file size that is 2-4 characters long.
<tt style='background-color:#E8E8E8;'> utils.ProgressBar <a href=' /utils/console.py#L602'>update</a>(value)</tt>	Update progress bar via the console or notebook accordingly.
<tt style='background-color:#E8E8E8;'> utils.ProgressBar <a href=' /utils/console.py#L618'>_update_console</a>(value)</tt>	Update the progress bar to the given value out of the total given to the constructor.
<tt style='background-color:#E8E8E8;'> utils.ProgressBar <a href=' /utils/console.py#L661'>_update_ipython_widget</a>(value)</tt>	Update the progress bar to the given value out of a total given to the constructor.
<tt style='background-color:#E8E8E8;'> utils.ProgressBar <a href=' /utils/console.py#L695'>map</a>(cls,function,items,multiprocess)</tt>	Does a map operation while displaying a progress bar with percentage complete.
<tt style='background-color:#E8E8E8;'> utils.ProgressBarOrSpinner <a href=' /utils/console.py#L940'>update</a>(value)</tt>	Update the progress bar to the given value (out of the total given to the constructor.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/console.py#L951'>print_code_line</a>(line,col,file,tabwidth)</tt>	Prints a line of source code highlighting a particular character position in the line.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/release.py#L22'>prereleaser_middle</a>(data)</tt>	Prereleaser middle hook to replace the version string in setup py.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/release.py#L32'>releaser_middle</a>(data)</tt>	Releaser middle hook to monkey-patch zest releaser to support signed.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/release.py#L241'>postreleaser_before</a>(data)</tt>	Postreleaser before hook to set a different dev_version_template from the.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/release.py#L252'>postreleaser_middle</a>(data)</tt>	Postreleaser middle hook to update the setup py with the new version see.
<tt style='background-color:#E8E8E8;'> utils.ScienceState <a href=' /utils/state.py#L36'>get</a>(cls)</tt>	Get the current science state value.
<tt style='background-color:#E8E8E8;'> utils.ScienceState <a href=' /utils/state.py#L43'>set</a>(cls,value)</tt>	Set the current science state value.
<tt style='background-color:#E8E8E8;'> utils.ScienceState <a href=' /utils/state.py#L68'>validate</a>(cls,value)</tt>	Validate the value and convert it to its native type if necessary.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L86'>_is_url</a>(string)</tt>	Test whether a string is a valid url.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L111'>get_readable_fileobj</a>(name_or_obj,encoding,cache,show_progress)</tt>	Given a filename pathlib path object or a readable file-like object return a context.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L360'>get_file_contents</a>()</tt>	Retrieves the contents of a filename or file-like object.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L376'>get_pkg_data_fileobj</a>(data_name,package,encoding,cache)</tt>	Retrieves a data file from the standard locations for the package and provides the file as a file-like object that reads bytes.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L491'>get_pkg_data_filename</a>(data_name,package,show_progress,remote_timeout)</tt>	Retrieves a data file from the standard locations for the package and provides a local filename for the data.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L606'>get_pkg_data_contents</a>(data_name,package,encoding,cache)</tt>	Retrieves a data file from the standard locations and returns its contents as a bytes object.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L684'>get_pkg_data_filenames</a>(datadir,package,pattern)</tt>	Returns the path of all of the data files in a given directory that match a given glob pattern.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L741'>get_pkg_data_fileobjs</a>(datadir,package,pattern,encoding)</tt>	Returns readable file objects for all of the data files in a given directory that match a given glob pattern.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L806'>compute_hash</a>(localfn)</tt>	Computes the md5 hash for a file.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L843'>_find_pkg_data_path</a>(data_name,package)</tt>	Look for data in the source-included data directories and return the path.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L884'>_find_hash_fn</a>(hash)</tt>	Looks for a local file by hash - returns file name if found and a valid file otherwise returns none.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L903'>get_free_space_in_dir</a>(path)</tt>	Given a path to a directory returns the amount of free space in bytes on that filesystem.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L934'>check_free_space_in_dir</a>(path,size)</tt>	Determines if a given directory has enough space to hold a file of a given size.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L961'>download_file</a>(remote_url,cache,show_progress,timeout)</tt>	Accepts a url downloads and optionally caches the result returning the filename with a name determined by the file's md5.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L1107'>is_url_in_cache</a>(url_key)</tt>	Check if a download from url_key is in the cache.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L1144'>download_files_in_parallel</a>(urls,cache,show_progress,timeout)</tt>	Downloads multiple files in parallel from the given urls blocks until.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L1216'>clear_download_cache</a>(hashorurl)</tt>	Clears the data file cache by deleting the local file s.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L1277'>_get_download_cache_locs</a>()</tt>	Finds the path to the data cache directory and makes them if they don't exist.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L1316'>_open_shelve</a>(shelffn,withclosing)</tt>	Opens a shelf file if withclosing is true it will be opened with closing.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data.py#L1336'>_acquire_download_cache_lock</a>()</tt>	Uses the lock directory method this is good because mkdir is.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/timer.py#L30'>timefunc</a>(num_tries,verbose)</tt>	Decorator to time a function or method.
<tt style='background-color:#E8E8E8;'> utils.RunTimePredictor <a href=' /utils/timer.py#L167'>results</a>()</tt>	Function outputs from time_func.
<tt style='background-color:#E8E8E8;'> utils.RunTimePredictor <a href=' /utils/timer.py#L177'>_timed_pfunc</a>(arg)</tt>	Run partial func once for single arg and time it.
<tt style='background-color:#E8E8E8;'> utils.RunTimePredictor <a href=' /utils/timer.py#L182'>_cache_time</a>(arg)</tt>	Cache timing results without repetition.
<tt style='background-color:#E8E8E8;'> utils.RunTimePredictor <a href=' /utils/timer.py#L194'>time_func</a>(arglist)</tt>	Time the partial function for a list of single args and store run time in a cache.
<tt style='background-color:#E8E8E8;'> utils.RunTimePredictor <a href=' /utils/timer.py#L215'>do_fit</a>(model,fitter,power,min_datapoints)</tt>	Fit a function to the lists of arguments and their respective run time in the cache.
<tt style='background-color:#E8E8E8;'> utils.RunTimePredictor <a href=' /utils/timer.py#L283'>predict_time</a>(arg)</tt>	Predict run time for given argument.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/introspection.py#L25'>resolve_name</a>(name)</tt>	Resolve a name like module object to an object and return it.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/introspection.py#L98'>minversion</a>(module,version,inclusive,version_path)</tt>	Returns true if the specified python module satisfies a minimum version requirement and false if not.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/introspection.py#L172'>find_current_module</a>(depth,finddiff)</tt>	Determines the module/package from which this function is called.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/introspection.py#L282'>find_mod_objs</a>(modname,onlylocals)</tt>	Returns all the public attributes of a module referenced by name.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/introspection.py#L350'>isinstancemethod</a>(cls,obj)</tt>	Returns true if the given object is an instance method of the class it is defined on (as opposed to a staticmethod or a classmethod).
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/decorators.py#L26'>deprecated</a>(since,message,name,alternative)</tt>	Used to mark a function or class as deprecated.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/decorators.py#L213'>deprecated_attribute</a>(name,since,message,alternative)</tt>	Used to mark a public attribute as deprecated this creates a.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/decorators.py#L276'>deprecated_renamed_argument</a>(old_name,new_name,since,arg_in_kwargs)</tt>	Deprecate a _renamed_ function argument.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/decorators.py#L851'>wraps</a>(wrapped,assigned,updated,exclude_args)</tt>	An alternative to functools wraps which also preserves the original.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/decorators.py#L952'>format_doc</a>(docstring)</tt>	Replaces the docstring of the decorated object and then formats it.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/misc.py#L39'>isiterable</a>(obj)</tt>	Returns true if the given object is iterable.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/misc.py#L49'>indent</a>(s,shift,width)</tt>	Indent a block of text the indentation is applied to each line.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/misc.py#L67'>silence</a>()</tt>	A context manager that silences sys stdout and sys stderr.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/misc.py#L80'>format_exception</a>(msg)</tt>	Given an exception message string uses new-style formatting arguments {filename}, {lineno}, {func} and/or {text} to fill in.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/misc.py#L161'>find_api_page</a>(obj,version,openinbrowser,timeout)</tt>	Determines the url of the api page for the specified object and optionally open that page in a web browser.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/misc.py#L283'>signal_number_to_name</a>(signum)</tt>	Given an os signal number returns a signal name if the signal.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/misc.py#L320'>is_path_hidden</a>(filepath)</tt>	Determines if a given file or directory is hidden.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/misc.py#L342'>walk_skip_hidden</a>(top,onerror,followlinks)</tt>	A wrapper for os walk that skips hidden files and directories.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/misc.py#L397'>strip_accents</a>(s)</tt>	Remove accents from a unicode string.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/misc.py#L408'>did_you_mean</a>(s,candidates,n,cutoff)</tt>	When a string isn't found in a set of candidates we can be nice to provide a list of alternatives in the exception.
<tt style='background-color:#E8E8E8;'> utils.OrderedDescriptor <a href=' /utils/misc.py#L598'>__lt__</a>(other)</tt>	Defined for convenient sorting of ordereddescriptor instances which are defined to sort in their creation order.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/misc.py#L821'>set_locale</a>(name)</tt>	Context manager to temporarily set the locale to name.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L883'>shape</a>()</tt>	The shape of the instance and underlying arrays.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L887'>_apply</a>(method)</tt>	Create a new instance with method applied to underlying data.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L908'>ndim</a>()</tt>	The number of dimensions of the instance and underlying arrays.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L913'>size</a>()</tt>	The size of the object as calculated from its shape.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L931'>__bool__</a>()</tt>	Any instance should evaluate to true except when it is empty.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L935'>__nonzero__</a>()</tt>	Any instance should evaluate to true except when it is empty.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L963'>copy</a>()</tt>	Return an instance containing copies of the internal data.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L970'>reshape</a>()</tt>	Returns an instance containing the same data with a new shape.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L982'>ravel</a>()</tt>	Return an instance with the array collapsed into one dimension.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L992'>flatten</a>()</tt>	Return a copy with the array collapsed into one dimension.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L999'>transpose</a>()</tt>	Return an instance with the data transposed.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L1007'>T</a>()</tt>	Return an instance with the data transposed.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L1019'>swapaxes</a>()</tt>	Return an instance with the given axes interchanged.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L1028'>diagonal</a>()</tt>	Return an instance with the specified diagonals.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L1036'>squeeze</a>()</tt>	Return an instance with single-dimensional shape entries removed parameters are as for :meth ~numpy.
<tt style='background-color:#E8E8E8;'> utils.ShapedLikeNDArray <a href=' /utils/misc.py#L1044'>take</a>(indices,axis,mode)</tt>	Return a new instance formed from the elements at the given indices.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/misc.py#L1059'>check_broadcast</a>()</tt>	Determines whether two or more numpy arrays can be broadcast with each other based on their shape tuple alone.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/metadata.py#L35'>common_dtype</a>(arrs)</tt>	Use numpy to find the common dtype for a list of ndarrays.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/metadata.py#L224'>enable_merge_strategies</a>()</tt>	Context manager to temporarily enable one or more custom metadata merge strategies.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/metadata.py#L283'>merge</a>(left,right,merge_func,metadata_conflicts)</tt>	Merge the left and right metadata objects.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/codegen.py#L30'>make_function_with_signature</a>(func,args,kwargs,varargs)</tt>	Make a new function from an existing function but with the desired signature.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data_info.py#L42'>dtype_info_name</a>(dtype)</tt>	Return a human-oriented string name of the dtype arg.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data_info.py#L79'>data_info_factory</a>(names,funcs)</tt>	Factory to create a function that can be used as an option for outputting data object summary information.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data_info.py#L127'>_get_obj_attrs_map</a>(obj,attrs)</tt>	Get the values for object attrs and return as a dict this.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/data_info.py#L148'>_get_data_attribute</a>(dat,attr)</tt>	Get a data object attribute for the attributes info summary method.
<tt style='background-color:#E8E8E8;'> utils.DataInfo <a href=' /utils/data_info.py#L281'>_represent_as_dict</a>()</tt>	Get the values for the parent attrs and return as a dict.
<tt style='background-color:#E8E8E8;'> utils.DataInfo <a href=' /utils/data_info.py#L302'>__call__</a>(option,out)</tt>	Write summary information about data object to the out filehandle.
<tt style='background-color:#E8E8E8;'> utils.BaseColumnInfo <a href=' /utils/data_info.py#L423'>iter_str_vals</a>()</tt>	This is a mixin-safe version of column iter_str_vals.
<tt style='background-color:#E8E8E8;'> utils.BaseColumnInfo <a href=' /utils/data_info.py#L437'>adjust_indices</a>(index,value,col_len)</tt>	Adjust info indices after column modification.
<tt style='background-color:#E8E8E8;'> utils.BaseColumnInfo <a href=' /utils/data_info.py#L475'>slice_indices</a>(col_slice,item,col_len)</tt>	Given a sliced object modify its indices to correctly represent the slice.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/argparse.py#L10'>directory</a>(arg)</tt>	An argument type (for use with the type= argument to argparse.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/argparse.py#L25'>readable_directory</a>(arg)</tt>	An argument type (for use with the type= argument to argparse.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/argparse.py#L42'>writeable_directory</a>(arg)</tt>	An argument type (for use with the type= argument to argparse.
<tt style='background-color:#E8E8E8;'> utils.xml. <a href=' /utils/xml/check.py#L14'>check_id</a>(ID)</tt>	Returns true if *id* is a valid xml id.
<tt style='background-color:#E8E8E8;'> utils.xml. <a href=' /utils/xml/check.py#L21'>fix_id</a>(ID)</tt>	Given an arbitrary string create one that can be used as an xml id.
<tt style='background-color:#E8E8E8;'> utils.xml. <a href=' /utils/xml/check.py#L41'>check_token</a>(token)</tt>	Returns true if *token* is a valid xml token as defined by xml schema part 2.
<tt style='background-color:#E8E8E8;'> utils.xml. <a href=' /utils/xml/check.py#L52'>check_mime_content_type</a>(content_type)</tt>	Returns true if *content_type* is a valid mime content type syntactically at least as defined by rfc 2045.
<tt style='background-color:#E8E8E8;'> utils.xml. <a href=' /utils/xml/check.py#L64'>check_anyuri</a>(uri)</tt>	Returns true if *uri* is a valid uri as defined in rfc 2396.
<tt style='background-color:#E8E8E8;'> utils.xml. <a href=' /utils/xml/validate.py#L17'>validate_schema</a>(filename,schema_file)</tt>	Validates an xml file against a schema or dtd.
<tt style='background-color:#E8E8E8;'> utils.xml. <a href=' /utils/xml/iterparser.py#L21'>_convert_to_fd_or_read_function</a>(fd)</tt>	Returns a function suitable for streaming input or a file object.
<tt style='background-color:#E8E8E8;'> utils.xml. <a href=' /utils/xml/iterparser.py#L141'>get_xml_iterator</a>(source,_debug_python_based_parser)</tt>	Returns an iterator over the elements of an xml file.
<tt style='background-color:#E8E8E8;'> utils.xml. <a href=' /utils/xml/iterparser.py#L183'>get_xml_encoding</a>(source)</tt>	Determine the encoding of an xml file by reading its header.
<tt style='background-color:#E8E8E8;'> utils.xml. <a href=' /utils/xml/iterparser.py#L204'>xml_readlines</a>(source)</tt>	Get the lines from a given xml file correctly determines the.
<tt style='background-color:#E8E8E8;'> utils.xml.XMLWriter <a href=' /utils/xml/writer.py#L85'>_flush</a>(indent,wrap)</tt>	Flush internal buffers.
<tt style='background-color:#E8E8E8;'> utils.xml.XMLWriter <a href=' /utils/xml/writer.py#L111'>start</a>(tag,attrib)</tt>	Opens a new element attributes can be given as keyword.
<tt style='background-color:#E8E8E8;'> utils.xml.XMLWriter <a href=' /utils/xml/writer.py#L155'>xml_cleaning_method</a>(method)</tt>	Context manager to control how xml data tags are cleaned escaped to remove potentially unsafe characters or constructs.
<tt style='background-color:#E8E8E8;'> utils.xml.XMLWriter <a href=' /utils/xml/writer.py#L211'>tag</a>(tag,attrib)</tt>	A convenience method for creating wrapper elements using the with statement.
<tt style='background-color:#E8E8E8;'> utils.xml.XMLWriter <a href=' /utils/xml/writer.py#L231'>comment</a>(comment)</tt>	Adds a comment to the output stream.
<tt style='background-color:#E8E8E8;'> utils.xml.XMLWriter <a href=' /utils/xml/writer.py#L244'>data</a>(text)</tt>	Adds character data to the output stream.
<tt style='background-color:#E8E8E8;'> utils.xml.XMLWriter <a href=' /utils/xml/writer.py#L255'>end</a>(tag,indent,wrap)</tt>	Closes the current element (opened by the most recent call to start).
<tt style='background-color:#E8E8E8;'> utils.xml.XMLWriter <a href=' /utils/xml/writer.py#L283'>close</a>(id)</tt>	Closes open elements up to and including the element identified by the given identifier.
<tt style='background-color:#E8E8E8;'> utils.xml.XMLWriter <a href=' /utils/xml/writer.py#L296'>element</a>(tag,text,wrap,attrib)</tt>	Adds an entire element this is the same as calling start,.
<tt style='background-color:#E8E8E8;'> utils.xml.XMLWriter <a href=' /utils/xml/writer.py#L310'>get_indentation</a>()</tt>	Returns the number of indentation levels the file is currently in.
<tt style='background-color:#E8E8E8;'> utils.xml.XMLWriter <a href=' /utils/xml/writer.py#L317'>get_indentation_spaces</a>(offset)</tt>	Returns a string of spaces that matches the current indentation level.
<tt style='background-color:#E8E8E8;'> utils.xml.XMLWriter <a href=' /utils/xml/writer.py#L324'>object_attrs</a>(obj,attrs)</tt>	Converts an object with a bunch of attributes on an object into a dictionary for use by the xmlwriter.
<tt style='background-color:#E8E8E8;'> utils.xml. <a href=' /utils/xml/unescaper.py#L22'>unescape_all</a>(url)</tt>	Recursively unescape a given url.
<tt style='background-color:#E8E8E8;'> utils.compat. <a href=' /utils/compat/numpycompat.py#L27'>_monkeypatch_unicode_mask_fill_values</a>()</tt>	Numpy < 1 8 0 on python 2 does not support unicode fill values since.
<tt style='background-color:#E8E8E8;'> utils.compat. <a href=' /utils/compat/misc.py#L27'>possible_filename</a>(filename)</tt>	Determine if the filename argument is an allowable type for a filename.
<tt style='background-color:#E8E8E8;'> utils.compat. <a href=' /utils/compat/misc.py#L58'>override__dir__</a>(f)</tt>	When overriding a __dir__ method on an object you often want to include the "standard" members on the object as well.
<tt style='background-color:#E8E8E8;'> utils.compat. <a href=' /utils/compat/_funcsigs.py#L50'>signature</a>(obj)</tt>	Get a signature object for the passed callable.
<tt style='background-color:#E8E8E8;'> utils.compat.Parameter <a href=' /utils/compat/_funcsigs.py#L277'>replace</a>(name,kind,annotation,default)</tt>	Creates a customized copy of the parameter.
<tt style='background-color:#E8E8E8;'> utils.compat.Signature <a href=' /utils/compat/_funcsigs.py#L469'>__init__</a>(parameters,return_annotation,__validate_parameters__)</tt>	Constructs signature from the given list of parameter objects and 'return_annotation'.
<tt style='background-color:#E8E8E8;'> utils.compat.Signature <a href=' /utils/compat/_funcsigs.py#L507'>from_function</a>(cls,func)</tt>	Constructs signature for the given python function.
<tt style='background-color:#E8E8E8;'> utils.compat.Signature <a href=' /utils/compat/_funcsigs.py#L591'>replace</a>(parameters,return_annotation)</tt>	Creates a customized copy of the signature.
<tt style='background-color:#E8E8E8;'> utils.compat.Signature <a href=' /utils/compat/_funcsigs.py#L643'>_bind</a>(args,kwargs,partial)</tt>	Private method don't use directly.
<tt style='background-color:#E8E8E8;'> utils.compat.Signature <a href=' /utils/compat/_funcsigs.py#L771'>bind</a>()</tt>	Get a boundarguments object that maps the passed args and kwargs to the function's signature.
<tt style='background-color:#E8E8E8;'> utils.compat.Signature <a href=' /utils/compat/_funcsigs.py#L778'>bind_partial</a>()</tt>	Get a boundarguments object that partially maps the passed args and kwargs to the function's signature.
<tt style='background-color:#E8E8E8;'> utils.compat.futures. <a href=' /utils/compat/futures/_base.py#L191'>as_completed</a>(fs,timeout)</tt>	An iterator over the given futures that yields each as it completes.
<tt style='background-color:#E8E8E8;'> utils.compat.futures. <a href=' /utils/compat/futures/_base.py#L259'>wait</a>(fs,timeout,return_when)</tt>	Wait for the futures in the given sequence to complete.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.Future <a href=' /utils/compat/futures/_base.py#L318'>__init__</a>()</tt>	Initializes the future should not be called by clients.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.Future <a href=' /utils/compat/futures/_base.py#L350'>cancel</a>()</tt>	Cancel the future if possible.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.Future <a href=' /utils/compat/futures/_base.py#L369'>cancelled</a>()</tt>	Return true if the future has cancelled.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.Future <a href=' /utils/compat/futures/_base.py#L374'>running</a>()</tt>	Return true if the future is currently executing.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.Future <a href=' /utils/compat/futures/_base.py#L379'>done</a>()</tt>	Return true of the future was cancelled or finished executing.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.Future <a href=' /utils/compat/futures/_base.py#L390'>add_done_callback</a>(fn)</tt>	Attaches a callable that will be called when the future finishes.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.Future <a href=' /utils/compat/futures/_base.py#L410'>result</a>(timeout)</tt>	Return the result of the call that the future represents.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.Future <a href=' /utils/compat/futures/_base.py#L450'>exception</a>(timeout)</tt>	Return the exception raised by the call that the future represents.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.Future <a href=' /utils/compat/futures/_base.py#L491'>set_running_or_notify_cancel</a>()</tt>	Mark the future as running or process any cancel notifications.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.Future <a href=' /utils/compat/futures/_base.py#L534'>set_result</a>(result)</tt>	Sets the return value of work associated with the future.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.Future <a href=' /utils/compat/futures/_base.py#L547'>set_exception</a>(exception)</tt>	Sets the result of the future as being the given exception.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.Executor <a href=' /utils/compat/futures/_base.py#L564'>submit</a>(fn)</tt>	Submits a callable to be executed with the given arguments.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.Executor <a href=' /utils/compat/futures/_base.py#L576'>map</a>(fn)</tt>	Returns a iterator equivalent to map fn iter.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.Executor <a href=' /utils/compat/futures/_base.py#L619'>shutdown</a>(wait)</tt>	Clean-up the resources associated with the executor.
<tt style='background-color:#E8E8E8;'> utils.compat.futures. <a href=' /utils/compat/futures/process.py#L94'>_remove_dead_thread_references</a>()</tt>	Remove inactive threads from _thread_references.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.ThreadPoolExecutor <a href=' /utils/compat/futures/thread.py#L105'>__init__</a>(max_workers)</tt>	Initializes a new threadpoolexecutor instance.
<tt style='background-color:#E8E8E8;'> utils.compat.futures. <a href=' /utils/compat/futures/process.py#L137'>_process_worker</a>(call_queue,result_queue,shutdown)</tt>	Evaluates calls from call_queue and places the results in result_queue.
<tt style='background-color:#E8E8E8;'> utils.compat.futures. <a href=' /utils/compat/futures/process.py#L174'>_add_call_item_to_queue</a>(pending_work_items,work_ids,call_queue)</tt>	Fills call_queue with _workitems from pending_work_items.
<tt style='background-color:#E8E8E8;'> utils.compat.futures. <a href=' /utils/compat/futures/process.py#L218'>_queue_manangement_worker</a>(executor_reference,processes,pending_work_items,work_ids_queue)</tt>	Manages the communication between this process and the worker processes.
<tt style='background-color:#E8E8E8;'> utils.compat.futures.ProcessPoolExecutor <a href=' /utils/compat/futures/process.py#L297'>__init__</a>(max_workers)</tt>	Initializes a new processpoolexecutor instance.
<tt style='background-color:#E8E8E8;'> utils.iers. <a href=' /utils/iers/iers.py#L73'>download_file</a>()</tt>	Overload astropy utils data download_file within iers module to use a.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS <a href=' /utils/iers/iers.py#L127'>open</a>(cls,file,cache)</tt>	Open an iers table reading it from a file if not loaded before.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS <a href=' /utils/iers/iers.py#L170'>close</a>(cls)</tt>	Remove the iers table from the class.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS <a href=' /utils/iers/iers.py#L179'>mjd_utc</a>(jd1,jd2)</tt>	Turn a time to mjd returning integer and fractional parts.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS <a href=' /utils/iers/iers.py#L204'>ut1_utc</a>(jd1,jd2,return_status)</tt>	Interpolate ut1-utc corrections in iers table for given dates.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS <a href=' /utils/iers/iers.py#L233'>pm_xy</a>(jd1,jd2,return_status)</tt>	Interpolate polar motions from iers table for given dates.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS <a href=' /utils/iers/iers.py#L264'>_check_interpolate_indices</a>(indices_orig,indices_clipped,max_input_mjd)</tt>	Check that the indices from interpolation match those after clipping to the valid table range.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS <a href=' /utils/iers/iers.py#L331'>_refresh_table_as_needed</a>(mjd)</tt>	Potentially update the iers table in place depending on the requested time values in mdj and the time span of the table.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS <a href=' /utils/iers/iers.py#L339'>ut1_utc_source</a>(i)</tt>	Source for ut1-utc to be overridden by subclass.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS <a href=' /utils/iers/iers.py#L343'>pm_source</a>(i)</tt>	Source for polar motion to be overridden by subclass.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS <a href=' /utils/iers/iers.py#L347'>time_now</a>()</tt>	Property to provide the current time but also allow for explicitly setting the _time_now attribute for testing purposes.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS_A <a href=' /utils/iers/iers.py#L375'>_combine_a_b_columns</a>(cls,iers_a)</tt>	Return a new table with appropriate combination of iers_a and b columns.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS_A <a href=' /utils/iers/iers.py#L429'>read</a>(cls,file,readme)</tt>	Read iers-a table from a finals2000a * file provided by usno.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS_A <a href=' /utils/iers/iers.py#L463'>ut1_utc_source</a>(i)</tt>	Set ut1-utc source flag for entries in iers table.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS_A <a href=' /utils/iers/iers.py#L471'>pm_source</a>(i)</tt>	Set polar motion source flag for entries in iers table.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS_B <a href=' /utils/iers/iers.py#L493'>read</a>(cls,file,readme,data_start)</tt>	Read iers-b table from a eopc04_iau2000 * file provided by iers.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS_B <a href=' /utils/iers/iers.py#L523'>ut1_utc_source</a>(i)</tt>	Set ut1-utc source flag for entries in iers table.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS_B <a href=' /utils/iers/iers.py#L527'>pm_source</a>(i)</tt>	Set pm source flag for entries in iers table.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS_Auto <a href=' /utils/iers/iers.py#L538'>open</a>(cls)</tt>	If the configuration setting astropy utils iers conf auto_download.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS_Auto <a href=' /utils/iers/iers.py#L587'>_check_interpolate_indices</a>(indices_orig,indices_clipped,max_input_mjd)</tt>	Check that the indices from interpolation match those after clipping to the valid table range.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS_Auto <a href=' /utils/iers/iers.py#L603'>_refresh_table_as_needed</a>(mjd)</tt>	Potentially update the iers table in place depending on the requested time values in mjd and the time span of the table.
<tt style='background-color:#E8E8E8;'> utils.iers.IERS_Auto <a href=' /utils/iers/iers.py#L679'>_substitute_iers_b</a>(cls,table)</tt>	Substitute iers b values with those from a real iers b table.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L268'>_init_from_vals</a>(val,val2,format,scale)</tt>	Set the internal _format scale and _time attrs from user inputs.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L306'>_get_time_fmt</a>(val,val2,format,scale)</tt>	Given the supplied val val2 format and scale try to instantiate the corresponding timeformat class to convert the input values into.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L349'>now</a>(cls)</tt>	Creates a new object corresponding to the instant in time this method is called.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L390'>format</a>()</tt>	Get or set time format.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L390'>format</a>(format)</tt>	Set time format.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L425'>_set_scale</a>(scale)</tt>	This is the key routine that actually does time scale conversions.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L482'>precision</a>()</tt>	Decimal precision when outputting seconds as floating point int value between 0 and 9 inclusive.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L498'>in_subfmt</a>()</tt>	Unix wildcard pattern to select subformats for parsing string input times.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L512'>out_subfmt</a>()</tt>	Unix wildcard pattern to select subformats for outputting times.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L540'>shape</a>()</tt>	The shape of the time instances.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L563'>jd1</a>()</tt>	First of the two doubles that internally store time value s in jd.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L570'>jd2</a>()</tt>	Second of the two doubles that internally store time value s in jd.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L577'>value</a>()</tt>	Time value s in current format.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L586'>light_travel_time</a>(skycoord,kind,location,ephemeris)</tt>	Light travel time correction to the barycentre or heliocentre.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L667'>sidereal_time</a>(kind,longitude,model)</tt>	Calculate sidereal time.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L734'>_erfa_sidereal_time</a>(model)</tt>	Calculate a sidereal time using a iau precession/nutation model.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L748'>copy</a>(format)</tt>	Return a fully independent copy the time object optionally changing the format.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L773'>replicate</a>(format,copy)</tt>	Return a replica of the time object optionally changing the format.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L804'>_apply</a>(method)</tt>	Create a new time object possibly applying a method to the arrays.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L899'>__copy__</a>()</tt>	Overrides the default behavior of the copy copy function in.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L907'>__deepcopy__</a>(memo)</tt>	Overrides the default behavior of the copy deepcopy function.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L915'>_advanced_index</a>(indices,axis,keepdims)</tt>	Turn argmin argmax output into an advanced index.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L958'>argmin</a>(axis,out)</tt>	Return indices of the minimum values along the given axis.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L980'>argmax</a>(axis,out)</tt>	Return indices of the maximum values along the given axis.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L994'>argsort</a>(axis)</tt>	Returns the indices that would sort the time array.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L1009'>min</a>(axis,out,keepdims)</tt>	Minimum along a given axis.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L1025'>max</a>(axis,out,keepdims)</tt>	Maximum along a given axis.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L1041'>ptp</a>(axis,out,keepdims)</tt>	Peak to peak maximum - minimum along a given axis.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L1058'>sort</a>(axis)</tt>	Return a copy sorted along the specified axis.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L1075'>cache</a>()</tt>	Return the cache associated with this instance.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L1082'>__getattr__</a>(attr)</tt>	Get dynamic attributes to output format or do timescale conversion.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L1128'>_match_shape</a>(val)</tt>	Ensure that val is matched to length of self if val has length 1.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L1146'>get_delta_ut1_utc</a>(iers_table,return_status)</tt>	Find ut1 - utc differences by interpolating in iers table.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L1194'>_get_delta_ut1_utc</a>(jd1,jd2)</tt>	Get erfa dut arg = ut1 - utc this getter takes optional jd1 and.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L1386'>_time_difference</a>(other,op)</tt>	If other is of same class as self return difference in self scale.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L1412'>__eq__</a>(other)</tt>	If other is an incompatible object for comparison return false.
<tt style='background-color:#E8E8E8;'> time.Time <a href=' /time/core.py#L1424'>__ne__</a>(other)</tt>	If other is an incompatible object for comparison return true.
<tt style='background-color:#E8E8E8;'> time.TimeDelta <a href=' /time/core.py#L1523'>_set_scale</a>(scale)</tt>	This is the key routine that actually does time scale conversions.
<tt style='background-color:#E8E8E8;'> time.TimeDelta <a href=' /time/core.py#L1612'>__neg__</a>()</tt>	Negation of a timedelta object.
<tt style='background-color:#E8E8E8;'> time.TimeDelta <a href=' /time/core.py#L1619'>__abs__</a>()</tt>	Absolute value of a timedelta object.
<tt style='background-color:#E8E8E8;'> time.TimeDelta <a href=' /time/core.py#L1628'>__mul__</a>(other)</tt>	Multiplication of timedelta objects by numbers/arrays.
<tt style='background-color:#E8E8E8;'> time.TimeDelta <a href=' /time/core.py#L1653'>__rmul__</a>(other)</tt>	Multiplication of numbers/arrays with timedelta objects.
<tt style='background-color:#E8E8E8;'> time.TimeDelta <a href=' /time/core.py#L1657'>__div__</a>(other)</tt>	Division of timedelta objects by numbers/arrays.
<tt style='background-color:#E8E8E8;'> time.TimeDelta <a href=' /time/core.py#L1661'>__rdiv__</a>(other)</tt>	Division by timedelta objects of numbers/arrays.
<tt style='background-color:#E8E8E8;'> time.TimeDelta <a href=' /time/core.py#L1665'>__truediv__</a>(other)</tt>	Division of timedelta objects by numbers/arrays.
<tt style='background-color:#E8E8E8;'> time.TimeDelta <a href=' /time/core.py#L1686'>__rtruediv__</a>(other)</tt>	Division by timedelta objects of numbers/arrays.
<tt style='background-color:#E8E8E8;'> time. <a href=' /time/core.py#L1699'>_make_array</a>(val,copy)</tt>	Take val and convert/reshape to an array if copy is true.
<tt style='background-color:#E8E8E8;'> time. <a href=' /time/formats.py#L45'>_regexify_subfmts</a>(subfmts)</tt>	Iterate through each of the sub-formats and try substituting simple regular expressions for the strptime codes for year month day-of-month.
<tt style='background-color:#E8E8E8;'> time.TimeFormat <a href=' /time/formats.py#L147'>_check_val_type</a>(val1,val2)</tt>	Input value validation typically overridden by derived classes.
<tt style='background-color:#E8E8E8;'> time.TimeFormat <a href=' /time/formats.py#L169'>_check_scale</a>(scale)</tt>	Return a validated scale value.
<tt style='background-color:#E8E8E8;'> time.TimeFormat <a href=' /time/formats.py#L195'>set_jds</a>(val1,val2)</tt>	Set internal jd1 and jd2 from val1 and val2 must be provided.
<tt style='background-color:#E8E8E8;'> time.TimeFormat <a href=' /time/formats.py#L202'>to_value</a>(parent)</tt>	Return time representation from internal jd1 and jd2 this is.
<tt style='background-color:#E8E8E8;'> time.TimeFromEpoch <a href=' /time/formats.py#L340'>set_jds</a>(val1,val2)</tt>	Initialize the internal jd1 and jd2 attributes given val1 and val2.
<tt style='background-color:#E8E8E8;'> time.TimeAstropyTime <a href=' /time/formats.py#L496'>__new__</a>(cls,val1,val2,scale)</tt>	Use __new__ instead of __init__ to output a class instance that is the same as the class of the first time object in the list.
<tt style='background-color:#E8E8E8;'> time.TimeDatetime <a href=' /time/formats.py#L548'>set_jds</a>(val1,val2)</tt>	Convert datetime object contained in val1 to jd1 jd2.
<tt style='background-color:#E8E8E8;'> time.TimeDatetime <a href=' /time/formats.py#L570'>to_value</a>(timezone,parent)</tt>	Convert to potentially timezone-aware ~datetime datetime object.
<tt style='background-color:#E8E8E8;'> time.TimeString <a href=' /time/formats.py#L685'>parse_string</a>(timestr,subfmts)</tt>	Read time from a single string using a set of possible formats.
<tt style='background-color:#E8E8E8;'> time.TimeString <a href=' /time/formats.py#L726'>set_jds</a>(val1,val2)</tt>	Parse the time strings contained in val1 and set jd1 jd2.
<tt style='background-color:#E8E8E8;'> time.TimeString <a href=' /time/formats.py#L742'>str_kwargs</a>()</tt>	Generator that yields a dict of values corresponding to the calendar date and time for the internal jd values.
<tt style='background-color:#E8E8E8;'> time.TimeString <a href=' /time/formats.py#L773'>format_string</a>(str_fmt)</tt>	Write time to a string using a given format.
<tt style='background-color:#E8E8E8;'> time.TimeString <a href=' /time/formats.py#L800'>_select_subfmts</a>(pattern)</tt>	Return a list of subformats where name matches pattern using fnmatch.
<tt style='background-color:#E8E8E8;'> time.TimeFITS <a href=' /time/formats.py#L944'>parse_string</a>(timestr,subfmts)</tt>	Read time and set scale according to trailing scale codes.
<tt style='background-color:#E8E8E8;'> time.TimeFITS <a href=' /time/formats.py#L981'>format_string</a>(str_fmt)</tt>	Format time-string append the scale to the normal isot format.
<tt style='background-color:#E8E8E8;'> time.TimeFITS <a href=' /time/formats.py#L990'>value</a>()</tt>	Convert times to strings using signed 5 digit if necessary.
<tt style='background-color:#E8E8E8;'> time.TimeBesselianEpoch <a href=' /time/formats.py#L1024'>_check_val_type</a>(val1,val2)</tt>	Input value validation typically overridden by derived classes.
<tt style='background-color:#E8E8E8;'> time.TimeDeltaFormat <a href=' /time/formats.py#L1101'>_check_scale</a>(scale)</tt>	Check that the scale is in the allowed list of scales or is none.
<tt style='background-color:#E8E8E8;'> time. <a href=' /time/utils.py#L15'>day_frac</a>(val1,val2,factor,divisor)</tt>	Return the sum of val1 and val2 as two float64s an integer part and the fractional remainder.
<tt style='background-color:#E8E8E8;'> time. <a href=' /time/utils.py#L57'>two_sum</a>(a,b)</tt>	Add a and b exactly returning the result as two float64s.
<tt style='background-color:#E8E8E8;'> time. <a href=' /time/utils.py#L80'>two_product</a>(a,b)</tt>	Multiple a and b exactly returning the result as two float64s.
<tt style='background-color:#E8E8E8;'> time. <a href=' /time/utils.py#L109'>split</a>(a)</tt>	Split float64 in two aligned parts.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPSimpleXMLRPCRequestHandler <a href=' /vo/samp/standard_profile.py#L39'>do_POST</a>()</tt>	Handles the http post request.
<tt style='background-color:#E8E8E8;'> vo.samp.HTTPSConnection <a href=' /vo/samp/ssl_utils.py#L44'>connect</a>()</tt>	Connect to a host on a given ssl port.
<tt style='background-color:#E8E8E8;'> vo.samp.SecureXMLRPCServer <a href=' /vo/samp/ssl_utils.py#L139'>__init__</a>(addr,key_file,cert_file,cert_reqs)</tt>	Secure xml-rpc server.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubServer <a href=' /vo/samp/hub.py#L254'>id</a>()</tt>	The unique hub id.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubServer <a href=' /vo/samp/hub.py#L442'>start</a>(wait)</tt>	Start the current samp hub instance and create the lock file hub.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubServer <a href=' /vo/samp/hub.py#L484'>params</a>()</tt>	The hub parameters which are written to the logfile.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubServer <a href=' /vo/samp/hub.py#L549'>stop</a>()</tt>	Stop the current samp hub instance and delete the lock file.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubServer <a href=' /vo/samp/hub.py#L605'>is_running</a>()</tt>	Return an information concerning the hub running status.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubServer <a href=' /vo/samp/hub.py#L1002'>get_mtype_subtypes</a>(mtype)</tt>	Return a list containing all the possible wildcarded subtypes of mtype.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubServer <a href=' /vo/samp/hub.py#L1237'>_reply</a>(private_key,msg_id,response)</tt>	The main method that gets called for replying this starts up an.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubServer <a href=' /vo/samp/hub.py#L1284'>_retry_method</a>(recipient_private_key,recipient_public_id,samp_method_name,arg_params)</tt>	This method is used to retry a samp call several times.
<tt style='background-color:#E8E8E8;'> vo.samp. <a href=' /vo/samp/hub_script.py#L22'>hub_script</a>(timeout)</tt>	This main function is executed by the samp_hub command line tool.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L180'>start</a>()</tt>	Start the client in a separate thread non-blocking.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L191'>stop</a>(timeout)</tt>	Stop the client.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L211'>is_running</a>()</tt>	Whether the client is currently running.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L218'>is_registered</a>()</tt>	Whether the client is currently registered.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L285'>receive_notification</a>(private_key,sender_id,message)</tt>	Standard callable client receive_notification method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L336'>receive_call</a>(private_key,sender_id,msg_id,message)</tt>	Standard callable client receive_call method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L378'>receive_response</a>(private_key,responder_id,msg_tag,response)</tt>	Standard callable client receive_response method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L414'>bind_receive_message</a>(mtype,function,declare,metadata)</tt>	Bind a specific mtype to a function or class method being intended for a call or a notification.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L457'>bind_receive_notification</a>(mtype,function,declare,metadata)</tt>	Bind a specific mtype notification to a function or class method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L499'>bind_receive_call</a>(mtype,function,declare,metadata)</tt>	Bind a specific mtype call to a function or class method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L542'>bind_receive_response</a>(msg_tag,function)</tt>	Bind a specific msg-tag response to a function or class method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L568'>unbind_receive_notification</a>(mtype,declare)</tt>	Remove from the notifications binding table the specified mtype and unsubscribe the client from it if required.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L590'>unbind_receive_call</a>(mtype,declare)</tt>	Remove from the calls binding table the specified mtype and unsubscribe the client from it if required.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L612'>unbind_receive_response</a>(msg_tag)</tt>	Remove from the responses binding table the specified message-tag.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L626'>declare_subscriptions</a>(subscriptions)</tt>	Declares the mtypes the client wishes to subscribe to implicitly defined with the mtype binding methods.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L650'>register</a>()</tt>	Register the client to the samp hub.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L686'>unregister</a>()</tt>	Unregister the client from the samp hub.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L728'>declare_metadata</a>(metadata)</tt>	Declare the client application metadata supported.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L748'>get_private_key</a>()</tt>	Return the client private key used for the standard profile communications obtained at registration time (samp.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPClient <a href=' /vo/samp/client.py#L760'>get_public_id</a>()</tt>	Return public client id obtained at registration time (samp.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L33'>is_connected</a>()</tt>	Whether the hub proxy is currently connected to a hub.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L40'>connect</a>(hub,hub_params,key_file,cert_file)</tt>	Connect to the current samp hub.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L142'>disconnect</a>()</tt>	Disconnect from the current samp hub.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L153'>_samp_hub</a>()</tt>	Property to abstract away the path to the hub which allows this class to be used for other profiles.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L161'>ping</a>()</tt>	Proxy to ping samp hub method standard profile only.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L167'>set_xmlrpc_callback</a>(private_key,xmlrpc_addr)</tt>	Proxy to setxmlrpccallback samp hub method standard profile only.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L173'>register</a>(secret)</tt>	Proxy to register samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L179'>unregister</a>(private_key)</tt>	Proxy to unregister samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L185'>declare_metadata</a>(private_key,metadata)</tt>	Proxy to declaremetadata samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L191'>get_metadata</a>(private_key,client_id)</tt>	Proxy to getmetadata samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L197'>declare_subscriptions</a>(private_key,subscriptions)</tt>	Proxy to declaresubscriptions samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L203'>get_subscriptions</a>(private_key,client_id)</tt>	Proxy to getsubscriptions samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L209'>get_registered_clients</a>(private_key)</tt>	Proxy to getregisteredclients samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L215'>get_subscribed_clients</a>(private_key,mtype)</tt>	Proxy to getsubscribedclients samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L221'>notify</a>(private_key,recipient_id,message)</tt>	Proxy to notify samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L227'>notify_all</a>(private_key,message)</tt>	Proxy to notifyall samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L233'>call</a>(private_key,recipient_id,msg_tag,message)</tt>	Proxy to call samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L239'>call_all</a>(private_key,msg_tag,message)</tt>	Proxy to callall samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L245'>call_and_wait</a>(private_key,recipient_id,message,timeout)</tt>	Proxy to callandwait samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPHubProxy <a href=' /vo/samp/hub_proxy.py#L252'>reply</a>(private_key,msg_id,response)</tt>	Proxy to reply samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp. <a href=' /vo/samp/utils.py#L38'>getattr_recursive</a>(variable,attribute)</tt>	Get attributes recursively.
<tt style='background-color:#E8E8E8;'> vo.samp. <a href=' /vo/samp/utils.py#L154'>get_num_args</a>(f)</tt>	Find the number of arguments a function or method takes (excluding self).
<tt style='background-color:#E8E8E8;'> vo.samp. <a href=' /vo/samp/lockfile_helpers.py#L36'>read_lockfile</a>(lockfilename)</tt>	Read in the lockfile given by lockfilename into a dictionary.
<tt style='background-color:#E8E8E8;'> vo.samp. <a href=' /vo/samp/lockfile_helpers.py#L131'>get_main_running_hub</a>()</tt>	Get either the hub given by the environment variable samp_hub or the one given by the lockfile.
<tt style='background-color:#E8E8E8;'> vo.samp. <a href=' /vo/samp/lockfile_helpers.py#L154'>get_running_hubs</a>()</tt>	Return a dictionary containing the lock-file contents of all the currently running hubs (single and/or multiple mode).
<tt style='background-color:#E8E8E8;'> vo.samp. <a href=' /vo/samp/lockfile_helpers.py#L207'>check_running_hub</a>(lockfilename)</tt>	Test whether a hub identified by lockfilename is running or not.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L117'>is_connected</a>()</tt>	Testing method to verify the client connection with a running hub.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L129'>connect</a>(hub,hub_params,key_file,cert_file)</tt>	Connect with the current or specified samp hub start and register the client.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L198'>disconnect</a>()</tt>	Unregister the client from the current samp hub stop the client and disconnect from the hub.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L212'>ping</a>()</tt>	Proxy to ping samp hub method standard profile only.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L218'>declare_metadata</a>(metadata)</tt>	Proxy to declaremetadata samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L224'>get_metadata</a>(client_id)</tt>	Proxy to getmetadata samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L230'>get_subscriptions</a>(client_id)</tt>	Proxy to getsubscriptions samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L236'>get_registered_clients</a>()</tt>	Proxy to getregisteredclients samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L244'>get_subscribed_clients</a>(mtype)</tt>	Proxy to getsubscribedclients samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L264'>notify</a>(recipient_id,message)</tt>	Proxy to notify samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L270'>enotify</a>(recipient_id,mtype)</tt>	Easy to use version of :meth ~astropy vo samp integrated_client sampintegratedclient notify.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L303'>notify_all</a>(message)</tt>	Proxy to notifyall samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L309'>enotify_all</a>(mtype)</tt>	Easy to use version of :meth ~astropy vo samp integrated_client sampintegratedclient notify_all.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L340'>call</a>(recipient_id,msg_tag,message)</tt>	Proxy to call samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L346'>ecall</a>(recipient_id,msg_tag,mtype)</tt>	Easy to use version of :meth ~astropy vo samp integrated_client sampintegratedclient call.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L384'>call_all</a>(msg_tag,message)</tt>	Proxy to callall samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L390'>ecall_all</a>(msg_tag,mtype)</tt>	Easy to use version of :meth ~astropy vo samp integrated_client sampintegratedclient call_all.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L424'>call_and_wait</a>(recipient_id,message,timeout)</tt>	Proxy to callandwait samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L430'>ecall_and_wait</a>(recipient_id,mtype,timeout)</tt>	Easy to use version of :meth ~astropy vo samp integrated_client sampintegratedclient call_and_wait.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L467'>reply</a>(msg_id,response)</tt>	Proxy to reply samp hub method.
<tt style='background-color:#E8E8E8;'> vo.samp.SAMPIntegratedClient <a href=' /vo/samp/integrated_client.py#L483'>ereply</a>(msg_id,status,result,error)</tt>	Easy to use version of :meth ~astropy vo samp integrated_client sampintegratedclient reply.
<tt style='background-color:#E8E8E8;'> vo.validator.ConeSearchResults <a href=' /vo/validator/inspect.py#L78'>list_cats</a>(typ,fout,ignore_noncrit)</tt>	List catalogs in given database.
<tt style='background-color:#E8E8E8;'> vo.validator.ConeSearchResults <a href=' /vo/validator/inspect.py#L135'>print_cat</a>(key,fout)</tt>	Display a single catalog of given key.
<tt style='background-color:#E8E8E8;'> vo.validator. <a href=' /vo/validator/inspect.py#L167'>_exclude_noncrit</a>(in_list)</tt>	Exclude any items in input list containing astropy.
<tt style='background-color:#E8E8E8;'> vo.validator. <a href=' /vo/validator/validate.py#L37'>check_conesearch_sites</a>(destdir,verbose,parallel,url_list)</tt>	Validate cone search services.
<tt style='background-color:#E8E8E8;'> vo.validator. <a href=' /vo/validator/validate.py#L237'>_do_validation</a>(args)</tt>	Validation for multiprocessing support.
<tt style='background-color:#E8E8E8;'> vo.validator. <a href=' /vo/validator/validate.py#L295'>_categorize_result</a>(r)</tt>	Set success codes.
<tt style='background-color:#E8E8E8;'> vo.validator. <a href=' /vo/validator/validate.py#L328'>_html_subindex</a>(args)</tt>	Html writer for multiprocessing support.
<tt style='background-color:#E8E8E8;'> vo.validator. <a href=' /vo/validator/validate.py#L334'>_copy_r_to_cat</a>(r,cat)</tt>	Copy validation result attributes to given vo catalog.
<tt style='background-color:#E8E8E8;'> vo.validator. <a href=' /vo/validator/tstquery.py#L28'>parse_cs</a>(id)</tt>	Return <testquery> pars as dict for given resource id.
<tt style='background-color:#E8E8E8;'> vo.client.AsyncBase <a href=' /vo/client/async.py#L51'>__getattr__</a>(what)</tt>	Expose executor and future methods.
<tt style='background-color:#E8E8E8;'> vo.client.AsyncBase <a href=' /vo/client/async.py#L58'>get</a>(timeout)</tt>	Get result if available then shut down thread.
<tt style='background-color:#E8E8E8;'> vo.client.VOSBase <a href=' /vo/client/vos_catalog.py#L54'>__getattr__</a>(what)</tt>	Expose dictionary attributes.
<tt style='background-color:#E8E8E8;'> vo.client.VOSBase <a href=' /vo/client/vos_catalog.py#L58'>__getitem__</a>(what)</tt>	Expose dictionary key look-up.
<tt style='background-color:#E8E8E8;'> vo.client.VOSBase <a href=' /vo/client/vos_catalog.py#L62'>__setitem__</a>(what,value)</tt>	Expose dictionary key assignment.
<tt style='background-color:#E8E8E8;'> vo.client.VOSBase <a href=' /vo/client/vos_catalog.py#L66'>__iter__</a>()</tt>	Expose dictionary iteration.
<tt style='background-color:#E8E8E8;'> vo.client.VOSBase <a href=' /vo/client/vos_catalog.py#L70'>dumps</a>()</tt>	Dump the contents into a string.
<tt style='background-color:#E8E8E8;'> vo.client.VOSCatalog <a href=' /vo/client/vos_catalog.py#L107'>__str__</a>()</tt>	Show the most important and unique things about a catalog.
<tt style='background-color:#E8E8E8;'> vo.client.VOSCatalog <a href=' /vo/client/vos_catalog.py#L114'>delete_attribute</a>(key)</tt>	Delete given metadata key and its value from the catalog.
<tt style='background-color:#E8E8E8;'> vo.client.VOSCatalog <a href=' /vo/client/vos_catalog.py#L136'>create</a>(cls,title,url)</tt>	Create a new vo service catalog with user parameters.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L201'>__str__</a>()</tt>	Show the most important and unique things about a database.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L205'>__len__</a>()</tt>	Return the number of catalogs in database.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L209'>version</a>()</tt>	Database version number.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L214'>get_catalogs</a>()</tt>	Iterator to get all catalogs.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L219'>get_catalogs_by_url</a>(url)</tt>	Like :func get_catalogs but using access url look-up.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L225'>get_catalog</a>(name)</tt>	Get one catalog of given name.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L248'>get_catalog_by_url</a>(url)</tt>	Like :func get_catalog but using access url look-up.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L260'>_match_pattern</a>(all_keys,pattern,sort)</tt>	Used by :func list_catalogs and :func list_catalogs_by_url.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L275'>list_catalogs</a>(pattern,sort)</tt>	List catalog names.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L298'>list_catalogs_by_url</a>(pattern,sort)</tt>	Like :func list_catalogs but using access url.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L305'>add_catalog</a>(name,cat,allow_duplicate_url)</tt>	Add a catalog to database.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L346'>add_catalog_by_url</a>(name,url)</tt>	Like :func add_catalog but the catalog is created with only the given name and access url.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L364'>delete_catalog</a>(name)</tt>	Delete a catalog from database with given name.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L384'>delete_catalog_by_url</a>(url)</tt>	Like :func delete_catalog but using access url.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L397'>merge</a>(other)</tt>	Merge two database together.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L433'>to_json</a>(filename,overwrite)</tt>	Write database content to a json file.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L460'>create_empty</a>(cls)</tt>	Create an empty database of vo services.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L480'>from_json</a>(cls,filename)</tt>	Create a database of vo services from a json file.
<tt style='background-color:#E8E8E8;'> vo.client.VOSDatabase <a href=' /vo/client/vos_catalog.py#L521'>from_registry</a>(cls,registry_url,timeout)</tt>	Create a database of vo services from vo registry url.
<tt style='background-color:#E8E8E8;'> vo.client. <a href=' /vo/client/vos_catalog.py#L622'>get_remote_catalog_db</a>(dbname,cache,verbose)</tt>	Get a database of vo services which is a json file from a remote location.
<tt style='background-color:#E8E8E8;'> vo.client. <a href=' /vo/client/vos_catalog.py#L655'>_get_catalogs</a>(service_type,catalog_db)</tt>	Expand catalog_db to a list of catalogs.
<tt style='background-color:#E8E8E8;'> vo.client. <a href=' /vo/client/vos_catalog.py#L696'>_vo_service_request</a>(url,pedantic,kwargs,cache)</tt>	This is called by :func call_vo_service.
<tt style='background-color:#E8E8E8;'> vo.client. <a href=' /vo/client/vos_catalog.py#L721'>vo_tab_parse</a>(tab,url,kwargs)</tt>	In case of errors from the server a complete and correct 'stub' votable file may still be returned.
<tt style='background-color:#E8E8E8;'> vo.client. <a href=' /vo/client/vos_catalog.py#L794'>call_vo_service</a>(service_type,catalog_db,pedantic,verbose)</tt>	Makes a generic vo service call.
<tt style='background-color:#E8E8E8;'> vo.client. <a href=' /vo/client/conesearch.py#L297'>list_catalogs</a>(service_type,cache,verbose)</tt>	List the catalogs available for the given service type.
<tt style='background-color:#E8E8E8;'> vo.client. <a href=' /vo/client/conesearch.py#L82'>conesearch</a>(center,radius,verb)</tt>	Perform cone search and returns the result of the first successful query.
<tt style='background-color:#E8E8E8;'> vo.client. <a href=' /vo/client/conesearch.py#L243'>search_all</a>()</tt>	Perform cone search and returns the results of all successful queries.
<tt style='background-color:#E8E8E8;'> vo.client. <a href=' /vo/client/conesearch.py#L297'>list_catalogs</a>()</tt>	Return the available cone search catalogs as a list of strings.
<tt style='background-color:#E8E8E8;'> vo.client. <a href=' /vo/client/conesearch.py#L335'>predict_search</a>(url)</tt>	Predict the run time needed and the number of objects for a cone search for the given access url position and.
<tt style='background-color:#E8E8E8;'> vo.client. <a href=' /vo/client/conesearch.py#L470'>conesearch_timer</a>()</tt>	Time a single cone search using astropy utils timer timefunc.
<tt style='background-color:#E8E8E8;'> vo.client. <a href=' /vo/client/conesearch.py#L493'>_local_conversion</a>(func,x)</tt>	Try func x and replace valueerror with conesearcherror.
<tt style='background-color:#E8E8E8;'> vo.client. <a href=' /vo/client/conesearch.py#L517'>_validate_sr</a>(radius)</tt>	Validate search radius.
<tt style='background-color:#E8E8E8;'> visualization. <a href=' /visualization/ui.py#L15'>scale_image</a>(image,scale,power,asinh_a)</tt>	Perform scaling/stretching of an image between minimum and maximum cut levels.
<tt style='background-color:#E8E8E8;'> visualization. <a href=' /visualization/hist.py#L12'>hist</a>(x,bins,ax)</tt>	Enhanced histogram function this is a histogram function that enables the use of more sophisticated.
<tt style='background-color:#E8E8E8;'> visualization. <a href=' /visualization/mpl_normalize.py#L137'>simple_norm</a>(data,stretch,power,asinh_a)</tt>	Return a normalization class that can be used for displaying images with matplotlib.
<tt style='background-color:#E8E8E8;'> visualization. <a href=' /visualization/stretch.py#L22'>_logn</a>(n,x,out)</tt>	Calculate the log base n of x.
<tt style='background-color:#E8E8E8;'> visualization. <a href=' /visualization/stretch.py#L33'>_prepare</a>(values,clip,out)</tt>	Prepare the data by optionally clipping and copying and return the array that should be subsequently used for in-place calculations.
<tt style='background-color:#E8E8E8;'> visualization.BaseStretch <a href=' /visualization/stretch.py#L57'>__call__</a>(values,clip,out)</tt>	Transform values using this stretch.
<tt style='background-color:#E8E8E8;'> visualization.BaseStretch <a href=' /visualization/stretch.py#L79'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.LinearStretch <a href=' /visualization/stretch.py#L97'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.SqrtStretch <a href=' /visualization/stretch.py#L118'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.PowerStretch <a href=' /visualization/stretch.py#L148'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.PowerDistStretch <a href=' /visualization/stretch.py#L183'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.InvertedPowerDistStretch <a href=' /visualization/stretch.py#L219'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.SquaredStretch <a href=' /visualization/stretch.py#L238'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.LogStretch <a href=' /visualization/stretch.py#L271'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.InvertedLogStretch <a href=' /visualization/stretch.py#L304'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.AsinhStretch <a href=' /visualization/stretch.py#L340'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.SinhStretch <a href=' /visualization/stretch.py#L372'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.HistEqStretch <a href=' /visualization/stretch.py#L410'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.InvertedHistEqStretch <a href=' /visualization/stretch.py#L441'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.ContrastBiasStretch <a href=' /visualization/stretch.py#L486'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.InvertedContrastBiasStretch <a href=' /visualization/stretch.py#L525'>inverse</a>()</tt>	A stretch object that performs the inverse operation.
<tt style='background-color:#E8E8E8;'> visualization.BaseInterval <a href=' /visualization/interval.py#L31'>get_limits</a>(values)</tt>	Return the minimum and maximum value in the interval based on the values provided.
<tt style='background-color:#E8E8E8;'> visualization.BaseInterval <a href=' /visualization/interval.py#L48'>__call__</a>(values,clip,out)</tt>	Transform values using this interval.
<tt style='background-color:#E8E8E8;'> visualization. <a href=' /visualization/units.py#L12'>quantity_support</a>(format)</tt>	Enable support for plotting astropy units quantity instances in.
<tt style='background-color:#E8E8E8;'> visualization. <a href=' /visualization/lupton_rgb.py#L18'>compute_intensity</a>(image_r,image_g,image_b)</tt>	Return a naive total intensity from the red blue and green intensities.
<tt style='background-color:#E8E8E8;'> visualization.Mapping <a href=' /visualization/lupton_rgb.py#L75'>make_rgb_image</a>(image_r,image_g,image_b)</tt>	Convert 3 arrays image_r image_g and image_b into an 8-bit rgb image.
<tt style='background-color:#E8E8E8;'> visualization.Mapping <a href=' /visualization/lupton_rgb.py#L103'>intensity</a>(image_r,image_g,image_b)</tt>	Return the total intensity from the red blue and green intensities.
<tt style='background-color:#E8E8E8;'> visualization.Mapping <a href=' /visualization/lupton_rgb.py#L126'>map_intensity_to_uint8</a>(I)</tt>	Return an array which when multiplied by an image returns that image mapped to the range of a uint8 [0 255] but not converted to uint8.
<tt style='background-color:#E8E8E8;'> visualization.Mapping <a href=' /visualization/lupton_rgb.py#L147'>_convert_images_to_uint8</a>(image_r,image_g,image_b)</tt>	Use the mapping to convert images image_r image_g and image_b to a triplet of uint8 images.
<tt style='background-color:#E8E8E8;'> visualization. <a href=' /visualization/lupton_rgb.py#L330'>make_lupton_rgb</a>(image_r,image_g,image_b,minimum)</tt>	Return a red/green/blue color image from up to 3 images using an asinh stretch.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes. <a href=' /visualization/wcsaxes/patches.py#L16'>_rotate_polygon</a>(lon,lat,lon0,lat0)</tt>	Given a polygon with vertices defined by lon lat rotate the polygon such that the north pole of the spherical coordinates is now at (lon0.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.WCSAxes <a href=' /visualization/wcsaxes/core.py#L144'>imshow</a>(X)</tt>	Wrapper to matplotlib's :meth ~matplotlib axes axes imshow.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.WCSAxes <a href=' /visualization/wcsaxes/core.py#L178'>plot_coord</a>()</tt>	Plot ~astropy coordinates skycoord or.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.WCSAxes <a href=' /visualization/wcsaxes/core.py#L231'>reset_wcs</a>(wcs,slices,transform,coord_meta)</tt>	Reset the current axes to use a new wcs object.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.WCSAxes <a href=' /visualization/wcsaxes/core.py#L393'>get_transform</a>(frame)</tt>	Return a transform from the specified frame to display coordinates.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.WCSAxes <a href=' /visualization/wcsaxes/core.py#L426'>_get_transform_no_transdata</a>(frame)</tt>	Return a transform from data to the specified frame.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.WCSAxes <a href=' /visualization/wcsaxes/core.py#L489'>grid</a>(b,axis)</tt>	Plot gridlines for both coordinates.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.TickLabels <a href=' /visualization/wcsaxes/ticklabels.py#L48'>sort</a>()</tt>	Sort by axis displacement which allows us to figure out which parts of labels to not repeat.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.TickLabels <a href=' /visualization/wcsaxes/ticklabels.py#L60'>simplify_labels</a>()</tt>	Figure out which parts of labels can be dropped to avoid repetition.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CurvedTransform <a href=' /visualization/wcsaxes/transforms.py#L37'>transform_path</a>(path)</tt>	Transform a matplotlib path parameters.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.WCSWorld2PixelTransform <a href=' /visualization/wcsaxes/transforms.py#L89'>transform</a>(world)</tt>	Transform world to pixel coordinates you should pass in a nxm array.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.WCSWorld2PixelTransform <a href=' /visualization/wcsaxes/transforms.py#L112'>inverted</a>()</tt>	Return the inverse of the transform.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.WCSPixel2WorldTransform <a href=' /visualization/wcsaxes/transforms.py#L136'>get_coord_slices</a>(xmin,xmax,ymin,ymax)</tt>	Get a coordinate slice.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.WCSPixel2WorldTransform <a href=' /visualization/wcsaxes/transforms.py#L147'>transform</a>(pixel)</tt>	Transform pixel to world coordinates you should pass in a nx2 array.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.WCSPixel2WorldTransform <a href=' /visualization/wcsaxes/transforms.py#L186'>inverted</a>()</tt>	Return the inverse of the transform.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateTransform <a href=' /visualization/wcsaxes/transforms.py#L235'>transform</a>(input_coords)</tt>	Transform one set of coordinates to another.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateTransform <a href=' /visualization/wcsaxes/transforms.py#L264'>inverted</a>()</tt>	Return the inverse of the transform.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.Ticks <a href=' /visualization/wcsaxes/ticks.py#L56'>set_tick_out</a>(tick_out)</tt>	Set true if tick need to be rotated by 180 degree.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.Ticks <a href=' /visualization/wcsaxes/ticks.py#L62'>get_tick_out</a>()</tt>	Return true if the tick will be rotated by 180 degree.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.Ticks <a href=' /visualization/wcsaxes/ticks.py#L68'>set_ticksize</a>(ticksize)</tt>	Set length of the ticks in points.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.Ticks <a href=' /visualization/wcsaxes/ticks.py#L74'>get_ticksize</a>()</tt>	Return length of the ticks in points.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.Ticks <a href=' /visualization/wcsaxes/ticks.py#L132'>draw</a>(renderer)</tt>	Draw the ticks.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.Ticks <a href=' /visualization/wcsaxes/ticks.py#L146'>_draw_ticks</a>(renderer,pixel_array,angle_array,offset)</tt>	Draw the minor ticks.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinatesMap <a href=' /visualization/wcsaxes/coordinates_map.py#L134'>grid</a>(draw_grid,grid_type)</tt>	Plot gridlines for both coordinates.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.BaseFrame <a href=' /visualization/wcsaxes/frame.py#L168'>set_color</a>(color)</tt>	Sets the color of the frame.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.BaseFrame <a href=' /visualization/wcsaxes/frame.py#L182'>set_linewidth</a>(linewidth)</tt>	Sets the linewidth of the frame.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.EllipticalFrame <a href=' /visualization/wcsaxes/frame.py#L245'>_update_patch_path</a>()</tt>	Override path patch to include only the outer ellipse not the major and minor axes in the middle.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.EllipticalFrame <a href=' /visualization/wcsaxes/frame.py#L257'>draw</a>(renderer)</tt>	Override to draw only the outer ellipse not the major and minor axes in the middle.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes. <a href=' /visualization/wcsaxes/utils.py#L124'>coord_type_from_ctype</a>(ctype)</tt>	Determine whether a particular wcs ctype corresponds to an angle or scalar coordinate.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes. <a href=' /visualization/wcsaxes/grid_paths.py#L18'>get_lon_lat_path</a>(lon_lat,pixel,lon_lat_check)</tt>	Draw a curve taking into account discontinuities.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes. <a href=' /visualization/wcsaxes/grid_paths.py#L89'>get_gridline_path</a>(world,pixel)</tt>	Draw a grid line parameters.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes. <a href=' /visualization/wcsaxes/coordinate_range.py#L21'>find_coordinate_range</a>(transform,extent,coord_types,coord_units)</tt>	Find the range of coordinates to use for ticks/grids parameters.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L120'>grid</a>(draw_grid,grid_type)</tt>	Plot grid lines for this coordinate.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L157'>set_coord_type</a>(coord_type,coord_wrap)</tt>	Set the coordinate type for the axis.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L192'>set_major_formatter</a>(formatter)</tt>	Set the formatter to use for the major tick labels.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L209'>format_coord</a>(value)</tt>	Given the value of a coordinate will format it according to the format of the formatter_locator.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L235'>set_separator</a>(separator)</tt>	Set the separator to use for the angle major tick labels.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L251'>set_format_unit</a>(unit)</tt>	Set the unit for the major tick labels.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L264'>set_ticks</a>(values,spacing,number,size)</tt>	Set the location and properties of the ticks.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L313'>set_ticks_position</a>(position)</tt>	Set where ticks should appear parameters.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L327'>set_ticks_visible</a>(visible)</tt>	Set whether ticks are visible or not.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L339'>set_ticklabel</a>()</tt>	Set the visual properties for the tick labels.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L352'>set_ticklabel_position</a>(position)</tt>	Set where tick labels should appear parameters.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L366'>set_ticklabel_visible</a>(visible)</tt>	Set whether the tick labels are visible or not.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L378'>set_axislabel</a>(text,minpad)</tt>	Set the text and optionally visual properties for the axis label.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L397'>get_axislabel</a>()</tt>	Get the text for the axis label.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L408'>set_axislabel_position</a>(position)</tt>	Set where axis labels should appear parameters.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L655'>display_minor_ticks</a>(display_minor_ticks)</tt>	Display minor ticks for this coordinate.
<tt style='background-color:#E8E8E8;'> visualization.wcsaxes.CoordinateHelper <a href=' /visualization/wcsaxes/coordinate_helpers.py#L669'>set_minor_frequency</a>(frequency)</tt>	Set the frequency of minor ticks per major ticks.
<tt style='background-color:#E8E8E8;'> visualization.scripts. <a href=' /visualization/scripts/fits2bitmap.py#L11'>fits2bitmap</a>(filename,ext,out_fn,stretch)</tt>	Create a bitmap file from a fits image applying a stretching transform between minimum and maximum cut levels and a matplotlib.
