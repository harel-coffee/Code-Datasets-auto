core		_init_log		initializes the astropy log--in most circumstances this is called automatically when importing astropy
core		_teardown_log		shut down exception and warning logging if enabled and clear all astropy loggers from the logging module's cache
core	AstropyLogger	enable_warnings_logging		enable logging of warnings warn() calls
core	AstropyLogger	disable_warnings_logging		disable logging of warnings warn() calls
core	AstropyLogger	exception_logging_enabled		determine if the exception-logging mechanism is enabled
core	AstropyLogger	enable_exception_logging		enable logging of exceptions once called any uncaught exceptions will be emitted with level
core	AstropyLogger	disable_exception_logging		disable logging of exceptions once called any uncaught exceptions will no longer be emitted by this
core	AstropyLogger	enable_color		enable colorized output
core	AstropyLogger	disable_color		disable colorized output
core	AstropyLogger	log_to_file	filename filter_level filter_origin	context manager to temporarily log messages to a file
core	AstropyLogger	log_to_list	filter_level filter_origin	context manager to temporarily log messages to a list
core	AstropyLogger	_set_defaults		reset logger to its initial state
core	StreamHandler	emit	record	the formatter for stderr
core		_is_astropy_source	path	returns whether the source for this module is directly in an astropy source distribution or checkout
core		_is_astropy_setup		returns whether we are currently being imported in the context of running astropy's setup
core		_check_numpy		check that numpy is installed and it is of the minimum version we require
core		online_help	query	search the online astropy documentation for the given query
convolution	Kernel	truncation		deviation from the normalization to one
convolution	Kernel	is_bool		indicates if kernel is bool
convolution	Kernel	model		kernel response model
convolution	Kernel	center		index of the kernel center
convolution	Kernel	normalize	mode	normalize the filter kernel
convolution	Kernel	shape		shape of the kernel array
convolution	Kernel	separable		indicates if the filter kernel is separable
convolution	Kernel	array		filter kernel array
convolution	Kernel	__add__	kernel	add two filter kernels
convolution	Kernel	__sub__	kernel	subtract two filter kernels
convolution	Kernel	__mul__	value	multiply kernel with number or convolve two kernels
convolution	Kernel	__rmul__	value	multiply kernel with number or convolve two kernels
convolution	Kernel	__array__		array representation of the kernel
convolution	Kernel	__array_wrap__	array context	wrapper for multiplication with numpy arrays
convolution		kernel_arithmetics	kernel value operation	add subtract or multiply two kernels
convolution	CustomKernel	array		filter kernel array
convolution	CustomKernel	array	array	filter kernel array setter
convolution		convolve	array kernel boundary fill_value	convolve an array with a kernel
convolution		convolve_fft	array kernel boundary fill_value	convolve an ndarray with an nd-kernel returns a convolved image with
convolution		add_kernel_arrays_1D	array_1 array_2	add two 1d kernel arrays of different size
convolution		add_kernel_arrays_2D	array_1 array_2	add two 2d kernel arrays of different size
convolution		discretize_model	model x_range y_range mode	function to evaluate analytical model functions on a grid
convolution		discretize_center_1D	model x_range	discretize model by taking the value at the center of the bin
convolution		discretize_center_2D	model x_range y_range	discretize model by taking the value at the center of the pixel
convolution		discretize_linear_1D	model x_range	discretize model by performing a linear interpolation
convolution		discretize_bilinear_2D	model x_range y_range	discretize model by performing a bilinear interpolation
convolution		discretize_oversample_1D	model x_range factor	discretize model by taking the average on an oversampled grid
convolution		discretize_oversample_2D	model x_range y_range factor	discretize model by taking the average on an oversampled grid
convolution		discretize_integrate_1D	model x_range	discretize model by integrating numerically the model over the bin
convolution		discretize_integrate_2D	model x_range y_range	discretize model by integrating the model over the pixel
nddata		support_nddata	_func accepts repack returns	decorator to wrap functions that could accept an nddata instance with its properties passed as function arguments
nddata	NDUncertainty	uncertainty_type		str : short description of the type of uncertainty
nddata	NDUncertainty	supports_correlated		bool : supports uncertainty propagation with correlated uncertainties?
nddata	NDUncertainty	array		numpy ndarray : the uncertainty's value
nddata	NDUncertainty	unit		~astropy units unit : the unit of the uncertainty if any
nddata	NDUncertainty	parent_nddata		nddata : reference to nddata instance with this uncertainty
nddata	NDUncertainty	__getitem__	item	normal slicing on the array keep the unit and return a reference
nddata	NDUncertainty	propagate	operation other_nddata result_data correlation	calculate the resulting uncertainty given an operation on the data
nddata	NDUncertainty	_convert_uncertainty	other_uncert	checks if the uncertainties are compatible for propagation
nddata	UnknownUncertainty	supports_correlated		false : uncertainty propagation is *not* possible for this class
nddata	UnknownUncertainty	uncertainty_type		"unknown" : unknownuncertainty implements any unknown uncertainty type
nddata	UnknownUncertainty	_convert_uncertainty	other_uncert	raise an exception because unknown uncertainty types cannot implement propagation
nddata	UnknownUncertainty	_propagate_add	other_uncert result_data correlation	not possible for unknown uncertainty types
nddata	StdDevUncertainty	supports_correlated		true : stddevuncertainty allows to propagate correlated uncertainties
nddata	StdDevUncertainty	uncertainty_type		"std" : stddevuncertainty implements standard deviation
nddata	NDDataBase	data		the stored dataset
nddata	NDDataBase	mask		mask for the dataset
nddata	NDDataBase	unit		unit for the dataset
nddata	NDDataBase	wcs		world coordinate system wcs for the dataset
nddata	NDDataBase	meta		additional meta information about the dataset
nddata	NDDataBase	uncertainty		uncertainty in the dataset
nddata	NDDataArray	shape		shape tuple of this object's data
nddata	NDDataArray	size		integer size of this object's data
nddata	NDDataArray	dtype		numpy dtype of this object's data
nddata	NDDataArray	ndim		integer dimensions of this object's data
nddata	NDDataArray	__array__		this allows code that requests a numpy array to use an nddata object as a numpy array
nddata	NDDataArray	__array_prepare__	array context	this ensures that a masked array is returned if self is masked
nddata	NDDataArray	convert_unit_to	unit equivalencies	returns a new nddata object whose values have been converted to a new unit
nddata		_round	a	always round up
nddata		_offset	a	offset by 0 5 for an even array
nddata		overlap_slices	large_array_shape small_array_shape position mode	get slices for the overlapping part of a small and a large array
nddata		extract_array	array_large shape position mode	extract a smaller array of the given shape and position from a larger array
nddata		add_array	array_large array_small position	add a smaller array at a given position in a larger array
nddata		subpixel_indices	position subsampling	convert decimal points to indices given a subsampling factor
nddata		block_reduce	data block_size func	downsample a data array by applying a function to local blocks
nddata		block_replicate	data block_size conserve_sum	upsample a data array by block replication
nddata	Cutout2D	to_original_position	cutout_position	convert an x y position in the cutout array to the original x y position in the original large array
nddata	Cutout2D	to_cutout_position	original_position	convert an x y position in the original large array to the x y position in the cutout array
nddata	Cutout2D	plot_on_original	ax fill	plot the cutout region on a matplotlib axes instance
nddata	Cutout2D	_calc_center	slices	calculate the center position the center position will be
nddata	Cutout2D	_calc_bbox	slices	calculate a minimal bounding box in the form ( ymin ymax xmin xmax )
nddata	Cutout2D	origin_original		the x y index of the origin pixel of the cutout with respect to the original array
nddata	Cutout2D	origin_cutout		the x y index of the origin pixel of the cutout with respect to the cutout array
nddata	Cutout2D	position_original		the x y position index rounded to the nearest pixel in the original array
nddata	Cutout2D	position_cutout		the x y position index rounded to the nearest pixel in the cutout array
nddata	Cutout2D	center_original		the central x y position of the cutout array with respect to the original array
nddata	Cutout2D	center_cutout		the central x y position of the cutout array with respect to the cutout array
nddata	Cutout2D	bbox_original		the bounding box ( ymin ymax xmin xmax ) of the minimal rectangular region of the cutout array with respect to the
nddata	Cutout2D	bbox_cutout		the bounding box ( ymin ymax xmin xmax ) of the minimal rectangular region of the cutout array with respect to the
nddata	NDData	data		~numpy ndarray-like : the stored dataset
nddata	NDData	mask		any type : mask for the dataset if any
nddata	NDData	unit		~astropy units unit : unit for the dataset if any
nddata	NDData	wcs		any type : a world coordinate system wcs for the dataset if any
nddata	NDData	uncertainty		any type : uncertainty in the dataset if any
nddata.mixins	NDSlicingMixin	_slice	item	collects the sliced attributes and passes them back as dict
nddata.mixins	NDIOMixin	read	cls	read and parse gridded n-dimensional data and return as an nddata-derived object
nddata.mixins	NDIOMixin	write		write a gridded n-dimensional data object out in specified format
nddata.mixins	NDArithmeticMixin	_arithmetic	operation operand propagate_uncertainties handle_mask	base method which calculates the result of the arithmetic operation
nddata.mixins	NDArithmeticMixin	_arithmetic_data	operation operand	calculate the resulting data parameters
nddata.mixins	NDArithmeticMixin	_arithmetic_uncertainty	operation operand result correlation	calculate the resulting uncertainty
nddata.mixins	NDArithmeticMixin	_arithmetic_mask	operation operand handle_mask	calculate the resulting mask this is implemented as the piecewise or operation if both have a
nddata.mixins	NDArithmeticMixin	_arithmetic_wcs	operation operand compare_wcs	calculate the resulting wcs
nddata.mixins	NDArithmeticMixin	_arithmetic_meta	operation operand handle_meta	calculate the resulting meta
nddata.mixins	NDArithmeticMixin	_prepare_then_do_arithmetic	self_or_cls operation operand operand2	intermediate method called by public arithmetics (i e add)
io		delay_doc_updates	cls	contextmanager to disable documentation updates when registering reader and writer
io		get_formats	data_class readwrite	get the list of registered i/o formats as a table
io		_update__doc__	data_class readwrite	update the docstring to include all the available readers / writers for the data_class
io		register_reader	data_format data_class function force	register a reader function
io		register_writer	data_format data_class function force	register a table writer function
io		register_identifier	data_format data_class identifier force	associate an identifier function with a specific data type
io		identify_format	origin data_class_required path fileobj	loop through identifiers to see which formats match
io		get_reader	data_format data_class	get reader for data_format
io		get_writer	data_format data_class	get writer for data_format
io		read	cls	read in data
io		write	data	write out data
io		_is_best_match	class1 class2 format_classes	determine if class2 is the "best" match for class1 in the list of classes
io		_get_valid_format	mode cls path fileobj	returns the first valid format that can be used to read/write the data in question
io.ascii	CommentedHeaderHeader	process_lines	lines	return only lines that start with the comment regexp for these
io.ascii	CommentedHeader	read	table	read input data file-like object filename list of strings or single string into a table and return the result
io.ascii	CommentedHeader	write_header	lines meta	write comment lines after rather than before the header
io.ascii	Csv	inconsistent_handler	str_vals ncols	adjust row if it is too short
io.ascii	RdbHeader	get_cols	lines	initialize the header column objects from the table lines
io.ascii		_probably_html	table maxchars	determine if table probably contains html content see pr #3693 and issue
io.ascii		set_guess	guess	set the default value of the guess parameter for read() parameters
io.ascii		get_reader	Reader Inputter Outputter	initialize a table reader allowing for common customizations most of the
io.ascii		read	table guess	read the input table and return the table most of
io.ascii		_guess	table read_kwargs format fast_reader	try to read the table using various sets of keyword args start with the
io.ascii		_get_guess_kwargs_list	read_kwargs	get the full list of reader keyword argument dicts that are the basis for the format guessing process
io.ascii		get_writer	Writer fast_writer	initialize a table writer allowing for common customizations most of the
io.ascii		write	table output format Writer	write the input table to filename most of the default behavior
io.ascii		get_read_trace		return a traceback of the attempted read formats for the last call to ~astropy
io.ascii	FixedWidthHeader	get_cols	lines	initialize the header column objects from the table lines
io.ascii	FixedWidthHeader	get_fixedwidth_params	line	split line on the delimiter and determine column values and column start and end positions
io.ascii		add_dictval_to_list	adict key alist	add a value from a dictionary to a list
io.ascii		find_latex_line	lines latex	find the first line which matches a patters parameters
io.ascii	LatexSplitter	process_line	line	remove whitespace at the beginning or end of line also remove
io.ascii	LatexSplitter	process_val	val	remove whitespace and {} at the beginning or end of value
io.ascii	LatexSplitter	join	vals	join values together and add a few extra spaces for readability
io.ascii	AASTexHeaderSplitter	process_line	line	extract column names from tablehead
io.ascii	CdsHeader	get_cols	lines	initialize the header column objects from the table lines for a cds header
io.ascii	CdsData	process_lines	lines	skip over cds header by finding the last section delimiter
io.ascii	Cds	write	table	not available for the cds class raises notimplementederror
io.ascii	CsvWriter	writerow	values	similar to csv writer writerow but with the custom quoting behavior
io.ascii	CsvWriter	writerows	values_list	similar to csv writer writerows but with the custom quoting behavior
io.ascii	CsvWriter	_writerow	writerow_func values has_empty	call writerow_func either writerow or writerows with values
io.ascii	MaskedConstant	__hash__		all instances of this class shall have the same hash
io.ascii	BaseInputter	get_lines	table	get the lines from the table input the input table can be one of
io.ascii	BaseInputter	process_lines	lines	process lines for subsequent use in the default case do nothing
io.ascii	BaseSplitter	process_line	line	remove whitespace at the beginning or end of line this is especially useful for
io.ascii	BaseSplitter	process_val	val	remove whitespace at the beginning or end of value
io.ascii	DefaultSplitter	process_line	line	remove whitespace at the beginning or end of line this is especially useful for
io.ascii	DefaultSplitter	__call__	lines	return an iterator over the table lines, where each iterator output is a list of the split line values
io.ascii		_replace_tab_with_space	line escapechar quotechar	replace tabs with spaces in given string preserving quoted substrings parameters
io.ascii		_get_line_index	line_or_func lines	return the appropriate line index depending on line_or_func which can be either a function a positive or negative int or none
io.ascii	BaseHeader	update_meta	lines meta	extract any table-level metadata e g keywords comments column metadata from
io.ascii	BaseHeader	get_cols	lines	initialize the header column objects from the table lines
io.ascii	BaseHeader	process_lines	lines	generator to yield non-blank and non-comment lines
io.ascii	BaseHeader	colnames		return the column names of the table
io.ascii	BaseHeader	check_column_names	names strict_names guessing	check column names
io.ascii	BaseData	process_lines	lines	strip out comment lines and blank lines from list of lines
io.ascii	BaseData	get_data_lines	lines	set the data_lines attribute to the lines slice comprising the table data values
io.ascii	BaseData	get_str_vals		return a generator that returns a list of column values as strings for each data line
io.ascii	BaseData	masks	cols	set fill value for each column and then apply that fill value in the first step it is evaluated with value from fill_values applies to
io.ascii	BaseData	_set_fill_values	cols	set the fill values of the individual cols based on fill_values of basedata fill values has the following form
io.ascii	BaseData	_set_masks	cols	replace string values in col str_vals and set masks
io.ascii	BaseData	_replace_vals	cols	replace string values in col str_vals
io.ascii	BaseData	str_vals		convert all values in table to a list of lists of strings
io.ascii		convert_numpy	numpy_type	return a tuple containing a function which converts a list into a numpy array and the type produced by the converter function
io.ascii	BaseOutputter	_validate_and_copy	col converters	validate the format for the type converters and then copy those which are valid converters for this column (i
io.ascii		_apply_include_exclude_names	table names include_names exclude_names	apply names include_names and exclude_names to a table
io.ascii	BaseReader	read	table	read the table and return the results in a format determined by the outputter attribute
io.ascii	BaseReader	inconsistent_handler	str_vals ncols	adjust or skip data entries if a row is inconsistent with the header
io.ascii	BaseReader	comment_lines		return lines in the table that match header comment regexp
io.ascii	BaseReader	write	table	write table as list of strings
io.ascii	WhitespaceSplitter	process_line	line	replace tab with space within line while respecting quoted substrings
io.ascii		_get_reader	Reader Inputter Outputter	initialize a table reader allowing for common customizations see ui get_reader()
io.ascii		_get_writer	Writer fast_writer	initialize a table writer allowing for common customizations this
io.ascii		identify_table	soup htmldict numtable	checks whether the given beautifulsoup tag is the table the user intends to process
io.ascii	HTMLInputter	process_lines	lines	convert the given input into a list of soupstring rows for further processing
io.ascii	HTMLSplitter	__call__	lines	return html data from lines as a generator
io.ascii	HTMLOutputter	__call__	cols meta	process the data in multidimensional columns
io.ascii	HTMLHeader	start_line	lines	return the line number at which header data begins
io.ascii	HTMLHeader	_set_cols_from_names		set columns from header names handling multicolumns appropriately
io.ascii	HTMLData	start_line	lines	return the line number at which table data begins
io.ascii	HTMLData	end_line	lines	return the line number at which table data ends
io.ascii	HTML	__init__	htmldict	initialize classes for html reading and writing
io.ascii	HTML	read	table	read the table in html format and return a resulting table
io.ascii	HTML	write	table	return data in table converted to html as a list of strings
io.ascii	HTML	fill_values	col col_str_iters	return an iterator of the values with replacements based on fill_values
io.ascii	FastBasic	read	table	read input data file-like object filename list of strings or single string into a table and return the result
io.ascii	FastBasic	write	table output	use a fast cython method to write table data to output where output is a filename or file-like object
io.ascii	FastCsv	write	table output	override the default write method of fastbasic to output masked values as empty fields
io.ascii	FastNoHeader	write	table output	override the default writing behavior in fastbasic so that columns names are not included in output
io.ascii	FastCommentedHeader	read	table	read input data file-like object filename list of strings or single string into a table and return the result
io.ascii	FastCommentedHeader	write	table output	override the default writing behavior in fastbasic so that column names are commented
io.ascii	FastRdb	write	table output	override the default writing behavior in fastbasic to output a line with column types after the column name line
io.ascii		first_true_index	iterable pred default	find the first index position for the which the callable pred returns true
io.ascii		first_false_index	iterable pred default	find the first index position for the which the callable pred returns false
io.ascii		sortmore		sorts any number of lists according to optionally given item sorting key function s and/or a global sorting key function
io.ascii		groupmore	func	extends the itertools groupby functionality to arbitrary number of iterators
io.ascii	EcsvHeader	process_lines	lines	return only non-blank lines that start with the comment regexp for these
io.ascii	EcsvHeader	write	lines	write header information in the ecsv ascii format this format
io.ascii	EcsvHeader	write_comments	lines meta	override the default write_comments to do nothing since this is handled in the custom write method
io.ascii	EcsvHeader	update_meta	lines meta	override the default update_meta to do nothing this process is done
io.ascii	EcsvHeader	get_cols	lines	initialize the header column objects from the table lines
io.ascii	SExtractorHeader	get_cols	lines	initialize the header column objects from the table lines for a sextractor header
io.ascii	SExtractor	read	table	read input data file-like object filename list of strings or single string into a table and return the result
io.ascii	DaophotHeader	parse_col_defs	grouped_lines_dict	parse a series of column definition lines like below there may be several
io.ascii	DaophotHeader	update_meta	lines meta	extract table-level keywords for daophot table these are indicated by
io.ascii	DaophotHeader	extract_keyword_line	line	extract info from a header keyword line (#k)
io.ascii	DaophotHeader	get_cols	lines	initialize the header column objects from the table lines for a daophot header
io.ascii	DaophotInputter	search_multiline	lines depth	search lines for special continuation character to determine number of continued rows in a datablock
io.ascii	IpacHeader	process_lines	lines	generator to yield ipac header lines i e those starting and ending with
io.ascii	IpacHeader	update_meta	lines meta	extract table-level comments and keywords for ipac table see
io.ascii	IpacHeader	get_cols	lines	initialize the header column objects from the table lines
io.ascii	IpacData	write	lines widths vals_list	ipac writer modified from fixedwidth writer
io.ascii	Ipac	write	table	write table as list of strings
io.misc		fnunpickle	fileorname number usecPickle	unpickle pickled objects from a specified file and return the contents
io.misc		fnpickle	object fileorname usecPickle protocol	pickle an object to a specified file
io.misc		_find_all_structured_arrays	handle	find all structured arrays in an hdf5 file
io.misc		read_table_hdf5	input path	read a table object from an hdf5 file this requires h5py <http //h5py
io.misc		write_table_hdf5	table output path compression	write a table object to an hdf5 file this requires h5py <http //h5py
io.misc		load	stream	parse the first yaml document in a stream using the astropyloader and produce the corresponding python object
io.misc		load_all	stream	parse the all yaml documents in a stream using the astropyloader class and produce the corresponding python object
io.misc		dump	data stream	serialize a python object into a yaml stream using the astropydumper class
io.fits		realign_dtype	dtype offsets	given a numpy struct dtype object an a list of integer offsets with one offset per field in the dtype returns a new dtype where each field has the
io.fits	FITS_record	__repr__		display a single row
io.fits	FITS_record	field	field	get the field data of the record
io.fits	FITS_record	setfield	field value	set the field data of the record
io.fits	FITS_rec	__new__	subtype input	construct a fits record array from a recarray
io.fits	FITS_rec	__reduce__		return a 3-tuple for pickling a fits_rec use the super-class
io.fits	FITS_rec	_init		initializes internal attributes specific to fits-isms
io.fits	FITS_rec	from_columns	cls columns nrows fill	given a coldefs object of unknown origin initialize a new fits_rec object
io.fits	FITS_rec	copy	order	the numpy documentation lies numpy ndarray copy is not equivalent to
io.fits	FITS_rec	columns		a user-visible accessor for the coldefs
io.fits	FITS_rec	names		list of column names
io.fits	FITS_rec	formats		list of column fits formats
io.fits	FITS_rec	_raw_itemsize		returns the size of row items that would be written to the raw fits file taking into account the possibility of unicode columns being
io.fits	FITS_rec	field	key	a view of a column's data as an array
io.fits	FITS_rec	_cache_field	name field	do not store fields in _converted if one of its bases is self or if it has a common base with self
io.fits	FITS_rec	_update_column_attribute_changed	column idx attr old_value	update how the data is formatted depending on changes to column attributes initiated by the user through the column interface
io.fits	FITS_rec	_update_column_name	column idx old_name name	update the dtype field names when a column name is changed
io.fits	FITS_rec	_convert_x	field recformat	convert a raw table column to a bit array as specified by the fits x format
io.fits	FITS_rec	_convert_p	column field recformat	convert a raw table column of fits p or q format descriptors to a vla column with the array data returned from the heap
io.fits	FITS_rec	_convert_ascii	column field	special handling for ascii table columns to convert columns containing numeric types to actual numeric arrays from the string representation
io.fits	FITS_rec	_convert_other	column field recformat	perform conversions on any other fixed-width column data types
io.fits	FITS_rec	_get_heap_data		returns a pointer into the table's raw data to its heap if present
io.fits	FITS_rec	_get_raw_data		returns the base array of self that "raw data array" that is the array in the format that it was first read from a file before it was
io.fits	FITS_rec	_get_scale_factors	column	get all the scaling flags and factors for one column
io.fits	FITS_rec	_scale_back	update_heap_pointers	update the parent array using the latest scaled array
io.fits	FITS_rec	_scale_back_ascii	col_idx input_field output_field	convert internal array values back to ascii table representation
io.fits		_get_recarray_field	array key	compatibility function for using the recarray base class's field method
io.fits		_rstrip_inplace	array chars	performs an in-place rstrip operation on string arrays
io.fits		_ascii_encode	inarray out	takes a unicode array and fills the output string array with the ascii encodings if possible of the elements of the input array
io.fits		_has_unicode_fields	array	returns true if any fields in a structured array have unicode dtype
io.fits	NotifierMixin	_add_listener	listener	add an object to the list of listeners to notify of changes to this object
io.fits	NotifierMixin	_remove_listener	listener	removes the specified listener from the listeners list this relies
io.fits	NotifierMixin	_notify	notification	notify all listeners of some particular state change by calling their _update_<notification> method with the given *args and
io.fits	NotifierMixin	__getstate__		exclude listeners when saving the listener's state since they may be ephemeral
io.fits		first	iterable	returns the first item returned by iterating over an iterable object
io.fits		itersubclasses	cls _seen	itersubclasses cls generator over all subclasses of a given class in depth first order
io.fits		ignore_sigint	func	this decorator registers a custom sigint handler to catch and ignore sigint until the wrapped function is completed
io.fits		pairwise	iterable	return the items of an iterable paired with its next item
io.fits		encode_ascii	s	in python 2 this is a no-op strings are left alone in python 3 this
io.fits		decode_ascii	s	in python 2 this is a no-op strings are left alone in python 3 this
io.fits		isreadable	f	returns true if the file-like object can be read from this is a common-
io.fits		iswritable	f	returns true if the file-like object can be written to this is a common-
io.fits		fileobj_name	f	returns the 'name' of file-like object f if it has anything that could be called its name
io.fits		fileobj_closed	f	returns true if the given file-like object is closed or if f is a string and assumed to be a pathname
io.fits		fileobj_mode	f	returns the 'mode' string of a file-like object if such a thing exists
io.fits		_fileobj_normalize_mode	f	takes care of some corner cases in python where the mode string is either oddly formatted or does not truly represent the file mode
io.fits		fileobj_is_binary	f	returns true if the give file or file-like object has a file open in binary mode
io.fits		fill	text width	like :func textwrap wrap but preserves existing paragraphs which
io.fits		_array_from_file	infile dtype count sep	create a numpy array from a file or a file-like object
io.fits		_array_to_file	arr outfile	write a numpy array to a file or a file-like object
io.fits		_array_to_file_like	arr fileobj	write a ~numpy ndarray to a file-like object (which is not supported by
io.fits		_write_string	f s	write a string to a file encoding to ascii if the file is open in binary mode or decoding if the file is open in text mode
io.fits		_convert_array	array dtype	converts an array to a new dtype--if the itemsize of the new dtype is the same as the old dtype and both types are not numeric a view is
io.fits		_unsigned_zero	dtype	given a numpy dtype finds its "zero" point which is exactly in the middle of its range
io.fits		_str_to_num	val	converts a given string to either an int or a float if necessary
io.fits		_words_group	input strlen	split a long string into parts where each part is no longer than strlen and no word is cut into two pieces
io.fits		_tmp_name	input	create a temporary file name which should not already exist use the
io.fits		_get_array_mmap	array	if the array has an mmap mmap at base of its base chain return the mmap
io.fits		getheader	filename	get the header from an extension of a fits file
io.fits		getdata	filename	get the data from an extension of a fits file and optionally the header
io.fits		getval	filename keyword	get a keyword's value from a header in a fits file
io.fits		setval	filename keyword	set a keyword's value from a header in a fits file
io.fits		delval	filename keyword	delete all instances of keyword from a header in a fits file
io.fits		writeto	filename data header output_verify	create a new fits file using the supplied data/header
io.fits		table_to_hdu	table	convert an ~astropy table table object to a fits
io.fits		append	filename data header checksum	append the header/data to fits file if filename exists create if not
io.fits		update	filename data	update the specified extension with the input data/header
io.fits		info	filename output	print the summary information on a fits file
io.fits		printdiff	inputa inputb	compare two parts of a fits file including entire fits files fits hdulist objects and fits hdu objects
io.fits		tabledump	filename datafile cdfile hfile	dump a table hdu to a file in ascii format the table may be
io.fits		tableload	datafile cdfile hfile	create a table from the input ascii files the input is from up
io.fits		_getext	filename mode	open the input file return the hdulist and the extension
io.fits		_get_file_mode	filename default	allow file object to already be opened in any of the valid modes and and leave the file in the same state opened or closed as when
io.fits	_BaseColumnFormat	dtype		the numpy dtype object created from the format's associated recformat
io.fits	_BaseColumnFormat	from_column_format	cls format	creates a column format object from another column format object regardless of their type
io.fits	_ColumnFormat	from_recformat	cls recformat	creates a column format from a numpy record dtype format
io.fits	_ColumnFormat	recformat		returns the equivalent numpy record format string
io.fits	_ColumnFormat	canonical		returns a 'canonical' string representation of this format
io.fits	_AsciiColumnFormat	from_recformat	cls recformat	creates a column format from a numpy record dtype format
io.fits	_AsciiColumnFormat	recformat		returns the equivalent numpy record format string
io.fits	_AsciiColumnFormat	canonical		returns a 'canonical' string representation of this format
io.fits	ColumnAttribute	__call__	func	set the validator for this column attribute
io.fits	Column	__init__	name format unit null	construct a column by specifying attributes all attributes
io.fits	Column	__eq__	other	two columns are equal if their name and format are the same other
io.fits	Column	__hash__		like __eq__, the hash of a column should be based on the unique column name and format and be case-insensitive with respect to the column
io.fits	Column	array		the numpy ~numpy ndarray associated with this column
io.fits	Column	ascii		whether this column represents an column in an ascii table
io.fits	Column	copy		return a copy of this column
io.fits	Column	_convert_format	format cls	the format argument to this class's initializer may come in many forms
io.fits	Column	_verify_keywords	cls name format unit	given the keyword arguments used to initialize a column specifically those that typically read from a fits header so excluding array
io.fits	Column	_determine_formats	cls format start dim	given a format string and whether or not the column is for an ascii table (ascii=none means unspecified but lean toward binary table
io.fits	ColDefs	_init_from_coldefs	coldefs	initialize from an existing coldefs object just copy the columns and convert their formats if necessary
io.fits	ColDefs	_copy_column	column	utility function used currently only by _init_from_coldefs to help convert columns from binary format to ascii format or vice
io.fits	ColDefs	__getattr__	name	automatically returns the values for the given keyword attribute for all columns in this list
io.fits	ColDefs	_dims		returns the values of the tdimn keywords parsed into tuples
io.fits	ColDefs	_update_column_attribute_changed	column attr old_value new_value	handle column attribute changed notifications from columns that are members of this coldefs
io.fits	ColDefs	add_col	column	append one column to the column definition
io.fits	ColDefs	del_col	col_name	delete the definition of one column
io.fits	ColDefs	change_attrib	col_name attrib new_value	change an attribute (in the keyword_attributes list) of a column
io.fits	ColDefs	change_name	col_name new_name	change a column's name
io.fits	ColDefs	change_unit	col_name new_unit	change a column's unit
io.fits	ColDefs	info	attrib output	get attribute s information of the column definition
io.fits	_AsciiColDefs	spans		a list of the widths of each field in the table
io.fits	_AsciiColDefs	_update_field_metrics		updates the list of the start columns the list of the widths of each field and the total width of each record in the table
io.fits	_VLF	__setitem__	key value	to make sure the new item has consistent data type to avoid misalignment
io.fits		_get_index	names key	get the index of the key in the names list
io.fits		_unwrapx	input output repeat	unwrap the x format column into a boolean array
io.fits		_wrapx	input output repeat	wrap the x format column boolean array into an uint8 array
io.fits		_makep	array descr_output format nrows	construct the p or q format column array both the data descriptors and the data
io.fits		_parse_tformat	tform	parse tformn keyword for a binary table into a repeat format option tuple
io.fits		_parse_ascii_tformat	tform strict	parse the tformn keywords for ascii tables into a format width precision tuple (the latter is always zero unless format is one of 'e',
io.fits		_parse_tdim	tdim	parse the tdim value into a tuple (may return an empty tuple if the value tdim value is empty or invalid)
io.fits		_scalar_to_format	value	given a scalar value or string returns the minimum fits column format that can represent that value
io.fits		_cmp_recformats	f1 f2	compares two numpy recformats using the ordering given by formatorder
io.fits		_convert_fits2record	format	convert fits format spec to record format spec
io.fits		_convert_record2fits	format	convert record format spec to fits format spec
io.fits		_dtype_to_recformat	dtype	utility function for converting a dtype object or string that instantiates a dtype (e
io.fits		_convert_format	format reverse	convert fits format spec to record format spec do the opposite if
io.fits		_convert_ascii_format	format reverse	convert ascii table format spec to record format spec
io.fits		is_fits	origin filepath fileobj	determine whether origin is a fits file
io.fits		read_table_fits	input hdu	read a table object from an fits file parameters
io.fits		write_table_fits	input output overwrite	write a table object to a fits file parameters
io.fits	Card	keyword		returns the keyword name parsed from the card image
io.fits	Card	keyword	keyword	set the key attribute once set it cannot be modified
io.fits	Card	value		the value associated with the keyword stored in this card
io.fits	Card	rawkeyword		on record-valued keyword cards this is the name of the standard <= 8 character fits keyword that this rvkc is stored in
io.fits	Card	rawvalue		on record-valued keyword cards this is the raw string value in the <field-specifier>: <value> format stored in the card in order
io.fits	Card	comment		get the comment attribute from the card image if not already set
io.fits	Card	field_specifier		the field-specifier of record-valued keyword cards always none on normal cards
io.fits	Card	image		the card "image", that is the 80 byte character string that represents this card in an actual fits header
io.fits	Card	is_blank		true if the card is completely blank--that is it has no keyword value or comment
io.fits	Card	fromstring	cls image	construct a card object from a raw string it will pad the string
io.fits	Card	normalize_keyword	cls keyword	classmethod to convert a keyword value that may contain a field-specifier to uppercase
io.fits	Card	_check_if_rvkc		determine whether or not the card is a record-valued keyword card
io.fits	Card	_check_if_rvkc_image		implements card _check_if_rvkc for the case of an unparsed card
io.fits	Card	_init_rvkc	keyword field_specifier field value	sort of addendum to card __init__ to set the appropriate internal
io.fits	Card	_parse_value		extract the keyword value from the card image
io.fits	Card	_parse_comment		extract the keyword value from the card image
io.fits	Card	_split		split the card image between the keyword and the rest of the card
io.fits	Card	_fix_value		fix the card image for fixable non-standard compliance
io.fits	Card	_format_long_image		break up long string value/comment into continue cards
io.fits	Card	_format_long_commentary_image		if a commentary card's value is too long to fit on a single card this will render the card as multiple consecutive commentary card of the
io.fits	Card	_itersubcards		if the card image is greater than 80 characters it should consist of a normal card followed by one or more continue card
io.fits		_int_or_float	s	converts an a string to an int if possible or to a float
io.fits		_format_value	value	converts a card value to its appropriate string representation as defined by the fits format
io.fits		_format_float	value	format a floating number to make sure it gets the decimal point
io.fits		_pad	input	pad blank space to the input string to be multiple of 80
io.fits	_BaseDiff	__init__	a b	the _basediff class does not implement a _diff method and should not be instantiated directly
io.fits	_BaseDiff	__nonzero__		a _basediff object acts as true in a boolean context if the two objects compared are identical
io.fits	_BaseDiff	fromdiff	cls other a b	returns a new diff object of a specific subclass from an existing diff object passing on the values for any arguments they share in common
io.fits	_BaseDiff	identical		true if all the diff_* attributes on this diff instance are
io.fits	_BaseDiff	report	fileobj indent overwrite	generates a text report on the differences if any between two objects and either returns it as a string or writes it to a file-like
io.fits	HDUDiff	__init__	a b ignore_keywords ignore_comments	see fitsdiff for explanations of the initialization parameters
io.fits	HeaderDiff	__init__	a b ignore_keywords ignore_comments	see fitsdiff for explanations of the initialization parameters
io.fits	ImageDataDiff	__init__	a b numdiffs rtol	see fitsdiff for explanations of the initialization parameters
io.fits	RawDataDiff	__init__	a b numdiffs	see fitsdiff for explanations of the initialization parameters
io.fits	TableDataDiff	__init__	a b ignore_fields numdiffs	see fitsdiff for explanations of the initialization parameters
io.fits		diff_values	a b rtol atol	diff two scalar values if both values are floats they are compared to
io.fits		report_diff_values	fileobj a b ind	write a diff between two values to the specified file-like object
io.fits		report_diff_keyword_attr	fileobj attr diffs keyword	write a diff between two header keyword values or comments to the specified file-like object
io.fits		where_not_allclose	a b rtol atol	a version of numpy allclose that returns the indices where the two arrays
io.fits	Header	__init__	cards copy	construct a header from an iterable and/or text file
io.fits	Header	__eq__	other	two headers are equal only if they have the exact same string representation
io.fits	Header	cards		the underlying physical cards that make up this header it can be looked at but it should not be modified directly
io.fits	Header	comments		view the comments associated with each keyword if any
io.fits	Header	_modified		whether or not the header has been modified this is a property so that it can also check each card for modifications--cards may have been
io.fits	Header	fromstring	cls data sep	creates an hdu header from a byte string containing the entire header data
io.fits	Header	fromfile	cls fileobj sep endcard	similar to :meth header fromstring, but reads the header string from
io.fits	Header	_from_blocks	cls block_iter is_binary sep	the meat of header fromfile; in a separate method so that
io.fits	Header	_find_end_card	cls block card_len	utility method to search a header block for the end card and handle invalid end cards
io.fits	Header	tostring	sep endcard padding	returns a string representation of the header
io.fits	Header	tofile	fileobj sep endcard padding	writes the header to file or file-like object
io.fits	Header	fromtextfile	cls fileobj endcard	read a header from a simple text file or file-like object
io.fits	Header	totextfile	fileobj endcard overwrite	write the header as text to a file or a file-like object
io.fits	Header	clear		remove all cards from the header
io.fits	Header	copy	strip	make a copy of the :class header
io.fits	Header	fromkeys	cls iterable value	similar to :meth dict fromkeys--creates a new header from an
io.fits	Header	get	key default	similar to :meth dict get--returns the value associated with keyword
io.fits	Header	set	keyword value comment before	set the value and/or comment and/or position of a specified keyword
io.fits	Header	items		like :meth dict items
io.fits	Header	iteritems		like :meth dict iteritems
io.fits	Header	iterkeys		like :meth dict iterkeys--iterating directly over the header
io.fits	Header	itervalues		like :meth dict itervalues
io.fits	Header	keys		return a list of keywords in the header in the order they appear--like :meth dict
io.fits	Header	pop		works like :meth list pop if no arguments or an index argument are
io.fits	Header	popitem		similar to :meth dict popitem
io.fits	Header	setdefault	key default	similar to :meth dict setdefault
io.fits	Header	update		update the header with new keyword values updating the values of existing keywords and appending new keywords otherwise similar to
io.fits	Header	values		returns a list of the values of all cards in the header
io.fits	Header	append	card useblanks bottom end	appends a new keyword+value card to the end of the header similar to list
io.fits	Header	extend	cards strip unique update	appends multiple keyword+value cards to the end of the header similar to list
io.fits	Header	count	keyword	returns the count of the given keyword in the header similar to list
io.fits	Header	index	keyword start stop	returns the index if the first instance of the given keyword in the header similar to list
io.fits	Header	insert	key card useblanks after	inserts a new keyword+value card into the header at a given location similar to list
io.fits	Header	remove	keyword ignore_missing remove_all	removes the first instance of the given keyword from the header similar to list
io.fits	Header	rename_keyword	oldkeyword newkeyword force	rename a card's keyword in the header
io.fits	Header	add_history	value before after	add a history card
io.fits	Header	add_comment	value before after	add a comment card
io.fits	Header	add_blank	value before after	add a blank card
io.fits	Header	_update	card	the real update code if keyword already exists its value and/or
io.fits	Header	_cardindex	key	returns an index into the _cards list given a valid lookup key
io.fits	Header	_keyword_from_index	idx	given an integer index return the keyword repeat tuple that index refers to
io.fits	Header	_relativeinsert	card before after replace	inserts a new card before or after an existing card used to implement support for the legacy before/after keyword arguments to
io.fits	Header	_updateindices	idx increment	for all cards with index above idx increment or decrement its index value in the keyword_indices dict
io.fits	Header	_countblanks		returns the number of blank cards at the end of the header
io.fits	Header	_haswildcard	keyword	return true if the input keyword contains a wildcard pattern
io.fits	Header	_wildcardmatch	pattern	returns a list of indices of the cards matching the given wildcard pattern
io.fits	Header	_set_slice	key value target	used to implement header __setitem__ and cardaccessor __setitem__
io.fits	Header	_splitcommentary	keyword value	given a commentary keyword and value returns a list of the one or more cards needed to represent the full value
io.fits	Header	_strip		strip cards specific to a certain kind of header
io.fits	Header	_add_commentary	key value before after	add a commentary card
io.fits	_CardAccessor	_setslice	item value	helper for implementing __setitem__ on _cardaccessor subclasses slices should always be handled in this same way
io.fits	_HeaderComments	__repr__		returns a simple list of all keywords and their comments
io.fits	_HeaderComments	__getitem__	item	slices and filter strings return a new _headercomments containing the returned cards
io.fits	_HeaderComments	__setitem__	item comment	set/update the comment on specified card or cards
io.fits	_HeaderCommentaryCards	__setitem__	item value	set the value of a specified commentary card or cards
io.fits		_block_size	sep	determine the size of a fits header block if a non-blank separator is used between cards
io.fits		_pad_length	stringlen	bytes needed to pad the input stringlen to the next fits block
io.fits	_Verify	run_option	option err_text fix_text fix	execute the verification with selected option
io.fits	_Verify	verify	option	verify all values in the instance
io.fits	_ErrList	iter_lines	filter shift	iterate the nested structure as a list of strings with appropriate indentations for each level of structure
io.fits	_File	readarray	size offset dtype shape	similar to file read(), but returns the contents of the underlying
io.fits	_File	writearray	array	similar to file write(), but writes a numpy array instead of a string
io.fits	_File	close		close the 'physical' fits file
io.fits	_File	_maybe_close_mmap	refcount_delta	when mmap is in use these objects hold a reference to the mmap of the file (so there is only one shared by all hdus that reference this
io.fits	_File	_overwrite_existing	overwrite fileobj closed	overwrite an existing file if overwrite is true, otherwise raise an ioerror
io.fits	_File	_open_fileobj	fileobj mode overwrite	open a fits file from a file object or a gzipfile object
io.fits	_File	_open_filelike	fileobj mode overwrite	open a fits file from a file-like object i e one that has
io.fits	_File	_open_filename	filename mode overwrite	open a fits file from a filename string
io.fits	_File	_mmap_available	cls	tests that mmap and specifically mmap flush works this may
io.fits	_File	_open_zipfile	fileobj mode	limited support for zipfile zipfile objects containing a single
io.fits		_is_random_access_file_backed	fileobj	returns true if fileobj is a file or io fileio object or a
io.fits.scripts		fitsinfo	filename	print a summary of the hdus in a fits file
io.fits.scripts		main	args	the main function called by the fitsinfo script
io.fits.scripts		verify_checksums	filename	prints a message if any hdu in filename has a bad checksum or datasum
io.fits.scripts		verify_compliance	filename	check for fits standard compliance
io.fits.scripts		update	filename	sets the checksum and datasum keywords for each hdu of filename
io.fits.scripts		process_file	filename	handle a single fits file returning the count of checksum and compliance
io.fits.scripts		main		processes command line parameters into options and files then checks or update fits datasum and checksum keywords for the specified files
io.fits.scripts	HeaderFormatter	parse	extensions keywords compressed	returns the fits file header s in a readable format
io.fits.scripts	HeaderFormatter	_parse_internal	hdukeys keywords compressed	the meat of the formatting in a separate method to allow overriding
io.fits.scripts	HeaderFormatter	_get_cards	hdukey keywords compressed	returns a list of astropy io fits card card objects
io.fits.scripts	TableHeaderFormatter	_parse_internal	hdukeys keywords compressed	method called by the parse method in the parent class
io.fits.scripts		print_headers_traditional	args	prints fits header s using the traditional 80-char format
io.fits.scripts		print_headers_as_table	args	prints fits header s in a machine-readable table format
io.fits.scripts		main	args	this is the main function called by the fitsheader script
io.fits.hdu	_TableLikeHDU	match_header	cls header	this is an abstract hdu type for hdus that contain table-like data
io.fits.hdu	_TableLikeHDU	from_columns	cls columns header nrows	given either a coldefs object a sequence of column objects or another table hdu or table data (a fits_rec or multi-field
io.fits.hdu	_TableLikeHDU	columns		the :class coldefs objects describing the columns in this table
io.fits.hdu	_TableLikeHDU	_nrows		table-like hdus must provide an attribute that specifies the number of rows in the hdu's table
io.fits.hdu	_TableLikeHDU	_get_tbdata		get the table data from an input hdu object
io.fits.hdu	_TableLikeHDU	_update_column_added	columns column	update the data upon addition of a new column through the coldefs interface
io.fits.hdu	_TableLikeHDU	_update_column_removed	columns col_idx	update the data upon removal of a column through the coldefs interface
io.fits.hdu	_TableBaseHDU	match_header	cls header	this is an abstract type that implements the shared functionality of the ascii and binary table hdu types which should be used instead of
io.fits.hdu	_TableBaseHDU	columns		the :class coldefs objects describing the columns in this table
io.fits.hdu	_TableBaseHDU	update		update header keywords to reflect recent changes of columns
io.fits.hdu	_TableBaseHDU	copy		make a copy of the table hdu both header and data are copied
io.fits.hdu	_TableBaseHDU	_verify	option	_tablebasehdu verify method
io.fits.hdu	_TableBaseHDU	_summary		summarize the hdu name dimensions and formats
io.fits.hdu	_TableBaseHDU	_update_column_attribute_changed	column col_idx attr old_value	update the header when one of the column objects is updated
io.fits.hdu	_TableBaseHDU	_clear_table_keywords	index	wipe out any existing table definition keywords from the header
io.fits.hdu	_TableBaseHDU	_populate_table_keywords		populate the new table definition keywords from the header
io.fits.hdu	TableHDU	_calculate_datasum	blocking	calculate the value for the datasum card in the hdu
io.fits.hdu	TableHDU	_verify	option	tablehdu verify method
io.fits.hdu	BinTableHDU	_calculate_datasum_with_heap	blocking	calculate the value for the datasum card given the input data
io.fits.hdu	BinTableHDU	_calculate_datasum	blocking	calculate the value for the datasum card in the hdu
io.fits.hdu	BinTableHDU	dump	datafile cdfile hfile overwrite	dump the table hdu to a file in ascii format the table may be dumped
io.fits.hdu	BinTableHDU	load	cls datafile cdfile hfile	create a table from the input ascii files the input is from up to
io.fits.hdu	BinTableHDU	_dump_data	fileobj	write the table data in the ascii format read by bintablehdu load()
io.fits.hdu	BinTableHDU	_dump_coldefs	fileobj	write the column definition parameters in the ascii format read by bintablehdu
io.fits.hdu	BinTableHDU	_load_data	cls fileobj coldefs	read the table data from the ascii file output by bintablehdu dump()
io.fits.hdu	BinTableHDU	_load_coldefs	cls fileobj	read the table column definitions from the ascii file output by bintablehdu
io.fits.hdu		_binary_table_byte_swap	data	ensures that all the data of a binary fits table (represented as a fits_rec object) is in a big-endian byte order
io.fits.hdu	Group	par	parname	get the group parameter value
io.fits.hdu	Group	setpar	parname value	set the group parameter value
io.fits.hdu	GroupData	data		the raw group data represented as a multi-dimensional numpy ndarray
io.fits.hdu	GroupData	par	parname	get the group parameter values
io.fits.hdu	GroupsHDU	data		the data of a random group fits file will be like a binary table's data
io.fits.hdu	GroupsHDU	parnames		the names of the group parameters as described by the header
io.fits.hdu	GroupsHDU	size		returns the size in bytes of the hdu's data part
io.fits.hdu	GroupsHDU	_writedata_internal	fileobj	basically copy/pasted from _imagebasehdu _writedata_internal(), but
io.fits.hdu	GroupsHDU	_calculate_datasum	blocking	calculate the value for the datasum card in the hdu
io.fits.hdu		_par_indices	names	given a list of objects returns a mapping of objects in that list to the index or indices at which that object was found in the list
io.fits.hdu		_unique_parnames	names	given a list of parnames including possible duplicates returns a new list of parnames with duplicates prepended by one or more underscores to make
io.fits.hdu	CompImageHDU	_update_header_data	image_header name compression_type tile_size	update the table header (_header) to the compressed image format and to match the input data if any
io.fits.hdu	CompImageHDU	shape		shape of the image array--should be equivalent to self data shape
io.fits.hdu	CompImageHDU	_summary		summarize the hdu name dimensions and formats
io.fits.hdu	CompImageHDU	_update_compressed_data		compress the image data so that it may be written to a file
io.fits.hdu	CompImageHDU	scale	type option bscale bzero	scale image data by using bscale and bzero
io.fits.hdu	CompImageHDU	_writeheader	fileobj	bypasses bintablehdu _writeheader() which updates the header with
io.fits.hdu	CompImageHDU	_writedata	fileobj	wrap the basic _writedata method to restore the data
io.fits.hdu	CompImageHDU	_dtype_for_bitpix		determine the dtype that the data should be converted to depending on the bitpix value in the header and possibly on the bscale value as
io.fits.hdu		fitsopen	name mode memmap save_backup	factory function to open a fits file and return an hdulist object
io.fits.hdu	HDUList	__init__	hdus file	construct a hdulist object
io.fits.hdu	HDUList	__getitem__	key	get an hdu from the hdulist, indexed by number or name
io.fits.hdu	HDUList	__contains__	item	returns true if hdulist index_of item succeeds
io.fits.hdu	HDUList	__setitem__	key hdu	set an hdu to the hdulist, indexed by number or name
io.fits.hdu	HDUList	__delitem__	key	delete an hdu from the hdulist, indexed by number or name
io.fits.hdu	HDUList	fromfile	cls fileobj mode memmap	creates an hdulist instance from a file-like object
io.fits.hdu	HDUList	fromstring	cls data	creates an hdulist instance from a string or other in-memory data buffer containing an entire fits file
io.fits.hdu	HDUList	fileinfo	index	returns a dictionary detailing information about the locations of the indexed hdu within any associated file
io.fits.hdu	HDUList	insert	index hdu	insert an hdu into the hdulist at the given index
io.fits.hdu	HDUList	append	hdu	append a new hdu to the hdulist
io.fits.hdu	HDUList	index_of	key	get the index of an hdu from the hdulist
io.fits.hdu	HDUList	_positive_index_of	key	same as index_of but ensures always returning a positive index or zero
io.fits.hdu	HDUList	readall		read data of all hdus into memory
io.fits.hdu	HDUList	flush	output_verify verbose	force a write of the hdulist back to the file for append and update modes only
io.fits.hdu	HDUList	update_extend		make sure that if the primary header needs the keyword extend that it has it and it is correct
io.fits.hdu	HDUList	writeto	fileobj output_verify overwrite checksum	write the hdulist to a new file
io.fits.hdu	HDUList	close	output_verify verbose closed	close the associated fits file and memmap object if any
io.fits.hdu	HDUList	_close	output_verify verbose closed	internal implementation of close() that does not allow further hdus to be loaded
io.fits.hdu	HDUList	info	output	summarize the info of the hdus in this hdulist
io.fits.hdu	HDUList	filename		return the file name associated with the hdulist object if one exists
io.fits.hdu	HDUList	_readfrom	cls fileobj data mode	provides the implementations from hdulist fromfile and
io.fits.hdu	HDUList	_try_while_unread_hdus	func index	attempt an operation that accesses an hdu by index/name that can fail if not all hdus have been read yet
io.fits.hdu	HDUList	_read_next_hdu		lazily load a single hdu from the fileobj or data string the hdulist was opened from unless no further hdus are found
io.fits.hdu	HDUList	_flush_update		implements flushing changes to a file in update mode
io.fits.hdu	HDUList	_flush_resize		implements flushing changes in update mode when parts of one or more hdu need to be resized
io.fits.hdu	HDUList	_wasresized	verbose	determine if any changes to the hdulist will require a file resize when flushing the file
io.fits.hdu		_hdu_class_from_header	cls header	used primarily by _basehdu __new__ to find an appropriate hdu class to use
io.fits.hdu	_BaseHDU	__new__	cls data header	iterates through the subclasses of _basehdu and uses that class's match_header() method to determine which subclass to instantiate
io.fits.hdu	_BaseHDU	fromstring	cls data checksum ignore_missing_end	creates a new hdu object of the appropriate type from a string containing the hdu's entire header and optionally its data
io.fits.hdu	_BaseHDU	readfrom	cls fileobj checksum ignore_missing_end	read the hdu from a file normally an hdu should be opened with
io.fits.hdu	_BaseHDU	writeto	name output_verify overwrite checksum	write the hdu to a new file this is a convenience method to
io.fits.hdu	_BaseHDU	_readfrom_internal	cls data header checksum	provides the bulk of the internal implementation for readfrom and fromstring
io.fits.hdu	_BaseHDU	_get_raw_data	shape code offset	return raw array from either the hdu's memory buffer or underlying file
io.fits.hdu	_BaseHDU	_update_uint_scale_keywords		if the data is unsigned int 16 32 or 64 add bscale/bzero cards to header
io.fits.hdu	_BaseHDU	_update_checksum	checksum checksum_keyword datasum_keyword	update the 'checksum' and 'datasum' keywords in the header (or keywords with equivalent semantics given by the checksum_keyword
io.fits.hdu	_BaseHDU	_writedata_internal	fileobj	the beginning and end of most _writedata() implementations are the same but the details of writing the data array itself can vary between
io.fits.hdu	_BaseHDU	_writedata_direct_copy	fileobj	copies the data directly from one file/buffer to the new file
io.fits.hdu	_CorruptedHDU	size		returns the size in bytes of the hdu's data part
io.fits.hdu	_NonstandardHDU	match_header	cls header	matches any hdu that has the 'simple' keyword but is not a standard primary or groups hdu
io.fits.hdu	_NonstandardHDU	size		returns the size in bytes of the hdu's data part
io.fits.hdu	_NonstandardHDU	_writedata	fileobj	differs from the base class :class _writedata in that it doesn't automatically add padding and treats the data as a string of raw bytes
io.fits.hdu	_NonstandardHDU	data		return the file data
io.fits.hdu	_ValidHDU	match_header	cls header	matches any hdu that is not recognized as having either the simple or xtension keyword in its header's first card but is nonetheless not
io.fits.hdu	_ValidHDU	size		size in bytes of the data portion of the hdu
io.fits.hdu	_ValidHDU	filebytes		calculates and returns the number of bytes that this hdu will write to a file
io.fits.hdu	_ValidHDU	fileinfo		returns a dictionary detailing information about the locations of this hdu within any associated file
io.fits.hdu	_ValidHDU	copy		make a copy of the hdu both header and data are copied
io.fits.hdu	_ValidHDU	req_cards	keyword pos test fix_value	check the existence location and value of a required card
io.fits.hdu	_ValidHDU	add_datasum	when blocking datasum_keyword	add the datasum card to this hdu with the value set to the checksum calculated for the data
io.fits.hdu	_ValidHDU	add_checksum	when override_datasum blocking checksum_keyword	add the checksum and datasum cards to this hdu with the values set to the checksum calculated for the hdu and the
io.fits.hdu	_ValidHDU	verify_datasum	blocking	verify that the value in the datasum keyword matches the value calculated for the datasum of the current hdu data
io.fits.hdu	_ValidHDU	verify_checksum	blocking	verify that the value in the checksum keyword matches the value calculated for the current hdu checksum
io.fits.hdu	_ValidHDU	_verify_checksum_datasum	blocking	verify the checksum/datasum values if the cards exist in the header
io.fits.hdu	_ValidHDU	_get_timestamp		return the current timestamp in iso 8601 format with microseconds stripped off
io.fits.hdu	_ValidHDU	_calculate_datasum	blocking	calculate the value for the datasum card in the hdu
io.fits.hdu	_ValidHDU	_calculate_checksum	datasum blocking checksum_keyword	calculate the value of the checksum card in the hdu
io.fits.hdu	_ValidHDU	_compute_checksum	data sum32 blocking	compute the ones-complement checksum of a sequence of bytes
io.fits.hdu	_ValidHDU	_compute_hdu_checksum	data sum32	translated from fits checksum proposal by seaman pence and rots
io.fits.hdu	_ValidHDU	_encode_byte	byte	encode a single byte
io.fits.hdu	_ValidHDU	_char_encode	value	encodes the checksum value using the algorithm described in spr section a
io.fits.hdu	ExtensionHDU	match_header	cls header	this class should never be instantiated directly either a standard
io.fits.hdu	ExtensionHDU	writeto	name output_verify overwrite checksum	works similarly to the normal writeto(), but prepends a default primaryhdu are required by extension hdus (which cannot stand on
io.fits.hdu	NonstandardExtHDU	match_header	cls header	matches any extension hdu that is not one of the standard extension hdu types
io.fits.hdu	NonstandardExtHDU	data		return the file data
io.fits.hdu	StreamingHDU	__init__	name header	construct a streaminghdu object given a file name and a header
io.fits.hdu	StreamingHDU	write	data	write the given data to the stream
io.fits.hdu	StreamingHDU	size		return the size in bytes of the data portion of the hdu
io.fits.hdu	StreamingHDU	close		close the physical fits file
io.fits.hdu	_ImageBaseHDU	match_header	cls header	_imagebasehdu is sort of an abstract class for hdus containing image data as opposed to table data and should never be used directly
io.fits.hdu	_ImageBaseHDU	section		access a section of the image array without loading the entire array into memory
io.fits.hdu	_ImageBaseHDU	shape		shape of the image array--should be equivalent to self data shape
io.fits.hdu	_ImageBaseHDU	data		image/array data as a ~numpy ndarray
io.fits.hdu	_ImageBaseHDU	update_header		update the header keywords to agree with the data
io.fits.hdu	_ImageBaseHDU	_update_header_scale_info	dtype	delete bscale/bzero from header if necessary
io.fits.hdu	_ImageBaseHDU	scale	type option bscale bzero	scale image data by using bscale/bzero
io.fits.hdu	_ImageBaseHDU	_scale_internal	type option bscale bzero	this is an internal implementation of the scale method which also supports handling blank properly
io.fits.hdu	_ImageBaseHDU	_dtype_for_bitpix		determine the dtype that the data should be converted to depending on the bitpix value in the header and possibly on the bscale value as
io.fits.hdu	_ImageBaseHDU	_convert_pseudo_unsigned	data	handle "pseudo-unsigned" integers if the user requested it returns
io.fits.hdu	_ImageBaseHDU	_get_scaled_image_data	offset shape	internal function for reading image data from a file and apply scale factors to it
io.fits.hdu	_ImageBaseHDU	_summary		summarize the hdu name dimensions and formats
io.fits.hdu	_ImageBaseHDU	_calculate_datasum	blocking	calculate the value for the datasum card in the hdu
io.fits.hdu	PrimaryHDU	__init__	data header do_not_scale_image_data ignore_blank	construct a primary hdu
io.fits.hdu	ImageHDU	__init__	data header name do_not_scale_image_data	construct an image hdu
io.fits.hdu	ImageHDU	_verify	option	imagehdu verify method
io.fits.hdu	FitsHDU	fromfile	cls filename compress	like fitshdu fromhdulist(), but creates a fitshdu from a file on
io.fits.hdu	FitsHDU	fromhdulist	cls hdulist compress	creates a new fitshdu from a given hdulist object
io.votable	UCDWords	is_primary	name	returns true if *name* is a valid primary name
io.votable	UCDWords	is_secondary	name	returns true if *name* is a valid secondary name
io.votable	UCDWords	get_description	name	returns the official english description of the given ucd *name*
io.votable	UCDWords	normalize_capitalization	name	returns the standard capitalization form of the given name
io.votable		parse_ucd	ucd check_controlled_vocabulary has_colon	parse the ucd into its component parts
io.votable		check_ucd	ucd check_controlled_vocabulary has_colon	returns false if *ucd* is not a valid unified content descriptor_
io.votable		convert_to_writable_filelike	fd compressed	returns a writable file-like object suitable for streaming output
io.votable		coerce_range_list_param	p frames numeric	coerces and/or verifies the object *p* into a valid range-list-format parameter
io.votable		version_compare	a b	compare two votable version identifiers
io.votable		parse	source columns invalid pedantic	parses a votable_ xml file or file-like object and returns a ~astropy
io.votable		parse_single_table	source	parses a votable_ xml file or file-like object reading and returning only the first ~astropy
io.votable		writeto	table file tabledata_format	writes a ~astropy io votable tree votablefile to a votable_ xml file
io.votable		validate	source output xmllint filename	prints a validation report for the given file
io.votable		from_table	table table_id	given an ~astropy table table object return a
io.votable		is_votable	source	reads the header of a file to determine if it is a votable file
io.votable		reset_vo_warnings		resets all of the vo warning state so that warnings that have already been emitted will be emitted again
io.votable		is_votable	origin filepath fileobj	reads the header of a file to determine if it is a votable file
io.votable		read_table_votable	input table_id use_names_over_ids	read a table object from an vo table file parameters
io.votable		write_table_votable	input output table_id overwrite	write a table object to an vo table file parameters
io.votable		check_id	ID name config pos	raises a ~astropy io votable exceptions votablespecerror if *id*
io.votable		fix_id	ID config pos	given an arbitrary string create one that can be used as an xml id
io.votable		check_token	token attr_name config pos	raises a valueerror if *token* is not a valid xml token
io.votable		check_mime_content_type	content_type config pos	raises a ~astropy io votable exceptions votablespecerror if
io.votable		check_anyuri	uri config pos	raises a ~astropy io votable exceptions votablespecerror if
io.votable		validate_schema	filename version	validates the given file against the appropriate votable schema
io.votable		warn_or_raise	warning_class exception_class args config	warn or raise an exception depending on the pedantic setting
io.votable		vo_raise	exception_class args config pos	raise an exception with proper position information if available
io.votable		vo_reraise	exc config pos additional	raise an exception with proper position information if available
io.votable		vo_warn	warning_class args config pos	warn with proper position information if available
io.votable		parse_vowarning	line	parses the vo warning string back into its parts
io.votable		_make_masked_array	data mask	masked arrays of zero length that also have a mask of zero length cause problems in numpy (at least in 1
io.votable		bitarray_to_bool	data length	converts a bit array a string of bits in a bytes object to a boolean numpy array
io.votable		bool_to_bitarray	value	converts a numpy boolean array to a bit array a string of bits in a bytes object
io.votable	Converter	supports_empty_values	config	returns true when the field can be completely empty
io.votable	Converter	parse	value config pos	convert the string *value* from the tabledata_ format into an object with the correct native in-memory datatype and mask flag
io.votable	Converter	parse_scalar	value config pos	parse a single scalar of the underlying type of the converter
io.votable	Converter	output	value mask	convert the object *value* in the native in-memory datatype to a unicode string suitable for serializing in the tabledata_
io.votable	Converter	binparse	read	reads some number of bytes from the binary_ format representation by calling the function *read*, and returns the
io.votable	Converter	binoutput	value mask	convert the object *value* in the native in-memory datatype to a string of bytes suitable for serialization in the binary_
io.votable		get_converter	field config pos	get an appropriate converter instance for a given field
io.votable		numpy_to_votable_dtype	dtype shape	converts a numpy dtype and shape to a dictionary of attributes for a votable field element and correspond to that type
io.votable		table_column_to_votable_datatype	column	given a astropy table column instance returns the attributes
io.votable		_resize	masked new_size	masked arrays can not be resized inplace and np resize and
io.votable		_lookup_by_attr_factory	attr unique iterator element_name	creates a function useful for looking up an element by a given attribute
io.votable		_lookup_by_id_or_name_factory	iterator element_name doc	like _lookup_by_attr_factory, but looks in both the "id" and "name" attributes
io.votable		_get_default_unit_format	config	get the default unit format as specified in the votable spec
io.votable		_get_unit_format	config	get the unit format based on the configuration
io.votable		check_astroyear	year field config pos	raises a ~astropy io votable exceptions votablespecerror if
io.votable		check_string	string attr_name config pos	raises a ~astropy io votable exceptions votablespecerror if
io.votable		check_ucd	ucd config pos	warns or raises a ~astropy
io.votable	_IDProperty	ID		the xml id_ of the element may be none or a string
io.votable	_NameProperty	name		an optional name for the element
io.votable	_XtypeProperty	xtype		extended data type information
io.votable	_UtypeProperty	utype		the usage-specific or unique type_ of the element
io.votable	_UcdProperty	ucd		the unified content descriptor_ for the element
io.votable	_DescriptionProperty	description		an optional string describing the element corresponds to the
io.votable	Element	parse	iterator config	for internal use parse the xml content of the children of the
io.votable	Element	to_xml	w	for internal use output the element to xml
io.votable	SimpleElementWithContent	content		the content of the element
io.votable	Link	content_role		defines the mime role of the referenced object must be one of
io.votable	Link	content_type		defines the mime content type of the referenced object
io.votable	Link	href		a uri to an arbitrary protocol the vo package only supports
io.votable	Info	name		[*required*] the key of the key-value pair
io.votable	Info	value		[*required*] the value of the key-value pair (always stored
io.votable	Info	content		the content inside the info element
io.votable	Info	ref		refer to another info_ element by id_, defined previously in the document
io.votable	Info	unit		a string specifying the units_ for the info_
io.votable	Values	null		for integral datatypes *null* is used to define the value used for missing values
io.votable	Values	type		[*required*] defines the applicability of the domain defined by this values_ element
io.votable	Values	ref		refer to another values_ element by id_, defined previously in the document for min/max/option information
io.votable	Values	min		the minimum value of the domain see :attr min_inclusive
io.votable	Values	min_inclusive		when true, the domain includes the minimum value
io.votable	Values	max		the maximum value of the domain see :attr max_inclusive
io.votable	Values	max_inclusive		when true, the domain includes the maximum value
io.votable	Values	options		a list of string key-value tuples defining other option elements for the domain
io.votable	Values	is_defaults		are the settings on this value element all the same as the
io.votable	Field	uniqify_names	cls fields	make sure that all names and titles in a list of fields are unique by appending numbers if necessary
io.votable	Field	datatype		[*required*] the datatype of the column valid values (as
io.votable	Field	precision		along with :attr width, defines the numerical accuracy_ associated with the data
io.votable	Field	width		along with :attr precision, defines the numerical accuracy_ associated with the data
io.votable	Field	ref		on field_ elements ref is used only for informational purposes for example to refer to a coosys_ element
io.votable	Field	unit		a string specifying the units_ for the field_
io.votable	Field	arraysize		specifies the size of the multidimensional array if this field_ contains more than a single value
io.votable	Field	type		the type attribute on field_ elements is reserved for future extensions
io.votable	Field	values		a :class values instance (or none) defining the domain of the column
io.votable	Field	links		a list of :class link instances used to reference more details about the meaning of the field_
io.votable	Field	to_table_column	column	sets the attributes of a given astropy table column instance
io.votable	Field	from_table_column	cls votable column	restores a field instance from a given astropy
io.votable	Param	value		[*required*] the constant value of the parameter its type is
io.votable	CooSys	ID		[*required*] the xml id of the coosys_ element used for cross-referencing
io.votable	CooSys	system		specifies the type of coordinate system valid choices are
io.votable	CooSys	equinox		a parameter required to fix the equatorial or ecliptic systems (as e
io.votable	CooSys	epoch		specifies the epoch of the positions it must be a string
io.votable	FieldRef	__init__	table ref ucd utype	*table* is the :class table object that this :class fieldref is a member of
io.votable	FieldRef	ref		the id_ of the field_ that this fieldref_ references
io.votable	FieldRef	get_ref		lookup the :class field instance that this :class fieldref references
io.votable	ParamRef	ref		the id_ of the param_ that this paramref_ references
io.votable	ParamRef	get_ref		lookup the :class param instance that this :class paramref references
io.votable	Group	ref		currently ignored as it's not clear from the spec how this is meant to work
io.votable	Group	entries		[read-only] a list of members of the group_ this list may
io.votable	Group	iter_fields_and_params		recursively iterate over all :class param elements in this :class group
io.votable	Group	iter_groups		recursively iterate over all sub-:class group instances in this :class group
io.votable	Table	ref	ref	refer to another table previously defined by the *ref* id_ for all metadata (field_, param_ etc
io.votable	Table	format		[*required*] the serialization format of the table must be
io.votable	Table	nrows		[*immutable*] the number of rows in the table as specified in the xml file
io.votable	Table	fields		a list of :class field objects describing the types of each of the data columns
io.votable	Table	params		a list of parameters constant-valued columns for the table
io.votable	Table	groups		a list of :class group objects describing how the columns and parameters are grouped
io.votable	Table	links		a list of :class link objects pointers to other documents or servers through a uri for the table
io.votable	Table	infos		a list of :class info objects for the table allows for
io.votable	Table	is_empty		returns true if this table doesn't contain any real data because it was skipped over by the parser (through use of the
io.votable	Table	create_arrays	nrows config	create a new array to hold the data based on the current set of fields and store them in the *array* and member variable
io.votable	Table	_resize_strategy	size	return a new larger size based on size used for reallocating an array when it fills up
io.votable	Table	to_table	use_names_over_ids	convert this vo table to an astropy table table instance
io.votable	Table	from_table	cls votable table	create a table instance from a given astropy table table
io.votable	Table	iter_fields_and_params		recursively iterate over all field and param elements in the table
io.votable	Table	iter_groups		recursively iterate over all group elements in the table
io.votable	Resource	type		[*required*] the type of the resource must be either
io.votable	Resource	extra_attributes		a dictionary of string keys to string values containing any extra attributes of the resource_ element that are not defined
io.votable	Resource	coordinate_systems		a list of coordinate system definitions (coosys_ elements) for the resource_
io.votable	Resource	infos		a list of informational parameters key-value pairs for the resource
io.votable	Resource	params		a list of parameters constant-valued columns for the resource
io.votable	Resource	links		a list of links pointers to other documents or servers through a uri for the resource
io.votable	Resource	tables		a list of tables in the resource must contain only
io.votable	Resource	resources		a list of nested resources inside this resource must contain
io.votable	Resource	iter_tables		recursively iterates over all tables in the resource and nested resources
io.votable	Resource	iter_fields_and_params		recursively iterates over all field_ and param_ elements in the resource its tables and nested resources
io.votable	Resource	iter_coosys		recursively iterates over all the coosys_ elements in the resource and nested resources
io.votable	Resource	iter_info		recursively iterates over all the info_ elements in the resource and nested resources
io.votable	VOTableFile	version		the version of the votable specification that the file uses
io.votable	VOTableFile	coordinate_systems		a list of coordinate system descriptions for the file must
io.votable	VOTableFile	params		a list of parameters constant-valued columns that apply to the entire file
io.votable	VOTableFile	infos		a list of informational parameters key-value pairs for the entire file
io.votable	VOTableFile	resources		a list of resources in the order they appear in the file
io.votable	VOTableFile	groups		a list of groups in the order they appear in the file only
io.votable	VOTableFile	to_xml	fd write_null_values compressed tabledata_format	write to an xml file
io.votable	VOTableFile	iter_tables		iterates over all tables in the votable file in a "flat" way ignoring the nesting of resources etc
io.votable	VOTableFile	get_first_table		often you know there is only one table in the file and that's all you need
io.votable	VOTableFile	get_table_by_index	idx	get a table by its ordinal position in the file
io.votable	VOTableFile	iter_fields_and_params		recursively iterate over all field_ and param_ elements in the votable_ file
io.votable	VOTableFile	iter_values		recursively iterate over all values_ elements in the votable_ file
io.votable	VOTableFile	iter_groups		recursively iterate over all group_ elements in the votable_ file
io.votable	VOTableFile	iter_coosys		recursively iterate over all coosys_ elements in the votable_ file
io.votable	VOTableFile	iter_info		recursively iterate over all info_ elements in the votable_ file
io.votable	VOTableFile	set_all_tables_format	format	set the output storage format of all tables in the file
io.votable	VOTableFile	from_table	cls table table_id	create a votablefile instance from a given astropy
io.votable.validator		make_validation_report	urls destdir multiprocess stilts	validates a large collection of web-accessible votable files
table	Index	__len__		number of rows in index
table	Index	replace_col	prev_col new_col	replace an indexed column with an updated reference
table	Index	reload		recreate the index based on data in self columns
table	Index	col_position	col_name	return the position of col_name in self columns
table	Index	insert_row	pos vals columns	insert a new row from the given values
table	Index	get_row_specifier	row_specifier	return an iterable corresponding to the input row specifier
table	Index	remove_rows	row_specifier	remove the given rows from the index
table	Index	remove_row	row reorder	remove the given row from the index
table	Index	find	key	return the row values corresponding to key in sorted order
table	Index	same_prefix	key	return rows whose keys contain the supplied key as a prefix
table	Index	same_prefix_range	lower upper bounds	return rows whose keys have a prefix in the given range
table	Index	range	lower upper bounds	return rows within the given range
table	Index	replace	row col_name val	replace the value of a column at a given position
table	Index	replace_rows	col_slice	modify rows in this index to agree with the specified slice
table	Index	sort		make row numbers follow the same sort order as the keys of the index
table	Index	sorted_data		returns a list of rows in sorted order based on keys essentially acts as an argsort() on columns
table	Index	__getitem__	item	returns a sliced version of this index
table	Index	__deepcopy__	memo	return a deep copy of this index
table	SlicedIndex	stop		the stopping position of the slice or the end of the index if this is an original slice
table	SlicedIndex	__getitem__	item	returns another slice of this index slice
table	SlicedIndex	sliced_coords	rows	convert the input rows to the sliced coordinate system
table	SlicedIndex	orig_coords	row	convert the input row from sliced coordinates back to original coordinates
table	SlicedIndex	get_slice	col_slice item	return a newly created index from the given slice
table		get_index	table table_copy	inputs a table and some subset of its columns and returns an index corresponding to this subset or none
table	_IndexModeContext	_get_copy_on_getitem_shim	cls	this creates a subclass of the column's class which overrides that class's __getitem__, such that when returning a slice of the
table	TableIndices	__getitem__	item	retrieve an item from the list of indices
table	TableLoc	__getitem__	item	retrieve table rows by value slice
table		descr	col	array-interface compliant full description of a column
table	TableColumns	__getitem__	item	get items from a tablecolumns object
table	TableColumns	isinstance	cls	return a list of columns which are instances of the specified classes
table	TableColumns	not_isinstance	cls	return a list of columns which are not instances of the specified classes
table	Table	as_array	keep_byteorder	return a new copy of the table in the form of a structured np ndarray or
table	Table	_mask		this is needed so that comparison of a masked table and a maskedarray works
table	Table	filled	fill_value	return a copy of self with masked values filled
table	Table	indices		return the indices associated with columns of the table as a tableindices object
table	Table	loc		return a tableloc object that can be used for retrieving rows by index in a given data range
table	Table	iloc		return a tableiloc object that can be used for retrieving indexed rows in the order they appear in the index
table	Table	add_index	colnames engine unique	insert a new index among one or more columns
table	Table	remove_indices	colname	remove all indices involving the given column
table	Table	index_mode	mode	return a context manager for an indexing mode
table	Table	__array__	dtype	support converting table to np array via np array table
table	Table	_check_names_dtype	names dtype n_cols	make sure that names and dtype are both iterable and have the same length as data
table	Table	_init_from_list	data names dtype n_cols	initialize table from a list of columns a column can be a
table	Table	_init_from_ndarray	data names dtype n_cols	initialize table from an ndarray structured array
table	Table	_init_from_dict	data names dtype n_cols	initialize table from a dictionary of columns
table	Table	_init_from_table	data names dtype n_cols	initialize table from an existing table object
table	Table	_convert_col_for_table	col	make sure that all column objects have correct class for this type of table
table	Table	_init_from_cols	cols	initialize table from a list of column or mixin objects
table	Table	_new_from_slice	slice_	create a new table as a referenced slice from self
table	Table	_make_table_from_cols	table cols	make table in-place so that it represents the given list of cols
table	Table	itercols		iterate over the columns of this table
table	Table	has_mixin_columns		true if table has any mixin columns defined as columns that are not column subclasses
table	Table	_add_as_mixin_column	col	determine if col should be added to the table directly as a mixin column
table	Table	pprint	max_lines max_width show_name show_unit	print a formatted string representation of the table
table	Table	show_in_notebook	tableid css display_length table_class	render the table in html and show it in the ipython notebook
table	Table	show_in_browser	max_lines jsviewer browser jskwargs	render the table in html and show it in a web browser
table	Table	pformat	max_lines max_width show_name show_unit	return a list of lines for the formatted string representation of the table
table	Table	more	max_lines max_width show_name show_unit	interactively browse table with a paging interface
table	Table	field	item	return column[item] for recarray compatibility
table	Table	_set_masked	masked	set the table masked property
table	Table	index_column	name	return the positional index of column name
table	Table	add_column	col index name rename_duplicate	add a new column object col to the table if index
table	Table	add_columns	cols indexes names copy	add a list of new column objects cols to the table if a
table	Table	_replace_column_warnings	name col	same as replace_column but issues warnings under various circumstances
table	Table	replace_column	name col	replace column name with the new col object
table	Table	remove_row	index	remove a row from the table
table	Table	remove_rows	row_specifier	remove rows from the table
table	Table	remove_column	name	remove a column from the table
table	Table	remove_columns	names	remove several columns from the table
table	Table	_convert_string_dtype	in_kind out_kind python3_only	convert string-like columns to/from bytestring and unicode internal only
table	Table	convert_bytestring_to_unicode	python3_only	convert bytestring columns (dtype kind='s') to unicode (dtype kind='u') assuming
table	Table	convert_unicode_to_bytestring	python3_only	convert ascii-only unicode columns (dtype kind='u') to bytestring (dtype kind='s')
table	Table	keep_columns	names	keep only the columns specified remove the others
table	Table	rename_column	name new_name	rename a column
table	Table	add_row	vals mask	add a new row to the end of the table
table	Table	insert_row	index vals mask	add a new row before the given index position in the table
table	Table	argsort	keys kind	return the indices which would sort the table according to one or more key columns
table	Table	sort	keys	sort the table according to one or more keys this operates
table	Table	reverse		reverse the row order of table rows the table is reversed
table	Table	read	cls	read and parse a data table and return as a table
table	Table	write		write this table object out in the specified format
table	Table	copy	copy_data	return a copy of the table
table	Table	group_by	keys	group this table by the specified keys this effectively splits the table into groups which correspond to
table	Table	to_pandas		return a :class pandas dataframe instance
table	Table	from_pandas	cls dataframe	create a table from a :class pandas dataframe instance
table	QTable	_add_as_mixin_column	col	determine if col should be added to the table directly as a mixin column
table		_searchsorted	array val side	call np searchsorted or use a custom binary
table	SortedArray	add	key row	add a new entry to the sorted array
table	SortedArray	_get_key_slice	i begin end	retrieve the ith slice of the sorted array from begin to end
table	SortedArray	find_pos	key data exact	return the index of the largest key in data greater than or equal to the given key data pair
table	SortedArray	find	key	find all rows matching the given key
table	SortedArray	range	lower upper bounds	find values in the given range
table	SortedArray	remove	key data	remove the given entry from the sorted array
table	SortedArray	shift_left	row	decrement all row numbers greater than the input row
table	SortedArray	shift_right	row	increment all row numbers greater than or equal to the input row
table	SortedArray	replace_rows	row_map	replace all rows with the values they map to in the given dictionary
table	SortedArray	items		retrieve all array items as a list of pairs of the form [(key [row 1 row 2
table	SortedArray	sort		make row order align with key order
table	SortedArray	sorted_data		return rows in sorted order
table	SortedArray	__getitem__	item	return a sliced reference to this sorted array
table		simple_table	size cols kinds masked	return a simple table for testing
table		complex_table		return a masked table from the io votable test set that has a wide variety
table		_merge_col_meta	out tables col_name_map idx_left	merge column meta data for the out table
table		_get_list_of_tables	tables	check that tables is a table or sequence of tables returns the
table		_get_out_class	tables	from a list of table instances get the merged output table class
table		join	left right keys join_type	perform a join of the left table with the right table on specified keys
table		vstack	tables join_type metadata_conflicts	stack tables vertically along rows a join_type of 'exact' means that the tables must all have exactly
table		hstack	tables join_type uniq_col_name table_names	stack tables along columns horizontally a join_type of 'exact' means that the tables must all
table		unique	input_table keys silent keep	returns the unique rows of a table
table		get_col_name_map	arrays common_names uniq_col_name table_names	find the column names mapping when merging the list of tables arrays
table		get_descrs	arrays col_name_map	find the dtypes descrs resulting from merging the list of arrays' dtypes using the column name mapping col_name_map
table		common_dtype	cols	use numpy to find the common dtype for a list of columns
table		_join	left right keys join_type	perform a join of the left and right tables on specified keys
table		_vstack	arrays join_type col_name_map	stack tables vertically by rows a join_type of 'exact' default means that the arrays must all
table		_hstack	arrays join_type uniq_col_name table_names	stack tables horizontally by columns a join_type of 'exact' default means that the arrays must all
table		_table_group_by	table keys	get groups for table on specified keys
table		column_group_by	column keys	get groups for column on specified keys
table	ColumnGroups	filter	func	filter groups in the column based on evaluating function func on each group sub-table
table	TableGroups	key_colnames		return the names of columns in the parent table that were used for grouping
table	TableGroups	aggregate	func	aggregate each group in the table into a single row by applying the reduction function func to group values in each column
table	TableGroups	filter	func	filter groups in the table based on evaluating function func on each group sub-table
table		col_copy	col copy_indices	this is a mixin-safe version of column copy() (with copy_data=true)
table	BaseColumn	copy	order data copy_data	return a copy of the current instance
table	BaseColumn	__setstate__	state	restore the internal state of the column/maskedcolumn for pickling purposes
table	BaseColumn	__reduce__		return a 3-tuple for pickling a column use the super-class
table	BaseColumn	__array_wrap__	out_arr context	__array_wrap__ is called at the end of every ufunc
table	BaseColumn	name		the name of this column
table	BaseColumn	descr		array-interface compliant full description of the column
table	BaseColumn	iter_str_vals		return an iterator that yields the string-formatted values of this column
table	BaseColumn	attrs_equal	col	compare the column attributes of col to this object
table	BaseColumn	pformat	max_lines show_name show_unit show_dtype	return a list of formatted string representation of column values
table	BaseColumn	pprint	max_lines show_name show_unit show_dtype	print a formatted string representation of column values
table	BaseColumn	more	max_lines show_name show_unit	interactively browse column with a paging interface
table	BaseColumn	unit		the unit associated with this column may be a string or a
table	BaseColumn	convert_unit_to	new_unit equivalencies	converts the values of the column in-place from the current unit to the given unit
table	BaseColumn	group_by	keys	group this column by the specified keys this effectively splits the column into groups which correspond to
table	BaseColumn	_copy_groups	out	copy current groups into a copy of self out
table	BaseColumn	quantity		a view of this table column as a ~astropy units quantity object with
table	BaseColumn	to	unit equivalencies	converts this table column to a ~astropy units quantity object with
table	BaseColumn	_copy_attrs	obj	copy key column attributes from obj to self
table	Column	insert	obj values	insert values before the given indices in the column and return a new ~astropy
table	MaskedColumn	_fix_fill_value	val	fix a fill value if needed to work around a bug with setting the fill value of a string array in maskedarray with python 3
table	MaskedColumn	fill_value	val	set fill value both in the masked column view and in the parent table if it exists
table	MaskedColumn	filled	fill_value	return a copy of self with masked values filled with a given value
table	MaskedColumn	insert	obj values mask	insert values along the given axis before the given indices and return a new ~astropy
table	ColumnDict	items		return items as a columnorderlist which sorts in the preferred way for column attributes
table		_construct_odict	load node	construct ordereddict from !!omap in yaml safe load
table		_repr_pairs	dump tag sequence flow_style	this is the same code as baserepresenter represent_sequence(),
table		_repr_odict	dumper data	represent ordereddict in yaml dump
table		_repr_column_dict	dumper data	represent columndict in yaml dump
table		_get_col_attributes	col	extract information from a column apart from the values that is required to fully serialize the column
table		get_yaml_from_table	table	return lines with a yaml representation of header content from the table
table		get_yaml_from_header	header	return lines with a yaml representation of header content from a table
table		get_header_from_yaml	lines	get a header dict from input lines which should be valid yaml in the ecsv meta format
table		get_col_name_map	arrays common_names uniq_col_name table_names	find the column names mapping when merging the list of structured ndarrays arrays
table		get_descrs	arrays col_name_map	find the dtypes descrs resulting from merging the list of arrays' dtypes using the column name mapping col_name_map
table		common_dtype	cols	use numpy to find the common dtype for a list of structured ndarray columns
table		fix_column_name	val	fixes column names so that they are compatible with numpy on python 2
table		recarray_fromrecords	rec_list	partial replacement for ~numpy core records fromrecords which includes
table		_use_str_for_masked_values	format_func	wrap format function to trap masked values
table		_possible_string_format_functions	format_	iterate through possible string-derived format functions
table		get_auto_format_func	col_name possible_string_format_functions	return a wrapped auto_format_func function which is used in formatting table columns
table	TableFormatter	_get_pprint_size	max_lines max_width	get the output size number of lines and character width for column and table pformat/pprint methods
table	TableFormatter	_pformat_col	col max_lines show_name show_unit	return a list of formatted string representation of column values
table	TableFormatter	_pformat_col_iter	col max_lines show_name show_unit	iterator which yields formatted string representation of column values
table	TableFormatter	_pformat_table	table max_lines max_width show_name	return a list of lines for the formatted string representation of the table
table	TableFormatter	_more_tabcol	tabcol max_lines max_width show_name	interactive "more" of a table or column
table	Node	replace	child new_child	replace this node's child with a new child
table	Node	remove	child	remove the given child
table	Node	set	other	copy the given node
table	BST	add	key data	add a key data pair
table	BST	find	key	return all data values corresponding to a given key
table	BST	find_node	key	find the node associated with the given key
table	BST	shift_left	row	decrement all rows larger than the given row
table	BST	shift_right	row	increment all rows greater than or equal to the given row
table	BST	traverse	order	return nodes of the bst in the given order
table	BST	items		return bst items in order as key data pairs
table	BST	sort		make row order align with key order
table	BST	sorted_data		return bst rows sorted by key values
table	BST	remove	key data	remove data corresponding to the given key
table	BST	is_valid		returns whether this is a valid bst
table	BST	range	lower upper bounds	return all nodes with keys in the given range
table	BST	range_nodes	lower upper bounds	return nodes in the given range
table	BST	same_prefix	val	assuming the given value has smaller length than keys return nodes whose keys have this value as a prefix
table	BST	height		return the bst height
table	BST	replace_rows	row_map	replace all rows with the values they map to in the given dictionary
table	FastBase	add	key val	add a key value pair
table	FastBase	find	key	find rows corresponding to the given key
table	FastBase	remove	key data	remove data from the given key
table	FastBase	shift_left	row	decrement rows larger than the given row
table	FastBase	shift_right	row	increment rows greater than or equal to the given row
table	FastBase	traverse		return all nodes in this bst
table	FastBase	items		return a list of key data tuples
table	FastBase	sort		make row order align with key order
table	FastBase	sorted_data		return a list of rows in order sorted by key
table	FastBase	range	lower upper bounds	return row values in the given range
table	FastBase	replace_rows	row_map	replace rows with the values in row_map
table	Row	__array__	dtype	support converting row to np array via np array table
table	Row	as_void		returns a *read-only* copy of the row values in the form of np void or
table	Row	_base_repr_	html	display row as a single-line table but with appropriate header line
table		table_info	tbl option out	write summary information about column to the out filehandle
units		get_converter	from_unit to_unit	like unit _get_converter except returns none if no scaling is needed
units		enable		enable cds units so they appear in results of ~astropy
units		_flatten_units_collection	items	given a list of sequences modules or dictionaries of units or single units return a flat set of all the units found
units		_normalize_equivalencies	equivalencies	normalizes equivalencies ensuring each is a 4-tuple of the form :
units	_UnitRegistry	set_enabled_units	units	sets the units enabled in the unit registry
units	_UnitRegistry	add_enabled_units	units	adds to the set of units enabled in the unit registry
units	_UnitRegistry	get_units_with_physical_type	unit	get all units in the registry with the same physical type as the given unit
units	_UnitRegistry	set_enabled_equivalencies	equivalencies	sets the equivalencies enabled in the unit registry
units	_UnitRegistry	add_enabled_equivalencies	equivalencies	adds to the set of equivalencies enabled in the unit registry
units		set_enabled_units	units	sets the units enabled in the unit registry
units		add_enabled_units	units	adds to the set of units enabled in the unit registry
units		set_enabled_equivalencies	equivalencies	sets the equivalencies enabled in the unit registry
units		add_enabled_equivalencies	equivalencies	adds to the equivalencies enabled in the unit registry
units	UnitBase	_repr_latex_		generate latex representation of unit name this is used by
units	UnitBase	__bytes__		return string representation for unit
units	UnitBase	__unicode__		return string representation for unit
units	UnitBase	_get_physical_type_id		returns an identifier that uniquely identifies the physical type of this unit
units	UnitBase	names		returns all of the names associated with this unit
units	UnitBase	name		returns the canonical short name associated with this unit
units	UnitBase	aliases		returns the alias long names for this unit
units	UnitBase	scale		return the scale of the unit
units	UnitBase	bases		return the bases of the unit
units	UnitBase	powers		return the powers of the unit
units	UnitBase	to_string	format	output the unit in the given format as a string
units	UnitBase	__format__	format_spec	try to format units using a formatter
units	UnitBase	_normalize_equivalencies	equivalencies	normalizes equivalencies ensuring each is a 4-tuple of the form : (from_unit to_unit forward_func backward_func)
units	UnitBase	is_equivalent	other equivalencies	returns true if this unit is equivalent to other
units	UnitBase	_is_equivalent	other equivalencies	returns true if this unit is equivalent to other
units	UnitBase	_apply_equivalencies	unit other equivalencies	internal function (used from _get_converter) to apply equivalence pairs
units	UnitBase	get_converter	other equivalencies	return the conversion function to convert values from self to the specified unit
units	UnitBase	_to	other	returns the scale to the specified unit
units	UnitBase	to	other value equivalencies	return the converted values in the specified unit
units	UnitBase	in_units	other value equivalencies	alias for to for backward compatibility with pynbody
units	UnitBase	decompose	bases	return a unit object composed of only irreducible units
units	UnitBase	compose	equivalencies units max_depth include_prefix_units	return the simplest possible composite unit s that represent the given unit
units	UnitBase	to_system	system	converts this unit into ones belonging to the given system
units	UnitBase	si		returns a copy of the current unit instance in si units
units	UnitBase	cgs		returns a copy of the current unit instance with cgs units
units	UnitBase	physical_type		return the physical type on the unit
units	UnitBase	_get_units_with_same_physical_type	equivalencies	return a list of registered units with the same physical type as this unit
units	UnitBase	find_equivalent_units	equivalencies units include_prefix_units	return a list of all the units that are the same type as self
units	UnitBase	is_unity		returns true if the unit is unscaled and dimensionless
units	NamedUnit	_generate_doc		generate a docstring for the unit if the user didn't supply one
units	NamedUnit	get_format_name	format	get a name for this unit that is specific to a particular format
units	NamedUnit	names		returns all of the names associated with this unit
units	NamedUnit	name		returns the canonical short name associated with this unit
units	NamedUnit	aliases		returns the alias long names for this unit
units	NamedUnit	short_names		returns all of the short names associated with this unit
units	NamedUnit	long_names		returns all of the long names associated with this unit
units	NamedUnit	_inject	namespace	injects the unit and all of its aliases in the given namespace dictionary
units		_recreate_irreducible_unit	cls names registered	this is used to reconstruct units when passed around by multiprocessing
units	IrreducibleUnit	represents		the unit that this named unit represents
units	Unit	represents		the unit that this named unit represents
units	CompositeUnit	scale		return the scale of the composite unit
units	CompositeUnit	bases		return the bases of the composite unit
units	CompositeUnit	powers		return the powers of the composite unit
units	CompositeUnit	__copy__		for compatibility with python copy module
units		_add_prefixes	u excludes namespace prefixes	set up all of the standard metric prefixes for a unit this
units		def_unit	s represents doc format	factory function for defining new units
units		_condition_arg	value	validate value is acceptable for conversion purposes
units		enable		enable deprecated units so they appear in results of ~astropy
units		_can_have_arbitrary_unit	value	test whether the items in value can have arbitrary units numbers whose value does not change upon a unit change i
units	QuantityIterator	__next__		return the next value or raise stopiteration
units	QuantityInfo	possible_string_format_functions	format_	iterate through possible string-derived format functions
units	Quantity	__quantity_subclass__	unit	overridden by subclasses to change what kind of view is created based on the output unit of an operation
units	Quantity	_new_view	obj unit	create a quantity view of some array-like input and set the unit by default return a view of obj of the same class as self and
units	Quantity	_set_unit	unit	set the unit
units	Quantity	to	unit equivalencies	returns a new ~astropy units quantity object with the specified
units	Quantity	value		the numerical value of this quantity
units	Quantity	unit		a ~astropy units unitbase object representing the unit of this
units	Quantity	equivalencies		a list of equivalencies that will be applied by default during unit conversions
units	Quantity	si		returns a copy of the current quantity instance with si units the
units	Quantity	cgs		returns a copy of the current quantity instance with cgs units the
units	Quantity	isscalar		true if the value of this quantity is a scalar or false if it is an array-like object
units	Quantity	__dir__		quantities are able to directly convert to other units that have the same physical type
units	Quantity	__getattr__	attr	quantities are able to directly convert to other units that have the same physical type
units	Quantity	__mul__	other	multiplication between quantity objects and other objects
units	Quantity	__imul__	other	in-place multiplication between quantity objects and others
units	Quantity	__rmul__	other	right multiplication between quantity objects and other objects
units	Quantity	__truediv__	other	division between quantity objects and other objects
units	Quantity	__itruediv__	other	inplace division between quantity objects and other objects
units	Quantity	__rtruediv__	other	right division between quantity objects and other objects
units	Quantity	__div__	other	division between quantity objects
units	Quantity	__idiv__	other	division between quantity objects
units	Quantity	__rdiv__	other	division between quantity objects
units	Quantity	__pos__		plus the quantity this is implemented in case users use +q where q is
units	Quantity	__nonzero__		quantities should always be treated as non-false there is too much potential for ambiguity otherwise
units	Quantity	_repr_latex_		generate a latex representation of the quantity and its unit
units	Quantity	__format__	format_spec	format quantities using the new-style python formatting codes as specifiers for the number
units	Quantity	decompose	bases	generates a new quantity with the units decomposed
units	Quantity	_decompose	allowscaledunits bases	generates a new quantity with the units decomposed decomposed
units	Quantity	flat		a 1-d iterator over the quantity array
units	Quantity	_wrap_function	function	wrap a numpy function returning a quantity with the proper unit parameters
units	Quantity	insert	obj values axis	insert values along the given axis before the given indices and return a new ~astropy
units	QuantityInput	as_decorator	cls func	a decorator for validating the units of arguments to functions
units		enable		enable imperial units so they appear in results of ~astropy
units		dimensionless_angles		allow angles to be equivalent to dimensionless (with 1 rad = 1 m/m = 1)
units		logarithmic		allow logarithmic units to be converted to dimensionless fractions
units		parallax		returns a list of equivalence pairs that handle the conversion between parallax angle and distance
units		spectral		returns a list of equivalence pairs that handle spectral wavelength wave number frequency and energy equivalences
units		spectral_density	wav factor	returns a list of equivalence pairs that handle spectral density with regard to wavelength and frequency
units		doppler_radio	rest	return the equivalency pairs for the radio convention for velocity
units		doppler_optical	rest	return the equivalency pairs for the optical convention for velocity
units		doppler_relativistic	rest	return the equivalency pairs for the relativistic convention for velocity
units		mass_energy		returns a list of equivalence pairs that handle the conversion between mass and energy
units		brightness_temperature	beam_area disp	defines the conversion between jy/beam and "brightness temperature", :math t_b, in kelvins
units		temperature		convert between kelvin celsius and fahrenheit here because unit and compositeunit cannot do addition or subtraction properly
units		temperature_energy		convert between kelvin and kev ev to an equivalent amount
units		pixel_scale	pixscale	convert between pixel distances (in units of pix) and angular units given a particular pixscale
units		plate_scale	platescale	convert between lengths to be interpreted as lengths in the focal plane and angular units with a specified platescale
units		_get_first_sentence	s	get the first sentence from a string and remove any carriage returns
units		_iter_unit_summary	namespace	generates the unit doc represents aliases prefixes tuple used to format the unit summary docs in generate_unit_summary
units		generate_unit_summary	namespace	generates a summary of units from a given namespace this is used
units		validate_power	p support_tuples	convert a power to a floating point value an integer or a fraction
units		resolve_fractions	a b	if either input is a fraction convert the other to a fraction
units		def_physical_type	unit name	adds a new physical unit mapping
units		get_physical_type	unit	given a unit returns the name of the physical quantity it represents
units.function		enable		enable magnitude zero point units so they appear in results of ~astropy
units.function	FunctionUnitBase	_default_function_unit		default function unit corresponding to the function
units.function	FunctionUnitBase	_quantity_class		function quantity class corresponding to this function unit
units.function	FunctionUnitBase	from_physical	x	transformation from value in physical to value in function units
units.function	FunctionUnitBase	to_physical	x	transformation from value in function to value in physical units
units.function	FunctionUnitBase	_copy	physical_unit	copy oneself possibly with a different physical unit
units.function	FunctionUnitBase	equivalencies		list of equivalencies between function and physical units
units.function	FunctionUnitBase	decompose	bases	copy the current unit with the physical unit decomposed
units.function	FunctionUnitBase	si		copy the current function unit with the physical unit in si
units.function	FunctionUnitBase	cgs		copy the current function unit with the physical unit in cgs
units.function	FunctionUnitBase	_get_physical_type_id		get physical type corresponding to physical unit
units.function	FunctionUnitBase	physical_type		return the physical type of the physical unit (e g 'length')
units.function	FunctionUnitBase	is_equivalent	other equivalencies	returns true if this unit is equivalent to other
units.function	FunctionUnitBase	to	other value equivalencies	return the converted values in the specified unit
units.function	FunctionUnitBase	to_string	format	output the unit in the given format as a string
units.function	FunctionUnitBase	__str__		return string representation for unit
units.function	FunctionUnitBase	_repr_latex_		generate latex representation of unit name this is used by
units.function	FunctionQuantity	physical		the physical quantity corresponding the function one
units.function	FunctionQuantity	_function_view		view as quantity with function unit dropping the physical unit
units.function	FunctionQuantity	si		return a copy with the physical unit in si units
units.function	FunctionQuantity	cgs		return a copy with the physical unit in cgs units
units.function	FunctionQuantity	decompose	bases	generate a new functionquantity with the physical unit decomposed
units.function	FunctionQuantity	__array_prepare__	obj context	check that the ufunc can deal with a functionquantity
units.function	FunctionQuantity	_comparison	other comparison_func	do a comparison between self and other raising unitserror when other cannot be converted to self because it has different physical
units.function	LogUnit	from_physical	x	transformation from value in physical to value in logarithmic units
units.function	LogUnit	to_physical	x	transformation from value in logarithmic to value in physical units
units.function	LogUnit	_add_and_adjust_physical_unit	other sign_self sign_other	add/subtract logunit to/from another unit and adjust physical unit
units.format	Generic	_make_parser	cls	the grammar here is based on the description in the fits standard
units.format	Latex	format_exponential_notation	cls val	formats a value in exponential notation for latex
units.format	CDS	_make_parser	cls	the grammar here is based on the description in the standards for astronomical catalogues 2
units.format	Base	parse	cls s	convert a string to a unit object
units.format	Base	to_string	cls u	convert a unit object to a string
units.format		get_format	format	get a formatter by name
units.format	OGIP	_make_parser	cls	the grammar here is based on the description in the specification of physical units within ogip fits files
units.format		get_grouped_by_powers	bases powers	groups the powers and bases in the given ~astropy
units.format		split_mantissa_exponent	v	given a number split it into its mantissa and base 10 exponent parts each as strings
units.format		decompose_to_known_units	unit func	partially decomposes a unit so it is only composed of units that are "known" to a given format
units.format		format_power	power	converts a value for a power (which may be floating point or a fractions
units.format		did_you_mean_units	s all_units deprecated_units format_decomposed	a wrapper around astropy utils misc did_you_mean that deals with
units.format		unit_deprecation_warning	s unit standard_name format_decomposed	raises a unitswarning about a deprecated unit in a given format
extern		_find_module	name path	alternative to imp find_module that can also search in subpackages
extern.configobj	InterpolationEngine	_fetch	key	helper function to fetch values from owning section
extern.configobj	InterpolationEngine	_parse_match	match	implementation-dependent helper function
extern.configobj	Section	__init__	parent depth main indict	* parent is the section above
extern.configobj	Section	__getitem__	key	fetch the item and do string interpolation
extern.configobj	Section	__setitem__	key value unrepr	correctly set a value
extern.configobj	Section	__delitem__	key	remove items from the sequence when deleting
extern.configobj	Section	get	key default	a version of get that doesn't bypass string interpolation
extern.configobj	Section	update	indict	a version of update that uses our __setitem__
extern.configobj	Section	pop	key default	'd pop(k[,d]) -> v remove specified key and return the corresponding value
extern.configobj	Section	popitem		pops the first key val
extern.configobj	Section	clear		a version of clear that also affects scalars/sections also clears comments and configspec
extern.configobj	Section	setdefault	key default	a version of setdefault that sets sequence if appropriate
extern.configobj	Section	items		d items() -> list of d's key value pairs as 2-tuples
extern.configobj	Section	keys		d keys() -> list of d's keys
extern.configobj	Section	values		d values() -> list of d's values
extern.configobj	Section	iteritems		d iteritems() -> an iterator over the key value items of d
extern.configobj	Section	iterkeys		d iterkeys() -> an iterator over the keys of d
extern.configobj	Section	itervalues		d itervalues() -> an iterator over the values of d
extern.configobj	Section	__repr__		x __repr__() <==> repr x
extern.configobj	Section	dict		return a deepcopy of self as a dictionary
extern.configobj	Section	merge	indict	a recursive update - useful for merging config files
extern.configobj	Section	rename	oldkey newkey	change a keyname to another without changing position in sequence
extern.configobj	Section	walk	function raise_errors call_on_sections	walk every member and call a function on the keyword and value
extern.configobj	Section	as_bool	key	accepts a key as input the corresponding value must be a string or
extern.configobj	Section	as_int	key	a convenience method which coerces the specified value to an integer
extern.configobj	Section	as_float	key	a convenience method which coerces the specified value to a float
extern.configobj	Section	as_list	key	a convenience method which fetches the specified value guaranteeing that it is a list
extern.configobj	Section	restore_default	key	restore and return default value for the specified key
extern.configobj	Section	restore_defaults		recursively restore default values to all members that have them
extern.configobj	ConfigObj	__init__	infile options configspec encoding	parse a config file or create a config file object
extern.configobj	ConfigObj	_handle_bom	infile	handle any bom and decode if necessary
extern.configobj	ConfigObj	_a_to_u	aString	decode ascii strings to unicode if a self encoding is specified
extern.configobj	ConfigObj	_decode	infile encoding	decode infile to unicode using the specified encoding
extern.configobj	ConfigObj	_decode_element	line	decode element to unicode if necessary
extern.configobj	ConfigObj	_str	value	used by stringify within validate to turn non-string values into strings
extern.configobj	ConfigObj	_parse	infile	actually parse the config file
extern.configobj	ConfigObj	_match_depth	sect depth	given a section and a depth level walk back through the sections parents to see if the depth level matches a previous section
extern.configobj	ConfigObj	_handle_error	text ErrorClass infile cur_index	handle an error according to the error settings
extern.configobj	ConfigObj	_unquote	value	return an unquoted version of a value
extern.configobj	ConfigObj	_quote	value multiline	return a safely quoted version of a value
extern.configobj	ConfigObj	_handle_value	value	given a value string unquote remove comment handle lists
extern.configobj	ConfigObj	_multiline	value infile cur_index maxline	extract the value where we are in a multiline situation
extern.configobj	ConfigObj	_handle_configspec	configspec	parse the configspec
extern.configobj	ConfigObj	_set_configspec	section copy	called by validate handles setting the configspec on subsections
extern.configobj	ConfigObj	_write_line	indent_string entry this_entry comment	write an individual line for the write method
extern.configobj	ConfigObj	_write_marker	indent_string depth entry comment	write a section marker line
extern.configobj	ConfigObj	_handle_comment	comment	deal with a comment
extern.configobj	ConfigObj	write	outfile section	write the current configobj as a file teknico fixme use stringio instead of real files
extern.configobj	ConfigObj	validate	validator preserve_errors copy section	test the configobj against a configspec
extern.configobj	ConfigObj	reset		clear configobj instance and restore to 'freshly created' state
extern.configobj	ConfigObj	reload		reload a configobj from file
extern.configobj	SimpleVal	check	check member missing	a dummy check method always returns the value unchanged
extern.configobj		flatten_errors	cfg res levels results	an example function that will turn a nested dictionary of results (as returned by configobj
extern.configobj		get_extra_values	conf _prepend	find all the values and sections not in the configspec from a validated configobj
extern.configobj		dottedQuadToNum	ip	convert decimal dotted quad string to long integer >>> int(dottedquadtonum('1 '))
extern.configobj		numToDottedQuad	num	convert int or long int to dotted quad string >>> numtodottedquad(long -1
extern.configobj	VdtUnknownCheckError	__init__	value	>>> raise vdtunknowncheckerror('yoda') traceback most recent call last :
extern.configobj	VdtParamError	__init__	name value	>>> raise vdtparamerror('yoda', 'jedi') traceback most recent call last :
extern.configobj	VdtTypeError	__init__	value	>>> raise vdttypeerror('jedi') traceback most recent call last :
extern.configobj	VdtValueError	__init__	value	>>> raise vdtvalueerror('jedi') traceback most recent call last :
extern.configobj	VdtValueTooSmallError	__init__	value	>>> raise vdtvaluetoosmallerror('0') traceback most recent call last :
extern.configobj	VdtValueTooBigError	__init__	value	>>> raise vdtvaluetoobigerror('1') traceback most recent call last :
extern.configobj	VdtValueTooShortError	__init__	value	>>> raise vdtvaluetooshorterror('jed') traceback most recent call last :
extern.configobj	VdtValueTooLongError	__init__	value	>>> raise vdtvaluetoolongerror('jedie') traceback most recent call last :
extern.configobj	Validator	__init__	functions	>>> vtri = validator()
extern.configobj	Validator	check	check value missing	usage check check value arguments
extern.configobj	Validator	_unquote	val	unquote a value if necessary
extern.configobj	Validator	_list_handle	listmatch	take apart a keyword=list('val 'val') type string
extern.configobj	Validator	_pass	value	dummy check that always passes >>> vtor
extern.configobj	Validator	get_default_value	check	given a check return the default value for the check converted to the right type
extern.configobj		_is_num_param	names values to_float	return numbers from inputs or raise vdtparamerror
extern.configobj		is_integer	value min max	a check that tests that a given value is an integer int or long and optionally between bounds
extern.configobj		is_float	value min max	a check that tests that a given value is a float an integer will be accepted and optionally - that it is between bounds
extern.configobj		is_boolean	value	check if the value represents a boolean
extern.configobj		is_ip_addr	value	check that the supplied value is an internet protocol address v 4
extern.configobj		is_list	value min max	check that the value is a list of values
extern.configobj		is_tuple	value min max	check that the value is a tuple of values
extern.configobj		is_string	value min max	check that the supplied value is a string
extern.configobj		is_int_list	value min max	check that the value is a list of integers
extern.configobj		is_bool_list	value min max	check that the value is a list of booleans
extern.configobj		is_float_list	value min max	check that the value is a list of floats
extern.configobj		is_string_list	value min max	check that the value is a list of strings
extern.configobj		is_ip_addr_list	value min max	check that the value is a list of ip addresses
extern.configobj		force_list	value min max	check that a value is a list coercing strings into a list with one member
extern.configobj		is_mixed_list	value	check that the value is a list
extern.configobj		is_option	value	this check matches the value to any of a set of options
extern.configobj		_test	value	a function that exists for test purposes
extern.configobj		_test2		>>> >>> v = validator()
extern.configobj		_test3		>>> vtor check('string(default="")', '', missing=true)
extern.ply		CPP_INTEGER	t	(((( 0x | 0x )[0-9a-fa-f]+)|(\d+))([uu][ll]|[ll][uu]|[uu]|[ll])?)
extern.ply		t_CPP_CHAR	t	l ?\'([^\\\n]|(\\( |\n)))*?\'
extern.bundled		_add_doc	func doc	add documentation to a function
extern.bundled		_import_module	name	import module returning the module after the last dot
extern.bundled	_SixMetaPathImporter	is_package	fullname	return true if the named module is a package
extern.bundled		add_move	move	add an item to six moves
extern.bundled		remove_move	name	remove item from six moves
extern.bundled		with_metaclass	meta	create a base class with a metaclass
extern.bundled		add_metaclass	metaclass	class decorator for creating a class with a metaclass
extern.bundled		python_2_unicode_compatible	klass	a decorator that defines __unicode__ and __str__ methods under python 2
analytic_functions		blackbody_nu	in_x temperature	calculate blackbody flux per steradian :math b_{\nu} t
analytic_functions		blackbody_lambda	in_x temperature	like :func blackbody_nu but for :math b_{\lambda} t
_erfa	Return	nd_dtype		this if the return type has a multi-dimensional output like
_erfa	Function	args_by_inout	inout_filter prop join	gives all of the arguments and/or returned values depending on whether they are inputs outputs etc
modeling	Mapping	inputs		the name s of the input variable s on which a model is evaluated
modeling	Mapping	outputs		the name s of the output s of the model
modeling	Mapping	mapping		integers representing indices of the inputs
modeling	Mapping	inverse		a mapping representing the inverse of the current mapping
modeling	Identity	inverse		the inverse transformation
modeling	PolynomialBase	param_names		coefficient names generated based on the model's polynomial degree and number of dimensions
modeling	PolynomialModel	degree		degree of polynomial
modeling	PolynomialModel	get_num_coeff	ndim	return the number of coefficients in one parameter set
modeling	OrthoPolynomialBase	get_num_coeff		determine how many coefficients are needed
modeling	OrthoPolynomialBase	_fcache	x y	to be implemented by subclasses
modeling	Chebyshev1D	fit_deriv	x	computes the vandermonde matrix
modeling	Chebyshev1D	clenshaw	x coeffs	evaluates the polynomial using clenshaw's algorithm
modeling	Hermite1D	fit_deriv	x	computes the vandermonde matrix
modeling	Hermite2D	_fcache	x y	calculate the individual hermite functions once and store them in a dictionary to be reused
modeling	Hermite2D	fit_deriv	x y	derivatives with respect to the coefficients
modeling	Hermite2D	_hermderiv1d	x deg	derivative of 1d hermite series
modeling	Legendre1D	fit_deriv	x	computes the vandermonde matrix
modeling	Polynomial1D	fit_deriv	x	computes the vandermonde matrix
modeling	Polynomial2D	fit_deriv	x y	computes the vandermonde matrix
modeling	Polynomial2D	multivariate_horner	x y coeffs	multivariate horner's scheme
modeling	Chebyshev2D	_fcache	x y	calculate the individual chebyshev functions once and store them in a dictionary to be reused
modeling	Chebyshev2D	fit_deriv	x y	derivatives with respect to the coefficients
modeling	Chebyshev2D	_chebderiv1d	x deg	derivative of 1d chebyshev series
modeling	Legendre2D	_fcache	x y	calculate the individual legendre functions once and store them in a dictionary to be reused
modeling	Legendre2D	fit_deriv	x y	derivatives with respect to the coefficients
modeling	Legendre2D	_legendderiv1d	x deg	derivative of 1d legendre polynomial
modeling	_SIP1D	get_num_coeff	ndim	return the number of coefficients in one param set
modeling		_model_oper	oper	returns a function that evaluates a given python arithmetic operator between two models
modeling	_ModelMeta	__repr__	cls	custom repr for model subclasses
modeling	_ModelMeta	_repr_pretty_	cls p cycle	repr for ipython's pretty printer
modeling	_ModelMeta	name	cls	the name of this model class--equivalent to cls __name__
modeling	_ModelMeta	_is_concrete	cls	a class-level property that determines whether the class is a concrete implementation of a model--i
modeling	_ModelMeta	rename	cls name	creates a copy of this model class with a new name
modeling	_ModelMeta	_create_bounding_box_property	cls members	takes any bounding_box defined on a concrete model subclass either as a fixed tuple or a property or method and wraps it in the generic
modeling	_ModelMeta	_create_bounding_box_subclass	cls func sig	for models that take optional arguments for defining their bounding box we create a subclass of _boundingbox with a __call__ method
modeling	_ModelMeta	_format_cls_repr	cls keywords	internal implementation of __repr__
modeling	Model	__call__		evaluate this model using the given input s and the parameter values that were specified when the model was instantiated
modeling	Model	name		user-provided name for this model instance
modeling	Model	name	val	assign a new name to this model
modeling	Model	n_inputs		the number of inputs to this model
modeling	Model	n_outputs		the number of outputs from this model
modeling	Model	model_set_axis		the index of the model set axis--that is the axis of a parameter array that pertains to which model a parameter value pertains to--as
modeling	Model	param_sets		return parameters as a pset
modeling	Model	parameters		a flattened array of all parameter values in all parameter sets
modeling	Model	parameters	value	assigning to this attribute updates the parameters array rather than replacing it
modeling	Model	fixed		a dict mapping parameter names to their fixed constraint
modeling	Model	tied		a dict mapping parameter names to their tied constraint
modeling	Model	bounds		a dict mapping parameter names to their upper and lower bounds as min max tuples
modeling	Model	eqcons		list of parameter equality constraints
modeling	Model	ineqcons		list of parameter inequality constraints
modeling	Model	inverse		returns a new ~astropy modeling model instance which performs the
modeling	Model	inverse		resets the model's inverse to its default if one exists otherwise the model will have no inverse
modeling	Model	has_user_inverse		a flag indicating whether or not a custom inverse model has been assigned to this model by a user via assignment to model
modeling	Model	bounding_box		a tuple of length n_inputs defining the bounding box limits or none for no bounding box
modeling	Model	bounding_box	bounding_box	assigns the bounding box limits
modeling	Model	has_user_bounding_box		a flag indicating whether or not a custom bounding_box has been assigned to this model by a user via assignment to
modeling	Model	evaluate		evaluate the model on some input variables
modeling	Model	render	out coords	evaluate a model at fixed positions respecting the bounding_box
modeling	Model	prepare_inputs		this method is used in ~astropy modeling model __call__ to ensure
modeling	Model	copy		return a copy of this model
modeling	Model	rename	name	return a copy of this model with a new name
modeling	Model	n_submodels		return the number of components in a single model which is obviously 1
modeling	Model	_from_existing	existing param_names	creates a new instance of cls that shares its underlying parameter values with an existing model instance given by existing
modeling	Model	_initialize_constraints	kwargs	pop parameter constraint values off the keyword arguments passed to model
modeling	Model	_initialize_parameters	args kwargs	initialize the _parameters array that stores raw parameter values for all parameter sets for use with vectorized fitting algorithms on
modeling	Model	_check_param_broadcast	params max_ndim	this subroutine checks that all parameter arrays can be broadcast against each other and determines the shapes parameters must have in
modeling	Model	_param_sets	raw	implementation of the model param_sets property
modeling	Model	_format_repr	args kwargs defaults	internal implementation of __repr__
modeling	Model	_format_str	keywords	internal implementation of __str__
modeling	_CompoundModelMeta	__dir__	cls	returns a list of attributes defined on a compound model including all of its parameters
modeling	_CompoundModelMeta	_from_operator	mcls operator left right	given a python operator (represented by a string such as '+' or '*', and two model classes or instances return a new compound
modeling	_CompoundModelMeta	_make_user_inverse	mcls operator left right	generates an inverse model for this _compoundmodel when either model in the operation has a *custom inverse* that was manually
modeling	_CompoundModelMeta	_init_param_descriptors	cls	this routine sets up the names for all the parameters on a compound model including figuring out unique names for those parameters and
modeling	_CompoundModelMeta	_init_param_names	cls	this subroutine is solely for setting up the param_names attribute itself
modeling	_CompoundModelMeta	_normalize_index	cls index	converts an index given to __getitem__ to either an integer or a slice with integer start and stop values
modeling	_CompoundModelMeta	_get_slice	cls start stop	return a new model build from a sub-expression of the expression represented by this model
modeling		custom_model		create a model from a user defined function the inputs and parameters of
modeling		_custom_model_wrapper	func fit_deriv	internal implementation custom_model
modeling		render_model	model arr coords	evaluates a model on an input array evaluation is limited to
modeling		_validate_input_shapes	inputs argnames n_models model_set_axis	perform basic validation of model inputs--that they are mutually broadcastable and that they have the minimum dimensions for the given
modeling	Fitter	objective_function	fps	function to minimize
modeling	Fitter	__call__		this method performs the actual fitting and modifies the parameter list of a model
modeling	LinearLSQFitter	_map_domain_window	model x y	maps domain into window for a polynomial model which has these attributes
modeling	LinearLSQFitter	__call__	model x y z	fit data to this model
modeling	LevMarLSQFitter	objective_function	fps	function to minimize
modeling	LevMarLSQFitter	__call__	model x y z	fit data to this model
modeling	LevMarLSQFitter	_wrap_deriv	params model weights x	wraps the method calculating the jacobian of the function to account for model constraints
modeling	SLSQPLSQFitter	__call__	model x y z	fit data to this model
modeling	SimplexLSQFitter	__call__	model x y z	fit data to this model
modeling	JointFitter	objective_function	fps	function to minimize
modeling	JointFitter	__call__		fit data to these models keeping some of the parameters common to the two models
modeling		_convert_input	x y z n_models	convert inputs to float arrays
modeling		_fitter_to_model_params	model fps	constructs the full list of model parameters from the fitted and constrained parameters
modeling		_model_to_fit_params	model	convert a model instance's parameter array to an array that can be used with a fitter that doesn't natively support fixed or tied parameters
modeling		_validate_constraints	supported_constraints model	make sure model constraints are supported by the current fitter
modeling		_validate_model	model supported_constraints	check that model and fitter are compatible and return a copy of the model
modeling		populate_entry_points	entry_points	this injects entry points into the astropy modeling fitting namespace
modeling	Projection	inverse		inverse projection--all projection models must provide an inverse
modeling	AffineTransformation2D	matrix	value	validates that the input matrix is a 2x2 2d array
modeling	AffineTransformation2D	translation	value	validates that the translation vector is a 2d vector this allows
modeling	AffineTransformation2D	evaluate	cls x y matrix	apply the transformation to a set of 2d cartesian coordinates given as two lists--one for the x coordinates and one for a y coordinates--or a
modeling	_Tabular	bounding_box		tuple defining the default bounding_box limits (points_low points_high)
modeling	_Tabular	evaluate		return the interpolated values at the input coordinates
modeling		tabular_model	dim name	make a tabular model where n_inputs is based on the dimension of the lookup_table
modeling		leastsquare	measured_vals updated_model weights x	least square statistic with optional weights
modeling	PowerLaw1D	evaluate	x amplitude x_0 alpha	one dimensional power law model function
modeling	PowerLaw1D	fit_deriv	x amplitude x_0 alpha	one dimensional power law derivative with respect to parameters
modeling	BrokenPowerLaw1D	evaluate	x amplitude x_break alpha_1	one dimensional broken power law model function
modeling	BrokenPowerLaw1D	fit_deriv	x amplitude x_break alpha_1	one dimensional broken power law derivative with respect to parameters
modeling	SmoothlyBrokenPowerLaw1D	evaluate	x amplitude log_break alpha_1	one dimensional smoothly broken power law model function
modeling	SmoothlyBrokenPowerLaw1D	fit_deriv	x amplitude log_break alpha_1	one dimensional smoothly broken power law derivative with respect
modeling	ExponentialCutoffPowerLaw1D	evaluate	x amplitude x_0 alpha	one dimensional exponential cutoff power law model function
modeling	ExponentialCutoffPowerLaw1D	fit_deriv	x amplitude x_0 alpha	one dimensional exponential cutoff power law derivative with respect to parameters
modeling	LogParabola1D	evaluate	x amplitude x_0 alpha	one dimensional log parabola model function
modeling	LogParabola1D	fit_deriv	x amplitude x_0 alpha	one dimensional log parabola derivative with respect to parameters
modeling	Optimization	maxiter		maximum number of iterations
modeling	Optimization	eps		step for the forward difference approximation of the jacobian
modeling	Optimization	eps	val	set eps value
modeling	SLSQP	__call__	objfunc initval fargs	run the solver
modeling	Simplex	__call__	objfunc initval fargs	run the solver
modeling	ExpressionTree	evaluate	operators getter start stop	evaluate the expression represented by this tree
modeling	AliasDict	__iter__		first iterates over keys from the parent dict if the aliased keys are present in the parent followed by any keys in the local store
modeling	_BoundingBox	validate	cls model bounding_box	validate a given bounding box sequence against the given model (which may be either a subclass of ~astropy
modeling		make_binary_operator_eval	oper f g	given a binary operator as a callable of two arguments oper and two callables f and g which accept the same arguments
modeling		poly_map_domain	oldx domain window	map domain into window by shifting and scaling
modeling		comb	N k	the number of combinations of n things taken k at a time
modeling		array_repr_oneline	array	represents a multi-dimensional numpy array flattened onto a single line
modeling		combine_labels	left right	for use with the join operator &: combine left input/output labels with right input/output labels
modeling		ellipse_extent	a b theta	calculates the extent of a box encapsulating a rotated 2d ellipse
modeling		get_inputs_and_params	func	given a callable determine the input variables and the parameters
modeling	_EulerRotation	rotation_matrix_from_angle	angle	clockwise rotation matrix
modeling	Rotation2D	evaluate	cls x y angle	apply the rotation to a set of 2d cartesian coordinates given as two lists--one for the x coordinates and one for a y coordinates--or a
modeling		_tofloat	value	convert a parameter to float or float array
modeling	Parameter	default		parameter default value
modeling	Parameter	value		the unadorned value proxied by this parameter
modeling	Parameter	shape		the shape of this parameter's value array
modeling	Parameter	size		the size of this parameter's value array
modeling	Parameter	fixed		boolean indicating if the parameter is kept fixed during fitting
modeling	Parameter	fixed	value	fix a parameter
modeling	Parameter	tied		indicates that this parameter is linked to another one
modeling	Parameter	tied	value	tie a parameter
modeling	Parameter	bounds		the minimum and maximum values of a parameter as a tuple
modeling	Parameter	bounds	value	set the minimum and maximum values of a parameter from a tuple
modeling	Parameter	min		a value used as a lower bound when fitting a parameter
modeling	Parameter	min	value	set a minimum value of a parameter
modeling	Parameter	max		a value used as an upper bound when fitting a parameter
modeling	Parameter	max	value	set a maximum value of a parameter
modeling	Parameter	validator		used as a decorator to set the validator method for a parameter
modeling	Parameter	copy	name description default getter	make a copy of this parameter, overriding any of its core attributes in the process or an exact copy
modeling	Parameter	_raw_value		currently for internal use only
modeling	Parameter	_bind	model	bind the parameter to a specific model instance don't use this directly on *unbound* parameters i
modeling	Parameter	_get_model_value	model	this method implements how to retrieve the value of this parameter from the model instance
modeling	Parameter	_set_model_value	model value	this method implements how to store the value of a parameter on the model instance
modeling	Parameter	_create_value_wrapper	wrapper model	wraps a getter/setter function to support optionally passing in a reference to the model object as the second argument
modeling	BaseGaussian1D	bounding_box	factor	tuple defining the default bounding_box limits (x_low x_high)
modeling	Gaussian1D	evaluate	x amplitude mean stddev	gaussian1d model function
modeling	Gaussian1D	fit_deriv	x amplitude mean stddev	gaussian1d model function derivatives
modeling	GaussianAbsorption1D	evaluate	x amplitude mean stddev	gaussianabsorption1d model function
modeling	GaussianAbsorption1D	fit_deriv	x amplitude mean stddev	gaussianabsorption1d model function derivatives
modeling	Gaussian2D	bounding_box	factor	tuple defining the default bounding_box limits in each dimension ((y_low y_high), (x_low x_high))
modeling	Gaussian2D	evaluate	x y amplitude x_mean	two dimensional gaussian function
modeling	Gaussian2D	fit_deriv	x y amplitude x_mean	two dimensional gaussian function derivative with respect to parameters
modeling	RedshiftScaleFactor	evaluate	x z	one dimensional redshiftscalefactor model function
modeling	RedshiftScaleFactor	fit_deriv	x z	one dimensional redshiftscalefactor model derivative
modeling	RedshiftScaleFactor	inverse		inverse redshiftscalefactor model
modeling	Sersic1D	evaluate	cls r amplitude r_eff	one dimensional sersic profile function
modeling	Sine1D	evaluate	x amplitude frequency phase	one dimensional sine model function
modeling	Sine1D	fit_deriv	x amplitude frequency phase	one dimensional sine model derivative
modeling	Linear1D	evaluate	x slope intercept	one dimensional line model function
modeling	Linear1D	fit_deriv	x slope intercept	one dimensional line model derivative with respect to parameters
modeling	Planar2D	evaluate	x y slope_x slope_y	two dimensional plane model function
modeling	Planar2D	fit_deriv	x y slope_x slope_y	two dimensional plane model derivative with respect to parameters
modeling	Lorentz1D	evaluate	x amplitude x_0 fwhm	one dimensional lorentzian model function
modeling	Lorentz1D	fit_deriv	x amplitude x_0 fwhm	one dimensional lorentzian model derivative with respect to parameters
modeling	Lorentz1D	bounding_box	factor	tuple defining the default bounding_box limits (x_low x_high)
modeling	Const1D	evaluate	x amplitude	one dimensional constant model function
modeling	Const1D	fit_deriv	x amplitude	one dimensional constant model derivative with respect to parameters
modeling	Const2D	evaluate	x y amplitude	two dimensional constant model function
modeling	Ellipse2D	evaluate	x y amplitude x_0	two dimensional ellipse model function
modeling	Ellipse2D	bounding_box		tuple defining the default bounding_box limits
modeling	Disk2D	evaluate	x y amplitude x_0	two dimensional disk model function
modeling	Disk2D	bounding_box		tuple defining the default bounding_box limits
modeling	Ring2D	evaluate	x y amplitude x_0	two dimensional ring model function
modeling	Ring2D	bounding_box		tuple defining the default bounding_box
modeling	Box1D	evaluate	x amplitude x_0 width	one dimensional box model function
modeling	Box1D	fit_deriv	cls x amplitude x_0	one dimensional box model derivative with respect to parameters
modeling	Box1D	bounding_box		tuple defining the default bounding_box limits
modeling	Box2D	evaluate	x y amplitude x_0	two dimensional box model function
modeling	Box2D	bounding_box		tuple defining the default bounding_box
modeling	Trapezoid1D	evaluate	x amplitude x_0 width	one dimensional trapezoid model function
modeling	Trapezoid1D	bounding_box		tuple defining the default bounding_box limits
modeling	TrapezoidDisk2D	evaluate	x y amplitude x_0	two dimensional trapezoid disk model function
modeling	TrapezoidDisk2D	bounding_box		tuple defining the default bounding_box
modeling	MexicanHat1D	evaluate	x amplitude x_0 sigma	one dimensional mexican hat model function
modeling	MexicanHat1D	bounding_box	factor	tuple defining the default bounding_box limits (x_low x_high)
modeling	MexicanHat2D	evaluate	x y amplitude x_0	two dimensional mexican hat model function
modeling	AiryDisk2D	evaluate	cls x y amplitude	two dimensional airy model function
modeling	Moffat1D	evaluate	x amplitude x_0 gamma	one dimensional moffat model function
modeling	Moffat1D	fit_deriv	x amplitude x_0 gamma	one dimensional moffat model derivative with respect to parameters
modeling	Moffat2D	evaluate	x y amplitude x_0	two dimensional moffat model function
modeling	Moffat2D	fit_deriv	x y amplitude x_0	two dimensional moffat model derivative with respect to parameters
modeling	Sersic2D	evaluate	cls x y amplitude	two dimensional sersic profile function
coordinates		_get_repr_cls	value	return a valid representation class from value or raise exception
coordinates	FrameAttribute	convert_input	value	validate the input value and convert to expected attribute class
coordinates	TimeFrameAttribute	convert_input	value	convert input value to a time object and validate by running through the time constructor
coordinates	CartesianRepresentationFrameAttribute	convert_input	value	checks that the input is a cartesianrepresentation with the correct unit or the special value [0 0 0]
coordinates	QuantityFrameAttribute	convert_input	value	checks that the input is a quantity with the necessary units (or the special value 0)
coordinates	EarthLocationAttribute	convert_input	value	checks that the input is a quantity with the necessary units (or the special value 0)
coordinates	CoordinateAttribute	convert_input	value	checks that the input is a skycoord with the necessary units (or the special value none)
coordinates	BaseCoordinateFrame	cache		cache for this frame a dict it stores anything that should be
coordinates	BaseCoordinateFrame	data		the coordinate data for this object if this frame has no data an
coordinates	BaseCoordinateFrame	has_data		true if this frame has data, false otherwise
coordinates	BaseCoordinateFrame	representation		the representation of the data in this frame as a class that is subclassed from ~astropy
coordinates	BaseCoordinateFrame	representation_info		a dictionary with the information of what attribute names for this frame apply to particular representations
coordinates	BaseCoordinateFrame	realize_frame	representation	generates a new frame *with new data* from another frame which may or may not have data
coordinates	BaseCoordinateFrame	represent_as	new_representation in_frame_units	generate and return a new representation of this frame's data as a representation object
coordinates	BaseCoordinateFrame	transform_to	new_frame	transform this object's coordinate data to a new frame
coordinates	BaseCoordinateFrame	is_transformable_to	new_frame	determines if this coordinate frame can be transformed to another given frame
coordinates	BaseCoordinateFrame	is_frame_attr_default	attrnm	determine whether or not a frame attribute has its value because it's the default value or because this frame was created with that value
coordinates	BaseCoordinateFrame	is_equivalent_frame	other	checks if this object is the same frame as the other object
coordinates	BaseCoordinateFrame	_data_repr		returns a string representation of the coordinate data
coordinates	BaseCoordinateFrame	_frame_attrs_repr		returns a string representation of the frame's attributes if any
coordinates	BaseCoordinateFrame	_apply	method	create a new instance applying a method to the underlying data
coordinates	BaseCoordinateFrame	__dir__		override the builtin dir behavior to include representation names
coordinates	BaseCoordinateFrame	__getattr__	attr	allow access to attributes defined in self
coordinates	BaseCoordinateFrame	separation	other	computes on-sky separation between this coordinate and another
coordinates	BaseCoordinateFrame	separation_3d	other	computes three dimensional separation between this coordinate and another
coordinates	BaseCoordinateFrame	cartesian		shorthand for a cartesian representation of the coordinates in this object
coordinates	BaseCoordinateFrame	spherical		shorthand for a spherical representation of the coordinates in this object
coordinates		calc_moon	t	lunar position model elp2000-82 of (chapront-touze' and chapront 1983 124 50) this is the simplified version of jean meeus astronomical algorithms
coordinates	TransformGraph	frame_set		a set of all the frame classes present in this transformgraph
coordinates	TransformGraph	frame_attributes		a dict of all the attributes of all frame classes in this transformgraph
coordinates	TransformGraph	invalidate_cache		invalidates the cache that stores optimizations for traversing the transform graph
coordinates	TransformGraph	add_transform	fromsys tosys transform	add a new coordinate transformation to the graph
coordinates	TransformGraph	remove_transform	fromsys tosys transform	removes a coordinate transform from the graph
coordinates	TransformGraph	find_shortest_path	fromsys tosys	computes the shortest distance along the transform graph from one system to another
coordinates	TransformGraph	get_transform	fromsys tosys	generates and returns the compositetransform for a transformation between two coordinate systems
coordinates	TransformGraph	lookup_name	name	tries to locate the coordinate class with the provided alias
coordinates	TransformGraph	get_names		returns all available transform names they will all be
coordinates	TransformGraph	to_dot_graph	priorities addnodes savefn savelayout	converts this transform graph to the graphviz_ dot format
coordinates	TransformGraph	to_networkx_graph		converts this transform graph into a networkx graph
coordinates	TransformGraph	transform	transcls fromsys tosys priority	a function decorator for defining transformations
coordinates	CoordinateTransform	register	graph	add this transformation to the requested transformation graph replacing anything already connecting these two coordinates
coordinates	CoordinateTransform	unregister	graph	remove this transformation from the requested transformation graph
coordinates	CoordinateTransform	__call__	fromcoord toframe	does the actual coordinate transformation from the fromsys class to the tosys class
coordinates	CompositeTransform	_combine_statics	transforms	combines together sequences of staticmatrixtransforms into a single transform and returns it
coordinates	Angle	_tuple_to_float	angle unit	converts an angle represented as a 3-tuple or 2-tuple into a floating point number in the given unit
coordinates	Angle	hour		the angle's value in hours read-only property
coordinates	Angle	hms		the angle's value in hours as a named tuple with h m s members
coordinates	Angle	dms		the angle's value in degrees as a named tuple with d m s members
coordinates	Angle	signed_dms		the angle's value in degrees as a named tuple with sign d m s members
coordinates	Angle	to_string	unit decimal sep precision	a string representation of the angle
coordinates	Angle	wrap_at	wrap_angle inplace	wrap the angle object at the given wrap_angle
coordinates	Angle	is_within_bounds	lower upper	check if all angle s satisfy lower <= angle < upper if lower is not specified (or none) then no lower bounds check is
coordinates	Latitude	_validate_angles	angles	check that angles are between -90 and 90 degrees
coordinates	Longitude	_wrap_internal		wrap the internal values in the longitude object using the
coordinates		rotation_matrix	angle axis unit	generate a 3x3 cartesian rotation matrix in for rotation about a particular axis
coordinates		angle_axis	matrix	computes the angle of rotation and the rotation axis for a given rotation matrix
coordinates		matrix_product		matrix multiply all arguments together
coordinates		matrix_transpose	matrix	transpose a matrix or stack of matrices by swapping the last two axes
coordinates		rotation_matrix	angle axis unit	generate matrices for rotation by some angle around some axis
coordinates		angle_axis	matrix	angle of rotation and rotation axis for a given rotation matrix
coordinates		match_coordinates_3d	matchcoord catalogcoord nthneighbor storekdtree	finds the nearest 3-dimensional matches of a coordinate or coordinates in a set of catalog coordinates
coordinates		match_coordinates_sky	matchcoord catalogcoord nthneighbor storekdtree	finds the nearest on-sky matches of a coordinate or coordinates in a set of catalog coordinates
coordinates		search_around_3d	coords1 coords2 distlimit storekdtree	searches for pairs of points that are at least as close as a specified distance in 3d space
coordinates		search_around_sky	coords1 coords2 seplimit storekdtree	searches for pairs of points that have an angular separation at least as close as a specified angle
coordinates		_get_cartesian_kdtree	coord attrname_or_kdt forceunit	this is a utility function to retrieve (and build/cache if necessary) a 3d cartesian kd-tree from various sorts of astropy coordinate objects
coordinates		horoscope	birthday corrected	enter your birthday as an astropy time time object and
coordinates	SiteRegistry	__getitem__	site_name	returns an earthlocation for a known site in this registry
coordinates	SiteRegistry	names		the names in this registry note that these are *not* exactly the same
coordinates	SiteRegistry	add_site	names locationobj	adds a location to the registry
coordinates		get_builtin_sites		load observatory database from data/observatories json and parse them into
coordinates		get_downloaded_sites	jsonurl	load observatory database from data astropy org and parse into a siteregistry
coordinates		_check_hour_range	hrs	checks that the given value is in the range -24 24
coordinates		_check_minute_range	m	checks that the given value is in the range [0 60] if the value
coordinates		_check_second_range	sec	checks that the given value is in the range [0 60] if the value
coordinates		check_hms_ranges	h m s	checks that the given hour minute and second are all within reasonable range
coordinates		parse_angle	angle unit debug	parses an input string value into an angle value
coordinates		degrees_to_dms	d	convert a floating-point degree value into a degree arcminute arcsecond tuple
coordinates		dms_to_degrees	d m s	convert degrees arcminute arcsecond to a float degrees value
coordinates		hms_to_hours	h m s	convert hour minute second to a float hour value
coordinates		hms_to_degrees	h m s	convert hour minute second to a float degrees value
coordinates		hms_to_radians	h m s	convert hour minute second to a float radians value
coordinates		hms_to_dms	h m s	convert degrees arcminutes arcseconds to an hour minute second tuple
coordinates		hours_to_decimal	h	convert any parseable hour value into a float value
coordinates		hours_to_radians	h	convert an angle in hours to radians
coordinates		hours_to_hms	h	convert an floating-point hour value into an hour minute second tuple
coordinates		radians_to_degrees	r	convert an angle in radians to degrees
coordinates		radians_to_hours	r	convert an angle in radians to hours
coordinates		radians_to_hms	r	convert an angle in radians to an hour minute second tuple
coordinates		radians_to_dms	r	convert an angle in radians to an degree arcminute arcsecond tuple
coordinates		sexagesimal_to_string	values precision pad sep	given an already separated tuple of sexagesimal values returns a string
coordinates		hours_to_string	h precision pad sep	takes a decimal hour value and returns a string formatted as hms with separator specified by the 'sep' parameter
coordinates		degrees_to_string	d precision pad sep	takes a decimal hour value and returns a string formatted as dms with separator specified by the 'sep' parameter
coordinates		angular_separation	lon1 lat1 lon2 lat2	angular separation between two points on a sphere
coordinates		position_angle	lon1 lat1 lon2 lat2	position angle east of north between two points on a sphere
coordinates		eccentricity	jd	eccentricity of the earth's orbit at the requested julian date
coordinates		mean_lon_of_perigee	jd	computes the mean longitude of perigee of the earth's orbit at the requested julian date
coordinates		obliquity	jd algorithm	computes the obliquity of the earth at the requested julian date
coordinates		precession_matrix_Capitaine	fromepoch toepoch	computes the precession matrix from one julian epoch to another
coordinates		_precess_from_J2000_Capitaine	epoch	computes the precession matrix from j2000 to the given julian epoch
coordinates		_precession_matrix_besselian	epoch1 epoch2	computes the precession matrix from one besselian epoch to another using newcomb's method
coordinates		_load_nutation_data	datastr seriestype	loads nutation series from data stored in string form
coordinates		nutation_components2000B	jd	computes nutation components following the iau 2000b specification
coordinates		nutation_matrix	epoch	nutation matrix generated from nutation components
coordinates	EarthLocation	from_geocentric	cls x y z	location on earth initialized from geocentric coordinates
coordinates	EarthLocation	from_geodetic	cls lon lat height	location on earth initialized from geodetic coordinates
coordinates	EarthLocation	of_site	cls site_name	return an object of this class for a known observatory/site by name
coordinates	EarthLocation	of_address	cls address get_height	return an object of this class for a given address by querying the google maps geocoding api
coordinates	EarthLocation	get_site_names	cls	get list of names of observatories for use with ~astropy
coordinates	EarthLocation	_get_site_registry	cls force_download force_builtin	gets the site registry the first time this either downloads or loads
coordinates	EarthLocation	ellipsoid		the default ellipsoid used to convert to geodetic coordinates
coordinates	EarthLocation	geodetic		convert to geodetic coordinates for the default ellipsoid
coordinates	EarthLocation	to_geodetic	ellipsoid	convert to geodetic coordinates
coordinates	EarthLocation	longitude		longitude of the location for the default ellipsoid
coordinates	EarthLocation	latitude		latitude of the location for the default ellipsoid
coordinates	EarthLocation	height		height of the location for the default ellipsoid
coordinates	EarthLocation	geocentric		convert to a tuple with x y and z as quantities
coordinates	EarthLocation	to_geocentric		convert to a tuple with x y and z as quantities
coordinates	EarthLocation	get_itrs	obstime	generates an ~astropy coordinates itrs object with the location of
coordinates	EarthLocation	get_gcrs_posvel	obstime	calculate the gcrs position and velocity of this object at the requested obstime
coordinates	EarthLocation	x		the x component of the geocentric coordinates
coordinates	EarthLocation	y		the y component of the geocentric coordinates
coordinates	EarthLocation	z		the z component of the geocentric coordinates
coordinates		_parse_response	resp_data	given a string response from sesame parse out the coordinates by looking for a line starting with a j meaning icrs j2000 coordinates
coordinates		get_icrs_coordinates	name	retrieve an icrs object by using an online name resolving service to retrieve coordinates for the specified name
coordinates		_get_kernel	value	try importing jplephem download/retrieve from cache the satellite planet kernel corresponding to the given ephemeris
coordinates		_get_body_barycentric_posvel	body time ephemeris get_velocity	calculate the barycentric position and velocity of a solar system body
coordinates		get_body_barycentric_posvel	body time ephemeris	calculate the barycentric position and velocity of a solar system body
coordinates		get_body_barycentric	body time ephemeris	calculate the barycentric position of a solar system body
coordinates		_get_apparent_body_position	body time ephemeris	calculate the apparent position of body body relative to earth
coordinates		get_body	body time location ephemeris	get a ~astropy coordinates skycoord for a solar system body as observed
coordinates		get_moon	time location ephemeris	get a ~astropy coordinates skycoord for the earth's moon as observed
coordinates		_apparent_position_in_true_coordinates	skycoord	convert skycoord in gcrs frame into one in which ra and dec are defined w
coordinates		cartesian_to_spherical	x y z	converts 3d rectangular cartesian coordinates to spherical polar coordinates
coordinates		spherical_to_cartesian	r lat lon	converts spherical polar coordinates to rectangular cartesian coordinates
coordinates		get_sun	time	determines the location of the sun at a given time (or times if the input is an array ~astropy
coordinates		concatenate	coords	combine multiple coordinate objects into a single ~astropy
coordinates		get_constellation	coord short_name constellation_list	determines the constellation s a given coordinate object contains
coordinates	Distance	z		short for self compute_z()
coordinates	Distance	compute_z	cosmology	the redshift for this distance assuming its physical distance is a luminosity distance
coordinates	Distance	distmod		the distance modulus as a ~astropy units quantity
coordinates		_convert_to_and_validate_length_unit	unit allow_dimensionless	raises unitserror if not a length unit
coordinates	SkyCoord	_apply	method	create a new instance applying a method to the underlying data
coordinates	SkyCoord	_parse_inputs	args kwargs	assemble a validated and sanitized keyword args dict for instantiating a skycoord and coordinate object from the provided args, and kwargs
coordinates	SkyCoord	transform_to	frame merge_attributes	transform this coordinate to a new frame
coordinates	SkyCoord	__getattr__	attr	overrides getattr to return coordinates that this can be transformed to based on the alias attr in the master transform graph
coordinates	SkyCoord	__dir__		override the builtin dir behavior to include - transforms available by aliases
coordinates	SkyCoord	to_string	style	a string representation of the coordinates
coordinates	SkyCoord	is_equivalent_frame	other	checks if this object's frame as the same as that of the other object
coordinates	SkyCoord	separation	other	computes on-sky separation between this coordinate and another
coordinates	SkyCoord	separation_3d	other	computes three dimensional separation between this coordinate and another
coordinates	SkyCoord	spherical_offsets_to	tocoord	computes angular offsets to go *from* this coordinate *to* another
coordinates	SkyCoord	match_to_catalog_sky	catalogcoord nthneighbor	finds the nearest on-sky matches of this coordinate in a set of catalog coordinates
coordinates	SkyCoord	match_to_catalog_3d	catalogcoord nthneighbor	finds the nearest 3-dimensional matches of this coordinate to a set of catalog coordinates
coordinates	SkyCoord	search_around_sky	searcharoundcoords seplimit	searches for all coordinates in this object around a supplied set of points within a given on-sky separation
coordinates	SkyCoord	search_around_3d	searcharoundcoords distlimit	searches for all coordinates in this object around a supplied set of points within a given 3d radius
coordinates	SkyCoord	position_angle	other	computes the on-sky position angle east of north between this skycoord and another
coordinates	SkyCoord	skyoffset_frame	rotation	returns the sky offset frame with this skycoord at the origin
coordinates	SkyCoord	get_constellation	short_name constellation_list	determines the constellation s of the coordinates this skycoord contains
coordinates	SkyCoord	to_pixel	wcs origin mode	convert this coordinate to pixel coordinates using a ~astropy wcs wcs
coordinates	SkyCoord	from_pixel	cls xp yp wcs	create a new skycoord from pixel coordinates using an ~astropy
coordinates	SkyCoord	guess_from_table	cls table	a convenience method to create and return a new skycoord from the data in an astropy table
coordinates	SkyCoord	from_name	cls name frame	given a name query the cds name resolver to attempt to retrieve coordinate information for that object
coordinates		_get_frame_class	frame	get a frame class from the input frame, which could be a frame name string or frame class
coordinates		_get_frame	args kwargs	determine the coordinate frame from input skycoord args and kwargs this
coordinates		_get_units	args kwargs	get the longitude unit and latitude unit from kwargs possible enhancement
coordinates		_parse_coordinate_arg	coords frame units init_kwargs	single unnamed arg supplied this must be
coordinates		_get_representation_attrs	frame units kwargs	find instances of the "representation attributes" for specifying data for this frame
coordinates		_parse_ra_dec	coord_str	parse ra and dec values from a coordinate string currently the
coordinates	BaseRepresentation	components		a tuple with the in-order names of the coordinate components
coordinates	BaseRepresentation	_apply	method	create a new representation with method applied to the arrays
coordinates	BaseRepresentation	shape		the shape of the instance and underlying arrays
coordinates	BaseRepresentation	_values		turn the coordinates into a record array with the coordinate values
coordinates	BaseRepresentation	_units		return a dictionary with the units of the coordinate components
coordinates	BaseRepresentation	dot	other	dot product of two representations
coordinates	BaseRepresentation	cross	other	vector cross product of two representations
coordinates	CartesianRepresentation	x		the x component of the point s
coordinates	CartesianRepresentation	y		the y component of the point s
coordinates	CartesianRepresentation	z		the z component of the point s
coordinates	CartesianRepresentation	get_xyz	xyz_axis	return a vector array of the x y and z coordinates
coordinates	CartesianRepresentation	transform	matrix	transform the cartesian coordinates using a 3x3 matrix
coordinates	CartesianRepresentation	dot	other	dot product of two representations
coordinates	CartesianRepresentation	cross	other	cross product of two representations
coordinates	UnitSphericalRepresentation	lon		the longitude of the point s
coordinates	UnitSphericalRepresentation	lat		the latitude of the point s
coordinates	UnitSphericalRepresentation	to_cartesian		converts spherical polar coordinates to 3d rectangular cartesian coordinates
coordinates	UnitSphericalRepresentation	from_cartesian	cls cart	converts 3d rectangular cartesian coordinates to spherical polar coordinates
coordinates	UnitSphericalRepresentation	cross	other	cross product of two representations
coordinates	SphericalRepresentation	lon		the longitude of the point s
coordinates	SphericalRepresentation	lat		the latitude of the point s
coordinates	SphericalRepresentation	distance		the distance from the origin to the point s
coordinates	SphericalRepresentation	to_cartesian		converts spherical polar coordinates to 3d rectangular cartesian coordinates
coordinates	SphericalRepresentation	from_cartesian	cls cart	converts 3d rectangular cartesian coordinates to spherical polar coordinates
coordinates	PhysicsSphericalRepresentation	phi		the azimuth of the point s
coordinates	PhysicsSphericalRepresentation	theta		the elevation of the point s
coordinates	PhysicsSphericalRepresentation	r		the distance from the origin to the point s
coordinates	PhysicsSphericalRepresentation	to_cartesian		converts spherical polar coordinates to 3d rectangular cartesian coordinates
coordinates	PhysicsSphericalRepresentation	from_cartesian	cls cart	converts 3d rectangular cartesian coordinates to spherical polar coordinates
coordinates	CylindricalRepresentation	rho		the distance of the point s from the z-axis
coordinates	CylindricalRepresentation	phi		the azimuth of the point s
coordinates	CylindricalRepresentation	z		the height of the point s
coordinates	CylindricalRepresentation	from_cartesian	cls cart	converts 3d rectangular cartesian coordinates to cylindrical polar coordinates
coordinates	CylindricalRepresentation	to_cartesian		converts cylindrical polar coordinates to 3d rectangular cartesian coordinates
coordinates.builtin_frames	ITRS	earth_location		the data in this frame as an ~astropy coordinates earthlocation class
coordinates.builtin_frames	AltAz	secz		secant if the zenith angle for this coordinate a common estimate of the airmass
coordinates.builtin_frames	AltAz	zen		the zenith angle for this coordinate
coordinates.builtin_frames		make_skyoffset_cls	framecls	create a new class that is the sky offset frame for a specific class of origin frame
coordinates.builtin_frames	Galactocentric	get_roll0	cls	the additional roll angle about the final x axis necessary to align the final z axis to match the galactic yz-plane
coordinates.builtin_frames	FK4NoETerms	_precession_matrix	oldequinox newequinox	compute and return the precession matrix for fk4 using newcomb's method
coordinates.builtin_frames		fk4_e_terms	equinox	return the e-terms of aberation vector
coordinates.builtin_frames		_make_transform_graph_docs		generates a string for use with the coordinate package's docstring
coordinates.builtin_frames		_fk4_B_matrix	obstime	this is a correction term in the fk4 transformations because fk4 is a
coordinates.builtin_frames		_icrs_to_fk5_matrix		b-matrix from usno circular 179 used by the icrs->fk5 transformation
coordinates.builtin_frames		get_polar_motion	time	gets the two polar motion components in radians for use with apio13
coordinates.builtin_frames		_warn_iers	ierserr	generate a warning for an iersrangeerror parameters
coordinates.builtin_frames		get_dut1utc	time	this function is used to get ut1-utc in coordinates because normally it gives an error outside the iers range but in coordinates we want to allow
coordinates.builtin_frames		get_jd12	time scale	gets jd1 and jd2 from a time object in a particular scale
coordinates.builtin_frames		norm	p	normalise a p-vector
coordinates.builtin_frames		get_cip	jd1 jd2	find the x y coordinates of the cip and the cio locator s
coordinates.builtin_frames		aticq	ri di astrom	a slightly modified version of the erfa function eraaticq
coordinates.builtin_frames		atciqz	rc dc astrom	a slightly modified version of the erfa function eraatciqz
coordinates.builtin_frames		prepare_earth_position_vel	time	get barycentric position and velocity and heliocentric position of earth parameters
coordinates.builtin_frames	FK5	_precession_matrix	oldequinox newequinox	compute and return the precession matrix for fk5 based on capitaine et al
constants	Constant	copy		return a copy of this constant instance since they are by
constants	Constant	abbrev		a typical ascii text abbreviation of the constant also generally the same as the python variable used for this constant
constants	Constant	name		the full name of the constant
constants	Constant	_unit		the unit s in which this constant is defined
constants	Constant	uncertainty		the known uncertainty in this constant's value
constants	Constant	reference		the source used for the value of this constant
constants	Constant	system		the system of units in which this constant is defined (typically none so long as the constant's units can be directly converted
constants	Constant	si		if the constant is defined in the si system return that instance of the constant else convert to a quantity in the appropriate si units
constants	Constant	cgs		if the constant is defined in the cgs system return that instance of the constant else convert to a quantity in the appropriate cgs units
constants	EMConstant	cgs		overridden for emconstant to raise a typeerror emphasizing that there are multiple em extensions to cgs
config		_find_home		locates and return the home directory or best approximation on this system
config		get_config_dir	create	determines the astropy configuration directory name and creates the directory if it doesn't exist
config		get_cache_dir		determines the astropy cache directory name and creates the directory if it doesn't exist
config	_SetTempPath	__call__	func	implements use as a decorator
config	ConfigNamespace	set_temp	attr value	temporarily set a configuration value
config	ConfigNamespace	reload	attr	reload a configuration item from the configuration file
config	ConfigNamespace	reset	attr	reset a configuration item to its default
config	ConfigItem	set	value	sets the current value of this configitem
config	ConfigItem	set_temp	value	sets this item to a specified value only inside a with block
config	ConfigItem	reload		reloads the value of this configitem from the relevant configuration file
config	ConfigItem	__call__		returns the value of this configitem returns
config	ConfigItem	_validate_val	val	validates the provided value based on cfgtype and returns the
config		get_config_filename	packageormod	get the filename of the config file associated with the given package or module
config		get_config	packageormod reload	gets the configuration object or section associated with a particular package or module
config		reload_config	packageormod	reloads configuration settings from a configuration file for the root package of the requested package/module
config		is_unedited_config_file	content template_content	determines if a config file can be safely replaced because it doesn't actually contain any meaningful content
config		update_default_config	pkg default_cfg_dir_or_fn version	checks if the configuration file for the specified package exists and if not copy over the default configuration
stats		bayesian_info_criterion	log_likelihood n_params n_samples	computes the bayesian information criterion bic given the log of the likelihood function evaluated at the estimated or analytically derived
stats		bayesian_info_criterion_lsq	ssr n_params n_samples	computes the bayesian information criterion bic assuming that the observations come from a gaussian distribution
stats		akaike_info_criterion	log_likelihood n_params n_samples	computes the akaike information criterion aic
stats		akaike_info_criterion_lsq	ssr n_params n_samples	computes the akaike information criterion assuming that the observations are gaussian distributed
stats		bayesian_blocks	t x sigma fitness	compute optimal segmentation of data with scargle's bayesian blocks this is a flexible implementation of the bayesian blocks algorithm
stats	FitnessFunc	validate_input	t x sigma	validate inputs to the model
stats	FitnessFunc	p0_prior	N	empirical prior parametrized by the false alarm probability p0 see eq
stats	FitnessFunc	compute_ncp_prior	N	if ncp_prior is not explicitly defined compute it from gamma or p0
stats	FitnessFunc	fit	t x sigma	fit the bayesian blocks model given the specified fitness function
stats		histogram	a bins range weights	enhanced histogram function providing adaptive binnings this is a histogram function that enables the use of more sophisticated
stats		scott_bin_width	data return_bins	return the optimal histogram bin width using scott's rule scott's rule is a normal reference rule it minimizes the integrated
stats		freedman_bin_width	data return_bins	return the optimal histogram bin width using the freedman-diaconis rule the freedman-diaconis rule is a normal reference rule like scott's
stats		knuth_bin_width	data return_bins quiet	return the optimal histogram bin width using knuth's rule
stats	_KnuthF	bins	M	return the bin edges given a width dx
stats	_KnuthF	eval	M	evaluate the knuth function parameters
stats		circmean	data axis weights	computes the circular mean angle of an array of circular data
stats		circvar	data axis weights	computes the circular variance of an array of circular data
stats		circmoment	data p centered axis	computes the p-th trigonometric circular moment for an array of circular data
stats		circcorrcoef	alpha beta axis weights_alpha	computes the circular correlation coefficient between two array of circular data
stats		rayleightest	data axis weights	performs the rayleigh test of uniformity
stats		vtest	data mu axis weights	performs the rayleigh test of uniformity where the alternative hypothesis h1 is assumed to have a known mean angle mu
stats		vonmisesmle	data axis	computes the maximum likelihood estimator mle for the parameters of the von mises distribution
stats		sigma_clip	data sigma sigma_lower sigma_upper	perform sigma-clipping on the provided data
stats		sigma_clipped_stats	data mask mask_value sigma	calculate sigma-clipped statistics on the provided data
stats		binom_conf_interval	k n conf interval	binomial proportion confidence interval given k successes n trials
stats		binned_binom_proportion	x success bins range	binomial proportion and confidence interval in bins of a continuous variable x
stats		poisson_conf_interval	n interval sigma background	poisson parameter confidence interval given observed counts parameters
stats		median_absolute_deviation	a axis func	calculate the median absolute deviation mad
stats		mad_std	data axis func	calculate a robust standard deviation using the median absolute deviation mad
stats		biweight_location	a c M axis	compute the biweight location
stats		biweight_midvariance	a c M axis	compute the biweight midvariance
stats		biweight_midcovariance	a c M transpose	compute the biweight midcovariance
stats		signal_to_noise_oir_ccd	t source_eps sky_eps dark_eps	computes the signal to noise ratio for source being observed in the optical/ir using a ccd
stats		bootstrap	data bootnum samples bootfunc	performs bootstrap resampling on numpy arrays
stats		_scipy_kraft_burrows_nousek	N B CL	upper limit on a poisson count rate the implementation is based on kraft burrows and nousek
stats		_mpmath_kraft_burrows_nousek	N B CL	upper limit on a poisson count rate the implementation is based on kraft burrows and nousek in
stats		_kraft_burrows_nousek	N B CL	upper limit on a poisson count rate the implementation is based on kraft burrows and nousek in
stats		jackknife_resampling	data	performs jackknife resampling on numpy arrays
stats		jackknife_stats	data statistic conf_lvl	performs jackknife estimation on the basis of jackknife resamples
stats.lombscargle	LombScargle	autofrequency	samples_per_peak nyquist_factor minimum_frequency maximum_frequency	determine a suitable frequency grid for data
stats.lombscargle	LombScargle	autopower	method method_kwds normalization samples_per_peak	compute lomb-scargle power at automatically-determined frequencies parameters
stats.lombscargle	LombScargle	power	frequency normalization method assume_regular_frequency	compute the lomb-scargle power at the given frequencies parameters
stats.lombscargle	LombScargle	model	t frequency	compute the lomb-scargle model at the given frequency parameters
stats.lombscargle.implementations		lombscargle_slow	t y dy frequency	lomb-scargle periodogram this is a pure-python implementation of the original lomb-scargle formalism
stats.lombscargle.implementations		lombscargle_fastchi2	t y dy f0	lomb-scargle periodogram this implements a fast chi-squared periodogram using the algorithm
stats.lombscargle.implementations		_get_frequency_grid	frequency assume_regular_frequency	utility to get grid parameters from a frequency array parameters
stats.lombscargle.implementations		validate_method	method dy fit_mean nterms	validate the method argument and if method='auto'
stats.lombscargle.implementations		lombscargle	t y dy frequency	compute the lomb-scargle periodogram with a given method
stats.lombscargle.implementations		lombscargle_chi2	t y dy frequency	lomb-scargle periodogram this implements a chi-squared-based periodogram which is relatively slow
stats.lombscargle.implementations		lombscargle_fast	t y dy f0	fast lomb-scargle periodogram this implements the press & rybicki method [1]_ for fast o[n log n ]
stats.lombscargle.implementations		design_matrix	t frequency dy bias	compute the lomb-scargle design matrix at the given frequency this is the matrix x such that the periodic model at the given frequency
stats.lombscargle.implementations		periodic_fit	t y dy frequency	compute the lomb-scargle model fit at a given frequency
stats.lombscargle.implementations		lombscargle_scipy	t y frequency normalization	lomb-scargle periodogram this is a wrapper of scipy
stats.lombscargle.implementations		add_at	arr ind vals	utility that computes np add at()
stats.lombscargle.implementations		bitceil	N	find the bit i e power of 2 immediately greater than or equal to n
stats.lombscargle.implementations		extirpolate	x y N M	extirpolate the values x y onto an integer grid range n using lagrange polynomial weights on the m nearest points
stats.lombscargle.implementations		trig_sum	t h df N	compute approximate trigonometric sums for a number of frequencies this routine computes weighted sine and cosine sums
cosmology	FLRW	_namelead		helper function for constructing __repr__
cosmology	FLRW	H0		return the hubble constant as an ~astropy units quantity at z=0
cosmology	FLRW	Om0		omega matter matter density/critical density at z=0
cosmology	FLRW	Ode0		omega dark energy dark energy density/critical density at z=0
cosmology	FLRW	Ob0		omega baryon baryonic matter density/critical density at z=0
cosmology	FLRW	Odm0		omega dark matter dark matter density/critical density at z=0
cosmology	FLRW	Ok0		omega curvature the effective curvature density/critical density
cosmology	FLRW	Tcmb0		temperature of the cmb as ~astropy units quantity at z=0
cosmology	FLRW	Tnu0		temperature of the neutrino background as ~astropy units quantity at z=0
cosmology	FLRW	Neff		number of effective neutrino species
cosmology	FLRW	has_massive_nu		does this cosmology have at least one massive neutrino species?
cosmology	FLRW	m_nu		mass of neutrino species
cosmology	FLRW	h		dimensionless hubble constant h = h_0 / 100 [km/sec/mpc]
cosmology	FLRW	hubble_time		hubble time as ~astropy units quantity
cosmology	FLRW	hubble_distance		hubble distance as ~astropy units quantity
cosmology	FLRW	critical_density0		critical density as ~astropy units quantity at z=0
cosmology	FLRW	Ogamma0		omega gamma the density/critical density of photons at z=0
cosmology	FLRW	Onu0		omega nu the density/critical density of neutrinos at z=0
cosmology	FLRW	clone		returns a copy of this object potentially with some changes
cosmology	FLRW	w	z	the dark energy equation of state
cosmology	FLRW	Om	z	return the density parameter for non-relativistic matter at redshift z
cosmology	FLRW	Ob	z	return the density parameter for baryonic matter at redshift z
cosmology	FLRW	Odm	z	return the density parameter for dark matter at redshift z
cosmology	FLRW	Ok	z	return the equivalent density parameter for curvature at redshift z
cosmology	FLRW	Ode	z	return the density parameter for dark energy at redshift z
cosmology	FLRW	Ogamma	z	return the density parameter for photons at redshift z
cosmology	FLRW	Onu	z	return the density parameter for massless neutrinos at redshift z
cosmology	FLRW	Tcmb	z	return the cmb temperature at redshift z
cosmology	FLRW	Tnu	z	return the neutrino temperature at redshift z
cosmology	FLRW	nu_relative_density	z	neutrino density function relative to the energy density in photons
cosmology	FLRW	_w_integrand	ln1pz	internal convenience function for w z integral
cosmology	FLRW	de_density_scale	z	evaluates the redshift dependence of the dark energy density
cosmology	FLRW	efunc	z	function used to calculate h z the hubble parameter
cosmology	FLRW	inv_efunc	z	inverse of efunc
cosmology	FLRW	_lookback_time_integrand_scalar	z	integrand of the lookback time
cosmology	FLRW	_tfunc	z	integrand of the lookback time
cosmology	FLRW	lookback_time_integrand	z	integrand of the lookback time
cosmology	FLRW	_abs_distance_integrand_scalar	z	integrand of the absorption distance
cosmology	FLRW	_xfunc	z	integrand of the absorption distance
cosmology	FLRW	abs_distance_integrand	z	integrand of the absorption distance
cosmology	FLRW	H	z	hubble parameter (km/s/mpc) at redshift z
cosmology	FLRW	scale_factor	z	scale factor at redshift z
cosmology	FLRW	lookback_time	z	lookback time in gyr to redshift z
cosmology	FLRW	lookback_distance	z	the lookback distance is the light travel time distance to a given redshift
cosmology	FLRW	age	z	age of the universe in gyr at redshift z
cosmology	FLRW	critical_density	z	critical density in grams per cubic cm at redshift z
cosmology	FLRW	comoving_distance	z	comoving line-of-sight distance in mpc at a given redshift
cosmology	FLRW	_comoving_distance_z1z2	z1 z2	comoving line-of-sight distance in mpc between objects at redshifts z1 and z2
cosmology	FLRW	comoving_transverse_distance	z	comoving transverse distance in mpc at a given redshift
cosmology	FLRW	_comoving_transverse_distance_z1z2	z1 z2	comoving transverse distance in mpc between two redshifts
cosmology	FLRW	angular_diameter_distance	z	angular diameter distance in mpc at a given redshift
cosmology	FLRW	luminosity_distance	z	luminosity distance in mpc at redshift z
cosmology	FLRW	angular_diameter_distance_z1z2	z1 z2	angular diameter distance between objects at 2 redshifts
cosmology	FLRW	absorption_distance	z	absorption distance at redshift z
cosmology	FLRW	distmod	z	distance modulus at redshift z
cosmology	FLRW	comoving_volume	z	comoving volume in cubic mpc at redshift z
cosmology	FLRW	differential_comoving_volume	z	differential comoving volume at redshift z
cosmology	FLRW	kpc_comoving_per_arcmin	z	separation in transverse comoving kpc corresponding to an arcminute at redshift z
cosmology	FLRW	kpc_proper_per_arcmin	z	separation in transverse proper kpc corresponding to an arcminute at redshift z
cosmology	FLRW	arcsec_per_kpc_comoving	z	angular separation in arcsec corresponding to a comoving kpc at redshift z
cosmology	FLRW	arcsec_per_kpc_proper	z	angular separation in arcsec corresponding to a proper kpc at redshift z
cosmology	LambdaCDM	w	z	returns dark energy equation of state at redshift z
cosmology	LambdaCDM	de_density_scale	z	evaluates the redshift dependence of the dark energy density
cosmology	LambdaCDM	efunc	z	function used to calculate h z the hubble parameter
cosmology	LambdaCDM	inv_efunc	z	function used to calculate :math \frac{1}{h_z}
cosmology	FlatLambdaCDM	efunc	z	function used to calculate h z the hubble parameter
cosmology	FlatLambdaCDM	inv_efunc	z	function used to calculate :math \frac{1}{h_z}
cosmology	wCDM	w0		dark energy equation of state
cosmology	wCDM	w	z	returns dark energy equation of state at redshift z
cosmology	wCDM	de_density_scale	z	evaluates the redshift dependence of the dark energy density
cosmology	wCDM	efunc	z	function used to calculate h z the hubble parameter
cosmology	wCDM	inv_efunc	z	function used to calculate :math \frac{1}{h_z}
cosmology	FlatwCDM	efunc	z	function used to calculate h z the hubble parameter
cosmology	FlatwCDM	inv_efunc	z	function used to calculate :math \frac{1}{h_z}
cosmology	w0waCDM	w0		dark energy equation of state at z=0
cosmology	w0waCDM	wa		negative derivative of dark energy equation of state w r t a
cosmology	w0waCDM	w	z	returns dark energy equation of state at redshift z
cosmology	w0waCDM	de_density_scale	z	evaluates the redshift dependence of the dark energy density
cosmology	wpwaCDM	wp		dark energy equation of state at the pivot redshift zp
cosmology	wpwaCDM	wa		negative derivative of dark energy equation of state w r t a
cosmology	wpwaCDM	zp		the pivot redshift where w z = wp
cosmology	wpwaCDM	w	z	returns dark energy equation of state at redshift z
cosmology	wpwaCDM	de_density_scale	z	evaluates the redshift dependence of the dark energy density
cosmology	w0wzCDM	w0		dark energy equation of state at z=0
cosmology	w0wzCDM	wz		derivative of the dark energy equation of state w r t z
cosmology	w0wzCDM	w	z	returns dark energy equation of state at redshift z
cosmology	w0wzCDM	de_density_scale	z	evaluates the redshift dependence of the dark energy density
cosmology		_float_or_none	x digits	helper function to format a variable that can be a float or none
cosmology		vectorize_if_needed	func	helper function to vectorize functions on array inputs
cosmology	default_cosmology	get_cosmology_from_string	arg	return a cosmology instance from a string
cosmology		z_at_value	func fval zmin zmax	find the redshift z at which func z = fval
wcs		determine_64_bit_int		the only configuration parameter needed at compile-time is how to specify a 64-bit signed integer
wcs		write_wcsconfig_h	paths	writes out the wcsconfig h header with local configuration
wcs		get_include		get the path to astropy wcs's c header files
wcs		add_stokes_axis_to_wcs	wcs add_before_ind	add a new stokes axis that is uncorrelated with any other axes
wcs		wcs_to_celestial_frame	wcs	for a given wcs return the coordinate frame that matches the celestial component of the wcs
wcs		proj_plane_pixel_scales	wcs	for a wcs returns pixel scales along each axis of the image pixel at the crpix location once it is projected onto the
wcs		proj_plane_pixel_area	wcs	for a **celestial** wcs (see astropy wcs wcs celestial) returns pixel
wcs		is_proj_plane_distorted	wcs maxerr	for a wcs returns false if square image detector pixels stay square when projected onto the "plane of intermediate world coordinates"
wcs		non_celestial_pixel_scales	inwcs	calculate the pixel scale along each axis of a non-celestial wcs for example one with mixed spectral and spatial axes
wcs		_has_distortion	wcs	true if contains any sip or image distortion components
wcs		skycoord_to_pixel	coords wcs origin mode	convert a set of skycoord coordinates into pixels
wcs		pixel_to_skycoord	xp yp wcs origin	convert a set of pixel coordinates into a ~astropy coordinates skycoord
wcs	WCS	copy		return a shallow copy of the object
wcs	WCS	deepcopy		return a deep copy of the object
wcs	WCS	_fix_scamp		remove scamp's pvi_m distortion parameters if sip distortion parameters are also present
wcs	WCS	fix	translate_units naxis	perform the fix operations from wcslib and warn about any changes it has made
wcs	WCS	calc_footprint	header undistort axes center	calculates the footprint of the image on the sky
wcs	WCS	_read_det2im_kw	header fobj err	create a distortion paper_ type lookup table for detector to image plane correction
wcs	WCS	_write_det2im	hdulist	writes a distortion paper_ type lookup table to the given astropy
wcs	WCS	_read_distortion_kw	header fobj dist err	reads distortion paper_ table-lookup keywords and data and returns a 2-tuple of ~astropy
wcs	WCS	_write_distortion_kw	hdulist dist	write out distortion paper_ keywords to the given fits
wcs	WCS	_remove_sip_kw	header	remove sip information from a header
wcs	WCS	_read_sip_kw	header wcskey	reads sip_ header keywords and returns a ~astropy wcs sip
wcs	WCS	_write_sip_kw		write out sip keywords returns a dictionary of key-value
wcs	WCS	_array_converter	func sky	a helper function to support reading either a pair of arrays or a single nx2 array
wcs	WCS	to_fits	relax key	generate an astropy io fits hdulist object with all of the
wcs	WCS	to_header	relax key	generate an astropy io fits header object with the basic wcs
wcs	WCS	to_header_string	relax	identical to to_header, but returns a string containing the header cards
wcs	WCS	footprint_to_file	filename color width coordsys	writes out a ds9_ style regions file it can be loaded
wcs	WCS	__repr__		return a short description simply porting the behavior from
wcs	WCS	get_axis_types		similar to self wcsprm axis_types <astropy wcs wcsprm axis_types>
wcs	WCS	__reduce__		support pickling of wcs objects this is done by serializing
wcs	WCS	dropaxis	dropax	remove an axis from the wcs
wcs	WCS	swapaxes	ax0 ax1	swap axes in a wcs
wcs	WCS	reorient_celestial_first		reorient the wcs such that the celestial axes are first followed by the spectral axis followed by any others
wcs	WCS	slice	view numpy_order	slice a wcs instance using a numpy slice the order of the slice should
wcs	WCS	axis_type_names		world names for each coordinate axis
wcs	WCS	celestial		a copy of the current wcs with only the celestial axes included
wcs	WCS	_as_mpl_axes		compatibility hook for matplotlib and wcsaxes
wcs		__WCS_unpickle__	cls dct fits_data	unpickles a wcs object from a serialized fits string
wcs		find_all_wcs	header relax keysel fix	find all the wcs transformations in the given header
wcs		validate	source	prints a wcs validation report for the given fits file
utils		_get_stdout	stderr	this utility function contains the logic to determine what streams to use by default for standard out/err
utils		isatty	file	returns true if file is a tty
utils		terminal_size	file	returns a tuple height width containing the height and width of the terminal
utils		_color_text	text color	returns a string wrapped in ansi color codes for coloring the text in a terminal :
utils		_decode_preferred_encoding	s	decode the supplied byte string using the preferred encoding for the locale (locale
utils		_write_with_fallback	s write fileobj	write the supplied string with the given write function like write s , but use a writer for the locale's preferred encoding in case
utils		color_print		prints colors and styles to the terminal uses ansi escape sequences
utils		strip_ansi_codes	s	remove ansi color codes from the string
utils		human_time	seconds	returns a human-friendly time string that is always exactly 6 characters long
utils		human_file_size	size	returns a human-friendly string representing a file size that is 2-4 characters long
utils	ProgressBar	update	value	update progress bar via the console or notebook accordingly
utils	ProgressBar	_update_console	value	update the progress bar to the given value out of the total given to the constructor
utils	ProgressBar	_update_ipython_widget	value	update the progress bar to the given value out of a total given to the constructor
utils	ProgressBar	map	cls function items multiprocess	does a map operation while displaying a progress bar with percentage complete
utils	ProgressBarOrSpinner	update	value	update the progress bar to the given value (out of the total given to the constructor
utils		print_code_line	line col file tabwidth	prints a line of source code highlighting a particular character position in the line
utils		prereleaser_middle	data	prereleaser middle hook to replace the version string in setup py
utils		releaser_middle	data	releaser middle hook to monkey-patch zest releaser to support signed
utils		postreleaser_before	data	postreleaser before hook to set a different dev_version_template from the
utils		postreleaser_middle	data	postreleaser middle hook to update the setup py with the new version see
utils	ScienceState	get	cls	get the current science state value
utils	ScienceState	set	cls value	set the current science state value
utils	ScienceState	validate	cls value	validate the value and convert it to its native type if necessary
utils		_is_url	string	test whether a string is a valid url
utils		get_readable_fileobj	name_or_obj encoding cache show_progress	given a filename pathlib path object or a readable file-like object return a context
utils		get_file_contents		retrieves the contents of a filename or file-like object
utils		get_pkg_data_fileobj	data_name package encoding cache	retrieves a data file from the standard locations for the package and provides the file as a file-like object that reads bytes
utils		get_pkg_data_filename	data_name package show_progress remote_timeout	retrieves a data file from the standard locations for the package and provides a local filename for the data
utils		get_pkg_data_contents	data_name package encoding cache	retrieves a data file from the standard locations and returns its contents as a bytes object
utils		get_pkg_data_filenames	datadir package pattern	returns the path of all of the data files in a given directory that match a given glob pattern
utils		get_pkg_data_fileobjs	datadir package pattern encoding	returns readable file objects for all of the data files in a given directory that match a given glob pattern
utils		compute_hash	localfn	computes the md5 hash for a file
utils		_find_pkg_data_path	data_name package	look for data in the source-included data directories and return the path
utils		_find_hash_fn	hash	looks for a local file by hash - returns file name if found and a valid file otherwise returns none
utils		get_free_space_in_dir	path	given a path to a directory returns the amount of free space in bytes on that filesystem
utils		check_free_space_in_dir	path size	determines if a given directory has enough space to hold a file of a given size
utils		download_file	remote_url cache show_progress timeout	accepts a url downloads and optionally caches the result returning the filename with a name determined by the file's md5
utils		is_url_in_cache	url_key	check if a download from url_key is in the cache
utils		download_files_in_parallel	urls cache show_progress timeout	downloads multiple files in parallel from the given urls blocks until
utils		clear_download_cache	hashorurl	clears the data file cache by deleting the local file s
utils		_get_download_cache_locs		finds the path to the data cache directory and makes them if they don't exist
utils		_open_shelve	shelffn withclosing	opens a shelf file if withclosing is true it will be opened with closing
utils		_acquire_download_cache_lock		uses the lock directory method this is good because mkdir is
utils		timefunc	num_tries verbose	decorator to time a function or method
utils	RunTimePredictor	results		function outputs from time_func
utils	RunTimePredictor	_timed_pfunc	arg	run partial func once for single arg and time it
utils	RunTimePredictor	_cache_time	arg	cache timing results without repetition
utils	RunTimePredictor	time_func	arglist	time the partial function for a list of single args and store run time in a cache
utils	RunTimePredictor	do_fit	model fitter power min_datapoints	fit a function to the lists of arguments and their respective run time in the cache
utils	RunTimePredictor	predict_time	arg	predict run time for given argument
utils		resolve_name	name	resolve a name like module object to an object and return it
utils		minversion	module version inclusive version_path	returns true if the specified python module satisfies a minimum version requirement and false if not
utils		find_current_module	depth finddiff	determines the module/package from which this function is called
utils		find_mod_objs	modname onlylocals	returns all the public attributes of a module referenced by name
utils		isinstancemethod	cls obj	returns true if the given object is an instance method of the class it is defined on (as opposed to a staticmethod or a classmethod)
utils		deprecated	since message name alternative	used to mark a function or class as deprecated
utils		deprecated_attribute	name since message alternative	used to mark a public attribute as deprecated this creates a
utils		deprecated_renamed_argument	old_name new_name since arg_in_kwargs	deprecate a _renamed_ function argument
utils		wraps	wrapped assigned updated exclude_args	an alternative to functools wraps which also preserves the original
utils		format_doc	docstring	replaces the docstring of the decorated object and then formats it
utils		isiterable	obj	returns true if the given object is iterable
utils		indent	s shift width	indent a block of text the indentation is applied to each line
utils		silence		a context manager that silences sys stdout and sys stderr
utils		format_exception	msg	given an exception message string uses new-style formatting arguments {filename}, {lineno}, {func} and/or {text} to fill in
utils		find_api_page	obj version openinbrowser timeout	determines the url of the api page for the specified object and optionally open that page in a web browser
utils		signal_number_to_name	signum	given an os signal number returns a signal name if the signal
utils		is_path_hidden	filepath	determines if a given file or directory is hidden
utils		walk_skip_hidden	top onerror followlinks	a wrapper for os walk that skips hidden files and directories
utils		strip_accents	s	remove accents from a unicode string
utils		did_you_mean	s candidates n cutoff	when a string isn't found in a set of candidates we can be nice to provide a list of alternatives in the exception
utils	OrderedDescriptor	__lt__	other	defined for convenient sorting of ordereddescriptor instances which are defined to sort in their creation order
utils		set_locale	name	context manager to temporarily set the locale to name
utils	ShapedLikeNDArray	shape		the shape of the instance and underlying arrays
utils	ShapedLikeNDArray	_apply	method	create a new instance with method applied to underlying data
utils	ShapedLikeNDArray	ndim		the number of dimensions of the instance and underlying arrays
utils	ShapedLikeNDArray	size		the size of the object as calculated from its shape
utils	ShapedLikeNDArray	__bool__		any instance should evaluate to true except when it is empty
utils	ShapedLikeNDArray	__nonzero__		any instance should evaluate to true except when it is empty
utils	ShapedLikeNDArray	copy		return an instance containing copies of the internal data
utils	ShapedLikeNDArray	reshape		returns an instance containing the same data with a new shape
utils	ShapedLikeNDArray	ravel		return an instance with the array collapsed into one dimension
utils	ShapedLikeNDArray	flatten		return a copy with the array collapsed into one dimension
utils	ShapedLikeNDArray	transpose		return an instance with the data transposed
utils	ShapedLikeNDArray	T		return an instance with the data transposed
utils	ShapedLikeNDArray	swapaxes		return an instance with the given axes interchanged
utils	ShapedLikeNDArray	diagonal		return an instance with the specified diagonals
utils	ShapedLikeNDArray	squeeze		return an instance with single-dimensional shape entries removed parameters are as for :meth ~numpy
utils	ShapedLikeNDArray	take	indices axis mode	return a new instance formed from the elements at the given indices
utils		check_broadcast		determines whether two or more numpy arrays can be broadcast with each other based on their shape tuple alone
utils		common_dtype	arrs	use numpy to find the common dtype for a list of ndarrays
utils		enable_merge_strategies		context manager to temporarily enable one or more custom metadata merge strategies
utils		merge	left right merge_func metadata_conflicts	merge the left and right metadata objects
utils		make_function_with_signature	func args kwargs varargs	make a new function from an existing function but with the desired signature
utils		dtype_info_name	dtype	return a human-oriented string name of the dtype arg
utils		data_info_factory	names funcs	factory to create a function that can be used as an option for outputting data object summary information
utils		_get_obj_attrs_map	obj attrs	get the values for object attrs and return as a dict this
utils		_get_data_attribute	dat attr	get a data object attribute for the attributes info summary method
utils	DataInfo	_represent_as_dict		get the values for the parent attrs and return as a dict
utils	DataInfo	__call__	option out	write summary information about data object to the out filehandle
utils	BaseColumnInfo	iter_str_vals		this is a mixin-safe version of column iter_str_vals
utils	BaseColumnInfo	adjust_indices	index value col_len	adjust info indices after column modification
utils	BaseColumnInfo	slice_indices	col_slice item col_len	given a sliced object modify its indices to correctly represent the slice
utils		directory	arg	an argument type (for use with the type= argument to argparse
utils		readable_directory	arg	an argument type (for use with the type= argument to argparse
utils		writeable_directory	arg	an argument type (for use with the type= argument to argparse
utils.xml		check_id	ID	returns true if *id* is a valid xml id
utils.xml		fix_id	ID	given an arbitrary string create one that can be used as an xml id
utils.xml		check_token	token	returns true if *token* is a valid xml token as defined by xml schema part 2
utils.xml		check_mime_content_type	content_type	returns true if *content_type* is a valid mime content type syntactically at least as defined by rfc 2045
utils.xml		check_anyuri	uri	returns true if *uri* is a valid uri as defined in rfc 2396
utils.xml		validate_schema	filename schema_file	validates an xml file against a schema or dtd
utils.xml		_convert_to_fd_or_read_function	fd	returns a function suitable for streaming input or a file object
utils.xml		get_xml_iterator	source _debug_python_based_parser	returns an iterator over the elements of an xml file
utils.xml		get_xml_encoding	source	determine the encoding of an xml file by reading its header
utils.xml		xml_readlines	source	get the lines from a given xml file correctly determines the
utils.xml	XMLWriter	_flush	indent wrap	flush internal buffers
utils.xml	XMLWriter	start	tag attrib	opens a new element attributes can be given as keyword
utils.xml	XMLWriter	xml_cleaning_method	method	context manager to control how xml data tags are cleaned escaped to remove potentially unsafe characters or constructs
utils.xml	XMLWriter	tag	tag attrib	a convenience method for creating wrapper elements using the with statement
utils.xml	XMLWriter	comment	comment	adds a comment to the output stream
utils.xml	XMLWriter	data	text	adds character data to the output stream
utils.xml	XMLWriter	end	tag indent wrap	closes the current element (opened by the most recent call to start)
utils.xml	XMLWriter	close	id	closes open elements up to and including the element identified by the given identifier
utils.xml	XMLWriter	element	tag text wrap attrib	adds an entire element this is the same as calling start,
utils.xml	XMLWriter	get_indentation		returns the number of indentation levels the file is currently in
utils.xml	XMLWriter	get_indentation_spaces	offset	returns a string of spaces that matches the current indentation level
utils.xml	XMLWriter	object_attrs	obj attrs	converts an object with a bunch of attributes on an object into a dictionary for use by the xmlwriter
utils.xml		unescape_all	url	recursively unescape a given url
utils.compat		_monkeypatch_unicode_mask_fill_values		numpy < 1 8 0 on python 2 does not support unicode fill values since
utils.compat		possible_filename	filename	determine if the filename argument is an allowable type for a filename
utils.compat		override__dir__	f	when overriding a __dir__ method on an object you often want to include the "standard" members on the object as well
utils.compat		signature	obj	get a signature object for the passed callable
utils.compat	Parameter	replace	name kind annotation default	creates a customized copy of the parameter
utils.compat	Signature	__init__	parameters return_annotation __validate_parameters__	constructs signature from the given list of parameter objects and 'return_annotation'
utils.compat	Signature	from_function	cls func	constructs signature for the given python function
utils.compat	Signature	replace	parameters return_annotation	creates a customized copy of the signature
utils.compat	Signature	_bind	args kwargs partial	private method don't use directly
utils.compat	Signature	bind		get a boundarguments object that maps the passed args and kwargs to the function's signature
utils.compat	Signature	bind_partial		get a boundarguments object that partially maps the passed args and kwargs to the function's signature
utils.compat.futures		as_completed	fs timeout	an iterator over the given futures that yields each as it completes
utils.compat.futures		wait	fs timeout return_when	wait for the futures in the given sequence to complete
utils.compat.futures	Future	__init__		initializes the future should not be called by clients
utils.compat.futures	Future	cancel		cancel the future if possible
utils.compat.futures	Future	cancelled		return true if the future has cancelled
utils.compat.futures	Future	running		return true if the future is currently executing
utils.compat.futures	Future	done		return true of the future was cancelled or finished executing
utils.compat.futures	Future	add_done_callback	fn	attaches a callable that will be called when the future finishes
utils.compat.futures	Future	result	timeout	return the result of the call that the future represents
utils.compat.futures	Future	exception	timeout	return the exception raised by the call that the future represents
utils.compat.futures	Future	set_running_or_notify_cancel		mark the future as running or process any cancel notifications
utils.compat.futures	Future	set_result	result	sets the return value of work associated with the future
utils.compat.futures	Future	set_exception	exception	sets the result of the future as being the given exception
utils.compat.futures	Executor	submit	fn	submits a callable to be executed with the given arguments
utils.compat.futures	Executor	map	fn	returns a iterator equivalent to map fn iter
utils.compat.futures	Executor	shutdown	wait	clean-up the resources associated with the executor
utils.compat.futures		_remove_dead_thread_references		remove inactive threads from _thread_references
utils.compat.futures	ThreadPoolExecutor	__init__	max_workers	initializes a new threadpoolexecutor instance
utils.compat.futures		_remove_dead_thread_references		remove inactive threads from _thread_references
utils.compat.futures		_process_worker	call_queue result_queue shutdown	evaluates calls from call_queue and places the results in result_queue
utils.compat.futures		_add_call_item_to_queue	pending_work_items work_ids call_queue	fills call_queue with _workitems from pending_work_items
utils.compat.futures		_queue_manangement_worker	executor_reference processes pending_work_items work_ids_queue	manages the communication between this process and the worker processes
utils.compat.futures	ProcessPoolExecutor	__init__	max_workers	initializes a new processpoolexecutor instance
utils.iers		download_file		overload astropy utils data download_file within iers module to use a
utils.iers	IERS	open	cls file cache	open an iers table reading it from a file if not loaded before
utils.iers	IERS	close	cls	remove the iers table from the class
utils.iers	IERS	mjd_utc	jd1 jd2	turn a time to mjd returning integer and fractional parts
utils.iers	IERS	ut1_utc	jd1 jd2 return_status	interpolate ut1-utc corrections in iers table for given dates
utils.iers	IERS	pm_xy	jd1 jd2 return_status	interpolate polar motions from iers table for given dates
utils.iers	IERS	_check_interpolate_indices	indices_orig indices_clipped max_input_mjd	check that the indices from interpolation match those after clipping to the valid table range
utils.iers	IERS	_refresh_table_as_needed	mjd	potentially update the iers table in place depending on the requested time values in mdj and the time span of the table
utils.iers	IERS	ut1_utc_source	i	source for ut1-utc to be overridden by subclass
utils.iers	IERS	pm_source	i	source for polar motion to be overridden by subclass
utils.iers	IERS	time_now		property to provide the current time but also allow for explicitly setting the _time_now attribute for testing purposes
utils.iers	IERS_A	_combine_a_b_columns	cls iers_a	return a new table with appropriate combination of iers_a and b columns
utils.iers	IERS_A	read	cls file readme	read iers-a table from a finals2000a * file provided by usno
utils.iers	IERS_A	ut1_utc_source	i	set ut1-utc source flag for entries in iers table
utils.iers	IERS_A	pm_source	i	set polar motion source flag for entries in iers table
utils.iers	IERS_B	read	cls file readme data_start	read iers-b table from a eopc04_iau2000 * file provided by iers
utils.iers	IERS_B	ut1_utc_source	i	set ut1-utc source flag for entries in iers table
utils.iers	IERS_B	pm_source	i	set pm source flag for entries in iers table
utils.iers	IERS_Auto	open	cls	if the configuration setting astropy utils iers conf auto_download
utils.iers	IERS_Auto	_check_interpolate_indices	indices_orig indices_clipped max_input_mjd	check that the indices from interpolation match those after clipping to the valid table range
utils.iers	IERS_Auto	_refresh_table_as_needed	mjd	potentially update the iers table in place depending on the requested time values in mjd and the time span of the table
utils.iers	IERS_Auto	_substitute_iers_b	cls table	substitute iers b values with those from a real iers b table
time	Time	_init_from_vals	val val2 format scale	set the internal _format scale and _time attrs from user inputs
time	Time	_get_time_fmt	val val2 format scale	given the supplied val val2 format and scale try to instantiate the corresponding timeformat class to convert the input values into
time	Time	now	cls	creates a new object corresponding to the instant in time this method is called
time	Time	format		get or set time format
time	Time	format	format	set time format
time	Time	_set_scale	scale	this is the key routine that actually does time scale conversions
time	Time	precision		decimal precision when outputting seconds as floating point int value between 0 and 9 inclusive
time	Time	in_subfmt		unix wildcard pattern to select subformats for parsing string input times
time	Time	out_subfmt		unix wildcard pattern to select subformats for outputting times
time	Time	shape		the shape of the time instances
time	Time	jd1		first of the two doubles that internally store time value s in jd
time	Time	jd2		second of the two doubles that internally store time value s in jd
time	Time	value		time value s in current format
time	Time	light_travel_time	skycoord kind location ephemeris	light travel time correction to the barycentre or heliocentre
time	Time	sidereal_time	kind longitude model	calculate sidereal time
time	Time	_erfa_sidereal_time	model	calculate a sidereal time using a iau precession/nutation model
time	Time	copy	format	return a fully independent copy the time object optionally changing the format
time	Time	replicate	format copy	return a replica of the time object optionally changing the format
time	Time	_apply	method	create a new time object possibly applying a method to the arrays
time	Time	__copy__		overrides the default behavior of the copy copy function in
time	Time	__deepcopy__	memo	overrides the default behavior of the copy deepcopy function
time	Time	_advanced_index	indices axis keepdims	turn argmin argmax output into an advanced index
time	Time	argmin	axis out	return indices of the minimum values along the given axis
time	Time	argmax	axis out	return indices of the maximum values along the given axis
time	Time	argsort	axis	returns the indices that would sort the time array
time	Time	min	axis out keepdims	minimum along a given axis
time	Time	max	axis out keepdims	maximum along a given axis
time	Time	ptp	axis out keepdims	peak to peak maximum - minimum along a given axis
time	Time	sort	axis	return a copy sorted along the specified axis
time	Time	cache		return the cache associated with this instance
time	Time	__getattr__	attr	get dynamic attributes to output format or do timescale conversion
time	Time	_match_shape	val	ensure that val is matched to length of self if val has length 1
time	Time	get_delta_ut1_utc	iers_table return_status	find ut1 - utc differences by interpolating in iers table
time	Time	_get_delta_ut1_utc	jd1 jd2	get erfa dut arg = ut1 - utc this getter takes optional jd1 and
time	Time	_time_difference	other op	if other is of same class as self return difference in self scale
time	Time	__eq__	other	if other is an incompatible object for comparison return false
time	Time	__ne__	other	if other is an incompatible object for comparison return true
time	TimeDelta	_set_scale	scale	this is the key routine that actually does time scale conversions
time	TimeDelta	__neg__		negation of a timedelta object
time	TimeDelta	__abs__		absolute value of a timedelta object
time	TimeDelta	__mul__	other	multiplication of timedelta objects by numbers/arrays
time	TimeDelta	__rmul__	other	multiplication of numbers/arrays with timedelta objects
time	TimeDelta	__div__	other	division of timedelta objects by numbers/arrays
time	TimeDelta	__rdiv__	other	division by timedelta objects of numbers/arrays
time	TimeDelta	__truediv__	other	division of timedelta objects by numbers/arrays
time	TimeDelta	__rtruediv__	other	division by timedelta objects of numbers/arrays
time		_make_array	val copy	take val and convert/reshape to an array if copy is true
time		_regexify_subfmts	subfmts	iterate through each of the sub-formats and try substituting simple regular expressions for the strptime codes for year month day-of-month
time	TimeFormat	_check_val_type	val1 val2	input value validation typically overridden by derived classes
time	TimeFormat	_check_scale	scale	return a validated scale value
time	TimeFormat	set_jds	val1 val2	set internal jd1 and jd2 from val1 and val2 must be provided
time	TimeFormat	to_value	parent	return time representation from internal jd1 and jd2 this is
time	TimeFromEpoch	set_jds	val1 val2	initialize the internal jd1 and jd2 attributes given val1 and val2
time	TimeAstropyTime	__new__	cls val1 val2 scale	use __new__ instead of __init__ to output a class instance that is the same as the class of the first time object in the list
time	TimeDatetime	set_jds	val1 val2	convert datetime object contained in val1 to jd1 jd2
time	TimeDatetime	to_value	timezone parent	convert to potentially timezone-aware ~datetime datetime object
time	TimeString	parse_string	timestr subfmts	read time from a single string using a set of possible formats
time	TimeString	set_jds	val1 val2	parse the time strings contained in val1 and set jd1 jd2
time	TimeString	str_kwargs		generator that yields a dict of values corresponding to the calendar date and time for the internal jd values
time	TimeString	format_string	str_fmt	write time to a string using a given format
time	TimeString	_select_subfmts	pattern	return a list of subformats where name matches pattern using fnmatch
time	TimeFITS	parse_string	timestr subfmts	read time and set scale according to trailing scale codes
time	TimeFITS	format_string	str_fmt	format time-string append the scale to the normal isot format
time	TimeFITS	value		convert times to strings using signed 5 digit if necessary
time	TimeBesselianEpoch	_check_val_type	val1 val2	input value validation typically overridden by derived classes
time	TimeDeltaFormat	_check_scale	scale	check that the scale is in the allowed list of scales or is none
time		day_frac	val1 val2 factor divisor	return the sum of val1 and val2 as two float64s an integer part and the fractional remainder
time		two_sum	a b	add a and b exactly returning the result as two float64s
time		two_product	a b	multiple a and b exactly returning the result as two float64s
time		split	a	split float64 in two aligned parts
vo.samp	SAMPSimpleXMLRPCRequestHandler	do_POST		handles the http post request
vo.samp	HTTPSConnection	connect		connect to a host on a given ssl port
vo.samp	SecureXMLRPCServer	__init__	addr key_file cert_file cert_reqs	secure xml-rpc server
vo.samp	SAMPHubServer	id		the unique hub id
vo.samp	SAMPHubServer	start	wait	start the current samp hub instance and create the lock file hub
vo.samp	SAMPHubServer	params		the hub parameters which are written to the logfile
vo.samp	SAMPHubServer	stop		stop the current samp hub instance and delete the lock file
vo.samp	SAMPHubServer	is_running		return an information concerning the hub running status
vo.samp	SAMPHubServer	get_mtype_subtypes	mtype	return a list containing all the possible wildcarded subtypes of mtype
vo.samp	SAMPHubServer	_reply	private_key msg_id response	the main method that gets called for replying this starts up an
vo.samp	SAMPHubServer	_retry_method	recipient_private_key recipient_public_id samp_method_name arg_params	this method is used to retry a samp call several times
vo.samp		hub_script	timeout	this main function is executed by the samp_hub command line tool
vo.samp	SAMPClient	start		start the client in a separate thread non-blocking
vo.samp	SAMPClient	stop	timeout	stop the client
vo.samp	SAMPClient	is_running		whether the client is currently running
vo.samp	SAMPClient	is_registered		whether the client is currently registered
vo.samp	SAMPClient	receive_notification	private_key sender_id message	standard callable client receive_notification method
vo.samp	SAMPClient	receive_call	private_key sender_id msg_id message	standard callable client receive_call method
vo.samp	SAMPClient	receive_response	private_key responder_id msg_tag response	standard callable client receive_response method
vo.samp	SAMPClient	bind_receive_message	mtype function declare metadata	bind a specific mtype to a function or class method being intended for a call or a notification
vo.samp	SAMPClient	bind_receive_notification	mtype function declare metadata	bind a specific mtype notification to a function or class method
vo.samp	SAMPClient	bind_receive_call	mtype function declare metadata	bind a specific mtype call to a function or class method
vo.samp	SAMPClient	bind_receive_response	msg_tag function	bind a specific msg-tag response to a function or class method
vo.samp	SAMPClient	unbind_receive_notification	mtype declare	remove from the notifications binding table the specified mtype and unsubscribe the client from it if required
vo.samp	SAMPClient	unbind_receive_call	mtype declare	remove from the calls binding table the specified mtype and unsubscribe the client from it if required
vo.samp	SAMPClient	unbind_receive_response	msg_tag	remove from the responses binding table the specified message-tag
vo.samp	SAMPClient	declare_subscriptions	subscriptions	declares the mtypes the client wishes to subscribe to implicitly defined with the mtype binding methods
vo.samp	SAMPClient	register		register the client to the samp hub
vo.samp	SAMPClient	unregister		unregister the client from the samp hub
vo.samp	SAMPClient	declare_metadata	metadata	declare the client application metadata supported
vo.samp	SAMPClient	get_private_key		return the client private key used for the standard profile communications obtained at registration time (samp
vo.samp	SAMPClient	get_public_id		return public client id obtained at registration time (samp
vo.samp	SAMPHubProxy	is_connected		whether the hub proxy is currently connected to a hub
vo.samp	SAMPHubProxy	connect	hub hub_params key_file cert_file	connect to the current samp hub
vo.samp	SAMPHubProxy	disconnect		disconnect from the current samp hub
vo.samp	SAMPHubProxy	_samp_hub		property to abstract away the path to the hub which allows this class to be used for other profiles
vo.samp	SAMPHubProxy	ping		proxy to ping samp hub method standard profile only
vo.samp	SAMPHubProxy	set_xmlrpc_callback	private_key xmlrpc_addr	proxy to setxmlrpccallback samp hub method standard profile only
vo.samp	SAMPHubProxy	register	secret	proxy to register samp hub method
vo.samp	SAMPHubProxy	unregister	private_key	proxy to unregister samp hub method
vo.samp	SAMPHubProxy	declare_metadata	private_key metadata	proxy to declaremetadata samp hub method
vo.samp	SAMPHubProxy	get_metadata	private_key client_id	proxy to getmetadata samp hub method
vo.samp	SAMPHubProxy	declare_subscriptions	private_key subscriptions	proxy to declaresubscriptions samp hub method
vo.samp	SAMPHubProxy	get_subscriptions	private_key client_id	proxy to getsubscriptions samp hub method
vo.samp	SAMPHubProxy	get_registered_clients	private_key	proxy to getregisteredclients samp hub method
vo.samp	SAMPHubProxy	get_subscribed_clients	private_key mtype	proxy to getsubscribedclients samp hub method
vo.samp	SAMPHubProxy	notify	private_key recipient_id message	proxy to notify samp hub method
vo.samp	SAMPHubProxy	notify_all	private_key message	proxy to notifyall samp hub method
vo.samp	SAMPHubProxy	call	private_key recipient_id msg_tag message	proxy to call samp hub method
vo.samp	SAMPHubProxy	call_all	private_key msg_tag message	proxy to callall samp hub method
vo.samp	SAMPHubProxy	call_and_wait	private_key recipient_id message timeout	proxy to callandwait samp hub method
vo.samp	SAMPHubProxy	reply	private_key msg_id response	proxy to reply samp hub method
vo.samp		getattr_recursive	variable attribute	get attributes recursively
vo.samp		get_num_args	f	find the number of arguments a function or method takes (excluding self)
vo.samp		read_lockfile	lockfilename	read in the lockfile given by lockfilename into a dictionary
vo.samp		get_main_running_hub		get either the hub given by the environment variable samp_hub or the one given by the lockfile
vo.samp		get_running_hubs		return a dictionary containing the lock-file contents of all the currently running hubs (single and/or multiple mode)
vo.samp		check_running_hub	lockfilename	test whether a hub identified by lockfilename is running or not
vo.samp	SAMPIntegratedClient	is_connected		testing method to verify the client connection with a running hub
vo.samp	SAMPIntegratedClient	connect	hub hub_params key_file cert_file	connect with the current or specified samp hub start and register the client
vo.samp	SAMPIntegratedClient	disconnect		unregister the client from the current samp hub stop the client and disconnect from the hub
vo.samp	SAMPIntegratedClient	ping		proxy to ping samp hub method standard profile only
vo.samp	SAMPIntegratedClient	declare_metadata	metadata	proxy to declaremetadata samp hub method
vo.samp	SAMPIntegratedClient	get_metadata	client_id	proxy to getmetadata samp hub method
vo.samp	SAMPIntegratedClient	get_subscriptions	client_id	proxy to getsubscriptions samp hub method
vo.samp	SAMPIntegratedClient	get_registered_clients		proxy to getregisteredclients samp hub method
vo.samp	SAMPIntegratedClient	get_subscribed_clients	mtype	proxy to getsubscribedclients samp hub method
vo.samp	SAMPIntegratedClient	notify	recipient_id message	proxy to notify samp hub method
vo.samp	SAMPIntegratedClient	enotify	recipient_id mtype	easy to use version of :meth ~astropy vo samp integrated_client sampintegratedclient notify
vo.samp	SAMPIntegratedClient	notify_all	message	proxy to notifyall samp hub method
vo.samp	SAMPIntegratedClient	enotify_all	mtype	easy to use version of :meth ~astropy vo samp integrated_client sampintegratedclient notify_all
vo.samp	SAMPIntegratedClient	call	recipient_id msg_tag message	proxy to call samp hub method
vo.samp	SAMPIntegratedClient	ecall	recipient_id msg_tag mtype	easy to use version of :meth ~astropy vo samp integrated_client sampintegratedclient call
vo.samp	SAMPIntegratedClient	call_all	msg_tag message	proxy to callall samp hub method
vo.samp	SAMPIntegratedClient	ecall_all	msg_tag mtype	easy to use version of :meth ~astropy vo samp integrated_client sampintegratedclient call_all
vo.samp	SAMPIntegratedClient	call_and_wait	recipient_id message timeout	proxy to callandwait samp hub method
vo.samp	SAMPIntegratedClient	ecall_and_wait	recipient_id mtype timeout	easy to use version of :meth ~astropy vo samp integrated_client sampintegratedclient call_and_wait
vo.samp	SAMPIntegratedClient	reply	msg_id response	proxy to reply samp hub method
vo.samp	SAMPIntegratedClient	ereply	msg_id status result error	easy to use version of :meth ~astropy vo samp integrated_client sampintegratedclient reply
vo.validator	ConeSearchResults	list_cats	typ fout ignore_noncrit	list catalogs in given database
vo.validator	ConeSearchResults	print_cat	key fout	display a single catalog of given key
vo.validator		_exclude_noncrit	in_list	exclude any items in input list containing astropy
vo.validator		check_conesearch_sites	destdir verbose parallel url_list	validate cone search services
vo.validator		_do_validation	args	validation for multiprocessing support
vo.validator		_categorize_result	r	set success codes
vo.validator		_html_subindex	args	html writer for multiprocessing support
vo.validator		_copy_r_to_cat	r cat	copy validation result attributes to given vo catalog
vo.validator		parse_cs	id	return <testquery> pars as dict for given resource id
vo.client	AsyncBase	__getattr__	what	expose executor and future methods
vo.client	AsyncBase	get	timeout	get result if available then shut down thread
vo.client	VOSBase	__getattr__	what	expose dictionary attributes
vo.client	VOSBase	__getitem__	what	expose dictionary key look-up
vo.client	VOSBase	__setitem__	what value	expose dictionary key assignment
vo.client	VOSBase	__iter__		expose dictionary iteration
vo.client	VOSBase	dumps		dump the contents into a string
vo.client	VOSCatalog	__str__		show the most important and unique things about a catalog
vo.client	VOSCatalog	delete_attribute	key	delete given metadata key and its value from the catalog
vo.client	VOSCatalog	create	cls title url	create a new vo service catalog with user parameters
vo.client	VOSDatabase	__str__		show the most important and unique things about a database
vo.client	VOSDatabase	__len__		return the number of catalogs in database
vo.client	VOSDatabase	version		database version number
vo.client	VOSDatabase	get_catalogs		iterator to get all catalogs
vo.client	VOSDatabase	get_catalogs_by_url	url	like :func get_catalogs but using access url look-up
vo.client	VOSDatabase	get_catalog	name	get one catalog of given name
vo.client	VOSDatabase	get_catalog_by_url	url	like :func get_catalog but using access url look-up
vo.client	VOSDatabase	_match_pattern	all_keys pattern sort	used by :func list_catalogs and :func list_catalogs_by_url
vo.client	VOSDatabase	list_catalogs	pattern sort	list catalog names
vo.client	VOSDatabase	list_catalogs_by_url	pattern sort	like :func list_catalogs but using access url
vo.client	VOSDatabase	add_catalog	name cat allow_duplicate_url	add a catalog to database
vo.client	VOSDatabase	add_catalog_by_url	name url	like :func add_catalog but the catalog is created with only the given name and access url
vo.client	VOSDatabase	delete_catalog	name	delete a catalog from database with given name
vo.client	VOSDatabase	delete_catalog_by_url	url	like :func delete_catalog but using access url
vo.client	VOSDatabase	merge	other	merge two database together
vo.client	VOSDatabase	to_json	filename overwrite	write database content to a json file
vo.client	VOSDatabase	create_empty	cls	create an empty database of vo services
vo.client	VOSDatabase	from_json	cls filename	create a database of vo services from a json file
vo.client	VOSDatabase	from_registry	cls registry_url timeout	create a database of vo services from vo registry url
vo.client		get_remote_catalog_db	dbname cache verbose	get a database of vo services which is a json file from a remote location
vo.client		_get_catalogs	service_type catalog_db	expand catalog_db to a list of catalogs
vo.client		_vo_service_request	url pedantic kwargs cache	this is called by :func call_vo_service
vo.client		vo_tab_parse	tab url kwargs	in case of errors from the server a complete and correct 'stub' votable file may still be returned
vo.client		call_vo_service	service_type catalog_db pedantic verbose	makes a generic vo service call
vo.client		list_catalogs	service_type cache verbose	list the catalogs available for the given service type
vo.client		conesearch	center radius verb	perform cone search and returns the result of the first successful query
vo.client		search_all		perform cone search and returns the results of all successful queries
vo.client		list_catalogs		return the available cone search catalogs as a list of strings
vo.client		predict_search	url	predict the run time needed and the number of objects for a cone search for the given access url position and
vo.client		conesearch_timer		time a single cone search using astropy utils timer timefunc
vo.client		_local_conversion	func x	try func x and replace valueerror with conesearcherror
vo.client		_validate_sr	radius	validate search radius
visualization		scale_image	image scale power asinh_a	perform scaling/stretching of an image between minimum and maximum cut levels
visualization		hist	x bins ax	enhanced histogram function this is a histogram function that enables the use of more sophisticated
visualization		simple_norm	data stretch power asinh_a	return a normalization class that can be used for displaying images with matplotlib
visualization		_logn	n x out	calculate the log base n of x
visualization		_prepare	values clip out	prepare the data by optionally clipping and copying and return the array that should be subsequently used for in-place calculations
visualization	BaseStretch	__call__	values clip out	transform values using this stretch
visualization	BaseStretch	inverse		a stretch object that performs the inverse operation
visualization	LinearStretch	inverse		a stretch object that performs the inverse operation
visualization	SqrtStretch	inverse		a stretch object that performs the inverse operation
visualization	PowerStretch	inverse		a stretch object that performs the inverse operation
visualization	PowerDistStretch	inverse		a stretch object that performs the inverse operation
visualization	InvertedPowerDistStretch	inverse		a stretch object that performs the inverse operation
visualization	SquaredStretch	inverse		a stretch object that performs the inverse operation
visualization	LogStretch	inverse		a stretch object that performs the inverse operation
visualization	InvertedLogStretch	inverse		a stretch object that performs the inverse operation
visualization	AsinhStretch	inverse		a stretch object that performs the inverse operation
visualization	SinhStretch	inverse		a stretch object that performs the inverse operation
visualization	HistEqStretch	inverse		a stretch object that performs the inverse operation
visualization	InvertedHistEqStretch	inverse		a stretch object that performs the inverse operation
visualization	ContrastBiasStretch	inverse		a stretch object that performs the inverse operation
visualization	InvertedContrastBiasStretch	inverse		a stretch object that performs the inverse operation
visualization	BaseInterval	get_limits	values	return the minimum and maximum value in the interval based on the values provided
visualization	BaseInterval	__call__	values clip out	transform values using this interval
visualization		quantity_support	format	enable support for plotting astropy units quantity instances in
visualization		compute_intensity	image_r image_g image_b	return a naive total intensity from the red blue and green intensities
visualization	Mapping	make_rgb_image	image_r image_g image_b	convert 3 arrays image_r image_g and image_b into an 8-bit rgb image
visualization	Mapping	intensity	image_r image_g image_b	return the total intensity from the red blue and green intensities
visualization	Mapping	map_intensity_to_uint8	I	return an array which when multiplied by an image returns that image mapped to the range of a uint8 [0 255] but not converted to uint8
visualization	Mapping	_convert_images_to_uint8	image_r image_g image_b	use the mapping to convert images image_r image_g and image_b to a triplet of uint8 images
visualization		make_lupton_rgb	image_r image_g image_b minimum	return a red/green/blue color image from up to 3 images using an asinh stretch
visualization.wcsaxes		_rotate_polygon	lon lat lon0 lat0	given a polygon with vertices defined by lon lat rotate the polygon such that the north pole of the spherical coordinates is now at (lon0
visualization.wcsaxes	WCSAxes	imshow	X	wrapper to matplotlib's :meth ~matplotlib axes axes imshow
visualization.wcsaxes	WCSAxes	plot_coord		plot ~astropy coordinates skycoord or
visualization.wcsaxes	WCSAxes	reset_wcs	wcs slices transform coord_meta	reset the current axes to use a new wcs object
visualization.wcsaxes	WCSAxes	get_transform	frame	return a transform from the specified frame to display coordinates
visualization.wcsaxes	WCSAxes	_get_transform_no_transdata	frame	return a transform from data to the specified frame
visualization.wcsaxes	WCSAxes	grid	b axis	plot gridlines for both coordinates
visualization.wcsaxes	TickLabels	sort		sort by axis displacement which allows us to figure out which parts of labels to not repeat
visualization.wcsaxes	TickLabels	simplify_labels		figure out which parts of labels can be dropped to avoid repetition
visualization.wcsaxes	CurvedTransform	transform_path	path	transform a matplotlib path parameters
visualization.wcsaxes	WCSWorld2PixelTransform	transform	world	transform world to pixel coordinates you should pass in a nxm array
visualization.wcsaxes	WCSWorld2PixelTransform	inverted		return the inverse of the transform
visualization.wcsaxes	WCSPixel2WorldTransform	get_coord_slices	xmin xmax ymin ymax	get a coordinate slice
visualization.wcsaxes	WCSPixel2WorldTransform	transform	pixel	transform pixel to world coordinates you should pass in a nx2 array
visualization.wcsaxes	WCSPixel2WorldTransform	inverted		return the inverse of the transform
visualization.wcsaxes	CoordinateTransform	transform	input_coords	transform one set of coordinates to another
visualization.wcsaxes	CoordinateTransform	inverted		return the inverse of the transform
visualization.wcsaxes	Ticks	set_tick_out	tick_out	set true if tick need to be rotated by 180 degree
visualization.wcsaxes	Ticks	get_tick_out		return true if the tick will be rotated by 180 degree
visualization.wcsaxes	Ticks	set_ticksize	ticksize	set length of the ticks in points
visualization.wcsaxes	Ticks	get_ticksize		return length of the ticks in points
visualization.wcsaxes	Ticks	draw	renderer	draw the ticks
visualization.wcsaxes	Ticks	_draw_ticks	renderer pixel_array angle_array offset	draw the minor ticks
visualization.wcsaxes	CoordinatesMap	grid	draw_grid grid_type	plot gridlines for both coordinates
visualization.wcsaxes	BaseFrame	set_color	color	sets the color of the frame
visualization.wcsaxes	BaseFrame	set_linewidth	linewidth	sets the linewidth of the frame
visualization.wcsaxes	EllipticalFrame	_update_patch_path		override path patch to include only the outer ellipse not the major and minor axes in the middle
visualization.wcsaxes	EllipticalFrame	draw	renderer	override to draw only the outer ellipse not the major and minor axes in the middle
visualization.wcsaxes		coord_type_from_ctype	ctype	determine whether a particular wcs ctype corresponds to an angle or scalar coordinate
visualization.wcsaxes		get_lon_lat_path	lon_lat pixel lon_lat_check	draw a curve taking into account discontinuities
visualization.wcsaxes		get_gridline_path	world pixel	draw a grid line parameters
visualization.wcsaxes		find_coordinate_range	transform extent coord_types coord_units	find the range of coordinates to use for ticks/grids parameters
visualization.wcsaxes	CoordinateHelper	grid	draw_grid grid_type	plot grid lines for this coordinate
visualization.wcsaxes	CoordinateHelper	set_coord_type	coord_type coord_wrap	set the coordinate type for the axis
visualization.wcsaxes	CoordinateHelper	set_major_formatter	formatter	set the formatter to use for the major tick labels
visualization.wcsaxes	CoordinateHelper	format_coord	value	given the value of a coordinate will format it according to the format of the formatter_locator
visualization.wcsaxes	CoordinateHelper	set_separator	separator	set the separator to use for the angle major tick labels
visualization.wcsaxes	CoordinateHelper	set_format_unit	unit	set the unit for the major tick labels
visualization.wcsaxes	CoordinateHelper	set_ticks	values spacing number size	set the location and properties of the ticks
visualization.wcsaxes	CoordinateHelper	set_ticks_position	position	set where ticks should appear parameters
visualization.wcsaxes	CoordinateHelper	set_ticks_visible	visible	set whether ticks are visible or not
visualization.wcsaxes	CoordinateHelper	set_ticklabel		set the visual properties for the tick labels
visualization.wcsaxes	CoordinateHelper	set_ticklabel_position	position	set where tick labels should appear parameters
visualization.wcsaxes	CoordinateHelper	set_ticklabel_visible	visible	set whether the tick labels are visible or not
visualization.wcsaxes	CoordinateHelper	set_axislabel	text minpad	set the text and optionally visual properties for the axis label
visualization.wcsaxes	CoordinateHelper	get_axislabel		get the text for the axis label
visualization.wcsaxes	CoordinateHelper	set_axislabel_position	position	set where axis labels should appear parameters
visualization.wcsaxes	CoordinateHelper	display_minor_ticks	display_minor_ticks	display minor ticks for this coordinate
visualization.wcsaxes	CoordinateHelper	set_minor_frequency	frequency	set the frequency of minor ticks per major ticks
visualization.scripts		fits2bitmap	filename ext out_fn stretch	create a bitmap file from a fits image applying a stretching transform between minimum and maximum cut levels and a matplotlib
