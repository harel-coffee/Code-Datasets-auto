<tt style='background-color:#E8E8E8;'> core. <a href=' /MarkovModel.py#L84'>load</a>(handle)</tt>	Load handle -> markovmodel().
<tt style='background-color:#E8E8E8;'> core. <a href=' /MarkovModel.py#L121'>save</a>(mm,handle)</tt>	Save mm handle.
<tt style='background-color:#E8E8E8;'> core. <a href=' /MarkovModel.py#L139'>train_bw</a>(states,alphabet,training_data,pseudo_initial)</tt>	Train_bw(states alphabet training_data[, pseudo_initial] [, pseudo_transition][, pseudo_emission][, update_fn]) -> markovmodel.
<tt style='background-color:#E8E8E8;'> core. <a href=' /MarkovModel.py#L388'>train_visible</a>(states,alphabet,training_data,pseudo_initial)</tt>	Train_visible(states alphabet training_data[, pseudo_initial] [, pseudo_transition][, pseudo_emission]) -> markovmodel.
<tt style='background-color:#E8E8E8;'> core. <a href=' /MarkovModel.py#L485'>find_states</a>(markov_model,output)</tt>	Find_states(markov_model output) -> list of states score.
<tt style='background-color:#E8E8E8;'> core. <a href=' /Seq.py#L36'>_maketrans</a>(complement_mapping)</tt>	Makes a python string translation table private.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L84'>__init__</a>(data,alphabet)</tt>	Create a seq object.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L116'>__repr__</a>()</tt>	Return truncated representation of the sequence for debugging.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L131'>__str__</a>()</tt>	Returns the full sequence as a python string use str(my_seq).
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L141'>__hash__</a>()</tt>	Hash for comparison.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L156'>__eq__</a>(other)</tt>	Compare the sequence to another sequence or a string readme.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L199'>__ne__</a>(other)</tt>	Not equal see __eq__ documentation.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L204'>__lt__</a>(other)</tt>	Less than see __eq__ documentation.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L214'>__le__</a>(other)</tt>	Less than or equal see __eq__ documentation.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L224'>__len__</a>()</tt>	Returns the length of the sequence use len(my_seq).
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L228'>__getitem__</a>(index)</tt>	Returns a subsequence of single letter use my_seq[index].
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L240'>__add__</a>(other)</tt>	Add another sequence or string to this sequence.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L310'>__radd__</a>(other)</tt>	Adding a sequence on the left.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L338'>tostring</a>()</tt>	Returns the full sequence as a python string deprecated.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L350'>tomutable</a>()</tt>	Returns the full sequence as a mutableseq object.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L366'>_get_seq_str_and_check_alphabet</a>(other_sequence)</tt>	String/seq/mutableseq to string checking alphabet private.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L387'>count</a>(sub,start,end)</tt>	Non-overlapping count method like that of a python string.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L431'>__contains__</a>(char)</tt>	Implements the 'in' keyword like a python string.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L462'>find</a>(sub,start,end)</tt>	Find method like that of a python string.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L488'>rfind</a>(sub,start,end)</tt>	Find from right method like that of a python string.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L514'>startswith</a>(prefix,start,end)</tt>	Does the seq start with the given prefix? returns true/false.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L545'>endswith</a>(suffix,start,end)</tt>	Does the seq end with the given suffix? returns true/false.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L576'>split</a>(sep,maxsplit)</tt>	Split method like that of a python string.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L621'>rsplit</a>(sep,maxsplit)</tt>	Right split method like that of a python string.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L644'>strip</a>(chars)</tt>	Returns a new seq object with leading and trailing ends stripped.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L661'>lstrip</a>(chars)</tt>	Returns a new seq object with leading left end stripped.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L678'>rstrip</a>(chars)</tt>	Returns a new seq object with trailing right end stripped.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L703'>upper</a>()</tt>	Returns an upper case copy of the sequence.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L720'>lower</a>()</tt>	Returns a lower case copy of the sequence.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L741'>complement</a>()</tt>	Returns the complement sequence new seq object.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L792'>reverse_complement</a>()</tt>	Returns the reverse complement sequence new seq object.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L827'>transcribe</a>()</tt>	Returns the rna sequence from a dna sequence new seq object.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L861'>back_transcribe</a>()</tt>	Returns the dna sequence from an rna sequence new seq object.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L896'>translate</a>(table,stop_symbol,to_stop,cds)</tt>	Turns a nucleotide sequence into a protein sequence new seq object.
<tt style='background-color:#E8E8E8;'> core.Seq <a href=' /Seq.py#L1052'>ungap</a>(gap)</tt>	Return a copy of the sequence without the gap character s.
<tt style='background-color:#E8E8E8;'> core.UnknownSeq <a href=' /Seq.py#L1191'>__init__</a>(length,alphabet,character)</tt>	Create a new unknownseq object.
<tt style='background-color:#E8E8E8;'> core.UnknownSeq <a href=' /Seq.py#L1219'>__len__</a>()</tt>	Returns the stated length of the unknown sequence.
<tt style='background-color:#E8E8E8;'> core.UnknownSeq <a href=' /Seq.py#L1223'>__str__</a>()</tt>	Returns the unknown sequence as full string of the given length.
<tt style='background-color:#E8E8E8;'> core.UnknownSeq <a href=' /Seq.py#L1231'>__add__</a>(other)</tt>	Add another sequence or string to this sequence.
<tt style='background-color:#E8E8E8;'> core.UnknownSeq <a href=' /Seq.py#L1272'>__getitem__</a>(index)</tt>	Get a subsequence from the unknownseq object.
<tt style='background-color:#E8E8E8;'> core.UnknownSeq <a href=' /Seq.py#L1317'>count</a>(sub,start,end)</tt>	Non-overlapping count method like that of a python string.
<tt style='background-color:#E8E8E8;'> core.UnknownSeq <a href=' /Seq.py#L1373'>complement</a>()</tt>	The complement of an unknown nucleotide equals itself.
<tt style='background-color:#E8E8E8;'> core.UnknownSeq <a href=' /Seq.py#L1391'>reverse_complement</a>()</tt>	The reverse complement of an unknown nucleotide equals itself.
<tt style='background-color:#E8E8E8;'> core.UnknownSeq <a href=' /Seq.py#L1409'>transcribe</a>()</tt>	Returns unknown rna sequence from an unknown dna sequence.
<tt style='background-color:#E8E8E8;'> core.UnknownSeq <a href=' /Seq.py#L1427'>back_transcribe</a>()</tt>	Returns unknown dna sequence from an unknown rna sequence.
<tt style='background-color:#E8E8E8;'> core.UnknownSeq <a href=' /Seq.py#L1445'>upper</a>()</tt>	Returns an upper case copy of the sequence.
<tt style='background-color:#E8E8E8;'> core.UnknownSeq <a href=' /Seq.py#L1465'>lower</a>()</tt>	Returns a lower case copy of the sequence.
<tt style='background-color:#E8E8E8;'> core.UnknownSeq <a href=' /Seq.py#L1487'>translate</a>()</tt>	Translate an unknown nucleotide sequence into an unknown protein.
<tt style='background-color:#E8E8E8;'> core.UnknownSeq <a href=' /Seq.py#L1518'>ungap</a>(gap)</tt>	Return a copy of the sequence without the gap character s.
<tt style='background-color:#E8E8E8;'> core.MutableSeq <a href=' /Seq.py#L1595'>__repr__</a>()</tt>	Return truncated representation of the sequence for debugging.
<tt style='background-color:#E8E8E8;'> core.MutableSeq <a href=' /Seq.py#L1610'>__str__</a>()</tt>	Returns the full sequence as a python string.
<tt style='background-color:#E8E8E8;'> core.MutableSeq <a href=' /Seq.py#L1621'>__eq__</a>(other)</tt>	Compare the sequence to another sequence or a string readme.
<tt style='background-color:#E8E8E8;'> core.MutableSeq <a href=' /Seq.py#L1663'>__ne__</a>(other)</tt>	Not equal see __eq__ documentation.
<tt style='background-color:#E8E8E8;'> core.MutableSeq <a href=' /Seq.py#L1668'>__lt__</a>(other)</tt>	Less than see __eq__ documentation.
<tt style='background-color:#E8E8E8;'> core.MutableSeq <a href=' /Seq.py#L1680'>__le__</a>(other)</tt>	Less than or equal see __eq__ documentation.
<tt style='background-color:#E8E8E8;'> core.MutableSeq <a href=' /Seq.py#L1731'>__add__</a>(other)</tt>	Add another sequence or string to this sequence.
<tt style='background-color:#E8E8E8;'> core.MutableSeq <a href=' /Seq.py#L1797'>count</a>(sub,start,end)</tt>	Non-overlapping count method like that of a python string.
<tt style='background-color:#E8E8E8;'> core.MutableSeq <a href=' /Seq.py#L1863'>reverse</a>()</tt>	Modify the mutable sequence to reverse itself.
<tt style='background-color:#E8E8E8;'> core.MutableSeq <a href=' /Seq.py#L1870'>complement</a>()</tt>	Modify the mutable sequence to take on its complement.
<tt style='background-color:#E8E8E8;'> core.MutableSeq <a href=' /Seq.py#L1896'>reverse_complement</a>()</tt>	Modify the mutable sequence to take on its reverse complement.
<tt style='background-color:#E8E8E8;'> core.MutableSeq <a href=' /Seq.py#L1917'>tostring</a>()</tt>	Returns the full sequence as a python string deprecated.
<tt style='background-color:#E8E8E8;'> core.MutableSeq <a href=' /Seq.py#L1942'>toseq</a>()</tt>	Returns the full sequence as a new immutable seq object.
<tt style='background-color:#E8E8E8;'> core. <a href=' /Seq.py#L1963'>transcribe</a>(dna)</tt>	Transcribes a dna sequence into rna.
<tt style='background-color:#E8E8E8;'> core. <a href=' /Seq.py#L1985'>back_transcribe</a>(rna)</tt>	Back-transcribes an rna sequence into dna.
<tt style='background-color:#E8E8E8;'> core. <a href=' /Seq.py#L2007'>_translate_str</a>(sequence,table,stop_symbol,to_stop)</tt>	Helper function to translate a nucleotide string private.
<tt style='background-color:#E8E8E8;'> core. <a href=' /Seq.py#L2131'>translate</a>(sequence,table,stop_symbol,to_stop)</tt>	Translate a nucleotide sequence into amino acids.
<tt style='background-color:#E8E8E8;'> core. <a href=' /Seq.py#L2220'>reverse_complement</a>(sequence)</tt>	Returns the reverse complement sequence of a nucleotide string.
<tt style='background-color:#E8E8E8;'> core. <a href=' /Seq.py#L2237'>complement</a>(sequence)</tt>	Returns the complement sequence of a nucleotide string.
<tt style='background-color:#E8E8E8;'> core. <a href=' /Seq.py#L2275'>_test</a>()</tt>	Run the bio seq module's doctests private.
<tt style='background-color:#E8E8E8;'> core. <a href=' /triefind.py#L22'>match</a>(string,trie)</tt>	Match string trie -> longest key or none find the longest key in the trie that matches the beginning of the.
<tt style='background-color:#E8E8E8;'> core. <a href=' /triefind.py#L39'>match_all</a>(string,trie)</tt>	Match_all string trie -> list of keys find all the keys in the trie that matches the beginning of the.
<tt style='background-color:#E8E8E8;'> core. <a href=' /triefind.py#L56'>find</a>(string,trie)</tt>	Find string trie -> list of tuples key start end find all the keys in the trie that match anywhere in the string.
<tt style='background-color:#E8E8E8;'> core. <a href=' /triefind.py#L76'>find_words</a>(string,trie)</tt>	Find_words string trie -> list of tuples key start end find all the keys in the trie that match full words in the string.
<tt style='background-color:#E8E8E8;'> core. <a href=' /LogisticRegression.py#L114'>calculate</a>(nb,observation,scale)</tt>	Calculate log p(class|observation) for each class.
<tt style='background-color:#E8E8E8;'> core. <a href=' /LogisticRegression.py#L130'>classify</a>(nb,observation)</tt>	Classify an observation into a class.
<tt style='background-color:#E8E8E8;'> core. <a href=' /LogisticRegression.py#L37'>train</a>(training_set,results,priors,typecode)</tt>	Train a naive bayes classifier on a training set.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pairwise2.py#L395'>_align</a>(sequenceA,sequenceB,match_fn,gap_A_fn)</tt>	Return a list of alignments between two sequences or its score.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pairwise2.py#L454'>_make_score_matrix_generic</a>(sequenceA,sequenceB,match_fn,gap_A_fn)</tt>	Generate a score and traceback matrix according to needleman-wunsch this implementation allows the usage of general gap functions and is rather.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pairwise2.py#L551'>_make_score_matrix_fast</a>(sequenceA,sequenceB,match_fn,open_A)</tt>	Generate a score and traceback matrix according to gotoh.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pairwise2.py#L679'>_recover_alignments</a>(sequenceA,sequenceB,starts,score_matrix)</tt>	Do the backtracing and return a list of alignments.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pairwise2.py#L800'>_find_start</a>(score_matrix,align_globally)</tt>	Return a list of starting points (score row col.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pairwise2.py#L819'>_clean_alignments</a>(alignments)</tt>	Take a list of alignments and return a cleaned version.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pairwise2.py#L844'>_finish_backtrace</a>(sequenceA,sequenceB,ali_seqA,ali_seqB)</tt>	Add remaining sequences and fill with gaps if neccessary.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pairwise2.py#L858'>_find_gap_open</a>(sequenceA,sequenceB,ali_seqA,ali_seqB)</tt>	Find the starting point s of the extended gap.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pairwise2.py#L959'>print_matrix</a>(matrix)</tt>	Print_matrix matrix print out a matrix.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pairwise2.py#L976'>format_alignment</a>(align1,align2,score,begin)</tt>	Format_alignment align1 align2 score begin end -> string format the alignment prettily into a string.
<tt style='background-color:#E8E8E8;'> core. <a href=' /kNN.py#L55'>equal_weight</a>(x,y)</tt>	Equal_weight x y -> 1.
<tt style='background-color:#E8E8E8;'> core. <a href=' /LogisticRegression.py#L37'>train</a>(xs,ys,k,typecode)</tt>	Train xs ys k -> knn train a k nearest neighbors classifier on a training set.
<tt style='background-color:#E8E8E8;'> core. <a href=' /LogisticRegression.py#L114'>calculate</a>(knn,x,weight_fn,distance_fn)</tt>	Calculate(knn x[, weight_fn][, distance_fn]) -> weight dict calculate the probability for each class.
<tt style='background-color:#E8E8E8;'> core. <a href=' /LogisticRegression.py#L130'>classify</a>(knn,x,weight_fn,distance_fn)</tt>	Classify(knn x[, weight_fn][, distance_fn]) -> class classify an observation into a class.
<tt style='background-color:#E8E8E8;'> core. <a href=' /LogisticRegression.py#L114'>calculate</a>(me,observation)</tt>	Calculate me observation -> list of log probs calculate the log of the probability for each class.
<tt style='background-color:#E8E8E8;'> core. <a href=' /LogisticRegression.py#L130'>classify</a>(me,observation)</tt>	Classify me observation -> class classify an observation into a class.
<tt style='background-color:#E8E8E8;'> core. <a href=' /MaxEntropy.py#L118'>_eval_feature_fn</a>(fn,xs,classes)</tt>	_eval_feature_fn fn xs classes -> dict of values evaluate a feature function on every instance of the training set.
<tt style='background-color:#E8E8E8;'> core. <a href=' /MaxEntropy.py#L137'>_calc_empirical_expects</a>(xs,ys,classes,features)</tt>	_calc_empirical_expects xs ys classes features -> list of expectations calculate the expectation of each function from the data.
<tt style='background-color:#E8E8E8;'> core. <a href=' /MaxEntropy.py#L162'>_calc_model_expects</a>(xs,classes,features,alphas)</tt>	_calc_model_expects xs classes features alphas -> list of expectations.
<tt style='background-color:#E8E8E8;'> core. <a href=' /MaxEntropy.py#L183'>_calc_p_class_given_x</a>(xs,classes,features,alphas)</tt>	_calc_p_class_given_x xs classes features alphas -> matrix calculate p(y|x), where y is the class and x is an instance from.
<tt style='background-color:#E8E8E8;'> core. <a href=' /MaxEntropy.py#L206'>_calc_f_sharp</a>(N,nclasses,features)</tt>	_calc_f_sharp n nclasses features -> matrix of f sharp values.
<tt style='background-color:#E8E8E8;'> core. <a href=' /MaxEntropy.py#L240'>_train_iis</a>(xs,classes,features,f_sharp)</tt>	Do one iteration of hill climbing to find better alphas private.
<tt style='background-color:#E8E8E8;'> core. <a href=' /LogisticRegression.py#L37'>train</a>(training_set,results,feature_fns,update_fn)</tt>	Train a maximum entropy classifier returns maxentropy object.
<tt style='background-color:#E8E8E8;'> core. <a href=' /File.py#L46'>as_handle</a>(handleish,mode)</tt>	Context manager to ensure we are using a handle.
<tt style='background-color:#E8E8E8;'> core. <a href=' /File.py#L93'>_open_for_random_access</a>(filename)</tt>	Open a file in binary mode spot if it is bgzf format etc private.
<tt style='background-color:#E8E8E8;'> core.UndoHandle <a href=' /File.py#L122'>__init__</a>(handle)</tt>	Initialize the class.
<tt style='background-color:#E8E8E8;'> core.UndoHandle <a href=' /File.py#L132'>__iter__</a>()</tt>	Iterate over the lines in the file.
<tt style='background-color:#E8E8E8;'> core.UndoHandle <a href=' /File.py#L136'>__next__</a>()</tt>	Return the next line.
<tt style='background-color:#E8E8E8;'> core.UndoHandle <a href=' /File.py#L148'>readlines</a>()</tt>	Read all the lines from the file as a list of strings.
<tt style='background-color:#E8E8E8;'> core.UndoHandle <a href=' /File.py#L154'>readline</a>()</tt>	Read the next line from the file as string.
<tt style='background-color:#E8E8E8;'> core.UndoHandle <a href=' /File.py#L162'>read</a>(size)</tt>	Read the file.
<tt style='background-color:#E8E8E8;'> core.UndoHandle <a href=' /File.py#L179'>saveline</a>(line)</tt>	Store a line in the cache memory for later use.
<tt style='background-color:#E8E8E8;'> core.UndoHandle <a href=' /File.py#L187'>peekline</a>()</tt>	Return the next line in the file but do not move forward though the file.
<tt style='background-color:#E8E8E8;'> core.UndoHandle <a href=' /File.py#L196'>tell</a>()</tt>	Return the current position of the file read/write pointer within the file.
<tt style='background-color:#E8E8E8;'> core.UndoHandle <a href=' /File.py#L200'>seek</a>()</tt>	Set the current position at the offset specified.
<tt style='background-color:#E8E8E8;'> core.UndoHandle <a href=' /File.py#L205'>__getattr__</a>(attr)</tt>	Return file attribute.
<tt style='background-color:#E8E8E8;'> core.UndoHandle <a href=' /File.py#L209'>__enter__</a>()</tt>	Call special method when opening the file using a with-statement.
<tt style='background-color:#E8E8E8;'> core.UndoHandle <a href=' /File.py#L213'>__exit__</a>(type,value,traceback)</tt>	Call special method when closing the file using a with-statement.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileProxy <a href=' /File.py#L231'>__iter__</a>()</tt>	Return identifier offset length in bytes tuples.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileProxy <a href=' /File.py#L239'>get</a>(offset)</tt>	Return parsed object for this entry.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileProxy <a href=' /File.py#L245'>get_raw</a>(offset)</tt>	Return the raw record from the file as a bytes string if implemented.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L281'>__init__</a>(random_access_proxy,key_function,repr,obj_repr)</tt>	Initialize the class.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L312'>__repr__</a>()</tt>	Return a string representation of the file object.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L316'>__str__</a>()</tt>	Create a string representation of the file object.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L324'>__contains__</a>(key)</tt>	Return key if contained in the offsets dictionary.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L328'>__len__</a>()</tt>	Return the number of records.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L332'>items</a>()</tt>	Iterate over the key seqrecord items.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L341'>values</a>()</tt>	Iterate over the seqrecord items.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L350'>keys</a>()</tt>	Iterate over the keys.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L374'>__iter__</a>()</tt>	Iterate over the keys.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L378'>__getitem__</a>(key)</tt>	Return record for the specified key.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L390'>get</a>(k,d)</tt>	Return the value in the dictionary.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L401'>get_raw</a>(key)</tt>	Return the raw record from the file as a bytes string.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L409'>__setitem__</a>(key,value)</tt>	Would allow setting or replacing records but not implemented.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L417'>update</a>()</tt>	Would allow adding more values but not implemented.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L425'>pop</a>(key,default)</tt>	Would remove specified record but not implemented.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L433'>popitem</a>()</tt>	Would remove and return a seqrecord but not implemented.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L441'>clear</a>()</tt>	Would clear dictionary but not implemented.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L449'>fromkeys</a>(keys,value)</tt>	Would return a new dictionary with keys and values but not implemented.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L458'>copy</a>()</tt>	Would copy a dictionary but not implemented.
<tt style='background-color:#E8E8E8;'> core._IndexedSeqFileDict <a href=' /File.py#L467'>close</a>()</tt>	Close the file handle being used to read the data.
<tt style='background-color:#E8E8E8;'> core._SQLiteManySeqFilesDict <a href=' /File.py#L493'>__init__</a>(index_filename,filenames,proxy_factory,format)</tt>	Initialize the class.
<tt style='background-color:#E8E8E8;'> core._SQLiteManySeqFilesDict <a href=' /File.py#L529'>_load_index</a>()</tt>	Call from __init__ to re-use an existing index private.
<tt style='background-color:#E8E8E8;'> core._SQLiteManySeqFilesDict <a href=' /File.py#L612'>_build_index</a>()</tt>	Call from __init__ to create a new index private.
<tt style='background-color:#E8E8E8;'> core._SQLiteManySeqFilesDict <a href=' /File.py#L717'>__len__</a>()</tt>	Return the number of records indexed.
<tt style='background-color:#E8E8E8;'> core._SQLiteManySeqFilesDict <a href=' /File.py#L722'>__iter__</a>()</tt>	Iterate over the keys.
<tt style='background-color:#E8E8E8;'> core._SQLiteManySeqFilesDict <a href=' /File.py#L739'>__getitem__</a>(key)</tt>	Return record for the specified key.
<tt style='background-color:#E8E8E8;'> core._SQLiteManySeqFilesDict <a href=' /File.py#L767'>get</a>(k,d)</tt>	Return the value in the dictionary.
<tt style='background-color:#E8E8E8;'> core._SQLiteManySeqFilesDict <a href=' /File.py#L778'>get_raw</a>(key)</tt>	Return the raw record from the file as a bytes string.
<tt style='background-color:#E8E8E8;'> core._SQLiteManySeqFilesDict <a href=' /File.py#L815'>close</a>()</tt>	Close any open file handles.
<tt style='background-color:#E8E8E8;'> core._RestrictedDict <a href=' /SeqRecord.py#L73'>__init__</a>(length)</tt>	Create an empty restricted dictionary.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L154'>__init__</a>(seq,id,name,description)</tt>	Create a seqrecord.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L323'>__getitem__</a>(index)</tt>	Returns a sub-sequence or an individual letter.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L486'>__iter__</a>()</tt>	Iterate over the letters in the sequence.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L540'>__contains__</a>(char)</tt>	Implements the 'in' keyword searches the sequence.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L572'>__str__</a>()</tt>	A human readable summary of the record and its annotation string.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L623'>__repr__</a>()</tt>	A concise summary of the record for debugging string.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L657'>format</a>(format)</tt>	Returns the record as a string in the specified file format.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L691'>__format__</a>(format_spec)</tt>	Returns the record as a string in the specified file format.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L716'>__len__</a>()</tt>	Returns the length of the sequence.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L752'>__bool__</a>()</tt>	Boolean value of an instance of this class true.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L770'>__add__</a>(other)</tt>	Add another sequence or string to this sequence.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L877'>__radd__</a>(other)</tt>	Add another sequence or string to this sequence from the left.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L910'>upper</a>()</tt>	Returns a copy of the record with an upper case sequence.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L945'>lower</a>()</tt>	Returns a copy of the record with a lower case sequence.
<tt style='background-color:#E8E8E8;'> core.SeqRecord <a href=' /SeqRecord.py#L985'>reverse_complement</a>(id,name,description,features)</tt>	Returns new seqrecord with reverse complement sequence.
<tt style='background-color:#E8E8E8;'> core. <a href=' /LogisticRegression.py#L37'>train</a>(xs,ys,update_fn,typecode)</tt>	Train(xs ys[, update_fn]) -> logisticregression train a logistic regression classifier on a training set.
<tt style='background-color:#E8E8E8;'> core. <a href=' /LogisticRegression.py#L114'>calculate</a>(lr,x)</tt>	Calculate lr x -> list of probabilities calculate the probability for each class.
<tt style='background-color:#E8E8E8;'> core. <a href=' /LogisticRegression.py#L130'>classify</a>(lr,x)</tt>	Classify lr x -> 1 or 0 classify an observation into a class.
<tt style='background-color:#E8E8E8;'> core. <a href=' /_utils.py#L14'>iterlen</a>(items)</tt>	Count the number of items in an iterable.
<tt style='background-color:#E8E8E8;'> core. <a href=' /_utils.py#L38'>read_forward</a>(handle)</tt>	Reads through whitespaces returns the first non-whitespace line.
<tt style='background-color:#E8E8E8;'> core. <a href=' /_utils.py#L48'>trim_str</a>(string,max_len,concat_char)</tt>	Truncates the given string for display.
<tt style='background-color:#E8E8E8;'> core. <a href=' /_utils.py#L55'>getattr_str</a>(obj,attr,fmt,fallback)</tt>	Returns a string of the given object's attribute defaulting to the fallback value if attribute is not present.
<tt style='background-color:#E8E8E8;'> core. <a href=' /_utils.py#L66'>find_test_dir</a>(start_dir)</tt>	Finds the absolute path of biopython's tests directory.
<tt style='background-color:#E8E8E8;'> core. <a href=' /_utils.py#L99'>run_doctest</a>(target_dir)</tt>	Runs doctest for the importing module.
<tt style='background-color:#E8E8E8;'> core. <a href=' /bgzf.py#L246'>open</a>(filename,mode)</tt>	Open a bgzf file for reading writing or appending.
<tt style='background-color:#E8E8E8;'> core. <a href=' /bgzf.py#L256'>make_virtual_offset</a>(block_start_offset,within_block_offset)</tt>	Compute a bgzf virtual offset from block start and within block offsets.
<tt style='background-color:#E8E8E8;'> core. <a href=' /bgzf.py#L309'>split_virtual_offset</a>(virtual_offset)</tt>	Divides a 64-bit bgzf virtual offset into block start & within block offsets.
<tt style='background-color:#E8E8E8;'> core. <a href=' /bgzf.py#L322'>BgzfBlocks</a>(handle)</tt>	Low level debugging function to inspect bgzf blocks.
<tt style='background-color:#E8E8E8;'> core. <a href=' /bgzf.py#L406'>_load_bgzf_block</a>(handle,text_mode)</tt>	Load the next bgzf block of compressed data private.
<tt style='background-color:#E8E8E8;'> core.BgzfReader <a href=' /bgzf.py#L523'>__init__</a>(filename,mode,fileobj,max_cache)</tt>	Initialize the class.
<tt style='background-color:#E8E8E8;'> core.BgzfReader <a href=' /bgzf.py#L590'>tell</a>()</tt>	Return a 64-bit unsigned bgzf virtual offset.
<tt style='background-color:#E8E8E8;'> core.BgzfReader <a href=' /bgzf.py#L606'>seek</a>(virtual_offset)</tt>	Seek to a 64-bit unsigned bgzf virtual offset.
<tt style='background-color:#E8E8E8;'> core.BgzfReader <a href=' /bgzf.py#L629'>read</a>(size)</tt>	Read method for the bgzf module.
<tt style='background-color:#E8E8E8;'> core.BgzfReader <a href=' /bgzf.py#L660'>readline</a>()</tt>	Read a single line for the bgzf file.
<tt style='background-color:#E8E8E8;'> core.BgzfReader <a href=' /bgzf.py#L687'>__next__</a>()</tt>	Return the next line.
<tt style='background-color:#E8E8E8;'> core.BgzfReader <a href=' /bgzf.py#L699'>__iter__</a>()</tt>	Iterate over the lines in the bgzf file.
<tt style='background-color:#E8E8E8;'> core.BgzfReader <a href=' /bgzf.py#L703'>close</a>()</tt>	Close bgzf file.
<tt style='background-color:#E8E8E8;'> core.BgzfReader <a href=' /bgzf.py#L710'>seekable</a>()</tt>	Return true indicating the bgzf supports random access.
<tt style='background-color:#E8E8E8;'> core.BgzfReader <a href=' /bgzf.py#L714'>isatty</a>()</tt>	Return true if connected to a tty device.
<tt style='background-color:#E8E8E8;'> core.BgzfReader <a href=' /bgzf.py#L718'>fileno</a>()</tt>	Return integer file descriptor.
<tt style='background-color:#E8E8E8;'> core.BgzfReader <a href=' /bgzf.py#L722'>__enter__</a>()</tt>	Open a file operable with with statement.
<tt style='background-color:#E8E8E8;'> core.BgzfReader <a href=' /bgzf.py#L726'>__exit__</a>(type,value,traceback)</tt>	Close a file with with statement.
<tt style='background-color:#E8E8E8;'> core.BgzfWriter <a href=' /bgzf.py#L734'>__init__</a>(filename,mode,fileobj,compresslevel)</tt>	Initilize the class.
<tt style='background-color:#E8E8E8;'> core.BgzfWriter <a href=' /bgzf.py#L751'>_write_block</a>(block)</tt>	Write provided data to file as a single bgzf compressed block private.
<tt style='background-color:#E8E8E8;'> core.BgzfWriter <a href=' /bgzf.py#L787'>write</a>(data)</tt>	Write method for the class.
<tt style='background-color:#E8E8E8;'> core.BgzfWriter <a href=' /bgzf.py#L804'>flush</a>()</tt>	Flush data explicitally.
<tt style='background-color:#E8E8E8;'> core.BgzfWriter <a href=' /bgzf.py#L813'>close</a>()</tt>	Flush data write 28 bytes bgzf eof marker and close bgzf file.
<tt style='background-color:#E8E8E8;'> core.BgzfWriter <a href=' /bgzf.py#L827'>tell</a>()</tt>	Return a bgzf 64-bit virtual offset.
<tt style='background-color:#E8E8E8;'> core.BgzfWriter <a href=' /bgzf.py#L831'>seekable</a>()</tt>	Return true indicating the bgzf supports random access.
<tt style='background-color:#E8E8E8;'> core.BgzfWriter <a href=' /bgzf.py#L836'>isatty</a>()</tt>	Return true if connected to a tty device.
<tt style='background-color:#E8E8E8;'> core.BgzfWriter <a href=' /bgzf.py#L840'>fileno</a>()</tt>	Return integer file descriptor.
<tt style='background-color:#E8E8E8;'> core.BgzfWriter <a href=' /bgzf.py#L844'>__enter__</a>()</tt>	Open a file operable with with statement.
<tt style='background-color:#E8E8E8;'> core.BgzfWriter <a href=' /bgzf.py#L848'>__exit__</a>(type,value,traceback)</tt>	Close a file with with statement.
<tt style='background-color:#E8E8E8;'> core.TaggingConsumer <a href=' /ParserSupport.py#L75'>__init__</a>(handle,colwidth,maxwidth)</tt>	Taggingconsumer(handle=sys stdout colwidth=15 maxwidth=80).
<tt style='background-color:#E8E8E8;'> core. <a href=' /ParserSupport.py#L112'>read_and_call</a>(uhandle,method)</tt>	Read_and_call(uhandle method[, start][, end][, contains][, blank][, has_re]) read a line from uhandle check it and pass it to the method.
<tt style='background-color:#E8E8E8;'> core. <a href=' /ParserSupport.py#L134'>read_and_call_while</a>(uhandle,method)</tt>	Read_and_call_while(uhandle method[, start][, end][, contains][, blank][, has_re]) -> number of lines read a line from uhandle and pass it to the method as long as.
<tt style='background-color:#E8E8E8;'> core. <a href=' /ParserSupport.py#L155'>read_and_call_until</a>(uhandle,method)</tt>	Read_and_call_until(uhandle method start=none end=none contains=none blank=none) -> number of lines.
<tt style='background-color:#E8E8E8;'> core. <a href=' /ParserSupport.py#L177'>attempt_read_and_call</a>(uhandle,method)</tt>	Attempt_read_and_call(uhandle method **keywds) -> boolean similar to read_and_call but returns a boolean specifying.
<tt style='background-color:#E8E8E8;'> core. <a href=' /ParserSupport.py#L222'>is_blank_line</a>(line,allow_spaces)</tt>	Is_blank_line(line allow_spaces=0) -> boolean return whether a line is blank.
<tt style='background-color:#E8E8E8;'> core. <a href=' /ParserSupport.py#L238'>safe_readline</a>(handle)</tt>	Safe_readline handle -> line read a line from an undohandle and return it.
<tt style='background-color:#E8E8E8;'> core. <a href=' /ParserSupport.py#L251'>safe_peekline</a>(handle)</tt>	Safe_peekline handle -> line peek at the next line in an undohandle and return it.
<tt style='background-color:#E8E8E8;'> core.SeqFeature <a href=' /SeqFeature.py#L93'>__init__</a>(location,type,location_operator,strand)</tt>	Initialize a seqfeature on a sequence.
<tt style='background-color:#E8E8E8;'> core.SeqFeature <a href=' /SeqFeature.py#L239'>__repr__</a>()</tt>	A string representation of the record for debugging.
<tt style='background-color:#E8E8E8;'> core.SeqFeature <a href=' /SeqFeature.py#L255'>__str__</a>()</tt>	A readable summary of the feature intended to be printed to screen.
<tt style='background-color:#E8E8E8;'> core.SeqFeature <a href=' /SeqFeature.py#L267'>_shift</a>(offset)</tt>	Returns a copy of the feature with its location shifted private.
<tt style='background-color:#E8E8E8;'> core.SeqFeature <a href=' /SeqFeature.py#L278'>_flip</a>(length)</tt>	Returns a copy of the feature with its location flipped private.
<tt style='background-color:#E8E8E8;'> core.SeqFeature <a href=' /SeqFeature.py#L294'>extract</a>(parent_sequence)</tt>	Extract feature sequence from the supplied parent sequence.
<tt style='background-color:#E8E8E8;'> core.SeqFeature <a href=' /SeqFeature.py#L334'>__bool__</a>()</tt>	Boolean value of an instance of this class true.
<tt style='background-color:#E8E8E8;'> core.SeqFeature <a href=' /SeqFeature.py#L351'>__len__</a>()</tt>	Returns the length of the region described by a feature.
<tt style='background-color:#E8E8E8;'> core.SeqFeature <a href=' /SeqFeature.py#L380'>__iter__</a>()</tt>	Iterate over the parent positions within the feature.
<tt style='background-color:#E8E8E8;'> core.SeqFeature <a href=' /SeqFeature.py#L406'>__contains__</a>(value)</tt>	Check if an integer position is within the feature.
<tt style='background-color:#E8E8E8;'> core.Reference <a href=' /SeqFeature.py#L490'>__str__</a>()</tt>	Output an informative string for debugging.
<tt style='background-color:#E8E8E8;'> core.Reference <a href=' /SeqFeature.py#L510'>__eq__</a>(other)</tt>	Check if two reference objects should be considered equal note that the location is not compared as __eq__ for the.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L591'>__init__</a>(start,end,strand,ref)</tt>	Specify the start end strand etc of a sequence feature.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L675'>__str__</a>()</tt>	Returns a representation of the location with python counting.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L698'>__repr__</a>()</tt>	A string representation of the location for debugging.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L710'>__add__</a>(other)</tt>	Combine location with another feature location or shift it.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L764'>__nonzero__</a>()</tt>	Returns true regardless of the length of the feature.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L778'>__len__</a>()</tt>	Returns the length of the region described by the featurelocation.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L791'>__contains__</a>(value)</tt>	Check if an integer position is within the featurelocation.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L812'>__iter__</a>()</tt>	Iterate over the parent positions within the featurelocation.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L844'>_shift</a>(offset)</tt>	Returns a copy of the location shifted by the offset private.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L854'>_flip</a>(length)</tt>	Returns a copy of the location after the parent is reversed private.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L871'>parts</a>()</tt>	Read only list of parts always one the feature location.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L881'>start</a>()</tt>	Start location - left most minimum value regardless of strand.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L890'>end</a>()</tt>	End location - right most maximum value regardless of strand.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L899'>nofuzzy_start</a>()</tt>	Start position integer approximated if fuzzy read only obsolete.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L914'>nofuzzy_end</a>()</tt>	End position integer approximated if fuzzy read only obsolete.
<tt style='background-color:#E8E8E8;'> core.FeatureLocation <a href=' /SeqFeature.py#L929'>extract</a>(parent_sequence)</tt>	Extract feature sequence from the supplied parent sequence.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L951'>__init__</a>(parts,operator)</tt>	Create a compound location with several parts.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L1023'>__str__</a>()</tt>	Returns a representation of the location with python counting.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L1027'>__repr__</a>()</tt>	String representation of the location for debugging.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L1079'>__add__</a>(other)</tt>	Combine locations or shift the location by an integer offset.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L1134'>__contains__</a>(value)</tt>	Check if an integer position is within the location.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L1141'>__nonzero__</a>()</tt>	Returns true regardless of the length of the feature.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L1163'>_shift</a>(offset)</tt>	Returns a copy of the location shifted by the offset private.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L1168'>_flip</a>(length)</tt>	Returns a copy of the location after the parent is reversed private.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L1243'>start</a>()</tt>	Start location - left most minimum value regardless of strand.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L1255'>end</a>()</tt>	End location - right most maximum value regardless of strand.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L1268'>nofuzzy_start</a>()</tt>	Start position integer approximated if fuzzy read only obsolete.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L1283'>nofuzzy_end</a>()</tt>	End position integer approximated if fuzzy read only obsolete.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L1298'>ref</a>()</tt>	Compoundlocation's don't have a ref dummy method for api compatibility.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L1303'>ref_db</a>()</tt>	Compoundlocation's don't have a ref_db dummy method for api compatibility.
<tt style='background-color:#E8E8E8;'> core.CompoundLocation <a href=' /SeqFeature.py#L1308'>extract</a>(parent_sequence)</tt>	Extract feature sequence from the supplied parent sequence.
<tt style='background-color:#E8E8E8;'> core.AbstractPosition <a href=' /SeqFeature.py#L1322'>__repr__</a>()</tt>	String representation of the location for debugging.
<tt style='background-color:#E8E8E8;'> core.ExactPosition <a href=' /SeqFeature.py#L1366'>__repr__</a>()</tt>	String representation of the exactposition location for debugging.
<tt style='background-color:#E8E8E8;'> core.ExactPosition <a href=' /SeqFeature.py#L1370'>position</a>()</tt>	Legacy attribute to get position as integer obsolete.
<tt style='background-color:#E8E8E8;'> core.ExactPosition <a href=' /SeqFeature.py#L1375'>extension</a>()</tt>	Legacy attribute to get extension zero as integer obsolete.
<tt style='background-color:#E8E8E8;'> core.UnknownPosition <a href=' /SeqFeature.py#L1404'>__repr__</a>()</tt>	String representation of the unknownposition location for debugging.
<tt style='background-color:#E8E8E8;'> core.UnknownPosition <a href=' /SeqFeature.py#L1411'>position</a>()</tt>	Legacy attribute to get position none obsolete.
<tt style='background-color:#E8E8E8;'> core.UnknownPosition <a href=' /SeqFeature.py#L1416'>extension</a>()</tt>	Legacy attribute to get extension zero as integer obsolete.
<tt style='background-color:#E8E8E8;'> core.WithinPosition <a href=' /SeqFeature.py#L1521'>__repr__</a>()</tt>	String representation of the withinposition location for debugging.
<tt style='background-color:#E8E8E8;'> core.WithinPosition <a href=' /SeqFeature.py#L1530'>position</a>()</tt>	Legacy attribute to get left position as integer obsolete.
<tt style='background-color:#E8E8E8;'> core.WithinPosition <a href=' /SeqFeature.py#L1535'>extension</a>()</tt>	Legacy attribute to get extension from left to right as an integer obsolete.
<tt style='background-color:#E8E8E8;'> core.BetweenPosition <a href=' /SeqFeature.py#L1623'>__repr__</a>()</tt>	String representation of the withinposition location for debugging.
<tt style='background-color:#E8E8E8;'> core.BetweenPosition <a href=' /SeqFeature.py#L1632'>position</a>()</tt>	Legacy attribute to get left position as integer obsolete.
<tt style='background-color:#E8E8E8;'> core.BetweenPosition <a href=' /SeqFeature.py#L1637'>extension</a>()</tt>	Legacy attribute to get extension from left to right as an integer obsolete.
<tt style='background-color:#E8E8E8;'> core.BeforePosition <a href=' /SeqFeature.py#L1692'>position</a>()</tt>	Legacy attribute to get position as integer obsolete.
<tt style='background-color:#E8E8E8;'> core.BeforePosition <a href=' /SeqFeature.py#L1697'>extension</a>()</tt>	Legacy attribute to get extension zero as integer obsolete.
<tt style='background-color:#E8E8E8;'> core.BeforePosition <a href=' /SeqFeature.py#L1702'>__repr__</a>()</tt>	A string representation of the location for debugging.
<tt style='background-color:#E8E8E8;'> core.AfterPosition <a href=' /SeqFeature.py#L1762'>position</a>()</tt>	Legacy attribute to get position as integer obsolete.
<tt style='background-color:#E8E8E8;'> core.AfterPosition <a href=' /SeqFeature.py#L1767'>extension</a>()</tt>	Legacy attribute to get extension zero as integer obsolete.
<tt style='background-color:#E8E8E8;'> core.AfterPosition <a href=' /SeqFeature.py#L1772'>__repr__</a>()</tt>	A string representation of the location for debugging.
<tt style='background-color:#E8E8E8;'> core.OneOfPosition <a href=' /SeqFeature.py#L1836'>__new__</a>(cls,position,choices)</tt>	Initialize with a set of posssible positions.
<tt style='background-color:#E8E8E8;'> core.OneOfPosition <a href=' /SeqFeature.py#L1850'>position</a>()</tt>	Legacy attribute to get left position as integer obsolete.
<tt style='background-color:#E8E8E8;'> core.OneOfPosition <a href=' /SeqFeature.py#L1855'>extension</a>()</tt>	Legacy attribute to get extension as integer obsolete.
<tt style='background-color:#E8E8E8;'> core.OneOfPosition <a href=' /SeqFeature.py#L1861'>__repr__</a>()</tt>	String representation of the oneofposition location for debugging.
<tt style='background-color:#E8E8E8;'> core.PositionGap <a href=' /SeqFeature.py#L1886'>__init__</a>(gap_size)</tt>	Intialize with a position object containing the gap information.
<tt style='background-color:#E8E8E8;'> core.PositionGap <a href=' /SeqFeature.py#L1890'>__repr__</a>()</tt>	A string representation of the position gap for debugging.
<tt style='background-color:#E8E8E8;'> Affy. <a href=' /Affy/CelFile.py#L88'>read</a>(handle)</tt>	Reads affymetrix cel file and returns record object.
<tt style='background-color:#E8E8E8;'> Affy. <a href=' /Affy/CelFile.py#L136'>read_v4</a>(f)</tt>	Reads affymetrix cel file version 4 and returns a corresponding record object.
<tt style='background-color:#E8E8E8;'> Affy. <a href=' /Affy/CelFile.py#L279'>read_v3</a>(handle)</tt>	Reads affymetrix cel file version 3 and returns a corresponding record object.
<tt style='background-color:#E8E8E8;'> TogoWS. <a href=' /TogoWS/__init__.py#L54'>_get_fields</a>(url)</tt>	Queries a togows url for a plain text list of values private.
<tt style='background-color:#E8E8E8;'> TogoWS. <a href=' /TogoWS/__init__.py#L79'>entry</a>(db,id,format,field)</tt>	Togows fetch entry returns a handle.
<tt style='background-color:#E8E8E8;'> TogoWS. <a href=' /TogoWS/__init__.py#L147'>search_count</a>(db,query)</tt>	Togows search count returns an integer.
<tt style='background-color:#E8E8E8;'> TogoWS. <a href=' /TogoWS/__init__.py#L179'>search_iter</a>(db,query,limit,batch)</tt>	Togows search iteratating over the results generator function.
<tt style='background-color:#E8E8E8;'> TogoWS. <a href=' /TogoWS/__init__.py#L224'>search</a>(db,query,offset,limit)</tt>	Togows search returns a handle.
<tt style='background-color:#E8E8E8;'> TogoWS. <a href=' /TogoWS/__init__.py#L287'>convert</a>(data,in_format,out_format)</tt>	Togows convert returns a handle.
<tt style='background-color:#E8E8E8;'> TogoWS. <a href=' /TogoWS/__init__.py#L316'>_open</a>(url,post)</tt>	Helper function to build the url and open a handle to it private.
<tt style='background-color:#E8E8E8;'> Wise. <a href=' /Wise/psw.py#L84'>parse_line</a>(line)</tt>	Parse a line from psw.
<tt style='background-color:#E8E8E8;'> Wise. <a href=' /Wise/psw.py#L102'>parse</a>(iterable)</tt>	Parse a file.
<tt style='background-color:#E8E8E8;'> Wise. <a href=' /Wise/__init__.py#L26'>_build_align_cmdline</a>(cmdline,pair,output_filename,kbyte)</tt>	Helper function to build a command line string private.
<tt style='background-color:#E8E8E8;'> Wise. <a href=' /Wise/__init__.py#L70'>align</a>(cmdline,pair,kbyte,force_type)</tt>	Run an alignment returns a filehandle.
<tt style='background-color:#E8E8E8;'> Wise. <a href=' /Wise/__init__.py#L119'>all_pairs</a>(singles)</tt>	Generate pairs list for all-against-all alignments.
<tt style='background-color:#E8E8E8;'> UniProt. <a href=' /UniProt/GOA.py#L125'>_gpi10iterator</a>(handle)</tt>	Read gpi 1 0 format files private.
<tt style='background-color:#E8E8E8;'> UniProt. <a href=' /UniProt/GOA.py#L142'>_gpi11iterator</a>(handle)</tt>	Read gpi 1 0 format files private.
<tt style='background-color:#E8E8E8;'> UniProt. <a href=' /UniProt/GOA.py#L161'>gpi_iterator</a>(handle)</tt>	Read gpi format files.
<tt style='background-color:#E8E8E8;'> UniProt. <a href=' /UniProt/GOA.py#L184'>_gpa10iterator</a>(handle)</tt>	Read gpa 1 0 format files private.
<tt style='background-color:#E8E8E8;'> UniProt. <a href=' /UniProt/GOA.py#L204'>_gpa11iterator</a>(handle)</tt>	Read gpa 1 1 format files private.
<tt style='background-color:#E8E8E8;'> UniProt. <a href=' /UniProt/GOA.py#L224'>gpa_iterator</a>(handle)</tt>	Wrapper function read gpa format files.
<tt style='background-color:#E8E8E8;'> UniProt. <a href=' /UniProt/GOA.py#L322'>gafbyproteiniterator</a>(handle)</tt>	Iterates over records in a gene association file.
<tt style='background-color:#E8E8E8;'> UniProt. <a href=' /UniProt/GOA.py#L347'>gafiterator</a>(handle)</tt>	Iterate over a gaf 1 0 or 2 0 file.
<tt style='background-color:#E8E8E8;'> UniProt. <a href=' /UniProt/GOA.py#L399'>writerec</a>(outrec,handle,fields)</tt>	Write a single uniprot-goa record to an output stream.
<tt style='background-color:#E8E8E8;'> UniProt. <a href=' /UniProt/GOA.py#L418'>writebyproteinrec</a>(outprotrec,handle,fields)</tt>	Write a list of gaf records to an output stream.
<tt style='background-color:#E8E8E8;'> UniProt. <a href=' /UniProt/GOA.py#L430'>record_has</a>(inrec,fieldvals)</tt>	Accepts a record and a dictionary of field values.
<tt style='background-color:#E8E8E8;'> motifs. <a href=' /motifs/__init__.py#L92'>read</a>(handle)</tt>	Parses the text output of the meme program into a meme record object.
<tt style='background-color:#E8E8E8;'> motifs. <a href=' /motifs/__init__.py#L519'>write</a>(motifs)</tt>	Write the representation of a motif in transfac format.
<tt style='background-color:#E8E8E8;'> motifs.GenericPositionMatrix <a href=' /motifs/matrix.py#L166'>consensus</a>()</tt>	Returns the consensus sequence.
<tt style='background-color:#E8E8E8;'> motifs.GenericPositionMatrix <a href=' /motifs/matrix.py#L254'>gc_content</a>()</tt>	Compute the fraction gc content.
<tt style='background-color:#E8E8E8;'> motifs.FrequencyPositionMatrix <a href=' /motifs/matrix.py#L279'>normalize</a>(pseudocounts)</tt>	Create and return a position-weight matrix by normalizing the counts matrix.
<tt style='background-color:#E8E8E8;'> motifs.PositionWeightMatrix <a href=' /motifs/matrix.py#L319'>log_odds</a>(background)</tt>	Returns the position-specific scoring matrix.
<tt style='background-color:#E8E8E8;'> motifs.PositionSpecificScoringMatrix <a href=' /motifs/matrix.py#L365'>calculate</a>(sequence)</tt>	Returns the pwm score for a given sequence for all positions.
<tt style='background-color:#E8E8E8;'> motifs.PositionSpecificScoringMatrix <a href=' /motifs/matrix.py#L398'>search</a>(sequence,threshold,both)</tt>	Find hits with pwm score above given threshold.
<tt style='background-color:#E8E8E8;'> motifs.PositionSpecificScoringMatrix <a href=' /motifs/matrix.py#L419'>max</a>()</tt>	Maximal possible score for this motif.
<tt style='background-color:#E8E8E8;'> motifs.PositionSpecificScoringMatrix <a href=' /motifs/matrix.py#L431'>min</a>()</tt>	Minimal possible score for this motif.
<tt style='background-color:#E8E8E8;'> motifs.PositionSpecificScoringMatrix <a href=' /motifs/matrix.py#L447'>mean</a>(background)</tt>	Expected value of the score of a motif.
<tt style='background-color:#E8E8E8;'> motifs.PositionSpecificScoringMatrix <a href=' /motifs/matrix.py#L469'>std</a>(background)</tt>	Standard deviation of the score of a motif.
<tt style='background-color:#E8E8E8;'> motifs.PositionSpecificScoringMatrix <a href=' /motifs/matrix.py#L497'>dist_pearson</a>(other)</tt>	Return the similarity score based on pearson correlation for the given motif against self.
<tt style='background-color:#E8E8E8;'> motifs.PositionSpecificScoringMatrix <a href=' /motifs/matrix.py#L541'>distribution</a>(background,precision)</tt>	Calculate the distribution of the scores at the given precision.
<tt style='background-color:#E8E8E8;'> motifs.ScoreDistribution <a href=' /motifs/thresholds.py#L67'>threshold_fpr</a>(fpr)</tt>	Approximate the log-odds threshold which makes the type i error false positive rate.
<tt style='background-color:#E8E8E8;'> motifs.ScoreDistribution <a href=' /motifs/thresholds.py#L77'>threshold_fnr</a>(fnr)</tt>	Approximate the log-odds threshold which makes the type ii error false negative rate.
<tt style='background-color:#E8E8E8;'> motifs.ScoreDistribution <a href=' /motifs/thresholds.py#L86'>threshold_balanced</a>(rate_proportion,return_rate)</tt>	Approximate log-odds threshold making fnr equal to fpr times rate_proportion.
<tt style='background-color:#E8E8E8;'> motifs.ScoreDistribution <a href=' /motifs/thresholds.py#L100'>threshold_patser</a>()</tt>	Threshold selection mimicking the behaviour of patser hertz stormo 1999 software.
<tt style='background-color:#E8E8E8;'> motifs. <a href=' /motifs/__init__.py#L26'>parse</a>(handle,format)</tt>	Parses an output file of motif finding programs.
<tt style='background-color:#E8E8E8;'> motifs. <a href=' /motifs/__init__.py#L92'>read</a>(handle,format)</tt>	Reads a motif from a handle using a specified file-format.
<tt style='background-color:#E8E8E8;'> motifs.Instances <a href=' /motifs/__init__.py#L196'>search</a>(sequence)</tt>	Find positions of motifs in a given sequence.
<tt style='background-color:#E8E8E8;'> motifs.Motif <a href=' /motifs/__init__.py#L326'>__str__</a>(masked)</tt>	String representation of a motif.
<tt style='background-color:#E8E8E8;'> motifs.Motif <a href=' /motifs/__init__.py#L342'>__len__</a>()</tt>	Return the length of a motif please use this method (i.
<tt style='background-color:#E8E8E8;'> motifs.Motif <a href=' /motifs/__init__.py#L352'>reverse_complement</a>()</tt>	Gives the reverse complement of the motif.
<tt style='background-color:#E8E8E8;'> motifs.Motif <a href=' /motifs/__init__.py#L369'>consensus</a>()</tt>	Returns the consensus sequence.
<tt style='background-color:#E8E8E8;'> motifs.Motif <a href=' /motifs/__init__.py#L374'>anticonsensus</a>()</tt>	Returns the least probable pattern to be generated from this motif.
<tt style='background-color:#E8E8E8;'> motifs.Motif <a href=' /motifs/__init__.py#L379'>degenerate_consensus</a>()</tt>	Generate degenerate consesnsus sequence.
<tt style='background-color:#E8E8E8;'> motifs.Motif <a href=' /motifs/__init__.py#L392'>weblogo</a>(fname,format,version)</tt>	Uses the berkeley weblogo service to download and save a weblogo of itself.
<tt style='background-color:#E8E8E8;'> motifs.Motif <a href=' /motifs/__init__.py#L499'>format</a>(format)</tt>	Returns a string representation of the motif in a given format.
<tt style='background-color:#E8E8E8;'> motifs. <a href=' /motifs/__init__.py#L519'>write</a>(motifs,format)</tt>	Returns a string representation of motifs in a given format.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.JASPAR5 <a href=' /motifs/jaspar/db.py#L94'>__init__</a>(host,name,user,password)</tt>	Construct a jaspar5 instance and connect to specified db.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.JASPAR5 <a href=' /motifs/jaspar/db.py#L112'>__str__</a>()</tt>	Return a string represention of the jaspar5 db connection.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.JASPAR5 <a href=' /motifs/jaspar/db.py#L116'>fetch_motif_by_id</a>(id)</tt>	Fetch a single jaspar motif from the db by it's jaspar matrix id example id 'ma0001.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.JASPAR5 <a href=' /motifs/jaspar/db.py#L156'>fetch_motifs_by_name</a>(name)</tt>	Fetch a list of jaspar motifs from a jaspar db by the given tf name s.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.JASPAR5 <a href=' /motifs/jaspar/db.py#L178'>fetch_motifs</a>(collection,tf_name,tf_class,tf_family)</tt>	Fetch jaspar record list of motifs using selection criteria.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.JASPAR5 <a href=' /motifs/jaspar/db.py#L295'>_fetch_latest_version</a>(base_id)</tt>	Get the latest version number for the given base_id.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.JASPAR5 <a href=' /motifs/jaspar/db.py#L314'>_fetch_internal_id</a>(base_id,version)</tt>	Fetch the internal id for a base id + version.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.JASPAR5 <a href=' /motifs/jaspar/db.py#L424'>_fetch_counts_matrix</a>(int_id)</tt>	Fetch the counts matrix from the jaspar db by the internal id returns a bio.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.JASPAR5 <a href=' /motifs/jaspar/db.py#L446'>_fetch_internal_id_list</a>(collection,tf_name,tf_class,tf_family)</tt>	Fetch list of internal jaspar motif ids.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.JASPAR5 <a href=' /motifs/jaspar/db.py#L737'>_is_latest_version</a>(int_id)</tt>	Check if the internal id represents the latest jaspar matrix.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.Motif <a href=' /motifs/jaspar/__init__.py#L26'>__init__</a>(matrix_id,name,alphabet,instances)</tt>	Construct a jaspar motif instance.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.Motif <a href=' /motifs/jaspar/__init__.py#L48'>base_id</a>()</tt>	Return the jaspar base matrix id.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.Motif <a href=' /motifs/jaspar/__init__.py#L54'>version</a>()</tt>	Return the jaspar matrix version.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.Motif <a href=' /motifs/jaspar/__init__.py#L60'>__str__</a>()</tt>	Return a string represention of the jaspar profile.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.Motif <a href=' /motifs/jaspar/__init__.py#L102'>__hash__</a>()</tt>	Return the hash key corresponding to the jaspar profile.
<tt style='background-color:#E8E8E8;'> motifs.jaspar.Record <a href=' /motifs/jaspar/__init__.py#L127'>to_dict</a>()</tt>	Return the list of matrices as a dictionary of matrices.
<tt style='background-color:#E8E8E8;'> motifs.jaspar. <a href=' /motifs/jaspar/__init__.py#L135'>read</a>(handle,format)</tt>	Read motif s from a file in one of several different jaspar formats.
<tt style='background-color:#E8E8E8;'> motifs.jaspar. <a href=' /motifs/jaspar/__init__.py#L155'>write</a>(motifs,format)</tt>	Return the representation of motifs in "pfm" or "jaspar" format.
<tt style='background-color:#E8E8E8;'> motifs.jaspar. <a href=' /motifs/jaspar/__init__.py#L188'>_read_pfm</a>(handle)</tt>	Read the motif from a jaspar pfm file private.
<tt style='background-color:#E8E8E8;'> motifs.jaspar. <a href=' /motifs/jaspar/__init__.py#L209'>_read_sites</a>(handle)</tt>	Read the motif from jaspar sites file private.
<tt style='background-color:#E8E8E8;'> motifs.jaspar. <a href=' /motifs/jaspar/__init__.py#L238'>_read_jaspar</a>(handle)</tt>	Read motifs from a jaspar formatted file private.
<tt style='background-color:#E8E8E8;'> motifs.jaspar. <a href=' /motifs/jaspar/__init__.py#L342'>split_jaspar_id</a>(id)</tt>	Utility function to split a jaspar matrix id into its component.
<tt style='background-color:#E8E8E8;'> NMR. <a href=' /NMR/NOEtools.py#L16'>predictNOE</a>(peaklist,originNuc,detectedNuc,originResNum)</tt>	Predict the i->j noe position based on self peak diagonal assignments parameters.
<tt style='background-color:#E8E8E8;'> NMR.Peaklist <a href=' /NMR/xpktools.py#L114'>residue_dict</a>(index)</tt>	Return a dict of lines in \data\ indexed by residue number or a nucleus.
<tt style='background-color:#E8E8E8;'> NMR.Peaklist <a href=' /NMR/xpktools.py#L176'>write_header</a>(outfn)</tt>	Write header lines from input file to handle outfn.
<tt style='background-color:#E8E8E8;'> NMR. <a href=' /NMR/xpktools.py#L193'>replace_entry</a>(line,fieldn,newentry)</tt>	Helper function replace an entry in a string by the field number.
<tt style='background-color:#E8E8E8;'> NMR. <a href=' /NMR/xpktools.py#L208'>_find_start_entry</a>(line,n)</tt>	Find the starting character for entry n in a space delimited line private.
<tt style='background-color:#E8E8E8;'> NMR. <a href=' /NMR/xpktools.py#L254'>data_table</a>(fn_list,datalabel,keyatom)</tt>	Generate a data table from a list of input xpk files.
<tt style='background-color:#E8E8E8;'> NMR. <a href=' /NMR/xpktools.py#L305'>_read_dicts</a>(fn_list,keyatom)</tt>	Read multiple files into a list of residue dictionaries private.
<tt style='background-color:#E8E8E8;'> GenBank.InsdcScanner <a href=' /GenBank/Scanner.py#L73'>find_start</a>()</tt>	Read in lines until find the id/locus line which is returned.
<tt style='background-color:#E8E8E8;'> GenBank.InsdcScanner <a href=' /GenBank/Scanner.py#L107'>parse_header</a>()</tt>	Return list of strings making up the header new line characters are removed.
<tt style='background-color:#E8E8E8;'> GenBank.InsdcScanner <a href=' /GenBank/Scanner.py#L140'>parse_features</a>(skip)</tt>	Return list of tuples for the features if present each feature is returned as a tuple key location qualifiers.
<tt style='background-color:#E8E8E8;'> GenBank.InsdcScanner <a href=' /GenBank/Scanner.py#L215'>parse_feature</a>(feature_key,lines)</tt>	Expects a feature as a list of strings returns a tuple key location qualifiers for example given this genbank feature :.
<tt style='background-color:#E8E8E8;'> GenBank.InsdcScanner <a href=' /GenBank/Scanner.py#L337'>parse_footer</a>()</tt>	Returns a tuple containing a list of any misc strings and the sequence.
<tt style='background-color:#E8E8E8;'> GenBank.InsdcScanner <a href=' /GenBank/Scanner.py#L360'>_feed_first_line</a>(consumer,line)</tt>	Handle the locus/id line passing data to the comsumer this should be implemented by the embl / genbank specific subclass.
<tt style='background-color:#E8E8E8;'> GenBank.InsdcScanner <a href=' /GenBank/Scanner.py#L369'>_feed_header_lines</a>(consumer,lines)</tt>	Handle the header lines list of strings passing data to the comsumer this should be implemented by the embl / genbank specific subclass.
<tt style='background-color:#E8E8E8;'> GenBank.InsdcScanner <a href=' /GenBank/Scanner.py#L378'>_feed_feature_table</a>(consumer,feature_tuples)</tt>	Handle the feature table list of tuples passing data to the comsumer used by the parse_records() and parse() methods.
<tt style='background-color:#E8E8E8;'> GenBank.InsdcScanner <a href=' /GenBank/Scanner.py#L394'>_feed_misc_lines</a>(consumer,lines)</tt>	Handle any lines between features and sequence list of strings passing data to the consumer this should be implemented by the embl / genbank specific subclass.
<tt style='background-color:#E8E8E8;'> GenBank.InsdcScanner <a href=' /GenBank/Scanner.py#L403'>feed</a>(handle,consumer,do_features)</tt>	Feed a set of data into the consumer.
<tt style='background-color:#E8E8E8;'> GenBank.InsdcScanner <a href=' /GenBank/Scanner.py#L455'>parse</a>(handle,do_features)</tt>	Returns a seqrecord (with seqfeatures if do_features=true) see also the method parse_records() for use on multi-record files.
<tt style='background-color:#E8E8E8;'> GenBank.InsdcScanner <a href=' /GenBank/Scanner.py#L471'>parse_records</a>(handle,do_features)</tt>	Returns a seqrecord object iterator each record (from the id/locus line to the // line) becomes a seqrecord.
<tt style='background-color:#E8E8E8;'> GenBank.InsdcScanner <a href=' /GenBank/Scanner.py#L493'>parse_cds_features</a>(handle,alphabet,tags2id)</tt>	Returns seqrecord object iterator each cds feature becomes a seqrecord.
<tt style='background-color:#E8E8E8;'> GenBank.EmblScanner <a href=' /GenBank/Scanner.py#L589'>parse_footer</a>()</tt>	Returns a tuple containing a list of any misc strings and the sequence.
<tt style='background-color:#E8E8E8;'> GenBank._ImgtScanner <a href=' /GenBank/Scanner.py#L994'>parse_features</a>(skip)</tt>	Return list of tuples for the features if present each feature is returned as a tuple key location qualifiers.
<tt style='background-color:#E8E8E8;'> GenBank.GenBankScanner <a href=' /GenBank/Scanner.py#L1093'>parse_footer</a>()</tt>	Returns a tuple containing a list of any misc strings and the sequence.
<tt style='background-color:#E8E8E8;'> GenBank.GenBankScanner <a href=' /GenBank/Scanner.py#L1146'>_feed_first_line</a>(consumer,line)</tt>	Scan over and parse genbank locus line private.
<tt style='background-color:#E8E8E8;'> GenBank. <a href=' /GenBank/__init__.py#L156'>_pos</a>(pos_str,offset)</tt>	Build a position object private.
<tt style='background-color:#E8E8E8;'> GenBank. <a href=' /GenBank/__init__.py#L243'>_loc</a>(loc_str,expected_seq_length,strand)</tt>	Featurelocation from non-compound non-complement location private.
<tt style='background-color:#E8E8E8;'> GenBank. <a href=' /GenBank/__init__.py#L315'>_split_compound_loc</a>(compound_loc)</tt>	Split a tricky compound location string private.
<tt style='background-color:#E8E8E8;'> GenBank.Iterator <a href=' /GenBank/__init__.py#L384'>__init__</a>(handle,parser)</tt>	Initialize the iterator.
<tt style='background-color:#E8E8E8;'> GenBank.Iterator <a href=' /GenBank/__init__.py#L396'>__next__</a>()</tt>	Return the next genbank record from the handle.
<tt style='background-color:#E8E8E8;'> GenBank.FeatureParser <a href=' /GenBank/__init__.py#L445'>__init__</a>(debug_level,use_fuzziness,feature_cleaner)</tt>	Initialize a genbank parser and feature consumer.
<tt style='background-color:#E8E8E8;'> GenBank.FeatureParser <a href=' /GenBank/__init__.py#L466'>parse</a>(handle)</tt>	Parse the specified handle.
<tt style='background-color:#E8E8E8;'> GenBank.RecordParser <a href=' /GenBank/__init__.py#L484'>__init__</a>(debug_level)</tt>	Initialize the parser.
<tt style='background-color:#E8E8E8;'> GenBank.RecordParser <a href=' /GenBank/__init__.py#L496'>parse</a>(handle)</tt>	Parse the specified handle into a genbank record.
<tt style='background-color:#E8E8E8;'> GenBank._BaseGenBankConsumer <a href=' /GenBank/__init__.py#L526'>_split_keywords</a>(keyword_string)</tt>	Split a string of keywords into a nice clean list.
<tt style='background-color:#E8E8E8;'> GenBank._BaseGenBankConsumer <a href=' /GenBank/__init__.py#L541'>_split_accessions</a>(accession_string)</tt>	Split a string of accession numbers into a list.
<tt style='background-color:#E8E8E8;'> GenBank._BaseGenBankConsumer <a href=' /GenBank/__init__.py#L551'>_split_taxonomy</a>(taxonomy_string)</tt>	Split a string with taxonomy info into a list.
<tt style='background-color:#E8E8E8;'> GenBank._BaseGenBankConsumer <a href=' /GenBank/__init__.py#L574'>_clean_location</a>(location_string)</tt>	Clean whitespace out of a location string.
<tt style='background-color:#E8E8E8;'> GenBank._BaseGenBankConsumer <a href=' /GenBank/__init__.py#L586'>_remove_newlines</a>(text)</tt>	Remove any newlines in the passed text returning the new string.
<tt style='background-color:#E8E8E8;'> GenBank._BaseGenBankConsumer <a href=' /GenBank/__init__.py#L597'>_normalize_spaces</a>(text)</tt>	Replace multiple spaces in the passed text with single spaces.
<tt style='background-color:#E8E8E8;'> GenBank._BaseGenBankConsumer <a href=' /GenBank/__init__.py#L604'>_remove_spaces</a>(text)</tt>	Remove all spaces from the passed text.
<tt style='background-color:#E8E8E8;'> GenBank._BaseGenBankConsumer <a href=' /GenBank/__init__.py#L610'>_convert_to_python_numbers</a>(start,end)</tt>	Convert a start and end range to python notation.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L656'>locus</a>(locus_name)</tt>	Set the locus name is set as the name of the sequence.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L661'>size</a>(content)</tt>	Record the sequence length.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L665'>residue_type</a>(type)</tt>	Record the sequence type semi-obsolete.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L674'>topology</a>(topology)</tt>	Record the topology linear or circular as strings.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L681'>molecule_type</a>(mol_type)</tt>	Record the molecule type for round-trip etc.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L694'>definition</a>(definition)</tt>	Set the definition as the description of the sequence.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L704'>accession</a>(acc_num)</tt>	Set the accession number as the id of the sequence.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L754'>project</a>(content)</tt>	Handle the information from the project line as a list of projects.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L773'>dblink</a>(content)</tt>	Store dblink cross references as dbxrefs in our record object.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L806'>version_suffix</a>(version)</tt>	Set the version to overwrite the id.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L857'>taxonomy</a>(content)</tt>	Records another line of the taxonomy lineage.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L866'>reference_num</a>(content)</tt>	Signal the beginning of a new reference object.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L878'>reference_bases</a>(content)</tt>	Attempt to determine the sequence region the reference entails.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L918'>_split_reference_locations</a>(location_string)</tt>	Get reference locations out of a string of reference information the passed string should be of the form :.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L976'>remark</a>(content)</tt>	Deal with a reference comment.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L992'>features_line</a>(content)</tt>	Get ready for the feature table when we reach the feature line.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L997'>start_feature_table</a>()</tt>	Indicate we've got to the start of the feature table.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L1011'>location</a>(content)</tt>	Parse out location information from the location string.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L1155'>feature_qualifier</a>(key,value)</tt>	When we get a qualifier key and its value.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L1180'>feature_qualifier_name</a>(content_list)</tt>	Use feature_qualifier instead obsolete.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L1184'>feature_qualifier_description</a>(content)</tt>	Use feature_qualifier instead obsolete.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L1188'>contig_location</a>(content)</tt>	Deal with contig information.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L1216'>sequence</a>(content)</tt>	Add up sequence information as we get it.
<tt style='background-color:#E8E8E8;'> GenBank._FeatureConsumer <a href=' /GenBank/__init__.py#L1226'>record_end</a>(content)</tt>	Clean up when we've finished the record.
<tt style='background-color:#E8E8E8;'> GenBank._RecordConsumer <a href=' /GenBank/__init__.py#L1376'>reference_num</a>(content)</tt>	Grab the reference number and signal the start of a new reference.
<tt style='background-color:#E8E8E8;'> GenBank._RecordConsumer <a href=' /GenBank/__init__.py#L1423'>primary_ref_line</a>(content)</tt>	Data for the primary line.
<tt style='background-color:#E8E8E8;'> GenBank._RecordConsumer <a href=' /GenBank/__init__.py#L1430'>features_line</a>(content)</tt>	Get ready for the feature table when we reach the feature line.
<tt style='background-color:#E8E8E8;'> GenBank._RecordConsumer <a href=' /GenBank/__init__.py#L1435'>start_feature_table</a>()</tt>	Signal the start of the feature table.
<tt style='background-color:#E8E8E8;'> GenBank._RecordConsumer <a href=' /GenBank/__init__.py#L1442'>feature_key</a>(content)</tt>	Grab the key of the feature and signal the start of a new feature.
<tt style='background-color:#E8E8E8;'> GenBank._RecordConsumer <a href=' /GenBank/__init__.py#L1452'>_add_feature</a>()</tt>	Utility function to add a feature to the record.
<tt style='background-color:#E8E8E8;'> GenBank._RecordConsumer <a href=' /GenBank/__init__.py#L1476'>feature_qualifier_name</a>(content_list)</tt>	Deal with qualifier names.
<tt style='background-color:#E8E8E8;'> GenBank._RecordConsumer <a href=' /GenBank/__init__.py#L1513'>contig_location</a>(content)</tt>	Signal that we have contig information to add to the record.
<tt style='background-color:#E8E8E8;'> GenBank._RecordConsumer <a href=' /GenBank/__init__.py#L1518'>sequence</a>(content)</tt>	Add sequence information to a list of sequence strings.
<tt style='background-color:#E8E8E8;'> GenBank._RecordConsumer <a href=' /GenBank/__init__.py#L1529'>record_end</a>(content)</tt>	Signal the end of the record and do any necessary clean-up.
<tt style='background-color:#E8E8E8;'> GenBank. <a href=' /GenBank/__init__.py#L1539'>parse</a>(handle)</tt>	Iterate over genbank formatted entries as record objects.
<tt style='background-color:#E8E8E8;'> GenBank. <a href=' /GenBank/__init__.py#L1554'>read</a>(handle)</tt>	Read a handle containing a single genbank entry as a record object.
<tt style='background-color:#E8E8E8;'> GenBank.FeatureValueCleaner <a href=' /GenBank/utils.py#L33'>__init__</a>(to_process)</tt>	Initialize with the keys we should deal with.
<tt style='background-color:#E8E8E8;'> GenBank.FeatureValueCleaner <a href=' /GenBank/utils.py#L38'>clean_value</a>(key_name,value)</tt>	Clean the specified value and return it.
<tt style='background-color:#E8E8E8;'> GenBank.FeatureValueCleaner <a href=' /GenBank/utils.py#L53'>_clean_translation</a>(value)</tt>	Concatenate a translation value to one long protein string.
<tt style='background-color:#E8E8E8;'> GenBank. <a href=' /GenBank/Record.py#L21'>_wrapped_genbank</a>(information,indent,wrap_space,split_char)</tt>	Write a line of genbank info that can wrap over multiple lines.
<tt style='background-color:#E8E8E8;'> GenBank. <a href=' /GenBank/Record.py#L84'>_indent_genbank</a>(information,indent)</tt>	Write out information with the specified indent.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L198'>__str__</a>()</tt>	Provide a genbank formatted output option for a record.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L239'>_locus_line</a>()</tt>	Provide the output string for the locus line.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L272'>_definition_line</a>()</tt>	Provide output for the definition line.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L279'>_accession_line</a>()</tt>	Output for the accession line.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L296'>_version_line</a>()</tt>	Output for the version line.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L323'>_nid_line</a>()</tt>	Output for the nid line use of nid is obsolete in genbank files.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L333'>_pid_line</a>()</tt>	Output for pid line presumedly pid usage is also obsolete.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L343'>_keywords_line</a>()</tt>	Output for the keywords line.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L361'>_db_source_line</a>()</tt>	Output for dbsource line.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L371'>_segment_line</a>()</tt>	Output for the segment line.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L380'>_source_line</a>()</tt>	Output for source line on where the sample came from.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L387'>_organism_line</a>()</tt>	Output for organism line with taxonomy info.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L404'>_comment_line</a>()</tt>	Output for the comment lines.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L414'>_features_line</a>()</tt>	Output for the features line.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L423'>_base_count_line</a>()</tt>	Output for the base count line with base information.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L449'>_origin_line</a>()</tt>	Output for the origin line.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L463'>_sequence_line</a>()</tt>	Output for all of the sequence.
<tt style='background-color:#E8E8E8;'> GenBank.Record <a href=' /GenBank/Record.py#L500'>_contig_line</a>()</tt>	Output for contig location information from refseq.
<tt style='background-color:#E8E8E8;'> GenBank.Reference <a href=' /GenBank/Record.py#L549'>_reference_line</a>()</tt>	Output for reference lines.
<tt style='background-color:#E8E8E8;'> GenBank.Reference <a href=' /GenBank/Record.py#L563'>_authors_line</a>()</tt>	Output for authors information.
<tt style='background-color:#E8E8E8;'> GenBank.Reference <a href=' /GenBank/Record.py#L572'>_consrtm_line</a>()</tt>	Output for consrtm information.
<tt style='background-color:#E8E8E8;'> GenBank.Reference <a href=' /GenBank/Record.py#L581'>_title_line</a>()</tt>	Output for title information.
<tt style='background-color:#E8E8E8;'> GenBank.Reference <a href=' /GenBank/Record.py#L590'>_journal_line</a>()</tt>	Output for journal information.
<tt style='background-color:#E8E8E8;'> GenBank.Reference <a href=' /GenBank/Record.py#L599'>_medline_line</a>()</tt>	Output for medline information.
<tt style='background-color:#E8E8E8;'> GenBank.Reference <a href=' /GenBank/Record.py#L608'>_pubmed_line</a>()</tt>	Output for pubmed information.
<tt style='background-color:#E8E8E8;'> GenBank.Reference <a href=' /GenBank/Record.py#L617'>_remark_line</a>()</tt>	Output for remark information.
<tt style='background-color:#E8E8E8;'> Cluster.Record <a href=' /Cluster/__init__.py#L159'>__init__</a>(handle)</tt>	Read gene expression data from the file handle and return a record.
<tt style='background-color:#E8E8E8;'> Cluster.Record <a href=' /Cluster/__init__.py#L245'>treecluster</a>(transpose,method,dist)</tt>	Apply hierarchical clustering and return a tree object.
<tt style='background-color:#E8E8E8;'> Cluster.Record <a href=' /Cluster/__init__.py#L281'>kcluster</a>(nclusters,transpose,npass,method)</tt>	Apply k-means or k-median clustering.
<tt style='background-color:#E8E8E8;'> Cluster.Record <a href=' /Cluster/__init__.py#L334'>somcluster</a>(transpose,nxgrid,nygrid,inittau)</tt>	Calculate a self-organizing map on a rectangular grid.
<tt style='background-color:#E8E8E8;'> Cluster.Record <a href=' /Cluster/__init__.py#L379'>clustercentroids</a>(clusterid,method,transpose)</tt>	Calculate the cluster centroids and return a tuple cdata cmask.
<tt style='background-color:#E8E8E8;'> Cluster.Record <a href=' /Cluster/__init__.py#L409'>clusterdistance</a>(index1,index2,method,dist)</tt>	Calculate the distance between two clusters.
<tt style='background-color:#E8E8E8;'> Cluster.Record <a href=' /Cluster/__init__.py#L455'>distancematrix</a>(transpose,dist)</tt>	Calculate the distance matrix and return it as a list of arrays.
<tt style='background-color:#E8E8E8;'> Cluster.Record <a href=' /Cluster/__init__.py#L498'>save</a>(jobname,geneclusters,expclusters)</tt>	Save the clustering results.
<tt style='background-color:#E8E8E8;'> Cluster. <a href=' /Cluster/__init__.py#L648'>read</a>(handle)</tt>	Read gene expression data from the file handle and return a record.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/AbiIO.py#L333'>AbiIterator</a>(handle,alphabet,trim)</tt>	Iterator for the abi file format.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/AbiIO.py#L437'>_AbiTrimIterator</a>(handle)</tt>	Iterator for the abi file format that yields trimmed seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/AbiIO.py#L442'>_abi_parse_header</a>(header,handle)</tt>	Generator that returns directory contents.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/AbiIO.py#L482'>_abi_trim</a>(seq_record)</tt>	Trims the sequence using richard mott's modified trimming algorithm.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/AbiIO.py#L531'>_parse_tag_data</a>(elem_code,elem_num,raw_data)</tt>	Returns single data value.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/FastaIO.py#L23'>SimpleFastaParser</a>(handle)</tt>	Generator function to iterate over fasta records as string tuples.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/FastaIO.py#L76'>FastaIterator</a>(handle,alphabet,title2ids)</tt>	Generator function to iterate over fasta records as seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO.FastaWriter <a href=' /SeqIO/FastaIO.py#L136'>__init__</a>(handle,wrap,record2title)</tt>	Create a fasta writer.
<tt style='background-color:#E8E8E8;'> SeqIO.FastaWriter <a href=' /SeqIO/FastaIO.py#L180'>write_record</a>(record)</tt>	Write a single fasta record to the file.
<tt style='background-color:#E8E8E8;'> SeqIO.SffRandomAccess <a href=' /SeqIO/_index.py#L83'>__iter__</a>()</tt>	Load any index block in the file or build it the slow way private.
<tt style='background-color:#E8E8E8;'> SeqIO.SffRandomAccess <a href=' /SeqIO/_index.py#L144'>get_raw</a>(offset)</tt>	Return the raw record from the file as a bytes string.
<tt style='background-color:#E8E8E8;'> SeqIO.SequentialSeqFileRandomAccess <a href=' /SeqIO/_index.py#L185'>__iter__</a>()</tt>	Returns id offset length tuples.
<tt style='background-color:#E8E8E8;'> SeqIO.SequentialSeqFileRandomAccess <a href=' /SeqIO/_index.py#L215'>get_raw</a>(offset)</tt>	Return the raw record from the file as a bytes string.
<tt style='background-color:#E8E8E8;'> SeqIO.UniprotRandomAccess <a href=' /SeqIO/_index.py#L418'>get_raw</a>(offset)</tt>	Return the raw record from the file as a bytes string.
<tt style='background-color:#E8E8E8;'> SeqIO.IntelliGeneticsRandomAccess <a href=' /SeqIO/_index.py#L486'>get_raw</a>(offset)</tt>	Return the raw record from the file as a bytes string.
<tt style='background-color:#E8E8E8;'> SeqIO.TabRandomAccess <a href=' /SeqIO/_index.py#L524'>get_raw</a>(offset)</tt>	Return the raw record from the file as a bytes string.
<tt style='background-color:#E8E8E8;'> SeqIO.FastqRandomAccess <a href=' /SeqIO/_index.py#L594'>get_raw</a>(offset)</tt>	Return the raw record from the file as a bytes string.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/IgIO.py#L22'>IgIterator</a>(handle,alphabet)</tt>	Iterate over intelligenetics records as seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/AceIO.py#L22'>AceIterator</a>(handle)</tt>	Returns seqrecord objects from an ace file.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/PhdIO.py#L63'>PhdIterator</a>(handle)</tt>	Returns seqrecord objects from a phd file.
<tt style='background-color:#E8E8E8;'> SeqIO.PhdWriter <a href=' /SeqIO/PhdIO.py#L101'>write_record</a>(record)</tt>	Write a single phd record to the file.
<tt style='background-color:#E8E8E8;'> SeqIO.XMLRecordIterator <a href=' /SeqIO/SeqXmlIO.py#L44'>__init__</a>(handle,recordTag,namespace)</tt>	Creating the object and initializing the xml parser.
<tt style='background-color:#E8E8E8;'> SeqIO.XMLRecordIterator <a href=' /SeqIO/SeqXmlIO.py#L54'>__iter__</a>()</tt>	Iterate over the records in the xml file.
<tt style='background-color:#E8E8E8;'> SeqIO.XMLRecordIterator <a href=' /SeqIO/SeqXmlIO.py#L96'>_attributes</a>(node)</tt>	Return the attributes of a dom node as dictionary.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlIterator <a href=' /SeqIO/SeqXmlIO.py#L108'>__init__</a>(handle)</tt>	Create the object.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlIterator <a href=' /SeqIO/SeqXmlIO.py#L118'>_attr_seqXML</a>(attr_dict,record)</tt>	Parse the document metadata.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlIterator <a href=' /SeqIO/SeqXmlIO.py#L131'>_attr_property</a>(attr_dict,record)</tt>	Parse key value pair properties and store them as annotations.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlIterator <a href=' /SeqIO/SeqXmlIO.py#L146'>_attr_species</a>(attr_dict,record)</tt>	Parse the species information.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlIterator <a href=' /SeqIO/SeqXmlIO.py#L156'>_attr_entry</a>(attr_dict,record)</tt>	New entry set id and the optional entry source.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlIterator <a href=' /SeqIO/SeqXmlIO.py#L174'>_elem_DNAseq</a>(node,record)</tt>	Parse dna sequence.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlIterator <a href=' /SeqIO/SeqXmlIO.py#L181'>_elem_RNAseq</a>(node,record)</tt>	Parse rna sequence.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlIterator <a href=' /SeqIO/SeqXmlIO.py#L188'>_elem_AAseq</a>(node,record)</tt>	Parse protein sequence.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlIterator <a href=' /SeqIO/SeqXmlIO.py#L195'>_elem_description</a>(node,record)</tt>	Parse the description.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlIterator <a href=' /SeqIO/SeqXmlIO.py#L200'>_attr_DBRef</a>(attr_dict,record)</tt>	Parse a database cross reference.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlWriter <a href=' /SeqIO/SeqXmlIO.py#L218'>__init__</a>(handle,source,source_version,species)</tt>	Create object and start the xml generator.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlWriter <a href=' /SeqIO/SeqXmlIO.py#L230'>write_header</a>()</tt>	Write root node with document metadata.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlWriter <a href=' /SeqIO/SeqXmlIO.py#L253'>write_record</a>(record)</tt>	Write one record.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlWriter <a href=' /SeqIO/SeqXmlIO.py#L276'>write_footer</a>()</tt>	Close the root node and finish the xml document.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlWriter <a href=' /SeqIO/SeqXmlIO.py#L283'>_write_species</a>(record)</tt>	Write the species if given.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlWriter <a href=' /SeqIO/SeqXmlIO.py#L315'>_write_description</a>(record)</tt>	Write the description if given.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlWriter <a href=' /SeqIO/SeqXmlIO.py#L332'>_write_seq</a>(record)</tt>	Write the sequence.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlWriter <a href=' /SeqIO/SeqXmlIO.py#L361'>_write_dbxrefs</a>(record)</tt>	Write all database cross references.
<tt style='background-color:#E8E8E8;'> SeqIO.SeqXmlWriter <a href=' /SeqIO/SeqXmlIO.py#L378'>_write_properties</a>(record)</tt>	Write all annotations that are key value pairs with values of a primitive type or list of primitive types.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/TabIO.py#L42'>TabIterator</a>(handle,alphabet)</tt>	Iterates over tab separated lines as seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO.TabWriter <a href=' /SeqIO/TabIO.py#L98'>write_record</a>(record)</tt>	Write a single tab line to the file.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L32'>_genbank_convert_fasta</a>(in_handle,out_handle,alphabet)</tt>	Fast genbank to fasta private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L41'>_embl_convert_fasta</a>(in_handle,out_handle,alphabet)</tt>	Fast embl to fasta private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L50'>_fastq_generic</a>(in_handle,out_handle,mapping)</tt>	Fastq helper function where can't have data loss by truncation private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L66'>_fastq_generic2</a>(in_handle,out_handle,mapping,truncate_char)</tt>	Fastq helper function where there could be data loss by truncation private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L86'>_fastq_sanger_convert_fastq_sanger</a>(in_handle,out_handle,alphabet)</tt>	Fast sanger fastq to sanger fastq conversion private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L103'>_fastq_solexa_convert_fastq_solexa</a>(in_handle,out_handle,alphabet)</tt>	Fast solexa fastq to solexa fastq conversion private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L119'>_fastq_illumina_convert_fastq_illumina</a>(in_handle,out_handle,alphabet)</tt>	Fast illumina 1 3+ fastq to illumina 1 3+ fastq conversion private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L135'>_fastq_illumina_convert_fastq_sanger</a>(in_handle,out_handle,alphabet)</tt>	Fast illumina 1 3+ fastq to sanger fastq conversion private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L149'>_fastq_sanger_convert_fastq_illumina</a>(in_handle,out_handle,alphabet)</tt>	Fast sanger fastq to illumina 1 3+ fastq conversion private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L167'>_fastq_solexa_convert_fastq_sanger</a>(in_handle,out_handle,alphabet)</tt>	Fast solexa fastq to sanger fastq conversion private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L183'>_fastq_sanger_convert_fastq_solexa</a>(in_handle,out_handle,alphabet)</tt>	Fast sanger fastq to solexa fastq conversion private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L203'>_fastq_solexa_convert_fastq_illumina</a>(in_handle,out_handle,alphabet)</tt>	Fast solexa fastq to illumina 1 3+ fastq conversion private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L219'>_fastq_illumina_convert_fastq_solexa</a>(in_handle,out_handle,alphabet)</tt>	Fast illumina 1 3+ fastq to solexa fastq conversion private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L235'>_fastq_convert_fasta</a>(in_handle,out_handle,alphabet)</tt>	Fast fastq to fasta conversion private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L256'>_fastq_convert_tab</a>(in_handle,out_handle,alphabet)</tt>	Fast fastq to simple tabbed conversion private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L274'>_fastq_convert_qual</a>(in_handle,out_handle,mapping)</tt>	Fastq helper function for qual output private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L309'>_fastq_sanger_convert_qual</a>(in_handle,out_handle,alphabet)</tt>	Fast sanger fastq to qual conversion private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L315'>_fastq_solexa_convert_qual</a>(in_handle,out_handle,alphabet)</tt>	Fast solexa fastq to qual conversion private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L323'>_fastq_illumina_convert_qual</a>(in_handle,out_handle,alphabet)</tt>	Fast illumina 1 3+ fastq to qual conversion private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/_convert.py#L365'>_handle_convert</a>(in_handle,in_format,out_handle,out_format)</tt>	Seqio conversion function private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L256'>_check_mode</a>(handle)</tt>	Ensure handle not opened in text mode.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L280'>_sff_file_header</a>(handle)</tt>	Read in an sff file header private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L362'>_sff_do_slow_index</a>(handle)</tt>	Generates an index by scanning though all the reads in an sff file private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L433'>_sff_find_roche_index</a>(handle)</tt>	Locate any existing roche style xml meta data and read index private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L505'>ReadRocheXmlManifest</a>(handle)</tt>	Reads any roche style xml manifest data in the sff "index".
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L534'>_sff_read_roche_index</a>(handle)</tt>	Reads any existing roche style read index provided in the sff file private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L585'>_sff_read_seq_record</a>(handle,number_of_flows_per_read,flow_chars,key_sequence)</tt>	Parse the next read in the file return data as a seqrecord private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L708'>_string_as_base_36</a>(string)</tt>	Interpret a string as a base-36 number as per 454 manual.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L728'>_get_read_xy</a>(read_name)</tt>	Extract coordinates from last 5 characters of read name.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L741'>_get_read_time</a>(read_name)</tt>	Extract time from first 6 characters of read name.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L753'>_get_read_region</a>(read_name)</tt>	Extract region from read name.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L758'>_sff_read_raw_record</a>(handle,number_of_flows_per_read)</tt>	Extract the next read in the file as a raw bytes string private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L831'>SffIterator</a>(handle,alphabet,trim)</tt>	Iterate over standard flowgram format sff reads as seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L951'>_check_eof</a>(handle,index_offset,index_length)</tt>	Check final padding is ok 8 byte alignment and file ends private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SffIO.py#L1018'>_SffTrimIterator</a>(handle,alphabet)</tt>	Iterate over sff reads as seqrecord objects with trimming private.
<tt style='background-color:#E8E8E8;'> SeqIO.SffWriter <a href=' /SeqIO/SffIO.py#L1026'>__init__</a>(handle,index,xml)</tt>	Creates the writer object.
<tt style='background-color:#E8E8E8;'> SeqIO.SffWriter <a href=' /SeqIO/SffIO.py#L1042'>write_file</a>(records)</tt>	Use this to write an entire file containing the given records.
<tt style='background-color:#E8E8E8;'> SeqIO.SffWriter <a href=' /SeqIO/SffIO.py#L1204'>write_record</a>(record)</tt>	Write a single additional record to the output file.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SwissIO.py#L27'>_make_position</a>(location_string,offset)</tt>	Turn a swiss location position into a seqfeature position object private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SwissIO.py#L57'>_make_seqfeature</a>(name,from_res,to_res,description)</tt>	Construct seqfeature from feature data from parser private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/SwissIO.py#L67'>SwissIterator</a>(handle)</tt>	Breaks up a swiss-prot/uniprot file into seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/QualityIO.py#L381'>solexa_quality_from_phred</a>(phred_quality)</tt>	Covert a phred quality range 0 to about 90 to a solexa quality.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/QualityIO.py#L474'>phred_quality_from_solexa</a>(solexa_quality)</tt>	Convert a solexa quality which can be negative to a phred quality.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/QualityIO.py#L521'>_get_phred_quality</a>(record)</tt>	Extract phred qualities from a seqrecord's letter_annotations private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/QualityIO.py#L550'>_get_sanger_quality_str</a>(record)</tt>	Returns a sanger fastq encoded quality string private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/QualityIO.py#L670'>_get_illumina_quality_str</a>(record)</tt>	Returns an illumina 1 3 to 1 7 fastq encoded quality string private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/QualityIO.py#L740'>_get_solexa_quality_str</a>(record)</tt>	Returns a solexa fastq encoded quality string private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/QualityIO.py#L800'>FastqGeneralIterator</a>(handle)</tt>	Iterate over fastq records as string tuples not as seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/QualityIO.py#L960'>FastqPhredIterator</a>(handle,alphabet,title2ids)</tt>	Generator function to iterate over fastq records as seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/QualityIO.py#L1055'>FastqSolexaIterator</a>(handle,alphabet,title2ids)</tt>	Parsing old solexa/illumina fastq like files which differ in the quality mapping.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/QualityIO.py#L1212'>FastqIlluminaIterator</a>(handle,alphabet,title2ids)</tt>	Parse illumina 1 3 to 1 7 fastq like files which differ in the quality mapping.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/QualityIO.py#L1263'>QualPhredIterator</a>(handle,alphabet,title2ids)</tt>	For qual files which include phred quality scores but no sequence.
<tt style='background-color:#E8E8E8;'> SeqIO.FastqPhredWriter <a href=' /SeqIO/QualityIO.py#L1425'>write_record</a>(record)</tt>	Write a single fastq record to the file.
<tt style='background-color:#E8E8E8;'> SeqIO.QualPhredWriter <a href=' /SeqIO/QualityIO.py#L1475'>__init__</a>(handle,wrap,record2title)</tt>	Create a qual writer.
<tt style='background-color:#E8E8E8;'> SeqIO.QualPhredWriter <a href=' /SeqIO/QualityIO.py#L1503'>write_record</a>(record)</tt>	Write a single qual record to the file.
<tt style='background-color:#E8E8E8;'> SeqIO.FastqSolexaWriter <a href=' /SeqIO/QualityIO.py#L1612'>write_record</a>(record)</tt>	Write a single fastq record to the file.
<tt style='background-color:#E8E8E8;'> SeqIO.FastqIlluminaWriter <a href=' /SeqIO/QualityIO.py#L1668'>write_record</a>(record)</tt>	Write a single fastq record to the file.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/QualityIO.py#L1698'>PairedFastaQualIterator</a>(fasta_handle,qual_handle,alphabet,title2ids)</tt>	Iterate over matched fasta and qual files as seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/UniprotIO.py#L42'>UniprotIterator</a>(handle,alphabet,return_raw_comments)</tt>	Generator function to parse uniprot xml as seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO.Parser <a href=' /SeqIO/UniprotIO.py#L94'>parse</a>()</tt>	Parse the input.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/PdbIO.py#L15'>PdbSeqresIterator</a>(handle)</tt>	Returns seqrecord objects for each chain in a pdb file.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/PdbIO.py#L121'>PdbAtomIterator</a>(handle)</tt>	Returns seqrecord objects for each chain in a pdb file the sequences are derived from the 3d structure atom records not the.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/PirIO.py#L109'>PirIterator</a>(handle)</tt>	Generator function to iterate over fasta records as seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/__init__.py#L448'>write</a>(sequences,handle,format)</tt>	Write complete set of sequences to a file.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/__init__.py#L514'>parse</a>(handle,format,alphabet)</tt>	Turns a sequence file into an iterator returning seqrecords.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/__init__.py#L613'>_force_alphabet</a>(record_iterator,alphabet)</tt>	Iterate over records over-riding the alphabet private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/__init__.py#L628'>read</a>(handle,format,alphabet)</tt>	Turns a sequence file into a single seqrecord.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/__init__.py#L687'>to_dict</a>(sequences,key_function)</tt>	Turns a sequence iterator or list into a dictionary.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/__init__.py#L748'>index</a>(filename,format,alphabet,key_function)</tt>	Indexes a sequence file and returns a dictionary like object.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/__init__.py#L883'>index_db</a>(index_filename,filenames,format,alphabet)</tt>	Index several sequence files and return a dictionary like object.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/__init__.py#L969'>convert</a>(in_file,in_format,out_file,out_format)</tt>	Convert between two sequence file formats return number of records.
<tt style='background-color:#E8E8E8;'> SeqIO.SequenceIterator <a href=' /SeqIO/Interfaces.py#L26'>__init__</a>(handle,alphabet)</tt>	Create a sequenceiterator object.
<tt style='background-color:#E8E8E8;'> SeqIO.SequenceIterator <a href=' /SeqIO/Interfaces.py#L45'>__next__</a>()</tt>	Return the next record in the file.
<tt style='background-color:#E8E8E8;'> SeqIO.SequenceIterator <a href=' /SeqIO/Interfaces.py#L59'>__iter__</a>()</tt>	Iterate over the entries as a seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO.SequenceWriter <a href=' /SeqIO/Interfaces.py#L85'>__init__</a>(handle)</tt>	Creates the writer object.
<tt style='background-color:#E8E8E8;'> SeqIO.SequenceWriter <a href=' /SeqIO/Interfaces.py#L92'>_get_seq_string</a>(record)</tt>	Use this to catch errors like the sequence being none.
<tt style='background-color:#E8E8E8;'> SeqIO.SequenceWriter <a href=' /SeqIO/Interfaces.py#L104'>clean</a>(text)</tt>	Use this to avoid getting newlines in the output.
<tt style='background-color:#E8E8E8;'> SeqIO.SequenceWriter <a href=' /SeqIO/Interfaces.py#L108'>write_file</a>(records)</tt>	Use this to write an entire file containing the given records.
<tt style='background-color:#E8E8E8;'> SeqIO.SequentialSequenceWriter <a href=' /SeqIO/Interfaces.py#L164'>write_record</a>(record)</tt>	Write a single record to the output file.
<tt style='background-color:#E8E8E8;'> SeqIO.SequentialSequenceWriter <a href=' /SeqIO/Interfaces.py#L181'>write_records</a>(records)</tt>	Write multiple record to the output file.
<tt style='background-color:#E8E8E8;'> SeqIO.SequentialSequenceWriter <a href=' /SeqIO/Interfaces.py#L203'>write_file</a>(records)</tt>	Use this to write an entire file containing the given records.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/InsdcIO.py#L56'>GenBankIterator</a>(handle)</tt>	Breaks up a genbank file into seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/InsdcIO.py#L96'>EmblIterator</a>(handle)</tt>	Breaks up an embl file into seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/InsdcIO.py#L142'>ImgtIterator</a>(handle)</tt>	Breaks up an imgt file into seqrecord objects.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/InsdcIO.py#L155'>GenBankCdsFeatureIterator</a>(handle,alphabet)</tt>	Breaks up a genbank file into seqrecord objects for each cds feature.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/InsdcIO.py#L166'>EmblCdsFeatureIterator</a>(handle,alphabet)</tt>	Breaks up a embl file into seqrecord objects for each cds feature.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/InsdcIO.py#L177'>_insdc_feature_position_string</a>(pos,offset)</tt>	Build a genbank/embl position string private.
<tt style='background-color:#E8E8E8;'> SeqIO. <a href=' /SeqIO/InsdcIO.py#L257'>_insdc_location_string</a>(location,rec_length)</tt>	Build a genbank/embl location from a compound featurelocation private.
<tt style='background-color:#E8E8E8;'> SeqIO._InsdcWriter <a href=' /SeqIO/InsdcIO.py#L335'>_wrap_location</a>(location)</tt>	Split a feature location into lines break at commas.
<tt style='background-color:#E8E8E8;'> SeqIO._InsdcWriter <a href=' /SeqIO/InsdcIO.py#L351'>_write_feature</a>(feature,record_length)</tt>	Write a single seqfeature object to features table.
<tt style='background-color:#E8E8E8;'> SeqIO._InsdcWriter <a href=' /SeqIO/InsdcIO.py#L369'>_get_annotation_str</a>(record,key,default,just_first)</tt>	Get an annotation dictionary entry as a string.
<tt style='background-color:#E8E8E8;'> SeqIO._InsdcWriter <a href=' /SeqIO/InsdcIO.py#L388'>_split_multi_line</a>(text,max_len)</tt>	Returns a list of strings.
<tt style='background-color:#E8E8E8;'> SeqIO._InsdcWriter <a href=' /SeqIO/InsdcIO.py#L417'>_split_contig</a>(record,max_len)</tt>	Returns a list of strings splits on commas.
<tt style='background-color:#E8E8E8;'> SeqIO.GenBankWriter <a href=' /SeqIO/InsdcIO.py#L451'>_write_single_line</a>(tag,text)</tt>	Used in the 'header' of each genbank record.
<tt style='background-color:#E8E8E8;'> SeqIO.GenBankWriter <a href=' /SeqIO/InsdcIO.py#L464'>_write_multi_line</a>(tag,text)</tt>	Used in the 'header' of each genbank record.
<tt style='background-color:#E8E8E8;'> SeqIO.GenBankWriter <a href=' /SeqIO/InsdcIO.py#L570'>_get_topology</a>(record)</tt>	Set the topology to 'circular', 'linear' if defined.
<tt style='background-color:#E8E8E8;'> SeqIO.GenBankWriter <a href=' /SeqIO/InsdcIO.py#L580'>_write_the_first_line</a>(record)</tt>	Write the locus line.
<tt style='background-color:#E8E8E8;'> SeqIO.GenBankWriter <a href=' /SeqIO/InsdcIO.py#L805'>write_record</a>(record)</tt>	Write a single record to the output file.
<tt style='background-color:#E8E8E8;'> SeqIO.EmblWriter <a href=' /SeqIO/InsdcIO.py#L1016'>_write_the_first_lines</a>(record)</tt>	Write the id and ac lines.
<tt style='background-color:#E8E8E8;'> SeqIO.EmblWriter <a href=' /SeqIO/InsdcIO.py#L1191'>write_record</a>(record)</tt>	Write a single record to the output file.
<tt style='background-color:#E8E8E8;'> phenotype. <a href=' /phenotype/pm_fitting.py#L32'>logistic</a>(x,A,u,d)</tt>	Logistic growth model proposed in zwietering et al.
<tt style='background-color:#E8E8E8;'> phenotype. <a href=' /phenotype/pm_fitting.py#L41'>gompertz</a>(x,A,u,d)</tt>	Gompertz growth model proposed in zwietering et al.
<tt style='background-color:#E8E8E8;'> phenotype. <a href=' /phenotype/pm_fitting.py#L50'>richards</a>(x,A,u,d)</tt>	Gompertz growth model equivalent to stannard proposed in zwietering et al.
<tt style='background-color:#E8E8E8;'> phenotype. <a href=' /phenotype/pm_fitting.py#L60'>guess_lag</a>(x,y)</tt>	Given two axes returns a guess of the lag point.
<tt style='background-color:#E8E8E8;'> phenotype. <a href=' /phenotype/pm_fitting.py#L91'>guess_plateau</a>(x,y)</tt>	Given two axes returns a guess of the plateau point.
<tt style='background-color:#E8E8E8;'> phenotype. <a href=' /phenotype/pm_fitting.py#L120'>fit</a>(function,x,y)</tt>	Fit the provided functrion to the x and y values.
<tt style='background-color:#E8E8E8;'> phenotype. <a href=' /phenotype/pm_fitting.py#L133'>get_area</a>(y,x)</tt>	Get the area under the curve.
<tt style='background-color:#E8E8E8;'> phenotype.PlateRecord <a href=' /phenotype/phen_micro.py#L159'>_update</a>()</tt>	Update the rows and columns string identifiers.
<tt style='background-color:#E8E8E8;'> phenotype.PlateRecord <a href=' /phenotype/phen_micro.py#L164'>_is_well</a>(obj)</tt>	Check if the given object is a wellrecord object.
<tt style='background-color:#E8E8E8;'> phenotype.PlateRecord <a href=' /phenotype/phen_micro.py#L174'>__getitem__</a>(index)</tt>	Access part of the plate.
<tt style='background-color:#E8E8E8;'> phenotype.PlateRecord <a href=' /phenotype/phen_micro.py#L354'>__len__</a>()</tt>	Returns the number of wells in this plate.
<tt style='background-color:#E8E8E8;'> phenotype.PlateRecord <a href=' /phenotype/phen_micro.py#L367'>__add__</a>(plate)</tt>	Add another platerecord object.
<tt style='background-color:#E8E8E8;'> phenotype.PlateRecord <a href=' /phenotype/phen_micro.py#L390'>__sub__</a>(plate)</tt>	Subtract another platerecord object.
<tt style='background-color:#E8E8E8;'> phenotype.PlateRecord <a href=' /phenotype/phen_micro.py#L413'>get_row</a>(row)</tt>	Get all the wells of a given row a row is identified with a letter (e.
<tt style='background-color:#E8E8E8;'> phenotype.PlateRecord <a href=' /phenotype/phen_micro.py#L430'>get_column</a>(column)</tt>	Get all the wells of a given column a column is identified with a number (e.
<tt style='background-color:#E8E8E8;'> phenotype.PlateRecord <a href=' /phenotype/phen_micro.py#L446'>subtract_control</a>(control,wells)</tt>	Subtract a 'control' well from the other plates wells.
<tt style='background-color:#E8E8E8;'> phenotype.PlateRecord <a href=' /phenotype/phen_micro.py#L478'>__repr__</a>()</tt>	Returns a truncated representation of the plate for debugging.
<tt style='background-color:#E8E8E8;'> phenotype.PlateRecord <a href=' /phenotype/phen_micro.py#L497'>__str__</a>()</tt>	A human readable summary of the record string.
<tt style='background-color:#E8E8E8;'> phenotype.WellRecord <a href=' /phenotype/phen_micro.py#L627'>_interpolate</a>(time)</tt>	Linear interpolation of the signals at certain time points private.
<tt style='background-color:#E8E8E8;'> phenotype.WellRecord <a href=' /phenotype/phen_micro.py#L636'>__setitem__</a>(time,signal)</tt>	Assign a signal at a certain time point.
<tt style='background-color:#E8E8E8;'> phenotype.WellRecord <a href=' /phenotype/phen_micro.py#L649'>__getitem__</a>(time)</tt>	Returns a subset of signals or a single signal.
<tt style='background-color:#E8E8E8;'> phenotype.WellRecord <a href=' /phenotype/phen_micro.py#L692'>__add__</a>(well)</tt>	Add another wellrecord object.
<tt style='background-color:#E8E8E8;'> phenotype.WellRecord <a href=' /phenotype/phen_micro.py#L711'>__sub__</a>(well)</tt>	Subtract another wellrecord object.
<tt style='background-color:#E8E8E8;'> phenotype.WellRecord <a href=' /phenotype/phen_micro.py#L730'>__len__</a>()</tt>	Returns the number of time points sampled.
<tt style='background-color:#E8E8E8;'> phenotype.WellRecord <a href=' /phenotype/phen_micro.py#L734'>__repr__</a>()</tt>	Returns a truncated representation of the signals for debugging.
<tt style='background-color:#E8E8E8;'> phenotype.WellRecord <a href=' /phenotype/phen_micro.py#L746'>__str__</a>()</tt>	A human readable summary of the record string.
<tt style='background-color:#E8E8E8;'> phenotype.WellRecord <a href=' /phenotype/phen_micro.py#L778'>get_raw</a>()</tt>	Get a list of time/signal pairs.
<tt style='background-color:#E8E8E8;'> phenotype.WellRecord <a href=' /phenotype/phen_micro.py#L782'>get_times</a>()</tt>	Get a list of the recorded time points.
<tt style='background-color:#E8E8E8;'> phenotype.WellRecord <a href=' /phenotype/phen_micro.py#L786'>get_signals</a>()</tt>	Get a list of the recorded signals ordered by collection time.
<tt style='background-color:#E8E8E8;'> phenotype.WellRecord <a href=' /phenotype/phen_micro.py#L790'>fit</a>(function)</tt>	Fit a sigmoid function to this well and extract curve parameters.
<tt style='background-color:#E8E8E8;'> phenotype. <a href=' /phenotype/phen_micro.py#L852'>JsonIterator</a>(handle)</tt>	Generator function to iterate over pm json records as platerecord objects.
<tt style='background-color:#E8E8E8;'> phenotype. <a href=' /phenotype/phen_micro.py#L930'>CsvIterator</a>(handle)</tt>	Generator function to iterate over pm csv records as platerecord objects.
<tt style='background-color:#E8E8E8;'> phenotype. <a href=' /phenotype/phen_micro.py#L1083'>_toOPM</a>(plate)</tt>	Transform a platerecord object into a dictionary private.
<tt style='background-color:#E8E8E8;'> phenotype.JsonWriter <a href=' /phenotype/phen_micro.py#L1115'>write</a>(handle)</tt>	Write this instance's plates to a file handle.
<tt style='background-color:#E8E8E8;'> phenotype. <a href=' /phenotype/__init__.py#L113'>write</a>(plates,handle,format)</tt>	Write complete set of platerecords to a file.
<tt style='background-color:#E8E8E8;'> phenotype. <a href=' /phenotype/__init__.py#L151'>parse</a>(handle,format)</tt>	Turns a phenotype file into an iterator returning platerecords.
<tt style='background-color:#E8E8E8;'> phenotype. <a href=' /phenotype/__init__.py#L192'>read</a>(handle,format)</tt>	Turns a phenotype file into a single platerecord.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/chisq.py#L16'>chisqprob</a>(x,df)</tt>	Probability value 1-tail for the chi^2 probability distribution.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/chisq.py#L45'>_igamc</a>(a,x)</tt>	Complemented incomplete gamma integral.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/chisq.py#L111'>_igam</a>(a,x)</tt>	Left tail of incomplete gamma function.
<tt style='background-color:#E8E8E8;'> codonalign.CodonAlignment <a href=' /codonalign/codonalignment.py#L50'>__str__</a>()</tt>	Return a multi-line string summary of the alignment.
<tt style='background-color:#E8E8E8;'> codonalign.CodonAlignment <a href=' /codonalign/codonalignment.py#L74'>__getitem__</a>(index,alphabet)</tt>	Return a codonalignment object for single indexing.
<tt style='background-color:#E8E8E8;'> codonalign.CodonAlignment <a href=' /codonalign/codonalignment.py#L103'>toMultipleSeqAlignment</a>()</tt>	Return a multipleseqalignment containing all the.
<tt style='background-color:#E8E8E8;'> codonalign.CodonAlignment <a href=' /codonalign/codonalignment.py#L112'>get_dn_ds_matrix</a>(method,codon_table)</tt>	Available methods include ng86 lwl85 yn00 and ml.
<tt style='background-color:#E8E8E8;'> codonalign.CodonAlignment <a href=' /codonalign/codonalignment.py#L140'>get_dn_ds_tree</a>(dn_ds_method,tree_method,codon_table)</tt>	Method for constructing dn tree and ds tree.
<tt style='background-color:#E8E8E8;'> codonalign.CodonAlignment <a href=' /codonalign/codonalignment.py#L163'>from_msa</a>(cls,align,alphabet)</tt>	Function to convert a multipleseqalignment to codonalignment.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonalignment.py#L174'>mktest</a>(codon_alns,codon_table,alpha)</tt>	Mcdonald-kreitman test for neutrality pmid 1904993 this method counts changes rather than sites (http //mkt.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonalignment.py#L236'>_get_codon2codon_matrix</a>(codon_table)</tt>	Function to get codon codon substitution matrix private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonalignment.py#L282'>_dijkstra</a>(graph,start,end)</tt>	Dijkstra's algorithm python implementation.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonalignment.py#L349'>_count_replacement</a>(codon_set,G)</tt>	Count replacement needed for a given codon_set private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonalignment.py#L362'>_prim</a>(G)</tt>	Prim's algorithm to find minimum spanning tree private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonalignment.py#L400'>_get_subgraph</a>(codons,G)</tt>	Get the subgraph that contains all codons in list private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonalignment.py#L412'>_G_test</a>(site_counts)</tt>	G test for 2x2 contingency table private.
<tt style='background-color:#E8E8E8;'> codonalign.CodonSeq <a href=' /codonalign/codonseq.py#L109'>get_codon</a>(index)</tt>	Get the index-th codon from the sequence.
<tt style='background-color:#E8E8E8;'> codonalign.CodonSeq <a href=' /codonalign/codonseq.py#L140'>get_codon_num</a>()</tt>	Return the number of codons in the codonseq.
<tt style='background-color:#E8E8E8;'> codonalign.CodonSeq <a href=' /codonalign/codonseq.py#L144'>translate</a>(codon_table,stop_symbol,rf_table,ungap_seq)</tt>	Translate the codonseq based on the reading frame in rf_table.
<tt style='background-color:#E8E8E8;'> codonalign.CodonSeq <a href=' /codonalign/codonseq.py#L195'>get_full_rf_table</a>()</tt>	Returns full rf_table of the codonseq records.
<tt style='background-color:#E8E8E8;'> codonalign.CodonSeq <a href=' /codonalign/codonseq.py#L235'>full_translate</a>(codon_table,stop_symbol)</tt>	Apply full translation with gaps considered.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L267'>_get_codon_list</a>(codonseq)</tt>	List of codons according to full_rf_table for counting private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L295'>cal_dn_ds</a>(codon_seq1,codon_seq2,method,codon_table)</tt>	Calculate dn and ds of the given two sequences.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L363'>_ng86</a>(seq1,seq2,k,codon_table)</tt>	Main function for ng86 method private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L389'>_count_site_NG86</a>(codon_lst,k,codon_table)</tt>	Count synonymous and non-synonymous sites of a list of codons private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L450'>_count_diff_NG86</a>(codon1,codon2,codon_table)</tt>	Count differences between two codons three-letter string private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L538'>_lwl85</a>(seq1,seq2,k,codon_table)</tt>	Main function for lwl85 method private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L580'>_get_codon_fold</a>(codon_table)</tt>	Classify different position in a codon into different folds private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L615'>_diff_codon</a>(codon1,codon2,fold_dict)</tt>	Number of different types substitutions between two codons private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L662'>_yn00</a>(seq1,seq2,k,codon_table)</tt>	Main function for yn00 method private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L769'>_get_TV</a>(codon_lst1,codon_lst2,codon_table)</tt>	Get tv private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L796'>_get_kappa_t</a>(pi,TV,t)</tt>	The following formula and variable names are according to.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L820'>_count_site_YN00</a>(codon_lst1,codon_lst2,pi,k)</tt>	Site counting method from ina / yang and nielsen private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L886'>_count_diff_YN00</a>(codon1,codon2,P,codon_lst)</tt>	Count differences between two codons three-letter string private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L1013'>_ml</a>(seq1,seq2,cmethod,codon_table)</tt>	Main function for ml method private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L1087'>_get_pi</a>(seq1,seq2,cmethod,codon_table)</tt>	Obtain codon frequency dict pi from two codon list private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L1137'>_q</a>(i,j,pi,k)</tt>	Q matrix for codon substitution.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L1186'>_get_Q</a>(pi,k,w,codon_lst)</tt>	Q matrix for codon substitution private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/codonseq.py#L1207'>_likelihood_func</a>(t,k,w,pi)</tt>	Likelihood function for ml method private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/__init__.py#L30'>build</a>(pro_align,nucl_seqs,corr_dict,gap_char)</tt>	Build a codon alignment from a protein alignment and corresponding nucleotide sequences.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/__init__.py#L189'>_codons2re</a>(codons)</tt>	Generate regular expression based on a given list of codons private.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/__init__.py#L200'>_get_aa_regex</a>(codon_table,stop,unknown)</tt>	Set up the regular expression of a given codontable for further use.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/__init__.py#L235'>_check_corr</a>(pro,nucl,gap_char,codon_table)</tt>	Check if a given protein seqrecord can be translated by another nucleotide seqrecord.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/__init__.py#L425'>_get_shift_anchor_re</a>(sh_anc,sh_nuc,shift_val,aa2re)</tt>	Finds an re that matches a potentially shifted anchor.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/__init__.py#L488'>_merge_aa2re</a>(aa1,aa2,shift_val,aa2re)</tt>	Function to merge two amino acids based on detected frame shift value.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/__init__.py#L528'>_get_codon_rec</a>(pro,nucl,span_mode,alphabet)</tt>	Generate codon alignment based on regular re match private span_mode is a tuple returned by _check_corr.
<tt style='background-color:#E8E8E8;'> codonalign. <a href=' /codonalign/__init__.py#L669'>_align_shift_recs</a>(recs)</tt>	Build alignment according to the frameshift detected by _check_corr private.
<tt style='background-color:#E8E8E8;'> GA. <a href=' /GA/Organism.py#L16'>function_population</a>(new_genome,num_organisms,fitness_calculator)</tt>	Generate a population given a function to create genomes.
<tt style='background-color:#E8E8E8;'> GA. <a href=' /GA/Organism.py#L39'>random_population</a>(genome_alphabet,genome_size,num_organisms,fitness_calculator)</tt>	Generate a population of individuals with randomly set genomes.
<tt style='background-color:#E8E8E8;'> GA.Organism <a href=' /GA/Organism.py#L106'>__init__</a>(genome,fitness_calculator,start_fitness)</tt>	Initialize an organism.
<tt style='background-color:#E8E8E8;'> GA.Organism <a href=' /GA/Organism.py#L132'>__str__</a>()</tt>	Provide a string output for debugging.
<tt style='background-color:#E8E8E8;'> GA.Organism <a href=' /GA/Organism.py#L136'>__eq__</a>(other)</tt>	Compare organisms by their genomes as strings of letters.
<tt style='background-color:#E8E8E8;'> GA.Organism <a href=' /GA/Organism.py#L144'>__ne__</a>(other)</tt>	Compare organisms by their genomes as strings of letters.
<tt style='background-color:#E8E8E8;'> GA.Organism <a href=' /GA/Organism.py#L148'>__lt__</a>(other)</tt>	Compare organisms by their genomes as strings of letters.
<tt style='background-color:#E8E8E8;'> GA.Organism <a href=' /GA/Organism.py#L152'>__le__</a>(other)</tt>	Compare organisms by their genomes as strings of letters.
<tt style='background-color:#E8E8E8;'> GA.Organism <a href=' /GA/Organism.py#L156'>__gt__</a>(other)</tt>	Compare organisms by their genomes as strings of letters.
<tt style='background-color:#E8E8E8;'> GA.Organism <a href=' /GA/Organism.py#L160'>__ge__</a>(other)</tt>	Compare organisms by their genomes as strings of letters.
<tt style='background-color:#E8E8E8;'> GA.Organism <a href=' /GA/Organism.py#L164'>copy</a>()</tt>	Return a copy of the organism.
<tt style='background-color:#E8E8E8;'> GA.Organism <a href=' /GA/Organism.py#L172'>recalculate_fitness</a>()</tt>	Calculate and reset the fitness of the current genome.
<tt style='background-color:#E8E8E8;'> GA.GenerationEvolver <a href=' /GA/Evolver.py#L35'>__init__</a>(starting_population,selector)</tt>	Initialize the evolver.
<tt style='background-color:#E8E8E8;'> GA.GenerationEvolver <a href=' /GA/Evolver.py#L51'>evolve</a>(stopping_criteria)</tt>	Evolve the population through multiple generations.
<tt style='background-color:#E8E8E8;'> GA.Crossover.SinglePointCrossover <a href=' /GA/Crossover/Point.py#L30'>__init__</a>(crossover_prob)</tt>	Initialize to do crossovers at the specified probability.
<tt style='background-color:#E8E8E8;'> GA.Crossover.UniformCrossover <a href=' /GA/Crossover/Uniform.py#L34'>__init__</a>(crossover_prob,uniform_prob)</tt>	Initialize to do uniform crossover at the specified probability and frequency.
<tt style='background-color:#E8E8E8;'> GA.Crossover.UniformCrossover <a href=' /GA/Crossover/Uniform.py#L40'>do_crossover</a>(org_1,org_2)</tt>	Potentially do a crossover between the two organisms.
<tt style='background-color:#E8E8E8;'> GA.Crossover.SafeFitnessCrossover <a href=' /GA/Crossover/General.py#L27'>__init__</a>(actual_crossover,accept_less)</tt>	Initialize to do safe crossovers.
<tt style='background-color:#E8E8E8;'> GA.Crossover.SafeFitnessCrossover <a href=' /GA/Crossover/General.py#L43'>do_crossover</a>(org_1,org_2)</tt>	Perform a safe crossover between the two organism.
<tt style='background-color:#E8E8E8;'> GA.Crossover.GeneralPointCrossover <a href=' /GA/Crossover/GeneralPoint.py#L57'>__init__</a>(points,crossover_prob)</tt>	Initialize to do crossovers at the specified probability.
<tt style='background-color:#E8E8E8;'> GA.Crossover.GeneralPointCrossover <a href=' /GA/Crossover/GeneralPoint.py#L64'>do_crossover</a>(org_1,org_2)</tt>	Potentially do a crossover between the two organisms.
<tt style='background-color:#E8E8E8;'> GA.Crossover.GeneralPointCrossover <a href=' /GA/Crossover/GeneralPoint.py#L102'>_generate_locs</a>(bound)</tt>	Generalized location generator.
<tt style='background-color:#E8E8E8;'> GA.Crossover.GeneralPointCrossover <a href=' /GA/Crossover/GeneralPoint.py#L122'>_crossover</a>(x,no,locs)</tt>	Generalized crossover function.
<tt style='background-color:#E8E8E8;'> GA.Crossover.TwoPointCrossover <a href=' /GA/Crossover/TwoPoint.py#L35'>__init__</a>(crossover_prob)</tt>	Initialize to do crossovers at the specified probability.
<tt style='background-color:#E8E8E8;'> GA.Selection.AbstractSelection <a href=' /GA/Selection/Abstract.py#L19'>__init__</a>(mutator,crossover,repairer)</tt>	Initialize a selector.
<tt style='background-color:#E8E8E8;'> GA.Selection.AbstractSelection <a href=' /GA/Selection/Abstract.py#L39'>mutate_and_crossover</a>(org_1,org_2)</tt>	Perform mutation and crossover on the two organisms.
<tt style='background-color:#E8E8E8;'> GA.Selection.TournamentSelection <a href=' /GA/Selection/Tournament.py#L24'>__init__</a>(mutator,crossover,repairer,num_competitors)</tt>	Initialize the tournament selector.
<tt style='background-color:#E8E8E8;'> GA.Selection.TournamentSelection <a href=' /GA/Selection/Tournament.py#L43'>select</a>(population)</tt>	Perform selection on the population using the tournament model.
<tt style='background-color:#E8E8E8;'> GA.Selection.RouletteWheelSelection <a href=' /GA/Selection/RouletteWheel.py#L28'>__init__</a>(mutator,crossover,repairer)</tt>	Initialize the selector.
<tt style='background-color:#E8E8E8;'> GA.Selection.RouletteWheelSelection <a href=' /GA/Selection/RouletteWheel.py#L46'>select</a>(population)</tt>	Perform selection on the population based using a roulette model.
<tt style='background-color:#E8E8E8;'> GA.Selection.RouletteWheelSelection <a href=' /GA/Selection/RouletteWheel.py#L91'>_set_up_wheel</a>(population)</tt>	Set up the roulette wheel based on the fitnesses.
<tt style='background-color:#E8E8E8;'> GA.Selection.DiversitySelection <a href=' /GA/Selection/Diversity.py#L35'>__init__</a>(internal_selector,genome_generator)</tt>	Initialize a diversity selector.
<tt style='background-color:#E8E8E8;'> GA.Selection.DiversitySelection <a href=' /GA/Selection/Diversity.py#L53'>_get_new_organism</a>(new_pop,old_pop)</tt>	Get a new organism from old_pop that isn't in new_pop.
<tt style='background-color:#E8E8E8;'> GA.Selection.DiversitySelection <a href=' /GA/Selection/Diversity.py#L81'>select</a>(population)</tt>	Perform selection on the current population encouraging diversity.
<tt style='background-color:#E8E8E8;'> GA.Mutation.SinglePositionMutation <a href=' /GA/Mutation/Simple.py#L20'>__init__</a>(mutation_rate)</tt>	Initialize a mutator.
<tt style='background-color:#E8E8E8;'> GA.Mutation.SinglePositionMutation <a href=' /GA/Mutation/Simple.py#L41'>mutate</a>(organism)</tt>	Mutate the organism's genome.
<tt style='background-color:#E8E8E8;'> GA.Mutation.ConversionMutation <a href=' /GA/Mutation/Simple.py#L69'>__init__</a>(mutation_rate)</tt>	Inititialize a mutator.
<tt style='background-color:#E8E8E8;'> GA.Mutation.ConversionMutation <a href=' /GA/Mutation/Simple.py#L83'>mutate</a>(organism)</tt>	Mutate the organism's genome.
<tt style='background-color:#E8E8E8;'> GA.Mutation.SafeFitnessMutation <a href=' /GA/Mutation/General.py#L21'>__init__</a>(actual_mutation,accept_less)</tt>	Initialize to do safe mutations.
<tt style='background-color:#E8E8E8;'> GA.Mutation.SafeFitnessMutation <a href=' /GA/Mutation/General.py#L37'>mutate</a>(org)</tt>	Perform safe mutation of the specified organism.
<tt style='background-color:#E8E8E8;'> GA.Repair.AmbiguousRepair <a href=' /GA/Repair/Stabilizing.py#L27'>__init__</a>(ambig_finder,num_ambiguous)</tt>	Initialize the repair class.
<tt style='background-color:#E8E8E8;'> GA.Repair.AmbiguousRepair <a href=' /GA/Repair/Stabilizing.py#L45'>repair</a>(organism)</tt>	Perform a repair to remove excess ambiguous genes.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/FastaIO.py#L154'>_set_qresult_hits</a>(qresult,hit_rows)</tt>	Helper function for appending hits without alignments into queryresults.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/FastaIO.py#L173'>_set_hsp_seqs</a>(hsp,parsed,program)</tt>	Helper function for the main parsing code.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/FastaIO.py#L233'>_get_aln_slice_coords</a>(parsed_hsp)</tt>	Helper function for the main parsing code.
<tt style='background-color:#E8E8E8;'> SearchIO.FastaM10Parser <a href=' /SearchIO/FastaIO.py#L278'>_parse_preamble</a>()</tt>	Parses the fasta preamble for fasta flavor and version.
<tt style='background-color:#E8E8E8;'> SearchIO.FastaM10Parser <a href=' /SearchIO/FastaIO.py#L297'>__parse_hit_table</a>()</tt>	Parses hit table rows.
<tt style='background-color:#E8E8E8;'> SearchIO.FastaM10Indexer <a href=' /SearchIO/FastaIO.py#L547'>get_raw</a>(offset)</tt>	Return the raw record from the file as a bytes string.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/BlatIO.py#L202'>_list_from_csv</a>(csv_string,caster)</tt>	Transforms the given comma-separated string into a list.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/BlatIO.py#L218'>_reorient_starts</a>(starts,blksizes,seqlen,strand)</tt>	Reorients block starts into the opposite strand's coordinates.
<tt style='background-color:#E8E8E8;'> SearchIO.BlatPslParser <a href=' /SearchIO/BlatIO.py#L406'>_parse_row</a>()</tt>	Returns a dictionary of parsed column values.
<tt style='background-color:#E8E8E8;'> SearchIO.BlatPslParser <a href=' /SearchIO/BlatIO.py#L448'>_parse_qresult</a>()</tt>	Generator function that returns queryresult objects.
<tt style='background-color:#E8E8E8;'> SearchIO.BlatPslIndexer <a href=' /SearchIO/BlatIO.py#L526'>__iter__</a>()</tt>	Iterates over the file handle yields key start offset and length.
<tt style='background-color:#E8E8E8;'> SearchIO.BlatPslIndexer <a href=' /SearchIO/BlatIO.py#L567'>get_raw</a>(offset)</tt>	Returns raw bytes string of a queryresult object from the given offset.
<tt style='background-color:#E8E8E8;'> SearchIO.BlatPslWriter <a href=' /SearchIO/BlatIO.py#L632'>_build_row</a>(qresult)</tt>	Returns a string or one row or more of the queryresult object.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/__init__.py#L266'>parse</a>(handle,format)</tt>	Turns a search output file into a generator that yields queryresult objects.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/__init__.py#L318'>read</a>(handle,format)</tt>	Turns a search output file containing one query into a single queryresult.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/__init__.py#L372'>to_dict</a>(qresults,key_function)</tt>	Turns a queryresult iterator or list into a dictionary.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/__init__.py#L422'>index</a>(filename,format,key_function)</tt>	Indexes a search output file and returns a dictionary-like object.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/__init__.py#L492'>index_db</a>(index_filename,filenames,format,key_function)</tt>	Indexes several search output files into an sqlite database.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/__init__.py#L574'>write</a>(qresults,handle,format)</tt>	Writes queryresult objects to a file in the given format.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/__init__.py#L623'>convert</a>(in_file,in_format,out_file,out_format)</tt>	Convert between two search output formats return number of records.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/_utils.py#L10'>get_processor</a>(format,mapping)</tt>	Returns the object to process the given format according to the mapping.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/_utils.py#L41'>singleitem</a>(attr,doc)</tt>	Returns a property that fetches the given attribute from the first item in a searchio container object.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/_utils.py#L55'>allitems</a>(attr,doc)</tt>	Returns a property that fetches the given attributes from all items in a searchio container object.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/_utils.py#L66'>fullcascade</a>(attr,doc)</tt>	Returns a getter property with a cascading setter.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/_utils.py#L86'>optionalcascade</a>(cont_attr,item_attr,doc)</tt>	Returns a getter property with a cascading setter.
<tt style='background-color:#E8E8E8;'> SearchIO. <a href=' /SearchIO/_utils.py#L115'>fragcascade</a>(attr,seq_type,doc)</tt>	Returns a getter property with cascading setter for hspfragment objects.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/_base.py#L24'>_set_frame</a>(frag)</tt>	Sets the hspfragment frames.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/_base.py#L30'>_make_triplets</a>(seq,phase)</tt>	Selects a valid amino acid sequence given a 3-letter code input.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/_base.py#L59'>_get_fragments_coord</a>(frags)</tt>	Returns the letter coordinate of the given list of fragments.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/_base.py#L86'>_get_fragments_phase</a>(frags)</tt>	Returns the phases of the given list of 3-letter amino acid fragments.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/_base.py#L108'>_adjust_aa_seq</a>(fraglist)</tt>	Transforms three-letter amino acid codes into one-letters in the given hspfragments.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/_base.py#L173'>_split_fragment</a>(frag)</tt>	Splits one hspfragment containing frame-shifted alignment into two.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/_base.py#L237'>_create_hsp</a>(hid,qid,hspd)</tt>	Returns a list of hsp objects from the given parsed hsp values.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/_base.py#L292'>_parse_hit_or_query_line</a>(line)</tt>	Parse the 'query ' line of exonerate alignment outputs.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO._BaseExonerateParser <a href=' /SearchIO/ExonerateIO/_base.py#L335'>read_until</a>(bool_func)</tt>	Reads the file handle until the given bool function returns true.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO._BaseExonerateIndexer <a href=' /SearchIO/ExonerateIO/_base.py#L495'>__iter__</a>()</tt>	Iterates over the file handle yields key start offset and length.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/exonerate_vulgar.py#L34'>parse_vulgar_comp</a>(hsp,vulgar_comp)</tt>	Parses the vulgar components present in the hsp dictionary.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO.ExonerateVulgarIndexer <a href=' /SearchIO/ExonerateIO/exonerate_vulgar.py#L169'>get_qresult_id</a>(pos)</tt>	Returns the query id of the nearest vulgar line.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO.ExonerateVulgarIndexer <a href=' /SearchIO/ExonerateIO/exonerate_vulgar.py#L179'>get_raw</a>(offset)</tt>	Returns the raw bytes string of a queryresult object from the given offset.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO.ExonerateCigarIndexer <a href=' /SearchIO/ExonerateIO/exonerate_cigar.py#L92'>get_qresult_id</a>(pos)</tt>	Returns the query id of the nearest cigar line.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/exonerate_text.py#L44'>_flip_codons</a>(codon_seq,target_seq)</tt>	Flips the codon characters from one seq to another.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/exonerate_text.py#L59'>_get_block_coords</a>(parsed_seq,row_dict,has_ner)</tt>	Returns a list of start end coordinates for each given block in the sequence.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/exonerate_text.py#L79'>_get_inter_coords</a>(coords,strand)</tt>	From the given pairs of coordinates returns a list of pairs covering the intervening ranges.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/exonerate_text.py#L94'>_stitch_rows</a>(raw_rows)</tt>	Stitches together the parsed alignment rows and returns them in a list.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/exonerate_text.py#L129'>_get_row_dict</a>(row_len,model)</tt>	Returns a dictionary of row indices for parsing alignment blocks.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/exonerate_text.py#L170'>_get_blocks</a>(rows,coords,idx)</tt>	Returns a list of dictionaries of sequences split by the coordinates.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/exonerate_text.py#L190'>_get_scodon_moves</a>(tmp_seq_blocks)</tt>	Returns a dictionary of split codon locations relative to each fragment's end.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/exonerate_text.py#L216'>_clean_blocks</a>(tmp_seq_blocks)</tt>	Removes curly braces split codon markers from the given sequences.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/exonerate_text.py#L228'>_comp_intron_lens</a>(seq_type,inter_blocks,raw_inter_lens)</tt>	Returns the length of introns between fragments.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/exonerate_text.py#L264'>_comp_coords</a>(hsp,seq_type,inter_lens)</tt>	Fill the block coordinates of the given hsp dictionary.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO. <a href=' /SearchIO/ExonerateIO/exonerate_text.py#L292'>_comp_split_codons</a>(hsp,seq_type,scodon_moves)</tt>	Computes the positions of split codons and puts the values in the given hsp dictionary.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO.ExonerateTextParser <a href=' /SearchIO/ExonerateIO/exonerate_text.py#L435'>_read_alignment</a>()</tt>	Reads the raw alignment block strings returns them in a list.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO.ExonerateTextIndexer <a href=' /SearchIO/ExonerateIO/exonerate_text.py#L486'>get_qresult_id</a>(pos)</tt>	Returns the query id from the nearest "query " line.
<tt style='background-color:#E8E8E8;'> SearchIO.ExonerateIO.ExonerateTextIndexer <a href=' /SearchIO/ExonerateIO/exonerate_text.py#L502'>get_raw</a>(offset)</tt>	Returns the raw string of a queryresult object from the given offset.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastXmlParser <a href=' /SearchIO/BlastIO/blast_xml.py#L217'>_parse_preamble</a>()</tt>	Parses all tag data prior to the first query result.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastXmlParser <a href=' /SearchIO/BlastIO/blast_xml.py#L262'>_parse_qresult</a>()</tt>	Parses query results.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastXmlParser <a href=' /SearchIO/BlastIO/blast_xml.py#L367'>_parse_hit</a>(root_hit_elem,query_id)</tt>	Generator that transforms iteration_hits xml elements into hit objects.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastXmlParser <a href=' /SearchIO/BlastIO/blast_xml.py#L437'>_parse_hsp</a>(root_hsp_frag_elem,query_id,hit_id)</tt>	Iterator that transforms hit_hsps xml elements into hsp objects.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastXmlIndexer <a href=' /SearchIO/BlastIO/blast_xml.py#L609'>get_raw</a>(offset)</tt>	Return the raw record from the file as a bytes string.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO._BlastXmlGenerator <a href=' /SearchIO/BlastIO/blast_xml.py#L647'>startDocument</a>()</tt>	Starts the xml document.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO._BlastXmlGenerator <a href=' /SearchIO/BlastIO/blast_xml.py#L653'>startElement</a>(name,attrs,children)</tt>	Starts an xml element.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO._BlastXmlGenerator <a href=' /SearchIO/BlastIO/blast_xml.py#L669'>endElement</a>(name)</tt>	Ends and xml element of the given name.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO._BlastXmlGenerator <a href=' /SearchIO/BlastIO/blast_xml.py#L674'>startParent</a>(name,attrs)</tt>	Starts an xml element which has children.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO._BlastXmlGenerator <a href=' /SearchIO/BlastIO/blast_xml.py#L691'>endParent</a>()</tt>	Ends an xml element with children.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO._BlastXmlGenerator <a href=' /SearchIO/BlastIO/blast_xml.py#L699'>startParents</a>()</tt>	Starts xml elements without children.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO._BlastXmlGenerator <a href=' /SearchIO/BlastIO/blast_xml.py#L704'>endParents</a>(num)</tt>	Ends xml elements according to the given number.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO._BlastXmlGenerator <a href=' /SearchIO/BlastIO/blast_xml.py#L709'>simpleElement</a>(name,content)</tt>	Creates an xml element without children with the given content.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastXmlWriter <a href=' /SearchIO/BlastIO/blast_xml.py#L729'>write_file</a>(qresults)</tt>	Writes the xml contents to the output handle.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastXmlWriter <a href=' /SearchIO/BlastIO/blast_xml.py#L750'>_write_elem_block</a>(block_name,map_name,obj,opt_dict)</tt>	Writes sibling xml elements.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastXmlWriter <a href=' /SearchIO/BlastIO/blast_xml.py#L779'>_write_preamble</a>(qresult)</tt>	Writes the xml file preamble.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastXmlWriter <a href=' /SearchIO/BlastIO/blast_xml.py#L807'>_write_param</a>(qresult)</tt>	Writes the parameter block of the preamble.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastXmlWriter <a href=' /SearchIO/BlastIO/blast_xml.py#L814'>_write_qresults</a>(qresults)</tt>	Writes queryresult objects into iteration elements.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastXmlWriter <a href=' /SearchIO/BlastIO/blast_xml.py#L849'>_write_hits</a>(hits)</tt>	Writes hit objects.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastXmlWriter <a href=' /SearchIO/BlastIO/blast_xml.py#L870'>_write_hsps</a>(hsps)</tt>	Writes hsp objects.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastXmlWriter <a href=' /SearchIO/BlastIO/blast_xml.py#L891'>_adjust_output</a>(hsp,elem,attr)</tt>	Adjusts output to mimic native blast+ xml as much as possible.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO. <a href=' /SearchIO/BlastIO/blast_tab.py#L147'>_compute_gapopen_num</a>(hsp)</tt>	Returns the number of gap openings in the given hsp.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO. <a href=' /SearchIO/BlastIO/blast_tab.py#L156'>_augment_blast_hsp</a>(hsp,attr)</tt>	Calculates the given hsp attribute for writing.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabParser <a href=' /SearchIO/BlastIO/blast_tab.py#L223'>_prep_fields</a>(fields)</tt>	Validates and formats the given fields for use by the parser.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabParser <a href=' /SearchIO/BlastIO/blast_tab.py#L241'>_parse_commented_qresult</a>()</tt>	Iterator returning queryresult objects from a commented file.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabParser <a href=' /SearchIO/BlastIO/blast_tab.py#L265'>_parse_comments</a>()</tt>	Returns a dictionary containing tab file comments.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabParser <a href=' /SearchIO/BlastIO/blast_tab.py#L306'>_parse_fields_line</a>()</tt>	Returns a list of column short names from the 'fields' comment line.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabParser <a href=' /SearchIO/BlastIO/blast_tab.py#L315'>_parse_result_row</a>()</tt>	Returns a dictionary of parsed row values.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabParser <a href=' /SearchIO/BlastIO/blast_tab.py#L347'>_get_id</a>(parsed)</tt>	Returns the value used for a queryresult or hit id from a parsed row.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabParser <a href=' /SearchIO/BlastIO/blast_tab.py#L362'>_parse_qresult</a>()</tt>	Generator function that returns queryresult objects.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabParser <a href=' /SearchIO/BlastIO/blast_tab.py#L473'>_get_frag_frame</a>(frag,seq_type,parsedict)</tt>	Returns hspfragment frame given the object its sequence type and its parsed dictionary values.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabParser <a href=' /SearchIO/BlastIO/blast_tab.py#L488'>_get_frag_strand</a>(frag,seq_type,parsedict)</tt>	Returns hspfragment strand given the object its sequence type and its parsed dictionary values.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabIndexer <a href=' /SearchIO/BlastIO/blast_tab.py#L530'>__iter__</a>()</tt>	Iterates over the file handle yields key start offset and length.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabIndexer <a href=' /SearchIO/BlastIO/blast_tab.py#L543'>_qresult_index_commented</a>()</tt>	Indexer for commented blast tabular files.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabIndexer <a href=' /SearchIO/BlastIO/blast_tab.py#L570'>_qresult_index</a>()</tt>	Indexer for noncommented blast tabular files.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabIndexer <a href=' /SearchIO/BlastIO/blast_tab.py#L603'>get_raw</a>(offset)</tt>	Returns the raw bytes string of a queryresult object from the given offset.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabIndexer <a href=' /SearchIO/BlastIO/blast_tab.py#L612'>_get_raw_qresult</a>(offset)</tt>	Returns the raw bytes string of a single queryresult from a noncommented file.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabIndexer <a href=' /SearchIO/BlastIO/blast_tab.py#L639'>_get_raw_qresult_commented</a>(offset)</tt>	Returns the bytes raw string of a single queryresult from a commented file.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabWriter <a href=' /SearchIO/BlastIO/blast_tab.py#L673'>write_file</a>(qresults)</tt>	Writes to the handle returns how many queryresult objects are written.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabWriter <a href=' /SearchIO/BlastIO/blast_tab.py#L699'>_build_rows</a>(qresult)</tt>	Returns a string containing tabular rows of the queryresult object.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabWriter <a href=' /SearchIO/BlastIO/blast_tab.py#L747'>_adjust_coords</a>(field,value,hsp)</tt>	Adjusts start and end coordinates according to strand.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabWriter <a href=' /SearchIO/BlastIO/blast_tab.py#L769'>_adjust_output</a>(field,value)</tt>	Adjusts formatting of the given field and value to mimic native tab output.
<tt style='background-color:#E8E8E8;'> SearchIO.BlastIO.BlastTabWriter <a href=' /SearchIO/BlastIO/blast_tab.py#L827'>_build_comments</a>(qres)</tt>	Returns a string of a queryresult tabular comment.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3TextParser <a href=' /SearchIO/HmmerIO/hmmer3_text.py#L49'>_read_until</a>(bool_func)</tt>	Reads the file handle until the given function returns true.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3TextParser <a href=' /SearchIO/HmmerIO/hmmer3_text.py#L57'>_parse_preamble</a>()</tt>	Parses hmmer preamble (lines beginning with '#').
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3TextParser <a href=' /SearchIO/HmmerIO/hmmer3_text.py#L99'>_parse_qresult</a>()</tt>	Parses a hmmer3 query block.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3TextParser <a href=' /SearchIO/HmmerIO/hmmer3_text.py#L161'>_parse_hit</a>(qid,qdesc)</tt>	Parses a hmmer3 hit block beginning with the hit table.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3TextParser <a href=' /SearchIO/HmmerIO/hmmer3_text.py#L220'>_create_hits</a>(hit_attrs,qid,qdesc)</tt>	Parses a hmmer3 hsp block beginning with the hsp table.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3TextParser <a href=' /SearchIO/HmmerIO/hmmer3_text.py#L327'>_parse_aln_block</a>(hid,hsp_list)</tt>	Parses a hmmer3 hsp alignment block.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO._BaseHmmerTextIndexer <a href=' /SearchIO/HmmerIO/_base.py#L18'>get_raw</a>(offset)</tt>	Return the raw record from the file as a bytes string.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer2TextParser <a href=' /SearchIO/HmmerIO/hmmer2_text.py#L50'>read_next</a>(rstrip)</tt>	Return the next non-empty line trailing whitespace removed.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer2TextParser <a href=' /SearchIO/HmmerIO/hmmer2_text.py#L62'>push_back</a>(line)</tt>	Un-read a line that should not be parsed yet.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer2TextParser <a href=' /SearchIO/HmmerIO/hmmer2_text.py#L66'>parse_key_value</a>()</tt>	Parse key-value pair separated by colon (:).
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer2TextParser <a href=' /SearchIO/HmmerIO/hmmer2_text.py#L71'>parse_preamble</a>()</tt>	Parse hmmer2 preamble.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer2TextParser <a href=' /SearchIO/HmmerIO/hmmer2_text.py#L106'>parse_qresult</a>()</tt>	Parse a hmmer2 query block.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer2TextParser <a href=' /SearchIO/HmmerIO/hmmer2_text.py#L137'>parse_hits</a>()</tt>	Parse a hmmer2 hit block beginning with the hit table.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer2TextParser <a href=' /SearchIO/HmmerIO/hmmer2_text.py#L168'>parse_hsps</a>(hit_placeholders)</tt>	Parse a hmmer2 hsp block beginning with the hsp table.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer2TextParser <a href=' /SearchIO/HmmerIO/hmmer2_text.py#L224'>parse_hsp_alignments</a>()</tt>	Parse a hmmer2 hsp alignment block.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3DomtabParser <a href=' /SearchIO/HmmerIO/hmmer3_domtab.py#L19'>_parse_row</a>()</tt>	Returns a dictionary of parsed row values.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3DomtabParser <a href=' /SearchIO/HmmerIO/hmmer3_domtab.py#L73'>_parse_qresult</a>()</tt>	Generator function that returns queryresult objects.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3DomtabHmmhitWriter <a href=' /SearchIO/HmmerIO/hmmer3_domtab.py#L198'>write_file</a>(qresults)</tt>	Writes to the handle.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3DomtabHmmhitWriter <a href=' /SearchIO/HmmerIO/hmmer3_domtab.py#L225'>_build_header</a>(first_qresult)</tt>	Returns the header string of a domain hmmer table output.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3DomtabHmmhitWriter <a href=' /SearchIO/HmmerIO/hmmer3_domtab.py#L263'>_build_row</a>(qresult)</tt>	Returns a string or one row or more of the queryresult object.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3TabParser <a href=' /SearchIO/HmmerIO/hmmer3_tab.py#L36'>_parse_row</a>()</tt>	Returns a dictionary of parsed row values.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3TabParser <a href=' /SearchIO/HmmerIO/hmmer3_tab.py#L79'>_parse_qresult</a>()</tt>	Generator function that returns queryresult objects.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3TabIndexer <a href=' /SearchIO/HmmerIO/hmmer3_tab.py#L155'>__iter__</a>()</tt>	Iterates over the file handle yields key start offset and length.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3TabIndexer <a href=' /SearchIO/HmmerIO/hmmer3_tab.py#L197'>get_raw</a>(offset)</tt>	Returns the raw bytes string of a queryresult object from the given offset.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3TabWriter <a href=' /SearchIO/HmmerIO/hmmer3_tab.py#L228'>write_file</a>(qresults)</tt>	Writes to the handle.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3TabWriter <a href=' /SearchIO/HmmerIO/hmmer3_tab.py#L255'>_build_header</a>(first_qresult)</tt>	Returns the header string of a hmmer table output.
<tt style='background-color:#E8E8E8;'> SearchIO.HmmerIO.Hmmer3TabWriter <a href=' /SearchIO/HmmerIO/hmmer3_tab.py#L288'>_build_row</a>(qresult)</tt>	Returns a string or one row or more of the queryresult object.
<tt style='background-color:#E8E8E8;'> SearchIO._model._BaseSearchObject <a href=' /SearchIO/_model/_base.py#L17'>_transfer_attrs</a>(obj)</tt>	Transfer instance attributes to the given object.
<tt style='background-color:#E8E8E8;'> SearchIO._model._BaseHSP <a href=' /SearchIO/_model/_base.py#L40'>_str_hsp_header</a>()</tt>	Prints the alignment header info.
<tt style='background-color:#E8E8E8;'> SearchIO._model.HSP <a href=' /SearchIO/_model/hsp.py#L252'>__init__</a>(fragments)</tt>	Initializes an hsp object.
<tt style='background-color:#E8E8E8;'> SearchIO._model.HSPFragment <a href=' /SearchIO/_model/hsp.py#L793'>_set_seq</a>(seq,seq_type)</tt>	Checks the given sequence for attribute setting.
<tt style='background-color:#E8E8E8;'> SearchIO._model.Hit <a href=' /SearchIO/_model/hit.py#L106'>__init__</a>(hsps,id,query_id)</tt>	Initializes a hit object.
<tt style='background-color:#E8E8E8;'> SearchIO._model.Hit <a href=' /SearchIO/_model/hit.py#L242'>_validate_hsp</a>(hsp)</tt>	Validates an hsp object.
<tt style='background-color:#E8E8E8;'> SearchIO._model.Hit <a href=' /SearchIO/_model/hit.py#L295'>id_all</a>()</tt>	Alternative id s of the hit.
<tt style='background-color:#E8E8E8;'> SearchIO._model.Hit <a href=' /SearchIO/_model/hit.py#L300'>description_all</a>()</tt>	Alternative descriptions of the hit.
<tt style='background-color:#E8E8E8;'> SearchIO._model.Hit <a href=' /SearchIO/_model/hit.py#L305'>fragments</a>()</tt>	Hspfragment objects contained in the hit.
<tt style='background-color:#E8E8E8;'> SearchIO._model.Hit <a href=' /SearchIO/_model/hit.py#L311'>append</a>(hsp)</tt>	Adds a hsp object to the end of hit.
<tt style='background-color:#E8E8E8;'> SearchIO._model.Hit <a href=' /SearchIO/_model/hit.py#L325'>filter</a>(func)</tt>	Creates a new hit object whose hsp objects pass the filter function.
<tt style='background-color:#E8E8E8;'> SearchIO._model.Hit <a href=' /SearchIO/_model/hit.py#L363'>index</a>(hsp)</tt>	Returns the index of a given hsp object zero-based.
<tt style='background-color:#E8E8E8;'> SearchIO._model.Hit <a href=' /SearchIO/_model/hit.py#L372'>map</a>(func)</tt>	Creates a new hit object mapping the given function to its hsps.
<tt style='background-color:#E8E8E8;'> SearchIO._model.Hit <a href=' /SearchIO/_model/hit.py#L391'>pop</a>(index)</tt>	Removes and returns the hsp object at the specified index.
<tt style='background-color:#E8E8E8;'> SearchIO._model.Hit <a href=' /SearchIO/_model/hit.py#L400'>sort</a>(key,reverse,in_place)</tt>	Sorts the hsp objects.
<tt style='background-color:#E8E8E8;'> SearchIO._model.QueryResult <a href=' /SearchIO/_model/query.py#L187'>__init__</a>(hits,id,hit_key_function)</tt>	Initializes a queryresult object.
<tt style='background-color:#E8E8E8;'> SearchIO._model.QueryResult <a href=' /SearchIO/_model/query.py#L446'>hsps</a>()</tt>	Hsp objects contained in the queryresult.
<tt style='background-color:#E8E8E8;'> SearchIO._model.QueryResult <a href=' /SearchIO/_model/query.py#L451'>fragments</a>()</tt>	Hspfragment objects contained in the queryresult.
<tt style='background-color:#E8E8E8;'> SearchIO._model.QueryResult <a href=' /SearchIO/_model/query.py#L457'>absorb</a>(hit)</tt>	Adds a hit object to the end of queryresult if the queryresult.
<tt style='background-color:#E8E8E8;'> SearchIO._model.QueryResult <a href=' /SearchIO/_model/query.py#L479'>append</a>(hit)</tt>	Adds a hit object to the end of queryresult.
<tt style='background-color:#E8E8E8;'> SearchIO._model.QueryResult <a href=' /SearchIO/_model/query.py#L502'>hit_filter</a>(func)</tt>	Creates a new queryresult object whose hit objects pass the filter function.
<tt style='background-color:#E8E8E8;'> SearchIO._model.QueryResult <a href=' /SearchIO/_model/query.py#L549'>hit_map</a>(func)</tt>	Creates a new queryresult object mapping the given function to its hits.
<tt style='background-color:#E8E8E8;'> SearchIO._model.QueryResult <a href=' /SearchIO/_model/query.py#L605'>hsp_filter</a>(func)</tt>	Creates a new queryresult object whose hsp objects pass the filter function.
<tt style='background-color:#E8E8E8;'> SearchIO._model.QueryResult <a href=' /SearchIO/_model/query.py#L620'>hsp_map</a>(func)</tt>	Creates a new queryresult object mapping the given function to its hsps.
<tt style='background-color:#E8E8E8;'> SearchIO._model.QueryResult <a href=' /SearchIO/_model/query.py#L638'>pop</a>(hit_key,default)</tt>	Removes the specified hit key and return the hit object.
<tt style='background-color:#E8E8E8;'> SearchIO._model.QueryResult <a href=' /SearchIO/_model/query.py#L702'>index</a>(hit_key)</tt>	Returns the index of a given hit key zero-based.
<tt style='background-color:#E8E8E8;'> SearchIO._model.QueryResult <a href=' /SearchIO/_model/query.py#L726'>sort</a>(key,reverse,in_place)</tt>	Sorts the hit objects.
<tt style='background-color:#E8E8E8;'> Restriction.PrintFormat <a href=' /Restriction/PrintFormat.py#L67'>__init__</a>()</tt>	Printformat() -> new printformat instance.
<tt style='background-color:#E8E8E8;'> Restriction.PrintFormat <a href=' /Restriction/PrintFormat.py#L71'>print_as</a>(what)</tt>	Pf print_as([what='list']) -> print the results as specified.
<tt style='background-color:#E8E8E8;'> Restriction.PrintFormat <a href=' /Restriction/PrintFormat.py#L90'>format_output</a>(dct,title,s1)</tt>	Pf print_that(dct [title[, s1]]) -> string nicely formatted.
<tt style='background-color:#E8E8E8;'> Restriction.PrintFormat <a href=' /Restriction/PrintFormat.py#L113'>print_that</a>(dct,title,s1)</tt>	Pf print_that(dct [title[, s1]]) -> string nicely formatted.
<tt style='background-color:#E8E8E8;'> Restriction.PrintFormat <a href=' /Restriction/PrintFormat.py#L130'>make_format</a>(cut,title,nc,s1)</tt>	Pf make_format cut nc title s -> string.
<tt style='background-color:#E8E8E8;'> Restriction.PrintFormat <a href=' /Restriction/PrintFormat.py#L141'>_make_list</a>(ls,title,nc,s1)</tt>	Pf _make_number ls title nc s1 -> string.
<tt style='background-color:#E8E8E8;'> Restriction.PrintFormat <a href=' /Restriction/PrintFormat.py#L159'>_make_map</a>(ls,title,nc,s1)</tt>	Pf _make_number ls title nc s1 -> string.
<tt style='background-color:#E8E8E8;'> Restriction.PrintFormat <a href=' /Restriction/PrintFormat.py#L180'>_make_number</a>(ls,title,nc,s1)</tt>	Pf _make_number ls title nc s1 -> string.
<tt style='background-color:#E8E8E8;'> Restriction.PrintFormat <a href=' /Restriction/PrintFormat.py#L204'>_make_nocut</a>(ls,title,nc,s1)</tt>	Pf _make_nocut ls title nc s1 -> string.
<tt style='background-color:#E8E8E8;'> Restriction.PrintFormat <a href=' /Restriction/PrintFormat.py#L219'>_make_nocut_only</a>(nc,s1,ls,title)</tt>	Pf _make_nocut_only nc s1 -> string.
<tt style='background-color:#E8E8E8;'> Restriction.PrintFormat <a href=' /Restriction/PrintFormat.py#L241'>_make_list_only</a>(ls,title,nc,s1)</tt>	Pf _make_list_only ls title -> string.
<tt style='background-color:#E8E8E8;'> Restriction.PrintFormat <a href=' /Restriction/PrintFormat.py#L261'>_make_number_only</a>(ls,title,nc,s1)</tt>	Pf _make_number_only ls title -> string.
<tt style='background-color:#E8E8E8;'> Restriction.PrintFormat <a href=' /Restriction/PrintFormat.py#L299'>_make_map_only</a>(ls,title,nc,s1)</tt>	Pf _make_map_only ls title -> string.
<tt style='background-color:#E8E8E8;'> Restriction.PrintFormat <a href=' /Restriction/PrintFormat.py#L409'>__next_section</a>(ls,into)</tt>	Fp __next_section ls into -> string.
<tt style='background-color:#E8E8E8;'> Restriction. <a href=' /Restriction/Restriction.py#L107'>_check_bases</a>(seq_string)</tt>	Check characters in a string private.
<tt style='background-color:#E8E8E8;'> Restriction.FormattedSeq <a href=' /Restriction/Restriction.py#L153'>__init__</a>(seq,linear)</tt>	Formattedseq(seq [linear=true])-> new formattedseq.
<tt style='background-color:#E8E8E8;'> Restriction.FormattedSeq <a href=' /Restriction/Restriction.py#L192'>circularise</a>()</tt>	Circularise sequence in place.
<tt style='background-color:#E8E8E8;'> Restriction.FormattedSeq <a href=' /Restriction/Restriction.py#L197'>linearise</a>()</tt>	Linearise sequence in place.
<tt style='background-color:#E8E8E8;'> Restriction.FormattedSeq <a href=' /Restriction/Restriction.py#L202'>to_linear</a>()</tt>	Make a new instnace of sequence as linear.
<tt style='background-color:#E8E8E8;'> Restriction.FormattedSeq <a href=' /Restriction/Restriction.py#L208'>to_circular</a>()</tt>	Make a new instance of sequence as circular.
<tt style='background-color:#E8E8E8;'> Restriction.FormattedSeq <a href=' /Restriction/Restriction.py#L214'>is_linear</a>()</tt>	Return if sequence is linear true or circular false.
<tt style='background-color:#E8E8E8;'> Restriction.FormattedSeq <a href=' /Restriction/Restriction.py#L218'>finditer</a>(pattern,size)</tt>	Return a list of a given pattern which occurs in the sequence.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L245'>__init__</a>(cls,name,bases,dct)</tt>	Initialize restrictiontype instance.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L264'>__add__</a>(cls,other)</tt>	Add restriction enzyme to a restrictionbatch().
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L277'>__div__</a>(cls,other)</tt>	Override '/' operator to use as search method.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L286'>__rdiv__</a>(cls,other)</tt>	Override division with reversed operands to use as search method.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L295'>__truediv__</a>(cls,other)</tt>	Override python 3 division operator to use as search method.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L302'>__rtruediv__</a>(cls,other)</tt>	As __truediv___, with reversed operands.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L309'>__floordiv__</a>(cls,other)</tt>	Override '//' operator to use as catalyse method.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L318'>__rfloordiv__</a>(cls,other)</tt>	As __floordiv__, with reversed operands.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L327'>__str__</a>(cls)</tt>	Return the name of the enzyme as string.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L331'>__repr__</a>(cls)</tt>	Implement repr method.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L338'>__len__</a>(cls)</tt>	Return lenght of recognition site of enzyme as int.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L347'>__eq__</a>(cls,other)</tt>	Override '==' operator.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L357'>__ne__</a>(cls,other)</tt>	Override '!=' operator.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L376'>__rshift__</a>(cls,other)</tt>	Override '>>' operator to test for neoschizomers.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L391'>__mod__</a>(cls,other)</tt>	Override '%' operator to test for compatible overhangs.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L403'>__ge__</a>(cls,other)</tt>	Compare length of recognition site of two enzymes.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L425'>__gt__</a>(cls,other)</tt>	Compare length of recognition site of two enzymes.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L441'>__le__</a>(cls,other)</tt>	Compare length of recognition site of two enzymes.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionType <a href=' /Restriction/Restriction.py#L457'>__lt__</a>(cls,other)</tt>	Compare length of recognition site of two enzymes.
<tt style='background-color:#E8E8E8;'> Restriction.AbstractCut <a href=' /Restriction/Restriction.py#L482'>search</a>(cls,dna,linear)</tt>	Return a list of cutting sites of the enzyme in the sequence.
<tt style='background-color:#E8E8E8;'> Restriction.AbstractCut <a href=' /Restriction/Restriction.py#L510'>all_suppliers</a>(cls)</tt>	Print all the suppliers of restriction enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.AbstractCut <a href=' /Restriction/Restriction.py#L517'>is_equischizomer</a>(cls,other)</tt>	Test for real isoschizomer.
<tt style='background-color:#E8E8E8;'> Restriction.AbstractCut <a href=' /Restriction/Restriction.py#L532'>is_neoschizomer</a>(cls,other)</tt>	Test for neoschizomer.
<tt style='background-color:#E8E8E8;'> Restriction.AbstractCut <a href=' /Restriction/Restriction.py#L541'>is_isoschizomer</a>(cls,other)</tt>	Test for same recognition site.
<tt style='background-color:#E8E8E8;'> Restriction.AbstractCut <a href=' /Restriction/Restriction.py#L555'>equischizomers</a>(cls,batch)</tt>	List equischizomers of the enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.AbstractCut <a href=' /Restriction/Restriction.py#L572'>neoschizomers</a>(cls,batch)</tt>	List neoschizomers of the enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.AbstractCut <a href=' /Restriction/Restriction.py#L586'>isoschizomers</a>(cls,batch)</tt>	List all isoschizomers of the enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.AbstractCut <a href=' /Restriction/Restriction.py#L601'>frequency</a>(cls)</tt>	Return the theoretically cutting frequency of the enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.NoCut <a href=' /Restriction/Restriction.py#L628'>cut_once</a>(cls)</tt>	Return if the cutting pattern has one cut.
<tt style='background-color:#E8E8E8;'> Restriction.NoCut <a href=' /Restriction/Restriction.py#L636'>cut_twice</a>(cls)</tt>	Return if the cutting pattern has two cuts.
<tt style='background-color:#E8E8E8;'> Restriction.NoCut <a href=' /Restriction/Restriction.py#L644'>_modify</a>(cls,location)</tt>	Return a generator that moves the cutting position by 1.
<tt style='background-color:#E8E8E8;'> Restriction.NoCut <a href=' /Restriction/Restriction.py#L672'>_rev_modify</a>(cls,location)</tt>	Return a generator that moves the cutting position by 1.
<tt style='background-color:#E8E8E8;'> Restriction.NoCut <a href=' /Restriction/Restriction.py#L683'>characteristic</a>(cls)</tt>	Return a list of the enzyme's characteristics as tuple.
<tt style='background-color:#E8E8E8;'> Restriction.OneCut <a href=' /Restriction/Restriction.py#L705'>cut_once</a>(cls)</tt>	Return if the cutting pattern has one cut.
<tt style='background-color:#E8E8E8;'> Restriction.OneCut <a href=' /Restriction/Restriction.py#L713'>cut_twice</a>(cls)</tt>	Return if the cutting pattern has two cuts.
<tt style='background-color:#E8E8E8;'> Restriction.OneCut <a href=' /Restriction/Restriction.py#L721'>_modify</a>(cls,location)</tt>	Return a generator that moves the cutting position by 1.
<tt style='background-color:#E8E8E8;'> Restriction.OneCut <a href=' /Restriction/Restriction.py#L749'>_rev_modify</a>(cls,location)</tt>	Return a generator that moves the cutting position by 1.
<tt style='background-color:#E8E8E8;'> Restriction.OneCut <a href=' /Restriction/Restriction.py#L760'>characteristic</a>(cls)</tt>	Return a list of the enzyme's characteristics as tuple.
<tt style='background-color:#E8E8E8;'> Restriction.TwoCuts <a href=' /Restriction/Restriction.py#L782'>cut_once</a>(cls)</tt>	Return if the cutting pattern has one cut.
<tt style='background-color:#E8E8E8;'> Restriction.TwoCuts <a href=' /Restriction/Restriction.py#L790'>cut_twice</a>(cls)</tt>	Return if the cutting pattern has two cuts.
<tt style='background-color:#E8E8E8;'> Restriction.TwoCuts <a href=' /Restriction/Restriction.py#L798'>_modify</a>(cls,location)</tt>	Return a generator that moves the cutting position by 1.
<tt style='background-color:#E8E8E8;'> Restriction.TwoCuts <a href=' /Restriction/Restriction.py#L827'>_rev_modify</a>(cls,location)</tt>	Return a generator that moves the cutting position by 1.
<tt style='background-color:#E8E8E8;'> Restriction.TwoCuts <a href=' /Restriction/Restriction.py#L839'>characteristic</a>(cls)</tt>	Return a list of the enzyme's characteristics as tuple.
<tt style='background-color:#E8E8E8;'> Restriction.Meth_Dep <a href=' /Restriction/Restriction.py#L859'>is_methylable</a>(cls)</tt>	Return if recognition site can be methylated.
<tt style='background-color:#E8E8E8;'> Restriction.Meth_Undep <a href=' /Restriction/Restriction.py#L874'>is_methylable</a>(cls)</tt>	Return if recognition site can be methylated.
<tt style='background-color:#E8E8E8;'> Restriction.Palindromic <a href=' /Restriction/Restriction.py#L895'>_search</a>(cls)</tt>	Return a list of cutting sites of the enzyme in the sequence.
<tt style='background-color:#E8E8E8;'> Restriction.Palindromic <a href=' /Restriction/Restriction.py#L909'>is_palindromic</a>(cls)</tt>	Return if the enzyme has a palindromic recoginition site.
<tt style='background-color:#E8E8E8;'> Restriction.NonPalindromic <a href=' /Restriction/Restriction.py#L924'>_search</a>(cls)</tt>	Return a list of cutting sites of the enzyme in the sequence.
<tt style='background-color:#E8E8E8;'> Restriction.NonPalindromic <a href=' /Restriction/Restriction.py#L949'>is_palindromic</a>(cls)</tt>	Return if the enzyme has a palindromic recoginition site.
<tt style='background-color:#E8E8E8;'> Restriction.Unknown <a href=' /Restriction/Restriction.py#L963'>catalyse</a>(cls,dna,linear)</tt>	List the sequence fragments after cutting dna with enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Unknown <a href=' /Restriction/Restriction.py#L981'>is_blunt</a>(cls)</tt>	Return if the enzyme produces blunt ends.
<tt style='background-color:#E8E8E8;'> Restriction.Unknown <a href=' /Restriction/Restriction.py#L995'>is_5overhang</a>(cls)</tt>	Return if the enzymes produces 5' overhanging ends.
<tt style='background-color:#E8E8E8;'> Restriction.Unknown <a href=' /Restriction/Restriction.py#L1009'>is_3overhang</a>(cls)</tt>	Return if the enzyme produces 3' overhanging ends.
<tt style='background-color:#E8E8E8;'> Restriction.Unknown <a href=' /Restriction/Restriction.py#L1023'>overhang</a>(cls)</tt>	Return the type of the enzyme's overhang as string.
<tt style='background-color:#E8E8E8;'> Restriction.Unknown <a href=' /Restriction/Restriction.py#L1031'>compatible_end</a>(cls)</tt>	List all enzymes that produce compatible ends for the enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Unknown <a href=' /Restriction/Restriction.py#L1036'>_mod1</a>(cls,other)</tt>	Test if other enzyme produces compatible ends for enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Blunt <a href=' /Restriction/Restriction.py#L1056'>catalyse</a>(cls,dna,linear)</tt>	List the sequence fragments after cutting dna with enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Blunt <a href=' /Restriction/Restriction.py#L1107'>is_blunt</a>(cls)</tt>	Return if the enzyme produces blunt ends.
<tt style='background-color:#E8E8E8;'> Restriction.Blunt <a href=' /Restriction/Restriction.py#L1121'>is_5overhang</a>(cls)</tt>	Return if the enzymes produces 5' overhanging ends.
<tt style='background-color:#E8E8E8;'> Restriction.Blunt <a href=' /Restriction/Restriction.py#L1135'>is_3overhang</a>(cls)</tt>	Return if the enzyme produces 3' overhanging ends.
<tt style='background-color:#E8E8E8;'> Restriction.Blunt <a href=' /Restriction/Restriction.py#L1149'>overhang</a>(cls)</tt>	Return the type of the enzyme's overhang as string.
<tt style='background-color:#E8E8E8;'> Restriction.Blunt <a href=' /Restriction/Restriction.py#L1157'>compatible_end</a>(cls,batch)</tt>	List all enzymes that produce compatible ends for the enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Blunt <a href=' /Restriction/Restriction.py#L1165'>_mod1</a>(other)</tt>	Test if other enzyme produces compatible ends for enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Ov5 <a href=' /Restriction/Restriction.py#L1184'>catalyse</a>(cls,dna,linear)</tt>	List the sequence fragments after cutting dna with enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Ov5 <a href=' /Restriction/Restriction.py#L1235'>is_blunt</a>(cls)</tt>	Return if the enzyme produces blunt ends.
<tt style='background-color:#E8E8E8;'> Restriction.Ov5 <a href=' /Restriction/Restriction.py#L1249'>is_5overhang</a>(cls)</tt>	Return if the enzymes produces 5' overhanging ends.
<tt style='background-color:#E8E8E8;'> Restriction.Ov5 <a href=' /Restriction/Restriction.py#L1263'>is_3overhang</a>(cls)</tt>	Return if the enzyme produces 3' overhanging ends.
<tt style='background-color:#E8E8E8;'> Restriction.Ov5 <a href=' /Restriction/Restriction.py#L1277'>overhang</a>(cls)</tt>	Return the type of the enzyme's overhang as string.
<tt style='background-color:#E8E8E8;'> Restriction.Ov5 <a href=' /Restriction/Restriction.py#L1285'>compatible_end</a>(cls,batch)</tt>	List all enzymes that produce compatible ends for the enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Ov5 <a href=' /Restriction/Restriction.py#L1294'>_mod1</a>(cls,other)</tt>	Test if other enzyme produces compatible ends for enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Ov3 <a href=' /Restriction/Restriction.py#L1316'>catalyse</a>(cls,dna,linear)</tt>	List the sequence fragments after cutting dna with enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Ov3 <a href=' /Restriction/Restriction.py#L1367'>is_blunt</a>(cls)</tt>	Return if the enzyme produces blunt ends.
<tt style='background-color:#E8E8E8;'> Restriction.Ov3 <a href=' /Restriction/Restriction.py#L1381'>is_5overhang</a>(cls)</tt>	Return if the enzymes produces 5' overhanging ends.
<tt style='background-color:#E8E8E8;'> Restriction.Ov3 <a href=' /Restriction/Restriction.py#L1395'>is_3overhang</a>(cls)</tt>	Return if the enzyme produces 3' overhanging ends.
<tt style='background-color:#E8E8E8;'> Restriction.Ov3 <a href=' /Restriction/Restriction.py#L1409'>overhang</a>(cls)</tt>	Return the type of the enzyme's overhang as string.
<tt style='background-color:#E8E8E8;'> Restriction.Ov3 <a href=' /Restriction/Restriction.py#L1417'>compatible_end</a>(cls,batch)</tt>	List all enzymes that produce compatible ends for the enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Ov3 <a href=' /Restriction/Restriction.py#L1426'>_mod1</a>(cls,other)</tt>	Test if other enzyme produces compatible ends for enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Defined <a href=' /Restriction/Restriction.py#L1455'>_drop</a>(cls)</tt>	Remove cuts that are outsite of the sequence.
<tt style='background-color:#E8E8E8;'> Restriction.Defined <a href=' /Restriction/Restriction.py#L1491'>is_defined</a>(cls)</tt>	Return if recognition sequence and cut are defined.
<tt style='background-color:#E8E8E8;'> Restriction.Defined <a href=' /Restriction/Restriction.py#L1506'>is_ambiguous</a>(cls)</tt>	Return if recognition sequence and cut may be ambiguous.
<tt style='background-color:#E8E8E8;'> Restriction.Defined <a href=' /Restriction/Restriction.py#L1521'>is_unknown</a>(cls)</tt>	Return if recognition sequence is unknown.
<tt style='background-color:#E8E8E8;'> Restriction.Defined <a href=' /Restriction/Restriction.py#L1535'>elucidate</a>(cls)</tt>	Return a string representing the recognition site and cuttings.
<tt style='background-color:#E8E8E8;'> Restriction.Defined <a href=' /Restriction/Restriction.py#L1573'>_mod2</a>(cls,other)</tt>	Test if other enzyme produces compatible ends for enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Ambiguous <a href=' /Restriction/Restriction.py#L1606'>_drop</a>(cls)</tt>	Remove cuts that are outsite of the sequence.
<tt style='background-color:#E8E8E8;'> Restriction.Ambiguous <a href=' /Restriction/Restriction.py#L1634'>is_defined</a>(cls)</tt>	Return if recognition sequence and cut are defined.
<tt style='background-color:#E8E8E8;'> Restriction.Ambiguous <a href=' /Restriction/Restriction.py#L1649'>is_ambiguous</a>(cls)</tt>	Return if recognition sequence and cut may be ambiguous.
<tt style='background-color:#E8E8E8;'> Restriction.Ambiguous <a href=' /Restriction/Restriction.py#L1664'>is_unknown</a>(cls)</tt>	Return if recognition sequence is unknown.
<tt style='background-color:#E8E8E8;'> Restriction.Ambiguous <a href=' /Restriction/Restriction.py#L1678'>_mod2</a>(cls,other)</tt>	Test if other enzyme produces compatible ends for enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Ambiguous <a href=' /Restriction/Restriction.py#L1706'>elucidate</a>(cls)</tt>	Return a string representing the recognition site and cuttings.
<tt style='background-color:#E8E8E8;'> Restriction.NotDefined <a href=' /Restriction/Restriction.py#L1784'>_drop</a>(cls)</tt>	Remove cuts that are outsite of the sequence.
<tt style='background-color:#E8E8E8;'> Restriction.NotDefined <a href=' /Restriction/Restriction.py#L1809'>is_defined</a>(cls)</tt>	Return if recognition sequence and cut are defined.
<tt style='background-color:#E8E8E8;'> Restriction.NotDefined <a href=' /Restriction/Restriction.py#L1824'>is_ambiguous</a>(cls)</tt>	Return if recognition sequence and cut may be ambiguous.
<tt style='background-color:#E8E8E8;'> Restriction.NotDefined <a href=' /Restriction/Restriction.py#L1839'>is_unknown</a>(cls)</tt>	Return if recognition sequence is unknown.
<tt style='background-color:#E8E8E8;'> Restriction.NotDefined <a href=' /Restriction/Restriction.py#L1853'>_mod2</a>(cls,other)</tt>	Test if other enzyme produces compatible ends for enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.NotDefined <a href=' /Restriction/Restriction.py#L1871'>elucidate</a>(cls)</tt>	Return a string representing the recognition site and cuttings.
<tt style='background-color:#E8E8E8;'> Restriction.Commercially_available <a href=' /Restriction/Restriction.py#L1902'>suppliers</a>(cls)</tt>	Print a list of suppliers of the enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Commercially_available <a href=' /Restriction/Restriction.py#L1909'>supplier_list</a>(cls)</tt>	Return a list of suppliers of the enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Commercially_available <a href=' /Restriction/Restriction.py#L1914'>buffers</a>(cls,supplier)</tt>	Return the recommended buffer of the supplier for this enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Commercially_available <a href=' /Restriction/Restriction.py#L1922'>is_comm</a>(cls)</tt>	Return if enzyme is commercially available.
<tt style='background-color:#E8E8E8;'> Restriction.Not_available <a href=' /Restriction/Restriction.py#L1937'>suppliers</a>()</tt>	Print a list of suppliers of the enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Not_available <a href=' /Restriction/Restriction.py#L1942'>supplier_list</a>(cls)</tt>	Return a list of suppliers of the enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Not_available <a href=' /Restriction/Restriction.py#L1947'>buffers</a>(cls,supplier)</tt>	Return the recommended buffer of the supplier for this enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.Not_available <a href=' /Restriction/Restriction.py#L1955'>is_comm</a>(cls)</tt>	Return if enzyme is commercially available.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L1974'>__init__</a>(first,suppliers)</tt>	Initialize empty rb or pre-fill with enzymes from supplier.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2000'>__div__</a>(other)</tt>	Override '/' operator to use as search method.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2004'>__rdiv__</a>(other)</tt>	Override division with reversed operands to use as search method.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2008'>__truediv__</a>(other)</tt>	Override python 3 division operator to use as search method.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2015'>__rtruediv__</a>(other)</tt>	As __truediv___, with reversed operands.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2022'>get</a>(enzyme,add)</tt>	Check if enzyme is in batch and return it.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2040'>lambdasplit</a>(func)</tt>	Filter enzymes in batch with supplied function.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2051'>add_supplier</a>(letter)</tt>	Add all enzymes from a given supplier to batch.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2065'>current_suppliers</a>()</tt>	List the current suppliers for the restriction batch.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2074'>__iadd__</a>(other)</tt>	Override '+=' for use with sets.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2101'>add</a>(other)</tt>	Add a restriction enzyme to the restriction batch.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2091'>remove</a>(other)</tt>	Remove enzyme from restriction batch.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2110'>add_nocheck</a>(other)</tt>	Add restriction enzyme to batch without checking its type.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2114'>format</a>(y)</tt>	Evaluate enzyme name and return it as restrictiontype.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2132'>is_restriction</a>(y)</tt>	Return if enzyme name is a known enzyme.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2140'>split</a>()</tt>	Extract enzymes of a certain class and put in new restrictionbatch.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2166'>elements</a>()</tt>	List the enzymes of the restrictionbatch as tuple.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2174'>as_string</a>()</tt>	List the names of the enzymes of the restrictionbatch.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2181'>suppl_codes</a>(cls)</tt>	Return a dicionary with supplier codes.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2190'>show_codes</a>(cls)</tt>	Print a list of supplier codes.
<tt style='background-color:#E8E8E8;'> Restriction.RestrictionBatch <a href=' /Restriction/Restriction.py#L2197'>search</a>(dna,linear)</tt>	Return a dic of cutting sites in the seq for the batch enzymes.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2239'>__init__</a>(restrictionbatch,sequence,linear)</tt>	Initialize an analysis with restrictionbatch and sequence.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2263'>_sub_set</a>(wanted)</tt>	Filter result for keys which are in wanted.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2276'>_boundaries</a>(start,end)</tt>	Set boundaries to correct values.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2297'>_test_normal</a>(start,end,site)</tt>	Test if site is between start and end.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2304'>_test_reverse</a>(start,end,site)</tt>	Test if site is between end and start for circular sequences.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2311'>format_output</a>(dct,title,s1)</tt>	Collect data and pass to printformat.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2322'>print_that</a>(dct,title,s1)</tt>	Print the output of the analysis.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2335'>change</a>()</tt>	Change parameters of print output.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2371'>full</a>(linear)</tt>	Perform analysis with all enzymes of batch and return all results.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2380'>blunt</a>(dct)</tt>	Return only cuts that have blunt ends.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2386'>overhang5</a>(dct)</tt>	Return only cuts that have 5' overhangs.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2392'>overhang3</a>(dct)</tt>	Return only cuts that have 3' overhangs.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2398'>defined</a>(dct)</tt>	Return only results from enzymes that produce defined overhangs.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2404'>with_sites</a>(dct)</tt>	Return only results from enzyme with at least one cut.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2410'>without_site</a>(dct)</tt>	Return only results from enzymes that don't cut the sequence.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2416'>with_N_sites</a>(N,dct)</tt>	Return only results from enzymes that cut the sequence n times.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2422'>with_number_list</a>(list,dct)</tt>	Return only results from enzymes that cut x y z times.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2428'>with_name</a>(names,dct)</tt>	Return only results from enzymes which names are listed.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2439'>with_site_size</a>(site_size,dct)</tt>	Return only results form enzymes with a given site size.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2446'>only_between</a>(start,end,dct)</tt>	Return only results from enzymes that only cut within start end.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2464'>between</a>(start,end,dct)</tt>	Return only results from enzymes that cut at least within borders.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2482'>show_only_between</a>(start,end,dct)</tt>	Return only results from within start end.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2497'>only_outside</a>(start,end,dct)</tt>	Return only results from enzymes that only cut outside start end.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2519'>outside</a>(start,end,dct)</tt>	Return only results from enzymes that at least cut outside borders.
<tt style='background-color:#E8E8E8;'> Restriction.Analysis <a href=' /Restriction/Restriction.py#L2538'>do_not_cut</a>(start,end,dct)</tt>	Return only results from enzymes that don't cut between borders.
<tt style='background-color:#E8E8E8;'> Sequencing. <a href=' /Sequencing/Phd.py#L124'>parse</a>(handle)</tt>	Iterates over a file returning multiple phd records.
<tt style='background-color:#E8E8E8;'> Sequencing.ACEFileRecord <a href=' /Sequencing/Ace.py#L472'>sort</a>()</tt>	Sorts wr rt and ct tags into the appropriate contig / read instance if possible.
<tt style='background-color:#E8E8E8;'> Sequencing. <a href=' /Sequencing/Phd.py#L39'>read</a>(handle)</tt>	Reads the next phd record from the file returning it as a record object.
<tt style='background-color:#E8E8E8;'> Crystal.Hetero <a href=' /Crystal/__init__.py#L60'>__ne__</a>(other)</tt>	Returns true iff self is not equal to other.
<tt style='background-color:#E8E8E8;'> Crystal.Chain <a href=' /Crystal/__init__.py#L118'>__ne__</a>(other)</tt>	Returns true iff self is not equal to other.
<tt style='background-color:#E8E8E8;'> KDTree. <a href=' /KDTree/KDTree.py#L29'>_neighbor_test</a>(nr_points,dim,bucket_size,radius)</tt>	Test all fixed radius neighbor search.
<tt style='background-color:#E8E8E8;'> KDTree. <a href=' /KDTree/KDTree.py#L68'>_test</a>(nr_points,dim,bucket_size,radius)</tt>	Test neighbor search.
<tt style='background-color:#E8E8E8;'> KDTree.KDTree <a href=' /KDTree/KDTree.py#L145'>set_coords</a>(coords)</tt>	Add the coordinates of the points.
<tt style='background-color:#E8E8E8;'> KDTree.KDTree <a href=' /KDTree/KDTree.py#L162'>search</a>(center,radius)</tt>	Search all points within radius of center.
<tt style='background-color:#E8E8E8;'> KDTree.KDTree <a href=' /KDTree/KDTree.py#L188'>get_indices</a>()</tt>	Return the list of indices.
<tt style='background-color:#E8E8E8;'> KDTree.KDTree <a href=' /KDTree/KDTree.py#L204'>all_search</a>(radius)</tt>	All fixed neighbor search.
<tt style='background-color:#E8E8E8;'> KDTree.KDTree <a href=' /KDTree/KDTree.py#L216'>all_get_indices</a>()</tt>	Return all fixed neighbor search results.
<tt style='background-color:#E8E8E8;'> KDTree.KDTree <a href=' /KDTree/KDTree.py#L226'>all_get_radii</a>()</tt>	Return all fixed neighbor search results.
<tt style='background-color:#E8E8E8;'> FSSP. <a href=' /FSSP/FSSPTools.py#L36'>mult_align</a>(sum_dict,align_dict)</tt>	Returns a biopython multiple alignment instance multipleseqalignment.
<tt style='background-color:#E8E8E8;'> FSSP. <a href=' /FSSP/FSSPTools.py#L62'>filter</a>(sum_dict,align_dict,filter_attribute,low_bound)</tt>	Filters a passed summary section and alignment section according to a numeric attribute in the summary section.
<tt style='background-color:#E8E8E8;'> FSSP. <a href=' /FSSP/FSSPTools.py#L84'>name_filter</a>(sum_dict,align_dict,name_list)</tt>	Accepts a list of names returns a new summary block and alignment block which.
<tt style='background-color:#E8E8E8;'> CAPS.DifferentialCutsite <a href=' /CAPS/__init__.py#L32'>__init__</a>()</tt>	Initialize a differentialcutsite.
<tt style='background-color:#E8E8E8;'> CAPS.CAPSMap <a href=' /CAPS/__init__.py#L57'>__init__</a>(alignment,enzymes)</tt>	Initialize the capsmap.
<tt style='background-color:#E8E8E8;'> Blast._NcbibaseblastCommandline <a href=' /Blast/Applications.py#L100'>_validate_incompatibilities</a>(incompatibles)</tt>	Used by the blast+ _validate method private.
<tt style='background-color:#E8E8E8;'> Blast. <a href=' /Blast/Applications.py#L1201'>_test</a>()</tt>	Run the bio blast applications module's doctests.
<tt style='background-color:#E8E8E8;'> Blast._Scanner <a href=' /Blast/NCBIStandalone.py#L83'>feed</a>(handle,consumer)</tt>	S feed handle consumer.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIStandalone.py#L809'>parse</a>(handle)</tt>	Parse self handle.
<tt style='background-color:#E8E8E8;'> Blast.PSIBlastParser <a href=' /Blast/NCBIStandalone.py#L822'>parse</a>(handle)</tt>	Parse self handle.
<tt style='background-color:#E8E8E8;'> Blast.Iterator <a href=' /Blast/NCBIStandalone.py#L1608'>__init__</a>(handle,parser)</tt>	__init__(self handle parser=none) create a new iterator.
<tt style='background-color:#E8E8E8;'> Blast.Iterator <a href=' /Blast/NCBIStandalone.py#L1626'>__next__</a>()</tt>	Next self -> object return the next blast record from the file.
<tt style='background-color:#E8E8E8;'> Blast.BlastErrorParser <a href=' /Blast/NCBIStandalone.py#L1779'>__init__</a>(bad_report_handle)</tt>	Initialize a parser that tries to catch blasterrors.
<tt style='background-color:#E8E8E8;'> Blast.BlastErrorParser <a href=' /Blast/NCBIStandalone.py#L1794'>parse</a>(handle)</tt>	Parse a handle attempting to diagnose errors.
<tt style='background-color:#E8E8E8;'> Blast.BlastErrorParser <a href=' /Blast/NCBIStandalone.py#L1815'>_diagnose_error</a>(handle,data_record)</tt>	Attempt to diagnose an error in the passed handle.
<tt style='background-color:#E8E8E8;'> Blast._XMLparser <a href=' /Blast/NCBIXML.py#L37'>_secure_name</a>(name)</tt>	Removes 'dangerous' from tag names.
<tt style='background-color:#E8E8E8;'> Blast._XMLparser <a href=' /Blast/NCBIXML.py#L45'>startElement</a>(name,attr)</tt>	Found xml start tag.
<tt style='background-color:#E8E8E8;'> Blast._XMLparser <a href=' /Blast/NCBIXML.py#L78'>characters</a>(ch)</tt>	Found some text.
<tt style='background-color:#E8E8E8;'> Blast._XMLparser <a href=' /Blast/NCBIXML.py#L85'>endElement</a>(name)</tt>	Found xml end tag.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L142'>reset</a>()</tt>	Reset all the data allowing reuse of the blastparser() object.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L211'>_end_BlastOutput_program</a>()</tt>	Blast program e g blastp blastn etc.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L218'>_end_BlastOutput_version</a>()</tt>	Version number and date of the blast engine.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L241'>_end_BlastOutput_reference</a>()</tt>	A reference to the article describing the algorithm private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L248'>_end_BlastOutput_db</a>()</tt>	The database s searched private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L255'>_end_BlastOutput_query_ID</a>()</tt>	The identifier of the query private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L263'>_end_BlastOutput_query_def</a>()</tt>	The definition line of the query private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L271'>_end_BlastOutput_query_len</a>()</tt>	The length of the query private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L279'>_end_Iteration_query_ID</a>()</tt>	The identifier of the query private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L283'>_end_Iteration_query_def</a>()</tt>	The definition line of the query private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L287'>_end_Iteration_query_len</a>()</tt>	The length of the query private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L299'>_end_BlastOutput_hits</a>()</tt>	Hits to the database sequences one for every sequence private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L308'>_end_Parameters_matrix</a>()</tt>	Matrix used -m on legacy blast private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L312'>_end_Parameters_expect</a>()</tt>	Expect values cutoff private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L327'>_end_Parameters_sc_match</a>()</tt>	Match score for nucleotide-nucleotide comparison -r private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L331'>_end_Parameters_sc_mismatch</a>()</tt>	Mismatch penalty for nucleotide-nucleotide comparison -r private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L335'>_end_Parameters_gap_open</a>()</tt>	Gap existence cost -g private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L339'>_end_Parameters_gap_extend</a>()</tt>	Gap extension cose -e private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L344'>_end_Parameters_filter</a>()</tt>	Filtering options -f private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L373'>_end_Hit_id</a>()</tt>	Identifier of the database sequence private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L378'>_end_Hit_def</a>()</tt>	Definition line of the database sequence private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L384'>_end_Hit_accession</a>()</tt>	Accession of the database sequence private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L403'>_end_Hsp_score</a>()</tt>	Raw score of hsp private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L409'>_end_Hsp_bit_score</a>()</tt>	Bit score of hsp private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L415'>_end_Hsp_evalue</a>()</tt>	Expect value of the hsp private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L421'>_end_Hsp_query_from</a>()</tt>	Offset of query at the start of the alignment one-offset private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L425'>_end_Hsp_query_to</a>()</tt>	Offset of query at the end of the alignment one-offset private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L429'>_end_Hsp_hit_from</a>()</tt>	Offset of the database at the start of the alignment one-offset private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L433'>_end_Hsp_hit_to</a>()</tt>	Offset of the database at the end of the alignment one-offset private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L445'>_end_Hsp_query_frame</a>()</tt>	Frame of the query if applicable private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L449'>_end_Hsp_hit_frame</a>()</tt>	Frame of the database sequence if applicable private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L453'>_end_Hsp_identity</a>()</tt>	Number of identities in the alignment private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L457'>_end_Hsp_positive</a>()</tt>	Number of positive conservative substitutions in the alignment private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L461'>_end_Hsp_gaps</a>()</tt>	Number of gaps in the alignment private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L465'>_end_Hsp_align_len</a>()</tt>	Length of the alignment private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L473'>_end_Hsp_qseq</a>()</tt>	Alignment string for the query private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L477'>_end_Hsp_hseq</a>()</tt>	Alignment string for the database private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L481'>_end_Hsp_midline</a>()</tt>	Formatting middle line as normally seen in blast report private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L488'>_end_Statistics_db_num</a>()</tt>	Number of sequences in the database private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L492'>_end_Statistics_db_len</a>()</tt>	Number of letters in the database private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L496'>_end_Statistics_hsp_len</a>()</tt>	The effective hsp length private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L500'>_end_Statistics_eff_space</a>()</tt>	The effective search space private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L504'>_end_Statistics_kappa</a>()</tt>	Karlin-altschul parameter k private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L508'>_end_Statistics_lambda</a>()</tt>	Karlin-altschul parameter lambda private.
<tt style='background-color:#E8E8E8;'> Blast.BlastParser <a href=' /Blast/NCBIXML.py#L512'>_end_Statistics_entropy</a>()</tt>	Karlin-altschul parameter h private.
<tt style='background-color:#E8E8E8;'> Blast. <a href=' /Blast/NCBIXML.py#L517'>read</a>(handle,debug)</tt>	Returns a single blast record assumes just one query.
<tt style='background-color:#E8E8E8;'> Blast. <a href=' /Blast/NCBIXML.py#L544'>parse</a>(handle,debug)</tt>	Returns an iterator a blast record for each query.
<tt style='background-color:#E8E8E8;'> Blast.MultipleAlignment <a href=' /Blast/Record.py#L214'>to_generic</a>(alphabet)</tt>	Retrieve generic alignment object for the given alignment.
<tt style='background-color:#E8E8E8;'> Blast. <a href=' /Blast/NCBIWWW.py#L27'>qblast</a>(program,database,sequence,url_base)</tt>	Do a blast search using the qblast server at ncbi or a cloud service provider.
<tt style='background-color:#E8E8E8;'> Blast. <a href=' /Blast/NCBIWWW.py#L195'>_parse_qblast_ref_page</a>(handle)</tt>	Extract a tuple of rid rtoe from the 'please wait' page private.
<tt style='background-color:#E8E8E8;'> Entrez.DataHandler <a href=' /Entrez/Parser.py#L212'>read</a>(handle)</tt>	Set up the parser and let it parse the xml results.
<tt style='background-color:#E8E8E8;'> Entrez.DataHandler <a href=' /Entrez/Parser.py#L448'>elementDecl</a>(name,model)</tt>	Callback function is called for each element declaration in a dtd.
<tt style='background-color:#E8E8E8;'> Entrez.DataHandler <a href=' /Entrez/Parser.py#L586'>externalEntityRefHandler</a>(context,base,systemId,publicId)</tt>	The purpose of this function is to load the dtd locally instead of downloading it from the url specified in the xml.
<tt style='background-color:#E8E8E8;'> Entrez. <a href=' /Entrez/__init__.py#L113'>epost</a>(db)</tt>	Post a file of identifiers for future use.
<tt style='background-color:#E8E8E8;'> Entrez. <a href=' /Entrez/__init__.py#L132'>efetch</a>(db)</tt>	Fetches entrez results which are returned as a handle.
<tt style='background-color:#E8E8E8;'> Entrez. <a href=' /Entrez/__init__.py#L183'>esearch</a>(db,term)</tt>	Esearch runs an entrez search and returns a handle to the results.
<tt style='background-color:#E8E8E8;'> Entrez. <a href=' /Entrez/__init__.py#L219'>elink</a>()</tt>	Elink checks for linked external articles and returns a handle.
<tt style='background-color:#E8E8E8;'> Entrez. <a href=' /Entrez/__init__.py#L258'>einfo</a>()</tt>	Einfo returns a summary of the entez databases as a results handle.
<tt style='background-color:#E8E8E8;'> Entrez. <a href=' /Entrez/__init__.py#L286'>esummary</a>()</tt>	Esummary retrieves document summaries as a results handle.
<tt style='background-color:#E8E8E8;'> Entrez. <a href=' /Entrez/__init__.py#L319'>egquery</a>()</tt>	Egquery provides entrez database counts for a global search.
<tt style='background-color:#E8E8E8;'> Entrez. <a href=' /Entrez/__init__.py#L353'>espell</a>()</tt>	Espell retrieves spelling suggestions returned in a results handle.
<tt style='background-color:#E8E8E8;'> Entrez. <a href=' /Entrez/__init__.py#L401'>ecitmatch</a>()</tt>	Ecitmatch retrieves pmids-citation linking ecitmatch retrieves pubmed ids pmids that correspond to a set of input citation strings.
<tt style='background-color:#E8E8E8;'> Entrez. <a href=' /Entrez/__init__.py#L431'>read</a>(handle,validate)</tt>	Parses an xml file from the ncbi entrez utilities into python objects.
<tt style='background-color:#E8E8E8;'> Entrez. <a href=' /Entrez/__init__.py#L457'>parse</a>(handle,validate)</tt>	Parses an xml file from the ncbi entrez utilities into python objects.
<tt style='background-color:#E8E8E8;'> Entrez. <a href=' /Entrez/__init__.py#L489'>_open</a>(cgi,params,post,ecitmatch)</tt>	Helper function to build the url and open a handle to it private.
<tt style='background-color:#E8E8E8;'> Alphabet.Alphabet <a href=' /Alphabet/__init__.py#L37'>contains</a>(other)</tt>	Does this alphabet 'contain' the other (obsolete?).
<tt style='background-color:#E8E8E8;'> Alphabet.Alphabet <a href=' /Alphabet/__init__.py#L47'>_case_less</a>()</tt>	Return a case-less variant of the current alphabet private.
<tt style='background-color:#E8E8E8;'> Alphabet.Alphabet <a href=' /Alphabet/__init__.py#L63'>_upper</a>()</tt>	Return an upper case variant of the current alphabet private.
<tt style='background-color:#E8E8E8;'> Alphabet.Alphabet <a href=' /Alphabet/__init__.py#L72'>_lower</a>()</tt>	Return a lower case variant of the current alphabet private.
<tt style='background-color:#E8E8E8;'> Alphabet.AlphabetEncoder <a href=' /Alphabet/__init__.py#L181'>contains</a>(other)</tt>	Does this alphabet 'contain' the other (obsolete?).
<tt style='background-color:#E8E8E8;'> Alphabet.AlphabetEncoder <a href=' /Alphabet/__init__.py#L189'>_upper</a>()</tt>	Return an upper case variant of the current alphabet private.
<tt style='background-color:#E8E8E8;'> Alphabet.AlphabetEncoder <a href=' /Alphabet/__init__.py#L193'>_lower</a>()</tt>	Return a lower case variant of the current alphabet private.
<tt style='background-color:#E8E8E8;'> Alphabet.Gapped <a href=' /Alphabet/__init__.py#L203'>contains</a>(other)</tt>	Does this alphabet 'contain' the other (obsolete?).
<tt style='background-color:#E8E8E8;'> Alphabet.Gapped <a href=' /Alphabet/__init__.py#L213'>_upper</a>()</tt>	Return an upper case variant of the current alphabet private.
<tt style='background-color:#E8E8E8;'> Alphabet.Gapped <a href=' /Alphabet/__init__.py#L217'>_lower</a>()</tt>	Return a lower case variant of the current alphabet private.
<tt style='background-color:#E8E8E8;'> Alphabet.HasStopCodon <a href=' /Alphabet/__init__.py#L227'>contains</a>(other)</tt>	Does this alphabet 'contain' the other (obsolete?).
<tt style='background-color:#E8E8E8;'> Alphabet.HasStopCodon <a href=' /Alphabet/__init__.py#L237'>_upper</a>()</tt>	Return an upper case variant of the current alphabet private.
<tt style='background-color:#E8E8E8;'> Alphabet.HasStopCodon <a href=' /Alphabet/__init__.py#L241'>_lower</a>()</tt>	Return a lower case variant of the current alphabet private.
<tt style='background-color:#E8E8E8;'> Alphabet. <a href=' /Alphabet/__init__.py#L246'>_get_base_alphabet</a>(alphabet)</tt>	Returns the non-gapped non-stop-codon alphabet object private.
<tt style='background-color:#E8E8E8;'> Alphabet. <a href=' /Alphabet/__init__.py#L256'>_ungap</a>(alphabet)</tt>	Returns the alphabet without any gap encoder private.
<tt style='background-color:#E8E8E8;'> Alphabet. <a href=' /Alphabet/__init__.py#L271'>_consensus_base_alphabet</a>(alphabets)</tt>	Returns a common but often generic base alphabet object private.
<tt style='background-color:#E8E8E8;'> Alphabet. <a href=' /Alphabet/__init__.py#L307'>_consensus_alphabet</a>(alphabets)</tt>	Returns a common but often generic alphabet object private.
<tt style='background-color:#E8E8E8;'> Alphabet. <a href=' /Alphabet/__init__.py#L384'>_check_type_compatible</a>(alphabets)</tt>	Returns true except for dna+rna or nucleotide+protein private.
<tt style='background-color:#E8E8E8;'> Alphabet. <a href=' /Alphabet/__init__.py#L423'>_verify_alphabet</a>(sequence)</tt>	Check all letters in sequence are in the alphabet private.
<tt style='background-color:#E8E8E8;'> Data.CodonTable <a href=' /Data/CodonTable.py#L69'>__str__</a>()</tt>	Returns a simple text representation of the codon table.
<tt style='background-color:#E8E8E8;'> Data. <a href=' /Data/CodonTable.py#L124'>make_back_table</a>(table,default_stop_codon)</tt>	Back a back-table naive single codon mapping.
<tt style='background-color:#E8E8E8;'> Data. <a href=' /Data/CodonTable.py#L215'>list_ambiguous_codons</a>(codons,ambiguous_nucleotide_values)</tt>	Extends a codon list to include all possible ambigous codons.
<tt style='background-color:#E8E8E8;'> Data. <a href=' /Data/CodonTable.py#L391'>register_ncbi_table</a>(name,alt_name,id,table)</tt>	Turns codon table data into objects and stores them in the dictionaries private.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/lcc.py#L11'>lcc_mult</a>(seq,wsize)</tt>	Local composition complexity lcc values over sliding window.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/lcc.py#L124'>lcc_simp</a>(seq)</tt>	Local composition complexity lcc for a sequence.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/CheckSum.py#L19'>crc32</a>(seq)</tt>	Returns the crc32 checksum for a sequence string or seq object.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/CheckSum.py#L62'>crc64</a>(s)</tt>	Returns the crc64 checksum for a sequence string or seq object.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/CheckSum.py#L86'>gcg</a>(seq)</tt>	Returns the gcg checksum int for a sequence string or seq object.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/CheckSum.py#L119'>seguid</a>(seq)</tt>	Returns the seguid string for a sequence string or seq object.
<tt style='background-color:#E8E8E8;'> SeqUtils.CodonAdaptationIndex <a href=' /SeqUtils/CodonUsage.py#L69'>set_cai_index</a>(index)</tt>	Sets up an index to be used when calculating cai for a gene.
<tt style='background-color:#E8E8E8;'> SeqUtils.CodonAdaptationIndex <a href=' /SeqUtils/CodonUsage.py#L77'>generate_index</a>(fasta_file)</tt>	Generate a codon usage index from a fasta file of cds sequences.
<tt style='background-color:#E8E8E8;'> SeqUtils.CodonAdaptationIndex <a href=' /SeqUtils/CodonUsage.py#L111'>cai_for_gene</a>(dna_sequence)</tt>	Calculate the cai float for the provided dna sequence string.
<tt style='background-color:#E8E8E8;'> SeqUtils.CodonAdaptationIndex <a href=' /SeqUtils/CodonUsage.py#L158'>print_index</a>()</tt>	Prints out the index used.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/MeltingTemp.py#L377'>make_table</a>(oldtable,values)</tt>	Return a table with thermodynamic parameters as dictionary.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/MeltingTemp.py#L412'>_check</a>(seq,method)</tt>	Return a sequence which fullfils the requirements of the given method.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/MeltingTemp.py#L443'>salt_correction</a>(Na,K,Tris,Mg)</tt>	Calculate a term to correct tm for salt ions.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/MeltingTemp.py#L555'>chem_correction</a>(melting_temp,DMSO,fmd,DMSOfactor)</tt>	Correct a given tm for dmso and formamide.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/MeltingTemp.py#L610'>Tm_Wallace</a>(seq,check,strict)</tt>	Calculate and return the tm using the 'wallace rule'.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/MeltingTemp.py#L650'>Tm_GC</a>(seq,check,strict,valueset)</tt>	Return the tm using empirical formulas based on gc content.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/MeltingTemp.py#L761'>_key_error</a>(neighbors,strict)</tt>	Throw an error or a warning if there is no data for the neighbors.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/MeltingTemp.py#L774'>Tm_NN</a>(seq,check,strict,c_seq)</tt>	Return the tm using nearest neighbor thermodynamics.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/MeltingTemp.py#L985'>Tm_staluc</a>(s,dnac,saltc,rna)</tt>	Returns dna/dna tm using nearest neighbor thermodynamics obsolete.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/__init__.py#L30'>GC</a>(seq)</tt>	Calculates g+c content returns the percentage float between 0 and 100.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/__init__.py#L50'>GC123</a>(seq)</tt>	Calculates total g+c content plus first second and third positions.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/__init__.py#L92'>GC_skew</a>(seq,window)</tt>	Calculates gc skew g-c / g+c for multiple windows along the sequence.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/__init__.py#L116'>xGC_skew</a>(seq,window,zoom,r)</tt>	Calculates and plots normal and accumulated gc skew (graphics !!!).
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/__init__.py#L180'>nt_search</a>(seq,subseq)</tt>	Search for a dna subseq in sequence.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/__init__.py#L215'>seq3</a>(seq,custom_map,undef_code)</tt>	Turn a one letter code protein sequence into one with three letter codes.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/__init__.py#L265'>seq1</a>(seq,custom_map,undef_code)</tt>	Turns a three-letter code protein sequence into one with single letter codes.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/__init__.py#L329'>molecular_weight</a>(seq,seq_type,double_stranded,circular)</tt>	Calculates the molecular weight of a dna rna or protein sequence.
<tt style='background-color:#E8E8E8;'> SeqUtils. <a href=' /SeqUtils/__init__.py#L462'>six_frame_translations</a>(seq,genetic_code)</tt>	Formatted string showing the 6 frame translations and gc content.
<tt style='background-color:#E8E8E8;'> SeqUtils.ProteinAnalysis <a href=' /SeqUtils/ProtParam.py#L58'>count_amino_acids</a>()</tt>	Count standard amino acids returns a dict.
<tt style='background-color:#E8E8E8;'> SeqUtils.ProteinAnalysis <a href=' /SeqUtils/ProtParam.py#L76'>get_amino_acids_percent</a>()</tt>	Calculate the amino acid content in percentages.
<tt style='background-color:#E8E8E8;'> SeqUtils.ProteinAnalysis <a href=' /SeqUtils/ProtParam.py#L98'>molecular_weight</a>()</tt>	Calculate mw from protein sequence.
<tt style='background-color:#E8E8E8;'> SeqUtils.ProteinAnalysis <a href=' /SeqUtils/ProtParam.py#L102'>aromaticity</a>()</tt>	Calculate the aromaticity according to lobry 1994.
<tt style='background-color:#E8E8E8;'> SeqUtils.ProteinAnalysis <a href=' /SeqUtils/ProtParam.py#L115'>instability_index</a>()</tt>	Calculate the instability index according to guruprasad et al 1990.
<tt style='background-color:#E8E8E8;'> SeqUtils.ProteinAnalysis <a href=' /SeqUtils/ProtParam.py#L135'>flexibility</a>()</tt>	Calculate the flexibility according to vihinen 1994.
<tt style='background-color:#E8E8E8;'> SeqUtils.ProteinAnalysis <a href=' /SeqUtils/ProtParam.py#L162'>gravy</a>()</tt>	Calculate the gravy according to kyte and doolittle.
<tt style='background-color:#E8E8E8;'> SeqUtils.ProteinAnalysis <a href=' /SeqUtils/ProtParam.py#L168'>_weight_list</a>(window,edge)</tt>	Makes a list of relative weight of the window edges compared to the window center.
<tt style='background-color:#E8E8E8;'> SeqUtils.ProteinAnalysis <a href=' /SeqUtils/ProtParam.py#L182'>protein_scale</a>(param_dict,window,edge)</tt>	Compute a profile by any amino acid scale.
<tt style='background-color:#E8E8E8;'> SeqUtils.ProteinAnalysis <a href=' /SeqUtils/ProtParam.py#L251'>isoelectric_point</a>()</tt>	Calculate the isoelectric point.
<tt style='background-color:#E8E8E8;'> SeqUtils.ProteinAnalysis <a href=' /SeqUtils/ProtParam.py#L261'>secondary_structure_fraction</a>()</tt>	Calculate fraction of helix turn and sheet.
<tt style='background-color:#E8E8E8;'> Pathway.Reaction <a href=' /Pathway/__init__.py#L71'>__init__</a>(reactants,catalysts,reversible,data)</tt>	Initializes a new reaction object.
<tt style='background-color:#E8E8E8;'> Pathway.Reaction <a href=' /Pathway/__init__.py#L87'>__eq__</a>(r)</tt>	Returns true iff self is equal to r.
<tt style='background-color:#E8E8E8;'> Pathway.Reaction <a href=' /Pathway/__init__.py#L95'>__ne__</a>(r)</tt>	Returns true iff self is not equal to r.
<tt style='background-color:#E8E8E8;'> Pathway.Reaction <a href=' /Pathway/__init__.py#L99'>__hash__</a>()</tt>	Returns a hashcode for self.
<tt style='background-color:#E8E8E8;'> Pathway.Reaction <a href=' /Pathway/__init__.py#L104'>__repr__</a>()</tt>	Returns a debugging string representation of self.
<tt style='background-color:#E8E8E8;'> Pathway.Reaction <a href=' /Pathway/__init__.py#L112'>__str__</a>()</tt>	Returns a string representation of self.
<tt style='background-color:#E8E8E8;'> Pathway.Reaction <a href=' /Pathway/__init__.py#L140'>reverse</a>()</tt>	Returns a new reaction that is the reverse of self.
<tt style='background-color:#E8E8E8;'> Pathway.Reaction <a href=' /Pathway/__init__.py#L148'>species</a>()</tt>	Returns a list of all species involved in self.
<tt style='background-color:#E8E8E8;'> Pathway.System <a href=' /Pathway/__init__.py#L164'>__init__</a>(reactions)</tt>	Initializes a new system object.
<tt style='background-color:#E8E8E8;'> Pathway.System <a href=' /Pathway/__init__.py#L168'>__repr__</a>()</tt>	Returns a debugging string representation of self.
<tt style='background-color:#E8E8E8;'> Pathway.System <a href=' /Pathway/__init__.py#L172'>__str__</a>()</tt>	Returns a string representation of self.
<tt style='background-color:#E8E8E8;'> Pathway.System <a href=' /Pathway/__init__.py#L178'>add_reaction</a>(reaction)</tt>	Adds reaction to self.
<tt style='background-color:#E8E8E8;'> Pathway.System <a href=' /Pathway/__init__.py#L182'>remove_reaction</a>(reaction)</tt>	Removes reaction from self.
<tt style='background-color:#E8E8E8;'> Pathway.System <a href=' /Pathway/__init__.py#L186'>reactions</a>()</tt>	Returns a list of the reactions in this system.
<tt style='background-color:#E8E8E8;'> Pathway.System <a href=' /Pathway/__init__.py#L194'>species</a>()</tt>	Returns a list of the species in this system.
<tt style='background-color:#E8E8E8;'> Pathway.System <a href=' /Pathway/__init__.py#L199'>stochiometry</a>()</tt>	Computes the stoichiometry matrix for self.
<tt style='background-color:#E8E8E8;'> Pathway.Interaction <a href=' /Pathway/__init__.py#L240'>__hash__</a>()</tt>	Returns a hashcode for self.
<tt style='background-color:#E8E8E8;'> Pathway.Interaction <a href=' /Pathway/__init__.py#L244'>__repr__</a>()</tt>	Returns a debugging string representation of self.
<tt style='background-color:#E8E8E8;'> Pathway.Interaction <a href=' /Pathway/__init__.py#L248'>__str__</a>()</tt>	Returns a string representation of self.
<tt style='background-color:#E8E8E8;'> Pathway.Network <a href=' /Pathway/__init__.py#L266'>__init__</a>(species)</tt>	Initializes a new network object.
<tt style='background-color:#E8E8E8;'> Pathway.Network <a href=' /Pathway/__init__.py#L270'>__repr__</a>()</tt>	Returns a debugging string representation of this network.
<tt style='background-color:#E8E8E8;'> Pathway.Network <a href=' /Pathway/__init__.py#L274'>__str__</a>()</tt>	Returns a string representation of this network.
<tt style='background-color:#E8E8E8;'> Pathway.Network <a href=' /Pathway/__init__.py#L279'>add_species</a>(species)</tt>	Adds species to this network.
<tt style='background-color:#E8E8E8;'> Pathway.Network <a href=' /Pathway/__init__.py#L283'>add_interaction</a>(source,sink,interaction)</tt>	Adds interaction to this network.
<tt style='background-color:#E8E8E8;'> Pathway.Network <a href=' /Pathway/__init__.py#L287'>source</a>(species)</tt>	Returns list of unique sources for species.
<tt style='background-color:#E8E8E8;'> Pathway.Network <a href=' /Pathway/__init__.py#L291'>source_interactions</a>(species)</tt>	Returns list of source interaction pairs for species.
<tt style='background-color:#E8E8E8;'> Pathway.Network <a href=' /Pathway/__init__.py#L295'>sink</a>(species)</tt>	Returns list of unique sinks for species.
<tt style='background-color:#E8E8E8;'> Pathway.Network <a href=' /Pathway/__init__.py#L299'>sink_interactions</a>(species)</tt>	Returns list of sink interaction pairs for species.
<tt style='background-color:#E8E8E8;'> Pathway.Network <a href=' /Pathway/__init__.py#L303'>species</a>()</tt>	Returns list of the species in this network.
<tt style='background-color:#E8E8E8;'> Pathway.Network <a href=' /Pathway/__init__.py#L307'>interactions</a>()</tt>	Returns list of the unique interactions in this network.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L14'>__init__</a>(nodes)</tt>	Initializes a new graph object.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L22'>__eq__</a>(g)</tt>	Returns true if g is equal to this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L29'>__ne__</a>(g)</tt>	Returns true if g is not equal to this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L33'>__repr__</a>()</tt>	Returns a unique string representation of this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L42'>__str__</a>()</tt>	Returns a concise string description of this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L53'>add_node</a>(node)</tt>	Adds a node to this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L58'>add_edge</a>(source,to,label)</tt>	Adds an edge to this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L72'>child_edges</a>(parent)</tt>	Returns a list of child label pairs for parent.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L79'>children</a>(parent)</tt>	Returns a list of unique children for parent.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L83'>edges</a>(label)</tt>	Returns a list of all the edges with this label.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L89'>labels</a>()</tt>	Returns a list of all the edge labels in this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L93'>nodes</a>()</tt>	Returns a list of the nodes in this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L97'>parent_edges</a>(child)</tt>	Returns a list of parent label pairs for child.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L108'>parents</a>(child)</tt>	Returns a list of unique parents for child.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L112'>remove_node</a>(node)</tt>	Removes node and all edges connected to it.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.Graph <a href=' /Pathway/Rep/Graph.py#L136'>remove_edge</a>(parent,child,label)</tt>	Removes edge -- not implemented.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L15'>__init__</a>(nodes)</tt>	Initializes a new multigraph object.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L22'>__eq__</a>(g)</tt>	Returns true if g is equal to this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L28'>__ne__</a>(g)</tt>	Returns true if g is not equal to this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L32'>__repr__</a>()</tt>	Returns a unique string representation of this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L40'>__str__</a>()</tt>	Returns a concise string description of this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L51'>add_node</a>(node)</tt>	Adds a node to this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L56'>add_edge</a>(source,to,label)</tt>	Adds an edge to this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L68'>child_edges</a>(parent)</tt>	Returns a list of child label pairs for parent.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L74'>children</a>(parent)</tt>	Returns a list of unique children for parent.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L78'>edges</a>(label)</tt>	Returns a list of all the edges with this label.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L84'>labels</a>()</tt>	Returns a list of all the edge labels in this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L88'>nodes</a>()</tt>	Returns a list of the nodes in this graph.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L92'>parent_edges</a>(child)</tt>	Returns a list of parent label pairs for child.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L103'>parents</a>(child)</tt>	Returns a list of unique parents for child.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L107'>remove_node</a>(node)</tt>	Removes node and all edges connected to it.
<tt style='background-color:#E8E8E8;'> Pathway.Rep.MultiGraph <a href=' /Pathway/Rep/MultiGraph.py#L127'>remove_edge</a>(parent,child,label)</tt>	Removes edge -- not implemented.
<tt style='background-color:#E8E8E8;'> Pathway.Rep. <a href=' /Pathway/Rep/MultiGraph.py#L135'>df_search</a>(graph,root)</tt>	Depth first search of g.
<tt style='background-color:#E8E8E8;'> Pathway.Rep. <a href=' /Pathway/Rep/MultiGraph.py#L162'>bf_search</a>(graph,root)</tt>	Breadth first search of g.
<tt style='background-color:#E8E8E8;'> Medline. <a href=' /Medline/__init__.py#L102'>parse</a>(handle)</tt>	Read medline records one by one from the handle.
<tt style='background-color:#E8E8E8;'> Medline. <a href=' /Medline/__init__.py#L154'>read</a>(handle)</tt>	Read a single medline record from the handle.
<tt style='background-color:#E8E8E8;'> Compass. <a href=' /Compass/__init__.py#L20'>read</a>(handle)</tt>	Reads a compass file containing one compass record.
<tt style='background-color:#E8E8E8;'> Compass. <a href=' /Compass/__init__.py#L54'>parse</a>(handle)</tt>	Iterates over records in a compass file.
<tt style='background-color:#E8E8E8;'> Compass.Record <a href=' /Compass/__init__.py#L120'>query_coverage</a>()</tt>	Return the length of the query covered in the alignment.
<tt style='background-color:#E8E8E8;'> Compass.Record <a href=' /Compass/__init__.py#L125'>hit_coverage</a>()</tt>	Return the length of the hit covered in the alignment.
<tt style='background-color:#E8E8E8;'> SVDSuperimposer.SVDSuperimposer <a href=' /SVDSuperimposer/__init__.py#L111'>_rms</a>(coords1,coords2)</tt>	Return rms deviations between coords1 and coords2.
<tt style='background-color:#E8E8E8;'> SVDSuperimposer.SVDSuperimposer <a href=' /SVDSuperimposer/__init__.py#L119'>set</a>(reference_coords,coords)</tt>	Set the coordinates to be superimposed.
<tt style='background-color:#E8E8E8;'> SVDSuperimposer.SVDSuperimposer <a href=' /SVDSuperimposer/__init__.py#L141'>run</a>()</tt>	Superimpose the coordinate sets.
<tt style='background-color:#E8E8E8;'> SVDSuperimposer.SVDSuperimposer <a href=' /SVDSuperimposer/__init__.py#L162'>get_transformed</a>()</tt>	Get the transformed coordinate set.
<tt style='background-color:#E8E8E8;'> SVDSuperimposer.SVDSuperimposer <a href=' /SVDSuperimposer/__init__.py#L172'>get_rotran</a>()</tt>	Right multiplying rotation matrix and translation.
<tt style='background-color:#E8E8E8;'> SVDSuperimposer.SVDSuperimposer <a href=' /SVDSuperimposer/__init__.py#L178'>get_init_rms</a>()</tt>	Root mean square deviation of untransformed coordinates.
<tt style='background-color:#E8E8E8;'> SVDSuperimposer.SVDSuperimposer <a href=' /SVDSuperimposer/__init__.py#L186'>get_rms</a>()</tt>	Root mean square deviation of superimposed coordinates.
<tt style='background-color:#E8E8E8;'> PopGen.SimCoal.SimCoalController <a href=' /PopGen/SimCoal/Controller.py#L16'>__init__</a>(simcoal_dir)</tt>	Initializes the controller deprecated.
<tt style='background-color:#E8E8E8;'> PopGen.SimCoal.FastSimCoalController <a href=' /PopGen/SimCoal/Controller.py#L170'>__init__</a>(fastsimcoal_dir,bin_name)</tt>	Initializes the controller.
<tt style='background-color:#E8E8E8;'> PopGen.SimCoal.SimCoalCache <a href=' /PopGen/SimCoal/Cache.py#L15'>__init__</a>(data_dir,simcoal_dir)</tt>	Initializes the cache.
<tt style='background-color:#E8E8E8;'> PopGen.SimCoal.SimCoalCache <a href=' /PopGen/SimCoal/Cache.py#L56'>listSimulations</a>(ploidy)</tt>	Lists available simulations.
<tt style='background-color:#E8E8E8;'> PopGen.SimCoal.SimCoalCache <a href=' /PopGen/SimCoal/Cache.py#L65'>getSimulation</a>(sim_name,ploidy,parDir)</tt>	Makes available a cached simulation.
<tt style='background-color:#E8E8E8;'> PopGen.SimCoal. <a href=' /PopGen/SimCoal/Template.py#L150'>get_demography_template</a>(stream,model,tp_dir)</tt>	Gets a demograpy template.
<tt style='background-color:#E8E8E8;'> PopGen.SimCoal. <a href=' /PopGen/SimCoal/Template.py#L182'>get_chr_template</a>(stream,chrs)</tt>	Writes a simcoal2 loci template part.
<tt style='background-color:#E8E8E8;'> PopGen.SimCoal. <a href=' /PopGen/SimCoal/Template.py#L213'>generate_simcoal_from_template</a>(model,chrs,params,out_dir)</tt>	Writes a complete simcoal2 template file.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop. <a href=' /PopGen/GenePop/Controller.py#L17'>_gp_float</a>(tok)</tt>	Gets a float from a token if it fails returns the string private.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop. <a href=' /PopGen/GenePop/Controller.py#L25'>_gp_int</a>(tok)</tt>	Gets a int from a token if it fails returns the string private.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop._GenePopCommandline <a href=' /PopGen/GenePop/Controller.py#L195'>set_menu</a>(option_list)</tt>	Sets the menu option.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop._GenePopCommandline <a href=' /PopGen/GenePop/Controller.py#L203'>set_input</a>(fname)</tt>	Sets the input file name.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.GenePopController <a href=' /PopGen/GenePop/Controller.py#L209'>__init__</a>(genepop_dir)</tt>	Initializes the controller.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.GenePopController <a href=' /PopGen/GenePop/Controller.py#L248'>_test_pop_hz_both</a>(fname,type,ext,enum_test)</tt>	Hardy-weinberg test for heterozygote deficiency/excess.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.GenePopController <a href=' /PopGen/GenePop/Controller.py#L267'>_test_global_hz_both</a>(fname,type,ext,enum_test)</tt>	Global hardy-weinberg test for heterozygote deficiency/excess.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.GenePopController <a href=' /PopGen/GenePop/Controller.py#L311'>test_pop_hz_deficiency</a>(fname,enum_test,dememorization,batches)</tt>	Hardy-weinberg test for heterozygote deficiency.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.GenePopController <a href=' /PopGen/GenePop/Controller.py#L326'>test_pop_hz_excess</a>(fname,enum_test,dememorization,batches)</tt>	Hardy-weinberg test for heterozygote deficiency.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.GenePopController <a href=' /PopGen/GenePop/Controller.py#L341'>test_pop_hz_prob</a>(fname,ext,enum_test,dememorization)</tt>	Hardy-weinberg test based on probability.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.GenePopController <a href=' /PopGen/GenePop/Controller.py#L374'>test_global_hz_deficiency</a>(fname,enum_test,dememorization,batches)</tt>	Global hardy-weinberg test for heterozygote deficiency.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.GenePopController <a href=' /PopGen/GenePop/Controller.py#L393'>test_global_hz_excess</a>(fname,enum_test,dememorization,batches)</tt>	Global hardy-weinberg test for heterozygote excess.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.GenePopController <a href=' /PopGen/GenePop/Controller.py#L514'>calc_allele_genotype_freqs</a>(fname)</tt>	Calculates allele and genotype frequencies per locus and per sample.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.GenePopController <a href=' /PopGen/GenePop/Controller.py#L707'>calc_fst_all</a>(fname)</tt>	Executes genepop and gets fst/fis/fit all populations parameters.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.GenePopController <a href=' /PopGen/GenePop/Controller.py#L817'>_calc_ibd</a>(fname,sub,stat,scale)</tt>	Calculates isolation by distance statistics.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.GenePopController <a href=' /PopGen/GenePop/Controller.py#L851'>calc_ibd_diplo</a>(fname,stat,scale,min_dist)</tt>	Calculates isolation by distance statistics for diploid data.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.GenePopController <a href=' /PopGen/GenePop/Controller.py#L861'>calc_ibd_haplo</a>(fname,stat,scale,min_dist)</tt>	Calculates isolation by distance statistics for haploid data.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop. <a href=' /PopGen/GenePop/__init__.py#L47'>read</a>(fname)</tt>	Parses a file containing a genepop file.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.FileRecord <a href=' /PopGen/GenePop/FileParser.py#L73'>__str__</a>()</tt>	Returns reconstructs a genepop textual representation.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.FileRecord <a href=' /PopGen/GenePop/FileParser.py#L111'>start_read</a>()</tt>	Starts parsing a file containing a genepop file.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.FileRecord <a href=' /PopGen/GenePop/FileParser.py#L133'>skip_header</a>()</tt>	Skips the header to be done after a re-open.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.FileRecord <a href=' /PopGen/GenePop/FileParser.py#L141'>seek_position</a>(pop,indiv)</tt>	Seeks a certain position in the file.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.FileRecord <a href=' /PopGen/GenePop/FileParser.py#L156'>skip_population</a>()</tt>	Skips the current population returns true if there is another pop.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.FileRecord <a href=' /PopGen/GenePop/FileParser.py#L167'>get_individual</a>()</tt>	Gets the next individual.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.FileRecord <a href=' /PopGen/GenePop/FileParser.py#L189'>remove_population</a>(pos,fname)</tt>	Removes a population by position.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.FileRecord <a href=' /PopGen/GenePop/FileParser.py#L230'>remove_locus_by_position</a>(pos,fname)</tt>	Removes a locus by position.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.FileRecord <a href=' /PopGen/GenePop/FileParser.py#L270'>remove_loci_by_position</a>(positions,fname)</tt>	Removes a set of loci by position.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.FileRecord <a href=' /PopGen/GenePop/FileParser.py#L315'>remove_locus_by_name</a>(name,fname)</tt>	Removes a locus by name.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.FileRecord <a href=' /PopGen/GenePop/FileParser.py#L329'>remove_loci_by_name</a>(names,fname)</tt>	Removes a loci list by name.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop. <a href=' /PopGen/GenePop/__init__.py#L47'>read</a>(handle)</tt>	Parses a handle containing a genepop file.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.EasyController <a href=' /PopGen/GenePop/EasyController.py#L17'>__init__</a>(fname,genepop_dir)</tt>	Initializes the controller.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.EasyController <a href=' /PopGen/GenePop/EasyController.py#L63'>estimate_nm</a>()</tt>	Estimate nm just a simple bridge.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.EasyController <a href=' /PopGen/GenePop/EasyController.py#L67'>get_heterozygosity_info</a>(pop_pos,locus_name)</tt>	Returns the heterozygosity info for a certain locus on a population.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.EasyController <a href=' /PopGen/GenePop/EasyController.py#L78'>get_genotype_count</a>(pop_pos,locus_name)</tt>	Returns the genotype counts for a certain population and locus.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.EasyController <a href=' /PopGen/GenePop/EasyController.py#L85'>get_fis</a>(pop_pos,locus_name)</tt>	Returns the fis for a certain population and locus.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.EasyController <a href=' /PopGen/GenePop/EasyController.py#L102'>get_alleles</a>(pop_pos,locus_name)</tt>	Returns the alleles for a certain population and locus.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.EasyController <a href=' /PopGen/GenePop/EasyController.py#L109'>get_alleles_all_pops</a>(locus_name)</tt>	Returns the alleles for a certain population and locus.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.EasyController <a href=' /PopGen/GenePop/EasyController.py#L134'>get_multilocus_f_stats</a>()</tt>	Returns the multilocus f stats.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.EasyController <a href=' /PopGen/GenePop/EasyController.py#L142'>get_f_stats</a>(locus_name)</tt>	Returns f stats for a locus.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.Record <a href=' /PopGen/GenePop/__init__.py#L132'>__str__</a>()</tt>	Returns reconstructs a genepop textual representation.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.Record <a href=' /PopGen/GenePop/__init__.py#L154'>split_in_pops</a>(pop_names)</tt>	Splits a gp record in a dictionary with 1 pop per entry.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.Record <a href=' /PopGen/GenePop/__init__.py#L176'>split_in_loci</a>(gp)</tt>	Splits a gp record in a dictionary with 1 locus per entry.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.Record <a href=' /PopGen/GenePop/__init__.py#L198'>remove_population</a>(pos)</tt>	Removes a population by position.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.Record <a href=' /PopGen/GenePop/__init__.py#L202'>remove_locus_by_position</a>(pos)</tt>	Removes a locus by position.
<tt style='background-color:#E8E8E8;'> PopGen.GenePop.Record <a href=' /PopGen/GenePop/__init__.py#L211'>remove_locus_by_name</a>(name)</tt>	Removes a locus by name.
<tt style='background-color:#E8E8E8;'> PopGen.FDist.FDistController <a href=' /PopGen/FDist/Controller.py#L31'>__init__</a>(fdist_dir,ext)</tt>	Initializes the controller.
<tt style='background-color:#E8E8E8;'> PopGen.FDist.FDistController <a href=' /PopGen/FDist/Controller.py#L50'>_get_path</a>(app)</tt>	Returns the path to an fdist application.
<tt style='background-color:#E8E8E8;'> PopGen.FDist.FDistController <a href=' /PopGen/FDist/Controller.py#L60'>_get_temp_file</a>()</tt>	Gets a temporary file name.
<tt style='background-color:#E8E8E8;'> PopGen.FDist.FDistController <a href=' /PopGen/FDist/Controller.py#L108'>_generate_intfile</a>(data_dir)</tt>	Generates an intfile.
<tt style='background-color:#E8E8E8;'> PopGen.FDist.FDistController <a href=' /PopGen/FDist/Controller.py#L120'>run_fdist</a>(npops,nsamples,fst,sample_size)</tt>	Executes d fdist.
<tt style='background-color:#E8E8E8;'> PopGen.FDist.FDistController <a href=' /PopGen/FDist/Controller.py#L189'>run_fdist_force_fst</a>(npops,nsamples,fst,sample_size)</tt>	Executes fdist trying to force fst.
<tt style='background-color:#E8E8E8;'> PopGen.FDist. <a href=' /PopGen/FDist/Utils.py#L17'>convert_genepop_to_fdist</a>(gp_rec,report_pops)</tt>	Converts a genepop record to a fdist one.
<tt style='background-color:#E8E8E8;'> PopGen.FDist. <a href=' /PopGen/FDist/Utils.py#L33'>_convert_genepop_to_fdist</a>(gp_rec)</tt>	Converts a standard genepop record to a fdist one.
<tt style='background-color:#E8E8E8;'> PopGen.FDist. <a href=' /PopGen/FDist/Utils.py#L74'>_convert_genepop_to_fdist_big</a>(gp_rec,report_pops)</tt>	Converts a big genepop record to a fdist one.
<tt style='background-color:#E8E8E8;'> PopGen.FDist. <a href=' /PopGen/FDist/Utils.py#L135'>_convert_genepop_to_fdist_big_old</a>(gp_rec,report_loci)</tt>	Converts a big genepop record to a fdist one.
<tt style='background-color:#E8E8E8;'> PopGen.FDist. <a href=' /PopGen/FDist/Utils.py#L205'>approximate_fst</a>(desired_fst,simulated_fst,parameter_fst,max_run_fst)</tt>	Calculates the next fst attempt in order to approximate a desired fst.
<tt style='background-color:#E8E8E8;'> PopGen.FDist.FDistAsync <a href=' /PopGen/FDist/Async.py#L39'>run_job</a>(parameters,input_files)</tt>	Runs fdist asynchronously.
<tt style='background-color:#E8E8E8;'> PopGen.FDist.SplitFDist <a href=' /PopGen/FDist/Async.py#L97'>monitor</a>()</tt>	Monitors and reports (using report_fun) execution.
<tt style='background-color:#E8E8E8;'> PopGen.FDist.SplitFDist <a href=' /PopGen/FDist/Async.py#L133'>acquire</a>()</tt>	Allows the external acquisition of the lock.
<tt style='background-color:#E8E8E8;'> PopGen.FDist.SplitFDist <a href=' /PopGen/FDist/Async.py#L138'>release</a>()</tt>	Allows the external release of the lock.
<tt style='background-color:#E8E8E8;'> PopGen.FDist. <a href=' /PopGen/FDist/__init__.py#L30'>read</a>(handle)</tt>	Parses fdist data into a record object.
<tt style='background-color:#E8E8E8;'> PopGen.Async.Async <a href=' /PopGen/Async/__init__.py#L41'>run_program</a>(program,parameters,input_files)</tt>	Runs a program.
<tt style='background-color:#E8E8E8;'> PopGen.Async.Async <a href=' /PopGen/Async/__init__.py#L67'>_run_program</a>(id,program,parameters,input_files)</tt>	Actually run the program handled by a subclass private.
<tt style='background-color:#E8E8E8;'> PopGen.Async.Async <a href=' /PopGen/Async/__init__.py#L75'>get_result</a>(id)</tt>	Returns results for a certain id the info for that id is forgotten.
<tt style='background-color:#E8E8E8;'> PopGen.Async.FileRetriever <a href=' /PopGen/Async/__init__.py#L104'>get_File_list</a>()</tt>	Returns the list of available files.
<tt style='background-color:#E8E8E8;'> Statistics. <a href=' /Statistics/lowess.py#L38'>lowess</a>(x,y,f,iter)</tt>	Lowess(x y f=2 /3 iter=3) -> yest.
<tt style='background-color:#E8E8E8;'> SubsMat.SeqMat <a href=' /SubsMat/__init__.py#L208'>_full_to_half</a>()</tt>	Convert a full-matrix to a half-matrix.
<tt style='background-color:#E8E8E8;'> SubsMat.SeqMat <a href=' /SubsMat/__init__.py#L284'>print_mat</a>(f,format,bottomformat,alphabet)</tt>	Print a nice half-matrix.
<tt style='background-color:#E8E8E8;'> SubsMat.SeqMat <a href=' /SubsMat/__init__.py#L319'>__str__</a>()</tt>	Print a nice half-matrix.
<tt style='background-color:#E8E8E8;'> SubsMat.SeqMat <a href=' /SubsMat/__init__.py#L341'>__sub__</a>(other)</tt>	Returns a number which is the subtraction product of the two matrices.
<tt style='background-color:#E8E8E8;'> SubsMat.SubstitutionMatrix <a href=' /SubsMat/__init__.py#L381'>calculate_relative_entropy</a>(obs_freq_mat)</tt>	Calculate and return relative entropy w r t observed frequency matrix.
<tt style='background-color:#E8E8E8;'> SubsMat.LogOddsMatrix <a href=' /SubsMat/__init__.py#L394'>calculate_relative_entropy</a>(obs_freq_mat)</tt>	Calculate and return relative entropy w r t observed frequency matrix.
<tt style='background-color:#E8E8E8;'> SubsMat. <a href=' /SubsMat/__init__.py#L402'>_build_obs_freq_mat</a>(acc_rep_mat)</tt>	Build_obs_freq_mat(acc_rep_mat): build the observed frequency matrix from an accepted replacements matrix.
<tt style='background-color:#E8E8E8;'> SubsMat. <a href=' /SubsMat/__init__.py#L429'>_build_exp_freq_mat</a>(exp_freq_table)</tt>	Build an expected frequency matrix.
<tt style='background-color:#E8E8E8;'> SubsMat. <a href=' /SubsMat/__init__.py#L446'>_build_subs_mat</a>(obs_freq_mat,exp_freq_mat)</tt>	Build the substitution matrix.
<tt style='background-color:#E8E8E8;'> SubsMat. <a href=' /SubsMat/__init__.py#L459'>_build_log_odds_mat</a>(subs_mat,logbase,factor,round_digit)</tt>	_build_log_odds_mat(subs_mat logbase=10 factor=10 0 round_digit=1):.
<tt style='background-color:#E8E8E8;'> Graphics.ChromosomeCounts <a href=' /Graphics/DisplayRepresentation.py#L42'>__init__</a>(segment_names,color_scheme)</tt>	Initialize a representation of chromosome counts.
<tt style='background-color:#E8E8E8;'> Graphics.ChromosomeCounts <a href=' /Graphics/DisplayRepresentation.py#L66'>add_count</a>(segment_name,count)</tt>	Add counts to the given segment name.
<tt style='background-color:#E8E8E8;'> Graphics.ChromosomeCounts <a href=' /Graphics/DisplayRepresentation.py#L82'>scale_segment_value</a>(segment_name,scale_value)</tt>	Divide the counts for a segment by some kind of scale value.
<tt style='background-color:#E8E8E8;'> Graphics.ChromosomeCounts <a href=' /Graphics/DisplayRepresentation.py#L94'>add_label</a>(segment_name,label)</tt>	Add a label to a specific segment.
<tt style='background-color:#E8E8E8;'> Graphics.ChromosomeCounts <a href=' /Graphics/DisplayRepresentation.py#L104'>set_scale</a>(segment_name,scale)</tt>	Set the scale for a specific chromosome segment.
<tt style='background-color:#E8E8E8;'> Graphics.ChromosomeCounts <a href=' /Graphics/DisplayRepresentation.py#L117'>get_segment_info</a>()</tt>	Retrieve the color and label info about the segments.
<tt style='background-color:#E8E8E8;'> Graphics.ChromosomeCounts <a href=' /Graphics/DisplayRepresentation.py#L133'>fill_chromosome</a>(chromosome)</tt>	Add the collected segment information to a chromosome for drawing.
<tt style='background-color:#E8E8E8;'> Graphics.ChromosomeCounts <a href=' /Graphics/DisplayRepresentation.py#L179'>_color_from_count</a>(count)</tt>	Translate the given count into a color using the color scheme.
<tt style='background-color:#E8E8E8;'> Graphics.ColorSpiral <a href=' /Graphics/ColorSpiral.py#L50'>__init__</a>(a,b,v_init,v_final)</tt>	Initialise a logarithmic spiral path through hsv colour space arguments.
<tt style='background-color:#E8E8E8;'> Graphics.ColorSpiral <a href=' /Graphics/ColorSpiral.py#L76'>get_colors</a>(k,offset)</tt>	Generate k different rbg colours evenly-space on the spiral.
<tt style='background-color:#E8E8E8;'> Graphics. <a href=' /Graphics/ColorSpiral.py#L163'>get_colors</a>(k)</tt>	Returns k colours selected by the colorspiral object as a generator.
<tt style='background-color:#E8E8E8;'> Graphics. <a href=' /Graphics/ColorSpiral.py#L175'>get_color_dict</a>(l)</tt>	Returns a dictionary of colours using the provided values as keys.
<tt style='background-color:#E8E8E8;'> Graphics._ChromosomeComponent <a href=' /Graphics/BasicChromosome.py#L56'>__init__</a>()</tt>	Initialize a chromosome component.
<tt style='background-color:#E8E8E8;'> Graphics._ChromosomeComponent <a href=' /Graphics/BasicChromosome.py#L67'>add</a>(component)</tt>	Add a sub_component to the list of components under this item.
<tt style='background-color:#E8E8E8;'> Graphics._ChromosomeComponent <a href=' /Graphics/BasicChromosome.py#L75'>remove</a>(component)</tt>	Remove the specified component from the subcomponents.
<tt style='background-color:#E8E8E8;'> Graphics._ChromosomeComponent <a href=' /Graphics/BasicChromosome.py#L87'>draw</a>()</tt>	Draw the specified component.
<tt style='background-color:#E8E8E8;'> Graphics.Organism <a href=' /Graphics/BasicChromosome.py#L116'>draw</a>(output_file,title)</tt>	Draw out the information for the organism.
<tt style='background-color:#E8E8E8;'> Graphics.Organism <a href=' /Graphics/BasicChromosome.py#L163'>_draw_title</a>(cur_drawing,title,width,height)</tt>	Write out the title of the organism figure.
<tt style='background-color:#E8E8E8;'> Graphics.Organism <a href=' /Graphics/BasicChromosome.py#L173'>_draw_legend</a>(cur_drawing,start_y,width)</tt>	Draw a legend for the figure.
<tt style='background-color:#E8E8E8;'> Graphics.Chromosome <a href=' /Graphics/BasicChromosome.py#L189'>__init__</a>(chromosome_name)</tt>	Initialize a chromosome for drawing.
<tt style='background-color:#E8E8E8;'> Graphics.Chromosome <a href=' /Graphics/BasicChromosome.py#L232'>subcomponent_size</a>()</tt>	Return the scaled size of all subcomponents of this component.
<tt style='background-color:#E8E8E8;'> Graphics.Chromosome <a href=' /Graphics/BasicChromosome.py#L241'>draw</a>(cur_drawing)</tt>	Draw a chromosome on the specified template.
<tt style='background-color:#E8E8E8;'> Graphics.Chromosome <a href=' /Graphics/BasicChromosome.py#L288'>_draw_label</a>(cur_drawing,label_name)</tt>	Draw a label for the chromosome.
<tt style='background-color:#E8E8E8;'> Graphics.Chromosome <a href=' /Graphics/BasicChromosome.py#L301'>_draw_labels</a>(cur_drawing,left_labels,right_labels)</tt>	Layout and draw sub-feature labels for the chromosome.
<tt style='background-color:#E8E8E8;'> Graphics.ChromosomeSegment <a href=' /Graphics/BasicChromosome.py#L374'>__init__</a>()</tt>	Initialize a chromosomesegment.
<tt style='background-color:#E8E8E8;'> Graphics.ChromosomeSegment <a href=' /Graphics/BasicChromosome.py#L416'>draw</a>(cur_drawing)</tt>	Draw a chromosome segment.
<tt style='background-color:#E8E8E8;'> Graphics.ChromosomeSegment <a href=' /Graphics/BasicChromosome.py#L430'>_draw_subcomponents</a>(cur_drawing)</tt>	Draw any subcomponents of the chromosome segment.
<tt style='background-color:#E8E8E8;'> Graphics.ChromosomeSegment <a href=' /Graphics/BasicChromosome.py#L438'>_draw_segment</a>(cur_drawing)</tt>	Draw the current chromosome segment.
<tt style='background-color:#E8E8E8;'> Graphics.ChromosomeSegment <a href=' /Graphics/BasicChromosome.py#L468'>_overdraw_subcomponents</a>(cur_drawing)</tt>	Draw any subcomponents of the chromosome segment over the main part.
<tt style='background-color:#E8E8E8;'> Graphics.ChromosomeSegment <a href=' /Graphics/BasicChromosome.py#L476'>_draw_label</a>(cur_drawing)</tt>	Add a label to the chromosome segment.
<tt style='background-color:#E8E8E8;'> Graphics. <a href=' /Graphics/BasicChromosome.py#L498'>_spring_layout</a>(desired,minimum,maximum,gap)</tt>	Function to try and layout label co-ordinates or other floats private.
<tt style='background-color:#E8E8E8;'> Graphics.AnnotatedChromosomeSegment <a href=' /Graphics/BasicChromosome.py#L607'>__init__</a>(bp_length,features,default_feature_color,name_qualifiers)</tt>	Like the chromosomesegment but accepts a list of features.
<tt style='background-color:#E8E8E8;'> Graphics.AnnotatedChromosomeSegment <a href=' /Graphics/BasicChromosome.py#L644'>_overdraw_subcomponents</a>(cur_drawing)</tt>	Draw any annotated features on the chromosome segment.
<tt style='background-color:#E8E8E8;'> Graphics.TelomereSegment <a href=' /Graphics/BasicChromosome.py#L730'>__init__</a>(inverted)</tt>	Initialize a segment at the end of a chromosome.
<tt style='background-color:#E8E8E8;'> Graphics.TelomereSegment <a href=' /Graphics/BasicChromosome.py#L745'>_draw_segment</a>(cur_drawing)</tt>	Draw a half circle representing the end of a linear chromosome.
<tt style='background-color:#E8E8E8;'> Graphics.ComparativeScatterPlot <a href=' /Graphics/Comparative.py#L62'>draw_to_file</a>(output_file,title)</tt>	Write the comparative plot to a file.
<tt style='background-color:#E8E8E8;'> Graphics.ComparativeScatterPlot <a href=' /Graphics/Comparative.py#L84'>_draw_title</a>(cur_drawing,title,width,height)</tt>	Add a title to the page we are outputting.
<tt style='background-color:#E8E8E8;'> Graphics.ComparativeScatterPlot <a href=' /Graphics/Comparative.py#L94'>_draw_scatter_plot</a>(cur_drawing,x_start,y_start,x_end)</tt>	Draw a scatter plot on the drawing with the given coordinates.
<tt style='background-color:#E8E8E8;'> Graphics.ComparativeScatterPlot <a href=' /Graphics/Comparative.py#L123'>_set_colors_and_shapes</a>(scatter_plot,display_info)</tt>	Set the colors and shapes of the points displayed.
<tt style='background-color:#E8E8E8;'> Graphics.ComparativeScatterPlot <a href=' /Graphics/Comparative.py#L150'>_find_min_max</a>(info)</tt>	Find min and max for x and y coordinates in the given data.
<tt style='background-color:#E8E8E8;'> Graphics. <a href=' /Graphics/__init__.py#L26'>_write</a>(drawing,output_file,format,dpi)</tt>	Helper function to standardize output to files private.
<tt style='background-color:#E8E8E8;'> Graphics.DistributionPage <a href=' /Graphics/Distribution.py#L47'>draw</a>(output_file,title)</tt>	Draw out the distribution information.
<tt style='background-color:#E8E8E8;'> Graphics.DistributionPage <a href=' /Graphics/Distribution.py#L78'>_draw_title</a>(cur_drawing,title,width,height)</tt>	Add the title of the figure to the drawing private.
<tt style='background-color:#E8E8E8;'> Graphics.DistributionPage <a href=' /Graphics/Distribution.py#L87'>_draw_distributions</a>(cur_drawing,start_x_pos,x_pos_change,start_y_pos)</tt>	Draw all of the distributions on the page.
<tt style='background-color:#E8E8E8;'> Graphics.DistributionPage <a href=' /Graphics/Distribution.py#L124'>_draw_legend</a>(cur_drawing,start_y,width)</tt>	Add a legend to the figure.
<tt style='background-color:#E8E8E8;'> Graphics.BarChartDistribution <a href=' /Graphics/Distribution.py#L135'>__init__</a>(display_info)</tt>	Initialize a bar chart display of distribution info.
<tt style='background-color:#E8E8E8;'> Graphics.BarChartDistribution <a href=' /Graphics/Distribution.py#L155'>draw</a>(cur_drawing,start_x,start_y,end_x)</tt>	Draw a bar chart with the info in the specified range.
<tt style='background-color:#E8E8E8;'> Graphics.BarChartDistribution <a href=' /Graphics/Distribution.py#L197'>_draw_title</a>(cur_drawing,title,start_x,start_y)</tt>	Add the title of the figure to the drawing private.
<tt style='background-color:#E8E8E8;'> Graphics.BarChartDistribution <a href=' /Graphics/Distribution.py#L208'>_determine_position</a>(start_x,start_y,end_x,end_y)</tt>	Calculate the position of the chart with blank space private.
<tt style='background-color:#E8E8E8;'> Graphics. <a href=' /Graphics/KGML_vis.py#L25'>darken</a>(color,factor)</tt>	Returns darkened color as a reportlab rgb color.
<tt style='background-color:#E8E8E8;'> Graphics. <a href=' /Graphics/KGML_vis.py#L37'>color_to_reportlab</a>(color)</tt>	Returns the passed color in reportlab color format.
<tt style='background-color:#E8E8E8;'> Graphics. <a href=' /Graphics/KGML_vis.py#L65'>get_temp_imagefilename</a>(url)</tt>	Returns filename of temporary file containing downloaded image.
<tt style='background-color:#E8E8E8;'> Graphics.KGMLCanvas <a href=' /Graphics/KGML_vis.py#L109'>draw</a>(filename)</tt>	Add the map elements to the drawing.
<tt style='background-color:#E8E8E8;'> Graphics.KGMLCanvas <a href=' /Graphics/KGML_vis.py#L164'>__add_maps</a>()</tt>	Adds maps to the drawing of the map.
<tt style='background-color:#E8E8E8;'> Graphics.KGMLCanvas <a href=' /Graphics/KGML_vis.py#L182'>__add_graphics</a>(graphics)</tt>	Adds the passed graphics object to the map.
<tt style='background-color:#E8E8E8;'> Graphics.KGMLCanvas <a href=' /Graphics/KGML_vis.py#L219'>__add_labels</a>(graphics)</tt>	Adds labels for the passed graphics objects to the map private.
<tt style='background-color:#E8E8E8;'> Graphics.KGMLCanvas <a href=' /Graphics/KGML_vis.py#L254'>__add_orthologs</a>()</tt>	Adds 'ortholog' entry elements to the drawing of the map private.
<tt style='background-color:#E8E8E8;'> Graphics.KGMLCanvas <a href=' /Graphics/KGML_vis.py#L271'>__add_reaction_entries</a>()</tt>	Adds entry elements for reactions to the map drawing private.
<tt style='background-color:#E8E8E8;'> Graphics.KGMLCanvas <a href=' /Graphics/KGML_vis.py#L288'>__add_compounds</a>()</tt>	Adds compound elements to the drawing of the map private.
<tt style='background-color:#E8E8E8;'> Graphics.KGMLCanvas <a href=' /Graphics/KGML_vis.py#L308'>__add_genes</a>()</tt>	Adds gene elements to the drawing of the map private.
<tt style='background-color:#E8E8E8;'> Graphics.KGMLCanvas <a href=' /Graphics/KGML_vis.py#L319'>__add_relations</a>()</tt>	Adds relations to the map private.
<tt style='background-color:#E8E8E8;'> Graphics.KGMLCanvas <a href=' /Graphics/KGML_vis.py#L353'>__draw_arrow</a>(g_from,g_to)</tt>	Draw an arrow between given entry objects private.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Feature <a href=' /Graphics/GenomeDiagram/_Feature.py#L111'>__init__</a>(parent,feature_id,feature,color)</tt>	__init__(self parent=none feature_id=none feature=none color=colors.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Feature <a href=' /Graphics/GenomeDiagram/_Feature.py#L160'>set_feature</a>(feature)</tt>	Set_feature self feature o feature bio.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Feature <a href=' /Graphics/GenomeDiagram/_Feature.py#L205'>get_feature</a>()</tt>	Get_feature self -> bio seqfeature.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Feature <a href=' /Graphics/GenomeDiagram/_Feature.py#L212'>set_colour</a>(colour)</tt>	Backwards compatible variant of set_color self color using uk spelling.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Feature <a href=' /Graphics/GenomeDiagram/_Feature.py#L217'>set_color</a>(color)</tt>	Set_color self color o color the color to draw the feature - either a colors.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Feature <a href=' /Graphics/GenomeDiagram/_Feature.py#L230'>__getattr__</a>(name)</tt>	__getattr__ self name -> various if the feature class doesn't have the attribute called for.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphSet <a href=' /Graphics/GenomeDiagram/_GraphSet.py#L84'>new_graph</a>(data,name,style,color)</tt>	New_graph(self data name=none style='bar', color=colors lightgreen.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphSet <a href=' /Graphics/GenomeDiagram/_GraphSet.py#L138'>get_graphs</a>()</tt>	Get_graphs self -> [graph graph ].
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphSet <a href=' /Graphics/GenomeDiagram/_GraphSet.py#L146'>get_ids</a>()</tt>	Get_ids self -> [int int ].
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphSet <a href=' /Graphics/GenomeDiagram/_GraphSet.py#L153'>range</a>()</tt>	Range self -> int int.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphSet <a href=' /Graphics/GenomeDiagram/_GraphSet.py#L165'>data_quartiles</a>()</tt>	Data_quartiles self -> float float float float float.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphSet <a href=' /Graphics/GenomeDiagram/_GraphSet.py#L179'>to_string</a>(verbose)</tt>	To_string(self verbose=0) -> "".
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphSet <a href=' /Graphics/GenomeDiagram/_GraphSet.py#L196'>__len__</a>()</tt>	__len__ self -> int.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphSet <a href=' /Graphics/GenomeDiagram/_GraphSet.py#L203'>__getitem__</a>(key)</tt>	__getitem__ self key -> graph.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphSet <a href=' /Graphics/GenomeDiagram/_GraphSet.py#L210'>__str__</a>()</tt>	__str__ self -> "".
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L74'>__init__</a>(name,format,pagesize,orientation)</tt>	Called on instantiation.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L106'>set_all_tracks</a>(attr,value)</tt>	Set the passed attribute of all tracks in the set to the passed value.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L120'>draw</a>(format,pagesize,orientation,x)</tt>	Draw the diagram with passed parameters overriding existing attributes.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L160'>write</a>(filename,output,dpi)</tt>	Writes the drawn diagram to a specified file in a specified format.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L180'>write_to_string</a>(output,dpi)</tt>	Returns a byte string containing the diagram in the requested format.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L206'>add_track</a>(track,track_level)</tt>	Adds a track object to the diagram.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L233'>new_track</a>(track_level)</tt>	Add a new track to the diagram at a given level.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L259'>del_track</a>(track_level)</tt>	Removes the track to be drawn at a particular level on the diagram.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L270'>get_tracks</a>()</tt>	Returns a list of the tracks contained in the diagram.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L277'>move_track</a>(from_level,to_level)</tt>	Moves a track from one level on the diagram to another.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L291'>renumber_tracks</a>(low,step)</tt>	Renumbers all tracks consecutively.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L313'>get_levels</a>()</tt>	Return a sorted list of levels occupied by tracks in the diagram.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L320'>get_drawn_levels</a>()</tt>	Return a sorted list of levels occupied by tracks.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L329'>range</a>()</tt>	Returns lowest and highest base numbers from track features.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L343'>__getitem__</a>(key)</tt>	Returns the track contained at the level of the passed key.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Diagram <a href=' /Graphics/GenomeDiagram/_Diagram.py#L353'>__str__</a>()</tt>	Returns a formatted string describing the diagram.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CrossLink <a href=' /Graphics/GenomeDiagram/_CrossLink.py#L16'>__init__</a>(featureA,featureB,color,border)</tt>	Create a new cross link.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L149'>__init__</a>(parent,pagesize,orientation,x)</tt>	Create circulardrawer object.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L217'>set_track_heights</a>()</tt>	Initialise track heights.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L252'>draw</a>()</tt>	Draw a circular diagram of the stored data.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L311'>draw_track</a>(track)</tt>	Returns list of track elements and list of track labels.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L327'>draw_feature_set</a>(set)</tt>	Returns list of feature elements and list of labels for them.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L342'>draw_feature</a>(feature)</tt>	Returns list of feature elements and list of labels for them.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L367'>get_feature_sigil</a>(feature,locstart,locend)</tt>	Returns graphics for feature and any required label for it.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L550'>draw_graph_set</a>(set)</tt>	Returns list of graph elements and list of their labels.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L569'>draw_line_graph</a>(graph)</tt>	Returns line graph as list of drawable elements.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L620'>draw_bar_graph</a>(graph)</tt>	Returns list of drawable elements for a bar graph.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L679'>draw_heat_graph</a>(graph)</tt>	Returns list of drawable elements for the heat graph.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L718'>draw_scale</a>(track)</tt>	Returns list of elements in the scale and list of their labels.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L873'>draw_tick</a>(tickpos,ctr,ticklen,track)</tt>	Returns drawing element for a tick on the scale.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L923'>draw_test_tracks</a>()</tt>	Draw blue test tracks with grene line down their center.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L938'>draw_greytrack</a>(track)</tt>	Drawing element for grey background to passed track.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L998'>canvas_angle</a>(base)</tt>	Given base-pair position return angle cosine sin.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L1003'>_draw_sigil_box</a>(bottom,center,top,startangle)</tt>	Draw box sigil.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L1018'>_draw_arc</a>(inner_radius,outer_radius,startangle,endangle)</tt>	Returns close path describing an arc box.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L1074'>_draw_arc_line</a>(path,start_radius,end_radius,start_angle)</tt>	Adds a list of points to a path object.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L1102'>_draw_arc_poly</a>(inner_radius,outer_radius,inner_startangle,inner_endangle)</tt>	Returns polygon path describing an arc.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L1160'>_draw_sigil_cut_corner_box</a>(bottom,center,top,startangle)</tt>	Draw octo sigil box with corners cut off.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L1220'>_draw_sigil_arrow</a>(bottom,center,top,startangle)</tt>	Draw arrow sigil.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L1239'>_draw_sigil_big_arrow</a>(bottom,center,top,startangle)</tt>	Draw bigarrow sigil like arrow but straddles the axis.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L1250'>_draw_arc_arrow</a>(inner_radius,outer_radius,startangle,endangle)</tt>	Draw an arrow along an arc.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.CircularDrawer <a href=' /Graphics/GenomeDiagram/_CircularDrawer.py#L1378'>_draw_sigil_jaggy</a>(bottom,center,top,startangle)</tt>	Draw jaggy sigil.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.ColorTranslator <a href=' /Graphics/GenomeDiagram/_Colors.py#L89'>translate</a>(color,colour)</tt>	Translate a color into a reportlab color object.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.ColorTranslator <a href=' /Graphics/GenomeDiagram/_Colors.py#L123'>read_colorscheme</a>(filename)</tt>	Load colour scheme from file.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.ColorTranslator <a href=' /Graphics/GenomeDiagram/_Colors.py#L154'>get_artemis_colorscheme</a>()</tt>	Return the artemis color scheme as a dictionary.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.ColorTranslator <a href=' /Graphics/GenomeDiagram/_Colors.py#L158'>artemis_color</a>(value)</tt>	Artemis color integer to reportlab color object.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.ColorTranslator <a href=' /Graphics/GenomeDiagram/_Colors.py#L184'>get_colorscheme</a>()</tt>	Return the user-defined color scheme as a dictionary.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.ColorTranslator <a href=' /Graphics/GenomeDiagram/_Colors.py#L188'>scheme_color</a>(value)</tt>	Map a user-defined color integer to a reportlab color object.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.ColorTranslator <a href=' /Graphics/GenomeDiagram/_Colors.py#L202'>int255_color</a>(values)</tt>	Map integer red green blue tuple to a reportlab color object.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.ColorTranslator <a href=' /Graphics/GenomeDiagram/_Colors.py#L216'>float1_color</a>(values)</tt>	Map float red green blue tuple to a reportlab color object.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L182'>__init__</a>(parent,pagesize,orientation,x)</tt>	__init__(self parent pagesize='a3', orientation='landscape', x=0.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L341'>set_track_heights</a>()</tt>	Set_track_heights self since tracks may not be of identical heights the bottom and top.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L376'>draw_test_tracks</a>()</tt>	Draw_test_tracks self draw red lines indicating the top and bottom of each fragment.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L401'>draw_track</a>(track)</tt>	Draw_track self track -> ([element element ], [element element ]).
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L423'>draw_tick</a>(tickpos,ctr,ticklen,track)</tt>	Draw_tick self tickpos ctr ticklen -> element element.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L474'>draw_scale</a>(track)</tt>	Draw_scale self track -> ([element element ], [element element ]).
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L603'>draw_greytrack</a>(track)</tt>	Draw_greytrack self -> ([element element ], [element element ]).
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L662'>draw_feature_set</a>(set)</tt>	Draw_feature_set self set -> ([element element ], [element element ]).
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L683'>draw_feature</a>(feature)</tt>	Draw_feature(self feature parent_feature=none) -> ([element element ], [element element ]).
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L970'>get_feature_sigil</a>(feature,x0,x1,fragment)</tt>	Get_feature_sigil self feature x0 x1 fragment -> element element element.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L1064'>draw_graph_set</a>(set)</tt>	Draw_graph_set self set -> ([element element ], [element element ]).
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L1085'>draw_line_graph</a>(graph)</tt>	Draw_line_graph self graph -> [element element ].
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L1150'>draw_heat_graph</a>(graph)</tt>	Draw_heat_graph self graph -> [element element ].
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L1227'>draw_bar_graph</a>(graph)</tt>	Draw_bar_graph self graph -> [element element ].
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L1314'>canvas_location</a>(base)</tt>	Canvas_location self base -> int float.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L1337'>_draw_sigil_box</a>(bottom,center,top,x1)</tt>	Draw box sigil.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L1350'>_draw_sigil_octo</a>(bottom,center,top,x1)</tt>	Draw octo sigil a box with the corners cut off.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L1363'>_draw_sigil_jaggy</a>(bottom,center,top,x1)</tt>	Draw jaggy sigil.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L1409'>_draw_sigil_arrow</a>(bottom,center,top,x1)</tt>	Draw arrow sigil.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.LinearDrawer <a href=' /Graphics/GenomeDiagram/_LinearDrawer.py#L1425'>_draw_sigil_big_arrow</a>(bottom,center,top,x1)</tt>	Draw bigarrow sigil like arrow but straddles the axis.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.FeatureSet <a href=' /Graphics/GenomeDiagram/_FeatureSet.py#L37'>__init__</a>(set_id,name,parent)</tt>	Create the object.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.FeatureSet <a href=' /Graphics/GenomeDiagram/_FeatureSet.py#L50'>add_feature</a>(feature)</tt>	Add a new feature.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.FeatureSet <a href=' /Graphics/GenomeDiagram/_FeatureSet.py#L77'>del_feature</a>(feature_id)</tt>	Delete a feature.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.FeatureSet <a href=' /Graphics/GenomeDiagram/_FeatureSet.py#L87'>set_all_features</a>(attr,value)</tt>	Set an attribute of all the features.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.FeatureSet <a href=' /Graphics/GenomeDiagram/_FeatureSet.py#L153'>get_ids</a>()</tt>	Return a list of all ids for the feature set.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.FeatureSet <a href=' /Graphics/GenomeDiagram/_FeatureSet.py#L157'>range</a>()</tt>	Returns the lowest and highest base or mark numbers as a tuple.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.FeatureSet <a href=' /Graphics/GenomeDiagram/_FeatureSet.py#L168'>to_string</a>(verbose)</tt>	Returns a formatted string with information about the set.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.FeatureSet <a href=' /Graphics/GenomeDiagram/_FeatureSet.py#L184'>__len__</a>()</tt>	Return the number of features in the set.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.FeatureSet <a href=' /Graphics/GenomeDiagram/_FeatureSet.py#L188'>__getitem__</a>(key)</tt>	Return a feature keyed by id.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.FeatureSet <a href=' /Graphics/GenomeDiagram/_FeatureSet.py#L192'>__str__</a>()</tt>	Returns a formatted string with information about the feature set.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram. <a href=' /Graphics/GenomeDiagram/_AbstractDrawer.py#L56'>page_sizes</a>(size)</tt>	Convert size string into a reportlab pagesize.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram. <a href=' /Graphics/GenomeDiagram/_AbstractDrawer.py#L87'>_stroke_and_fill_colors</a>(color,border)</tt>	Helper function handle border and fill colors private.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram. <a href=' /Graphics/GenomeDiagram/_AbstractDrawer.py#L107'>draw_box</a>(point1,point2,color,border)</tt>	Draw a box.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram. <a href=' /Graphics/GenomeDiagram/_AbstractDrawer.py#L141'>draw_cut_corner_box</a>(point1,point2,corner,color)</tt>	Draw a box with the corners cut off.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram. <a href=' /Graphics/GenomeDiagram/_AbstractDrawer.py#L206'>draw_arrow</a>(point1,point2,color,border)</tt>	Draw an arrow.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram. <a href=' /Graphics/GenomeDiagram/_AbstractDrawer.py#L275'>angle2trig</a>(theta)</tt>	Convert angle to a reportlab ready tuple.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram. <a href=' /Graphics/GenomeDiagram/_AbstractDrawer.py#L291'>intermediate_points</a>(start,end,graph_data)</tt>	Generate intermediate points describing provided graph data.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.AbstractDrawer <a href=' /Graphics/GenomeDiagram/_AbstractDrawer.py#L377'>__init__</a>(parent,pagesize,orientation,x)</tt>	Create the object.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.AbstractDrawer <a href=' /Graphics/GenomeDiagram/_AbstractDrawer.py#L436'>set_page_size</a>(pagesize,orientation)</tt>	Set page size of the drawing.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.AbstractDrawer <a href=' /Graphics/GenomeDiagram/_AbstractDrawer.py#L463'>set_margins</a>(x,y,xl,xr)</tt>	Set page margins.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.AbstractDrawer <a href=' /Graphics/GenomeDiagram/_AbstractDrawer.py#L492'>set_bounds</a>(start,end)</tt>	Set start and end points for the drawing as a whole.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.AbstractDrawer <a href=' /Graphics/GenomeDiagram/_AbstractDrawer.py#L513'>is_in_bounds</a>(value)</tt>	Check if given value is within the region selected for drawing.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.AbstractDrawer <a href=' /Graphics/GenomeDiagram/_AbstractDrawer.py#L524'>__len__</a>()</tt>	Returns the length of the region to be drawn.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Track <a href=' /Graphics/GenomeDiagram/_Track.py#L262'>add_set</a>(set)</tt>	Add_set self set.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Track <a href=' /Graphics/GenomeDiagram/_Track.py#L274'>new_set</a>(type)</tt>	New_set(self type='feature') -> featureset or graphset.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Track <a href=' /Graphics/GenomeDiagram/_Track.py#L301'>get_sets</a>()</tt>	Get_sets self -> featureset or graphset.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Track <a href=' /Graphics/GenomeDiagram/_Track.py#L308'>get_ids</a>()</tt>	Get_ids self -> [int int ].
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Track <a href=' /Graphics/GenomeDiagram/_Track.py#L315'>range</a>()</tt>	Range self -> int int.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Track <a href=' /Graphics/GenomeDiagram/_Track.py#L339'>to_string</a>(verbose)</tt>	To_string(self verbose=0) -> "".
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Track <a href=' /Graphics/GenomeDiagram/_Track.py#L356'>__getitem__</a>(key)</tt>	__getitem__ self key -> int.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.Track <a href=' /Graphics/GenomeDiagram/_Track.py#L365'>__str__</a>()</tt>	__str__ self -> "".
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphData <a href=' /Graphics/GenomeDiagram/_Graph.py#L88'>__init__</a>(id,data,name,style)</tt>	__init__(self id=none data=none name=none style='bar', color=colors.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphData <a href=' /Graphics/GenomeDiagram/_Graph.py#L133'>set_data</a>(data)</tt>	Set_data self data.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphData <a href=' /Graphics/GenomeDiagram/_Graph.py#L143'>get_data</a>()</tt>	Get_data self -> [ int float int float ].
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphData <a href=' /Graphics/GenomeDiagram/_Graph.py#L155'>add_point</a>(point)</tt>	Add_point self point.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphData <a href=' /Graphics/GenomeDiagram/_Graph.py#L165'>quartiles</a>()</tt>	Quartiles self -> float float float float float.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphData <a href=' /Graphics/GenomeDiagram/_Graph.py#L176'>range</a>()</tt>	Range self -> int int returns the range of the data i.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphData <a href=' /Graphics/GenomeDiagram/_Graph.py#L187'>mean</a>()</tt>	Mean self -> float.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphData <a href=' /Graphics/GenomeDiagram/_Graph.py#L198'>stdev</a>()</tt>	Stdev self -> float.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphData <a href=' /Graphics/GenomeDiagram/_Graph.py#L212'>__len__</a>()</tt>	__len__ self -> int.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphData <a href=' /Graphics/GenomeDiagram/_Graph.py#L219'>__getitem__</a>(index)</tt>	__getitem__ self index -> float or list of tuples given an integer representing position on the sequence.
<tt style='background-color:#E8E8E8;'> Graphics.GenomeDiagram.GraphData <a href=' /Graphics/GenomeDiagram/_Graph.py#L247'>__str__</a>()</tt>	__str__ self -> "".
<tt style='background-color:#E8E8E8;'> HMM. <a href=' /HMM/MarkovModel.py#L21'>_gen_random_array</a>(n)</tt>	Return an array of n random numbers where the elements of the array sum to 1.
<tt style='background-color:#E8E8E8;'> HMM. <a href=' /HMM/MarkovModel.py#L32'>_calculate_emissions</a>(emission_probs)</tt>	Calculate which symbols can be emitted in each state.
<tt style='background-color:#E8E8E8;'> HMM. <a href=' /HMM/MarkovModel.py#L47'>_calculate_from_transitions</a>(trans_probs)</tt>	Calculate which 'from transitions' are allowed for each state this looks through all of the trans_probs and uses this dictionary.
<tt style='background-color:#E8E8E8;'> HMM. <a href=' /HMM/MarkovModel.py#L66'>_calculate_to_transitions</a>(trans_probs)</tt>	Calculate which 'to transitions' are allowed for each state this looks through all of the trans_probs and uses this dictionary.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L98'>__init__</a>(state_alphabet,emission_alphabet)</tt>	Initialize a builder to create markov models.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L127'>_all_blank</a>(first_alphabet,second_alphabet)</tt>	Return a dictionary with all counts set to zero.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L142'>_all_pseudo</a>(first_alphabet,second_alphabet)</tt>	Return a dictionary with all counts set to a default value.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L157'>get_markov_model</a>()</tt>	Return the markov model corresponding with the current parameters.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L177'>set_initial_probabilities</a>(initial_prob)</tt>	Set initial state probabilities.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L218'>set_equal_probabilities</a>()</tt>	Reset all probabilities to be an average value.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L251'>set_random_initial_probabilities</a>()</tt>	Set all initial state probabilities to a randomly generated distribution.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L261'>set_random_transition_probabilities</a>()</tt>	Set all allowed transition probabilities to a randomly generated distribution.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L279'>set_random_emission_probabilities</a>()</tt>	Set all allowed emission probabilities to a randomly generated distribution.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L296'>set_random_probabilities</a>()</tt>	Set all probabilities to randomly generated numbers.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L308'>allow_all_transitions</a>()</tt>	A convenience function to create transitions between all states.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L334'>allow_transition</a>(from_state,to_state,probability,pseudocount)</tt>	Set a transition as being possible between the two states.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L368'>destroy_transition</a>(from_state,to_state)</tt>	Restrict transitions between the two states.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L382'>set_transition_score</a>(from_state,to_state,probability)</tt>	Set the probability of a transition between two states.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L395'>set_transition_pseudocount</a>(from_state,to_state,count)</tt>	Set the default pseudocount for a transition.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L416'>set_emission_score</a>(seq_state,emission_state,probability)</tt>	Set the probability of a emission from a particular state.
<tt style='background-color:#E8E8E8;'> HMM.MarkovModelBuilder <a href=' /HMM/MarkovModel.py#L429'>set_emission_pseudocount</a>(seq_state,emission_state,count)</tt>	Set the default pseudocount for an emission.
<tt style='background-color:#E8E8E8;'> HMM.HiddenMarkovModel <a href=' /HMM/MarkovModel.py#L452'>__init__</a>(initial_prob,transition_prob,emission_prob,transition_pseudo)</tt>	Initialize a markov model.
<tt style='background-color:#E8E8E8;'> HMM.HiddenMarkovModel <a href=' /HMM/MarkovModel.py#L495'>get_blank_transitions</a>()</tt>	Get the default transitions for the model.
<tt style='background-color:#E8E8E8;'> HMM.HiddenMarkovModel <a href=' /HMM/MarkovModel.py#L505'>get_blank_emissions</a>()</tt>	Get the starting default emmissions for each sequence.
<tt style='background-color:#E8E8E8;'> HMM.HiddenMarkovModel <a href=' /HMM/MarkovModel.py#L515'>transitions_from</a>(state_letter)</tt>	Get all destination states to which there are transitions from the state_letter source state.
<tt style='background-color:#E8E8E8;'> HMM.HiddenMarkovModel <a href=' /HMM/MarkovModel.py#L528'>transitions_to</a>(state_letter)</tt>	Get all source states from which there are transitions to the state_letter destination state.
<tt style='background-color:#E8E8E8;'> HMM.HiddenMarkovModel <a href=' /HMM/MarkovModel.py#L540'>viterbi</a>(sequence,state_alphabet)</tt>	Calculate the most probable state path using the viterbi algorithm.
<tt style='background-color:#E8E8E8;'> HMM.HiddenMarkovModel <a href=' /HMM/MarkovModel.py#L646'>_log_transform</a>(probability)</tt>	Return log transform of the given probability dictionary.
<tt style='background-color:#E8E8E8;'> HMM. <a href=' /HMM/Utilities.py#L15'>pretty_print_prediction</a>(emissions,real_state,predicted_state,emission_title)</tt>	Print out a state sequence prediction in a nice manner.
<tt style='background-color:#E8E8E8;'> HMM.AbstractDPAlgorithms <a href=' /HMM/DynamicProgramming.py#L33'>__init__</a>(markov_model,sequence)</tt>	Initialize to calculate forward and backward probabilities.
<tt style='background-color:#E8E8E8;'> HMM.AbstractDPAlgorithms <a href=' /HMM/DynamicProgramming.py#L45'>_forward_recursion</a>(cur_state,sequence_pos,forward_vars)</tt>	Calculate the forward recursion value.
<tt style='background-color:#E8E8E8;'> HMM.AbstractDPAlgorithms <a href=' /HMM/DynamicProgramming.py#L50'>forward_algorithm</a>()</tt>	Calculate sequence probability using the forward algorithm.
<tt style='background-color:#E8E8E8;'> HMM.AbstractDPAlgorithms <a href=' /HMM/DynamicProgramming.py#L110'>_backward_recursion</a>(cur_state,sequence_pos,forward_vars)</tt>	Calculate the backward recursion value.
<tt style='background-color:#E8E8E8;'> HMM.AbstractDPAlgorithms <a href=' /HMM/DynamicProgramming.py#L115'>backward_algorithm</a>()</tt>	Calculate sequence probability using the backward algorithm.
<tt style='background-color:#E8E8E8;'> HMM.ScaledDPAlgorithms <a href=' /HMM/DynamicProgramming.py#L177'>__init__</a>(markov_model,sequence)</tt>	Initialize the scaled approach to calculating probabilities.
<tt style='background-color:#E8E8E8;'> HMM.ScaledDPAlgorithms <a href=' /HMM/DynamicProgramming.py#L190'>_calculate_s_value</a>(seq_pos,previous_vars)</tt>	Calculate the next scaling variable for a sequence position.
<tt style='background-color:#E8E8E8;'> HMM.ScaledDPAlgorithms <a href=' /HMM/DynamicProgramming.py#L232'>_forward_recursion</a>(cur_state,sequence_pos,forward_vars)</tt>	Calculate the value of the forward recursion.
<tt style='background-color:#E8E8E8;'> HMM.ScaledDPAlgorithms <a href=' /HMM/DynamicProgramming.py#L279'>_backward_recursion</a>(cur_state,sequence_pos,backward_vars)</tt>	Calculate the value of the backward recursion arguments.
<tt style='background-color:#E8E8E8;'> HMM.TrainingSequence <a href=' /HMM/Trainer.py#L30'>__init__</a>(emissions,state_path)</tt>	Initialize a training sequence.
<tt style='background-color:#E8E8E8;'> HMM.AbstractTrainer <a href=' /HMM/Trainer.py#L55'>log_likelihood</a>(probabilities)</tt>	Calculate the log likelihood of the training seqs.
<tt style='background-color:#E8E8E8;'> HMM.AbstractTrainer <a href=' /HMM/Trainer.py#L70'>estimate_params</a>(transition_counts,emission_counts)</tt>	Get a maximum likelihood estimation of transition and emmission.
<tt style='background-color:#E8E8E8;'> HMM.AbstractTrainer <a href=' /HMM/Trainer.py#L99'>ml_estimator</a>(counts)</tt>	Calculate the maximum likelihood estimator.
<tt style='background-color:#E8E8E8;'> HMM.BaumWelchTrainer <a href=' /HMM/Trainer.py#L165'>__init__</a>(markov_model)</tt>	Initialize the trainer.
<tt style='background-color:#E8E8E8;'> HMM.BaumWelchTrainer <a href=' /HMM/Trainer.py#L176'>train</a>(training_seqs,stopping_criteria,dp_method)</tt>	Estimate the parameters using training sequences.
<tt style='background-color:#E8E8E8;'> HMM.BaumWelchTrainer <a href=' /HMM/Trainer.py#L254'>update_transitions</a>(transition_counts,training_seq,forward_vars,backward_vars)</tt>	Add the contribution of a new training sequence to the transitions.
<tt style='background-color:#E8E8E8;'> HMM.BaumWelchTrainer <a href=' /HMM/Trainer.py#L307'>update_emissions</a>(emission_counts,training_seq,forward_vars,backward_vars)</tt>	Add the contribution of a new training sequence to the emissions arguments.
<tt style='background-color:#E8E8E8;'> HMM.KnownStateTrainer <a href=' /HMM/Trainer.py#L360'>train</a>(training_seqs)</tt>	Estimate the markov model parameters with known state paths.
<tt style='background-color:#E8E8E8;'> HMM.KnownStateTrainer <a href=' /HMM/Trainer.py#L388'>_count_emissions</a>(training_seq,emission_counts)</tt>	Add emissions from the training sequence to the current counts.
<tt style='background-color:#E8E8E8;'> HMM.KnownStateTrainer <a href=' /HMM/Trainer.py#L409'>_count_transitions</a>(state_seq,transition_counts)</tt>	Add transitions from the training sequence to the current counts.
<tt style='background-color:#E8E8E8;'> Application.AbstractCommandline <a href=' /Application/__init__.py#L181'>__init__</a>(cmd)</tt>	Create a new instance of a command line wrapper object.
<tt style='background-color:#E8E8E8;'> Application.AbstractCommandline <a href=' /Application/__init__.py#L253'>_validate</a>()</tt>	Make sure the required parameters have been set private.
<tt style='background-color:#E8E8E8;'> Application.AbstractCommandline <a href=' /Application/__init__.py#L268'>__str__</a>()</tt>	Make the commandline string with the currently set options.
<tt style='background-color:#E8E8E8;'> Application.AbstractCommandline <a href=' /Application/__init__.py#L290'>__repr__</a>()</tt>	Return a representation of the command line object for debugging.
<tt style='background-color:#E8E8E8;'> Application.AbstractCommandline <a href=' /Application/__init__.py#L315'>_get_parameter</a>(name)</tt>	Get a commandline option value.
<tt style='background-color:#E8E8E8;'> Application.AbstractCommandline <a href=' /Application/__init__.py#L325'>_clear_parameter</a>(name)</tt>	Reset or clear a commandline option value.
<tt style='background-color:#E8E8E8;'> Application.AbstractCommandline <a href=' /Application/__init__.py#L336'>set_parameter</a>(name,value)</tt>	Set a commandline option for a program obsolete.
<tt style='background-color:#E8E8E8;'> Application.AbstractCommandline <a href=' /Application/__init__.py#L365'>_check_value</a>(value,name,check_function)</tt>	Check whether the given value is valid.
<tt style='background-color:#E8E8E8;'> Application.AbstractCommandline <a href=' /Application/__init__.py#L382'>__setattr__</a>(name,value)</tt>	Set attribute name to value private.
<tt style='background-color:#E8E8E8;'> Application.AbstractCommandline <a href=' /Application/__init__.py#L412'>__call__</a>(stdin,stdout,stderr,cwd)</tt>	Executes the command waits for it to finish and returns output.
<tt style='background-color:#E8E8E8;'> Application._Option <a href=' /Application/__init__.py#L586'>__str__</a>()</tt>	Return the value of this option for the commandline.
<tt style='background-color:#E8E8E8;'> Application._Switch <a href=' /Application/__init__.py#L636'>__str__</a>()</tt>	Return the value of this option for the commandline.
<tt style='background-color:#E8E8E8;'> Application. <a href=' /Application/__init__.py#L714'>_escape_filename</a>(filename)</tt>	Escape filenames with spaces by adding quotes private.
<tt style='background-color:#E8E8E8;'> Application. <a href=' /Application/__init__.py#L747'>_test</a>()</tt>	Run the bio application module's doctests.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/_io.py#L55'>read</a>(file)</tt>	Parse a phyloxml file or stream and build a tree of biopython objects.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/NexusIO.py#L30'>parse</a>(file)</tt>	Iterate over the phylogenetic trees in a phyloxml file.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/NexusIO.py#L58'>write</a>(obj,file,encoding,indent)</tt>	Write a phyloxml file.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/PhyloXMLIO.py#L136'>_local</a>(tag)</tt>	Extract the local tag from a namespaced tag name.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/PhyloXMLIO.py#L143'>_split_namespace</a>(tag)</tt>	Split a tag into namespace and local tag strings.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/PhyloXMLIO.py#L151'>_ns</a>(tag,namespace)</tt>	Format an xml tag with the given namespace.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/PhyloXMLIO.py#L156'>_get_child_as</a>(parent,tag,construct)</tt>	Find a child node by tag and pass it through a constructor.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/PhyloXMLIO.py#L166'>_get_child_text</a>(parent,tag,construct)</tt>	Find a child node by tag pass its text through a constructor.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/PhyloXMLIO.py#L176'>_get_children_as</a>(parent,tag,construct)</tt>	Find child nodes by tag pass each through a constructor.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/PhyloXMLIO.py#L185'>_get_children_text</a>(parent,tag,construct)</tt>	Find child nodes by tag pass each node's text through a constructor.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/PhyloXMLIO.py#L195'>_indent</a>(elem,level)</tt>	Add line breaks and indentation to elementtree in-place.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/PhyloXMLIO.py#L254'>_collapse_wspace</a>(text)</tt>	Replace all spans of whitespace with a single space character.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/PhyloXMLIO.py#L266'>_replace_wspace</a>(text)</tt>	Replace tab lf and cr characters with spaces but don't collapse.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/PhyloXMLIO.py#L296'>read</a>()</tt>	Parse the phyloxml file and create a single phyloxml object.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/CDAOIO.py#L98'>parse</a>()</tt>	Parse the text stream this object was initialized with.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/PhyloXMLIO.py#L329'>_parse_phylogeny</a>(parent)</tt>	Parse a single phylogeny within the phyloxml tree.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/PhyloXMLIO.py#L385'>_parse_clade</a>(parent)</tt>	Parse a clade node and its children recursively.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/PhyloXMLIO.py#L620'>_serialize</a>(value)</tt>	Convert a python primitive to a phyloxml-compatible unicode string.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/PhyloXMLIO.py#L629'>_clean_attrib</a>(obj,attrs)</tt>	Create a dictionary from an object's specified non-none attributes.
<tt style='background-color:#E8E8E8;'> Phylo.Writer <a href=' /Phylo/CDAOIO.py#L249'>__init__</a>(phyloxml)</tt>	Build an elementtree from a phyloxml object.
<tt style='background-color:#E8E8E8;'> Phylo.Writer <a href=' /Phylo/PhyloXMLIO.py#L745'>binary_characters</a>(obj)</tt>	Serialize a binary_characters node and its subnodes.
<tt style='background-color:#E8E8E8;'> Phylo.Writer <a href=' /Phylo/PhyloXMLIO.py#L777'>domain</a>(obj)</tt>	Serialize a domain node.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/_cdao_owl.py#L15'>resolve_uri</a>(s,namespaces,cdao_to_obo,xml_style)</tt>	Converts prefixed uris to full uris.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/BaseTree.py#L36'>_level_traverse</a>(root,get_children)</tt>	Traverse a tree in breadth-first level order.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/BaseTree.py#L45'>_preorder_traverse</a>(root,get_children)</tt>	Traverse a tree in depth-first pre-order parent before children.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/BaseTree.py#L56'>_postorder_traverse</a>(root,get_children)</tt>	Traverse a tree in depth-first post-order children before parent.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/BaseTree.py#L67'>_sorted_attrs</a>(elem)</tt>	Get a flat list of elem's attributes sorted for consistency.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/BaseTree.py#L86'>_identity_matcher</a>(target)</tt>	Match a node to the target object by identity.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/BaseTree.py#L93'>_class_matcher</a>(target_cls)</tt>	Match a node if it's an instance of the given class.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/BaseTree.py#L109'>_attribute_matcher</a>(kwargs)</tt>	Match a node by specified attribute values.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/BaseTree.py#L152'>_function_matcher</a>(matcher_func)</tt>	Safer attribute lookup -- returns false instead of raising an error.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/BaseTree.py#L162'>_object_matcher</a>(obj)</tt>	Retrieve a matcher function by passing an arbitrary object.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/BaseTree.py#L189'>_combine_matchers</a>(target,kwargs,require_spec)</tt>	Merge target specifications with keyword arguments.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/BaseTree.py#L209'>_combine_args</a>(first)</tt>	Convert [targets] or *targets arguments to a single iterable.
<tt style='background-color:#E8E8E8;'> Phylo.TreeElement <a href=' /Phylo/BaseTree.py#L240'>__repr__</a>()</tt>	Show this object's constructor with its primitive arguments.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L267'>_filter_search</a>(filter_func,order,follow_attrs)</tt>	Perform a bfs or dfs traversal through all elements in this tree.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L288'>find_any</a>()</tt>	Return the first element found by find_elements(), or none.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L300'>find_elements</a>(target,terminal,order)</tt>	Find all tree elements matching the given attributes.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L348'>find_clades</a>(target,terminal,order)</tt>	Find each clade containing a matching element.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L371'>get_path</a>(target)</tt>	List the clades directly between this root and the given target.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L397'>get_nonterminals</a>(order)</tt>	Get a list of all of this tree's nonterminal internal nodes.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L401'>get_terminals</a>(order)</tt>	Get a list of all of this tree's terminal leaf nodes.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L405'>trace</a>(start,finish)</tt>	List of all clade object between two targets in this tree.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L417'>common_ancestor</a>(targets)</tt>	Most recent common ancestor clade of all the given targets.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L443'>count_terminals</a>()</tt>	Counts the number of terminal leaf nodes within this tree.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L447'>depths</a>(unit_branch_lengths)</tt>	Create a mapping of tree clades to depths by branch length.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L475'>distance</a>(target1,target2)</tt>	Calculate the sum of the branch lengths between two targets.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L486'>is_bifurcating</a>()</tt>	Return true if tree downstream of node is strictly bifurcating.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L505'>is_monophyletic</a>(terminals)</tt>	Mrca of terminals if they comprise a complete subclade or false.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L537'>is_parent_of</a>(target)</tt>	True if target is a descendent of this tree.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L547'>is_preterminal</a>()</tt>	True if all direct descendents are terminal.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L556'>total_branch_length</a>()</tt>	Calculate the sum of all the branch lengths in this tree.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L563'>collapse</a>(target)</tt>	Deletes target from the tree relinking its children to its parent.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L583'>collapse_all</a>(target)</tt>	Collapse all the descendents of this tree leaving only terminals.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L633'>ladderize</a>(reverse)</tt>	Sort clades in-place according to the number of terminal nodes.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L644'>prune</a>(target)</tt>	Prunes a terminal clade from the tree.
<tt style='background-color:#E8E8E8;'> Phylo.TreeMixin <a href=' /Phylo/BaseTree.py#L687'>split</a>(n,branch_length)</tt>	Generate n default 2 new descendants.
<tt style='background-color:#E8E8E8;'> Phylo.Tree <a href=' /Phylo/BaseTree.py#L731'>from_clade</a>(cls,clade)</tt>	Create a new tree object given a clade.
<tt style='background-color:#E8E8E8;'> Phylo.Tree <a href=' /Phylo/BaseTree.py#L740'>randomized</a>(cls,taxa,branch_length,branch_stdev)</tt>	Create a randomized bifurcating tree given a list of taxa.
<tt style='background-color:#E8E8E8;'> Phylo.Tree <a href=' /Phylo/BaseTree.py#L776'>clade</a>()</tt>	The first clade in this tree not itself.
<tt style='background-color:#E8E8E8;'> Phylo.Tree <a href=' /Phylo/BaseTree.py#L781'>as_phyloxml</a>()</tt>	Convert this tree to a phyloxml-compatible phylogeny.
<tt style='background-color:#E8E8E8;'> Phylo.Tree <a href=' /Phylo/BaseTree.py#L792'>root_with_outgroup</a>(outgroup_targets)</tt>	Reroot this tree with the outgroup clade containing outgroup_targets.
<tt style='background-color:#E8E8E8;'> Phylo.Tree <a href=' /Phylo/BaseTree.py#L890'>root_at_midpoint</a>()</tt>	Root the tree at the midpoint of the two most distant taxa.
<tt style='background-color:#E8E8E8;'> Phylo.Tree <a href=' /Phylo/BaseTree.py#L927'>is_terminal</a>()</tt>	True if the root of this tree is terminal.
<tt style='background-color:#E8E8E8;'> Phylo.Tree <a href=' /Phylo/BaseTree.py#L933'>__format__</a>(format_spec)</tt>	Serialize the tree as a string in the specified file format.
<tt style='background-color:#E8E8E8;'> Phylo.Tree <a href=' /Phylo/BaseTree.py#L952'>format</a>(format)</tt>	Serialize the tree as a string in the specified file format.
<tt style='background-color:#E8E8E8;'> Phylo.Tree <a href=' /Phylo/BaseTree.py#L961'>__str__</a>()</tt>	String representation of the entire tree.
<tt style='background-color:#E8E8E8;'> Phylo.Clade <a href=' /Phylo/BaseTree.py#L1022'>root</a>()</tt>	Allow treemixin methods to traverse clades properly.
<tt style='background-color:#E8E8E8;'> Phylo.Clade <a href=' /Phylo/BaseTree.py#L1027'>is_terminal</a>()</tt>	True if this is a terminal leaf node.
<tt style='background-color:#E8E8E8;'> Phylo.Clade <a href=' /Phylo/BaseTree.py#L1033'>__getitem__</a>(index)</tt>	Get clades by index integer or slice.
<tt style='background-color:#E8E8E8;'> Phylo.Clade <a href=' /Phylo/BaseTree.py#L1042'>__iter__</a>()</tt>	Iterate through this tree's direct descendent clades sub-trees.
<tt style='background-color:#E8E8E8;'> Phylo.Clade <a href=' /Phylo/BaseTree.py#L1046'>__len__</a>()</tt>	Number of clades directy under the root.
<tt style='background-color:#E8E8E8;'> Phylo.Clade <a href=' /Phylo/BaseTree.py#L1051'>__bool__</a>()</tt>	Boolean value of an instance of this class true.
<tt style='background-color:#E8E8E8;'> Phylo.BranchColor <a href=' /Phylo/BaseTree.py#L1150'>from_hex</a>(cls,hexstr)</tt>	Construct a branchcolor object from a hexadecimal string.
<tt style='background-color:#E8E8E8;'> Phylo.BranchColor <a href=' /Phylo/BaseTree.py#L1165'>from_name</a>(cls,colorname)</tt>	Construct a branchcolor object by the color's name.
<tt style='background-color:#E8E8E8;'> Phylo.BranchColor <a href=' /Phylo/BaseTree.py#L1170'>to_hex</a>()</tt>	Return a 24-bit hexadecimal rgb representation of this color.
<tt style='background-color:#E8E8E8;'> Phylo.BranchColor <a href=' /Phylo/BaseTree.py#L1184'>to_rgb</a>()</tt>	Return a tuple of rgb values 0 to 255 representing this color.
<tt style='background-color:#E8E8E8;'> Phylo.BranchColor <a href=' /Phylo/BaseTree.py#L1195'>__repr__</a>()</tt>	Preserve the standard rgb order when representing this object.
<tt style='background-color:#E8E8E8;'> Phylo.BranchColor <a href=' /Phylo/BaseTree.py#L1200'>__str__</a>()</tt>	Show the color's rgb values.
<tt style='background-color:#E8E8E8;'> Phylo._BitString <a href=' /Phylo/Consensus.py#L121'>__new__</a>(cls,strdata)</tt>	Init from a binary string data.
<tt style='background-color:#E8E8E8;'> Phylo._BitString <a href=' /Phylo/Consensus.py#L169'>index_one</a>()</tt>	Return a list of positions where the element is '1'.
<tt style='background-color:#E8E8E8;'> Phylo._BitString <a href=' /Phylo/Consensus.py#L173'>index_zero</a>()</tt>	Return a list of positions where the element is '0'.
<tt style='background-color:#E8E8E8;'> Phylo._BitString <a href=' /Phylo/Consensus.py#L177'>contains</a>(other)</tt>	Check if current bitstr1 contains another one bitstr2.
<tt style='background-color:#E8E8E8;'> Phylo._BitString <a href=' /Phylo/Consensus.py#L193'>independent</a>(other)</tt>	Check if current bitstr1 is independent of another one bitstr2.
<tt style='background-color:#E8E8E8;'> Phylo._BitString <a href=' /Phylo/Consensus.py#L205'>iscompatible</a>(other)</tt>	Check if current bitstr1 is compatible with another bitstr2.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/Consensus.py#L221'>strict_consensus</a>(trees)</tt>	Search strict consensus tree from multiple trees.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/Consensus.py#L274'>majority_consensus</a>(trees,cutoff)</tt>	Search majority rule consensus tree from multiple trees.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/Consensus.py#L374'>adam_consensus</a>(trees)</tt>	Search adam consensus tree from multiple trees :parameters.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/Consensus.py#L385'>_part</a>(clades)</tt>	Recursive function of adam consensus algorithm.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/Consensus.py#L444'>_sub_clade</a>(clade,term_names)</tt>	Extract a compatible subclade that only contains the given terminal names.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/Consensus.py#L469'>_count_clades</a>(trees)</tt>	Count distinct clades different sets of terminal names in the trees.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/Consensus.py#L496'>get_support</a>(target_tree,trees,len_trees)</tt>	Calculate branch support for a target tree given bootstrap replicate trees.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/Consensus.py#L534'>bootstrap</a>(msa,times)</tt>	Generate bootstrap replicates from a multiple sequence alignment object :parameters.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/Consensus.py#L557'>bootstrap_trees</a>(msa,times,tree_constructor)</tt>	Generate bootstrap replicate trees from a multiple sequence alignment.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/Consensus.py#L574'>bootstrap_consensus</a>(msa,times,tree_constructor,consensus)</tt>	Consensus tree of a series of bootstrap trees for a multiple sequence alignment :parameters.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/Consensus.py#L593'>_clade_to_bitstr</a>(clade,tree_term_names)</tt>	Create a bitstring representing a clade given ordered tree taxon names.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/Consensus.py#L601'>_tree_to_bitstrs</a>(tree)</tt>	Create a dict of a tree's clades to corresponding bitstrings.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/Consensus.py#L611'>_bitstring_topology</a>(tree)</tt>	Generates a branch length dict for a tree keyed by bitstrings.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/Consensus.py#L623'>_equal_topology</a>(tree1,tree2)</tt>	Are two trees are equal in terms of topology and branch lengths.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/NexusIO.py#L30'>parse</a>(file,format)</tt>	Iteratively parse a file and return each of the trees it contains.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/_io.py#L55'>read</a>(file,format)</tt>	Parse a file in the given format and return a single tree.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/NexusIO.py#L58'>write</a>(trees,file,format)</tt>	Write a sequence of trees to file in the given format.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/_io.py#L85'>convert</a>(in_file,in_format,out_file,out_format)</tt>	Convert between two tree file formats.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/NexusIO.py#L30'>parse</a>(handle)</tt>	Parse the trees in a nexus file.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/NexusIO.py#L58'>write</a>(trees,handle,plain)</tt>	Write a trees in cdao format to the given file handle.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/CDAOIO.py#L98'>parse</a>(values_are_confidence,comments_are_confidence,rooted)</tt>	Parse the text stream this object was initialized with.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/NewickIO.py#L124'>_parse_tree</a>(text)</tt>	Parses the text representation into an tree object.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/CDAOIO.py#L138'>new_clade</a>(parent)</tt>	Returns a new newick clade optionally with a temporary reference.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/NewickIO.py#L218'>process_clade</a>(clade)</tt>	Final processing of a parsed clade removes the node's parent and.
<tt style='background-color:#E8E8E8;'> Phylo.Writer <a href=' /Phylo/CDAOIO.py#L257'>write</a>(handle)</tt>	Write this instance's trees to a file handle.
<tt style='background-color:#E8E8E8;'> Phylo.Writer <a href=' /Phylo/NewickIO.py#L254'>to_strings</a>(confidence_as_branch_length,branch_length_only,plain,plain_newick)</tt>	Return an iterable of paup-compatible tree lines.
<tt style='background-color:#E8E8E8;'> Phylo.Writer <a href=' /Phylo/NewickIO.py#L300'>_info_factory</a>(plain,confidence_as_branch_length,branch_length_only,max_confidence)</tt>	Return a function that creates a nicely formatted node tag.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/PhyloXML.py#L38'>_check_str</a>(text,testfunc)</tt>	Check a string using testfunc and warn if there's no match.
<tt style='background-color:#E8E8E8;'> Phylo.Phyloxml <a href=' /Phylo/PhyloXML.py#L78'>__getitem__</a>(index)</tt>	Get a phylogeny by index or name.
<tt style='background-color:#E8E8E8;'> Phylo.Phyloxml <a href=' /Phylo/PhyloXML.py#L90'>__iter__</a>()</tt>	Iterate through the phylogenetic trees in this object.
<tt style='background-color:#E8E8E8;'> Phylo.Phyloxml <a href=' /Phylo/PhyloXML.py#L94'>__len__</a>()</tt>	Number of phylogenetic trees in this object.
<tt style='background-color:#E8E8E8;'> Phylo.Other <a href=' /Phylo/PhyloXML.py#L131'>__iter__</a>()</tt>	Iterate through the children of this object if any.
<tt style='background-color:#E8E8E8;'> Phylo.Phylogeny <a href=' /Phylo/PhyloXML.py#L192'>from_tree</a>(cls,tree)</tt>	Create a new phylogeny given a tree (from newick/nexus or basetree).
<tt style='background-color:#E8E8E8;'> Phylo.Phylogeny <a href=' /Phylo/PhyloXML.py#L206'>from_clade</a>(cls,clade)</tt>	Create a new phylogeny given a newick or basetree clade object.
<tt style='background-color:#E8E8E8;'> Phylo.Phylogeny <a href=' /Phylo/PhyloXML.py#L214'>as_phyloxml</a>()</tt>	Return this tree a phyloxml-compatible phylogeny object.
<tt style='background-color:#E8E8E8;'> Phylo.Phylogeny <a href=' /Phylo/PhyloXML.py#L221'>to_phyloxml_container</a>()</tt>	Create a new phyloxml object containing just this phylogeny.
<tt style='background-color:#E8E8E8;'> Phylo.Phylogeny <a href=' /Phylo/PhyloXML.py#L225'>to_alignment</a>()</tt>	Construct an alignment from the aligned sequences in this tree.
<tt style='background-color:#E8E8E8;'> Phylo.Phylogeny <a href=' /Phylo/PhyloXML.py#L243'>_get_confidence</a>()</tt>	Equivalent to self confidences[0] if there is only 1 value.
<tt style='background-color:#E8E8E8;'> Phylo.Clade <a href=' /Phylo/PhyloXML.py#L356'>from_clade</a>(cls,clade)</tt>	Create a new phyloxml clade from a newick or basetree clade object.
<tt style='background-color:#E8E8E8;'> Phylo.Clade <a href=' /Phylo/PhyloXML.py#L373'>to_phylogeny</a>()</tt>	Create a new phylogeny containing just this clade.
<tt style='background-color:#E8E8E8;'> Phylo.Accession <a href=' /Phylo/PhyloXML.py#L454'>__str__</a>()</tt>	Show the class name and an identifying attribute.
<tt style='background-color:#E8E8E8;'> Phylo.Confidence <a href=' /Phylo/PhyloXML.py#L566'>__hash__</a>()</tt>	Return the hash value of the object.
<tt style='background-color:#E8E8E8;'> Phylo.Confidence <a href=' /Phylo/PhyloXML.py#L628'>__truediv__</a>(other)</tt>	Rational-style division in py3 0+.
<tt style='background-color:#E8E8E8;'> Phylo.Confidence <a href=' /Phylo/PhyloXML.py#L638'>__floordiv__</a>(other)</tt>	C-style and old-style division in py3 0+.
<tt style='background-color:#E8E8E8;'> Phylo.Date <a href=' /Phylo/PhyloXML.py#L721'>__str__</a>()</tt>	Show the class name and the human-readable date.
<tt style='background-color:#E8E8E8;'> Phylo.Sequence <a href=' /Phylo/PhyloXML.py#L1065'>from_seqrecord</a>(cls,record,is_aligned)</tt>	Create a new phyloxml sequence from a seqrecord object.
<tt style='background-color:#E8E8E8;'> Phylo.Sequence <a href=' /Phylo/PhyloXML.py#L1115'>to_seqrecord</a>()</tt>	Create a seqrecord object from this sequence instance.
<tt style='background-color:#E8E8E8;'> Phylo.Taxonomy <a href=' /Phylo/PhyloXML.py#L1291'>__str__</a>()</tt>	Show the class name and an identifying attribute.
<tt style='background-color:#E8E8E8;'> Phylo._Matrix <a href=' /Phylo/TreeConstruction.py#L86'>__init__</a>(names,matrix)</tt>	Initialize matrix by a list of names and a list of lower triangular matrix data.
<tt style='background-color:#E8E8E8;'> Phylo._Matrix <a href=' /Phylo/TreeConstruction.py#L124'>__getitem__</a>(item)</tt>	Access value s by the index s or name s.
<tt style='background-color:#E8E8E8;'> Phylo._Matrix <a href=' /Phylo/TreeConstruction.py#L175'>__setitem__</a>(item,value)</tt>	Set value by the index s or name s.
<tt style='background-color:#E8E8E8;'> Phylo._Matrix <a href=' /Phylo/TreeConstruction.py#L239'>__delitem__</a>(item)</tt>	Delete related distances by the index or name.
<tt style='background-color:#E8E8E8;'> Phylo._Matrix <a href=' /Phylo/TreeConstruction.py#L255'>insert</a>(name,value,index)</tt>	Insert distances given the name and value.
<tt style='background-color:#E8E8E8;'> Phylo._Matrix <a href=' /Phylo/TreeConstruction.py#L290'>__str__</a>()</tt>	Get a lower triangular matrix string.
<tt style='background-color:#E8E8E8;'> Phylo._DistanceMatrix <a href=' /Phylo/TreeConstruction.py#L313'>_set_zero_diagonal</a>()</tt>	Set all diagonal elements to zero.
<tt style='background-color:#E8E8E8;'> Phylo.DistanceCalculator <a href=' /Phylo/TreeConstruction.py#L401'>__init__</a>(model)</tt>	Initialize with a distance model.
<tt style='background-color:#E8E8E8;'> Phylo.DistanceCalculator <a href=' /Phylo/TreeConstruction.py#L415'>_pairwise</a>(seq1,seq2)</tt>	Calculate pairwise distance from two sequences.
<tt style='background-color:#E8E8E8;'> Phylo.DistanceCalculator <a href=' /Phylo/TreeConstruction.py#L456'>get_distance</a>(msa)</tt>	Return a _distancematrix for msa object :parameters.
<tt style='background-color:#E8E8E8;'> Phylo.DistanceCalculator <a href=' /Phylo/TreeConstruction.py#L473'>_build_protein_matrix</a>(subsmat)</tt>	Convert matrix from subsmat format to _matrix object.
<tt style='background-color:#E8E8E8;'> Phylo.TreeConstructor <a href=' /Phylo/TreeConstruction.py#L485'>build_tree</a>(msa)</tt>	Caller to built the tree from a multipleseqalignment object.
<tt style='background-color:#E8E8E8;'> Phylo.DistanceTreeConstructor <a href=' /Phylo/TreeConstruction.py#L566'>upgma</a>(distance_matrix)</tt>	Construct and return an upgma tree.
<tt style='background-color:#E8E8E8;'> Phylo.DistanceTreeConstructor <a href=' /Phylo/TreeConstruction.py#L633'>nj</a>(distance_matrix)</tt>	Construct and return an neighbor joining tree.
<tt style='background-color:#E8E8E8;'> Phylo.DistanceTreeConstructor <a href=' /Phylo/TreeConstruction.py#L713'>_height_of</a>(clade)</tt>	Calculate clade height -- the longest path to any terminal.
<tt style='background-color:#E8E8E8;'> Phylo.Scorer <a href=' /Phylo/TreeConstruction.py#L728'>get_score</a>(tree,alignment)</tt>	Caller to get the score of a tree for the given alignment.
<tt style='background-color:#E8E8E8;'> Phylo.TreeSearcher <a href=' /Phylo/TreeConstruction.py#L739'>search</a>(starting_tree,alignment)</tt>	Caller to search the best tree with a starting tree.
<tt style='background-color:#E8E8E8;'> Phylo.NNITreeSearcher <a href=' /Phylo/TreeConstruction.py#L762'>search</a>(starting_tree,alignment)</tt>	Implement the treesearcher search method.
<tt style='background-color:#E8E8E8;'> Phylo.NNITreeSearcher <a href=' /Phylo/TreeConstruction.py#L774'>_nni</a>(starting_tree,alignment)</tt>	Search for the best parsimony tree using the nni algorithm.
<tt style='background-color:#E8E8E8;'> Phylo.NNITreeSearcher <a href=' /Phylo/TreeConstruction.py#L790'>_get_neighbors</a>(tree)</tt>	Get all neighbor trees of the given tree.
<tt style='background-color:#E8E8E8;'> Phylo.ParsimonyScorer <a href=' /Phylo/TreeConstruction.py#L911'>get_score</a>(tree,alignment)</tt>	Calculate and return the parsimony score given a tree and the msa using the fitch algorithm without the penalty matrix.
<tt style='background-color:#E8E8E8;'> Phylo.ParsimonyTreeConstructor <a href=' /Phylo/TreeConstruction.py#L1048'>build_tree</a>(alignment)</tt>	Build the tree.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/NeXMLIO.py#L61'>qUri</a>(s)</tt>	Given a prefixed uri return the full uri.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/NeXMLIO.py#L66'>cdao_to_obo</a>(s)</tt>	Optionally converts a cdao-prefixed uri into an obo-prefixed uri.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/NeXMLIO.py#L71'>matches</a>(s)</tt>	Check for matches in both cdao and obo namespaces.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/CDAOIO.py#L98'>parse</a>(values_are_confidence,rooted)</tt>	Parse the text stream this object was initialized with.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/NeXMLIO.py#L194'>_make_tree</a>(cls,node,node_dict,children)</tt>	Traverse the tree creating a nested clade structure.
<tt style='background-color:#E8E8E8;'> Phylo.Writer <a href=' /Phylo/CDAOIO.py#L257'>write</a>(handle,cdao_to_obo)</tt>	Write this instance's trees to a file handle.
<tt style='background-color:#E8E8E8;'> Phylo.Writer <a href=' /Phylo/NeXMLIO.py#L281'>_write_tree</a>(clade,tree,parent,rooted)</tt>	Recursively process tree adding nodes and edges to tree object.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/CDAOIO.py#L103'>parse_handle_to_graph</a>(rooted,parse_format,context)</tt>	Parse self handle into rdf model self model.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/CDAOIO.py#L125'>parse_graph</a>(graph,context)</tt>	Generator that yields cdao tree instances from an rdf model.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/CDAOIO.py#L138'>new_clade</a>(node)</tt>	Returns a cdao clade object for a given named node.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/CDAOIO.py#L154'>get_node_info</a>(graph,context)</tt>	Creates a dictionary containing information about all nodes in the tree.
<tt style='background-color:#E8E8E8;'> Phylo.Parser <a href=' /Phylo/CDAOIO.py#L226'>parse_children</a>(node)</tt>	Traverse the tree to create a nested clade structure.
<tt style='background-color:#E8E8E8;'> Phylo.Writer <a href=' /Phylo/CDAOIO.py#L257'>write</a>(handle,tree_uri,record_complete_ancestry,rooted)</tt>	Write this instance's trees to a file handle.
<tt style='background-color:#E8E8E8;'> Phylo.Writer <a href=' /Phylo/CDAOIO.py#L310'>process_clade</a>(clade,parent,root)</tt>	Recursively generate triples describing a tree of clades.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/_utils.py#L17'>to_networkx</a>(tree)</tt>	Convert a tree object to a networkx graph.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/_utils.py#L77'>draw_graphviz</a>(tree,label_func,prog,args)</tt>	Display a tree or clade as a graph using the graphviz engine.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/_utils.py#L187'>draw_ascii</a>(tree,file,column_width)</tt>	Draw an ascii-art phylogram of the given tree.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/_utils.py#L280'>draw</a>(tree,label_func,do_show,show_confidence)</tt>	Plot the given tree using matplotlib or pylab.
<tt style='background-color:#E8E8E8;'> Phylo. <a href=' /Phylo/NexusIO.py#L58'>write</a>(obj,handle)</tt>	Write a new nexus file containing the given trees.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_codeml.py#L26'>parse_basics</a>(lines,results)</tt>	Parse the basic information that should be present in most codeml output files.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_baseml.py#L53'>parse_parameters</a>(lines,results,num_params)</tt>	Parse the various parameters from the file.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_baseml.py#L65'>parse_parameter_list</a>(lines,parameters,num_params)</tt>	Parse the parameters list which is just an unlabeled list of numeric values.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_baseml.py#L94'>parse_kappas</a>(lines,parameters)</tt>	Parse out the kappa parameters.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_baseml.py#L135'>parse_rates</a>(lines,parameters)</tt>	Parse the rate parameters.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_baseml.py#L188'>parse_freqs</a>(lines,parameters)</tt>	Parse the basepair frequencies.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_codeml.py#L88'>parse_nssites</a>(lines,results,multi_models,multi_genes)</tt>	Determine which nssites models are present and parse them.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_codeml.py#L166'>parse_model</a>(lines,results)</tt>	Parse an individual nssites model's results.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_codeml.py#L347'>parse_siteclass_proportions</a>(line_floats)</tt>	For models which have multiple site classes find the proportion of the alignment assigned to each class.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_codeml.py#L358'>parse_siteclass_omegas</a>(line,site_classes)</tt>	For models which have multiple site classes find the omega estimated for each class.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_codeml.py#L375'>parse_clademodelc</a>(branch_type_no,line_floats,site_classes)</tt>	Parse results specific to the clade model c.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_codeml.py#L387'>parse_branch_site_a</a>(foreground,line_floats,site_classes)</tt>	Parse results specific to the branch site a model.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_codeml.py#L402'>parse_pairwise</a>(lines,results)</tt>	Parse results from pairwise comparisons.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_codeml.py#L444'>parse_distances</a>(lines,results)</tt>	Parse amino acid sequence distance results.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Baseml <a href=' /Phylo/PAML/baseml.py#L19'>__init__</a>(alignment,tree,working_dir,out_file)</tt>	Initialize the baseml instance.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Baseml <a href=' /Phylo/PAML/baseml.py#L59'>write_ctl_file</a>()</tt>	Dynamically build a baseml control file from the options.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Baseml <a href=' /Phylo/PAML/baseml.py#L93'>read_ctl_file</a>(ctl_file)</tt>	Parse a control file and load the options into the baseml instance.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Baseml <a href=' /Phylo/PAML/baseml.py#L146'>_set_rel_paths</a>()</tt>	Convert all file/directory locations to paths relative to the current working directory.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Baseml <a href=' /Phylo/PAML/baseml.py#L158'>run</a>(ctl_file,verbose,command,parse)</tt>	Run baseml using the current configuration and then parse the results.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/yn00.py#L107'>read</a>(results_file)</tt>	Parse a yn00 results file.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Codeml <a href=' /Phylo/PAML/codeml.py#L21'>__init__</a>(alignment,tree,working_dir,out_file)</tt>	Initialize the codeml instance.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Codeml <a href=' /Phylo/PAML/codeml.py#L67'>write_ctl_file</a>()</tt>	Dynamically build a codeml control file from the options.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Codeml <a href=' /Phylo/PAML/codeml.py#L95'>read_ctl_file</a>(ctl_file)</tt>	Parse a control file and load the options into the codeml instance.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Codeml <a href=' /Phylo/PAML/codeml.py#L148'>print_options</a>()</tt>	Print out all of the options and their current settings.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Codeml <a href=' /Phylo/PAML/codeml.py#L160'>_set_rel_paths</a>()</tt>	Convert all file/directory locations to paths relative to the current working directory.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Codeml <a href=' /Phylo/PAML/codeml.py#L172'>run</a>(ctl_file,verbose,command,parse)</tt>	Run codeml using the current configuration and then parse the results.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Paml <a href=' /Phylo/PAML/_paml.py#L72'>print_options</a>()</tt>	Print out all of the options and their current settings.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Paml <a href=' /Phylo/PAML/_paml.py#L77'>set_options</a>()</tt>	Set the value of an option.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Paml <a href=' /Phylo/PAML/_paml.py#L89'>get_option</a>(option)</tt>	Return the value of an option.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Paml <a href=' /Phylo/PAML/_paml.py#L96'>get_all_options</a>()</tt>	Return the values of all the options.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Paml <a href=' /Phylo/PAML/_paml.py#L100'>_set_rel_paths</a>()</tt>	Convert all file/directory locations to paths relative to the current working directory.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Paml <a href=' /Phylo/PAML/_paml.py#L115'>run</a>(ctl_file,verbose,command)</tt>	Run a paml program using the current configuration and then parse the results.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Yn00 <a href=' /Phylo/PAML/yn00.py#L22'>__init__</a>(alignment,working_dir,out_file)</tt>	Initialize the yn00 instance.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Yn00 <a href=' /Phylo/PAML/yn00.py#L37'>write_ctl_file</a>()</tt>	Dynamically build a yn00 control file from the options.
<tt style='background-color:#E8E8E8;'> Phylo.PAML.Yn00 <a href=' /Phylo/PAML/yn00.py#L56'>read_ctl_file</a>(ctl_file)</tt>	Parse a control file and load the options into the yn00 instance.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_yn00.py#L9'>parse_ng86</a>(lines,results)</tt>	Parse the nei & gojobori 1986 section of the results.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_yn00.py#L51'>parse_yn00</a>(lines,results,sequences)</tt>	Parse the yang & nielsen 2000 part of the results.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/_parse_yn00.py#L90'>parse_others</a>(lines,results,sequences)</tt>	Parse the results from the other methods.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/chi2.py#L24'>_ln_gamma_function</a>(alpha)</tt>	Compute the log of the gamma function for a given alpha.
<tt style='background-color:#E8E8E8;'> Phylo.PAML. <a href=' /Phylo/PAML/chi2.py#L51'>_incomplete_gamma</a>(x,alpha)</tt>	Compute an incomplete gamma ratio.
<tt style='background-color:#E8E8E8;'> Phylo.Applications. <a href=' /Phylo/Applications/_Fasttree.py#L12'>_is_int</a>(x)</tt>	Test whether the argument can be serialized as an integer.
<tt style='background-color:#E8E8E8;'> Phylo.Applications. <a href=' /Phylo/Applications/_Fasttree.py#L17'>_is_numeric</a>(x)</tt>	Test whether the argument can be serialized as a number.
<tt style='background-color:#E8E8E8;'> PDB.Model <a href=' /PDB/Model.py#L33'>_sort</a>(c1,c2)</tt>	Sort the chains instances in the model instance.
<tt style='background-color:#E8E8E8;'> PDB.MMCIFParser <a href=' /PDB/MMCIFParser.py#L25'>__init__</a>(structure_builder,QUIET)</tt>	Create a pdbparser object.
<tt style='background-color:#E8E8E8;'> PDB.MMCIFParser <a href=' /PDB/MMCIFParser.py#L51'>get_structure</a>(structure_id,filename)</tt>	Return the structure.
<tt style='background-color:#E8E8E8;'> PDB.FastMMCIFParser <a href=' /PDB/MMCIFParser.py#L219'>__init__</a>(structure_builder,QUIET)</tt>	Create a fastmmcifparser object.
<tt style='background-color:#E8E8E8;'> PDB.FastMMCIFParser <a href=' /PDB/MMCIFParser.py#L248'>get_structure</a>(structure_id,filename)</tt>	Return the structure.
<tt style='background-color:#E8E8E8;'> PDB.Superimposer <a href=' /PDB/Superimposer.py#L24'>set_atoms</a>(fixed,moving)</tt>	Put (translate/rotate) the atoms in fixed on the atoms in moving in such a way that the rmsd is minimized.
<tt style='background-color:#E8E8E8;'> PDB.Superimposer <a href=' /PDB/Superimposer.py#L46'>apply</a>(atom_list)</tt>	Rotate/translate a list of atoms.
<tt style='background-color:#E8E8E8;'> PDB.NeighborSearch <a href=' /PDB/NeighborSearch.py#L30'>__init__</a>(atom_list,bucket_size)</tt>	Create the object.
<tt style='background-color:#E8E8E8;'> PDB.NeighborSearch <a href=' /PDB/NeighborSearch.py#L101'>search_all</a>(radius,level)</tt>	All neighbor search.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L19'>__init__</a>(name,coord,bfactor,occupancy)</tt>	Create atom object.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L73'>_assign_element</a>(element)</tt>	Tries to guess element from atom name if not recognised.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L111'>__repr__</a>()</tt>	Print atom object as <atom atom_name>.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L115'>__sub__</a>(other)</tt>	Calculate distance between two atoms.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L144'>set_sigatm</a>(sigatm_array)</tt>	Set standard deviation of atomic parameters.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L156'>set_siguij</a>(siguij_array)</tt>	Set standard deviations of anisotropic temperature factors.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L164'>set_anisou</a>(anisou_array)</tt>	Set anisotropic b factor.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L174'>flag_disorder</a>()</tt>	Set the disordered flag to 1.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L181'>is_disordered</a>()</tt>	Return the disordered flag 1 if disordered 0 otherwise.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L185'>set_parent</a>(parent)</tt>	Set the parent residue.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L193'>detach_parent</a>()</tt>	Remove reference to parent.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L197'>get_sigatm</a>()</tt>	Return standard deviation of atomic parameters.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L201'>get_siguij</a>()</tt>	Return standard deviations of anisotropic temperature factors.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L205'>get_anisou</a>()</tt>	Return anisotropic b factor.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L209'>get_parent</a>()</tt>	Return parent residue.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L216'>get_name</a>()</tt>	Return atom name.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L220'>get_id</a>()</tt>	Return the id of the atom which is its atom name.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L224'>get_full_id</a>()</tt>	Return the full id of the atom.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L232'>get_coord</a>()</tt>	Return atomic coordinates.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L236'>get_bfactor</a>()</tt>	Return b factor.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L244'>get_fullname</a>()</tt>	Return the atom name including leading and trailing spaces.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L248'>get_altloc</a>()</tt>	Return alternative location specifier.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L255'>transform</a>(rot,tran)</tt>	Apply rotation and translation to the atomic coordinates.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L271'>get_vector</a>()</tt>	Return coordinates as vector.
<tt style='background-color:#E8E8E8;'> PDB.Atom <a href=' /PDB/Atom.py#L280'>copy</a>()</tt>	Create a copy of the atom.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedAtom <a href=' /PDB/Atom.py#L318'>disordered_add</a>(atom)</tt>	Add a disordered atom.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/PSEA.py#L22'>run_psea</a>(fname)</tt>	Run psea and return output filename.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/PSEA.py#L39'>psea</a>(pname)</tt>	Parse psea output file.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/PSEA.py#L57'>psea2HEC</a>(pseq)</tt>	Translate psea secondary structure string into hec.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/PSEA.py#L71'>annotate</a>(m,ss_seq)</tt>	Apply seconardary structure information to residues in model.
<tt style='background-color:#E8E8E8;'> PDB.PSEA <a href=' /PDB/PSEA.py#L95'>get_seq</a>()</tt>	Return secondary structure string.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/FragmentMapper.py#L51'>_read_fragments</a>(size,length,dir)</tt>	Read a fragment spec file private.
<tt style='background-color:#E8E8E8;'> PDB.Fragment <a href=' /PDB/FragmentMapper.py#L94'>__init__</a>(length,fid)</tt>	Initialize fragment object.
<tt style='background-color:#E8E8E8;'> PDB.Fragment <a href=' /PDB/FragmentMapper.py#L112'>get_resname_list</a>()</tt>	Get residue list.
<tt style='background-color:#E8E8E8;'> PDB.Fragment <a href=' /PDB/FragmentMapper.py#L120'>get_id</a>()</tt>	Get identifier for the fragment.
<tt style='background-color:#E8E8E8;'> PDB.Fragment <a href=' /PDB/FragmentMapper.py#L128'>get_coords</a>()</tt>	Get the ca coordinates in the fragment.
<tt style='background-color:#E8E8E8;'> PDB.Fragment <a href=' /PDB/FragmentMapper.py#L136'>add_residue</a>(resname,ca_coord)</tt>	Add a residue.
<tt style='background-color:#E8E8E8;'> PDB.Fragment <a href=' /PDB/FragmentMapper.py#L151'>__len__</a>()</tt>	Return lengt of the fragment.
<tt style='background-color:#E8E8E8;'> PDB.Fragment <a href=' /PDB/FragmentMapper.py#L155'>__sub__</a>(other)</tt>	Return rmsd between two fragments.
<tt style='background-color:#E8E8E8;'> PDB.Fragment <a href=' /PDB/FragmentMapper.py#L170'>__repr__</a>()</tt>	String representing the fragment object.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/FragmentMapper.py#L179'>_make_fragment_list</a>(pp,length)</tt>	Dice up a peptide in fragments of length "length".
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/FragmentMapper.py#L206'>_map_fragment_list</a>(flist,reflist)</tt>	Map flist fragments to closest entry in reflist private.
<tt style='background-color:#E8E8E8;'> PDB.FragmentMapper <a href=' /PDB/FragmentMapper.py#L234'>__init__</a>(model,lsize,flength,fdir)</tt>	Create instance of fragmentmapper @param model the model that will be mapped.
<tt style='background-color:#E8E8E8;'> PDB.FragmentMapper <a href=' /PDB/FragmentMapper.py#L262'>_map</a>(model)</tt>	@param model the model that will be mapped.
<tt style='background-color:#E8E8E8;'> PDB.FragmentMapper <a href=' /PDB/FragmentMapper.py#L306'>__contains__</a>(res)</tt>	True if the given residue is in any of the mapped fragments.
<tt style='background-color:#E8E8E8;'> PDB.FragmentMapper <a href=' /PDB/FragmentMapper.py#L313'>__getitem__</a>(res)</tt>	@type res l{residue}.
<tt style='background-color:#E8E8E8;'> PDB.AbstractPropertyMap <a href=' /PDB/AbstractPropertyMap.py#L20'>__contains__</a>(id)</tt>	True if the mapping has a property for this residue.
<tt style='background-color:#E8E8E8;'> PDB.AbstractPropertyMap <a href=' /PDB/AbstractPropertyMap.py#L36'>__getitem__</a>(key)</tt>	Return property for a residue.
<tt style='background-color:#E8E8E8;'> PDB.AbstractPropertyMap <a href=' /PDB/AbstractPropertyMap.py#L51'>__len__</a>()</tt>	Return number of residues for which the property is available.
<tt style='background-color:#E8E8E8;'> PDB.AbstractPropertyMap <a href=' /PDB/AbstractPropertyMap.py#L59'>has_key</a>(id)</tt>	True if the mapping has a property for this residue.
<tt style='background-color:#E8E8E8;'> PDB.AbstractPropertyMap <a href=' /PDB/AbstractPropertyMap.py#L85'>keys</a>()</tt>	Return the list of residues.
<tt style='background-color:#E8E8E8;'> PDB.AbstractPropertyMap <a href=' /PDB/AbstractPropertyMap.py#L93'>__iter__</a>()</tt>	Iterate over the entity property list.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Vector.py#L13'>m2rotaxis</a>(m)</tt>	Return angles axis pair that corresponds to rotation matrix m.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Vector.py#L69'>vector_to_axis</a>(line,point)</tt>	Vector to axis method.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Vector.py#L88'>rotaxis2m</a>(theta,vector)</tt>	Calculate left multiplying rotation matrix.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Vector.py#L132'>refmat</a>(p,q)</tt>	Return a left multiplying matrix that mirrors p onto q.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Vector.py#L157'>rotmat</a>(p,q)</tt>	Return a left multiplying matrix that rotates p onto q.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Vector.py#L178'>calc_angle</a>(v1,v2,v3)</tt>	Calculate angle method.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Vector.py#L195'>calc_dihedral</a>(v1,v2,v3,v4)</tt>	Calculate dihedral angle method.
<tt style='background-color:#E8E8E8;'> PDB.Vector <a href=' /PDB/Vector.py#L240'>__neg__</a>()</tt>	Return vector -x -y -z.
<tt style='background-color:#E8E8E8;'> PDB.Vector <a href=' /PDB/Vector.py#L245'>__add__</a>(other)</tt>	Return vector+other vector or scalar.
<tt style='background-color:#E8E8E8;'> PDB.Vector <a href=' /PDB/Vector.py#L253'>__sub__</a>(other)</tt>	Return vector-other vector or scalar.
<tt style='background-color:#E8E8E8;'> PDB.Vector <a href=' /PDB/Vector.py#L261'>__mul__</a>(other)</tt>	Return vector vector dot product.
<tt style='background-color:#E8E8E8;'> PDB.Vector <a href=' /PDB/Vector.py#L270'>__pow__</a>(other)</tt>	Return vectorxvector cross product or vectorxscalar.
<tt style='background-color:#E8E8E8;'> PDB.Vector <a href=' /PDB/Vector.py#L292'>norm</a>()</tt>	Return vector norm.
<tt style='background-color:#E8E8E8;'> PDB.Vector <a href=' /PDB/Vector.py#L296'>normsq</a>()</tt>	Return square of vector norm.
<tt style='background-color:#E8E8E8;'> PDB.Vector <a href=' /PDB/Vector.py#L300'>normalize</a>()</tt>	Normalize the vector object.
<tt style='background-color:#E8E8E8;'> PDB.Vector <a href=' /PDB/Vector.py#L309'>normalized</a>()</tt>	Return a normalized copy of the vector.
<tt style='background-color:#E8E8E8;'> PDB.Vector <a href=' /PDB/Vector.py#L318'>angle</a>(other)</tt>	Return angle between two vectors.
<tt style='background-color:#E8E8E8;'> PDB.Vector <a href=' /PDB/Vector.py#L328'>get_array</a>()</tt>	Return a copy of the array of coordinates.
<tt style='background-color:#E8E8E8;'> PDB.Vector <a href=' /PDB/Vector.py#L332'>left_multiply</a>(matrix)</tt>	Return vector=matrix x vector.
<tt style='background-color:#E8E8E8;'> PDB.Vector <a href=' /PDB/Vector.py#L337'>right_multiply</a>(matrix)</tt>	Return vector=vector x matrix.
<tt style='background-color:#E8E8E8;'> PDB.Vector <a href=' /PDB/Vector.py#L342'>copy</a>()</tt>	Return a deep copy of the vector.
<tt style='background-color:#E8E8E8;'> PDB.PDBParser <a href=' /PDB/PDBParser.py#L34'>__init__</a>(PERMISSIVE,get_header,structure_builder,QUIET)</tt>	Create a pdbparser object.
<tt style='background-color:#E8E8E8;'> PDB.PDBParser <a href=' /PDB/PDBParser.py#L65'>get_structure</a>(id,file)</tt>	Return the structure.
<tt style='background-color:#E8E8E8;'> PDB.PDBParser <a href=' /PDB/PDBParser.py#L90'>get_header</a>()</tt>	Return the header.
<tt style='background-color:#E8E8E8;'> PDB.PDBParser <a href=' /PDB/PDBParser.py#L94'>get_trailer</a>()</tt>	Return the trailer.
<tt style='background-color:#E8E8E8;'> PDB.PDBParser <a href=' /PDB/PDBParser.py#L100'>_parse</a>(header_coords_trailer)</tt>	Parse the pdb file private.
<tt style='background-color:#E8E8E8;'> PDB.PDBParser <a href=' /PDB/PDBParser.py#L107'>_get_header</a>(header_coords_trailer)</tt>	Get the header of the pdb file return the rest private.
<tt style='background-color:#E8E8E8;'> PDB.PDBParser <a href=' /PDB/PDBParser.py#L124'>_parse_coordinates</a>(coords_trailer)</tt>	Parse the atomic data in the pdb file private.
<tt style='background-color:#E8E8E8;'> PDB.PDBParser <a href=' /PDB/PDBParser.py#L274'>_handle_PDB_exception</a>(message,line_counter)</tt>	Handle exception private.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Selection.py#L20'>uniqueify</a>(items)</tt>	Return a list of the unique items in the given iterable.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Selection.py#L28'>get_unique_parents</a>(entity_list)</tt>	Translate a list of entities to a list of their unique parents.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Selection.py#L34'>unfold_entities</a>(entity_list,target_level)</tt>	Unfold entities list to a child level e g residues in chain.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Dice.py#L63'>extract</a>(structure,chain_id,start,end)</tt>	Write out selected portion to filename.
<tt style='background-color:#E8E8E8;'> PDB.MMCIF2Dict <a href=' /PDB/MMCIF2Dict.py#L19'>__init__</a>(filename)</tt>	Parse a mmcif file and return a dictionary.
<tt style='background-color:#E8E8E8;'> PDB.Residue <a href=' /PDB/Residue.py#L40'>_sort</a>(a1,a2)</tt>	Sort the atom objects.
<tt style='background-color:#E8E8E8;'> PDB.Residue <a href=' /PDB/Residue.py#L71'>add</a>(atom)</tt>	Add an atom object.
<tt style='background-color:#E8E8E8;'> PDB.Residue <a href=' /PDB/Residue.py#L86'>flag_disordered</a>()</tt>	Set the disordered flag.
<tt style='background-color:#E8E8E8;'> PDB.Residue <a href=' /PDB/Residue.py#L90'>is_disordered</a>()</tt>	Return 1 if the residue contains disordered atoms.
<tt style='background-color:#E8E8E8;'> PDB.Residue <a href=' /PDB/Residue.py#L97'>get_unpacked_list</a>()</tt>	Returns the list of all atoms unpack disorderedatoms.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedResidue <a href=' /PDB/Residue.py#L145'>sort</a>()</tt>	Sort the atoms in the child residue objects.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedResidue <a href=' /PDB/Residue.py#L150'>disordered_add</a>(residue)</tt>	Add a residue object and use its resname as key.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/ResidueDepth.py#L111'>_get_atom_radius</a>(atom,rtype)</tt>	Translates an atom object to an atomic radius defined in msms.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/ResidueDepth.py#L434'>_read_vertex_array</a>(filename)</tt>	Read the vertex list into a numeric array.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/ResidueDepth.py#L448'>get_surface</a>(model,PDB_TO_XYZR,MSMS)</tt>	Represent molecular surface as a vertex list array.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/ResidueDepth.py#L492'>min_dist</a>(coord,surface)</tt>	Return minimum distance between coord and surface.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/ResidueDepth.py#L499'>residue_depth</a>(residue,surface)</tt>	Residue depth as average depth of all its atoms.
<tt style='background-color:#E8E8E8;'> PDB.PDBList <a href=' /PDB/PDBList.py#L86'>__init__</a>(server,pdb,obsolete_pdb)</tt>	Initialize the class with the default server or a custom one.
<tt style='background-color:#E8E8E8;'> PDB.PDBList <a href=' /PDB/PDBList.py#L103'>_print_default_format_warning</a>(file_format)</tt>	Temporary warning similar to a deprecation warning that files are being downloaded in mmcif.
<tt style='background-color:#E8E8E8;'> PDB.PDBList <a href=' /PDB/PDBList.py#L111'>get_status_list</a>(url)</tt>	Retrieves a list of pdb codes in the weekly pdb status file from the given url.
<tt style='background-color:#E8E8E8;'> PDB.PDBList <a href=' /PDB/PDBList.py#L127'>get_recent_changes</a>()</tt>	Returns three lists of the newest weekly files added mod obsolete.
<tt style='background-color:#E8E8E8;'> PDB.PDBList <a href=' /PDB/PDBList.py#L149'>get_all_entries</a>()</tt>	Retrieves a big file containing all the pdb entries and some annotation to them.
<tt style='background-color:#E8E8E8;'> PDB.PDBList <a href=' /PDB/PDBList.py#L161'>get_all_obsolete</a>()</tt>	Returns a list of all obsolete entries ever in the pdb.
<tt style='background-color:#E8E8E8;'> PDB.PDBList <a href=' /PDB/PDBList.py#L197'>retrieve_pdb_file</a>(pdb_code,obsolete,pdir,file_format)</tt>	Fetch pdb structure file from pdb server and store it locally.
<tt style='background-color:#E8E8E8;'> PDB.PDBList <a href=' /PDB/PDBList.py#L295'>update_pdb</a>(file_format)</tt>	Update your local copy of the pdb files.
<tt style='background-color:#E8E8E8;'> PDB.PDBList <a href=' /PDB/PDBList.py#L341'>download_pdb_files</a>(pdb_codes,obsolete,pdir,file_format)</tt>	Fetch set of pdb structure files from the pdb server and stores them locally.
<tt style='background-color:#E8E8E8;'> PDB.PDBList <a href=' /PDB/PDBList.py#L381'>download_entire_pdb</a>(listfile,file_format)</tt>	Retrieve all pdb entries not present in the local pdb copy.
<tt style='background-color:#E8E8E8;'> PDB.PDBList <a href=' /PDB/PDBList.py#L406'>download_obsolete_entries</a>(listfile,file_format)</tt>	Retrieve all obsolete pdb entries not present in the local obsolete pdb copy.
<tt style='background-color:#E8E8E8;'> PDB.PDBList <a href=' /PDB/PDBList.py#L429'>get_seqres_file</a>(savefile)</tt>	Retrieves a big file containing all the sequences of pdb entries and writes it to a file.
<tt style='background-color:#E8E8E8;'> PDB.StructureBuilder <a href=' /PDB/StructureBuilder.py#L34'>_is_completely_disordered</a>(residue)</tt>	Return 1 if all atoms in the residue have a non blank altloc.
<tt style='background-color:#E8E8E8;'> PDB.StructureBuilder <a href=' /PDB/StructureBuilder.py#L48'>set_line_counter</a>(line_counter)</tt>	Tracks line in the pdb file that is being parsed.
<tt style='background-color:#E8E8E8;'> PDB.StructureBuilder <a href=' /PDB/StructureBuilder.py#L56'>init_structure</a>(structure_id)</tt>	Initiate a new structure object with given id.
<tt style='background-color:#E8E8E8;'> PDB.StructureBuilder <a href=' /PDB/StructureBuilder.py#L64'>init_model</a>(model_id,serial_num)</tt>	Initiate a new model object with given id.
<tt style='background-color:#E8E8E8;'> PDB.StructureBuilder <a href=' /PDB/StructureBuilder.py#L74'>init_chain</a>(chain_id)</tt>	Initiate a new chain object with given id.
<tt style='background-color:#E8E8E8;'> PDB.StructureBuilder <a href=' /PDB/StructureBuilder.py#L89'>init_seg</a>(segid)</tt>	Flag a change in segid.
<tt style='background-color:#E8E8E8;'> PDB.StructureBuilder <a href=' /PDB/StructureBuilder.py#L97'>init_residue</a>(resname,field,resseq,icode)</tt>	Initiate a new residue object.
<tt style='background-color:#E8E8E8;'> PDB.StructureBuilder <a href=' /PDB/StructureBuilder.py#L165'>init_atom</a>(name,coord,b_factor,occupancy)</tt>	Initiate a new atom object.
<tt style='background-color:#E8E8E8;'> PDB.StructureBuilder <a href=' /PDB/StructureBuilder.py#L238'>set_anisou</a>(anisou_array)</tt>	Set anisotropic b factor of current atom.
<tt style='background-color:#E8E8E8;'> PDB.StructureBuilder <a href=' /PDB/StructureBuilder.py#L242'>set_siguij</a>(siguij_array)</tt>	Set standard deviation of anisotropic b factor of current atom.
<tt style='background-color:#E8E8E8;'> PDB.StructureBuilder <a href=' /PDB/StructureBuilder.py#L246'>set_sigatm</a>(sigatm_array)</tt>	Set standard deviation of atom position of current atom.
<tt style='background-color:#E8E8E8;'> PDB.StructureBuilder <a href=' /PDB/StructureBuilder.py#L250'>get_structure</a>()</tt>	Return the structure.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/DSSP.py#L137'>ss_to_index</a>(ss)</tt>	Secondary structure symbol to index.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/DSSP.py#L153'>dssp_dict_from_pdb_file</a>(in_file,DSSP)</tt>	Create a dssp dictionary from a pdb file.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/DSSP.py#L202'>make_dssp_dict</a>(filename)</tt>	Dssp dictionary mapping identifers to properties.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/DSSP.py#L218'>_make_dssp_dict</a>(handle)</tt>	Internal function used by mask_dssp_dict private.
<tt style='background-color:#E8E8E8;'> PDB.DSSP <a href=' /PDB/DSSP.py#L326'>__init__</a>(model,in_file,dssp,acc_array)</tt>	Create a dssp object.
<tt style='background-color:#E8E8E8;'> PDB.StructureAlignment <a href=' /PDB/StructureAlignment.py#L79'>_test_equivalence</a>(r1,aa1)</tt>	Test if aa in sequence fits aa in structure.
<tt style='background-color:#E8E8E8;'> PDB.StructureAlignment <a href=' /PDB/StructureAlignment.py#L85'>get_maps</a>()</tt>	Map residues between the structures.
<tt style='background-color:#E8E8E8;'> PDB.StructureAlignment <a href=' /PDB/StructureAlignment.py#L93'>get_iterator</a>()</tt>	Iterator over all residue pairs.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Polypeptide.py#L86'>index_to_one</a>(index)</tt>	Index to corresponding one letter amino acid name.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Polypeptide.py#L97'>one_to_index</a>(s)</tt>	One letter code to index.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Polypeptide.py#L108'>index_to_three</a>(i)</tt>	Index to corresponding three letter amino acid name.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Polypeptide.py#L119'>three_to_index</a>(s)</tt>	Three letter code to index.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Polypeptide.py#L130'>three_to_one</a>(s)</tt>	Three letter code to one letter code.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Polypeptide.py#L149'>one_to_three</a>(s)</tt>	One letter code to three letter code.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/Polypeptide.py#L161'>is_aa</a>(residue,standard)</tt>	Return true if residue object/string is an amino acid.
<tt style='background-color:#E8E8E8;'> PDB.Polypeptide <a href=' /PDB/Polypeptide.py#L192'>get_ca_list</a>()</tt>	Get list of c-alpha atoms in the polypeptide.
<tt style='background-color:#E8E8E8;'> PDB.Polypeptide <a href=' /PDB/Polypeptide.py#L204'>get_phi_psi_list</a>()</tt>	Return the list of phi/psi dihedral angles.
<tt style='background-color:#E8E8E8;'> PDB.Polypeptide <a href=' /PDB/Polypeptide.py#L249'>get_tau_list</a>()</tt>	List of tau torsions angles for all 4 consecutive calpha atoms.
<tt style='background-color:#E8E8E8;'> PDB.Polypeptide <a href=' /PDB/Polypeptide.py#L263'>get_theta_list</a>()</tt>	List of theta angles for all 3 consecutive calpha atoms.
<tt style='background-color:#E8E8E8;'> PDB.Polypeptide <a href=' /PDB/Polypeptide.py#L277'>get_sequence</a>()</tt>	Return the aa sequence as a seq object.
<tt style='background-color:#E8E8E8;'> PDB.Polypeptide <a href=' /PDB/Polypeptide.py#L289'>__repr__</a>()</tt>	Return string representation of the polypeptide.
<tt style='background-color:#E8E8E8;'> PDB._PPBuilder <a href=' /PDB/Polypeptide.py#L309'>__init__</a>(radius)</tt>	@param radius distance.
<tt style='background-color:#E8E8E8;'> PDB._PPBuilder <a href=' /PDB/Polypeptide.py#L315'>_accept</a>(residue,standard_aa_only)</tt>	Check if the residue is an amino acid private.
<tt style='background-color:#E8E8E8;'> PDB._PPBuilder <a href=' /PDB/Polypeptide.py#L330'>build_peptides</a>(entity,aa_only)</tt>	Build and return a list of polypeptide objects.
<tt style='background-color:#E8E8E8;'> PDB.PPBuilder <a href=' /PDB/Polypeptide.py#L447'>_test_dist</a>(c,n)</tt>	Return 1 if distance between atoms<radius private.
<tt style='background-color:#E8E8E8;'> PDB.Select <a href=' /PDB/PDBIO.py#L27'>accept_model</a>(model)</tt>	Overload this to reject models for output.
<tt style='background-color:#E8E8E8;'> PDB.Select <a href=' /PDB/PDBIO.py#L31'>accept_chain</a>(chain)</tt>	Overload this to reject chains for output.
<tt style='background-color:#E8E8E8;'> PDB.Select <a href=' /PDB/PDBIO.py#L35'>accept_residue</a>(residue)</tt>	Overload this to reject residues for output.
<tt style='background-color:#E8E8E8;'> PDB.Select <a href=' /PDB/PDBIO.py#L39'>accept_atom</a>(atom)</tt>	Overload this to reject atoms for output.
<tt style='background-color:#E8E8E8;'> PDB.PDBIO <a href=' /PDB/PDBIO.py#L55'>__init__</a>(use_model_flag)</tt>	Creat the pdbio object.
<tt style='background-color:#E8E8E8;'> PDB.PDBIO <a href=' /PDB/PDBIO.py#L65'>_get_atom_line</a>(atom,hetfield,segid,atom_number)</tt>	Returns an atom pdb string private.
<tt style='background-color:#E8E8E8;'> PDB.PDBIO <a href=' /PDB/PDBIO.py#L152'>save</a>(file,select,write_end,preserve_atom_numbering)</tt>	@param file output file @type file string or filehandle.
<tt style='background-color:#E8E8E8;'> PDB._AbstractHSExposure <a href=' /PDB/HSExposure.py#L26'>__init__</a>(model,radius,offset,hse_up_key)</tt>	@param model model @type model l{model}.
<tt style='background-color:#E8E8E8;'> PDB._AbstractHSExposure <a href=' /PDB/HSExposure.py#L104'>_get_cb</a>(r1,r2,r3)</tt>	Method is provided by the subclasses to calculate hse private.
<tt style='background-color:#E8E8E8;'> PDB._AbstractHSExposure <a href=' /PDB/HSExposure.py#L108'>_get_gly_cb_vector</a>(residue)</tt>	Return a pseudo cb vector for a gly residue private.
<tt style='background-color:#E8E8E8;'> PDB.HSExposureCA <a href=' /PDB/HSExposure.py#L155'>_get_cb</a>(r1,r2,r3)</tt>	Calculate approx ca-cb direction private.
<tt style='background-color:#E8E8E8;'> PDB.HSExposureCA <a href=' /PDB/HSExposure.py#L201'>pcb_vectors_pymol</a>(filename)</tt>	Write pymol script for visualization.
<tt style='background-color:#E8E8E8;'> PDB.HSExposureCB <a href=' /PDB/HSExposure.py#L246'>_get_cb</a>(r1,r2,r3)</tt>	Method to calculate cb-ca vector.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L33'>__len__</a>()</tt>	Return the number of children.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L37'>__getitem__</a>(id)</tt>	Return the child with given id.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L41'>__delitem__</a>(id)</tt>	Remove a child.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L45'>__contains__</a>(id)</tt>	True if there is a child element with the given id.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L49'>__iter__</a>()</tt>	Iterate over children.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L56'>_reset_full_id</a>()</tt>	Reset the full_id.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L77'>id</a>(value)</tt>	Change the id of this entity.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L98'>get_level</a>()</tt>	Return level in hierarchy.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L109'>set_parent</a>(entity)</tt>	Set the parent entity object.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L113'>detach_parent</a>()</tt>	Detach the parent.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L117'>detach_child</a>(id)</tt>	Remove a child.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L124'>add</a>(entity)</tt>	Add a child to the entity.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L134'>insert</a>(pos,entity)</tt>	Add a child to the entity at a specified position.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L144'>get_iterator</a>()</tt>	Return iterator over children.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L149'>get_list</a>()</tt>	Return a copy of the list of children.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L153'>has_id</a>(id)</tt>	True if a child with given id exists.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L157'>get_parent</a>()</tt>	Return the parent entity object.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L161'>get_id</a>()</tt>	Return the id.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L165'>get_full_id</a>()</tt>	Return the full id.
<tt style='background-color:#E8E8E8;'> PDB.Entity <a href=' /PDB/Entity.py#L197'>transform</a>(rot,tran)</tt>	Apply rotation and translation to the atomic coordinates.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L247'>__getattr__</a>(method)</tt>	Forward the method call to the selected child.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L258'>__getitem__</a>(id)</tt>	Return the child with the given id.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L264'>__setitem__</a>(id,child)</tt>	Add a child associated with a certain id.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L268'>__contains__</a>(id)</tt>	True if the child has the given id.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L272'>__iter__</a>()</tt>	Return the number of children.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L276'>__len__</a>()</tt>	Return the number of children.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L280'>__sub__</a>(other)</tt>	Subtraction with another object.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L286'>get_id</a>()</tt>	Return the id.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L290'>disordered_has_id</a>(id)</tt>	True if there is an object present associated with this id.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L294'>detach_parent</a>()</tt>	Detach the parent.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L304'>set_parent</a>(parent)</tt>	Set the parent for the object and its children.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L310'>disordered_select</a>(id)</tt>	Select the object with given id as the currently active object.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L317'>disordered_add</a>(child)</tt>	Add disordered entry.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L324'>is_disordered</a>()</tt>	Return 2 indicating that this entity is a collection of entities.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L328'>disordered_get_id_list</a>()</tt>	Return a list of id's.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L333'>disordered_get</a>(id)</tt>	Get the child object associated with id.
<tt style='background-color:#E8E8E8;'> PDB.DisorderedEntityWrapper <a href=' /PDB/Entity.py#L342'>disordered_get_list</a>()</tt>	Return list of children.
<tt style='background-color:#E8E8E8;'> PDB.Chain <a href=' /PDB/Chain.py#L18'>_sort</a>(r1,r2)</tt>	Sort function for residues in a chain private.
<tt style='background-color:#E8E8E8;'> PDB.Chain <a href=' /PDB/Chain.py#L40'>_translate_id</a>(id)</tt>	Translate sequence identifer to tuple form private.
<tt style='background-color:#E8E8E8;'> PDB.Chain <a href=' /PDB/Chain.py#L61'>__getitem__</a>(id)</tt>	Return the residue with given id.
<tt style='background-color:#E8E8E8;'> PDB.Chain <a href=' /PDB/Chain.py#L76'>__contains__</a>(id)</tt>	True if a residue with given id is present in this chain.
<tt style='background-color:#E8E8E8;'> PDB.Chain <a href=' /PDB/Chain.py#L103'>get_unpacked_list</a>()</tt>	Return a list of undisordered residues.
<tt style='background-color:#E8E8E8;'> PDB.Chain <a href=' /PDB/Chain.py#L119'>has_id</a>(id)</tt>	Return 1 if a residue with given id is present.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/parse_pdb_header.py#L67'>_format_date</a>(pdb_date)</tt>	Convert dates from dd-mon-yy to yyyy-mm-dd format.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/parse_pdb_header.py#L85'>_chop_end_codes</a>(line)</tt>	Chops lines ending with ' 1csa 14' and the like.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/parse_pdb_header.py#L90'>_chop_end_misc</a>(line)</tt>	Chops lines ending with ' 14-jul-97 1csa' and the like.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/parse_pdb_header.py#L95'>_nice_case</a>(line)</tt>	Make a lowercase string with capitals.
<tt style='background-color:#E8E8E8;'> PDB. <a href=' /PDB/parse_pdb_header.py#L114'>parse_pdb_header</a>(infile)</tt>	Return the header lines of a pdb file as a dictionary.
<tt style='background-color:#E8E8E8;'> PDB.mmtf.StructureDecoder <a href=' /PDB/mmtf/DefaultParser.py#L10'>init_structure</a>(total_num_bonds,total_num_atoms,total_num_groups,total_num_chains)</tt>	Initialise the structure object.
<tt style='background-color:#E8E8E8;'> PDB.mmtf.StructureDecoder <a href=' /PDB/mmtf/DefaultParser.py#L29'>set_atom_info</a>(atom_name,serial_number,alternative_location_id,x)</tt>	Create an atom object an set the information.
<tt style='background-color:#E8E8E8;'> PDB.mmtf.StructureDecoder <a href=' /PDB/mmtf/DefaultParser.py#L56'>set_chain_info</a>(chain_id,chain_name,num_groups)</tt>	Set the chain information.
<tt style='background-color:#E8E8E8;'> PDB.mmtf.StructureDecoder <a href=' /PDB/mmtf/DefaultParser.py#L74'>set_entity_info</a>(chain_indices,sequence,description,entity_type)</tt>	Set the entity level information for the structure.
<tt style='background-color:#E8E8E8;'> PDB.mmtf.StructureDecoder <a href=' /PDB/mmtf/DefaultParser.py#L87'>set_group_info</a>(group_name,group_number,insertion_code,group_type)</tt>	Set the information for a group.
<tt style='background-color:#E8E8E8;'> PDB.mmtf.StructureDecoder <a href=' /PDB/mmtf/DefaultParser.py#L113'>set_model_info</a>(model_id,chain_count)</tt>	Set the information for a model.
<tt style='background-color:#E8E8E8;'> PDB.mmtf.StructureDecoder <a href=' /PDB/mmtf/DefaultParser.py#L121'>set_xtal_info</a>(space_group,unit_cell)</tt>	Set the crystallographic information for the structure.
<tt style='background-color:#E8E8E8;'> PDB.mmtf.StructureDecoder <a href=' /PDB/mmtf/DefaultParser.py#L129'>set_header_info</a>(r_free,r_work,resolution,title)</tt>	Sets the header information.
<tt style='background-color:#E8E8E8;'> PDB.mmtf.StructureDecoder <a href=' /PDB/mmtf/DefaultParser.py#L143'>set_bio_assembly_trans</a>(bio_assembly_index,input_chain_indices,input_transform)</tt>	Set the bioassembly transformation information a single bioassembly can have multiple transforms.
<tt style='background-color:#E8E8E8;'> PDB.mmtf.StructureDecoder <a href=' /PDB/mmtf/DefaultParser.py#L153'>finalize_structure</a>()</tt>	Any functions needed to cleanup the structure.
<tt style='background-color:#E8E8E8;'> PDB.mmtf.StructureDecoder <a href=' /PDB/mmtf/DefaultParser.py#L157'>set_group_bond</a>(atom_index_one,atom_index_two,bond_order)</tt>	Add bonds within a group.
<tt style='background-color:#E8E8E8;'> PDB.mmtf.StructureDecoder <a href=' /PDB/mmtf/DefaultParser.py#L166'>set_inter_group_bond</a>(atom_index_one,atom_index_two,bond_order)</tt>	Add bonds between groups.
<tt style='background-color:#E8E8E8;'> PDB.mmtf.MMTFParser <a href=' /PDB/mmtf/__init__.py#L18'>get_structure_from_url</a>(pdb_id)</tt>	Get a structure from a url - given a pdb id.
<tt style='background-color:#E8E8E8;'> PDB.mmtf.MMTFParser <a href=' /PDB/mmtf/__init__.py#L28'>get_structure</a>(file_path)</tt>	Get a structrue from a file - given a file path.
<tt style='background-color:#E8E8E8;'> PDB.QCPSuperimposer.QCPSuperimposer <a href=' /PDB/QCPSuperimposer/__init__.py#L50'>_rms</a>(coords1,coords2)</tt>	Return rms deviations between coords1 and coords2.
<tt style='background-color:#E8E8E8;'> PDB.QCPSuperimposer.QCPSuperimposer <a href=' /PDB/QCPSuperimposer/__init__.py#L72'>set</a>(reference_coords,coords)</tt>	Set the coordinates to be superimposed.
<tt style='background-color:#E8E8E8;'> PDB.QCPSuperimposer.QCPSuperimposer <a href=' /PDB/QCPSuperimposer/__init__.py#L94'>run</a>()</tt>	Superimpose the coordinate sets.
<tt style='background-color:#E8E8E8;'> PDB.QCPSuperimposer.QCPSuperimposer <a href=' /PDB/QCPSuperimposer/__init__.py#L110'>get_transformed</a>()</tt>	Get the transformed coordinate set.
<tt style='background-color:#E8E8E8;'> PDB.QCPSuperimposer.QCPSuperimposer <a href=' /PDB/QCPSuperimposer/__init__.py#L120'>get_rotran</a>()</tt>	Right multiplying rotation matrix and translation.
<tt style='background-color:#E8E8E8;'> PDB.QCPSuperimposer.QCPSuperimposer <a href=' /PDB/QCPSuperimposer/__init__.py#L126'>get_init_rms</a>()</tt>	Root mean square deviation of untransformed coordinates.
<tt style='background-color:#E8E8E8;'> PDB.QCPSuperimposer.QCPSuperimposer <a href=' /PDB/QCPSuperimposer/__init__.py#L134'>get_rms</a>()</tt>	Root mean square deviation of superimposed coordinates.
<tt style='background-color:#E8E8E8;'> Nexus.Chain <a href=' /Nexus/Nodes.py#L28'>__init__</a>()</tt>	Initiates a node chain.
<tt style='background-color:#E8E8E8;'> Nexus.Chain <a href=' /Nexus/Nodes.py#L33'>_get_id</a>()</tt>	Gets a new id for a node in the chain.
<tt style='background-color:#E8E8E8;'> Nexus.Chain <a href=' /Nexus/Nodes.py#L38'>all_ids</a>()</tt>	Return a list of all node ids.
<tt style='background-color:#E8E8E8;'> Nexus.Chain <a href=' /Nexus/Nodes.py#L42'>add</a>(node,prev)</tt>	Attaches node to another.
<tt style='background-color:#E8E8E8;'> Nexus.Chain <a href=' /Nexus/Nodes.py#L55'>collapse</a>(id)</tt>	Deletes node from chain and relinks successors to predecessor.
<tt style='background-color:#E8E8E8;'> Nexus.Chain <a href=' /Nexus/Nodes.py#L69'>kill</a>(id)</tt>	Kills a node from chain without caring to what it is connected.
<tt style='background-color:#E8E8E8;'> Nexus.Chain <a href=' /Nexus/Nodes.py#L76'>unlink</a>(id)</tt>	Disconnects node from his predecessor.
<tt style='background-color:#E8E8E8;'> Nexus.Chain <a href=' /Nexus/Nodes.py#L87'>link</a>(parent,child)</tt>	Connects son to parent.
<tt style='background-color:#E8E8E8;'> Nexus.Chain <a href=' /Nexus/Nodes.py#L98'>is_parent_of</a>(parent,grandchild)</tt>	Check if grandchild is a subnode of parent.
<tt style='background-color:#E8E8E8;'> Nexus.Chain <a href=' /Nexus/Nodes.py#L109'>trace</a>(start,finish)</tt>	Returns a list of all node_ids between two nodes excluding start including end.
<tt style='background-color:#E8E8E8;'> Nexus.Node <a href=' /Nexus/Nodes.py#L123'>__init__</a>(data)</tt>	Represents a node with one predecessor and multiple successors.
<tt style='background-color:#E8E8E8;'> Nexus.Node <a href=' /Nexus/Nodes.py#L130'>set_id</a>(id)</tt>	Sets the id of a node if not set yet.
<tt style='background-color:#E8E8E8;'> Nexus.Node <a href=' /Nexus/Nodes.py#L136'>get_id</a>()</tt>	Returns the node's id.
<tt style='background-color:#E8E8E8;'> Nexus.Node <a href=' /Nexus/Nodes.py#L140'>get_succ</a>()</tt>	Returns a list of the node's successors.
<tt style='background-color:#E8E8E8;'> Nexus.Node <a href=' /Nexus/Nodes.py#L144'>get_prev</a>()</tt>	Returns the id of the node's predecessor.
<tt style='background-color:#E8E8E8;'> Nexus.Node <a href=' /Nexus/Nodes.py#L148'>add_succ</a>(id)</tt>	Adds a node id to the node's successors.
<tt style='background-color:#E8E8E8;'> Nexus.Node <a href=' /Nexus/Nodes.py#L155'>remove_succ</a>(id)</tt>	Removes a node id from the node's successors.
<tt style='background-color:#E8E8E8;'> Nexus.Node <a href=' /Nexus/Nodes.py#L159'>set_succ</a>(new_succ)</tt>	Sets the node's successors.
<tt style='background-color:#E8E8E8;'> Nexus.Node <a href=' /Nexus/Nodes.py#L165'>set_prev</a>(id)</tt>	Sets the node's predecessor.
<tt style='background-color:#E8E8E8;'> Nexus.Node <a href=' /Nexus/Nodes.py#L169'>get_data</a>()</tt>	Returns a node's data.
<tt style='background-color:#E8E8E8;'> Nexus.Node <a href=' /Nexus/Nodes.py#L173'>set_data</a>(data)</tt>	Sets a node's data.
<tt style='background-color:#E8E8E8;'> Nexus.CharBuffer <a href=' /Nexus/Nexus.py#L118'>next_word</a>()</tt>	Return the next nexus word from a string.
<tt style='background-color:#E8E8E8;'> Nexus.CharBuffer <a href=' /Nexus/Nexus.py#L156'>rest</a>()</tt>	Return the rest of the string without parsing.
<tt style='background-color:#E8E8E8;'> Nexus. <a href=' /Nexus/Nexus.py#L223'>safename</a>(name,mrbayes)</tt>	Return a taxon identifier according to nexus standard.
<tt style='background-color:#E8E8E8;'> Nexus. <a href=' /Nexus/Nexus.py#L242'>quotestrip</a>(word)</tt>	Remove quotes and/or double quotes around identifiers.
<tt style='background-color:#E8E8E8;'> Nexus. <a href=' /Nexus/Nexus.py#L251'>get_start_end</a>(sequence,skiplist)</tt>	Return position of first and last character which is not in skiplist.
<tt style='background-color:#E8E8E8;'> Nexus. <a href=' /Nexus/Nexus.py#L271'>_sort_keys_by_values</a>(p)</tt>	Returns a sorted list of keys of p sorted by values of p.
<tt style='background-color:#E8E8E8;'> Nexus. <a href=' /Nexus/Nexus.py#L276'>_make_unique</a>(l)</tt>	Check that all values in list are unique and return a pruned and sorted list.
<tt style='background-color:#E8E8E8;'> Nexus. <a href=' /Nexus/Nexus.py#L281'>_unique_label</a>(previous_labels,label)</tt>	Returns a unique name if label is already in previous_labels.
<tt style='background-color:#E8E8E8;'> Nexus. <a href=' /Nexus/Nexus.py#L296'>_seqmatrix2strmatrix</a>(matrix)</tt>	Converts a seq-object matrix to a plain sequence-string matrix.
<tt style='background-color:#E8E8E8;'> Nexus. <a href=' /Nexus/Nexus.py#L301'>_compact4nexus</a>(orig_list)</tt>	Transform [1 2 3 5 6 7 8 12 15 18 20] baseindex 0 used in the nexus class into '2-4 6-9 13-19\3 21' (baseindex 1 used in programs like paup or mrbayes.
<tt style='background-color:#E8E8E8;'> Nexus. <a href=' /Nexus/Nexus.py#L334'>combine</a>(matrices)</tt>	Combine matrices in [ name nexus-instance ] and return new nexus instance.
<tt style='background-color:#E8E8E8;'> Nexus. <a href=' /Nexus/Nexus.py#L415'>_kill_comments_and_break_lines</a>(text)</tt>	Delete []-delimited comments out of a file and break into lines separated by ';'.
<tt style='background-color:#E8E8E8;'> Nexus. <a href=' /Nexus/Nexus.py#L481'>_adjust_lines</a>(lines)</tt>	Adjust linebreaks to match ';', strip leading/trailing whitespace.
<tt style='background-color:#E8E8E8;'> Nexus. <a href=' /Nexus/Nexus.py#L501'>_replace_parenthesized_ambigs</a>(seq,rev_ambig_values)</tt>	Replaces ambigs in xxx acg xxx format by iupac ambiguity code.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L605'>get_original_taxon_order</a>()</tt>	Included for backwards compatibility deprecated.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L609'>set_original_taxon_order</a>(value)</tt>	Included for backwards compatibility deprecated.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L615'>read</a>(input)</tt>	Read and parse nexus input a filename file-handle or string.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L655'>_get_nexus_block</a>(file_contents)</tt>	Generator for looping through nexus blocks.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L683'>_parse_nexus_block</a>(title,contents)</tt>	Parse a known nexus block private.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L813'>_taxlabels</a>(options)</tt>	Get taxon labels private.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L830'>_check_taxlabels</a>(taxon)</tt>	Check for presence of taxon in self taxlabels.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1050'>_utree</a>(options)</tt>	Some software clustalx uses 'utree' to denote an unrooted tree.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1132'>_codonposset</a>(options)</tt>	Read codon positions from a codons block as written from mcclade.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1175'>_get_indices</a>(options,set_type,separator)</tt>	Parse the taxset/charset specification private.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1188'>_name_n_vector</a>(opts,separator)</tt>	Extract name and check that it's not in vector format.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1212'>_parse_list</a>(options_buffer,set_type)</tt>	Parse a nexus list private.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1260'>_resolve</a>(identifier,set_type)</tt>	Translate identifier in list into character/taxon index.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1332'>write_nexus_data_partitions</a>(matrix,filename,blocksize,interleave)</tt>	Writes a nexus file for each partition in charpartition.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1370'>write_nexus_data</a>(filename,matrix,exclude,delete)</tt>	Writes a nexus file with data and sets block to a file or handle.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1496'>append_sets</a>(exclude,delete,mrbayes,include_codons)</tt>	Returns a sets block.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1568'>export_fasta</a>(filename,width)</tt>	Writes matrix into a fasta file.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1582'>export_phylip</a>(filename)</tt>	Writes matrix into a phylip file.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1599'>constant</a>(matrix,delete,exclude)</tt>	Return a list with all constant characters.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1667'>weighted_stepmatrix</a>(name,exclude,delete)</tt>	Calculates a stepmatrix for weighted parsimony.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1681'>crop_matrix</a>(matrix,delete,exclude)</tt>	Return a matrix without deleted taxa and excluded characters.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1702'>bootstrap</a>(matrix,delete,exclude)</tt>	Return a bootstrapped matrix.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1725'>add_sequence</a>(name,sequence)</tt>	Adds a sequence string to the matrix.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1750'>insert_gap</a>(pos,n,leftgreedy)</tt>	Add a gap into the matrix and adjust charsets and partitions.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1797'>_adjust_charlabels</a>(exclude,insert)</tt>	Return adjusted indices of self charlabels if characters are excluded or inserted.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1826'>invert</a>(charlist)</tt>	Returns all character indices that are not in charlist.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1830'>gaponly</a>(include_missing)</tt>	Return gap-only sites.
<tt style='background-color:#E8E8E8;'> Nexus.Nexus <a href=' /Nexus/Nexus.py#L1838'>terminal_gap_to_missing</a>(missing,skip_n)</tt>	Replaces all terminal gaps with missing character.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L54'>__init__</a>(tree,weight,rooted,name)</tt>	Ntree self tree.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L74'>_parse</a>(tree)</tt>	Parses a b c [[[xx]:]yy] into subcomponents and travels down recursively.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L121'>_add_subtree</a>(parent_id,tree)</tt>	Adds leaf or tree in newick format to a parent_id.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L137'>_add_nodedata</a>(nd,st)</tt>	Add data to the node parsed from the comments taxon and support.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L158'>_get_values</a>(text)</tt>	Extracts values (support/branchlength) from xx[:yyy], xx.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L188'>_walk</a>(node)</tt>	Return all node_ids downwards from a node.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L197'>node</a>(node_id)</tt>	Return the instance of node_id.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L206'>split</a>(parent_id,n,branchlength)</tt>	Speciation generates n default two descendants of a node.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L226'>search_taxon</a>(taxon)</tt>	Returns the first matching taxon in self data taxon not restricted to terminal nodes.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L236'>prune</a>(taxon)</tt>	Prunes a terminal taxon from the tree.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L264'>get_taxa</a>(node_id)</tt>	Return a list of all otus downwards from a node.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L284'>get_terminals</a>()</tt>	Return a list of all terminal nodes.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L288'>is_terminal</a>(node)</tt>	Returns true if node is a terminal node.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L292'>is_internal</a>(node)</tt>	Returns true if node is an internal node.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L296'>is_preterminal</a>(node)</tt>	Returns true if all successors of a node are terminal ones.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L303'>count_terminals</a>(node)</tt>	Counts the number of terminal nodes that are attached to a node.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L309'>collapse_genera</a>(space_equals_underscore)</tt>	Collapses all subtrees which belong to the same genus.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L340'>sum_branchlength</a>(root,node)</tt>	Adds up the branchlengths from root default self root to node.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L355'>set_subtree</a>(node)</tt>	Return subtree as a set of nested sets.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L373'>is_identical</a>(tree2)</tt>	Compare tree and tree2 for identity.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L380'>is_compatible</a>(tree2,threshold,strict)</tt>	Compares branches with support>threshold for compatibility.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L410'>common_ancestor</a>(node1,node2)</tt>	Return the common ancestor that connects two nodes.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L419'>distance</a>(node1,node2)</tt>	Add and return the sum of the branchlengths between two nodes.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L427'>is_monophyletic</a>(taxon_list)</tt>	Return node_id of common ancestor if taxon_list is monophyletic -1 otherwise.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L449'>is_bifurcating</a>(node)</tt>	Return true if tree downstream of node is strictly bifurcating.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L464'>branchlength2support</a>()</tt>	Move values stored in data branchlength to data support and set branchlength to 0 0.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L474'>convert_absolute_support</a>(nrep)</tt>	Convert absolute support clade-count to rel frequencies.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L484'>has_support</a>(node)</tt>	Returns true if any of the nodes has data support != none.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L492'>randomize</a>(ntax,taxon_list,branchlength,branchlength_sd)</tt>	Generates a random tree with ntax taxa and/or taxa from taxlabels.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L527'>display</a>()</tt>	Quick and dirty lists of all nodes.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L558'>to_string</a>(support_as_branchlengths,branchlengths_only,plain,plain_newick)</tt>	Return a paup compatible tree line.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L641'>__str__</a>()</tt>	Short version of to_string(), gives plain tree.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L645'>unroot</a>()</tt>	Defines a unrooted tree structure using data of a rooted tree.
<tt style='background-color:#E8E8E8;'> Nexus.Tree <a href=' /Nexus/Trees.py#L747'>merge_with_support</a>(bstrees,constree,threshold,outgroup)</tt>	Merges clade support from consensus or list of bootstrap-trees with phylogeny.
<tt style='background-color:#E8E8E8;'> Nexus. <a href=' /Nexus/Trees.py#L782'>consensus</a>(trees,threshold,outgroup)</tt>	Compute a majority rule consensus tree of all clades with relative frequency>=threshold from a list of trees.
<tt style='background-color:#E8E8E8;'> Nexus.StandardData <a href=' /Nexus/StandardData.py#L77'>__len__</a>()</tt>	Returns the length of the coding use len(my_coding).
<tt style='background-color:#E8E8E8;'> Nexus.StandardData <a href=' /Nexus/StandardData.py#L102'>raw</a>()</tt>	Returns the full coding as a python list.
<tt style='background-color:#E8E8E8;'> Nexus.StandardData <a href=' /Nexus/StandardData.py#L106'>__str__</a>()</tt>	Returns the full coding as a python string use str(my_coding).
<tt style='background-color:#E8E8E8;'> AlignIO. <a href=' /AlignIO/FastaIO.py#L31'>_extract_alignment_region</a>(alignment_seq_with_flanking,annotation)</tt>	Helper function for the main parsing code private.
<tt style='background-color:#E8E8E8;'> AlignIO. <a href=' /AlignIO/FastaIO.py#L64'>FastaM10Iterator</a>(handle,alphabet)</tt>	Alignment iterator for the fasta tool's pairwise alignment output.
<tt style='background-color:#E8E8E8;'> AlignIO. <a href=' /AlignIO/MauveIO.py#L87'>_identifier_split</a>(identifier)</tt>	Returns name start end string tuple from an identifier.
<tt style='background-color:#E8E8E8;'> AlignIO.MauveWriter <a href=' /AlignIO/MauveIO.py#L103'>write_alignment</a>(alignment)</tt>	Use this to write another single alignment to an open file.
<tt style='background-color:#E8E8E8;'> AlignIO.MauveWriter <a href=' /AlignIO/MauveIO.py#L136'>_write_record</a>(record,record_idx)</tt>	Write a single seqrecord to the file.
<tt style='background-color:#E8E8E8;'> AlignIO.MafWriter <a href=' /AlignIO/MafIO.py#L56'>write_header</a>()</tt>	Writes the maf header.
<tt style='background-color:#E8E8E8;'> AlignIO.MafWriter <a href=' /AlignIO/MafIO.py#L61'>_write_record</a>(record)</tt>	Writes a single seqrecord object to an 's' line in a maf block.
<tt style='background-color:#E8E8E8;'> AlignIO.MafWriter <a href=' /AlignIO/MafIO.py#L82'>write_alignment</a>(alignment)</tt>	Writes every seqrecord in a multipleseqalignment object to its own.
<tt style='background-color:#E8E8E8;'> AlignIO. <a href=' /AlignIO/MafIO.py#L120'>MafIterator</a>(handle,seq_count,alphabet)</tt>	Iterates over a maf file handle as multipleseqalignment objects.
<tt style='background-color:#E8E8E8;'> AlignIO.MafIndex <a href=' /AlignIO/MafIO.py#L241'>__init__</a>(sqlite_file,maf_file,target_seqname)</tt>	Indexes or loads the index of a maf file.
<tt style='background-color:#E8E8E8;'> AlignIO.MafIndex <a href=' /AlignIO/MafIO.py#L264'>__check_existing_db</a>()</tt>	Basic sanity checks upon loading an existing index.
<tt style='background-color:#E8E8E8;'> AlignIO.MafIndex <a href=' /AlignIO/MafIO.py#L312'>__make_new_index</a>()</tt>	Read maf file and generate sqlite index.
<tt style='background-color:#E8E8E8;'> AlignIO.MafIndex <a href=' /AlignIO/MafIO.py#L372'>__maf_indexer</a>()</tt>	Generator function returns index information for each bundle.
<tt style='background-color:#E8E8E8;'> AlignIO.MafIndex <a href=' /AlignIO/MafIO.py#L413'>_region2bin</a>(start,end)</tt>	Finds bins that a region may belong to.
<tt style='background-color:#E8E8E8;'> AlignIO.MafIndex <a href=' /AlignIO/MafIO.py#L429'>_ucscbin</a>(start,end)</tt>	Returns the smallest bin a given region will fit into.
<tt style='background-color:#E8E8E8;'> AlignIO.MafIndex <a href=' /AlignIO/MafIO.py#L455'>_get_record</a>(offset)</tt>	Retrieves a single maf record located at the offset provided.
<tt style='background-color:#E8E8E8;'> AlignIO.MafIndex <a href=' /AlignIO/MafIO.py#L460'>search</a>(starts,ends)</tt>	Searches index database for maf records overlapping ranges provided.
<tt style='background-color:#E8E8E8;'> AlignIO.MafIndex <a href=' /AlignIO/MafIO.py#L535'>get_spliced</a>(starts,ends,strand)</tt>	Returns a multiple alignment of the exact sequence range provided.
<tt style='background-color:#E8E8E8;'> AlignIO.EmbossWriter <a href=' /AlignIO/EmbossIO.py#L47'>write_alignment</a>(alignment)</tt>	Use this to write another single alignment to an open file.
<tt style='background-color:#E8E8E8;'> AlignIO.ClustalWriter <a href=' /AlignIO/ClustalIO.py#L24'>write_alignment</a>(alignment)</tt>	Use this to write another single alignment to an open file.
<tt style='background-color:#E8E8E8;'> AlignIO. <a href=' /AlignIO/__init__.py#L187'>write</a>(alignments,handle,format)</tt>	Write complete set of alignments to a file.
<tt style='background-color:#E8E8E8;'> AlignIO. <a href=' /AlignIO/__init__.py#L244'>_SeqIO_to_alignment_iterator</a>(handle,format,alphabet,seq_count)</tt>	Uses bio seqio to create an multipleseqalignment iterator private.
<tt style='background-color:#E8E8E8;'> AlignIO. <a href=' /AlignIO/__init__.py#L282'>_force_alphabet</a>(alignment_iterator,alphabet)</tt>	Iterate over alignments over-riding the alphabet private.
<tt style='background-color:#E8E8E8;'> AlignIO. <a href=' /AlignIO/__init__.py#L303'>parse</a>(handle,format,seq_count,alphabet)</tt>	Iterate over an alignment file as multipleseqalignment objects.
<tt style='background-color:#E8E8E8;'> AlignIO. <a href=' /AlignIO/__init__.py#L380'>read</a>(handle,format,seq_count,alphabet)</tt>	Turns an alignment file into a single multipleseqalignment object.
<tt style='background-color:#E8E8E8;'> AlignIO. <a href=' /AlignIO/__init__.py#L445'>convert</a>(in_file,in_format,out_file,out_format)</tt>	Convert between two alignment files returns number of alignments.
<tt style='background-color:#E8E8E8;'> AlignIO.StockholmWriter <a href=' /AlignIO/StockholmIO.py#L161'>write_alignment</a>(alignment)</tt>	Use this to write another single alignment to an open file.
<tt style='background-color:#E8E8E8;'> AlignIO.StockholmWriter <a href=' /AlignIO/StockholmIO.py#L187'>_write_record</a>(record)</tt>	Write a single seqrecord to the file.
<tt style='background-color:#E8E8E8;'> AlignIO.StockholmIterator <a href=' /AlignIO/StockholmIO.py#L471'>_identifier_split</a>(identifier)</tt>	Returns name start end string tuple from an identier.
<tt style='background-color:#E8E8E8;'> AlignIO.StockholmIterator <a href=' /AlignIO/StockholmIO.py#L484'>_get_meta_data</a>(identifier,meta_dict)</tt>	Takes an itentifier and returns dict of all meta-data matching it.
<tt style='background-color:#E8E8E8;'> AlignIO.StockholmIterator <a href=' /AlignIO/StockholmIO.py#L518'>_populate_meta_data</a>(identifier,record)</tt>	Adds meta-date to a secrecord's annotations dictionary.
<tt style='background-color:#E8E8E8;'> AlignIO.AlignmentIterator <a href=' /AlignIO/Interfaces.py#L26'>__init__</a>(handle,seq_count,alphabet)</tt>	Create an alignmentiterator object.
<tt style='background-color:#E8E8E8;'> AlignIO.AlignmentIterator <a href=' /AlignIO/Interfaces.py#L51'>__next__</a>()</tt>	Return the next alignment in the file.
<tt style='background-color:#E8E8E8;'> AlignIO.AlignmentIterator <a href=' /AlignIO/Interfaces.py#L69'>__iter__</a>()</tt>	Iterate over the entries as multipleseqalignment objects.
<tt style='background-color:#E8E8E8;'> AlignIO.AlignmentWriter <a href=' /AlignIO/Interfaces.py#L94'>write_file</a>(alignments)</tt>	Use this to write an entire file containing the given alignments.
<tt style='background-color:#E8E8E8;'> AlignIO.AlignmentWriter <a href=' /AlignIO/Interfaces.py#L110'>clean</a>(text)</tt>	Use this to avoid getting newlines in the output.
<tt style='background-color:#E8E8E8;'> AlignIO.SequentialAlignmentWriter <a href=' /AlignIO/Interfaces.py#L126'>write_file</a>(alignments)</tt>	Use this to write an entire file containing the given alignments.
<tt style='background-color:#E8E8E8;'> AlignIO.SequentialAlignmentWriter <a href=' /AlignIO/Interfaces.py#L141'>write_header</a>()</tt>	Use this to write any header.
<tt style='background-color:#E8E8E8;'> AlignIO.SequentialAlignmentWriter <a href=' /AlignIO/Interfaces.py#L149'>write_footer</a>()</tt>	Use this to write any footer.
<tt style='background-color:#E8E8E8;'> AlignIO.SequentialAlignmentWriter <a href=' /AlignIO/Interfaces.py#L157'>write_alignment</a>(alignment)</tt>	Use this to write a single alignment.
<tt style='background-color:#E8E8E8;'> AlignIO. <a href=' /AlignIO/NexusIO.py#L31'>NexusIterator</a>(handle,seq_count)</tt>	Returns seqrecord objects from a nexus file.
<tt style='background-color:#E8E8E8;'> AlignIO.NexusWriter <a href=' /AlignIO/NexusIO.py#L73'>write_file</a>(alignments)</tt>	Use this to write an entire file containing the given alignments.
<tt style='background-color:#E8E8E8;'> AlignIO.NexusWriter <a href=' /AlignIO/NexusIO.py#L123'>_classify_alphabet_for_nexus</a>(alphabet)</tt>	Returns 'protein', 'dna', 'rna' based on the alphabet private.
<tt style='background-color:#E8E8E8;'> AlignIO.PhylipWriter <a href=' /AlignIO/PhylipIO.py#L56'>write_alignment</a>(alignment,id_width)</tt>	Use this to write another single alignment to an open file.
<tt style='background-color:#E8E8E8;'> AlignIO.PhylipIterator <a href=' /AlignIO/PhylipIO.py#L183'>_split_id</a>(line)</tt>	Extracts the sequence id from a phylip line private.
<tt style='background-color:#E8E8E8;'> AlignIO.RelaxedPhylipWriter <a href=' /AlignIO/PhylipIO.py#L277'>write_alignment</a>(alignment)</tt>	Write a relaxed phylip alignment.
<tt style='background-color:#E8E8E8;'> AlignIO.RelaxedPhylipIterator <a href=' /AlignIO/PhylipIO.py#L299'>_split_id</a>(line)</tt>	Extracts the sequence id from a phylip line private.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.ExampleManager <a href=' /NeuralNetwork/Training.py#L40'>__init__</a>(training_percent,validation_percent)</tt>	Initialize the manager with the training examples.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.ExampleManager <a href=' /NeuralNetwork/Training.py#L70'>add_examples</a>(training_examples)</tt>	Add a set of training examples to the manager.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.ValidationIncreaseStop <a href=' /NeuralNetwork/StopTraining.py#L34'>__init__</a>(max_iterations,min_iterations,verbose)</tt>	Initialize the stopping criterion class.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.ValidationIncreaseStop <a href=' /NeuralNetwork/StopTraining.py#L55'>stopping_criteria</a>(num_iterations,training_error,validation_error)</tt>	Define when to stop iterating.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.BasicNetwork <a href=' /NeuralNetwork/BackPropagation/Network.py#L34'>__init__</a>(input_layer,hidden_layer,output_layer)</tt>	Initialize the network with the three layers.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.BasicNetwork <a href=' /NeuralNetwork/BackPropagation/Network.py#L41'>train</a>(training_examples,validation_examples,stopping_criteria,learning_rate)</tt>	Train the neural network to recognize particular examples.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.BasicNetwork <a href=' /NeuralNetwork/BackPropagation/Network.py#L102'>predict</a>(inputs)</tt>	Predict outputs from the neural network with the given inputs.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation. <a href=' /NeuralNetwork/BackPropagation/Layer.py#L18'>logistic_function</a>(value)</tt>	Transform the value with the logistic function.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.AbstractLayer <a href=' /NeuralNetwork/BackPropagation/Layer.py#L30'>__init__</a>(num_nodes,has_bias_node)</tt>	Initialize the layer.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.AbstractLayer <a href=' /NeuralNetwork/BackPropagation/Layer.py#L56'>set_weight</a>(this_node,next_node,value)</tt>	Set a weight value from one node to the next.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.InputLayer <a href=' /NeuralNetwork/BackPropagation/Layer.py#L69'>__init__</a>(num_nodes,next_layer)</tt>	Initialize the input layer.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.InputLayer <a href=' /NeuralNetwork/BackPropagation/Layer.py#L106'>update</a>(inputs)</tt>	Update the values of the nodes using given inputs.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.InputLayer <a href=' /NeuralNetwork/BackPropagation/Layer.py#L124'>backpropagate</a>(outputs,learning_rate,momentum)</tt>	Recalculate all weights based on the last round of prediction.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.HiddenLayer <a href=' /NeuralNetwork/BackPropagation/Layer.py#L156'>__init__</a>(num_nodes,next_layer,activation)</tt>	Initialize a hidden layer.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.HiddenLayer <a href=' /NeuralNetwork/BackPropagation/Layer.py#L196'>update</a>(previous_layer)</tt>	Update the values of nodes from the previous layer info.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.HiddenLayer <a href=' /NeuralNetwork/BackPropagation/Layer.py#L216'>backpropagate</a>(outputs,learning_rate,momentum)</tt>	Recalculate all weights based on the last round of prediction.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.OutputLayer <a href=' /NeuralNetwork/BackPropagation/Layer.py#L268'>__init__</a>(num_nodes,activation)</tt>	Initialize the output layer.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.OutputLayer <a href=' /NeuralNetwork/BackPropagation/Layer.py#L287'>update</a>(previous_layer)</tt>	Update the value of output nodes from the previous layers.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.OutputLayer <a href=' /NeuralNetwork/BackPropagation/Layer.py#L304'>backpropagate</a>(outputs,learning_rate,momentum)</tt>	Calculate the backpropagation error at a given node.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.BackPropagation.OutputLayer <a href=' /NeuralNetwork/BackPropagation/Layer.py#L330'>get_error</a>(real_value,node_number)</tt>	Return the error value at a particular node.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.Schema <a href=' /NeuralNetwork/Gene/Schema.py#L51'>__init__</a>(ambiguity_info)</tt>	Initialize with ambiguity information.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.Schema <a href=' /NeuralNetwork/Gene/Schema.py#L67'>encode_motif</a>(motif)</tt>	Encode the passed motif as a regular expression pattern object.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.Schema <a href=' /NeuralNetwork/Gene/Schema.py#L100'>find_ambiguous</a>(motif)</tt>	Return the location of ambiguous items in the motif.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.Schema <a href=' /NeuralNetwork/Gene/Schema.py#L121'>num_ambiguous</a>(motif)</tt>	Return the number of ambiguous letters in a given motif.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.Schema <a href=' /NeuralNetwork/Gene/Schema.py#L127'>find_matches</a>(motif,query)</tt>	Return all non-overlapping motif matches in the query string.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.Schema <a href=' /NeuralNetwork/Gene/Schema.py#L142'>num_matches</a>(motif,query)</tt>	Find the number of non-overlapping times motif occurs in query.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.Schema <a href=' /NeuralNetwork/Gene/Schema.py#L148'>all_unambiguous</a>()</tt>	Return a listing of all unambiguous letters allowed in motifs.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.GeneticAlgorithmFinder <a href=' /NeuralNetwork/Gene/Schema.py#L198'>__init__</a>(alphabet)</tt>	Initialize a finder to get schemas using genetic algorithms.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.GeneticAlgorithmFinder <a href=' /NeuralNetwork/Gene/Schema.py#L216'>_set_up_genetic_algorithm</a>()</tt>	Overrideable function to set up the genetic algorithm parameters.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.GeneticAlgorithmFinder <a href=' /NeuralNetwork/Gene/Schema.py#L236'>find_schemas</a>(fitness,num_schemas)</tt>	Find the given number of unique schemas using a genetic algorithm arguments.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.DifferentialSchemaFitness <a href=' /NeuralNetwork/Gene/Schema.py#L273'>__init__</a>(positive_seqs,negative_seqs,schema_evaluator)</tt>	Initialize with different sequences to evaluate arguments.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.DifferentialSchemaFitness <a href=' /NeuralNetwork/Gene/Schema.py#L291'>calculate_fitness</a>(genome)</tt>	Calculate the fitness for a given schema.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.MostCountSchemaFitness <a href=' /NeuralNetwork/Gene/Schema.py#L343'>__init__</a>(seq_records,schema_evaluator)</tt>	Initialize with sequences to evaluate.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.MostCountSchemaFitness <a href=' /NeuralNetwork/Gene/Schema.py#L357'>calculate_fitness</a>(genome)</tt>	Calculate the fitness of a genome based on schema matches.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.RandomMotifGenerator <a href=' /NeuralNetwork/Gene/Schema.py#L382'>__init__</a>(alphabet,min_size,max_size)</tt>	Initialize with the motif parameters.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.RandomMotifGenerator <a href=' /NeuralNetwork/Gene/Schema.py#L396'>random_motif</a>()</tt>	Create a random motif within the given parameters.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SimpleFinisher <a href=' /NeuralNetwork/Gene/Schema.py#L420'>__init__</a>(num_schemas,min_generations)</tt>	Initialize the finisher with its parameters.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SimpleFinisher <a href=' /NeuralNetwork/Gene/Schema.py#L436'>is_finished</a>(organisms)</tt>	Determine when we can stop evolving the population.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SchemaFinder <a href=' /NeuralNetwork/Gene/Schema.py#L475'>find</a>(seq_records)</tt>	Find well-represented schemas in the given set of seqrecords.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SchemaFinder <a href=' /NeuralNetwork/Gene/Schema.py#L484'>find_differences</a>(first_records,second_records)</tt>	Find schemas which differentiate between the two sets of seqrecords.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SchemaCoder <a href=' /NeuralNetwork/Gene/Schema.py#L502'>__init__</a>(schemas,ambiguous_converter)</tt>	Initialize the coder to convert sequences arguments.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SchemaCoder <a href=' /NeuralNetwork/Gene/Schema.py#L516'>representation</a>(sequence)</tt>	Represent the given input sequence as a bunch of motif counts.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene. <a href=' /NeuralNetwork/Gene/Schema.py#L548'>matches_schema</a>(pattern,schema,ambiguity_character)</tt>	Determine whether or not the given pattern matches the schema.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SchemaFactory <a href=' /NeuralNetwork/Gene/Schema.py#L579'>__init__</a>(ambiguity_symbol)</tt>	Initialize the schemafactory arguments.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SchemaFactory <a href=' /NeuralNetwork/Gene/Schema.py#L589'>from_motifs</a>(motif_repository,motif_percent,num_ambiguous)</tt>	Generate schema from a list of motifs.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SchemaFactory <a href=' /NeuralNetwork/Gene/Schema.py#L640'>_get_num_motifs</a>(repository,motif_list)</tt>	Return the number of motif counts for the list of motifs.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SchemaFactory <a href=' /NeuralNetwork/Gene/Schema.py#L649'>_get_unique_schema</a>(cur_schemas,motif_list,num_ambiguous)</tt>	Retrieve a unique schema from a motif.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SchemaFactory <a href=' /NeuralNetwork/Gene/Schema.py#L690'>_schema_from_motif</a>(motif,motif_list,num_ambiguous)</tt>	Create a schema from a given starting motif.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.MotifFinder <a href=' /NeuralNetwork/Gene/Motif.py#L26'>__init__</a>(alphabet_strict)</tt>	Initialize a finder to get motifs.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.MotifFinder <a href=' /NeuralNetwork/Gene/Motif.py#L38'>find</a>(seq_records,motif_size)</tt>	Find all motifs of the given size in the passed seqrecords.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.MotifFinder <a href=' /NeuralNetwork/Gene/Motif.py#L57'>_get_motif_dict</a>(seq_records,motif_size)</tt>	Return a dictionary with information on motifs.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.MotifFinder <a href=' /NeuralNetwork/Gene/Motif.py#L96'>find_differences</a>(first_records,second_records,motif_size)</tt>	Find motifs in two sets of records and return the differences.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.MotifFinder <a href=' /NeuralNetwork/Gene/Motif.py#L142'>_add_motif</a>(motif_dict,motif_to_add)</tt>	Add a motif to the given dictionary.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.MotifCoder <a href=' /NeuralNetwork/Gene/Motif.py#L162'>__init__</a>(motifs)</tt>	Initialize an input producer with motifs to look for.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.MotifCoder <a href=' /NeuralNetwork/Gene/Motif.py#L179'>representation</a>(sequence)</tt>	Represent a sequence as a set of motifs.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.PatternIO <a href=' /NeuralNetwork/Gene/Pattern.py#L27'>__init__</a>(alphabet)</tt>	Intialize the reader and writer class.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.PatternIO <a href=' /NeuralNetwork/Gene/Pattern.py#L47'>write</a>(pattern_list,output_handle)</tt>	Write a list of patterns to the given handle.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.PatternIO <a href=' /NeuralNetwork/Gene/Pattern.py#L60'>write_seq</a>(seq_pattern_list,output_handle)</tt>	Convenience function to write seq objects to a file.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.PatternIO <a href=' /NeuralNetwork/Gene/Pattern.py#L80'>read</a>(input_handle)</tt>	Read patterns from the specified handle.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.PatternRepository <a href=' /NeuralNetwork/Gene/Pattern.py#L121'>__init__</a>(pattern_info)</tt>	Initialize a repository with patterns arguments.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.PatternRepository <a href=' /NeuralNetwork/Gene/Pattern.py#L147'>get_all</a>()</tt>	Retrieve all of the patterns in the repository.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.PatternRepository <a href=' /NeuralNetwork/Gene/Pattern.py#L156'>get_random</a>(num_patterns)</tt>	Retrieve the specified number of patterns randomly.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.PatternRepository <a href=' /NeuralNetwork/Gene/Pattern.py#L176'>get_top_percentage</a>(percent)</tt>	Return a percentage of the patterns.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.PatternRepository <a href=' /NeuralNetwork/Gene/Pattern.py#L188'>get_top</a>(num_patterns)</tt>	Return the specified number of most frequently occurring patterns arguments.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.PatternRepository <a href=' /NeuralNetwork/Gene/Pattern.py#L201'>get_differing</a>(top_num,bottom_num)</tt>	Retrieve patterns that are at the extreme ranges.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.PatternRepository <a href=' /NeuralNetwork/Gene/Pattern.py#L227'>remove_polyA</a>(at_percentage)</tt>	Remove patterns which are likely due to polya tails from the lists.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.PatternRepository <a href=' /NeuralNetwork/Gene/Pattern.py#L254'>count</a>(pattern)</tt>	Return the number of times the specified pattern is found.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SignatureFinder <a href=' /NeuralNetwork/Gene/Signature.py#L29'>__init__</a>(alphabet_strict)</tt>	Initialize a finder to get signatures.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SignatureFinder <a href=' /NeuralNetwork/Gene/Signature.py#L42'>find</a>(seq_records,signature_size,max_gap)</tt>	Find all signatures in a group of sequences.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SignatureFinder <a href=' /NeuralNetwork/Gene/Signature.py#L60'>_get_signature_dict</a>(seq_records,sig_size,max_gap)</tt>	Return a dictionary with all signatures and their counts.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SignatureFinder <a href=' /NeuralNetwork/Gene/Signature.py#L107'>_add_sig</a>(sig_dict,sig_to_add)</tt>	Add a signature to the given dictionary.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SignatureCoder <a href=' /NeuralNetwork/Gene/Signature.py#L128'>__init__</a>(signatures,max_gap)</tt>	Initialize with the signatures to look for.
<tt style='background-color:#E8E8E8;'> NeuralNetwork.Gene.SignatureCoder <a href=' /NeuralNetwork/Gene/Signature.py#L162'>representation</a>(sequence)</tt>	Convert a sequence into a representation of its signatures.
<tt style='background-color:#E8E8E8;'> Align.SummaryInfo <a href=' /Align/AlignInfo.py#L38'>__init__</a>(alignment)</tt>	Initialize with the alignment to calculate information on.
<tt style='background-color:#E8E8E8;'> Align.SummaryInfo <a href=' /Align/AlignInfo.py#L46'>dumb_consensus</a>(threshold,ambiguous,consensus_alpha,require_multiple)</tt>	Output a fast consensus sequence of the alignment.
<tt style='background-color:#E8E8E8;'> Align.SummaryInfo <a href=' /Align/AlignInfo.py#L119'>gap_consensus</a>(threshold,ambiguous,consensus_alpha,require_multiple)</tt>	Same as dumb_consensus(), but allows gap on the output.
<tt style='background-color:#E8E8E8;'> Align.SummaryInfo <a href=' /Align/AlignInfo.py#L177'>_guess_consensus_alphabet</a>(ambiguous)</tt>	Pick an ungapped alphabet for an alignment consesus sequence.
<tt style='background-color:#E8E8E8;'> Align.SummaryInfo <a href=' /Align/AlignInfo.py#L219'>replacement_dictionary</a>(skip_chars)</tt>	Generate a replacement dictionary to plug into a substitution matrix this should look at an alignment and be able to generate the number.
<tt style='background-color:#E8E8E8;'> Align.SummaryInfo <a href=' /Align/AlignInfo.py#L274'>_pair_replacement</a>(seq1,seq2,weight1,weight2)</tt>	Compare two sequences and generate info on the replacements seen.
<tt style='background-color:#E8E8E8;'> Align.SummaryInfo <a href=' /Align/AlignInfo.py#L317'>_get_all_letters</a>()</tt>	Returns a string containing the expected letters in the alignment.
<tt style='background-color:#E8E8E8;'> Align.SummaryInfo <a href=' /Align/AlignInfo.py#L335'>_get_base_replacements</a>(skip_items)</tt>	Get a zeroed dictionary of all possible letter combinations.
<tt style='background-color:#E8E8E8;'> Align.SummaryInfo <a href=' /Align/AlignInfo.py#L372'>pos_specific_score_matrix</a>(axis_seq,chars_to_ignore)</tt>	Create a position specific score matrix object for the alignment.
<tt style='background-color:#E8E8E8;'> Align.SummaryInfo <a href=' /Align/AlignInfo.py#L441'>_get_base_letters</a>(letters)</tt>	Create a zeroed dictionary with all of the specified letters private.
<tt style='background-color:#E8E8E8;'> Align.SummaryInfo <a href=' /Align/AlignInfo.py#L449'>_get_gap_char</a>()</tt>	Return the gap character used in the alignment private.
<tt style='background-color:#E8E8E8;'> Align.SummaryInfo <a href=' /Align/AlignInfo.py#L460'>information_content</a>(start,end,e_freq_table,log_base)</tt>	Calculate the information content for each residue along an alignment.
<tt style='background-color:#E8E8E8;'> Align.SummaryInfo <a href=' /Align/AlignInfo.py#L545'>_get_letter_freqs</a>(residue_num,all_records,letters,to_ignore)</tt>	Determine the frequency of specific letters in the alignment.
<tt style='background-color:#E8E8E8;'> Align.SummaryInfo <a href=' /Align/AlignInfo.py#L628'>_get_column_info_content</a>(obs_freq,e_freq_table,log_base,random_expected)</tt>	Calculate the information content for a column.
<tt style='background-color:#E8E8E8;'> Align.PSSM <a href=' /Align/AlignInfo.py#L708'>__init__</a>(pssm)</tt>	Initialize with pssm data to represent.
<tt style='background-color:#E8E8E8;'> Align.PSSM <a href=' /Align/AlignInfo.py#L740'>get_residue</a>(pos)</tt>	Return the residue letter at the specified position.
<tt style='background-color:#E8E8E8;'> Align. <a href=' /Align/AlignInfo.py#L745'>print_info_content</a>(summary_info,fout,rep_record)</tt>	3 column output position aa in representative sequence ic_vector value.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L105'>__init__</a>(records,alphabet,annotations)</tt>	Initialize a new multipleseqalignment object.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L183'>_str_line</a>(record,length)</tt>	Returns a truncated string representation of a seqrecord private.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L201'>__str__</a>()</tt>	Returns a multi-line string summary of the alignment.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L234'>__repr__</a>()</tt>	Returns a representation of the object for debugging.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L257'>format</a>(format)</tt>	Returns the alignment as a string in the specified file format.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L294'>__format__</a>(format_spec)</tt>	Returns the alignment as a string in the specified file format.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L312'>__iter__</a>()</tt>	Iterate over alignment rows as seqrecord objects.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L335'>__len__</a>()</tt>	Returns the number of sequences in the alignment.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L347'>get_alignment_length</a>()</tt>	Return the maximum length of the alignment.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L378'>add_sequence</a>(descriptor,sequence,start,end)</tt>	Add a sequence to the alignment.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L431'>extend</a>(records)</tt>	Add more seqrecord objects to the alignment as rows.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L489'>append</a>(record)</tt>	Add one more seqrecord object to the alignment as a new row.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L538'>_append</a>(record,expected_length)</tt>	Helper function private.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L558'>__add__</a>(other)</tt>	Combines two alignments with the same number of rows by adding them.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L639'>__getitem__</a>(index)</tt>	Access part of the alignment.
<tt style='background-color:#E8E8E8;'> Align.MultipleSeqAlignment <a href=' /Align/__init__.py#L774'>sort</a>(key,reverse)</tt>	Sort the rows seqrecord objects of the alignment in place.
<tt style='background-color:#E8E8E8;'> Emboss.InputRecord <a href=' /Emboss/PrimerSearch.py#L24'>add_primer_set</a>(primer_name,first_primer_seq,second_primer_seq)</tt>	Add primer information to the record.
<tt style='background-color:#E8E8E8;'> Emboss. <a href=' /Emboss/Primer3.py#L158'>read</a>(handle)</tt>	Parse primer3 output into a bio emboss primer3 record object.
<tt style='background-color:#E8E8E8;'> Emboss.Primers <a href=' /Emboss/Primer3.py#L84'>__len__</a>()</tt>	Length of the primer product i e product size.
<tt style='background-color:#E8E8E8;'> Emboss. <a href=' /Emboss/Primer3.py#L89'>parse</a>(handle)</tt>	Iterate over primer3 output as bio emboss primer3 record objects.
<tt style='background-color:#E8E8E8;'> KEGG. <a href=' /KEGG/__init__.py#L25'>_wrap_kegg</a>(line,max_width,wrap_rule)</tt>	Wraps the input line for kegg output.
<tt style='background-color:#E8E8E8;'> KEGG. <a href=' /KEGG/__init__.py#L68'>_write_kegg</a>(item,info,indent)</tt>	Write a indented kegg record item.
<tt style='background-color:#E8E8E8;'> KEGG. <a href=' /KEGG/REST.py#L51'>kegg_info</a>(database)</tt>	Kegg info - displays the current statistics of a given database.
<tt style='background-color:#E8E8E8;'> KEGG. <a href=' /KEGG/REST.py#L77'>kegg_list</a>(database,org)</tt>	Kegg list - entry list for database or specified database entries.
<tt style='background-color:#E8E8E8;'> KEGG. <a href=' /KEGG/REST.py#L123'>kegg_find</a>(database,query,option)</tt>	Kegg find - data search.
<tt style='background-color:#E8E8E8;'> KEGG. <a href=' /KEGG/REST.py#L167'>kegg_get</a>(dbentries,option)</tt>	Kegg get - data retrieval.
<tt style='background-color:#E8E8E8;'> KEGG. <a href=' /KEGG/REST.py#L203'>kegg_conv</a>(target_db,source_db,option)</tt>	Kegg conv - convert kegg identifiers to/from outside identifiers target_db - target database.
<tt style='background-color:#E8E8E8;'> KEGG. <a href=' /KEGG/REST.py#L261'>kegg_link</a>(target_db,source_db,option)</tt>	Kegg link - find related entries by using database cross-references.
<tt style='background-color:#E8E8E8;'> KEGG.Enzyme.Record <a href=' /KEGG/Enzyme/__init__.py#L56'>__init__</a>()</tt>	__init___ self create a new record.
<tt style='background-color:#E8E8E8;'> KEGG.Enzyme.Record <a href=' /KEGG/Enzyme/__init__.py#L78'>__str__</a>()</tt>	__str__ self returns a string representation of this record.
<tt style='background-color:#E8E8E8;'> KEGG.Enzyme. <a href=' /KEGG/Enzyme/__init__.py#L197'>parse</a>(handle)</tt>	Parse a kegg enzyme file returning record objects.
<tt style='background-color:#E8E8E8;'> KEGG.Enzyme. <a href=' /KEGG/Enzyme/__init__.py#L311'>read</a>(handle)</tt>	Parse a kegg enzyme file with exactly one entry.
<tt style='background-color:#E8E8E8;'> KEGG.Compound.Record <a href=' /KEGG/Compound/__init__.py#L45'>__init__</a>()</tt>	__init___ self create a new record.
<tt style='background-color:#E8E8E8;'> KEGG.Compound.Record <a href=' /KEGG/Compound/__init__.py#L59'>__str__</a>()</tt>	__str__ self returns a string representation of this record.
<tt style='background-color:#E8E8E8;'> KEGG.Compound. <a href=' /KEGG/Compound/__init__.py#L127'>parse</a>(handle)</tt>	Parse a kegg ligan/compound file returning record objects.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L76'>get_KGML</a>()</tt>	Return the pathway as a string in prettified kgml format.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L88'>add_entry</a>(entry)</tt>	Add an entry element to the pathway.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L97'>remove_entry</a>(entry)</tt>	Remove an entry element from the pathway.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L107'>add_reaction</a>(reaction)</tt>	Add a reaction element to the pathway.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L118'>remove_reaction</a>(reaction)</tt>	Remove a reaction element from the pathway.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L128'>add_relation</a>(relation)</tt>	Add a relation element to the pathway.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L133'>remove_relation</a>(relation)</tt>	Remove a relation element from the pathway.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L137'>__str__</a>()</tt>	Returns a readable summary description string.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L177'>compounds</a>()</tt>	Get a list of entries of type compound.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L182'>maps</a>()</tt>	Get a list of entries of type map.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L187'>orthologs</a>()</tt>	Get a list of entries of type ortholog.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L192'>genes</a>()</tt>	Get a list of entries of type gene.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L197'>reactions</a>()</tt>	Get a list of reactions in the pathway.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L202'>reaction_entries</a>()</tt>	Get a list of entries corresponding to each reaction in the pathway.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L209'>relations</a>()</tt>	Get a list of relations in the pathway.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L214'>element</a>()</tt>	Return the pathway as a valid kgml element.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Pathway <a href=' /KEGG/KGML/KGML_pathway.py#L236'>bounds</a>()</tt>	Coordinate bounds for all graphics elements in the pathway.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Entry <a href=' /KEGG/KGML/KGML_pathway.py#L286'>__str__</a>()</tt>	Return readable descriptive string.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Entry <a href=' /KEGG/KGML/KGML_pathway.py#L297'>add_component</a>(element)</tt>	Add an element to the entry.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Entry <a href=' /KEGG/KGML/KGML_pathway.py#L308'>remove_component</a>(value)</tt>	Remove the entry with the passed id from the group.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Entry <a href=' /KEGG/KGML/KGML_pathway.py#L312'>add_graphics</a>(entry)</tt>	Add the graphics entry.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Entry <a href=' /KEGG/KGML/KGML_pathway.py#L316'>remove_graphics</a>(entry)</tt>	Remove the graphics entry with the passed id from the group.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Entry <a href=' /KEGG/KGML/KGML_pathway.py#L356'>element</a>()</tt>	Return the entry as a valid kgml element.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Entry <a href=' /KEGG/KGML/KGML_pathway.py#L376'>bounds</a>()</tt>	Coordinate bounds for all graphics elements in the entry.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Entry <a href=' /KEGG/KGML/KGML_pathway.py#L390'>is_reactant</a>()</tt>	Does this entry participate in any reaction in parent pathway?.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Component <a href=' /KEGG/KGML/KGML_pathway.py#L431'>element</a>()</tt>	Return the component as a valid kgml element.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Graphics <a href=' /KEGG/KGML/KGML_pathway.py#L564'>element</a>()</tt>	Return the graphics as a valid kgml element.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Graphics <a href=' /KEGG/KGML/KGML_pathway.py#L590'>bounds</a>()</tt>	Coordinate bounds for the graphics element.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Graphics <a href=' /KEGG/KGML/KGML_pathway.py#L608'>centre</a>()</tt>	Return the centre of the graphics object as an x y tuple.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Reaction <a href=' /KEGG/KGML/KGML_pathway.py#L638'>__str__</a>()</tt>	Return an informative human-readable string.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Reaction <a href=' /KEGG/KGML/KGML_pathway.py#L650'>add_substrate</a>(substrate_id)</tt>	Add a substrate identified by its node id to the reaction.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Reaction <a href=' /KEGG/KGML/KGML_pathway.py#L658'>add_product</a>(product_id)</tt>	Add a product identified by its node id to the reaction.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Reaction <a href=' /KEGG/KGML/KGML_pathway.py#L693'>substrates</a>()</tt>	Return list of substrate entry elements.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Reaction <a href=' /KEGG/KGML/KGML_pathway.py#L698'>products</a>()</tt>	Return list of product entry elements.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Reaction <a href=' /KEGG/KGML/KGML_pathway.py#L703'>entry</a>()</tt>	Return the entry corresponding to this reaction.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Reaction <a href=' /KEGG/KGML/KGML_pathway.py#L708'>reactant_ids</a>()</tt>	Return a list of substrate and product reactant ids.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Reaction <a href=' /KEGG/KGML/KGML_pathway.py#L713'>element</a>()</tt>	Return kgml element describing the reaction.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Relation <a href=' /KEGG/KGML/KGML_pathway.py#L759'>__str__</a>()</tt>	A useful human-readable string.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.Relation <a href=' /KEGG/KGML/KGML_pathway.py#L795'>element</a>()</tt>	Return kgml element describing the relation.
<tt style='background-color:#E8E8E8;'> KEGG.KGML. <a href=' /KEGG/KGML/KGML_parser.py#L34'>read</a>(handle,debug)</tt>	Parses a single kegg pathway from given file handle.
<tt style='background-color:#E8E8E8;'> KEGG.KGML. <a href=' /KEGG/KGML/KGML_parser.py#L57'>parse</a>(handle,debug)</tt>	Returns an iterator over pathway elements.
<tt style='background-color:#E8E8E8;'> KEGG.KGML.KGMLParser <a href=' /KEGG/KGML/KGML_parser.py#L113'>parse</a>()</tt>	Parse the input elements.
<tt style='background-color:#E8E8E8;'> SCOP.Record <a href=' /SCOP/Dom.py#L37'>_process</a>(line)</tt>	Parses dom records.
<tt style='background-color:#E8E8E8;'> SCOP. <a href=' /SCOP/Raf.py#L307'>parse</a>(handle)</tt>	Iterates over a raf file returning a seqmap object for each line in the file.
<tt style='background-color:#E8E8E8;'> SCOP.Index <a href=' /SCOP/Cla.py#L90'>__init__</a>(filename)</tt>	Create cla index.
<tt style='background-color:#E8E8E8;'> SCOP.Index <a href=' /SCOP/Cla.py#L113'>__getitem__</a>(key)</tt>	Return an item from the indexed file.
<tt style='background-color:#E8E8E8;'> SCOP. <a href=' /SCOP/__init__.py#L102'>cmp_sccs</a>(sccs1,sccs2)</tt>	Order scop concise classification strings sccs.
<tt style='background-color:#E8E8E8;'> SCOP. <a href=' /SCOP/__init__.py#L126'>parse_domain</a>(str)</tt>	Convert an astral header string into a scop domain.
<tt style='background-color:#E8E8E8;'> SCOP.Scop <a href=' /SCOP/__init__.py#L165'>__init__</a>(cla_handle,des_handle,hie_handle,dir_path)</tt>	Build the scop hierarchy from the scop parsable files or a sql backend.
<tt style='background-color:#E8E8E8;'> SCOP.Scop <a href=' /SCOP/__init__.py#L281'>getDomainBySid</a>(sid)</tt>	Return a domain from its sid.
<tt style='background-color:#E8E8E8;'> SCOP.Scop <a href=' /SCOP/__init__.py#L292'>getNodeBySunid</a>(sunid)</tt>	Return a node from its sunid.
<tt style='background-color:#E8E8E8;'> SCOP.Scop <a href=' /SCOP/__init__.py#L303'>getDomains</a>()</tt>	Returns an ordered tuple of all scop domains.
<tt style='background-color:#E8E8E8;'> SCOP.Scop <a href=' /SCOP/__init__.py#L310'>write_hie</a>(handle)</tt>	Build an hie scop parsable file from this object.
<tt style='background-color:#E8E8E8;'> SCOP.Scop <a href=' /SCOP/__init__.py#L316'>write_des</a>(handle)</tt>	Build a des scop parsable file from this object.
<tt style='background-color:#E8E8E8;'> SCOP.Scop <a href=' /SCOP/__init__.py#L323'>write_cla</a>(handle)</tt>	Build a cla scop parsable file from this object.
<tt style='background-color:#E8E8E8;'> SCOP.Scop <a href=' /SCOP/__init__.py#L329'>getDomainFromSQL</a>(sunid,sid)</tt>	Load a node from the sql backend using sunid or sid.
<tt style='background-color:#E8E8E8;'> SCOP.Scop <a href=' /SCOP/__init__.py#L378'>getAscendentFromSQL</a>(node,type)</tt>	Get ascendents using sql backend.
<tt style='background-color:#E8E8E8;'> SCOP.Scop <a href=' /SCOP/__init__.py#L391'>getDescendentsFromSQL</a>(node,type)</tt>	Get descendents of a node using the database backend this avoids.
<tt style='background-color:#E8E8E8;'> SCOP.Scop <a href=' /SCOP/__init__.py#L455'>write_hie_sql</a>(handle)</tt>	Write hie data to sql database.
<tt style='background-color:#E8E8E8;'> SCOP.Scop <a href=' /SCOP/__init__.py#L467'>write_cla_sql</a>(handle)</tt>	Write cla data to sql database.
<tt style='background-color:#E8E8E8;'> SCOP.Scop <a href=' /SCOP/__init__.py#L485'>write_des_sql</a>(handle)</tt>	Write des data to sql database.
<tt style='background-color:#E8E8E8;'> SCOP.Node <a href=' /SCOP/__init__.py#L515'>__init__</a>(scop)</tt>	Create a node in the scop hierarchy if a scop instance is provided to the.
<tt style='background-color:#E8E8E8;'> SCOP.Node <a href=' /SCOP/__init__.py#L538'>toHieRecord</a>()</tt>	Return an hie record.
<tt style='background-color:#E8E8E8;'> SCOP.Node <a href=' /SCOP/__init__.py#L550'>toDesRecord</a>()</tt>	Return a des record.
<tt style='background-color:#E8E8E8;'> SCOP.Node <a href=' /SCOP/__init__.py#L559'>getChildren</a>()</tt>	Return a list of children of this node.
<tt style='background-color:#E8E8E8;'> SCOP.Node <a href=' /SCOP/__init__.py#L566'>getParent</a>()</tt>	Return the parent of this node.
<tt style='background-color:#E8E8E8;'> SCOP.Node <a href=' /SCOP/__init__.py#L573'>getDescendents</a>(node_type)</tt>	Return a list of all descendant nodes of the given type node type can a.
<tt style='background-color:#E8E8E8;'> SCOP.Node <a href=' /SCOP/__init__.py#L594'>getAscendent</a>(node_type)</tt>	Return the ancenstor node of the given type or none node type can a.
<tt style='background-color:#E8E8E8;'> SCOP.Domain <a href=' /SCOP/__init__.py#L645'>toDesRecord</a>()</tt>	Return a des record.
<tt style='background-color:#E8E8E8;'> SCOP.Domain <a href=' /SCOP/__init__.py#L651'>toClaRecord</a>()</tt>	Return a cla record.
<tt style='background-color:#E8E8E8;'> SCOP.Astral <a href=' /SCOP/__init__.py#L676'>__init__</a>(dir_path,version,scop,astral_file)</tt>	Initialise the astral database.
<tt style='background-color:#E8E8E8;'> SCOP.Astral <a href=' /SCOP/__init__.py#L724'>domainsClusteredByEv</a>(id)</tt>	Get domains clustered by evalue.
<tt style='background-color:#E8E8E8;'> SCOP.Astral <a href=' /SCOP/__init__.py#L741'>domainsClusteredById</a>(id)</tt>	Get domains clustered by percent id.
<tt style='background-color:#E8E8E8;'> SCOP.Astral <a href=' /SCOP/__init__.py#L756'>getAstralDomainsFromFile</a>(filename,file_handle)</tt>	Get the scop domains from a file containing a list of sids.
<tt style='background-color:#E8E8E8;'> SCOP.Astral <a href=' /SCOP/__init__.py#L776'>getAstralDomainsFromSQL</a>(column)</tt>	Load a set of astral domains from a column in the astral table of a mysql database (which can be created with writetosql(.
<tt style='background-color:#E8E8E8;'> SCOP.Astral <a href=' /SCOP/__init__.py#L787'>getSeqBySid</a>(domain)</tt>	Get the seq record of a given domain from its sid.
<tt style='background-color:#E8E8E8;'> SCOP.Astral <a href=' /SCOP/__init__.py#L796'>getSeq</a>(domain)</tt>	Return seq associated with domain.
<tt style='background-color:#E8E8E8;'> SCOP.Astral <a href=' /SCOP/__init__.py#L800'>hashedDomainsById</a>(id)</tt>	Get domains clustered by sequence identity in a dict.
<tt style='background-color:#E8E8E8;'> SCOP.Astral <a href=' /SCOP/__init__.py#L808'>hashedDomainsByEv</a>(id)</tt>	Get domains clustered by evalue in a dict.
<tt style='background-color:#E8E8E8;'> SCOP.Astral <a href=' /SCOP/__init__.py#L816'>isDomainInId</a>(dom,id)</tt>	Returns true if the domain is in the astral clusters for percent id.
<tt style='background-color:#E8E8E8;'> SCOP.Astral <a href=' /SCOP/__init__.py#L820'>isDomainInEv</a>(dom,id)</tt>	Returns true if the domain is in the astral clusters for evalues.
<tt style='background-color:#E8E8E8;'> SCOP.Astral <a href=' /SCOP/__init__.py#L824'>writeToSQL</a>(db_handle)</tt>	Write the astral database to a mysql database.
<tt style='background-color:#E8E8E8;'> SCOP. <a href=' /SCOP/__init__.py#L850'>search</a>(pdb,key,sid,disp)</tt>	Search(pdb=none key=none sid=none disp=none dir=none loc=none cgi='http //scop.
<tt style='background-color:#E8E8E8;'> SCOP. <a href=' /SCOP/__init__.py#L872'>_open</a>(cgi,params,get)</tt>	Open a hnadle to scop returns an undohandle open a handle to scop.
<tt style='background-color:#E8E8E8;'> SCOP. <a href=' /SCOP/Raf.py#L40'>normalize_letters</a>(one_letter_code)</tt>	Convert raf one-letter amino acid codes into iupac standard codes.
<tt style='background-color:#E8E8E8;'> SCOP.SeqMapIndex <a href=' /SCOP/Raf.py#L81'>__getitem__</a>(key)</tt>	Return an item from the indexed file.
<tt style='background-color:#E8E8E8;'> SCOP.SeqMapIndex <a href=' /SCOP/Raf.py#L91'>getSeqMap</a>(residues)</tt>	Get the sequence map for a collection of residues.
<tt style='background-color:#E8E8E8;'> SCOP.SeqMap <a href=' /SCOP/Raf.py#L159'>_process</a>(line)</tt>	Parses a raf record into a seqmap object.
<tt style='background-color:#E8E8E8;'> SCOP.SeqMap <a href=' /SCOP/Raf.py#L205'>append</a>(res)</tt>	Append another res object onto the list of residue mappings.
<tt style='background-color:#E8E8E8;'> SCOP.SeqMap <a href=' /SCOP/Raf.py#L209'>extend</a>(other)</tt>	Append another seqmap onto the end of self.
<tt style='background-color:#E8E8E8;'> SCOP.SeqMap <a href=' /SCOP/Raf.py#L237'>getAtoms</a>(pdb_handle,out_handle)</tt>	Extract all relevant atom and hetatom records from a pdb file.
<tt style='background-color:#E8E8E8;'> ExPASy. <a href=' /ExPASy/Enzyme.py#L23'>parse</a>(handle)</tt>	Parse enzyme records.
<tt style='background-color:#E8E8E8;'> ExPASy. <a href=' /ExPASy/Enzyme.py#L38'>read</a>(handle)</tt>	Read one enzyme record.
<tt style='background-color:#E8E8E8;'> ExPASy. <a href=' /ExPASy/ScanProsite.py#L29'>scan</a>(seq,mirror,output)</tt>	Execute a scanprosite search.
<tt style='background-color:#E8E8E8;'> ExPASy. <a href=' /ExPASy/__init__.py#L25'>get_prodoc_entry</a>(id,cgi)</tt>	Get_prodoc_entry(id cgi='http //www.
<tt style='background-color:#E8E8E8;'> ExPASy. <a href=' /ExPASy/__init__.py#L39'>get_prosite_entry</a>(id,cgi)</tt>	Get_prosite_entry(id cgi='http //www.
<tt style='background-color:#E8E8E8;'> ExPASy. <a href=' /ExPASy/__init__.py#L53'>get_prosite_raw</a>(id,cgi)</tt>	Get_prosite_raw(id cgi='http //www.
<tt style='background-color:#E8E8E8;'> ExPASy. <a href=' /ExPASy/__init__.py#L65'>get_sprot_raw</a>(id)</tt>	Get a handle to a raw swissprot entry at expasy.
<tt style='background-color:#E8E8E8;'> ExPASy. <a href=' /ExPASy/__init__.py#L74'>sprot_search_ful</a>(text,make_wild,swissprot,trembl)</tt>	Sprot_search_ful(text make_wild=none swissprot=1 trembl=none cgi='http //www.
<tt style='background-color:#E8E8E8;'> ExPASy. <a href=' /ExPASy/__init__.py#L95'>sprot_search_de</a>(text,swissprot,trembl,cgi)</tt>	Sprot_search_de(text swissprot=1 trembl=none cgi='http //www.
