<tt style='background-color:#E8E8E8;'> core. <a href=' /util.py#L22'>_exception_message</a>(excp)</tt>	Return the message from an exception as either a str or unicode object supports both.
<tt style='background-color:#E8E8E8;'> core. <a href=' /traceback_utils.py#L26'>first_spark_call</a>()</tt>	Return a callsite representing the first spark call in the current call stack.
<tt style='background-color:#E8E8E8;'> core. <a href=' /shuffle.py#L69'>_get_local_dirs</a>(sub)</tt>	Get all the directories.
<tt style='background-color:#E8E8E8;'> core.Merger <a href=' /shuffle.py#L121'>mergeValues</a>(iterator)</tt>	Combine the items by creator and combiner.
<tt style='background-color:#E8E8E8;'> core.Merger <a href=' /shuffle.py#L125'>mergeCombiners</a>(iterator)</tt>	Merge the combined items by mergecombiner.
<tt style='background-color:#E8E8E8;'> core.Merger <a href=' /shuffle.py#L129'>items</a>()</tt>	Return the merged items ad iterator.
<tt style='background-color:#E8E8E8;'> core.ExternalMerger <a href=' /shuffle.py#L217'>_get_spill_dir</a>(n)</tt>	Choose one directory for spill by number n.
<tt style='background-color:#E8E8E8;'> core.ExternalMerger <a href=' /shuffle.py#L221'>_next_limit</a>()</tt>	Return the next memory limit if the memory is not released.
<tt style='background-color:#E8E8E8;'> core.ExternalMerger <a href=' /shuffle.py#L229'>mergeValues</a>(iterator)</tt>	Combine the items by creator and combiner.
<tt style='background-color:#E8E8E8;'> core.ExternalMerger <a href=' /shuffle.py#L253'>_partition</a>(key)</tt>	Return the partition for key.
<tt style='background-color:#E8E8E8;'> core.ExternalMerger <a href=' /shuffle.py#L257'>_object_size</a>(obj)</tt>	How much of memory for this obj assume that all the objects.
<tt style='background-color:#E8E8E8;'> core.ExternalMerger <a href=' /shuffle.py#L263'>mergeCombiners</a>(iterator,limit)</tt>	Merge k v pair by mergecombiner.
<tt style='background-color:#E8E8E8;'> core.ExternalMerger <a href=' /shuffle.py#L289'>_spill</a>()</tt>	Dump already partitioned data into disks.
<tt style='background-color:#E8E8E8;'> core.ExternalMerger <a href=' /shuffle.py#L337'>items</a>()</tt>	Return all merged items as iterator.
<tt style='background-color:#E8E8E8;'> core.ExternalMerger <a href=' /shuffle.py#L343'>_external_items</a>()</tt>	Return all partitioned items as iterator.
<tt style='background-color:#E8E8E8;'> core.ExternalMerger <a href=' /shuffle.py#L384'>_recursive_merged_items</a>(index)</tt>	Merge the partitioned items and return the as iterator if one partition can not be fit in memory then them will be.
<tt style='background-color:#E8E8E8;'> core.ExternalMerger <a href=' /shuffle.py#L409'>_cleanup</a>()</tt>	Clean up all the files in disks.
<tt style='background-color:#E8E8E8;'> core.ExternalSorter <a href=' /shuffle.py#L438'>_get_path</a>(n)</tt>	Choose one directory for spill by number n.
<tt style='background-color:#E8E8E8;'> core.ExternalSorter <a href=' /shuffle.py#L445'>_next_limit</a>()</tt>	Return the next memory limit if the memory is not released.
<tt style='background-color:#E8E8E8;'> core.ExternalSorter <a href=' /shuffle.py#L453'>sorted</a>(iterator,key,reverse)</tt>	Sort the elements in iterator do external sort when the memory goes above the limit.
<tt style='background-color:#E8E8E8;'> core.ExternalList <a href=' /shuffle.py#L588'>_spill</a>()</tt>	Dump the values into disk.
<tt style='background-color:#E8E8E8;'> core.ExternalGroupBy <a href=' /shuffle.py#L707'>_spill</a>()</tt>	Dump already partitioned data into disks.
<tt style='background-color:#E8E8E8;'> core.ExternalGroupBy <a href=' /shuffle.py#L784'>_merge_sorted_items</a>(index)</tt>	Load a partition from disk then sort and group by key.
<tt style='background-color:#E8E8E8;'> core.StatusTracker <a href=' /status.py#L54'>getJobIdsForGroup</a>(jobGroup)</tt>	Return a list of all known jobs in a particular job group if.
<tt style='background-color:#E8E8E8;'> core.StatusTracker <a href=' /status.py#L66'>getActiveStageIds</a>()</tt>	Returns an array containing the ids of all active stages.
<tt style='background-color:#E8E8E8;'> core.StatusTracker <a href=' /status.py#L72'>getActiveJobsIds</a>()</tt>	Returns an array containing the ids of all active jobs.
<tt style='background-color:#E8E8E8;'> core.StatusTracker <a href=' /status.py#L78'>getJobInfo</a>(jobId)</tt>	Returns a :class sparkjobinfo object or none if the job info could not be found or was garbage collected.
<tt style='background-color:#E8E8E8;'> core.StatusTracker <a href=' /status.py#L87'>getStageInfo</a>(stageId)</tt>	Returns a :class sparkstageinfo object or none if the stage info could not be found or was garbage collected.
<tt style='background-color:#E8E8E8;'> core.SparkFiles <a href=' /files.py#L41'>get</a>(cls,filename)</tt>	Get the absolute path of a file added through c{sparkcontext addfile()}.
<tt style='background-color:#E8E8E8;'> core.SparkFiles <a href=' /files.py#L49'>getRootDirectory</a>(cls)</tt>	Get the root directory that contains files added through c{sparkcontext.
<tt style='background-color:#E8E8E8;'> core.TaskContext <a href=' /taskcontext.py#L38'>__new__</a>(cls)</tt>	Even if users construct taskcontext instead of using get give them the singleton.
<tt style='background-color:#E8E8E8;'> core.TaskContext <a href=' /taskcontext.py#L46'>__init__</a>()</tt>	Construct a taskcontext use get instead.
<tt style='background-color:#E8E8E8;'> core.TaskContext <a href=' /taskcontext.py#L50'>_getOrCreate</a>(cls)</tt>	Internal function to get or create global taskcontext.
<tt style='background-color:#E8E8E8;'> core.TaskContext <a href=' /taskcontext.py#L57'>get</a>(cls)</tt>	Return the currently active taskcontext this can be called inside of.
<tt style='background-color:#E8E8E8;'> core.TaskContext <a href=' /taskcontext.py#L67'>stageId</a>()</tt>	The id of the stage that this task belong to.
<tt style='background-color:#E8E8E8;'> core.TaskContext <a href=' /taskcontext.py#L71'>partitionId</a>()</tt>	The id of the rdd partition that is computed by this task.
<tt style='background-color:#E8E8E8;'> core.TaskContext <a href=' /taskcontext.py#L77'>attemptNumber</a>()</tt>	" how many times this task has been attempted.
<tt style='background-color:#E8E8E8;'> core.TaskContext <a href=' /taskcontext.py#L84'>taskAttemptId</a>()</tt>	An id that is unique to this task attempt within the same sparkcontext no two task attempts will share the same attempt id.
<tt style='background-color:#E8E8E8;'> core. <a href=' /find_spark_home.py#L28'>_find_spark_home</a>()</tt>	Find the spark_home.
<tt style='background-color:#E8E8E8;'> core.Serializer <a href=' /serializers.py#L86'>dump_stream</a>(iterator,stream)</tt>	Serialize an iterator of objects to the output stream.
<tt style='background-color:#E8E8E8;'> core.Serializer <a href=' /serializers.py#L92'>load_stream</a>(stream)</tt>	Return an iterator of deserialized objects from the input stream.
<tt style='background-color:#E8E8E8;'> core.Serializer <a href=' /serializers.py#L98'>_load_stream_without_unbatching</a>(stream)</tt>	Return an iterator of deserialized batches lists of objects from the input stream.
<tt style='background-color:#E8E8E8;'> core.FramedSerializer <a href=' /serializers.py#L171'>dumps</a>(obj)</tt>	Serialize an object into a byte array.
<tt style='background-color:#E8E8E8;'> core.FramedSerializer <a href=' /serializers.py#L178'>loads</a>(obj)</tt>	Deserialize an object from a byte array.
<tt style='background-color:#E8E8E8;'> core. <a href=' /serializers.py#L356'>_restore</a>(name,fields,value)</tt>	Restore an object of namedtuple.
<tt style='background-color:#E8E8E8;'> core. <a href=' /serializers.py#L366'>_hack_namedtuple</a>(cls)</tt>	Make class generated by namedtuple picklable.
<tt style='background-color:#E8E8E8;'> core. <a href=' /serializers.py#L378'>_hijack_namedtuple</a>()</tt>	Hack namedtuple() to make it picklable.
<tt style='background-color:#E8E8E8;'> core.ProfilerCollector <a href=' /profiler.py#L38'>new_profiler</a>(ctx)</tt>	Create a new profiler using class profiler_cls.
<tt style='background-color:#E8E8E8;'> core.ProfilerCollector <a href=' /profiler.py#L42'>add_profiler</a>(id,profiler)</tt>	Add a profiler for rdd id.
<tt style='background-color:#E8E8E8;'> core.ProfilerCollector <a href=' /profiler.py#L52'>dump_profiles</a>(path)</tt>	Dump the profile stats into directory path.
<tt style='background-color:#E8E8E8;'> core.ProfilerCollector <a href=' /profiler.py#L58'>show_profiles</a>()</tt>	Print the profile stats to stdout.
<tt style='background-color:#E8E8E8;'> core.Profiler <a href=' /profiler.py#L104'>profile</a>(func)</tt>	Do profiling on the function func.
<tt style='background-color:#E8E8E8;'> core.Profiler <a href=' /profiler.py#L108'>stats</a>()</tt>	Return the collected profiling stats pstats stats.
<tt style='background-color:#E8E8E8;'> core.Profiler <a href=' /profiler.py#L112'>show</a>(id)</tt>	Print the profile stats to stdout id is the rdd id.
<tt style='background-color:#E8E8E8;'> core.Profiler <a href=' /profiler.py#L121'>dump</a>(id,path)</tt>	Dump the profile into path id is the rdd id.
<tt style='background-color:#E8E8E8;'> core.BasicProfiler <a href=' /profiler.py#L157'>profile</a>(func)</tt>	Runs and profiles the method to_profile passed in a profile object is returned.
<tt style='background-color:#E8E8E8;'> core.Broadcast <a href=' /broadcast.py#L66'>__init__</a>(sc,value,pickle_registry,path)</tt>	Should not be called directly by users -- use l{sparkcontext broadcast()}.
<tt style='background-color:#E8E8E8;'> core.Broadcast <a href=' /broadcast.py#L103'>value</a>()</tt>	Return the broadcasted value.
<tt style='background-color:#E8E8E8;'> core.Broadcast <a href=' /broadcast.py#L111'>unpersist</a>(blocking)</tt>	Delete cached copies of this broadcast on the executors if the.
<tt style='background-color:#E8E8E8;'> core.Broadcast <a href=' /broadcast.py#L123'>destroy</a>()</tt>	Destroy all data and metadata related to this broadcast variable.
<tt style='background-color:#E8E8E8;'> core. <a href=' /worker.py#L61'>chain</a>(f,g)</tt>	Chain two function together.
<tt style='background-color:#E8E8E8;'> core.TaskContextTests <a href=' /tests.py#L491'>test_stage_id</a>()</tt>	Test the stage ids are available and incrementing as expected.
<tt style='background-color:#E8E8E8;'> core.TaskContextTests <a href=' /tests.py#L502'>test_partition_id</a>()</tt>	Test the partition id.
<tt style='background-color:#E8E8E8;'> core.TaskContextTests <a href=' /tests.py#L513'>test_attempt_number</a>()</tt>	Verify the attempt numbers are correctly reported.
<tt style='background-color:#E8E8E8;'> core.TaskContextTests <a href=' /tests.py#L541'>test_tc_on_driver</a>()</tt>	Verify that getting the taskcontext on the driver returns none.
<tt style='background-color:#E8E8E8;'> core.DaemonTests <a href=' /tests.py#L1736'>test_termination_stdin</a>()</tt>	Ensure that daemon and workers terminate when stdin is closed.
<tt style='background-color:#E8E8E8;'> core.DaemonTests <a href=' /tests.py#L1740'>test_termination_sigterm</a>()</tt>	Ensure that daemon and workers terminate on sigterm.
<tt style='background-color:#E8E8E8;'> core.SparkSubmitTests <a href=' /tests.py#L1872'>createTempFile</a>(name,content,dir)</tt>	Create a temp file with the given name and content and return its path.
<tt style='background-color:#E8E8E8;'> core.SparkSubmitTests <a href=' /tests.py#L1888'>createFileInZip</a>(name,content,ext,dir)</tt>	Create a zip archive containing a file with the given content and return its path.
<tt style='background-color:#E8E8E8;'> core.SparkSubmitTests <a href=' /tests.py#L1925'>test_single_script</a>()</tt>	Submit and test a single script file.
<tt style='background-color:#E8E8E8;'> core.SparkSubmitTests <a href=' /tests.py#L1938'>test_script_with_local_functions</a>()</tt>	Submit and test a single script file calling a global function.
<tt style='background-color:#E8E8E8;'> core.SparkSubmitTests <a href=' /tests.py#L1954'>test_module_dependency</a>()</tt>	Submit and test a script with a dependency on another module.
<tt style='background-color:#E8E8E8;'> core.SparkSubmitTests <a href=' /tests.py#L1973'>test_module_dependency_on_cluster</a>()</tt>	Submit and test a script with a dependency on another module on a cluster.
<tt style='background-color:#E8E8E8;'> core.SparkSubmitTests <a href=' /tests.py#L1993'>test_package_dependency</a>()</tt>	Submit and test a script with a dependency on a spark package.
<tt style='background-color:#E8E8E8;'> core.SparkSubmitTests <a href=' /tests.py#L2009'>test_package_dependency_on_cluster</a>()</tt>	Submit and test a script with a dependency on a spark package on a cluster.
<tt style='background-color:#E8E8E8;'> core.SparkSubmitTests <a href=' /tests.py#L2026'>test_single_script_on_cluster</a>()</tt>	Submit and test a single script on a cluster.
<tt style='background-color:#E8E8E8;'> core.SparkSubmitTests <a href=' /tests.py#L2046'>test_user_configuration</a>()</tt>	Make sure user configuration is respected spark-19307.
<tt style='background-color:#E8E8E8;'> core.SparkConf <a href=' /conf.py#L97'>__init__</a>(loadDefaults,_jvm,_jconf)</tt>	Create a new spark configuration.
<tt style='background-color:#E8E8E8;'> core.SparkConf <a href=' /conf.py#L123'>set</a>(key,value)</tt>	Set a configuration property.
<tt style='background-color:#E8E8E8;'> core.SparkConf <a href=' /conf.py#L132'>setIfMissing</a>(key,value)</tt>	Set a configuration property if not already set.
<tt style='background-color:#E8E8E8;'> core.SparkConf <a href=' /conf.py#L138'>setMaster</a>(value)</tt>	Set master url to connect to.
<tt style='background-color:#E8E8E8;'> core.SparkConf <a href=' /conf.py#L143'>setAppName</a>(value)</tt>	Set application name.
<tt style='background-color:#E8E8E8;'> core.SparkConf <a href=' /conf.py#L148'>setSparkHome</a>(value)</tt>	Set path where spark is installed on worker nodes.
<tt style='background-color:#E8E8E8;'> core.SparkConf <a href=' /conf.py#L153'>setExecutorEnv</a>(key,value,pairs)</tt>	Set an environment variable to be passed to executors.
<tt style='background-color:#E8E8E8;'> core.SparkConf <a href=' /conf.py#L164'>setAll</a>(pairs)</tt>	Set multiple parameters passed as a list of key-value pairs.
<tt style='background-color:#E8E8E8;'> core.SparkConf <a href=' /conf.py#L174'>get</a>(key,defaultValue)</tt>	Get the configured value for some key or return a default otherwise.
<tt style='background-color:#E8E8E8;'> core.SparkConf <a href=' /conf.py#L191'>getAll</a>()</tt>	Get all values as a list of key-value pairs.
<tt style='background-color:#E8E8E8;'> core.SparkConf <a href=' /conf.py#L198'>contains</a>(key)</tt>	Does this configuration contain a given key?.
<tt style='background-color:#E8E8E8;'> core.SparkConf <a href=' /conf.py#L205'>toDebugString</a>()</tt>	Returns a printable version of the configuration as a list of key=value pairs one per line.
<tt style='background-color:#E8E8E8;'> core. <a href=' /heapq3.py#L411'>heappush</a>(heap,item)</tt>	Push item onto heap maintaining the heap invariant.
<tt style='background-color:#E8E8E8;'> core. <a href=' /heapq3.py#L416'>heappop</a>(heap)</tt>	Pop the smallest item off the heap maintaining the heap invariant.
<tt style='background-color:#E8E8E8;'> core. <a href=' /heapq3.py#L426'>heapreplace</a>(heap,item)</tt>	Pop and return the current smallest value and add the new item.
<tt style='background-color:#E8E8E8;'> core. <a href=' /heapq3.py#L442'>heappushpop</a>(heap,item)</tt>	Fast version of a heappush followed by a heappop.
<tt style='background-color:#E8E8E8;'> core. <a href=' /heapq3.py#L449'>heapify</a>(x)</tt>	Transform list into a heap in-place in o(len x time.
<tt style='background-color:#E8E8E8;'> core. <a href=' /heapq3.py#L460'>_heappop_max</a>(heap)</tt>	Maxheap version of a heappop.
<tt style='background-color:#E8E8E8;'> core. <a href=' /heapq3.py#L470'>_heapreplace_max</a>(heap,item)</tt>	Maxheap version of a heappop followed by a heappush.
<tt style='background-color:#E8E8E8;'> core. <a href=' /heapq3.py#L477'>_heapify_max</a>(x)</tt>	Transform list into a maxheap in-place in o(len x time.
<tt style='background-color:#E8E8E8;'> core. <a href=' /heapq3.py#L559'>_siftdown_max</a>(heap,startpos,pos)</tt>	Maxheap variant of _siftdown.
<tt style='background-color:#E8E8E8;'> core. <a href=' /heapq3.py#L574'>_siftup_max</a>(heap,pos)</tt>	Maxheap variant of _siftup.
<tt style='background-color:#E8E8E8;'> core. <a href=' /heapq3.py#L595'>merge</a>(iterables,key,reverse)</tt>	Merge multiple sorted inputs into a single sorted output.
<tt style='background-color:#E8E8E8;'> core. <a href=' /heapq3.py#L742'>nsmallest</a>(n,iterable,key)</tt>	Find the n smallest elements in a dataset.
<tt style='background-color:#E8E8E8;'> core. <a href=' /heapq3.py#L805'>nlargest</a>(n,iterable,key)</tt>	Find the n largest elements in a dataset.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L164'>save_memoryview</a>(obj)</tt>	Fallback to save_string.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L168'>save_buffer</a>(obj)</tt>	Fallback to save_string.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L185'>save_module</a>(obj)</tt>	Save a module as an import.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L193'>save_codeobject</a>(obj)</tt>	Save a code object.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L213'>save_function</a>(obj,name)</tt>	Registered with the dispatch to handle all function types.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L270'>save_function_tuple</a>(func)</tt>	Pickles an actual func object.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L309'>extract_code_globals</a>(cls,co)</tt>	Find all globals names read or written to by codeblock co.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L335'>extract_func_data</a>(func)</tt>	Turn the function into a tuple of data necessary to recreate it.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L451'>save_inst</a>(obj)</tt>	Inner logic to save instance based off pickle save_inst.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L506'>save_itemgetter</a>(obj)</tt>	Itemgetter serializer needed for namedtuple support.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L541'>save_reduce</a>(func,args,state,listitems)</tt>	Modified to support __transient__ on new objects.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L603'>save_partial</a>(obj)</tt>	Partial objects do not serialize correctly in python2 x -- this fixes the bugs.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L611'>save_file</a>(obj)</tt>	Save a file.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L678'>save_ufunc</a>(obj)</tt>	Hack function for saving numpy ufunc objects.
<tt style='background-color:#E8E8E8;'> core.CloudPickler <a href=' /cloudpickle.py#L689'>inject_addons</a>()</tt>	Plug in system register additional pickling functions if modules already loaded.
<tt style='background-color:#E8E8E8;'> core. <a href=' /cloudpickle.py#L731'>_modules_to_main</a>(modList)</tt>	Force every module in modlist to be placed into main.
<tt style='background-color:#E8E8E8;'> core. <a href=' /cloudpickle.py#L759'>_fill_function</a>(func,globals,defaults,dict)</tt>	Fills in the rest of function data into the skeleton function object that were created via _make_skel_func().
<tt style='background-color:#E8E8E8;'> core. <a href=' /cloudpickle.py#L779'>_make_skel_func</a>(code,closures,base_globals)</tt>	Creates a skeleton function object that contains just the provided code and the correct number of cells in func_closure.
<tt style='background-color:#E8E8E8;'> core. <a href=' /cloudpickle.py#L794'>_load_class</a>(cls,d)</tt>	Loads additional properties into class cls.
<tt style='background-color:#E8E8E8;'> core. <a href=' /cloudpickle.py#L811'>_load_namedtuple</a>(name,fields)</tt>	Loads a class generated by namedtuple.
<tt style='background-color:#E8E8E8;'> core. <a href=' /java_gateway.py#L36'>launch_gateway</a>(conf)</tt>	Launch jvm gateway.
<tt style='background-color:#E8E8E8;'> core.Accumulator <a href=' /accumulators.py#L132'>__init__</a>(aid,value,accum_param)</tt>	Create a new accumulator with a given initial value and accumulatorparam object.
<tt style='background-color:#E8E8E8;'> core.Accumulator <a href=' /accumulators.py#L141'>__reduce__</a>()</tt>	Custom serialization saves the zero value from our accumulatorparam.
<tt style='background-color:#E8E8E8;'> core.Accumulator <a href=' /accumulators.py#L153'>value</a>()</tt>	Get the accumulator's value only usable in driver program.
<tt style='background-color:#E8E8E8;'> core.Accumulator <a href=' /accumulators.py#L153'>value</a>(value)</tt>	Sets the accumulator's value only usable in driver program.
<tt style='background-color:#E8E8E8;'> core.Accumulator <a href=' /accumulators.py#L160'>add</a>(term)</tt>	Adds a term to this accumulator's value.
<tt style='background-color:#E8E8E8;'> core.Accumulator <a href=' /accumulators.py#L164'>__iadd__</a>(term)</tt>	The += operator adds a term to this accumulator's value.
<tt style='background-color:#E8E8E8;'> core.AccumulatorParam <a href=' /accumulators.py#L182'>zero</a>(value)</tt>	Provide a "zero value" for the type compatible in dimensions with the provided c{value} (e.
<tt style='background-color:#E8E8E8;'> core.AccumulatorParam <a href=' /accumulators.py#L189'>addInPlace</a>(value1,value2)</tt>	Add two values of the accumulator's data type returning a new value for efficiency can also update c{value1} in place and return it.
<tt style='background-color:#E8E8E8;'> core. <a href=' /accumulators.py#L257'>_start_update_server</a>()</tt>	Start a tcp server to receive accumulator updates in a daemon thread and returns it.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__init__.py#L59'>since</a>(version)</tt>	A decorator that annotates a function to append the version of spark the function was added.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__init__.py#L74'>copy_func</a>(f,name,sinceversion,doc)</tt>	Returns a function with same code globals defaults closure and name or provide a new name.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__init__.py#L92'>keyword_only</a>(func)</tt>	A decorator that forces keyword arguments in the wrapped method and saves actual input keyword arguments in _input_kwargs.
<tt style='background-color:#E8E8E8;'> core. <a href=' /daemon.py#L43'>worker</a>(sock)</tt>	Called by a worker process after the fork().
<tt style='background-color:#E8E8E8;'> core. <a href=' /rdd.py#L59'>portable_hash</a>(x)</tt>	This function returns consistent hash code for builtin types especially for none and tuple with none.
<tt style='background-color:#E8E8E8;'> core. <a href=' /rdd.py#L106'>_parse_memory</a>(s)</tt>	Parse a memory string in the format supported by java e g 1g 200m and.
<tt style='background-color:#E8E8E8;'> core. <a href=' /rdd.py#L146'>ignore_unicode_prefix</a>(f)</tt>	Ignore the 'u' prefix of string in doc tests to make it works.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L192'>id</a>()</tt>	A unique id for this rdd within its sparkcontext.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L212'>context</a>()</tt>	The l{sparkcontext} that this rdd was created on.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L219'>cache</a>()</tt>	Persist this rdd with the default storage level (c{memory_only}).
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L227'>persist</a>(storageLevel)</tt>	Set this rdd's storage level to persist its values across operations after the first time it is computed.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L243'>unpersist</a>()</tt>	Mark the rdd as non-persistent and remove all blocks for it from memory and disk.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L252'>checkpoint</a>()</tt>	Mark this rdd for checkpointing it will be saved to a file inside the.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L264'>isCheckpointed</a>()</tt>	Return whether this rdd is checkpointed and materialized either reliably or locally.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L270'>localCheckpoint</a>()</tt>	Mark this rdd for local checkpointing using spark's existing caching layer.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L291'>isLocallyCheckpointed</a>()</tt>	Return whether this rdd is marked for local checkpointing.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L299'>getCheckpointFile</a>()</tt>	Gets the name of the file to which this rdd was checkpointed not defined if rdd is checkpointed locally.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L309'>map</a>(f,preservesPartitioning)</tt>	Return a new rdd by applying a function to each element of this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L321'>flatMap</a>(f,preservesPartitioning)</tt>	Return a new rdd by first applying a function to all elements of this rdd and then flattening the results.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L336'>mapPartitions</a>(f,preservesPartitioning)</tt>	Return a new rdd by applying a function to each partition of this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L349'>mapPartitionsWithIndex</a>(f,preservesPartitioning)</tt>	Return a new rdd by applying a function to each partition of this rdd while tracking the index of the original partition.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L361'>mapPartitionsWithSplit</a>(f,preservesPartitioning)</tt>	Deprecated use mappartitionswithindex instead.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L377'>getNumPartitions</a>()</tt>	Returns the number of partitions in rdd >>> rdd = sc.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L387'>filter</a>(f)</tt>	Return a new rdd containing only the elements that satisfy a predicate.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L399'>distinct</a>(numPartitions)</tt>	Return a new rdd containing the distinct elements in this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L410'>sample</a>(withReplacement,fraction,seed)</tt>	Return a sampled subset of this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L430'>randomSplit</a>(weights,seed)</tt>	Randomly splits this rdd with the provided weights.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L457'>takeSample</a>(withReplacement,num,seed)</tt>	Return a fixed-size sampled subset of this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L512'>_computeFractionForSampleSize</a>(sampleSizeLowerBound,total,withReplacement)</tt>	Returns a sampling rate that guarantees a sample of size >= samplesizelowerbound 99.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L545'>union</a>(other)</tt>	Return the union of this rdd and another one.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L568'>intersection</a>(other)</tt>	Return the intersection of this rdd and another one the output will.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L592'>__add__</a>(other)</tt>	Return the union of this rdd and another one.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L604'>repartitionAndSortWithinPartitions</a>(numPartitions,partitionFunc,ascending,keyfunc)</tt>	Repartition the rdd according to the given partitioner and within each resulting partition sort records by their keys.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L627'>sortByKey</a>(ascending,numPartitions,keyfunc)</tt>	Sorts this rdd which is assumed to consist of key value pairs.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L684'>sortBy</a>(keyfunc,ascending,numPartitions)</tt>	Sorts this rdd by the given keyfunc >>> tmp = [('a', 1), ('b', 2), ('1', 3), ('d', 4), ('2', 5)].
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L696'>glom</a>()</tt>	Return an rdd created by coalescing all elements within each partition into a list.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L709'>cartesian</a>(other)</tt>	Return the cartesian product of this rdd and another one that is the rdd of all pairs of elements c{ a b } where c{a} is in c{self} and.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L724'>groupBy</a>(f,numPartitions,partitionFunc)</tt>	Return an rdd of grouped items.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L735'>pipe</a>(command,env,checkCode)</tt>	Return an rdd created by piping elements to a forked external process.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L771'>foreach</a>(f)</tt>	Applies a function to all elements of this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L784'>foreachPartition</a>(f)</tt>	Applies a function to each partition of this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L801'>collect</a>()</tt>	Return a list that contains all of the elements in this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L812'>reduce</a>(f)</tt>	Reduces the elements of this rdd using the specified commutative and associative binary operator.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L840'>treeReduce</a>(f,depth)</tt>	Reduces the elements of this rdd in a multi-level tree pattern.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L877'>fold</a>(zeroValue,op)</tt>	Aggregate the elements of each partition and then the results for all the partitions using a given associative function and a neutral "zero value.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L909'>aggregate</a>(zeroValue,seqOp,combOp)</tt>	Aggregate the elements of each partition and then the results for all the partitions using a given combine functions and a neutral "zero.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L941'>treeAggregate</a>(zeroValue,seqOp,combOp,depth)</tt>	Aggregates the elements of this rdd in a multi-level tree pattern.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L993'>max</a>(key)</tt>	Find the maximum item in this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1009'>min</a>(key)</tt>	Find the minimum item in this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1025'>sum</a>()</tt>	Add up the elements in this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1034'>count</a>()</tt>	Return the number of elements in this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1043'>stats</a>()</tt>	Return a l{statcounter} object that captures the mean variance and count of the rdd's elements in one operation.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1053'>histogram</a>(buckets)</tt>	Compute a histogram using the provided buckets the buckets.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1181'>mean</a>()</tt>	Compute the mean of this rdd's elements.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1190'>variance</a>()</tt>	Compute the variance of this rdd's elements.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1199'>stdev</a>()</tt>	Compute the standard deviation of this rdd's elements.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1208'>sampleStdev</a>()</tt>	Compute the sample standard deviation of this rdd's elements (which corrects for bias in estimating the standard deviation by dividing by.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1219'>sampleVariance</a>()</tt>	Compute the sample variance of this rdd's elements which corrects for bias in estimating the variance by dividing by n-1 instead of n.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1229'>countByValue</a>()</tt>	Return the count of each unique value in this rdd as a dictionary of value count pairs.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1249'>top</a>(num,key)</tt>	Get the top n elements from an rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1273'>takeOrdered</a>(num,key)</tt>	Get the n elements from an rdd ordered in ascending order or as specified by the optional key function.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1292'>take</a>(num)</tt>	Take the first num elements of the rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1350'>first</a>()</tt>	Return the first element in this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1366'>isEmpty</a>()</tt>	Returns true if and only if the rdd contains no elements at all.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1379'>saveAsNewAPIHadoopDataset</a>(conf,keyConverter,valueConverter)</tt>	Output a python rdd of key-value pairs (of form c{rdd[ k v ]}) to any hadoop file system using the new hadoop outputformat api mapreduce package.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1395'>saveAsNewAPIHadoopFile</a>(path,outputFormatClass,keyClass,valueClass)</tt>	Output a python rdd of key-value pairs (of form c{rdd[ k v ]}) to any hadoop file system using the new hadoop outputformat api mapreduce package.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1423'>saveAsHadoopDataset</a>(conf,keyConverter,valueConverter)</tt>	Output a python rdd of key-value pairs (of form c{rdd[ k v ]}) to any hadoop file system using the old hadoop outputformat api mapred package.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1439'>saveAsHadoopFile</a>(path,outputFormatClass,keyClass,valueClass)</tt>	Output a python rdd of key-value pairs (of form c{rdd[ k v ]}) to any hadoop file system using the old hadoop outputformat api mapred package.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1470'>saveAsSequenceFile</a>(path,compressionCodecClass)</tt>	Output a python rdd of key-value pairs (of form c{rdd[ k v ]}) to any hadoop file system using the l{org.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1486'>saveAsPickleFile</a>(path,batchSize)</tt>	Save this rdd as a sequencefile of serialized objects the serializer.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1504'>saveAsTextFile</a>(path,compressionCodecClass)</tt>	Save this rdd as a text file using string representations of elements.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1557'>collectAsMap</a>()</tt>	Return the key-value pairs in this rdd to the master as a dictionary.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1572'>keys</a>()</tt>	Return an rdd with the keys of each tuple.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1582'>values</a>()</tt>	Return an rdd with the values of each tuple.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1592'>reduceByKey</a>(func,numPartitions,partitionFunc)</tt>	Merge the values for each key using an associative and commutative reduce function.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1610'>reduceByKeyLocally</a>(func)</tt>	Merge the values for each key using an associative and commutative reduce function but return the results immediately to the master as a dictionary.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1635'>countByKey</a>()</tt>	Count the number of elements for each key and return the result to the master as a dictionary.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1646'>join</a>(other,numPartitions)</tt>	Return an rdd containing all pairs of elements with matching keys in c{self} and c{other}.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1663'>leftOuterJoin</a>(other,numPartitions)</tt>	Perform a left outer join of c{self} and c{other}.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1680'>rightOuterJoin</a>(other,numPartitions)</tt>	Perform a right outer join of c{self} and c{other}.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1697'>fullOuterJoin</a>(other,numPartitions)</tt>	Perform a right outer join of c{self} and c{other}.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1721'>partitionBy</a>(numPartitions,partitionFunc)</tt>	Return a copy of the rdd partitioned using the specified partitioner.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1792'>combineByKey</a>(createCombiner,mergeValue,mergeCombiners,numPartitions)</tt>	Generic function to combine the elements for each key using a custom set of aggregation functions.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1855'>aggregateByKey</a>(zeroValue,seqFunc,combFunc,numPartitions)</tt>	Aggregate the values of each key using given combine functions and a neutral "zero value".
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1872'>foldByKey</a>(zeroValue,func,numPartitions,partitionFunc)</tt>	Merge the values for each key using an associative function "func" and a neutral "zerovalue" which may be added to the result an.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1894'>groupByKey</a>(numPartitions,partitionFunc)</tt>	Group the values for each key in the rdd into a single sequence.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1939'>flatMapValues</a>(f)</tt>	Pass each value in the key-value pair rdd through a flatmap function without changing the keys this also retains the original rdd's.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1953'>mapValues</a>(f)</tt>	Pass each value in the key-value pair rdd through a map function without changing the keys this also retains the original rdd's.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1967'>groupWith</a>(other)</tt>	Alias for cogroup but with support for multiple rdds.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1982'>cogroup</a>(other,numPartitions)</tt>	For each key k in c{self} or c{other}, return a resulting rdd that contains a tuple with the list of values for that key in c{self} as.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L1995'>sampleByKey</a>(withReplacement,fractions,seed)</tt>	Return a subset of this rdd sampled by key via stratified sampling.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2016'>subtractByKey</a>(other,numPartitions)</tt>	Return each key value pair in c{self} that has no pair with matching key in c{other}.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2031'>subtract</a>(other,numPartitions)</tt>	Return each value in c{self} that is not contained in c{other}.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2044'>keyBy</a>(f)</tt>	Creates tuples of the elements in this rdd by applying c{f}.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2055'>repartition</a>(numPartitions)</tt>	Return a new rdd that has exactly numpartitions partitions.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2074'>coalesce</a>(numPartitions,shuffle)</tt>	Return a new rdd that is reduced into numpartitions partitions.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2096'>zip</a>(other)</tt>	Zips this rdd with another one returning key-value pairs with the first element in each rdd second element in each rdd etc.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2138'>zipWithIndex</a>()</tt>	Zips this rdd with its element indices.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2165'>zipWithUniqueId</a>()</tt>	Zips this rdd with generated unique long ids.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2185'>name</a>()</tt>	Return the name of this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2193'>setName</a>(name)</tt>	Assign a name to this rdd.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2205'>toDebugString</a>()</tt>	A description of this rdd and its recursive dependencies for debugging.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2213'>getStorageLevel</a>()</tt>	Get the rdd's current storage level.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2231'>_defaultReducePartitions</a>()</tt>	Returns the default number of partitions to use during reduce tasks (e g groupby).
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2246'>lookup</a>(key)</tt>	Return the list of values in the rdd for key key this operation.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2272'>_to_java_object_rdd</a>()</tt>	Return a javardd of object by unpickling it will convert each python object into java object by pyrolite whenever the.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2281'>countApprox</a>(timeout,confidence)</tt>	Note : experimental.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2295'>sumApprox</a>(timeout,confidence)</tt>	Note : experimental.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2312'>meanApprox</a>(timeout,confidence)</tt>	Note : experimental.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2329'>countApproxDistinct</a>(relativeSD)</tt>	Note : experimental.
<tt style='background-color:#E8E8E8;'> core.RDD <a href=' /rdd.py#L2357'>toLocalIterator</a>()</tt>	Return an iterator that contains all of the elements in this rdd.
<tt style='background-color:#E8E8E8;'> core.StatCounter <a href=' /statcounter.py#L134'>asDict</a>(sample)</tt>	Returns the :class statcounter members as a dict.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L77'>__init__</a>(master,appName,sparkHome,pyFiles)</tt>	Create a new sparkcontext at least the master and app name should be set.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L269'>_initialize_context</a>(jconf)</tt>	Initialize sparkcontext in function to allow subclass specific initialization.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L275'>_ensure_initialized</a>(cls,instance,gateway,conf)</tt>	Checks whether a sparkcontext is initialized or not.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L311'>__enter__</a>()</tt>	Enable 'with sparkcontext as sc app sc ' syntax.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L317'>__exit__</a>(type,value,trace)</tt>	Enable 'with sparkcontext as sc app' syntax.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L325'>getOrCreate</a>(cls,conf)</tt>	Get or instantiate a sparkcontext and register it as a singleton object.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L337'>setLogLevel</a>(logLevel)</tt>	Control our loglevel this overrides any user-defined log settings.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L344'>setSystemProperty</a>(cls,key,value)</tt>	Set a java system property such as spark executor memory this must.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L353'>version</a>()</tt>	The version of spark on which this application is running.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L360'>applicationId</a>()</tt>	A unique identifier for the spark application.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L375'>uiWebUrl</a>()</tt>	Return the url of the sparkui instance started by this sparkcontext.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L380'>startTime</a>()</tt>	Return the epoch time when the spark context was started.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L385'>defaultParallelism</a>()</tt>	Default level of parallelism to use when not given by user (e g for.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L393'>defaultMinPartitions</a>()</tt>	Default min number of partitions for hadoop rdds when not given by user.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L400'>stop</a>()</tt>	Shut down the sparkcontext.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L424'>emptyRDD</a>()</tt>	Create an rdd that has no partitions or elements.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L430'>range</a>(start,end,step,numSlices)</tt>	Create a new rdd of int containing elements from start to end exclusive increased by step every element.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L456'>parallelize</a>(c,numSlices)</tt>	Distribute a local python collection to form an rdd using xrange.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L500'>pickleFile</a>(name,minPartitions)</tt>	Load an rdd previously saved using l{rdd saveaspicklefile} method.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L513'>textFile</a>(name,minPartitions,use_unicode)</tt>	Read a text file from hdfs a local file system available on all nodes or any hadoop-supported file system uri and return it as an.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L535'>wholeTextFiles</a>(path,minPartitions,use_unicode)</tt>	Read a directory of text files from hdfs a local file system available on all nodes or any hadoop-supported file system.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L580'>binaryFiles</a>(path,minPartitions)</tt>	Note : experimental.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L597'>binaryRecords</a>(path,recordLength)</tt>	Note : experimental.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L618'>sequenceFile</a>(path,keyClass,valueClass,keyConverter)</tt>	Read a hadoop sequencefile with arbitrary key and value writable class from hdfs a local file system available on all nodes or any hadoop-supported file system uri.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L648'>newAPIHadoopFile</a>(path,inputFormatClass,keyClass,valueClass)</tt>	Read a 'new api' hadoop inputformat with arbitrary key and value class from hdfs a local file system available on all nodes or any hadoop-supported file system uri.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L678'>newAPIHadoopRDD</a>(inputFormatClass,keyClass,valueClass,keyConverter)</tt>	Read a 'new api' hadoop inputformat with arbitrary key and value class from an arbitrary hadoop configuration which is passed in as a python dict.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L705'>hadoopFile</a>(path,inputFormatClass,keyClass,valueClass)</tt>	Read an 'old' hadoop inputformat with arbitrary key and value class from hdfs a local file system available on all nodes or any hadoop-supported file system uri.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L735'>hadoopRDD</a>(inputFormatClass,keyClass,valueClass,keyConverter)</tt>	Read an 'old' hadoop inputformat with arbitrary key and value class from an arbitrary hadoop configuration which is passed in as a python dict.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L766'>union</a>(rdds)</tt>	Build the union of a list of rdds.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L792'>broadcast</a>(value)</tt>	Broadcast a read-only variable to the cluster returning a l{broadcast<pyspark.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L801'>accumulator</a>(value,accum_param)</tt>	Create an l{accumulator} with the given initial value using a given l{accumulatorparam} helper object to define how to add values of the.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L821'>addFile</a>(path,recursive)</tt>	Add a file to be downloaded with this spark job on every node.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L849'>addPyFile</a>(path)</tt>	Add a py or zip dependency for all tasks to be executed on this.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L866'>setCheckpointDir</a>(dirName)</tt>	Set the directory under which rdds are going to be checkpointed the.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L873'>_getJavaStorageLevel</a>(storageLevel)</tt>	Returns a java storagelevel based on a pyspark storagelevel.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L887'>setJobGroup</a>(groupId,description,interruptOnCancel)</tt>	Assigns a group id to all the jobs started by this thread until the group id is set to a different value or cleared.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L931'>setLocalProperty</a>(key,value)</tt>	Set a local property that affects jobs submitted from this thread such as the spark fair scheduler pool.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L938'>getLocalProperty</a>(key)</tt>	Get a local property set in this thread or null if it is missing see.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L945'>sparkUser</a>()</tt>	Get spark_user for user who is running sparkcontext.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L951'>cancelJobGroup</a>(groupId)</tt>	Cancel active jobs for the specified group see l{sparkcontext setjobgroup}.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L958'>cancelAllJobs</a>()</tt>	Cancel all jobs that have been scheduled or are running.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L964'>statusTracker</a>()</tt>	Return :class statustracker object.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L970'>runJob</a>(rdd,partitionFunc,partitions,allowLocal)</tt>	Executes the given partitionfunc on the specified set of partitions returning the result as an array of elements.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L995'>show_profiles</a>()</tt>	Print the profile stats to stdout.
<tt style='background-color:#E8E8E8;'> core.SparkContext <a href=' /context.py#L999'>dump_profiles</a>(path)</tt>	Dump the profile stats into directory path.
<tt style='background-color:#E8E8E8;'> streaming.StreamingListener <a href=' /streaming/listener.py#L26'>onReceiverStarted</a>(receiverStarted)</tt>	Called when a receiver has been started.
<tt style='background-color:#E8E8E8;'> streaming.StreamingListener <a href=' /streaming/listener.py#L32'>onReceiverError</a>(receiverError)</tt>	Called when a receiver has reported an error.
<tt style='background-color:#E8E8E8;'> streaming.StreamingListener <a href=' /streaming/listener.py#L38'>onReceiverStopped</a>(receiverStopped)</tt>	Called when a receiver has been stopped.
<tt style='background-color:#E8E8E8;'> streaming.StreamingListener <a href=' /streaming/listener.py#L44'>onBatchSubmitted</a>(batchSubmitted)</tt>	Called when a batch of jobs has been submitted for processing.
<tt style='background-color:#E8E8E8;'> streaming.StreamingListener <a href=' /streaming/listener.py#L50'>onBatchStarted</a>(batchStarted)</tt>	Called when processing of a batch of jobs has started.
<tt style='background-color:#E8E8E8;'> streaming.StreamingListener <a href=' /streaming/listener.py#L56'>onBatchCompleted</a>(batchCompleted)</tt>	Called when processing of a batch of jobs has completed.
<tt style='background-color:#E8E8E8;'> streaming.StreamingListener <a href=' /streaming/listener.py#L62'>onOutputOperationStarted</a>(outputOperationStarted)</tt>	Called when processing of a job of a batch has started.
<tt style='background-color:#E8E8E8;'> streaming.StreamingListener <a href=' /streaming/listener.py#L68'>onOutputOperationCompleted</a>(outputOperationCompleted)</tt>	Called when processing of a job of a batch has completed.
<tt style='background-color:#E8E8E8;'> streaming. <a href=' /streaming/flume.py#L32'>utf8_decoder</a>(s)</tt>	Decode the unicode as utf-8.
<tt style='background-color:#E8E8E8;'> streaming.KafkaUtils <a href=' /streaming/kafka.py#L41'>createStream</a>(ssc,zkQuorum,groupId,topics)</tt>	Create an input stream that pulls messages from a kafka broker.
<tt style='background-color:#E8E8E8;'> streaming.KafkaUtils <a href=' /streaming/kafka.py#L75'>createDirectStream</a>(ssc,topics,kafkaParams,fromOffsets)</tt>	Note : experimental.
<tt style='background-color:#E8E8E8;'> streaming.KafkaUtils <a href=' /streaming/kafka.py#L140'>createRDD</a>(sc,kafkaParams,offsetRanges,leaders)</tt>	Note : experimental.
<tt style='background-color:#E8E8E8;'> streaming.OffsetRange <a href=' /streaming/kafka.py#L229'>__init__</a>(topic,partition,fromOffset,untilOffset)</tt>	Create an offsetrange to represent range of offsets.
<tt style='background-color:#E8E8E8;'> streaming.TopicAndPartition <a href=' /streaming/kafka.py#L268'>__init__</a>(topic,partition)</tt>	Create a python topicandpartition to map to the java related object.
<tt style='background-color:#E8E8E8;'> streaming.Broker <a href=' /streaming/kafka.py#L299'>__init__</a>(host,port)</tt>	Create a python broker to map to the java related object.
<tt style='background-color:#E8E8E8;'> streaming.KafkaRDD <a href=' /streaming/kafka.py#L320'>offsetRanges</a>()</tt>	Get the offsetrange of specific kafkardd.
<tt style='background-color:#E8E8E8;'> streaming.KafkaDStream <a href=' /streaming/kafka.py#L340'>foreachRDD</a>(func)</tt>	Apply a function to each rdd in this dstream.
<tt style='background-color:#E8E8E8;'> streaming.KafkaDStream <a href=' /streaming/kafka.py#L352'>transform</a>(func)</tt>	Return a new dstream in which each rdd is generated by applying a function on each rdd of this dstream.
<tt style='background-color:#E8E8E8;'> streaming.KafkaMessageAndMetadata <a href=' /streaming/kafka.py#L393'>__init__</a>(topic,partition,offset,key)</tt>	Python wrapper of kafka messageandmetadata.
<tt style='background-color:#E8E8E8;'> streaming. <a href=' /streaming/util.py#L128'>rddToFileName</a>(prefix,suffix,timestamp)</tt>	Return string prefix-time suffix.
<tt style='background-color:#E8E8E8;'> streaming.KinesisUtils <a href=' /streaming/kinesis.py#L36'>createStream</a>(ssc,kinesisAppName,streamName,endpointUrl)</tt>	Create an input stream that pulls messages from a kinesis stream this uses the.
<tt style='background-color:#E8E8E8;'> streaming.PySparkStreamingTestCase <a href=' /streaming/tests.py#L100'>_take</a>(dstream,n)</tt>	Return the first n elements in the stream will start and stop.
<tt style='background-color:#E8E8E8;'> streaming.PySparkStreamingTestCase <a href=' /streaming/tests.py#L116'>_collect</a>(dstream,n,block)</tt>	Collect each rdds into the returned list.
<tt style='background-color:#E8E8E8;'> streaming.PySparkStreamingTestCase <a href=' /streaming/tests.py#L139'>_test_func</a>(input,func,expected,sort)</tt>	@param input dataset for the test this should be list of lists.
<tt style='background-color:#E8E8E8;'> streaming.PySparkStreamingTestCase <a href=' /streaming/tests.py#L164'>_sort_result_based_on_key</a>(outputs)</tt>	Sort the list based on first value.
<tt style='background-color:#E8E8E8;'> streaming.BasicOperationTests <a href=' /streaming/tests.py#L172'>test_map</a>()</tt>	Basic operation test for dstream map.
<tt style='background-color:#E8E8E8;'> streaming.BasicOperationTests <a href=' /streaming/tests.py#L181'>test_flatMap</a>()</tt>	Basic operation test for dstream faltmap.
<tt style='background-color:#E8E8E8;'> streaming.BasicOperationTests <a href=' /streaming/tests.py#L191'>test_filter</a>()</tt>	Basic operation test for dstream filter.
<tt style='background-color:#E8E8E8;'> streaming.BasicOperationTests <a href=' /streaming/tests.py#L200'>test_count</a>()</tt>	Basic operation test for dstream count.
<tt style='background-color:#E8E8E8;'> streaming.BasicOperationTests <a href=' /streaming/tests.py#L209'>test_reduce</a>()</tt>	Basic operation test for dstream reduce.
<tt style='background-color:#E8E8E8;'> streaming.BasicOperationTests <a href=' /streaming/tests.py#L218'>test_reduceByKey</a>()</tt>	Basic operation test for dstream reducebykey.
<tt style='background-color:#E8E8E8;'> streaming.BasicOperationTests <a href=' /streaming/tests.py#L229'>test_mapValues</a>()</tt>	Basic operation test for dstream mapvalues.
<tt style='background-color:#E8E8E8;'> streaming.BasicOperationTests <a href=' /streaming/tests.py#L242'>test_flatMapValues</a>()</tt>	Basic operation test for dstream flatmapvalues.
<tt style='background-color:#E8E8E8;'> streaming.BasicOperationTests <a href=' /streaming/tests.py#L256'>test_glom</a>()</tt>	Basic operation test for dstream glom.
<tt style='background-color:#E8E8E8;'> streaming.BasicOperationTests <a href=' /streaming/tests.py#L266'>test_mapPartitions</a>()</tt>	Basic operation test for dstream mappartitions.
<tt style='background-color:#E8E8E8;'> streaming.BasicOperationTests <a href=' /streaming/tests.py#L278'>test_countByValue</a>()</tt>	Basic operation test for dstream countbyvalue.
<tt style='background-color:#E8E8E8;'> streaming.BasicOperationTests <a href=' /streaming/tests.py#L289'>test_groupByKey</a>()</tt>	Basic operation test for dstream groupbykey.
<tt style='background-color:#E8E8E8;'> streaming.BasicOperationTests <a href=' /streaming/tests.py#L303'>test_combineByKey</a>()</tt>	Basic operation test for dstream combinebykey.
<tt style='background-color:#E8E8E8;'> streaming.KafkaStreamTests <a href=' /streaming/tests.py#L1039'>test_kafka_stream</a>()</tt>	Test the python kafka stream api.
<tt style='background-color:#E8E8E8;'> streaming.KafkaStreamTests <a href=' /streaming/tests.py#L1052'>test_kafka_direct_stream</a>()</tt>	Test the python direct kafka stream api.
<tt style='background-color:#E8E8E8;'> streaming.KafkaStreamTests <a href=' /streaming/tests.py#L1065'>test_kafka_direct_stream_from_offset</a>()</tt>	Test the python direct kafka stream api with start offset specified.
<tt style='background-color:#E8E8E8;'> streaming.KafkaStreamTests <a href=' /streaming/tests.py#L1078'>test_kafka_rdd</a>()</tt>	Test the python direct kafka rdd api.
<tt style='background-color:#E8E8E8;'> streaming.KafkaStreamTests <a href=' /streaming/tests.py#L1090'>test_kafka_rdd_with_leaders</a>()</tt>	Test the python direct kafka rdd api with leaders.
<tt style='background-color:#E8E8E8;'> streaming.KafkaStreamTests <a href=' /streaming/tests.py#L1104'>test_kafka_rdd_get_offsetRanges</a>()</tt>	Test python direct kafka rdd get offsetranges.
<tt style='background-color:#E8E8E8;'> streaming.KafkaStreamTests <a href=' /streaming/tests.py#L1116'>test_kafka_direct_stream_foreach_get_offsetRanges</a>()</tt>	Test the python direct kafka stream foreachrdd get offsetranges.
<tt style='background-color:#E8E8E8;'> streaming.KafkaStreamTests <a href=' /streaming/tests.py#L1140'>test_kafka_direct_stream_transform_get_offsetRanges</a>()</tt>	Test the python direct kafka stream transform get offsetranges.
<tt style='background-color:#E8E8E8;'> streaming.KafkaStreamTests <a href=' /streaming/tests.py#L1177'>test_kafka_direct_stream_transform_with_checkpoint</a>()</tt>	Test the python direct kafka stream transform with checkpoint correctly recovered.
<tt style='background-color:#E8E8E8;'> streaming.KafkaStreamTests <a href=' /streaming/tests.py#L1225'>test_kafka_rdd_message_handler</a>()</tt>	Test python direct kafka rdd messagehandler.
<tt style='background-color:#E8E8E8;'> streaming.KafkaStreamTests <a href=' /streaming/tests.py#L1241'>test_kafka_direct_stream_message_handler</a>()</tt>	Test the python direct kafka stream messagehandler.
<tt style='background-color:#E8E8E8;'> streaming.FlumeUtils <a href=' /streaming/flume.py#L41'>createStream</a>(ssc,hostname,port,storageLevel)</tt>	Create an input stream that pulls events from flume.
<tt style='background-color:#E8E8E8;'> streaming.FlumeUtils <a href=' /streaming/flume.py#L62'>createPollingStream</a>(ssc,addresses,storageLevel,maxBatchSize)</tt>	Creates an input stream that is to be used with the spark sink deployed on a flume agent.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L65'>context</a>()</tt>	Return the streamingcontext associated with this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L71'>count</a>()</tt>	Return a new dstream in which each rdd has a single element generated by counting each rdd of this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L78'>filter</a>(f)</tt>	Return a new dstream containing only the elements that satisfy predicate.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L86'>flatMap</a>(f,preservesPartitioning)</tt>	Return a new dstream by applying a function to all elements of.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L95'>map</a>(f,preservesPartitioning)</tt>	Return a new dstream by applying a function to each element of dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L103'>mapPartitions</a>(f,preservesPartitioning)</tt>	Return a new dstream in which each rdd is generated by applying mappartitions() to each rdds of this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L112'>mapPartitionsWithIndex</a>(f,preservesPartitioning)</tt>	Return a new dstream in which each rdd is generated by applying mappartitionswithindex() to each rdds of this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L119'>reduce</a>(func)</tt>	Return a new dstream in which each rdd has a single element generated by reducing each rdd of this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L126'>reduceByKey</a>(func,numPartitions)</tt>	Return a new dstream by applying reducebykey to each rdd.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L134'>combineByKey</a>(createCombiner,mergeValue,mergeCombiners,numPartitions)</tt>	Return a new dstream by applying combinebykey to each rdd.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L146'>partitionBy</a>(numPartitions,partitionFunc)</tt>	Return a copy of the dstream in which each rdd are partitioned using the specified partitioner.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L153'>foreachRDD</a>(func)</tt>	Apply a function to each rdd in this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L164'>pprint</a>(num)</tt>	Print the first num elements of each rdd generated in this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L183'>mapValues</a>(f)</tt>	Return a new dstream by applying a map function to the value of each key-value pairs in this dstream without changing the key.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L191'>flatMapValues</a>(f)</tt>	Return a new dstream by applying a flatmap function to the value of each key-value pairs in this dstream without changing the key.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L199'>glom</a>()</tt>	Return a new dstream in which rdd is generated by applying glom() to rdd of this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L208'>cache</a>()</tt>	Persist the rdds of this dstream with the default storage level (c{memory_only}).
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L217'>persist</a>(storageLevel)</tt>	Persist the rdds of this dstream with the given storage level.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L226'>checkpoint</a>(interval)</tt>	Enable periodic checkpointing of rdds of this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L237'>groupByKey</a>(numPartitions)</tt>	Return a new dstream by applying groupbykey on each rdd.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L245'>countByValue</a>()</tt>	Return a new dstream in which each rdd contains the counts of each distinct value in each rdd of this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L252'>saveAsTextFiles</a>(prefix,suffix)</tt>	Save each rdd in this dstream as at text file using string representation of elements.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L285'>transform</a>(func)</tt>	Return a new dstream in which each rdd is generated by applying a function on each rdd of this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L299'>transformWith</a>(func,other,keepSerializer)</tt>	Return a new dstream in which each rdd is generated by applying a function on each rdd of this dstream and 'other' dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L317'>repartition</a>(numPartitions)</tt>	Return a new dstream with an increased or decreased level of parallelism.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L323'>_slideDuration</a>()</tt>	Return the slideduration in seconds of this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L330'>union</a>(other)</tt>	Return a new dstream by unifying data of another dstream with this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L341'>cogroup</a>(other,numPartitions)</tt>	Return a new dstream by applying 'cogroup' between rdds of this dstream and other dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L352'>join</a>(other,numPartitions)</tt>	Return a new dstream by applying 'join' between rdds of this dstream and other dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L364'>leftOuterJoin</a>(other,numPartitions)</tt>	Return a new dstream by applying 'left outer join' between rdds of this dstream and other dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L376'>rightOuterJoin</a>(other,numPartitions)</tt>	Return a new dstream by applying 'right outer join' between rdds of this dstream and other dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L388'>fullOuterJoin</a>(other,numPartitions)</tt>	Return a new dstream by applying 'full outer join' between rdds of this dstream and other dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L400'>_jtime</a>(timestamp)</tt>	Convert datetime or unix_timestamp into time.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L407'>slice</a>(begin,end)</tt>	Return all the rdds between 'begin' to 'end' both included begin, end could be datetime.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L425'>window</a>(windowDuration,slideDuration)</tt>	Return a new dstream in which each rdd contains all the elements in seen in a sliding window of time over this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L443'>reduceByWindow</a>(reduceFunc,invReduceFunc,windowDuration,slideDuration)</tt>	Return a new dstream in which each rdd has a single element generated by reducing all elements in a sliding window over this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L471'>countByWindow</a>(windowDuration,slideDuration)</tt>	Return a new dstream in which each rdd has a single element generated by counting the number of elements in a window over this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L483'>countByValueAndWindow</a>(windowDuration,slideDuration,numPartitions)</tt>	Return a new dstream in which each rdd contains the count of distinct elements in rdds in a sliding window over this dstream.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L500'>groupByKeyAndWindow</a>(windowDuration,slideDuration,numPartitions)</tt>	Return a new dstream by applying groupbykey over a sliding window.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L517'>reduceByKeyAndWindow</a>(func,invFunc,windowDuration,slideDuration)</tt>	Return a new dstream by applying incremental reducebykey over a sliding window.
<tt style='background-color:#E8E8E8;'> streaming.DStream <a href=' /streaming/dstream.py#L574'>updateStateByKey</a>(updateFunc,numPartitions,initialRDD)</tt>	Return a new "state" dstream where the state for each key is updated by applying the given function on the previous state of the key and the new values of the key.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L50'>__init__</a>(sparkContext,batchDuration,jssc)</tt>	Create a new streamingcontext.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L67'>_jduration</a>(seconds)</tt>	Create duration object given number of seconds.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L104'>getOrCreate</a>(cls,checkpointPath,setupFunc)</tt>	Either recreate a streamingcontext from checkpoint data or create a new streamingcontext.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L139'>getActive</a>(cls)</tt>	Return either the currently active streamingcontext (i e if there is a context started.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L160'>getActiveOrCreate</a>(cls,checkpointPath,setupFunc)</tt>	Either return the active streamingcontext i e currently started but not stopped.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L185'>sparkContext</a>()</tt>	Return sparkcontext which is associated with this streamingcontext.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L192'>start</a>()</tt>	Start the execution of the streams.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L199'>awaitTermination</a>(timeout)</tt>	Wait for the execution to stop.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L210'>awaitTerminationOrTimeout</a>(timeout)</tt>	Wait for the execution to stop return true if it's stopped or.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L220'>stop</a>(stopSparkContext,stopGraceFully)</tt>	Stop the execution of the streams with option of ensuring all received data has been processed.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L234'>remember</a>(duration)</tt>	Set each dstreams in this context to remember rdds it generated in the last given duration.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L248'>checkpoint</a>(directory)</tt>	Sets the context to periodically checkpoint the dstream operations for master fault-tolerance.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L258'>socketTextStream</a>(hostname,port,storageLevel)</tt>	Create an input from tcp source hostname port data is received using.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L272'>textFileStream</a>(directory)</tt>	Create an input stream that monitors a hadoop-compatible file system for new files and reads them as text files.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L281'>binaryRecordsStream</a>(directory,recordLength)</tt>	Create an input stream that monitors a hadoop-compatible file system for new files and reads them as flat binary files with records of.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L302'>queueStream</a>(rdds,oneAtATime,default)</tt>	Create an input stream from an queue of rdds or list in each batch.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L331'>transform</a>(dstreams,transformFunc)</tt>	Create a new dstream in which each rdd is generated by applying a function on rdds of the dstreams.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L347'>union</a>()</tt>	Create a unified dstream from multiple dstreams of the same type and same slide duration.
<tt style='background-color:#E8E8E8;'> streaming.StreamingContext <a href=' /streaming/context.py#L364'>addStreamingListener</a>(streamingListener)</tt>	Add a [[org apache spark streaming scheduler streaminglistener]] object for.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L143'>__init__</a>(rank,maxIter,regParam,numUserBlocks)</tt>	__init__(self rank=10 maxiter=10 regparam=0 1 numuserblocks=10 numitemblocks=10 implicitprefs=false alpha=1 0 usercol="user", itemcol="item", seed=none ratingcol="rating", nonnegative=false checkpointinterval=10 intermediatestoragelevel="memory_and_disk", finalstoragelevel="memory_and_disk", coldstartstrategy="nan").
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L166'>setParams</a>(rank,maxIter,regParam,numUserBlocks)</tt>	Setparams(self rank=10 maxiter=10 regparam=0 1 numuserblocks=10 numitemblocks=10 implicitprefs=false alpha=1 0 usercol="user", itemcol="item", seed=none ratingcol="rating", nonnegative=false checkpointinterval=10 intermediatestoragelevel="memory_and_disk", finalstoragelevel="memory_and_disk", coldstartstrategy="nan").
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L187'>setRank</a>(value)</tt>	Sets the value of :py attr rank.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L194'>getRank</a>()</tt>	Gets the value of rank or its default value.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L201'>setNumUserBlocks</a>(value)</tt>	Sets the value of :py attr numuserblocks.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L208'>getNumUserBlocks</a>()</tt>	Gets the value of numuserblocks or its default value.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L215'>setNumItemBlocks</a>(value)</tt>	Sets the value of :py attr numitemblocks.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L222'>getNumItemBlocks</a>()</tt>	Gets the value of numitemblocks or its default value.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L229'>setNumBlocks</a>(value)</tt>	Sets both :py attr numuserblocks and :py attr numitemblocks to the specific value.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L237'>setImplicitPrefs</a>(value)</tt>	Sets the value of :py attr implicitprefs.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L244'>getImplicitPrefs</a>()</tt>	Gets the value of implicitprefs or its default value.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L251'>setAlpha</a>(value)</tt>	Sets the value of :py attr alpha.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L258'>getAlpha</a>()</tt>	Gets the value of alpha or its default value.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L265'>setUserCol</a>(value)</tt>	Sets the value of :py attr usercol.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L272'>getUserCol</a>()</tt>	Gets the value of usercol or its default value.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L279'>setItemCol</a>(value)</tt>	Sets the value of :py attr itemcol.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L286'>getItemCol</a>()</tt>	Gets the value of itemcol or its default value.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L293'>setRatingCol</a>(value)</tt>	Sets the value of :py attr ratingcol.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L300'>getRatingCol</a>()</tt>	Gets the value of ratingcol or its default value.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L307'>setNonnegative</a>(value)</tt>	Sets the value of :py attr nonnegative.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L314'>getNonnegative</a>()</tt>	Gets the value of nonnegative or its default value.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L321'>setIntermediateStorageLevel</a>(value)</tt>	Sets the value of :py attr intermediatestoragelevel.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L328'>getIntermediateStorageLevel</a>()</tt>	Gets the value of intermediatestoragelevel or its default value.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L335'>setFinalStorageLevel</a>(value)</tt>	Sets the value of :py attr finalstoragelevel.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L342'>getFinalStorageLevel</a>()</tt>	Gets the value of finalstoragelevel or its default value.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L349'>setColdStartStrategy</a>(value)</tt>	Sets the value of :py attr coldstartstrategy.
<tt style='background-color:#E8E8E8;'> ml.ALS <a href=' /ml/recommendation.py#L356'>getColdStartStrategy</a>()</tt>	Gets the value of coldstartstrategy or its default value.
<tt style='background-color:#E8E8E8;'> ml.ALSModel <a href=' /ml/recommendation.py#L371'>rank</a>()</tt>	Rank of the matrix factorization model.
<tt style='background-color:#E8E8E8;'> ml.ALSModel <a href=' /ml/recommendation.py#L377'>userFactors</a>()</tt>	A dataframe that stores user factors in two columns id and.
<tt style='background-color:#E8E8E8;'> ml.ALSModel <a href=' /ml/recommendation.py#L386'>itemFactors</a>()</tt>	A dataframe that stores item factors in two columns id and.
<tt style='background-color:#E8E8E8;'> ml.ALSModel <a href=' /ml/recommendation.py#L395'>recommendForAllUsers</a>(numItems)</tt>	Returns top numitems items recommended for each user for all users.
<tt style='background-color:#E8E8E8;'> ml.ALSModel <a href=' /ml/recommendation.py#L406'>recommendForAllItems</a>(numUsers)</tt>	Returns top numusers users recommended for each item for all items.
<tt style='background-color:#E8E8E8;'> ml. <a href=' /ml/util.py#L30'>_jvm</a>()</tt>	Returns the jvm view associated with sparkcontext must be called.
<tt style='background-color:#E8E8E8;'> ml.Identifiable <a href=' /ml/util.py#L54'>_randomUID</a>(cls)</tt>	Generate a unique unicode id for the object the default implementation.
<tt style='background-color:#E8E8E8;'> ml.MLWriter <a href=' /ml/util.py#L71'>save</a>(path)</tt>	Save the ml instance to the input path.
<tt style='background-color:#E8E8E8;'> ml.MLWriter <a href=' /ml/util.py#L75'>overwrite</a>()</tt>	Overwrites if the output path already exists.
<tt style='background-color:#E8E8E8;'> ml.MLWriter <a href=' /ml/util.py#L79'>context</a>(sqlContext)</tt>	Sets the sql context to use for saving.
<tt style='background-color:#E8E8E8;'> ml.MLWriter <a href=' /ml/util.py#L86'>session</a>(sparkSession)</tt>	Sets the spark session to use for saving.
<tt style='background-color:#E8E8E8;'> ml.JavaMLWriter <a href=' /ml/util.py#L102'>save</a>(path)</tt>	Save the ml instance to the input path.
<tt style='background-color:#E8E8E8;'> ml.JavaMLWriter <a href=' /ml/util.py#L108'>overwrite</a>()</tt>	Overwrites if the output path already exists.
<tt style='background-color:#E8E8E8;'> ml.JavaMLWriter <a href=' /ml/util.py#L113'>context</a>(sqlContext)</tt>	Sets the sql context to use for saving.
<tt style='background-color:#E8E8E8;'> ml.JavaMLWriter <a href=' /ml/util.py#L122'>session</a>(sparkSession)</tt>	Sets the spark session to use for saving.
<tt style='background-color:#E8E8E8;'> ml.MLWritable <a href=' /ml/util.py#L136'>write</a>()</tt>	Returns an mlwriter instance for this ml instance.
<tt style='background-color:#E8E8E8;'> ml.MLWritable <a href=' /ml/util.py#L140'>save</a>(path)</tt>	Save this ml instance to the given path a shortcut of write() save path.
<tt style='background-color:#E8E8E8;'> ml.JavaMLWritable <a href=' /ml/util.py#L151'>write</a>()</tt>	Returns an mlwriter instance for this ml instance.
<tt style='background-color:#E8E8E8;'> ml.MLReader <a href=' /ml/util.py#L164'>load</a>(path)</tt>	Load the ml instance from the input path.
<tt style='background-color:#E8E8E8;'> ml.MLReader <a href=' /ml/util.py#L168'>context</a>(sqlContext)</tt>	Sets the sql context to use for loading.
<tt style='background-color:#E8E8E8;'> ml.MLReader <a href=' /ml/util.py#L175'>session</a>(sparkSession)</tt>	Sets the spark session to use for loading.
<tt style='background-color:#E8E8E8;'> ml.JavaMLReader <a href=' /ml/util.py#L190'>load</a>(path)</tt>	Load the ml instance from the input path.
<tt style='background-color:#E8E8E8;'> ml.JavaMLReader <a href=' /ml/util.py#L200'>context</a>(sqlContext)</tt>	Sets the sql context to use for loading.
<tt style='background-color:#E8E8E8;'> ml.JavaMLReader <a href=' /ml/util.py#L209'>session</a>(sparkSession)</tt>	Sets the spark session to use for loading.
<tt style='background-color:#E8E8E8;'> ml.JavaMLReader <a href=' /ml/util.py#L214'>_java_loader_class</a>(cls,clazz)</tt>	Returns the full class name of the java ml instance the default.
<tt style='background-color:#E8E8E8;'> ml.JavaMLReader <a href=' /ml/util.py#L227'>_load_java_obj</a>(cls,clazz)</tt>	Load the peer java object of the ml instance.
<tt style='background-color:#E8E8E8;'> ml.MLReadable <a href=' /ml/util.py#L245'>read</a>(cls)</tt>	Returns an mlreader instance for this class.
<tt style='background-color:#E8E8E8;'> ml.MLReadable <a href=' /ml/util.py#L250'>load</a>(cls,path)</tt>	Reads an ml instance from the input path a shortcut of read() load path.
<tt style='background-color:#E8E8E8;'> ml.JavaMLReadable <a href=' /ml/util.py#L262'>read</a>(cls)</tt>	Returns an mlreader instance for this class.
<tt style='background-color:#E8E8E8;'> ml.JavaPredictionModel <a href=' /ml/util.py#L275'>numFeatures</a>()</tt>	Returns the number of features the model was trained on if unknown returns -1.
<tt style='background-color:#E8E8E8;'> ml. <a href=' /ml/common.py#L60'>_to_java_object_rdd</a>(rdd)</tt>	Return an javardd of object by unpickling it will convert each python object into java object by pyrolite whenever the.
<tt style='background-color:#E8E8E8;'> ml. <a href=' /ml/common.py#L70'>_py2java</a>(sc,obj)</tt>	Convert python object into java.
<tt style='background-color:#E8E8E8;'> ml. <a href=' /ml/common.py#L118'>callJavaFunc</a>(sc,func)</tt>	Call java function.
<tt style='background-color:#E8E8E8;'> ml. <a href=' /ml/common.py#L124'>inherit_doc</a>(cls)</tt>	A decorator that makes a class inherit documentation from its parents.
<tt style='background-color:#E8E8E8;'> ml.ClusteringSummary <a href=' /ml/clustering.py#L39'>predictionCol</a>()</tt>	Name for column of predicted clusters in predictions.
<tt style='background-color:#E8E8E8;'> ml.ClusteringSummary <a href=' /ml/clustering.py#L47'>predictions</a>()</tt>	Dataframe produced by the model's transform method.
<tt style='background-color:#E8E8E8;'> ml.ClusteringSummary <a href=' /ml/clustering.py#L55'>featuresCol</a>()</tt>	Name for column of features in predictions.
<tt style='background-color:#E8E8E8;'> ml.ClusteringSummary <a href=' /ml/clustering.py#L63'>k</a>()</tt>	The number of clusters the model was trained with.
<tt style='background-color:#E8E8E8;'> ml.ClusteringSummary <a href=' /ml/clustering.py#L71'>cluster</a>()</tt>	Dataframe of predicted cluster centers for each training data point.
<tt style='background-color:#E8E8E8;'> ml.ClusteringSummary <a href=' /ml/clustering.py#L79'>clusterSizes</a>()</tt>	Size of number of data points in each cluster.
<tt style='background-color:#E8E8E8;'> ml.GaussianMixtureModel <a href=' /ml/clustering.py#L95'>weights</a>()</tt>	Weight for each gaussian distribution in the mixture.
<tt style='background-color:#E8E8E8;'> ml.GaussianMixtureModel <a href=' /ml/clustering.py#L105'>gaussiansDF</a>()</tt>	Retrieve gaussian distributions as a dataframe.
<tt style='background-color:#E8E8E8;'> ml.GaussianMixtureModel <a href=' /ml/clustering.py#L115'>hasSummary</a>()</tt>	Indicates whether a training summary exists for this model instance.
<tt style='background-color:#E8E8E8;'> ml.GaussianMixtureModel <a href=' /ml/clustering.py#L124'>summary</a>()</tt>	Gets summary e g cluster assignments cluster sizes of the model trained on the.
<tt style='background-color:#E8E8E8;'> ml.GaussianMixture <a href=' /ml/clustering.py#L216'>__init__</a>(featuresCol,predictionCol,k,probabilityCol)</tt>	__init__(self featurescol="features", predictioncol="prediction", k=2 probabilitycol="probability", tol=0 01 maxiter=100 seed=none).
<tt style='background-color:#E8E8E8;'> ml.GaussianMixture <a href=' /ml/clustering.py#L233'>setParams</a>(featuresCol,predictionCol,k,probabilityCol)</tt>	Setparams(self featurescol="features", predictioncol="prediction", k=2 probabilitycol="probability", tol=0 01 maxiter=100 seed=none).
<tt style='background-color:#E8E8E8;'> ml.GaussianMixture <a href=' /ml/clustering.py#L246'>setK</a>(value)</tt>	Sets the value of :py attr k.
<tt style='background-color:#E8E8E8;'> ml.GaussianMixture <a href=' /ml/clustering.py#L253'>getK</a>()</tt>	Gets the value of k.
<tt style='background-color:#E8E8E8;'> ml.GaussianMixtureSummary <a href=' /ml/clustering.py#L270'>probabilityCol</a>()</tt>	Name for column of predicted probability of each cluster in predictions.
<tt style='background-color:#E8E8E8;'> ml.GaussianMixtureSummary <a href=' /ml/clustering.py#L278'>probability</a>()</tt>	Dataframe of probabilities of each cluster for each training data point.
<tt style='background-color:#E8E8E8;'> ml.GaussianMixtureSummary <a href=' /ml/clustering.py#L286'>logLikelihood</a>()</tt>	Total log-likelihood for this model on the given data.
<tt style='background-color:#E8E8E8;'> ml.KMeansModel <a href=' /ml/clustering.py#L313'>clusterCenters</a>()</tt>	Get the cluster centers represented as a list of numpy arrays.
<tt style='background-color:#E8E8E8;'> ml.KMeansModel <a href=' /ml/clustering.py#L318'>computeCost</a>(dataset)</tt>	Return the k-means cost sum of squared distances of points to their nearest center for this model on the given data.
<tt style='background-color:#E8E8E8;'> ml.KMeansModel <a href=' /ml/clustering.py#L326'>hasSummary</a>()</tt>	Indicates whether a training summary exists for this model instance.
<tt style='background-color:#E8E8E8;'> ml.KMeansModel <a href=' /ml/clustering.py#L334'>summary</a>()</tt>	Gets summary e g cluster assignments cluster sizes of the model trained on the.
<tt style='background-color:#E8E8E8;'> ml.KMeans <a href=' /ml/clustering.py#L407'>__init__</a>(featuresCol,predictionCol,k,initMode)</tt>	__init__(self featurescol="features", predictioncol="prediction", k=2 initmode="k-means||", initsteps=2 tol=1e-4 maxiter=20 seed=none).
<tt style='background-color:#E8E8E8;'> ml.KMeans <a href=' /ml/clustering.py#L423'>setParams</a>(featuresCol,predictionCol,k,initMode)</tt>	Setparams(self featurescol="features", predictioncol="prediction", k=2 initmode="k-means||", initsteps=2 tol=1e-4 maxiter=20 seed=none) sets params for kmeans.
<tt style='background-color:#E8E8E8;'> ml.KMeans <a href=' /ml/clustering.py#L436'>setK</a>(value)</tt>	Sets the value of :py attr k.
<tt style='background-color:#E8E8E8;'> ml.KMeans <a href=' /ml/clustering.py#L443'>getK</a>()</tt>	Gets the value of k.
<tt style='background-color:#E8E8E8;'> ml.KMeans <a href=' /ml/clustering.py#L450'>setInitMode</a>(value)</tt>	Sets the value of :py attr initmode.
<tt style='background-color:#E8E8E8;'> ml.KMeans <a href=' /ml/clustering.py#L457'>getInitMode</a>()</tt>	Gets the value of initmode.
<tt style='background-color:#E8E8E8;'> ml.KMeans <a href=' /ml/clustering.py#L464'>setInitSteps</a>(value)</tt>	Sets the value of :py attr initsteps.
<tt style='background-color:#E8E8E8;'> ml.KMeans <a href=' /ml/clustering.py#L471'>getInitSteps</a>()</tt>	Gets the value of initsteps.
<tt style='background-color:#E8E8E8;'> ml.BisectingKMeansModel <a href=' /ml/clustering.py#L486'>clusterCenters</a>()</tt>	Get the cluster centers represented as a list of numpy arrays.
<tt style='background-color:#E8E8E8;'> ml.BisectingKMeansModel <a href=' /ml/clustering.py#L491'>computeCost</a>(dataset)</tt>	Computes the sum of squared distances between the input points and their corresponding cluster centers.
<tt style='background-color:#E8E8E8;'> ml.BisectingKMeansModel <a href=' /ml/clustering.py#L499'>hasSummary</a>()</tt>	Indicates whether a training summary exists for this model instance.
<tt style='background-color:#E8E8E8;'> ml.BisectingKMeansModel <a href=' /ml/clustering.py#L507'>summary</a>()</tt>	Gets summary e g cluster assignments cluster sizes of the model trained on the.
<tt style='background-color:#E8E8E8;'> ml.BisectingKMeans <a href=' /ml/clustering.py#L583'>__init__</a>(featuresCol,predictionCol,maxIter,seed)</tt>	__init__(self featurescol="features", predictioncol="prediction", maxiter=20 seed=none k=4 mindivisibleclustersize=1 0).
<tt style='background-color:#E8E8E8;'> ml.BisectingKMeans <a href=' /ml/clustering.py#L597'>setParams</a>(featuresCol,predictionCol,maxIter,seed)</tt>	Setparams(self featurescol="features", predictioncol="prediction", maxiter=20 seed=none k=4 mindivisibleclustersize=1 0).
<tt style='background-color:#E8E8E8;'> ml.BisectingKMeans <a href=' /ml/clustering.py#L609'>setK</a>(value)</tt>	Sets the value of :py attr k.
<tt style='background-color:#E8E8E8;'> ml.BisectingKMeans <a href=' /ml/clustering.py#L616'>getK</a>()</tt>	Gets the value of k or its default value.
<tt style='background-color:#E8E8E8;'> ml.BisectingKMeans <a href=' /ml/clustering.py#L623'>setMinDivisibleClusterSize</a>(value)</tt>	Sets the value of :py attr mindivisibleclustersize.
<tt style='background-color:#E8E8E8;'> ml.BisectingKMeans <a href=' /ml/clustering.py#L630'>getMinDivisibleClusterSize</a>()</tt>	Gets the value of mindivisibleclustersize or its default value.
<tt style='background-color:#E8E8E8;'> ml.LDAModel <a href=' /ml/clustering.py#L662'>isDistributed</a>()</tt>	Indicates whether this instance is of type distributedldamodel.
<tt style='background-color:#E8E8E8;'> ml.LDAModel <a href=' /ml/clustering.py#L669'>vocabSize</a>()</tt>	Vocabulary size number of terms or words in the vocabulary.
<tt style='background-color:#E8E8E8;'> ml.LDAModel <a href=' /ml/clustering.py#L674'>topicsMatrix</a>()</tt>	Inferred topics where each topic is represented by a distribution over terms.
<tt style='background-color:#E8E8E8;'> ml.LDAModel <a href=' /ml/clustering.py#L687'>logLikelihood</a>(dataset)</tt>	Calculates a lower bound on the log likelihood of the entire corpus.
<tt style='background-color:#E8E8E8;'> ml.LDAModel <a href=' /ml/clustering.py#L699'>logPerplexity</a>(dataset)</tt>	Calculate an upper bound on perplexity lower is better.
<tt style='background-color:#E8E8E8;'> ml.LDAModel <a href=' /ml/clustering.py#L711'>describeTopics</a>(maxTermsPerTopic)</tt>	Return the topics described by their top-weighted terms.
<tt style='background-color:#E8E8E8;'> ml.LDAModel <a href=' /ml/clustering.py#L718'>estimatedDocConcentration</a>()</tt>	Value for :py attr lda docconcentration estimated from data.
<tt style='background-color:#E8E8E8;'> ml.DistributedLDAModel <a href=' /ml/clustering.py#L740'>toLocal</a>()</tt>	Convert this distributed model to a local representation this discards info about the.
<tt style='background-color:#E8E8E8;'> ml.DistributedLDAModel <a href=' /ml/clustering.py#L750'>trainingLogLikelihood</a>()</tt>	Log likelihood of the observed tokens in the training set given the current parameter estimates.
<tt style='background-color:#E8E8E8;'> ml.DistributedLDAModel <a href=' /ml/clustering.py#L767'>logPrior</a>()</tt>	Log probability of the current parameter estimate.
<tt style='background-color:#E8E8E8;'> ml.DistributedLDAModel <a href=' /ml/clustering.py#L775'>getCheckpointFiles</a>()</tt>	If using checkpointing and :py attr lda keeplastcheckpoint is set to true then there may.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L900'>__init__</a>(featuresCol,maxIter,seed,checkpointInterval)</tt>	__init__(self featurescol="features", maxiter=20 seed=none checkpointinterval=10 k=10 optimizer="online", learningoffset=1024 0 learningdecay=0 51 subsamplingrate=0 05 optimizedocconcentration=true docconcentration=none topicconcentration=none topicdistributioncol="topicdistribution", keeplastcheckpoint=true):.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L928'>setParams</a>(featuresCol,maxIter,seed,checkpointInterval)</tt>	Setparams(self featurescol="features", maxiter=20 seed=none checkpointinterval=10 k=10 optimizer="online", learningoffset=1024 0 learningdecay=0 51 subsamplingrate=0 05 optimizedocconcentration=true docconcentration=none topicconcentration=none topicdistributioncol="topicdistribution", keeplastcheckpoint=true):.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L947'>setK</a>(value)</tt>	Sets the value of :py attr k.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L958'>getK</a>()</tt>	Gets the value of :py attr k or its default value.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L965'>setOptimizer</a>(value)</tt>	Sets the value of :py attr optimizer.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L977'>getOptimizer</a>()</tt>	Gets the value of :py attr optimizer or its default value.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L984'>setLearningOffset</a>(value)</tt>	Sets the value of :py attr learningoffset.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L995'>getLearningOffset</a>()</tt>	Gets the value of :py attr learningoffset or its default value.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L1002'>setLearningDecay</a>(value)</tt>	Sets the value of :py attr learningdecay.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L1013'>getLearningDecay</a>()</tt>	Gets the value of :py attr learningdecay or its default value.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L1020'>setSubsamplingRate</a>(value)</tt>	Sets the value of :py attr subsamplingrate.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L1031'>getSubsamplingRate</a>()</tt>	Gets the value of :py attr subsamplingrate or its default value.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L1038'>setOptimizeDocConcentration</a>(value)</tt>	Sets the value of :py attr optimizedocconcentration.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L1049'>getOptimizeDocConcentration</a>()</tt>	Gets the value of :py attr optimizedocconcentration or its default value.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L1056'>setDocConcentration</a>(value)</tt>	Sets the value of :py attr docconcentration.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L1067'>getDocConcentration</a>()</tt>	Gets the value of :py attr docconcentration or its default value.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L1074'>setTopicConcentration</a>(value)</tt>	Sets the value of :py attr topicconcentration.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L1085'>getTopicConcentration</a>()</tt>	Gets the value of :py attr topicconcentration or its default value.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L1092'>setTopicDistributionCol</a>(value)</tt>	Sets the value of :py attr topicdistributioncol.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L1103'>getTopicDistributionCol</a>()</tt>	Gets the value of :py attr topicdistributioncol or its default value.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L1110'>setKeepLastCheckpoint</a>(value)</tt>	Sets the value of :py attr keeplastcheckpoint.
<tt style='background-color:#E8E8E8;'> ml.LDA <a href=' /ml/clustering.py#L1121'>getKeepLastCheckpoint</a>()</tt>	Gets the value of :py attr keeplastcheckpoint or its default value.
<tt style='background-color:#E8E8E8;'> ml.HasSupport <a href=' /ml/fpm.py#L39'>setMinSupport</a>(value)</tt>	Sets the value of :py attr minsupport.
<tt style='background-color:#E8E8E8;'> ml.HasSupport <a href=' /ml/fpm.py#L45'>getMinSupport</a>()</tt>	Gets the value of minsupport or its default value.
<tt style='background-color:#E8E8E8;'> ml.HasConfidence <a href=' /ml/fpm.py#L64'>setMinConfidence</a>(value)</tt>	Sets the value of :py attr minconfidence.
<tt style='background-color:#E8E8E8;'> ml.HasConfidence <a href=' /ml/fpm.py#L70'>getMinConfidence</a>()</tt>	Gets the value of minconfidence or its default value.
<tt style='background-color:#E8E8E8;'> ml.HasItemsCol <a href=' /ml/fpm.py#L85'>setItemsCol</a>(value)</tt>	Sets the value of :py attr itemscol.
<tt style='background-color:#E8E8E8;'> ml.HasItemsCol <a href=' /ml/fpm.py#L91'>getItemsCol</a>()</tt>	Gets the value of itemscol or its default value.
<tt style='background-color:#E8E8E8;'> ml.FPGrowthModel <a href=' /ml/fpm.py#L106'>freqItemsets</a>()</tt>	Dataframe with two columns * items - itemset of the same type as the input column.
<tt style='background-color:#E8E8E8;'> ml.FPGrowthModel <a href=' /ml/fpm.py#L116'>associationRules</a>()</tt>	Data with three columns * antecedent - array of the same type as the input column.
<tt style='background-color:#E8E8E8;'> ml.FPGrowth <a href=' /ml/fpm.py#L190'>__init__</a>(minSupport,minConfidence,itemsCol,predictionCol)</tt>	__init__(self minsupport=0 3 minconfidence=0 8 itemscol="items", predictioncol="prediction", numpartitions=none).
<tt style='background-color:#E8E8E8;'> ml.FPGrowth <a href=' /ml/fpm.py#L204'>setParams</a>(minSupport,minConfidence,itemsCol,predictionCol)</tt>	Setparams(self minsupport=0 3 minconfidence=0 8 itemscol="items", predictioncol="prediction", numpartitions=none).
<tt style='background-color:#E8E8E8;'> ml.Estimator <a href=' /ml/base.py#L35'>_fit</a>(dataset)</tt>	Fits a model to the input dataset this is called by the default implementation of fit.
<tt style='background-color:#E8E8E8;'> ml.Estimator <a href=' /ml/base.py#L45'>fit</a>(dataset,params)</tt>	Fits a model to the input dataset with optional parameters.
<tt style='background-color:#E8E8E8;'> ml.Transformer <a href=' /ml/base.py#L80'>_transform</a>(dataset)</tt>	Transforms the input dataset.
<tt style='background-color:#E8E8E8;'> ml.Transformer <a href=' /ml/base.py#L90'>transform</a>(dataset,params)</tt>	Transforms the input dataset with optional parameters.
<tt style='background-color:#E8E8E8;'> ml.LinearRegression <a href=' /ml/regression.py#L98'>__init__</a>(featuresCol,labelCol,predictionCol,maxIter)</tt>	__init__(self featurescol="features", labelcol="label", predictioncol="prediction", maxiter=100 regparam=0 0 elasticnetparam=0 0 tol=1e-6 fitintercept=true standardization=true solver="auto", weightcol=none aggregationdepth=2).
<tt style='background-color:#E8E8E8;'> ml.LinearRegression <a href=' /ml/regression.py#L114'>setParams</a>(featuresCol,labelCol,predictionCol,maxIter)</tt>	Setparams(self featurescol="features", labelcol="label", predictioncol="prediction", maxiter=100 regparam=0 0 elasticnetparam=0 0 tol=1e-6 fitintercept=true standardization=true solver="auto", weightcol=none aggregationdepth=2).
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionModel <a href=' /ml/regression.py#L155'>summary</a>()</tt>	Gets summary e g residuals mse r-squared of model on.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionModel <a href=' /ml/regression.py#L170'>hasSummary</a>()</tt>	Indicates whether a training summary exists for this model instance.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionModel <a href=' /ml/regression.py#L179'>evaluate</a>(dataset)</tt>	Evaluates the model on a test dataset.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L203'>predictions</a>()</tt>	Dataframe outputted by the model's transform method.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L211'>predictionCol</a>()</tt>	Field in "predictions" which gives the predicted value of the label at each instance.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L220'>labelCol</a>()</tt>	Field in "predictions" which gives the true label of each instance.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L229'>featuresCol</a>()</tt>	Field in "predictions" which gives the features of each instance as a vector.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L238'>explainedVariance</a>()</tt>	Returns the explained variance regression score.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L254'>meanAbsoluteError</a>()</tt>	Returns the mean absolute error which is a risk function corresponding to the expected value of the absolute error.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L268'>meanSquaredError</a>()</tt>	Returns the mean squared error which is a risk function corresponding to the expected value of the squared error.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L282'>rootMeanSquaredError</a>()</tt>	Returns the root mean squared error which is defined as the square root of the mean squared error.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L295'>r2</a>()</tt>	Returns r^2^, the coefficient of determination.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L310'>residuals</a>()</tt>	Residuals label - predicted value.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L318'>numInstances</a>()</tt>	Number of instances in dataframe predictions.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L326'>devianceResiduals</a>()</tt>	The weighted residuals the usual residuals rescaled by the square root of the instance weights.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L335'>coefficientStandardErrors</a>()</tt>	Standard error of estimated coefficients and intercept.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L349'>tValues</a>()</tt>	T-statistic of estimated coefficients and intercept.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionSummary <a href=' /ml/regression.py#L363'>pValues</a>()</tt>	Two-sided p-value of estimated coefficients and intercept.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionTrainingSummary <a href=' /ml/regression.py#L389'>objectiveHistory</a>()</tt>	Objective function scaled loss + regularization at each iteration.
<tt style='background-color:#E8E8E8;'> ml.LinearRegressionTrainingSummary <a href=' /ml/regression.py#L401'>totalIterations</a>()</tt>	Number of training iterations until termination.
<tt style='background-color:#E8E8E8;'> ml.IsotonicRegression <a href=' /ml/regression.py#L456'>__init__</a>(featuresCol,labelCol,predictionCol,weightCol)</tt>	__init__(self featurescol="features", labelcol="label", predictioncol="prediction", weightcol=none isotonic=true featureindex=0):.
<tt style='background-color:#E8E8E8;'> ml.IsotonicRegression <a href=' /ml/regression.py#L470'>setParams</a>(featuresCol,labelCol,predictionCol,weightCol)</tt>	Setparams(self featurescol="features", labelcol="label", predictioncol="prediction", weightcol=none isotonic=true featureindex=0): set the params for isotonicregression.
<tt style='background-color:#E8E8E8;'> ml.IsotonicRegression <a href=' /ml/regression.py#L484'>setIsotonic</a>(value)</tt>	Sets the value of :py attr isotonic.
<tt style='background-color:#E8E8E8;'> ml.IsotonicRegression <a href=' /ml/regression.py#L490'>getIsotonic</a>()</tt>	Gets the value of isotonic or its default value.
<tt style='background-color:#E8E8E8;'> ml.IsotonicRegression <a href=' /ml/regression.py#L496'>setFeatureIndex</a>(value)</tt>	Sets the value of :py attr featureindex.
<tt style='background-color:#E8E8E8;'> ml.IsotonicRegression <a href=' /ml/regression.py#L502'>getFeatureIndex</a>()</tt>	Gets the value of featureindex or its default value.
<tt style='background-color:#E8E8E8;'> ml.IsotonicRegressionModel <a href=' /ml/regression.py#L516'>boundaries</a>()</tt>	Boundaries in increasing order for which predictions are known.
<tt style='background-color:#E8E8E8;'> ml.IsotonicRegressionModel <a href=' /ml/regression.py#L524'>predictions</a>()</tt>	Predictions associated with the boundaries at the same index monotone because of isotonic regression.
<tt style='background-color:#E8E8E8;'> ml.TreeEnsembleParams <a href=' /ml/regression.py#L546'>setSubsamplingRate</a>(value)</tt>	Sets the value of :py attr subsamplingrate.
<tt style='background-color:#E8E8E8;'> ml.TreeEnsembleParams <a href=' /ml/regression.py#L553'>getSubsamplingRate</a>()</tt>	Gets the value of subsamplingrate or its default value.
<tt style='background-color:#E8E8E8;'> ml.TreeRegressorParams <a href=' /ml/regression.py#L575'>setImpurity</a>(value)</tt>	Sets the value of :py attr impurity.
<tt style='background-color:#E8E8E8;'> ml.TreeRegressorParams <a href=' /ml/regression.py#L582'>getImpurity</a>()</tt>	Gets the value of impurity or its default value.
<tt style='background-color:#E8E8E8;'> ml.RandomForestParams <a href=' /ml/regression.py#L607'>setNumTrees</a>(value)</tt>	Sets the value of :py attr numtrees.
<tt style='background-color:#E8E8E8;'> ml.RandomForestParams <a href=' /ml/regression.py#L614'>getNumTrees</a>()</tt>	Gets the value of numtrees or its default value.
<tt style='background-color:#E8E8E8;'> ml.RandomForestParams <a href=' /ml/regression.py#L621'>setFeatureSubsetStrategy</a>(value)</tt>	Sets the value of :py attr featuresubsetstrategy.
<tt style='background-color:#E8E8E8;'> ml.RandomForestParams <a href=' /ml/regression.py#L628'>getFeatureSubsetStrategy</a>()</tt>	Gets the value of featuresubsetstrategy or its default value.
<tt style='background-color:#E8E8E8;'> ml.DecisionTreeRegressor <a href=' /ml/regression.py#L690'>__init__</a>(featuresCol,labelCol,predictionCol,maxDepth)</tt>	__init__(self featurescol="features", labelcol="label", predictioncol="prediction", maxdepth=5 maxbins=32 mininstancespernode=1 mininfogain=0 0 maxmemoryinmb=256 cachenodeids=false checkpointinterval=10 impurity="variance", seed=none variancecol=none).
<tt style='background-color:#E8E8E8;'> ml.DecisionTreeRegressor <a href=' /ml/regression.py#L710'>setParams</a>(featuresCol,labelCol,predictionCol,maxDepth)</tt>	Setparams(self featurescol="features", labelcol="label", predictioncol="prediction", maxdepth=5 maxbins=32 mininstancespernode=1 mininfogain=0 0 maxmemoryinmb=256 cachenodeids=false checkpointinterval=10 impurity="variance", seed=none variancecol=none).
<tt style='background-color:#E8E8E8;'> ml.DecisionTreeModel <a href=' /ml/regression.py#L738'>numNodes</a>()</tt>	Return number of nodes of the decision tree.
<tt style='background-color:#E8E8E8;'> ml.DecisionTreeModel <a href=' /ml/regression.py#L744'>depth</a>()</tt>	Return depth of the decision tree.
<tt style='background-color:#E8E8E8;'> ml.DecisionTreeModel <a href=' /ml/regression.py#L750'>toDebugString</a>()</tt>	Full description of model.
<tt style='background-color:#E8E8E8;'> ml.TreeEnsembleModel <a href=' /ml/regression.py#L768'>trees</a>()</tt>	Trees in this ensemble warning these have null parent estimators.
<tt style='background-color:#E8E8E8;'> ml.TreeEnsembleModel <a href=' /ml/regression.py#L774'>getNumTrees</a>()</tt>	Number of trees in ensemble.
<tt style='background-color:#E8E8E8;'> ml.TreeEnsembleModel <a href=' /ml/regression.py#L780'>treeWeights</a>()</tt>	Return the weights for each tree.
<tt style='background-color:#E8E8E8;'> ml.TreeEnsembleModel <a href=' /ml/regression.py#L786'>totalNumNodes</a>()</tt>	Total number of nodes summed over all trees in the ensemble.
<tt style='background-color:#E8E8E8;'> ml.TreeEnsembleModel <a href=' /ml/regression.py#L792'>toDebugString</a>()</tt>	Full description of model.
<tt style='background-color:#E8E8E8;'> ml.DecisionTreeRegressionModel <a href=' /ml/regression.py#L810'>featureImportances</a>()</tt>	Estimate of the importance of each feature.
<tt style='background-color:#E8E8E8;'> ml.RandomForestRegressor <a href=' /ml/regression.py#L878'>__init__</a>(featuresCol,labelCol,predictionCol,maxDepth)</tt>	__init__(self featurescol="features", labelcol="label", predictioncol="prediction", maxdepth=5 maxbins=32 mininstancespernode=1 mininfogain=0 0 maxmemoryinmb=256 cachenodeids=false checkpointinterval=10 impurity="variance", subsamplingrate=1 0 seed=none numtrees=20 featuresubsetstrategy="auto").
<tt style='background-color:#E8E8E8;'> ml.RandomForestRegressor <a href=' /ml/regression.py#L901'>setParams</a>(featuresCol,labelCol,predictionCol,maxDepth)</tt>	Setparams(self featurescol="features", labelcol="label", predictioncol="prediction", maxdepth=5 maxbins=32 mininstancespernode=1 mininfogain=0 0 maxmemoryinmb=256 cachenodeids=false checkpointinterval=10 impurity="variance", subsamplingrate=1 0 seed=none numtrees=20 featuresubsetstrategy="auto").
<tt style='background-color:#E8E8E8;'> ml.RandomForestRegressionModel <a href=' /ml/regression.py#L931'>trees</a>()</tt>	Trees in this ensemble warning these have null parent estimators.
<tt style='background-color:#E8E8E8;'> ml.RandomForestRegressionModel <a href=' /ml/regression.py#L937'>featureImportances</a>()</tt>	Estimate of the importance of each feature.
<tt style='background-color:#E8E8E8;'> ml.GBTRegressor <a href=' /ml/regression.py#L1006'>__init__</a>(featuresCol,labelCol,predictionCol,maxDepth)</tt>	__init__(self featurescol="features", labelcol="label", predictioncol="prediction", maxdepth=5 maxbins=32 mininstancespernode=1 mininfogain=0 0 maxmemoryinmb=256 cachenodeids=false subsamplingrate=1 0 checkpointinterval=10 losstype="squared", maxiter=20 stepsize=0 1 seed=none impurity="variance").
<tt style='background-color:#E8E8E8;'> ml.GBTRegressor <a href=' /ml/regression.py#L1028'>setParams</a>(featuresCol,labelCol,predictionCol,maxDepth)</tt>	Setparams(self featurescol="features", labelcol="label", predictioncol="prediction", maxdepth=5 maxbins=32 mininstancespernode=1 mininfogain=0 0 maxmemoryinmb=256 cachenodeids=false subsamplingrate=1 0 checkpointinterval=10 losstype="squared", maxiter=20 stepsize=0 1 seed=none impurity="variance").
<tt style='background-color:#E8E8E8;'> ml.GBTRegressor <a href=' /ml/regression.py#L1049'>setLossType</a>(value)</tt>	Sets the value of :py attr losstype.
<tt style='background-color:#E8E8E8;'> ml.GBTRegressor <a href=' /ml/regression.py#L1056'>getLossType</a>()</tt>	Gets the value of losstype or its default value.
<tt style='background-color:#E8E8E8;'> ml.GBTRegressionModel <a href=' /ml/regression.py#L1071'>featureImportances</a>()</tt>	Estimate of the importance of each feature.
<tt style='background-color:#E8E8E8;'> ml.GBTRegressionModel <a href=' /ml/regression.py#L1086'>trees</a>()</tt>	Trees in this ensemble warning these have null parent estimators.
<tt style='background-color:#E8E8E8;'> ml.AFTSurvivalRegression <a href=' /ml/regression.py#L1157'>__init__</a>(featuresCol,labelCol,predictionCol,fitIntercept)</tt>	__init__(self featurescol="features", labelcol="label", predictioncol="prediction", fitintercept=true maxiter=100 tol=1e-6 censorcol="censor", quantileprobabilities=[0 01 0 05 0 1 0 25 0 5 0 75 0 9 0 95 0 99], quantilescol=none aggregationdepth=2).
<tt style='background-color:#E8E8E8;'> ml.AFTSurvivalRegression <a href=' /ml/regression.py#L1177'>setParams</a>(featuresCol,labelCol,predictionCol,fitIntercept)</tt>	Setparams(self featurescol="features", labelcol="label", predictioncol="prediction", fitintercept=true maxiter=100 tol=1e-6 censorcol="censor", quantileprobabilities=[0 01 0 05 0 1 0 25 0 5 0 75 0 9 0 95 0 99], quantilescol=none aggregationdepth=2):.
<tt style='background-color:#E8E8E8;'> ml.AFTSurvivalRegression <a href=' /ml/regression.py#L1195'>setCensorCol</a>(value)</tt>	Sets the value of :py attr censorcol.
<tt style='background-color:#E8E8E8;'> ml.AFTSurvivalRegression <a href=' /ml/regression.py#L1202'>getCensorCol</a>()</tt>	Gets the value of censorcol or its default value.
<tt style='background-color:#E8E8E8;'> ml.AFTSurvivalRegression <a href=' /ml/regression.py#L1209'>setQuantileProbabilities</a>(value)</tt>	Sets the value of :py attr quantileprobabilities.
<tt style='background-color:#E8E8E8;'> ml.AFTSurvivalRegression <a href=' /ml/regression.py#L1216'>getQuantileProbabilities</a>()</tt>	Gets the value of quantileprobabilities or its default value.
<tt style='background-color:#E8E8E8;'> ml.AFTSurvivalRegression <a href=' /ml/regression.py#L1223'>setQuantilesCol</a>(value)</tt>	Sets the value of :py attr quantilescol.
<tt style='background-color:#E8E8E8;'> ml.AFTSurvivalRegression <a href=' /ml/regression.py#L1230'>getQuantilesCol</a>()</tt>	Gets the value of quantilescol or its default value.
<tt style='background-color:#E8E8E8;'> ml.AFTSurvivalRegressionModel <a href=' /ml/regression.py#L1263'>scale</a>()</tt>	Model scale paramter.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegression <a href=' /ml/regression.py#L1367'>__init__</a>(labelCol,featuresCol,predictionCol,family)</tt>	__init__(self labelcol="label", featurescol="features", predictioncol="prediction", family="gaussian", link=none fitintercept=true maxiter=25 tol=1e-6 regparam=0 0 weightcol=none solver="irls", linkpredictioncol=none variancepower=0 0 linkpower=none).
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegression <a href=' /ml/regression.py#L1387'>setParams</a>(labelCol,featuresCol,predictionCol,family)</tt>	Setparams(self labelcol="label", featurescol="features", predictioncol="prediction", family="gaussian", link=none fitintercept=true maxiter=25 tol=1e-6 regparam=0 0 weightcol=none solver="irls", linkpredictioncol=none variancepower=0 0 linkpower=none).
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegression <a href=' /ml/regression.py#L1406'>setFamily</a>(value)</tt>	Sets the value of :py attr family.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegression <a href=' /ml/regression.py#L1413'>getFamily</a>()</tt>	Gets the value of family or its default value.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegression <a href=' /ml/regression.py#L1420'>setLinkPredictionCol</a>(value)</tt>	Sets the value of :py attr linkpredictioncol.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegression <a href=' /ml/regression.py#L1427'>getLinkPredictionCol</a>()</tt>	Gets the value of linkpredictioncol or its default value.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegression <a href=' /ml/regression.py#L1434'>setLink</a>(value)</tt>	Sets the value of :py attr link.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegression <a href=' /ml/regression.py#L1441'>getLink</a>()</tt>	Gets the value of link or its default value.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegression <a href=' /ml/regression.py#L1448'>setVariancePower</a>(value)</tt>	Sets the value of :py attr variancepower.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegression <a href=' /ml/regression.py#L1455'>getVariancePower</a>()</tt>	Gets the value of variancepower or its default value.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegression <a href=' /ml/regression.py#L1462'>setLinkPower</a>(value)</tt>	Sets the value of :py attr linkpower.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegression <a href=' /ml/regression.py#L1469'>getLinkPower</a>()</tt>	Gets the value of linkpower or its default value.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionModel <a href=' /ml/regression.py#L1503'>summary</a>()</tt>	Gets summary e g residuals deviance pvalues of model on.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionModel <a href=' /ml/regression.py#L1518'>hasSummary</a>()</tt>	Indicates whether a training summary exists for this model instance.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionModel <a href=' /ml/regression.py#L1527'>evaluate</a>(dataset)</tt>	Evaluates the model on a test dataset.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionSummary <a href=' /ml/regression.py#L1551'>predictions</a>()</tt>	Predictions output by the model's transform method.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionSummary <a href=' /ml/regression.py#L1559'>predictionCol</a>()</tt>	Field in :py attr predictions which gives the predicted value of each instance.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionSummary <a href=' /ml/regression.py#L1568'>rank</a>()</tt>	The numeric rank of the fitted linear model.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionSummary <a href=' /ml/regression.py#L1576'>degreesOfFreedom</a>()</tt>	Degrees of freedom.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionSummary <a href=' /ml/regression.py#L1584'>residualDegreeOfFreedom</a>()</tt>	The residual degrees of freedom.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionSummary <a href=' /ml/regression.py#L1592'>residualDegreeOfFreedomNull</a>()</tt>	The residual degrees of freedom for the null model.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionSummary <a href=' /ml/regression.py#L1600'>residuals</a>(residualsType)</tt>	Get the residuals of the fitted model by type.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionSummary <a href=' /ml/regression.py#L1610'>nullDeviance</a>()</tt>	The deviance for the null model.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionSummary <a href=' /ml/regression.py#L1618'>deviance</a>()</tt>	The deviance for the fitted model.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionSummary <a href=' /ml/regression.py#L1626'>dispersion</a>()</tt>	The dispersion of the fitted model.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionSummary <a href=' /ml/regression.py#L1637'>aic</a>()</tt>	Akaike's "an information criterion" aic for the fitted model.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionTrainingSummary <a href=' /ml/regression.py#L1656'>numIterations</a>()</tt>	Number of training iterations.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionTrainingSummary <a href=' /ml/regression.py#L1664'>solver</a>()</tt>	The numeric solver used for training.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionTrainingSummary <a href=' /ml/regression.py#L1672'>coefficientStandardErrors</a>()</tt>	Standard error of estimated coefficients and intercept.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionTrainingSummary <a href=' /ml/regression.py#L1683'>tValues</a>()</tt>	T-statistic of estimated coefficients and intercept.
<tt style='background-color:#E8E8E8;'> ml.GeneralizedLinearRegressionTrainingSummary <a href=' /ml/regression.py#L1694'>pValues</a>()</tt>	Two-sided p-value of estimated coefficients and intercept.
<tt style='background-color:#E8E8E8;'> ml.TestParams <a href=' /ml/tests.py#L255'>setParams</a>(seed)</tt>	Setparams(self seed=none) sets params for this test.
<tt style='background-color:#E8E8E8;'> ml.OtherTestParams <a href=' /ml/tests.py#L276'>setParams</a>(seed)</tt>	Setparams(self seed=none) sets params for this test.
<tt style='background-color:#E8E8E8;'> ml.EvaluatorTests <a href=' /ml/tests.py#L410'>test_java_params</a>()</tt>	This tests a bug fixed by spark-18274 which causes multiple copies of a params instance in python to be linked to the same java instance.
<tt style='background-color:#E8E8E8;'> ml.PersistenceTest <a href=' /ml/tests.py#L810'>_compare_params</a>(m1,m2,param)</tt>	Compare 2 ml params instances for the given param and assert both have the same param value and parent.
<tt style='background-color:#E8E8E8;'> ml.PersistenceTest <a href=' /ml/tests.py#L829'>_compare_pipelines</a>(m1,m2)</tt>	Compare 2 ml types asserting that they are equivalent.
<tt style='background-color:#E8E8E8;'> ml.LDATest <a href=' /ml/tests.py#L979'>_compare</a>(m1,m2)</tt>	Temp method for comparing instances.
<tt style='background-color:#E8E8E8;'> ml.JavaClassificationModel <a href=' /ml/classification.py#L54'>numClasses</a>()</tt>	Number of classes values which the label can take.
<tt style='background-color:#E8E8E8;'> ml.LinearSVC <a href=' /ml/classification.py#L111'>__init__</a>(featuresCol,labelCol,predictionCol,maxIter)</tt>	__init__(self featurescol="features", labelcol="label", predictioncol="prediction", maxiter=100 regparam=0 0 tol=1e-6 rawpredictioncol="rawprediction", fitintercept=true standardization=true threshold=0 0 weightcol=none aggregationdepth=2):.
<tt style='background-color:#E8E8E8;'> ml.LinearSVC <a href=' /ml/classification.py#L130'>setParams</a>(featuresCol,labelCol,predictionCol,maxIter)</tt>	Setparams(self featurescol="features", labelcol="label", predictioncol="prediction", maxiter=100 regparam=0 0 tol=1e-6 rawpredictioncol="rawprediction", fitintercept=true standardization=true threshold=0 0 weightcol=none aggregationdepth=2):.
<tt style='background-color:#E8E8E8;'> ml.LinearSVCModel <a href=' /ml/classification.py#L159'>coefficients</a>()</tt>	Model coefficients of linear svm classifier.
<tt style='background-color:#E8E8E8;'> ml.LinearSVCModel <a href=' /ml/classification.py#L167'>intercept</a>()</tt>	Model intercept of linear svm classifier.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegression <a href=' /ml/classification.py#L248'>__init__</a>(featuresCol,labelCol,predictionCol,maxIter)</tt>	__init__(self featurescol="features", labelcol="label", predictioncol="prediction", maxiter=100 regparam=0 0 elasticnetparam=0 0 tol=1e-6 fitintercept=true threshold=0 5 thresholds=none probabilitycol="probability", rawpredictioncol="rawprediction", standardization=true weightcol=none aggregationdepth=2 family="auto").
<tt style='background-color:#E8E8E8;'> ml.LogisticRegression <a href=' /ml/classification.py#L270'>setParams</a>(featuresCol,labelCol,predictionCol,maxIter)</tt>	Setparams(self featurescol="features", labelcol="label", predictioncol="prediction", maxiter=100 regparam=0 0 elasticnetparam=0 0 tol=1e-6 fitintercept=true threshold=0 5 thresholds=none probabilitycol="probability", rawpredictioncol="rawprediction", standardization=true weightcol=none aggregationdepth=2 family="auto").
<tt style='background-color:#E8E8E8;'> ml.LogisticRegression <a href=' /ml/classification.py#L294'>setThreshold</a>(value)</tt>	Sets the value of :py attr threshold.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegression <a href=' /ml/classification.py#L304'>getThreshold</a>()</tt>	Get threshold for binary classification.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegression <a href=' /ml/classification.py#L325'>setThresholds</a>(value)</tt>	Sets the value of :py attr thresholds.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegression <a href=' /ml/classification.py#L335'>getThresholds</a>()</tt>	If :py attr thresholds is set return its value.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegression <a href=' /ml/classification.py#L363'>setFamily</a>(value)</tt>	Sets the value of :py attr family.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegression <a href=' /ml/classification.py#L370'>getFamily</a>()</tt>	Gets the value of :py attr family or its default value.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegressionModel <a href=' /ml/classification.py#L385'>coefficients</a>()</tt>	Model coefficients of binomial logistic regression.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegressionModel <a href=' /ml/classification.py#L394'>intercept</a>()</tt>	Model intercept of binomial logistic regression.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegressionModel <a href=' /ml/classification.py#L419'>summary</a>()</tt>	Gets summary (e g accuracy/precision/recall objective history total iterations) of model.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegressionModel <a href=' /ml/classification.py#L434'>hasSummary</a>()</tt>	Indicates whether a training summary exists for this model instance.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegressionModel <a href=' /ml/classification.py#L443'>evaluate</a>(dataset)</tt>	Evaluates the model on a test dataset.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegressionSummary <a href=' /ml/classification.py#L467'>predictions</a>()</tt>	Dataframe outputted by the model's transform method.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegressionSummary <a href=' /ml/classification.py#L475'>probabilityCol</a>()</tt>	Field in "predictions" which gives the probability of each class as a vector.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegressionSummary <a href=' /ml/classification.py#L484'>labelCol</a>()</tt>	Field in "predictions" which gives the true label of each instance.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegressionSummary <a href=' /ml/classification.py#L493'>featuresCol</a>()</tt>	Field in "predictions" which gives the features of each instance as a vector.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegressionTrainingSummary <a href=' /ml/classification.py#L515'>objectiveHistory</a>()</tt>	Objective function scaled loss + regularization at each iteration.
<tt style='background-color:#E8E8E8;'> ml.LogisticRegressionTrainingSummary <a href=' /ml/classification.py#L524'>totalIterations</a>()</tt>	Number of training iterations until termination.
<tt style='background-color:#E8E8E8;'> ml.BinaryLogisticRegressionSummary <a href=' /ml/classification.py#L543'>roc</a>()</tt>	Returns the receiver operating characteristic roc curve which is a dataframe having two fields fpr tpr with.
<tt style='background-color:#E8E8E8;'> ml.BinaryLogisticRegressionSummary <a href=' /ml/classification.py#L560'>areaUnderROC</a>()</tt>	Computes the area under the receiver operating characteristic roc curve.
<tt style='background-color:#E8E8E8;'> ml.BinaryLogisticRegressionSummary <a href=' /ml/classification.py#L573'>pr</a>()</tt>	Returns the precision-recall curve which is a dataframe containing two fields recall precision with (0.
<tt style='background-color:#E8E8E8;'> ml.BinaryLogisticRegressionSummary <a href=' /ml/classification.py#L587'>fMeasureByThreshold</a>()</tt>	Returns a dataframe with two fields threshold f-measure curve with beta = 1.
<tt style='background-color:#E8E8E8;'> ml.BinaryLogisticRegressionSummary <a href=' /ml/classification.py#L600'>precisionByThreshold</a>()</tt>	Returns a dataframe with two fields threshold precision curve.
<tt style='background-color:#E8E8E8;'> ml.BinaryLogisticRegressionSummary <a href=' /ml/classification.py#L614'>recallByThreshold</a>()</tt>	Returns a dataframe with two fields threshold recall curve.
<tt style='background-color:#E8E8E8;'> ml.TreeClassifierParams <a href=' /ml/classification.py#L658'>setImpurity</a>(value)</tt>	Sets the value of :py attr impurity.
<tt style='background-color:#E8E8E8;'> ml.TreeClassifierParams <a href=' /ml/classification.py#L665'>getImpurity</a>()</tt>	Gets the value of impurity or its default value.
<tt style='background-color:#E8E8E8;'> ml.DecisionTreeClassifier <a href=' /ml/classification.py#L741'>__init__</a>(featuresCol,labelCol,predictionCol,probabilityCol)</tt>	__init__(self featurescol="features", labelcol="label", predictioncol="prediction", probabilitycol="probability", rawpredictioncol="rawprediction", maxdepth=5 maxbins=32 mininstancespernode=1 mininfogain=0 0 maxmemoryinmb=256 cachenodeids=false checkpointinterval=10 impurity="gini", seed=none).
<tt style='background-color:#E8E8E8;'> ml.DecisionTreeClassifier <a href=' /ml/classification.py#L763'>setParams</a>(featuresCol,labelCol,predictionCol,probabilityCol)</tt>	Setparams(self featurescol="features", labelcol="label", predictioncol="prediction", probabilitycol="probability", rawpredictioncol="rawprediction", maxdepth=5 maxbins=32 mininstancespernode=1 mininfogain=0 0 maxmemoryinmb=256 cachenodeids=false checkpointinterval=10 impurity="gini", seed=none).
<tt style='background-color:#E8E8E8;'> ml.DecisionTreeClassificationModel <a href=' /ml/classification.py#L794'>featureImportances</a>()</tt>	Estimate of the importance of each feature.
<tt style='background-color:#E8E8E8;'> ml.RandomForestClassifier <a href=' /ml/classification.py#L870'>__init__</a>(featuresCol,labelCol,predictionCol,probabilityCol)</tt>	__init__(self featurescol="features", labelcol="label", predictioncol="prediction", probabilitycol="probability", rawpredictioncol="rawprediction", maxdepth=5 maxbins=32 mininstancespernode=1 mininfogain=0 0 maxmemoryinmb=256 cachenodeids=false checkpointinterval=10 impurity="gini", numtrees=20 featuresubsetstrategy="auto", seed=none subsamplingrate=1 0).
<tt style='background-color:#E8E8E8;'> ml.RandomForestClassifier <a href=' /ml/classification.py#L893'>setParams</a>(featuresCol,labelCol,predictionCol,probabilityCol)</tt>	Setparams(self featurescol="features", labelcol="label", predictioncol="prediction", probabilitycol="probability", rawpredictioncol="rawprediction", maxdepth=5 maxbins=32 mininstancespernode=1 mininfogain=0 0 maxmemoryinmb=256 cachenodeids=false checkpointinterval=10 seed=none impurity="gini", numtrees=20 featuresubsetstrategy="auto", subsamplingrate=1 0).
<tt style='background-color:#E8E8E8;'> ml.RandomForestClassificationModel <a href=' /ml/classification.py#L923'>featureImportances</a>()</tt>	Estimate of the importance of each feature.
<tt style='background-color:#E8E8E8;'> ml.RandomForestClassificationModel <a href=' /ml/classification.py#L938'>trees</a>()</tt>	Trees in this ensemble warning these have null parent estimators.
<tt style='background-color:#E8E8E8;'> ml.GBTClassifier <a href=' /ml/classification.py#L1014'>__init__</a>(featuresCol,labelCol,predictionCol,maxDepth)</tt>	__init__(self featurescol="features", labelcol="label", predictioncol="prediction", maxdepth=5 maxbins=32 mininstancespernode=1 mininfogain=0 0 maxmemoryinmb=256 cachenodeids=false checkpointinterval=10 losstype="logistic", maxiter=20 stepsize=0 1 seed=none subsamplingrate=1 0).
<tt style='background-color:#E8E8E8;'> ml.GBTClassifier <a href=' /ml/classification.py#L1034'>setParams</a>(featuresCol,labelCol,predictionCol,maxDepth)</tt>	Setparams(self featurescol="features", labelcol="label", predictioncol="prediction", maxdepth=5 maxbins=32 mininstancespernode=1 mininfogain=0 0 maxmemoryinmb=256 cachenodeids=false checkpointinterval=10 losstype="logistic", maxiter=20 stepsize=0 1 seed=none subsamplingrate=1 0).
<tt style='background-color:#E8E8E8;'> ml.GBTClassifier <a href=' /ml/classification.py#L1053'>setLossType</a>(value)</tt>	Sets the value of :py attr losstype.
<tt style='background-color:#E8E8E8;'> ml.GBTClassifier <a href=' /ml/classification.py#L1060'>getLossType</a>()</tt>	Gets the value of losstype or its default value.
<tt style='background-color:#E8E8E8;'> ml.GBTClassificationModel <a href=' /ml/classification.py#L1076'>featureImportances</a>()</tt>	Estimate of the importance of each feature.
<tt style='background-color:#E8E8E8;'> ml.GBTClassificationModel <a href=' /ml/classification.py#L1091'>trees</a>()</tt>	Trees in this ensemble warning these have null parent estimators.
<tt style='background-color:#E8E8E8;'> ml.NaiveBayes <a href=' /ml/classification.py#L1161'>__init__</a>(featuresCol,labelCol,predictionCol,probabilityCol)</tt>	__init__(self featurescol="features", labelcol="label", predictioncol="prediction", probabilitycol="probability", rawpredictioncol="rawprediction", smoothing=1 0 modeltype="multinomial", thresholds=none weightcol=none).
<tt style='background-color:#E8E8E8;'> ml.NaiveBayes <a href=' /ml/classification.py#L1177'>setParams</a>(featuresCol,labelCol,predictionCol,probabilityCol)</tt>	Setparams(self featurescol="features", labelcol="label", predictioncol="prediction", probabilitycol="probability", rawpredictioncol="rawprediction", smoothing=1 0 modeltype="multinomial", thresholds=none weightcol=none).
<tt style='background-color:#E8E8E8;'> ml.NaiveBayes <a href=' /ml/classification.py#L1194'>setSmoothing</a>(value)</tt>	Sets the value of :py attr smoothing.
<tt style='background-color:#E8E8E8;'> ml.NaiveBayes <a href=' /ml/classification.py#L1201'>getSmoothing</a>()</tt>	Gets the value of smoothing or its default value.
<tt style='background-color:#E8E8E8;'> ml.NaiveBayes <a href=' /ml/classification.py#L1208'>setModelType</a>(value)</tt>	Sets the value of :py attr modeltype.
<tt style='background-color:#E8E8E8;'> ml.NaiveBayes <a href=' /ml/classification.py#L1215'>getModelType</a>()</tt>	Gets the value of modeltype or its default value.
<tt style='background-color:#E8E8E8;'> ml.NaiveBayesModel <a href=' /ml/classification.py#L1230'>pi</a>()</tt>	Log of class priors.
<tt style='background-color:#E8E8E8;'> ml.NaiveBayesModel <a href=' /ml/classification.py#L1238'>theta</a>()</tt>	Log of class conditional probabilities.
<tt style='background-color:#E8E8E8;'> ml.MultilayerPerceptronClassifier <a href=' /ml/classification.py#L1316'>__init__</a>(featuresCol,labelCol,predictionCol,maxIter)</tt>	__init__(self featurescol="features", labelcol="label", predictioncol="prediction", maxiter=100 tol=1e-6 seed=none layers=none blocksize=128 stepsize=0 03 solver="l-bfgs", initialweights=none).
<tt style='background-color:#E8E8E8;'> ml.MultilayerPerceptronClassifier <a href=' /ml/classification.py#L1332'>setParams</a>(featuresCol,labelCol,predictionCol,maxIter)</tt>	Setparams(self featurescol="features", labelcol="label", predictioncol="prediction", maxiter=100 tol=1e-6 seed=none layers=none blocksize=128 stepsize=0 03 solver="l-bfgs", initialweights=none).
<tt style='background-color:#E8E8E8;'> ml.MultilayerPerceptronClassifier <a href=' /ml/classification.py#L1349'>setLayers</a>(value)</tt>	Sets the value of :py attr layers.
<tt style='background-color:#E8E8E8;'> ml.MultilayerPerceptronClassifier <a href=' /ml/classification.py#L1356'>getLayers</a>()</tt>	Gets the value of layers or its default value.
<tt style='background-color:#E8E8E8;'> ml.MultilayerPerceptronClassifier <a href=' /ml/classification.py#L1363'>setBlockSize</a>(value)</tt>	Sets the value of :py attr blocksize.
<tt style='background-color:#E8E8E8;'> ml.MultilayerPerceptronClassifier <a href=' /ml/classification.py#L1370'>getBlockSize</a>()</tt>	Gets the value of blocksize or its default value.
<tt style='background-color:#E8E8E8;'> ml.MultilayerPerceptronClassifier <a href=' /ml/classification.py#L1377'>setStepSize</a>(value)</tt>	Sets the value of :py attr stepsize.
<tt style='background-color:#E8E8E8;'> ml.MultilayerPerceptronClassifier <a href=' /ml/classification.py#L1384'>getStepSize</a>()</tt>	Gets the value of stepsize or its default value.
<tt style='background-color:#E8E8E8;'> ml.MultilayerPerceptronClassifier <a href=' /ml/classification.py#L1391'>setSolver</a>(value)</tt>	Sets the value of :py attr solver.
<tt style='background-color:#E8E8E8;'> ml.MultilayerPerceptronClassifier <a href=' /ml/classification.py#L1398'>getSolver</a>()</tt>	Gets the value of solver or its default value.
<tt style='background-color:#E8E8E8;'> ml.MultilayerPerceptronClassifier <a href=' /ml/classification.py#L1405'>setInitialWeights</a>(value)</tt>	Sets the value of :py attr initialweights.
<tt style='background-color:#E8E8E8;'> ml.MultilayerPerceptronClassifier <a href=' /ml/classification.py#L1412'>getInitialWeights</a>()</tt>	Gets the value of initialweights or its default value.
<tt style='background-color:#E8E8E8;'> ml.MultilayerPerceptronClassificationModel <a href=' /ml/classification.py#L1428'>layers</a>()</tt>	Array of layer sizes including input and output layers.
<tt style='background-color:#E8E8E8;'> ml.MultilayerPerceptronClassificationModel <a href=' /ml/classification.py#L1436'>weights</a>()</tt>	The weights of layers.
<tt style='background-color:#E8E8E8;'> ml.OneVsRestParams <a href=' /ml/classification.py#L1452'>setClassifier</a>(value)</tt>	Sets the value of :py attr classifier.
<tt style='background-color:#E8E8E8;'> ml.OneVsRestParams <a href=' /ml/classification.py#L1461'>getClassifier</a>()</tt>	Gets the value of classifier or its default value.
<tt style='background-color:#E8E8E8;'> ml.OneVsRest <a href=' /ml/classification.py#L1513'>__init__</a>(featuresCol,labelCol,predictionCol,classifier)</tt>	__init__(self featurescol="features", labelcol="label", predictioncol="prediction", classifier=none).
<tt style='background-color:#E8E8E8;'> ml.OneVsRest <a href=' /ml/classification.py#L1524'>setParams</a>(featuresCol,labelCol,predictionCol,classifier)</tt>	Setparams(self featurescol=none labelcol=none predictioncol=none classifier=none): sets params for onevsrest.
<tt style='background-color:#E8E8E8;'> ml.OneVsRest <a href=' /ml/classification.py#L1570'>copy</a>(extra)</tt>	Creates a copy of this instance with a randomly generated uid and some extra params.
<tt style='background-color:#E8E8E8;'> ml.OneVsRest <a href=' /ml/classification.py#L1587'>write</a>()</tt>	Returns an mlwriter instance for this ml instance.
<tt style='background-color:#E8E8E8;'> ml.OneVsRest <a href=' /ml/classification.py#L1592'>save</a>(path)</tt>	Save this ml instance to the given path a shortcut of write() save path.
<tt style='background-color:#E8E8E8;'> ml.OneVsRest <a href=' /ml/classification.py#L1597'>read</a>(cls)</tt>	Returns an mlreader instance for this class.
<tt style='background-color:#E8E8E8;'> ml.OneVsRest <a href=' /ml/classification.py#L1603'>_from_java</a>(cls,java_stage)</tt>	Given a java onevsrest create and return a python wrapper of it.
<tt style='background-color:#E8E8E8;'> ml.OneVsRest <a href=' /ml/classification.py#L1618'>_to_java</a>()</tt>	Transfer this instance to a java onevsrest used for ml persistence.
<tt style='background-color:#E8E8E8;'> ml.OneVsRestModel <a href=' /ml/classification.py#L1697'>copy</a>(extra)</tt>	Creates a copy of this instance with a randomly generated uid and some extra params.
<tt style='background-color:#E8E8E8;'> ml.OneVsRestModel <a href=' /ml/classification.py#L1713'>write</a>()</tt>	Returns an mlwriter instance for this ml instance.
<tt style='background-color:#E8E8E8;'> ml.OneVsRestModel <a href=' /ml/classification.py#L1718'>save</a>(path)</tt>	Save this ml instance to the given path a shortcut of write() save path.
<tt style='background-color:#E8E8E8;'> ml.OneVsRestModel <a href=' /ml/classification.py#L1723'>read</a>(cls)</tt>	Returns an mlreader instance for this class.
<tt style='background-color:#E8E8E8;'> ml.OneVsRestModel <a href=' /ml/classification.py#L1729'>_from_java</a>(cls,java_stage)</tt>	Given a java onevsrestmodel create and return a python wrapper of it.
<tt style='background-color:#E8E8E8;'> ml.OneVsRestModel <a href=' /ml/classification.py#L1745'>_to_java</a>()</tt>	Transfer this instance to a java onevsrestmodel used for ml persistence.
<tt style='background-color:#E8E8E8;'> ml.Evaluator <a href=' /ml/evaluation.py#L41'>_evaluate</a>(dataset)</tt>	Evaluates the output.
<tt style='background-color:#E8E8E8;'> ml.Evaluator <a href=' /ml/evaluation.py#L52'>evaluate</a>(dataset,params)</tt>	Evaluates the output with optional parameters.
<tt style='background-color:#E8E8E8;'> ml.Evaluator <a href=' /ml/evaluation.py#L73'>isLargerBetter</a>()</tt>	Indicates whether the metric returned by :py meth evaluate should be maximized true default or minimized false.
<tt style='background-color:#E8E8E8;'> ml.JavaEvaluator <a href=' /ml/evaluation.py#L92'>_evaluate</a>(dataset)</tt>	Evaluates the output.
<tt style='background-color:#E8E8E8;'> ml.BinaryClassificationEvaluator <a href=' /ml/evaluation.py#L139'>__init__</a>(rawPredictionCol,labelCol,metricName)</tt>	__init__(self rawpredictioncol="rawprediction", labelcol="label", metricname="areaunderroc").
<tt style='background-color:#E8E8E8;'> ml.BinaryClassificationEvaluator <a href=' /ml/evaluation.py#L154'>setMetricName</a>(value)</tt>	Sets the value of :py attr metricname.
<tt style='background-color:#E8E8E8;'> ml.BinaryClassificationEvaluator <a href=' /ml/evaluation.py#L161'>getMetricName</a>()</tt>	Gets the value of metricname or its default value.
<tt style='background-color:#E8E8E8;'> ml.BinaryClassificationEvaluator <a href=' /ml/evaluation.py#L168'>setParams</a>(rawPredictionCol,labelCol,metricName)</tt>	Setparams(self rawpredictioncol="rawprediction", labelcol="label", metricname="areaunderroc") sets params for binary classification evaluator.
<tt style='background-color:#E8E8E8;'> ml.RegressionEvaluator <a href=' /ml/evaluation.py#L217'>__init__</a>(predictionCol,labelCol,metricName)</tt>	__init__(self predictioncol="prediction", labelcol="label", metricname="rmse").
<tt style='background-color:#E8E8E8;'> ml.RegressionEvaluator <a href=' /ml/evaluation.py#L232'>setMetricName</a>(value)</tt>	Sets the value of :py attr metricname.
<tt style='background-color:#E8E8E8;'> ml.RegressionEvaluator <a href=' /ml/evaluation.py#L239'>getMetricName</a>()</tt>	Gets the value of metricname or its default value.
<tt style='background-color:#E8E8E8;'> ml.RegressionEvaluator <a href=' /ml/evaluation.py#L246'>setParams</a>(predictionCol,labelCol,metricName)</tt>	Setparams(self predictioncol="prediction", labelcol="label", metricname="rmse") sets params for regression evaluator.
<tt style='background-color:#E8E8E8;'> ml.MulticlassClassificationEvaluator <a href=' /ml/evaluation.py#L290'>__init__</a>(predictionCol,labelCol,metricName)</tt>	__init__(self predictioncol="prediction", labelcol="label", metricname="f1").
<tt style='background-color:#E8E8E8;'> ml.MulticlassClassificationEvaluator <a href=' /ml/evaluation.py#L305'>setMetricName</a>(value)</tt>	Sets the value of :py attr metricname.
<tt style='background-color:#E8E8E8;'> ml.MulticlassClassificationEvaluator <a href=' /ml/evaluation.py#L312'>getMetricName</a>()</tt>	Gets the value of metricname or its default value.
<tt style='background-color:#E8E8E8;'> ml.MulticlassClassificationEvaluator <a href=' /ml/evaluation.py#L319'>setParams</a>(predictionCol,labelCol,metricName)</tt>	Setparams(self predictioncol="prediction", labelcol="label", metricname="f1") sets params for multiclass classification evaluator.
<tt style='background-color:#E8E8E8;'> ml.ParamGridBuilder <a href=' /ml/tuning.py#L62'>addGrid</a>(param,values)</tt>	Sets the given parameters in this grid to fixed values.
<tt style='background-color:#E8E8E8;'> ml.ParamGridBuilder <a href=' /ml/tuning.py#L71'>baseOn</a>()</tt>	Sets the given parameters in this grid to fixed values.
<tt style='background-color:#E8E8E8;'> ml.ParamGridBuilder <a href=' /ml/tuning.py#L85'>build</a>()</tt>	Builds and returns all combinations of parameters specified by the param grid.
<tt style='background-color:#E8E8E8;'> ml.ValidatorParams <a href=' /ml/tuning.py#L107'>setEstimator</a>(value)</tt>	Sets the value of :py attr estimator.
<tt style='background-color:#E8E8E8;'> ml.ValidatorParams <a href=' /ml/tuning.py#L113'>getEstimator</a>()</tt>	Gets the value of estimator or its default value.
<tt style='background-color:#E8E8E8;'> ml.ValidatorParams <a href=' /ml/tuning.py#L119'>setEstimatorParamMaps</a>(value)</tt>	Sets the value of :py attr estimatorparammaps.
<tt style='background-color:#E8E8E8;'> ml.ValidatorParams <a href=' /ml/tuning.py#L125'>getEstimatorParamMaps</a>()</tt>	Gets the value of estimatorparammaps or its default value.
<tt style='background-color:#E8E8E8;'> ml.ValidatorParams <a href=' /ml/tuning.py#L131'>setEvaluator</a>(value)</tt>	Sets the value of :py attr evaluator.
<tt style='background-color:#E8E8E8;'> ml.ValidatorParams <a href=' /ml/tuning.py#L137'>getEvaluator</a>()</tt>	Gets the value of evaluator or its default value.
<tt style='background-color:#E8E8E8;'> ml.CrossValidator <a href=' /ml/tuning.py#L180'>__init__</a>(estimator,estimatorParamMaps,evaluator,numFolds)</tt>	__init__(self estimator=none estimatorparammaps=none evaluator=none numfolds=3 seed=none).
<tt style='background-color:#E8E8E8;'> ml.CrossValidator <a href=' /ml/tuning.py#L192'>setParams</a>(estimator,estimatorParamMaps,evaluator,numFolds)</tt>	Setparams(self estimator=none estimatorparammaps=none evaluator=none numfolds=3 seed=none): sets params for cross validator.
<tt style='background-color:#E8E8E8;'> ml.CrossValidator <a href=' /ml/tuning.py#L204'>setNumFolds</a>(value)</tt>	Sets the value of :py attr numfolds.
<tt style='background-color:#E8E8E8;'> ml.CrossValidator <a href=' /ml/tuning.py#L211'>getNumFolds</a>()</tt>	Gets the value of numfolds or its default value.
<tt style='background-color:#E8E8E8;'> ml.CrossValidator <a href=' /ml/tuning.py#L248'>copy</a>(extra)</tt>	Creates a copy of this instance with a randomly generated uid and some extra params.
<tt style='background-color:#E8E8E8;'> ml.CrossValidatorModel <a href=' /ml/tuning.py#L290'>copy</a>(extra)</tt>	Creates a copy of this instance with a randomly generated uid and some extra params.
<tt style='background-color:#E8E8E8;'> ml.TrainValidationSplit <a href=' /ml/tuning.py#L340'>__init__</a>(estimator,estimatorParamMaps,evaluator,trainRatio)</tt>	__init__(self estimator=none estimatorparammaps=none evaluator=none trainratio=0 75 seed=none).
<tt style='background-color:#E8E8E8;'> ml.TrainValidationSplit <a href=' /ml/tuning.py#L352'>setParams</a>(estimator,estimatorParamMaps,evaluator,trainRatio)</tt>	Setparams(self estimator=none estimatorparammaps=none evaluator=none trainratio=0 75 seed=none):.
<tt style='background-color:#E8E8E8;'> ml.TrainValidationSplit <a href=' /ml/tuning.py#L364'>setTrainRatio</a>(value)</tt>	Sets the value of :py attr trainratio.
<tt style='background-color:#E8E8E8;'> ml.TrainValidationSplit <a href=' /ml/tuning.py#L371'>getTrainRatio</a>()</tt>	Gets the value of trainratio or its default value.
<tt style='background-color:#E8E8E8;'> ml.TrainValidationSplit <a href=' /ml/tuning.py#L402'>copy</a>(extra)</tt>	Creates a copy of this instance with a randomly generated uid and some extra params.
<tt style='background-color:#E8E8E8;'> ml.TrainValidationSplitModel <a href=' /ml/tuning.py#L442'>copy</a>(extra)</tt>	Creates a copy of this instance with a randomly generated uid and some extra params.
<tt style='background-color:#E8E8E8;'> ml.Pipeline <a href=' /ml/pipeline.py#L64'>setStages</a>(value)</tt>	Set pipeline stages.
<tt style='background-color:#E8E8E8;'> ml.Pipeline <a href=' /ml/pipeline.py#L74'>getStages</a>()</tt>	Get pipeline stages.
<tt style='background-color:#E8E8E8;'> ml.Pipeline <a href=' /ml/pipeline.py#L81'>setParams</a>(stages)</tt>	Setparams(self stages=none) sets params for pipeline.
<tt style='background-color:#E8E8E8;'> ml.Pipeline <a href=' /ml/pipeline.py#L116'>copy</a>(extra)</tt>	Creates a copy of this instance.
<tt style='background-color:#E8E8E8;'> ml.Pipeline <a href=' /ml/pipeline.py#L130'>write</a>()</tt>	Returns an mlwriter instance for this ml instance.
<tt style='background-color:#E8E8E8;'> ml.Pipeline <a href=' /ml/pipeline.py#L135'>save</a>(path)</tt>	Save this ml instance to the given path a shortcut of write() save path.
<tt style='background-color:#E8E8E8;'> ml.Pipeline <a href=' /ml/pipeline.py#L140'>read</a>(cls)</tt>	Returns an mlreader instance for this class.
<tt style='background-color:#E8E8E8;'> ml.Pipeline <a href=' /ml/pipeline.py#L146'>_from_java</a>(cls,java_stage)</tt>	Given a java pipeline create and return a python wrapper of it.
<tt style='background-color:#E8E8E8;'> ml.Pipeline <a href=' /ml/pipeline.py#L160'>_to_java</a>()</tt>	Transfer this instance to a java pipeline used for ml persistence.
<tt style='background-color:#E8E8E8;'> ml.PipelineModel <a href=' /ml/pipeline.py#L196'>copy</a>(extra)</tt>	Creates a copy of this instance.
<tt style='background-color:#E8E8E8;'> ml.PipelineModel <a href=' /ml/pipeline.py#L209'>write</a>()</tt>	Returns an mlwriter instance for this ml instance.
<tt style='background-color:#E8E8E8;'> ml.PipelineModel <a href=' /ml/pipeline.py#L214'>save</a>(path)</tt>	Save this ml instance to the given path a shortcut of write() save path.
<tt style='background-color:#E8E8E8;'> ml.PipelineModel <a href=' /ml/pipeline.py#L219'>read</a>(cls)</tt>	Returns an mlreader instance for this class.
<tt style='background-color:#E8E8E8;'> ml.PipelineModel <a href=' /ml/pipeline.py#L225'>_from_java</a>(cls,java_stage)</tt>	Given a java pipelinemodel create and return a python wrapper of it.
<tt style='background-color:#E8E8E8;'> ml.PipelineModel <a href=' /ml/pipeline.py#L238'>_to_java</a>()</tt>	Transfer this instance to a java pipelinemodel used for ml persistence.
<tt style='background-color:#E8E8E8;'> ml.Binarizer <a href=' /ml/feature.py#L90'>__init__</a>(threshold,inputCol,outputCol)</tt>	__init__(self threshold=0 0 inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.Binarizer <a href=' /ml/feature.py#L101'>setParams</a>(threshold,inputCol,outputCol)</tt>	Setparams(self threshold=0 0 inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.Binarizer <a href=' /ml/feature.py#L111'>setThreshold</a>(value)</tt>	Sets the value of :py attr threshold.
<tt style='background-color:#E8E8E8;'> ml.Binarizer <a href=' /ml/feature.py#L118'>getThreshold</a>()</tt>	Gets the value of threshold or its default value.
<tt style='background-color:#E8E8E8;'> ml.LSHParams <a href=' /ml/feature.py#L139'>setNumHashTables</a>(value)</tt>	Sets the value of :py attr numhashtables.
<tt style='background-color:#E8E8E8;'> ml.LSHParams <a href=' /ml/feature.py#L145'>getNumHashTables</a>()</tt>	Gets the value of numhashtables or its default value.
<tt style='background-color:#E8E8E8;'> ml.LSHModel <a href=' /ml/feature.py#L157'>approxNearestNeighbors</a>(dataset,key,numNearestNeighbors,distCol)</tt>	Given a large dataset and an item approximately find at most k items which have the closest distance to the item.
<tt style='background-color:#E8E8E8;'> ml.LSHModel <a href=' /ml/feature.py#L177'>approxSimilarityJoin</a>(datasetA,datasetB,threshold,distCol)</tt>	Join two datasets to approximately find all pairs of rows whose distance are smaller than the threshold.
<tt style='background-color:#E8E8E8;'> ml.BucketedRandomProjectionLSH <a href=' /ml/feature.py#L258'>__init__</a>(inputCol,outputCol,seed,numHashTables)</tt>	__init__(self inputcol=none outputcol=none seed=none numhashtables=1 bucketlength=none).
<tt style='background-color:#E8E8E8;'> ml.BucketedRandomProjectionLSH <a href=' /ml/feature.py#L272'>setParams</a>(inputCol,outputCol,seed,numHashTables)</tt>	Setparams(self inputcol=none outputcol=none seed=none numhashtables=1 bucketlength=none) sets params for this bucketedrandomprojectionlsh.
<tt style='background-color:#E8E8E8;'> ml.BucketedRandomProjectionLSH <a href=' /ml/feature.py#L284'>setBucketLength</a>(value)</tt>	Sets the value of :py attr bucketlength.
<tt style='background-color:#E8E8E8;'> ml.BucketedRandomProjectionLSH <a href=' /ml/feature.py#L291'>getBucketLength</a>()</tt>	Gets the value of bucketlength or its default value.
<tt style='background-color:#E8E8E8;'> ml.Bucketizer <a href=' /ml/feature.py#L366'>__init__</a>(splits,inputCol,outputCol,handleInvalid)</tt>	__init__(self splits=none inputcol=none outputcol=none handleinvalid="error").
<tt style='background-color:#E8E8E8;'> ml.Bucketizer <a href=' /ml/feature.py#L377'>setParams</a>(splits,inputCol,outputCol,handleInvalid)</tt>	Setparams(self splits=none inputcol=none outputcol=none handleinvalid="error") sets params for this bucketizer.
<tt style='background-color:#E8E8E8;'> ml.Bucketizer <a href=' /ml/feature.py#L387'>setSplits</a>(value)</tt>	Sets the value of :py attr splits.
<tt style='background-color:#E8E8E8;'> ml.Bucketizer <a href=' /ml/feature.py#L394'>getSplits</a>()</tt>	Gets the value of threshold or its default value.
<tt style='background-color:#E8E8E8;'> ml.Bucketizer <a href=' /ml/feature.py#L401'>setHandleInvalid</a>(value)</tt>	Sets the value of :py attr handleinvalid.
<tt style='background-color:#E8E8E8;'> ml.Bucketizer <a href=' /ml/feature.py#L408'>getHandleInvalid</a>()</tt>	Gets the value of :py attr handleinvalid or its default value.
<tt style='background-color:#E8E8E8;'> ml.CountVectorizer <a href=' /ml/feature.py#L477'>__init__</a>(minTF,minDF,vocabSize,binary)</tt>	__init__(self mintf=1 0 mindf=1 0 vocabsize=1 << 18 binary=false inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.CountVectorizer <a href=' /ml/feature.py#L491'>setParams</a>(minTF,minDF,vocabSize,binary)</tt>	Setparams(self mintf=1 0 mindf=1 0 vocabsize=1 << 18 binary=false inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.CountVectorizer <a href=' /ml/feature.py#L503'>setMinTF</a>(value)</tt>	Sets the value of :py attr mintf.
<tt style='background-color:#E8E8E8;'> ml.CountVectorizer <a href=' /ml/feature.py#L510'>getMinTF</a>()</tt>	Gets the value of mintf or its default value.
<tt style='background-color:#E8E8E8;'> ml.CountVectorizer <a href=' /ml/feature.py#L517'>setMinDF</a>(value)</tt>	Sets the value of :py attr mindf.
<tt style='background-color:#E8E8E8;'> ml.CountVectorizer <a href=' /ml/feature.py#L524'>getMinDF</a>()</tt>	Gets the value of mindf or its default value.
<tt style='background-color:#E8E8E8;'> ml.CountVectorizer <a href=' /ml/feature.py#L531'>setVocabSize</a>(value)</tt>	Sets the value of :py attr vocabsize.
<tt style='background-color:#E8E8E8;'> ml.CountVectorizer <a href=' /ml/feature.py#L538'>getVocabSize</a>()</tt>	Gets the value of vocabsize or its default value.
<tt style='background-color:#E8E8E8;'> ml.CountVectorizer <a href=' /ml/feature.py#L545'>setBinary</a>(value)</tt>	Sets the value of :py attr binary.
<tt style='background-color:#E8E8E8;'> ml.CountVectorizer <a href=' /ml/feature.py#L552'>getBinary</a>()</tt>	Gets the value of binary or its default value.
<tt style='background-color:#E8E8E8;'> ml.CountVectorizerModel <a href=' /ml/feature.py#L570'>vocabulary</a>()</tt>	An array of terms in the vocabulary.
<tt style='background-color:#E8E8E8;'> ml.DCT <a href=' /ml/feature.py#L612'>__init__</a>(inverse,inputCol,outputCol)</tt>	__init__(self inverse=false inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.DCT <a href=' /ml/feature.py#L623'>setParams</a>(inverse,inputCol,outputCol)</tt>	Setparams(self inverse=false inputcol=none outputcol=none) sets params for this dct.
<tt style='background-color:#E8E8E8;'> ml.DCT <a href=' /ml/feature.py#L633'>setInverse</a>(value)</tt>	Sets the value of :py attr inverse.
<tt style='background-color:#E8E8E8;'> ml.DCT <a href=' /ml/feature.py#L640'>getInverse</a>()</tt>	Gets the value of inverse or its default value.
<tt style='background-color:#E8E8E8;'> ml.ElementwiseProduct <a href=' /ml/feature.py#L676'>__init__</a>(scalingVec,inputCol,outputCol)</tt>	__init__(self scalingvec=none inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.ElementwiseProduct <a href=' /ml/feature.py#L687'>setParams</a>(scalingVec,inputCol,outputCol)</tt>	Setparams(self scalingvec=none inputcol=none outputcol=none) sets params for this elementwiseproduct.
<tt style='background-color:#E8E8E8;'> ml.ElementwiseProduct <a href=' /ml/feature.py#L697'>setScalingVec</a>(value)</tt>	Sets the value of :py attr scalingvec.
<tt style='background-color:#E8E8E8;'> ml.ElementwiseProduct <a href=' /ml/feature.py#L704'>getScalingVec</a>()</tt>	Gets the value of scalingvec or its default value.
<tt style='background-color:#E8E8E8;'> ml.HashingTF <a href=' /ml/feature.py#L746'>__init__</a>(numFeatures,binary,inputCol,outputCol)</tt>	__init__(self numfeatures=1 << 18 binary=false inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.HashingTF <a href=' /ml/feature.py#L757'>setParams</a>(numFeatures,binary,inputCol,outputCol)</tt>	Setparams(self numfeatures=1 << 18 binary=false inputcol=none outputcol=none) sets params for this hashingtf.
<tt style='background-color:#E8E8E8;'> ml.HashingTF <a href=' /ml/feature.py#L767'>setBinary</a>(value)</tt>	Sets the value of :py attr binary.
<tt style='background-color:#E8E8E8;'> ml.HashingTF <a href=' /ml/feature.py#L774'>getBinary</a>()</tt>	Gets the value of binary or its default value.
<tt style='background-color:#E8E8E8;'> ml.IDF <a href=' /ml/feature.py#L819'>__init__</a>(minDocFreq,inputCol,outputCol)</tt>	__init__(self mindocfreq=0 inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.IDF <a href=' /ml/feature.py#L830'>setParams</a>(minDocFreq,inputCol,outputCol)</tt>	Setparams(self mindocfreq=0 inputcol=none outputcol=none) sets params for this idf.
<tt style='background-color:#E8E8E8;'> ml.IDF <a href=' /ml/feature.py#L840'>setMinDocFreq</a>(value)</tt>	Sets the value of :py attr mindocfreq.
<tt style='background-color:#E8E8E8;'> ml.IDF <a href=' /ml/feature.py#L847'>getMinDocFreq</a>()</tt>	Gets the value of mindocfreq or its default value.
<tt style='background-color:#E8E8E8;'> ml.IDFModel <a href=' /ml/feature.py#L865'>idf</a>()</tt>	Returns the idf vector.
<tt style='background-color:#E8E8E8;'> ml.Imputer <a href=' /ml/feature.py#L943'>__init__</a>(strategy,missingValue,inputCols,outputCols)</tt>	__init__(self strategy="mean", missingvalue=float("nan"), inputcols=none outputcols=none):.
<tt style='background-color:#E8E8E8;'> ml.Imputer <a href=' /ml/feature.py#L956'>setParams</a>(strategy,missingValue,inputCols,outputCols)</tt>	Setparams(self strategy="mean", missingvalue=float("nan"), inputcols=none outputcols=none) sets params for this imputer.
<tt style='background-color:#E8E8E8;'> ml.Imputer <a href=' /ml/feature.py#L968'>setOutputCols</a>(value)</tt>	Sets the value of :py attr outputcols.
<tt style='background-color:#E8E8E8;'> ml.Imputer <a href=' /ml/feature.py#L975'>getOutputCols</a>()</tt>	Gets the value of :py attr outputcols or its default value.
<tt style='background-color:#E8E8E8;'> ml.Imputer <a href=' /ml/feature.py#L982'>setStrategy</a>(value)</tt>	Sets the value of :py attr strategy.
<tt style='background-color:#E8E8E8;'> ml.Imputer <a href=' /ml/feature.py#L989'>getStrategy</a>()</tt>	Gets the value of :py attr strategy or its default value.
<tt style='background-color:#E8E8E8;'> ml.Imputer <a href=' /ml/feature.py#L996'>setMissingValue</a>(value)</tt>	Sets the value of :py attr missingvalue.
<tt style='background-color:#E8E8E8;'> ml.Imputer <a href=' /ml/feature.py#L1003'>getMissingValue</a>()</tt>	Gets the value of :py attr missingvalue or its default value.
<tt style='background-color:#E8E8E8;'> ml.ImputerModel <a href=' /ml/feature.py#L1023'>surrogateDF</a>()</tt>	Returns a dataframe containing inputcols and their corresponding surrogates which are used to replace the missing values in the input dataframe.
<tt style='background-color:#E8E8E8;'> ml.MaxAbsScaler <a href=' /ml/feature.py#L1068'>__init__</a>(inputCol,outputCol)</tt>	__init__(self inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.MaxAbsScaler <a href=' /ml/feature.py#L1079'>setParams</a>(inputCol,outputCol)</tt>	Setparams(self inputcol=none outputcol=none) sets params for this maxabsscaler.
<tt style='background-color:#E8E8E8;'> ml.MaxAbsScalerModel <a href=' /ml/feature.py#L1100'>maxAbs</a>()</tt>	Max abs vector.
<tt style='background-color:#E8E8E8;'> ml.MinHashLSH <a href=' /ml/feature.py#L1166'>__init__</a>(inputCol,outputCol,seed,numHashTables)</tt>	__init__(self inputcol=none outputcol=none seed=none numhashtables=1).
<tt style='background-color:#E8E8E8;'> ml.MinHashLSH <a href=' /ml/feature.py#L1177'>setParams</a>(inputCol,outputCol,seed,numHashTables)</tt>	Setparams(self inputcol=none outputcol=none seed=none numhashtables=1) sets params for this minhashlsh.
<tt style='background-color:#E8E8E8;'> ml.MinMaxScaler <a href=' /ml/feature.py#L1261'>__init__</a>(min,max,inputCol,outputCol)</tt>	__init__(self min=0 0 max=1 0 inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.MinMaxScaler <a href=' /ml/feature.py#L1272'>setParams</a>(min,max,inputCol,outputCol)</tt>	Setparams(self min=0 0 max=1 0 inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.MinMaxScaler <a href=' /ml/feature.py#L1282'>setMin</a>(value)</tt>	Sets the value of :py attr min.
<tt style='background-color:#E8E8E8;'> ml.MinMaxScaler <a href=' /ml/feature.py#L1289'>getMin</a>()</tt>	Gets the value of min or its default value.
<tt style='background-color:#E8E8E8;'> ml.MinMaxScaler <a href=' /ml/feature.py#L1296'>setMax</a>(value)</tt>	Sets the value of :py attr max.
<tt style='background-color:#E8E8E8;'> ml.MinMaxScaler <a href=' /ml/feature.py#L1303'>getMax</a>()</tt>	Gets the value of max or its default value.
<tt style='background-color:#E8E8E8;'> ml.MinMaxScalerModel <a href=' /ml/feature.py#L1321'>originalMin</a>()</tt>	Min value for each original column during fitting.
<tt style='background-color:#E8E8E8;'> ml.MinMaxScalerModel <a href=' /ml/feature.py#L1329'>originalMax</a>()</tt>	Max value for each original column during fitting.
<tt style='background-color:#E8E8E8;'> ml.NGram <a href=' /ml/feature.py#L1379'>__init__</a>(n,inputCol,outputCol)</tt>	__init__(self n=2 inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.NGram <a href=' /ml/feature.py#L1390'>setParams</a>(n,inputCol,outputCol)</tt>	Setparams(self n=2 inputcol=none outputcol=none) sets params for this ngram.
<tt style='background-color:#E8E8E8;'> ml.NGram <a href=' /ml/feature.py#L1400'>setN</a>(value)</tt>	Sets the value of :py attr n.
<tt style='background-color:#E8E8E8;'> ml.NGram <a href=' /ml/feature.py#L1407'>getN</a>()</tt>	Gets the value of n or its default value.
<tt style='background-color:#E8E8E8;'> ml.Normalizer <a href=' /ml/feature.py#L1443'>__init__</a>(p,inputCol,outputCol)</tt>	__init__(self p=2 0 inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.Normalizer <a href=' /ml/feature.py#L1454'>setParams</a>(p,inputCol,outputCol)</tt>	Setparams(self p=2 0 inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.Normalizer <a href=' /ml/feature.py#L1464'>setP</a>(value)</tt>	Sets the value of :py attr p.
<tt style='background-color:#E8E8E8;'> ml.Normalizer <a href=' /ml/feature.py#L1471'>getP</a>()</tt>	Gets the value of p or its default value.
<tt style='background-color:#E8E8E8;'> ml.OneHotEncoder <a href=' /ml/feature.py#L1523'>__init__</a>(dropLast,inputCol,outputCol)</tt>	__init__(self droplast=true inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.OneHotEncoder <a href=' /ml/feature.py#L1534'>setParams</a>(dropLast,inputCol,outputCol)</tt>	Setparams(self droplast=true inputcol=none outputcol=none) sets params for this onehotencoder.
<tt style='background-color:#E8E8E8;'> ml.OneHotEncoder <a href=' /ml/feature.py#L1544'>setDropLast</a>(value)</tt>	Sets the value of :py attr droplast.
<tt style='background-color:#E8E8E8;'> ml.OneHotEncoder <a href=' /ml/feature.py#L1551'>getDropLast</a>()</tt>	Gets the value of droplast or its default value.
<tt style='background-color:#E8E8E8;'> ml.PolynomialExpansion <a href=' /ml/feature.py#L1588'>__init__</a>(degree,inputCol,outputCol)</tt>	__init__(self degree=2 inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.PolynomialExpansion <a href=' /ml/feature.py#L1600'>setParams</a>(degree,inputCol,outputCol)</tt>	Setparams(self degree=2 inputcol=none outputcol=none) sets params for this polynomialexpansion.
<tt style='background-color:#E8E8E8;'> ml.PolynomialExpansion <a href=' /ml/feature.py#L1610'>setDegree</a>(value)</tt>	Sets the value of :py attr degree.
<tt style='background-color:#E8E8E8;'> ml.PolynomialExpansion <a href=' /ml/feature.py#L1617'>getDegree</a>()</tt>	Gets the value of degree or its default value.
<tt style='background-color:#E8E8E8;'> ml.QuantileDiscretizer <a href=' /ml/feature.py#L1692'>__init__</a>(numBuckets,inputCol,outputCol,relativeError)</tt>	__init__(self numbuckets=2 inputcol=none outputcol=none relativeerror=0 001 handleinvalid="error").
<tt style='background-color:#E8E8E8;'> ml.QuantileDiscretizer <a href=' /ml/feature.py#L1706'>setParams</a>(numBuckets,inputCol,outputCol,relativeError)</tt>	Setparams(self numbuckets=2 inputcol=none outputcol=none relativeerror=0 001 handleinvalid="error").
<tt style='background-color:#E8E8E8;'> ml.QuantileDiscretizer <a href=' /ml/feature.py#L1718'>setNumBuckets</a>(value)</tt>	Sets the value of :py attr numbuckets.
<tt style='background-color:#E8E8E8;'> ml.QuantileDiscretizer <a href=' /ml/feature.py#L1725'>getNumBuckets</a>()</tt>	Gets the value of numbuckets or its default value.
<tt style='background-color:#E8E8E8;'> ml.QuantileDiscretizer <a href=' /ml/feature.py#L1732'>setRelativeError</a>(value)</tt>	Sets the value of :py attr relativeerror.
<tt style='background-color:#E8E8E8;'> ml.QuantileDiscretizer <a href=' /ml/feature.py#L1739'>getRelativeError</a>()</tt>	Gets the value of relativeerror or its default value.
<tt style='background-color:#E8E8E8;'> ml.QuantileDiscretizer <a href=' /ml/feature.py#L1746'>setHandleInvalid</a>(value)</tt>	Sets the value of :py attr handleinvalid.
<tt style='background-color:#E8E8E8;'> ml.QuantileDiscretizer <a href=' /ml/feature.py#L1753'>getHandleInvalid</a>()</tt>	Gets the value of :py attr handleinvalid or its default value.
<tt style='background-color:#E8E8E8;'> ml.QuantileDiscretizer <a href=' /ml/feature.py#L1760'>_create_model</a>(java_model)</tt>	Private method to convert the java_model to a python model.
<tt style='background-color:#E8E8E8;'> ml.RegexTokenizer <a href=' /ml/feature.py#L1818'>__init__</a>(minTokenLength,gaps,pattern,inputCol)</tt>	__init__(self mintokenlength=1 gaps=true pattern="\s+", inputcol=none outputcol=none tolowercase=true).
<tt style='background-color:#E8E8E8;'> ml.RegexTokenizer <a href=' /ml/feature.py#L1831'>setParams</a>(minTokenLength,gaps,pattern,inputCol)</tt>	Setparams(self mintokenlength=1 gaps=true pattern="\s+", inputcol=none outputcol=none tolowercase=true) sets params for this regextokenizer.
<tt style='background-color:#E8E8E8;'> ml.RegexTokenizer <a href=' /ml/feature.py#L1843'>setMinTokenLength</a>(value)</tt>	Sets the value of :py attr mintokenlength.
<tt style='background-color:#E8E8E8;'> ml.RegexTokenizer <a href=' /ml/feature.py#L1850'>getMinTokenLength</a>()</tt>	Gets the value of mintokenlength or its default value.
<tt style='background-color:#E8E8E8;'> ml.RegexTokenizer <a href=' /ml/feature.py#L1857'>setGaps</a>(value)</tt>	Sets the value of :py attr gaps.
<tt style='background-color:#E8E8E8;'> ml.RegexTokenizer <a href=' /ml/feature.py#L1864'>getGaps</a>()</tt>	Gets the value of gaps or its default value.
<tt style='background-color:#E8E8E8;'> ml.RegexTokenizer <a href=' /ml/feature.py#L1871'>setPattern</a>(value)</tt>	Sets the value of :py attr pattern.
<tt style='background-color:#E8E8E8;'> ml.RegexTokenizer <a href=' /ml/feature.py#L1878'>getPattern</a>()</tt>	Gets the value of pattern or its default value.
<tt style='background-color:#E8E8E8;'> ml.RegexTokenizer <a href=' /ml/feature.py#L1885'>setToLowercase</a>(value)</tt>	Sets the value of :py attr tolowercase.
<tt style='background-color:#E8E8E8;'> ml.RegexTokenizer <a href=' /ml/feature.py#L1892'>getToLowercase</a>()</tt>	Gets the value of tolowercase or its default value.
<tt style='background-color:#E8E8E8;'> ml.SQLTransformer <a href=' /ml/feature.py#L1934'>setParams</a>(statement)</tt>	Setparams(self statement=none) sets params for this sqltransformer.
<tt style='background-color:#E8E8E8;'> ml.SQLTransformer <a href=' /ml/feature.py#L1944'>setStatement</a>(value)</tt>	Sets the value of :py attr statement.
<tt style='background-color:#E8E8E8;'> ml.SQLTransformer <a href=' /ml/feature.py#L1951'>getStatement</a>()</tt>	Gets the value of statement or its default value.
<tt style='background-color:#E8E8E8;'> ml.StandardScaler <a href=' /ml/feature.py#L2002'>__init__</a>(withMean,withStd,inputCol,outputCol)</tt>	__init__(self withmean=false withstd=true inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.StandardScaler <a href=' /ml/feature.py#L2013'>setParams</a>(withMean,withStd,inputCol,outputCol)</tt>	Setparams(self withmean=false withstd=true inputcol=none outputcol=none) sets params for this standardscaler.
<tt style='background-color:#E8E8E8;'> ml.StandardScaler <a href=' /ml/feature.py#L2023'>setWithMean</a>(value)</tt>	Sets the value of :py attr withmean.
<tt style='background-color:#E8E8E8;'> ml.StandardScaler <a href=' /ml/feature.py#L2030'>getWithMean</a>()</tt>	Gets the value of withmean or its default value.
<tt style='background-color:#E8E8E8;'> ml.StandardScaler <a href=' /ml/feature.py#L2037'>setWithStd</a>(value)</tt>	Sets the value of :py attr withstd.
<tt style='background-color:#E8E8E8;'> ml.StandardScaler <a href=' /ml/feature.py#L2044'>getWithStd</a>()</tt>	Gets the value of withstd or its default value.
<tt style='background-color:#E8E8E8;'> ml.StandardScalerModel <a href=' /ml/feature.py#L2062'>std</a>()</tt>	Standard deviation of the standardscalermodel.
<tt style='background-color:#E8E8E8;'> ml.StandardScalerModel <a href=' /ml/feature.py#L2070'>mean</a>()</tt>	Mean of the standardscalermodel.
<tt style='background-color:#E8E8E8;'> ml.StringIndexer <a href=' /ml/feature.py#L2118'>__init__</a>(inputCol,outputCol,handleInvalid)</tt>	__init__(self inputcol=none outputcol=none handleinvalid="error").
<tt style='background-color:#E8E8E8;'> ml.StringIndexer <a href=' /ml/feature.py#L2129'>setParams</a>(inputCol,outputCol,handleInvalid)</tt>	Setparams(self inputcol=none outputcol=none handleinvalid="error") sets params for this stringindexer.
<tt style='background-color:#E8E8E8;'> ml.StringIndexerModel <a href=' /ml/feature.py#L2150'>labels</a>()</tt>	Ordered list of labels corresponding to indices to be assigned.
<tt style='background-color:#E8E8E8;'> ml.IndexToString <a href=' /ml/feature.py#L2176'>__init__</a>(inputCol,outputCol,labels)</tt>	__init__(self inputcol=none outputcol=none labels=none).
<tt style='background-color:#E8E8E8;'> ml.IndexToString <a href=' /ml/feature.py#L2187'>setParams</a>(inputCol,outputCol,labels)</tt>	Setparams(self inputcol=none outputcol=none labels=none) sets params for this indextostring.
<tt style='background-color:#E8E8E8;'> ml.IndexToString <a href=' /ml/feature.py#L2197'>setLabels</a>(value)</tt>	Sets the value of :py attr labels.
<tt style='background-color:#E8E8E8;'> ml.IndexToString <a href=' /ml/feature.py#L2204'>getLabels</a>()</tt>	Gets the value of :py attr labels or its default value.
<tt style='background-color:#E8E8E8;'> ml.StopWordsRemover <a href=' /ml/feature.py#L2238'>__init__</a>(inputCol,outputCol,stopWords,caseSensitive)</tt>	__init__(self inputcol=none outputcol=none stopwords=none casesensitive=false).
<tt style='background-color:#E8E8E8;'> ml.StopWordsRemover <a href=' /ml/feature.py#L2251'>setParams</a>(inputCol,outputCol,stopWords,caseSensitive)</tt>	Setparams(self inputcol=none outputcol=none stopwords=none casesensitive=false) sets params for this stopwordremover.
<tt style='background-color:#E8E8E8;'> ml.StopWordsRemover <a href=' /ml/feature.py#L2261'>setStopWords</a>(value)</tt>	Sets the value of :py attr stopwords.
<tt style='background-color:#E8E8E8;'> ml.StopWordsRemover <a href=' /ml/feature.py#L2268'>getStopWords</a>()</tt>	Gets the value of :py attr stopwords or its default value.
<tt style='background-color:#E8E8E8;'> ml.StopWordsRemover <a href=' /ml/feature.py#L2275'>setCaseSensitive</a>(value)</tt>	Sets the value of :py attr casesensitive.
<tt style='background-color:#E8E8E8;'> ml.StopWordsRemover <a href=' /ml/feature.py#L2282'>getCaseSensitive</a>()</tt>	Gets the value of :py attr casesensitive or its default value.
<tt style='background-color:#E8E8E8;'> ml.StopWordsRemover <a href=' /ml/feature.py#L2289'>loadDefaultStopWords</a>(language)</tt>	Loads the default stop words for the given language.
<tt style='background-color:#E8E8E8;'> ml.Tokenizer <a href=' /ml/feature.py#L2334'>__init__</a>(inputCol,outputCol)</tt>	__init__(self inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.Tokenizer <a href=' /ml/feature.py#L2344'>setParams</a>(inputCol,outputCol)</tt>	Setparams(self inputcol=none outputcol=none) sets params for this tokenizer.
<tt style='background-color:#E8E8E8;'> ml.VectorAssembler <a href=' /ml/feature.py#L2378'>__init__</a>(inputCols,outputCol)</tt>	__init__(self inputcols=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.VectorAssembler <a href=' /ml/feature.py#L2388'>setParams</a>(inputCols,outputCol)</tt>	Setparams(self inputcols=none outputcol=none) sets params for this vectorassembler.
<tt style='background-color:#E8E8E8;'> ml.VectorIndexer <a href=' /ml/feature.py#L2475'>__init__</a>(maxCategories,inputCol,outputCol)</tt>	__init__(self maxcategories=20 inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.VectorIndexer <a href=' /ml/feature.py#L2486'>setParams</a>(maxCategories,inputCol,outputCol)</tt>	Setparams(self maxcategories=20 inputcol=none outputcol=none) sets params for this vectorindexer.
<tt style='background-color:#E8E8E8;'> ml.VectorIndexer <a href=' /ml/feature.py#L2496'>setMaxCategories</a>(value)</tt>	Sets the value of :py attr maxcategories.
<tt style='background-color:#E8E8E8;'> ml.VectorIndexer <a href=' /ml/feature.py#L2503'>getMaxCategories</a>()</tt>	Gets the value of maxcategories or its default value.
<tt style='background-color:#E8E8E8;'> ml.VectorIndexerModel <a href=' /ml/feature.py#L2531'>numFeatures</a>()</tt>	Number of features i e length of vectors which this transforms.
<tt style='background-color:#E8E8E8;'> ml.VectorIndexerModel <a href=' /ml/feature.py#L2539'>categoryMaps</a>()</tt>	Feature value index keys are categorical feature indices column indices.
<tt style='background-color:#E8E8E8;'> ml.VectorSlicer <a href=' /ml/feature.py#L2590'>__init__</a>(inputCol,outputCol,indices,names)</tt>	__init__(self inputcol=none outputcol=none indices=none names=none).
<tt style='background-color:#E8E8E8;'> ml.VectorSlicer <a href=' /ml/feature.py#L2601'>setParams</a>(inputCol,outputCol,indices,names)</tt>	Setparams(self inputcol=none outputcol=none indices=none names=none): sets params for this vectorslicer.
<tt style='background-color:#E8E8E8;'> ml.VectorSlicer <a href=' /ml/feature.py#L2611'>setIndices</a>(value)</tt>	Sets the value of :py attr indices.
<tt style='background-color:#E8E8E8;'> ml.VectorSlicer <a href=' /ml/feature.py#L2618'>getIndices</a>()</tt>	Gets the value of indices or its default value.
<tt style='background-color:#E8E8E8;'> ml.VectorSlicer <a href=' /ml/feature.py#L2625'>setNames</a>(value)</tt>	Sets the value of :py attr names.
<tt style='background-color:#E8E8E8;'> ml.VectorSlicer <a href=' /ml/feature.py#L2632'>getNames</a>()</tt>	Gets the value of names or its default value.
<tt style='background-color:#E8E8E8;'> ml.Word2Vec <a href=' /ml/feature.py#L2710'>__init__</a>(vectorSize,minCount,numPartitions,stepSize)</tt>	__init__(self vectorsize=100 mincount=5 numpartitions=1 stepsize=0 025 maxiter=1 seed=none inputcol=none outputcol=none windowsize=5 maxsentencelength=1000).
<tt style='background-color:#E8E8E8;'> ml.Word2Vec <a href=' /ml/feature.py#L2724'>setParams</a>(vectorSize,minCount,numPartitions,stepSize)</tt>	Setparams(self mincount=5 numpartitions=1 stepsize=0 025 maxiter=1 seed=none inputcol=none outputcol=none windowsize=5 maxsentencelength=1000).
<tt style='background-color:#E8E8E8;'> ml.Word2Vec <a href=' /ml/feature.py#L2736'>setVectorSize</a>(value)</tt>	Sets the value of :py attr vectorsize.
<tt style='background-color:#E8E8E8;'> ml.Word2Vec <a href=' /ml/feature.py#L2743'>getVectorSize</a>()</tt>	Gets the value of vectorsize or its default value.
<tt style='background-color:#E8E8E8;'> ml.Word2Vec <a href=' /ml/feature.py#L2750'>setNumPartitions</a>(value)</tt>	Sets the value of :py attr numpartitions.
<tt style='background-color:#E8E8E8;'> ml.Word2Vec <a href=' /ml/feature.py#L2757'>getNumPartitions</a>()</tt>	Gets the value of numpartitions or its default value.
<tt style='background-color:#E8E8E8;'> ml.Word2Vec <a href=' /ml/feature.py#L2764'>setMinCount</a>(value)</tt>	Sets the value of :py attr mincount.
<tt style='background-color:#E8E8E8;'> ml.Word2Vec <a href=' /ml/feature.py#L2771'>getMinCount</a>()</tt>	Gets the value of mincount or its default value.
<tt style='background-color:#E8E8E8;'> ml.Word2Vec <a href=' /ml/feature.py#L2778'>setWindowSize</a>(value)</tt>	Sets the value of :py attr windowsize.
<tt style='background-color:#E8E8E8;'> ml.Word2Vec <a href=' /ml/feature.py#L2785'>getWindowSize</a>()</tt>	Gets the value of windowsize or its default value.
<tt style='background-color:#E8E8E8;'> ml.Word2Vec <a href=' /ml/feature.py#L2792'>setMaxSentenceLength</a>(value)</tt>	Sets the value of :py attr maxsentencelength.
<tt style='background-color:#E8E8E8;'> ml.Word2Vec <a href=' /ml/feature.py#L2799'>getMaxSentenceLength</a>()</tt>	Gets the value of maxsentencelength or its default value.
<tt style='background-color:#E8E8E8;'> ml.Word2VecModel <a href=' /ml/feature.py#L2817'>getVectors</a>()</tt>	Returns the vector representation of the words as a dataframe with two fields word and vector.
<tt style='background-color:#E8E8E8;'> ml.Word2VecModel <a href=' /ml/feature.py#L2825'>findSynonyms</a>(word,num)</tt>	Find "num" number of words closest in similarity to "word".
<tt style='background-color:#E8E8E8;'> ml.PCA <a href=' /ml/feature.py#L2874'>__init__</a>(k,inputCol,outputCol)</tt>	__init__(self k=none inputcol=none outputcol=none).
<tt style='background-color:#E8E8E8;'> ml.PCA <a href=' /ml/feature.py#L2884'>setParams</a>(k,inputCol,outputCol)</tt>	Setparams(self k=none inputcol=none outputcol=none) set params for this pca.
<tt style='background-color:#E8E8E8;'> ml.PCA <a href=' /ml/feature.py#L2894'>setK</a>(value)</tt>	Sets the value of :py attr k.
<tt style='background-color:#E8E8E8;'> ml.PCA <a href=' /ml/feature.py#L2901'>getK</a>()</tt>	Gets the value of k or its default value.
<tt style='background-color:#E8E8E8;'> ml.PCAModel <a href=' /ml/feature.py#L2919'>pc</a>()</tt>	Returns a principal components matrix.
<tt style='background-color:#E8E8E8;'> ml.PCAModel <a href=' /ml/feature.py#L2928'>explainedVariance</a>()</tt>	Returns a vector of proportions of variance explained by each principal component.
<tt style='background-color:#E8E8E8;'> ml.RFormula <a href=' /ml/feature.py#L3011'>__init__</a>(formula,featuresCol,labelCol,forceIndexLabel)</tt>	__init__(self formula=none featurescol="features", labelcol="label", forceindexlabel=false).
<tt style='background-color:#E8E8E8;'> ml.RFormula <a href=' /ml/feature.py#L3024'>setParams</a>(formula,featuresCol,labelCol,forceIndexLabel)</tt>	Setparams(self formula=none featurescol="features", labelcol="label", forceindexlabel=false) sets params for rformula.
<tt style='background-color:#E8E8E8;'> ml.RFormula <a href=' /ml/feature.py#L3036'>setFormula</a>(value)</tt>	Sets the value of :py attr formula.
<tt style='background-color:#E8E8E8;'> ml.RFormula <a href=' /ml/feature.py#L3043'>getFormula</a>()</tt>	Gets the value of :py attr formula.
<tt style='background-color:#E8E8E8;'> ml.RFormula <a href=' /ml/feature.py#L3050'>setForceIndexLabel</a>(value)</tt>	Sets the value of :py attr forceindexlabel.
<tt style='background-color:#E8E8E8;'> ml.RFormula <a href=' /ml/feature.py#L3057'>getForceIndexLabel</a>()</tt>	Gets the value of :py attr forceindexlabel.
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelector <a href=' /ml/feature.py#L3167'>__init__</a>(numTopFeatures,featuresCol,outputCol,labelCol)</tt>	__init__(self numtopfeatures=50 featurescol="features", outputcol=none labelcol="label", selectortype="numtopfeatures", percentile=0 1 fpr=0 05 fdr=0 05 fwe=0 05).
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelector <a href=' /ml/feature.py#L3183'>setParams</a>(numTopFeatures,featuresCol,outputCol,labelCol)</tt>	Setparams(self numtopfeatures=50 featurescol="features", outputcol=none labelcol="labels", selectortype="numtopfeatures", percentile=0 1 fpr=0 05 fdr=0 05 fwe=0 05).
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelector <a href=' /ml/feature.py#L3197'>setSelectorType</a>(value)</tt>	Sets the value of :py attr selectortype.
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelector <a href=' /ml/feature.py#L3204'>getSelectorType</a>()</tt>	Gets the value of selectortype or its default value.
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelector <a href=' /ml/feature.py#L3211'>setNumTopFeatures</a>(value)</tt>	Sets the value of :py attr numtopfeatures.
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelector <a href=' /ml/feature.py#L3219'>getNumTopFeatures</a>()</tt>	Gets the value of numtopfeatures or its default value.
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelector <a href=' /ml/feature.py#L3226'>setPercentile</a>(value)</tt>	Sets the value of :py attr percentile.
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelector <a href=' /ml/feature.py#L3234'>getPercentile</a>()</tt>	Gets the value of percentile or its default value.
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelector <a href=' /ml/feature.py#L3241'>setFpr</a>(value)</tt>	Sets the value of :py attr fpr.
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelector <a href=' /ml/feature.py#L3249'>getFpr</a>()</tt>	Gets the value of fpr or its default value.
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelector <a href=' /ml/feature.py#L3256'>setFdr</a>(value)</tt>	Sets the value of :py attr fdr.
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelector <a href=' /ml/feature.py#L3264'>getFdr</a>()</tt>	Gets the value of fdr or its default value.
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelector <a href=' /ml/feature.py#L3271'>setFwe</a>(value)</tt>	Sets the value of :py attr fwe.
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelector <a href=' /ml/feature.py#L3279'>getFwe</a>()</tt>	Gets the value of fwe or its default value.
<tt style='background-color:#E8E8E8;'> ml.ChiSqSelectorModel <a href=' /ml/feature.py#L3299'>selectedFeatures</a>()</tt>	List of indices to select filter.
<tt style='background-color:#E8E8E8;'> ml.ChiSquareTest <a href=' /ml/stat.py#L62'>test</a>(dataset,featuresCol,labelCol)</tt>	Perform a pearson's independence test using dataset.
<tt style='background-color:#E8E8E8;'> ml.Correlation <a href=' /ml/stat.py#L123'>corr</a>(dataset,column,method)</tt>	Compute the correlation matrix with specified method using dataset.
<tt style='background-color:#E8E8E8;'> ml.JavaWrapper <a href=' /ml/wrapper.py#L39'>_create_from_java_class</a>(cls,java_class)</tt>	Construct this object from given java classname and arguments.
<tt style='background-color:#E8E8E8;'> ml.JavaWrapper <a href=' /ml/wrapper.py#L53'>_new_java_obj</a>(java_class)</tt>	Returns a new java object.
<tt style='background-color:#E8E8E8;'> ml.JavaWrapper <a href=' /ml/wrapper.py#L65'>_new_java_array</a>(pylist,java_class)</tt>	Create a java array of given java_class type useful for.
<tt style='background-color:#E8E8E8;'> ml.JavaParams <a href=' /ml/wrapper.py#L107'>_make_java_param_pair</a>(param,value)</tt>	Makes a java parm pair.
<tt style='background-color:#E8E8E8;'> ml.JavaParams <a href=' /ml/wrapper.py#L117'>_transfer_params_to_java</a>()</tt>	Transforms the embedded params to the companion java object.
<tt style='background-color:#E8E8E8;'> ml.JavaParams <a href=' /ml/wrapper.py#L127'>_transfer_param_map_to_java</a>(pyParamMap)</tt>	Transforms a python parammap into a java parammap.
<tt style='background-color:#E8E8E8;'> ml.JavaParams <a href=' /ml/wrapper.py#L138'>_transfer_params_from_java</a>()</tt>	Transforms the embedded params from the companion java object.
<tt style='background-color:#E8E8E8;'> ml.JavaParams <a href=' /ml/wrapper.py#L151'>_transfer_param_map_from_java</a>(javaParamMap)</tt>	Transforms a java parammap into a python parammap.
<tt style='background-color:#E8E8E8;'> ml.JavaParams <a href=' /ml/wrapper.py#L163'>_empty_java_param_map</a>()</tt>	Returns an empty java parammap reference.
<tt style='background-color:#E8E8E8;'> ml.JavaParams <a href=' /ml/wrapper.py#L170'>_to_java</a>()</tt>	Transfer this instance's params to the wrapped java object and return the java object.
<tt style='background-color:#E8E8E8;'> ml.JavaParams <a href=' /ml/wrapper.py#L182'>_from_java</a>(java_stage)</tt>	Given a java object create and return a python wrapper of it.
<tt style='background-color:#E8E8E8;'> ml.JavaParams <a href=' /ml/wrapper.py#L216'>copy</a>(extra)</tt>	Creates a copy of this instance with the same uid and some extra params.
<tt style='background-color:#E8E8E8;'> ml.JavaEstimator <a href=' /ml/wrapper.py#L245'>_create_model</a>(java_model)</tt>	Creates a model from the input java model reference.
<tt style='background-color:#E8E8E8;'> ml.JavaEstimator <a href=' /ml/wrapper.py#L252'>_fit_java</a>(dataset)</tt>	Fits a java model to the input dataset.
<tt style='background-color:#E8E8E8;'> ml.JavaModel <a href=' /ml/wrapper.py#L294'>__init__</a>(java_model)</tt>	Initialize this instance with a java model object.
<tt style='background-color:#E8E8E8;'> ml.param. <a href=' /ml/param/_shared_params_code_gen.py#L41'>_gen_param_header</a>(name,doc,defaultValueStr,typeConverter)</tt>	Generates the header part for shared variables.
<tt style='background-color:#E8E8E8;'> ml.param. <a href=' /ml/param/_shared_params_code_gen.py#L73'>_gen_param_code</a>(name,doc,defaultValueStr)</tt>	Generates python code for a shared param class.
<tt style='background-color:#E8E8E8;'> ml.param.Param <a href=' /ml/param/__init__.py#L52'>_copy_new_parent</a>(parent)</tt>	Copy the current param to a new parent must be a dummy param.
<tt style='background-color:#E8E8E8;'> ml.param.TypeConverters <a href=' /ml/param/__init__.py#L105'>identity</a>(value)</tt>	Dummy converter that just returns value.
<tt style='background-color:#E8E8E8;'> ml.param.TypeConverters <a href=' /ml/param/__init__.py#L112'>toList</a>(value)</tt>	Convert a value to a list if possible.
<tt style='background-color:#E8E8E8;'> ml.param.TypeConverters <a href=' /ml/param/__init__.py#L126'>toListFloat</a>(value)</tt>	Convert a value to list of floats if possible.
<tt style='background-color:#E8E8E8;'> ml.param.TypeConverters <a href=' /ml/param/__init__.py#L137'>toListInt</a>(value)</tt>	Convert a value to list of ints if possible.
<tt style='background-color:#E8E8E8;'> ml.param.TypeConverters <a href=' /ml/param/__init__.py#L148'>toListString</a>(value)</tt>	Convert a value to list of strings if possible.
<tt style='background-color:#E8E8E8;'> ml.param.TypeConverters <a href=' /ml/param/__init__.py#L159'>toVector</a>(value)</tt>	Convert a value to a mllib vector if possible.
<tt style='background-color:#E8E8E8;'> ml.param.TypeConverters <a href=' /ml/param/__init__.py#L172'>toFloat</a>(value)</tt>	Convert a value to a float if possible.
<tt style='background-color:#E8E8E8;'> ml.param.TypeConverters <a href=' /ml/param/__init__.py#L182'>toInt</a>(value)</tt>	Convert a value to an int if possible.
<tt style='background-color:#E8E8E8;'> ml.param.TypeConverters <a href=' /ml/param/__init__.py#L192'>toString</a>(value)</tt>	Convert a value to a string if possible.
<tt style='background-color:#E8E8E8;'> ml.param.TypeConverters <a href=' /ml/param/__init__.py#L206'>toBoolean</a>(value)</tt>	Convert a value to a boolean if possible.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L241'>_copy_params</a>()</tt>	Copy all params defined on the class to current object.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L251'>params</a>()</tt>	Returns all params ordered by name the default implementation.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L264'>explainParam</a>(param)</tt>	Explains a single param and returns its name doc and optional default value and user-supplied value in a string.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L281'>explainParams</a>()</tt>	Returns the documentation of all params with their optionally default values and user-supplied values.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L288'>getParam</a>(paramName)</tt>	Gets a param by its name.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L298'>isSet</a>(param)</tt>	Checks whether a param is explicitly set by user.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L305'>hasDefault</a>(param)</tt>	Checks whether a param has a default value.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L312'>isDefined</a>(param)</tt>	Checks whether a param is explicitly set by user or has a default value.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L319'>hasParam</a>(paramName)</tt>	Tests whether this instance contains a param with a given string name.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L330'>getOrDefault</a>(param)</tt>	Gets the value of a param in the user-supplied param map or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L341'>extractParamMap</a>(extra)</tt>	Extracts the embedded default param values and user-supplied values and then merges them with extra values from input into.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L359'>copy</a>(extra)</tt>	Creates a copy of this instance with the same uid and some extra params.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L378'>_shouldOwn</a>(param)</tt>	Validates that the input param belongs to this params instance.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L385'>_resolveParam</a>(param)</tt>	Resolves a param and validates the ownership.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L401'>_dummy</a>()</tt>	Returns a dummy params instance used as a placeholder to generate docs.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L411'>_set</a>()</tt>	Sets user-supplied params.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L425'>_clear</a>(param)</tt>	Clears a param from the param map if it has been explicitly set.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L432'>_setDefault</a>()</tt>	Sets default params.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L447'>_copyValues</a>(to,extra)</tt>	Copies param values from this instance to another instance for params shared by them.
<tt style='background-color:#E8E8E8;'> ml.param.Params <a href=' /ml/param/__init__.py#L468'>_resetUid</a>(newUid)</tt>	Changes the uid of this instance this updates both.
<tt style='background-color:#E8E8E8;'> ml.param.HasMaxIter <a href=' /ml/param/shared.py#L33'>setMaxIter</a>(value)</tt>	Sets the value of :py attr maxiter.
<tt style='background-color:#E8E8E8;'> ml.param.HasMaxIter <a href=' /ml/param/shared.py#L39'>getMaxIter</a>()</tt>	Gets the value of maxiter or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasRegParam <a href=' /ml/param/shared.py#L56'>setRegParam</a>(value)</tt>	Sets the value of :py attr regparam.
<tt style='background-color:#E8E8E8;'> ml.param.HasRegParam <a href=' /ml/param/shared.py#L62'>getRegParam</a>()</tt>	Gets the value of regparam or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasFeaturesCol <a href=' /ml/param/shared.py#L80'>setFeaturesCol</a>(value)</tt>	Sets the value of :py attr featurescol.
<tt style='background-color:#E8E8E8;'> ml.param.HasFeaturesCol <a href=' /ml/param/shared.py#L86'>getFeaturesCol</a>()</tt>	Gets the value of featurescol or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasLabelCol <a href=' /ml/param/shared.py#L104'>setLabelCol</a>(value)</tt>	Sets the value of :py attr labelcol.
<tt style='background-color:#E8E8E8;'> ml.param.HasLabelCol <a href=' /ml/param/shared.py#L110'>getLabelCol</a>()</tt>	Gets the value of labelcol or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasPredictionCol <a href=' /ml/param/shared.py#L128'>setPredictionCol</a>(value)</tt>	Sets the value of :py attr predictioncol.
<tt style='background-color:#E8E8E8;'> ml.param.HasPredictionCol <a href=' /ml/param/shared.py#L134'>getPredictionCol</a>()</tt>	Gets the value of predictioncol or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasProbabilityCol <a href=' /ml/param/shared.py#L152'>setProbabilityCol</a>(value)</tt>	Sets the value of :py attr probabilitycol.
<tt style='background-color:#E8E8E8;'> ml.param.HasProbabilityCol <a href=' /ml/param/shared.py#L158'>getProbabilityCol</a>()</tt>	Gets the value of probabilitycol or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasRawPredictionCol <a href=' /ml/param/shared.py#L176'>setRawPredictionCol</a>(value)</tt>	Sets the value of :py attr rawpredictioncol.
<tt style='background-color:#E8E8E8;'> ml.param.HasRawPredictionCol <a href=' /ml/param/shared.py#L182'>getRawPredictionCol</a>()</tt>	Gets the value of rawpredictioncol or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasInputCol <a href=' /ml/param/shared.py#L199'>setInputCol</a>(value)</tt>	Sets the value of :py attr inputcol.
<tt style='background-color:#E8E8E8;'> ml.param.HasInputCol <a href=' /ml/param/shared.py#L205'>getInputCol</a>()</tt>	Gets the value of inputcol or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasInputCols <a href=' /ml/param/shared.py#L222'>setInputCols</a>(value)</tt>	Sets the value of :py attr inputcols.
<tt style='background-color:#E8E8E8;'> ml.param.HasInputCols <a href=' /ml/param/shared.py#L228'>getInputCols</a>()</tt>	Gets the value of inputcols or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasOutputCol <a href=' /ml/param/shared.py#L246'>setOutputCol</a>(value)</tt>	Sets the value of :py attr outputcol.
<tt style='background-color:#E8E8E8;'> ml.param.HasOutputCol <a href=' /ml/param/shared.py#L252'>getOutputCol</a>()</tt>	Gets the value of outputcol or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasNumFeatures <a href=' /ml/param/shared.py#L269'>setNumFeatures</a>(value)</tt>	Sets the value of :py attr numfeatures.
<tt style='background-color:#E8E8E8;'> ml.param.HasNumFeatures <a href=' /ml/param/shared.py#L275'>getNumFeatures</a>()</tt>	Gets the value of numfeatures or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasCheckpointInterval <a href=' /ml/param/shared.py#L292'>setCheckpointInterval</a>(value)</tt>	Sets the value of :py attr checkpointinterval.
<tt style='background-color:#E8E8E8;'> ml.param.HasCheckpointInterval <a href=' /ml/param/shared.py#L298'>getCheckpointInterval</a>()</tt>	Gets the value of checkpointinterval or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasSeed <a href=' /ml/param/shared.py#L316'>setSeed</a>(value)</tt>	Sets the value of :py attr seed.
<tt style='background-color:#E8E8E8;'> ml.param.HasSeed <a href=' /ml/param/shared.py#L322'>getSeed</a>()</tt>	Gets the value of seed or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasTol <a href=' /ml/param/shared.py#L339'>setTol</a>(value)</tt>	Sets the value of :py attr tol.
<tt style='background-color:#E8E8E8;'> ml.param.HasTol <a href=' /ml/param/shared.py#L345'>getTol</a>()</tt>	Gets the value of tol or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasStepSize <a href=' /ml/param/shared.py#L362'>setStepSize</a>(value)</tt>	Sets the value of :py attr stepsize.
<tt style='background-color:#E8E8E8;'> ml.param.HasStepSize <a href=' /ml/param/shared.py#L368'>getStepSize</a>()</tt>	Gets the value of stepsize or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasHandleInvalid <a href=' /ml/param/shared.py#L385'>setHandleInvalid</a>(value)</tt>	Sets the value of :py attr handleinvalid.
<tt style='background-color:#E8E8E8;'> ml.param.HasHandleInvalid <a href=' /ml/param/shared.py#L391'>getHandleInvalid</a>()</tt>	Gets the value of handleinvalid or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasElasticNetParam <a href=' /ml/param/shared.py#L409'>setElasticNetParam</a>(value)</tt>	Sets the value of :py attr elasticnetparam.
<tt style='background-color:#E8E8E8;'> ml.param.HasElasticNetParam <a href=' /ml/param/shared.py#L415'>getElasticNetParam</a>()</tt>	Gets the value of elasticnetparam or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasFitIntercept <a href=' /ml/param/shared.py#L433'>setFitIntercept</a>(value)</tt>	Sets the value of :py attr fitintercept.
<tt style='background-color:#E8E8E8;'> ml.param.HasFitIntercept <a href=' /ml/param/shared.py#L439'>getFitIntercept</a>()</tt>	Gets the value of fitintercept or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasStandardization <a href=' /ml/param/shared.py#L457'>setStandardization</a>(value)</tt>	Sets the value of :py attr standardization.
<tt style='background-color:#E8E8E8;'> ml.param.HasStandardization <a href=' /ml/param/shared.py#L463'>getStandardization</a>()</tt>	Gets the value of standardization or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasThresholds <a href=' /ml/param/shared.py#L480'>setThresholds</a>(value)</tt>	Sets the value of :py attr thresholds.
<tt style='background-color:#E8E8E8;'> ml.param.HasThresholds <a href=' /ml/param/shared.py#L486'>getThresholds</a>()</tt>	Gets the value of thresholds or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasThreshold <a href=' /ml/param/shared.py#L504'>setThreshold</a>(value)</tt>	Sets the value of :py attr threshold.
<tt style='background-color:#E8E8E8;'> ml.param.HasThreshold <a href=' /ml/param/shared.py#L510'>getThreshold</a>()</tt>	Gets the value of threshold or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasWeightCol <a href=' /ml/param/shared.py#L527'>setWeightCol</a>(value)</tt>	Sets the value of :py attr weightcol.
<tt style='background-color:#E8E8E8;'> ml.param.HasWeightCol <a href=' /ml/param/shared.py#L533'>getWeightCol</a>()</tt>	Gets the value of weightcol or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasSolver <a href=' /ml/param/shared.py#L551'>setSolver</a>(value)</tt>	Sets the value of :py attr solver.
<tt style='background-color:#E8E8E8;'> ml.param.HasSolver <a href=' /ml/param/shared.py#L557'>getSolver</a>()</tt>	Gets the value of solver or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasVarianceCol <a href=' /ml/param/shared.py#L574'>setVarianceCol</a>(value)</tt>	Sets the value of :py attr variancecol.
<tt style='background-color:#E8E8E8;'> ml.param.HasVarianceCol <a href=' /ml/param/shared.py#L580'>getVarianceCol</a>()</tt>	Gets the value of variancecol or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.HasAggregationDepth <a href=' /ml/param/shared.py#L598'>setAggregationDepth</a>(value)</tt>	Sets the value of :py attr aggregationdepth.
<tt style='background-color:#E8E8E8;'> ml.param.HasAggregationDepth <a href=' /ml/param/shared.py#L604'>getAggregationDepth</a>()</tt>	Gets the value of aggregationdepth or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.DecisionTreeParams <a href=' /ml/param/shared.py#L627'>setMaxDepth</a>(value)</tt>	Sets the value of :py attr maxdepth.
<tt style='background-color:#E8E8E8;'> ml.param.DecisionTreeParams <a href=' /ml/param/shared.py#L633'>getMaxDepth</a>()</tt>	Gets the value of maxdepth or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.DecisionTreeParams <a href=' /ml/param/shared.py#L639'>setMaxBins</a>(value)</tt>	Sets the value of :py attr maxbins.
<tt style='background-color:#E8E8E8;'> ml.param.DecisionTreeParams <a href=' /ml/param/shared.py#L645'>getMaxBins</a>()</tt>	Gets the value of maxbins or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.DecisionTreeParams <a href=' /ml/param/shared.py#L651'>setMinInstancesPerNode</a>(value)</tt>	Sets the value of :py attr mininstancespernode.
<tt style='background-color:#E8E8E8;'> ml.param.DecisionTreeParams <a href=' /ml/param/shared.py#L657'>getMinInstancesPerNode</a>()</tt>	Gets the value of mininstancespernode or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.DecisionTreeParams <a href=' /ml/param/shared.py#L663'>setMinInfoGain</a>(value)</tt>	Sets the value of :py attr mininfogain.
<tt style='background-color:#E8E8E8;'> ml.param.DecisionTreeParams <a href=' /ml/param/shared.py#L669'>getMinInfoGain</a>()</tt>	Gets the value of mininfogain or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.DecisionTreeParams <a href=' /ml/param/shared.py#L675'>setMaxMemoryInMB</a>(value)</tt>	Sets the value of :py attr maxmemoryinmb.
<tt style='background-color:#E8E8E8;'> ml.param.DecisionTreeParams <a href=' /ml/param/shared.py#L681'>getMaxMemoryInMB</a>()</tt>	Gets the value of maxmemoryinmb or its default value.
<tt style='background-color:#E8E8E8;'> ml.param.DecisionTreeParams <a href=' /ml/param/shared.py#L687'>setCacheNodeIds</a>(value)</tt>	Sets the value of :py attr cachenodeids.
<tt style='background-color:#E8E8E8;'> ml.param.DecisionTreeParams <a href=' /ml/param/shared.py#L693'>getCacheNodeIds</a>()</tt>	Gets the value of cachenodeids or its default value.
<tt style='background-color:#E8E8E8;'> ml.linalg. <a href=' /ml/linalg/__init__.py#L84'>_vector_size</a>(v)</tt>	Returns the size of the vector.
<tt style='background-color:#E8E8E8;'> ml.linalg.Vector <a href=' /ml/linalg/__init__.py#L244'>toArray</a>()</tt>	Convert the vector into an numpy ndarray.
<tt style='background-color:#E8E8E8;'> ml.linalg.DenseVector <a href=' /ml/linalg/__init__.py#L286'>numNonzeros</a>()</tt>	Number of nonzero elements this scans all active values and count non zeros.
<tt style='background-color:#E8E8E8;'> ml.linalg.DenseVector <a href=' /ml/linalg/__init__.py#L292'>norm</a>(p)</tt>	Calculates the norm of a densevector.
<tt style='background-color:#E8E8E8;'> ml.linalg.DenseVector <a href=' /ml/linalg/__init__.py#L304'>dot</a>(other)</tt>	Compute the dot product of two vectors we support.
<tt style='background-color:#E8E8E8;'> ml.linalg.DenseVector <a href=' /ml/linalg/__init__.py#L347'>squared_distance</a>(other)</tt>	Squared distance of two vectors.
<tt style='background-color:#E8E8E8;'> ml.linalg.DenseVector <a href=' /ml/linalg/__init__.py#L385'>toArray</a>()</tt>	Returns an numpy ndarray.
<tt style='background-color:#E8E8E8;'> ml.linalg.DenseVector <a href=' /ml/linalg/__init__.py#L391'>values</a>()</tt>	Returns a list of values.
<tt style='background-color:#E8E8E8;'> ml.linalg.SparseVector <a href=' /ml/linalg/__init__.py#L466'>__init__</a>(size)</tt>	Create a sparse vector using either a dictionary a list of index value pairs or two separate arrays of indices and.
<tt style='background-color:#E8E8E8;'> ml.linalg.SparseVector <a href=' /ml/linalg/__init__.py#L532'>numNonzeros</a>()</tt>	Number of nonzero elements this scans all active values and count non zeros.
<tt style='background-color:#E8E8E8;'> ml.linalg.SparseVector <a href=' /ml/linalg/__init__.py#L538'>norm</a>(p)</tt>	Calculates the norm of a sparsevector.
<tt style='background-color:#E8E8E8;'> ml.linalg.SparseVector <a href=' /ml/linalg/__init__.py#L555'>dot</a>(other)</tt>	Dot product with a sparsevector or 1- or 2-dimensional numpy array.
<tt style='background-color:#E8E8E8;'> ml.linalg.SparseVector <a href=' /ml/linalg/__init__.py#L611'>squared_distance</a>(other)</tt>	Squared distance from a sparsevector or 1-dimensional numpy array.
<tt style='background-color:#E8E8E8;'> ml.linalg.SparseVector <a href=' /ml/linalg/__init__.py#L678'>toArray</a>()</tt>	Returns a copy of this sparsevector as a 1-dimensional numpy array.
<tt style='background-color:#E8E8E8;'> ml.linalg.Vectors <a href=' /ml/linalg/__init__.py#L760'>sparse</a>(size)</tt>	Create a sparse vector using either a dictionary a list of index value pairs or two separate arrays of indices and.
<tt style='background-color:#E8E8E8;'> ml.linalg.Vectors <a href=' /ml/linalg/__init__.py#L780'>dense</a>()</tt>	Create a dense vector of 64-bit floats from a python list or numbers.
<tt style='background-color:#E8E8E8;'> ml.linalg.Vectors <a href=' /ml/linalg/__init__.py#L795'>squared_distance</a>(v1,v2)</tt>	Squared distance between two vectors.
<tt style='background-color:#E8E8E8;'> ml.linalg.Vectors <a href=' /ml/linalg/__init__.py#L810'>norm</a>(vector,p)</tt>	Find norm of the given vector.
<tt style='background-color:#E8E8E8;'> ml.linalg.Vectors <a href=' /ml/linalg/__init__.py#L821'>_equals</a>(v1_indices,v1_values,v2_indices,v2_values)</tt>	Check equality between sparse/dense vectors v1_indices and v2_indices assume to be strictly increasing.
<tt style='background-color:#E8E8E8;'> ml.linalg.Matrix <a href=' /ml/linalg/__init__.py#L859'>toArray</a>()</tt>	Returns its elements in a numpy ndarray.
<tt style='background-color:#E8E8E8;'> ml.linalg.Matrix <a href=' /ml/linalg/__init__.py#L865'>_convert_to_array</a>(array_like,dtype)</tt>	Convert matrix attributes which are array-like or buffer to array.
<tt style='background-color:#E8E8E8;'> ml.linalg.DenseMatrix <a href=' /ml/linalg/__init__.py#L890'>__str__</a>()</tt>	Pretty printing of a densematrix >>> dm = densematrix(2 2 range 4.
<tt style='background-color:#E8E8E8;'> ml.linalg.DenseMatrix <a href=' /ml/linalg/__init__.py#L911'>__repr__</a>()</tt>	Representation of a densematrix >>> dm = densematrix(2 2 range 4.
<tt style='background-color:#E8E8E8;'> ml.linalg.DenseMatrix <a href=' /ml/linalg/__init__.py#L934'>toArray</a>()</tt>	Return an numpy ndarray.
<tt style='background-color:#E8E8E8;'> ml.linalg.DenseMatrix <a href=' /ml/linalg/__init__.py#L949'>toSparse</a>()</tt>	Convert to sparsematrix.
<tt style='background-color:#E8E8E8;'> ml.linalg.SparseMatrix <a href=' /ml/linalg/__init__.py#L1010'>__str__</a>()</tt>	Pretty printing of a sparsematrix >>> sm1 = sparsematrix(2 2 [0 2 3], [0 1 1], [2 3 4]).
<tt style='background-color:#E8E8E8;'> ml.linalg.SparseMatrix <a href=' /ml/linalg/__init__.py#L1056'>__repr__</a>()</tt>	Representation of a sparsematrix >>> sm1 = sparsematrix(2 2 [0 2 3], [0 1 1], [2 3 4]).
<tt style='background-color:#E8E8E8;'> ml.linalg.SparseMatrix <a href=' /ml/linalg/__init__.py#L1118'>toArray</a>()</tt>	Return an numpy ndarray.
<tt style='background-color:#E8E8E8;'> ml.linalg.Matrices <a href=' /ml/linalg/__init__.py#L1142'>dense</a>(numRows,numCols,values)</tt>	Create a densematrix.
<tt style='background-color:#E8E8E8;'> ml.linalg.Matrices <a href=' /ml/linalg/__init__.py#L1149'>sparse</a>(numRows,numCols,colPtrs,rowIndices)</tt>	Create a sparsematrix.
<tt style='background-color:#E8E8E8;'> mllib.MatrixFactorizationModel <a href=' /mllib/recommendation.py#L131'>predict</a>(user,product)</tt>	Predicts rating for the given user and product.
<tt style='background-color:#E8E8E8;'> mllib.MatrixFactorizationModel <a href=' /mllib/recommendation.py#L138'>predictAll</a>(user_product)</tt>	Returns a list of predicted ratings for input user and product pairs.
<tt style='background-color:#E8E8E8;'> mllib.MatrixFactorizationModel <a href=' /mllib/recommendation.py#L150'>userFeatures</a>()</tt>	Returns a paired rdd where the first element is the user and the second is an array of features corresponding to that user.
<tt style='background-color:#E8E8E8;'> mllib.MatrixFactorizationModel <a href=' /mllib/recommendation.py#L158'>productFeatures</a>()</tt>	Returns a paired rdd where the first element is the product and the second is an array of features corresponding to that product.
<tt style='background-color:#E8E8E8;'> mllib.MatrixFactorizationModel <a href=' /mllib/recommendation.py#L166'>recommendUsers</a>(product,num)</tt>	Recommends the top "num" number of users for a given product and returns a list of rating objects sorted by the predicted rating in.
<tt style='background-color:#E8E8E8;'> mllib.MatrixFactorizationModel <a href=' /mllib/recommendation.py#L175'>recommendProducts</a>(user,num)</tt>	Recommends the top "num" number of products for a given user and returns a list of rating objects sorted by the predicted rating in.
<tt style='background-color:#E8E8E8;'> mllib.MatrixFactorizationModel <a href=' /mllib/recommendation.py#L184'>recommendProductsForUsers</a>(num)</tt>	Recommends the top "num" number of products for all users the.
<tt style='background-color:#E8E8E8;'> mllib.MatrixFactorizationModel <a href=' /mllib/recommendation.py#L191'>recommendUsersForProducts</a>(num)</tt>	Recommends the top "num" number of users for all products the.
<tt style='background-color:#E8E8E8;'> mllib.MatrixFactorizationModel <a href=' /mllib/recommendation.py#L199'>rank</a>()</tt>	Rank for the features in this model.
<tt style='background-color:#E8E8E8;'> mllib.MatrixFactorizationModel <a href=' /mllib/recommendation.py#L205'>load</a>(cls,sc,path)</tt>	Load a model from the given path.
<tt style='background-color:#E8E8E8;'> mllib.ALS <a href=' /mllib/recommendation.py#L238'>train</a>(cls,ratings,rank,iterations)</tt>	Train a matrix factorization model given an rdd of ratings by users for a subset of products.
<tt style='background-color:#E8E8E8;'> mllib.ALS <a href=' /mllib/recommendation.py#L276'>trainImplicit</a>(cls,ratings,rank,iterations)</tt>	Train a matrix factorization model given an rdd of 'implicit preferences' of users for a subset of products.
<tt style='background-color:#E8E8E8;'> mllib.MLUtils <a href=' /mllib/util.py#L40'>_parse_libsvm_line</a>(line,multiclass)</tt>	Parses a line in libsvm format into label indices values.
<tt style='background-color:#E8E8E8;'> mllib.MLUtils <a href=' /mllib/util.py#L58'>_convert_labeled_point_to_libsvm</a>(p)</tt>	Converts a labeledpoint to a string in libsvm format.
<tt style='background-color:#E8E8E8;'> mllib.MLUtils <a href=' /mllib/util.py#L74'>loadLibSVMFile</a>(sc,path,numFeatures,minPartitions)</tt>	Loads labeled data in the libsvm format into an rdd of labeledpoint.
<tt style='background-color:#E8E8E8;'> mllib.MLUtils <a href=' /mllib/util.py#L129'>saveAsLibSVMFile</a>(data,dir)</tt>	Save labeled data in libsvm format.
<tt style='background-color:#E8E8E8;'> mllib.MLUtils <a href=' /mllib/util.py#L154'>loadLabeledPoints</a>(sc,path,minPartitions)</tt>	Load labeled points saved using rdd saveastextfile.
<tt style='background-color:#E8E8E8;'> mllib.MLUtils <a href=' /mllib/util.py#L180'>appendBias</a>(data)</tt>	Returns a new vector with 1 0 bias appended to.
<tt style='background-color:#E8E8E8;'> mllib.MLUtils <a href=' /mllib/util.py#L195'>loadVectors</a>(sc,path)</tt>	Loads vectors saved using rdd[vector] saveastextfile.
<tt style='background-color:#E8E8E8;'> mllib.MLUtils <a href=' /mllib/util.py#L204'>convertVectorColumnsToML</a>(dataset)</tt>	Converts vector columns in an input dataframe from the :py class pyspark.
<tt style='background-color:#E8E8E8;'> mllib.MLUtils <a href=' /mllib/util.py#L244'>convertVectorColumnsFromML</a>(dataset)</tt>	Converts vector columns in an input dataframe to the :py class pyspark.
<tt style='background-color:#E8E8E8;'> mllib.MLUtils <a href=' /mllib/util.py#L284'>convertMatrixColumnsToML</a>(dataset)</tt>	Converts matrix columns in an input dataframe from the :py class pyspark.
<tt style='background-color:#E8E8E8;'> mllib.MLUtils <a href=' /mllib/util.py#L324'>convertMatrixColumnsFromML</a>(dataset)</tt>	Converts matrix columns in an input dataframe to the :py class pyspark.
<tt style='background-color:#E8E8E8;'> mllib.Saveable <a href=' /mllib/util.py#L372'>save</a>(sc,path)</tt>	Save this model to the given path.
<tt style='background-color:#E8E8E8;'> mllib.JavaSaveable <a href=' /mllib/util.py#L399'>save</a>(sc,path)</tt>	Save this model to the given path.
<tt style='background-color:#E8E8E8;'> mllib.Loader <a href=' /mllib/util.py#L416'>load</a>(cls,sc,path)</tt>	Load a model from the given path the model should have been.
<tt style='background-color:#E8E8E8;'> mllib.JavaLoader <a href=' /mllib/util.py#L439'>_java_loader_class</a>(cls)</tt>	Returns the full class name of the java loader the default.
<tt style='background-color:#E8E8E8;'> mllib.JavaLoader <a href=' /mllib/util.py#L449'>_load_java</a>(cls,sc,path)</tt>	Load a java model from the given path.
<tt style='background-color:#E8E8E8;'> mllib.JavaLoader <a href=' /mllib/util.py#L460'>load</a>(cls,sc,path)</tt>	Load a model from the given path.
<tt style='background-color:#E8E8E8;'> mllib.LinearDataGenerator <a href=' /mllib/util.py#L474'>generateLinearInput</a>(intercept,weights,xMean,xVariance)</tt>	:param intercept bias factor the term c in x'w + c.
<tt style='background-color:#E8E8E8;'> mllib.LinearDataGenerator <a href=' /mllib/util.py#L497'>generateLinearRDD</a>(sc,nexamples,nfeatures,eps)</tt>	Generate an rdd of labeledpoints.
<tt style='background-color:#E8E8E8;'> mllib. <a href=' /mllib/common.py#L62'>_to_java_object_rdd</a>(rdd)</tt>	Return a javardd of object by unpickling it will convert each python object into java object by pyrolite whenever the.
<tt style='background-color:#E8E8E8;'> mllib. <a href=' /mllib/common.py#L72'>_py2java</a>(sc,obj)</tt>	Convert python object into java.
<tt style='background-color:#E8E8E8;'> mllib. <a href=' /mllib/common.py#L120'>callJavaFunc</a>(sc,func)</tt>	Call java function.
<tt style='background-color:#E8E8E8;'> mllib. <a href=' /mllib/common.py#L126'>callMLlibFunc</a>(name)</tt>	Call api in pythonmllibapi.
<tt style='background-color:#E8E8E8;'> mllib.JavaModelWrapper <a href=' /mllib/common.py#L144'>call</a>(name)</tt>	Call method of java_model.
<tt style='background-color:#E8E8E8;'> mllib. <a href=' /mllib/common.py#L149'>inherit_doc</a>(cls)</tt>	A decorator that makes a class inherit documentation from its parents.
<tt style='background-color:#E8E8E8;'> mllib.BisectingKMeansModel <a href=' /mllib/clustering.py#L70'>clusterCenters</a>()</tt>	Get the cluster centers represented as a list of numpy arrays.
<tt style='background-color:#E8E8E8;'> mllib.BisectingKMeansModel <a href=' /mllib/clustering.py#L77'>k</a>()</tt>	Get the number of clusters.
<tt style='background-color:#E8E8E8;'> mllib.BisectingKMeansModel <a href=' /mllib/clustering.py#L83'>predict</a>(x)</tt>	Find the cluster that each of the points belongs to in this model.
<tt style='background-color:#E8E8E8;'> mllib.BisectingKMeansModel <a href=' /mllib/clustering.py#L102'>computeCost</a>(x)</tt>	Return the bisecting k-means cost sum of squared distances of points to their nearest center for this model on the given.
<tt style='background-color:#E8E8E8;'> mllib.BisectingKMeans <a href=' /mllib/clustering.py#L141'>train</a>(rdd,k,maxIterations,minDivisibleClusterSize)</tt>	Runs the bisecting k-means algorithm return the model.
<tt style='background-color:#E8E8E8;'> mllib.KMeansModel <a href=' /mllib/clustering.py#L231'>clusterCenters</a>()</tt>	Get the cluster centers represented as a list of numpy arrays.
<tt style='background-color:#E8E8E8;'> mllib.KMeansModel <a href=' /mllib/clustering.py#L237'>k</a>()</tt>	Total number of clusters.
<tt style='background-color:#E8E8E8;'> mllib.KMeansModel <a href=' /mllib/clustering.py#L243'>predict</a>(x)</tt>	Find the cluster that each of the points belongs to in this model.
<tt style='background-color:#E8E8E8;'> mllib.KMeansModel <a href=' /mllib/clustering.py#L268'>computeCost</a>(rdd)</tt>	Return the k-means cost sum of squared distances of points to their nearest center for this model on the given.
<tt style='background-color:#E8E8E8;'> mllib.KMeansModel <a href=' /mllib/clustering.py#L282'>save</a>(sc,path)</tt>	Save this model to the given path.
<tt style='background-color:#E8E8E8;'> mllib.KMeansModel <a href=' /mllib/clustering.py#L291'>load</a>(cls,sc,path)</tt>	Load a model from the given path.
<tt style='background-color:#E8E8E8;'> mllib.KMeans <a href=' /mllib/clustering.py#L306'>train</a>(cls,rdd,k,maxIterations)</tt>	Train a k-means clustering model.
<tt style='background-color:#E8E8E8;'> mllib.GaussianMixtureModel <a href=' /mllib/clustering.py#L429'>weights</a>()</tt>	Weights for each gaussian distribution in the mixture where weights[i] is the weight for gaussian i and weights.
<tt style='background-color:#E8E8E8;'> mllib.GaussianMixtureModel <a href=' /mllib/clustering.py#L438'>gaussians</a>()</tt>	Array of multivariategaussian where gaussians[i] represents the multivariate gaussian normal distribution for gaussian i.
<tt style='background-color:#E8E8E8;'> mllib.GaussianMixtureModel <a href=' /mllib/clustering.py#L449'>k</a>()</tt>	Number of gaussians in mixture.
<tt style='background-color:#E8E8E8;'> mllib.GaussianMixtureModel <a href=' /mllib/clustering.py#L455'>predict</a>(x)</tt>	Find the cluster to which the point 'x' or each point in rdd 'x' has maximum membership in this model.
<tt style='background-color:#E8E8E8;'> mllib.GaussianMixtureModel <a href=' /mllib/clustering.py#L474'>predictSoft</a>(x)</tt>	Find the membership of point 'x' or each point in rdd 'x' to all mixture components.
<tt style='background-color:#E8E8E8;'> mllib.GaussianMixtureModel <a href=' /mllib/clustering.py#L493'>load</a>(cls,sc,path)</tt>	Load the gaussianmixturemodel from disk.
<tt style='background-color:#E8E8E8;'> mllib.GaussianMixture <a href=' /mllib/clustering.py#L514'>train</a>(cls,rdd,k,convergenceTol)</tt>	Train a gaussian mixture clustering model.
<tt style='background-color:#E8E8E8;'> mllib.PowerIterationClusteringModel <a href=' /mllib/clustering.py#L608'>k</a>()</tt>	Returns the number of clusters.
<tt style='background-color:#E8E8E8;'> mllib.PowerIterationClusteringModel <a href=' /mllib/clustering.py#L616'>assignments</a>()</tt>	Returns the cluster assignments of this model.
<tt style='background-color:#E8E8E8;'> mllib.PowerIterationClusteringModel <a href=' /mllib/clustering.py#L624'>load</a>(cls,sc,path)</tt>	Load a model from the given path.
<tt style='background-color:#E8E8E8;'> mllib.PowerIterationClustering <a href=' /mllib/clustering.py#L647'>train</a>(cls,rdd,k,maxIterations)</tt>	:param rdd an rdd of (i j s\ :sub ij\) tuples representing the.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeansModel <a href=' /mllib/clustering.py#L745'>clusterWeights</a>()</tt>	Return the cluster weights.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeansModel <a href=' /mllib/clustering.py#L751'>update</a>(data,decayFactor,timeUnit)</tt>	Update the centroids according to data.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeans <a href=' /mllib/clustering.py#L811'>latestModel</a>()</tt>	Return the latest model.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeans <a href=' /mllib/clustering.py#L826'>setK</a>(k)</tt>	Set number of clusters.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeans <a href=' /mllib/clustering.py#L832'>setDecayFactor</a>(decayFactor)</tt>	Set decay factor.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeans <a href=' /mllib/clustering.py#L838'>setHalfLife</a>(halfLife,timeUnit)</tt>	Set number of batches after which the centroids of that particular batch has half the weightage.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeans <a href=' /mllib/clustering.py#L848'>setInitialCenters</a>(centers,weights)</tt>	Set initial centers should be set before calling trainon.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeans <a href=' /mllib/clustering.py#L856'>setRandomCenters</a>(dim,weight,seed)</tt>	Set the initial centres to be random samples from a gaussian population with constant weights.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeans <a href=' /mllib/clustering.py#L868'>trainOn</a>(dstream)</tt>	Train the model on the incoming dstream.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeans <a href=' /mllib/clustering.py#L878'>predictOn</a>(dstream)</tt>	Make predictions on a dstream.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeans <a href=' /mllib/clustering.py#L887'>predictOnValues</a>(dstream)</tt>	Make predictions on a keyed dstream.
<tt style='background-color:#E8E8E8;'> mllib.LDAModel <a href=' /mllib/clustering.py#L945'>topicsMatrix</a>()</tt>	Inferred topics where each topic is represented by a distribution over terms.
<tt style='background-color:#E8E8E8;'> mllib.LDAModel <a href=' /mllib/clustering.py#L950'>vocabSize</a>()</tt>	Vocabulary size number of terms or terms in the vocabulary.
<tt style='background-color:#E8E8E8;'> mllib.LDAModel <a href=' /mllib/clustering.py#L955'>describeTopics</a>(maxTermsPerTopic)</tt>	Return the topics described by weighted terms.
<tt style='background-color:#E8E8E8;'> mllib.LDAModel <a href=' /mllib/clustering.py#L975'>load</a>(cls,sc,path)</tt>	Load the ldamodel from disk.
<tt style='background-color:#E8E8E8;'> mllib.LDA <a href=' /mllib/clustering.py#L998'>train</a>(cls,rdd,k,maxIterations)</tt>	Train a lda model.
<tt style='background-color:#E8E8E8;'> mllib.FPGrowthModel <a href=' /mllib/fpm.py#L51'>freqItemsets</a>()</tt>	Returns the frequent itemsets of this model.
<tt style='background-color:#E8E8E8;'> mllib.FPGrowthModel <a href=' /mllib/fpm.py#L58'>load</a>(cls,sc,path)</tt>	Load a model from the given path.
<tt style='background-color:#E8E8E8;'> mllib.FPGrowth <a href=' /mllib/fpm.py#L76'>train</a>(cls,data,minSupport,numPartitions)</tt>	Computes an fp-growth model that contains frequent itemsets.
<tt style='background-color:#E8E8E8;'> mllib.PrefixSpanModel <a href=' /mllib/fpm.py#L122'>freqSequences</a>()</tt>	Gets frequent sequences.
<tt style='background-color:#E8E8E8;'> mllib.PrefixSpan <a href=' /mllib/fpm.py#L138'>train</a>(cls,data,minSupport,maxPatternLength)</tt>	Finds the complete set of frequent sequential patterns in the input sequences of itemsets.
<tt style='background-color:#E8E8E8;'> mllib.RandomRDDs <a href=' /mllib/random.py#L47'>uniformRDD</a>(sc,size,numPartitions,seed)</tt>	Generates an rdd comprised of i i d samples from the.
<tt style='background-color:#E8E8E8;'> mllib.RandomRDDs <a href=' /mllib/random.py#L78'>normalRDD</a>(sc,size,numPartitions,seed)</tt>	Generates an rdd comprised of i i d samples from the standard normal.
<tt style='background-color:#E8E8E8;'> mllib.RandomRDDs <a href=' /mllib/random.py#L107'>logNormalRDD</a>(sc,mean,std,size)</tt>	Generates an rdd comprised of i i d samples from the log normal.
<tt style='background-color:#E8E8E8;'> mllib.RandomRDDs <a href=' /mllib/random.py#L140'>poissonRDD</a>(sc,mean,size,numPartitions)</tt>	Generates an rdd comprised of i i d samples from the poisson.
<tt style='background-color:#E8E8E8;'> mllib.RandomRDDs <a href=' /mllib/random.py#L167'>exponentialRDD</a>(sc,mean,size,numPartitions)</tt>	Generates an rdd comprised of i i d samples from the exponential.
<tt style='background-color:#E8E8E8;'> mllib.RandomRDDs <a href=' /mllib/random.py#L194'>gammaRDD</a>(sc,shape,scale,size)</tt>	Generates an rdd comprised of i i d samples from the gamma.
<tt style='background-color:#E8E8E8;'> mllib.RandomRDDs <a href=' /mllib/random.py#L226'>uniformVectorRDD</a>(sc,numRows,numCols,numPartitions)</tt>	Generates an rdd comprised of vectors containing i i d samples drawn.
<tt style='background-color:#E8E8E8;'> mllib.RandomRDDs <a href=' /mllib/random.py#L252'>normalVectorRDD</a>(sc,numRows,numCols,numPartitions)</tt>	Generates an rdd comprised of vectors containing i i d samples drawn.
<tt style='background-color:#E8E8E8;'> mllib.RandomRDDs <a href=' /mllib/random.py#L278'>logNormalVectorRDD</a>(sc,mean,std,numRows)</tt>	Generates an rdd comprised of vectors containing i i d samples drawn.
<tt style='background-color:#E8E8E8;'> mllib.RandomRDDs <a href=' /mllib/random.py#L313'>poissonVectorRDD</a>(sc,mean,numRows,numCols)</tt>	Generates an rdd comprised of vectors containing i i d samples drawn.
<tt style='background-color:#E8E8E8;'> mllib.RandomRDDs <a href=' /mllib/random.py#L344'>exponentialVectorRDD</a>(sc,mean,numRows,numCols)</tt>	Generates an rdd comprised of vectors containing i i d samples drawn.
<tt style='background-color:#E8E8E8;'> mllib.RandomRDDs <a href=' /mllib/random.py#L375'>gammaVectorRDD</a>(sc,shape,scale,numRows)</tt>	Generates an rdd comprised of vectors containing i i d samples drawn.
<tt style='background-color:#E8E8E8;'> mllib.LinearModel <a href=' /mllib/regression.py#L83'>weights</a>()</tt>	Weights computed for every feature.
<tt style='background-color:#E8E8E8;'> mllib.LinearModel <a href=' /mllib/regression.py#L89'>intercept</a>()</tt>	Intercept computed for this model.
<tt style='background-color:#E8E8E8;'> mllib.LinearRegressionModelBase <a href=' /mllib/regression.py#L113'>predict</a>(x)</tt>	Predict the value of the dependent variable given a vector or an rdd of vectors containing values for the independent variables.
<tt style='background-color:#E8E8E8;'> mllib.LinearRegressionModel <a href=' /mllib/regression.py#L184'>save</a>(sc,path)</tt>	Save a linearregressionmodel.
<tt style='background-color:#E8E8E8;'> mllib.LinearRegressionModel <a href=' /mllib/regression.py#L191'>load</a>(cls,sc,path)</tt>	Load a linearregressionmodel.
<tt style='background-color:#E8E8E8;'> mllib.LinearRegressionWithSGD <a href=' /mllib/regression.py#L227'>train</a>(cls,data,iterations,step)</tt>	Train a linear regression model using stochastic gradient descent sgd.
<tt style='background-color:#E8E8E8;'> mllib.LassoModel <a href=' /mllib/regression.py#L351'>save</a>(sc,path)</tt>	Save a lassomodel.
<tt style='background-color:#E8E8E8;'> mllib.LassoModel <a href=' /mllib/regression.py#L358'>load</a>(cls,sc,path)</tt>	Load a lassomodel.
<tt style='background-color:#E8E8E8;'> mllib.LassoWithSGD <a href=' /mllib/regression.py#L376'>train</a>(cls,data,iterations,step)</tt>	Train a regression model with l1-regularization using stochastic gradient descent.
<tt style='background-color:#E8E8E8;'> mllib.RidgeRegressionModel <a href=' /mllib/regression.py#L494'>save</a>(sc,path)</tt>	Save a ridgeregressionmode.
<tt style='background-color:#E8E8E8;'> mllib.RidgeRegressionModel <a href=' /mllib/regression.py#L501'>load</a>(cls,sc,path)</tt>	Load a ridgeregressionmode.
<tt style='background-color:#E8E8E8;'> mllib.RidgeRegressionWithSGD <a href=' /mllib/regression.py#L520'>train</a>(cls,data,iterations,step)</tt>	Train a regression model with l2-regularization using stochastic gradient descent.
<tt style='background-color:#E8E8E8;'> mllib.IsotonicRegressionModel <a href=' /mllib/regression.py#L623'>predict</a>(x)</tt>	Predict labels for provided features.
<tt style='background-color:#E8E8E8;'> mllib.IsotonicRegressionModel <a href=' /mllib/regression.py#L649'>save</a>(sc,path)</tt>	Save an isotonicregressionmodel.
<tt style='background-color:#E8E8E8;'> mllib.IsotonicRegressionModel <a href=' /mllib/regression.py#L658'>load</a>(cls,sc,path)</tt>	Load an isotonicregressionmodel.
<tt style='background-color:#E8E8E8;'> mllib.IsotonicRegression <a href=' /mllib/regression.py#L693'>train</a>(cls,data,isotonic)</tt>	Train an isotonic regression model on the given data.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLinearAlgorithm <a href=' /mllib/regression.py#L721'>latestModel</a>()</tt>	Returns the latest model.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLinearAlgorithm <a href=' /mllib/regression.py#L736'>predictOn</a>(dstream)</tt>	Use the model to make predictions on batches of data from a dstream.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLinearAlgorithm <a href=' /mllib/regression.py#L748'>predictOnValues</a>(dstream)</tt>	Use the model to make predictions on the values of a dstream and carry over its keys.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLinearRegressionWithSGD <a href=' /mllib/regression.py#L798'>setInitialWeights</a>(initialWeights)</tt>	Set the initial value of weights.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLinearRegressionWithSGD <a href=' /mllib/regression.py#L809'>trainOn</a>(dstream)</tt>	Train the model on the incoming dstream.
<tt style='background-color:#E8E8E8;'> mllib.MLLibStreamingTestCase <a href=' /mllib/tests.py#L105'>_eventually</a>(condition,timeout,catch_assertions)</tt>	Wait a given amount of time for a condition to pass else fail with an error.
<tt style='background-color:#E8E8E8;'> mllib.SciPyTests <a href=' /mllib/tests.py#L887'>scipy_matrix</a>(size,values)</tt>	Create a column scipy matrix from a dictionary of values.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeansTest <a href=' /mllib/tests.py#L1188'>test_model_params</a>()</tt>	Test that the model params are set correctly.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeansTest <a href=' /mllib/tests.py#L1205'>test_accuracy_for_single_center</a>()</tt>	Test that parameters obtained are correct for a single center.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeansTest <a href=' /mllib/tests.py#L1239'>test_trainOn_model</a>()</tt>	Test the model on toy data with four clusters.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeansTest <a href=' /mllib/tests.py#L1266'>test_predictOn_model</a>()</tt>	Test that the model predicts correctly on toy data.
<tt style='background-color:#E8E8E8;'> mllib.StreamingKMeansTest <a href=' /mllib/tests.py#L1294'>test_trainOn_predictOn</a>()</tt>	Test that prediction happens on the updated model.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLogisticRegressionWithSGDTests <a href=' /mllib/tests.py#L1348'>generateLogisticInput</a>(offset,scale,nPoints,seed)</tt>	Generate 1 / (1 + exp(-x * scale + offset)) where.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLogisticRegressionWithSGDTests <a href=' /mllib/tests.py#L1369'>test_parameter_accuracy</a>()</tt>	Test that the final value of weights is close to the desired value.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLogisticRegressionWithSGDTests <a href=' /mllib/tests.py#L1392'>test_convergence</a>()</tt>	Test that weights converge to the required value on toy data.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLogisticRegressionWithSGDTests <a href=' /mllib/tests.py#L1428'>test_predictions</a>()</tt>	Test predicted values on a toy model.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLogisticRegressionWithSGDTests <a href=' /mllib/tests.py#L1457'>test_training_and_prediction</a>()</tt>	Test that the model improves on toy data with no of batches.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLinearRegressionWithTests <a href=' /mllib/tests.py#L1500'>test_parameter_accuracy</a>()</tt>	Test that coefs are predicted accurately by fitting on toy data.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLinearRegressionWithTests <a href=' /mllib/tests.py#L1529'>test_parameter_convergence</a>()</tt>	Test that the model parameters improve with streaming data.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLinearRegressionWithTests <a href=' /mllib/tests.py#L1559'>test_prediction</a>()</tt>	Test prediction on a model with weights already set.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLinearRegressionWithTests <a href=' /mllib/tests.py#L1593'>test_train_prediction</a>()</tt>	Test that error on test data improves as model is trained.
<tt style='background-color:#E8E8E8;'> mllib.LinearClassificationModel <a href=' /mllib/classification.py#L48'>setThreshold</a>(value)</tt>	Sets the threshold that separates positive predictions from negative predictions.
<tt style='background-color:#E8E8E8;'> mllib.LinearClassificationModel <a href=' /mllib/classification.py#L59'>threshold</a>()</tt>	Returns the threshold if any used for converting raw prediction scores into 0/1 predictions.
<tt style='background-color:#E8E8E8;'> mllib.LinearClassificationModel <a href=' /mllib/classification.py#L69'>clearThreshold</a>()</tt>	Clears the threshold so that predict will output raw prediction scores.
<tt style='background-color:#E8E8E8;'> mllib.LinearClassificationModel <a href=' /mllib/classification.py#L77'>predict</a>(test)</tt>	Predict values for a single data point or an rdd of points using the model trained.
<tt style='background-color:#E8E8E8;'> mllib.LogisticRegressionModel <a href=' /mllib/classification.py#L178'>numFeatures</a>()</tt>	Dimension of the features.
<tt style='background-color:#E8E8E8;'> mllib.LogisticRegressionModel <a href=' /mllib/classification.py#L186'>numClasses</a>()</tt>	Number of possible outcomes for k classes classification problem in multinomial logistic regression.
<tt style='background-color:#E8E8E8;'> mllib.LogisticRegressionModel <a href=' /mllib/classification.py#L195'>predict</a>(x)</tt>	Predict values for a single data point or an rdd of points using the model trained.
<tt style='background-color:#E8E8E8;'> mllib.LogisticRegressionModel <a href=' /mllib/classification.py#L234'>save</a>(sc,path)</tt>	Save this model to the given path.
<tt style='background-color:#E8E8E8;'> mllib.LogisticRegressionModel <a href=' /mllib/classification.py#L243'>load</a>(cls,sc,path)</tt>	Load a model from the given path.
<tt style='background-color:#E8E8E8;'> mllib.LogisticRegressionWithSGD <a href=' /mllib/classification.py#L267'>train</a>(cls,data,iterations,step)</tt>	Train a logistic regression model on the given data.
<tt style='background-color:#E8E8E8;'> mllib.LogisticRegressionWithLBFGS <a href=' /mllib/classification.py#L328'>train</a>(cls,data,iterations,initialWeights)</tt>	Train a logistic regression model on the given data.
<tt style='background-color:#E8E8E8;'> mllib.SVMModel <a href=' /mllib/classification.py#L457'>predict</a>(x)</tt>	Predict values for a single data point or an rdd of points using the model trained.
<tt style='background-color:#E8E8E8;'> mllib.SVMModel <a href=' /mllib/classification.py#L473'>save</a>(sc,path)</tt>	Save this model to the given path.
<tt style='background-color:#E8E8E8;'> mllib.SVMModel <a href=' /mllib/classification.py#L482'>load</a>(cls,sc,path)</tt>	Load a model from the given path.
<tt style='background-color:#E8E8E8;'> mllib.SVMWithSGD <a href=' /mllib/classification.py#L503'>train</a>(cls,data,iterations,step)</tt>	Train a support vector machine on the given data.
<tt style='background-color:#E8E8E8;'> mllib.NaiveBayesModel <a href=' /mllib/classification.py#L611'>predict</a>(x)</tt>	Return the most likely class for a data vector.
<tt style='background-color:#E8E8E8;'> mllib.NaiveBayesModel <a href=' /mllib/classification.py#L622'>save</a>(sc,path)</tt>	Save this model to the given path.
<tt style='background-color:#E8E8E8;'> mllib.NaiveBayesModel <a href=' /mllib/classification.py#L633'>load</a>(cls,sc,path)</tt>	Load a model from the given path.
<tt style='background-color:#E8E8E8;'> mllib.NaiveBayes <a href=' /mllib/classification.py#L653'>train</a>(cls,data,lambda_)</tt>	Train a naive bayes model given an rdd of label features vectors.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLogisticRegressionWithSGD <a href=' /mllib/classification.py#L721'>setInitialWeights</a>(initialWeights)</tt>	Set the initial value of weights.
<tt style='background-color:#E8E8E8;'> mllib.StreamingLogisticRegressionWithSGD <a href=' /mllib/classification.py#L735'>trainOn</a>(dstream)</tt>	Train the model on the incoming dstream.
<tt style='background-color:#E8E8E8;'> mllib.BinaryClassificationMetrics <a href=' /mllib/evaluation.py#L57'>areaUnderROC</a>()</tt>	Computes the area under the receiver operating characteristic roc curve.
<tt style='background-color:#E8E8E8;'> mllib.BinaryClassificationMetrics <a href=' /mllib/evaluation.py#L66'>areaUnderPR</a>()</tt>	Computes the area under the precision-recall curve.
<tt style='background-color:#E8E8E8;'> mllib.BinaryClassificationMetrics <a href=' /mllib/evaluation.py#L74'>unpersist</a>()</tt>	Unpersists intermediate rdds used in the computation.
<tt style='background-color:#E8E8E8;'> mllib.RegressionMetrics <a href=' /mllib/evaluation.py#L116'>explainedVariance</a>()</tt>	Returns the explained variance regression score.
<tt style='background-color:#E8E8E8;'> mllib.RegressionMetrics <a href=' /mllib/evaluation.py#L125'>meanAbsoluteError</a>()</tt>	Returns the mean absolute error which is a risk function corresponding to the expected value of the absolute error loss or l1-norm loss.
<tt style='background-color:#E8E8E8;'> mllib.RegressionMetrics <a href=' /mllib/evaluation.py#L134'>meanSquaredError</a>()</tt>	Returns the mean squared error which is a risk function corresponding to the expected value of the squared error loss or quadratic loss.
<tt style='background-color:#E8E8E8;'> mllib.RegressionMetrics <a href=' /mllib/evaluation.py#L143'>rootMeanSquaredError</a>()</tt>	Returns the root mean squared error which is defined as the square root of the mean squared error.
<tt style='background-color:#E8E8E8;'> mllib.RegressionMetrics <a href=' /mllib/evaluation.py#L152'>r2</a>()</tt>	Returns r^2^, the coefficient of determination.
<tt style='background-color:#E8E8E8;'> mllib.MulticlassMetrics <a href=' /mllib/evaluation.py#L208'>confusionMatrix</a>()</tt>	Returns confusion matrix predicted classes are in columns they are ordered by class label ascending as in "labels".
<tt style='background-color:#E8E8E8;'> mllib.MulticlassMetrics <a href=' /mllib/evaluation.py#L216'>truePositiveRate</a>(label)</tt>	Returns true positive rate for a given label category.
<tt style='background-color:#E8E8E8;'> mllib.MulticlassMetrics <a href=' /mllib/evaluation.py#L223'>falsePositiveRate</a>(label)</tt>	Returns false positive rate for a given label category.
<tt style='background-color:#E8E8E8;'> mllib.MulticlassMetrics <a href=' /mllib/evaluation.py#L230'>precision</a>(label)</tt>	Returns precision or precision for a given label category if specified.
<tt style='background-color:#E8E8E8;'> mllib.MulticlassMetrics <a href=' /mllib/evaluation.py#L242'>recall</a>(label)</tt>	Returns recall or recall for a given label category if specified.
<tt style='background-color:#E8E8E8;'> mllib.MulticlassMetrics <a href=' /mllib/evaluation.py#L254'>fMeasure</a>(label,beta)</tt>	Returns f-measure or f-measure for a given label category if specified.
<tt style='background-color:#E8E8E8;'> mllib.MulticlassMetrics <a href=' /mllib/evaluation.py#L272'>accuracy</a>()</tt>	Returns accuracy equals to the total number of correctly classified instances out of the total number of instances.
<tt style='background-color:#E8E8E8;'> mllib.MulticlassMetrics <a href=' /mllib/evaluation.py#L281'>weightedTruePositiveRate</a>()</tt>	Returns weighted true positive rate.
<tt style='background-color:#E8E8E8;'> mllib.MulticlassMetrics <a href=' /mllib/evaluation.py#L290'>weightedFalsePositiveRate</a>()</tt>	Returns weighted false positive rate.
<tt style='background-color:#E8E8E8;'> mllib.MulticlassMetrics <a href=' /mllib/evaluation.py#L298'>weightedRecall</a>()</tt>	Returns weighted averaged recall.
<tt style='background-color:#E8E8E8;'> mllib.MulticlassMetrics <a href=' /mllib/evaluation.py#L307'>weightedPrecision</a>()</tt>	Returns weighted averaged precision.
<tt style='background-color:#E8E8E8;'> mllib.MulticlassMetrics <a href=' /mllib/evaluation.py#L315'>weightedFMeasure</a>(beta)</tt>	Returns weighted averaged f-measure.
<tt style='background-color:#E8E8E8;'> mllib.RankingMetrics <a href=' /mllib/evaluation.py#L362'>precisionAt</a>(k)</tt>	Compute the average precision of all the queries truncated at ranking position k.
<tt style='background-color:#E8E8E8;'> mllib.RankingMetrics <a href=' /mllib/evaluation.py#L376'>meanAveragePrecision</a>()</tt>	Returns the mean average precision map of all the queries.
<tt style='background-color:#E8E8E8;'> mllib.RankingMetrics <a href=' /mllib/evaluation.py#L386'>ndcgAt</a>(k)</tt>	Compute the average ndcg value of all the queries truncated at ranking position k.
<tt style='background-color:#E8E8E8;'> mllib.MultilabelMetrics <a href=' /mllib/evaluation.py#L449'>precision</a>(label)</tt>	Returns precision or precision for a given label category if specified.
<tt style='background-color:#E8E8E8;'> mllib.MultilabelMetrics <a href=' /mllib/evaluation.py#L459'>recall</a>(label)</tt>	Returns recall or recall for a given label category if specified.
<tt style='background-color:#E8E8E8;'> mllib.MultilabelMetrics <a href=' /mllib/evaluation.py#L469'>f1Measure</a>(label)</tt>	Returns f1measure or f1measure for a given label category if specified.
<tt style='background-color:#E8E8E8;'> mllib.MultilabelMetrics <a href=' /mllib/evaluation.py#L479'>microPrecision</a>()</tt>	Returns micro-averaged label-based precision.
<tt style='background-color:#E8E8E8;'> mllib.MultilabelMetrics <a href=' /mllib/evaluation.py#L488'>microRecall</a>()</tt>	Returns micro-averaged label-based recall.
<tt style='background-color:#E8E8E8;'> mllib.MultilabelMetrics <a href=' /mllib/evaluation.py#L497'>microF1Measure</a>()</tt>	Returns micro-averaged label-based f1-measure.
<tt style='background-color:#E8E8E8;'> mllib.MultilabelMetrics <a href=' /mllib/evaluation.py#L514'>subsetAccuracy</a>()</tt>	Returns subset accuracy.
<tt style='background-color:#E8E8E8;'> mllib.VectorTransformer <a href=' /mllib/feature.py#L52'>transform</a>(vector)</tt>	Applies transformation on a vector.
<tt style='background-color:#E8E8E8;'> mllib.Normalizer <a href=' /mllib/feature.py#L92'>transform</a>(vector)</tt>	Applies unit length normalization on a vector.
<tt style='background-color:#E8E8E8;'> mllib.JavaVectorTransformer <a href=' /mllib/feature.py#L113'>transform</a>(vector)</tt>	Applies transformation on a vector or an rdd[vector].
<tt style='background-color:#E8E8E8;'> mllib.StandardScalerModel <a href=' /mllib/feature.py#L137'>transform</a>(vector)</tt>	Applies standardization transformation on a vector.
<tt style='background-color:#E8E8E8;'> mllib.StandardScalerModel <a href=' /mllib/feature.py#L153'>setWithMean</a>(withMean)</tt>	Setter of the boolean which decides.
<tt style='background-color:#E8E8E8;'> mllib.StandardScalerModel <a href=' /mllib/feature.py#L162'>setWithStd</a>(withStd)</tt>	Setter of the boolean which decides.
<tt style='background-color:#E8E8E8;'> mllib.StandardScalerModel <a href=' /mllib/feature.py#L171'>withStd</a>()</tt>	Returns if the model scales the data to unit standard deviation.
<tt style='background-color:#E8E8E8;'> mllib.StandardScalerModel <a href=' /mllib/feature.py#L179'>withMean</a>()</tt>	Returns if the model centers the data before scaling.
<tt style='background-color:#E8E8E8;'> mllib.StandardScalerModel <a href=' /mllib/feature.py#L187'>std</a>()</tt>	Return the column standard deviation values.
<tt style='background-color:#E8E8E8;'> mllib.StandardScalerModel <a href=' /mllib/feature.py#L195'>mean</a>()</tt>	Return the column mean values.
<tt style='background-color:#E8E8E8;'> mllib.StandardScaler <a href=' /mllib/feature.py#L241'>fit</a>(dataset)</tt>	Computes the mean and variance and stores as a model to be used for later scaling.
<tt style='background-color:#E8E8E8;'> mllib.ChiSqSelectorModel <a href=' /mllib/feature.py#L263'>transform</a>(vector)</tt>	Applies transformation on a vector.
<tt style='background-color:#E8E8E8;'> mllib.ChiSqSelector <a href=' /mllib/feature.py#L330'>setNumTopFeatures</a>(numTopFeatures)</tt>	Set numtopfeature for feature selection by number of top features.
<tt style='background-color:#E8E8E8;'> mllib.ChiSqSelector <a href=' /mllib/feature.py#L339'>setPercentile</a>(percentile)</tt>	Set percentile [0 0 1 0] for feature selection by percentile.
<tt style='background-color:#E8E8E8;'> mllib.ChiSqSelector <a href=' /mllib/feature.py#L348'>setFpr</a>(fpr)</tt>	Set fpr [0 0 1 0] for feature selection by fpr.
<tt style='background-color:#E8E8E8;'> mllib.ChiSqSelector <a href=' /mllib/feature.py#L357'>setFdr</a>(fdr)</tt>	Set fdr [0 0 1 0] for feature selection by fdr.
<tt style='background-color:#E8E8E8;'> mllib.ChiSqSelector <a href=' /mllib/feature.py#L366'>setFwe</a>(fwe)</tt>	Set fwe [0 0 1 0] for feature selection by fwe.
<tt style='background-color:#E8E8E8;'> mllib.ChiSqSelector <a href=' /mllib/feature.py#L375'>setSelectorType</a>(selectorType)</tt>	Set the selector type of the chisqselector.
<tt style='background-color:#E8E8E8;'> mllib.ChiSqSelector <a href=' /mllib/feature.py#L384'>fit</a>(data)</tt>	Returns a chisquared feature selector.
<tt style='background-color:#E8E8E8;'> mllib.PCA <a href=' /mllib/feature.py#L423'>__init__</a>(k)</tt>	:param k number of principal components.
<tt style='background-color:#E8E8E8;'> mllib.PCA <a href=' /mllib/feature.py#L429'>fit</a>(data)</tt>	Computes a [[pcamodel]] that contains the principal components of the input vectors.
<tt style='background-color:#E8E8E8;'> mllib.HashingTF <a href=' /mllib/feature.py#L459'>setBinary</a>(value)</tt>	If true term frequency vector will be binary such that non-zero.
<tt style='background-color:#E8E8E8;'> mllib.HashingTF <a href=' /mllib/feature.py#L469'>indexOf</a>(term)</tt>	Returns the index of the input term.
<tt style='background-color:#E8E8E8;'> mllib.HashingTF <a href=' /mllib/feature.py#L474'>transform</a>(document)</tt>	Transforms the input document list of terms to term frequency vectors or transform the rdd of document to rdd of term.
<tt style='background-color:#E8E8E8;'> mllib.IDFModel <a href=' /mllib/feature.py#L497'>transform</a>(x)</tt>	Transforms term frequency tf vectors to tf-idf vectors.
<tt style='background-color:#E8E8E8;'> mllib.IDFModel <a href=' /mllib/feature.py#L516'>idf</a>()</tt>	Returns the current idf vector.
<tt style='background-color:#E8E8E8;'> mllib.IDF <a href=' /mllib/feature.py#L564'>fit</a>(dataset)</tt>	Computes the inverse document frequency.
<tt style='background-color:#E8E8E8;'> mllib.Word2VecModel <a href=' /mllib/feature.py#L583'>transform</a>(word)</tt>	Transforms a word to its vector representation.
<tt style='background-color:#E8E8E8;'> mllib.Word2VecModel <a href=' /mllib/feature.py#L598'>findSynonyms</a>(word,num)</tt>	Find synonyms of a word.
<tt style='background-color:#E8E8E8;'> mllib.Word2VecModel <a href=' /mllib/feature.py#L614'>getVectors</a>()</tt>	Returns a map of words to their vector representations.
<tt style='background-color:#E8E8E8;'> mllib.Word2VecModel <a href=' /mllib/feature.py#L621'>load</a>(cls,sc,path)</tt>	Load a model from the given path.
<tt style='background-color:#E8E8E8;'> mllib.Word2Vec <a href=' /mllib/feature.py#L689'>__init__</a>()</tt>	Construct word2vec instance.
<tt style='background-color:#E8E8E8;'> mllib.Word2Vec <a href=' /mllib/feature.py#L701'>setVectorSize</a>(vectorSize)</tt>	Sets vector size default 100.
<tt style='background-color:#E8E8E8;'> mllib.Word2Vec <a href=' /mllib/feature.py#L709'>setLearningRate</a>(learningRate)</tt>	Sets initial learning rate default 0 025.
<tt style='background-color:#E8E8E8;'> mllib.Word2Vec <a href=' /mllib/feature.py#L717'>setNumPartitions</a>(numPartitions)</tt>	Sets number of partitions default 1 use a small number for.
<tt style='background-color:#E8E8E8;'> mllib.Word2Vec <a href=' /mllib/feature.py#L726'>setNumIterations</a>(numIterations)</tt>	Sets number of iterations default 1 which should be smaller than or equal to number of partitions.
<tt style='background-color:#E8E8E8;'> mllib.Word2Vec <a href=' /mllib/feature.py#L735'>setSeed</a>(seed)</tt>	Sets random seed.
<tt style='background-color:#E8E8E8;'> mllib.Word2Vec <a href=' /mllib/feature.py#L743'>setMinCount</a>(minCount)</tt>	Sets mincount the minimum number of times a token must appear to be included in the word2vec model's vocabulary default 5.
<tt style='background-color:#E8E8E8;'> mllib.Word2Vec <a href=' /mllib/feature.py#L752'>setWindowSize</a>(windowSize)</tt>	Sets window size default 5.
<tt style='background-color:#E8E8E8;'> mllib.Word2Vec <a href=' /mllib/feature.py#L760'>fit</a>(data)</tt>	Computes the vector representation of each word in vocabulary.
<tt style='background-color:#E8E8E8;'> mllib.ElementwiseProduct <a href=' /mllib/feature.py#L797'>transform</a>(vector)</tt>	Computes the hadamard product of the vector.
<tt style='background-color:#E8E8E8;'> mllib.TreeEnsembleModel <a href=' /mllib/tree.py#L37'>predict</a>(x)</tt>	Predict values for a single data point or an rdd of points using the model trained.
<tt style='background-color:#E8E8E8;'> mllib.TreeEnsembleModel <a href=' /mllib/tree.py#L53'>numTrees</a>()</tt>	Get number of trees in ensemble.
<tt style='background-color:#E8E8E8;'> mllib.TreeEnsembleModel <a href=' /mllib/tree.py#L60'>totalNumNodes</a>()</tt>	Get total number of nodes summed over all trees in the ensemble.
<tt style='background-color:#E8E8E8;'> mllib.TreeEnsembleModel <a href=' /mllib/tree.py#L67'>__repr__</a>()</tt>	Summary of model.
<tt style='background-color:#E8E8E8;'> mllib.DecisionTreeModel <a href=' /mllib/tree.py#L83'>predict</a>(x)</tt>	Predict the label of one or more examples.
<tt style='background-color:#E8E8E8;'> mllib.DecisionTreeModel <a href=' /mllib/tree.py#L102'>numNodes</a>()</tt>	Get number of nodes in tree including leaf nodes.
<tt style='background-color:#E8E8E8;'> mllib.DecisionTreeModel <a href=' /mllib/tree.py#L107'>depth</a>()</tt>	Get depth of tree (e g depth 0 means 1 leaf node depth 1.
<tt style='background-color:#E8E8E8;'> mllib.DecisionTreeModel <a href=' /mllib/tree.py#L115'>__repr__</a>()</tt>	Summary of model.
<tt style='background-color:#E8E8E8;'> mllib.DecisionTree <a href=' /mllib/tree.py#L146'>trainClassifier</a>(cls,data,numClasses,categoricalFeaturesInfo)</tt>	Train a decision tree model for classification.
<tt style='background-color:#E8E8E8;'> mllib.DecisionTree <a href=' /mllib/tree.py#L218'>trainRegressor</a>(cls,data,categoricalFeaturesInfo,impurity)</tt>	Train a decision tree model for regression.
<tt style='background-color:#E8E8E8;'> mllib.RandomForest <a href=' /mllib/tree.py#L316'>trainClassifier</a>(cls,data,numClasses,categoricalFeaturesInfo)</tt>	Train a random forest model for binary or multiclass classification.
<tt style='background-color:#E8E8E8;'> mllib.RandomForest <a href=' /mllib/tree.py#L408'>trainRegressor</a>(cls,data,categoricalFeaturesInfo,numTrees)</tt>	Train a random forest model for regression.
<tt style='background-color:#E8E8E8;'> mllib.GradientBoostedTrees <a href=' /mllib/tree.py#L508'>trainClassifier</a>(cls,data,categoricalFeaturesInfo,loss)</tt>	Train a gradient-boosted trees model for classification.
<tt style='background-color:#E8E8E8;'> mllib.GradientBoostedTrees <a href=' /mllib/tree.py#L577'>trainRegressor</a>(cls,data,categoricalFeaturesInfo,loss)</tt>	Train a gradient-boosted trees model for regression.
<tt style='background-color:#E8E8E8;'> mllib.stat.TestResult <a href=' /mllib/stat/test.py#L29'>pValue</a>()</tt>	The probability of obtaining a test statistic result at least as extreme as the one that was actually observed assuming that the.
<tt style='background-color:#E8E8E8;'> mllib.stat.TestResult <a href=' /mllib/stat/test.py#L38'>degreesOfFreedom</a>()</tt>	Returns the degree s of freedom of the hypothesis test.
<tt style='background-color:#E8E8E8;'> mllib.stat.TestResult <a href=' /mllib/stat/test.py#L53'>nullHypothesis</a>()</tt>	Null hypothesis of the test.
<tt style='background-color:#E8E8E8;'> mllib.stat.ChiSqTestResult <a href=' /mllib/stat/test.py#L70'>method</a>()</tt>	Name of the test method.
<tt style='background-color:#E8E8E8;'> mllib.stat.KernelDensity <a href=' /mllib/stat/KernelDensity.py#L44'>setBandwidth</a>(bandwidth)</tt>	Set bandwidth of each sample defaults to 1 0.
<tt style='background-color:#E8E8E8;'> mllib.stat.KernelDensity <a href=' /mllib/stat/KernelDensity.py#L48'>setSample</a>(sample)</tt>	Set sample points from the population should be a rdd.
<tt style='background-color:#E8E8E8;'> mllib.stat.KernelDensity <a href=' /mllib/stat/KernelDensity.py#L54'>estimate</a>(points)</tt>	Estimate the probability density at points.
<tt style='background-color:#E8E8E8;'> mllib.stat.Statistics <a href=' /mllib/stat/_statistics.py#L65'>colStats</a>(rdd)</tt>	Computes column-wise summary statistics for the input rdd[vector].
<tt style='background-color:#E8E8E8;'> mllib.stat.Statistics <a href=' /mllib/stat/_statistics.py#L96'>corr</a>(x,y,method)</tt>	Compute the correlation matrix for the input rdd s using the specified method.
<tt style='background-color:#E8E8E8;'> mllib.stat.Statistics <a href=' /mllib/stat/_statistics.py#L159'>chiSqTest</a>(observed,expected)</tt>	If observed is vector conduct pearson's chi-squared goodness of fit test of the observed data against the expected distribution.
<tt style='background-color:#E8E8E8;'> mllib.stat.Statistics <a href=' /mllib/stat/_statistics.py#L244'>kolmogorovSmirnovTest</a>(data,distName)</tt>	Performs the kolmogorov-smirnov ks test for data sampled from a continuous distribution.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DistributedMatrix <a href=' /mllib/linalg/distributed.py#L46'>numRows</a>()</tt>	Get or compute the number of rows.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DistributedMatrix <a href=' /mllib/linalg/distributed.py#L50'>numCols</a>()</tt>	Get or compute the number of cols.
<tt style='background-color:#E8E8E8;'> mllib.linalg.RowMatrix <a href=' /mllib/linalg/distributed.py#L70'>__init__</a>(rows,numRows,numCols)</tt>	Note this docstring is not shown publicly.
<tt style='background-color:#E8E8E8;'> mllib.linalg.RowMatrix <a href=' /mllib/linalg/distributed.py#L105'>rows</a>()</tt>	Rows of the rowmatrix stored as an rdd of vectors.
<tt style='background-color:#E8E8E8;'> mllib.linalg.RowMatrix <a href=' /mllib/linalg/distributed.py#L117'>numRows</a>()</tt>	Get or compute the number of rows.
<tt style='background-color:#E8E8E8;'> mllib.linalg.RowMatrix <a href=' /mllib/linalg/distributed.py#L134'>numCols</a>()</tt>	Get or compute the number of cols.
<tt style='background-color:#E8E8E8;'> mllib.linalg.RowMatrix <a href=' /mllib/linalg/distributed.py#L151'>computeColumnSummaryStatistics</a>()</tt>	Computes column-wise summary statistics.
<tt style='background-color:#E8E8E8;'> mllib.linalg.RowMatrix <a href=' /mllib/linalg/distributed.py#L169'>computeCovariance</a>()</tt>	Computes the covariance matrix treating each row as an observation.
<tt style='background-color:#E8E8E8;'> mllib.linalg.RowMatrix <a href=' /mllib/linalg/distributed.py#L185'>computeGramianMatrix</a>()</tt>	Computes the gramian matrix a^t a.
<tt style='background-color:#E8E8E8;'> mllib.linalg.RowMatrix <a href=' /mllib/linalg/distributed.py#L200'>columnSimilarities</a>(threshold)</tt>	Compute similarities between columns of this matrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.RowMatrix <a href=' /mllib/linalg/distributed.py#L262'>tallSkinnyQR</a>(computeQ)</tt>	Compute the qr decomposition of this rowmatrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.RowMatrix <a href=' /mllib/linalg/distributed.py#L303'>computeSVD</a>(k,computeU,rCond)</tt>	Computes the singular value decomposition of the rowmatrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.RowMatrix <a href=' /mllib/linalg/distributed.py#L347'>computePrincipalComponents</a>(k)</tt>	Computes the k principal components of the given row matrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.RowMatrix <a href=' /mllib/linalg/distributed.py#L372'>multiply</a>(matrix)</tt>	Multiply this matrix by a local dense matrix on the right.
<tt style='background-color:#E8E8E8;'> mllib.linalg.SingularValueDecomposition <a href=' /mllib/linalg/distributed.py#L399'>U</a>()</tt>	Returns a distributed matrix whose columns are the left singular vectors of the singularvaluedecomposition if computeu was set to be true.
<tt style='background-color:#E8E8E8;'> mllib.linalg.SingularValueDecomposition <a href=' /mllib/linalg/distributed.py#L416'>s</a>()</tt>	Returns a densevector with singular values in descending order.
<tt style='background-color:#E8E8E8;'> mllib.linalg.SingularValueDecomposition <a href=' /mllib/linalg/distributed.py#L424'>V</a>()</tt>	Returns a densematrix whose columns are the right singular vectors of the singularvaluedecomposition.
<tt style='background-color:#E8E8E8;'> mllib.linalg.IndexedRowMatrix <a href=' /mllib/linalg/distributed.py#L474'>__init__</a>(rows,numRows,numCols)</tt>	Note this docstring is not shown publicly.
<tt style='background-color:#E8E8E8;'> mllib.linalg.IndexedRowMatrix <a href=' /mllib/linalg/distributed.py#L518'>rows</a>()</tt>	Rows of the indexedrowmatrix stored as an rdd of indexedrows.
<tt style='background-color:#E8E8E8;'> mllib.linalg.IndexedRowMatrix <a href=' /mllib/linalg/distributed.py#L537'>numRows</a>()</tt>	Get or compute the number of rows.
<tt style='background-color:#E8E8E8;'> mllib.linalg.IndexedRowMatrix <a href=' /mllib/linalg/distributed.py#L556'>numCols</a>()</tt>	Get or compute the number of cols.
<tt style='background-color:#E8E8E8;'> mllib.linalg.IndexedRowMatrix <a href=' /mllib/linalg/distributed.py#L575'>columnSimilarities</a>()</tt>	Compute all cosine similarities between columns.
<tt style='background-color:#E8E8E8;'> mllib.linalg.IndexedRowMatrix <a href=' /mllib/linalg/distributed.py#L589'>computeGramianMatrix</a>()</tt>	Computes the gramian matrix a^t a.
<tt style='background-color:#E8E8E8;'> mllib.linalg.IndexedRowMatrix <a href=' /mllib/linalg/distributed.py#L605'>toRowMatrix</a>()</tt>	Convert this matrix to a rowmatrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.IndexedRowMatrix <a href=' /mllib/linalg/distributed.py#L618'>toCoordinateMatrix</a>()</tt>	Convert this matrix to a coordinatematrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.IndexedRowMatrix <a href=' /mllib/linalg/distributed.py#L631'>toBlockMatrix</a>(rowsPerBlock,colsPerBlock)</tt>	Convert this matrix to a blockmatrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.IndexedRowMatrix <a href=' /mllib/linalg/distributed.py#L660'>computeSVD</a>(k,computeU,rCond)</tt>	Computes the singular value decomposition of the indexedrowmatrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.IndexedRowMatrix <a href=' /mllib/linalg/distributed.py#L704'>multiply</a>(matrix)</tt>	Multiply this matrix by a local dense matrix on the right.
<tt style='background-color:#E8E8E8;'> mllib.linalg.CoordinateMatrix <a href=' /mllib/linalg/distributed.py#L766'>__init__</a>(entries,numRows,numCols)</tt>	Note this docstring is not shown publicly.
<tt style='background-color:#E8E8E8;'> mllib.linalg.CoordinateMatrix <a href=' /mllib/linalg/distributed.py#L810'>entries</a>()</tt>	Entries of the coordinatematrix stored as an rdd of matrixentries.
<tt style='background-color:#E8E8E8;'> mllib.linalg.CoordinateMatrix <a href=' /mllib/linalg/distributed.py#L830'>numRows</a>()</tt>	Get or compute the number of rows.
<tt style='background-color:#E8E8E8;'> mllib.linalg.CoordinateMatrix <a href=' /mllib/linalg/distributed.py#L848'>numCols</a>()</tt>	Get or compute the number of cols.
<tt style='background-color:#E8E8E8;'> mllib.linalg.CoordinateMatrix <a href=' /mllib/linalg/distributed.py#L866'>transpose</a>()</tt>	Transpose this coordinatematrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.CoordinateMatrix <a href=' /mllib/linalg/distributed.py#L886'>toRowMatrix</a>()</tt>	Convert this matrix to a rowmatrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.CoordinateMatrix <a href=' /mllib/linalg/distributed.py#L910'>toIndexedRowMatrix</a>()</tt>	Convert this matrix to an indexedrowmatrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.CoordinateMatrix <a href=' /mllib/linalg/distributed.py#L933'>toBlockMatrix</a>(rowsPerBlock,colsPerBlock)</tt>	Convert this matrix to a blockmatrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1003'>__init__</a>(blocks,rowsPerBlock,colsPerBlock,numRows)</tt>	Note this docstring is not shown publicly.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1050'>blocks</a>()</tt>	The rdd of sub-matrix blocks blockrowindex blockcolindex sub-matrix) that form this.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1073'>rowsPerBlock</a>()</tt>	Number of rows that make up each block.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1086'>colsPerBlock</a>()</tt>	Number of columns that make up each block.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1099'>numRowBlocks</a>()</tt>	Number of rows of blocks in the blockmatrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1112'>numColBlocks</a>()</tt>	Number of columns of blocks in the blockmatrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1125'>numRows</a>()</tt>	Get or compute the number of rows.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1142'>numCols</a>()</tt>	Get or compute the number of cols.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1159'>cache</a>()</tt>	Caches the underlying rdd.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1167'>persist</a>(storageLevel)</tt>	Persists the underlying rdd with the specified storage level.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1178'>validate</a>()</tt>	Validates the block matrix info against the matrix data (blocks) and throws an exception if any error is found.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1186'>add</a>(other)</tt>	Adds two block matrices together the matrices must have the.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1219'>subtract</a>(other)</tt>	Subtracts the given block matrix other from this block matrix this - other.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1254'>multiply</a>(other)</tt>	Left multiplies this blockmatrix by other, another blockmatrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1289'>transpose</a>()</tt>	Transpose this blockmatrix returns a new blockmatrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1306'>toLocalMatrix</a>()</tt>	Collect the distributed matrix on the driver as a densematrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1328'>toIndexedRowMatrix</a>()</tt>	Convert this matrix to an indexedrowmatrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.BlockMatrix <a href=' /mllib/linalg/distributed.py#L1351'>toCoordinateMatrix</a>()</tt>	Convert this matrix to a coordinatematrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg. <a href=' /mllib/linalg/__init__.py#L86'>_vector_size</a>(v)</tt>	Returns the size of the vector.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Vector <a href=' /mllib/linalg/__init__.py#L246'>toArray</a>()</tt>	Convert the vector into an numpy ndarray.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Vector <a href=' /mllib/linalg/__init__.py#L254'>asML</a>()</tt>	Convert this vector to the new mllib-local representation.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DenseVector <a href=' /mllib/linalg/__init__.py#L294'>parse</a>(s)</tt>	Parse string representation back into the densevector.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DenseVector <a href=' /mllib/linalg/__init__.py#L319'>numNonzeros</a>()</tt>	Number of nonzero elements this scans all active values and count non zeros.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DenseVector <a href=' /mllib/linalg/__init__.py#L325'>norm</a>(p)</tt>	Calculates the norm of a densevector.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DenseVector <a href=' /mllib/linalg/__init__.py#L337'>dot</a>(other)</tt>	Compute the dot product of two vectors we support.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DenseVector <a href=' /mllib/linalg/__init__.py#L380'>squared_distance</a>(other)</tt>	Squared distance of two vectors.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DenseVector <a href=' /mllib/linalg/__init__.py#L418'>toArray</a>()</tt>	Returns an numpy ndarray.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DenseVector <a href=' /mllib/linalg/__init__.py#L424'>asML</a>()</tt>	Convert this vector to the new mllib-local representation.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DenseVector <a href=' /mllib/linalg/__init__.py#L435'>values</a>()</tt>	Returns a list of values.
<tt style='background-color:#E8E8E8;'> mllib.linalg.SparseVector <a href=' /mllib/linalg/__init__.py#L510'>__init__</a>(size)</tt>	Create a sparse vector using either a dictionary a list of index value pairs or two separate arrays of indices and.
<tt style='background-color:#E8E8E8;'> mllib.linalg.SparseVector <a href=' /mllib/linalg/__init__.py#L561'>numNonzeros</a>()</tt>	Number of nonzero elements this scans all active values and count non zeros.
<tt style='background-color:#E8E8E8;'> mllib.linalg.SparseVector <a href=' /mllib/linalg/__init__.py#L567'>norm</a>(p)</tt>	Calculates the norm of a sparsevector.
<tt style='background-color:#E8E8E8;'> mllib.linalg.SparseVector <a href=' /mllib/linalg/__init__.py#L584'>parse</a>(s)</tt>	Parse string representation back into the sparsevector.
<tt style='background-color:#E8E8E8;'> mllib.linalg.SparseVector <a href=' /mllib/linalg/__init__.py#L633'>dot</a>(other)</tt>	Dot product with a sparsevector or 1- or 2-dimensional numpy array.
<tt style='background-color:#E8E8E8;'> mllib.linalg.SparseVector <a href=' /mllib/linalg/__init__.py#L689'>squared_distance</a>(other)</tt>	Squared distance from a sparsevector or 1-dimensional numpy array.
<tt style='background-color:#E8E8E8;'> mllib.linalg.SparseVector <a href=' /mllib/linalg/__init__.py#L756'>toArray</a>()</tt>	Returns a copy of this sparsevector as a 1-dimensional numpy array.
<tt style='background-color:#E8E8E8;'> mllib.linalg.SparseVector <a href=' /mllib/linalg/__init__.py#L764'>asML</a>()</tt>	Convert this vector to the new mllib-local representation.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Vectors <a href=' /mllib/linalg/__init__.py#L849'>sparse</a>(size)</tt>	Create a sparse vector using either a dictionary a list of index value pairs or two separate arrays of indices and.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Vectors <a href=' /mllib/linalg/__init__.py#L869'>dense</a>()</tt>	Create a dense vector of 64-bit floats from a python list or numbers.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Vectors <a href=' /mllib/linalg/__init__.py#L884'>fromML</a>(vec)</tt>	Convert a vector from the new mllib-local representation.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Vectors <a href=' /mllib/linalg/__init__.py#L902'>stringify</a>(vector)</tt>	Converts a vector into a string which can be recognized by vectors.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Vectors <a href=' /mllib/linalg/__init__.py#L915'>squared_distance</a>(v1,v2)</tt>	Squared distance between two vectors.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Vectors <a href=' /mllib/linalg/__init__.py#L930'>norm</a>(vector,p)</tt>	Find norm of the given vector.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Vectors <a href=' /mllib/linalg/__init__.py#L937'>parse</a>(s)</tt>	Parse a string representation back into the vector.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Vectors <a href=' /mllib/linalg/__init__.py#L958'>_equals</a>(v1_indices,v1_values,v2_indices,v2_values)</tt>	Check equality between sparse/dense vectors v1_indices and v2_indices assume to be strictly increasing.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Matrix <a href=' /mllib/linalg/__init__.py#L996'>toArray</a>()</tt>	Returns its elements in a numpy ndarray.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Matrix <a href=' /mllib/linalg/__init__.py#L1002'>asML</a>()</tt>	Convert this matrix to the new mllib-local representation.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Matrix <a href=' /mllib/linalg/__init__.py#L1009'>_convert_to_array</a>(array_like,dtype)</tt>	Convert matrix attributes which are array-like or buffer to array.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DenseMatrix <a href=' /mllib/linalg/__init__.py#L1034'>__str__</a>()</tt>	Pretty printing of a densematrix >>> dm = densematrix(2 2 range 4.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DenseMatrix <a href=' /mllib/linalg/__init__.py#L1055'>__repr__</a>()</tt>	Representation of a densematrix >>> dm = densematrix(2 2 range 4.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DenseMatrix <a href=' /mllib/linalg/__init__.py#L1078'>toArray</a>()</tt>	Return an numpy ndarray.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DenseMatrix <a href=' /mllib/linalg/__init__.py#L1093'>toSparse</a>()</tt>	Convert to sparsematrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.DenseMatrix <a href=' /mllib/linalg/__init__.py#L1108'>asML</a>()</tt>	Convert this matrix to the new mllib-local representation.
<tt style='background-color:#E8E8E8;'> mllib.linalg.SparseMatrix <a href=' /mllib/linalg/__init__.py#L1165'>__str__</a>()</tt>	Pretty printing of a sparsematrix >>> sm1 = sparsematrix(2 2 [0 2 3], [0 1 1], [2 3 4]).
<tt style='background-color:#E8E8E8;'> mllib.linalg.SparseMatrix <a href=' /mllib/linalg/__init__.py#L1211'>__repr__</a>()</tt>	Representation of a sparsematrix >>> sm1 = sparsematrix(2 2 [0 2 3], [0 1 1], [2 3 4]).
<tt style='background-color:#E8E8E8;'> mllib.linalg.SparseMatrix <a href=' /mllib/linalg/__init__.py#L1273'>toArray</a>()</tt>	Return an numpy ndarray.
<tt style='background-color:#E8E8E8;'> mllib.linalg.SparseMatrix <a href=' /mllib/linalg/__init__.py#L1291'>asML</a>()</tt>	Convert this matrix to the new mllib-local representation.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Matrices <a href=' /mllib/linalg/__init__.py#L1309'>dense</a>(numRows,numCols,values)</tt>	Create a densematrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Matrices <a href=' /mllib/linalg/__init__.py#L1316'>sparse</a>(numRows,numCols,colPtrs,rowIndices)</tt>	Create a sparsematrix.
<tt style='background-color:#E8E8E8;'> mllib.linalg.Matrices <a href=' /mllib/linalg/__init__.py#L1323'>fromML</a>(mat)</tt>	Convert a matrix from the new mllib-local representation.
<tt style='background-color:#E8E8E8;'> mllib.linalg.QRDecomposition <a href=' /mllib/linalg/__init__.py#L1351'>Q</a>()</tt>	An orthogonal matrix q in a qr decomposition.
<tt style='background-color:#E8E8E8;'> mllib.linalg.QRDecomposition <a href=' /mllib/linalg/__init__.py#L1360'>R</a>()</tt>	An upper triangular matrix r in a qr decomposition.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L36'>_create_function</a>(name,doc)</tt>	Create a function for aggregator by name.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L47'>_create_binary_mathfunction</a>(name,doc)</tt>	Create a binary mathfunction by name.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L60'>_create_window_function</a>(name,doc)</tt>	Create a window function by name.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L214'>approx_count_distinct</a>(col,rsd)</tt>	Returns a new :class column for approximate distinct count of col.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L229'>broadcast</a>(df)</tt>	Marks a dataframe as small enough for use in broadcast joins.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L237'>coalesce</a>()</tt>	Returns the first column that is not null.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L274'>corr</a>(col1,col2)</tt>	Returns a new :class column for the pearson correlation coefficient for col1 and col2.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L289'>covar_pop</a>(col1,col2)</tt>	Returns a new :class column for the population covariance of col1 and col2.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L304'>covar_samp</a>(col1,col2)</tt>	Returns a new :class column for the sample covariance of col1 and col2.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L319'>countDistinct</a>(col)</tt>	Returns a new :class column for distinct count of col or cols.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L334'>first</a>(col,ignorenulls)</tt>	Aggregate function returns the first value in a group.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L346'>grouping</a>(col)</tt>	Aggregate function indicates whether a specified column in a group by list is aggregated or not returns 1 for aggregated or 0 for not aggregated in the result set.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L366'>grouping_id</a>()</tt>	Aggregate function returns the level of grouping equals to (grouping c1 << n-1 + (grouping c2 << n-2 +.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L390'>input_file_name</a>()</tt>	Creates a string column for the file name of the current spark task.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L398'>isnan</a>(col)</tt>	An expression that returns true iff the column is nan.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L410'>isnull</a>(col)</tt>	An expression that returns true iff the column is null.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L422'>last</a>(col,ignorenulls)</tt>	Aggregate function returns the last value in a group.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L434'>monotonically_increasing_id</a>()</tt>	A column that generates monotonically increasing 64-bit integers.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L455'>nanvl</a>(col1,col2)</tt>	Returns col1 if it is not nan or col2 if col1 is nan.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L469'>rand</a>(seed)</tt>	Generates a random column with independent and identically distributed i i d samples.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L482'>randn</a>(seed)</tt>	Generates a column with independent and identically distributed i i d samples from.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L495'>round</a>(col,scale)</tt>	Round the given value to scale decimal places using half_up rounding mode if scale >= 0 or at integral part when scale < 0.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L508'>bround</a>(col,scale)</tt>	Round the given value to scale decimal places using half_even rounding mode if scale >= 0 or at integral part when scale < 0.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L521'>shiftLeft</a>(col,numBits)</tt>	Shift the given value numbits left.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L532'>shiftRight</a>(col,numBits)</tt>	Signed shift the given value numbits right.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L544'>shiftRightUnsigned</a>(col,numBits)</tt>	Unsigned shift the given value numbits right.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L557'>spark_partition_id</a>()</tt>	A column for partition id.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L570'>expr</a>(str)</tt>	Parses the expression string into the column that it represents >>> df.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L581'>struct</a>()</tt>	Creates a new struct column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L600'>greatest</a>()</tt>	Returns the greatest value of the list of column names skipping null values.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L616'>least</a>()</tt>	Returns the least value of the list of column names skipping null values.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L632'>when</a>(condition,value)</tt>	Evaluates a list of conditions and returns one of multiple possible result expressions.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L654'>log</a>(arg1,arg2)</tt>	Returns the first argument-based logarithm of the second argument.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L674'>log2</a>(col)</tt>	Returns the base-2 logarithm of the argument.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L685'>conv</a>(col,fromBase,toBase)</tt>	Convert a number in a string column from one base to another.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L699'>factorial</a>(col)</tt>	Computes the factorial of the given value.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L714'>lag</a>(col,count,default)</tt>	Window function returns the value that is offset rows before the current row and defaultvalue if there is less than offset rows before the current row.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L731'>lead</a>(col,count,default)</tt>	Window function returns the value that is offset rows after the current row and defaultvalue if there is less than offset rows after the current row.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L748'>ntile</a>(n)</tt>	Window function returns the ntile group id (from 1 to n inclusive) in an ordered window partition.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L766'>current_date</a>()</tt>	Returns the current date as a date column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L775'>current_timestamp</a>()</tt>	Returns the current timestamp as a timestamp column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L783'>date_format</a>(date,format)</tt>	Converts a date/timestamp/string to a value of string in the format specified by the date format given by the second argument.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L804'>year</a>(col)</tt>	Extract the year of a given date as integer.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L817'>quarter</a>(col)</tt>	Extract the quarter of a given date as integer.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L830'>month</a>(col)</tt>	Extract the month of a given date as integer.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L843'>dayofmonth</a>(col)</tt>	Extract the day of the month of a given date as integer.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L856'>dayofyear</a>(col)</tt>	Extract the day of the year of a given date as integer.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L869'>hour</a>(col)</tt>	Extract the hours of a given date as integer.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L882'>minute</a>(col)</tt>	Extract the minutes of a given date as integer.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L895'>second</a>(col)</tt>	Extract the seconds of a given date as integer.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L908'>weekofyear</a>(col)</tt>	Extract the week number of a given date as integer.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L921'>date_add</a>(start,days)</tt>	Returns the date that is days days after start >>> df = spark.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L934'>date_sub</a>(start,days)</tt>	Returns the date that is days days before start >>> df = spark.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L947'>datediff</a>(end,start)</tt>	Returns the number of days from start to end.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L960'>add_months</a>(start,months)</tt>	Returns the date that is months months after start >>> df = spark.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L973'>months_between</a>(date1,date2)</tt>	Returns the number of months between date1 and date2.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L986'>to_date</a>(col,format)</tt>	Converts a :class column of :class pyspark sql types stringtype or.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1010'>to_timestamp</a>(col,format)</tt>	Converts a :class column of :class pyspark sql types stringtype or.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1034'>trunc</a>(date,format)</tt>	Returns date truncated to the unit specified by the format.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1051'>next_day</a>(date,dayOfWeek)</tt>	Returns the first date which is later than the value of the date column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1067'>last_day</a>(date)</tt>	Returns the last day of the month which the given date belongs to.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1080'>from_unixtime</a>(timestamp,format)</tt>	Converts the number of seconds from unix epoch 1970-01-01 00 00 00 utc to a string representing the timestamp of that moment in the current system time zone in the given.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1091'>unix_timestamp</a>(timestamp,format)</tt>	Convert time string with given pattern ('yyyy-mm-dd hh mm ss', by default) to unix time stamp in seconds using the default timezone and the default.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1106'>from_utc_timestamp</a>(timestamp,tz)</tt>	Given a timestamp which corresponds to a certain time of day in utc returns another timestamp that corresponds to the same time of day in the given timezone.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1120'>to_utc_timestamp</a>(timestamp,tz)</tt>	Given a timestamp which corresponds to a certain time of day in the given timezone returns another timestamp that corresponds to the same time of day in utc.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1134'>window</a>(timeColumn,windowDuration,slideDuration,startTime)</tt>	Bucketize rows into one or more time windows given a timestamp specifying column window.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1185'>crc32</a>(col)</tt>	Calculates the cyclic redundancy check value crc32 of a binary column and returns the value as a bigint.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1199'>md5</a>(col)</tt>	Calculates the md5 digest and returns the value as a 32 character hex string.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1212'>sha1</a>(col)</tt>	Returns the hex string result of sha-1.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1225'>sha2</a>(col,numBits)</tt>	Returns the hex string result of sha-2 family of hash functions sha-224 sha-256 sha-384 and sha-512.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1243'>hash</a>()</tt>	Calculates the hash code of given columns and returns the result as an int column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1277'>concat</a>()</tt>	Concatenates multiple input string columns together into a single string column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1291'>concat_ws</a>(sep)</tt>	Concatenates multiple input string columns together into a single string column using the given separator.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1306'>decode</a>(col,charset)</tt>	Computes the first argument into a string from a binary using the provided character set (one of 'us-ascii', 'iso-8859-1', 'utf-8', 'utf-16be', 'utf-16le', 'utf-16').
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1316'>encode</a>(col,charset)</tt>	Computes the first argument into a binary from a string using the provided character set (one of 'us-ascii', 'iso-8859-1', 'utf-8', 'utf-16be', 'utf-16le', 'utf-16').
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1326'>format_number</a>(col,d)</tt>	Formats the number x to a format like '#,--#,--# --', rounded to d decimal places.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1343'>format_string</a>(format)</tt>	Formats the arguments in printf-style and returns the result as a string column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1360'>instr</a>(str,substr)</tt>	Locate the position of the first occurrence of substr column in the given string.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1377'>substring</a>(str,pos,len)</tt>	Substring starts at pos and is of length len when str is string type or returns the slice of byte array that starts at pos in byte and is of length len.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1393'>substring_index</a>(str,delim,count)</tt>	Returns the substring from string str before count occurrences of the delimiter delim.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1412'>levenshtein</a>(left,right)</tt>	Computes the levenshtein distance of the two given strings.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1426'>locate</a>(substr,str,pos)</tt>	Locate the position of the first occurrence of substr in a string column after position pos.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1446'>lpad</a>(col,len,pad)</tt>	Left-pad the string column to width len with pad.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1460'>rpad</a>(col,len,pad)</tt>	Right-pad the string column to width len with pad.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1474'>repeat</a>(col,n)</tt>	Repeats a string column n times and returns it as a new string column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1488'>split</a>(str,pattern)</tt>	Splits str around pattern pattern is a regular expression.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1504'>regexp_extract</a>(str,pattern,idx)</tt>	Extract a specific group matched by a java regex from the specified string column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1525'>regexp_replace</a>(str,pattern,replacement)</tt>	Replace all substrings of the specified string value that match regexp with rep.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1539'>initcap</a>(col)</tt>	Translate the first letter of each word to upper case in the sentence.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1551'>soundex</a>(col)</tt>	Returns the soundex encoding for a string >>> df = spark.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1565'>bin</a>(col)</tt>	Returns the string representation of the binary value of the given column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1578'>hex</a>(col)</tt>	Computes hex value of the given column which could be :class pyspark sql types stringtype,.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1593'>unhex</a>(col)</tt>	Inverse of hex interprets each pair of characters as a hexadecimal number.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1606'>length</a>(col)</tt>	Calculates the length of a string or binary expression.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1618'>translate</a>(srcCol,matching,replace)</tt>	A function translate any character in the srccol by a character in matching.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1636'>create_map</a>()</tt>	Creates a new map column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1656'>array</a>()</tt>	Creates a new array column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1675'>array_contains</a>(col,value)</tt>	Collection function returns null if the array is null true if the array contains the given value and false otherwise.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1692'>explode</a>(col)</tt>	Returns a new row for each element in the given array or map.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1713'>posexplode</a>(col)</tt>	Returns a new row for each element with position in the given array or map.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1734'>get_json_object</a>(col,path)</tt>	Extracts json object from a json string based on json path specified and returns json string of the extracted json object.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1755'>json_tuple</a>(col)</tt>	Creates a new row for a json column according to the given field names.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1773'>from_json</a>(col,schema,options)</tt>	Parses a column containing a json string into a [[structtype]] or [[arraytype]] of [[structtype]]s with the specified schema.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1802'>to_json</a>(col,options)</tt>	Converts a column containing a [[structtype]] or [[arraytype]] of [[structtype]]s into a json string.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1829'>size</a>(col)</tt>	Collection function returns the length of the array or map stored in the column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1844'>sort_array</a>(col,asc)</tt>	Collection function sorts the input array in ascending or descending order according to the natural ordering of the array elements.
<tt style='background-color:#E8E8E8;'> sql.UserDefinedFunction <a href=' /sql/functions.py#L1920'>_wrapped</a>()</tt>	Wrap this udf with a function and attach docstring from func.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L1934'>udf</a>(f,returnType)</tt>	Creates a :class column expression representing a user defined function udf.
<tt style='background-color:#E8E8E8;'> sql.GroupedData <a href=' /sql/group.py#L61'>agg</a>()</tt>	Compute aggregates and returns the result as a :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.GroupedData <a href=' /sql/group.py#L94'>count</a>()</tt>	Counts the number of records for each group.
<tt style='background-color:#E8E8E8;'> sql.GroupedData <a href=' /sql/group.py#L103'>mean</a>()</tt>	Computes average values for each numeric columns for each group.
<tt style='background-color:#E8E8E8;'> sql.GroupedData <a href=' /sql/group.py#L118'>avg</a>()</tt>	Computes average values for each numeric columns for each group.
<tt style='background-color:#E8E8E8;'> sql.GroupedData <a href=' /sql/group.py#L133'>max</a>()</tt>	Computes the max value for each numeric columns for each group.
<tt style='background-color:#E8E8E8;'> sql.GroupedData <a href=' /sql/group.py#L144'>min</a>()</tt>	Computes the min value for each numeric column for each group.
<tt style='background-color:#E8E8E8;'> sql.GroupedData <a href=' /sql/group.py#L157'>sum</a>()</tt>	Compute the sum for each numeric columns for each group.
<tt style='background-color:#E8E8E8;'> sql.GroupedData <a href=' /sql/group.py#L170'>pivot</a>(pivot_col,values)</tt>	Pivots a column of the current [[dataframe]] and perform the specified aggregation.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/column.py#L52'>_to_seq</a>(sc,cols,converter)</tt>	Convert a list of column or names into a jvm seq of column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/column.py#L64'>_to_list</a>(sc,cols,converter)</tt>	Convert a list of column or names into a jvm scala list of column.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/column.py#L76'>_unary_op</a>(name,doc)</tt>	Create a method for given unary operator.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/column.py#L105'>_bin_op</a>(name,doc)</tt>	Create a method for given binary operator.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/column.py#L116'>_reverse_op</a>(name,doc)</tt>	Create a method for binary operator this object is on right side.
<tt style='background-color:#E8E8E8;'> sql.Column <a href=' /sql/column.py#L281'>getItem</a>(key)</tt>	An expression that gets an item at position ordinal out of a list or gets an item by key out of a dict.
<tt style='background-color:#E8E8E8;'> sql.Column <a href=' /sql/column.py#L303'>getField</a>(name)</tt>	An expression that gets a field by name in a structfield.
<tt style='background-color:#E8E8E8;'> sql.Column <a href=' /sql/column.py#L396'>substr</a>(startPos,length)</tt>	Return a :class column which is a substring of the column.
<tt style='background-color:#E8E8E8;'> sql.Column <a href=' /sql/column.py#L418'>isin</a>()</tt>	A boolean expression that is evaluated to true if the value of this expression is contained by the evaluated values of the arguments.
<tt style='background-color:#E8E8E8;'> sql.Column <a href=' /sql/column.py#L478'>alias</a>()</tt>	Returns this column aliased with a new name or names in the case of expressions that return more than one column such as explode.
<tt style='background-color:#E8E8E8;'> sql.Column <a href=' /sql/column.py#L515'>cast</a>(dataType)</tt>	Convert the column into type datatype.
<tt style='background-color:#E8E8E8;'> sql.Column <a href=' /sql/column.py#L538'>between</a>(lowerBound,upperBound)</tt>	A boolean expression that is evaluated to true if the value of this expression is between the given columns.
<tt style='background-color:#E8E8E8;'> sql.Column <a href=' /sql/column.py#L554'>when</a>(condition,value)</tt>	Evaluates a list of conditions and returns one of multiple possible result expressions.
<tt style='background-color:#E8E8E8;'> sql.Column <a href=' /sql/column.py#L580'>otherwise</a>(value)</tt>	Evaluates a list of conditions and returns one of multiple possible result expressions.
<tt style='background-color:#E8E8E8;'> sql.Column <a href=' /sql/column.py#L603'>over</a>(window)</tt>	Define a windowing column.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L188'>__init__</a>(sparkContext,jsparkSession)</tt>	Creates a new sparksession.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L235'>newSession</a>()</tt>	Returns a new sparksession as new session that has separate sqlconf registered temporary views and udfs but shared sparkcontext and.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L244'>sparkContext</a>()</tt>	Returns the underlying :class sparkcontext.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L250'>version</a>()</tt>	The version of spark on which this application is running.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L256'>conf</a>()</tt>	Runtime configuration interface for spark.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L269'>catalog</a>()</tt>	Interface through which the user may create drop alter or query underlying databases tables functions etc.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L279'>udf</a>()</tt>	Returns a :class udfregistration for udf registration.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L289'>range</a>(start,end,step,numPartitions)</tt>	Create a :class dataframe with single :class pyspark sql types longtype column named.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L320'>_inferSchemaFromList</a>(data)</tt>	Infer schema from list of row or tuple.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L338'>_inferSchema</a>(rdd,samplingRatio)</tt>	Infer schema from an rdd of row or tuple.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L370'>_createFromRDD</a>(rdd,schema,samplingRatio)</tt>	Create an rdd for dataframe from an existing rdd returns the rdd and schema.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L391'>_createFromLocal</a>(data,schema)</tt>	Create an rdd for dataframe from a list or pandas dataframe returns.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L417'>createDataFrame</a>(data,schema,samplingRatio,verifySchema)</tt>	Creates a :class dataframe from an :class rdd, a list or a :class pandas dataframe.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L544'>sql</a>(sqlQuery)</tt>	Returns a :class dataframe representing the result of the given query.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L558'>table</a>(tableName)</tt>	Returns the specified table as a :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L571'>read</a>()</tt>	Returns a :class dataframereader that can be used to read data in as a :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L582'>readStream</a>()</tt>	Returns a :class datastreamreader that can be used to read data streams as a streaming :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L595'>streams</a>()</tt>	Returns a :class streamingquerymanager that allows managing all the :class streamingquery streamingqueries active on this context.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L608'>stop</a>()</tt>	Stop the underlying :class sparkcontext.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L615'>__enter__</a>()</tt>	Enable 'with sparksession builder getorcreate() as session app' syntax.
<tt style='background-color:#E8E8E8;'> sql.SparkSession <a href=' /sql/session.py#L622'>__exit__</a>(exc_type,exc_val,exc_tb)</tt>	Enable 'with sparksession builder getorcreate() as session app' syntax.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L79'>rdd</a>()</tt>	Returns the content as an :class pyspark rdd of :class row.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L89'>na</a>()</tt>	Returns a :class dataframenafunctions for handling missing values.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L96'>stat</a>()</tt>	Returns a :class dataframestatfunctions for statistic functions.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L103'>toJSON</a>(use_unicode)</tt>	Converts a :class dataframe into a :class rdd of string.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L116'>registerTempTable</a>(name)</tt>	Registers this rdd as a temporary table using the given name.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L133'>createTempView</a>(name)</tt>	Creates a local temporary view with this dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L155'>createOrReplaceTempView</a>(name)</tt>	Creates or replaces a local temporary view with this dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L173'>createGlobalTempView</a>(name)</tt>	Creates a global temporary view with this dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L194'>write</a>()</tt>	Interface for saving the content of the non-streaming :class dataframe out into external storage.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L205'>writeStream</a>()</tt>	Interface for saving the content of the streaming :class dataframe out into external storage.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L218'>schema</a>()</tt>	Returns the schema of this :class dataframe as a :class pyspark sql types structtype.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L234'>printSchema</a>()</tt>	Prints out the schema in the tree format.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L246'>explain</a>(extended)</tt>	Prints the logical and physical plans to the console for debugging purpose.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L271'>isLocal</a>()</tt>	Returns true if the :func collect and :func take methods can be run locally without any spark executors.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L278'>isStreaming</a>()</tt>	Returns true if this :class dataset contains one or more sources that continuously return data as it arrives.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L292'>show</a>(n,truncate,vertical)</tt>	Prints the first n rows to the console.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L335'>checkpoint</a>(eager)</tt>	Returns a checkpointed version of this dataset checkpointing can be used to truncate the.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L349'>withWatermark</a>(eventTime,delayThreshold)</tt>	Defines an event time watermark for this :class dataframe a watermark tracks a point.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L383'>hint</a>(name)</tt>	Specifies some hint on the current dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L412'>count</a>()</tt>	Returns the number of rows in this :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L421'>collect</a>()</tt>	Returns all the records as a list of :class row.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L433'>toLocalIterator</a>()</tt>	Returns an iterator that contains all of the rows in this :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L447'>limit</a>(num)</tt>	Limits the result count to the number specified.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L460'>take</a>(num)</tt>	Returns the first num rows as a :class list of :class row.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L470'>foreach</a>(f)</tt>	Applies the f function to all :class row of this :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L482'>foreachPartition</a>(f)</tt>	Applies the f function to each partition of this :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L495'>cache</a>()</tt>	Persists the :class dataframe with the default storage level (c{memory_and_disk}).
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L505'>persist</a>(storageLevel)</tt>	Sets the storage level to persist the contents of the :class dataframe across operations after the first time it is computed.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L519'>storageLevel</a>()</tt>	Get the :class dataframe's current storage level.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L539'>unpersist</a>(blocking)</tt>	Marks the :class dataframe as non-persistent and remove all blocks for it from memory and disk.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L550'>coalesce</a>(numPartitions)</tt>	Returns a new :class dataframe that has exactly numpartitions partitions.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L573'>repartition</a>(numPartitions)</tt>	Returns a new :class dataframe partitioned by the given partitioning expressions the.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L634'>distinct</a>()</tt>	Returns a new :class dataframe containing the distinct rows in this :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L643'>sample</a>(withReplacement,fraction,seed)</tt>	Returns a sampled subset of this :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L658'>sampleBy</a>(col,fractions,seed)</tt>	Returns a stratified sample without replacement based on the fraction given on each stratum.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L694'>randomSplit</a>(weights,seed)</tt>	Randomly splits this :class dataframe with the provided weights.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L716'>dtypes</a>()</tt>	Returns all column names and their data types as a list.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L726'>columns</a>()</tt>	Returns all column names as a list.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L736'>alias</a>(alias)</tt>	Returns a new :class dataframe with an alias set.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L751'>crossJoin</a>(other)</tt>	Returns the cartesian product with another :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L770'>join</a>(other,on,how)</tt>	Joins with another :class dataframe, using the given join expression.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L823'>sortWithinPartitions</a>()</tt>	Returns a new :class dataframe with each partition sorted by the specified column s.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L843'>sort</a>()</tt>	Returns a new :class dataframe sorted by the specified column s.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L872'>_jseq</a>(cols,converter)</tt>	Return a jvm seq of columns from a list of column or names.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L876'>_jmap</a>(jm)</tt>	Return a jvm scala map from a dict.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L880'>_jcols</a>()</tt>	Return a jvm seq of columns from a list of column or column names if cols has only one list in it cols[0] will be used as the list.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L889'>_sort_cols</a>(cols,kwargs)</tt>	Return a jvm seq of columns that describes the sort order.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L908'>describe</a>()</tt>	Computes statistics for numeric and string columns.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L944'>head</a>(n)</tt>	Returns the first n rows.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L966'>first</a>()</tt>	Returns the first row as a :class row.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L976'>__getitem__</a>(item)</tt>	Returns the column as a :class column.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1003'>__getattr__</a>(name)</tt>	Returns the :class column denoted by name.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1016'>select</a>()</tt>	Projects a set of expressions and returns a new :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1035'>selectExpr</a>()</tt>	Projects a set of sql expressions and returns a new :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1049'>filter</a>(condition)</tt>	Filters rows using the given condition.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1077'>groupBy</a>()</tt>	Groups the :class dataframe using the specified columns so we can run aggregation on them.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1102'>rollup</a>()</tt>	Create a multi-dimensional rollup for the current :class dataframe using the specified columns so we can run aggregation on them.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1123'>cube</a>()</tt>	Create a multi-dimensional cube for the current :class dataframe using the specified columns so we can run aggregation on them.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1146'>agg</a>()</tt>	Aggregate on the entire :class dataframe without groups (shorthand for df.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1159'>union</a>(other)</tt>	Return a new :class dataframe containing union of rows in this frame and another frame.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1169'>unionAll</a>(other)</tt>	Return a new :class dataframe containing union of rows in this frame and another frame.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1178'>intersect</a>(other)</tt>	Return a new :class dataframe containing rows only in both this frame and another frame.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1187'>subtract</a>(other)</tt>	Return a new :class dataframe containing rows in this frame but not in another frame.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1196'>dropDuplicates</a>(subset)</tt>	Return a new :class dataframe with duplicate rows removed optionally only considering certain columns.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1235'>dropna</a>(how,thresh,subset)</tt>	Returns a new :class dataframe omitting rows with null values.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1270'>fillna</a>(value,subset)</tt>	Replace null values alias for na fill().
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1323'>replace</a>(to_replace,value,subset)</tt>	Returns a new :class dataframe replacing a value with another value.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1436'>approxQuantile</a>(col,probabilities,relativeError)</tt>	Calculates the approximate quantiles of numerical columns of a dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1510'>corr</a>(col1,col2,method)</tt>	Calculates the correlation of two columns of a dataframe as a double value.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1532'>cov</a>(col1,col2)</tt>	Calculate the sample covariance for the given columns specified by their names as a double value.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1547'>crosstab</a>(col1,col2)</tt>	Computes a pair-wise frequency table of the given columns also known as a contingency.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1569'>freqItems</a>(cols,support)</tt>	Finding frequent items for columns possibly with false positives using the.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1593'>withColumn</a>(colName,col)</tt>	Returns a new :class dataframe by adding a column or replacing the existing column that has the same name.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1609'>withColumnRenamed</a>(existing,new)</tt>	Returns a new :class dataframe by renaming an existing column.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1623'>drop</a>()</tt>	Returns a new :class dataframe that drops the specified column.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1663'>toDF</a>()</tt>	Returns a new class dataframe that with new specified column names.
<tt style='background-color:#E8E8E8;'> sql.DataFrame <a href=' /sql/dataframe.py#L1675'>toPandas</a>()</tt>	Returns the contents of this :class dataframe as pandas pandas dataframe.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/dataframe.py#L1712'>_to_scala_map</a>(sc,jm)</tt>	Convert a dict into a jvm map.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/readwriter.py#L34'>to_str</a>(value)</tt>	A wrapper over str(), but converts bool values to lower case strings.
<tt style='background-color:#E8E8E8;'> sql.OptionUtils <a href=' /sql/readwriter.py#L49'>_set_opts</a>(schema)</tt>	Set named options filter out those the value is none.
<tt style='background-color:#E8E8E8;'> sql.DataFrameReader <a href=' /sql/readwriter.py#L77'>format</a>(source)</tt>	Specifies the input data source format.
<tt style='background-color:#E8E8E8;'> sql.DataFrameReader <a href=' /sql/readwriter.py#L91'>schema</a>(schema)</tt>	Specifies the input schema.
<tt style='background-color:#E8E8E8;'> sql.DataFrameReader <a href=' /sql/readwriter.py#L109'>option</a>(key,value)</tt>	Adds an input option for the underlying data source.
<tt style='background-color:#E8E8E8;'> sql.DataFrameReader <a href=' /sql/readwriter.py#L121'>options</a>()</tt>	Adds input options for the underlying data source.
<tt style='background-color:#E8E8E8;'> sql.DataFrameReader <a href=' /sql/readwriter.py#L134'>load</a>(path,format,schema)</tt>	Loads data from a data source and returns it as a :classdataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrameReader <a href=' /sql/readwriter.py#L167'>json</a>(path,schema,primitivesAsString,prefersDecimal)</tt>	Loads json files and returns the results as a :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrameReader <a href=' /sql/readwriter.py#L265'>table</a>(tableName)</tt>	Returns the specified table as a :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrameReader <a href=' /sql/readwriter.py#L278'>parquet</a>()</tt>	Loads parquet files returning the result as a :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrameReader <a href=' /sql/readwriter.py#L293'>text</a>(paths)</tt>	Loads text files and returns a :class dataframe whose schema starts with a string column named "value", and followed by partitioned columns if there.
<tt style='background-color:#E8E8E8;'> sql.DataFrameReader <a href=' /sql/readwriter.py#L313'>csv</a>(path,schema,sep,encoding)</tt>	Loads a csv file and returns the result as a :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrameReader <a href=' /sql/readwriter.py#L412'>orc</a>(path)</tt>	Loads orc files returning the result as a :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataFrameReader <a href=' /sql/readwriter.py#L426'>jdbc</a>(url,table,column,lowerBound)</tt>	Construct a :class dataframe representing the database table named table accessible via jdbc url url and connection properties.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L495'>mode</a>(saveMode)</tt>	Specifies the behavior when data or table already exists.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L514'>format</a>(source)</tt>	Specifies the underlying output data source.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L525'>option</a>(key,value)</tt>	Adds an output option for the underlying data source.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L537'>options</a>()</tt>	Adds output options for the underlying data source.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L550'>partitionBy</a>()</tt>	Partitions the output by the given columns on the file system.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L566'>bucketBy</a>(numBuckets,col)</tt>	Buckets the output by the given columns if specified.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L598'>sortBy</a>(col)</tt>	Sorts the output in each bucket by the given columns on the file system.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L623'>save</a>(path,format,mode,partitionBy)</tt>	Saves the contents of the :class dataframe to a data source.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L654'>insertInto</a>(tableName,overwrite)</tt>	Inserts the content of the :class dataframe to the specified table.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L665'>saveAsTable</a>(name,format,mode,partitionBy)</tt>	Saves the content of the :class dataframe as the specified table.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L692'>json</a>(path,mode,compression,dateFormat)</tt>	Saves the content of the :class dataframe in json format (json lines text format or newline-delimited json <http //jsonlines.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L724'>parquet</a>(path,mode,partitionBy,compression)</tt>	Saves the content of the :class dataframe in parquet format at the specified path.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L750'>text</a>(path,compression)</tt>	Saves the content of the dataframe in a text file at the specified path.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L765'>csv</a>(path,mode,compression,sep)</tt>	Saves the content of the :class dataframe in csv format at the specified path.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L825'>orc</a>(path,mode,partitionBy,compression)</tt>	Saves the content of the :class dataframe in orc format at the specified path.
<tt style='background-color:#E8E8E8;'> sql.DataFrameWriter <a href=' /sql/readwriter.py#L853'>jdbc</a>(url,table,mode,properties)</tt>	Saves the content of the :class dataframe to an external database table via jdbc.
<tt style='background-color:#E8E8E8;'> sql.Window <a href=' /sql/window.py#L61'>partitionBy</a>()</tt>	Creates a :class windowspec with the partitioning defined.
<tt style='background-color:#E8E8E8;'> sql.Window <a href=' /sql/window.py#L71'>orderBy</a>()</tt>	Creates a :class windowspec with the ordering defined.
<tt style='background-color:#E8E8E8;'> sql.Window <a href=' /sql/window.py#L81'>rowsBetween</a>(start,end)</tt>	Creates a :class windowspec with the frame boundaries defined from start inclusive to end inclusive.
<tt style='background-color:#E8E8E8;'> sql.Window <a href=' /sql/window.py#L111'>rangeBetween</a>(start,end)</tt>	Creates a :class windowspec with the frame boundaries defined from start inclusive to end inclusive.
<tt style='background-color:#E8E8E8;'> sql.WindowSpec <a href=' /sql/window.py#L157'>partitionBy</a>()</tt>	Defines the partitioning columns in a :class windowspec.
<tt style='background-color:#E8E8E8;'> sql.WindowSpec <a href=' /sql/window.py#L166'>orderBy</a>()</tt>	Defines the ordering columns in a :class windowspec.
<tt style='background-color:#E8E8E8;'> sql.WindowSpec <a href=' /sql/window.py#L175'>rowsBetween</a>(start,end)</tt>	Defines the frame boundaries from start inclusive to end inclusive.
<tt style='background-color:#E8E8E8;'> sql.WindowSpec <a href=' /sql/window.py#L201'>rangeBetween</a>(start,end)</tt>	Defines the frame boundaries from start inclusive to end inclusive.
<tt style='background-color:#E8E8E8;'> sql.SQLTests <a href=' /sql/tests.py#L253'>test_column_name_encoding</a>()</tt>	Ensure that created columns has str type consistently.
<tt style='background-color:#E8E8E8;'> sql.StreamingQuery <a href=' /sql/streaming.py#L52'>id</a>()</tt>	Returns the unique id of this query that persists across restarts from checkpoint data.
<tt style='background-color:#E8E8E8;'> sql.StreamingQuery <a href=' /sql/streaming.py#L63'>runId</a>()</tt>	Returns the unique id of this query that does not persist across restarts that is every.
<tt style='background-color:#E8E8E8;'> sql.StreamingQuery <a href=' /sql/streaming.py#L71'>name</a>()</tt>	Returns the user-specified name of the query or null if not specified.
<tt style='background-color:#E8E8E8;'> sql.StreamingQuery <a href=' /sql/streaming.py#L81'>isActive</a>()</tt>	Whether this streaming query is currently active or not.
<tt style='background-color:#E8E8E8;'> sql.StreamingQuery <a href=' /sql/streaming.py#L88'>awaitTermination</a>(timeout)</tt>	Waits for the termination of this query either by :func query stop() or by an.
<tt style='background-color:#E8E8E8;'> sql.StreamingQuery <a href=' /sql/streaming.py#L108'>status</a>()</tt>	Returns the current status of the query.
<tt style='background-color:#E8E8E8;'> sql.StreamingQuery <a href=' /sql/streaming.py#L116'>recentProgress</a>()</tt>	Returns an array of the most recent [[streamingqueryprogress]] updates for this query.
<tt style='background-color:#E8E8E8;'> sql.StreamingQuery <a href=' /sql/streaming.py#L125'>lastProgress</a>()</tt>	Returns the most recent :class streamingqueryprogress update of this streaming query or.
<tt style='background-color:#E8E8E8;'> sql.StreamingQuery <a href=' /sql/streaming.py#L139'>processAllAvailable</a>()</tt>	Blocks until all available data in the source has been processed and committed to the sink.
<tt style='background-color:#E8E8E8;'> sql.StreamingQuery <a href=' /sql/streaming.py#L151'>stop</a>()</tt>	Stop this streaming query.
<tt style='background-color:#E8E8E8;'> sql.StreamingQuery <a href=' /sql/streaming.py#L157'>explain</a>(extended)</tt>	Prints the logical and physical plans to the console for debugging purpose.
<tt style='background-color:#E8E8E8;'> sql.StreamingQuery <a href=' /sql/streaming.py#L183'>exception</a>()</tt>	:return the streamingqueryexception if the query was terminated by an exception or none.
<tt style='background-color:#E8E8E8;'> sql.StreamingQueryManager <a href=' /sql/streaming.py#L208'>active</a>()</tt>	Returns a list of active queries associated with this sqlcontext >>> sq = sdf.
<tt style='background-color:#E8E8E8;'> sql.StreamingQueryManager <a href=' /sql/streaming.py#L223'>get</a>(id)</tt>	Returns an active query from this sqlcontext or throws exception if an active query with this name doesn't exist.
<tt style='background-color:#E8E8E8;'> sql.StreamingQueryManager <a href=' /sql/streaming.py#L242'>awaitAnyTermination</a>(timeout)</tt>	Wait until any of the queries on the associated sqlcontext has terminated since the creation of the context or since :func resetterminated() was called.
<tt style='background-color:#E8E8E8;'> sql.StreamingQueryManager <a href=' /sql/streaming.py#L270'>resetTerminated</a>()</tt>	Forget about past terminated queries so that :func awaitanytermination() can be used again to wait for new terminations.
<tt style='background-color:#E8E8E8;'> sql.DataStreamReader <a href=' /sql/streaming.py#L299'>format</a>(source)</tt>	Specifies the input data source format.
<tt style='background-color:#E8E8E8;'> sql.DataStreamReader <a href=' /sql/streaming.py#L312'>schema</a>(schema)</tt>	Specifies the input schema.
<tt style='background-color:#E8E8E8;'> sql.DataStreamReader <a href=' /sql/streaming.py#L334'>option</a>(key,value)</tt>	Adds an input option for the underlying data source.
<tt style='background-color:#E8E8E8;'> sql.DataStreamReader <a href=' /sql/streaming.py#L350'>options</a>()</tt>	Adds input options for the underlying data source.
<tt style='background-color:#E8E8E8;'> sql.DataStreamReader <a href=' /sql/streaming.py#L367'>load</a>(path,format,schema)</tt>	Loads a data stream from a data source and returns it as a :classdataframe.
<tt style='background-color:#E8E8E8;'> sql.DataStreamReader <a href=' /sql/streaming.py#L399'>json</a>(path,schema,primitivesAsString,prefersDecimal)</tt>	Loads a json file stream and returns the results as a :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataStreamReader <a href=' /sql/streaming.py#L482'>parquet</a>(path)</tt>	Loads a parquet file stream returning the result as a :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataStreamReader <a href=' /sql/streaming.py#L504'>text</a>(path)</tt>	Loads a text file stream and returns a :class dataframe whose schema starts with a string column named "value", and followed by partitioned columns if there.
<tt style='background-color:#E8E8E8;'> sql.DataStreamReader <a href=' /sql/streaming.py#L529'>csv</a>(path,schema,sep,encoding)</tt>	Loads a csv file stream and returns the result as a :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.DataStreamWriter <a href=' /sql/streaming.py#L654'>outputMode</a>(outputMode)</tt>	Specifies how data of a streaming dataframe/dataset is written to a streaming sink.
<tt style='background-color:#E8E8E8;'> sql.DataStreamWriter <a href=' /sql/streaming.py#L677'>format</a>(source)</tt>	Specifies the underlying output data source.
<tt style='background-color:#E8E8E8;'> sql.DataStreamWriter <a href=' /sql/streaming.py#L690'>option</a>(key,value)</tt>	Adds an output option for the underlying data source.
<tt style='background-color:#E8E8E8;'> sql.DataStreamWriter <a href=' /sql/streaming.py#L704'>options</a>()</tt>	Adds output options for the underlying data source.
<tt style='background-color:#E8E8E8;'> sql.DataStreamWriter <a href=' /sql/streaming.py#L719'>partitionBy</a>()</tt>	Partitions the output by the given columns on the file system.
<tt style='background-color:#E8E8E8;'> sql.DataStreamWriter <a href=' /sql/streaming.py#L736'>queryName</a>(queryName)</tt>	Specifies the name of the :class streamingquery that can be started with :func start.
<tt style='background-color:#E8E8E8;'> sql.DataStreamWriter <a href=' /sql/streaming.py#L753'>trigger</a>(processingTime,once)</tt>	Set the trigger for the stream query if this is not set it will run the query as fast.
<tt style='background-color:#E8E8E8;'> sql.DataStreamWriter <a href=' /sql/streaming.py#L787'>start</a>(path,format,outputMode,partitionBy)</tt>	Streams the contents of the :class dataframe to a data source.
<tt style='background-color:#E8E8E8;'> sql.RuntimeConfig <a href=' /sql/conf.py#L28'>__init__</a>(jconf)</tt>	Create a new runtimeconfig that wraps the underlying jvm object.
<tt style='background-color:#E8E8E8;'> sql.RuntimeConfig <a href=' /sql/conf.py#L32'>set</a>(key,value)</tt>	Sets the given spark runtime configuration property.
<tt style='background-color:#E8E8E8;'> sql.RuntimeConfig <a href=' /sql/conf.py#L38'>get</a>(key,default)</tt>	Returns the value of spark runtime configuration property for the given key assuming it is set.
<tt style='background-color:#E8E8E8;'> sql.RuntimeConfig <a href=' /sql/conf.py#L51'>unset</a>(key)</tt>	Resets the configuration property for the given key.
<tt style='background-color:#E8E8E8;'> sql.RuntimeConfig <a href=' /sql/conf.py#L57'>_checkType</a>(obj,identifier)</tt>	Assert that an object is of type str.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L40'>__init__</a>(sparkSession)</tt>	Create a new catalog that wraps the underlying jvm object.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L46'>currentDatabase</a>()</tt>	Returns the current default database in this session.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L52'>setCurrentDatabase</a>(dbName)</tt>	Sets the current default database in this session.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L58'>listDatabases</a>()</tt>	Returns a list of databases available across all sessions.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L72'>listTables</a>(dbName)</tt>	Returns a list of tables/views in the specified database.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L94'>listFunctions</a>(dbName)</tt>	Returns a list of functions registered in the specified database.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L115'>listColumns</a>(tableName,dbName)</tt>	Returns a list of columns for the given table/view in the specified database.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L140'>createExternalTable</a>(tableName,path,source,schema)</tt>	Creates a table based on the dataset in a data source.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L160'>createTable</a>(tableName,path,source,schema)</tt>	Creates a table based on the dataset in a data source.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L190'>dropTempView</a>(viewName)</tt>	Drops the local temporary view with the given view name in the catalog.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L210'>dropGlobalTempView</a>(viewName)</tt>	Drops the global temporary view with the given view name in the catalog.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L227'>registerFunction</a>(name,f,returnType)</tt>	Registers a python function including lambda function as a udf so it can be used in sql statements.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L263'>isCached</a>(tableName)</tt>	Returns true if the table is currently cached in-memory.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L268'>cacheTable</a>(tableName)</tt>	Caches the specified table in-memory.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L273'>uncacheTable</a>(tableName)</tt>	Removes the specified table from the in-memory cache.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L278'>clearCache</a>()</tt>	Removes all cached tables from the in-memory cache.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L283'>refreshTable</a>(tableName)</tt>	Invalidates and refreshes all the cached data and metadata of the given table.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L288'>recoverPartitions</a>(tableName)</tt>	Recovers all the partitions of the given table and update the catalog.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L296'>refreshByPath</a>(path)</tt>	Invalidates and refreshes all the cached data and the associated metadata for any dataframe that contains the given data source path.
<tt style='background-color:#E8E8E8;'> sql.Catalog <a href=' /sql/catalog.py#L303'>_reset</a>()</tt>	Internal use only drop all existing databases (except "default"), tables partitions and functions and set the current database to "default".
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/utils.py#L84'>install_exception_handler</a>()</tt>	Hook an exception handler into py4j which could capture some sql exceptions in java.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/utils.py#L102'>toJArray</a>(gateway,jtype,arr)</tt>	Convert python list to java type array.
<tt style='background-color:#E8E8E8;'> sql.DataType <a href=' /sql/types.py#L73'>needConversion</a>()</tt>	Does this type need to conversion between python object and internal sql object.
<tt style='background-color:#E8E8E8;'> sql.DataType <a href=' /sql/types.py#L81'>toInternal</a>(obj)</tt>	Converts a python object into an internal sql object.
<tt style='background-color:#E8E8E8;'> sql.DataType <a href=' /sql/types.py#L87'>fromInternal</a>(obj)</tt>	Converts an internal sql object into a native python object.
<tt style='background-color:#E8E8E8;'> sql.ArrayType <a href=' /sql/types.py#L283'>__init__</a>(elementType,containsNull)</tt>	>>> arraytype(stringtype()) == arraytype(stringtype(), true).
<tt style='background-color:#E8E8E8;'> sql.MapType <a href=' /sql/types.py#L335'>__init__</a>(keyType,valueType,valueContainsNull)</tt>	>>> (maptype(stringtype(), integertype()).
<tt style='background-color:#E8E8E8;'> sql.StructField <a href=' /sql/types.py#L394'>__init__</a>(name,dataType,nullable,metadata)</tt>	>>> (structfield("f1", stringtype(), true).
<tt style='background-color:#E8E8E8;'> sql.StructType <a href=' /sql/types.py#L456'>__init__</a>(fields)</tt>	>>> struct1 = structtype([structfield("f1", stringtype(), true)]) >>> struct2 = structtype([structfield("f1", stringtype(), true)]).
<tt style='background-color:#E8E8E8;'> sql.StructType <a href=' /sql/types.py#L478'>add</a>(field,data_type,nullable,metadata)</tt>	Construct a structtype by adding new elements to it to define the schema the method accepts.
<tt style='background-color:#E8E8E8;'> sql.StructType <a href=' /sql/types.py#L524'>__iter__</a>()</tt>	Iterate the fields.
<tt style='background-color:#E8E8E8;'> sql.StructType <a href=' /sql/types.py#L528'>__len__</a>()</tt>	Return the number of fields.
<tt style='background-color:#E8E8E8;'> sql.StructType <a href=' /sql/types.py#L532'>__getitem__</a>(key)</tt>	Access fields by name or slice.
<tt style='background-color:#E8E8E8;'> sql.UserDefinedType <a href=' /sql/types.py#L618'>sqlType</a>(cls)</tt>	Underlying sql storage type for this udt.
<tt style='background-color:#E8E8E8;'> sql.UserDefinedType <a href=' /sql/types.py#L625'>module</a>(cls)</tt>	The python module of the udt.
<tt style='background-color:#E8E8E8;'> sql.UserDefinedType <a href=' /sql/types.py#L632'>scalaUDT</a>(cls)</tt>	The class name of the paired scala udt (could be '', if there is no corresponding one).
<tt style='background-color:#E8E8E8;'> sql.UserDefinedType <a href=' /sql/types.py#L643'>_cachedSqlType</a>(cls)</tt>	Cache the sqltype() into class because it's heavy used in tointernal.
<tt style='background-color:#E8E8E8;'> sql.UserDefinedType <a href=' /sql/types.py#L661'>serialize</a>(obj)</tt>	Converts the a user-type object into a sql datum.
<tt style='background-color:#E8E8E8;'> sql.UserDefinedType <a href=' /sql/types.py#L667'>deserialize</a>(datum)</tt>	Converts a sql datum into a user-type object.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/types.py#L742'>_ignore_brackets_split</a>(s,separator)</tt>	Splits the given string by given separator but ignore separators inside brackets pairs e g.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/types.py#L788'>_parse_datatype_string</a>(s)</tt>	Parses the given data type string to a :class datatype the data type string format equals.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/types.py#L848'>_parse_datatype_json_string</a>(json_string)</tt>	Parses the given data type json string.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/types.py#L939'>_infer_type</a>(obj)</tt>	Infer the datatype from obj.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/types.py#L974'>_infer_schema</a>(row)</tt>	Infer the schema from dict/namedtuple/object.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/types.py#L998'>_has_nulltype</a>(dt)</tt>	Return whether there is nulltype in dt or not.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/types.py#L1054'>_create_converter</a>(dataType)</tt>	Create a converter to drop the names of fields in obj.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/types.py#L1104'>_split_schema_abstract</a>(s)</tt>	Split the schema abstract into fields.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/types.py#L1141'>_parse_field_abstract</a>(s)</tt>	Parse a field in schema abstract >>> _parse_field_abstract("a").
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/types.py#L1162'>_parse_schema_abstract</a>(s)</tt>	Parse abstract into schema >>> _parse_schema_abstract("a b c").
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/types.py#L1193'>_infer_schema_type</a>(obj,dataType)</tt>	Fill the datatype with types inferred from obj >>> schema = _parse_schema_abstract("a b c d").
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/types.py#L1252'>_verify_type</a>(obj,dataType,nullable)</tt>	Verify the type of obj against datatype raise a typeerror if they do not match.
<tt style='background-color:#E8E8E8;'> sql.Row <a href=' /sql/types.py#L1438'>asDict</a>(recursive)</tt>	Return as an dict.
<tt style='background-color:#E8E8E8;'> sql.Row <a href=' /sql/types.py#L1476'>__call__</a>()</tt>	Create new row object.
<tt style='background-color:#E8E8E8;'> sql.Row <a href=' /sql/types.py#L1511'>__reduce__</a>()</tt>	Returns a tuple so python knows how to pickle row.
<tt style='background-color:#E8E8E8;'> sql.Row <a href=' /sql/types.py#L1518'>__repr__</a>()</tt>	Printable representation of row used in python repl.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L54'>__init__</a>(sparkContext,sparkSession,jsqlContext)</tt>	Creates a new sqlcontext.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L86'>_ssql_ctx</a>()</tt>	Accessor for the jvm spark sql context.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L95'>getOrCreate</a>(cls,sc)</tt>	Get the existing sqlcontext or create a new one with given sparkcontext.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L109'>newSession</a>()</tt>	Returns a new sqlcontext as new session that has separate sqlconf registered temporary views and udfs but shared sparkcontext and.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L118'>setConf</a>(key,value)</tt>	Sets the given spark sql configuration property.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L124'>getConf</a>(key,defaultValue)</tt>	Returns the value of spark sql configuration property for the given key.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L143'>udf</a>()</tt>	Returns a :class udfregistration for udf registration.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L152'>range</a>(start,end,step,numPartitions)</tt>	Create a :class dataframe with single :class pyspark sql types longtype column named.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L175'>registerFunction</a>(name,f,returnType)</tt>	Registers a python function including lambda function as a udf so it can be used in sql statements.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L209'>registerJavaFunction</a>(name,javaClassName,returnType)</tt>	Register a java udf so it can be used in sql statements.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L236'>_inferSchema</a>(rdd,samplingRatio)</tt>	Infer schema from an rdd of row or tuple.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L246'>createDataFrame</a>(data,schema,samplingRatio,verifySchema)</tt>	Creates a :class dataframe from an :class rdd, a list or a :class pandas dataframe.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L339'>registerDataFrameAsTable</a>(df,tableName)</tt>	Registers the given :class dataframe as a temporary table in the catalog.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L349'>dropTempTable</a>(tableName)</tt>	Remove the temp table from catalog.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L358'>createExternalTable</a>(tableName,path,source,schema)</tt>	Creates an external table based on the dataset in a data source.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L376'>sql</a>(sqlQuery)</tt>	Returns a :class dataframe representing the result of the given query.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L390'>table</a>(tableName)</tt>	Returns the specified table or view as a :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L403'>tables</a>(dbName)</tt>	Returns a :class dataframe containing names of tables in the given database.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L426'>tableNames</a>(dbName)</tt>	Returns a list of names of tables in the database dbname.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L444'>cacheTable</a>(tableName)</tt>	Caches the specified table in-memory.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L449'>uncacheTable</a>(tableName)</tt>	Removes the specified table from the in-memory cache.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L454'>clearCache</a>()</tt>	Removes all cached tables from the in-memory cache.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L459'>read</a>()</tt>	Returns a :class dataframereader that can be used to read data in as a :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L470'>readStream</a>()</tt>	Returns a :class datastreamreader that can be used to read data streams as a streaming :class dataframe.
<tt style='background-color:#E8E8E8;'> sql.SQLContext <a href=' /sql/context.py#L487'>streams</a>()</tt>	Returns a :class streamingquerymanager that allows managing all the :class streamingquery streamingqueries active on this context.
<tt style='background-color:#E8E8E8;'> sql.HiveContext <a href=' /sql/context.py#L523'>_createForTesting</a>(cls,sparkContext)</tt>	Internal use only create a new hivecontext for testing.
<tt style='background-color:#E8E8E8;'> sql.HiveContext <a href=' /sql/context.py#L535'>refreshTable</a>(tableName)</tt>	Invalidate and refresh all the cached the metadata of the given table.
