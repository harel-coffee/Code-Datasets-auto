<tt style='background-color:#E8E8E8;'> core. <a href=' /printing.py#L57'>debugprint</a>(obj,depth,print_type,file)</tt>	Print a computation graph as text to stdout or a file.
<tt style='background-color:#E8E8E8;'> core. <a href=' /printing.py#L668'>pydotprint</a>(fct,outfile,compact,format)</tt>	Print to a file the graph of a compiled theano function's ops supports.
<tt style='background-color:#E8E8E8;'> core. <a href=' /printing.py#L1097'>min_informative_str</a>(obj,indent_level,_prev_obs,_tag_generator)</tt>	Returns a string specifying to the user what obj is the string will print out as much of the graph as is needed.
<tt style='background-color:#E8E8E8;'> core. <a href=' /printing.py#L1196'>var_descriptor</a>(obj,_prev_obs,_tag_generator)</tt>	Returns a string with no endlines fully specifying how a variable is computed.
<tt style='background-color:#E8E8E8;'> core. <a href=' /printing.py#L1263'>hex_digest</a>(x)</tt>	Returns a short mostly hexadecimal hash of a numpy ndarray.
<tt style='background-color:#E8E8E8;'> core.Raise <a href=' /raise_op.py#L18'>__init__</a>(msg,exc)</tt>	Msg - the argument to the exception exc - an exception class to raise in self.
<tt style='background-color:#E8E8E8;'> core. <a href=' /configparser.py#L34'>parse_config_string</a>(config_string,issue_warnings)</tt>	Parses a config string (comma-separated key=value components) into a dict.
<tt style='background-color:#E8E8E8;'> core. <a href=' /configparser.py#L136'>fetch_val_for_key</a>(key,delete_key)</tt>	Return the overriding config value for a key.
<tt style='background-color:#E8E8E8;'> core. <a href=' /configparser.py#L186'>get_config_md5</a>()</tt>	Return a string md5 of the current config options it should be such that.
<tt style='background-color:#E8E8E8;'> core. <a href=' /configparser.py#L226'>AddConfigVar</a>(name,doc,configparam,root)</tt>	Add a new variable to theano config.
<tt style='background-color:#E8E8E8;'> core.ConfigParam <a href=' /configparser.py#L301'>__init__</a>(default,filter,allow_override)</tt>	If allow_override is false we can't change the value after the import of theano.
<tt style='background-color:#E8E8E8;'> core. <a href=' /configdefaults.py#L218'>safe_no_dnn_workmem</a>(workmem)</tt>	Make sure the user is not attempting to use dnn conv workmem.
<tt style='background-color:#E8E8E8;'> core. <a href=' /configdefaults.py#L235'>safe_no_dnn_workmem_bwd</a>(workmem)</tt>	Make sure the user is not attempting to use dnn conv workmem_bwd.
<tt style='background-color:#E8E8E8;'> core. <a href=' /configdefaults.py#L254'>safe_no_dnn_algo_bwd</a>(algo)</tt>	Make sure the user is not attempting to use dnn conv algo_bwd.
<tt style='background-color:#E8E8E8;'> core. <a href=' /configdefaults.py#L450'>warn_cxx</a>(val)</tt>	We only support clang++ as otherwise we hit strange g++/osx bugs.
<tt style='background-color:#E8E8E8;'> core. <a href=' /configdefaults.py#L662'>warn_default</a>(version)</tt>	Return true iff we should warn about bugs fixed after a given version.
<tt style='background-color:#E8E8E8;'> core. <a href=' /configdefaults.py#L1480'>local_bitwidth</a>()</tt>	Return 32 for 32bit arch 64 for 64bit arch.
<tt style='background-color:#E8E8E8;'> core. <a href=' /configdefaults.py#L1495'>python_int_bitwidth</a>()</tt>	Return the bit width of python int c long int.
<tt style='background-color:#E8E8E8;'> core. <a href=' /configdefaults.py#L1518'>short_platform</a>(r,p)</tt>	Return a safe shorter version of platform platform().
<tt style='background-color:#E8E8E8;'> core. <a href=' /configdefaults.py#L1664'>get_home_dir</a>()</tt>	Return location of the user's home directory.
<tt style='background-color:#E8E8E8;'> core. <a href=' /ifelse.py#L291'>ifelse</a>(condition,then_branch,else_branch,name)</tt>	This function corresponds to an if statement returning and evaluating inputs in the then_branch if condition evaluates to true or.
<tt style='background-color:#E8E8E8;'> core. <a href=' /ifelse.py#L470'>ifelse_lift_single_if_through_acceptable_ops</a>(main_node)</tt>	This optimization lifts up certain ifelse instances.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__init__.py#L171'>dot</a>(l,r)</tt>	Return a symbolic matrix/dot product between l and r.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__init__.py#L192'>get_scalar_constant_value</a>(v)</tt>	Return the constant scalar 0-d value underlying variable v if v is the output of dimshuffles fills allocs rebroadcasts cast.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__init__.py#L211'>sparse_grad</a>(var)</tt>	This function return a new variable whose gradient will be stored in a sparse format instead of dense.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L44'>format_as</a>(use_list,use_tuple,outputs)</tt>	Formats the outputs according to the flags use_list and use_tuple.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L73'>grad_not_implemented</a>(op,x_pos,x,comment)</tt>	Return an un-computable symbolic variable of type x type.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L93'>grad_undefined</a>(op,x_pos,x,comment)</tt>	Return an un-computable symbolic variable of type x type.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L163'>Rop</a>(f,wrt,eval_points)</tt>	Computes the r operation on f wrt to wrt evaluated at points given in eval_points.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L308'>Lop</a>(f,wrt,eval_points,consider_constant)</tt>	Computes the l operation on f wrt to wrt evaluated at points given in eval_points.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L362'>grad</a>(cost,wrt,consider_constant,disconnected_inputs)</tt>	Return symbolic gradients for one or more variables with respect to some cost.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L582'>subgraph_grad</a>(wrt,end,start,cost)</tt>	With respect to wrt, computes gradients of cost and/or from existing start gradients up to the end variables of a.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L727'>_node_to_pattern</a>(node)</tt>	Given an apply node obtain its connection pattern this is just a wrapper around op.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L766'>_populate_var_to_app_to_idx</a>(outputs,wrt,consider_constant)</tt>	Helper function for grad function.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L927'>_populate_grad_dict</a>(var_to_app_to_idx,grad_dict,wrt,cost_name)</tt>	Helper function for grad function.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L1321'>_float_zeros_like</a>(x)</tt>	Like zeros_like but forces the object to have a.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L1333'>_float_ones_like</a>(x)</tt>	Like ones_like but forces the object to have a.
<tt style='background-color:#E8E8E8;'> core.numeric_grad <a href=' /gradient.py#L1380'>__init__</a>(f,pt,eps,out_type)</tt>	Return the gradient of f at pt.
<tt style='background-color:#E8E8E8;'> core.numeric_grad <a href=' /gradient.py#L1468'>abs_rel_err</a>(a,b)</tt>	Return absolute and relative error between a and b.
<tt style='background-color:#E8E8E8;'> core.numeric_grad <a href=' /gradient.py#L1494'>abs_rel_errors</a>(g_pt)</tt>	Return the abs and rel error of gradient estimate g_pt g_pt must be a list of ndarrays of the same length as self.
<tt style='background-color:#E8E8E8;'> core.numeric_grad <a href=' /gradient.py#L1515'>max_err</a>(g_pt,abs_tol,rel_tol)</tt>	Find the biggest error between g_pt and self gf.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L1558'>verify_grad</a>(fun,pt,n_tests,rng)</tt>	Test a gradient by finite difference method raise error on failure.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L1765'>jacobian</a>(expression,wrt,consider_constant,disconnected_inputs)</tt>	:type expression vector 1-dimensional variable.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L1838'>hessian</a>(cost,wrt,consider_constant,disconnected_inputs)</tt>	:type cost scalar 0-dimensional variable.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L1906'>_is_zero</a>(x)</tt>	Returns 'yes', 'no', or 'maybe' indicating whether x is always 0.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L1945'>consider_constant</a>(x)</tt>	Deprecated use zero_grad() or disconnected_grad() instead.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L1979'>zero_grad</a>(x)</tt>	Consider an expression constant when computing gradients.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L2011'>undefined_grad</a>(x)</tt>	Consider the gradient of this variable undefined and generate an error message if its gradient is taken.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L2043'>disconnected_grad</a>(x)</tt>	Consider an expression constant when computing gradients while effectively not backpropagating through it.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L2082'>grad_clip</a>(x,lower_bound,upper_bound)</tt>	This op do a view in the forward but clip the gradient.
<tt style='background-color:#E8E8E8;'> core. <a href=' /gradient.py#L2118'>grad_scale</a>(x,multiplier)</tt>	This op scale or inverse the gradient in the backpropagation.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/safe_asarray.py#L13'>_asarray</a>(a,dtype,order)</tt>	Convert the input to a numpy array.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/gh_api.py#L63'>post_gist</a>(content,description,filename,auth)</tt>	Post some text to a gist and return the url.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/gh_api.py#L82'>get_pull_request</a>(project,num,github_api)</tt>	Get pull request info by number.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/gh_api.py#L98'>get_pulls_list</a>(project,github_api)</tt>	Get pull request list.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/check_blas.py#L20'>execute</a>(execute,verbose,M,N)</tt>	:param execute if true execute a theano function that should call gemm.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/windows.py#L6'>subprocess_Popen</a>(command)</tt>	Utility function to work around windows behavior that open windows.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/windows.py#L50'>call_subprocess_Popen</a>(command)</tt>	Calls subprocess_popen and discards the output returning only the exit code.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/windows.py#L68'>output_subprocess_Popen</a>(command)</tt>	Calls subprocess_popen returning the output error and exit code in a tuple.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/strutil.py#L5'>render_string</a>(string,sub)</tt>	String a string containing formatting instructions sub a dictionary containing keys and values to substitute for.
<tt style='background-color:#E8E8E8;'> misc.PersistentNdarrayID <a href=' /misc/pkl_utils.py#L183'>_resolve_name</a>(obj)</tt>	Determine the name the object should be saved under.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/pkl_utils.py#L314'>dump</a>(obj,file_handler,protocol,persistent_id)</tt>	Pickles an object to a zip file using external persistence.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/pkl_utils.py#L367'>load</a>(f,persistent_load)</tt>	Load a file that was dumped to a zip file.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/pkl_utils.py#L386'>zipadd</a>(func,zip_file,name)</tt>	Calls a function with a file object saving it to a zip file.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/cpucount.py#L37'>cpuCount</a>()</tt>	Returns the number of cpus in the system.
<tt style='background-color:#E8E8E8;'> misc.hooks. <a href=' /misc/hooks/reindent.py#L147'>_rstrip</a>(line,JUNK)</tt>	Return line stripped of trailing spaces tabs newlines.
<tt style='background-color:#E8E8E8;'> misc.hooks. <a href=' /misc/hooks/check_whitespace.py#L29'>get_parse_error</a>(code)</tt>	Checks code for ambiguous tabs or other basic parsing issues.
<tt style='background-color:#E8E8E8;'> misc.hooks. <a href=' /misc/hooks/check_whitespace.py#L59'>get_correct_indentation_diff</a>(code,filename)</tt>	Generate a diff to make code correctly indented.
<tt style='background-color:#E8E8E8;'> scalar. <a href=' /scalar/basic.py#L91'>as_common_dtype</a>()</tt>	For for theano scalar scalar and tensorvariable.
<tt style='background-color:#E8E8E8;'> scalar. <a href=' /scalar/basic.py#L99'>get_scalar_type</a>(dtype)</tt>	Return a scalar dtype object.
<tt style='background-color:#E8E8E8;'> scalar. <a href=' /scalar/basic.py#L253'>convert</a>(x,dtype)</tt>	Convert the input to a properly typed numpy value according to the current casting policy.
<tt style='background-color:#E8E8E8;'> scalar. <a href=' /scalar/basic.py#L856'>upgrade_to_float</a>()</tt>	Upgrade any int types to float32 or float64 to avoid losing precision.
<tt style='background-color:#E8E8E8;'> scalar. <a href=' /scalar/basic.py#L874'>upgrade_to_float64</a>()</tt>	Upgrade any int and float32 to float64 to do as scipy.
<tt style='background-color:#E8E8E8;'> scalar. <a href=' /scalar/basic.py#L952'>upgrade_to_float_no_complex</a>()</tt>	Don't accept complex otherwise call upgrade_to_float().
<tt style='background-color:#E8E8E8;'> scalar.ScalarOp <a href=' /scalar/basic.py#L1112'>c_code_contiguous</a>(node,name,inp,out)</tt>	This function is called by elemwise when all inputs and outputs are c_contiguous.
<tt style='background-color:#E8E8E8;'> scalar. <a href=' /scalar/basic.py#L1790'>int_or_true_div</a>(x_discrete,y_discrete)</tt>	Return 'int' or 'true' depending on the type of division used for x / y.
<tt style='background-color:#E8E8E8;'> scalar. <a href=' /scalar/basic.py#L1842'>div_proxy</a>(x,y)</tt>	Proxy for either true_div or int_div depending on types of x y.
<tt style='background-color:#E8E8E8;'> scalar.Mod <a href=' /scalar/basic.py#L2032'>c_code</a>(node,name,inputs,outputs)</tt>	We want the result to have the same sign as python not the other implementation of mod.
<tt style='background-color:#E8E8E8;'> scalar.Cast <a href=' /scalar/basic.py#L2297'>make_new_inplace</a>(output_types_preference,name)</tt>	This op __init__ fct don't have the same parameter as other scalar op.
<tt style='background-color:#E8E8E8;'> scalar. <a href=' /scalar/basic.py#L2366'>cast</a>(x,dtype)</tt>	Symbolically cast x to a scalar of given dtype.
<tt style='background-color:#E8E8E8;'> scalar.Composite <a href=' /scalar/basic.py#L3716'>make_new_inplace</a>(output_types_preference,name)</tt>	This op __init__ fct don't have the same parameter as other scalar op.
<tt style='background-color:#E8E8E8;'> scalar.Composite <a href=' /scalar/basic.py#L3732'>init_c_code</a>()</tt>	Assemble the c code for this composite op.
<tt style='background-color:#E8E8E8;'> scalar.Composite <a href=' /scalar/basic.py#L3784'>init_py_impls</a>()</tt>	Return a list of functions that compute each output of self.
<tt style='background-color:#E8E8E8;'> scalar.Composite <a href=' /scalar/basic.py#L3832'>init_name</a>()</tt>	Return a readable string representation of self fgraph.
<tt style='background-color:#E8E8E8;'> scalar. <a href=' /scalar/sharedvar.py#L42'>shared</a>(value,name,strict,allow_downcast)</tt>	Sharedvariable constructor for scalar values default int64 or float64.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/__init__.py#L112'>maybe_add_to_os_environ_pathlist</a>(var,newpath)</tt>	Unfortunately conda offers to make itself the default python and those who use it that way will probably not activate envs.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/six.py#L74'>_add_doc</a>(func,doc)</tt>	Add documentation to a function.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/six.py#L79'>_import_module</a>(name)</tt>	Import module returning the module after the last dot.
<tt style='background-color:#E8E8E8;'> compat._SixMetaPathImporter <a href=' /compat/six.py#L206'>is_package</a>(fullname)</tt>	Return true if the named module is a package.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/six.py#L470'>add_move</a>(move)</tt>	Add an item to six moves.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/six.py#L475'>remove_move</a>(name)</tt>	Remove item from six moves.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/six.py#L772'>with_metaclass</a>(meta)</tt>	Create a base class with a metaclass.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/six.py#L783'>add_metaclass</a>(metaclass)</tt>	Class decorator for creating a class with a metaclass.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/six.py#L799'>python_2_unicode_compatible</a>(klass)</tt>	A decorator that defines __unicode__ and __str__ methods under python 2.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/linalg.py#L420'>gpu_svd</a>(a,full_matrices,compute_uv)</tt>	This function performs the svd on gpu.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/linalg.py#L496'>gpu_matrix_inverse</a>(a)</tt>	This function performs the matrix inverse on gpu.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/dnn.py#L325'>version</a>(raises)</tt>	Return the current cudnn version we link with.
<tt style='background-color:#E8E8E8;'> gpuarray.GpuDnnConv <a href=' /gpuarray/dnn.py#L621'>get_out_shape</a>(ishape,kshape,border_mode,subsample)</tt>	This function computes the output shape for a convolution with the specified parameters.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/dnn.py#L900'>dnn_conv</a>(img,kerns,border_mode,subsample)</tt>	Gpu convolution using cudnn from nvidia.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/dnn.py#L1018'>dnn_conv3d</a>(img,kerns,border_mode,subsample)</tt>	Gpu convolution using cudnn from nvidia.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/dnn.py#L1131'>dnn_gradweight</a>(img,topgrad,kerns_shp,border_mode)</tt>	Todo document this.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/dnn.py#L1150'>dnn_gradweight3d</a>(img,topgrad,kerns_shp,border_mode)</tt>	3d version of dnn_gradweight.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/dnn.py#L1159'>dnn_gradinput</a>(kerns,topgrad,img_shp,border_mode)</tt>	Todo document this.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/dnn.py#L1178'>dnn_gradinput3d</a>(kerns,topgrad,img_shp,border_mode)</tt>	3d version of dnn_gradinput.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/dnn.py#L1450'>dnn_pool</a>(img,ws,stride,mode)</tt>	Gpu pooling using cudnn from nvidia.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/dnn.py#L2472'>dnn_batch_normalization_train</a>(inputs,gamma,beta,mode)</tt>	Performs batch normalization of the given inputs using the mean and variance of the inputs.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/dnn.py#L2611'>dnn_batch_normalization_test</a>(inputs,gamma,beta,mean)</tt>	Performs batch normalization of the given inputs using the given mean and variance.
<tt style='background-color:#E8E8E8;'> gpuarray.NoCuDNNRaise <a href=' /gpuarray/dnn.py#L3036'>apply</a>(fgraph)</tt>	Raise a error if cudnn can't be used.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/basic_ops.py#L34'>as_gpuarray_variable</a>(x,context_name)</tt>	This will attempt to convert x into a variable on the gpu.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/basic_ops.py#L98'>infer_context_name</a>()</tt>	Infer the context name to use from the inputs given.
<tt style='background-color:#E8E8E8;'> gpuarray.GpuKernelBase <a href=' /gpuarray/basic_ops.py#L296'>gpu_kernels</a>(node,name)</tt>	This is the method to override this should return an iterable.
<tt style='background-color:#E8E8E8;'> gpuarray.GpuKernelBase <a href=' /gpuarray/basic_ops.py#L423'>kernel_version</a>(node)</tt>	If you override :meth c_code_cache_version_apply, call this method to have the version of the kernel support code and.
<tt style='background-color:#E8E8E8;'> gpuarray.BaseGpuCorrMM <a href=' /gpuarray/blas.py#L526'>flops</a>(inp,outp)</tt>	Useful with the hack in profilemode to print the mflops.
<tt style='background-color:#E8E8E8;'> gpuarray.BaseGpuCorrMM <a href=' /gpuarray/blas.py#L557'>c_code_helper</a>(bottom,weights,top,direction)</tt>	This generates the c code for gpucorrmm (direction="forward"), gpucorrmm_gradweights (direction="backprop weights"), and.
<tt style='background-color:#E8E8E8;'> gpuarray.BaseGpuCorr3dMM <a href=' /gpuarray/blas.py#L1123'>flops</a>(inp,outp)</tt>	Useful with the hack in profilemode to print the mflops.
<tt style='background-color:#E8E8E8;'> gpuarray.BaseGpuCorr3dMM <a href=' /gpuarray/blas.py#L1154'>c_code_helper</a>(bottom,weights,top,direction)</tt>	This generates the c code for gpucorr3dmm (direction="forward"), gpucorr3dmm_gradweights (direction="backprop weights"), and.
<tt style='background-color:#E8E8E8;'> gpuarray.GpuIncSubtensor <a href=' /gpuarray/subtensor.py#L250'>do_type_checking</a>(node)</tt>	Should raise notimplementederror if c_code does not support the types involved in this node.
<tt style='background-color:#E8E8E8;'> gpuarray.GpuIncSubtensor <a href=' /gpuarray/subtensor.py#L316'>get_helper_c_code_args</a>()</tt>	Return a dictionary of arguments to use with helper_c_code.
<tt style='background-color:#E8E8E8;'> gpuarray.GpuAdvancedIncSubtensor1_dev20 <a href=' /gpuarray/subtensor.py#L802'>make_node</a>(x,y,ilist)</tt>	It differs from gpuadvancedincsubtensor1 in that it makes sure the indexes are of type long.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/fft.py#L285'>curfft</a>(inp,norm)</tt>	Performs the fast fourier transform of a real-valued input on the gpu.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/fft.py#L319'>cuirfft</a>(inp,norm,is_odd)</tt>	Performs the inverse fast fourier transform with real-valued output on the gpu.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/fp16_help.py#L4'>work_dtype</a>(dtype)</tt>	Return the data type for working memory.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/fp16_help.py#L15'>load_w</a>(dtype)</tt>	Return the function name to load data.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/fp16_help.py#L30'>write_w</a>(dtype)</tt>	Return the function name to write data.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/kernel_codegen.py#L14'>nvcc_kernel</a>(name,params,body)</tt>	Return the c code of a kernel function.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/kernel_codegen.py#L44'>code_version</a>(version)</tt>	Decorator to support version-based cache mechanism.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/kernel_codegen.py#L60'>inline_reduce</a>(N,buf,pos,count)</tt>	Return c++ code for a function that reduces a contiguous buffer.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/kernel_codegen.py#L140'>inline_softmax</a>(N,buf,buf2,threadPos)</tt>	Generate code for a softmax.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/kernel_codegen.py#L196'>inline_reduce_fixed_shared</a>(N,buf,x,stride_x)</tt>	Return c++ code for a function that reduces a contiguous buffer.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/kernel_codegen.py#L299'>inline_softmax_fixed_shared</a>(N,buf,x,stride_x)</tt>	Generate code to perform softmax with a fixed amount of shared memory.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/type.py#L27'>gpu_supported</a>(data)</tt>	Is the following data supported on the gpu? currently only complex aren't supported.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/type.py#L41'>move_to_gpu</a>(data)</tt>	Do we want to move this computation to the gpu? currently we don't move complex and scalar.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/type.py#L65'>reg_context</a>(name,ctx)</tt>	Register a context by mapping it to a name.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/type.py#L89'>get_context</a>(name)</tt>	Retrive the context associated with a name.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/type.py#L108'>list_contexts</a>()</tt>	Return an iterable of all the registered context names.
<tt style='background-color:#E8E8E8;'> gpuarray.GpuArrayType <a href=' /gpuarray/type.py#L202'>context</a>()</tt>	The context object mapped to the type's :attr context_name.
<tt style='background-color:#E8E8E8;'> gpuarray.GpuArrayType <a href=' /gpuarray/type.py#L424'>dtype_specs</a>()</tt>	Return a tuple python type c type numpy typenum that corresponds to self.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/type.py#L650'>gpuarray_shared_constructor</a>(value,name,strict,allow_downcast)</tt>	Sharedvariable constructor for gpuarraytype.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt_util.py#L17'>grab_cpu_scalar</a>(v,nd)</tt>	Get a scalar variable value from the tree at v.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt_util.py#L48'>find_node</a>(v,cls,ignore_clients)</tt>	Find the node that has an op of of type cls in v.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt_util.py#L79'>is_equal</a>(var,val)</tt>	Returns true if var is always equal to val.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt_util.py#L101'>alpha_merge</a>(cls,alpha_in,beta_in)</tt>	Decorator to merge multiplication by a scalar on the output.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt_util.py#L192'>output_merge</a>(cls,alpha_in,beta_in,out_in)</tt>	Decorator to merge addition by a value on the output.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt_util.py#L280'>inplace_allocempty</a>(op,idx)</tt>	Wrapper to make an inplace optimization that deals with allocempty this will duplicate the alloc input if it has more than one client.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt_util.py#L334'>pad_dims</a>(input,leftdims,rightdims)</tt>	Reshapes the input to a leftdims + rightdims tensor this helper function is used to convert pooling inputs with arbitrary.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt_util.py#L394'>unpad_dims</a>(output,input,leftdims,rightdims)</tt>	Reshapes the output after pad_dims.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/__init__.py#L127'>use</a>(device,force,default_to_move_computation_to_gpu,move_shared_to_gpu)</tt>	Error and warning about cuda should be displayed only when this function is called.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt.py#L123'>register_opt2</a>(tracks)</tt>	Decorator for the new graphtogpu optimizer.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt.py#L180'>op_lifter</a>(OP,cuda_only)</tt>	Op( host_from_gpu(), -> host_from_gpu(gpuop.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt.py#L582'>local_gpua_alloc2</a>(node)</tt>	Join(axis {alloc or hostfromgpu}, -> join axis gpualloc alloc.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt.py#L649'>local_gpu_contiguous_gpu_contiguous</a>(node)</tt>	Gpu_contiguous(gpu_contiguous x -> gpu_contiguous x.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt.py#L765'>split_huge_add_or_mul</a>(node)</tt>	For add and mul it can happen that we have too much input that will make nvcc fail compilation of our current code.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt.py#L1353'>local_conv_gpu_conv</a>(node)</tt>	Gpu_from_host abstractconv -> abstractconv(gpu_from_host).
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt.py#L1805'>local_gpu_elemwise_careduce</a>(node)</tt>	Merge some gpucareducecuda and gpuelemwise.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt.py#L1864'>gpu_safe_new</a>(x,tag)</tt>	Internal function that constructs a new variable from x with the same type but with a different name old name + tag.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/opt.py#L1886'>gpu_reconstruct_graph</a>(inputs,outputs,tag)</tt>	Different interface to clone that allows you to pass inputs.
<tt style='background-color:#E8E8E8;'> gpuarray. <a href=' /gpuarray/elemwise.py#L44'>max_inputs_to_GpuElemwise</a>(node_or_outputs)</tt>	Compute the maximum number of inputs that fit in a kernel call.
<tt style='background-color:#E8E8E8;'> gpuarray.GpuCAReduceCuda <a href=' /gpuarray/elemwise.py#L627'>supports_c_code</a>(inputs)</tt>	Returns true if the current op and reduce pattern has functioning c code.
<tt style='background-color:#E8E8E8;'> gpuarray.GpuCAReduceCuda <a href=' /gpuarray/elemwise.py#L814'>_makecall</a>(node,name,x,z)</tt>	Return a string for making a kernel call.
<tt style='background-color:#E8E8E8;'> gpuarray.GpuCAReduceCuda <a href=' /gpuarray/elemwise.py#L919'>_k_decl</a>(node,nodename,pattern,ndim)</tt>	Return a string to declare a kernel function.
<tt style='background-color:#E8E8E8;'> gpuarray.GpuCAReduceCuda <a href=' /gpuarray/elemwise.py#L1010'>_assign_init</a>(first_item)</tt>	This return the initial value for myresult.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_utils.py#L41'>safe_new</a>(x,tag,dtype)</tt>	Internal function that constructs a new variable from x with the same type but with a different name old name + tag.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_utils.py#L129'>traverse</a>(out,x,x_copy,d)</tt>	Function used by scan to parse the tree and figure out which nodes it needs to replace.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_utils.py#L190'>clone</a>(output,replace,strict,share_inputs)</tt>	Function that allows replacing subgraphs of a computational graph.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_utils.py#L252'>map_variables</a>(replacer,graphs,additional_inputs)</tt>	Construct new graphs based on 'graphs' with some variables replaced according to 'replacer'.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_utils.py#L460'>get_updates_and_outputs</a>(ls)</tt>	This function tries to recognize the updates ordereddict the list of outputs and the stopping condition returned by the.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_utils.py#L603'>expand_empty</a>(tensor_var,size)</tt>	Transforms the shape of a tensor from d1 d2 to d1+size d2.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_utils.py#L621'>equal_computations</a>(xs,ys,in_xs,in_ys)</tt>	Checks if theano graphs represent the same computations.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_utils.py#L754'>infer_shape</a>(outs,inputs,input_shapes)</tt>	Compute the shape of the outputs given the shape of the inputs of a theano graph.
<tt style='background-color:#E8E8E8;'> scan_module.Validator <a href=' /scan_module/scan_utils.py#L838'>check</a>(out)</tt>	Go backwards in the graph from out and check if out is valid.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_utils.py#L923'>scan_can_remove_outs</a>(op,out_idxs)</tt>	Looks at all outputs defined by indices out_idxs and see whom can be removed from the scan op without affecting the rest.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_utils.py#L963'>compress_outs</a>(op,not_required,inputs)</tt>	Helpful function that gets a scan op a list of indices indicating which outputs are not required anymore and should be removed and.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_utils.py#L1107'>reconstruct_graph</a>(inputs,outputs,tag)</tt>	Different interface to clone that allows you to pass inputs.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_utils.py#L1318'>forced_replace</a>(out,x,y)</tt>	Check all internal values of the graph that compute the variable out for occurrences of values identical with x.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_views.py#L31'>map</a>(fn,sequences,non_sequences,truncate_gradient)</tt>	Similar behaviour as python's map.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_views.py#L74'>reduce</a>(fn,sequences,outputs_info,non_sequences)</tt>	Similar behaviour as python's reduce.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_views.py#L123'>foldl</a>(fn,sequences,outputs_info,non_sequences)</tt>	Similar behaviour as haskell's foldl.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_views.py#L162'>foldr</a>(fn,sequences,outputs_info,non_sequences)</tt>	Similar behaviour as haskell' foldr.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_checkpoints.py#L7'>scan_checkpoints</a>(fn,sequences,outputs_info,non_sequences)</tt>	Scan function that uses less memory but is more restrictive.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_opt.py#L103'>remove_constants_and_unused_inputs_scan</a>(node)</tt>	Move constants into the inner graph and remove unused inputs.
<tt style='background-color:#E8E8E8;'> scan_module.PushOutNonSeqScan <a href=' /scan_module/scan_opt.py#L230'>process_node</a>(fgraph,node)</tt>	Important note this function uses set and dictionary data structures.
<tt style='background-color:#E8E8E8;'> scan_module.PushOutSeqScan <a href=' /scan_module/scan_opt.py#L437'>process_node</a>(fgraph,node)</tt>	Important note this function uses set and dictionary data structure.
<tt style='background-color:#E8E8E8;'> scan_module.PushOutScanOutput <a href=' /scan_module/scan_opt.py#L780'>inner_sitsot_only_last_step_used</a>(var,scan_args)</tt>	Given a inner nit_sot output of scan return true iff the outer nit_sot output has only one client and that client is a subtensor.
<tt style='background-color:#E8E8E8;'> scan_module.ScanInplaceOptimizer <a href=' /scan_module/scan_opt.py#L926'>attempt_scan_inplace</a>(fgraph,node,output_indices,alloc_ops)</tt>	Attempts to replace a scan node by one which computes the specified outputs inplace.
<tt style='background-color:#E8E8E8;'> scan_module.ScanMerge <a href=' /scan_module/scan_opt.py#L1800'>belongs_to_set</a>(node,set_nodes)</tt>	This function checks if node node belongs to set_nodes, in the sense that it can be merged together with every other node in.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_opt.py#L1877'>has_duplicates</a>(l)</tt>	Returns true if l has any duplicates (according to __eq__).
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan_opt.py#L1885'>make_equiv</a>(lo,li)</tt>	Builds a dictionary of equivalences between inner inputs based on the equivalence of their corresponding outer inputs.
<tt style='background-color:#E8E8E8;'> scan_module.Scan <a href=' /scan_module/scan_op.py#L222'>validate_inner_graph</a>()</tt>	Perform some elementary validations on the inner graph to ensure that it is coherent.
<tt style='background-color:#E8E8E8;'> scan_module.Scan <a href=' /scan_module/scan_op.py#L300'>make_node</a>()</tt>	Conventions inner_x - the variable corresponding to x in the inner function.
<tt style='background-color:#E8E8E8;'> scan_module.Scan <a href=' /scan_module/scan_op.py#L1122'>execute</a>(node,args,outs)</tt>	The args are packed like this n_steps.
<tt style='background-color:#E8E8E8;'> scan_module.Scan <a href=' /scan_module/scan_op.py#L1783'>get_oinp_iinp_iout_oout_mappings</a>()</tt>	Compute and return dictionary mappings between the inputs and outputs of the inner function and the inputs and outputs of the scan.
<tt style='background-color:#E8E8E8;'> scan_module. <a href=' /scan_module/scan.py#L73'>scan</a>(fn,sequences,outputs_info,non_sequences)</tt>	This function constructs and applies a scan op to the provided arguments.
<tt style='background-color:#E8E8E8;'> gof.Unification <a href=' /gof/unify.py#L149'>merge</a>(new_best)</tt>	Links all the specified vars to a variable that represents their unification.
<tt style='background-color:#E8E8E8;'> gof.Unification <a href=' /gof/unify.py#L179'>__getitem__</a>(v)</tt>	For a variable v returns a variable that represents the tightest set of possible values it can take.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/unify.py#L394'>unify_walk</a>(a,b,U)</tt>	Checks for the existence of the __unify_walk__ method for one of the objects.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/unify.py#L394'>unify_walk</a>(fv,o,U)</tt>	Freev is unified to boundvariable(other_object).
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/unify.py#L394'>unify_walk</a>(bv,o,U)</tt>	The unification succeed iff bv value == other_object.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/unify.py#L394'>unify_walk</a>(ov,o,U)</tt>	The unification succeeds iff other_object in orv options.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/unify.py#L394'>unify_walk</a>(nv,o,U)</tt>	The unification succeeds iff other_object not in nv not_options.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/unify.py#L394'>unify_walk</a>(fv,v,U)</tt>	Both variables are unified.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/unify.py#L394'>unify_walk</a>(bv,v,U)</tt>	V is unified to bv value.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/unify.py#L394'>unify_walk</a>(o,n,U)</tt>	Orv list1 == nv list2 == orv(list1 \ list2).
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/unify.py#L394'>unify_walk</a>(vil,l,U)</tt>	Unifies vil's inner variable to orv list.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/unify.py#L394'>unify_walk</a>(l1,l2,U)</tt>	Tries to unify each corresponding pair of elements from l1 and l2.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/unify.py#L394'>unify_walk</a>(d1,d2,U)</tt>	Tries to unify values of corresponding keys.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/unify.py#L394'>unify_walk</a>(v,o,U)</tt>	This simply checks if the var has an unification in u and uses it instead of the var.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/unify.py#L478'>unify_merge</a>(v,o,U)</tt>	This simply checks if the var has an unification in u and uses it instead of the var.
<tt style='background-color:#E8E8E8;'> gof.CLinkerObject <a href=' /gof/op.py#L55'>c_headers</a>()</tt>	Optional return a list of header files required by code returned by this class.
<tt style='background-color:#E8E8E8;'> gof.CLinkerObject <a href=' /gof/op.py#L79'>c_header_dirs</a>()</tt>	Optional return a list of header search paths required by code returned by this class.
<tt style='background-color:#E8E8E8;'> gof.CLinkerObject <a href=' /gof/op.py#L105'>c_libraries</a>()</tt>	Optional return a list of libraries required by code returned by this class.
<tt style='background-color:#E8E8E8;'> gof.CLinkerObject <a href=' /gof/op.py#L129'>c_lib_dirs</a>()</tt>	Optional return a list of library search paths required by code returned by this class.
<tt style='background-color:#E8E8E8;'> gof.CLinkerObject <a href=' /gof/op.py#L153'>c_support_code</a>()</tt>	Optional return utility code for use by a variable or op to be included at global scope prior to the rest of the code for this class.
<tt style='background-color:#E8E8E8;'> gof.CLinkerObject <a href=' /gof/op.py#L172'>c_code_cache_version</a>()</tt>	Return a tuple of integers indicating the version of this op.
<tt style='background-color:#E8E8E8;'> gof.CLinkerObject <a href=' /gof/op.py#L189'>c_compile_args</a>()</tt>	Optional return a list of compile args recommended to compile the code returned by other methods in this class.
<tt style='background-color:#E8E8E8;'> gof.CLinkerObject <a href=' /gof/op.py#L213'>c_no_compile_args</a>()</tt>	Optional return a list of incompatible gcc compiler arguments.
<tt style='background-color:#E8E8E8;'> gof.CLinkerObject <a href=' /gof/op.py#L237'>c_init_code</a>()</tt>	Optional return a list of code snippets to be inserted in module initialization.
<tt style='background-color:#E8E8E8;'> gof.CLinkerOp <a href=' /gof/op.py#L263'>c_code</a>(node,name,inputs,outputs)</tt>	Required return the c implementation of an op.
<tt style='background-color:#E8E8E8;'> gof.CLinkerOp <a href=' /gof/op.py#L305'>c_code_cache_version_apply</a>(node)</tt>	Return a tuple of integers indicating the version of this op.
<tt style='background-color:#E8E8E8;'> gof.CLinkerOp <a href=' /gof/op.py#L328'>c_code_cleanup</a>(node,name,inputs,outputs)</tt>	Optional return c code to run after c_code whether it failed or not.
<tt style='background-color:#E8E8E8;'> gof.CLinkerOp <a href=' /gof/op.py#L367'>c_support_code_apply</a>(node,name)</tt>	Optional return utility code for use by an op that will be inserted at global scope that can be specialized for the.
<tt style='background-color:#E8E8E8;'> gof.CLinkerOp <a href=' /gof/op.py#L396'>c_init_code_apply</a>(node,name)</tt>	Optional return a code string specific to the apply to be inserted in the module initialization code.
<tt style='background-color:#E8E8E8;'> gof.CLinkerOp <a href=' /gof/op.py#L424'>c_init_code_struct</a>(node,name,sub)</tt>	Optional return a code string specific to the apply to be inserted in the struct initialization code.
<tt style='background-color:#E8E8E8;'> gof.CLinkerOp <a href=' /gof/op.py#L448'>c_support_code_struct</a>(node,name)</tt>	Optional return utility code for use by an op that will be inserted at struct scope that can be specialized for the.
<tt style='background-color:#E8E8E8;'> gof.CLinkerOp <a href=' /gof/op.py#L470'>c_cleanup_code_struct</a>(node,name)</tt>	Optional return a code string specific to the apply to be inserted in the struct cleanup code.
<tt style='background-color:#E8E8E8;'> gof.PureOp <a href=' /gof/op.py#L532'>make_node</a>()</tt>	Required return an apply instance representing the application of this op to the provided inputs.
<tt style='background-color:#E8E8E8;'> gof.PureOp <a href=' /gof/op.py#L541'>_get_test_value</a>(cls,v)</tt>	Extract test value from variable v.
<tt style='background-color:#E8E8E8;'> gof.PureOp <a href=' /gof/op.py#L583'>__call__</a>()</tt>	Optional return some or all output[s] of make_node.
<tt style='background-color:#E8E8E8;'> gof.PureOp <a href=' /gof/op.py#L713'>R_op</a>(inputs,eval_points)</tt>	This method is primarily used by tensor rop.
<tt style='background-color:#E8E8E8;'> gof.PureOp <a href=' /gof/op.py#L744'>perform</a>(node,inputs,output_storage,params)</tt>	Required calculate the function on the inputs and put the variables in the output storage.
<tt style='background-color:#E8E8E8;'> gof.PureOp <a href=' /gof/op.py#L781'>do_constant_folding</a>(node)</tt>	This allows each op to determine if it wants to be constant folded when all its inputs are constant.
<tt style='background-color:#E8E8E8;'> gof.Op <a href=' /gof/op.py#L814'>prepare_node</a>(node,storage_map,compute_map,impl)</tt>	Make any special modifications that the op needs before doing make_thunk().
<tt style='background-color:#E8E8E8;'> gof.Op <a href=' /gof/op.py#L828'>make_c_thunk</a>(node,storage_map,compute_map,no_recycling)</tt>	Like make_thunk but will only try to make a c thunk.
<tt style='background-color:#E8E8E8;'> gof.Op <a href=' /gof/op.py#L869'>make_py_thunk</a>(node,storage_map,compute_map,no_recycling)</tt>	Like make_thunk() but only makes python thunks.
<tt style='background-color:#E8E8E8;'> gof.Op <a href=' /gof/op.py#L908'>make_thunk</a>(node,storage_map,compute_map,no_recycling)</tt>	This function must return a thunk that is a zero-arguments function that encapsulates the computation to be performed.
<tt style='background-color:#E8E8E8;'> gof.Op <a href=' /gof/op.py#L964'>make_node</a>()</tt>	Create a "apply" nodes for the inputs in that order.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/op.py#L986'>get_test_value</a>(v)</tt>	Extract test value from v raises attributeerror if there is none.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/op.py#L1006'>missing_test_message</a>(msg)</tt>	Displays msg a message saying that some test_value is missing in the appropriate form based on config.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/op.py#L1031'>debug_error_message</a>(msg)</tt>	Displays a message saying that an error was found in some test_values.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/op.py#L1050'>debug_assert</a>(condition,msg)</tt>	Customized assert with options to ignore the assert.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/op.py#L1066'>get_debug_values</a>()</tt>	Intended use for val_1.
<tt style='background-color:#E8E8E8;'> gof.OpenMPOp <a href=' /gof/op.py#L1161'>c_compile_args</a>()</tt>	Return the compilation arg "fopenmp" if openmp is supported.
<tt style='background-color:#E8E8E8;'> gof.OpenMPOp <a href=' /gof/op.py#L1170'>c_headers</a>()</tt>	Return the header file name "omp h" if openmp is supported.
<tt style='background-color:#E8E8E8;'> gof.OpenMPOp <a href=' /gof/op.py#L1179'>test_gxx_support</a>()</tt>	Check if openmp is supported.
<tt style='background-color:#E8E8E8;'> gof.OpenMPOp <a href=' /gof/op.py#L1202'>update_self_openmp</a>()</tt>	Make sure self openmp is not true if there is no support in gxx.
<tt style='background-color:#E8E8E8;'> gof.COp <a href=' /gof/op.py#L1277'>get_path</a>(cls,f)</tt>	Convert a path relative to the location of the class file into an aboslute path.
<tt style='background-color:#E8E8E8;'> gof.COp <a href=' /gof/op.py#L1291'>__init__</a>(func_files,func_name)</tt>	Sections are loaded from files in order with sections in later files overriding sections in previous files.
<tt style='background-color:#E8E8E8;'> gof.COp <a href=' /gof/op.py#L1319'>load_c_code</a>(func_files)</tt>	Loads the c code to perform the op.
<tt style='background-color:#E8E8E8;'> gof.COp <a href=' /gof/op.py#L1387'>get_op_params</a>()</tt>	Returns a list of name value pairs that will be turned into macros for use within the op code.
<tt style='background-color:#E8E8E8;'> gof.COp <a href=' /gof/op.py#L1420'>c_init_code</a>()</tt>	Get the code section for init_code.
<tt style='background-color:#E8E8E8;'> gof.COp <a href=' /gof/op.py#L1540'>c_init_code_struct</a>(node,name,sub)</tt>	Stitches all the macros and "init_code" together.
<tt style='background-color:#E8E8E8;'> gof.COp <a href=' /gof/op.py#L1598'>c_code_cleanup</a>(node,name,inputs,outputs)</tt>	Stitches all the macros and "code_cleanup" together.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cc.py#L97'>failure_code</a>(sub,use_goto)</tt>	Code contained in sub['fail'], usually substituted for % fail s.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cc.py#L129'>failure_code_init</a>(sub)</tt>	Code for failure in the struct init.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cc.py#L150'>code_gen</a>(blocks)</tt>	From a list of l{codeblock} instances returns a string that executes them all in sequence.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cc.py#L187'>struct_gen</a>(args,struct_builders,blocks,sub)</tt>	Generates a struct conforming to the following specifications parameters.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cc.py#L342'>get_c_declare</a>(r,name,sub)</tt>	Wrapper around c_declare that declares py_name.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cc.py#L366'>get_c_init</a>(r,name,sub)</tt>	Wrapper around c_init that initializes py_name to py_none.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cc.py#L378'>get_c_extract</a>(r,name,sub)</tt>	Wrapper around c_extract that initializes py_name from storage.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cc.py#L416'>get_c_extract_out</a>(r,name,sub)</tt>	Wrapper around c_extract_out that initializes py_name from storage.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cc.py#L449'>get_c_cleanup</a>(r,name,sub)</tt>	Wrapper around c_cleanup that decrefs py_name.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cc.py#L460'>get_c_sync</a>(r,name,sub)</tt>	Wrapper around c_sync that syncs py_name with storage.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cc.py#L476'>apply_policy</a>(policy,r,name,sub)</tt>	Apply the list of policies to name r sub.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cc.py#L501'>struct_variable_codeblocks</a>(variable,policies,id,symbol_table)</tt>	Update "sub" dict and create two codeblocks with different failure modes parameters.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L565'>accept</a>(fgraph,no_recycling,profile)</tt>	Associate linker with fgraph.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L581'>fetch_variables</a>()</tt>	Fills the inputs outputs variables orphans temps and node_order fields.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L637'>code_gen</a>()</tt>	Generates code for a struct that does the computation of the fgraph and stores it in the struct_code field of the instance.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L906'>support_code</a>()</tt>	Returns a list of support code strings that are needed by one or more variables or ops.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L922'>compile_args</a>()</tt>	Returns a list of compile args that are needed by one or more variables or ops.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L980'>headers</a>()</tt>	Returns a list of headers that are needed by one or more types or ops.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L1001'>init_code</a>()</tt>	Return a list of code snippets that have to be inserted in the module initialization code.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L1039'>header_dirs</a>()</tt>	Returns a list of lib directories that are needed by one or more types or ops.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L1060'>libraries</a>()</tt>	Returns a list of libraries that are needed by one or more types or ops.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L1081'>lib_dirs</a>()</tt>	Returns a list of lib directories that are needed by one or more types or ops.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L1102'>__compile__</a>(input_storage,output_storage,storage_map,keep_lock)</tt>	Compiles this linker's fgraph.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L1167'>make_thunk</a>(input_storage,output_storage,storage_map,keep_lock)</tt>	Compiles this linker's fgraph and returns a function to perform the computations as well as lists of storage cells for both the inputs.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L1208'>cmodule_key</a>()</tt>	Return a complete hashable signature of the module we compiled.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L1314'>cmodule_key_</a>(fgraph,no_recycling,compile_args,libraries)</tt>	Do the actual computation of cmodule_key in a static method to allow it to be reused in scalar.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L1477'>compile_cmodule</a>(location)</tt>	This compiles the source code for this linker and returns a loaded module.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L1509'>get_dynamic_module</a>()</tt>	Return a cmodule dynamicmodule instance full of the code for our fgraph.
<tt style='background-color:#E8E8E8;'> gof.CLinker <a href=' /gof/cc.py#L1568'>cthunk_factory</a>(error_storage,in_storage,out_storage,storage_map)</tt>	Returns a thunk that points to an instance of a c struct that can carry on the computation of this linker's fgraph.
<tt style='background-color:#E8E8E8;'> gof._CThunk <a href=' /gof/cc.py#L1675'>find_task</a>(failure_code)</tt>	Maps a failure code to the task that is associated to it.
<tt style='background-color:#E8E8E8;'> gof.OpWiseCLinker <a href=' /gof/cc.py#L1753'>accept</a>(fgraph,no_recycling,profile)</tt>	Associate linker with fgraph.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cc.py#L1845'>_default_checker</a>(x,y)</tt>	Default checker for duallinker this checks that the.
<tt style='background-color:#E8E8E8;'> gof.DualLinker <a href=' /gof/cc.py#L1874'>__init__</a>(checker,schedule)</tt>	Initialize a duallinker.
<tt style='background-color:#E8E8E8;'> gof.DualLinker <a href=' /gof/cc.py#L1903'>accept</a>(fgraph,no_recycling,profile)</tt>	Update/tie self with fgraph.
<tt style='background-color:#E8E8E8;'> gof.DualLinker <a href=' /gof/cc.py#L1916'>make_thunk</a>()</tt>	Compiles this linker's fgraph and returns a function to perform the.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/compilelock.py#L28'>force_unlock</a>()</tt>	Delete the compilation lock if someone else has it.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/compilelock.py#L48'>_get_lock</a>(lock_dir)</tt>	Obtain lock on compilation directory.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/compilelock.py#L113'>release_lock</a>()</tt>	Release lock on compilation directory.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/compilelock.py#L126'>set_lock_status</a>(use_lock)</tt>	Enable or disable the lock on the compilation directory which is enabled by default.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/compilelock.py#L144'>lock</a>(tmp_dir,timeout,min_wait,max_wait)</tt>	Obtain lock access by creating a given temporary directory whose base will be created if needed but will not be deleted after the lock is removed.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/compilelock.py#L312'>refresh_lock</a>(lock_file)</tt>	'refresh' an existing lock by re-writing the file containing the owner's unique id using a new randomly generated id which is also returned.
<tt style='background-color:#E8E8E8;'> gof.Unlocker <a href=' /gof/compilelock.py#L349'>unlock</a>(force)</tt>	Remove current lock.
<tt style='background-color:#E8E8E8;'> gof.ParamsType <a href=' /gof/params_type.py#L289'>has_type</a>(theano_type)</tt>	Return true if current paramstype contains the specified theano type.
<tt style='background-color:#E8E8E8;'> gof.ParamsType <a href=' /gof/params_type.py#L296'>get_field</a>(theano_type)</tt>	Return the name string of the first field associated to the given theano type.
<tt style='background-color:#E8E8E8;'> gof.ParamsType <a href=' /gof/params_type.py#L310'>get_enum</a>(key)</tt>	Look for a constant named key in the theano enumeration types wrapped into current paramstype.
<tt style='background-color:#E8E8E8;'> gof.ParamsType <a href=' /gof/params_type.py#L335'>enum_from_alias</a>(alias)</tt>	Look for a constant that has alias alias in the theano enumeration types wrapped into current paramstype.
<tt style='background-color:#E8E8E8;'> gof.ParamsType <a href=' /gof/params_type.py#L371'>get_params</a>()</tt>	Convenient method to extract fields values from a list of python objects and key-value args and wrap them into a :class params object compatible with current paramstype.
<tt style='background-color:#E8E8E8;'> gof.CLinkerType <a href=' /gof/type.py#L39'>c_element_type</a>()</tt>	Optional return the name of the primitive c type of items into variables handled by this type.
<tt style='background-color:#E8E8E8;'> gof.CLinkerType <a href=' /gof/type.py#L52'>c_is_simple</a>()</tt>	Optional return true for small or builtin c types.
<tt style='background-color:#E8E8E8;'> gof.CLinkerType <a href=' /gof/type.py#L63'>c_literal</a>(data)</tt>	Optional writeme parameters.
<tt style='background-color:#E8E8E8;'> gof.CLinkerType <a href=' /gof/type.py#L81'>c_declare</a>(name,sub,check_input)</tt>	Required return c code to declare variables that will be instantiated by c_extract.
<tt style='background-color:#E8E8E8;'> gof.CLinkerType <a href=' /gof/type.py#L122'>c_init</a>(name,sub)</tt>	Required return c code to initialize the variables that were declared by self.
<tt style='background-color:#E8E8E8;'> gof.CLinkerType <a href=' /gof/type.py#L145'>c_extract</a>(name,sub,check_input)</tt>	Required return c code to extract a pyobject * instance.
<tt style='background-color:#E8E8E8;'> gof.CLinkerType <a href=' /gof/type.py#L188'>c_extract_out</a>(name,sub,check_input)</tt>	Optional c code to extract a pyobject * instance.
<tt style='background-color:#E8E8E8;'> gof.CLinkerType <a href=' /gof/type.py#L210'>c_cleanup</a>(name,sub)</tt>	Return c code to clean up after c_extract.
<tt style='background-color:#E8E8E8;'> gof.CLinkerType <a href=' /gof/type.py#L235'>c_sync</a>(name,sub)</tt>	Required return c code to pack c types back into a pyobject.
<tt style='background-color:#E8E8E8;'> gof.CLinkerType <a href=' /gof/type.py#L261'>c_code_cache_version</a>()</tt>	Return a tuple of integers indicating the version of this type.
<tt style='background-color:#E8E8E8;'> gof.PureType <a href=' /gof/type.py#L295'>filter</a>(data,strict,allow_downcast)</tt>	Required return data or an appropriately wrapped/converted data.
<tt style='background-color:#E8E8E8;'> gof.PureType <a href=' /gof/type.py#L325'>filter_variable</a>(other,allow_convert)</tt>	Convert a symbolic variable into this type if compatible.
<tt style='background-color:#E8E8E8;'> gof.PureType <a href=' /gof/type.py#L355'>convert_variable</a>(var)</tt>	Patch variable so that its type will match self if possible.
<tt style='background-color:#E8E8E8;'> gof.PureType <a href=' /gof/type.py#L375'>is_valid_value</a>(a)</tt>	Required return true for any python object a that would be a legal value for a variable of this type.
<tt style='background-color:#E8E8E8;'> gof.PureType <a href=' /gof/type.py#L387'>value_validity_msg</a>(a)</tt>	Optional return a message explaining the output of is_valid_value.
<tt style='background-color:#E8E8E8;'> gof.PureType <a href=' /gof/type.py#L395'>make_variable</a>(name)</tt>	Return a new variable instance of type self.
<tt style='background-color:#E8E8E8;'> gof.PureType <a href=' /gof/type.py#L410'>__call__</a>(name)</tt>	Return a new variable instance of type self.
<tt style='background-color:#E8E8E8;'> gof.PureType <a href=' /gof/type.py#L422'>values_eq</a>(a,b)</tt>	Return true if a and b can be considered exactly equal.
<tt style='background-color:#E8E8E8;'> gof.PureType <a href=' /gof/type.py#L431'>values_eq_approx</a>(a,b)</tt>	Return true if a and b can be considered approximately equal.
<tt style='background-color:#E8E8E8;'> gof.CDataType <a href=' /gof/type.py#L687'>_get_func</a>()</tt>	Return a function that makes a value from an integer.
<tt style='background-color:#E8E8E8;'> gof.CDataType <a href=' /gof/type.py#L704'>make_value</a>(ptr)</tt>	Make a value of this type.
<tt style='background-color:#E8E8E8;'> gof.EnumType <a href=' /gof/type.py#L944'>fromalias</a>(alias)</tt>	Get a constant value by its alias.
<tt style='background-color:#E8E8E8;'> gof.EnumType <a href=' /gof/type.py#L952'>has_alias</a>(alias)</tt>	Return true if and only if this enum has this alias.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/compiledir.py#L18'>cleanup</a>()</tt>	Delete keys in old format from the compiledir.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/compiledir.py#L105'>print_compiledir_content</a>()</tt>	Print list of %d compiled individual ops in the "theano config compiledir".
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/compiledir.py#L213'>basecompiledir_ls</a>()</tt>	Print list of files in the "theano config base_compiledir".
<tt style='background-color:#E8E8E8;'> gof.CallCache <a href=' /gof/callcache.py#L19'>persist</a>(filename)</tt>	Cache "filename" as a pickle file.
<tt style='background-color:#E8E8E8;'> gof.CallCache <a href=' /gof/callcache.py#L28'>call</a>(fn,args,key)</tt>	Retrieve item from the cache if available.
<tt style='background-color:#E8E8E8;'> gof.Node <a href=' /gof/graph.py#L37'>get_parents</a>()</tt>	Return a list of the parents of this node.
<tt style='background-color:#E8E8E8;'> gof.Apply <a href=' /gof/graph.py#L123'>run_params</a>()</tt>	Returns the params for the node or noparams if no params is set.
<tt style='background-color:#E8E8E8;'> gof.Apply <a href=' /gof/graph.py#L143'>default_output</a>()</tt>	Returns the default output for this node.
<tt style='background-color:#E8E8E8;'> gof.Apply <a href=' /gof/graph.py#L189'>clone</a>()</tt>	Duplicate this apply instance with inputs = self inputs.
<tt style='background-color:#E8E8E8;'> gof.Apply <a href=' /gof/graph.py#L208'>clone_with_new_inputs</a>(inputs,strict)</tt>	Duplicate this apply instance in a new graph.
<tt style='background-color:#E8E8E8;'> gof.Variable <a href=' /gof/graph.py#L391'>__str__</a>()</tt>	Return a str representation of the variable.
<tt style='background-color:#E8E8E8;'> gof.Variable <a href=' /gof/graph.py#L406'>__repr_test_value__</a>()</tt>	Return a repr of the test value.
<tt style='background-color:#E8E8E8;'> gof.Variable <a href=' /gof/graph.py#L415'>__repr__</a>(firstPass)</tt>	Return a repr of the variable.
<tt style='background-color:#E8E8E8;'> gof.Variable <a href=' /gof/graph.py#L430'>clone</a>()</tt>	Return a new variable like self.
<tt style='background-color:#E8E8E8;'> gof.Variable <a href=' /gof/graph.py#L473'>eval</a>(inputs_to_values)</tt>	Evaluates this variable.
<tt style='background-color:#E8E8E8;'> gof.Constant <a href=' /gof/graph.py#L572'>clone</a>()</tt>	We clone this object but we don't clone the data to lower memory requirement.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L601'>stack_search</a>(start,expand,mode,build_inv)</tt>	Search through a graph either breadth- or depth-first.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L656'>ancestors</a>(variable_list,blockers)</tt>	Return the variables that contribute to those in variable_list inclusive.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L680'>inputs</a>(variable_list,blockers)</tt>	Return the inputs required to compute the given variables.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L702'>variables_and_orphans</a>(i,o)</tt>	Extract list of variables between i and o nodes via dfs traversal and chooses the orphans among them.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L725'>ops</a>(i,o)</tt>	Set of ops contained within the subgraph between i and o parameters.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L754'>variables</a>(i,o)</tt>	Extracts list of variables within input and output nodes via dfs travesal parameters.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L776'>orphans</a>(i,o)</tt>	Extracts list of variables within input and output nodes via dfs travesal and returns the orphans among them.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L802'>clone</a>(i,o,copy_inputs)</tt>	Copies the subgraph contained between i and o.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L825'>clone_get_equiv</a>(inputs,outputs,copy_inputs_and_orphans,memo)</tt>	Return a dictionary that maps from variable and apply nodes in the original graph to a new node a clone in a new graph.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L969'>io_toposort</a>(inputs,outputs,orderings,clients)</tt>	Perform topological sort from input and output nodes parameters.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L1068'>io_connection_pattern</a>(inputs,outputs)</tt>	Returns the connection pattern of a subgraph defined by given inputs and outputs.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L1138'>is_same_graph</a>(var1,var2,givens,debug)</tt>	Return true iff variables var1 and var2 perform the same computation.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L1252'>op_as_string</a>(i,op,leaf_formatter,node_formatter)</tt>	Op to return a string representation of the subgraph.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L1263'>as_string</a>(i,o,leaf_formatter,node_formatter)</tt>	Returns a string representation of the subgraph between i and o parameters.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L1342'>view_roots</a>(r)</tt>	Utility function that returns the leaves of a search through consecutive view_map()s.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L1369'>list_of_nodes</a>(inputs,outputs)</tt>	Return the apply nodes of the graph between inputs and outputs.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/graph.py#L1381'>is_in_ancestors</a>(l_node,f_node)</tt>	Goes up in the graph and returns true if the apply node f_node is found.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/destroyhandler.py#L31'>_contains_cycle</a>(fgraph,orderings)</tt>	Function to check if the given graph contains a cycle parameters.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/destroyhandler.py#L231'>fast_inplace_check</a>(inputs)</tt>	Return the variables in inputs that are posible candidate for as inputs of inplace operation.
<tt style='background-color:#E8E8E8;'> gof.DestroyHandler <a href=' /gof/destroyhandler.py#L695'>on_attach</a>(fgraph)</tt>	When attaching to a new fgraph check that 1) this destroyhandler wasn't already attached to some fgraph.
<tt style='background-color:#E8E8E8;'> gof.DestroyHandler <a href=' /gof/destroyhandler.py#L755'>refresh_droot_impact</a>()</tt>	Makes sure self droot self impact and self root_destroyer are up to.
<tt style='background-color:#E8E8E8;'> gof.DestroyHandler <a href=' /gof/destroyhandler.py#L780'>on_import</a>(fgraph,app,reason)</tt>	Add apply instance to set which must be computed.
<tt style='background-color:#E8E8E8;'> gof.DestroyHandler <a href=' /gof/destroyhandler.py#L816'>on_prune</a>(fgraph,app,reason)</tt>	Remove apply instance from set which must be computed.
<tt style='background-color:#E8E8E8;'> gof.DestroyHandler <a href=' /gof/destroyhandler.py#L853'>on_change_input</a>(fgraph,app,i,old_r)</tt>	App inputs[i] changed from old_r to new_r.
<tt style='background-color:#E8E8E8;'> gof.DestroyHandler <a href=' /gof/destroyhandler.py#L924'>orderings</a>(fgraph)</tt>	Return orderings induced by destructive operations.
<tt style='background-color:#E8E8E8;'> gof.BadOptimization <a href=' /gof/toolbox.py#L118'>str_diagnostic</a>()</tt>	Return a pretty multiline string representating the cause of the exception.
<tt style='background-color:#E8E8E8;'> gof.Feature <a href=' /gof/toolbox.py#L228'>on_attach</a>(function_graph)</tt>	Called by functiongraph attach_feature the method that attaches.
<tt style='background-color:#E8E8E8;'> gof.Feature <a href=' /gof/toolbox.py#L245'>on_detach</a>(function_graph)</tt>	Called by remove_feature feature should remove any dynamically-added.
<tt style='background-color:#E8E8E8;'> gof.Feature <a href=' /gof/toolbox.py#L252'>on_import</a>(function_graph,node,reason)</tt>	Called whenever a node is imported into function_graph which is just before the node is actually connected to the graph.
<tt style='background-color:#E8E8E8;'> gof.Feature <a href=' /gof/toolbox.py#L262'>on_prune</a>(function_graph,node,reason)</tt>	Called whenever a node is pruned removed from the function_graph after it is disconnected from the graph.
<tt style='background-color:#E8E8E8;'> gof.Feature <a href=' /gof/toolbox.py#L269'>on_change_input</a>(function_graph,node,i,r)</tt>	Called whenever node inputs[i] is changed from r to new_r.
<tt style='background-color:#E8E8E8;'> gof.Feature <a href=' /gof/toolbox.py#L280'>orderings</a>(function_graph)</tt>	Called by toposort it should return a dictionary of.
<tt style='background-color:#E8E8E8;'> gof.Bookkeeper <a href=' /gof/toolbox.py#L295'>on_attach</a>(fgraph)</tt>	Called by functiongraph attach_feature the method that attaches.
<tt style='background-color:#E8E8E8;'> gof.Bookkeeper <a href=' /gof/toolbox.py#L305'>on_detach</a>(fgraph)</tt>	Should remove any dynamically added functionality.
<tt style='background-color:#E8E8E8;'> gof.History <a href=' /gof/toolbox.py#L369'>on_detach</a>(fgraph)</tt>	Should remove any dynamically added functionality.
<tt style='background-color:#E8E8E8;'> gof.History <a href=' /gof/toolbox.py#L384'>revert</a>(fgraph,checkpoint)</tt>	Reverts the graph to whatever it was at the provided checkpoint undoes all replacements.
<tt style='background-color:#E8E8E8;'> gof.Validator <a href=' /gof/toolbox.py#L418'>on_detach</a>(fgraph)</tt>	Should remove any dynamically added functionality.
<tt style='background-color:#E8E8E8;'> gof.Validator <a href=' /gof/toolbox.py#L426'>validate_</a>(fgraph)</tt>	If the caller is replace_all_validate just raise the exception.
<tt style='background-color:#E8E8E8;'> gof.ReplaceValidate <a href=' /gof/toolbox.py#L493'>on_detach</a>(fgraph)</tt>	Should remove any dynamically added functionality.
<tt style='background-color:#E8E8E8;'> gof.ReplaceValidate <a href=' /gof/toolbox.py#L562'>replace_all_validate_remove</a>(fgraph,replacements,remove,reason)</tt>	As replace_all_validate revert the replacement if the ops in the list remove are still in the graph.
<tt style='background-color:#E8E8E8;'> gof.NodeFinder <a href=' /gof/toolbox.py#L620'>on_detach</a>(fgraph)</tt>	Should remove any dynamically added functionality.
<tt style='background-color:#E8E8E8;'> gof.PrintListener <a href=' /gof/toolbox.py#L673'>on_detach</a>(fgraph)</tt>	Should remove any dynamically added functionality.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cmodule.py#L63'>debug_counter</a>(name,every)</tt>	Debug counter to know how often we go through some piece of code.
<tt style='background-color:#E8E8E8;'> gof.ExtFunction <a href=' /gof/cmodule.py#L118'>method_decl</a>()</tt>	Returns the signature for this function.
<tt style='background-color:#E8E8E8;'> gof.DynamicModule <a href=' /gof/cmodule.py#L239'>list_code</a>(ofile)</tt>	Print out the code with line numbers to ofile.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cmodule.py#L251'>dlimport</a>(fullpath,suffix)</tt>	Dynamically load a so pyd dll or py file.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cmodule.py#L314'>dlimport_workdir</a>(basedir)</tt>	Return a directory where you should put your so file for dlimport.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cmodule.py#L324'>last_access_time</a>(path)</tt>	Return the number of seconds since the epoch of the last access of a given file.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cmodule.py#L333'>module_name_from_dir</a>(dirname,err,files)</tt>	Scan the contents of a cache directory and return full path of the dynamic lib in it.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cmodule.py#L356'>is_same_entry</a>(entry_1,entry_2)</tt>	Return true iff both paths can be considered to point to the same module.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cmodule.py#L378'>get_module_hash</a>(src_code,key)</tt>	Return an md5 hash that uniquely identifies a module.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cmodule.py#L432'>get_safe_part</a>(key)</tt>	Return a tuple containing a subset of key, to be used to find equal keys.
<tt style='background-color:#E8E8E8;'> gof.KeyData <a href=' /gof/cmodule.py#L482'>add_key</a>(key,save_pkl)</tt>	Add a key to self keys and update pickled file if asked to.
<tt style='background-color:#E8E8E8;'> gof.KeyData <a href=' /gof/cmodule.py#L492'>remove_key</a>(key,save_pkl)</tt>	Remove a key from self keys and update pickled file if asked to.
<tt style='background-color:#E8E8E8;'> gof.KeyData <a href=' /gof/cmodule.py#L501'>save_pkl</a>()</tt>	Dump this object into its key_pkl file.
<tt style='background-color:#E8E8E8;'> gof.KeyData <a href=' /gof/cmodule.py#L519'>get_entry</a>()</tt>	Return path to the module file.
<tt style='background-color:#E8E8E8;'> gof.KeyData <a href=' /gof/cmodule.py#L531'>delete_keys_from</a>(entry_from_key,do_manual_check)</tt>	Delete from entry_from_key all keys associated to this keydata object.
<tt style='background-color:#E8E8E8;'> gof.ModuleCache <a href=' /gof/cmodule.py#L684'>_get_module</a>(name)</tt>	Fetch a compiled module from the loaded cache or the disk.
<tt style='background-color:#E8E8E8;'> gof.ModuleCache <a href=' /gof/cmodule.py#L698'>refresh</a>(age_thresh_use,delete_if_problem,cleanup)</tt>	Update cache data by walking the cache directory structure.
<tt style='background-color:#E8E8E8;'> gof.ModuleCache <a href=' /gof/cmodule.py#L991'>_get_from_key</a>(key,key_data)</tt>	Returns a module if the passed-in key is found in the cache and none otherwise.
<tt style='background-color:#E8E8E8;'> gof.ModuleCache <a href=' /gof/cmodule.py#L1053'>_add_to_cache</a>(module,key,module_hash)</tt>	This function expects the compile lock to be held.
<tt style='background-color:#E8E8E8;'> gof.ModuleCache <a href=' /gof/cmodule.py#L1096'>module_from_key</a>(key,lnk,keep_lock)</tt>	Return a module from the cache compiling it if necessary.
<tt style='background-color:#E8E8E8;'> gof.ModuleCache <a href=' /gof/cmodule.py#L1184'>check_key</a>(key,key_pkl)</tt>	Perform checks to detect broken __eq__ / __hash__ implementations.
<tt style='background-color:#E8E8E8;'> gof.ModuleCache <a href=' /gof/cmodule.py#L1253'>clear_old</a>(age_thresh_del,delete_if_problem)</tt>	Delete entries from the filesystem for cache entries that are too old.
<tt style='background-color:#E8E8E8;'> gof.ModuleCache <a href=' /gof/cmodule.py#L1311'>clear</a>(unversioned_min_age,clear_base_files,delete_if_problem)</tt>	Clear all elements in the cache.
<tt style='background-color:#E8E8E8;'> gof.ModuleCache <a href=' /gof/cmodule.py#L1338'>clear_base_files</a>()</tt>	Remove base directories 'cutils_ext', 'lazylinker_ext' and 'scan_perform' if present.
<tt style='background-color:#E8E8E8;'> gof.ModuleCache <a href=' /gof/cmodule.py#L1367'>clear_unversioned</a>(min_age)</tt>	Delete unversioned dynamic modules.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cmodule.py#L1494'>_rmtree</a>(parent,ignore_nocleanup,msg,level)</tt>	On nfs filesystems it is impossible to delete a directory with open files in it.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cmodule.py#L1539'>get_module_cache</a>(dirname,init_args)</tt>	Create a new module_cache with the k v pairs in this dictionary parameters.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cmodule.py#L1566'>get_lib_extension</a>()</tt>	Return the platform-dependent extension for compiled modules.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cmodule.py#L1577'>get_gcc_shared_library_arg</a>()</tt>	Return the platform-dependent gcc argument for shared libraries.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cmodule.py#L1702'>gcc_llvm</a>()</tt>	Detect if the g++ version used is the llvm one or not.
<tt style='background-color:#E8E8E8;'> gof.Compiler <a href=' /gof/cmodule.py#L1733'>_try_compile_tmp</a>(cls,src_code,tmp_prefix,flags)</tt>	Try to compile and run a test program.
<tt style='background-color:#E8E8E8;'> gof.Compiler <a href=' /gof/cmodule.py#L1810'>_try_flags</a>(cls,flag_list,preambule,body)</tt>	Try to compile a dummy file with these flags.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cmodule.py#L1841'>try_march_flag</a>(flags)</tt>	Try to compile and run a simple c snippet using current flags.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/vm.py#L27'>calculate_reallocate_info</a>(order,fgraph,storage_map,compute_map_re)</tt>	Writeme : explain the parameters.
<tt style='background-color:#E8E8E8;'> gof.VM <a href=' /gof/vm.py#L172'>__call__</a>()</tt>	Run the machine.
<tt style='background-color:#E8E8E8;'> gof.VM <a href=' /gof/vm.py#L182'>clear_storage</a>()</tt>	Free any internal references to temporary variables.
<tt style='background-color:#E8E8E8;'> gof.VM <a href=' /gof/vm.py#L193'>update_profile</a>(profile)</tt>	Accumulate into the profile object.
<tt style='background-color:#E8E8E8;'> gof.Stack <a href=' /gof/vm.py#L382'>run_thunk_of_node</a>(node)</tt>	Run the thunk corresponding to apply instance node.
<tt style='background-color:#E8E8E8;'> gof.VM_Linker <a href=' /gof/vm.py#L747'>accept</a>(fgraph,no_recycling,profile)</tt>	Check if fgraph is the first functiongraph that has ever been associated to self else create a new vm_linker.
<tt style='background-color:#E8E8E8;'> gof.VM_Linker <a href=' /gof/vm.py#L797'>compute_gc_dependencies</a>(variables)</tt>	Returns dict variable k -> list of variables [v1 v2 v3 ].
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/link.py#L25'>log_thunk_trace</a>(value,f)</tt>	Log theano's diagnostic stack trace for an exception raised by raise_with_op.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/link.py#L53'>thunk_hook</a>(type,value,trace)</tt>	This function is meant to replace excepthook and do some special work if the exception value has a __thunk_trace__.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/link.py#L84'>raise_with_op</a>(node,thunk,exc_info,storage_map)</tt>	Re-raise an exception while annotating the exception object with debug info.
<tt style='background-color:#E8E8E8;'> gof.Linker <a href=' /gof/link.py#L340'>make_thunk</a>()</tt>	This function must return a triplet (function input_variables output_variables) where function is a thunk that operates on the.
<tt style='background-color:#E8E8E8;'> gof.Linker <a href=' /gof/link.py#L366'>make_function</a>(unpack_single)</tt>	Returns a function that takes values corresponding to the inputs of the fgraph used by this l{linker} and returns values corresponding the the.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/link.py#L517'>map_storage</a>(fgraph,order,input_storage,output_storage)</tt>	Ensure there is storage a length-1 list for inputs outputs and interior nodes.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/link.py#L714'>gc_helper</a>(node_list)</tt>	Return the set of variable instances which are computed by node_list.
<tt style='background-color:#E8E8E8;'> gof.PerformLinker <a href=' /gof/link.py#L791'>make_all</a>(input_storage,output_storage,storage_map)</tt>	Returns function to run all nodes list of input containers list of outputs parameters.
<tt style='background-color:#E8E8E8;'> gof.WrapLinker <a href=' /gof/link.py#L919'>__copy__</a>()</tt>	Shallow copy of a wraplinker.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/link.py#L1022'>WrapLinkerMany</a>(linkers,wrappers)</tt>	Variant on wraplinker that runs a series of wrapper functions instead of just one.
<tt style='background-color:#E8E8E8;'> gof.Optimizer <a href=' /gof/opt.py#L64'>apply</a>(fgraph)</tt>	Applies the optimization to the provided l{functiongraph} it may.
<tt style='background-color:#E8E8E8;'> gof.Optimizer <a href=' /gof/opt.py#L75'>optimize</a>(fgraph)</tt>	This is meant as a shortcut to opt.
<tt style='background-color:#E8E8E8;'> gof.Optimizer <a href=' /gof/opt.py#L92'>__call__</a>(fgraph)</tt>	Same as self optimize fgraph.
<tt style='background-color:#E8E8E8;'> gof.Optimizer <a href=' /gof/opt.py#L100'>add_requirements</a>(fgraph)</tt>	Add features to the fgraph that are required to apply the optimization.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/opt.py#L151'>optimizer</a>(f)</tt>	Decorator for fromfunctionoptimizer.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/opt.py#L161'>inplace_optimizer</a>(f)</tt>	Decorator for fromfunctionoptimizer.
<tt style='background-color:#E8E8E8;'> gof.SeqOptimizer <a href=' /gof/opt.py#L182'>warn</a>(exc,optimizer)</tt>	Default failure_callback for seqoptimizer.
<tt style='background-color:#E8E8E8;'> gof.SeqOptimizer <a href=' /gof/opt.py#L213'>apply</a>(fgraph)</tt>	Applies each l{optimizer} in self in turn.
<tt style='background-color:#E8E8E8;'> gof.SeqOptimizer <a href=' /gof/opt.py#L350'>merge_profile</a>(prof1,prof2)</tt>	Merge 2 profiles returned by this cass apply() fct.
<tt style='background-color:#E8E8E8;'> gof.MergeFeature <a href=' /gof/opt.py#L583'>process_constant</a>(fgraph,c)</tt>	Check if a constant can be merged and queue that replacement.
<tt style='background-color:#E8E8E8;'> gof.MergeFeature <a href=' /gof/opt.py#L604'>process_node</a>(fgraph,node)</tt>	Check if a node can be merged and queue that replacement.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/opt.py#L970'>is_same_graph_with_merge</a>(var1,var2,givens)</tt>	Merge-based implementation of theano gof graph is_same_graph.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/opt.py#L1009'>pre_constant_merge</a>(vars)</tt>	Merge constants in the subgraph used to compute nodes in vars.
<tt style='background-color:#E8E8E8;'> gof.LocalOptimizer <a href=' /gof/opt.py#L1081'>tracks</a>()</tt>	Return the list of op classes that this opt applies to.
<tt style='background-color:#E8E8E8;'> gof.LocalOptimizer <a href=' /gof/opt.py#L1090'>transform</a>(node)</tt>	Transform a subgraph whose output is node.
<tt style='background-color:#E8E8E8;'> gof.LocalOptimizer <a href=' /gof/opt.py#L1113'>add_requirements</a>(fgraph)</tt>	If this local optimization wants to add some requirements to the fgraph this is the place to do it.
<tt style='background-color:#E8E8E8;'> gof.LocalMetaOptimizer <a href=' /gof/opt.py#L1208'>provide_inputs</a>(node,inputs)</tt>	If implemented returns a dictionary mapping all symbolic variables in inputs to sharedvariable instances of suitable dummy values.
<tt style='background-color:#E8E8E8;'> gof.PatternSub <a href=' /gof/opt.py#L1663'>transform</a>(node,get_nodes)</tt>	Checks if the graph from node corresponds to in_pattern if it does.
<tt style='background-color:#E8E8E8;'> gof.NavigatorOptimizer <a href=' /gof/opt.py#L1865'>warn</a>(exc,nav,repl_pairs,local_opt)</tt>	Failure_callback for navigatoroptimizer print traceback.
<tt style='background-color:#E8E8E8;'> gof.NavigatorOptimizer <a href=' /gof/opt.py#L1883'>warn_inplace</a>(exc,nav,repl_pairs,local_opt)</tt>	Failure_callback for navigatoroptimizer.
<tt style='background-color:#E8E8E8;'> gof.NavigatorOptimizer <a href=' /gof/opt.py#L1897'>warn_ignore</a>(exc,nav,repl_pairs,local_opt)</tt>	Failure_callback for navigatoroptimizer ignore all errors.
<tt style='background-color:#E8E8E8;'> gof.NavigatorOptimizer <a href=' /gof/opt.py#L1914'>attach_updater</a>(fgraph,importer,pruner,chin)</tt>	Install some functiongraph listeners to help the navigator deal with the ignore_trees-related functionality.
<tt style='background-color:#E8E8E8;'> gof.NavigatorOptimizer <a href=' /gof/opt.py#L1949'>detach_updater</a>(fgraph,u)</tt>	Undo the work of attach_updater.
<tt style='background-color:#E8E8E8;'> gof.NavigatorOptimizer <a href=' /gof/opt.py#L1966'>process_node</a>(fgraph,node,lopt)</tt>	This function will use lopt to transform the node the.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/opt.py#L2148'>out2in</a>()</tt>	Uses the topooptimizer from the output nodes to input nodes of the graph.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/opt.py#L2169'>in2out</a>()</tt>	Uses the topooptimizer from the input nodes to output nodes of the graph.
<tt style='background-color:#E8E8E8;'> gof.OpKeyOptimizer <a href=' /gof/opt.py#L2228'>add_requirements</a>(fgraph)</tt>	Requires the following features.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/opt.py#L2261'>merge_dict</a>(d1,d2)</tt>	Merge 2 dicts by adding the values.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/opt.py#L2822'>pre_greedy_local_optimizer</a>(list_optimizations,out)</tt>	This function traverses the computation graph described by all node in the graph before the variable out but that are not in the.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/opt.py#L2890'>copy_stack_trace</a>(from_var,to_var)</tt>	Copies the stack trace from one or more tensor variables to one or more tensor variables.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/opt.py#L2939'>check_stack_trace</a>(f_or_fgraph,ops_to_check,bug_print)</tt>	This function checks if the outputs of specific ops of a compiled graph have a stack.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/utils.py#L14'>simple_extract_stack</a>(f,limit,skips)</tt>	This is traceback extract_stack from python 2 7 with this change.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/utils.py#L72'>add_tag_trace</a>(thing,user_line)</tt>	Add tag trace to an node or variable.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/utils.py#L246'>memoize</a>(f)</tt>	Cache the return value for each tuple of arguments which must be hashable.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/utils.py#L266'>deprecated</a>(filename,msg)</tt>	Decorator which will print a warning message on the first call.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/utils.py#L295'>uniq</a>(seq)</tt>	Do not use set this must always return the same value at the same index.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/utils.py#L307'>difference</a>(seq1,seq2)</tt>	Returns all elements in seq1 which are not in seq2 i e seq1\seq2.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/utils.py#L339'>toposort</a>(prereqs_d)</tt>	Sorts prereqs_d keys() topologically.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/utils.py#L481'>flatten</a>(a)</tt>	Recursively flatten tuple list and set in a list.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/utils.py#L506'>give_variables_names</a>(variables)</tt>	Gives unique names to an iterable of variables modifies input.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/utils.py#L530'>remove</a>(predicate,coll)</tt>	Return those items of collection for which predicate item is true.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/utils.py#L568'>hash_from_file</a>(file_path)</tt>	Return the md5 hash of a file.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L116'>__init__</a>(inputs,outputs,features,clone)</tt>	Create an functiongraph which operates on the subgraph bound by the inputs and outputs sets.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L224'>disown</a>()</tt>	Cleans up all of this functiongraph's nodes and variables so they are not associated with this functiongraph anymore.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L248'>clients</a>(r)</tt>	Set of all the node i pairs such that node inputs[i] is r.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L257'>__add_client__</a>(r,new_client)</tt>	Updates the list of clients of r with new_clients.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L276'>__remove_client__</a>(r,client_to_remove,reason)</tt>	Removes all from the clients list of r.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L334'>__import_r__</a>(variable,reason)</tt>	Import variables to this functiongraph and also their apply_node if those nodes are not in this graph.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L361'>__import__</a>(apply_node,check,reason)</tt>	Given an apply_node recursively search from this node to know graph and then add all unknown variables and apply_nodes to this graph.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L412'>change_input</a>(node,i,new_r,reason)</tt>	Changes node inputs[i] to new_r.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L455'>replace</a>(r,new_r,reason,verbose)</tt>	This is the main interface to manipulate the subgraph in functiongraph.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L521'>replace_all</a>(pairs,reason)</tt>	For every node that uses r as input makes it use new_r instead.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L529'>attach_feature</a>(feature)</tt>	Adds a gof toolbox feature to this function_graph and triggers its.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L559'>remove_feature</a>(feature)</tt>	Removes the feature from the graph.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L577'>execute_callbacks</a>(name)</tt>	Execute callbacks calls getattr feature name (*args) for each feature which has.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L598'>collect_callbacks</a>(name)</tt>	Collects callbacks returns a dictionary d such that.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L615'>toposort</a>()</tt>	Toposort return an ordering of the graph's apply nodes such that.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L643'>orderings</a>()</tt>	Return dict d s t d[node] is a list of nodes that must be evaluated.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L679'>check_integrity</a>()</tt>	Call this for a diagnosis if things go awry.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L738'>clone</a>(check_integrity)</tt>	Clone the graph and get a memo a dict that map old node to new node.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L745'>clone_get_equiv</a>(check_integrity,attach_feature)</tt>	Clone the graph and get a dict that maps old nodes to new ones parameters.
<tt style='background-color:#E8E8E8;'> gof.FunctionGraph <a href=' /gof/fg.py#L776'>__getstate__</a>()</tt>	This is needed as some features introduce instance methods.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/sched.py#L29'>memodict</a>(f)</tt>	Memoization decorator for a function taking a single argument.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/sched.py#L57'>make_dependence_cmp</a>()</tt>	Create a comparator to represent the dependence of nodes in a graph.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/sched.py#L84'>reverse_dict</a>(d)</tt>	Reverses direction of dependence dict.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/sched.py#L109'>_toposort</a>(edges)</tt>	Topological sort algorithm by kahn [1] - o nodes + vertices.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/sched.py#L156'>posort</a>(l)</tt>	Partially ordered sort with multiple comparators.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/sched.py#L223'>sort_apply_nodes</a>(inputs,outputs,cmps)</tt>	Order a graph of apply nodes according to a list of comparators.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/sched.py#L249'>sort_schedule_fn</a>()</tt>	Make a schedule function from comparators.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/sched.py#L270'>key_to_cmp</a>(key)</tt>	Comparator function based on "key" function.
<tt style='background-color:#E8E8E8;'> gof. <a href=' /gof/cutils.py#L200'>compile_cutils</a>()</tt>	Do just the compilation of cutils_ext.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/ops.py#L23'>register_view_op_c_code</a>(type,code,version)</tt>	Tell viewop how to generate c code for a theano type.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/ops.py#L128'>register_deep_copy_op_c_code</a>(typ,code,version)</tt>	Tell deepcopyop how to generate c code for a theano type.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/ops.py#L207'>register_shape_c_code</a>(type,code,version)</tt>	Tell shape op how to generate c code for a theano type.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/ops.py#L420'>shape_i</a>(var,i,fgraph)</tt>	Equivalent of var shape[i], but apply if possible the shape feature.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/ops.py#L474'>register_shape_i_c_code</a>(typ,code,check_input,version)</tt>	Tell shape_i how to generate c code for a theano type.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/ops.py#L567'>as_op</a>(itypes,otypes,infer_shape)</tt>	Decorator that converts a function into a basic theano op that will call the supplied function as its implementation.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/ops.py#L614'>register_rebroadcast_c_code</a>(typ,code,version)</tt>	Tell rebroadcast how to generate c code for a theano type.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/ops.py#L774'>register_specify_shape_c_code</a>(typ,code,version,c_support_code_apply)</tt>	Tell specifyshape how to generate c code for a theano type.
<tt style='background-color:#E8E8E8;'> compile.SharedVariable <a href=' /compile/sharedvalue.py#L87'>get_value</a>(borrow,return_internal_type)</tt>	Get the non-symbolic value associated with this sharedvariable.
<tt style='background-color:#E8E8E8;'> compile.SharedVariable <a href=' /compile/sharedvalue.py#L110'>set_value</a>(new_value,borrow)</tt>	Set the non-symbolic value associated with this sharedvariable.
<tt style='background-color:#E8E8E8;'> compile.SharedVariable <a href=' /compile/sharedvalue.py#L150'>zero</a>(borrow)</tt>	Set the values of a shared variable to 0.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/sharedvalue.py#L223'>shared</a>(value,name,strict,allow_downcast)</tt>	Return a sharedvariable variable initialized with a copy or reference of value.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/profiling.py#L48'>_atexit_print_fn</a>()</tt>	Print profilestat objects in _atexit_print_list to _atexit_print_file.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/profiling.py#L120'>print_global_stats</a>()</tt>	Print the following stats.
<tt style='background-color:#E8E8E8;'> compile.ProfileStats <a href=' /compile/profiling.py#L175'>reset</a>()</tt>	Ignore previous function call.
<tt style='background-color:#E8E8E8;'> compile.ProfileStats <a href=' /compile/profiling.py#L315'>class_time</a>()</tt>	Dict op -> total time on thunks.
<tt style='background-color:#E8E8E8;'> compile.ProfileStats <a href=' /compile/profiling.py#L328'>class_callcount</a>()</tt>	Dict op -> total number of thunk calls.
<tt style='background-color:#E8E8E8;'> compile.ProfileStats <a href=' /compile/profiling.py#L341'>class_nodes</a>()</tt>	Dict op -> total number of nodes.
<tt style='background-color:#E8E8E8;'> compile.ProfileStats <a href=' /compile/profiling.py#L354'>class_impl</a>()</tt>	Dict op -> total number of nodes.
<tt style='background-color:#E8E8E8;'> compile.ProfileStats <a href=' /compile/profiling.py#L372'>op_time</a>()</tt>	Dict op -> total time on thunks.
<tt style='background-color:#E8E8E8;'> compile.ProfileStats <a href=' /compile/profiling.py#L384'>fill_node_total_time</a>(node,total_times)</tt>	Node -> fill total time icluding its parents returns nothing.
<tt style='background-color:#E8E8E8;'> compile.ProfileStats <a href=' /compile/profiling.py#L398'>compute_total_times</a>()</tt>	Dict op -> total time icluding the time for parents.
<tt style='background-color:#E8E8E8;'> compile.ProfileStats <a href=' /compile/profiling.py#L409'>op_callcount</a>()</tt>	Dict op -> total number of thunk calls.
<tt style='background-color:#E8E8E8;'> compile.ProfileStats <a href=' /compile/profiling.py#L421'>op_nodes</a>()</tt>	Dict op -> total number of nodes.
<tt style='background-color:#E8E8E8;'> compile.ProfileStats <a href=' /compile/profiling.py#L433'>op_impl</a>()</tt>	Dict op -> 'c' or 'py' depending how the op is implemented.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/function_module.py#L44'>alias_root</a>(v)</tt>	Return the variable to which v is aliased by view_maps and destroy_maps.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/function_module.py#L66'>view_tree_set</a>(v,treeset)</tt>	Add to treeset all variables that are views of v given that v is not a view.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/function_module.py#L84'>infer_reuse_pattern</a>(fgraph,outputs_to_disown)</tt>	Given an fgraph and a list of variables returns the list or set of all variables which may share the same underlying data storage.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/function_module.py#L104'>fgraph_updated_vars</a>(fgraph,expanded_inputs)</tt>	Reconstruct the full "updates" dictionary mapping from functiongraph input variables to the fgraph outputs that will replace their values.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/function_module.py#L144'>std_fgraph</a>(input_specs,output_specs,accept_inplace)</tt>	Makes an functiongraph corresponding to the input specs and the output specs.
<tt style='background-color:#E8E8E8;'> compile.Function <a href=' /compile/function_module.py#L514'>__copy__</a>()</tt>	Copy a function copied function have separate intermediate.
<tt style='background-color:#E8E8E8;'> compile.Function <a href=' /compile/function_module.py#L521'>copy</a>(share_memory,swap,delete_updates,name)</tt>	Copy this function copied function will have separated maker and.
<tt style='background-color:#E8E8E8;'> compile.Function <a href=' /compile/function_module.py#L725'>__call__</a>()</tt>	Evaluates value of a function on given arguments.
<tt style='background-color:#E8E8E8;'> compile.Function <a href=' /compile/function_module.py#L990'>free</a>()</tt>	When allow_gc = false clear the variables in storage_map.
<tt style='background-color:#E8E8E8;'> compile.Function <a href=' /compile/function_module.py#L1004'>get_shared</a>()</tt>	Return the shared variable read or updated by by this function.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/function_module.py#L1063'>insert_deepcopy</a>(fgraph,wrapped_inputs,wrapped_outputs)</tt>	Insert deepcopy in the fgraph to break aliasing of outputs.
<tt style='background-color:#E8E8E8;'> compile.FunctionMaker <a href=' /compile/function_module.py#L1593'>create</a>(input_storage,trustme,storage_map)</tt>	Create a function.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/function_module.py#L1735'>orig_function</a>(inputs,outputs,mode,accept_inplace)</tt>	Return a function that will calculate the outputs from the inputs.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/function_module.py#L1823'>convert_function_input</a>(input)</tt>	Upgrade a input shortcut to an in instance.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/function_module.py#L1903'>get_info_on_inputs</a>(named_inputs,n_unnamed_inputs)</tt>	Return a human-readable description of named and un-named inputs.
<tt style='background-color:#E8E8E8;'> compile.MonitorMode <a href=' /compile/monitormode.py#L66'>eval</a>(i,node,fn)</tt>	The method that calls the thunk fn.
<tt style='background-color:#E8E8E8;'> compile.MonitorMode <a href=' /compile/monitormode.py#L77'>clone</a>(link_kwargs,optimizer)</tt>	Create a new instance of this mode.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/pfunc.py#L23'>rebuild_collect_shared</a>(outputs,inputs,replace,updates)</tt>	Function that allows replacing subgraphs of a computational graph.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/pfunc.py#L283'>pfunc</a>(params,outputs,mode,updates)</tt>	Function-constructor for graphs with shared variables.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/pfunc.py#L499'>iter_over_pairs</a>(pairs)</tt>	Return an iterator over pairs present in the 'pairs' input.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/nanguardmode.py#L25'>_is_numeric_value</a>(arr,var)</tt>	Checks a variable against non-numeric types such as types slices empty arrays and none that need not be checked for nan and inf values.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/nanguardmode.py#L56'>flatten</a>(l)</tt>	Turns a nested graph of lists/tuples/other objects into a list of objects.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/nanguardmode.py#L83'>contains_nan</a>(arr,node,var)</tt>	Test whether a numpy ndarray contains any np nan values.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/nanguardmode.py#L115'>contains_inf</a>(arr,node,var)</tt>	Test whether a numpy ndarray contains any np inf values.
<tt style='background-color:#E8E8E8;'> compile.BadThunkOutput <a href=' /compile/debugmode.py#L107'>offending_op</a>()</tt>	Return the op class whose c_code and perform implementations didn't match.
<tt style='background-color:#E8E8E8;'> compile.BadThunkOutput <a href=' /compile/debugmode.py#L118'>str_diagnostic</a>()</tt>	Return a pretty multiline string representing the cause of the exception.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/debugmode.py#L346'>char_from_number</a>(number)</tt>	Converts number to string by rendering it in base 26 using capital letters as digits.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/debugmode.py#L369'>debugprint</a>(r,prefix,depth,done)</tt>	Print the graph leading to r to given depth.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/debugmode.py#L596'>_optcheck_fgraph</a>(input_specs,output_specs,accept_inplace)</tt>	Create a functiongraph for debugging.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/debugmode.py#L673'>_check_inputs</a>(node,storage_map,r_vals,dr_vals)</tt>	Raise baddestroymap if necessary update dr_vals.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/debugmode.py#L760'>_check_viewmap</a>(node,storage_map)</tt>	This functions raises a badviewmap exception when it detects the following.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/debugmode.py#L901'>_find_bad_optimizations0</a>(order,reasons,r_vals)</tt>	Use a simple algorithm to find broken optimizations.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/debugmode.py#L991'>_find_bad_optimizations2</a>(order,reasons,r_vals)</tt>	Use a simple algorithm to find broken optimizations.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/debugmode.py#L1050'>_get_preallocated_maps</a>(node,thunk,prealloc_modes,def_val)</tt>	Preallocate outputs in different memory layouts.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/debugmode.py#L1272'>_check_preallocated_output</a>(node,thunk,prealloc_modes,def_val)</tt>	Try to apply thunk() on different output storages.
<tt style='background-color:#E8E8E8;'> compile._Maker <a href=' /compile/debugmode.py#L2344'>create</a>(defaults,trustme,storage_map)</tt>	Create a function.
<tt style='background-color:#E8E8E8;'> compile.DebugMode <a href=' /compile/debugmode.py#L2530'>function_maker</a>(i,o,m)</tt>	Return an instance of _maker which handles much of the debugging work.
<tt style='background-color:#E8E8E8;'> compile.DebugMode <a href=' /compile/debugmode.py#L2538'>__init__</a>(optimizer,stability_patience,check_c_code,check_py_code)</tt>	If any of these arguments except optimizer is not none it overrides the class default.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/mode.py#L33'>register_linker</a>(name,linker)</tt>	Add a linker which can be referred to by name in mode.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/mode.py#L78'>register_optimizer</a>(name,opt)</tt>	Add a optimizer which can be referred to by name in mode.
<tt style='background-color:#E8E8E8;'> compile.Mode <a href=' /compile/mode.py#L301'>register</a>()</tt>	Adds new optimization instances to a mode.
<tt style='background-color:#E8E8E8;'> compile.Mode <a href=' /compile/mode.py#L336'>clone</a>(link_kwargs,optimizer)</tt>	Create a new instance of this mode.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/mode.py#L431'>register_mode</a>(name,mode)</tt>	Add a mode which can be referred to by name in function.
<tt style='background-color:#E8E8E8;'> compile.OpFromGraph <a href=' /compile/builders.py#L274'>_recompute_grad_op</a>()</tt>	Converts self _grad_op from user supplied form to type self instance.
<tt style='background-color:#E8E8E8;'> compile.OpFromGraph <a href=' /compile/builders.py#L377'>_recompute_rop_op</a>()</tt>	Converts self _rop_op from user supplied form to type self instance.
<tt style='background-color:#E8E8E8;'> compile.OpFromGraph <a href=' /compile/builders.py#L483'>get_grad_op</a>()</tt>	Getter method for self _grad_op.
<tt style='background-color:#E8E8E8;'> compile.OpFromGraph <a href=' /compile/builders.py#L491'>get_rop_op</a>()</tt>	Getter method for self _rop_op.
<tt style='background-color:#E8E8E8;'> compile.OpFromGraph <a href=' /compile/builders.py#L499'>set_grad_overrides</a>(grad_overrides)</tt>	Set gradient overrides see help theano opfromgraph for syntax.
<tt style='background-color:#E8E8E8;'> compile.OpFromGraph <a href=' /compile/builders.py#L508'>set_rop_overrides</a>(rop_overrides)</tt>	Set r_op overrides see help theano opfromgraph for syntax.
<tt style='background-color:#E8E8E8;'> compile.OpFromGraph <a href=' /compile/builders.py#L550'>connection_pattern</a>(node)</tt>	Return connection pattern of subfgraph defined by inputs and outputs.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/builders.py#L621'>inline_ofg_expansion</a>(node)</tt>	This optimization expands internal graph of opfromgraph.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/function.py#L24'>function_dump</a>(filename,inputs,outputs,mode)</tt>	This is helpful to make a reproducible case for problems during theano compilation.
<tt style='background-color:#E8E8E8;'> compile. <a href=' /compile/function.py#L76'>function</a>(inputs,outputs,mode,updates)</tt>	Return a :class callable object <theano compile function_module function>.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L68'>check_equal_numpy</a>(x,y)</tt>	Return true iff x and y are equal.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L93'>constructor</a>(f)</tt>	Add f to :doc oplist.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L110'>as_tensor_variable</a>(x,name,ndim)</tt>	Return x, transformed into a tensortype.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L207'>constant</a>(x,name,ndim,dtype)</tt>	Return a symbolic constant with value x.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L360'>numpy_scalar</a>(data)</tt>	Return a scalar stored in a numpy ndarray.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L393'>get_scalar_constant_value</a>(orig_v,elemwise,only_process_constants,max_recur)</tt>	Return the constant scalar 0-d value underlying variable v.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L667'>scalar</a>(name,dtype)</tt>	Return a symbolic scalar variable.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L703'>vector</a>(name,dtype)</tt>	Return a symbolic vector variable.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L736'>matrix</a>(name,dtype)</tt>	Return a symbolic matrix variable.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L769'>row</a>(name,dtype)</tt>	Return a symbolic row variable (ndim=2 broadcastable=[true false]).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L796'>col</a>(name,dtype)</tt>	Return a symbolic column variable (ndim=2 broadcastable=[false true]).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L823'>tensor3</a>(name,dtype)</tt>	Return a symbolic 3-d variable.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L852'>tensor4</a>(name,dtype)</tt>	Return a symbolic 4-d variable.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L880'>tensor5</a>(name,dtype)</tt>	Return a symbolic 5-d variable.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L913'>_scal_elemwise_with_nfunc</a>(nfunc,nin,nout)</tt>	Replace a symbol definition with an elementwise version of the corresponding scalar op.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L961'>_pack</a>(x)</tt>	Convert x to a list if it is an iterable otherwise wrap it in a list.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1144'>cast</a>(x,dtype)</tt>	Symbolically cast x to a tensor of type dtype.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1537'>makeKeepDims</a>(x,y,axis)</tt>	Reintroduces in y with length one the axes of x which have been left out in a prior reduction of x.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1574'>max_and_argmax</a>(a,axis,keepdims)</tt>	Returns maximum elements and their indices obtained by iterating over given axis.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1632'>max</a>(x,axis,keepdims)</tt>	Returns maximum elements obtained by iterating over given axis.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1675'>argmax</a>(x,axis,keepdims)</tt>	Returns indices of maximum elements obtained by iterating over given axis.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1698'>min</a>(x,axis,keepdims)</tt>	Returns minimum elements obtained by iterating over given axis.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1723'>argmin</a>(x,axis,keepdims)</tt>	Returns indices of minimum elements obtained by iterating over given axis.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1748'>smallest</a>()</tt>	Return the [elementwise] smallest of a variable number of arguments.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1763'>largest</a>()</tt>	Return the [elementwise] largest of a variable number of arguments.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1782'>lt</a>(a,b)</tt>	A < b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1787'>gt</a>(a,b)</tt>	A > b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1792'>le</a>(a,b)</tt>	A <= b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1797'>ge</a>(a,b)</tt>	A >= b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1802'>eq</a>(a,b)</tt>	A == b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1807'>neq</a>(a,b)</tt>	A != b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1849'>allclose</a>(a,b,rtol,atol)</tt>	Implement numpy's allclose on tensors.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1883'>isclose</a>(a,b,rtol,atol)</tt>	Implements numpy's isclose on tensors.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L1993'>switch</a>(cond,ift,iff)</tt>	If cond then ift else iff.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2003'>and_</a>(a,b)</tt>	Bitwise a & b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2009'>or_</a>(a,b)</tt>	Bitwise a | b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2015'>xor</a>(a,b)</tt>	Bitwise a ^ b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2031'>abs_</a>(a)</tt>	|a| tensorvariable overloads the tensorvariable.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2053'>expm1</a>(a)</tt>	E^a - 1.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2070'>log</a>(a)</tt>	Base e logarithm of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2075'>log2</a>(a)</tt>	Base 2 logarithm of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2080'>log10</a>(a)</tt>	Base 10 logarithm of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2090'>sgn</a>(a)</tt>	Sign of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2095'>ceil</a>(a)</tt>	Ceiling of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2100'>floor</a>(a)</tt>	Floor of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2105'>trunc</a>(a)</tt>	Trunc of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2110'>iround</a>(a,mode)</tt>	Cast(round a mode ,'int64').
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2116'>round</a>(a,mode)</tt>	Round_mode a with mode in [half_away_from_zero half_to_even].
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2146'>sqr</a>(a)</tt>	Square of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2155'>sqrt</a>(a)</tt>	Square root of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2160'>deg2rad</a>(a)</tt>	Convert degree a to radian.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2165'>rad2deg</a>(a)</tt>	Convert radian a to degree.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2170'>cos</a>(a)</tt>	Cosine of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2175'>arccos</a>(a)</tt>	Arccosine of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2180'>sin</a>(a)</tt>	Sine of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2185'>arcsin</a>(a)</tt>	Arcsine of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2190'>tan</a>(a)</tt>	Tangent of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2195'>arctan</a>(a)</tt>	Arctangent of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2200'>arctan2</a>(a,b)</tt>	Arctangent of a / b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2205'>cosh</a>(a)</tt>	Hyperbolic cosine of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2210'>arccosh</a>(a)</tt>	Hyperbolic arc cosine of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2215'>sinh</a>(a)</tt>	Hyperbolic sine of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2220'>arcsinh</a>(a)</tt>	Hyperbolic arc sine of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2225'>tanh</a>(a)</tt>	Hyperbolic tangent of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2230'>arctanh</a>(a)</tt>	Hyperbolic arc tangent of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2240'>erfc</a>(a)</tt>	Complementary error function.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2245'>erfcx</a>(a)</tt>	Scaled complementary error function.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2250'>erfinv</a>(a)</tt>	Inverse error function.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2255'>erfcinv</a>(a)</tt>	Inverse complementary error function.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2265'>gammaln</a>(a)</tt>	Log gamma function.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2270'>psi</a>(a)</tt>	Derivative of log gamma function.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2275'>chi2sf</a>(x,k)</tt>	Chi squared survival function.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2280'>j0</a>(x)</tt>	Bessel function of the first kind of order 0.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2285'>j1</a>(x)</tt>	Bessel function of the first kind of order 1.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2290'>jv</a>(v,x)</tt>	Bessel function of the first kind of order v real.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2295'>i0</a>(x)</tt>	Modified bessel function of the first kind of order 0.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2300'>i1</a>(x)</tt>	Modified bessel function of the first kind of order 1.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2305'>iv</a>(v,x)</tt>	Modified bessel function of the first kind of order v real.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2310'>real</a>(z)</tt>	Return real component of complex-valued tensor z.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2316'>imag</a>(z)</tt>	Return imaginary component of complex-valued tensor z.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2322'>angle</a>(z)</tt>	Return polar-coordinate angle of complex-valued tensor z.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2327'>complex</a>(real,imag)</tt>	Return complex-valued tensor with real and imag components.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2332'>conj</a>(z)</tt>	Return the complex conjugate of z.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2337'>complex_from_polar</a>(abs,angle)</tt>	Return complex-valued tensor from polar coordinate specification.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2348'>second</a>(a,b)</tt>	Create a matrix by filling the shape of a with b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2356'>ones_like</a>(model,dtype,opt)</tt>	Equivalent of numpy ones_like.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2380'>zeros_like</a>(model,dtype,opt)</tt>	Equivalent of numpy zeros_like.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2405'>zeros</a>(shape,dtype)</tt>	Create a tensor filled with zeros closer to numpy's syntax than alloc.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2416'>ones</a>(shape,dtype)</tt>	Create a tensor filled with ones closer to numpy's syntax than alloc.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2483'>nonzero</a>(a,return_matrix)</tt>	Returns one of the following if return_matrix is false default same as numpy :.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2527'>flatnonzero</a>(a)</tt>	Return a vector of indices that are non-zero in the flattened version of a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2555'>nonzero_values</a>(a)</tt>	Return a vector of non-zero elements contained in the input array.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2624'>tri</a>(N,M,k,dtype)</tt>	An array with ones at and below the given diagonal and zeros elsewhere.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2657'>tril</a>(m,k)</tt>	Lower triangle of an array.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2684'>triu</a>(m,k)</tt>	Upper triangle of an array.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L2735'>eye</a>(n,m,k,dtype)</tt>	Return a 2-d array with ones on the diagonal and zeros elsewhere.
<tt style='background-color:#E8E8E8;'> tensor.Alloc <a href=' /tensor/basic.py#L2934'>__call__</a>(val)</tt>	If the alloc would be useless this function returns val.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3003'>transfer</a>(var,target)</tt>	Return a version of var transferred to target.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3029'>register_transfer</a>(fn)</tt>	Register a transfer function for alternative targets.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3044'>sum</a>(input,axis,dtype,keepdims)</tt>	Computes the sum along the given axis es of a tensor input.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3074'>prod</a>(input,axis,dtype,keepdims)</tt>	Computes the product along the given axis es of a tensor input.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3145'>mean</a>(input,axis,dtype,op)</tt>	Computes the mean value along the given axis es of a tensor input.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3240'>var</a>(input,axis,ddof,keepdims)</tt>	Computes the variance along the given axis es of a tensor input.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3317'>std</a>(input,axis,ddof,keepdims)</tt>	Computes the standard deviation along the given axis es of a tensor input.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3394'>maximum</a>(x,y)</tt>	Elemwise maximum see max for the maximum in one tensor.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3400'>minimum</a>(x,y)</tt>	Elemwise minimum see min for the minimum in one tensor.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3406'>div_proxy</a>(x,y)</tt>	Proxy for either true_div or int_div depending on types of x y.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3417'>divmod</a>(x,y)</tt>	Elementvise divmod using floor_div and mod_check.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3440'>true_div</a>(a,b)</tt>	Elementwise [true] division inverse of multiplication.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3446'>int_div</a>(a,b)</tt>	Elementwise [floor] division inverse of multiplication.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3456'>ceil_intdiv</a>(a,b)</tt>	Safely compute ceil(float_division a b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3477'>mod_check</a>(x,y)</tt>	Make sure we do not try to use complex numbers.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3499'>clip</a>(x,min,max)</tt>	Clip x to be between min and max.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3530'>extract_constant</a>(x,elemwise,only_process_constants)</tt>	This function is basically a call to tensor get_scalar_constant_value.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3556'>transpose</a>(x,axes)</tt>	Reorder the dimensions of x default reverse them.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3571'>batched_dot</a>(a,b)</tt>	Compute the batched dot product of two variables batched_dot a b [i] = dot(a[i], b[i]).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3610'>batched_tensordot</a>(x,y,axes)</tt>	Compute a batched tensordot product.
<tt style='background-color:#E8E8E8;'> tensor.Split <a href=' /tensor/basic.py#L3754'>grad</a>(inputs,g_outputs)</tt>	Join the gradients along the axis that was used to split x.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3921'>addbroadcast</a>(x)</tt>	Make the input broadcastable in the specified axes.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3951'>unbroadcast</a>(x)</tt>	Make the input impossible to broadcast in the specified axes.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L3981'>patternbroadcast</a>(x,broadcastable)</tt>	Make the input adopt a specific broadcasting pattern.
<tt style='background-color:#E8E8E8;'> tensor.Join <a href=' /tensor/basic.py#L4251'>grad</a>(axis_and_tensors,grads)</tt>	The gradient wrt a join op is a split, used to partition the gradient along the axis which was used for joining.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L4329'>join</a>(axis)</tt>	Convenience function to concatenate tensortypes along the given axis.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L4360'>roll</a>(x,shift,axis)</tt>	Convenience function to roll tensortypes along the given axis.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L4413'>shape_padleft</a>(t,n_ones)</tt>	Reshape t by left-padding the shape with n_ones 1s.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L4430'>shape_padright</a>(t,n_ones)</tt>	Reshape t by right-padding the shape with n_ones 1s.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L4447'>shape_padaxis</a>(t,axis)</tt>	Reshape t by inserting 1 at the dimension axis.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L4484'>stack</a>()</tt>	Stack tensors in sequence on given axis default is 0.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L4586'>concatenate</a>(tensor_list,axis)</tt>	Alias for join(axis *tensor_list).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L4611'>get_vector_length</a>(v)</tt>	Return the run-time length of a symbolic vector.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L4686'>horizontal_stack</a>()</tt>	Horizontally stack two l{tensortype}s.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L5076'>is_flat</a>(var,outdim)</tt>	Verifies the dimensionality of the var is equal to outdim.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L5102'>flatten</a>(x,ndim,outdim)</tt>	Reshapes the variable x by keeping the first outdim-1 dimension size s of x the same.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L5249'>tile</a>(x,reps,ndim)</tt>	Tile input array x according to reps.
<tt style='background-color:#E8E8E8;'> tensor.PermuteRowElements <a href=' /tensor/basic.py#L5594'>_rec_perform</a>(node,x,y,inverse)</tt>	Perform the permutation by doing a recursion over the input dimensions.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L5731'>inverse_permutation</a>(perm)</tt>	Computes the inverse of permutations.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L5947'>dot</a>(a,b)</tt>	Computes the dot product of two variables.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L5998'>_tensordot_as_dot</a>(a,b,axes,dot)</tt>	Reduces a tensor dot product to a matrix or vector dot product based.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L6121'>tensordot</a>(a,b,axes)</tt>	Compute a generalized dot product over provided axes.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L6224'>outer</a>(x,y)</tt>	Return vector-vector outer product.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L6343'>diagonal</a>(a,offset,axis1,axis2)</tt>	A helper function for theano tensor extractdiag it accepts tensor with.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/nlinalg.py#L245'>diag</a>(v,k)</tt>	A helper function for two ops theano tensor extractdiag and.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L6448'>stacklists</a>(arg)</tt>	Recursively stack lists of tensors to maintain similar structure.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L6483'>ptp</a>(a,axis)</tt>	Range of values maximum - minimum along an axis.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L6514'>swapaxes</a>(y,axis1,axis2)</tt>	Swap axes of inputted tensor.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/basic.py#L6523'>choose</a>(a,choices,out,mode)</tt>	Construct an array from an index array and a set of arrays to choose from.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/blas_headers.py#L20'>detect_macos_sdot_bug</a>()</tt>	Try to detect a bug in the default blas in macos.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/blas_headers.py#L149'>cblas_header_text</a>()</tt>	C header for the cblas interface.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/blas_headers.py#L731'>blas_header_text</a>()</tt>	C header for the fortran blas interface.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/blas_headers.py#L990'>mkl_threads_text</a>()</tt>	C header for mkl threads interface.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/blas_headers.py#L1020'>openblas_threads_text</a>()</tt>	C header for openblas threads interface.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/blas.py#L357'>ldflags</a>(libs,flags,libs_dir,include_dir)</tt>	Extract a list of compilation flags from config blas ldflags.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/blas.py#L389'>_ldflags</a>(ldflags_str,libs,flags,libs_dir)</tt>	Extract list of compilation flags from a string.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/blas.py#L1065'>_as_scalar</a>(res,dtype)</tt>	Return none or a tensorvariable whose type is in t float_scalar_types.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/blas.py#L1302'>_gemm_from_factored_list</a>(lst)</tt>	Returns none or a list to replace node outputs.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/blas.py#L1361'>_gemm_from_node2</a>(node)</tt>	:todo in many expressions there are many ways to turn it into a gemm.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/blas.py#L1657'>local_gemm_to_gemv</a>(node)</tt>	Gemm acting on row or column matrices -> gemv.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/blas.py#L1670'>local_gemm_to_ger</a>(node)</tt>	Gemm computing an outer-product -> ger.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/blas.py#L1700'>local_dot22_to_ger_or_gemv</a>(node)</tt>	Dot22 computing an outer-product -> ger.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L297'>reshape</a>(shape,ndim)</tt>	Return a reshaped view/copy of this variable.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L323'>dimshuffle</a>()</tt>	Reorder the dimensions of this variable optionally inserting broadcasted dimensions.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L368'>transfer</a>(target)</tt>	If target is 'cpu' this will transfer to a tensortype if not already one.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L585'>copy</a>(name)</tt>	Return a symbolic copy and optionally assign a name.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L630'>sum</a>(axis,dtype,keepdims,acc_dtype)</tt>	See theano tensor sum.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L636'>prod</a>(axis,dtype,keepdims,acc_dtype)</tt>	See theano tensor prod.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L656'>mean</a>(axis,dtype,keepdims,acc_dtype)</tt>	See theano tensor mean.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L662'>var</a>(axis,ddof,keepdims,corrected)</tt>	See theano tensor var.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L667'>std</a>(axis,ddof,keepdims,corrected)</tt>	See theano tensor std.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L672'>min</a>(axis,keepdims)</tt>	See theano tensor min.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L676'>max</a>(axis,keepdims)</tt>	See theano tensor max.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L680'>argmin</a>(axis,keepdims)</tt>	See theano tensor argmin.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L684'>argmax</a>(axis,keepdims)</tt>	See theano tensor argmax.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L688'>nonzero</a>(return_matrix)</tt>	See theano tensor nonzero.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L692'>nonzero_values</a>()</tt>	See theano tensor nonzero_values.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L696'>sort</a>(axis,kind,order)</tt>	See theano tensor sort.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L700'>argsort</a>(axis,kind,order)</tt>	See theano tensor argsort.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L704'>clip</a>(a_min,a_max)</tt>	Clip limit the values in an array.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L708'>conj</a>()</tt>	See theano tensor conj.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L714'>repeat</a>(repeats,axis)</tt>	See theano tensor repeat.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L718'>round</a>(mode)</tt>	See theano tensor round.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L746'>ptp</a>(axis)</tt>	See 'theano tensor ptp'.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L751'>swapaxes</a>(axis1,axis2)</tt>	Return 'tensor swapaxes self axis1 axis2.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L761'>fill</a>(value)</tt>	Fill inputted tensor with the assigned value.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L765'>choose</a>(a,choices,out,mode)</tt>	Construct an array from an index array and a set of arrays to choose from.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L774'>squeeze</a>()</tt>	Remove broadcastable dimensions from the shape of an array.
<tt style='background-color:#E8E8E8;'> tensor._tensor_py_operators <a href=' /tensor/var.py#L784'>compress</a>(a,axis)</tt>	Return selected slices only.
<tt style='background-color:#E8E8E8;'> tensor.TensorConstantSignature <a href=' /tensor/var.py#L875'>_get_sum</a>()</tt>	Compute sum of non nan / inf values in the array.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/elemwise_cgen.py#L6'>make_declare</a>(loop_orders,dtypes,sub)</tt>	Produce code to declare all necessary variables.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/elemwise_cgen.py#L118'>make_alloc</a>(loop_orders,dtype,sub,fortran)</tt>	Generate c code to allocate outputs.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/elemwise_cgen.py#L181'>make_loop</a>(loop_orders,dtypes,loop_tasks,sub)</tt>	Make a nested loop over several arrays and associate specific code to each level of nesting.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/elemwise_cgen.py#L250'>make_reordered_loop</a>(init_loop_orders,olv_index,dtypes,inner_task)</tt>	A bit like make_loop but when only the inner-most loop executes code.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/elemwise_cgen.py#L467'>make_loop_careduce</a>(loop_orders,dtypes,loop_tasks,sub)</tt>	Make a nested loop over several arrays and associate specific code to each level of nesting.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/extra_ops.py#L186'>searchsorted</a>(x,v,side,sorter)</tt>	Find indices where elements should be inserted to maintain order.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/extra_ops.py#L370'>cumsum</a>(x,axis)</tt>	Return the cumulative sum of the elements along a given axis.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/extra_ops.py#L390'>cumprod</a>(x,axis)</tt>	Return the cumulative product of the elements along a given axis.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/extra_ops.py#L478'>diff</a>(x,n,axis)</tt>	Calculate the n-th order discrete difference along given axis.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/extra_ops.py#L503'>bincount</a>(x,weights,minlength,assert_nonneg)</tt>	Count number of occurrences of each value in array of ints.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/extra_ops.py#L553'>squeeze</a>(x)</tt>	Remove broadcastable dimensions from the shape of an array.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/extra_ops.py#L579'>compress</a>(condition,x,axis)</tt>	Return selected slices of an array along given axis.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/extra_ops.py#L717'>repeat</a>(x,repeats,axis)</tt>	Repeat elements of an array.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/extra_ops.py#L823'>bartlett</a>(M)</tt>	An instance of this class returns the bartlett spectral window in the time-domain.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/extra_ops.py#L911'>fill_diagonal</a>(a,val)</tt>	Returns a copy of an array with all elements of the main diagonal set to a specified scalar value.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/extra_ops.py#L1051'>fill_diagonal_offset</a>(a,val,offset)</tt>	Returns a copy of an array with all elements of the main diagonal set to a specified scalar value.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/extra_ops.py#L1078'>to_one_hot</a>(y,nb_class,dtype)</tt>	Return a matrix where each row correspond to the one hot encoding of each element in y.
<tt style='background-color:#E8E8E8;'> tensor.SortOp <a href=' /tensor/sort.py#L66'>__get_argsort_indices</a>(a,axis)</tt>	Calculates indices which can be used to reverse sorting operation of "a" tensor along "axis".
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/sort.py#L195'>argsort</a>(a,axis,kind,order)</tt>	Returns the indices that would sort an array.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/subtensor.py#L49'>make_constant</a>(args)</tt>	Convert python litterals to theano constants in subtensor arguments.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/subtensor.py#L68'>get_idx_list</a>(inputs,idx_list,get_count)</tt>	Given a list of inputs to the subtensor and its idx_list reorders the inputs according to the idx list to get the right values.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/subtensor.py#L103'>get_canonical_form_slice</a>(theslice,length)</tt>	Given a slice [start stop step] transform it into a canonical form that respects the conventions imposed by python and numpy.
<tt style='background-color:#E8E8E8;'> tensor.Subtensor <a href=' /tensor/subtensor.py#L328'>convert</a>(entry,slice_ok)</tt>	Change references to variables into references to types.
<tt style='background-color:#E8E8E8;'> tensor.Subtensor <a href=' /tensor/subtensor.py#L395'>get_constant_idx</a>(inputs,allow_partial,only_process_constants,elemwise)</tt>	Return the idx_list with constant inputs replaced by their python scalar equivalent.
<tt style='background-color:#E8E8E8;'> tensor.Subtensor <a href=' /tensor/subtensor.py#L628'>default_helper_c_code_args</a>()</tt>	Returns a dictionary of default arguments to helper_c_code.
<tt style='background-color:#E8E8E8;'> tensor.Subtensor <a href=' /tensor/subtensor.py#L638'>helper_c_code</a>(node,name,inputs,outputs)</tt>	The parameters c_prefix are there to allow reusing this function on pyarray and gpuarray object.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/subtensor.py#L1010'>set_subtensor</a>(x,y,inplace,tolerate_inplace_aliasing)</tt>	Return x with the given subtensor overwritten by y.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/subtensor.py#L1036'>inc_subtensor</a>(x,y,inplace,set_instead_of_inc)</tt>	Return x with the given subtensor incremented by y.
<tt style='background-color:#E8E8E8;'> tensor.IncSubtensor <a href=' /tensor/subtensor.py#L1469'>do_type_checking</a>(node)</tt>	Should raise notimplementederror if c_code does not support the types involved in this node.
<tt style='background-color:#E8E8E8;'> tensor.IncSubtensor <a href=' /tensor/subtensor.py#L1539'>get_helper_c_code_args</a>()</tt>	Return a dictionary of arguments to pass to helper_c_code.
<tt style='background-color:#E8E8E8;'> tensor.IncSubtensor <a href=' /tensor/subtensor.py#L1563'>add_to_zview</a>(name,x,fail)</tt>	Return c code to add x to zview should decref zview if the.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/subtensor.py#L1632'>_sum_grad_over_bcasted_dims</a>(x,gx)</tt>	Sum of gx over dimensions to reproduce x broadcastable.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/subtensor.py#L2093'>adv_index_broadcastable_pattern</a>(a,idx)</tt>	This function is only used to determine the broadcast pattern for advancedsubtensor output variable.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L8'>_scal_inplace</a>(symbol)</tt>	Replace a symbol definition with an elementwise version of the corresponding scalar op.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L33'>lt_inplace</a>(a,b)</tt>	A < b inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L38'>gt_inplace</a>(a,b)</tt>	A > b inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L43'>le_inplace</a>(a,b)</tt>	A <= b inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L48'>ge_inplace</a>(a,b)</tt>	A >= b inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L53'>eq_inplace</a>(a,b)</tt>	A == b inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L58'>neq_inplace</a>(a,b)</tt>	A != b inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L63'>and__inplace</a>(a,b)</tt>	Bitwise a & b inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L68'>or__inplace</a>(a,b)</tt>	Bitwise a | b inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L73'>xor_inplace</a>(a,b)</tt>	Bitwise a ^ b inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L78'>invert_inplace</a>(a)</tt>	Bitwise ~a inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L83'>abs__inplace</a>(a)</tt>	|a| (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L88'>exp_inplace</a>(a)</tt>	E^a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L93'>exp2_inplace</a>(a)</tt>	2^a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L98'>expm1_inplace</a>(a)</tt>	E^a - 1 (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L103'>neg_inplace</a>(a)</tt>	-a inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L108'>inv_inplace</a>(a)</tt>	1 0/a inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L113'>log_inplace</a>(a)</tt>	Base e logarithm of a inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L123'>log2_inplace</a>(a)</tt>	Base 2 logarithm of a inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L128'>log10_inplace</a>(a)</tt>	Base 10 logarithm of a inplace on a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L133'>sgn_inplace</a>(a)</tt>	Sign of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L138'>ceil_inplace</a>(a)</tt>	Ceil of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L143'>floor_inplace</a>(a)</tt>	Floor of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L148'>trunc_inplace</a>(a)</tt>	Trunc of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L153'>round_half_to_even_inplace</a>(a)</tt>	Round_half_to_even_inplace a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L158'>round_half_away_from_zero_inplace</a>(a)</tt>	Round_half_away_from_zero_inplace a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L163'>sqr_inplace</a>(a)</tt>	Square of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L168'>sqrt_inplace</a>(a)</tt>	Square root of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L173'>deg2rad_inplace</a>(a)</tt>	Convert degree a to radian(inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L178'>rad2deg_inplace</a>(a)</tt>	Convert radian a to degree(inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L183'>cos_inplace</a>(a)</tt>	Cosine of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L188'>arccos_inplace</a>(a)</tt>	Arccosine of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L193'>sin_inplace</a>(a)</tt>	Sine of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L198'>arcsin_inplace</a>(a)</tt>	Arcsine of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L203'>tan_inplace</a>(a)</tt>	Tangent of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L208'>arctan_inplace</a>(a)</tt>	Arctangent of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L213'>arctan2_inplace</a>(a,b)</tt>	Arctangent of a / b (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L218'>cosh_inplace</a>(a)</tt>	Hyperbolic cosine of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L223'>arccosh_inplace</a>(a)</tt>	Hyperbolic arc cosine of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L228'>sinh_inplace</a>(a)</tt>	Hyperbolic sine of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L233'>arcsinh_inplace</a>(a)</tt>	Hyperbolic arc sine of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L238'>tanh_inplace</a>(a)</tt>	Hyperbolic tangent of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L243'>arctanh_inplace</a>(a)</tt>	Hyperbolic arc tangent of a (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L253'>erfc_inplace</a>(a)</tt>	Complementary error function.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L258'>erfcx_inplace</a>(a)</tt>	Scaled complementary error function.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L268'>gammaln_inplace</a>(a)</tt>	Log gamma function.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L273'>psi_inplace</a>(a)</tt>	Derivative of log gamma function.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L278'>chi2sf_inplace</a>(x,k)</tt>	Chi squared survival function.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L283'>j0_inplace</a>(x)</tt>	Bessel function of the first kind of order 0.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L288'>j1_inplace</a>(x)</tt>	Bessel function of the first kind of order 1.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L293'>jv_inplace</a>(v,x)</tt>	Bessel function of the first kind of order v real.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L298'>i0_inplace</a>(x)</tt>	Modified bessel function of the first kind of order 0.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L303'>i1_inplace</a>(x)</tt>	Modified bessel function of the first kind of order 1.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L308'>iv_inplace</a>(v,x)</tt>	Modified bessel function of the first kind of order v real.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L313'>second_inplace</a>(a)</tt>	Fill a with b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L321'>maximum_inplace</a>(a,b)</tt>	Elementwise addition (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L326'>minimum_inplace</a>(a,b)</tt>	Elementwise addition (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L331'>add_inplace</a>(a,b)</tt>	Elementwise addition (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L336'>sub_inplace</a>(a,b)</tt>	Elementwise subtraction (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L341'>mul_inplace</a>(a,b)</tt>	Elementwise multiplication (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L346'>true_div_inplace</a>(a,b)</tt>	Elementwise division (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L351'>int_div_inplace</a>(a,b)</tt>	Elementwise division (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L356'>mod_inplace</a>(a,b)</tt>	Elementwise modulo (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L361'>pow_inplace</a>(a,b)</tt>	Elementwise power (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L366'>conj_inplace</a>(a)</tt>	Elementwise conjugate (inplace on a).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/inplace.py#L379'>transpose_inplace</a>(x)</tt>	Perform a transpose on a tensor without copying the underlying storage.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/fft.py#L119'>rfft</a>(inp,norm)</tt>	Performs the fast fourier transform of a real-valued input.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/fft.py#L153'>irfft</a>(inp,norm,is_odd)</tt>	Performs the inverse fast fourier transform with real-valued output.
<tt style='background-color:#E8E8E8;'> tensor.Cholesky <a href=' /tensor/slinalg.py#L83'>grad</a>(inputs,gradients)</tt>	Cholesky decomposition reverse-mode gradient update.
<tt style='background-color:#E8E8E8;'> tensor.CholeskyGrad <a href=' /tensor/slinalg.py#L159'>perform</a>(node,inputs,outputs)</tt>	Implements the "reverse-mode" gradient [1]_ for the cholesky factorization of a positive-definite matrix.
<tt style='background-color:#E8E8E8;'> tensor.Solve <a href=' /tensor/slinalg.py#L269'>grad</a>(inputs,output_gradients)</tt>	Reverse-mode gradient updates for matrix solve operation c = a \ b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/shared_randomstreams.py#L23'>randomstate_constructor</a>(value,name,strict,allow_downcast)</tt>	Sharedvariable constructor for randomstate.
<tt style='background-color:#E8E8E8;'> tensor.RandomStreams <a href=' /tensor/shared_randomstreams.py#L70'>seed</a>(seed)</tt>	Re-initialize each random stream.
<tt style='background-color:#E8E8E8;'> tensor.RandomStreams <a href=' /tensor/shared_randomstreams.py#L94'>__getitem__</a>(item)</tt>	Retrieve the numpy randomstate instance associated with a particular stream.
<tt style='background-color:#E8E8E8;'> tensor.RandomStreams <a href=' /tensor/shared_randomstreams.py#L117'>__setitem__</a>(item,val)</tt>	Set the numpy randomstate instance associated with a particular stream.
<tt style='background-color:#E8E8E8;'> tensor.RandomStreams <a href=' /tensor/shared_randomstreams.py#L142'>gen</a>(op)</tt>	Create a new random stream in this container.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt_uncanonicalize.py#L50'>local_max_and_argmax</a>(node)</tt>	If we don't use the argmax change it to a max only.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt_uncanonicalize.py#L66'>local_max_to_min</a>(node)</tt>	Change -(max -x to min.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt_uncanonicalize.py#L93'>local_alloc_dimshuffle</a>(node)</tt>	If a dimshuffle is inside an alloc and only adds dimension to the left remove it.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt_uncanonicalize.py#L115'>local_reshape_dimshuffle</a>(node)</tt>	If a dimshuffle is inside a reshape and does not change the order of dimensions remove it.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt_uncanonicalize.py#L141'>local_dimshuffle_alloc</a>(node)</tt>	If an alloc is inside a dimshuffle which only adds dimension to the left.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt_uncanonicalize.py#L168'>local_dimshuffle_subtensor</a>(node)</tt>	If a subtensor is inside a dimshuffle which only drop broadcastable dimensions scrap the dimshuffle and index the.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L61'>clone</a>(dtype,broadcastable)</tt>	Return a copy of the type optionally with a new dtype or broadcastable pattern.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L74'>filter</a>(data,strict,allow_downcast)</tt>	Convert data to something which can be associated to a tensorvariable.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L202'>filter_variable</a>(other,allow_convert)</tt>	Convert a symbolic variable into a tensortype if compatible.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L243'>dtype_specs</a>()</tt>	Return a tuple python type c type numpy typenum that corresponds to self.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L277'>__eq__</a>(other)</tt>	Compare true iff other is the same kind of tensortype.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L327'>__hash__</a>()</tt>	Hash equal for same kinds of tensortype.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L341'>make_variable</a>(name)</tt>	Return a tensorvariable of this type.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L379'>c_declare</a>(name,sub,check_input)</tt>	Override clinkertype c_declare.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L396'>c_init</a>(name,sub)</tt>	Override clinkertype c_init.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L405'>c_extract</a>(name,sub,check_input)</tt>	Override clinkertype c_extract.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L467'>c_cleanup</a>(name,sub)</tt>	Override clinkertype c_cleanup.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L478'>c_sync</a>(name,sub)</tt>	Override clinkertype c_sync.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L522'>c_headers</a>(c_compiler)</tt>	Override clinkerobject c_headers.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L535'>c_support_code</a>()</tt>	Override clinkerobject c_support_code.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L552'>value_zeros</a>(shape)</tt>	Create an numpy ndarray full of 0 values.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L559'>get_shape_info</a>(obj)</tt>	Return the information needed to compute the memory size of obj.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/type.py#L589'>get_size</a>(shape_info)</tt>	Number of bytes taken by the object represented by shape_info.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/blas_c.py#L352'>gemv_c_code</a>(y,A,x,z)</tt>	Z <- beta * y + alpha * dot a x.
<tt style='background-color:#E8E8E8;'> tensor.Fourier <a href=' /tensor/fourier.py#L103'>grad</a>(inputs,cost_grad)</tt>	In defining the gradient the finite fourier transform is viewed as.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L93'>scalarconsts_rest</a>(inputs,elemwise,only_process_constants)</tt>	Partition a list of variables into two kinds scalar constants and the rest.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L110'>broadcast_like</a>(value,template,fgraph,dtype)</tt>	Return a variable with the same shape and dtype as the template filled by broadcasting value through it.
<tt style='background-color:#E8E8E8;'> tensor.InplaceElemwiseOptimizer <a href=' /tensor/opt.py#L174'>apply</a>(fgraph)</tt>	Usage inplaceelemwiseoptimizer op optimize fgraph.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L575'>local_dimshuffle_lift</a>(node)</tt>	"lifts" dimshuffle through elemwise operations and merges consecutive dimshuffles.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L621'>local_useless_dimshuffle_in_reshape</a>(node)</tt>	Removes useless dimshuffle operation inside reshape reshape(vector.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L657'>local_lift_transpose_through_dot</a>(node)</tt>	Dot x y t -> dot y t x t.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L695'>local_tensor_scalar_tensor</a>(node)</tt>	Tensor_from_scalar(scalar_from_tensor x -> x.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L709'>local_scalar_tensor_scalar</a>(node)</tt>	Scalar_from_tensor(tensor_from_scalar x -> x.
<tt style='background-color:#E8E8E8;'> tensor.ShapeFeature <a href=' /tensor/opt.py#L971'>get_shape</a>(var,idx)</tt>	Optimization can call this to get the current shape_i it is better to call this then use directly shape_of[var][idx].
<tt style='background-color:#E8E8E8;'> tensor.ShapeFeature <a href=' /tensor/opt.py#L1012'>shape_ir</a>(i,r)</tt>	Return symbolic r shape[i] for tensor variable r int i.
<tt style='background-color:#E8E8E8;'> tensor.ShapeFeature <a href=' /tensor/opt.py#L1025'>shape_tuple</a>(r)</tt>	Return a tuple of symbolic shape vars for tensor variable r.
<tt style='background-color:#E8E8E8;'> tensor.ShapeFeature <a href=' /tensor/opt.py#L1032'>default_infer_shape</a>(node,i_shapes)</tt>	Return a list of shape tuple or none for the outputs of node.
<tt style='background-color:#E8E8E8;'> tensor.ShapeFeature <a href=' /tensor/opt.py#L1048'>unpack</a>(s_i,var)</tt>	Return a symbolic integer scalar for the shape element s_i.
<tt style='background-color:#E8E8E8;'> tensor.ShapeFeature <a href=' /tensor/opt.py#L1121'>set_shape</a>(r,s,override)</tt>	Assign the shape s to previously un-shaped variable r.
<tt style='background-color:#E8E8E8;'> tensor.ShapeFeature <a href=' /tensor/opt.py#L1169'>update_shape</a>(r,other_r)</tt>	Replace shape of r by shape of other_r.
<tt style='background-color:#E8E8E8;'> tensor.ShapeFeature <a href=' /tensor/opt.py#L1248'>set_shape_i</a>(r,i,s_i)</tt>	Replace element i of shape_of[r] by s_i.
<tt style='background-color:#E8E8E8;'> tensor.ShapeFeature <a href=' /tensor/opt.py#L1271'>init_r</a>(r)</tt>	Register r's shape in the shape_of dictionary.
<tt style='background-color:#E8E8E8;'> tensor.ShapeFeature <a href=' /tensor/opt.py#L1436'>same_shape</a>(x,y,dim_x,dim_y)</tt>	Return true if we are able to assert that x and y have the same shape.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L1662'>local_fill_sink</a>(node)</tt>	F(fill a b fill c d e) -> fill(c fill(a f b d e )) f need to be an elemwise that isn't a fill.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L1709'>local_fill_to_alloc</a>(node)</tt>	Fill s v -> alloc(v shape s this is an important optimization because with the shape_to_shape_i.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L1762'>local_useless_fill</a>(node)</tt>	Fill s v -> v this optimization is only needed in fast_compile to make the code.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L1781'>local_useless_alloc</a>(node)</tt>	If the input type is the same as the output type dtype and broadcast there is no change in the shape of the input.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L1806'>local_canonicalize_alloc</a>(node)</tt>	If the input type is the same as the output type dtype and broadcast there is no change in the shape of the input.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L1861'>local_alloc_empty_to_zeros</a>(node)</tt>	This convert allocempty to alloc of 0.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L1914'>local_subtensor_inc_subtensor</a>(node)</tt>	Subtensor(setsubtensor x y idx idx) -> y.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L1949'>local_subtensor_remove_broadcastable_index</a>(node)</tt>	Remove broadcastable dimension with index 0 or -1 a[:,:,:,0] -> a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L1997'>local_subtensor_make_vector</a>(node)</tt>	Replace all subtensor(make_vector) like [a b c][0] -> a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L2084'>local_useless_elemwise</a>(node)</tt>	Eq x x -> 1.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L2183'>local_alloc_unary</a>(node)</tt>	Unary(alloc x shp -> alloc(unary x shp).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L2204'>local_cast_cast</a>(node)</tt>	Cast(cast x dtype1 dtype2) when those contrain.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L2245'>is_an_upcast</a>(type1,type2)</tt>	Given two data types as strings check if converting to type2 from type1 constitutes an upcast.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L2273'>local_func_inv</a>(node)</tt>	Check for two consecutive operations that are functional inverses and remove them from the function graph.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L2310'>is_inverse_pair</a>(node_op,prev_op,inv_pair)</tt>	Given two consecutive operations check if they are the provided pair of inverse functions.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L2442'>local_remove_all_assert</a>(node)</tt>	An optimization disabled by default that removes all asserts from the graph.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L2480'>local_upcast_elemwise_constant_inputs</a>(node)</tt>	This explicitly upcasts constant inputs to elemwise ops when those ops do implicit upcasting anyway.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L2552'>local_useless_inc_subtensor</a>(node)</tt>	Remove incsubtensor when we overwrite the full inputs with the new value.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L2606'>local_set_to_inc_subtensor</a>(node)</tt>	Advancedincsubtensor1(x x[ilist]+other ilist set_instead_of_inc=true) ->.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L2643'>local_useless_slice</a>(node)</tt>	Remove subtensor of the form x[0 :] -> x[0].
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L2673'>local_useless_subtensor</a>(node)</tt>	Remove subtensor/advancedsubtensor1 if it takes the full input in the.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L2801'>local_subtensor_lift</a>(node)</tt>	Unary x [idx] -> unary(x[idx])#any broadcast pattern.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L2904'>merge_two_slices</a>(slice1,len1,slice2,len2)</tt>	This function merges two slices into a single slice the code works on.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3040'>local_subtensor_merge</a>(node)</tt>	Refactored optimization to deal with all cases of tensor merging.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3119'>local_subtensor_of_alloc</a>(node)</tt>	Alloc val [x y] -> alloc(val[ ]).
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3191'>local_subtensor_of_dot</a>(node)</tt>	This optimization translates t dot a b [idxs] into t dot(a[idxs_a], b[idxs_b]),.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3252'>local_IncSubtensor_serialize</a>(node)</tt>	When using subtensor gradient graphs can be ugly.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3339'>local_inplace_setsubtensor</a>(node)</tt>	Also work for gpuincsubtensor.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3368'>local_inplace_incsubtensor1</a>(node)</tt>	Also work for gpuadvancedincsubtensor1.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3392'>local_incsubtensor_of_zeros</a>(node)</tt>	Incsubtensor x zeros idx -> x.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3419'>local_incsubtensor_of_zeros_to_setsubtensor</a>(node)</tt>	Incsubtensor zeros x -> setsubtensor zeros x.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3437'>local_setsubtensor_of_constants</a>(node)</tt>	Setsubtensor(x x[idx], idx) -> x when x is constant or alloc.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3472'>local_adv_sub1_adv_inc_sub1</a>(node)</tt>	Optimize the possible advsub1(advincsub1.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3525'>local_useless_inc_subtensor_alloc</a>(node)</tt>	Replaces an [advanced]incsubtensor[1], whose increment is an alloc of a fully or partially broadcastable variable by one that skips the.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3640'>local_useless_rebroadcast</a>(node)</tt>	Remove rebroadcast if id does not actually change the broadcasting pattern.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3672'>local_rebroadcast_lift</a>(node)</tt>	Lifts rebroadcast through unary elemwise operations and merges consecutive rebroadcasts.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3729'>apply_rebroadcast_opt</a>(rval)</tt>	Apply as many times as required the optimization local_useless_rebroadcast and local_rebroadcast_lift.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3766'>local_join_1</a>(node)</tt>	Join i x => x remove join() when only one element is joined.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3786'>local_join_empty</a>(node)</tt>	Join i x y empty => join i x y remove empty inputs to joins.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3841'>local_join_make_vector</a>(node)</tt>	Join(0 make_vector1 make_vector2 => join(0 make_vector12.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3885'>local_sumsqr2dot</a>(node)</tt>	This optimization detects t sqr( w dimshuffle('x',0 1) * g dimshuffle(0 'x',1) sum(axis= 1 2.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3918'>local_expm1</a>(node)</tt>	This optimization detects exp a -1 and converts this to expm1 a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L3946'>local_useless_switch</a>(node)</tt>	This optimization makes the following changes in the graph t.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L4035'>local_mul_switch_sink</a>(node)</tt>	This optimization makes the folowing changes in the graph t.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L4118'>local_div_switch_sink</a>(node)</tt>	This optimization makes the folowing changes in the graph t.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L4215'>local_useless_tile</a>(node)</tt>	Tile(x 1 *n) -> x this is useless tile.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L4262'>local_useless_split</a>(node)</tt>	Split{n_splits=1} x y -> x remove split with only 1 split.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L4288'>local_flatten_lift</a>(node)</tt>	Flatten(unaryelemwise x -> unaryelemwise(flatten x this optimization is needed by optimization.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L4360'>local_useless_reshape</a>(node)</tt>	Remove two kinds of useless reshape.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L4457'>local_reshape_to_dimshuffle</a>(node)</tt>	Broadcastable dimensions in reshape are replaced with dimshuffle.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L4503'>local_reshape_lift</a>(node)</tt>	Reshape(unaryelemwise x -> unaryelemwise(reshape x this optimization is needed by optimization.
<tt style='background-color:#E8E8E8;'> tensor.Canonizer <a href=' /tensor/opt.py#L4622'>get_num_denum</a>(input)</tt>	This extract two lists num and denum such that the input is self.
<tt style='background-color:#E8E8E8;'> tensor.Canonizer <a href=' /tensor/opt.py#L4723'>merge_num_denum</a>(num,denum)</tt>	Utility function which takes two lists num and denum and returns something which is equivalent to inverse(main(\*num),.
<tt style='background-color:#E8E8E8;'> tensor.Canonizer <a href=' /tensor/opt.py#L4811'>simplify_factors</a>(num,denum)</tt>	For any variable r which is both in num and denum removes it from both lists.
<tt style='background-color:#E8E8E8;'> tensor.Canonizer <a href=' /tensor/opt.py#L4843'>simplify_constants</a>(orig_num,orig_denum,out_type)</tt>	Find all constants and put them together into a single constant.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5035'>local_sum_prod_mul_by_scalar</a>(node)</tt>	Sum(scalar * smth) -> scalar * sum smth.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5124'>local_elemwise_sub_zeros</a>(node)</tt>	Elemwise{sub} x x -> zeros_like x.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5327'>local_sum_prod_div_dimshuffle</a>(node)</tt>	Sum(a / dimshuffle{ } b axis=l) -> sum(a axis={ }) / b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5452'>local_sum_prod_all_to_none</a>(node)</tt>	Sum{0 1 n} -> sum{} or.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5470'>local_op_of_op</a>(node)</tt>	Prod(prod()) -> single prod().
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5544'>local_reduce_join</a>(node)</tt>	Reduce{scalar op}(join(axis=0 a b), axis=0) -> elemwise{scalar op} a b.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5625'>local_useless_reduce</a>(node)</tt>	Sum(a axis=[]) -> a.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5637'>local_reduce_broadcastable</a>(node)</tt>	Remove reduction over broadcastable dimensions.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5678'>local_opt_alloc</a>(node)</tt>	Sum(alloc constant shapes => constant*prod shapes.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5739'>local_neg_div_neg</a>(node)</tt>	- (-a / b) -> a / b also performs - (c / b) -> -c / b) when c is a scalar constant.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5763'>local_mul_zero</a>(node)</tt>	As part of canonicalization we replace multiplication by zero with zero.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5827'>local_mul_to_sqr</a>(node)</tt>	X*x -> sqr x this is faster on the gpu when memory fetching is a big part of.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5843'>local_intdiv_by_one</a>(node)</tt>	X // 1 -> x.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5854'>local_zero_div</a>(node)</tt>	0 / x -> 0.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5907'>local_pow_specialize_device</a>(node)</tt>	This optimization is not the same on all device we do it only on cpu here.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L5975'>local_mul_specialize</a>(node)</tt>	Remove special-case constants from mul arguments and useless neg in inputs.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L6101'>check_for_x_over_absX</a>(numerators,denominators)</tt>	Convert x/abs x into sign x.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L6124'>local_abs_lift</a>(node)</tt>	Move the abs toward the input.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L6142'>local_abs_merge</a>(node)</tt>	Merge abs generated by local_abs_lift when the canonizer don't.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L6381'>local_greedy_distributor</a>(node)</tt>	Optimize by reducing the number of multiplications and/or divisions.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L6499'>get_clients</a>(node)</tt>	Used by erf/erfc opt to track less frequent op.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L6508'>get_clients2</a>(node)</tt>	Used by erf/erfc opt to track less frequent op.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L7026'>local_elemwise_fusion_op</a>(OP,max_input_fct,maker)</tt>	We parametrize it to make it work for elemwise and gpuelemwise op.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L7360'>local_add_mul_fusion</a>(node)</tt>	Fuse consecutive add or mul in one such node with more inputs.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/opt.py#L7428'>local_useless_composite</a>(node)</tt>	For elemwise composite that have multiple outputs remove the outputs that are not used.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/utils.py#L9'>hash_from_ndarray</a>(data)</tt>	Return a hash from an ndarray.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/utils.py#L33'>shape_of_variables</a>(fgraph,input_shapes)</tt>	Compute the numeric shape of all intermediate variables given input shapes.
<tt style='background-color:#E8E8E8;'> tensor.Elemwise <a href=' /tensor/elemwise.py#L497'>get_output_info</a>(dim_shuffle)</tt>	Return the outputs dtype and broadcastable pattern and the dimshuffled niputs.
<tt style='background-color:#E8E8E8;'> tensor.Elemwise <a href=' /tensor/elemwise.py#L554'>make_node</a>()</tt>	If the inputs have different number of dimensions their shape is left-completed to the greatest number of dimensions with 1s.
<tt style='background-color:#E8E8E8;'> tensor.Elemwise <a href=' /tensor/elemwise.py#L1224'>python_constant_folding</a>(node)</tt>	Return true if we do not want to compile c code when doing constant folding of this node.
<tt style='background-color:#E8E8E8;'> tensor.Prod <a href=' /tensor/elemwise.py#L1985'>L_op</a>(inp,out,grads)</tt>	The grad of this op could be very easy if it is was not for the case where zeros are present in a given "group" (ie.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/io.py#L58'>load</a>(path,dtype,broadcastable,mmap_mode)</tt>	Load an array from an npy file.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/io.py#L262'>isend</a>(var,dest,tag)</tt>	Non blocking send.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/io.py#L291'>mpi_send_wait_key</a>(a)</tt>	Wait as long as possible on waits start send/recvs early.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/io.py#L300'>mpi_tag_key</a>(a)</tt>	Break mpi ties by using the variable tag - prefer lower tags first.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/sharedvar.py#L12'>load_shared_variable</a>(val)</tt>	This function is only here to keep some pickles loading after a failed fix done in august 2011.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/sharedvar.py#L27'>tensor_constructor</a>(value,name,strict,allow_downcast)</tt>	Sharedvariable constructor for tensortype.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/sharedvar.py#L71'>scalar_constructor</a>(value,name,strict,allow_downcast)</tt>	Sharedvariable constructor for scalar values default int64 or float64.
<tt style='background-color:#E8E8E8;'> tensor.MatrixInverse <a href=' /tensor/nlinalg.py#L81'>grad</a>(inputs,g_outputs)</tt>	The gradient function should return.
<tt style='background-color:#E8E8E8;'> tensor.MatrixInverse <a href=' /tensor/nlinalg.py#L100'>R_op</a>(inputs,eval_points)</tt>	The gradient function should return.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/nlinalg.py#L126'>matrix_dot</a>()</tt>	Shorthand for product between several dots.
<tt style='background-color:#E8E8E8;'> tensor.ExtractDiag <a href=' /tensor/nlinalg.py#L205'>perform</a>(node,ins,outs)</tt>	For some reason numpy diag x is really slow so we.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/nlinalg.py#L245'>diag</a>(x)</tt>	Numpy-compatibility method if x is a matrix return its diagonal.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/nlinalg.py#L262'>trace</a>(X)</tt>	Returns the sum of diagonal elements of matrix x.
<tt style='background-color:#E8E8E8;'> tensor.Eigh <a href=' /tensor/nlinalg.py#L369'>grad</a>(inputs,g_outputs)</tt>	The gradient function should return.
<tt style='background-color:#E8E8E8;'> tensor.EighGrad <a href=' /tensor/nlinalg.py#L440'>perform</a>(node,inputs,outputs)</tt>	Implements the "reverse-mode" gradient for the eigensystem of a square matrix.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/nlinalg.py#L542'>qr</a>(a,mode)</tt>	Computes the qr decomposition of a matrix.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/nlinalg.py#L652'>svd</a>(a,full_matrices,compute_uv)</tt>	This function performs the svd on cpu.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/nlinalg.py#L695'>matrix_power</a>(M,n)</tt>	Raise a square matrix to the integer power n.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/nlinalg.py#L773'>tensorinv</a>(a,ind)</tt>	Does not run on gpu theano utilization of numpy.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/nlinalg.py#L831'>tensorsolve</a>(a,b,axes)</tt>	Theano utilization of numpy linalg tensorsolve does not run on gpu!.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/raw_random.py#L303'>_infer_ndim_bcast</a>(ndim,shape)</tt>	Infer the number of dimensions from the shape or the other arguments.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/raw_random.py#L417'>_generate_broadcasting_indices</a>(out_shape)</tt>	Return indices over each shape that broadcast them to match out_shape.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/raw_random.py#L464'>uniform</a>(random_state,size,low,high)</tt>	Sample from a uniform distribution between low and high.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/raw_random.py#L488'>normal</a>(random_state,size,avg,std)</tt>	Sample from a normal distribution centered on avg with the specified standard deviation std.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/raw_random.py#L513'>binomial</a>(random_state,size,n,p)</tt>	Sample n times with probability of success prob for each trial return the number of successes.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/raw_random.py#L544'>random_integers_helper</a>(random_state,low,high,size)</tt>	Helper function to draw random integers.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/raw_random.py#L594'>random_integers</a>(random_state,size,low,high)</tt>	Sample a random integer between low and high both inclusive.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/raw_random.py#L614'>choice_helper</a>(random_state,a,replace,p)</tt>	Helper function to draw random numbers using numpy's choice function.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/raw_random.py#L634'>choice</a>(random_state,size,a,replace)</tt>	Choose values from a with or without replacement a can be a 1-d array.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/raw_random.py#L660'>poisson</a>(random_state,size,lam,ndim)</tt>	Draw samples from a poisson distribution.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/raw_random.py#L689'>permutation_helper</a>(random_state,n,shape)</tt>	Helper function to generate permutations from integers.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/raw_random.py#L725'>permutation</a>(random_state,size,n,ndim)</tt>	Return permutations of the integers between 0 and n-1.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/raw_random.py#L759'>multinomial_helper</a>(random_state,n,pvals,size)</tt>	Helper function drawing from multinomial distributions.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/raw_random.py#L832'>multinomial</a>(random_state,size,n,pvals)</tt>	Sample from one or more multinomial distributions defined by one-dimensional slices in pvals.
<tt style='background-color:#E8E8E8;'> tensor.RandomStreamsBase <a href=' /tensor/raw_random.py#L926'>binomial</a>(size,n,p,ndim)</tt>	Sample n times with probability of success p for each trial and return the number of successes.
<tt style='background-color:#E8E8E8;'> tensor.RandomStreamsBase <a href=' /tensor/raw_random.py#L941'>uniform</a>(size,low,high,ndim)</tt>	Sample a tensor of given size whose element from a uniform distribution between low and high.
<tt style='background-color:#E8E8E8;'> tensor.RandomStreamsBase <a href=' /tensor/raw_random.py#L952'>normal</a>(size,avg,std,ndim)</tt>	Sample from a normal distribution centered on avg with the specified standard deviation std.
<tt style='background-color:#E8E8E8;'> tensor.RandomStreamsBase <a href=' /tensor/raw_random.py#L963'>random_integers</a>(size,low,high,ndim)</tt>	Sample a random integer between low and high both inclusive.
<tt style='background-color:#E8E8E8;'> tensor.RandomStreamsBase <a href=' /tensor/raw_random.py#L975'>choice</a>(size,a,replace,p)</tt>	Choose values from a with or without replacement.
<tt style='background-color:#E8E8E8;'> tensor.RandomStreamsBase <a href=' /tensor/raw_random.py#L989'>poisson</a>(size,lam,ndim,dtype)</tt>	Draw samples from a poisson distribution.
<tt style='background-color:#E8E8E8;'> tensor.RandomStreamsBase <a href=' /tensor/raw_random.py#L1002'>permutation</a>(size,n,ndim,dtype)</tt>	Return permutations of the integers between 0 and n-1.
<tt style='background-color:#E8E8E8;'> tensor.RandomStreamsBase <a href=' /tensor/raw_random.py#L1022'>multinomial</a>(size,n,pvals,ndim)</tt>	Sample n times from a multinomial distribution defined by probabilities pvals as many times as required by size.
<tt style='background-color:#E8E8E8;'> tensor.RandomStreamsBase <a href=' /tensor/raw_random.py#L1041'>shuffle_row_elements</a>(input)</tt>	Return a variable with every row rightmost index shuffled.
<tt style='background-color:#E8E8E8;'> tensor.nnet.BaseCorr3dMM <a href=' /tensor/nnet/corr3d.py#L89'>as_common_dtype</a>(in1,in2)</tt>	Upcast input variables if neccesary.
<tt style='background-color:#E8E8E8;'> tensor.nnet.BaseCorr3dMM <a href=' /tensor/nnet/corr3d.py#L176'>c_code_helper</a>(bottom,weights,top,direction)</tt>	This generates the c code for corr3dmm (direction="forward"), corr3dmm_gradweights (direction="backprop weights"), and.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/conv3d2d.py#L9'>get_diagonal_subtensor_view</a>(x,i0,i1)</tt>	Helper function for diagonalsubtensor and incdiagonalsubtensor.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L534'>conv3d</a>(signals,filters,signals_shape,filters_shape)</tt>	Convolve spatio-temporal filters with a movie.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/conv3d2d.py#L296'>local_inplace_DiagonalSubtensor</a>(node)</tt>	Also work for incdiagonalsubtensor.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L34'>get_conv_output_shape</a>(image_shape,kernel_shape,border_mode,subsample)</tt>	This function compute the output shape of convolution operation.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L86'>get_conv_shape_1axis</a>(image_shape,kernel_shape,border_mode,subsample)</tt>	This function compute the output shape of convolution operation.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L140'>get_conv_gradweights_shape</a>(image_shape,top_shape,border_mode,subsample)</tt>	This function tries to compute the kernel shape of convolution gradweights.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L196'>get_conv_gradweights_shape_1axis</a>(image_shape,top_shape,border_mode,subsample)</tt>	This function tries to compute the image shape of convolution gradweights.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L246'>get_conv_gradinputs_shape</a>(kernel_shape,top_shape,border_mode,subsample)</tt>	This function tries to compute the image shape of convolution gradinputs.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L301'>get_conv_gradinputs_shape_1axis</a>(kernel_shape,top_shape,border_mode,subsample)</tt>	This function tries to compute the image shape of convolution gradinputs.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L359'>check_conv_gradinputs_shape</a>(image_shape,kernel_shape,output_shape,border_mode)</tt>	This function checks if the given image shapes are consistent.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L431'>assert_conv_shape</a>(shape)</tt>	This function adds assert nodes that check if shape is a valid convolution shape.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L473'>assert_shape</a>(x,expected_shape,msg)</tt>	Wraps x in an assert to check its shape.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/conv.py#L40'>conv2d</a>(input,filters,input_shape,filter_shape)</tt>	This function will build the symbolic graph for convolving a mini-batch of a stack of 2d inputs with a set of 2d filters.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L534'>conv3d</a>(input,filters,input_shape,filter_shape)</tt>	This function will build the symbolic graph for convolving a mini-batch of a stack of 3d inputs with a set of 3d filters.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L633'>conv2d_grad_wrt_inputs</a>(output_grad,filters,input_shape,filter_shape)</tt>	Compute conv output gradient w r t its inputs.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L768'>conv3d_grad_wrt_inputs</a>(output_grad,filters,input_shape,filter_shape)</tt>	Compute conv output gradient w r t its inputs.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L903'>conv2d_grad_wrt_weights</a>(input,output_grad,filter_shape,input_shape)</tt>	Compute conv output gradient w r t its weights.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L1030'>conv3d_grad_wrt_weights</a>(input,output_grad,filter_shape,input_shape)</tt>	Compute conv output gradient w r t its weights.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L1156'>bilinear_kernel_2D</a>(ratio,normalize)</tt>	Compute 2d kernel for bilinear upsampling this function builds the 2d kernel that can be used to upsample.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L1186'>bilinear_kernel_1D</a>(ratio,normalize)</tt>	Compute 1d kernel for bilinear upsampling this function builds the 1d kernel that can be used to upsample.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/abstract_conv.py#L1219'>bilinear_upsampling</a>(input,ratio,batch_size,num_input_channels)</tt>	Compute bilinear upsampling this function will build the symbolic graph for upsampling.
<tt style='background-color:#E8E8E8;'> tensor.nnet.BaseAbstractConv <a href=' /tensor/nnet/abstract_conv.py#L1467'>flops</a>(inp,outp)</tt>	Useful with the hack in profiling to print the mflops.
<tt style='background-color:#E8E8E8;'> tensor.nnet.BaseAbstractConv <a href=' /tensor/nnet/abstract_conv.py#L1487'>conv</a>(img,kern,mode,dilation)</tt>	Basic slow python 2d or 3d convolution for debugmode.
<tt style='background-color:#E8E8E8;'> tensor.nnet.SparseBlockGemv <a href=' /tensor/nnet/blocksparse.py#L35'>make_node</a>(o,W,h,inputIdx)</tt>	Compute the dot product of the specified pieces of vectors and matrices.
<tt style='background-color:#E8E8E8;'> tensor.nnet.SparseBlockOuter <a href=' /tensor/nnet/blocksparse.py#L152'>make_node</a>(o,x,y,xIdx)</tt>	Compute the dot product of the specified pieces of vectors and matrices.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/blocksparse.py#L222'>sparse_block_dot</a>(W,h,inputIdx,b)</tt>	Compute the dot product plus bias of the specified pieces of vectors and matrices.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/nnet.py#L741'>local_logsoftmax</a>(node)</tt>	Detect log(softmax x and replace it with logsoftmax x.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/nnet.py#L764'>local_logsoftmax_grad</a>(node)</tt>	Detect log(softmax x )'s grad and replace it with logsoftmax x 's grad.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/nnet.py#L814'>local_softmax_with_bias</a>(node)</tt>	Try to turn softmax(sum_of_stuff) -> softmax_w_bias matrix bias.
<tt style='background-color:#E8E8E8;'> tensor.nnet.CrossentropySoftmaxArgmax1HotWithBias <a href=' /tensor/nnet/nnet.py#L982'>perform</a>(node,input_storage,output_storage)</tt>	The math where x is an input vector and t is a target index softmax x [i] = exp(x[i]) / sum_j(exp(x[j])).
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/nnet.py#L1470'>crossentropy_to_crossentropy_with_softmax_with_bias</a>(fgraph)</tt>	This is a stabilization optimization.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/nnet.py#L1505'>crossentropy_to_crossentropy_with_softmax</a>(fgraph)</tt>	This is a stabilization optimization that is more general than crossentropy_to_crossentropy_with_softmax_with_bias.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/nnet.py#L1614'>_check_rows_is_arange_len_labels</a>(rows,labels)</tt>	Check that 'rows' is the same node as t arange(labels shape[0]).
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/nnet.py#L1938'>local_useless_crossentropy_softmax_1hot_with_bias_dx_alloc</a>(node)</tt>	Replace a crossentropysoftmax1hotwithbiasdx op whose incoming gradient is an alloc of a scalar variable or one that has either broadcastable or.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/nnet.py#L2000'>binary_crossentropy</a>(output,target)</tt>	Compute the crossentropy of binary random variables.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/nnet.py#L2020'>sigmoid_binary_crossentropy</a>(output,target)</tt>	Compute the cross-entropy of binary random variables.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/nnet.py#L2045'>categorical_crossentropy</a>(coding_dist,true_dist)</tt>	Return the cross-entropy between an approximating distribution and a true distribution.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/nnet.py#L2201'>relu</a>(x,alpha)</tt>	Compute the element-wise rectified linear activation function.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/nnet.py#L2246'>h_softmax</a>(x,batch_size,n_outputs,n_classes)</tt>	Two-level hierarchical softmax.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/nnet.py#L2424'>elu</a>(x,alpha)</tt>	Compute the element-wise exponential linear activation function.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/nnet.py#L2486'>confusion_matrix</a>(actual,pred)</tt>	Computes the confusion matrix of given vectors containing actual observations and predicted observations.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/Conv3D.py#L552'>conv3D</a>(V,W,b,d)</tt>	3d "convolution" of multiple filters on a minibatch.
<tt style='background-color:#E8E8E8;'> tensor.nnet.BaseCorrMM <a href=' /tensor/nnet/corr.py#L89'>as_common_dtype</a>(in1,in2)</tt>	Upcast input variables if neccesary.
<tt style='background-color:#E8E8E8;'> tensor.nnet.BaseCorrMM <a href=' /tensor/nnet/corr.py#L176'>c_code_helper</a>(bottom,weights,top,direction)</tt>	This generates the c code for corrmm (direction="forward"), corrmm_gradweights (direction="backprop weights"), and.
<tt style='background-color:#E8E8E8;'> tensor.nnet.ScalarSigmoid <a href=' /tensor/nnet/sigm.py#L131'>gen_graph</a>()</tt>	This method was used to generate the graph sigmoid_prec png in the doc.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/sigm.py#L249'>local_ultra_fast_sigmoid</a>(node)</tt>	When enabled change all sigmoid to ultra_fast_sigmoid.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/sigm.py#L279'>hard_sigmoid</a>(x)</tt>	An approximation of sigmoid.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/sigm.py#L477'>is_exp</a>(var)</tt>	Match a variable with either of the exp x or -exp x patterns.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/sigm.py#L503'>is_mul</a>(var)</tt>	Match a variable with x * y * z *.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/sigm.py#L546'>is_neg</a>(var)</tt>	Match a variable with the -x pattern.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/sigm.py#L588'>local_exp_over_1_plus_exp</a>(node)</tt>	Exp x /(1+exp x -> sigm x.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/sigm.py#L642'>parse_mul_tree</a>(root)</tt>	Parse a tree of multiplications starting at the given root.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/sigm.py#L686'>replace_leaf</a>(arg,leaves,new_leaves,op)</tt>	Attempt to replace a leaf of a multiplication tree.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/sigm.py#L729'>simplify_mul</a>(tree)</tt>	Simplify a multiplication tree.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/sigm.py#L772'>compute_mul</a>(tree)</tt>	Compute the variable that is the output of a multiplication tree.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/sigm.py#L805'>perform_sigm_times_exp</a>(tree,exp_x,exp_minus_x,sigm_x)</tt>	Core processing of the local_sigm_times_exp optimization.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/sigm.py#L925'>local_sigm_times_exp</a>(node)</tt>	Exp x * sigm -x -> sigm x.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/sigm.py#L954'>local_inv_1_plus_exp</a>(node)</tt>	1/(1+exp x -> sigm -x.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/sigm.py#L987'>local_1msigmoid</a>(node)</tt>	1-sigm x -> sigm -x.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/__init__.py#L158'>conv2d_transpose</a>(input,filters,output_shape,filter_shape)</tt>	This function will build the symbolic graph for applying a transposed convolution over a mini-batch of a stack of 2d inputs with a set of 2d.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/opt.py#L38'>local_inplace_sparse_block_gemv</a>(node)</tt>	Sparseblockgemv(inplace=false) -> sparseblockgemv(inplace=true).
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/opt.py#L55'>local_inplace_sparse_block_outer</a>(node)</tt>	Sparseblockouter(inplace=false) -> sparseblockouter(inplace=true).
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/neighbours.py#L488'>images2neibs</a>(ten4,neib_shape,neib_step,mode)</tt>	Function :func images2neibs <theano tensor nnet neighbours images2neibs>.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/neighbours.py#L579'>neibs2images</a>(neibs,neib_shape,original_shape,mode)</tt>	Function :func neibs2images <theano sandbox neighbours neibs2images>.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/conv.py#L40'>conv2d</a>(input,filters,image_shape,filter_shape)</tt>	Deprecated old conv2d interface.
<tt style='background-color:#E8E8E8;'> tensor.nnet.ConvOp <a href=' /tensor/nnet/conv.py#L346'>getOutputShape</a>(inshp,kshp,stride,mode)</tt>	Computes the output dimensions of convolving an image of shape "inshp" with kernels of shape "kshp".
<tt style='background-color:#E8E8E8;'> tensor.nnet.ConvOp <a href=' /tensor/nnet/conv.py#L610'>flops</a>(inputs,outputs)</tt>	Useful with the hack in profiling to print the mflops.
<tt style='background-color:#E8E8E8;'> tensor.nnet.ConvOp <a href=' /tensor/nnet/conv.py#L688'>perform</a>(node,inp,out)</tt>	By default if len img2d shape ==3 we todo.
<tt style='background-color:#E8E8E8;'> tensor.nnet.ConvOp <a href=' /tensor/nnet/conv.py#L998'>use_blas</a>()</tt>	Return true if we will generate code that use gemm.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/conv.py#L1812'>gen_conv_code_unroll_batch_kern</a>(d,unroll_bsize,unroll_ksize)</tt>	C_code for convop that unroll the batch size loop.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/bn.py#L42'>batch_normalization</a>(inputs,gamma,beta,mean)</tt>	This function will build the symbolic graph for applying batch normalization to a set of activations.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/bn.py#L105'>batch_normalization_train</a>(inputs,gamma,beta,axes)</tt>	Performs batch normalization of the given inputs using the mean and variance of the inputs.
<tt style='background-color:#E8E8E8;'> tensor.nnet. <a href=' /tensor/nnet/bn.py#L263'>batch_normalization_test</a>(inputs,gamma,beta,mean)</tt>	Performs batch normalization of the given inputs using the given mean and variance.
<tt style='background-color:#E8E8E8;'> tensor.signal. <a href=' /tensor/signal/pool.py#L20'>max_pool_2d_same_size</a>(input,patch_size)</tt>	Takes as input a 4-d tensor it sets all non maximum values.
<tt style='background-color:#E8E8E8;'> tensor.signal. <a href=' /tensor/signal/pool.py#L41'>pool_2d</a>(input,ws,ignore_border,stride)</tt>	Downscale the input by a specified factor takes as input a n-d tensor where n >= 2.
<tt style='background-color:#E8E8E8;'> tensor.signal. <a href=' /tensor/signal/pool.py#L149'>pool_3d</a>(input,ws,ignore_border,stride)</tt>	Downscale the input by a specified factor takes as input a n-d tensor where n >= 3.
<tt style='background-color:#E8E8E8;'> tensor.signal.Pool <a href=' /tensor/signal/pool.py#L297'>out_shape</a>(imgshape,ws,ignore_border,stride)</tt>	Return the shape of the output from this op for input of given shape and flags.
<tt style='background-color:#E8E8E8;'> tensor.signal.PoolGrad <a href=' /tensor/signal/pool.py#L912'>out_shape</a>(imgshape,ws,ignore_border,stride)</tt>	Return the shape of the output from this op for input of given shape and flags.
<tt style='background-color:#E8E8E8;'> tensor.signal. <a href=' /tensor/signal/conv.py#L21'>conv2d</a>(input,filters,image_shape,filter_shape)</tt>	Signal conv conv2d performs a basic 2d convolution of the input with the.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L97'>as_sparse_variable</a>(x,name)</tt>	Wrapper around sparsevariable constructor to construct a variable with a sparse matrix with the same dtype and.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L137'>as_sparse_or_tensor_variable</a>(x,name)</tt>	Same as as_sparse_variable but if we can't make a sparse variable we try to make a tensor variable.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L170'>sp_ones_like</a>(x)</tt>	Construct a sparse matrix of ones with the same sparsity pattern.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L190'>sp_zeros_like</a>(x)</tt>	Construct a sparse matrix of zeros.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L499'>csm_data</a>(csm)</tt>	Return the data field of the sparse variable.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L507'>csm_indices</a>(csm)</tt>	Return the indices field of the sparse variable.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L515'>csm_indptr</a>(csm)</tt>	Return the indptr field of the sparse variable.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L523'>csm_shape</a>(csm)</tt>	Return the shape field of the sparse variable.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L809'>cast</a>(variable,dtype)</tt>	Cast sparse variable to the desired dtype.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L1569'>col_scale</a>(x,s)</tt>	Scale each columns of a sparse matrix by the corresponding element of a dense vector.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L1600'>row_scale</a>(x,s)</tt>	Scale each row of a sparse matrix by the corresponding element of a dense vector.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L1707'>sp_sum</a>(x,axis,sparse_grad)</tt>	Calculate the sum of a sparse matrix along the specified axis.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L1903'>clean</a>(x)</tt>	Remove explicit zeros from a sparse matrix and re-sort indices.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L2130'>add</a>(x,y)</tt>	Add two matrices at least one of which is sparse.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L2181'>sub</a>(x,y)</tt>	Subtract two matrices at least one of which is sparse.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L2406'>mul</a>(x,y)</tt>	Multiply elementwise two matrices at least one of which is sparse.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L2889'>hstack</a>(blocks,format,dtype)</tt>	Stack sparse matrices horizontally column wise.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L2967'>vstack</a>(blocks,format,dtype)</tt>	Stack sparse matrices vertically row wise.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3084'>structured_sigmoid</a>(x)</tt>	Structured elemwise sigmoid.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3093'>structured_exp</a>(x)</tt>	Structured elemwise exponential.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3102'>structured_log</a>(x)</tt>	Structured elemwise logarithm.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3111'>structured_pow</a>(x,y)</tt>	Structured elemwise power of sparse matrix x by scalar y.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3120'>structured_minimum</a>(x,y)</tt>	Structured elemwise minimum of sparse matrix x by scalar y.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3129'>structured_maximum</a>(x,y)</tt>	Structured elemwise maximum of sparse matrix x by scalar y.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3138'>structured_add</a>(x)</tt>	Structured addition of sparse matrix x and scalar y.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3148'>sin</a>(x)</tt>	Elemwise sinus of x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3157'>tan</a>(x)</tt>	Elemwise tan of x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3166'>arcsin</a>(x)</tt>	Elemwise arcsinus of x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3175'>arctan</a>(x)</tt>	Elemwise arctan of x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3184'>sinh</a>(x)</tt>	Elemwise sinh of x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3193'>arcsinh</a>(x)</tt>	Elemwise arcsinh of x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3202'>tanh</a>(x)</tt>	Elemwise tanh of x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3211'>arctanh</a>(x)</tt>	Elemwise arctanh of x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3220'>rint</a>(x)</tt>	Elemwise round half to even of x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3233'>sgn</a>(x)</tt>	Elemwise signe of x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3242'>ceil</a>(x)</tt>	Elemwise ceiling of x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3251'>floor</a>(x)</tt>	Elemwise floor of x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3260'>log1p</a>(x)</tt>	Elemwise log(1 + x).
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3269'>expm1</a>(x)</tt>	Elemwise e^x - 1.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3278'>deg2rad</a>(x)</tt>	Elemwise degree to radian.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3287'>rad2deg</a>(x)</tt>	Elemwise radian to degree.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3305'>sqr</a>(x)</tt>	Elemwise x * x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3314'>sqrt</a>(x)</tt>	Elemwise square root of x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3323'>conj</a>(x)</tt>	Elemwise complex conjugate of x.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3421'>true_dot</a>(x,y,grad_preserves_dense)</tt>	Operation for efficiently calculating the dot product when one or all operands are sparse.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L3552'>structured_dot</a>(x,y)</tt>	Structured dot is like dot except that only the gradient wrt non-zero elements of the sparse matrix.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/basic.py#L4066'>dot</a>(x,y)</tt>	Operation for efficiently calculating the dot product when one or all operands is sparse.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/opt.py#L21'>local_csm_properties_csm</a>(node)</tt>	If we find csm_properties(csm(*args)), then we can replace that with the *args directly.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/opt.py#L42'>local_inplace_remove0</a>(node)</tt>	Optimization to insert inplace versions of remove0.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/opt.py#L178'>local_inplace_addsd_ccode</a>(node)</tt>	Optimization to insert inplace versions of addsd.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/opt.py#L209'>local_addsd_ccode</a>(node)</tt>	Convert addsd to faster addsd_ccode.
<tt style='background-color:#E8E8E8;'> sparse.StructuredDotCSR <a href=' /sparse/opt.py#L471'>c_code</a>(node,name,inputs,outputs)</tt>	C-implementation of the dot product of the sparse matrix a and matrix b.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/opt.py#L910'>local_usmm_csx</a>(node)</tt>	Usmm -> usmm_csc_dense.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/opt.py#L1063'>local_csm_grad_c</a>(node)</tt>	Csm_grad none -> csm_grad_c.
<tt style='background-color:#E8E8E8;'> sparse. <a href=' /sparse/sharedvar.py#L13'>sparse_constructor</a>(value,name,strict,allow_downcast)</tt>	Sharedvariable constructor for sparsetype.
<tt style='background-color:#E8E8E8;'> sparse.sandbox.ConvolutionIndices <a href=' /sparse/sandbox/sp.py#L53'>evaluate</a>(inshp,kshp,strides,nkern)</tt>	Build a sparse matrix which can be used for performing.
<tt style='background-color:#E8E8E8;'> sparse.sandbox. <a href=' /sparse/sandbox/sp.py#L266'>convolve</a>(kerns,kshp,nkern,images)</tt>	Convolution implementation by sparse matrix multiplication.
<tt style='background-color:#E8E8E8;'> sparse.sandbox. <a href=' /sparse/sandbox/sp.py#L365'>max_pool</a>(images,imgshp,maxpoolshp)</tt>	Implements a max pooling layer takes as input a 2d tensor of shape batch_size x img_size and.
<tt style='background-color:#E8E8E8;'> d3viz.PyDotFormatter <a href=' /d3viz/formatting.py#L41'>__init__</a>(compact)</tt>	Construct pydotformatter object.
<tt style='background-color:#E8E8E8;'> d3viz.PyDotFormatter <a href=' /d3viz/formatting.py#L66'>__add_node</a>(node)</tt>	Add new node to node list and return unique id.
<tt style='background-color:#E8E8E8;'> d3viz.PyDotFormatter <a href=' /d3viz/formatting.py#L84'>__node_id</a>(node)</tt>	Return unique node id.
<tt style='background-color:#E8E8E8;'> d3viz.PyDotFormatter <a href=' /d3viz/formatting.py#L102'>__call__</a>(fct,graph)</tt>	Create pydot graph from function.
<tt style='background-color:#E8E8E8;'> d3viz. <a href=' /d3viz/formatting.py#L262'>var_label</a>(var,precision)</tt>	Return label of variable node.
<tt style='background-color:#E8E8E8;'> d3viz. <a href=' /d3viz/formatting.py#L282'>var_tag</a>(var)</tt>	Parse tag attribute of variable node.
<tt style='background-color:#E8E8E8;'> d3viz. <a href=' /d3viz/formatting.py#L299'>apply_label</a>(node)</tt>	Return label of apply node.
<tt style='background-color:#E8E8E8;'> d3viz. <a href=' /d3viz/formatting.py#L304'>apply_profile</a>(node,profile)</tt>	Return apply profiling informaton.
<tt style='background-color:#E8E8E8;'> d3viz. <a href=' /d3viz/formatting.py#L313'>broadcastable_to_str</a>(b)</tt>	Return string representation of broadcastable.
<tt style='background-color:#E8E8E8;'> d3viz. <a href=' /d3viz/formatting.py#L327'>dtype_to_char</a>(dtype)</tt>	Return character that represents data type.
<tt style='background-color:#E8E8E8;'> d3viz. <a href=' /d3viz/formatting.py#L344'>type_to_str</a>(t)</tt>	Return str of variable type.
<tt style='background-color:#E8E8E8;'> d3viz. <a href=' /d3viz/formatting.py#L356'>dict_to_pdnode</a>(d)</tt>	Create pydot node from dict.
<tt style='background-color:#E8E8E8;'> d3viz. <a href=' /d3viz/d3viz.py#L18'>replace_patterns</a>(x,replace)</tt>	Replace replace in string x.
<tt style='background-color:#E8E8E8;'> d3viz. <a href=' /d3viz/d3viz.py#L34'>safe_json</a>(obj)</tt>	Encode obj to json so that it can be embedded safely inside html.
<tt style='background-color:#E8E8E8;'> d3viz. <a href=' /d3viz/d3viz.py#L45'>d3viz</a>(fct,outfile,copy_deps)</tt>	Create html file with dynamic visualizing of a theano function graph.
<tt style='background-color:#E8E8E8;'> d3viz. <a href=' /d3viz/d3viz.py#L119'>d3write</a>(fct,path)</tt>	Convert theano graph to pydot graph and write to dot file.
<tt style='background-color:#E8E8E8;'> sandbox.FFT <a href=' /sandbox/fourier.py#L66'>make_node</a>(frames,n,axis)</tt>	Compute an n-point fft of frames along given axis.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/fourier.py#L121'>dct_matrix</a>(rows,cols,unitary)</tt>	Return a rows x cols matrix implementing a discrete cosine transform.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/rng_mrg.py#L34'>multMatVect</a>(v,A,m1,B)</tt>	Multiply the first half of v by a with a modulo of m1 and the second half by b with a modulo of m2.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/rng_mrg.py#L555'>guess_n_streams</a>(size,warn)</tt>	Return a guess at a good number of streams.
<tt style='background-color:#E8E8E8;'> sandbox.MRG_RandomStreams <a href=' /sandbox/rng_mrg.py#L657'>seed</a>(seed)</tt>	Re-initialize each random stream.
<tt style='background-color:#E8E8E8;'> sandbox.MRG_RandomStreams <a href=' /sandbox/rng_mrg.py#L687'>inc_rstate</a>()</tt>	Update self rstate to be skipped 2^134 steps forward to the next stream.
<tt style='background-color:#E8E8E8;'> sandbox.MRG_RandomStreams <a href=' /sandbox/rng_mrg.py#L697'>get_substream_rstates</a>(n_streams,dtype,inc_rstate)</tt>	Initialize a matrix in which each row is a mrg stream state and they are spaced by 2**72 samples.
<tt style='background-color:#E8E8E8;'> sandbox.MRG_RandomStreams <a href=' /sandbox/rng_mrg.py#L747'>uniform</a>(size,low,high,ndim)</tt>	Sample a tensor of given size whose element from a uniform distribution between low and high.
<tt style='background-color:#E8E8E8;'> sandbox.MRG_RandomStreams <a href=' /sandbox/rng_mrg.py#L835'>multinomial</a>(size,n,pvals,ndim)</tt>	Sample n (n needs to be >= 1 default 1) times from a multinomial distribution defined by probabilities pvals.
<tt style='background-color:#E8E8E8;'> sandbox.MRG_RandomStreams <a href=' /sandbox/rng_mrg.py#L886'>choice</a>(size,a,replace,p)</tt>	Sample size times from a multinomial distribution defined by probabilities p, and returns the indices of the sampled elements.
<tt style='background-color:#E8E8E8;'> sandbox.linalg. <a href=' /sandbox/linalg/ops.py#L201'>psd</a>(v)</tt>	Apply a hint that the variable v is positive semi-definite i e.
<tt style='background-color:#E8E8E8;'> sandbox.linalg. <a href=' /sandbox/linalg/ops.py#L262'>tag_solve_triangular</a>(node)</tt>	If a general solve() is applied to the output of a cholesky op then replace it with a triangular solve.
<tt style='background-color:#E8E8E8;'> sandbox.linalg. <a href=' /sandbox/linalg/ops.py#L317'>local_det_chol</a>(node)</tt>	If we have det x and there is already an l=cholesky x floating around then we can use prod(diag l to get the determinant.
<tt style='background-color:#E8E8E8;'> sandbox.linalg. <a href=' /sandbox/linalg/ops.py#L367'>spectral_radius_bound</a>(X,log2_exponent)</tt>	Returns upper bound on the largest eigenvalue of square symmetrix matrix x.
<tt style='background-color:#E8E8E8;'> typed_list.Index <a href=' /typed_list/basic.py#L493'>perform</a>(node,inputs,outputs)</tt>	Inelegant workaround for valueerror the truth value of an array with more than one element is ambiguous.
<tt style='background-color:#E8E8E8;'> typed_list.Count <a href=' /typed_list/basic.py#L521'>perform</a>(node,inputs,outputs)</tt>	Inelegant workaround for valueerror the truth value of an array with more than one element is ambiguous.
<tt style='background-color:#E8E8E8;'> typed_list.TypedListType <a href=' /typed_list/type.py#L57'>__eq__</a>(other)</tt>	Two lists are equal if they contain the same type.
<tt style='background-color:#E8E8E8;'> typed_list.TypedListType <a href=' /typed_list/type.py#L70'>get_depth</a>()</tt>	Utilitary function to get the 0 based level of the list.
