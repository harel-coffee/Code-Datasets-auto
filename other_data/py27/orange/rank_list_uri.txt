<tt style='background-color:#E8E8E8;'> classification.EllipticEnvelopeClassifier <a href=' /classification/elliptic_envelope.py#L10'>mahalanobis</a>(observations)</tt>	Computes squared mahalanobis distances of given observations.
<tt style='background-color:#E8E8E8;'> classification.SimpleTreeModel <a href=' /classification/simple_tree.py#L252'>to_string</a>(node,level)</tt>	Return a text-based representation of the tree.
<tt style='background-color:#E8E8E8;'> classification. <a href=' /classification/rules.py#L27'>argmaxrnd</a>(a,random_seed)</tt>	Find the index of the maximum value for a given 1-d numpy array.
<tt style='background-color:#E8E8E8;'> classification. <a href=' /classification/rules.py#L70'>entropy</a>(x)</tt>	Calculate information-theoretic entropy measure for a given distribution.
<tt style='background-color:#E8E8E8;'> classification. <a href=' /classification/rules.py#L91'>likelihood_ratio_statistic</a>(x,y)</tt>	Calculate likelihood ratio statistic for given distributions.
<tt style='background-color:#E8E8E8;'> classification. <a href=' /classification/rules.py#L114'>get_dist</a>(Y,W,domain)</tt>	Determine the class distribution for a given array of classifications.
<tt style='background-color:#E8E8E8;'> classification. <a href=' /classification/rules.py#L137'>hash_dist</a>(x)</tt>	For a given distribution calculate a hash value that can be used to seed the rng.
<tt style='background-color:#E8E8E8;'> classification.Evaluator <a href=' /classification/rules.py#L157'>evaluate_rule</a>(rule)</tt>	Characterise a search heuristic.
<tt style='background-color:#E8E8E8;'> classification.Validator <a href=' /classification/rules.py#L234'>validate_rule</a>(rule)</tt>	Characterise a heuristic to avoid the over-fitting of noisy data and to reduce computation time.
<tt style='background-color:#E8E8E8;'> classification.SearchAlgorithm <a href=' /classification/rules.py#L322'>select_candidates</a>(rules)</tt>	Select candidate rules to be further specialised.
<tt style='background-color:#E8E8E8;'> classification.SearchAlgorithm <a href=' /classification/rules.py#L340'>filter_rules</a>(rules)</tt>	Filter rules to be considered in the next iteration.
<tt style='background-color:#E8E8E8;'> classification.SearchStrategy <a href=' /classification/rules.py#L373'>initialise_rule</a>(X,Y,W,target_class)</tt>	Develop a starting rule.
<tt style='background-color:#E8E8E8;'> classification.Selector <a href=' /classification/rules.py#L580'>filter_instance</a>(x)</tt>	Filter a single instance.
<tt style='background-color:#E8E8E8;'> classification.Selector <a href=' /classification/rules.py#L596'>filter_data</a>(X)</tt>	Filter several instances concurrently.
<tt style='background-color:#E8E8E8;'> classification.Rule <a href=' /classification/rules.py#L623'>__init__</a>(selectors,parent_rule,domain,initial_class_dist)</tt>	Initialise a rule.
<tt style='background-color:#E8E8E8;'> classification.Rule <a href=' /classification/rules.py#L670'>filter_and_store</a>(X,Y,W,target_class)</tt>	Apply data and target class to a rule.
<tt style='background-color:#E8E8E8;'> classification.Rule <a href=' /classification/rules.py#L697'>is_valid</a>()</tt>	Return true if the rule passes the general validator's requirements.
<tt style='background-color:#E8E8E8;'> classification.Rule <a href=' /classification/rules.py#L704'>is_significant</a>()</tt>	Return true if the rule passes the significance validator's requirements is significant in regard to its parent.
<tt style='background-color:#E8E8E8;'> classification.Rule <a href=' /classification/rules.py#L711'>do_evaluate</a>()</tt>	Evaluate the rule's quality and complexity.
<tt style='background-color:#E8E8E8;'> classification.Rule <a href=' /classification/rules.py#L718'>evaluate_instance</a>(x)</tt>	Evaluate a single instance.
<tt style='background-color:#E8E8E8;'> classification.Rule <a href=' /classification/rules.py#L734'>evaluate_data</a>(X)</tt>	Evaluate several instances concurrently.
<tt style='background-color:#E8E8E8;'> classification.Rule <a href=' /classification/rules.py#L753'>create_model</a>()</tt>	Determine prediction class probabilities.
<tt style='background-color:#E8E8E8;'> classification.Rule <a href=' /classification/rules.py#L765'>seed</a>()</tt>	Forward relevant information to develop new rules.
<tt style='background-color:#E8E8E8;'> classification.RuleHunter <a href=' /classification/rules.py#L816'>__call__</a>(X,Y,W,target_class)</tt>	Return a single rule.
<tt style='background-color:#E8E8E8;'> classification._RuleLearner <a href=' /classification/rules.py#L906'>__init__</a>(preprocessors,base_rules)</tt>	Constrain the search algorithm with a list of base rules.
<tt style='background-color:#E8E8E8;'> classification._RuleLearner <a href=' /classification/rules.py#L939'>find_rules</a>(X,Y,W,target_class)</tt>	The top-level control procedure of the separate-and-conquer algorithm.
<tt style='background-color:#E8E8E8;'> classification._RuleLearner <a href=' /classification/rules.py#L1052'>exclusive_cover_and_remove</a>(X,Y,W,new_rule)</tt>	Cover and remove.
<tt style='background-color:#E8E8E8;'> classification._RuleLearner <a href=' /classification/rules.py#L1079'>weighted_cover_and_remove</a>(X,Y,W,new_rule)</tt>	Cover and remove.
<tt style='background-color:#E8E8E8;'> classification._RuleLearner <a href=' /classification/rules.py#L1112'>generate_default_rule</a>(X,Y,W,domain)</tt>	Generate a default rule which mimics a majority classifier.
<tt style='background-color:#E8E8E8;'> classification._RuleClassifier <a href=' /classification/rules.py#L1160'>ordered_predict</a>(X)</tt>	Following a decision list for each instance rules are tried in order until one fires.
<tt style='background-color:#E8E8E8;'> classification._RuleClassifier <a href=' /classification/rules.py#L1187'>unordered_predict</a>(X)</tt>	Following an unordered set of rules for each instance all rules are tried and those that fire are collected.
<tt style='background-color:#E8E8E8;'> classification.CN2Classifier <a href=' /classification/rules.py#L1278'>predict</a>(X)</tt>	Following a decision list for each instance rules are tried in order until one fires.
<tt style='background-color:#E8E8E8;'> classification.CN2UnorderedClassifier <a href=' /classification/rules.py#L1333'>predict</a>(X)</tt>	Following an unordered set of rules for each instance all rules are tried and those that fire are collected.
<tt style='background-color:#E8E8E8;'> classification.CN2SDClassifier <a href=' /classification/rules.py#L1399'>predict</a>(X)</tt>	In contrast to the classic cn2 algorithm all applicable rules are taken into account even though cn2sd induces ordered rules.
<tt style='background-color:#E8E8E8;'> classification.CN2SDUnorderedClassifier <a href=' /classification/rules.py#L1470'>predict</a>(X)</tt>	Following an unordered set of rules for each instance all rules are tried and those that fire are collected.
<tt style='background-color:#E8E8E8;'> classification.ConstantModel <a href=' /classification/majority.py#L48'>__init__</a>(dist,unif_maj)</tt>	Constructs orange classification majoritymodel that always.
<tt style='background-color:#E8E8E8;'> classification.ConstantModel <a href=' /classification/majority.py#L66'>predict</a>(X)</tt>	Returns majority class for each given instance in x.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/resources.py#L12'>package_dirname</a>(package)</tt>	Return the directory path where package is located.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/resources.py#L23'>package</a>(qualified_name)</tt>	Return the enclosing package name where qualified_name is located.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/resources.py#L65'>search_paths_from_description</a>(desc)</tt>	Return the search paths for the category/widgetdescription.
<tt style='background-color:#E8E8E8;'> canvas.resource_loader <a href=' /canvas/resources.py#L86'>from_description</a>(cls,desc)</tt>	Construct an resource from a widget or category description.
<tt style='background-color:#E8E8E8;'> canvas.resource_loader <a href=' /canvas/resources.py#L95'>add_search_paths</a>(paths)</tt>	Add paths to the list of search paths.
<tt style='background-color:#E8E8E8;'> canvas.resource_loader <a href=' /canvas/resources.py#L100'>search_paths</a>()</tt>	Return a list of all search paths.
<tt style='background-color:#E8E8E8;'> canvas.resource_loader <a href=' /canvas/resources.py#L105'>split_prefix</a>(path)</tt>	Split prefixed path.
<tt style='background-color:#E8E8E8;'> canvas.resource_loader <a href=' /canvas/resources.py#L118'>find</a>(name)</tt>	Find a resource matching name.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/__main__.py#L65'>fix_win_pythonw_std_stream</a>()</tt>	On windows when running without a console using pythonw exe the.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/config.py#L25'>init</a>()</tt>	Initialize the qcoreapplication organizationdomain applicationname.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/config.py#L133'>data_dir</a>()</tt>	Return the application data directory if the directory path.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/config.py#L146'>cache_dir</a>()</tt>	Return the application cache directory if the directory path.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/config.py#L159'>log_dir</a>()</tt>	Return the application log directory.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/config.py#L175'>widget_settings_dir</a>()</tt>	Return the widget settings directory.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/config.py#L198'>recent_schemes</a>()</tt>	Return a list of recently accessed schemes.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/config.py#L214'>save_recent_scheme_list</a>(scheme_list)</tt>	Save the list of recently accessed schemes.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/config.py#L232'>default_entry_point</a>()</tt>	Return a default orange widgets entry point for loading.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/config.py#L244'>widgets_entry_points</a>()</tt>	Return an entrypoint iterator for all 'orange widget' entry.
<tt style='background-color:#E8E8E8;'> canvas. <a href=' /canvas/config.py#L292'>application_icon</a>()</tt>	Return the main application icon.
<tt style='background-color:#E8E8E8;'> canvas.document.UserInteraction <a href=' /canvas/document/interactions.py#L91'>start</a>()</tt>	Start the interaction this is called by the :class canvasscene when.
<tt style='background-color:#E8E8E8;'> canvas.document.UserInteraction <a href=' /canvas/document/interactions.py#L101'>end</a>()</tt>	Finish the interaction restore any leftover state in this method.
<tt style='background-color:#E8E8E8;'> canvas.document.UserInteraction <a href=' /canvas/document/interactions.py#L147'>cancelReason</a>()</tt>	Return the reason the interaction was canceled.
<tt style='background-color:#E8E8E8;'> canvas.document.UserInteraction <a href=' /canvas/document/interactions.py#L135'>isFinished</a>()</tt>	Is the interaction finished.
<tt style='background-color:#E8E8E8;'> canvas.document.UserInteraction <a href=' /canvas/document/interactions.py#L141'>isCanceled</a>()</tt>	Was the interaction canceled.
<tt style='background-color:#E8E8E8;'> canvas.document.UserInteraction <a href=' /canvas/document/interactions.py#L153'>mousePressEvent</a>(event)</tt>	Handle a qgraphicsscene mousepressevent.
<tt style='background-color:#E8E8E8;'> canvas.document.UserInteraction <a href=' /canvas/document/interactions.py#L159'>mouseMoveEvent</a>(event)</tt>	Handle a graphicsscene mousemoveevent.
<tt style='background-color:#E8E8E8;'> canvas.document.UserInteraction <a href=' /canvas/document/interactions.py#L165'>mouseReleaseEvent</a>(event)</tt>	Handle a qgraphicsscene mousereleaseevent.
<tt style='background-color:#E8E8E8;'> canvas.document.UserInteraction <a href=' /canvas/document/interactions.py#L171'>mouseDoubleClickEvent</a>(event)</tt>	Handle a qgraphicsscene mousedoubleclickevent.
<tt style='background-color:#E8E8E8;'> canvas.document.UserInteraction <a href=' /canvas/document/interactions.py#L177'>keyPressEvent</a>(event)</tt>	Handle a qgraphicsscene keypressevent.
<tt style='background-color:#E8E8E8;'> canvas.document.UserInteraction <a href=' /canvas/document/interactions.py#L185'>keyReleaseEvent</a>(event)</tt>	Handle a qgraphicsscene keypressevent.
<tt style='background-color:#E8E8E8;'> canvas.document. <a href=' /canvas/document/interactions.py#L200'>reversed_arguments</a>(func)</tt>	Return a function with reversed argument order.
<tt style='background-color:#E8E8E8;'> canvas.document.NewLinkAction <a href=' /canvas/document/interactions.py#L241'>remove_tmp_anchor</a>()</tt>	Remove a temporary anchor point from the current target item.
<tt style='background-color:#E8E8E8;'> canvas.document.NewLinkAction <a href=' /canvas/document/interactions.py#L251'>create_tmp_anchor</a>(item)</tt>	Create a new tmp anchor at the item (:class nodeitem).
<tt style='background-color:#E8E8E8;'> canvas.document.NewLinkAction <a href=' /canvas/document/interactions.py#L261'>can_connect</a>(target_item)</tt>	Is the connection between self from_item (item where the drag.
<tt style='background-color:#E8E8E8;'> canvas.document.NewLinkAction <a href=' /canvas/document/interactions.py#L275'>set_link_target_anchor</a>(anchor)</tt>	Set the temp line target anchor.
<tt style='background-color:#E8E8E8;'> canvas.document.NewLinkAction <a href=' /canvas/document/interactions.py#L284'>target_node_item_at</a>(pos)</tt>	Return a suitable :class nodeitem at position pos on which a link can be dropped.
<tt style='background-color:#E8E8E8;'> canvas.document.NewLinkAction <a href=' /canvas/document/interactions.py#L438'>create_new</a>(event)</tt>	Create and return a new node with a quickmenu.
<tt style='background-color:#E8E8E8;'> canvas.document.NewLinkAction <a href=' /canvas/document/interactions.py#L482'>connect_nodes</a>(source_node,sink_node)</tt>	Connect source_node to sink_node if there are more then one.
<tt style='background-color:#E8E8E8;'> canvas.document.NewLinkAction <a href=' /canvas/document/interactions.py#L588'>edit_links</a>(source_node,sink_node,initial_links)</tt>	Show and execute the editlinksdialog.
<tt style='background-color:#E8E8E8;'> canvas.document.NewLinkAction <a href=' /canvas/document/interactions.py#L638'>cleanup</a>()</tt>	Cleanup all temporary items in the scene that are left.
<tt style='background-color:#E8E8E8;'> canvas.document. <a href=' /canvas/document/interactions.py#L660'>edit_links</a>(scheme,source_node,sink_node,initial_links)</tt>	Show and execute the editlinksdialog.
<tt style='background-color:#E8E8E8;'> canvas.document. <a href=' /canvas/document/interactions.py#L699'>add_links_plan</a>(scheme,links,force_replace)</tt>	Return a plan for adding a list of links to the scheme.
<tt style='background-color:#E8E8E8;'> canvas.document. <a href=' /canvas/document/interactions.py#L714'>conflicting_single_link</a>(scheme,link)</tt>	Find and return an existing link in scheme connected to the same input channel as link if the channel has the 'single' flag.
<tt style='background-color:#E8E8E8;'> canvas.document.NewNodeAction <a href=' /canvas/document/interactions.py#L764'>create_new</a>(pos,search_text)</tt>	Create a new widget with a quickmenu at pos in screen coordinates.
<tt style='background-color:#E8E8E8;'> canvas.document.RectangleSelectionAction <a href=' /canvas/document/interactions.py#L853'>update_selection</a>(event)</tt>	Update the selection rectangle from a qgraphicsscenemouseevent event instance.
<tt style='background-color:#E8E8E8;'> canvas.document.RectangleSelectionAction <a href=' /canvas/document/interactions.py#L904'>viewport_rect</a>()</tt>	Return the bounding rect of the document's viewport on the scene.
<tt style='background-color:#E8E8E8;'> canvas.document.RectangleSelectionAction <a href=' /canvas/document/interactions.py#L913'>_bound_selection_rect</a>(rect)</tt>	Bound the selection rect to a sensible size.
<tt style='background-color:#E8E8E8;'> canvas.document.EditNodeLinksAction <a href=' /canvas/document/interactions.py#L943'>edit_links</a>(initial_links)</tt>	Show and execute the editlinksdialog.
<tt style='background-color:#E8E8E8;'> canvas.document. <a href=' /canvas/document/interactions.py#L1013'>point_to_tuple</a>(point)</tt>	Convert a qpointf into a x y tuple.
<tt style='background-color:#E8E8E8;'> canvas.document.NewArrowAnnotation <a href=' /canvas/document/interactions.py#L1046'>setColor</a>(color)</tt>	Set the color for the new arrow.
<tt style='background-color:#E8E8E8;'> canvas.document. <a href=' /canvas/document/interactions.py#L1112'>rect_to_tuple</a>(rect)</tt>	Convert a qrectf into a x y width height tuple.
<tt style='background-color:#E8E8E8;'> canvas.document.NewTextAnnotation <a href=' /canvas/document/interactions.py#L1150'>createNewAnnotation</a>(rect)</tt>	Create a new textannotation at with rect as the geometry.
<tt style='background-color:#E8E8E8;'> canvas.document.NewTextAnnotation <a href=' /canvas/document/interactions.py#L1219'>defaultTextGeometry</a>(point)</tt>	Return the default text geometry used in case the user single.
<tt style='background-color:#E8E8E8;'> canvas.document.ResizeTextAnnotation <a href=' /canvas/document/interactions.py#L1293'>commit</a>()</tt>	Commit the current item geometry state to the document.
<tt style='background-color:#E8E8E8;'> canvas.document.ResizeArrowAnnotation <a href=' /canvas/document/interactions.py#L1381'>commit</a>()</tt>	Commit the current geometry of the item to the document.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L382'>__setupScene</a>(scene)</tt>	Set up a :class canvasscene instance for use by the editor.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L429'>__teardownScene</a>(scene)</tt>	Tear down an instance of :class canvasscene that was used by the editor.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L463'>toolbarActions</a>()</tt>	Return a list of actions that can be inserted into a toolbar.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L479'>menuBarActions</a>()</tt>	Return a list of actions that can be inserted into a qmenubar.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L486'>isModified</a>()</tt>	Is the document is a modified state.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L492'>setModified</a>(modified)</tt>	Set the document modified state.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L507'>isModifiedStrict</a>()</tt>	Is the document modified.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L526'>setQuickMenuTriggers</a>(triggers)</tt>	Set quick menu trigger flags.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L542'>quickMenuTriggers</a>()</tt>	Return quick menu trigger flags.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L548'>setChannelNamesVisible</a>(visible)</tt>	Set channel names visibility state when enabled the links.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L559'>channelNamesVisible</a>()</tt>	Return the channel name visibility state.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L565'>setNodeAnimationEnabled</a>(enabled)</tt>	Set the node item animation enabled state.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L573'>nodeAnimationEnabled</a>()</tt>	Return the node item animation enabled state.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L579'>undoStack</a>()</tt>	Return the undo stack.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L585'>setPath</a>(path)</tt>	Set the path associated with the current scheme.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L597'>path</a>()</tt>	Return the path associated with the scheme.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L603'>setScheme</a>(scheme)</tt>	Set the :class ~ scheme scheme instance to display/edit.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L646'>scheme</a>()</tt>	Return the :class ~ scheme scheme edited by the widget.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L652'>scene</a>()</tt>	Return the :class qgraphicsscene instance used to display the current scheme.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L660'>view</a>()</tt>	Return the :class qgraphicsview instance used to display the current scene.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L678'>quickMenu</a>()</tt>	Return a :class ~ quickmenu quickmenu popup menu instance for.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L691'>setTitle</a>(title)</tt>	Set the scheme title.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L699'>setDescription</a>(description)</tt>	Set the scheme description string.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L707'>addNode</a>(node)</tt>	Add a new node (:class schemenode) to the document.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L714'>createNewNode</a>(description,title,position)</tt>	Create a new :class schemenode and add it to the document.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L725'>newNodeHelper</a>(description,title,position)</tt>	Return a new initialized :class schemenode if title.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L740'>enumerateTitle</a>(title)</tt>	Enumerate a title string i e add a number in parentheses so.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L755'>nextPosition</a>()</tt>	Return the next default node position as a x y tuple this is.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L769'>removeNode</a>(node)</tt>	Remove a node (:class schemenode) from the scheme.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L776'>renameNode</a>(node,title)</tt>	Rename a node (:class schemenode) to title.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L783'>addLink</a>(link)</tt>	Add a link (:class schemelink) to the scheme.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L790'>removeLink</a>(link)</tt>	Remove a link (:class schemelink) from the scheme.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L797'>addAnnotation</a>(annotation)</tt>	Add annotation (:class baseschemeannotation) to the scheme.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L804'>removeAnnotation</a>(annotation)</tt>	Remove annotation (:class baseschemeannotation) from the scheme.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L811'>removeSelected</a>()</tt>	Remove all selected items in the scheme.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L833'>selectAll</a>()</tt>	Select all selectable items in the scheme.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L841'>toggleZoom</a>(zoom)</tt>	Toggle view zoom if zoom is true the scheme is displayed.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L853'>alignToGrid</a>()</tt>	Align nodes to a grid.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L883'>focusNode</a>()</tt>	Return the current focused :class schemenode or none if no.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L900'>selectedNodes</a>()</tt>	Return all selected :class schemenode items.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L907'>selectedAnnotations</a>()</tt>	Return all selected :class baseschemeannotation items.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L914'>openSelected</a>()</tt>	Open show and raise all widgets for the current selected nodes.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L922'>editNodeTitle</a>(node)</tt>	Edit rename the node's title opens an input dialog.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L1190'>_setUserInteractionHandler</a>(handler)</tt>	Helper method for setting the user interaction handlers.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L1322'>__onItemFocusedIn</a>(item)</tt>	Annotation item has gained focus.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L1329'>__onItemFocusedOut</a>(item)</tt>	Annotation item lost focus.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L1335'>__onEditingFinished</a>(item)</tt>	Text annotation editing has finished.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L1446'>__onRenameAction</a>()</tt>	Rename was requested for the selected widget.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L1454'>__onHelpAction</a>()</tt>	Help was requested for the selected widget.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L1467'>__showHelpFor</a>(help_url)</tt>	Show help for an "help" url.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L1480'>__toggleLinkEnabled</a>(enabled)</tt>	Link 'enabled' state was toggled in the context menu.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L1491'>__linkRemove</a>()</tt>	Remove link was requested from the context menu.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L1498'>__linkReset</a>()</tt>	Link reset from the context menu was requested.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L1509'>__duplicateSelected</a>()</tt>	Duplicate currently selected nodes.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L1569'>__startControlPointEdit</a>(item)</tt>	Start a control point edit interaction for item.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L1586'>__endControlPointEdit</a>()</tt>	End the current control point edit interaction.
<tt style='background-color:#E8E8E8;'> canvas.document.SchemeEditWidget <a href=' /canvas/document/schemeedit.py#L1599'>__updateFont</a>()</tt>	Update the font for the "text size' menu and the default font used in the canvasscene.
<tt style='background-color:#E8E8E8;'> canvas.document. <a href=' /canvas/document/schemeedit.py#L1636'>mouse_drag_distance</a>(event,button)</tt>	Return the manhattan distance between the mouse position when the button was pressed and the current mouse position.
<tt style='background-color:#E8E8E8;'> canvas.document. <a href=' /canvas/document/schemeedit.py#L1646'>set_enabled_all</a>(objects,enable)</tt>	Set enabled properties on all objects (objects with setenabled method).
<tt style='background-color:#E8E8E8;'> canvas.document. <a href=' /canvas/document/schemeedit.py#L1658'>is_printable</a>(unichar)</tt>	Return true if the unicode character unichar is a printable character.
<tt style='background-color:#E8E8E8;'> canvas.document.EditLinksDialog <a href=' /canvas/document/editlinksdialog.py#L91'>setNodes</a>(source_node,sink_node)</tt>	Set the source/sink nodes (:class schemenode instances).
<tt style='background-color:#E8E8E8;'> canvas.document.EditLinksDialog <a href=' /canvas/document/editlinksdialog.py#L101'>setLinks</a>(links)</tt>	Set a list of links to display between the source and sink nodes.
<tt style='background-color:#E8E8E8;'> canvas.document.EditLinksDialog <a href=' /canvas/document/editlinksdialog.py#L111'>links</a>()</tt>	Return the links between the source and sink node.
<tt style='background-color:#E8E8E8;'> canvas.document. <a href=' /canvas/document/editlinksdialog.py#L124'>find_item_at</a>(scene,pos,order,type)</tt>	Find an object in a :class qgraphicsscene scene at pos.
<tt style='background-color:#E8E8E8;'> canvas.document.LinksEditWidget <a href=' /canvas/document/editlinksdialog.py#L195'>removeItems</a>(items)</tt>	Remove child items from the widget and scene.
<tt style='background-color:#E8E8E8;'> canvas.document.LinksEditWidget <a href=' /canvas/document/editlinksdialog.py#L205'>clear</a>()</tt>	Clear the editor state source and sink nodes channels.
<tt style='background-color:#E8E8E8;'> canvas.document.LinksEditWidget <a href=' /canvas/document/editlinksdialog.py#L216'>setNodes</a>(source,sink)</tt>	Set the source/sink nodes (:class schemenode instances) between which to edit the links.
<tt style='background-color:#E8E8E8;'> canvas.document.LinksEditWidget <a href=' /canvas/document/editlinksdialog.py#L231'>setLinks</a>(links)</tt>	Set a list of links to display between the source and sink nodes.
<tt style='background-color:#E8E8E8;'> canvas.document.LinksEditWidget <a href=' /canvas/document/editlinksdialog.py#L243'>links</a>()</tt>	Return the links between the source and sink node.
<tt style='background-color:#E8E8E8;'> canvas.document.LinksEditWidget <a href=' /canvas/document/editlinksdialog.py#L329'>addLink</a>(output,input)</tt>	Add a link between output (:class outputsignal) and input (:class inputsignal).
<tt style='background-color:#E8E8E8;'> canvas.document.LinksEditWidget <a href=' /canvas/document/editlinksdialog.py#L370'>removeLink</a>(output,input)</tt>	Remove a link between the output and input channels.
<tt style='background-color:#E8E8E8;'> canvas.document.LinksEditWidget <a href=' /canvas/document/editlinksdialog.py#L383'>clearLinks</a>()</tt>	Clear remove all the links.
<tt style='background-color:#E8E8E8;'> canvas.document.LinksEditWidget <a href=' /canvas/document/editlinksdialog.py#L390'>__updateState</a>()</tt>	Update the widget with the new source/sink node signal descriptions.
<tt style='background-color:#E8E8E8;'> canvas.document.EditLinksNode <a href=' /canvas/document/editlinksdialog.py#L511'>setIconSize</a>(size)</tt>	Set the icon size for the node.
<tt style='background-color:#E8E8E8;'> canvas.document.EditLinksNode <a href=' /canvas/document/editlinksdialog.py#L521'>iconSize</a>()</tt>	Return the icon size.
<tt style='background-color:#E8E8E8;'> canvas.document.EditLinksNode <a href=' /canvas/document/editlinksdialog.py#L527'>setIcon</a>(icon)</tt>	Set the icon to display.
<tt style='background-color:#E8E8E8;'> canvas.document.EditLinksNode <a href=' /canvas/document/editlinksdialog.py#L536'>icon</a>()</tt>	Return the icon.
<tt style='background-color:#E8E8E8;'> canvas.document.EditLinksNode <a href=' /canvas/document/editlinksdialog.py#L542'>setSchemeNode</a>(node)</tt>	Set an instance of schemenode the widget will be initialized.
<tt style='background-color:#E8E8E8;'> canvas.document.EditLinksNode <a href=' /canvas/document/editlinksdialog.py#L606'>anchor</a>(channel)</tt>	Return the anchor item for the channel name.
<tt style='background-color:#E8E8E8;'> canvas.document.ChannelAnchor <a href=' /canvas/document/editlinksdialog.py#L691'>setChannel</a>(channel)</tt>	Set the channel description.
<tt style='background-color:#E8E8E8;'> canvas.document.ChannelAnchor <a href=' /canvas/document/editlinksdialog.py#L703'>channel</a>()</tt>	Return the channel description.
<tt style='background-color:#E8E8E8;'> canvas.document.GraphicsTextWidget <a href=' /canvas/document/editlinksdialog.py#L782'>_onDocumentSizeChanged</a>(size)</tt>	The doc size has changed.
<tt style='background-color:#E8E8E8;'> canvas.document.MenuPage <a href=' /canvas/document/quickmenu.py#L85'>setTitle</a>(title)</tt>	Set the title of the page.
<tt style='background-color:#E8E8E8;'> canvas.document.MenuPage <a href=' /canvas/document/quickmenu.py#L93'>title</a>()</tt>	Return the title of this page.
<tt style='background-color:#E8E8E8;'> canvas.document.MenuPage <a href=' /canvas/document/quickmenu.py#L102'>setIcon</a>(icon)</tt>	Set icon for this menu page.
<tt style='background-color:#E8E8E8;'> canvas.document.MenuPage <a href=' /canvas/document/quickmenu.py#L110'>icon</a>()</tt>	Return the icon of this manu page.
<tt style='background-color:#E8E8E8;'> canvas.document.MenuPage <a href=' /canvas/document/quickmenu.py#L119'>setFilterFunc</a>(func)</tt>	Set the filtering function func should a function taking a single.
<tt style='background-color:#E8E8E8;'> canvas.document.MenuPage <a href=' /canvas/document/quickmenu.py#L130'>setModel</a>(model)</tt>	Reimplemented from :func tooltree setmodel.
<tt style='background-color:#E8E8E8;'> canvas.document.MenuPage <a href=' /canvas/document/quickmenu.py#L140'>setRootIndex</a>(index)</tt>	Reimplemented from :func tooltree setrootindex.
<tt style='background-color:#E8E8E8;'> canvas.document.MenuPage <a href=' /canvas/document/quickmenu.py#L150'>rootIndex</a>()</tt>	Reimplemented from :func tooltree rootindex.
<tt style='background-color:#E8E8E8;'> canvas.document.MenuPage <a href=' /canvas/document/quickmenu.py#L157'>sizeHint</a>()</tt>	Reimplemented from :func qwidget sizehint.
<tt style='background-color:#E8E8E8;'> canvas.document.ItemDisableFilter <a href=' /canvas/document/quickmenu.py#L213'>setFilterFunc</a>(func)</tt>	Set the filtering function.
<tt style='background-color:#E8E8E8;'> canvas.document.ItemDisableFilter <a href=' /canvas/document/quickmenu.py#L226'>flags</a>(index)</tt>	Reimplemented from :class qsortfilterproxymodel flags.
<tt style='background-color:#E8E8E8;'> canvas.document.SuggestMenuPage <a href=' /canvas/document/quickmenu.py#L250'>setModel</a>(model)</tt>	Reimplmemented from :ref menupage setmodel.
<tt style='background-color:#E8E8E8;'> canvas.document.SuggestMenuPage <a href=' /canvas/document/quickmenu.py#L264'>setFilterFixedString</a>(pattern)</tt>	Set the fixed string filtering pattern only items which contain the.
<tt style='background-color:#E8E8E8;'> canvas.document.SuggestMenuPage <a href=' /canvas/document/quickmenu.py#L274'>setFilterRegExp</a>(pattern)</tt>	Set the regular expression filtering pattern only items matching.
<tt style='background-color:#E8E8E8;'> canvas.document.SuggestMenuPage <a href=' /canvas/document/quickmenu.py#L284'>setFilterWildCard</a>(pattern)</tt>	Set a wildcard filtering pattern.
<tt style='background-color:#E8E8E8;'> canvas.document.SuggestMenuPage <a href=' /canvas/document/quickmenu.py#L292'>setFilterFunc</a>(func)</tt>	Set a filtering function.
<tt style='background-color:#E8E8E8;'> canvas.document.SortFilterProxyModel <a href=' /canvas/document/quickmenu.py#L311'>setFilterFunc</a>(func)</tt>	Set the filtering function.
<tt style='background-color:#E8E8E8;'> canvas.document.MenuStackWidget <a href=' /canvas/document/quickmenu.py#L351'>sizeHint</a>()</tt>	Size hint is the maximum width and median height of the widgets contained in the stack.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L489'>setChangeOnHover</a>(changeOnHover)</tt>	If set to true the tab widget will change the current index when the mouse hovers over a tab button.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L498'>changeOnHover</a>()</tt>	Does the current tab index follow the mouse cursor.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L504'>count</a>()</tt>	Return the number of tabs in the widget.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L510'>addTab</a>(text,icon,toolTip)</tt>	Add a new tab and return it's index.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L516'>insertTab</a>(index,text,icon,toolTip)</tt>	Insert a tab at index.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L540'>removeTab</a>(index)</tt>	Remove a tab at index.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L563'>setTabIcon</a>(index,icon)</tt>	Set the icon for tab at index.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L570'>setTabToolTip</a>(index,toolTip)</tt>	Set tooltip for tab at index.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L577'>setTabText</a>(index,text)</tt>	Set tab text for tab at index.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L584'>setTabPalette</a>(index,palette)</tt>	Set the tab button palette.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L591'>setCurrentIndex</a>(index)</tt>	Set the current tab index.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L606'>currentIndex</a>()</tt>	Return the current index.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L612'>button</a>(index)</tt>	Return the tabbutton instance for index.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L624'>__updateTab</a>(index)</tt>	Update the tab button.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L646'>__calcSloppyRegion</a>(current)</tt>	Given a current mouse cursor position return a region of the widget where hover/move events should change the current tab only on a.
<tt style='background-color:#E8E8E8;'> canvas.document.TabBarWidget <a href=' /canvas/document/quickmenu.py#L659'>__setSloppyButton</a>(button)</tt>	Set the current sloppy button a tab button inside sloppy region and reset the sloppy timeout.
<tt style='background-color:#E8E8E8;'> canvas.document.PagedMenu <a href=' /canvas/document/quickmenu.py#L733'>addPage</a>(page,title,icon,toolTip)</tt>	Add a page to the menu and return its index.
<tt style='background-color:#E8E8E8;'> canvas.document.PagedMenu <a href=' /canvas/document/quickmenu.py#L739'>insertPage</a>(index,page,title,icon)</tt>	Insert page at index.
<tt style='background-color:#E8E8E8;'> canvas.document.PagedMenu <a href=' /canvas/document/quickmenu.py#L750'>page</a>(index)</tt>	Return the page at index.
<tt style='background-color:#E8E8E8;'> canvas.document.PagedMenu <a href=' /canvas/document/quickmenu.py#L756'>removePage</a>(index)</tt>	Remove the page at index.
<tt style='background-color:#E8E8E8;'> canvas.document.PagedMenu <a href=' /canvas/document/quickmenu.py#L767'>count</a>()</tt>	Return the number of pages.
<tt style='background-color:#E8E8E8;'> canvas.document.PagedMenu <a href=' /canvas/document/quickmenu.py#L773'>setCurrentIndex</a>(index)</tt>	Set the current page index.
<tt style='background-color:#E8E8E8;'> canvas.document.PagedMenu <a href=' /canvas/document/quickmenu.py#L783'>currentIndex</a>()</tt>	Return the index of the current page.
<tt style='background-color:#E8E8E8;'> canvas.document.PagedMenu <a href=' /canvas/document/quickmenu.py#L789'>setCurrentPage</a>(page)</tt>	Set page to be the current shown page.
<tt style='background-color:#E8E8E8;'> canvas.document.PagedMenu <a href=' /canvas/document/quickmenu.py#L796'>currentPage</a>()</tt>	Return the current page.
<tt style='background-color:#E8E8E8;'> canvas.document.PagedMenu <a href=' /canvas/document/quickmenu.py#L802'>indexOf</a>(page)</tt>	Return the index of page.
<tt style='background-color:#E8E8E8;'> canvas.document.PagedMenu <a href=' /canvas/document/quickmenu.py#L808'>tabButton</a>(index)</tt>	Return the tab button instance for index.
<tt style='background-color:#E8E8E8;'> canvas.document.QuickMenu <a href=' /canvas/document/quickmenu.py#L919'>setSizeGripEnabled</a>(enabled)</tt>	Enable the resizing of the menu with a size grip in a bottom right corner enabled by default.
<tt style='background-color:#E8E8E8;'> canvas.document.QuickMenu <a href=' /canvas/document/quickmenu.py#L933'>sizeGripEnabled</a>()</tt>	Is the size grip enabled.
<tt style='background-color:#E8E8E8;'> canvas.document.QuickMenu <a href=' /canvas/document/quickmenu.py#L939'>addPage</a>(name,page)</tt>	Add the page (:class menupage) with name and return it's index.
<tt style='background-color:#E8E8E8;'> canvas.document.QuickMenu <a href=' /canvas/document/quickmenu.py#L962'>createPage</a>(index)</tt>	Create a new page based on the contents of an index (:class qmodeindex) item.
<tt style='background-color:#E8E8E8;'> canvas.document.QuickMenu <a href=' /canvas/document/quickmenu.py#L991'>setModel</a>(model)</tt>	Set the model containing the actions.
<tt style='background-color:#E8E8E8;'> canvas.document.QuickMenu <a href=' /canvas/document/quickmenu.py#L1017'>setFilterFunc</a>(func)</tt>	Set a filter function.
<tt style='background-color:#E8E8E8;'> canvas.document.QuickMenu <a href=' /canvas/document/quickmenu.py#L1026'>popup</a>(pos,searchText)</tt>	Popup the menu at pos in screen coordinates 'search' text field.
<tt style='background-color:#E8E8E8;'> canvas.document.QuickMenu <a href=' /canvas/document/quickmenu.py#L1087'>exec_</a>(pos,searchText)</tt>	Execute the menu at position pos in global screen coordinates.
<tt style='background-color:#E8E8E8;'> canvas.document.QuickMenu <a href=' /canvas/document/quickmenu.py#L1108'>hideEvent</a>(event)</tt>	Reimplemented from :class qwidget.
<tt style='background-color:#E8E8E8;'> canvas.document.QuickMenu <a href=' /canvas/document/quickmenu.py#L1116'>setCurrentPage</a>(page)</tt>	Set the current shown page to page.
<tt style='background-color:#E8E8E8;'> canvas.document.QuickMenu <a href=' /canvas/document/quickmenu.py#L1122'>setCurrentIndex</a>(index)</tt>	Set the current page index.
<tt style='background-color:#E8E8E8;'> canvas.document.QuickMenu <a href=' /canvas/document/quickmenu.py#L1128'>__clearCurrentItems</a>()</tt>	Clear any selected or current items in all the menus.
<tt style='background-color:#E8E8E8;'> canvas.document.QuickMenu <a href=' /canvas/document/quickmenu.py#L1135'>__onTriggered</a>(action)</tt>	Re-emit the action from the page.
<tt style='background-color:#E8E8E8;'> canvas.document.QuickMenu <a href=' /canvas/document/quickmenu.py#L1151'>triggerSearch</a>()</tt>	Trigger action search this changes to current page to the.
<tt style='background-color:#E8E8E8;'> canvas.document.ItemViewKeyNavigator <a href=' /canvas/document/quickmenu.py#L1205'>setView</a>(view)</tt>	Set the qlistview.
<tt style='background-color:#E8E8E8;'> canvas.document.ItemViewKeyNavigator <a href=' /canvas/document/quickmenu.py#L1212'>view</a>()</tt>	Return the view.
<tt style='background-color:#E8E8E8;'> canvas.document.ItemViewKeyNavigator <a href=' /canvas/document/quickmenu.py#L1237'>moveCurrent</a>(rows,columns)</tt>	Move the current index by rows columns.
<tt style='background-color:#E8E8E8;'> canvas.document.ItemViewKeyNavigator <a href=' /canvas/document/quickmenu.py#L1259'>activateCurrent</a>()</tt>	Activate the current index.
<tt style='background-color:#E8E8E8;'> canvas.document.ItemViewKeyNavigator <a href=' /canvas/document/quickmenu.py#L1272'>ensureCurrent</a>()</tt>	Ensure the view has a current item if one is available.
<tt style='background-color:#E8E8E8;'> canvas.document.WindowSizeGrip <a href=' /canvas/document/quickmenu.py#L1302'>setCorner</a>(corner)</tt>	Set the corner (:class qt corner) where the size grip should.
<tt style='background-color:#E8E8E8;'> canvas.document.WindowSizeGrip <a href=' /canvas/document/quickmenu.py#L1316'>corner</a>()</tt>	Return the corner where the size grip is positioned.
<tt style='background-color:#E8E8E8;'> canvas.canvas. <a href=' /canvas/canvas/layout.py#L19'>composition</a>(f,g)</tt>	Return a composition of two functions.
<tt style='background-color:#E8E8E8;'> canvas.canvas. <a href=' /canvas/canvas/layout.py#L149'>angle</a>(point1,point2)</tt>	Return the angle between the two points in range from -180 to 180.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L122'>clear_scene</a>()</tt>	Clear reset the scene.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L173'>set_scheme</a>(scheme)</tt>	Set the scheme to display populates the scene with nodes and links.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L219'>set_registry</a>(registry)</tt>	Set the widget registry.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L228'>set_anchor_layout</a>(layout)</tt>	Set an :class ~ layout anchorlayout.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L239'>anchor_layout</a>()</tt>	Return the anchor layout instance.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L245'>set_channel_names_visible</a>(visible)</tt>	Set the channel names visibility.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L253'>channel_names_visible</a>()</tt>	Return the channel names visibility state.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L259'>set_node_animation_enabled</a>(enabled)</tt>	Set node animation enabled state.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L269'>add_node_item</a>(item)</tt>	Add a :class nodeitem instance to the scene.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L305'>add_node</a>(node)</tt>	Add and return a default constructed :class nodeitem for a.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L342'>new_node_item</a>(widget_desc,category_desc)</tt>	Construct an new :class nodeitem from a widgetdescription.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L366'>remove_node_item</a>(item)</tt>	Remove item (:class nodeitem) from the scene.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L382'>remove_node</a>(node)</tt>	Remove the :class nodeitem instance that was previously.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L399'>node_items</a>()</tt>	Return all :class nodeitem instances in the scene.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L405'>add_link_item</a>(item)</tt>	Add a link (:class linkitem) to the scene.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L424'>add_link</a>(scheme_link)</tt>	Create and add a :class linkitem instance for a.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L455'>new_link_item</a>(source_item,source_channel,sink_item,sink_channel)</tt>	Construct and return a new :class linkitem.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L485'>remove_link_item</a>(item)</tt>	Remove a link (:class linkitem) from the scene.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L509'>remove_link</a>(scheme_link)</tt>	Remove a :class linkitem instance that was previously constructed.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L525'>link_items</a>()</tt>	Return all :class linkitem\s in the scene.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L531'>add_annotation_item</a>(annotation)</tt>	Add an :class annotation item to the scene.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L540'>add_annotation</a>(scheme_annot)</tt>	Create a new item for :class schemeannotation and add it to the scene.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L578'>remove_annotation_item</a>(annotation)</tt>	Remove an :class annotation instance from the scene.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L587'>remove_annotation</a>(scheme_annotation)</tt>	Remove an :class annotation instance that was previously added.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L606'>annotation_items</a>()</tt>	Return all :class annotation items in the scene.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L620'>commit_scheme_node</a>(node)</tt>	Commit the node into the scheme.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L644'>commit_scheme_link</a>(link)</tt>	Commit a scheme link.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L658'>node_for_item</a>(item)</tt>	Return the schemenode for the item.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L665'>item_for_node</a>(node)</tt>	Return the :class nodeitem instance for a :class schemenode.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L671'>link_for_item</a>(item)</tt>	Return the schemelink for item (:class linkitem).
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L678'>item_for_link</a>(link)</tt>	Return the :class linkitem for a :class schemelink.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L684'>selected_node_items</a>()</tt>	Return the selected :class nodeitem's.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L690'>selected_annotation_items</a>()</tt>	Return the selected :class annotation's.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L696'>node_links</a>(node_item)</tt>	Return all links from the node_item (:class nodeitem).
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L703'>node_output_links</a>(node_item)</tt>	Return a list of all output links from node_item.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L710'>node_input_links</a>(node_item)</tt>	Return a list of all input links for node_item.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L717'>neighbor_nodes</a>(node_item)</tt>	Return a list of node_item's (class nodeitem) neighbor nodes.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasScene <a href=' /canvas/canvas/scene.py#L760'>item_at</a>(pos,type_or_tuple,buttons)</tt>	Return the item at pos that is an instance of the specified type (type_or_tuple).
<tt style='background-color:#E8E8E8;'> canvas.canvas. <a href=' /canvas/canvas/scene.py#L903'>grab_svg</a>(scene)</tt>	Return a svg rendering of the scene contents.
<tt style='background-color:#E8E8E8;'> canvas.canvas.CanvasView <a href=' /canvas/canvas/view.py#L85'>__autoScrollAdvance</a>()</tt>	Advance the auto scroll.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/linkitem.py#L108'>bezier_subdivide</a>(cp,t)</tt>	Subdivide a cubic bezier curve defined by the control points cp.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/linkitem.py#L142'>qpainterpath_simple_split</a>(path,t)</tt>	Split a qpainterpath defined simple curve.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/linkitem.py#L195'>path_link_disabled</a>(basepath)</tt>	Return a qpainterpath 'styled' to indicate a 'disabled' link.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkAnchorIndicator <a href=' /canvas/canvas/items/linkitem.py#L253'>setHoverState</a>(state)</tt>	The hover state is set by the linkitem.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L336'>setSourceItem</a>(item,anchor)</tt>	Set the source item (:class nodeitem) use anchor.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L386'>setSinkItem</a>(item,anchor)</tt>	Set the sink item (:class nodeitem) use anchor.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L436'>setFont</a>(font)</tt>	Set the font for the channel names text item.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L444'>font</a>()</tt>	Return the font for the channel names text.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L450'>setChannelNamesVisible</a>(visible)</tt>	Set the visibility of the channel name text.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L456'>setSourceName</a>(name)</tt>	Set the name of the source used in channel name text.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L464'>sourceName</a>()</tt>	Return the source name.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L470'>setSinkName</a>(name)</tt>	Set the name of the sink used in channel name text.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L478'>sinkName</a>()</tt>	Return the sink name.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L625'>setEnabled</a>(enabled)</tt>	Reimplemented from :class qgraphicsobject set link enabled state.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L640'>setDynamicEnabled</a>(enabled)</tt>	Set the link's dynamic enabled state.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L653'>isDynamicEnabled</a>()</tt>	Is the link dynamic enabled.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L659'>setDynamic</a>(dynamic)</tt>	Mark the link as dynamic (i e it responds to.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L669'>isDynamic</a>()</tt>	Is the link dynamic.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.LinkItem <a href=' /canvas/canvas/items/linkitem.py#L675'>setRuntimeState</a>(state)</tt>	Style the link appropriate to the linkitem state.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.GraphicsTextEdit <a href=' /canvas/canvas/items/annotationitem.py#L48'>setPlaceholderText</a>(text)</tt>	Set the placeholder text this is shown when the item has no text.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.GraphicsTextEdit <a href=' /canvas/canvas/items/annotationitem.py#L59'>placeholderText</a>()</tt>	Return the placeholder text.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.TextAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L125'>adjustSize</a>()</tt>	Resize to a reasonable size.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.TextAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L135'>setFramePen</a>(pen)</tt>	Set the frame pen by default qt nopen is used (i e the frame.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.TextAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L143'>framePen</a>()</tt>	Return the frame pen.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.TextAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L148'>setFrameBrush</a>(brush)</tt>	Set the frame brush.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.TextAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L153'>frameBrush</a>()</tt>	Return the frame brush.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.TextAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L166'>setPlainText</a>(text)</tt>	Set the annotation plain text.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.TextAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L174'>setHtml</a>(text)</tt>	Set the annotation rich text.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.TextAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L182'>setDefaultTextColor</a>(color)</tt>	Set the default text color.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.TextAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L190'>setTextMargins</a>(left,top,right,bottom)</tt>	Set the text margins.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.TextAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L201'>textMargins</a>()</tt>	Return the text margins.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.TextAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L206'>document</a>()</tt>	Return the qtextdocument instance used internally.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.TextAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L233'>startEdit</a>()</tt>	Start the annotation text edit process.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.TextAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L245'>endEdit</a>()</tt>	End the annotation edit.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowItem <a href=' /canvas/canvas/items/annotationitem.py#L325'>setLine</a>(line)</tt>	Set the baseline of the arrow (:class qlinef).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowItem <a href=' /canvas/canvas/items/annotationitem.py#L332'>line</a>()</tt>	Return the baseline of the arrow.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowItem <a href=' /canvas/canvas/items/annotationitem.py#L337'>setLineWidth</a>(lineWidth)</tt>	Set the width of the arrow.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowItem <a href=' /canvas/canvas/items/annotationitem.py#L344'>lineWidth</a>()</tt>	Return the width of the arrow.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowItem <a href=' /canvas/canvas/items/annotationitem.py#L349'>setArrowStyle</a>(style)</tt>	Set the arrow style (arrowitem plain or arrowitem concave).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowItem <a href=' /canvas/canvas/items/annotationitem.py#L356'>arrowStyle</a>()</tt>	Return the arrow style.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/annotationitem.py#L369'>arrow_path_plain</a>(line,width)</tt>	Return an :class qpainterpath of a plain looking arrow.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/annotationitem.py#L408'>arrow_path_concave</a>(line,width)</tt>	Return a :class qpainterpath of a pretty looking arrow.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L486'>setAutoAdjustGeometry</a>(autoAdjust)</tt>	If set to true then the geometry will be adjusted whenever the arrow is changed with setline.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L498'>autoAdjustGeometry</a>()</tt>	Should the geometry of the item be adjusted automatically when setline is called.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L506'>setLine</a>(line)</tt>	Set the arrow base line (a qlinef in object coordinates).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L539'>line</a>()</tt>	Return the arrow base line (qlinef in object coordinates).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L545'>setColor</a>(color)</tt>	Set arrow brush color.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L553'>color</a>()</tt>	Return the arrow brush color.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L559'>setLineWidth</a>(lineWidth)</tt>	Set the arrow line width.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L565'>lineWidth</a>()</tt>	Return the arrow line width.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L571'>adjustGeometry</a>()</tt>	Adjust the widget geometry to exactly fit the arrow inside while preserving the arrow path scene geometry.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ArrowAnnotation <a href=' /canvas/canvas/items/annotationitem.py#L606'>__updateStyleState</a>()</tt>	Update the arrows' brush pen based on it's state.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/nodeitem.py#L31'>create_palette</a>(light_color,color)</tt>	Return a new :class qpalette from for the :class nodebodyitem.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/nodeitem.py#L54'>default_palette</a>()</tt>	Create and return a default palette for a node.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeBodyItem <a href=' /canvas/canvas/items/nodeitem.py#L117'>setShapeRect</a>(rect)</tt>	Set the item's shape rect the item should be confined within.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeBodyItem <a href=' /canvas/canvas/items/nodeitem.py#L128'>setPalette</a>(palette)</tt>	Set the body color palette (:class qpalette).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeBodyItem <a href=' /canvas/canvas/items/nodeitem.py#L135'>setAnimationEnabled</a>(enabled)</tt>	Set the node animation enabled.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeBodyItem <a href=' /canvas/canvas/items/nodeitem.py#L142'>setProcessingState</a>(state)</tt>	Set the processing state of the node.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeBodyItem <a href=' /canvas/canvas/items/nodeitem.py#L151'>setProgress</a>(progress)</tt>	Set the progress indicator state of the node progress should.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeBodyItem <a href=' /canvas/canvas/items/nodeitem.py#L160'>ping</a>()</tt>	Trigger a 'ping' animation.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeBodyItem <a href=' /canvas/canvas/items/nodeitem.py#L176'>paint</a>(painter,option,widget)</tt>	Paint the shape and a progress meter.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeBodyItem <a href=' /canvas/canvas/items/nodeitem.py#L245'>setSelected</a>(selected)</tt>	Set the selected state.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeBodyItem <a href=' /canvas/canvas/items/nodeitem.py#L256'>setHasFocus</a>(focus)</tt>	Set the has focus state.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.AnchorPoint <a href=' /canvas/canvas/items/nodeitem.py#L290'>anchorScenePos</a>()</tt>	Return anchor position in scene coordinates.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.AnchorPoint <a href=' /canvas/canvas/items/nodeitem.py#L296'>setAnchorDirection</a>(direction)</tt>	Set the preferred direction qpointf in item coordinates.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.AnchorPoint <a href=' /canvas/canvas/items/nodeitem.py#L304'>anchorDirection</a>()</tt>	Return the preferred anchor direction.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L357'>parentNodeItem</a>()</tt>	Return a parent :class nodeitem or none if this anchor's parent is not a :class nodeitem instance.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L365'>setAnchorPath</a>(path)</tt>	Set the anchor's curve path as a :class qpainterpath.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L396'>anchorPath</a>()</tt>	Return the anchor path (:class qpainterpath) this is a curve on.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L404'>setAnchored</a>(anchored)</tt>	Set the items anchored state when false the item draws it self.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L418'>setConnectionHint</a>(hint)</tt>	Set the connection hint this can be used to indicate if.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L426'>count</a>()</tt>	Return the number of anchor points.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L432'>addAnchor</a>(anchor,position)</tt>	Add a new :class anchorpoint to this item and return it's index.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L442'>insertAnchor</a>(index,anchor,position)</tt>	Insert a new :class anchorpoint at index.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L467'>removeAnchor</a>(anchor)</tt>	Remove and delete the anchor point.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L477'>takeAnchor</a>(anchor)</tt>	Remove the anchor but don't delete it.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L503'>anchorPoints</a>()</tt>	Return a list of anchor points.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L509'>anchorPoint</a>(index)</tt>	Return the anchor point at index.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L515'>setAnchorPositions</a>(positions)</tt>	Set the anchor positions in percentages 0 1 along the path curve.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L524'>anchorPositions</a>()</tt>	Return the positions of anchor points as a list of floats where each float is between 0 and 1 and specifies where along the anchor.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeAnchorItem <a href=' /canvas/canvas/items/nodeitem.py#L547'>__updatePositions</a>()</tt>	Update anchor points positions.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/nodeitem.py#L569'>standard_icon</a>(standard_pixmap)</tt>	Return return the application style's standard icon for a qstyle.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.GraphicsIconItem <a href=' /canvas/canvas/items/nodeitem.py#L600'>setIcon</a>(icon)</tt>	Set the icon (:class qicon).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.GraphicsIconItem <a href=' /canvas/canvas/items/nodeitem.py#L608'>icon</a>()</tt>	Return the icon (:class qicon).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.GraphicsIconItem <a href=' /canvas/canvas/items/nodeitem.py#L614'>setIconSize</a>(size)</tt>	Set the icon (and this item's) size (:class qsize).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.GraphicsIconItem <a href=' /canvas/canvas/items/nodeitem.py#L623'>iconSize</a>()</tt>	Return the icon size (:class qsize).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.GraphicsIconItem <a href=' /canvas/canvas/items/nodeitem.py#L629'>setTransformationMode</a>(mode)</tt>	Set pixmap transformation mode (qt smoothtransformation or.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.GraphicsIconItem <a href=' /canvas/canvas/items/nodeitem.py#L639'>transformationMode</a>()</tt>	Return the pixmap transformation mode.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L822'>from_node</a>(cls,node)</tt>	Create an :class nodeitem instance and initialize it from a :class schemenode instance.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L834'>from_node_meta</a>(cls,meta_description)</tt>	Create an nodeitem instance from a node meta description.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L843'>setupGraphics</a>()</tt>	Set up the graphics.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L893'>setWidgetDescription</a>(desc)</tt>	Set widget description.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L916'>setWidgetCategory</a>(desc)</tt>	Set the widget category.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L927'>setIcon</a>(icon)</tt>	Set the node item's icon (:class qicon).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L938'>setColor</a>(color,selectedColor)</tt>	Set the widget color.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L951'>setTitle</a>(title)</tt>	Set the node title the title text is displayed at the bottom of the.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L960'>title</a>()</tt>	Return the node title.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L969'>setFont</a>(font)</tt>	Set the title text font (:class qfont).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L978'>font</a>()</tt>	Return the title text font.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L984'>setAnimationEnabled</a>(enabled)</tt>	Set the node animation enabled state.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L992'>animationEnabled</a>()</tt>	Are node animations enabled.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L998'>setProcessingState</a>(state)</tt>	Set the node processing state i e the node is processing.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1013'>processingState</a>()</tt>	The node processing state.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1022'>setProgress</a>(progress)</tt>	Set the node work progress state number between 0 and 100.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1035'>progress</a>()</tt>	Return the node work progress state.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1044'>setStatusMessage</a>(message)</tt>	Set the node status message text.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1058'>setStateMessage</a>(message)</tt>	Set a state message to display over the item.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1093'>newInputAnchor</a>()</tt>	Create and return a new input :class anchorpoint.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1109'>removeInputAnchor</a>(anchor)</tt>	Remove input anchor.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1119'>newOutputAnchor</a>()</tt>	Create and return a new output :class anchorpoint.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1135'>removeOutputAnchor</a>(anchor)</tt>	Remove output anchor.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1145'>inputAnchors</a>()</tt>	Return a list of all input anchor points.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1151'>outputAnchors</a>()</tt>	Return a list of all output anchor points.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1157'>setAnchorRotation</a>(angle)</tt>	Set the anchor rotation.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1165'>anchorRotation</a>()</tt>	Return the anchor rotation.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1184'>__updateTitleText</a>()</tt>	Update the title text item.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.NodeItem <a href=' /canvas/canvas/items/nodeitem.py#L1225'>__updateMessages</a>()</tt>	Update message items position visibility and tool tips.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/nodeitem.py#L1301'>NodeItem_toolTipHelper</a>(node,links_in,links_out)</tt>	A helper function for constructing a standard tooltip for the node in on the canvas.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/utils.py#L6'>saturated</a>(color,factor)</tt>	Return a saturated color.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/utils.py#L18'>sample_path</a>(path,num)</tt>	Sample num equidistant points from the path (qpainterpath).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/utils.py#L25'>radial_gradient</a>(color,color_light)</tt>	Radial_gradient qcolor qcolor radial_gradient qcolor int.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/utils.py#L45'>toGraphicsObjectIfPossible</a>(item)</tt>	Return the item as a qgraphicsobject if possible.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/utils.py#L61'>linspace</a>(count)</tt>	Return count evenly spaced points from 0 1 interval excluding.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/utils.py#L69'>uniform_linear_layout</a>(points)</tt>	Layout the points a list of floats in 0 1 range in a uniform.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/utils.py#L85'>invert_permutation_indices</a>(indices)</tt>	Invert the permutation giver by indices.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/utils.py#L94'>stroke_path</a>(path,pen)</tt>	Create a qpainterpath stroke from the path drawn with pen.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ControlPoint <a href=' /canvas/canvas/items/controlpoints.py#L44'>setAnchor</a>(anchor)</tt>	Set anchor position.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ControlPoint <a href=' /canvas/canvas/items/controlpoints.py#L93'>setConstraint</a>(constraint)</tt>	Set the constraint for the point qt vertical qt horizontal or 0.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ControlPoint <a href=' /canvas/canvas/items/controlpoints.py#L104'>constrain</a>(pos)</tt>	Constrain the pos.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ControlPointRect <a href=' /canvas/canvas/items/controlpoints.py#L167'>controlPoint</a>(anchor)</tt>	Return the anchor point (:class controlpoint) at anchor position or none if an anchor point is not set.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ControlPointRect <a href=' /canvas/canvas/items/controlpoints.py#L175'>setRect</a>(rect)</tt>	Set the control point rectangle (:class qrectf).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ControlPointRect <a href=' /canvas/canvas/items/controlpoints.py#L185'>rect</a>()</tt>	Return the control point rectangle.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ControlPointRect <a href=' /canvas/canvas/items/controlpoints.py#L199'>setControlMargins</a>()</tt>	Set the controls points on the margins around rect.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ControlPointRect <a href=' /canvas/canvas/items/controlpoints.py#L219'>isControlActive</a>()</tt>	Return the state of the control true if the control is.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ControlPointRect <a href=' /canvas/canvas/items/controlpoints.py#L260'>__pointsLayout</a>()</tt>	Layout the control points.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.ControlPointLine <a href=' /canvas/canvas/items/controlpoints.py#L367'>isControlActive</a>()</tt>	Return the state of the control true if the control is.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.GraphicsPathObject <a href=' /canvas/canvas/items/graphicspathobject.py#L24'>setPath</a>(path)</tt>	Set the items path (:class qpainterpath).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.GraphicsPathObject <a href=' /canvas/canvas/items/graphicspathobject.py#L38'>path</a>()</tt>	Return the items path.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.GraphicsPathObject <a href=' /canvas/canvas/items/graphicspathobject.py#L43'>setBrush</a>(brush)</tt>	Set the items brush (:class qbrush).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.GraphicsPathObject <a href=' /canvas/canvas/items/graphicspathobject.py#L53'>brush</a>()</tt>	Return the items brush.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.GraphicsPathObject <a href=' /canvas/canvas/items/graphicspathobject.py#L58'>setPen</a>(pen)</tt>	Set the items outline pen (:class qpen).
<tt style='background-color:#E8E8E8;'> canvas.canvas.items.GraphicsPathObject <a href=' /canvas/canvas/items/graphicspathobject.py#L70'>pen</a>()</tt>	Return the items pen.
<tt style='background-color:#E8E8E8;'> canvas.canvas.items. <a href=' /canvas/canvas/items/graphicspathobject.py#L104'>shapeFromPath</a>(path,pen)</tt>	Create a qpainterpath shape from the path drawn with pen.
<tt style='background-color:#E8E8E8;'> canvas.gui.FramelessWindow <a href=' /canvas/gui/framelesswindow.py#L28'>setRadius</a>(radius)</tt>	Set the window rounded border radius.
<tt style='background-color:#E8E8E8;'> canvas.gui.FramelessWindow <a href=' /canvas/gui/framelesswindow.py#L38'>radius</a>()</tt>	Return the border radius.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/stackedwidget.py#L23'>clipMinMax</a>(size,minSize,maxSize)</tt>	Clip the size so it is bigger then minsize but smaller than maxsize.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/stackedwidget.py#L30'>fixSizePolicy</a>(size,hint,policy)</tt>	Fix size so it conforms to the size policy and the given size hint.
<tt style='background-color:#E8E8E8;'> canvas.gui.StackLayout <a href=' /canvas/gui/stackedwidget.py#L100'>_onCurrentChanged</a>(index)</tt>	Current widget changed invalidate the layout.
<tt style='background-color:#E8E8E8;'> canvas.gui.AnimatedStackedWidget <a href=' /canvas/gui/stackedwidget.py#L143'>setAnimationEnabled</a>(animationEnabled)</tt>	Enable/disable transition animations.
<tt style='background-color:#E8E8E8;'> canvas.gui.AnimatedStackedWidget <a href=' /canvas/gui/stackedwidget.py#L153'>animationEnabled</a>()</tt>	Is the transition animation enabled.
<tt style='background-color:#E8E8E8;'> canvas.gui.AnimatedStackedWidget <a href=' /canvas/gui/stackedwidget.py#L159'>addWidget</a>(widget)</tt>	Append the widget to the stack and return its index.
<tt style='background-color:#E8E8E8;'> canvas.gui.AnimatedStackedWidget <a href=' /canvas/gui/stackedwidget.py#L165'>insertWidget</a>(index,widget)</tt>	Insert widget into the stack at index.
<tt style='background-color:#E8E8E8;'> canvas.gui.AnimatedStackedWidget <a href=' /canvas/gui/stackedwidget.py#L175'>removeWidget</a>(widget)</tt>	Remove widget from the stack.
<tt style='background-color:#E8E8E8;'> canvas.gui.AnimatedStackedWidget <a href=' /canvas/gui/stackedwidget.py#L186'>widget</a>(index)</tt>	Return the widget at index.
<tt style='background-color:#E8E8E8;'> canvas.gui.AnimatedStackedWidget <a href=' /canvas/gui/stackedwidget.py#L192'>indexOf</a>(widget)</tt>	Return the index of widget in the stack.
<tt style='background-color:#E8E8E8;'> canvas.gui.AnimatedStackedWidget <a href=' /canvas/gui/stackedwidget.py#L198'>count</a>()</tt>	Return the number of widgets in the stack.
<tt style='background-color:#E8E8E8;'> canvas.gui.AnimatedStackedWidget <a href=' /canvas/gui/stackedwidget.py#L204'>setCurrentWidget</a>(widget)</tt>	Set the current shown widget.
<tt style='background-color:#E8E8E8;'> canvas.gui.AnimatedStackedWidget <a href=' /canvas/gui/stackedwidget.py#L211'>setCurrentIndex</a>(index)</tt>	Set the current shown widget index.
<tt style='background-color:#E8E8E8;'> canvas.gui.AnimatedStackedWidget <a href=' /canvas/gui/stackedwidget.py#L245'>currentIndex</a>()</tt>	Return the current shown widget index.
<tt style='background-color:#E8E8E8;'> canvas.gui.AnimatedStackedWidget <a href=' /canvas/gui/stackedwidget.py#L257'>__transitionStart</a>()</tt>	Start the transition.
<tt style='background-color:#E8E8E8;'> canvas.gui.AnimatedStackedWidget <a href=' /canvas/gui/stackedwidget.py#L268'>__onTransitionFinished</a>()</tt>	Transition has finished.
<tt style='background-color:#E8E8E8;'> canvas.gui.CrossFadePixmapWidget <a href=' /canvas/gui/stackedwidget.py#L296'>setPixmap</a>(pixmap)</tt>	Set pixmap 1.
<tt style='background-color:#E8E8E8;'> canvas.gui.CrossFadePixmapWidget <a href=' /canvas/gui/stackedwidget.py#L303'>setPixmap2</a>(pixmap)</tt>	Set pixmap 2.
<tt style='background-color:#E8E8E8;'> canvas.gui.CrossFadePixmapWidget <a href=' /canvas/gui/stackedwidget.py#L310'>setBlendingFactor</a>(factor)</tt>	Set the blending factor between the two pixmaps.
<tt style='background-color:#E8E8E8;'> canvas.gui.CrossFadePixmapWidget <a href=' /canvas/gui/stackedwidget.py#L317'>blendingFactor</a>()</tt>	Pixmap blending factor between 0 0 and 1 0.
<tt style='background-color:#E8E8E8;'> canvas.gui.CrossFadePixmapWidget <a href=' /canvas/gui/stackedwidget.py#L326'>sizeHint</a>()</tt>	Return an interpolated size between pixmap1 size().
<tt style='background-color:#E8E8E8;'> canvas.gui.CrossFadePixmapWidget <a href=' /canvas/gui/stackedwidget.py#L339'>paintEvent</a>(event)</tt>	Paint the interpolated pixmap image.
<tt style='background-color:#E8E8E8;'> canvas.gui.CollapsibleDockWidget <a href=' /canvas/gui/dock.py#L88'>setExpanded</a>(state)</tt>	Set the widgets expanded state.
<tt style='background-color:#E8E8E8;'> canvas.gui.CollapsibleDockWidget <a href=' /canvas/gui/dock.py#L104'>expanded</a>()</tt>	Is the dock widget in expanded state if true the.
<tt style='background-color:#E8E8E8;'> canvas.gui.CollapsibleDockWidget <a href=' /canvas/gui/dock.py#L120'>setExpandedWidget</a>(widget)</tt>	Set the widget with contents to show while expanded.
<tt style='background-color:#E8E8E8;'> canvas.gui.CollapsibleDockWidget <a href=' /canvas/gui/dock.py#L137'>expandedWidget</a>()</tt>	Return the widget previously set with setexpandedwidget, or none if no widget has been set.
<tt style='background-color:#E8E8E8;'> canvas.gui.CollapsibleDockWidget <a href=' /canvas/gui/dock.py#L145'>setCollapsedWidget</a>(widget)</tt>	Set the widget with contents to show while collapsed.
<tt style='background-color:#E8E8E8;'> canvas.gui.CollapsibleDockWidget <a href=' /canvas/gui/dock.py#L162'>collapsedWidget</a>()</tt>	Return the widget previously set with setcollapsedwidget, or none if no widget has been set.
<tt style='background-color:#E8E8E8;'> canvas.gui.CollapsibleDockWidget <a href=' /canvas/gui/dock.py#L170'>setAnimationEnabled</a>(animationEnabled)</tt>	Enable/disable the transition animation.
<tt style='background-color:#E8E8E8;'> canvas.gui.CollapsibleDockWidget <a href=' /canvas/gui/dock.py#L176'>animationEnabled</a>()</tt>	Is transition animation enabled.
<tt style='background-color:#E8E8E8;'> canvas.gui.CollapsibleDockWidget <a href=' /canvas/gui/dock.py#L182'>currentWidget</a>()</tt>	Return the current shown widget depending on the expanded state.
<tt style='background-color:#E8E8E8;'> canvas.gui.CollapsibleDockWidget <a href=' /canvas/gui/dock.py#L191'>expand</a>()</tt>	Expand the dock (same as setexpanded true ).
<tt style='background-color:#E8E8E8;'> canvas.gui.CollapsibleDockWidget <a href=' /canvas/gui/dock.py#L197'>collapse</a>()</tt>	Collapse the dock (same as setexpanded false ).
<tt style='background-color:#E8E8E8;'> canvas.gui.CollapsibleDockWidget <a href=' /canvas/gui/dock.py#L273'>__fixIcon</a>()</tt>	Fix the dock close icon.
<tt style='background-color:#E8E8E8;'> canvas.gui.DropShadowFrame <a href=' /canvas/gui/dropshadow.py#L78'>setColor</a>(color)</tt>	Set the color of the shadow.
<tt style='background-color:#E8E8E8;'> canvas.gui.DropShadowFrame <a href=' /canvas/gui/dropshadow.py#L89'>color</a>()</tt>	Return the color of the drop shadow.
<tt style='background-color:#E8E8E8;'> canvas.gui.DropShadowFrame <a href=' /canvas/gui/dropshadow.py#L98'>setRadius</a>(radius)</tt>	Set the drop shadow's blur radius.
<tt style='background-color:#E8E8E8;'> canvas.gui.DropShadowFrame <a href=' /canvas/gui/dropshadow.py#L107'>radius</a>()</tt>	Return the shadow blur radius.
<tt style='background-color:#E8E8E8;'> canvas.gui.DropShadowFrame <a href=' /canvas/gui/dropshadow.py#L116'>setWidget</a>(widget)</tt>	Set the widget around which to show the shadow.
<tt style='background-color:#E8E8E8;'> canvas.gui.DropShadowFrame <a href=' /canvas/gui/dropshadow.py#L144'>widget</a>()</tt>	Return the widget that was set by setwidget.
<tt style='background-color:#E8E8E8;'> canvas.gui.DropShadowFrame <a href=' /canvas/gui/dropshadow.py#L186'>__updateGeometry</a>()</tt>	Update the shadow geometry to fit the widget's changed geometry.
<tt style='background-color:#E8E8E8;'> canvas.gui.DropShadowFrame <a href=' /canvas/gui/dropshadow.py#L213'>__updatePixmap</a>()</tt>	Update the cached shadow pixmap.
<tt style='background-color:#E8E8E8;'> canvas.gui.DropShadowFrame <a href=' /canvas/gui/dropshadow.py#L240'>__shadowPixmapFragments</a>(pixmap_rect,shadow_rect)</tt>	Return a list of 8 qrectf fragments for drawing a shadow.
<tt style='background-color:#E8E8E8;'> canvas.gui._DropShadowWidget <a href=' /canvas/gui/dropshadow.py#L294'>setOffset</a>(offset)</tt>	Set the drop shadow offset (qpoint).
<tt style='background-color:#E8E8E8;'> canvas.gui._DropShadowWidget <a href=' /canvas/gui/dropshadow.py#L301'>setRadius</a>(radius)</tt>	Set the drop shadow blur radius (float).
<tt style='background-color:#E8E8E8;'> canvas.gui._DropShadowWidget <a href=' /canvas/gui/dropshadow.py#L308'>setColor</a>(color)</tt>	Set the drop shadow color (qcolor).
<tt style='background-color:#E8E8E8;'> canvas.gui._DropShadowWidget <a href=' /canvas/gui/dropshadow.py#L319'>_updateShadowPixmap</a>()</tt>	Update the cached drop shadow pixmap.
<tt style='background-color:#E8E8E8;'> canvas.gui._DropShadowWidget <a href=' /canvas/gui/dropshadow.py#L357'>_shadowPixmapFragments</a>(pixmap_rect,shadow_rect)</tt>	Return a list of 8 qrectf fragments for drawing a shadow.
<tt style='background-color:#E8E8E8;'> canvas.gui.SplashScreen <a href=' /canvas/gui/splashscreen.py#L57'>setTextRect</a>(rect)</tt>	Set the rectangle (:class qrect) in which to show the message text.
<tt style='background-color:#E8E8E8;'> canvas.gui.SplashScreen <a href=' /canvas/gui/splashscreen.py#L65'>textRect</a>()</tt>	Return the text message rectangle.
<tt style='background-color:#E8E8E8;'> canvas.gui.SplashScreen <a href=' /canvas/gui/splashscreen.py#L84'>drawContents</a>(painter)</tt>	Reimplementation of drawcontents to limit the drawing inside textrext.
<tt style='background-color:#E8E8E8;'> canvas.gui.SplashScreen <a href=' /canvas/gui/splashscreen.py#L122'>showMessage</a>(message,alignment,color)</tt>	Show the message with color and alignment.
<tt style='background-color:#E8E8E8;'> canvas.gui.LineEdit <a href=' /canvas/gui/lineedit.py#L77'>setAction</a>(action,position)</tt>	Set action to be displayed at position existing action.
<tt style='background-color:#E8E8E8;'> canvas.gui.LineEdit <a href=' /canvas/gui/lineedit.py#L116'>actionAt</a>(position)</tt>	Return :class qaction at position.
<tt style='background-color:#E8E8E8;'> canvas.gui.LineEdit <a href=' /canvas/gui/lineedit.py#L127'>removeActionAt</a>(position)</tt>	Remove the action at position.
<tt style='background-color:#E8E8E8;'> canvas.gui.LineEdit <a href=' /canvas/gui/lineedit.py#L141'>button</a>(position)</tt>	Return the button (:class lineeditbutton) for the action at position.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L163'>setButtonSize</a>(size)</tt>	Set the button size.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L172'>buttonSize</a>()</tt>	Return the button size.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L178'>setIconSize</a>(size)</tt>	Set the button icon size.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L187'>iconSize</a>()</tt>	Return the icon size.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L193'>setToolButtonStyle</a>(style)</tt>	Set the tool button style.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L202'>toolButtonStyle</a>()</tt>	Return the tool button style.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L208'>setColumnCount</a>(columns)</tt>	Set the number of button/action columns.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L216'>columns</a>()</tt>	Return the number of columns in the grid.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L222'>clear</a>()</tt>	Clear all actions/buttons.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L230'>insertAction</a>(before,action)</tt>	Insert a new action at the position currently occupied by before can also be an index.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L253'>setActions</a>(actions)</tt>	Clear the grid and add actions.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L262'>buttonForAction</a>(action)</tt>	Return the :class qtoolbutton instance button for action.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L270'>createButtonForAction</a>(action)</tt>	Create and return a :class qtoolbutton for action.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L286'>count</a>()</tt>	Return the number of buttons/actions in the grid.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L304'>__insertActionButton</a>(index,action)</tt>	Create a button for the action and add it to the layout at index.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L328'>__removeActionButton</a>(action)</tt>	Remove the button for the action from the layout and delete it.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L343'>__shiftGrid</a>(start,count)</tt>	Shift all buttons starting at index start by count cells.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L363'>__relayout</a>()</tt>	Relayout the buttons.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolGrid <a href=' /canvas/gui/toolgrid.py#L378'>__indexOf</a>(button)</tt>	Return the index of button widget.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBoxTabButton <a href=' /canvas/gui/toolbox.py#L46'>setNativeStyling</a>(state)</tt>	Render tab buttons as native or css styled :class qtoolbuttons.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBoxTabButton <a href=' /canvas/gui/toolbox.py#L56'>nativeStyling</a>()</tt>	Use :class qstyle's to paint the class qtoolbutton look.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L209'>setExclusive</a>(exclusive)</tt>	Set exclusive tabs only one tab can be open at a time.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L231'>exclusive</a>()</tt>	Are the tabs in the toolbox exclusive.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L296'>setTabButtonHeight</a>(height)</tt>	Set the tab button height.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L305'>tabButtonHeight</a>()</tt>	Return the tab button height.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L311'>setTabIconSize</a>(size)</tt>	Set the tab button icon size.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L320'>tabIconSize</a>()</tt>	Return the tab icon size.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L326'>tabButton</a>(index)</tt>	Return the tab button at index.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L332'>tabAction</a>(index)</tt>	Return open/close action for the tab at index.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L338'>addItem</a>(widget,text,icon,toolTip)</tt>	Append the widget in a new tab and return its index.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L360'>insertItem</a>(index,widget,text,icon)</tt>	Insert the widget in a new tab at position index.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L393'>removeItem</a>(index)</tt>	Remove the widget at index.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L420'>count</a>()</tt>	Return the number of widgets inserted in the toolbox.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L426'>widget</a>(index)</tt>	Return the widget at index.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L432'>createTabButton</a>(widget,text,icon,toolTip)</tt>	Create the tab button for widget.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L462'>ensureWidgetVisible</a>(child,xmargin,ymargin)</tt>	Scroll the contents so child widget instance is visible inside the viewport.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L515'>__updateSelected</a>()</tt>	Update the tab buttons selected style flags.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolBox <a href=' /canvas/gui/toolbox.py#L545'>__updatePositions</a>()</tt>	Update the tab buttons position style flags.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/toolbox.py#L566'>find</a>(iterable)</tt>	Find(iterable [what [key=none [predicate=operator eq]]]).
<tt style='background-color:#E8E8E8;'> canvas.gui.QuickHelp <a href=' /canvas/gui/quickhelp.py#L27'>showHelp</a>(text,timeout)</tt>	Show help for timeout milliseconds if timeout is 0 then.
<tt style='background-color:#E8E8E8;'> canvas.gui.QuickHelp <a href=' /canvas/gui/quickhelp.py#L42'>clearHelp</a>()</tt>	Clear help text previously set with showhelp.
<tt style='background-color:#E8E8E8;'> canvas.gui.QuickHelp <a href=' /canvas/gui/quickhelp.py#L49'>showPermanentHelp</a>(text)</tt>	Set permanent help text the text may be temporarily overridden.
<tt style='background-color:#E8E8E8;'> canvas.gui.QuickHelp <a href=' /canvas/gui/quickhelp.py#L60'>currentText</a>()</tt>	Return the current shown text.
<tt style='background-color:#E8E8E8;'> canvas.gui.DynamicResizeToolBar <a href=' /canvas/gui/toolbar.py#L58'>__layout</a>(size)</tt>	Layout the buttons to fit inside size.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/toolbar.py#L86'>uniform_layout_helper</a>(items,contents_rect,expanding,spacing)</tt>	Set fixed sizes on 'items' so they can be laid out in contents_rect and fill the whole space.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L24'>updates_disabled</a>(widget)</tt>	Disable qwidget updates using qwidget setupdatesenabled.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L36'>signals_disabled</a>(qobject)</tt>	Disables signals on an instance of qobject.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L48'>disabled</a>(qobject)</tt>	Disables a disablable qobject instance.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L63'>StyledWidget_paintEvent</a>(event)</tt>	A default styled qwidget subclass paintevent function.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L78'>is_transparency_supported</a>()</tt>	Is window transparency supported by the current windowing system.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L103'>has_x11</a>()</tt>	Is qt build against x11 server.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L114'>is_x11_compositing_enabled</a>()</tt>	Is x11 compositing manager running.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L128'>is_dwm_compositing_enabled</a>()</tt>	Is desktop window manager compositing aero enabled.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L145'>gradient_darker</a>(grad,factor)</tt>	Return a copy of the qgradient darkened by factor.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L173'>brush_darker</a>(brush,factor)</tt>	Return a copy of the brush darkened by factor.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L185'>create_gradient</a>(base_color,stop,finalStop)</tt>	Create a default linear gradient using base_color.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L201'>create_css_gradient</a>(base_color,stop,finalStop)</tt>	Create a qt css linear gradient fragment based on the base_color.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L210'>css_gradient</a>(gradient)</tt>	Given an instance of a qlineargradient return an equivalent qt css gradient fragment.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L226'>message_critical</a>(text,title,informative_text,details)</tt>	Show a critical message.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L241'>message_warning</a>(text,title,informative_text,details)</tt>	Show a warning message.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L260'>message_information</a>(text,title,informative_text,details)</tt>	Show an information message box.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L274'>message_question</a>(text,title,informative_text,details)</tt>	Show an message box asking the user to select some predefined course of action set by buttons argument.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L285'>message</a>(icon,text,title,informative_text)</tt>	Show a message helper function.
<tt style='background-color:#E8E8E8;'> canvas.gui. <a href=' /canvas/gui/utils.py#L314'>OSX_NSURL_toLocalFile</a>(url)</tt>	Return os x nsurl file reference as local file path or '' if not nsurl.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolTree <a href=' /canvas/gui/tooltree.py#L69'>setFlattened</a>(flatten)</tt>	Show the actions in a flattened view.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolTree <a href=' /canvas/gui/tooltree.py#L83'>flattened</a>()</tt>	Are actions shown in a flattened tree a list.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolTree <a href=' /canvas/gui/tooltree.py#L102'>setRootIndex</a>(index)</tt>	Set the root index.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolTree <a href=' /canvas/gui/tooltree.py#L107'>rootIndex</a>()</tt>	Return the root index.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolTree <a href=' /canvas/gui/tooltree.py#L112'>view</a>()</tt>	Return the qtreeview instance used.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolTree <a href=' /canvas/gui/tooltree.py#L117'>setActionRole</a>(role)</tt>	Set the action role by default this is userrole.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolTree <a href=' /canvas/gui/tooltree.py#L136'>__onActivated</a>(index)</tt>	The item was activated if index has an action we need to trigger it.
<tt style='background-color:#E8E8E8;'> canvas.gui.ToolTree <a href=' /canvas/gui/tooltree.py#L154'>ensureCurrent</a>()</tt>	Ensure the view has a current item if one is available.
<tt style='background-color:#E8E8E8;'> canvas.gui.FlattenedTreeItemModel <a href=' /canvas/gui/tooltree.py#L238'>setSourceRootIndex</a>(rootIndex)</tt>	Set the source root index.
<tt style='background-color:#E8E8E8;'> canvas.gui.FlattenedTreeItemModel <a href=' /canvas/gui/tooltree.py#L246'>sourceRootIndex</a>()</tt>	Return the source root index.
<tt style='background-color:#E8E8E8;'> canvas.gui.FlattenedTreeItemModel <a href=' /canvas/gui/tooltree.py#L251'>setFlatteningMode</a>(mode)</tt>	Set the flattening mode.
<tt style='background-color:#E8E8E8;'> canvas.gui.FlattenedTreeItemModel <a href=' /canvas/gui/tooltree.py#L260'>flatteningMode</a>()</tt>	Return the flattening mode.
<tt style='background-color:#E8E8E8;'> canvas.gui.FlattenedTreeItemModel <a href=' /canvas/gui/tooltree.py#L314'>_indexKey</a>(index)</tt>	Return a key for index from the source model into the _source_offset map.
<tt style='background-color:#E8E8E8;'> canvas.gui.FlattenedTreeItemModel <a href=' /canvas/gui/tooltree.py#L327'>_indexFromKey</a>(key_path)</tt>	Return an source qmodelindex for the given key.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeArrowAnnotation <a href=' /canvas/scheme/annotations.py#L36'>set_line</a>(start_pos,end_pos)</tt>	Set arrow lines start and end position ( x y tuples).
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeArrowAnnotation <a href=' /canvas/scheme/annotations.py#L45'>start_pos</a>()</tt>	Start position of the arrow base point.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeArrowAnnotation <a href=' /canvas/scheme/annotations.py#L53'>end_pos</a>()</tt>	End position of the arrow arrow head points toward the end.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeArrowAnnotation <a href=' /canvas/scheme/annotations.py#L61'>set_geometry</a>(geometry)</tt>	Set the geometry of the arrow as a start and end position tuples (e.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeArrowAnnotation <a href=' /canvas/scheme/annotations.py#L70'>geometry</a>()</tt>	Return the start and end positions of the arrow.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeArrowAnnotation <a href=' /canvas/scheme/annotations.py#L78'>set_color</a>(color)</tt>	Set the fill color for the arrow as a string (#rgb, #rrggbb, #rrrgggbbb, #rrrrggggbbbb format or one of svg color keyword.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeArrowAnnotation <a href=' /canvas/scheme/annotations.py#L91'>color</a>()</tt>	The arrow's fill color.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeTextAnnotation <a href=' /canvas/scheme/annotations.py#L118'>set_rect</a>(rect)</tt>	Set the text geometry bounding rectangle ( x y width height tuple).
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeTextAnnotation <a href=' /canvas/scheme/annotations.py#L128'>rect</a>()</tt>	Text bounding rectangle.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeTextAnnotation <a href=' /canvas/scheme/annotations.py#L136'>set_geometry</a>(rect)</tt>	Set the text geometry (same as set_rect).
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeTextAnnotation <a href=' /canvas/scheme/annotations.py#L142'>geometry</a>()</tt>	Text annotation geometry (same as rect.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeTextAnnotation <a href=' /canvas/scheme/annotations.py#L150'>set_text</a>(text)</tt>	Set the annotation text.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeTextAnnotation <a href=' /canvas/scheme/annotations.py#L168'>set_font</a>(font)</tt>	Set the annotation's font as a dictionary of font properties at the moment only family and size are used.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeTextAnnotation <a href=' /canvas/scheme/annotations.py#L182'>font</a>()</tt>	Annotation's font property dictionary.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L88'>_can_process</a>()</tt>	Return a bool indicating if the manger can enter the main processing loop.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L96'>scheme</a>()</tt>	Return the parent class scheme instance.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L102'>start</a>()</tt>	Start the update loop.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L115'>stop</a>()</tt>	Stop the update loop.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L129'>pause</a>()</tt>	Pause the updates.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L149'>state</a>()</tt>	Return the current state.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L155'>_set_runtime_state</a>(state)</tt>	Set the runtime state.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L166'>runtime_state</a>()</tt>	Return the runtime state this can be signalmanager waiting.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L211'>signals_on_link</a>(link)</tt>	Return _signal instances representing the current values present on the link.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L225'>link_contents</a>(link)</tt>	Return the contents on link.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L260'>purge_link</a>(link)</tt>	Purge the link send none for all ids currently present.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L270'>_schedule</a>(signals)</tt>	Schedule a list of :class _signal for delivery.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L290'>_update_link</a>(link)</tt>	Schedule update of a single link.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L297'>process_queued</a>(max_nodes)</tt>	Process queued signals.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L329'>process_node</a>(node)</tt>	Process pending input signals for node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L354'>compress_signals</a>(signals)</tt>	Compress a list of :class _signal instances to be delivered.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L363'>send_to_node</a>(node,signals)</tt>	Abstract reimplement in subclass.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L374'>is_pending</a>(node)</tt>	Is node (class schemenode) scheduled for processing (i e.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L382'>pending_nodes</a>()</tt>	Return a list of pending nodes.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L395'>pending_input_signals</a>(node)</tt>	Return a list of pending input signals for node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L402'>remove_pending_signals</a>(node)</tt>	Remove pending signals for node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L412'>blocking_nodes</a>()</tt>	Return a list of nodes in a blocking state.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L422'>node_update_front</a>()</tt>	Return a list of nodes on the update front i e nodes scheduled for.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SignalManager <a href=' /canvas/scheme/signalmanager.py#L485'>_update</a>()</tt>	Schedule processing at a later time.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/signalmanager.py#L494'>can_enable_dynamic</a>(link,value)</tt>	Can the a dynamic link (:class schemelink) be enabled forvalue.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/signalmanager.py#L501'>compress_signals</a>(signals)</tt>	Compress a list of signals.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/signalmanager.py#L522'>dependent_nodes</a>(scheme,node)</tt>	Return a list of all nodes in breadth first order in scheme that are dependent on node,.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/signalmanager.py#L570'>unique</a>(iterable)</tt>	Return unique elements of iterable while preserving their order.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeNode <a href=' /canvas/scheme/node.py#L73'>input_channels</a>()</tt>	Return a list of input channels (:class inputsignal) for the node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeNode <a href=' /canvas/scheme/node.py#L79'>output_channels</a>()</tt>	Return a list of output channels (:class outputsignal) for the node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeNode <a href=' /canvas/scheme/node.py#L85'>input_channel</a>(name)</tt>	Return the input channel matching name raise a valueerror.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeNode <a href=' /canvas/scheme/node.py#L97'>output_channel</a>(name)</tt>	Return the output channel matching name raise an valueerror.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeNode <a href=' /canvas/scheme/node.py#L112'>set_title</a>(title)</tt>	Set the node title.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeNode <a href=' /canvas/scheme/node.py#L120'>title</a>()</tt>	The node title.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeNode <a href=' /canvas/scheme/node.py#L131'>set_position</a>(pos)</tt>	Set the position ( x y tuple) of the node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeNode <a href=' /canvas/scheme/node.py#L139'>position</a>()</tt>	X y tuple containing the position of the node in the scheme.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeNode <a href=' /canvas/scheme/node.py#L150'>set_progress</a>(value)</tt>	Set the progress value.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeNode <a href=' /canvas/scheme/node.py#L158'>progress</a>()</tt>	The current progress value -1 if progress is not set.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeNode <a href=' /canvas/scheme/node.py#L169'>set_processing_state</a>(state)</tt>	Set the node processing state.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeNode <a href=' /canvas/scheme/node.py#L177'>processing_state</a>()</tt>	The node processing state 0 for not processing 1 the node is busy.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeNode <a href=' /canvas/scheme/node.py#L210'>set_state_message</a>(message)</tt>	Set a message to be displayed by a scheme view for this node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeNode <a href=' /canvas/scheme/node.py#L221'>state_messages</a>()</tt>	Return a list of all state messages.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetsScheme <a href=' /canvas/scheme/widgetsscheme.py#L70'>widget_for_node</a>(node)</tt>	Return the owwidget instance for a node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetsScheme <a href=' /canvas/scheme/widgetsscheme.py#L76'>node_for_widget</a>(widget)</tt>	Return the schemenode instance for the widget.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetsScheme <a href=' /canvas/scheme/widgetsscheme.py#L82'>sync_node_properties</a>()</tt>	Sync the widget settings/properties with the schemenode properties.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L190'>set_scheme</a>(scheme)</tt>	Set the :class widgetsscheme instance to manage.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L208'>scheme</a>()</tt>	Return the scheme instance on which this manager is installed.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L214'>signal_manager</a>()</tt>	Return the signal manager in use on the :func scheme.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L220'>widget_for_node</a>(node)</tt>	Return the owwidget instance for the scheme node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L243'>node_for_widget</a>(widget)</tt>	Return the schemenode instance for the owwidget.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L251'>widget_properties</a>(node)</tt>	Return the current widget properties/settings.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L269'>set_creation_policy</a>(policy)</tt>	Set the widget creation policy parameters.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L293'>creation_policy</a>()</tt>	Return the current widget creation policy returns.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L303'>add_widget_for_node</a>(node)</tt>	Create a new owwidget instance for the corresponding scheme node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L342'>remove_widget_for_node</a>(node)</tt>	Remove the owwidget instance for node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L377'>_delete_widget</a>(widget)</tt>	Delete the owbasewidget instance.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L397'>create_widget_instance</a>(node)</tt>	Create a owwidget instance for the node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L530'>node_processing_state</a>(node)</tt>	Return the processing state flags for the node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L545'>widget_processing_state</a>(widget)</tt>	Return the processing state flags for the widget.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L580'>__on_help_request</a>()</tt>	Help shortcut was pressed we send a qwhatsthisclickedevent to.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L598'>__on_activate_parent</a>()</tt>	Activate parent shortcut was pressed.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L605'>__initialize_widget_state</a>(node,widget)</tt>	Initialize the tracked info/warning/error message state.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L614'>__on_widget_state_changed</a>(msg)</tt>	The owbasewidget info/warning/error state has changed.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L626'>__on_processing_state_changed</a>(state)</tt>	A widget processing state has changed (progressbarinit/finished).
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L642'>__on_processing_started</a>(node)</tt>	Signal manager entered the input update loop for the node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L653'>__on_processing_finished</a>(node)</tt>	Signal manager exited the input update loop for the node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L669'>__on_blocking_state_changed</a>(state)</tt>	Owwidget blocking state has changed.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetManager <a href=' /canvas/scheme/widgetsscheme.py#L690'>__update_node_processing_state</a>(node)</tt>	Update the node processing_state to reflect the widget state.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetsSignalManager <a href=' /canvas/scheme/widgetsscheme.py#L731'>send</a>(widget,channelname,value,signal_id)</tt>	Send method compatible with owbasewidget.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetsSignalManager <a href=' /canvas/scheme/widgetsscheme.py#L759'>is_blocking</a>(node)</tt>	Reimplemented from signalmanager.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetsSignalManager <a href=' /canvas/scheme/widgetsscheme.py#L766'>send_to_node</a>(node,signals)</tt>	Implementation of signalmanager send_to_node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetsSignalManager <a href=' /canvas/scheme/widgetsscheme.py#L776'>compress_signals</a>(signals)</tt>	Reimplemented from :func signalmanager compress_signals.
<tt style='background-color:#E8E8E8;'> canvas.scheme.WidgetsSignalManager <a href=' /canvas/scheme/widgetsscheme.py#L782'>process_signals_for_widget</a>(node,widget,signals)</tt>	Process new signals for the owbasewidget.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/widgetsscheme.py#L871'>mock_error_owwidget</a>(node,message)</tt>	Create a mock owwidget instance for node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L111'>nodes</a>()</tt>	A list of all nodes (:class schemenode) currently in the scheme.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L118'>links</a>()</tt>	A list of all links (:class schemelink) currently in the scheme.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L125'>annotations</a>()</tt>	A list of all annotations (:class baseschemeannotation) in the.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L134'>set_title</a>(title)</tt>	Set the scheme title text.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L142'>title</a>()</tt>	The title human readable string of the scheme.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L150'>set_description</a>(description)</tt>	Set the scheme description text.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L158'>description</a>()</tt>	Scheme description text.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L166'>add_node</a>(node)</tt>	Add a node to the scheme an error is raised if the node is.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L185'>new_node</a>(description,title,position,properties)</tt>	Create a new :class schemenode and add it to the scheme.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L221'>remove_node</a>(node)</tt>	Remove a node from the scheme all links into and out of the.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L242'>__remove_node_links</a>(node)</tt>	Remove all links for node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L256'>add_link</a>(link)</tt>	Add a link to the scheme.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L279'>new_link</a>(source_node,source_channel,sink_node,sink_channel)</tt>	Create a new :class schemelink from arguments and add it to.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L308'>remove_link</a>(link)</tt>	Remove a link from the scheme.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L329'>check_connect</a>(link)</tt>	Check if the link can be added to the scheme and raise an appropriate exception.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L377'>creates_cycle</a>(link)</tt>	Return true if link would introduce a cycle in the scheme.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L392'>compatible_channels</a>(link)</tt>	Return true if the channels in link have compatible types.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L404'>can_connect</a>(link)</tt>	Return true if link can be added to the scheme.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L421'>upstream_nodes</a>(start_node)</tt>	Return a set of all nodes upstream from start_node (i e.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L444'>downstream_nodes</a>(start_node)</tt>	Return a set of all nodes downstream from start_node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L466'>is_ancestor</a>(node,child)</tt>	Return true if node is an ancestor node of child is upstream of the child in the workflow.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L479'>children</a>(node)</tt>	Return a set of all children of node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L485'>parents</a>(node)</tt>	Return a set of all parents of node.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L491'>input_links</a>(node)</tt>	Return a list of all input links (:class schemelink) connected.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L499'>output_links</a>(node)</tt>	Return a list of all output links (:class schemelink) connected.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L521'>propose_links</a>(source_node,sink_node)</tt>	Return a list of ordered (:class outputsignal, :class inputsignal, weight) tuples that could be added to.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L565'>add_annotation</a>(annotation)</tt>	Add an annotation (:class baseschemeannotation subclass) instance to the scheme.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L578'>remove_annotation</a>(annotation)</tt>	Remove the annotation instance from the scheme.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L587'>clear</a>()</tt>	Remove all nodes links and annotation items from the scheme.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L604'>sync_node_properties</a>()</tt>	Called before saving allowing a subclass to update/sync.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L613'>save_to</a>(stream,pretty,pickle_fallback)</tt>	Save the scheme as an xml formated file to stream see also.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L630'>load_from</a>(stream)</tt>	Load the scheme from xml formated stream.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L643'>set_runtime_env</a>(key,value)</tt>	Set a runtime environment variable key to value.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L652'>get_runtime_env</a>(key,default)</tt>	Return a runtime environment variable for key.
<tt style='background-color:#E8E8E8;'> canvas.scheme.Scheme <a href=' /canvas/scheme/scheme.py#L658'>runtime_env</a>()</tt>	Return a view to the full runtime environment.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/link.py#L16'>compatible_channels</a>(source_channel,sink_channel)</tt>	Do the channels in link have compatible types i e can they be.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/link.py#L30'>can_connect</a>(source_node,sink_node)</tt>	Return true if any output from source_node can be connected to any input of sink_node.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/link.py#L39'>possible_links</a>(source_node,sink_node)</tt>	Return a list of outputsignal inputsignal tuples that can connect the two nodes.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeLink <a href=' /canvas/scheme/link.py#L132'>source_type</a>()</tt>	Return the type of the source channel.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeLink <a href=' /canvas/scheme/link.py#L138'>sink_type</a>()</tt>	Return the type of the sink channel.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeLink <a href=' /canvas/scheme/link.py#L144'>is_dynamic</a>()</tt>	Is this link dynamic.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeLink <a href=' /canvas/scheme/link.py#L152'>set_enabled</a>(enabled)</tt>	Enable/disable the link.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeLink <a href=' /canvas/scheme/link.py#L160'>enabled</a>()</tt>	Is this link enabled.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeLink <a href=' /canvas/scheme/link.py#L168'>set_dynamic_enabled</a>(enabled)</tt>	Enable/disable the dynamic link has no effect if the link.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeLink <a href=' /canvas/scheme/link.py#L178'>dynamic_enabled</a>()</tt>	Is this a dynamic link and is dynamic_enabled set to true.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeLink <a href=' /canvas/scheme/link.py#L187'>set_runtime_state</a>(state)</tt>	Set the link's runtime state.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeLink <a href=' /canvas/scheme/link.py#L207'>set_tool_tip</a>(tool_tip)</tt>	Set the link tool tip.
<tt style='background-color:#E8E8E8;'> canvas.scheme.SchemeLink <a href=' /canvas/scheme/link.py#L214'>tool_tip</a>()</tt>	Link tool tip.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/readwrite.py#L37'>string_eval</a>(source)</tt>	Evaluate a python string literal source raise valueerror if.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/readwrite.py#L52'>tuple_eval</a>(source)</tt>	Evaluate a python tuple literal source where the elements are constrained to be int float or string.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/readwrite.py#L78'>terminal_eval</a>(source)</tt>	Evaluate a python 'constant' string number none true false source.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/readwrite.py#L112'>sniff_version</a>(stream)</tt>	Parse a scheme stream and return the scheme's serialization version string.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/readwrite.py#L130'>parse_scheme</a>(scheme,stream,error_handler,allow_pickle_data)</tt>	Parse a saved scheme from stream and populate a scheme instance (:class scheme).
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/readwrite.py#L179'>scheme_node_from_element</a>(node_el,registry)</tt>	Create a schemenode from an element instance.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/readwrite.py#L197'>parse_scheme_v_2_0</a>(etree,scheme,error_handler,widget_registry)</tt>	Parse an elementtree instance.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/readwrite.py#L321'>parse_scheme_v_1_0</a>(etree,scheme,error_handler,widget_registry)</tt>	Elementtree instance of an old ows scheme format.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/readwrite.py#L752'>inf_range</a>(start,step)</tt>	Return an infinite range iterator.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/readwrite.py#L760'>scheme_to_etree</a>(scheme,data_format,pickle_fallback)</tt>	Return an xml etree elementtree representation of the scheme.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/readwrite.py#L884'>scheme_to_ows_stream</a>(scheme,stream,pretty,pickle_fallback)</tt>	Write scheme to a a stream in orange scheme ows v 2 0 format.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/readwrite.py#L915'>indent</a>(element,level,indent)</tt>	Indent an instance of a :class element based on.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/readwrite.py#L944'>dumps</a>(obj,format,prettyprint,pickle_fallback)</tt>	Serialize obj using format ('json' or 'literal') and return its string representation and the used serialization format ('literal',.
<tt style='background-color:#E8E8E8;'> canvas.scheme. <a href=' /canvas/scheme/readwrite.py#L999'>literal_dumps</a>(obj,prettyprint,indent)</tt>	Write obj into a string as a python literal.
<tt style='background-color:#E8E8E8;'> canvas.help.HelpManager <a href=' /canvas/help/manager.py#L33'>set_registry</a>(registry)</tt>	Set the widget registry for which the manager should provide help.
<tt style='background-color:#E8E8E8;'> canvas.help.HelpManager <a href=' /canvas/help/manager.py#L44'>registry</a>()</tt>	Return the previously set with set_registry.
<tt style='background-color:#E8E8E8;'> canvas.help. <a href=' /canvas/help/manager.py#L137'>is_develop_egg</a>(dist)</tt>	Is the distribution installed in development mode setup py develop.
<tt style='background-color:#E8E8E8;'> canvas.help. <a href=' /canvas/help/manager.py#L148'>left_trim_lines</a>(lines)</tt>	Remove all unnecessary leading space from lines.
<tt style='background-color:#E8E8E8;'> canvas.help. <a href=' /canvas/help/manager.py#L163'>trim_trailing_lines</a>(lines)</tt>	Trim trailing blank lines.
<tt style='background-color:#E8E8E8;'> canvas.help. <a href=' /canvas/help/manager.py#L173'>trim_leading_lines</a>(lines)</tt>	Trim leading blank lines.
<tt style='background-color:#E8E8E8;'> canvas.help. <a href=' /canvas/help/manager.py#L183'>trim</a>(string)</tt>	Trim a string in pep-256 compatible way.
<tt style='background-color:#E8E8E8;'> canvas.help. <a href=' /canvas/help/manager.py#L218'>get_meta_entry</a>(dist,name)</tt>	Get the contents of the named entry from the distributions pkg-info file.
<tt style='background-color:#E8E8E8;'> canvas.help. <a href=' /canvas/help/manager.py#L226'>get_dist_url</a>(dist)</tt>	Return the 'url' of the distribution as passed to setup function.
<tt style='background-color:#E8E8E8;'> canvas.application.UserSettingsDialog <a href=' /canvas/application/settings.py#L199'>__setupUi</a>()</tt>	Set up the ui.
<tt style='background-color:#E8E8E8;'> canvas.application. <a href=' /canvas/application/welcomedialog.py#L18'>decorate_welcome_icon</a>(icon,background_color)</tt>	Return a qicon with a circle shaped background.
<tt style='background-color:#E8E8E8;'> canvas.application.WelcomeDialog <a href=' /canvas/application/welcomedialog.py#L135'>setShowAtStartup</a>(show)</tt>	Set the 'show at startup' check box state.
<tt style='background-color:#E8E8E8;'> canvas.application.WelcomeDialog <a href=' /canvas/application/welcomedialog.py#L142'>showAtStartup</a>()</tt>	Return the 'show at startup' check box state.
<tt style='background-color:#E8E8E8;'> canvas.application.WelcomeDialog <a href=' /canvas/application/welcomedialog.py#L148'>addRow</a>(actions,background)</tt>	Add a row with actions.
<tt style='background-color:#E8E8E8;'> canvas.application.WelcomeDialog <a href=' /canvas/application/welcomedialog.py#L154'>insertRow</a>(index,actions,background)</tt>	Insert a row with actions at index.
<tt style='background-color:#E8E8E8;'> canvas.application.WelcomeDialog <a href=' /canvas/application/welcomedialog.py#L169'>insertAction</a>(row,index,action,background)</tt>	Insert action in row in position index.
<tt style='background-color:#E8E8E8;'> canvas.application.WelcomeDialog <a href=' /canvas/application/welcomedialog.py#L176'>insertButton</a>(row,index,button)</tt>	Insert button in row in position index.
<tt style='background-color:#E8E8E8;'> canvas.application.WelcomeDialog <a href=' /canvas/application/welcomedialog.py#L184'>createButton</a>(action,background)</tt>	Create a tool button for action.
<tt style='background-color:#E8E8E8;'> canvas.application.WelcomeDialog <a href=' /canvas/application/welcomedialog.py#L200'>buttonAt</a>(i,j)</tt>	Return the button at i-t row and j-th column.
<tt style='background-color:#E8E8E8;'> canvas.application.WelcomeDialog <a href=' /canvas/application/welcomedialog.py#L208'>triggeredAction</a>()</tt>	Return the action that was triggered by the user.
<tt style='background-color:#E8E8E8;'> canvas.application.WelcomeDialog <a href=' /canvas/application/welcomedialog.py#L218'>__on_actionTriggered</a>(action)</tt>	Called when the button action is triggered.
<tt style='background-color:#E8E8E8;'> canvas.application.SplitterResizer <a href=' /canvas/application/canvastooldock.py#L50'>setSize</a>(size)</tt>	Set the size of the controlled widget either width or height depending on the orientation.
<tt style='background-color:#E8E8E8;'> canvas.application.SplitterResizer <a href=' /canvas/application/canvastooldock.py#L61'>size</a>()</tt>	Return the size of the widget in the splitter either height of width depending on the splitter orientation.
<tt style='background-color:#E8E8E8;'> canvas.application.SplitterResizer <a href=' /canvas/application/canvastooldock.py#L83'>setSplitterAndWidget</a>(splitter,widget)</tt>	Set the qsplitter and qwidget instance the resizer should control.
<tt style='background-color:#E8E8E8;'> canvas.application.SplitterResizer <a href=' /canvas/application/canvastooldock.py#L113'>toogleExpandedAction</a>()</tt>	Return a qaction that can be used to toggle expanded state.
<tt style='background-color:#E8E8E8;'> canvas.application.SplitterResizer <a href=' /canvas/application/canvastooldock.py#L118'>open</a>()</tt>	Open the controlled widget expand it to sizehint.
<tt style='background-color:#E8E8E8;'> canvas.application.SplitterResizer <a href=' /canvas/application/canvastooldock.py#L138'>close</a>()</tt>	Close the controlled widget shrink to size 0.
<tt style='background-color:#E8E8E8;'> canvas.application.SplitterResizer <a href=' /canvas/application/canvastooldock.py#L151'>setExpanded</a>(expanded)</tt>	Set the expanded state.
<tt style='background-color:#E8E8E8;'> canvas.application.SplitterResizer <a href=' /canvas/application/canvastooldock.py#L161'>expanded</a>()</tt>	Return the expanded state.
<tt style='background-color:#E8E8E8;'> canvas.application.SplitterResizer <a href=' /canvas/application/canvastooldock.py#L166'>__update</a>()</tt>	Update the splitter sizes.
<tt style='background-color:#E8E8E8;'> canvas.application.QuickHelpWidget <a href=' /canvas/application/canvastooldock.py#L210'>minimumSizeHint</a>()</tt>	Reimplemented to allow the splitter to resize the widget with a continuous animation.
<tt style='background-color:#E8E8E8;'> canvas.application.CanvasToolDock <a href=' /canvas/application/canvastooldock.py#L258'>setQuickHelpVisible</a>(state)</tt>	Set the quick help box visibility status.
<tt style='background-color:#E8E8E8;'> canvas.application.CanvasToolDock <a href=' /canvas/application/canvastooldock.py#L266'>setQuickHelpAnimationEnabled</a>(enabled)</tt>	Enable/disable the quick help animation.
<tt style='background-color:#E8E8E8;'> canvas.application.CanvasToolDock <a href=' /canvas/application/canvastooldock.py#L271'>toogleQuickHelpAction</a>()</tt>	Return a checkable qaction for help show/hide.
<tt style='background-color:#E8E8E8;'> canvas.application.QuickCategoryToolbar <a href=' /canvas/application/canvastooldock.py#L288'>setModel</a>(model)</tt>	Set the registry model.
<tt style='background-color:#E8E8E8;'> canvas.application.QuickCategoryToolbar <a href=' /canvas/application/canvastooldock.py#L304'>__initFromModel</a>(model)</tt>	Initialize the toolbar from the model.
<tt style='background-color:#E8E8E8;'> canvas.application.QuickCategoryToolbar <a href=' /canvas/application/canvastooldock.py#L312'>createActionForItem</a>(item)</tt>	Create the qaction instance for item.
<tt style='background-color:#E8E8E8;'> canvas.application.QuickCategoryToolbar <a href=' /canvas/application/canvastooldock.py#L320'>createButtonForAction</a>(action)</tt>	Create a button for the action.
<tt style='background-color:#E8E8E8;'> canvas.application.CategoryPopupMenu <a href=' /canvas/application/canvastooldock.py#L405'>setCategoryItem</a>(item)</tt>	Set the category root item (:class qstandarditem).
<tt style='background-color:#E8E8E8;'> canvas.application. <a href=' /canvas/application/widgettoolbox.py#L34'>iter_item</a>(item)</tt>	Iterate over child items of a qstandarditem.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolGrid <a href=' /canvas/application/widgettoolbox.py#L63'>setModel</a>(model,rootIndex)</tt>	Set a model (qstandarditemmodel) for the tool grid the.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolGrid <a href=' /canvas/application/widgettoolbox.py#L86'>model</a>()</tt>	Return the model for the tool grid.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolGrid <a href=' /canvas/application/widgettoolbox.py#L92'>rootIndex</a>()</tt>	Return the root index of the model.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolGrid <a href=' /canvas/application/widgettoolbox.py#L98'>setActionRole</a>(role)</tt>	Set the action role this is the model role containing a.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolGrid <a href=' /canvas/application/widgettoolbox.py#L109'>actionRole</a>()</tt>	Return the action role.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolGrid <a href=' /canvas/application/widgettoolbox.py#L135'>__initFromModel</a>(model,rootIndex)</tt>	Initialize the grid from the model with rootindex as the root.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolGrid <a href=' /canvas/application/widgettoolbox.py#L149'>__insertItem</a>(index,item)</tt>	Insert a widget action (from a qstandarditem) at index.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolGrid <a href=' /canvas/application/widgettoolbox.py#L166'>__on_rowsInserted</a>(parent,start,end)</tt>	Insert items from range start end into the grid.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolGrid <a href=' /canvas/application/widgettoolbox.py#L176'>__on_rowsRemoved</a>(parent,start,end)</tt>	Remove items from range start end from the grid.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolGrid <a href=' /canvas/application/widgettoolbox.py#L186'>__startDrag</a>(button)</tt>	Start a drag from button.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolBox <a href=' /canvas/application/widgettoolbox.py#L262'>setIconSize</a>(size)</tt>	Set the widget icon size icons in the button grid.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolBox <a href=' /canvas/application/widgettoolbox.py#L270'>iconSize</a>()</tt>	Return the widget buttons icon size.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolBox <a href=' /canvas/application/widgettoolbox.py#L279'>setButtonSize</a>(size)</tt>	Set fixed widget button size.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolBox <a href=' /canvas/application/widgettoolbox.py#L287'>buttonSize</a>()</tt>	Return the widget button size.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolBox <a href=' /canvas/application/widgettoolbox.py#L295'>saveState</a>()</tt>	Return the toolbox state (as a qbytearray).
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolBox <a href=' /canvas/application/widgettoolbox.py#L315'>restoreState</a>(state)</tt>	Restore the toolbox from a :class qbytearray state.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolBox <a href=' /canvas/application/widgettoolbox.py#L337'>setModel</a>(model)</tt>	Set the widget registry model (:class qstandarditemmodel) for this toolbox.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolBox <a href=' /canvas/application/widgettoolbox.py#L360'>__insertItem</a>(item,index)</tt>	Insert category item at index.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolBox <a href=' /canvas/application/widgettoolbox.py#L400'>__on_itemChanged</a>(item)</tt>	Item contents have changed.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolBox <a href=' /canvas/application/widgettoolbox.py#L411'>__on_rowsInserted</a>(parent,start,end)</tt>	Items have been inserted in the model.
<tt style='background-color:#E8E8E8;'> canvas.application.WidgetToolBox <a href=' /canvas/application/widgettoolbox.py#L422'>__on_rowsRemoved</a>(parent,start,end)</tt>	Rows have been removed from the model.
<tt style='background-color:#E8E8E8;'> canvas.application.SchemeInfoEdit <a href=' /canvas/application/schemeinfo.py#L44'>setScheme</a>(scheme)</tt>	Set the scheme to display/edit.
<tt style='background-color:#E8E8E8;'> canvas.application.SchemeInfoEdit <a href=' /canvas/application/schemeinfo.py#L58'>commit</a>()</tt>	Commit the current contents of the editor widgets back to the scheme.
<tt style='background-color:#E8E8E8;'> canvas.application.SchemeInfoDialog <a href=' /canvas/application/schemeinfo.py#L151'>setShowAtNewScheme</a>(checked)</tt>	Set the 'show at new scheme' check state.
<tt style='background-color:#E8E8E8;'> canvas.application.SchemeInfoDialog <a href=' /canvas/application/schemeinfo.py#L157'>showAtNewScheme</a>()</tt>	Return the check state of the 'show at new scheme' check box.
<tt style='background-color:#E8E8E8;'> canvas.application.SchemeInfoDialog <a href=' /canvas/application/schemeinfo.py#L171'>setScheme</a>(scheme)</tt>	Set the scheme to display/edit.
<tt style='background-color:#E8E8E8;'> canvas.application.OutputView <a href=' /canvas/application/outputview.py#L48'>setMaximumLines</a>(lines)</tt>	Set the maximum number of lines to keep displayed.
<tt style='background-color:#E8E8E8;'> canvas.application.OutputView <a href=' /canvas/application/outputview.py#L56'>maximumLines</a>()</tt>	Return the maximum number of lines in the display.
<tt style='background-color:#E8E8E8;'> canvas.application.OutputView <a href=' /canvas/application/outputview.py#L62'>clear</a>()</tt>	Clear the displayed text.
<tt style='background-color:#E8E8E8;'> canvas.application.OutputView <a href=' /canvas/application/outputview.py#L68'>setCurrentCharFormat</a>(charformat)</tt>	Set the qtextcharformat to be used when writing.
<tt style='background-color:#E8E8E8;'> canvas.application.OutputView <a href=' /canvas/application/outputview.py#L77'>toPlainText</a>()</tt>	Return the full contents of the output view.
<tt style='background-color:#E8E8E8;'> canvas.application.OutputView <a href=' /canvas/application/outputview.py#L104'>formated</a>(color,background,weight,italic)</tt>	Return a formated file like object proxy.
<tt style='background-color:#E8E8E8;'> canvas.application. <a href=' /canvas/application/outputview.py#L116'>update_char_format</a>(baseformat,color,background,weight)</tt>	Return a copy of baseformat :class qtextcharformat with updated color weight background and font properties.
<tt style='background-color:#E8E8E8;'> canvas.application. <a href=' /canvas/application/outputview.py#L140'>update_font</a>(basefont,weight,italic,underline)</tt>	Return a copy of basefont :class qfont with updated properties.
<tt style='background-color:#E8E8E8;'> canvas.application.workflows. <a href=' /canvas/application/workflows/__init__.py#L15'>list_schemes</a>(package)</tt>	Return a list of example workflows.
<tt style='background-color:#E8E8E8;'> canvas.application.workflows. <a href=' /canvas/application/workflows/__init__.py#L33'>workflow_entry_points</a>()</tt>	Return an iterator over all example workflows.
<tt style='background-color:#E8E8E8;'> canvas.application.workflows. <a href=' /canvas/application/workflows/__init__.py#L42'>example_workflows</a>()</tt>	Return all known example workflows.
<tt style='background-color:#E8E8E8;'> canvas.application.workflows.ExampleWorkflow <a href=' /canvas/application/workflows/__init__.py#L90'>abspath</a>()</tt>	Return absolute filename for the scheme if possible else raise an valueerror.
<tt style='background-color:#E8E8E8;'> canvas.application.workflows.ExampleWorkflow <a href=' /canvas/application/workflows/__init__.py#L104'>stream</a>()</tt>	Return the workflow file as an open stream.
<tt style='background-color:#E8E8E8;'> canvas.utils. <a href=' /canvas/utils/propertybindings.py#L20'>find_meta_property</a>(obj,name)</tt>	Return a named (name) qmetaproperty of a qobject instance obj.
<tt style='background-color:#E8E8E8;'> canvas.utils. <a href=' /canvas/utils/propertybindings.py#L35'>find_notifier</a>(obj,name)</tt>	Return the notifier signal name (str) for the property of object (instance of qobject).
<tt style='background-color:#E8E8E8;'> canvas.utils.AbstractBoundProperty <a href=' /canvas/utils/propertybindings.py#L72'>set</a>(value)</tt>	Set value to the property.
<tt style='background-color:#E8E8E8;'> canvas.utils.AbstractBoundProperty <a href=' /canvas/utils/propertybindings.py#L78'>get</a>()</tt>	Return the property value.
<tt style='background-color:#E8E8E8;'> canvas.utils.AbstractBoundProperty <a href=' /canvas/utils/propertybindings.py#L84'>notifyChanged</a>()</tt>	Notify the binding of a change in the property value.
<tt style='background-color:#E8E8E8;'> canvas.utils.AbstractBoundProperty <a href=' /canvas/utils/propertybindings.py#L98'>bindTo</a>(source)</tt>	Bind this property to source (instance of abstractboundproperty).
<tt style='background-color:#E8E8E8;'> canvas.utils.AbstractBoundProperty <a href=' /canvas/utils/propertybindings.py#L113'>unbind</a>()</tt>	Unbind the currently bound property (set with bindto).
<tt style='background-color:#E8E8E8;'> canvas.utils.AbstractBoundProperty <a href=' /canvas/utils/propertybindings.py#L121'>update</a>()</tt>	Update the property value from source property (bindto).
<tt style='background-color:#E8E8E8;'> canvas.utils.AbstractBoundProperty <a href=' /canvas/utils/propertybindings.py#L131'>reset</a>()</tt>	Reset the property if possible.
<tt style='background-color:#E8E8E8;'> canvas.utils.PropertyBindingExpr <a href=' /canvas/utils/propertybindings.py#L158'>sources</a>()</tt>	Return all source property bindings appearing in the expression namespace.
<tt style='background-color:#E8E8E8;'> canvas.utils.BindingManager <a href=' /canvas/utils/propertybindings.py#L275'>bindings</a>()</tt>	Return target source binding tuples.
<tt style='background-color:#E8E8E8;'> canvas.utils. <a href=' /canvas/utils/propertybindings.py#L314'>binding_for</a>(obj,name,parent)</tt>	Return a suitable binding for property name of an obj.
<tt style='background-color:#E8E8E8;'> canvas.utils. <a href=' /canvas/utils/__init__.py#L4'>dotted_getattr</a>(obj,name)</tt>	Getattr like function accepting a dotted name for attribute lookup.
<tt style='background-color:#E8E8E8;'> canvas.utils. <a href=' /canvas/utils/__init__.py#L11'>qualified_name</a>(obj)</tt>	Return a qualified name for obj type or function.
<tt style='background-color:#E8E8E8;'> canvas.utils. <a href=' /canvas/utils/__init__.py#L21'>name_lookup</a>(qualified_name)</tt>	Return the object referenced by a qualified name dotted name.
<tt style='background-color:#E8E8E8;'> canvas.utils. <a href=' /canvas/utils/__init__.py#L33'>asmodule</a>(module)</tt>	Return the :class module instance named by module.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewDialog <a href=' /canvas/preview/previewdialog.py#L75'>setItems</a>(items)</tt>	Set the items a list of strings for preview/selection.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewDialog <a href=' /canvas/preview/previewdialog.py#L81'>setModel</a>(model)</tt>	Set the model for preview/selection.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewDialog <a href=' /canvas/preview/previewdialog.py#L86'>model</a>()</tt>	Return the model.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewDialog <a href=' /canvas/preview/previewdialog.py#L94'>setCurrentIndex</a>(index)</tt>	Set the current selected shown index.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewDialog <a href=' /canvas/preview/previewdialog.py#L99'>setHeading</a>(heading)</tt>	Set heading as the heading string ('<h3>preview</h3>' by default).
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewDialog <a href=' /canvas/preview/previewdialog.py#L106'>heading</a>()</tt>	Return the heading string.
<tt style='background-color:#E8E8E8;'> canvas.preview.TextLabel <a href=' /canvas/preview/previewbrowser.py#L107'>setText</a>(text)</tt>	Set the text string to display.
<tt style='background-color:#E8E8E8;'> canvas.preview.TextLabel <a href=' /canvas/preview/previewbrowser.py#L115'>text</a>()</tt>	Return the text.
<tt style='background-color:#E8E8E8;'> canvas.preview.TextLabel <a href=' /canvas/preview/previewbrowser.py#L120'>setTextElideMode</a>(mode)</tt>	Set elide mode (qt textelidemode).
<tt style='background-color:#E8E8E8;'> canvas.preview.TextLabel <a href=' /canvas/preview/previewbrowser.py#L130'>setAlignment</a>(align)</tt>	Set text alignment (qt alignment).
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewBrowser <a href=' /canvas/preview/previewbrowser.py#L241'>setModel</a>(model)</tt>	Set the item model for preview.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewBrowser <a href=' /canvas/preview/previewbrowser.py#L261'>model</a>()</tt>	Return the item model.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewBrowser <a href=' /canvas/preview/previewbrowser.py#L266'>setPreviewDelegate</a>(delegate)</tt>	Set the delegate to render the preview images.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewBrowser <a href=' /canvas/preview/previewbrowser.py#L275'>setCurrentIndex</a>(index)</tt>	Set the selected preview item index.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewBrowser <a href=' /canvas/preview/previewbrowser.py#L291'>currentIndex</a>()</tt>	Return the current selected index.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewBrowser <a href=' /canvas/preview/previewbrowser.py#L296'>__onSelectionChanged</a>()</tt>	Selected item in the preview list has changed.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewBrowser <a href=' /canvas/preview/previewbrowser.py#L312'>__onDataChanged</a>(topleft,bottomRight)</tt>	Data changed update the preview if current index in the changed range.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewBrowser <a href=' /canvas/preview/previewbrowser.py#L321'>__onDoubleClicked</a>(index)</tt>	Double click on an item in the preview item list.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewBrowser <a href=' /canvas/preview/previewbrowser.py#L326'>__update</a>()</tt>	Update the current description.
<tt style='background-color:#E8E8E8;'> canvas.preview. <a href=' /canvas/preview/scanner.py#L51'>preview_parse</a>(scheme_file)</tt>	Return the title description and thumbnail svg image data from a scheme_file can be a file path or a file-like object.
<tt style='background-color:#E8E8E8;'> canvas.preview. <a href=' /canvas/preview/scanner.py#L70'>scheme_svg_thumbnail</a>(scheme_file)</tt>	Load the scheme scheme from a file and return it's svg image representation.
<tt style='background-color:#E8E8E8;'> canvas.preview. <a href=' /canvas/preview/scanner.py#L97'>scan_update</a>(item)</tt>	Given a preview item scan the scheme file ('item path') and update the.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewModel <a href=' /canvas/preview/previewmodel.py#L52'>delayedScanUpdate</a>(delay)</tt>	Run a delayed preview item scan update.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewItem <a href=' /canvas/preview/previewmodel.py#L109'>name</a>()</tt>	Return the name title of the item (same as text().
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewItem <a href=' /canvas/preview/previewmodel.py#L114'>setName</a>(value)</tt>	Set the item name value if not empty will be used as.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewItem <a href=' /canvas/preview/previewmodel.py#L127'>description</a>()</tt>	Return the detailed description for the item.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewItem <a href=' /canvas/preview/previewmodel.py#L146'>thumbnail</a>()</tt>	Return the thumbnail svg string for the preview item.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewItem <a href=' /canvas/preview/previewmodel.py#L155'>setThumbnail</a>(thumbnail)</tt>	Set the thumbnail svg contents as a string.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewItem <a href=' /canvas/preview/previewmodel.py#L174'>path</a>()</tt>	Return the path item data.
<tt style='background-color:#E8E8E8;'> canvas.preview.PreviewItem <a href=' /canvas/preview/previewmodel.py#L179'>setPath</a>(path)</tt>	Set the path data of the item.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetDescription <a href=' /canvas/registry/description.py#L272'>from_module</a>(cls,module)</tt>	Get the widget description from a module.
<tt style='background-color:#E8E8E8;'> canvas.registry.CategoryDescription <a href=' /canvas/registry/description.py#L401'>from_package</a>(cls,package)</tt>	Get the categorydescription from a package.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetRegistry <a href=' /canvas/registry/base.py#L64'>categories</a>()</tt>	Return a list all top level :class categorydescription instances ordered by priority.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetRegistry <a href=' /canvas/registry/base.py#L72'>category</a>(name)</tt>	Find and return a :class categorydescription by its name.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetRegistry <a href=' /canvas/registry/base.py#L87'>has_category</a>(name)</tt>	Return true if a category with name exist in this registry.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetRegistry <a href=' /canvas/registry/base.py#L99'>widgets</a>(category)</tt>	Return a list of all widgets in the registry if category is.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetRegistry <a href=' /canvas/registry/base.py#L126'>widget</a>(qualified_name)</tt>	Return a :class widgetdescription identified by qualified_name.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetRegistry <a href=' /canvas/registry/base.py#L140'>has_widget</a>(qualified_name)</tt>	Return true if the widget with qualified_name exists in this registry.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetRegistry <a href=' /canvas/registry/base.py#L148'>register_widget</a>(desc)</tt>	Register a :class widgetdescription instance.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetRegistry <a href=' /canvas/registry/base.py#L173'>register_category</a>(desc)</tt>	Register a :class categorydescription instance.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetRegistry <a href=' /canvas/registry/base.py#L196'>_insert_category</a>(desc)</tt>	Insert category description into 'registry' list.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetRegistry <a href=' /canvas/registry/base.py#L208'>_insert_widget</a>(category,desc)</tt>	Insert widget description desc into category.
<tt style='background-color:#E8E8E8;'> canvas.registry.QtWidgetRegistry <a href=' /canvas/registry/qt.py#L114'>model</a>()</tt>	Return the widget descriptions in a qt item model instance qstandarditemmodel.
<tt style='background-color:#E8E8E8;'> canvas.registry.QtWidgetRegistry <a href=' /canvas/registry/qt.py#L124'>item_for_widget</a>(widget)</tt>	Return the qstandarditem for the widget.
<tt style='background-color:#E8E8E8;'> canvas.registry.QtWidgetRegistry <a href=' /canvas/registry/qt.py#L135'>action_for_widget</a>(widget)</tt>	Return the qaction instance for the widget can be a string or a widgetdescription instance.
<tt style='background-color:#E8E8E8;'> canvas.registry.QtWidgetRegistry <a href=' /canvas/registry/qt.py#L144'>create_action_for_item</a>(item)</tt>	Create a qaction instance for the widget description item.
<tt style='background-color:#E8E8E8;'> canvas.registry.QtWidgetRegistry <a href=' /canvas/registry/qt.py#L166'>_insert_category</a>(desc)</tt>	Override to update the item model and emit the signals.
<tt style='background-color:#E8E8E8;'> canvas.registry.QtWidgetRegistry <a href=' /canvas/registry/qt.py#L181'>_insert_widget</a>(category,desc)</tt>	Override to update the item model and emit the signals.
<tt style='background-color:#E8E8E8;'> canvas.registry.QtWidgetRegistry <a href=' /canvas/registry/qt.py#L201'>_cat_desc_to_std_item</a>(desc)</tt>	Create a qstandarditem for the category description.
<tt style='background-color:#E8E8E8;'> canvas.registry.QtWidgetRegistry <a href=' /canvas/registry/qt.py#L233'>_widget_desc_to_std_item</a>(desc,category)</tt>	Create a qstandarditem for the widget description.
<tt style='background-color:#E8E8E8;'> canvas.registry. <a href=' /canvas/registry/qt.py#L290'>tooltip_helper</a>(desc)</tt>	Widget tooltip construction helper.
<tt style='background-color:#E8E8E8;'> canvas.registry. <a href=' /canvas/registry/qt.py#L323'>whats_this_helper</a>(desc,include_more_link)</tt>	A what's this text construction helper if include_more_link is.
<tt style='background-color:#E8E8E8;'> canvas.registry. <a href=' /canvas/registry/discovery.py#L498'>run_discovery</a>(entry_points_iter,cached)</tt>	Run the default discovery and return an instance of :class qtwidgetregistry.
<tt style='background-color:#E8E8E8;'> canvas.registry. <a href=' /canvas/registry/__init__.py#L61'>global_registry</a>(entry_point_group)</tt>	Return a global widgetregistry instance for the entry point group.
<tt style='background-color:#E8E8E8;'> canvas.registry. <a href=' /canvas/registry/__init__.py#L88'>set_global_registry</a>(registry,entry_point_group)</tt>	Set the global widgetregistry instance for the entry point group.
<tt style='background-color:#E8E8E8;'> canvas.registry. <a href=' /canvas/registry/discovery.py#L48'>default_category_for_module</a>(module)</tt>	Return a default constructed :class categorydescription for a module.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetDiscovery <a href=' /canvas/registry/discovery.py#L74'>run</a>(entry_points_iter)</tt>	Run the widget discovery process from an entry point iterator (yielding :class pkg_resources.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetDiscovery <a href=' /canvas/registry/discovery.py#L131'>process_widget_module</a>(module,name,category_name,distribution)</tt>	Process a widget module.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetDiscovery <a href=' /canvas/registry/discovery.py#L145'>process_category_package</a>(category,name,distribution)</tt>	Process a category package.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetDiscovery <a href=' /canvas/registry/discovery.py#L189'>process_loader</a>(callable)</tt>	Process a callable loader function.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetDiscovery <a href=' /canvas/registry/discovery.py#L210'>handle_widget</a>(desc)</tt>	Handle a found widget description.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetDiscovery <a href=' /canvas/registry/discovery.py#L221'>handle_category</a>(desc)</tt>	Handle a found category description.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetDiscovery <a href=' /canvas/registry/discovery.py#L232'>iter_widget_descriptions</a>(package,category_name,distribution)</tt>	Return an iterator over widget descriptions accessible from package.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetDiscovery <a href=' /canvas/registry/discovery.py#L290'>widget_description</a>(module,widget_name,category_name,distribution)</tt>	Return a widget description from a module.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetDiscovery <a href=' /canvas/registry/discovery.py#L311'>cache_insert</a>(module,mtime,description,distribution)</tt>	Insert the description into the cache.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetDiscovery <a href=' /canvas/registry/discovery.py#L345'>cache_get</a>(mod_path,distribution)</tt>	Get the cache entry for mod_path.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetDiscovery <a href=' /canvas/registry/discovery.py#L354'>cache_has_valid_entry</a>(mod_path,distribution)</tt>	Does the cache have a valid entry for mod_path.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetDiscovery <a href=' /canvas/registry/discovery.py#L382'>cache_can_ignore</a>(mod_path,distribution)</tt>	Can the mod_path be ignored (i e it was determined that it.
<tt style='background-color:#E8E8E8;'> canvas.registry.WidgetDiscovery <a href=' /canvas/registry/discovery.py#L403'>cache_log_error</a>(mod_path,error,distribution)</tt>	Cache that the error occurred while processing mod_path.
<tt style='background-color:#E8E8E8;'> canvas.registry. <a href=' /canvas/registry/discovery.py#L416'>fix_pyext</a>(mod_path)</tt>	Fix a module filename path extension to always end with the modules source file (i.
<tt style='background-color:#E8E8E8;'> canvas.registry. <a href=' /canvas/registry/discovery.py#L452'>module_name_split</a>(name)</tt>	Split the module name into package name and module name.
<tt style='background-color:#E8E8E8;'> canvas.registry. <a href=' /canvas/registry/discovery.py#L463'>module_modified_time</a>(module)</tt>	Return the modules source filename and modified time as a tuple (source_filename modified_time).
<tt style='background-color:#E8E8E8;'> canvas.registry. <a href=' /canvas/registry/discovery.py#L484'>asmodule</a>(module)</tt>	Return the module references by module name if module is.
<tt style='background-color:#E8E8E8;'> canvas.registry. <a href=' /canvas/registry/discovery.py#L498'>run_discovery</a>(entry_point,cached)</tt>	Run the default widget discovery and return a :class widgetregistry instance.
<tt style='background-color:#E8E8E8;'> canvas.registry. <a href=' /canvas/registry/cache.py#L15'>registry_cache_filename</a>()</tt>	Return the pickled registry cache filename also make sure the.
<tt style='background-color:#E8E8E8;'> canvas.registry. <a href=' /canvas/registry/cache.py#L30'>registry_cache</a>()</tt>	Return the registry cache dictionary.
<tt style='background-color:#E8E8E8;'> canvas.registry. <a href=' /canvas/registry/cache.py#L45'>save_registry_cache</a>(cache)</tt>	Save pickle the registry cache return true on success.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L25'>show_report</a>()</tt>	Raise the report window.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L37'>get_widget_name_extension</a>()</tt>	Return the text that is added to the section name in the report.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L48'>create_report_html</a>()</tt>	Start a new section in report and call :obj send_report method to add content.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L64'>report_items</a>(name,items)</tt>	Add a sequence of pairs or an ordereddict as a html list to report.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L79'>report_name</a>(name)</tt>	Add a section name to the report.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L84'>report_data</a>(name,data)</tt>	Add description of data table to the report.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L101'>report_domain</a>(name,domain)</tt>	Add description of domain to the report.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L117'>report_data_brief</a>(name,data)</tt>	Add description of data table to the report.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L133'>report_plot</a>(name,plot)</tt>	Add a plot to the report.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L176'>report_table</a>(name,table,header_rows,header_columns)</tt>	Add content of a table to the report.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L324'>report_list</a>(name,data,limit)</tt>	Add a list to the report.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L360'>report_paragraph</a>(name,text)</tt>	Add a paragraph to the report.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L375'>report_caption</a>(text)</tt>	Add caption to the report.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L381'>report_raw</a>(name,html)</tt>	Add raw html to the report.
<tt style='background-color:#E8E8E8;'> canvas.report.Report <a href=' /canvas/report/report.py#L389'>combo_value</a>(combo)</tt>	Add the value of a combo box to the report.
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L402'>plural</a>(s,number,suffix)</tt>	Insert the number into the string and make plural where marked if needed.
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L427'>plural_w</a>(s,number,suffix,capitalize)</tt>	Insert the number into the string and make plural where marked if needed.
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L460'>bool_str</a>(v)</tt>	Convert a boolean to a string.
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L465'>clip_string</a>(s,limit,sep)</tt>	Clip a string at a given character and add " " if the string was clipped.
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L491'>clipped_list</a>(items,limit,less_lookups,total_min)</tt>	Return a clipped comma-separated representation of the list.
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L528'>get_html_section</a>(name)</tt>	Return a new section as html with the given name and a time stamp.
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L540'>get_html_subsection</a>(name)</tt>	Return a subsection as html with the given name.
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L551'>render_items</a>(items)</tt>	Render a sequence of pairs or an ordereddict as a html list.
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L569'>render_items_vert</a>(items)</tt>	Render a sequence of pairs or an ordereddict as a comma-separated list.
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L586'>get_html_img</a>(scene)</tt>	Create html img element with base64-encoded image from the scene.
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L598'>describe_domain</a>(domain)</tt>	Return an :obj ordereddict describing a domain description contains keys "features", "meta attributes" and "targets".
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L624'>describe_data</a>(data)</tt>	Return an :obj ordereddict describing the data description contains keys "data instances" with the number of instances.
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L648'>describe_domain_brief</a>(domain)</tt>	Return an :obj ordereddict with the number of features metas and classes description contains "features" and "meta attributes" with the number of.
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L677'>describe_data_brief</a>(data)</tt>	Return an :obj ordereddict with a brief description of data.
<tt style='background-color:#E8E8E8;'> canvas.report. <a href=' /canvas/report/report.py#L704'>list_legend</a>(model,selected)</tt>	Create html with a legend constructed from a qt model or a view.
<tt style='background-color:#E8E8E8;'> preprocess.Discretize <a href=' /preprocess/preprocess.py#L80'>__call__</a>(data)</tt>	Compute and apply discretization of the given data returns a new.
<tt style='background-color:#E8E8E8;'> preprocess.Impute <a href=' /preprocess/preprocess.py#L129'>__call__</a>(data)</tt>	Apply an imputation method to the given data set returns a new.
<tt style='background-color:#E8E8E8;'> preprocess.RemoveConstant <a href=' /preprocess/preprocess.py#L181'>__call__</a>(data)</tt>	Remove columns with constant values from the data set and return the resulting data table.
<tt style='background-color:#E8E8E8;'> preprocess.RemoveNaNClasses <a href=' /preprocess/preprocess.py#L205'>__call__</a>(data)</tt>	Remove rows that contain nan in any class variable from the data set and return the resulting data table.
<tt style='background-color:#E8E8E8;'> preprocess.Normalize <a href=' /preprocess/preprocess.py#L271'>__call__</a>(data)</tt>	Compute and apply normalization of the given data returns a new.
<tt style='background-color:#E8E8E8;'> preprocess.Randomize <a href=' /preprocess/preprocess.py#L338'>__call__</a>(data)</tt>	Apply randomization of the given data returns a new.
<tt style='background-color:#E8E8E8;'> preprocess.PreprocessorList <a href=' /preprocess/preprocess.py#L485'>__call__</a>(data)</tt>	Applies a list of preprocessors to the data set.
<tt style='background-color:#E8E8E8;'> preprocess.Transformation <a href=' /preprocess/transformation.py#L13'>__init__</a>(variable)</tt>	:param variable the variable whose transformed value is returned.
<tt style='background-color:#E8E8E8;'> preprocess.Transformation <a href=' /preprocess/transformation.py#L20'>__call__</a>(data)</tt>	Return transformed column from the data by extracting the column view from the data and passing it to the transform method.
<tt style='background-color:#E8E8E8;'> preprocess.Transformation <a href=' /preprocess/transformation.py#L43'>transform</a>(c)</tt>	Return the transformed value of the argument c, which can be a number of a vector view.
<tt style='background-color:#E8E8E8;'> preprocess.Indicator <a href=' /preprocess/transformation.py#L64'>__init__</a>(variable,value)</tt>	:param variable the variable whose transformed value is returned.
<tt style='background-color:#E8E8E8;'> preprocess.Indicator1 <a href=' /preprocess/transformation.py#L84'>__init__</a>(variable,value)</tt>	:param variable the variable whose transformed value is returned.
<tt style='background-color:#E8E8E8;'> preprocess.Normalizer <a href=' /preprocess/normalize.py#L12'>__init__</a>(variable,offset,factor)</tt>	:param variable the variable whose transformed value is returned.
<tt style='background-color:#E8E8E8;'> preprocess.Lookup <a href=' /preprocess/transformation.py#L132'>__init__</a>(variable,lookup_table)</tt>	:param variable the variable whose transformed value is returned.
<tt style='background-color:#E8E8E8;'> preprocess.Discretization <a href=' /preprocess/discretize.py#L102'>__call__</a>(data,variable)</tt>	Compute discretization of the given variable on the given data.
<tt style='background-color:#E8E8E8;'> preprocess.EntropyMDL <a href=' /preprocess/discretize.py#L208'>_normalize</a>(cls,X,axis,out)</tt>	Normalize x array so it sums to 1 0 over the axis.
<tt style='background-color:#E8E8E8;'> preprocess.EntropyMDL <a href=' /preprocess/discretize.py#L233'>_entropy_normalized</a>(cls,D,axis)</tt>	Compute the entropy of distribution array d.
<tt style='background-color:#E8E8E8;'> preprocess.EntropyMDL <a href=' /preprocess/discretize.py#L256'>_entropy</a>(cls,D,axis)</tt>	Compute the entropy of distribution d.
<tt style='background-color:#E8E8E8;'> preprocess.EntropyMDL <a href=' /preprocess/discretize.py#L272'>_entropy1</a>(cls,D)</tt>	Compute the entropy of distributions in d one per each row.
<tt style='background-color:#E8E8E8;'> preprocess.EntropyMDL <a href=' /preprocess/discretize.py#L281'>_entropy2</a>(cls,D)</tt>	Compute the entropy of distributions in d one per each row.
<tt style='background-color:#E8E8E8;'> preprocess.EntropyMDL <a href=' /preprocess/discretize.py#L290'>_entropy_cuts_sorted</a>(cls,CS)</tt>	Return the class information entropy induced by partitioning the cs distribution at all n-1 candidate cut points.
<tt style='background-color:#E8E8E8;'> preprocess.EntropyMDL <a href=' /preprocess/discretize.py#L328'>_entropy_discretize_sorted</a>(cls,C,force)</tt>	Entropy discretization on a sorted c.
<tt style='background-color:#E8E8E8;'> preprocess.DomainDiscretizer <a href=' /preprocess/discretize.py#L407'>__call__</a>(data,fixed)</tt>	Compute and return discretized domain.
<tt style='background-color:#E8E8E8;'> preprocess.Remove <a href=' /preprocess/remove.py#L59'>__call__</a>(data)</tt>	Removes unused features or classes from the given data returns a new.
<tt style='background-color:#E8E8E8;'> preprocess. <a href=' /preprocess/remove.py#L120'>is_var</a>(exp)</tt>	Is exp a var node.
<tt style='background-color:#E8E8E8;'> preprocess. <a href=' /preprocess/remove.py#L125'>is_removed</a>(exp)</tt>	Is exp a removed node.
<tt style='background-color:#E8E8E8;'> preprocess. <a href=' /preprocess/remove.py#L130'>_contains</a>(exp,cls)</tt>	Does node contain a sub node of type cls.
<tt style='background-color:#E8E8E8;'> preprocess. <a href=' /preprocess/remove.py#L140'>is_reduced</a>(exp)</tt>	Does exp contain a reduced node.
<tt style='background-color:#E8E8E8;'> preprocess. <a href=' /preprocess/remove.py#L145'>is_sorted</a>(exp)</tt>	Does exp contain a reduced node.
<tt style='background-color:#E8E8E8;'> preprocess. <a href=' /preprocess/remove.py#L150'>merge_transforms</a>(exp)</tt>	Merge consecutive removed reduced or transformed nodes.
<tt style='background-color:#E8E8E8;'> preprocess. <a href=' /preprocess/remove.py#L284'>merge_lookup</a>(A,B)</tt>	Merge two consecutive lookup transforms into one.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/environ.py#L26'>data_dir_base</a>()</tt>	Return the platform dependent application directory.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/environ.py#L48'>data_dir</a>()</tt>	Return the platform dependent orange data directory.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/environ.py#L58'>widget_settings_dir</a>()</tt>	Return the platform dependent directory where widgets save their settings.
<tt style='background-color:#E8E8E8;'> misc. <a href=' /misc/environ.py#L67'>cache_dir</a>()</tt>	Return the platform dependent orange cache directory.
<tt style='background-color:#E8E8E8;'> distance. <a href=' /distance/__init__.py#L14'>_preprocess</a>(table)</tt>	Remove categorical attributes and impute missing values.
<tt style='background-color:#E8E8E8;'> distance. <a href=' /distance/__init__.py#L27'>_orange_to_numpy</a>(x)</tt>	Convert :class orange data table and :class orange data rowinstance.
<tt style='background-color:#E8E8E8;'> distance.Distance <a href=' /distance/__init__.py#L42'>__call__</a>(e1,e2,axis,impute)</tt>	:param e1 input data instances we calculate distances between all pairs.
<tt style='background-color:#E8E8E8;'> distance.SklDistance <a href=' /distance/__init__.py#L68'>__init__</a>(metric,name,supports_sparse)</tt>	Args metric the metric to be used for distance calculation.
<tt style='background-color:#E8E8E8;'> distance.SpearmanDistance <a href=' /distance/__init__.py#L103'>__init__</a>(absolute,name)</tt>	Constructor for spearman's and absolute spearman's distances.
<tt style='background-color:#E8E8E8;'> distance.PearsonDistance <a href=' /distance/__init__.py#L148'>__init__</a>(absolute,name)</tt>	Constructor for pearson's and absolute pearson's distances.
<tt style='background-color:#E8E8E8;'> distance.MahalanobisDistance <a href=' /distance/__init__.py#L199'>fit</a>(data,axis)</tt>	Compute the covariance matrix needed for calculating distances.
<tt style='background-color:#E8E8E8;'> statistics.Continuous <a href=' /statistics/contingency.py#L219'>__getitem__</a>(index)</tt>	Return contingencies for a given class value.
<tt style='background-color:#E8E8E8;'> statistics. <a href=' /statistics/util.py#L12'>_count_nans_per_row_sparse</a>(X,weights)</tt>	Count the number of nans undefined values per row.
<tt style='background-color:#E8E8E8;'> statistics. <a href=' /statistics/util.py#L23'>bincount</a>(X,max_val,weights,minlength)</tt>	Return counts of values in array x.
<tt style='background-color:#E8E8E8;'> statistics. <a href=' /statistics/util.py#L56'>countnans</a>(X,weights,axis,dtype)</tt>	Count the undefined elements in arr along given axis.
<tt style='background-color:#E8E8E8;'> statistics. <a href=' /statistics/util.py#L89'>contingency</a>(X,y,max_X,max_y)</tt>	Compute the contingency matrices for each column of x excluding the masked versus the vector y.
<tt style='background-color:#E8E8E8;'> statistics. <a href=' /statistics/util.py#L160'>stats</a>(X,weights,compute_variance)</tt>	Compute min max #nans mean and variance.
<tt style='background-color:#E8E8E8;'> statistics. <a href=' /statistics/util.py#L236'>_sparse_has_zeros</a>(x)</tt>	Check if sparse matrix contains any implicit zeros.
<tt style='background-color:#E8E8E8;'> statistics. <a href=' /statistics/util.py#L265'>nanmin</a>(x,axis)</tt>	Equivalent of np nammin that supports sparse or dense matrices.
<tt style='background-color:#E8E8E8;'> statistics. <a href=' /statistics/util.py#L270'>nanmax</a>(x,axis)</tt>	Equivalent of np nammax that supports sparse or dense matrices.
<tt style='background-color:#E8E8E8;'> statistics. <a href=' /statistics/util.py#L275'>mean</a>(x)</tt>	Equivalent of np mean that supports sparse or dense matrices.
<tt style='background-color:#E8E8E8;'> statistics. <a href=' /statistics/util.py#L284'>nanmean</a>(x)</tt>	Equivalent of np nanmean that supports sparse or dense matrices.
<tt style='background-color:#E8E8E8;'> statistics. <a href=' /statistics/util.py#L293'>unique</a>(x,return_counts)</tt>	Equivalent of np unique that supports sparse or dense matrices.
<tt style='background-color:#E8E8E8;'> statistics. <a href=' /statistics/distribution.py#L327'>get_distributions_for_columns</a>(data,columns)</tt>	Compute the distributions for columns.
<tt style='background-color:#E8E8E8;'> statistics.DomainBasicStats <a href=' /statistics/basic_stats.py#L42'>__getitem__</a>(index)</tt>	Index can be a variable variable name or an integer meta attributes.
<tt style='background-color:#E8E8E8;'> data.Storage <a href=' /data/storage.py#L36'>_compute_basic_stats</a>(columns)</tt>	Compute basic stats for each of the columns.
<tt style='background-color:#E8E8E8;'> data.Storage <a href=' /data/storage.py#L44'>_compute_distributions</a>(columns)</tt>	Compute distribution of values for the given columns.
<tt style='background-color:#E8E8E8;'> data.Storage <a href=' /data/storage.py#L58'>_compute_contingency</a>(col_vars,row_var)</tt>	Compute contingency matrices for one or more discrete or continuous variables against the specified discrete variable.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/util.py#L8'>one_hot</a>(values,dtype)</tt>	Return a one-hot transform of values parameters.
<tt style='background-color:#E8E8E8;'> data. <a href=' /data/util.py#L26'>scale</a>(values,min,max)</tt>	Return values scaled to [min max].
<tt style='background-color:#E8E8E8;'> data.SharedComputeValue <a href=' /data/util.py#L55'>__call__</a>(data,shared_data)</tt>	Fallback if common parts are not passed.
<tt style='background-color:#E8E8E8;'> data.SharedComputeValue <a href=' /data/util.py#L61'>compute</a>(data,shared_data)</tt>	Given precomputed shared data perform variable-specific part of computation and return new variable values.
<tt style='background-color:#E8E8E8;'> data.Instance <a href=' /data/instance.py#L13'>__init__</a>(domain,data,id)</tt>	Construct a new data instance.
<tt style='background-color:#E8E8E8;'> data.Instance <a href=' /data/instance.py#L50'>domain</a>()</tt>	The domain describing the instance's values.
<tt style='background-color:#E8E8E8;'> data.Instance <a href=' /data/instance.py#L55'>x</a>()</tt>	Instance's attributes as a 1-dimensional numpy array whose length equals len(self.
<tt style='background-color:#E8E8E8;'> data.Instance <a href=' /data/instance.py#L63'>y</a>()</tt>	Instance's classes as a 1-dimensional numpy array whose length equals len(self.
<tt style='background-color:#E8E8E8;'> data.Instance <a href=' /data/instance.py#L71'>metas</a>()</tt>	Instance's meta attributes as a 1-dimensional numpy array whose length equals len(self.
<tt style='background-color:#E8E8E8;'> data.Instance <a href=' /data/instance.py#L79'>list</a>()</tt>	All instance's values including attributes classes and meta attributes as a list whose length equals len(self.
<tt style='background-color:#E8E8E8;'> data.Instance <a href=' /data/instance.py#L95'>weight</a>()</tt>	The weight of the data instance default is 1.
<tt style='background-color:#E8E8E8;'> data.Instance <a href=' /data/instance.py#L187'>attributes</a>()</tt>	Return iterator over the instance's attributes.
<tt style='background-color:#E8E8E8;'> data.Instance <a href=' /data/instance.py#L191'>classes</a>()</tt>	Return iterator over the instance's class attributes.
<tt style='background-color:#E8E8E8;'> data.Instance <a href=' /data/instance.py#L202'>get_class</a>()</tt>	Return the class value as an instance of :obj orange data value.
<tt style='background-color:#E8E8E8;'> data.Instance <a href=' /data/instance.py#L210'>get_classes</a>()</tt>	Return the class value as a list of instances of :obj orange.
<tt style='background-color:#E8E8E8;'> data.Instance <a href=' /data/instance.py#L218'>set_class</a>(value)</tt>	Set the instance's class throws an exception if there are multiple.
<tt style='background-color:#E8E8E8;'> modelling.Fitter <a href=' /modelling/base.py#L51'>get_learner</a>(problem_type)</tt>	Get the learner for a given problem type.
<tt style='background-color:#E8E8E8;'> modelling.Fitter <a href=' /modelling/base.py#L77'>_change_kwargs</a>(kwargs,problem_type)</tt>	Handle the kwargs to be passed to the learner before they are used.
<tt style='background-color:#E8E8E8;'> modelling.Fitter <a href=' /modelling/base.py#L91'>supports_weights</a>()</tt>	The fitter supports weights if both the classification and regression learners support weights.
<tt style='background-color:#E8E8E8;'> modelling.Fitter <a href=' /modelling/base.py#L106'>get_params</a>(problem_type)</tt>	Access the specific learner params of a given learner.
<tt style='background-color:#E8E8E8;'> clustering. <a href=' /clustering/hierarchical.py#L69'>data_clustering</a>(data,distance,linkage)</tt>	Return the hierarchical clustering of the data set's rows.
<tt style='background-color:#E8E8E8;'> clustering. <a href=' /clustering/hierarchical.py#L82'>feature_clustering</a>(data,distance,linkage)</tt>	Return the hierarchical clustering of the data set's columns.
<tt style='background-color:#E8E8E8;'> clustering. <a href=' /clustering/hierarchical.py#L95'>dist_matrix_linkage</a>(matrix,linkage)</tt>	Return linkage using a precomputed distance matrix.
<tt style='background-color:#E8E8E8;'> clustering. <a href=' /clustering/hierarchical.py#L123'>dist_matrix_clustering</a>(matrix,linkage)</tt>	Return the hierarchical clustering using a precomputed distance matrix.
<tt style='background-color:#E8E8E8;'> clustering. <a href=' /clustering/hierarchical.py#L216'>tree_from_linkage</a>(linkage)</tt>	Return a tree representation of a clustering encoded in a linkage matrix.
<tt style='background-color:#E8E8E8;'> clustering. <a href=' /clustering/hierarchical.py#L307'>leaves</a>(tree,branches)</tt>	Return an iterator over the leaf nodes in a tree structure.
<tt style='background-color:#E8E8E8;'> clustering. <a href=' /clustering/hierarchical.py#L315'>prune</a>(cluster,level,height,condition)</tt>	Prune the clustering instance cluster.
<tt style='background-color:#E8E8E8;'> clustering. <a href=' /clustering/hierarchical.py#L364'>cluster_depths</a>(cluster)</tt>	Return a dictionary mapping :class tree instances to their depth.
<tt style='background-color:#E8E8E8;'> clustering. <a href=' /clustering/hierarchical.py#L380'>top_clusters</a>(tree,k)</tt>	Return k topmost clusters from hierarchical clustering.
<tt style='background-color:#E8E8E8;'> clustering. <a href=' /clustering/hierarchical.py#L407'>optimal_leaf_ordering</a>(tree,distances,progress_callback)</tt>	Order the leaves in the clustering tree.
<tt style='background-color:#E8E8E8;'> regression.MeanLearner <a href=' /regression/mean.py#L14'>fit_storage</a>(data)</tt>	Construct a :obj meanmodel by computing the mean value of the given data.
<tt style='background-color:#E8E8E8;'> regression.MeanModel <a href=' /regression/mean.py#L41'>__init__</a>(dist,domain)</tt>	Construct :obj orange regression meanmodel that always returns the.
<tt style='background-color:#E8E8E8;'> regression.MeanModel <a href=' /regression/mean.py#L63'>predict</a>(X)</tt>	Return predictions that is the same mean value for each given instance in x.
<tt style='background-color:#E8E8E8;'> projection. <a href=' /projection/manifold.py#L12'>torgerson</a>(distances,n_components)</tt>	Perform classical mds torgerson scaling.
<tt style='background-color:#E8E8E8;'> widgets.model.OWLoadModel <a href=' /widgets/model/owloadmodel.py#L82'>browse</a>()</tt>	Select a filename using an open file dialog.
<tt style='background-color:#E8E8E8;'> widgets.model.OWLoadModel <a href=' /widgets/model/owloadmodel.py#L95'>reload</a>()</tt>	Reload the current file.
<tt style='background-color:#E8E8E8;'> widgets.model.OWLoadModel <a href=' /widgets/model/owloadmodel.py#L99'>load</a>(filename)</tt>	Load the object from filename and send it to output.
<tt style='background-color:#E8E8E8;'> widgets.model.OWLoadModel <a href=' /widgets/model/owloadmodel.py#L111'>_remember</a>(filename)</tt>	Remember filename was accessed.
<tt style='background-color:#E8E8E8;'> widgets.model.CustomRuleLearner <a href=' /widgets/model/owrules.py#L98'>set_progress_advance_callback</a>(f)</tt>	Assign callback to update the corresponding widget's progress bar after each generated rule.
<tt style='background-color:#E8E8E8;'> widgets.model.CustomRuleLearner <a href=' /widgets/model/owrules.py#L107'>clear_progress_advance_callback</a>()</tt>	Make sure to clear the callback function immediately after the classifier is trained.
<tt style='background-color:#E8E8E8;'> widgets.model.CustomRuleLearner <a href=' /widgets/model/owrules.py#L114'>find_rules_and_measure_progress</a>(X,Y,W,target_class)</tt>	The top-level control procedure of the separate-and-conquer algorithm.
<tt style='background-color:#E8E8E8;'> widgets.model.OWRuleLearner <a href=' /widgets/model/owrules.py#L320'>update_model</a>()</tt>	Ensure that the progress bar is updated only if the generated learner is used within this widget (for example it must not be.
<tt style='background-color:#E8E8E8;'> widgets.model.OWSaveModel <a href=' /widgets/model/owsavemodel.py#L74'>setModel</a>(model)</tt>	Set input model.
<tt style='background-color:#E8E8E8;'> widgets.model.OWSaveModel <a href=' /widgets/model/owsavemodel.py#L80'>save</a>(filename)</tt>	Save the model to filename model must not be none.
<tt style='background-color:#E8E8E8;'> widgets.model.OWSaveModel <a href=' /widgets/model/owsavemodel.py#L93'>savecurrent</a>()</tt>	Save the model to current selected filename.
<tt style='background-color:#E8E8E8;'> widgets.model.OWSaveModel <a href=' /widgets/model/owsavemodel.py#L103'>browse</a>()</tt>	Select a filename using a save file dialog.
<tt style='background-color:#E8E8E8;'> widgets.model.OWRandomForest <a href=' /widgets/model/owrandomforest.py#L87'>get_learner_parameters</a>()</tt>	Called by send report to list the parameters of the learner.
<tt style='background-color:#E8E8E8;'> widgets.evaluate. <a href=' /widgets/evaluate/owconfusionmatrix.py#L26'>confusion_matrix</a>(res,index)</tt>	Compute confusion matrix args.
<tt style='background-color:#E8E8E8;'> widgets.evaluate.BorderedItemDelegate <a href=' /widgets/evaluate/owconfusionmatrix.py#L65'>paint</a>(painter,option,index)</tt>	Overloads paint to draw borders.
<tt style='background-color:#E8E8E8;'> widgets.evaluate.OWConfusionMatrix <a href=' /widgets/evaluate/owconfusionmatrix.py#L230'>set_results</a>(results)</tt>	Set the input results.
<tt style='background-color:#E8E8E8;'> widgets.evaluate.OWConfusionMatrix <a href=' /widgets/evaluate/owconfusionmatrix.py#L298'>clear</a>()</tt>	Reset the widget clear controls.
<tt style='background-color:#E8E8E8;'> widgets.evaluate.OWConfusionMatrix <a href=' /widgets/evaluate/owconfusionmatrix.py#L307'>select_correct</a>()</tt>	Select the diagonal elements of the matrix.
<tt style='background-color:#E8E8E8;'> widgets.evaluate.OWConfusionMatrix <a href=' /widgets/evaluate/owconfusionmatrix.py#L317'>select_wrong</a>()</tt>	Select the off-diagonal elements of the matrix.
<tt style='background-color:#E8E8E8;'> widgets.evaluate.OWConfusionMatrix <a href=' /widgets/evaluate/owconfusionmatrix.py#L334'>cell_clicked</a>(model_index)</tt>	Handle cell click event.
<tt style='background-color:#E8E8E8;'> widgets.evaluate.OWConfusionMatrix <a href=' /widgets/evaluate/owconfusionmatrix.py#L353'>commit</a>()</tt>	Output data instances corresponding to selected cells.
<tt style='background-color:#E8E8E8;'> widgets.evaluate.OWLiftCurve <a href=' /widgets/evaluate/owliftcurve.py#L128'>set_results</a>(results)</tt>	Set the input evaluation results.
<tt style='background-color:#E8E8E8;'> widgets.evaluate.OWLiftCurve <a href=' /widgets/evaluate/owliftcurve.py#L136'>clear</a>()</tt>	Clear the widget state.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagoreanForest <a href=' /widgets/visualize/owpythagoreanforest.py#L113'>set_rf</a>(model)</tt>	When a different forest is given.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagoreanForest <a href=' /widgets/visualize/owpythagoreanforest.py#L136'>clear</a>()</tt>	Clear all relevant data from the widget.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagoreanForest <a href=' /widgets/visualize/owpythagoreanforest.py#L148'>update_depth</a>()</tt>	When the max depth slider is changed.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagoreanForest <a href=' /widgets/visualize/owpythagoreanforest.py#L153'>update_colors</a>()</tt>	When the target class or coloring method is changed.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagoreanForest <a href=' /widgets/visualize/owpythagoreanforest.py#L158'>update_size_calc</a>()</tt>	When the size calculation of the trees is changed.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagoreanForest <a href=' /widgets/visualize/owpythagoreanforest.py#L169'>zoom_changed</a>()</tt>	When we update the "zoom" slider.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagoreanForest <a href=' /widgets/visualize/owpythagoreanforest.py#L214'>disable_ui</a>()</tt>	Temporarly disable the ui while trees may be redrawn.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagoreanForest <a href=' /widgets/visualize/owpythagoreanforest.py#L260'>_calculate_zoom</a>(zoom_level)</tt>	Calculate the max size for grid items from zoom level setting.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagoreanForest <a href=' /widgets/visualize/owpythagoreanforest.py#L265'>onDeleteWidget</a>()</tt>	When deleting the widget.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagoreanForest <a href=' /widgets/visualize/owpythagoreanforest.py#L270'>commit</a>()</tt>	Commit the selected tree to output.
<tt style='background-color:#E8E8E8;'> widgets.visualize.SklRandomForestAdapter <a href=' /widgets/visualize/owpythagoreanforest.py#L336'>get_trees</a>()</tt>	Get the tree adapters in the random forest.
<tt style='background-color:#E8E8E8;'> widgets.visualize.SklRandomForestAdapter <a href=' /widgets/visualize/owpythagoreanforest.py#L342'>domain</a>()</tt>	Get the domain.
<tt style='background-color:#E8E8E8;'> widgets.visualize.MosaicVizRank <a href=' /widgets/visualize/owmosaic.py#L39'>__init__</a>(master)</tt>	Add the spin box for maximal number of attributes.
<tt style='background-color:#E8E8E8;'> widgets.visualize.MosaicVizRank <a href=' /widgets/visualize/owmosaic.py#L59'>initialize</a>()</tt>	Clear the ordering to trigger recomputation when needed.
<tt style='background-color:#E8E8E8;'> widgets.visualize.MosaicVizRank <a href=' /widgets/visualize/owmosaic.py#L64'>initialize_keep_ordering</a>()</tt>	Initialize triggered by change of coloring.
<tt style='background-color:#E8E8E8;'> widgets.visualize.MosaicVizRank <a href=' /widgets/visualize/owmosaic.py#L68'>run</a>()</tt>	Add handling of the spin box for maximal number of attributes.
<tt style='background-color:#E8E8E8;'> widgets.visualize.MosaicVizRank <a href=' /widgets/visualize/owmosaic.py#L90'>max_attr_changed</a>()</tt>	Change the button label when the maximal number of attributes changes.
<tt style='background-color:#E8E8E8;'> widgets.visualize.MosaicVizRank <a href=' /widgets/visualize/owmosaic.py#L106'>check_preconditions</a>()</tt>	Require at least one variable to allow ranking.
<tt style='background-color:#E8E8E8;'> widgets.visualize.MosaicVizRank <a href=' /widgets/visualize/owmosaic.py#L118'>compute_attr_order</a>()</tt>	Order attributes by relief if there is a target variable in case of.
<tt style='background-color:#E8E8E8;'> widgets.visualize.MosaicVizRank <a href=' /widgets/visualize/owmosaic.py#L149'>state_count</a>()</tt>	Return the number of combinations starting with a single attribute.
<tt style='background-color:#E8E8E8;'> widgets.visualize.MosaicVizRank <a href=' /widgets/visualize/owmosaic.py#L161'>iterate_states</a>(state)</tt>	Iterate through all combinations of attributes as ordered by relief starting with a single attribute if mosaic is colored by class.
<tt style='background-color:#E8E8E8;'> widgets.visualize.MosaicVizRank <a href=' /widgets/visualize/owmosaic.py#L198'>compute_score</a>(state)</tt>	Compute score using chi-square test of independence.
<tt style='background-color:#E8E8E8;'> widgets.visualize.MosaicVizRank <a href=' /widgets/visualize/owmosaic.py#L250'>row_for_state</a>(score,state)</tt>	The row consists of attributes sorted by name class is at the beginning if present so it's on the x-axis and not lost somewhere.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWMosaicDisplay <a href=' /widgets/visualize/owmosaic.py#L356'>_get_discrete_data</a>(data)</tt>	Discretizes continuous attributes.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWTreeGraph <a href=' /widgets/visualize/owtreeviewer.py#L205'>set_node_info</a>()</tt>	Set the content of the node.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWTreeGraph <a href=' /widgets/visualize/owtreeviewer.py#L260'>ctree</a>(model)</tt>	Input signal handler.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWTreeGraph <a href=' /widgets/visualize/owtreeviewer.py#L304'>walkcreate</a>(node,parent)</tt>	Create a structure of tree nodes from the given model.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWTreeGraph <a href=' /widgets/visualize/owtreeviewer.py#L353'>update_node_info_cls</a>(node)</tt>	Update the printed contents of the node for classification trees.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWTreeGraph <a href=' /widgets/visualize/owtreeviewer.py#L377'>update_node_info_reg</a>(node)</tt>	Update the printed contents of the node for regression trees.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWTreeGraph <a href=' /widgets/visualize/owtreeviewer.py#L388'>toggle_node_color_cls</a>()</tt>	Update the node color for classification trees.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWTreeGraph <a href=' /widgets/visualize/owtreeviewer.py#L405'>toggle_node_color_reg</a>()</tt>	Update the node color for regression trees.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWBoxPlot <a href=' /widgets/visualize/owboxplot.py#L635'>draw_axis</a>()</tt>	Draw the horizontal axis and sets self scale_x.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWBoxPlot <a href=' /widgets/visualize/owboxplot.py#L687'>draw_axis_disc</a>()</tt>	Draw the horizontal axis and sets self scale_x for discrete attributes.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owheatmap.py#L44'>split_domain</a>(domain,split_label)</tt>	Split the domain based on values of split_label value.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owheatmap.py#L123'>candidate_split_labels</a>(data)</tt>	Return candidate labels on which we can split the data.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWHeatMap <a href=' /widgets/visualize/owheatmap.py#L644'>set_dataset</a>(data)</tt>	Set the input dataset to display.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWHeatMap <a href=' /widgets/visualize/owheatmap.py#L739'>_make_parts</a>(data,group_var,group_key)</tt>	Make initial parts for data split by group_var group_key.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWHeatMap <a href=' /widgets/visualize/owheatmap.py#L1204'>__update_margins</a>()</tt>	Update horizontal dendrogram and text list widgets margins to include the space for average stripe.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWHeatMap <a href=' /widgets/visualize/owheatmap.py#L1275'>heatmap_widgets</a>()</tt>	Iterate over heatmap widgets.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWHeatMap <a href=' /widgets/visualize/owheatmap.py#L1282'>label_widgets</a>()</tt>	Iterate over graphicssimpletextlist widgets.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWHeatMap <a href=' /widgets/visualize/owheatmap.py#L1289'>dendrogram_widgets</a>()</tt>	Iterate over dendrogram widgets.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWHeatMap <a href=' /widgets/visualize/owheatmap.py#L1301'>update_averages_stripe</a>()</tt>	Update the visibility of the averages stripe.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWHeatMap <a href=' /widgets/visualize/owheatmap.py#L1312'>update_grid_spacing</a>()</tt>	Update layout spacing.
<tt style='background-color:#E8E8E8;'> widgets.visualize.GraphicsHeatmapWidget <a href=' /widgets/visualize/owheatmap.py#L1646'>clear</a>()</tt>	Clear/reset the widget.
<tt style='background-color:#E8E8E8;'> widgets.visualize.GraphicsHeatmapWidget <a href=' /widgets/visualize/owheatmap.py#L1658'>set_heatmap</a>(heatmap)</tt>	Set the heatmap data for display.
<tt style='background-color:#E8E8E8;'> widgets.visualize.GraphicsHeatmapWidget <a href=' /widgets/visualize/owheatmap.py#L1666'>set_heatmap_data</a>(data)</tt>	Set the heatmap data for display.
<tt style='background-color:#E8E8E8;'> widgets.visualize.GraphicsHeatmapWidget <a href=' /widgets/visualize/owheatmap.py#L1701'>_update_pixmap</a>()</tt>	Update the pixmap if its construction arguments changed.
<tt style='background-color:#E8E8E8;'> widgets.visualize.GraphicsHeatmapWidget <a href=' /widgets/visualize/owheatmap.py#L1736'>cell_at</a>(pos)</tt>	Return the cell row column from pos in local coordinates.
<tt style='background-color:#E8E8E8;'> widgets.visualize.GraphicsHeatmapWidget <a href=' /widgets/visualize/owheatmap.py#L1760'>cell_rect</a>(row,column)</tt>	Return a rectangle in local coordinates containing the cell at row and column.
<tt style='background-color:#E8E8E8;'> widgets.visualize.GraphicsHeatmapWidget <a href=' /widgets/visualize/owheatmap.py#L1775'>row_rect</a>(row)</tt>	Return a qrectf in local coordinates containing the entire row.
<tt style='background-color:#E8E8E8;'> widgets.visualize.HeatmapScene <a href=' /widgets/visualize/owheatmap.py#L1827'>select_from_dendrogram</a>(dendrogram,key)</tt>	Select all heatmap rows which belong to the dendrogram.
<tt style='background-color:#E8E8E8;'> widgets.visualize.GraphicsSimpleTextList <a href=' /widgets/visualize/owheatmap.py#L1955'>clear</a>()</tt>	Remove all text items.
<tt style='background-color:#E8E8E8;'> widgets.visualize.GraphicsSimpleTextList <a href=' /widgets/visualize/owheatmap.py#L1968'>set_labels</a>(labels)</tt>	Set the text labels to show in the widget.
<tt style='background-color:#E8E8E8;'> widgets.visualize.GraphicsSimpleTextList <a href=' /widgets/visualize/owheatmap.py#L1982'>setAlignment</a>(alignment)</tt>	Set alignment of text items in the widget.
<tt style='background-color:#E8E8E8;'> widgets.visualize.HeatmapSelectionManager <a href=' /widgets/visualize/owheatmap.py#L2145'>select_rows</a>(rows,heatmap,clear)</tt>	Add rows to selection if heatmap is provided the rows.
<tt style='background-color:#E8E8E8;'> widgets.visualize.HeatmapSelectionManager <a href=' /widgets/visualize/owheatmap.py#L2164'>remove_rows</a>(rows)</tt>	Remove rows from the selection.
<tt style='background-color:#E8E8E8;'> widgets.visualize.HeatmapSelectionManager <a href=' /widgets/visualize/owheatmap.py#L2183'>selection_start</a>(heatmap_widget,event)</tt>	Selection started by heatmap_widget due to event.
<tt style='background-color:#E8E8E8;'> widgets.visualize.HeatmapSelectionManager <a href=' /widgets/visualize/owheatmap.py#L2207'>selection_update</a>(heatmap_widget,event)</tt>	Selection updated by heatmap_widget due to event mouse drag.
<tt style='background-color:#E8E8E8;'> widgets.visualize.HeatmapSelectionManager <a href=' /widgets/visualize/owheatmap.py#L2231'>selection_finish</a>(heatmap_widget,event)</tt>	Selection finished by heatmap_widget due to event.
<tt style='background-color:#E8E8E8;'> widgets.visualize.HeatmapSelectionManager <a href=' /widgets/visualize/owheatmap.py#L2249'>selection_add</a>(start,end,heatmap,clear)</tt>	Add/remove a selection range from start to end.
<tt style='background-color:#E8E8E8;'> widgets.visualize.HeatmapSelectionManager <a href=' /widgets/visualize/owheatmap.py#L2292'>update_selection_rects</a>()</tt>	Update the selection rects.
<tt style='background-color:#E8E8E8;'> widgets.visualize.GraphNode <a href=' /widgets/visualize/owtreeviewer2d.py#L29'>graph_edges</a>()</tt>	Get a list of the edges that stem from the node.
<tt style='background-color:#E8E8E8;'> widgets.visualize.GraphNode <a href=' /widgets/visualize/owtreeviewer2d.py#L33'>graph_add_edge</a>(edge)</tt>	Add an edge stemming from the node.
<tt style='background-color:#E8E8E8;'> widgets.visualize.TreeGraphicsScene <a href=' /widgets/visualize/owtreeviewer2d.py#L282'>_fix_pos</a>(node,x,y)</tt>	Fix the position of the tree stemming from the given node.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWParallelGraph <a href=' /widgets/visualize/owparallelgraph.py#L131'>add_relevant_selections</a>(old_selection_conditions)</tt>	Keep only conditions related to the currently visualized attributes.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWParallelGraph <a href=' /widgets/visualize/owparallelgraph.py#L291'>draw_statistics</a>()</tt>	Draw lines that represent standard deviation or quartiles.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWParallelGraph <a href=' /widgets/visualize/owparallelgraph.py#L383'>draw_distributions</a>()</tt>	Draw distributions with discrete attributes.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWVennDiagram <a href=' /widgets/visualize/owvenndiagram.py#L211'>_invalidate</a>(keys,incremental)</tt>	Invalidate input for a list of input keys.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owvenndiagram.py#L634'>pairwise</a>(iterable)</tt>	Return an iterator over consecutive pairs in iterable.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owvenndiagram.py#L689'>table_concat</a>(tables)</tt>	Concatenate a list of tables.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owvenndiagram.py#L725'>copy_descriptor</a>(descriptor,newname)</tt>	Create a copy of the descriptor.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owvenndiagram.py#L757'>reshape_wide</a>(table,varlist,idvarlist,groupvarlist)</tt>	Reshape a data table into a wide format.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owvenndiagram.py#L857'>unique</a>(seq)</tt>	Return an iterator over unique items of seq.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owvenndiagram.py#L878'>varying_between</a>(table,idvar)</tt>	Return a list of all variables with non constant values between groups defined by idvar.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owvenndiagram.py#L908'>uniquify</a>(strings)</tt>	Return a list of unique strings.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owvenndiagram.py#L931'>string_attributes</a>(domain)</tt>	Return all string attributes from the domain.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owvenndiagram.py#L939'>discrete_attributes</a>(domain)</tt>	Return all discrete attributes from the domain.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owvenndiagram.py#L947'>source_attributes</a>(domain)</tt>	Return all suitable attributes for the venn diagram.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owvenndiagram.py#L954'>disjoint</a>(sets)</tt>	Return all disjoint subsets.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owvenndiagram.py#L977'>disjoint_set_label</a>(i,n,simplify)</tt>	Return a html formated label for a disjoint set indexed by i.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owvenndiagram.py#L1501'>line_extended</a>(line,distance)</tt>	Return an qlinef extended by distance units in the positive direction.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owvenndiagram.py#L1652'>group_table_indices</a>(table,key_var)</tt>	Group table indices based on values of selected columns (key_vars).
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owdistributions.py#L31'>selected_index</a>(view)</tt>	Return the selected integer index row in the view.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWDistributions <a href=' /widgets/visualize/owdistributions.py#L379'>display_contingency</a>()</tt>	Set the contingency to display.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owdistributions.py#L600'>dist_sum</a>(dXW1,dXW2)</tt>	A sum of two continuous distributions.
<tt style='background-color:#E8E8E8;'> widgets.visualize. <a href=' /widgets/visualize/owdistributions.py#L641'>average_shifted_histogram</a>(a,h,m,weights)</tt>	Compute the average shifted histogram.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagorasTree <a href=' /widgets/visualize/owpythagorastree.py#L139'>set_tree</a>(model)</tt>	When a different tree is given.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagorasTree <a href=' /widgets/visualize/owpythagorastree.py#L192'>clear</a>()</tt>	Clear all relevant data from the widget.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagorasTree <a href=' /widgets/visualize/owpythagorastree.py#L209'>update_depth</a>()</tt>	This method should be called when the depth changes.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagorasTree <a href=' /widgets/visualize/owpythagorastree.py#L213'>update_colors</a>()</tt>	When the target class / node coloring needs to be updated.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagorasTree <a href=' /widgets/visualize/owpythagorastree.py#L218'>update_size_calc</a>()</tt>	When the tree size calculation is updated.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagorasTree <a href=' /widgets/visualize/owpythagorastree.py#L223'>invalidate_tree</a>()</tt>	When the tree needs to be completely recalculated.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagorasTree <a href=' /widgets/visualize/owpythagorastree.py#L234'>update_tooltip_enabled</a>()</tt>	When the tooltip visibility is changed and need to be updated.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagorasTree <a href=' /widgets/visualize/owpythagorastree.py#L238'>update_show_legend</a>()</tt>	When the legend visibility needs to be updated.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagorasTree <a href=' /widgets/visualize/owpythagorastree.py#L257'>_update_log_scale_slider</a>()</tt>	On calc method combo box changed.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagorasTree <a href=' /widgets/visualize/owpythagorastree.py#L274'>_set_max_depth</a>()</tt>	Set the depth to the max depth and update appropriate actors.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagorasTree <a href=' /widgets/visualize/owpythagorastree.py#L292'>onDeleteWidget</a>()</tt>	When deleting the widget.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWPythagorasTree <a href=' /widgets/visualize/owpythagorastree.py#L297'>commit</a>()</tt>	Commit the selected data to output.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWSilhouettePlot <a href=' /widgets/visualize/owsilhouetteplot.py#L159'>set_data</a>(data)</tt>	Set the input data set.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWSilhouettePlot <a href=' /widgets/visualize/owsilhouetteplot.py#L212'>clear</a>()</tt>	Clear the widget state.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWSilhouettePlot <a href=' /widgets/visualize/owsilhouetteplot.py#L354'>commit</a>()</tt>	Commit/send the current selection to the output.
<tt style='background-color:#E8E8E8;'> widgets.visualize.SilhouettePlot <a href=' /widgets/visualize/owsilhouetteplot.py#L448'>setScores</a>(scores,labels,values,colors)</tt>	Set the silhouette scores/labels to for display.
<tt style='background-color:#E8E8E8;'> widgets.visualize.SilhouettePlot <a href=' /widgets/visualize/owsilhouetteplot.py#L538'>setBarHeight</a>(height)</tt>	Set silhouette bar height row height.
<tt style='background-color:#E8E8E8;'> widgets.visualize.SilhouettePlot <a href=' /widgets/visualize/owsilhouetteplot.py#L551'>barHeight</a>()</tt>	Return the silhouette bar row height.
<tt style='background-color:#E8E8E8;'> widgets.visualize.SilhouettePlot <a href=' /widgets/visualize/owsilhouetteplot.py#L557'>clear</a>()</tt>	Clear the widget state.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWSieveDiagram <a href=' /widgets/visualize/owsieve.py#L144'>set_data</a>(data)</tt>	Discretize continuous attributes and put all attributes and discrete metas into self.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWSieveDiagram <a href=' /widgets/visualize/owsieve.py#L200'>update_attr</a>()</tt>	Update the graph and selection.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWSieveDiagram <a href=' /widgets/visualize/owsieve.py#L206'>set_input_features</a>(attr_list)</tt>	Handler for the features signal.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWSieveDiagram <a href=' /widgets/visualize/owsieve.py#L219'>resolve_shown_attributes</a>()</tt>	Use the attributes from the input signal if the signal is present and at least two attributes appear in the domain.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWSieveDiagram <a href=' /widgets/visualize/owsieve.py#L245'>select_area</a>(area,event)</tt>	Add or remove the clicked area from the selection.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWSieveDiagram <a href=' /widgets/visualize/owsieve.py#L262'>update_selection</a>()</tt>	Update the graph pen width to show the current selection.
<tt style='background-color:#E8E8E8;'> widgets.visualize.OWSieveDiagram <a href=' /widgets/visualize/owsieve.py#L301'>update_graph</a>()</tt>	Update the graph.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.Anchorable <a href=' /widgets/visualize/utils/owlegend.py#L68'>recalculate_offset</a>()</tt>	This is called whenever the item is being moved and needs to recalculate its offset.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.Anchorable <a href=' /widgets/visualize/utils/owlegend.py#L82'>update_pos</a>()</tt>	Update the widget position relative to the viewport.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.Anchorable <a href=' /widgets/visualize/utils/owlegend.py#L95'>__calculate_actual_offset</a>(offset)</tt>	Take the offset specified in the constructor and calculate the actual offset from the top left corner of the item so positioning can.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.AnchorableGraphicsView <a href=' /widgets/visualize/utils/owlegend.py#L189'>update_anchored_items</a>()</tt>	Update all the items that subclass the anchorable class.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.ContinuousLegendItem <a href=' /widgets/visualize/utils/owlegend.py#L447'>_format_values</a>(values)</tt>	Get the formatted values to output.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.Legend <a href=' /widgets/visualize/utils/owlegend.py#L531'>set_domain</a>(domain)</tt>	Handle receiving the domain object.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.Legend <a href=' /widgets/visualize/utils/owlegend.py#L549'>set_items</a>(values)</tt>	Handle receiving an array of items.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.Legend <a href=' /widgets/visualize/utils/owlegend.py#L572'>setVisible</a>(is_visible)</tt>	Only display the legend if it contains any items.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.ZoomableGraphicsView <a href=' /widgets/visualize/utils/view.py#L89'>__handle_zoom</a>(direction)</tt>	Handle zoom event direction is positive if zooming in otherwise negative.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.ZoomableGraphicsView <a href=' /widgets/visualize/utils/view.py#L115'>set_central_widget</a>(widget)</tt>	Set the central widget in the view.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.ZoomableGraphicsView <a href=' /widgets/visualize/utils/view.py#L128'>central_widget_rect</a>()</tt>	Get the bounding box of the central widget.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.ZoomableGraphicsView <a href=' /widgets/visualize/utils/view.py#L146'>recalculate_and_fit</a>()</tt>	Recalculate the optimal zoom and fits the content into view.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.ZoomableGraphicsView <a href=' /widgets/visualize/utils/view.py#L163'>reset_zoom</a>()</tt>	Reset the zoom to the optimal factor.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils. <a href=' /widgets/visualize/utils/lac.py#L73'>lac</a>(conts,k,nsteps,window_size)</tt>	K expected classes.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.tree.SklTreeAdapter <a href=' /widgets/visualize/utils/tree/skltreeadapter.py#L161'>_subnode_range</a>(node)</tt>	Get the range of indices where there are subnodes of the given node.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.tree.SklTreeAdapter <a href=' /widgets/visualize/utils/tree/skltreeadapter.py#L193'>get_samples_in_leaves</a>()</tt>	Get an array of instance indices that belong to each leaf.
<tt style='background-color:#E8E8E8;'> widgets.visualize.utils.tree.Rule <a href=' /widgets/visualize/utils/tree/rules.py#L20'>merge_with</a>(rule)</tt>	Merge the current rule with the given rule.
<tt style='background-color:#E8E8E8;'> widgets.data.SampleFoldIndices <a href=' /widgets/data/owdatasampler.py#L315'>__init__</a>(folds,stratified,random_state)</tt>	Samples data based on a number of folds.
<tt style='background-color:#E8E8E8;'> widgets.data. <a href=' /widgets/data/owfile.py#L31'>add_origin</a>(examples,filename)</tt>	Adds attribute with file location to each string variable used for relative filenames stored in string variables (e.
<tt style='background-color:#E8E8E8;'> widgets.data.OWFile <a href=' /widgets/data/owfile.py#L449'>dragEnterEvent</a>(event)</tt>	Accept drops of valid file urls.
<tt style='background-color:#E8E8E8;'> widgets.data.OWFile <a href=' /widgets/data/owfile.py#L460'>dropEvent</a>(event)</tt>	Handle file drops.
<tt style='background-color:#E8E8E8;'> widgets.data.OWMergeData <a href=' /widgets/data/owmergedata.py#L270'>_compute_reduced_extra_data</a>(var_extra_data)</tt>	Prepare a table with extra columns that will appear in the merged.
<tt style='background-color:#E8E8E8;'> widgets.data.OWMergeData <a href=' /widgets/data/owmergedata.py#L282'>_values</a>(data,var,as_string)</tt>	Return an iterotor over keys for rows of the table.
<tt style='background-color:#E8E8E8;'> widgets.data.OWMergeData <a href=' /widgets/data/owmergedata.py#L298'>_get_keymap</a>(cls,data,var,as_string)</tt>	Return a generator of pairs key index by enumerating and switching the values for rows (method _values).
<tt style='background-color:#E8E8E8;'> widgets.data.OWMergeData <a href=' /widgets/data/owmergedata.py#L306'>_augment_indices</a>(var_data,extra_map,as_string)</tt>	Compute a two-row array of indices.
<tt style='background-color:#E8E8E8;'> widgets.data.OWMergeData <a href=' /widgets/data/owmergedata.py#L322'>_merge_indices</a>(var_data,extra_map,as_string)</tt>	Use _augment_indices to compute the array of indices.
<tt style='background-color:#E8E8E8;'> widgets.data.OWMergeData <a href=' /widgets/data/owmergedata.py#L328'>_combine_indices</a>(var_data,extra_map,as_string)</tt>	Use _augment_indices to compute the array of indices.
<tt style='background-color:#E8E8E8;'> widgets.data.OWMergeData <a href=' /widgets/data/owmergedata.py#L345'>_join_table_by_indices</a>(reduced_extra,indices)</tt>	Join horizontally self data and reduced_extra taking the pairs.
<tt style='background-color:#E8E8E8;'> widgets.data.OWMergeData <a href=' /widgets/data/owmergedata.py#L361'>_join_array_by_indices</a>(left,right,indices,string_cols)</tt>	Join horizontally two arrays taking pairs of rows given in indices.
<tt style='background-color:#E8E8E8;'> widgets.data. <a href=' /widgets/data/owfeatureconstructor.py#L71'>selected_row</a>(view)</tt>	Return the index of selected row in a view (:class qlistview) the view's selection mode must be a qabstractitemview.
<tt style='background-color:#E8E8E8;'> widgets.data.FeatureConstructorSettingsHandler <a href=' /widgets/data/owfeatureconstructor.py#L298'>is_valid_item</a>(setting,descriptor,attrs,metas)</tt>	Check if descriptor can be used with given domain.
<tt style='background-color:#E8E8E8;'> widgets.data.OWFeatureConstructor <a href=' /widgets/data/owfeatureconstructor.py#L482'>setDescriptors</a>(descriptors)</tt>	Set a list of variable descriptors to edit.
<tt style='background-color:#E8E8E8;'> widgets.data.OWFeatureConstructor <a href=' /widgets/data/owfeatureconstructor.py#L489'>setData</a>(data)</tt>	Set the input dataset.
<tt style='background-color:#E8E8E8;'> widgets.data. <a href=' /widgets/data/owfeatureconstructor.py#L631'>freevars</a>(exp,env)</tt>	Return names of all free variables in a parsed expression ast.
<tt style='background-color:#E8E8E8;'> widgets.data. <a href=' /widgets/data/owfeatureconstructor.py#L742'>validate_exp</a>(exp)</tt>	Validate an ast ast expression.
<tt style='background-color:#E8E8E8;'> widgets.data. <a href=' /widgets/data/owfeatureconstructor.py#L828'>bind_variable</a>(descriptor,env)</tt>	Descriptor env ->.
<tt style='background-color:#E8E8E8;'> widgets.data. <a href=' /widgets/data/owrank.py#L36'>table</a>(shape,fill)</tt>	Return a 2d table with shape filed with fill.
<tt style='background-color:#E8E8E8;'> widgets.data.OWRank <a href=' /widgets/data/owrank.py#L275'>switchRanksMode</a>(index)</tt>	Switch between discrete/continuous/no_class mode.
<tt style='background-color:#E8E8E8;'> widgets.data.OWRank <a href=' /widgets/data/owrank.py#L398'>updateScores</a>(measuresMask)</tt>	Update the current computed scores.
<tt style='background-color:#E8E8E8;'> widgets.data.OWRank <a href=' /widgets/data/owrank.py#L479'>updateRankModel</a>(measuresMask)</tt>	Update the rankmodel.
<tt style='background-color:#E8E8E8;'> widgets.data.OWRank <a href=' /widgets/data/owrank.py#L525'>onSelectItem</a>(index)</tt>	Called when the user selects/unselects an item in the table view.
<tt style='background-color:#E8E8E8;'> widgets.data.OWRank <a href=' /widgets/data/owrank.py#L588'>measuresSelectionChanged</a>(measure)</tt>	Measure selection has changed update column visibility.
<tt style='background-color:#E8E8E8;'> widgets.data.OWRank <a href=' /widgets/data/owrank.py#L608'>updateVisibleScoreColumns</a>()</tt>	Update the visible columns of the scores view.
<tt style='background-color:#E8E8E8;'> widgets.data.OWImpute <a href=' /widgets/data/owimpute.py#L195'>set_default_method</a>(index)</tt>	Set the current selected default imputation method.
<tt style='background-color:#E8E8E8;'> widgets.data.OWImpute <a href=' /widgets/data/owimpute.py#L232'>get_method_for_column</a>(column_index)</tt>	Returns the imputation method for column by its index.
<tt style='background-color:#E8E8E8;'> widgets.data.OWDiscretize <a href=' /widgets/data/owdiscretize.py#L308'>_update_points</a>()</tt>	Update the induced cut points.
<tt style='background-color:#E8E8E8;'> widgets.data.OWDiscretize <a href=' /widgets/data/owdiscretize.py#L442'>discretized_domain</a>()</tt>	Return the current effective discretized domain.
<tt style='background-color:#E8E8E8;'> widgets.data. <a href=' /widgets/data/owpreprocess.py#L637'>_index_to_enum</a>(enum,i)</tt>	Enums by default are not int-comparable so use an ad-hoc mapping of.
<tt style='background-color:#E8E8E8;'> widgets.data. <a href=' /widgets/data/owpreprocess.py#L643'>_enum_to_index</a>(enum,key)</tt>	Enums by default are not int-comparable so use an ad-hoc mapping of.
<tt style='background-color:#E8E8E8;'> widgets.data.OWPreprocess <a href=' /widgets/data/owpreprocess.py#L1052'>load</a>(saved)</tt>	Load a preprocessor list from a dict.
<tt style='background-color:#E8E8E8;'> widgets.data.OWPreprocess <a href=' /widgets/data/owpreprocess.py#L1091'>save</a>(model)</tt>	Save the preprocessor list to a dict.
<tt style='background-color:#E8E8E8;'> widgets.data.OWPreprocess <a href=' /widgets/data/owpreprocess.py#L1136'>set_data</a>(data)</tt>	Set the input data set.
<tt style='background-color:#E8E8E8;'> widgets.data. <a href=' /widgets/data/owselectcolumns.py#L25'>slices</a>(indices)</tt>	Group the given integer indices into slices.
<tt style='background-color:#E8E8E8;'> widgets.data. <a href=' /widgets/data/owselectcolumns.py#L40'>source_model</a>(view)</tt>	Return the source model for the qt item view if it uses the qsortfilterproxymodel.
<tt style='background-color:#E8E8E8;'> widgets.data. <a href=' /widgets/data/owselectcolumns.py#L50'>source_indexes</a>(indexes,view)</tt>	Map model indexes through a views qsortfilterproxymodel.
<tt style='background-color:#E8E8E8;'> widgets.data. <a href=' /widgets/data/owselectcolumns.py#L60'>delslice</a>(model,start,end)</tt>	Delete the start end slice rows from the model.
<tt style='background-color:#E8E8E8;'> widgets.data.ClassVarListItemModel <a href=' /widgets/data/owselectcolumns.py#L78'>dropMimeData</a>(mime,action,row,column)</tt>	Ensure only one variable can be dropped onto the view.
<tt style='background-color:#E8E8E8;'> widgets.data.VariablesListItemView <a href=' /widgets/data/owselectcolumns.py#L138'>dragEnterEvent</a>(event)</tt>	Reimplemented from qlistview dragenterevent.
<tt style='background-color:#E8E8E8;'> widgets.data.VariablesListItemView <a href=' /widgets/data/owselectcolumns.py#L147'>acceptsDropEvent</a>(event)</tt>	Should the drop event be accepted?.
<tt style='background-color:#E8E8E8;'> widgets.data.ClassVariableItemView <a href=' /widgets/data/owselectcolumns.py#L173'>acceptsDropEvent</a>(event)</tt>	Reimplemented ensure only one variable is in the model.
<tt style='background-color:#E8E8E8;'> widgets.data.OWSelectAttributes <a href=' /widgets/data/owselectcolumns.py#L457'>update_domain_role_hints</a>()</tt>	Update the domain hints to be stored in the widgets settings.
<tt style='background-color:#E8E8E8;'> widgets.data.OWSelectAttributes <a href=' /widgets/data/owselectcolumns.py#L469'>selected_rows</a>(view)</tt>	Return the selected rows in the view.
<tt style='background-color:#E8E8E8;'> widgets.data.OWSelectAttributes <a href=' /widgets/data/owselectcolumns.py#L562'>update_completer_model</a>()</tt>	This gets called when the model for available attributes changes through either drag/drop or the left/right button actions.
<tt style='background-color:#E8E8E8;'> widgets.data.OWSelectAttributes <a href=' /widgets/data/owselectcolumns.py#L576'>update_completer_prefix</a>(filter)</tt>	Prefixes all items in the completer model with the current already done completion to enable the completion of multiple keywords.
<tt style='background-color:#E8E8E8;'> widgets.data.PythonConsole <a href=' /widgets/data/owpythonscript.py#L249'>_moveCursorToInputLine</a>()</tt>	Move the cursor to the input line if not already there if the cursor.
<tt style='background-color:#E8E8E8;'> widgets.data.PythonConsole <a href=' /widgets/data/owpythonscript.py#L263'>pasteCode</a>(source)</tt>	Paste source code into the console.
<tt style='background-color:#E8E8E8;'> widgets.data.PythonConsole <a href=' /widgets/data/owpythonscript.py#L276'>insertFromMimeData</a>(source)</tt>	Reimplemented from qplaintextedit insertfrommimedata.
<tt style='background-color:#E8E8E8;'> widgets.data. <a href=' /widgets/data/owpythonscript.py#L285'>interleave</a>(seq1,seq2)</tt>	Interleave elements of seq2 between consecutive elements of seq1.
<tt style='background-color:#E8E8E8;'> widgets.data. <a href=' /widgets/data/owpythonscript.py#L344'>select_row</a>(view,row)</tt>	Select a row in an item view.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.BaseEditor <a href=' /widgets/data/utils/preprocess.py#L59'>parameters</a>()</tt>	Return the parameters as a dictionary.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.BaseEditor <a href=' /widgets/data/utils/preprocess.py#L64'>createinstance</a>(params)</tt>	Create the preprocessor instance given the stored parameters dict.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.StandardItemModel <a href=' /widgets/data/utils/preprocess.py#L130'>moveRow</a>(sourceParent,sourceRow,destParent,destRow)</tt>	Move sourcerow from sourceparent to destinationrow under destparent.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.StandardItemModel <a href=' /widgets/data/utils/preprocess.py#L165'>moveRows</a>(sourceParent,sourceRow,count,destParent)</tt>	Move count rows starting with the given sourcerow under parent sourceparent to row destrow under parent destparent.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.Controller <a href=' /widgets/data/utils/preprocess.py#L250'>setModel</a>(model)</tt>	Set the model for the view.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.Controller <a href=' /widgets/data/utils/preprocess.py#L268'>model</a>()</tt>	Return the model.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.Controller <a href=' /widgets/data/utils/preprocess.py#L410'>createWidgetFor</a>(index)</tt>	Create a qwidget instance for the index (:class qmodelindex).
<tt style='background-color:#E8E8E8;'> widgets.data.utils.Controller <a href=' /widgets/data/utils/preprocess.py#L418'>setWidgetData</a>(widget,index)</tt>	Set/update the widget state from the model at index.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.Controller <a href=' /widgets/data/utils/preprocess.py#L427'>setModelData</a>(widget,index)</tt>	Get the data from the widget state and set/update the model at index.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.SequenceFlow <a href=' /widgets/data/utils/preprocess.py#L547'>addWidget</a>(widget,title)</tt>	Add widget with title to list of widgets in the last position.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.SequenceFlow <a href=' /widgets/data/utils/preprocess.py#L560'>insertWidget</a>(index,widget,title)</tt>	Insert widget with title at index.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.SequenceFlow <a href=' /widgets/data/utils/preprocess.py#L596'>removeWidget</a>(widget)</tt>	Remove widget from the list.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.SequenceFlow <a href=' /widgets/data/utils/preprocess.py#L614'>clear</a>()</tt>	Clear the list remove all widgets.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.SequenceFlow <a href=' /widgets/data/utils/preprocess.py#L620'>widgets</a>()</tt>	Return a list of all widgets.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.SequenceFlow <a href=' /widgets/data/utils/preprocess.py#L628'>indexOf</a>(widget)</tt>	Return the index logical position of widget.
<tt style='background-color:#E8E8E8;'> widgets.data.utils.SequenceFlow <a href=' /widgets/data/utils/preprocess.py#L634'>setTitle</a>(index,title)</tt>	Set title for widget at index.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised. <a href=' /widgets/unsupervised/owcorrespondence.py#L28'>select_rows</a>(view,row_indices,command)</tt>	Select rows in view.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised. <a href=' /widgets/unsupervised/owcorrespondence.py#L307'>burt_table</a>(data,variables)</tt>	Construct a 'burt table' all values cross-tabulation for variables.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised. <a href=' /widgets/unsupervised/owcorrespondence.py#L342'>correspondence</a>(A)</tt>	:param numpy ndarray a.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.OWMDS <a href=' /widgets/unsupervised/owmds.py#L362'>set_data</a>(data)</tt>	Set the input data set.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.OWMDS <a href=' /widgets/unsupervised/owmds.py#L387'>set_disimilarity</a>(matrix)</tt>	Set the dissimilarity distance matrix.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.OWMDS <a href=' /widgets/unsupervised/owmds.py#L409'>set_subset_data</a>(subset_data)</tt>	Set a subset of data input to highlight in the plot.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.OWMDS <a href=' /widgets/unsupervised/owmds.py#L591'>__set_update_loop</a>(loop)</tt>	Set the update loop coroutine.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L260'>set_root</a>(root)</tt>	Set the root cluster.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L285'>item</a>(node)</tt>	Return the dendrogramnode instance representing the cluster.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L293'>height_at</a>(point)</tt>	Return the cluster height at the point in widget local coordinates.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L310'>pos_at_height</a>(height)</tt>	Return a point in local coordinates for height in cluster height scale.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L327'>_set_hover_item</a>(item)</tt>	Set the currently highlighted item.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L346'>leaf_items</a>()</tt>	Iterate over the dendrogram leaf items (:class qgraphicsitem).
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L354'>leaf_anchors</a>()</tt>	Iterate over the dendrogram leaf anchor points (:class qpointf).
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L363'>selected_nodes</a>()</tt>	Return the selected clusters.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L367'>set_selected_items</a>(items)</tt>	Set the item selection.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L384'>set_selected_clusters</a>(clusters)</tt>	Set the selected clusters.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L397'>select_item</a>(item,state)</tt>	Set the items selection state to select_state.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L434'>_add_selection</a>(item)</tt>	Add selection rooted at item.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L459'>_remove_selection</a>(item)</tt>	Remove selection rooted at item.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L473'>_selected_sub_items</a>(item)</tt>	Return all selected subclusters under item.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L484'>_selected_super_item</a>(item)</tt>	Return the selected super item if it exists.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L494'>_re_enumerate_selections</a>()</tt>	Re enumerate the selection items and update the colors.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L509'>_selection_poly</a>(item)</tt>	Return an selection item covering the selection rooted at item.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DendrogramWidget <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L555'>_update_selection_items</a>()</tt>	Update the shapes of selection items after a scale change.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.GraphicsSimpleTextList <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L1413'>clear</a>()</tt>	Remove all text items.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.GraphicsSimpleTextList <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L1426'>set_labels</a>(labels)</tt>	Set the text labels.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.GraphicsSimpleTextList <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L1442'>setAlignment</a>(alignment)</tt>	Set alignment of text items in the widget.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised. <a href=' /widgets/unsupervised/owhierarchicalclustering.py#L1636'>clusters_at_height</a>(root,height)</tt>	Return a list of clusters by cutting the clustering at height.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.OWDistances <a href=' /widgets/unsupervised/owdistances.py#L71'>set_data</a>(data)</tt>	Set the input data set from which to compute the distances.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.OWDistances <a href=' /widgets/unsupervised/owdistances.py#L80'>refresh_metrics</a>()</tt>	Refresh available metrics depending on the input data's sparsenes.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DistanceMapItem <a href=' /widgets/unsupervised/owdistancemap.py#L177'>_cellAt</a>(pos)</tt>	Return the i j cell index at pos in local coordinates.
<tt style='background-color:#E8E8E8;'> widgets.unsupervised.DistanceMapItem <a href=' /widgets/unsupervised/owdistancemap.py#L189'>_cellCloseTo</a>(pos)</tt>	Return the i j cell index closest to pos in local coordinates.
<tt style='background-color:#E8E8E8;'> widgets.utils. <a href=' /widgets/utils/annotated_data.py#L9'>get_next_name</a>(names,name)</tt>	Returns next 'possible' attribute name the name should not be duplicated.
<tt style='background-color:#E8E8E8;'> widgets.utils. <a href=' /widgets/utils/annotated_data.py#L25'>create_annotated_table</a>(data,selected_indices)</tt>	Returns data with concatenated flag column flag column represents.
<tt style='background-color:#E8E8E8;'> widgets.utils.ProgressBarMixin <a href=' /widgets/utils/progressbar.py#L18'>progressBarInit</a>(processEvents)</tt>	Initialize the widget's progress (i e show and set progress to 0%).
<tt style='background-color:#E8E8E8;'> widgets.utils.ProgressBarMixin <a href=' /widgets/utils/progressbar.py#L42'>progressBarSet</a>(value,processEvents)</tt>	Set the current progress bar to value.
<tt style='background-color:#E8E8E8;'> widgets.utils.ProgressBarMixin <a href=' /widgets/utils/progressbar.py#L90'>progressBarValue</a>()</tt>	Return the state of the progress bar.
<tt style='background-color:#E8E8E8;'> widgets.utils.ProgressBarMixin <a href=' /widgets/utils/progressbar.py#L99'>progressBarAdvance</a>(value,processEvents)</tt>	Advance the progress bar by value.
<tt style='background-color:#E8E8E8;'> widgets.utils.ProgressBarMixin <a href=' /widgets/utils/progressbar.py#L117'>progressBarFinished</a>(processEvents)</tt>	Stop the widget's progress i e hide the progress bar.
<tt style='background-color:#E8E8E8;'> widgets.utils.ProgressBarMixin <a href=' /widgets/utils/progressbar.py#L141'>progressBar</a>(iterations)</tt>	Context manager for progress bar.
<tt style='background-color:#E8E8E8;'> widgets.utils.ScaleData <a href=' /widgets/utils/scaling.py#L116'>get_valid_list</a>(indices)</tt>	Get array of 0 and 1 of len = len self data if there is a missing.
<tt style='background-color:#E8E8E8;'> widgets.utils.ScaleData <a href=' /widgets/utils/scaling.py#L125'>get_valid_indices</a>(indices)</tt>	Get array with numbers that represent the instance indices that have a valid data value.
<tt style='background-color:#E8E8E8;'> widgets.utils.ScaleScatterPlotData <a href=' /widgets/utils/scaling.py#L135'>get_xy_data_positions</a>(xattr,yattr,filter_valid,copy)</tt>	Create x-y projection of attributes in attrlist.
<tt style='background-color:#E8E8E8;'> widgets.utils.DomainEditor <a href=' /widgets/utils/domaineditor.py#L205'>_iter_vals</a>(x)</tt>	Iterate over values of sparse or dense arrays.
<tt style='background-color:#E8E8E8;'> widgets.utils.DomainEditor <a href=' /widgets/utils/domaineditor.py#L211'>_to_column</a>(x,to_sparse,dtype)</tt>	Transform list of values to sparse/dense column array.
<tt style='background-color:#E8E8E8;'> widgets.utils.DomainEditor <a href=' /widgets/utils/domaineditor.py#L232'>get_domain</a>(domain,data)</tt>	Create domain and dataset from changes made in the widget.
<tt style='background-color:#E8E8E8;'> widgets.utils.DomainEditor <a href=' /widgets/utils/domaineditor.py#L290'>_get_column</a>(data,source_var,source_place)</tt>	Extract column from data and preserve sparsity.
<tt style='background-color:#E8E8E8;'> widgets.utils.DomainEditor <a href=' /widgets/utils/domaineditor.py#L303'>parse_domain</a>(domain)</tt>	Convert domain into variable representation used by the vartablemodel.
<tt style='background-color:#E8E8E8;'> widgets.utils. <a href=' /widgets/utils/concurrent.py#L27'>locked</a>(mutex)</tt>	A context manager for locking an instance of a qmutex.
<tt style='background-color:#E8E8E8;'> widgets.utils._TaskDepotThread <a href=' /widgets/utils/concurrent.py#L71'>transfer</a>(obj,thread)</tt>	Transfer obj (:class qobject) instance from this thread to the target thread (a :class qthread).
<tt style='background-color:#E8E8E8;'> widgets.utils._TaskRunnable <a href=' /widgets/utils/concurrent.py#L99'>run</a>()</tt>	Reimplemented from qrunnable run.
<tt style='background-color:#E8E8E8;'> widgets.utils._Runnable <a href=' /widgets/utils/concurrent.py#L139'>run</a>()</tt>	Reimplemented from qrunnable run.
<tt style='background-color:#E8E8E8;'> widgets.utils.ThreadExecutor <a href=' /widgets/utils/concurrent.py#L186'>submit</a>(func)</tt>	Schedule the func(*args **kwargs) to be executed and return an :class future instance representing the result of the computation.
<tt style='background-color:#E8E8E8;'> widgets.utils.ThreadExecutor <a href=' /widgets/utils/concurrent.py#L242'>shutdown</a>(wait)</tt>	Shutdown the executor and free all resources if wait is true then.
<tt style='background-color:#E8E8E8;'> widgets.utils.Future <a href=' /widgets/utils/concurrent.py#L366'>cancel</a>()</tt>	Attempt to cancel the the call return false if the call is.
<tt style='background-color:#E8E8E8;'> widgets.utils.Future <a href=' /widgets/utils/concurrent.py#L384'>cancelled</a>()</tt>	Return true if call was successfully cancelled.
<tt style='background-color:#E8E8E8;'> widgets.utils.Future <a href=' /widgets/utils/concurrent.py#L391'>done</a>()</tt>	Return true if the call was successfully cancelled or finished running.
<tt style='background-color:#E8E8E8;'> widgets.utils.Future <a href=' /widgets/utils/concurrent.py#L400'>running</a>()</tt>	Return true if the call is currently being executed.
<tt style='background-color:#E8E8E8;'> widgets.utils.Future <a href=' /widgets/utils/concurrent.py#L413'>result</a>(timeout)</tt>	Return the result of the :class futures computation if timeout.
<tt style='background-color:#E8E8E8;'> widgets.utils.Future <a href=' /widgets/utils/concurrent.py#L434'>exception</a>(timeout)</tt>	Return the exception instance if any resulting from the execution of the :class future.
<tt style='background-color:#E8E8E8;'> widgets.utils.Future <a href=' /widgets/utils/concurrent.py#L456'>set_result</a>(result)</tt>	Set the result of the computation called by the worker thread.
<tt style='background-color:#E8E8E8;'> widgets.utils.Future <a href=' /widgets/utils/concurrent.py#L467'>set_exception</a>(exception)</tt>	Set the exception instance that was raised by the computation called by the worker thread.
<tt style='background-color:#E8E8E8;'> widgets.utils.StateChangedEvent <a href=' /widgets/utils/concurrent.py#L516'>state</a>()</tt>	Return the new state future pending future cancelled.
<tt style='background-color:#E8E8E8;'> widgets.utils.FutureWatcher <a href=' /widgets/utils/concurrent.py#L549'>isCancelled</a>()</tt>	Was the future cancelled.
<tt style='background-color:#E8E8E8;'> widgets.utils.FutureWatcher <a href=' /widgets/utils/concurrent.py#L555'>isDone</a>()</tt>	Is the future done was cancelled or has finished.
<tt style='background-color:#E8E8E8;'> widgets.utils.FutureWatcher <a href=' /widgets/utils/concurrent.py#L561'>isRunning</a>()</tt>	Is the future running i e has started.
<tt style='background-color:#E8E8E8;'> widgets.utils.FutureWatcher <a href=' /widgets/utils/concurrent.py#L567'>isStarted</a>()</tt>	Has the future computation started.
<tt style='background-color:#E8E8E8;'> widgets.utils.FutureWatcher <a href=' /widgets/utils/concurrent.py#L573'>result</a>()</tt>	Return the result of the computation.
<tt style='background-color:#E8E8E8;'> widgets.utils.FutureWatcher <a href=' /widgets/utils/concurrent.py#L579'>exception</a>()</tt>	Return the exception instance or none if no exception was raised.
<tt style='background-color:#E8E8E8;'> widgets.utils.FutureWatcher <a href=' /widgets/utils/concurrent.py#L585'>customEvent</a>(event)</tt>	Reimplemented from qobject customevent.
<tt style='background-color:#E8E8E8;'> widgets.utils.FutureWatcher <a href=' /widgets/utils/concurrent.py#L600'>_stateChanged</a>(future,state)</tt>	The future state has changed (called by :class future).
<tt style='background-color:#E8E8E8;'> widgets.utils. <a href=' /widgets/utils/sql.py#L9'>check_sql_input</a>(f)</tt>	Wrapper for widget's set_data method that first checks if the input.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L340'>__init__</a>(parent,name,show_legend,axes)</tt>	Creates a new graph if your visualization uses axes other than xbottom and yleft, specify them in the.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L485'>map_to_graph</a>(point,axes,zoom)</tt>	Maps point, which can be ether a tuple of x y a qpoint or a qpointf from data coordinates to plot coordinates.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L515'>map_from_graph</a>(point,axes,zoom)</tt>	Maps point, which can be ether a tuple of x y a qpoint or a qpointf from plot coordinates to data coordinates.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L554'>activate_zooming</a>()</tt>	Activates the zooming mode where the user can zoom in and out with a single mouse click.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L561'>activate_rectangle_selection</a>()</tt>	Activates the rectangle selection mode where the user can select points in a rectangular area.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L568'>activate_selection</a>()</tt>	Activates the point selection mode where the user can select points by clicking on them.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L574'>activate_polygon_selection</a>()</tt>	Activates the polygon selection mode where the user can select points by drawing a polygon around them.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L580'>activate_panning</a>()</tt>	Activates the panning mode where the user can move the zoom projection by dragging the mouse.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L586'>set_show_main_title</a>(b)</tt>	Shows the main title if b is true, and hides it otherwise.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L593'>set_main_title</a>(t)</tt>	Sets the main title to t.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L657'>set_axis_labels</a>(axis_id,labels,values)</tt>	Sets the labels of axis axis_id to labels this is used for axes displaying a discrete data type.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L674'>set_axis_scale</a>(axis_id,min,max,step_size)</tt>	Sets the scale of axis axis_id to show an interval between min and max.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L711'>add_custom_curve</a>(curve,enableLegend)</tt>	Adds a custom plotitem curve to the plot.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L741'>add_curve</a>(name,brushColor,penColor,size)</tt>	Creates a new :obj owcurve with the specified parameters and adds it to the graph.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L779'>set_main_curve_data</a>(x_data,y_data,color_data,label_data)</tt>	Creates a single curve that can have points of different colors shapes and sizes.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L846'>remove_curve</a>(item)</tt>	Removes item from the plot.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L856'>add_axis</a>(axis_id,title,title_above,title_location)</tt>	Creates an :obj orangewidgets plot owaxis with the specified axis_id and title.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L873'>remove_all_axes</a>(user_only)</tt>	Removes all axes from the plot.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L885'>add_custom_axis</a>(axis_id,axis)</tt>	Adds a custom axis with id axis_id to the plot.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L904'>clear</a>()</tt>	Clears the plot removing all curves markers and tooltips.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L921'>clear_markers</a>()</tt>	Removes all markers added with :meth add_marker from the plot.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L929'>update_layout</a>()</tt>	Updates the plot layout.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L1024'>update_zoom</a>()</tt>	Updates the zoom transformation of the plot items.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L1035'>update_axes</a>(zoom_only)</tt>	Updates the axes.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L1079'>replot</a>()</tt>	Replot the entire graph.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L1139'>legend</a>()</tt>	Returns the plot's legend which is a :obj orangewidgets plot owlegend.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L1373'>transform_from_rects</a>(r1,r2)</tt>	Returns a qtransform that maps from rectangle r1 to r2.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L1432'>add_selection</a>(reg)</tt>	Selects all points in the region reg using the current :attr selection_behavior.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L1450'>data_rect_for_axes</a>(x_axis,y_axis)</tt>	Calculates the bounding rectangle in data coordinates for the axes x_axis and y_axis.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L1471'>transform_for_axes</a>(x_axis,y_axis)</tt>	Returns the graph transform that maps from data to scene coordinates using axes x_axis and y_axis.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L1484'>transform</a>(axis_id,value)</tt>	Transforms the value from data to plot coordinates along the axis axis_id.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L1502'>inv_transform</a>(axis_id,value)</tt>	Transforms the value from plot to data coordinates along the axis axis_id.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L1859'>set_palette</a>(p)</tt>	Sets the plot palette to p.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot <a href=' /widgets/utils/plot/owplot.py#L1869'>update_theme</a>()</tt>	Updates the current color theme depending on the value of :attr theme_name.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.VertexBuffer <a href=' /widgets/utils/plot/owopenglrenderer.py#L55'>__init__</a>(data,format_description,usage)</tt>	Constructs vbo and prepares vertex attribute bindings opengl context must be up already (initializegl.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.VertexBuffer <a href=' /widgets/utils/plot/owopenglrenderer.py#L106'>draw</a>(primitives,first,count)</tt>	Renders primitives from data array by default it renders triangles using all the data consult.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWOpenGLRenderer <a href=' /widgets/utils/plot/owopenglrenderer.py#L225'>set_transform</a>(model,view,projection,viewport)</tt>	Sets current projection model view and viewport transforms model parameter.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWOpenGLRenderer <a href=' /widgets/utils/plot/owopenglrenderer.py#L257'>draw_line</a>(position0,position1,color0,color1)</tt>	Draws a line using current transform.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWOpenGLRenderer <a href=' /widgets/utils/plot/owopenglrenderer.py#L292'>draw_rectangle</a>(position0,position1,position2,position3)</tt>	Draws a rectangle using current transform vertices must specified in clockwise or counter-clockwise order (otherwise nothing.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWOpenGLRenderer <a href=' /widgets/utils/plot/owopenglrenderer.py#L350'>draw_triangle</a>(position0,position1,position2,color0)</tt>	Draws a triangle using current transform.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L339'>legend</a>()</tt>	Returns the plot's legend which is a :obj orangewidgets plot owlegend.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L512'>get_mvp</a>()</tt>	Return current model view and projection transforms.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L530'>set_2D_mode</a>()</tt>	Sets ortho projection and identity modelview transform a convenience method which.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L728'>set_features</a>(x_index,y_index,z_index,color_index)</tt>	Explains to the plot how to interpret the data set by :meth set_plot_data its arguments.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L865'>set_plot_data</a>(data,subset_data)</tt>	Sets the data to be drawn data is expected to be scaled already (see owscatterplot3d for example).
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L894'>set_valid_data</a>(valid_data)</tt>	Specifies which examples are invalid and should not be displayed.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L904'>set_new_zoom</a>(min,max)</tt>	Specifies new zoom in data coordinates zoom is provided in form of plot translation.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L924'>zoom_out</a>()</tt>	Restores previous zoom level.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L964'>map_to_plot</a>(point)</tt>	Maps point to plot coordinates applies current translation and scale.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L976'>map_to_data</a>(point)</tt>	Maps point to data coordinates applies inverse of the current translation and scale.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L988'>get_min_max_selected</a>(area)</tt>	Returns min/max x/y/z coordinate values of currently selected points.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L1001'>get_selected_indices</a>()</tt>	Returns indices of currently selected points examples.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L1007'>select_points</a>(area,behavior)</tt>	Selects all points inside volume specified by rectangular area and current camera transform using selection behavior.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L1039'>set_selection_behavior</a>(behavior)</tt>	Sets selection behavior.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L1210'>set_palette</a>(p)</tt>	Sets the plot palette to p.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L1224'>clear</a>()</tt>	Clears the plot legend but remembers plot transformations zoom scale translation.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlot3D <a href=' /widgets/utils/plot/owplot3d.py#L1232'>clear_plot_transformations</a>()</tt>	Forgets plot transformations zoom scale translation.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot. <a href=' /widgets/utils/plot/owtools.py#L57'>resize_plot_item_list</a>(lst,size,item_type,parent)</tt>	Efficiently resizes a list of qgraphicsitems plotitems curves etc.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot. <a href=' /widgets/utils/plot/owtools.py#L88'>move_item</a>(item,pos,animate,duration)</tt>	Animates item to move to position pos.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.TooltipManager <a href=' /widgets/utils/plot/owtools.py#L125'>addToolTip</a>(x,y,text,customX)</tt>	Adds a tool tip if a tooltip with the same name already exists it updates it instead of adding a new one.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.TooltipManager <a href=' /widgets/utils/plot/owtools.py#L150'>maybeTip</a>(x,y)</tt>	Decides whether to pop up a tool tip and which text to show in it.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.TooltipManager <a href=' /widgets/utils/plot/owtools.py#L179'>removeAll</a>()</tt>	Removes all tips.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.PolygonCurve <a href=' /widgets/utils/plot/owtools.py#L217'>polygon_from_data</a>(xData,yData)</tt>	Creates a polygon from a list of x and y coordinates.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.PlotGrid <a href=' /widgets/utils/plot/owtools.py#L470'>set_x_enabled</a>(b)</tt>	Enables or disabled vertial grid lines.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.PlotGrid <a href=' /widgets/utils/plot/owtools.py#L479'>is_x_enabled</a>()</tt>	Returns whether vertical grid lines are enabled.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.PlotGrid <a href=' /widgets/utils/plot/owtools.py#L485'>set_y_enabled</a>(b)</tt>	Enables or disabled horizontal grid lines.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.PlotGrid <a href=' /widgets/utils/plot/owtools.py#L494'>is_y_enabled</a>()</tt>	Returns whether horizontal grid lines are enabled.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.PlotGrid <a href=' /widgets/utils/plot/owtools.py#L500'>set_pen</a>(pen)</tt>	Sets the pen used for drawing the grid lines.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWLegend <a href=' /widgets/utils/plot/owlegend.py#L199'>clear</a>()</tt>	Removes all items from the legend.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWLegend <a href=' /widgets/utils/plot/owlegend.py#L212'>add_curve</a>(curve)</tt>	Adds a legend item with the same point symbol and name as curve.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWLegend <a href=' /widgets/utils/plot/owlegend.py#L228'>add_item</a>(category,value,point)</tt>	Adds an item with title value and point symbol point to the specified category.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWLegend <a href=' /widgets/utils/plot/owlegend.py#L247'>remove_category</a>(category)</tt>	Removes category and all items that belong to it.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWLegend <a href=' /widgets/utils/plot/owlegend.py#L258'>update_items</a>()</tt>	Updates the legend repositioning the items according to the legend's orientation.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWLegend <a href=' /widgets/utils/plot/owlegend.py#L325'>set_orientation</a>(orientation)</tt>	Sets the legend's orientation to orientation.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWLegend <a href=' /widgets/utils/plot/owlegend.py#L348'>set_floating</a>(floating,pos)</tt>	If floating is true, the legend can be dragged with the mouse.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L362'>_check_box</a>(widget,value,label,cb_name)</tt>	Adds a :obj qcheckbox to widget.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L370'>antialiasing_check_box</a>(widget)</tt>	Creates a check box that toggles the antialiasing of the plot.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L376'>show_legend_check_box</a>(widget)</tt>	Creates a check box that shows and hides the plot legend.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L388'>animations_check_box</a>(widget)</tt>	Creates a check box that enabled or disables animations.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L400'>point_size_slider</a>(widget)</tt>	Creates a slider that controls point size.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L406'>alpha_value_slider</a>(widget)</tt>	Creates a slider that controls point transparency.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L418'>color_value_combo</a>(widget)</tt>	Creates a combo box that controls point color.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L423'>shape_value_combo</a>(widget)</tt>	Creates a combo box that controls point shape.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L428'>size_value_combo</a>(widget)</tt>	Creates a combo box that controls point size.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L433'>label_value_combo</a>(widget)</tt>	Creates a combo box that controls point label.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L438'>point_properties_box</a>(widget,box)</tt>	Creates a box with controls for common point properties.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L452'>plot_settings_box</a>(widget,box)</tt>	Creates a box with controls for common plot settings.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L485'>create_box</a>(ids,widget,box,name)</tt>	Creates a :obj qgroupbox with text name and adds it to widget.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L505'>tool_button</a>(id,widget)</tt>	Creates an :obj owbutton and adds it to the parent widget.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L521'>menu_button</a>(main_action_id,ids,widget)</tt>	Creates an :obj owbutton with a popup-menu and adds it to the parent widget.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L553'>state_buttons</a>(orientation,buttons,widget,nomargin)</tt>	This function creates a set of checkable buttons and connects them so that only one may be checked at a time.
<tt style='background-color:#E8E8E8;'> widgets.utils.plot.OWPlotGUI <a href=' /widgets/utils/plot/owplotgui.py#L563'>toolbar</a>(widget,text,orientation,buttons)</tt>	Creates an :obj owtoolbar with the specified text, orientation and buttons and adds it to widget.
