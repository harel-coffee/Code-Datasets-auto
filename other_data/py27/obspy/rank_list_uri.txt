<tt style='background-color:#E8E8E8;'> core. <a href=' /core/compatibility.py#L42'>is_text_buffer</a>(obj)</tt>	Helper function determining if the passed object is an object that can read and write text or not.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/compatibility.py#L63'>is_bytes_buffer</a>(obj)</tt>	Helper function determining if the passed object is an object that can read and write bytes or not.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/compatibility.py#L84'>round_away</a>(number)</tt>	Simple function that rounds a number to the nearest integer if the number.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/preview.py#L25'>create_preview</a>(trace,delta)</tt>	Creates a preview trace.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/preview.py#L88'>merge_previews</a>(stream)</tt>	Merges all preview traces in one stream object does not change the.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/preview.py#L160'>resample_preview</a>(trace,samples,method)</tt>	Resamples a preview trace to the chosen number of samples.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L210'>__init__</a>()</tt>	Creates a new utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L358'>_set</a>()</tt>	Sets current timestamp using kwargs.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L388'>_from_datetime</a>(dt)</tt>	Use python datetime object to set current time.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L403'>_from_timestamp</a>(value)</tt>	Use given timestamp to set current time.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L412'>_from_iso8601_string</a>(value)</tt>	Parses an iso8601 2004 date time string.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L496'>_get_timestamp</a>()</tt>	Returns utc timestamp in seconds.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L513'>__float__</a>()</tt>	Returns utc timestamp in seconds.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L528'>_get_datetime</a>()</tt>	Returns a python datetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L553'>_get_date</a>()</tt>	Returns a python date object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L570'>_get_year</a>()</tt>	Returns year of the current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L585'>_set_year</a>(value)</tt>	Sets year of current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L603'>_get_month</a>()</tt>	Returns month as an integer january is 1 december is 12.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L619'>_set_month</a>(value)</tt>	Sets month of current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L637'>_get_day</a>()</tt>	Returns day as an integer.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L652'>_set_day</a>(value)</tt>	Sets day of current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L670'>_get_weekday</a>()</tt>	Return the day of the week as an integer monday is 0 sunday is 6.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L688'>_get_time</a>()</tt>	Returns a python time object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L705'>_get_hour</a>()</tt>	Returns hour as an integer.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L720'>_set_hour</a>(value)</tt>	Sets hours of current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L738'>_get_minute</a>()</tt>	Returns minute as an integer.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L753'>_set_minute</a>(value)</tt>	Sets minutes of current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L771'>_get_second</a>()</tt>	Returns seconds as an integer.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L786'>_set_second</a>(value)</tt>	Sets seconds of current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L804'>_get_microsecond</a>()</tt>	Returns microseconds as an integer.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L819'>_set_microsecond</a>(value)</tt>	Sets microseconds of current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L837'>_get_julday</a>()</tt>	Returns julian day as an integer.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L852'>_set_julday</a>(value)</tt>	Sets julian day of current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L870'>timetuple</a>()</tt>	Return a time struct_time such as returned by time localtime().
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L878'>utctimetuple</a>()</tt>	Return a time struct_time of current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L886'>__add__</a>(value)</tt>	Adds seconds and microseconds to current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L914'>__sub__</a>(value)</tt>	Subtracts seconds and microseconds from current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L944'>__str__</a>()</tt>	Returns iso8601 string representation from current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L966'>__unicode__</a>()</tt>	Returns iso8601 unicode representation from current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L980'>__eq__</a>(other)</tt>	Rich comparison operator '=='.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1013'>__ne__</a>(other)</tt>	Rich comparison operator '!='.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1040'>__lt__</a>(other)</tt>	Rich comparison operator '<'.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1073'>__le__</a>(other)</tt>	Rich comparison operator '<='.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1106'>__gt__</a>(other)</tt>	Rich comparison operator '>'.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1139'>__ge__</a>(other)</tt>	Rich comparison operator '>='.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1172'>__repr__</a>()</tt>	Returns a representation of utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1178'>__abs__</a>()</tt>	Returns absolute timestamp value of the current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1185'>__hash__</a>()</tt>	An object is hashable if it has a hash value which never changes during its lifetime.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1196'>strftime</a>(format)</tt>	Return a string representing the date and time controlled by an explicit format string.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1211'>strptime</a>(date_string,format)</tt>	Return a utcdatetime corresponding to date_string parsed according to given format.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1228'>timetz</a>()</tt>	Return time object with same hour minute second microsecond and tzinfo attributes.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1241'>utcoffset</a>()</tt>	Returns none (to stay compatible with :class datetime datetime).
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1252'>dst</a>()</tt>	Returns none (to stay compatible with :class datetime datetime).
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1263'>tzname</a>()</tt>	Returns none (to stay compatible with :class datetime datetime).
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1274'>ctime</a>()</tt>	Return a string representing the date and time.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1285'>isoweekday</a>()</tt>	Return the day of the week as an integer monday is 1 sunday is 7.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1301'>isocalendar</a>()</tt>	Returns a tuple containing iso year iso week number iso weekday.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1317'>isoformat</a>(sep)</tt>	Return a string representing the date and time in iso 8601 format.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1338'>format_fissures</a>()</tt>	Returns string representation for the iris fissures protocol.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1354'>format_arclink</a>()</tt>	Returns string representation for the arclink protocol.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1370'>format_seedlink</a>()</tt>	Returns string representation for the seedlink protocol.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1387'>format_seed</a>(compact)</tt>	Returns string representation for a seed volume.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1427'>format_iris_web_service</a>()</tt>	Returns string representation usable for the iris web services.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1443'>_get_precision</a>()</tt>	Returns precision of current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1457'>_set_precision</a>(value)</tt>	Set precision of current utcdatetime object.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1490'>toordinal</a>()</tt>	Return proleptic gregorian ordinal january 1 of year 1 is day 1.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1506'>now</a>()</tt>	Returns current utc datetime.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1513'>utcnow</a>()</tt>	Returns current utc datetime.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1520'>_get_hours_after_midnight</a>()</tt>	Calculate foating point hours after midnight.
<tt style='background-color:#E8E8E8;'> core.UTCDateTime <a href=' /core/utcdatetime.py#L1533'>matplotlib_date</a>()</tt>	Maplotlib date number representation.
<tt style='background-color:#E8E8E8;'> core.Stats <a href=' /core/trace.py#L195'>__str__</a>()</tt>	Return better readable string representation of stats object.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/trace.py#L208'>_add_processing_info</a>(func)</tt>	This is a decorator that attaches information about a processing call as a string to the trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L299'>__eq__</a>(other)</tt>	Implements rich comparison of trace objects for "==" operator.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L317'>__ne__</a>(other)</tt>	Implements rich comparison of trace objects for "!=" operator.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L325'>__lt__</a>(other)</tt>	Too ambiguous throw an error.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L331'>__le__</a>(other)</tt>	Too ambiguous throw an error.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L337'>__gt__</a>(other)</tt>	Too ambiguous throw an error.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L343'>__ge__</a>(other)</tt>	Too ambiguous throw an error.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L349'>__nonzero__</a>()</tt>	No data means no trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L355'>__str__</a>(id_length)</tt>	Return short summary string of the current trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L404'>__len__</a>()</tt>	Return number of data samples of the current trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L423'>__setattr__</a>(key,value)</tt>	__setattr__ method of trace object.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L435'>__getitem__</a>(index)</tt>	__getitem__ method of trace object.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L444'>__mul__</a>(num)</tt>	Create a new stream containing num copies of this trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L468'>__div__</a>(num)</tt>	Split trace into new stream containing num traces of the same size.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L515'>__mod__</a>(num)</tt>	Split trace into new stream containing traces with num samples.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L558'>__add__</a>(trace,method,interpolation_samples,fill_value)</tt>	Add another trace object to current trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L806'>get_id</a>()</tt>	Return a seed compatible identifier of the trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L830'>id</a>(value)</tt>	Set network station location and channel codes from a seed id.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L865'>plot</a>()</tt>	Create a simple graph of the current trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L891'>spectrogram</a>()</tt>	Create a spectrogram plot of the trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L920'>write</a>(filename,format)</tt>	Save current trace into a file.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L949'>_ltrim</a>(starttime,pad,nearest_sample,fill_value)</tt>	Cut current trace to given start time for more info see.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1017'>_rtrim</a>(endtime,pad,nearest_sample,fill_value)</tt>	Cut current trace to given end time for more info see.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1077'>trim</a>(starttime,endtime,pad,nearest_sample)</tt>	Cut current trace to given start and end time.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1147'>slice</a>(starttime,endtime,nearest_sample)</tt>	Return a new trace object with data going from start to end time.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1188'>slide</a>(window_length,step,offset,include_partial_windows)</tt>	Generator yielding equal length sliding windows of the trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1255'>verify</a>()</tt>	Verify current trace object against available meta data.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1298'>simulate</a>(paz_remove,paz_simulate,remove_sensitivity,simulate_sensitivity)</tt>	Correct for instrument response / simulate new instrument response.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1433'>filter</a>(type)</tt>	Filter the data of the current trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1506'>trigger</a>(type)</tt>	Run a triggering algorithm on the data of the current trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1594'>resample</a>(sampling_rate,window,no_filter,strict_length)</tt>	Resample trace data using fourier method spectra are linearly.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1715'>decimate</a>(factor,no_filter,strict_length)</tt>	Downsample trace data by an integer factor.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1799'>max</a>()</tt>	Returns the value of the absolute maximum amplitude in the trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1823'>std</a>()</tt>	Method to get the standard deviation of amplitudes in the trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1843'>differentiate</a>(method)</tt>	Differentiate the trace with respect to time.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1878'>integrate</a>(method)</tt>	Integrate the trace with respect to time.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1911'>detrend</a>(type)</tt>	Remove a trend from the trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L1976'>taper</a>(max_percentage,type,max_length,side)</tt>	Taper the trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L2117'>normalize</a>(norm)</tt>	Normalize the trace to its absolute maximum.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L2183'>copy</a>()</tt>	Returns a deepcopy of the trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L2222'>_internal_add_processing_info</a>(info)</tt>	Add the given informational string to the processing field in the trace's :class ~obspy.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L2230'>split</a>()</tt>	Split trace object containing gaps using a numpy masked array into several traces.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L2266'>interpolate</a>(sampling_rate,method,starttime,npts)</tt>	Interpolate the data using various interpolation techniques.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L2424'>times</a>(type,reftime)</tt>	For convenient plotting compute a numpy array with timing information of all samples in the trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L2506'>_get_response</a>(inventories)</tt>	Search for and return channel response for the trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L2552'>attach_response</a>(inventories)</tt>	Search for and attach channel response to the trace as :class trace.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L2585'>remove_response</a>(inventory,output,water_level,pre_filt)</tt>	Deconvolve instrument response.
<tt style='background-color:#E8E8E8;'> core.Trace <a href=' /core/trace.py#L2879'>remove_sensitivity</a>(inventory)</tt>	Remove instrument sensitivity.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/trace.py#L2904'>_data_sanity_checks</a>(value)</tt>	Check if a given input is suitable to be used for trace data raises the.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/stream.py#L43'>read</a>(pathname_or_url,format,headonly,starttime)</tt>	Read waveform files into an obspy stream object.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/stream.py#L267'>_read</a>(filename,format,headonly)</tt>	Read a single file into a obspy stream object.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/stream.py#L280'>_create_example_stream</a>(headonly)</tt>	Create an example stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L365'>__add__</a>(other)</tt>	Add two streams or a stream with a single trace.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L403'>__iadd__</a>(other)</tt>	Add two streams with self += other.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L436'>__mul__</a>(num)</tt>	Create a new stream containing num copies of this stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L462'>__iter__</a>()</tt>	Return a robust iterator for stream traces.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L505'>__nonzero__</a>()</tt>	A stream is considered zero if has no traces.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L511'>__len__</a>()</tt>	Return the number of traces in the stream object.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L525'>__str__</a>(extended)</tt>	Return short summary string of the current stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L561'>__eq__</a>(other)</tt>	Implements rich comparison of stream objects for "==" operator.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L601'>__ne__</a>(other)</tt>	Implements rich comparison of stream objects for "!=" operator.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L618'>__lt__</a>(other)</tt>	Too ambiguous throw an error.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L624'>__le__</a>(other)</tt>	Too ambiguous throw an error.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L630'>__gt__</a>(other)</tt>	Too ambiguous throw an error.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L636'>__ge__</a>(other)</tt>	Too ambiguous throw an error.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L642'>__setitem__</a>(index,trace)</tt>	__setitem__ method of obspy stream objects.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L648'>__getitem__</a>(index)</tt>	__getitem__ method of obspy stream objects.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L659'>__delitem__</a>(index)</tt>	Passes on the __delitem__ method to the underlying list of traces.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L665'>__getslice__</a>(i,j,k)</tt>	__getslice__ method of obspy stream objects.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L674'>append</a>(trace)</tt>	Append a single trace object to the current stream object.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L702'>extend</a>(trace_list)</tt>	Extend the current stream object with a list of trace objects.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L741'>get_gaps</a>(min_gap,max_gap)</tt>	Determine all trace gaps/overlaps of the stream object.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L834'>insert</a>(position,object)</tt>	Insert either a single trace or a list of traces before index.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L859'>plot</a>()</tt>	Create a waveform plot of the current obspy stream object.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1144'>spectrogram</a>()</tt>	Create a spectrogram plot for each trace in the stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1170'>pop</a>(index)</tt>	Remove and return the trace object specified by index from the stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1199'>print_gaps</a>(min_gap,max_gap)</tt>	Print gap/overlap list summary information of the stream object.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1272'>remove</a>(trace)</tt>	Remove the first occurrence of the specified trace object in the stream object.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1301'>reverse</a>()</tt>	Reverse the traces of the stream object in place.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1325'>sort</a>(keys,reverse)</tt>	Sort the traces in the stream object.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1374'>write</a>(filename,format)</tt>	Save stream into a file.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1441'>trim</a>(starttime,endtime,pad,nearest_sample)</tt>	Cut all traces of this stream object to given start and end time.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1519'>_ltrim</a>(starttime,pad,nearest_sample)</tt>	Cut all traces of this stream object to given start time.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1531'>_rtrim</a>(endtime,pad,nearest_sample)</tt>	Cut all traces of this stream object to given end time.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1542'>cutout</a>(starttime,endtime)</tt>	Cut the given time range out of all traces of this stream object.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1577'>slice</a>(starttime,endtime,keep_empty_traces,nearest_sample)</tt>	Return new stream object cut to the given start and end time.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1640'>slide</a>(window_length,step,offset,include_partial_windows)</tt>	Generator yielding equal length sliding windows of the stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1723'>select</a>(network,station,location,channel)</tt>	Return new stream object only with these traces that match the given stats criteria (e.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1816'>verify</a>()</tt>	Verify all traces of current stream against available meta data.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1835'>_merge_checks</a>()</tt>	Sanity checks for merging.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1865'>merge</a>(method,fill_value,interpolation_samples)</tt>	Merge obspy trace objects with same ids.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L1954'>simulate</a>(paz_remove,paz_simulate,remove_sensitivity,simulate_sensitivity)</tt>	Correct for instrument response / simulate new instrument response.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2057'>filter</a>(type)</tt>	Filter the data of all traces in the stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2122'>trigger</a>(type)</tt>	Run a triggering algorithm on all traces in the stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2194'>resample</a>(sampling_rate,window,no_filter,strict_length)</tt>	Resample data in all traces of stream using fourier method.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2254'>decimate</a>(factor,no_filter,strict_length)</tt>	Downsample data in all traces of stream by an integer factor.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2322'>max</a>()</tt>	Get the values of the absolute maximum amplitudes of all traces in the stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2341'>differentiate</a>(method)</tt>	Differentiate all traces with respect to time.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2371'>integrate</a>(method)</tt>	Integrate all traces with respect to time.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2397'>detrend</a>(type)</tt>	Remove a trend from all traces.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2410'>taper</a>()</tt>	Taper all traces in stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2428'>interpolate</a>()</tt>	Interpolate all traces in a stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2471'>std</a>()</tt>	Calculate standard deviations of all traces in the stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2492'>normalize</a>(global_max)</tt>	Normalize all traces in the stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2567'>rotate</a>(method,back_azimuth,inclination)</tt>	Rotate stream objects.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2683'>copy</a>()</tt>	Return a deepcopy of the stream object.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2720'>clear</a>()</tt>	Clear trace list convenience method.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2743'>_cleanup</a>(misalignment_threshold)</tt>	Merge consistent trace objects but leave everything else alone.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2938'>split</a>()</tt>	Split any trace containing gaps into contiguous unmasked traces.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2951'>attach_response</a>(inventories)</tt>	Search for and attach channel response to each trace as trace.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L2999'>remove_response</a>()</tt>	Deconvolve instrument response for all traces in stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L3033'>remove_sensitivity</a>()</tt>	Remove instrument sensitivity for all traces in stream.
<tt style='background-color:#E8E8E8;'> core.Stream <a href=' /core/stream.py#L3058'>_dummy_stream_from_string</a>(s)</tt>	Helper method to create a dummy stream object with data always equal to one from a string representation of the stream mostly for.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/stream.py#L3105'>_is_pickle</a>(filename)</tt>	Check whether a file is a pickled obspy stream file.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/stream.py#L3133'>_read_pickle</a>(filename)</tt>	Read and return stream from pickled obspy stream file.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/stream.py#L3161'>_write_pickle</a>(stream,filename,protocol)</tt>	Write a python pickle of current stream.
<tt style='background-color:#E8E8E8;'> core.inventory.Station <a href=' /core/inventory/station.py#L38'>__init__</a>(code,latitude,longitude,elevation)</tt>	:type channels list of :class ~obspy core inventory channel channel.
<tt style='background-color:#E8E8E8;'> core.inventory.Station <a href=' /core/inventory/station.py#L186'>get_contents</a>()</tt>	Returns a dictionary containing the contents of the object.
<tt style='background-color:#E8E8E8;'> core.inventory.Station <a href=' /core/inventory/station.py#L319'>select</a>(location,channel,time,starttime)</tt>	Returns the :class station object with only the :class ~obspy.
<tt style='background-color:#E8E8E8;'> core.inventory.Station <a href=' /core/inventory/station.py#L401'>plot</a>(min_freq,output,location,channel)</tt>	Show bode plot of instrument response of all or a subset of the station's channels.
<tt style='background-color:#E8E8E8;'> core.inventory.Network <a href=' /core/inventory/network.py#L36'>__init__</a>(code,stations,total_number_of_stations,selected_number_of_stations)</tt>	:type code str.
<tt style='background-color:#E8E8E8;'> core.inventory.Network <a href=' /core/inventory/network.py#L149'>get_contents</a>()</tt>	Returns a dictionary containing the contents of the object.
<tt style='background-color:#E8E8E8;'> core.inventory.Network <a href=' /core/inventory/network.py#L193'>get_response</a>(seed_id,datetime)</tt>	Find response for a given channel at given time.
<tt style='background-color:#E8E8E8;'> core.inventory.Network <a href=' /core/inventory/network.py#L225'>get_coordinates</a>(seed_id,datetime)</tt>	Return coordinates for a given channel.
<tt style='background-color:#E8E8E8;'> core.inventory.Network <a href=' /core/inventory/network.py#L289'>select</a>(station,location,channel,time)</tt>	Returns the :class network object with only the :class ~obspy.
<tt style='background-color:#E8E8E8;'> core.inventory.Network <a href=' /core/inventory/network.py#L384'>plot</a>(projection,resolution,continent_fill_color,water_fill_color)</tt>	Creates a preview map of all stations in current network object.
<tt style='background-color:#E8E8E8;'> core.inventory.Network <a href=' /core/inventory/network.py#L525'>plot_response</a>(min_freq,output,station,location)</tt>	Show bode plot of instrument response of all or a subset of the network's channels.
<tt style='background-color:#E8E8E8;'> core.inventory.BaseNode <a href=' /core/inventory/util.py#L34'>__init__</a>(code,description,comments,start_date)</tt>	:type code str.
<tt style='background-color:#E8E8E8;'> core.inventory.BaseNode <a href=' /core/inventory/util.py#L91'>alternate_code</a>()</tt>	From the stationxml definition a code used for display or association alternate to the.
<tt style='background-color:#E8E8E8;'> core.inventory.BaseNode <a href=' /core/inventory/util.py#L106'>historical_code</a>()</tt>	From the stationxml definition a previously used code if different from the current code.
<tt style='background-color:#E8E8E8;'> core.inventory.BaseNode <a href=' /core/inventory/util.py#L113'>copy</a>()</tt>	Returns a deepcopy of the object.
<tt style='background-color:#E8E8E8;'> core.inventory.BaseNode <a href=' /core/inventory/util.py#L150'>is_active</a>(time,starttime,endtime)</tt>	Checks if the item was active at some given point in time (time) and/or if it was active at some point during a certain time range.
<tt style='background-color:#E8E8E8;'> core.inventory.Equipment <a href=' /core/inventory/util.py#L216'>__init__</a>(type,description,manufacturer,vendor)</tt>	:type type str.
<tt style='background-color:#E8E8E8;'> core.inventory.Operator <a href=' /core/inventory/util.py#L311'>__init__</a>(agencies,contacts,website)</tt>	:type agencies list of str.
<tt style='background-color:#E8E8E8;'> core.inventory.Person <a href=' /core/inventory/util.py#L357'>__init__</a>(names,agencies,emails,phones)</tt>	:type names list of str optional.
<tt style='background-color:#E8E8E8;'> core.inventory.PhoneNumber <a href=' /core/inventory/util.py#L429'>__init__</a>(area_code,phone_number,country_code,description)</tt>	:type area_code int.
<tt style='background-color:#E8E8E8;'> core.inventory.ExternalReference <a href=' /core/inventory/util.py#L465'>__init__</a>(uri,description)</tt>	:type uri str.
<tt style='background-color:#E8E8E8;'> core.inventory.Comment <a href=' /core/inventory/util.py#L482'>__init__</a>(value,id,begin_effective_time,end_effective_time)</tt>	:type value str.
<tt style='background-color:#E8E8E8;'> core.inventory.Site <a href=' /core/inventory/util.py#L566'>__init__</a>(name,description,town,county)</tt>	:type name str.
<tt style='background-color:#E8E8E8;'> core.inventory. <a href=' /core/inventory/util.py#L806'>_seed_id_keyfunction</a>(x)</tt>	Keyfunction to use in sorting two partial seed ids assumes that the last or only ".
<tt style='background-color:#E8E8E8;'> core.inventory.Channel <a href=' /core/inventory/channel.py#L29'>__init__</a>(code,location_code,latitude,longitude)</tt>	:type code str.
<tt style='background-color:#E8E8E8;'> core.inventory.Channel <a href=' /core/inventory/channel.py#L305'>plot</a>(min_freq,output,start_stage,end_stage)</tt>	Show bode plot of the channel's instrument response.
<tt style='background-color:#E8E8E8;'> core.inventory. <a href=' /core/inventory/inventory.py#L40'>_create_example_inventory</a>()</tt>	Create an example inventory.
<tt style='background-color:#E8E8E8;'> core.inventory. <a href=' /core/inventory/inventory.py#L49'>read_inventory</a>(path_or_file_object,format)</tt>	Function to read inventory files.
<tt style='background-color:#E8E8E8;'> core.inventory.Inventory <a href=' /core/inventory/inventory.py#L89'>__init__</a>(networks,source,sender,created)</tt>	:type networks list of :class ~obspy.
<tt style='background-color:#E8E8E8;'> core.inventory.Inventory <a href=' /core/inventory/inventory.py#L151'>__copy_inventory_metadata</a>(other)</tt>	Will be called after two inventory objects have been merged it.
<tt style='background-color:#E8E8E8;'> core.inventory.Inventory <a href=' /core/inventory/inventory.py#L191'>get_contents</a>()</tt>	Returns a dictionary containing the contents of the object.
<tt style='background-color:#E8E8E8;'> core.inventory.Inventory <a href=' /core/inventory/inventory.py#L256'>write</a>(path_or_file_object,format)</tt>	Writes the inventory object to a file or file-like object in the specified format.
<tt style='background-color:#E8E8E8;'> core.inventory.Inventory <a href=' /core/inventory/inventory.py#L293'>get_response</a>(seed_id,datetime)</tt>	Find response for a given channel at given time.
<tt style='background-color:#E8E8E8;'> core.inventory.Inventory <a href=' /core/inventory/inventory.py#L335'>get_coordinates</a>(seed_id,datetime)</tt>	Return coordinates for a given channel.
<tt style='background-color:#E8E8E8;'> core.inventory.Inventory <a href=' /core/inventory/inventory.py#L365'>select</a>(network,station,location,channel)</tt>	Returns the :class inventory object with only the :class ~obspy.
<tt style='background-color:#E8E8E8;'> core.inventory.Inventory <a href=' /core/inventory/inventory.py#L464'>plot</a>(projection,resolution,continent_fill_color,water_fill_color)</tt>	Creates a preview map of all networks/stations in current inventory object.
<tt style='background-color:#E8E8E8;'> core.inventory.Inventory <a href=' /core/inventory/inventory.py#L681'>plot_response</a>(min_freq,output,network,station)</tt>	Show bode plot of instrument response of all or a subset of the inventory's channels.
<tt style='background-color:#E8E8E8;'> core.inventory.ResponseStage <a href=' /core/inventory/response.py#L41'>__init__</a>(stage_sequence_number,stage_gain,stage_gain_frequency,input_units)</tt>	:type stage_sequence_number int.
<tt style='background-color:#E8E8E8;'> core.inventory.PolesZerosResponseStage <a href=' /core/inventory/response.py#L291'>pz_transfer_function_type</a>(value)</tt>	Setter for the transfer function type.
<tt style='background-color:#E8E8E8;'> core.inventory.CoefficientsTypeResponseStage <a href=' /core/inventory/response.py#L417'>cf_transfer_function_type</a>(value)</tt>	Setter for the transfer function type.
<tt style='background-color:#E8E8E8;'> core.inventory.ResponseListElement <a href=' /core/inventory/response.py#L487'>__init__</a>(frequency,amplitude,phase)</tt>	:type frequency float.
<tt style='background-color:#E8E8E8;'> core.inventory.Response <a href=' /core/inventory/response.py#L701'>__init__</a>(resource_id,instrument_sensitivity,instrument_polynomial,response_stages)</tt>	:type resource_id str.
<tt style='background-color:#E8E8E8;'> core.inventory.Response <a href=' /core/inventory/response.py#L738'>get_evalresp_response_for_frequencies</a>(frequencies,output,start_stage,end_stage)</tt>	Returns frequency response for given frequencies using evalresp.
<tt style='background-color:#E8E8E8;'> core.inventory.Response <a href=' /core/inventory/response.py#L1175'>get_evalresp_response</a>(t_samp,nfft,output,start_stage)</tt>	Returns frequency response and corresponding frequencies using evalresp.
<tt style='background-color:#E8E8E8;'> core.inventory.Response <a href=' /core/inventory/response.py#L1259'>plot</a>(min_freq,output,start_stage,end_stage)</tt>	Show bode plot of instrument response.
<tt style='background-color:#E8E8E8;'> core.inventory.Response <a href=' /core/inventory/response.py#L1413'>get_paz</a>()</tt>	Get poles and zeros stage.
<tt style='background-color:#E8E8E8;'> core.inventory.Response <a href=' /core/inventory/response.py#L1434'>get_sacpz</a>()</tt>	Returns sacpz ascii text representation of response.
<tt style='background-color:#E8E8E8;'> core.inventory. <a href=' /core/inventory/response.py#L1446'>paz_to_sacpz_string</a>(paz,instrument_sensitivity)</tt>	Returns sacpz ascii text representation of response.
<tt style='background-color:#E8E8E8;'> core.inventory.InstrumentSensitivity <a href=' /core/inventory/response.py#L1482'>__init__</a>(value,frequency,input_units,output_units)</tt>	:type value float.
<tt style='background-color:#E8E8E8;'> core.inventory.InstrumentPolynomial <a href=' /core/inventory/response.py#L1569'>__init__</a>(input_units,output_units,frequency_lower_bound,frequency_upper_bound)</tt>	:type approximation_type str.
<tt style='background-color:#E8E8E8;'> core.inventory.FilterCoefficient <a href=' /core/inventory/response.py#L1662'>__init__</a>(value,number)</tt>	:type value float.
<tt style='background-color:#E8E8E8;'> core.inventory.CoefficientWithUncertainties <a href=' /core/inventory/response.py#L1687'>__init__</a>(value,number,lower_uncertainty,upper_uncertainty)</tt>	:type value float.
<tt style='background-color:#E8E8E8;'> core.inventory. <a href=' /core/inventory/response.py#L1715'>_adjust_bode_plot_figure</a>(fig,plot_degrees,grid,show)</tt>	Helper function to do final adjustments to bode plot figure.
<tt style='background-color:#E8E8E8;'> core.inventory. <a href=' /core/inventory/response.py#L1756'>_pitick2latex</a>(x)</tt>	Helper function to convert a float that is a multiple of pi/2 to a latex string.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/testing.py#L45'>add_unittests</a>(testsuite,module_name)</tt>	Function to add all available unittests of the module with given name (e.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/testing.py#L75'>add_doctests</a>(testsuite,module_name)</tt>	Function to add all available doctests of the module with given name (e.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/testing.py#L126'>write_png</a>(arr,filename)</tt>	Custom write_png() function matplotlib < 1 3 cannot write rgba png files.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/testing.py#L160'>compare_images</a>(expected,actual,tol)</tt>	Custom version of :func matplotlib testing compare compare_images.
<tt style='background-color:#E8E8E8;'> core.util.ImageComparison <a href=' /core/util/testing.py#L359'>__enter__</a>()</tt>	Set matplotlib defaults.
<tt style='background-color:#E8E8E8;'> core.util.ImageComparison <a href=' /core/util/testing.py#L411'>__exit__</a>(exc_type,exc_val,exc_tb)</tt>	Remove tempfiles and store created images if obspy_keep_images environment variable is set.
<tt style='background-color:#E8E8E8;'> core.util.ImageComparison <a href=' /core/util/testing.py#L512'>compare</a>()</tt>	Run a custom version of :func matplotlib.
<tt style='background-color:#E8E8E8;'> core.util.ImageComparison <a href=' /core/util/testing.py#L525'>_get_final_filenames</a>()</tt>	Helper function returning the.
<tt style='background-color:#E8E8E8;'> core.util.ImageComparison <a href=' /core/util/testing.py#L539'>_copy_tempfiles</a>()</tt>	Copies created images from tempfiles to a subfolder of baseline images.
<tt style='background-color:#E8E8E8;'> core.util.ImageComparison <a href=' /core/util/testing.py#L562'>_upload_images</a>()</tt>	Uploads images to imgur.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/testing.py#L593'>compare_xml_strings</a>(doc1,doc2)</tt>	Simple helper function to compare two xml strings.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/testing.py#L628'>remove_unique_ids</a>(xml_string,remove_creation_time)</tt>	Removes unique id parts of e g 'publicid=" "' attributes from xml.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/testing.py#L656'>get_all_py_files</a>()</tt>	Return a list with full absolute paths to all py files in obspy file tree.
<tt style='background-color:#E8E8E8;'> core.util.Enum <a href=' /core/util/obspy_types.py#L133'>__str__</a>()</tt>	>>> enum = enum(["c", "a", "b"]) >>> print enum.
<tt style='background-color:#E8E8E8;'> core.util.Enum <a href=' /core/util/obspy_types.py#L150'>__repr__</a>()</tt>	>>> enum = enum(["c", "a", "b"]) >>> print(repr enum.
<tt style='background-color:#E8E8E8;'> core.util.ComplexWithUncertainties <a href=' /core/util/obspy_types.py#L404'>__init__</a>()</tt>	Complex type with optional keywords.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/decorator.py#L35'>deprecated</a>(warning_msg)</tt>	This is a decorator which can be used to mark functions as deprecated.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/decorator.py#L63'>deprecated_keywords</a>(keywords)</tt>	Decorator for marking keywords as deprecated.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/decorator.py#L120'>skip_on_network_error</a>(func)</tt>	Decorator for unittest to mark test routines that fail with certain network errors (e.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/decorator.py#L143'>uncompress_file</a>(func,filename)</tt>	Decorator used for temporary uncompressing file if gz or bz2 archive.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/decorator.py#L213'>raise_if_masked</a>(func)</tt>	Raises if the first argument self in case of methods is a trace with masked values or a stream containing a trace with masked values.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/decorator.py#L236'>skip_if_no_data</a>(func)</tt>	Does nothing if the first argument self in case of methods is a trace with no data in it.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/decorator.py#L247'>map_example_filename</a>(arg_kwarg_name)</tt>	Decorator that replaces "/path/to/filename" patterns in the arg or kwarg of the specified name with the correct file path.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/decorator.py#L303'>_decorate_polyfill</a>(func,caller)</tt>	Decorate func caller decorates a function using a caller.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/decorator.py#L321'>rlock</a>(func)</tt>	Place a threading recursive lock rlock on the wrapped function.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/libnames.py#L21'>cleanse_pymodule_filename</a>(filename)</tt>	Replace all characters not allowed in python module names in filename with "_".
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/libnames.py#L42'>_get_lib_name</a>(lib,add_extension_suffix)</tt>	Helper function to get an architecture and python version specific library filename.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/libnames.py#L79'>_load_cdll</a>(name)</tt>	Helper function to load a shared library built during obspy installation with ctypes.
<tt style='background-color:#E8E8E8;'> core.util.AttribDict <a href=' /core/util/attribdict.py#L50'>__init__</a>()</tt>	An attribdict can be initialized in two ways it can be given an.
<tt style='background-color:#E8E8E8;'> core.util.AttribDict <a href=' /core/util/attribdict.py#L117'>__getattr__</a>(name,default)</tt>	Py3k hasattr() expects an attributeerror no keyerror to be raised if the attribute is not found.
<tt style='background-color:#E8E8E8;'> core.util.AttribDict <a href=' /core/util/attribdict.py#L144'>_pretty_str</a>(priorized_keys,min_label_length)</tt>	Return better readable string representation of attribdict object.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/misc.py#L55'>guess_delta</a>(channel)</tt>	Estimate time delta in seconds between each sample from given channel name.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/misc.py#L85'>score_at_percentile</a>(values,per,limit,issorted)</tt>	Calculates the score at the given per percentile of the sequence a.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/misc.py#L136'>flat_not_masked_contiguous</a>(a)</tt>	Find contiguous unmasked data in a masked array along the given axis.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/misc.py#L159'>complexify_string</a>(line)</tt>	Converts a string in the form " real imag " into a complex type.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/misc.py#L180'>to_int_or_zero</a>(value)</tt>	Converts given value to an integer or returns 0 if it fails.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/misc.py#L234'>get_untracked_files_from_git</a>()</tt>	Tries to return a list of files absolute paths that are untracked by git in the repository.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/misc.py#L265'>CatchOutput</a>()</tt>	A context manager that catches stdout/stderr/exit() for its scope.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/misc.py#L331'>TemporaryWorkingDirectory</a>()</tt>	A context manager that changes to a temporary working directory.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/misc.py#L351'>factorize_int</a>(x)</tt>	Calculate prime factorization of integer.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/misc.py#L377'>get_window_times</a>(starttime,endtime,window_length,step)</tt>	Function calculating a list of times making up equal length windows from within a given time interval.
<tt style='background-color:#E8E8E8;'> core.util.MatplotlibBackend <a href=' /core/util/misc.py#L461'>switch_backend</a>(backend,sloppy)</tt>	Switch matplotlib backend.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/misc.py#L497'>limit_numpy_fft_cache</a>(max_size_in_mb_per_cache)</tt>	Numpy's fft implementation utilizes caches to speedup subsequent ffts of the same size.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/base.py#L126'>create_empty_data_chunk</a>(delta,dtype,fill_value)</tt>	Creates an numpy array depending on the given data type and fill value.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/base.py#L177'>get_example_file</a>(filename)</tt>	Function to find the absolute path of a data file the obspy modules are installed to a custom installation directory.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/base.py#L216'>_get_entry_points</a>(group,subgroup)</tt>	Gets a dictionary of all available plug-ins of a group or subgroup.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/base.py#L242'>_get_ordered_entry_points</a>(group,subgroup,order_list)</tt>	Gets a ordered dictionary of all available plug-ins of a group or subgroup.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/base.py#L283'>_get_function_from_entry_point</a>(group,type)</tt>	A "automagic" function searching a given dict of entry points for a valid entry point and returns the function call.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/base.py#L327'>get_dependency_version</a>(package_name)</tt>	Get version information of a dependency package.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/base.py#L357'>_read_from_plugin</a>(plugin_type,filename,format)</tt>	Reads a single file from a plug-in's readformat function.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/base.py#L410'>get_script_dir_name</a>()</tt>	Get the directory of the current script file this is more robust than.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/base.py#L419'>make_format_plugin_table</a>(group,method,numspaces,unindent_first_line)</tt>	Returns a markdown formatted table with read waveform plugins to insert in docstrings.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/base.py#L503'>_get_deprecated_argument_action</a>(old_name,new_name,real_action)</tt>	Specifies deprecated command-line arguments to scripts.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/base.py#L529'>download_to_file</a>(url,filename_or_buffer,chunk_size)</tt>	Helper function to download a potentially large file.
<tt style='background-color:#E8E8E8;'> core.util. <a href=' /core/util/version.py#L171'>_normalize_version</a>(version)</tt>	Normalize version number string to adhere with pep440 strictly.
<tt style='background-color:#E8E8E8;'> core.event. <a href=' /core/event/source.py#L431'>farfield</a>(mt,points,type)</tt>	Returns the p/s farfield radiation pattern based on [aki1980]_ eq.
<tt style='background-color:#E8E8E8;'> core.event. <a href=' /core/event/source.py#L502'>_fullmt</a>(mt)</tt>	Takes 6 comp moment tensor and returns full 3x3 moment tensor.
<tt style='background-color:#E8E8E8;'> core.event.QuantityError <a href=' /core/event/base.py#L72'>__bool__</a>()</tt>	Boolean testing for quantityerror.
<tt style='background-color:#E8E8E8;'> core.event. <a href=' /core/event/base.py#L99'>_bool</a>(value)</tt>	A custom bool() implementation that returns true for any value including zero of int and float.
<tt style='background-color:#E8E8E8;'> core.event. <a href=' /core/event/base.py#L110'>_event_type_class_factory</a>(class_name,class_attributes,class_contains)</tt>	Class factory to unify the creation of all the types needed for the event handling in obspy.
<tt style='background-color:#E8E8E8;'> core.event.ResourceIdentifier <a href=' /core/event/base.py#L656'>bind_resource_ids</a>(cls)</tt>	Bind the unbound resourceidentifier instances to referred objects.
<tt style='background-color:#E8E8E8;'> core.event.ResourceIdentifier <a href=' /core/event/base.py#L671'>get_referred_object</a>()</tt>	Returns the object associated with the resource identifier.
<tt style='background-color:#E8E8E8;'> core.event.ResourceIdentifier <a href=' /core/event/base.py#L690'>_get_similar_referred_object</a>()</tt>	Find an object with the same resource_id that is not none and return it.
<tt style='background-color:#E8E8E8;'> core.event.ResourceIdentifier <a href=' /core/event/base.py#L721'>set_referred_object</a>(referred_object,warn)</tt>	Binds a resourceidentifier instance to an object.
<tt style='background-color:#E8E8E8;'> core.event.ResourceIdentifier <a href=' /core/event/base.py#L749'>convert_id_to_quakeml_uri</a>(authority_id)</tt>	Converts the current id to a valid quakeml uri.
<tt style='background-color:#E8E8E8;'> core.event.ResourceIdentifier <a href=' /core/event/base.py#L766'>get_quakeml_uri</a>(authority_id)</tt>	Returns the id as a valid quakeml uri if possible does not.
<tt style='background-color:#E8E8E8;'> core.event.ResourceIdentifier <a href=' /core/event/base.py#L803'>copy</a>()</tt>	Returns a copy of the resourceidentifier.
<tt style='background-color:#E8E8E8;'> core.event.ResourceIdentifier <a href=' /core/event/base.py#L847'>id</a>()</tt>	Unique identifier of the current instance.
<tt style='background-color:#E8E8E8;'> core.event.ResourceIdentifier <a href=' /core/event/base.py#L883'>uuid</a>()</tt>	Deleting is uuid hash is forbidden and will not work.
<tt style='background-color:#E8E8E8;'> core.event.ResourceIdentifier <a href=' /core/event/base.py#L883'>uuid</a>(value)</tt>	Setting is uuid hash is forbidden and will not work.
<tt style='background-color:#E8E8E8;'> core.event.ResourceIdentifier <a href=' /core/event/base.py#L924'>__hash__</a>()</tt>	Uses the same hash as the resource id this means that class instances.
<tt style='background-color:#E8E8E8;'> core.event.ResourceIdentifier <a href=' /core/event/base.py#L937'>regenerate_uuid</a>()</tt>	Regenerates the uuid part of the id does nothing for resource.
<tt style='background-color:#E8E8E8;'> core.event.Event <a href=' /core/event/event.py#L105'>short_str</a>()</tt>	Returns a short string representation of the current event.
<tt style='background-color:#E8E8E8;'> core.event.Event <a href=' /core/event/event.py#L128'>__str__</a>()</tt>	Print a short summary at the top.
<tt style='background-color:#E8E8E8;'> core.event.Event <a href=' /core/event/event.py#L142'>preferred_origin</a>()</tt>	Returns the preferred origin.
<tt style='background-color:#E8E8E8;'> core.event.Event <a href=' /core/event/event.py#L150'>preferred_magnitude</a>()</tt>	Returns the preferred magnitude.
<tt style='background-color:#E8E8E8;'> core.event.Event <a href=' /core/event/event.py#L158'>preferred_focal_mechanism</a>()</tt>	Returns the preferred focal mechanism.
<tt style='background-color:#E8E8E8;'> core.event.Event <a href=' /core/event/event.py#L166'>plot</a>(kind,subplot_size,show,outfile)</tt>	Plot event location and/or the preferred focal mechanism and radiation pattern.
<tt style='background-color:#E8E8E8;'> core.event.Event <a href=' /core/event/event.py#L276'>__deepcopy__</a>(memodict)</tt>	Reset resource_id's object_id after deep copy to allow the.
<tt style='background-color:#E8E8E8;'> core.event.Event <a href=' /core/event/event.py#L291'>write</a>(filename,format)</tt>	Saves event information into a file.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L106'>__add__</a>(other)</tt>	Method to add two catalogs.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L117'>__delitem__</a>(index)</tt>	Passes on the __delitem__ method to the underlying list of traces.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L123'>__eq__</a>(other)</tt>	__eq__ method of the catalog object.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L151'>__getitem__</a>(index)</tt>	__getitem__ method of the catalog object.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L164'>__getslice__</a>(i,j,k)</tt>	__getslice__ method of the catalog object.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L173'>__iadd__</a>(other)</tt>	Method to add two catalog with self += other.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L192'>__iter__</a>()</tt>	Return a robust iterator for events of current catalog.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L203'>__len__</a>()</tt>	Returns the number of events in the catalog object.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L211'>__setitem__</a>(index,event)</tt>	__setitem__ method of the catalog object.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L220'>__str__</a>(print_all)</tt>	Returns short summary string of the current catalog.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L247'>append</a>(event)</tt>	Appends a single event object to the current catalog object.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L257'>clear</a>()</tt>	Clears event list convenient method.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L273'>filter</a>()</tt>	Returns a new catalog object only containing events which match the specified filter rules.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L401'>copy</a>()</tt>	Returns a deepcopy of the catalog object.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L438'>extend</a>(event_list)</tt>	Extends the current catalog object with a list of event objects.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L455'>write</a>(filename,format)</tt>	Saves catalog into a file.
<tt style='background-color:#E8E8E8;'> core.event.Catalog <a href=' /core/event/catalog.py#L504'>plot</a>(projection,resolution,continent_fill_color,water_fill_color)</tt>	Creates preview map of all events in current catalog object.
<tt style='background-color:#E8E8E8;'> core.event. <a href=' /core/event/catalog.py#L765'>read_events</a>(pathname_or_url,format)</tt>	Read event files into an obspy catalog object.
<tt style='background-color:#E8E8E8;'> core.event. <a href=' /core/event/catalog.py#L848'>_read</a>(filename,format)</tt>	Reads a single event file into a obspy catalog object.
<tt style='background-color:#E8E8E8;'> core.event. <a href=' /core/event/catalog.py#L860'>_create_example_catalog</a>()</tt>	Create an example catalog.
<tt style='background-color:#E8E8E8;'> geodetics. <a href=' /geodetics/base.py#L43'>calc_vincenty_inverse</a>(lat1,lon1,lat2,lon2)</tt>	Vincenty inverse solution of geodesics on the ellipsoid.
<tt style='background-color:#E8E8E8;'> geodetics. <a href=' /geodetics/base.py#L205'>gps2dist_azimuth</a>(lat1,lon1,lat2,lon2)</tt>	Computes the distance between two geographic points on the wgs84 ellipsoid and the forward and backward azimuths between these points.
<tt style='background-color:#E8E8E8;'> geodetics. <a href=' /geodetics/base.py#L264'>kilometers2degrees</a>(kilometer,radius)</tt>	Convenience function to convert kilometers to degrees assuming a perfectly spherical earth.
<tt style='background-color:#E8E8E8;'> geodetics. <a href=' /geodetics/base.py#L288'>degrees2kilometers</a>(degrees,radius)</tt>	Convenience function to convert great circle degrees to kilometers assuming a perfectly spherical earth.
<tt style='background-color:#E8E8E8;'> geodetics. <a href=' /geodetics/base.py#L309'>locations2degrees</a>(lat1,long1,lat2,long2)</tt>	Convenience function to calculate the great circle distance between two points on a spherical earth.
<tt style='background-color:#E8E8E8;'> geodetics. <a href=' /geodetics/base.py#L352'>mean_longitude</a>(longitudes)</tt>	Compute sample mean longitude assuming longitude in degrees from -180 to 180.
<tt style='background-color:#E8E8E8;'> geodetics.FlinnEngdahl <a href=' /geodetics/flinnengdahl.py#L98'>get_quadrant</a>(longitude,latitude)</tt>	Return quadrant from given coordinate.
<tt style='background-color:#E8E8E8;'> geodetics.FlinnEngdahl <a href=' /geodetics/flinnengdahl.py#L118'>get_region</a>(longitude,latitude)</tt>	Return region from given coordinate >>> fe = flinnengdahl().
<tt style='background-color:#E8E8E8;'> geodetics.FlinnEngdahl <a href=' /geodetics/flinnengdahl.py#L167'>get_region_by_number</a>(number)</tt>	Return region with given number >>> fe = flinnengdahl().
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/core.py#L64'>_is_slist</a>(filename)</tt>	Checks whether a file is ascii slist format.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/core.py#L90'>_is_tspair</a>(filename)</tt>	Checks whether a file is ascii tspair format.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/core.py#L116'>_read_slist</a>(filename,headonly)</tt>	Reads a ascii slist file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/core.py#L184'>_read_tspair</a>(filename,headonly)</tt>	Reads a ascii tspair file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/core.py#L252'>_write_slist</a>(stream,filename)</tt>	Writes a ascii slist file.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/core.py#L353'>_write_tspair</a>(stream,filename)</tt>	Writes a ascii tspair file.
<tt style='background-color:#E8E8E8;'> io.ascii. <a href=' /io/ascii/core.py#L456'>_parse_data</a>(data,data_type)</tt>	Simple function to read data contained in a stringio object to a numpy array.
<tt style='background-color:#E8E8E8;'> io.nlloc. <a href=' /io/nlloc/util.py#L20'>read_nlloc_scatter</a>(filename,coordinate_converter)</tt>	Read a nonlinloc scatter file into a numpy array.
<tt style='background-color:#E8E8E8;'> io.nlloc. <a href=' /io/nlloc/core.py#L34'>is_nlloc_hyp</a>(filename)</tt>	Checks that a file is actually a nonlinloc hypocenter-phase file.
<tt style='background-color:#E8E8E8;'> io.nlloc. <a href=' /io/nlloc/core.py#L48'>read_nlloc_hyp</a>(filename,coordinate_converter,picks)</tt>	Reads a nonlinloc hypocenter-phase file to a :class ~obspy.
<tt style='background-color:#E8E8E8;'> io.nlloc. <a href=' /io/nlloc/core.py#L136'>_read_single_hypocenter</a>(lines,coordinate_converter,original_picks)</tt>	Given a list of lines (starting with a 'nlloc' line and ending with a 'end_nlloc' line), parse them into an event.
<tt style='background-color:#E8E8E8;'> io.nlloc. <a href=' /io/nlloc/core.py#L357'>write_nlloc_obs</a>(catalog,filename)</tt>	Write a nonlinloc phase file (nlloc_obs) from a :class ~obspy.
<tt style='background-color:#E8E8E8;'> io.stationtxt. <a href=' /io/stationtxt/core.py#L79'>is_fdsn_station_text_file</a>(path_or_file_object)</tt>	Simple function checking if the passed object contains a valid fdsn station text file.
<tt style='background-color:#E8E8E8;'> io.stationtxt. <a href=' /io/stationtxt/core.py#L125'>read_fdsn_station_text_file</a>(path_or_file_object)</tt>	Function reading a fdsn station text file to an inventory object.
<tt style='background-color:#E8E8E8;'> io.stationtxt. <a href=' /io/stationtxt/core.py#L259'>inventory_to_station_text</a>(inventory_or_network,level)</tt>	Function to convert inventory or network to station text representation.
<tt style='background-color:#E8E8E8;'> io.stationtxt. <a href=' /io/stationtxt/core.py#L384'>_write_stationtxt</a>(inventory,path_or_file_object,level)</tt>	Writes an inventory object to a file or file-like object in stationtxt format.
<tt style='background-color:#E8E8E8;'> io.win. <a href=' /io/win/core.py#L17'>_is_win</a>(filename,century)</tt>	Checks whether a file is win or not.
<tt style='background-color:#E8E8E8;'> io.win. <a href=' /io/win/core.py#L55'>_read_win</a>(filename,century)</tt>	Reads a win file and returns a stream object.
<tt style='background-color:#E8E8E8;'> io.ndk. <a href=' /io/ndk/core.py#L53'>_get_resource_id</a>(cmtname,res_type,tag)</tt>	Helper function to create consistent resource ids.
<tt style='background-color:#E8E8E8;'> io.ndk. <a href=' /io/ndk/core.py#L63'>_parse_date_time</a>(date,time)</tt>	Function taking a tuple of date and time string from an ndk file and converting it to an utcdatetime object.
<tt style='background-color:#E8E8E8;'> io.ndk. <a href=' /io/ndk/core.py#L88'>_is_ndk</a>(filename)</tt>	Checks that a file is actually an ndk file.
<tt style='background-color:#E8E8E8;'> io.ndk. <a href=' /io/ndk/core.py#L146'>_read_ndk</a>(filename)</tt>	Reads an ndk file to a :class ~obspy core event catalog object.
<tt style='background-color:#E8E8E8;'> io.wav. <a href=' /io/wav/core.py#L41'>_is_wav</a>(filename)</tt>	Checks whether a file is a audio wav file or not.
<tt style='background-color:#E8E8E8;'> io.wav. <a href=' /io/wav/core.py#L69'>_read_wav</a>(filename,headonly)</tt>	Reads a audio wav file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.wav. <a href=' /io/wav/core.py#L111'>_write_wav</a>(stream,filename,framerate,rescale)</tt>	Writes a audio wav file from given obspy stream object the seismogram is.
<tt style='background-color:#E8E8E8;'> io.cmtsolution. <a href=' /io/cmtsolution/core.py#L30'>_get_resource_id</a>(cmtname,res_type,tag)</tt>	Helper function to create consistent resource ids.
<tt style='background-color:#E8E8E8;'> io.cmtsolution. <a href=' /io/cmtsolution/core.py#L40'>_buffer_proxy</a>(filename_or_buf,function,reset_fp,file_mode)</tt>	Calls a function with an open file or file-like object as the first argument.
<tt style='background-color:#E8E8E8;'> io.cmtsolution. <a href=' /io/cmtsolution/core.py#L71'>_is_cmtsolution</a>(filename_or_buf)</tt>	Checks if the file is a cmtsolution file.
<tt style='background-color:#E8E8E8;'> io.cmtsolution. <a href=' /io/cmtsolution/core.py#L87'>_internal_is_cmtsolution</a>(buf)</tt>	Checks if the file is a cmtsolution file.
<tt style='background-color:#E8E8E8;'> io.cmtsolution. <a href=' /io/cmtsolution/core.py#L104'>_read_cmtsolution</a>(filename_or_buf)</tt>	Reads a cmtsolution file to a :class ~obspy core event catalog object.
<tt style='background-color:#E8E8E8;'> io.cmtsolution. <a href=' /io/cmtsolution/core.py#L114'>_internal_read_cmtsolution</a>(buf)</tt>	Reads a cmtsolution file to a :class ~obspy core event catalog object.
<tt style='background-color:#E8E8E8;'> io.cmtsolution. <a href=' /io/cmtsolution/core.py#L148'>_internal_read_single_cmtsolution</a>(buf)</tt>	Reads a single cmtsolution file to a :class ~obspy core event catalog.
<tt style='background-color:#E8E8E8;'> io.cmtsolution. <a href=' /io/cmtsolution/core.py#L304'>_write_cmtsolution</a>(catalog,filename_or_buf)</tt>	Write an event to a file.
<tt style='background-color:#E8E8E8;'> io.cmtsolution. <a href=' /io/cmtsolution/core.py#L317'>_internal_write_cmtsolution</a>(buf,catalog)</tt>	Write events to a file.
<tt style='background-color:#E8E8E8;'> io.cmtsolution. <a href=' /io/cmtsolution/core.py#L336'>_internal_write_single_cmtsolution</a>(buf,event)</tt>	Write an event to a file.
<tt style='background-color:#E8E8E8;'> io.pde. <a href=' /io/pde/mchedr.py#L43'>_is_mchedr</a>(filename)</tt>	Checks whether a file format is mchedr machine-readable earthquake data report.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L80'>load</a>(filename)</tt>	Reads mchedr file into obspy catalog object.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L95'>loads</a>(string)</tt>	Parses mchedr string into obspy catalog object.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L158'>_tensor_code_sign</a>(code)</tt>	Converts tensor from 'x y z' system to 'r t p'.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L175'>_decode_fe_region_number</a>(number)</tt>	Converts flinn-engdahl region number to string.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L200'>_angle_between</a>(u1,u2)</tt>	Returns the angle in degrees between unit vectors 'u1' and 'u2': source https //stackoverflow.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L213'>_lat_err_to_deg</a>(latitude_stderr)</tt>	Convert latitude error from km to degrees.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L223'>_lon_err_to_deg</a>(longitude_stderr,latitude)</tt>	Convert longitude error from km to degrees.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L234'>_parse_record_hy</a>(line)</tt>	Parses the 'hypocenter' record hy.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L294'>_parse_record_e</a>(line,event)</tt>	Parses the 'error and magnitude' record e.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L365'>_parse_record_l</a>(line,event)</tt>	Parses the '90 percent error ellipse' record l.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L426'>_parse_record_a</a>(line,event)</tt>	Parses the 'additional parameters' record a.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L449'>_parse_record_c</a>(line,event)</tt>	Parses the 'general comment' record c.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L465'>_parse_record_ah</a>(line,event)</tt>	Parses the 'additional hypocenter' record ah.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L501'>_parse_record_ae</a>(line,event)</tt>	Parses the 'additional hypocenter error and magnitude record' ae.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L551'>_parse_record_dp</a>(line,event)</tt>	Parses the 'source parameter data - primary' record dp.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L708'>_parse_record_dt</a>(line,focal_mechanism)</tt>	Parses the 'source parameter data - tensor' record dt.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L722'>_parse_record_da</a>(line,focal_mechanism)</tt>	Parses the 'source parameter data - principal axes and.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L781'>_parse_record_dc</a>(line,focal_mechanism)</tt>	Parses the 'source parameter data - comment' record dc.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L794'>_parse_record_p</a>(line,event)</tt>	Parses the 'primary phase record' p the primary phase is the first phase of the reading.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L894'>_parse_record_m</a>(line,event,pick)</tt>	Parses the 'surface wave record' m.
<tt style='background-color:#E8E8E8;'> io.pde.Unpickler <a href=' /io/pde/mchedr.py#L937'>_parse_record_s</a>(line,event,p_pick,p_arrival)</tt>	Parses the 'secondary phases' record s secondary phases are following phases of the reading.
<tt style='background-color:#E8E8E8;'> io.pde. <a href=' /io/pde/mchedr.py#L1062'>_read_mchedr</a>(filename)</tt>	Reads a neic pde mchedr machine-readable earthquake data report file and returns a obspy catalog object.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/paz.py#L34'>read_paz</a>(paz_file)</tt>	Read gse paz / calibration file format and returns poles zeros and the seismometer_gain.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/paz.py#L98'>attach_paz</a>(tr,paz_file)</tt>	Attach tr stats paz attribdict to trace from gse2 paz_file.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/bulletin.py#L106'>_is_gse2</a>(filename)</tt>	Checks whether a file is gse2 0 format.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/bulletin.py#L983'>_read_gse2</a>(filename,headonly,verify_chksum)</tt>	Reads a gse2 file and returns a stream object.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/core.py#L75'>_write_gse2</a>(stream,filename,inplace)</tt>	Write gse2 file from a stream object.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/core.py#L114'>_is_gse1</a>(filename)</tt>	Checks whether a file is gse1 or not.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/core.py#L134'>_read_gse1</a>(filename,headonly,verify_chksum)</tt>	Reads a gse1 file and returns a stream object.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/libgse2.py#L362'>read</a>(fh,verify_chksum)</tt>	Read gse1 file and return header and data.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/libgse2.py#L141'>read_header</a>(fh)</tt>	Reads gse2 header from file pointer and returns it as dictionary.
<tt style='background-color:#E8E8E8;'> io.gse2.Unpickler <a href=' /io/gse2/bulletin.py#L235'>load</a>(filename)</tt>	Read gse2 0 file into obspy catalog object.
<tt style='background-color:#E8E8E8;'> io.gse2.Unpickler <a href=' /io/gse2/bulletin.py#L248'>_add_line_nb</a>(message)</tt>	Add line number at the end of a str message.
<tt style='background-color:#E8E8E8;'> io.gse2.Unpickler <a href=' /io/gse2/bulletin.py#L259'>_warn</a>(message)</tt>	Display a warning message with the line number.
<tt style='background-color:#E8E8E8;'> io.gse2.Unpickler <a href=' /io/gse2/bulletin.py#L274'>_get_res_id</a>(ident,parent,parent_res_id)</tt>	Create a :class ~obspy core event base resourceidentifier object.
<tt style='background-color:#E8E8E8;'> io.gse2.Unpickler <a href=' /io/gse2/bulletin.py#L320'>_check_header</a>(first_line)</tt>	Just check some stuff in header.
<tt style='background-color:#E8E8E8;'> io.gse2.Unpickler <a href=' /io/gse2/bulletin.py#L338'>_get_channel</a>(station,time)</tt>	Use inventory to retrieve channel and location code.
<tt style='background-color:#E8E8E8;'> io.gse2.Unpickler <a href=' /io/gse2/bulletin.py#L413'>_parse_event</a>(first_line)</tt>	Parse an event.
<tt style='background-color:#E8E8E8;'> io.gse2.Unpickler <a href=' /io/gse2/bulletin.py#L456'>_parse_origin</a>(event)</tt>	Parse an origin.
<tt style='background-color:#E8E8E8;'> io.gse2.Unpickler <a href=' /io/gse2/bulletin.py#L509'>_parse_first_line_origin</a>(line,event,magnitudes)</tt>	Parse the first line of origin data.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/bulletin.py#L983'>_read_gse2</a>(filename,inventory,default_network_code,default_location_code)</tt>	Read a gse2 0 bulletin file and returns an obspy catalog object.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/libgse2.py#L127'>is_gse2</a>(f)</tt>	Checks whether a file is gse2 or not returns true or false.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/libgse2.py#L190'>write_header</a>(f,headdict)</tt>	Rewriting the write_header function of gse_functions c.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/libgse2.py#L237'>uncompress_cm6</a>(f,n_samps)</tt>	Uncompress n_samps of cm6 compressed data from file pointer fp.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/libgse2.py#L269'>compress_cm6</a>(data)</tt>	Cm6 compress data :type data :class numpy.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/libgse2.py#L299'>verify_checksum</a>(fh,data,version)</tt>	Calculate checksum from data as in gse_driver c line 60.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/libgse2.py#L332'>read_integer_data</a>(fh,npts)</tt>	Reads npts points of uncompressed integers from given file handler.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/libgse2.py#L362'>read</a>(f,verify_chksum)</tt>	Read gse2 file and return header and data.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/libgse2.py#L395'>write</a>(headdict,data,f,inplace)</tt>	Write gse2 file given the header and data.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/libgse2.py#L452'>parse_sta2</a>(line)</tt>	Parses a string with a gse2 sta2 header line.
<tt style='background-color:#E8E8E8;'> io.gse2. <a href=' /io/gse2/libgse2.py#L537'>compile_sta2</a>(stats)</tt>	Returns a sta2 line as a string including newline at end from a :class ~obspy.
<tt style='background-color:#E8E8E8;'> io.nied. <a href=' /io/nied/fnetmt.py#L39'>_buffer_proxy</a>(filename_or_buf,function,reset_fp,file_mode)</tt>	Calls a function with an open file or file-like object as the first argument.
<tt style='background-color:#E8E8E8;'> io.nied. <a href=' /io/nied/knet.py#L53'>_is_knet_ascii</a>(filename_or_buf)</tt>	Checks if the file is a valid k-net/kik-net ascii file.
<tt style='background-color:#E8E8E8;'> io.nied. <a href=' /io/nied/knet.py#L69'>_internal_is_knet_ascii</a>(buf)</tt>	Checks if the file is a valid k-net/kik-net ascii file.
<tt style='background-color:#E8E8E8;'> io.nied. <a href=' /io/nied/knet.py#L85'>_prep_hdr_line</a>(name,line)</tt>	Helper function to check the contents of a header line and split it.
<tt style='background-color:#E8E8E8;'> io.nied. <a href=' /io/nied/knet.py#L101'>_read_knet_hdr</a>(hdrlines,convert_stnm)</tt>	Read the header values into a dictionary.
<tt style='background-color:#E8E8E8;'> io.nied. <a href=' /io/nied/knet.py#L241'>_read_knet_ascii</a>(filename_or_buf)</tt>	Reads a k-net/kik-net ascii file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.nied. <a href=' /io/nied/knet.py#L255'>_internal_read_knet_ascii</a>(buf)</tt>	Reads a k-net/kik-net ascii file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.nied. <a href=' /io/nied/util.py#L7'>gen_sc3_id</a>(dt,numenc,sym)</tt>	Generate an event id following the seiscomp3 convention by default it.
<tt style='background-color:#E8E8E8;'> io.nied. <a href=' /io/nied/fnetmt.py#L29'>_get_resource_id</a>(name,res_type,tag)</tt>	Helper function to create consistent resource ids.
<tt style='background-color:#E8E8E8;'> io.nied. <a href=' /io/nied/fnetmt.py#L70'>_is_fnetmt_catalog</a>(filename_or_buf)</tt>	Checks if the file is an f-net moment tensor file.
<tt style='background-color:#E8E8E8;'> io.nied. <a href=' /io/nied/fnetmt.py#L86'>_internal_is_fnetmt_catalog</a>(buf)</tt>	Test whether file is an f-net moment tensor catalog file by reading the header and the first data line.
<tt style='background-color:#E8E8E8;'> io.nied. <a href=' /io/nied/fnetmt.py#L122'>_read_fnetmt_catalog</a>(filename_or_buf)</tt>	Reads an f-net moment tensor catalog file to a :class ~obspy.
<tt style='background-color:#E8E8E8;'> io.nied. <a href=' /io/nied/fnetmt.py#L134'>_internal_read_fnetmt_catalog</a>(buf)</tt>	Reads an f-net moment tensor catalog file to a :class ~obspy.
<tt style='background-color:#E8E8E8;'> io.nied. <a href=' /io/nied/fnetmt.py#L180'>_internal_read_single_fnetmt_entry</a>(line)</tt>	Reads a single f-net moment tensor solution to a :class ~obspy.
<tt style='background-color:#E8E8E8;'> io.kml. <a href=' /io/kml/core.py#L25'>inventory_to_kml_string</a>(inventory,icon_url,icon_size,label_size)</tt>	Convert an :class ~obspy core inventory inventory inventory to a kml.
<tt style='background-color:#E8E8E8;'> io.kml. <a href=' /io/kml/core.py#L144'>catalog_to_kml_string</a>(catalog,icon_url,label_func,icon_size_func)</tt>	Convert a :class ~obspy core event catalog to a kml string.
<tt style='background-color:#E8E8E8;'> io.kml. <a href=' /io/kml/core.py#L276'>_write_kml</a>(obj,filename)</tt>	Write :class ~obspy core inventory inventory inventory or.
<tt style='background-color:#E8E8E8;'> io.kml. <a href=' /io/kml/core.py#L304'>_rgba_tuple_to_kml_color_code</a>(rgba)</tt>	Convert tuple of red green blue alpha float values 0 0-1 0 to kml.
<tt style='background-color:#E8E8E8;'> io.kml. <a href=' /io/kml/core.py#L317'>_get_event_timestamp</a>(event)</tt>	Get timestamp information for the event search is perfomed in the.
<tt style='background-color:#E8E8E8;'> io.cnv. <a href=' /io/cnv/core.py#L19'>_write_cnv</a>(catalog,filename,phase_mapping,ifx_list)</tt>	Write a :class ~obspy core event catalog object to cnv event summary.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/util.py#L15'>unpack_header_value</a>(endian,packed_value,length,special_format)</tt>	Unpacks a single value.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/core.py#L55'>_is_segy</a>(filename)</tt>	Checks whether or not the given file is a seg y file.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/segy.py#L842'>_read_segy</a>(filename,headonly,byteorder,textual_header_encoding)</tt>	Reads a seg y file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/core.py#L203'>_write_segy</a>(stream,filename,data_encoding,byteorder)</tt>	Writes a seg y file from given obspy stream object.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/core.py#L389'>_is_su</a>(filename)</tt>	Checks whether or not the given file is a seismic unix su file.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/segy.py#L1211'>_read_su</a>(filename,headonly,byteorder,unpack_trace_headers)</tt>	Reads a seismic unix su file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/core.py#L517'>_write_su</a>(stream,filename,byteorder)</tt>	Writes a seismic unix su file from given obspy stream object.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/core.py#L612'>_segy_trace_str_</a>()</tt>	Monkey patch for the __str__ method of the trace object segy object do not.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/pack.py#L36'>pack_4byte_ibm</a>(file,data,endian)</tt>	Packs 4 byte ibm floating points this will only work if the host system.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/pack.py#L124'>pack_4byte_integer</a>(file,data,endian)</tt>	Packs 4 byte integers.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/pack.py#L138'>pack_2byte_integer</a>(file,data,endian)</tt>	Packs 2 byte integers.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/pack.py#L156'>pack_4byte_ieee</a>(file,data,endian)</tt>	Packs 4 byte ieee floating points.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/unpack.py#L44'>unpack_4byte_ibm</a>(file,count,endian)</tt>	Unpacks 4 byte ibm floating points.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/unpack.py#L90'>unpack_4byte_integer</a>(file,count,endian)</tt>	Unpacks 4 byte integers.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/unpack.py#L102'>unpack_2byte_integer</a>(file,count,endian)</tt>	Unpacks 2 byte integers.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/unpack.py#L118'>unpack_4byte_ieee</a>(file,count,endian)</tt>	Unpacks 4 byte ieee floating points.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYFile <a href=' /io/segy/segy.py#L76'>__init__</a>(file,endian,textual_header_encoding,unpack_headers)</tt>	Class that internally handles seg y files.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYFile <a href=' /io/segy/segy.py#L132'>__str__</a>()</tt>	Prints some information about the seg y file.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYFile <a href=' /io/segy/segy.py#L141'>_autodetect_endianness</a>()</tt>	Tries to automatically determine the endianness of the file at hand.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYFile <a href=' /io/segy/segy.py#L165'>_create_empty_segy_file_object</a>()</tt>	Creates an empty segyfile object.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYFile <a href=' /io/segy/segy.py#L173'>_read_textual_header</a>()</tt>	Reads the textual header.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYFile <a href=' /io/segy/segy.py#L209'>_read_headers</a>()</tt>	Reads the textual and binary file headers starting at the current file pointer position.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYFile <a href=' /io/segy/segy.py#L241'>_write</a>(file,data_encoding,endian)</tt>	Writes seg y to a file like object.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYFile <a href=' /io/segy/segy.py#L282'>_write_textual_header</a>(file)</tt>	Write the textual header in various encodings the encoding will depend.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYFile <a href=' /io/segy/segy.py#L312'>_read_traces</a>(unpack_headers,headonly,yield_each_trace)</tt>	Reads the actual traces starting at the current file pointer position to the end of the file.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYBinaryFileHeader <a href=' /io/segy/segy.py#L374'>_read_binary_file_header</a>(header)</tt>	Reads the binary file header and stores every value in a class attribute.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYBinaryFileHeader <a href=' /io/segy/segy.py#L406'>__str__</a>()</tt>	Convenience method to print the binary file header.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYBinaryFileHeader <a href=' /io/segy/segy.py#L419'>write</a>(file,endian)</tt>	Writes the header to an open file like object.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYBinaryFileHeader <a href=' /io/segy/segy.py#L452'>_create_empty_binary_file_header</a>()</tt>	Just fills all necessary class attributes with zero.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYTrace <a href=' /io/segy/segy.py#L464'>__init__</a>(file,data_encoding,endian,unpack_headers)</tt>	Convenience class that internally handles a single seg y trace.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYTrace <a href=' /io/segy/segy.py#L527'>_read_trace</a>(unpack_headers,headonly)</tt>	Reads the complete next header starting at the file pointer at self.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYTrace <a href=' /io/segy/segy.py#L578'>write</a>(file,data_encoding,endian)</tt>	Writes the trace to a file like object.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYTrace <a href=' /io/segy/segy.py#L601'>_create_empty_trace</a>()</tt>	Creates an empty trace with an empty header.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYTrace <a href=' /io/segy/segy.py#L608'>__str__</a>()</tt>	Print some information about the trace.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYTrace <a href=' /io/segy/segy.py#L624'>__getattr__</a>(name)</tt>	This method is only called if the attribute is not found in the usual places (i.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYTrace <a href=' /io/segy/segy.py#L645'>to_obspy_trace</a>(unpack_trace_headers,headonly)</tt>	Convert the current trace to an obspy trace object.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYTraceHeader <a href=' /io/segy/segy.py#L711'>__init__</a>(header,endian,unpack_headers)</tt>	Will take the 240 byte of the trace header and unpack all values with the given endianness.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYTraceHeader <a href=' /io/segy/segy.py#L745'>_read_trace_header</a>(header)</tt>	Reads the 240 byte long header and unpacks all values into corresponding class attributes.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYTraceHeader <a href=' /io/segy/segy.py#L761'>write</a>(file,endian)</tt>	Writes the header to an open file like object.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYTraceHeader <a href=' /io/segy/segy.py#L796'>__getattr__</a>(name)</tt>	This method is only called if the attribute is not found in the usual places (i.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYTraceHeader <a href=' /io/segy/segy.py#L818'>__str__</a>()</tt>	Just returns all header values.
<tt style='background-color:#E8E8E8;'> io.segy.SEGYTraceHeader <a href=' /io/segy/segy.py#L833'>_create_empty_trace_header</a>()</tt>	Init the trace header with zeros.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/segy.py#L842'>_read_segy</a>(file,endian,textual_header_encoding,unpack_headers)</tt>	Reads a seg y file and returns a segyfile object.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/segy.py#L882'>_internal_read_segy</a>(file,endian,textual_header_encoding,unpack_headers)</tt>	Reads on open file object and returns a segyfile object.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/segy.py#L911'>iread_segy</a>(file,endian,textual_header_encoding,unpack_headers)</tt>	Iteratively read a seg-y field and yield single obspy traces.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/segy.py#L974'>_internal_iread_segy</a>(file,endian,textual_header_encoding,unpack_headers)</tt>	Iteratively read a seg-y field and yield single obspy traces.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/segy.py#L998'>iread_su</a>(file,endian,unpack_headers,headonly)</tt>	Iteratively read a su field and yield single obspy traces.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/segy.py#L1052'>_internal_iread_su</a>(file,endian,unpack_headers,headonly)</tt>	Iteratively read a su field and yield single obspy traces.
<tt style='background-color:#E8E8E8;'> io.segy.SUFile <a href=' /io/segy/segy.py#L1079'>__init__</a>(file,endian,unpack_headers,headonly)</tt>	:param file a file like object with the file pointer set at the beginning of the seg y file.
<tt style='background-color:#E8E8E8;'> io.segy.SUFile <a href=' /io/segy/segy.py#L1123'>_autodetect_endianness</a>()</tt>	Tries to automatically determine the endianness of the file at hand.
<tt style='background-color:#E8E8E8;'> io.segy.SUFile <a href=' /io/segy/segy.py#L1133'>_create_empty_su_file_object</a>()</tt>	Creates an empty sufile object.
<tt style='background-color:#E8E8E8;'> io.segy.SUFile <a href=' /io/segy/segy.py#L1139'>__str__</a>()</tt>	Prints some information about the su file.
<tt style='background-color:#E8E8E8;'> io.segy.SUFile <a href=' /io/segy/segy.py#L1148'>_read_traces</a>(unpack_headers,headonly,yield_each_trace)</tt>	Reads the actual traces starting at the current file pointer position to the end of the file.
<tt style='background-color:#E8E8E8;'> io.segy.SUFile <a href=' /io/segy/segy.py#L1199'>_write</a>(file,endian)</tt>	Write a su y file to file which is either a file like object with a write method or a filename string.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/segy.py#L1211'>_read_su</a>(file,endian,unpack_headers,headonly)</tt>	Reads a seismic unix su file and returns a sufile object.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/segy.py#L1244'>_internal_read_su</a>(file,endian,unpack_headers,headonly)</tt>	Reads on open file object and returns a sufile object.
<tt style='background-color:#E8E8E8;'> io.segy. <a href=' /io/segy/segy.py#L1268'>autodetect_endian_and_sanity_check_su</a>(file)</tt>	Takes an open file and tries to determine the endianness of a seismic unix data file by doing some sanity checks with the unpacked header values.
<tt style='background-color:#E8E8E8;'> io.json. <a href=' /io/json/core.py#L11'>get_dump_kwargs</a>(minify,no_nulls)</tt>	Return dict of kwargs for :py func json dump or.
<tt style='background-color:#E8E8E8;'> io.json. <a href=' /io/json/core.py#L26'>_write_json</a>(obj,filename,omit_nulls,pretty_print)</tt>	Write object to a file in json format :type obj :mod ~obspy.
<tt style='background-color:#E8E8E8;'> io.json.Default <a href=' /io/json/default.py#L43'>__init__</a>(omit_nulls,time_format)</tt>	Create a "default" function for jsonencoder for obspy objects.
<tt style='background-color:#E8E8E8;'> io.json.Default <a href=' /io/json/default.py#L55'>__call__</a>(obj)</tt>	Deal with :class ~obspy core event event objects in json encoder.
<tt style='background-color:#E8E8E8;'> io.y. <a href=' /io/y/core.py#L33'>_unpack_with_asciiz_and_decode</a>(fmt,data)</tt>	Unpack binary data and decode ascii bytestrings stripping asciiz bytestrings correctly as specified by y format definition.
<tt style='background-color:#E8E8E8;'> io.y. <a href=' /io/y/core.py#L75'>_parse_tag</a>(fh)</tt>	Reads and parses a single tag.
<tt style='background-color:#E8E8E8;'> io.y. <a href=' /io/y/core.py#L108'>_is_y</a>(filename)</tt>	Checks whether a file is a nanometrics y file or not.
<tt style='background-color:#E8E8E8;'> io.y. <a href=' /io/y/core.py#L134'>_read_y</a>(filename,headonly)</tt>	Reads a nanometrics y file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L46'>_is_inventory_xml</a>(path_or_file_object)</tt>	Simple function checking if the passed object contains a valid arclink xml 1.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L93'>validate_arclink_xml</a>(path_or_object)</tt>	Checks if the given path is a valid arclink_xml file.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L127'>_ns</a>(tagname)</tt>	Hoisted namespace function used to find elements.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L136'>_read_inventory_xml</a>(path_or_file_object)</tt>	Function for reading an arclink inventory file.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L162'>_attr2obj</a>(element,attribute,convert)</tt>	Reads text from attribute in element.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L180'>_tag2obj</a>(element,tag,convert)</tt>	Reads text from tag in element.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L196'>_read_network</a>(inventory_root,net_element)</tt>	Reads the network structure.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L227'>_get_restricted_status</a>(element)</tt>	Get the restricted_status boolean.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L242'>_read_station</a>(inventory_root,sta_element)</tt>	Reads the station structure.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L283'>_read_site</a>(sta_element)</tt>	Reads site information from the station element tags.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L311'>_read_datalogger</a>(equip_element)</tt>	Reads equipment information from datalogger.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L331'>_read_sensor</a>(equip_element)</tt>	Reads equipment information from element.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L353'>_read_channel</a>(inventory_root,cha_element)</tt>	Reads channel element from arclinkxml format.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L472'>_read_instrument_sensitivity</a>(sen_element,cha_element)</tt>	Reads the instrument sensitivity gain from the sensor and channel element.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L501'>_read_response</a>(root,sen_element,resp_element,cha_element)</tt>	Reads response from arclinkxml format.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L622'>_read_response_stage</a>(stage,rate,stage_number,input_units)</tt>	Private function to read a response stage.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L844'>_tag2pole_or_zero</a>(paz_element,count)</tt>	Parses arclinkxml paz format.
<tt style='background-color:#E8E8E8;'> io.arclink. <a href=' /io/arclink/inventory.py#L872'>_read_float_var</a>(elem,cls,unit,datum)</tt>	Function to read floattype to cls object (based on _read_floattype) normally obspy would read this directly from a tag but with different.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/util.py#L104'>enum_string_to_int</a>(header)</tt>	Convert enumerated string values in header dictionary to int values.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/util.py#L110'>enum_int_to_string</a>(header)</tt>	Convert enumerated int values in header dictionary to string values.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/util.py#L116'>byteswap</a>()</tt>	Swapping of bytes for provided arrays.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/util.py#L134'>is_same_byteorder</a>(bo1,bo2)</tt>	Deal with all the ways to compare byte order string representations.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/util.py#L165'>_clean_str</a>(value,strip_whitespace)</tt>	Remove null values and whitespace return a str this fn is used in two places in sactrace.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/util.py#L189'>sac_to_obspy_header</a>(sacheader)</tt>	Make an obspy stats header dictionary from a sac header dictionary.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/util.py#L284'>obspy_to_sac_header</a>(stats,keep_sac_header)</tt>	Merge a primary with a secondary header reconciling some differences.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/util.py#L408'>get_sac_reftime</a>(header)</tt>	Get sac header reference time as a utcdatetime instance from a sac header dictionary.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/core.py#L25'>_is_sac</a>(filename)</tt>	Checks whether a file is a sac file or not.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/core.py#L51'>_internal_is_sac</a>(buf)</tt>	Checks whether a file-like object contains a sac file or not.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/core.py#L118'>_is_sac_xy</a>(filename)</tt>	Checks whether a file is alphanumeric sac file or not.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/core.py#L144'>_internal_is_sac_xy</a>(buf)</tt>	Checks whether a file is alphanumeric sac file or not.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/core.py#L173'>_read_sac_xy</a>(filename,headonly,debug_headers)</tt>	Reads an alphanumeric sac file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/core.py#L211'>_internal_read_sac_xy</a>(buf,headonly,debug_headers)</tt>	Reads an alphanumeric sac file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/core.py#L247'>_write_sac_xy</a>(stream,filename)</tt>	Writes a alphanumeric sac file.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/core.py#L292'>_internal_write_sac_xy</a>(trace,buf)</tt>	Writes a single trace to alphanumeric sac file.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/core.py#L310'>_read_sac</a>(filename,headonly,debug_headers,fsize)</tt>	Reads an sac file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/core.py#L356'>_internal_read_sac</a>(buf,headonly,debug_headers,fsize)</tt>	Reads an sac file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/core.py#L391'>_write_sac</a>(stream,filename,byteorder)</tt>	Writes a sac file.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/core.py#L441'>_internal_write_sac</a>(trace,buf,byteorder)</tt>	Writes a single trace to an open file or file-like object.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/sacpz.py#L22'>_write_sacpz</a>(inventory,file_or_file_object)</tt>	Writes an inventory object to a sacpz file.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/sacpz.py#L102'>attach_paz</a>(tr,paz_file,todisp,tovel)</tt>	Attach tr stats paz attribdict to trace from sac paz_file.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/sacpz.py#L275'>attach_resp</a>(tr,resp_file,todisp,tovel)</tt>	Extract key instrument response information from a resp file which can be extracted from a dataless seed volume by for example using.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/sactrace.py#L592'>_set_iztype</a>(iztype)</tt>	Set the iztype which describes what the reftime is.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L723'>__init__</a>(leven,delta,b,e)</tt>	Initialize a sactrace object using header key-value pairs and a numpy.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L986'>_header</a>()</tt>	Convenient read-only dictionary of non-null header array values.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1000'>byteorder</a>()</tt>	The byte order of the underlying header/data arrays.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1032'>_byteswap</a>()</tt>	Change the underlying byte order and dtype interpretation of the float int and if present data arrays.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1071'>reftime</a>()</tt>	Get or set the sac header reference time as a utcdatetime instance.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1101'>read</a>(cls,source,headonly,ascii)</tt>	Construct an instance from a binary or ascii file on disk.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1172'>write</a>(dest,headonly,ascii,byteorder)</tt>	Write the header and optionally data arrays to a sac binary file.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1209'>_from_arrays</a>(cls,hf,hi,hs)</tt>	Low-level array-based constructor.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1275'>from_obspy_trace</a>(cls,trace,keep_sac_header)</tt>	Construct an instance from an obspy trace.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1315'>to_obspy_trace</a>(debug_headers)</tt>	Return an obspy trace instance.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1365'>validate</a>()</tt>	Check validity of loaded sac file content such as header/data consistency.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1412'>_format_header_str</a>(hdrlist)</tt>	Produce a print-friendly string of header values for __repr__.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1472'>listhdr</a>(hdrlist)</tt>	Print header values.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1527'>lh</a>()</tt>	Alias of listhdr method.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1545'>_flush_headers</a>()</tt>	Flush to the header arrays any header property values that may not be reflected there such as data min/max/mean npts e.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1559'>_allt</a>(shift)</tt>	Shift all relative time headers by some value addition.
<tt style='background-color:#E8E8E8;'> io.sac.SACTrace <a href=' /io/sac/sactrace.py#L1597'>_set_distances</a>(force)</tt>	Calculate dist az baz gcarc if force=true ignore lcalda.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/arrayio.py#L35'>init_header_arrays</a>(arrays,byteorder)</tt>	Initialize arbitrary header arrays.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/arrayio.py#L81'>read_sac</a>(source,headonly,byteorder,checksize)</tt>	Read a sac binary file.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/arrayio.py#L194'>read_sac_ascii</a>(source,headonly)</tt>	Read a sac ascii/alphanumeric file.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/arrayio.py#L266'>write_sac</a>(dest,hf,hi,hs)</tt>	Write the header and optionally data arrays to a sac binary file.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/arrayio.py#L355'>write_sac_ascii</a>(dest,hf,hi,hs)</tt>	Write the header and optionally data arrays to a sac ascii file.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/arrayio.py#L428'>header_arrays_to_dict</a>(hf,hi,hs,nulls)</tt>	Convert sac header arrays to a more user-friendly dict.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/arrayio.py#L474'>dict_to_header_arrays</a>(header,byteorder)</tt>	Returns null hf hi hs arrays optionally filled with values from a dictionary.
<tt style='background-color:#E8E8E8;'> io.sac. <a href=' /io/sac/arrayio.py#L524'>validate_sac_content</a>(hf,hi,hs,data)</tt>	Check validity of loaded sac file content such as header/data consistency.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L29'>get_start_and_end_time</a>(file_or_file_object)</tt>	Returns the start and end time of a miniseed file or file-like object.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L98'>get_flags</a>(files,starttime,endtime,io_flags)</tt>	Counts all data quality i/o and activity flags of the given miniseed file and returns statistics about the timing quality if applicable.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L506'>get_record_information</a>(file_or_file_object,offset,endian)</tt>	Returns record information about given files and file-like object.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L549'>_get_record_information</a>(file_object,offset,endian)</tt>	Searches the first miniseed record stored in file_object at the current position and returns some information about it.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L779'>_ctypes_array_2_numpy_array</a>(buffer_,buffer_elements,sampletype)</tt>	Takes a ctypes array and its length and type and returns it as a numpy array.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L797'>_convert_msr_to_dict</a>(m)</tt>	Internal method used for setting header attributes.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L811'>_convert_datetime_to_mstime</a>(dt)</tt>	Takes a obspy util utcdatetime object and returns an epoch time in ms.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L821'>_convert_mstime_to_datetime</a>(timestring)</tt>	Takes a miniseed timestamp and returns a obspy util utcdatetime object.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L830'>_unpack_steim_1</a>(data,npts,swapflag,verbose)</tt>	Unpack steim1 compressed data given as numpy array.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L853'>_unpack_steim_2</a>(data,npts,swapflag,verbose)</tt>	Unpack steim2 compressed data given as numpy array.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L876'>set_flags_in_fixed_headers</a>(filename,flags)</tt>	Updates a given miniseed file with some fixed header flags.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L1169'>_check_flag_value</a>(flag_value)</tt>	Search for a given flag in a given blockette for the current record.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L1344'>_search_flag_in_blockette</a>(mseed_file_desc,first_blockette_offset,blockette_number,field_offset)</tt>	Search for a given flag in a given blockette for the current record.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L1414'>_convert_flags_to_raw_byte</a>(expected_flags,user_flags,recstart,recend)</tt>	Converts a flag dictionary to a byte ready to be encoded in a miniseed header.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L1469'>shift_time_of_file</a>(input_file,output_file,timeshift)</tt>	Takes a miniseed file and shifts the time of every record by the given amount.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/util.py#L1629'>_convert_and_check_encoding_for_writing</a>(encoding)</tt>	Helper function to handle and test encodings.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/core.py#L28'>_is_mseed</a>(filename)</tt>	Checks whether a file is mini-seed/full seed or not.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/core.py#L69'>__is_mseed</a>(fp,file_size)</tt>	Internal version of _is_mseed working only with open file-like object.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/core.py#L145'>_read_mseed</a>(mseed_object,starttime,endtime,headonly)</tt>	Reads a mini-seed file and returns a stream object.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/core.py#L496'>_write_mseed</a>(stream,filename,encoding,reclen)</tt>	Write mini-seed file from a stream object.
<tt style='background-color:#E8E8E8;'> io.mseed.MST <a href=' /io/mseed/core.py#L944'>__init__</a>(trace,data,dataquality)</tt>	The init function requires a obspy trace object which will be used to fill self.
<tt style='background-color:#E8E8E8;'> io.mseed.MST <a href=' /io/mseed/core.py#L985'>__del__</a>()</tt>	Frees all allocated memory.
<tt style='background-color:#E8E8E8;'> io.mseed. <a href=' /io/mseed/msstruct.py#L18'>_get_ms_file_info</a>(f,real_name)</tt>	Takes a mini-seed filename as an argument and returns a dictionary with some basic information about the file.
<tt style='background-color:#E8E8E8;'> io.mseed._MSStruct <a href=' /io/mseed/msstruct.py#L90'>file_info</a>()</tt>	For details see util _get_ms_file_info.
<tt style='background-color:#E8E8E8;'> io.mseed._MSStruct <a href=' /io/mseed/msstruct.py#L99'>file_pos_from_rec_num</a>(record_number)</tt>	Return byte position of file given a certain record_number.
<tt style='background-color:#E8E8E8;'> io.mseed._MSStruct <a href=' /io/mseed/msstruct.py#L115'>read</a>(reclen,dataflag,skipnotdata,verbose)</tt>	Read msrecord using the ms_readmsr_r function the following.
<tt style='background-color:#E8E8E8;'> io.mseed._MSStruct <a href=' /io/mseed/msstruct.py#L148'>__del__</a>()</tt>	Method for deallocating msfileparam and msrecord structure.
<tt style='background-color:#E8E8E8;'> io.mseed.scripts.RecordAnalyser <a href=' /io/mseed/scripts/recordanalyzer.py#L47'>__init__</a>(file_object)</tt>	File_object can either be a filename or any file like object that has read seek and tell methods.
<tt style='background-color:#E8E8E8;'> io.mseed.scripts.RecordAnalyser <a href=' /io/mseed/scripts/recordanalyzer.py#L68'>__eq__</a>(other)</tt>	Compares two records.
<tt style='background-color:#E8E8E8;'> io.mseed.scripts.RecordAnalyser <a href=' /io/mseed/scripts/recordanalyzer.py#L78'>__ne__</a>(other)</tt>	Always needed of __eq__ is defined.
<tt style='background-color:#E8E8E8;'> io.mseed.scripts.RecordAnalyser <a href=' /io/mseed/scripts/recordanalyzer.py#L86'>__next__</a>()</tt>	Jumps to the next record and parses the header.
<tt style='background-color:#E8E8E8;'> io.mseed.scripts.RecordAnalyser <a href=' /io/mseed/scripts/recordanalyzer.py#L98'>goto</a>(record_number)</tt>	Jumps to the specified record and parses its header.
<tt style='background-color:#E8E8E8;'> io.mseed.scripts.RecordAnalyser <a href=' /io/mseed/scripts/recordanalyzer.py#L116'>_parse_header</a>()</tt>	Makes all necessary calls to parse the header.
<tt style='background-color:#E8E8E8;'> io.mseed.scripts.RecordAnalyser <a href=' /io/mseed/scripts/recordanalyzer.py#L129'>_get_endianess</a>()</tt>	Tries to figure out whether or not the file has little or big endian encoding and sets self.
<tt style='background-color:#E8E8E8;'> io.mseed.scripts.RecordAnalyser <a href=' /io/mseed/scripts/recordanalyzer.py#L157'>_read_fixed_header</a>()</tt>	Reads the fixed header of the mini-seed file and writes all entries to self.
<tt style='background-color:#E8E8E8;'> io.mseed.scripts.RecordAnalyser <a href=' /io/mseed/scripts/recordanalyzer.py#L209'>_get_blockettes</a>()</tt>	Loop over header and try to extract all header values!.
<tt style='background-color:#E8E8E8;'> io.mseed.scripts.RecordAnalyser <a href=' /io/mseed/scripts/recordanalyzer.py#L242'>_parse_blockette</a>(blkt_type)</tt>	Parses the blockette blkt_type if nothing is known about the blockette.
<tt style='background-color:#E8E8E8;'> io.mseed.scripts.RecordAnalyser <a href=' /io/mseed/scripts/recordanalyzer.py#L288'>_calculate_start_time</a>()</tt>	Calculates the true record starttime see the seed manual for all.
<tt style='background-color:#E8E8E8;'> io.mseed.scripts.RecordAnalyser <a href=' /io/mseed/scripts/recordanalyzer.py#L317'>__str__</a>()</tt>	Set the string representation of the class.
<tt style='background-color:#E8E8E8;'> io.mseed.scripts. <a href=' /io/mseed/scripts/recordanalyzer.py#L362'>main</a>(argv)</tt>	Entry point for setup py.
<tt style='background-color:#E8E8E8;'> io.seisan. <a href=' /io/seisan/core.py#L24'>_is_seisan</a>(filename)</tt>	Checks whether a file is seisan or not.
<tt style='background-color:#E8E8E8;'> io.seisan. <a href=' /io/seisan/core.py#L49'>_get_version</a>(data)</tt>	Extracts seisan version from given data chunk.
<tt style='background-color:#E8E8E8;'> io.seisan. <a href=' /io/seisan/core.py#L117'>_read_seisan</a>(filename,headonly)</tt>	Reads a seisan file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.kinemetrics. <a href=' /io/kinemetrics/core.py#L19'>is_evt</a>(filename_or_object)</tt>	Checks whether a file is evt or not.
<tt style='background-color:#E8E8E8;'> io.kinemetrics. <a href=' /io/kinemetrics/core.py#L59'>read_evt</a>(filename_or_object)</tt>	Reads a evt file and returns a stream object.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtVirtual <a href=' /io/kinemetrics/evt_base.py#L61'>__getattr__</a>(item)</tt>	__getattr__ is called only if no class attribute is found.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtVirtual <a href=' /io/kinemetrics/evt_base.py#L73'>unset_dict</a>()</tt>	Remove all values from dictionary.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtVirtual <a href=' /io/kinemetrics/evt_base.py#L83'>set_dict</a>(val,offset)</tt>	Fill the dictionary with values found in the input 'val' list.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtVirtual <a href=' /io/kinemetrics/evt_base.py#L111'>__str__</a>()</tt>	Create a string with all dictionary values.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtVirtual <a href=' /io/kinemetrics/evt_base.py#L122'>_time</a>(blocktime,param,val,offset)</tt>	Change a evt time format to :class ~obspy.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtVirtual <a href=' /io/kinemetrics/evt_base.py#L141'>_strnull</a>(strn,unused_param,unused_val,unused_offset)</tt>	Change a c string null terminated to python string.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtVirtual <a href=' /io/kinemetrics/evt_base.py#L155'>_array</a>(unused_firstval,param,val,offset)</tt>	Extract a list of 'size_array' values from val.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtVirtual <a href=' /io/kinemetrics/evt_base.py#L176'>_arraynull</a>(unused_firstval,param,val,offset)</tt>	Extract a list of 'size_array' values from val.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtVirtual <a href=' /io/kinemetrics/evt_base.py#L198'>_instrument</a>(code,unused_param,unused_val,unused_offset)</tt>	Change instrument type code to name.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.Evt <a href=' /io/kinemetrics/evt.py#L60'>calibration</a>()</tt>	Apply calibrations on data matrix note about calibration.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.Evt <a href=' /io/kinemetrics/evt.py#L81'>read_file</a>(filename_or_object,raw)</tt>	Reads an evt file to the internal data structure.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtData <a href=' /io/kinemetrics/evt.py#L153'>read</a>(file_p,length,endian,param)</tt>	Read data from file_p.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtHeader <a href=' /io/kinemetrics/evt.py#L230'>read</a>(file_p,length,endian)</tt>	Read the header of evt file.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtHeader <a href=' /io/kinemetrics/evt.py#L257'>make_obspy_dict</a>(numchan)</tt>	Make an obspy dictionary from header dictionary for 1 channel.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtHeader <a href=' /io/kinemetrics/evt.py#L273'>_gpsstatus</a>(value,unused_a,unused_b,unused_c)</tt>	Transform bitarray for gpsstatus in human readable string.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtFrameHeader <a href=' /io/kinemetrics/evt.py#L311'>count</a>()</tt>	Return the number of frames read.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtFrameHeader <a href=' /io/kinemetrics/evt.py#L317'>read</a>(file_p,length,endian)</tt>	Read a frame.
<tt style='background-color:#E8E8E8;'> io.kinemetrics.EvtTag <a href=' /io/kinemetrics/evt.py#L380'>read</a>(file_p)</tt>	:type file_p str.
<tt style='background-color:#E8E8E8;'> io.stationxml. <a href=' /io/stationxml/core.py#L47'>_is_stationxml</a>(path_or_file_object)</tt>	Simple function checking if the passed object contains a valid stationxml 1.
<tt style='background-color:#E8E8E8;'> io.stationxml. <a href=' /io/stationxml/core.py#L94'>validate_stationxml</a>(path_or_object)</tt>	Checks if the given path is a valid stationxml file.
<tt style='background-color:#E8E8E8;'> io.stationxml. <a href=' /io/stationxml/core.py#L128'>_read_stationxml</a>(path_or_file_object)</tt>	Function reading a stationxml file.
<tt style='background-color:#E8E8E8;'> io.stationxml. <a href=' /io/stationxml/core.py#L163'>_read_base_node</a>(element,object_to_write_to,_ns)</tt>	Reads the base node structure from element and saves it in object_to_write_to.
<tt style='background-color:#E8E8E8;'> io.stationxml. <a href=' /io/stationxml/core.py#L384'>_read_response_stage</a>(stage_elem,_ns)</tt>	This parses all responsestagetypes it will return a different object.
<tt style='background-color:#E8E8E8;'> io.stationxml. <a href=' /io/stationxml/core.py#L757'>_write_stationxml</a>(inventory,file_or_file_object,validate,nsmap)</tt>	Writes an inventory object to a buffer.
<tt style='background-color:#E8E8E8;'> io.stationxml. <a href=' /io/stationxml/core.py#L885'>_write_network</a>(parent,network)</tt>	Helper function converting a network instance to an etree element.
<tt style='background-color:#E8E8E8;'> io.stationxml. <a href=' /io/stationxml/core.py#L936'>_float_to_str</a>(x)</tt>	Converts a float to str making for most numbers this results in a.
<tt style='background-color:#E8E8E8;'> io.stationxml. <a href=' /io/stationxml/core.py#L1355'>_write_element</a>(parent,element,name)</tt>	Recursively write custom namespace elements.
<tt style='background-color:#E8E8E8;'> io.stationxml. <a href=' /io/stationxml/core.py#L1374'>_write_extra</a>(parent,obj)</tt>	Write information stored in custom tags/attributes in obj extra.
<tt style='background-color:#E8E8E8;'> io.stationxml. <a href=' /io/stationxml/core.py#L1408'>_obj2tag</a>(parent,tag_name,tag_value)</tt>	If tag_value is not none append a subelement to the parent the text of.
<tt style='background-color:#E8E8E8;'> io.stationxml. <a href=' /io/stationxml/core.py#L1429'>_read_element</a>(prefix,ns,element,extra)</tt>	Recursively read custom namespace elements and add them to extra.
<tt style='background-color:#E8E8E8;'> io.stationxml. <a href=' /io/stationxml/core.py#L1449'>_read_extra</a>(element,obj)</tt>	Add information stored in custom tags/attributes in obj extra.
<tt style='background-color:#E8E8E8;'> io.quakeml. <a href=' /io/quakeml/core.py#L53'>_get_first_child_namespace</a>(element)</tt>	Helper function extracting the namespace of an element.
<tt style='background-color:#E8E8E8;'> io.quakeml. <a href=' /io/quakeml/core.py#L64'>_xml_doc_from_anything</a>(source)</tt>	Helper function attempting to create an xml etree element from either a filename a file-like object or a byte string.
<tt style='background-color:#E8E8E8;'> io.quakeml. <a href=' /io/quakeml/core.py#L85'>_is_quakeml</a>(filename)</tt>	Checks whether a file is quakeml format.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L140'>load</a>(file)</tt>	Reads quakeml file into obspy catalog object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L152'>loads</a>(string)</tt>	Parses quakeml string into obspy catalog object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L411'>_arrival</a>(element)</tt>	Converts an etree element into an arrival object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L445'>_pick</a>(element)</tt>	Converts an etree element into a pick object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L475'>_time_window</a>(element)</tt>	Converts an etree element into a timewindow object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L491'>_amplitude</a>(element)</tt>	Converts an etree element into a amplitude object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L526'>_origin</a>(element,arrivals)</tt>	Converts an etree element into an origin object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L575'>_magnitude</a>(element)</tt>	Converts an etree element into a magnitude object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L614'>_station_magnitude</a>(element)</tt>	Converts an etree element into a stationmagnitude object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L649'>_axis</a>(parent,name)</tt>	Converts an etree element into an axis object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L670'>_principal_axes</a>(parent)</tt>	Converts an etree element into an principalaxes object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L690'>_nodal_plane</a>(parent,name)</tt>	Converts an etree element into an nodalplane object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L711'>_nodal_planes</a>(parent)</tt>	Converts an etree element into an nodalplanes object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L734'>_source_time_function</a>(parent)</tt>	Converts an etree element into an sourcetimefunction object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L755'>_tensor</a>(parent)</tt>	Converts an etree element into an tensor object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L777'>_data_used</a>(parent)</tt>	Converts an etree element into a list of dataused objects.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L803'>_moment_tensor</a>(parent)</tt>	Converts an etree element into an momenttensor object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L841'>_focal_mechanism</a>(element)</tt>	Converts an etree element into a focalmechanism object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Unpickler <a href=' /io/quakeml/core.py#L985'>_extra</a>(element,obj)</tt>	Add information stored in custom tags/attributes in obj extra.
<tt style='background-color:#E8E8E8;'> io.quakeml.Pickler <a href=' /io/quakeml/core.py#L1057'>dump</a>(catalog,file)</tt>	Writes obspy catalog into given file.
<tt style='background-color:#E8E8E8;'> io.quakeml.Pickler <a href=' /io/quakeml/core.py#L1070'>dumps</a>(catalog)</tt>	Returns quakeml string of given obspy catalog object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Pickler <a href=' /io/quakeml/core.py#L1178'>_extra</a>(obj,element)</tt>	Add information stored in obj extra as custom tags/attributes in.
<tt style='background-color:#E8E8E8;'> io.quakeml.Pickler <a href=' /io/quakeml/core.py#L1229'>_arrival</a>(arrival)</tt>	Converts an arrival into etree element object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Pickler <a href=' /io/quakeml/core.py#L1261'>_magnitude</a>(magnitude)</tt>	Converts an magnitude into etree element object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Pickler <a href=' /io/quakeml/core.py#L1300'>_station_magnitude</a>(magnitude)</tt>	Converts an stationmagnitude into etree element object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Pickler <a href=' /io/quakeml/core.py#L1336'>_origin</a>(origin)</tt>	Converts an origin into etree element object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Pickler <a href=' /io/quakeml/core.py#L1460'>_amplitude</a>(amp)</tt>	Converts an amplitude into etree element object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Pickler <a href=' /io/quakeml/core.py#L1494'>_pick</a>(pick)</tt>	Converts a pick into etree element object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Pickler <a href=' /io/quakeml/core.py#L1524'>_nodal_planes</a>(obj,element)</tt>	Converts a nodalplanes into etree element object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Pickler <a href=' /io/quakeml/core.py#L1560'>_principal_axes</a>(obj,element)</tt>	Converts a principalaxes into etree element object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Pickler <a href=' /io/quakeml/core.py#L1604'>_moment_tensor</a>(moment_tensor,element)</tt>	Converts a momenttensor into etree element object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Pickler <a href=' /io/quakeml/core.py#L1670'>_focal_mechanism</a>(focal_mechanism)</tt>	Converts a focalmechanism into etree element object.
<tt style='background-color:#E8E8E8;'> io.quakeml.Pickler <a href=' /io/quakeml/core.py#L1705'>_serialize</a>(catalog,pretty_print)</tt>	Converts a catalog object into xml string.
<tt style='background-color:#E8E8E8;'> io.quakeml. <a href=' /io/quakeml/core.py#L1775'>_read_quakeml</a>(filename)</tt>	Reads a quakeml file and returns an obspy catalog object.
<tt style='background-color:#E8E8E8;'> io.quakeml. <a href=' /io/quakeml/core.py#L1801'>_write_quakeml</a>(catalog,filename,validate,nsmap)</tt>	Writes a quakeml file.
<tt style='background-color:#E8E8E8;'> io.quakeml. <a href=' /io/quakeml/core.py#L1848'>_read_seishub_event_xml</a>(filename)</tt>	Reads a single seishub event xml file and returns an obspy catalog object.
<tt style='background-color:#E8E8E8;'> io.quakeml. <a href=' /io/quakeml/core.py#L1863'>_validate</a>(xml_file,verbose)</tt>	Validates a quakeml file against the quakeml 1 2 relaxng schema returns.
<tt style='background-color:#E8E8E8;'> io.sh. <a href=' /io/sh/core.py#L70'>_is_asc</a>(filename)</tt>	Checks whether a file is a seismic handler ascii file or not.
<tt style='background-color:#E8E8E8;'> io.sh. <a href=' /io/sh/core.py#L95'>_read_asc</a>(filename,headonly,skip,delta)</tt>	Reads a seismic handler ascii file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.sh. <a href=' /io/sh/core.py#L227'>_write_asc</a>(stream,filename,included_headers,npl)</tt>	Writes a seismic handler ascii file from given obspy stream object.
<tt style='background-color:#E8E8E8;'> io.sh. <a href=' /io/sh/core.py#L300'>_is_q</a>(filename)</tt>	Checks whether a file is a seismic handler q file or not.
<tt style='background-color:#E8E8E8;'> io.sh. <a href=' /io/sh/core.py#L325'>_read_q</a>(filename,headonly,data_directory,byteorder)</tt>	Reads a seismic handler q file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.sh. <a href=' /io/sh/core.py#L476'>_write_q</a>(stream,filename,data_directory,byteorder)</tt>	Writes a seismic handler q file from given obspy stream object.
<tt style='background-color:#E8E8E8;'> io.sh. <a href=' /io/sh/core.py#L584'>to_utcdatetime</a>(value)</tt>	Converts time string used within seismic handler into a utcdatetime.
<tt style='background-color:#E8E8E8;'> io.sh. <a href=' /io/sh/core.py#L636'>from_utcdatetime</a>(dt)</tt>	Converts utcdatetime object into a time string used within seismic handler.
<tt style='background-color:#E8E8E8;'> io.zmap.Pickler <a href=' /io/zmap/core.py#L40'>dump</a>(catalog,filename)</tt>	Writes obspy catalog into given file.
<tt style='background-color:#E8E8E8;'> io.zmap.Pickler <a href=' /io/zmap/core.py#L63'>dumps</a>(catalog)</tt>	Returns zmap string of given obspy catalog object.
<tt style='background-color:#E8E8E8;'> io.zmap.Pickler <a href=' /io/zmap/core.py#L74'>_hz_error</a>(origin)</tt>	Compute horizontal error of origin.
<tt style='background-color:#E8E8E8;'> io.zmap.Pickler <a href=' /io/zmap/core.py#L98'>_depth_error</a>(origin)</tt>	Return the absolute depth error in km.
<tt style='background-color:#E8E8E8;'> io.zmap.Pickler <a href=' /io/zmap/core.py#L109'>_num2str</a>(num,precision)</tt>	Convert num into a matlab and thus zmap compatible string.
<tt style='background-color:#E8E8E8;'> io.zmap.Pickler <a href=' /io/zmap/core.py#L119'>_decimal_year</a>(time)</tt>	Return floating point decimal year representation of utcdatetime.
<tt style='background-color:#E8E8E8;'> io.zmap.Unpickler <a href=' /io/zmap/core.py#L174'>load</a>(filename)</tt>	Returns an obspy catalog object from a zmap file.
<tt style='background-color:#E8E8E8;'> io.zmap.Unpickler <a href=' /io/zmap/core.py#L200'>loads</a>(zmap_str)</tt>	Returns an obspy catalog object from a zmap string.
<tt style='background-color:#E8E8E8;'> io.zmap.Unpickler <a href=' /io/zmap/core.py#L276'>_decyear2utc</a>(decimal_year)</tt>	Return utcdatetime from decimal year.
<tt style='background-color:#E8E8E8;'> io.zmap. <a href=' /io/zmap/core.py#L287'>_write_zmap</a>(catalog,filename,with_uncertainties)</tt>	Writes a zmap file.
<tt style='background-color:#E8E8E8;'> io.zmap. <a href=' /io/zmap/core.py#L312'>_read_zmap</a>(filename)</tt>	Reads a zmap file and returns an obspy catalog object.
<tt style='background-color:#E8E8E8;'> io.zmap. <a href=' /io/zmap/core.py#L337'>_is_zmap</a>(filename)</tt>	Checks whether a file is zmap format.
<tt style='background-color:#E8E8E8;'> io.ah. <a href=' /io/ah/core.py#L30'>_is_ah</a>(filename)</tt>	Checks whether a file is ah waveform data or not.
<tt style='background-color:#E8E8E8;'> io.ah. <a href=' /io/ah/core.py#L44'>_read_ah</a>(filename)</tt>	Reads an ah waveform file and returns a stream object.
<tt style='background-color:#E8E8E8;'> io.ah. <a href=' /io/ah/core.py#L64'>_get_ah_version</a>(filename)</tt>	Returns version of ah waveform data.
<tt style='background-color:#E8E8E8;'> io.ah. <a href=' /io/ah/core.py#L118'>_read_ah1</a>(filename)</tt>	Reads an ah v1 waveform file and returns a stream object.
<tt style='background-color:#E8E8E8;'> io.ah. <a href=' /io/ah/core.py#L231'>_read_ah2</a>(filename)</tt>	Reads an ah v2 waveform file and returns a stream object.
<tt style='background-color:#E8E8E8;'> io.shapefile. <a href=' /io/shapefile/core.py#L32'>_write_shapefile</a>(obj,filename)</tt>	Write :class ~obspy core inventory inventory inventory or.
<tt style='background-color:#E8E8E8;'> io.shapefile. <a href=' /io/shapefile/core.py#L74'>_add_catalog_layer</a>(data_source,catalog)</tt>	:type data_source :class osgeo ogr datasource.
<tt style='background-color:#E8E8E8;'> io.shapefile. <a href=' /io/shapefile/core.py#L173'>_add_inventory_layer</a>(data_source,inventory)</tt>	:type data_source :class osgeo ogr datasource.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L44'>_is_sc3ml</a>(path_or_file_object)</tt>	Simple function checking if the passed object contains a valid sc3ml 0 7.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L88'>validate_sc3ml</a>(path_or_object)</tt>	Checks if the given path is a valid sc3ml file.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L122'>_read_sc3ml</a>(path_or_file_object)</tt>	Function for reading a stationxml file.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L170'>_tag2obj</a>(element,tag,convert)</tt>	Reads text from tag in element.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L189'>_read_network</a>(inventory_root,net_element,_ns)</tt>	Reads the network structure.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L222'>_get_restricted_status</a>(element,_ns)</tt>	Get the restricted_status boolean.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L237'>_read_station</a>(inventory_root,sta_element,_ns)</tt>	Reads the station structure.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L286'>_read_site</a>(sta_element,_ns)</tt>	Reads site information from the station element tags.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L317'>_read_datalogger</a>(equip_element,_ns)</tt>	Reads equipment information from datalogger.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L339'>_read_sensor</a>(equip_element,_ns)</tt>	Reads equipment information from element.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L362'>_read_channel</a>(inventory_root,cha_element,_ns)</tt>	Reads channel element from sc3ml format.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L487'>_read_instrument_sensitivity</a>(sen_element,cha_element,_ns)</tt>	Reads the instrument sensitivity gain from the sensor and channel element.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L513'>_read_response</a>(root,sen_element,resp_element,cha_element)</tt>	Reads response from sc3ml format.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L855'>_tag2pole_or_zero</a>(paz_element,count)</tt>	Parses sc3ml paz format uncertainties on poles removed not present in sc3ml.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/sc3ml.py#L884'>_read_float_var</a>(elem,cls,unit,datum)</tt>	Function to read floattype to cls object (based on _read_floattype) normally obspy would read this directly from a tag but with different.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/event.py#L26'>_validate_sc3ml</a>(path_or_object,verbose)</tt>	Validates a sc3ml file against the sc3ml 0 9 schema returns either true or.
<tt style='background-color:#E8E8E8;'> io.seiscomp. <a href=' /io/seiscomp/event.py#L62'>_write_sc3ml</a>(catalog,filename,validate,verbose)</tt>	Write a sc3ml file since a xslt file is used to write the sc3ml file from.
<tt style='background-color:#E8E8E8;'> io.reftek. <a href=' /io/reftek/util.py#L60'>_timestrings_to_seconds</a>(timestrings)</tt>	Helper routine to convert timestrings of form "dddhhmmsssss" to array of floating point seconds.
<tt style='background-color:#E8E8E8;'> io.reftek. <a href=' /io/reftek/core.py#L32'>_is_reftek130</a>(filename)</tt>	Checks whether a file is reftek130 format or not.
<tt style='background-color:#E8E8E8;'> io.reftek. <a href=' /io/reftek/core.py#L65'>_read_reftek130</a>(filename,network,location,component_codes)</tt>	Read a reftek130 file into an obspy stream.
<tt style='background-color:#E8E8E8;'> io.reftek.Reftek130 <a href=' /io/reftek/core.py#L147'>check_packet_sequence_and_sort</a>()</tt>	Checks if packet sequence is ordered if not shows a warning and sorts.
<tt style='background-color:#E8E8E8;'> io.reftek.Reftek130 <a href=' /io/reftek/core.py#L160'>check_packet_sequence_contiguous</a>()</tt>	Checks if packet sequence is contiguous i e without missing packets.
<tt style='background-color:#E8E8E8;'> io.reftek.Reftek130 <a href=' /io/reftek/core.py#L171'>drop_not_implemented_packet_types</a>()</tt>	Checks if there are packets of a type that is currently not implemented and drop them showing a warning message.
<tt style='background-color:#E8E8E8;'> io.reftek.Reftek130 <a href=' /io/reftek/core.py#L195'>to_stream</a>(network,location,component_codes,headonly)</tt>	:type headonly bool.
<tt style='background-color:#E8E8E8;'> io.reftek.EHPacket <a href=' /io/reftek/packet.py#L149'>_to_dict</a>()</tt>	Convert to dictionary structure.
<tt style='background-color:#E8E8E8;'> io.reftek. <a href=' /io/reftek/packet.py#L220'>_initial_unpack_packets</a>(bytestring)</tt>	First unpack data with dtype matching itemsize of storage in the reftek file than allocate result array with dtypes for storage of python.
<tt style='background-color:#E8E8E8;'> io.reftek. <a href=' /io/reftek/packet.py#L255'>_unpack_C0_C2_data</a>(packets,encoding)</tt>	Unpacks sample data from a packet array that uses 'c0' or 'c2' data encoding.
<tt style='background-color:#E8E8E8;'> io.reftek. <a href=' /io/reftek/packet.py#L294'>_unpack_C0_C2_data_fast</a>(packets,encoding)</tt>	Unpacks sample data from a packet array that uses 'c0' or 'c2' data encoding.
<tt style='background-color:#E8E8E8;'> io.reftek. <a href=' /io/reftek/packet.py#L345'>_unpack_C0_C2_data_safe</a>(packets,encoding)</tt>	Unpacks sample data from a packet array that uses 'c0' or 'c2' data encoding.
<tt style='background-color:#E8E8E8;'> io.xseed. <a href=' /io/xseed/utils.py#L36'>to_tag</a>(name)</tt>	Creates a xml tag from a given string.
<tt style='background-color:#E8E8E8;'> io.xseed. <a href=' /io/xseed/utils.py#L46'>to_string</a>(tag)</tt>	Creates a pretty string from any given xml tag.
<tt style='background-color:#E8E8E8;'> io.xseed. <a href=' /io/xseed/utils.py#L55'>datetime_2_string</a>(dt,compact)</tt>	Generates a valid seed time string from a utcdatetime object.
<tt style='background-color:#E8E8E8;'> io.xseed. <a href=' /io/xseed/utils.py#L72'>compare_seed</a>(seed1,seed2)</tt>	Compares two seed files.
<tt style='background-color:#E8E8E8;'> io.xseed. <a href=' /io/xseed/utils.py#L139'>lookup_code</a>(blockettes,blkt_number,field_name,lookup_code)</tt>	Loops over a list of blockettes until it finds the blockette with the right number and lookup code.
<tt style='background-color:#E8E8E8;'> io.xseed. <a href=' /io/xseed/utils.py#L155'>format_resp</a>(number,digits)</tt>	Formats a number according to the resp format.
<tt style='background-color:#E8E8E8;'> io.xseed. <a href=' /io/xseed/utils.py#L163'>blockette_34_lookup</a>(abbr,lookup)</tt>	Gets certain values from blockette 34 needed for resp output.
<tt style='background-color:#E8E8E8;'> io.xseed. <a href=' /io/xseed/utils.py#L178'>set_xpath</a>(blockette,identifier)</tt>	Returns an x-path string to a blockette with the correct identifier.
<tt style='background-color:#E8E8E8;'> io.xseed. <a href=' /io/xseed/utils.py#L214'>get_xpath</a>(xpath)</tt>	Returns lookup key of xpath expression on abbreviation dictionary.
<tt style='background-color:#E8E8E8;'> io.xseed. <a href=' /io/xseed/utils.py#L229'>is_resp</a>(filename)</tt>	Check if a file at the specified location appears to be a resp file.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L74'>__init__</a>(data,debug,strict,compact)</tt>	Initializes the seed parser.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L146'>read</a>(data)</tt>	General parser method for xml-seed and dataless seed files.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L208'>get_xseed</a>(version,split_stations)</tt>	Returns a xseed representation of the current parser object.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L286'>write_xseed</a>(filename)</tt>	Writes a xml-seed file with given name.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L310'>get_seed</a>(compact)</tt>	Returns a seed representation of the current parser object.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L348'>write_seed</a>(filename)</tt>	Writes a dataless seed file with given name.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L356'>get_resp</a>()</tt>	Returns a resp representation of the current parser object.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L429'>_select</a>(seed_id,datetime)</tt>	Selects all blockettes related to given seed id and datetime.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L578'>get_coordinates</a>(seed_id,datetime)</tt>	Return coordinates from blockette 52.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L603'>write_resp</a>(folder,zipped)</tt>	Writes for each channel a resp file within a given folder.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L635'>_parse_seed</a>(data)</tt>	Parses through a whole seed volume.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L708'>get_inventory</a>()</tt>	Function returning a dictionary about whats actually in the parser object.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L760'>_get_abbreviation</a>(identifier_code)</tt>	Helper function returning the abbreviation for the given identifier code.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L773'>_parse_xseed</a>(data)</tt>	Parse a xml-seed string.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L805'>_get_resp_string</a>(resp,blockettes,station)</tt>	Takes a file like object and a list of blockettes containing all blockettes for one channel and writes them resp like to the bytesio.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L853'>_parse_xml_blockette</a>(xml_blockette,record_type,xseed_version)</tt>	Takes the lxml tree of any blockette and returns a blockette object.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L877'>_create_cut_and_flush_record</a>(blockettes,record_type)</tt>	Takes all blockettes of a record and return a list of finished records.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L940'>_check_blockettes</a>()</tt>	Checks if all blockettes necessary for creating a seed string are available.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L959'>_compare_blockettes</a>(blkt1,blkt2)</tt>	Compares two blockettes.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L971'>_update_internal_seed_structure</a>()</tt>	Takes everything in the self temp dictionary and writes it into the.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L1033'>_update_temporary_stations</a>(blkt_id,index_nr)</tt>	Loops over all stations finds the corresponding blockettes and changes all abbreviation lookup codes.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L1059'>_parse_merged_data</a>(data,record_type)</tt>	This method takes any merged seed record and writes its blockettes in the corresponding dictionary entry of self.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L1131'>_create_blockettes_11_and_12</a>(blockette12)</tt>	Creates blockettes 11 and 12 for seed writing and xseed version 1 1.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L1179'>_delete_blockettes_11_and_12</a>()</tt>	Deletes blockette 11 and 12.
<tt style='background-color:#E8E8E8;'> io.xseed.Parser <a href=' /io/xseed/parser.py#L1185'>rotate_to_zne</a>(stream)</tt>	Rotates the three components of a stream to zne.
<tt style='background-color:#E8E8E8;'> io.xseed. <a href=' /io/xseed/parser.py#L1255'>is_xseed</a>(path_or_file_object)</tt>	Simple function checking if the passed object contains a xml-seed file.
<tt style='background-color:#E8E8E8;'> io.xseed.Field <a href=' /io/xseed/fields.py#L65'>_format_string</a>(s)</tt>	Using seed specific flags to format strings.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette055 <a href=' /io/xseed/blockette/blockette055.py#L47'>get_resp</a>(station,channel,abbreviations)</tt>	Returns resp string.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette048 <a href=' /io/xseed/blockette/blockette048.py#L35'>get_resp</a>(station,channel,abbreviations)</tt>	Returns resp string.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette061 <a href=' /io/xseed/blockette/blockette061.py#L55'>get_resp</a>(station,channel,abbreviations)</tt>	Returns resp string.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette058 <a href=' /io/xseed/blockette/blockette058.py#L48'>get_resp</a>(station,channel,abbreviations)</tt>	Returns resp string.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette062 <a href=' /io/xseed/blockette/blockette062.py#L65'>get_resp</a>(station,channel,abbreviations)</tt>	Returns resp string.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette060 <a href=' /io/xseed/blockette/blockette060.py#L71'>parse_seed</a>(data,length)</tt>	Read blockette 60.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette060 <a href=' /io/xseed/blockette/blockette060.py#L96'>get_seed</a>()</tt>	Writes blockette 60.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette060 <a href=' /io/xseed/blockette/blockette060.py#L143'>parse_xml</a>(xml_doc,version)</tt>	Read xml of blockette 60.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette060 <a href=' /io/xseed/blockette/blockette060.py#L162'>get_resp</a>(station,channel,abbreviations)</tt>	Returns resp string.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette047 <a href=' /io/xseed/blockette/blockette047.py#L32'>get_resp</a>(station,channel,abbreviations)</tt>	Returns resp string.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette054 <a href=' /io/xseed/blockette/blockette054.py#L60'>get_resp</a>(station,channel,abbreviations)</tt>	Returns resp string.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette <a href=' /io/xseed/blockette/blockette.py#L58'>__str__</a>()</tt>	Pretty prints the informations stored in the blockette.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette <a href=' /io/xseed/blockette/blockette.py#L90'>parse_seed</a>(data,expected_length)</tt>	Parse given data for blockette fields and create attributes.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette <a href=' /io/xseed/blockette/blockette.py#L142'>get_seed</a>()</tt>	Converts the blockette to a valid seed string and returns it.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette <a href=' /io/xseed/blockette/blockette.py#L154'>parse_xml</a>(xml_doc)</tt>	Reads lxml etree and fills the blockette with the values of it.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette <a href=' /io/xseed/blockette/blockette.py#L161'>get_xml</a>(show_optional,xseed_version)</tt>	Returns a xml document representing this blockette.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette057 <a href=' /io/xseed/blockette/blockette057.py#L57'>get_resp</a>(station,channel,abbreviations)</tt>	Returns resp string.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette041 <a href=' /io/xseed/blockette/blockette041.py#L41'>parse_seed</a>(data,expected_length)</tt>	If number of fir coefficients are larger than maximal blockette size of 9999 chars a follow up blockette with the same blockette id and.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette041 <a href=' /io/xseed/blockette/blockette041.py#L106'>get_resp</a>(station,channel,abbreviations)</tt>	Returns resp string.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette043 <a href=' /io/xseed/blockette/blockette043.py#L53'>get_resp</a>(station,channel,abbreviations)</tt>	Returns resp string.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette053 <a href=' /io/xseed/blockette/blockette053.py#L75'>get_resp</a>(station,channel,abbreviations)</tt>	Returns resp string.
<tt style='background-color:#E8E8E8;'> io.xseed.blockette.Blockette044 <a href=' /io/xseed/blockette/blockette044.py#L47'>get_resp</a>(station,channel,abbreviations)</tt>	Returns resp string.
<tt style='background-color:#E8E8E8;'> io.pdas. <a href=' /io/pdas/core.py#L20'>_is_pdas</a>(filename)</tt>	Checks whether a file is a pdas file or not.
<tt style='background-color:#E8E8E8;'> io.pdas. <a href=' /io/pdas/core.py#L44'>_read_pdas</a>(filename)</tt>	Reads a pdas file and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> io.gcf. <a href=' /io/gcf/libgcf.py#L39'>is_gcf</a>(f)</tt>	Test if file is gcf by reading at least 1 data block.
<tt style='background-color:#E8E8E8;'> io.gcf. <a href=' /io/gcf/libgcf.py#L46'>decode36</a>(data)</tt>	Converts an integer into a base36 string.
<tt style='background-color:#E8E8E8;'> io.gcf. <a href=' /io/gcf/libgcf.py#L63'>decode_date_time</a>(data)</tt>	Decode date and time field.
<tt style='background-color:#E8E8E8;'> io.gcf. <a href=' /io/gcf/libgcf.py#L78'>read_data_block</a>(f,headonly,channel_prefix)</tt>	Read one data block from gcf file.
<tt style='background-color:#E8E8E8;'> io.gcf. <a href=' /io/gcf/libgcf.py#L151'>read_header</a>(f)</tt>	Reads header only from gcf file.
<tt style='background-color:#E8E8E8;'> io.gcf. <a href=' /io/gcf/libgcf.py#L158'>read</a>(f)</tt>	Reads header and data from gcf file.
<tt style='background-color:#E8E8E8;'> io.gcf. <a href=' /io/gcf/core.py#L14'>merge_gcf_stream</a>(st)</tt>	Merges gcf stream (replacing stream merge -1 for headonly=true).
<tt style='background-color:#E8E8E8;'> io.gcf. <a href=' /io/gcf/core.py#L43'>_is_gcf</a>(filename)</tt>	Checks whether a file is gcf or not.
<tt style='background-color:#E8E8E8;'> io.gcf. <a href=' /io/gcf/core.py#L60'>_read_gcf</a>(filename,headonly)</tt>	Reads a gcf file and returns a stream object.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L53'>_is_sfile</a>(sfile)</tt>	Basic test of whether the file is nordic format or not.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L100'>_int_conv</a>(string)</tt>	Convenience tool to convert from string to integer.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L118'>_float_conv</a>(string)</tt>	Convenience tool to convert from string to float.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L137'>_str_conv</a>(number,rounded)</tt>	Convenience tool to convert a number either float or int into a string.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L180'>_evmagtonor</a>(mag_type)</tt>	Switch from obspy event magnitude types to seisan syntax.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L203'>_nortoevmag</a>(mag_type)</tt>	Switch from nordic type magnitude notation to obspy event magnitudes.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L223'>readheader</a>(sfile)</tt>	Read header information from a seisan nordic format s-file.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L237'>_readheader</a>(f)</tt>	Internal header reader.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L325'>read_spectral_info</a>(sfile)</tt>	Read spectral info from an sfile.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L341'>_read_spectral_info</a>(f)</tt>	Internal spectral reader.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L426'>read_nordic</a>(select_file,return_wavnames)</tt>	Read a catalog of events from a nordic formatted select file.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L473'>_read_picks</a>(f,new_event)</tt>	Internal pick reader use read_nordic instead.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L623'>readwavename</a>(sfile)</tt>	Extract the waveform filename from the s-file.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L641'>_readwavename</a>(f)</tt>	Internal wave-name reader.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L657'>blanksfile</a>(wavefile,evtype,userid,overwrite)</tt>	Generate an empty s-file with a populated header for a given waveform.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L739'>write_select</a>(catalog,filename,userid,evtype)</tt>	Function to write a catalog to a select file in nordic format.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L772'>_write_nordic</a>(event,filename,userid,evtype)</tt>	Write an :class ~obspy core event event to a nordic formatted s-file.
<tt style='background-color:#E8E8E8;'> io.nordic. <a href=' /io/nordic/core.py#L976'>nordpick</a>(event)</tt>	Format picks in an :class ~obspy core event event event to nordic.
<tt style='background-color:#E8E8E8;'> io.seg2.SEG2 <a href=' /io/seg2/seg2.py#L64'>read_file</a>(file_object)</tt>	Reads the following file and will return a stream object if.
<tt style='background-color:#E8E8E8;'> io.seg2.SEG2 <a href=' /io/seg2/seg2.py#L96'>read_file_descriptor_block</a>()</tt>	Handles the reading of the file descriptor block and the free form section following it.
<tt style='background-color:#E8E8E8;'> io.seg2.SEG2 <a href=' /io/seg2/seg2.py#L190'>parse_next_trace</a>()</tt>	Parse the next trace in the trace pointer list and return a trace object.
<tt style='background-color:#E8E8E8;'> io.seg2.SEG2 <a href=' /io/seg2/seg2.py#L259'>parse_free_form</a>(free_form_str,attrib_dict)</tt>	Parse the free form section stored in free_form_str and save it in attrib_dict.
<tt style='background-color:#E8E8E8;'> io.css. <a href=' /io/css/station.py#L26'>_write_css</a>(inventory,basename)</tt>	Writes an inventory object to a css database.
<tt style='background-color:#E8E8E8;'> io.css. <a href=' /io/css/core.py#L41'>_is_css</a>(filename)</tt>	Checks whether a file is css waveform data header or not.
<tt style='background-color:#E8E8E8;'> io.css. <a href=' /io/css/core.py#L75'>_is_nnsa_kb_core</a>(filename)</tt>	Checks whether a file is nnsa kb core waveform data header or not.
<tt style='background-color:#E8E8E8;'> io.css. <a href=' /io/css/core.py#L109'>_read_css</a>(filename)</tt>	Reads a css waveform file and returns a stream object.
<tt style='background-color:#E8E8E8;'> io.css. <a href=' /io/css/core.py#L158'>_read_nnsa_kb_core</a>(filename)</tt>	Reads a nnsa kb core waveform file and returns a stream object.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/velocity_layer.py#L45'>evaluate_velocity_at_bottom</a>(layer,prop)</tt>	Evaluate material properties at bottom of a velocity layer.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/velocity_layer.py#L77'>evaluate_velocity_at_top</a>(layer,prop)</tt>	Evaluate material properties at top of a velocity layer.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/velocity_layer.py#L110'>evaluate_velocity_at</a>(layer,depth,prop)</tt>	Evaluate material properties at some depth in a velocity layer.
<tt style='background-color:#E8E8E8;'> taup.DepthRange <a href=' /taup/helper_classes.py#L80'>_to_array</a>()</tt>	Store all attributes for serialization in a structured array.
<tt style='background-color:#E8E8E8;'> taup.DepthRange <a href=' /taup/helper_classes.py#L90'>_from_array</a>(arr)</tt>	Create instance object from a structured array used in serialization.
<tt style='background-color:#E8E8E8;'> taup.Arrival <a href=' /taup/helper_classes.py#L172'>ray_param_sec_degree</a>()</tt>	Return the ray parameter in seconds per degree.
<tt style='background-color:#E8E8E8;'> taup.Arrival <a href=' /taup/helper_classes.py#L179'>purist_distance</a>()</tt>	Return the purist distance in degrees.
<tt style='background-color:#E8E8E8;'> taup.TauBranch <a href=' /taup/tau_branch.py#L43'>create_branch</a>(s_mod,min_p_so_far,ray_params)</tt>	Calculates tau for this branch between slowness layers top_layer_num and bot_layer_num inclusive.
<tt style='background-color:#E8E8E8;'> taup.TauBranch <a href=' /taup/tau_branch.py#L116'>insert</a>(ray_param,s_mod,index)</tt>	Inserts the distance time and tau increment for the slowness sample given to the branch.
<tt style='background-color:#E8E8E8;'> taup.TauBranch <a href=' /taup/tau_branch.py#L168'>difference</a>(top_branch,index_p,index_s,s_mod)</tt>	Generates a new tau branch by "subtracting" the given tau branch from this tau branch self.
<tt style='background-color:#E8E8E8;'> taup.TauBranch <a href=' /taup/tau_branch.py#L314'>path</a>(ray_param,downgoing,s_mod)</tt>	Called from tauppath to calculate ray paths.
<tt style='background-color:#E8E8E8;'> taup.TauBranch <a href=' /taup/tau_branch.py#L447'>_to_array</a>()</tt>	Store all attributes for serialization in a structured array.
<tt style='background-color:#E8E8E8;'> taup.TauBranch <a href=' /taup/tau_branch.py#L467'>_from_array</a>(arr)</tt>	Create instance object from a structured array used in serialization.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L117'>create_sample</a>()</tt>	Create slowness-depth layers from a velocity model.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L165'>find_critical_points</a>()</tt>	Find all critical points within a velocity model.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L444'>get_num_layers</a>(is_p_wave)</tt>	Number of slowness layers.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L461'>find_depth_from_depths</a>(ray_param,top_depth,bot_depth,is_p_wave)</tt>	Find depth corresponding to a slowness between two given depths.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L495'>find_depth_from_layers</a>(p,top_critical_layer,bot_critical_layer,is_p_wave)</tt>	Find depth corresponding to a slowness p between two velocity layers.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L598'>to_slowness</a>(velocity,depth)</tt>	Convert velocity at some depth to slowness.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L619'>interpolate</a>(p,top_velocity,top_depth,slope)</tt>	Interpolate slowness to depth within a layer.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L651'>depth_in_fluid</a>(depth)</tt>	Determine if the given depth is contained within a fluid zone.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L671'>coarse_sample</a>()</tt>	Create a coarse slowness sampling of the velocity model (v_mod).
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L802'>layer_number_above</a>(depth,is_p_wave)</tt>	Find the index of the slowness layer that contains the given depth.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L846'>layer_number_below</a>(depth,is_p_wave)</tt>	Find the index of the slowness layer that contains the given depth.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L891'>get_slowness_layer</a>(layer,is_p_wave)</tt>	Return the slowness_layer of the requested wave type.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L913'>add_slowness</a>(p,is_p_wave)</tt>	Add a ray parameter to the slowness sampling for the given wave type.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L995'>ray_param_inc_check</a>()</tt>	Check that no slowness layer's ray parameter interval is too large.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L1026'>depth_inc_check</a>()</tt>	Check that no slowness layer is too thick.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L1070'>distance_check</a>()</tt>	Check that no slowness layer is too wide or undersampled.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L1203'>depth_in_high_slowness</a>(depth,ray_param,is_p_wave)</tt>	Determine if depth and slowness are within a high slowness zone.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L1243'>approx_distance</a>(slowness_turn_layer,p,is_p_wave)</tt>	Approximate distance for ray turning at the bottom of a layer.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L1283'>layer_time_dist</a>(spherical_ray_param,layer_num,is_p_wave,check)</tt>	Calculate time and distance for a ray passing through a layer.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L1525'>fix_critical_points</a>()</tt>	Reset the slowness layers that correspond to critical points.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L1553'>validate</a>()</tt>	Perform consistency check on the slowness model.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L1637'>get_min_turn_ray_param</a>(depth,is_p_wave)</tt>	Find minimum slowness turning but not reflected at or above a depth.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L1677'>get_min_ray_param</a>(depth,is_p_wave)</tt>	Find minimum slowness turning or reflected at or above a depth.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L1705'>split_layer</a>(depth,is_p_wave)</tt>	Split a slowness layer into two slowness layers.
<tt style='background-color:#E8E8E8;'> taup.SlownessModel <a href=' /taup/slowness_model.py#L1789'>_fix_other_layers</a>(other_layers,p,changed_layer,new_top_layer)</tt>	Fix other wave layers when a split is made.
<tt style='background-color:#E8E8E8;'> taup.TauPPath <a href=' /taup/taup_path.py#L17'>calculate</a>(degrees)</tt>	Call all the necessary calculations to obtain the ray paths.
<tt style='background-color:#E8E8E8;'> taup.TauPPath <a href=' /taup/taup_path.py#L26'>calculate_path</a>(degrees)</tt>	Calculates the ray paths for phases at the given distance by calling the calculate_path method of the seismicphase class.
<tt style='background-color:#E8E8E8;'> taup.TauPCreate <a href=' /taup/taup_create.py#L46'>load_velocity_model</a>()</tt>	Try to load a velocity model.
<tt style='background-color:#E8E8E8;'> taup.TauPCreate <a href=' /taup/taup_create.py#L66'>create_tau_model</a>(v_mod)</tt>	Create :class ~ taumodel from velocity model.
<tt style='background-color:#E8E8E8;'> taup.TauPCreate <a href=' /taup/taup_create.py#L112'>run</a>()</tt>	Create a tau model from a velocity model.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/taup_create.py#L143'>get_builtin_model_files</a>()</tt>	Get a list of paths to builtin files that can be used for models.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/taup_create.py#L154'>build_taup_model</a>(filename,output_folder,verbose)</tt>	Build an obspy model file from a "tvel" or "nd" file.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/taup_create.py#L184'>build_all_taup_models</a>()</tt>	Build all :class ~obspy taup tau_model taumodel models in data directory.
<tt style='background-color:#E8E8E8;'> taup.Arrivals <a href=' /taup/tau.py#L168'>plot</a>(plot_type,plot_all,legend,label_arrivals)</tt>	Plot the ray paths if any have been calculated.
<tt style='background-color:#E8E8E8;'> taup.TauPyModel <a href=' /taup/tau.py#L367'>__init__</a>(model,verbose,planet_flattening,cache)</tt>	Loads an already created taupy model.
<tt style='background-color:#E8E8E8;'> taup.TauPyModel <a href=' /taup/tau.py#L406'>get_travel_times</a>(source_depth_in_km,distance_in_degree,phase_list,receiver_depth_in_km)</tt>	Return travel times of every given phase.
<tt style='background-color:#E8E8E8;'> taup.TauPyModel <a href=' /taup/tau.py#L435'>get_pierce_points</a>(source_depth_in_km,distance_in_degree,phase_list,receiver_depth_in_km)</tt>	Return pierce points of every given phase.
<tt style='background-color:#E8E8E8;'> taup.TauPyModel <a href=' /taup/tau.py#L461'>get_ray_paths</a>(source_depth_in_km,distance_in_degree,phase_list,receiver_depth_in_km)</tt>	Return ray paths of every given phase.
<tt style='background-color:#E8E8E8;'> taup.TauPyModel <a href=' /taup/tau.py#L487'>get_travel_times_geo</a>(source_depth_in_km,source_latitude_in_deg,source_longitude_in_deg,receiver_latitude_in_deg)</tt>	Return travel times of every given phase given geographical data.
<tt style='background-color:#E8E8E8;'> taup.TauPyModel <a href=' /taup/tau.py#L531'>get_pierce_points_geo</a>(source_depth_in_km,source_latitude_in_deg,source_longitude_in_deg,receiver_latitude_in_deg)</tt>	Return ray paths of every given phase with geographical info.
<tt style='background-color:#E8E8E8;'> taup.TauPyModel <a href=' /taup/tau.py#L593'>get_ray_paths_geo</a>(source_depth_in_km,source_latitude_in_deg,source_longitude_in_deg,receiver_latitude_in_deg)</tt>	Return ray paths of every given phase with geographical info.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/tau.py#L654'>create_taup_model</a>(model_name,output_dir,input_dir)</tt>	Create a taup model from a tvel file.
<tt style='background-color:#E8E8E8;'> taup.VelocityModel <a href=' /taup/velocity_model.py#L19'>__init__</a>(model_name,radius_of_planet,min_radius,max_radius)</tt>	Object for storing a seismic planet model.
<tt style='background-color:#E8E8E8;'> taup.VelocityModel <a href=' /taup/velocity_model.py#L69'>get_discontinuity_depths</a>()</tt>	Return the depths of discontinuities within the velocity model.
<tt style='background-color:#E8E8E8;'> taup.VelocityModel <a href=' /taup/velocity_model.py#L88'>layer_number_above</a>(depth)</tt>	Find the layer containing the given depth s.
<tt style='background-color:#E8E8E8;'> taup.VelocityModel <a href=' /taup/velocity_model.py#L114'>layer_number_below</a>(depth)</tt>	Find the layer containing the given depth s.
<tt style='background-color:#E8E8E8;'> taup.VelocityModel <a href=' /taup/velocity_model.py#L140'>evaluate_above</a>(depth,prop)</tt>	Return the value of the given material property at the given depth s.
<tt style='background-color:#E8E8E8;'> taup.VelocityModel <a href=' /taup/velocity_model.py#L168'>evaluate_below</a>(depth,prop)</tt>	Return the value of the given material property at the given depth s.
<tt style='background-color:#E8E8E8;'> taup.VelocityModel <a href=' /taup/velocity_model.py#L196'>depth_at_top</a>(layer)</tt>	Return the depth at the top of the given layer.
<tt style='background-color:#E8E8E8;'> taup.VelocityModel <a href=' /taup/velocity_model.py#L212'>depth_at_bottom</a>(layer)</tt>	Return the depth at the bottom of the given layer.
<tt style='background-color:#E8E8E8;'> taup.VelocityModel <a href=' /taup/velocity_model.py#L228'>validate</a>()</tt>	Perform internal consistency checks on the velocity model.
<tt style='background-color:#E8E8E8;'> taup.VelocityModel <a href=' /taup/velocity_model.py#L363'>read_velocity_file</a>(cls,filename)</tt>	Read in a velocity file.
<tt style='background-color:#E8E8E8;'> taup.VelocityModel <a href=' /taup/velocity_model.py#L388'>read_tvel_file</a>(cls,filename)</tt>	Read in a velocity model from a "tvel" ascii text file.
<tt style='background-color:#E8E8E8;'> taup.VelocityModel <a href=' /taup/velocity_model.py#L476'>read_nd_file</a>(cls,filename)</tt>	Read in a velocity model from a "nd" ascii text file.
<tt style='background-color:#E8E8E8;'> taup.VelocityModel <a href=' /taup/velocity_model.py#L612'>fix_discontinuity_depths</a>()</tt>	Reset depths of major discontinuities.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/slowness_layer.py#L20'>bullen_radial_slowness</a>(layer,p,radius_of_planet,check)</tt>	Calculate time and distance increments of a spherical ray.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/slowness_layer.py#L76'>bullen_depth_for</a>(layer,ray_param,radius_of_planet,check)</tt>	Finds the depth for a ray parameter within this layer.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/slowness_layer.py#L239'>evaluate_at_bullen</a>(layer,depth,radius_of_planet)</tt>	Find the slowness at the given depth.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/slowness_layer.py#L297'>create_from_vlayer</a>(v_layer,is_p_wave,radius_of_planet,is_spherical)</tt>	Compute the slowness layer from a velocity layer.
<tt style='background-color:#E8E8E8;'> taup.TauModel <a href=' /taup/tau_model.py#L71'>calc_tau_inc_from</a>()</tt>	Calculates tau for each branch within a slowness model.
<tt style='background-color:#E8E8E8;'> taup.TauModel <a href=' /taup/tau_model.py#L203'>depth_correct</a>(depth)</tt>	Called in tauptime computes a new tau model for a source at depth.
<tt style='background-color:#E8E8E8;'> taup.TauModel <a href=' /taup/tau_model.py#L247'>split_branch</a>(depth)</tt>	Returns a new taumodel with the branches containing depth split at depth.
<tt style='background-color:#E8E8E8;'> taup.TauModel <a href=' /taup/tau_model.py#L375'>find_branch</a>(depth)</tt>	Finds the branch that either has the depth as its top boundary or strictly contains the depth.
<tt style='background-color:#E8E8E8;'> taup.TauModel <a href=' /taup/tau_model.py#L395'>get_branch_depths</a>()</tt>	Return an array of the depths that are boundaries between branches.
<tt style='background-color:#E8E8E8;'> taup.TauModel <a href=' /taup/tau_model.py#L406'>serialize</a>(filename)</tt>	Serialize model to numpy npz binary file.
<tt style='background-color:#E8E8E8;'> taup.TauModel <a href=' /taup/tau_model.py#L543'>deserialize</a>(filename,cache)</tt>	Deserialize model from numpy npz binary file.
<tt style='background-color:#E8E8E8;'> taup.SeismicPhase <a href=' /taup/seismic_phase.py#L165'>parse_name</a>(tau_model)</tt>	Construct a branch sequence from the given phase name and tau model.
<tt style='background-color:#E8E8E8;'> taup.SeismicPhase <a href=' /taup/seismic_phase.py#L686'>phase_conversion</a>(tau_model,from_branch,end_action,is_p_to_s)</tt>	Change max_ray_param and min_ray_param where there is a phase conversion.
<tt style='background-color:#E8E8E8;'> taup.SeismicPhase <a href=' /taup/seismic_phase.py#L728'>add_to_branch</a>(tau_model,start_branch,end_branch,is_p_wave)</tt>	Add branch numbers to branch_seq.
<tt style='background-color:#E8E8E8;'> taup.SeismicPhase <a href=' /taup/seismic_phase.py#L800'>sum_branches</a>(tau_model)</tt>	Sum the appropriate branches for this phase.
<tt style='background-color:#E8E8E8;'> taup.SeismicPhase <a href=' /taup/seismic_phase.py#L991'>calc_branch_mult</a>(tau_model)</tt>	Calculate how many times the phase passes through a branch up or down.
<tt style='background-color:#E8E8E8;'> taup.SeismicPhase <a href=' /taup/seismic_phase.py#L1009'>calc_time</a>(degrees)</tt>	Calculate arrival times for this phase sorted by time.
<tt style='background-color:#E8E8E8;'> taup.SeismicPhase <a href=' /taup/seismic_phase.py#L1037'>calc_pierce</a>(degrees)</tt>	Calculate pierce points for this phase.
<tt style='background-color:#E8E8E8;'> taup.SeismicPhase <a href=' /taup/seismic_phase.py#L1050'>calc_pierce_from_arrival</a>(curr_arrival)</tt>	Calculate the pierce points for a particular arrival.
<tt style='background-color:#E8E8E8;'> taup.SeismicPhase <a href=' /taup/seismic_phase.py#L1156'>calc_path</a>(degrees)</tt>	Calculate the paths this phase takes through the planet model.
<tt style='background-color:#E8E8E8;'> taup.SeismicPhase <a href=' /taup/seismic_phase.py#L1167'>calc_path_from_arrival</a>(curr_arrival)</tt>	Calculate the paths this phase takes through the planet model.
<tt style='background-color:#E8E8E8;'> taup.SeismicPhase <a href=' /taup/seismic_phase.py#L1233'>handle_special_waves</a>(curr_arrival,pierce,index)</tt>	Handle head or diffracted waves.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/seismic_phase.py#L1483'>closest_branch_to_depth</a>(tau_model,depth_string)</tt>	Find the closest discontinuity to the given depth that can have reflections and phase transformations.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/seismic_phase.py#L1532'>leg_puller</a>(name)</tt>	Tokenize a phase name into legs.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/utils.py#L18'>parse_phase_list</a>(phase_list)</tt>	Takes a list of phases returns a list of individual phases performs e g.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/utils.py#L30'>get_phase_names</a>(phase_name)</tt>	Called by parse_phase_list to replace e g ttall with the relevant phases.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/taup_geo.py#L31'>calc_dist</a>(source_latitude_in_deg,source_longitude_in_deg,receiver_latitude_in_deg,receiver_longitude_in_deg)</tt>	Given the source and receiver location calculate distance.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/taup_geo.py#L58'>calc_dist_azi</a>(source_latitude_in_deg,source_longitude_in_deg,receiver_latitude_in_deg,receiver_longitude_in_deg)</tt>	Given the source and receiver location calculate the azimuth from the source to the receiver at the source the backazimuth from the receiver.
<tt style='background-color:#E8E8E8;'> taup. <a href=' /taup/taup_geo.py#L117'>add_geo_to_arrivals</a>(arrivals,source_latitude_in_deg,source_longitude_in_deg,receiver_latitude_in_deg)</tt>	Add geographical information to arrivals.
<tt style='background-color:#E8E8E8;'> taup.TauPTime <a href=' /taup/taup_time.py#L33'>run</a>()</tt>	Do all the calculations and print the output if told to the resulting.
<tt style='background-color:#E8E8E8;'> taup.TauPTime <a href=' /taup/taup_time.py#L41'>depth_correct</a>(depth,receiver_depth)</tt>	Corrects the taumodel for the given source depth if not already corrected.
<tt style='background-color:#E8E8E8;'> taup.TauPTime <a href=' /taup/taup_time.py#L60'>recalc_phases</a>()</tt>	Recalculates the given phases using a possibly new or changed tau model.
<tt style='background-color:#E8E8E8;'> taup.TauPTime <a href=' /taup/taup_time.py#L90'>calculate</a>(degrees)</tt>	Calculate the arrival times.
<tt style='background-color:#E8E8E8;'> taup.TauPTime <a href=' /taup/taup_time.py#L99'>calc_time</a>(degrees)</tt>	Calls the calc_time method of seismicphase to calculate arrival times for every phase each sorted by time.
<tt style='background-color:#E8E8E8;'> taup.TauPPierce <a href=' /taup/taup_pierce.py#L28'>depth_correct</a>(depth,receiver_depth)</tt>	Override tauptime depth_correct so that the pierce points may be.
<tt style='background-color:#E8E8E8;'> taup.TauPPierce <a href=' /taup/taup_pierce.py#L66'>calculate</a>(degrees)</tt>	Call all the necessary calculations to obtain the pierce points.
<tt style='background-color:#E8E8E8;'> taup.TauPPierce <a href=' /taup/taup_pierce.py#L75'>calculate_pierce</a>(degrees)</tt>	Calculates the pierce points for phases at the given distance by calling the calculate_pierce method of the seismicphase class.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/runtests.py#L159'>_get_suites</a>(verbosity,names)</tt>	The obspy test suite.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/runtests.py#L420'>_skip_test</a>(test_case,msg)</tt>	Helper method intended to be bound to a unittest testcase.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/runtests.py#L433'>_recursive_skip</a>(test_suite,msg)</tt>	Helper method to recursively skip all tests aggregated in test_suite with the the specified message.
<tt style='background-color:#E8E8E8;'> scripts._TextTestRunner <a href=' /scripts/runtests.py#L466'>run</a>(suites)</tt>	Run the given test case or test suite.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/runtests.py#L540'>run_tests</a>(verbosity,tests,report,log)</tt>	This function executes obspy test suites.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/runtests.py#L751'>main</a>(argv,interactive)</tt>	Entry point for setup py.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/sds_html_report.py#L110'>_latency_to_tuple</a>(latency)</tt>	Convert latency in seconds to tuple of days hours minutes seconds.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/sds_html_report.py#L128'>_latency_info_string</a>(latency,only_days,pad)</tt>	Format latency as a plain ascii string.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/sds_html_report.py#L159'>_latency_line_html</a>(latency_tuple,args,color,only_days)</tt>	Format a single latency information tuple net sta loc cha latency percentage gap count as a html line.
<tt style='background-color:#E8E8E8;'> realtime.RtMemory <a href=' /realtime/rtmemory.py#L25'>initialize</a>(data_type,length_input,length_output,input_initial_value)</tt>	Create and initialize input and output arrays for this rtmemory object.
<tt style='background-color:#E8E8E8;'> realtime.RtMemory <a href=' /realtime/rtmemory.py#L51'>_update</a>(memory_array,data)</tt>	Update specified memory array using specified number of points from end of specified data array.
<tt style='background-color:#E8E8E8;'> realtime.RtMemory <a href=' /realtime/rtmemory.py#L75'>update_output</a>(data)</tt>	Update output memory using specified number of points from end of specified array.
<tt style='background-color:#E8E8E8;'> realtime.RtMemory <a href=' /realtime/rtmemory.py#L85'>update_input</a>(data)</tt>	Update input memory using specified number of points from end of specified array.
<tt style='background-color:#E8E8E8;'> realtime.RtTrace <a href=' /realtime/rttrace.py#L116'>rt_process_functions_to_string</a>(cls)</tt>	Return doc string for all predefined real-time processing functions.
<tt style='background-color:#E8E8E8;'> realtime.RtTrace <a href=' /realtime/rttrace.py#L132'>__init__</a>(max_length)</tt>	Initializes an rttrace.
<tt style='background-color:#E8E8E8;'> realtime.RtTrace <a href=' /realtime/rttrace.py#L150'>__eq__</a>(other)</tt>	Implements rich comparison of rttrace objects for "==" operator.
<tt style='background-color:#E8E8E8;'> realtime.RtTrace <a href=' /realtime/rttrace.py#L161'>__add__</a>()</tt>	Too ambiguous throw an error.
<tt style='background-color:#E8E8E8;'> realtime.RtTrace <a href=' /realtime/rttrace.py#L170'>append</a>(trace,gap_overlap_check,verbose)</tt>	Appends a trace object to this rttrace.
<tt style='background-color:#E8E8E8;'> realtime.RtTrace <a href=' /realtime/rttrace.py#L310'>register_rt_process</a>(process)</tt>	Adds real-time processing algorithm to processing list of this rttrace.
<tt style='background-color:#E8E8E8;'> realtime.RtTrace <a href=' /realtime/rttrace.py#L374'>copy</a>()</tt>	Returns a deepcopy of this rttrace.
<tt style='background-color:#E8E8E8;'> realtime. <a href=' /realtime/signal.py#L41'>offset</a>(trace,offset,rtmemory_list)</tt>	Add the specified offset to the data.
<tt style='background-color:#E8E8E8;'> realtime. <a href=' /realtime/signal.py#L66'>scale</a>(trace,factor,rtmemory_list)</tt>	Scale array data samples by specified factor.
<tt style='background-color:#E8E8E8;'> realtime. <a href=' /realtime/signal.py#L91'>integrate</a>(trace,rtmemory_list)</tt>	Apply simple rectangular integration to array data.
<tt style='background-color:#E8E8E8;'> realtime. <a href=' /realtime/signal.py#L138'>differentiate</a>(trace,rtmemory_list)</tt>	Apply simple differentiation to array data.
<tt style='background-color:#E8E8E8;'> realtime. <a href=' /realtime/signal.py#L188'>boxcar</a>(trace,width,rtmemory_list)</tt>	Apply boxcar smoothing to data in array sample.
<tt style='background-color:#E8E8E8;'> realtime. <a href=' /realtime/signal.py#L267'>tauc</a>(trace,width,rtmemory_list)</tt>	Calculate instantaneous period in a fixed window (tau_c).
<tt style='background-color:#E8E8E8;'> realtime. <a href=' /realtime/signal.py#L376'>mwpintegral</a>(trace,max_time,ref_time,mem_time)</tt>	Calculate mwp integral on a displacement trace.
<tt style='background-color:#E8E8E8;'> realtime. <a href=' /realtime/signal.py#L521'>calculate_mwp_mag</a>(peak,epicentral_distance)</tt>	Calculate mwp magnitude.
<tt style='background-color:#E8E8E8;'> realtime. <a href=' /realtime/signal.py#L542'>kurtosis</a>(trace,win,rtmemory_list)</tt>	Apply recursive kurtosis calculation on data.
<tt style='background-color:#E8E8E8;'> db. <a href=' /db/util.py#L18'>parse_mapping_data</a>(lines)</tt>	Parses a mapping file used by the indexer.
<tt style='background-color:#E8E8E8;'> db.Client <a href=' /db/client.py#L31'>__init__</a>(url,session,debug)</tt>	Initializes the client.
<tt style='background-color:#E8E8E8;'> db.Client <a href=' /db/client.py#L56'>get_network_ids</a>()</tt>	Fetches all possible network id's.
<tt style='background-color:#E8E8E8;'> db.Client <a href=' /db/client.py#L67'>get_station_ids</a>(network)</tt>	Fetches all possible station id's.
<tt style='background-color:#E8E8E8;'> db.Client <a href=' /db/client.py#L84'>get_location_ids</a>(network,station)</tt>	Fetches all possible location id's.
<tt style='background-color:#E8E8E8;'> db.Client <a href=' /db/client.py#L106'>get_channel_ids</a>(network,station,location)</tt>	Fetches all possible channel id's.
<tt style='background-color:#E8E8E8;'> db.Client <a href=' /db/client.py#L133'>get_endtimes</a>(network,station,location,channel)</tt>	Generates a list of last end times for each channel.
<tt style='background-color:#E8E8E8;'> db.Client <a href=' /db/client.py#L170'>get_waveform_path</a>(network,station,location,channel)</tt>	Generates a list of available waveform files.
<tt style='background-color:#E8E8E8;'> db.Client <a href=' /db/client.py#L222'>get_preview</a>(trace_ids,starttime,endtime,network)</tt>	Returns the preview trace.
<tt style='background-color:#E8E8E8;'> db.WaveformFileCrawler <a href=' /db/indexer.py#L35'>_update_or_insert</a>(dataset)</tt>	Add a new file into or modifies existing file in database.
<tt style='background-color:#E8E8E8;'> db.WaveformFileCrawler <a href=' /db/indexer.py#L106'>_delete</a>(path,file)</tt>	Remove a file or all files with a given path from the database.
<tt style='background-color:#E8E8E8;'> db.WaveformFileCrawler <a href=' /db/indexer.py#L141'>_select</a>(path)</tt>	Fetch entry from database.
<tt style='background-color:#E8E8E8;'> db.WaveformFileCrawler <a href=' /db/indexer.py#L172'>has_pattern</a>(file)</tt>	Checks if the file name fits to the preferred file pattern.
<tt style='background-color:#E8E8E8;'> db.WaveformFileCrawler <a href=' /db/indexer.py#L200'>_reset_walker</a>()</tt>	Resets the crawler parameters.
<tt style='background-color:#E8E8E8;'> db.WaveformFileCrawler <a href=' /db/indexer.py#L255'>_step_walker</a>()</tt>	Steps current walker object to the next directory.
<tt style='background-color:#E8E8E8;'> db.WaveformFileCrawler <a href=' /db/indexer.py#L324'>iterate</a>()</tt>	Handles exactly one directory.
<tt style='background-color:#E8E8E8;'> db.BandpassPreviewFeature <a href=' /db/feature.py#L23'>process</a>(trace)</tt>	Bandpass filter (freqmin=0 1 freqmax=20 0) all trace previews.
<tt style='background-color:#E8E8E8;'> db.MinMaxAmplitudeFeature <a href=' /db/feature.py#L38'>process</a>(trace)</tt>	Generates statistics about the amplitude values.
<tt style='background-color:#E8E8E8;'> db.scripts.MyHandler <a href=' /db/scripts/indexer.py#L53'>do_GET</a>()</tt>	Respond to a get request.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/freqattributes.py#L31'>spectrum</a>(data,win,nfft,n1)</tt>	Spectrum of a signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/freqattributes.py#L61'>welch</a>(data,win,nfft,l)</tt>	Spectrum of a signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/freqattributes.py#L95'>central_frequency</a>(data,fs,smoothie,fk)</tt>	Central frequency of a signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/freqattributes.py#L142'>central_frequency_unwindowed</a>(data,fs)</tt>	Central frequency of a signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/freqattributes.py#L167'>bandwidth</a>(data,fs,smoothie,fk)</tt>	Bandwidth of a signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/freqattributes.py#L224'>dominant_period</a>(data,fs,smoothie,fk)</tt>	Predominant period of a signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/freqattributes.py#L280'>log_spaced_filterbank_matrix</a>(p,n,fs,w)</tt>	Matrix for a log-spaced filterbank.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/freqattributes.py#L331'>log_cepstrum</a>(data,fs,nc,p)</tt>	Cepstrum of a signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/freqattributes.py#L374'>peak_ground_motion</a>(data,delta,freq,damp)</tt>	Peak ground motion parameters compute the maximal displacement velocity acceleration and the peak.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/konnoohmachismoothing.py#L30'>konno_ohmachi_smoothing_window</a>(frequencies,center_frequency,bandwidth,normalize)</tt>	Returns the konno & ohmachi smoothing window for every frequency in frequencies.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/konnoohmachismoothing.py#L105'>calculate_smoothing_matrix</a>(frequencies,bandwidth,normalize)</tt>	Calculates a len frequencies x len frequencies matrix with the konno & ohmachi window for each frequency as the center frequency.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/konnoohmachismoothing.py#L143'>konno_ohmachi_smoothing</a>(spectra,frequencies,bandwidth,count)</tt>	Smooths a matrix containing one spectra per row with the konno-ohmachi smoothing window.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/invsim.py#L153'>cosine_sac_taper</a>(freqs,flimit)</tt>	Generate a cosine flank frequency domain taper similar to the one sac applies before instrument response deconvolution.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/invsim.py#L216'>evalresp_for_frequencies</a>(t_samp,frequencies,filename,date)</tt>	Use the evalresp library to extract instrument response information from a seed resp-file for the specified frequencies.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/invsim.py#L297'>evalresp</a>(t_samp,nfft,filename,date)</tt>	Use the evalresp library to extract instrument response information from a seed resp-file.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/invsim.py#L339'>corn_freq_2_paz</a>(fc,damp)</tt>	Convert corner frequency and damping to poles and zeros 2 zeros at.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/invsim.py#L353'>paz_to_freq_resp</a>(poles,zeros,scale_fac,t_samp)</tt>	Convert poles and zeros paz to frequency response the output.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/invsim.py#L386'>waterlevel</a>(spec,wlev)</tt>	Return the absolute spectral value corresponding to db wlev in spectrum spec.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/invsim.py#L397'>invert_spectrum</a>(spec,wlev)</tt>	Invert spectrum and shrink values under water-level of max spec amplitude.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/invsim.py#L606'>paz_2_amplitude_value_of_freq_resp</a>(paz,freq)</tt>	Returns amplitude at one frequency for the given poles and zeros.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/invsim.py#L634'>estimate_magnitude</a>(paz,amplitude,timespan,h_dist)</tt>	Estimates local magnitude from poles and zeros or full response of given instrument the peak to peak amplitude and the time span from peak to peak.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/invsim.py#L706'>estimate_wood_anderson_amplitude</a>(paz,amplitude,timespan)</tt>	Convert amplitude in counts measured of instrument with given poles and zeros information for use in :func estimate_magnitude.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/invsim.py#L730'>estimate_wood_anderson_amplitude_using_response</a>(response,amplitude,timespan)</tt>	Convert amplitude in counts measured of instrument with given response information for use in :func estimate_magnitude.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/util.py#L27'>util_geo_km</a>(orig_lon,orig_lat,lon,lat)</tt>	Transform lon lat to km with reference to orig_lon and orig_lat on the elliptic earth.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/util.py#L54'>util_lon_lat</a>(orig_lon,orig_lat,x,y)</tt>	Transform x y [km] to decimal degree in reference to orig_lon and orig_lat >>> util_lon_lat(12.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/util.py#L84'>next_pow_2</a>(i)</tt>	Find the next power of two.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/util.py#L98'>prev_pow_2</a>(i)</tt>	Find the previous power of two.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/util.py#L111'>nearest_pow_2</a>(x)</tt>	Finds the nearest integer that is a power of 2.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/util.py#L126'>enframe</a>(x,win,inc)</tt>	Splits the vector up into overlapping frames beginning at increments of inc.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/util.py#L160'>smooth</a>(x,smoothie)</tt>	Smooths a given signal by computing a central moving average.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/util.py#L211'>rdct</a>(x,n)</tt>	Computes discrete cosine transform of given signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/util.py#L234'>az2baz2az</a>(angle)</tt>	Helper function to convert from azimuth to backazimuth or from backazimuth to azimuth.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/util.py#L252'>_npts2nfft</a>(npts,smart)</tt>	Calculates number of points for fft from number of samples in trace.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/_sosfilt.py#L25'>_cplxreal</a>(z,tol)</tt>	Split into complex and real parts combining conjugate pairs.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/_sosfilt.py#L129'>_nearest_real_complex_idx</a>(fro,to,which)</tt>	Get the next closest real or complex element based on distance.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/_sosfilt.py#L139'>_zpk2sos</a>(z,p,k,pairing)</tt>	Return second-order sections from zeros poles and gain of a system parameters.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/_sosfilt.py#L403'>_sosfilt</a>(sos,x,axis,zi)</tt>	Filter data along one dimension using cascaded second-order sections filter a data sequence x, using a digital iir filter defined by.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/polarization.py#L26'>eigval</a>(datax,datay,dataz,fk)</tt>	Polarization attributes of a signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/polarization.py#L128'>flinn</a>(stream,noise_thres)</tt>	Computes the azimuth incidence rectilinearity and planarity after the eigenstructure decomposition method of [flinn1965b]_.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cpxtrace.py#L193'>instantaneous_frequency</a>(data,sampling_rate)</tt>	Simple function to estimate the instantaneous frequency based on the derivative of the data and the analytical hilbert data.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/polarization.py#L195'>vidale_adapt</a>(stream,noise_thres,fs,flow)</tt>	Adaptive window polarization analysis after [vidale1986]_ with the modification of adapted analysis window estimated by estimating the.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/polarization.py#L315'>particle_motion_odr</a>(stream,noise_thres)</tt>	Computes the orientation of the particle motion vector based on an orthogonal regression algorithm.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/polarization.py#L389'>_get_s_point</a>(stream,stime,etime)</tt>	Function for computing the trace dependent start time in samples.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/polarization.py#L435'>polarization_analysis</a>(stream,win_len,win_frac,frqlow)</tt>	Method carrying out polarization analysis with the [flinn1965b]_, [jurkevics1988]_, particlemotion or [vidale1986]_ algorithm.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/spectral_estimation.py#L56'>fft_taper</a>(data)</tt>	Cosine taper 10 percent at each end (like done by [mcnamara2004]_).
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/spectral_estimation.py#L67'>welch_taper</a>(data)</tt>	Applies a welch window to data see.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/spectral_estimation.py#L84'>welch_window</a>(n)</tt>	Return a welch window for data of length n.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L224'>__init__</a>(stats,metadata,skip_on_gaps,db_bins)</tt>	Initialize the ppsd object setting all fixed information on the station that should not change afterwards to guarantee consistent spectral.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L398'>len</a>()</tt>	Trace length for one psd segment.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L436'>period_bin_centers</a>()</tt>	Return centers of period bins geometric mean of left and right edge of period smoothing ranges.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L444'>period_xedges</a>()</tt>	Returns edges of period histogram bins one element longer than number of bins.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L455'>period_bin_left_edges</a>()</tt>	Returns left edges of period bins same length as number of bins.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L465'>period_bin_right_edges</a>()</tt>	Returns right edges of period bins same length as number of bins.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L509'>_setup_period_binning</a>(period_smoothing_width_octaves,period_step_octaves,period_limits)</tt>	Set up period binning.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L565'>__sanity_check</a>(trace)</tt>	Checks if trace is compatible for use in the current ppsd instance.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L578'>__insert_processed_data</a>(utcdatetime,spectrum)</tt>	Inserts the given utcdatetime and processed/octave-binned spectrum at the right position in the lists keeping the order intact.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L594'>__insert_gap_times</a>(stream)</tt>	Gets gap information of stream and adds the encountered gaps to the gap list of the ppsd instance.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L604'>__insert_data_times</a>(stream)</tt>	Gets gap information of stream and adds the encountered gaps to the gap list of the ppsd instance.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L615'>__check_time_present</a>(utcdatetime)</tt>	Checks if the given utcdatetime is already part of the current ppsd instance.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L648'>add</a>(stream,verbose)</tt>	Process all traces with compatible information and add their spectral estimates to the histogram containing the probabilistic psd.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L713'>__process</a>(tr)</tt>	Processes a segment of data and save the psd information.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L841'>_stack_selection</a>(starttime,endtime,time_of_weekday,year)</tt>	For details on restrictions see :meth calculate_histogram.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L904'>calculate_histogram</a>(starttime,endtime,time_of_weekday,year)</tt>	Calculate and set current 2d histogram stack optionally with start- and endtime and time of day restrictions.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L1114'>get_percentile</a>(percentile)</tt>	Returns periods and approximate psd values for given percentile value.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L1140'>get_mode</a>()</tt>	Returns periods and mode psd values (i e for each frequency the psd.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L1153'>get_mean</a>()</tt>	Returns periods and mean psd values (i e for each frequency the mean.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L1167'>save_npz</a>(filename)</tt>	Saves the ppsd as a compressed numpy binary npz format.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L1179'>load_npz</a>(filename,metadata)</tt>	Load previously computed ppsd results.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L1237'>_add_npz</a>(filename)</tt>	See :meth ppsd add_npz().
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L1283'>plot</a>(filename,show_coverage,show_histogram,show_percentiles)</tt>	Plot the 2d histogram of the current ppsd.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L1464'>_plot_histogram</a>(fig,draw,filename)</tt>	Reuse a previously created figure returned by :meth plot(show=false) and plot the current histogram stack (pre-computed using.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L1533'>plot_coverage</a>(filename)</tt>	Plot the data coverage of the histogram of the current ppsd.
<tt style='background-color:#E8E8E8;'> signal.PPSD <a href=' /signal/spectral_estimation.py#L1557'>__plot_coverage</a>(ax)</tt>	Helper function to plot coverage into given axes.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/spectral_estimation.py#L1598'>get_nlnm</a>()</tt>	Returns periods and psd values for the new low noise model.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/spectral_estimation.py#L1609'>get_nhnm</a>()</tt>	Returns periods and psd values for the new high noise model.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cpxtrace.py#L29'>envelope</a>(data)</tt>	Envelope of a signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/filter.py#L215'>remez_fir</a>(data,freqmin,freqmax,df)</tt>	The minimax optimal bandpass using remez algorithm experimental.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/filter.py#L288'>lowpass_fir</a>(data,freq,df,winlen)</tt>	Fir-lowpass filter experimental.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/filter.py#L330'>integer_decimation</a>(data,decimation_factor)</tt>	Downsampling by applying a simple integer decimation.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/filter.py#L353'>lowpass_cheby_2</a>(data,freq,df,maxorder)</tt>	Cheby2-lowpass filter filter data by passing data only below a certain frequency.
<tt style='background-color:#E8E8E8;'> signal.MSEEDMetadata <a href=' /signal/quality_control.py#L117'>__init__</a>(files,id,prefix,starttime)</tt>	Reads the miniseed files and extracts the data quality metrics.
<tt style='background-color:#E8E8E8;'> signal.MSEEDMetadata <a href=' /signal/quality_control.py#L213'>_get_gaps_and_overlaps</a>()</tt>	Function to get all gaps and overlaps in the user specified or forced window.
<tt style='background-color:#E8E8E8;'> signal.MSEEDMetadata <a href=' /signal/quality_control.py#L325'>number_of_records</a>()</tt>	Number of records across files before slicing.
<tt style='background-color:#E8E8E8;'> signal.MSEEDMetadata <a href=' /signal/quality_control.py#L332'>number_of_samples</a>()</tt>	Number of samples across files.
<tt style='background-color:#E8E8E8;'> signal.MSEEDMetadata <a href=' /signal/quality_control.py#L339'>_extract_mseed_stream_stats</a>()</tt>	Small function to collects the mseed stats.
<tt style='background-color:#E8E8E8;'> signal.MSEEDMetadata <a href=' /signal/quality_control.py#L350'>_extract_mseed_stream_metadata</a>()</tt>	Collect information from the miniseed headers.
<tt style='background-color:#E8E8E8;'> signal.MSEEDMetadata <a href=' /signal/quality_control.py#L449'>_compute_sample_metrics</a>()</tt>	Computes metrics on samples contained in the specified time window.
<tt style='background-color:#E8E8E8;'> signal.MSEEDMetadata <a href=' /signal/quality_control.py#L485'>_compute_continuous_seg_sample_metrics</a>()</tt>	Computes metrics on the samples within each continuous segment.
<tt style='background-color:#E8E8E8;'> signal.MSEEDMetadata <a href=' /signal/quality_control.py#L540'>_parse_c_stats</a>(tr)</tt>	:param tr custom dictionary with start end data and sampling_rate.
<tt style='background-color:#E8E8E8;'> signal.MSEEDMetadata <a href=' /signal/quality_control.py#L574'>get_json_meta</a>(validate)</tt>	Serialize the meta dictionary to json.
<tt style='background-color:#E8E8E8;'> signal.MSEEDMetadata <a href=' /signal/quality_control.py#L591'>validate_qc_metrics</a>(qc_metrics)</tt>	Validate the passed metrics against the json schema.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/regression.py#L23'>linear_regression</a>(xdata,ydata,weights,p0)</tt>	Use linear least squares to fit a function f to data.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cross_correlation.py#L36'>_pad_zeros</a>(a,num)</tt>	Pad num zeros at both sides of array a.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cross_correlation.py#L42'>_xcorr_padzeros</a>(a,b,shift,domain)</tt>	Cross-correlation using scipy with mode='valid' and precedent zero padding.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cross_correlation.py#L61'>_xcorr_slice</a>(a,b,shift,domain)</tt>	Cross-correlation using scipy with mode='full' and subsequent slicing.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cross_correlation.py#L79'>correlate</a>(a,b,shift,demean)</tt>	Cross-correlation of signals a and b with specified maximal shift.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cross_correlation.py#L172'>xcorr</a>(tr1,tr2,shift_len,full_xcorr)</tt>	Cross correlation of tr1 and tr2 in the time domain using window_len.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cross_correlation.py#L255'>xcorr_3c</a>(st1,st2,shift_len,components)</tt>	Calculates the cross correlation on each of the specified components separately stacks them together and estimates the maximum and shift of.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cross_correlation.py#L316'>xcorr_max</a>(fct,abs_max)</tt>	Return shift and value of the maximum of the cross-correlation function.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cross_correlation.py#L355'>xcorr_pick_correction</a>(pick1,trace1,pick2,trace2)</tt>	Calculate the correction for the differential pick time determined by cross correlation of the waveforms in narrow windows around the pick times.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cross_correlation.py#L568'>templates_max_similarity</a>(st,time,streams_templates)</tt>	Compares all event templates in the streams_templates list of streams against the given stream around the time of the suspected event.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L31'>cwt</a>(st,dt,w0,fmin)</tt>	Continuous wavelet transformation in the frequency domain.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L85'>tfem</a>(st1,st2,dt,fmin)</tt>	Time frequency envelope misfit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L149'>tfpm</a>(st1,st2,dt,fmin)</tt>	Time frequency phase misfit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L213'>tem</a>(st1,st2,dt,fmin)</tt>	Time-dependent envelope misfit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L277'>tpm</a>(st1,st2,dt,fmin)</tt>	Time-dependent phase misfit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L342'>fem</a>(st1,st2,dt,fmin)</tt>	Frequency-dependent envelope misfit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L407'>fpm</a>(st1,st2,dt,fmin)</tt>	Frequency-dependent phase misfit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L472'>em</a>(st1,st2,dt,fmin)</tt>	Single valued envelope misfit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L536'>pm</a>(st1,st2,dt,fmin)</tt>	Single valued phase misfit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L601'>tfeg</a>(st1,st2,dt,fmin)</tt>	Time frequency envelope goodness-of-fit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L634'>tfpg</a>(st1,st2,dt,fmin)</tt>	Time frequency phase goodness-of-fit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L667'>teg</a>(st1,st2,dt,fmin)</tt>	Time-dependent envelope goodness-of-fit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L700'>tpg</a>(st1,st2,dt,fmin)</tt>	Time-dependent phase goodness-of-fit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L733'>feg</a>(st1,st2,dt,fmin)</tt>	Frequency-dependent envelope goodness-of-fit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L766'>fpg</a>(st1,st2,dt,fmin)</tt>	Frequency-dependent phase goodness-of-fit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L799'>eg</a>(st1,st2,dt,fmin)</tt>	Single valued envelope goodness-of-fit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L830'>pg</a>(st1,st2,dt,fmin)</tt>	Single valued phase goodness-of-fit.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L861'>plot_tf_misfits</a>(st1,st2,dt,t0)</tt>	Plot all time frequency misfits and the time series in one plot per component.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L1129'>plot_tf_gofs</a>(st1,st2,dt,t0)</tt>	Plot all time frequency goodness-of-fits and the time series in one plot per component.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/tf_misfit.py#L1389'>plot_tfr</a>(st,dt,t0,fmin)</tt>	Plot time frequency representation spectrum and time series of the signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/differentiate_and_integrate.py#L21'>integrate_cumtrapz</a>(data,dx)</tt>	Performs first order integration of data using the trapezoidal rule.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/differentiate_and_integrate.py#L36'>integrate_spline</a>(data,dx,k)</tt>	Integrate by generating an interpolating spline and integrating that.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/detrend.py#L20'>simple</a>(data)</tt>	Detrend signal simply by subtracting a line through the first and last.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/detrend.py#L64'>polynomial</a>(data,order,plot)</tt>	Removes a polynomial trend from the data.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/detrend.py#L123'>spline</a>(data,order,dspline,plot)</tt>	Remove a trend by fitting splines.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/trigger.py#L70'>recursive_sta_lta_py</a>(a,nsta,nlta)</tt>	Recursive sta/lta written in python.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/trigger.py#L114'>carl_sta_trig</a>(a,nsta,nlta,ratio)</tt>	Computes the carlstatrig characteristic function.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/trigger.py#L169'>classic_sta_lta</a>(a,nsta,nlta)</tt>	Computes the standard sta/lta from a given input array a the length of.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/trigger.py#L201'>classic_sta_lta_py</a>(a,nsta,nlta)</tt>	Computes the standard sta/lta from a given input array a the length of.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/trigger.py#L300'>trigger_onset</a>(charfct,thres1,thres2,max_len)</tt>	Calculate trigger on and off times.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/trigger.py#L380'>pk_baer</a>(reltrc,samp_int,tdownmax,tupevent)</tt>	Wrapper for p-picker routine by m baer schweizer erdbebendienst.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/trigger.py#L420'>ar_pick</a>(a,b,c,samp_rate)</tt>	Pick p and s arrivals with an ar-aic + sta/lta algorithm.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/trigger.py#L489'>plot_trigger</a>(trace,cft,thr_on,thr_off)</tt>	Plot characteristic function of trigger along with waveform data and trigger on/off from given thresholds.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/trigger.py#L535'>coincidence_trigger</a>(trigger_type,thr_on,thr_off,stream)</tt>	Perform a network coincidence trigger.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/array_analysis.py#L36'>array_rotation_strain</a>(subarray,ts1,ts2,ts3)</tt>	This routine calculates the best-fitting rigid body rotation and uniform strain as functions of time and their formal errors given.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/array_analysis.py#L608'>get_geometry</a>(stream,coordsys,return_center,verbose)</tt>	Method to calculate the array geometry and the center coordinates in km.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/array_analysis.py#L675'>get_timeshift</a>(geometry,sll_x,sll_y,sl_s)</tt>	Returns timeshift table for given array geometry.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/array_analysis.py#L707'>get_spoint</a>(stream,stime,etime)</tt>	Calculates start and end offsets relative to stime and etime for each trace in stream in samples.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/array_analysis.py#L735'>array_transff_wavenumber</a>(coords,klim,kstep,coordsys)</tt>	Returns array transfer function as a function of wavenumber difference :type coords numpy.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/array_analysis.py#L779'>array_transff_freqslowness</a>(coords,slim,sstep,fmin)</tt>	Returns array transfer function as a function of slowness difference and frequency.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/array_analysis.py#L837'>dump</a>(pow_map,apow_map,i)</tt>	Example function to use with store kwarg in :func ~obspy.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/array_analysis.py#L846'>array_processing</a>(stream,win_len,win_frac,sll_x)</tt>	Method for seismic-array-beamforming/fk-analysis/capon.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/hoctavbands.py#L28'>sonogram</a>(data,fs,fc1,nofb)</tt>	Sonogram of a signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/interpolation.py#L22'>_validate_parameters</a>(data,old_start,old_dt,new_start)</tt>	Validates the parameters for various interpolation functions.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/interpolation.py#L45'>interpolate_1d</a>(data,old_start,old_dt,new_start)</tt>	Wrapper around some scipy interpolation functions.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/interpolation.py#L101'>weighted_average_slopes</a>(data,old_start,old_dt,new_start)</tt>	Implements the weighted average slopes interpolation scheme proposed in [wiggins1976]_ for evenly sampled data.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/interpolation.py#L183'>lanczos_interpolation</a>(data,old_start,old_dt,new_start)</tt>	Function performing lanczos resampling see https //en.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/interpolation.py#L312'>calculate_lanczos_kernel</a>(x,a,window)</tt>	Helper function to get the actually used kernel for a specific value of a.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/interpolation.py#L359'>plot_lanczos_windows</a>(a,filename)</tt>	Helper function producing a plot of all available tapers of the sinc function and their response for the lanczos interpolation.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cpxtrace.py#L60'>normalized_envelope</a>(data,fs,smoothie,fk)</tt>	Normalized envelope of a signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cpxtrace.py#L136'>centroid</a>(data,fk)</tt>	Centroid time of a signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cpxtrace.py#L193'>instantaneous_frequency</a>(data,fs,fk)</tt>	Instantaneous frequency of a signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/cpxtrace.py#L264'>instantaneous_bandwidth</a>(data,fs,fk)</tt>	Instantaneous bandwidth of a signal.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/rotate.py#L29'>rotate_ne_rt</a>(n,e,ba)</tt>	Rotates horizontal components of a seismogram.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/rotate.py#L56'>rotate_rt_ne</a>(n,e,ba)</tt>	Rotates horizontal components of a seismogram.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/rotate.py#L70'>rotate_zne_lqt</a>(z,n,e,ba)</tt>	Rotates all components of a seismogram.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/rotate.py#L112'>rotate_lqt_zne</a>(l,q,t,ba)</tt>	Rotates all components of a seismogram.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/rotate.py#L134'>_dip_azimuth2zse_base_vector</a>(dip,azimuth)</tt>	Helper function converting a vector described with azimuth and dip of unit length to a vector in the zse vertical south east base.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/rotate.py#L167'>rotate2zne</a>(data_1,azimuth_1,dip_1,data_2)</tt>	Rotates an arbitrarily oriented three-component vector to zne.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/calibration.py#L34'>rel_calib_stack</a>(st1,st2,calib_file,window_len)</tt>	Method for relative calibration of sensors using a sensor with known.
<tt style='background-color:#E8E8E8;'> signal. <a href=' /signal/calibration.py#L142'>_calc_resp</a>(calfile,nfft,sampfreq)</tt>	Calculate transfer function of known system.
<tt style='background-color:#E8E8E8;'> clients. <a href=' /clients/httpproxy.py#L26'>get_proxy_tuple</a>()</tt>	Return system http proxy as a urlparse tuple or () if unset.
<tt style='background-color:#E8E8E8;'> clients. <a href=' /clients/httpproxy.py#L40'>valid_address</a>(addr)</tt>	Verify that an ip/port tuple is valid.
<tt style='background-color:#E8E8E8;'> clients. <a href=' /clients/httpproxy.py#L49'>http_proxy_connect</a>(address,proxy,auth)</tt>	Establish a socket connection through an http proxy.
<tt style='background-color:#E8E8E8;'> clients.RemoteBaseClient <a href=' /clients/base.py#L106'>__init__</a>(debug,timeout)</tt>	Base class for all remote mixin classes.
<tt style='background-color:#E8E8E8;'> clients.RemoteBaseClient <a href=' /clients/base.py#L118'>get_service_version</a>()</tt>	Return a semantic version number of the remote service as a string.
<tt style='background-color:#E8E8E8;'> clients.HTTPClient <a href=' /clients/base.py#L160'>_handle_requests_http_error</a>(r)</tt>	Error handling for the http errors.
<tt style='background-color:#E8E8E8;'> clients.HTTPClient <a href=' /clients/base.py#L176'>_download</a>(url,params,filename,data)</tt>	Download the url with get or post and the chosen parameters.
<tt style='background-color:#E8E8E8;'> clients.WaveformClient <a href=' /clients/base.py#L261'>get_waveforms</a>()</tt>	Returns a stream.
<tt style='background-color:#E8E8E8;'> clients.EventClient <a href=' /clients/base.py#L295'>get_events</a>()</tt>	Returns a catalog.
<tt style='background-color:#E8E8E8;'> clients.StationClient <a href=' /clients/base.py#L354'>get_stations</a>()</tt>	Returns an inventory.
<tt style='background-color:#E8E8E8;'> clients.seedlink.EasySeedLinkClient <a href=' /clients/seedlink/easyseedlink.py#L173'>connect</a>()</tt>	Connect to the seedlink server.
<tt style='background-color:#E8E8E8;'> clients.seedlink.EasySeedLinkClient <a href=' /clients/seedlink/easyseedlink.py#L181'>get_info</a>(level)</tt>	Send a seedlink info command and retrieve response.
<tt style='background-color:#E8E8E8;'> clients.seedlink.EasySeedLinkClient <a href=' /clients/seedlink/easyseedlink.py#L226'>capabilities</a>()</tt>	The server's capabilities parsed from info capabilities cached.
<tt style='background-color:#E8E8E8;'> clients.seedlink.EasySeedLinkClient <a href=' /clients/seedlink/easyseedlink.py#L254'>has_capability</a>(capability)</tt>	Check if the seedlink server has a certain capability.
<tt style='background-color:#E8E8E8;'> clients.seedlink.EasySeedLinkClient <a href=' /clients/seedlink/easyseedlink.py#L268'>has_info_capability</a>(capability)</tt>	A shortcut for checking for info capabilities.
<tt style='background-color:#E8E8E8;'> clients.seedlink.EasySeedLinkClient <a href=' /clients/seedlink/easyseedlink.py#L291'>_send_and_recv</a>(bytes_,stop_on)</tt>	Send a command to the server and read the response.
<tt style='background-color:#E8E8E8;'> clients.seedlink.EasySeedLinkClient <a href=' /clients/seedlink/easyseedlink.py#L334'>_get_cat</a>()</tt>	Send the cat command to a server and receive the answer.
<tt style='background-color:#E8E8E8;'> clients.seedlink.EasySeedLinkClient <a href=' /clients/seedlink/easyseedlink.py#L351'>select_stream</a>(net,station,selector)</tt>	Select a stream for data transfer.
<tt style='background-color:#E8E8E8;'> clients.seedlink.EasySeedLinkClient <a href=' /clients/seedlink/easyseedlink.py#L382'>run</a>()</tt>	Start streaming data from the seedlink server.
<tt style='background-color:#E8E8E8;'> clients.seedlink.EasySeedLinkClient <a href=' /clients/seedlink/easyseedlink.py#L428'>close</a>()</tt>	Close the seedlink connection.
<tt style='background-color:#E8E8E8;'> clients.seedlink.EasySeedLinkClient <a href=' /clients/seedlink/easyseedlink.py#L446'>on_terminate</a>()</tt>	Callback for handling connection termination.
<tt style='background-color:#E8E8E8;'> clients.seedlink.EasySeedLinkClient <a href=' /clients/seedlink/easyseedlink.py#L460'>on_seedlink_error</a>()</tt>	Callback for handling seedlink errors.
<tt style='background-color:#E8E8E8;'> clients.seedlink.EasySeedLinkClient <a href=' /clients/seedlink/easyseedlink.py#L471'>on_data</a>(trace)</tt>	Callback for handling the reception of waveform data.
<tt style='background-color:#E8E8E8;'> clients.seedlink. <a href=' /clients/seedlink/easyseedlink.py#L483'>create_client</a>(server_url,on_data,on_seedlink_error,on_terminate)</tt>	Quickly create an easyseedlinkclient instance.
<tt style='background-color:#E8E8E8;'> clients.seedlink.Client <a href=' /clients/seedlink/basic_client.py#L43'>__init__</a>(server,port,timeout,debug)</tt>	Initializes the seedlink request client.
<tt style='background-color:#E8E8E8;'> clients.seedlink.Client <a href=' /clients/seedlink/basic_client.py#L53'>_connect</a>()</tt>	Open new connection to seedlink server.
<tt style='background-color:#E8E8E8;'> clients.seedlink.Client <a href=' /clients/seedlink/basic_client.py#L61'>get_waveforms</a>(network,station,location,channel)</tt>	Request waveform data from the seedlink server.
<tt style='background-color:#E8E8E8;'> clients.seedlink.Client <a href=' /clients/seedlink/basic_client.py#L131'>_packet_handler</a>(count,slpack)</tt>	Custom packet handler that accumulates all waveform packets in a stream.
<tt style='background-color:#E8E8E8;'> clients.seedlink.SLClient <a href=' /clients/seedlink/slclient.py#L110'>__init__</a>(loglevel,timeout)</tt>	Creates a new instance of slclient with the specified logging object.
<tt style='background-color:#E8E8E8;'> clients.seedlink.SLClient <a href=' /clients/seedlink/slclient.py#L132'>parse_cmd_line_args</a>(args)</tt>	Parses the command line arguments.
<tt style='background-color:#E8E8E8;'> clients.seedlink.SLClient <a href=' /clients/seedlink/slclient.py#L196'>initialize</a>()</tt>	Initializes this slclient.
<tt style='background-color:#E8E8E8;'> clients.seedlink.SLClient <a href=' /clients/seedlink/slclient.py#L224'>run</a>(packet_handler)</tt>	Start this slclient.
<tt style='background-color:#E8E8E8;'> clients.seedlink.SLClient <a href=' /clients/seedlink/slclient.py#L265'>packet_handler</a>(count,slpack)</tt>	Processes each packet received from the seedlinkconnection.
<tt style='background-color:#E8E8E8;'> clients.seedlink.SLClient <a href=' /clients/seedlink/slclient.py#L330'>print_usage</a>(concise)</tt>	Prints the usage message for this class.
<tt style='background-color:#E8E8E8;'> clients.seedlink.SLClient <a href=' /clients/seedlink/slclient.py#L342'>main</a>(cls,args)</tt>	Main method - creates and runs an slclient using the specified.
<tt style='background-color:#E8E8E8;'> clients.seedlink.SLPacket <a href=' /clients/seedlink/slpacket.py#L173'>get_string_payload</a>()</tt>	Get the miniseed payload parsed as string.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L122'>__init__</a>(timeout)</tt>	Creates a new instance of seedlinkconnection.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L149'>is_connected</a>(timeout)</tt>	Returns connection state of the connection socket.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L159'>get_state</a>()</tt>	Returns the slstate state object.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L167'>set_net_timeout</a>(netto)</tt>	Sets the network timeout seconds.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L175'>get_net_timeout</a>()</tt>	Returns the network timeout seconds.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L183'>set_keep_alive</a>(keepalive)</tt>	Sets interval to send keepalive/heartbeat seconds.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L191'>get_keep_alive</a>()</tt>	Returns the interval to send keepalive/heartbeat seconds.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L199'>set_net_delay</a>(netdly)</tt>	Sets the network reconnect delay seconds.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L207'>get_net_delay</a>()</tt>	Returns the network reconnect delay seconds.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L215'>set_sl_address</a>(sladdr)</tt>	Sets the host port of the seedlink server.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L229'>set_last_pkt_time</a>(lastpkttime)</tt>	Sets a specified start time for beginning of data transmission.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L238'>set_begin_time</a>(start_time_string)</tt>	Sets begin_time for initiation of continuous data transmission.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L250'>set_end_time</a>(end_time_string)</tt>	Sets end_time for termination of data transmission.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L262'>terminate</a>()</tt>	Sets terminate flag closes connection and clears state.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L268'>get_sl_address</a>()</tt>	Returns the host port of the seedlink server.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L276'>get_streams</a>()</tt>	Returns a copy of the vector of slnetstation objects.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L284'>get_info_string</a>()</tt>	Returns the results of the last info request.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L293'>check_slcd</a>()</tt>	Check this seedlinkconnection description has valid parameters.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L315'>read_stream_list</a>(streamfile,defselect)</tt>	Read a list of streams and selectors from a file and add them to the stream chain for configuring a multi-station connection.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L404'>parse_stream_list</a>(streamlist,defselect)</tt>	Parse a string of streams and selectors and add them to the stream chain for configuring a multi-station connection.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L473'>add_stream</a>(net,station,selectors_str,seqnum)</tt>	Add a new stream entry to the stream chain for the given net/station parameters.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L520'>set_uni_params</a>(selectors_str,seqnum,timestamp)</tt>	Set the parameters for a uni-station mode connection for the given slcd struct.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L555'>set_state_file</a>(statefile)</tt>	Set the state file and recover state.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L567'>recover_state</a>(statefile)</tt>	Recover the state file and put the sequence numbers and time stamps into the pre-existing stream chain entries.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L659'>save_state</a>(statefile)</tt>	Save all current sequence numbers and time stamps into the given state file.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L703'>do_terminate</a>()</tt>	Terminate the collection loop.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L714'>collect</a>()</tt>	Manage a connection to a seedlink server based on the values given in this seedlinkconnection and to collect data.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1027'>connect</a>()</tt>	Open a network socket connection to a seedlink server expects sladdr.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1092'>disconnect</a>()</tt>	Close the network socket associated with this connection.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1107'>close</a>()</tt>	Closes this seedlinkconnection by closing the network socket and saving the state to the statefile if it exists.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1121'>is_connected_impl</a>(sock,timeout)</tt>	Check a socket for write ability using select() time-out values are also passed seconds for the select() call.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1145'>send_data</a>(sendbytes,code,resplen)</tt>	Send bytes to the server this is only designed for small pieces of.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1188'>receive_data</a>(maxbytes,code)</tt>	Read bytes from the server.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1222'>say_hello</a>()</tt>	Send the hello command and attempt to parse the server version number from the returned string.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1264'>request_info</a>(info_level)</tt>	Add an info request to the seedlink connection description.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1279'>send_info_request</a>(info_level,verb_level)</tt>	Sends a request for the specified info level the verbosity level.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1303'>check_version</a>(version)</tt>	Checks server version number against a given specified value.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1320'>config_link</a>()</tt>	Configure/negotiate data stream s with the remote seedlink server.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1340'>negotiate_station</a>(curstream)</tt>	Negotiate a seedlink connection for a single station and issue the data command.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1463'>negotiate_uni_station</a>()</tt>	Negotiate a seedlink connection in uni-station mode and issue the data command.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1492'>negotiate_multi_station</a>()</tt>	Negotiate a seedlink connection using multi-station mode and issue the end action command.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SeedLinkConnection <a href=' /clients/seedlink/client/seedlinkconnection.py#L1558'>update_stream</a>(slpacket)</tt>	Update the appropriate stream chain entry given a mini-seed record.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SLState <a href=' /clients/seedlink/client/slstate.py#L93'>get_packet</a>()</tt>	Returns last received packet.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SLState <a href=' /clients/seedlink/client/slstate.py#L107'>packet_available</a>()</tt>	Check for full packet available to send.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SLState <a href=' /clients/seedlink/client/slstate.py#L119'>bytes_remaining</a>()</tt>	Return number of bytes remaining in receiving buffer.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SLState <a href=' /clients/seedlink/client/slstate.py#L128'>is_error</a>()</tt>	Check for seedlink error packet.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SLState <a href=' /clients/seedlink/client/slstate.py#L144'>is_end</a>()</tt>	Check for seedlink end packet.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SLState <a href=' /clients/seedlink/client/slstate.py#L159'>packet_is_info</a>()</tt>	Check for seedlink info packet.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SLState <a href=' /clients/seedlink/client/slstate.py#L175'>increment_send_pointer</a>()</tt>	Increments the send pointer by size of one packet.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SLState <a href=' /clients/seedlink/client/slstate.py#L182'>pack_data_buffer</a>()</tt>	Packs the buffer by removing all sent packets and shifting remaining bytes to beginning of buffer.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SLState <a href=' /clients/seedlink/client/slstate.py#L197'>append_bytes</a>(bytes_)</tt>	Appends bytes to the receive buffer after the last received data.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SLNetStation <a href=' /clients/seedlink/client/slnetstation.py#L40'>__init__</a>(net,station,selectors,seqnum)</tt>	Creates a new instance of slnetstation.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SLNetStation <a href=' /clients/seedlink/client/slnetstation.py#L65'>append_selectors</a>(new_selectors)</tt>	Appends a selectors string to the current selectors for this slnetstation.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SLNetStation <a href=' /clients/seedlink/client/slnetstation.py#L75'>get_selectors</a>()</tt>	Returns the selectors as an array of strings.
<tt style='background-color:#E8E8E8;'> clients.seedlink.client.SLNetStation <a href=' /clients/seedlink/client/slnetstation.py#L83'>get_sl_time_stamp</a>()</tt>	Returns the time stamp in seedlink string format.
<tt style='background-color:#E8E8E8;'> clients.earthworm. <a href=' /clients/earthworm/waveserver.py#L45'>get_numpy_type</a>(tpstr)</tt>	Given a tracebuf2 type string from header return appropriate numpy.
<tt style='background-color:#E8E8E8;'> clients.earthworm.TraceBuf2 <a href=' /clients/earthworm/waveserver.py#L62'>read_tb2</a>(tb2)</tt>	Reads single tracebuf2 packet from beginning of input byte array tb.
<tt style='background-color:#E8E8E8;'> clients.earthworm.TraceBuf2 <a href=' /clients/earthworm/waveserver.py#L78'>parse_header</a>(head)</tt>	Parse tracebuf header into class variables.
<tt style='background-color:#E8E8E8;'> clients.earthworm.TraceBuf2 <a href=' /clients/earthworm/waveserver.py#L101'>parse_data</a>(dat)</tt>	Parse tracebuf char array data into self data.
<tt style='background-color:#E8E8E8;'> clients.earthworm.TraceBuf2 <a href=' /clients/earthworm/waveserver.py#L113'>get_obspy_trace</a>()</tt>	Return class contents as obspy trace object.
<tt style='background-color:#E8E8E8;'> clients.earthworm. <a href=' /clients/earthworm/waveserver.py#L132'>send_sock_req</a>(server,port,req_str,timeout)</tt>	Sets up socket to server and port sends req_str.
<tt style='background-color:#E8E8E8;'> clients.earthworm. <a href=' /clients/earthworm/waveserver.py#L147'>get_sock_char_line</a>(sock,timeout)</tt>	Retrieves one newline terminated string from input open socket.
<tt style='background-color:#E8E8E8;'> clients.earthworm. <a href=' /clients/earthworm/waveserver.py#L172'>get_sock_bytes</a>(sock,nbytes,timeout)</tt>	Listens for nbytes from open socket.
<tt style='background-color:#E8E8E8;'> clients.earthworm. <a href=' /clients/earthworm/waveserver.py#L197'>get_menu</a>(server,port,scnl,timeout)</tt>	Return list of tanks on server.
<tt style='background-color:#E8E8E8;'> clients.earthworm. <a href=' /clients/earthworm/waveserver.py#L244'>read_wave_server_v</a>(server,port,scnl,start)</tt>	Reads data for specified time interval and scnl on specified waveserverv.
<tt style='background-color:#E8E8E8;'> clients.earthworm. <a href=' /clients/earthworm/waveserver.py#L290'>trace_bufs2obspy_stream</a>(tbuflist)</tt>	Returns obspy stream object from input list of tracebuf2 objects.
<tt style='background-color:#E8E8E8;'> clients.earthworm.Client <a href=' /clients/earthworm/client.py#L38'>__init__</a>(host,port,timeout,debug)</tt>	Initializes a earthworm wave server client.
<tt style='background-color:#E8E8E8;'> clients.earthworm.Client <a href=' /clients/earthworm/client.py#L49'>get_waveforms</a>(network,station,location,channel)</tt>	Retrieves waveform data from earthworm wave server and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> clients.earthworm.Client <a href=' /clients/earthworm/client.py#L122'>save_waveforms</a>(filename,network,station,location)</tt>	Writes a retrieved waveform directly into a file.
<tt style='background-color:#E8E8E8;'> clients.earthworm.Client <a href=' /clients/earthworm/client.py#L168'>get_availability</a>(network,station,location,channel)</tt>	Gets a list of data available on the server.
<tt style='background-color:#E8E8E8;'> clients.filesystem.Client <a href=' /clients/filesystem/sds.py#L71'>__init__</a>(sds_root,sds_type,format,fileborder_seconds)</tt>	Initialize a sds local filesystem client.
<tt style='background-color:#E8E8E8;'> clients.filesystem.Client <a href=' /clients/filesystem/sds.py#L119'>get_waveforms</a>(network,station,location,channel)</tt>	Read data from a local seiscomp data structure sds directory tree.
<tt style='background-color:#E8E8E8;'> clients.filesystem.Client <a href=' /clients/filesystem/sds.py#L201'>_get_filenames</a>(network,station,location,channel)</tt>	Get list of filenames for certain waveform and time span.
<tt style='background-color:#E8E8E8;'> clients.filesystem.Client <a href=' /clients/filesystem/sds.py#L253'>_get_filename</a>(network,station,location,channel)</tt>	Get filename for certain waveform.
<tt style='background-color:#E8E8E8;'> clients.filesystem.Client <a href=' /clients/filesystem/sds.py#L280'>get_availability_percentage</a>(network,station,location,channel)</tt>	Get percentage of available data.
<tt style='background-color:#E8E8E8;'> clients.filesystem.Client <a href=' /clients/filesystem/sds.py#L356'>_get_current_endtime</a>(network,station,location,channel)</tt>	Get time of last sample for given stream.
<tt style='background-color:#E8E8E8;'> clients.filesystem.Client <a href=' /clients/filesystem/sds.py#L418'>get_latency</a>(network,station,location,channel)</tt>	Get latency for given stream i e difference of current time and.
<tt style='background-color:#E8E8E8;'> clients.filesystem.Client <a href=' /clients/filesystem/sds.py#L453'>has_data</a>(network,station,location,channel)</tt>	Check if specified stream has any data.
<tt style='background-color:#E8E8E8;'> clients.filesystem.Client <a href=' /clients/filesystem/sds.py#L489'>get_all_nslc</a>(sds_type,datetime)</tt>	Return information on what streams are included in archive.
<tt style='background-color:#E8E8E8;'> clients.filesystem.Client <a href=' /clients/filesystem/sds.py#L542'>get_all_stations</a>(sds_type)</tt>	Return information on what stations are included in archive.
<tt style='background-color:#E8E8E8;'> clients.filesystem. <a href=' /clients/filesystem/sds.py#L586'>_wildcarded_except</a>(exclude)</tt>	Function factory for :mod re repl functions used in :func re sub,.
<tt style='background-color:#E8E8E8;'> clients.iris.Client <a href=' /clients/iris/client.py#L85'>__init__</a>(base_url,user,password,timeout)</tt>	Initializes the iris web service client.
<tt style='background-color:#E8E8E8;'> clients.iris.Client <a href=' /clients/iris/client.py#L107'>_fetch</a>(service,data,headers,param_list)</tt>	Send a http request via urllib2.
<tt style='background-color:#E8E8E8;'> clients.iris.Client <a href=' /clients/iris/client.py#L137'>_to_file_or_data</a>(filename,data,binary)</tt>	Either writes data into a file if filename is given or directly returns it.
<tt style='background-color:#E8E8E8;'> clients.iris.Client <a href=' /clients/iris/client.py#L175'>timeseries</a>(network,station,location,channel)</tt>	Low-level interface for timeseries web service of iris (http //service.
<tt style='background-color:#E8E8E8;'> clients.iris.Client <a href=' /clients/iris/client.py#L359'>resp</a>(network,station,location,channel)</tt>	Low-level interface for resp web service of iris (http //service.
<tt style='background-color:#E8E8E8;'> clients.iris.Client <a href=' /clients/iris/client.py#L453'>sacpz</a>(network,station,location,channel)</tt>	Low-level interface for sacpz web service of iris (http //service.
<tt style='background-color:#E8E8E8;'> clients.iris.Client <a href=' /clients/iris/client.py#L561'>distaz</a>(stalat,stalon,evtlat,evtlon)</tt>	Low-level interface for distaz web service of iris (http //service.
<tt style='background-color:#E8E8E8;'> clients.iris.Client <a href=' /clients/iris/client.py#L626'>flinnengdahl</a>(lat,lon,rtype)</tt>	Low-level interface for flinnengdahl web service of iris (http //service.
<tt style='background-color:#E8E8E8;'> clients.iris.Client <a href=' /clients/iris/client.py#L686'>traveltime</a>(model,phases,evdepth,distdeg)</tt>	Low-level interface for traveltime web service of iris (http //service.
<tt style='background-color:#E8E8E8;'> clients.iris.Client <a href=' /clients/iris/client.py#L832'>evalresp</a>(network,station,location,channel)</tt>	Low-level interface for evalresp web service of iris (http //service.
<tt style='background-color:#E8E8E8;'> clients.syngine.Client <a href=' /clients/syngine/client.py#L61'>__init__</a>(base_url,user_agent,debug,timeout)</tt>	Initializes a syngine client.
<tt style='background-color:#E8E8E8;'> clients.syngine.Client <a href=' /clients/syngine/client.py#L90'>get_model_info</a>(model_name)</tt>	Get some information about a particular model.
<tt style='background-color:#E8E8E8;'> clients.syngine.Client <a href=' /clients/syngine/client.py#L116'>get_available_models</a>()</tt>	Get information about all available velocity models.
<tt style='background-color:#E8E8E8;'> clients.syngine.Client <a href=' /clients/syngine/client.py#L122'>get_service_version</a>()</tt>	Get the service version of the remote syngine server.
<tt style='background-color:#E8E8E8;'> clients.syngine.Client <a href=' /clients/syngine/client.py#L229'>get_waveforms</a>(model,network,station,receiverlatitude)</tt>	Request waveforms using the syngine service.
<tt style='background-color:#E8E8E8;'> clients.syngine.Client <a href=' /clients/syngine/client.py#L404'>get_waveforms_bulk</a>(model,bulk,eventid,sourcelatitude)</tt>	Request waveforms for multiple receivers simultaneously.
<tt style='background-color:#E8E8E8;'> clients.arclink.Client <a href=' /clients/arclink/client.py#L107'>__init__</a>(user,host,port,password)</tt>	Initializes an arclink client.
<tt style='background-color:#E8E8E8;'> clients.arclink.Client <a href=' /clients/arclink/client.py#L389'>get_waveforms</a>(network,station,location,channel)</tt>	Retrieves waveform data via arclink and returns an obspy stream object.
<tt style='background-color:#E8E8E8;'> clients.arclink.Client <a href=' /clients/arclink/client.py#L488'>save_waveforms</a>(filename,network,station,location)</tt>	Writes a retrieved waveform directly into a file.
<tt style='background-color:#E8E8E8;'> clients.arclink.Client <a href=' /clients/arclink/client.py#L593'>get_routing</a>(network,station,starttime,endtime)</tt>	Get primary arclink host for given network/stations/time combination.
<tt style='background-color:#E8E8E8;'> clients.arclink.Client <a href=' /clients/arclink/client.py#L660'>_find_route</a>(routes,request_data)</tt>	Searches routing table for requested stream id and date/times.
<tt style='background-color:#E8E8E8;'> clients.arclink.Client <a href=' /clients/arclink/client.py#L695'>get_qc</a>(network,station,location,channel)</tt>	Retrieve qc information of arclink streams.
<tt style='background-color:#E8E8E8;'> clients.arclink.Client <a href=' /clients/arclink/client.py#L747'>get_metadata</a>(network,station,location,channel)</tt>	Returns poles zeros normalization factor and sensitivity and station coordinates for a single channel at a given time.
<tt style='background-color:#E8E8E8;'> clients.arclink.Client <a href=' /clients/arclink/client.py#L891'>get_paz</a>(network,station,location,channel)</tt>	Returns poles zeros normalization factor and sensitivity for a single channel at a given time.
<tt style='background-color:#E8E8E8;'> clients.arclink.Client <a href=' /clients/arclink/client.py#L961'>save_response</a>(filename,network,station,location)</tt>	Writes response information into a file.
<tt style='background-color:#E8E8E8;'> clients.arclink.Client <a href=' /clients/arclink/client.py#L1012'>get_inventory</a>(network,station,location,channel)</tt>	Returns information about the available networks and stations in that particular space/time region.
<tt style='background-color:#E8E8E8;'> clients.arclink.Client <a href=' /clients/arclink/client.py#L1328'>get_networks</a>(starttime,endtime,route)</tt>	Returns a dictionary of available networks within the given time span.
<tt style='background-color:#E8E8E8;'> clients.arclink.Client <a href=' /clients/arclink/client.py#L1347'>get_stations</a>(starttime,endtime,network,route)</tt>	Returns a dictionary of available stations in the given network s.
<tt style='background-color:#E8E8E8;'> clients.neic. <a href=' /clients/neic/util.py#L9'>asctime</a>()</tt>	Returns the current time as a string hh mm ss.
<tt style='background-color:#E8E8E8;'> clients.neic. <a href=' /clients/neic/util.py#L17'>ascdate</a>()</tt>	Returns the current date at yy/mm/dd.
<tt style='background-color:#E8E8E8;'> clients.neic. <a href=' /clients/neic/util.py#L25'>dsecs</a>(dt)</tt>	Given a timedelta object compute it as double seconds.
<tt style='background-color:#E8E8E8;'> clients.neic. <a href=' /clients/neic/util.py#L35'>get_property</a>(filename,key)</tt>	Given a property filename get the value of the given key.
<tt style='background-color:#E8E8E8;'> clients.neic.Client <a href=' /clients/neic/client.py#L58'>__init__</a>(host,port,timeout,debug)</tt>	Initializes access to a cwb queryserver.
<tt style='background-color:#E8E8E8;'> clients.neic.Client <a href=' /clients/neic/client.py#L72'>get_waveforms</a>(network,station,location,channel)</tt>	Gets a waveform for a specified net station location and channel from start time to end time.
<tt style='background-color:#E8E8E8;'> clients.neic.Client <a href=' /clients/neic/client.py#L130'>get_waveforms_nscl</a>(seedname,starttime,duration)</tt>	Gets a regular expression of channels from a start time for a duration in seconds.
<tt style='background-color:#E8E8E8;'> clients.fdsn.CustomRedirectHandler <a href=' /clients/fdsn/client.py#L58'>redirect_request</a>(req,fp,code,msg)</tt>	Copied and modified from the standard library.
<tt style='background-color:#E8E8E8;'> clients.fdsn.NoRedirectionHandler <a href=' /clients/fdsn/client.py#L88'>redirect_request</a>(req,fp,code,msg)</tt>	Copied and modified from the standard library.
<tt style='background-color:#E8E8E8;'> clients.fdsn.Client <a href=' /clients/fdsn/client.py#L139'>__init__</a>(base_url,major_versions,user,password)</tt>	Initializes an fdsn web service client.
<tt style='background-color:#E8E8E8;'> clients.fdsn.Client <a href=' /clients/fdsn/client.py#L264'>get_events</a>(starttime,endtime,minlatitude,maxlatitude)</tt>	Query the event service of the client.
<tt style='background-color:#E8E8E8;'> clients.fdsn.Client <a href=' /clients/fdsn/client.py#L406'>get_stations</a>(starttime,endtime,startbefore,startafter)</tt>	Query the station service of the fdsn client.
<tt style='background-color:#E8E8E8;'> clients.fdsn.Client <a href=' /clients/fdsn/client.py#L605'>get_waveforms</a>(network,station,location,channel)</tt>	Query the dataselect service of the client.
<tt style='background-color:#E8E8E8;'> clients.fdsn.Client <a href=' /clients/fdsn/client.py#L725'>_attach_responses</a>(st)</tt>	Helper method to fetch response via get_stations() and attach it to each trace in stream.
<tt style='background-color:#E8E8E8;'> clients.fdsn.Client <a href=' /clients/fdsn/client.py#L751'>get_waveforms_bulk</a>(bulk,quality,minimumlength,longestonly)</tt>	Query the dataselect service of the client bulk request.
<tt style='background-color:#E8E8E8;'> clients.fdsn.Client <a href=' /clients/fdsn/client.py#L903'>get_stations_bulk</a>(bulk,level,includerestricted,includeavailability)</tt>	Query the station service of the client bulk request.
<tt style='background-color:#E8E8E8;'> clients.fdsn.Client <a href=' /clients/fdsn/client.py#L1171'>help</a>(service)</tt>	Print a more extensive help for a given service.
<tt style='background-color:#E8E8E8;'> clients.fdsn.Client <a href=' /clients/fdsn/client.py#L1347'>_build_url</a>(service,resource_type,parameters)</tt>	Builds the correct url.
<tt style='background-color:#E8E8E8;'> clients.fdsn.Client <a href=' /clients/fdsn/client.py#L1362'>_discover_services</a>()</tt>	Automatically discovers available services.
<tt style='background-color:#E8E8E8;'> clients.fdsn.Client <a href=' /clients/fdsn/client.py#L1489'>get_webservice_version</a>(service)</tt>	Get full version information of webservice as a tuple of ints.
<tt style='background-color:#E8E8E8;'> clients.fdsn.Client <a href=' /clients/fdsn/client.py#L1517'>_get_webservice_versionstring</a>(service)</tt>	Get full version information of webservice as a string.
<tt style='background-color:#E8E8E8;'> clients.fdsn. <a href=' /clients/fdsn/client.py#L1525'>convert_to_string</a>(value)</tt>	Takes any value and converts it to a string compliant with the fdsn webservices.
<tt style='background-color:#E8E8E8;'> clients.fdsn. <a href=' /clients/fdsn/client.py#L1563'>build_url</a>(base_url,service,major_version,resource_type)</tt>	Url builder for the fdsn webservices.
<tt style='background-color:#E8E8E8;'> clients.fdsn. <a href=' /clients/fdsn/client.py#L1624'>download_url</a>(url,opener,timeout,headers)</tt>	Returns a pair of tuples.
<tt style='background-color:#E8E8E8;'> clients.fdsn. <a href=' /clients/fdsn/client.py#L1716'>parse_simple_xml</a>(xml_string)</tt>	Simple helper function for parsing the catalog and contributor availability files.
<tt style='background-color:#E8E8E8;'> clients.fdsn.WADLParser <a href=' /clients/fdsn/wadl_parser.py#L190'>_convert_boolean</a>(boolean_string)</tt>	Helper function for boolean value conversion.
<tt style='background-color:#E8E8E8;'> clients.fdsn.WADLParser <a href=' /clients/fdsn/wadl_parser.py#L218'>_xpath</a>(doc,expr)</tt>	Simple helper method for using xpaths with the default namespace.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.Domain <a href=' /clients/fdsn/mass_downloader/domain.py#L88'>get_query_parameters</a>()</tt>	Return the domain specific query parameters for the :meth ~obspy.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.Domain <a href=' /clients/fdsn/mass_downloader/domain.py#L109'>is_in_domain</a>(latitude,longitude)</tt>	Returns true/false depending on the point being in the domain.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.Station <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L97'>has_existing_or_downloaded_time_intervals</a>()</tt>	Returns true if any of the station's time intervals have status "downloaded" or "exists".
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.Station <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L112'>has_existing_time_intervals</a>()</tt>	Returns true if any of the station's time intervals already exist.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.Station <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L123'>remove_files</a>(logger,reason)</tt>	Delete all files under it only delete stuff that actually has been.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.Station <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L148'>stationxml_filename</a>(value)</tt>	Setter creating the directory for the file if it does not already exist.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.Station <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L161'>temporal_bounds</a>()</tt>	Return the temporal bounds for the station.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.Station <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L200'>prepare_stationxml_download</a>(stationxml_storage,logger)</tt>	Figure out what to download.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.Station <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L323'>prepare_mseed_download</a>(mseed_storage)</tt>	Loop through all channels of the station and distribute filenames and the current status of the channel.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.Station <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L350'>sanitize_downloads</a>(logger)</tt>	Should be run after the miniseed and stationxml downloads finished.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.Channel <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L397'>needs_station_file</a>()</tt>	Determine if the channel requires any station information.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.Channel <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L412'>temporal_bounds</a>()</tt>	Returns a tuple of the minimum start time and the maximum end time.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.ClientDownloadHelper <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L509'>prepare_mseed_download</a>()</tt>	Prepare each station for the miniseed downloading stage.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.ClientDownloadHelper <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L519'>filter_stations_based_on_minimum_distance</a>(existing_client_dl_helpers)</tt>	Removes stations until all stations have a certain minimum distance to each other.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.ClientDownloadHelper <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L624'>prepare_stationxml_download</a>()</tt>	Prepare each station for the stationxml downloading stage.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.ClientDownloadHelper <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L636'>download_stationxml</a>(threads)</tt>	Actually download the stationxml files.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.ClientDownloadHelper <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L758'>download_mseed</a>(chunk_size_in_mb,threads_per_client)</tt>	Actually download miniseed data.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.ClientDownloadHelper <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L883'>_remove_failed_and_ignored_stations</a>()</tt>	Removes all stations that have no time interval with either exists or downloaded status.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.ClientDownloadHelper <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L896'>sanitize_downloads</a>()</tt>	Should be run after the miniseed and stationxml downloads finished.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.ClientDownloadHelper <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L905'>_check_downloaded_data</a>()</tt>	Read the downloaded data set the proper status flags and remove data that does not meet the qc criteria.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.ClientDownloadHelper <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L1028'>discard_stations</a>(existing_client_dl_helpers)</tt>	Discard all stations part of any of the already existing client download helper instances.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.ClientDownloadHelper <a href=' /clients/fdsn/mass_downloader/download_helpers.py#L1050'>get_availability</a>()</tt>	Queries the current client for information on what stations are available given the spatial and temporal restrictions.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.MassDownloader <a href=' /clients/fdsn/mass_downloader/mass_downloader.py#L107'>download</a>(domain,restrictions,mseed_storage,stationxml_storage)</tt>	Launch the actual data download.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.MassDownloader <a href=' /clients/fdsn/mass_downloader/mass_downloader.py#L279'>_initialize_clients</a>()</tt>	Initialize all clients.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.Restrictions <a href=' /clients/fdsn/mass_downloader/restrictions.py#L262'>__iter__</a>()</tt>	Iterator yielding time intervals based on the chunklength and temporal settings.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader. <a href=' /clients/fdsn/mass_downloader/utils.py#L53'>download_stationxml</a>(client,client_name,bulk,filename)</tt>	Download all channels for a station in the already prepared bulk list.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader. <a href=' /clients/fdsn/mass_downloader/utils.py#L83'>download_and_split_mseed_bulk</a>(client,client_name,chunks,logger)</tt>	Downloads the channels of a list of stations in bulk saves it to a temporary folder and splits it at the record level to obtain the final.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader.SphericalNearestNeighbour <a href=' /clients/fdsn/mass_downloader/utils.py#L285'>spherical2cartesian</a>(data)</tt>	Converts a list of :class ~obspy fdsn download_status station.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader. <a href=' /clients/fdsn/mass_downloader/utils.py#L309'>filter_channel_priority</a>(channels,key,priorities)</tt>	This function takes a dictionary containing channels keys and returns a new one filtered with the given priorities list.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader. <a href=' /clients/fdsn/mass_downloader/utils.py#L340'>safe_delete</a>(filename)</tt>	"safely" delete a file it really just checks if it exists and if it is a.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader. <a href=' /clients/fdsn/mass_downloader/utils.py#L358'>get_stationxml_contents</a>(filename)</tt>	Really fast way to get all channels with a response in a stationxml file.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader. <a href=' /clients/fdsn/mass_downloader/utils.py#L411'>get_stationxml_filename</a>(str_or_fct,network,station,channels)</tt>	Helper function getting the filename of a stationxml file.
<tt style='background-color:#E8E8E8;'> clients.fdsn.mass_downloader. <a href=' /clients/fdsn/mass_downloader/utils.py#L477'>get_mseed_filename</a>(str_or_fct,network,station,location)</tt>	Helper function getting the filename of a miniseed file.
<tt style='background-color:#E8E8E8;'> clients.seishub. <a href=' /clients/seishub/client.py#L62'>_objectify_result_to_dicts</a>(root)</tt>	:type root :class lxml objectify objectifiedelement.
<tt style='background-color:#E8E8E8;'> clients.seishub.Client <a href=' /clients/seishub/client.py#L115'>__init__</a>(base_url,user,password,timeout)</tt>	Initializes the seishub web service client.
<tt style='background-color:#E8E8E8;'> clients.seishub.Client <a href=' /clients/seishub/client.py#L155'>ping</a>()</tt>	Ping the seishub server.
<tt style='background-color:#E8E8E8;'> clients.seishub.Client <a href=' /clients/seishub/client.py#L166'>test_auth</a>()</tt>	Test if authentication information is valid raises an exception if.
<tt style='background-color:#E8E8E8;'> clients.seishub.Client <a href=' /clients/seishub/client.py#L222'>_http_request</a>(url,method,xml_string,headers)</tt>	Send a http request via urllib2.
<tt style='background-color:#E8E8E8;'> clients.seishub._BaseRESTClient <a href=' /clients/seishub/client.py#L263'>get_resource</a>(resource_name,format)</tt>	Gets a resource.
<tt style='background-color:#E8E8E8;'> clients.seishub._BaseRESTClient <a href=' /clients/seishub/client.py#L281'>get_xml_resource</a>(resource_name)</tt>	Gets a xml resource.
<tt style='background-color:#E8E8E8;'> clients.seishub._BaseRESTClient <a href=' /clients/seishub/client.py#L293'>put_resource</a>(resource_name,xml_string,headers)</tt>	Puts a xml resource.
<tt style='background-color:#E8E8E8;'> clients.seishub._BaseRESTClient <a href=' /clients/seishub/client.py#L320'>delete_resource</a>(resource_name,headers)</tt>	Deletes a xml resource.
<tt style='background-color:#E8E8E8;'> clients.seishub._WaveformMapperClient <a href=' /clients/seishub/client.py#L351'>get_network_ids</a>()</tt>	Gets a list of network ids.
<tt style='background-color:#E8E8E8;'> clients.seishub._WaveformMapperClient <a href=' /clients/seishub/client.py#L362'>get_station_ids</a>(network)</tt>	Gets a list of station ids.
<tt style='background-color:#E8E8E8;'> clients.seishub._WaveformMapperClient <a href=' /clients/seishub/client.py#L379'>get_location_ids</a>(network,station)</tt>	Gets a list of location ids.
<tt style='background-color:#E8E8E8;'> clients.seishub._WaveformMapperClient <a href=' /clients/seishub/client.py#L398'>get_channel_ids</a>(network,station,location)</tt>	Gets a list of channel ids.
<tt style='background-color:#E8E8E8;'> clients.seishub._WaveformMapperClient <a href=' /clients/seishub/client.py#L420'>get_latency</a>(network,station,location,channel)</tt>	Gets a list of network latency values.
<tt style='background-color:#E8E8E8;'> clients.seishub._WaveformMapperClient <a href=' /clients/seishub/client.py#L444'>get_waveforms</a>(network,station,location,channel)</tt>	Gets a obspy stream object.
<tt style='background-color:#E8E8E8;'> clients.seishub._WaveformMapperClient <a href=' /clients/seishub/client.py#L545'>get_previews</a>(network,station,location,channel)</tt>	Gets a preview of a obspy stream object.
<tt style='background-color:#E8E8E8;'> clients.seishub._WaveformMapperClient <a href=' /clients/seishub/client.py#L579'>get_previews_by_ids</a>(trace_ids,starttime,endtime)</tt>	Gets a preview of a obspy stream object.
<tt style='background-color:#E8E8E8;'> clients.seishub._StationMapperClient <a href=' /clients/seishub/client.py#L625'>get_list</a>(network,station)</tt>	Gets a list of station information.
<tt style='background-color:#E8E8E8;'> clients.seishub._StationMapperClient <a href=' /clients/seishub/client.py#L644'>get_coordinates</a>(network,station,datetime,location)</tt>	Get coordinate information.
<tt style='background-color:#E8E8E8;'> clients.seishub._StationMapperClient <a href=' /clients/seishub/client.py#L704'>get_paz</a>(seed_id,datetime)</tt>	Get paz for a station at given time span gain is the a0 normalization.
<tt style='background-color:#E8E8E8;'> clients.seishub._EventMapperClient <a href=' /clients/seishub/client.py#L781'>get_list</a>(limit,offset,localisation_method,author)</tt>	Gets a list of event information.
<tt style='background-color:#E8E8E8;'> clients.seishub._EventMapperClient <a href=' /clients/seishub/client.py#L825'>get_events</a>()</tt>	Fetches a catalog with event information parameters to narrow down.
<tt style='background-color:#E8E8E8;'> clients.seishub._EventMapperClient <a href=' /clients/seishub/client.py#L849'>get_kml</a>(nolabels)</tt>	Posts an event get_list() and returns the results as a kml file for.
<tt style='background-color:#E8E8E8;'> clients.seishub._EventMapperClient <a href=' /clients/seishub/client.py#L957'>save_kml</a>(filename,overwrite)</tt>	Posts an event get_list() and writes the results as a kml file for.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/spectrogram.py#L32'>_nearest_pow_2</a>(x)</tt>	Find power of two nearest to x >>> _nearest_pow_2 3.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/spectrogram.py#L54'>spectrogram</a>(data,samp_rate,per_lap,wlen)</tt>	Computes and plots spectrogram of the input data.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/util.py#L29'>decimal_seconds_format_x_decimals</a>(decimals)</tt>	Function factory for format functions to format date ticklabels with given number of decimals to seconds stripping trailing zeros.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/util.py#L55'>decimal_seconds_format_date_first_tick</a>(x,pos)</tt>	This format function is used to format date ticklabels with decimal seconds but stripping trailing zeros.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/util.py#L71'>format_hour_minute</a>(x,pos)</tt>	Format tick like '%h %m' but add date to first tick.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/util.py#L83'>format_hour_minute_second</a>(x,pos)</tt>	Format tick like '%h %m %s' but add date to first tick.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/util.py#L155'>_id_key</a>(id_)</tt>	Compare two trace ids by network/station/location single character component codes according to sane zne/zrt/lqt order.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/util.py#L201'>_component_code_key</a>(val)</tt>	Compare two single character component codes according to sane zne/zrt/lqt order.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/util.py#L230'>_timestring</a>(t)</tt>	Returns a full string representation of a :class ~obspy.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L69'>__init__</a>()</tt>	Checks some variables and maps the kwargs to class variables.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L223'>__del__</a>()</tt>	Destructor closes the figure instance if it has been created by the class.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L255'>plot_waveform</a>()</tt>	Creates a graph of any given obspy stream object it either saves the.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L330'>plot</a>()</tt>	Plot the traces showing one graph per trace.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L408'>plot_day</a>()</tt>	Extend the seismogram.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L503'>_plot_event</a>(event)</tt>	Helper function to plot an event into the dayplot.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L618'>_plot_dayplot_scale</a>(unit)</tt>	Plots the dayplot scale if requested.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L664'>__plot_straight</a>(trace,ax)</tt>	Just plots the data samples in the self stream useful for smaller.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L715'>__plot_min_max</a>(trace,ax)</tt>	Plots the data using a min/max approach that calculated the minimum and maximum values of each "pixel" and then plots only these values.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L791'>__plot_set_x_ticks</a>()</tt>	Goes through all axes in pyplot and sets time ticks on the x axis.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L836'>__dayplot_get_min_max_values</a>()</tt>	Takes a stream object and calculates the min and max values for each pixel in the dayplot.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L911'>__dayplot_normalize_values</a>()</tt>	Normalizes all values in the 3 dimensional array so that the minimum value will be 0 and the maximum value will be 1.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L961'>__dayplot_set_x_ticks</a>()</tt>	Sets the xticks for the dayplot.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L1034'>__dayplot_set_y_ticks</a>()</tt>	Sets the yticks for the dayplot.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L1076'>plot_section</a>()</tt>	Plots multiple waveforms as a record section on a single plot.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L1155'>__sect_init_traces</a>()</tt>	Arrange the trace data used for plotting.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L1235'>__sect_scale_traces</a>()</tt>	The traces have to be scaled to fit between 0-1 each trace.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L1244'>__sect_init_time</a>()</tt>	Define the time vector for each trace.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L1260'>__sect_init_color</a>()</tt>	Define the color of each trace.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L1277'>__sect_fraction_to_offset</a>(fraction)</tt>	Helper function to return fractions from offsets.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L1283'>__sect_init_plot</a>()</tt>	Function initialises plot all the illustration is done by self.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L1368'>__sect_normalize_traces</a>()</tt>	This helper function normalizes the traces.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L1386'>__setup_figure</a>()</tt>	The design and look of the whole plot to be produced.
<tt style='background-color:#E8E8E8;'> imaging.WaveformPlotting <a href=' /imaging/waveform.py#L1421'>_warn_on_xaxis_zoom</a>(ax)</tt>	Method to be used as a callback on method=fast, "minmax"-type plots to warn the user when zooming into the plot.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/source.py#L30'>_setup_figure_and_axes</a>(kind,fig,subplot_size)</tt>	Setup figure for event plot.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/source.py#L70'>plot_radiation_pattern</a>(mt,kind,coordinate_system,p_sphere_direction)</tt>	Plot the p/s farfield radiation pattern on a unit sphere grid.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/source.py#L174'>_plot_radiation_pattern_sphere</a>(ax3d,ned_mt,type,p_sphere_direction)</tt>	Private function that plots a radiation pattern sphere into an :class ~mpl_toolkits.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/source.py#L258'>_plot_radiation_pattern_quiver</a>(ax3d,ned_mt,type)</tt>	Private routine that plots the wave farfield into an :class ~mpl_toolkits.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/source.py#L320'>_plot_beachball</a>(ax2d,rtp_mt)</tt>	Private function that plots a beachball into a 2d matplotlib :class ~matplotlib.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/source.py#L344'>_plot_radiation_pattern_mayavi</a>(ned_mt)</tt>	Plot the radiation pattern using mayavi.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/source.py#L512'>_oriented_uv_sphere</a>(ntheta,nphi,orientation)</tt>	Returns a uv sphere (equidistant lat/lon grid) with its north-pole rotated to the input axis.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/source.py#L559'>_equalarea_spherical_grid</a>(nlat)</tt>	Generates a simple spherical equalarea grid that adjust the number of longitude samples to the latitude.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/maps.py#L86'>plot_basemap</a>(lons,lats,size,color)</tt>	Creates a basemap plot with a data point scatter plot.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/maps.py#L280'>_plot_basemap_into_axes</a>(ax,lons,lats,size)</tt>	Creates a or adds to existing basemap plot with a data point scatter plot in given axes.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/maps.py#L462'>plot_cartopy</a>(lons,lats,size,color)</tt>	Creates a cartopy plot with a data point scatter plot.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/maps.py#L749'>plot_map</a>(method)</tt>	Creates a map plot with a data point scatter plot.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/beachball.py#L75'>beach</a>(fm,linewidth,facecolor,bgcolor)</tt>	Return a beach ball as a collection which can be connected to an current matplotlib axes instance (ax.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/beachball.py#L196'>beachball</a>(fm,linewidth,facecolor,bgcolor)</tt>	Draws a beach ball diagram of an earthquake focal mechanism.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/beachball.py#L283'>plot_mt</a>(T,N,P,size)</tt>	Uses a principal axis t n and p to draw a beach ball plot.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/beachball.py#L606'>plot_dc</a>(np1,size,xy,width)</tt>	Uses one nodal plane of a double couple to draw a beach ball plot.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/beachball.py#L722'>strike_dip</a>(n,e,u)</tt>	Finds strike and dip of plane given normal vector having components n e and u.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/beachball.py#L748'>aux_plane</a>(s1,d1,r1)</tt>	Get strike and dip of second plane.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/beachball.py#L790'>mt2plane</a>(mt)</tt>	Calculates a nodal plane of a given moment tensor.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/beachball.py#L827'>tdl</a>(an,bn)</tt>	Helper function for mt2plane.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/beachball.py#L910'>mt2axes</a>(mt)</tt>	Calculates the principal axes of a given moment tensor.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/cm.py#L216'>_get_cmap</a>(file_name,lut,reverse)</tt>	Load a :class ~matplotlib colors linearsegmentedcolormap from.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/cm.py#L272'>_get_all_cmaps</a>()</tt>	Return all colormaps in "obspy/imaging/data" directory including reversed versions.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/cm.py#L306'>_colormap_plot_overview</a>(colormap_names)</tt>	Overview bar plot adapted after http //scipy-cookbook.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/cm.py#L339'>_colormap_plot_ppsd</a>(cmaps)</tt>	Plot for illustrating colormaps ppsd.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/cm.py#L361'>_colormap_plot_array_response</a>(cmaps)</tt>	Plot for illustrating colormaps array response.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/cm.py#L397'>_colormap_plot_cwt</a>(cmaps)</tt>	Plot for illustrating colormaps cwt.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/cm.py#L427'>_colormap_plot_similarity</a>(cmaps)</tt>	Plot for illustrating colormaps similarity matrix.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/cm.py#L513'>_colormap_plot_beamforming_time</a>(cmaps)</tt>	Plot for illustrating colormaps beamforming.
<tt style='background-color:#E8E8E8;'> imaging. <a href=' /imaging/cm.py#L564'>_colormap_plot_beamforming_polar</a>(cmaps)</tt>	Plot for illustrating colormaps beamforming.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L104'>__init__</a>(M,system,debug)</tt>	Creates a moment tensor object on the basis of a provided mechanism m.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L165'>_setup_M</a>(mech)</tt>	Brings the provided mechanism into symmetric 3x3 matrix form.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L257'>_rotate_2_NED</a>()</tt>	Rotates the mechanism to the basis ned.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L300'>_decompose_M</a>()</tt>	Running the decomposition of the moment tensor object.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L316'>_standard_decomposition</a>()</tt>	Decomposition according aki & richards and jost & herrmann into isotropic + deviatoric.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L394'>_decomposition_w_2DC</a>()</tt>	Decomposition according aki & richards and jost & herrmann into isotropic + deviatoric.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L458'>_decomposition_w_3DC</a>()</tt>	Decomposition according aki & richards and jost & herrmann into - isotropic.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L536'>_M_to_principal_axis_system</a>()</tt>	Read in matrix m and set up eigenvalues ew and eigenvectors ev for setting up the principal axis system.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L732'>_find_faultplanes</a>()</tt>	Sets the two angle-triples describing the faultplanes of the double couple defined by the eigenvectors p and t of the.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L811'>_find_strike_dip_rake</a>(rotation_matrix)</tt>	Returns angles strike dip slip-rake in degrees describing the fault plane.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L819'>_cvec</a>(x,y,z)</tt>	Builds a column vector matrix type from a 3 tuple.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L825'>_matrix_to_euler</a>(rotmat)</tt>	Returns three euler angles alpha beta gamma in radians from a rotation matrix.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L848'>_unique_euler</a>(alpha,beta,gamma)</tt>	Uniquify euler angle triplet.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L909'>_matrix_w_style_and_system</a>(M2return,system,style)</tt>	Gives the provided matrix in the desired basis system.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L952'>_vector_w_style_and_system</a>(vectors,system,style)</tt>	Gives the provided vector s in the desired basis system.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1031'>get_M</a>(system,style)</tt>	Returns the moment tensor in matrix representation.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1044'>get_decomposition</a>(in_system,out_system,style)</tt>	Returns a tuple of the decomposition results.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1096'>get_full_decomposition</a>()</tt>	Nice compilation of decomposition result to be viewed in the shell (call with 'print').
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1112'>_fault_planes_as_str</a>()</tt>	Internal setup of a nice string containing information about the fault planes.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1124'>get_input_system</a>(style)</tt>	Returns the basis system of the input.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1132'>get_output_system</a>(style)</tt>	Returns the basis system of the input.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1140'>get_decomp_type</a>(style)</tt>	Returns the decomposition type.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1154'>get_iso</a>(system,style)</tt>	Returns the isotropic part of the moment tensor in matrix representation.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1166'>get_devi</a>(system,style)</tt>	Returns the deviatoric part of the moment tensor in matrix representation.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1178'>get_DC</a>(system,style)</tt>	Returns the double couple part of the moment tensor in matrix representation.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1190'>get_DC2</a>(system,style)</tt>	Returns the second double couple part of the moment tensor in matrix representation.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1207'>get_DC3</a>(system,style)</tt>	Returns the third double couple part of the moment tensor in matrix representation.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1224'>get_CLVD</a>(system,style)</tt>	Returns the clvd part of the moment tensor in matrix representation.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1240'>get_DC_percentage</a>(system,style)</tt>	Returns the percentage of the dc part of the moment tensor in matrix representation.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1249'>get_CLVD_percentage</a>(system,style)</tt>	Returns the percentage of the dc part of the moment tensor in matrix representation.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1262'>get_DC2_percentage</a>(system,style)</tt>	Returns the percentage of the second dc part of the moment tensor in matrix representation.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1275'>get_DC3_percentage</a>(system,style)</tt>	Returns the percentage of the third dc part of the moment tensor in matrix representation.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1288'>get_iso_percentage</a>(system,style)</tt>	Returns the percentage of the isotropic part of the moment tensor in matrix representation.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1297'>get_devi_percentage</a>(system,style)</tt>	Returns the percentage of the deviatoric part of the moment tensor in matrix representation.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1306'>get_moment</a>(system,style)</tt>	Returns the seismic moment in nm of the moment tensor.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1314'>get_mag</a>(system,style)</tt>	Returns the moment magnitude m_w of the moment tensor.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1322'>get_decomposition_key</a>(system,style)</tt>	10 = standard decomposition (jost & herrmann).
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1330'>get_eigvals</a>(system,style)</tt>	Returns a list of the eigenvalues of the moment tensor.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1342'>get_eigvecs</a>(system,style)</tt>	Returns the eigenvectors of the moment tensor.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1361'>get_null_axis</a>(system,style)</tt>	Returns the neutral axis of the moment tensor.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1372'>get_t_axis</a>(system,style)</tt>	Returns the tension axis of the moment tensor.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1383'>get_p_axis</a>(system,style)</tt>	Returns the pressure axis of the moment tensor.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1394'>get_transform_matrix</a>(system,style)</tt>	Returns the transformation matrix (input system to principal axis system.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1407'>get_fps</a>()</tt>	Returns a list of the two faultplane 3-tuples each showing strike dip slip-rake.
<tt style='background-color:#E8E8E8;'> imaging.scripts.MomentTensor <a href=' /imaging/scripts/mopad.py#L1418'>get_colour_order</a>()</tt>	Returns the value of the plotting order only important in beachball instances.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1479'>_return_matrix_vector_array</a>(ma_ve_ar,basis_change_matrix)</tt>	Generates the output for the functions yielding matrices vectors and arrays in new basis systems.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1519'>USE2NED</a>(some_matrix_or_vector)</tt>	Function for basis transform from basis use to ned.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1538'>XYZ2NED</a>(some_matrix_or_vector)</tt>	Function for basis transform from basis xyz to ned.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1557'>NWU2NED</a>(some_matrix_or_vector)</tt>	Function for basis transform from basis nwu to ned.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1576'>NED2USE</a>(some_matrix_or_vector)</tt>	Function for basis transform from basis ned to use.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1595'>XYZ2USE</a>(some_matrix_or_vector)</tt>	Function for basis transform from basis xyz to use.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1614'>NED2XYZ</a>(some_matrix_or_vector)</tt>	Function for basis transform from basis ned to xyz.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1633'>NED2NWU</a>(some_matrix_or_vector)</tt>	Function for basis transform from basis ned to nwu.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1652'>USE2XYZ</a>(some_matrix_or_vector)</tt>	Function for basis transform from basis use to xyz.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1672'>NWU2XYZ</a>(some_matrix_or_vector)</tt>	Function for basis transform from basis use to xyz.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1692'>NWU2USE</a>(some_matrix_or_vector)</tt>	Function for basis transform from basis use to xyz.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1712'>XYZ2NWU</a>(some_matrix_or_vector)</tt>	Function for basis transform from basis use to xyz.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1731'>USE2NWU</a>(some_matrix_or_vector)</tt>	Function for basis transform from basis use to xyz.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1750'>strikediprake_2_moments</a>(strike,dip,rake)</tt>	Angles are defined as in jost&herman given in degrees.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1793'>fancy_matrix</a>(m_in)</tt>	Returns a given 3x3 matrix or array in a cute way on the shell if you use 'print' on the return value.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/mopad.py#L1821'>fancy_vector</a>(v)</tt>	Returns a given 3-vector or array in a cute way on the shell if you use 'print' on the return value.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L1865'>ploBB</a>(kwargs,ax)</tt>	Plots the projection of the beachball onto a unit sphere.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L1873'>save_BB</a>(kwargs)</tt>	Saves the 2d projection of the beachball without plotting.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L1885'>_just_save_bb</a>()</tt>	Saves the beachball unit sphere plot into a given file.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L1944'>get_psxy</a>(kwargs)</tt>	Returns one string to be piped into psxy of gmt.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L1990'>_add_2_GMT_string</a>(FH_string,curve,colour)</tt>	Writes coordinate pair list of given curve as string into temporal file handler.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L2000'>_set_GMT_attributes</a>()</tt>	Set the beachball lines and nodals as strings into a file handler.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L2103'>get_MT</a>()</tt>	Returns the original moment tensor object handed over to the class at generating this instance.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L2110'>full_sphere_plot</a>(kwargs)</tt>	Plot of the full beachball projected on a circle with a radius 2.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L2118'>_aux_plot</a>()</tt>	Generates the final plot of the total sphere (according to the chosen 2d-projection.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L2354'>pa_plot</a>(kwargs)</tt>	Plot of the solution in the principal axes system.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L2409'>_set_standard_attributes</a>()</tt>	Sets default values of mandatory arguments.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L2482'>_update_attributes</a>(kwargs)</tt>	Makes an internal update of the object's attributes with the provided list of keyword arguments.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L2501'>_setup_BB</a>(unit_circle)</tt>	Setup of the beachball when a plotting method is evoked.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L2540'>_correct_curves</a>()</tt>	Correcting potentially wrong curves.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L2628'>_nodallines_in_NED_system</a>()</tt>	The two nodal lines between the areas on a beachball are given by the points where tan² alpha = (-ews/(ewn*cos phi **2 + ewh*sin phi **2)).
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L2817'>_identify_faultplanes</a>()</tt>	See if the 2 faultplanes given as attribute of the moment tensor object handed to this instance are consistent with.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L2827'>_find_basis_change_2_new_viewpoint</a>()</tt>	Finding the eulerian angles if you want to rotate an object.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L2948'>_rotate_all_objects_2_new_view</a>()</tt>	Rotate all relevant parts of the solution - namely the eigenvector-projections the 2 nodallines and the faultplanes.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L2970'>_vertical_2D_projection</a>()</tt>	Start the vertical projection of the 3d beachball onto the 2d plane.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L3000'>_stereo_vertical</a>()</tt>	Stereographic/azimuthal conformal 2d projection onto a plane tangent to the lowest point 0 0 1.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L3076'>_orthographic_vertical</a>()</tt>	Orthographic 2d projection onto a plane tangent to the lowest point 0 0 1.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L3154'>_lambert_vertical</a>()</tt>	Lambert azimuthal equal-area 2d projection onto a plane tangent to the lowest point 0 0 1.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L3233'>_gnomonic_vertical</a>()</tt>	Gnomonic 2d projection onto a plane tangent to the lowest point 0 0 1.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L3315'>_build_circles</a>()</tt>	Sets two sets of points describing the unit sphere and the outer circle with r=2.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L3334'>_sort_curve_points</a>(curve)</tt>	Checks if curve points are in right order for line plotting.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L3427'>_smooth_curves</a>()</tt>	Corrects curves for potential large gaps resulting in strange intersection lines on nodals of round and irreagularly shaped.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L3493'>_check_curve_in_curve</a>()</tt>	Checks if one of the two nodallines contains the other one completely.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L3532'>_point_inside_polygon</a>(x,y,poly)</tt>	Determine if a point is inside a given polygon or not.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L3556'>_pnpoly</a>(verts,point)</tt>	Check whether point is in the polygon defined by verts.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L3589'>_projection_2_unit_sphere</a>()</tt>	Brings the complete solution from stereographic projection onto the unit sphere by just shrinking the maximum radius of.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L3655'>_plot_US</a>(ax)</tt>	Generates the final plot of the beachball projection on the unit sphere.
<tt style='background-color:#E8E8E8;'> imaging.scripts.BeachBall <a href=' /imaging/scripts/mopad.py#L3677'>_setup_plot_US</a>(plt,ax)</tt>	Setting up the figure with the final plot of the unit sphere.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/scan.py#L53'>compress_start_end</a>(x,stop_iteration,merge_overlaps,margin_in_seconds)</tt>	Compress 2-dimensional array of piecewise continuous start/end time pairs in matplotlib date numbers by merging overlapping and exactly fitting.
<tt style='background-color:#E8E8E8;'> imaging.scripts.Scanner <a href=' /imaging/scripts/scan.py#L259'>__init__</a>(format,verbose,recursive,ignore_links)</tt>	See :class ~obspy imaging scripts scan scanner.
<tt style='background-color:#E8E8E8;'> imaging.scripts.Scanner <a href=' /imaging/scripts/scan.py#L274'>plot</a>(outfile,show,fig,plot_x)</tt>	Plot the information on parsed waveform files.
<tt style='background-color:#E8E8E8;'> imaging.scripts.Scanner <a href=' /imaging/scripts/scan.py#L417'>analyze_parsed_data</a>(print_gaps,starttime,endtime,seed_ids)</tt>	Prepare information for plotting.
<tt style='background-color:#E8E8E8;'> imaging.scripts.Scanner <a href=' /imaging/scripts/scan.py#L568'>load_npz</a>(filename)</tt>	Load information on scanned data from npz file.
<tt style='background-color:#E8E8E8;'> imaging.scripts.Scanner <a href=' /imaging/scripts/scan.py#L584'>save_npz</a>(filename)</tt>	Save information on scanned data to npz file.
<tt style='background-color:#E8E8E8;'> imaging.scripts.Scanner <a href=' /imaging/scripts/scan.py#L593'>parse</a>(path,recursive,ignore_links)</tt>	Parse file/directory and store information on encountered waveform files.
<tt style='background-color:#E8E8E8;'> imaging.scripts.Scanner <a href=' /imaging/scripts/scan.py#L622'>add_stream</a>(stream)</tt>	Add information of provided stream to scanner object.
<tt style='background-color:#E8E8E8;'> imaging.scripts. <a href=' /imaging/scripts/scan.py#L636'>scan</a>(paths,format,verbose,recursive)</tt>	:type plot bool or str.
