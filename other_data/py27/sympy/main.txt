core		clashing		return the clashing-symbols dictionaries
geometry	Parabola	axis_of_symmetry		the axis of symmetry of the parabola
geometry	Parabola	directrix		the directrix of the parabola
geometry	Parabola	eccentricity		the eccentricity of the parabola
geometry	Parabola	equation	x y	the equation of the parabola
geometry	Parabola	focal_length		the focal length of the parabola
geometry	Parabola	focus		the focus of the parabola
geometry	Parabola	intersection	o	the intersection of the parabola and another geometrical entity o
geometry	Parabola	p_parameter		p is a parameter of parabola
geometry	Parabola	vertex		the vertex of the parabola
geometry	LinearEntity	__contains__	other	return a definitive answer or else raise an error if it cannot be determined that other is on the boundaries of self
geometry	LinearEntity	_span_test	other	test whether the point other lies in the positive span of self
geometry	LinearEntity	angle_between	l1 l2	the angle formed between the two linear entities
geometry	LinearEntity	arbitrary_point	parameter	a parameterized point on the line
geometry	LinearEntity	are_concurrent		is a sequence of linear entities concurrent? two or more linear entities are concurrent if they all
geometry	LinearEntity	contains	other	subclasses should implement this method and should return true if other is on the boundaries of self
geometry	LinearEntity	direction		the direction vector of the linearentity
geometry	LinearEntity	intersection	other	the intersection with another geometrical entity
geometry	LinearEntity	is_parallel	l1 l2	are two linear entities parallel? parameters
geometry	LinearEntity	is_perpendicular	l1 l2	are two linear entities perpendicular? parameters
geometry	LinearEntity	is_similar	other	return true if self and other are contained in the same line
geometry	LinearEntity	length		the length of the line
geometry	LinearEntity	p1		the first defining point of a linear entity
geometry	LinearEntity	p2		the second defining point of a linear entity
geometry	LinearEntity	parallel_line	p	create a new line parallel to this linear entity which passes through the point p
geometry	LinearEntity	perpendicular_line	p	create a new line perpendicular to this linear entity which passes through the point p
geometry	LinearEntity	perpendicular_segment	p	create a perpendicular line segment from p to this line
geometry	LinearEntity	points		the two points used to define this linear entity
geometry	LinearEntity	projection	other	project a point line ray or segment onto this linear entity
geometry	LinearEntity	random_point		a random point on a linearentity
geometry	Line	contains	other	return true if other is on this line or false otherwise
geometry	Line	distance	other	finds the shortest distance between a line and a point
geometry	Line	equals	other	returns true if self and other are the same mathematical entities
geometry	Line	plot_interval	parameter	the plot interval for the default geometric plot of line gives
geometry	Ray	_svg	scale_factor fill_color	returns svg path element for the linearentity
geometry	Ray	contains	other	is other geometryentity contained in this ray? examples
geometry	Ray	distance	other	finds the shortest distance between the ray and a point
geometry	Ray	equals	other	returns true if self and other are the same mathematical entities
geometry	Ray	plot_interval	parameter	the plot interval for the default geometric plot of the ray gives
geometry	Ray	source		the point from which the ray emanates
geometry	Segment	contains	other	is the other geometryentity contained within this segment? examples
geometry	Segment	distance	other	finds the shortest distance between a line segment and a point
geometry	Segment	length		the length of the line segment
geometry	Segment	midpoint		the midpoint of the line segment
geometry	Segment	perpendicular_bisector	p	the perpendicular bisector of this segment
geometry	Segment	plot_interval	parameter	the plot interval for the default geometric plot of the segment gives values that will produce the full segment in a plot
geometry	LinearEntity2D	bounds		return a tuple xmin ymin xmax ymax representing the bounding rectangle for the geometric figure
geometry	LinearEntity2D	perpendicular_line	p	create a new line perpendicular to this linear entity which passes through the point p
geometry	LinearEntity2D	slope		the slope of this linear entity or infinity if vertical
geometry	Line2D	_svg	scale_factor fill_color	returns svg path element for the linearentity
geometry	Line2D	coefficients		the coefficients (a, b, c) for ax + by + c = 0
geometry	Line2D	equation	x y	the equation of the line ax + by + c
geometry	Ray2D	xdirection		the x direction of the ray
geometry	Ray2D	ydirection		the y direction of the ray
geometry	Segment2D	_svg	scale_factor fill_color	returns svg path element for the linearentity
geometry	LinearEntity3D	direction_ratio		the direction ratio of a given line in 3d
geometry	LinearEntity3D	direction_cosine		the normalized direction ratio of a given line in 3d
geometry	Line3D	equation	x y z k	the equation of the line in 3d parameters
geometry	Ray3D	xdirection		the x direction of the ray
geometry	Ray3D	ydirection		the y direction of the ray
geometry	Ray3D	zdirection		the z direction of the ray
geometry	Curve	arbitrary_point	parameter	a parameterized point on the curve
geometry	Curve	free_symbols		return a set of symbols other than the bound symbols used to parametrically define the curve
geometry	Curve	functions		the functions specifying the curve
geometry	Curve	limits		the limits for the curve
geometry	Curve	parameter		the curve function variable
geometry	Curve	plot_interval	parameter	the plot interval for the default geometric plot of the curve
geometry	Curve	rotate	angle pt	rotate angle radians counterclockwise about point pt
geometry	Curve	scale	x y pt	override geometryentity scale since curve is not made up of points
geometry	Curve	translate	x y	translate the curve by x y
geometry		_ordered_points	p	return the tuple of points sorted numerically according to args
geometry		_symbol	s matching_symbol	return s if s is a symbol else return either a new symbol (real=true) with the same name s or the matching_symbol if s is a string and it matches
geometry		_uniquely_named_symbol	xname	return a symbol which when printed will have a name unique from any other already in the expressions given
geometry		are_coplanar		returns true if the given entities are coplanar otherwise false parameters
geometry		are_similar	e1 e2	are two geometrical entities similar
geometry		centroid		find the centroid center of mass of the collection containing only points segments or polygons
geometry		closest_points		return the subset of points from a set of points that were the closest to each other in the 2d plane
geometry		convex_hull		the convex hull surrounding the points contained in the list of entities
geometry		farthest_points		return the subset of points from a set of points that were the furthest apart from each other in the 2d plane
geometry		idiff	eq y x n	return dy/dx assuming that eq == 0
geometry		intersection		the intersection of a collection of geometryentity instances
geometry	Point	__abs__		returns the distance between this point and the origin
geometry	Point	__add__	other	add other to self by incrementing self's coordinates by those of other
geometry	Point	__div__	divisor	divide point's coordinates by a factor
geometry	Point	__mul__	factor	multiply point's coordinates by a factor
geometry	Point	__neg__		negate the point
geometry	Point	__sub__	other	subtract two points or subtract a factor from this point's coordinates
geometry	Point	_normalize_dimension	cls	ensure that points have the same dimension
geometry	Point	affine_rank		the affine rank of a set of points is the dimension of the smallest affine space containing all the points
geometry	Point	ambient_dimension		number of components this point has
geometry	Point	are_coplanar	cls	return true if there exists a plane in which all the points lie
geometry	Point	distance	p	the euclidean distance from self to point p
geometry	Point	dot	p	return dot product of self with another point
geometry	Point	equals	other	returns whether the coordinates of self and other agree
geometry	Point	evalf	prec	evaluate the coordinates of the point
geometry	Point	intersection	other	the intersection between this point and another geometryentity
geometry	Point	is_collinear		returns true if there exists a line that contains self and points
geometry	Point	is_concyclic		do self and the given sequence of points lie in a circle? returns true if the set of points are concyclic and
geometry	Point	is_nonzero		true if any coordinate is nonzero false if every coordinate is zero and none if it cannot be determined
geometry	Point	is_scalar_multiple	p	returns whether each coordinate of self is a scalar multiple of the corresponding coordinate in point p
geometry	Point	is_zero		true if every coordinate is zero false if any coordinate is not zero and none if it cannot be determined
geometry	Point	length		treating a point as a line this returns 0 for the length of a point
geometry	Point	midpoint	p	the midpoint between self and point p
geometry	Point	origin		a point of all zeros of the same ambient dimension
geometry	Point	orthogonal_direction		returns a non-zero point that is orthogonal to the line containing self and the origin
geometry	Point	project	a b	project the point a onto the line between the origin and point b along the normal direction
geometry	Point	taxicab_distance	p	the taxicab distance from self to point p
geometry	Point	canberra_distance	p	the canberra distance from self to point p
geometry	Point	unit		return the point that is in the same direction as self
geometry	Point2D	bounds		return a tuple xmin ymin xmax ymax representing the bounding rectangle for the geometric figure
geometry	Point2D	rotate	angle pt	rotate angle radians counterclockwise about point pt
geometry	Point2D	scale	x y pt	scale the coordinates of the point by multiplying by x and y after subtracting pt -- default is 0 0 --
geometry	Point2D	transform	matrix	return the point after applying the transformation described by the 3x3 matrix matrix
geometry	Point2D	translate	x y	shift the point by adding x and y to the coordinates of the point
geometry	Point2D	x		returns the x coordinate of the point
geometry	Point2D	y		returns the y coordinate of the point
geometry	Point3D	are_collinear		is a sequence of points collinear? test whether or not a set of points are collinear
geometry	Point3D	direction_cosine	point	gives the direction cosine between 2 points parameters
geometry	Point3D	direction_ratio	point	gives the direction ratio between 2 points parameters
geometry	Point3D	intersection	other	the intersection between this point and another point
geometry	Point3D	scale	x y z pt	scale the coordinates of the point by multiplying by x and y after subtracting pt -- default is 0 0 --
geometry	Point3D	transform	matrix	return the point after applying the transformation described by the 4x4 matrix matrix
geometry	Point3D	translate	x y z	shift the point by adding x and y to the coordinates of the point
geometry	Point3D	x		returns the x coordinate of the point
geometry	Point3D	y		returns the y coordinate of the point
geometry	Point3D	z		returns the z coordinate of the point
geometry	Polygon	area		the area of the polygon
geometry	Polygon	angles		the internal angle at each vertex
geometry	Polygon	perimeter		the perimeter of the polygon
geometry	Polygon	vertices		the vertices of the polygon
geometry	Polygon	centroid		the centroid of the polygon
geometry	Polygon	sides		the line segments that form the sides of the polygon
geometry	Polygon	bounds		return a tuple xmin ymin xmax ymax representing the bounding rectangle for the geometric figure
geometry	Polygon	is_convex		is the polygon convex? a polygon is convex if all its interior angles are less than 180
geometry	Polygon	encloses_point	p	return true if p is enclosed by is inside of self
geometry	Polygon	arbitrary_point	parameter	a parameterized point on the polygon
geometry	Polygon	plot_interval	parameter	the plot interval for the default geometric plot of the polygon
geometry	Polygon	intersection	o	the intersection of polygon and geometry entity
geometry	Polygon	distance	o	returns the shortest distance between self and o
geometry	Polygon	_do_poly_distance	e2	calculates the least distance between the exteriors of two convex polygons e1 and e2
geometry	Polygon	_svg	scale_factor fill_color	returns svg path element for the polygon
geometry	Polygon	__contains__	o	return true if o is contained within the boundary lines of self altitudes
geometry	RegularPolygon	args		returns the center point the radius the number of sides and the orientation angle
geometry	RegularPolygon	area		returns the area
geometry	RegularPolygon	length		returns the length of the sides
geometry	RegularPolygon	center		the center of the regularpolygon this is also the center of the circumscribing circle
geometry	RegularPolygon	circumcenter		alias for center
geometry	RegularPolygon	radius		radius of the regularpolygon this is also the radius of the circumscribing circle
geometry	RegularPolygon	circumradius		alias for radius
geometry	RegularPolygon	rotation		ccw angle by which the regularpolygon is rotated returns
geometry	RegularPolygon	apothem		the inradius of the regularpolygon
geometry	RegularPolygon	inradius		alias for apothem
geometry	RegularPolygon	interior_angle		measure of the interior angles
geometry	RegularPolygon	exterior_angle		measure of the exterior angles
geometry	RegularPolygon	circumcircle		the circumcircle of the regularpolygon
geometry	RegularPolygon	incircle		the incircle of the regularpolygon
geometry	RegularPolygon	angles		returns a dictionary with keys the vertices of the polygon and values the interior angle at each vertex
geometry	RegularPolygon	encloses_point	p	return true if p is enclosed by is inside of self
geometry	RegularPolygon	spin	angle	increment *in place* the virtual polygon's rotation by ccw angle
geometry	RegularPolygon	rotate	angle pt	override geometryentity rotate to first rotate the regularpolygon
geometry	RegularPolygon	scale	x y pt	override geometryentity scale since it is the radius that must be
geometry	RegularPolygon	reflect	line	override geometryentity reflect since this is not made of only
geometry	RegularPolygon	vertices		the vertices of the regularpolygon
geometry	Triangle	vertices		the triangle's vertices returns
geometry	Triangle	is_similar	t1 t2	is another triangle similar to this one
geometry	Triangle	is_equilateral		are all the sides the same length? returns
geometry	Triangle	is_isosceles		are two or more of the sides the same length? returns
geometry	Triangle	is_scalene		are all the sides of the triangle of different lengths? returns
geometry	Triangle	is_right		is the triangle right-angled
geometry	Triangle	altitudes		the altitudes of the triangle
geometry	Triangle	orthocenter		the orthocenter of the triangle
geometry	Triangle	circumcenter		the circumcenter of the triangle the circumcenter is the center of the circumcircle
geometry	Triangle	circumradius		the radius of the circumcircle of the triangle
geometry	Triangle	circumcircle		the circle which passes through the three vertices of the triangle
geometry	Triangle	bisectors		the angle bisectors of the triangle
geometry	Triangle	incenter		the center of the incircle
geometry	Triangle	inradius		the radius of the incircle
geometry	Triangle	incircle		the incircle of the triangle
geometry	Triangle	medians		the medians of the triangle
geometry	Triangle	medial		the medial triangle of the triangle
geometry	Triangle	nine_point_circle		the nine-point circle of the triangle
geometry	Triangle	eulerline		the euler line of the triangle
geometry		rad	d	return the radian value for the given degrees (pi = 180 degrees)
geometry		deg	r	return the degree value for the given radians (pi = 180 degrees)
geometry		_asa	d1 l d2	return triangle having side with length l on the x-axis
geometry		_sss	l1 l2 l3	return triangle having side of length l1 on the x-axis
geometry		_sas	l1 d l2	return triangle having side with length l2 on the x-axis
geometry	GeometryEntity	__cmp__	other	comparison of two geometryentities
geometry	GeometryEntity	__contains__	other	subclasses should implement this method for anything more complex than equality
geometry	GeometryEntity	__ne__	o	test inequality of two geometrical entities
geometry	GeometryEntity	__repr__		string representation of a geometryentity that can be evaluated by sympy
geometry	GeometryEntity	__str__		string representation of a geometryentity
geometry	GeometryEntity	_repr_svg_		svg representation of a geometryentity suitable for ipython
geometry	GeometryEntity	_svg	scale_factor fill_color	returns svg path element for the geometryentity
geometry	GeometryEntity	ambient_dimension		what is the dimension of the space that the object is contained in?
geometry	GeometryEntity	bounds		return a tuple xmin ymin xmax ymax representing the bounding rectangle for the geometric figure
geometry	GeometryEntity	encloses	o	return true if o is inside not on or outside the boundaries of self
geometry	GeometryEntity	intersection	o	returns a list of all of the intersections of self with o
geometry	GeometryEntity	is_similar	other	is this geometrical entity similar to another geometrical entity? two entities are similar if a uniform scaling (enlarging or
geometry	GeometryEntity	rotate	angle pt	rotate angle radians counterclockwise about point pt
geometry	GeometryEntity	scale	x y pt	scale the object by multiplying the x y-coordinates by x and y
geometry	GeometryEntity	translate	x y	shift the object by adding to the x y-coordinates the values x and y
geometry	GeometrySet	_contains	other	sympy sets uses the _contains method so include it for compatibility
geometry	GeometrySet	_union	o	returns the union of self and o for use with sympy
geometry	GeometrySet	_intersect	o	returns a sympy sets set of intersection objects
geometry		translate	x y	return the matrix to translate a 2-d point by x and y
geometry		scale	x y pt	return the matrix to multiply a 2-d point's coordinates by x and y
geometry		rotate	th	return the matrix to rotate a 2-d point about the origin by angle
geometry	Plane	angle_between	o	angle between the plane and other geometric entity
geometry	Plane	arbitrary_point	t	returns an arbitrary point on the plane varying t from 0 to 2*pi will move the point in a circle of radius 1 about p1 of the plane
geometry	Plane	are_concurrent		is a sequence of planes concurrent? two or more planes are concurrent if their intersections
geometry	Plane	distance	o	distance beteen the plane and another geometric entity
geometry	Plane	equals	o	returns true if self and o are the same mathematical entities
geometry	Plane	equation	x y z	the equation of the plane
geometry	Plane	intersection	o	the intersection with other geometrical entity
geometry	Plane	is_coplanar	o	returns true if o is coplanar with self else false
geometry	Plane	is_parallel	l	is the given geometric entity parallel to the plane? parameters
geometry	Plane	is_perpendicular	l	is the given geometric entity perpendicualar to the given plane? parameters
geometry	Plane	normal_vector		normal vector of the given plane
geometry	Plane	p1		the only defining point of the plane others can be obtained from the
geometry	Plane	parallel_plane	pt	plane parallel to the given plane and passing through the point pt
geometry	Plane	perpendicular_line	pt	a line perpendicular to the given plane
geometry	Plane	perpendicular_plane		return a perpendicular passing through the given points if the
geometry	Plane	projection_line	line	project the given line onto the plane through the normal plane containing the line
geometry	Plane	projection	pt	project the given point onto the plane along the plane normal
geometry	Plane	random_point	seed	returns a random point on the plane
geometry	Ellipse	__eq__	o	is the other geometryentity the same as this ellipse?
geometry	Ellipse	_svg	scale_factor fill_color	returns svg ellipse element for the ellipse
geometry	Ellipse	apoapsis		the apoapsis of the ellipse
geometry	Ellipse	arbitrary_point	parameter	a parameterized point on the ellipse
geometry	Ellipse	area		the area of the ellipse
geometry	Ellipse	bounds		return a tuple xmin ymin xmax ymax representing the bounding rectangle for the geometric figure
geometry	Ellipse	center		the center of the ellipse
geometry	Ellipse	circumference		the circumference of the ellipse
geometry	Ellipse	eccentricity		the eccentricity of the ellipse
geometry	Ellipse	encloses_point	p	return true if p is enclosed by is inside of self
geometry	Ellipse	equation	x y	the equation of the ellipse
geometry	Ellipse	evolute	x y	the equation of evolute of the ellipse
geometry	Ellipse	foci		the foci of the ellipse
geometry	Ellipse	focus_distance		the focal distance of the ellipse
geometry	Ellipse	hradius		the horizontal radius of the ellipse
geometry	Ellipse	intersection	o	the intersection of this ellipse and another geometrical entity o
geometry	Ellipse	is_tangent	o	is o tangent to the ellipse? parameters
geometry	Ellipse	major		longer axis of the ellipse if it can be determined else hradius
geometry	Ellipse	minor		shorter axis of the ellipse if it can be determined else vradius
geometry	Ellipse	normal_lines	p prec	normal lines between p and the ellipse
geometry	Ellipse	periapsis		the periapsis of the ellipse
geometry	Ellipse	semilatus_rectum		calculates the semi-latus rectum of the ellipse
geometry	Ellipse	plot_interval	parameter	the plot interval for the default geometric plot of the ellipse
geometry	Ellipse	random_point	seed	a random point on the ellipse
geometry	Ellipse	reflect	line	override geometryentity reflect since the radius
geometry	Ellipse	rotate	angle pt	rotate angle radians counterclockwise about point pt
geometry	Ellipse	scale	x y pt	override geometryentity scale since it is the major and minor
geometry	Ellipse	tangent_lines	p	tangent lines between p and the ellipse
geometry	Ellipse	vradius		the vertical radius of the ellipse
geometry	Circle	circumference		the circumference of the circle
geometry	Circle	equation	x y	the equation of the circle
geometry	Circle	intersection	o	the intersection of this circle with another geometrical entity
geometry	Circle	radius		the radius of the circle
geometry	Circle	reflect	line	override geometryentity reflect since the radius
geometry	Circle	scale	x y pt	override geometryentity scale since the radius
geometry	Circle	vradius		this ellipse property is an alias for the circle's radius
holonomic		DifferentialOperators	base generator	this function is used to create annihilators using dx
holonomic	DifferentialOperator	__mul__	other	multiplies two differentialoperator and returns another
holonomic	DifferentialOperator	is_singular	x0	checks if the differential equation is singular at x0
holonomic	HolonomicFunction	unify	other	unifies the base polynomial ring of a given two holonomic functions
holonomic	HolonomicFunction	is_singularics		returns true if the function have singular initial condition in the dictionary format
holonomic	HolonomicFunction	_have_init_cond		checks if the function have initial condition
holonomic	HolonomicFunction	_singularics_to_ord		converts a singular initial condition to ordinary if possible
holonomic	HolonomicFunction	integrate	limits initcond	integrates the given holonomic function
holonomic	HolonomicFunction	diff		differentiation of the given holonomic function
holonomic	HolonomicFunction	degree		returns the highest power of x in the annihilator
holonomic	HolonomicFunction	composition	expr	returns function after composition of a holonomic function with an algebraic function
holonomic	HolonomicFunction	to_sequence	lb	finds recurrence relation for the coefficients in the series expansion of the function about :math x_0, where :math x_0 is the point at
holonomic	HolonomicFunction	series	n coefficient order _recur	finds the power series expansion of given holonomic function about :math x_0
holonomic	HolonomicFunction	_indicial		computes roots of the indicial equation
holonomic	HolonomicFunction	evalf	points method h derivatives	finds numerical value of a holonomic function using numerical methods
holonomic	HolonomicFunction	change_x	z	changes only the variable of holonomic function for internal purposes
holonomic	HolonomicFunction	shift_x	a	substitute x + a for x
holonomic	HolonomicFunction	to_hyper	as_list _recur	returns a hypergeometric function or linear combination of them representing the given holonomic function
holonomic	HolonomicFunction	to_expr		converts a holonomic function back to elementary functions
holonomic	HolonomicFunction	change_ics	b lenics	changes the point x0 to b for initial conditions
holonomic	HolonomicFunction	to_meijerg		returns a linear combination of meijer g-functions
holonomic		from_hyper	func x0 evalf	converts a hypergeometric function to holonomic
holonomic		from_meijerg	func x0 evalf initcond	converts a meijer g-function to holonomic
holonomic		expr_to_holonomic	func x x0 y0	converts a function or an expression to a holonomic function
holonomic		_normalize	list_of parent negative	normalize a given annihilator
holonomic		_derivate_diff_eq	listofpoly	let a differential equation a0 x y x + a1 x y' x + = 0
holonomic		_hyper_to_meijerg	func	converts a hyper to meijerg
holonomic		_add_lists	list1 list2	takes polynomial sequences of two annihilators a and b and returns the list of polynomials of sum of a and b
holonomic		_extend_y0	Holonomic n	tries to find more initial conditions by substituting the initial value point in the differential equation
holonomic		_convert_poly_rat_alg	func x x0 y0	converts polynomials rationals and algebraic functions to holonomic
holonomic		_create_table	table domain	creates the look-up table for a similar implementation
holonomic		_evalf	func points derivatives method	numerical methods for numerical integration along a given set of points in the complex plane
holonomic		_euler	red x0 x1 y0	euler's method for numerical integration
holonomic		_rk4	red x0 x1 y0	runge-kutta 4th order numerical method
holonomic		RecurrenceOperators	base generator	returns an algebra of recurrence operators and the operator for shifting i
holonomic	RecurrenceOperator	__mul__	other	multiplies two operators and returns another
crypto		AZ	s	return the letters of s in uppercase in case more than
crypto		padded_key	key symbols filter	return a string of the distinct characters of symbols with those of key appearing first omitting characters in key
crypto		check_and_join	phrase symbols filter	joins characters of phrase and if symbols is given raises an error if any character in phrase is not in symbols
crypto		cycle_list	k n	returns the elements of the list range n shifted to the left by k (so the list starts with k (mod n))
crypto		encipher_shift	msg key symbols	performs shift cipher encryption on plaintext msg and returns the ciphertext
crypto		decipher_shift	msg key symbols	return the text by shifting the characters of msg to the left by the amount given by key
crypto		encipher_affine	msg key symbols _inverse	performs the affine cipher encryption on plaintext msg, and returns the ciphertext
crypto		decipher_affine	msg key symbols	return the deciphered text that was made from the mapping x \rightarrow ax+b (mod n), where n is the
crypto		encipher_substitution	msg old new	returns the ciphertext obtained by replacing each character that appears in old with the corresponding character in new
crypto		encipher_vigenere	msg key symbols	performs the vigenère cipher encryption on plaintext msg, and returns the ciphertext
crypto		decipher_vigenere	msg key symbols	decode using the vigenère cipher
crypto		encipher_hill	msg key symbols pad	return the hill cipher encryption of msg
crypto		decipher_hill	msg key symbols	deciphering is the same as enciphering but using the inverse of the key matrix
crypto		encipher_bifid	msg key symbols	performs the bifid cipher encryption on plaintext msg, and returns the ciphertext
crypto		decipher_bifid	msg key symbols	performs the bifid cipher decryption on ciphertext msg, and returns the plaintext
crypto		bifid_square	key	return characters of key arranged in a square
crypto		encipher_bifid5	msg key	performs the bifid cipher encryption on plaintext msg, and returns the ciphertext
crypto		decipher_bifid5	msg key	return the bifid cipher decryption of msg
crypto		bifid5_square	key	5x5 polybius square
crypto		encipher_bifid6	msg key	performs the bifid cipher encryption on plaintext msg, and returns the ciphertext
crypto		decipher_bifid6	msg key	performs the bifid cipher decryption on ciphertext msg, and returns the plaintext
crypto		bifid6_square	key	6x6 polybius square
crypto		rsa_public_key	p q e	return the rsa *public key* pair n e , where n is a product of two primes and e is relatively
crypto		rsa_private_key	p q e	return the rsa *private key*, n d , where n is a product of two primes and d is the inverse of
crypto		encipher_rsa	i key	return encryption of i by computing i^e (mod n), where key is the public key n e
crypto		decipher_rsa	i key	return decyption of i by computing i^d (mod n), where key is the private key n d
crypto		kid_rsa_public_key	a b A B	kid rsa is a version of rsa useful to teach grade school children since it does not involve exponentiation
crypto		kid_rsa_private_key	a b A B	compute m = a b - 1, e = a m + a, d = b m + b, n = e d - 1 / m
crypto		encipher_kid_rsa	msg key	here msg is the plaintext and key is the public key
crypto		decipher_kid_rsa	msg key	here msg is the plaintext and key is the private key
crypto		encode_morse	msg sep mapping	encodes a plaintext into popular morse code with letters separated by sep and words by a double sep
crypto		decode_morse	msg sep mapping	decodes a morse code with letters separated by sep (default is '|') and words by word_sep (default is '||)
crypto		lfsr_sequence	key fill n	this function creates an lfsr sequence
crypto		lfsr_autocorrelation	L P k	this function computes the lfsr autocorrelation function
crypto		lfsr_connection_polynomial	s	this function computes the lfsr connection polynomial
crypto		elgamal_private_key	digit seed	return three number tuple as private key
crypto		elgamal_public_key	key	return three number tuple as public key
crypto		encipher_elgamal	i key seed	encrypt message with public key i is a plaintext message expressed as an integer
crypto		decipher_elgamal	msg key	decrypt message with private key msg = (c_{1}, c_{2})
crypto		dh_private_key	digit seed	return three integer tuple as private key
crypto		dh_public_key	key	return three number tuple as public key
crypto		dh_shared_key	key b	return an integer that is the shared key
core		sympify	a locals convert_xor strict	converts an arbitrary expression to a type that can be used inside sympy
core		_sympify	a	short version of sympify for internal usage for __add__ and __eq__ methods where it is ok to allow some things like python integers and floats in
core		kernS	s	use a hack to try keep autosimplification from joining integer or minus sign into an add of a mul this modification doesn't
core		apply_on_element	f args kwargs n	returns a structure with the same dimension as the specified argument where each basic element is replaced by the function f applied on it
core		iter_copy	structure	returns a copy of an iterable object also copying all embedded iterables
core		structure_copy	structure	returns a copy of the given structure numpy-array list iterable
core	vectorize	__init__		the given numbers and strings characterize the arguments that will be treated as data structures where the decorated function will be applied
core	vectorize	__call__	f	returns a wrapper for the one-dimensional function that can handle multidimensional arguments
core	Basic	_hashable_content		return a tuple of information about self that can be used to compute the hash
core	Basic	assumptions0		return object type assumptions
core	Basic	compare	other	return -1 0 1 if the object is smaller equal or greater than other
core	Basic	fromiter	cls args	create a new object from an iterable
core	Basic	class_key	cls	nice order of classes
core	Basic	sort_key	order	return a sort key
core	Basic	__eq__	other	return a boolean indicating whether a == b on the basis of their symbolic trees
core	Basic	__ne__	other	a != b -> compare two symbolic trees and see whether they are different this is the same as
core	Basic	dummy_eq	other symbol	compare two expressions and handle dummy symbols
core	Basic	__repr__		method to return the string representation
core	Basic	atoms		returns the atoms that form the current object
core	Basic	free_symbols		return from the atoms of self those which are free symbols
core	Basic	canonical_variables		return a dictionary mapping any variable defined in self
core	Basic	rcall		apply on the argument recursively through the expression tree
core	Basic	_recursive_call	expr_to_call on_args	helper for rcall method
core	Basic	is_comparable		return true if self can be computed to a real number or already is a real number with precision else false
core	Basic	func		the top-level function in an expression
core	Basic	args		returns a tuple of arguments of 'self'
core	Basic	_sorted_args		the same as args derived classes which don't fix an
core	Basic	as_poly		converts self to a polynomial or returns none
core	Basic	as_content_primitive	radical clear	a stub to allow basic args like tuple to be skipped when computing the content and primitive components of an expression
core	Basic	subs		substitutes old for new in an expression after sympifying args
core	Basic	_subs	old new	substitutes an expression old -> new
core	Basic	_eval_subs	old new	override this stub if you want to do anything more than attempt a replacement of old with new in the arguments of self
core	Basic	xreplace	rule	replace occurrences of objects within the expression
core	Basic	_xreplace	rule	helper for xreplace tracks whether a replacement actually occurred
core	Basic	has		test whether any subexpression matches any of the patterns
core	Basic	_has	pattern	helper for has()
core	Basic	_has_matcher		helper for has()
core	Basic	replace	query value map simultaneous	replace matching subexpressions of self with value
core	Basic	find	query group	find all subexpressions matching a query
core	Basic	count	query	count the number of matching subexpressions
core	Basic	matches	expr repl_dict old	helper method for match() that looks for a match between wild symbols in self and expressions in expr
core	Basic	count_ops	visual	wrapper for count_ops that returns the operation count
core	Basic	doit		evaluate objects that are not evaluated by default like limits integrals sums and products
core	Basic	rewrite		rewrite functions in terms of other functions
core		_aresame	a b	return true if a and b are structurally the same else false
core		_atomic	e	return atom-like quantities as far as substitution is concerned derivatives functions and symbols
core	preorder_traversal	skip		skip yielding current node's (last yielded node's) subtrees
core		_make_find_query	query	convert the argument of basic find() into a callable
core	Symbol	_diff_wrt		allow derivatives wrt symbols
core	Symbol	_sanitize	assumptions obj	remove none covert values to bool check commutativity *in place*
core	Symbol	__new__	cls name	symbols are identified by name and assumptions :
core	Symbol	as_dummy		return a dummy having the same name and same assumptions as self
core		symbols	names	transform strings into instances of :class symbol class
core		var	names	create symbols and inject them into the global namespace
core		_monotonic_sign		return the value closest to 0 that self may have if all symbols are signed and the result is uniformly the same sign for all values of symbols
core		decompose_power	expr	decompose power into symbolic base and integer exponent
core		decompose_power_rat	expr	decompose power into symbolic base and rational exponent
core	Factors	__init__	factors	initialize factors from dict or expr
core	Factors	is_zero		>>> from sympy core exprtools import factors
core	Factors	is_one		>>> from sympy core exprtools import factors
core	Factors	as_expr		return the underlying expression
core	Factors	mul	other	return factors of self * other
core	Factors	normal	other	return self and other with gcd removed from each
core	Factors	div	other	return self and other with gcd removed from each
core	Factors	quo	other	return numerator factor of self / other
core	Factors	rem	other	return denominator factors of self / other
core	Factors	pow	other	return self raised to a non-negative integer power
core	Factors	gcd	other	return factors of gcd self other the keys are
core	Factors	lcm	other	return factors of lcm self other which are the union of factors with the maximum exponent for
core		_gcd_terms	terms isprimitive fraction	helper function for :func gcd_terms
core		gcd_terms	terms isprimitive clear fraction	compute the gcd of terms and put them together
core		factor_terms	expr radical clear fraction	remove common factors from terms in all arguments without changing the underlying structure of the expr
core		_mask_nc	eq name	return eq with non-commutative objects replaced with dummy symbols
core		factor_nc	expr	return the factored form of expr while handling non-commutative expressions
core		with_metaclass	meta	create a base class with a metaclass
core		iterable	i exclude	return a boolean indicating whether i is sympy iterable
core		is_sequence	i include	return a boolean indicating whether i is a sequence in the sympy sense
core		as_int	n	convert the argument to a builtin integer
core		default_sort_key	item order	return a key that can be used for sorting
core		_nodes	e	a helper for ordered() which returns the node count of e which for basic objects is the number of basic nodes in the expression tree
core		ordered	seq keys default warn	return an iterator of the seq where keys are used to break ties in a conservative fashion if after applying a key there are no ties
core		_make_key	args kwds typed kwd_mark	make a cache key from optionally typed positional and keyword arguments
core		lru_cache	maxsize typed	least-recently-used cache decorator
core	Tuple	tuple_count	value	t count value -> integer -- return number of occurrences of value
core	Tuple	index	value start stop	t index(value [start [stop]]) -> integer -- return first index of value
core		tuple_wrapper	method	decorator that converts any tuple in the function arguments into a tuple
core	Dict	__getitem__	key	x __getitem__ y <==> x[y]
core	Dict	items		d items() -> list of d's key value pairs as 2-tuples
core	Dict	keys		d keys() -> list of d's keys
core	Dict	values		d values() -> list of d's values
core	Dict	__iter__		x __iter__() <==> iter x
core	Dict	__len__		x __len__() <==> len x
core	Dict	get	key default	d get(k[,d]) -> d[k] if k in d else d d defaults to none
core	Dict	__contains__	key	d __contains__ k -> true if d has a key k else false
core	AssocOp	_from_args	cls args is_commutative	create new instance with already-processed args
core	AssocOp	_new_rawargs		create new instance of own class with args exactly as provided by caller but returning the self class identity if args is empty
core	AssocOp	flatten	cls seq	return seq so that none of the elements are of type cls this is
core	AssocOp	_matches_commutative	expr repl_dict old	matches add/mul "pattern" to an expression "expr"
core	AssocOp	_has_matcher		helper for has()
core	AssocOp	_eval_evalf	prec	evaluate the parts of self that are numbers if the whole thing was a number with no functions it would have been evaluated but
core	AssocOp	make_args	cls expr	return a sequence of elements args such that cls(*args) == expr >>> from sympy import symbol mul add
core	LatticeOp	_new_args_filter	cls arg_sequence call_cls	generator filtering args
core	LatticeOp	make_args	cls expr	return a set of args such that cls(*arg_set) == expr
core	Relational	lhs		the left-hand side of the relation
core	Relational	rhs		the right-hand side of the relation
core	Relational	reversed		return the relationship with sides and sign reversed
core	Relational	canonical		return a canonical form of the relational
core	Relational	equals	other failing_expression	return true if the sides of the relationship are mathematically identical and the type of relationship is the same
core	Relational	as_set		rewrites univariate inequality in terms of real sets examples
core		isqrt	n	return the largest integer less than or equal to sqrt n
core		integer_nthroot	y n	return a tuple containing x = floor(y**(1/n)) and a boolean indicating whether the result is exact (that is
core	Pow	as_base_exp		return base and exp of self
core	Pow	_eval_expand_power_exp		a** n+m -> a**n*a**m
core	Pow	_eval_expand_power_base		(a*b)**n -> a**n * b**n
core	Pow	_eval_expand_multinomial		a+b+ ** n -> a**n + n*a** n-1 *b + n is nonzero integer
core	Pow	as_content_primitive	radical clear	return the tuple (r self/r) where r is the positive rational extracted from self
core		as_property	fact	convert a fact name to the name of the corresponding property
core		make_property	fact	create the automagic property corresponding to a fact
core		_ask	fact obj	find the truth value for a property of an object
core		comp	z1 z2 tol	return a bool indicating whether the error between z1 and z2 is <= tol
core		mpf_norm	mpf prec	return the mpf tuple normalized appropriately for the indicated precision after doing a check to see if zero should be returned or
core		seterr	divide	should sympy raise an exception on 0/0 or return a nan? divide == true
core		_decimal_to_Rational_prec	dec	convert an ordinary decimal instance to a rational
core		_literal_float	f	return true if n can be interpreted as a floating point number
core		igcd		computes nonnegative integer greatest common divisor
core		ilcm		computes integer least common multiple
core		igcdex	a b	returns x y g such that g = x*a + y*b = gcd a b
core		mod_inverse	a m	return the number c such that a * c % m == 1 where c has the same sign as a
core	Number	_as_mpf_val	prec	evaluation of mpf tuple accurate to at least prec bits
core	Number	as_coeff_Mul	rational	efficiently extract the coefficient of a product
core	Number	as_coeff_Add	rational	efficiently extract the coefficient of a summation
core	Number	gcd	other	compute gcd of self and other
core	Number	lcm	other	compute lcm of self and other
core	Number	cofactors	other	compute gcd and cofactors of self and other
core	Float	_eval_power	expt	expt is symbolic object but not equal to 0 1
core	Rational	limit_denominator	max_denominator	closest rational to self with denominator at most max_denominator
core	Rational	factors	limit use_trial use_rho use_pm1	a wrapper to factorint which return factors of self that are smaller than limit or cheap to compute
core	Rational	as_content_primitive	radical clear	return the tuple (r self/r) where r is the positive rational extracted from self
core	Rational	as_coeff_Mul	rational	efficiently extract the coefficient of a product
core	Rational	as_coeff_Add	rational	efficiently extract the coefficient of a summation
core	Integer	_eval_power	expt	tries to do some simplifications on self**expt returns none if no further simplifications can be done
core	AlgebraicNumber	__new__	cls expr coeffs alias	construct a new algebraic number
core	AlgebraicNumber	is_aliased		returns true if alias was set
core	AlgebraicNumber	as_poly	x	create a poly instance from self
core	AlgebraicNumber	as_expr	x	create a basic expression from self
core	AlgebraicNumber	coeffs		returns all sympy coefficients of an algebraic number
core	AlgebraicNumber	native_coeffs		returns all native coefficients of an algebraic number
core	AlgebraicNumber	to_algebraic_integer		convert self to an algebraic integer
core	Zero	as_coeff_Mul	rational	efficiently extract the coefficient of a summation
core	Infinity	_eval_power	expt	expt is symbolic object but not equal to 0 or 1
core	NegativeInfinity	_eval_power	expt	expt is symbolic object but not equal to 0 or 1
core	NumberSymbol	approximation	number_cls	return an interval with number_cls endpoints that contains the value of numbersymbol
core	ImaginaryUnit	_eval_power	expt	b is i = sqrt -1
core	SingletonRegistry	__getattr__	name	python calls __getattr__ if no attribute of that name was installed yet
core		deprecated		this is a decorator which can be used to mark functions as deprecated
core		_sympifyit	arg retval	decorator to smartly _sympify function arguments @_sympifyit('other', notimplemented)
core		__sympifyit	func arg retval	decorator to _sympify arg argument for function func
core		call_highest_priority	method_name	a decorator for binary special methods to handle _op_priority
core		_unevaluated_Add		return a well-formed unevaluated add numbers are collected and put in slot 0 and args are sorted
core	Add	flatten	cls seq	takes the sequence "seq" of nested adds and returns a flatten list
core	Add	class_key	cls	nice order of classes
core	Add	as_coefficients_dict	a	return a dictionary mapping terms to their rational coefficient
core	Add	as_coeff_add		returns a tuple coeff args where self is treated as an add and coeff is the number term and args is a tuple of all other terms
core	Add	as_coeff_Add	rational	efficiently extract the coefficient of a summation
core	Add	_combine_inverse	lhs rhs	returns lhs - rhs but treats arguments like symbols so things like oo - oo return 0 instead of a nan
core	Add	as_two_terms		return head and tail of self
core	Add	extract_leading_order	symbols point	returns the leading term and its order
core	Add	as_real_imag	deep	returns a tuple representing a complex number examples
core	Add	primitive		return (r self/r) where r is the rational gcd of self
core	Add	as_content_primitive	radical clear	return the tuple (r self/r) where r is the positive rational extracted from self
core	Add	_mpc_		convert self to an mpmath mpc if possible
core	Expr	_diff_wrt		is it allowed to take derivative wrt to this instance
core	Expr	is_number		returns true if 'self' has no free symbols
core	Expr	_random	n re_min im_min re_max	return self evaluated if possible replacing free symbols with random complex values if necessary
core	Expr	is_constant		return true if self is constant false if not or none if the constancy could not be determined conclusively
core	Expr	equals	other failing_expression	return true if self == other false if it doesn't or none if
core	Expr	_eval_interval	x a b	returns evaluation over an interval for most functions this is
core	Expr	_parse_order	cls order	parse and configure the ordering of terms
core	Expr	as_ordered_factors	order	return list of ordered factors if mul else [self]
core	Expr	as_ordered_terms	order data	transform an expression to an ordered list of terms
core	Expr	as_terms		transform an expression to a list of terms
core	Expr	removeO		removes the additive o symbol if there is one
core	Expr	getO		returns the additive o symbol if there is one else none
core	Expr	getn		returns the order of the expression
core	Expr	count_ops	visual	wrapper for count_ops that returns the operation count
core	Expr	args_cnc	cset warn split_1	return [commutative factors non-commutative factors] of self
core	Expr	coeff	x n right	returns the coefficient from the term s containing x**n if n
core	Expr	as_expr		convert a polynomial to a sympy expression
core	Expr	as_coefficient	expr	extracts symbolic coefficient at the given expression in
core	Expr	as_independent		a mostly naive separation of a mul or add into arguments that are not are dependent on deps
core	Expr	as_real_imag	deep	performs complex expansion on 'self' and returns a tuple containing collected both real and imaginary parts
core	Expr	as_powers_dict		return self as a dictionary of factors with each factor being treated as a power
core	Expr	as_coefficients_dict		return a dictionary mapping terms to their rational coefficient
core	Expr	as_coeff_mul		return the tuple c args where self is written as a mul m
core	Expr	as_coeff_add		return the tuple c args where self is written as an add a
core	Expr	primitive		return the positive rational that can be extracted non-recursively from every term of self (i
core	Expr	as_content_primitive	radical clear	this method should recursively remove a rational from all arguments and return that content and the new self primitive
core	Expr	as_numer_denom		expression -> a/b -> a b this is just a stub that should be defined by
core	Expr	extract_multiplicatively	c	return none if it's not possible to make self in the form c * something in a nice way i
core	Expr	extract_additively	c	return self - c if it's possible to subtract c from self and make all matching coefficients move towards zero else return none
core	Expr	could_extract_minus_sign		canonical way to choose an element in the set {e -e} where e is any expression
core	Expr	extract_branch_factor	allow_half	try to write self as exp_polar(2*pi*i*n)*z in a nice way
core	Expr	is_polynomial		return true if self is a polynomial in syms and false otherwise
core	Expr	is_rational_function		test whether function is a ratio of two polynomials in the given symbols syms
core	Expr	is_algebraic_expr		this tests whether a given expression is algebraic or not in the given symbols syms
core	Expr	series	x x0 n dir	series expansion of "self" around x = x0 yielding either terms of the series one by one (the lazy series given when n=none), else
core	Expr	taylor_term	n x	general method for the taylor term
core	Expr	lseries	x x0 dir logx	wrapper for series yielding an iterator of the terms of the series
core	Expr	nseries	x x0 n dir	wrapper to _eval_nseries if assumptions allow else to series
core	Expr	_eval_nseries	x n logx	return terms of series for self up to o(x**n) at x=0 from the positive direction
core	Expr	limit	x xlim dir	compute limit x->xlim
core	Expr	compute_leading_term	x logx	as_leading_term is only allowed for results of series()
core	Expr	as_leading_term		returns the leading nonzero term of the series expansion of self
core	Expr	as_coeff_exponent	x	c*x**e -> c e where x can be any symbolic expression
core	Expr	leadterm	x	returns the leading term a*x**b as a tuple a b
core	Expr	as_coeff_Mul	rational	efficiently extract the coefficient of a product
core	Expr	as_coeff_Add	rational	efficiently extract the coefficient of a summation
core	Expr	fps	x x0 dir hyper	compute formal power power series of self
core	Expr	fourier_series	limits	compute fourier sine/cosine series of self
core	Expr	_expand_hint	expr hint deep	helper for expand() recursively calls expr _eval_expand_hint()
core	Expr	expand	deep modulus power_base power_exp	expand an expression using hints
core	Expr	integrate		see the integrate function in sympy integrals
core	Expr	simplify	ratio measure	see the simplify function in sympy simplify
core	Expr	nsimplify	constants tolerance full	see the nsimplify function in sympy simplify
core	Expr	separate	deep force	see the separate function in sympy simplify
core	Expr	collect	syms func evaluate exact	see the collect function in sympy simplify
core	Expr	together		see the together function in sympy polys
core	Expr	apart	x	see the apart function in sympy polys
core	Expr	ratsimp		see the ratsimp function in sympy simplify
core	Expr	trigsimp		see the trigsimp function in sympy simplify
core	Expr	radsimp		see the radsimp function in sympy simplify
core	Expr	powsimp		see the powsimp function in sympy simplify
core	Expr	combsimp		see the combsimp function in sympy simplify
core	Expr	factor		see the factor() function in sympy polys polytools
core	Expr	refine	assumption	see the refine function in sympy assumptions
core	Expr	cancel		see the cancel function in sympy polys
core	Expr	invert	g	return the multiplicative inverse of self mod g where self (and g) may be symbolic expressions)
core	Expr	round	p	return x rounded to the given decimal place
core		_mag	x	return integer i such that 1 <= x/10**i < 1
core		_n2	a b	return a - b evalf 2 if it a and b are comparable else none
core		fastlog	x	fast approximation of log2 x for an mpf value tuple x
core		pure_complex	v or_real	return a and b if v matches a + i*b where b is not zero and a and b are numbers else none
core		scaled_zero	mag sign	return an mpf representing a power of two with magnitude mag and -1 for precision
core		complex_accuracy	result	returns relative accuracy of a complex number with given accuracies for the real and imaginary parts
core		get_complex_part	expr no prec options	no = 0 for real part no = 1 for imaginary part
core		chop_parts	value prec	chop off tiny real or complex parts
core		get_integer_part	expr no options return_ints	with no = 1 computes ceiling expr with no = -1 computes floor expr
core		add_terms	terms prec target_prec	helper for evalf_add adds a list of mpfval accuracy terms
core		evalf_trig	v prec options	this function handles sin and cos of complex arguments
core		evalf_subs	prec subs	change all float entries in subs to have precision prec
core		check_convergence	numer denom n	returns h g p where
core		hypsum	expr n start prec	sum a rapidly convergent infinite hypergeometric series with given general term e
core	EvalfMixin	evalf	n subs maxn chop	evaluate the given formula to an accuracy of n digits
core	EvalfMixin	_evalf	prec	helper for evalf does the same thing but takes binary precision
core		N	x n	calls x evalf(n \*\*options)
core		evaluate	x	control automatic evaluation this context managers controls whether or not all sympy functions evaluate
core		_unevaluated_Mul		return a well-formed unevaluated mul numbers are collected and put in slot 0 any arguments that are muls will be flattened and args
core	Mul	flatten	cls seq	return commutative noncommutative and order arguments by combining related terms
core	Mul	_mpc_		convert self to an mpmath mpc if possible
core	Mul	as_two_terms		return head and tail of self
core	Mul	as_coefficients_dict		return a dictionary mapping terms to their coefficient
core	Mul	as_coeff_Mul	rational	efficiently extract the coefficient of a product
core	Mul	_expandsums	sums	helper function for _eval_expand_mul
core	Mul	_combine_inverse	lhs rhs	returns lhs/rhs but treats arguments like symbols so things like oo/oo return 1 instead of a nan
core	Mul	_eval_is_positive		return true if self is positive false if not and none if it cannot be determined
core	Mul	_eval_is_prime		if product is a positive integer multiplication will never result in a prime number
core	Mul	as_content_primitive	radical clear	return the tuple (r self/r) where r is the positive rational extracted from self
core	Mul	as_ordered_factors	order	transform an expression into an ordered list of factors
core		prod	a start	return product of elements of a start with int 1 so if only
core		_keep_coeff	coeff factors clear sign	return coeff*factors unevaluated if necessary
core		_is_scalar	e	helper method used in tr
core		_cycle_permute	l	cyclic permutations based on canonical ordering this method does the sort based ascii values while
core		_rearrange_args	l	this just moves the last arg to first position
core	Tr	__new__	cls	construct a trace object
core	Tr	doit		perform the trace operation
core	Tr	permute	pos	permute the arguments cyclically
core		_base_fact	atom	return the literal fact of an atom
core		transitive_closure	implications	computes the transitive closure of a list of implications uses warshall's algorithm as described at
core		deduce_alpha_implications	implications	deduce all implications description by example
core		apply_beta_to_alpha_route	alpha_implications beta_rules	apply additional beta-rules and conditions to already-built alpha implication tables
core		rules_2prereq	rules	build prerequisites table from rules description by example
core	Prover	split_alpha_beta		split proved rules into alpha and beta chains
core	Prover	process_rule	a b	process a -> b rule
core	FactRules	__init__	rules	compile rules into internal lookup tables
core	FactKB	_tell	k v	add fact k=v to the knowledge base
core	FactKB	deduce_all_facts	facts	update the kb with all the implications of a list of facts
core	_cache	print_cache		print cache info
core	_cache	clear_cache		clear cache content
core		__cacheit_debug	maxsize	cacheit + code to check cache consistency
core		_torf	args	return true if all args are true false if they are all false else none
core		_fuzzy_group	args quick_exit	return true if all args are true none if there is any none else false unless quick_exit is true (then return none as soon as a second false
core		fuzzy_bool	x	return true false or none according to x
core		fuzzy_and	args	return true all true false any false or none
core		fuzzy_not	v	not in fuzzy logic return none if v is none else not v
core		fuzzy_or	args	or in fuzzy logic returns true any true false all false or none
core	Logic	fromstring	text	logic from string with space around & and | but none after !
core		_coeff_isneg	a	return true if the leading number is negative
core	FunctionClass	__signature__		allow python 3's inspect signature to give a useful signature for
core	FunctionClass	nargs		return a set of the allowed number of arguments for the function
core	Application	eval	cls	returns a canonical form of cls applied to arguments args
core	Function	_diff_wrt		allow derivatives wrt functions
core	Function	_should_evalf	cls arg	decide if the function should automatically evalf()
core	Function	is_commutative		returns whether the functon is commutative
core	Function	as_base_exp		returns the method as the 2-tuple base exponent
core	Function	_eval_aseries	n args0 x logx	compute an asymptotic expansion around args0 in terms of self args
core	Function	_eval_nseries	x n logx	this function does compute series for multivariate functions but the expansion is always in terms of *one* variable
core	Function	fdiff	argindex	returns the first derivative of the function
core	Function	_eval_as_leading_term	x	stub that should be overridden by new functions to return the first non-zero term in a series if ever an x-dependent
core	Derivative	_diff_wrt		allow derivatives wrt derivatives if it contains a function
core	Derivative	_sort_variables	cls vars	sort variables but disallow sorting of non-symbols
core	Derivative	doit_numerically	z0	evaluate the derivative at z numerically
core	Derivative	as_finite_difference	points x0 wrt	expresses a derivative instance as a finite difference
core	Lambda	variables		the variables used in the internal representation of the function
core	Lambda	expr		the return value of the function
core	Lambda	is_identity		return true if this lambda is an identity function
core	Subs	variables		the variables to be evaluated
core	Subs	expr		the expression on which the substitution operates
core	Subs	point		the values for which the variables are to be substituted
core		diff	f	differentiate f with respect to symbols
core		expand	e deep modulus power_base	expand an expression using methods given as hints
core		expand_mul	expr deep	wrapper around expand that only uses the mul hint see the expand
core		expand_multinomial	expr deep	wrapper around expand that only uses the multinomial hint see the expand
core		expand_log	expr deep force	wrapper around expand that only uses the log hint see the expand
core		expand_func	expr deep	wrapper around expand that only uses the func hint see the expand
core		expand_trig	expr deep	wrapper around expand that only uses the trig hint see the expand
core		expand_complex	expr deep	wrapper around expand that only uses the complex hint see the expand
core		expand_power_base	expr deep force	wrapper around expand that only uses the power_base hint
core		expand_power_exp	expr deep	wrapper around expand that only uses the power_exp hint
core		count_ops	expr visual	return a representation integer or expression of the operations in expr
core		nfloat	expr n exponent	make all rationals in expr floats except those in exponents unless the exponents flag is set to true
core.benchmarks		bench_expand_32		x+y+z+1 **32 -> expand
logic	Boolean	__and__	other	overloading for & operator
logic	Boolean	__or__	other	overloading for |
logic	Boolean	__invert__		overloading for ~
logic	Boolean	__rshift__	other	overloading for >>
logic	Boolean	__lshift__	other	overloading for <<
logic	Boolean	equals	other	returns true if the given formulas have the same truth table
logic	BooleanTrue	as_set		rewrite logic operators and relationals in terms of real sets
logic	BooleanFalse	as_set		rewrite logic operators and relationals in terms of real sets
logic	And	as_set		rewrite logic operators and relationals in terms of real sets
logic	Or	as_set		rewrite logic operators and relationals in terms of real sets
logic	Not	as_set		rewrite logic operators and relationals in terms of real sets
logic		conjuncts	expr	return a list of the conjuncts in the expr s
logic		disjuncts	expr	return a list of the disjuncts in the sentence s
logic		distribute_and_over_or	expr	given a sentence s consisting of conjunctions and disjunctions of literals return an equivalent sentence in cnf
logic		distribute_or_over_and	expr	given a sentence s consisting of conjunctions and disjunctions of literals return an equivalent sentence in dnf
logic		_distribute	info	distributes info[1] over info[2] with respect to info[0]
logic		to_nnf	expr simplify	converts expr to negation normal form
logic		to_cnf	expr simplify	convert a propositional logical sentence s to conjunctive normal form
logic		to_dnf	expr simplify	convert a propositional logical sentence s to disjunctive normal form
logic		is_nnf	expr simplified	checks if expr is in negation normal form
logic		is_cnf	expr	test whether or not an expression is in conjunctive normal form
logic		is_dnf	expr	test whether or not an expression is in disjunctive normal form
logic		_is_form	expr function1 function2	test whether or not an expression is of the required form
logic		eliminate_implications	expr	change >>, <<, and equivalent into &, |, and ~ that is return an
logic		is_literal	expr	returns true if expr is a literal else false
logic		to_int_repr	clauses symbols	takes clauses in cnf format and puts them into an integer representation
logic		term_to_integer	term	return an integer corresponding to the base-2 digits given by term
logic		integer_to_term	k n_bits	return a list of the base-2 digits in the integer k
logic		truth_table	expr variables input	return a generator of all possible configurations of the input variables and the result of the boolean expression for those values
logic		_check_pair	minterm1 minterm2	checks if a pair of minterms differs by only one bit if yes returns
logic		_convert_to_varsSOP	minterm variables	converts a term in the expansion of a function from binary to it's variable form for sop
logic		_convert_to_varsPOS	maxterm variables	converts a term in the expansion of a function from binary to it's variable form for pos
logic		_simplified_pairs	terms	reduces a set of minterms if possible to a simplified set of minterms with one less variable in the terms using qm method
logic		_compare_term	minterm term	return true if a binary term is satisfied by the given term used
logic		_rem_redundancy	l1 terms	after the truth table has been sufficiently simplified use the prime implicant table method to recognize and eliminate redundant pairs
logic		SOPform	variables minterms dontcares	the sopform function uses simplified_pairs and a redundant group- eliminating algorithm to convert the list of all input combos that
logic		POSform	variables minterms dontcares	the posform function uses simplified_pairs and a redundant-group eliminating algorithm to convert the list of all input combinations
logic		_find_predicates	expr	helper to find logical predicates in booleanfunctions
logic		simplify_logic	expr form deep	this function simplifies a boolean function to its simplified version in sop or pos form
logic		_finger	eq	assign a 5-item fingerprint to each symbol in the equation [
logic		bool_map	bool1 bool2	return the simplified version of bool1 and the mapping of variables that makes the two expressions bool1 and bool2 represent the same
logic		literal_symbol	literal	the symbol in this literal without the negation
logic		satisfiable	expr algorithm all_models	check satisfiability of a propositional sentence
logic		valid	expr	check validity of a propositional sentence
logic		pl_true	expr model deep	returns whether the given assignment is a model or not
logic		entails	expr formula_set	check whether the given expr_set entail an expr
logic	PropKB	tell	sentence	add the sentence's clauses to the kb examples
logic	PropKB	ask	query	checks if the query is true given the set of clauses
logic	PropKB	retract	sentence	remove the sentence's clauses from the kb examples
logic.algorithms		dpll_satisfiable	expr all_models	check satisfiability of a propositional sentence
logic.algorithms	SATSolver	_initialize_variables	variables	set up the variable data structures needed
logic.algorithms	SATSolver	_initialize_clauses	clauses	set up the clause data structures needed
logic.algorithms	SATSolver	_find_model		main dpll loop returns a generator of models
logic.algorithms	SATSolver	_current_level		the current decision level data structure examples
logic.algorithms	SATSolver	_clause_sat	cls	check if a clause is satisfied by the current variable setting
logic.algorithms	SATSolver	_is_sentinel	lit cls	check if a literal is a sentinel of a given clause
logic.algorithms	SATSolver	_assign_literal	lit	make a literal assignment
logic.algorithms	SATSolver	_undo		_undo the changes of the most recent decision level
logic.algorithms	SATSolver	_simplify		iterate over the various forms of propagation to simplify the theory
logic.algorithms	SATSolver	_unit_prop		perform unit propagation on the current theory
logic.algorithms	SATSolver	_pure_literal		look for pure literals and assign them when found
logic.algorithms	SATSolver	_vsids_init		initialize the data structures needed for the vsids heuristic
logic.algorithms	SATSolver	_vsids_decay		decay the vsids scores for every literal
logic.algorithms	SATSolver	_vsids_calculate		vsids heuristic calculation examples
logic.algorithms	SATSolver	_vsids_lit_assigned	lit	handle the assignment of a literal for the vsids heuristic
logic.algorithms	SATSolver	_vsids_lit_unset	lit	handle the unsetting of a literal for the vsids heuristic
logic.algorithms	SATSolver	_vsids_clause_added	cls	handle the addition of a new clause for the vsids heuristic
logic.algorithms	SATSolver	_simple_add_learned_clause	cls	add a new clause to the theory
logic.algorithms	SATSolver	_simple_compute_conflict		build a clause representing the fact that at least one decision made so far is wrong
logic.algorithms	SATSolver	_simple_clean_clauses		clean up learned clauses
logic.algorithms		dpll_satisfiable	expr	check satisfiability of a propositional sentence
logic.algorithms		dpll	clauses symbols model	compute satisfiability in a partial model
logic.algorithms		dpll_int_repr	clauses symbols model	compute satisfiability in a partial model
logic.algorithms		pl_true_int_repr	clause model	lightweight version of pl_true
logic.algorithms		unit_propagate	clauses symbol	returns an equivalent set of clauses if a set of clauses contains the unit clause l the other clauses are
logic.algorithms		unit_propagate_int_repr	clauses s	same as unit_propagate but arguments are expected to be in integer representation
logic.algorithms		find_pure_symbol	symbols unknown_clauses	find a symbol and its value if it appears only as a positive literal or only as a negative in clauses
logic.algorithms		find_pure_symbol_int_repr	symbols unknown_clauses	same as find_pure_symbol but arguments are expected to be in integer representation
logic.algorithms		find_unit_clause	clauses model	a unit clause has only 1 variable that is not bound in the model
logic.algorithms		find_unit_clause_int_repr	clauses model	same as find_unit_clause but arguments are expected to be in integer representation
logic.utilities		load	s	loads a boolean expression from a string
logic.utilities		load_file	location	loads a boolean expression from a file
integrals		order_at	a p t	computes the order of a at p with respect to t
integrals		order_at_oo	a d t	computes the order of a/d at oo infinity with respect to t
integrals		normal_denom	fa fd ga gd	normal part of the denominator
integrals		special_denom	a ba bd ca	special part of the denominator
integrals		bound_degree	a b cQ DE	bound on polynomial solutions
integrals		spde	a b c n	rothstein's special polynomial differential equation algorithm
integrals		no_cancel_b_large	b c n DE	poly risch differential equation - no cancellation deg b large enough
integrals		no_cancel_b_small	b c n DE	poly risch differential equation - no cancellation deg b small enough
integrals		no_cancel_equal	b c n DE	poly risch differential equation - no cancellation deg b == deg d - 1 given a derivation d on k[t] with deg d >= 2 n either an integer
integrals		cancel_primitive	b c n DE	poly risch differential equation - cancellation primitive case
integrals		cancel_exp	b c n DE	poly risch differential equation - cancellation hyperexponential case
integrals		solve_poly_rde	b cQ n DE	solve a polynomial risch differential equation with degree bound n
integrals		rischDE	fa fd ga gd	solve a risch differential equation dy + f*y == g
integrals		gauss_legendre	n n_digits	computes the gauss-legendre quadrature [1]_ points and weights
integrals		gauss_laguerre	n n_digits	computes the gauss-laguerre quadrature [1]_ points and weights
integrals		gauss_hermite	n n_digits	computes the gauss-hermite quadrature [1]_ points and weights
integrals		gauss_gen_laguerre	n alpha n_digits	computes the generalized gauss-laguerre quadrature [1]_ points and weights
integrals		gauss_chebyshev_t	n n_digits	computes the gauss-chebyshev quadrature [1]_ points and weights of the first kind
integrals		gauss_chebyshev_u	n n_digits	computes the gauss-chebyshev quadrature [1]_ points and weights of the second kind
integrals		gauss_jacobi	n alpha beta n_digits	computes the gauss-jacobi quadrature [1]_ points and weights
integrals		gauss_lobatto	n n_digits	computes the gauss-lobatto quadrature [1]_ points and weights
integrals		singularityintegrate	f x	this function handles the indefinite integrations of singularity functions
integrals	IntegralTransform	function		the function to be transformed
integrals	IntegralTransform	function_variable		the dependent variable of the function to be transformed
integrals	IntegralTransform	transform_variable		the independent transform variable
integrals	IntegralTransform	free_symbols		this method returns the symbols that will exist when the transform is evaluated
integrals	IntegralTransform	doit		try to evaluate the transform in closed form
integrals		_noconds_	default	this is a decorator generator for dropping convergence conditions
integrals		_mellin_transform	f x s_ integrator	backend function to compute mellin transforms
integrals		mellin_transform	f x s	compute the mellin transform f s of f x ,
integrals		_rewrite_sin	m_n s a b	re-write the sine function sin(m*s + n) as gamma functions compatible with the strip a b
integrals		_rewrite_gamma	f s a b	try to rewrite the product f s as a product of gamma functions so that the inverse mellin transform of f can be expressed as a meijer
integrals		_inverse_mellin_transform	F s x_ strip	a helper for the real inverse_mellin_transform function this one here assumes x to be real and positive
integrals		inverse_mellin_transform	F s x strip	compute the inverse mellin transform of f s over the fundamental strip given by strip= a b
integrals		_simplifyconds	expr s a	naively simplify some conditions occuring in expr, given that \operatorname{re} s > a
integrals		_laplace_transform	f t s_ simplify	the backend function for laplace transforms
integrals		laplace_transform	f t s	compute the laplace transform f s of f t ,
integrals		_inverse_laplace_transform	F s t_ plane	the backend function for inverse laplace transforms
integrals		inverse_laplace_transform	F s t plane	compute the inverse laplace transform of f s , defined as
integrals		_fourier_transform	f x k a	compute a general fourier-type transform f k = a int_-oo^oo exp(b*i*x*k) f x dx
integrals		fourier_transform	f x k	compute the unitary ordinary-frequency fourier transform of f, defined as
integrals		inverse_fourier_transform	F k x	compute the unitary ordinary-frequency inverse fourier transform of f, defined as
integrals		_sine_cosine_transform	f x k a	compute a general sine or cosine-type transform f k = a int_0^oo b*sin(x*k) f x dx
integrals		sine_transform	f x k	compute the unitary ordinary-frequency sine transform of f, defined as
integrals		inverse_sine_transform	F k x	compute the unitary ordinary-frequency inverse sine transform of f, defined as
integrals		cosine_transform	f x k	compute the unitary ordinary-frequency cosine transform of f, defined as
integrals		inverse_cosine_transform	F k x	compute the unitary ordinary-frequency inverse cosine transform of f, defined as
integrals		_hankel_transform	f r k nu	compute a general hankel transform
integrals		hankel_transform	f r k nu	compute the hankel transform of f, defined as
integrals		inverse_hankel_transform	F k r nu	compute the inverse hankel transform of f defined as
integrals		integer_powers	exprs	rewrites a list of expressions as integer multiples of each other
integrals	DifferentialExtension	__init__	f x handle_first dummy	tries to build a transcendental extension tower from f with respect to x
integrals	DifferentialExtension	_auto_attrs		set attributes that are generated automatically
integrals	DifferentialExtension	_exp_part	exps	try to build an exponential extension
integrals	DifferentialExtension	_log_part	logs	try to build a logarithmic extension
integrals	DifferentialExtension	_important_attrs		returns some of the more important attributes of self
integrals	DifferentialExtension	reset		reset self to an initial state used by __init__
integrals	DifferentialExtension	increment_level		increment the level of self
integrals	DifferentialExtension	decrement_level		decrease the level of self
integrals		gcdex_diophantine	a b c	extended euclidean algorithm diophantine version
integrals		frac_in	f t	returns the tuple fa fd where fa and fd are polys in t
integrals		as_poly_1t	p t z	hackish way to convert an element p of k[t 1/t] to k[t z]
integrals		get_case	d t	returns the type of the derivation d
integrals		splitfactor_sqf	p DE coefficientD z	splitting square-free factorization given a derivation d on k[t] and p in k[t], returns (n1
integrals		hermite_reduce	a d DE	hermite reduction - mack's linear version
integrals		laurent_series	a d F n	contribution of f to the full partial fraction decomposition of a/d given a field k of characteristic 0 and a d f in k[x] with d monic
integrals		recognize_derivative	a d DE z	compute the squarefree factorization of the denominator of f and for each di the polynomial h in k[x] (see theorem 2
integrals		recognize_log_derivative	a d DE z	there exists a v in k x * such that f = dv/v where f a rational function if and only if f can be written as f = a/d
integrals		residue_reduce	a d DE z	lazard-rioboo-rothstein-trager resultant reduction
integrals		residue_reduce_to_basic	H DE z	converts the tuple returned by residue_reduce() into a basic expression
integrals		residue_reduce_derivation	H DE z	computes the derivation of an expression returned by residue_reduce()
integrals		integrate_primitive_polynomial	p DE	integration of primitive polynomials
integrals		integrate_primitive	a d DE z	integration of primitive functions
integrals		integrate_hyperexponential_polynomial	p DE z	integration of hyperexponential polynomials
integrals		integrate_hyperexponential	a d DE z	integration of hyperexponential functions
integrals		integrate_hypertangent_polynomial	p DE	integration of hypertangent polynomials
integrals		integrate_nonlinear_no_specials	a d DE z	integration of nonlinear monomials with no specials
integrals		risch_integrate	f x extension handle_first	the risch integration algorithm
integrals		manual_diff	f symbol	derivative of f in form expected by find_substitutions sympy's derivatives for some trig functions like cot aren't in a form
integrals		rewriter	condition rewrite	strategy that rewrites an integrand
integrals		proxy_rewriter	condition rewrite	strategy that rewrites an integrand based on some other criteria
integrals		multiplexer	conditions	apply the rule that matches the condition else none
integrals		alternatives		strategy that makes an alternativerule out of multiple possible results
integrals		integral_steps	integrand symbol	returns the steps needed to compute an integral
integrals		manualintegrate	f var	manualintegrate f var compute indefinite integral of a single variable using an algorithm that
integrals		ratint	f x	performs indefinite integration of rational functions
integrals		log_to_atan	f g	convert complex logarithms to real arctangents
integrals		log_to_real	h q x t	convert complex logarithms to real functions
integrals		change_mul	node x	change_mul node x rearranges the operands of a product bringing to front any simple
integrals		deltaintegrate	f x	deltaintegrate f x the idea for integration is the following
integrals		prde_normal_denom	fa fd G DE	parametric risch differential equation - normal part of the denominator
integrals		real_imag	ba bd gen	helper function to get the real and imaginary part of a rational function evaluated at sqrt -1 without actually evaluating it at sqrt -1
integrals		prde_special_denom	a ba bd G	parametric risch differential equation - special part of the denominator
integrals		prde_linear_constraints	a b G DE	parametric risch differential equation - generate linear constraints on the constants
integrals		constant_system	A u DE	generate a system for the constant solutions
integrals		prde_spde	a b Q n	special polynomial differential equation algorithm parametric version
integrals		prde_no_cancel_b_large	b Q n DE	parametric poly risch differential equation - no cancellation deg b large enough
integrals		prde_no_cancel_b_small	b Q n DE	parametric poly risch differential equation - no cancellation deg b small enough
integrals		param_rischDE	fa fd G DE	solve a parametric risch differential equation dy + f*y == sum(ci*gi i 1 m
integrals		limited_integrate_reduce	fa fd G DE	simpler version of step 1 & 2 for the limited integration problem
integrals		limited_integrate	fa fd G DE	solves the limited integration problem f = dv + sum(ci*wi i 1 n
integrals		parametric_log_deriv_heu	fa fd wa wd	parametric logarithmic derivative heuristic
integrals		is_deriv_k	fa fd DE	checks if df/f is the derivative of an element of k t
integrals		is_log_deriv_k_t_radical	fa fd DE Df	checks if df is the logarithmic derivative of a k t -radical
integrals		is_log_deriv_k_t_radical_in_field	fa fd DE case	checks if f can be written as the logarithmic derivative of a k t -radical
integrals		components	f x	returns a set of all functional components of the given expression which includes symbols function applications and compositions and
integrals		_symbols	name n	get vector of symbols local to this module
integrals		heurisch_wrapper	f x rewrite hints	a wrapper around the heurisch integration algorithm
integrals		heurisch	f x rewrite hints	compute indefinite integral using heuristic risch algorithm
integrals		_create_lookup_table	table	add formulae for the function -> meijerg lookup table
integrals		_mytype	f x	create a hashable entity describing the type of f
integrals		_get_coeff_exp	expr x	when expr is known to be of the form c*x**b with c and/or b possibly 1 return c b
integrals		_exponents	expr x	find the exponents of x not including zero in expr
integrals		_functions	expr x	find the types of functions in expr to estimate the complexity
integrals		_find_splitting_points	expr x	find numbers a such that a linear substitution x -> x + a would hopefully simplify expr
integrals		_split_mul	f x	split expression f into fac po g where fac is a constant factor po = x**s for some s independent of s and g is "the rest"
integrals		_mul_args	f	return a list l such that mul(*l) == f
integrals		_mul_as_two_parts	f	find all the ways to split f into a product of two terms
integrals		_inflate_g	g n	return c h such that h is a g function of argument z**n and g = c*h
integrals		_flip_g	g	turn the g function into one of inverse argument (i
integrals		_inflate_fox_h	g a	let d denote the integrand in the definition of the g function g
integrals		_dummy	name token expr	return a dummy this will return the same dummy if the same token+name is
integrals		_dummy_	name token	return a dummy associated to name and token same effect as declaring
integrals		_is_analytic	f x	check if f x when expressed using g functions on the positive reals
integrals		_condsimp	cond	do naive simplifications on cond
integrals		_eval_cond	cond	re-evaluate the conditions
integrals		_my_principal_branch	expr period full_pb	bring expr nearer to its principal branch by removing superfluous factors
integrals		_rewrite_saxena_1	fac po g x	rewrite the integral fac*po*g dx from zero to infinity as integral fac*g where g has argument a*x
integrals		_check_antecedents_1	g x helper	return a condition under which the mellin transform of g exists
integrals		_int0oo_1	g x	evaluate int_0^\infty g dx using g functions assuming the necessary conditions are fulfilled
integrals		_rewrite_saxena	fac po g1 g2	rewrite the integral fac*po*g1*g2 from 0 to oo in terms of g functions with argument c*x
integrals		_check_antecedents	g1 g2 x	return a condition under which the integral theorem applies
integrals		_int0oo	g1 g2 x	express integral from zero to infinity g1*g2 using a g function assuming the necessary conditions are fulfilled
integrals		_rewrite_inversion	fac po g x	absorb po == x**s into g
integrals		_check_antecedents_inversion	g x	check antecedents for the laplace inversion integral
integrals		_int_inversion	g x t	compute the laplace inversion integral assuming the formula applies
integrals		_rewrite_single	f x recursive	try to rewrite f as a sum of single g functions of the form c*x**s*g(a*x**b), where b is a rational number and c is independent of x
integrals		_rewrite1	f x recursive	try to rewrite f using a sum of single g functions with argument a*x**b
integrals		_rewrite2	f x	try to rewrite f as a product of two g functions of arguments a*x**b
integrals		meijerint_indefinite	f x	compute an indefinite integral of f by rewriting it as a g function
integrals		_meijerint_indefinite_1	f x	helper that does not attempt any substitution
integrals		meijerint_definite	f x a b	integrate f over the interval [a, b], by rewriting it as a product of two g functions or as a single g function
integrals		_guess_expansion	f x	try to guess sensible rewritings for integrand f x
integrals		_meijerint_definite_2	f x	try to integrate f dx from zero to infinty
integrals		_meijerint_definite_3	f x	try to integrate f dx from zero to infinity
integrals		_meijerint_definite_4	f x only_double	try to integrate f dx from zero to infinity
integrals		meijerint_inversion	f x t	compute the inverse laplace transform :math \int_{c+i\infty}^{c-i\infty} f x e^{tx) dx
integrals	Integral	__new__	cls function	create an unevaluated integral
integrals	Integral	free_symbols		this method returns the symbols that will exist when the integral is evaluated
integrals	Integral	transform	x u	performs a change of variables from x to u using the relationship given by x and u which will define the transformations f and f
integrals	Integral	doit		perform the integration using any hints given
integrals	Integral	_eval_derivative	sym	evaluate the derivative of the current integral object by differentiating under the integral sign [1], using the fundamental
integrals	Integral	_eval_integral	f x meijerg risch	calculate the anti-derivative to the function f x
integrals	Integral	as_sum	n method	approximates the definite integral by a sum
integrals		integrate		integrate f var
integrals		line_integrate	field curve vars	line_integrate field curve variables compute the line integral
integrals		trigintegrate	f x conds	integrate f = mul trig over x >>> from sympy import symbol sin cos tan sec csc cot
sets	Range	reversed		return an equivalent range in the opposite order
sets		normalize_theta_set	theta	normalize a real set theta in the interval [0 2*pi) it returns
sets	ComplexRegion	sets		return raw input sets to the self
sets	ComplexRegion	psets		return a tuple of sets productsets input of the self
sets	ComplexRegion	a_interval		return the union of intervals of x when self is in rectangular form or the union of intervals of r when
sets	ComplexRegion	b_interval		return the union of intervals of y when self is in rectangular form or the union of intervals of theta
sets	ComplexRegion	polar		returns true if self is in polar form
sets	ComplexRegion	_measure		the measure of self sets
sets	ComplexRegion	from_real	cls sets	converts given subset of real numbers to a complex region
sets	Set	_infimum_key	expr	return infimum if possible else s infinity
sets	Set	union	other	returns the union of 'self' and 'other'
sets	Set	intersect	other	returns the intersection of 'self' and 'other'
sets	Set	intersection	other	alias for :meth intersect()
sets	Set	_intersect	other	this function should only be used internally self
sets	Set	is_disjoint	other	returns true if 'self' and 'other' are disjoint examples
sets	Set	isdisjoint	other	alias for :meth is_disjoint()
sets	Set	_union	other	this function should only be used internally self
sets	Set	complement	universe	the complement of 'self' w r t the given the universe
sets	Set	symmetric_difference	other	returns symmetric difference of self and other
sets	Set	inf		the infimum of 'self' examples
sets	Set	sup		the supremum of 'self' examples
sets	Set	contains	other	returns true if 'other' is contained in 'self' as an element
sets	Set	is_subset	other	returns true if 'self' is a subset of 'other'
sets	Set	issubset	other	alias for :meth is_subset()
sets	Set	is_proper_subset	other	returns true if 'self' is a proper subset of 'other'
sets	Set	is_superset	other	returns true if 'self' is a superset of 'other'
sets	Set	issuperset	other	alias for :meth is_superset()
sets	Set	is_proper_superset	other	returns true if 'self' is a proper superset of 'other'
sets	Set	powerset		find the power set of 'self'
sets	Set	measure		the lebesgue measure of 'self' examples
sets	Set	boundary		the boundary or frontier of a set a point x is on the boundary of a set s if
sets	Set	is_open		property method to check whether a set is open
sets	Set	is_closed		a property method to check whether a set is closed a set is closed
sets	Set	closure		property method which returns the closure of a set
sets	Set	interior		property method which returns the interior of a set
sets	ProductSet	_contains	element	'in' operator for productsets
sets	ProductSet	_intersect	other	this function should only be used internally see set
sets	ProductSet	is_iterable		a property method which tests whether a set is iterable or not
sets	ProductSet	__iter__		a method which implements is_iterable property method
sets	Interval	start		the left end point of 'self'
sets	Interval	open	cls a b	return an interval including neither boundary
sets	Interval	Lopen	cls a b	return an interval not including the left boundary
sets	Interval	Ropen	cls a b	return an interval not including the right boundary
sets	Interval	end		the right end point of 'self'
sets	Interval	left_open		true if 'self' is left-open
sets	Interval	right_open		true if 'self' is right-open
sets	Interval	_intersect	other	this function should only be used internally see set
sets	Interval	_union	other	this function should only be used internally see set
sets	Interval	is_left_unbounded		return true if the left endpoint is negative infinity
sets	Interval	is_right_unbounded		return true if the right endpoint is positive infinity
sets	Interval	as_relational	x	rewrite an interval in terms of inequalities and logic operators
sets	Union	reduce	args	simplify a :class union using known rules
sets	Union	as_relational	symbol	rewrite a union in terms of equalities and logic operators
sets	Intersection	reduce	args	return a simplified intersection by applying rules
sets	Intersection	as_relational	symbol	rewrite an intersection in terms of equalities and logic operators
sets	Complement	reduce	A B	simplify a :class complement
sets	FiniteSet	_intersect	other	this function should only be used internally see set
sets	FiniteSet	_union	other	this function should only be used internally see set
sets	FiniteSet	_contains	other	tests whether an element other is in the set
sets	FiniteSet	as_relational	symbol	rewrite a finiteset in terms of equalities and logic operators
sets		imageset		return an image of the set under transformation f
external		import_module	module min_module_version min_python_version warn_not_installed	import and return a module if it is installed
solvers		_invert	f_x y x domain	reduce the complex valued equation f x = y to a set of equations {g x = h_1 y g x = h_2 y
solvers		invert_real	f_x y x domain	inverts a real-valued function same as _invert but sets
solvers		_invert_real	f g_ys symbol	helper function for _invert
solvers		_invert_complex	f g_ys symbol	helper function for _invert
solvers		domain_check	f symbol p	returns false if point p is infinite or any subexpression of f is infinite or becomes so after replacing symbol with p
solvers		_is_finite_with_finite_vars	f domain	return true if the given expression is finite for symbols that
solvers		_is_function_class_equation	func_class f symbol	tests whether the equation is an equation of the given function class
solvers		_solve_as_rational	f symbol domain	solve rational functions
solvers		_solve_trig	f symbol domain	helper to solve trigonometric equations
solvers		_solve_as_poly	f symbol domain	solve the equation using polynomial techniques if it already is a polynomial equation or with a change of variables can be made so
solvers		_has_rational_power	expr symbol	returns bool den where bool is true if the term has a non-integer rational power and den is the denominator of the
solvers		_solve_radical	f symbol solveset_solver	helper function to solve equations with radicals
solvers		_solve_abs	f symbol domain	helper function to solve equation involving absolute value function
solvers		solve_decomposition	f symbol domain	function to solve equations via the principle of "decomposition and rewriting"
solvers		_solveset	f symbol domain _check	helper for solveset to return a result from an expression that has already been sympify'ed and is known to contain the
solvers		solveset	f symbol domain	solves a given inequality or equation with set as output parameters
solvers		solvify	f symbol domain	solves an equation using solveset and returns the solution in accordance with the solve output api
solvers		linear_eq_to_matrix	equations	converts a given system of equations into matrix form
solvers		linsolve	system	solve system of n linear equations with m variables which means both under - and overdetermined systems are supported
solvers		substitution	system symbols result known_symbols	solves the system using substitution method it is used in
solvers		nonlinsolve	system	solve system of n non linear equations with m variables which means both under and overdetermined systems are supported
solvers		diophantine	eq param syms permute	simplify the solution procedure of diophantine equation eq by converting it into a product of terms which should equal zero
solvers		merge_solution	var var_t solution	this is used to construct the full solution from the solutions of sub equations
solvers		diop_solve	eq param	solves the diophantine equation eq
solvers		diop_linear	eq param	solves linear diophantine equations
solvers		_diop_linear	var coeff param	solves diophantine equations of the form a_0*x_0 + a_1*x_1 +
solvers		base_solution_linear	c a b t	return the base solution for the linear equation ax + by = c
solvers		divisible	a b	returns true if a is divisible by b and false otherwise
solvers		diop_quadratic	eq param	solves quadratic diophantine equations
solvers		is_solution_quad	var coeff u v	check whether u v is solution to the quadratic binary diophantine equation with the variable list var and coefficient dictionary
solvers		diop_DN	D N t	solves the equation x^2 - dy^2 = n
solvers		_special_diop_DN	D N	solves the equation x^2 - dy^2 = n for the special case where 1 < n**2 < d and d is not a perfect square
solvers		cornacchia	a b m	solves ax^2 + by^2 = m where \gcd a b = 1 = gcd a m and a b > 0
solvers		PQa	P_0 Q_0 D	returns useful information needed to solve the pell equation
solvers		diop_bf_DN	D N t	uses brute force to solve the equation x^2 - dy^2 = n
solvers		equivalent	u v r s	returns true if two solutions u v and r s of x^2 - dy^2 = n belongs to the same equivalence class and false otherwise
solvers		length	P Q D	returns the length of aperiodic part + length of periodic part of continued fraction representation of \frac{p + \sqrt{d}}{q}
solvers		transformation_to_DN	eq	this function transforms general quadratic ax^2 + bxy + cy^2 + dx + ey + f = 0
solvers		find_DN	eq	this function returns a tuple d n of the simplified form x^2 - dy^2 = n, corresponding to the general quadratic
solvers		check_param	x y a t	if there is a number modulo a such that x and y are both integers then return a parametric representation for x and y
solvers		diop_ternary_quadratic	eq	solves the general quadratic ternary form ax^2 + by^2 + cz^2 + fxy + gyz + hxz = 0
solvers		transformation_to_normal	eq	returns the transformation matrix that converts a general ternary quadratic equation eq (ax^2 + by^2 + cz^2 + dxy + eyz + fxz)
solvers		parametrize_ternary_quadratic	eq	returns the parametrized general solution for the ternary quadratic equation eq which has the form
solvers		diop_ternary_quadratic_normal	eq	solves the quadratic ternary diophantine equation ax^2 + by^2 + cz^2 = 0
solvers		sqf_normal	a b c steps	return a', b', c', the coefficients of the square-free normal form of ax^2 + by^2 + cz^2 = 0, where a', b', c' are pairwise
solvers		square_factor	a	returns an integer c s t a = c^2k \ c k \in z here k is square
solvers		reconstruct	A B z	reconstruct the z value of an equivalent solution of ax^2 + by^2 + cz^2 from the z value of a solution of the square-free normal form of the
solvers		ldescent	A B	return a non-trivial solution to w^2 = ax^2 + by^2 using lagrange's method return none if there is no such solution
solvers		descent	A B	returns a non-trivial solution x y z to x^2 = ay^2 + bz^2 using lagrange's descent method with lattice-reduction
solvers		gaussian_reduce	w a b	returns a reduced solution x z to the congruence x^2 - az^2 \equiv 0 \ (mod \ b) so that x^2 + |a|z^2 is minimal
solvers		dot	u v w a	returns a special dot product of the vectors u = (u_{1}, u_{2}) and v = (v_{1}, v_{2}) which is defined in order to reduce solution of
solvers		norm	u w a b	returns the norm of the vector u = (u_{1}, u_{2}) under the dot product defined by u \cdot v = (wu_{1} + bu_{2})(w*v_{1} + bv_{2}) + |a|*u_{1}*v_{1}
solvers		holzer	x y z a	simplify the solution x y z of the equation ax^2 + by^2 = cz^2 with a b c > 0 and z^2 \geq \mid ab \mid to
solvers		diop_general_pythagorean	eq param	solves the general pythagorean equation a_{1}^2x_{1}^2 + a_{2}^2x_{2}^2 +
solvers		diop_general_sum_of_squares	eq limit	solves the equation x_{1}^2 + x_{2}^2 + + x_{n}^2 - k = 0
solvers		diop_general_sum_of_even_powers	eq limit	solves the equation x_{1}^e + x_{2}^e + + x_{n}^e - k = 0
solvers		partition	n k zeros	returns a generator that can be used to generate partitions of an integer n
solvers		prime_as_sum_of_two_squares	p	represent a prime p as a unique sum of two squares this can only be done if the prime is congruent to 1 mod 4
solvers		sum_of_three_squares	n	returns a 3-tuple a b c such that a^2 + b^2 + c^2 = n and a b c \geq 0
solvers		sum_of_four_squares	n	returns a 4-tuple a b c d such that a^2 + b^2 + c^2 + d^2 = n
solvers		power_representation	n p k zeros	returns a generator for finding k-tuples of integers (n_{1}, n_{2},
solvers		sum_of_squares	n k zeros	return a generator that yields the k-tuples of nonnegative values the squares of which sum to n
solvers		_can_do_sum_of_squares	n k	return true if n can be written as the sum of k squares false if it can't or 1 if k == 2 and n is prime (in which
solvers		_preprocess	expr func hint	prepare expr for solving by making sure that differentiation is done so that only func remains in unevaluated derivatives and
solvers		ode_order	expr func	returns the order of a given differential equation with respect to func
solvers		_desolve	eq func hint ics	this is a helper function to dsolve and pdsolve in the ode and pde modules
solvers		_filtered_gens	poly symbol	process the generators of poly, returning the set of generators that have symbol
solvers		_mostfunc	lhs func X	returns the term in lhs which contains the most of the func-type things e
solvers		_linab	arg symbol	return a b x assuming arg can be written as a*x + b where x is a symbol-dependent factor and a and b are
solvers		_lambert	eq x	given an expression assumed to be in the form f(x a
solvers		_solve_lambert	f symbol gens	return solution to f if it is a lambert-type expression else raise notimplementederror
solvers		bivariate_type	f x y	given an expression f 3 tests will be done to see what type of composite bivariate it might be options for u x y are :
solvers		sub_func_doit	eq func new	when replacing the func with something else we usually want the derivative evaluated so this function helps in making that happen
solvers		get_numbered_constants	eq num start prefix	returns a list of constants that do not occur in eq already
solvers		dsolve	eq func hint simplify	solves any supported kind of ordinary differential equation and system of ordinary differential equations
solvers		_helper_simplify	eq hint match simplify	helper function of dsolve that calls the respective :py mod ~sympy
solvers		classify_ode	eq func dict ics	returns a tuple of possible :py meth ~sympy solvers ode dsolve
solvers		classify_sysode	eq funcs	returns a dictionary of parameter names and values that define the system of ordinary differential equations in eq
solvers		checksysodesol	eqs sols func	substitutes corresponding sols for each functions into each eqs and checks that the result of substitutions for each equation is 0
solvers		odesimp	eq func order constants	simplifies odes including trying to solve for func and running :py meth ~sympy
solvers		checkodesol	ode sol func order	substitutes sol into ode and checks that the result is 0
solvers		ode_sol_simplicity	sol func trysolving	returns an extended integer representing how simple a solution to an ode is
solvers		constantsimp	expr constants	simplifies an expression with arbitrary constants in it
solvers		constant_renumber	expr symbolname startnumber endnumber	renumber arbitrary constants in expr to have numbers 1 through n where n is endnumber - startnumber + 1 at most
solvers		_handle_Integral	expr func order hint	converts a solution with integrals in it into an actual solution
solvers		ode_1st_exact	eq func order match	solves 1st order exact ordinary differential equations
solvers		ode_1st_homogeneous_coeff_best	eq func order match	returns the best solution to an ode from the two hints 1st_homogeneous_coeff_subs_dep_div_indep and
solvers		ode_1st_homogeneous_coeff_subs_dep_div_indep	eq func order match	solves a 1st order differential equation with homogeneous coefficients using the substitution u_1 = \frac{\text{<dependent
solvers		ode_1st_homogeneous_coeff_subs_indep_div_dep	eq func order match	solves a 1st order differential equation with homogeneous coefficients using the substitution u_2 = \frac{\text{<independent
solvers		homogeneous_order	eq	returns the order n if g is homogeneous and none if it is not homogeneous
solvers		ode_1st_linear	eq func order match	solves 1st order linear differential equations
solvers		ode_Bernoulli	eq func order match	solves bernoulli differential equations
solvers		ode_Riccati_special_minus2	eq func order match	the general riccati equation has the form
solvers		ode_Liouville	eq func order match	solves 2nd order liouville differential equations
solvers		ode_2nd_power_series_ordinary	eq func order match	gives a power series solution to a second order homogeneous differential equation with polynomial coefficients at an ordinary point
solvers		ode_2nd_power_series_regular	eq func order match	gives a power series solution to a second order homogeneous differential equation with polynomial coefficients at a regular point
solvers		_frobenius	n m p0 q0	returns a dict with keys as coefficients and values as their values in terms of c0
solvers		_nth_linear_match	eq func order	matches a differential equation to the linear form
solvers		ode_nth_linear_euler_eq_homogeneous	eq func order match	solves an n\th order linear homogeneous variable-coefficient cauchy-euler equidimensional ordinary differential equation
solvers		ode_nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients	eq func order match	solves an n\th order linear non homogeneous cauchy-euler equidimensional ordinary differential equation using undetermined coefficients
solvers		ode_nth_linear_euler_eq_nonhomogeneous_variation_of_parameters	eq func order match	solves an n\th order linear non homogeneous cauchy-euler equidimensional ordinary differential equation using variation of parameters
solvers		ode_almost_linear	eq func order match	solves an almost-linear differential equation
solvers		_linear_coeff_match	expr func	helper function to match hint linear_coefficients
solvers		ode_linear_coefficients	eq func order match	solves a differential equation with linear coefficients
solvers		ode_separable_reduced	eq func order match	solves a differential equation that can be reduced to the separable form
solvers		ode_1st_power_series	eq func order match	the power series solution is a method which gives the taylor series expansion to the solution of a differential equation
solvers		ode_nth_linear_constant_coeff_homogeneous	eq func order match	solves an n\th order linear homogeneous differential equation with constant coefficients
solvers		ode_nth_linear_constant_coeff_undetermined_coefficients	eq func order match	solves an n\th order linear differential equation with constant coefficients using the method of undetermined coefficients
solvers		_solve_undetermined_coefficients	eq func order match	helper function for the method of undetermined coefficients
solvers		_undetermined_coefficients_match	expr x	returns a trial function match if undetermined coefficients can be applied to expr, and none otherwise
solvers		ode_nth_linear_constant_coeff_variation_of_parameters	eq func order match	solves an n\th order linear differential equation with constant coefficients using the method of variation of parameters
solvers		_solve_variation_of_parameters	eq func order match	helper function for the method of variation of parameters and nonhomogeneous euler eq
solvers		ode_separable	eq func order match	solves separable 1st order differential equations
solvers		checkinfsol	eq infinitesimals func order	this function is used to check if the given infinitesimals are the actual infinitesimals of the given first order differential equation
solvers		ode_lie_group	eq func order match	this hint implements the lie group method of solving first order differential equations
solvers		_lie_group_remove	coords	this function is strictly meant for internal use by the lie group ode solving method
solvers		infinitesimals	eq func order hint	the infinitesimal functions of an ordinary differential equation \xi x y and \eta x y , are the infinitesimals of the lie group of point transformations
solvers		lie_heuristic_abaco1_simple	match comp	the first heuristic uses the following four sets of assumptions on \xi and \eta
solvers		lie_heuristic_abaco1_product	match comp	the second heuristic uses the following two assumptions on \xi and \eta
solvers		lie_heuristic_bivariate	match comp	the third heuristic assumes the infinitesimals \xi and \eta to be bi-variate polynomials in x and y
solvers		lie_heuristic_chi	match comp	the aim of the fourth heuristic is to find the function \chi x y that satisifies the pde \frac{d\chi}{dx} + h\frac{d\chi}{dx}
solvers		lie_heuristic_function_sum	match comp	this heuristic uses the following two assumptions on \xi and \eta
solvers		lie_heuristic_abaco2_similar	match comp	this heuristic uses the following two assumptions on \xi and \eta
solvers		lie_heuristic_abaco2_unique_unknown	match comp	this heuristic assumes the presence of unknown functions or known functions with non-integer powers
solvers		lie_heuristic_abaco2_unique_general	match comp	this heuristic finds if infinitesimals of the form \eta = f x , \xi = g y without making any assumptions on h
solvers		lie_heuristic_linear	match comp	this heuristic assumes 1
solvers		_linear_2eq_order1_type1	x y t r	it is classified under system of two linear homogeneous first-order constant-coefficient ordinary differential equations
solvers		_linear_2eq_order1_type2	x y t r	the equations of this type are
solvers		_linear_2eq_order1_type3	x y t r	the equations of this type of ode are
solvers		_linear_2eq_order1_type4	x y t r	the equations of this type of ode are
solvers		_linear_2eq_order1_type5	x y t r	the equations of this type of ode are
solvers		_linear_2eq_order1_type6	x y t r	the equations of this type of ode are
solvers		_linear_2eq_order1_type7	x y t r	the equations of this type of ode are
solvers		_linear_2eq_order2_type1	x y t r	system of two constant-coefficient second-order linear homogeneous differential equations
solvers		_linear_2eq_order2_type2	x y t r	the equations in this type are
solvers		_linear_2eq_order2_type3	x y t r	these type of equation is used for describing the horizontal motion of a pendulum taking into account the earth rotation
solvers		_linear_2eq_order2_type4	x y t r	these equations are found in the theory of oscillations
solvers		_linear_2eq_order2_type5	x y t r	the equation which come under this catagory are
solvers		_linear_2eq_order2_type6	x y t r	the equations are
solvers		_linear_2eq_order2_type7	x y t r	the equations are given as
solvers		_linear_2eq_order2_type8	x y t r	the equation of this catagory are
solvers		_linear_2eq_order2_type9	x y t r	math : t^2 x'' + a_1 t x' + b_1 t y' + c_1 x + d_1 y = 0
solvers		_linear_2eq_order2_type10	x y t r	the equation of this catagory are
solvers		_linear_2eq_order2_type11	x y t r	the equations which comes under this type are
solvers		_linear_3eq_order1_type1	x y z t	math : x' = ax
solvers		_linear_3eq_order1_type2	x y z t	the equations of this type are
solvers		_linear_3eq_order1_type3	x y z t	equations of this system of odes
solvers		_linear_neq_order1_type1	match_	system of n first-order constant-coefficient linear nonhomogeneous differential equation
solvers		_nonlinear_2eq_order1_type3	x y t eq	autonomous system of general form
solvers		_nonlinear_2eq_order1_type5	func t eq	clairaut system of odes
solvers		_nonlinear_3eq_order1_type5	x y t eq	math : x' = x (c f_2 - b f_3), \enspace y' = y (a f_3 - c f_1), \enspace z' = z (b f_1 - a f_2)
solvers		solve_poly_system	seq	solve a system of polynomial equations
solvers		solve_biquadratic	f g opt	solve a system of two bivariate quadratic polynomial equations
solvers		solve_generic	polys opt	solve a generic system of polynomial equations
solvers		solve_triangulated	polys	solve a polynomial system using gianni-kalkbrenner algorithm
solvers		solve_poly_inequality	poly rel	solve a polynomial inequality with rational coefficients
solvers		solve_poly_inequalities	polys	solve polynomial inequalities with rational coefficients
solvers		solve_rational_inequalities	eqs	solve a system of rational inequalities with rational coefficients
solvers		reduce_rational_inequalities	exprs gen relational	reduce a system of rational inequalities with rational coefficients
solvers		reduce_abs_inequality	expr rel gen	reduce an inequality with nested absolute values
solvers		reduce_abs_inequalities	exprs gen	reduce a system of inequalities with nested absolute values
solvers		solve_univariate_inequality	expr gen relational domain	solves a real univariate inequality
solvers		_pt	start end	return a point between start and end
solvers		_solve_inequality	ie s	a hacky replacement for solve since the latter only works for univariate inequalities
solvers		reduce_inequalities	inequalities symbols	reduce a system of inequalities with rational coefficients
solvers		rsolve_poly	coeffs f n	given linear recurrence operator \operatorname{l} of order k with polynomial coefficients and inhomogeneous equation
solvers		rsolve_ratio	coeffs f n	given linear recurrence operator \operatorname{l} of order k with polynomial coefficients and inhomogeneous equation
solvers		rsolve_hyper	coeffs f n	given linear recurrence operator \operatorname{l} of order k with polynomial coefficients and inhomogeneous equation
solvers		rsolve	f y init	solve univariate recurrence with rational coefficients
solvers		decompogen	f symbol	computes general functional decomposition of f
solvers		compogen	g_s symbol	returns the composition of functions
solvers		pdsolve	eq func hint dict	solves any supported kind of partial differential equation
solvers		_helper_simplify	eq hint func order	helper function of pdsolve that calls the respective pde functions to solve for the partial differential
solvers		_handle_Integral	expr func order hint	converts a solution with integrals in it into an actual solution
solvers		classify_pde	eq func dict	returns a tuple of possible pdsolve() classifications for a pde
solvers		checkpdesol	pde sol func solve_for_func	checks if the given solution satisfies the partial differential equation
solvers		pde_1st_linear_constant_coeff_homogeneous	eq func order match	solves a first order linear homogeneous partial differential equation with constant coefficients
solvers		pde_1st_linear_constant_coeff	eq func order match	solves a first order linear partial differential equation with constant coefficients
solvers		pde_1st_linear_variable_coeff	eq func order match	solves a first order linear partial differential equation with variable coefficients
solvers		_simplify_variable_coeff	sol syms func funcarg	helper function to replace constants by functions in 1st_linear_variable_coeff
solvers		pde_separate	eq fun sep strategy	separate variables in partial differential equation either by additive or multiplicative separation approach
solvers		pde_separate_add	eq fun sep	helper function for searching additive separable solutions
solvers		pde_separate_mul	eq fun sep	helper function for searching multiplicative separable solutions
solvers		_separate	eq dep others	separate expression into two parts based on dependencies of variables
solvers		_ispow	e	return true if e is a pow or is exp
solvers		denoms	eq	return recursively set of all denominators that appear in eq that contain any symbol in symbols; if symbols are not
solvers		checksol	f symbol sol	checks whether sol is a solution of equation f == 0
solvers		check_assumptions	expr against	checks whether expression expr satisfies all assumptions
solvers		solve	f	algebraically solves equations and systems of equations
solvers		_solve	f	return a checked solution for f in terms of one or more of the symbols
solvers		solve_linear	lhs rhs symbols exclude	return a tuple derived from f = lhs - rhs that is one of the following
solvers		minsolve_linear_system	system	find a particular solution to a linear system
solvers		solve_linear_system	system	solve system of n linear equations with m variables which means both under- and overdetermined systems are supported
solvers		solve_undetermined_coeffs	equ coeffs sym	solve equation of a type p(x a_1 a_k) == q x where both
solvers		solve_linear_system_LU	matrix syms	solves the augmented matrix system using lusolve and returns a dictionary in which solutions are keyed to the symbols of syms *as ordered*
solvers		det_perm	M	return the det(m) by using permutations to select factors
solvers		det_minor	M	return the det m computed from minors without introducing new nesting in products
solvers		det_quick	M method	return det m assuming that either there are lots of zeros or the size of the matrix
solvers		inv_quick	M	return the inverse of m, assuming that either there are lots of zeros or the size of the matrix
solvers		_tsolve	eq sym	helper for _solve that solves a transcendental equation with respect to the given symbol
solvers		nsolve		solve a nonlinear equation system numerically : nsolve(f [args ] x0 modules=['mpmath'], **kwargs)
solvers		_invert	eq	return tuple i d where i is independent of symbols and d contains symbols
solvers		unrad	eq	remove radicals with symbolic arguments and return eq cov none or raise an error
series		richardson	A k n N	calculate an approximation for lim k->oo a k using richardson extrapolation with the terms a n a n+1
series		shanks	A k n m	calculate an approximation for lim k->oo a k using the n-term shanks transformation s a n
series		dominant	expr n	finds the most dominating term in an expression
series		limit_seq	expr n trials	finds limits of terms having sequences at infinity
series	SeriesBase	interval		the interval on which the series is defined
series	SeriesBase	start		the starting point of the series this point is included
series	SeriesBase	stop		the ending point of the series this point is included
series	SeriesBase	length		length of the series expansion
series	SeriesBase	variables		returns a tuple of variables that are bounded
series	SeriesBase	free_symbols		this method returns the symbols in the object excluding those that take on a specific value (i
series	SeriesBase	term	pt	term at point pt of a series
series	SeriesBase	_ith_point	i	returns the i'th point of a series if start point is negative infinity point is returned from the end
series	SeqBase	_start_key	expr	return start if possible else s infinity
series	SeqBase	_intersect_interval	other	returns start and stop
series	SeqBase	gen		returns the generator for the sequence
series	SeqBase	interval		the interval on which the sequence is defined
series	SeqBase	start		the starting point of the sequence this point is included
series	SeqBase	stop		the ending point of the sequence this point is included
series	SeqBase	length		length of the sequence
series	SeqBase	variables		returns a tuple of variables that are bounded
series	SeqBase	free_symbols		this method returns the symbols in the object excluding those that take on a specific value (i
series	SeqBase	coeff	pt	returns the coefficient at point pt
series	SeqBase	_ith_point	i	returns the i'th point of a sequence
series	SeqBase	_add	other	should only be used internally
series	SeqBase	_mul	other	should only be used internally
series	SeqBase	coeff_mul	other	should be used when other is not a sequence should be
series	SeqBase	__add__	other	returns the term-wise addition of 'self' and 'other'
series	SeqBase	__sub__	other	returns the term-wise subtraction of 'self' and 'other'
series	SeqBase	__neg__		negates the sequence
series	SeqBase	__mul__	other	returns the term-wise multiplication of 'self' and 'other'
series	SeqBase	find_linear_recurrence	n d gfvar	finds the shortest linear recurrence that satisfies the first n terms of sequence of order \leq n/2 if possible
series	EmptySequence	coeff_mul	coeff	see docstring of seqbase coeff_mul
series	SeqPer	_add	other	see docstring of seqbase _add
series	SeqPer	_mul	other	see docstring of seqbase _mul
series	SeqPer	coeff_mul	coeff	see docstring of seqbase coeff_mul
series	SeqFormula	_add	other	see docstring of seqbase _add
series	SeqFormula	_mul	other	see docstring of seqbase _mul
series	SeqFormula	coeff_mul	coeff	see docstring of seqbase coeff_mul
series		sequence	seq limits	returns appropriate sequence object
series	SeqExprOp	gen		generator for the sequence
series	SeqExprOp	interval		sequence is defined on the intersection
series	SeqExprOp	variables		cumulative of all the bound variables
series	SeqAdd	reduce	args	simplify :class seqadd using known rules
series	SeqAdd	_eval_coeff	pt	adds up the coefficients of all the sequences at point pt
series	SeqMul	reduce	args	simplify a :class seqmul using known rules
series	SeqMul	_eval_coeff	pt	multiplies the coefficients of all the sequences at point pt
series		approximants	l X simplify	return a generator for consecutive pade approximants for a series
series		rational_algorithm	f x k order	rational algorithm for computing formula of coefficients of formal power series
series		rational_independent	terms x	returns a list of all the rationally independent terms
series		simpleDE	f x g order	generates simple de
series		exp_re	DE r k	converts a de with constant coefficients explike into a re
series		hyper_re	DE r k	converts a de into a re
series		_compute_formula	f x P Q	computes the formula for f
series		_rsolve_hypergeometric	f x P Q	recursive wrapper to rsolve_hypergeometric
series		rsolve_hypergeometric	f x P Q	solves re of hypergeometric type
series		_solve_hyper_RE	f x RE g	see docstring of :func rsolve_hypergeometric for details
series		_solve_explike_DE	f x DE g	solves de with constant coefficients
series		_solve_simple	f x DE g	converts de into re and solves using :func rsolve
series		_transform_explike_DE	DE g x order	converts de with free parameters into de with constant coefficients
series		_transform_DE_RE	DE g k order	converts de with free parameters into re of hypergeometric type
series		solve_de	f x DE order	solves the de
series		hyper_algorithm	f x k order	hypergeometric algorithm for computing formal power series
series		_compute_fps	f x x0 dir	recursive wrapper to compute fps
series		compute_fps	f x x0 dir	computes the formula for formal power series of a function
series	FormalPowerSeries	infinite		returns an infinite representation of the series
series	FormalPowerSeries	_get_pow_x	term	returns the power of x in a term
series	FormalPowerSeries	polynomial	n	truncated series as polynomial
series	FormalPowerSeries	integrate	x	integrate formal power series
series		fps	f x x0 dir	generates formal power series of f
series		compare	a b x	returns "<" if a<b "=" for a == b ">" for a>b
series	SubsSet	do_subs	e	substitute the variables with expressions
series	SubsSet	meets	s2	tell whether or not self and s2 have non-empty intersection
series	SubsSet	union	s2 exps	compute the union of self and s2 adjusting exps
series	SubsSet	copy		create a shallow copy of subsset
series		mrv	e x	returns a subsset of most rapidly varying mrv subexpressions of 'e',
series		mrv_max3	f expsf g expsg	computes the maximum of two sets of expressions f and g which are in the same comparability class i
series		mrv_max1	f g exps x	computes the maximum of two sets of expressions f and g which are in the same comparability class i
series		sign	e x	returns a sign of an expression e x for x->oo
series		limitinf	e x	limit e x for x-> oo
series		calculate_series	e x logx	calculates at least one term of the series of "e" in "x"
series		mrv_leadterm	e x	returns c0 e0 for e
series		build_expression_tree	Omega rewrites	helper function for rewrite
series		rewrite	e Omega x wsym	e x the function
series		gruntz	e z z0 dir	compute the limit of e z at the point z0 using the gruntz algorithm
series		fourier_cos_seq	func limits n	returns the cos sequence in a fourier series
series		fourier_sin_seq	func limits n	returns the sin sequence in a fourier series
series		_process_limits	func limits	limits should be of the form x start stop
series	FourierSeries	truncate	n	return the first n nonzero terms of the series
series	FourierSeries	sigma_approximation	n	return :math \sigma-approximation of fourier series with respect to order n
series	FourierSeries	shift	s	shift the function by a term independent of x
series	FourierSeries	shiftx	s	shift x by a term independent of x
series	FourierSeries	scale	s	scale the function by a term independent of x
series	FourierSeries	scalex	s	scale x by a term independent of x
series		fourier_series	f limits	computes fourier sine/cosine series expansion
series	Order	contains	expr	return true if expr belongs to order(self expr \*self variables)
series		residue	expr x x0	finds the residue of expr at the point x=x0
series		finite_diff	expression variable increment	takes as input a polynomial expression and the variable used to construct it and returns the difference between function's value when the input is
series		finite_diff_kauers	sum	takes as input a sum instance and returns the difference between the sum with the upper index incremented by 1 and the original sum
series		series	expr x x0 n	series expansion of expr around point x = x0
series		limit	e z z0 dir	compute the limit of e z at the point z0
printing		sstr	expr	returns the expression as a string
printing		sstrrepr	expr	return expr in mixed str/repr form i
printing		precedence	item	returns the precedence of a given object
printing		precedence_traditional	item	returns the precedence of a given object according to the traditional rules of mathematics
printing		cxxcode	expr assign_to standard	c++ equivalent of :func sympy ccode
printing	LatexPrinter	_needs_brackets	expr	returns true if the expression needs to be wrapped in brackets when printed false otherwise
printing	LatexPrinter	_needs_function_brackets	expr	returns true if the expression needs to be wrapped in brackets when passed as an argument to a function false otherwise
printing	LatexPrinter	_needs_mul_brackets	expr first last	returns true if the expression needs to be wrapped in brackets when printed as part of a mul false otherwise
printing	LatexPrinter	_needs_add_brackets	expr	returns true if the expression needs to be wrapped in brackets when printed as part of an add false otherwise
printing	LatexPrinter	_hprint_Function	func	logic to decide how to render a function to latex
printing	LatexPrinter	_print_Function	expr exp	render functions to latex handling functions that latex knows about e
printing		translate	s	check for a modifier ending the string if present convert the
printing		latex	expr	convert the given expression to latex representation
printing		print_latex	expr	prints latex representation of the given expression
printing	Printer	set_global_settings	cls	set system-wide printing settings
printing	Printer	doprint	expr	returns printer's representation for expr as a string
printing	Printer	_print	expr	internal dispatcher tries the following concepts to print an expression
printing	Printer	_as_ordered_terms	expr order	a compatibility function for ordering terms in add
printing	JuliaCodePrinter	indent_code	code	accepts a string of code or a list of code lines
printing		julia_code	expr assign_to	converts expr to a string of julia code
printing		print_julia_code	expr	prints the julia representation of the given expression
printing		purestr	x	a string that follows obj = type obj (*obj args) exactly
printing		styleof	expr styles	merge style dictionaries in order >>> from sympy import symbol basic expr
printing		attrprint	d delimiter	print a dictionary of attributes >>> from sympy
printing		dotnode	expr styles labelfunc pos	string defining a node >>> from sympy
printing		dotedges	expr atom pos repeat	list of strings for all expr->expr arg pairs
printing		dotprint	expr styles atom maxdepth	dot description of a sympy expression tree options are
printing	ReprPrinter	reprify	args sep	prints each item in args and joins them with sep
printing	ReprPrinter	emptyPrinter	expr	the fallback printer
printing		srepr	expr	return expr in repr form
printing		get_math_macros		returns a dictionary with math-related macros from math h/cmath
printing	C89CodePrinter	indent_code	code	accepts a string of code or a list of code lines
printing		ccode	expr assign_to standard	converts an expr to a string of c code parameters
printing		print_ccode	expr	prints c representation of the given expression
printing	LLVMJitCode	_create_args	func_args	create types for function arguments
printing	LLVMJitCode	_create_function_base		create function with name and type signature
printing	LLVMJitCode	_create_param_dict	func_args	mapping of symbolic values to function arguments
printing	LLVMJitCode	_create_function	expr	create function body and return llvm ir
printing	LLVMJitCodeCallback	_create_function	expr	create function body and return llvm ir
printing		_llvm_jit_code	args expr signature callback_type	create a native code function from a sympy expression
printing		llvm_callable	args expr callback_type	compile function from a sympy expression expressions are evaluated using double precision arithmetic
printing	MCodePrinter	__init__	settings	register function mappings supplied by user
printing		mathematica_code	expr	converts an expr to a string of the wolfram mathematica code examples
printing	RustCodePrinter	_print_Function	expr	basic function for printing function function style :
printing	RustCodePrinter	indent_code	code	accepts a string of code or a list of code lines
printing		rust_code	expr assign_to	converts an expr to a string of rust code parameters
printing		print_rust_code	expr	prints rust representation of the given expression
printing		python	expr	return python interpretation of passed expression
printing		print_python	expr	print output of python() function
printing		split_super_sub	text	split a symbol name into a name superscripts and subscripts the first part of the symbol name is considered to be its actual
printing		requires_partial	expr	return whether a partial derivative symbol is required for printing this requires checking how many free variables there are
printing	JavascriptCodePrinter	indent_code	code	accepts a string of code or a list of code lines
printing		jscode	expr assign_to	converts an expr to a string of javascript code parameters
printing		print_jscode	expr	prints the javascript representation of the given expression
printing	RCodePrinter	_get_loop_opening_ending	indices	returns a tuple (open_lines close_lines) containing lists of codelines
printing	RCodePrinter	indent_code	code	accepts a string of code or a list of code lines
printing		rcode	expr assign_to	converts an expr to a string of r code parameters
printing		print_rcode	expr	prints r representation of the given expression
printing		preview	expr output viewer euler	view expression or latex markup in png dvi postscript or pdf form
printing	MathMLPrinter	doprint	expr	prints the expression as mathml
printing	MathMLPrinter	mathml_tag	e	returns the mathml tag for an expression
printing	MathMLPrinter	_print_GoldenRatio	e	we use unicode #x3c6 for greek letter phi as defined here http //www
printing	MathMLPrinter	_print_list	seq	mathml reference for the <list> element http //www
printing		mathml	expr	returns the mathml representation of expr
printing		print_mathml	expr	prints a pretty representation of the mathml code for expr examples
printing		print_gtk	x start_viewer	print to gtkmathview a gtk widget capable of rendering mathml
printing	TensorflowPrinter	_print_And	expr	logical and printer
printing	TensorflowPrinter	_print_Or	expr	logical or printer
printing	TensorflowPrinter	_print_Not	expr	logical not printer
printing	TensorflowPrinter	_print_Relational	expr	relational printer for equality and unequality
printing	NumPyPrinter	_print_seq	seq delimiter	general sequence printer converts to tuple
printing	NumPyPrinter	_print_MatMul	expr	matrix multiplication printer
printing	NumPyPrinter	_print_Piecewise	expr	piecewise function printer
printing	NumPyPrinter	_print_Relational	expr	relational printer for equality and unequality
printing	NumPyPrinter	_print_And	expr	logical and printer
printing	NumPyPrinter	_print_Or	expr	logical or printer
printing	NumPyPrinter	_print_Not	expr	logical not printer
printing		lambdarepr	expr	returns a string usable for lambdifying
printing	OctaveCodePrinter	indent_code	code	accepts a string of code or a list of code lines
printing		octave_code	expr assign_to	converts expr to a string of octave or matlab code
printing		print_octave_code	expr	prints the octave or matlab representation of the given expression
printing	FCodePrinter	_wrap_fortran	lines	wrap long fortran lines argument
printing	FCodePrinter	indent_code	code	accepts a string of code or a list of code lines
printing		fcode	expr assign_to	converts an expr to a string of c code parameters
printing		print_fcode	expr	prints the fortran representation of the given expression
printing	CodePrinter	doprint	expr assign_to	print the expression as code
printing	CodePrinter	_rate_index_position	p	function to calculate score based on position among indices this method is used to sort loops in an optimized order see
printing	CodePrinter	_get_statement	codestring	formats a codestring with the proper line ending
printing	CodePrinter	_get_comment	text	formats a text string as a comment
printing	CodePrinter	_declare_number_const	name value	declare a numeric constant at the top of a function
printing	CodePrinter	_format_code	lines	take in a list of lines of code and format them accordingly
printing	CodePrinter	_get_loop_opening_ending	indices	returns a tuple (open_lines close_lines) containing lists
printing	TableForm	__init__	data	creates a tableform
printing	TableForm	as_matrix		returns the data of the table in matrix form
printing	TableForm	_sympystr	p	returns the string representation of 'self'
printing	TableForm	_latex	printer	returns the string representation of 'self'
printing		pprint_nodes	subtrees	prettyprints systems of nodes
printing		print_node	node	returns information about the "node"
printing		tree	node	returns a tree representation of "node" as a string
printing		print_tree	node	prints a tree representation of "node"
printing	TheanoPrinter	doprint	expr	returns printer's representation for expr as a string
printing		dim_handling	inputs dim dims broadcastables	handle various input types for dimensions in tensor_wrap
printing		theano_function	inputs outputs dtypes cache	create theano function from sympy expressions
printing.pretty	stringPict	__init__	s baseline	initialize from string
printing.pretty	stringPict	height		the height of the picture in characters
printing.pretty	stringPict	width		the width of the picture in characters
printing.pretty	stringPict	next		put a string of stringpicts next to each other
printing.pretty	stringPict	right		put pictures next to this one
printing.pretty	stringPict	left		put pictures left to right at left
printing.pretty	stringPict	stack		put pictures on top of each other from top to bottom
printing.pretty	stringPict	below		put pictures under this picture
printing.pretty	stringPict	above		put pictures above this picture
printing.pretty	stringPict	parens	left right ifascii_nougly	put parentheses around self
printing.pretty	stringPict	leftslash		precede object by a slash of the proper size
printing.pretty	stringPict	root	n	produce a nice root symbol
printing.pretty	stringPict	render		return the string form of self
printing.pretty	stringPict	terminal_width		return the terminal width if possible otherwise return 0
printing.pretty	prettyForm	__init__	s baseline binding unicode	initialize from stringpict and binding power
printing.pretty	prettyForm	__add__		make a pretty addition
printing.pretty	prettyForm	__div__	den slashed	make a pretty division stacked or slashed
printing.pretty	prettyForm	__mul__		make a pretty multiplication
printing.pretty	prettyForm	__pow__	b	make a pretty power
printing.pretty	prettyForm	apply	function	functions of one or more variables
printing.pretty	PrettyPrinter	_print_matrix_contents	e	this method factors out what is essentially grid printing
printing.pretty		pretty	expr	returns a string containing the prettified form of expr
printing.pretty		pretty_print	expr	prints expr in pretty form
printing.pretty		pager_print	expr	prints expr using the pager in pretty form
printing.pretty		pretty_use_unicode	flag	set whether pretty-printer should use unicode by default
printing.pretty		pretty_try_use_unicode		see if unicode output is available and leverage it if possible
printing.pretty		xstr		call str or unicode depending on current mode
printing.pretty		xobj	symb length	construct spatial object of given length
printing.pretty		vobj	symb height	construct vertical object of a given height
printing.pretty		hobj	symb width	construct horizontal object of a given width
printing.pretty		xsym	sym	get symbology for a 'character'
printing.pretty		pretty_atom	atom_name default	return pretty representation of an atom
printing.pretty		pretty_symbol	symb_name	return pretty representation of a symbol
printing.pretty		annotated	letter	return a stylised drawing of the letter letter, together with information on how to put annotations (super- and subscripts to the
assumptions		refine	expr assumptions	simplify an expression using assumptions
assumptions		refine_abs	expr assumptions	handler for the absolute value
assumptions		refine_Pow	expr assumptions	handler for instances of pow
assumptions		refine_atan2	expr assumptions	handler for the atan2 function examples
assumptions		refine_Relational	expr assumptions	handler for relational >>> from sympy
assumptions	AssumptionKeys	real		real number predicate
assumptions	AssumptionKeys	extended_real		extended real predicate
assumptions	AssumptionKeys	imaginary		imaginary number predicate
assumptions	AssumptionKeys	complex		complex number predicate
assumptions	AssumptionKeys	algebraic		algebraic number predicate
assumptions	AssumptionKeys	transcendental		transcedental number predicate
assumptions	AssumptionKeys	rational		rational number predicate
assumptions	AssumptionKeys	irrational		irrational number predicate
assumptions	AssumptionKeys	bounded		see documentation of q finite
assumptions	AssumptionKeys	infinite		infinite number predicate
assumptions	AssumptionKeys	infinity		see documentation of q infinite
assumptions	AssumptionKeys	infinitesimal		see documentation of q zero
assumptions	AssumptionKeys	positive		positive real number predicate
assumptions	AssumptionKeys	negative		negative number predicate
assumptions	AssumptionKeys	zero		zero number predicate
assumptions	AssumptionKeys	nonzero		nonzero real number predicate
assumptions	AssumptionKeys	nonpositive		nonpositive real number predicate
assumptions	AssumptionKeys	nonnegative		nonnegative real number predicate
assumptions	AssumptionKeys	even		even number predicate
assumptions	AssumptionKeys	odd		odd number predicate
assumptions	AssumptionKeys	prime		prime number predicate
assumptions	AssumptionKeys	composite		composite number predicate
assumptions	AssumptionKeys	symmetric		symmetric matrix predicate
assumptions	AssumptionKeys	invertible		invertible matrix predicate
assumptions	AssumptionKeys	orthogonal		orthogonal matrix predicate
assumptions	AssumptionKeys	unitary		unitary matrix predicate
assumptions	AssumptionKeys	positive_definite		positive definite matrix predicate
assumptions	AssumptionKeys	upper_triangular		upper triangular matrix predicate
assumptions	AssumptionKeys	lower_triangular		lower triangular matrix predicate
assumptions	AssumptionKeys	diagonal		diagonal matrix predicate
assumptions	AssumptionKeys	fullrank		fullrank matrix predicate
assumptions	AssumptionKeys	square		square matrix predicate
assumptions	AssumptionKeys	integer_elements		integer elements matrix predicate
assumptions	AssumptionKeys	real_elements		real elements matrix predicate
assumptions	AssumptionKeys	complex_elements		complex elements matrix predicate
assumptions	AssumptionKeys	singular		singular matrix predicate
assumptions	AssumptionKeys	normal		normal matrix predicate
assumptions	AssumptionKeys	triangular		triangular matrix predicate
assumptions	AssumptionKeys	unit_triangular		unit triangular matrix predicate
assumptions		_extract_facts	expr symbol check_reversed_rel	helper for ask()
assumptions		ask	proposition assumptions context	method for inferring properties about objects
assumptions		ask_full_inference	proposition assumptions known_facts_cnf	method for inferring properties about objects
assumptions		register_handler	key handler	register a handler in the ask system key must be a string and handler a
assumptions		remove_handler	key handler	removes a handler from the ask system same syntax as register_handler
assumptions		compute_known_facts	known_facts known_facts_keys	compute the various forms of knowledge compilation used by the assumptions system
assumptions		evaluate_old_assump	pred	replace assumptions of expressions replaced with their values in the old assumptions (like q
assumptions	AssumptionsContext	add		add an assumption
assumptions	AppliedPredicate	arg		return the expression used by this assumption
assumptions	Predicate	eval	expr assumptions	evaluate self expr under the given assumptions
assumptions		assuming		context manager for assumptions examples
assumptions.handlers	AskCommutativeHandler	Symbol	expr assumptions	objects are expected to be commutative unless otherwise stated
assumptions.handlers		test_closed_group	expr assumptions key	test for membership in a group with respect
assumptions.handlers	AskFiniteHandler	Add	expr assumptions	return true if expr is bounded false if not and none if unknown
assumptions.handlers	AskFiniteHandler	Mul	expr assumptions	return true if expr is bounded false if not and none if unknown
assumptions.handlers	AskFiniteHandler	Pow	expr assumptions	unbounded ** nonzero -> unbounded
assumptions.handlers		BM_elements	predicate expr assumptions	block matrix elements
assumptions.handlers		MS_elements	predicate expr assumptions	matrix slice elements
assumptions.handlers	AskPrimeHandler	Pow	expr assumptions	integer**integer -> !prime
assumptions.handlers	AskEvenHandler	Mul	expr assumptions	even * integer -> even
assumptions.handlers	AskEvenHandler	Add	expr assumptions	even + odd -> odd
assumptions.handlers	AskNegativeHandler	Add	expr assumptions	positive + positive -> positive
assumptions.handlers	AskNegativeHandler	Pow	expr assumptions	real ** even -> nonnegative
assumptions.handlers	AskIntegerHandler	Add	expr assumptions	integer + integer -> integer
assumptions.handlers	AskIntegerHandler	Mul	expr assumptions	integer*integer -> integer
assumptions.handlers	AskRationalHandler	Add	expr assumptions	rational + rational -> rational
assumptions.handlers	AskRationalHandler	Pow	expr assumptions	rational ** integer -> rational
assumptions.handlers	AskRealHandler	Add	expr assumptions	real + real -> real
assumptions.handlers	AskRealHandler	Mul	expr assumptions	real*real -> real
assumptions.handlers	AskRealHandler	Pow	expr assumptions	real**integer -> real positive**real -> real
assumptions.handlers	AskHermitianHandler	Add	expr assumptions	hermitian + hermitian -> hermitian
assumptions.handlers	AskHermitianHandler	Mul	expr assumptions	as long as there is at most only one noncommutative term
assumptions.handlers	AskHermitianHandler	Pow	expr assumptions	hermitian**integer -> hermitian
assumptions.handlers	AskImaginaryHandler	Add	expr assumptions	imaginary + imaginary -> imaginary
assumptions.handlers	AskImaginaryHandler	Mul	expr assumptions	real*imaginary -> imaginary
assumptions.handlers	AskImaginaryHandler	Pow	expr assumptions	imaginary**odd -> imaginary
assumptions.handlers	AskAntiHermitianHandler	Add	expr assumptions	antihermitian + antihermitian -> antihermitian
assumptions.handlers	AskAntiHermitianHandler	Mul	expr assumptions	as long as there is at most only one noncommutative term
assumptions.handlers	AskAntiHermitianHandler	Pow	expr assumptions	hermitian**integer -> !antihermitian
diffgeom	CoordSystem	connect_to	to_sys from_coords to_exprs inverse	register the transformation used to switch to another coordinate system
diffgeom	CoordSystem	coord_tuple_transform_to	to_sys coords	transform coords to coord system to_sys
diffgeom	CoordSystem	jacobian	to_sys coords	return the jacobian matrix of a transformation
diffgeom	CoordSystem	coord_function	coord_index	return a basescalarfield that takes a point and returns one of the coords
diffgeom	CoordSystem	coord_functions		returns a list of all coordinate functions
diffgeom	CoordSystem	base_vector	coord_index	return a basis vector field
diffgeom	CoordSystem	base_vectors		returns a list of all base vectors
diffgeom	CoordSystem	base_oneform	coord_index	return a basis 1-form field
diffgeom	CoordSystem	base_oneforms		returns a list of all base oneforms
diffgeom	CoordSystem	point	coords	create a point with coordinates given in this coord system
diffgeom	CoordSystem	point_to_coords	point	calculate the coordinates of a point in this coord system
diffgeom	Point	coords	to_sys	coordinates of the point in a given coordinate system
diffgeom	BaseScalarField	__call__		evaluating the field at a point or doing nothing
diffgeom	BaseVectorField	__call__	scalar_field	apply on a scalar field
diffgeom	Commutator	__call__	scalar_field	apply on a scalar field
diffgeom	Differential	__call__		apply on a list of vector_fields
diffgeom	TensorProduct	__call__		apply on a list of vector_fields
diffgeom	WedgeProduct	__call__		apply on a list of vector_fields
diffgeom	BaseCovarDerivativeOp	__call__	field	apply on a scalar field
diffgeom		intcurve_series	vector_field param start_point n	return the series expansion for an integral curve of the field
diffgeom		intcurve_diffequ	vector_field param start_point coord_sys	return the differential equation for an integral curve of the field
diffgeom		contravariant_order	expr _strict	return the contravariant order of an expression
diffgeom		covariant_order	expr _strict	return the covariant order of an expression
diffgeom		vectors_in_basis	expr to_sys	transform all base vectors in base vectors of a specified coord basis
diffgeom		twoform_to_matrix	expr	return the matrix representing the twoform
diffgeom		metric_to_Christoffel_1st	expr	return the nested list of christoffel symbols for the given metric
diffgeom		metric_to_Christoffel_2nd	expr	return the nested list of christoffel symbols for the given metric
diffgeom		metric_to_Riemann_components	expr	return the components of the riemann tensor expressed in a given basis
diffgeom		metric_to_Ricci_components	expr	return the components of the ricci tensor expressed in a given basis
benchmarks		bench_R2		hermite polynomial hermite 15 y
benchmarks		bench_R3		a = [bool(f==f) for _ in range 10 ]
benchmarks		bench_R5		blowup l 8 ; l=uniq l
benchmarks		bench_R6		sum(simplify((x+sin i )/x+(x-sin i )/x) for i in range 100
benchmarks		bench_R7		[f subs(x random()) for _ in range(10**4)]
benchmarks		bench_R8		right(x^2 0 5 10^4)
benchmarks		_bench_R9		factor(x^20 - pi^5*y^20)
benchmarks		bench_R10		v = [-pi -pi+1/10 ,pi]
benchmarks		bench_R11		a = [random() + random()*i for w in [0 1000]]
benchmarks		bench_S1		e= x+y+z+1 **7 f=e* e+1 ;f expand()
parsing		parse_expr	s local_dict	converts the string "s" to a sympy expression in local_dict
parsing		_token_splittable	token	predicate for whether a token name can be split into multiple tokens
parsing		_token_callable	token local_dict global_dict nextToken	predicate for whether a token name represents a callable function
parsing	AppliedFunction	expand		return a list of tokens representing the function
parsing		_apply_functions	tokens local_dict global_dict	convert a name token + parenthesisgroup into an appliedfunction
parsing		_implicit_multiplication	tokens local_dict global_dict	implicitly adds '*' tokens
parsing		_implicit_application	tokens local_dict global_dict	adds parentheses as needed after functions
parsing		function_exponentiation	tokens local_dict global_dict	allows functions to be exponentiated e g cos**2 x
parsing		split_symbols_custom	predicate	creates a transformation that splits symbol names
parsing		implicit_multiplication	result local_dict global_dict	makes the multiplication operator optional in most cases
parsing		implicit_application	result local_dict global_dict	makes parentheses optional in some cases for function calls
parsing		implicit_multiplication_application	result local_dict global_dict	allows a slightly relaxed syntax
parsing		auto_symbol	tokens local_dict global_dict	inserts calls to symbol for undefined variables
parsing		lambda_notation	tokens local_dict global_dict	substitutes "lambda" with its sympy equivalent lambda()
parsing		factorial_notation	tokens local_dict global_dict	allows standard notation for factorial
parsing		convert_xor	tokens local_dict global_dict	treats xor ^, as exponentiation **
parsing		auto_number	tokens local_dict global_dict	converts numeric literals to use sympy equivalents
parsing		rationalize	tokens local_dict global_dict	converts floats into rational run after auto_number
parsing		_transform_equals_sign	tokens local_dict global_dict	transforms the equals sign = to instances of eq
parsing		convert_equals_signs	result local_dict global_dict	transforms all the equals signs = to instances of eq
parsing		stringify_expr	s local_dict global_dict transformations	converts the string s to python code in local_dict generally parse_expr should be used
parsing		eval_expr	code local_dict global_dict	evaluate python code generated by stringify_expr
parsing		parse_expr	s local_dict transformations global_dict	converts the string s to a sympy expression in local_dict parameters
parsing		evaluateFalse	s	replaces operators with the sympy equivalent and sets evaluate=false
parsing		tokenize	readline tokeneater	the tokenize() function accepts two parameters one representing the input stream and one providing an output mechanism for tokenize()
parsing		untokenize	iterable	transform tokens back into python source code
parsing		generate_tokens	readline	the generate_tokens() generator requires one argment readline which must be a callable object which provides the same interface as the
stats	FiniteDensity	__call__	item	make instance of a class callable
stats	FiniteDensity	dict		return item as dictionary
stats	ConditionalFiniteDomain	__new__	cls domain condition	create a new instance of conditionalfinitedomain class
stats	ConditionalFiniteDomain	_test	elem	test the value if value is boolean return it if value is equality
stats	FinitePSpace	sample		internal sample method returns dictionary mapping randomsymbol to realization value
stats		FiniteRV	name density	create a finite random variable given a dict representing the density
stats		DiscreteUniform	name items	create a finite random variable representing a uniform distribution over the input set
stats		Die	name sides	create a finite random variable representing a fair die
stats		Bernoulli	name p succ fail	create a finite random variable representing a bernoulli process
stats		Coin	name p	create a finite random variable representing a coin toss
stats		Binomial	name n p succ	create a finite random variable representing a binomial distribution
stats		Hypergeometric	name N m n	create a finite random variable representing a hypergeometric distribution
stats		Rademacher	name	create a finite random variable representing a rademacher distribution
stats	SingleDiscreteDistribution	sample		a random realization from the distribution
stats	SingleDiscreteDistribution	_inverse_cdf_expression		inverse of the cdf
stats	SingleDiscreteDistribution	compute_cdf		compute the cdf from the pdf
stats	SingleDiscreteDistribution	cdf	x	cumulative density function
stats	SingleDiscreteDistribution	expectation	expr var evaluate	expectation of expression over distribution
stats	SingleDiscretePSpace	sample		internal sample method returns dictionary mapping randomsymbol to realization value
stats		Poisson	name lamda	create a discrete random variable with a poisson distribution
stats		Geometric	name p	create a discrete random variable with a geometric distribution
stats	SingleContinuousDistribution	sample		a random realization from the distribution
stats	SingleContinuousDistribution	_inverse_cdf_expression		inverse of the cdf
stats	SingleContinuousDistribution	compute_cdf		compute the cdf from the pdf
stats	SingleContinuousDistribution	cdf	x	cumulative density function
stats	SingleContinuousDistribution	expectation	expr var evaluate	expectation of expression over distribution
stats	SingleContinuousPSpace	sample		internal sample method returns dictionary mapping randomsymbol to realization value
stats		variance_prop	expr consts include_covar	symbolically propagates variance (\sigma^2) for expressions
stats		ContinuousRV	symbol density set	create a continuous random variable given the following -- a symbol
stats		Arcsin	name a b	create a continuous random variable with an arcsin distribution
stats		Benini	name alpha beta sigma	create a continuous random variable with a benini distribution
stats		Beta	name alpha beta	create a continuous random variable with a beta distribution
stats		BetaPrime	name alpha beta	create a continuous random variable with a beta prime distribution
stats		Cauchy	name x0 gamma	create a continuous random variable with a cauchy distribution
stats		Chi	name k	create a continuous random variable with a chi distribution
stats		ChiNoncentral	name k l	create a continuous random variable with a non-central chi distribution
stats		ChiSquared	name k	create a continuous random variable with a chi-squared distribution
stats		Dagum	name p a b	create a continuous random variable with a dagum distribution
stats		Erlang	name k l	create a continuous random variable with an erlang distribution
stats		Exponential	name rate	create a continuous random variable with an exponential distribution
stats		FDistribution	name d1 d2	create a continuous random variable with a f distribution
stats		FisherZ	name d1 d2	create a continuous random variable with an fisher's z distribution
stats		Frechet	name a s m	create a continuous random variable with a frechet distribution
stats		Gamma	name k theta	create a continuous random variable with a gamma distribution
stats		GammaInverse	name a b	create a continuous random variable with an inverse gamma distribution
stats		Gumbel	name beta mu	create a continuous random variable with gumbel distribution
stats		Gompertz	name b eta	create a continuous random variable with gompertz distribution
stats		Kumaraswamy	name a b	create a continuous random variable with a kumaraswamy distribution
stats		Laplace	name mu b	create a continuous random variable with a laplace distribution
stats		Logistic	name mu s	create a continuous random variable with a logistic distribution
stats		LogNormal	name mean std	create a continuous random variable with a log-normal distribution
stats		Maxwell	name a	create a continuous random variable with a maxwell distribution
stats		Nakagami	name mu omega	create a continuous random variable with a nakagami distribution
stats		Normal	name mean std	create a continuous random variable with a normal distribution
stats		Pareto	name xm alpha	create a continuous random variable with the pareto distribution
stats		QuadraticU	name a b	create a continuous random variable with a u-quadratic distribution
stats		RaisedCosine	name mu s	create a continuous random variable with a raised cosine distribution
stats		Rayleigh	name sigma	create a continuous random variable with a rayleigh distribution
stats		ShiftedGompertz	name b eta	create a continuous random variable with a shifted gompertz distribution
stats		StudentT	name nu	create a continuous random variable with a student's t distribution
stats		Triangular	name a b c	create a continuous random variable with a triangular distribution
stats		Uniform	name left right	create a continuous random variable with a uniform distribution
stats		UniformSum	name n	create a continuous random variable with an irwin-hall distribution
stats		VonMises	name mu k	create a continuous random variable with a von mises distribution
stats		Weibull	name alpha beta	create a continuous random variable with a weibull distribution
stats		WignerSemicircle	name R	create a continuous random variable with a wigner semicircle distribution
stats		random_symbols	expr	returns all randomsymbols within a sympy expression
stats		pspace	expr	returns the underlying probability space of a random expression
stats		sumsets	sets	union of sets
stats		rs_swap	a b	build a dictionary to swap randomsymbols based on their underlying symbol
stats		given	expr condition	conditional random expression from a random expression and a condition on that expression creates a new
stats		expectation	expr condition numsamples evaluate	returns the expected value of a random expression parameters
stats		probability	condition given_condition numsamples evaluate	probability that a condition is true optionally given a second condition parameters
stats		density	expr condition evaluate numsamples	probability density of a random expression optionally given a second condition
stats		cdf	expr condition evaluate	cumulative distribution function of a random expression
stats		where	condition given_condition	returns the domain where a condition is true
stats		sample	expr condition	a realization of the random expression examples
stats		sample_iter	expr condition numsamples	returns an iterator of realizations from the expression given a condition expr random expression to be realized
stats		sample_iter_lambdify	expr condition numsamples	see sample_iter uses lambdify for computation
stats		sample_iter_subs	expr condition numsamples	see sample_iter uses subs for computation
stats		sampling_P	condition given_condition numsamples evalf	sampling version of p
stats		sampling_E	expr given_condition numsamples evalf	sampling version of e
stats		sampling_density	expr given_condition numsamples	sampling version of density
stats		dependent	a b	dependence of two random expressions two expressions are independent if knowledge of one does not change
stats		independent	a b	independence of two random expressions two expressions are independent if knowledge of one does not change
stats		pspace_independent	a b	tests for independence between a and b by checking if their pspaces have overlapping symbols
stats		rv_subs	expr symbols	given a random expression replace all random variables with their symbols
stats		_value_check	condition message	check a condition on input value
stats		moment	X n c condition	return the nth moment of a random expression about c i e e( x-c **n)
stats		variance	X condition	variance of a random expression expectation of (x-e x )**2
stats		standard_deviation	X condition	standard deviation of a random expression square root of the expectation of (x-e x )**2
stats		covariance	X Y condition	covariance of two random expressions the expectation that the two variables will rise and fall together
stats		correlation	X Y condition	correlation of two random expressions also known as correlation coefficient or pearson's correlation
stats		cmoment	X n condition	return the nth central moment of a random expression about its mean i
stats		smoment	X n condition	return the nth standardized moment of a random expression i e
stats		skewness	X condition	measure of the asymmetry of the probability distribution positive skew indicates that most of the values lie to the right of
tensor	TIDS	get_tensors		get a list of tensor objects having the same tids if multiplied by one another
tensor	TIDS	get_components_with_free_indices		get a list of components with their associated indices
tensor	TIDS	from_components_and_indices	components indices	create a new tids object from components and indices components tensorhead objects representing the components
tensor	TIDS	free_dum_from_indices		convert indices into free, dum for single component tensor free list of tuples index pos 0 ,
tensor	TIDS	mul	f g	the algorithms performing the multiplication of two tids instances
tensor	TIDS	sorted_components		returns a tids with sorted components the sorting is done taking into account the commutation group
tensor	TIDS	canon_args		returns g dummies msym v , the entries of canonicalize see canonicalize in tensor_can
tensor	TIDS	perm2tensor	g canon_bp	returns a tids instance corresponding to the permutation g
tensor	TIDS	get_indices		get a list of indices creating new tensor indices to complete dummy indices
tensor	TIDS	contract_metric	g	returns new tids and sign
tensor	_IndexStructure	from_indices		create a new _indexstructure object from a list of indices indices tensorindex objects the indices
tensor	_IndexStructure	_free_dum_from_indices		convert indices into free, dum for single component tensor free list of tuples index pos 0 ,
tensor	_IndexStructure	get_indices		get a list of indices creating new tensor indices to complete dummy indices
tensor	_IndexStructure	get_free_indices		get a list of free indices
tensor	_IndexStructure	perm2tensor	g is_canon_bp	returns a _indexstructure instance corresponding to the permutation g
tensor	_IndexStructure	indices_canon_args		returns g dummies msym v , the entries of canonicalize see canonicalize in tensor_can
tensor	_TensorDataLazyEvaluator	_get	key	retrieve data associated with key
tensor	_TensorDataLazyEvaluator	data_tensorhead_from_tensmul	data tensmul tensorhead	this method is used when assigning components data to a tensmul object it converts components data to a fully contravariant ndarray
tensor	_TensorDataLazyEvaluator	data_from_tensor	tensor	this method corrects the components data to the right signature (covariant/contravariant) using the metric associated with each
tensor	_TensorDataLazyEvaluator	__setitem__	key value	set the components data of a tensor object/expression
tensor	_TensorDataLazyEvaluator	add_metric_data	metric data	assign data to the metric tensor the metric tensor behaves in an
tensor	_TensorDataLazyEvaluator	_correct_signature_from_indices	data indices free dum	utility function to correct the values inside the components data ndarray according to whether indices are covariant or contravariant
tensor	_TensorDataLazyEvaluator	parse_data	data	transform data to array the parameter data may
tensor	_TensorManager	comm_symbols2i	i	get the commutation group number corresponding to i i can be a symbol or a number or a string
tensor	_TensorManager	comm_i2symbol	i	returns the symbol corresponding to the commutation group number
tensor	_TensorManager	set_comm	i j c	set the commutation parameter c for commutation groups i j parameters
tensor	_TensorManager	set_comms		set the commutation group numbers c for symbols i j
tensor	_TensorManager	get_comm	i j	return the commutation parameter for commutation group numbers i j see _tensormanager
tensor	_TensorManager	clear		clear the tensormanager
tensor	TensorIndexType	_components_data_full_destroy		experimental do not rely on this api method
tensor		tensor_indices	s typ	returns list of tensor indices given their names and their types parameters
tensor		tensorsymmetry		return a tensorsymmetry object
tensor	TensorType	__call__	s comm	return a tensorhead object or a list of tensorhead objects
tensor		tensorhead	name typ sym comm	function generating tensorhead s
tensor	TensorHead	commutes_with	other	returns 0 if self and other commute 1 if they anticommute
tensor	TensorHead	__call__		returns a tensor with indices
tensor	TensorHead	_components_data_full_destroy		experimental do not rely on this api method
tensor	TensExpr	fun_eval		return a tensor with free indices substituted according to index_tuples index_types list of tuples (old_index new_index)
tensor	TensExpr	get_matrix		returns ndarray components data as a matrix if components data are available and ndarray dimension does not exceed 2
tensor	TensAdd	__call__		returns tensor with ordered free indices replaced by indices parameters
tensor	TensAdd	canon_bp		canonicalize using the butler-portugal algorithm for canonicalization under monoterm symmetries
tensor	TensAdd	contract_metric	g	raise or lower indices with the metric g
tensor	TensAdd	fun_eval		return a tensor with free indices substituted according to index_tuples parameters
tensor	TensAdd	substitute_indices		return a tensor with free indices substituted according to index_tuples parameters
tensor	Tensor	perm2tensor	g is_canon_bp	returns the tensor corresponding to the permutation g for further details see the method in tids with the same name
tensor	Tensor	get_indices		get a list of indices corresponding to those of the tensor
tensor	Tensor	get_free_indices		get a list of free indices corresponding to those of the tensor
tensor	Tensor	__call__		returns tensor with ordered free indices replaced by indices examples
tensor	TensMul	_get_components_from_args	args	get a list of tensor objects having the same tids if multiplied by one another
tensor	TensMul	_get_tensors_from_components_free_dum	components free dum	get a list of tensor objects by distributing free and dum indices on the components
tensor	TensMul	get_indices		returns the list of indices of the tensor the indices are listed in the order in which they appear in the
tensor	TensMul	get_free_indices		returns the list of free indices of the tensor the indices are listed in the order in which they appear in the
tensor	TensMul	split		returns a list of tensors whose product is self dummy indices contracted among different tensor components
tensor	TensMul	__mul__	other	multiply two tensors using einstein summation convention
tensor	TensMul	_sort_args_for_sorted_components		returns the args sorted according to the components commutation properties
tensor	TensMul	sorted_components		returns a tensor product with sorted components
tensor	TensMul	perm2tensor	g is_canon_bp	returns the tensor corresponding to the permutation g for further details see the method in tids with the same name
tensor	TensMul	canon_bp		canonicalize using the butler-portugal algorithm for canonicalization under monoterm symmetries
tensor	TensMul	_get_indices_to_args_pos		get a dict mapping the index position to tensmul's argument number
tensor	TensMul	contract_metric	g	raise or lower indices with the metric g parameters
tensor	TensMul	__call__		returns tensor product with ordered free indices replaced by indices examples
tensor		tensor_mul		product of tensors
tensor		riemann_cyclic_replace	t_r	replace riemann tensor with an equivalent expression
tensor		riemann_cyclic	t2	replace each riemann tensor with an equivalent expression satisfying the cyclic identity
tensor		get_lines	ex index_type	returns lines traces rest for an index type where lines is the list of list of positions of a matrix line
tensor		perm2tensor	t g is_canon_bp	returns the tensor corresponding to the permutation g for further details see the method in tids with the same name
tensor		substitute_indices	t	return a tensor with free indices substituted according to index_tuples index_types list of tuples (old_index new_index)
tensor	Indexed	_diff_wrt		allow derivatives with respect to an indexed object
tensor	Indexed	base		returns the indexedbase of the indexed object
tensor	Indexed	indices		returns the indices of the indexed object
tensor	Indexed	rank		returns the rank of the indexed object
tensor	Indexed	shape		returns a list with dimensions of each index
tensor	Indexed	ranges		returns a list of tuples with lower and upper range of each index
tensor	IndexedBase	shape		returns the shape of the indexedbase object
tensor	IndexedBase	strides		returns the strided scheme for the indexedbase object
tensor	IndexedBase	offset		returns the offset for the indexedbase object
tensor	IndexedBase	label		returns the label of the indexedbase object
tensor	Idx	label		returns the label integer or integer expression of the idx object
tensor	Idx	lower		returns the lower bound of the idx
tensor	Idx	upper		returns the upper bound of the idx
tensor		_remove_repeated	inds	removes repeated objects from sequences returns a set of the unique objects and a tuple of all that have been
tensor		_get_indices_Mul	expr return_dummies	determine the outer indices of a mul object
tensor		_get_indices_Pow	expr	determine outer indices of a power or an exponential
tensor		_get_indices_Add	expr	determine outer indices of an add object
tensor		get_indices	expr	determine the outer indices of expression expr by *outer* we mean indices that are not summation indices
tensor		get_contraction_structure	expr	determine dummy indices of expr and describe its structure by *dummy* we mean indices that are summation indices
tensor.array	DenseNDimArray	__getitem__	index	allows to get items from n-dim array
tensor.array	DenseNDimArray	tomatrix		converts mutabledensendimarray to matrix can convert only 2-dim array else will raise error
tensor.array	DenseNDimArray	reshape		returns mutabledensendimarray instance with new shape elements number
tensor.array	MutableDenseNDimArray	__setitem__	index value	allows to set items to mutabledensendimarray
tensor.array		tensorproduct		tensor product among scalars or array-like objects
tensor.array		tensorcontraction	array	contraction of an array-like object on the specified axes
tensor.array		derive_by_array	expr dx	derivative by arrays supports both arrays and scalars
tensor.array		permutedims	expr perm	permutes the indices of an array
tensor.array	SparseNDimArray	__getitem__	index	get an element from a sparse n-dim array
tensor.array	SparseNDimArray	zeros	cls	return a sparse n-dim array of zeros
tensor.array	SparseNDimArray	tomatrix		converts mutabledensendimarray to matrix can convert only 2-dim array else will raise error
tensor.array	MutableSparseNDimArray	__setitem__	index value	allows to set items to mutabledensendimarray
tensor.array	NDimArray	__len__		overload common function len() returns number of elements in array
tensor.array	NDimArray	shape		returns array shape dimension
tensor.array	NDimArray	rank		returns rank of array
tensor.array	NDimArray	diff		calculate the derivative of each element in the array
tensor.array	NDimArray	applyfunc	f	apply a function to each element of the n-dim array
tensor.array	NDimArray	__str__		returns string allows to use standard functions print() and str()
tensor.array	NDimArray	tolist		conveting mutabledensendimarray to one-dim list examples
tensor.array	NDimArray	__eq__	other	ndimarray instances can be compared to each other
concrete	Product	is_convergent		see docs of sum is_convergent() for explanation of convergence
concrete	Product	reverse_order	expr	reverse the order of a limit in a product
concrete		product		compute the product
concrete	ExprWithIntLimits	change_index	var trafo newvar	change index of a sum or product
concrete	ExprWithIntLimits	index	expr x	return the index of a dummy variable in the list of limits
concrete	ExprWithIntLimits	reorder	expr	reorder limits in a expression containing a sum or a product
concrete	ExprWithIntLimits	reorder_limit	expr x y	interchange two limit tuples of a sum or product expression
concrete		_process_limits		process the list of symbols and convert them to canonical limits storing them as tuple symbol lower upper
concrete	ExprWithLimits	function		return the function applied across limits
concrete	ExprWithLimits	limits		return the limits of expression
concrete	ExprWithLimits	variables		return a list of the dummy variables >>> from sympy import sum
concrete	ExprWithLimits	free_symbols		this method returns the symbols in the object excluding those that take on a specific value (i
concrete	ExprWithLimits	is_number		return true if the sum has no free symbols else false
concrete	ExprWithLimits	as_dummy		replace instances of the given dummy variables with explicit dummy counterparts to make clear what are dummy variables and what
concrete	ExprWithLimits	_eval_subs	old new	perform substitutions over non-dummy variables of an expression with limits
concrete		find_simple_recurrence_vector	l	this function is used internally by other functions from the sympy
concrete		find_simple_recurrence	v A N	detects and returns a recurrence relation from a sequence of several integer or rational terms
concrete		rationalize	x maxcoeff	helps identifying a rational number from a float or mpmath mpf value by
concrete		guess_generating_function_rational	v X	tries to "guess" a rational generating function for a sequence of rational numbers v
concrete		guess_generating_function	v X types maxsqrtn	tries to "guess" a generating function for a sequence of rational numbers v
concrete		guess	l all evaluate niter	this function is adapted from the rate m package for mathematica
concrete	Sum	eval_zeta_function	f limits	check whether the function matches with the zeta function
concrete	Sum	_eval_derivative	x	differentiate wrt x as long as x is not in the free symbols of any of the upper or lower limits
concrete	Sum	is_convergent		checks for the convergence of a sum
concrete	Sum	is_absolutely_convergent		checks for the absolute convergence of an infinite series
concrete	Sum	euler_maclaurin	m n eps eval_integral	return an euler-maclaurin approximation of self where m is the number of leading terms to sum directly and n is the number of
concrete	Sum	reverse_order		reverse the order of a limit in a sum
concrete		summation	f	compute the summation of f with respect to symbols
concrete		telescopic_direct	L R n limits	returns the direct summation of the terms of a telescopic sum l is the term with lower index
concrete		telescopic	L R limits	tries to perform the summation using the telescopic property
concrete		_eval_sum_hyper	f i a	returns res cond sums from a to oo
concrete		_expand_delta	expr index	expand the first add containing a simple kroneckerdelta
concrete		_extract_delta	expr index	extract a simple kroneckerdelta from the expression
concrete		_has_simple_delta	expr index	returns true if expr is an expression that contains a kroneckerdelta that is simple in the index index, meaning that this kroneckerdelta
concrete		_is_simple_delta	delta index	returns true if delta is a kroneckerdelta and is nonzero for a single value of the index index
concrete		_remove_multiple_delta	expr	evaluate products of kroneckerdelta's
concrete		_simplify_delta	expr	rewrite a kroneckerdelta's indices in its simplest form
concrete		deltaproduct	f limit	handle products containing a kroneckerdelta
concrete		deltasummation	f limit no_piecewise	handle summations containing a kroneckerdelta
concrete		gosper_normal	f g n polys	compute the gosper's normal form of f and g
concrete		gosper_term	f n	compute gosper's hypergeometric term for f
concrete		gosper_sum	f k	gosper's hypergeometric summation algorithm
matrices		trace	matlist K	returns the trace of a matrix
matrices		transpose	matlist K	returns the transpose of a matrix examples
matrices		conjugate	matlist K	returns the conjugate of a matrix row-wise
matrices		conjugate_row	row K	returns the conjugate of a row element-wise examples
matrices		conjugate_transpose	matlist K	returns the conjugate-transpose of a matrix examples
matrices		augment	matlist column K	augments a matrix and a column
matrices		eye	n K	returns an identity matrix of size n
matrices		row	matlist i	returns the ith row of a matrix examples
matrices		col	matlist i	returns the ith column of a matrix note currently very expensive
matrices		rowswap	matlist index1 index2 K	returns the matrix with index1 row and index2 row swapped
matrices		rowmul	matlist index k K	multiplies index row with k
matrices		rowadd	matlist index1 index2 k	adds the index1 row with index2 row which in turn is multiplied by k
matrices		isHermitian	matlist K	checks whether matrix is hermitian examples
matrices		add	matlist1 matlist2 K	adds matrices row-wise
matrices		addrow	row1 row2 K	adds two rows of a matrix element-wise
matrices		sub	matlist1 matlist2 K	subtracts two matrices by first negating the second matrix and then adding it to first matrix
matrices		negate	matlist K	negates the elements of a matrix row-wise
matrices		negaterow	row K	negates a row element-wise
matrices		mulmatmat	matlist1 matlist2 K	multiplies two matrices by multiplying each row with each column at a time
matrices		mulmatscaler	matlist scaler K	performs scaler matrix multiplication one row at at time the row-scaler
matrices		mulrowscaler	row scaler K	performs the scaler-row multiplication element-wise
matrices		mulrowcol	row col K	multiplies two lists representing row and column element-wise
matrices	SparseMatrix	_cholesky_sparse		algorithm for numeric cholesky factorization of a sparse matrix
matrices	SparseMatrix	_eval_inverse		return the matrix inverse using cholesky or ldl default decomposition as selected with the method keyword 'ch' or 'ldl',
matrices	SparseMatrix	_eval_add	other	if other is a sparsematrix add efficiently otherwise
matrices	SparseMatrix	_eval_matrix_mul	other	fast multiplication exploiting the sparsity of the matrix
matrices	SparseMatrix	_eval_transpose		returns the transposed sparsematrix of this sparsematrix
matrices	SparseMatrix	_LDL_sparse		algorithm for numeric ldl factization exploiting sparse structure
matrices	SparseMatrix	_lower_triangular_solve	rhs	fast algorithm for solving a lower-triangular system exploiting the sparsity of the given matrix
matrices	SparseMatrix	_upper_triangular_solve	rhs	fast algorithm for solving an upper-triangular system exploiting the sparsity of the given matrix
matrices	SparseMatrix	applyfunc	f	apply a function to each element of the matrix
matrices	SparseMatrix	as_immutable		returns an immutable version of this matrix
matrices	SparseMatrix	as_mutable		returns a mutable version of this matrix
matrices	SparseMatrix	cholesky		returns the cholesky decomposition l of a matrix a such that l * l
matrices	SparseMatrix	col_list		returns a column-sorted list of non-zero elements of the matrix
matrices	SparseMatrix	eye	cls n	return an n x n identity matrix
matrices	SparseMatrix	LDLdecomposition		returns the ldl decomposition (matrices l and d) of matrix a, such that l * d * l
matrices	SparseMatrix	liupc		liu's algorithm for pre-determination of the elimination tree of the given matrix used in row-based symbolic cholesky factorization
matrices	SparseMatrix	nnz		returns the number of non-zero elements in matrix
matrices	SparseMatrix	row_list		returns a row-sorted list of non-zero elements of the matrix
matrices	SparseMatrix	row_structure_symbolic_cholesky		symbolic cholesky factorization for pre-determination of the non-zero structure of the cholesky factororization
matrices	SparseMatrix	scalar_multiply	scalar	scalar element-wise multiplication
matrices	SparseMatrix	solve_least_squares	rhs method	return the least-square fit to the data
matrices	SparseMatrix	solve	rhs method	return solution to self*soln = rhs using given inversion method
matrices	SparseMatrix	zeros	cls r c	return an r x c matrix of zeros square if c is omitted
matrices	MutableSparseMatrix	__setitem__	key value	assign value to position designated by key
matrices	MutableSparseMatrix	col_del	k	delete the given column of the matrix
matrices	MutableSparseMatrix	col_join	other	returns b augmented beneath a row-wise joining :: [a]
matrices	MutableSparseMatrix	col_op	j f	in-place operation on col j using two-arg functor whose args are interpreted as (self[i j], i) for i in range(self
matrices	MutableSparseMatrix	col_swap	i j	swap in place columns i and j
matrices	MutableSparseMatrix	fill	value	fill self with the given value
matrices	MutableSparseMatrix	row_del	k	delete the given row of the matrix
matrices	MutableSparseMatrix	row_join	other	returns b appended after a column-wise augmenting :: [a b]
matrices	MutableSparseMatrix	row_op	i f	in-place operation on row i using two-arg functor whose args are interpreted as (self[i j], j)
matrices	MutableSparseMatrix	row_swap	i j	swap in place columns i and j
matrices	MutableSparseMatrix	zip_row_op	i k f	in-place operation on row i using two-arg functor whose args are interpreted as (self[i j], self[k j])
matrices		_iszero	x	returns true if x is zero
matrices	MatrixRequired	_new	cls	_new must at minimum be callable as _new rows cols mat where mat is a flat list of the
matrices	MatrixRequired	__getitem__	key	implementations of __getitem__ should accept ints in which case the matrix is indexed as a flat list tuples i j in which
matrices	MatrixRequired	__len__		the total number of entries in the matrix
matrices	MatrixShaping	col_insert	pos other	insert one or more columns at the given column position
matrices	MatrixShaping	col_join	other	concatenates two matrices along self's last and other's first row
matrices	MatrixShaping	col	j	elementary column selector
matrices	MatrixShaping	extract	rowsList colsList	return a submatrix by specifying a list of rows and columns
matrices	MatrixShaping	get_diag_blocks		obtains the square sub-matrices on the main diagonal of a square matrix
matrices	MatrixShaping	reshape	rows cols	reshape the matrix total number of elements must remain the same
matrices	MatrixShaping	row_insert	pos other	insert one or more rows at the given row position
matrices	MatrixShaping	row_join	other	concatenates two matrices along self's last and rhs's first column examples
matrices	MatrixShaping	row	i	elementary row selector
matrices	MatrixShaping	shape		the shape dimensions of the matrix as the 2-tuple rows cols
matrices	MatrixShaping	tolist		return the matrix as a nested python list
matrices	MatrixShaping	vec		return the matrix converted into a one column matrix by stacking columns examples
matrices	MatrixProperties	atoms		returns the atoms that form the current object
matrices	MatrixProperties	free_symbols		returns the free symbols within the matrix
matrices	MatrixProperties	has		test whether any subexpression matches any of the patterns
matrices	MatrixProperties	is_anti_symmetric	simplify	check if matrix m is an antisymmetric matrix that is m is a square matrix with all m[i j] == -m[j i]
matrices	MatrixProperties	is_diagonal		check if matrix is diagonal that is matrix in which the entries outside the main diagonal are all zero
matrices	MatrixProperties	is_hermitian	simplify	checks if the matrix is hermitian
matrices	MatrixProperties	is_lower_hessenberg		checks if the matrix is in the lower-hessenberg form
matrices	MatrixProperties	is_lower		check if matrix is a lower triangular matrix true can be returned
matrices	MatrixProperties	is_square		checks if a matrix is square
matrices	MatrixProperties	is_symbolic		checks if any elements contain symbols
matrices	MatrixProperties	is_symmetric	simplify	check if matrix is symmetric matrix that is square matrix and is equal to its transpose
matrices	MatrixProperties	is_upper_hessenberg		checks if the matrix is the upper-hessenberg form
matrices	MatrixProperties	is_upper		check if matrix is an upper triangular matrix true can be returned
matrices	MatrixProperties	is_zero		checks if a matrix is a zero matrix
matrices	MatrixProperties	values		return non-zero values of self
matrices	MatrixOperations	adjoint		conjugate transpose or hermitian conjugation
matrices	MatrixOperations	applyfunc	f	apply a function to each element of the matrix
matrices	MatrixOperations	as_real_imag		returns a tuple containing the real imaginary part of matrix
matrices	MatrixOperations	conjugate		return the by-element conjugation
matrices	MatrixOperations	evalf	prec	apply evalf() to each element of self
matrices	MatrixOperations	expand	deep modulus power_base power_exp	apply core function expand to each entry of the matrix
matrices	MatrixOperations	H		return hermite conjugate
matrices	MatrixOperations	refine	assumptions	apply refine to each element of the matrix
matrices	MatrixOperations	replace	F G map	replaces function f in matrix entries with function g
matrices	MatrixOperations	simplify	ratio measure	apply simplify to each element of the matrix
matrices	MatrixOperations	subs		return a new matrix with subs applied to each entry
matrices	MatrixOperations	trace		returns the trace of a square matrix i e the sum of the
matrices	MatrixOperations	transpose		returns the transpose of the matrix
matrices	MatrixOperations	xreplace	rule	return a new matrix with xreplace applied to each entry
matrices	MatrixArithmetic	__add__	other	return self + other raising shapeerror if shapes don't match
matrices	MatrixArithmetic	__mul__	other	return self*other where other is either a scalar or a matrix of compatible dimensions
matrices	MatrixArithmetic	multiply_elementwise	other	return the hadamard product elementwise product of a and b examples
matrices	MatrixDeterminant	_eval_berkowitz_toeplitz_matrix		return a t where t the toeplitz matrix used in the berkowitz algorithm corresponding to self and a is the first principal submatrix
matrices	MatrixDeterminant	_eval_berkowitz_vector		run the berkowitz algorithm and return a vector whose entries are the coefficients of the characteristic polynomial of self
matrices	MatrixDeterminant	_eval_det_bareiss		compute matrix determinant using bareiss' fraction-free algorithm which is an extension of the well known gaussian
matrices	MatrixDeterminant	_eval_det_berkowitz		use the berkowitz algorithm to compute the determinant
matrices	MatrixDeterminant	_eval_det_lu		use lu the decomposition to compute the determinant
matrices	MatrixDeterminant	adjugate	method	returns the adjugate or classical adjoint of a matrix
matrices	MatrixDeterminant	charpoly	x simplify	computes characteristic polynomial det(x*i - self) where i is the identity matrix
matrices	MatrixDeterminant	cofactor	i j method	calculate the cofactor of an element
matrices	MatrixDeterminant	cofactor_matrix	method	return a matrix containing the cofactor of each element
matrices	MatrixDeterminant	det	method	computes the determinant of a matrix if the matrix
matrices	MatrixDeterminant	minor	i j method	return the i j minor of self that is
matrices	MatrixDeterminant	minor_submatrix	i j	return the submatrix obtained by removing the ith row and jth column from self
matrices	MatrixDeprecated	berkowitz_det		computes determinant using berkowitz method
matrices	MatrixDeprecated	berkowitz_eigenvals		computes eigenvalues of a matrix using berkowitz method
matrices	MatrixDeprecated	berkowitz_minors		computes principal minors using berkowitz method
matrices	MatrixDeprecated	det_bareiss		compute matrix determinant using bareiss' fraction-free algorithm which is an extension of the well known gaussian
matrices	MatrixDeprecated	det_LU_decomposition		compute matrix determinant using lu decomposition note that this method fails if the lu decomposition itself
matrices	MatrixBase	__len__		return the number of elements of self
matrices	MatrixBase	_handle_creation_inputs	cls	return the number of rows cols and flat matrix elements
matrices	MatrixBase	_jordan_split	algebraical geometrical	return a list of integers with sum equal to 'algebraical'
matrices	MatrixBase	_setitem	key value	helper to set value at location given by key
matrices	MatrixBase	add	b	return self + b
matrices	MatrixBase	cholesky_solve	rhs	solves ax = b using cholesky decomposition for a general square non-singular matrix
matrices	MatrixBase	cholesky		returns the cholesky decomposition l of a matrix a such that l * l
matrices	MatrixBase	columnspace	simplify	returns list of vectors matrix objects that span columnspace of self examples
matrices	MatrixBase	condition_number		returns the condition number of a matrix
matrices	MatrixBase	copy		returns the copy of a matrix
matrices	MatrixBase	cross	b	return the cross product of self and b relaxing the condition of compatible dimensions if each has 3 elements a matrix of the
matrices	MatrixBase	D		return dirac conjugate (if self rows == 4)
matrices	MatrixBase	diagonal_solve	rhs	solves ax = b efficiently where a is a diagonal matrix with non-zero diagonal entries
matrices	MatrixBase	diagonalize	reals_only sort normalize	return p d where d is diagonal and d = p^-1 * m * p
matrices	MatrixBase	diff		calculate the derivative of each element in the matrix
matrices	MatrixBase	dot	b	return the dot product of matrix self and b relaxing the condition of compatible dimensions if either the number of rows or columns are
matrices	MatrixBase	dual		returns the dual of a matrix which is (1/2)*levicivita i j k l *m k l summed over indices k and l
matrices	MatrixBase	eigenvals		return eigenvalues using the berkowitz agorithm to compute the characteristic polynomial
matrices	MatrixBase	eigenvects		return list of triples eigenval multiplicity basis
matrices	MatrixBase	exp		return the exponentiation of a square matrix
matrices	MatrixBase	gauss_jordan_solve	b freevar	solves ax = b using gauss jordan elimination
matrices	MatrixBase	hstack	cls	return a matrix formed by joining args horizontally (i e
matrices	MatrixBase	integrate		integrate each element of the matrix
matrices	MatrixBase	inv_mod	m	returns the inverse of the matrix k (mod m), if it exists
matrices	MatrixBase	inverse_ADJ	iszerofunc	calculates the inverse using the adjugate matrix and a determinant
matrices	MatrixBase	inverse_GE	iszerofunc	calculates the inverse using gaussian elimination
matrices	MatrixBase	inverse_LU	iszerofunc	calculates the inverse using lu decomposition
matrices	MatrixBase	inv	method	return the inverse of a matrix
matrices	MatrixBase	is_diagonalizable	reals_only clear_subproducts	check if matrix is diagonalizable
matrices	MatrixBase	is_nilpotent		checks if a matrix is nilpotent
matrices	MatrixBase	jacobian	X	calculates the jacobian matrix derivative of a vectorial function
matrices	MatrixBase	jordan_cells	calc_transformation	return a list of jordan cells of current matrix
matrices	MatrixBase	jordan_form	calc_transformation	return jordan form j of current matrix
matrices	MatrixBase	key2bounds	keys	converts a key with potentially mixed types of keys integer and slice into a tuple of ranges and raises an error if any index is out of self's
matrices	MatrixBase	key2ij	key	converts key into canonical form converting integers or indexable items into valid integers for self's range or returning slices
matrices	MatrixBase	LDLdecomposition		returns the ldl decomposition l d of matrix a such that l * d * l
matrices	MatrixBase	LDLsolve	rhs	solves ax = b using ldl decomposition for a general square and non-singular matrix
matrices	MatrixBase	left_eigenvects		returns left eigenvectors and eigenvalues
matrices	MatrixBase	limit		calculate the limit of each element in the matrix
matrices	MatrixBase	lower_triangular_solve	rhs	solves ax = b where a is a lower triangular matrix
matrices	MatrixBase	LUdecomposition	iszerofunc	returns the decomposition lu and the row swaps p
matrices	MatrixBase	LUdecomposition_Simple	iszerofunc	returns a comprised of l u (l's diag entries are 1) and p which is the list of the row swaps in order
matrices	MatrixBase	LUdecompositionFF		compute a fraction-free lu decomposition
matrices	MatrixBase	LUsolve	rhs iszerofunc	solve the linear system ax = rhs for x where a = self
matrices	MatrixBase	normalized		return the normalized version of self
matrices	MatrixBase	norm	ord	return the norm of a matrix or vector
matrices	MatrixBase	nullspace	simplify	returns list of vectors matrix objects that span nullspace of self examples
matrices	MatrixBase	permuteBkwd	perm	permute the rows of the matrix with the given permutation in reverse
matrices	MatrixBase	permuteFwd	perm	permute the rows of the matrix with the given permutation
matrices	MatrixBase	pinv_solve	B arbitrary_matrix	solve ax = b using the moore-penrose pseudoinverse
matrices	MatrixBase	pinv		calculate the moore-penrose pseudoinverse of the matrix
matrices	MatrixBase	print_nonzero	symb	shows location of non-zero entries for fast shape lookup
matrices	MatrixBase	project	v	return the projection of self onto the line containing v
matrices	MatrixBase	QRdecomposition		return q r where a = q*r q is orthogonal and r is upper triangular
matrices	MatrixBase	QRsolve	b	solve the linear system 'ax = b'
matrices	MatrixBase	rank	iszerofunc simplify	returns the rank of a matrix >>> from sympy import matrix
matrices	MatrixBase	rref	iszerofunc simplify	return reduced row-echelon form of matrix and indices of pivot vars
matrices	MatrixBase	singular_values		compute the singular values of a matrix examples
matrices	MatrixBase	solve_least_squares	rhs method	return the least-square fit to the data
matrices	MatrixBase	solve	rhs method	return solution to self*soln = rhs using given inversion method
matrices	MatrixBase	table	printer rowstart rowend rowsep	string form of matrix as a table
matrices	MatrixBase	upper_triangular_solve	rhs	solves ax = b where a is an upper triangular matrix
matrices	MatrixBase	vech	diagonal check_symmetry	return the unique elements of a symmetric matrix as a one column matrix by stacking the elements in the lower triangle
matrices	MatrixBase	vstack	cls	return a matrix formed by joining args vertically (i e
matrices		classof	A B	get the type of the result when combining matrices of different types
matrices		a2idx	j n	return integer after making positive and validating against n
matrices		_find_reasonable_pivot	col iszerofunc simpfunc	find the lowest index of an item in col that is suitable for a pivot
matrices	_MatrixWrapper	__getattr__	attr	most attribute access is passed straight through
matrices		_matrixify	mat	if mat is a matrix or is matrix-like return a matrix or matrixwrapper object
matrices	ImmutableDenseMatrix	_eval_Eq	other	helper method for equality with matrices
matrices		row_echelon	matlist K	returns the row echelon form of a matrix with diagonal elements reduced to 1
matrices		rref	matlist K	returns the reduced row echelon form of a matrix
matrices		LU	matlist K reverse	it computes the lu decomposition of a matrix and returns l and u matrices
matrices		cholesky	matlist K	performs the cholesky decomposition of a hermitian matrix and returns l and it's conjugate transpose
matrices		LDL	matlist K	performs the ldl decomposition of a hermitian matrix and returns l d and transpose of l
matrices		upper_triangle	matlist K	transforms a given matrix to an upper triangle matrix by performing row operations on it
matrices		lower_triangle	matlist K	transforms a given matrix to a lower triangle matrix by performing row operations on it
matrices		rref_solve	matlist variable constant K	solves a system of equations using reduced row echelon form given a matrix of coefficients a vector of variables and a vector of constants
matrices		LU_solve	matlist variable constant K	solves a system of equations using lu decomposition given a matrix of coefficients a vector of variables and a vector of constants
matrices		cholesky_solve	matlist variable constant K	solves a system of equations using cholesky decomposition given a matrix of coefficients a vector of variables and a vector of constants
matrices		forward_substitution	lower_triangle variable constant K	performs forward substitution given a lower triangular matrix a vector of variables and a vector of constants
matrices		backward_substitution	upper_triangle variable constant K	performs forward substitution given a lower triangular matrix a vector of variables and a vector constants
matrices		_doktocsr	dok	converts a sparse matrix to compressed sparse row csr format
matrices		_csrtodok	csr	converts a csr representation to dok representation
matrices		_iszero	x	returns true if x is zero
matrices	DenseMatrix	__getitem__	key	return portion of self defined by key if the key involves a slice
matrices	DenseMatrix	_cholesky		helper function of cholesky
matrices	DenseMatrix	_diagonal_solve	rhs	helper function of function diagonal_solve without the error checks to be used privately
matrices	DenseMatrix	_eval_inverse		return the matrix inverse using the method indicated default is gauss elimination
matrices	DenseMatrix	_LDLdecomposition		helper function of ldldecomposition
matrices	DenseMatrix	_lower_triangular_solve	rhs	helper function of function lower_triangular_solve
matrices	DenseMatrix	_upper_triangular_solve	rhs	helper function of function upper_triangular_solve
matrices	DenseMatrix	as_immutable		returns an immutable version of this matrix
matrices	DenseMatrix	as_mutable		returns a mutable version of this matrix examples
matrices	DenseMatrix	equals	other failing_expression	applies equals to corresponding elements of the matrices trying to prove that the elements are equivalent returning true
matrices	DenseMatrix	eye	cls n	return an n x n identity matrix
matrices	DenseMatrix	zeros	cls r c	return an r x c matrix of zeros square if c is omitted
matrices		_force_mutable	x	return a matrix as a matrix otherwise return x
matrices	MutableDenseMatrix	col_del	i	delete the given column
matrices	MutableDenseMatrix	col_op	j f	in-place operation on col j using two-arg functor whose args are interpreted as (self[i j], i)
matrices	MutableDenseMatrix	col_swap	i j	swap the two given columns of the matrix in-place
matrices	MutableDenseMatrix	copyin_list	key value	copy in elements from a list
matrices	MutableDenseMatrix	copyin_matrix	key value	copy in values from a matrix into the given bounds
matrices	MutableDenseMatrix	fill	value	fill the matrix with the scalar value
matrices	MutableDenseMatrix	row_del	i	delete the given row
matrices	MutableDenseMatrix	row_op	i f	in-place operation on row i using two-arg functor whose args are interpreted as (self[i j], j)
matrices	MutableDenseMatrix	row_swap	i j	swap the two given rows of the matrix in-place
matrices	MutableDenseMatrix	simplify	ratio measure	applies simplify to the elements of a matrix in place
matrices	MutableDenseMatrix	zip_row_op	i k f	in-place operation on row i using two-arg functor whose args are interpreted as (self[i j], self[k j])
matrices		list2numpy	l dtype	converts python list of sympy expressions to a numpy array
matrices		matrix2numpy	m dtype	converts sympy's matrix to a numpy array
matrices		rot_axis3	theta	returns a rotation matrix for a rotation of theta in radians about the 3-axis
matrices		rot_axis2	theta	returns a rotation matrix for a rotation of theta in radians about the 2-axis
matrices		rot_axis1	theta	returns a rotation matrix for a rotation of theta in radians about the 1-axis
matrices		symarray	prefix shape	create a numpy ndarray of symbols as an object array
matrices		casoratian	seqs n zero	given linear difference operator l of order 'k' and homogeneous equation ly = 0 we want to compute kernel of l which is a set
matrices		eye	n cls	create square identity matrix n x n
matrices		diag		create a sparse diagonal matrix from a list of diagonal values
matrices		GramSchmidt	vlist orthonormal	apply the gram-schmidt process to a set of vectors
matrices		hessian	f varlist constraints	compute hessian matrix for a function f wrt parameters in varlist which may be given as a sequence or a row/column vector
matrices		jordan_cell	eigenval n	create matrix of jordan cell kind examples
matrices		matrix_multiply_elementwise	A B	return the hadamard product elementwise product of a and b >>> from sympy
matrices		ones	r c	returns a matrix of ones with r rows and c columns if c is omitted a square matrix will be returned
matrices		randMatrix	r c min max	create random matrix with dimensions r x c if c is omitted
matrices		wronskian	functions var method	compute wronskian for [] of functions ::
matrices		zeros	r c cls	returns a matrix of zeros with r rows and c columns if c is omitted a square matrix will be returned
matrices.expressions		refine_Determinant	expr assumptions	>>> from sympy import matrixsymbol q assuming refine det >>> x = matrixsymbol('x', 2 2)
matrices.expressions	BlockMatrix	transpose		return transpose of matrix
matrices.expressions		block_collapse	expr	evaluates a block matrix expression
matrices.expressions		bc_dist	expr	turn a*[x y] into [a*x a*y]
matrices.expressions		deblock	B	flatten a blockmatrix of blockmatrices
matrices.expressions		reblock_2x2	B	reblock a blockmatrix so that it has 2x2 blocks of block matrices
matrices.expressions		bounds	sizes	convert sequence of numbers into pairs of low-high pairs >>> from sympy
matrices.expressions		blockcut	expr rowsizes colsizes	cut a matrix expression into blocks >>> from sympy import immutablematrix blockcut
matrices.expressions		mat_slice_of_slice	parent rowslice colslice	collapse nested matrix slices
matrices.expressions		refine_Transpose	expr assumptions	>>> from sympy import matrixsymbol q assuming refine >>> x = matrixsymbol('x', 2 2)
matrices.expressions		validate		checks for valid shapes for args of matmul
matrices.expressions		merge_explicit	matmul	merge explicit matrixbase arguments >>> from sympy import matrixsymbol eye matrix matmul pprint
matrices.expressions		xxinv	mul	y * x * x i -> y
matrices.expressions		remove_ids	mul	remove identities from a matmul this is a modified version of sympy
matrices.expressions		only_squares		factor matrices only if they are square
matrices.expressions		refine_MatMul	expr assumptions	>>> from sympy import matrixsymbol q assuming refine >>> x = matrixsymbol('x', 2 2)
matrices.expressions		hadamard_product		return the elementwise aka hadamard product of matrices
matrices.expressions		trace	expr	trace of a matrix sum of the diagonal elements
matrices.expressions	MatrixExpr	as_explicit		returns a dense matrix with elements represented explicitly returns an object of type immutabledensematrix
matrices.expressions	MatrixExpr	as_mutable		returns a dense mutable matrix with elements represented explicitly examples
matrices.expressions	MatrixExpr	equals	other	test elementwise equality between matrices potentially of different types
matrices.expressions		refine_Inverse	expr assumptions	>>> from sympy import matrixsymbol q assuming refine >>> x = matrixsymbol('x', 2 2)
matrices.expressions		merge_explicit	matadd	merge explicit matrixbase arguments >>> from sympy import matrixsymbol eye matrix matadd pprint
plotting		textplot	expr a b W	print a crude ascii art plot of the sympy expression 'expr' (which should contain a single symbol e
plotting		_arity	f	python 2 and 3 compatible version that do not raise a deprecation warning
plotting	Plot	append	arg	adds an element from a plot's series to an existing plot
plotting	Plot	extend	arg	adds all series from another plot
plotting	LineOver1DRangeSeries	get_segments		adaptively gets segments for plotting
plotting	Parametric2DLineSeries	get_segments		adaptively gets segments for plotting
plotting		flat	x y z eps	checks whether three points are almost collinear
plotting		_matplotlib_list	interval_list	returns lists for matplotlib fill command from a list of bounding
plotting		plot		plots a function of a single variable and returns an instance of the plot class (also see the description of the
plotting		plot_parametric		plots a 2d parametric plot
plotting		plot3d_parametric_line		plots a 3d parametric line plot
plotting		plot3d		plots a 3d surface plot
plotting		plot3d_parametric_surface		plots a 3d parametric surface plot
plotting		check_arguments	args expr_len nb_of_free_symbols	checks the arguments and converts into tuples of the form exprs ranges
plotting	Lambdifier	str2tree	exprstr	converts an expression string to a tree
plotting	Lambdifier	tree2str	cls tree	converts a tree to string without translations
plotting	Lambdifier	tree2str_translate	tree	converts a tree to string with translations
plotting	Lambdifier	translate_str	estr	translate substrings of estr using in order the dictionaries in dict_tuple_str
plotting	Lambdifier	translate_func	func_name argtree	translate function names and the tree of arguments
plotting	Lambdifier	sympy_expression_namespace	cls expr	traverses the func args tree of an expression and creates a sympy namespace
plotting	Lambdifier	sympy_atoms_namespace	expr	for no real reason this function is separated from sympy_expression_namespace
plotting	ImplicitSeries	_get_raster_interval	func	uses interval math to adaptively mesh and obtain the plot
plotting	ImplicitSeries	_get_meshes_grid		generates the mesh for generating a contour
plotting		plot_implicit	expr x_var y_var	a plot function to plot implicit equations / inequalities
plotting.intervalmath		exp	x	evaluates the exponential of an interval
plotting.intervalmath		log	x	evaluates the natural logarithm of an interval
plotting.intervalmath		log10	x	evaluates the logarithm to the base 10 of an interval
plotting.intervalmath		atan	x	evaluates the tan inverse of an interval
plotting.intervalmath		sin	x	evaluates the sine of an interval
plotting.intervalmath		cos	x	evaluates the cos of an interval
plotting.intervalmath		tan	x	evaluates the tan of an interval
plotting.intervalmath		sqrt	x	evaluates the square root of an interval
plotting.intervalmath		imin		evaluates the minimum of a list of intervals
plotting.intervalmath		imax		evaluates the maximum of a list of intervals
plotting.intervalmath		sinh	x	evaluates the hyperbolic sine of an interval
plotting.intervalmath		cosh	x	evaluates the hyperbolic cos of an interval
plotting.intervalmath		tanh	x	evaluates the hyperbolic tan of an interval
plotting.intervalmath		asin	x	evaluates the inverse sine of an interval
plotting.intervalmath		acos	x	evaluates the inverse cos of an interval
plotting.intervalmath		ceil	x	evaluates the ceiling of an interval
plotting.intervalmath		floor	x	evaluates the floor of an interval
plotting.intervalmath		acosh	x	evaluates the inverse hyperbolic cosine of an interval
plotting.intervalmath		asinh	x	evaluates the inverse hyperbolic sine of an interval
plotting.intervalmath		atanh	x	evaluates the inverse hyperbolic tangent of an interval
plotting.intervalmath		And		defines the three valued and behaviour for a 2-tuple of
plotting.intervalmath		Or		defines the three valued or behaviour for a 2-tuple of
plotting.intervalmath		_pow_float	inter power	evaluates an interval raised to a floating point
plotting.intervalmath		_pow_int	inter power	evaluates an interval raised to an integer power
plotting.pygletplot	ManagedWindow	__init__		it is best not to override this function in the child class unless you need to take additional arguments
plotting.pygletplot	ManagedWindow	__event_loop__		the event loop thread function do not override or call
plotting.pygletplot	ManagedWindow	close		closes the window
plotting.pygletplot	ManagedWindow	setup		called once before the event loop begins
plotting.pygletplot	ManagedWindow	update	dt	called before draw during each iteration of the event loop
plotting.pygletplot	ManagedWindow	draw		called after update during each iteration of the event loop
plotting.pygletplot		get_model_matrix	array_type glGetMethod	returns the current modelview matrix
plotting.pygletplot		get_projection_matrix	array_type glGetMethod	returns the current modelview matrix
plotting.pygletplot		get_viewport		returns the current viewport
plotting.pygletplot		billboard_matrix		removes rotational components of current matrix so that primitives
plotting.pygletplot	ColorScheme	apply_to_curve	verts u_set set_len inc_pos	apply this color scheme to a set of vertices over a single
plotting.pygletplot	ColorScheme	apply_to_surface	verts u_set v_set set_len	apply this color scheme to a set of vertices over two
plotting.pygletplot	PlotModeBase	push_wireframe	function	push a function which performs gl commands used to build a display list
plotting.pygletplot	PlotModeBase	push_solid	function	push a function which performs gl commands used to build a display list
plotting.pygletplot	PlotObject	draw		opengl rendering code for the plot object
plotting.pygletplot	PygletPlot	__init__		positional arguments ====================
plotting.pygletplot	PygletPlot	show		creates and displays a plot window or activates it gives it focus if it has already been created
plotting.pygletplot	PygletPlot	close		closes the plot window
plotting.pygletplot	PygletPlot	saveimage	outfile format size	saves a screen capture of the plot window to an image file
plotting.pygletplot	PygletPlot	clear		clears the function list of this plot
plotting.pygletplot	PygletPlot	__getitem__	i	returns the function at position i in the function list
plotting.pygletplot	PygletPlot	__setitem__	i args	parses and adds a plotmode to the function list
plotting.pygletplot	PygletPlot	__delitem__	i	removes the function in the function list at position i
plotting.pygletplot	PygletPlot	firstavailableindex		returns the first unused index in the function list
plotting.pygletplot	PygletPlot	append		parses and adds a plotmode to the function list at the first available index
plotting.pygletplot	PygletPlot	__len__		returns the number of functions in the function list
plotting.pygletplot	PygletPlot	__iter__		allows iteration of the function list
plotting.pygletplot	PygletPlot	__str__		returns a string containing a new-line separated list of the functions in the function list
plotting.pygletplot	PlotInterval	try_parse		returns a plotinterval if args can be interpreted as such otherwise none
plotting.pygletplot	PlotInterval	__repr__		a string representing the interval in class constructor form
plotting.pygletplot	PlotInterval	__str__		a string representing the interval in list form
plotting.pygletplot	PlotInterval	vrange		yields v_steps+1 sympy numbers ranging from v_min to v_max
plotting.pygletplot	PlotInterval	vrange2		yields v_steps pairs of sympy numbers ranging from (v_min v_min + step) to (v_max - step v_max)
plotting.pygletplot	PlotMode	__new__	cls	this is the function which interprets arguments given to plot
plotting.pygletplot	PlotMode	_get_mode	mode_arg i_var_count d_var_count	tries to return an appropriate mode class
plotting.pygletplot	PlotMode	_register	cls	called once for each user-usable plot mode
plotting.pygletplot	PlotMode	_init_mode	cls	initializes the plot mode based on the 'mode-specific parameters' above
plotting.pygletplot		var_count_error	is_independent is_plotting	used to format an error message which differs slightly in 4 places
strategies		top_down	rule fns	apply a rule down a tree running it on the top nodes first
strategies		bottom_up	rule fns	apply a rule down a tree running it on the bottom nodes first
strategies		top_down_once	rule fns	apply a rule down a tree - stop on success
strategies		bottom_up_once	rule fns	apply a rule up a tree - stop on success
strategies		sall	rule fns	strategic all - apply rule to args
strategies		exhaust	rule	apply a rule repeatedly until it has no effect
strategies		memoize	rule	memoized version of a rule
strategies		condition	cond rule	only apply rule if condition is true
strategies		chain		compose a sequence of rules so that they apply to the expr sequentially
strategies		debug	rule file	print out before and after expressions each time rule is used
strategies		null_safe	rule	return original expr if rule returns none
strategies		tryit	rule	return original expr if rule raises exception
strategies		do_one		try each of the rules until one works then stop
strategies		switch	key ruledict	select a rule based on the result of key called on the function
strategies		minimize		select result of rules that minimizes objective >>> from sympy
strategies		subs	d	full simultaneous exact substitution examples
strategies		canon		strategy for canonicalization apply each rule in a bottom_up fashion through the tree
strategies		typed	ruletypes	apply rules based on the expression type inputs
strategies		rm_id	isid new	create a rule to remove identities isid - fn :: x -> bool --- whether or not this element is an identity
strategies		glom	key count combine	create a rule to conglomerate identical args >>> from sympy
strategies		sort	key new	create a rule to sort by a key function >>> from sympy
strategies		distribute	A B	turns an a containing bs into a b of as where a b are container types
strategies		subs	a b	replace expressions exactly
strategies		unpack	expr	rule to unpack singleton args >>> from sympy
strategies		flatten	expr new	flatten t(a b t c d t2 e to t(a b c d t2 e
strategies		rebuild	expr	rebuild a sympy tree this function recursively calls constructors in the expression tree
strategies		treeapply	tree join leaf	apply functions onto recursive containers tree join - a dictionary mapping container types to functions
strategies		greedy	tree objective	execute a strategic tree select alternatives greedily
strategies		allresults	tree leaf	execute a strategic tree return all possibilities
strategies.branch		top_down	brule fns	apply a rule down a tree running it on the top nodes first
strategies.branch		sall	brule fns	strategic all - apply rule to args
strategies.branch		exhaust	brule	apply a branching rule repeatedly until it has no effect
strategies.branch		debug	brule file	print the input and output expressions at each rule application
strategies.branch		multiplex		multiplex many branching rules into one
strategies.branch		condition	cond brule	only apply branching rule if condition is true
strategies.branch		sfilter	pred brule	yield only those results which satisfy the predicate
strategies.branch		do_one		execute one of the branching rules
strategies.branch		chain		compose a sequence of brules so that they apply to the expr sequentially
strategies.branch		yieldify	rl	turn a rule into a branching rule
strategies.branch		canon		strategy for canonicalization apply each branching rule in a top-down fashion through the tree
simplify		TR0	rv	simplification of rational polynomials trying to simplify the expression e
simplify		TR1	rv	replace sec csc with 1/cos 1/sin examples
simplify		TR2	rv	replace tan and cot with sin/cos and cos/sin examples
simplify		TR2i	rv half	converts ratios involving sin and cos as follows : sin x /cos x -> tan x
simplify		TR3	rv	induced formula example sin -a = -sin a examples
simplify		TR4	rv	identify values of special angles
simplify		_TR56	rv f g h	helper for tr5 and tr6 to replace f**2 with h(g**2) options
simplify		TR5	rv max pow	replacement of sin**2 with 1 - cos x **2
simplify		TR6	rv max pow	replacement of cos**2 with 1 - sin x **2
simplify		TR7	rv	lowering the degree of cos x **2 examples
simplify		TR8	rv first	converting products of cos and/or sin to a sum or difference of cos and or sin terms
simplify		TR9	rv	sum of cos or sin terms as a product of cos or sin
simplify		TR10	rv first	separate sums in cos and sin
simplify		TR10i	rv	sum of products to function of sum
simplify		TR11	rv base	function of double angle to product the base argument can be used
simplify		TR12	rv first	separate sums in tan
simplify		TR12i	rv	combine tan arguments as (tan y + tan x )/(tan x *tan y - 1) -> -tan x + y
simplify		TR13	rv	change products of tan or cot
simplify		TRmorrie	rv	returns cos x *cos(2*x)* *cos(2** k-1 *x) -> sin(2**k*x)/(2**k*sin x
simplify		TR14	rv first	convert factored powers of sin and cos identities into simpler expressions
simplify		TR15	rv max pow	convert sin x *-2 to 1 + cot x **2
simplify		TR16	rv max pow	convert cos x *-2 to 1 + tan x **2
simplify		TR111	rv	convert f x **-i to g x **i where either i is an integer or the base is positive and f g are tan cot sin csc or cos sec
simplify		TR22	rv max pow	convert tan x **2 to sec x **2 - 1 and cot x **2 to csc x **2 - 1
simplify		L	rv	return count of trigonometric functions in expression
simplify		fu	rv measure	attempt to simplify expression by using transformation rules given in the algorithm by fu et al
simplify		process_common_addends	rv do key2 key1	apply do to addends of rv that (if key1=true) share at least a common absolute value of their coefficient and the value of key2 when
simplify		trig_split	a b two	return the gcd s1 s2 a1 a2 bool where if two is false default then :
simplify		as_f_sign_1	e	if e is a sum that can be written as g* a + s where s is +/-1, return g, a, and s where a does
simplify		_osborne	e d	replace all hyperbolic functions with trig functions using the osborne rule
simplify		_osbornei	e d	replace all trig functions with hyperbolic functions using the osborne rule
simplify		hyper_as_trig	rv	return an expression containing hyperbolic functions in terms of trigonometric functions
simplify		add_formulae	formulae	create our knowledge base
simplify		make_simp	z	create a function that simplifies rational functions in z
simplify	Hyper_Function	gamma		number of upper parameters that are negative integers this is a transformation invariant
simplify	Hyper_Function	build_invariants		compute the invariant vector
simplify	Hyper_Function	difficulty	func	estimate how many steps it takes to reach func from self
simplify	Hyper_Function	_is_suitable_origin		decide if self is a suitable origin
simplify	G_Function	compute_buckets		compute buckets for the fours sets of parameters
simplify	Formula	_compute_basis	closed_form	compute a set of functions b=(f1 fn), a nxn matrix m
simplify	Formula	find_instantiations	func	find substitutions of the free symbols that match func
simplify	FormulaCollection	__init__		doing this globally at module init time is a pain
simplify	FormulaCollection	lookup_origin	func	given the suitable target func, try to find an origin in our knowledge base
simplify	MeijerFormula	try_instantiate	func	try to instantiate the current formula to almost match func
simplify	MeijerFormulaCollection	lookup_origin	func	try to find a formula that matches func
simplify	Operator	apply	obj op	apply self to the object obj, where the generator is op
simplify	UnShiftA	__init__	ap bq i z	note i counts from zero!
simplify	UnShiftB	__init__	ap bq i z	note i counts from zero!
simplify	MeijerUnShiftA	__init__	an ap bm bq	note i counts from zero!
simplify	MeijerUnShiftB	__init__	an ap bm bq	note i counts from zero!
simplify	MeijerUnShiftC	__init__	an ap bm bq	note i counts from zero!
simplify	MeijerUnShiftD	__init__	an ap bm bq	note i counts from zero!
simplify	ReduceOrder	__new__	cls ai bj	for convenience if reduction is not possible return none
simplify	ReduceOrder	_meijer	cls b a sign	cancel b + sign*s and a + sign*s this is for meijer g functions
simplify		_reduce_order	ap bq gen key	order reduction algorithm used in hypergeometric and meijer g
simplify		reduce_order	func	given the hypergeometric function func, find a sequence of operators to reduces order as much as possible
simplify		reduce_order_meijer	func	given the meijer g function parameters func, find a sequence of operators that reduces order as much as possible
simplify		make_derivative_operator	M z	create a derivative operator to be passed to operator apply
simplify		apply_operators	obj ops op	apply the list of operators ops to object obj, substituting op for the generator
simplify		devise_plan	target origin z	devise a plan consisting of shift and un-shift operators to be applied to the hypergeometric function target to yield origin
simplify		try_shifted_sum	func z	try to recognise a hypergeometric sum that starts from k > 0
simplify		try_polynomial	func z	recognise polynomial cases returns none if not such a case
simplify		try_lerchphi	func	try to find an expression for hyper_function func in terms of lerch transcendents
simplify		build_hypergeometric_formula	func	create a formula object representing the hypergeometric function func
simplify		hyperexpand_special	ap bq z	try to find a closed-form expression for hyper ap bq z where z is supposed to be a "special" value e
simplify		_hyperexpand	func z ops0 z0	try to find an expression for the hypergeometric function func
simplify		devise_plan_meijer	fro to z	find operators to convert g-function fro into g-function to
simplify		_meijergexpand	func z0 allow_hyper rewrite	try to find an expression for the meijer g function specified by the g_function func
simplify		hyperexpand	f allow_hyper rewrite place	expand hypergeometric functions if allow_hyper is true allow partial
simplify		powsimp	expr deep combine force	reduces expression by combining powers with similar bases and exponents
simplify		powdenest	eq force polar	collect exponents on powers as assumptions allow
simplify		separatevars	expr symbols dict force	separates variables in an expression if possible by
simplify		posify	eq	return eq with generic symbols made positive and a dictionary containing the mapping between the old and new
simplify		hypersimp	f k	given combinatorial term f k simplify its consecutive term ratio i
simplify		hypersimilar	f g k	returns true if 'f' and 'g' are hyper-similar
simplify		signsimp	expr evaluate	make all add sub-expressions canonical wrt sign
simplify		simplify	expr ratio measure fu	simplifies the given expression
simplify		sum_simplify	s	main function for sum simplification
simplify		sum_combine	s_t	helper function for sum simplification
simplify		factor_sum	limits radical clear fraction	helper function for sum simplification
simplify		sum_add	other method	helper function for sum simplification
simplify		product_simplify	s	main function for product simplification
simplify		product_mul	other method	helper function for product simplification
simplify		_nthroot_solve	p n prec	helper function for nthroot
simplify		logcombine	expr force	takes logarithms and combines them using the following rules - log x + log y == log(x*y) if both are not negative
simplify		bottom_up	rv F atoms nonbasic	apply f to all expressions in an expression tree from the bottom up
simplify		besselsimp	expr	simplify bessel-type functions
simplify		nthroot	expr n max_len prec	compute a real nth-root of a sum of surds parameters
simplify		nsimplify	expr constants tolerance full	find a simple representation for a number or if there are free symbols or if rational=true then replace floats with their rational equivalents
simplify		_real_to_rational	expr tolerance	replace all reals in expr with rationals
simplify		clear_coefficients	expr rhs	return p r where p is the expression obtained when rational additive and multiplicative coefficients of expr have been stripped
simplify		trigsimp_groebner	expr hints quick order	simplify trigonometric expressions using a groebner basis algorithm
simplify		trigsimp	expr	reduces expression by using known trig identities notes
simplify		exptrigsimp	expr simplify	simplifies exponential / trigonometric / hyperbolic functions
simplify		trigsimp_old	expr	reduces expression by using known trig identities notes
simplify		_dotrig	a b	helper to tell whether a and b have the same sorts of symbols in them -- no need to test hyperbolic patterns against
simplify		_replace_mul_fpowxgpow	expr f g rexp	helper for _match_div_rewrite
simplify		_match_div_rewrite	expr i	helper for __trigsimp
simplify		__trigsimp	expr deep	recursive helper for trigsimp
simplify		futrig	e	return simplified e using fu-like transformations
simplify		_futrig	e	helper for futrig
simplify		_is_Expr	e	_eapply helper to tell whether e and all its args are exprs
simplify		_eapply	func e cond	apply func to e if all args are exprs else only apply it to those args that *are* exprs
simplify		ratsimp	expr	put an expression over a common denominator cancel and reduce
simplify		ratsimpmodprime	expr G	simplifies a rational expression expr modulo the prime ideal generated by g
simplify		use	expr func level args	use func to transform expr at the given level
simplify		sub_pre	e	replace y - x with - x - y if -1 can be extracted from y - x
simplify		sub_post	e	replace 1*-1*x with -x
simplify	EPath	__new__	cls path	construct new epath
simplify	EPath	_get_ordered_args	expr	sort expr args using printing order
simplify	EPath	_hasattrs	expr attrs	check if expr has any of attrs
simplify	EPath	_hastypes	expr types	check if expr is any of types
simplify	EPath	_has	expr attrs types	apply _hasattrs and _hastypes to expr
simplify	EPath	apply	expr func args kwargs	modify parts of an expression selected by a path
simplify	EPath	select	expr	retrieve parts of an expression selected by a path
simplify		epath	path expr func args	manipulate parts of an expression selected by a path
simplify		is_sqrt	expr	return true if expr is a sqrt otherwise false
simplify		sqrt_depth	p	return the maximum depth of any square root argument of p
simplify		is_algebraic	p	return true if p is comprised of only rationals or square roots of rationals and algebraic operations
simplify		_subsets	n	returns all possible subsets of the set (0 1 n-1) except the
simplify		sqrtdenest	expr max_iter	denests sqrts in an expression that contain other square roots if possible otherwise returns the expr unchanged
simplify		_sqrt_match	p	return [a b r] for p match(a + b*sqrt r where in addition to
simplify		_sqrtdenest0	expr	returns expr after denesting its arguments
simplify		_sqrtdenest_rec	expr	helper that denests the square root of three or more surds
simplify		_sqrtdenest1	expr denester	return denested expr after denesting with simpler methods or that failing using the denester
simplify		_sqrt_symbolic_denest	a b r	given an expression sqrt(a + b*sqrt b ), return the denested expression or none
simplify		_sqrt_numeric_denest	a b r d2	helper that denest expr = a + b*sqrt r with d2 = a**2 - b**2*r > 0 or returns none if not denested
simplify		sqrt_biquadratic_denest	expr a b r	denest expr = sqrt(a + b*sqrt r where a b r are linear combinations of square roots of
simplify		_denester	nested av0 h max_depth_level	denests a list of expressions that contain nested square roots
simplify		combsimp	expr	simplify combinatorial expressions
simplify		reps_toposort	r	sort replacements r so k1 v1 appears before k2 v2 if k2 is in v1's free symbols
simplify		cse_separate	r e	move expressions that are in the form symbol expr out of the expressions and sort them into the replacements using the reps_toposort
simplify		preprocess_for_cse	expr optimizations	preprocess an expression to optimize for common subexpression elimination
simplify		postprocess_for_cse	expr optimizations	postprocess an expression after common subexpression elimination to return the expression to canonical sympy form
simplify		pairwise_most_common	sets	return a list of s l tuples where s is the largest subset of elements that appear in pairs of sets given by sets and l
simplify		opt_cse	exprs order verbose	find optimization opportunities in adds muls pows and negative coefficient muls
simplify		tree_cse	exprs symbols opt_subs order	perform raw cse on expression tree taking opt_subs into account
simplify		cse	exprs symbols optimizations postprocess	perform common subexpression elimination on an expression
simplify		collect	expr syms func evaluate	collect additive terms of an expression
simplify		rcollect	expr	recursively collect sums in an expression
simplify		collect_sqrt	expr evaluate	return expr with terms having common square roots collected together
simplify		collect_const	expr	a non-greedy collection of terms with similar number coefficients in an add expr
simplify		radsimp	expr symbolic max_terms	rationalize the denominator by removing square roots
simplify		rad_rationalize	num den	rationalize num/den by removing square roots in the denominator num and den are sum of terms whose squares are rationals
simplify		fraction	expr exact	returns a pair with expression's numerator and denominator
simplify		split_surds	expr	split an expression with terms whose squares are rationals into a sum of terms whose surds squared have gcd equal to g
simplify		_split_gcd		split the list of integers a into a list of integers a1 having g = gcd a1 , and a list a2 whose elements are not divisible by
interactive		_init_python_printing	stringify_func	setup printing in python interactive session
interactive		_init_ipython_printing	ip stringify_func use_latex euler	setup printing in ipython interactive session
interactive		_is_ipython	shell	is a shell instance an ipython shell?
interactive		init_printing	pretty_print order use_unicode use_latex	initializes pretty-printer depending on the environment
interactive		_make_message	ipython quiet source	create a banner for an interactive session
interactive		int_to_Integer	s	wrap integer literals with integer
interactive		enable_automatic_int_sympification	app	allow ipython to automatically convert integer literals to integer
interactive		enable_automatic_symbols	app	allow ipython to automatially create symbols (isympy -a)
interactive		init_ipython_session	argv auto_symbols auto_int_to_Integer	construct new ipython session
interactive		init_python_session		construct new python session
interactive		init_session	ipython pretty_print order use_unicode	initialize an embedded ipython or python session the ipython session is
interactive		load_ipython_extension	ip	load the extension in ipython
ntheory		is_square	n prep	return true if n == a * a for some integer a else false
ntheory		_test	n base s t	miller-rabin strong pseudoprime test for one base
ntheory		mr	n bases	perform a miller-rabin strong pseudoprime test on n using a given list of bases/witnesses
ntheory		_lucas_sequence	n P Q k	return the modular lucas sequence (u_k v_k q_k)
ntheory		_lucas_selfridge_params	n	calculates the selfridge parameters d p q for n this is
ntheory		_lucas_extrastrong_params	n	calculates the "extra strong" parameters d p q for n
ntheory		is_lucas_prp	n	standard lucas compositeness test with selfridge parameters returns
ntheory		is_strong_lucas_prp	n	strong lucas compositeness test with selfridge parameters returns
ntheory		is_extra_strong_lucas_prp	n	extra strong lucas compositeness test returns false if n is
ntheory		isprime	n	test if n is a prime number true or not false for n < 2^64 the
ntheory		_a	n k prec	compute the inner sum in hrr formula [1]_ references
ntheory		_d	n j prec sq23pi	compute the sinh term in the outer sum of the hrr formula
ntheory		npartitions	n verbose	calculate the partition function p n i e the number of ways that
ntheory		pi_hex_digits	n prec	returns a string containing prec default 14 digits starting at the nth digit of pi in hex
ntheory		smoothness	n	return the b-smooth and b-power smooth values of n
ntheory		smoothness_p	n m power visual	return a list of [m (p (m sm p + m psm p + m )) ]
ntheory		trailing	n	count the number of trailing zero digits in the binary representation of n i
ntheory		multiplicity	p n	find the greatest integer m such that p**m divides n
ntheory		perfect_power	n candidates big factor	return b e such that n == b**e if n is a perfect power otherwise return false
ntheory		pollard_rho	n s a retries	use pollard's rho method to try to extract a nontrivial factor of n
ntheory		pollard_pm1	n B a retries	use pollard's p-1 method to try to extract a nontrivial factor of n
ntheory		_trial	factors n candidates verbose	helper function for integer factorization trial factors n
ntheory		_check_termination	factors n limitp1 use_trial	helper function for integer factorization checks if n
ntheory		_factorint_small	factors n limit fail_max	return the value of n and either a 0 indicating that factorization up to the limit was complete or else the next near-prime that would have
ntheory		factorint	n limit use_trial use_rho	given a positive integer n, factorint n returns a dict containing the prime factors of n as keys and their respective multiplicities
ntheory		factorrat	rat limit use_trial use_rho	given a rational r, factorrat r returns a dict containing the prime factors of r as keys and their respective multiplicities
ntheory		primefactors	n limit verbose	return a sorted list of n's prime factors ignoring multiplicity and any composite factor that remains if the limit was set too low
ntheory		_divisors	n	helper function for divisors which generates the divisors
ntheory		divisors	n generator	return all divisors of n sorted from 1 n by default
ntheory		divisor_count	n modulus	return the number of divisors of n if modulus is not 1 then only
ntheory		_udivisors	n	helper function for udivisors which generates the unitary divisors
ntheory		udivisors	n generator	return all unitary divisors of n sorted from 1 n by default
ntheory		udivisor_count	n	return the number of unitary divisors of n
ntheory		_antidivisors	n	helper function for antidivisors which generates the antidivisors
ntheory		antidivisors	n generator	return all antidivisors of n sorted from 1 n by default
ntheory		antidivisor_count	n	return the number of antidivisors [1]_ of n
ntheory		core	n t	calculate core n t = core_t n of a positive integer n core_2 n is equal to the squarefree part of n
ntheory		digits	n b	return a list of the digits of n in base b the first element in the list
ntheory		egyptian_fraction	r algorithm	return the list of denominators of an egyptian fraction expansion [1]_ of the said rational r
ntheory	Sieve	_reset		return sieve to its initial state for testing purposes
ntheory	Sieve	extend	n	grow the sieve to cover all primes <= n a real number
ntheory	Sieve	extend_to_no	i	extend to include the ith prime number
ntheory	Sieve	primerange	a b	generate all prime numbers in the range [a b)
ntheory	Sieve	search	n	return the indices i j of the primes that bound n
ntheory	Sieve	__getitem__	n	return the nth prime number
ntheory		prime	nth	return the nth prime with the primes indexed as prime 1 = 2 prime 2 = 3 etc
ntheory		primepi	n	return the value of the prime counting function pi n = the number of prime numbers less than or equal to n
ntheory		nextprime	n ith	return the ith prime greater than n
ntheory		prevprime	n	return the largest prime smaller than n
ntheory		primerange	a b	generate a list of all prime numbers in the range [a b)
ntheory		randprime	a b	return a random prime number in the range [a b)
ntheory		primorial	n nth	returns the product of the first n primes default or the primes less than or equal to n (when nth=false)
ntheory		cycle_length	f x0 nmax values	for a given iterated sequence return a generator that gives the length of the iterated cycle lambda and the length of terms
ntheory		composite	nth	return the nth composite number with the composite numbers indexed as composite 1 = 4 composite 2 = 6 etc
ntheory		compositepi	n	return the number of positive composite numbers less than or equal to n
ntheory		n_order	a n	returns the order of a modulo n
ntheory		_primitive_root_prime_iter	p	generates the primitive roots for a prime p references
ntheory		primitive_root	p	returns the smallest primitive root or none references
ntheory		is_primitive_root	a p	returns true if a is a primitive root of p a is said to be the primitive root of p if gcd a p == 1 and
ntheory		_sqrt_mod_tonelli_shanks	a p	returns the square root in the case of p prime with p == 1 mod 8 references
ntheory		sqrt_mod	a p all_roots	find a root of x**2 = a mod p parameters
ntheory		_product		cartesian product generator notes
ntheory		sqrt_mod_iter	a p domain	iterate over solutions to x**2 = a mod p parameters
ntheory		_sqrt_mod_prime_power	a p k	find the solutions to x**2 = a mod p**k when a % p != 0 parameters
ntheory		_sqrt_mod1	a p n	find solution to x**2 == a mod p**n when a % p == 0 see http //www
ntheory		is_quad_residue	a p	returns true if a (mod p) is in the set of squares mod p, i
ntheory		is_nthpow_residue	a n m	returns true if x**n == a mod m has solutions
ntheory		_is_nthpow_residue_bign	a n m	returns true if x**n == a mod m has solutions for n > 2
ntheory		_is_nthpow_residue_bign_prime_power	a n p k	returns true/false if a solution for x**n == a (mod(p**k)) does/doesn't exist
ntheory		_nthroot_mod1	s q p all_roots	root of x**q = s mod p, p prime and q divides p - 1 references
ntheory		nthroot_mod	a n p all_roots	find the solutions to x**n = a mod p parameters
ntheory		quadratic_residues	p	returns the list of quadratic residues
ntheory		legendre_symbol	a p	returns the legendre symbol (a / p)
ntheory		jacobi_symbol	m n	returns the jacobi symbol (m / n)
ntheory		_discrete_log_trial_mul	n a b order	trial multiplication algorithm for computing the discrete logarithm of a to the base b modulo n
ntheory		_discrete_log_shanks_steps	n a b order	baby-step giant-step algorithm for computing the discrete logarithm of a to the base b modulo n
ntheory		_discrete_log_pollard_rho	n a b order	pollard's rho algorithm for computing the discrete logarithm of a to the base b modulo n
ntheory		_discrete_log_pohlig_hellman	n a b order	pohlig-hellman algorithm for computing the discrete logarithm of a to the base b modulo n
ntheory		discrete_log	n a b order	compute the discrete logarithm of a to the base b modulo n
ntheory		symmetric_residue	a m	return the residual mod m such that it is within half of the modulus
ntheory		crt	m v symmetric check	chinese remainder theorem
ntheory		crt1	m	first part of chinese remainder theorem for multiple application
ntheory		crt2	m v mm e	second part of chinese remainder theorem for multiple application
ntheory		solve_congruence		compute the integer n that has the residual ai when it is divided by mi where the ai and mi are given as pairs to
ntheory		continued_fraction_periodic	p q d	find the periodic continued fraction expansion of a quadratic irrational
ntheory		continued_fraction_reduce	cf	reduce a continued fraction to a rational or quadratic irrational
ntheory		continued_fraction_iterator	x	return continued fraction expansion of x as iterator
ntheory		continued_fraction_convergents	cf	return an iterator over the convergents of a continued fraction cf
ntheory		binomial_coefficients	n	return a dictionary containing pairs :math { k1 k2 : c_kn} where :math c_kn are binomial coefficients and :math n=k1+k2
ntheory		binomial_coefficients_list	n	return a list of binomial coefficients as rows of the pascal's triangle
ntheory		multinomial_coefficients0	m n _tuple _zip	return a dictionary containing pairs {(k1 k2 ,km) : c_kn}
ntheory		multinomial_coefficients	m n	return a dictionary containing pairs {(k1 k2 ,km) : c_kn}
ntheory		multinomial_coefficients_iterator	m n _tuple	multinomial coefficient iterator this routine has been optimized for m large with respect to n by taking
utilities		threaded_factory	func use_add	a factory for threaded decorators
utilities		threaded	func	apply func to sub--elements of an object including :class add
utilities		xthreaded	func	apply func to sub--elements of an object excluding :class add
utilities		conserve_mpmath_dps	func	after the function finishes resets the value of mpmath mp dps to
utilities		doctest_depends_on	exe modules disable_viewers	adds metadata about the depenencies which need to be met for doctesting the docstrings of the decorated objects
utilities		public	obj	append obj's name to global __all__ variable call site
utilities		memoize_property	storage	create a property where the lookup is stored in storage
utilities		pollute	names objects	pollute the global namespace with symbols -> objects mapping
utilities		source	object	prints the source code of a given object
utilities		get_class	lookup_view	convert a string version of a class name to the object
utilities		get_mod_func	callback	splits the string path to a class into a string path to the module and the name of the class
utilities		recurrence_memo	initial	memo decorator for sequences defined by recurrence see usage examples e
utilities		assoc_recurrence_memo	base_seq	memo decorator for associated sequences defined by recurrence starting from base
utilities		_indent	s indent	add the given number of space characters to the beginning of every non-blank line in s, and return the result
utilities		_report_failure	out test example got	report that the given example failed
utilities		convert_to_native_paths	lst	converts a list of '/' separated paths into a list of native (os
utilities		get_sympy_dir		returns the root sympy directory and set the global value indicating whether the system is case sensitive or not
utilities		run_in_subprocess_with_hash_randomization	function function_args function_kwargs command	run a function in a python subprocess with hash randomization enabled
utilities		run_all_tests	test_args test_kwargs doctest_args doctest_kwargs	run all tests
utilities		test		run tests in the specified test_* py files
utilities		_test		internal function that actually runs the tests
utilities		doctest		runs doctests in all \* py files in the sympy directory which match
utilities		_doctest		internal function that actually runs the doctests
utilities		split_list	l split	splits a list into part a of b split should be a string of the form 'a/b'
utilities		sympytestfile	filename module_relative name package	test examples in the given file return (#failures #tests)
utilities	SymPyTests	test	sort timeout slow enhance_asserts	runs the tests returning true if all tests pass otherwise false
utilities	SymPyTests	matches	x	does the keyword expression self _kw match "x"? returns true/false
utilities	SymPyTests	get_test_files	dir pat	returns the list of test_* py default files at or below directory
utilities	SymPyDocTests	test		runs the tests and returns true if all tests pass otherwise false
utilities	SymPyDocTests	get_test_files	dir pat init_only	returns the list of \* py files default from which docstrings
utilities	SymPyDocTests	_process_dependencies	deps	returns false if some dependencies are not met and the test should be skipped otherwise returns true
utilities	SymPyDocTestFinder	_find	tests obj name module	find tests for the given object and any contained objects and add them to tests
utilities	SymPyDocTestFinder	_get_test	obj name module globs	return a doctest for the given object if it defines a docstring otherwise return none
utilities	SymPyDocTestRunner	run	test compileflags out clear_globs	run the examples in test, and display the results using the writer function out
utilities	SymPyOutputChecker	check_output	want got optionflags	return true iff the actual output from an example (got) matches the expected output (want)
utilities	PyTestReporter	write	text color align width	prints a text on the screen
utilities	CodeWrapper	__init__	generator filepath flags verbose	generator -- the code generator to use
utilities	CythonCodeWrapper	dump_pyx	routines f prefix	write a cython file with python wrappers this file contains all the definitions of the routines in c code and
utilities	CythonCodeWrapper	_partition_args	args	group function arguments into categories
utilities		_infer_language	backend	for a given backend return the top choice of language
utilities		_validate_backend_language	backend language	throws error if backend and language are incompatible
utilities		autowrap	expr language backend tempdir	generates python callable binaries based on the math expression
utilities		binary_function	symfunc expr	returns a sympy function with expr as binary implementation this is a convenience function that automates the steps needed to
utilities	UfuncifyCodeWrapper	dump_c	routines f prefix funcname	write a c file with python wrappers this file contains all the definitions of the routines in c code
utilities	UfuncifyCodeWrapper	_partition_args	args	group function arguments into categories
utilities		ufuncify	args expr language backend	generates a binary function that supports broadcasting on numpy arrays
utilities		filldedent	s w	strips leading and trailing empty lines from a copy of s, then dedents fills and returns it
utilities		rawlines	s	return a cut-and-pastable string that when printed is equivalent to the input
utilities		debug_decorator	func	if sympy_debug is true it will print a nice execution tree with arguments and results of all decorated functions else do nothing
utilities		debug		print *args if sympy_debug is true else do nothing
utilities		find_executable	executable path	try to find 'executable' in the directories listed in 'path' (a string listing directories separated by 'os
utilities		func_name	x	return function name of x if defined else the type x
utilities		_replace	reps	return a function that can make the replacements given in reps, on a string
utilities		replace	string	return string with all keys in reps replaced with their corresponding values longer strings first irrespective
utilities		translate	s a b c	return s where characters have been replaced or deleted
utilities		timed	func setup limit	adaptively measure execution time of a function
utilities		random_complex_number	a b c d	return a random complex number
utilities		verify_numerically	f g z tol	test numerically that f and g agree when evaluated in the argument z
utilities		test_derivative_numerically	f z tol a	test numerically that the symbolically computed derivative of f with respect to z is correct
utilities		_randrange	seed	return a randrange generator seed can be
utilities		_randint	seed	return a randint generator seed can be
utilities	Routine	__init__	name arguments results local_vars	initialize a routine instance
utilities	Routine	variables		returns a set of all variables possibly used in the routine
utilities	Routine	result_variables		returns a list of outputargument inoutargument and result
utilities		get_default_datatype	expr	derives an appropriate datatype based on the expression
utilities	Variable	__init__	name datatype dimensions precision	return a new variable
utilities	Variable	get_datatype	language	returns the datatype string for the requested language
utilities	OutputArgument	__init__	name result_var expr datatype	return a new variable
utilities	Result	__init__	expr name result_var datatype	initialize a return value
utilities	CodeGen	__init__	project	initialize a code generator
utilities	CodeGen	routine	name expr argument_sequence global_vars	creates an routine object that is appropriate for this language
utilities	CodeGen	write	routines prefix to_files header	writes all the source code files for the given routines
utilities	CodeGen	dump_code	routines f prefix header	write the code by calling language specific methods
utilities	CCodeGen	_get_header		writes a common header for the generated files
utilities	CCodeGen	get_prototype	routine	returns a string for the function prototype of the routine
utilities	CCodeGen	dump_h	routines f prefix header	writes the c header file
utilities	FCodeGen	_get_symbol	s	returns the symbol as fcode prints it
utilities	FCodeGen	_get_header		writes a common header for the generated files
utilities	FCodeGen	_get_routine_opening	routine	returns the opening statements of the fortran routine
utilities	FCodeGen	_get_routine_ending	routine	returns the closing statements of the fortran routine
utilities	FCodeGen	get_interface	routine	returns a string for the function interface
utilities	FCodeGen	dump_h	routines f prefix header	writes the interface to a header file
utilities	JuliaCodeGen	routine	name expr argument_sequence global_vars	specialized routine creation for julia
utilities	JuliaCodeGen	_get_symbol	s	print the symbol appropriately
utilities	JuliaCodeGen	_get_header		writes a common header for the generated files
utilities	JuliaCodeGen	_get_routine_opening	routine	returns the opening statements of the routine
utilities	OctaveCodeGen	routine	name expr argument_sequence global_vars	specialized routine creation for octave
utilities	OctaveCodeGen	_get_symbol	s	print the symbol appropriately
utilities	OctaveCodeGen	_get_header		writes a common header for the generated files
utilities	OctaveCodeGen	_get_routine_opening	routine	returns the opening statements of the routine
utilities	RustCodeGen	routine	name expr argument_sequence global_vars	specialized routine creation for rust
utilities	RustCodeGen	_get_header		writes a common header for the generated files
utilities	RustCodeGen	get_prototype	routine	returns a string for the function prototype of the routine
utilities		codegen	name_expr language prefix project	generate source code for expressions in a given language
utilities		make_routine	name expr argument_sequence global_vars	a factory that makes an appropriate routine from an expression
utilities		flatten	iterable levels cls	recursively denest iterable containers
utilities		unflatten	iter n	group iter into tuples of length n raise an error if
utilities		reshape	seq how	reshape the sequence according to the template in how
utilities		group	seq multiple	splits a sequence into a list of lists of equal adjacent elements
utilities		multiset	seq	return the hashable sequence in multiset form with values being the multiplicity of the item in the sequence
utilities		postorder_traversal	node keys	do a postorder traversal of a tree
utilities		interactive_traversal	expr	traverse a tree asking a user which branch to choose
utilities		ibin	n bits str	return a list of length bits corresponding to the binary value of n with small bits to the right last
utilities		variations	seq n repetition	returns a generator of the n-sized variations of seq size n
utilities		subsets	seq k repetition	generates all k-subsets combinations from an n-element set seq
utilities		filter_symbols	iterator exclude	only yield elements from iterator that do not occur in exclude
utilities		numbered_symbols	prefix cls start exclude	generate an infinite stream of symbols consisting of a prefix and increasing subscripts provided that they do not occur in exclude
utilities		capture	func	return the printed output of func()
utilities		sift	seq keyfunc	sift the sequence seq into a dictionary according to keyfunc
utilities		take	iter n	return n items from iter iterator
utilities		dict_merge		merge dictionaries into a single dictionary
utilities		common_prefix		return the subsequence that is a common start of sequences in seqs
utilities		common_suffix		return the subsequence that is a common ending of sequences in seqs
utilities		prefixes	seq	generate all prefixes of a sequence
utilities		postfixes	seq	generate all postfixes of a sequence
utilities		topological_sort	graph key	topological sort of graph's vertices
utilities		rotate_left	x y	left rotates a list x by the number of steps specified in y
utilities		rotate_right	x y	right rotates a list x by the number of steps specified in y
utilities		multiset_combinations	m n g	return the unique combinations of size n from multiset m
utilities		multiset_permutations	m size g	return the unique permutations of multiset m
utilities		_partition	seq vector m	return the partion of seq as specified by the partition vector
utilities		_set_partitions	n	cycle through all partions of n elements yielding the current number of partitions m, and a mutable list q
utilities		multiset_partitions	multiset m	return unique partitions of the given multiset in list form
utilities		partitions	n m k size	generate all partitions of positive integer n
utilities		ordered_partitions	n m sort	generates ordered partitions of integer n
utilities		binary_partitions	n	generates the binary partition of n
utilities		has_dups	seq	return true if there are any duplicate elements in seq
utilities		has_variety	seq	return true if there are any different elements in seq
utilities		uniq	seq result	yield unique elements from seq as an iterator the second
utilities		generate_bell	n	return permutations of [0 1 n - 1] such that each permutation
utilities		generate_derangements	perm	routine to generate unique derangements
utilities		necklaces	n k free	a routine to generate necklaces that may (free=true) or may not (free=false) be turned over to be viewed
utilities		bracelets	n k	wrapper to necklaces to return a free unrestricted necklace
utilities		generate_oriented_forest	n	this algorithm generates oriented forests
utilities		minlex	seq directed is_set small	return a tuple where the smallest element appears first if directed is true default then the order is preserved otherwise
utilities		runs	seq op	group the sequence into lists in which successive elements all compare the same with the comparison operator op:
utilities		kbins	l k ordered	return sequence l partitioned into k bins
utilities		permute_signs	t	return iterator in which the signs of non-zero elements of t are permuted
utilities		signed_permutations	t	return iterator in which the signs of non-zero elements of t and the order of the elements are permuted
utilities		_import	module reload	creates a global translation dictionary for module
utilities		lambdify	args expr modules printer	returns a lambda function for fast calculation of numerical values
utilities		_get_namespace	m	this is used by _lambdify to parse its arguments
utilities		lambdastr	args expr printer dummify	returns a string that can be evaluated to a lambda function
utilities		_imp_namespace	expr namespace	return namespace dict with function implementations we need to search for functions in anything that can be thrown at
utilities		implemented_function	symfunc implementation	add numerical implementation to function symfunc
utilities		get_resource	identifier pkgname	acquire a readable object for a given package name and identifier
utilities	PartComponent	__repr__		for debug/algorithm animation purposes
utilities	PartComponent	__eq__	other	define value oriented equality which is useful for testers
utilities	PartComponent	__ne__	other	defined for consistency with __eq__
utilities		multiset_partitions_taocp	multiplicities	enumerates partitions of a multiset
utilities		factoring_visitor	state primes	use with multiset_partitions_taocp to enumerate the ways a number can be expressed as a product of factors
utilities		list_visitor	state components	return a list of lists to represent the partition
utilities	MultisetPartitionTraverser	db_trace	msg	useful for usderstanding/debugging the algorithms not
utilities	MultisetPartitionTraverser	_initialize_enumeration	multiplicities	allocates and initializes the partition stack
utilities	MultisetPartitionTraverser	decrement_part	part	decrements part a subrange of pstack if possible returning true iff the part was successfully decremented
utilities	MultisetPartitionTraverser	decrement_part_small	part ub	decrements part a subrange of pstack if possible returning true iff the part was successfully decremented
utilities	MultisetPartitionTraverser	decrement_part_large	part amt lb	decrements part while respecting size constraint
utilities	MultisetPartitionTraverser	decrement_part_range	part lb ub	decrements part a subrange of pstack if possible returning true iff the part was successfully decremented
utilities	MultisetPartitionTraverser	spread_part_multiplicity		returns true if a new part has been created and adjusts pstack f and lpart as needed
utilities	MultisetPartitionTraverser	top_part		return current top part on the stack as a slice of pstack
utilities	MultisetPartitionTraverser	enum_all	multiplicities	enumerate the partitions of a multiset
utilities	MultisetPartitionTraverser	enum_small	multiplicities ub	enumerate multiset partitions with no more than ub parts
utilities	MultisetPartitionTraverser	enum_large	multiplicities lb	enumerate the partitions of a multiset with lb < num parts equivalent to enum_range(multiplicities lb sum multiplicities
utilities	MultisetPartitionTraverser	enum_range	multiplicities lb ub	enumerate the partitions of a multiset with lb < num parts <= ub
utilities	MultisetPartitionTraverser	count_partitions_slow	multiplicities	returns the number of partitions of a multiset whose elements have the multiplicities given in multiplicities
utilities	MultisetPartitionTraverser	count_partitions	multiplicities	returns the number of partitions of a multiset whose components have the multiplicities given in multiplicities
utilities		part_key	part	helper for multisetpartitiontraverser count_partitions that
utilities.mathml		apply_xsl	mml xsl	apply a xsl to a mathml string @param mml a string with mathml code
utilities.mathml		c2p	mml simple	transforms a document in mathml content like the one that sympy produces in one document in mathml presentation more suitable for printing and more
unify		unify	x y s	unify two expressions inputs
unify		occur_check	var x	var occurs in subtree owned by x?
unify		assoc	d key val	return copy of d with key associated to val
unify		is_args	x	is x a traditional iterable?
unify		allcombinations	A B ordered	restructure a and b to have the same number of elements ordered must be either 'commutative' or 'associative'
unify		partition	it part	partition a tuple/list into pieces defined by indices >>> from sympy
unify		index	it ind	fancy indexing into an indexable iterable tuple list >>> from sympy
unify		rewriterule	source target variables condition	rewrite rule transform expressions that match source into expressions that match target
unify		deconstruct	s variables	turn a sympy object into a compound
unify		construct	t	turn a compound into a sympy object
unify		rebuild	s	rebuild a sympy expression
unify		unify	x y s variables	structural unification of two expressions/patterns examples
calculus		continuous_domain	f symbol domain	returns the intervals in the given domain for which the function is continuous
calculus		function_range	f symbol domain	finds the range of a function in a given domain
calculus		not_empty_in	finset_intersection	finds the domain of the functions in finite_set in which the finite_set is not-empty
calculus		periodicity	f symbol check	tests the given function for periodicity in the given symbol
calculus		_periodicity	args symbol	helper for periodicity to find the period of a list of simpler functions
calculus		lcim	numbers	returns the least common integral multiple of a list of numbers
calculus	AccumulationBounds	min		returns the minimum possible value attained by accumulationbounds object
calculus	AccumulationBounds	max		returns the maximum possible value attained by accumulationbounds object
calculus	AccumulationBounds	delta		returns the difference of maximum possible value attained by accumulationbounds object and minimum possible value attained by accumulationbounds object
calculus	AccumulationBounds	mid		returns the mean of maximum possible value attained by accumulationbounds object and minimum possible value attained by accumulationbounds object
calculus	AccumulationBounds	__lt__	other	returns true if range of values attained by self accumulationbounds object is less than the range of values attained by other, where other
calculus	AccumulationBounds	__le__	other	returns true if range of values attained by self accumulationbounds object is less than or equal to the range of values attained by other,
calculus	AccumulationBounds	__gt__	other	returns true if range of values attained by self accumulationbounds object is greater than the range of values attained by other, where other
calculus	AccumulationBounds	__ge__	other	returns true if range of values attained by self accumulationbounds object is less that the range of values attained by other, where other
calculus	AccumulationBounds	__contains__	other	returns true if other is contained in self where other belongs to extended real numbers false if not contained
calculus	AccumulationBounds	intersection	other	returns the intersection of 'self' and 'other'
calculus		finite_diff_weights	order x_list x0	calculates the finite difference weights for an arbitrarily spaced one-dimensional grid (x_list) for derivatives at x0 of order
calculus		apply_finite_diff	order x_list y_list x0	calculates the finite difference approximation of the derivative of requested order at x0 from points
calculus		_as_finite_diff	derivative points x0 wrt	returns an approximation of a derivative of a function in the form of a finite difference formula
calculus		differentiate_finite	expr	differentiate expr and replace derivatives with finite differences
calculus		euler_equations	L funcs vars	find the euler-lagrange equations [1]_ for a given lagrangian
calculus		singularities	expression symbol	find singularities of a given function
calculus		monotonicity_helper	expression predicate interval symbol	helper function for functions checking function monotonicity
calculus		is_increasing	expression interval symbol	return whether the function is increasing in the given interval
calculus		is_strictly_increasing	expression interval symbol	return whether the function is strictly increasing in the given interval
calculus		is_decreasing	expression interval symbol	return whether the function is decreasing in the given interval
calculus		is_strictly_decreasing	expression interval symbol	return whether the function is strictly decreasing in the given interval
calculus		is_monotonic	expression interval symbol	return whether the function is monotonic in the given interval
categories	Morphism	domain		returns the domain of the morphism
categories	Morphism	codomain		returns the codomain of the morphism
categories	Morphism	compose	other	composes self with the supplied morphism
categories	Morphism	__mul__	other	composes self with the supplied morphism
categories	NamedMorphism	name		returns the name of the morphism
categories	CompositeMorphism	_add_morphism	t morphism	intelligently adds morphism to tuple t
categories	CompositeMorphism	components		returns the components of this composite morphism
categories	CompositeMorphism	domain		returns the domain of this composite morphism
categories	CompositeMorphism	codomain		returns the codomain of this composite morphism
categories	CompositeMorphism	flatten	new_name	forgets the composite structure of this morphism
categories	Category	name		returns the name of this category
categories	Category	objects		returns the class of objects of this category
categories	Category	commutative_diagrams		returns the :class finiteset of diagrams which are known to be commutative in this category
categories	Diagram	_set_dict_union	dictionary key value	if key is in dictionary, set the new value of key to be the union between the old value and value
categories	Diagram	_add_morphism_closure	morphisms morphism props add_identities	adds a morphism and its attributes to the supplied dictionary morphisms
categories	Diagram	__new__	cls	construct a new instance of diagram
categories	Diagram	premises		returns the premises of this diagram
categories	Diagram	conclusions		returns the conclusions of this diagram
categories	Diagram	objects		returns the :class finiteset of objects that appear in this diagram
categories	Diagram	hom	A B	returns a 2-tuple of sets of morphisms between objects a and b one set of morphisms listed as premises and the other set
categories	Diagram	is_subdiagram	diagram	checks whether diagram is a subdiagram of self
categories	Diagram	subdiagram_from_objects	objects	if objects is a subset of the objects of self, returns a diagram which has as premises all those premises of self
categories	_GrowableGrid	__getitem__	i_j	returns the element located at in the i-th line and j-th column
categories	_GrowableGrid	__setitem__	i_j newvalue	sets the element located at in the i-th line and j-th column
categories	_GrowableGrid	append_row		appends an empty row to the grid
categories	_GrowableGrid	append_column		appends an empty column to the grid
categories	_GrowableGrid	prepend_row		prepends the grid with an empty row
categories	_GrowableGrid	prepend_column		prepends the grid with an empty column
categories	DiagramGrid	_simplify_morphisms	morphisms	given a dictionary mapping morphisms to their properties returns a new dictionary in which there are no morphisms which
categories	DiagramGrid	_merge_premises_conclusions	premises conclusions	given two dictionaries of morphisms and their properties produces a single dictionary which includes elements from both
categories	DiagramGrid	_juxtapose_edges	edge1 edge2	if edge1 and edge2 have precisely one common endpoint returns an edge which would form a triangle with edge1 and
categories	DiagramGrid	_add_edge_append	dictionary edge elem	if edge is not in dictionary, adds edge to the dictionary and sets its value to [elem]
categories	DiagramGrid	_build_skeleton	morphisms	creates a dictionary which maps edges to corresponding morphisms
categories	DiagramGrid	_list_triangles	edges	builds the set of triangles formed by the supplied edges the
categories	DiagramGrid	_drop_redundant_triangles	triangles skeleton	returns a list which contains only those triangles who have morphisms associated with at least two edges
categories	DiagramGrid	_morphism_length	morphism	returns the length of a morphism the length of a morphism is
categories	DiagramGrid	_compute_triangle_min_sizes	triangles edges	returns a dictionary mapping triangles to their minimal sizes
categories	DiagramGrid	_triangle_objects	triangle	given a triangle returns the objects included in it
categories	DiagramGrid	_other_vertex	triangle edge	given a triangle and an edge of it returns the vertex which opposes the edge
categories	DiagramGrid	_empty_point	pt grid	checks if the cell at coordinates pt is either empty or out of the bounds of the grid
categories	DiagramGrid	_put_object	coords obj grid fringe	places an object at the coordinate cords in grid, growing the grid and updating fringe, if necessary
categories	DiagramGrid	_choose_target_cell	pt1 pt2 edge obj	given two points pt1 and pt2, and the welding edge edge, chooses one of the two points to place the opposing
categories	DiagramGrid	_find_triangle_to_weld	triangles fringe grid	finds if possible a triangle and an edge in the fringe to which the triangle could be attached
categories	DiagramGrid	_weld_triangle	tri welding_edge fringe grid	if possible welds the triangle tri to fringe and returns false
categories	DiagramGrid	_triangle_key	tri triangle_sizes	returns a key for the supplied triangle it should be the
categories	DiagramGrid	_pick_root_edge	tri skeleton	for a given triangle always picks the same root edge the
categories	DiagramGrid	_drop_irrelevant_triangles	triangles placed_objects	returns only those triangles whose set of objects is not completely included in placed_objects
categories	DiagramGrid	_grow_pseudopod	triangles fringe grid skeleton	starting from an object in the existing structure on the grid adds an edge to which a triangle from triangles could be
categories	DiagramGrid	_handle_groups	diagram groups merged_morphisms hints	given the slightly preprocessed morphisms of the diagram produces a grid laid out according to groups
categories	DiagramGrid	_generic_layout	diagram merged_morphisms	produces the generic layout for the supplied diagram
categories	DiagramGrid	_get_undirected_graph	objects merged_morphisms	given the objects and the relevant morphisms of a diagram returns the adjacency lists of the underlying undirected
categories	DiagramGrid	_sequential_layout	diagram merged_morphisms	lays out the diagram in "sequential" layout this method
categories	DiagramGrid	_drop_inessential_morphisms	merged_morphisms	removes those morphisms which should appear in the diagram but which have no relevance to object layout
categories	DiagramGrid	_get_connected_components	objects merged_morphisms	given a container of morphisms returns a list of connected components formed by these morphisms
categories	DiagramGrid	width		returns the number of columns in this diagram layout
categories	DiagramGrid	height		returns the number of rows in this diagram layout
categories	DiagramGrid	__getitem__	i_j	returns the object placed in the row i and column j
categories	DiagramGrid	morphisms		returns those morphisms and their properties which are sufficiently meaningful to be drawn
categories	DiagramGrid	__str__		produces a string representation of this class
categories	XypicDiagramDrawer	_process_loop_morphism	i j grid morphisms_str_info	produces the information required for constructing the string representation of a loop morphism
categories	XypicDiagramDrawer	_process_horizontal_morphism	i j target_j grid	produces the information required for constructing the string representation of a horizontal morphism
categories	XypicDiagramDrawer	_process_vertical_morphism	i j target_i grid	produces the information required for constructing the string representation of a vertical morphism
categories	XypicDiagramDrawer	_process_morphism	diagram grid morphism object_coords	given the required information produces the string representation of morphism
categories	XypicDiagramDrawer	_check_free_space_horizontal	dom_i dom_j cod_j grid	for a horizontal morphism checks whether there is free space (i
categories	XypicDiagramDrawer	_check_free_space_vertical	dom_i cod_i dom_j grid	for a vertical morphism checks whether there is free space (i
categories	XypicDiagramDrawer	_check_free_space_diagonal	dom_i cod_i dom_j cod_j	for a diagonal morphism checks whether there is free space (i
categories	XypicDiagramDrawer	_push_labels_out	morphisms_str_info grid object_coords	for all straight morphisms which form the visual boundary of the laid out diagram puts their labels on their outer sides
categories	XypicDiagramDrawer	_morphism_sort_key	morphism object_coords	provides a morphism sorting key such that horizontal or vertical morphisms between neighbouring objects come
categories	XypicDiagramDrawer	_build_xypic_string	diagram grid morphisms morphisms_str_info	given a collection of :class arrowstringdescription describing the morphisms of a diagram and the object layout
categories	XypicDiagramDrawer	draw	diagram grid masked diagram_format	returns the xy-pic representation of diagram laid out in grid
categories		xypic_draw_diagram	diagram masked diagram_format groups	provides a shortcut combining :class diagramgrid and :class xypicdiagramdrawer
categories		preview_diagram	diagram masked diagram_format groups	combines the functionality of xypic_draw_diagram and sympy
vector	Del	gradient	scalar_field doit	returns the gradient of the given scalar field as a vector instance
vector	Del	dot	vect doit	represents the dot product between this operator and a given vector - equal to the divergence of the vector field
vector	Del	cross	vect doit	represents the cross product between this operator and a given vector - equal to the curl of the vector field
vector		_diff_conditional	expr base_scalar	first re-expresses expr in the system that base_scalar belongs to
vector		express	expr system system2 variables	global function for 'express' functionality
vector		curl	vect coord_sys	returns the curl of a vector field computed wrt the base scalars of the given coordinate system
vector		divergence	vect coord_sys	returns the divergence of a vector field computed wrt the base scalars of the given coordinate system
vector		gradient	scalar coord_sys	returns the vector gradient of a scalar field computed wrt the base scalars of the given coordinate system
vector		directional_derivative	scalar vect	returns the directional derivative of a scalar field computed along a given vector in given coordinate system
vector		is_conservative	field	checks if a field is conservative
vector		is_solenoidal	field	checks if a field is solenoidal
vector		scalar_potential	field coord_sys	returns the scalar potential function of a field in a given coordinate system without the added integration constant
vector		scalar_potential_difference	field coord_sys point1 point2	returns the scalar potential difference between two points in a certain coordinate system wrt a given field
vector		matrix_to_vector	matrix system	converts a vector in matrix form to a vector instance
vector		_path	from_object to_object	calculates the 'path' of objects starting from 'from_object' to 'to_object', along with the index of the first common
vector		orthogonalize		takes a sequence of independent vectors and orthogonalizes them using the gram - schmidt process
vector	CoordSysCartesian	__new__	cls name location rotation_matrix	the orientation/location parameters are necessary if this system is being defined at a certain orientation or location wrt another
vector	CoordSysCartesian	rotation_matrix	other	returns the direction cosine matrix dcm also known as the 'rotation matrix' of this coordinate system with respect to
vector	CoordSysCartesian	position_wrt	other	returns the position vector of the origin of this coordinate system with respect to another point/coordsyscartesian
vector	CoordSysCartesian	scalar_map	other	returns a dictionary which expresses the coordinate variables base scalars of this frame in terms of the variables of
vector	CoordSysCartesian	locate_new	name position vector_names variable_names	returns a coordsyscartesian with its origin located at the given position wrt this coordinate system's origin
vector	CoordSysCartesian	orient_new	name orienters location vector_names	creates a new coordsyscartesian oriented in the user-specified way with respect to this system
vector	CoordSysCartesian	orient_new_axis	name angle axis location	axis rotation is a rotation about an arbitrary axis by some angle
vector	CoordSysCartesian	orient_new_body	name angle1 angle2 angle3	body orientation takes this coordinate system through three successive simple rotations
vector	CoordSysCartesian	orient_new_space	name angle1 angle2 angle3	space rotation is similar to body rotation but the rotations are applied in the opposite order
vector	CoordSysCartesian	orient_new_quaternion	name q0 q1 q2	quaternion orientation orients the new coordsyscartesian with quaternions defined as a finite rotation about lambda a unit
vector	Orienter	rotation_matrix		the rotation matrix corresponding to this orienter instance
vector	AxisOrienter	__init__	angle axis	axis rotation is a rotation about an arbitrary axis by some angle
vector	AxisOrienter	rotation_matrix	system	the rotation matrix corresponding to this orienter instance
vector	BodyOrienter	__init__	angle1 angle2 angle3 rot_order	body orientation takes this coordinate system through three successive simple rotations
vector	SpaceOrienter	__init__	angle1 angle2 angle3 rot_order	space rotation is similar to body rotation but the rotations are applied in the opposite order
vector	QuaternionOrienter	__init__	angle1 angle2 angle3 rot_order	quaternion orientation orients the new coordsyscartesian with quaternions defined as a finite rotation about lambda a unit
vector		_rot	axis angle	dcm for simple axis 1 2 or 3 rotations
vector	Vector	components		returns the components of this vector in the form of a python dictionary mapping basevector instances to the
vector	Vector	magnitude		returns the magnitude of this vector
vector	Vector	normalize		returns the normalized version of this vector
vector	Vector	dot	other	returns the dot product of this vector either with another vector or a dyadic or a del operator
vector	Vector	cross	other	returns the cross product of this vector with another vector or dyadic instance
vector	Vector	outer	other	returns the outer product of this vector with another in the form of a dyadic instance
vector	Vector	projection	other scalar	returns the vector or scalar projection of the 'other' on 'self'
vector	Vector	to_matrix	system	returns the matrix form of this vector with respect to the specified coordinate system
vector	Vector	separate		the constituents of this vector in different coordinate systems as per its definition
vector	VectorMul	base_vector		the basevector involved in the product
vector	VectorMul	measure_number		the scalar expression involved in the defition of this vectormul
vector		_vect_div	one other	helper for division involving vectors
vector	Point	position_wrt	other	returns the position vector of this point with respect to another point/coordsyscartesian
vector	Point	locate_new	name position	returns a new point located at the given position wrt this point
vector	Point	express_coordinates	coordinate_system	returns the cartesian/rectangular coordinates of this point wrt the origin of the given coordsyscartesian instance
vector	Dyadic	components		returns the components of this dyadic in the form of a python dictionary mapping basedyadic instances to the
vector	Dyadic	dot	other	returns the dot product also called inner product of this dyadic with another dyadic or vector
vector	Dyadic	cross	other	returns the cross product between this dyadic and a vector as a vector instance
vector	Dyadic	to_matrix	system second_system	returns the matrix form of the dyadic with respect to one or two coordinate systems
vector	DyadicMul	base_dyadic		the basedyadic involved in the product
vector	DyadicMul	measure_number		the scalar expression involved in the definition of this dyadicmul
vector		_dyad_div	one other	helper for division involving dyadics
vector	BasisDependent	evalf	prec	implements the sympy evalf routine for this quantity
vector	BasisDependent	simplify	ratio measure	implements the sympy simplify routine for this quantity
vector	BasisDependent	trigsimp		implements the sympy trigsimp routine for this quantity
vector	BasisDependent	as_numer_denom		returns the expression as a tuple wrt the following
vector	BasisDependent	factor		implements the sympy factor routine on the scalar parts of a basis-dependent expression
vector	BasisDependent	as_coeff_Mul	rational	efficiently extract the coefficient of a product
vector	BasisDependent	as_coeff_add		efficiently extract the coefficient of a summation
vector	BasisDependent	diff		implements the sympy diff routine for vectors
vector	BasisDependent	doit		calls doit() on each term in the dyadic
vector	BasisDependentZero	normalize		returns the normalized version of this vector
polys		itermonomials	variables degree	generate a set of monomials of the given total degree or less
polys		monomial_count	V N	computes the number of monomials
polys		monomial_mul	A B	multiplication of tuples representing monomials
polys		monomial_div	A B	division of tuples representing monomials
polys		monomial_ldiv	A B	division of tuples representing monomials
polys		monomial_pow	A n	return the n-th pow of the monomial
polys		monomial_gcd	A B	greatest common divisor of tuples representing monomials
polys		monomial_lcm	A B	least common multiple of tuples representing monomials
polys		monomial_divides	A B	does there exist a monomial x such that xa == b? >>> from sympy
polys		monomial_max		returns maximal degree for each variable in a set of monomials
polys		monomial_min		returns minimal degree for each variable in a set of monomials
polys		monomial_deg	M	returns the total degree of a monomial
polys		term_div	a b domain	division of two terms in over a ring/field
polys	Monomial	as_expr		convert a monomial instance to a sympy expression
polys	Monomial	gcd	other	greatest common divisor of monomials
polys	Monomial	lcm	other	least common multiple of monomials
polys		dup_sqf_p	f K	return true if f is a square-free polynomial in k[x]
polys		dmp_sqf_p	f u K	return true if f is a square-free polynomial in k[x]
polys		dup_sqf_norm	f K	square-free norm of f in k[x], useful over algebraic domains
polys		dmp_sqf_norm	f u K	square-free norm of f in k[x], useful over algebraic domains
polys		dup_gf_sqf_part	f K	compute square-free part of f in gf p [x]
polys		dmp_gf_sqf_part	f K	compute square-free part of f in gf p [x]
polys		dup_sqf_part	f K	returns square-free part of a polynomial in k[x]
polys		dmp_sqf_part	f u K	returns square-free part of a polynomial in k[x]
polys		dup_gf_sqf_list	f K all	compute square-free decomposition of f in gf p [x]
polys		dmp_gf_sqf_list	f u K all	compute square-free decomposition of f in gf p [x]
polys		dup_sqf_list	f K all	return square-free decomposition of a polynomial in k[x]
polys		dup_sqf_list_include	f K all	return square-free decomposition of a polynomial in k[x]
polys		dmp_sqf_list	f u K all	return square-free decomposition of a polynomial in k[x]
polys		dmp_sqf_list_include	f u K all	return square-free decomposition of a polynomial in k[x]
polys		dup_gff_list	f K	compute greatest factorial factorization of f in k[x]
polys		dmp_gff_list	f u K	compute greatest factorial factorization of f in k[x]
polys		dup_integrate	f m K	computes the indefinite integral of f in k[x]
polys		dmp_integrate	f m u K	computes the indefinite integral of f in x_0 in k[x]
polys		_rec_integrate_in	g m v i	recursive helper for :func dmp_integrate_in
polys		dmp_integrate_in	f m j u	computes the indefinite integral of f in x_j in k[x]
polys		dup_diff	f m K	m-th order derivative of a polynomial in k[x]
polys		dmp_diff	f m u K	m-th order derivative in x_0 of a polynomial in k[x]
polys		_rec_diff_in	g m v i	recursive helper for :func dmp_diff_in
polys		dmp_diff_in	f m j u	m-th order derivative in x_j of a polynomial in k[x]
polys		dup_eval	f a K	evaluate a polynomial at x = a in k[x] using horner scheme
polys		dmp_eval	f a u K	evaluate a polynomial at x_0 = a in k[x] using the horner scheme
polys		_rec_eval_in	g a v i	recursive helper for :func dmp_eval_in
polys		dmp_eval_in	f a j u	evaluate a polynomial at x_j = a in k[x] using the horner scheme
polys		_rec_eval_tail	g i A u	recursive helper for :func dmp_eval_tail
polys		dmp_eval_tail	f A u K	evaluate a polynomial at x_j = a_j in k[x]
polys		_rec_diff_eval	g m a v	recursive helper for :func dmp_diff_eval
polys		dmp_diff_eval_in	f m a j	differentiate and evaluate a polynomial in x_j at a in k[x]
polys		dup_trunc	f p K	reduce a k[x] polynomial modulo a constant p in k
polys		dmp_trunc	f p u K	reduce a k[x] polynomial modulo a polynomial p in k[y]
polys		dmp_ground_trunc	f p u K	reduce a k[x] polynomial modulo a constant p in k
polys		dup_monic	f K	divide all coefficients by lc f in k[x]
polys		dmp_ground_monic	f u K	divide all coefficients by lc f in k[x]
polys		dup_content	f K	compute the gcd of coefficients of f in k[x]
polys		dmp_ground_content	f u K	compute the gcd of coefficients of f in k[x]
polys		dup_primitive	f K	compute content and the primitive form of f in k[x]
polys		dmp_ground_primitive	f u K	compute content and the primitive form of f in k[x]
polys		dup_extract	f g K	extract common content from a pair of polynomials in k[x]
polys		dmp_ground_extract	f g u K	extract common content from a pair of polynomials in k[x]
polys		dup_real_imag	f K	return bivariate polynomials f1 and f2, such that f = f1 + f2*i
polys		dup_mirror	f K	evaluate efficiently the composition f -x in k[x]
polys		dup_scale	f a K	evaluate efficiently composition f(a*x) in k[x]
polys		dup_shift	f a K	evaluate efficiently taylor shift f x + a in k[x]
polys		dup_transform	f p q K	evaluate functional transformation q**n * f(p/q) in k[x]
polys		dup_compose	f g K	evaluate functional composition f g in k[x]
polys		dmp_compose	f g u K	evaluate functional composition f g in k[x]
polys		_dup_right_decompose	f s K	helper function for :func _dup_decompose
polys		_dup_left_decompose	f h K	helper function for :func _dup_decompose
polys		_dup_decompose	f K	helper function for :func dup_decompose
polys		dup_decompose	f K	computes functional decomposition of f in k[x]
polys		dmp_lift	f u K	convert algebraic coefficients to integers in k[x]
polys		dup_sign_variations	f K	compute the number of sign variations of f in k[x]
polys		dup_clear_denoms	f K0 K1 convert	clear denominators i e transform k_0 to k_1
polys		_rec_clear_denoms	g v K0 K1	recursive helper for :func dmp_clear_denoms
polys		dmp_clear_denoms	f u K0 K1	clear denominators i e transform k_0 to k_1
polys		dup_revert	f n K	compute f** -1 mod x**n using newton iteration
polys		dmp_revert	f g u K	compute f** -1 mod x**n using newton iteration
polys		sylvester	f g x method	the input polynomials f g are in z[x] or in q[x]
polys		sign_seq	poly_seq x	given a sequence of polynomials poly_seq it returns the sequence of signs of the leading coefficients of
polys		bezout	p q x method	the input polynomials p q are in z[x] or in q[x] let
polys		backward_eye	n	returns the backward identity matrix of dimensions n x n
polys		process_bezout_output	poly_seq x	poly_seq is a polynomial remainder sequence computed either by subresultants_bezout or by modified_subresultants_bezout
polys		subresultants_bezout	p q x	the input polynomials p q are in z[x] or in q[x] it is assumed
polys		modified_subresultants_bezout	p q x	the input polynomials p q are in z[x] or in q[x] it is assumed
polys		sturm_pg	p q x method	p q are polynomials in z[x] or q[x] it is assumed
polys		sturm_q	p q x	p q are polynomials in z[x] or q[x] it is assumed
polys		sturm_amv	p q x method	p q are polynomials in z[x] or q[x] it is assumed
polys		euclid_pg	p q x	p q are polynomials in z[x] or q[x] it is assumed
polys		euclid_q	p q x	p q are polynomials in z[x] or q[x] it is assumed
polys		euclid_amv	f g x	f g are polynomials in z[x] or q[x] it is assumed
polys		modified_subresultants_pg	p q x	p q are polynomials in z[x] or q[x] it is assumed
polys		subresultants_pg	p q x	p q are polynomials in z[x] or q[x] it is assumed
polys		subresultants_amv_q	p q x	p q are polynomials in z[x] or q[x] it is assumed
polys		compute_sign	base expo	base != 0 and expo >= 0 are integers
polys		rem_z	p q x	intended mainly for p q polynomials in z[x] so that on dividing p by q the remainder will also be in z[x]
polys		quo_z	p q x	intended mainly for p q polynomials in z[x] so that on dividing p by q the quotient will also be in z[x]
polys		subresultants_amv	f g x	p q are polynomials in z[x] or q[x] it is assumed
polys		modified_subresultants_amv	p q x	p q are polynomials in z[x] or q[x] it is assumed
polys		correct_sign	deg_f deg_g s1 rdel	used in various subresultant prs algorithms
polys		subresultants_rem	p q x	p q are polynomials in z[x] or q[x] it is assumed
polys		pivot	M i j	m is a matrix and m[i j] specifies the pivot element
polys		rotate_r	L k	rotates right by k l is a row of a matrix or a list
polys		rotate_l	L k	rotates left by k l is a row of a matrix or a list
polys		row2poly	row deg x	converts the row of a matrix to a poly of degree deg and variable x
polys		create_ma	deg_f deg_g row1 row2	creates a small'' matrix m to be triangularized
polys		find_degree	M deg_f	finds the degree of the poly corresponding after triangularization to the _last_ row of the small'' matrix m created by create_ma()
polys		final_touches	s2 r deg_g	s2 is sylvester2 r is the row pointer in s2 deg_g is the degree of the poly last inserted in s2
polys		subresultants_vv	p q x method	p q are polynomials in z[x] intended or q[x] it is assumed
polys		subresultants_vv_2	p q x	p q are polynomials in z[x] intended or q[x] it is assumed
polys		dup_add_term	f c i K	add c*x**i to f in k[x]
polys		dmp_add_term	f c i u	add c(x_2 x_u)*x_0**i to f in k[x]
polys		dup_sub_term	f c i K	subtract c*x**i from f in k[x]
polys		dmp_sub_term	f c i u	subtract c(x_2 x_u)*x_0**i from f in k[x]
polys		dup_mul_term	f c i K	multiply f by c*x**i in k[x]
polys		dmp_mul_term	f c i u	multiply f by c(x_2 x_u)*x_0**i in k[x]
polys		dup_add_ground	f c K	add an element of the ground domain to f
polys		dmp_add_ground	f c u K	add an element of the ground domain to f
polys		dup_sub_ground	f c K	subtract an element of the ground domain from f
polys		dmp_sub_ground	f c u K	subtract an element of the ground domain from f
polys		dup_mul_ground	f c K	multiply f by a constant value in k[x]
polys		dmp_mul_ground	f c u K	multiply f by a constant value in k[x]
polys		dup_quo_ground	f c K	quotient by a constant in k[x]
polys		dmp_quo_ground	f c u K	quotient by a constant in k[x]
polys		dup_exquo_ground	f c K	exact quotient by a constant in k[x]
polys		dmp_exquo_ground	f c u K	exact quotient by a constant in k[x]
polys		dup_lshift	f n K	efficiently multiply f by x**n in k[x]
polys		dup_rshift	f n K	efficiently divide f by x**n in k[x]
polys		dup_abs	f K	make all coefficients positive in k[x]
polys		dmp_abs	f u K	make all coefficients positive in k[x]
polys		dup_neg	f K	negate a polynomial in k[x]
polys		dmp_neg	f u K	negate a polynomial in k[x]
polys		dup_add	f g K	add dense polynomials in k[x]
polys		dmp_add	f g u K	add dense polynomials in k[x]
polys		dup_sub	f g K	subtract dense polynomials in k[x]
polys		dmp_sub	f g u K	subtract dense polynomials in k[x]
polys		dup_add_mul	f g h K	returns f + g*h where f g h are in k[x]
polys		dmp_add_mul	f g h u	returns f + g*h where f g h are in k[x]
polys		dup_sub_mul	f g h K	returns f - g*h where f g h are in k[x]
polys		dmp_sub_mul	f g h u	returns f - g*h where f g h are in k[x]
polys		dup_mul	f g K	multiply dense polynomials in k[x]
polys		dmp_mul	f g u K	multiply dense polynomials in k[x]
polys		dup_sqr	f K	square dense polynomials in k[x]
polys		dmp_sqr	f u K	square dense polynomials in k[x]
polys		dup_pow	f n K	raise f to the n-th power in k[x]
polys		dmp_pow	f n u K	raise f to the n-th power in k[x]
polys		dup_pdiv	f g K	polynomial pseudo-division in k[x]
polys		dup_prem	f g K	polynomial pseudo-remainder in k[x]
polys		dup_pquo	f g K	polynomial exact pseudo-quotient in k[x]
polys		dup_pexquo	f g K	polynomial pseudo-quotient in k[x]
polys		dmp_pdiv	f g u K	polynomial pseudo-division in k[x]
polys		dmp_prem	f g u K	polynomial pseudo-remainder in k[x]
polys		dmp_pquo	f g u K	polynomial exact pseudo-quotient in k[x]
polys		dmp_pexquo	f g u K	polynomial pseudo-quotient in k[x]
polys		dup_rr_div	f g K	univariate division with remainder over a ring
polys		dmp_rr_div	f g u K	multivariate division with remainder over a ring
polys		dup_ff_div	f g K	polynomial division with remainder over a field
polys		dmp_ff_div	f g u K	polynomial division with remainder over a field
polys		dup_div	f g K	polynomial division with remainder in k[x]
polys		dup_rem	f g K	returns polynomial remainder in k[x]
polys		dup_quo	f g K	returns exact polynomial quotient in k[x]
polys		dup_exquo	f g K	returns polynomial quotient in k[x]
polys		dmp_div	f g u K	polynomial division with remainder in k[x]
polys		dmp_rem	f g u K	returns polynomial remainder in k[x]
polys		dmp_quo	f g u K	returns exact polynomial quotient in k[x]
polys		dmp_exquo	f g u K	returns polynomial quotient in k[x]
polys		dup_max_norm	f K	returns maximum norm of a polynomial in k[x]
polys		dmp_max_norm	f u K	returns maximum norm of a polynomial in k[x]
polys		dup_l1_norm	f K	returns l1 norm of a polynomial in k[x]
polys		dmp_l1_norm	f u K	returns l1 norm of a polynomial in k[x]
polys		dup_expand	polys K	multiply together several polynomials in k[x]
polys		dmp_expand	polys u K	multiply together several polynomials in k[x]
polys		_trivial_gcd	f g	compute the gcd of two polynomials in trivial cases i e when one
polys		_gf_gcd	fp gp p	compute the gcd of two univariate polynomials in \mathbb{z}_p[x]
polys		_degree_bound_univariate	f g	compute an upper bound for the degree of the gcd of two univariate integer polynomials f and g
polys		_chinese_remainder_reconstruction_univariate	hp hq p q	construct a polynomial h_{pq} in \mathbb{z}_{p q}[x] such that
polys		modgcd_univariate	f g	computes the gcd of two polynomials in \mathbb{z}[x] using a modular algorithm
polys		_primitive	f p	compute the content and the primitive part of a polynomial in \mathbb{z}_p[x_0 \ldots x_{k-2}, y] \cong \mathbb{z}_p[y][x_0 \ldots x_{k-2}]
polys		_deg	f	compute the degree of a multivariate polynomial f \in k[x_0 \ldots x_{k-2}, y] \cong k[y][x_0 \ldots x_{k-2}]
polys		_LC	f	compute the leading coefficient of a multivariate polynomial f \in k[x_0 \ldots x_{k-2}, y] \cong k[y][x_0 \ldots x_{k-2}]
polys		_swap	f i	make the variable x_i the leading one in a multivariate polynomial f
polys		_degree_bound_bivariate	f g	compute upper degree bounds for the gcd of two bivariate integer polynomials f and g
polys		_chinese_remainder_reconstruction_multivariate	hp hq p q	construct a polynomial h_{pq} in \mathbb{z}_{p q}[x_0 \ldots x_{k-1}] such that
polys		_interpolate_multivariate	evalpoints hpeval ring i	reconstruct a polynomial h_p in \mathbb{z}_p[x_0 \ldots x_{k-1}] from a list of evaluation points in \mathbb{z}_p and a list of
polys		modgcd_bivariate	f g	computes the gcd of two polynomials in \mathbb{z}[x y] using a modular algorithm
polys		_modgcd_multivariate_p	f g p degbound	compute the gcd of two polynomials in \mathbb{z}_p[x0 \ldots x{k-1}]
polys		modgcd_multivariate	f g	compute the gcd of two polynomials in \mathbb{z}[x_0 \ldots x_{k-1}] using a modular algorithm
polys		_gf_div	f g p	compute \frac f g modulo p for two univariate polynomials over \mathbb z_p
polys		_rational_function_reconstruction	c p m	reconstruct a rational function \frac a b in \mathbb z_p t from
polys		_rational_reconstruction_func_coeffs	hm p m ring	reconstruct every coefficient c_h of a polynomial h in \mathbb z_p(t_k)[t_1 \ldots t_{k-1}][x z] from the corresponding
polys		_gf_gcdex	f g p	extended euclidean algorithm for two univariate polynomials over \mathbb z_p
polys		_trunc	f minpoly p	compute the reduced representation of a polynomial f in
polys		_euclidean_algorithm	f g minpoly p	compute the monic gcd of two univariate polynomials in \mathbb{z}_p[z]/(\check m_{\alpha} z )[x] with the euclidean
polys		_trial_division	f h minpoly p	check if h divides f in \mathbb k[t_1 \ldots t_k][z]/(m_{\alpha} z ), where \mathbb k is
polys		_evaluate_ground	f i a	evaluate a polynomial f at a in the i-th variable of the ground domain
polys		_func_field_modgcd_p	f g minpoly p	compute the gcd of two polynomials f and g in \mathbb z_p(t_1 \ldots t_k)[z]/(\check m_\alpha z )[x]
polys		_integer_rational_reconstruction	c m domain	reconstruct a rational number \frac a b from
polys		_rational_reconstruction_int_coeffs	hm m ring	reconstruct every rational coefficient c_h of a polynomial h in \mathbb q[t_1 \ldots t_k][x z] from the corresponding integer
polys		_func_field_modgcd_m	f g minpoly	compute the gcd of two polynomials in \mathbb q(t_1 \ldots t_k)[z]/(m_{\alpha} z )[x] using a modular
polys		_to_ZZ_poly	f ring	compute an associate of a polynomial f \in \mathbb q(\alpha)[x_0 \ldots x_{n-1}] in
polys		_to_ANP_poly	f ring	convert a polynomial f \in \mathbb z[x_1 \ldots x_{n-1}][z]/(\check m_{\alpha} z )[x_0]
polys		_minpoly_from_dense	minpoly ring	change representation of the minimal polynomial from dmp to polyelement for a given ring
polys		_primitive_in_x0	f	compute the content in x_0 and the primitive part of a polynomial f in
polys		func_field_modgcd	f g	compute the gcd of two polynomials f and g in \mathbb q(\alpha)[x_0 \ldots x_{n-1}] using a modular algorithm
polys		dup_trial_division	f factors K	determine multiplicities of factors using trial division
polys		dmp_trial_division	f factors u K	determine multiplicities of factors using trial division
polys		dup_zz_mignotte_bound	f K	mignotte bound for univariate polynomials in k[x]
polys		dmp_zz_mignotte_bound	f u K	mignotte bound for multivariate polynomials in k[x]
polys		dup_zz_hensel_step	m f g h	one step in hensel lifting in z[x]
polys		dup_zz_hensel_lift	p f f_list l	multifactor hensel lifting in z[x]
polys		dup_zz_zassenhaus	f K	factor primitive square-free polynomials in z[x]
polys		dup_zz_irreducible_p	f K	test irreducibility using eisenstein's criterion
polys		dup_cyclotomic_p	f K irreducible	efficiently test if f is a cyclotomic polnomial
polys		dup_zz_cyclotomic_poly	n K	efficiently generate n-th cyclotomic polnomial
polys		dup_zz_cyclotomic_factor	f K	efficiently factor polynomials x**n - 1 and x**n + 1 in z[x]
polys		dup_zz_factor_sqf	f K	factor square-free non-primitive polyomials in z[x]
polys		dup_zz_factor	f K	factor non square-free polynomials in z[x]
polys		dmp_zz_wang_non_divisors	E cs ct K	wang/eez compute a set of valid divisors
polys		dmp_zz_wang_test_points	f T ct A	wang/eez test evaluation points for suitability
polys		dmp_zz_wang_lead_coeffs	f T cs E	wang/eez compute correct leading coefficients
polys		dup_zz_diophantine	F m p K	wang/eez solve univariate diophantine equations
polys		dmp_zz_diophantine	F c A d	wang/eez solve multivariate diophantine equations
polys		dmp_zz_wang_hensel_lifting	f H LC A	wang/eez parallel hensel lifting algorithm
polys		dmp_zz_wang	f u K mod	factor primitive square-free polynomials in z[x]
polys		dmp_zz_factor	f u K	factor non square-free polynomials in z[x]
polys		dup_ext_factor	f K	factor univariate polynomials over algebraic number fields
polys		dmp_ext_factor	f u K	factor multivariate polynomials over algebraic number fields
polys		dup_gf_factor	f K	factor univariate polynomials over finite fields
polys		dmp_gf_factor	f u K	factor multivariate polynomials over finite fields
polys		dup_factor_list	f K0	factor polynomials into irreducibles in k[x]
polys		dup_factor_list_include	f K	factor polynomials into irreducibles in k[x]
polys		dmp_factor_list	f u K0	factor polynomials into irreducibles in k[x]
polys		dmp_factor_list_include	f u K	factor polynomials into irreducibles in k[x]
polys		dup_irreducible_p	f K	returns true if f has no factors over its domain
polys		dmp_irreducible_p	f u K	returns true if f has no factors over its domain
polys		symmetrize	F	rewrite a polynomial in terms of elementary symmetric polynomials
polys		horner	f	rewrite a polynomial in horner form
polys		interpolate	data x	construct an interpolating polynomial for the data points
polys		rational_interpolate	data degnum X	returns a rational interpolation where the data points are element of any integral domain
polys		viete	f roots	generate viete's formulas for f
polys		_construct_simple	coeffs opt	handle simple domains e g : zz qq rr and algebraic domains
polys		_construct_algebraic	coeffs opt	we know that coefficients are algebraic so construct the extension
polys		_construct_composite	coeffs opt	handle composite domains e g : zz[x], qq[x], zz x qq x
polys		_construct_expression	coeffs opt	the last resort case i e use the expression domain
polys		construct_domain	obj	construct a minimal domain for the list of coefficients
polys	Poly	__new__	cls rep	create a new polynomial instance out of something useful
polys	Poly	new	cls rep	construct :class poly instance from raw representation
polys	Poly	from_dict	cls rep	construct a polynomial from a dict
polys	Poly	from_list	cls rep	construct a polynomial from a list
polys	Poly	from_poly	cls rep	construct a polynomial from a polynomial
polys	Poly	from_expr	cls rep	construct a polynomial from an expression
polys	Poly	_from_dict	cls rep opt	construct a polynomial from a dict
polys	Poly	_from_list	cls rep opt	construct a polynomial from a list
polys	Poly	_from_poly	cls rep opt	construct a polynomial from a polynomial
polys	Poly	_from_expr	cls rep opt	construct a polynomial from an expression
polys	Poly	_hashable_content		allow sympy to hash poly instances
polys	Poly	free_symbols		free symbols of a polynomial expression
polys	Poly	free_symbols_in_domain		free symbols of the domain of self
polys	Poly	args		don't mess up with the core
polys	Poly	gen		return the principal generator
polys	Poly	domain		get the ground domain of self
polys	Poly	zero		return zero polynomial with self's properties
polys	Poly	one		return one polynomial with self's properties
polys	Poly	unit		return unit polynomial with self's properties
polys	Poly	unify	f g	make f and g belong to the same domain
polys	Poly	per	f rep gens remove	create a poly out of the given representation
polys	Poly	set_domain	f domain	set the ground domain of f
polys	Poly	get_domain	f	get the ground domain of f
polys	Poly	set_modulus	f modulus	set the modulus of f
polys	Poly	get_modulus	f	get the modulus of f
polys	Poly	_eval_subs	f old new	internal implementation of :func subs
polys	Poly	exclude	f	remove unnecessary generators from f
polys	Poly	replace	f x y	replace x with y in generators list
polys	Poly	reorder	f	efficiently apply new order of generators
polys	Poly	ltrim	f gen	remove dummy generators from the "left" of f
polys	Poly	has_only_gens	f	return true if poly(f *gens) retains ground domain
polys	Poly	to_ring	f	make the ground domain a ring
polys	Poly	to_field	f	make the ground domain a field
polys	Poly	to_exact	f	make the ground domain exact
polys	Poly	retract	f field	recalculate the ground domain of a polynomial
polys	Poly	slice	f x m n	take a continuous subsequence of terms of f
polys	Poly	coeffs	f order	returns all non-zero coefficients from f in lex order
polys	Poly	monoms	f order	returns all non-zero monomials from f in lex order
polys	Poly	terms	f order	returns all non-zero terms from f in lex order
polys	Poly	all_coeffs	f	returns all coefficients from a univariate polynomial f
polys	Poly	all_monoms	f	returns all monomials from a univariate polynomial f
polys	Poly	all_terms	f	returns all terms from a univariate polynomial f
polys	Poly	termwise	f func	apply a function to all terms of f
polys	Poly	length	f	returns the number of non-zero terms in f
polys	Poly	as_dict	f native zero	switch to a dict representation
polys	Poly	as_list	f native	switch to a list representation
polys	Poly	as_expr	f	convert a poly instance to an expr instance
polys	Poly	lift	f	convert algebraic coefficients to rationals
polys	Poly	deflate	f	reduce degree of f by mapping x_i**m to y_i
polys	Poly	inject	f front	inject ground domain generators into f
polys	Poly	eject	f	eject selected generators into the ground domain
polys	Poly	terms_gcd	f	remove gcd of terms from the polynomial f
polys	Poly	add_ground	f coeff	add an element of the ground domain to f
polys	Poly	sub_ground	f coeff	subtract an element of the ground domain from f
polys	Poly	mul_ground	f coeff	multiply f by a an element of the ground domain
polys	Poly	quo_ground	f coeff	quotient of f by a an element of the ground domain
polys	Poly	exquo_ground	f coeff	exact quotient of f by a an element of the ground domain
polys	Poly	abs	f	make all coefficients in f positive
polys	Poly	neg	f	negate all coefficients in f
polys	Poly	add	f g	add two polynomials f and g
polys	Poly	sub	f g	subtract two polynomials f and g
polys	Poly	mul	f g	multiply two polynomials f and g
polys	Poly	sqr	f	square a polynomial f
polys	Poly	pow	f n	raise f to a non-negative power n
polys	Poly	pdiv	f g	polynomial pseudo-division of f by g
polys	Poly	prem	f g	polynomial pseudo-remainder of f by g
polys	Poly	pquo	f g	polynomial pseudo-quotient of f by g
polys	Poly	pexquo	f g	polynomial exact pseudo-quotient of f by g
polys	Poly	div	f g auto	polynomial division with remainder of f by g
polys	Poly	rem	f g auto	computes the polynomial remainder of f by g
polys	Poly	quo	f g auto	computes polynomial quotient of f by g
polys	Poly	exquo	f g auto	computes polynomial exact quotient of f by g
polys	Poly	_gen_to_level	f gen	returns level associated with the given generator
polys	Poly	degree	f gen	returns degree of f in x_j
polys	Poly	degree_list	f	returns a list of degrees of f
polys	Poly	total_degree	f	returns the total degree of f
polys	Poly	homogenize	f s	returns the homogeneous polynomial of f
polys	Poly	homogeneous_order	f	returns the homogeneous order of f
polys	Poly	LC	f order	returns the leading coefficient of f
polys	Poly	TC	f	returns the trailing coefficient of f
polys	Poly	EC	f order	returns the last non-zero coefficient of f
polys	Poly	coeff_monomial	f monom	returns the coefficient of monom in f if there else none
polys	Poly	nth	f	returns the n-th coefficient of f where n are the exponents of the generators in the term of interest
polys	Poly	LM	f order	returns the leading monomial of f
polys	Poly	EM	f order	returns the last non-zero monomial of f
polys	Poly	LT	f order	returns the leading term of f
polys	Poly	ET	f order	returns the last non-zero term of f
polys	Poly	max_norm	f	returns maximum norm of f
polys	Poly	l1_norm	f	returns l1 norm of f
polys	Poly	clear_denoms	convert	clear denominators but keep the ground domain
polys	Poly	rat_clear_denoms	g	clear denominators in a rational function f/g
polys	Poly	integrate		computes indefinite integral of f
polys	Poly	diff	f	computes partial derivative of f
polys	Poly	eval	x a auto	evaluate f at a in the given variable
polys	Poly	__call__	f	evaluate f at the give values
polys	Poly	half_gcdex	f g auto	half extended euclidean algorithm of f and g
polys	Poly	gcdex	f g auto	extended euclidean algorithm of f and g
polys	Poly	invert	f g auto	invert f modulo g when possible
polys	Poly	revert	f n	compute f** -1 mod x**n
polys	Poly	subresultants	f g	computes the subresultant prs of f and g
polys	Poly	resultant	f g includePRS	computes the resultant of f and g via prs
polys	Poly	discriminant	f	computes the discriminant of f
polys	Poly	dispersionset	f g	compute the *dispersion set* of two polynomials
polys	Poly	dispersion	f g	compute the *dispersion* of polynomials
polys	Poly	cofactors	f g	returns the gcd of f and g and their cofactors
polys	Poly	gcd	f g	returns the polynomial gcd of f and g
polys	Poly	lcm	f g	returns polynomial lcm of f and g
polys	Poly	trunc	f p	reduce f modulo a constant p
polys	Poly	monic	auto	divides all coefficients by lc f
polys	Poly	content	f	returns the gcd of polynomial coefficients
polys	Poly	primitive	f	returns the content and a primitive form of f
polys	Poly	compose	f g	computes the functional composition of f and g
polys	Poly	decompose	f	computes a functional decomposition of f
polys	Poly	shift	f a	efficiently compute taylor shift f x + a
polys	Poly	transform	f p q	efficiently evaluate the functional transformation q**n * f(p/q)
polys	Poly	sturm	auto	computes the sturm sequence of f
polys	Poly	gff_list	f	computes greatest factorial factorization of f
polys	Poly	sqf_norm	f	computes square-free norm of f
polys	Poly	sqf_part	f	computes square-free part of f
polys	Poly	sqf_list	f all	returns a list of square-free factors of f
polys	Poly	sqf_list_include	f all	returns a list of square-free factors of f
polys	Poly	factor_list	f	returns a list of irreducible factors of f
polys	Poly	factor_list_include	f	returns a list of irreducible factors of f
polys	Poly	intervals	f all eps inf	compute isolating intervals for roots of f
polys	Poly	refine_root	f s t eps	refine an isolating interval of a root to the given precision
polys	Poly	count_roots	f inf sup	return the number of roots of f in [inf sup] interval
polys	Poly	root	f index radicals	get an indexed root of a polynomial
polys	Poly	real_roots	f multiple radicals	return a list of real roots with multiplicities
polys	Poly	all_roots	f multiple radicals	return a list of real and complex roots with multiplicities
polys	Poly	nroots	f n maxsteps cleanup	compute numerical approximations of roots of f
polys	Poly	ground_roots	f	compute roots of f by factorization in the ground domain
polys	Poly	nth_power_roots_poly	f n	construct a polynomial with n-th powers of roots of f
polys	Poly	cancel	f g include	cancel common factors in a rational function f/g
polys	Poly	is_zero	f	returns true if f is a zero polynomial
polys	Poly	is_one	f	returns true if f is a unit polynomial
polys	Poly	is_sqf	f	returns true if f is a square-free polynomial
polys	Poly	is_monic	f	returns true if the leading coefficient of f is one
polys	Poly	is_primitive	f	returns true if gcd of the coefficients of f is one
polys	Poly	is_ground	f	returns true if f is an element of the ground domain
polys	Poly	is_linear	f	returns true if f is linear in all its variables
polys	Poly	is_quadratic	f	returns true if f is quadratic in all its variables
polys	Poly	is_monomial	f	returns true if f is zero or has only one term
polys	Poly	is_homogeneous	f	returns true if f is a homogeneous polynomial
polys	Poly	is_irreducible	f	returns true if f has no factors over its domain
polys	Poly	is_univariate	f	returns true if f is a univariate polynomial
polys	Poly	is_multivariate	f	returns true if f is a multivariate polynomial
polys	Poly	is_cyclotomic	f	returns true if f is a cyclotomic polnomial
polys	PurePoly	_hashable_content		allow sympy to hash poly instances
polys	PurePoly	free_symbols		free symbols of a polynomial
polys		poly_from_expr	expr	construct a polynomial from an expression
polys		_poly_from_expr	expr opt	construct a polynomial from an expression
polys		parallel_poly_from_expr	exprs	construct polynomials from expressions
polys		_parallel_poly_from_expr	exprs opt	construct polynomials from expressions
polys		_update_args	args key value	add a new key value pair to arguments dict
polys		degree	f	return the degree of f in the given variable
polys		degree_list	f	return a list of degrees of f in all variables
polys		LC	f	return the leading coefficient of f
polys		LM	f	return the leading monomial of f
polys		LT	f	return the leading term of f
polys		pdiv	f g	compute polynomial pseudo-division of f and g
polys		prem	f g	compute polynomial pseudo-remainder of f and g
polys		pquo	f g	compute polynomial pseudo-quotient of f and g
polys		pexquo	f g	compute polynomial exact pseudo-quotient of f and g
polys		div	f g	compute polynomial division of f and g
polys		rem	f g	compute polynomial remainder of f and g
polys		quo	f g	compute polynomial quotient of f and g
polys		exquo	f g	compute polynomial exact quotient of f and g
polys		half_gcdex	f g	half extended euclidean algorithm of f and g
polys		gcdex	f g	extended euclidean algorithm of f and g
polys		invert	f g	invert f modulo g when possible
polys		subresultants	f g	compute subresultant prs of f and g
polys		resultant	f g	compute resultant of f and g
polys		discriminant	f	compute discriminant of f
polys		cofactors	f g	compute gcd and cofactors of f and g
polys		gcd_list	seq	compute gcd of a list of polynomials
polys		gcd	f g	compute gcd of f and g
polys		lcm_list	seq	compute lcm of a list of polynomials
polys		lcm	f g	compute lcm of f and g
polys		terms_gcd	f	remove gcd of terms from f
polys		trunc	f p	reduce f modulo a constant p
polys		monic	f	divide all coefficients of f by lc f
polys		content	f	compute gcd of coefficients of f
polys		primitive	f	compute content and the primitive form of f
polys		compose	f g	compute functional composition f g
polys		decompose	f	compute functional decomposition of f
polys		sturm	f	compute sturm sequence of f
polys		gff_list	f	compute a list of greatest factorial factors of f
polys		gff	f	compute greatest factorial factorization of f
polys		sqf_norm	f	compute square-free norm of f
polys		sqf_part	f	compute square-free part of f
polys		_sorted_factors	factors method	sort a list of expr exp pairs
polys		_factors_product	factors	multiply a list of expr exp pairs
polys		_symbolic_factor_list	expr opt method	helper function for :func _symbolic_factor
polys		_symbolic_factor	expr opt method	helper function for :func _factor
polys		_generic_factor_list	expr gens args method	helper function for :func sqf_list and :func factor_list
polys		_generic_factor	expr gens args method	helper function for :func sqf and :func factor
polys		to_rational_coeffs	f	try to transform a polynomial to have rational coefficients try to find a transformation x = alpha*y
polys		_torational_factor_list	p x	helper function to factor polynomial using to_rational_coeffs examples
polys		sqf_list	f	compute a list of square-free factors of f
polys		sqf	f	compute square-free factorization of f
polys		factor_list	f	compute a list of irreducible factors of f
polys		factor	f	compute the factorization of expression f, into irreducibles (to
polys		intervals	F all eps inf	compute isolating intervals for roots of f
polys		refine_root	f s t eps	refine an isolating interval of a root to the given precision
polys		count_roots	f inf sup	return the number of roots of f in [inf sup] interval
polys		real_roots	f multiple	return a list of real roots with multiplicities of f
polys		nroots	f n maxsteps cleanup	compute numerical approximations of roots of f
polys		ground_roots	f	compute roots of f by factorization in the ground domain
polys		nth_power_roots_poly	f n	construct a polynomial with n-th powers of roots of f
polys		cancel	f	cancel common factors in a rational function f
polys		reduced	f G	reduces a polynomial f modulo a set of polynomials g
polys		groebner	F	computes the reduced groebner basis for a set of polynomials
polys		is_zero_dimensional	F	checks if the ideal generated by a groebner basis is zero-dimensional
polys	GroebnerBasis	__new__	cls F	compute a reduced groebner basis for a system of polynomials
polys	GroebnerBasis	is_zero_dimensional		checks if the ideal generated by a groebner basis is zero-dimensional
polys	GroebnerBasis	fglm	order	convert a groebner basis from one ordering to another
polys	GroebnerBasis	reduce	expr auto	reduces a polynomial modulo a groebner basis
polys	GroebnerBasis	contains	poly	check if poly belongs the ideal generated by self
polys		poly	expr	efficiently transform an expression into a polynomial
polys	GenericPoly	ground_to_ring	f	make the ground domain a ring
polys	GenericPoly	ground_to_field	f	make the ground domain a field
polys	GenericPoly	ground_to_exact	f	make the ground domain exact
polys	DMP	unify	f g	unify representations of two multivariate polynomials
polys	DMP	per	f rep dom kill	create a dmp out of the given representation
polys	DMP	from_list	cls rep lev dom	create an instance of cls given a list of native coefficients
polys	DMP	from_sympy_list	cls rep lev dom	create an instance of cls given a list of sympy coefficients
polys	DMP	to_dict	f zero	convert f to a dict representation with native coefficients
polys	DMP	to_sympy_dict	f zero	convert f to a dict representation with sympy coefficients
polys	DMP	to_tuple	f	convert f to a tuple representation with native coefficients
polys	DMP	from_dict	cls rep lev dom	construct and instance of cls from a dict representation
polys	DMP	to_ring	f	make the ground domain a ring
polys	DMP	to_field	f	make the ground domain a field
polys	DMP	to_exact	f	make the ground domain exact
polys	DMP	convert	f dom	convert the ground domain of f
polys	DMP	slice	f m n j	take a continuous subsequence of terms of f
polys	DMP	coeffs	f order	returns all non-zero coefficients from f in lex order
polys	DMP	monoms	f order	returns all non-zero monomials from f in lex order
polys	DMP	terms	f order	returns all non-zero terms from f in lex order
polys	DMP	all_coeffs	f	returns all coefficients from f
polys	DMP	all_monoms	f	returns all monomials from f
polys	DMP	all_terms	f	returns all terms from a f
polys	DMP	lift	f	convert algebraic coefficients to rationals
polys	DMP	deflate	f	reduce degree of f by mapping x_i^m to y_i
polys	DMP	inject	f front	inject ground domain generators into f
polys	DMP	eject	f dom front	eject selected generators into the ground domain
polys	DMP	exclude	f	remove useless generators from f
polys	DMP	permute	f P	returns a polynomial in k[x_{p 1 }, x_{p n }]
polys	DMP	terms_gcd	f	remove gcd of terms from the polynomial f
polys	DMP	add_ground	f c	add an element of the ground domain to f
polys	DMP	sub_ground	f c	subtract an element of the ground domain from f
polys	DMP	mul_ground	f c	multiply f by a an element of the ground domain
polys	DMP	quo_ground	f c	quotient of f by a an element of the ground domain
polys	DMP	exquo_ground	f c	exact quotient of f by a an element of the ground domain
polys	DMP	abs	f	make all coefficients in f positive
polys	DMP	neg	f	negate all coefficients in f
polys	DMP	add	f g	add two multivariate polynomials f and g
polys	DMP	sub	f g	subtract two multivariate polynomials f and g
polys	DMP	mul	f g	multiply two multivariate polynomials f and g
polys	DMP	sqr	f	square a multivariate polynomial f
polys	DMP	pow	f n	raise f to a non-negative power n
polys	DMP	pdiv	f g	polynomial pseudo-division of f and g
polys	DMP	prem	f g	polynomial pseudo-remainder of f and g
polys	DMP	pquo	f g	polynomial pseudo-quotient of f and g
polys	DMP	pexquo	f g	polynomial exact pseudo-quotient of f and g
polys	DMP	div	f g	polynomial division with remainder of f and g
polys	DMP	rem	f g	computes polynomial remainder of f and g
polys	DMP	quo	f g	computes polynomial quotient of f and g
polys	DMP	exquo	f g	computes polynomial exact quotient of f and g
polys	DMP	degree	f j	returns the leading degree of f in x_j
polys	DMP	degree_list	f	returns a list of degrees of f
polys	DMP	total_degree	f	returns the total degree of f
polys	DMP	homogenize	f s	return homogeneous polynomial of f
polys	DMP	homogeneous_order	f	returns the homogeneous order of f
polys	DMP	LC	f	returns the leading coefficient of f
polys	DMP	TC	f	returns the trailing coefficient of f
polys	DMP	nth	f	returns the n-th coefficient of f
polys	DMP	max_norm	f	returns maximum norm of f
polys	DMP	l1_norm	f	returns l1 norm of f
polys	DMP	clear_denoms	f	clear denominators but keep the ground domain
polys	DMP	integrate	f m j	computes the m-th order indefinite integral of f in x_j
polys	DMP	diff	f m j	computes the m-th order derivative of f in x_j
polys	DMP	eval	f a j	evaluates f at the given point a in x_j
polys	DMP	half_gcdex	f g	half extended euclidean algorithm if univariate
polys	DMP	gcdex	f g	extended euclidean algorithm if univariate
polys	DMP	invert	f g	invert f modulo g, if possible
polys	DMP	revert	f n	compute f** -1 mod x**n
polys	DMP	subresultants	f g	computes subresultant prs sequence of f and g
polys	DMP	resultant	f g includePRS	computes resultant of f and g via prs
polys	DMP	discriminant	f	computes discriminant of f
polys	DMP	cofactors	f g	returns gcd of f and g and their cofactors
polys	DMP	gcd	f g	returns polynomial gcd of f and g
polys	DMP	lcm	f g	returns polynomial lcm of f and g
polys	DMP	cancel	f g include	cancel common factors in a rational function f/g
polys	DMP	trunc	f p	reduce f modulo a constant p
polys	DMP	monic	f	divides all coefficients by lc f
polys	DMP	content	f	returns gcd of polynomial coefficients
polys	DMP	primitive	f	returns content and a primitive form of f
polys	DMP	compose	f g	computes functional composition of f and g
polys	DMP	decompose	f	computes functional decomposition of f
polys	DMP	shift	f a	efficiently compute taylor shift f x + a
polys	DMP	transform	f p q	evaluate functional transformation q**n * f(p/q)
polys	DMP	sturm	f	computes the sturm sequence of f
polys	DMP	gff_list	f	computes greatest factorial factorization of f
polys	DMP	sqf_norm	f	computes square-free norm of f
polys	DMP	sqf_part	f	computes square-free part of f
polys	DMP	sqf_list	f all	returns a list of square-free factors of f
polys	DMP	sqf_list_include	f all	returns a list of square-free factors of f
polys	DMP	factor_list	f	returns a list of irreducible factors of f
polys	DMP	factor_list_include	f	returns a list of irreducible factors of f
polys	DMP	intervals	f all eps inf	compute isolating intervals for roots of f
polys	DMP	refine_root	f s t eps	refine an isolating interval to the given precision
polys	DMP	count_real_roots	f inf sup	return the number of real roots of f in [inf sup]
polys	DMP	count_complex_roots	f inf sup	return the number of complex roots of f in [inf sup]
polys	DMP	is_zero	f	returns true if f is a zero polynomial
polys	DMP	is_one	f	returns true if f is a unit polynomial
polys	DMP	is_ground	f	returns true if f is an element of the ground domain
polys	DMP	is_sqf	f	returns true if f is a square-free polynomial
polys	DMP	is_monic	f	returns true if the leading coefficient of f is one
polys	DMP	is_primitive	f	returns true if the gcd of the coefficients of f is one
polys	DMP	is_linear	f	returns true if f is linear in all its variables
polys	DMP	is_quadratic	f	returns true if f is quadratic in all its variables
polys	DMP	is_monomial	f	returns true if f is zero or has only one term
polys	DMP	is_homogeneous	f	returns true if f is a homogeneous polynomial
polys	DMP	is_irreducible	f	returns true if f has no factors over its domain
polys	DMP	is_cyclotomic	f	returns true if f is a cyclotomic polynomial
polys	DMF	poly_unify	f g	unify a multivariate fraction and a polynomial
polys	DMF	frac_unify	f g	unify representations of two multivariate fractions
polys	DMF	per	f num den cancel	create a dmf out of the given representation
polys	DMF	half_per	f rep kill	create a dmp out of the given representation
polys	DMF	numer	f	returns the numerator of f
polys	DMF	denom	f	returns the denominator of f
polys	DMF	cancel	f	remove common factors from f num and f den
polys	DMF	neg	f	negate all coefficients in f
polys	DMF	add	f g	add two multivariate fractions f and g
polys	DMF	sub	f g	subtract two multivariate fractions f and g
polys	DMF	mul	f g	multiply two multivariate fractions f and g
polys	DMF	pow	f n	raise f to a non-negative power n
polys	DMF	quo	f g	computes quotient of fractions f and g
polys	DMF	invert	f check	computes inverse of a fraction f
polys	DMF	is_zero	f	returns true if f is a zero fraction
polys	DMF	is_one	f	returns true if f is a unit fraction
polys	ANP	unify	f g	unify representations of two algebraic numbers
polys	ANP	to_dict	f	convert f to a dict representation with native coefficients
polys	ANP	to_sympy_dict	f	convert f to a dict representation with sympy coefficients
polys	ANP	to_list	f	convert f to a list representation with native coefficients
polys	ANP	to_sympy_list	f	convert f to a list representation with sympy coefficients
polys	ANP	to_tuple	f	convert f to a tuple representation with native coefficients
polys	ANP	pow	f n	raise f to a non-negative power n
polys	ANP	LC	f	returns the leading coefficient of f
polys	ANP	TC	f	returns the trailing coefficient of f
polys	ANP	is_zero	f	returns true if f is a zero algebraic number
polys	ANP	is_one	f	returns true if f is a unit algebraic number
polys	ANP	is_ground	f	returns true if f is an element of the ground domain
polys		poly_LC	f K	return leading coefficient of f
polys		poly_TC	f K	return trailing coefficient of f
polys		dmp_ground_LC	f u K	return the ground leading coefficient
polys		dmp_ground_TC	f u K	return the ground trailing coefficient
polys		dmp_true_LT	f u K	return the leading term c * x_1**n_1 x_k**n_k
polys		dup_degree	f	return the leading degree of f in k[x]
polys		dmp_degree	f u	return the leading degree of f in x_0 in k[x]
polys		_rec_degree_in	g v i j	recursive helper function for :func dmp_degree_in
polys		dmp_degree_in	f j u	return the leading degree of f in x_j in k[x]
polys		_rec_degree_list	g v i degs	recursive helper for :func dmp_degree_list
polys		dmp_degree_list	f u	return a list of degrees of f in k[x]
polys		dup_strip	f	remove leading zeros from f in k[x]
polys		dmp_strip	f u	remove leading zeros from f in k[x]
polys		_rec_validate	f g i K	recursive helper for :func dmp_validate
polys		_rec_strip	g v	recursive helper for :func _rec_strip
polys		dmp_validate	f K	return the number of levels in f and recursively strip it
polys		dup_reverse	f	compute x**n * f(1/x), i e : reverse f in k[x]
polys		dup_copy	f	create a new copy of a polynomial f in k[x]
polys		dmp_copy	f u	create a new copy of a polynomial f in k[x]
polys		dup_to_tuple	f	convert f into a tuple
polys		dmp_to_tuple	f u	convert f into a nested tuple of tuples
polys		dup_normal	f K	normalize univariate polynomial in the given domain
polys		dmp_normal	f u K	normalize a multivariate polynomial in the given domain
polys		dup_convert	f K0 K1	convert the ground domain of f from k0 to k1
polys		dmp_convert	f u K0 K1	convert the ground domain of f from k0 to k1
polys		dup_from_sympy	f K	convert the ground domain of f from sympy to k
polys		dmp_from_sympy	f u K	convert the ground domain of f from sympy to k
polys		dup_nth	f n K	return the n-th coefficient of f in k[x]
polys		dmp_nth	f n u K	return the n-th coefficient of f in k[x]
polys		dmp_ground_nth	f N u K	return the ground n-th coefficient of f in k[x]
polys		dmp_zero_p	f u	return true if f is zero in k[x]
polys		dmp_zero	u	return a multivariate zero
polys		dmp_one_p	f u K	return true if f is one in k[x]
polys		dmp_one	u K	return a multivariate one over k
polys		dmp_ground_p	f c u	return true if f is constant in k[x]
polys		dmp_ground	c u	return a multivariate constant
polys		dmp_zeros	n u K	return a list of multivariate zeros
polys		dmp_grounds	c n u	return a list of multivariate constants
polys		dmp_negative_p	f u K	return true if lc f is negative
polys		dmp_positive_p	f u K	return true if lc f is positive
polys		dup_from_dict	f K	create a k[x] polynomial from a dict
polys		dup_from_raw_dict	f K	create a k[x] polynomial from a raw dict
polys		dmp_from_dict	f u K	create a k[x] polynomial from a dict
polys		dup_to_dict	f K zero	convert k[x] polynomial to a dict
polys		dup_to_raw_dict	f K zero	convert a k[x] polynomial to a raw dict
polys		dmp_to_dict	f u K zero	convert a k[x] polynomial to a dict
polys		dmp_swap	f i j u	transform k[ x_i x_j ] to k[ x_j x_i ]
polys		dmp_permute	f P u K	return a polynomial in k[x_{p 1 }, ,x_{p n }]
polys		dmp_nest	f l K	return a multivariate value nested l-levels
polys		dmp_raise	f l u K	return a multivariate polynomial raised l-levels
polys		dup_deflate	f K	map x**m to y in a polynomial in k[x]
polys		dmp_deflate	f u K	map x_i**m_i to y_i in a polynomial in k[x]
polys		dup_multi_deflate	polys K	map x**m to y in a set of polynomials in k[x]
polys		dmp_multi_deflate	polys u K	map x_i**m_i to y_i in a set of polynomials in k[x]
polys		dup_inflate	f m K	map y to x**m in a polynomial in k[x]
polys		_rec_inflate	g M v i	recursive helper for :func dmp_inflate
polys		dmp_inflate	f M u K	map y_i to x_i**k_i in a polynomial in k[x]
polys		dmp_exclude	f u K	exclude useless levels from f
polys		dmp_include	f J u K	include useless levels in f
polys		dmp_inject	f u K front	convert f from k[x][y] to k[x y]
polys		dmp_eject	f u K front	convert f from k[x y] to k[x][y]
polys		dup_terms_gcd	f K	remove gcd of terms from f in k[x]
polys		dmp_terms_gcd	f u K	remove gcd of terms from f in k[x]
polys		_rec_list_terms	g v monom	recursive helper for :func dmp_list_terms
polys		dmp_list_terms	f u K order	list all non-zero terms from f in the given order order
polys		dup_apply_pairs	f g h args	apply h to pairs of coefficients of f and g
polys		dmp_apply_pairs	f g h args	apply h to pairs of coefficients of f and g
polys		dup_slice	f m n K	take a continuous subsequence of terms of f in k[x]
polys		dmp_slice	f m n u	take a continuous subsequence of terms of f in k[x]
polys		dmp_slice_in	f m n j	take a continuous subsequence of terms of f in x_j in k[x]
polys		dup_random	n a b K	return a polynomial of degree n with coefficients in [a b]
polys	Options	_init_dependencies_order	cls	resolve the order of options' processing
polys	Options	clone	updates	clone self and update specified options
polys		build_options	gens args	construct options from keyword arguments or options
polys		allowed_flags	args flags	allow specified flags to be used in the given context
polys		set_defaults	options	update options with default values
polys		ring	symbols domain order	construct a polynomial ring returning (ring x_1 x_n)
polys		xring	symbols domain order	construct a polynomial ring returning (ring (x_1 x_n))
polys		vring	symbols domain order	construct a polynomial ring and inject x_1 x_n into the global namespace
polys		sring	exprs	construct a ring deriving generators and domain from options and input expressions
polys	PolyRing	_gens		return a list of polynomial generators
polys	PolyRing	monomial_basis	i	return the ith-basis element
polys	PolyRing	index	gen	compute index of gen in self gens
polys	PolyRing	drop		remove specified generators from this ring
polys	PolyRing	add		add a sequence of polynomials or containers of polynomials
polys	PolyRing	mul		multiply a sequence of polynomials or containers of polynomials
polys	PolyRing	drop_to_ground		remove specified generators from the ring and inject them into its domain
polys	PolyRing	compose	other	add the generators of other to self
polys	PolyRing	add_gens	symbols	add the elements of symbols as generators to self
polys	PolyElement	copy		return a copy of polynomial self
polys	PolyElement	strip_zero		eliminate monomials with zero coefficient
polys	PolyElement	__eq__	p1 p2	equality test for polynomials
polys	PolyElement	almosteq	p1 p2 tolerance	approximate equality test for polynomials
polys	PolyElement	__add__	p1 p2	add two polynomials
polys	PolyElement	__sub__	p1 p2	subtract polynomial p2 from p1
polys	PolyElement	__rsub__	p1 n	n - p1 with n convertible to the coefficient domain
polys	PolyElement	__mul__	p1 p2	multiply two polynomials
polys	PolyElement	__rmul__	p1 p2	p2 * p1 with p2 in the coefficient domain of p1
polys	PolyElement	__pow__	n	raise polynomial to power n examples
polys	PolyElement	square		square of a polynomial examples
polys	PolyElement	div	fv	division algorithm see [clo] p64
polys	PolyElement	_iadd_monom	mc	add to self the monomial coeff*x0**i0*x1**i1*
polys	PolyElement	_iadd_poly_monom	p2 mc	add to self the product of p *(coeff*x0**i0*x1**i1*
polys	PolyElement	degree	f x	the leading degree in x or the main variable
polys	PolyElement	degrees	f	a tuple containing leading degrees in all variables
polys	PolyElement	tail_degree	f x	the tail degree in x or the main variable
polys	PolyElement	tail_degrees	f	a tuple containing tail degrees in all variables
polys	PolyElement	leading_expv		leading monomial tuple according to the monomial ordering
polys	PolyElement	coeff	element	returns the coefficient that stands next to the given monomial
polys	PolyElement	const		returns the constant coeffcient
polys	PolyElement	leading_monom		leading monomial as a polynomial element
polys	PolyElement	leading_term		leading term as a polynomial element
polys	PolyElement	coeffs	order	ordered list of polynomial coefficients
polys	PolyElement	monoms	order	ordered list of polynomial monomials
polys	PolyElement	terms	order	ordered list of polynomial terms
polys	PolyElement	itercoeffs		iterator over coefficients of a polynomial
polys	PolyElement	itermonoms		iterator over monomials of a polynomial
polys	PolyElement	iterterms		iterator over terms of a polynomial
polys	PolyElement	listcoeffs		unordered list of polynomial coefficients
polys	PolyElement	listmonoms		unordered list of polynomial monomials
polys	PolyElement	listterms		unordered list of polynomial terms
polys	PolyElement	imul_num	p c	multiply inplace the polynomial p by an element in the coefficient ring provided p is not one of the generators
polys	PolyElement	content	f	returns gcd of polynomial's coefficients
polys	PolyElement	primitive	f	returns content and a primitive polynomial
polys	PolyElement	monic	f	divides all coefficients by the leading coefficient
polys	PolyElement	cancel	g	cancel common factors in a rational function f/g
polys	PolyElement	diff	f x	computes partial derivative in x
polys		_choose_factor	factors x v dom	return a factor having root v it is assumed that one of the factors has root v
polys		_separate_sq	p	helper function for _minimal_polynomial_sq it selects a rational g such that the polynomial p
polys		_minimal_polynomial_sq	p n x	returns the minimal polynomial for the nth-root of a sum of surds or none if it fails
polys		_minpoly_op_algebraic_element	op ex1 ex2 x	return the minimal polynomial for op ex1 ex2 parameters
polys		_invertx	p x	returns expand_mul(x**degree p x *p subs(x 1/x))
polys		_muly	p x y	returns _mexpand(y**deg*p subs({x x / y}))
polys		_minpoly_pow	ex pw x dom	returns minpoly(ex**pw x) parameters
polys		_minpoly_add	x dom	returns minpoly(add(*a), dom x)
polys		_minpoly_mul	x dom	returns minpoly(mul(*a), dom x)
polys		_minpoly_sin	ex x	returns the minimal polynomial of sin ex see http //mathworld
polys		_minpoly_cos	ex x	returns the minimal polynomial of cos ex see http //mathworld
polys		_minpoly_exp	ex x	returns the minimal polynomial of exp ex
polys		_minpoly_rootof	ex x	returns the minimal polynomial of a crootof object
polys		_minpoly_compose	ex x dom	computes the minimal polynomial of an algebraic element using operations on minimal polynomials
polys		minimal_polynomial	ex x	computes the minimal polynomial of an algebraic element
polys		_minpoly_groebner	ex x cls	computes the minimal polynomial of an algebraic number using groebner bases
polys		_coeffs_generator	n	generate coefficients for primitive_element()
polys		primitive_element	extension x	construct a common number field for all extensions
polys		is_isomorphism_possible	a b	returns true if there is a chance for isomorphism
polys		field_isomorphism_pslq	a b	construct field isomorphism using pslq algorithm
polys		field_isomorphism_factor	a b	construct field isomorphism via factorization
polys		field_isomorphism	a b	construct an isomorphism between two number fields
polys		to_number_field	extension theta	express extension in the field generated by theta
polys		isolate	alg eps fast	give a rational isolating interval for an algebraic number
polys		together	expr deep	denest and combine rational expressions using symbolic methods
polys		dispersionset	p q	compute the *dispersion set* of two polynomials
polys		dispersion	p q	compute the *dispersion* of polynomials
polys		dup_half_gcdex	f g K	half extended euclidean algorithm in f[x]
polys		dmp_half_gcdex	f g u K	half extended euclidean algorithm in f[x]
polys		dup_gcdex	f g K	extended euclidean algorithm in f[x]
polys		dmp_gcdex	f g u K	extended euclidean algorithm in f[x]
polys		dup_invert	f g K	compute multiplicative inverse of f modulo g in f[x]
polys		dmp_invert	f g u K	compute multiplicative inverse of f modulo g in f[x]
polys		dup_euclidean_prs	f g K	euclidean polynomial remainder sequence prs in k[x]
polys		dmp_euclidean_prs	f g u K	euclidean polynomial remainder sequence prs in k[x]
polys		dup_primitive_prs	f g K	primitive polynomial remainder sequence prs in k[x]
polys		dmp_primitive_prs	f g u K	primitive polynomial remainder sequence prs in k[x]
polys		dup_inner_subresultants	f g K	subresultant prs algorithm in k[x]
polys		dup_subresultants	f g K	computes subresultant prs of two polynomials in k[x]
polys		dup_prs_resultant	f g K	resultant algorithm in k[x] using subresultant prs
polys		dup_resultant	f g K includePRS	computes resultant of two polynomials in k[x]
polys		dmp_inner_subresultants	f g u K	subresultant prs algorithm in k[x]
polys		dmp_subresultants	f g u K	computes subresultant prs of two polynomials in k[x]
polys		dmp_prs_resultant	f g u K	resultant algorithm in k[x] using subresultant prs
polys		dmp_zz_modular_resultant	f g p u	compute resultant of f and g modulo a prime p
polys		_collins_crt	r R P p	wrapper of crt for collins's resultant algorithm
polys		dmp_zz_collins_resultant	f g u K	collins's modular resultant algorithm in z[x]
polys		dmp_qq_collins_resultant	f g u K0	collins's modular resultant algorithm in q[x]
polys		dmp_resultant	f g u K	computes resultant of two polynomials in k[x]
polys		dup_discriminant	f K	computes discriminant of a polynomial in k[x]
polys		dmp_discriminant	f u K	computes discriminant of a polynomial in k[x]
polys		_dup_rr_trivial_gcd	f g K	handle trivial cases in gcd algorithm over a ring
polys		_dup_ff_trivial_gcd	f g K	handle trivial cases in gcd algorithm over a field
polys		_dmp_rr_trivial_gcd	f g u K	handle trivial cases in gcd algorithm over a ring
polys		_dmp_ff_trivial_gcd	f g u K	handle trivial cases in gcd algorithm over a field
polys		_dmp_simplify_gcd	f g u K	try to eliminate x_0 from gcd computation in k[x]
polys		dup_rr_prs_gcd	f g K	computes polynomial gcd using subresultants over a ring
polys		dup_ff_prs_gcd	f g K	computes polynomial gcd using subresultants over a field
polys		dmp_rr_prs_gcd	f g u K	computes polynomial gcd using subresultants over a ring
polys		dmp_ff_prs_gcd	f g u K	computes polynomial gcd using subresultants over a field
polys		_dup_zz_gcd_interpolate	h x K	interpolate polynomial gcd from integer gcd
polys		dup_zz_heu_gcd	f g K	heuristic polynomial gcd in z[x]
polys		_dmp_zz_gcd_interpolate	h x v K	interpolate polynomial gcd from integer gcd
polys		dmp_zz_heu_gcd	f g u K	heuristic polynomial gcd in z[x]
polys		dup_qq_heu_gcd	f g K0	heuristic polynomial gcd in q[x]
polys		dmp_qq_heu_gcd	f g u K0	heuristic polynomial gcd in q[x]
polys		dup_inner_gcd	f g K	computes polynomial gcd and cofactors of f and g in k[x]
polys		_dmp_inner_gcd	f g u K	helper function for dmp_inner_gcd()
polys		dmp_inner_gcd	f g u K	computes polynomial gcd and cofactors of f and g in k[x]
polys		dup_gcd	f g K	computes polynomial gcd of f and g in k[x]
polys		dmp_gcd	f g u K	computes polynomial gcd of f and g in k[x]
polys		dup_rr_lcm	f g K	computes polynomial lcm over a ring in k[x]
polys		dup_ff_lcm	f g K	computes polynomial lcm over a field in k[x]
polys		dup_lcm	f g K	computes polynomial lcm of f and g in k[x]
polys		dmp_rr_lcm	f g u K	computes polynomial lcm over a ring in k[x]
polys		dmp_ff_lcm	f g u K	computes polynomial lcm over a field in k[x]
polys		dmp_lcm	f g u K	computes polynomial lcm of f and g in k[x]
polys		dmp_content	f u K	returns gcd of multivariate coefficients
polys		dmp_primitive	f u K	returns multivariate content and a primitive polynomial
polys		dup_cancel	f g K include	cancel common factors in a rational function f/g
polys		dmp_cancel	f g u K	cancel common factors in a rational function f/g
polys		roots_linear	f	returns a list of roots of a linear polynomial
polys		roots_quadratic	f	returns a list of roots of a quadratic polynomial if the domain is zz
polys		roots_cubic	f trig	returns a list of roots of a cubic polynomial
polys		_roots_quartic_euler	p q r a	descartes-euler solution of the quartic equation parameters
polys		roots_quartic	f	returns a list of roots of a quartic polynomial
polys		roots_binomial	f	returns a list of roots of a binomial polynomial if the domain is zz
polys		_inv_totient_estimate	m	find l u such that l <= phi^-1 m <= u
polys		roots_cyclotomic	f factor	compute roots of cyclotomic polynomials
polys		roots_quintic	f	calulate exact roots of a solvable quintic
polys		_integer_basis	poly	compute coefficient basis for a polynomial over integers
polys		preprocess_roots	poly	try to get rid of symbolic coefficients from poly
polys		roots	f	computes symbolic roots of a univariate polynomial
polys		root_factors	f	returns all factors of a univariate polynomial
polys		rootof	f x index radicals	an indexed root of a univariate polynomial
polys	RootOf	__new__	cls f x index	construct a new crootof object for k-th root of f
polys	ComplexRootOf	__new__	cls f x index	construct an indexed complex root of a polynomial
polys	ComplexRootOf	_new	cls poly index	construct new crootof object from raw data
polys	ComplexRootOf	_eval_is_real		return true if the root is real
polys	ComplexRootOf	real_roots	cls poly radicals	get real roots of a polynomial
polys	ComplexRootOf	all_roots	cls poly radicals	get real and complex roots of a polynomial
polys	ComplexRootOf	_get_reals_sqf	cls factor	get real root isolating intervals for a square-free factor
polys	ComplexRootOf	_get_complexes_sqf	cls factor	get complex root isolating intervals for a square-free factor
polys	ComplexRootOf	_get_reals	cls factors	compute real root isolating intervals for a list of factors
polys	ComplexRootOf	_get_complexes	cls factors	compute complex root isolating intervals for a list of factors
polys	ComplexRootOf	_reals_sorted	cls reals	make real isolating intervals disjoint and sort roots
polys	ComplexRootOf	_refine_complexes	cls complexes	return complexes such that no bounding rectangles of non-conjugate
polys	ComplexRootOf	_complexes_sorted	cls complexes	make complex isolating intervals disjoint and sort roots
polys	ComplexRootOf	_reals_index	cls reals index	map initial real root index to an index in a factor where the root belongs
polys	ComplexRootOf	_complexes_index	cls complexes index	map initial complex root index to an index in a factor where the root belongs
polys	ComplexRootOf	_count_roots	cls roots	count the number of real or complex roots with multiplicities
polys	ComplexRootOf	_indexed_root	cls poly index	get a root of a composite polynomial by index
polys	ComplexRootOf	_real_roots	cls poly	get real roots of a composite polynomial
polys	ComplexRootOf	_all_roots	cls poly	get real and complex roots of a composite polynomial
polys	ComplexRootOf	_roots_trivial	cls poly radicals	compute roots in linear quadratic and binomial cases
polys	ComplexRootOf	_preprocess_roots	cls poly	take heroic measures to make poly compatible with crootof
polys	ComplexRootOf	_postprocess_root	cls root radicals	return the root if it is trivial or a crootof object
polys	ComplexRootOf	_get_roots	cls method poly radicals	return postprocessed roots of specified kind
polys	ComplexRootOf	_get_interval		internal function for retrieving isolation interval from cache
polys	ComplexRootOf	_set_interval	interval	internal function for updating isolation interval in cache
polys	ComplexRootOf	_eval_evalf	prec	evaluate this complex root to the given precision
polys	ComplexRootOf	eval_rational	tol	return a rational approximation to self with the tolerance tol
polys	RootSum	__new__	cls expr func x	construct a new rootsum instance of roots of a polynomial
polys	RootSum	_new	cls poly func auto	construct new raw rootsum instance
polys	RootSum	new	cls poly func auto	construct new rootsum instance
polys	RootSum	_transform	cls expr x	transform an expression to a polynomial
polys	RootSum	_is_func_rational	cls poly func	check if a lambda is areational function
polys	RootSum	_rational_case	cls poly func	handle the rational function case
polys		bisect	f a b tol	implements bisection this function is used in rootof eval_rational() and
polys		_invert_monoms	p1	compute x**n * p1(1/x) for a univariate polynomial p1 in x
polys		_giant_steps	target	return a list of precision steps for the newton's method
polys		rs_trunc	p1 x prec	truncate the series in the x variable with precision prec, that is modulo o(x**prec)
polys		rs_is_puiseux	p x	test if p is puiseux series in x
polys		rs_puiseux	f p x prec	return the puiseux series for f p x prec
polys		rs_puiseux2	f p q x	return the puiseux series for f p q x prec
polys		rs_mul	p1 p2 x prec	return the product of the given two series modulo o(x**prec)
polys		rs_square	p1 x prec	square the series modulo o(x**prec) examples
polys		rs_pow	p1 n x prec	return p1**n modulo o(x**prec) examples
polys		rs_subs	p rules x prec	substitution with truncation according to the mapping in rules
polys		_has_constant_term	p x	check if p has a constant term in x examples
polys		_get_constant_term	p x	return constant term in p with respect to x note that it is not simply p[r
polys		_series_inversion1	p x prec	univariate series inversion 1/p modulo o(x**prec)
polys		rs_series_inversion	p x prec	multivariate series inversion 1/p modulo o(x**prec)
polys		_coefficient_t	p t	coefficient of x\_i**j in p where t = i j
polys		rs_series_reversion	p x n y	reversion of a series
polys		rs_series_from_list	p c x prec	return a series sum c[n]*p**n modulo o(x**prec)
polys		rs_diff	p x	return partial derivative of p with respect to x
polys		rs_integrate	p x	integrate p with respect to x
polys		rs_fun	p f	function of a multivariate series computed by substitution
polys		pow_xin	p i n	>>> from sympy polys domains import qq
polys		_nth_root1	p n x prec	univariate series expansion of the nth root of p
polys		rs_nth_root	p n x prec	multivariate series expansion of the nth root of p
polys		rs_log	p x prec	the logarithm of p modulo o(x**prec)
polys		rs_LambertW	p x prec	calculate the series expansion of the principal branch of the lambert w function
polys		_exp1	p x prec	helper function for rs\_exp
polys		rs_exp	p x prec	exponentiation of a series modulo o(x**prec) examples
polys		_atan	p iv prec	expansion using formula
polys		rs_atan	p x prec	the arctangent of a series return the series expansion of the atan of p, about 0
polys		rs_asin	p x prec	arcsine of a series return the series expansion of the asin of p, about 0
polys		_tan1	p x prec	helper function of rs\_tan
polys		rs_tan	p x prec	tangent of a series
polys		rs_cot	p x prec	cotangent of a series return the series expansion of the cot of p, about 0
polys		rs_sin	p x prec	sine of a series return the series expansion of the sin of p, about 0
polys		rs_cos	p x prec	cosine of a series return the series expansion of the cos of p, about 0
polys		rs_cos_sin	p x prec	return the tuple (rs\_cos p x prec , rs\_sin p x prec )
polys		_atanh	p x prec	expansion using formula
polys		rs_atanh	p x prec	hyperbolic arctangent of a series return the series expansion of the atanh of p, about 0
polys		rs_sinh	p x prec	hyperbolic sine of a series return the series expansion of the sinh of p, about 0
polys		rs_cosh	p x prec	hyperbolic cosine of a series return the series expansion of the cosh of p, about 0
polys		_tanh	p x prec	helper function of rs\_tanh return the series expansion of tanh of a univariate series using newton's
polys		rs_tanh	p x prec	hyperbolic tangent of a series return the series expansion of the tanh of p, about 0
polys		rs_newton	p x prec	compute the truncated newton sum of the polynomial p examples
polys		rs_hadamard_exp	p1 inverse	return sum f_i/i!*x**i from sum f_i*x**i, where x is the first variable
polys		rs_compose_add	p1 p2	compute the composed sum prod(p2 x - beta for beta root of p1) examples
polys		rs_min_pow	expr series_rs a	find the minimum power of a in the series expansion of expr
polys		rs_series	expr a prec	return the series expansion of an expression about 0
polys		matrix_fglm	F ring O_to	converts the reduced groebner basis f of a zero-dimensional ideal w
polys		_update	s _lambda P	update p such that for the updated p' p' v = e_{s}
polys		_representing_matrices	basis G ring	compute the matrices corresponding to the linear maps m \mapsto x_i m for all variables x_i
polys		_basis	G ring	computes a list of monomials which are not divisible by the leading monomials wrt to o of g
polys		dup_sturm	f K	computes the sturm sequence of f in f[x]
polys		dup_root_upper_bound	f K	compute the lmq upper bound for the positive roots of f; lmq local max quadratic was developed by akritas-strzebonski-vigklas
polys		dup_root_lower_bound	f K	compute the lmq lower bound for the positive roots of f; lmq local max quadratic was developed by akritas-strzebonski-vigklas
polys		_mobius_from_interval	I field	convert an open interval to a mobius transform
polys		_mobius_to_interval	M field	convert a mobius transform to an open interval
polys		dup_step_refine_real_root	f M K fast	one step of positive real root refinement algorithm
polys		dup_inner_refine_real_root	f M K eps	refine a positive root of f given a mobius transform or an interval
polys		dup_outer_refine_real_root	f s t K	refine a positive root of f given an interval s t
polys		dup_refine_real_root	f s t K	refine real root's approximating interval to the given precision
polys		dup_inner_isolate_real_roots	f K eps fast	internal function for isolation positive roots up to given precision
polys		_discard_if_outside_interval	f M inf sup	discard an isolating interval if outside inf sup
polys		dup_inner_isolate_positive_roots	f K eps inf	iteratively compute disjoint positive root isolation intervals
polys		dup_inner_isolate_negative_roots	f K inf sup	iteratively compute disjoint negative root isolation intervals
polys		_isolate_zero	f K inf sup	handle special case of cf algorithm when f is homogeneous
polys		dup_isolate_real_roots_sqf	f K eps inf	isolate real roots of a square-free polynomial using the vincent-akritas-strzebonski vas cf approach
polys		dup_isolate_real_roots	f K eps inf	isolate real roots using vincent-akritas-strzebonski vas continued fractions approach
polys		dup_isolate_real_roots_list	polys K eps inf	isolate real roots of a list of square-free polynomial using vincent-akritas-strzebonski vas cf approach
polys		_disjoint_p	M N strict	check if mobius transforms define disjoint intervals
polys		_real_isolate_and_disjoin	factors K eps inf	isolate real roots of a list of polynomials and disjoin intervals
polys		dup_count_real_roots	f K inf sup	returns the number of distinct real roots of f in [inf sup]
polys		_classify_point	re im	return the half-axis or origin on which re im point is located
polys		_intervals_to_quadrants	intervals f1 f2 s	generate a sequence of extended quadrants from a list of critical points
polys		_traverse_quadrants	Q_L1 Q_L2 Q_L3 Q_L4	transform sequences of quadrants to a sequence of rules
polys		_reverse_intervals	intervals	reverse intervals for traversal from right to left and from top to bottom
polys		_winding_number	T field	compute the winding number of the input polynomial i e the number of roots
polys		dup_count_complex_roots	f K inf sup	count all roots in [u + v*i s + t*i] rectangle using collins-krandick algorithm
polys		_vertical_bisection	N a b I	vertical bisection step in collins-krandick root isolation algorithm
polys		_horizontal_bisection	N a b I	horizontal bisection step in collins-krandick root isolation algorithm
polys		_depth_first_select	rectangles	find a rectangle of minimum area for bisection
polys		_rectangle_small_p	a b eps	return true if the given rectangle is small enough
polys		dup_isolate_complex_roots_sqf	f K eps inf	isolate complex roots of a square-free polynomial using collins-krandick algorithm
polys		dup_isolate_all_roots_sqf	f K eps inf	isolate real and complex roots of a square-free polynomial f
polys		dup_isolate_all_roots	f K eps inf	isolate real and complex roots of a non-square-free polynomial f
polys	RealInterval	__init__	data f dom	initialize new real interval with complete information
polys	RealInterval	a		return the position of the left end
polys	RealInterval	b		return the position of the right end
polys	RealInterval	dx		return width of the real isolating interval
polys	RealInterval	center		return the center of the real isolating interval
polys	RealInterval	as_tuple		return tuple representation of real isolating interval
polys	RealInterval	is_disjoint	other	return true if two isolation intervals are disjoint
polys	RealInterval	_inner_refine		internal one step real root refinement procedure
polys	RealInterval	refine_disjoint	other	refine an isolating interval until it is disjoint with another one
polys	RealInterval	refine_size	dx	refine an isolating interval until it is of sufficiently small size
polys	RealInterval	refine_step	steps	perform several steps of real root refinement algorithm
polys	RealInterval	refine		perform one step of real root refinement algorithm
polys	ComplexInterval	__init__	a b I Q	initialize new complex interval with complete information
polys	ComplexInterval	ax		return x coordinate of south-western corner
polys	ComplexInterval	ay		return y coordinate of south-western corner
polys	ComplexInterval	bx		return x coordinate of north-eastern corner
polys	ComplexInterval	by		return y coordinate of north-eastern corner
polys	ComplexInterval	dx		return width of the complex isolating interval
polys	ComplexInterval	dy		return height of the complex isolating interval
polys	ComplexInterval	center		return the center of the complex isolating interval
polys	ComplexInterval	as_tuple		return tuple representation of complex isolating interval
polys	ComplexInterval	conjugate		this complex interval really is located in lower half-plane
polys	ComplexInterval	is_disjoint	other	return true if two isolation intervals are disjoint
polys	ComplexInterval	_inner_refine		internal one step complex root refinement procedure
polys	ComplexInterval	refine_disjoint	other	refine an isolating interval until it is disjoint with another one
polys	ComplexInterval	refine_size	dx dy	refine an isolating interval until it is of sufficiently small size
polys	ComplexInterval	refine_step	steps	perform several steps of complex root refinement algorithm
polys	ComplexInterval	refine		perform one step of complex root refinement algorithm
polys		apart	f x full	compute partial fraction decomposition of a rational function
polys		apart_undetermined_coeffs	P Q	partial fractions via method of undetermined coefficients
polys		apart_full_decomposition	P Q	bronstein's full partial fraction decomposition algorithm
polys		apart_list	f x dummies	compute partial fraction decomposition of a rational function and return the result in structured form
polys		apart_list_full_decomposition	P Q dummygen	bronstein's full partial fraction decomposition algorithm
polys		assemble_partfrac_list	partial_list	reassemble a full partial fraction decomposition from a structured result obtained by the function apart_list
polys		heugcd	f g	heuristic polynomial gcd in z[x]
polys		_gcd_interpolate	h x ring	interpolate polynomial gcd from integer gcd
polys		gf_crt	U M K	chinese remainder theorem
polys		gf_crt1	M K	first part of the chinese remainder theorem
polys		gf_crt2	U M p E	second part of the chinese remainder theorem
polys		gf_int	a p	coerce a mod p to an integer in the range [-p/2 p/2]
polys		gf_degree	f	return the leading degree of f
polys		gf_LC	f K	return the leading coefficient of f
polys		gf_TC	f K	return the trailing coefficient of f
polys		gf_strip	f	remove leading zeros from f
polys		gf_trunc	f p	reduce all coefficients modulo p
polys		gf_normal	f p K	normalize all coefficients in k
polys		gf_from_dict	f p K	create a gf p [x] polynomial from a dict
polys		gf_to_dict	f p symmetric	convert a gf p [x] polynomial to a dict
polys		gf_from_int_poly	f p	create a gf p [x] polynomial from z[x]
polys		gf_to_int_poly	f p symmetric	convert a gf p [x] polynomial to z[x]
polys		gf_neg	f p K	negate a polynomial in gf p [x]
polys		gf_add_ground	f a p K	compute f + a where f in gf p [x] and a in gf p
polys		gf_sub_ground	f a p K	compute f - a where f in gf p [x] and a in gf p
polys		gf_mul_ground	f a p K	compute f * a where f in gf p [x] and a in gf p
polys		gf_quo_ground	f a p K	compute f/a where f in gf p [x] and a in gf p
polys		gf_add	f g p K	add polynomials in gf p [x]
polys		gf_sub	f g p K	subtract polynomials in gf p [x]
polys		gf_mul	f g p K	multiply polynomials in gf p [x]
polys		gf_sqr	f p K	square polynomials in gf p [x]
polys		gf_add_mul	f g h p	returns f + g*h where f, g, h in gf p [x]
polys		gf_sub_mul	f g h p	compute f - g*h where f, g, h in gf p [x]
polys		gf_expand	F p K	expand results of :func factor in gf p [x]
polys		gf_div	f g p K	division with remainder in gf p [x]
polys		gf_rem	f g p K	compute polynomial remainder in gf p [x]
polys		gf_quo	f g p K	compute exact quotient in gf p [x]
polys		gf_exquo	f g p K	compute polynomial quotient in gf p [x]
polys		gf_lshift	f n K	efficiently multiply f by x**n
polys		gf_rshift	f n K	efficiently divide f by x**n
polys		gf_pow	f n p K	compute f**n in gf p [x] using repeated squaring
polys		gf_frobenius_monomial_base	g p K	return the list of x**(i*p) mod g in z_p for i = 0 n - 1
polys		gf_frobenius_map	f g b p	compute gf_pow_mod f p g p k using the frobenius map parameters
polys		_gf_pow_pnm1d2	f n g b	utility function for gf_edf_zassenhaus compute f**((p**n - 1) // 2) in gf p [x]/ g
polys		gf_pow_mod	f n g p	compute f**n in gf p [x]/ g using repeated squaring
polys		gf_gcd	f g p K	euclidean algorithm in gf p [x]
polys		gf_lcm	f g p K	compute polynomial lcm in gf p [x]
polys		gf_cofactors	f g p K	compute polynomial gcd and cofactors in gf p [x]
polys		gf_gcdex	f g p K	extended euclidean algorithm in gf p [x]
polys		gf_monic	f p K	compute lc and a monic polynomial in gf p [x]
polys		gf_diff	f p K	differentiate polynomial in gf p [x]
polys		gf_eval	f a p K	evaluate f a in gf p using horner scheme
polys		gf_multi_eval	f A p K	evaluate f a for a in [a_1 a_n]
polys		gf_compose	f g p K	compute polynomial composition f g in gf p [x]
polys		gf_compose_mod	g h f p	compute polynomial composition g h in gf p [x]/ f
polys		gf_trace_map	a b c n	compute polynomial trace map in gf p [x]/ f
polys		_gf_trace_map	f n g b	utility for gf_edf_shoup
polys		gf_random	n p K	generate a random polynomial in gf p [x] of degree n
polys		gf_irreducible	n p K	generate random irreducible polynomial of degree n in gf p [x]
polys		gf_irred_p_ben_or	f p K	ben-or's polynomial irreducibility test over finite fields
polys		gf_irred_p_rabin	f p K	rabin's polynomial irreducibility test over finite fields
polys		gf_irreducible_p	f p K	test irreducibility of a polynomial f in gf p [x]
polys		gf_sqf_p	f p K	return true if f is square-free in gf p [x]
polys		gf_sqf_part	f p K	return square-free part of a gf p [x] polynomial
polys		gf_sqf_list	f p K all	return the square-free decomposition of a gf p [x] polynomial
polys		gf_Qmatrix	f p K	calculate berlekamp's q matrix
polys		gf_Qbasis	Q p K	compute a basis of the kernel of q
polys		gf_berlekamp	f p K	factor a square-free f in gf p [x] for small p
polys		gf_ddf_zassenhaus	f p K	cantor-zassenhaus deterministic distinct degree factorization given a monic square-free polynomial f in gf p [x], computes
polys		gf_edf_zassenhaus	f n p K	cantor-zassenhaus probabilistic equal degree factorization given a monic square-free polynomial f in gf p [x] and
polys		gf_ddf_shoup	f p K	kaltofen-shoup deterministic distinct degree factorization given a monic square-free polynomial f in gf p [x], computes
polys		gf_edf_shoup	f n p K	gathen-shoup probabilistic equal degree factorization given a monic square-free polynomial f in gf p [x] and integer
polys		gf_zassenhaus	f p K	factor a square-free f in gf p [x] for medium p
polys		gf_shoup	f p K	factor a square-free f in gf p [x] for large p
polys		gf_factor_sqf	f p K method	factor a square-free polynomial f in gf p [x]
polys		gf_factor	f p K	factor non square-free polynomials in gf p [x]
polys		gf_value	f a	value of polynomial 'f' at 'a' in field r
polys		linear_congruence	a b m	returns the values of x satisfying a*x congruent b mod m here m is positive integer and a b are natural numbers
polys		_raise_mod_power	x s p f	used in gf_csolve to generate solutions of f x cong 0 mod(p** s + 1 from the solutions of f x cong 0 mod(p**s)
polys		csolve_prime	f p e	solutions of f x congruent 0 mod(p**e)
polys		gf_csolve	f n	to solve f x congruent 0 mod n
polys		monomial_key	order gens	return a function defining admissible order on monomials
polys		build_product_order	arg gens	build a monomial order on gens
polys		swinnerton_dyer_poly	n x	generates n-th swinnerton-dyer polynomial in x
polys		cyclotomic_poly	n x	generates cyclotomic polynomial of order n in x
polys		symmetric_poly	n	generates symmetric polynomial of order n
polys		random_poly	x n inf sup	return a polynomial of degree n with coefficients in [inf sup]
polys		interpolating_poly	n x X Y	construct lagrange interpolating polynomial for n data points
polys		fateman_poly_F_1	n	fateman's gcd benchmark trivial gcd
polys		dmp_fateman_poly_F_1	n K	fateman's gcd benchmark trivial gcd
polys		fateman_poly_F_2	n	fateman's gcd benchmark linearly dense quartic inputs
polys		dmp_fateman_poly_F_2	n K	fateman's gcd benchmark linearly dense quartic inputs
polys		fateman_poly_F_3	n	fateman's gcd benchmark sparse inputs (deg f ~ vars f)
polys		dmp_fateman_poly_F_3	n K	fateman's gcd benchmark sparse inputs (deg f ~ vars f)
polys		eqs_to_matrix	eqs ring	transform from equations to matrix form
polys		solve_lin_sys	eqs ring _raw	solve a system of linear equations
polys		sdm_monomial_mul	M X	multiply tuple x representing a monomial of k[x] into the tuple m representing a monomial of f
polys		sdm_monomial_deg	M	return the total degree of m
polys		sdm_monomial_lcm	A B	return the "least common multiple" of a and b
polys		sdm_monomial_divides	A B	does there exist a polynomial monomial x such that xa = b? examples
polys		sdm_LC	f K	returns the leading coeffcient of f
polys		sdm_to_dict	f	make a dictionary from a distributed polynomial
polys		sdm_from_dict	d O	create an sdm from a dictionary
polys		sdm_sort	f O	sort terms in f using the given monomial order o
polys		sdm_strip	f	remove terms with zero coefficients from f in k[x]
polys		sdm_add	f g O K	add two module elements f, g
polys		sdm_LM	f	returns the leading monomial of f
polys		sdm_LT	f	returns the leading term of f
polys		sdm_mul_term	f term O K	multiply a distributed module element f by a polynomial term term
polys		sdm_zero		return the zero module element
polys		sdm_deg	f	degree of f
polys		sdm_from_vector	vec O K	create an sdm from an iterable of expressions
polys		sdm_to_vector	f gens K n	convert sdm f into a list of polynomial expressions
polys		sdm_spoly	f g O K	compute the generalized s-polynomial of f and g
polys		sdm_ecart	f	compute the ecart of f
polys		sdm_nf_mora	f G O K	compute a weak normal form of f with respect to g and order o
polys		sdm_nf_buchberger	f G O K	compute a weak normal form of f with respect to g and order o
polys		sdm_nf_buchberger_reduced	f G O K	compute a reduced normal form of f with respect to g and order o
polys		sdm_groebner	G NF O K	compute a minimal standard basis of g with respect to order o
polys		setup	key value	assign a value to or reset a configuration item
polys		query	key	ask for a value of the given configuration item
polys		configure		initialized configuration of polys module
polys		_nsort	roots separated	sort the numerical roots putting the real roots first then sorting according to real and imaginary parts
polys		_sort_gens	gens	sort generators in a reasonably intelligent way
polys		_unify_gens	f_gens g_gens	unify generators in a reasonably intelligent way
polys		_analyze_gens	gens	support for passing generators as *gens and [gens]
polys		_sort_factors	factors	sort low-level factors in increasing 'complexity' order
polys		_not_a_coeff	expr	do not treat nan and infinities as valid polynomial coefficients
polys		_parallel_dict_from_expr_if_gens	exprs opt	transform expressions into a multinomial form given generators
polys		_parallel_dict_from_expr_no_gens	exprs opt	transform expressions into a multinomial form and figure out generators
polys		_dict_from_expr_if_gens	expr opt	transform an expression into a multinomial form given generators
polys		_dict_from_expr_no_gens	expr opt	transform an expression into a multinomial form and figure out generators
polys		parallel_dict_from_expr	exprs	transform expressions into a multinomial form
polys		_parallel_dict_from_expr	exprs opt	transform expressions into a multinomial form
polys		dict_from_expr	expr	transform an expression into a multinomial form
polys		_dict_from_expr	expr opt	transform an expression into a multinomial form
polys		expr_from_dict	rep	convert a multinomial form into an expression
polys		_dict_reorder	rep gens new_gens	reorder levels using dict representation
polys		groebner	seq ring method	computes groebner basis for a set of polynomials in k[x]
polys		_buchberger	f ring	computes groebner basis for a set of polynomials in k[x]
polys		spoly	p1 p2 ring	compute lcm(lm p1 lm p2 )/lm p1 *p1 - lcm(lm p1 lm p2 )/lm p2 *p2
polys		sig_cmp	u v order	compare two signatures by extending the term order to k[x]^n
polys		sig_key	s order	key for comparing two signatures
polys		sig_mult	s m	multiply a signature by a monomial
polys		lbp_sub	f g	subtract labeled polynomial g from f
polys		lbp_mul_term	f cx	multiply a labeled polynomial with a term
polys		lbp_cmp	f g	compare two labeled polynomials
polys		lbp_key	f	key for comparing two labeled polynomials
polys		critical_pair	f g ring	compute the critical pair corresponding to two labeled polynomials
polys		cp_cmp	c d	compare two critical pairs c and d
polys		cp_key	c ring	key for comparing critical pairs
polys		s_poly	cp	compute the s-polynomial of a critical pair
polys		is_rewritable_or_comparable	sign num B	check if a labeled polynomial is redundant by checking if its signature and number imply rewritability or comparability
polys		f5_reduce	f B	f5-reduce a labeled polynomial f by b
polys		_f5b	F ring	computes a reduced groebner basis for the ideal generated by f
polys		red_groebner	G ring	compute reduced groebner basis from beckerweispfenning93 p 216
polys		is_groebner	G ring	check if g is a groebner basis
polys		is_minimal	G ring	checks if g is a minimal groebner basis
polys		is_reduced	G ring	checks if g is a reduced groebner basis
polys		groebner_lcm	f g	computes lcm of two polynomials using groebner bases
polys		groebner_gcd	f g	computes gcd of two polynomials using groebner bases
polys		field	symbols domain order	construct new rational function field returning (field x1 xn)
polys		xfield	symbols domain order	construct new rational function field returning (field (x1 xn))
polys		vfield	symbols domain order	construct new rational function field and inject generators into global namespace
polys		sfield	exprs	construct a field deriving generators and domain from options and input expressions
polys	FracField	_gens		return a list of polynomial generators
polys	FracElement	__pos__	f	negate all coefficients in f
polys	FracElement	__neg__	f	negate all coefficients in f
polys	FracElement	__add__	f g	add rational functions f and g
polys	FracElement	__sub__	f g	subtract rational functions f and g
polys	FracElement	__mul__	f g	multiply rational functions f and g
polys	FracElement	__truediv__	f g	computes quotient of fractions f and g
polys	FracElement	__pow__	f n	raise f to a non-negative power n
polys	FracElement	diff	f x	computes partial derivative in x
polys		dup_jacobi	n a b K	low-level implementation of jacobi polynomials
polys		jacobi_poly	n a b x	generates jacobi polynomial of degree n in x
polys		dup_gegenbauer	n a K	low-level implementation of gegenbauer polynomials
polys		gegenbauer_poly	n a x	generates gegenbauer polynomial of degree n in x
polys		dup_chebyshevt	n K	low-level implementation of chebyshev polynomials of the 1st kind
polys		chebyshevt_poly	n x	generates chebyshev polynomial of the first kind of degree n in x
polys		dup_chebyshevu	n K	low-level implementation of chebyshev polynomials of the 2nd kind
polys		chebyshevu_poly	n x	generates chebyshev polynomial of the second kind of degree n in x
polys		dup_hermite	n K	low-level implementation of hermite polynomials
polys		hermite_poly	n x	generates hermite polynomial of degree n in x
polys		dup_legendre	n K	low-level implementation of legendre polynomials
polys		legendre_poly	n x	generates legendre polynomial of degree n in x
polys		dup_laguerre	n alpha K	low-level implementation of laguerre polynomials
polys		laguerre_poly	n x alpha	generates laguerre polynomial of degree n in x
polys		dup_spherical_bessel_fn	n K	low-level implementation of fn n x
polys		dup_spherical_bessel_fn_minus	n K	low-level implementation of fn -n x
polys		spherical_bessel_fn	n x	coefficients for the spherical bessel functions
polys.domains	Field	get_ring		returns a ring associated with self
polys.domains	Field	get_field		returns a field associated with self
polys.domains	Field	exquo	a b	exact quotient of a and b, implies __div__
polys.domains	Field	quo	a b	quotient of a and b, implies __div__
polys.domains	Field	rem	a b	remainder of a and b, implies nothing
polys.domains	Field	div	a b	division of a and b, implies __div__
polys.domains	Field	gcd	a b	returns gcd of a and b
polys.domains	Field	lcm	a b	returns lcm of a and b
polys.domains	Field	revert	a	returns a** -1 if possible
polys.domains	Domain	__call__		construct an element of self domain from args
polys.domains	Domain	convert_from	element base	convert element to self dtype given the base domain
polys.domains	Domain	convert	element base	convert element to self dtype
polys.domains	Domain	of_type	element	check if a is of type dtype
polys.domains	Domain	__contains__	a	check if a belongs to this domain
polys.domains	Domain	to_sympy	a	convert a to a sympy object
polys.domains	Domain	from_sympy	a	convert a sympy object to dtype
polys.domains	Domain	from_FF_python	K1 a K0	convert modularinteger int to dtype
polys.domains	Domain	from_ZZ_python	K1 a K0	convert a python int object to dtype
polys.domains	Domain	from_QQ_python	K1 a K0	convert a python fraction object to dtype
polys.domains	Domain	from_FF_gmpy	K1 a K0	convert modularinteger mpz to dtype
polys.domains	Domain	from_ZZ_gmpy	K1 a K0	convert a gmpy mpz object to dtype
polys.domains	Domain	from_QQ_gmpy	K1 a K0	convert a gmpy mpq object to dtype
polys.domains	Domain	from_RealField	K1 a K0	convert a real element object to dtype
polys.domains	Domain	from_ComplexField	K1 a K0	convert a complex element to dtype
polys.domains	Domain	from_AlgebraicField	K1 a K0	convert an algebraic number to dtype
polys.domains	Domain	from_PolynomialRing	K1 a K0	convert a polynomial to dtype
polys.domains	Domain	from_FractionField	K1 a K0	convert a rational function to dtype
polys.domains	Domain	from_ExpressionDomain	K1 a K0	convert a ex object to dtype
polys.domains	Domain	from_GlobalPolynomialRing	K1 a K0	convert a polynomial to dtype
polys.domains	Domain	unify	K0 K1 symbols	construct a minimal domain that contains elements of k0 and k1
polys.domains	Domain	__eq__	other	returns true if two domains are equivalent
polys.domains	Domain	__ne__	other	returns false if two domains are equivalent
polys.domains	Domain	map	seq	rersively apply self to all elements of seq
polys.domains	Domain	get_ring		returns a ring associated with self
polys.domains	Domain	get_field		returns a field associated with self
polys.domains	Domain	get_exact		returns an exact domain associated with self
polys.domains	Domain	__getitem__	symbols	the mathematical way to make a polynomial ring
polys.domains	Domain	poly_ring		returns a polynomial ring i e k[x]
polys.domains	Domain	frac_field		returns a fraction field i e k x
polys.domains	Domain	old_poly_ring		returns a polynomial ring i e k[x]
polys.domains	Domain	old_frac_field		returns a fraction field i e k x
polys.domains	Domain	algebraic_field		returns an algebraic field i e k(\alpha \ldots)
polys.domains	Domain	inject		inject generators into this domain
polys.domains	Domain	is_zero	a	returns true if a is zero
polys.domains	Domain	is_one	a	returns true if a is one
polys.domains	Domain	is_positive	a	returns true if a is positive
polys.domains	Domain	is_negative	a	returns true if a is negative
polys.domains	Domain	is_nonpositive	a	returns true if a is non-positive
polys.domains	Domain	is_nonnegative	a	returns true if a is non-negative
polys.domains	Domain	abs	a	absolute value of a, implies __abs__
polys.domains	Domain	neg	a	returns a negated implies __neg__
polys.domains	Domain	pos	a	returns a positive implies __pos__
polys.domains	Domain	add	a b	sum of a and b, implies __add__
polys.domains	Domain	sub	a b	difference of a and b, implies __sub__
polys.domains	Domain	mul	a b	product of a and b, implies __mul__
polys.domains	Domain	pow	a b	raise a to power b, implies __pow__
polys.domains	Domain	exquo	a b	exact quotient of a and b, implies something
polys.domains	Domain	quo	a b	quotient of a and b, implies something
polys.domains	Domain	rem	a b	remainder of a and b, implies __mod__
polys.domains	Domain	div	a b	division of a and b, implies something
polys.domains	Domain	invert	a b	returns inversion of a mod b, implies something
polys.domains	Domain	revert	a	returns a** -1 if possible
polys.domains	Domain	numer	a	returns numerator of a
polys.domains	Domain	denom	a	returns denominator of a
polys.domains	Domain	half_gcdex	a b	half extended gcd of a and b
polys.domains	Domain	gcdex	a b	extended gcd of a and b
polys.domains	Domain	cofactors	a b	returns gcd and cofactors of a and b
polys.domains	Domain	gcd	a b	returns gcd of a and b
polys.domains	Domain	lcm	a b	returns lcm of a and b
polys.domains	Domain	log	a b	returns b-base logarithm of a
polys.domains	Domain	sqrt	a	returns square root of a
polys.domains	Domain	evalf	a prec	returns numerical approximation of a
polys.domains	Domain	almosteq	a b tolerance	check if a and b are almost equal
polys.domains	Domain	characteristic		return the characteristic of this domain
polys.domains	GMPYRationalField	get_ring		returns ring associated with self
polys.domains	GMPYRationalField	to_sympy	a	convert a to a sympy object
polys.domains	GMPYRationalField	from_sympy	a	convert sympy's integer to dtype
polys.domains	GMPYRationalField	from_ZZ_python	K1 a K0	convert a python int object to dtype
polys.domains	GMPYRationalField	from_QQ_python	K1 a K0	convert a python fraction object to dtype
polys.domains	GMPYRationalField	from_ZZ_gmpy	K1 a K0	convert a gmpy mpz object to dtype
polys.domains	GMPYRationalField	from_QQ_gmpy	K1 a K0	convert a gmpy mpq object to dtype
polys.domains	GMPYRationalField	from_RealField	K1 a K0	convert a mpmath mpf object to dtype
polys.domains	GMPYRationalField	exquo	a b	exact quotient of a and b, implies __div__
polys.domains	GMPYRationalField	quo	a b	quotient of a and b, implies __div__
polys.domains	GMPYRationalField	rem	a b	remainder of a and b, implies nothing
polys.domains	GMPYRationalField	div	a b	division of a and b, implies __div__
polys.domains	GMPYRationalField	numer	a	returns numerator of a
polys.domains	GMPYRationalField	denom	a	returns denominator of a
polys.domains	GMPYRationalField	factorial	a	returns factorial of a
polys.domains	SimpleDomain	inject		inject generators into this domain
polys.domains	QuotientRing	new	a	construct an element of self domain from a
polys.domains	QuotientRing	__eq__	other	returns true if two domains are equivalent
polys.domains	QuotientRing	from_ZZ_python	K1 a K0	convert a python int object to dtype
polys.domains	QuotientRing	poly_ring		returns a polynomial ring i e k[x]
polys.domains	QuotientRing	frac_field		returns a fraction field i e k x
polys.domains	QuotientRing	revert	a	compute a** -1 if possible
polys.domains	QuotientRing	free_module	rank	generate a free module of rank rank over self
polys.domains	FractionField	__eq__	other	returns true if two domains are equivalent
polys.domains	FractionField	to_sympy	a	convert a to a sympy object
polys.domains	FractionField	from_sympy	a	convert sympy's expression to dtype
polys.domains	FractionField	from_ZZ_python	K1 a K0	convert a python int object to dtype
polys.domains	FractionField	from_QQ_python	K1 a K0	convert a python fraction object to dtype
polys.domains	FractionField	from_ZZ_gmpy	K1 a K0	convert a gmpy mpz object to dtype
polys.domains	FractionField	from_QQ_gmpy	K1 a K0	convert a gmpy mpq object to dtype
polys.domains	FractionField	from_RealField	K1 a K0	convert a mpmath mpf object to dtype
polys.domains	FractionField	from_AlgebraicField	K1 a K0	convert an algebraic number to dtype
polys.domains	FractionField	from_PolynomialRing	K1 a K0	convert a polynomial to dtype
polys.domains	FractionField	from_FractionField	K1 a K0	convert a rational function to dtype
polys.domains	FractionField	get_ring		returns a field associated with self
polys.domains	FractionField	is_positive	a	returns true if lc a is positive
polys.domains	FractionField	is_negative	a	returns true if lc a is negative
polys.domains	FractionField	is_nonpositive	a	returns true if lc a is non-positive
polys.domains	FractionField	is_nonnegative	a	returns true if lc a is non-negative
polys.domains	FractionField	numer	a	returns numerator of a
polys.domains	FractionField	denom	a	returns denominator of a
polys.domains	FractionField	factorial	a	returns factorial of a
polys.domains	ComplexField	to_sympy	element	convert element to sympy number
polys.domains	ComplexField	from_sympy	expr	convert sympy's number to dtype
polys.domains	ComplexField	get_ring		returns a ring associated with self
polys.domains	ComplexField	get_exact		returns an exact domain associated with self
polys.domains	ComplexField	gcd	a b	returns gcd of a and b
polys.domains	ComplexField	lcm	a b	returns lcm of a and b
polys.domains	ComplexField	almosteq	a b tolerance	check if a and b are almost equal
polys.domains	CharacteristicZero	characteristic		return the characteristic of this domain
polys.domains	RationalField	algebraic_field		returns an algebraic field i e \mathbb{q}(\alpha \ldots)
polys.domains	RationalField	from_AlgebraicField	K1 a K0	convert a anp object to dtype
polys.domains	CompositeDomain	inject		inject generators into this domain
polys.domains	IntegerRing	get_field		returns a field associated with self
polys.domains	IntegerRing	algebraic_field		returns an algebraic field i e \mathbb{q}(\alpha \ldots)
polys.domains	IntegerRing	from_AlgebraicField	K1 a K0	convert a anp object to dtype
polys.domains	IntegerRing	log	a b	returns b-base logarithm of a
polys.domains	PolynomialRingBase	__eq__	other	returns true if two domains are equivalent
polys.domains	PolynomialRingBase	from_ZZ_python	K1 a K0	convert a python int object to dtype
polys.domains	PolynomialRingBase	from_QQ_python	K1 a K0	convert a python fraction object to dtype
polys.domains	PolynomialRingBase	from_ZZ_gmpy	K1 a K0	convert a gmpy mpz object to dtype
polys.domains	PolynomialRingBase	from_QQ_gmpy	K1 a K0	convert a gmpy mpq object to dtype
polys.domains	PolynomialRingBase	from_RealField	K1 a K0	convert a mpmath mpf object to dtype
polys.domains	PolynomialRingBase	from_AlgebraicField	K1 a K0	convert a anp object to dtype
polys.domains	PolynomialRingBase	from_GlobalPolynomialRing	K1 a K0	convert a dmp object to dtype
polys.domains	PolynomialRingBase	get_field		returns a field associated with self
polys.domains	PolynomialRingBase	poly_ring		returns a polynomial ring i e k[x]
polys.domains	PolynomialRingBase	frac_field		returns a fraction field i e k x
polys.domains	PolynomialRingBase	gcdex	a b	extended gcd of a and b
polys.domains	PolynomialRingBase	gcd	a b	returns gcd of a and b
polys.domains	PolynomialRingBase	lcm	a b	returns lcm of a and b
polys.domains	PolynomialRingBase	factorial	a	returns factorial of a
polys.domains	PolynomialRingBase	_vector_to_sdm	v order	for internal use by the modules class
polys.domains	PolynomialRingBase	_sdm_to_dics	s n	helper for _sdm_to_vector
polys.domains	PolynomialRingBase	_sdm_to_vector	s n	for internal use by the modules class
polys.domains	PolynomialRingBase	free_module	rank	generate a free module of rank rank over self
polys.domains		_vector_to_sdm_helper	v order	helper method for common code in global and local poly rings
polys.domains	GlobalPolynomialRing	from_FractionField	K1 a K0	convert a dmf object to dmp
polys.domains	GlobalPolynomialRing	to_sympy	a	convert a to a sympy object
polys.domains	GlobalPolynomialRing	from_sympy	a	convert sympy's expression to dtype
polys.domains	GlobalPolynomialRing	is_positive	a	returns true if lc a is positive
polys.domains	GlobalPolynomialRing	is_negative	a	returns true if lc a is negative
polys.domains	GlobalPolynomialRing	is_nonpositive	a	returns true if lc a is non-positive
polys.domains	GlobalPolynomialRing	is_nonnegative	a	returns true if lc a is non-negative
polys.domains	GlobalPolynomialRing	_vector_to_sdm	v order	>>> from sympy import lex qq >>> from sympy
polys.domains	GeneralizedPolynomialRing	new	a	construct an element of self domain from a
polys.domains	GeneralizedPolynomialRing	to_sympy	a	convert a to a sympy object
polys.domains	GeneralizedPolynomialRing	from_sympy	a	convert sympy's expression to dtype
polys.domains	GeneralizedPolynomialRing	_vector_to_sdm	v order	turn an iterable into a sparse distributed module
polys.domains		PolynomialRing	dom	create a generalized multivariate polynomial ring
polys.domains	PythonRationalField	get_ring		returns ring associated with self
polys.domains	PythonRationalField	to_sympy	a	convert a to a sympy object
polys.domains	PythonRationalField	from_sympy	a	convert sympy's rational to dtype
polys.domains	PythonRationalField	from_ZZ_python	K1 a K0	convert a python int object to dtype
polys.domains	PythonRationalField	from_QQ_python	K1 a K0	convert a python fraction object to dtype
polys.domains	PythonRationalField	from_ZZ_gmpy	K1 a K0	convert a gmpy mpz object to dtype
polys.domains	PythonRationalField	from_QQ_gmpy	K1 a K0	convert a gmpy mpq object to dtype
polys.domains	PythonRationalField	from_RealField	K1 a K0	convert a mpmath mpf object to dtype
polys.domains	PythonRationalField	numer	a	returns numerator of a
polys.domains	PythonRationalField	denom	a	returns denominator of a
polys.domains	PythonIntegerRing	__init__		allow instantiation of this domain
polys.domains	PythonIntegerRing	to_sympy	a	convert a to a sympy object
polys.domains	PythonIntegerRing	from_sympy	a	convert sympy's integer to dtype
polys.domains	PythonIntegerRing	from_FF_python	K1 a K0	convert modularinteger int to python's int
polys.domains	PythonIntegerRing	from_ZZ_python	K1 a K0	convert python's int to python's int
polys.domains	PythonIntegerRing	from_QQ_python	K1 a K0	convert python's fraction to python's int
polys.domains	PythonIntegerRing	from_FF_gmpy	K1 a K0	convert modularinteger mpz to python's int
polys.domains	PythonIntegerRing	from_ZZ_gmpy	K1 a K0	convert gmpy's mpz to python's int
polys.domains	PythonIntegerRing	from_QQ_gmpy	K1 a K0	convert gmpy's mpq to python's int
polys.domains	PythonIntegerRing	from_RealField	K1 a K0	convert mpmath's mpf to python's int
polys.domains	PythonIntegerRing	gcdex	a b	compute extended gcd of a and b
polys.domains	PythonIntegerRing	gcd	a b	compute gcd of a and b
polys.domains	PythonIntegerRing	lcm	a b	compute lcm of a and b
polys.domains	PythonIntegerRing	sqrt	a	compute square root of a
polys.domains	PythonIntegerRing	factorial	a	compute factorial of a
polys.domains	Ring	get_ring		returns a ring associated with self
polys.domains	Ring	exquo	a b	exact quotient of a and b, implies __floordiv__
polys.domains	Ring	quo	a b	quotient of a and b, implies __floordiv__
polys.domains	Ring	rem	a b	remainder of a and b, implies __mod__
polys.domains	Ring	div	a b	division of a and b, implies __divmod__
polys.domains	Ring	invert	a b	returns inversion of a mod b
polys.domains	Ring	revert	a	returns a** -1 if possible
polys.domains	Ring	numer	a	returns numerator of a
polys.domains	Ring	denom	a	returns denominator of a
polys.domains	Ring	free_module	rank	generate a free module of rank rank over self
polys.domains	Ring	ideal		generate an ideal of self
polys.domains	Ring	quotient_ring	e	form a quotient ring of self
polys.domains	PolynomialRing	__eq__	other	returns true if two domains are equivalent
polys.domains	PolynomialRing	to_sympy	a	convert a to a sympy object
polys.domains	PolynomialRing	from_sympy	a	convert sympy's expression to dtype
polys.domains	PolynomialRing	from_ZZ_python	K1 a K0	convert a python int object to dtype
polys.domains	PolynomialRing	from_QQ_python	K1 a K0	convert a python fraction object to dtype
polys.domains	PolynomialRing	from_ZZ_gmpy	K1 a K0	convert a gmpy mpz object to dtype
polys.domains	PolynomialRing	from_QQ_gmpy	K1 a K0	convert a gmpy mpq object to dtype
polys.domains	PolynomialRing	from_RealField	K1 a K0	convert a mpmath mpf object to dtype
polys.domains	PolynomialRing	from_AlgebraicField	K1 a K0	convert an algebraic number to dtype
polys.domains	PolynomialRing	from_PolynomialRing	K1 a K0	convert a polynomial to dtype
polys.domains	PolynomialRing	from_FractionField	K1 a K0	convert a rational function to dtype
polys.domains	PolynomialRing	get_field		returns a field associated with self
polys.domains	PolynomialRing	is_positive	a	returns true if lc a is positive
polys.domains	PolynomialRing	is_negative	a	returns true if lc a is negative
polys.domains	PolynomialRing	is_nonpositive	a	returns true if lc a is non-positive
polys.domains	PolynomialRing	is_nonnegative	a	returns true if lc a is non-negative
polys.domains	PolynomialRing	gcdex	a b	extended gcd of a and b
polys.domains	PolynomialRing	gcd	a b	returns gcd of a and b
polys.domains	PolynomialRing	lcm	a b	returns lcm of a and b
polys.domains	PolynomialRing	factorial	a	returns factorial of a
polys.domains	GMPYIntegerRing	__init__		allow instantiation of this domain
polys.domains	GMPYIntegerRing	to_sympy	a	convert a to a sympy object
polys.domains	GMPYIntegerRing	from_sympy	a	convert sympy's integer to dtype
polys.domains	GMPYIntegerRing	from_FF_python	K1 a K0	convert modularinteger int to gmpy's mpz
polys.domains	GMPYIntegerRing	from_ZZ_python	K1 a K0	convert python's int to gmpy's mpz
polys.domains	GMPYIntegerRing	from_QQ_python	K1 a K0	convert python's fraction to gmpy's mpz
polys.domains	GMPYIntegerRing	from_FF_gmpy	K1 a K0	convert modularinteger mpz to gmpy's mpz
polys.domains	GMPYIntegerRing	from_ZZ_gmpy	K1 a K0	convert gmpy's mpz to gmpy's mpz
polys.domains	GMPYIntegerRing	from_QQ_gmpy	K1 a K0	convert gmpy mpq to gmpy's mpz
polys.domains	GMPYIntegerRing	from_RealField	K1 a K0	convert mpmath's mpf to gmpy's mpz
polys.domains	GMPYIntegerRing	gcdex	a b	compute extended gcd of a and b
polys.domains	GMPYIntegerRing	gcd	a b	compute gcd of a and b
polys.domains	GMPYIntegerRing	lcm	a b	compute lcm of a and b
polys.domains	GMPYIntegerRing	sqrt	a	compute square root of a
polys.domains	GMPYIntegerRing	factorial	a	compute factorial of a
polys.domains	FractionField	__eq__	other	returns true if two domains are equivalent
polys.domains	FractionField	to_sympy	a	convert a to a sympy object
polys.domains	FractionField	from_sympy	a	convert sympy's expression to dtype
polys.domains	FractionField	from_ZZ_python	K1 a K0	convert a python int object to dtype
polys.domains	FractionField	from_QQ_python	K1 a K0	convert a python fraction object to dtype
polys.domains	FractionField	from_ZZ_gmpy	K1 a K0	convert a gmpy mpz object to dtype
polys.domains	FractionField	from_QQ_gmpy	K1 a K0	convert a gmpy mpq object to dtype
polys.domains	FractionField	from_RealField	K1 a K0	convert a mpmath mpf object to dtype
polys.domains	FractionField	from_GlobalPolynomialRing	K1 a K0	convert a dmf object to dtype
polys.domains	FractionField	from_FractionField	K1 a K0	convert a fraction field element to another fraction field
polys.domains	FractionField	get_ring		returns a ring associated with self
polys.domains	FractionField	poly_ring		returns a polynomial ring i e k[x]
polys.domains	FractionField	frac_field		returns a fraction field i e k x
polys.domains	FractionField	is_positive	a	returns true if a is positive
polys.domains	FractionField	is_negative	a	returns true if a is negative
polys.domains	FractionField	is_nonpositive	a	returns true if a is non-positive
polys.domains	FractionField	is_nonnegative	a	returns true if a is non-negative
polys.domains	FractionField	numer	a	returns numerator of a
polys.domains	FractionField	denom	a	returns denominator of a
polys.domains	FractionField	factorial	a	returns factorial of a
polys.domains	FiniteField	__eq__	other	returns true if two domains are equivalent
polys.domains	FiniteField	characteristic		return the characteristic of this domain
polys.domains	FiniteField	get_field		returns a field associated with self
polys.domains	FiniteField	to_sympy	a	convert a to a sympy object
polys.domains	FiniteField	from_sympy	a	convert sympy's integer to sympy's integer
polys.domains	FiniteField	from_FF_python	K1 a K0	convert modularinteger int to dtype
polys.domains	FiniteField	from_ZZ_python	K1 a K0	convert python's int to dtype
polys.domains	FiniteField	from_QQ_python	K1 a K0	convert python's fraction to dtype
polys.domains	FiniteField	from_FF_gmpy	K1 a K0	convert modularinteger mpz to dtype
polys.domains	FiniteField	from_ZZ_gmpy	K1 a K0	convert gmpy's mpz to dtype
polys.domains	FiniteField	from_QQ_gmpy	K1 a K0	convert gmpy's mpq to dtype
polys.domains	FiniteField	from_RealField	K1 a K0	convert mpmath's mpf to dtype
polys.domains	RealField	to_sympy	element	convert element to sympy number
polys.domains	RealField	from_sympy	expr	convert sympy's number to dtype
polys.domains	RealField	to_rational	element limit	convert a real number to rational number
polys.domains	RealField	get_ring		returns a ring associated with self
polys.domains	RealField	get_exact		returns an exact domain associated with self
polys.domains	RealField	gcd	a b	returns gcd of a and b
polys.domains	RealField	lcm	a b	returns lcm of a and b
polys.domains	RealField	almosteq	a b tolerance	check if a and b are almost equal
polys.domains		ModularIntegerFactory	_mod _dom _sym parent	create custom class for specific integer modulus
polys.domains	ExpressionDomain	to_sympy	a	convert a to a sympy object
polys.domains	ExpressionDomain	from_sympy	a	convert sympy's expression to dtype
polys.domains	ExpressionDomain	from_ZZ_python	K1 a K0	convert a python int object to dtype
polys.domains	ExpressionDomain	from_QQ_python	K1 a K0	convert a python fraction object to dtype
polys.domains	ExpressionDomain	from_ZZ_gmpy	K1 a K0	convert a gmpy mpz object to dtype
polys.domains	ExpressionDomain	from_QQ_gmpy	K1 a K0	convert a gmpy mpq object to dtype
polys.domains	ExpressionDomain	from_RealField	K1 a K0	convert a mpmath mpf object to dtype
polys.domains	ExpressionDomain	from_PolynomialRing	K1 a K0	convert a dmp object to dtype
polys.domains	ExpressionDomain	from_FractionField	K1 a K0	convert a dmf object to dtype
polys.domains	ExpressionDomain	from_ExpressionDomain	K1 a K0	convert a ex object to dtype
polys.domains	ExpressionDomain	get_ring		returns a ring associated with self
polys.domains	ExpressionDomain	get_field		returns a field associated with self
polys.domains	ExpressionDomain	is_positive	a	returns true if a is positive
polys.domains	ExpressionDomain	is_negative	a	returns true if a is negative
polys.domains	ExpressionDomain	is_nonpositive	a	returns true if a is non-positive
polys.domains	ExpressionDomain	is_nonnegative	a	returns true if a is non-negative
polys.domains	ExpressionDomain	numer	a	returns numerator of a
polys.domains	ExpressionDomain	denom	a	returns denominator of a
polys.domains	AlgebraicField	__eq__	other	returns true if two domains are equivalent
polys.domains	AlgebraicField	algebraic_field		returns an algebraic field i e \mathbb{q}(\alpha \ldots)
polys.domains	AlgebraicField	to_sympy	a	convert a to a sympy object
polys.domains	AlgebraicField	from_sympy	a	convert sympy's expression to dtype
polys.domains	AlgebraicField	from_ZZ_python	K1 a K0	convert a python int object to dtype
polys.domains	AlgebraicField	from_QQ_python	K1 a K0	convert a python fraction object to dtype
polys.domains	AlgebraicField	from_ZZ_gmpy	K1 a K0	convert a gmpy mpz object to dtype
polys.domains	AlgebraicField	from_QQ_gmpy	K1 a K0	convert a gmpy mpq object to dtype
polys.domains	AlgebraicField	from_RealField	K1 a K0	convert a mpmath mpf object to dtype
polys.domains	AlgebraicField	get_ring		returns a ring associated with self
polys.domains	AlgebraicField	is_positive	a	returns true if a is positive
polys.domains	AlgebraicField	is_negative	a	returns true if a is negative
polys.domains	AlgebraicField	is_nonpositive	a	returns true if a is non-positive
polys.domains	AlgebraicField	is_nonnegative	a	returns true if a is non-negative
polys.domains	AlgebraicField	numer	a	returns numerator of a
polys.domains	AlgebraicField	denom	a	returns denominator of a
polys.agca	ModuleHomomorphism	kernel		compute the kernel of self
polys.agca	ModuleHomomorphism	image		compute the image of self
polys.agca	ModuleHomomorphism	_kernel		compute the kernel of self
polys.agca	ModuleHomomorphism	_image		compute the image of self
polys.agca	ModuleHomomorphism	_restrict_domain	sm	implementation of domain restriction
polys.agca	ModuleHomomorphism	_restrict_codomain	sm	implementation of codomain restriction
polys.agca	ModuleHomomorphism	_quotient_domain	sm	implementation of domain quotient
polys.agca	ModuleHomomorphism	_quotient_codomain	sm	implementation of codomain quotient
polys.agca	ModuleHomomorphism	restrict_domain	sm	return self, with the domain restricted to sm
polys.agca	ModuleHomomorphism	restrict_codomain	sm	return self, with codomain restricted to to sm
polys.agca	ModuleHomomorphism	quotient_domain	sm	return self with domain replaced by domain/sm
polys.agca	ModuleHomomorphism	quotient_codomain	sm	return self with codomain replaced by codomain/sm
polys.agca	ModuleHomomorphism	_apply	elem	apply self to elem
polys.agca	ModuleHomomorphism	_compose	oth	compose self with oth, that is return the homomorphism obtained by first applying then self, then oth
polys.agca	ModuleHomomorphism	_mul_scalar	c	scalar multiplication c is guaranteed in self ring
polys.agca	ModuleHomomorphism	_check_hom	oth	helper to check that oth is a homomorphism with same domain/codomain
polys.agca	ModuleHomomorphism	is_injective		return true if self is injective
polys.agca	ModuleHomomorphism	is_surjective		return true if self is surjective
polys.agca	ModuleHomomorphism	is_isomorphism		return true if self is an isomorphism
polys.agca	ModuleHomomorphism	is_zero		return true if self is a zero morphism
polys.agca	MatrixHomomorphism	_sympy_matrix		helper function which returns a sympy matrix self matrix
polys.agca	MatrixHomomorphism	_restrict_domain	sm	implementation of domain restriction
polys.agca	MatrixHomomorphism	_restrict_codomain	sm	implementation of codomain restriction
polys.agca	MatrixHomomorphism	_quotient_domain	sm	implementation of domain quotient
polys.agca	MatrixHomomorphism	_quotient_codomain	sm	implementation of codomain quotient
polys.agca		homomorphism	domain codomain matrix	create a homomorphism object
polys.agca	Ideal	_contains_elem	x	implementation of element containment
polys.agca	Ideal	_contains_ideal	I	implementation of ideal containment
polys.agca	Ideal	_quotient	J	implementation of ideal quotient
polys.agca	Ideal	_intersect	J	implementation of ideal intersection
polys.agca	Ideal	is_whole_ring		return true if self is the whole ring
polys.agca	Ideal	is_zero		return true if self is the zero ideal
polys.agca	Ideal	_equals	J	implementation of ideal equality
polys.agca	Ideal	is_prime		return true if self is a prime ideal
polys.agca	Ideal	is_maximal		return true if self is a maximal ideal
polys.agca	Ideal	is_radical		return true if self is a radical ideal
polys.agca	Ideal	is_primary		return true if self is a primary ideal
polys.agca	Ideal	is_principal		return true if self is a principal ideal
polys.agca	Ideal	radical		compute the radical of self
polys.agca	Ideal	depth		compute the depth of self
polys.agca	Ideal	height		compute the height of self
polys.agca	Ideal	_check_ideal	J	helper to check j is an ideal of our ring
polys.agca	Ideal	contains	elem	return true if elem is an element of this ideal
polys.agca	Ideal	subset	other	returns true if other is is a subset of self
polys.agca	Ideal	quotient	J	compute the ideal quotient of self by j
polys.agca	Ideal	intersect	J	compute the intersection of self with ideal j
polys.agca	Ideal	saturate	J	compute the ideal saturation of self by j
polys.agca	Ideal	union	J	compute the ideal generated by the union of self and j
polys.agca	Ideal	product	J	compute the ideal product of self and j
polys.agca	Ideal	reduce_element	x	reduce the element x of our ring modulo the ideal self
polys.agca	ModuleImplementedIdeal	gens		return generators for self
polys.agca	ModuleImplementedIdeal	is_zero		return true if self is the zero ideal
polys.agca	ModuleImplementedIdeal	is_whole_ring		return true if self is the whole ring i e one generator is a unit
polys.agca	ModuleImplementedIdeal	in_terms_of_generators	e	express e in terms of the generators of self
polys.agca	Module	convert	elem M	convert elem into internal representation of this module
polys.agca	Module	submodule		generate a submodule
polys.agca	Module	quotient_module	other	generate a quotient module
polys.agca	Module	contains	elem	return true if elem is an element of this module
polys.agca	Module	subset	other	returns true if other is is a subset of self
polys.agca	Module	is_zero		returns true if self is a zero module
polys.agca	Module	is_submodule	other	returns true if other is a submodule of self
polys.agca	Module	multiply_ideal	other	multiply self by the ideal other
polys.agca	Module	identity_hom		return the identity homomorphism on self
polys.agca	ModuleElement	add	d1 d2	add data d1 and d2
polys.agca	ModuleElement	mul	m d	multiply module data m by coefficient d
polys.agca	ModuleElement	div	m d	divide module data m by coefficient d
polys.agca	ModuleElement	eq	d1 d2	return true if d1 and d2 represent the same element
polys.agca	FreeModule	is_submodule	other	returns true if other is a submodule of self
polys.agca	FreeModule	convert	elem M	convert elem into the internal representation
polys.agca	FreeModule	is_zero		returns true if self is a zero module
polys.agca	FreeModule	basis		return a set of basis elements
polys.agca	FreeModule	quotient_module	submodule	return a quotient module
polys.agca	FreeModule	multiply_ideal	other	multiply self by the ideal other
polys.agca	FreeModule	identity_hom		return the identity homomorphism on self
polys.agca	FreeModulePolyRing	submodule		generate a submodule
polys.agca	FreeModuleQuotientRing	submodule		generate a submodule
polys.agca	FreeModuleQuotientRing	lift	elem	lift the element elem of self to the module self quot
polys.agca	FreeModuleQuotientRing	unlift	elem	push down an element of self quot to self
polys.agca	SubModule	_contains	other	implementation of containment
polys.agca	SubModule	_syzygies		implementation of syzygy computation wrt self generators
polys.agca	SubModule	_in_terms_of_generators	e	implementation of expression in terms of generators
polys.agca	SubModule	convert	elem M	convert elem into the internal represantition
polys.agca	SubModule	_intersect	other	implementation of intersection
polys.agca	SubModule	_module_quotient	other	implementation of quotient
polys.agca	SubModule	intersect	other	returns the intersection of self with submodule other
polys.agca	SubModule	module_quotient	other	returns the module quotient of self by submodule other
polys.agca	SubModule	union	other	returns the module generated by the union of self and other
polys.agca	SubModule	is_zero		return true if self is a zero module
polys.agca	SubModule	submodule		generate a submodule
polys.agca	SubModule	is_full_module		return true if self is the entire free module
polys.agca	SubModule	is_submodule	other	returns true if other is a submodule of self
polys.agca	SubModule	syzygy_module		compute the syzygy module of the generators of self
polys.agca	SubModule	in_terms_of_generators	e	express element e of self in terms of the generators
polys.agca	SubModule	reduce_element	x	reduce the element x of our ring modulo the ideal self
polys.agca	SubModule	quotient_module	other	return a quotient module
polys.agca	SubModule	multiply_ideal	I	multiply self by the ideal i
polys.agca	SubModule	inclusion_hom		return a homomorphism representing the inclusion map of self
polys.agca	SubModule	identity_hom		return the identity homomorphism on self
polys.agca	SubQuotientModule	is_full_module		return true if self is the entire free module
polys.agca	SubQuotientModule	quotient_hom		return the quotient homomorphism to self
polys.agca	SubModulePolyRing	_groebner	extended	returns a standard basis in sdm form
polys.agca	SubModulePolyRing	_groebner_vec	extended	returns a standard basis in element form
polys.agca	SubModulePolyRing	_syzygies		compute syzygies see [sca algorithm 2 5 4]
polys.agca	SubModulePolyRing	_in_terms_of_generators	e	expression in terms of generators see [sca 2 8 1]
polys.agca	SubModulePolyRing	reduce_element	x NF	reduce the element x of our container modulo self
polys.agca	QuotientModule	is_zero		return true if self is a zero module
polys.agca	QuotientModule	is_submodule	other	return true if other is a submodule of self
polys.agca	QuotientModule	submodule		generate a submodule
polys.agca	QuotientModule	convert	elem M	convert elem into the internal representation
polys.agca	QuotientModule	identity_hom		return the identity homomorphism on self
polys.agca	QuotientModule	quotient_hom		return the quotient homomorphism to self
physics		delta	i j	returns 1 if i == j else 0
physics		epsilon	i j k	return 1 if i j k is equal to 1 2 3 2 3 1 or 3 1 2 ; -1 if i j k is equal to 1 3 2 3 2 1 or 2 1 3 ;
physics		evaluate_pauli_product	arg	help function to evaluate pauli matrices product with symbolic objects
physics		R_nl	n l r Z	returns the hydrogen radial wavefunction r_{nl}
physics		E_nl	n Z	returns the energy of the state n l in hartree atomic units
physics		E_nl_dirac	n l spin_up Z	returns the relativistic energy of the state n l spin in hartree atomic units
physics		psi_n	n x m omega	returns the wavefunction psi_{n} for the one-dimensional harmonic oscillator
physics		E_n	n omega	returns the energy of the one-dimensional harmonic oscillator n
physics		coherent_state	n alpha	returns <n|alpha> for the coherent states of 1d harmonic oscillator
physics		msigma	i	returns a pauli matrix \sigma_i with i=1 2 3 references
physics		pat_matrix	m dx dy dz	returns the parallel axis theorem matrix to translate the inertia matrix a distance of dx dy dz for a body of mass m
physics		mgamma	mu lower	returns a dirac gamma matrix \gamma^\mu in the standard dirac representation
physics		mdft	n	returns an expression of a discrete fourier transform as a matrix multiplication
physics		wavefunction	n x	returns the wavefunction for particle on ring
physics		energy	n m r	returns the energy of the state corresponding to quantum number n
physics		R_nl	n l nu r	returns the radial wavefunction r_{nl} for a 3d isotropic harmonic oscillator
physics		E_nl	n l hw	returns the energy of an isotropic harmonic oscillator n
physics		_calc_factlist	nn	function calculates a list of precomputed factorials in order to massively accelerate future calculations of the various
physics		wigner_3j	j_1 j_2 j_3 m_1	calculate the wigner 3j symbol \operatorname{wigner3j}(j_1 j_2 j_3 m_1 m_2 m_3)
physics		clebsch_gordan	j_1 j_2 j_3 m_1	calculates the clebsch-gordan coefficient \langle j_1 m_1 \; j_2 m_2 | j_3 m_3 \rangle
physics		_big_delta_coeff	aa bb cc prec	calculates the delta coefficient of the 3 angular momenta for racah symbols
physics		racah	aa bb cc dd	calculate the racah symbol w a b c d e f
physics		wigner_6j	j_1 j_2 j_3 j_4	calculate the wigner 6j symbol \operatorname{wigner6j}(j_1 j_2 j_3 j_4 j_5 j_6)
physics		wigner_9j	j_1 j_2 j_3 j_4	calculate the wigner 9j symbol \operatorname{wigner9j}(j_1 j_2 j_3 j_4 j_5 j_6 j_7 j_8 j_9)
physics		gaunt	l_1 l_2 l_3 m_1	calculate the gaunt coefficient
physics		dot_rot_grad_Ynm	j p l m	returns dot product of rotational gradients of spherical harmonics
physics	Dagger	eval	cls arg	evaluates the dagger instance
physics	AntiSymmetricTensor	_sortkey	cls index	key for sorting of indices
physics	AntiSymmetricTensor	symbol		returns the symbol of the tensor
physics	AntiSymmetricTensor	upper		returns the upper indices
physics	AntiSymmetricTensor	lower		returns the lower indices
physics	SqOperator	state		returns the state index related to this operator
physics	SqOperator	is_symbolic		returns true if the state is a symbol as opposed to a number
physics	SqOperator	doit		fixme hack to prevent crash further up
physics	SqOperator	apply_operator	state	applies an operator to itself
physics	AnnihilateBoson	apply_operator	state	apply state to self if self is not symbolic and state is a fockstateket else multiply self by state
physics	CreateBoson	apply_operator	state	apply state to self if self is not symbolic and state is a fockstateket else multiply self by state
physics	FermionicOperator	is_restricted		is this fermionicoperator restricted with respect to fermi level? return values
physics	FermionicOperator	is_above_fermi		does the index of this fermionicoperator allow values above fermi? >>> from sympy import symbol
physics	FermionicOperator	is_below_fermi		does the index of this fermionicoperator allow values below fermi? >>> from sympy import symbol
physics	FermionicOperator	is_only_below_fermi		is the index of this fermionicoperator restricted to values below fermi? >>> from sympy import symbol
physics	FermionicOperator	is_only_above_fermi		is the index of this fermionicoperator restricted to values above fermi? >>> from sympy import symbol
physics	AnnihilateFermion	apply_operator	state	apply state to self if self is not symbolic and state is a fockstateket else multiply self by state
physics	AnnihilateFermion	is_q_creator		can we create a quasi-particle? create hole or create particle if so would that be above or below the fermi surface?
physics	AnnihilateFermion	is_q_annihilator		can we destroy a quasi-particle? annihilate hole or annihilate particle if so would that be above or below the fermi surface?
physics	AnnihilateFermion	is_only_q_creator		always create a quasi-particle? create hole or create particle >>> from sympy import symbol
physics	AnnihilateFermion	is_only_q_annihilator		always destroy a quasi-particle? annihilate hole or annihilate particle >>> from sympy import symbol
physics	CreateFermion	apply_operator	state	apply state to self if self is not symbolic and state is a fockstateket else multiply self by state
physics	CreateFermion	is_q_creator		can we create a quasi-particle? create hole or create particle if so would that be above or below the fermi surface?
physics	CreateFermion	is_q_annihilator		can we destroy a quasi-particle? annihilate hole or annihilate particle if so would that be above or below the fermi surface?
physics	CreateFermion	is_only_q_creator		always create a quasi-particle? create hole or create particle >>> from sympy import symbol
physics	CreateFermion	is_only_q_annihilator		always destroy a quasi-particle? annihilate hole or annihilate particle >>> from sympy import symbol
physics	FockState	__new__	cls occupations	occupations is a list with two possible meanings - for bosons it is a list of occupation numbers
physics	BosonState	up	i	performs the action of a creation operator
physics	BosonState	down	i	performs the action of an annihilation operator
physics	FermionState	up	i	performs the action of a creation operator
physics	FermionState	down	i	performs the action of an annihilation operator
physics	FermionState	_only_below_fermi	cls i	tests if given orbit is only below fermi surface
physics	FermionState	_only_above_fermi	cls i	tests if given orbit is only above fermi surface
physics	FermionState	_remove_orbit	i	removes particle/fills hole in orbit i no input tests performed here
physics	FermionState	_add_orbit	i	adds particle/creates hole in orbit i no input tests performed here
physics	FermionState	_count_holes	cls list	returns number of identified hole states in list
physics		_apply_Mul	m	take a mul instance with operators and apply them to states
physics		apply_operators	e	take a sympy expression with operators and states and apply the operators
physics	InnerProduct	bra		returns the bra part of the state
physics	InnerProduct	ket		returns the ket part of the state
physics		matrix_rep	op basis	find the representation of an operator in a basis
physics	VarBosonicBasis	index	state	returns the index of state in basis
physics	VarBosonicBasis	state	i	the state of a single basis
physics	FixedBosonicBasis	index	state	returns the index of state in basis
physics	FixedBosonicBasis	state	i	returns the state that lies at index i of the basis examples
physics	Commutator	eval	cls a b	the commutator [a b] is on canonical form if a < b
physics	Commutator	doit		enables the computation of complex expressions
physics	NO	__new__	cls arg	use anticommutation to get canonical form of operators
physics	NO	has_q_creators		return 0 if the leftmost argument of the first argument is a not a q_creator else 1 if it is above fermi or -1 if it is below fermi
physics	NO	has_q_annihilators		return 0 if the rightmost argument of the first argument is a not a q_annihilator else 1 if it is above fermi or -1 if it is below fermi
physics	NO	doit		either removes the brackets or enables complex computations in its arguments
physics	NO	_remove_brackets		returns the sorted string without normal order brackets
physics	NO	_expand_operators		returns a sum of no objects that contain no ambiguous q-operators
physics	NO	iter_q_annihilators		iterates over the annihilation operators
physics	NO	iter_q_creators		iterates over the creation operators
physics	NO	get_subNO	i	returns a no() without fermionicoperator at index i
physics		contraction	a b	calculates contraction of fermionic operators a and b
physics		_sqkey	sq_operator	generates key for canonical sorting of sq operators
physics		_sort_anticommuting_fermions	string1 key	sort fermionic operators to canonical order assuming all pairs anticommute
physics		evaluate_deltas	e	we evaluate kroneckerdelta symbols in the expression assuming einstein summation
physics		substitute_dummies	expr new_indices pretty_indices	collect terms by substitution of dummy variables
physics		_get_ordered_dummies	mul verbose	returns all dummies in the mul sorted in canonical order the purpose of the canonical ordering is that dummies can be substituted
physics	_SymbolFactory	_set_counter	value	sets counter to value
physics	_SymbolFactory	_counter		what counter is currently at
physics	_SymbolFactory	_next		generates the next symbols and increments counter by 1
physics		_get_contractions	string1 keep_only_fully_contracted	returns add-object with contracted terms
physics		wicks	e	returns the normal ordered equivalent of an expression using wicks theorem
physics	PermutationOperator	get_permuted	expr	returns -expr with permuted indices
physics		simplify_index_permutations	expr permutation_operators	performs simplification by introducing permutationoperators where appropriate
physics.continuum_mechanics	Beam	__init__	length elastic_modulus second_moment variable	initializes the class
physics.continuum_mechanics	Beam	reaction_loads		returns the reaction forces in a dictionary
physics.continuum_mechanics	Beam	length		length of the beam
physics.continuum_mechanics	Beam	variable		a symbol that can be used as a variable along the length of the beam while representing load distribution shear force curve bending
physics.continuum_mechanics	Beam	elastic_modulus		young's modulus of the beam
physics.continuum_mechanics	Beam	second_moment		second moment of area of the beam
physics.continuum_mechanics	Beam	boundary_conditions		returns a dictionary of boundary conditions applied on the beam
physics.continuum_mechanics	Beam	apply_load	value start order end	this method adds up the loads given to a particular beam object
physics.continuum_mechanics	Beam	load		returns a singularity function expression which represents the load distribution curve of the beam object
physics.continuum_mechanics	Beam	solve_for_reaction_loads		solves for the reaction forces
physics.continuum_mechanics	Beam	shear_force		returns a singularity function expression which represents the shear force curve of the beam object
physics.continuum_mechanics	Beam	bending_moment		returns a singularity function expression which represents the bending moment curve of the beam object
physics.continuum_mechanics	Beam	slope		returns a singularity function expression which represents the slope the elastic curve of the beam object
physics.continuum_mechanics	Beam	deflection		returns a singularity function expression which represents the elastic curve or deflection of the beam object
physics.mechanics		mechanics_printing		initializes time derivative printing for all sympy objects in mechanics module
physics.mechanics		inertia	frame ixx iyy izz	simple way to create inertia dyadic object
physics.mechanics		inertia_of_point_mass	mass pos_vec frame	inertia dyadic of a point mass relative to point o
physics.mechanics		linear_momentum	frame	linear momentum of the system
physics.mechanics		angular_momentum	point frame	angular momentum of a system this function returns the angular momentum of a system of particle's and/or
physics.mechanics		kinetic_energy	frame	kinetic energy of a multibody system
physics.mechanics		potential_energy		potential energy of a multibody system
physics.mechanics		Lagrangian	frame	lagrangian of a multibody system
physics.mechanics		find_dynamicsymbols	expression exclude	find all dynamicsymbols in expression
physics.mechanics		msubs	expr	a custom subs for use on expressions derived in physics mechanics
physics.mechanics		_crawl	expr func	crawl the expression tree and apply func to every node
physics.mechanics		_sub_func	expr sub_dict	perform direct matching substitution ignoring derivatives
physics.mechanics		_tan_repl_func	expr	replace tan with sin/cos
physics.mechanics		_smart_subs	expr sub_dict	performs subs checking for conditions that may result in nan or oo, and attempts to simplify them out
physics.mechanics		_fraction_decomp	expr	return num den such that expr = num/den
physics.mechanics		_f_list_parser	fl ref_frame	parses the provided forcelist composed of items of the form obj force
physics.mechanics	Particle	mass		mass of the particle
physics.mechanics	Particle	point		point of the particle
physics.mechanics	Particle	linear_momentum	frame	linear momentum of the particle
physics.mechanics	Particle	angular_momentum	point frame	angular momentum of the particle about the point
physics.mechanics	Particle	kinetic_energy	frame	kinetic energy of the particle the kinetic energy t of a particle p is given by
physics.mechanics	Particle	potential_energy		the potential energy of the particle
physics.mechanics	Particle	potential_energy	scalar	used to set the potential energy of the particle
physics.mechanics	Linearizer	_form_permutation_matrices		form the permutation matrices pq and pu
physics.mechanics	Linearizer	_form_coefficient_matrices		form the coefficient matrices c_0 c_1 and c_2
physics.mechanics	Linearizer	_form_block_matrices		form the block matrices for composing m a and b
physics.mechanics	Linearizer	linearize	op_point A_and_B simplify	linearize the system about the operating point note that
physics.mechanics		permutation_matrix	orig_vec per_vec	compute the permutation matrix to change order of orig_vec into order of per_vec
physics.mechanics	Body	apply_force	vec point	adds a force to a point center of mass by default on the body
physics.mechanics	Body	apply_torque	vec	adds a torque to the body
physics.mechanics	SymbolicSystem	__init__	coord_states right_hand_side speeds mass_matrix	initializes a symbolicsystem object
physics.mechanics	SymbolicSystem	coordinates		returns the column matrix of the generalized coordinates
physics.mechanics	SymbolicSystem	speeds		returns the column matrix of generalized speeds
physics.mechanics	SymbolicSystem	states		returns the column matrix of the state variables
physics.mechanics	SymbolicSystem	alg_con		returns a list with the indices of the rows containing algebraic
physics.mechanics	SymbolicSystem	dyn_implicit_mat		returns the matrix m corresponding to the dynamic equations in
physics.mechanics	SymbolicSystem	dyn_implicit_rhs		returns the column matrix f corresponding to the dynamic equations
physics.mechanics	SymbolicSystem	comb_implicit_mat		returns the matrix m corresponding to the equations of motion in
physics.mechanics	SymbolicSystem	comb_implicit_rhs		returns the column matrix f corresponding to the equations of
physics.mechanics	SymbolicSystem	compute_explicit_form		if the explicit right hand side of the combined equations of motion is to provided upon initialization this method will calculate it
physics.mechanics	SymbolicSystem	comb_explicit_rhs		returns the right hand side of the equations of motion in explicit
physics.mechanics	SymbolicSystem	kin_explicit_rhs		returns the right hand side of the kinematical equations in explicit
physics.mechanics	SymbolicSystem	dynamic_symbols		returns a column matrix containing all of the symbols in the system
physics.mechanics	SymbolicSystem	constant_symbols		returns a column matrix containing all of the symbols in the system
physics.mechanics	SymbolicSystem	bodies		returns the bodies in the system
physics.mechanics	SymbolicSystem	loads		returns the loads in the system
physics.mechanics	LagrangesMethod	__init__	Lagrangian qs coneqs forcelist	supply the following for the initialization of lagrangesmethod lagrangian : sympifyable
physics.mechanics	LagrangesMethod	form_lagranges_equations		method to form lagrange's equations of motion
physics.mechanics	LagrangesMethod	mass_matrix		returns the mass matrix which is augmented by the lagrange multipliers if necessary
physics.mechanics	LagrangesMethod	mass_matrix_full		augments the coefficients of qdots to the mass_matrix
physics.mechanics	LagrangesMethod	forcing		returns the forcing vector from 'lagranges_equations' method
physics.mechanics	LagrangesMethod	forcing_full		augments qdots to the forcing vector above
physics.mechanics	LagrangesMethod	to_linearizer	q_ind qd_ind q_dep qd_dep	returns an instance of the linearizer class initiated from the data in the lagrangesmethod class
physics.mechanics	LagrangesMethod	linearize	q_ind qd_ind q_dep qd_dep	linearize the equations of motion about a symbolic operating point
physics.mechanics	LagrangesMethod	solve_multipliers	op_point sol_type	solves for the values of the lagrange multipliers symbolically at the specified operating point
physics.mechanics	LagrangesMethod	rhs	inv_method	returns equations that can be solved numerically parameters
physics.mechanics	RigidBody	central_inertia		the body's central inertia dyadic
physics.mechanics	RigidBody	linear_momentum	frame	linear momentum of the rigid body
physics.mechanics	RigidBody	angular_momentum	point frame	returns the angular momentum of the rigid body about a point in the given frame
physics.mechanics	RigidBody	kinetic_energy	frame	kinetic energy of the rigid body the kinetic energy t of a rigid body b is given by
physics.mechanics	RigidBody	potential_energy		the potential energy of the rigidbody
physics.mechanics	RigidBody	potential_energy	scalar	used to set the potential energy of this rigidbody
physics.mechanics	KanesMethod	__init__	frame q_ind u_ind kd_eqs	please read the online documentation
physics.mechanics	KanesMethod	_initialize_vectors	q_ind q_dep u_ind u_dep	initialize the coordinate and speed vectors
physics.mechanics	KanesMethod	_initialize_constraint_matrices	config vel acc	initializes constraint matrices
physics.mechanics	KanesMethod	_initialize_kindiffeq_matrices	kdeqs	initialize the kinematic differential equation matrices
physics.mechanics	KanesMethod	_form_fr	fl	form the generalized active force
physics.mechanics	KanesMethod	_form_frstar	bl	form the generalized inertia force
physics.mechanics	KanesMethod	to_linearizer		returns an instance of the linearizer class initiated from the data in the kanesmethod class
physics.mechanics	KanesMethod	linearize		linearize the equations of motion about a symbolic operating point
physics.mechanics	KanesMethod	_old_linearize		old method to linearize the equations of motion returns a tuple of
physics.mechanics	KanesMethod	kanes_equations	bodies loads	method to form kane's equations fr + fr* = 0
physics.mechanics	KanesMethod	rhs	inv_method	returns the system's equations of motion in first order form the
physics.mechanics	KanesMethod	kindiffdict		returns a dictionary mapping q' to u
physics.mechanics	KanesMethod	auxiliary_eqs		a matrix containing the auxiliary equations
physics.mechanics	KanesMethod	mass_matrix		the mass matrix of the system
physics.mechanics	KanesMethod	mass_matrix_full		the mass matrix of the system augmented by the kinematic differential equations
physics.mechanics	KanesMethod	forcing		the forcing vector of the system
physics.mechanics	KanesMethod	forcing_full		the forcing vector of the system augmented by the kinematic differential equations
physics.mechanics		multi_mass_spring_damper	n apply_gravity apply_external_forces	returns a system containing the symbolic equations of motion and associated variables for a simple multi-degree of freedom point mass
physics.mechanics		n_link_pendulum_on_cart	n cart_force joint_torques	returns the system containing the symbolic first order equations of motion for a 2d n-link pendulum on a sliding cart under the influence of
physics.quantum	Operator	_eval_commutator	other	evaluate [self other] if known return none if not known
physics.quantum	Operator	_eval_anticommutator	other	evaluate [self other] if known
physics.quantum	OuterProduct	ket		return the ket on the left side of the outer product
physics.quantum	OuterProduct	bra		return the bra on the right side of the outer product
physics.quantum	DifferentialOperator	variables		returns the variables with which the function in the specified arbitrary expression is evaluated
physics.quantum	DifferentialOperator	function		returns the function which is to be replaced with the wavefunction examples
physics.quantum	DifferentialOperator	expr		returns the arbitary expression which is to have the wavefunction substituted into it
physics.quantum	DifferentialOperator	free_symbols		return the free symbols of the expression
physics.quantum	StateBase	_operators_to_state	ops	returns the eigenstate instance for the passed operators
physics.quantum	StateBase	_state_to_operators	op_classes	returns the operators which this state instance is an eigenstate of
physics.quantum	StateBase	operators		return the operator s that this state is an eigenstate of
physics.quantum	StateBase	dual		return the dual state of this one
physics.quantum	StateBase	dual_class		return the class used to construt the dual
physics.quantum	StateBase	_eval_adjoint		compute the dagger of this state using the dual
physics.quantum	KetBase	_eval_innerproduct	bra	evaluate the inner product betweeen this ket and a bra
physics.quantum	KetBase	_apply_operator	op	apply an operator to this ket
physics.quantum	BraBase	_represent		a default represent that uses the ket's version
physics.quantum	TimeDepState	label		the label of the state
physics.quantum	TimeDepState	time		the time of the state
physics.quantum	Wavefunction	is_commutative		override function's is_commutative so that order is preserved in
physics.quantum	Wavefunction	variables		return the coordinates which the wavefunction depends on examples
physics.quantum	Wavefunction	limits		return the limits of the coordinates which the w f depends on if no
physics.quantum	Wavefunction	expr		return the expression which is the functional form of the wavefunction examples
physics.quantum	Wavefunction	is_normalized		returns true if the wavefunction is properly normalized examples
physics.quantum	Wavefunction	norm		return the normalization of the specified functional form
physics.quantum	Wavefunction	normalize		return a normalized version of the wavefunction examples
physics.quantum	Wavefunction	prob		return the absolute magnitude of the w f |\psi x |^2
physics.quantum		_sympy_to_scalar	e	convert from a sympy scalar to a python scalar
physics.quantum		represent	expr	represent the quantum expression in the given basis
physics.quantum		rep_innerproduct	expr	returns an innerproduct like representation (e g <x'|x>) for the
physics.quantum		rep_expectation	expr	returns an <x'|a|x> type representation for the given operator
physics.quantum		integrate_result	orig_expr result	returns the result of integrating over any unities (|x><x|) in the given expression
physics.quantum		get_basis	expr	returns a basis state instance corresponding to the basis specified in options=s
physics.quantum		enumerate_states		returns instances of the given state with dummy indices appended operates in two different modes
physics.quantum	CMod	t		size of 1/2 input register first 1/2 holds output
physics.quantum	CMod	a		base of the controlled mod function
physics.quantum	CMod	N		n is the type of modular arithmetic we are doing
physics.quantum	CMod	_apply_operator_Qubit	qubits	this directly calculates the controlled mod of the second half of
physics.quantum		shor	N	this function implements shor's factoring algorithm on the integer n the algorithm starts by picking a random number a and seeing if it is
physics.quantum		period_find	a N	finds the period of a in modulo n arithmetic this is quantum part of shor's algorithm
physics.quantum	QubitState	dimension		the number of qubits in the state
physics.quantum	QubitState	qubit_values		returns the values of the qubits as a tuple
physics.quantum	QubitState	flip		flip the bit s given
physics.quantum	Qubit	_represent_ZGate	basis	represent this qubits in the computational basis zgate
physics.quantum	Qubit	_reduced_density	matrix qubit	compute the reduced density matrix by tracing out one qubit
physics.quantum	IntQubitState	as_int		return the numerical value of the qubit
physics.quantum		matrix_to_qubit	matrix	convert from the matrix repr to a sum of qubit objects
physics.quantum		matrix_to_density	mat	works by finding the eigenvectors and eigenvalues of the matrix
physics.quantum		qubit_to_matrix	qubit format	converts an add/mul of qubit objects into it's matrix representation this function is the inverse of matrix_to_qubit and is a shorthand
physics.quantum		measure_all	qubit format normalize	perform an ensemble measurement of all qubits
physics.quantum		measure_partial	qubit bits format normalize	perform a partial ensemble measure on the specifed qubits
physics.quantum		measure_partial_oneshot	qubit bits format	perform a partial oneshot measurement on the specified qubits
physics.quantum		_get_possible_outcomes	m bits	get the possible states that can be produced in a measurement
physics.quantum		measure_all_oneshot	qubit format	perform a oneshot ensemble measurement on all qubits
physics.quantum	Density	states		return list of all states
physics.quantum	Density	probs		return list of all probabilities
physics.quantum	Density	get_state	index	return specfic state by index
physics.quantum	Density	get_prob	index	return probability of specific state by index
physics.quantum	Density	apply_op	op	op will operate on each individual state
physics.quantum	Density	doit		expand the density operator into an outer product format
physics.quantum	Density	entropy		compute the entropy of a density matrix
physics.quantum		entropy	density	compute the entropy of a matrix/density object
physics.quantum		fidelity	state1 state2	computes the fidelity [1]_ between two quantum states the arguments provided to this function should be a square matrix or a
physics.quantum		kmp_table	word	build the 'partial match' table of the knuth-morris-pratt algorithm
physics.quantum		find_subcircuit	circuit subcircuit start end	finds the subcircuit in circuit if it exists
physics.quantum		replace_subcircuit	circuit subcircuit replace pos	replaces a subcircuit with another subcircuit in circuit if it exists
physics.quantum		convert_to_symbolic_indices	seq start gen qubit_map	returns the circuit with symbolic indices and the dictionary mapping symbolic indices to real indices
physics.quantum		convert_to_real_indices	seq qubit_map	returns the circuit with real indices
physics.quantum		random_reduce	circuit gate_ids seed	shorten the length of a quantum circuit
physics.quantum		random_insert	circuit choices seed	insert a circuit into another quantum circuit
physics.quantum	MatrixCache	cache_matrix	name m	cache a matrix by its name
physics.quantum	MatrixCache	get_matrix	name format	get a cached matrix by name and format
physics.quantum		normalized	normalize	set flag controlling normalization of hadamard gates by 1/sqrt 2
physics.quantum	Gate	_eval_hilbert_space	cls args	this returns the smallest possible hilbert space
physics.quantum	Gate	nqubits		the total number of qubits this gate acts on
physics.quantum	Gate	min_qubits		the minimum number of qubits this gate needs to act on
physics.quantum	Gate	targets		a tuple of target qubits
physics.quantum	Gate	get_target_matrix	format	the matrix rep of the target part of the gate
physics.quantum	Gate	_apply_operator_IntQubit	qubits	redirect an apply from intqubit to qubit
physics.quantum	Gate	_apply_operator_Qubit	qubits	apply this gate to a qubit
physics.quantum	CGate	_eval_hilbert_space	cls args	this returns the smallest possible hilbert space
physics.quantum	CGate	nqubits		the total number of qubits this gate acts on
physics.quantum	CGate	min_qubits		the minimum number of qubits this gate needs to act on
physics.quantum	CGate	targets		a tuple of target qubits
physics.quantum	CGate	controls		a tuple of control qubits
physics.quantum	CGate	gate		the non-controlled gate that will be applied to the targets
physics.quantum	CGate	eval_controls	qubit	return true/false to indicate if the controls are satisfied
physics.quantum	CGate	decompose		decompose the controlled gate into cnot and single qubits gates
physics.quantum	CGate	plot_gate	circ_plot gate_idx	plot the controlled gate if *simplify_cgate* is true simplify
physics.quantum	UGate	_eval_hilbert_space	cls args	this returns the smallest possible hilbert space
physics.quantum	UGate	targets		a tuple of target qubits
physics.quantum	UGate	get_target_matrix	format	the matrix rep of the target part of the gate
physics.quantum	CNotGate	_eval_hilbert_space	cls args	this returns the smallest possible hilbert space
physics.quantum	CNotGate	min_qubits		the minimum number of qubits this gate needs to act on
physics.quantum	CNotGate	targets		a tuple of target qubits
physics.quantum	CNotGate	controls		a tuple of control qubits
physics.quantum	CNotGate	gate		the non-controlled gate that will be applied to the targets
physics.quantum	CNotGate	_eval_commutator_ZGate	other	[cnot i j z i ] == 0
physics.quantum	CNotGate	_eval_commutator_TGate	other	[cnot i j t i ] == 0
physics.quantum	CNotGate	_eval_commutator_PhaseGate	other	[cnot i j s i ] == 0
physics.quantum	CNotGate	_eval_commutator_XGate	other	[cnot i j x j ] == 0
physics.quantum	CNotGate	_eval_commutator_CNotGate	other	[cnot i j cnot i k ] == 0
physics.quantum	SwapGate	decompose		decompose the swap gate into cnot gates
physics.quantum	SwapGate	_represent_ZGate	basis	represent the swap gate in the computational basis
physics.quantum		represent_zbasis	controls targets target_matrix nqubits	represent a gate with controls targets and target_matrix
physics.quantum		gate_simp	circuit	simplifies gates symbolically it first sorts gates using gate_sort
physics.quantum		gate_sort	circuit	sorts the gates while keeping track of commutation relations this function uses a bubble sort to rearrange the order of gate
physics.quantum		random_circuit	ngates nqubits gate_space	return a random circuit of ngates and nqubits
physics.quantum		zx_basis_transform	format	transformation matrix from z to x basis
physics.quantum		zy_basis_transform	format	transformation matrix from z to y basis
physics.quantum		superposition_basis	nqubits	creates an equal superposition of the computational basis
physics.quantum	OracleGate	_eval_hilbert_space	cls args	this returns the smallest possible hilbert space
physics.quantum	OracleGate	search_function		the unknown function that helps find the sought after qubits
physics.quantum	OracleGate	targets		a tuple of target qubits
physics.quantum	OracleGate	_apply_operator_Qubit	qubits	apply this operator to a qubit subclass
physics.quantum	OracleGate	_represent_ZGate	basis	represent the oraclegate in the computational basis
physics.quantum	WGate	_apply_operator_Qubit	qubits	qubits a set of qubits qubit
physics.quantum		grover_iteration	qstate oracle	applies one application of the oracle and w gate wv
physics.quantum		apply_grover	oracle nqubits iterations	applies grover's algorithm
physics.quantum		_qsimplify_pauli_product	a b	internal helper function for simplifying products of pauli operators
physics.quantum		qsimplify_pauli	e	simplify an expression that includes products of pauli operators
physics.quantum	HilbertSpace	dimension		return the hilbert dimension of the space
physics.quantum	HilbertSpace	__contains__	other	is the operator or state in this hilbert space
physics.quantum	TensorProductHilbertSpace	eval	cls args	evaluates the direct product
physics.quantum	TensorProductHilbertSpace	spaces		a tuple of the hilbert spaces in this tensor product
physics.quantum	DirectSumHilbertSpace	eval	cls args	evaluates the direct product
physics.quantum	DirectSumHilbertSpace	spaces		a tuple of the hilbert spaces in this direct sum
physics.quantum		cg_simp	e	simplify and combine cg coefficients this function uses various symmetry and properties of sums and
physics.quantum		_cg_simp_add	e	takes a sum of terms involving clebsch-gordan coefficients and simplifies the terms
physics.quantum		_check_cg_simp	expr simp sign lt	checks for simplifications that can be made returning a tuple of the simplified list of terms and any terms generated by simplification
physics.quantum		_check_cg	cg_term expr length sign	checks whether a term matches the given expression
physics.quantum		sympy_to_numpy	m	convert a sympy matrix/complex number to a numpy matrix or scalar
physics.quantum		sympy_to_scipy_sparse	m	convert a sympy matrix/complex number to a numpy matrix or scalar
physics.quantum		scipy_sparse_to_sympy	m	convert a scipy sparse matrix to a sympy matrix
physics.quantum		numpy_to_sympy	m	convert a numpy matrix to a sympy matrix
physics.quantum		to_sympy	m	convert a numpy/scipy sparse matrix to a sympy matrix
physics.quantum		to_numpy	m	convert a sympy/scipy sparse matrix to a numpy matrix
physics.quantum		to_scipy_sparse	m	convert a sympy/numpy matrix to a scipy sparse matrix
physics.quantum		flatten_scalar	e	flatten a 1x1 matrix to a scalar return larger matrices unchanged
physics.quantum		matrix_dagger	e	return the dagger of a sympy/numpy/scipy sparse matrix
physics.quantum		_sympy_tensor_product		compute the tensor product of a sequence of sympy matrices
physics.quantum		_numpy_tensor_product		numpy version of tensor product of multiple arguments
physics.quantum		_scipy_sparse_tensor_product		scipy sparse version of tensor product of multiple arguments
physics.quantum		matrix_tensor_product		compute the matrix tensor product of sympy/numpy/scipy sparse matrices
physics.quantum		_numpy_eye	n	numpy version of complex eye
physics.quantum		_scipy_sparse_eye	n	scipy sparse version of complex eye
physics.quantum		matrix_eye	n	get the version of eye and tensor_product for a given format
physics.quantum		_numpy_zeros	m n	numpy verson of zeros
physics.quantum		_scipy_sparse_zeros	m n	scipy sparse verson of zeros
physics.quantum		matrix_zeros	m n	"get a zeros matrix for a given format
physics.quantum		_numpy_matrix_to_zero	e	convert a numpy zero matrix to the zero scalar
physics.quantum		_scipy_sparse_matrix_to_zero	e	convert a scipy sparse zero matrix to the zero scalar
physics.quantum		matrix_to_zero	e	convert a zero matrix to the scalar zero
physics.quantum		render_label	label inits	slightly more flexible way to render labels
physics.quantum		labeller	n symbol	autogenerate labels for wires of quantum circuits
physics.quantum		CreateCGate	name latexname	use a lexical closure to make a controlled gate
physics.quantum		combined_tensor_printing	combined	set flag controlling whether tensor products of states should be printed as a combined bra/ket or as an explicit tensor product of different
physics.quantum	TensorProduct	_eval_expand_tensorproduct		distribute tensorproducts across addition
physics.quantum		tensor_product_simp_Mul	e	simplify a mul with tensorproducts
physics.quantum		tensor_product_simp	e	try to simplify and combine tensorproducts
physics.quantum	Fourier	_represent_ZGate	basis	represents the i qft in the z basis
physics.quantum	Fourier	size		size is the size of the qft matrix
physics.quantum	QFT	decompose		decomposes qft into elementary gates
physics.quantum	IQFT	decompose		decomposes iqft into elementary gates
physics.quantum	Rotation	d	cls j m mp	wigner small-d function
physics.quantum		couple	expr jcoupling_list	couple a tensor product of spin states this function can be used to couple an uncoupled tensor product of spin
physics.quantum		uncouple	expr jn jcoupling_list	uncouple a coupled spin state gives the uncoupled representation of a coupled spin state
physics.quantum		flip_index	i n	reorder qubit indices from largest to smallest
physics.quantum		trim	line	remove everything following comment # characters in line
physics.quantum		get_index	target labels	get qubit labels from the rest of the line and return indices >>> from sympy
physics.quantum		fixcommand	c	fix qasm command names
physics.quantum		stripquotes	s	replace explicit quotes in a string
physics.quantum		is_scalar_sparse_matrix	circuit nqubits identity_only eps	checks if a given scipy sparse matrix is a scalar matrix
physics.quantum		is_scalar_nonsparse_matrix	circuit nqubits identity_only	checks if a given circuit in matrix form is equivalent to a scalar value
physics.quantum		ll_op	left right	perform a ll operation
physics.quantum		lr_op	left right	perform a lr operation
physics.quantum		rl_op	left right	perform a rl operation
physics.quantum		rr_op	left right	perform a rr operation
physics.quantum		generate_gate_rules	gate_seq return_as_muls	returns a set of gate rules each gate rules is represented
physics.quantum		generate_equivalent_ids	gate_seq return_as_muls	returns a set of equivalent gate identities
physics.quantum	GateIdentity	__str__		returns the string of gates in a tuple
physics.quantum		is_degenerate	identity_set gate_identity	checks if a gate identity is a permutation of another identity
physics.quantum		is_reducible	circuit nqubits begin end	determines if a circuit is reducible by checking if its subcircuits are scalar values
physics.quantum		bfs_identity_search	gate_list nqubits max_depth identity_only	constructs a set of gate identities from the list of possible gates
physics.quantum		random_identity_search	gate_list numgates nqubits	randomly selects numgates from gate_list and checks if it is a gate identity
physics.quantum		_qsympify_sequence	seq	convert elements of a sequence to standard form
physics.quantum		__qsympify_sequence_helper	seq	helper function for _qsympify_sequence this function does the actual work
physics.quantum	QExpr	__new__	cls	construct a new quantum object
physics.quantum	QExpr	_new_rawargs	cls hilbert_space	create new instance of this class with hilbert_space and args
physics.quantum	QExpr	label		the label is the unique set of identifiers for the object
physics.quantum	QExpr	default_args		if no arguments are specified then this will return a default set of arguments to be run through the constructor
physics.quantum	QExpr	_eval_args	cls args	process the args passed to the __new__ method
physics.quantum	QExpr	_eval_hilbert_space	cls args	compute the hilbert space instance from the args
physics.quantum	QExpr	_print_label	printer	prints the label of the qexpr this method prints self
physics.quantum	QExpr	_print_contents	printer	printer for contents of qexpr handles the printing of any unique identifying contents of a qexpr to
physics.quantum	QExpr	_sympystr	printer	default printing behavior of qexpr objects handles the default printing of a qexpr
physics.quantum	QExpr	_represent		represent this object in a given basis
physics.quantum		split_commutative_parts	e	split into commutative and non-commutative parts
physics.quantum		split_qexpr_parts	e	split an expression into expr and noncommutative qexpr parts
physics.quantum		dispatch_method	basename arg	dispatch a method to the proper handlers
physics.quantum	XKet	position		the position of the state
physics.quantum	XBra	position		the position of the state
physics.quantum	PositionState3D	position_x		the x coordinate of the state
physics.quantum	PositionState3D	position_y		the y coordinate of the state
physics.quantum	PositionState3D	position_z		the z coordinate of the state
physics.quantum	PxKet	momentum		the momentum of the state
physics.quantum	PxBra	momentum		the momentum of the state
physics.quantum		operators_to_state	operators	returns the eigenstate of the given operator or set of operators a global function for mapping operator classes to their associated
physics.quantum		state_to_operators	state	returns the operator or set of operators corresponding to the given eigenstate
physics.quantum		qapply	e	apply operators to states in a quantum expression
physics.quantum		_expand_powers	factors	helper function for normal_ordered_form and normal_order expand a power expression to a multiplication expression so that that the
physics.quantum		_normal_ordered_form_factor	product independent recursive_limit _recursive_depth	helper function for normal_ordered_form_factor write multiplication expression with bosonic or fermionic operators on normally ordered form
physics.quantum		_normal_ordered_form_terms	expr independent recursive_limit _recursive_depth	helper function for normal_ordered_form loop through each term in an addition expression and call _normal_ordered_form_factor to perform the
physics.quantum		normal_ordered_form	expr independent recursive_limit _recursive_depth	write an expression with bosonic or fermionic operators on normal ordered form where each term is normally ordered
physics.quantum		_normal_order_factor	product recursive_limit _recursive_depth	helper function for normal_order normal order a multiplication expression with bosonic or fermionic operators
physics.quantum		_normal_order_terms	expr recursive_limit _recursive_depth	helper function for normal_order look through each term in an addition expression and call _normal_order_factor to perform the normal ordering
physics.quantum		normal_order	expr recursive_limit _recursive_depth	normal order an expression with bosonic or fermionic operators note
physics.hep		extract_type_tens	expression component	extract from a tensexpr all tensors with component
physics.hep		simplify_gpgp	ex sort	simplify products g i *p -i *g j *p -j -> p i *p -i examples
physics.hep		gamma_trace	t	trace of a single line of gamma matrices examples
physics.hep		_simplify_single_line	expression	simplify single-line product of gamma matrices
physics.hep		_trace_single_line	t	evaluate the trace of a single gamma matrix line inside a tensexpr
physics.hep		kahane_simplify	expression	this function cancels contracted elements in a product of four dimensional gamma matrices resulting in an expression equal to the given
physics.units	Dimension	__str__		display the string representation of the dimension
physics.units	Dimension	__add__	other	define the addition for dimension
physics.units	Dimension	is_dimensionless		check if the dimension object really has a dimension
physics.units	Dimension	has_integer_powers		check if the dimension object has only integer powers
physics.units	DimensionSystem	__init__	base dims name descr	initialize the dimension system
physics.units	DimensionSystem	__str__		return the name of the system
physics.units	DimensionSystem	__getitem__	key	shortcut to the get_dim method using key access
physics.units	DimensionSystem	__call__	unit	wrapper to the method print_dim_base
physics.units	DimensionSystem	get_dim	dim	find a specific dimension which is part of the system
physics.units	DimensionSystem	extend	base dims name description	extend the current system into a new one
physics.units	DimensionSystem	sort_dims	dims	sort dimensions given in argument using their str function
physics.units	DimensionSystem	list_can_dims		list all canonical dimension names
physics.units	DimensionSystem	inv_can_transf_matrix		compute the inverse transformation matrix from the base to the canonical dimension basis
physics.units	DimensionSystem	can_transf_matrix		return the canonical transformation matrix from the canonical to the base dimension basis
physics.units	DimensionSystem	dim_can_vector	dim	dimensional representation in terms of the canonical base dimensions
physics.units	DimensionSystem	dim_vector	dim	vector representation in terms of the base dimensions
physics.units	DimensionSystem	print_dim_base	dim	give the string expression of a dimension in term of the basis symbols
physics.units	DimensionSystem	dim		give the dimension of the system
physics.units	DimensionSystem	is_consistent		check if the system is well defined
physics.units		dim_simplify	expr	note this function could be deprecated in the future
physics.units		convert_to	expr target_units	convert expr to the same expression with all of its units and quantities represented as factors of target_units, whenever the dimension is compatible
physics.units	UnitSystem	__str__		return the name of the system
physics.units	UnitSystem	__getitem__	key	shortcut to the get_unit method using key access
physics.units	UnitSystem	extend	base units name description	extend the current system into a new one
physics.units	UnitSystem	print_unit_base	unit	give the string expression of a unit in term of the basis
physics.units	UnitSystem	dim		give the dimension of the system
physics.units	UnitSystem	is_consistent		check if the underlying dimension system is consistent
physics.units	Quantity	abbrev		symbol representing the unit name
physics.units	Quantity	scale_factor		overall magnitude of the quantity as compared to the canonical units
physics.units	Quantity	convert_to	other	convert the quantity to another quantity of same dimensions
physics.units		prefix_unit	unit prefixes	return a list of all units formed by unit and the given prefixes
physics.units		find_unit	quantity	return a list of matching units or dimension names
physics.optics	RayTransferMatrix	A		the a parameter of the matrix
physics.optics	RayTransferMatrix	B		the b parameter of the matrix
physics.optics	RayTransferMatrix	C		the c parameter of the matrix
physics.optics	RayTransferMatrix	D		the d parameter of the matrix
physics.optics	GeometricRay	height		the distance from the optical axis
physics.optics	GeometricRay	angle		the angle with the optical axis
physics.optics	BeamParameter	q		the complex parameter representing the beam
physics.optics	BeamParameter	radius		the radius of curvature of the phase front
physics.optics	BeamParameter	w		the beam radius at 1/e^2 intensity
physics.optics	BeamParameter	w_0		the beam waist minimal radius
physics.optics	BeamParameter	divergence		half of the total angular spread
physics.optics	BeamParameter	gouy		the gouy phase
physics.optics	BeamParameter	waist_approximation_limit		the minimal waist for which the gauss beam approximation is valid
physics.optics		waist2rayleigh	w wavelen	calculate the rayleigh range from the waist of a gaussian beam
physics.optics		rayleigh2waist	z_r wavelen	calculate the waist from the rayleigh range of a gaussian beam
physics.optics		geometric_conj_ab	a b	conjugation relation for geometrical beams under paraxial conditions
physics.optics		geometric_conj_af	a f	conjugation relation for geometrical beams under paraxial conditions
physics.optics		gaussian_conj	s_in z_r_in f	conjugation relation for gaussian beams
physics.optics		conjugate_gauss_beams	wavelen waist_in waist_out	find the optical setup conjugating the object/image waists
physics.optics	Medium	intrinsic_impedance		returns intrinsic impedance of the medium
physics.optics	Medium	speed		returns speed of the electromagnetic wave travelling in the medium
physics.optics	Medium	refractive_index		returns refractive index of the medium
physics.optics	Medium	permittivity		returns electric permittivity of the medium
physics.optics	Medium	permeability		returns magnetic permeability of the medium
physics.optics	Medium	__lt__	other	compares based on refractive index of the medium
physics.optics		refraction_angle	incident medium1 medium2 normal	this function calculates transmitted vector after refraction at planar surface
physics.optics		deviation	incident medium1 medium2 normal	this function calculates the angle of deviation of a ray due to refraction at planar surface
physics.optics		lens_makers_formula	n_lens n_surr r1 r2	this function calculates focal length of a thin lens
physics.optics		mirror_formula	focal_length u v	this function provides one of the three parameters when two of them are supplied
physics.optics		lens_formula	focal_length u v	this function provides one of the three parameters when two of them are supplied
physics.optics	TWave	frequency		returns the frequency of the wave
physics.optics	TWave	time_period		returns the time period of the wave
physics.optics	TWave	wavelength		returns wavelength of the wave
physics.optics	TWave	amplitude		returns the amplitude of the wave
physics.optics	TWave	phase		returns the phase angle of the wave
physics.optics	TWave	speed		returns the speed of travelling wave
physics.optics	TWave	angular_velocity		returns angular velocity of the wave
physics.optics	TWave	wavenumber		returns wavenumber of the wave
physics.optics	TWave	__str__		string representation of a twave
physics.optics	TWave	__add__	other	addition of two waves will result in their superposition
physics.vector		cross	vec1 vec2	cross product convenience wrapper for vector cross():
physics.vector		dot	vec1 vec2	dot product convenience wrapper for vector dot():
physics.vector		express	expr frame frame2 variables	global function for 'express' functionality
physics.vector		time_derivative	expr frame order	calculate the time derivative of a vector/scalar field function or dyadic expression in given frame
physics.vector		outer	vec1 vec2	outer product convenience wrapper for vector outer():
physics.vector		kinematic_equations	speeds coords rot_type rot_order	gives equations relating the qdot's to u's for a rotation type
physics.vector		get_motion_params	frame	returns the three motion parameters - acceleration velocity and position as vectorial functions of time in the given frame
physics.vector		partial_velocity	vel_vecs gen_speeds frame	returns a list of partial velocities with respect to the provided generalized speeds in the given reference frame for each of the supplied
physics.vector		dynamicsymbols	names level	uses symbols and function for functions of time
physics.vector		vprint	expr	function for printing of expressions generated in the sympy
physics.vector		vsstrrepr	expr	function for displaying expression representation's with vector printing enabled
physics.vector		vsprint	expr	function for displaying expressions generated in the sympy
physics.vector		vpprint	expr	function for pretty printing of expressions generated in the sympy
physics.vector		vlatex	expr	function for printing latex representation of sympy physics vector
physics.vector		init_vprinting		initializes time derivative printing for all sympy objects i e any
physics.vector		curl	vect frame	returns the curl of a vector field computed wrt the coordinate symbols of the given frame
physics.vector		divergence	vect frame	returns the divergence of a vector field computed wrt the coordinate symbols of the given frame
physics.vector		gradient	scalar frame	returns the vector gradient of a scalar field computed wrt the coordinate symbols of the given frame
physics.vector		is_conservative	field	checks if a field is conservative
physics.vector		is_solenoidal	field	checks if a field is solenoidal
physics.vector		scalar_potential	field frame	returns the scalar potential function of a field in a given frame without the added integration constant
physics.vector		scalar_potential_difference	field frame point1 point2	returns the scalar potential difference between two points in a certain frame wrt a given field
physics.vector	Vector	__init__	inlist	this is the constructor for the vector class you shouldn't be
physics.vector	Vector	__add__	other	the add operator for vector
physics.vector	Vector	__and__	other	dot product of two vectors
physics.vector	Vector	__div__	other	this uses mul and inputs self and 1 divided by other
physics.vector	Vector	__eq__	other	tests for equality
physics.vector	Vector	__mul__	other	multiplies the vector by a sympifyable expression
physics.vector	Vector	__or__	other	outer product between two vectors
physics.vector	Vector	_latex	printer	latex printing method
physics.vector	Vector	_pretty	printer	pretty printing method
physics.vector	Vector	__ror__	other	outer product between two vectors
physics.vector	Vector	__sub__	other	the subraction operator
physics.vector	Vector	__xor__	other	the cross product operator for two vectors
physics.vector	Vector	separate		the constituents of this vector in different reference frames as per its definition
physics.vector	Vector	diff	var frame var_in_dcm	returns the partial derivative of the vector with respect to a variable in the provided reference frame
physics.vector	Vector	express	otherframe variables	returns a vector equivalent to this one expressed in otherframe
physics.vector	Vector	to_matrix	reference_frame	returns the matrix form of the vector with respect to the given frame
physics.vector	Vector	doit		calls doit() on each term in the vector
physics.vector	Vector	dt	otherframe	returns a vector which is the time derivative of the self vector taken in frame otherframe
physics.vector	Vector	simplify		returns a simplified vector
physics.vector	Vector	subs		substituion on the vector
physics.vector	Vector	magnitude		returns the magnitude euclidean norm of self
physics.vector	Vector	normalize		returns a vector of magnitude 1 codirectional with self
physics.vector	Vector	applyfunc	f	apply a function to each component of a vector
physics.vector	Point	__init__	name	initialization of a point object
physics.vector	Point	_pdict_list	other num	creates a list from self to other using _dcm_dict
physics.vector	Point	a1pt_theory	otherpoint outframe interframe	sets the acceleration of this point with the 1-point theory
physics.vector	Point	a2pt_theory	otherpoint outframe fixedframe	sets the acceleration of this point with the 2-point theory
physics.vector	Point	acc	frame	the acceleration vector of this point in a referenceframe
physics.vector	Point	locatenew	name value	creates a new point with a position defined from this point
physics.vector	Point	pos_from	otherpoint	returns a vector distance between this point and the other point
physics.vector	Point	set_acc	frame value	used to set the acceleration of this point in a referenceframe
physics.vector	Point	set_pos	otherpoint value	used to set the position of this point w r t another point
physics.vector	Point	set_vel	frame value	sets the velocity vector of this point in a referenceframe
physics.vector	Point	v1pt_theory	otherpoint outframe interframe	sets the velocity of this point with the 1-point theory
physics.vector	Point	v2pt_theory	otherpoint outframe fixedframe	sets the velocity of this point with the 2-point theory
physics.vector	Point	vel	frame	the velocity vector of this point in the referenceframe
physics.vector	Point	partial_velocity	frame	returns the partial velocities of the linear velocity vector of this point in the given frame with respect to one or more provided
physics.vector	ReferenceFrame	__init__	name indices latexs variables	referenceframe initialization method
physics.vector	ReferenceFrame	__getitem__	ind	returns basis vector for the provided index if the index is a string
physics.vector	ReferenceFrame	__str__		returns the name of the frame
physics.vector	ReferenceFrame	_dict_list	other num	creates a list from self to other using _dcm_dict
physics.vector	ReferenceFrame	_w_diff_dcm	otherframe	angular velocity from time differentiating the dcm
physics.vector	ReferenceFrame	variable_map	otherframe	returns a dictionary which expresses the coordinate variables of this frame in terms of the variables of otherframe
physics.vector	ReferenceFrame	ang_acc_in	otherframe	returns the angular acceleration vector of the referenceframe
physics.vector	ReferenceFrame	ang_vel_in	otherframe	returns the angular velocity vector of the referenceframe
physics.vector	ReferenceFrame	dcm	otherframe	the direction cosine matrix between frames
physics.vector	ReferenceFrame	orient	parent rot_type amounts rot_order	defines the orientation of this frame relative to a parent frame
physics.vector	ReferenceFrame	orientnew	newname rot_type amounts rot_order	creates a new referenceframe oriented with respect to this frame
physics.vector	ReferenceFrame	set_ang_acc	otherframe value	define the angular acceleration vector in a referenceframe
physics.vector	ReferenceFrame	set_ang_vel	otherframe value	define the angular velocity vector in a referenceframe
physics.vector	ReferenceFrame	x		the basis vector for the referenceframe in the x direction
physics.vector	ReferenceFrame	y		the basis vector for the referenceframe in the y direction
physics.vector	ReferenceFrame	z		the basis vector for the referenceframe in the z direction
physics.vector	ReferenceFrame	partial_velocity	frame	returns the partial angular velocities of this frame in the given frame with respect to one or more provided generalized speeds
physics.vector	Dyadic	__init__	inlist	just like vector's init you shouldn't call this unless creating a zero dyadic
physics.vector	Dyadic	__add__	other	the add operator for dyadic
physics.vector	Dyadic	__and__	other	the inner product operator for a dyadic and a dyadic or vector
physics.vector	Dyadic	__div__	other	divides the dyadic by a sympifyable expression
physics.vector	Dyadic	__eq__	other	tests for equality
physics.vector	Dyadic	__mul__	other	multiplies the dyadic by a sympifyable expression
physics.vector	Dyadic	__rand__	other	the inner product operator for a vector or dyadic and a dyadic this is for vector dot dyadic
physics.vector	Dyadic	__rxor__	other	for a cross product in the form vector x dyadic parameters
physics.vector	Dyadic	__sub__	other	the subtraction operator
physics.vector	Dyadic	__xor__	other	for a cross product in the form dyadic x vector
physics.vector	Dyadic	express	frame1 frame2	expresses this dyadic in alternate frame s the first frame is the list side expression the second frame is the
physics.vector	Dyadic	to_matrix	reference_frame second_reference_frame	returns the matrix form of the dyadic with respect to one or two reference frames
physics.vector	Dyadic	doit		calls doit() on each term in the dyadic
physics.vector	Dyadic	dt	frame	take the time derivative of this dyadic in a frame
physics.vector	Dyadic	simplify		returns a simplified dyadic
physics.vector	Dyadic	subs		substituion on the dyadic
physics.vector	Dyadic	applyfunc	f	apply a function to each component of a dyadic
liealgebras	TypeG	dimension		dimension of the vector space v underlying the lie algebra examples
liealgebras	TypeG	simple_root	i	the ith simple root of g_2 every lie algebra has a unique root system
liealgebras	TypeG	positive_roots		generate all the positive roots of a_n this is half of all of the roots of a_n by multiplying all the
liealgebras	TypeG	roots		returns the total number of roots of g_2"
liealgebras	TypeG	cartan_matrix		the cartan matrix for g_2 the cartan matrix matrix for a lie algebra is
liealgebras	TypeG	basis		returns the number of independent generators of g_2
liealgebras	TypeA	dimension		dimension of the vector space v underlying the lie algebra examples
liealgebras	TypeA	basic_root	i j	this is a method just to generate roots with a 1 iin the ith position and a -1
liealgebras	TypeA	simple_root	i	every lie algebra has a unique root system
liealgebras	TypeA	positive_roots		this method generates all the positive roots of a_n
liealgebras	TypeA	highest_root		returns the heighest weight root for a_n
liealgebras	TypeA	roots		returns the total number of roots for a_n
liealgebras	TypeA	cartan_matrix		returns the cartan matrix for a_n
liealgebras	TypeA	basis		returns the number of independent generators of a_n
liealgebras	TypeA	lie_algebra		returns the lie algebra associated with a_n
liealgebras	TypeB	dimension		dimension of the vector space v underlying the lie algebra examples
liealgebras	TypeB	basic_root	i j	this is a method just to generate roots with a 1 iin the ith position and a -1
liealgebras	TypeB	simple_root	i	every lie algebra has a unique root system
liealgebras	TypeB	positive_roots		this method generates all the positive roots of a_n
liealgebras	TypeB	roots		returns the total number of roots for b_n"
liealgebras	TypeB	cartan_matrix		returns the cartan matrix for b_n
liealgebras	TypeB	basis		returns the number of independent generators of b_n
liealgebras	TypeB	lie_algebra		returns the lie algebra associated with b_n
liealgebras		CartanMatrix	ct	access the cartan matrix of a specific lie algebra examples
liealgebras	RootSystem	__new__	cls cartantype	create a new rootsystem object this method assigns an attribute called cartan_type to each instance of
liealgebras	RootSystem	simple_roots		generate the simple roots of the lie algebra the rank of the lie algebra determines the number of simple roots that
liealgebras	RootSystem	all_roots		generate all the roots of a given root system the result is a dictionary where the keys are integer numbers
liealgebras	RootSystem	root_space		return the span of the simple roots the root space is the vector space spanned by the simple roots i
liealgebras	RootSystem	add_simple_roots	root1 root2	add two simple roots together the function takes as input two integers root1 and root2
liealgebras	RootSystem	add_as_roots	root1 root2	add two roots together if and only if their sum is also a root it takes as input two vectors which should be roots
liealgebras	RootSystem	cartan_matrix		cartan matrix of lie algebra associated with this root system examples
liealgebras	RootSystem	dynkin_diagram		dynkin diagram of the lie algebra associated with this root system examples
liealgebras	TypeC	dimension		dimension of the vector space v underlying the lie algebra examples
liealgebras	TypeC	basic_root	i j	generate roots with 1 in ith position and a -1 in jth postion
liealgebras	TypeC	simple_root	i	the ith simple root for the c series every lie algebra has a unique root system
liealgebras	TypeC	positive_roots		generates all the positive roots of a_n this is half of all of the roots of c_n by multiplying all the
liealgebras	TypeC	roots		returns the total number of roots for c_n"
liealgebras	TypeC	cartan_matrix		the cartan matrix for c_n the cartan matrix matrix for a lie algebra is
liealgebras	TypeC	basis		returns the number of independent generators of c_n
liealgebras	TypeC	lie_algebra		returns the lie algebra associated with c_n"
liealgebras	WeylGroup	generators		this method creates the generating reflections of the weyl group for a given lie algebra
liealgebras	WeylGroup	group_order		this method returns the order of the weyl group
liealgebras	WeylGroup	group_name		this method returns some general information about the weyl group for a given lie algebra
liealgebras	WeylGroup	element_order	weylelt	this method returns the order of a given weyl group element which should be specified by the user in the form of products of the generating
liealgebras	WeylGroup	delete_doubles	reflections	this is a helper method for determining the order of an element in the weyl group of g2
liealgebras	WeylGroup	matrix_form	weylelt	this method takes input from the user in the form of products of the generating reflections and returns the matrix corresponding to the
liealgebras	WeylGroup	coxeter_diagram		this method returns the coxeter diagram corresponding to a weyl group
liealgebras	Standard_Cartan	rank		returns the rank of the lie algebra
liealgebras	Standard_Cartan	series		returns the type of the lie algebra
liealgebras	TypeD	dimension		dmension of the vector space v underlying the lie algebra examples
liealgebras	TypeD	basic_root	i j	this is a method just to generate roots with a 1 iin the ith position and a -1
liealgebras	TypeD	simple_root	i	every lie algebra has a unique root system
liealgebras	TypeD	positive_roots		this method generates all the positive roots of a_n
liealgebras	TypeD	roots		returns the total number of roots for d_n"
liealgebras	TypeD	cartan_matrix		returns the cartan matrix for d_n
liealgebras	TypeD	basis		returns the number of independent generators of d_n
liealgebras	TypeD	lie_algebra		returns the lie algebra associated with d_n"
liealgebras	TypeF	dimension		dimension of the vector space v underlying the lie algebra examples
liealgebras	TypeF	basic_root	i j	generate roots with 1 in ith position and -1 in jth postion
liealgebras	TypeF	simple_root	i	the ith simple root of f_4 every lie algebra has a unique root system
liealgebras	TypeF	positive_roots		generate all the positive roots of a_n this is half of all of the roots of f_4 by multiplying all the
liealgebras	TypeF	roots		returns the total number of roots for f_4
liealgebras	TypeF	cartan_matrix		the cartan matrix for f_4 the cartan matrix matrix for a lie algebra is
liealgebras	TypeF	basis		returns the number of independent generators of f_4
liealgebras	TypeE	dimension		dimension of the vector space v underlying the lie algebra examples
liealgebras	TypeE	basic_root	i j	this is a method just to generate roots with a -1 in the ith position and a 1
liealgebras	TypeE	simple_root	i	every lie algebra has a unique root system
liealgebras	TypeE	positive_roots		this method generates all the positive roots of a_n
liealgebras	TypeE	roots		returns the total number of roots of e_n
liealgebras	TypeE	cartan_matrix		returns the cartan matrix for g_2 the cartan matrix matrix for a lie algebra is
liealgebras	TypeE	basis		returns the number of independent generators of e_n
liealgebras		DynkinDiagram	t	display the dynkin diagram of a given lie algebra works by generating the cartantype for the input t and then returning the
codegen	expm1	fdiff	argindex	returns the first derivative of this function
codegen	log1p	fdiff	argindex	returns the first derivative of this function
codegen	exp2	fdiff	argindex	returns the first derivative of this function
codegen	log2	fdiff	argindex	returns the first derivative of this function
codegen	fma	fdiff	argindex	returns the first derivative of this function
codegen	log10	fdiff	argindex	returns the first derivative of this function
codegen	Sqrt	fdiff	argindex	returns the first derivative of this function
codegen	Cbrt	fdiff	argindex	returns the first derivative of this function
codegen	hypot	fdiff	argindex	returns the first derivative of this function
codegen		aug_assign	lhs op rhs	create 'lhs op= rhs'
codegen	CodeBlock	topological_sort	cls assignments	return a codeblock with topologically sorted assignments so that variables are assigned before they are used
codegen	CodeBlock	cse	symbols optimizations postprocess order	return a new code block with common subexpressions eliminated see the docstring of :func sympy
codegen	For	target		return the symbol target from the for-loop representation
codegen	For	iterable		return the iterable from the for-loop representation
codegen	For	body		return the sympy expression body from the for-loop representation
combinatorics		AbelianGroup		returns the direct product of cyclic groups with the given orders
combinatorics		AlternatingGroup	n	generates the alternating group on n elements as a permutation group
combinatorics		CyclicGroup	n	generates the cyclic group of order n as a permutation group
combinatorics		DihedralGroup	n	generates the dihedral group d_n as a permutation group
combinatorics		SymmetricGroup	n	generates the symmetric group on n elements as a permutation group
combinatorics		RubikGroup	n	return a group of rubik's cube generators >>> from sympy
combinatorics	Prufer	prufer_repr		returns prufer sequence for the prufer object
combinatorics	Prufer	tree_repr		returns the tree representation of the prufer object
combinatorics	Prufer	nodes		returns the number of nodes in the tree
combinatorics	Prufer	rank		returns the rank of the prufer sequence
combinatorics	Prufer	size		return the number of possible trees of this prufer object
combinatorics	Prufer	to_prufer	tree n	return the prufer sequence for a tree given as a list of edges where n is the number of nodes in the tree
combinatorics	Prufer	to_tree	prufer	return the tree as a list of edges of the given prufer sequence
combinatorics	Prufer	edges		return a list of edges and the number of nodes from the given runs that connect nodes in an integer-labelled tree
combinatorics	Prufer	prufer_rank		computes the rank of a prufer sequence
combinatorics	Prufer	unrank	rank n	finds the unranked prufer sequence
combinatorics	Prufer	__new__	cls	the constructor for the prufer object
combinatorics	Prufer	next	delta	generates the prufer sequence that is delta beyond the current one
combinatorics	Prufer	prev	delta	generates the prufer sequence that is -delta before the current one
combinatorics		dummy_sgs	dummies sym n	return the strong generators for dummy indices parameters
combinatorics		_min_dummies	dummies sym indices	return list of minima of the orbits of indices in group of dummies see double_coset_can_rep for the description of dummies and sym
combinatorics		_trace_S	s j b S_cosets	return the representative h satisfying s[h[b]] == j
combinatorics		_trace_D	gj p_i Dxtrav	return the representative h satisfying h[gj] == p_i
combinatorics		_dumx_remove	dumx dumx_flat p0	remove p0 from dumx
combinatorics		double_coset_can_rep	dummies sym b_S sgens	butler-portugal algorithm for tensor canonicalization with dummy indices dummies
combinatorics		canonical_free	base gens g num_free	canonicalization of a tensor with respect to free indices choosing the minimum with respect to lexicographical ordering
combinatorics		canonicalize	g dummies msym	canonicalize tensor formed by tensors parameters
combinatorics		perm_af_direct_product	gens1 gens2 signed	direct products of the generators gens1 and gens2 examples
combinatorics		bsgs_direct_product	base1 gens1 base2 gens2	direct product of two bsgs base1 base of the first bsgs
combinatorics		get_symmetric_group_sgs	n antisym	return base gens of the minimal bsgs for anti symmetric tensor n rank of the tensor
combinatorics		get_transversals	base gens	return transversals for the group with bsgs base gens
combinatorics		_is_minimal_bsgs	base gens	check if the bsgs has minimal base under lexigographic order
combinatorics		get_minimal_bsgs	base gens	compute a minimal gsgs base gens bsgs
combinatorics		tensor_gens	base gens list_free_indices sym	returns size res_base res_gens bsgs for n tensors of the same type
combinatorics		gens_products		returns size res_base res_gens bsgs for n tensors of different types v is a sequence of (base_i gens_i free_i sym_i)
combinatorics		_base_ordering	base degree	order \{0 1 n-1\} so that base points come first and in order
combinatorics		_check_cycles_alt_sym	perm	checks for cycles of prime length p with n/2 < p < n-2
combinatorics		_distribute_gens_by_base	base gens	distribute the group elements gens by membership in basic stabilizers
combinatorics		_handle_precomputed_bsgs	base strong_gens transversals basic_orbits	calculate bsgs-related structures from those present
combinatorics		_orbits_transversals_from_bsgs	base strong_gens_distr transversals_only	compute basic orbits and transversals from a base and strong generating set
combinatorics		_remove_gens	base strong_gens basic_orbits strong_gens_distr	remove redundant generators from a strong generating set
combinatorics		_strip	g base orbits transversals	attempt to decompose a permutation using a possibly partial bsgs structure
combinatorics		_strip_af	h base orbits transversals	optimized _strip with h transversals and result in array form
combinatorics		_strong_gens_from_distr	strong_gens_distr	retrieve strong generating set from generators of basic stabilizers
combinatorics		_af_rmul	a b	return the product b*a input and output are array forms the ith value
combinatorics		_af_rmuln		given [a b c ] return the product of *c*b*a using array forms
combinatorics		_af_parity	pi	computes the parity of a permutation in array form
combinatorics		_af_invert	a	finds the inverse ~a of a permutation a given in array form
combinatorics		_af_pow	a n	routine for finding powers of a permutation
combinatorics		_af_commutes_with	a b	checks if the two permutations with array forms given by a and b commute
combinatorics	Cycle	__missing__	arg	enter arg into dictionary and return arg
combinatorics	Cycle	__call__		return product of cycles processed from r to l
combinatorics	Cycle	list	size	return the cycles as an explicit list starting from 0 up to the greater of the largest value in the cycles and size
combinatorics	Cycle	__repr__		we want it to print as a cycle not as a dict
combinatorics	Cycle	__str__		we want it to be printed in a cycle notation with no comma in-between
combinatorics	Cycle	__init__		load up a cycle instance with the values for the cycle
combinatorics	Permutation	__new__	cls	constructor for the permutation object from a list or a list of lists in which all elements of the permutation may
combinatorics	Permutation	_af_new	cls perm	a method to produce a permutation object from a list the list is bound to the _array_form attribute so it must
combinatorics	Permutation	array_form		return a copy of the attribute _array_form examples
combinatorics	Permutation	list	size	return the permutation as an explicit list possibly trimming unmoved elements if size is less than the maximum
combinatorics	Permutation	cyclic_form		this is used to convert to the cyclic notation from the canonical notation
combinatorics	Permutation	full_cyclic_form		return permutation in cyclic form including singletons
combinatorics	Permutation	size		returns the number of elements in the permutation
combinatorics	Permutation	support		return the elements in permutation p for which p[i] != i
combinatorics	Permutation	__add__	other	return permutation that is other higher in rank than self
combinatorics	Permutation	__sub__	other	return the permutation that is other lower in rank than self
combinatorics	Permutation	rmul		return product of permutations [a b c ] as the permutation whose
combinatorics	Permutation	rmul_with_af	cls	same as rmul but the elements of args are permutation objects
combinatorics	Permutation	mul_inv	other	other*~self self and other have _array_form
combinatorics	Permutation	__rmul__	other	this is needed to coerce other to permutation in rmul
combinatorics	Permutation	__mul__	other	return the product a*b as a permutation the ith value is b(a i
combinatorics	Permutation	commutes_with	other	checks if the elements are commuting
combinatorics	Permutation	__pow__	n	routine for finding powers of a permutation
combinatorics	Permutation	__rxor__	i	return self i when i is an int
combinatorics	Permutation	__xor__	h	return the conjugate permutation ~h*self*h
combinatorics	Permutation	transpositions		return the permutation decomposed into a list of transpositions
combinatorics	Permutation	from_sequence	i key	return the permutation needed to obtain i from the sorted elements of i
combinatorics	Permutation	__invert__		return the inverse of the permutation
combinatorics	Permutation	__iter__		yield elements from array form
combinatorics	Permutation	__call__		allows applying a permutation instance as a bijective function
combinatorics	Permutation	atoms		returns all the elements of a permutation examples
combinatorics	Permutation	next_lex		returns the next permutation in lexicographical order
combinatorics	Permutation	unrank_nonlex	n r	this is a linear time unranking algorithm that does not respect lexicographic order [3]
combinatorics	Permutation	rank_nonlex	inv_perm	this is a linear time ranking algorithm that does not enforce lexicographic order [3]
combinatorics	Permutation	next_nonlex		returns the next permutation in nonlex order [3]
combinatorics	Permutation	rank		returns the lexicographic rank of the permutation
combinatorics	Permutation	cardinality		returns the number of all possible permutations
combinatorics	Permutation	parity		computes the parity of a permutation
combinatorics	Permutation	is_even		checks if a permutation is even
combinatorics	Permutation	is_odd		checks if a permutation is odd
combinatorics	Permutation	is_Singleton		checks to see if the permutation contains only one number and is thus the only possible permutation of this set of numbers
combinatorics	Permutation	is_Empty		checks to see if the permutation is a set with zero elements examples
combinatorics	Permutation	is_Identity		returns true if the permutation is an identity permutation
combinatorics	Permutation	ascents		returns the positions of ascents in a permutation ie the location where p[i] < p[i+1]
combinatorics	Permutation	descents		returns the positions of descents in a permutation ie the location where p[i] > p[i+1]
combinatorics	Permutation	max		the maximum element moved by the permutation
combinatorics	Permutation	min		the minimum element moved by the permutation
combinatorics	Permutation	inversions		computes the number of inversions of a permutation
combinatorics	Permutation	commutator	x	return the commutator of self and x ~x*~self*x*self if f and g are part of a group g then the commutator of f and g
combinatorics	Permutation	signature		gives the signature of the permutation needed to place the elements of the permutation in canonical order
combinatorics	Permutation	order		computes the order of a permutation
combinatorics	Permutation	length		returns the number of integers moved by a permutation
combinatorics	Permutation	cycle_structure		return the cycle structure of the permutation as a dictionary indicating the multiplicity of each cycle length
combinatorics	Permutation	cycles		returns the number of cycles contained in the permutation including singletons
combinatorics	Permutation	index		returns the index of a permutation
combinatorics	Permutation	runs		returns the runs of a permutation
combinatorics	Permutation	inversion_vector		return the inversion vector of the permutation
combinatorics	Permutation	rank_trotterjohnson		returns the trotter johnson rank which we get from the minimal change algorithm
combinatorics	Permutation	unrank_trotterjohnson	cls size rank	trotter johnson permutation unranking see [4] section 2 4
combinatorics	Permutation	next_trotterjohnson		returns the next permutation in trotter-johnson order
combinatorics	Permutation	get_precedence_matrix		gets the precedence matrix this is used for computing the
combinatorics	Permutation	get_precedence_distance	other	computes the precedence distance between two permutations
combinatorics	Permutation	get_adjacency_matrix		computes the adjacency matrix of a permutation
combinatorics	Permutation	get_adjacency_distance	other	computes the adjacency distance between two permutations
combinatorics	Permutation	get_positional_distance	other	computes the positional distance between two permutations
combinatorics	Permutation	josephus	cls m n s	return as a permutation the shuffling of range n using the josephus scheme in which every m-th item is selected until all have been chosen
combinatorics	Permutation	from_inversion_vector	cls inversion	calculates the permutation from the inversion vector
combinatorics	Permutation	random	cls n	generates a random permutation of length n
combinatorics	Permutation	unrank_lex	cls size rank	lexicographic permutation unranking
combinatorics		_merge	arr temp left mid	merges two sorted arrays and calculates the inversion count
combinatorics		symmetric	n	generates the symmetric group of order n sn
combinatorics		cyclic	n	generates the cyclic group of order n cn
combinatorics		alternating	n	generates the alternating group of order n an
combinatorics		dihedral	n	generates the dihedral group of order 2n dn
combinatorics		rubik_cube_generators		return the permutations of the 3x3 rubik's cube see http //www
combinatorics		rubik	n	return permutations for an nxn rubik's cube
combinatorics	PermutationGroup	__new__	cls	the default constructor accepts cycle and permutation forms
combinatorics	PermutationGroup	__contains__	i	return true if i is contained in permutationgroup
combinatorics	PermutationGroup	__eq__	other	return true if permutationgroup generated by elements in the group are same i
combinatorics	PermutationGroup	__mul__	other	return the direct product of two permutation groups as a permutation group
combinatorics	PermutationGroup	_random_pr_init	r n _random_prec_n	initialize random generators for the product replacement algorithm
combinatorics	PermutationGroup	_union_find_merge	first second ranks parents	merges two classes in a union-find data structure
combinatorics	PermutationGroup	_union_find_rep	num parents	find representative of a class in a union-find data structure
combinatorics	PermutationGroup	base		return a base from the schreier-sims algorithm
combinatorics	PermutationGroup	baseswap	base strong_gens pos randomized	swap two consecutive base points in base and strong generating set
combinatorics	PermutationGroup	basic_orbits		return the basic orbits relative to a base and strong generating set
combinatorics	PermutationGroup	basic_stabilizers		return a chain of stabilizers relative to a base and strong generating set
combinatorics	PermutationGroup	basic_transversals		return basic transversals relative to a base and strong generating set
combinatorics	PermutationGroup	coset_transversal	H	return a transversal of the right cosets of self by its subgroup h using the second method described in [1], subsection 4
combinatorics	PermutationGroup	_coset_representative	g H	return the representative of hg from the transversal that would be computed by self
combinatorics	PermutationGroup	coset_table	H	return the standardised right coset table of self in h as a list of lists
combinatorics	PermutationGroup	center		return the center of a permutation group
combinatorics	PermutationGroup	centralizer	other	return the centralizer of a group/set/element
combinatorics	PermutationGroup	commutator	G H	return the commutator of two subgroups
combinatorics	PermutationGroup	coset_factor	g factor_index	return g's (self's) coset factorization of g if g is an element of g then it can be written as the product
combinatorics	PermutationGroup	coset_rank	g	rank using schreier-sims representation the coset rank of g is the ordering number in which
combinatorics	PermutationGroup	coset_unrank	rank af	unrank using schreier-sims representation coset_unrank is the inverse operation of coset_rank
combinatorics	PermutationGroup	degree		returns the size of the permutations in the group
combinatorics	PermutationGroup	elements		returns all the elements of the permutation group as a set examples
combinatorics	PermutationGroup	_elements		returns all the elements of the permutation group as a list examples
combinatorics	PermutationGroup	derived_series		return the derived series for the group
combinatorics	PermutationGroup	derived_subgroup		compute the derived subgroup
combinatorics	PermutationGroup	generate	method af	return iterator to generate the elements of the group iteration is done with one of these methods :
combinatorics	PermutationGroup	generate_dimino	af	yield group elements using dimino's algorithm if af == true it yields the array form of the permutations
combinatorics	PermutationGroup	generate_schreier_sims	af	yield group elements using the schreier-sims representation in coset_rank order
combinatorics	PermutationGroup	generators		returns the generators of the group
combinatorics	PermutationGroup	contains	g strict	test if permutation g belong to self g
combinatorics	PermutationGroup	is_abelian		test if the group is abelian
combinatorics	PermutationGroup	is_alt_sym	eps _random_prec	monte carlo test for the symmetric/alternating group for degrees >= 8
combinatorics	PermutationGroup	is_nilpotent		test if the group is nilpotent
combinatorics	PermutationGroup	is_normal	gr strict	test if g=self is a normal subgroup of gr
combinatorics	PermutationGroup	is_primitive	randomized	test if a group is primitive
combinatorics	PermutationGroup	is_solvable		test if the group is solvable
combinatorics	PermutationGroup	is_subgroup	G strict	return true if all elements of self belong to g
combinatorics	PermutationGroup	is_transitive	strict	test if the group is transitive
combinatorics	PermutationGroup	is_trivial		test if the group is the trivial group
combinatorics	PermutationGroup	lower_central_series		return the lower central series for the group
combinatorics	PermutationGroup	max_div		maximum proper divisor of the degree of a permutation group
combinatorics	PermutationGroup	minimal_block	points	for a transitive group finds the block system generated by points
combinatorics	PermutationGroup	normal_closure	other k	return the normal closure of a subgroup/set of permutations
combinatorics	PermutationGroup	orbit	alpha action	compute the orbit of alpha \{g(\alpha) | g \in g\} as a set
combinatorics	PermutationGroup	orbit_rep	alpha beta schreier_vector	return a group element which sends alpha to beta
combinatorics	PermutationGroup	orbit_transversal	alpha pairs	computes a transversal for the orbit of alpha as a set
combinatorics	PermutationGroup	orbits	rep	return the orbits of self, ordered according to lowest element in each orbit
combinatorics	PermutationGroup	order		return the order of the group the number of permutations that can be generated from elements of the group
combinatorics	PermutationGroup	pointwise_stabilizer	points incremental	return the pointwise stabilizer for a set of points
combinatorics	PermutationGroup	make_perm	n seed	multiply n randomly selected permutations from pgroup together starting with the identity
combinatorics	PermutationGroup	random	af	return a random group element
combinatorics	PermutationGroup	random_pr	gen_count iterations _random_prec	return a random group element using product replacement
combinatorics	PermutationGroup	random_stab	alpha schreier_vector _random_prec	random element from the stabilizer of alpha
combinatorics	PermutationGroup	schreier_sims_incremental	base gens	extend a sequence of points and generating set to a base and strong generating set
combinatorics	PermutationGroup	schreier_sims_random	base gens consec_succ _random_prec	randomized schreier-sims algorithm
combinatorics	PermutationGroup	schreier_vector	alpha	computes the schreier vector for alpha
combinatorics	PermutationGroup	stabilizer	alpha	return the stabilizer subgroup of alpha
combinatorics	PermutationGroup	strong_gens		return a strong generating set from the schreier-sims algorithm
combinatorics	PermutationGroup	subgroup_search	prop base strong_gens tests	find the subgroup of all elements satisfying the property prop
combinatorics	PermutationGroup	transitivity_degree		compute the degree of transitivity of the group
combinatorics		_orbit	degree generators alpha action	compute the orbit of alpha \{g(\alpha) | g \in g\} as a set
combinatorics		_orbits	degree generators	compute the orbits of g
combinatorics		_orbit_transversal	degree generators alpha pairs	computes a transversal for the orbit of alpha as a set
combinatorics		_stabilizer	degree generators alpha	return the stabilizer subgroup of alpha
combinatorics		free_group	symbols	construct a free group returning (freegroup (f_0 f_1 f_ n-1 )
combinatorics		xfree_group	symbols	construct a free group returning (freegroup (f_0 f_1 f_ n-1 ))
combinatorics		vfree_group	symbols	construct a free group and inject f_0 f_1 f_ n-1 as symbols
combinatorics	FreeGroup	_generators	group	returns the generators of the freegroup
combinatorics	FreeGroup	__contains__	i	return true if i is contained in freegroup
combinatorics	FreeGroup	__eq__	other	no freegroup is equal to any "other" freegroup
combinatorics	FreeGroup	index	gen	returns the index of the generator gen from (f_0 f_ n-1 )
combinatorics	FreeGroup	order		returns the order of the free group
combinatorics	FreeGroup	rank		in group theory the rank of a group g, denoted g rank,
combinatorics	FreeGroup	_symbol_index	symbol	returns the index of a generator for free group self, while returns the -ve index of the inverse generator
combinatorics	FreeGroup	is_abelian		returns if the group is abelian
combinatorics	FreeGroup	identity		returns the identity element of free group
combinatorics	FreeGroup	contains	g	tests if free group element g belong to self g
combinatorics	FreeGroup	is_subgroup	F	return true if all elements of self belong to f
combinatorics	FreeGroup	center		returns the center of the free group self
combinatorics	FreeGroupElement	array_form		sympy provides two different internal kinds of representation of associative words
combinatorics	FreeGroupElement	letter_form		the letter representation of a freegroupelement is a tuple of generator symbols with each entry corresponding to a group
combinatorics	FreeGroupElement	ext_rep		this is called the external representation of freegroupelement
combinatorics	FreeGroupElement	__mul__	other	returns the product of elements belonging to the same freegroup
combinatorics	FreeGroupElement	inverse		returns the inverse of a freegroupelement element examples
combinatorics	FreeGroupElement	order		find the order of a freegroupelement
combinatorics	FreeGroupElement	commutator	other	returns the commutator of self and x: ~x*~self*x*self
combinatorics	FreeGroupElement	eliminate_word	gen by	for an associative word self, a generator gen, and an associative word by eliminate_word returns the associative word obtained by
combinatorics	FreeGroupElement	__len__		for an associative word self, returns the number of letters in it
combinatorics	FreeGroupElement	__eq__	other	two associative words are equal if they are words over the same alphabet and if they are sequences of the same letters
combinatorics	FreeGroupElement	__lt__	other	the ordering of associative words is defined by length and lexicography this ordering is called short-lex ordering that
combinatorics	FreeGroupElement	exponent_sum	gen	for an associative word self and a generator or inverse of generator gen, exponent_sum returns the number of times gen appears in
combinatorics	FreeGroupElement	generator_count	gen	for an associative word self and a generator gen, generator_count returns the multiplicity of generator
combinatorics	FreeGroupElement	subword	from_i to_j	for an associative word self and two positive integers from_i and to_j, subword returns the subword of self that begins at position
combinatorics	FreeGroupElement	cyclic_conjugates		returns a words which are cyclic to the word self
combinatorics	FreeGroupElement	is_cyclic_conjugate	w	checks whether words self, w are cyclic conjugates
combinatorics	FreeGroupElement	number_syllables		returns the number of syllables of the associative word self
combinatorics	FreeGroupElement	exponent_syllable	i	returns the exponent of the i-th syllable of the associative word self
combinatorics	FreeGroupElement	generator_syllable	i	returns the number of the generator that is involved in the i-th syllable of the associative word self
combinatorics	FreeGroupElement	sub_syllables	from_i to_j	sub_syllables returns the subword of the associative word self that consists of syllables from positions from_to to to_j, where
combinatorics	FreeGroupElement	substituted_word	from_i to_j by	returns the associative word obtained by replacing the subword of self that begins at position from_i and ends at position to_j
combinatorics	FreeGroupElement	is_cyclically_reduced		returns whether the word is cyclically reduced or not
combinatorics	FreeGroupElement	identity_cyclic_reduction		return a unique cyclically reduced version of the word
combinatorics		letter_form_to_array_form	array_form group	this method converts a list given with possible repetitions of elements in it
combinatorics		zero_mul_simp	l index	used to combine two reduced words
combinatorics	Partition	__new__	cls	generates a new partition object
combinatorics	Partition	sort_key	order	return a canonical key that can be used for sorting
combinatorics	Partition	partition		return partition as a sorted list of lists
combinatorics	Partition	__add__	other	return permutation whose rank is other greater than current rank mod the maximum rank for the set
combinatorics	Partition	__sub__	other	return permutation whose rank is other less than current rank mod the maximum rank for the set
combinatorics	Partition	__le__	other	checks if a partition is less than or equal to the other based on rank
combinatorics	Partition	__lt__	other	checks if a partition is less than the other
combinatorics	Partition	rank		gets the rank of a partition
combinatorics	Partition	RGS		returns the "restricted growth string" of the partition
combinatorics	Partition	from_rgs	rgs elements	creates a set partition from a restricted growth string
combinatorics	IntegerPartition	__new__	cls partition integer	generates a new integerpartition object from a list or dictionary
combinatorics	IntegerPartition	prev_lex		return the previous partition of the integer n in lexical order wrapping around to [1
combinatorics	IntegerPartition	next_lex		return the next partition of the integer n in lexical order wrapping around to [n] if the partition is [1
combinatorics	IntegerPartition	as_dict		return the partition as a dictionary whose keys are the partition integers and the values are the multiplicity of that
combinatorics	IntegerPartition	conjugate		computes the conjugate partition of itself
combinatorics	IntegerPartition	__lt__	other	return true if self is less than other when the partition is listed from smallest to biggest
combinatorics	IntegerPartition	__le__	other	return true if self is less than other when the partition is listed from smallest to biggest
combinatorics	IntegerPartition	as_ferrers	char	prints the ferrer diagram of a partition
combinatorics		random_integer_partition	n seed	generates a random integer partition summing to n as a list of reverse-sorted integers
combinatorics		RGS_generalized	m	computes the m + 1 generalized unrestricted growth strings and returns them as rows in matrix
combinatorics		RGS_enum	m	rgs_enum computes the total number of restricted growth strings possible for a superset of size m
combinatorics		RGS_unrank	rank m	gives the unranked restricted growth string for a given superset size
combinatorics		RGS_rank	rgs	computes the rank of a restricted growth string
combinatorics	Polyhedron	__new__	cls corners faces pgroup	the constructor of the polyhedron group object
combinatorics	Polyhedron	corners		get the corners of the polyhedron
combinatorics	Polyhedron	array_form		return the indices of the corners
combinatorics	Polyhedron	cyclic_form		return the indices of the corners in cyclic notation
combinatorics	Polyhedron	size		get the number of corners of the polyhedron
combinatorics	Polyhedron	faces		get the faces of the polyhedron
combinatorics	Polyhedron	pgroup		get the permutations of the polyhedron
combinatorics	Polyhedron	edges		given the faces of the polyhedra we can get the edges
combinatorics	Polyhedron	rotate	perm	apply a permutation to the polyhedron *in place* the permutation
combinatorics	Polyhedron	reset		return corners to their original positions
combinatorics		_pgroup_calcs		return the permutation groups for each of the polyhedra and the face definitions tetrahedron cube octahedron dodecahedron icosahedron
combinatorics		DirectProduct		returns the direct product of several groups as a permutation group
combinatorics	GrayCode	next	delta	returns the gray code a distance delta (default = 1) from the current value in canonical order
combinatorics	GrayCode	selections		returns the number of bit vectors in the gray code
combinatorics	GrayCode	n		returns the dimension of the gray code
combinatorics	GrayCode	generate_gray		generates the sequence of bit vectors of a gray code
combinatorics	GrayCode	skip		skips the bit generation
combinatorics	GrayCode	rank		ranks the gray code
combinatorics	GrayCode	current		returns the currently referenced gray code as a bit string
combinatorics	GrayCode	unrank	n rank	unranks an n-bit sized gray code of rank k this method exists
combinatorics		random_bitstring	n	generates a random bitlist of length n
combinatorics		gray_to_bin	bin_list	convert from gray coding to binary coding
combinatorics		bin_to_gray	bin_list	convert from binary coding to gray coding
combinatorics		get_subset_from_bitstring	super_set bitstring	gets the subset defined by the bitstring
combinatorics		graycode_subsets	gray_code_set	generates the subsets as enumerated by a gray code
combinatorics	Subset	iterate_binary	k	this is a helper function it iterates over the
combinatorics	Subset	next_binary		generates the next binary ordered subset
combinatorics	Subset	prev_binary		generates the previous binary ordered subset
combinatorics	Subset	next_lexicographic		generates the next lexicographically ordered subset
combinatorics	Subset	prev_lexicographic		generates the previous lexicographically ordered subset
combinatorics	Subset	iterate_graycode	k	helper function used for prev_gray and next_gray
combinatorics	Subset	next_gray		generates the next gray code ordered subset
combinatorics	Subset	prev_gray		generates the previous gray code ordered subset
combinatorics	Subset	rank_binary		computes the binary ordered rank
combinatorics	Subset	rank_lexicographic		computes the lexicographic ranking of the subset
combinatorics	Subset	rank_gray		computes the gray code ranking of the subset
combinatorics	Subset	subset		gets the subset represented by the current instance
combinatorics	Subset	size		gets the size of the subset
combinatorics	Subset	superset		gets the superset of the subset
combinatorics	Subset	superset_size		returns the size of the superset
combinatorics	Subset	cardinality		returns the number of all possible subsets
combinatorics	Subset	subset_from_bitlist	super_set bitlist	gets the subset defined by the bitlist
combinatorics	Subset	bitlist_from_subset	subset superset	gets the bitlist corresponding to a subset
combinatorics	Subset	unrank_binary	rank superset	gets the binary ordered subset of the specified rank
combinatorics	Subset	unrank_gray	rank superset	gets the gray code ordered subset of the specified rank
combinatorics	Subset	subset_indices	subset superset	return indices of subset in superset in a list the list is empty if all elements of subset are not in superset
combinatorics		ksubsets	superset k	finds the subsets of size k in lexicographic order
combinatorics		_parse_relators	rels	parse the passed relators
combinatorics	FpGroup	coset_enumeration	H strategy	return an instance of coset table, when todd-coxeter algorithm is run over the self with h as subgroup using strategy
combinatorics	FpGroup	standardize_coset_table		standardized the coset table self and makes the internal variable _is_standardized equal to true
combinatorics	FpGroup	coset_table	H strategy	return the mathematical coset table of self in h
combinatorics	FpGroup	order	strategy	returns the order of the finitely presented group self it uses
combinatorics	FpGroup	index	H strategy	returns the index of subgroup h in group self
combinatorics	FpGroup	_generators		returns the generators of the associated free group
combinatorics	CosetTable	omega		set of live cosets
combinatorics	CosetTable	copy		return a shallow copy of coset table instance self
combinatorics	CosetTable	n		the number n represents the length of the sublist containing the live cosets
combinatorics	CosetTable	is_complete		the coset table is called complete if it has no undefined entries on the live cosets that is \alpha^x is defined for all
combinatorics	CosetTable	define	alpha x	this routine is used in the relator-based strategy of todd-coxeter algorithm if some \alpha^x is undefined
combinatorics	CosetTable	define_c	alpha x	a variation of define routine described on pg 165 [1], used in
combinatorics	CosetTable	scan_c	alpha word	a variation of scan routine described on pg 165 of [1], which
combinatorics	CosetTable	coincidence_c	alpha beta	a variation of coincidence routine used in the coset-table based method of coset enumeration
combinatorics	CosetTable	scan	alpha word	scan performs a scanning process on the input word
combinatorics	CosetTable	scan_check	alpha word	another version of scan routine described on it checks whether \alpha scans correctly under word, it is a straightforward
combinatorics	CosetTable	merge	k lamda q	input 'k', 'lamda' being the two class representatives to be merged
combinatorics	CosetTable	rep	k	input k \in [0 \ldots n-1], as for self only array p is used =====
combinatorics	CosetTable	coincidence	alpha beta	the third situation described in scan routine is handled by this routine described on pg
combinatorics	CosetTable	scan_and_fill	alpha word	a modified version of scan routine used in the relator-based method of coset enumeration described on pg
combinatorics	CosetTable	scan_and_fill_c	alpha word	a modified version of scan routine described on pg 165 second
combinatorics	CosetTable	look_ahead		when combined with the hlt method this is known as hlt+lookahead method of coset enumeration described on pg
combinatorics	CosetTable	process_deductions	R_c_x R_c_x_inv	processes the deductions that have been pushed onto deduction_stack, described on pg
combinatorics	CosetTable	process_deductions_check	R_c_x R_c_x_inv	a variation of process_deductions, this calls scan_check wherever process_deductions calls scan, described on pg
combinatorics	CosetTable	switch	beta gamma	switch the elements \beta \gamma \in \omega of self, used by the standardize procedure described on pg
combinatorics	CosetTable	standardize		a coset table is standardized if when running through the cosets and within each coset through the generator images (ignoring generator
combinatorics	CosetTable	compress		removes the non-live cosets from the coset table described on pg
combinatorics		coset_enumeration_r	fp_grp Y	this is easier of the two implemented methods of coset enumeration
combinatorics		coset_enumeration_c	fp_grp Y	>>> from sympy combinatorics free_groups import free_group
combinatorics		low_index_subgroups	G N Y	implements the low index subgroups algorithm i e find all subgroups of
combinatorics		try_descendant	S C R1_c_list R2	solves the problem of trying out each individual possibility for \alpha^x
combinatorics		first_in_class	C Y	checks whether the subgroup h=g1 corresponding to the coset table could possibly be the canonical representative of its conjugacy class
combinatorics		elimination_technique_2	C	this technique eliminates one generator at a time heuristically this
combinatorics		simplify_presentation	C	relies upon _simplification_technique_1 for its functioning
combinatorics		_simplification_technique_1	rels	all relators are checked to see if they are of the form gen^n if any
combinatorics		reidemeister_presentation	fp_grp H elm_rounds simp_rounds	fp_group a finitely presented group an instance of fpgroup h a subgroup whose presentation is to be found given as a list
combinatorics		_cmp_perm_lists	first second	compare two lists of permutations as sets
combinatorics		_verify_bsgs	group base gens	verify the correctness of a base and strong generating set
combinatorics		_verify_centralizer	group arg centr	verify the centralizer of a group/set/element inside another group
combinatorics		canonicalize_naive	g dummies sym	canonicalize tensor formed by tensors of the different types g permutation representing the tensor
combinatorics		graph_certificate	gr	return a certificate for the graph gr adjacency list
functions.elementary		_peeloff_pi	arg	split arg into two parts a "rest" and a multiple of pi/2
functions.elementary		_pi_coeff	arg cycles	when arg is a number times pi (e g 3*pi/2) then return the number
functions.elementary	tan	inverse	argindex	returns the inverse of this function
functions.elementary	cot	inverse	argindex	returns the inverse of this function
functions.elementary	asin	inverse	argindex	returns the inverse of this function
functions.elementary	acos	inverse	argindex	returns the inverse of this function
functions.elementary	atan	inverse	argindex	returns the inverse of this function
functions.elementary	acot	inverse	argindex	returns the inverse of this function
functions.elementary	asec	inverse	argindex	returns the inverse of this function
functions.elementary	acsc	inverse	argindex	returns the inverse of this function
functions.elementary	sinh	fdiff	argindex	returns the first derivative of this function
functions.elementary	sinh	inverse	argindex	returns the inverse of this function
functions.elementary	sinh	taylor_term	n x	returns the next term in the taylor series expansion
functions.elementary	sinh	as_real_imag	deep	returns this function as a complex coordinate
functions.elementary	tanh	inverse	argindex	returns the inverse of this function
functions.elementary	coth	inverse	argindex	returns the inverse of this function
functions.elementary	csch	fdiff	argindex	returns the first derivative of this function
functions.elementary	csch	taylor_term	n x	returns the next term in the taylor series expansion
functions.elementary	asinh	_eval_rewrite_as_log	x	rewrites asinh as log function
functions.elementary	asinh	inverse	argindex	returns the inverse of this function
functions.elementary	acosh	inverse	argindex	returns the inverse of this function
functions.elementary	atanh	inverse	argindex	returns the inverse of this function
functions.elementary	acoth	inverse	argindex	returns the inverse of this function
functions.elementary	asech	inverse	argindex	returns the inverse of this function
functions.elementary	acsch	inverse	argindex	returns the inverse of this function
functions.elementary	ExprCondPair	expr		returns the expression of this pair
functions.elementary	ExprCondPair	cond		returns the condition of this pair
functions.elementary	ExprCondPair	free_symbols		return the free symbols of this pair
functions.elementary	Piecewise	doit		evaluate this piecewise function
functions.elementary	Piecewise	_eval_interval	sym a b	evaluates the function along the sym in a given interval ab
functions.elementary	Piecewise	_sort_expr_cond	sym a b targetcond	determine what intervals the expr cond pairs affect
functions.elementary	Piecewise	_eval_subs	old new	piecewise conditions may contain bool which are not of basic type
functions.elementary	Piecewise	__eval_cond	cls cond	return the truth value of the condition
functions.elementary		piecewise_fold	expr	takes an expression containing a piecewise function and returns the expression in piecewise form
functions.elementary	re	as_real_imag	deep	returns the real number with a zero imaginary part
functions.elementary	im	as_real_imag	deep	return the imaginary part with a zero real part
functions.elementary	Abs	fdiff	argindex	get the first derivative of the argument to abs()
functions.elementary	polar_lift	_eval_evalf	prec	careful! any evalf of polar numbers is flaky
functions.elementary		polarify	eq subs lift	turn all numbers in eq into their polar equivalents under the standard choice of argument
functions.elementary		unpolarify	eq subs exponents_only	if p denotes the projection from the riemann surface of the logarithm to the complex line return a simplified version eq' of eq such that
functions.elementary		sqrt	arg	the square root function sqrt x -> returns the principal square root of x
functions.elementary		cbrt	arg	this function computes the principial cube root of arg, so it's just a shortcut for arg**rational 1 3
functions.elementary		root	arg n k	root x n k -> returns the k-th n-th root of x defaulting to the principle root (k=0)
functions.elementary		real_root	arg n	return the real nth-root of arg if possible if n is omitted then
functions.elementary	MinMaxBase	_new_args_filter	cls arg_sequence	generator filtering args
functions.elementary	MinMaxBase	_find_localzeros	cls values	sequentially allocate values to localzeros
functions.elementary	MinMaxBase	_is_connected	cls x y	check if x and y are connected somehow
functions.elementary	ExpBase	inverse	argindex	returns the inverse function of exp x
functions.elementary	ExpBase	as_numer_denom		returns this with a positive exponent as a 2-tuple a fraction
functions.elementary	ExpBase	exp		returns the exponent of the function
functions.elementary	ExpBase	as_base_exp		returns the 2-tuple base exponent
functions.elementary	ExpBase	_eval_power	other	exp arg **e -> exp(arg*e) if assumptions allow it
functions.elementary	exp_polar	_eval_evalf	prec	careful! any evalf of polar numbers is flaky
functions.elementary	exp	fdiff	argindex	returns the first derivative of this function
functions.elementary	exp	base		returns the base of the exponential function
functions.elementary	exp	taylor_term	n x	calculates the next term in the taylor series expansion
functions.elementary	exp	as_real_imag	deep	returns this function as a 2-tuple representing a complex number
functions.elementary	log	fdiff	argindex	returns the first derivative of the function
functions.elementary	log	inverse	argindex	returns e^x, the inverse function of \log x
functions.elementary	log	as_base_exp		returns this function in the form base exponent
functions.elementary	log	taylor_term	n x	returns the next term in the taylor series expansion of \log 1+x
functions.elementary	log	as_real_imag	deep	returns this function as a complex coordinate
functions.elementary	LambertW	fdiff	argindex	return the first derivative of this function
functions.combinatorial	bell	_bell_incomplete_poly	n k symbols	the second kind of bell polynomials incomplete bell polynomials
functions.combinatorial		_multiset_histogram	n	return tuple used in permutation and combination counting input
functions.combinatorial		nP	n k replacement	return the number of permutations of n items taken k at a time
functions.combinatorial		_AOP_product	n	for n = (m1 m2 mk) return the coefficients of the polynomial
functions.combinatorial		nC	n k replacement	return the number of combinations of n items taken k at a time
functions.combinatorial		stirling	n k d kind	return stirling number s n k of the first or second default kind
functions.combinatorial		_nT	n k	return the partitions of n items into k parts this
functions.combinatorial		nT	n k	return the number of k-sized partitions of n items
functions.combinatorial	binomial	_eval_expand_func		function to expand binomial n k when m is positive integer also
functions.special		Eijk		represent the levi-civita symbol
functions.special		eval_levicivita		evaluate levi-civita symbol
functions.special	KroneckerDelta	eval	cls i j	evaluates the discrete delta function
functions.special	KroneckerDelta	is_above_fermi		true if delta can be non-zero above fermi examples
functions.special	KroneckerDelta	is_below_fermi		true if delta can be non-zero below fermi examples
functions.special	KroneckerDelta	is_only_above_fermi		true if delta is restricted to above fermi examples
functions.special	KroneckerDelta	is_only_below_fermi		true if delta is restricted to below fermi examples
functions.special	KroneckerDelta	indices_contain_equal_information		returns true if indices are either both above or below fermi
functions.special	KroneckerDelta	preferred_index		returns the index which is preferred to keep in the final expression
functions.special	KroneckerDelta	killable_index		returns the index which is preferred to substitute in the final expression
functions.special	KroneckerDelta	_get_preferred_index		returns the index which is preferred to keep in the final expression
functions.special	BesselBase	order		the order of the bessel-type function
functions.special	BesselBase	argument		the argument of the bessel-type function
functions.special	SphericalBesselBase	_expand		expand self into a polynomial nu is guaranteed to be integer
functions.special	SphericalBesselBase	_rewrite		rewrite self in terms of ordinary bessel functions
functions.special		jn_zeros	n k method dps	zeros of the spherical bessel function of the first kind
functions.special		digamma	x	the digamma function is the first derivative of the loggamma function i e
functions.special		trigamma	x	the trigamma function is the second derivative of the loggamma function i e
functions.special		jacobi_normalized	n a b x	jacobi polynomial :math p_n^{\left(\alpha \beta\right)} x jacobi_normalized n alpha beta x gives the nth jacobi polynomial
functions.special		_add_splines	c b1 d b2	construct c*b1 + d*b2
functions.special		bspline_basis	d knots n x	the n-th b-spline at x of degree d with knots
functions.special		bspline_basis_set	d knots x	return the len knots -d-1 b-splines at x of degree d with knots
functions.special	TupleArg	limit	x xlim dir	compute limit x->xlim
functions.special		_prep_tuple	v	turn an iterable argument v into a tuple and unpolarify since both hypergeometric and meijer g-functions are unbranched in their parameters
functions.special	hyper	argument		argument of the hypergeometric function
functions.special	hyper	ap		numerator parameters of the hypergeometric function
functions.special	hyper	bq		denominator parameters of the hypergeometric function
functions.special	hyper	eta		a quantity related to the convergence of the series
functions.special	hyper	radius_of_convergence		compute the radius of convergence of the defining series
functions.special	hyper	convergence_statement		return a condition on z under which the series converges
functions.special	meijerg	get_period		return a number p such that g(x*exp(i*p)) == g x
functions.special	meijerg	integrand	s	get the defining integrand d s
functions.special	meijerg	argument		argument of the meijer g-function
functions.special	meijerg	an		first set of numerator parameters
functions.special	meijerg	ap		combined numerator parameters
functions.special	meijerg	aother		second set of numerator parameters
functions.special	meijerg	bm		first set of denominator parameters
functions.special	meijerg	bq		combined denominator parameters
functions.special	meijerg	bother		second set of denominator parameters
functions.special	meijerg	nu		a quantity related to the convergence region of the integral c
functions.special	meijerg	delta		a quantity related to the convergence region of the integral c
functions.special	HyperRep	_expr_small	cls x	an expression for f x which holds for |x| < 1
functions.special	HyperRep	_expr_small_minus	cls x	an expression for f -x which holds for |x| < 1
functions.special	HyperRep	_expr_big	cls x n	an expression for f(exp_polar(2*i*pi*n)*x), |x| > 1
functions.special	HyperRep	_expr_big_minus	cls x n	an expression for f(exp_polar(2*i*pi*n + pi*i)*x), |x| > 1
functions.special	erf	inverse	argindex	returns the inverse of this function
functions.special	erfc	inverse	argindex	returns the inverse of this function
functions.special	erfinv	inverse	argindex	returns the inverse of this function
functions.special	erfcinv	inverse	argindex	returns the inverse of this function
functions.special		E1	z	classical case of the generalized exponential integral
functions.special		Ynm_c	n m theta phi	conjugate spherical harmonics defined as
functions.special	SingularityFunction	fdiff	argindex	returns the first derivative of a diracdelta function
functions.special	SingularityFunction	eval	cls variable offset exponent	returns a simplified form or a value of singularity function depending on the argument passed by the object
functions.special	SingularityFunction	_eval_rewrite_as_Piecewise		converts a singularity function expression into its piecewise form
functions.special	SingularityFunction	_eval_rewrite_as_Heaviside		rewrites a singularity function expression using heavisides and diracdeltas
functions.special	DiracDelta	fdiff	argindex	returns the first derivative of a diracdelta function
functions.special	DiracDelta	eval	cls arg k	returns a simplified form or a value of diracdelta depending on the argument passed by the diracdelta object
functions.special	DiracDelta	_eval_expand_diracdelta		compute a simplified representation of the function using property number 4
functions.special	DiracDelta	is_simple	x	is_simple self x tells whether the argument(args[0]) of diracdelta is a linear
functions.special	DiracDelta	_eval_rewrite_as_Piecewise		represents diracdelta in a piecewise form examples
functions.special	DiracDelta	_eval_rewrite_as_SingularityFunction		returns the diracdelta expression written in the form of singularity functions
functions.special	Heaviside	fdiff	argindex	returns the first derivative of a heaviside function
functions.special	Heaviside	eval	cls arg H0	returns a simplified form or a value of heaviside depending on the argument passed by the heaviside object
functions.special	Heaviside	_eval_rewrite_as_Piecewise	arg H0	represents heaviside in a piecewise form examples
functions.special	Heaviside	_eval_rewrite_as_sign	arg H0	represents the heaviside function in the form of sign function
functions.special	Heaviside	_eval_rewrite_as_SingularityFunction	args	returns the heaviside expression written in the form of singularity functions
