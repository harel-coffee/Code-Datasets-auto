<tt style='background-color:#E8E8E8;'> core. <a href=' /abc.py#L73'>clashing</a>()</tt>	Return the clashing-symbols dictionaries.
<tt style='background-color:#E8E8E8;'> geometry.Parabola <a href=' /geometry/parabola.py#L86'>axis_of_symmetry</a>()</tt>	The axis of symmetry of the parabola.
<tt style='background-color:#E8E8E8;'> geometry.Parabola <a href=' /geometry/parabola.py#L111'>directrix</a>()</tt>	The directrix of the parabola.
<tt style='background-color:#E8E8E8;'> geometry.Parabola <a href=' /geometry/parabola.py#L137'>eccentricity</a>()</tt>	The eccentricity of the parabola.
<tt style='background-color:#E8E8E8;'> geometry.Parabola <a href=' /geometry/parabola.py#L172'>equation</a>(x,y)</tt>	The equation of the parabola.
<tt style='background-color:#E8E8E8;'> geometry.Parabola <a href=' /geometry/parabola.py#L211'>focal_length</a>()</tt>	The focal length of the parabola.
<tt style='background-color:#E8E8E8;'> geometry.Parabola <a href=' /geometry/parabola.py#L246'>focus</a>()</tt>	The focus of the parabola.
<tt style='background-color:#E8E8E8;'> geometry.Parabola <a href=' /geometry/parabola.py#L272'>intersection</a>(o)</tt>	The intersection of the parabola and another geometrical entity o.
<tt style='background-color:#E8E8E8;'> geometry.Parabola <a href=' /geometry/parabola.py#L322'>p_parameter</a>()</tt>	P is a parameter of parabola.
<tt style='background-color:#E8E8E8;'> geometry.Parabola <a href=' /geometry/parabola.py#L370'>vertex</a>()</tt>	The vertex of the parabola.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L262'>contains</a>(other)</tt>	Subclasses should implement this method and should return true if other is on the boundaries of self.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L89'>_span_test</a>(other)</tt>	Test whether the point other lies in the positive span of self.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L108'>angle_between</a>(l1,l2)</tt>	The angle formed between the two linear entities.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L159'>arbitrary_point</a>(parameter)</tt>	A parameterized point on the line.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L210'>are_concurrent</a>()</tt>	Is a sequence of linear entities concurrent? two or more linear entities are concurrent if they all.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L269'>direction</a>()</tt>	The direction vector of the linearentity.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L302'>intersection</a>(other)</tt>	The intersection with another geometrical entity.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L457'>is_parallel</a>(l1,l2)</tt>	Are two linear entities parallel? parameters.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L508'>is_perpendicular</a>(l1,l2)</tt>	Are two linear entities perpendicular? parameters.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L556'>is_similar</a>(other)</tt>	Return true if self and other are contained in the same line.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L573'>length</a>()</tt>	The length of the line.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L589'>p1</a>()</tt>	The first defining point of a linear entity.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L610'>p2</a>()</tt>	The second defining point of a linear entity.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L631'>parallel_line</a>(p)</tt>	Create a new line parallel to this linear entity which passes through the point p.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L674'>perpendicular_line</a>(p)</tt>	Create a new line perpendicular to this linear entity which passes through the point p.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L719'>perpendicular_segment</a>(p)</tt>	Create a perpendicular line segment from p to this line.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L780'>points</a>()</tt>	The two points used to define this linear entity.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L806'>projection</a>(other)</tt>	Project a point line ray or segment onto this linear entity.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity <a href=' /geometry/line.py#L890'>random_point</a>()</tt>	A random point on a linearentity.
<tt style='background-color:#E8E8E8;'> geometry.Line <a href=' /geometry/line.py#L1008'>contains</a>(other)</tt>	Return true if other is on this line or false otherwise.
<tt style='background-color:#E8E8E8;'> geometry.Line <a href=' /geometry/line.py#L1043'>distance</a>(other)</tt>	Finds the shortest distance between a line and a point.
<tt style='background-color:#E8E8E8;'> geometry.Line <a href=' /geometry/line.py#L1080'>equals</a>(other)</tt>	Returns true if self and other are the same mathematical entities.
<tt style='background-color:#E8E8E8;'> geometry.Line <a href=' /geometry/line.py#L1086'>plot_interval</a>(parameter)</tt>	The plot interval for the default geometric plot of line gives.
<tt style='background-color:#E8E8E8;'> geometry.Ray <a href=' /geometry/line.py#L1183'>_svg</a>(scale_factor,fill_color)</tt>	Returns svg path element for the linearentity.
<tt style='background-color:#E8E8E8;'> geometry.Ray <a href=' /geometry/line.py#L1207'>contains</a>(other)</tt>	Is other geometryentity contained in this ray? examples.
<tt style='background-color:#E8E8E8;'> geometry.Ray <a href=' /geometry/line.py#L1255'>distance</a>(other)</tt>	Finds the shortest distance between the ray and a point.
<tt style='background-color:#E8E8E8;'> geometry.Ray <a href=' /geometry/line.py#L1295'>equals</a>(other)</tt>	Returns true if self and other are the same mathematical entities.
<tt style='background-color:#E8E8E8;'> geometry.Ray <a href=' /geometry/line.py#L1301'>plot_interval</a>(parameter)</tt>	The plot interval for the default geometric plot of the ray gives.
<tt style='background-color:#E8E8E8;'> geometry.Ray <a href=' /geometry/line.py#L1330'>source</a>()</tt>	The point from which the ray emanates.
<tt style='background-color:#E8E8E8;'> geometry.Segment <a href=' /geometry/line.py#L1426'>contains</a>(other)</tt>	Is the other geometryentity contained within this segment? examples.
<tt style='background-color:#E8E8E8;'> geometry.Segment <a href=' /geometry/line.py#L1469'>distance</a>(other)</tt>	Finds the shortest distance between a line segment and a point.
<tt style='background-color:#E8E8E8;'> geometry.Segment <a href=' /geometry/line.py#L1512'>length</a>()</tt>	The length of the line segment.
<tt style='background-color:#E8E8E8;'> geometry.Segment <a href=' /geometry/line.py#L1538'>midpoint</a>()</tt>	The midpoint of the line segment.
<tt style='background-color:#E8E8E8;'> geometry.Segment <a href=' /geometry/line.py#L1564'>perpendicular_bisector</a>(p)</tt>	The perpendicular bisector of this segment.
<tt style='background-color:#E8E8E8;'> geometry.Segment <a href=' /geometry/line.py#L1607'>plot_interval</a>(parameter)</tt>	The plot interval for the default geometric plot of the segment gives values that will produce the full segment in a plot.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity2D <a href=' /geometry/line.py#L1660'>bounds</a>()</tt>	Return a tuple xmin ymin xmax ymax representing the bounding rectangle for the geometric figure.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity2D <a href=' /geometry/line.py#L1672'>perpendicular_line</a>(p)</tt>	Create a new line perpendicular to this linear entity which passes through the point p.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity2D <a href=' /geometry/line.py#L1709'>slope</a>()</tt>	The slope of this linear entity or infinity if vertical.
<tt style='background-color:#E8E8E8;'> geometry.Line2D <a href=' /geometry/line.py#L1818'>_svg</a>(scale_factor,fill_color)</tt>	Returns svg path element for the linearentity.
<tt style='background-color:#E8E8E8;'> geometry.Line2D <a href=' /geometry/line.py#L1842'>coefficients</a>()</tt>	The coefficients (a, b, c) for ax + by + c = 0.
<tt style='background-color:#E8E8E8;'> geometry.Line2D <a href=' /geometry/line.py#L1877'>equation</a>(x,y)</tt>	The equation of the line ax + by + c.
<tt style='background-color:#E8E8E8;'> geometry.Ray2D <a href=' /geometry/line.py#L2011'>xdirection</a>()</tt>	The x direction of the ray.
<tt style='background-color:#E8E8E8;'> geometry.Ray2D <a href=' /geometry/line.py#L2043'>ydirection</a>()</tt>	The y direction of the ray.
<tt style='background-color:#E8E8E8;'> geometry.Segment2D <a href=' /geometry/line.py#L2130'>_svg</a>(scale_factor,fill_color)</tt>	Returns svg path element for the linearentity.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity3D <a href=' /geometry/line.py#L2183'>direction_ratio</a>()</tt>	The direction ratio of a given line in 3d.
<tt style='background-color:#E8E8E8;'> geometry.LinearEntity3D <a href=' /geometry/line.py#L2204'>direction_cosine</a>()</tt>	The normalized direction ratio of a given line in 3d.
<tt style='background-color:#E8E8E8;'> geometry.Line3D <a href=' /geometry/line.py#L2278'>equation</a>(x,y,z,k)</tt>	The equation of the line in 3d parameters.
<tt style='background-color:#E8E8E8;'> geometry.Ray3D <a href=' /geometry/line.py#L2379'>xdirection</a>()</tt>	The x direction of the ray.
<tt style='background-color:#E8E8E8;'> geometry.Ray3D <a href=' /geometry/line.py#L2411'>ydirection</a>()</tt>	The y direction of the ray.
<tt style='background-color:#E8E8E8;'> geometry.Ray3D <a href=' /geometry/line.py#L2443'>zdirection</a>()</tt>	The z direction of the ray.
<tt style='background-color:#E8E8E8;'> geometry.Curve <a href=' /geometry/curve.py#L89'>arbitrary_point</a>(parameter)</tt>	A parameterized point on the curve.
<tt style='background-color:#E8E8E8;'> geometry.Curve <a href=' /geometry/curve.py#L145'>free_symbols</a>()</tt>	Return a set of symbols other than the bound symbols used to parametrically define the curve.
<tt style='background-color:#E8E8E8;'> geometry.Curve <a href=' /geometry/curve.py#L167'>functions</a>()</tt>	The functions specifying the curve.
<tt style='background-color:#E8E8E8;'> geometry.Curve <a href=' /geometry/curve.py#L193'>limits</a>()</tt>	The limits for the curve.
<tt style='background-color:#E8E8E8;'> geometry.Curve <a href=' /geometry/curve.py#L220'>parameter</a>()</tt>	The curve function variable.
<tt style='background-color:#E8E8E8;'> geometry.Curve <a href=' /geometry/curve.py#L246'>plot_interval</a>(parameter)</tt>	The plot interval for the default geometric plot of the curve.
<tt style='background-color:#E8E8E8;'> geometry.Curve <a href=' /geometry/curve.py#L281'>rotate</a>(angle,pt)</tt>	Rotate angle radians counterclockwise about point pt.
<tt style='background-color:#E8E8E8;'> geometry.Curve <a href=' /geometry/curve.py#L311'>scale</a>(x,y,pt)</tt>	Override geometryentity scale since curve is not made up of points.
<tt style='background-color:#E8E8E8;'> geometry.Curve <a href=' /geometry/curve.py#L329'>translate</a>(x,y)</tt>	Translate the curve by x y.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/util.py#L21'>_ordered_points</a>(p)</tt>	Return the tuple of points sorted numerically according to args.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/util.py#L26'>_symbol</a>(s,matching_symbol)</tt>	Return s if s is a symbol else return either a new symbol (real=true) with the same name s or the matching_symbol if s is a string and it matches.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/util.py#L67'>_uniquely_named_symbol</a>(xname)</tt>	Return a symbol which when printed will have a name unique from any other already in the expressions given.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/util.py#L81'>are_coplanar</a>()</tt>	Returns true if the given entities are coplanar otherwise false parameters.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/util.py#L152'>are_similar</a>(e1,e2)</tt>	Are two geometrical entities similar.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/util.py#L214'>centroid</a>()</tt>	Find the centroid center of mass of the collection containing only points segments or polygons.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/util.py#L290'>closest_points</a>()</tt>	Return the subset of points from a set of points that were the closest to each other in the 2d plane.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/util.py#L369'>convex_hull</a>()</tt>	The convex hull surrounding the points contained in the list of entities.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/util.py#L480'>farthest_points</a>()</tt>	Return the subset of points from a set of points that were the furthest apart from each other in the 2d plane.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/util.py#L566'>idiff</a>(eq,y,x,n)</tt>	Return dy/dx assuming that eq == 0.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/util.py#L628'>intersection</a>()</tt>	The intersection of a collection of geometryentity instances.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L184'>__abs__</a>()</tt>	Returns the distance between this point and the origin.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L189'>__add__</a>(other)</tt>	Add other to self by incrementing self's coordinates by those of other.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L231'>__div__</a>(divisor)</tt>	Divide point's coordinates by a factor.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L254'>__mul__</a>(factor)</tt>	Multiply point's coordinates by a factor.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L285'>__neg__</a>()</tt>	Negate the point.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L290'>__sub__</a>(other)</tt>	Subtract two points or subtract a factor from this point's coordinates.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L295'>_normalize_dimension</a>(cls)</tt>	Ensure that points have the same dimension.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L313'>affine_rank</a>()</tt>	The affine rank of a set of points is the dimension of the smallest affine space containing all the points.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L333'>ambient_dimension</a>()</tt>	Number of components this point has.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L338'>are_coplanar</a>(cls)</tt>	Return true if there exists a plane in which all the points lie.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L384'>distance</a>(p)</tt>	The euclidean distance from self to point p.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L420'>dot</a>(p)</tt>	Return dot product of self with another point.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L426'>equals</a>(other)</tt>	Returns whether the coordinates of self and other agree.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L433'>evalf</a>(prec)</tt>	Evaluate the coordinates of the point.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L464'>intersection</a>(other)</tt>	The intersection between this point and another geometryentity.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L505'>is_collinear</a>()</tt>	Returns true if there exists a line that contains self and points.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L543'>is_concyclic</a>()</tt>	Do self and the given sequence of points lie in a circle? returns true if the set of points are concyclic and.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L599'>is_nonzero</a>()</tt>	True if any coordinate is nonzero false if every coordinate is zero and none if it cannot be determined.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L608'>is_scalar_multiple</a>(p)</tt>	Returns whether each coordinate of self is a scalar multiple of the corresponding coordinate in point p.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L627'>is_zero</a>()</tt>	True if every coordinate is zero false if any coordinate is not zero and none if it cannot be determined.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L638'>length</a>()</tt>	Treating a point as a line this returns 0 for the length of a point.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L653'>midpoint</a>(p)</tt>	The midpoint between self and point p.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L683'>origin</a>()</tt>	A point of all zeros of the same ambient dimension.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L689'>orthogonal_direction</a>()</tt>	Returns a non-zero point that is orthogonal to the line containing self and the origin.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L715'>project</a>(a,b)</tt>	Project the point a onto the line between the origin and point b along the normal direction.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L754'>taxicab_distance</a>(p)</tt>	The taxicab distance from self to point p.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L787'>canberra_distance</a>(p)</tt>	The canberra distance from self to point p.
<tt style='background-color:#E8E8E8;'> geometry.Point <a href=' /geometry/point.py#L838'>unit</a>()</tt>	Return the point that is in the same direction as self.
<tt style='background-color:#E8E8E8;'> geometry.Point2D <a href=' /geometry/point.py#L909'>bounds</a>()</tt>	Return a tuple xmin ymin xmax ymax representing the bounding rectangle for the geometric figure.
<tt style='background-color:#E8E8E8;'> geometry.Point2D <a href=' /geometry/point.py#L918'>rotate</a>(angle,pt)</tt>	Rotate angle radians counterclockwise about point pt.
<tt style='background-color:#E8E8E8;'> geometry.Point2D <a href=' /geometry/point.py#L952'>scale</a>(x,y,pt)</tt>	Scale the coordinates of the point by multiplying by x and y after subtracting pt -- default is 0 0 --.
<tt style='background-color:#E8E8E8;'> geometry.Point2D <a href=' /geometry/point.py#L979'>transform</a>(matrix)</tt>	Return the point after applying the transformation described by the 3x3 matrix matrix.
<tt style='background-color:#E8E8E8;'> geometry.Point2D <a href=' /geometry/point.py#L1001'>translate</a>(x,y)</tt>	Shift the point by adding x and y to the coordinates of the point.
<tt style='background-color:#E8E8E8;'> geometry.Point2D <a href=' /geometry/point.py#L1024'>x</a>()</tt>	Returns the x coordinate of the point.
<tt style='background-color:#E8E8E8;'> geometry.Point2D <a href=' /geometry/point.py#L1039'>y</a>()</tt>	Returns the y coordinate of the point.
<tt style='background-color:#E8E8E8;'> geometry.Point3D <a href=' /geometry/point.py#L1110'>are_collinear</a>()</tt>	Is a sequence of points collinear? test whether or not a set of points are collinear.
<tt style='background-color:#E8E8E8;'> geometry.Point3D <a href=' /geometry/point.py#L1146'>direction_cosine</a>(point)</tt>	Gives the direction cosine between 2 points parameters.
<tt style='background-color:#E8E8E8;'> geometry.Point3D <a href=' /geometry/point.py#L1173'>direction_ratio</a>(point)</tt>	Gives the direction ratio between 2 points parameters.
<tt style='background-color:#E8E8E8;'> geometry.Point3D <a href=' /geometry/point.py#L1197'>intersection</a>(other)</tt>	The intersection between this point and another point.
<tt style='background-color:#E8E8E8;'> geometry.Point3D <a href=' /geometry/point.py#L1235'>scale</a>(x,y,z,pt)</tt>	Scale the coordinates of the point by multiplying by x and y after subtracting pt -- default is 0 0 --.
<tt style='background-color:#E8E8E8;'> geometry.Point3D <a href=' /geometry/point.py#L1262'>transform</a>(matrix)</tt>	Return the point after applying the transformation described by the 4x4 matrix matrix.
<tt style='background-color:#E8E8E8;'> geometry.Point3D <a href=' /geometry/point.py#L1286'>translate</a>(x,y,z)</tt>	Shift the point by adding x and y to the coordinates of the point.
<tt style='background-color:#E8E8E8;'> geometry.Point3D <a href=' /geometry/point.py#L1309'>x</a>()</tt>	Returns the x coordinate of the point.
<tt style='background-color:#E8E8E8;'> geometry.Point3D <a href=' /geometry/point.py#L1324'>y</a>()</tt>	Returns the y coordinate of the point.
<tt style='background-color:#E8E8E8;'> geometry.Point3D <a href=' /geometry/point.py#L1339'>z</a>()</tt>	Returns the z coordinate of the point.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L203'>area</a>()</tt>	The area of the polygon.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L247'>angles</a>()</tt>	The internal angle at each vertex.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L291'>perimeter</a>()</tt>	The perimeter of the polygon.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L320'>vertices</a>()</tt>	The vertices of the polygon.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L356'>centroid</a>()</tt>	The centroid of the polygon.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L391'>sides</a>()</tt>	The line segments that form the sides of the polygon.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L431'>bounds</a>()</tt>	Return a tuple xmin ymin xmax ymax representing the bounding rectangle for the geometric figure.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L443'>is_convex</a>()</tt>	Is the polygon convex? a polygon is convex if all its interior angles are less than 180.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L480'>encloses_point</a>(p)</tt>	Return true if p is enclosed by is inside of self.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L568'>arbitrary_point</a>(parameter)</tt>	A parameterized point on the polygon.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L627'>plot_interval</a>(parameter)</tt>	The plot interval for the default geometric plot of the polygon.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L654'>intersection</a>(o)</tt>	The intersection of polygon and geometry entity.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L711'>distance</a>(o)</tt>	Returns the shortest distance between self and o.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L740'>_do_poly_distance</a>(e2)</tt>	Calculates the least distance between the exteriors of two convex polygons e1 and e2.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L939'>_svg</a>(scale_factor,fill_color)</tt>	Returns svg path element for the polygon.
<tt style='background-color:#E8E8E8;'> geometry.Polygon <a href=' /geometry/polygon.py#L982'>__contains__</a>(o)</tt>	Return true if o is contained within the boundary lines of self altitudes.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1116'>args</a>()</tt>	Returns the center point the radius the number of sides and the orientation angle.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1138'>area</a>()</tt>	Returns the area.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1155'>length</a>()</tt>	Returns the length of the sides.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1177'>center</a>()</tt>	The center of the regularpolygon this is also the center of the circumscribing circle.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1205'>circumcenter</a>()</tt>	Alias for center.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1220'>radius</a>()</tt>	Radius of the regularpolygon this is also the radius of the circumscribing circle.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1249'>circumradius</a>()</tt>	Alias for radius.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1266'>rotation</a>()</tt>	Ccw angle by which the regularpolygon is rotated returns.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1286'>apothem</a>()</tt>	The inradius of the regularpolygon.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1315'>inradius</a>()</tt>	Alias for apothem.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1332'>interior_angle</a>()</tt>	Measure of the interior angles.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1357'>exterior_angle</a>()</tt>	Measure of the exterior angles.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1382'>circumcircle</a>()</tt>	The circumcircle of the regularpolygon.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1407'>incircle</a>()</tt>	The incircle of the regularpolygon.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1432'>angles</a>()</tt>	Returns a dictionary with keys the vertices of the polygon and values the interior angle at each vertex.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1454'>encloses_point</a>(p)</tt>	Return true if p is enclosed by is inside of self.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1512'>spin</a>(angle)</tt>	Increment *in place* the virtual polygon's rotation by ccw angle.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1534'>rotate</a>(angle,pt)</tt>	Override geometryentity rotate to first rotate the regularpolygon.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1557'>scale</a>(x,y,pt)</tt>	Override geometryentity scale since it is the radius that must be.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1583'>reflect</a>(line)</tt>	Override geometryentity reflect since this is not made of only.
<tt style='background-color:#E8E8E8;'> geometry.RegularPolygon <a href=' /geometry/polygon.py#L1602'>vertices</a>()</tt>	The vertices of the regularpolygon.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L1744'>vertices</a>()</tt>	The triangle's vertices returns.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L1770'>is_similar</a>(t1,t2)</tt>	Is another triangle similar to this one.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L1824'>is_equilateral</a>()</tt>	Are all the sides the same length? returns.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L1854'>is_isosceles</a>()</tt>	Are two or more of the sides the same length? returns.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L1878'>is_scalene</a>()</tt>	Are all the sides of the triangle of different lengths? returns.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L1902'>is_right</a>()</tt>	Is the triangle right-angled.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L1930'>altitudes</a>()</tt>	The altitudes of the triangle.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L1966'>orthocenter</a>()</tt>	The orthocenter of the triangle.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L1997'>circumcenter</a>()</tt>	The circumcenter of the triangle the circumcenter is the center of the circumcircle.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L2027'>circumradius</a>()</tt>	The radius of the circumcircle of the triangle.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L2054'>circumcircle</a>()</tt>	The circle which passes through the three vertices of the triangle.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L2080'>bisectors</a>()</tt>	The angle bisectors of the triangle.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L2117'>incenter</a>()</tt>	The center of the incircle.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L2152'>inradius</a>()</tt>	The radius of the incircle.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L2178'>incircle</a>()</tt>	The incircle of the triangle.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L2207'>medians</a>()</tt>	The medians of the triangle.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L2243'>medial</a>()</tt>	The medial triangle of the triangle.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L2272'>nine_point_circle</a>()</tt>	The nine-point circle of the triangle.
<tt style='background-color:#E8E8E8;'> geometry.Triangle <a href=' /geometry/polygon.py#L2304'>eulerline</a>()</tt>	The euler line of the triangle.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/polygon.py#L2330'>rad</a>(d)</tt>	Return the radian value for the given degrees (pi = 180 degrees).
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/polygon.py#L2335'>deg</a>(r)</tt>	Return the degree value for the given radians (pi = 180 degrees).
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/polygon.py#L2345'>_asa</a>(d1,l,d2)</tt>	Return triangle having side with length l on the x-axis.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/polygon.py#L2352'>_sss</a>(l1,l2,l3)</tt>	Return triangle having side of length l1 on the x-axis.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/polygon.py#L2363'>_sas</a>(l1,d,l2)</tt>	Return triangle having side with length l2 on the x-axis.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L66'>__cmp__</a>(other)</tt>	Comparison of two geometryentities.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L96'>__contains__</a>(other)</tt>	Subclasses should implement this method for anything more complex than equality.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L105'>__ne__</a>(o)</tt>	Test inequality of two geometrical entities.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L127'>__repr__</a>()</tt>	String representation of a geometryentity that can be evaluated by sympy.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L138'>__str__</a>()</tt>	String representation of a geometryentity.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L154'>_repr_svg_</a>()</tt>	Svg representation of a geometryentity suitable for ipython.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L220'>_svg</a>(scale_factor,fill_color)</tt>	Returns svg path element for the geometryentity.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L236'>ambient_dimension</a>()</tt>	What is the dimension of the space that the object is contained in?.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L241'>bounds</a>()</tt>	Return a tuple xmin ymin xmax ymax representing the bounding rectangle for the geometric figure.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L250'>encloses</a>(o)</tt>	Return true if o is inside not on or outside the boundaries of self.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L302'>intersection</a>(o)</tt>	Returns a list of all of the intersections of self with o.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L323'>is_similar</a>(other)</tt>	Is this geometrical entity similar to another geometrical entity? two entities are similar if a uniform scaling (enlarging or.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L379'>rotate</a>(angle,pt)</tt>	Rotate angle radians counterclockwise about point pt.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L408'>scale</a>(x,y,pt)</tt>	Scale the object by multiplying the x y-coordinates by x and y.
<tt style='background-color:#E8E8E8;'> geometry.GeometryEntity <a href=' /geometry/entity.py#L438'>translate</a>(x,y)</tt>	Shift the object by adding to the x y-coordinates the values x and y.
<tt style='background-color:#E8E8E8;'> geometry.GeometrySet <a href=' /geometry/entity.py#L472'>_contains</a>(other)</tt>	Sympy sets uses the _contains method so include it for compatibility.
<tt style='background-color:#E8E8E8;'> geometry.GeometrySet <a href=' /geometry/entity.py#L480'>_union</a>(o)</tt>	Returns the union of self and o for use with sympy.
<tt style='background-color:#E8E8E8;'> geometry.GeometrySet <a href=' /geometry/entity.py#L497'>_intersect</a>(o)</tt>	Returns a sympy sets set of intersection objects.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/entity.py#L522'>translate</a>(x,y)</tt>	Return the matrix to translate a 2-d point by x and y.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/entity.py#L530'>scale</a>(x,y,pt)</tt>	Return the matrix to multiply a 2-d point's coordinates by x and y.
<tt style='background-color:#E8E8E8;'> geometry. <a href=' /geometry/entity.py#L546'>rotate</a>(th)</tt>	Return the matrix to rotate a 2-d point about the origin by angle.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L88'>angle_between</a>(o)</tt>	Angle between the plane and other geometric entity.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L136'>arbitrary_point</a>(t)</tt>	Returns an arbitrary point on the plane varying t from 0 to 2*pi will move the point in a circle of radius 1 about p1 of the plane.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L173'>are_concurrent</a>()</tt>	Is a sequence of planes concurrent? two or more planes are concurrent if their intersections.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L222'>distance</a>(o)</tt>	Distance beteen the plane and another geometric entity.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L283'>equals</a>(o)</tt>	Returns true if self and o are the same mathematical entities.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L308'>equation</a>(x,y,z)</tt>	The equation of the plane.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L329'>intersection</a>(o)</tt>	The intersection with other geometrical entity.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L409'>is_coplanar</a>(o)</tt>	Returns true if o is coplanar with self else false.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L434'>is_parallel</a>(l)</tt>	Is the given geometric entity parallel to the plane? parameters.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L474'>is_perpendicular</a>(l)</tt>	Is the given geometric entity perpendicualar to the given plane? parameters.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L515'>normal_vector</a>()</tt>	Normal vector of the given plane.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L533'>p1</a>()</tt>	The only defining point of the plane others can be obtained from the.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L554'>parallel_plane</a>(pt)</tt>	Plane parallel to the given plane and passing through the point pt.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L580'>perpendicular_line</a>(pt)</tt>	A line perpendicular to the given plane.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L605'>perpendicular_plane</a>()</tt>	Return a perpendicular passing through the given points if the.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L671'>projection_line</a>(line)</tt>	Project the given line onto the plane through the normal plane containing the line.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L723'>projection</a>(pt)</tt>	Project the given point onto the plane along the plane normal.
<tt style='background-color:#E8E8E8;'> geometry.Plane <a href=' /geometry/plane.py#L763'>random_point</a>(seed)</tt>	Returns a random point on the plane.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L128'>__eq__</a>(o)</tt>	Is the other geometryentity the same as this ellipse?.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L168'>_svg</a>(scale_factor,fill_color)</tt>	Returns svg ellipse element for the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L193'>apoapsis</a>()</tt>	The apoapsis of the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L221'>arbitrary_point</a>(parameter)</tt>	A parameterized point on the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L262'>area</a>()</tt>	The area of the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L283'>bounds</a>()</tt>	Return a tuple xmin ymin xmax ymax representing the bounding rectangle for the geometric figure.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L293'>center</a>()</tt>	The center of the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L319'>circumference</a>()</tt>	The circumference of the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L341'>eccentricity</a>()</tt>	The eccentricity of the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L362'>encloses_point</a>(p)</tt>	Return true if p is enclosed by is inside of self.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L415'>equation</a>(x,y)</tt>	The equation of the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L451'>evolute</a>(x,y)</tt>	The equation of evolute of the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L483'>foci</a>()</tt>	The foci of the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L528'>focus_distance</a>()</tt>	The focal distance of the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L556'>hradius</a>()</tt>	The horizontal radius of the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L582'>intersection</a>(o)</tt>	The intersection of this ellipse and another geometrical entity o.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L662'>is_tangent</a>(o)</tt>	Is o tangent to the ellipse? parameters.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L737'>major</a>()</tt>	Longer axis of the ellipse if it can be determined else hradius.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L784'>minor</a>()</tt>	Shorter axis of the ellipse if it can be determined else vradius.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L831'>normal_lines</a>(p,prec)</tt>	Normal lines between p and the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L913'>periapsis</a>()</tt>	The periapsis of the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L942'>semilatus_rectum</a>()</tt>	Calculates the semi-latus rectum of the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L981'>plot_interval</a>(parameter)</tt>	The plot interval for the default geometric plot of the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L1008'>random_point</a>(seed)</tt>	A random point on the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L1088'>reflect</a>(line)</tt>	Override geometryentity reflect since the radius.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L1132'>rotate</a>(angle,pt)</tt>	Rotate angle radians counterclockwise about point pt.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L1157'>scale</a>(x,y,pt)</tt>	Override geometryentity scale since it is the major and minor.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L1178'>tangent_lines</a>(p)</tt>	Tangent lines between p and the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Ellipse <a href=' /geometry/ellipse.py#L1267'>vradius</a>()</tt>	The vertical radius of the ellipse.
<tt style='background-color:#E8E8E8;'> geometry.Circle <a href=' /geometry/ellipse.py#L1363'>circumference</a>()</tt>	The circumference of the circle.
<tt style='background-color:#E8E8E8;'> geometry.Circle <a href=' /geometry/ellipse.py#L1383'>equation</a>(x,y)</tt>	The equation of the circle.
<tt style='background-color:#E8E8E8;'> geometry.Circle <a href=' /geometry/ellipse.py#L1414'>intersection</a>(o)</tt>	The intersection of this circle with another geometrical entity.
<tt style='background-color:#E8E8E8;'> geometry.Circle <a href=' /geometry/ellipse.py#L1446'>radius</a>()</tt>	The radius of the circle.
<tt style='background-color:#E8E8E8;'> geometry.Circle <a href=' /geometry/ellipse.py#L1471'>reflect</a>(line)</tt>	Override geometryentity reflect since the radius.
<tt style='background-color:#E8E8E8;'> geometry.Circle <a href=' /geometry/ellipse.py#L1486'>scale</a>(x,y,pt)</tt>	Override geometryentity scale since the radius.
<tt style='background-color:#E8E8E8;'> geometry.Circle <a href=' /geometry/ellipse.py#L1510'>vradius</a>()</tt>	This ellipse property is an alias for the circle's radius.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/holonomic.py#L33'>DifferentialOperators</a>(base,generator)</tt>	This function is used to create annihilators using dx.
<tt style='background-color:#E8E8E8;'> holonomic.DifferentialOperator <a href=' /holonomic/holonomic.py#L202'>__mul__</a>(other)</tt>	Multiplies two differentialoperator and returns another.
<tt style='background-color:#E8E8E8;'> holonomic.DifferentialOperator <a href=' /holonomic/holonomic.py#L365'>is_singular</a>(x0)</tt>	Checks if the differential equation is singular at x0.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L481'>unify</a>(other)</tt>	Unifies the base polynomial ring of a given two holonomic functions.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L511'>is_singularics</a>()</tt>	Returns true if the function have singular initial condition in the dictionary format.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L527'>_have_init_cond</a>()</tt>	Checks if the function have initial condition.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L533'>_singularics_to_ord</a>()</tt>	Converts a singular initial condition to ordinary if possible.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L709'>integrate</a>(limits,initcond)</tt>	Integrates the given holonomic function.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L836'>diff</a>()</tt>	Differentiation of the given holonomic function.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L1146'>degree</a>()</tt>	Returns the highest power of x in the annihilator.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L1153'>composition</a>(expr)</tt>	Returns function after composition of a holonomic function with an algebraic function.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L1219'>to_sequence</a>(lb)</tt>	Finds recurrence relation for the coefficients in the series expansion of the function about :math x_0, where :math x_0 is the point at.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L1627'>series</a>(n,coefficient,order,_recur)</tt>	Finds the power series expansion of given holonomic function about :math x_0.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L1716'>_indicial</a>()</tt>	Computes roots of the indicial equation.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L1756'>evalf</a>(points,method,h,derivatives)</tt>	Finds numerical value of a holonomic function using numerical methods.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L1828'>change_x</a>(z)</tt>	Changes only the variable of holonomic function for internal purposes.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L1843'>shift_x</a>(a)</tt>	Substitute x + a for x.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L1859'>to_hyper</a>(as_list,_recur)</tt>	Returns a hypergeometric function or linear combination of them representing the given holonomic function.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L2039'>to_expr</a>()</tt>	Converts a holonomic function back to elementary functions.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L2060'>change_ics</a>(b,lenics)</tt>	Changes the point x0 to b for initial conditions.
<tt style='background-color:#E8E8E8;'> holonomic.HolonomicFunction <a href=' /holonomic/holonomic.py#L2095'>to_meijerg</a>()</tt>	Returns a linear combination of meijer g-functions.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/holonomic.py#L2130'>from_hyper</a>(func,x0,evalf)</tt>	Converts a hypergeometric function to holonomic.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/holonomic.py#L2204'>from_meijerg</a>(func,x0,evalf,initcond)</tt>	Converts a meijer g-function to holonomic.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/holonomic.py#L2292'>expr_to_holonomic</a>(func,x,x0,y0)</tt>	Converts a function or an expression to a holonomic function.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/holonomic.py#L2457'>_normalize</a>(list_of,parent,negative)</tt>	Normalize a given annihilator.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/holonomic.py#L2514'>_derivate_diff_eq</a>(listofpoly)</tt>	Let a differential equation a0 x y x + a1 x y' x + = 0.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/holonomic.py#L2534'>_hyper_to_meijerg</a>(func)</tt>	Converts a hyper to meijerg.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/holonomic.py#L2567'>_add_lists</a>(list1,list2)</tt>	Takes polynomial sequences of two annihilators a and b and returns the list of polynomials of sum of a and b.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/holonomic.py#L2578'>_extend_y0</a>(Holonomic,n)</tt>	Tries to find more initial conditions by substituting the initial value point in the differential equation.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/holonomic.py#L2672'>_convert_poly_rat_alg</a>(func,x,x0,y0)</tt>	Converts polynomials rationals and algebraic functions to holonomic.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/holonomic.py#L2826'>_create_table</a>(table,domain)</tt>	Creates the look-up table for a similar implementation.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/numerical.py#L10'>_evalf</a>(func,points,derivatives,method)</tt>	Numerical methods for numerical integration along a given set of points in the complex plane.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/numerical.py#L47'>_euler</a>(red,x0,x1,y0)</tt>	Euler's method for numerical integration.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/numerical.py#L71'>_rk4</a>(red,x0,x1,y0)</tt>	Runge-kutta 4th order numerical method.
<tt style='background-color:#E8E8E8;'> holonomic. <a href=' /holonomic/recurrence.py#L11'>RecurrenceOperators</a>(base,generator)</tt>	Returns an algebra of recurrence operators and the operator for shifting i.
<tt style='background-color:#E8E8E8;'> holonomic.RecurrenceOperator <a href=' /holonomic/recurrence.py#L154'>__mul__</a>(other)</tt>	Multiplies two operators and returns another.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L25'>AZ</a>(s)</tt>	Return the letters of s in uppercase in case more than.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L59'>padded_key</a>(key,symbols,filter)</tt>	Return a string of the distinct characters of symbols with those of key appearing first omitting characters in key.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L91'>check_and_join</a>(phrase,symbols,filter)</tt>	Joins characters of phrase and if symbols is given raises an error if any character in phrase is not in symbols.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L146'>cycle_list</a>(k,n)</tt>	Returns the elements of the list range n shifted to the left by k (so the list starts with k (mod n)).
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L166'>encipher_shift</a>(msg,key,symbols)</tt>	Performs shift cipher encryption on plaintext msg and returns the ciphertext.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L227'>decipher_shift</a>(msg,key,symbols)</tt>	Return the text by shifting the characters of msg to the left by the amount given by key.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L256'>encipher_affine</a>(msg,key,symbols,_inverse)</tt>	Performs the affine cipher encryption on plaintext msg, and returns the ciphertext.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L320'>decipher_affine</a>(msg,key,symbols)</tt>	Return the deciphered text that was made from the mapping x \rightarrow ax+b (mod n), where n is the.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L346'>encipher_substitution</a>(msg,old,new)</tt>	Returns the ciphertext obtained by replacing each character that appears in old with the corresponding character in new.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L403'>encipher_vigenere</a>(msg,key,symbols)</tt>	Performs the vigenère cipher encryption on plaintext msg, and returns the ciphertext.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L571'>decipher_vigenere</a>(msg,key,symbols)</tt>	Decode using the vigenère cipher.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L597'>encipher_hill</a>(msg,key,symbols,pad)</tt>	Return the hill cipher encryption of msg.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L682'>decipher_hill</a>(msg,key,symbols)</tt>	Deciphering is the same as enciphering but using the inverse of the key matrix.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L749'>encipher_bifid</a>(msg,key,symbols)</tt>	Performs the bifid cipher encryption on plaintext msg, and returns the ciphertext.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L798'>decipher_bifid</a>(msg,key,symbols)</tt>	Performs the bifid cipher decryption on ciphertext msg, and returns the plaintext.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L890'>bifid_square</a>(key)</tt>	Return characters of key arranged in a square.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L929'>encipher_bifid5</a>(msg,key)</tt>	Performs the bifid cipher encryption on plaintext msg, and returns the ciphertext.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1024'>decipher_bifid5</a>(msg,key)</tt>	Return the bifid cipher decryption of msg.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1063'>bifid5_square</a>(key)</tt>	5x5 polybius square.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1090'>encipher_bifid6</a>(msg,key)</tt>	Performs the bifid cipher encryption on plaintext msg, and returns the ciphertext.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1120'>decipher_bifid6</a>(msg,key)</tt>	Performs the bifid cipher decryption on ciphertext msg, and returns the plaintext.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1157'>bifid6_square</a>(key)</tt>	6x6 polybius square.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1189'>rsa_public_key</a>(p,q,e)</tt>	Return the rsa *public key* pair n e , where n is a product of two primes and e is relatively.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1215'>rsa_private_key</a>(p,q,e)</tt>	Return the rsa *private key*, n d , where n is a product of two primes and d is the inverse of.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1242'>encipher_rsa</a>(i,key)</tt>	Return encryption of i by computing i^e (mod n), where key is the public key n e.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1262'>decipher_rsa</a>(i,key)</tt>	Return decyption of i by computing i^d (mod n), where key is the private key n d.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1285'>kid_rsa_public_key</a>(a,b,A,B)</tt>	Kid rsa is a version of rsa useful to teach grade school children since it does not involve exponentiation.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1321'>kid_rsa_private_key</a>(a,b,A,B)</tt>	Compute m = a b - 1, e = a m + a, d = b m + b, n = e d - 1 / m.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1343'>encipher_kid_rsa</a>(msg,key)</tt>	Here msg is the plaintext and key is the public key.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1363'>decipher_kid_rsa</a>(msg,key)</tt>	Here msg is the plaintext and key is the private key.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1419'>encode_morse</a>(msg,sep,mapping)</tt>	Encodes a plaintext into popular morse code with letters separated by sep and words by a double sep.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1466'>decode_morse</a>(msg,sep,mapping)</tt>	Decodes a morse code with letters separated by sep (default is '|') and words by word_sep (default is '||).
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1503'>lfsr_sequence</a>(key,fill,n)</tt>	This function creates an lfsr sequence.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1602'>lfsr_autocorrelation</a>(L,P,k)</tt>	This function computes the lfsr autocorrelation function.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1646'>lfsr_connection_polynomial</a>(s)</tt>	This function computes the lfsr connection polynomial.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1744'>elgamal_private_key</a>(digit,seed)</tt>	Return three number tuple as private key.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1790'>elgamal_public_key</a>(key)</tt>	Return three number tuple as public key.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1815'>encipher_elgamal</a>(i,key,seed)</tt>	Encrypt message with public key i is a plaintext message expressed as an integer.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1868'>decipher_elgamal</a>(msg,key)</tt>	Decrypt message with private key msg = (c_{1}, c_{2}).
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1909'>dh_private_key</a>(digit,seed)</tt>	Return three integer tuple as private key.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L1970'>dh_public_key</a>(key)</tt>	Return three number tuple as public key.
<tt style='background-color:#E8E8E8;'> crypto. <a href=' /crypto/crypto.py#L2002'>dh_shared_key</a>(key,b)</tt>	Return an integer that is the shared key.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/sympify.py#L53'>sympify</a>(a,locals,convert_xor,strict)</tt>	Converts an arbitrary expression to a type that can be used inside sympy.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/sympify.py#L359'>_sympify</a>(a)</tt>	Short version of sympify for internal usage for __add__ and __eq__ methods where it is ok to allow some things like python integers and floats in.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/sympify.py#L388'>kernS</a>(s)</tt>	Use a hack to try keep autosimplification from joining integer or minus sign into an add of a mul this modification doesn't.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/multidimensional.py#L12'>apply_on_element</a>(f,args,kwargs,n)</tt>	Returns a structure with the same dimension as the specified argument where each basic element is replaced by the function f applied on it.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/multidimensional.py#L42'>iter_copy</a>(structure)</tt>	Returns a copy of an iterable object also copying all embedded iterables.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/multidimensional.py#L55'>structure_copy</a>(structure)</tt>	Returns a copy of the given structure numpy-array list iterable.
<tt style='background-color:#E8E8E8;'> core.vectorize <a href=' /core/multidimensional.py#L89'>__init__</a>()</tt>	The given numbers and strings characterize the arguments that will be treated as data structures where the decorated function will be applied.
<tt style='background-color:#E8E8E8;'> core.vectorize <a href=' /core/multidimensional.py#L101'>__call__</a>(f)</tt>	Returns a wrapper for the one-dimensional function that can handle multidimensional arguments.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L114'>_hashable_content</a>()</tt>	Return a tuple of information about self that can be used to compute the hash.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L124'>assumptions0</a>()</tt>	Return object type assumptions.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L154'>compare</a>(other)</tt>	Return -1 0 1 if the object is smaller equal or greater than other.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L227'>fromiter</a>(cls,args)</tt>	Create a new object from an iterable.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L245'>class_key</a>(cls)</tt>	Nice order of classes.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L250'>sort_key</a>(order)</tt>	Return a sort key.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L281'>__eq__</a>(other)</tt>	Return a boolean indicating whether a == b on the basis of their symbolic trees.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L333'>__ne__</a>(other)</tt>	A != b -> compare two symbolic trees and see whether they are different this is the same as.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L344'>dummy_eq</a>(other,symbol)</tt>	Compare two expressions and handle dummy symbols.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L393'>__repr__</a>()</tt>	Method to return the string representation.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L404'>atoms</a>()</tt>	Returns the atoms that form the current object.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L487'>free_symbols</a>()</tt>	Return from the atoms of self those which are free symbols.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L502'>canonical_variables</a>()</tt>	Return a dictionary mapping any variable defined in self.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L529'>rcall</a>()</tt>	Apply on the argument recursively through the expression tree.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L546'>_recursive_call</a>(expr_to_call,on_args)</tt>	Helper for rcall method.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L572'>is_comparable</a>()</tt>	Return true if self can be computed to a real number or already is a real number with precision else false.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L618'>func</a>()</tt>	The top-level function in an expression.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L644'>args</a>()</tt>	Returns a tuple of arguments of 'self'.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L676'>_sorted_args</a>()</tt>	The same as args derived classes which don't fix an.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L686'>as_poly</a>()</tt>	Converts self to a polynomial or returns none.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L714'>as_content_primitive</a>(radical,clear)</tt>	A stub to allow basic args like tuple to be skipped when computing the content and primitive components of an expression.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L722'>subs</a>()</tt>	Substitutes old for new in an expression after sympifying args.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L920'>_subs</a>(old,new)</tt>	Substitutes an expression old -> new.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L1032'>_eval_subs</a>(old,new)</tt>	Override this stub if you want to do anything more than attempt a replacement of old with new in the arguments of self.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L1103'>_xreplace</a>(rule)</tt>	Helper for xreplace tracks whether a replacement actually occurred.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L1124'>has</a>()</tt>	Test whether any subexpression matches any of the patterns.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L1173'>_has</a>(pattern)</tt>	Helper for has().
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L1191'>_has_matcher</a>()</tt>	Helper for has().
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L1195'>replace</a>(query,value,map,simultaneous)</tt>	Replace matching subexpressions of self with value.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L1427'>find</a>(query,group)</tt>	Find all subexpressions matching a query.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L1445'>count</a>(query)</tt>	Count the number of matching subexpressions.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L1450'>matches</a>(expr,repl_dict,old)</tt>	Helper method for match() that looks for a match between wild symbols in self and expressions in expr.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L1528'>count_ops</a>(visual)</tt>	Wrapper for count_ops that returns the operation count.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L1533'>doit</a>()</tt>	Evaluate objects that are not evaluated by default like limits integrals sums and products.
<tt style='background-color:#E8E8E8;'> core.Basic <a href=' /core/basic.py#L1579'>rewrite</a>()</tt>	Rewrite functions in terms of other functions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/basic.py#L1691'>_aresame</a>(a,b)</tt>	Return true if a and b are structurally the same else false.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/basic.py#L1724'>_atomic</a>(e)</tt>	Return atom-like quantities as far as substitution is concerned derivatives functions and symbols.
<tt style='background-color:#E8E8E8;'> core.preorder_traversal <a href=' /core/basic.py#L1841'>skip</a>()</tt>	Skip yielding current node's (last yielded node's) subtrees.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/basic.py#L1869'>_make_find_query</a>(query)</tt>	Convert the argument of basic find() into a callable.
<tt style='background-color:#E8E8E8;'> core.Symbol <a href=' /core/symbol.py#L42'>_diff_wrt</a>()</tt>	Allow derivatives wrt symbols.
<tt style='background-color:#E8E8E8;'> core.Symbol <a href=' /core/symbol.py#L56'>_sanitize</a>(assumptions,obj)</tt>	Remove none covert values to bool check commutativity *in place*.
<tt style='background-color:#E8E8E8;'> core.Symbol <a href=' /core/symbol.py#L90'>__new__</a>(cls,name)</tt>	Symbols are identified by name and assumptions :.
<tt style='background-color:#E8E8E8;'> core.Symbol <a href=' /core/symbol.py#L151'>as_dummy</a>()</tt>	Return a dummy having the same name and same assumptions as self.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/symbol.py#L333'>symbols</a>(names)</tt>	Transform strings into instances of :class symbol class.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/symbol.py#L546'>var</a>(names)</tt>	Create symbols and inject them into the global namespace.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/exprtools.py#L31'>_monotonic_sign</a>()</tt>	Return the value closest to 0 that self may have if all symbols are signed and the result is uniformly the same sign for all values of symbols.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/exprtools.py#L206'>decompose_power</a>(expr)</tt>	Decompose power into symbolic base and integer exponent.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/exprtools.py#L255'>decompose_power_rat</a>(expr)</tt>	Decompose power into symbolic base and rational exponent.
<tt style='background-color:#E8E8E8;'> core.Factors <a href=' /core/exprtools.py#L284'>__init__</a>(factors)</tt>	Initialize factors from dict or expr.
<tt style='background-color:#E8E8E8;'> core.Factors <a href=' /core/exprtools.py#L402'>is_zero</a>()</tt>	>>> from sympy core exprtools import factors.
<tt style='background-color:#E8E8E8;'> core.Factors <a href=' /core/exprtools.py#L412'>is_one</a>()</tt>	>>> from sympy core exprtools import factors.
<tt style='background-color:#E8E8E8;'> core.Factors <a href=' /core/exprtools.py#L421'>as_expr</a>()</tt>	Return the underlying expression.
<tt style='background-color:#E8E8E8;'> core.Factors <a href=' /core/exprtools.py#L449'>mul</a>(other)</tt>	Return factors of self * other.
<tt style='background-color:#E8E8E8;'> core.Factors <a href=' /core/exprtools.py#L482'>normal</a>(other)</tt>	Return self and other with gcd removed from each.
<tt style='background-color:#E8E8E8;'> core.Factors <a href=' /core/exprtools.py#L552'>div</a>(other)</tt>	Return self and other with gcd removed from each.
<tt style='background-color:#E8E8E8;'> core.Factors <a href=' /core/exprtools.py#L654'>quo</a>(other)</tt>	Return numerator factor of self / other.
<tt style='background-color:#E8E8E8;'> core.Factors <a href=' /core/exprtools.py#L669'>rem</a>(other)</tt>	Return denominator factors of self / other.
<tt style='background-color:#E8E8E8;'> core.Factors <a href=' /core/exprtools.py#L686'>pow</a>(other)</tt>	Return self raised to a non-negative integer power.
<tt style='background-color:#E8E8E8;'> core.Factors <a href=' /core/exprtools.py#L714'>gcd</a>(other)</tt>	Return factors of gcd self other the keys are.
<tt style='background-color:#E8E8E8;'> core.Factors <a href=' /core/exprtools.py#L747'>lcm</a>(other)</tt>	Return factors of lcm self other which are the union of factors with the maximum exponent for.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/exprtools.py#L915'>_gcd_terms</a>(terms,isprimitive,fraction)</tt>	Helper function for :func gcd_terms.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/exprtools.py#L975'>gcd_terms</a>(terms,isprimitive,clear,fraction)</tt>	Compute the gcd of terms and put them together.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/exprtools.py#L1093'>factor_terms</a>(expr,radical,clear,fraction)</tt>	Remove common factors from terms in all arguments without changing the underlying structure of the expr.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/exprtools.py#L1196'>_mask_nc</a>(eq,name)</tt>	Return eq with non-commutative objects replaced with dummy symbols.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/exprtools.py#L1333'>factor_nc</a>(expr)</tt>	Return the factored form of expr while handling non-commutative expressions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/compatibility.py#L138'>with_metaclass</a>(meta)</tt>	Create a base class with a metaclass.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/compatibility.py#L196'>iterable</a>(i,exclude)</tt>	Return a boolean indicating whether i is sympy iterable.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/compatibility.py#L254'>is_sequence</a>(i,include)</tt>	Return a boolean indicating whether i is a sequence in the sympy sense.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/compatibility.py#L305'>as_int</a>(n)</tt>	Convert the argument to a builtin integer.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/compatibility.py#L338'>default_sort_key</a>(item,order)</tt>	Return a key that can be used for sorting.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/compatibility.py#L500'>_nodes</a>(e)</tt>	A helper for ordered() which returns the node count of e which for basic objects is the number of basic nodes in the expression tree.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/compatibility.py#L519'>ordered</a>(seq,keys,default,warn)</tt>	Return an iterator of the seq where keys are used to break ties in a conservative fashion if after applying a key there are no ties.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/compatibility.py#L704'>_make_key</a>(args,kwds,typed,kwd_mark)</tt>	Make a cache key from optionally typed positional and keyword arguments.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/compatibility.py#L723'>lru_cache</a>(maxsize,typed)</tt>	Least-recently-used cache decorator.
<tt style='background-color:#E8E8E8;'> core.Tuple <a href=' /core/containers.py#L104'>tuple_count</a>(value)</tt>	T count value -> integer -- return number of occurrences of value.
<tt style='background-color:#E8E8E8;'> core.Tuple <a href=' /core/containers.py#L108'>index</a>(value,start,stop)</tt>	T index(value [start [stop]]) -> integer -- return first index of value.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/containers.py#L134'>tuple_wrapper</a>(method)</tt>	Decorator that converts any tuple in the function arguments into a tuple.
<tt style='background-color:#E8E8E8;'> core.Dict <a href=' /core/containers.py#L209'>__getitem__</a>(key)</tt>	X __getitem__ y <==> x[y].
<tt style='background-color:#E8E8E8;'> core.Dict <a href=' /core/containers.py#L220'>items</a>()</tt>	D items() -> list of d's key value pairs as 2-tuples.
<tt style='background-color:#E8E8E8;'> core.Dict <a href=' /core/containers.py#L224'>keys</a>()</tt>	D keys() -> list of d's keys.
<tt style='background-color:#E8E8E8;'> core.Dict <a href=' /core/containers.py#L228'>values</a>()</tt>	D values() -> list of d's values.
<tt style='background-color:#E8E8E8;'> core.Dict <a href=' /core/containers.py#L232'>__iter__</a>()</tt>	X __iter__() <==> iter x.
<tt style='background-color:#E8E8E8;'> core.Dict <a href=' /core/containers.py#L236'>__len__</a>()</tt>	X __len__() <==> len x.
<tt style='background-color:#E8E8E8;'> core.Dict <a href=' /core/containers.py#L240'>get</a>(key,default)</tt>	D get(k[,d]) -> d[k] if k in d else d d defaults to none.
<tt style='background-color:#E8E8E8;'> core.Dict <a href=' /core/containers.py#L244'>__contains__</a>(key)</tt>	D __contains__ k -> true if d has a key k else false.
<tt style='background-color:#E8E8E8;'> core.AssocOp <a href=' /core/operations.py#L49'>_from_args</a>(cls,args,is_commutative)</tt>	Create new instance with already-processed args.
<tt style='background-color:#E8E8E8;'> core.AssocOp <a href=' /core/operations.py#L63'>_new_rawargs</a>()</tt>	Create new instance of own class with args exactly as provided by caller but returning the self class identity if args is empty.
<tt style='background-color:#E8E8E8;'> core.AssocOp <a href=' /core/operations.py#L111'>flatten</a>(cls,seq)</tt>	Return seq so that none of the elements are of type cls this is.
<tt style='background-color:#E8E8E8;'> core.AssocOp <a href=' /core/operations.py#L127'>_matches_commutative</a>(expr,repl_dict,old)</tt>	Matches add/mul "pattern" to an expression "expr".
<tt style='background-color:#E8E8E8;'> core.AssocOp <a href=' /core/operations.py#L261'>_has_matcher</a>()</tt>	Helper for has().
<tt style='background-color:#E8E8E8;'> core.AssocOp <a href=' /core/operations.py#L295'>_eval_evalf</a>(prec)</tt>	Evaluate the parts of self that are numbers if the whole thing was a number with no functions it would have been evaluated but.
<tt style='background-color:#E8E8E8;'> core.AssocOp <a href=' /core/operations.py#L351'>make_args</a>(cls,expr)</tt>	Return a sequence of elements args such that cls(*args) == expr >>> from sympy import symbol mul add.
<tt style='background-color:#E8E8E8;'> core.LatticeOp <a href=' /core/operations.py#L428'>_new_args_filter</a>(cls,arg_sequence,call_cls)</tt>	Generator filtering args.
<tt style='background-color:#E8E8E8;'> core.LatticeOp <a href=' /core/operations.py#L443'>make_args</a>(cls,expr)</tt>	Return a set of args such that cls(*arg_set) == expr.
<tt style='background-color:#E8E8E8;'> core.Relational <a href=' /core/relational.py#L64'>lhs</a>()</tt>	The left-hand side of the relation.
<tt style='background-color:#E8E8E8;'> core.Relational <a href=' /core/relational.py#L69'>rhs</a>()</tt>	The right-hand side of the relation.
<tt style='background-color:#E8E8E8;'> core.Relational <a href=' /core/relational.py#L74'>reversed</a>()</tt>	Return the relationship with sides and sign reversed.
<tt style='background-color:#E8E8E8;'> core.Relational <a href=' /core/relational.py#L99'>canonical</a>()</tt>	Return a canonical form of the relational.
<tt style='background-color:#E8E8E8;'> core.Relational <a href=' /core/relational.py#L127'>equals</a>(other,failing_expression)</tt>	Return true if the sides of the relationship are mathematically identical and the type of relationship is the same.
<tt style='background-color:#E8E8E8;'> core.Relational <a href=' /core/relational.py#L199'>as_set</a>()</tt>	Rewrites univariate inequality in terms of real sets examples.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/power.py#L23'>isqrt</a>(n)</tt>	Return the largest integer less than or equal to sqrt n.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/power.py#L30'>integer_nthroot</a>(y,n)</tt>	Return a tuple containing x = floor(y**(1/n)) and a boolean indicating whether the result is exact (that is.
<tt style='background-color:#E8E8E8;'> core.Pow <a href=' /core/power.py#L631'>as_base_exp</a>()</tt>	Return base and exp of self.
<tt style='background-color:#E8E8E8;'> core.Pow <a href=' /core/power.py#L693'>_eval_expand_power_exp</a>()</tt>	A** n+m -> a**n*a**m.
<tt style='background-color:#E8E8E8;'> core.Pow <a href=' /core/power.py#L704'>_eval_expand_power_base</a>()</tt>	(a*b)**n -> a**n * b**n.
<tt style='background-color:#E8E8E8;'> core.Pow <a href=' /core/power.py#L820'>_eval_expand_multinomial</a>()</tt>	A+b+ ** n -> a**n + n*a** n-1 *b + n is nonzero integer.
<tt style='background-color:#E8E8E8;'> core.Pow <a href=' /core/power.py#L1394'>as_content_primitive</a>(radical,clear)</tt>	Return the tuple (r self/r) where r is the positive rational extracted from self.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/assumptions.py#L233'>as_property</a>(fact)</tt>	Convert a fact name to the name of the corresponding property.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/assumptions.py#L238'>make_property</a>(fact)</tt>	Create the automagic property corresponding to a fact.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/assumptions.py#L253'>_ask</a>(fact,obj)</tt>	Find the truth value for a property of an object.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/numbers.py#L38'>comp</a>(z1,z2,tol)</tt>	Return a bool indicating whether the error between z1 and z2 is <= tol.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/numbers.py#L78'>mpf_norm</a>(mpf,prec)</tt>	Return the mpf tuple normalized appropriately for the indicated precision after doing a check to see if zero should be returned or.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/numbers.py#L111'>seterr</a>(divide)</tt>	Should sympy raise an exception on 0/0 or return a nan? divide == true.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/numbers.py#L134'>_decimal_to_Rational_prec</a>(dec)</tt>	Convert an ordinary decimal instance to a rational.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/numbers.py#L149'>_literal_float</a>(f)</tt>	Return true if n can be interpreted as a floating point number.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/numbers.py#L160'>igcd</a>()</tt>	Computes nonnegative integer greatest common divisor.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/numbers.py#L210'>ilcm</a>()</tt>	Computes integer least common multiple.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/numbers.py#L236'>igcdex</a>(a,b)</tt>	Returns x y g such that g = x*a + y*b = gcd a b.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/numbers.py#L279'>mod_inverse</a>(a,m)</tt>	Return the number c such that a * c % m == 1 where c has the same sign as a.
<tt style='background-color:#E8E8E8;'> core.Number <a href=' /core/numbers.py#L426'>_as_mpf_val</a>(prec)</tt>	Evaluation of mpf tuple accurate to at least prec bits.
<tt style='background-color:#E8E8E8;'> core.Number <a href=' /core/numbers.py#L587'>as_coeff_Mul</a>(rational)</tt>	Efficiently extract the coefficient of a product.
<tt style='background-color:#E8E8E8;'> core.Number <a href=' /core/numbers.py#L593'>as_coeff_Add</a>(rational)</tt>	Efficiently extract the coefficient of a summation.
<tt style='background-color:#E8E8E8;'> core.Number <a href=' /core/numbers.py#L599'>gcd</a>(other)</tt>	Compute gcd of self and other.
<tt style='background-color:#E8E8E8;'> core.Number <a href=' /core/numbers.py#L604'>lcm</a>(other)</tt>	Compute lcm of self and other.
<tt style='background-color:#E8E8E8;'> core.Number <a href=' /core/numbers.py#L609'>cofactors</a>(other)</tt>	Compute gcd and cofactors of self and other.
<tt style='background-color:#E8E8E8;'> core.Float <a href=' /core/numbers.py#L1049'>_eval_power</a>(expt)</tt>	Expt is symbolic object but not equal to 0 1.
<tt style='background-color:#E8E8E8;'> core.Rational <a href=' /core/numbers.py#L1366'>limit_denominator</a>(max_denominator)</tt>	Closest rational to self with denominator at most max_denominator.
<tt style='background-color:#E8E8E8;'> core.Rational <a href=' /core/numbers.py#L1656'>factors</a>(limit,use_trial,use_rho,use_pm1)</tt>	A wrapper to factorint which return factors of self that are smaller than limit or cheap to compute.
<tt style='background-color:#E8E8E8;'> core.Rational <a href=' /core/numbers.py#L1693'>as_content_primitive</a>(radical,clear)</tt>	Return the tuple (r self/r) where r is the positive rational extracted from self.
<tt style='background-color:#E8E8E8;'> core.Rational <a href=' /core/numbers.py#L1713'>as_coeff_Mul</a>(rational)</tt>	Efficiently extract the coefficient of a product.
<tt style='background-color:#E8E8E8;'> core.Rational <a href=' /core/numbers.py#L1717'>as_coeff_Add</a>(rational)</tt>	Efficiently extract the coefficient of a summation.
<tt style='background-color:#E8E8E8;'> core.Integer <a href=' /core/numbers.py#L2006'>_eval_power</a>(expt)</tt>	Tries to do some simplifications on self**expt returns none if no further simplifications can be done.
<tt style='background-color:#E8E8E8;'> core.AlgebraicNumber <a href=' /core/numbers.py#L2149'>__new__</a>(cls,expr,coeffs,alias)</tt>	Construct a new algebraic number.
<tt style='background-color:#E8E8E8;'> core.AlgebraicNumber <a href=' /core/numbers.py#L2212'>is_aliased</a>()</tt>	Returns true if alias was set.
<tt style='background-color:#E8E8E8;'> core.AlgebraicNumber <a href=' /core/numbers.py#L2217'>as_poly</a>(x)</tt>	Create a poly instance from self.
<tt style='background-color:#E8E8E8;'> core.AlgebraicNumber <a href=' /core/numbers.py#L2228'>as_expr</a>(x)</tt>	Create a basic expression from self.
<tt style='background-color:#E8E8E8;'> core.AlgebraicNumber <a href=' /core/numbers.py#L2232'>coeffs</a>()</tt>	Returns all sympy coefficients of an algebraic number.
<tt style='background-color:#E8E8E8;'> core.AlgebraicNumber <a href=' /core/numbers.py#L2236'>native_coeffs</a>()</tt>	Returns all native coefficients of an algebraic number.
<tt style='background-color:#E8E8E8;'> core.AlgebraicNumber <a href=' /core/numbers.py#L2240'>to_algebraic_integer</a>()</tt>	Convert self to an algebraic integer.
<tt style='background-color:#E8E8E8;'> core.Zero <a href=' /core/numbers.py#L2349'>as_coeff_Mul</a>(rational)</tt>	Efficiently extract the coefficient of a summation.
<tt style='background-color:#E8E8E8;'> core.Infinity <a href=' /core/numbers.py#L2622'>_eval_power</a>(expt)</tt>	Expt is symbolic object but not equal to 0 or 1.
<tt style='background-color:#E8E8E8;'> core.NegativeInfinity <a href=' /core/numbers.py#L2842'>_eval_power</a>(expt)</tt>	Expt is symbolic object but not equal to 0 or 1.
<tt style='background-color:#E8E8E8;'> core.NumberSymbol <a href=' /core/numbers.py#L3163'>approximation</a>(number_cls)</tt>	Return an interval with number_cls endpoints that contains the value of numbersymbol.
<tt style='background-color:#E8E8E8;'> core.ImaginaryUnit <a href=' /core/numbers.py#L3618'>_eval_power</a>(expt)</tt>	B is i = sqrt -1.
<tt style='background-color:#E8E8E8;'> core.SingletonRegistry <a href=' /core/singleton.py#L99'>__getattr__</a>(name)</tt>	Python calls __getattr__ if no attribute of that name was installed yet.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/decorators.py#L15'>deprecated</a>()</tt>	This is a decorator which can be used to mark functions as deprecated.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/decorators.py#L32'>_sympifyit</a>(arg,retval)</tt>	Decorator to smartly _sympify function arguments @_sympifyit('other', notimplemented).
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/decorators.py#L54'>__sympifyit</a>(func,arg,retval)</tt>	Decorator to _sympify arg argument for function func.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/decorators.py#L85'>call_highest_priority</a>(method_name)</tt>	A decorator for binary special methods to handle _op_priority.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/add.py#L22'>_unevaluated_Add</a>()</tt>	Return a well-formed unevaluated add numbers are collected and put in slot 0 and args are sorted.
<tt style='background-color:#E8E8E8;'> core.Add <a href=' /core/add.py#L75'>flatten</a>(cls,seq)</tt>	Takes the sequence "seq" of nested adds and returns a flatten list.
<tt style='background-color:#E8E8E8;'> core.Add <a href=' /core/add.py#L271'>class_key</a>(cls)</tt>	Nice order of classes.
<tt style='background-color:#E8E8E8;'> core.Add <a href=' /core/add.py#L276'>as_coefficients_dict</a>(a)</tt>	Return a dictionary mapping terms to their rational coefficient.
<tt style='background-color:#E8E8E8;'> core.Add <a href=' /core/add.py#L307'>as_coeff_add</a>()</tt>	Returns a tuple coeff args where self is treated as an add and coeff is the number term and args is a tuple of all other terms.
<tt style='background-color:#E8E8E8;'> core.Add <a href=' /core/add.py#L336'>as_coeff_Add</a>(rational)</tt>	Efficiently extract the coefficient of a summation.
<tt style='background-color:#E8E8E8;'> core.Add <a href=' /core/add.py#L366'>_combine_inverse</a>(lhs,rhs)</tt>	Returns lhs - rhs but treats arguments like symbols so things like oo - oo return 0 instead of a nan.
<tt style='background-color:#E8E8E8;'> core.Add <a href=' /core/add.py#L377'>as_two_terms</a>()</tt>	Return head and tail of self.
<tt style='background-color:#E8E8E8;'> core.Add <a href=' /core/add.py#L722'>extract_leading_order</a>(symbols,point)</tt>	Returns the leading term and its order.
<tt style='background-color:#E8E8E8;'> core.Add <a href=' /core/add.py#L760'>as_real_imag</a>(deep)</tt>	Returns a tuple representing a complex number examples.
<tt style='background-color:#E8E8E8;'> core.Add <a href=' /core/add.py#L833'>primitive</a>()</tt>	Return (r self/r) where r is the rational gcd of self.
<tt style='background-color:#E8E8E8;'> core.Add <a href=' /core/add.py#L913'>as_content_primitive</a>(radical,clear)</tt>	Return the tuple (r self/r) where r is the positive rational extracted from self.
<tt style='background-color:#E8E8E8;'> core.Add <a href=' /core/add.py#L994'>_mpc_</a>()</tt>	Convert self to an mpmath mpc if possible.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L31'>_diff_wrt</a>()</tt>	Is it allowed to take derivative wrt to this instance.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L347'>is_number</a>()</tt>	Returns true if 'self' has no free symbols.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L373'>_random</a>(n,re_min,im_min,re_max)</tt>	Return self evaluated if possible replacing free symbols with random complex values if necessary.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L451'>is_constant</a>()</tt>	Return true if self is constant false if not or none if the constancy could not be determined conclusively.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L606'>equals</a>(other,failing_expression)</tt>	Return true if self == other false if it doesn't or none if.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L774'>_eval_interval</a>(x,a,b)</tt>	Returns evaluation over an interval for most functions this is.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L883'>_parse_order</a>(cls,order)</tt>	Parse and configure the ordering of terms.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L920'>as_ordered_factors</a>(order)</tt>	Return list of ordered factors if mul else [self].
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L924'>as_ordered_terms</a>(order,data)</tt>	Transform an expression to an ordered list of terms.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L960'>as_terms</a>()</tt>	Transform an expression to a list of terms.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1016'>removeO</a>()</tt>	Removes the additive o symbol if there is one.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1020'>getO</a>()</tt>	Returns the additive o symbol if there is one else none.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1024'>getn</a>()</tt>	Returns the order of the expression.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1067'>count_ops</a>(visual)</tt>	Wrapper for count_ops that returns the operation count.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1072'>args_cnc</a>(cset,warn,split_1)</tt>	Return [commutative factors non-commutative factors] of self.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1132'>coeff</a>(x,n,right)</tt>	Returns the coefficient from the term s containing x**n if n.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1412'>as_expr</a>()</tt>	Convert a polynomial to a sympy expression.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1432'>as_coefficient</a>(expr)</tt>	Extracts symbolic coefficient at the given expression in.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1500'>as_independent</a>()</tt>	A mostly naive separation of a mul or add into arguments that are not are dependent on deps.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1688'>as_real_imag</a>(deep)</tt>	Performs complex expansion on 'self' and returns a tuple containing collected both real and imaginary parts.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1717'>as_powers_dict</a>()</tt>	Return self as a dictionary of factors with each factor being treated as a power.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1728'>as_coefficients_dict</a>()</tt>	Return a dictionary mapping terms to their rational coefficient.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1758'>as_coeff_mul</a>()</tt>	Return the tuple c args where self is written as a mul m.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1793'>as_coeff_add</a>()</tt>	Return the tuple c args where self is written as an add a.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1829'>primitive</a>()</tt>	Return the positive rational that can be extracted non-recursively from every term of self (i.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1855'>as_content_primitive</a>(radical,clear)</tt>	This method should recursively remove a rational from all arguments and return that content and the new self primitive.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1912'>as_numer_denom</a>()</tt>	Expression -> a/b -> a b this is just a stub that should be defined by.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L1931'>extract_multiplicatively</a>(c)</tt>	Return none if it's not possible to make self in the form c * something in a nice way i.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2059'>extract_additively</a>(c)</tt>	Return self - c if it's possible to subtract c from self and make all matching coefficients move towards zero else return none.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2164'>could_extract_minus_sign</a>()</tt>	Canonical way to choose an element in the set {e -e} where e is any expression.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2205'>extract_branch_factor</a>(allow_half)</tt>	Try to write self as exp_polar(2*pi*i*n)*z in a nice way.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2283'>is_polynomial</a>()</tt>	Return true if self is a polynomial in syms and false otherwise.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2356'>is_rational_function</a>()</tt>	Test whether function is a ratio of two polynomials in the given symbols syms.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2426'>is_algebraic_expr</a>()</tt>	This tests whether a given expression is algebraic or not in the given symbols syms.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2483'>series</a>(x,x0,n,dir)</tt>	Series expansion of "self" around x = x0 yielding either terms of the series one by one (the lazy series given when n=none), else.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2652'>taylor_term</a>(n,x)</tt>	General method for the taylor term.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2663'>lseries</a>(x,x0,dir,logx)</tt>	Wrapper for series yielding an iterator of the terms of the series.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2712'>nseries</a>(x,x0,n,dir)</tt>	Wrapper to _eval_nseries if assumptions allow else to series.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2779'>_eval_nseries</a>(x,n,logx)</tt>	Return terms of series for self up to o(x**n) at x=0 from the positive direction.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2796'>limit</a>(x,xlim,dir)</tt>	Compute limit x->xlim.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2802'>compute_leading_term</a>(x,logx)</tt>	As_leading_term is only allowed for results of series().
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2821'>as_leading_term</a>()</tt>	Returns the leading nonzero term of the series expansion of self.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2860'>as_coeff_exponent</a>(x)</tt>	C*x**e -> c e where x can be any symbolic expression.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2872'>leadterm</a>(x)</tt>	Returns the leading term a*x**b as a tuple a b.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2900'>as_coeff_Mul</a>(rational)</tt>	Efficiently extract the coefficient of a product.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2904'>as_coeff_Add</a>(rational)</tt>	Efficiently extract the coefficient of a summation.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2908'>fps</a>(x,x0,dir,hyper)</tt>	Compute formal power power series of self.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2920'>fourier_series</a>(limits)</tt>	Compute fourier sine/cosine series of self.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2950'>_expand_hint</a>(expr,hint,deep)</tt>	Helper for expand() recursively calls expr _eval_expand_hint().
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L2980'>expand</a>(deep,modulus,power_base,power_exp)</tt>	Expand an expression using hints.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3074'>integrate</a>()</tt>	See the integrate function in sympy integrals.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3079'>simplify</a>(ratio,measure)</tt>	See the simplify function in sympy simplify.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3086'>nsimplify</a>(constants,tolerance,full)</tt>	See the nsimplify function in sympy simplify.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3091'>separate</a>(deep,force)</tt>	See the separate function in sympy simplify.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3096'>collect</a>(syms,func,evaluate,exact)</tt>	See the collect function in sympy simplify.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3101'>together</a>()</tt>	See the together function in sympy polys.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3106'>apart</a>(x)</tt>	See the apart function in sympy polys.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3111'>ratsimp</a>()</tt>	See the ratsimp function in sympy simplify.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3116'>trigsimp</a>()</tt>	See the trigsimp function in sympy simplify.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3121'>radsimp</a>()</tt>	See the radsimp function in sympy simplify.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3126'>powsimp</a>()</tt>	See the powsimp function in sympy simplify.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3131'>combsimp</a>()</tt>	See the combsimp function in sympy simplify.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3136'>factor</a>()</tt>	See the factor() function in sympy polys polytools.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3141'>refine</a>(assumption)</tt>	See the refine function in sympy assumptions.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3146'>cancel</a>()</tt>	See the cancel function in sympy polys.
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3151'>invert</a>(g)</tt>	Return the multiplicative inverse of self mod g where self (and g) may be symbolic expressions).
<tt style='background-color:#E8E8E8;'> core.Expr <a href=' /core/expr.py#L3165'>round</a>(p)</tt>	Return x rounded to the given decimal place.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/expr.py#L3291'>_mag</a>(x)</tt>	Return integer i such that 1 <= x/10**i < 1.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/expr.py#L3350'>_n2</a>(a,b)</tt>	Return a - b evalf 2 if it a and b are comparable else none.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/evalf.py#L79'>fastlog</a>(x)</tt>	Fast approximation of log2 x for an mpf value tuple x.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/evalf.py#L112'>pure_complex</a>(v,or_real)</tt>	Return a and b if v matches a + i*b where b is not zero and a and b are numbers else none.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/evalf.py#L139'>scaled_zero</a>(mag,sign)</tt>	Return an mpf representing a power of two with magnitude mag and -1 for precision.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/evalf.py#L183'>complex_accuracy</a>(result)</tt>	Returns relative accuracy of a complex number with given accuracies for the real and imaginary parts.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/evalf.py#L230'>get_complex_part</a>(expr,no,prec,options)</tt>	No = 0 for real part no = 1 for imaginary part.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/evalf.py#L275'>chop_parts</a>(value,prec)</tt>	Chop off tiny real or complex parts.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/evalf.py#L303'>get_integer_part</a>(expr,no,options,return_ints)</tt>	With no = 1 computes ceiling expr with no = -1 computes floor expr.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/evalf.py#L400'>add_terms</a>(terms,prec,target_prec)</tt>	Helper for evalf_add adds a list of mpfval accuracy terms.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/evalf.py#L745'>evalf_trig</a>(v,prec,options)</tt>	This function handles sin and cos of complex arguments.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/evalf.py#L852'>evalf_subs</a>(prec,subs)</tt>	Change all float entries in subs to have precision prec.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/evalf.py#L1034'>check_convergence</a>(numer,denom,n)</tt>	Returns h g p where.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/evalf.py#L1072'>hypsum</a>(expr,n,start,prec)</tt>	Sum a rapidly convergent infinite hypergeometric series with given general term e.
<tt style='background-color:#E8E8E8;'> core.EvalfMixin <a href=' /core/evalf.py#L1338'>evalf</a>(n,subs,maxn,chop)</tt>	Evaluate the given formula to an accuracy of n digits.
<tt style='background-color:#E8E8E8;'> core.EvalfMixin <a href=' /core/evalf.py#L1421'>_evalf</a>(prec)</tt>	Helper for evalf does the same thing but takes binary precision.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/evalf.py#L1471'>N</a>(x,n)</tt>	Calls x evalf(n \*\*options).
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/evaluate.py#L15'>evaluate</a>(x)</tt>	Control automatic evaluation this context managers controls whether or not all sympy functions evaluate.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/mul.py#L36'>_unevaluated_Mul</a>()</tt>	Return a well-formed unevaluated mul numbers are collected and put in slot 0 any arguments that are muls will be flattened and args.
<tt style='background-color:#E8E8E8;'> core.Mul <a href=' /core/mul.py#L96'>flatten</a>(cls,seq)</tt>	Return commutative noncommutative and order arguments by combining related terms.
<tt style='background-color:#E8E8E8;'> core.Mul <a href=' /core/mul.py#L656'>_mpc_</a>()</tt>	Convert self to an mpmath mpc if possible.
<tt style='background-color:#E8E8E8;'> core.Mul <a href=' /core/mul.py#L671'>as_two_terms</a>()</tt>	Return head and tail of self.
<tt style='background-color:#E8E8E8;'> core.Mul <a href=' /core/mul.py#L699'>as_coefficients_dict</a>()</tt>	Return a dictionary mapping terms to their coefficient.
<tt style='background-color:#E8E8E8;'> core.Mul <a href=' /core/mul.py#L746'>as_coeff_Mul</a>(rational)</tt>	Efficiently extract the coefficient of a product.
<tt style='background-color:#E8E8E8;'> core.Mul <a href=' /core/mul.py#L812'>_expandsums</a>(sums)</tt>	Helper function for _eval_expand_mul.
<tt style='background-color:#E8E8E8;'> core.Mul <a href=' /core/mul.py#L980'>_combine_inverse</a>(lhs,rhs)</tt>	Returns lhs/rhs but treats arguments like symbols so things like oo/oo return 1 instead of a nan.
<tt style='background-color:#E8E8E8;'> core.Mul <a href=' /core/mul.py#L1211'>_eval_is_positive</a>()</tt>	Return true if self is positive false if not and none if it cannot be determined.
<tt style='background-color:#E8E8E8;'> core.Mul <a href=' /core/mul.py#L1296'>_eval_is_prime</a>()</tt>	If product is a positive integer multiplication will never result in a prime number.
<tt style='background-color:#E8E8E8;'> core.Mul <a href=' /core/mul.py#L1618'>as_content_primitive</a>(radical,clear)</tt>	Return the tuple (r self/r) where r is the positive rational extracted from self.
<tt style='background-color:#E8E8E8;'> core.Mul <a href=' /core/mul.py#L1644'>as_ordered_factors</a>(order)</tt>	Transform an expression into an ordered list of factors.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/mul.py#L1666'>prod</a>(a,start)</tt>	Return product of elements of a start with int 1 so if only.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/mul.py#L1692'>_keep_coeff</a>(coeff,factors,clear,sign)</tt>	Return coeff*factors unevaluated if necessary.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/trace.py#L8'>_is_scalar</a>(e)</tt>	Helper method used in tr.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/trace.py#L23'>_cycle_permute</a>(l)</tt>	Cyclic permutations based on canonical ordering this method does the sort based ascii values while.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/trace.py#L59'>_rearrange_args</a>(l)</tt>	This just moves the last arg to first position.
<tt style='background-color:#E8E8E8;'> core.Tr <a href=' /core/trace.py#L103'>__new__</a>(cls)</tt>	Construct a trace object.
<tt style='background-color:#E8E8E8;'> core.Tr <a href=' /core/trace.py#L156'>doit</a>()</tt>	Perform the trace operation.
<tt style='background-color:#E8E8E8;'> core.Tr <a href=' /core/trace.py#L181'>permute</a>(pos)</tt>	Permute the arguments cyclically.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/facts.py#L58'>_base_fact</a>(atom)</tt>	Return the literal fact of an atom.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/facts.py#L78'>transitive_closure</a>(implications)</tt>	Computes the transitive closure of a list of implications uses warshall's algorithm as described at.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/facts.py#L98'>deduce_alpha_implications</a>(implications)</tt>	Deduce all implications description by example.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/facts.py#L138'>apply_beta_to_alpha_route</a>(alpha_implications,beta_rules)</tt>	Apply additional beta-rules and conditions to already-built alpha implication tables.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/facts.py#L217'>rules_2prereq</a>(rules)</tt>	Build prerequisites table from rules description by example.
<tt style='background-color:#E8E8E8;'> core.Prover <a href=' /core/facts.py#L293'>split_alpha_beta</a>()</tt>	Split proved rules into alpha and beta chains.
<tt style='background-color:#E8E8E8;'> core.Prover <a href=' /core/facts.py#L312'>process_rule</a>(a,b)</tt>	Process a -> b rule.
<tt style='background-color:#E8E8E8;'> core.FactRules <a href=' /core/facts.py#L409'>__init__</a>(rules)</tt>	Compile rules into internal lookup tables.
<tt style='background-color:#E8E8E8;'> core.FactKB <a href=' /core/facts.py#L486'>_tell</a>(k,v)</tt>	Add fact k=v to the knowledge base.
<tt style='background-color:#E8E8E8;'> core.FactKB <a href=' /core/facts.py#L503'>deduce_all_facts</a>(facts)</tt>	Update the kb with all the implications of a list of facts.
<tt style='background-color:#E8E8E8;'> core._cache <a href=' /core/cache.py#L9'>print_cache</a>()</tt>	Print cache info.
<tt style='background-color:#E8E8E8;'> core._cache <a href=' /core/cache.py#L26'>clear_cache</a>()</tt>	Clear cache content.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/cache.py#L150'>__cacheit_debug</a>(maxsize)</tt>	Cacheit + code to check cache consistency.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/logic.py#L14'>_torf</a>(args)</tt>	Return true if all args are true false if they are all false else none.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/logic.py#L40'>_fuzzy_group</a>(args,quick_exit)</tt>	Return true if all args are true none if there is any none else false unless quick_exit is true (then return none as soon as a second false.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/logic.py#L89'>fuzzy_bool</a>(x)</tt>	Return true false or none according to x.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/logic.py#L112'>fuzzy_and</a>(args)</tt>	Return true all true false any false or none.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/logic.py#L148'>fuzzy_not</a>(v)</tt>	Not in fuzzy logic return none if v is none else not v.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/logic.py#L171'>fuzzy_or</a>(args)</tt>	Or in fuzzy logic returns true any true false all false or none.
<tt style='background-color:#E8E8E8;'> core.Logic <a href=' /core/logic.py#L239'>fromstring</a>(text)</tt>	Logic from string with space around & and | but none after !.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/function.py#L63'>_coeff_isneg</a>(a)</tt>	Return true if the leading number is negative.
<tt style='background-color:#E8E8E8;'> core.FunctionClass <a href=' /core/function.py#L165'>__signature__</a>()</tt>	Allow python 3's inspect signature to give a useful signature for.
<tt style='background-color:#E8E8E8;'> core.FunctionClass <a href=' /core/function.py#L181'>nargs</a>()</tt>	Return a set of the allowed number of arguments for the function.
<tt style='background-color:#E8E8E8;'> core.Application <a href=' /core/function.py#L278'>eval</a>(cls)</tt>	Returns a canonical form of cls applied to arguments args.
<tt style='background-color:#E8E8E8;'> core.Function <a href=' /core/function.py#L388'>_diff_wrt</a>()</tt>	Allow derivatives wrt functions.
<tt style='background-color:#E8E8E8;'> core.Function <a href=' /core/function.py#L437'>_should_evalf</a>(cls,arg)</tt>	Decide if the function should automatically evalf().
<tt style='background-color:#E8E8E8;'> core.Function <a href=' /core/function.py#L490'>is_commutative</a>()</tt>	Returns whether the functon is commutative.
<tt style='background-color:#E8E8E8;'> core.Function <a href=' /core/function.py#L571'>as_base_exp</a>()</tt>	Returns the method as the 2-tuple base exponent.
<tt style='background-color:#E8E8E8;'> core.Function <a href=' /core/function.py#L577'>_eval_aseries</a>(n,args0,x,logx)</tt>	Compute an asymptotic expansion around args0 in terms of self args.
<tt style='background-color:#E8E8E8;'> core.Function <a href=' /core/function.py#L589'>_eval_nseries</a>(x,n,logx)</tt>	This function does compute series for multivariate functions but the expansion is always in terms of *one* variable.
<tt style='background-color:#E8E8E8;'> core.Function <a href=' /core/function.py#L694'>fdiff</a>(argindex)</tt>	Returns the first derivative of the function.
<tt style='background-color:#E8E8E8;'> core.Function <a href=' /core/function.py#L718'>_eval_as_leading_term</a>(x)</tt>	Stub that should be overridden by new functions to return the first non-zero term in a series if ever an x-dependent.
<tt style='background-color:#E8E8E8;'> core.Derivative <a href=' /core/function.py#L1040'>_diff_wrt</a>()</tt>	Allow derivatives wrt derivatives if it contains a function.
<tt style='background-color:#E8E8E8;'> core.Derivative <a href=' /core/function.py#L1225'>_sort_variables</a>(cls,vars)</tt>	Sort variables but disallow sorting of non-symbols.
<tt style='background-color:#E8E8E8;'> core.Derivative <a href=' /core/function.py#L1319'>doit_numerically</a>(z0)</tt>	Evaluate the derivative at z numerically.
<tt style='background-color:#E8E8E8;'> core.Derivative <a href=' /core/function.py#L1403'>as_finite_difference</a>(points,x0,wrt)</tt>	Expresses a derivative instance as a finite difference.
<tt style='background-color:#E8E8E8;'> core.Lambda <a href=' /core/function.py#L1525'>variables</a>()</tt>	The variables used in the internal representation of the function.
<tt style='background-color:#E8E8E8;'> core.Lambda <a href=' /core/function.py#L1530'>expr</a>()</tt>	The return value of the function.
<tt style='background-color:#E8E8E8;'> core.Lambda <a href=' /core/function.py#L1577'>is_identity</a>()</tt>	Return true if this lambda is an identity function.
<tt style='background-color:#E8E8E8;'> core.Subs <a href=' /core/function.py#L1692'>variables</a>()</tt>	The variables to be evaluated.
<tt style='background-color:#E8E8E8;'> core.Subs <a href=' /core/function.py#L1697'>expr</a>()</tt>	The expression on which the substitution operates.
<tt style='background-color:#E8E8E8;'> core.Subs <a href=' /core/function.py#L1702'>point</a>()</tt>	The values for which the variables are to be substituted.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/function.py#L1773'>diff</a>(f)</tt>	Differentiate f with respect to symbols.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/function.py#L1842'>expand</a>(e,deep,modulus,power_base)</tt>	Expand an expression using methods given as hints.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/function.py#L2190'>expand_mul</a>(expr,deep)</tt>	Wrapper around expand that only uses the mul hint see the expand.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/function.py#L2208'>expand_multinomial</a>(expr,deep)</tt>	Wrapper around expand that only uses the multinomial hint see the expand.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/function.py#L2226'>expand_log</a>(expr,deep,force)</tt>	Wrapper around expand that only uses the log hint see the expand.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/function.py#L2245'>expand_func</a>(expr,deep)</tt>	Wrapper around expand that only uses the func hint see the expand.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/function.py#L2263'>expand_trig</a>(expr,deep)</tt>	Wrapper around expand that only uses the trig hint see the expand.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/function.py#L2281'>expand_complex</a>(expr,deep)</tt>	Wrapper around expand that only uses the complex hint see the expand.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/function.py#L2304'>expand_power_base</a>(expr,deep,force)</tt>	Wrapper around expand that only uses the power_base hint.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/function.py#L2369'>expand_power_exp</a>(expr,deep)</tt>	Wrapper around expand that only uses the power_exp hint.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/function.py#L2387'>count_ops</a>(expr,visual)</tt>	Return a representation integer or expression of the operations in expr.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/function.py#L2590'>nfloat</a>(expr,n,exponent)</tt>	Make all rationals in expr floats except those in exponents unless the exponents flag is set to true.
<tt style='background-color:#E8E8E8;'> core.benchmarks. <a href=' /core/benchmarks/bench_expand.py#L15'>bench_expand_32</a>()</tt>	X+y+z+1 **32 -> expand.
<tt style='background-color:#E8E8E8;'> logic.Boolean <a href=' /logic/boolalg.py#L24'>__and__</a>(other)</tt>	Overloading for & operator.
<tt style='background-color:#E8E8E8;'> logic.Boolean <a href=' /logic/boolalg.py#L30'>__or__</a>(other)</tt>	Overloading for |.
<tt style='background-color:#E8E8E8;'> logic.Boolean <a href=' /logic/boolalg.py#L36'>__invert__</a>()</tt>	Overloading for ~.
<tt style='background-color:#E8E8E8;'> logic.Boolean <a href=' /logic/boolalg.py#L40'>__rshift__</a>(other)</tt>	Overloading for >>.
<tt style='background-color:#E8E8E8;'> logic.Boolean <a href=' /logic/boolalg.py#L44'>__lshift__</a>(other)</tt>	Overloading for <<.
<tt style='background-color:#E8E8E8;'> logic.Boolean <a href=' /logic/boolalg.py#L56'>equals</a>(other)</tt>	Returns true if the given formulas have the same truth table.
<tt style='background-color:#E8E8E8;'> logic.BooleanTrue <a href=' /logic/boolalg.py#L199'>as_set</a>()</tt>	Rewrite logic operators and relationals in terms of real sets.
<tt style='background-color:#E8E8E8;'> logic.BooleanFalse <a href=' /logic/boolalg.py#L253'>as_set</a>()</tt>	Rewrite logic operators and relationals in terms of real sets.
<tt style='background-color:#E8E8E8;'> logic.And <a href=' /logic/boolalg.py#L363'>as_set</a>()</tt>	Rewrite logic operators and relationals in terms of real sets.
<tt style='background-color:#E8E8E8;'> logic.Or <a href=' /logic/boolalg.py#L434'>as_set</a>()</tt>	Rewrite logic operators and relationals in terms of real sets.
<tt style='background-color:#E8E8E8;'> logic.Not <a href=' /logic/boolalg.py#L527'>as_set</a>()</tt>	Rewrite logic operators and relationals in terms of real sets.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L989'>conjuncts</a>(expr)</tt>	Return a list of the conjuncts in the expr s.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1006'>disjuncts</a>(expr)</tt>	Return a list of the disjuncts in the sentence s.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1023'>distribute_and_over_or</a>(expr)</tt>	Given a sentence s consisting of conjunctions and disjunctions of literals return an equivalent sentence in cnf.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1039'>distribute_or_over_and</a>(expr)</tt>	Given a sentence s consisting of conjunctions and disjunctions of literals return an equivalent sentence in dnf.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1057'>_distribute</a>(info)</tt>	Distributes info[1] over info[2] with respect to info[0].
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1078'>to_nnf</a>(expr,simplify)</tt>	Converts expr to negation normal form.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1100'>to_cnf</a>(expr,simplify)</tt>	Convert a propositional logical sentence s to conjunctive normal form.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1132'>to_dnf</a>(expr,simplify)</tt>	Convert a propositional logical sentence s to disjunctive normal form.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1164'>is_nnf</a>(expr,simplified)</tt>	Checks if expr is in negation normal form.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1210'>is_cnf</a>(expr)</tt>	Test whether or not an expression is in conjunctive normal form.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1230'>is_dnf</a>(expr)</tt>	Test whether or not an expression is in disjunctive normal form.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1252'>_is_form</a>(expr,function1,function2)</tt>	Test whether or not an expression is of the required form.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1301'>eliminate_implications</a>(expr)</tt>	Change >>, <<, and equivalent into &, |, and ~ that is return an.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1323'>is_literal</a>(expr)</tt>	Returns true if expr is a literal else false.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1350'>to_int_repr</a>(clauses,symbols)</tt>	Takes clauses in cnf format and puts them into an integer representation.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1377'>term_to_integer</a>(term)</tt>	Return an integer corresponding to the base-2 digits given by term.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1400'>integer_to_term</a>(k,n_bits)</tt>	Return a list of the base-2 digits in the integer k.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1427'>truth_table</a>(expr,variables,input)</tt>	Return a generator of all possible configurations of the input variables and the result of the boolean expression for those values.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1494'>_check_pair</a>(minterm1,minterm2)</tt>	Checks if a pair of minterms differs by only one bit if yes returns.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1509'>_convert_to_varsSOP</a>(minterm,variables)</tt>	Converts a term in the expansion of a function from binary to it's variable form for sop.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1525'>_convert_to_varsPOS</a>(maxterm,variables)</tt>	Converts a term in the expansion of a function from binary to it's variable form for pos.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1541'>_simplified_pairs</a>(terms)</tt>	Reduces a set of minterms if possible to a simplified set of minterms with one less variable in the terms using qm method.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1562'>_compare_term</a>(minterm,term)</tt>	Return true if a binary term is satisfied by the given term used.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1573'>_rem_redundancy</a>(l1,terms)</tt>	After the truth table has been sufficiently simplified use the prime implicant table method to recognize and eliminate redundant pairs.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1602'>SOPform</a>(variables,minterms,dontcares)</tt>	The sopform function uses simplified_pairs and a redundant group- eliminating algorithm to convert the list of all input combos that.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1654'>POSform</a>(variables,minterms,dontcares)</tt>	The posform function uses simplified_pairs and a redundant-group eliminating algorithm to convert the list of all input combinations.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1711'>_find_predicates</a>(expr)</tt>	Helper to find logical predicates in booleanfunctions.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1723'>simplify_logic</a>(expr,form,deep)</tt>	This function simplifies a boolean function to its simplified version in sop or pos form.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1779'>_finger</a>(eq)</tt>	Assign a 5-item fingerprint to each symbol in the equation [.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/boolalg.py#L1822'>bool_map</a>(bool1,bool2)</tt>	Return the simplified version of bool1 and the mapping of variables that makes the two expressions bool1 and bool2 represent the same.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/inference.py#L9'>literal_symbol</a>(literal)</tt>	The symbol in this literal without the negation.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/inference.py#L38'>satisfiable</a>(expr,algorithm,all_models)</tt>	Check satisfiability of a propositional sentence.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/inference.py#L90'>valid</a>(expr)</tt>	Check validity of a propositional sentence.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/inference.py#L114'>pl_true</a>(expr,model,deep)</tt>	Returns whether the given assignment is a model or not.
<tt style='background-color:#E8E8E8;'> logic. <a href=' /logic/inference.py#L184'>entails</a>(expr,formula_set)</tt>	Check whether the given expr_set entail an expr.
<tt style='background-color:#E8E8E8;'> logic.PropKB <a href=' /logic/inference.py#L238'>tell</a>(sentence)</tt>	Add the sentence's clauses to the kb examples.
<tt style='background-color:#E8E8E8;'> logic.PropKB <a href=' /logic/inference.py#L261'>ask</a>(query)</tt>	Checks if the query is true given the set of clauses.
<tt style='background-color:#E8E8E8;'> logic.PropKB <a href=' /logic/inference.py#L278'>retract</a>(sentence)</tt>	Remove the sentence's clauses from the kb examples.
<tt style='background-color:#E8E8E8;'> logic.algorithms. <a href=' /logic/algorithms/dpll.py#L19'>dpll_satisfiable</a>(expr,all_models)</tt>	Check satisfiability of a propositional sentence.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L132'>_initialize_variables</a>(variables)</tt>	Set up the variable data structures needed.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L138'>_initialize_clauses</a>(clauses)</tt>	Set up the clause data structures needed.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L163'>_find_model</a>()</tt>	Main dpll loop returns a generator of models.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L262'>_current_level</a>()</tt>	The current decision level data structure examples.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L282'>_clause_sat</a>(cls)</tt>	Check if a clause is satisfied by the current variable setting.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L304'>_is_sentinel</a>(lit,cls)</tt>	Check if a literal is a sentinel of a given clause.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L322'>_assign_literal</a>(lit)</tt>	Make a literal assignment.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L376'>_undo</a>()</tt>	_undo the changes of the most recent decision level.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L413'>_simplify</a>()</tt>	Iterate over the various forms of propagation to simplify the theory.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L441'>_unit_prop</a>()</tt>	Perform unit propagation on the current theory.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L455'>_pure_literal</a>()</tt>	Look for pure literals and assign them when found.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L462'>_vsids_init</a>()</tt>	Initialize the data structures needed for the vsids heuristic.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L473'>_vsids_decay</a>()</tt>	Decay the vsids scores for every literal.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L496'>_vsids_calculate</a>()</tt>	Vsids heuristic calculation examples.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L527'>_vsids_lit_assigned</a>(lit)</tt>	Handle the assignment of a literal for the vsids heuristic.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L531'>_vsids_lit_unset</a>(lit)</tt>	Handle the unsetting of a literal for the vsids heuristic.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L553'>_vsids_clause_added</a>(cls)</tt>	Handle the addition of a new clause for the vsids heuristic.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L582'>_simple_add_learned_clause</a>(cls)</tt>	Add a new clause to the theory.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L617'>_simple_compute_conflict</a>()</tt>	Build a clause representing the fact that at least one decision made so far is wrong.
<tt style='background-color:#E8E8E8;'> logic.algorithms.SATSolver <a href=' /logic/algorithms/dpll2.py#L634'>_simple_clean_clauses</a>()</tt>	Clean up learned clauses.
<tt style='background-color:#E8E8E8;'> logic.algorithms. <a href=' /logic/algorithms/dpll.py#L19'>dpll_satisfiable</a>(expr)</tt>	Check satisfiability of a propositional sentence.
<tt style='background-color:#E8E8E8;'> logic.algorithms. <a href=' /logic/algorithms/dpll.py#L47'>dpll</a>(clauses,symbols,model)</tt>	Compute satisfiability in a partial model.
<tt style='background-color:#E8E8E8;'> logic.algorithms. <a href=' /logic/algorithms/dpll.py#L96'>dpll_int_repr</a>(clauses,symbols,model)</tt>	Compute satisfiability in a partial model.
<tt style='background-color:#E8E8E8;'> logic.algorithms. <a href=' /logic/algorithms/dpll.py#L144'>pl_true_int_repr</a>(clause,model)</tt>	Lightweight version of pl_true.
<tt style='background-color:#E8E8E8;'> logic.algorithms. <a href=' /logic/algorithms/dpll.py#L171'>unit_propagate</a>(clauses,symbol)</tt>	Returns an equivalent set of clauses if a set of clauses contains the unit clause l the other clauses are.
<tt style='background-color:#E8E8E8;'> logic.algorithms. <a href=' /logic/algorithms/dpll.py#L205'>unit_propagate_int_repr</a>(clauses,s)</tt>	Same as unit_propagate but arguments are expected to be in integer representation.
<tt style='background-color:#E8E8E8;'> logic.algorithms. <a href=' /logic/algorithms/dpll.py#L219'>find_pure_symbol</a>(symbols,unknown_clauses)</tt>	Find a symbol and its value if it appears only as a positive literal or only as a negative in clauses.
<tt style='background-color:#E8E8E8;'> logic.algorithms. <a href=' /logic/algorithms/dpll.py#L243'>find_pure_symbol_int_repr</a>(symbols,unknown_clauses)</tt>	Same as find_pure_symbol but arguments are expected to be in integer representation.
<tt style='background-color:#E8E8E8;'> logic.algorithms. <a href=' /logic/algorithms/dpll.py#L266'>find_unit_clause</a>(clauses,model)</tt>	A unit clause has only 1 variable that is not bound in the model.
<tt style='background-color:#E8E8E8;'> logic.algorithms. <a href=' /logic/algorithms/dpll.py#L289'>find_unit_clause_int_repr</a>(clauses,model)</tt>	Same as find_unit_clause but arguments are expected to be in integer representation.
<tt style='background-color:#E8E8E8;'> logic.utilities. <a href=' /logic/utilities/dimacs.py#L14'>load</a>(s)</tt>	Loads a boolean expression from a string.
<tt style='background-color:#E8E8E8;'> logic.utilities. <a href=' /logic/utilities/dimacs.py#L67'>load_file</a>(location)</tt>	Loads a boolean expression from a file.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rde.py#L39'>order_at</a>(a,p,t)</tt>	Computes the order of a at p with respect to t.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rde.py#L79'>order_at_oo</a>(a,d,t)</tt>	Computes the order of a/d at oo infinity with respect to t.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rde.py#L139'>normal_denom</a>(fa,fd,ga,gd)</tt>	Normal part of the denominator.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rde.py#L173'>special_denom</a>(a,ba,bd,ca)</tt>	Special part of the denominator.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rde.py#L255'>bound_degree</a>(a,b,cQ,DE)</tt>	Bound on polynomial solutions.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rde.py#L368'>spde</a>(a,b,c,n)</tt>	Rothstein's special polynomial differential equation algorithm.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rde.py#L412'>no_cancel_b_large</a>(b,c,n,DE)</tt>	Poly risch differential equation - no cancellation deg b large enough.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rde.py#L439'>no_cancel_b_small</a>(b,c,n,DE)</tt>	Poly risch differential equation - no cancellation deg b small enough.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rde.py#L483'>no_cancel_equal</a>(b,c,n,DE)</tt>	Poly risch differential equation - no cancellation deg b == deg d - 1 given a derivation d on k[t] with deg d >= 2 n either an integer.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rde.py#L527'>cancel_primitive</a>(b,c,n,DE)</tt>	Poly risch differential equation - cancellation primitive case.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rde.py#L574'>cancel_exp</a>(b,c,n,DE)</tt>	Poly risch differential equation - cancellation hyperexponential case.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rde.py#L632'>solve_poly_rde</a>(b,cQ,n,DE)</tt>	Solve a polynomial risch differential equation with degree bound n.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rde.py#L725'>rischDE</a>(fa,fd,ga,gd)</tt>	Solve a risch differential equation dy + f*y == g.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/quadrature.py#L14'>gauss_legendre</a>(n,n_digits)</tt>	Computes the gauss-legendre quadrature [1]_ points and weights.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/quadrature.py#L82'>gauss_laguerre</a>(n,n_digits)</tt>	Computes the gauss-laguerre quadrature [1]_ points and weights.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/quadrature.py#L151'>gauss_hermite</a>(n,n_digits)</tt>	Computes the gauss-hermite quadrature [1]_ points and weights.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/quadrature.py#L223'>gauss_gen_laguerre</a>(n,alpha,n_digits)</tt>	Computes the generalized gauss-laguerre quadrature [1]_ points and weights.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/quadrature.py#L299'>gauss_chebyshev_t</a>(n,n_digits)</tt>	Computes the gauss-chebyshev quadrature [1]_ points and weights of the first kind.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/quadrature.py#L366'>gauss_chebyshev_u</a>(n,n_digits)</tt>	Computes the gauss-chebyshev quadrature [1]_ points and weights of the second kind.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/quadrature.py#L433'>gauss_jacobi</a>(n,alpha,beta,n_digits)</tt>	Computes the gauss-jacobi quadrature [1]_ points and weights.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/quadrature.py#L518'>gauss_lobatto</a>(n,n_digits)</tt>	Computes the gauss-lobatto quadrature [1]_ points and weights.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/singularityfunctions.py#L8'>singularityintegrate</a>(f,x)</tt>	This function handles the indefinite integrations of singularity functions.
<tt style='background-color:#E8E8E8;'> integrals.IntegralTransform <a href=' /integrals/transforms.py#L56'>function</a>()</tt>	The function to be transformed.
<tt style='background-color:#E8E8E8;'> integrals.IntegralTransform <a href=' /integrals/transforms.py#L61'>function_variable</a>()</tt>	The dependent variable of the function to be transformed.
<tt style='background-color:#E8E8E8;'> integrals.IntegralTransform <a href=' /integrals/transforms.py#L66'>transform_variable</a>()</tt>	The independent transform variable.
<tt style='background-color:#E8E8E8;'> integrals.IntegralTransform <a href=' /integrals/transforms.py#L71'>free_symbols</a>()</tt>	This method returns the symbols that will exist when the transform is evaluated.
<tt style='background-color:#E8E8E8;'> integrals.IntegralTransform <a href=' /integrals/transforms.py#L91'>doit</a>()</tt>	Try to evaluate the transform in closed form.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L174'>_noconds_</a>(default)</tt>	This is a decorator generator for dropping convergence conditions.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L212'>_mellin_transform</a>(f,x,s_,integrator)</tt>	Backend function to compute mellin transforms.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L315'>mellin_transform</a>(f,x,s)</tt>	Compute the mellin transform f s of f x ,.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L354'>_rewrite_sin</a>(m_n,s,a,b)</tt>	Re-write the sine function sin(m*s + n) as gamma functions compatible with the strip a b.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L404'>_rewrite_gamma</a>(f,s,a,b)</tt>	Try to rewrite the product f s as a product of gamma functions so that the inverse mellin transform of f can be expressed as a meijer.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L702'>_inverse_mellin_transform</a>(F,s,x_,strip)</tt>	A helper for the real inverse_mellin_transform function this one here assumes x to be real and positive.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L815'>inverse_mellin_transform</a>(F,s,x,strip)</tt>	Compute the inverse mellin transform of f s over the fundamental strip given by strip= a b.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L870'>_simplifyconds</a>(expr,s,a)</tt>	Naively simplify some conditions occuring in expr, given that \operatorname{re} s > a.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L957'>_laplace_transform</a>(f,t,s_,simplify)</tt>	The backend function for laplace transforms.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L1089'>laplace_transform</a>(f,t,s)</tt>	Compute the laplace transform f s of f t ,.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L1125'>_inverse_laplace_transform</a>(F,s,t_,plane)</tt>	The backend function for inverse laplace transforms.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L1231'>inverse_laplace_transform</a>(F,s,t,plane)</tt>	Compute the inverse laplace transform of f s , defined as.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L1278'>_fourier_transform</a>(f,x,k,a)</tt>	Compute a general fourier-type transform f k = a int_-oo^oo exp(b*i*x*k) f x dx.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L1345'>fourier_transform</a>(f,x,k)</tt>	Compute the unitary ordinary-frequency fourier transform of f, defined as.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L1400'>inverse_fourier_transform</a>(F,k,x)</tt>	Compute the unitary ordinary-frequency inverse fourier transform of f, defined as.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L1443'>_sine_cosine_transform</a>(f,x,k,a)</tt>	Compute a general sine or cosine-type transform f k = a int_0^oo b*sin(x*k) f x dx.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L1516'>sine_transform</a>(f,x,k)</tt>	Compute the unitary ordinary-frequency sine transform of f, defined as.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L1569'>inverse_sine_transform</a>(F,k,x)</tt>	Compute the unitary ordinary-frequency inverse sine transform of f, defined as.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L1623'>cosine_transform</a>(f,x,k)</tt>	Compute the unitary ordinary-frequency cosine transform of f, defined as.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L1676'>inverse_cosine_transform</a>(F,k,x)</tt>	Compute the unitary ordinary-frequency inverse cosine transform of f, defined as.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L1776'>hankel_transform</a>(f,r,k,nu)</tt>	Compute the hankel transform of f, defined as.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/transforms.py#L1832'>inverse_hankel_transform</a>(F,k,r,nu)</tt>	Compute the inverse hankel transform of f defined as.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L50'>integer_powers</a>(exprs)</tt>	Rewrites a list of expressions as integer multiples of each other.
<tt style='background-color:#E8E8E8;'> integrals.DifferentialExtension <a href=' /integrals/risch.py#L165'>__init__</a>(f,x,handle_first,dummy)</tt>	Tries to build a transcendental extension tower from f with respect to x.
<tt style='background-color:#E8E8E8;'> integrals.DifferentialExtension <a href=' /integrals/risch.py#L411'>_auto_attrs</a>()</tt>	Set attributes that are generated automatically.
<tt style='background-color:#E8E8E8;'> integrals.DifferentialExtension <a href=' /integrals/risch.py#L426'>_exp_part</a>(exps)</tt>	Try to build an exponential extension.
<tt style='background-color:#E8E8E8;'> integrals.DifferentialExtension <a href=' /integrals/risch.py#L533'>_log_part</a>(logs)</tt>	Try to build a logarithmic extension.
<tt style='background-color:#E8E8E8;'> integrals.DifferentialExtension <a href=' /integrals/risch.py#L584'>_important_attrs</a>()</tt>	Returns some of the more important attributes of self.
<tt style='background-color:#E8E8E8;'> integrals.DifferentialExtension <a href=' /integrals/risch.py#L608'>reset</a>()</tt>	Reset self to an initial state used by __init__.
<tt style='background-color:#E8E8E8;'> integrals.DifferentialExtension <a href=' /integrals/risch.py#L628'>increment_level</a>()</tt>	Increment the level of self.
<tt style='background-color:#E8E8E8;'> integrals.DifferentialExtension <a href=' /integrals/risch.py#L646'>decrement_level</a>()</tt>	Decrease the level of self.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L695'>gcdex_diophantine</a>(a,b,c)</tt>	Extended euclidean algorithm diophantine version.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L719'>frac_in</a>(f,t)</tt>	Returns the tuple fa fd where fa and fd are polys in t.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L741'>as_poly_1t</a>(p,t,z)</tt>	Hackish way to convert an element p of k[t 1/t] to k[t z].
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L844'>get_case</a>(d,t)</tt>	Returns the type of the derivation d.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L904'>splitfactor_sqf</a>(p,DE,coefficientD,z)</tt>	Splitting square-free factorization given a derivation d on k[t] and p in k[t], returns (n1.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L962'>hermite_reduce</a>(a,d,DE)</tt>	Hermite reduction - mack's linear version.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L1037'>laurent_series</a>(a,d,F,n)</tt>	Contribution of f to the full partial fraction decomposition of a/d given a field k of characteristic 0 and a d f in k[x] with d monic.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L1097'>recognize_derivative</a>(a,d,DE,z)</tt>	Compute the squarefree factorization of the denominator of f and for each di the polynomial h in k[x] (see theorem 2.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L1122'>recognize_log_derivative</a>(a,d,DE,z)</tt>	There exists a v in k x * such that f = dv/v where f a rational function if and only if f can be written as f = a/d.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L1152'>residue_reduce</a>(a,d,DE,z)</tt>	Lazard-rioboo-rothstein-trager resultant reduction.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L1237'>residue_reduce_to_basic</a>(H,DE,z)</tt>	Converts the tuple returned by residue_reduce() into a basic expression.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L1249'>residue_reduce_derivation</a>(H,DE,z)</tt>	Computes the derivation of an expression returned by residue_reduce().
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L1262'>integrate_primitive_polynomial</a>(p,DE)</tt>	Integration of primitive polynomials.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L1305'>integrate_primitive</a>(a,d,DE,z)</tt>	Integration of primitive functions.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L1351'>integrate_hyperexponential_polynomial</a>(p,DE,z)</tt>	Integration of hyperexponential polynomials.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L1400'>integrate_hyperexponential</a>(a,d,DE,z)</tt>	Integration of hyperexponential functions.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L1462'>integrate_hypertangent_polynomial</a>(p,DE)</tt>	Integration of hypertangent polynomials.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L1478'>integrate_nonlinear_no_specials</a>(a,d,DE,z)</tt>	Integration of nonlinear monomials with no specials.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/risch.py#L1569'>risch_integrate</a>(f,x,extension,handle_first)</tt>	The risch integration algorithm.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/manualintegrate.py#L87'>manual_diff</a>(f,symbol)</tt>	Derivative of f in form expected by find_substitutions sympy's derivatives for some trig functions like cot aren't in a form.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/manualintegrate.py#L169'>rewriter</a>(condition,rewrite)</tt>	Strategy that rewrites an integrand.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/manualintegrate.py#L184'>proxy_rewriter</a>(condition,rewrite)</tt>	Strategy that rewrites an integrand based on some other criteria.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/manualintegrate.py#L199'>multiplexer</a>(conditions)</tt>	Apply the rule that matches the condition else none.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/manualintegrate.py#L207'>alternatives</a>()</tt>	Strategy that makes an alternativerule out of multiple possible results.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/manualintegrate.py#L898'>integral_steps</a>(integrand,symbol)</tt>	Returns the steps needed to compute an integral.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/manualintegrate.py#L1177'>manualintegrate</a>(f,var)</tt>	Manualintegrate f var compute indefinite integral of a single variable using an algorithm that.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rationaltools.py#L11'>ratint</a>(f,x)</tt>	Performs indefinite integration of rational functions.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rationaltools.py#L257'>log_to_atan</a>(f,g)</tt>	Convert complex logarithms to real arctangents.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/rationaltools.py#L303'>log_to_real</a>(h,q,x,t)</tt>	Convert complex logarithms to real functions.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/deltafunctions.py#L9'>change_mul</a>(node,x)</tt>	Change_mul node x rearranges the operands of a product bringing to front any simple.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/deltafunctions.py#L79'>deltaintegrate</a>(f,x)</tt>	Deltaintegrate f x the idea for integration is the following.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L36'>prde_normal_denom</a>(fa,fd,G,DE)</tt>	Parametric risch differential equation - normal part of the denominator.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L64'>real_imag</a>(ba,bd,gen)</tt>	Helper function to get the real and imaginary part of a rational function evaluated at sqrt -1 without actually evaluating it at sqrt -1.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L89'>prde_special_denom</a>(a,ba,bd,G)</tt>	Parametric risch differential equation - special part of the denominator.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L166'>prde_linear_constraints</a>(a,b,G,DE)</tt>	Parametric risch differential equation - generate linear constraints on the constants.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L197'>constant_system</a>(A,u,DE)</tt>	Generate a system for the constant solutions.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L269'>prde_spde</a>(a,b,Q,n)</tt>	Special polynomial differential equation algorithm parametric version.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L291'>prde_no_cancel_b_large</a>(b,Q,n,DE)</tt>	Parametric poly risch differential equation - no cancellation deg b large enough.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L326'>prde_no_cancel_b_small</a>(b,Q,n,DE)</tt>	Parametric poly risch differential equation - no cancellation deg b small enough.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L367'>param_rischDE</a>(fa,fd,G,DE)</tt>	Solve a parametric risch differential equation dy + f*y == sum(ci*gi i 1 m.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L393'>limited_integrate_reduce</a>(fa,fd,G,DE)</tt>	Simpler version of step 1 & 2 for the limited integration problem.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L440'>limited_integrate</a>(fa,fd,G,DE)</tt>	Solves the limited integration problem f = dv + sum(ci*wi i 1 n.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L476'>parametric_log_deriv_heu</a>(fa,fd,wa,wd)</tt>	Parametric logarithmic derivative heuristic.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L577'>is_deriv_k</a>(fa,fd,DE)</tt>	Checks if df/f is the derivative of an element of k t.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L683'>is_log_deriv_k_t_radical</a>(fa,fd,DE,Df)</tt>	Checks if df is the logarithmic derivative of a k t -radical.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/prde.py#L789'>is_log_deriv_k_t_radical_in_field</a>(fa,fd,DE,case)</tt>	Checks if f can be written as the logarithmic derivative of a k t -radical.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/heurisch.py#L36'>components</a>(f,x)</tt>	Returns a set of all functional components of the given expression which includes symbols function applications and compositions and.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/heurisch.py#L84'>_symbols</a>(name,n)</tt>	Get vector of symbols local to this module.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/heurisch.py#L98'>heurisch_wrapper</a>(f,x,rewrite,hints)</tt>	A wrapper around the heurisch integration algorithm.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/heurisch.py#L258'>heurisch</a>(f,x,rewrite,hints)</tt>	Compute indefinite integral using heuristic risch algorithm.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L63'>_create_lookup_table</a>(table)</tt>	Add formulae for the function -> meijerg lookup table.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L285'>_mytype</a>(f,x)</tt>	Create a hashable entity describing the type of f.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L307'>_get_coeff_exp</a>(expr,x)</tt>	When expr is known to be of the form c*x**b with c and/or b possibly 1 return c b.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L338'>_exponents</a>(expr,x)</tt>	Find the exponents of x not including zero in expr.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L368'>_functions</a>(expr,x)</tt>	Find the types of functions in expr to estimate the complexity.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L374'>_find_splitting_points</a>(expr,x)</tt>	Find numbers a such that a linear substitution x -> x + a would hopefully simplify expr.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L407'>_split_mul</a>(f,x)</tt>	Split expression f into fac po g where fac is a constant factor po = x**s for some s independent of s and g is "the rest".
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L444'>_mul_args</a>(f)</tt>	Return a list l such that mul(*l) == f.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L467'>_mul_as_two_parts</a>(f)</tt>	Find all the ways to split f into a product of two terms.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L492'>_inflate_g</a>(g,n)</tt>	Return c h such that h is a g function of argument z**n and g = c*h.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L512'>_flip_g</a>(g)</tt>	Turn the g function into one of inverse argument (i.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L521'>_inflate_fox_h</a>(g,a)</tt>	Let d denote the integrand in the definition of the g function g.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L549'>_dummy</a>(name,token,expr)</tt>	Return a dummy this will return the same dummy if the same token+name is.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L561'>_dummy_</a>(name,token)</tt>	Return a dummy associated to name and token same effect as declaring.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L572'>_is_analytic</a>(f,x)</tt>	Check if f x when expressed using g functions on the positive reals.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L579'>_condsimp</a>(cond)</tt>	Do naive simplifications on cond.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L674'>_eval_cond</a>(cond)</tt>	Re-evaluate the conditions.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L685'>_my_principal_branch</a>(expr,period,full_pb)</tt>	Bring expr nearer to its principal branch by removing superfluous factors.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L698'>_rewrite_saxena_1</a>(fac,po,g,x)</tt>	Rewrite the integral fac*po*g dx from zero to infinity as integral fac*g where g has argument a*x.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L719'>_check_antecedents_1</a>(g,x,helper)</tt>	Return a condition under which the mellin transform of g exists.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L836'>_int0oo_1</a>(g,x)</tt>	Evaluate int_0^\infty g dx using g functions assuming the necessary conditions are fulfilled.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L863'>_rewrite_saxena</a>(fac,po,g1,g2)</tt>	Rewrite the integral fac*po*g1*g2 from 0 to oo in terms of g functions with argument c*x.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L930'>_check_antecedents</a>(g1,g2,x)</tt>	Return a condition under which the integral theorem applies.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L1233'>_int0oo</a>(g1,g2,x)</tt>	Express integral from zero to infinity g1*g2 using a g function assuming the necessary conditions are fulfilled.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L1259'>_rewrite_inversion</a>(fac,po,g,x)</tt>	Absorb po == x**s into g.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L1270'>_check_antecedents_inversion</a>(g,x)</tt>	Check antecedents for the laplace inversion integral.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L1391'>_int_inversion</a>(g,x,t)</tt>	Compute the laplace inversion integral assuming the formula applies.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L1407'>_rewrite_single</a>(f,x,recursive)</tt>	Try to rewrite f as a sum of single g functions of the form c*x**s*g(a*x**b), where b is a rational number and c is independent of x.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L1551'>_rewrite1</a>(f,x,recursive)</tt>	Try to rewrite f using a sum of single g functions with argument a*x**b.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L1565'>_rewrite2</a>(f,x)</tt>	Try to rewrite f as a product of two g functions of arguments a*x**b.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L1595'>meijerint_indefinite</a>(f,x)</tt>	Compute an indefinite integral of f by rewriting it as a g function.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L1632'>_meijerint_indefinite_1</a>(f,x)</tt>	Helper that does not attempt any substitution.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L1720'>meijerint_definite</a>(f,x,a,b)</tt>	Integrate f over the interval [a, b], by rewriting it as a product of two g functions or as a single g function.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L1858'>_guess_expansion</a>(f,x)</tt>	Try to guess sensible rewritings for integrand f x.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L1885'>_meijerint_definite_2</a>(f,x)</tt>	Try to integrate f dx from zero to infinty.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L1915'>_meijerint_definite_3</a>(f,x)</tt>	Try to integrate f dx from zero to infinity.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L1944'>_meijerint_definite_4</a>(f,x,only_double)</tt>	Try to integrate f dx from zero to infinity.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/meijerint.py#L2012'>meijerint_inversion</a>(f,x,t)</tt>	Compute the inverse laplace transform :math \int_{c+i\infty}^{c-i\infty} f x e^{tx) dx.
<tt style='background-color:#E8E8E8;'> integrals.Integral <a href=' /integrals/integrals.py#L33'>__new__</a>(cls,function)</tt>	Create an unevaluated integral.
<tt style='background-color:#E8E8E8;'> integrals.Integral <a href=' /integrals/integrals.py#L81'>free_symbols</a>()</tt>	This method returns the symbols that will exist when the integral is evaluated.
<tt style='background-color:#E8E8E8;'> integrals.Integral <a href=' /integrals/integrals.py#L139'>transform</a>(x,u)</tt>	Performs a change of variables from x to u using the relationship given by x and u which will define the transformations f and f.
<tt style='background-color:#E8E8E8;'> integrals.Integral <a href=' /integrals/integrals.py#L354'>doit</a>()</tt>	Perform the integration using any hints given.
<tt style='background-color:#E8E8E8;'> integrals.Integral <a href=' /integrals/integrals.py#L565'>_eval_derivative</a>(sym)</tt>	Evaluate the derivative of the current integral object by differentiating under the integral sign [1], using the fundamental.
<tt style='background-color:#E8E8E8;'> integrals.Integral <a href=' /integrals/integrals.py#L651'>_eval_integral</a>(f,x,meijerg,risch)</tt>	Calculate the anti-derivative to the function f x.
<tt style='background-color:#E8E8E8;'> integrals.Integral <a href=' /integrals/integrals.py#L993'>as_sum</a>(n,method)</tt>	Approximates the definite integral by a sum.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/integrals.py#L1138'>integrate</a>()</tt>	Integrate f var.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/integrals.py#L1300'>line_integrate</a>(field,curve,vars)</tt>	Line_integrate field curve variables compute the line integral.
<tt style='background-color:#E8E8E8;'> integrals. <a href=' /integrals/trigonometry.py#L33'>trigintegrate</a>(f,x,conds)</tt>	Integrate f = mul trig over x >>> from sympy import symbol sin cos tan sec csc cot.
<tt style='background-color:#E8E8E8;'> sets.Range <a href=' /sets/fancysets.py#L616'>reversed</a>()</tt>	Return an equivalent range in the opposite order.
<tt style='background-color:#E8E8E8;'> sets. <a href=' /sets/fancysets.py#L982'>normalize_theta_set</a>(theta)</tt>	Normalize a real set theta in the interval [0 2*pi) it returns.
<tt style='background-color:#E8E8E8;'> sets.ComplexRegion <a href=' /sets/fancysets.py#L1200'>sets</a>()</tt>	Return raw input sets to the self.
<tt style='background-color:#E8E8E8;'> sets.ComplexRegion <a href=' /sets/fancysets.py#L1234'>psets</a>()</tt>	Return a tuple of sets productsets input of the self.
<tt style='background-color:#E8E8E8;'> sets.ComplexRegion <a href=' /sets/fancysets.py#L1261'>a_interval</a>()</tt>	Return the union of intervals of x when self is in rectangular form or the union of intervals of r when.
<tt style='background-color:#E8E8E8;'> sets.ComplexRegion <a href=' /sets/fancysets.py#L1290'>b_interval</a>()</tt>	Return the union of intervals of y when self is in rectangular form or the union of intervals of theta.
<tt style='background-color:#E8E8E8;'> sets.ComplexRegion <a href=' /sets/fancysets.py#L1319'>polar</a>()</tt>	Returns true if self is in polar form.
<tt style='background-color:#E8E8E8;'> sets.ComplexRegion <a href=' /sets/fancysets.py#L1340'>_measure</a>()</tt>	The measure of self sets.
<tt style='background-color:#E8E8E8;'> sets.ComplexRegion <a href=' /sets/fancysets.py#L1361'>from_real</a>(cls,sets)</tt>	Converts given subset of real numbers to a complex region.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L52'>_infimum_key</a>(expr)</tt>	Return infimum if possible else s infinity.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L156'>_union</a>(other)</tt>	This function should only be used internally self.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L116'>_intersect</a>(other)</tt>	This function should only be used internally self.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L110'>intersection</a>(other)</tt>	Alias for :meth intersect().
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L130'>is_disjoint</a>(other)</tt>	Returns true if 'self' and 'other' are disjoint examples.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L150'>isdisjoint</a>(other)</tt>	Alias for :meth is_disjoint().
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L170'>complement</a>(universe)</tt>	The complement of 'self' w r t the given the universe.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L221'>symmetric_difference</a>(other)</tt>	Returns symmetric difference of self and other.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L248'>inf</a>()</tt>	The infimum of 'self' examples.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L269'>sup</a>()</tt>	The supremum of 'self' examples.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L290'>contains</a>(other)</tt>	Returns true if 'other' is contained in 'self' as an element.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L315'>is_subset</a>(other)</tt>	Returns true if 'self' is a subset of 'other'.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L334'>issubset</a>(other)</tt>	Alias for :meth is_subset().
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L340'>is_proper_subset</a>(other)</tt>	Returns true if 'self' is a proper subset of 'other'.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L359'>is_superset</a>(other)</tt>	Returns true if 'self' is a superset of 'other'.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L378'>issuperset</a>(other)</tt>	Alias for :meth is_superset().
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L384'>is_proper_superset</a>(other)</tt>	Returns true if 'self' is a proper superset of 'other'.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L406'>powerset</a>()</tt>	Find the power set of 'self'.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L430'>measure</a>()</tt>	The lebesgue measure of 'self' examples.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L447'>boundary</a>()</tt>	The boundary or frontier of a set a point x is on the boundary of a set s if.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L477'>is_open</a>()</tt>	Property method to check whether a set is open.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L495'>is_closed</a>()</tt>	A property method to check whether a set is closed a set is closed.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L509'>closure</a>()</tt>	Property method which returns the closure of a set.
<tt style='background-color:#E8E8E8;'> sets.Set <a href=' /sets/sets.py#L526'>interior</a>()</tt>	Property method which returns the interior of a set.
<tt style='background-color:#E8E8E8;'> sets.ProductSet <a href=' /sets/sets.py#L655'>_contains</a>(element)</tt>	'in' operator for productsets.
<tt style='background-color:#E8E8E8;'> sets.ProductSet <a href=' /sets/sets.py#L679'>_intersect</a>(other)</tt>	This function should only be used internally see set.
<tt style='background-color:#E8E8E8;'> sets.ProductSet <a href=' /sets/sets.py#L718'>is_iterable</a>()</tt>	A property method which tests whether a set is iterable or not.
<tt style='background-color:#E8E8E8;'> sets.ProductSet <a href=' /sets/sets.py#L738'>__iter__</a>()</tt>	A method which implements is_iterable property method.
<tt style='background-color:#E8E8E8;'> sets.Interval <a href=' /sets/sets.py#L848'>start</a>()</tt>	The left end point of 'self'.
<tt style='background-color:#E8E8E8;'> sets.Interval <a href=' /sets/sets.py#L867'>open</a>(cls,a,b)</tt>	Return an interval including neither boundary.
<tt style='background-color:#E8E8E8;'> sets.Interval <a href=' /sets/sets.py#L872'>Lopen</a>(cls,a,b)</tt>	Return an interval not including the left boundary.
<tt style='background-color:#E8E8E8;'> sets.Interval <a href=' /sets/sets.py#L877'>Ropen</a>(cls,a,b)</tt>	Return an interval not including the right boundary.
<tt style='background-color:#E8E8E8;'> sets.Interval <a href=' /sets/sets.py#L882'>end</a>()</tt>	The right end point of 'self'.
<tt style='background-color:#E8E8E8;'> sets.Interval <a href=' /sets/sets.py#L901'>left_open</a>()</tt>	True if 'self' is left-open.
<tt style='background-color:#E8E8E8;'> sets.Interval <a href=' /sets/sets.py#L918'>right_open</a>()</tt>	True if 'self' is right-open.
<tt style='background-color:#E8E8E8;'> sets.Interval <a href=' /sets/sets.py#L935'>_intersect</a>(other)</tt>	This function should only be used internally see set.
<tt style='background-color:#E8E8E8;'> sets.Interval <a href=' /sets/sets.py#L1008'>_union</a>(other)</tt>	This function should only be used internally see set.
<tt style='background-color:#E8E8E8;'> sets.Interval <a href=' /sets/sets.py#L1188'>is_left_unbounded</a>()</tt>	Return true if the left endpoint is negative infinity.
<tt style='background-color:#E8E8E8;'> sets.Interval <a href=' /sets/sets.py#L1193'>is_right_unbounded</a>()</tt>	Return true if the right endpoint is positive infinity.
<tt style='background-color:#E8E8E8;'> sets.Interval <a href=' /sets/sets.py#L1198'>as_relational</a>(x)</tt>	Rewrite an interval in terms of inequalities and logic operators.
<tt style='background-color:#E8E8E8;'> sets.Union <a href=' /sets/sets.py#L1283'>reduce</a>(args)</tt>	Simplify a :class union using known rules.
<tt style='background-color:#E8E8E8;'> sets.Union <a href=' /sets/sets.py#L1407'>as_relational</a>(symbol)</tt>	Rewrite a union in terms of equalities and logic operators.
<tt style='background-color:#E8E8E8;'> sets.Intersection <a href=' /sets/sets.py#L1606'>reduce</a>(args)</tt>	Return a simplified intersection by applying rules.
<tt style='background-color:#E8E8E8;'> sets.Intersection <a href=' /sets/sets.py#L1671'>as_relational</a>(symbol)</tt>	Rewrite an intersection in terms of equalities and logic operators.
<tt style='background-color:#E8E8E8;'> sets.Complement <a href=' /sets/sets.py#L1709'>reduce</a>(A,B)</tt>	Simplify a :class complement.
<tt style='background-color:#E8E8E8;'> sets.FiniteSet <a href=' /sets/sets.py#L1916'>_intersect</a>(other)</tt>	This function should only be used internally see set.
<tt style='background-color:#E8E8E8;'> sets.FiniteSet <a href=' /sets/sets.py#L1966'>_union</a>(other)</tt>	This function should only be used internally see set.
<tt style='background-color:#E8E8E8;'> sets.FiniteSet <a href=' /sets/sets.py#L1984'>_contains</a>(other)</tt>	Tests whether an element other is in the set.
<tt style='background-color:#E8E8E8;'> sets.FiniteSet <a href=' /sets/sets.py#L2036'>as_relational</a>(symbol)</tt>	Rewrite a finiteset in terms of equalities and logic operators.
<tt style='background-color:#E8E8E8;'> sets. <a href=' /sets/sets.py#L2121'>imageset</a>()</tt>	Return an image of the set under transformation f.
<tt style='background-color:#E8E8E8;'> external. <a href=' /external/importtools.py#L32'>import_module</a>(module,min_module_version,min_python_version,warn_not_installed)</tt>	Import and return a module if it is installed.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L2854'>_invert</a>(f_x,y,x,domain)</tt>	Reduce the complex valued equation f x = y to a set of equations {g x = h_1 y g x = h_2 y.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L114'>invert_real</a>(f_x,y,x,domain)</tt>	Inverts a real-valued function same as _invert but sets.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L122'>_invert_real</a>(f,g_ys,symbol)</tt>	Helper function for _invert.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L218'>_invert_complex</a>(f,g_ys,symbol)</tt>	Helper function for _invert.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L259'>domain_check</a>(f,symbol,p)</tt>	Returns false if point p is infinite or any subexpression of f is infinite or becomes so after replacing symbol with p.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L306'>_is_finite_with_finite_vars</a>(f,domain)</tt>	Return true if the given expression is finite for symbols that.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L330'>_is_function_class_equation</a>(func_class,f,symbol)</tt>	Tests whether the equation is an equation of the given function class.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L380'>_solve_as_rational</a>(f,symbol,domain)</tt>	Solve rational functions.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L398'>_solve_trig</a>(f,symbol,domain)</tt>	Helper to solve trigonometric equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L423'>_solve_as_poly</a>(f,symbol,domain)</tt>	Solve the equation using polynomial techniques if it already is a polynomial equation or with a change of variables can be made so.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L487'>_has_rational_power</a>(expr,symbol)</tt>	Returns bool den where bool is true if the term has a non-integer rational power and den is the denominator of the.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L522'>_solve_radical</a>(f,symbol,solveset_solver)</tt>	Helper function to solve equations with radicals.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L555'>_solve_abs</a>(f,symbol,domain)</tt>	Helper function to solve equation involving absolute value function.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L580'>solve_decomposition</a>(f,symbol,domain)</tt>	Function to solve equations via the principle of "decomposition and rewriting".
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L652'>_solveset</a>(f,symbol,domain,_check)</tt>	Helper for solveset to return a result from an expression that has already been sympify'ed and is known to contain the.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L774'>solveset</a>(f,symbol,domain)</tt>	Solves a given inequality or equation with set as output parameters.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L933'>solvify</a>(f,symbol,domain)</tt>	Solves an equation using solveset and returns the solution in accordance with the solve output api.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L1018'>linear_eq_to_matrix</a>(equations)</tt>	Converts a given system of equations into matrix form.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L1122'>linsolve</a>(system)</tt>	Solve system of n linear equations with m variables which means both under - and overdetermined systems are supported.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L1340'>substitution</a>(system,symbols,result,known_symbols)</tt>	Solves the system using substitution method it is used in.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solveset.py#L1950'>nonlinsolve</a>(system)</tt>	Solve system of n non linear equations with m variables which means both under and overdetermined systems are supported.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L96'>diophantine</a>(eq,param,syms,permute)</tt>	Simplify the solution procedure of diophantine equation eq by converting it into a product of terms which should equal zero.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L346'>merge_solution</a>(var,var_t,solution)</tt>	This is used to construct the full solution from the solutions of sub equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L378'>diop_solve</a>(eq,param)</tt>	Solves the diophantine equation eq.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L582'>diop_linear</a>(eq,param)</tt>	Solves linear diophantine equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L629'>_diop_linear</a>(var,coeff,param)</tt>	Solves diophantine equations of the form a_0*x_0 + a_1*x_1 +.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L806'>base_solution_linear</a>(c,a,b,t)</tt>	Return the base solution for the linear equation ax + by = c.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L860'>divisible</a>(a,b)</tt>	Returns true if a is divisible by b and false otherwise.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L867'>diop_quadratic</a>(eq,param)</tt>	Solves quadratic diophantine equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L1098'>is_solution_quad</a>(var,coeff,u,v)</tt>	Check whether u v is solution to the quadratic binary diophantine equation with the variable list var and coefficient dictionary.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L1111'>diop_DN</a>(D,N,t)</tt>	Solves the equation x^2 - dy^2 = n.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L1308'>_special_diop_DN</a>(D,N)</tt>	Solves the equation x^2 - dy^2 = n for the special case where 1 < n**2 < d and d is not a perfect square.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L1403'>cornacchia</a>(a,b,m)</tt>	Solves ax^2 + by^2 = m where \gcd a b = 1 = gcd a m and a b > 0.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L1465'>PQa</a>(P_0,Q_0,D)</tt>	Returns useful information needed to solve the pell equation.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L1525'>diop_bf_DN</a>(D,N,t)</tt>	Uses brute force to solve the equation x^2 - dy^2 = n.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L1615'>equivalent</a>(u,v,r,s)</tt>	Returns true if two solutions u v and r s of x^2 - dy^2 = n belongs to the same equivalence class and false otherwise.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L1651'>length</a>(P,Q,D)</tt>	Returns the length of aperiodic part + length of periodic part of continued fraction representation of \frac{p + \sqrt{d}}{q}.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L1696'>transformation_to_DN</a>(eq)</tt>	This function transforms general quadratic ax^2 + bxy + cy^2 + dx + ey + f = 0.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L1828'>find_DN</a>(eq)</tt>	This function returns a tuple d n of the simplified form x^2 - dy^2 = n, corresponding to the general quadratic.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L1889'>check_param</a>(x,y,a,t)</tt>	If there is a number modulo a such that x and y are both integers then return a parametric representation for x and y.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L1917'>diop_ternary_quadratic</a>(eq)</tt>	Solves the general quadratic ternary form ax^2 + by^2 + cz^2 + fxy + gyz + hxz = 0.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2057'>transformation_to_normal</a>(eq)</tt>	Returns the transformation matrix that converts a general ternary quadratic equation eq (ax^2 + by^2 + cz^2 + dxy + eyz + fxz).
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2157'>parametrize_ternary_quadratic</a>(eq)</tt>	Returns the parametrized general solution for the ternary quadratic equation eq which has the form.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2238'>diop_ternary_quadratic_normal</a>(eq)</tt>	Solves the quadratic ternary diophantine equation ax^2 + by^2 + cz^2 = 0.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2332'>sqf_normal</a>(a,b,c,steps)</tt>	Return a', b', c', the coefficients of the square-free normal form of ax^2 + by^2 + cz^2 = 0, where a', b', c' are pairwise.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2389'>square_factor</a>(a)</tt>	Returns an integer c s t a = c^2k \ c k \in z here k is square.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2415'>reconstruct</a>(A,B,z)</tt>	Reconstruct the z value of an equivalent solution of ax^2 + by^2 + cz^2 from the z value of a solution of the square-free normal form of the.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2430'>ldescent</a>(A,B)</tt>	Return a non-trivial solution to w^2 = ax^2 + by^2 using lagrange's method return none if there is no such solution.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2499'>descent</a>(A,B)</tt>	Returns a non-trivial solution x y z to x^2 = ay^2 + bz^2 using lagrange's descent method with lattice-reduction.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2552'>gaussian_reduce</a>(w,a,b)</tt>	Returns a reduced solution x z to the congruence x^2 - az^2 \equiv 0 \ (mod \ b) so that x^2 + |a|z^2 is minimal.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2593'>dot</a>(u,v,w,a)</tt>	Returns a special dot product of the vectors u = (u_{1}, u_{2}) and v = (v_{1}, v_{2}) which is defined in order to reduce solution of.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2604'>norm</a>(u,w,a,b)</tt>	Returns the norm of the vector u = (u_{1}, u_{2}) under the dot product defined by u \cdot v = (wu_{1} + bu_{2})(w*v_{1} + bv_{2}) + |a|*u_{1}*v_{1}.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2614'>holzer</a>(x,y,z,a)</tt>	Simplify the solution x y z of the equation ax^2 + by^2 = cz^2 with a b c > 0 and z^2 \geq \mid ab \mid to.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2678'>diop_general_pythagorean</a>(eq,param)</tt>	Solves the general pythagorean equation a_{1}^2x_{1}^2 + a_{2}^2x_{2}^2 +.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2742'>diop_general_sum_of_squares</a>(eq,limit)</tt>	Solves the equation x_{1}^2 + x_{2}^2 + + x_{n}^2 - k = 0.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2808'>diop_general_sum_of_even_powers</a>(eq,limit)</tt>	Solves the equation x_{1}^e + x_{2}^e + + x_{n}^e - k = 0.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2872'>partition</a>(n,k,zeros)</tt>	Returns a generator that can be used to generate partitions of an integer n.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2926'>prime_as_sum_of_two_squares</a>(p)</tt>	Represent a prime p as a unique sum of two squares this can only be done if the prime is congruent to 1 mod 4.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L2969'>sum_of_three_squares</a>(n)</tt>	Returns a 3-tuple a b c such that a^2 + b^2 + c^2 = n and a b c \geq 0.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L3048'>sum_of_four_squares</a>(n)</tt>	Returns a 4-tuple a b c d such that a^2 + b^2 + c^2 + d^2 = n.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L3098'>power_representation</a>(n,p,k,zeros)</tt>	Returns a generator for finding k-tuples of integers (n_{1}, n_{2},.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L3226'>sum_of_squares</a>(n,k,zeros)</tt>	Return a generator that yields the k-tuples of nonnegative values the squares of which sum to n.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/diophantine.py#L3274'>_can_do_sum_of_squares</a>(n,k)</tt>	Return true if n can be written as the sum of k squares false if it can't or 1 if k == 2 and n is prime (in which.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/deutils.py#L17'>_preprocess</a>(expr,func,hint)</tt>	Prepare expr for solving by making sure that differentiation is done so that only func remains in unevaluated derivatives and.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/deutils.py#L87'>ode_order</a>(expr,func)</tt>	Returns the order of a given differential equation with respect to func.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/deutils.py#L128'>_desolve</a>(eq,func,hint,ics)</tt>	This is a helper function to dsolve and pdsolve in the ode and pde modules.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/bivariate.py#L18'>_filtered_gens</a>(poly,symbol)</tt>	Process the generators of poly, returning the set of generators that have symbol.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/bivariate.py#L43'>_mostfunc</a>(lhs,func,X)</tt>	Returns the term in lhs which contains the most of the func-type things e.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/bivariate.py#L81'>_linab</a>(arg,symbol)</tt>	Return a b x assuming arg can be written as a*x + b where x is a symbol-dependent factor and a and b are.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/bivariate.py#L117'>_lambert</a>(eq,x)</tt>	Given an expression assumed to be in the form f(x a.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/bivariate.py#L166'>_solve_lambert</a>(f,symbol,gens)</tt>	Return solution to f if it is a lambert-type expression else raise notimplementederror.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/bivariate.py#L308'>bivariate_type</a>(f,x,y)</tt>	Given an expression f 3 tests will be done to see what type of composite bivariate it might be options for u x y are :.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L335'>sub_func_doit</a>(eq,func,new)</tt>	When replacing the func with something else we usually want the derivative evaluated so this function helps in making that happen.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L370'>get_numbered_constants</a>(eq,num,start,prefix)</tt>	Returns a list of constants that do not occur in eq already.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L387'>dsolve</a>(eq,func,hint,simplify)</tt>	Solves any supported kind of ordinary differential equation and system of ordinary differential equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/pde.py#L201'>_helper_simplify</a>(eq,hint,match,simplify)</tt>	Helper function of dsolve that calls the respective :py mod ~sympy.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L694'>classify_ode</a>(eq,func,dict,ics)</tt>	Returns a tuple of possible :py meth ~sympy solvers ode dsolve.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L1283'>classify_sysode</a>(eq,funcs)</tt>	Returns a dictionary of parameter names and values that define the system of ordinary differential equations in eq.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L1884'>checksysodesol</a>(eqs,sols,func)</tt>	Substitutes corresponding sols for each functions into each eqs and checks that the result of substitutions for each equation is 0.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L1988'>odesimp</a>(eq,func,order,constants)</tt>	Simplifies odes including trying to solve for func and running :py meth ~sympy.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L2159'>checkodesol</a>(ode,sol,func,order)</tt>	Substitutes sol into ode and checks that the result is 0.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L2370'>ode_sol_simplicity</a>(sol,func,trysolving)</tt>	Returns an extended integer representing how simple a solution to an ode is.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L2573'>constantsimp</a>(expr,constants)</tt>	Simplifies an expression with arbitrary constants in it.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L2699'>constant_renumber</a>(expr,symbolname,startnumber,endnumber)</tt>	Renumber arbitrary constants in expr to have numbers 1 through n where n is endnumber - startnumber + 1 at most.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/pde.py#L217'>_handle_Integral</a>(expr,func,order,hint)</tt>	Converts a solution with integrals in it into an actual solution.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L2827'>ode_1st_exact</a>(eq,func,order,match)</tt>	Solves 1st order exact ordinary differential equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L2898'>ode_1st_homogeneous_coeff_best</a>(eq,func,order,match)</tt>	Returns the best solution to an ode from the two hints 1st_homogeneous_coeff_subs_dep_div_indep and.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L2961'>ode_1st_homogeneous_coeff_subs_dep_div_indep</a>(eq,func,order,match)</tt>	Solves a 1st order differential equation with homogeneous coefficients using the substitution u_1 = \frac{\text{<dependent.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L3054'>ode_1st_homogeneous_coeff_subs_indep_div_dep</a>(eq,func,order,match)</tt>	Solves a 1st order differential equation with homogeneous coefficients using the substitution u_2 = \frac{\text{<independent.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L3153'>homogeneous_order</a>(eq)</tt>	Returns the order n if g is homogeneous and none if it is not homogeneous.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L3244'>ode_1st_linear</a>(eq,func,order,match)</tt>	Solves 1st order linear differential equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L3305'>ode_Bernoulli</a>(eq,func,order,match)</tt>	Solves bernoulli differential equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L3390'>ode_Riccati_special_minus2</a>(eq,func,order,match)</tt>	The general riccati equation has the form.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L3439'>ode_Liouville</a>(eq,func,order,match)</tt>	Solves 2nd order liouville differential equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L3511'>ode_2nd_power_series_ordinary</a>(eq,func,order,match)</tt>	Gives a power series solution to a second order homogeneous differential equation with polynomial coefficients at an ordinary point.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L3657'>ode_2nd_power_series_regular</a>(eq,func,order,match)</tt>	Gives a power series solution to a second order homogeneous differential equation with polynomial coefficients at a regular point.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L3782'>_frobenius</a>(n,m,p0,q0)</tt>	Returns a dict with keys as coefficients and values as their values in terms of c0.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L3835'>_nth_linear_match</a>(eq,func,order)</tt>	Matches a differential equation to the linear form.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L3880'>ode_nth_linear_euler_eq_homogeneous</a>(eq,func,order,match)</tt>	Solves an n\th order linear homogeneous variable-coefficient cauchy-euler equidimensional ordinary differential equation.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L4021'>ode_nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients</a>(eq,func,order,match)</tt>	Solves an n\th order linear non homogeneous cauchy-euler equidimensional ordinary differential equation using undetermined coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L4090'>ode_nth_linear_euler_eq_nonhomogeneous_variation_of_parameters</a>(eq,func,order,match)</tt>	Solves an n\th order linear non homogeneous cauchy-euler equidimensional ordinary differential equation using variation of parameters.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L4155'>ode_almost_linear</a>(eq,func,order,match)</tt>	Solves an almost-linear differential equation.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L4224'>_linear_coeff_match</a>(expr,func)</tt>	Helper function to match hint linear_coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L4304'>ode_linear_coefficients</a>(eq,func,order,match)</tt>	Solves a differential equation with linear coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L4357'>ode_separable_reduced</a>(eq,func,order,match)</tt>	Solves a differential equation that can be reduced to the separable form.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L4431'>ode_1st_power_series</a>(eq,func,order,match)</tt>	The power series solution is a method which gives the taylor series expansion to the solution of a differential equation.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L4506'>ode_nth_linear_constant_coeff_homogeneous</a>(eq,func,order,match)</tt>	Solves an n\th order linear homogeneous differential equation with constant coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L4661'>ode_nth_linear_constant_coeff_undetermined_coefficients</a>(eq,func,order,match)</tt>	Solves an n\th order linear differential equation with constant coefficients using the method of undetermined coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L4724'>_solve_undetermined_coefficients</a>(eq,func,order,match)</tt>	Helper function for the method of undetermined coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L4829'>_undetermined_coefficients_match</a>(expr,x)</tt>	Returns a trial function match if undetermined coefficients can be applied to expr, and none otherwise.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L4972'>ode_nth_linear_constant_coeff_variation_of_parameters</a>(eq,func,order,match)</tt>	Solves an n\th order linear differential equation with constant coefficients using the method of variation of parameters.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L5049'>_solve_variation_of_parameters</a>(eq,func,order,match)</tt>	Helper function for the method of variation of parameters and nonhomogeneous euler eq.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L5107'>ode_separable</a>(eq,func,order,match)</tt>	Solves separable 1st order differential equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L5172'>checkinfsol</a>(eq,infinitesimals,func,order)</tt>	This function is used to check if the given infinitesimals are the actual infinitesimals of the given first order differential equation.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L5248'>ode_lie_group</a>(eq,func,order,match)</tt>	This hint implements the lie group method of solving first order differential equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L5410'>_lie_group_remove</a>(coords)</tt>	This function is strictly meant for internal use by the lie group ode solving method.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L5465'>infinitesimals</a>(eq,func,order,hint)</tt>	The infinitesimal functions of an ordinary differential equation \xi x y and \eta x y , are the infinitesimals of the lie group of point transformations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L5609'>lie_heuristic_abaco1_simple</a>(match,comp)</tt>	The first heuristic uses the following four sets of assumptions on \xi and \eta.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L5712'>lie_heuristic_abaco1_product</a>(match,comp)</tt>	The second heuristic uses the following two assumptions on \xi and \eta.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L5785'>lie_heuristic_bivariate</a>(match,comp)</tt>	The third heuristic assumes the infinitesimals \xi and \eta to be bi-variate polynomials in x and y.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L5857'>lie_heuristic_chi</a>(match,comp)</tt>	The aim of the fourth heuristic is to find the function \chi x y that satisifies the pde \frac{d\chi}{dx} + h\frac{d\chi}{dx}.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L5929'>lie_heuristic_function_sum</a>(match,comp)</tt>	This heuristic uses the following two assumptions on \xi and \eta.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L6021'>lie_heuristic_abaco2_similar</a>(match,comp)</tt>	This heuristic uses the following two assumptions on \xi and \eta.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L6130'>lie_heuristic_abaco2_unique_unknown</a>(match,comp)</tt>	This heuristic assumes the presence of unknown functions or known functions with non-integer powers.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L6210'>lie_heuristic_abaco2_unique_general</a>(match,comp)</tt>	This heuristic finds if infinitesimals of the form \eta = f x , \xi = g y without making any assumptions on h.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L6289'>lie_heuristic_linear</a>(match,comp)</tt>	This heuristic assumes 1.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L6415'>_linear_2eq_order1_type1</a>(x,y,t,r)</tt>	It is classified under system of two linear homogeneous first-order constant-coefficient ordinary differential equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L6537'>_linear_2eq_order1_type2</a>(x,y,t,r)</tt>	The equations of this type are.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L6586'>_linear_2eq_order1_type3</a>(x,y,t,r)</tt>	The equations of this type of ode are.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L6610'>_linear_2eq_order1_type4</a>(x,y,t,r)</tt>	The equations of this type of ode are.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L6640'>_linear_2eq_order1_type5</a>(x,y,t,r)</tt>	The equations of this type of ode are.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L6675'>_linear_2eq_order1_type6</a>(x,y,t,r)</tt>	The equations of this type of ode are.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L6727'>_linear_2eq_order1_type7</a>(x,y,t,r)</tt>	The equations of this type of ode are.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L6841'>_linear_2eq_order2_type1</a>(x,y,t,r)</tt>	System of two constant-coefficient second-order linear homogeneous differential equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L6950'>_linear_2eq_order2_type2</a>(x,y,t,r)</tt>	The equations in this type are.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7002'>_linear_2eq_order2_type3</a>(x,y,t,r)</tt>	These type of equation is used for describing the horizontal motion of a pendulum taking into account the earth rotation.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7026'>_linear_2eq_order2_type4</a>(x,y,t,r)</tt>	These equations are found in the theory of oscillations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7105'>_linear_2eq_order2_type5</a>(x,y,t,r)</tt>	The equation which come under this catagory are.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7156'>_linear_2eq_order2_type6</a>(x,y,t,r)</tt>	The equations are.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7198'>_linear_2eq_order2_type7</a>(x,y,t,r)</tt>	The equations are given as.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7246'>_linear_2eq_order2_type8</a>(x,y,t,r)</tt>	The equation of this catagory are.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7301'>_linear_2eq_order2_type9</a>(x,y,t,r)</tt>	Math : t^2 x'' + a_1 t x' + b_1 t y' + c_1 x + d_1 y = 0.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7359'>_linear_2eq_order2_type10</a>(x,y,t,r)</tt>	The equation of this catagory are.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7401'>_linear_2eq_order2_type11</a>(x,y,t,r)</tt>	The equations which comes under this type are.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7474'>_linear_3eq_order1_type1</a>(x,y,z,t)</tt>	Math : x' = ax.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7504'>_linear_3eq_order1_type2</a>(x,y,z,t)</tt>	The equations of this type are.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7547'>_linear_3eq_order1_type3</a>(x,y,z,t)</tt>	Equations of this system of odes.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7634'>_linear_neq_order1_type1</a>(match_)</tt>	System of n first-order constant-coefficient linear nonhomogeneous differential equation.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7865'>_nonlinear_2eq_order1_type3</a>(x,y,t,eq)</tt>	Autonomous system of general form.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L7946'>_nonlinear_2eq_order1_type5</a>(func,t,eq)</tt>	Clairaut system of odes.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/ode.py#L8255'>_nonlinear_3eq_order1_type5</a>(x,y,t,eq)</tt>	Math : x' = x (c f_2 - b f_3), \enspace y' = y (a f_3 - c f_1), \enspace z' = z (b f_1 - a f_2).
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/polysys.py#L18'>solve_poly_system</a>(seq)</tt>	Solve a system of polynomial equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/polysys.py#L52'>solve_biquadratic</a>(f,g,opt)</tt>	Solve a system of two bivariate quadratic polynomial equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/polysys.py#L101'>solve_generic</a>(polys,opt)</tt>	Solve a generic system of polynomial equations.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/polysys.py#L238'>solve_triangulated</a>(polys)</tt>	Solve a polynomial system using gianni-kalkbrenner algorithm.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/inequalities.py#L19'>solve_poly_inequality</a>(poly,rel)</tt>	Solve a polynomial inequality with rational coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/inequalities.py#L111'>solve_poly_inequalities</a>(polys)</tt>	Solve polynomial inequalities with rational coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/inequalities.py#L129'>solve_rational_inequalities</a>(eqs)</tt>	Solve a system of rational inequalities with rational coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/inequalities.py#L196'>reduce_rational_inequalities</a>(exprs,gen,relational)</tt>	Reduce a system of rational inequalities with rational coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/inequalities.py#L274'>reduce_abs_inequality</a>(expr,rel,gen)</tt>	Reduce an inequality with nested absolute values.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/inequalities.py#L355'>reduce_abs_inequalities</a>(exprs,gen)</tt>	Reduce a system of inequalities with nested absolute values.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/inequalities.py#L382'>solve_univariate_inequality</a>(expr,gen,relational,domain)</tt>	Solves a real univariate inequality.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/inequalities.py#L561'>_pt</a>(start,end)</tt>	Return a point between start and end.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/inequalities.py#L574'>_solve_inequality</a>(ie,s)</tt>	A hacky replacement for solve since the latter only works for univariate inequalities.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/inequalities.py#L647'>reduce_inequalities</a>(inequalities,symbols)</tt>	Reduce a system of inequalities with rational coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/recurr.py#L71'>rsolve_poly</a>(coeffs,f,n)</tt>	Given linear recurrence operator \operatorname{l} of order k with polynomial coefficients and inhomogeneous equation.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/recurr.py#L349'>rsolve_ratio</a>(coeffs,f,n)</tt>	Given linear recurrence operator \operatorname{l} of order k with polynomial coefficients and inhomogeneous equation.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/recurr.py#L460'>rsolve_hyper</a>(coeffs,f,n)</tt>	Given linear recurrence operator \operatorname{l} of order k with polynomial coefficients and inhomogeneous equation.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/recurr.py#L662'>rsolve</a>(f,y,init)</tt>	Solve univariate recurrence with rational coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/decompogen.py#L5'>decompogen</a>(f,symbol)</tt>	Computes general functional decomposition of f.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/decompogen.py#L61'>compogen</a>(g_s,symbol)</tt>	Returns the composition of functions.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/pde.py#L64'>pdsolve</a>(eq,func,hint,dict)</tt>	Solves any supported kind of partial differential equation.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/pde.py#L201'>_helper_simplify</a>(eq,hint,func,order)</tt>	Helper function of pdsolve that calls the respective pde functions to solve for the partial differential.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/pde.py#L233'>classify_pde</a>(eq,func,dict)</tt>	Returns a tuple of possible pdsolve() classifications for a pde.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/pde.py#L394'>checkpdesol</a>(pde,sol,func,solve_for_func)</tt>	Checks if the given solution satisfies the partial differential equation.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/pde.py#L488'>pde_1st_linear_constant_coeff_homogeneous</a>(eq,func,order,match)</tt>	Solves a first order linear homogeneous partial differential equation with constant coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/pde.py#L558'>pde_1st_linear_constant_coeff</a>(eq,func,order,match)</tt>	Solves a first order linear partial differential equation with constant coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/pde.py#L662'>pde_1st_linear_variable_coeff</a>(eq,func,order,match)</tt>	Solves a first order linear partial differential equation with variable coefficients.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/pde.py#L791'>_simplify_variable_coeff</a>(sol,syms,func,funcarg)</tt>	Helper function to replace constants by functions in 1st_linear_variable_coeff.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/pde.py#L809'>pde_separate</a>(eq,fun,sep,strategy)</tt>	Separate variables in partial differential equation either by additive or multiplicative separation approach.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/pde.py#L899'>pde_separate_add</a>(eq,fun,sep)</tt>	Helper function for searching additive separable solutions.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/pde.py#L924'>pde_separate_mul</a>(eq,fun,sep)</tt>	Helper function for searching multiplicative separable solutions.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/pde.py#L949'>_separate</a>(eq,dep,others)</tt>	Separate expression into two parts based on dependencies of variables.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L60'>_ispow</a>(e)</tt>	Return true if e is a pow or is exp.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L80'>denoms</a>(eq)</tt>	Return recursively set of all denominators that appear in eq that contain any symbol in symbols; if symbols are not.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L132'>checksol</a>(f,symbol,sol)</tt>	Checks whether sol is a solution of equation f == 0.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L312'>check_assumptions</a>(expr,against)</tt>	Checks whether expression expr satisfies all assumptions.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L1256'>_solve</a>(f)</tt>	Return a checked solution for f in terms of one or more of the symbols.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L1861'>solve_linear</a>(lhs,rhs,symbols,exclude)</tt>	Return a tuple derived from f = lhs - rhs that is one of the following.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L2044'>minsolve_linear_system</a>(system)</tt>	Find a particular solution to a linear system.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L2124'>solve_linear_system</a>(system)</tt>	Solve system of n linear equations with m variables which means both under- and overdetermined systems are supported.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L2322'>solve_undetermined_coeffs</a>(equ,coeffs,sym)</tt>	Solve equation of a type p(x a_1 a_k) == q x where both.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L2361'>solve_linear_system_LU</a>(matrix,syms)</tt>	Solves the augmented matrix system using lusolve and returns a dictionary in which solutions are keyed to the symbols of syms *as ordered*.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L2398'>det_perm</a>(M)</tt>	Return the det(m) by using permutations to select factors.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L2428'>det_minor</a>(M)</tt>	Return the det m computed from minors without introducing new nesting in products.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L2446'>det_quick</a>(M,method)</tt>	Return det m assuming that either there are lots of zeros or the size of the matrix.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L2465'>inv_quick</a>(M)</tt>	Return the inverse of m, assuming that either there are lots of zeros or the size of the matrix.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L2500'>_tsolve</a>(eq,sym)</tt>	Helper for _solve that solves a transcendental equation with respect to the given symbol.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L2657'>nsolve</a>()</tt>	Solve a nonlinear equation system numerically : nsolve(f [args ] x0 modules=['mpmath'], **kwargs).
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L2854'>_invert</a>(eq)</tt>	Return tuple i d where i is independent of symbols and d contains symbols.
<tt style='background-color:#E8E8E8;'> solvers. <a href=' /solvers/solvers.py#L3019'>unrad</a>(eq)</tt>	Remove radicals with symbolic arguments and return eq cov none or raise an error.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/acceleration.py#L18'>richardson</a>(A,k,n,N)</tt>	Calculate an approximation for lim k->oo a k using richardson extrapolation with the terms a n a n+1.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/acceleration.py#L69'>shanks</a>(A,k,n,m)</tt>	Calculate an approximation for lim k->oo a k using the n-term shanks transformation s a n.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/limitseq.py#L58'>dominant</a>(expr,n)</tt>	Finds the most dominating term in an expression.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/limitseq.py#L109'>limit_seq</a>(expr,n,trials)</tt>	Finds limits of terms having sequences at infinity.
<tt style='background-color:#E8E8E8;'> series.SeriesBase <a href=' /series/series_class.py#L17'>interval</a>()</tt>	The interval on which the series is defined.
<tt style='background-color:#E8E8E8;'> series.SeriesBase <a href=' /series/series_class.py#L22'>start</a>()</tt>	The starting point of the series this point is included.
<tt style='background-color:#E8E8E8;'> series.SeriesBase <a href=' /series/series_class.py#L27'>stop</a>()</tt>	The ending point of the series this point is included.
<tt style='background-color:#E8E8E8;'> series.SeriesBase <a href=' /series/series_class.py#L32'>length</a>()</tt>	Length of the series expansion.
<tt style='background-color:#E8E8E8;'> series.SeriesBase <a href=' /series/series_class.py#L37'>variables</a>()</tt>	Returns a tuple of variables that are bounded.
<tt style='background-color:#E8E8E8;'> series.SeriesBase <a href=' /series/series_class.py#L42'>free_symbols</a>()</tt>	This method returns the symbols in the object excluding those that take on a specific value (i.
<tt style='background-color:#E8E8E8;'> series.SeriesBase <a href=' /series/series_class.py#L51'>term</a>(pt)</tt>	Term at point pt of a series.
<tt style='background-color:#E8E8E8;'> series.SeriesBase <a href=' /series/series_class.py#L64'>_ith_point</a>(i)</tt>	Returns the i'th point of a series if start point is negative infinity point is returned from the end.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L33'>_start_key</a>(expr)</tt>	Return start if possible else s infinity.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L46'>_intersect_interval</a>(other)</tt>	Returns start and stop.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L54'>gen</a>()</tt>	Returns the generator for the sequence.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L59'>interval</a>()</tt>	The interval on which the sequence is defined.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L64'>start</a>()</tt>	The starting point of the sequence this point is included.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L69'>stop</a>()</tt>	The ending point of the sequence this point is included.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L74'>length</a>()</tt>	Length of the sequence.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L79'>variables</a>()</tt>	Returns a tuple of variables that are bounded.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L84'>free_symbols</a>()</tt>	This method returns the symbols in the object excluding those that take on a specific value (i.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L101'>coeff</a>(pt)</tt>	Returns the coefficient at point pt.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L114'>_ith_point</a>(i)</tt>	Returns the i'th point of a sequence.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L201'>__add__</a>(other)</tt>	Returns the term-wise addition of 'self' and 'other'.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L256'>__mul__</a>(other)</tt>	Returns the term-wise multiplication of 'self' and 'other'.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L181'>coeff_mul</a>(other)</tt>	Should be used when other is not a sequence should be.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L222'>__sub__</a>(other)</tt>	Returns the term-wise subtraction of 'self' and 'other'.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L243'>__neg__</a>()</tt>	Negates the sequence.
<tt style='background-color:#E8E8E8;'> series.SeqBase <a href=' /series/sequences.py#L296'>find_linear_recurrence</a>(n,d,gfvar)</tt>	Finds the shortest linear recurrence that satisfies the first n terms of sequence of order \leq n/2 if possible.
<tt style='background-color:#E8E8E8;'> series.EmptySequence <a href=' /series/sequences.py#L400'>coeff_mul</a>(coeff)</tt>	See docstring of seqbase coeff_mul.
<tt style='background-color:#E8E8E8;'> series.SeqPer <a href=' /series/sequences.py#L561'>_add</a>(other)</tt>	See docstring of seqbase _add.
<tt style='background-color:#E8E8E8;'> series.SeqPer <a href=' /series/sequences.py#L578'>_mul</a>(other)</tt>	See docstring of seqbase _mul.
<tt style='background-color:#E8E8E8;'> series.SeqPer <a href=' /series/sequences.py#L595'>coeff_mul</a>(coeff)</tt>	See docstring of seqbase coeff_mul.
<tt style='background-color:#E8E8E8;'> series.SeqFormula <a href=' /series/sequences.py#L689'>_add</a>(other)</tt>	See docstring of seqbase _add.
<tt style='background-color:#E8E8E8;'> series.SeqFormula <a href=' /series/sequences.py#L698'>_mul</a>(other)</tt>	See docstring of seqbase _mul.
<tt style='background-color:#E8E8E8;'> series.SeqFormula <a href=' /series/sequences.py#L707'>coeff_mul</a>(coeff)</tt>	See docstring of seqbase coeff_mul.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/sequences.py#L714'>sequence</a>(seq,limits)</tt>	Returns appropriate sequence object.
<tt style='background-color:#E8E8E8;'> series.SeqExprOp <a href=' /series/sequences.py#L773'>gen</a>()</tt>	Generator for the sequence.
<tt style='background-color:#E8E8E8;'> series.SeqExprOp <a href=' /series/sequences.py#L781'>interval</a>()</tt>	Sequence is defined on the intersection.
<tt style='background-color:#E8E8E8;'> series.SeqExprOp <a href=' /series/sequences.py#L796'>variables</a>()</tt>	Cumulative of all the bound variables.
<tt style='background-color:#E8E8E8;'> series.SeqAdd <a href=' /series/sequences.py#L871'>reduce</a>(args)</tt>	Simplify :class seqadd using known rules.
<tt style='background-color:#E8E8E8;'> series.SeqAdd <a href=' /series/sequences.py#L907'>_eval_coeff</a>(pt)</tt>	Adds up the coefficients of all the sequences at point pt.
<tt style='background-color:#E8E8E8;'> series.SeqMul <a href=' /series/sequences.py#L978'>reduce</a>(args)</tt>	Simplify a :class seqmul using known rules.
<tt style='background-color:#E8E8E8;'> series.SeqMul <a href=' /series/sequences.py#L1014'>_eval_coeff</a>(pt)</tt>	Multiplies the coefficients of all the sequences at point pt.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/approximants.py#L9'>approximants</a>(l,X,simplify)</tt>	Return a generator for consecutive pade approximants for a series.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L29'>rational_algorithm</a>(f,x,k,order)</tt>	Rational algorithm for computing formula of coefficients of formal power series.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L153'>rational_independent</a>(terms,x)</tt>	Returns a list of all the rationally independent terms.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L186'>simpleDE</a>(f,x,g,order)</tt>	Generates simple de.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L229'>exp_re</a>(DE,r,k)</tt>	Converts a de with constant coefficients explike into a re.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L276'>hyper_re</a>(DE,r,k)</tt>	Converts a de into a re.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L363'>_compute_formula</a>(f,x,P,Q)</tt>	Computes the formula for f.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L459'>rsolve_hypergeometric</a>(f,x,P,Q)</tt>	Solves re of hypergeometric type.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L546'>_solve_hyper_RE</a>(f,x,RE,g)</tt>	See docstring of :func rsolve_hypergeometric for details.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L560'>_solve_explike_DE</a>(f,x,DE,g)</tt>	Solves de with constant coefficients.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L583'>_solve_simple</a>(f,x,DE,g)</tt>	Converts de into re and solves using :func rsolve.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L601'>_transform_explike_DE</a>(DE,g,x,order)</tt>	Converts de with free parameters into de with constant coefficients.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L629'>_transform_DE_RE</a>(DE,g,k,order)</tt>	Converts de with free parameters into re of hypergeometric type.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L652'>solve_de</a>(f,x,DE,order)</tt>	Solves the de.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L703'>hyper_algorithm</a>(f,x,k,order)</tt>	Hypergeometric algorithm for computing formal power series.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L832'>compute_fps</a>(f,x,x0,dir)</tt>	Computes the formula for formal power series of a function.
<tt style='background-color:#E8E8E8;'> series.FormalPowerSeries <a href=' /series/formal.py#L964'>infinite</a>()</tt>	Returns an infinite representation of the series.
<tt style='background-color:#E8E8E8;'> series.FormalPowerSeries <a href=' /series/formal.py#L974'>_get_pow_x</a>(term)</tt>	Returns the power of x in a term.
<tt style='background-color:#E8E8E8;'> series.FormalPowerSeries <a href=' /series/formal.py#L981'>polynomial</a>(n)</tt>	Truncated series as polynomial.
<tt style='background-color:#E8E8E8;'> series.FormalPowerSeries <a href=' /series/formal.py#L1071'>integrate</a>(x)</tt>	Integrate formal power series.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/formal.py#L1182'>fps</a>(f,x,x0,dir)</tt>	Generates formal power series of f.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/gruntz.py#L135'>compare</a>(a,b,x)</tt>	Returns "<" if a<b "=" for a == b ">" for a>b.
<tt style='background-color:#E8E8E8;'> series.SubsSet <a href=' /series/gruntz.py#L208'>do_subs</a>(e)</tt>	Substitute the variables with expressions.
<tt style='background-color:#E8E8E8;'> series.SubsSet <a href=' /series/gruntz.py#L214'>meets</a>(s2)</tt>	Tell whether or not self and s2 have non-empty intersection.
<tt style='background-color:#E8E8E8;'> series.SubsSet <a href=' /series/gruntz.py#L218'>union</a>(s2,exps)</tt>	Compute the union of self and s2 adjusting exps.
<tt style='background-color:#E8E8E8;'> series.SubsSet <a href=' /series/gruntz.py#L233'>copy</a>()</tt>	Create a shallow copy of subsset.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/gruntz.py#L242'>mrv</a>(e,x)</tt>	Returns a subsset of most rapidly varying mrv subexpressions of 'e',.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/gruntz.py#L312'>mrv_max3</a>(f,expsf,g,expsg)</tt>	Computes the maximum of two sets of expressions f and g which are in the same comparability class i.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/gruntz.py#L340'>mrv_max1</a>(f,g,exps,x)</tt>	Computes the maximum of two sets of expressions f and g which are in the same comparability class i.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/gruntz.py#L352'>sign</a>(e,x)</tt>	Returns a sign of an expression e x for x->oo.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/gruntz.py#L409'>limitinf</a>(e,x)</tt>	Limit e x for x-> oo.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/gruntz.py#L457'>calculate_series</a>(e,x,logx)</tt>	Calculates at least one term of the series of "e" in "x".
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/gruntz.py#L478'>mrv_leadterm</a>(e,x)</tt>	Returns c0 e0 for e.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/gruntz.py#L517'>build_expression_tree</a>(Omega,rewrites)</tt>	Helper function for rewrite.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/gruntz.py#L554'>rewrite</a>(e,Omega,x,wsym)</tt>	E x the function.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/gruntz.py#L628'>gruntz</a>(e,z,z0,dir)</tt>	Compute the limit of e z at the point z0 using the gruntz algorithm.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/fourier.py#L19'>fourier_cos_seq</a>(func,limits,n)</tt>	Returns the cos sequence in a fourier series.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/fourier.py#L30'>fourier_sin_seq</a>(func,limits,n)</tt>	Returns the sin sequence in a fourier series.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/fourier.py#L39'>_process_limits</a>(func,limits)</tt>	Limits should be of the form x start stop.
<tt style='background-color:#E8E8E8;'> series.FourierSeries <a href=' /series/fourier.py#L156'>truncate</a>(n)</tt>	Return the first n nonzero terms of the series.
<tt style='background-color:#E8E8E8;'> series.FourierSeries <a href=' /series/fourier.py#L198'>sigma_approximation</a>(n)</tt>	Return :math \sigma-approximation of fourier series with respect to order n.
<tt style='background-color:#E8E8E8;'> series.FourierSeries <a href=' /series/fourier.py#L263'>shift</a>(s)</tt>	Shift the function by a term independent of x.
<tt style='background-color:#E8E8E8;'> series.FourierSeries <a href=' /series/fourier.py#L290'>shiftx</a>(s)</tt>	Shift x by a term independent of x.
<tt style='background-color:#E8E8E8;'> series.FourierSeries <a href=' /series/fourier.py#L318'>scale</a>(s)</tt>	Scale the function by a term independent of x.
<tt style='background-color:#E8E8E8;'> series.FourierSeries <a href=' /series/fourier.py#L347'>scalex</a>(s)</tt>	Scale x by a term independent of x.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/fourier.py#L411'>fourier_series</a>(f,limits)</tt>	Computes fourier sine/cosine series expansion.
<tt style='background-color:#E8E8E8;'> series.Order <a href=' /series/order.py#L326'>contains</a>(expr)</tt>	Return true if expr belongs to order(self expr \*self variables).
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/residues.py#L12'>residue</a>(expr,x,x0)</tt>	Finds the residue of expr at the point x=x0.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/kauers.py#L4'>finite_diff</a>(expression,variable,increment)</tt>	Takes as input a polynomial expression and the variable used to construct it and returns the difference between function's value when the input is.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/kauers.py#L31'>finite_diff_kauers</a>(sum)</tt>	Takes as input a sum instance and returns the difference between the sum with the upper index incremented by 1 and the original sum.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/series.py#L6'>series</a>(expr,x,x0,n)</tt>	Series expansion of expr around point x = x0.
<tt style='background-color:#E8E8E8;'> series. <a href=' /series/limits.py#L16'>limit</a>(e,z,z0,dir)</tt>	Compute the limit of e z at the point z0.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/str.py#L771'>sstr</a>(expr)</tt>	Returns the expression as a string.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/str.py#L799'>sstrrepr</a>(expr)</tt>	Return expr in mixed str/repr form i.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/precedence.py#L113'>precedence</a>(item)</tt>	Returns the precedence of a given object.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/precedence.py#L132'>precedence_traditional</a>(item)</tt>	Returns the precedence of a given object according to the traditional rules of mathematics.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/cxxcode.py#L126'>cxxcode</a>(expr,assign_to,standard)</tt>	C++ equivalent of :func sympy ccode.
<tt style='background-color:#E8E8E8;'> printing.LatexPrinter <a href=' /printing/latex.py#L187'>_needs_brackets</a>(expr)</tt>	Returns true if the expression needs to be wrapped in brackets when printed false otherwise.
<tt style='background-color:#E8E8E8;'> printing.LatexPrinter <a href=' /printing/latex.py#L197'>_needs_function_brackets</a>(expr)</tt>	Returns true if the expression needs to be wrapped in brackets when passed as an argument to a function false otherwise.
<tt style='background-color:#E8E8E8;'> printing.LatexPrinter <a href=' /printing/latex.py#L220'>_needs_mul_brackets</a>(expr,first,last)</tt>	Returns true if the expression needs to be wrapped in brackets when printed as part of a mul false otherwise.
<tt style='background-color:#E8E8E8;'> printing.LatexPrinter <a href=' /printing/latex.py#L249'>_needs_add_brackets</a>(expr)</tt>	Returns true if the expression needs to be wrapped in brackets when printed as part of an add false otherwise.
<tt style='background-color:#E8E8E8;'> printing.LatexPrinter <a href=' /printing/latex.py#L659'>_hprint_Function</a>(func)</tt>	Logic to decide how to render a function to latex.
<tt style='background-color:#E8E8E8;'> printing.LatexPrinter <a href=' /printing/latex.py#L677'>_print_Function</a>(expr,exp)</tt>	Render functions to latex handling functions that latex knows about e.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/latex.py#L2000'>translate</a>(s)</tt>	Check for a modifier ending the string if present convert the.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/latex.py#L2029'>latex</a>(expr)</tt>	Convert the given expression to latex representation.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/latex.py#L2157'>print_latex</a>(expr)</tt>	Prints latex representation of the given expression.
<tt style='background-color:#E8E8E8;'> printing.Printer <a href=' /printing/printer.py#L217'>set_global_settings</a>(cls)</tt>	Set system-wide printing settings.
<tt style='background-color:#E8E8E8;'> printing.Printer <a href=' /printing/printer.py#L231'>doprint</a>(expr)</tt>	Returns printer's representation for expr as a string.
<tt style='background-color:#E8E8E8;'> printing.Printer <a href=' /printing/printer.py#L235'>_print</a>(expr)</tt>	Internal dispatcher tries the following concepts to print an expression.
<tt style='background-color:#E8E8E8;'> printing.Printer <a href=' /printing/printer.py#L263'>_as_ordered_terms</a>(expr,order)</tt>	A compatibility function for ordering terms in add.
<tt style='background-color:#E8E8E8;'> printing.JuliaCodePrinter <a href=' /printing/julia.py#L455'>indent_code</a>(code)</tt>	Accepts a string of code or a list of code lines.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/julia.py#L487'>julia_code</a>(expr,assign_to)</tt>	Converts expr to a string of julia code.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/julia.py#L624'>print_julia_code</a>(expr)</tt>	Prints the julia representation of the given expression.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/dot.py#L15'>purestr</a>(x)</tt>	A string that follows obj = type obj (*obj args) exactly.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/dot.py#L28'>styleof</a>(expr,styles)</tt>	Merge style dictionaries in order >>> from sympy import symbol basic expr.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/dot.py#L49'>attrprint</a>(d,delimiter)</tt>	Print a dictionary of attributes >>> from sympy.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/dot.py#L58'>dotnode</a>(expr,styles,labelfunc,pos)</tt>	String defining a node >>> from sympy.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/dot.py#L79'>dotedges</a>(expr,atom,pos,repeat)</tt>	List of strings for all expr->expr arg pairs.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/dot.py#L124'>dotprint</a>(expr,styles,atom,maxdepth)</tt>	Dot description of a sympy expression tree options are.
<tt style='background-color:#E8E8E8;'> printing.ReprPrinter <a href=' /printing/repr.py#L24'>reprify</a>(args,sep)</tt>	Prints each item in args and joins them with sep.
<tt style='background-color:#E8E8E8;'> printing.ReprPrinter <a href=' /printing/repr.py#L30'>emptyPrinter</a>(expr)</tt>	The fallback printer.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/repr.py#L198'>srepr</a>(expr)</tt>	Return expr in repr form.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/ccode.py#L71'>get_math_macros</a>()</tt>	Returns a dictionary with math-related macros from math h/cmath.
<tt style='background-color:#E8E8E8;'> printing.C89CodePrinter <a href=' /printing/ccode.py#L309'>indent_code</a>(code)</tt>	Accepts a string of code or a list of code lines.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/ccode.py#L436'>ccode</a>(expr,assign_to,standard)</tt>	Converts an expr to a string of c code parameters.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/ccode.py#L563'>print_ccode</a>(expr)</tt>	Prints c representation of the given expression.
<tt style='background-color:#E8E8E8;'> printing.LLVMJitCode <a href=' /printing/llvmjitcode.py#L173'>_create_args</a>(func_args)</tt>	Create types for function arguments.
<tt style='background-color:#E8E8E8;'> printing.LLVMJitCode <a href=' /printing/llvmjitcode.py#L179'>_create_function_base</a>()</tt>	Create function with name and type signature.
<tt style='background-color:#E8E8E8;'> printing.LLVMJitCode <a href=' /printing/llvmjitcode.py#L190'>_create_param_dict</a>(func_args)</tt>	Mapping of symbolic values to function arguments.
<tt style='background-color:#E8E8E8;'> printing.LLVMJitCode <a href=' /printing/llvmjitcode.py#L196'>_create_function</a>(expr)</tt>	Create function body and return llvm ir.
<tt style='background-color:#E8E8E8;'> printing.LLVMJitCodeCallback <a href=' /printing/llvmjitcode.py#L303'>_create_function</a>(expr)</tt>	Create function body and return llvm ir.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/llvmjitcode.py#L341'>_llvm_jit_code</a>(args,expr,signature,callback_type)</tt>	Create a native code function from a sympy expression.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/llvmjitcode.py#L359'>llvm_callable</a>(args,expr,callback_type)</tt>	Compile function from a sympy expression expressions are evaluated using double precision arithmetic.
<tt style='background-color:#E8E8E8;'> printing.MCodePrinter <a href=' /printing/mathematica.py#L54'>__init__</a>(settings)</tt>	Register function mappings supplied by user.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/mathematica.py#L116'>mathematica_code</a>(expr)</tt>	Converts an expr to a string of the wolfram mathematica code examples.
<tt style='background-color:#E8E8E8;'> printing.RustCodePrinter <a href=' /printing/rust.py#L287'>_print_Function</a>(expr)</tt>	Basic function for printing function function style :.
<tt style='background-color:#E8E8E8;'> printing.RustCodePrinter <a href=' /printing/rust.py#L482'>indent_code</a>(code)</tt>	Accepts a string of code or a list of code lines.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/rust.py#L511'>rust_code</a>(expr,assign_to)</tt>	Converts an expr to a string of rust code parameters.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/rust.py#L623'>print_rust_code</a>(expr)</tt>	Prints rust representation of the given expression.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/python.py#L48'>python</a>(expr)</tt>	Return python interpretation of passed expression.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/python.py#L90'>print_python</a>(expr)</tt>	Print output of python() function.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/conventions.py#L14'>split_super_sub</a>(text)</tt>	Split a symbol name into a name superscripts and subscripts the first part of the symbol name is considered to be its actual.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/conventions.py#L71'>requires_partial</a>(expr)</tt>	Return whether a partial derivative symbol is required for printing this requires checking how many free variables there are.
<tt style='background-color:#E8E8E8;'> printing.JavascriptCodePrinter <a href=' /printing/jscode.py#L166'>indent_code</a>(code)</tt>	Accepts a string of code or a list of code lines.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/jscode.py#L195'>jscode</a>(expr,assign_to)</tt>	Converts an expr to a string of javascript code parameters.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/jscode.py#L303'>print_jscode</a>(expr)</tt>	Prints the javascript representation of the given expression.
<tt style='background-color:#E8E8E8;'> printing.RCodePrinter <a href=' /printing/rcode.py#L123'>_get_loop_opening_ending</a>(indices)</tt>	Returns a tuple (open_lines close_lines) containing lists of codelines.
<tt style='background-color:#E8E8E8;'> printing.RCodePrinter <a href=' /printing/rcode.py#L271'>indent_code</a>(code)</tt>	Accepts a string of code or a list of code lines.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/rcode.py#L300'>rcode</a>(expr,assign_to)</tt>	Converts an expr to a string of r code parameters.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/rcode.py#L410'>print_rcode</a>(expr)</tt>	Prints r representation of the given expression.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/preview.py#L23'>preview</a>(expr,output,viewer,euler)</tt>	View expression or latex markup in png dvi postscript or pdf form.
<tt style='background-color:#E8E8E8;'> printing.MathMLPrinter <a href=' /printing/mathml.py#L34'>doprint</a>(expr)</tt>	Prints the expression as mathml.
<tt style='background-color:#E8E8E8;'> printing.MathMLPrinter <a href=' /printing/mathml.py#L44'>mathml_tag</a>(e)</tt>	Returns the mathml tag for an expression.
<tt style='background-color:#E8E8E8;'> printing.MathMLPrinter <a href=' /printing/mathml.py#L195'>_print_GoldenRatio</a>(e)</tt>	We use unicode #x3c6 for greek letter phi as defined here http //www.
<tt style='background-color:#E8E8E8;'> printing.MathMLPrinter <a href=' /printing/mathml.py#L377'>_print_list</a>(seq)</tt>	Mathml reference for the <list> element http //www.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/mathml.py#L442'>mathml</a>(expr)</tt>	Returns the mathml representation of expr.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/mathml.py#L447'>print_mathml</a>(expr)</tt>	Prints a pretty representation of the mathml code for expr examples.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/gtk.py#L8'>print_gtk</a>(x,start_viewer)</tt>	Print to gtkmathview a gtk widget capable of rendering mathml.
<tt style='background-color:#E8E8E8;'> printing.TensorflowPrinter <a href=' /printing/lambdarepr.py#L97'>_print_And</a>(expr)</tt>	Logical and printer.
<tt style='background-color:#E8E8E8;'> printing.TensorflowPrinter <a href=' /printing/lambdarepr.py#L104'>_print_Or</a>(expr)</tt>	Logical or printer.
<tt style='background-color:#E8E8E8;'> printing.TensorflowPrinter <a href=' /printing/lambdarepr.py#L111'>_print_Not</a>(expr)</tt>	Logical not printer.
<tt style='background-color:#E8E8E8;'> printing.TensorflowPrinter <a href=' /printing/lambdarepr.py#L150'>_print_Relational</a>(expr)</tt>	Relational printer for equality and unequality.
<tt style='background-color:#E8E8E8;'> printing.NumPyPrinter <a href=' /printing/lambdarepr.py#L179'>_print_seq</a>(seq,delimiter)</tt>	General sequence printer converts to tuple.
<tt style='background-color:#E8E8E8;'> printing.NumPyPrinter <a href=' /printing/lambdarepr.py#L185'>_print_MatMul</a>(expr)</tt>	Matrix multiplication printer.
<tt style='background-color:#E8E8E8;'> printing.NumPyPrinter <a href=' /printing/lambdarepr.py#L200'>_print_Piecewise</a>(expr)</tt>	Piecewise function printer.
<tt style='background-color:#E8E8E8;'> printing.NumPyPrinter <a href=' /printing/lambdarepr.py#L210'>_print_Relational</a>(expr)</tt>	Relational printer for equality and unequality.
<tt style='background-color:#E8E8E8;'> printing.NumPyPrinter <a href=' /printing/lambdarepr.py#L228'>_print_And</a>(expr)</tt>	Logical and printer.
<tt style='background-color:#E8E8E8;'> printing.NumPyPrinter <a href=' /printing/lambdarepr.py#L235'>_print_Or</a>(expr)</tt>	Logical or printer.
<tt style='background-color:#E8E8E8;'> printing.NumPyPrinter <a href=' /printing/lambdarepr.py#L242'>_print_Not</a>(expr)</tt>	Logical not printer.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/lambdarepr.py#L384'>lambdarepr</a>(expr)</tt>	Returns a string usable for lambdifying.
<tt style='background-color:#E8E8E8;'> printing.OctaveCodePrinter <a href=' /printing/octave.py#L484'>indent_code</a>(code)</tt>	Accepts a string of code or a list of code lines.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/octave.py#L516'>octave_code</a>(expr,assign_to)</tt>	Converts expr to a string of octave or matlab code.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/octave.py#L655'>print_octave_code</a>(expr)</tt>	Prints the octave or matlab representation of the given expression.
<tt style='background-color:#E8E8E8;'> printing.FCodePrinter <a href=' /printing/fcode.py#L318'>_wrap_fortran</a>(lines)</tt>	Wrap long fortran lines argument.
<tt style='background-color:#E8E8E8;'> printing.FCodePrinter <a href=' /printing/fcode.py#L389'>indent_code</a>(code)</tt>	Accepts a string of code or a list of code lines.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/fcode.py#L440'>fcode</a>(expr,assign_to)</tt>	Converts an expr to a string of c code parameters.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/fcode.py#L554'>print_fcode</a>(expr)</tt>	Prints the fortran representation of the given expression.
<tt style='background-color:#E8E8E8;'> printing.CodePrinter <a href=' /printing/codeprinter.py#L46'>doprint</a>(expr,assign_to)</tt>	Print the expression as code.
<tt style='background-color:#E8E8E8;'> printing.CodePrinter <a href=' /printing/codeprinter.py#L220'>_rate_index_position</a>(p)</tt>	Function to calculate score based on position among indices this method is used to sort loops in an optimized order see.
<tt style='background-color:#E8E8E8;'> printing.CodePrinter <a href=' /printing/codeprinter.py#L229'>_get_statement</a>(codestring)</tt>	Formats a codestring with the proper line ending.
<tt style='background-color:#E8E8E8;'> printing.CodePrinter <a href=' /printing/codeprinter.py#L234'>_get_comment</a>(text)</tt>	Formats a text string as a comment.
<tt style='background-color:#E8E8E8;'> printing.CodePrinter <a href=' /printing/codeprinter.py#L239'>_declare_number_const</a>(name,value)</tt>	Declare a numeric constant at the top of a function.
<tt style='background-color:#E8E8E8;'> printing.CodePrinter <a href=' /printing/codeprinter.py#L244'>_format_code</a>(lines)</tt>	Take in a list of lines of code and format them accordingly.
<tt style='background-color:#E8E8E8;'> printing.CodePrinter <a href=' /printing/codeprinter.py#L251'>_get_loop_opening_ending</a>(indices)</tt>	Returns a tuple (open_lines close_lines) containing lists.
<tt style='background-color:#E8E8E8;'> printing.TableForm <a href=' /printing/tableform.py#L35'>__init__</a>(data)</tt>	Creates a tableform.
<tt style='background-color:#E8E8E8;'> printing.TableForm <a href=' /printing/tableform.py#L213'>as_matrix</a>()</tt>	Returns the data of the table in matrix form.
<tt style='background-color:#E8E8E8;'> printing.TableForm <a href=' /printing/tableform.py#L244'>_sympystr</a>(p)</tt>	Returns the string representation of 'self'.
<tt style='background-color:#E8E8E8;'> printing.TableForm <a href=' /printing/tableform.py#L319'>_latex</a>(printer)</tt>	Returns the string representation of 'self'.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/tree.py#L4'>pprint_nodes</a>(subtrees)</tt>	Prettyprints systems of nodes.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/tree.py#L39'>print_node</a>(node)</tt>	Returns information about the "node".
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/tree.py#L56'>tree</a>(node)</tt>	Returns a tree representation of "node" as a string.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/tree.py#L71'>print_tree</a>(node)</tt>	Prints a tree representation of "node".
<tt style='background-color:#E8E8E8;'> printing.TheanoPrinter <a href=' /printing/theanocode.py#L187'>doprint</a>(expr)</tt>	Returns printer's representation for expr as a string.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/theanocode.py#L199'>dim_handling</a>(inputs,dim,dims,broadcastables)</tt>	Handle various input types for dimensions in tensor_wrap.
<tt style='background-color:#E8E8E8;'> printing. <a href=' /printing/theanocode.py#L216'>theano_function</a>(inputs,outputs,dtypes,cache)</tt>	Create theano function from sympy expressions.
<tt style='background-color:#E8E8E8;'> printing.pretty.stringPict <a href=' /printing/pretty/stringpict.py#L28'>__init__</a>(s,baseline)</tt>	Initialize from string.
<tt style='background-color:#E8E8E8;'> printing.pretty.stringPict <a href=' /printing/pretty/stringpict.py#L48'>height</a>()</tt>	The height of the picture in characters.
<tt style='background-color:#E8E8E8;'> printing.pretty.stringPict <a href=' /printing/pretty/stringpict.py#L52'>width</a>()</tt>	The width of the picture in characters.
<tt style='background-color:#E8E8E8;'> printing.pretty.stringPict <a href=' /printing/pretty/stringpict.py#L56'>next</a>()</tt>	Put a string of stringpicts next to each other.
<tt style='background-color:#E8E8E8;'> printing.pretty.stringPict <a href=' /printing/pretty/stringpict.py#L88'>right</a>()</tt>	Put pictures next to this one.
<tt style='background-color:#E8E8E8;'> printing.pretty.stringPict <a href=' /printing/pretty/stringpict.py#L105'>left</a>()</tt>	Put pictures left to right at left.
<tt style='background-color:#E8E8E8;'> printing.pretty.stringPict <a href=' /printing/pretty/stringpict.py#L111'>stack</a>()</tt>	Put pictures on top of each other from top to bottom.
<tt style='background-color:#E8E8E8;'> printing.pretty.stringPict <a href=' /printing/pretty/stringpict.py#L150'>below</a>()</tt>	Put pictures under this picture.
<tt style='background-color:#E8E8E8;'> printing.pretty.stringPict <a href=' /printing/pretty/stringpict.py#L169'>above</a>()</tt>	Put pictures above this picture.
<tt style='background-color:#E8E8E8;'> printing.pretty.stringPict <a href=' /printing/pretty/stringpict.py#L178'>parens</a>(left,right,ifascii_nougly)</tt>	Put parentheses around self.
<tt style='background-color:#E8E8E8;'> printing.pretty.stringPict <a href=' /printing/pretty/stringpict.py#L204'>leftslash</a>()</tt>	Precede object by a slash of the proper size.
<tt style='background-color:#E8E8E8;'> printing.pretty.stringPict <a href=' /printing/pretty/stringpict.py#L217'>root</a>(n)</tt>	Produce a nice root symbol.
<tt style='background-color:#E8E8E8;'> printing.pretty.stringPict <a href=' /printing/pretty/stringpict.py#L251'>render</a>()</tt>	Return the string form of self.
<tt style='background-color:#E8E8E8;'> printing.pretty.stringPict <a href=' /printing/pretty/stringpict.py#L301'>terminal_width</a>()</tt>	Return the terminal width if possible otherwise return 0.
<tt style='background-color:#E8E8E8;'> printing.pretty.prettyForm <a href=' /printing/pretty/stringpict.py#L381'>__init__</a>(s,baseline,binding,unicode)</tt>	Initialize from stringpict and binding power.
<tt style='background-color:#E8E8E8;'> printing.pretty.prettyForm <a href=' /printing/pretty/stringpict.py#L389'>__add__</a>()</tt>	Make a pretty addition.
<tt style='background-color:#E8E8E8;'> printing.pretty.prettyForm <a href=' /printing/pretty/stringpict.py#L407'>__div__</a>(den,slashed)</tt>	Make a pretty division stacked or slashed.
<tt style='background-color:#E8E8E8;'> printing.pretty.prettyForm <a href=' /printing/pretty/stringpict.py#L429'>__mul__</a>()</tt>	Make a pretty multiplication.
<tt style='background-color:#E8E8E8;'> printing.pretty.prettyForm <a href=' /printing/pretty/stringpict.py#L471'>__pow__</a>(b)</tt>	Make a pretty power.
<tt style='background-color:#E8E8E8;'> printing.pretty.prettyForm <a href=' /printing/pretty/stringpict.py#L503'>apply</a>(function)</tt>	Functions of one or more variables.
<tt style='background-color:#E8E8E8;'> printing.pretty.PrettyPrinter <a href=' /printing/pretty/pretty.py#L601'>_print_matrix_contents</a>(e)</tt>	This method factors out what is essentially grid printing.
<tt style='background-color:#E8E8E8;'> printing.pretty. <a href=' /printing/pretty/pretty.py#L2150'>pretty</a>(expr)</tt>	Returns a string containing the prettified form of expr.
<tt style='background-color:#E8E8E8;'> printing.pretty. <a href=' /printing/pretty/pretty.py#L2168'>pretty_print</a>(expr)</tt>	Prints expr in pretty form.
<tt style='background-color:#E8E8E8;'> printing.pretty. <a href=' /printing/pretty/pretty.py#L2201'>pager_print</a>(expr)</tt>	Prints expr using the pager in pretty form.
<tt style='background-color:#E8E8E8;'> printing.pretty. <a href=' /printing/pretty/pretty_symbology.py#L49'>pretty_use_unicode</a>(flag)</tt>	Set whether pretty-printer should use unicode by default.
<tt style='background-color:#E8E8E8;'> printing.pretty. <a href=' /printing/pretty/pretty_symbology.py#L75'>pretty_try_use_unicode</a>()</tt>	See if unicode output is available and leverage it if possible.
<tt style='background-color:#E8E8E8;'> printing.pretty. <a href=' /printing/pretty/pretty_symbology.py#L107'>xstr</a>()</tt>	Call str or unicode depending on current mode.
<tt style='background-color:#E8E8E8;'> printing.pretty. <a href=' /printing/pretty/pretty_symbology.py#L311'>xobj</a>(symb,length)</tt>	Construct spatial object of given length.
<tt style='background-color:#E8E8E8;'> printing.pretty. <a href=' /printing/pretty/pretty_symbology.py#L379'>vobj</a>(symb,height)</tt>	Construct vertical object of a given height.
<tt style='background-color:#E8E8E8;'> printing.pretty. <a href=' /printing/pretty/pretty_symbology.py#L387'>hobj</a>(symb,width)</tt>	Construct horizontal object of a given width.
<tt style='background-color:#E8E8E8;'> printing.pretty. <a href=' /printing/pretty/pretty_symbology.py#L454'>xsym</a>(sym)</tt>	Get symbology for a 'character'.
<tt style='background-color:#E8E8E8;'> printing.pretty. <a href=' /printing/pretty/pretty_symbology.py#L490'>pretty_atom</a>(atom_name,default)</tt>	Return pretty representation of an atom.
<tt style='background-color:#E8E8E8;'> printing.pretty. <a href=' /printing/pretty/pretty_symbology.py#L501'>pretty_symbol</a>(symb_name)</tt>	Return pretty representation of a symbol.
<tt style='background-color:#E8E8E8;'> printing.pretty. <a href=' /printing/pretty/pretty_symbology.py#L557'>annotated</a>(letter)</tt>	Return a stylised drawing of the letter letter, together with information on how to put annotations (super- and subscripts to the.
<tt style='background-color:#E8E8E8;'> assumptions. <a href=' /assumptions/refine.py#L7'>refine</a>(expr,assumptions)</tt>	Simplify an expression using assumptions.
<tt style='background-color:#E8E8E8;'> assumptions. <a href=' /assumptions/refine.py#L48'>refine_abs</a>(expr,assumptions)</tt>	Handler for the absolute value.
<tt style='background-color:#E8E8E8;'> assumptions. <a href=' /assumptions/refine.py#L75'>refine_Pow</a>(expr,assumptions)</tt>	Handler for instances of pow.
<tt style='background-color:#E8E8E8;'> assumptions. <a href=' /assumptions/refine.py#L173'>refine_atan2</a>(expr,assumptions)</tt>	Handler for the atan2 function examples.
<tt style='background-color:#E8E8E8;'> assumptions. <a href=' /assumptions/refine.py#L219'>refine_Relational</a>(expr,assumptions)</tt>	Handler for relational >>> from sympy.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L71'>real</a>()</tt>	Real number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L128'>extended_real</a>()</tt>	Extended real predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L152'>imaginary</a>()</tt>	Imaginary number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L180'>complex</a>()</tt>	Complex number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L208'>algebraic</a>()</tt>	Algebraic number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L235'>transcendental</a>()</tt>	Transcedental number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L272'>rational</a>()</tt>	Rational number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L299'>irrational</a>()</tt>	Irrational number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L359'>bounded</a>()</tt>	See documentation of q finite.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L367'>infinite</a>()</tt>	Infinite number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L379'>infinity</a>()</tt>	See documentation of q infinite.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L387'>infinitesimal</a>()</tt>	See documentation of q zero.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L395'>positive</a>()</tt>	Positive real number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L433'>negative</a>()</tt>	Negative number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L471'>zero</a>()</tt>	Zero number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L497'>nonzero</a>()</tt>	Nonzero real number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L537'>nonpositive</a>()</tt>	Nonpositive real number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L570'>nonnegative</a>()</tt>	Nonnegative real number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L603'>even</a>()</tt>	Even number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L627'>odd</a>()</tt>	Odd number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L650'>prime</a>()</tt>	Prime number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L677'>composite</a>()</tt>	Composite number predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L732'>symmetric</a>()</tt>	Symmetric matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L765'>invertible</a>()</tt>	Invertible matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L795'>orthogonal</a>()</tt>	Orthogonal matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L830'>unitary</a>()</tt>	Unitary matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L862'>positive_definite</a>()</tt>	Positive definite matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L894'>upper_triangular</a>()</tt>	Upper triangular matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L919'>lower_triangular</a>()</tt>	Lower triangular matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L943'>diagonal</a>()</tt>	Diagonal matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L971'>fullrank</a>()</tt>	Fullrank matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L996'>square</a>()</tt>	Square matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L1027'>integer_elements</a>()</tt>	Integer elements matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L1046'>real_elements</a>()</tt>	Real elements matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L1065'>complex_elements</a>()</tt>	Complex elements matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L1086'>singular</a>()</tt>	Singular matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L1111'>normal</a>()</tt>	Normal matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L1134'>triangular</a>()</tt>	Triangular matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionKeys <a href=' /assumptions/ask.py#L1159'>unit_triangular</a>()</tt>	Unit triangular matrix predicate.
<tt style='background-color:#E8E8E8;'> assumptions. <a href=' /assumptions/ask.py#L1181'>_extract_facts</a>(expr,symbol,check_reversed_rel)</tt>	Helper for ask().
<tt style='background-color:#E8E8E8;'> assumptions. <a href=' /assumptions/ask.py#L1214'>ask</a>(proposition,assumptions,context)</tt>	Method for inferring properties about objects.
<tt style='background-color:#E8E8E8;'> assumptions. <a href=' /assumptions/ask.py#L1311'>ask_full_inference</a>(proposition,assumptions,known_facts_cnf)</tt>	Method for inferring properties about objects.
<tt style='background-color:#E8E8E8;'> assumptions. <a href=' /assumptions/ask.py#L1323'>register_handler</a>(key,handler)</tt>	Register a handler in the ask system key must be a string and handler a.
<tt style='background-color:#E8E8E8;'> assumptions. <a href=' /assumptions/ask.py#L1349'>remove_handler</a>(key,handler)</tt>	Removes a handler from the ask system same syntax as register_handler.
<tt style='background-color:#E8E8E8;'> assumptions. <a href=' /assumptions/ask.py#L1368'>compute_known_facts</a>(known_facts,known_facts_keys)</tt>	Compute the various forms of knowledge compilation used by the assumptions system.
<tt style='background-color:#E8E8E8;'> assumptions. <a href=' /assumptions/sathandlers.py#L221'>evaluate_old_assump</a>(pred)</tt>	Replace assumptions of expressions replaced with their values in the old assumptions (like q.
<tt style='background-color:#E8E8E8;'> assumptions.AssumptionsContext <a href=' /assumptions/assume.py#L36'>add</a>()</tt>	Add an assumption.
<tt style='background-color:#E8E8E8;'> assumptions.AppliedPredicate <a href=' /assumptions/assume.py#L73'>arg</a>()</tt>	Return the expression used by this assumption.
<tt style='background-color:#E8E8E8;'> assumptions.Predicate <a href=' /assumptions/assume.py#L167'>eval</a>(expr,assumptions)</tt>	Evaluate self expr under the given assumptions.
<tt style='background-color:#E8E8E8;'> assumptions. <a href=' /assumptions/assume.py#L200'>assuming</a>()</tt>	Context manager for assumptions examples.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskCommutativeHandler <a href=' /assumptions/handlers/common.py#L30'>Symbol</a>(expr,assumptions)</tt>	Objects are expected to be commutative unless otherwise stated.
<tt style='background-color:#E8E8E8;'> assumptions.handlers. <a href=' /assumptions/handlers/common.py#L114'>test_closed_group</a>(expr,assumptions,key)</tt>	Test for membership in a group with respect.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskFiniteHandler <a href=' /assumptions/handlers/calculus.py#L55'>Add</a>(expr,assumptions)</tt>	Return true if expr is bounded false if not and none if unknown.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskFiniteHandler <a href=' /assumptions/handlers/calculus.py#L141'>Mul</a>(expr,assumptions)</tt>	Return true if expr is bounded false if not and none if unknown.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskFiniteHandler <a href=' /assumptions/handlers/calculus.py#L197'>Pow</a>(expr,assumptions)</tt>	Unbounded ** nonzero -> unbounded.
<tt style='background-color:#E8E8E8;'> assumptions.handlers. <a href=' /assumptions/handlers/matrices.py#L430'>BM_elements</a>(predicate,expr,assumptions)</tt>	Block matrix elements.
<tt style='background-color:#E8E8E8;'> assumptions.handlers. <a href=' /assumptions/handlers/matrices.py#L434'>MS_elements</a>(predicate,expr,assumptions)</tt>	Matrix slice elements.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskPrimeHandler <a href=' /assumptions/handlers/ntheory.py#L54'>Pow</a>(expr,assumptions)</tt>	Integer**integer -> !prime.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskEvenHandler <a href=' /assumptions/handlers/ntheory.py#L130'>Mul</a>(expr,assumptions)</tt>	Even * integer -> even.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskEvenHandler <a href=' /assumptions/handlers/ntheory.py#L171'>Add</a>(expr,assumptions)</tt>	Even + odd -> odd.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskNegativeHandler <a href=' /assumptions/handlers/order.py#L57'>Add</a>(expr,assumptions)</tt>	Positive + positive -> positive.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskNegativeHandler <a href=' /assumptions/handlers/order.py#L97'>Pow</a>(expr,assumptions)</tt>	Real ** even -> nonnegative.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskIntegerHandler <a href=' /assumptions/handlers/sets.py#L34'>Add</a>(expr,assumptions)</tt>	Integer + integer -> integer.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskIntegerHandler <a href=' /assumptions/handlers/sets.py#L45'>Mul</a>(expr,assumptions)</tt>	Integer*integer -> integer.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskRationalHandler <a href=' /assumptions/handlers/sets.py#L108'>Add</a>(expr,assumptions)</tt>	Rational + rational -> rational.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskRationalHandler <a href=' /assumptions/handlers/sets.py#L122'>Pow</a>(expr,assumptions)</tt>	Rational ** integer -> rational.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskRealHandler <a href=' /assumptions/handlers/sets.py#L202'>Add</a>(expr,assumptions)</tt>	Real + real -> real.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskRealHandler <a href=' /assumptions/handlers/sets.py#L212'>Mul</a>(expr,assumptions)</tt>	Real*real -> real.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskRealHandler <a href=' /assumptions/handlers/sets.py#L232'>Pow</a>(expr,assumptions)</tt>	Real**integer -> real positive**real -> real.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskHermitianHandler <a href=' /assumptions/handlers/sets.py#L337'>Add</a>(expr,assumptions)</tt>	Hermitian + hermitian -> hermitian.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskHermitianHandler <a href=' /assumptions/handlers/sets.py#L347'>Mul</a>(expr,assumptions)</tt>	As long as there is at most only one noncommutative term.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskHermitianHandler <a href=' /assumptions/handlers/sets.py#L371'>Pow</a>(expr,assumptions)</tt>	Hermitian**integer -> hermitian.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskImaginaryHandler <a href=' /assumptions/handlers/sets.py#L439'>Add</a>(expr,assumptions)</tt>	Imaginary + imaginary -> imaginary.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskImaginaryHandler <a href=' /assumptions/handlers/sets.py#L464'>Mul</a>(expr,assumptions)</tt>	Real*imaginary -> imaginary.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskImaginaryHandler <a href=' /assumptions/handlers/sets.py#L484'>Pow</a>(expr,assumptions)</tt>	Imaginary**odd -> imaginary.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskAntiHermitianHandler <a href=' /assumptions/handlers/sets.py#L573'>Add</a>(expr,assumptions)</tt>	Antihermitian + antihermitian -> antihermitian.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskAntiHermitianHandler <a href=' /assumptions/handlers/sets.py#L583'>Mul</a>(expr,assumptions)</tt>	As long as there is at most only one noncommutative term.
<tt style='background-color:#E8E8E8;'> assumptions.handlers.AskAntiHermitianHandler <a href=' /assumptions/handlers/sets.py#L607'>Pow</a>(expr,assumptions)</tt>	Hermitian**integer -> !antihermitian.
<tt style='background-color:#E8E8E8;'> diffgeom.CoordSystem <a href=' /diffgeom/diffgeom.py#L216'>connect_to</a>(to_sys,from_coords,to_exprs,inverse)</tt>	Register the transformation used to switch to another coordinate system.
<tt style='background-color:#E8E8E8;'> diffgeom.CoordSystem <a href=' /diffgeom/diffgeom.py#L264'>coord_tuple_transform_to</a>(to_sys,coords)</tt>	Transform coords to coord system to_sys.
<tt style='background-color:#E8E8E8;'> diffgeom.CoordSystem <a href=' /diffgeom/diffgeom.py#L274'>jacobian</a>(to_sys,coords)</tt>	Return the jacobian matrix of a transformation.
<tt style='background-color:#E8E8E8;'> diffgeom.CoordSystem <a href=' /diffgeom/diffgeom.py#L284'>coord_function</a>(coord_index)</tt>	Return a basescalarfield that takes a point and returns one of the coords.
<tt style='background-color:#E8E8E8;'> diffgeom.CoordSystem <a href=' /diffgeom/diffgeom.py#L292'>coord_functions</a>()</tt>	Returns a list of all coordinate functions.
<tt style='background-color:#E8E8E8;'> diffgeom.CoordSystem <a href=' /diffgeom/diffgeom.py#L298'>base_vector</a>(coord_index)</tt>	Return a basis vector field.
<tt style='background-color:#E8E8E8;'> diffgeom.CoordSystem <a href=' /diffgeom/diffgeom.py#L307'>base_vectors</a>()</tt>	Returns a list of all base vectors.
<tt style='background-color:#E8E8E8;'> diffgeom.CoordSystem <a href=' /diffgeom/diffgeom.py#L313'>base_oneform</a>(coord_index)</tt>	Return a basis 1-form field.
<tt style='background-color:#E8E8E8;'> diffgeom.CoordSystem <a href=' /diffgeom/diffgeom.py#L322'>base_oneforms</a>()</tt>	Returns a list of all base oneforms.
<tt style='background-color:#E8E8E8;'> diffgeom.CoordSystem <a href=' /diffgeom/diffgeom.py#L332'>point</a>(coords)</tt>	Create a point with coordinates given in this coord system.
<tt style='background-color:#E8E8E8;'> diffgeom.CoordSystem <a href=' /diffgeom/diffgeom.py#L338'>point_to_coords</a>(point)</tt>	Calculate the coordinates of a point in this coord system.
<tt style='background-color:#E8E8E8;'> diffgeom.Point <a href=' /diffgeom/diffgeom.py#L397'>coords</a>(to_sys)</tt>	Coordinates of the point in a given coordinate system.
<tt style='background-color:#E8E8E8;'> diffgeom.BaseScalarField <a href=' /diffgeom/diffgeom.py#L474'>__call__</a>()</tt>	Evaluating the field at a point or doing nothing.
<tt style='background-color:#E8E8E8;'> diffgeom.BaseVectorField <a href=' /diffgeom/diffgeom.py#L566'>__call__</a>(scalar_field)</tt>	Apply on a scalar field.
<tt style='background-color:#E8E8E8;'> diffgeom.Commutator <a href=' /diffgeom/diffgeom.py#L667'>__call__</a>(scalar_field)</tt>	Apply on a scalar field.
<tt style='background-color:#E8E8E8;'> diffgeom.Differential <a href=' /diffgeom/diffgeom.py#L740'>__call__</a>()</tt>	Apply on a list of vector_fields.
<tt style='background-color:#E8E8E8;'> diffgeom.TensorProduct <a href=' /diffgeom/diffgeom.py#L851'>__call__</a>()</tt>	Apply on a list of vector_fields.
<tt style='background-color:#E8E8E8;'> diffgeom.WedgeProduct <a href=' /diffgeom/diffgeom.py#L909'>__call__</a>()</tt>	Apply on a list of vector_fields.
<tt style='background-color:#E8E8E8;'> diffgeom.BaseCovarDerivativeOp <a href=' /diffgeom/diffgeom.py#L1008'>__call__</a>(field)</tt>	Apply on a scalar field.
<tt style='background-color:#E8E8E8;'> diffgeom. <a href=' /diffgeom/diffgeom.py#L1094'>intcurve_series</a>(vector_field,param,start_point,n)</tt>	Return the series expansion for an integral curve of the field.
<tt style='background-color:#E8E8E8;'> diffgeom. <a href=' /diffgeom/diffgeom.py#L1210'>intcurve_diffequ</a>(vector_field,param,start_point,coord_sys)</tt>	Return the differential equation for an integral curve of the field.
<tt style='background-color:#E8E8E8;'> diffgeom. <a href=' /diffgeom/diffgeom.py#L1306'>contravariant_order</a>(expr,_strict)</tt>	Return the contravariant order of an expression.
<tt style='background-color:#E8E8E8;'> diffgeom. <a href=' /diffgeom/diffgeom.py#L1349'>covariant_order</a>(expr,_strict)</tt>	Return the covariant order of an expression.
<tt style='background-color:#E8E8E8;'> diffgeom. <a href=' /diffgeom/diffgeom.py#L1397'>vectors_in_basis</a>(expr,to_sys)</tt>	Transform all base vectors in base vectors of a specified coord basis.
<tt style='background-color:#E8E8E8;'> diffgeom. <a href=' /diffgeom/diffgeom.py#L1426'>twoform_to_matrix</a>(expr)</tt>	Return the matrix representing the twoform.
<tt style='background-color:#E8E8E8;'> diffgeom. <a href=' /diffgeom/diffgeom.py#L1468'>metric_to_Christoffel_1st</a>(expr)</tt>	Return the nested list of christoffel symbols for the given metric.
<tt style='background-color:#E8E8E8;'> diffgeom. <a href=' /diffgeom/diffgeom.py#L1501'>metric_to_Christoffel_2nd</a>(expr)</tt>	Return the nested list of christoffel symbols for the given metric.
<tt style='background-color:#E8E8E8;'> diffgeom. <a href=' /diffgeom/diffgeom.py#L1540'>metric_to_Riemann_components</a>(expr)</tt>	Return the components of the riemann tensor expressed in a given basis.
<tt style='background-color:#E8E8E8;'> diffgeom. <a href=' /diffgeom/diffgeom.py#L1594'>metric_to_Ricci_components</a>(expr)</tt>	Return the components of the ricci tensor expressed in a given basis.
<tt style='background-color:#E8E8E8;'> benchmarks. <a href=' /benchmarks/bench_symbench.py#L18'>bench_R2</a>()</tt>	Hermite polynomial hermite 15 y.
<tt style='background-color:#E8E8E8;'> benchmarks. <a href=' /benchmarks/bench_symbench.py#L30'>bench_R3</a>()</tt>	A = [bool(f==f) for _ in range 10 ].
<tt style='background-color:#E8E8E8;'> benchmarks. <a href=' /benchmarks/bench_symbench.py#L41'>bench_R5</a>()</tt>	Blowup l 8 ; l=uniq l.
<tt style='background-color:#E8E8E8;'> benchmarks. <a href=' /benchmarks/bench_symbench.py#L55'>bench_R6</a>()</tt>	Sum(simplify((x+sin i )/x+(x-sin i )/x) for i in range 100.
<tt style='background-color:#E8E8E8;'> benchmarks. <a href=' /benchmarks/bench_symbench.py#L60'>bench_R7</a>()</tt>	[f subs(x random()) for _ in range(10**4)].
<tt style='background-color:#E8E8E8;'> benchmarks. <a href=' /benchmarks/bench_symbench.py#L66'>bench_R8</a>()</tt>	Right(x^2 0 5 10^4).
<tt style='background-color:#E8E8E8;'> benchmarks. <a href=' /benchmarks/bench_symbench.py#L84'>_bench_R9</a>()</tt>	Factor(x^20 - pi^5*y^20).
<tt style='background-color:#E8E8E8;'> benchmarks. <a href=' /benchmarks/bench_symbench.py#L89'>bench_R10</a>()</tt>	V = [-pi -pi+1/10 ,pi].
<tt style='background-color:#E8E8E8;'> benchmarks. <a href=' /benchmarks/bench_symbench.py#L99'>bench_R11</a>()</tt>	A = [random() + random()*i for w in [0 1000]].
<tt style='background-color:#E8E8E8;'> benchmarks. <a href=' /benchmarks/bench_symbench.py#L104'>bench_S1</a>()</tt>	E= x+y+z+1 **7 f=e* e+1 ;f expand().
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L812'>parse_expr</a>(s,local_dict)</tt>	Converts the string "s" to a sympy expression in local_dict.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L21'>_token_splittable</a>(token)</tt>	Predicate for whether a token name can be split into multiple tokens.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L41'>_token_callable</a>(token,local_dict,global_dict,nextToken)</tt>	Predicate for whether a token name represents a callable function.
<tt style='background-color:#E8E8E8;'> parsing.AppliedFunction <a href=' /parsing/sympy_parser.py#L96'>expand</a>()</tt>	Return a list of tokens representing the function.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L170'>_apply_functions</a>(tokens,local_dict,global_dict)</tt>	Convert a name token + parenthesisgroup into an appliedfunction.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L195'>_implicit_multiplication</a>(tokens,local_dict,global_dict)</tt>	Implicitly adds '*' tokens.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L257'>_implicit_application</a>(tokens,local_dict,global_dict)</tt>	Adds parentheses as needed after functions.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L310'>function_exponentiation</a>(tokens,local_dict,global_dict)</tt>	Allows functions to be exponentiated e g cos**2 x.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L360'>split_symbols_custom</a>(predicate)</tt>	Creates a transformation that splits symbol names.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L430'>implicit_multiplication</a>(result,local_dict,global_dict)</tt>	Makes the multiplication operator optional in most cases.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L455'>implicit_application</a>(result,local_dict,global_dict)</tt>	Makes parentheses optional in some cases for function calls.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L480'>implicit_multiplication_application</a>(result,local_dict,global_dict)</tt>	Allows a slightly relaxed syntax.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L510'>auto_symbol</a>(tokens,local_dict,global_dict)</tt>	Inserts calls to symbol for undefined variables.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L552'>lambda_notation</a>(tokens,local_dict,global_dict)</tt>	Substitutes "lambda" with its sympy equivalent lambda().
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L589'>factorial_notation</a>(tokens,local_dict,global_dict)</tt>	Allows standard notation for factorial.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L615'>convert_xor</a>(tokens,local_dict,global_dict)</tt>	Treats xor ^, as exponentiation **.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L630'>auto_number</a>(tokens,local_dict,global_dict)</tt>	Converts numeric literals to use sympy equivalents.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L691'>rationalize</a>(tokens,local_dict,global_dict)</tt>	Converts floats into rational run after auto_number.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L710'>_transform_equals_sign</a>(tokens,local_dict,global_dict)</tt>	Transforms the equals sign = to instances of eq.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L739'>convert_equals_signs</a>(result,local_dict,global_dict)</tt>	Transforms all the equals signs = to instances of eq.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L782'>stringify_expr</a>(s,local_dict,global_dict,transformations)</tt>	Converts the string s to python code in local_dict generally parse_expr should be used.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L800'>eval_expr</a>(code,local_dict,global_dict)</tt>	Evaluate python code generated by stringify_expr.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L812'>parse_expr</a>(s,local_dict,transformations,global_dict)</tt>	Converts the string s to a sympy expression in local_dict parameters.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_parser.py#L897'>evaluateFalse</a>(s)</tt>	Replaces operators with the sympy equivalent and sets evaluate=false.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_tokenize.py#L172'>tokenize</a>(readline,tokeneater)</tt>	The tokenize() function accepts two parameters one representing the input stream and one providing an output mechanism for tokenize().
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_tokenize.py#L265'>untokenize</a>(iterable)</tt>	Transform tokens back into python source code.
<tt style='background-color:#E8E8E8;'> parsing. <a href=' /parsing/sympy_tokenize.py#L289'>generate_tokens</a>(readline)</tt>	The generate_tokens() generator requires one argment readline which must be a callable object which provides the same interface as the.
<tt style='background-color:#E8E8E8;'> stats.FiniteDensity <a href=' /stats/frv.py#L27'>__call__</a>(item)</tt>	Make instance of a class callable.
<tt style='background-color:#E8E8E8;'> stats.FiniteDensity <a href=' /stats/frv.py#L41'>dict</a>()</tt>	Return item as dictionary.
<tt style='background-color:#E8E8E8;'> stats.ConditionalFiniteDomain <a href=' /stats/frv.py#L139'>__new__</a>(cls,domain,condition)</tt>	Create a new instance of conditionalfinitedomain class.
<tt style='background-color:#E8E8E8;'> stats.ConditionalFiniteDomain <a href=' /stats/frv.py#L158'>_test</a>(elem)</tt>	Test the value if value is boolean return it if value is equality.
<tt style='background-color:#E8E8E8;'> stats.FinitePSpace <a href=' /stats/frv.py#L307'>sample</a>()</tt>	Internal sample method returns dictionary mapping randomsymbol to realization value.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/frv_types.py#L40'>FiniteRV</a>(name,density)</tt>	Create a finite random variable given a dict representing the density.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/frv_types.py#L79'>DiscreteUniform</a>(name,items)</tt>	Create a finite random variable representing a uniform distribution over the input set.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/frv_types.py#L137'>Die</a>(name,sides)</tt>	Create a finite random variable representing a fair die.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/frv_types.py#L166'>Bernoulli</a>(name,p,succ,fail)</tt>	Create a finite random variable representing a bernoulli process.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/frv_types.py#L187'>Coin</a>(name,p)</tt>	Create a finite random variable representing a coin toss.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/frv_types.py#L234'>Binomial</a>(name,n,p,succ)</tt>	Create a finite random variable representing a binomial distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/frv_types.py#L269'>Hypergeometric</a>(name,N,m,n)</tt>	Create a finite random variable representing a hypergeometric distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/frv_types.py#L295'>Rademacher</a>(name)</tt>	Create a finite random variable representing a rademacher distribution.
<tt style='background-color:#E8E8E8;'> stats.SingleDiscreteDistribution <a href=' /stats/drv.py#L30'>sample</a>()</tt>	A random realization from the distribution.
<tt style='background-color:#E8E8E8;'> stats.SingleDiscreteDistribution <a href=' /stats/drv.py#L35'>_inverse_cdf_expression</a>()</tt>	Inverse of the cdf.
<tt style='background-color:#E8E8E8;'> stats.SingleDiscreteDistribution <a href=' /stats/drv.py#L52'>compute_cdf</a>()</tt>	Compute the cdf from the pdf.
<tt style='background-color:#E8E8E8;'> stats.SingleDiscreteDistribution <a href=' /stats/drv.py#L68'>cdf</a>(x)</tt>	Cumulative density function.
<tt style='background-color:#E8E8E8;'> stats.SingleDiscreteDistribution <a href=' /stats/drv.py#L72'>expectation</a>(expr,var,evaluate)</tt>	Expectation of expression over distribution.
<tt style='background-color:#E8E8E8;'> stats.SingleDiscretePSpace <a href=' /stats/drv.py#L100'>sample</a>()</tt>	Internal sample method returns dictionary mapping randomsymbol to realization value.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/drv_types.py#L30'>Poisson</a>(name,lamda)</tt>	Create a discrete random variable with a poisson distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/drv_types.py#L90'>Geometric</a>(name,p)</tt>	Create a discrete random variable with a geometric distribution.
<tt style='background-color:#E8E8E8;'> stats.SingleContinuousDistribution <a href=' /stats/crv.py#L171'>sample</a>()</tt>	A random realization from the distribution.
<tt style='background-color:#E8E8E8;'> stats.SingleContinuousDistribution <a href=' /stats/crv.py#L176'>_inverse_cdf_expression</a>()</tt>	Inverse of the cdf.
<tt style='background-color:#E8E8E8;'> stats.SingleContinuousDistribution <a href=' /stats/crv.py#L195'>compute_cdf</a>()</tt>	Compute the cdf from the pdf.
<tt style='background-color:#E8E8E8;'> stats.SingleContinuousDistribution <a href=' /stats/crv.py#L211'>cdf</a>(x)</tt>	Cumulative density function.
<tt style='background-color:#E8E8E8;'> stats.SingleContinuousDistribution <a href=' /stats/crv.py#L215'>expectation</a>(expr,var,evaluate)</tt>	Expectation of expression over distribution.
<tt style='background-color:#E8E8E8;'> stats.SingleContinuousPSpace <a href=' /stats/crv.py#L361'>sample</a>()</tt>	Internal sample method returns dictionary mapping randomsymbol to realization value.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/error_prop.py#L11'>variance_prop</a>(expr,consts,include_covar)</tt>	Symbolically propagates variance (\sigma^2) for expressions.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L101'>ContinuousRV</a>(symbol,density,set)</tt>	Create a continuous random variable given the following -- a symbol.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L154'>Arcsin</a>(name,a,b)</tt>	Create a continuous random variable with an arcsin distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L216'>Benini</a>(name,alpha,beta,sigma)</tt>	Create a continuous random variable with a benini distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L294'>Beta</a>(name,alpha,beta)</tt>	Create a continuous random variable with a beta distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L364'>BetaPrime</a>(name,alpha,beta)</tt>	Create a continuous random variable with a beta prime distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L425'>Cauchy</a>(name,x0,gamma)</tt>	Create a continuous random variable with a cauchy distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L483'>Chi</a>(name,k)</tt>	Create a continuous random variable with a chi distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L541'>ChiNoncentral</a>(name,k,l)</tt>	Create a continuous random variable with a non-central chi distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L602'>ChiSquared</a>(name,k)</tt>	Create a continuous random variable with a chi-squared distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L665'>Dagum</a>(name,p,a,b)</tt>	Create a continuous random variable with a dagum distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L716'>Erlang</a>(name,k,l)</tt>	Create a continuous random variable with an erlang distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L802'>Exponential</a>(name,rate)</tt>	Create a continuous random variable with an exponential distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L883'>FDistribution</a>(name,d1,d2)</tt>	Create a continuous random variable with a f distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L952'>FisherZ</a>(name,d1,d2)</tt>	Create a continuous random variable with an fisher's z distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1025'>Frechet</a>(name,a,s,m)</tt>	Create a continuous random variable with a frechet distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1095'>Gamma</a>(name,k,theta)</tt>	Create a continuous random variable with a gamma distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1183'>GammaInverse</a>(name,a,b)</tt>	Create a continuous random variable with an inverse gamma distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1247'>Gumbel</a>(name,beta,mu)</tt>	Create a continuous random variable with gumbel distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1306'>Gompertz</a>(name,b,eta)</tt>	Create a continuous random variable with gompertz distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1368'>Kumaraswamy</a>(name,a,b)</tt>	Create a continuous random variable with a kumaraswamy distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1429'>Laplace</a>(name,mu,b)</tt>	Create a continuous random variable with a laplace distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1485'>Logistic</a>(name,mu,s)</tt>	Create a continuous random variable with a logistic distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1546'>LogNormal</a>(name,mean,std)</tt>	Create a continuous random variable with a log-normal distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1622'>Maxwell</a>(name,a)</tt>	Create a continuous random variable with a maxwell distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1688'>Nakagami</a>(name,mu,omega)</tt>	Create a continuous random variable with a nakagami distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1769'>Normal</a>(name,mean,std)</tt>	Create a continuous random variable with a normal distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1859'>Pareto</a>(name,xm,alpha)</tt>	Create a continuous random variable with the pareto distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1923'>QuadraticU</a>(name,a,b)</tt>	Create a continuous random variable with a u-quadratic distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L1997'>RaisedCosine</a>(name,mu,s)</tt>	Create a continuous random variable with a raised cosine distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L2063'>Rayleigh</a>(name,sigma)</tt>	Create a continuous random variable with a rayleigh distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L2130'>ShiftedGompertz</a>(name,b,eta)</tt>	Create a continuous random variable with a shifted gompertz distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L2186'>StudentT</a>(name,nu)</tt>	Create a continuous random variable with a student's t distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L2257'>Triangular</a>(name,a,b,c)</tt>	Create a continuous random variable with a triangular distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L2357'>Uniform</a>(name,left,right)</tt>	Create a continuous random variable with a uniform distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L2434'>UniformSum</a>(name,n)</tt>	Create a continuous random variable with an irwin-hall distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L2507'>VonMises</a>(name,mu,k)</tt>	Create a continuous random variable with a von mises distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L2580'>Weibull</a>(name,alpha,beta)</tt>	Create a continuous random variable with a weibull distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/crv_types.py#L2651'>WignerSemicircle</a>(name,R)</tt>	Create a continuous random variable with a wigner semicircle distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L407'>random_symbols</a>(expr)</tt>	Returns all randomsymbols within a sympy expression.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L417'>pspace</a>(expr)</tt>	Returns the underlying probability space of a random expression.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L444'>sumsets</a>(sets)</tt>	Union of sets.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L451'>rs_swap</a>(a,b)</tt>	Build a dictionary to swap randomsymbols based on their underlying symbol.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L470'>given</a>(expr,condition)</tt>	Conditional random expression from a random expression and a condition on that expression creates a new.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L534'>expectation</a>(expr,condition,numsamples,evaluate)</tt>	Returns the expected value of a random expression parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L589'>probability</a>(condition,given_condition,numsamples,evaluate)</tt>	Probability that a condition is true optionally given a second condition parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L682'>density</a>(expr,condition,evaluate,numsamples)</tt>	Probability density of a random expression optionally given a second condition.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L727'>cdf</a>(expr,condition,evaluate)</tt>	Cumulative distribution function of a random expression.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L770'>where</a>(condition,given_condition)</tt>	Returns the domain where a condition is true.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L801'>sample</a>(expr,condition)</tt>	A realization of the random expression examples.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L816'>sample_iter</a>(expr,condition,numsamples)</tt>	Returns an iterator of realizations from the expression given a condition expr random expression to be realized.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L850'>sample_iter_lambdify</a>(expr,condition,numsamples)</tt>	See sample_iter uses lambdify for computation.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L896'>sample_iter_subs</a>(expr,condition,numsamples)</tt>	See sample_iter uses subs for computation.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L922'>sampling_P</a>(condition,given_condition,numsamples,evalf)</tt>	Sampling version of p.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L956'>sampling_E</a>(expr,given_condition,numsamples,evalf)</tt>	Sampling version of e.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L977'>sampling_density</a>(expr,given_condition,numsamples)</tt>	Sampling version of density.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L995'>dependent</a>(a,b)</tt>	Dependence of two random expressions two expressions are independent if knowledge of one does not change.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L1031'>independent</a>(a,b)</tt>	Independence of two random expressions two expressions are independent if knowledge of one does not change.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L1060'>pspace_independent</a>(a,b)</tt>	Tests for independence between a and b by checking if their pspaces have overlapping symbols.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L1080'>rv_subs</a>(expr,symbols)</tt>	Given a random expression replace all random variables with their symbols.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv.py#L1103'>_value_check</a>(condition,message)</tt>	Check a condition on input value.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv_interface.py#L15'>moment</a>(X,n,c,condition)</tt>	Return the nth moment of a random expression about c i e e( x-c **n).
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv_interface.py#L35'>variance</a>(X,condition)</tt>	Variance of a random expression expectation of (x-e x )**2.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv_interface.py#L60'>standard_deviation</a>(X,condition)</tt>	Standard deviation of a random expression square root of the expectation of (x-e x )**2.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv_interface.py#L82'>covariance</a>(X,Y,condition)</tt>	Covariance of two random expressions the expectation that the two variables will rise and fall together.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv_interface.py#L113'>correlation</a>(X,Y,condition)</tt>	Correlation of two random expressions also known as correlation coefficient or pearson's correlation.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv_interface.py#L144'>cmoment</a>(X,n,condition)</tt>	Return the nth central moment of a random expression about its mean i.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv_interface.py#L165'>smoment</a>(X,n,condition)</tt>	Return the nth standardized moment of a random expression i e.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/rv_interface.py#L187'>skewness</a>(X,condition)</tt>	Measure of the asymmetry of the probability distribution positive skew indicates that most of the values lie to the right of.
<tt style='background-color:#E8E8E8;'> tensor.TIDS <a href=' /tensor/tensor.py#L112'>get_tensors</a>()</tt>	Get a list of tensor objects having the same tids if multiplied by one another.
<tt style='background-color:#E8E8E8;'> tensor.TIDS <a href=' /tensor/tensor.py#L127'>get_components_with_free_indices</a>()</tt>	Get a list of components with their associated indices.
<tt style='background-color:#E8E8E8;'> tensor.TIDS <a href=' /tensor/tensor.py#L165'>from_components_and_indices</a>(components,indices)</tt>	Create a new tids object from components and indices components tensorhead objects representing the components.
<tt style='background-color:#E8E8E8;'> tensor.TIDS <a href=' /tensor/tensor.py#L199'>free_dum_from_indices</a>()</tt>	Convert indices into free, dum for single component tensor free list of tuples index pos 0 ,.
<tt style='background-color:#E8E8E8;'> tensor.TIDS <a href=' /tensor/tensor.py#L311'>mul</a>(f,g)</tt>	The algorithms performing the multiplication of two tids instances.
<tt style='background-color:#E8E8E8;'> tensor.TIDS <a href=' /tensor/tensor.py#L360'>sorted_components</a>()</tt>	Returns a tids with sorted components the sorting is done taking into account the commutation group.
<tt style='background-color:#E8E8E8;'> tensor.TIDS <a href=' /tensor/tensor.py#L401'>canon_args</a>()</tt>	Returns g dummies msym v , the entries of canonicalize see canonicalize in tensor_can.
<tt style='background-color:#E8E8E8;'> tensor.TIDS <a href=' /tensor/tensor.py#L467'>perm2tensor</a>(g,canon_bp)</tt>	Returns a tids instance corresponding to the permutation g.
<tt style='background-color:#E8E8E8;'> tensor.TIDS <a href=' /tensor/tensor.py#L511'>get_indices</a>()</tt>	Get a list of indices creating new tensor indices to complete dummy indices.
<tt style='background-color:#E8E8E8;'> tensor.TIDS <a href=' /tensor/tensor.py#L546'>contract_metric</a>(g)</tt>	Returns new tids and sign.
<tt style='background-color:#E8E8E8;'> tensor._IndexStructure <a href=' /tensor/tensor.py#L699'>from_indices</a>()</tt>	Create a new _indexstructure object from a list of indices indices tensorindex objects the indices.
<tt style='background-color:#E8E8E8;'> tensor._IndexStructure <a href=' /tensor/tensor.py#L735'>_free_dum_from_indices</a>()</tt>	Convert indices into free, dum for single component tensor free list of tuples index pos 0 ,.
<tt style='background-color:#E8E8E8;'> tensor._IndexStructure <a href=' /tensor/tensor.py#L795'>get_indices</a>()</tt>	Get a list of indices creating new tensor indices to complete dummy indices.
<tt style='background-color:#E8E8E8;'> tensor._IndexStructure <a href=' /tensor/tensor.py#L847'>get_free_indices</a>()</tt>	Get a list of free indices.
<tt style='background-color:#E8E8E8;'> tensor._IndexStructure <a href=' /tensor/tensor.py#L883'>perm2tensor</a>(g,is_canon_bp)</tt>	Returns a _indexstructure instance corresponding to the permutation g.
<tt style='background-color:#E8E8E8;'> tensor._IndexStructure <a href=' /tensor/tensor.py#L922'>indices_canon_args</a>()</tt>	Returns g dummies msym v , the entries of canonicalize see canonicalize in tensor_can.
<tt style='background-color:#E8E8E8;'> tensor._TensorDataLazyEvaluator <a href=' /tensor/tensor.py#L1017'>_get</a>(key)</tt>	Retrieve data associated with key.
<tt style='background-color:#E8E8E8;'> tensor._TensorDataLazyEvaluator <a href=' /tensor/tensor.py#L1102'>data_tensorhead_from_tensmul</a>(data,tensmul,tensorhead)</tt>	This method is used when assigning components data to a tensmul object it converts components data to a fully contravariant ndarray.
<tt style='background-color:#E8E8E8;'> tensor._TensorDataLazyEvaluator <a href=' /tensor/tensor.py#L1118'>data_from_tensor</a>(tensor)</tt>	This method corrects the components data to the right signature (covariant/contravariant) using the metric associated with each.
<tt style='background-color:#E8E8E8;'> tensor._TensorDataLazyEvaluator <a href=' /tensor/tensor.py#L1175'>__setitem__</a>(key,value)</tt>	Set the components data of a tensor object/expression.
<tt style='background-color:#E8E8E8;'> tensor._TensorDataLazyEvaluator <a href=' /tensor/tensor.py#L1209'>add_metric_data</a>(metric,data)</tt>	Assign data to the metric tensor the metric tensor behaves in an.
<tt style='background-color:#E8E8E8;'> tensor._TensorDataLazyEvaluator <a href=' /tensor/tensor.py#L1271'>_correct_signature_from_indices</a>(data,indices,free,dum)</tt>	Utility function to correct the values inside the components data ndarray according to whether indices are covariant or contravariant.
<tt style='background-color:#E8E8E8;'> tensor._TensorDataLazyEvaluator <a href=' /tensor/tensor.py#L1316'>parse_data</a>(data)</tt>	Transform data to array the parameter data may.
<tt style='background-color:#E8E8E8;'> tensor._TensorManager <a href=' /tensor/tensor.py#L1383'>comm_symbols2i</a>(i)</tt>	Get the commutation group number corresponding to i i can be a symbol or a number or a string.
<tt style='background-color:#E8E8E8;'> tensor._TensorManager <a href=' /tensor/tensor.py#L1402'>comm_i2symbol</a>(i)</tt>	Returns the symbol corresponding to the commutation group number.
<tt style='background-color:#E8E8E8;'> tensor._TensorManager <a href=' /tensor/tensor.py#L1408'>set_comm</a>(i,j,c)</tt>	Set the commutation parameter c for commutation groups i j parameters.
<tt style='background-color:#E8E8E8;'> tensor._TensorManager <a href=' /tensor/tensor.py#L1480'>set_comms</a>()</tt>	Set the commutation group numbers c for symbols i j.
<tt style='background-color:#E8E8E8;'> tensor._TensorManager <a href=' /tensor/tensor.py#L1492'>get_comm</a>(i,j)</tt>	Return the commutation parameter for commutation group numbers i j see _tensormanager.
<tt style='background-color:#E8E8E8;'> tensor._TensorManager <a href=' /tensor/tensor.py#L1500'>clear</a>()</tt>	Clear the tensormanager.
<tt style='background-color:#E8E8E8;'> tensor.TensorIndexType <a href=' /tensor/tensor.py#L1741'>_components_data_full_destroy</a>()</tt>	Experimental do not rely on this api method.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/tensor.py#L1879'>tensor_indices</a>(s,typ)</tt>	Returns list of tensor indices given their names and their types parameters.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/tensor.py#L1975'>tensorsymmetry</a>()</tt>	Return a tensorsymmetry object.
<tt style='background-color:#E8E8E8;'> tensor.TensorType <a href=' /tensor/tensor.py#L2105'>__call__</a>(s,comm)</tt>	Return a tensorhead object or a list of tensorhead objects.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/tensor.py#L2143'>tensorhead</a>(name,typ,sym,comm)</tt>	Function generating tensorhead s.
<tt style='background-color:#E8E8E8;'> tensor.TensorHead <a href=' /tensor/tensor.py#L2389'>commutes_with</a>(other)</tt>	Returns 0 if self and other commute 1 if they anticommute.
<tt style='background-color:#E8E8E8;'> tensor.TensorHead <a href=' /tensor/tensor.py#L2401'>__call__</a>()</tt>	Returns a tensor with indices.
<tt style='background-color:#E8E8E8;'> tensor.TensorHead <a href=' /tensor/tensor.py#L2458'>_components_data_full_destroy</a>()</tt>	Experimental do not rely on this api method.
<tt style='background-color:#E8E8E8;'> tensor.TensExpr <a href=' /tensor/tensor.py#L2566'>fun_eval</a>()</tt>	Return a tensor with free indices substituted according to index_tuples index_types list of tuples (old_index new_index).
<tt style='background-color:#E8E8E8;'> tensor.TensExpr <a href=' /tensor/tensor.py#L2594'>get_matrix</a>()</tt>	Returns ndarray components data as a matrix if components data are available and ndarray dimension does not exceed 2.
<tt style='background-color:#E8E8E8;'> tensor.TensAdd <a href=' /tensor/tensor.py#L2897'>__call__</a>()</tt>	Returns tensor with ordered free indices replaced by indices parameters.
<tt style='background-color:#E8E8E8;'> tensor.TensAdd <a href=' /tensor/tensor.py#L2932'>canon_bp</a>()</tt>	Canonicalize using the butler-portugal algorithm for canonicalization under monoterm symmetries.
<tt style='background-color:#E8E8E8;'> tensor.TensAdd <a href=' /tensor/tensor.py#L3000'>contract_metric</a>(g)</tt>	Raise or lower indices with the metric g.
<tt style='background-color:#E8E8E8;'> tensor.TensAdd <a href=' /tensor/tensor.py#L3021'>fun_eval</a>()</tt>	Return a tensor with free indices substituted according to index_tuples parameters.
<tt style='background-color:#E8E8E8;'> tensor.TensAdd <a href=' /tensor/tensor.py#L3048'>substitute_indices</a>()</tt>	Return a tensor with free indices substituted according to index_tuples parameters.
<tt style='background-color:#E8E8E8;'> tensor.Tensor <a href=' /tensor/tensor.py#L3223'>perm2tensor</a>(g,is_canon_bp)</tt>	Returns the tensor corresponding to the permutation g for further details see the method in tids with the same name.
<tt style='background-color:#E8E8E8;'> tensor.Tensor <a href=' /tensor/tensor.py#L3271'>get_indices</a>()</tt>	Get a list of indices corresponding to those of the tensor.
<tt style='background-color:#E8E8E8;'> tensor.Tensor <a href=' /tensor/tensor.py#L3277'>get_free_indices</a>()</tt>	Get a list of free indices corresponding to those of the tensor.
<tt style='background-color:#E8E8E8;'> tensor.Tensor <a href=' /tensor/tensor.py#L3289'>__call__</a>()</tt>	Returns tensor with ordered free indices replaced by indices examples.
<tt style='background-color:#E8E8E8;'> tensor.TensMul <a href=' /tensor/tensor.py#L3639'>_get_components_from_args</a>(args)</tt>	Get a list of tensor objects having the same tids if multiplied by one another.
<tt style='background-color:#E8E8E8;'> tensor.TensMul <a href=' /tensor/tensor.py#L3680'>_get_tensors_from_components_free_dum</a>(components,free,dum)</tt>	Get a list of tensor objects by distributing free and dum indices on the components.
<tt style='background-color:#E8E8E8;'> tensor.TensMul <a href=' /tensor/tensor.py#L3773'>get_indices</a>()</tt>	Returns the list of indices of the tensor the indices are listed in the order in which they appear in the.
<tt style='background-color:#E8E8E8;'> tensor.TensMul <a href=' /tensor/tensor.py#L3799'>get_free_indices</a>()</tt>	Returns the list of free indices of the tensor the indices are listed in the order in which they appear in the.
<tt style='background-color:#E8E8E8;'> tensor.TensMul <a href=' /tensor/tensor.py#L3823'>split</a>()</tt>	Returns a list of tensors whose product is self dummy indices contracted among different tensor components.
<tt style='background-color:#E8E8E8;'> tensor.TensMul <a href=' /tensor/tensor.py#L3868'>__mul__</a>(other)</tt>	Multiply two tensors using einstein summation convention.
<tt style='background-color:#E8E8E8;'> tensor.TensMul <a href=' /tensor/tensor.py#L3916'>_sort_args_for_sorted_components</a>()</tt>	Returns the args sorted according to the components commutation properties.
<tt style='background-color:#E8E8E8;'> tensor.TensMul <a href=' /tensor/tensor.py#L3945'>sorted_components</a>()</tt>	Returns a tensor product with sorted components.
<tt style='background-color:#E8E8E8;'> tensor.TensMul <a href=' /tensor/tensor.py#L3951'>perm2tensor</a>(g,is_canon_bp)</tt>	Returns the tensor corresponding to the permutation g for further details see the method in tids with the same name.
<tt style='background-color:#E8E8E8;'> tensor.TensMul <a href=' /tensor/tensor.py#L3959'>canon_bp</a>()</tt>	Canonicalize using the butler-portugal algorithm for canonicalization under monoterm symmetries.
<tt style='background-color:#E8E8E8;'> tensor.TensMul <a href=' /tensor/tensor.py#L3995'>_get_indices_to_args_pos</a>()</tt>	Get a dict mapping the index position to tensmul's argument number.
<tt style='background-color:#E8E8E8;'> tensor.TensMul <a href=' /tensor/tensor.py#L4010'>contract_metric</a>(g)</tt>	Raise or lower indices with the metric g parameters.
<tt style='background-color:#E8E8E8;'> tensor.TensMul <a href=' /tensor/tensor.py#L4196'>__call__</a>()</tt>	Returns tensor product with ordered free indices replaced by indices examples.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/tensor.py#L4269'>tensor_mul</a>()</tt>	Product of tensors.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/tensor.py#L4281'>riemann_cyclic_replace</a>(t_r)</tt>	Replace riemann tensor with an equivalent expression.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/tensor.py#L4296'>riemann_cyclic</a>(t2)</tt>	Replace each riemann tensor with an equivalent expression satisfying the cyclic identity.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/tensor.py#L4328'>get_lines</a>(ex,index_type)</tt>	Returns lines traces rest for an index type where lines is the list of list of positions of a matrix line.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/tensor.py#L4481'>perm2tensor</a>(t,g,is_canon_bp)</tt>	Returns the tensor corresponding to the permutation g for further details see the method in tids with the same name.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/tensor.py#L4499'>substitute_indices</a>(t)</tt>	Return a tensor with free indices substituted according to index_tuples index_types list of tuples (old_index new_index).
<tt style='background-color:#E8E8E8;'> tensor.Indexed <a href=' /tensor/indexed.py#L164'>_diff_wrt</a>()</tt>	Allow derivatives with respect to an indexed object.
<tt style='background-color:#E8E8E8;'> tensor.Indexed <a href=' /tensor/indexed.py#L189'>base</a>()</tt>	Returns the indexedbase of the indexed object.
<tt style='background-color:#E8E8E8;'> tensor.Indexed <a href=' /tensor/indexed.py#L207'>indices</a>()</tt>	Returns the indices of the indexed object.
<tt style='background-color:#E8E8E8;'> tensor.Indexed <a href=' /tensor/indexed.py#L223'>rank</a>()</tt>	Returns the rank of the indexed object.
<tt style='background-color:#E8E8E8;'> tensor.Indexed <a href=' /tensor/indexed.py#L244'>shape</a>()</tt>	Returns a list with dimensions of each index.
<tt style='background-color:#E8E8E8;'> tensor.Indexed <a href=' /tensor/indexed.py#L277'>ranges</a>()</tt>	Returns a list of tuples with lower and upper range of each index.
<tt style='background-color:#E8E8E8;'> tensor.IndexedBase <a href=' /tensor/indexed.py#L412'>shape</a>()</tt>	Returns the shape of the indexedbase object.
<tt style='background-color:#E8E8E8;'> tensor.IndexedBase <a href=' /tensor/indexed.py#L439'>strides</a>()</tt>	Returns the strided scheme for the indexedbase object.
<tt style='background-color:#E8E8E8;'> tensor.IndexedBase <a href=' /tensor/indexed.py#L456'>offset</a>()</tt>	Returns the offset for the indexedbase object.
<tt style='background-color:#E8E8E8;'> tensor.IndexedBase <a href=' /tensor/indexed.py#L478'>label</a>()</tt>	Returns the label of the indexedbase object.
<tt style='background-color:#E8E8E8;'> tensor.Idx <a href=' /tensor/indexed.py#L603'>label</a>()</tt>	Returns the label integer or integer expression of the idx object.
<tt style='background-color:#E8E8E8;'> tensor.Idx <a href=' /tensor/indexed.py#L623'>lower</a>()</tt>	Returns the lower bound of the idx.
<tt style='background-color:#E8E8E8;'> tensor.Idx <a href=' /tensor/indexed.py#L644'>upper</a>()</tt>	Returns the upper bound of the idx.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/index_methods.py#L27'>_remove_repeated</a>(inds)</tt>	Removes repeated objects from sequences returns a set of the unique objects and a tuple of all that have been.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/index_methods.py#L49'>_get_indices_Mul</a>(expr,return_dummies)</tt>	Determine the outer indices of a mul object.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/index_methods.py#L85'>_get_indices_Pow</a>(expr)</tt>	Determine outer indices of a power or an exponential.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/index_methods.py#L134'>_get_indices_Add</a>(expr)</tt>	Determine outer indices of an add object.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/index_methods.py#L177'>get_indices</a>(expr)</tt>	Determine the outer indices of expression expr by *outer* we mean indices that are not summation indices.
<tt style='background-color:#E8E8E8;'> tensor. <a href=' /tensor/index_methods.py#L273'>get_contraction_structure</a>(expr)</tt>	Determine dummy indices of expr and describe its structure by *dummy* we mean indices that are summation indices.
<tt style='background-color:#E8E8E8;'> tensor.array.DenseNDimArray <a href=' /tensor/array/dense_ndim_array.py#L18'>__getitem__</a>(index)</tt>	Allows to get items from n-dim array.
<tt style='background-color:#E8E8E8;'> tensor.array.DenseNDimArray <a href=' /tensor/array/dense_ndim_array.py#L75'>tomatrix</a>()</tt>	Converts mutabledensendimarray to matrix can convert only 2-dim array else will raise error.
<tt style='background-color:#E8E8E8;'> tensor.array.DenseNDimArray <a href=' /tensor/array/dense_ndim_array.py#L102'>reshape</a>()</tt>	Returns mutabledensendimarray instance with new shape elements number.
<tt style='background-color:#E8E8E8;'> tensor.array.MutableDenseNDimArray <a href=' /tensor/array/dense_ndim_array.py#L177'>__setitem__</a>(index,value)</tt>	Allows to set items to mutabledensendimarray.
<tt style='background-color:#E8E8E8;'> tensor.array. <a href=' /tensor/array/arrayop.py#L21'>tensorproduct</a>()</tt>	Tensor product among scalars or array-like objects.
<tt style='background-color:#E8E8E8;'> tensor.array. <a href=' /tensor/array/arrayop.py#L67'>tensorcontraction</a>(array)</tt>	Contraction of an array-like object on the specified axes.
<tt style='background-color:#E8E8E8;'> tensor.array. <a href=' /tensor/array/arrayop.py#L169'>derive_by_array</a>(expr,dx)</tt>	Derivative by arrays supports both arrays and scalars.
<tt style='background-color:#E8E8E8;'> tensor.array. <a href=' /tensor/array/arrayop.py#L215'>permutedims</a>(expr,perm)</tt>	Permutes the indices of an array.
<tt style='background-color:#E8E8E8;'> tensor.array.SparseNDimArray <a href=' /tensor/array/sparse_ndim_array.py#L18'>__getitem__</a>(index)</tt>	Get an element from a sparse n-dim array.
<tt style='background-color:#E8E8E8;'> tensor.array.SparseNDimArray <a href=' /tensor/array/sparse_ndim_array.py#L79'>zeros</a>(cls)</tt>	Return a sparse n-dim array of zeros.
<tt style='background-color:#E8E8E8;'> tensor.array.SparseNDimArray <a href=' /tensor/array/sparse_ndim_array.py#L86'>tomatrix</a>()</tt>	Converts mutabledensendimarray to matrix can convert only 2-dim array else will raise error.
<tt style='background-color:#E8E8E8;'> tensor.array.MutableSparseNDimArray <a href=' /tensor/array/sparse_ndim_array.py#L182'>__setitem__</a>(index,value)</tt>	Allows to set items to mutabledensendimarray.
<tt style='background-color:#E8E8E8;'> tensor.array.NDimArray <a href=' /tensor/array/ndim_array.py#L161'>__len__</a>()</tt>	Overload common function len() returns number of elements in array.
<tt style='background-color:#E8E8E8;'> tensor.array.NDimArray <a href=' /tensor/array/ndim_array.py#L177'>shape</a>()</tt>	Returns array shape dimension.
<tt style='background-color:#E8E8E8;'> tensor.array.NDimArray <a href=' /tensor/array/ndim_array.py#L193'>rank</a>()</tt>	Returns rank of array.
<tt style='background-color:#E8E8E8;'> tensor.array.NDimArray <a href=' /tensor/array/ndim_array.py#L208'>diff</a>()</tt>	Calculate the derivative of each element in the array.
<tt style='background-color:#E8E8E8;'> tensor.array.NDimArray <a href=' /tensor/array/ndim_array.py#L224'>applyfunc</a>(f)</tt>	Apply a function to each element of the n-dim array.
<tt style='background-color:#E8E8E8;'> tensor.array.NDimArray <a href=' /tensor/array/ndim_array.py#L239'>__str__</a>()</tt>	Returns string allows to use standard functions print() and str().
<tt style='background-color:#E8E8E8;'> tensor.array.NDimArray <a href=' /tensor/array/ndim_array.py#L263'>tolist</a>()</tt>	Conveting mutabledensendimarray to one-dim list examples.
<tt style='background-color:#E8E8E8;'> tensor.array.NDimArray <a href=' /tensor/array/ndim_array.py#L344'>__eq__</a>(other)</tt>	Ndimarray instances can be compared to each other.
<tt style='background-color:#E8E8E8;'> concrete.Product <a href=' /concrete/products.py#L338'>is_convergent</a>()</tt>	See docs of sum is_convergent() for explanation of convergence.
<tt style='background-color:#E8E8E8;'> concrete.Product <a href=' /concrete/products.py#L397'>reverse_order</a>(expr)</tt>	Reverse the order of a limit in a product.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/products.py#L481'>product</a>()</tt>	Compute the product.
<tt style='background-color:#E8E8E8;'> concrete.ExprWithIntLimits <a href=' /concrete/expr_with_intlimits.py#L15'>change_index</a>(var,trafo,newvar)</tt>	Change index of a sum or product.
<tt style='background-color:#E8E8E8;'> concrete.ExprWithIntLimits <a href=' /concrete/expr_with_intlimits.py#L133'>index</a>(expr,x)</tt>	Return the index of a dummy variable in the list of limits.
<tt style='background-color:#E8E8E8;'> concrete.ExprWithIntLimits <a href=' /concrete/expr_with_intlimits.py#L170'>reorder</a>(expr)</tt>	Reorder limits in a expression containing a sum or a product.
<tt style='background-color:#E8E8E8;'> concrete.ExprWithIntLimits <a href=' /concrete/expr_with_intlimits.py#L234'>reorder_limit</a>(expr,x,y)</tt>	Interchange two limit tuples of a sum or product expression.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/expr_with_limits.py#L20'>_process_limits</a>()</tt>	Process the list of symbols and convert them to canonical limits storing them as tuple symbol lower upper.
<tt style='background-color:#E8E8E8;'> concrete.ExprWithLimits <a href=' /concrete/expr_with_limits.py#L120'>function</a>()</tt>	Return the function applied across limits.
<tt style='background-color:#E8E8E8;'> concrete.ExprWithLimits <a href=' /concrete/expr_with_limits.py#L139'>limits</a>()</tt>	Return the limits of expression.
<tt style='background-color:#E8E8E8;'> concrete.ExprWithLimits <a href=' /concrete/expr_with_limits.py#L158'>variables</a>()</tt>	Return a list of the dummy variables >>> from sympy import sum.
<tt style='background-color:#E8E8E8;'> concrete.ExprWithLimits <a href=' /concrete/expr_with_limits.py#L176'>free_symbols</a>()</tt>	This method returns the symbols in the object excluding those that take on a specific value (i.
<tt style='background-color:#E8E8E8;'> concrete.ExprWithLimits <a href=' /concrete/expr_with_limits.py#L207'>is_number</a>()</tt>	Return true if the sum has no free symbols else false.
<tt style='background-color:#E8E8E8;'> concrete.ExprWithLimits <a href=' /concrete/expr_with_limits.py#L212'>as_dummy</a>()</tt>	Replace instances of the given dummy variables with explicit dummy counterparts to make clear what are dummy variables and what.
<tt style='background-color:#E8E8E8;'> concrete.ExprWithLimits <a href=' /concrete/expr_with_limits.py#L266'>_eval_subs</a>(old,new)</tt>	Perform substitutions over non-dummy variables of an expression with limits.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/guess.py#L13'>find_simple_recurrence_vector</a>(l)</tt>	This function is used internally by other functions from the sympy.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/guess.py#L75'>find_simple_recurrence</a>(v,A,N)</tt>	Detects and returns a recurrence relation from a sequence of several integer or rational terms.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/guess.py#L109'>rationalize</a>(x,maxcoeff)</tt>	Helps identifying a rational number from a float or mpmath mpf value by.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/guess.py#L170'>guess_generating_function_rational</a>(v,X)</tt>	Tries to "guess" a rational generating function for a sequence of rational numbers v.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/guess.py#L201'>guess_generating_function</a>(v,X,types,maxsqrtn)</tt>	Tries to "guess" a generating function for a sequence of rational numbers v.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/guess.py#L383'>guess</a>(l,all,evaluate,niter)</tt>	This function is adapted from the rate m package for mathematica.
<tt style='background-color:#E8E8E8;'> concrete.Sum <a href=' /concrete/summations.py#L208'>eval_zeta_function</a>(f,limits)</tt>	Check whether the function matches with the zeta function.
<tt style='background-color:#E8E8E8;'> concrete.Sum <a href=' /concrete/summations.py#L223'>_eval_derivative</a>(x)</tt>	Differentiate wrt x as long as x is not in the free symbols of any of the upper or lower limits.
<tt style='background-color:#E8E8E8;'> concrete.Sum <a href=' /concrete/summations.py#L308'>is_convergent</a>()</tt>	Checks for the convergence of a sum.
<tt style='background-color:#E8E8E8;'> concrete.Sum <a href=' /concrete/summations.py#L530'>is_absolutely_convergent</a>()</tt>	Checks for the absolute convergence of an infinite series.
<tt style='background-color:#E8E8E8;'> concrete.Sum <a href=' /concrete/summations.py#L559'>euler_maclaurin</a>(m,n,eps,eval_integral)</tt>	Return an euler-maclaurin approximation of self where m is the number of leading terms to sum directly and n is the number of.
<tt style='background-color:#E8E8E8;'> concrete.Sum <a href=' /concrete/summations.py#L664'>reverse_order</a>()</tt>	Reverse the order of a limit in a sum.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/summations.py#L743'>summation</a>(f)</tt>	Compute the summation of f with respect to symbols.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/summations.py#L790'>telescopic_direct</a>(L,R,n,limits)</tt>	Returns the direct summation of the terms of a telescopic sum l is the term with lower index.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/summations.py#L812'>telescopic</a>(L,R,limits)</tt>	Tries to perform the summation using the telescopic property.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/summations.py#L995'>_eval_sum_hyper</a>(f,i,a)</tt>	Returns res cond sums from a to oo.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/delta.py#L18'>_expand_delta</a>(expr,index)</tt>	Expand the first add containing a simple kroneckerdelta.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/delta.py#L38'>_extract_delta</a>(expr,index)</tt>	Extract a simple kroneckerdelta from the expression.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/delta.py#L86'>_has_simple_delta</a>(expr,index)</tt>	Returns true if expr is an expression that contains a kroneckerdelta that is simple in the index index, meaning that this kroneckerdelta.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/delta.py#L103'>_is_simple_delta</a>(delta,index)</tt>	Returns true if delta is a kroneckerdelta and is nonzero for a single value of the index index.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/delta.py#L116'>_remove_multiple_delta</a>(expr)</tt>	Evaluate products of kroneckerdelta's.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/delta.py#L147'>_simplify_delta</a>(expr)</tt>	Rewrite a kroneckerdelta's indices in its simplest form.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/delta.py#L164'>deltaproduct</a>(f,limit)</tt>	Handle products containing a kroneckerdelta.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/delta.py#L229'>deltasummation</a>(f,limit,no_piecewise)</tt>	Handle summations containing a kroneckerdelta.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/gosper.py#L11'>gosper_normal</a>(f,g,n,polys)</tt>	Compute the gosper's normal form of f and g.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/gosper.py#L83'>gosper_term</a>(f,n)</tt>	Compute gosper's hypergeometric term for f.
<tt style='background-color:#E8E8E8;'> concrete. <a href=' /concrete/gosper.py#L159'>gosper_sum</a>(f,k)</tt>	Gosper's hypergeometric summation algorithm.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densetools.py#L10'>trace</a>(matlist,K)</tt>	Returns the trace of a matrix.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densetools.py#L36'>transpose</a>(matlist,K)</tt>	Returns the transpose of a matrix examples.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densetools.py#L56'>conjugate</a>(matlist,K)</tt>	Returns the conjugate of a matrix row-wise.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densetools.py#L80'>conjugate_row</a>(row,K)</tt>	Returns the conjugate of a row element-wise examples.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densetools.py#L102'>conjugate_transpose</a>(matlist,K)</tt>	Returns the conjugate-transpose of a matrix examples.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densetools.py#L121'>augment</a>(matlist,column,K)</tt>	Augments a matrix and a column.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L1007'>eye</a>(n,K)</tt>	Returns an identity matrix of size n.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densetools.py#L167'>row</a>(matlist,i)</tt>	Returns the ith row of a matrix examples.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densetools.py#L186'>col</a>(matlist,i)</tt>	Returns the ith column of a matrix note currently very expensive.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densetools.py#L207'>rowswap</a>(matlist,index1,index2,K)</tt>	Returns the matrix with index1 row and index2 row swapped.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densetools.py#L215'>rowmul</a>(matlist,index,k,K)</tt>	Multiplies index row with k.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densetools.py#L224'>rowadd</a>(matlist,index1,index2,k)</tt>	Adds the index1 row with index2 row which in turn is multiplied by k.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densetools.py#L234'>isHermitian</a>(matlist,K)</tt>	Checks whether matrix is hermitian examples.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densearith.py#L9'>add</a>(matlist1,matlist2,K)</tt>	Adds matrices row-wise.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densearith.py#L39'>addrow</a>(row1,row2,K)</tt>	Adds two rows of a matrix element-wise.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densearith.py#L62'>sub</a>(matlist1,matlist2,K)</tt>	Subtracts two matrices by first negating the second matrix and then adding it to first matrix.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densearith.py#L95'>negate</a>(matlist,K)</tt>	Negates the elements of a matrix row-wise.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densearith.py#L123'>negaterow</a>(row,K)</tt>	Negates a row element-wise.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densearith.py#L143'>mulmatmat</a>(matlist1,matlist2,K)</tt>	Multiplies two matrices by multiplying each row with each column at a time.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densearith.py#L181'>mulmatscaler</a>(matlist,scaler,K)</tt>	Performs scaler matrix multiplication one row at at time the row-scaler.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densearith.py#L206'>mulrowscaler</a>(row,scaler,K)</tt>	Performs the scaler-row multiplication element-wise.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densearith.py#L223'>mulrowcol</a>(row,col,K)</tt>	Multiplies two lists representing row and column element-wise.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L163'>_cholesky_sparse</a>()</tt>	Algorithm for numeric cholesky factorization of a sparse matrix.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L201'>_eval_inverse</a>()</tt>	Return the matrix inverse using cholesky or ldl default decomposition as selected with the method keyword 'ch' or 'ldl',.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L253'>_eval_add</a>(other)</tt>	If other is a sparsematrix add efficiently otherwise.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L336'>_eval_matrix_mul</a>(other)</tt>	Fast multiplication exploiting the sparsity of the matrix.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L383'>_eval_transpose</a>()</tt>	Returns the transposed sparsematrix of this sparsematrix.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L417'>_LDL_sparse</a>()</tt>	Algorithm for numeric ldl factization exploiting sparse structure.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L453'>_lower_triangular_solve</a>(rhs)</tt>	Fast algorithm for solving a lower-triangular system exploiting the sparsity of the given matrix.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L468'>_upper_triangular_solve</a>(rhs)</tt>	Fast algorithm for solving an upper-triangular system exploiting the sparsity of the given matrix.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L485'>applyfunc</a>(f)</tt>	Apply a function to each element of the matrix.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L515'>as_immutable</a>()</tt>	Returns an immutable version of this matrix.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L520'>as_mutable</a>()</tt>	Returns a mutable version of this matrix.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L537'>cholesky</a>()</tt>	Returns the cholesky decomposition l of a matrix a such that l * l.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L569'>col_list</a>()</tt>	Returns a column-sorted list of non-zero elements of the matrix.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L594'>eye</a>(cls,n)</tt>	Return an n x n identity matrix.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L600'>LDLdecomposition</a>()</tt>	Returns the ldl decomposition (matrices l and d) of matrix a, such that l * d * l.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L640'>liupc</a>()</tt>	Liu's algorithm for pre-determination of the elimination tree of the given matrix used in row-based symbolic cholesky factorization.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L684'>nnz</a>()</tt>	Returns the number of non-zero elements in matrix.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L688'>row_list</a>()</tt>	Returns a row-sorted list of non-zero elements of the matrix.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L711'>row_structure_symbolic_cholesky</a>()</tt>	Symbolic cholesky factorization for pre-determination of the non-zero structure of the cholesky factororization.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L746'>scalar_multiply</a>(scalar)</tt>	Scalar element-wise multiplication.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L758'>solve_least_squares</a>(rhs,method)</tt>	Return the least-square fit to the data.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L815'>solve</a>(rhs,method)</tt>	Return solution to self*soln = rhs using given inversion method.
<tt style='background-color:#E8E8E8;'> matrices.SparseMatrix <a href=' /matrices/sparse.py#L833'>zeros</a>(cls,r,c)</tt>	Return an r x c matrix of zeros square if c is omitted.
<tt style='background-color:#E8E8E8;'> matrices.MutableSparseMatrix <a href=' /matrices/sparse.py#L846'>__setitem__</a>(key,value)</tt>	Assign value to position designated by key.
<tt style='background-color:#E8E8E8;'> matrices.MutableSparseMatrix <a href=' /matrices/sparse.py#L908'>col_del</a>(k)</tt>	Delete the given column of the matrix.
<tt style='background-color:#E8E8E8;'> matrices.MutableSparseMatrix <a href=' /matrices/sparse.py#L943'>col_join</a>(other)</tt>	Returns b augmented beneath a row-wise joining :: [a].
<tt style='background-color:#E8E8E8;'> matrices.MutableSparseMatrix <a href=' /matrices/sparse.py#L1003'>col_op</a>(j,f)</tt>	In-place operation on col j using two-arg functor whose args are interpreted as (self[i j], i) for i in range(self.
<tt style='background-color:#E8E8E8;'> matrices.MutableSparseMatrix <a href=' /matrices/sparse.py#L1027'>col_swap</a>(i,j)</tt>	Swap in place columns i and j.
<tt style='background-color:#E8E8E8;'> matrices.MutableSparseMatrix <a href=' /matrices/sparse.py#L1088'>fill</a>(value)</tt>	Fill self with the given value.
<tt style='background-color:#E8E8E8;'> matrices.MutableSparseMatrix <a href=' /matrices/sparse.py#L1120'>row_del</a>(k)</tt>	Delete the given row of the matrix.
<tt style='background-color:#E8E8E8;'> matrices.MutableSparseMatrix <a href=' /matrices/sparse.py#L1153'>row_join</a>(other)</tt>	Returns b appended after a column-wise augmenting :: [a b].
<tt style='background-color:#E8E8E8;'> matrices.MutableSparseMatrix <a href=' /matrices/sparse.py#L1209'>row_op</a>(i,f)</tt>	In-place operation on row i using two-arg functor whose args are interpreted as (self[i j], j).
<tt style='background-color:#E8E8E8;'> matrices.MutableSparseMatrix <a href=' /matrices/sparse.py#L1240'>row_swap</a>(i,j)</tt>	Swap in place columns i and j.
<tt style='background-color:#E8E8E8;'> matrices.MutableSparseMatrix <a href=' /matrices/sparse.py#L1270'>zip_row_op</a>(i,k,f)</tt>	In-place operation on row i using two-arg functor whose args are interpreted as (self[i j], self[k j]).
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L24'>_iszero</a>(x)</tt>	Returns true if x is zero.
<tt style='background-color:#E8E8E8;'> matrices.MatrixRequired <a href=' /matrices/matrices.py#L89'>_new</a>(cls)</tt>	_new must at minimum be callable as _new rows cols mat where mat is a flat list of the.
<tt style='background-color:#E8E8E8;'> matrices.MatrixRequired <a href=' /matrices/matrices.py#L99'>__getitem__</a>(key)</tt>	Implementations of __getitem__ should accept ints in which case the matrix is indexed as a flat list tuples i j in which.
<tt style='background-color:#E8E8E8;'> matrices.MatrixRequired <a href=' /matrices/matrices.py#L106'>__len__</a>()</tt>	The total number of entries in the matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixShaping <a href=' /matrices/matrices.py#L202'>col_insert</a>(pos,other)</tt>	Insert one or more columns at the given column position.
<tt style='background-color:#E8E8E8;'> matrices.MatrixShaping <a href=' /matrices/matrices.py#L240'>col_join</a>(other)</tt>	Concatenates two matrices along self's last and other's first row.
<tt style='background-color:#E8E8E8;'> matrices.MatrixShaping <a href=' /matrices/matrices.py#L272'>col</a>(j)</tt>	Elementary column selector.
<tt style='background-color:#E8E8E8;'> matrices.MatrixShaping <a href=' /matrices/matrices.py#L296'>extract</a>(rowsList,colsList)</tt>	Return a submatrix by specifying a list of rows and columns.
<tt style='background-color:#E8E8E8;'> matrices.MatrixShaping <a href=' /matrices/matrices.py#L358'>get_diag_blocks</a>()</tt>	Obtains the square sub-matrices on the main diagonal of a square matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixShaping <a href=' /matrices/matrices.py#L384'>reshape</a>(rows,cols)</tt>	Reshape the matrix total number of elements must remain the same.
<tt style='background-color:#E8E8E8;'> matrices.MatrixShaping <a href=' /matrices/matrices.py#L409'>row_insert</a>(pos,other)</tt>	Insert one or more rows at the given row position.
<tt style='background-color:#E8E8E8;'> matrices.MatrixShaping <a href=' /matrices/matrices.py#L449'>row_join</a>(other)</tt>	Concatenates two matrices along self's last and rhs's first column examples.
<tt style='background-color:#E8E8E8;'> matrices.MatrixShaping <a href=' /matrices/matrices.py#L479'>row</a>(i)</tt>	Elementary row selector.
<tt style='background-color:#E8E8E8;'> matrices.MatrixShaping <a href=' /matrices/matrices.py#L501'>shape</a>()</tt>	The shape dimensions of the matrix as the 2-tuple rows cols.
<tt style='background-color:#E8E8E8;'> matrices.MatrixShaping <a href=' /matrices/matrices.py#L519'>tolist</a>()</tt>	Return the matrix as a nested python list.
<tt style='background-color:#E8E8E8;'> matrices.MatrixShaping <a href=' /matrices/matrices.py#L550'>vec</a>()</tt>	Return the matrix converted into a one column matrix by stacking columns examples.
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L649'>atoms</a>()</tt>	Returns the atoms that form the current object.
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L668'>free_symbols</a>()</tt>	Returns the free symbols within the matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L682'>has</a>()</tt>	Test whether any subexpression matches any of the patterns.
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L707'>is_anti_symmetric</a>(simplify)</tt>	Check if matrix m is an antisymmetric matrix that is m is a square matrix with all m[i j] == -m[j i].
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L778'>is_diagonal</a>()</tt>	Check if matrix is diagonal that is matrix in which the entries outside the main diagonal are all zero.
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L821'>is_hermitian</a>(simplify)</tt>	Checks if the matrix is hermitian.
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L865'>is_lower_hessenberg</a>()</tt>	Checks if the matrix is in the lower-hessenberg form.
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L894'>is_lower</a>()</tt>	Check if matrix is a lower triangular matrix true can be returned.
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L939'>is_square</a>()</tt>	Checks if a matrix is square.
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L963'>is_symbolic</a>()</tt>	Checks if any elements contain symbols.
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L978'>is_symmetric</a>(simplify)</tt>	Check if matrix is symmetric matrix that is square matrix and is equal to its transpose.
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L1042'>is_upper_hessenberg</a>()</tt>	Checks if the matrix is the upper-hessenberg form.
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L1071'>is_upper</a>()</tt>	Check if matrix is an upper triangular matrix true can be returned.
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L1117'>is_zero</a>()</tt>	Checks if a matrix is a zero matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixProperties <a href=' /matrices/matrices.py#L1148'>values</a>()</tt>	Return non-zero values of self.
<tt style='background-color:#E8E8E8;'> matrices.MatrixOperations <a href=' /matrices/matrices.py#L1178'>adjoint</a>()</tt>	Conjugate transpose or hermitian conjugation.
<tt style='background-color:#E8E8E8;'> matrices.MatrixOperations <a href=' /matrices/matrices.py#L1182'>applyfunc</a>(f)</tt>	Apply a function to each element of the matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixOperations <a href=' /matrices/matrices.py#L1205'>as_real_imag</a>()</tt>	Returns a tuple containing the real imaginary part of matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixOperations <a href=' /matrices/matrices.py#L1209'>conjugate</a>()</tt>	Return the by-element conjugation.
<tt style='background-color:#E8E8E8;'> matrices.MatrixOperations <a href=' /matrices/matrices.py#L1241'>evalf</a>(prec)</tt>	Apply evalf() to each element of self.
<tt style='background-color:#E8E8E8;'> matrices.MatrixOperations <a href=' /matrices/matrices.py#L1245'>expand</a>(deep,modulus,power_base,power_exp)</tt>	Apply core function expand to each entry of the matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixOperations <a href=' /matrices/matrices.py#L1264'>H</a>()</tt>	Return hermite conjugate.
<tt style='background-color:#E8E8E8;'> matrices.MatrixOperations <a href=' /matrices/matrices.py#L1290'>refine</a>(assumptions)</tt>	Apply refine to each element of the matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixOperations <a href=' /matrices/matrices.py#L1310'>replace</a>(F,G,map)</tt>	Replaces function f in matrix entries with function g.
<tt style='background-color:#E8E8E8;'> matrices.MatrixOperations <a href=' /matrices/matrices.py#L1330'>simplify</a>(ratio,measure)</tt>	Apply simplify to each element of the matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixOperations <a href=' /matrices/matrices.py#L1346'>subs</a>()</tt>	Return a new matrix with subs applied to each entry.
<tt style='background-color:#E8E8E8;'> matrices.MatrixOperations <a href=' /matrices/matrices.py#L1363'>trace</a>()</tt>	Returns the trace of a square matrix i e the sum of the.
<tt style='background-color:#E8E8E8;'> matrices.MatrixOperations <a href=' /matrices/matrices.py#L1381'>transpose</a>()</tt>	Returns the transpose of the matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixOperations <a href=' /matrices/matrices.py#L1422'>xreplace</a>(rule)</tt>	Return a new matrix with xreplace applied to each entry.
<tt style='background-color:#E8E8E8;'> matrices.MatrixArithmetic <a href=' /matrices/matrices.py#L1492'>__add__</a>(other)</tt>	Return self + other raising shapeerror if shapes don't match.
<tt style='background-color:#E8E8E8;'> matrices.MatrixArithmetic <a href=' /matrices/matrices.py#L1524'>__mul__</a>(other)</tt>	Return self*other where other is either a scalar or a matrix of compatible dimensions.
<tt style='background-color:#E8E8E8;'> matrices.MatrixArithmetic <a href=' /matrices/matrices.py#L1652'>multiply_elementwise</a>(other)</tt>	Return the hadamard product elementwise product of a and b examples.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeterminant <a href=' /matrices/matrices.py#L1683'>_eval_berkowitz_toeplitz_matrix</a>()</tt>	Return a t where t the toeplitz matrix used in the berkowitz algorithm corresponding to self and a is the first principal submatrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeterminant <a href=' /matrices/matrices.py#L1727'>_eval_berkowitz_vector</a>()</tt>	Run the berkowitz algorithm and return a vector whose entries are the coefficients of the characteristic polynomial of self.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeterminant <a href=' /matrices/matrices.py#L1771'>_eval_det_bareiss</a>()</tt>	Compute matrix determinant using bareiss' fraction-free algorithm which is an extension of the well known gaussian.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeterminant <a href=' /matrices/matrices.py#L1824'>_eval_det_berkowitz</a>()</tt>	Use the berkowitz algorithm to compute the determinant.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeterminant <a href=' /matrices/matrices.py#L1829'>_eval_det_lu</a>()</tt>	Use lu the decomposition to compute the determinant.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeterminant <a href=' /matrices/matrices.py#L1846'>adjugate</a>(method)</tt>	Returns the adjugate or classical adjoint of a matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeterminant <a href=' /matrices/matrices.py#L1861'>charpoly</a>(x,simplify)</tt>	Computes characteristic polynomial det(x*i - self) where i is the identity matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeterminant <a href=' /matrices/matrices.py#L1913'>cofactor</a>(i,j,method)</tt>	Calculate the cofactor of an element.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeterminant <a href=' /matrices/matrices.py#L1929'>cofactor_matrix</a>(method)</tt>	Return a matrix containing the cofactor of each element.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeterminant <a href=' /matrices/matrices.py#L1947'>det</a>(method)</tt>	Computes the determinant of a matrix if the matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeterminant <a href=' /matrices/matrices.py#L2004'>minor</a>(i,j,method)</tt>	Return the i j minor of self that is.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeterminant <a href=' /matrices/matrices.py#L2022'>minor_submatrix</a>(i,j)</tt>	Return the submatrix obtained by removing the ith row and jth column from self.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeprecated <a href=' /matrices/matrices.py#L2054'>berkowitz_det</a>()</tt>	Computes determinant using berkowitz method.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeprecated <a href=' /matrices/matrices.py#L2066'>berkowitz_eigenvals</a>()</tt>	Computes eigenvalues of a matrix using berkowitz method.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeprecated <a href=' /matrices/matrices.py#L2077'>berkowitz_minors</a>()</tt>	Computes principal minors using berkowitz method.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeprecated <a href=' /matrices/matrices.py#L2143'>det_bareiss</a>()</tt>	Compute matrix determinant using bareiss' fraction-free algorithm which is an extension of the well known gaussian.
<tt style='background-color:#E8E8E8;'> matrices.MatrixDeprecated <a href=' /matrices/matrices.py#L2163'>det_LU_decomposition</a>()</tt>	Compute matrix determinant using lu decomposition note that this method fails if the lu decomposition itself.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L2219'>__len__</a>()</tt>	Return the number of elements of self.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L2305'>_handle_creation_inputs</a>(cls)</tt>	Return the number of rows cols and flat matrix elements.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L2626'>_jordan_split</a>(algebraical,geometrical)</tt>	Return a list of integers with sum equal to 'algebraical'.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L2635'>_setitem</a>(key,value)</tt>	Helper to set value at location given by key.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L2705'>add</a>(b)</tt>	Return self + b.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L2709'>cholesky_solve</a>(rhs)</tt>	Solves ax = b using cholesky decomposition for a general square non-singular matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L2738'>cholesky</a>()</tt>	Returns the cholesky decomposition l of a matrix a such that l * l.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L2775'>columnspace</a>(simplify)</tt>	Returns list of vectors matrix objects that span columnspace of self examples.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L2813'>condition_number</a>()</tt>	Returns the condition number of a matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L2836'>copy</a>()</tt>	Returns the copy of a matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L2853'>cross</a>(b)</tt>	Return the cross product of self and b relaxing the condition of compatible dimensions if each has 3 elements a matrix of the.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L2880'>D</a>()</tt>	Return dirac conjugate (if self rows == 4).
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L2923'>diagonal_solve</a>(rhs)</tt>	Solves ax = b efficiently where a is a diagonal matrix with non-zero diagonal entries.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L2954'>diagonalize</a>(reals_only,sort,normalize)</tt>	Return p d where d is diagonal and d = p^-1 * m * p.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3022'>diff</a>()</tt>	Calculate the derivative of each element in the matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3045'>dot</a>(b)</tt>	Return the dot product of matrix self and b relaxing the condition of compatible dimensions if either the number of rows or columns are.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3104'>dual</a>()</tt>	Returns the dual of a matrix which is (1/2)*levicivita i j k l *m k l summed over indices k and l.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3143'>eigenvals</a>()</tt>	Return eigenvalues using the berkowitz agorithm to compute the characteristic polynomial.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3166'>eigenvects</a>()</tt>	Return list of triples eigenval multiplicity basis.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3236'>exp</a>()</tt>	Return the exponentiation of a square matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3274'>gauss_jordan_solve</a>(b,freevar)</tt>	Solves ax = b using gauss jordan elimination.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3406'>hstack</a>(cls)</tt>	Return a matrix formed by joining args horizontally (i e.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3423'>integrate</a>()</tt>	Integrate each element of the matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3450'>inv_mod</a>(m)</tt>	Returns the inverse of the matrix k (mod m), if it exists.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3492'>inverse_ADJ</a>(iszerofunc)</tt>	Calculates the inverse using the adjugate matrix and a determinant.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3516'>inverse_GE</a>(iszerofunc)</tt>	Calculates the inverse using gaussian elimination.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3537'>inverse_LU</a>(iszerofunc)</tt>	Calculates the inverse using lu decomposition.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3556'>inv</a>(method)</tt>	Return the inverse of a matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3620'>is_diagonalizable</a>(reals_only,clear_subproducts)</tt>	Check if matrix is diagonalizable.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3683'>is_nilpotent</a>()</tt>	Checks if a matrix is nilpotent.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3711'>jacobian</a>(X)</tt>	Calculates the jacobian matrix derivative of a vectorial function.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3778'>jordan_cells</a>(calc_transformation)</tt>	Return a list of jordan cells of current matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3847'>jordan_form</a>(calc_transformation)</tt>	Return jordan form j of current matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3885'>key2bounds</a>(keys)</tt>	Converts a key with potentially mixed types of keys integer and slice into a tuple of ranges and raises an error if any index is out of self's.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3915'>key2ij</a>(key)</tt>	Converts key into canonical form converting integers or indexable items into valid integers for self's range or returning slices.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3935'>LDLdecomposition</a>()</tt>	Returns the ldl decomposition l d of matrix a such that l * d * l.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L3975'>LDLsolve</a>(rhs)</tt>	Solves ax = b using ldl decomposition for a general square and non-singular matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4016'>left_eigenvects</a>()</tt>	Returns left eigenvectors and eigenvalues.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4054'>limit</a>()</tt>	Calculate the limit of each element in the matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4077'>lower_triangular_solve</a>(rhs)</tt>	Solves ax = b where a is a lower triangular matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4101'>LUdecomposition</a>(iszerofunc)</tt>	Returns the decomposition lu and the row swaps p.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4142'>LUdecomposition_Simple</a>(iszerofunc)</tt>	Returns a comprised of l u (l's diag entries are 1) and p which is the list of the row swaps in order.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4183'>LUdecompositionFF</a>()</tt>	Compute a fraction-free lu decomposition.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4232'>LUsolve</a>(rhs,iszerofunc)</tt>	Solve the linear system ax = rhs for x where a = self.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4284'>normalized</a>()</tt>	Return the normalized version of self.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4298'>norm</a>(ord)</tt>	Return the norm of a matrix or vector.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4386'>nullspace</a>(simplify)</tt>	Returns list of vectors matrix objects that span nullspace of self examples.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4443'>permuteBkwd</a>(perm)</tt>	Permute the rows of the matrix with the given permutation in reverse.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4467'>permuteFwd</a>(perm)</tt>	Permute the rows of the matrix with the given permutation.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4491'>pinv_solve</a>(B,arbitrary_matrix)</tt>	Solve ax = b using the moore-penrose pseudoinverse.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4577'>pinv</a>()</tt>	Calculate the moore-penrose pseudoinverse of the matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4621'>print_nonzero</a>(symb)</tt>	Shows location of non-zero entries for fast shape lookup.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4655'>project</a>(v)</tt>	Return the projection of self onto the line containing v.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4671'>QRdecomposition</a>()</tt>	Return q r where a = q*r q is orthogonal and r is upper triangular.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4750'>QRsolve</a>(b)</tt>	Solve the linear system 'ax = b'.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4795'>rank</a>(iszerofunc,simplify)</tt>	Returns the rank of a matrix >>> from sympy import matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4812'>rref</a>(iszerofunc,simplify)</tt>	Return reduced row-echelon form of matrix and indices of pivot vars.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4877'>singular_values</a>()</tt>	Compute the singular values of a matrix examples.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4907'>solve_least_squares</a>(rhs,method)</tt>	Return the least-square fit to the data.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4966'>solve</a>(rhs,method)</tt>	Return solution to self*soln = rhs using given inversion method.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L4982'>table</a>(printer,rowstart,rowend,rowsep)</tt>	String form of matrix as a table.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L5060'>upper_triangular_solve</a>(rhs)</tt>	Solves ax = b where a is an upper triangular matrix.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L5083'>vech</a>(diagonal,check_symmetry)</tt>	Return the unique elements of a symmetric matrix as a one column matrix by stacking the elements in the lower triangle.
<tt style='background-color:#E8E8E8;'> matrices.MatrixBase <a href=' /matrices/matrices.py#L5138'>vstack</a>(cls)</tt>	Return a matrix formed by joining args vertically (i e.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/matrices.py#L5158'>classof</a>(A,B)</tt>	Get the type of the result when combining matrices of different types.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/matrices.py#L5192'>a2idx</a>(j,n)</tt>	Return integer after making positive and validating against n.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/matrices.py#L5207'>_find_reasonable_pivot</a>(col,iszerofunc,simpfunc)</tt>	Find the lowest index of an item in col that is suitable for a pivot.
<tt style='background-color:#E8E8E8;'> matrices._MatrixWrapper <a href=' /matrices/matrices.py#L5423'>__getattr__</a>(attr)</tt>	Most attribute access is passed straight through.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/matrices.py#L5432'>_matrixify</a>(mat)</tt>	If mat is a matrix or is matrix-like return a matrix or matrixwrapper object.
<tt style='background-color:#E8E8E8;'> matrices.ImmutableDenseMatrix <a href=' /matrices/immutable.py#L66'>_eval_Eq</a>(other)</tt>	Helper method for equality with matrices.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densesolve.py#L18'>row_echelon</a>(matlist,K)</tt>	Returns the row echelon form of a matrix with diagonal elements reduced to 1.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densesolve.py#L51'>rref</a>(matlist,K)</tt>	Returns the reduced row echelon form of a matrix.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densesolve.py#L82'>LU</a>(matlist,K,reverse)</tt>	It computes the lu decomposition of a matrix and returns l and u matrices.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densesolve.py#L115'>cholesky</a>(matlist,K)</tt>	Performs the cholesky decomposition of a hermitian matrix and returns l and it's conjugate transpose.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densesolve.py#L148'>LDL</a>(matlist,K)</tt>	Performs the ldl decomposition of a hermitian matrix and returns l d and transpose of l.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densesolve.py#L182'>upper_triangle</a>(matlist,K)</tt>	Transforms a given matrix to an upper triangle matrix by performing row operations on it.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densesolve.py#L209'>lower_triangle</a>(matlist,K)</tt>	Transforms a given matrix to a lower triangle matrix by performing row operations on it.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densesolve.py#L236'>rref_solve</a>(matlist,variable,constant,K)</tt>	Solves a system of equations using reduced row echelon form given a matrix of coefficients a vector of variables and a vector of constants.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densesolve.py#L275'>LU_solve</a>(matlist,variable,constant,K)</tt>	Solves a system of equations using lu decomposition given a matrix of coefficients a vector of variables and a vector of constants.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densesolve.py#L318'>cholesky_solve</a>(matlist,variable,constant,K)</tt>	Solves a system of equations using cholesky decomposition given a matrix of coefficients a vector of variables and a vector of constants.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densesolve.py#L361'>forward_substitution</a>(lower_triangle,variable,constant,K)</tt>	Performs forward substitution given a lower triangular matrix a vector of variables and a vector of constants.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/densesolve.py#L405'>backward_substitution</a>(upper_triangle,variable,constant,K)</tt>	Performs forward substitution given a lower triangular matrix a vector of variables and a vector constants.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/sparsetools.py#L7'>_doktocsr</a>(dok)</tt>	Converts a sparse matrix to compressed sparse row csr format.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/sparsetools.py#L29'>_csrtodok</a>(csr)</tt>	Converts a csr representation to dok representation.
<tt style='background-color:#E8E8E8;'> matrices.DenseMatrix <a href=' /matrices/dense.py#L48'>__getitem__</a>(key)</tt>	Return portion of self defined by key if the key involves a slice.
<tt style='background-color:#E8E8E8;'> matrices.DenseMatrix <a href=' /matrices/dense.py#L121'>_cholesky</a>()</tt>	Helper function of cholesky.
<tt style='background-color:#E8E8E8;'> matrices.DenseMatrix <a href=' /matrices/dense.py#L134'>_diagonal_solve</a>(rhs)</tt>	Helper function of function diagonal_solve without the error checks to be used privately.
<tt style='background-color:#E8E8E8;'> matrices.DenseMatrix <a href=' /matrices/dense.py#L149'>_eval_inverse</a>()</tt>	Return the matrix inverse using the method indicated default is gauss elimination.
<tt style='background-color:#E8E8E8;'> matrices.DenseMatrix <a href=' /matrices/dense.py#L212'>_LDLdecomposition</a>()</tt>	Helper function of ldldecomposition.
<tt style='background-color:#E8E8E8;'> matrices.DenseMatrix <a href=' /matrices/dense.py#L227'>_lower_triangular_solve</a>(rhs)</tt>	Helper function of function lower_triangular_solve.
<tt style='background-color:#E8E8E8;'> matrices.DenseMatrix <a href=' /matrices/dense.py#L241'>_upper_triangular_solve</a>(rhs)</tt>	Helper function of function upper_triangular_solve.
<tt style='background-color:#E8E8E8;'> matrices.DenseMatrix <a href=' /matrices/dense.py#L253'>as_immutable</a>()</tt>	Returns an immutable version of this matrix.
<tt style='background-color:#E8E8E8;'> matrices.DenseMatrix <a href=' /matrices/dense.py#L261'>as_mutable</a>()</tt>	Returns a mutable version of this matrix examples.
<tt style='background-color:#E8E8E8;'> matrices.DenseMatrix <a href=' /matrices/dense.py#L278'>equals</a>(other,failing_expression)</tt>	Applies equals to corresponding elements of the matrices trying to prove that the elements are equivalent returning true.
<tt style='background-color:#E8E8E8;'> matrices.DenseMatrix <a href=' /matrices/dense.py#L322'>eye</a>(cls,n)</tt>	Return an n x n identity matrix.
<tt style='background-color:#E8E8E8;'> matrices.DenseMatrix <a href=' /matrices/dense.py#L330'>zeros</a>(cls,r,c)</tt>	Return an r x c matrix of zeros square if c is omitted.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L343'>_force_mutable</a>(x)</tt>	Return a matrix as a matrix otherwise return x.
<tt style='background-color:#E8E8E8;'> matrices.MutableDenseMatrix <a href=' /matrices/dense.py#L418'>col_del</a>(i)</tt>	Delete the given column.
<tt style='background-color:#E8E8E8;'> matrices.MutableDenseMatrix <a href=' /matrices/dense.py#L446'>col_op</a>(j,f)</tt>	In-place operation on col j using two-arg functor whose args are interpreted as (self[i j], i).
<tt style='background-color:#E8E8E8;'> matrices.MutableDenseMatrix <a href=' /matrices/dense.py#L468'>col_swap</a>(i,j)</tt>	Swap the two given columns of the matrix in-place.
<tt style='background-color:#E8E8E8;'> matrices.MutableDenseMatrix <a href=' /matrices/dense.py#L495'>copyin_list</a>(key,value)</tt>	Copy in elements from a list.
<tt style='background-color:#E8E8E8;'> matrices.MutableDenseMatrix <a href=' /matrices/dense.py#L533'>copyin_matrix</a>(key,value)</tt>	Copy in values from a matrix into the given bounds.
<tt style='background-color:#E8E8E8;'> matrices.MutableDenseMatrix <a href=' /matrices/dense.py#L580'>fill</a>(value)</tt>	Fill the matrix with the scalar value.
<tt style='background-color:#E8E8E8;'> matrices.MutableDenseMatrix <a href=' /matrices/dense.py#L591'>row_del</a>(i)</tt>	Delete the given row.
<tt style='background-color:#E8E8E8;'> matrices.MutableDenseMatrix <a href=' /matrices/dense.py#L619'>row_op</a>(i,f)</tt>	In-place operation on row i using two-arg functor whose args are interpreted as (self[i j], j).
<tt style='background-color:#E8E8E8;'> matrices.MutableDenseMatrix <a href=' /matrices/dense.py#L645'>row_swap</a>(i,j)</tt>	Swap the two given rows of the matrix in-place.
<tt style='background-color:#E8E8E8;'> matrices.MutableDenseMatrix <a href=' /matrices/dense.py#L672'>simplify</a>(ratio,measure)</tt>	Applies simplify to the elements of a matrix in place.
<tt style='background-color:#E8E8E8;'> matrices.MutableDenseMatrix <a href=' /matrices/dense.py#L686'>zip_row_op</a>(i,k,f)</tt>	In-place operation on row i using two-arg functor whose args are interpreted as (self[i j], self[k j]).
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L726'>list2numpy</a>(l,dtype)</tt>	Converts python list of sympy expressions to a numpy array.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L741'>matrix2numpy</a>(m,dtype)</tt>	Converts sympy's matrix to a numpy array.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L757'>rot_axis3</a>(theta)</tt>	Returns a rotation matrix for a rotation of theta in radians about the 3-axis.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L800'>rot_axis2</a>(theta)</tt>	Returns a rotation matrix for a rotation of theta in radians about the 2-axis.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L843'>rot_axis1</a>(theta)</tt>	Returns a rotation matrix for a rotation of theta in radians about the 1-axis.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L886'>symarray</a>(prefix,shape)</tt>	Create a numpy ndarray of symbols as an object array.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L963'>casoratian</a>(seqs,n,zero)</tt>	Given linear difference operator l of order 'k' and homogeneous equation ly = 0 we want to compute kernel of l which is a set.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L1007'>eye</a>(n,cls)</tt>	Create square identity matrix n x n.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L1022'>diag</a>()</tt>	Create a sparse diagonal matrix from a list of diagonal values.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L1148'>GramSchmidt</a>(vlist,orthonormal)</tt>	Apply the gram-schmidt process to a set of vectors.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L1170'>hessian</a>(f,varlist,constraints)</tt>	Compute hessian matrix for a function f wrt parameters in varlist which may be given as a sequence or a row/column vector.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L1247'>jordan_cell</a>(eigenval,n)</tt>	Create matrix of jordan cell kind examples.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L1272'>matrix_multiply_elementwise</a>(A,B)</tt>	Return the hadamard product elementwise product of a and b >>> from sympy.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L1296'>ones</a>(r,c)</tt>	Returns a matrix of ones with r rows and c columns if c is omitted a square matrix will be returned.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L1315'>randMatrix</a>(r,c,min,max)</tt>	Create random matrix with dimensions r x c if c is omitted.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L1389'>wronskian</a>(functions,var,method)</tt>	Compute wronskian for [] of functions ::.
<tt style='background-color:#E8E8E8;'> matrices. <a href=' /matrices/dense.py#L1422'>zeros</a>(r,c,cls)</tt>	Returns a matrix of zeros with r rows and c columns if c is omitted a square matrix will be returned.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/determinant.py#L60'>refine_Determinant</a>(expr,assumptions)</tt>	>>> from sympy import matrixsymbol q assuming refine det >>> x = matrixsymbol('x', 2 2).
<tt style='background-color:#E8E8E8;'> matrices.expressions.BlockMatrix <a href=' /matrices/expressions/blockmatrix.py#L137'>transpose</a>()</tt>	Return transpose of matrix.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/blockmatrix.py#L265'>block_collapse</a>(expr)</tt>	Evaluates a block matrix expression.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/blockmatrix.py#L335'>bc_dist</a>(expr)</tt>	Turn a*[x y] into [a*x a*y].
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/blockmatrix.py#L391'>deblock</a>(B)</tt>	Flatten a blockmatrix of blockmatrices.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/blockmatrix.py#L413'>reblock_2x2</a>(B)</tt>	Reblock a blockmatrix so that it has 2x2 blocks of block matrices.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/blockmatrix.py#L423'>bounds</a>(sizes)</tt>	Convert sequence of numbers into pairs of low-high pairs >>> from sympy.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/blockmatrix.py#L437'>blockcut</a>(expr,rowsizes,colsizes)</tt>	Cut a matrix expression into blocks >>> from sympy import immutablematrix blockcut.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/slice.py#L102'>mat_slice_of_slice</a>(parent,rowslice,colslice)</tt>	Collapse nested matrix slices.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/transpose.py#L82'>refine_Transpose</a>(expr,assumptions)</tt>	>>> from sympy import matrixsymbol q assuming refine >>> x = matrixsymbol('x', 2 2).
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/matmul.py#L131'>validate</a>()</tt>	Checks for valid shapes for args of matmul.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/matadd.py#L82'>merge_explicit</a>(matmul)</tt>	Merge explicit matrixbase arguments >>> from sympy import matrixsymbol eye matrix matmul pprint.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/matmul.py#L195'>xxinv</a>(mul)</tt>	Y * x * x i -> y.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/matmul.py#L208'>remove_ids</a>(mul)</tt>	Remove identities from a matmul this is a modified version of sympy.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/matmul.py#L239'>only_squares</a>()</tt>	Factor matrices only if they are square.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/matmul.py#L256'>refine_MatMul</a>(expr,assumptions)</tt>	>>> from sympy import matrixsymbol q assuming refine >>> x = matrixsymbol('x', 2 2).
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/hadamard.py#L8'>hadamard_product</a>()</tt>	Return the elementwise aka hadamard product of matrices.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/trace.py#L62'>trace</a>(expr)</tt>	Trace of a matrix sum of the diagonal elements.
<tt style='background-color:#E8E8E8;'> matrices.expressions.MatrixExpr <a href=' /matrices/expressions/matexpr.py#L268'>as_explicit</a>()</tt>	Returns a dense matrix with elements represented explicitly returns an object of type immutabledensematrix.
<tt style='background-color:#E8E8E8;'> matrices.expressions.MatrixExpr <a href=' /matrices/expressions/matexpr.py#L297'>as_mutable</a>()</tt>	Returns a dense mutable matrix with elements represented explicitly examples.
<tt style='background-color:#E8E8E8;'> matrices.expressions.MatrixExpr <a href=' /matrices/expressions/matexpr.py#L330'>equals</a>(other)</tt>	Test elementwise equality between matrices potentially of different types.
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/inverse.py#L71'>refine_Inverse</a>(expr,assumptions)</tt>	>>> from sympy import matrixsymbol q assuming refine >>> x = matrixsymbol('x', 2 2).
<tt style='background-color:#E8E8E8;'> matrices.expressions. <a href=' /matrices/expressions/matadd.py#L82'>merge_explicit</a>(matadd)</tt>	Merge explicit matrixbase arguments >>> from sympy import matrixsymbol eye matrix matadd pprint.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/textplot.py#L8'>textplot</a>(expr,a,b,W)</tt>	Print a crude ascii art plot of the sympy expression 'expr' (which should contain a single symbol e.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/plot.py#L59'>_arity</a>(f)</tt>	Python 2 and 3 compatible version that do not raise a deprecation warning.
<tt style='background-color:#E8E8E8;'> plotting.Plot <a href=' /plotting/plot.py#L219'>append</a>(arg)</tt>	Adds an element from a plot's series to an existing plot.
<tt style='background-color:#E8E8E8;'> plotting.Plot <a href=' /plotting/plot.py#L251'>extend</a>(arg)</tt>	Adds all series from another plot.
<tt style='background-color:#E8E8E8;'> plotting.LineOver1DRangeSeries <a href=' /plotting/plot.py#L450'>get_segments</a>()</tt>	Adaptively gets segments for plotting.
<tt style='background-color:#E8E8E8;'> plotting.Parametric2DLineSeries <a href=' /plotting/plot.py#L567'>get_segments</a>()</tt>	Adaptively gets segments for plotting.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/plot.py#L1097'>flat</a>(x,y,z,eps)</tt>	Checks whether three points are almost collinear.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/plot.py#L1113'>_matplotlib_list</a>(interval_list)</tt>	Returns lists for matplotlib fill command from a list of bounding.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/plot.py#L1141'>plot</a>()</tt>	Plots a function of a single variable and returns an instance of the plot class (also see the description of the.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/plot.py#L1299'>plot_parametric</a>()</tt>	Plots a 2d parametric plot.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/plot.py#L1430'>plot3d_parametric_line</a>()</tt>	Plots a 3d parametric line plot.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/plot.py#L1526'>plot3d</a>()</tt>	Plots a 3d surface plot.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/plot.py#L1638'>plot3d_parametric_surface</a>()</tt>	Plots a 3d parametric surface plot.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/plot.py#L1733'>check_arguments</a>(args,expr_len,nb_of_free_symbols)</tt>	Checks the arguments and converts into tuples of the form exprs ranges.
<tt style='background-color:#E8E8E8;'> plotting.Lambdifier <a href=' /plotting/experimental_lambdify.py#L493'>str2tree</a>(exprstr)</tt>	Converts an expression string to a tree.
<tt style='background-color:#E8E8E8;'> plotting.Lambdifier <a href=' /plotting/experimental_lambdify.py#L539'>tree2str</a>(cls,tree)</tt>	Converts a tree to string without translations.
<tt style='background-color:#E8E8E8;'> plotting.Lambdifier <a href=' /plotting/experimental_lambdify.py#L560'>tree2str_translate</a>(tree)</tt>	Converts a tree to string with translations.
<tt style='background-color:#E8E8E8;'> plotting.Lambdifier <a href=' /plotting/experimental_lambdify.py#L573'>translate_str</a>(estr)</tt>	Translate substrings of estr using in order the dictionaries in dict_tuple_str.
<tt style='background-color:#E8E8E8;'> plotting.Lambdifier <a href=' /plotting/experimental_lambdify.py#L580'>translate_func</a>(func_name,argtree)</tt>	Translate function names and the tree of arguments.
<tt style='background-color:#E8E8E8;'> plotting.Lambdifier <a href=' /plotting/experimental_lambdify.py#L614'>sympy_expression_namespace</a>(cls,expr)</tt>	Traverses the func args tree of an expression and creates a sympy namespace.
<tt style='background-color:#E8E8E8;'> plotting.Lambdifier <a href=' /plotting/experimental_lambdify.py#L664'>sympy_atoms_namespace</a>(expr)</tt>	For no real reason this function is separated from sympy_expression_namespace.
<tt style='background-color:#E8E8E8;'> plotting.ImplicitSeries <a href=' /plotting/plot_implicit.py#L92'>_get_raster_interval</a>(func)</tt>	Uses interval math to adaptively mesh and obtain the plot.
<tt style='background-color:#E8E8E8;'> plotting.ImplicitSeries <a href=' /plotting/plot_implicit.py#L168'>_get_meshes_grid</a>()</tt>	Generates the mesh for generating a contour.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/plot_implicit.py#L202'>plot_implicit</a>(expr,x_var,y_var)</tt>	A plot function to plot implicit equations / inequalities.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L24'>exp</a>(x)</tt>	Evaluates the exponential of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L36'>log</a>(x)</tt>	Evaluates the natural logarithm of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L58'>log10</a>(x)</tt>	Evaluates the logarithm to the base 10 of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L79'>atan</a>(x)</tt>	Evaluates the tan inverse of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L93'>sin</a>(x)</tt>	Evaluates the sine of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L122'>cos</a>(x)</tt>	Evaluates the cos of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L152'>tan</a>(x)</tt>	Evaluates the tan of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L158'>sqrt</a>(x)</tt>	Evaluates the square root of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L180'>imin</a>()</tt>	Evaluates the minimum of a list of intervals.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L201'>imax</a>()</tt>	Evaluates the maximum of a list of intervals.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L224'>sinh</a>(x)</tt>	Evaluates the hyperbolic sine of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L235'>cosh</a>(x)</tt>	Evaluates the hyperbolic cos of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L255'>tanh</a>(x)</tt>	Evaluates the hyperbolic tan of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L266'>asin</a>(x)</tt>	Evaluates the inverse sine of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L288'>acos</a>(x)</tt>	Evaluates the inverse cos of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L310'>ceil</a>(x)</tt>	Evaluates the ceiling of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L331'>floor</a>(x)</tt>	Evaluates the floor of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L352'>acosh</a>(x)</tt>	Evaluates the inverse hyperbolic cosine of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L377'>asinh</a>(x)</tt>	Evaluates the inverse hyperbolic sine of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L390'>atanh</a>(x)</tt>	Evaluates the inverse hyperbolic tangent of an interval.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L416'>And</a>()</tt>	Defines the three valued and behaviour for a 2-tuple of.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/lib_interval.py#L436'>Or</a>()</tt>	Defines the three valued or behaviour for a 2-tuple of.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/interval_arithmetic.py#L406'>_pow_float</a>(inter,power)</tt>	Evaluates an interval raised to a floating point.
<tt style='background-color:#E8E8E8;'> plotting.intervalmath. <a href=' /plotting/intervalmath/interval_arithmetic.py#L439'>_pow_int</a>(inter,power)</tt>	Evaluates an interval raised to an integer power.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.ManagedWindow <a href=' /plotting/pygletplot/managed_window.py#L24'>__init__</a>()</tt>	It is best not to override this function in the child class unless you need to take additional arguments.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.ManagedWindow <a href=' /plotting/pygletplot/managed_window.py#L39'>__event_loop__</a>()</tt>	The event loop thread function do not override or call.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.ManagedWindow <a href=' /plotting/pygletplot/managed_window.py#L76'>close</a>()</tt>	Closes the window.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.ManagedWindow <a href=' /plotting/pygletplot/managed_window.py#L82'>setup</a>()</tt>	Called once before the event loop begins.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.ManagedWindow <a href=' /plotting/pygletplot/managed_window.py#L91'>update</a>(dt)</tt>	Called before draw during each iteration of the event loop.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.ManagedWindow <a href=' /plotting/pygletplot/managed_window.py#L100'>draw</a>()</tt>	Called after update during each iteration of the event loop.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot. <a href=' /plotting/pygletplot/util.py#L13'>get_model_matrix</a>(array_type,glGetMethod)</tt>	Returns the current modelview matrix.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot. <a href=' /plotting/pygletplot/util.py#L22'>get_projection_matrix</a>(array_type,glGetMethod)</tt>	Returns the current modelview matrix.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot. <a href=' /plotting/pygletplot/util.py#L31'>get_viewport</a>()</tt>	Returns the current viewport.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot. <a href=' /plotting/pygletplot/util.py#L80'>billboard_matrix</a>()</tt>	Removes rotational components of current matrix so that primitives.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.ColorScheme <a href=' /plotting/pygletplot/color_scheme.py#L234'>apply_to_curve</a>(verts,u_set,set_len,inc_pos)</tt>	Apply this color scheme to a set of vertices over a single.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.ColorScheme <a href=' /plotting/pygletplot/color_scheme.py#L272'>apply_to_surface</a>(verts,u_set,v_set,set_len)</tt>	Apply this color scheme to a set of vertices over two.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PlotModeBase <a href=' /plotting/pygletplot/plot_mode_base.py#L180'>push_wireframe</a>(function)</tt>	Push a function which performs gl commands used to build a display list.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PlotModeBase <a href=' /plotting/pygletplot/plot_mode_base.py#L192'>push_solid</a>(function)</tt>	Push a function which performs gl commands used to build a display list.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PlotObject <a href=' /plotting/pygletplot/plot_object.py#L14'>draw</a>()</tt>	Opengl rendering code for the plot object.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PygletPlot <a href=' /plotting/pygletplot/plot.py#L159'>__init__</a>()</tt>	Positional arguments ====================.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PygletPlot <a href=' /plotting/pygletplot/plot.py#L248'>show</a>()</tt>	Creates and displays a plot window or activates it gives it focus if it has already been created.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PygletPlot <a href=' /plotting/pygletplot/plot.py#L264'>close</a>()</tt>	Closes the plot window.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PygletPlot <a href=' /plotting/pygletplot/plot.py#L271'>saveimage</a>(outfile,format,size)</tt>	Saves a screen capture of the plot window to an image file.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PygletPlot <a href=' /plotting/pygletplot/plot.py#L286'>clear</a>()</tt>	Clears the function list of this plot.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PygletPlot <a href=' /plotting/pygletplot/plot.py#L295'>__getitem__</a>(i)</tt>	Returns the function at position i in the function list.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PygletPlot <a href=' /plotting/pygletplot/plot.py#L302'>__setitem__</a>(i,args)</tt>	Parses and adds a plotmode to the function list.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PygletPlot <a href=' /plotting/pygletplot/plot.py#L329'>__delitem__</a>(i)</tt>	Removes the function in the function list at position i.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PygletPlot <a href=' /plotting/pygletplot/plot.py#L339'>firstavailableindex</a>()</tt>	Returns the first unused index in the function list.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PygletPlot <a href=' /plotting/pygletplot/plot.py#L350'>append</a>()</tt>	Parses and adds a plotmode to the function list at the first available index.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PygletPlot <a href=' /plotting/pygletplot/plot.py#L357'>__len__</a>()</tt>	Returns the number of functions in the function list.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PygletPlot <a href=' /plotting/pygletplot/plot.py#L363'>__iter__</a>()</tt>	Allows iteration of the function list.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PygletPlot <a href=' /plotting/pygletplot/plot.py#L372'>__str__</a>()</tt>	Returns a string containing a new-line separated list of the functions in the function list.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PlotInterval <a href=' /plotting/pygletplot/plot_interval.py#L122'>try_parse</a>()</tt>	Returns a plotinterval if args can be interpreted as such otherwise none.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PlotInterval <a href=' /plotting/pygletplot/plot_interval.py#L139'>__repr__</a>()</tt>	A string representing the interval in class constructor form.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PlotInterval <a href=' /plotting/pygletplot/plot_interval.py#L145'>__str__</a>()</tt>	A string representing the interval in list form.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PlotInterval <a href=' /plotting/pygletplot/plot_interval.py#L155'>vrange</a>()</tt>	Yields v_steps+1 sympy numbers ranging from v_min to v_max.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PlotInterval <a href=' /plotting/pygletplot/plot_interval.py#L166'>vrange2</a>()</tt>	Yields v_steps pairs of sympy numbers ranging from (v_min v_min + step) to (v_max - step v_max).
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PlotMode <a href=' /plotting/pygletplot/plot_mode.py#L61'>__new__</a>(cls)</tt>	This is the function which interprets arguments given to plot.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PlotMode <a href=' /plotting/pygletplot/plot_mode.py#L91'>_get_mode</a>(mode_arg,i_var_count,d_var_count)</tt>	Tries to return an appropriate mode class.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PlotMode <a href=' /plotting/pygletplot/plot_mode.py#L204'>_register</a>(cls)</tt>	Called once for each user-usable plot mode.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot.PlotMode <a href=' /plotting/pygletplot/plot_mode.py#L236'>_init_mode</a>(cls)</tt>	Initializes the plot mode based on the 'mode-specific parameters' above.
<tt style='background-color:#E8E8E8;'> plotting.pygletplot. <a href=' /plotting/pygletplot/plot_mode.py#L387'>var_count_error</a>(is_independent,is_plotting)</tt>	Used to format an error message which differs slightly in 4 places.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/traverse.py#L8'>top_down</a>(rule,fns)</tt>	Apply a rule down a tree running it on the top nodes first.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/traverse.py#L13'>bottom_up</a>(rule,fns)</tt>	Apply a rule down a tree running it on the bottom nodes first.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/traverse.py#L18'>top_down_once</a>(rule,fns)</tt>	Apply a rule down a tree - stop on success.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/traverse.py#L23'>bottom_up_once</a>(rule,fns)</tt>	Apply a rule up a tree - stop on success.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/traverse.py#L28'>sall</a>(rule,fns)</tt>	Strategic all - apply rule to args.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/core.py#L8'>exhaust</a>(rule)</tt>	Apply a rule repeatedly until it has no effect.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/core.py#L17'>memoize</a>(rule)</tt>	Memoized version of a rule.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/core.py#L29'>condition</a>(cond,rule)</tt>	Only apply rule if condition is true.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/core.py#L38'>chain</a>()</tt>	Compose a sequence of rules so that they apply to the expr sequentially.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/core.py#L48'>debug</a>(rule,file)</tt>	Print out before and after expressions each time rule is used.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/core.py#L62'>null_safe</a>(rule)</tt>	Return original expr if rule returns none.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/core.py#L72'>tryit</a>(rule)</tt>	Return original expr if rule raises exception.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/core.py#L81'>do_one</a>()</tt>	Try each of the rules until one works then stop.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/core.py#L91'>switch</a>(key,ruledict)</tt>	Select a rule based on the result of key called on the function.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/core.py#L100'>minimize</a>()</tt>	Select result of rules that minimizes objective >>> from sympy.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/rl.py#L115'>subs</a>(d)</tt>	Full simultaneous exact substitution examples.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/tools.py#L25'>canon</a>()</tt>	Strategy for canonicalization apply each rule in a bottom_up fashion through the tree.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/tools.py#L34'>typed</a>(ruletypes)</tt>	Apply rules based on the expression type inputs.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/rl.py#L12'>rm_id</a>(isid,new)</tt>	Create a rule to remove identities isid - fn :: x -> bool --- whether or not this element is an identity.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/rl.py#L41'>glom</a>(key,count,combine)</tt>	Create a rule to conglomerate identical args >>> from sympy.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/rl.py#L77'>sort</a>(key,new)</tt>	Create a rule to sort by a key function >>> from sympy.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/rl.py#L91'>distribute</a>(A,B)</tt>	Turns an a containing bs into a b of as where a b are container types.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/rl.py#L115'>subs</a>(a,b)</tt>	Replace expressions exactly.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/rl.py#L126'>unpack</a>(expr)</tt>	Rule to unpack singleton args >>> from sympy.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/rl.py#L139'>flatten</a>(expr,new)</tt>	Flatten t(a b t c d t2 e to t(a b c d t2 e.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/rl.py#L150'>rebuild</a>(expr)</tt>	Rebuild a sympy tree this function recursively calls constructors in the expression tree.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/tree.py#L10'>treeapply</a>(tree,join,leaf)</tt>	Apply functions onto recursive containers tree join - a dictionary mapping container types to functions.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/tree.py#L41'>greedy</a>(tree,objective)</tt>	Execute a strategic tree select alternatives greedily.
<tt style='background-color:#E8E8E8;'> strategies. <a href=' /strategies/tree.py#L110'>allresults</a>(tree,leaf)</tt>	Execute a strategic tree return all possibilities.
<tt style='background-color:#E8E8E8;'> strategies.branch. <a href=' /strategies/branch/traverse.py#L10'>top_down</a>(brule,fns)</tt>	Apply a rule down a tree running it on the top nodes first.
<tt style='background-color:#E8E8E8;'> strategies.branch. <a href=' /strategies/branch/traverse.py#L15'>sall</a>(brule,fns)</tt>	Strategic all - apply rule to args.
<tt style='background-color:#E8E8E8;'> strategies.branch. <a href=' /strategies/branch/core.py#L9'>exhaust</a>(brule)</tt>	Apply a branching rule repeatedly until it has no effect.
<tt style='background-color:#E8E8E8;'> strategies.branch. <a href=' /strategies/branch/core.py#L30'>debug</a>(brule,file)</tt>	Print the input and output expressions at each rule application.
<tt style='background-color:#E8E8E8;'> strategies.branch. <a href=' /strategies/branch/core.py#L42'>multiplex</a>()</tt>	Multiplex many branching rules into one.
<tt style='background-color:#E8E8E8;'> strategies.branch. <a href=' /strategies/branch/core.py#L53'>condition</a>(cond,brule)</tt>	Only apply branching rule if condition is true.
<tt style='background-color:#E8E8E8;'> strategies.branch. <a href=' /strategies/branch/core.py#L62'>sfilter</a>(pred,brule)</tt>	Yield only those results which satisfy the predicate.
<tt style='background-color:#E8E8E8;'> strategies.branch. <a href=' /strategies/branch/core.py#L79'>do_one</a>()</tt>	Execute one of the branching rules.
<tt style='background-color:#E8E8E8;'> strategies.branch. <a href=' /strategies/branch/core.py#L91'>chain</a>()</tt>	Compose a sequence of brules so that they apply to the expr sequentially.
<tt style='background-color:#E8E8E8;'> strategies.branch. <a href=' /strategies/branch/core.py#L107'>yieldify</a>(rl)</tt>	Turn a rule into a branching rule.
<tt style='background-color:#E8E8E8;'> strategies.branch. <a href=' /strategies/branch/tools.py#L6'>canon</a>()</tt>	Strategy for canonicalization apply each branching rule in a top-down fashion through the tree.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L220'>TR0</a>(rv)</tt>	Simplification of rational polynomials trying to simplify the expression e.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L229'>TR1</a>(rv)</tt>	Replace sec csc with 1/cos 1/sin examples.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L253'>TR2</a>(rv)</tt>	Replace tan and cot with sin/cos and cos/sin examples.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L283'>TR2i</a>(rv,half)</tt>	Converts ratios involving sin and cos as follows : sin x /cos x -> tan x.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L399'>TR3</a>(rv)</tt>	Induced formula example sin -a = -sin a examples.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L439'>TR4</a>(rv)</tt>	Identify values of special angles.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L467'>_TR56</a>(rv,f,g,h)</tt>	Helper for tr5 and tr6 to replace f**2 with h(g**2) options.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L524'>TR5</a>(rv,max,pow)</tt>	Replacement of sin**2 with 1 - cos x **2.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L545'>TR6</a>(rv,max,pow)</tt>	Replacement of cos**2 with 1 - sin x **2.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L566'>TR7</a>(rv)</tt>	Lowering the degree of cos x **2 examples.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L590'>TR8</a>(rv,first)</tt>	Converting products of cos and/or sin to a sum or difference of cos and or sin terms.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L665'>TR9</a>(rv)</tt>	Sum of cos or sin terms as a product of cos or sin.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L759'>TR10</a>(rv,first)</tt>	Separate sums in cos and sin.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L807'>TR10i</a>(rv)</tt>	Sum of products to function of sum.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L939'>TR11</a>(rv,base)</tt>	Function of double angle to product the base argument can be used.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L1019'>TR12</a>(rv,first)</tt>	Separate sums in tan.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L1055'>TR12i</a>(rv)</tt>	Combine tan arguments as (tan y + tan x )/(tan x *tan y - 1) -> -tan x + y.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L1180'>TR13</a>(rv)</tt>	Change products of tan or cot.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L1227'>TRmorrie</a>(rv)</tt>	Returns cos x *cos(2*x)* *cos(2** k-1 *x) -> sin(2**k*x)/(2**k*sin x.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L1344'>TR14</a>(rv,first)</tt>	Convert factored powers of sin and cos identities into simpler expressions.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L1465'>TR15</a>(rv,max,pow)</tt>	Convert sin x *-2 to 1 + cot x **2.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L1494'>TR16</a>(rv,max,pow)</tt>	Convert cos x *-2 to 1 + tan x **2.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L1523'>TR111</a>(rv)</tt>	Convert f x **-i to g x **i where either i is an integer or the base is positive and f g are tan cot sin csc or cos sec.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L1555'>TR22</a>(rv,max,pow)</tt>	Convert tan x **2 to sec x **2 - 1 and cot x **2 to csc x **2 - 1.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L1584'>L</a>(rv)</tt>	Return count of trigonometric functions in expression.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L1636'>fu</a>(rv,measure)</tt>	Attempt to simplify expression by using transformation rules given in the algorithm by fu et al.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L1727'>process_common_addends</a>(rv,do,key2,key1)</tt>	Apply do to addends of rv that (if key1=true) share at least a common absolute value of their coefficient and the value of key2 when.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L1783'>trig_split</a>(a,b,two)</tt>	Return the gcd s1 s2 a1 a2 bool where if two is false default then :.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L1965'>as_f_sign_1</a>(e)</tt>	If e is a sum that can be written as g* a + s where s is +/-1, return g, a, and s where a does.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L2022'>_osborne</a>(e,d)</tt>	Replace all hyperbolic functions with trig functions using the osborne rule.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L2058'>_osbornei</a>(e,d)</tt>	Replace all trig functions with hyperbolic functions using the osborne rule.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/fu.py#L2096'>hyper_as_trig</a>(rv)</tt>	Return an expression containing hyperbolic functions in terms of trigonometric functions.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L100'>add_formulae</a>(formulae)</tt>	Create our knowledge base.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L459'>make_simp</a>(z)</tt>	Create a function that simplifies rational functions in z.
<tt style='background-color:#E8E8E8;'> simplify.Hyper_Function <a href=' /simplify/hyperexpand.py#L495'>gamma</a>()</tt>	Number of upper parameters that are negative integers this is a transformation invariant.
<tt style='background-color:#E8E8E8;'> simplify.Hyper_Function <a href=' /simplify/hyperexpand.py#L511'>build_invariants</a>()</tt>	Compute the invariant vector.
<tt style='background-color:#E8E8E8;'> simplify.Hyper_Function <a href=' /simplify/hyperexpand.py#L552'>difficulty</a>(func)</tt>	Estimate how many steps it takes to reach func from self.
<tt style='background-color:#E8E8E8;'> simplify.Hyper_Function <a href=' /simplify/hyperexpand.py#L575'>_is_suitable_origin</a>()</tt>	Decide if self is a suitable origin.
<tt style='background-color:#E8E8E8;'> simplify.G_Function <a href=' /simplify/hyperexpand.py#L622'>compute_buckets</a>()</tt>	Compute buckets for the fours sets of parameters.
<tt style='background-color:#E8E8E8;'> simplify.Formula <a href=' /simplify/hyperexpand.py#L682'>_compute_basis</a>(closed_form)</tt>	Compute a set of functions b=(f1 fn), a nxn matrix m.
<tt style='background-color:#E8E8E8;'> simplify.Formula <a href=' /simplify/hyperexpand.py#L732'>find_instantiations</a>(func)</tt>	Find substitutions of the free symbols that match func.
<tt style='background-color:#E8E8E8;'> simplify.FormulaCollection <a href=' /simplify/hyperexpand.py#L798'>__init__</a>()</tt>	Doing this globally at module init time is a pain.
<tt style='background-color:#E8E8E8;'> simplify.FormulaCollection <a href=' /simplify/hyperexpand.py#L817'>lookup_origin</a>(func)</tt>	Given the suitable target func, try to find an origin in our knowledge base.
<tt style='background-color:#E8E8E8;'> simplify.MeijerFormula <a href=' /simplify/hyperexpand.py#L893'>try_instantiate</a>(func)</tt>	Try to instantiate the current formula to almost match func.
<tt style='background-color:#E8E8E8;'> simplify.MeijerFormulaCollection <a href=' /simplify/hyperexpand.py#L922'>lookup_origin</a>(func)</tt>	Try to find a formula that matches func.
<tt style='background-color:#E8E8E8;'> simplify.Operator <a href=' /simplify/hyperexpand.py#L956'>apply</a>(obj,op)</tt>	Apply self to the object obj, where the generator is op.
<tt style='background-color:#E8E8E8;'> simplify.UnShiftA <a href=' /simplify/hyperexpand.py#L1015'>__init__</a>(ap,bq,i,z)</tt>	Note i counts from zero!.
<tt style='background-color:#E8E8E8;'> simplify.UnShiftB <a href=' /simplify/hyperexpand.py#L1056'>__init__</a>(ap,bq,i,z)</tt>	Note i counts from zero!.
<tt style='background-color:#E8E8E8;'> simplify.MeijerUnShiftA <a href=' /simplify/hyperexpand.py#L1142'>__init__</a>(an,ap,bm,bq)</tt>	Note i counts from zero!.
<tt style='background-color:#E8E8E8;'> simplify.MeijerUnShiftB <a href=' /simplify/hyperexpand.py#L1188'>__init__</a>(an,ap,bm,bq)</tt>	Note i counts from zero!.
<tt style='background-color:#E8E8E8;'> simplify.MeijerUnShiftC <a href=' /simplify/hyperexpand.py#L1240'>__init__</a>(an,ap,bm,bq)</tt>	Note i counts from zero!.
<tt style='background-color:#E8E8E8;'> simplify.MeijerUnShiftD <a href=' /simplify/hyperexpand.py#L1288'>__init__</a>(an,ap,bm,bq)</tt>	Note i counts from zero!.
<tt style='background-color:#E8E8E8;'> simplify.ReduceOrder <a href=' /simplify/hyperexpand.py#L1335'>__new__</a>(cls,ai,bj)</tt>	For convenience if reduction is not possible return none.
<tt style='background-color:#E8E8E8;'> simplify.ReduceOrder <a href=' /simplify/hyperexpand.py#L1357'>_meijer</a>(cls,b,a,sign)</tt>	Cancel b + sign*s and a + sign*s this is for meijer g functions.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L1396'>_reduce_order</a>(ap,bq,gen,key)</tt>	Order reduction algorithm used in hypergeometric and meijer g.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L1422'>reduce_order</a>(func)</tt>	Given the hypergeometric function func, find a sequence of operators to reduces order as much as possible.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L1447'>reduce_order_meijer</a>(func)</tt>	Given the meijer g function parameters func, find a sequence of operators that reduces order as much as possible.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L1477'>make_derivative_operator</a>(M,z)</tt>	Create a derivative operator to be passed to operator apply.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L1486'>apply_operators</a>(obj,ops,op)</tt>	Apply the list of operators ops to object obj, substituting op for the generator.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L1497'>devise_plan</a>(target,origin,z)</tt>	Devise a plan consisting of shift and un-shift operators to be applied to the hypergeometric function target to yield origin.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L1631'>try_shifted_sum</a>(func,z)</tt>	Try to recognise a hypergeometric sum that starts from k > 0.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L1680'>try_polynomial</a>(func,z)</tt>	Recognise polynomial cases returns none if not such a case.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L1710'>try_lerchphi</a>(func)</tt>	Try to find an expression for hyper_function func in terms of lerch transcendents.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L1843'>build_hypergeometric_formula</a>(func)</tt>	Create a formula object representing the hypergeometric function func.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L1902'>hyperexpand_special</a>(ap,bq,z)</tt>	Try to find a closed-form expression for hyper ap bq z where z is supposed to be a "special" value e.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L1941'>_hyperexpand</a>(func,z,ops0,z0)</tt>	Try to find an expression for the hypergeometric function func.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L2044'>devise_plan_meijer</a>(fro,to,z)</tt>	Find operators to convert g-function fro into g-function to.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L2176'>_meijergexpand</a>(func,z0,allow_hyper,rewrite)</tt>	Try to find an expression for the meijer g function specified by the g_function func.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/hyperexpand.py#L2432'>hyperexpand</a>(f,allow_hyper,rewrite,place)</tt>	Expand hypergeometric functions if allow_hyper is true allow partial.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/powsimp.py#L17'>powsimp</a>(expr,deep,combine,force)</tt>	Reduces expression by combining powers with similar bases and exponents.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/powsimp.py#L486'>powdenest</a>(eq,force,polar)</tt>	Collect exponents on powers as assumptions allow.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L41'>separatevars</a>(expr,symbols,dict,force)</tt>	Separates variables in an expression if possible by.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L205'>posify</a>(eq)</tt>	Return eq with generic symbols made positive and a dictionary containing the mapping between the old and new.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L263'>hypersimp</a>(f,k)</tt>	Given combinatorial term f k simplify its consecutive term ratio i.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L304'>hypersimilar</a>(f,g,k)</tt>	Returns true if 'f' and 'g' are hyper-similar.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L322'>signsimp</a>(expr,evaluate)</tt>	Make all add sub-expressions canonical wrt sign.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L384'>simplify</a>(expr,ratio,measure,fu)</tt>	Simplifies the given expression.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L615'>sum_simplify</a>(s)</tt>	Main function for sum simplification.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L658'>sum_combine</a>(s_t)</tt>	Helper function for sum simplification.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L687'>factor_sum</a>(limits,radical,clear,fraction)</tt>	Helper function for sum simplification.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L719'>sum_add</a>(other,method)</tt>	Helper function for sum simplification.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L766'>product_simplify</a>(s)</tt>	Main function for product simplification.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L800'>product_mul</a>(other,method)</tt>	Helper function for product simplification.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L827'>_nthroot_solve</a>(p,n,prec)</tt>	Helper function for nthroot.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L852'>logcombine</a>(expr,force)</tt>	Takes logarithms and combines them using the following rules - log x + log y == log(x*y) if both are not negative.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L987'>bottom_up</a>(rv,F,atoms,nonbasic)</tt>	Apply f to all expressions in an expression tree from the bottom up.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L1011'>besselsimp</a>(expr)</tt>	Simplify bessel-type functions.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L1099'>nthroot</a>(expr,n,max_len,prec)</tt>	Compute a real nth-root of a sum of surds parameters.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L1159'>nsimplify</a>(expr,constants,tolerance,full)</tt>	Find a simple representation for a number or if there are free symbols or if rational=true then replace floats with their rational equivalents.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L1284'>_real_to_rational</a>(expr,tolerance)</tt>	Replace all reals in expr with rationals.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/simplify.py#L1330'>clear_coefficients</a>(expr,rhs)</tt>	Return p r where p is the expression obtained when rational additive and multiplicative coefficients of expr have been stripped.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/trigsimp.py#L28'>trigsimp_groebner</a>(expr,hints,quick,order)</tt>	Simplify trigonometric expressions using a groebner basis algorithm.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/trigsimp.py#L428'>trigsimp</a>(expr)</tt>	Reduces expression by using known trig identities notes.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/trigsimp.py#L516'>exptrigsimp</a>(expr,simplify)</tt>	Simplifies exponential / trigonometric / hyperbolic functions.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/trigsimp.py#L591'>trigsimp_old</a>(expr)</tt>	Reduces expression by using known trig identities notes.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/trigsimp.py#L726'>_dotrig</a>(a,b)</tt>	Helper to tell whether a and b have the same sorts of symbols in them -- no need to test hyperbolic patterns against.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/trigsimp.py#L820'>_replace_mul_fpowxgpow</a>(expr,f,g,rexp)</tt>	Helper for _match_div_rewrite.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/trigsimp.py#L868'>_match_div_rewrite</a>(expr,i)</tt>	Helper for __trigsimp.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/trigsimp.py#L920'>__trigsimp</a>(expr,deep)</tt>	Recursive helper for trigsimp.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/trigsimp.py#L1095'>_futrig</a>(e)</tt>	Helper for futrig.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/trigsimp.py#L1156'>_is_Expr</a>(e)</tt>	_eapply helper to tell whether e and all its args are exprs.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/trigsimp.py#L1164'>_eapply</a>(func,e,cond)</tt>	Apply func to e if all args are exprs else only apply it to those args that *are* exprs.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/ratsimp.py#L11'>ratsimp</a>(expr)</tt>	Put an expression over a common denominator cancel and reduce.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/ratsimp.py#L33'>ratsimpmodprime</a>(expr,G)</tt>	Simplifies a rational expression expr modulo the prime ideal generated by g.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/traversaltools.py#L8'>use</a>(expr,func,level,args)</tt>	Use func to transform expr at the given level.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/cse_opts.py#L12'>sub_pre</a>(e)</tt>	Replace y - x with - x - y if -1 can be extracted from y - x.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/cse_opts.py#L32'>sub_post</a>(e)</tt>	Replace 1*-1*x with -x.
<tt style='background-color:#E8E8E8;'> simplify.EPath <a href=' /simplify/epathtools.py#L32'>__new__</a>(cls,path)</tt>	Construct new epath.
<tt style='background-color:#E8E8E8;'> simplify.EPath <a href=' /simplify/epathtools.py#L122'>_get_ordered_args</a>(expr)</tt>	Sort expr args using printing order.
<tt style='background-color:#E8E8E8;'> simplify.EPath <a href=' /simplify/epathtools.py#L131'>_hasattrs</a>(expr,attrs)</tt>	Check if expr has any of attrs.
<tt style='background-color:#E8E8E8;'> simplify.EPath <a href=' /simplify/epathtools.py#L139'>_hastypes</a>(expr,types)</tt>	Check if expr is any of types.
<tt style='background-color:#E8E8E8;'> simplify.EPath <a href=' /simplify/epathtools.py#L144'>_has</a>(expr,attrs,types)</tt>	Apply _hasattrs and _hastypes to expr.
<tt style='background-color:#E8E8E8;'> simplify.EPath <a href=' /simplify/epathtools.py#L157'>apply</a>(expr,func,args,kwargs)</tt>	Modify parts of an expression selected by a path.
<tt style='background-color:#E8E8E8;'> simplify.EPath <a href=' /simplify/epathtools.py#L227'>select</a>(expr)</tt>	Retrieve parts of an expression selected by a path.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/epathtools.py#L284'>epath</a>(path,expr,func,args)</tt>	Manipulate parts of an expression selected by a path.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/sqrtdenest.py#L13'>is_sqrt</a>(expr)</tt>	Return true if expr is a sqrt otherwise false.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/sqrtdenest.py#L19'>sqrt_depth</a>(p)</tt>	Return the maximum depth of any square root argument of p.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/sqrtdenest.py#L48'>is_algebraic</a>(p)</tt>	Return true if p is comprised of only rationals or square roots of rationals and algebraic operations.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/sqrtdenest.py#L76'>_subsets</a>(n)</tt>	Returns all possible subsets of the set (0 1 n-1) except the.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/sqrtdenest.py#L105'>sqrtdenest</a>(expr,max_iter)</tt>	Denests sqrts in an expression that contain other square roots if possible otherwise returns the expr unchanged.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/sqrtdenest.py#L139'>_sqrt_match</a>(p)</tt>	Return [a b r] for p match(a + b*sqrt r where in addition to.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/sqrtdenest.py#L221'>_sqrtdenest0</a>(expr)</tt>	Returns expr after denesting its arguments.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/sqrtdenest.py#L246'>_sqrtdenest_rec</a>(expr)</tt>	Helper that denests the square root of three or more surds.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/sqrtdenest.py#L307'>_sqrtdenest1</a>(expr,denester)</tt>	Return denested expr after denesting with simpler methods or that failing using the denester.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/sqrtdenest.py#L366'>_sqrt_symbolic_denest</a>(a,b,r)</tt>	Given an expression sqrt(a + b*sqrt b ), return the denested expression or none.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/sqrtdenest.py#L427'>_sqrt_numeric_denest</a>(a,b,r,d2)</tt>	Helper that denest expr = a + b*sqrt r with d2 = a**2 - b**2*r > 0 or returns none if not denested.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/sqrtdenest.py#L444'>sqrt_biquadratic_denest</a>(expr,a,b,r)</tt>	Denest expr = sqrt(a + b*sqrt r where a b r are linear combinations of square roots of.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/sqrtdenest.py#L516'>_denester</a>(nested,av0,h,max_depth_level)</tt>	Denests a list of expressions that contain nested square roots.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/combsimp.py#L15'>combsimp</a>(expr)</tt>	Simplify combinatorial expressions.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/cse_main.py#L37'>reps_toposort</a>(r)</tt>	Sort replacements r so k1 v1 appears before k2 v2 if k2 is in v1's free symbols.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/cse_main.py#L66'>cse_separate</a>(r,e)</tt>	Move expressions that are in the form symbol expr out of the expressions and sort them into the replacements using the reps_toposort.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/cse_main.py#L94'>preprocess_for_cse</a>(expr,optimizations)</tt>	Preprocess an expression to optimize for common subexpression elimination.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/cse_main.py#L116'>postprocess_for_cse</a>(expr,optimizations)</tt>	Postprocess an expression after common subexpression elimination to return the expression to canonical sympy form.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/cse_main.py#L140'>pairwise_most_common</a>(sets)</tt>	Return a list of s l tuples where s is the largest subset of elements that appear in pairs of sets given by sets and l.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/cse_main.py#L179'>opt_cse</a>(exprs,order,verbose)</tt>	Find optimization opportunities in adds muls pows and negative coefficient muls.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/cse_main.py#L418'>tree_cse</a>(exprs,symbols,opt_subs,order)</tt>	Perform raw cse on expression tree taking opt_subs into account.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/cse_main.py#L567'>cse</a>(exprs,symbols,optimizations,postprocess)</tt>	Perform common subexpression elimination on an expression.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/radsimp.py#L22'>collect</a>(expr,syms,func,evaluate)</tt>	Collect additive terms of an expression.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/radsimp.py#L409'>rcollect</a>(expr)</tt>	Recursively collect sums in an expression.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/radsimp.py#L439'>collect_sqrt</a>(expr,evaluate)</tt>	Return expr with terms having common square roots collected together.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/radsimp.py#L517'>collect_const</a>(expr)</tt>	A non-greedy collection of terms with similar number coefficients in an add expr.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/radsimp.py#L630'>radsimp</a>(expr,symbolic,max_terms)</tt>	Rationalize the denominator by removing square roots.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/radsimp.py#L880'>rad_rationalize</a>(num,den)</tt>	Rationalize num/den by removing square roots in the denominator num and den are sum of terms whose squares are rationals.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/radsimp.py#L902'>fraction</a>(expr,exact)</tt>	Returns a pair with expression's numerator and denominator.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/radsimp.py#L1014'>split_surds</a>(expr)</tt>	Split an expression with terms whose squares are rationals into a sum of terms whose surds squared have gcd equal to g.
<tt style='background-color:#E8E8E8;'> simplify. <a href=' /simplify/radsimp.py#L1055'>_split_gcd</a>()</tt>	Split the list of integers a into a list of integers a1 having g = gcd a1 , and a list a2 whose elements are not divisible by.
<tt style='background-color:#E8E8E8;'> interactive. <a href=' /interactive/printing.py#L15'>_init_python_printing</a>(stringify_func)</tt>	Setup printing in python interactive session.
<tt style='background-color:#E8E8E8;'> interactive. <a href=' /interactive/printing.py#L36'>_init_ipython_printing</a>(ip,stringify_func,use_latex,euler)</tt>	Setup printing in ipython interactive session.
<tt style='background-color:#E8E8E8;'> interactive. <a href=' /interactive/printing.py#L233'>_is_ipython</a>(shell)</tt>	Is a shell instance an ipython shell?.
<tt style='background-color:#E8E8E8;'> interactive. <a href=' /interactive/printing.py#L251'>init_printing</a>(pretty_print,order,use_unicode,use_latex)</tt>	Initializes pretty-printer depending on the environment.
<tt style='background-color:#E8E8E8;'> interactive. <a href=' /interactive/session.py#L32'>_make_message</a>(ipython,quiet,source)</tt>	Create a banner for an interactive session.
<tt style='background-color:#E8E8E8;'> interactive. <a href=' /interactive/session.py#L88'>int_to_Integer</a>(s)</tt>	Wrap integer literals with integer.
<tt style='background-color:#E8E8E8;'> interactive. <a href=' /interactive/session.py#L140'>enable_automatic_int_sympification</a>(app)</tt>	Allow ipython to automatically convert integer literals to integer.
<tt style='background-color:#E8E8E8;'> interactive. <a href=' /interactive/session.py#L172'>enable_automatic_symbols</a>(app)</tt>	Allow ipython to automatially create symbols (isympy -a).
<tt style='background-color:#E8E8E8;'> interactive. <a href=' /interactive/session.py#L247'>init_ipython_session</a>(argv,auto_symbols,auto_int_to_Integer)</tt>	Construct new ipython session.
<tt style='background-color:#E8E8E8;'> interactive. <a href=' /interactive/session.py#L279'>init_python_session</a>()</tt>	Construct new python session.
<tt style='background-color:#E8E8E8;'> interactive. <a href=' /interactive/session.py#L312'>init_session</a>(ipython,pretty_print,order,use_unicode)</tt>	Initialize an embedded ipython or python session the ipython session is.
<tt style='background-color:#E8E8E8;'> interactive. <a href=' /interactive/ipythonprinting.py#L40'>load_ipython_extension</a>(ip)</tt>	Load the extension in ipython.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/primetest.py#L19'>is_square</a>(n,prep)</tt>	Return true if n == a * a for some integer a else false.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/primetest.py#L49'>_test</a>(n,base,s,t)</tt>	Miller-rabin strong pseudoprime test for one base.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/primetest.py#L70'>mr</a>(n,bases)</tt>	Perform a miller-rabin strong pseudoprime test on n using a given list of bases/witnesses.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/primetest.py#L113'>_lucas_sequence</a>(n,P,Q,k)</tt>	Return the modular lucas sequence (u_k v_k q_k).
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/primetest.py#L197'>_lucas_selfridge_params</a>(n)</tt>	Calculates the selfridge parameters d p q for n this is.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/primetest.py#L222'>_lucas_extrastrong_params</a>(n)</tt>	Calculates the "extra strong" parameters d p q for n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/primetest.py#L245'>is_lucas_prp</a>(n)</tt>	Standard lucas compositeness test with selfridge parameters returns.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/primetest.py#L292'>is_strong_lucas_prp</a>(n)</tt>	Strong lucas compositeness test with selfridge parameters returns.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/primetest.py#L351'>is_extra_strong_lucas_prp</a>(n)</tt>	Extra strong lucas compositeness test returns false if n is.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/primetest.py#L426'>isprime</a>(n)</tt>	Test if n is a prime number true or not false for n < 2^64 the.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/partitions_.py#L37'>_a</a>(n,k,prec)</tt>	Compute the inner sum in hrr formula [1]_ references.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/partitions_.py#L123'>_d</a>(n,j,prec,sq23pi)</tt>	Compute the sinh term in the outer sum of the hrr formula.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/partitions_.py#L141'>npartitions</a>(n,verbose)</tt>	Calculate the partition function p n i e the number of ways that.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/bbp_pi.py#L113'>pi_hex_digits</a>(n,prec)</tt>	Returns a string containing prec default 14 digits starting at the nth digit of pi in hex.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L25'>smoothness</a>(n)</tt>	Return the b-smooth and b-power smooth values of n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L52'>smoothness_p</a>(n,m,power,visual)</tt>	Return a list of [m (p (m sm p + m psm p + m )) ].
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L155'>trailing</a>(n)</tt>	Count the number of trailing zero digits in the binary representation of n i.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L193'>multiplicity</a>(p,n)</tt>	Find the greatest integer m such that p**m divides n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L264'>perfect_power</a>(n,candidates,big,factor)</tt>	Return b e such that n == b**e if n is a perfect power otherwise return false.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L368'>pollard_rho</a>(n,s,a,retries)</tt>	Use pollard's rho method to try to extract a nontrivial factor of n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L483'>pollard_pm1</a>(n,B,a,retries)</tt>	Use pollard's p-1 method to try to extract a nontrivial factor of n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L639'>_trial</a>(factors,n,candidates,verbose)</tt>	Helper function for integer factorization trial factors n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L660'>_check_termination</a>(factors,n,limitp1,use_trial)</tt>	Helper function for integer factorization checks if n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L704'>_factorint_small</a>(factors,n,limit,fail_max)</tt>	Return the value of n and either a 0 indicating that factorization up to the limit was complete or else the next near-prime that would have.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L805'>factorint</a>(n,limit,use_trial,use_rho)</tt>	Given a positive integer n, factorint n returns a dict containing the prime factors of n as keys and their respective multiplicities.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L1190'>factorrat</a>(rat,limit,use_trial,use_rho)</tt>	Given a rational r, factorrat r returns a dict containing the prime factors of r as keys and their respective multiplicities.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L1254'>primefactors</a>(n,limit,verbose)</tt>	Return a sorted list of n's prime factors ignoring multiplicity and any composite factor that remains if the limit was set too low.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L1294'>_divisors</a>(n)</tt>	Helper function for divisors which generates the divisors.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L1315'>divisors</a>(n,generator)</tt>	Return all divisors of n sorted from 1 n by default.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L1358'>divisor_count</a>(n,modulus)</tt>	Return the number of divisors of n if modulus is not 1 then only.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L1389'>_udivisors</a>(n)</tt>	Helper function for udivisors which generates the unitary divisors.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L1403'>udivisors</a>(n,generator)</tt>	Return all unitary divisors of n sorted from 1 n by default.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L1449'>udivisor_count</a>(n)</tt>	Return the number of unitary divisors of n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L1473'>_antidivisors</a>(n)</tt>	Helper function for antidivisors which generates the antidivisors.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L1488'>antidivisors</a>(n,generator)</tt>	Return all antidivisors of n sorted from 1 n by default.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L1525'>antidivisor_count</a>(n)</tt>	Return the number of antidivisors [1]_ of n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L1713'>core</a>(n,t)</tt>	Calculate core n t = core_t n of a positive integer n core_2 n is equal to the squarefree part of n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/factor_.py#L1776'>digits</a>(n,b)</tt>	Return a list of the digits of n in base b the first element in the list.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/egyptian_fraction.py#L13'>egyptian_fraction</a>(r,algorithm)</tt>	Return the list of denominators of an egyptian fraction expansion [1]_ of the said rational r.
<tt style='background-color:#E8E8E8;'> ntheory.Sieve <a href=' /ntheory/generate.py#L48'>_reset</a>()</tt>	Return sieve to its initial state for testing purposes.
<tt style='background-color:#E8E8E8;'> ntheory.Sieve <a href=' /ntheory/generate.py#L53'>extend</a>(n)</tt>	Grow the sieve to cover all primes <= n a real number.
<tt style='background-color:#E8E8E8;'> ntheory.Sieve <a href=' /ntheory/generate.py#L90'>extend_to_no</a>(i)</tt>	Extend to include the ith prime number.
<tt style='background-color:#E8E8E8;'> ntheory.Sieve <a href=' /ntheory/generate.py#L111'>primerange</a>(a,b)</tt>	Generate all prime numbers in the range [a b).
<tt style='background-color:#E8E8E8;'> ntheory.Sieve <a href=' /ntheory/generate.py#L140'>search</a>(n)</tt>	Return the indices i j of the primes that bound n.
<tt style='background-color:#E8E8E8;'> ntheory.Sieve <a href=' /ntheory/generate.py#L184'>__getitem__</a>(n)</tt>	Return the nth prime number.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/generate.py#L198'>prime</a>(nth)</tt>	Return the nth prime with the primes indexed as prime 1 = 2 prime 2 = 3 etc.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/generate.py#L273'>primepi</a>(n)</tt>	Return the value of the prime counting function pi n = the number of prime numbers less than or equal to n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/generate.py#L374'>nextprime</a>(n,ith)</tt>	Return the ith prime greater than n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/generate.py#L442'>prevprime</a>(n)</tt>	Return the largest prime smaller than n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/generate.py#L493'>primerange</a>(a,b)</tt>	Generate a list of all prime numbers in the range [a b).
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/generate.py#L575'>randprime</a>(a,b)</tt>	Return a random prime number in the range [a b).
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/generate.py#L613'>primorial</a>(n,nth)</tt>	Returns the product of the first n primes default or the primes less than or equal to n (when nth=false).
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/generate.py#L676'>cycle_length</a>(f,x0,nmax,values)</tt>	For a given iterated sequence return a generator that gives the length of the iterated cycle lambda and the length of terms.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/generate.py#L765'>composite</a>(nth)</tt>	Return the nth composite number with the composite numbers indexed as composite 1 = 4 composite 2 = 6 etc.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/generate.py#L831'>compositepi</a>(n)</tt>	Return the number of positive composite numbers less than or equal to n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L16'>n_order</a>(a,n)</tt>	Returns the order of a modulo n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L59'>_primitive_root_prime_iter</a>(p)</tt>	Generates the primitive roots for a prime p references.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L87'>primitive_root</a>(p)</tt>	Returns the smallest primitive root or none references.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L152'>is_primitive_root</a>(a,p)</tt>	Returns true if a is a primitive root of p a is said to be the primitive root of p if gcd a p == 1 and.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L183'>_sqrt_mod_tonelli_shanks</a>(a,p)</tt>	Returns the square root in the case of p prime with p == 1 mod 8 references.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L215'>sqrt_mod</a>(a,p,all_roots)</tt>	Find a root of x**2 = a mod p parameters.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L267'>_product</a>()</tt>	Cartesian product generator notes.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L301'>sqrt_mod_iter</a>(a,p,domain)</tt>	Iterate over solutions to x**2 = a mod p parameters.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L361'>_sqrt_mod_prime_power</a>(a,p,k)</tt>	Find the solutions to x**2 = a mod p**k when a % p != 0 parameters.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L478'>_sqrt_mod1</a>(a,p,n)</tt>	Find solution to x**2 == a mod p**n when a % p == 0 see http //www.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L583'>is_quad_residue</a>(a,p)</tt>	Returns true if a (mod p) is in the set of squares mod p, i.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L619'>is_nthpow_residue</a>(a,n,m)</tt>	Returns true if x**n == a mod m has solutions.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L647'>_is_nthpow_residue_bign</a>(a,n,m)</tt>	Returns true if x**n == a mod m has solutions for n > 2.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L662'>_is_nthpow_residue_bign_prime_power</a>(a,n,p,k)</tt>	Returns true/false if a solution for x**n == a (mod(p**k)) does/doesn't exist.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L697'>_nthroot_mod1</a>(s,q,p,all_roots)</tt>	Root of x**q = s mod p, p prime and q divides p - 1 references.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L745'>nthroot_mod</a>(a,n,p,all_roots)</tt>	Find the solutions to x**n = a mod p parameters.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L809'>quadratic_residues</a>(p)</tt>	Returns the list of quadratic residues.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L826'>legendre_symbol</a>(a,p)</tt>	Returns the legendre symbol (a / p).
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L872'>jacobi_symbol</a>(m,n)</tt>	Returns the jacobi symbol (m / n).
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L1018'>_discrete_log_trial_mul</a>(n,a,b,order)</tt>	Trial multiplication algorithm for computing the discrete logarithm of a to the base b modulo n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L1058'>_discrete_log_shanks_steps</a>(n,a,b,order)</tt>	Baby-step giant-step algorithm for computing the discrete logarithm of a to the base b modulo n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L1104'>_discrete_log_pollard_rho</a>(n,a,b,order)</tt>	Pollard's rho algorithm for computing the discrete logarithm of a to the base b modulo n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L1205'>_discrete_log_pohlig_hellman</a>(n,a,b,order)</tt>	Pohlig-hellman algorithm for computing the discrete logarithm of a to the base b modulo n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/residue_ntheory.py#L1254'>discrete_log</a>(n,a,b,order)</tt>	Compute the discrete logarithm of a to the base b modulo n.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/modular.py#L11'>symmetric_residue</a>(a,m)</tt>	Return the residual mod m such that it is within half of the modulus.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/modular.py#L25'>crt</a>(m,v,symmetric,check)</tt>	Chinese remainder theorem.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/modular.py#L100'>crt1</a>(m)</tt>	First part of chinese remainder theorem for multiple application.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/modular.py#L114'>crt2</a>(m,v,mm,e)</tt>	Second part of chinese remainder theorem for multiple application.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/modular.py#L133'>solve_congruence</a>()</tt>	Compute the integer n that has the residual ai when it is divided by mi where the ai and mi are given as pairs to.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/continued_fraction.py#L5'>continued_fraction_periodic</a>(p,q,d)</tt>	Find the periodic continued fraction expansion of a quadratic irrational.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/continued_fraction.py#L95'>continued_fraction_reduce</a>(cf)</tt>	Reduce a continued fraction to a rational or quadratic irrational.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/continued_fraction.py#L166'>continued_fraction_iterator</a>(x)</tt>	Return continued fraction expansion of x as iterator.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/continued_fraction.py#L211'>continued_fraction_convergents</a>(cf)</tt>	Return an iterator over the convergents of a continued fraction cf.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/multinomial.py#L7'>binomial_coefficients</a>(n)</tt>	Return a dictionary containing pairs :math { k1 k2 : c_kn} where :math c_kn are binomial coefficients and :math n=k1+k2.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/multinomial.py#L31'>binomial_coefficients_list</a>(n)</tt>	Return a list of binomial coefficients as rows of the pascal's triangle.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/multinomial.py#L55'>multinomial_coefficients0</a>(m,n,_tuple,_zip)</tt>	Return a dictionary containing pairs {(k1 k2 ,km) : c_kn}.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/multinomial.py#L113'>multinomial_coefficients</a>(m,n)</tt>	Return a dictionary containing pairs {(k1 k2 ,km) : c_kn}.
<tt style='background-color:#E8E8E8;'> ntheory. <a href=' /ntheory/multinomial.py#L181'>multinomial_coefficients_iterator</a>(m,n,_tuple)</tt>	Multinomial coefficient iterator this routine has been optimized for m large with respect to n by taking.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/decorator.py#L14'>threaded_factory</a>(func,use_add)</tt>	A factory for threaded decorators.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/decorator.py#L42'>threaded</a>(func)</tt>	Apply func to sub--elements of an object including :class add.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/decorator.py#L62'>xthreaded</a>(func)</tt>	Apply func to sub--elements of an object excluding :class add.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/decorator.py#L82'>conserve_mpmath_dps</a>(func)</tt>	After the function finishes resets the value of mpmath mp dps to.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/decorator.py#L130'>doctest_depends_on</a>(exe,modules,disable_viewers)</tt>	Adds metadata about the depenencies which need to be met for doctesting the docstrings of the decorated objects.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/decorator.py#L149'>public</a>(obj)</tt>	Append obj's name to global __all__ variable call site.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/decorator.py#L198'>memoize_property</a>(storage)</tt>	Create a property where the lookup is stored in storage.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/magic.py#L5'>pollute</a>(names,objects)</tt>	Pollute the global namespace with symbols -> objects mapping.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/source.py#L10'>source</a>(object)</tt>	Prints the source code of a given object.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/source.py#L18'>get_class</a>(lookup_view)</tt>	Convert a string version of a class name to the object.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/source.py#L36'>get_mod_func</a>(callback)</tt>	Splits the string path to a class into a string path to the module and the name of the class.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/memoization.py#L7'>recurrence_memo</a>(initial)</tt>	Memo decorator for sequences defined by recurrence see usage examples e.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/memoization.py#L28'>assoc_recurrence_memo</a>(base_seq)</tt>	Memo decorator for associated sequences defined by recurrence starting from base.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/runtests.py#L52'>_indent</a>(s,indent)</tt>	Add the given number of space characters to the beginning of every non-blank line in s, and return the result.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/runtests.py#L72'>_report_failure</a>(out,test,example,got)</tt>	Report that the given example failed.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/runtests.py#L85'>convert_to_native_paths</a>(lst)</tt>	Converts a list of '/' separated paths into a list of native (os.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/runtests.py#L104'>get_sympy_dir</a>()</tt>	Returns the root sympy directory and set the global value indicating whether the system is case sensitive or not.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/runtests.py#L136'>run_in_subprocess_with_hash_randomization</a>(function,function_args,function_kwargs,command)</tt>	Run a function in a python subprocess with hash randomization enabled.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/runtests.py#L227'>run_all_tests</a>(test_args,test_kwargs,doctest_args,doctest_kwargs)</tt>	Run all tests.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/runtests.py#L462'>_test</a>()</tt>	Internal function that actually runs the tests.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/runtests.py#L615'>_doctest</a>()</tt>	Internal function that actually runs the doctests.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/runtests.py#L810'>split_list</a>(l,split)</tt>	Splits a list into part a of b split should be a string of the form 'a/b'.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/runtests.py#L840'>sympytestfile</a>(filename,module_relative,name,package)</tt>	Test examples in the given file return (#failures #tests).
<tt style='background-color:#E8E8E8;'> utilities.SymPyTests <a href=' /utilities/runtests.py#L997'>test</a>(sort,timeout,slow,enhance_asserts)</tt>	Runs the tests returning true if all tests pass otherwise false.
<tt style='background-color:#E8E8E8;'> utilities.SymPyTests <a href=' /utilities/runtests.py#L1191'>matches</a>(x)</tt>	Does the keyword expression self _kw match "x"? returns true/false.
<tt style='background-color:#E8E8E8;'> utilities.SymPyTests <a href=' /utilities/runtests.py#L1204'>get_test_files</a>(dir,pat)</tt>	Returns the list of test_* py default files at or below directory.
<tt style='background-color:#E8E8E8;'> utilities.SymPyDocTests <a href=' /utilities/runtests.py#L1229'>test</a>()</tt>	Runs the tests and returns true if all tests pass otherwise false.
<tt style='background-color:#E8E8E8;'> utilities.SymPyDocTests <a href=' /utilities/runtests.py#L1327'>get_test_files</a>(dir,pat,init_only)</tt>	Returns the list of \* py files default from which docstrings.
<tt style='background-color:#E8E8E8;'> utilities.SymPyDocTests <a href=' /utilities/runtests.py#L1360'>_process_dependencies</a>(deps)</tt>	Returns false if some dependencies are not met and the test should be skipped otherwise returns true.
<tt style='background-color:#E8E8E8;'> utilities.SymPyDocTestFinder <a href=' /utilities/runtests.py#L1462'>_find</a>(tests,obj,name,module)</tt>	Find tests for the given object and any contained objects and add them to tests.
<tt style='background-color:#E8E8E8;'> utilities.SymPyDocTestFinder <a href=' /utilities/runtests.py#L1557'>_get_test</a>(obj,name,module,globs)</tt>	Return a doctest for the given object if it defines a docstring otherwise return none.
<tt style='background-color:#E8E8E8;'> utilities.SymPyDocTestRunner <a href=' /utilities/runtests.py#L1649'>run</a>(test,compileflags,out,clear_globs)</tt>	Run the examples in test, and display the results using the writer function out.
<tt style='background-color:#E8E8E8;'> utilities.SymPyOutputChecker <a href=' /utilities/runtests.py#L1739'>check_output</a>(want,got,optionflags)</tt>	Return true iff the actual output from an example (got) matches the expected output (want).
<tt style='background-color:#E8E8E8;'> utilities.PyTestReporter <a href=' /utilities/runtests.py#L1920'>write</a>(text,color,align,width)</tt>	Prints a text on the screen.
<tt style='background-color:#E8E8E8;'> utilities.CodeWrapper <a href=' /utilities/autowrap.py#L110'>__init__</a>(generator,filepath,flags,verbose)</tt>	Generator -- the code generator to use.
<tt style='background-color:#E8E8E8;'> utilities.CythonCodeWrapper <a href=' /utilities/autowrap.py#L282'>dump_pyx</a>(routines,f,prefix)</tt>	Write a cython file with python wrappers this file contains all the definitions of the routines in c code and.
<tt style='background-color:#E8E8E8;'> utilities.CythonCodeWrapper <a href=' /utilities/autowrap.py#L346'>_partition_args</a>(args)</tt>	Group function arguments into categories.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/autowrap.py#L438'>_infer_language</a>(backend)</tt>	For a given backend return the top choice of language.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/autowrap.py#L446'>_validate_backend_language</a>(backend,language)</tt>	Throws error if backend and language are incompatible.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/autowrap.py#L456'>autowrap</a>(expr,language,backend,tempdir)</tt>	Generates python callable binaries based on the math expression.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/autowrap.py#L538'>binary_function</a>(symfunc,expr)</tt>	Returns a sympy function with expr as binary implementation this is a convenience function that automates the steps needed to.
<tt style='background-color:#E8E8E8;'> utilities.UfuncifyCodeWrapper <a href=' /utilities/autowrap.py#L729'>dump_c</a>(routines,f,prefix,funcname)</tt>	Write a c file with python wrappers this file contains all the definitions of the routines in c code.
<tt style='background-color:#E8E8E8;'> utilities.UfuncifyCodeWrapper <a href=' /utilities/autowrap.py#L825'>_partition_args</a>(args)</tt>	Group function arguments into categories.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/autowrap.py#L839'>ufuncify</a>(args,expr,language,backend)</tt>	Generates a binary function that supports broadcasting on numpy arrays.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/misc.py#L19'>filldedent</a>(s,w)</tt>	Strips leading and trailing empty lines from a copy of s, then dedents fills and returns it.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/misc.py#L30'>rawlines</a>(s)</tt>	Return a cut-and-pastable string that when printed is equivalent to the input.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/misc.py#L122'>debug_decorator</a>(func)</tt>	If sympy_debug is true it will print a nice execution tree with arguments and results of all decorated functions else do nothing.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/misc.py#L184'>debug</a>()</tt>	Print *args if sympy_debug is true else do nothing.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/misc.py#L193'>find_executable</a>(executable,path)</tt>	Try to find 'executable' in the directories listed in 'path' (a string listing directories separated by 'os.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/misc.py#L227'>func_name</a>(x)</tt>	Return function name of x if defined else the type x.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/misc.py#L239'>_replace</a>(reps)</tt>	Return a function that can make the replacements given in reps, on a string.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/misc.py#L262'>replace</a>(string)</tt>	Return string with all keys in reps replaced with their corresponding values longer strings first irrespective.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/misc.py#L304'>translate</a>(s,a,b,c)</tt>	Return s where characters have been replaced or deleted.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/timeutils.py#L14'>timed</a>(func,setup,limit)</tt>	Adaptively measure execution time of a function.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/randtest.py#L16'>random_complex_number</a>(a,b,c,d)</tt>	Return a random complex number.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/randtest.py#L29'>verify_numerically</a>(f,g,z,tol)</tt>	Test numerically that f and g agree when evaluated in the argument z.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/randtest.py#L55'>test_derivative_numerically</a>(f,z,tol,a)</tt>	Test numerically that the symbolically computed derivative of f with respect to z is correct.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/randtest.py#L80'>_randrange</a>(seed)</tt>	Return a randrange generator seed can be.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/randtest.py#L131'>_randint</a>(seed)</tt>	Return a randint generator seed can be.
<tt style='background-color:#E8E8E8;'> utilities.Routine <a href=' /utilities/codegen.py#L131'>__init__</a>(name,arguments,results,local_vars)</tt>	Initialize a routine instance.
<tt style='background-color:#E8E8E8;'> utilities.Routine <a href=' /utilities/codegen.py#L202'>variables</a>()</tt>	Returns a set of all variables possibly used in the routine.
<tt style='background-color:#E8E8E8;'> utilities.Routine <a href=' /utilities/codegen.py#L217'>result_variables</a>()</tt>	Returns a list of outputargument inoutargument and result.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/codegen.py#L246'>get_default_datatype</a>(expr)</tt>	Derives an appropriate datatype based on the expression.
<tt style='background-color:#E8E8E8;'> utilities.Variable <a href=' /utilities/codegen.py#L262'>__init__</a>(name,datatype,dimensions,precision)</tt>	Return a new variable.
<tt style='background-color:#E8E8E8;'> utilities.Variable <a href=' /utilities/codegen.py#L315'>get_datatype</a>(language)</tt>	Returns the datatype string for the requested language.
<tt style='background-color:#E8E8E8;'> utilities.OutputArgument <a href=' /utilities/codegen.py#L372'>__init__</a>(name,result_var,expr,datatype)</tt>	Return a new variable.
<tt style='background-color:#E8E8E8;'> utilities.Result <a href=' /utilities/codegen.py#L445'>__init__</a>(expr,name,result_var,datatype)</tt>	Initialize a return value.
<tt style='background-color:#E8E8E8;'> utilities.CodeGen <a href=' /utilities/codegen.py#L506'>__init__</a>(project)</tt>	Initialize a code generator.
<tt style='background-color:#E8E8E8;'> utilities.CodeGen <a href=' /utilities/codegen.py#L515'>routine</a>(name,expr,argument_sequence,global_vars)</tt>	Creates an routine object that is appropriate for this language.
<tt style='background-color:#E8E8E8;'> utilities.CodeGen <a href=' /utilities/codegen.py#L644'>write</a>(routines,prefix,to_files,header)</tt>	Writes all the source code files for the given routines.
<tt style='background-color:#E8E8E8;'> utilities.CodeGen <a href=' /utilities/codegen.py#L687'>dump_code</a>(routines,f,prefix,header)</tt>	Write the code by calling language specific methods.
<tt style='background-color:#E8E8E8;'> utilities.CCodeGen <a href=' /utilities/codegen.py#L775'>_get_header</a>()</tt>	Writes a common header for the generated files.
<tt style='background-color:#E8E8E8;'> utilities.CCodeGen <a href=' /utilities/codegen.py#L786'>get_prototype</a>(routine)</tt>	Returns a string for the function prototype of the routine.
<tt style='background-color:#E8E8E8;'> utilities.CCodeGen <a href=' /utilities/codegen.py#L885'>dump_h</a>(routines,f,prefix,header)</tt>	Writes the c header file.
<tt style='background-color:#E8E8E8;'> utilities.FCodeGen <a href=' /utilities/codegen.py#L959'>_get_symbol</a>(s)</tt>	Returns the symbol as fcode prints it.
<tt style='background-color:#E8E8E8;'> utilities.FCodeGen <a href=' /utilities/codegen.py#L963'>_get_header</a>()</tt>	Writes a common header for the generated files.
<tt style='background-color:#E8E8E8;'> utilities.FCodeGen <a href=' /utilities/codegen.py#L977'>_get_routine_opening</a>(routine)</tt>	Returns the opening statements of the fortran routine.
<tt style='background-color:#E8E8E8;'> utilities.FCodeGen <a href=' /utilities/codegen.py#L1051'>_get_routine_ending</a>(routine)</tt>	Returns the closing statements of the fortran routine.
<tt style='background-color:#E8E8E8;'> utilities.FCodeGen <a href=' /utilities/codegen.py#L1058'>get_interface</a>(routine)</tt>	Returns a string for the function interface.
<tt style='background-color:#E8E8E8;'> utilities.FCodeGen <a href=' /utilities/codegen.py#L1119'>dump_h</a>(routines,f,prefix,header)</tt>	Writes the interface to a header file.
<tt style='background-color:#E8E8E8;'> utilities.JuliaCodeGen <a href=' /utilities/codegen.py#L1172'>routine</a>(name,expr,argument_sequence,global_vars)</tt>	Specialized routine creation for julia.
<tt style='background-color:#E8E8E8;'> utilities.JuliaCodeGen <a href=' /utilities/codegen.py#L1263'>_get_symbol</a>(s)</tt>	Print the symbol appropriately.
<tt style='background-color:#E8E8E8;'> utilities.JuliaCodeGen <a href=' /utilities/codegen.py#L1267'>_get_header</a>()</tt>	Writes a common header for the generated files.
<tt style='background-color:#E8E8E8;'> utilities.JuliaCodeGen <a href=' /utilities/codegen.py#L1282'>_get_routine_opening</a>(routine)</tt>	Returns the opening statements of the routine.
<tt style='background-color:#E8E8E8;'> utilities.OctaveCodeGen <a href=' /utilities/codegen.py#L1382'>routine</a>(name,expr,argument_sequence,global_vars)</tt>	Specialized routine creation for octave.
<tt style='background-color:#E8E8E8;'> utilities.OctaveCodeGen <a href=' /utilities/codegen.py#L1472'>_get_symbol</a>(s)</tt>	Print the symbol appropriately.
<tt style='background-color:#E8E8E8;'> utilities.OctaveCodeGen <a href=' /utilities/codegen.py#L1476'>_get_header</a>()</tt>	Writes a common header for the generated files.
<tt style='background-color:#E8E8E8;'> utilities.OctaveCodeGen <a href=' /utilities/codegen.py#L1491'>_get_routine_opening</a>(routine)</tt>	Returns the opening statements of the routine.
<tt style='background-color:#E8E8E8;'> utilities.RustCodeGen <a href=' /utilities/codegen.py#L1621'>routine</a>(name,expr,argument_sequence,global_vars)</tt>	Specialized routine creation for rust.
<tt style='background-color:#E8E8E8;'> utilities.RustCodeGen <a href=' /utilities/codegen.py#L1707'>_get_header</a>()</tt>	Writes a common header for the generated files.
<tt style='background-color:#E8E8E8;'> utilities.RustCodeGen <a href=' /utilities/codegen.py#L1718'>get_prototype</a>(routine)</tt>	Returns a string for the function prototype of the routine.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/codegen.py#L1852'>codegen</a>(name_expr,language,prefix,project)</tt>	Generate source code for expressions in a given language.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/codegen.py#L1996'>make_routine</a>(name,expr,argument_sequence,global_vars)</tt>	A factory that makes an appropriate routine from an expression.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L22'>flatten</a>(iterable,levels,cls)</tt>	Recursively denest iterable containers.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L85'>unflatten</a>(iter,n)</tt>	Group iter into tuples of length n raise an error if.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L94'>reshape</a>(seq,how)</tt>	Reshape the sequence according to the template in how.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L154'>group</a>(seq,multiple)</tt>	Splits a sequence into a list of lists of equal adjacent elements.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L197'>multiset</a>(seq)</tt>	Return the hashable sequence in multiset form with values being the multiplicity of the item in the sequence.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L218'>postorder_traversal</a>(node,keys)</tt>	Do a postorder traversal of a tree.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L277'>interactive_traversal</a>(expr)</tt>	Traverse a tree asking a user which branch to choose.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L370'>ibin</a>(n,bits,str)</tt>	Return a list of length bits corresponding to the binary value of n with small bits to the right last.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L430'>variations</a>(seq,n,repetition)</tt>	Returns a generator of the n-sized variations of seq size n.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L478'>subsets</a>(seq,k,repetition)</tt>	Generates all k-subsets combinations from an n-element set seq.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L531'>filter_symbols</a>(iterator,exclude)</tt>	Only yield elements from iterator that do not occur in exclude.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L555'>numbered_symbols</a>(prefix,cls,start,exclude)</tt>	Generate an infinite stream of symbols consisting of a prefix and increasing subscripts provided that they do not occur in exclude.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L594'>capture</a>(func)</tt>	Return the printed output of func().
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L624'>sift</a>(seq,keyfunc)</tt>	Sift the sequence seq into a dictionary according to keyfunc.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L669'>take</a>(iter,n)</tt>	Return n items from iter iterator.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L674'>dict_merge</a>()</tt>	Merge dictionaries into a single dictionary.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L684'>common_prefix</a>()</tt>	Return the subsequence that is a common start of sequences in seqs.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L710'>common_suffix</a>()</tt>	Return the subsequence that is a common ending of sequences in seqs.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L740'>prefixes</a>(seq)</tt>	Generate all prefixes of a sequence.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L759'>postfixes</a>(seq)</tt>	Generate all postfixes of a sequence.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L778'>topological_sort</a>(graph,key)</tt>	Topological sort of graph's vertices.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L889'>rotate_left</a>(x,y)</tt>	Left rotates a list x by the number of steps specified in y.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L908'>rotate_right</a>(x,y)</tt>	Right rotates a list x by the number of steps specified in y.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L927'>multiset_combinations</a>(m,n,g)</tt>	Return the unique combinations of size n from multiset m.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L983'>multiset_permutations</a>(m,size,g)</tt>	Return the unique permutations of multiset m.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1032'>_partition</a>(seq,vector,m)</tt>	Return the partion of seq as specified by the partition vector.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1069'>_set_partitions</a>(n)</tt>	Cycle through all partions of n elements yielding the current number of partitions m, and a mutable list q.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1148'>multiset_partitions</a>(multiset,m)</tt>	Return unique partitions of the given multiset in list form.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1311'>partitions</a>(n,m,k,size)</tt>	Generate all partitions of positive integer n.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1463'>ordered_partitions</a>(n,m,sort)</tt>	Generates ordered partitions of integer n.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1597'>binary_partitions</a>(n)</tt>	Generates the binary partition of n.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1651'>has_dups</a>(seq)</tt>	Return true if there are any duplicate elements in seq.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1675'>has_variety</a>(seq)</tt>	Return true if there are any different elements in seq.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1697'>uniq</a>(seq,result)</tt>	Yield unique elements from seq as an iterator the second.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1736'>generate_bell</a>(n)</tt>	Return permutations of [0 1 n - 1] such that each permutation.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1873'>generate_derangements</a>(perm)</tt>	Routine to generate unique derangements.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1906'>necklaces</a>(n,k,free)</tt>	A routine to generate necklaces that may (free=true) or may not (free=false) be turned over to be viewed.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1951'>bracelets</a>(n,k)</tt>	Wrapper to necklaces to return a free unrestricted necklace.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1956'>generate_oriented_forest</a>(n)</tt>	This algorithm generates oriented forests.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L1998'>minlex</a>(seq,directed,is_set,small)</tt>	Return a tuple where the smallest element appears first if directed is true default then the order is preserved otherwise.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L2073'>runs</a>(seq,op)</tt>	Group the sequence into lists in which successive elements all compare the same with the comparison operator op:.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L2110'>kbins</a>(l,k,ordered)</tt>	Return sequence l partitioned into k bins.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L2238'>permute_signs</a>(t)</tt>	Return iterator in which the signs of non-zero elements of t are permuted.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/iterables.py#L2254'>signed_permutations</a>(t)</tt>	Return iterator in which the signs of non-zero elements of t and the order of the elements are permuted.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/lambdify.py#L119'>_import</a>(module,reload)</tt>	Creates a global translation dictionary for module.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/lambdify.py#L177'>lambdify</a>(args,expr,modules,printer)</tt>	Returns a lambda function for fast calculation of numerical values.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/lambdify.py#L462'>_get_namespace</a>(m)</tt>	This is used by _lambdify to parse its arguments.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/lambdify.py#L477'>lambdastr</a>(args,expr,printer,dummify)</tt>	Returns a string that can be evaluated to a lambda function.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/lambdify.py#L585'>_imp_namespace</a>(expr,namespace)</tt>	Return namespace dict with function implementations we need to search for functions in anything that can be thrown at.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/lambdify.py#L653'>implemented_function</a>(symfunc,implementation)</tt>	Add numerical implementation to function symfunc.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/pkgdata.py#L27'>get_resource</a>(identifier,pkgname)</tt>	Acquire a readable object for a given package name and identifier.
<tt style='background-color:#E8E8E8;'> utilities.PartComponent <a href=' /utilities/enumerative.py#L119'>__repr__</a>()</tt>	For debug/algorithm animation purposes.
<tt style='background-color:#E8E8E8;'> utilities.PartComponent <a href=' /utilities/enumerative.py#L123'>__eq__</a>(other)</tt>	Define value oriented equality which is useful for testers.
<tt style='background-color:#E8E8E8;'> utilities.PartComponent <a href=' /utilities/enumerative.py#L130'>__ne__</a>(other)</tt>	Defined for consistency with __eq__.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/enumerative.py#L149'>multiset_partitions_taocp</a>(multiplicities)</tt>	Enumerates partitions of a multiset.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/enumerative.py#L307'>factoring_visitor</a>(state,primes)</tt>	Use with multiset_partitions_taocp to enumerate the ways a number can be expressed as a product of factors.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/enumerative.py#L344'>list_visitor</a>(state,components)</tt>	Return a list of lists to represent the partition.
<tt style='background-color:#E8E8E8;'> utilities.MultisetPartitionTraverser <a href=' /utilities/enumerative.py#L425'>db_trace</a>(msg)</tt>	Useful for usderstanding/debugging the algorithms not.
<tt style='background-color:#E8E8E8;'> utilities.MultisetPartitionTraverser <a href=' /utilities/enumerative.py#L438'>_initialize_enumeration</a>(multiplicities)</tt>	Allocates and initializes the partition stack.
<tt style='background-color:#E8E8E8;'> utilities.MultisetPartitionTraverser <a href=' /utilities/enumerative.py#L469'>decrement_part</a>(part)</tt>	Decrements part a subrange of pstack if possible returning true iff the part was successfully decremented.
<tt style='background-color:#E8E8E8;'> utilities.MultisetPartitionTraverser <a href=' /utilities/enumerative.py#L499'>decrement_part_small</a>(part,ub)</tt>	Decrements part a subrange of pstack if possible returning true iff the part was successfully decremented.
<tt style='background-color:#E8E8E8;'> utilities.MultisetPartitionTraverser <a href=' /utilities/enumerative.py#L579'>decrement_part_large</a>(part,amt,lb)</tt>	Decrements part while respecting size constraint.
<tt style='background-color:#E8E8E8;'> utilities.MultisetPartitionTraverser <a href=' /utilities/enumerative.py#L646'>decrement_part_range</a>(part,lb,ub)</tt>	Decrements part a subrange of pstack if possible returning true iff the part was successfully decremented.
<tt style='background-color:#E8E8E8;'> utilities.MultisetPartitionTraverser <a href=' /utilities/enumerative.py#L682'>spread_part_multiplicity</a>()</tt>	Returns true if a new part has been created and adjusts pstack f and lpart as needed.
<tt style='background-color:#E8E8E8;'> utilities.MultisetPartitionTraverser <a href=' /utilities/enumerative.py#L727'>top_part</a>()</tt>	Return current top part on the stack as a slice of pstack.
<tt style='background-color:#E8E8E8;'> utilities.MultisetPartitionTraverser <a href=' /utilities/enumerative.py#L735'>enum_all</a>(multiplicities)</tt>	Enumerate the partitions of a multiset.
<tt style='background-color:#E8E8E8;'> utilities.MultisetPartitionTraverser <a href=' /utilities/enumerative.py#L782'>enum_small</a>(multiplicities,ub)</tt>	Enumerate multiset partitions with no more than ub parts.
<tt style='background-color:#E8E8E8;'> utilities.MultisetPartitionTraverser <a href=' /utilities/enumerative.py#L851'>enum_large</a>(multiplicities,lb)</tt>	Enumerate the partitions of a multiset with lb < num parts equivalent to enum_range(multiplicities lb sum multiplicities.
<tt style='background-color:#E8E8E8;'> utilities.MultisetPartitionTraverser <a href=' /utilities/enumerative.py#L911'>enum_range</a>(multiplicities,lb,ub)</tt>	Enumerate the partitions of a multiset with lb < num parts <= ub.
<tt style='background-color:#E8E8E8;'> utilities.MultisetPartitionTraverser <a href=' /utilities/enumerative.py#L973'>count_partitions_slow</a>(multiplicities)</tt>	Returns the number of partitions of a multiset whose elements have the multiplicities given in multiplicities.
<tt style='background-color:#E8E8E8;'> utilities.MultisetPartitionTraverser <a href=' /utilities/enumerative.py#L1004'>count_partitions</a>(multiplicities)</tt>	Returns the number of partitions of a multiset whose components have the multiplicities given in multiplicities.
<tt style='background-color:#E8E8E8;'> utilities. <a href=' /utilities/enumerative.py#L1129'>part_key</a>(part)</tt>	Helper for multisetpartitiontraverser count_partitions that.
<tt style='background-color:#E8E8E8;'> utilities.mathml. <a href=' /utilities/mathml/__init__.py#L19'>apply_xsl</a>(mml,xsl)</tt>	Apply a xsl to a mathml string @param mml a string with mathml code.
<tt style='background-color:#E8E8E8;'> utilities.mathml. <a href=' /utilities/mathml/__init__.py#L43'>c2p</a>(mml,simple)</tt>	Transforms a document in mathml content like the one that sympy produces in one document in mathml presentation more suitable for printing and more.
<tt style='background-color:#E8E8E8;'> unify. <a href=' /unify/usympy.py#L75'>unify</a>(x,y,s)</tt>	Unify two expressions inputs.
<tt style='background-color:#E8E8E8;'> unify. <a href=' /unify/core.py#L144'>occur_check</a>(var,x)</tt>	Var occurs in subtree owned by x?.
<tt style='background-color:#E8E8E8;'> unify. <a href=' /unify/core.py#L154'>assoc</a>(d,key,val)</tt>	Return copy of d with key associated to val.
<tt style='background-color:#E8E8E8;'> unify. <a href=' /unify/core.py#L160'>is_args</a>(x)</tt>	Is x a traditional iterable?.
<tt style='background-color:#E8E8E8;'> unify. <a href=' /unify/core.py#L170'>allcombinations</a>(A,B,ordered)</tt>	Restructure a and b to have the same number of elements ordered must be either 'commutative' or 'associative'.
<tt style='background-color:#E8E8E8;'> unify. <a href=' /unify/core.py#L210'>partition</a>(it,part)</tt>	Partition a tuple/list into pieces defined by indices >>> from sympy.
<tt style='background-color:#E8E8E8;'> unify. <a href=' /unify/core.py#L219'>index</a>(it,ind)</tt>	Fancy indexing into an indexable iterable tuple list >>> from sympy.
<tt style='background-color:#E8E8E8;'> unify. <a href=' /unify/rewrite.py#L11'>rewriterule</a>(source,target,variables,condition)</tt>	Rewrite rule transform expressions that match source into expressions that match target.
<tt style='background-color:#E8E8E8;'> unify. <a href=' /unify/usympy.py#L44'>deconstruct</a>(s,variables)</tt>	Turn a sympy object into a compound.
<tt style='background-color:#E8E8E8;'> unify. <a href=' /unify/usympy.py#L55'>construct</a>(t)</tt>	Turn a compound into a sympy object.
<tt style='background-color:#E8E8E8;'> unify. <a href=' /unify/usympy.py#L68'>rebuild</a>(s)</tt>	Rebuild a sympy expression.
<tt style='background-color:#E8E8E8;'> unify. <a href=' /unify/usympy.py#L75'>unify</a>(x,y,s,variables)</tt>	Structural unification of two expressions/patterns examples.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/util.py#L14'>continuous_domain</a>(f,symbol,domain)</tt>	Returns the intervals in the given domain for which the function is continuous.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/util.py#L81'>function_range</a>(f,symbol,domain)</tt>	Finds the range of a function in a given domain.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/util.py#L160'>not_empty_in</a>(finset_intersection)</tt>	Finds the domain of the functions in finite_set in which the finite_set is not-empty.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/util.py#L270'>periodicity</a>(f,symbol,check)</tt>	Tests the given function for periodicity in the given symbol.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/util.py#L407'>_periodicity</a>(args,symbol)</tt>	Helper for periodicity to find the period of a list of simpler functions.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/util.py#L427'>lcim</a>(numbers)</tt>	Returns the least common integral multiple of a list of numbers.
<tt style='background-color:#E8E8E8;'> calculus.AccumulationBounds <a href=' /calculus/util.py#L641'>min</a>()</tt>	Returns the minimum possible value attained by accumulationbounds object.
<tt style='background-color:#E8E8E8;'> calculus.AccumulationBounds <a href=' /calculus/util.py#L656'>max</a>()</tt>	Returns the maximum possible value attained by accumulationbounds object.
<tt style='background-color:#E8E8E8;'> calculus.AccumulationBounds <a href=' /calculus/util.py#L671'>delta</a>()</tt>	Returns the difference of maximum possible value attained by accumulationbounds object and minimum possible value attained by accumulationbounds object.
<tt style='background-color:#E8E8E8;'> calculus.AccumulationBounds <a href=' /calculus/util.py#L687'>mid</a>()</tt>	Returns the mean of maximum possible value attained by accumulationbounds object and minimum possible value attained by accumulationbounds object.
<tt style='background-color:#E8E8E8;'> calculus.AccumulationBounds <a href=' /calculus/util.py#L948'>__lt__</a>(other)</tt>	Returns true if range of values attained by self accumulationbounds object is less than the range of values attained by other, where other.
<tt style='background-color:#E8E8E8;'> calculus.AccumulationBounds <a href=' /calculus/util.py#L986'>__le__</a>(other)</tt>	Returns true if range of values attained by self accumulationbounds object is less than or equal to the range of values attained by other,.
<tt style='background-color:#E8E8E8;'> calculus.AccumulationBounds <a href=' /calculus/util.py#L1025'>__gt__</a>(other)</tt>	Returns true if range of values attained by self accumulationbounds object is greater than the range of values attained by other, where other.
<tt style='background-color:#E8E8E8;'> calculus.AccumulationBounds <a href=' /calculus/util.py#L1063'>__ge__</a>(other)</tt>	Returns true if range of values attained by self accumulationbounds object is less that the range of values attained by other, where other.
<tt style='background-color:#E8E8E8;'> calculus.AccumulationBounds <a href=' /calculus/util.py#L1101'>__contains__</a>(other)</tt>	Returns true if other is contained in self where other belongs to extended real numbers false if not contained.
<tt style='background-color:#E8E8E8;'> calculus.AccumulationBounds <a href=' /calculus/util.py#L1134'>intersection</a>(other)</tt>	Returns the intersection of 'self' and 'other'.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/finite_diff.py#L25'>finite_diff_weights</a>(order,x_list,x0)</tt>	Calculates the finite difference weights for an arbitrarily spaced one-dimensional grid (x_list) for derivatives at x0 of order.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/finite_diff.py#L198'>apply_finite_diff</a>(order,x_list,y_list,x0)</tt>	Calculates the finite difference approximation of the derivative of requested order at x0 from points.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/finite_diff.py#L286'>_as_finite_diff</a>(derivative,points,x0,wrt)</tt>	Returns an approximation of a derivative of a function in the form of a finite difference formula.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/finite_diff.py#L417'>differentiate_finite</a>(expr)</tt>	Differentiate expr and replace derivatives with finite differences.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/euler.py#L10'>euler_equations</a>(L,funcs,vars)</tt>	Find the euler-lagrange equations [1]_ for a given lagrangian.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/singularities.py#L24'>singularities</a>(expression,symbol)</tt>	Find singularities of a given function.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/singularities.py#L73'>monotonicity_helper</a>(expression,predicate,interval,symbol)</tt>	Helper function for functions checking function monotonicity.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/singularities.py#L97'>is_increasing</a>(expression,interval,symbol)</tt>	Return whether the function is increasing in the given interval.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/singularities.py#L122'>is_strictly_increasing</a>(expression,interval,symbol)</tt>	Return whether the function is strictly increasing in the given interval.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/singularities.py#L147'>is_decreasing</a>(expression,interval,symbol)</tt>	Return whether the function is decreasing in the given interval.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/singularities.py#L172'>is_strictly_decreasing</a>(expression,interval,symbol)</tt>	Return whether the function is strictly decreasing in the given interval.
<tt style='background-color:#E8E8E8;'> calculus. <a href=' /calculus/singularities.py#L195'>is_monotonic</a>(expression,interval,symbol)</tt>	Return whether the function is monotonic in the given interval.
<tt style='background-color:#E8E8E8;'> categories.Morphism <a href=' /categories/baseclasses.py#L59'>domain</a>()</tt>	Returns the domain of the morphism.
<tt style='background-color:#E8E8E8;'> categories.Morphism <a href=' /categories/baseclasses.py#L77'>codomain</a>()</tt>	Returns the codomain of the morphism.
<tt style='background-color:#E8E8E8;'> categories.Morphism <a href=' /categories/baseclasses.py#L95'>compose</a>(other)</tt>	Composes self with the supplied morphism.
<tt style='background-color:#E8E8E8;'> categories.Morphism <a href=' /categories/baseclasses.py#L122'>__mul__</a>(other)</tt>	Composes self with the supplied morphism.
<tt style='background-color:#E8E8E8;'> categories.NamedMorphism <a href=' /categories/baseclasses.py#L199'>name</a>()</tt>	Returns the name of the morphism.
<tt style='background-color:#E8E8E8;'> categories.CompositeMorphism <a href=' /categories/baseclasses.py#L247'>_add_morphism</a>(t,morphism)</tt>	Intelligently adds morphism to tuple t.
<tt style='background-color:#E8E8E8;'> categories.CompositeMorphism <a href=' /categories/baseclasses.py#L307'>components</a>()</tt>	Returns the components of this composite morphism.
<tt style='background-color:#E8E8E8;'> categories.CompositeMorphism <a href=' /categories/baseclasses.py#L328'>domain</a>()</tt>	Returns the domain of this composite morphism.
<tt style='background-color:#E8E8E8;'> categories.CompositeMorphism <a href=' /categories/baseclasses.py#L351'>codomain</a>()</tt>	Returns the codomain of this composite morphism.
<tt style='background-color:#E8E8E8;'> categories.CompositeMorphism <a href=' /categories/baseclasses.py#L374'>flatten</a>(new_name)</tt>	Forgets the composite structure of this morphism.
<tt style='background-color:#E8E8E8;'> categories.Category <a href=' /categories/baseclasses.py#L459'>name</a>()</tt>	Returns the name of this category.
<tt style='background-color:#E8E8E8;'> categories.Category <a href=' /categories/baseclasses.py#L475'>objects</a>()</tt>	Returns the class of objects of this category.
<tt style='background-color:#E8E8E8;'> categories.Category <a href=' /categories/baseclasses.py#L494'>commutative_diagrams</a>()</tt>	Returns the :class finiteset of diagrams which are known to be commutative in this category.
<tt style='background-color:#E8E8E8;'> categories.Diagram <a href=' /categories/baseclasses.py#L581'>_set_dict_union</a>(dictionary,key,value)</tt>	If key is in dictionary, set the new value of key to be the union between the old value and value.
<tt style='background-color:#E8E8E8;'> categories.Diagram <a href=' /categories/baseclasses.py#L598'>_add_morphism_closure</a>(morphisms,morphism,props,add_identities)</tt>	Adds a morphism and its attributes to the supplied dictionary morphisms.
<tt style='background-color:#E8E8E8;'> categories.Diagram <a href=' /categories/baseclasses.py#L647'>__new__</a>(cls)</tt>	Construct a new instance of diagram.
<tt style='background-color:#E8E8E8;'> categories.Diagram <a href=' /categories/baseclasses.py#L748'>premises</a>()</tt>	Returns the premises of this diagram.
<tt style='background-color:#E8E8E8;'> categories.Diagram <a href=' /categories/baseclasses.py#L771'>conclusions</a>()</tt>	Returns the conclusions of this diagram.
<tt style='background-color:#E8E8E8;'> categories.Diagram <a href=' /categories/baseclasses.py#L799'>objects</a>()</tt>	Returns the :class finiteset of objects that appear in this diagram.
<tt style='background-color:#E8E8E8;'> categories.Diagram <a href=' /categories/baseclasses.py#L821'>hom</a>(A,B)</tt>	Returns a 2-tuple of sets of morphisms between objects a and b one set of morphisms listed as premises and the other set.
<tt style='background-color:#E8E8E8;'> categories.Diagram <a href=' /categories/baseclasses.py#L857'>is_subdiagram</a>(diagram)</tt>	Checks whether diagram is a subdiagram of self.
<tt style='background-color:#E8E8E8;'> categories.Diagram <a href=' /categories/baseclasses.py#L895'>subdiagram_from_objects</a>(objects)</tt>	If objects is a subset of the objects of self, returns a diagram which has as premises all those premises of self.
<tt style='background-color:#E8E8E8;'> categories._GrowableGrid <a href=' /categories/diagram_drawing.py#L124'>__getitem__</a>(i_j)</tt>	Returns the element located at in the i-th line and j-th column.
<tt style='background-color:#E8E8E8;'> categories._GrowableGrid <a href=' /categories/diagram_drawing.py#L132'>__setitem__</a>(i_j,newvalue)</tt>	Sets the element located at in the i-th line and j-th column.
<tt style='background-color:#E8E8E8;'> categories._GrowableGrid <a href=' /categories/diagram_drawing.py#L140'>append_row</a>()</tt>	Appends an empty row to the grid.
<tt style='background-color:#E8E8E8;'> categories._GrowableGrid <a href=' /categories/diagram_drawing.py#L147'>append_column</a>()</tt>	Appends an empty column to the grid.
<tt style='background-color:#E8E8E8;'> categories._GrowableGrid <a href=' /categories/diagram_drawing.py#L155'>prepend_row</a>()</tt>	Prepends the grid with an empty row.
<tt style='background-color:#E8E8E8;'> categories._GrowableGrid <a href=' /categories/diagram_drawing.py#L162'>prepend_column</a>()</tt>	Prepends the grid with an empty column.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L299'>_simplify_morphisms</a>(morphisms)</tt>	Given a dictionary mapping morphisms to their properties returns a new dictionary in which there are no morphisms which.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L318'>_merge_premises_conclusions</a>(premises,conclusions)</tt>	Given two dictionaries of morphisms and their properties produces a single dictionary which includes elements from both.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L329'>_juxtapose_edges</a>(edge1,edge2)</tt>	If edge1 and edge2 have precisely one common endpoint returns an edge which would form a triangle with edge1 and.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L350'>_add_edge_append</a>(dictionary,edge,elem)</tt>	If edge is not in dictionary, adds edge to the dictionary and sets its value to [elem].
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L364'>_build_skeleton</a>(morphisms)</tt>	Creates a dictionary which maps edges to corresponding morphisms.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L391'>_list_triangles</a>(edges)</tt>	Builds the set of triangles formed by the supplied edges the.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L408'>_drop_redundant_triangles</a>(triangles,skeleton)</tt>	Returns a list which contains only those triangles who have morphisms associated with at least two edges.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L417'>_morphism_length</a>(morphism)</tt>	Returns the length of a morphism the length of a morphism is.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L429'>_compute_triangle_min_sizes</a>(triangles,edges)</tt>	Returns a dictionary mapping triangles to their minimal sizes.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L459'>_triangle_objects</a>(triangle)</tt>	Given a triangle returns the objects included in it.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L470'>_other_vertex</a>(triangle,edge)</tt>	Given a triangle and an edge of it returns the vertex which opposes the edge.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L481'>_empty_point</a>(pt,grid)</tt>	Checks if the cell at coordinates pt is either empty or out of the bounds of the grid.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L492'>_put_object</a>(coords,obj,grid,fringe)</tt>	Places an object at the coordinate cords in grid, growing the grid and updating fringe, if necessary.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L526'>_choose_target_cell</a>(pt1,pt2,edge,obj)</tt>	Given two points pt1 and pt2, and the welding edge edge, chooses one of the two points to place the opposing.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L557'>_find_triangle_to_weld</a>(triangles,fringe,grid)</tt>	Finds if possible a triangle and an edge in the fringe to which the triangle could be attached.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L574'>_weld_triangle</a>(tri,welding_edge,fringe,grid)</tt>	If possible welds the triangle tri to fringe and returns false.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L671'>_triangle_key</a>(tri,triangle_sizes)</tt>	Returns a key for the supplied triangle it should be the.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L681'>_pick_root_edge</a>(tri,skeleton)</tt>	For a given triangle always picks the same root edge the.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L694'>_drop_irrelevant_triangles</a>(triangles,placed_objects)</tt>	Returns only those triangles whose set of objects is not completely included in placed_objects.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L703'>_grow_pseudopod</a>(triangles,fringe,grid,skeleton)</tt>	Starting from an object in the existing structure on the grid adds an edge to which a triangle from triangles could be.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L785'>_handle_groups</a>(diagram,groups,merged_morphisms,hints)</tt>	Given the slightly preprocessed morphisms of the diagram produces a grid laid out according to groups.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L921'>_generic_layout</a>(diagram,merged_morphisms)</tt>	Produces the generic layout for the supplied diagram.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L1018'>_get_undirected_graph</a>(objects,merged_morphisms)</tt>	Given the objects and the relevant morphisms of a diagram returns the adjacency lists of the underlying undirected.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L1040'>_sequential_layout</a>(diagram,merged_morphisms)</tt>	Lays out the diagram in "sequential" layout this method.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L1095'>_drop_inessential_morphisms</a>(merged_morphisms)</tt>	Removes those morphisms which should appear in the diagram but which have no relevance to object layout.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L1107'>_get_connected_components</a>(objects,merged_morphisms)</tt>	Given a container of morphisms returns a list of connected components formed by these morphisms.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L1233'>width</a>()</tt>	Returns the number of columns in this diagram layout.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L1256'>height</a>()</tt>	Returns the number of rows in this diagram layout.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L1279'>__getitem__</a>(i_j)</tt>	Returns the object placed in the row i and column j.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L1305'>morphisms</a>()</tt>	Returns those morphisms and their properties which are sufficiently meaningful to be drawn.
<tt style='background-color:#E8E8E8;'> categories.DiagramGrid <a href=' /categories/diagram_drawing.py#L1330'>__str__</a>()</tt>	Produces a string representation of this class.
<tt style='background-color:#E8E8E8;'> categories.XypicDiagramDrawer <a href=' /categories/diagram_drawing.py#L1629'>_process_loop_morphism</a>(i,j,grid,morphisms_str_info)</tt>	Produces the information required for constructing the string representation of a loop morphism.
<tt style='background-color:#E8E8E8;'> categories.XypicDiagramDrawer <a href=' /categories/diagram_drawing.py#L1772'>_process_horizontal_morphism</a>(i,j,target_j,grid)</tt>	Produces the information required for constructing the string representation of a horizontal morphism.
<tt style='background-color:#E8E8E8;'> categories.XypicDiagramDrawer <a href=' /categories/diagram_drawing.py#L1897'>_process_vertical_morphism</a>(i,j,target_i,grid)</tt>	Produces the information required for constructing the string representation of a vertical morphism.
<tt style='background-color:#E8E8E8;'> categories.XypicDiagramDrawer <a href=' /categories/diagram_drawing.py#L2004'>_process_morphism</a>(diagram,grid,morphism,object_coords)</tt>	Given the required information produces the string representation of morphism.
<tt style='background-color:#E8E8E8;'> categories.XypicDiagramDrawer <a href=' /categories/diagram_drawing.py#L2103'>_check_free_space_horizontal</a>(dom_i,dom_j,cod_j,grid)</tt>	For a horizontal morphism checks whether there is free space (i.
<tt style='background-color:#E8E8E8;'> categories.XypicDiagramDrawer <a href=' /categories/diagram_drawing.py#L2133'>_check_free_space_vertical</a>(dom_i,cod_i,dom_j,grid)</tt>	For a vertical morphism checks whether there is free space (i.
<tt style='background-color:#E8E8E8;'> categories.XypicDiagramDrawer <a href=' /categories/diagram_drawing.py#L2162'>_check_free_space_diagonal</a>(dom_i,cod_i,dom_j,cod_j)</tt>	For a diagonal morphism checks whether there is free space (i.
<tt style='background-color:#E8E8E8;'> categories.XypicDiagramDrawer <a href=' /categories/diagram_drawing.py#L2252'>_push_labels_out</a>(morphisms_str_info,grid,object_coords)</tt>	For all straight morphisms which form the visual boundary of the laid out diagram puts their labels on their outer sides.
<tt style='background-color:#E8E8E8;'> categories.XypicDiagramDrawer <a href=' /categories/diagram_drawing.py#L2319'>_morphism_sort_key</a>(morphism,object_coords)</tt>	Provides a morphism sorting key such that horizontal or vertical morphisms between neighbouring objects come.
<tt style='background-color:#E8E8E8;'> categories.XypicDiagramDrawer <a href=' /categories/diagram_drawing.py#L2345'>_build_xypic_string</a>(diagram,grid,morphisms,morphisms_str_info)</tt>	Given a collection of :class arrowstringdescription describing the morphisms of a diagram and the object layout.
<tt style='background-color:#E8E8E8;'> categories.XypicDiagramDrawer <a href=' /categories/diagram_drawing.py#L2386'>draw</a>(diagram,grid,masked,diagram_format)</tt>	Returns the xy-pic representation of diagram laid out in grid.
<tt style='background-color:#E8E8E8;'> categories. <a href=' /categories/diagram_drawing.py#L2513'>xypic_draw_diagram</a>(diagram,masked,diagram_format,groups)</tt>	Provides a shortcut combining :class diagramgrid and :class xypicdiagramdrawer.
<tt style='background-color:#E8E8E8;'> categories. <a href=' /categories/diagram_drawing.py#L2554'>preview_diagram</a>(diagram,masked,diagram_format,groups)</tt>	Combines the functionality of xypic_draw_diagram and sympy.
<tt style='background-color:#E8E8E8;'> vector.Del <a href=' /vector/deloperator.py#L30'>gradient</a>(scalar_field,doit)</tt>	Returns the gradient of the given scalar field as a vector instance.
<tt style='background-color:#E8E8E8;'> vector.Del <a href=' /vector/deloperator.py#L72'>dot</a>(vect,doit)</tt>	Represents the dot product between this operator and a given vector - equal to the divergence of the vector field.
<tt style='background-color:#E8E8E8;'> vector.Del <a href=' /vector/deloperator.py#L112'>cross</a>(vect,doit)</tt>	Represents the cross product between this operator and a given vector - equal to the curl of the vector field.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/deloperator.py#L167'>_diff_conditional</a>(expr,base_scalar)</tt>	First re-expresses expr in the system that base_scalar belongs to.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/functions.py#L8'>express</a>(expr,system,system2,variables)</tt>	Global function for 'express' functionality.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/functions.py#L125'>curl</a>(vect,coord_sys)</tt>	Returns the curl of a vector field computed wrt the base scalars of the given coordinate system.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/functions.py#L156'>divergence</a>(vect,coord_sys)</tt>	Returns the divergence of a vector field computed wrt the base scalars of the given coordinate system.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/functions.py#L187'>gradient</a>(scalar,coord_sys)</tt>	Returns the vector gradient of a scalar field computed wrt the base scalars of the given coordinate system.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/functions.py#L217'>directional_derivative</a>(scalar,vect)</tt>	Returns the directional derivative of a scalar field computed along a given vector in given coordinate system.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/functions.py#L251'>is_conservative</a>(field)</tt>	Checks if a field is conservative.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/functions.py#L285'>is_solenoidal</a>(field)</tt>	Checks if a field is solenoidal.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/functions.py#L319'>scalar_potential</a>(field,coord_sys)</tt>	Returns the scalar potential function of a field in a given coordinate system without the added integration constant.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/functions.py#L370'>scalar_potential_difference</a>(field,coord_sys,point1,point2)</tt>	Returns the scalar potential difference between two points in a certain coordinate system wrt a given field.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/functions.py#L439'>matrix_to_vector</a>(matrix,system)</tt>	Converts a vector in matrix form to a vector instance.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/functions.py#L478'>_path</a>(from_object,to_object)</tt>	Calculates the 'path' of objects starting from 'from_object' to 'to_object', along with the index of the first common.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/functions.py#L511'>orthogonalize</a>()</tt>	Takes a sequence of independent vectors and orthogonalizes them using the gram - schmidt process.
<tt style='background-color:#E8E8E8;'> vector.CoordSysCartesian <a href=' /vector/coordsysrect.py#L16'>__new__</a>(cls,name,location,rotation_matrix)</tt>	The orientation/location parameters are necessary if this system is being defined at a certain orientation or location wrt another.
<tt style='background-color:#E8E8E8;'> vector.CoordSysCartesian <a href=' /vector/coordsysrect.py#L211'>rotation_matrix</a>(other)</tt>	Returns the direction cosine matrix dcm also known as the 'rotation matrix' of this coordinate system with respect to.
<tt style='background-color:#E8E8E8;'> vector.CoordSysCartesian <a href=' /vector/coordsysrect.py#L269'>position_wrt</a>(other)</tt>	Returns the position vector of the origin of this coordinate system with respect to another point/coordsyscartesian.
<tt style='background-color:#E8E8E8;'> vector.CoordSysCartesian <a href=' /vector/coordsysrect.py#L295'>scalar_map</a>(other)</tt>	Returns a dictionary which expresses the coordinate variables base scalars of this frame in terms of the variables of.
<tt style='background-color:#E8E8E8;'> vector.CoordSysCartesian <a href=' /vector/coordsysrect.py#L332'>locate_new</a>(name,position,vector_names,variable_names)</tt>	Returns a coordsyscartesian with its origin located at the given position wrt this coordinate system's origin.
<tt style='background-color:#E8E8E8;'> vector.CoordSysCartesian <a href=' /vector/coordsysrect.py#L369'>orient_new</a>(name,orienters,location,vector_names)</tt>	Creates a new coordsyscartesian oriented in the user-specified way with respect to this system.
<tt style='background-color:#E8E8E8;'> vector.CoordSysCartesian <a href=' /vector/coordsysrect.py#L461'>orient_new_axis</a>(name,angle,axis,location)</tt>	Axis rotation is a rotation about an arbitrary axis by some angle.
<tt style='background-color:#E8E8E8;'> vector.CoordSysCartesian <a href=' /vector/coordsysrect.py#L507'>orient_new_body</a>(name,angle1,angle2,angle3)</tt>	Body orientation takes this coordinate system through three successive simple rotations.
<tt style='background-color:#E8E8E8;'> vector.CoordSysCartesian <a href=' /vector/coordsysrect.py#L578'>orient_new_space</a>(name,angle1,angle2,angle3)</tt>	Space rotation is similar to body rotation but the rotations are applied in the opposite order.
<tt style='background-color:#E8E8E8;'> vector.CoordSysCartesian <a href=' /vector/coordsysrect.py#L643'>orient_new_quaternion</a>(name,q0,q1,q2)</tt>	Quaternion orientation orients the new coordsyscartesian with quaternions defined as a finite rotation about lambda a unit.
<tt style='background-color:#E8E8E8;'> vector.Orienter <a href=' /vector/orienters.py#L13'>rotation_matrix</a>()</tt>	The rotation matrix corresponding to this orienter instance.
<tt style='background-color:#E8E8E8;'> vector.AxisOrienter <a href=' /vector/orienters.py#L38'>__init__</a>(angle,axis)</tt>	Axis rotation is a rotation about an arbitrary axis by some angle.
<tt style='background-color:#E8E8E8;'> vector.AxisOrienter <a href=' /vector/orienters.py#L68'>rotation_matrix</a>(system)</tt>	The rotation matrix corresponding to this orienter instance.
<tt style='background-color:#E8E8E8;'> vector.BodyOrienter <a href=' /vector/orienters.py#L176'>__init__</a>(angle1,angle2,angle3,rot_order)</tt>	Body orientation takes this coordinate system through three successive simple rotations.
<tt style='background-color:#E8E8E8;'> vector.SpaceOrienter <a href=' /vector/orienters.py#L246'>__init__</a>(angle1,angle2,angle3,rot_order)</tt>	Space rotation is similar to body rotation but the rotations are applied in the opposite order.
<tt style='background-color:#E8E8E8;'> vector.QuaternionOrienter <a href=' /vector/orienters.py#L330'>__init__</a>(angle1,angle2,angle3,rot_order)</tt>	Quaternion orientation orients the new coordsyscartesian with quaternions defined as a finite rotation about lambda a unit.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/orienters.py#L386'>_rot</a>(axis,angle)</tt>	Dcm for simple axis 1 2 or 3 rotations.
<tt style='background-color:#E8E8E8;'> vector.Vector <a href=' /vector/vector.py#L22'>components</a>()</tt>	Returns the components of this vector in the form of a python dictionary mapping basevector instances to the.
<tt style='background-color:#E8E8E8;'> vector.Vector <a href=' /vector/vector.py#L43'>magnitude</a>()</tt>	Returns the magnitude of this vector.
<tt style='background-color:#E8E8E8;'> vector.Vector <a href=' /vector/vector.py#L49'>normalize</a>()</tt>	Returns the normalized version of this vector.
<tt style='background-color:#E8E8E8;'> vector.Vector <a href=' /vector/vector.py#L55'>dot</a>(other)</tt>	Returns the dot product of this vector either with another vector or a dyadic or a del operator.
<tt style='background-color:#E8E8E8;'> vector.Vector <a href=' /vector/vector.py#L138'>cross</a>(other)</tt>	Returns the cross product of this vector with another vector or dyadic instance.
<tt style='background-color:#E8E8E8;'> vector.Vector <a href=' /vector/vector.py#L218'>outer</a>(other)</tt>	Returns the outer product of this vector with another in the form of a dyadic instance.
<tt style='background-color:#E8E8E8;'> vector.Vector <a href=' /vector/vector.py#L256'>projection</a>(other,scalar)</tt>	Returns the vector or scalar projection of the 'other' on 'self'.
<tt style='background-color:#E8E8E8;'> vector.Vector <a href=' /vector/vector.py#L288'>to_matrix</a>(system)</tt>	Returns the matrix form of this vector with respect to the specified coordinate system.
<tt style='background-color:#E8E8E8;'> vector.Vector <a href=' /vector/vector.py#L317'>separate</a>()</tt>	The constituents of this vector in different coordinate systems as per its definition.
<tt style='background-color:#E8E8E8;'> vector.VectorMul <a href=' /vector/vector.py#L433'>base_vector</a>()</tt>	The basevector involved in the product.
<tt style='background-color:#E8E8E8;'> vector.VectorMul <a href=' /vector/vector.py#L438'>measure_number</a>()</tt>	The scalar expression involved in the defition of this vectormul.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/vector.py#L460'>_vect_div</a>(one,other)</tt>	Helper for division involving vectors.
<tt style='background-color:#E8E8E8;'> vector.Point <a href=' /vector/point.py#L45'>position_wrt</a>(other)</tt>	Returns the position vector of this point with respect to another point/coordsyscartesian.
<tt style='background-color:#E8E8E8;'> vector.Point <a href=' /vector/point.py#L95'>locate_new</a>(name,position)</tt>	Returns a new point located at the given position wrt this point.
<tt style='background-color:#E8E8E8;'> vector.Point <a href=' /vector/point.py#L123'>express_coordinates</a>(coordinate_system)</tt>	Returns the cartesian/rectangular coordinates of this point wrt the origin of the given coordsyscartesian instance.
<tt style='background-color:#E8E8E8;'> vector.Dyadic <a href=' /vector/dyadic.py#L24'>components</a>()</tt>	Returns the components of this dyadic in the form of a python dictionary mapping basedyadic instances to the.
<tt style='background-color:#E8E8E8;'> vector.Dyadic <a href=' /vector/dyadic.py#L36'>dot</a>(other)</tt>	Returns the dot product also called inner product of this dyadic with another dyadic or vector.
<tt style='background-color:#E8E8E8;'> vector.Dyadic <a href=' /vector/dyadic.py#L89'>cross</a>(other)</tt>	Returns the cross product between this dyadic and a vector as a vector instance.
<tt style='background-color:#E8E8E8;'> vector.Dyadic <a href=' /vector/dyadic.py#L130'>to_matrix</a>(system,second_system)</tt>	Returns the matrix form of the dyadic with respect to one or two coordinate systems.
<tt style='background-color:#E8E8E8;'> vector.DyadicMul <a href=' /vector/dyadic.py#L220'>base_dyadic</a>()</tt>	The basedyadic involved in the product.
<tt style='background-color:#E8E8E8;'> vector.DyadicMul <a href=' /vector/dyadic.py#L225'>measure_number</a>()</tt>	The scalar expression involved in the definition of this dyadicmul.
<tt style='background-color:#E8E8E8;'> vector. <a href=' /vector/dyadic.py#L267'>_dyad_div</a>(one,other)</tt>	Helper for division involving dyadics.
<tt style='background-color:#E8E8E8;'> vector.BasisDependent <a href=' /vector/basisdependent.py#L58'>evalf</a>(prec)</tt>	Implements the sympy evalf routine for this quantity.
<tt style='background-color:#E8E8E8;'> vector.BasisDependent <a href=' /vector/basisdependent.py#L75'>simplify</a>(ratio,measure)</tt>	Implements the sympy simplify routine for this quantity.
<tt style='background-color:#E8E8E8;'> vector.BasisDependent <a href=' /vector/basisdependent.py#L89'>trigsimp</a>()</tt>	Implements the sympy trigsimp routine for this quantity.
<tt style='background-color:#E8E8E8;'> vector.BasisDependent <a href=' /vector/basisdependent.py#L120'>as_numer_denom</a>()</tt>	Returns the expression as a tuple wrt the following.
<tt style='background-color:#E8E8E8;'> vector.BasisDependent <a href=' /vector/basisdependent.py#L130'>factor</a>()</tt>	Implements the sympy factor routine on the scalar parts of a basis-dependent expression.
<tt style='background-color:#E8E8E8;'> vector.BasisDependent <a href=' /vector/basisdependent.py#L145'>as_coeff_Mul</a>(rational)</tt>	Efficiently extract the coefficient of a product.
<tt style='background-color:#E8E8E8;'> vector.BasisDependent <a href=' /vector/basisdependent.py#L149'>as_coeff_add</a>()</tt>	Efficiently extract the coefficient of a summation.
<tt style='background-color:#E8E8E8;'> vector.BasisDependent <a href=' /vector/basisdependent.py#L154'>diff</a>()</tt>	Implements the sympy diff routine for vectors.
<tt style='background-color:#E8E8E8;'> vector.BasisDependent <a href=' /vector/basisdependent.py#L171'>doit</a>()</tt>	Calls doit() on each term in the dyadic.
<tt style='background-color:#E8E8E8;'> vector.BasisDependentZero <a href=' /vector/basisdependent.py#L353'>normalize</a>()</tt>	Returns the normalized version of this vector.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/monomials.py#L13'>itermonomials</a>(variables,degree)</tt>	Generate a set of monomials of the given total degree or less.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/monomials.py#L60'>monomial_count</a>(V,N)</tt>	Computes the number of monomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/monomials.py#L93'>monomial_mul</a>(A,B)</tt>	Multiplication of tuples representing monomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/monomials.py#L109'>monomial_div</a>(A,B)</tt>	Division of tuples representing monomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/monomials.py#L135'>monomial_ldiv</a>(A,B)</tt>	Division of tuples representing monomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/monomials.py#L156'>monomial_pow</a>(A,n)</tt>	Return the n-th pow of the monomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/monomials.py#L160'>monomial_gcd</a>(A,B)</tt>	Greatest common divisor of tuples representing monomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/monomials.py#L176'>monomial_lcm</a>(A,B)</tt>	Least common multiple of tuples representing monomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/monomials.py#L192'>monomial_divides</a>(A,B)</tt>	Does there exist a monomial x such that xa == b? >>> from sympy.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/monomials.py#L204'>monomial_max</a>()</tt>	Returns maximal degree for each variable in a set of monomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/monomials.py#L226'>monomial_min</a>()</tt>	Returns minimal degree for each variable in a set of monomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/monomials.py#L248'>monomial_deg</a>(M)</tt>	Returns the total degree of a monomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/monomials.py#L260'>term_div</a>(a,b,domain)</tt>	Division of two terms in over a ring/field.
<tt style='background-color:#E8E8E8;'> polys.Monomial <a href=' /polys/monomials.py#L428'>as_expr</a>()</tt>	Convert a monomial instance to a sympy expression.
<tt style='background-color:#E8E8E8;'> polys.Monomial <a href=' /polys/monomials.py#L493'>gcd</a>(other)</tt>	Greatest common divisor of monomials.
<tt style='background-color:#E8E8E8;'> polys.Monomial <a href=' /polys/monomials.py#L505'>lcm</a>(other)</tt>	Least common multiple of monomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L39'>dup_sqf_p</a>(f,K)</tt>	Return true if f is a square-free polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L61'>dmp_sqf_p</a>(f,u,K)</tt>	Return true if f is a square-free polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L83'>dup_sqf_norm</a>(f,K)</tt>	Square-free norm of f in k[x], useful over algebraic domains.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L127'>dmp_sqf_norm</a>(f,u,K)</tt>	Square-free norm of f in k[x], useful over algebraic domains.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L177'>dup_gf_sqf_part</a>(f,K)</tt>	Compute square-free part of f in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L184'>dmp_gf_sqf_part</a>(f,K)</tt>	Compute square-free part of f in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L189'>dup_sqf_part</a>(f,K)</tt>	Returns square-free part of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L221'>dmp_sqf_part</a>(f,u,K)</tt>	Returns square-free part of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L256'>dup_gf_sqf_list</a>(f,K,all)</tt>	Compute square-free decomposition of f in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L268'>dmp_gf_sqf_list</a>(f,u,K,all)</tt>	Compute square-free decomposition of f in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L273'>dup_sqf_list</a>(f,K,all)</tt>	Return square-free decomposition of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L330'>dup_sqf_list_include</a>(f,K,all)</tt>	Return square-free decomposition of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L358'>dmp_sqf_list</a>(f,u,K,all)</tt>	Return square-free decomposition of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L418'>dmp_sqf_list_include</a>(f,u,K,all)</tt>	Return square-free decomposition of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L449'>dup_gff_list</a>(f,K)</tt>	Compute greatest factorial factorization of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/sqfreetools.py#L486'>dmp_gff_list</a>(f,u,K)</tt>	Compute greatest factorial factorization of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L44'>dup_integrate</a>(f,m,K)</tt>	Computes the indefinite integral of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L76'>dmp_integrate</a>(f,m,u,K)</tt>	Computes the indefinite integral of f in x_0 in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L111'>_rec_integrate_in</a>(g,m,v,i)</tt>	Recursive helper for :func dmp_integrate_in.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L121'>dmp_integrate_in</a>(f,m,j,u)</tt>	Computes the indefinite integral of f in x_j in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L143'>dup_diff</a>(f,m,K)</tt>	M-th order derivative of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L186'>dmp_diff</a>(f,m,u,K)</tt>	M-th order derivative in x_0 of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L233'>_rec_diff_in</a>(g,m,v,i)</tt>	Recursive helper for :func dmp_diff_in.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L243'>dmp_diff_in</a>(f,m,j,u)</tt>	M-th order derivative in x_j of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L267'>dup_eval</a>(f,a,K)</tt>	Evaluate a polynomial at x = a in k[x] using horner scheme.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L293'>dmp_eval</a>(f,a,u,K)</tt>	Evaluate a polynomial at x_0 = a in k[x] using the horner scheme.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L322'>_rec_eval_in</a>(g,a,v,i)</tt>	Recursive helper for :func dmp_eval_in.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L332'>dmp_eval_in</a>(f,a,j,u)</tt>	Evaluate a polynomial at x_j = a in k[x] using the horner scheme.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L356'>_rec_eval_tail</a>(g,i,A,u)</tt>	Recursive helper for :func dmp_eval_tail.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L369'>dmp_eval_tail</a>(f,A,u,K)</tt>	Evaluate a polynomial at x_j = a_j in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L401'>_rec_diff_eval</a>(g,m,a,v)</tt>	Recursive helper for :func dmp_diff_eval.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L411'>dmp_diff_eval_in</a>(f,m,a,j)</tt>	Differentiate and evaluate a polynomial in x_j at a in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L437'>dup_trunc</a>(f,p,K)</tt>	Reduce a k[x] polynomial modulo a constant p in k.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L467'>dmp_trunc</a>(f,p,u,K)</tt>	Reduce a k[x] polynomial modulo a polynomial p in k[y].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L487'>dmp_ground_trunc</a>(f,p,u,K)</tt>	Reduce a k[x] polynomial modulo a constant p in k.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L511'>dup_monic</a>(f,K)</tt>	Divide all coefficients by lc f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L540'>dmp_ground_monic</a>(f,u,K)</tt>	Divide all coefficients by lc f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L576'>dup_content</a>(f,K)</tt>	Compute the gcd of coefficients of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L618'>dmp_ground_content</a>(f,u,K)</tt>	Compute the gcd of coefficients of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L663'>dup_primitive</a>(f,K)</tt>	Compute content and the primitive form of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L696'>dmp_ground_primitive</a>(f,u,K)</tt>	Compute content and the primitive form of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L732'>dup_extract</a>(f,g,K)</tt>	Extract common content from a pair of polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L758'>dmp_ground_extract</a>(f,g,u,K)</tt>	Extract common content from a pair of polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L784'>dup_real_imag</a>(f,K)</tt>	Return bivariate polynomials f1 and f2, such that f = f1 + f2*i.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L831'>dup_mirror</a>(f,K)</tt>	Evaluate efficiently the composition f -x in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L853'>dup_scale</a>(f,a,K)</tt>	Evaluate efficiently composition f(a*x) in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L875'>dup_shift</a>(f,a,K)</tt>	Evaluate efficiently taylor shift f x + a in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L898'>dup_transform</a>(f,p,q,K)</tt>	Evaluate functional transformation q**n * f(p/q) in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L929'>dup_compose</a>(f,g,K)</tt>	Evaluate functional composition f g in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L958'>dmp_compose</a>(f,g,u,K)</tt>	Evaluate functional composition f g in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L987'>_dup_right_decompose</a>(f,s,K)</tt>	Helper function for :func _dup_decompose.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L1015'>_dup_left_decompose</a>(f,h,K)</tt>	Helper function for :func _dup_decompose.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L1050'>dup_decompose</a>(f,K)</tt>	Computes functional decomposition of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L1100'>dmp_lift</a>(f,u,K)</tt>	Convert algebraic coefficients to integers in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L1143'>dup_sign_variations</a>(f,K)</tt>	Compute the number of sign variations of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L1169'>dup_clear_denoms</a>(f,K0,K1,convert)</tt>	Clear denominators i e transform k_0 to k_1.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L1207'>_rec_clear_denoms</a>(g,v,K0,K1)</tt>	Recursive helper for :func dmp_clear_denoms.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L1223'>dmp_clear_denoms</a>(f,u,K0,K1)</tt>	Clear denominators i e transform k_0 to k_1.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L1261'>dup_revert</a>(f,n,K)</tt>	Compute f** -1 mod x**n using newton iteration.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densetools.py#L1295'>dmp_revert</a>(f,g,u,K)</tt>	Compute f** -1 mod x**n using newton iteration.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L224'>sylvester</a>(f,g,x,method)</tt>	The input polynomials f g are in z[x] or in q[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L329'>sign_seq</a>(poly_seq,x)</tt>	Given a sequence of polynomials poly_seq it returns the sequence of signs of the leading coefficients of.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L338'>bezout</a>(p,q,x,method)</tt>	The input polynomials p q are in z[x] or in q[x] let.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L421'>backward_eye</a>(n)</tt>	Returns the backward identity matrix of dimensions n x n.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L436'>process_bezout_output</a>(poly_seq,x)</tt>	Poly_seq is a polynomial remainder sequence computed either by subresultants_bezout or by modified_subresultants_bezout.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L463'>subresultants_bezout</a>(p,q,x)</tt>	The input polynomials p q are in z[x] or in q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L534'>modified_subresultants_bezout</a>(p,q,x)</tt>	The input polynomials p q are in z[x] or in q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L610'>sturm_pg</a>(p,q,x,method)</tt>	P q are polynomials in z[x] or q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L738'>sturm_q</a>(p,q,x)</tt>	P q are polynomials in z[x] or q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L816'>sturm_amv</a>(p,q,x,method)</tt>	P q are polynomials in z[x] or q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L917'>euclid_pg</a>(p,q,x)</tt>	P q are polynomials in z[x] or q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L992'>euclid_q</a>(p,q,x)</tt>	P q are polynomials in z[x] or q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1071'>euclid_amv</a>(f,g,x)</tt>	F g are polynomials in z[x] or q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1150'>modified_subresultants_pg</a>(p,q,x)</tt>	P q are polynomials in z[x] or q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1334'>subresultants_pg</a>(p,q,x)</tt>	P q are polynomials in z[x] or q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1399'>subresultants_amv_q</a>(p,q,x)</tt>	P q are polynomials in z[x] or q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1504'>compute_sign</a>(base,expo)</tt>	Base != 0 and expo >= 0 are integers.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1520'>rem_z</a>(p,q,x)</tt>	Intended mainly for p q polynomials in z[x] so that on dividing p by q the remainder will also be in z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1556'>quo_z</a>(p,q,x)</tt>	Intended mainly for p q polynomials in z[x] so that on dividing p by q the quotient will also be in z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1576'>subresultants_amv</a>(f,g,x)</tt>	P q are polynomials in z[x] or q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1718'>modified_subresultants_amv</a>(p,q,x)</tt>	P q are polynomials in z[x] or q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1782'>correct_sign</a>(deg_f,deg_g,s1,rdel)</tt>	Used in various subresultant prs algorithms.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1827'>subresultants_rem</a>(p,q,x)</tt>	P q are polynomials in z[x] or q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1900'>pivot</a>(M,i,j)</tt>	M is a matrix and m[i j] specifies the pivot element.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1929'>rotate_r</a>(L,k)</tt>	Rotates right by k l is a row of a matrix or a list.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1942'>rotate_l</a>(L,k)</tt>	Rotates left by k l is a row of a matrix or a list.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1955'>row2poly</a>(row,deg,x)</tt>	Converts the row of a matrix to a poly of degree deg and variable x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L1977'>create_ma</a>(deg_f,deg_g,row1,row2)</tt>	Creates a small'' matrix m to be triangularized.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L2003'>find_degree</a>(M,deg_f)</tt>	Finds the degree of the poly corresponding after triangularization to the _last_ row of the small'' matrix m created by create_ma().
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L2019'>final_touches</a>(s2,r,deg_g)</tt>	S2 is sylvester2 r is the row pointer in s2 deg_g is the degree of the poly last inserted in s2.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L2052'>subresultants_vv</a>(p,q,x,method)</tt>	P q are polynomials in z[x] intended or q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/subresultants_qq_zz.py#L2198'>subresultants_vv_2</a>(p,q,x)</tt>	P q are polynomials in z[x] intended or q[x] it is assumed.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L17'>dup_add_term</a>(f,c,i,K)</tt>	Add c*x**i to f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L46'>dmp_add_term</a>(f,c,i,u)</tt>	Add c(x_2 x_u)*x_0**i to f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L80'>dup_sub_term</a>(f,c,i,K)</tt>	Subtract c*x**i from f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L109'>dmp_sub_term</a>(f,c,i,u)</tt>	Subtract c(x_2 x_u)*x_0**i from f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L143'>dup_mul_term</a>(f,c,i,K)</tt>	Multiply f by c*x**i in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L163'>dmp_mul_term</a>(f,c,i,u)</tt>	Multiply f by c(x_2 x_u)*x_0**i in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L190'>dup_add_ground</a>(f,c,K)</tt>	Add an element of the ground domain to f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L207'>dmp_add_ground</a>(f,c,u,K)</tt>	Add an element of the ground domain to f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L224'>dup_sub_ground</a>(f,c,K)</tt>	Subtract an element of the ground domain from f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L241'>dmp_sub_ground</a>(f,c,u,K)</tt>	Subtract an element of the ground domain from f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L258'>dup_mul_ground</a>(f,c,K)</tt>	Multiply f by a constant value in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L278'>dmp_mul_ground</a>(f,c,u,K)</tt>	Multiply f by a constant value in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L300'>dup_quo_ground</a>(f,c,K)</tt>	Quotient by a constant in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L329'>dmp_quo_ground</a>(f,c,u,K)</tt>	Quotient by a constant in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L355'>dup_exquo_ground</a>(f,c,K)</tt>	Exact quotient by a constant in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L377'>dmp_exquo_ground</a>(f,c,u,K)</tt>	Exact quotient by a constant in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L399'>dup_lshift</a>(f,n,K)</tt>	Efficiently multiply f by x**n in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L419'>dup_rshift</a>(f,n,K)</tt>	Efficiently divide f by x**n in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L438'>dup_abs</a>(f,K)</tt>	Make all coefficients positive in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L455'>dmp_abs</a>(f,u,K)</tt>	Make all coefficients positive in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L477'>dup_neg</a>(f,K)</tt>	Negate a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L494'>dmp_neg</a>(f,u,K)</tt>	Negate a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L516'>dup_add</a>(f,g,K)</tt>	Add dense polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L551'>dmp_add</a>(f,g,u,K)</tt>	Add dense polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L593'>dup_sub</a>(f,g,K)</tt>	Subtract dense polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L628'>dmp_sub</a>(f,g,u,K)</tt>	Subtract dense polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L670'>dup_add_mul</a>(f,g,h,K)</tt>	Returns f + g*h where f g h are in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L687'>dmp_add_mul</a>(f,g,h,u)</tt>	Returns f + g*h where f g h are in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L704'>dup_sub_mul</a>(f,g,h,K)</tt>	Returns f - g*h where f g h are in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L721'>dmp_sub_mul</a>(f,g,h,u)</tt>	Returns f - g*h where f g h are in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L738'>dup_mul</a>(f,g,K)</tt>	Multiply dense polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L795'>dmp_mul</a>(f,g,u,K)</tt>	Multiply dense polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L838'>dup_sqr</a>(f,K)</tt>	Square dense polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L878'>dmp_sqr</a>(f,u,K)</tt>	Square dense polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L926'>dup_pow</a>(f,n,K)</tt>	Raise f to the n-th power in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L963'>dmp_pow</a>(f,n,u,K)</tt>	Raise f to the n-th power in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1003'>dup_pdiv</a>(f,g,K)</tt>	Polynomial pseudo-division in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1056'>dup_prem</a>(f,g,K)</tt>	Polynomial pseudo-remainder in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1101'>dup_pquo</a>(f,g,K)</tt>	Polynomial exact pseudo-quotient in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1121'>dup_pexquo</a>(f,g,K)</tt>	Polynomial pseudo-quotient in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1148'>dmp_pdiv</a>(f,g,u,K)</tt>	Polynomial pseudo-division in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1205'>dmp_prem</a>(f,g,u,K)</tt>	Polynomial pseudo-remainder in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1256'>dmp_pquo</a>(f,g,u,K)</tt>	Polynomial exact pseudo-quotient in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1280'>dmp_pexquo</a>(f,g,u,K)</tt>	Polynomial pseudo-quotient in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1311'>dup_rr_div</a>(f,g,K)</tt>	Univariate division with remainder over a ring.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1360'>dmp_rr_div</a>(f,g,u,K)</tt>	Multivariate division with remainder over a ring.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1413'>dup_ff_div</a>(f,g,K)</tt>	Polynomial division with remainder over a field.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1459'>dmp_ff_div</a>(f,g,u,K)</tt>	Polynomial division with remainder over a field.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1512'>dup_div</a>(f,g,K)</tt>	Polynomial division with remainder in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1536'>dup_rem</a>(f,g,K)</tt>	Returns polynomial remainder in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1557'>dup_quo</a>(f,g,K)</tt>	Returns exact polynomial quotient in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1578'>dup_exquo</a>(f,g,K)</tt>	Returns polynomial quotient in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1605'>dmp_div</a>(f,g,u,K)</tt>	Polynomial division with remainder in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1629'>dmp_rem</a>(f,g,u,K)</tt>	Returns polynomial remainder in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1650'>dmp_quo</a>(f,g,u,K)</tt>	Returns exact polynomial quotient in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1671'>dmp_exquo</a>(f,g,u,K)</tt>	Returns polynomial quotient in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1702'>dup_max_norm</a>(f,K)</tt>	Returns maximum norm of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1722'>dmp_max_norm</a>(f,u,K)</tt>	Returns maximum norm of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1744'>dup_l1_norm</a>(f,K)</tt>	Returns l1 norm of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1764'>dmp_l1_norm</a>(f,u,K)</tt>	Returns l1 norm of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1786'>dup_expand</a>(polys,K)</tt>	Multiply together several polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densearith.py#L1811'>dmp_expand</a>(polys,u,K)</tt>	Multiply together several polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L15'>_trivial_gcd</a>(f,g)</tt>	Compute the gcd of two polynomials in trivial cases i e when one.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L37'>_gf_gcd</a>(fp,gp,p)</tt>	Compute the gcd of two univariate polynomials in \mathbb{z}_p[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L60'>_degree_bound_univariate</a>(f,g)</tt>	Compute an upper bound for the degree of the gcd of two univariate integer polynomials f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L93'>_chinese_remainder_reconstruction_univariate</a>(hp,hq,p,q)</tt>	Construct a polynomial h_{pq} in \mathbb{z}_{p q}[x] such that.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L158'>modgcd_univariate</a>(f,g)</tt>	Computes the gcd of two polynomials in \mathbb{z}[x] using a modular algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L287'>_primitive</a>(f,p)</tt>	Compute the content and the primitive part of a polynomial in \mathbb{z}_p[x_0 \ldots x_{k-2}, y] \cong \mathbb{z}_p[y][x_0 \ldots x_{k-2}].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L348'>_deg</a>(f)</tt>	Compute the degree of a multivariate polynomial f \in k[x_0 \ldots x_{k-2}, y] \cong k[y][x_0 \ldots x_{k-2}].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4432'>LC</a>(f)</tt>	Return the leading coefficient of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L449'>_swap</a>(f,i)</tt>	Make the variable x_i the leading one in a multivariate polynomial f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L462'>_degree_bound_bivariate</a>(f,g)</tt>	Compute upper degree bounds for the gcd of two bivariate integer polynomials f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L537'>_chinese_remainder_reconstruction_multivariate</a>(hp,hq,p,q)</tt>	Construct a polynomial h_{pq} in \mathbb{z}_{p q}[x_0 \ldots x_{k-1}] such that.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L635'>_interpolate_multivariate</a>(evalpoints,hpeval,ring,i)</tt>	Reconstruct a polynomial h_p in \mathbb{z}_p[x_0 \ldots x_{k-1}] from a list of evaluation points in \mathbb{z}_p and a list of.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L700'>modgcd_bivariate</a>(f,g)</tt>	Computes the gcd of two polynomials in \mathbb{z}[x y] using a modular algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L912'>_modgcd_multivariate_p</a>(f,g,p,degbound)</tt>	Compute the gcd of two polynomials in \mathbb{z}_p[x0 \ldots x{k-1}].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L1065'>modgcd_multivariate</a>(f,g)</tt>	Compute the gcd of two polynomials in \mathbb{z}[x_0 \ldots x_{k-1}] using a modular algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L1212'>_gf_div</a>(f,g,p)</tt>	Compute \frac f g modulo p for two univariate polynomials over \mathbb z_p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L1222'>_rational_function_reconstruction</a>(c,p,m)</tt>	Reconstruct a rational function \frac a b in \mathbb z_p t from.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L1288'>_rational_reconstruction_func_coeffs</a>(hm,p,m,ring)</tt>	Reconstruct every coefficient c_h of a polynomial h in \mathbb z_p(t_k)[t_1 \ldots t_{k-1}][x z] from the corresponding.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L1358'>_gf_gcdex</a>(f,g,p)</tt>	Extended euclidean algorithm for two univariate polynomials over \mathbb z_p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L1372'>_trunc</a>(f,minpoly,p)</tt>	Compute the reduced representation of a polynomial f in.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L1403'>_euclidean_algorithm</a>(f,g,minpoly,p)</tt>	Compute the monic gcd of two univariate polynomials in \mathbb{z}_p[z]/(\check m_{\alpha} z )[x] with the euclidean.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L1459'>_trial_division</a>(f,h,minpoly,p)</tt>	Check if h divides f in \mathbb k[t_1 \ldots t_k][z]/(m_{\alpha} z ), where \mathbb k is.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L1529'>_evaluate_ground</a>(f,i,a)</tt>	Evaluate a polynomial f at a in the i-th variable of the ground domain.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L1543'>_func_field_modgcd_p</a>(f,g,minpoly,p)</tt>	Compute the gcd of two polynomials f and g in \mathbb z_p(t_1 \ldots t_k)[z]/(\check m_\alpha z )[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L1709'>_integer_rational_reconstruction</a>(c,m,domain)</tt>	Reconstruct a rational number \frac a b from.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L1773'>_rational_reconstruction_int_coeffs</a>(hm,m,ring)</tt>	Reconstruct every rational coefficient c_h of a polynomial h in \mathbb q[t_1 \ldots t_k][x z] from the corresponding integer.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L1834'>_func_field_modgcd_m</a>(f,g,minpoly)</tt>	Compute the gcd of two polynomials in \mathbb q(t_1 \ldots t_k)[z]/(m_{\alpha} z )[x] using a modular.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L1990'>_to_ZZ_poly</a>(f,ring)</tt>	Compute an associate of a polynomial f \in \mathbb q(\alpha)[x_0 \ldots x_{n-1}] in.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L2048'>_to_ANP_poly</a>(f,ring)</tt>	Convert a polynomial f \in \mathbb z[x_1 \ldots x_{n-1}][z]/(\check m_{\alpha} z )[x_0].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L2099'>_minpoly_from_dense</a>(minpoly,ring)</tt>	Change representation of the minimal polynomial from dmp to polyelement for a given ring.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L2112'>_primitive_in_x0</a>(f)</tt>	Compute the content in x_0 and the primitive part of a polynomial f in.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/modulargcd.py#L2133'>func_field_modgcd</a>(f,g)</tt>	Compute the gcd of two polynomials f and g in \mathbb q(\alpha)[x_0 \ldots x_{n-1}] using a modular algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L82'>dup_trial_division</a>(f,factors,K)</tt>	Determine multiplicities of factors using trial division.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L102'>dmp_trial_division</a>(f,factors,u,K)</tt>	Determine multiplicities of factors using trial division.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L122'>dup_zz_mignotte_bound</a>(f,K)</tt>	Mignotte bound for univariate polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L131'>dmp_zz_mignotte_bound</a>(f,u,K)</tt>	Mignotte bound for multivariate polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L140'>dup_zz_hensel_step</a>(m,f,g,h)</tt>	One step in hensel lifting in z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L197'>dup_zz_hensel_lift</a>(p,f,f_list,l)</tt>	Multifactor hensel lifting in z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L261'>dup_zz_zassenhaus</a>(f,K)</tt>	Factor primitive square-free polynomials in z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L364'>dup_zz_irreducible_p</a>(f,K)</tt>	Test irreducibility using eisenstein's criterion.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L379'>dup_cyclotomic_p</a>(f,K,irreducible)</tt>	Efficiently test if f is a cyclotomic polnomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L455'>dup_zz_cyclotomic_poly</a>(n,K)</tt>	Efficiently generate n-th cyclotomic polnomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L480'>dup_zz_cyclotomic_factor</a>(f,K)</tt>	Efficiently factor polynomials x**n - 1 and x**n + 1 in z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L524'>dup_zz_factor_sqf</a>(f,K)</tt>	Factor square-free non-primitive polyomials in z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L553'>dup_zz_factor</a>(f,K)</tt>	Factor non square-free polynomials in z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L625'>dmp_zz_wang_non_divisors</a>(E,cs,ct,K)</tt>	Wang/eez compute a set of valid divisors.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L645'>dmp_zz_wang_test_points</a>(f,T,ct,A)</tt>	Wang/eez test evaluation points for suitability.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L671'>dmp_zz_wang_lead_coeffs</a>(f,T,cs,E)</tt>	Wang/eez compute correct leading coefficients.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L725'>dup_zz_diophantine</a>(F,m,p,K)</tt>	Wang/eez solve univariate diophantine equations.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L773'>dmp_zz_diophantine</a>(F,c,A,d)</tt>	Wang/eez solve multivariate diophantine equations.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L841'>dmp_zz_wang_hensel_lifting</a>(f,H,LC,A)</tt>	Wang/eez parallel hensel lifting algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L893'>dmp_zz_wang</a>(f,u,K,mod)</tt>	Factor primitive square-free polynomials in z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L1035'>dmp_zz_factor</a>(f,u,K)</tt>	Factor non square-free polynomials in z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L1100'>dup_ext_factor</a>(f,K)</tt>	Factor univariate polynomials over algebraic number fields.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L1131'>dmp_ext_factor</a>(f,u,K)</tt>	Factor multivariate polynomials over algebraic number fields.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L1161'>dup_gf_factor</a>(f,K)</tt>	Factor univariate polynomials over finite fields.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L1173'>dmp_gf_factor</a>(f,u,K)</tt>	Factor multivariate polynomials over finite fields.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L1178'>dup_factor_list</a>(f,K0)</tt>	Factor polynomials into irreducibles in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L1239'>dup_factor_list_include</a>(f,K)</tt>	Factor polynomials into irreducibles in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L1250'>dmp_factor_list</a>(f,u,K0)</tt>	Factor polynomials into irreducibles in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L1322'>dmp_factor_list_include</a>(f,u,K)</tt>	Factor polynomials into irreducibles in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L1336'>dup_irreducible_p</a>(f,K)</tt>	Returns true if f has no factors over its domain.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/factortools.py#L1341'>dmp_irreducible_p</a>(f,u,K)</tt>	Returns true if f has no factors over its domain.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyfuncs.py#L23'>symmetrize</a>(F)</tt>	Rewrite a polynomial in terms of elementary symmetric polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyfuncs.py#L156'>horner</a>(f)</tt>	Rewrite a polynomial in horner form.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyfuncs.py#L210'>interpolate</a>(data,x)</tt>	Construct an interpolating polynomial for the data points.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyfuncs.py#L257'>rational_interpolate</a>(data,degnum,X)</tt>	Returns a rational interpolation where the data points are element of any integral domain.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyfuncs.py#L315'>viete</a>(f,roots)</tt>	Generate viete's formulas for f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/constructor.py#L13'>_construct_simple</a>(coeffs,opt)</tt>	Handle simple domains e g : zz qq rr and algebraic domains.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/constructor.py#L65'>_construct_algebraic</a>(coeffs,opt)</tt>	We know that coefficients are algebraic so construct the extension.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/constructor.py#L108'>_construct_composite</a>(coeffs,opt)</tt>	Handle composite domains e g : zz[x], qq[x], zz x qq x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/constructor.py#L209'>_construct_expression</a>(coeffs,opt)</tt>	The last resort case i e use the expression domain.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/constructor.py#L219'>construct_domain</a>(obj)</tt>	Construct a minimal domain for the list of coefficients.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L131'>new</a>(cls,rep)</tt>	Construct :class poly instance from raw representation.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L147'>from_dict</a>(cls,rep)</tt>	Construct a polynomial from a dict.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L153'>from_list</a>(cls,rep)</tt>	Construct a polynomial from a list.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L159'>from_poly</a>(cls,rep)</tt>	Construct a polynomial from a polynomial.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L165'>from_expr</a>(cls,rep)</tt>	Construct a polynomial from an expression.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L171'>_from_dict</a>(cls,rep,opt)</tt>	Construct a polynomial from a dict.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L191'>_from_list</a>(cls,rep,opt)</tt>	Construct a polynomial from a list.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L213'>_from_poly</a>(cls,rep,opt)</tt>	Construct a polynomial from a polynomial.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L236'>_from_expr</a>(cls,rep,opt)</tt>	Construct a polynomial from an expression.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L242'>_hashable_content</a>()</tt>	Allow sympy to hash poly instances.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L249'>free_symbols</a>()</tt>	Free symbols of a polynomial expression.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L275'>free_symbols_in_domain</a>()</tt>	Free symbols of the domain of self.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L305'>args</a>()</tt>	Don't mess up with the core.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L322'>gen</a>()</tt>	Return the principal generator.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L339'>domain</a>()</tt>	Get the ground domain of self.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L344'>zero</a>()</tt>	Return zero polynomial with self's properties.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L349'>one</a>()</tt>	Return one polynomial with self's properties.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L354'>unit</a>()</tt>	Return unit polynomial with self's properties.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L359'>unify</a>(f,g)</tt>	Make f and g belong to the same domain.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L438'>per</a>(f,rep,gens,remove)</tt>	Create a poly out of the given representation.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L467'>set_domain</a>(f,domain)</tt>	Set the ground domain of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L472'>get_domain</a>(f)</tt>	Get the ground domain of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L476'>set_modulus</a>(f,modulus)</tt>	Set the modulus of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L493'>get_modulus</a>(f)</tt>	Get the modulus of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L514'>_eval_subs</a>(f,old,new)</tt>	Internal implementation of :func subs.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L527'>exclude</a>(f)</tt>	Remove unnecessary generators from f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L550'>replace</a>(f,x,y)</tt>	Replace x with y in generators list.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L584'>reorder</a>(f)</tt>	Efficiently apply new order of generators.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L610'>ltrim</a>(f,gen)</tt>	Remove dummy generators from the "left" of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L640'>has_only_gens</a>(f)</tt>	Return true if poly(f *gens) retains ground domain.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L674'>to_ring</a>(f)</tt>	Make the ground domain a ring.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L695'>to_field</a>(f)</tt>	Make the ground domain a field.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L716'>to_exact</a>(f)</tt>	Make the ground domain exact.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L737'>retract</a>(f,field)</tt>	Recalculate the ground domain of a polynomial.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L761'>slice</a>(f,x,m,n)</tt>	Take a continuous subsequence of terms of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L777'>coeffs</a>(f,order)</tt>	Returns all non-zero coefficients from f in lex order.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L799'>monoms</a>(f,order)</tt>	Returns all non-zero monomials from f in lex order.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L819'>terms</a>(f,order)</tt>	Returns all non-zero terms from f in lex order.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L839'>all_coeffs</a>(f)</tt>	Returns all coefficients from a univariate polynomial f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L855'>all_monoms</a>(f)</tt>	Returns all monomials from a univariate polynomial f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L875'>all_terms</a>(f)</tt>	Returns all terms from a univariate polynomial f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L891'>termwise</a>(f,func)</tt>	Apply a function to all terms of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L928'>length</a>(f)</tt>	Returns the number of non-zero terms in f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L944'>as_dict</a>(f,native,zero)</tt>	Switch to a dict representation.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L963'>as_list</a>(f,native)</tt>	Switch to a list representation.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L970'>as_expr</a>(f)</tt>	Convert a poly instance to an expr instance.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1007'>lift</a>(f)</tt>	Convert algebraic coefficients to rationals.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1028'>deflate</a>(f)</tt>	Reduce degree of f by mapping x_i**m to y_i.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1049'>inject</a>(f,front)</tt>	Inject ground domain generators into f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1086'>eject</a>(f)</tt>	Eject selected generators into the ground domain.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1128'>terms_gcd</a>(f)</tt>	Remove gcd of terms from the polynomial f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1149'>add_ground</a>(f,coeff)</tt>	Add an element of the ground domain to f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1170'>sub_ground</a>(f,coeff)</tt>	Subtract an element of the ground domain from f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1191'>mul_ground</a>(f,coeff)</tt>	Multiply f by a an element of the ground domain.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1212'>quo_ground</a>(f,coeff)</tt>	Quotient of f by a an element of the ground domain.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1236'>exquo_ground</a>(f,coeff)</tt>	Exact quotient of f by a an element of the ground domain.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1262'>abs</a>(f)</tt>	Make all coefficients in f positive.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1283'>neg</a>(f)</tt>	Negate all coefficients in f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1307'>add</a>(f,g)</tt>	Add two polynomials f and g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1338'>sub</a>(f,g)</tt>	Subtract two polynomials f and g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1369'>mul</a>(f,g)</tt>	Multiply two polynomials f and g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1400'>sqr</a>(f)</tt>	Square a polynomial f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1424'>pow</a>(f,n)</tt>	Raise f to a non-negative power n.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1450'>pdiv</a>(f,g)</tt>	Polynomial pseudo-division of f by g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1473'>prem</a>(f,g)</tt>	Polynomial pseudo-remainder of f by g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1512'>pquo</a>(f,g)</tt>	Polynomial pseudo-quotient of f by g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1540'>pexquo</a>(f,g)</tt>	Polynomial exact pseudo-quotient of f by g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1571'>div</a>(f,g,auto)</tt>	Polynomial division with remainder of f by g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1610'>rem</a>(f,g,auto)</tt>	Computes the polynomial remainder of f by g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1647'>quo</a>(f,g,auto)</tt>	Computes polynomial quotient of f by g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1684'>exquo</a>(f,g,auto)</tt>	Computes polynomial exact quotient of f by g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1726'>_gen_to_level</a>(f,gen)</tt>	Returns level associated with the given generator.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1746'>degree</a>(f,gen)</tt>	Returns degree of f in x_j.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1773'>degree_list</a>(f)</tt>	Returns a list of degrees of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1792'>total_degree</a>(f)</tt>	Returns the total degree of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1813'>homogenize</a>(f,s)</tt>	Returns the homogeneous polynomial of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1847'>homogeneous_order</a>(f)</tt>	Returns the homogeneous order of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1872'>LC</a>(f,order)</tt>	Returns the leading coefficient of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1896'>TC</a>(f)</tt>	Returns the trailing coefficient of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1917'>EC</a>(f,order)</tt>	Returns the last non-zero coefficient of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1936'>coeff_monomial</a>(f,monom)</tt>	Returns the coefficient of monom in f if there else none.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L1973'>nth</a>(f)</tt>	Returns the n-th coefficient of f where n are the exponents of the generators in the term of interest.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2019'>LM</a>(f,order)</tt>	Returns the leading monomial of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2039'>EM</a>(f,order)</tt>	Returns the last non-zero monomial of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2055'>LT</a>(f,order)</tt>	Returns the leading term of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2076'>ET</a>(f,order)</tt>	Returns the last non-zero term of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2093'>max_norm</a>(f)</tt>	Returns maximum norm of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2114'>l1_norm</a>(f)</tt>	Returns l1 norm of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2135'>clear_denoms</a>(convert)</tt>	Clear denominators but keep the ground domain.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2174'>rat_clear_denoms</a>(g)</tt>	Clear denominators in a rational function f/g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2213'>integrate</a>()</tt>	Computes indefinite integral of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2253'>diff</a>(f)</tt>	Computes partial derivative of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2294'>eval</a>(x,a,auto)</tt>	Evaluate f at a in the given variable.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2369'>__call__</a>(f)</tt>	Evaluate f at the give values.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2391'>half_gcdex</a>(f,g,auto)</tt>	Half extended euclidean algorithm of f and g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2422'>gcdex</a>(f,g,auto)</tt>	Extended euclidean algorithm of f and g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2455'>invert</a>(f,g,auto)</tt>	Invert f modulo g when possible.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2486'>revert</a>(f,n)</tt>	Compute f** -1 mod x**n.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2520'>subresultants</a>(f,g)</tt>	Computes the subresultant prs of f and g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2545'>resultant</a>(f,g,includePRS)</tt>	Computes the resultant of f and g via prs.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2582'>discriminant</a>(f)</tt>	Computes the discriminant of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2603'>dispersionset</a>(f,g)</tt>	Compute the *dispersion set* of two polynomials.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2678'>dispersion</a>(f,g)</tt>	Compute the *dispersion* of polynomials.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2753'>cofactors</a>(f,g)</tt>	Returns the gcd of f and g and their cofactors.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2782'>gcd</a>(f,g)</tt>	Returns the polynomial gcd of f and g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2805'>lcm</a>(f,g)</tt>	Returns polynomial lcm of f and g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2828'>trunc</a>(f,p)</tt>	Reduce f modulo a constant p.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2851'>monic</a>(auto)</tt>	Divides all coefficients by lc f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2880'>content</a>(f)</tt>	Returns the gcd of polynomial coefficients.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2901'>primitive</a>(f)</tt>	Returns the content and a primitive form of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2922'>compose</a>(f,g)</tt>	Computes the functional composition of f and g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2945'>decompose</a>(f)</tt>	Computes a functional decomposition of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2966'>shift</a>(f,a)</tt>	Efficiently compute taylor shift f x + a.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L2987'>transform</a>(f,p,q)</tt>	Efficiently evaluate the functional transformation q**n * f(p/q).
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3013'>sturm</a>(auto)</tt>	Computes the sturm sequence of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3042'>gff_list</a>(f)</tt>	Computes greatest factorial factorization of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3065'>sqf_norm</a>(f)</tt>	Computes square-free norm of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3096'>sqf_part</a>(f)</tt>	Computes square-free part of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3117'>sqf_list</a>(f,all)</tt>	Returns a list of square-free factors of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3146'>sqf_list_include</a>(f,all)</tt>	Returns a list of square-free factors of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3179'>factor_list</a>(f)</tt>	Returns a list of irreducible factors of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3206'>factor_list_include</a>(f)</tt>	Returns a list of irreducible factors of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3233'>intervals</a>(f,all,eps,inf)</tt>	Compute isolating intervals for roots of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3309'>refine_root</a>(f,s,t,eps)</tt>	Refine an isolating interval of a root to the given precision.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3346'>count_roots</a>(f,inf,sup)</tt>	Return the number of roots of f in [inf sup] interval.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3409'>root</a>(f,index,radicals)</tt>	Get an indexed root of a polynomial.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3438'>real_roots</a>(f,multiple,radicals)</tt>	Return a list of real roots with multiplicities.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3461'>all_roots</a>(f,multiple,radicals)</tt>	Return a list of real and complex roots with multiplicities.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3486'>nroots</a>(f,n,maxsteps,cleanup)</tt>	Compute numerical approximations of roots of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3559'>ground_roots</a>(f)</tt>	Compute roots of f by factorization in the ground domain.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3586'>nth_power_roots_poly</a>(f,n)</tt>	Construct a polynomial with n-th powers of roots of f.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3626'>cancel</a>(f,g,include)</tt>	Cancel common factors in a rational function f/g.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3663'>is_zero</a>(f)</tt>	Returns true if f is a zero polynomial.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3682'>is_one</a>(f)</tt>	Returns true if f is a unit polynomial.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3701'>is_sqf</a>(f)</tt>	Returns true if f is a square-free polynomial.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3720'>is_monic</a>(f)</tt>	Returns true if the leading coefficient of f is one.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3739'>is_primitive</a>(f)</tt>	Returns true if gcd of the coefficients of f is one.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3758'>is_ground</a>(f)</tt>	Returns true if f is an element of the ground domain.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3779'>is_linear</a>(f)</tt>	Returns true if f is linear in all its variables.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3798'>is_quadratic</a>(f)</tt>	Returns true if f is quadratic in all its variables.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3817'>is_monomial</a>(f)</tt>	Returns true if f is zero or has only one term.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3836'>is_homogeneous</a>(f)</tt>	Returns true if f is a homogeneous polynomial.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3860'>is_irreducible</a>(f)</tt>	Returns true if f has no factors over its domain.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3879'>is_univariate</a>(f)</tt>	Returns true if f is a univariate polynomial.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3902'>is_multivariate</a>(f)</tt>	Returns true if f is a multivariate polynomial.
<tt style='background-color:#E8E8E8;'> polys.Poly <a href=' /polys/polytools.py#L3925'>is_cyclotomic</a>(f)</tt>	Returns true if f is a cyclotomic polnomial.
<tt style='background-color:#E8E8E8;'> polys.PurePoly <a href=' /polys/polytools.py#L4125'>_hashable_content</a>()</tt>	Allow sympy to hash poly instances.
<tt style='background-color:#E8E8E8;'> polys.PurePoly <a href=' /polys/polytools.py#L4132'>free_symbols</a>()</tt>	Free symbols of a polynomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4215'>poly_from_expr</a>(expr)</tt>	Construct a polynomial from an expression.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4222'>_poly_from_expr</a>(expr,opt)</tt>	Construct a polynomial from an expression.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4262'>parallel_poly_from_expr</a>(exprs)</tt>	Construct polynomials from expressions.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4269'>_parallel_poly_from_expr</a>(exprs,opt)</tt>	Construct polynomials from expressions.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4364'>_update_args</a>(args,key,value)</tt>	Add a new key value pair to arguments dict.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4374'>degree</a>(f)</tt>	Return the degree of f in the given variable.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4405'>degree_list</a>(f)</tt>	Return a list of degrees of f in all variables.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4457'>LM</a>(f)</tt>	Return the leading monomial of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4483'>LT</a>(f)</tt>	Return the leading term of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4509'>pdiv</a>(f,g)</tt>	Compute polynomial pseudo-division of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4539'>prem</a>(f,g)</tt>	Compute polynomial pseudo-remainder of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4569'>pquo</a>(f,g)</tt>	Compute polynomial pseudo-quotient of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4604'>pexquo</a>(f,g)</tt>	Compute polynomial exact pseudo-quotient of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4639'>div</a>(f,g)</tt>	Compute polynomial division of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4671'>rem</a>(f,g)</tt>	Compute polynomial remainder of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4703'>quo</a>(f,g)</tt>	Compute polynomial quotient of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4735'>exquo</a>(f,g)</tt>	Compute polynomial exact quotient of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4770'>half_gcdex</a>(f,g)</tt>	Half extended euclidean algorithm of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4809'>gcdex</a>(f,g)</tt>	Extended euclidean algorithm of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4848'>invert</a>(f,g)</tt>	Invert f modulo g when possible.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4900'>subresultants</a>(f,g)</tt>	Compute subresultant prs of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4930'>resultant</a>(f,g)</tt>	Compute resultant of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4968'>discriminant</a>(f)</tt>	Compute discriminant of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L4998'>cofactors</a>(f,g)</tt>	Compute gcd and cofactors of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5039'>gcd_list</a>(seq)</tt>	Compute gcd of a list of polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5112'>gcd</a>(f,g)</tt>	Compute gcd of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5155'>lcm_list</a>(seq)</tt>	Compute lcm of a list of polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5222'>lcm</a>(f,g)</tt>	Compute lcm of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5265'>terms_gcd</a>(f)</tt>	Remove gcd of terms from f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5381'>trunc</a>(f,p)</tt>	Reduce f modulo a constant p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5411'>monic</a>(f)</tt>	Divide all coefficients of f by lc f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5441'>content</a>(f)</tt>	Compute gcd of coefficients of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5466'>primitive</a>(f)</tt>	Compute content and the primitive form of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5512'>compose</a>(f,g)</tt>	Compute functional composition f g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5542'>decompose</a>(f)</tt>	Compute functional decomposition of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5572'>sturm</a>(f)</tt>	Compute sturm sequence of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5602'>gff_list</a>(f)</tt>	Compute a list of greatest factorial factors of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5646'>gff</a>(f)</tt>	Compute greatest factorial factorization of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5652'>sqf_norm</a>(f)</tt>	Compute square-free norm of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5686'>sqf_part</a>(f)</tt>	Compute square-free part of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5716'>_sorted_factors</a>(factors,method)</tt>	Sort a list of expr exp pairs.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5732'>_factors_product</a>(factors)</tt>	Multiply a list of expr exp pairs.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5737'>_symbolic_factor_list</a>(expr,opt,method)</tt>	Helper function for :func _symbolic_factor.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5795'>_symbolic_factor</a>(expr,opt,method)</tt>	Helper function for :func _factor.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5810'>_generic_factor_list</a>(expr,gens,args,method)</tt>	Helper function for :func sqf_list and :func factor_list.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5851'>_generic_factor</a>(expr,gens,args,method)</tt>	Helper function for :func sqf and :func factor.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5858'>to_rational_coeffs</a>(f)</tt>	Try to transform a polynomial to have rational coefficients try to find a transformation x = alpha*y.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L5994'>_torational_factor_list</a>(p,x)</tt>	Helper function to factor polynomial using to_rational_coeffs examples.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6038'>sqf_list</a>(f)</tt>	Compute a list of square-free factors of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6056'>sqf</a>(f)</tt>	Compute square-free factorization of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6074'>factor_list</a>(f)</tt>	Compute a list of irreducible factors of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6092'>factor</a>(f)</tt>	Compute the factorization of expression f, into irreducibles (to.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6172'>intervals</a>(F,all,eps,inf)</tt>	Compute isolating intervals for roots of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6228'>refine_root</a>(f,s,t,eps)</tt>	Refine an isolating interval of a root to the given precision.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6252'>count_roots</a>(f,inf,sup)</tt>	Return the number of roots of f in [inf sup] interval.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6280'>real_roots</a>(f,multiple)</tt>	Return a list of real roots with multiplicities of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6304'>nroots</a>(f,n,maxsteps,cleanup)</tt>	Compute numerical approximations of roots of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6330'>ground_roots</a>(f)</tt>	Compute roots of f by factorization in the ground domain.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6355'>nth_power_roots_poly</a>(f,n)</tt>	Construct a polynomial with n-th powers of roots of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6394'>cancel</a>(f)</tt>	Cancel common factors in a rational function f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6472'>reduced</a>(f,G)</tt>	Reduces a polynomial f modulo a set of polynomials g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L12'>groebner</a>(F)</tt>	Computes the reduced groebner basis for a set of polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6586'>is_zero_dimensional</a>(F)</tt>	Checks if the ideal generated by a groebner basis is zero-dimensional.
<tt style='background-color:#E8E8E8;'> polys.GroebnerBasis <a href=' /polys/polytools.py#L6608'>__new__</a>(cls,F)</tt>	Compute a reduced groebner basis for a system of polynomials.
<tt style='background-color:#E8E8E8;'> polys.GroebnerBasis <a href=' /polys/polytools.py#L6691'>is_zero_dimensional</a>()</tt>	Checks if the ideal generated by a groebner basis is zero-dimensional.
<tt style='background-color:#E8E8E8;'> polys.GroebnerBasis <a href=' /polys/polytools.py#L6723'>fglm</a>(order)</tt>	Convert a groebner basis from one ordering to another.
<tt style='background-color:#E8E8E8;'> polys.GroebnerBasis <a href=' /polys/polytools.py#L6789'>reduce</a>(expr,auto)</tt>	Reduces a polynomial modulo a groebner basis.
<tt style='background-color:#E8E8E8;'> polys.GroebnerBasis <a href=' /polys/polytools.py#L6854'>contains</a>(poly)</tt>	Check if poly belongs the ideal generated by self.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polytools.py#L6876'>poly</a>(expr)</tt>	Efficiently transform an expression into a polynomial.
<tt style='background-color:#E8E8E8;'> polys.GenericPoly <a href=' /polys/polyclasses.py#L15'>ground_to_ring</a>(f)</tt>	Make the ground domain a ring.
<tt style='background-color:#E8E8E8;'> polys.GenericPoly <a href=' /polys/polyclasses.py#L19'>ground_to_field</a>(f)</tt>	Make the ground domain a field.
<tt style='background-color:#E8E8E8;'> polys.GenericPoly <a href=' /polys/polyclasses.py#L23'>ground_to_exact</a>(f)</tt>	Make the ground domain exact.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L170'>unify</a>(f,g)</tt>	Unify representations of two multivariate polynomials.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L200'>per</a>(f,rep,dom,kill)</tt>	Create a dmp out of the given representation.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L226'>from_list</a>(cls,rep,lev,dom)</tt>	Create an instance of cls given a list of native coefficients.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L231'>from_sympy_list</a>(cls,rep,lev,dom)</tt>	Create an instance of cls given a list of sympy coefficients.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L236'>to_dict</a>(f,zero)</tt>	Convert f to a dict representation with native coefficients.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L240'>to_sympy_dict</a>(f,zero)</tt>	Convert f to a dict representation with sympy coefficients.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L249'>to_tuple</a>(f)</tt>	Convert f to a tuple representation with native coefficients.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L257'>from_dict</a>(cls,rep,lev,dom)</tt>	Construct and instance of cls from a dict representation.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L266'>to_ring</a>(f)</tt>	Make the ground domain a ring.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L270'>to_field</a>(f)</tt>	Make the ground domain a field.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L274'>to_exact</a>(f)</tt>	Make the ground domain exact.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L278'>convert</a>(f,dom)</tt>	Convert the ground domain of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L285'>slice</a>(f,m,n,j)</tt>	Take a continuous subsequence of terms of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L289'>coeffs</a>(f,order)</tt>	Returns all non-zero coefficients from f in lex order.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L293'>monoms</a>(f,order)</tt>	Returns all non-zero monomials from f in lex order.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L297'>terms</a>(f,order)</tt>	Returns all non-zero terms from f in lex order.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L301'>all_coeffs</a>(f)</tt>	Returns all coefficients from f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L311'>all_monoms</a>(f)</tt>	Returns all monomials from f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L323'>all_terms</a>(f)</tt>	Returns all terms from a f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L335'>lift</a>(f)</tt>	Convert algebraic coefficients to rationals.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L339'>deflate</a>(f)</tt>	Reduce degree of f by mapping x_i^m to y_i.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L344'>inject</a>(f,front)</tt>	Inject ground domain generators into f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L349'>eject</a>(f,dom,front)</tt>	Eject selected generators into the ground domain.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L354'>exclude</a>(f)</tt>	Remove useless generators from f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L373'>permute</a>(f,P)</tt>	Returns a polynomial in k[x_{p 1 }, x_{p n }].
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L392'>terms_gcd</a>(f)</tt>	Remove gcd of terms from the polynomial f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L397'>add_ground</a>(f,c)</tt>	Add an element of the ground domain to f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L401'>sub_ground</a>(f,c)</tt>	Subtract an element of the ground domain from f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L405'>mul_ground</a>(f,c)</tt>	Multiply f by a an element of the ground domain.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L409'>quo_ground</a>(f,c)</tt>	Quotient of f by a an element of the ground domain.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L413'>exquo_ground</a>(f,c)</tt>	Exact quotient of f by a an element of the ground domain.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L417'>abs</a>(f)</tt>	Make all coefficients in f positive.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L421'>neg</a>(f)</tt>	Negate all coefficients in f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L425'>add</a>(f,g)</tt>	Add two multivariate polynomials f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L430'>sub</a>(f,g)</tt>	Subtract two multivariate polynomials f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L435'>mul</a>(f,g)</tt>	Multiply two multivariate polynomials f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L440'>sqr</a>(f)</tt>	Square a multivariate polynomial f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L444'>pow</a>(f,n)</tt>	Raise f to a non-negative power n.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L451'>pdiv</a>(f,g)</tt>	Polynomial pseudo-division of f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L457'>prem</a>(f,g)</tt>	Polynomial pseudo-remainder of f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L462'>pquo</a>(f,g)</tt>	Polynomial pseudo-quotient of f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L467'>pexquo</a>(f,g)</tt>	Polynomial exact pseudo-quotient of f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L472'>div</a>(f,g)</tt>	Polynomial division with remainder of f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L478'>rem</a>(f,g)</tt>	Computes polynomial remainder of f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L483'>quo</a>(f,g)</tt>	Computes polynomial quotient of f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L488'>exquo</a>(f,g)</tt>	Computes polynomial exact quotient of f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L497'>degree</a>(f,j)</tt>	Returns the leading degree of f in x_j.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L504'>degree_list</a>(f)</tt>	Returns a list of degrees of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L508'>total_degree</a>(f)</tt>	Returns the total degree of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L512'>homogenize</a>(f,s)</tt>	Return homogeneous polynomial of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L531'>homogeneous_order</a>(f)</tt>	Returns the homogeneous order of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L547'>LC</a>(f)</tt>	Returns the leading coefficient of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L551'>TC</a>(f)</tt>	Returns the trailing coefficient of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L555'>nth</a>(f)</tt>	Returns the n-th coefficient of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L562'>max_norm</a>(f)</tt>	Returns maximum norm of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L566'>l1_norm</a>(f)</tt>	Returns l1 norm of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L570'>clear_denoms</a>(f)</tt>	Clear denominators but keep the ground domain.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L575'>integrate</a>(f,m,j)</tt>	Computes the m-th order indefinite integral of f in x_j.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L585'>diff</a>(f,m,j)</tt>	Computes the m-th order derivative of f in x_j.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L595'>eval</a>(f,a,j)</tt>	Evaluates f at the given point a in x_j.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L603'>half_gcdex</a>(f,g)</tt>	Half extended euclidean algorithm if univariate.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L613'>gcdex</a>(f,g)</tt>	Extended euclidean algorithm if univariate.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L623'>invert</a>(f,g)</tt>	Invert f modulo g, if possible.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L632'>revert</a>(f,n)</tt>	Compute f** -1 mod x**n.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L639'>subresultants</a>(f,g)</tt>	Computes subresultant prs sequence of f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L645'>resultant</a>(f,g,includePRS)</tt>	Computes resultant of f and g via prs.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L653'>discriminant</a>(f)</tt>	Computes discriminant of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L657'>cofactors</a>(f,g)</tt>	Returns gcd of f and g and their cofactors.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L663'>gcd</a>(f,g)</tt>	Returns polynomial gcd of f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L668'>lcm</a>(f,g)</tt>	Returns polynomial lcm of f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L673'>cancel</a>(f,g,include)</tt>	Cancel common factors in a rational function f/g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L689'>trunc</a>(f,p)</tt>	Reduce f modulo a constant p.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L693'>monic</a>(f)</tt>	Divides all coefficients by lc f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L697'>content</a>(f)</tt>	Returns gcd of polynomial coefficients.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L701'>primitive</a>(f)</tt>	Returns content and a primitive form of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L706'>compose</a>(f,g)</tt>	Computes functional composition of f and g.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L711'>decompose</a>(f)</tt>	Computes functional decomposition of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L718'>shift</a>(f,a)</tt>	Efficiently compute taylor shift f x + a.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L725'>transform</a>(f,p,q)</tt>	Evaluate functional transformation q**n * f(p/q).
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L739'>sturm</a>(f)</tt>	Computes the sturm sequence of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L746'>gff_list</a>(f)</tt>	Computes greatest factorial factorization of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L753'>sqf_norm</a>(f)</tt>	Computes square-free norm of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L758'>sqf_part</a>(f)</tt>	Computes square-free part of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L762'>sqf_list</a>(f,all)</tt>	Returns a list of square-free factors of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L767'>sqf_list_include</a>(f,all)</tt>	Returns a list of square-free factors of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L772'>factor_list</a>(f)</tt>	Returns a list of irreducible factors of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L777'>factor_list_include</a>(f)</tt>	Returns a list of irreducible factors of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L782'>intervals</a>(f,all,eps,inf)</tt>	Compute isolating intervals for roots of f.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L799'>refine_root</a>(f,s,t,eps)</tt>	Refine an isolating interval to the given precision.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L812'>count_real_roots</a>(f,inf,sup)</tt>	Return the number of real roots of f in [inf sup].
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L816'>count_complex_roots</a>(f,inf,sup)</tt>	Return the number of complex roots of f in [inf sup].
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L820'>is_zero</a>(f)</tt>	Returns true if f is a zero polynomial.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L825'>is_one</a>(f)</tt>	Returns true if f is a unit polynomial.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L830'>is_ground</a>(f)</tt>	Returns true if f is an element of the ground domain.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L835'>is_sqf</a>(f)</tt>	Returns true if f is a square-free polynomial.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L840'>is_monic</a>(f)</tt>	Returns true if the leading coefficient of f is one.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L845'>is_primitive</a>(f)</tt>	Returns true if the gcd of the coefficients of f is one.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L850'>is_linear</a>(f)</tt>	Returns true if f is linear in all its variables.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L855'>is_quadratic</a>(f)</tt>	Returns true if f is quadratic in all its variables.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L860'>is_monomial</a>(f)</tt>	Returns true if f is zero or has only one term.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L865'>is_homogeneous</a>(f)</tt>	Returns true if f is a homogeneous polynomial.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L870'>is_irreducible</a>(f)</tt>	Returns true if f has no factors over its domain.
<tt style='background-color:#E8E8E8;'> polys.DMP <a href=' /polys/polyclasses.py#L875'>is_cyclotomic</a>(f)</tt>	Returns true if f is a cyclotomic polynomial.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1127'>poly_unify</a>(f,g)</tt>	Unify a multivariate fraction and a polynomial.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1162'>frac_unify</a>(f,g)</tt>	Unify representations of two multivariate fractions.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1199'>per</a>(f,num,den,cancel)</tt>	Create a dmf out of the given representation.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1217'>half_per</a>(f,rep,kill)</tt>	Create a dmp out of the given representation.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1237'>numer</a>(f)</tt>	Returns the numerator of f.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1241'>denom</a>(f)</tt>	Returns the denominator of f.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1245'>cancel</a>(f)</tt>	Remove common factors from f num and f den.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1249'>neg</a>(f)</tt>	Negate all coefficients in f.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1253'>add</a>(f,g)</tt>	Add two multivariate fractions f and g.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1268'>sub</a>(f,g)</tt>	Subtract two multivariate fractions f and g.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1283'>mul</a>(f,g)</tt>	Multiply two multivariate fractions f and g.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1297'>pow</a>(f,n)</tt>	Raise f to a non-negative power n.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1305'>quo</a>(f,g)</tt>	Computes quotient of fractions f and g.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1325'>invert</a>(f,check)</tt>	Computes inverse of a fraction f.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1332'>is_zero</a>(f)</tt>	Returns true if f is a zero fraction.
<tt style='background-color:#E8E8E8;'> polys.DMF <a href=' /polys/polyclasses.py#L1337'>is_one</a>(f)</tt>	Returns true if f is a unit fraction.
<tt style='background-color:#E8E8E8;'> polys.ANP <a href=' /polys/polyclasses.py#L1523'>unify</a>(f,g)</tt>	Unify representations of two algebraic numbers.
<tt style='background-color:#E8E8E8;'> polys.ANP <a href=' /polys/polyclasses.py#L1559'>to_dict</a>(f)</tt>	Convert f to a dict representation with native coefficients.
<tt style='background-color:#E8E8E8;'> polys.ANP <a href=' /polys/polyclasses.py#L1563'>to_sympy_dict</a>(f)</tt>	Convert f to a dict representation with sympy coefficients.
<tt style='background-color:#E8E8E8;'> polys.ANP <a href=' /polys/polyclasses.py#L1572'>to_list</a>(f)</tt>	Convert f to a list representation with native coefficients.
<tt style='background-color:#E8E8E8;'> polys.ANP <a href=' /polys/polyclasses.py#L1576'>to_sympy_list</a>(f)</tt>	Convert f to a list representation with sympy coefficients.
<tt style='background-color:#E8E8E8;'> polys.ANP <a href=' /polys/polyclasses.py#L1580'>to_tuple</a>(f)</tt>	Convert f to a tuple representation with native coefficients.
<tt style='background-color:#E8E8E8;'> polys.ANP <a href=' /polys/polyclasses.py#L1607'>pow</a>(f,n)</tt>	Raise f to a non-negative power n.
<tt style='background-color:#E8E8E8;'> polys.ANP <a href=' /polys/polyclasses.py#L1633'>LC</a>(f)</tt>	Returns the leading coefficient of f.
<tt style='background-color:#E8E8E8;'> polys.ANP <a href=' /polys/polyclasses.py#L1637'>TC</a>(f)</tt>	Returns the trailing coefficient of f.
<tt style='background-color:#E8E8E8;'> polys.ANP <a href=' /polys/polyclasses.py#L1641'>is_zero</a>(f)</tt>	Returns true if f is a zero algebraic number.
<tt style='background-color:#E8E8E8;'> polys.ANP <a href=' /polys/polyclasses.py#L1646'>is_one</a>(f)</tt>	Returns true if f is a unit algebraic number.
<tt style='background-color:#E8E8E8;'> polys.ANP <a href=' /polys/polyclasses.py#L1651'>is_ground</a>(f)</tt>	Returns true if f is an element of the ground domain.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L14'>poly_LC</a>(f,K)</tt>	Return leading coefficient of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L36'>poly_TC</a>(f,K)</tt>	Return trailing coefficient of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L61'>dmp_ground_LC</a>(f,u,K)</tt>	Return the ground leading coefficient.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L84'>dmp_ground_TC</a>(f,u,K)</tt>	Return the ground trailing coefficient.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L107'>dmp_true_LT</a>(f,u,K)</tt>	Return the leading term c * x_1**n_1 x_k**n_k.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L137'>dup_degree</a>(f)</tt>	Return the leading degree of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L160'>dmp_degree</a>(f,u)</tt>	Return the leading degree of f in x_0 in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L187'>_rec_degree_in</a>(g,v,i,j)</tt>	Recursive helper function for :func dmp_degree_in.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L197'>dmp_degree_in</a>(f,j,u)</tt>	Return the leading degree of f in x_j in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L223'>_rec_degree_list</a>(g,v,i,degs)</tt>	Recursive helper for :func dmp_degree_list.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L234'>dmp_degree_list</a>(f,u)</tt>	Return a list of degrees of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L255'>dup_strip</a>(f)</tt>	Remove leading zeros from f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L282'>dmp_strip</a>(f,u)</tt>	Remove leading zeros from f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L315'>_rec_validate</a>(f,g,i,K)</tt>	Recursive helper for :func dmp_validate.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L333'>_rec_strip</a>(g,v)</tt>	Recursive helper for :func _rec_strip.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L343'>dmp_validate</a>(f,K)</tt>	Return the number of levels in f and recursively strip it.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L372'>dup_reverse</a>(f)</tt>	Compute x**n * f(1/x), i e : reverse f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L391'>dup_copy</a>(f)</tt>	Create a new copy of a polynomial f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L410'>dmp_copy</a>(f,u)</tt>	Create a new copy of a polynomial f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L434'>dup_to_tuple</a>(f)</tt>	Convert f into a tuple.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L455'>dmp_to_tuple</a>(f,u)</tt>	Convert f into a nested tuple of tuples.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L480'>dup_normal</a>(f,K)</tt>	Normalize univariate polynomial in the given domain.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L497'>dmp_normal</a>(f,u,K)</tt>	Normalize a multivariate polynomial in the given domain.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L519'>dup_convert</a>(f,K0,K1)</tt>	Convert the ground domain of f from k0 to k1.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L544'>dmp_convert</a>(f,u,K0,K1)</tt>	Convert the ground domain of f from k0 to k1.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L573'>dup_from_sympy</a>(f,K)</tt>	Convert the ground domain of f from sympy to k.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L591'>dmp_from_sympy</a>(f,u,K)</tt>	Convert the ground domain of f from sympy to k.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L614'>dup_nth</a>(f,n,K)</tt>	Return the n-th coefficient of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L640'>dmp_nth</a>(f,n,u,K)</tt>	Return the n-th coefficient of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L666'>dmp_ground_nth</a>(f,N,u,K)</tt>	Return the ground n-th coefficient of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L698'>dmp_zero_p</a>(f,u)</tt>	Return true if f is zero in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L723'>dmp_zero</a>(u)</tt>	Return a multivariate zero.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L744'>dmp_one_p</a>(f,u,K)</tt>	Return true if f is one in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L761'>dmp_one</a>(u,K)</tt>	Return a multivariate one over k.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L778'>dmp_ground_p</a>(f,c,u)</tt>	Return true if f is constant in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L808'>dmp_ground</a>(c,u)</tt>	Return a multivariate constant.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L832'>dmp_zeros</a>(n,u,K)</tt>	Return a list of multivariate zeros.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L857'>dmp_grounds</a>(c,n,u)</tt>	Return a list of multivariate constants.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L882'>dmp_negative_p</a>(f,u,K)</tt>	Return true if lc f is negative.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L901'>dmp_positive_p</a>(f,u,K)</tt>	Return true if lc f is positive.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L920'>dup_from_dict</a>(f,K)</tt>	Create a k[x] polynomial from a dict.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L953'>dup_from_raw_dict</a>(f,K)</tt>	Create a k[x] polynomial from a raw dict.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L978'>dmp_from_dict</a>(f,u,K)</tt>	Create a k[x] polynomial from a dict.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1022'>dup_to_dict</a>(f,K,zero)</tt>	Convert k[x] polynomial to a dict.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1049'>dup_to_raw_dict</a>(f,K,zero)</tt>	Convert a k[x] polynomial to a raw dict.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1074'>dmp_to_dict</a>(f,u,K,zero)</tt>	Convert a k[x] polynomial to a dict.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1109'>dmp_swap</a>(f,i,j,u)</tt>	Transform k[ x_i x_j ] to k[ x_j x_i ].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1144'>dmp_permute</a>(f,P,u,K)</tt>	Return a polynomial in k[x_{p 1 }, ,x_{p n }].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1175'>dmp_nest</a>(f,l,K)</tt>	Return a multivariate value nested l-levels.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1198'>dmp_raise</a>(f,l,u,K)</tt>	Return a multivariate polynomial raised l-levels.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1230'>dup_deflate</a>(f,K)</tt>	Map x**m to y in a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1263'>dmp_deflate</a>(f,u,K)</tt>	Map x_i**m_i to y_i in a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1307'>dup_multi_deflate</a>(polys,K)</tt>	Map x**m to y in a set of polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1346'>dmp_multi_deflate</a>(polys,u,K)</tt>	Map x_i**m_i to y_i in a set of polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1402'>dup_inflate</a>(f,m,K)</tt>	Map y to x**m in a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1432'>_rec_inflate</a>(g,M,v,i)</tt>	Recursive helper for :func dmp_inflate.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1454'>dmp_inflate</a>(f,M,u,K)</tt>	Map y_i to x_i**k_i in a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1479'>dmp_exclude</a>(f,u,K)</tt>	Exclude useless levels from f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1527'>dmp_include</a>(f,J,u,K)</tt>	Include useless levels in f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1561'>dmp_inject</a>(f,u,K,front)</tt>	Convert f from k[x][y] to k[x y].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1598'>dmp_eject</a>(f,u,K,front)</tt>	Convert f from k[x y] to k[x][y].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1634'>dup_terms_gcd</a>(f,K)</tt>	Remove gcd of terms from f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1664'>dmp_terms_gcd</a>(f,u,K)</tt>	Remove gcd of terms from f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1697'>_rec_list_terms</a>(g,v,monom)</tt>	Recursive helper for :func dmp_list_terms.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1716'>dmp_list_terms</a>(f,u,K,order)</tt>	List all non-zero terms from f in the given order order.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1748'>dup_apply_pairs</a>(f,g,h,args)</tt>	Apply h to pairs of coefficients of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1780'>dmp_apply_pairs</a>(f,g,h,args)</tt>	Apply h to pairs of coefficients of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1815'>dup_slice</a>(f,m,n,K)</tt>	Take a continuous subsequence of terms of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1836'>dmp_slice</a>(f,m,n,u)</tt>	Take a continuous subsequence of terms of f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1841'>dmp_slice_in</a>(f,m,n,j)</tt>	Take a continuous subsequence of terms of f in x_j in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/densebasic.py#L1865'>dup_random</a>(n,a,b,K)</tt>	Return a polynomial of degree n with coefficients in [a b].
<tt style='background-color:#E8E8E8;'> polys.Options <a href=' /polys/polyoptions.py#L183'>_init_dependencies_order</a>(cls)</tt>	Resolve the order of options' processing.
<tt style='background-color:#E8E8E8;'> polys.Options <a href=' /polys/polyoptions.py#L204'>clone</a>(updates)</tt>	Clone self and update specified options.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyoptions.py#L725'>build_options</a>(gens,args)</tt>	Construct options from keyword arguments or options.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyoptions.py#L736'>allowed_flags</a>(args,flags)</tt>	Allow specified flags to be used in the given context.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyoptions.py#L767'>set_defaults</a>(options)</tt>	Update options with default values.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rings.py#L33'>ring</a>(symbols,domain,order)</tt>	Construct a polynomial ring returning (ring x_1 x_n).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rings.py#L62'>xring</a>(symbols,domain,order)</tt>	Construct a polynomial ring returning (ring (x_1 x_n)).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rings.py#L91'>vring</a>(symbols,domain,order)</tt>	Construct a polynomial ring and inject x_1 x_n into the global namespace.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rings.py#L120'>sring</a>(exprs)</tt>	Construct a ring deriving generators and domain from options and input expressions.
<tt style='background-color:#E8E8E8;'> polys.PolyRing <a href=' /polys/rings.py#L255'>_gens</a>()</tt>	Return a list of polynomial generators.
<tt style='background-color:#E8E8E8;'> polys.PolyRing <a href=' /polys/rings.py#L291'>monomial_basis</a>(i)</tt>	Return the ith-basis element.
<tt style='background-color:#E8E8E8;'> polys.PolyRing <a href=' /polys/rings.py#L388'>index</a>(gen)</tt>	Compute index of gen in self gens.
<tt style='background-color:#E8E8E8;'> polys.PolyRing <a href=' /polys/rings.py#L419'>drop</a>()</tt>	Remove specified generators from this ring.
<tt style='background-color:#E8E8E8;'> polys.PolyRing <a href=' /polys/rings.py#L459'>add</a>()</tt>	Add a sequence of polynomials or containers of polynomials.
<tt style='background-color:#E8E8E8;'> polys.PolyRing <a href=' /polys/rings.py#L486'>mul</a>()</tt>	Multiply a sequence of polynomials or containers of polynomials.
<tt style='background-color:#E8E8E8;'> polys.PolyRing <a href=' /polys/rings.py#L513'>drop_to_ground</a>()</tt>	Remove specified generators from the ring and inject them into its domain.
<tt style='background-color:#E8E8E8;'> polys.PolyRing <a href=' /polys/rings.py#L527'>compose</a>(other)</tt>	Add the generators of other to self.
<tt style='background-color:#E8E8E8;'> polys.PolyRing <a href=' /polys/rings.py#L535'>add_gens</a>(symbols)</tt>	Add the elements of symbols as generators to self.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L566'>copy</a>()</tt>	Return a copy of polynomial self.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L632'>strip_zero</a>()</tt>	Eliminate monomials with zero coefficient.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L638'>__eq__</a>(p1,p2)</tt>	Equality test for polynomials.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L667'>almosteq</a>(p1,p2,tolerance)</tt>	Approximate equality test for polynomials.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L903'>__add__</a>(p1,p2)</tt>	Add two polynomials.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L977'>__sub__</a>(p1,p2)</tt>	Subtract polynomial p2 from p1.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1031'>__rsub__</a>(p1,n)</tt>	N - p1 with n convertible to the coefficient domain.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1058'>__mul__</a>(p1,p2)</tt>	Multiply two polynomials.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1108'>__rmul__</a>(p1,p2)</tt>	P2 * p1 with p2 in the coefficient domain of p1.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1137'>__pow__</a>(n)</tt>	Raise polynomial to power n examples.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1230'>square</a>()</tt>	Square of a polynomial examples.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1385'>div</a>(fv)</tt>	Division algorithm see [clo] p64.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1519'>_iadd_monom</a>(mc)</tt>	Add to self the monomial coeff*x0**i0*x1**i1*.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1563'>_iadd_poly_monom</a>(p2,mc)</tt>	Add to self the product of p *(coeff*x0**i0*x1**i1*.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1600'>degree</a>(f,x)</tt>	The leading degree in x or the main variable.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1616'>degrees</a>(f)</tt>	A tuple containing leading degrees in all variables.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1628'>tail_degree</a>(f,x)</tt>	The tail degree in x or the main variable.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1644'>tail_degrees</a>(f)</tt>	A tuple containing tail degrees in all variables.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1656'>leading_expv</a>()</tt>	Leading monomial tuple according to the monomial ordering.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1679'>coeff</a>(element)</tt>	Returns the coefficient that stands next to the given monomial.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1715'>const</a>()</tt>	Returns the constant coeffcient.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1731'>leading_monom</a>()</tt>	Leading monomial as a polynomial element.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1760'>leading_term</a>()</tt>	Leading term as a polynomial element.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1791'>coeffs</a>(order)</tt>	Ordered list of polynomial coefficients.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1816'>monoms</a>(order)</tt>	Ordered list of polynomial monomials.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1841'>terms</a>(order)</tt>	Ordered list of polynomial terms.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1866'>itercoeffs</a>()</tt>	Iterator over coefficients of a polynomial.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1870'>itermonoms</a>()</tt>	Iterator over monomials of a polynomial.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1874'>iterterms</a>()</tt>	Iterator over terms of a polynomial.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1878'>listcoeffs</a>()</tt>	Unordered list of polynomial coefficients.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1882'>listmonoms</a>()</tt>	Unordered list of polynomial monomials.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1886'>listterms</a>()</tt>	Unordered list of polynomial terms.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1890'>imul_num</a>(p,c)</tt>	Multiply inplace the polynomial p by an element in the coefficient ring provided p is not one of the generators.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1925'>content</a>(f)</tt>	Returns gcd of polynomial's coefficients.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1936'>primitive</a>(f)</tt>	Returns content and a primitive polynomial.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L1941'>monic</a>(f)</tt>	Divides all coefficients by the leading coefficient.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L2188'>cancel</a>(g)</tt>	Cancel common factors in a rational function f/g.
<tt style='background-color:#E8E8E8;'> polys.PolyElement <a href=' /polys/rings.py#L2245'>diff</a>(f,x)</tt>	Computes partial derivative in x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L57'>_choose_factor</a>(factors,x,v,dom)</tt>	Return a factor having root v it is assumed that one of the factors has root v.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L95'>_separate_sq</a>(p)</tt>	Helper function for _minimal_polynomial_sq it selects a rational g such that the polynomial p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L160'>_minimal_polynomial_sq</a>(p,n,x)</tt>	Returns the minimal polynomial for the nth-root of a sum of surds or none if it fails.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L217'>_minpoly_op_algebraic_element</a>(op,ex1,ex2,x)</tt>	Return the minimal polynomial for op ex1 ex2 parameters.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L295'>_invertx</a>(p,x)</tt>	Returns expand_mul(x**degree p x *p subs(x 1/x)).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L306'>_muly</a>(p,x,y)</tt>	Returns _mexpand(y**deg*p subs({x x / y})).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L317'>_minpoly_pow</a>(ex,pw,x,dom)</tt>	Returns minpoly(ex**pw x) parameters.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L370'>_minpoly_add</a>(x,dom)</tt>	Returns minpoly(add(*a), dom x).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L382'>_minpoly_mul</a>(x,dom)</tt>	Returns minpoly(mul(*a), dom x).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L394'>_minpoly_sin</a>(ex,x)</tt>	Returns the minimal polynomial of sin ex see http //mathworld.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L432'>_minpoly_cos</a>(ex,x)</tt>	Returns the minimal polynomial of cos ex see http //mathworld.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L464'>_minpoly_exp</a>(ex,x)</tt>	Returns the minimal polynomial of exp ex.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L501'>_minpoly_rootof</a>(ex,x)</tt>	Returns the minimal polynomial of a crootof object.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L512'>_minpoly_compose</a>(ex,x,dom)</tt>	Computes the minimal polynomial of an algebraic element using operations on minimal polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L582'>minimal_polynomial</a>(ex,x)</tt>	Computes the minimal polynomial of an algebraic element.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L671'>_minpoly_groebner</a>(ex,x,cls)</tt>	Computes the minimal polynomial of an algebraic number using groebner bases.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L814'>_coeffs_generator</a>(n)</tt>	Generate coefficients for primitive_element().
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L820'>primitive_element</a>(extension,x)</tt>	Construct a common number field for all extensions.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L889'>is_isomorphism_possible</a>(a,b)</tt>	Returns true if there is a chance for isomorphism.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L920'>field_isomorphism_pslq</a>(a,b)</tt>	Construct field isomorphism using pslq algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L974'>field_isomorphism_factor</a>(a,b)</tt>	Construct field isomorphism via factorization.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L997'>field_isomorphism</a>(a,b)</tt>	Construct an isomorphism between two number fields.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L1032'>to_number_field</a>(extension,theta)</tt>	Express extension in the field generated by theta.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/numberfields.py#L1078'>isolate</a>(alg,eps,fast)</tt>	Give a rational isolating interval for an algebraic number.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rationaltools.py#L10'>together</a>(expr,deep)</tt>	Denest and combine rational expressions using symbolic methods.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/dispersion.py#L7'>dispersionset</a>(p,q)</tt>	Compute the *dispersion set* of two polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/dispersion.py#L132'>dispersion</a>(p,q)</tt>	Compute the *dispersion* of polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L58'>dup_half_gcdex</a>(f,g,K)</tt>	Half extended euclidean algorithm in f[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L93'>dmp_half_gcdex</a>(f,g,u,K)</tt>	Half extended euclidean algorithm in f[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L110'>dup_gcdex</a>(f,g,K)</tt>	Extended euclidean algorithm in f[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L137'>dmp_gcdex</a>(f,g,u,K)</tt>	Extended euclidean algorithm in f[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L154'>dup_invert</a>(f,g,K)</tt>	Compute multiplicative inverse of f modulo g in f[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L185'>dmp_invert</a>(f,g,u,K)</tt>	Compute multiplicative inverse of f modulo g in f[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L202'>dup_euclidean_prs</a>(f,g,K)</tt>	Euclidean polynomial remainder sequence prs in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L242'>dmp_euclidean_prs</a>(f,g,u,K)</tt>	Euclidean polynomial remainder sequence prs in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L259'>dup_primitive_prs</a>(f,g,K)</tt>	Primitive polynomial remainder sequence prs in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L299'>dmp_primitive_prs</a>(f,g,u,K)</tt>	Primitive polynomial remainder sequence prs in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L316'>dup_inner_subresultants</a>(f,g,K)</tt>	Subresultant prs algorithm in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L396'>dup_subresultants</a>(f,g,K)</tt>	Computes subresultant prs of two polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L413'>dup_prs_resultant</a>(f,g,K)</tt>	Resultant algorithm in k[x] using subresultant prs.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L438'>dup_resultant</a>(f,g,K,includePRS)</tt>	Computes resultant of two polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L457'>dmp_inner_subresultants</a>(f,g,u,K)</tt>	Subresultant prs algorithm in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L537'>dmp_subresultants</a>(f,g,u,K)</tt>	Computes subresultant prs of two polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L560'>dmp_prs_resultant</a>(f,g,u,K)</tt>	Resultant algorithm in k[x] using subresultant prs.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L600'>dmp_zz_modular_resultant</a>(f,g,p,u)</tt>	Compute resultant of f and g modulo a prime p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L673'>_collins_crt</a>(r,R,P,p)</tt>	Wrapper of crt for collins's resultant algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L678'>dmp_zz_collins_resultant</a>(f,g,u,K)</tt>	Collins's modular resultant algorithm in z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L737'>dmp_qq_collins_resultant</a>(f,g,u,K0)</tt>	Collins's modular resultant algorithm in q[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L776'>dmp_resultant</a>(f,g,u,K)</tt>	Computes resultant of two polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L809'>dup_discriminant</a>(f,K)</tt>	Computes discriminant of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L836'>dmp_discriminant</a>(f,u,K)</tt>	Computes discriminant of a polynomial in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L867'>_dup_rr_trivial_gcd</a>(f,g,K)</tt>	Handle trivial cases in gcd algorithm over a ring.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L885'>_dup_ff_trivial_gcd</a>(f,g,K)</tt>	Handle trivial cases in gcd algorithm over a field.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L897'>_dmp_rr_trivial_gcd</a>(f,g,u,K)</tt>	Handle trivial cases in gcd algorithm over a ring.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L923'>_dmp_ff_trivial_gcd</a>(f,g,u,K)</tt>	Handle trivial cases in gcd algorithm over a field.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L944'>_dmp_simplify_gcd</a>(f,g,u,K)</tt>	Try to eliminate x_0 from gcd computation in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L972'>dup_rr_prs_gcd</a>(f,g,K)</tt>	Computes polynomial gcd using subresultants over a ring.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1013'>dup_ff_prs_gcd</a>(f,g,K)</tt>	Computes polynomial gcd using subresultants over a field.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1044'>dmp_rr_prs_gcd</a>(f,g,u,K)</tt>	Computes polynomial gcd using subresultants over a ring.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1090'>dmp_ff_prs_gcd</a>(f,g,u,K)</tt>	Computes polynomial gcd using subresultants over a field.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1136'>_dup_zz_gcd_interpolate</a>(h,x,K)</tt>	Interpolate polynomial gcd from integer gcd.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1152'>dup_zz_heu_gcd</a>(f,g,K)</tt>	Heuristic polynomial gcd in z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1258'>_dmp_zz_gcd_interpolate</a>(h,x,v,K)</tt>	Interpolate polynomial gcd from integer gcd.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1275'>dmp_zz_heu_gcd</a>(f,g,u,K)</tt>	Heuristic polynomial gcd in z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1382'>dup_qq_heu_gcd</a>(f,g,K0)</tt>	Heuristic polynomial gcd in q[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1431'>dmp_qq_heu_gcd</a>(f,g,u,K0)</tt>	Heuristic polynomial gcd in q[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1480'>dup_inner_gcd</a>(f,g,K)</tt>	Computes polynomial gcd and cofactors of f and g in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1567'>dmp_inner_gcd</a>(f,g,u,K)</tt>	Computes polynomial gcd and cofactors of f and g in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1598'>dup_gcd</a>(f,g,K)</tt>	Computes polynomial gcd of f and g in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1615'>dmp_gcd</a>(f,g,u,K)</tt>	Computes polynomial gcd of f and g in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1635'>dup_rr_lcm</a>(f,g,K)</tt>	Computes polynomial lcm over a ring in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1660'>dup_ff_lcm</a>(f,g,K)</tt>	Computes polynomial lcm over a field in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1683'>dup_lcm</a>(f,g,K)</tt>	Computes polynomial lcm of f and g in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1703'>dmp_rr_lcm</a>(f,g,u,K)</tt>	Computes polynomial lcm over a ring in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1731'>dmp_ff_lcm</a>(f,g,u,K)</tt>	Computes polynomial lcm over a field in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1754'>dmp_lcm</a>(f,g,u,K)</tt>	Computes polynomial lcm of f and g in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1780'>dmp_content</a>(f,u,K)</tt>	Returns gcd of multivariate coefficients.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1811'>dmp_primitive</a>(f,u,K)</tt>	Returns multivariate content and a primitive polynomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1833'>dup_cancel</a>(f,g,K,include)</tt>	Cancel common factors in a rational function f/g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/euclidtools.py#L1850'>dmp_cancel</a>(f,g,u,K)</tt>	Cancel common factors in a rational function f/g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyroots.py#L35'>roots_linear</a>(f)</tt>	Returns a list of roots of a linear polynomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyroots.py#L49'>roots_quadratic</a>(f)</tt>	Returns a list of roots of a quadratic polynomial if the domain is zz.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyroots.py#L118'>roots_cubic</a>(f,trig)</tt>	Returns a list of roots of a cubic polynomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyroots.py#L189'>_roots_quartic_euler</a>(p,q,r,a)</tt>	Descartes-euler solution of the quartic equation parameters.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyroots.py#L245'>roots_quartic</a>(f)</tt>	Returns a list of roots of a quartic polynomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyroots.py#L367'>roots_binomial</a>(f)</tt>	Returns a list of roots of a binomial polynomial if the domain is zz.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyroots.py#L425'>_inv_totient_estimate</a>(m)</tt>	Find l u such that l <= phi^-1 m <= u.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyroots.py#L470'>roots_cyclotomic</a>(f,factor)</tt>	Compute roots of cyclotomic polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyroots.py#L502'>roots_quintic</a>(f)</tt>	Calulate exact roots of a solvable quintic.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyroots.py#L663'>_integer_basis</a>(poly)</tt>	Compute coefficient basis for a polynomial over integers.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyroots.py#L720'>preprocess_roots</a>(poly)</tt>	Try to get rid of symbolic coefficients from poly.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyroots.py#L790'>roots</a>(f)</tt>	Computes symbolic roots of a univariate polynomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyroots.py#L1074'>root_factors</a>(f)</tt>	Returns all factors of a univariate polynomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootoftools.py#L50'>rootof</a>(f,x,index,radicals)</tt>	An indexed root of a univariate polynomial.
<tt style='background-color:#E8E8E8;'> polys.RootOf <a href=' /polys/rootoftools.py#L82'>__new__</a>(cls,f,x,index)</tt>	Construct a new crootof object for k-th root of f.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L100'>__new__</a>(cls,f,x,index)</tt>	Construct an indexed complex root of a polynomial.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L155'>_new</a>(cls,poly,index)</tt>	Construct new crootof object from raw data.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L189'>_eval_is_real</a>()</tt>	Return true if the root is real.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L193'>real_roots</a>(cls,poly,radicals)</tt>	Get real roots of a polynomial.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L198'>all_roots</a>(cls,poly,radicals)</tt>	Get real and complex roots of a polynomial.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L203'>_get_reals_sqf</a>(cls,factor)</tt>	Get real root isolating intervals for a square-free factor.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L215'>_get_complexes_sqf</a>(cls,factor)</tt>	Get complex root isolating intervals for a square-free factor.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L226'>_get_reals</a>(cls,factors)</tt>	Compute real root isolating intervals for a list of factors.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L237'>_get_complexes</a>(cls,factors)</tt>	Compute complex root isolating intervals for a list of factors.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L248'>_reals_sorted</a>(cls,reals)</tt>	Make real isolating intervals disjoint and sort roots.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L323'>_refine_complexes</a>(cls,complexes)</tt>	Return complexes such that no bounding rectangles of non-conjugate.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L361'>_complexes_sorted</a>(cls,complexes)</tt>	Make complex isolating intervals disjoint and sort roots.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L414'>_reals_index</a>(cls,reals,index)</tt>	Map initial real root index to an index in a factor where the root belongs.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L434'>_complexes_index</a>(cls,complexes,index)</tt>	Map initial complex root index to an index in a factor where the root belongs.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L456'>_count_roots</a>(cls,roots)</tt>	Count the number of real or complex roots with multiplicities.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L461'>_indexed_root</a>(cls,poly,index)</tt>	Get a root of a composite polynomial by index.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L477'>_real_roots</a>(cls,poly)</tt>	Get real roots of a composite polynomial.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L493'>_all_roots</a>(cls,poly)</tt>	Get real and complex roots of a composite polynomial.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L516'>_roots_trivial</a>(cls,poly,radicals)</tt>	Compute roots in linear quadratic and binomial cases.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L533'>_preprocess_roots</a>(cls,poly)</tt>	Take heroic measures to make poly compatible with crootof.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L550'>_postprocess_root</a>(cls,root,radicals)</tt>	Return the root if it is trivial or a crootof object.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L561'>_get_roots</a>(cls,method,poly,radicals)</tt>	Return postprocessed roots of specified kind.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L575'>_get_interval</a>()</tt>	Internal function for retrieving isolation interval from cache.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L583'>_set_interval</a>(interval)</tt>	Internal function for updating isolation interval in cache.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L595'>_eval_evalf</a>(prec)</tt>	Evaluate this complex root to the given precision.
<tt style='background-color:#E8E8E8;'> polys.ComplexRootOf <a href=' /polys/rootoftools.py#L674'>eval_rational</a>(tol)</tt>	Return a rational approximation to self with the tolerance tol.
<tt style='background-color:#E8E8E8;'> polys.RootSum <a href=' /polys/rootoftools.py#L758'>__new__</a>(cls,expr,func,x)</tt>	Construct a new rootsum instance of roots of a polynomial.
<tt style='background-color:#E8E8E8;'> polys.RootSum <a href=' /polys/rootoftools.py#L832'>new</a>(cls,poly,func,auto)</tt>	Construct new rootsum instance.
<tt style='background-color:#E8E8E8;'> polys.RootSum <a href=' /polys/rootoftools.py#L845'>_transform</a>(cls,expr,x)</tt>	Transform an expression to a polynomial.
<tt style='background-color:#E8E8E8;'> polys.RootSum <a href=' /polys/rootoftools.py#L851'>_is_func_rational</a>(cls,poly,func)</tt>	Check if a lambda is areational function.
<tt style='background-color:#E8E8E8;'> polys.RootSum <a href=' /polys/rootoftools.py#L857'>_rational_case</a>(cls,poly,func)</tt>	Handle the rational function case.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootoftools.py#L955'>bisect</a>(f,a,b,tol)</tt>	Implements bisection this function is used in rootof eval_rational() and.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L58'>_invert_monoms</a>(p1)</tt>	Compute x**n * p1(1/x) for a univariate polynomial p1 in x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L89'>_giant_steps</a>(target)</tt>	Return a list of precision steps for the newton's method.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L96'>rs_trunc</a>(p1,x,prec)</tt>	Truncate the series in the x variable with precision prec, that is modulo o(x**prec).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L123'>rs_is_puiseux</a>(p,x)</tt>	Test if p is puiseux series in x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L148'>rs_puiseux</a>(f,p,x,prec)</tt>	Return the puiseux series for f p x prec.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L187'>rs_puiseux2</a>(f,p,q,x)</tt>	Return the puiseux series for f p q x prec.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L212'>rs_mul</a>(p1,p2,x,prec)</tt>	Return the product of the given two series modulo o(x**prec).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L263'>rs_square</a>(p1,x,prec)</tt>	Square the series modulo o(x**prec) examples.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L303'>rs_pow</a>(p1,n,x,prec)</tt>	Return p1**n modulo o(x**prec) examples.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L358'>rs_subs</a>(p,rules,x,prec)</tt>	Substitution with truncation according to the mapping in rules.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L426'>_has_constant_term</a>(p,x)</tt>	Check if p has a constant term in x examples.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L452'>_get_constant_term</a>(p,x)</tt>	Return constant term in p with respect to x note that it is not simply p[r.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L480'>_series_inversion1</a>(p,x,prec)</tt>	Univariate series inversion 1/p modulo o(x**prec).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L526'>rs_series_inversion</a>(p,x,prec)</tt>	Multivariate series inversion 1/p modulo o(x**prec).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L564'>_coefficient_t</a>(p,t)</tt>	Coefficient of x\_i**j in p where t = i j.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L577'>rs_series_reversion</a>(p,x,n,y)</tt>	Reversion of a series.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L642'>rs_series_from_list</a>(p,c,x,prec)</tt>	Return a series sum c[n]*p**n modulo o(x**prec).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L728'>rs_diff</a>(p,x)</tt>	Return partial derivative of p with respect to x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L759'>rs_integrate</a>(p,x)</tt>	Integrate p with respect to x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L790'>rs_fun</a>(p,f)</tt>	Function of a multivariate series computed by substitution.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L859'>pow_xin</a>(p,i,n)</tt>	>>> from sympy polys domains import qq.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L878'>_nth_root1</a>(p,n,x,prec)</tt>	Univariate series expansion of the nth root of p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L913'>rs_nth_root</a>(p,n,x,prec)</tt>	Multivariate series expansion of the nth root of p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L987'>rs_log</a>(p,x,prec)</tt>	The logarithm of p modulo o(x**prec).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1044'>rs_LambertW</a>(p,x,prec)</tt>	Calculate the series expansion of the principal branch of the lambert w function.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1083'>_exp1</a>(p,x,prec)</tt>	Helper function for rs\_exp.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1093'>rs_exp</a>(p,x,prec)</tt>	Exponentiation of a series modulo o(x**prec) examples.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1151'>_atan</a>(p,iv,prec)</tt>	Expansion using formula.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1167'>rs_atan</a>(p,x,prec)</tt>	The arctangent of a series return the series expansion of the atan of p, about 0.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1221'>rs_asin</a>(p,x,prec)</tt>	Arcsine of a series return the series expansion of the asin of p, about 0.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1266'>_tan1</a>(p,x,prec)</tt>	Helper function of rs\_tan.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1287'>rs_tan</a>(p,x,prec)</tt>	Tangent of a series.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1347'>rs_cot</a>(p,x,prec)</tt>	Cotangent of a series return the series expansion of the cot of p, about 0.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1383'>rs_sin</a>(p,x,prec)</tt>	Sine of a series return the series expansion of the sin of p, about 0.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1453'>rs_cos</a>(p,x,prec)</tt>	Cosine of a series return the series expansion of the cos of p, about 0.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1526'>rs_cos_sin</a>(p,x,prec)</tt>	Return the tuple (rs\_cos p x prec , rs\_sin p x prec ).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1539'>_atanh</a>(p,x,prec)</tt>	Expansion using formula.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1555'>rs_atanh</a>(p,x,prec)</tt>	Hyperbolic arctangent of a series return the series expansion of the atanh of p, about 0.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1609'>rs_sinh</a>(p,x,prec)</tt>	Hyperbolic sine of a series return the series expansion of the sinh of p, about 0.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1636'>rs_cosh</a>(p,x,prec)</tt>	Hyperbolic cosine of a series return the series expansion of the cosh of p, about 0.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1663'>_tanh</a>(p,x,prec)</tt>	Helper function of rs\_tanh return the series expansion of tanh of a univariate series using newton's.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1684'>rs_tanh</a>(p,x,prec)</tt>	Hyperbolic tangent of a series return the series expansion of the tanh of p, about 0.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1738'>rs_newton</a>(p,x,prec)</tt>	Compute the truncated newton sum of the polynomial p examples.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1760'>rs_hadamard_exp</a>(p1,inverse)</tt>	Return sum f_i/i!*x**i from sum f_i*x**i, where x is the first variable.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1790'>rs_compose_add</a>(p1,p2)</tt>	Compute the composed sum prod(p2 x - beta for beta root of p1) examples.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1849'>rs_min_pow</a>(expr,series_rs,a)</tt>	Find the minimum power of a in the series expansion of expr.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/ring_series.py#L1947'>rs_series</a>(expr,a,prec)</tt>	Return the series expansion of an expression about 0.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/fglmtools.py#L8'>matrix_fglm</a>(F,ring,O_to)</tt>	Converts the reduced groebner basis f of a zero-dimensional ideal w.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/fglmtools.py#L89'>_update</a>(s,_lambda,P)</tt>	Update p such that for the updated p' p' v = e_{s}.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/fglmtools.py#L105'>_representing_matrices</a>(basis,G,ring)</tt>	Compute the matrices corresponding to the linear maps m \mapsto x_i m for all variables x_i.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/fglmtools.py#L131'>_basis</a>(G,ring)</tt>	Computes a list of monomials which are not divisible by the leading monomials wrt to o of g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L36'>dup_sturm</a>(f,K)</tt>	Computes the sturm sequence of f in f[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L74'>dup_root_upper_bound</a>(f,K)</tt>	Compute the lmq upper bound for the positive roots of f; lmq local max quadratic was developed by akritas-strzebonski-vigklas.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L118'>dup_root_lower_bound</a>(f,K)</tt>	Compute the lmq lower bound for the positive roots of f; lmq local max quadratic was developed by akritas-strzebonski-vigklas.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L135'>_mobius_from_interval</a>(I,field)</tt>	Convert an open interval to a mobius transform.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L144'>_mobius_to_interval</a>(M,field)</tt>	Convert a mobius transform to an open interval.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L155'>dup_step_refine_real_root</a>(f,M,K,fast)</tt>	One step of positive real root refinement algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L201'>dup_inner_refine_real_root</a>(f,M,K,eps)</tt>	Refine a positive root of f given a mobius transform or an interval.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L243'>dup_outer_refine_real_root</a>(f,s,t,K)</tt>	Refine a positive root of f given an interval s t.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L255'>dup_refine_real_root</a>(f,s,t,K)</tt>	Refine real root's approximating interval to the given precision.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L290'>dup_inner_isolate_real_roots</a>(f,K,eps,fast)</tt>	Internal function for isolation positive roots up to given precision.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L404'>_discard_if_outside_interval</a>(f,M,inf,sup)</tt>	Discard an isolating interval if outside inf sup.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L424'>dup_inner_isolate_positive_roots</a>(f,K,eps,inf)</tt>	Iteratively compute disjoint positive root isolation intervals.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L448'>dup_inner_isolate_negative_roots</a>(f,K,inf,sup)</tt>	Iteratively compute disjoint negative root isolation intervals.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L472'>_isolate_zero</a>(f,K,inf,sup)</tt>	Handle special case of cf algorithm when f is homogeneous.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L490'>dup_isolate_real_roots_sqf</a>(f,K,eps,inf)</tt>	Isolate real roots of a square-free polynomial using the vincent-akritas-strzebonski vas cf approach.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L521'>dup_isolate_real_roots</a>(f,K,eps,inf)</tt>	Isolate real roots using vincent-akritas-strzebonski vas continued fractions approach.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L558'>dup_isolate_real_roots_list</a>(polys,K,eps,inf)</tt>	Isolate real roots of a list of square-free polynomial using vincent-akritas-strzebonski vas cf approach.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L616'>_disjoint_p</a>(M,N,strict)</tt>	Check if mobius transforms define disjoint intervals.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L638'>_real_isolate_and_disjoin</a>(factors,K,eps,inf)</tt>	Isolate real roots of a list of polynomials and disjoin intervals.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L700'>dup_count_real_roots</a>(f,K,inf,sup)</tt>	Returns the number of distinct real roots of f in [inf sup].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L948'>_classify_point</a>(re,im)</tt>	Return the half-axis or origin on which re im point is located.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L964'>_intervals_to_quadrants</a>(intervals,f1,f2,s)</tt>	Generate a sequence of extended quadrants from a list of critical points.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L1114'>_traverse_quadrants</a>(Q_L1,Q_L2,Q_L3,Q_L4)</tt>	Transform sequences of quadrants to a sequence of rules.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L1190'>_reverse_intervals</a>(intervals)</tt>	Reverse intervals for traversal from right to left and from top to bottom.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L1194'>_winding_number</a>(T,field)</tt>	Compute the winding number of the input polynomial i e the number of roots.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L1198'>dup_count_complex_roots</a>(f,K,inf,sup)</tt>	Count all roots in [u + v*i s + t*i] rectangle using collins-krandick algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L1272'>_vertical_bisection</a>(N,a,b,I)</tt>	Vertical bisection step in collins-krandick root isolation algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L1378'>_horizontal_bisection</a>(N,a,b,I)</tt>	Horizontal bisection step in collins-krandick root isolation algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L1484'>_depth_first_select</a>(rectangles)</tt>	Find a rectangle of minimum area for bisection.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L1496'>_rectangle_small_p</a>(a,b,eps)</tt>	Return true if the given rectangle is small enough.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L1505'>dup_isolate_complex_roots_sqf</a>(f,K,eps,inf)</tt>	Isolate complex roots of a square-free polynomial using collins-krandick algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L1630'>dup_isolate_all_roots_sqf</a>(f,K,eps,inf)</tt>	Isolate real and complex roots of a square-free polynomial f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/rootisolation.py#L1636'>dup_isolate_all_roots</a>(f,K,eps,inf)</tt>	Isolate real and complex roots of a non-square-free polynomial f.
<tt style='background-color:#E8E8E8;'> polys.RealInterval <a href=' /polys/rootisolation.py#L1659'>__init__</a>(data,f,dom)</tt>	Initialize new real interval with complete information.
<tt style='background-color:#E8E8E8;'> polys.RealInterval <a href=' /polys/rootisolation.py#L1684'>a</a>()</tt>	Return the position of the left end.
<tt style='background-color:#E8E8E8;'> polys.RealInterval <a href=' /polys/rootisolation.py#L1699'>b</a>()</tt>	Return the position of the right end.
<tt style='background-color:#E8E8E8;'> polys.RealInterval <a href=' /polys/rootisolation.py#L1708'>dx</a>()</tt>	Return width of the real isolating interval.
<tt style='background-color:#E8E8E8;'> polys.RealInterval <a href=' /polys/rootisolation.py#L1713'>center</a>()</tt>	Return the center of the real isolating interval.
<tt style='background-color:#E8E8E8;'> polys.RealInterval <a href=' /polys/rootisolation.py#L1718'>as_tuple</a>()</tt>	Return tuple representation of real isolating interval.
<tt style='background-color:#E8E8E8;'> polys.RealInterval <a href=' /polys/rootisolation.py#L1725'>is_disjoint</a>(other)</tt>	Return true if two isolation intervals are disjoint.
<tt style='background-color:#E8E8E8;'> polys.RealInterval <a href=' /polys/rootisolation.py#L1729'>_inner_refine</a>()</tt>	Internal one step real root refinement procedure.
<tt style='background-color:#E8E8E8;'> polys.RealInterval <a href=' /polys/rootisolation.py#L1739'>refine_disjoint</a>(other)</tt>	Refine an isolating interval until it is disjoint with another one.
<tt style='background-color:#E8E8E8;'> polys.RealInterval <a href=' /polys/rootisolation.py#L1747'>refine_size</a>(dx)</tt>	Refine an isolating interval until it is of sufficiently small size.
<tt style='background-color:#E8E8E8;'> polys.RealInterval <a href=' /polys/rootisolation.py#L1755'>refine_step</a>(steps)</tt>	Perform several steps of real root refinement algorithm.
<tt style='background-color:#E8E8E8;'> polys.RealInterval <a href=' /polys/rootisolation.py#L1763'>refine</a>()</tt>	Perform one step of real root refinement algorithm.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1772'>__init__</a>(a,b,I,Q)</tt>	Initialize new complex interval with complete information.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1783'>ax</a>()</tt>	Return x coordinate of south-western corner.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1788'>ay</a>()</tt>	Return y coordinate of south-western corner.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1796'>bx</a>()</tt>	Return x coordinate of north-eastern corner.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1801'>by</a>()</tt>	Return y coordinate of north-eastern corner.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1809'>dx</a>()</tt>	Return width of the complex isolating interval.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1814'>dy</a>()</tt>	Return height of the complex isolating interval.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1819'>center</a>()</tt>	Return the center of the complex isolating interval.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1824'>as_tuple</a>()</tt>	Return tuple representation of complex isolating interval.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1831'>conjugate</a>()</tt>	This complex interval really is located in lower half-plane.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1836'>is_disjoint</a>(other)</tt>	Return true if two isolation intervals are disjoint.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1846'>_inner_refine</a>()</tt>	Internal one step complex root refinement procedure.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1874'>refine_disjoint</a>(other)</tt>	Refine an isolating interval until it is disjoint with another one.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1882'>refine_size</a>(dx,dy)</tt>	Refine an isolating interval until it is of sufficiently small size.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1892'>refine_step</a>(steps)</tt>	Perform several steps of complex root refinement algorithm.
<tt style='background-color:#E8E8E8;'> polys.ComplexInterval <a href=' /polys/rootisolation.py#L1900'>refine</a>()</tt>	Perform one step of complex root refinement algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/partfrac.py#L15'>apart</a>(f,x,full)</tt>	Compute partial fraction decomposition of a rational function.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/partfrac.py#L152'>apart_undetermined_coeffs</a>(P,Q)</tt>	Partial fractions via method of undetermined coefficients.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/partfrac.py#L191'>apart_full_decomposition</a>(P,Q)</tt>	Bronstein's full partial fraction decomposition algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/partfrac.py#L213'>apart_list</a>(f,x,dummies)</tt>	Compute partial fraction decomposition of a rational function and return the result in structured form.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/partfrac.py#L354'>apart_list_full_decomposition</a>(P,Q,dummygen)</tt>	Bronstein's full partial fraction decomposition algorithm.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/partfrac.py#L421'>assemble_partfrac_list</a>(partial_list)</tt>	Reassemble a full partial fraction decomposition from a structured result obtained by the function apart_list.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/heuristicgcd.py#L9'>heugcd</a>(f,g)</tt>	Heuristic polynomial gcd in z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/heuristicgcd.py#L122'>_gcd_interpolate</a>(h,x,ring)</tt>	Interpolate polynomial gcd from integer gcd.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L16'>gf_crt</a>(U,M,K)</tt>	Chinese remainder theorem.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L59'>gf_crt1</a>(M,K)</tt>	First part of the chinese remainder theorem.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L83'>gf_crt2</a>(U,M,p,E)</tt>	Second part of the chinese remainder theorem.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L111'>gf_int</a>(a,p)</tt>	Coerce a mod p to an integer in the range [-p/2 p/2].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L132'>gf_degree</a>(f)</tt>	Return the leading degree of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L150'>gf_LC</a>(f,K)</tt>	Return the leading coefficient of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L170'>gf_TC</a>(f,K)</tt>	Return the trailing coefficient of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L190'>gf_strip</a>(f)</tt>	Remove leading zeros from f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L218'>gf_trunc</a>(f,p)</tt>	Reduce all coefficients modulo p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L234'>gf_normal</a>(f,p,K)</tt>	Normalize all coefficients in k.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L251'>gf_from_dict</a>(f,p,K)</tt>	Create a gf p [x] polynomial from a dict.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L279'>gf_to_dict</a>(f,p,symmetric)</tt>	Convert a gf p [x] polynomial to a dict.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L308'>gf_from_int_poly</a>(f,p)</tt>	Create a gf p [x] polynomial from z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L325'>gf_to_int_poly</a>(f,p,symmetric)</tt>	Convert a gf p [x] polynomial to z[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L347'>gf_neg</a>(f,p,K)</tt>	Negate a polynomial in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L364'>gf_add_ground</a>(f,a,p,K)</tt>	Compute f + a where f in gf p [x] and a in gf p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L392'>gf_sub_ground</a>(f,a,p,K)</tt>	Compute f - a where f in gf p [x] and a in gf p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L420'>gf_mul_ground</a>(f,a,p,K)</tt>	Compute f * a where f in gf p [x] and a in gf p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L440'>gf_quo_ground</a>(f,a,p,K)</tt>	Compute f/a where f in gf p [x] and a in gf p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L457'>gf_add</a>(f,g,p,K)</tt>	Add polynomials in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L492'>gf_sub</a>(f,g,p,K)</tt>	Subtract polynomials in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L527'>gf_mul</a>(f,g,p,K)</tt>	Multiply polynomials in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L558'>gf_sqr</a>(f,p,K)</tt>	Square polynomials in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L601'>gf_add_mul</a>(f,g,h,p)</tt>	Returns f + g*h where f, g, h in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L616'>gf_sub_mul</a>(f,g,h,p)</tt>	Compute f - g*h where f, g, h in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L633'>gf_expand</a>(F,p,K)</tt>	Expand results of :func factor in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L661'>gf_div</a>(f,g,p,K)</tt>	Division with remainder in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L715'>gf_rem</a>(f,g,p,K)</tt>	Compute polynomial remainder in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L732'>gf_quo</a>(f,g,p,K)</tt>	Compute exact quotient in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L771'>gf_exquo</a>(f,g,p,K)</tt>	Compute polynomial quotient in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L798'>gf_lshift</a>(f,n,K)</tt>	Efficiently multiply f by x**n.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L818'>gf_rshift</a>(f,n,K)</tt>	Efficiently divide f by x**n.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L838'>gf_pow</a>(f,n,p,K)</tt>	Compute f**n in gf p [x] using repeated squaring.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L875'>gf_frobenius_monomial_base</a>(g,p,K)</tt>	Return the list of x**(i*p) mod g in z_p for i = 0 n - 1.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L907'>gf_frobenius_map</a>(f,g,b,p)</tt>	Compute gf_pow_mod f p g p k using the frobenius map parameters.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L944'>_gf_pow_pnm1d2</a>(f,n,g,b)</tt>	Utility function for gf_edf_zassenhaus compute f**((p**n - 1) // 2) in gf p [x]/ g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L961'>gf_pow_mod</a>(f,n,g,p)</tt>	Compute f**n in gf p [x]/ g using repeated squaring.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1010'>gf_gcd</a>(f,g,p,K)</tt>	Euclidean algorithm in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1030'>gf_lcm</a>(f,g,p,K)</tt>	Compute polynomial lcm in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1053'>gf_cofactors</a>(f,g,p,K)</tt>	Compute polynomial gcd and cofactors in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1076'>gf_gcdex</a>(f,g,p,K)</tt>	Extended euclidean algorithm in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1142'>gf_monic</a>(f,p,K)</tt>	Compute lc and a monic polynomial in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1167'>gf_diff</a>(f,p,K)</tt>	Differentiate polynomial in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1197'>gf_eval</a>(f,a,p,K)</tt>	Evaluate f a in gf p using horner scheme.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1221'>gf_multi_eval</a>(f,A,p,K)</tt>	Evaluate f a for a in [a_1 a_n].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1238'>gf_compose</a>(f,g,p,K)</tt>	Compute polynomial composition f g in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1267'>gf_compose_mod</a>(g,h,f,p)</tt>	Compute polynomial composition g h in gf p [x]/ f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1294'>gf_trace_map</a>(a,b,c,n)</tt>	Compute polynomial trace map in gf p [x]/ f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1349'>_gf_trace_map</a>(f,n,g,b)</tt>	Utility for gf_edf_shoup.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1363'>gf_random</a>(n,p,K)</tt>	Generate a random polynomial in gf p [x] of degree n.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1379'>gf_irreducible</a>(n,p,K)</tt>	Generate random irreducible polynomial of degree n in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1398'>gf_irred_p_ben_or</a>(f,p,K)</tt>	Ben-or's polynomial irreducibility test over finite fields.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1443'>gf_irred_p_rabin</a>(f,p,K)</tt>	Rabin's polynomial irreducibility test over finite fields.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1490'>gf_irreducible_p</a>(f,p,K)</tt>	Test irreducibility of a polynomial f in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1516'>gf_sqf_p</a>(f,p,K)</tt>	Return true if f is square-free in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1540'>gf_sqf_part</a>(f,p,K)</tt>	Return square-free part of a gf p [x] polynomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1564'>gf_sqf_list</a>(f,p,K,all)</tt>	Return the square-free decomposition of a gf p [x] polynomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1653'>gf_Qmatrix</a>(f,p,K)</tt>	Calculate berlekamp's q matrix.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1693'>gf_Qbasis</a>(Q,p,K)</tt>	Compute a basis of the kernel of q.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1755'>gf_berlekamp</a>(f,p,K)</tt>	Factor a square-free f in gf p [x] for small p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1799'>gf_ddf_zassenhaus</a>(f,p,K)</tt>	Cantor-zassenhaus deterministic distinct degree factorization given a monic square-free polynomial f in gf p [x], computes.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1856'>gf_edf_zassenhaus</a>(f,n,p,K)</tt>	Cantor-zassenhaus probabilistic equal degree factorization given a monic square-free polynomial f in gf p [x] and.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1912'>gf_ddf_shoup</a>(f,p,K)</tt>	Kaltofen-shoup deterministic distinct degree factorization given a monic square-free polynomial f in gf p [x], computes.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L1988'>gf_edf_shoup</a>(f,n,p,K)</tt>	Gathen-shoup probabilistic equal degree factorization given a monic square-free polynomial f in gf p [x] and integer.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L2051'>gf_zassenhaus</a>(f,p,K)</tt>	Factor a square-free f in gf p [x] for medium p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L2073'>gf_shoup</a>(f,p,K)</tt>	Factor a square-free f in gf p [x] for large p.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L2101'>gf_factor_sqf</a>(f,p,K,method)</tt>	Factor a square-free polynomial f in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L2130'>gf_factor</a>(f,p,K)</tt>	Factor non square-free polynomials in gf p [x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L2194'>gf_value</a>(f,a)</tt>	Value of polynomial 'f' at 'a' in field r.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L2214'>linear_congruence</a>(a,b,m)</tt>	Returns the values of x satisfying a*x congruent b mod m here m is positive integer and a b are natural numbers.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L2247'>_raise_mod_power</a>(x,s,p,f)</tt>	Used in gf_csolve to generate solutions of f x cong 0 mod(p** s + 1 from the solutions of f x cong 0 mod(p**s).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L2287'>csolve_prime</a>(f,p,e)</tt>	Solutions of f x congruent 0 mod(p**e).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/galoistools.py#L2321'>gf_csolve</a>(f,n)</tt>	To solve f x congruent 0 mod n.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orderings.py#L199'>monomial_key</a>(order,gens)</tt>	Return a function defining admissible order on monomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orderings.py#L256'>build_product_order</a>(arg,gens)</tt>	Build a monomial order on gens.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/specialpolys.py#L36'>swinnerton_dyer_poly</a>(n,x)</tt>	Generates n-th swinnerton-dyer polynomial in x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/specialpolys.py#L68'>cyclotomic_poly</a>(n,x)</tt>	Generates cyclotomic polynomial of order n in x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/specialpolys.py#L88'>symmetric_poly</a>(n)</tt>	Generates symmetric polynomial of order n.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/specialpolys.py#L106'>random_poly</a>(x,n,inf,sup)</tt>	Return a polynomial of degree n with coefficients in [inf sup].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/specialpolys.py#L117'>interpolating_poly</a>(n,x,X,Y)</tt>	Construct lagrange interpolating polynomial for n data points.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/specialpolys.py#L147'>fateman_poly_F_1</a>(n)</tt>	Fateman's gcd benchmark trivial gcd.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/specialpolys.py#L164'>dmp_fateman_poly_F_1</a>(n,K)</tt>	Fateman's gcd benchmark trivial gcd.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/specialpolys.py#L194'>fateman_poly_F_2</a>(n)</tt>	Fateman's gcd benchmark linearly dense quartic inputs.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/specialpolys.py#L210'>dmp_fateman_poly_F_2</a>(n,K)</tt>	Fateman's gcd benchmark linearly dense quartic inputs.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/specialpolys.py#L231'>fateman_poly_F_3</a>(n)</tt>	Fateman's gcd benchmark sparse inputs (deg f ~ vars f).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/specialpolys.py#L247'>dmp_fateman_poly_F_3</a>(n,K)</tt>	Fateman's gcd benchmark sparse inputs (deg f ~ vars f).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/solvers.py#L10'>eqs_to_matrix</a>(eqs,ring)</tt>	Transform from equations to matrix form.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/solvers.py#L22'>solve_lin_sys</a>(eqs,ring,_raw)</tt>	Solve a system of linear equations.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L45'>sdm_monomial_mul</a>(M,X)</tt>	Multiply tuple x representing a monomial of k[x] into the tuple m representing a monomial of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L62'>sdm_monomial_deg</a>(M)</tt>	Return the total degree of m.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L78'>sdm_monomial_lcm</a>(A,B)</tt>	Return the "least common multiple" of a and b.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L95'>sdm_monomial_divides</a>(A,B)</tt>	Does there exist a polynomial monomial x such that xa = b? examples.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L149'>sdm_LC</a>(f,K)</tt>	Returns the leading coeffcient of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L157'>sdm_to_dict</a>(f)</tt>	Make a dictionary from a distributed polynomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L162'>sdm_from_dict</a>(d,O)</tt>	Create an sdm from a dictionary.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L177'>sdm_sort</a>(f,O)</tt>	Sort terms in f using the given monomial order o.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L182'>sdm_strip</a>(f)</tt>	Remove terms with zero coefficients from f in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L187'>sdm_add</a>(f,g,O,K)</tt>	Add two module elements f, g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L237'>sdm_LM</a>(f)</tt>	Returns the leading monomial of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L255'>sdm_LT</a>(f)</tt>	Returns the leading term of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L273'>sdm_mul_term</a>(f,term,O,K)</tt>	Multiply a distributed module element f by a polynomial term term.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L317'>sdm_zero</a>()</tt>	Return the zero module element.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L322'>sdm_deg</a>(f)</tt>	Degree of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L341'>sdm_from_vector</a>(vec,O,K)</tt>	Create an sdm from an iterable of expressions.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L366'>sdm_to_vector</a>(f,gens,K,n)</tt>	Convert sdm f into a list of polynomial expressions.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L400'>sdm_spoly</a>(f,g,O,K)</tt>	Compute the generalized s-polynomial of f and g.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L452'>sdm_ecart</a>(f)</tt>	Compute the ecart of f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L473'>sdm_nf_mora</a>(f,G,O,K)</tt>	Compute a weak normal form of f with respect to g and order o.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L529'>sdm_nf_buchberger</a>(f,G,O,K)</tt>	Compute a weak normal form of f with respect to g and order o.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L569'>sdm_nf_buchberger_reduced</a>(f,G,O,K)</tt>	Compute a reduced normal form of f with respect to g and order o.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/distributedmodules.py#L595'>sdm_groebner</a>(G,NF,O,K)</tt>	Compute a minimal standard basis of g with respect to order o.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyconfig.py#L38'>setup</a>(key,value)</tt>	Assign a value to or reset a configuration item.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyconfig.py#L48'>query</a>(key)</tt>	Ask for a value of the given configuration item.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyconfig.py#L53'>configure</a>()</tt>	Initialized configuration of polys module.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L30'>_nsort</a>(roots,separated)</tt>	Sort the numerical roots putting the real roots first then sorting according to real and imaginary parts.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L64'>_sort_gens</a>(gens)</tt>	Sort generators in a reasonably intelligent way.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L112'>_unify_gens</a>(f_gens,g_gens)</tt>	Unify generators in a reasonably intelligent way.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L149'>_analyze_gens</a>(gens)</tt>	Support for passing generators as *gens and [gens].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L157'>_sort_factors</a>(factors)</tt>	Sort low-level factors in increasing 'complexity' order.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L172'>_not_a_coeff</a>(expr)</tt>	Do not treat nan and infinities as valid polynomial coefficients.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L177'>_parallel_dict_from_expr_if_gens</a>(exprs,opt)</tt>	Transform expressions into a multinomial form given generators.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L227'>_parallel_dict_from_expr_no_gens</a>(exprs,opt)</tt>	Transform expressions into a multinomial form and figure out generators.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L301'>_dict_from_expr_if_gens</a>(expr,opt)</tt>	Transform an expression into a multinomial form given generators.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L307'>_dict_from_expr_no_gens</a>(expr,opt)</tt>	Transform an expression into a multinomial form and figure out generators.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L313'>parallel_dict_from_expr</a>(exprs)</tt>	Transform expressions into a multinomial form.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L319'>_parallel_dict_from_expr</a>(exprs,opt)</tt>	Transform expressions into a multinomial form.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L335'>dict_from_expr</a>(expr)</tt>	Transform an expression into a multinomial form.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L341'>_dict_from_expr</a>(expr,opt)</tt>	Transform an expression into a multinomial form.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L372'>expr_from_dict</a>(rep)</tt>	Convert a multinomial form into an expression.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/polyutils.py#L391'>_dict_reorder</a>(rep,gens,new_gens)</tt>	Reorder levels using dict representation.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L12'>groebner</a>(seq,ring,method)</tt>	Computes groebner basis for a set of polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L52'>_buchberger</a>(f,ring)</tt>	Computes groebner basis for a set of polynomials in k[x].
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L262'>spoly</a>(p1,p2,ring)</tt>	Compute lcm(lm p1 lm p2 )/lm p1 *p1 - lcm(lm p1 lm p2 )/lm p2 *p2.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L304'>sig_cmp</a>(u,v,order)</tt>	Compare two signatures by extending the term order to k[x]^n.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L325'>sig_key</a>(s,order)</tt>	Key for comparing two signatures.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L337'>sig_mult</a>(s,m)</tt>	Multiply a signature by a monomial.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L349'>lbp_sub</a>(f,g)</tt>	Subtract labeled polynomial g from f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L366'>lbp_mul_term</a>(f,cx)</tt>	Multiply a labeled polynomial with a term.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L376'>lbp_cmp</a>(f,g)</tt>	Compare two labeled polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L397'>lbp_key</a>(f)</tt>	Key for comparing two labeled polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L406'>critical_pair</a>(f,g,ring)</tt>	Compute the critical pair corresponding to two labeled polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L441'>cp_cmp</a>(c,d)</tt>	Compare two critical pairs c and d.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L477'>cp_key</a>(c,ring)</tt>	Key for comparing critical pairs.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L484'>s_poly</a>(cp)</tt>	Compute the s-polynomial of a critical pair.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L493'>is_rewritable_or_comparable</a>(sign,num,B)</tt>	Check if a labeled polynomial is redundant by checking if its signature and number imply rewritability or comparability.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L520'>f5_reduce</a>(f,B)</tt>	F5-reduce a labeled polynomial f by b.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L571'>_f5b</a>(F,ring)</tt>	Computes a reduced groebner basis for the ideal generated by f.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L698'>red_groebner</a>(G,ring)</tt>	Compute reduced groebner basis from beckerweispfenning93 p 216.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L730'>is_groebner</a>(G,ring)</tt>	Check if g is a groebner basis.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L744'>is_minimal</a>(G,ring)</tt>	Checks if g is a minimal groebner basis.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L764'>is_reduced</a>(G,ring)</tt>	Checks if g is a reduced groebner basis.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L784'>groebner_lcm</a>(f,g)</tt>	Computes lcm of two polynomials using groebner bases.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/groebnertools.py#L841'>groebner_gcd</a>(f,g)</tt>	Computes gcd of two polynomials using groebner bases.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/fields.py#L24'>field</a>(symbols,domain,order)</tt>	Construct new rational function field returning (field x1 xn).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/fields.py#L30'>xfield</a>(symbols,domain,order)</tt>	Construct new rational function field returning (field (x1 xn)).
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/fields.py#L36'>vfield</a>(symbols,domain,order)</tt>	Construct new rational function field and inject generators into global namespace.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/fields.py#L43'>sfield</a>(exprs)</tt>	Construct a field deriving generators and domain from options and input expressions.
<tt style='background-color:#E8E8E8;'> polys.FracField <a href=' /polys/fields.py#L137'>_gens</a>()</tt>	Return a list of polynomial generators.
<tt style='background-color:#E8E8E8;'> polys.FracElement <a href=' /polys/fields.py#L327'>__pos__</a>(f)</tt>	Negate all coefficients in f.
<tt style='background-color:#E8E8E8;'> polys.FracElement <a href=' /polys/fields.py#L331'>__neg__</a>(f)</tt>	Negate all coefficients in f.
<tt style='background-color:#E8E8E8;'> polys.FracElement <a href=' /polys/fields.py#L355'>__add__</a>(f,g)</tt>	Add rational functions f and g.
<tt style='background-color:#E8E8E8;'> polys.FracElement <a href=' /polys/fields.py#L399'>__sub__</a>(f,g)</tt>	Subtract rational functions f and g.
<tt style='background-color:#E8E8E8;'> polys.FracElement <a href=' /polys/fields.py#L450'>__mul__</a>(f,g)</tt>	Multiply rational functions f and g.
<tt style='background-color:#E8E8E8;'> polys.FracElement <a href=' /polys/fields.py#L489'>__truediv__</a>(f,g)</tt>	Computes quotient of fractions f and g.
<tt style='background-color:#E8E8E8;'> polys.FracElement <a href=' /polys/fields.py#L541'>__pow__</a>(f,n)</tt>	Raise f to a non-negative power n.
<tt style='background-color:#E8E8E8;'> polys.FracElement <a href=' /polys/fields.py#L550'>diff</a>(f,x)</tt>	Computes partial derivative in x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L22'>dup_jacobi</a>(n,a,b,K)</tt>	Low-level implementation of jacobi polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L39'>jacobi_poly</a>(n,a,b,x)</tt>	Generates jacobi polynomial of degree n in x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L59'>dup_gegenbauer</a>(n,a,K)</tt>	Low-level implementation of gegenbauer polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L73'>gegenbauer_poly</a>(n,a,x)</tt>	Generates gegenbauer polynomial of degree n in x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L93'>dup_chebyshevt</a>(n,K)</tt>	Low-level implementation of chebyshev polynomials of the 1st kind.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L104'>chebyshevt_poly</a>(n,x)</tt>	Generates chebyshev polynomial of the first kind of degree n in x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L124'>dup_chebyshevu</a>(n,K)</tt>	Low-level implementation of chebyshev polynomials of the 2nd kind.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L135'>chebyshevu_poly</a>(n,x)</tt>	Generates chebyshev polynomial of the second kind of degree n in x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L155'>dup_hermite</a>(n,K)</tt>	Low-level implementation of hermite polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L170'>hermite_poly</a>(n,x)</tt>	Generates hermite polynomial of degree n in x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L189'>dup_legendre</a>(n,K)</tt>	Low-level implementation of legendre polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L202'>legendre_poly</a>(n,x)</tt>	Generates legendre polynomial of degree n in x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L221'>dup_laguerre</a>(n,alpha,K)</tt>	Low-level implementation of laguerre polynomials.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L234'>laguerre_poly</a>(n,x,alpha)</tt>	Generates laguerre polynomial of degree n in x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L259'>dup_spherical_bessel_fn</a>(n,K)</tt>	Low-level implementation of fn n x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L270'>dup_spherical_bessel_fn_minus</a>(n,K)</tt>	Low-level implementation of fn -n x.
<tt style='background-color:#E8E8E8;'> polys. <a href=' /polys/orthopolys.py#L281'>spherical_bessel_fn</a>(n,x)</tt>	Coefficients for the spherical bessel functions.
<tt style='background-color:#E8E8E8;'> polys.domains.Field <a href=' /polys/domains/field.py#L15'>get_ring</a>()</tt>	Returns a ring associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.Field <a href=' /polys/domains/field.py#L19'>get_field</a>()</tt>	Returns a field associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.Field <a href=' /polys/domains/field.py#L23'>exquo</a>(a,b)</tt>	Exact quotient of a and b, implies __div__.
<tt style='background-color:#E8E8E8;'> polys.domains.Field <a href=' /polys/domains/field.py#L27'>quo</a>(a,b)</tt>	Quotient of a and b, implies __div__.
<tt style='background-color:#E8E8E8;'> polys.domains.Field <a href=' /polys/domains/field.py#L31'>rem</a>(a,b)</tt>	Remainder of a and b, implies nothing.
<tt style='background-color:#E8E8E8;'> polys.domains.Field <a href=' /polys/domains/field.py#L35'>div</a>(a,b)</tt>	Division of a and b, implies __div__.
<tt style='background-color:#E8E8E8;'> polys.domains.Field <a href=' /polys/domains/field.py#L39'>gcd</a>(a,b)</tt>	Returns gcd of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.Field <a href=' /polys/domains/field.py#L68'>lcm</a>(a,b)</tt>	Returns lcm of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.Field <a href=' /polys/domains/field.py#L92'>revert</a>(a)</tt>	Returns a** -1 if possible.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L70'>__call__</a>()</tt>	Construct an element of self domain from args.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L77'>convert_from</a>(element,base)</tt>	Convert element to self dtype given the base domain.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L94'>convert</a>(element,base)</tt>	Convert element to self dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L148'>of_type</a>(element)</tt>	Check if a is of type dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L152'>__contains__</a>(a)</tt>	Check if a belongs to this domain.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L161'>to_sympy</a>(a)</tt>	Convert a to a sympy object.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L165'>from_sympy</a>(a)</tt>	Convert a sympy object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L169'>from_FF_python</a>(K1,a,K0)</tt>	Convert modularinteger int to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L173'>from_ZZ_python</a>(K1,a,K0)</tt>	Convert a python int object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L177'>from_QQ_python</a>(K1,a,K0)</tt>	Convert a python fraction object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L181'>from_FF_gmpy</a>(K1,a,K0)</tt>	Convert modularinteger mpz to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L185'>from_ZZ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpz object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L189'>from_QQ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpq object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L193'>from_RealField</a>(K1,a,K0)</tt>	Convert a real element object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L197'>from_ComplexField</a>(K1,a,K0)</tt>	Convert a complex element to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L201'>from_AlgebraicField</a>(K1,a,K0)</tt>	Convert an algebraic number to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L205'>from_PolynomialRing</a>(K1,a,K0)</tt>	Convert a polynomial to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L210'>from_FractionField</a>(K1,a,K0)</tt>	Convert a rational function to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L214'>from_ExpressionDomain</a>(K1,a,K0)</tt>	Convert a ex object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L218'>from_GlobalPolynomialRing</a>(K1,a,K0)</tt>	Convert a polynomial to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L232'>unify</a>(K0,K1,symbols)</tt>	Construct a minimal domain that contains elements of k0 and k1.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L328'>__eq__</a>(other)</tt>	Returns true if two domains are equivalent.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L332'>__ne__</a>(other)</tt>	Returns false if two domains are equivalent.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L336'>map</a>(seq)</tt>	Rersively apply self to all elements of seq.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L348'>get_ring</a>()</tt>	Returns a ring associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L352'>get_field</a>()</tt>	Returns a field associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L356'>get_exact</a>()</tt>	Returns an exact domain associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L360'>__getitem__</a>(symbols)</tt>	The mathematical way to make a polynomial ring.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L367'>poly_ring</a>()</tt>	Returns a polynomial ring i e k[x].
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L372'>frac_field</a>()</tt>	Returns a fraction field i e k x.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L377'>old_poly_ring</a>()</tt>	Returns a polynomial ring i e k[x].
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L382'>old_frac_field</a>()</tt>	Returns a fraction field i e k x.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L387'>algebraic_field</a>()</tt>	Returns an algebraic field i e k(\alpha \ldots).
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L391'>inject</a>()</tt>	Inject generators into this domain.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L395'>is_zero</a>(a)</tt>	Returns true if a is zero.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L399'>is_one</a>(a)</tt>	Returns true if a is one.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L403'>is_positive</a>(a)</tt>	Returns true if a is positive.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L407'>is_negative</a>(a)</tt>	Returns true if a is negative.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L411'>is_nonpositive</a>(a)</tt>	Returns true if a is non-positive.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L415'>is_nonnegative</a>(a)</tt>	Returns true if a is non-negative.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L419'>abs</a>(a)</tt>	Absolute value of a, implies __abs__.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L423'>neg</a>(a)</tt>	Returns a negated implies __neg__.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L427'>pos</a>(a)</tt>	Returns a positive implies __pos__.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L431'>add</a>(a,b)</tt>	Sum of a and b, implies __add__.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L435'>sub</a>(a,b)</tt>	Difference of a and b, implies __sub__.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L439'>mul</a>(a,b)</tt>	Product of a and b, implies __mul__.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L443'>pow</a>(a,b)</tt>	Raise a to power b, implies __pow__.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L447'>exquo</a>(a,b)</tt>	Exact quotient of a and b, implies something.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L451'>quo</a>(a,b)</tt>	Quotient of a and b, implies something.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L455'>rem</a>(a,b)</tt>	Remainder of a and b, implies __mod__.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L459'>div</a>(a,b)</tt>	Division of a and b, implies something.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L463'>invert</a>(a,b)</tt>	Returns inversion of a mod b, implies something.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L467'>revert</a>(a)</tt>	Returns a** -1 if possible.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L471'>numer</a>(a)</tt>	Returns numerator of a.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L475'>denom</a>(a)</tt>	Returns denominator of a.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L479'>half_gcdex</a>(a,b)</tt>	Half extended gcd of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L484'>gcdex</a>(a,b)</tt>	Extended gcd of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L488'>cofactors</a>(a,b)</tt>	Returns gcd and cofactors of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L495'>gcd</a>(a,b)</tt>	Returns gcd of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L499'>lcm</a>(a,b)</tt>	Returns lcm of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L503'>log</a>(a,b)</tt>	Returns b-base logarithm of a.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L507'>sqrt</a>(a)</tt>	Returns square root of a.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L511'>evalf</a>(a,prec)</tt>	Returns numerical approximation of a.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L523'>almosteq</a>(a,b,tolerance)</tt>	Check if a and b are almost equal.
<tt style='background-color:#E8E8E8;'> polys.domains.Domain <a href=' /polys/domains/domain.py#L527'>characteristic</a>()</tt>	Return the characteristic of this domain.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L27'>get_ring</a>()</tt>	Returns ring associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L32'>to_sympy</a>(a)</tt>	Convert a to a sympy object.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L37'>from_sympy</a>(a)</tt>	Convert sympy's integer to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L47'>from_ZZ_python</a>(K1,a,K0)</tt>	Convert a python int object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L51'>from_QQ_python</a>(K1,a,K0)</tt>	Convert a python fraction object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L55'>from_ZZ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpz object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L59'>from_QQ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpq object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L63'>from_RealField</a>(K1,a,K0)</tt>	Convert a mpmath mpf object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L67'>exquo</a>(a,b)</tt>	Exact quotient of a and b, implies __div__.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L71'>quo</a>(a,b)</tt>	Quotient of a and b, implies __div__.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L75'>rem</a>(a,b)</tt>	Remainder of a and b, implies nothing.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L79'>div</a>(a,b)</tt>	Division of a and b, implies __div__.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L83'>numer</a>(a)</tt>	Returns numerator of a.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L87'>denom</a>(a)</tt>	Returns denominator of a.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYRationalField <a href=' /polys/domains/gmpyrationalfield.py#L91'>factorial</a>(a)</tt>	Returns factorial of a.
<tt style='background-color:#E8E8E8;'> polys.domains.SimpleDomain <a href=' /polys/domains/simpledomain.py#L14'>inject</a>()</tt>	Inject generators into this domain.
<tt style='background-color:#E8E8E8;'> polys.domains.QuotientRing <a href=' /polys/domains/quotientring.py#L136'>new</a>(a)</tt>	Construct an element of self domain from a.
<tt style='background-color:#E8E8E8;'> polys.domains.QuotientRing <a href=' /polys/domains/quotientring.py#L143'>__eq__</a>(other)</tt>	Returns true if two domains are equivalent.
<tt style='background-color:#E8E8E8;'> polys.domains.QuotientRing <a href=' /polys/domains/quotientring.py#L148'>from_ZZ_python</a>(K1,a,K0)</tt>	Convert a python int object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.QuotientRing <a href=' /polys/domains/quotientring.py#L169'>poly_ring</a>()</tt>	Returns a polynomial ring i e k[x].
<tt style='background-color:#E8E8E8;'> polys.domains.QuotientRing <a href=' /polys/domains/quotientring.py#L173'>frac_field</a>()</tt>	Returns a fraction field i e k x.
<tt style='background-color:#E8E8E8;'> polys.domains.QuotientRing <a href=' /polys/domains/quotientring.py#L177'>revert</a>(a)</tt>	Compute a** -1 if possible.
<tt style='background-color:#E8E8E8;'> polys.domains.QuotientRing <a href=' /polys/domains/quotientring.py#L190'>free_module</a>(rank)</tt>	Generate a free module of rank rank over self.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L47'>__eq__</a>(other)</tt>	Returns true if two domains are equivalent.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L52'>to_sympy</a>(a)</tt>	Convert a to a sympy object.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L57'>from_sympy</a>(a)</tt>	Convert sympy's expression to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L72'>from_ZZ_python</a>(K1,a,K0)</tt>	Convert a python int object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L76'>from_QQ_python</a>(K1,a,K0)</tt>	Convert a python fraction object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L80'>from_ZZ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpz object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L84'>from_QQ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpq object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L88'>from_RealField</a>(K1,a,K0)</tt>	Convert a mpmath mpf object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/fractionfield.py#L93'>from_AlgebraicField</a>(K1,a,K0)</tt>	Convert an algebraic number to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/fractionfield.py#L98'>from_PolynomialRing</a>(K1,a,K0)</tt>	Convert a polynomial to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L107'>from_FractionField</a>(K1,a,K0)</tt>	Convert a fraction field element to another fraction field.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L145'>get_ring</a>()</tt>	Returns a ring associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L158'>is_positive</a>(a)</tt>	Returns true if a is positive.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L162'>is_negative</a>(a)</tt>	Returns true if a is negative.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L166'>is_nonpositive</a>(a)</tt>	Returns true if a is non-positive.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L170'>is_nonnegative</a>(a)</tt>	Returns true if a is non-negative.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L174'>numer</a>(a)</tt>	Returns numerator of a.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L178'>denom</a>(a)</tt>	Returns denominator of a.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L182'>factorial</a>(a)</tt>	Returns factorial of a.
<tt style='background-color:#E8E8E8;'> polys.domains.ComplexField <a href=' /polys/domains/complexfield.py#L63'>to_sympy</a>(element)</tt>	Convert element to sympy number.
<tt style='background-color:#E8E8E8;'> polys.domains.ComplexField <a href=' /polys/domains/complexfield.py#L67'>from_sympy</a>(expr)</tt>	Convert sympy's number to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.ComplexField <a href=' /polys/domains/complexfield.py#L98'>get_ring</a>()</tt>	Returns a ring associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.ComplexField <a href=' /polys/domains/complexfield.py#L102'>get_exact</a>()</tt>	Returns an exact domain associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.ComplexField <a href=' /polys/domains/complexfield.py#L106'>gcd</a>(a,b)</tt>	Returns gcd of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.ComplexField <a href=' /polys/domains/complexfield.py#L110'>lcm</a>(a,b)</tt>	Returns lcm of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.ComplexField <a href=' /polys/domains/complexfield.py#L114'>almosteq</a>(a,b,tolerance)</tt>	Check if a and b are almost equal.
<tt style='background-color:#E8E8E8;'> polys.domains.CharacteristicZero <a href=' /polys/domains/characteristiczero.py#L14'>characteristic</a>()</tt>	Return the characteristic of this domain.
<tt style='background-color:#E8E8E8;'> polys.domains.RationalField <a href=' /polys/domains/rationalfield.py#L23'>algebraic_field</a>()</tt>	Returns an algebraic field i e \mathbb{q}(\alpha \ldots).
<tt style='background-color:#E8E8E8;'> polys.domains.RationalField <a href=' /polys/domains/rationalfield.py#L28'>from_AlgebraicField</a>(K1,a,K0)</tt>	Convert a anp object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.CompositeDomain <a href=' /polys/domains/compositedomain.py#L18'>inject</a>()</tt>	Inject generators into this domain.
<tt style='background-color:#E8E8E8;'> polys.domains.IntegerRing <a href=' /polys/domains/integerring.py#L25'>get_field</a>()</tt>	Returns a field associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.IntegerRing <a href=' /polys/domains/integerring.py#L30'>algebraic_field</a>()</tt>	Returns an algebraic field i e \mathbb{q}(\alpha \ldots).
<tt style='background-color:#E8E8E8;'> polys.domains.IntegerRing <a href=' /polys/domains/integerring.py#L34'>from_AlgebraicField</a>(K1,a,K0)</tt>	Convert a anp object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.IntegerRing <a href=' /polys/domains/integerring.py#L39'>log</a>(a,b)</tt>	Returns b-base logarithm of a.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L68'>__eq__</a>(other)</tt>	Returns true if two domains are equivalent.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L74'>from_ZZ_python</a>(K1,a,K0)</tt>	Convert a python int object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L78'>from_QQ_python</a>(K1,a,K0)</tt>	Convert a python fraction object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L82'>from_ZZ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpz object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L86'>from_QQ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpq object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L90'>from_RealField</a>(K1,a,K0)</tt>	Convert a mpmath mpf object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L94'>from_AlgebraicField</a>(K1,a,K0)</tt>	Convert a anp object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L99'>from_GlobalPolynomialRing</a>(K1,a,K0)</tt>	Convert a dmp object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L114'>get_field</a>()</tt>	Returns a field associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L118'>poly_ring</a>()</tt>	Returns a polynomial ring i e k[x].
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L122'>frac_field</a>()</tt>	Returns a fraction field i e k x.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L132'>gcdex</a>(a,b)</tt>	Extended gcd of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L136'>gcd</a>(a,b)</tt>	Returns gcd of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L140'>lcm</a>(a,b)</tt>	Returns lcm of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L144'>factorial</a>(a)</tt>	Returns factorial of a.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L148'>_vector_to_sdm</a>(v,order)</tt>	For internal use by the modules class.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L157'>_sdm_to_dics</a>(s,n)</tt>	Helper for _sdm_to_vector.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L166'>_sdm_to_vector</a>(s,n)</tt>	For internal use by the modules class.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRingBase <a href=' /polys/domains/old_polynomialring.py#L183'>free_module</a>(rank)</tt>	Generate a free module of rank rank over self.
<tt style='background-color:#E8E8E8;'> polys.domains. <a href=' /polys/domains/old_polynomialring.py#L195'>_vector_to_sdm_helper</a>(v,order)</tt>	Helper method for common code in global and local poly rings.
<tt style='background-color:#E8E8E8;'> polys.domains.GlobalPolynomialRing <a href=' /polys/domains/old_polynomialring.py#L212'>from_FractionField</a>(K1,a,K0)</tt>	Convert a dmf object to dmp.
<tt style='background-color:#E8E8E8;'> polys.domains.GlobalPolynomialRing <a href=' /polys/domains/old_polynomialring.py#L237'>to_sympy</a>(a)</tt>	Convert a to a sympy object.
<tt style='background-color:#E8E8E8;'> polys.domains.GlobalPolynomialRing <a href=' /polys/domains/old_polynomialring.py#L241'>from_sympy</a>(a)</tt>	Convert sympy's expression to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.GlobalPolynomialRing <a href=' /polys/domains/old_polynomialring.py#L253'>is_positive</a>(a)</tt>	Returns true if lc a is positive.
<tt style='background-color:#E8E8E8;'> polys.domains.GlobalPolynomialRing <a href=' /polys/domains/old_polynomialring.py#L257'>is_negative</a>(a)</tt>	Returns true if lc a is negative.
<tt style='background-color:#E8E8E8;'> polys.domains.GlobalPolynomialRing <a href=' /polys/domains/old_polynomialring.py#L261'>is_nonpositive</a>(a)</tt>	Returns true if lc a is non-positive.
<tt style='background-color:#E8E8E8;'> polys.domains.GlobalPolynomialRing <a href=' /polys/domains/old_polynomialring.py#L265'>is_nonnegative</a>(a)</tt>	Returns true if lc a is non-negative.
<tt style='background-color:#E8E8E8;'> polys.domains.GlobalPolynomialRing <a href=' /polys/domains/old_polynomialring.py#L269'>_vector_to_sdm</a>(v,order)</tt>	>>> from sympy import lex qq >>> from sympy.
<tt style='background-color:#E8E8E8;'> polys.domains.GeneralizedPolynomialRing <a href=' /polys/domains/old_polynomialring.py#L287'>new</a>(a)</tt>	Construct an element of self domain from a.
<tt style='background-color:#E8E8E8;'> polys.domains.GeneralizedPolynomialRing <a href=' /polys/domains/old_polynomialring.py#L309'>to_sympy</a>(a)</tt>	Convert a to a sympy object.
<tt style='background-color:#E8E8E8;'> polys.domains.GeneralizedPolynomialRing <a href=' /polys/domains/old_polynomialring.py#L314'>from_sympy</a>(a)</tt>	Convert sympy's expression to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.GeneralizedPolynomialRing <a href=' /polys/domains/old_polynomialring.py#L329'>_vector_to_sdm</a>(v,order)</tt>	Turn an iterable into a sparse distributed module.
<tt style='background-color:#E8E8E8;'> polys.domains. <a href=' /polys/domains/old_polynomialring.py#L352'>PolynomialRing</a>(dom)</tt>	Create a generalized multivariate polynomial ring.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonRationalField <a href=' /polys/domains/pythonrationalfield.py#L23'>get_ring</a>()</tt>	Returns ring associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonRationalField <a href=' /polys/domains/pythonrationalfield.py#L28'>to_sympy</a>(a)</tt>	Convert a to a sympy object.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonRationalField <a href=' /polys/domains/pythonrationalfield.py#L32'>from_sympy</a>(a)</tt>	Convert sympy's rational to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonRationalField <a href=' /polys/domains/pythonrationalfield.py#L43'>from_ZZ_python</a>(K1,a,K0)</tt>	Convert a python int object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonRationalField <a href=' /polys/domains/pythonrationalfield.py#L47'>from_QQ_python</a>(K1,a,K0)</tt>	Convert a python fraction object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonRationalField <a href=' /polys/domains/pythonrationalfield.py#L51'>from_ZZ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpz object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonRationalField <a href=' /polys/domains/pythonrationalfield.py#L55'>from_QQ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpq object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonRationalField <a href=' /polys/domains/pythonrationalfield.py#L60'>from_RealField</a>(K1,a,K0)</tt>	Convert a mpmath mpf object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonRationalField <a href=' /polys/domains/pythonrationalfield.py#L65'>numer</a>(a)</tt>	Returns numerator of a.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonRationalField <a href=' /polys/domains/pythonrationalfield.py#L69'>denom</a>(a)</tt>	Returns denominator of a.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L23'>__init__</a>()</tt>	Allow instantiation of this domain.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L26'>to_sympy</a>(a)</tt>	Convert a to a sympy object.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L30'>from_sympy</a>(a)</tt>	Convert sympy's integer to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L39'>from_FF_python</a>(K1,a,K0)</tt>	Convert modularinteger int to python's int.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L43'>from_ZZ_python</a>(K1,a,K0)</tt>	Convert python's int to python's int.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L47'>from_QQ_python</a>(K1,a,K0)</tt>	Convert python's fraction to python's int.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L52'>from_FF_gmpy</a>(K1,a,K0)</tt>	Convert modularinteger mpz to python's int.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L56'>from_ZZ_gmpy</a>(K1,a,K0)</tt>	Convert gmpy's mpz to python's int.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L60'>from_QQ_gmpy</a>(K1,a,K0)</tt>	Convert gmpy's mpq to python's int.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L65'>from_RealField</a>(K1,a,K0)</tt>	Convert mpmath's mpf to python's int.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L72'>gcdex</a>(a,b)</tt>	Compute extended gcd of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L76'>gcd</a>(a,b)</tt>	Compute gcd of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L80'>lcm</a>(a,b)</tt>	Compute lcm of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L84'>sqrt</a>(a)</tt>	Compute square root of a.
<tt style='background-color:#E8E8E8;'> polys.domains.PythonIntegerRing <a href=' /polys/domains/pythonintegerring.py#L88'>factorial</a>(a)</tt>	Compute factorial of a.
<tt style='background-color:#E8E8E8;'> polys.domains.Ring <a href=' /polys/domains/ring.py#L16'>get_ring</a>()</tt>	Returns a ring associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.Ring <a href=' /polys/domains/ring.py#L20'>exquo</a>(a,b)</tt>	Exact quotient of a and b, implies __floordiv__.
<tt style='background-color:#E8E8E8;'> polys.domains.Ring <a href=' /polys/domains/ring.py#L27'>quo</a>(a,b)</tt>	Quotient of a and b, implies __floordiv__.
<tt style='background-color:#E8E8E8;'> polys.domains.Ring <a href=' /polys/domains/ring.py#L31'>rem</a>(a,b)</tt>	Remainder of a and b, implies __mod__.
<tt style='background-color:#E8E8E8;'> polys.domains.Ring <a href=' /polys/domains/ring.py#L35'>div</a>(a,b)</tt>	Division of a and b, implies __divmod__.
<tt style='background-color:#E8E8E8;'> polys.domains.Ring <a href=' /polys/domains/ring.py#L39'>invert</a>(a,b)</tt>	Returns inversion of a mod b.
<tt style='background-color:#E8E8E8;'> polys.domains.Ring <a href=' /polys/domains/ring.py#L48'>revert</a>(a)</tt>	Returns a** -1 if possible.
<tt style='background-color:#E8E8E8;'> polys.domains.Ring <a href=' /polys/domains/ring.py#L62'>numer</a>(a)</tt>	Returns numerator of a.
<tt style='background-color:#E8E8E8;'> polys.domains.Ring <a href=' /polys/domains/ring.py#L66'>denom</a>(a)</tt>	Returns denominator of a.
<tt style='background-color:#E8E8E8;'> polys.domains.Ring <a href=' /polys/domains/ring.py#L70'>free_module</a>(rank)</tt>	Generate a free module of rank rank over self.
<tt style='background-color:#E8E8E8;'> polys.domains.Ring <a href=' /polys/domains/ring.py#L81'>ideal</a>()</tt>	Generate an ideal of self.
<tt style='background-color:#E8E8E8;'> polys.domains.Ring <a href=' /polys/domains/ring.py#L94'>quotient_ring</a>(e)</tt>	Form a quotient ring of self.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L60'>__eq__</a>(other)</tt>	Returns true if two domains are equivalent.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L65'>to_sympy</a>(a)</tt>	Convert a to a sympy object.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L69'>from_sympy</a>(a)</tt>	Convert sympy's expression to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L73'>from_ZZ_python</a>(K1,a,K0)</tt>	Convert a python int object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L77'>from_QQ_python</a>(K1,a,K0)</tt>	Convert a python fraction object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L81'>from_ZZ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpz object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L85'>from_QQ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpq object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L89'>from_RealField</a>(K1,a,K0)</tt>	Convert a mpmath mpf object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L93'>from_AlgebraicField</a>(K1,a,K0)</tt>	Convert an algebraic number to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L98'>from_PolynomialRing</a>(K1,a,K0)</tt>	Convert a polynomial to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L105'>from_FractionField</a>(K1,a,K0)</tt>	Convert a rational function to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L114'>get_field</a>()</tt>	Returns a field associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L118'>is_positive</a>(a)</tt>	Returns true if lc a is positive.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L122'>is_negative</a>(a)</tt>	Returns true if lc a is negative.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L126'>is_nonpositive</a>(a)</tt>	Returns true if lc a is non-positive.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L130'>is_nonnegative</a>(a)</tt>	Returns true if lc a is non-negative.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L134'>gcdex</a>(a,b)</tt>	Extended gcd of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L138'>gcd</a>(a,b)</tt>	Returns gcd of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L142'>lcm</a>(a,b)</tt>	Returns lcm of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.PolynomialRing <a href=' /polys/domains/polynomialring.py#L146'>factorial</a>(a)</tt>	Returns factorial of a.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L25'>__init__</a>()</tt>	Allow instantiation of this domain.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L28'>to_sympy</a>(a)</tt>	Convert a to a sympy object.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L32'>from_sympy</a>(a)</tt>	Convert sympy's integer to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L41'>from_FF_python</a>(K1,a,K0)</tt>	Convert modularinteger int to gmpy's mpz.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L45'>from_ZZ_python</a>(K1,a,K0)</tt>	Convert python's int to gmpy's mpz.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L49'>from_QQ_python</a>(K1,a,K0)</tt>	Convert python's fraction to gmpy's mpz.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L54'>from_FF_gmpy</a>(K1,a,K0)</tt>	Convert modularinteger mpz to gmpy's mpz.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L58'>from_ZZ_gmpy</a>(K1,a,K0)</tt>	Convert gmpy's mpz to gmpy's mpz.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L62'>from_QQ_gmpy</a>(K1,a,K0)</tt>	Convert gmpy mpq to gmpy's mpz.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L67'>from_RealField</a>(K1,a,K0)</tt>	Convert mpmath's mpf to gmpy's mpz.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L74'>gcdex</a>(a,b)</tt>	Compute extended gcd of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L79'>gcd</a>(a,b)</tt>	Compute gcd of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L83'>lcm</a>(a,b)</tt>	Compute lcm of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L87'>sqrt</a>(a)</tt>	Compute square root of a.
<tt style='background-color:#E8E8E8;'> polys.domains.GMPYIntegerRing <a href=' /polys/domains/gmpyintegerring.py#L91'>factorial</a>(a)</tt>	Compute factorial of a.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L92'>from_GlobalPolynomialRing</a>(K1,a,K0)</tt>	Convert a dmf object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L150'>poly_ring</a>()</tt>	Returns a polynomial ring i e k[x].
<tt style='background-color:#E8E8E8;'> polys.domains.FractionField <a href=' /polys/domains/old_fractionfield.py#L154'>frac_field</a>()</tt>	Returns a fraction field i e k x.
<tt style='background-color:#E8E8E8;'> polys.domains.FiniteField <a href=' /polys/domains/finitefield.py#L47'>__eq__</a>(other)</tt>	Returns true if two domains are equivalent.
<tt style='background-color:#E8E8E8;'> polys.domains.FiniteField <a href=' /polys/domains/finitefield.py#L52'>characteristic</a>()</tt>	Return the characteristic of this domain.
<tt style='background-color:#E8E8E8;'> polys.domains.FiniteField <a href=' /polys/domains/finitefield.py#L56'>get_field</a>()</tt>	Returns a field associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.FiniteField <a href=' /polys/domains/finitefield.py#L60'>to_sympy</a>(a)</tt>	Convert a to a sympy object.
<tt style='background-color:#E8E8E8;'> polys.domains.FiniteField <a href=' /polys/domains/finitefield.py#L64'>from_sympy</a>(a)</tt>	Convert sympy's integer to sympy's integer.
<tt style='background-color:#E8E8E8;'> polys.domains.FiniteField <a href=' /polys/domains/finitefield.py#L73'>from_FF_python</a>(K1,a,K0)</tt>	Convert modularinteger int to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FiniteField <a href=' /polys/domains/finitefield.py#L77'>from_ZZ_python</a>(K1,a,K0)</tt>	Convert python's int to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FiniteField <a href=' /polys/domains/finitefield.py#L81'>from_QQ_python</a>(K1,a,K0)</tt>	Convert python's fraction to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FiniteField <a href=' /polys/domains/finitefield.py#L86'>from_FF_gmpy</a>(K1,a,K0)</tt>	Convert modularinteger mpz to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FiniteField <a href=' /polys/domains/finitefield.py#L90'>from_ZZ_gmpy</a>(K1,a,K0)</tt>	Convert gmpy's mpz to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FiniteField <a href=' /polys/domains/finitefield.py#L94'>from_QQ_gmpy</a>(K1,a,K0)</tt>	Convert gmpy's mpq to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.FiniteField <a href=' /polys/domains/finitefield.py#L99'>from_RealField</a>(K1,a,K0)</tt>	Convert mpmath's mpf to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.RealField <a href=' /polys/domains/realfield.py#L63'>to_sympy</a>(element)</tt>	Convert element to sympy number.
<tt style='background-color:#E8E8E8;'> polys.domains.RealField <a href=' /polys/domains/realfield.py#L67'>from_sympy</a>(expr)</tt>	Convert sympy's number to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.RealField <a href=' /polys/domains/realfield.py#L98'>to_rational</a>(element,limit)</tt>	Convert a real number to rational number.
<tt style='background-color:#E8E8E8;'> polys.domains.RealField <a href=' /polys/domains/realfield.py#L102'>get_ring</a>()</tt>	Returns a ring associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.RealField <a href=' /polys/domains/realfield.py#L106'>get_exact</a>()</tt>	Returns an exact domain associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.RealField <a href=' /polys/domains/realfield.py#L111'>gcd</a>(a,b)</tt>	Returns gcd of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.RealField <a href=' /polys/domains/realfield.py#L115'>lcm</a>(a,b)</tt>	Returns lcm of a and b.
<tt style='background-color:#E8E8E8;'> polys.domains.RealField <a href=' /polys/domains/realfield.py#L119'>almosteq</a>(a,b,tolerance)</tt>	Check if a and b are almost equal.
<tt style='background-color:#E8E8E8;'> polys.domains. <a href=' /polys/domains/modularinteger.py#L181'>ModularIntegerFactory</a>(_mod,_dom,_sym,parent)</tt>	Create custom class for specific integer modulus.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L150'>to_sympy</a>(a)</tt>	Convert a to a sympy object.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L154'>from_sympy</a>(a)</tt>	Convert sympy's expression to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L158'>from_ZZ_python</a>(K1,a,K0)</tt>	Convert a python int object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L162'>from_QQ_python</a>(K1,a,K0)</tt>	Convert a python fraction object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L166'>from_ZZ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpz object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L170'>from_QQ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpq object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L174'>from_RealField</a>(K1,a,K0)</tt>	Convert a mpmath mpf object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L178'>from_PolynomialRing</a>(K1,a,K0)</tt>	Convert a dmp object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L182'>from_FractionField</a>(K1,a,K0)</tt>	Convert a dmf object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L186'>from_ExpressionDomain</a>(K1,a,K0)</tt>	Convert a ex object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L190'>get_ring</a>()</tt>	Returns a ring associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L194'>get_field</a>()</tt>	Returns a field associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L198'>is_positive</a>(a)</tt>	Returns true if a is positive.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L202'>is_negative</a>(a)</tt>	Returns true if a is negative.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L206'>is_nonpositive</a>(a)</tt>	Returns true if a is non-positive.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L210'>is_nonnegative</a>(a)</tt>	Returns true if a is non-negative.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L214'>numer</a>(a)</tt>	Returns numerator of a.
<tt style='background-color:#E8E8E8;'> polys.domains.ExpressionDomain <a href=' /polys/domains/expressiondomain.py#L218'>denom</a>(a)</tt>	Returns denominator of a.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L53'>__eq__</a>(other)</tt>	Returns true if two domains are equivalent.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L58'>algebraic_field</a>()</tt>	Returns an algebraic field i e \mathbb{q}(\alpha \ldots).
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L62'>to_sympy</a>(a)</tt>	Convert a to a sympy object.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L67'>from_sympy</a>(a)</tt>	Convert sympy's expression to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L82'>from_ZZ_python</a>(K1,a,K0)</tt>	Convert a python int object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L86'>from_QQ_python</a>(K1,a,K0)</tt>	Convert a python fraction object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L90'>from_ZZ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpz object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L94'>from_QQ_gmpy</a>(K1,a,K0)</tt>	Convert a gmpy mpq object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L98'>from_RealField</a>(K1,a,K0)</tt>	Convert a mpmath mpf object to dtype.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L102'>get_ring</a>()</tt>	Returns a ring associated with self.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L106'>is_positive</a>(a)</tt>	Returns true if a is positive.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L110'>is_negative</a>(a)</tt>	Returns true if a is negative.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L114'>is_nonpositive</a>(a)</tt>	Returns true if a is non-positive.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L118'>is_nonnegative</a>(a)</tt>	Returns true if a is non-negative.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L122'>numer</a>(a)</tt>	Returns numerator of a.
<tt style='background-color:#E8E8E8;'> polys.domains.AlgebraicField <a href=' /polys/domains/algebraicfield.py#L126'>denom</a>(a)</tt>	Returns denominator of a.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleHomomorphism <a href=' /polys/agca/homomorphisms.py#L110'>_kernel</a>()</tt>	Compute the kernel of self.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleHomomorphism <a href=' /polys/agca/homomorphisms.py#L114'>_image</a>()</tt>	Compute the image of self.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleHomomorphism <a href=' /polys/agca/homomorphisms.py#L134'>restrict_domain</a>(sm)</tt>	Return self, with the domain restricted to sm.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleHomomorphism <a href=' /polys/agca/homomorphisms.py#L170'>restrict_codomain</a>(sm)</tt>	Return self, with codomain restricted to to sm.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleHomomorphism <a href=' /polys/agca/homomorphisms.py#L199'>quotient_domain</a>(sm)</tt>	Return self with domain replaced by domain/sm.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleHomomorphism <a href=' /polys/agca/homomorphisms.py#L227'>quotient_codomain</a>(sm)</tt>	Return self with codomain replaced by codomain/sm.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleHomomorphism <a href=' /polys/agca/homomorphisms.py#L262'>_apply</a>(elem)</tt>	Apply self to elem.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleHomomorphism <a href=' /polys/agca/homomorphisms.py#L269'>_compose</a>(oth)</tt>	Compose self with oth, that is return the homomorphism obtained by first applying then self, then oth.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleHomomorphism <a href=' /polys/agca/homomorphisms.py#L279'>_mul_scalar</a>(c)</tt>	Scalar multiplication c is guaranteed in self ring.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleHomomorphism <a href=' /polys/agca/homomorphisms.py#L290'>_check_hom</a>(oth)</tt>	Helper to check that oth is a homomorphism with same domain/codomain.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleHomomorphism <a href=' /polys/agca/homomorphisms.py#L325'>is_injective</a>()</tt>	Return true if self is injective.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleHomomorphism <a href=' /polys/agca/homomorphisms.py#L345'>is_surjective</a>()</tt>	Return true if self is surjective.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleHomomorphism <a href=' /polys/agca/homomorphisms.py#L365'>is_isomorphism</a>()</tt>	Return true if self is an isomorphism.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleHomomorphism <a href=' /polys/agca/homomorphisms.py#L386'>is_zero</a>()</tt>	Return true if self is a zero morphism.
<tt style='background-color:#E8E8E8;'> polys.agca.MatrixHomomorphism <a href=' /polys/agca/homomorphisms.py#L459'>_sympy_matrix</a>()</tt>	Helper function which returns a sympy matrix self matrix.
<tt style='background-color:#E8E8E8;'> polys.agca.MatrixHomomorphism <a href=' /polys/agca/homomorphisms.py#L479'>_restrict_domain</a>(sm)</tt>	Implementation of domain restriction.
<tt style='background-color:#E8E8E8;'> polys.agca.MatrixHomomorphism <a href=' /polys/agca/homomorphisms.py#L483'>_restrict_codomain</a>(sm)</tt>	Implementation of codomain restriction.
<tt style='background-color:#E8E8E8;'> polys.agca.MatrixHomomorphism <a href=' /polys/agca/homomorphisms.py#L487'>_quotient_domain</a>(sm)</tt>	Implementation of domain quotient.
<tt style='background-color:#E8E8E8;'> polys.agca.MatrixHomomorphism <a href=' /polys/agca/homomorphisms.py#L491'>_quotient_codomain</a>(sm)</tt>	Implementation of codomain quotient.
<tt style='background-color:#E8E8E8;'> polys.agca. <a href=' /polys/agca/homomorphisms.py#L582'>homomorphism</a>(domain,codomain,matrix)</tt>	Create a homomorphism object.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L45'>_contains_elem</a>(x)</tt>	Implementation of element containment.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L49'>_contains_ideal</a>(I)</tt>	Implementation of ideal containment.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L151'>quotient</a>(J)</tt>	Compute the ideal quotient of self by j.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L167'>intersect</a>(J)</tt>	Compute the intersection of self with ideal j.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L61'>is_whole_ring</a>()</tt>	Return true if self is the whole ring.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L65'>is_zero</a>()</tt>	Return true if self is the zero ideal.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L69'>_equals</a>(J)</tt>	Implementation of ideal equality.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L73'>is_prime</a>()</tt>	Return true if self is a prime ideal.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L77'>is_maximal</a>()</tt>	Return true if self is a maximal ideal.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L81'>is_radical</a>()</tt>	Return true if self is a radical ideal.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L85'>is_primary</a>()</tt>	Return true if self is a primary ideal.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L89'>is_principal</a>()</tt>	Return true if self is a principal ideal.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L93'>radical</a>()</tt>	Compute the radical of self.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L97'>depth</a>()</tt>	Compute the depth of self.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L101'>height</a>()</tt>	Compute the height of self.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L112'>_check_ideal</a>(J)</tt>	Helper to check j is an ideal of our ring.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L118'>contains</a>(elem)</tt>	Return true if elem is an element of this ideal.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L131'>subset</a>(other)</tt>	Returns true if other is is a subset of self.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L180'>saturate</a>(J)</tt>	Compute the ideal saturation of self by j.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L190'>union</a>(J)</tt>	Compute the ideal generated by the union of self and j.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L202'>product</a>(J)</tt>	Compute the ideal product of self and j.
<tt style='background-color:#E8E8E8;'> polys.agca.Ideal <a href=' /polys/agca/ideals.py#L217'>reduce_element</a>(x)</tt>	Reduce the element x of our ring modulo the ideal self.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleImplementedIdeal <a href=' /polys/agca/ideals.py#L301'>gens</a>()</tt>	Return generators for self.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleImplementedIdeal <a href=' /polys/agca/ideals.py#L313'>is_zero</a>()</tt>	Return true if self is the zero ideal.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleImplementedIdeal <a href=' /polys/agca/ideals.py#L326'>is_whole_ring</a>()</tt>	Return true if self is the whole ring i e one generator is a unit.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleImplementedIdeal <a href=' /polys/agca/ideals.py#L352'>in_terms_of_generators</a>(e)</tt>	Express e in terms of the generators of self.
<tt style='background-color:#E8E8E8;'> polys.agca.Module <a href=' /polys/agca/modules.py#L73'>convert</a>(elem,M)</tt>	Convert elem into internal representation of this module.
<tt style='background-color:#E8E8E8;'> polys.agca.Module <a href=' /polys/agca/modules.py#L83'>submodule</a>()</tt>	Generate a submodule.
<tt style='background-color:#E8E8E8;'> polys.agca.Module <a href=' /polys/agca/modules.py#L87'>quotient_module</a>(other)</tt>	Generate a quotient module.
<tt style='background-color:#E8E8E8;'> polys.agca.Module <a href=' /polys/agca/modules.py#L98'>contains</a>(elem)</tt>	Return true if elem is an element of this module.
<tt style='background-color:#E8E8E8;'> polys.agca.Module <a href=' /polys/agca/modules.py#L109'>subset</a>(other)</tt>	Returns true if other is is a subset of self.
<tt style='background-color:#E8E8E8;'> polys.agca.Module <a href=' /polys/agca/modules.py#L129'>is_zero</a>()</tt>	Returns true if self is a zero module.
<tt style='background-color:#E8E8E8;'> polys.agca.Module <a href=' /polys/agca/modules.py#L133'>is_submodule</a>(other)</tt>	Returns true if other is a submodule of self.
<tt style='background-color:#E8E8E8;'> polys.agca.Module <a href=' /polys/agca/modules.py#L137'>multiply_ideal</a>(other)</tt>	Multiply self by the ideal other.
<tt style='background-color:#E8E8E8;'> polys.agca.Module <a href=' /polys/agca/modules.py#L153'>identity_hom</a>()</tt>	Return the identity homomorphism on self.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleElement <a href=' /polys/agca/modules.py#L183'>add</a>(d1,d2)</tt>	Add data d1 and d2.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleElement <a href=' /polys/agca/modules.py#L187'>mul</a>(m,d)</tt>	Multiply module data m by coefficient d.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleElement <a href=' /polys/agca/modules.py#L191'>div</a>(m,d)</tt>	Divide module data m by coefficient d.
<tt style='background-color:#E8E8E8;'> polys.agca.ModuleElement <a href=' /polys/agca/modules.py#L195'>eq</a>(d1,d2)</tt>	Return true if d1 and d2 represent the same element.
<tt style='background-color:#E8E8E8;'> polys.agca.FreeModule <a href=' /polys/agca/modules.py#L305'>is_submodule</a>(other)</tt>	Returns true if other is a submodule of self.
<tt style='background-color:#E8E8E8;'> polys.agca.FreeModule <a href=' /polys/agca/modules.py#L326'>convert</a>(elem,M)</tt>	Convert elem into the internal representation.
<tt style='background-color:#E8E8E8;'> polys.agca.FreeModule <a href=' /polys/agca/modules.py#L356'>is_zero</a>()</tt>	Returns true if self is a zero module.
<tt style='background-color:#E8E8E8;'> polys.agca.FreeModule <a href=' /polys/agca/modules.py#L372'>basis</a>()</tt>	Return a set of basis elements.
<tt style='background-color:#E8E8E8;'> polys.agca.FreeModule <a href=' /polys/agca/modules.py#L385'>quotient_module</a>(submodule)</tt>	Return a quotient module.
<tt style='background-color:#E8E8E8;'> polys.agca.FreeModule <a href=' /polys/agca/modules.py#L402'>multiply_ideal</a>(other)</tt>	Multiply self by the ideal other.
<tt style='background-color:#E8E8E8;'> polys.agca.FreeModule <a href=' /polys/agca/modules.py#L415'>identity_hom</a>()</tt>	Return the identity homomorphism on self.
<tt style='background-color:#E8E8E8;'> polys.agca.FreeModulePolyRing <a href=' /polys/agca/modules.py#L457'>submodule</a>()</tt>	Generate a submodule.
<tt style='background-color:#E8E8E8;'> polys.agca.FreeModuleQuotientRing <a href=' /polys/agca/modules.py#L503'>submodule</a>()</tt>	Generate a submodule.
<tt style='background-color:#E8E8E8;'> polys.agca.FreeModuleQuotientRing <a href=' /polys/agca/modules.py#L519'>lift</a>(elem)</tt>	Lift the element elem of self to the module self quot.
<tt style='background-color:#E8E8E8;'> polys.agca.FreeModuleQuotientRing <a href=' /polys/agca/modules.py#L541'>unlift</a>(elem)</tt>	Push down an element of self quot to self.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L598'>_contains</a>(other)</tt>	Implementation of containment.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L603'>_syzygies</a>()</tt>	Implementation of syzygy computation wrt self generators.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L825'>in_terms_of_generators</a>(e)</tt>	Express element e of self in terms of the generators.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L611'>convert</a>(elem,M)</tt>	Convert elem into the internal represantition.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L641'>intersect</a>(other)</tt>	Returns the intersection of self with submodule other.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L673'>module_quotient</a>(other)</tt>	Returns the module quotient of self by submodule other.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L710'>union</a>(other)</tt>	Returns the module generated by the union of self and other.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L729'>is_zero</a>()</tt>	Return true if self is a zero module.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L743'>submodule</a>()</tt>	Generate a submodule.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L757'>is_full_module</a>()</tt>	Return true if self is the entire free module.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L771'>is_submodule</a>(other)</tt>	Returns true if other is a submodule of self.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L794'>syzygy_module</a>()</tt>	Compute the syzygy module of the generators of self.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L842'>reduce_element</a>(x)</tt>	Reduce the element x of our ring modulo the ideal self.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L851'>quotient_module</a>(other)</tt>	Return a quotient module.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L881'>multiply_ideal</a>(I)</tt>	Multiply self by the ideal i.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L894'>inclusion_hom</a>()</tt>	Return a homomorphism representing the inclusion map of self.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModule <a href=' /polys/agca/modules.py#L909'>identity_hom</a>()</tt>	Return the identity homomorphism on self.
<tt style='background-color:#E8E8E8;'> polys.agca.SubQuotientModule <a href=' /polys/agca/modules.py#L974'>is_full_module</a>()</tt>	Return true if self is the entire free module.
<tt style='background-color:#E8E8E8;'> polys.agca.SubQuotientModule <a href=' /polys/agca/modules.py#L988'>quotient_hom</a>()</tt>	Return the quotient homomorphism to self.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModulePolyRing <a href=' /polys/agca/modules.py#L1053'>_groebner</a>(extended)</tt>	Returns a standard basis in sdm form.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModulePolyRing <a href=' /polys/agca/modules.py#L1070'>_groebner_vec</a>(extended)</tt>	Returns a standard basis in element form.
<tt style='background-color:#E8E8E8;'> polys.agca.SubModulePolyRing <a href=' /polys/agca/modules.py#L1086'>_syzygies</a>()</tt>	Compute syzygies see [sca algorithm 2 5 4].
<tt style='background-color:#E8E8E8;'> polys.agca.SubModulePolyRing <a href=' /polys/agca/modules.py#L1119'>_in_terms_of_generators</a>(e)</tt>	Expression in terms of generators see [sca 2 8 1].
<tt style='background-color:#E8E8E8;'> polys.agca.SubModulePolyRing <a href=' /polys/agca/modules.py#L1130'>reduce_element</a>(x,NF)</tt>	Reduce the element x of our container modulo self.
<tt style='background-color:#E8E8E8;'> polys.agca.QuotientModule <a href=' /polys/agca/modules.py#L1278'>is_zero</a>()</tt>	Return true if self is a zero module.
<tt style='background-color:#E8E8E8;'> polys.agca.QuotientModule <a href=' /polys/agca/modules.py#L1295'>is_submodule</a>(other)</tt>	Return true if other is a submodule of self.
<tt style='background-color:#E8E8E8;'> polys.agca.QuotientModule <a href=' /polys/agca/modules.py#L1315'>submodule</a>()</tt>	Generate a submodule.
<tt style='background-color:#E8E8E8;'> polys.agca.QuotientModule <a href=' /polys/agca/modules.py#L1330'>convert</a>(elem,M)</tt>	Convert elem into the internal representation.
<tt style='background-color:#E8E8E8;'> polys.agca.QuotientModule <a href=' /polys/agca/modules.py#L1351'>identity_hom</a>()</tt>	Return the identity homomorphism on self.
<tt style='background-color:#E8E8E8;'> polys.agca.QuotientModule <a href=' /polys/agca/modules.py#L1366'>quotient_hom</a>()</tt>	Return the quotient homomorphism to self.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/paulialgebra.py#L20'>delta</a>(i,j)</tt>	Returns 1 if i == j else 0.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/paulialgebra.py#L41'>epsilon</a>(i,j,k)</tt>	Return 1 if i j k is equal to 1 2 3 2 3 1 or 3 1 2 ; -1 if i j k is equal to 1 3 2 3 2 1 or 2 1 3 ;.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/paulialgebra.py#L137'>evaluate_pauli_product</a>(arg)</tt>	Help function to evaluate pauli matrices product with symbolic objects.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/sho.py#L7'>R_nl</a>(n,l,r,Z)</tt>	Returns the hydrogen radial wavefunction r_{nl}.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/sho.py#L65'>E_nl</a>(n,Z)</tt>	Returns the energy of the state n l in hartree atomic units.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/hydrogen.py#L117'>E_nl_dirac</a>(n,l,spin_up,Z)</tt>	Returns the relativistic energy of the state n l spin in hartree atomic units.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/qho_1d.py#L8'>psi_n</a>(n,x,m,omega)</tt>	Returns the wavefunction psi_{n} for the one-dimensional harmonic oscillator.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/qho_1d.py#L43'>E_n</a>(n,omega)</tt>	Returns the energy of the one-dimensional harmonic oscillator n.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/qho_1d.py#L71'>coherent_state</a>(n,alpha)</tt>	Returns <n|alpha> for the coherent states of 1d harmonic oscillator.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/matrices.py#L10'>msigma</a>(i)</tt>	Returns a pauli matrix \sigma_i with i=1 2 3 references.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/matrices.py#L47'>pat_matrix</a>(m,dx,dy,dz)</tt>	Returns the parallel axis theorem matrix to translate the inertia matrix a distance of dx dy dz for a body of mass m.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/matrices.py#L77'>mgamma</a>(mu,lower)</tt>	Returns a dirac gamma matrix \gamma^\mu in the standard dirac representation.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/matrices.py#L157'>mdft</a>(n)</tt>	Returns an expression of a discrete fourier transform as a matrix multiplication.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/pring.py#L6'>wavefunction</a>(n,x)</tt>	Returns the wavefunction for particle on ring.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/pring.py#L46'>energy</a>(n,m,r)</tt>	Returns the energy of the state corresponding to quantum number n.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/sho.py#L7'>R_nl</a>(n,l,nu,r)</tt>	Returns the radial wavefunction r_{nl} for a 3d isotropic harmonic oscillator.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/sho.py#L65'>E_nl</a>(n,l,hw)</tt>	Returns the energy of an isotropic harmonic oscillator n.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/wigner.py#L45'>_calc_factlist</a>(nn)</tt>	Function calculates a list of precomputed factorials in order to massively accelerate future calculations of the various.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/wigner.py#L73'>wigner_3j</a>(j_1,j_2,j_3,m_1)</tt>	Calculate the wigner 3j symbol \operatorname{wigner3j}(j_1 j_2 j_3 m_1 m_2 m_3).
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/wigner.py#L218'>clebsch_gordan</a>(j_1,j_2,j_3,m_1)</tt>	Calculates the clebsch-gordan coefficient \langle j_1 m_1 \; j_2 m_2 | j_3 m_3 \rangle.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/wigner.py#L267'>_big_delta_coeff</a>(aa,bb,cc,prec)</tt>	Calculates the delta coefficient of the 3 angular momenta for racah symbols.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/wigner.py#L321'>racah</a>(aa,bb,cc,dd)</tt>	Calculate the racah symbol w a b c d e f.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/wigner.py#L396'>wigner_6j</a>(j_1,j_2,j_3,j_4)</tt>	Calculate the wigner 6j symbol \operatorname{wigner6j}(j_1 j_2 j_3 j_4 j_5 j_6).
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/wigner.py#L492'>wigner_9j</a>(j_1,j_2,j_3,j_4)</tt>	Calculate the wigner 9j symbol \operatorname{wigner9j}(j_1 j_2 j_3 j_4 j_5 j_6 j_7 j_8 j_9).
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/wigner.py#L548'>gaunt</a>(l_1,l_2,l_3,m_1)</tt>	Calculate the gaunt coefficient.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/wigner.py#L712'>dot_rot_grad_Ynm</a>(j,p,l,m)</tt>	Returns dot product of rotational gradients of spherical harmonics.
<tt style='background-color:#E8E8E8;'> physics.Dagger <a href=' /physics/secondquant.py#L109'>eval</a>(cls,arg)</tt>	Evaluates the dagger instance.
<tt style='background-color:#E8E8E8;'> physics.AntiSymmetricTensor <a href=' /physics/secondquant.py#L199'>_sortkey</a>(cls,index)</tt>	Key for sorting of indices.
<tt style='background-color:#E8E8E8;'> physics.AntiSymmetricTensor <a href=' /physics/secondquant.py#L230'>symbol</a>()</tt>	Returns the symbol of the tensor.
<tt style='background-color:#E8E8E8;'> physics.AntiSymmetricTensor <a href=' /physics/secondquant.py#L250'>upper</a>()</tt>	Returns the upper indices.
<tt style='background-color:#E8E8E8;'> physics.AntiSymmetricTensor <a href=' /physics/secondquant.py#L271'>lower</a>()</tt>	Returns the lower indices.
<tt style='background-color:#E8E8E8;'> physics.SqOperator <a href=' /physics/secondquant.py#L324'>state</a>()</tt>	Returns the state index related to this operator.
<tt style='background-color:#E8E8E8;'> physics.SqOperator <a href=' /physics/secondquant.py#L344'>is_symbolic</a>()</tt>	Returns true if the state is a symbol as opposed to a number.
<tt style='background-color:#E8E8E8;'> physics.SqOperator <a href=' /physics/secondquant.py#L363'>doit</a>()</tt>	Fixme hack to prevent crash further up.
<tt style='background-color:#E8E8E8;'> physics.SqOperator <a href=' /physics/secondquant.py#L375'>apply_operator</a>(state)</tt>	Applies an operator to itself.
<tt style='background-color:#E8E8E8;'> physics.AnnihilateBoson <a href=' /physics/secondquant.py#L412'>apply_operator</a>(state)</tt>	Apply state to self if self is not symbolic and state is a fockstateket else multiply self by state.
<tt style='background-color:#E8E8E8;'> physics.CreateBoson <a href=' /physics/secondquant.py#L449'>apply_operator</a>(state)</tt>	Apply state to self if self is not symbolic and state is a fockstateket else multiply self by state.
<tt style='background-color:#E8E8E8;'> physics.FermionicOperator <a href=' /physics/secondquant.py#L480'>is_restricted</a>()</tt>	Is this fermionicoperator restricted with respect to fermi level? return values.
<tt style='background-color:#E8E8E8;'> physics.FermionicOperator <a href=' /physics/secondquant.py#L517'>is_above_fermi</a>()</tt>	Does the index of this fermionicoperator allow values above fermi? >>> from sympy import symbol.
<tt style='background-color:#E8E8E8;'> physics.FermionicOperator <a href=' /physics/secondquant.py#L541'>is_below_fermi</a>()</tt>	Does the index of this fermionicoperator allow values below fermi? >>> from sympy import symbol.
<tt style='background-color:#E8E8E8;'> physics.FermionicOperator <a href=' /physics/secondquant.py#L564'>is_only_below_fermi</a>()</tt>	Is the index of this fermionicoperator restricted to values below fermi? >>> from sympy import symbol.
<tt style='background-color:#E8E8E8;'> physics.FermionicOperator <a href=' /physics/secondquant.py#L586'>is_only_above_fermi</a>()</tt>	Is the index of this fermionicoperator restricted to values above fermi? >>> from sympy import symbol.
<tt style='background-color:#E8E8E8;'> physics.AnnihilateFermion <a href=' /physics/secondquant.py#L632'>apply_operator</a>(state)</tt>	Apply state to self if self is not symbolic and state is a fockstateket else multiply self by state.
<tt style='background-color:#E8E8E8;'> physics.AnnihilateFermion <a href=' /physics/secondquant.py#L662'>is_q_creator</a>()</tt>	Can we create a quasi-particle? create hole or create particle if so would that be above or below the fermi surface?.
<tt style='background-color:#E8E8E8;'> physics.AnnihilateFermion <a href=' /physics/secondquant.py#L686'>is_q_annihilator</a>()</tt>	Can we destroy a quasi-particle? annihilate hole or annihilate particle if so would that be above or below the fermi surface?.
<tt style='background-color:#E8E8E8;'> physics.AnnihilateFermion <a href=' /physics/secondquant.py#L710'>is_only_q_creator</a>()</tt>	Always create a quasi-particle? create hole or create particle >>> from sympy import symbol.
<tt style='background-color:#E8E8E8;'> physics.AnnihilateFermion <a href=' /physics/secondquant.py#L732'>is_only_q_annihilator</a>()</tt>	Always destroy a quasi-particle? annihilate hole or annihilate particle >>> from sympy import symbol.
<tt style='background-color:#E8E8E8;'> physics.CreateFermion <a href=' /physics/secondquant.py#L770'>apply_operator</a>(state)</tt>	Apply state to self if self is not symbolic and state is a fockstateket else multiply self by state.
<tt style='background-color:#E8E8E8;'> physics.CreateFermion <a href=' /physics/secondquant.py#L797'>is_q_creator</a>()</tt>	Can we create a quasi-particle? create hole or create particle if so would that be above or below the fermi surface?.
<tt style='background-color:#E8E8E8;'> physics.CreateFermion <a href=' /physics/secondquant.py#L821'>is_q_annihilator</a>()</tt>	Can we destroy a quasi-particle? annihilate hole or annihilate particle if so would that be above or below the fermi surface?.
<tt style='background-color:#E8E8E8;'> physics.CreateFermion <a href=' /physics/secondquant.py#L845'>is_only_q_creator</a>()</tt>	Always create a quasi-particle? create hole or create particle >>> from sympy import symbol.
<tt style='background-color:#E8E8E8;'> physics.CreateFermion <a href=' /physics/secondquant.py#L866'>is_only_q_annihilator</a>()</tt>	Always destroy a quasi-particle? annihilate hole or annihilate particle >>> from sympy import symbol.
<tt style='background-color:#E8E8E8;'> physics.FockState <a href=' /physics/secondquant.py#L908'>__new__</a>(cls,occupations)</tt>	Occupations is a list with two possible meanings - for bosons it is a list of occupation numbers.
<tt style='background-color:#E8E8E8;'> physics.BosonState <a href=' /physics/secondquant.py#L945'>up</a>(i)</tt>	Performs the action of a creation operator.
<tt style='background-color:#E8E8E8;'> physics.BosonState <a href=' /physics/secondquant.py#L964'>down</a>(i)</tt>	Performs the action of an annihilation operator.
<tt style='background-color:#E8E8E8;'> physics.FermionState <a href=' /physics/secondquant.py#L1015'>up</a>(i)</tt>	Performs the action of a creation operator.
<tt style='background-color:#E8E8E8;'> physics.FermionState <a href=' /physics/secondquant.py#L1061'>down</a>(i)</tt>	Performs the action of an annihilation operator.
<tt style='background-color:#E8E8E8;'> physics.FermionState <a href=' /physics/secondquant.py#L1111'>_only_below_fermi</a>(cls,i)</tt>	Tests if given orbit is only below fermi surface.
<tt style='background-color:#E8E8E8;'> physics.FermionState <a href=' /physics/secondquant.py#L1124'>_only_above_fermi</a>(cls,i)</tt>	Tests if given orbit is only above fermi surface.
<tt style='background-color:#E8E8E8;'> physics.FermionState <a href=' /physics/secondquant.py#L1138'>_remove_orbit</a>(i)</tt>	Removes particle/fills hole in orbit i no input tests performed here.
<tt style='background-color:#E8E8E8;'> physics.FermionState <a href=' /physics/secondquant.py#L1150'>_add_orbit</a>(i)</tt>	Adds particle/creates hole in orbit i no input tests performed here.
<tt style='background-color:#E8E8E8;'> physics.FermionState <a href=' /physics/secondquant.py#L1156'>_count_holes</a>(cls,list)</tt>	Returns number of identified hole states in list.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/secondquant.py#L1277'>_apply_Mul</a>(m)</tt>	Take a mul instance with operators and apply them to states.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/secondquant.py#L1339'>apply_operators</a>(e)</tt>	Take a sympy expression with operators and states and apply the operators.
<tt style='background-color:#E8E8E8;'> physics.InnerProduct <a href=' /physics/secondquant.py#L1385'>bra</a>()</tt>	Returns the bra part of the state.
<tt style='background-color:#E8E8E8;'> physics.InnerProduct <a href=' /physics/secondquant.py#L1390'>ket</a>()</tt>	Returns the ket part of the state.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/secondquant.py#L1404'>matrix_rep</a>(op,basis)</tt>	Find the representation of an operator in a basis.
<tt style='background-color:#E8E8E8;'> physics.VarBosonicBasis <a href=' /physics/secondquant.py#L1460'>index</a>(state)</tt>	Returns the index of state in basis.
<tt style='background-color:#E8E8E8;'> physics.VarBosonicBasis <a href=' /physics/secondquant.py#L1479'>state</a>(i)</tt>	The state of a single basis.
<tt style='background-color:#E8E8E8;'> physics.FixedBosonicBasis <a href=' /physics/secondquant.py#L1549'>index</a>(state)</tt>	Returns the index of state in basis.
<tt style='background-color:#E8E8E8;'> physics.FixedBosonicBasis <a href=' /physics/secondquant.py#L1562'>state</a>(i)</tt>	Returns the state that lies at index i of the basis examples.
<tt style='background-color:#E8E8E8;'> physics.Commutator <a href=' /physics/secondquant.py#L1629'>eval</a>(cls,a,b)</tt>	The commutator [a b] is on canonical form if a < b.
<tt style='background-color:#E8E8E8;'> physics.Commutator <a href=' /physics/secondquant.py#L1689'>doit</a>()</tt>	Enables the computation of complex expressions.
<tt style='background-color:#E8E8E8;'> physics.NO <a href=' /physics/secondquant.py#L1759'>__new__</a>(cls,arg)</tt>	Use anticommutation to get canonical form of operators.
<tt style='background-color:#E8E8E8;'> physics.NO <a href=' /physics/secondquant.py#L1829'>has_q_creators</a>()</tt>	Return 0 if the leftmost argument of the first argument is a not a q_creator else 1 if it is above fermi or -1 if it is below fermi.
<tt style='background-color:#E8E8E8;'> physics.NO <a href=' /physics/secondquant.py#L1853'>has_q_annihilators</a>()</tt>	Return 0 if the rightmost argument of the first argument is a not a q_annihilator else 1 if it is above fermi or -1 if it is below fermi.
<tt style='background-color:#E8E8E8;'> physics.NO <a href=' /physics/secondquant.py#L1877'>doit</a>()</tt>	Either removes the brackets or enables complex computations in its arguments.
<tt style='background-color:#E8E8E8;'> physics.NO <a href=' /physics/secondquant.py#L1902'>_remove_brackets</a>()</tt>	Returns the sorted string without normal order brackets.
<tt style='background-color:#E8E8E8;'> physics.NO <a href=' /physics/secondquant.py#L1944'>_expand_operators</a>()</tt>	Returns a sum of no objects that contain no ambiguous q-operators.
<tt style='background-color:#E8E8E8;'> physics.NO <a href=' /physics/secondquant.py#L1969'>iter_q_annihilators</a>()</tt>	Iterates over the annihilation operators.
<tt style='background-color:#E8E8E8;'> physics.NO <a href=' /physics/secondquant.py#L1998'>iter_q_creators</a>()</tt>	Iterates over the creation operators.
<tt style='background-color:#E8E8E8;'> physics.NO <a href=' /physics/secondquant.py#L2028'>get_subNO</a>(i)</tt>	Returns a no() without fermionicoperator at index i.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/secondquant.py#L2057'>contraction</a>(a,b)</tt>	Calculates contraction of fermionic operators a and b.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/secondquant.py#L2129'>_sqkey</a>(sq_operator)</tt>	Generates key for canonical sorting of sq operators.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/secondquant.py#L2134'>_sort_anticommuting_fermions</a>(string1,key)</tt>	Sort fermionic operators to canonical order assuming all pairs anticommute.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/secondquant.py#L2187'>evaluate_deltas</a>(e)</tt>	We evaluate kroneckerdelta symbols in the expression assuming einstein summation.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/secondquant.py#L2294'>substitute_dummies</a>(expr,new_indices,pretty_indices)</tt>	Collect terms by substitution of dummy variables.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/secondquant.py#L2470'>_get_ordered_dummies</a>(mul,verbose)</tt>	Returns all dummies in the mul sorted in canonical order the purpose of the canonical ordering is that dummies can be substituted.
<tt style='background-color:#E8E8E8;'> physics._SymbolFactory <a href=' /physics/secondquant.py#L2676'>_set_counter</a>(value)</tt>	Sets counter to value.
<tt style='background-color:#E8E8E8;'> physics._SymbolFactory <a href=' /physics/secondquant.py#L2682'>_counter</a>()</tt>	What counter is currently at.
<tt style='background-color:#E8E8E8;'> physics._SymbolFactory <a href=' /physics/secondquant.py#L2689'>_next</a>()</tt>	Generates the next symbols and increments counter by 1.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/secondquant.py#L2699'>_get_contractions</a>(string1,keep_only_fully_contracted)</tt>	Returns add-object with contracted terms.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/secondquant.py#L2760'>wicks</a>(e)</tt>	Returns the normal ordered equivalent of an expression using wicks theorem.
<tt style='background-color:#E8E8E8;'> physics.PermutationOperator <a href=' /physics/secondquant.py#L2887'>get_permuted</a>(expr)</tt>	Returns -expr with permuted indices.
<tt style='background-color:#E8E8E8;'> physics. <a href=' /physics/secondquant.py#L2914'>simplify_index_permutations</a>(expr,permutation_operators)</tt>	Performs simplification by introducing permutationoperators where appropriate.
<tt style='background-color:#E8E8E8;'> physics.continuum_mechanics.Beam <a href=' /physics/continuum_mechanics/beam.py#L70'>__init__</a>(length,elastic_modulus,second_moment,variable)</tt>	Initializes the class.
<tt style='background-color:#E8E8E8;'> physics.continuum_mechanics.Beam <a href=' /physics/continuum_mechanics/beam.py#L101'>reaction_loads</a>()</tt>	Returns the reaction forces in a dictionary.
<tt style='background-color:#E8E8E8;'> physics.continuum_mechanics.Beam <a href=' /physics/continuum_mechanics/beam.py#L111'>length</a>()</tt>	Length of the beam.
<tt style='background-color:#E8E8E8;'> physics.continuum_mechanics.Beam <a href=' /physics/continuum_mechanics/beam.py#L141'>variable</a>()</tt>	A symbol that can be used as a variable along the length of the beam while representing load distribution shear force curve bending.
<tt style='background-color:#E8E8E8;'> physics.continuum_mechanics.Beam <a href=' /physics/continuum_mechanics/beam.py#L153'>elastic_modulus</a>()</tt>	Young's modulus of the beam.
<tt style='background-color:#E8E8E8;'> physics.continuum_mechanics.Beam <a href=' /physics/continuum_mechanics/beam.py#L162'>second_moment</a>()</tt>	Second moment of area of the beam.
<tt style='background-color:#E8E8E8;'> physics.continuum_mechanics.Beam <a href=' /physics/continuum_mechanics/beam.py#L166'>boundary_conditions</a>()</tt>	Returns a dictionary of boundary conditions applied on the beam.
<tt style='background-color:#E8E8E8;'> physics.continuum_mechanics.Beam <a href=' /physics/continuum_mechanics/beam.py#L211'>apply_load</a>(value,start,order,end)</tt>	This method adds up the loads given to a particular beam object.
<tt style='background-color:#E8E8E8;'> physics.continuum_mechanics.Beam <a href=' /physics/continuum_mechanics/beam.py#L269'>load</a>()</tt>	Returns a singularity function expression which represents the load distribution curve of the beam object.
<tt style='background-color:#E8E8E8;'> physics.continuum_mechanics.Beam <a href=' /physics/continuum_mechanics/beam.py#L296'>solve_for_reaction_loads</a>()</tt>	Solves for the reaction forces.
<tt style='background-color:#E8E8E8;'> physics.continuum_mechanics.Beam <a href=' /physics/continuum_mechanics/beam.py#L340'>shear_force</a>()</tt>	Returns a singularity function expression which represents the shear force curve of the beam object.
<tt style='background-color:#E8E8E8;'> physics.continuum_mechanics.Beam <a href=' /physics/continuum_mechanics/beam.py#L374'>bending_moment</a>()</tt>	Returns a singularity function expression which represents the bending moment curve of the beam object.
<tt style='background-color:#E8E8E8;'> physics.continuum_mechanics.Beam <a href=' /physics/continuum_mechanics/beam.py#L408'>slope</a>()</tt>	Returns a singularity function expression which represents the slope the elastic curve of the beam object.
<tt style='background-color:#E8E8E8;'> physics.continuum_mechanics.Beam <a href=' /physics/continuum_mechanics/beam.py#L458'>deflection</a>()</tt>	Returns a singularity function expression which represents the elastic curve or deflection of the beam object.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L39'>mechanics_printing</a>()</tt>	Initializes time derivative printing for all sympy objects in mechanics module.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L50'>inertia</a>(frame,ixx,iyy,izz)</tt>	Simple way to create inertia dyadic object.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L98'>inertia_of_point_mass</a>(mass,pos_vec,frame)</tt>	Inertia dyadic of a point mass relative to point o.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L129'>linear_momentum</a>(frame)</tt>	Linear momentum of the system.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L179'>angular_momentum</a>(point,frame)</tt>	Angular momentum of a system this function returns the angular momentum of a system of particle's and/or.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L237'>kinetic_energy</a>(frame)</tt>	Kinetic energy of a multibody system.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L293'>potential_energy</a>()</tt>	Potential energy of a multibody system.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L345'>Lagrangian</a>(frame)</tt>	Lagrangian of a multibody system.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L402'>find_dynamicsymbols</a>(expression,exclude)</tt>	Find all dynamicsymbols in expression.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L429'>msubs</a>(expr)</tt>	A custom subs for use on expressions derived in physics mechanics.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L480'>_crawl</a>(expr,func)</tt>	Crawl the expression tree and apply func to every node.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L489'>_sub_func</a>(expr,sub_dict)</tt>	Perform direct matching substitution ignoring derivatives.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L497'>_tan_repl_func</a>(expr)</tt>	Replace tan with sin/cos.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L505'>_smart_subs</a>(expr,sub_dict)</tt>	Performs subs checking for conditions that may result in nan or oo, and attempts to simplify them out.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L542'>_fraction_decomp</a>(expr)</tt>	Return num den such that expr = num/den.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/functions.py#L560'>_f_list_parser</a>(fl,ref_frame)</tt>	Parses the provided forcelist composed of items of the form obj force.
<tt style='background-color:#E8E8E8;'> physics.mechanics.Particle <a href=' /physics/mechanics/particle.py#L60'>mass</a>()</tt>	Mass of the particle.
<tt style='background-color:#E8E8E8;'> physics.mechanics.Particle <a href=' /physics/mechanics/particle.py#L85'>point</a>()</tt>	Point of the particle.
<tt style='background-color:#E8E8E8;'> physics.mechanics.Particle <a href=' /physics/mechanics/particle.py#L107'>linear_momentum</a>(frame)</tt>	Linear momentum of the particle.
<tt style='background-color:#E8E8E8;'> physics.mechanics.Particle <a href=' /physics/mechanics/particle.py#L141'>angular_momentum</a>(point,frame)</tt>	Angular momentum of the particle about the point.
<tt style='background-color:#E8E8E8;'> physics.mechanics.Particle <a href=' /physics/mechanics/particle.py#L180'>kinetic_energy</a>(frame)</tt>	Kinetic energy of the particle the kinetic energy t of a particle p is given by.
<tt style='background-color:#E8E8E8;'> physics.mechanics.Particle <a href=' /physics/mechanics/particle.py#L236'>potential_energy</a>()</tt>	The potential energy of the particle.
<tt style='background-color:#E8E8E8;'> physics.mechanics.Particle <a href=' /physics/mechanics/particle.py#L236'>potential_energy</a>(scalar)</tt>	Used to set the potential energy of the particle.
<tt style='background-color:#E8E8E8;'> physics.mechanics.Linearizer <a href=' /physics/mechanics/linearize.py#L108'>_form_permutation_matrices</a>()</tt>	Form the permutation matrices pq and pu.
<tt style='background-color:#E8E8E8;'> physics.mechanics.Linearizer <a href=' /physics/mechanics/linearize.py#L141'>_form_coefficient_matrices</a>()</tt>	Form the coefficient matrices c_0 c_1 and c_2.
<tt style='background-color:#E8E8E8;'> physics.mechanics.Linearizer <a href=' /physics/mechanics/linearize.py#L172'>_form_block_matrices</a>()</tt>	Form the block matrices for composing m a and b.
<tt style='background-color:#E8E8E8;'> physics.mechanics.Linearizer <a href=' /physics/mechanics/linearize.py#L222'>linearize</a>(op_point,A_and_B,simplify)</tt>	Linearize the system about the operating point note that.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/linearize.py#L400'>permutation_matrix</a>(orig_vec,per_vec)</tt>	Compute the permutation matrix to change order of orig_vec into order of per_vec.
<tt style='background-color:#E8E8E8;'> physics.mechanics.Body <a href=' /physics/mechanics/body.py#L135'>apply_force</a>(vec,point)</tt>	Adds a force to a point center of mass by default on the body.
<tt style='background-color:#E8E8E8;'> physics.mechanics.Body <a href=' /physics/mechanics/body.py#L187'>apply_torque</a>(vec)</tt>	Adds a torque to the body.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L209'>__init__</a>(coord_states,right_hand_side,speeds,mass_matrix)</tt>	Initializes a symbolicsystem object.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L273'>coordinates</a>()</tt>	Returns the column matrix of the generalized coordinates.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L281'>speeds</a>()</tt>	Returns the column matrix of generalized speeds.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L289'>states</a>()</tt>	Returns the column matrix of the state variables.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L294'>alg_con</a>()</tt>	Returns a list with the indices of the rows containing algebraic.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L300'>dyn_implicit_mat</a>()</tt>	Returns the matrix m corresponding to the dynamic equations in.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L311'>dyn_implicit_rhs</a>()</tt>	Returns the column matrix f corresponding to the dynamic equations.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L322'>comb_implicit_mat</a>()</tt>	Returns the matrix m corresponding to the equations of motion in.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L343'>comb_implicit_rhs</a>()</tt>	Returns the column matrix f corresponding to the equations of.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L360'>compute_explicit_form</a>()</tt>	If the explicit right hand side of the combined equations of motion is to provided upon initialization this method will calculate it.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L376'>comb_explicit_rhs</a>()</tt>	Returns the right hand side of the equations of motion in explicit.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L386'>kin_explicit_rhs</a>()</tt>	Returns the right hand side of the kinematical equations in explicit.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L396'>dynamic_symbols</a>()</tt>	Returns a column matrix containing all of the symbols in the system.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L414'>constant_symbols</a>()</tt>	Returns a column matrix containing all of the symbols in the system.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L431'>bodies</a>()</tt>	Returns the bodies in the system.
<tt style='background-color:#E8E8E8;'> physics.mechanics.SymbolicSystem <a href=' /physics/mechanics/system.py#L439'>loads</a>()</tt>	Returns the loads in the system.
<tt style='background-color:#E8E8E8;'> physics.mechanics.LagrangesMethod <a href=' /physics/mechanics/lagrange.py#L104'>__init__</a>(Lagrangian,qs,coneqs,forcelist)</tt>	Supply the following for the initialization of lagrangesmethod lagrangian : sympifyable.
<tt style='background-color:#E8E8E8;'> physics.mechanics.LagrangesMethod <a href=' /physics/mechanics/lagrange.py#L179'>form_lagranges_equations</a>()</tt>	Method to form lagrange's equations of motion.
<tt style='background-color:#E8E8E8;'> physics.mechanics.LagrangesMethod <a href=' /physics/mechanics/lagrange.py#L235'>mass_matrix</a>()</tt>	Returns the mass matrix which is augmented by the lagrange multipliers if necessary.
<tt style='background-color:#E8E8E8;'> physics.mechanics.LagrangesMethod <a href=' /physics/mechanics/lagrange.py#L256'>mass_matrix_full</a>()</tt>	Augments the coefficients of qdots to the mass_matrix.
<tt style='background-color:#E8E8E8;'> physics.mechanics.LagrangesMethod <a href=' /physics/mechanics/lagrange.py#L272'>forcing</a>()</tt>	Returns the forcing vector from 'lagranges_equations' method.
<tt style='background-color:#E8E8E8;'> physics.mechanics.LagrangesMethod <a href=' /physics/mechanics/lagrange.py#L280'>forcing_full</a>()</tt>	Augments qdots to the forcing vector above.
<tt style='background-color:#E8E8E8;'> physics.mechanics.LagrangesMethod <a href=' /physics/mechanics/lagrange.py#L291'>to_linearizer</a>(q_ind,qd_ind,q_dep,qd_dep)</tt>	Returns an instance of the linearizer class initiated from the data in the lagrangesmethod class.
<tt style='background-color:#E8E8E8;'> physics.mechanics.LagrangesMethod <a href=' /physics/mechanics/lagrange.py#L355'>linearize</a>(q_ind,qd_ind,q_dep,qd_dep)</tt>	Linearize the equations of motion about a symbolic operating point.
<tt style='background-color:#E8E8E8;'> physics.mechanics.LagrangesMethod <a href=' /physics/mechanics/lagrange.py#L385'>solve_multipliers</a>(op_point,sol_type)</tt>	Solves for the values of the lagrange multipliers symbolically at the specified operating point.
<tt style='background-color:#E8E8E8;'> physics.mechanics.LagrangesMethod <a href=' /physics/mechanics/lagrange.py#L434'>rhs</a>(inv_method)</tt>	Returns equations that can be solved numerically parameters.
<tt style='background-color:#E8E8E8;'> physics.mechanics.RigidBody <a href=' /physics/mechanics/rigidbody.py#L186'>central_inertia</a>()</tt>	The body's central inertia dyadic.
<tt style='background-color:#E8E8E8;'> physics.mechanics.RigidBody <a href=' /physics/mechanics/rigidbody.py#L191'>linear_momentum</a>(frame)</tt>	Linear momentum of the rigid body.
<tt style='background-color:#E8E8E8;'> physics.mechanics.RigidBody <a href=' /physics/mechanics/rigidbody.py#L227'>angular_momentum</a>(point,frame)</tt>	Returns the angular momentum of the rigid body about a point in the given frame.
<tt style='background-color:#E8E8E8;'> physics.mechanics.RigidBody <a href=' /physics/mechanics/rigidbody.py#L273'>kinetic_energy</a>(frame)</tt>	Kinetic energy of the rigid body the kinetic energy t of a rigid body b is given by.
<tt style='background-color:#E8E8E8;'> physics.mechanics.RigidBody <a href=' /physics/mechanics/rigidbody.py#L343'>potential_energy</a>()</tt>	The potential energy of the rigidbody.
<tt style='background-color:#E8E8E8;'> physics.mechanics.RigidBody <a href=' /physics/mechanics/rigidbody.py#L343'>potential_energy</a>(scalar)</tt>	Used to set the potential energy of this rigidbody.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L118'>__init__</a>(frame,q_ind,u_ind,kd_eqs)</tt>	Please read the online documentation.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L141'>_initialize_vectors</a>(q_ind,q_dep,u_ind,u_dep)</tt>	Initialize the coordinate and speed vectors.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L169'>_initialize_constraint_matrices</a>(config,vel,acc)</tt>	Initializes constraint matrices.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L233'>_initialize_kindiffeq_matrices</a>(kdeqs)</tt>	Initialize the kinematic differential equation matrices.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L269'>_form_fr</a>(fl)</tt>	Form the generalized active force.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L300'>_form_frstar</a>(bl)</tt>	Form the generalized inertia force.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L397'>to_linearizer</a>()</tt>	Returns an instance of the linearizer class initiated from the data in the kanesmethod class.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L470'>linearize</a>()</tt>	Linearize the equations of motion about a symbolic operating point.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L514'>_old_linearize</a>()</tt>	Old method to linearize the equations of motion returns a tuple of.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L688'>kanes_equations</a>(bodies,loads)</tt>	Method to form kane's equations fr + fr* = 0.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L744'>rhs</a>(inv_method)</tt>	Returns the system's equations of motion in first order form the.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L776'>kindiffdict</a>()</tt>	Returns a dictionary mapping q' to u.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L783'>auxiliary_eqs</a>()</tt>	A matrix containing the auxiliary equations.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L792'>mass_matrix</a>()</tt>	The mass matrix of the system.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L799'>mass_matrix_full</a>()</tt>	The mass matrix of the system augmented by the kinematic differential equations.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L810'>forcing</a>()</tt>	The forcing vector of the system.
<tt style='background-color:#E8E8E8;'> physics.mechanics.KanesMethod <a href=' /physics/mechanics/kane.py#L817'>forcing_full</a>()</tt>	The forcing vector of the system augmented by the kinematic differential equations.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/models.py#L12'>multi_mass_spring_damper</a>(n,apply_gravity,apply_external_forces)</tt>	Returns a system containing the symbolic equations of motion and associated variables for a simple multi-degree of freedom point mass.
<tt style='background-color:#E8E8E8;'> physics.mechanics. <a href=' /physics/mechanics/models.py#L112'>n_link_pendulum_on_cart</a>(n,cart_force,joint_torques)</tt>	Returns the system containing the symbolic first order equations of motion for a 2d n-link pendulum on a sliding cart under the influence of.
<tt style='background-color:#E8E8E8;'> physics.quantum.Operator <a href=' /physics/quantum/operator.py#L153'>_eval_commutator</a>(other)</tt>	Evaluate [self other] if known return none if not known.
<tt style='background-color:#E8E8E8;'> physics.quantum.Operator <a href=' /physics/quantum/operator.py#L157'>_eval_anticommutator</a>(other)</tt>	Evaluate [self other] if known.
<tt style='background-color:#E8E8E8;'> physics.quantum.OuterProduct <a href=' /physics/quantum/operator.py#L447'>ket</a>()</tt>	Return the ket on the left side of the outer product.
<tt style='background-color:#E8E8E8;'> physics.quantum.OuterProduct <a href=' /physics/quantum/operator.py#L452'>bra</a>()</tt>	Return the bra on the right side of the outer product.
<tt style='background-color:#E8E8E8;'> physics.quantum.DifferentialOperator <a href=' /physics/quantum/operator.py#L530'>variables</a>()</tt>	Returns the variables with which the function in the specified arbitrary expression is evaluated.
<tt style='background-color:#E8E8E8;'> physics.quantum.DifferentialOperator <a href=' /physics/quantum/operator.py#L555'>function</a>()</tt>	Returns the function which is to be replaced with the wavefunction examples.
<tt style='background-color:#E8E8E8;'> physics.quantum.DifferentialOperator <a href=' /physics/quantum/operator.py#L579'>expr</a>()</tt>	Returns the arbitary expression which is to have the wavefunction substituted into it.
<tt style='background-color:#E8E8E8;'> physics.quantum.DifferentialOperator <a href=' /physics/quantum/operator.py#L604'>free_symbols</a>()</tt>	Return the free symbols of the expression.
<tt style='background-color:#E8E8E8;'> physics.quantum.StateBase <a href=' /physics/quantum/state.py#L67'>_operators_to_state</a>(ops)</tt>	Returns the eigenstate instance for the passed operators.
<tt style='background-color:#E8E8E8;'> physics.quantum.StateBase <a href=' /physics/quantum/state.py#L79'>_state_to_operators</a>(op_classes)</tt>	Returns the operators which this state instance is an eigenstate of.
<tt style='background-color:#E8E8E8;'> physics.quantum.StateBase <a href=' /physics/quantum/state.py#L93'>operators</a>()</tt>	Return the operator s that this state is an eigenstate of.
<tt style='background-color:#E8E8E8;'> physics.quantum.StateBase <a href=' /physics/quantum/state.py#L109'>dual</a>()</tt>	Return the dual state of this one.
<tt style='background-color:#E8E8E8;'> physics.quantum.StateBase <a href=' /physics/quantum/state.py#L114'>dual_class</a>()</tt>	Return the class used to construt the dual.
<tt style='background-color:#E8E8E8;'> physics.quantum.StateBase <a href=' /physics/quantum/state.py#L121'>_eval_adjoint</a>()</tt>	Compute the dagger of this state using the dual.
<tt style='background-color:#E8E8E8;'> physics.quantum.KetBase <a href=' /physics/quantum/state.py#L236'>_eval_innerproduct</a>(bra)</tt>	Evaluate the inner product betweeen this ket and a bra.
<tt style='background-color:#E8E8E8;'> physics.quantum.KetBase <a href=' /physics/quantum/state.py#L250'>_apply_operator</a>(op)</tt>	Apply an operator to this ket.
<tt style='background-color:#E8E8E8;'> physics.quantum.BraBase <a href=' /physics/quantum/state.py#L323'>_represent</a>()</tt>	A default represent that uses the ket's version.
<tt style='background-color:#E8E8E8;'> physics.quantum.TimeDepState <a href=' /physics/quantum/state.py#L493'>label</a>()</tt>	The label of the state.
<tt style='background-color:#E8E8E8;'> physics.quantum.TimeDepState <a href=' /physics/quantum/state.py#L498'>time</a>()</tt>	The time of the state.
<tt style='background-color:#E8E8E8;'> physics.quantum.Wavefunction <a href=' /physics/quantum/state.py#L771'>is_commutative</a>()</tt>	Override function's is_commutative so that order is preserved in.
<tt style='background-color:#E8E8E8;'> physics.quantum.Wavefunction <a href=' /physics/quantum/state.py#L783'>variables</a>()</tt>	Return the coordinates which the wavefunction depends on examples.
<tt style='background-color:#E8E8E8;'> physics.quantum.Wavefunction <a href=' /physics/quantum/state.py#L805'>limits</a>()</tt>	Return the limits of the coordinates which the w f depends on if no.
<tt style='background-color:#E8E8E8;'> physics.quantum.Wavefunction <a href=' /physics/quantum/state.py#L832'>expr</a>()</tt>	Return the expression which is the functional form of the wavefunction examples.
<tt style='background-color:#E8E8E8;'> physics.quantum.Wavefunction <a href=' /physics/quantum/state.py#L850'>is_normalized</a>()</tt>	Returns true if the wavefunction is properly normalized examples.
<tt style='background-color:#E8E8E8;'> physics.quantum.Wavefunction <a href=' /physics/quantum/state.py#L872'>norm</a>()</tt>	Return the normalization of the specified functional form.
<tt style='background-color:#E8E8E8;'> physics.quantum.Wavefunction <a href=' /physics/quantum/state.py#L910'>normalize</a>()</tt>	Return a normalized version of the wavefunction examples.
<tt style='background-color:#E8E8E8;'> physics.quantum.Wavefunction <a href=' /physics/quantum/state.py#L936'>prob</a>()</tt>	Return the absolute magnitude of the w f |\psi x |^2.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/represent.py#L38'>_sympy_to_scalar</a>(e)</tt>	Convert from a sympy scalar to a python scalar.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/represent.py#L52'>represent</a>(expr)</tt>	Represent the quantum expression in the given basis.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/represent.py#L233'>rep_innerproduct</a>(expr)</tt>	Returns an innerproduct like representation (e g <x'|x>) for the.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/represent.py#L289'>rep_expectation</a>(expr)</tt>	Returns an <x'|a|x> type representation for the given operator.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/represent.py#L332'>integrate_result</a>(orig_expr,result)</tt>	Returns the result of integrating over any unities (|x><x|) in the given expression.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/represent.py#L407'>get_basis</a>(expr)</tt>	Returns a basis state instance corresponding to the basis specified in options=s.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/represent.py#L500'>enumerate_states</a>()</tt>	Returns instances of the given state with dummy indices appended operates in two different modes.
<tt style='background-color:#E8E8E8;'> physics.quantum.CMod <a href=' /physics/quantum/shor.py#L48'>t</a>()</tt>	Size of 1/2 input register first 1/2 holds output.
<tt style='background-color:#E8E8E8;'> physics.quantum.CMod <a href=' /physics/quantum/shor.py#L53'>a</a>()</tt>	Base of the controlled mod function.
<tt style='background-color:#E8E8E8;'> physics.quantum.CMod <a href=' /physics/quantum/shor.py#L58'>N</a>()</tt>	N is the type of modular arithmetic we are doing.
<tt style='background-color:#E8E8E8;'> physics.quantum.CMod <a href=' /physics/quantum/shor.py#L63'>_apply_operator_Qubit</a>(qubits)</tt>	This directly calculates the controlled mod of the second half of.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/shor.py#L89'>shor</a>(N)</tt>	This function implements shor's factoring algorithm on the integer n the algorithm starts by picking a random number a and seeing if it is.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/shor.py#L129'>period_find</a>(a,N)</tt>	Finds the period of a in modulo n arithmetic this is quantum part of shor's algorithm.
<tt style='background-color:#E8E8E8;'> physics.quantum.QubitState <a href=' /physics/quantum/qubit.py#L83'>dimension</a>()</tt>	The number of qubits in the state.
<tt style='background-color:#E8E8E8;'> physics.quantum.QubitState <a href=' /physics/quantum/qubit.py#L92'>qubit_values</a>()</tt>	Returns the values of the qubits as a tuple.
<tt style='background-color:#E8E8E8;'> physics.quantum.QubitState <a href=' /physics/quantum/qubit.py#L111'>flip</a>()</tt>	Flip the bit s given.
<tt style='background-color:#E8E8E8;'> physics.quantum.Qubit <a href=' /physics/quantum/qubit.py#L191'>_represent_ZGate</a>(basis)</tt>	Represent this qubits in the computational basis zgate.
<tt style='background-color:#E8E8E8;'> physics.quantum.Qubit <a href=' /physics/quantum/qubit.py#L233'>_reduced_density</a>(matrix,qubit)</tt>	Compute the reduced density matrix by tracing out one qubit.
<tt style='background-color:#E8E8E8;'> physics.quantum.IntQubitState <a href=' /physics/quantum/qubit.py#L308'>as_int</a>()</tt>	Return the numerical value of the qubit.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qubit.py#L396'>matrix_to_qubit</a>(matrix)</tt>	Convert from the matrix repr to a sum of qubit objects.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qubit.py#L467'>matrix_to_density</a>(mat)</tt>	Works by finding the eigenvectors and eigenvalues of the matrix.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qubit.py#L483'>qubit_to_matrix</a>(qubit,format)</tt>	Converts an add/mul of qubit objects into it's matrix representation this function is the inverse of matrix_to_qubit and is a shorthand.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qubit.py#L497'>measure_all</a>(qubit,format,normalize)</tt>	Perform an ensemble measurement of all qubits.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qubit.py#L553'>measure_partial</a>(qubit,bits,format,normalize)</tt>	Perform a partial ensemble measure on the specifed qubits.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qubit.py#L628'>measure_partial_oneshot</a>(qubit,bits,format)</tt>	Perform a partial oneshot measurement on the specified qubits.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qubit.py#L676'>_get_possible_outcomes</a>(m,bits)</tt>	Get the possible states that can be produced in a measurement.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qubit.py#L727'>measure_all_oneshot</a>(qubit,format)</tt>	Perform a oneshot ensemble measurement on all qubits.
<tt style='background-color:#E8E8E8;'> physics.quantum.Density <a href=' /physics/quantum/density.py#L53'>states</a>()</tt>	Return list of all states.
<tt style='background-color:#E8E8E8;'> physics.quantum.Density <a href=' /physics/quantum/density.py#L68'>probs</a>()</tt>	Return list of all probabilities.
<tt style='background-color:#E8E8E8;'> physics.quantum.Density <a href=' /physics/quantum/density.py#L83'>get_state</a>(index)</tt>	Return specfic state by index.
<tt style='background-color:#E8E8E8;'> physics.quantum.Density <a href=' /physics/quantum/density.py#L104'>get_prob</a>(index)</tt>	Return probability of specific state by index.
<tt style='background-color:#E8E8E8;'> physics.quantum.Density <a href=' /physics/quantum/density.py#L125'>apply_op</a>(op)</tt>	Op will operate on each individual state.
<tt style='background-color:#E8E8E8;'> physics.quantum.Density <a href=' /physics/quantum/density.py#L148'>doit</a>()</tt>	Expand the density operator into an outer product format.
<tt style='background-color:#E8E8E8;'> physics.quantum.Density <a href=' /physics/quantum/density.py#L210'>entropy</a>()</tt>	Compute the entropy of a density matrix.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/density.py#L218'>entropy</a>(density)</tt>	Compute the entropy of a matrix/density object.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/density.py#L264'>fidelity</a>(state1,state2)</tt>	Computes the fidelity [1]_ between two quantum states the arguments provided to this function should be a square matrix or a.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/circuitutils.py#L21'>kmp_table</a>(word)</tt>	Build the 'partial match' table of the knuth-morris-pratt algorithm.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/circuitutils.py#L53'>find_subcircuit</a>(circuit,subcircuit,start,end)</tt>	Finds the subcircuit in circuit if it exists.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/circuitutils.py#L138'>replace_subcircuit</a>(circuit,subcircuit,replace,pos)</tt>	Replaces a subcircuit with another subcircuit in circuit if it exists.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/circuitutils.py#L227'>convert_to_symbolic_indices</a>(seq,start,gen,qubit_map)</tt>	Returns the circuit with symbolic indices and the dictionary mapping symbolic indices to real indices.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/circuitutils.py#L324'>convert_to_real_indices</a>(seq,qubit_map)</tt>	Returns the circuit with real indices.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/circuitutils.py#L377'>random_reduce</a>(circuit,gate_ids,seed)</tt>	Shorten the length of a quantum circuit.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/circuitutils.py#L424'>random_insert</a>(circuit,choices,seed)</tt>	Insert a circuit into another quantum circuit.
<tt style='background-color:#E8E8E8;'> physics.quantum.MatrixCache <a href=' /physics/quantum/matrixcache.py#L25'>cache_matrix</a>(name,m)</tt>	Cache a matrix by its name.
<tt style='background-color:#E8E8E8;'> physics.quantum.MatrixCache <a href=' /physics/quantum/matrixcache.py#L48'>get_matrix</a>(name,format)</tt>	Get a cached matrix by name and format.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/gate.py#L91'>normalized</a>(normalize)</tt>	Set flag controlling normalization of hadamard gates by 1/sqrt 2.
<tt style='background-color:#E8E8E8;'> physics.quantum.Gate <a href=' /physics/quantum/gate.py#L153'>_eval_hilbert_space</a>(cls,args)</tt>	This returns the smallest possible hilbert space.
<tt style='background-color:#E8E8E8;'> physics.quantum.Gate <a href=' /physics/quantum/gate.py#L162'>nqubits</a>()</tt>	The total number of qubits this gate acts on.
<tt style='background-color:#E8E8E8;'> physics.quantum.Gate <a href=' /physics/quantum/gate.py#L171'>min_qubits</a>()</tt>	The minimum number of qubits this gate needs to act on.
<tt style='background-color:#E8E8E8;'> physics.quantum.Gate <a href=' /physics/quantum/gate.py#L176'>targets</a>()</tt>	A tuple of target qubits.
<tt style='background-color:#E8E8E8;'> physics.quantum.Gate <a href=' /physics/quantum/gate.py#L189'>get_target_matrix</a>(format)</tt>	The matrix rep of the target part of the gate.
<tt style='background-color:#E8E8E8;'> physics.quantum.Gate <a href=' /physics/quantum/gate.py#L204'>_apply_operator_IntQubit</a>(qubits)</tt>	Redirect an apply from intqubit to qubit.
<tt style='background-color:#E8E8E8;'> physics.quantum.Gate <a href=' /physics/quantum/gate.py#L208'>_apply_operator_Qubit</a>(qubits)</tt>	Apply this gate to a qubit.
<tt style='background-color:#E8E8E8;'> physics.quantum.CGate <a href=' /physics/quantum/gate.py#L345'>_eval_hilbert_space</a>(cls,args)</tt>	This returns the smallest possible hilbert space.
<tt style='background-color:#E8E8E8;'> physics.quantum.CGate <a href=' /physics/quantum/gate.py#L354'>nqubits</a>()</tt>	The total number of qubits this gate acts on.
<tt style='background-color:#E8E8E8;'> physics.quantum.CGate <a href=' /physics/quantum/gate.py#L363'>min_qubits</a>()</tt>	The minimum number of qubits this gate needs to act on.
<tt style='background-color:#E8E8E8;'> physics.quantum.CGate <a href=' /physics/quantum/gate.py#L368'>targets</a>()</tt>	A tuple of target qubits.
<tt style='background-color:#E8E8E8;'> physics.quantum.CGate <a href=' /physics/quantum/gate.py#L373'>controls</a>()</tt>	A tuple of control qubits.
<tt style='background-color:#E8E8E8;'> physics.quantum.CGate <a href=' /physics/quantum/gate.py#L378'>gate</a>()</tt>	The non-controlled gate that will be applied to the targets.
<tt style='background-color:#E8E8E8;'> physics.quantum.CGate <a href=' /physics/quantum/gate.py#L390'>eval_controls</a>(qubit)</tt>	Return true/false to indicate if the controls are satisfied.
<tt style='background-color:#E8E8E8;'> physics.quantum.CGate <a href=' /physics/quantum/gate.py#L394'>decompose</a>()</tt>	Decompose the controlled gate into cnot and single qubits gates.
<tt style='background-color:#E8E8E8;'> physics.quantum.CGate <a href=' /physics/quantum/gate.py#L438'>plot_gate</a>(circ_plot,gate_idx)</tt>	Plot the controlled gate if *simplify_cgate* is true simplify.
<tt style='background-color:#E8E8E8;'> physics.quantum.UGate <a href=' /physics/quantum/gate.py#L527'>_eval_hilbert_space</a>(cls,args)</tt>	This returns the smallest possible hilbert space.
<tt style='background-color:#E8E8E8;'> physics.quantum.UGate <a href=' /physics/quantum/gate.py#L536'>targets</a>()</tt>	A tuple of target qubits.
<tt style='background-color:#E8E8E8;'> physics.quantum.UGate <a href=' /physics/quantum/gate.py#L545'>get_target_matrix</a>(format)</tt>	The matrix rep of the target part of the gate.
<tt style='background-color:#E8E8E8;'> physics.quantum.CNotGate <a href=' /physics/quantum/gate.py#L882'>_eval_hilbert_space</a>(cls,args)</tt>	This returns the smallest possible hilbert space.
<tt style='background-color:#E8E8E8;'> physics.quantum.CNotGate <a href=' /physics/quantum/gate.py#L891'>min_qubits</a>()</tt>	The minimum number of qubits this gate needs to act on.
<tt style='background-color:#E8E8E8;'> physics.quantum.CNotGate <a href=' /physics/quantum/gate.py#L896'>targets</a>()</tt>	A tuple of target qubits.
<tt style='background-color:#E8E8E8;'> physics.quantum.CNotGate <a href=' /physics/quantum/gate.py#L901'>controls</a>()</tt>	A tuple of control qubits.
<tt style='background-color:#E8E8E8;'> physics.quantum.CNotGate <a href=' /physics/quantum/gate.py#L906'>gate</a>()</tt>	The non-controlled gate that will be applied to the targets.
<tt style='background-color:#E8E8E8;'> physics.quantum.CNotGate <a href=' /physics/quantum/gate.py#L931'>_eval_commutator_ZGate</a>(other)</tt>	[cnot i j z i ] == 0.
<tt style='background-color:#E8E8E8;'> physics.quantum.CNotGate <a href=' /physics/quantum/gate.py#L938'>_eval_commutator_TGate</a>(other)</tt>	[cnot i j t i ] == 0.
<tt style='background-color:#E8E8E8;'> physics.quantum.CNotGate <a href=' /physics/quantum/gate.py#L942'>_eval_commutator_PhaseGate</a>(other)</tt>	[cnot i j s i ] == 0.
<tt style='background-color:#E8E8E8;'> physics.quantum.CNotGate <a href=' /physics/quantum/gate.py#L946'>_eval_commutator_XGate</a>(other)</tt>	[cnot i j x j ] == 0.
<tt style='background-color:#E8E8E8;'> physics.quantum.CNotGate <a href=' /physics/quantum/gate.py#L953'>_eval_commutator_CNotGate</a>(other)</tt>	[cnot i j cnot i k ] == 0.
<tt style='background-color:#E8E8E8;'> physics.quantum.SwapGate <a href=' /physics/quantum/gate.py#L981'>decompose</a>()</tt>	Decompose the swap gate into cnot gates.
<tt style='background-color:#E8E8E8;'> physics.quantum.SwapGate <a href=' /physics/quantum/gate.py#L995'>_represent_ZGate</a>(basis)</tt>	Represent the swap gate in the computational basis.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/gate.py#L1039'>represent_zbasis</a>(controls,targets,target_matrix,nqubits)</tt>	Represent a gate with controls targets and target_matrix.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/gate.py#L1124'>gate_simp</a>(circuit)</tt>	Simplifies gates symbolically it first sorts gates using gate_sort.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/gate.py#L1193'>gate_sort</a>(circuit)</tt>	Sorts the gates while keeping track of commutation relations this function uses a bubble sort to rearrange the order of gate.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/gate.py#L1252'>random_circuit</a>(ngates,nqubits,gate_space)</tt>	Return a random circuit of ngates and nqubits.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/gate.py#L1283'>zx_basis_transform</a>(format)</tt>	Transformation matrix from z to x basis.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/gate.py#L1288'>zy_basis_transform</a>(format)</tt>	Transformation matrix from z to y basis.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/grover.py#L32'>superposition_basis</a>(nqubits)</tt>	Creates an equal superposition of the computational basis.
<tt style='background-color:#E8E8E8;'> physics.quantum.OracleGate <a href=' /physics/quantum/grover.py#L117'>_eval_hilbert_space</a>(cls,args)</tt>	This returns the smallest possible hilbert space.
<tt style='background-color:#E8E8E8;'> physics.quantum.OracleGate <a href=' /physics/quantum/grover.py#L126'>search_function</a>()</tt>	The unknown function that helps find the sought after qubits.
<tt style='background-color:#E8E8E8;'> physics.quantum.OracleGate <a href=' /physics/quantum/grover.py#L131'>targets</a>()</tt>	A tuple of target qubits.
<tt style='background-color:#E8E8E8;'> physics.quantum.OracleGate <a href=' /physics/quantum/grover.py#L140'>_apply_operator_Qubit</a>(qubits)</tt>	Apply this operator to a qubit subclass.
<tt style='background-color:#E8E8E8;'> physics.quantum.OracleGate <a href=' /physics/quantum/grover.py#L171'>_represent_ZGate</a>(basis)</tt>	Represent the oraclegate in the computational basis.
<tt style='background-color:#E8E8E8;'> physics.quantum.WGate <a href=' /physics/quantum/grover.py#L225'>_apply_operator_Qubit</a>(qubits)</tt>	Qubits a set of qubits qubit.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/grover.py#L245'>grover_iteration</a>(qstate,oracle)</tt>	Applies one application of the oracle and w gate wv.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/grover.py#L283'>apply_grover</a>(oracle,nqubits,iterations)</tt>	Applies grover's algorithm.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/pauli.py#L513'>_qsimplify_pauli_product</a>(a,b)</tt>	Internal helper function for simplifying products of pauli operators.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/pauli.py#L618'>qsimplify_pauli</a>(e)</tt>	Simplify an expression that includes products of pauli operators.
<tt style='background-color:#E8E8E8;'> physics.quantum.HilbertSpace <a href=' /physics/quantum/hilbert.py#L63'>dimension</a>()</tt>	Return the hilbert dimension of the space.
<tt style='background-color:#E8E8E8;'> physics.quantum.HilbertSpace <a href=' /physics/quantum/hilbert.py#L86'>__contains__</a>(other)</tt>	Is the operator or state in this hilbert space.
<tt style='background-color:#E8E8E8;'> physics.quantum.TensorProductHilbertSpace <a href=' /physics/quantum/hilbert.py#L332'>eval</a>(cls,args)</tt>	Evaluates the direct product.
<tt style='background-color:#E8E8E8;'> physics.quantum.TensorProductHilbertSpace <a href=' /physics/quantum/hilbert.py#L385'>spaces</a>()</tt>	A tuple of the hilbert spaces in this tensor product.
<tt style='background-color:#E8E8E8;'> physics.quantum.DirectSumHilbertSpace <a href=' /physics/quantum/hilbert.py#L477'>eval</a>(cls,args)</tt>	Evaluates the direct product.
<tt style='background-color:#E8E8E8;'> physics.quantum.DirectSumHilbertSpace <a href=' /physics/quantum/hilbert.py#L505'>spaces</a>()</tt>	A tuple of the hilbert spaces in this direct sum.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/cg.py#L414'>cg_simp</a>(e)</tt>	Simplify and combine cg coefficients this function uses various symmetry and properties of sums and.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/cg.py#L456'>_cg_simp_add</a>(e)</tt>	Takes a sum of terms involving clebsch-gordan coefficients and simplifies the terms.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/cg.py#L566'>_check_cg_simp</a>(expr,simp,sign,lt)</tt>	Checks for simplifications that can be made returning a tuple of the simplified list of terms and any terms generated by simplification.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/cg.py#L641'>_check_cg</a>(cg_term,expr,length,sign)</tt>	Checks whether a term matches the given expression.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L52'>sympy_to_numpy</a>(m)</tt>	Convert a sympy matrix/complex number to a numpy matrix or scalar.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L65'>sympy_to_scipy_sparse</a>(m)</tt>	Convert a sympy matrix/complex number to a numpy matrix or scalar.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L78'>scipy_sparse_to_sympy</a>(m)</tt>	Convert a scipy sparse matrix to a sympy matrix.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L83'>numpy_to_sympy</a>(m)</tt>	Convert a numpy matrix to a sympy matrix.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L88'>to_sympy</a>(m)</tt>	Convert a numpy/scipy sparse matrix to a sympy matrix.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L101'>to_numpy</a>(m)</tt>	Convert a sympy/scipy sparse matrix to a numpy matrix.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L113'>to_scipy_sparse</a>(m)</tt>	Convert a sympy/numpy matrix to a scipy sparse matrix.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L127'>flatten_scalar</a>(e)</tt>	Flatten a 1x1 matrix to a scalar return larger matrices unchanged.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L138'>matrix_dagger</a>(e)</tt>	Return the dagger of a sympy/numpy/scipy sparse matrix.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L148'>_sympy_tensor_product</a>()</tt>	Compute the tensor product of a sequence of sympy matrices.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L222'>_numpy_tensor_product</a>()</tt>	Numpy version of tensor product of multiple arguments.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L232'>_scipy_sparse_tensor_product</a>()</tt>	Scipy sparse version of tensor product of multiple arguments.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L244'>matrix_tensor_product</a>()</tt>	Compute the matrix tensor product of sympy/numpy/scipy sparse matrices.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L254'>_numpy_eye</a>(n)</tt>	Numpy version of complex eye.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L261'>_scipy_sparse_eye</a>(n)</tt>	Scipy sparse version of complex eye.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L268'>matrix_eye</a>(n)</tt>	Get the version of eye and tensor_product for a given format.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L280'>_numpy_zeros</a>(m,n)</tt>	Numpy verson of zeros.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L288'>_scipy_sparse_zeros</a>(m,n)</tt>	Scipy sparse verson of zeros.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L300'>matrix_zeros</a>(m,n)</tt>	"get a zeros matrix for a given format.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L314'>_numpy_matrix_to_zero</a>(e)</tt>	Convert a numpy zero matrix to the zero scalar.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L325'>_scipy_sparse_matrix_to_zero</a>(e)</tt>	Convert a scipy sparse zero matrix to the zero scalar.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/matrixutils.py#L337'>matrix_to_zero</a>(e)</tt>	Convert a zero matrix to the scalar zero.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/circuitplot.py#L309'>render_label</a>(label,inits)</tt>	Slightly more flexible way to render labels.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/circuitplot.py#L323'>labeller</a>(n,symbol)</tt>	Autogenerate labels for wires of quantum circuits.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/circuitplot.py#L368'>CreateCGate</a>(name,latexname)</tt>	Use a lexical closure to make a controlled gate.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/tensorproduct.py#L33'>combined_tensor_printing</a>(combined)</tt>	Set flag controlling whether tensor products of states should be printed as a combined bra/ket or as an explicit tensor product of different.
<tt style='background-color:#E8E8E8;'> physics.quantum.TensorProduct <a href=' /physics/quantum/tensorproduct.py#L241'>_eval_expand_tensorproduct</a>()</tt>	Distribute tensorproducts across addition.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/tensorproduct.py#L271'>tensor_product_simp_Mul</a>(e)</tt>	Simplify a mul with tensorproducts.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/tensorproduct.py#L348'>tensor_product_simp</a>(e)</tt>	Try to simplify and combine tensorproducts.
<tt style='background-color:#E8E8E8;'> physics.quantum.Fourier <a href=' /physics/quantum/qft.py#L111'>_represent_ZGate</a>(basis)</tt>	Represents the i qft in the z basis.
<tt style='background-color:#E8E8E8;'> physics.quantum.Fourier <a href=' /physics/quantum/qft.py#L148'>size</a>()</tt>	Size is the size of the qft matrix.
<tt style='background-color:#E8E8E8;'> physics.quantum.QFT <a href=' /physics/quantum/qft.py#L164'>decompose</a>()</tt>	Decomposes qft into elementary gates.
<tt style='background-color:#E8E8E8;'> physics.quantum.IQFT <a href=' /physics/quantum/qft.py#L194'>decompose</a>()</tt>	Decomposes iqft into elementary gates.
<tt style='background-color:#E8E8E8;'> physics.quantum.Rotation <a href=' /physics/quantum/spin.py#L556'>d</a>(cls,j,m,mp)</tt>	Wigner small-d function.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/spin.py#L1785'>couple</a>(expr,jcoupling_list)</tt>	Couple a tensor product of spin states this function can be used to couple an uncoupled tensor product of spin.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/spin.py#L1968'>uncouple</a>(expr,jn,jcoupling_list)</tt>	Uncouple a coupled spin state gives the uncoupled representation of a coupled spin state.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qasm.py#L38'>flip_index</a>(i,n)</tt>	Reorder qubit indices from largest to smallest.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qasm.py#L49'>trim</a>(line)</tt>	Remove everything following comment # characters in line.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qasm.py#L62'>get_index</a>(target,labels)</tt>	Get qubit labels from the rest of the line and return indices >>> from sympy.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qasm.py#L90'>fixcommand</a>(c)</tt>	Fix qasm command names.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qasm.py#L104'>stripquotes</a>(s)</tt>	Replace explicit quotes in a string.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/identitysearch.py#L31'>is_scalar_sparse_matrix</a>(circuit,nqubits,identity_only,eps)</tt>	Checks if a given scipy sparse matrix is a scalar matrix.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/identitysearch.py#L119'>is_scalar_nonsparse_matrix</a>(circuit,nqubits,identity_only)</tt>	Checks if a given circuit in matrix form is equivalent to a scalar value.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/identitysearch.py#L176'>ll_op</a>(left,right)</tt>	Perform a ll operation.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/identitysearch.py#L227'>lr_op</a>(left,right)</tt>	Perform a lr operation.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/identitysearch.py#L278'>rl_op</a>(left,right)</tt>	Perform a rl operation.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/identitysearch.py#L329'>rr_op</a>(left,right)</tt>	Perform a rr operation.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/identitysearch.py#L380'>generate_gate_rules</a>(gate_seq,return_as_muls)</tt>	Returns a set of gate rules each gate rules is represented.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/identitysearch.py#L525'>generate_equivalent_ids</a>(gate_seq,return_as_muls)</tt>	Returns a set of equivalent gate identities.
<tt style='background-color:#E8E8E8;'> physics.quantum.GateIdentity <a href=' /physics/quantum/identitysearch.py#L660'>__str__</a>()</tt>	Returns the string of gates in a tuple.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/identitysearch.py#L665'>is_degenerate</a>(identity_set,gate_identity)</tt>	Checks if a gate identity is a permutation of another identity.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/identitysearch.py#L704'>is_reducible</a>(circuit,nqubits,begin,end)</tt>	Determines if a circuit is reducible by checking if its subcircuits are scalar values.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/identitysearch.py#L755'>bfs_identity_search</a>(gate_list,nqubits,max_depth,identity_only)</tt>	Constructs a set of gate identities from the list of possible gates.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/identitysearch.py#L833'>random_identity_search</a>(gate_list,numgates,nqubits)</tt>	Randomly selects numgates from gate_list and checks if it is a gate identity.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qexpr.py#L28'>_qsympify_sequence</a>(seq)</tt>	Convert elements of a sequence to standard form.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qexpr.py#L55'>__qsympify_sequence_helper</a>(seq)</tt>	Helper function for _qsympify_sequence this function does the actual work.
<tt style='background-color:#E8E8E8;'> physics.quantum.QExpr <a href=' /physics/quantum/qexpr.py#L103'>__new__</a>(cls)</tt>	Construct a new quantum object.
<tt style='background-color:#E8E8E8;'> physics.quantum.QExpr <a href=' /physics/quantum/qexpr.py#L140'>_new_rawargs</a>(cls,hilbert_space)</tt>	Create new instance of this class with hilbert_space and args.
<tt style='background-color:#E8E8E8;'> physics.quantum.QExpr <a href=' /physics/quantum/qexpr.py#L159'>label</a>()</tt>	The label is the unique set of identifiers for the object.
<tt style='background-color:#E8E8E8;'> physics.quantum.QExpr <a href=' /physics/quantum/qexpr.py#L177'>default_args</a>()</tt>	If no arguments are specified then this will return a default set of arguments to be run through the constructor.
<tt style='background-color:#E8E8E8;'> physics.quantum.QExpr <a href=' /physics/quantum/qexpr.py#L199'>_eval_args</a>(cls,args)</tt>	Process the args passed to the __new__ method.
<tt style='background-color:#E8E8E8;'> physics.quantum.QExpr <a href=' /physics/quantum/qexpr.py#L207'>_eval_hilbert_space</a>(cls,args)</tt>	Compute the hilbert space instance from the args.
<tt style='background-color:#E8E8E8;'> physics.quantum.QExpr <a href=' /physics/quantum/qexpr.py#L248'>_print_label</a>(printer)</tt>	Prints the label of the qexpr this method prints self.
<tt style='background-color:#E8E8E8;'> physics.quantum.QExpr <a href=' /physics/quantum/qexpr.py#L276'>_print_contents</a>(printer)</tt>	Printer for contents of qexpr handles the printing of any unique identifying contents of a qexpr to.
<tt style='background-color:#E8E8E8;'> physics.quantum.QExpr <a href=' /physics/quantum/qexpr.py#L294'>_sympystr</a>(printer)</tt>	Default printing behavior of qexpr objects handles the default printing of a qexpr.
<tt style='background-color:#E8E8E8;'> physics.quantum.QExpr <a href=' /physics/quantum/qexpr.py#L351'>_represent</a>()</tt>	Represent this object in a given basis.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qexpr.py#L408'>split_commutative_parts</a>(e)</tt>	Split into commutative and non-commutative parts.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qexpr.py#L415'>split_qexpr_parts</a>(e)</tt>	Split an expression into expr and noncommutative qexpr parts.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qexpr.py#L427'>dispatch_method</a>(basename,arg)</tt>	Dispatch a method to the proper handlers.
<tt style='background-color:#E8E8E8;'> physics.quantum.XKet <a href=' /physics/quantum/cartesian.py#L162'>position</a>()</tt>	The position of the state.
<tt style='background-color:#E8E8E8;'> physics.quantum.XBra <a href=' /physics/quantum/cartesian.py#L188'>position</a>()</tt>	The position of the state.
<tt style='background-color:#E8E8E8;'> physics.quantum.PositionState3D <a href=' /physics/quantum/cartesian.py#L209'>position_x</a>()</tt>	The x coordinate of the state.
<tt style='background-color:#E8E8E8;'> physics.quantum.PositionState3D <a href=' /physics/quantum/cartesian.py#L214'>position_y</a>()</tt>	The y coordinate of the state.
<tt style='background-color:#E8E8E8;'> physics.quantum.PositionState3D <a href=' /physics/quantum/cartesian.py#L219'>position_z</a>()</tt>	The z coordinate of the state.
<tt style='background-color:#E8E8E8;'> physics.quantum.PxKet <a href=' /physics/quantum/cartesian.py#L271'>momentum</a>()</tt>	The momentum of the state.
<tt style='background-color:#E8E8E8;'> physics.quantum.PxBra <a href=' /physics/quantum/cartesian.py#L297'>momentum</a>()</tt>	The momentum of the state.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/operatorset.py#L49'>operators_to_state</a>(operators)</tt>	Returns the eigenstate of the given operator or set of operators a global function for mapping operator classes to their associated.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/operatorset.py#L150'>state_to_operators</a>(state)</tt>	Returns the operator or set of operators corresponding to the given eigenstate.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/qapply.py#L29'>qapply</a>(e)</tt>	Apply operators to states in a quantum expression.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/operatorordering.py#L17'>_expand_powers</a>(factors)</tt>	Helper function for normal_ordered_form and normal_order expand a power expression to a multiplication expression so that that the.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/operatorordering.py#L37'>_normal_ordered_form_factor</a>(product,independent,recursive_limit,_recursive_depth)</tt>	Helper function for normal_ordered_form_factor write multiplication expression with bosonic or fermionic operators on normally ordered form.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/operatorordering.py#L146'>_normal_ordered_form_terms</a>(expr,independent,recursive_limit,_recursive_depth)</tt>	Helper function for normal_ordered_form loop through each term in an addition expression and call _normal_ordered_form_factor to perform the.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/operatorordering.py#L167'>normal_ordered_form</a>(expr,independent,recursive_limit,_recursive_depth)</tt>	Write an expression with bosonic or fermionic operators on normal ordered form where each term is normally ordered.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/operatorordering.py#L211'>_normal_order_factor</a>(product,recursive_limit,_recursive_depth)</tt>	Helper function for normal_order normal order a multiplication expression with bosonic or fermionic operators.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/operatorordering.py#L271'>_normal_order_terms</a>(expr,recursive_limit,_recursive_depth)</tt>	Helper function for normal_order look through each term in an addition expression and call _normal_order_factor to perform the normal ordering.
<tt style='background-color:#E8E8E8;'> physics.quantum. <a href=' /physics/quantum/operatorordering.py#L291'>normal_order</a>(expr,recursive_limit,_recursive_depth)</tt>	Normal order an expression with bosonic or fermionic operators note.
<tt style='background-color:#E8E8E8;'> physics.hep. <a href=' /physics/hep/gamma_matrices.py#L43'>extract_type_tens</a>(expression,component)</tt>	Extract from a tensexpr all tensors with component.
<tt style='background-color:#E8E8E8;'> physics.hep. <a href=' /physics/hep/gamma_matrices.py#L78'>simplify_gpgp</a>(ex,sort)</tt>	Simplify products g i *p -i *g j *p -j -> p i *p -i examples.
<tt style='background-color:#E8E8E8;'> physics.hep. <a href=' /physics/hep/gamma_matrices.py#L167'>gamma_trace</a>(t)</tt>	Trace of a single line of gamma matrices examples.
<tt style='background-color:#E8E8E8;'> physics.hep. <a href=' /physics/hep/gamma_matrices.py#L197'>_simplify_single_line</a>(expression)</tt>	Simplify single-line product of gamma matrices.
<tt style='background-color:#E8E8E8;'> physics.hep. <a href=' /physics/hep/gamma_matrices.py#L220'>_trace_single_line</a>(t)</tt>	Evaluate the trace of a single gamma matrix line inside a tensexpr.
<tt style='background-color:#E8E8E8;'> physics.hep. <a href=' /physics/hep/gamma_matrices.py#L333'>kahane_simplify</a>(expression)</tt>	This function cancels contracted elements in a product of four dimensional gamma matrices resulting in an expression equal to the given.
<tt style='background-color:#E8E8E8;'> physics.units.Dimension <a href=' /physics/units/dimensions.py#L112'>__str__</a>()</tt>	Display the string representation of the dimension.
<tt style='background-color:#E8E8E8;'> physics.units.Dimension <a href=' /physics/units/dimensions.py#L134'>__add__</a>(other)</tt>	Define the addition for dimension.
<tt style='background-color:#E8E8E8;'> physics.units.Dimension <a href=' /physics/units/dimensions.py#L214'>is_dimensionless</a>()</tt>	Check if the dimension object really has a dimension.
<tt style='background-color:#E8E8E8;'> physics.units.Dimension <a href=' /physics/units/dimensions.py#L224'>has_integer_powers</a>()</tt>	Check if the dimension object has only integer powers.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L336'>__init__</a>(base,dims,name,descr)</tt>	Initialize the dimension system.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L358'>__str__</a>()</tt>	Return the name of the system.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L374'>__getitem__</a>(key)</tt>	Shortcut to the get_dim method using key access.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L387'>__call__</a>(unit)</tt>	Wrapper to the method print_dim_base.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L394'>get_dim</a>(dim)</tt>	Find a specific dimension which is part of the system.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L422'>extend</a>(base,dims,name,description)</tt>	Extend the current system into a new one.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L436'>sort_dims</a>(dims)</tt>	Sort dimensions given in argument using their str function.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L447'>list_can_dims</a>()</tt>	List all canonical dimension names.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L457'>inv_can_transf_matrix</a>()</tt>	Compute the inverse transformation matrix from the base to the canonical dimension basis.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L478'>can_transf_matrix</a>()</tt>	Return the canonical transformation matrix from the canonical to the base dimension basis.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L493'>dim_can_vector</a>(dim)</tt>	Dimensional representation in terms of the canonical base dimensions.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L504'>dim_vector</a>(dim)</tt>	Vector representation in terms of the base dimensions.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L510'>print_dim_base</a>(dim)</tt>	Give the string expression of a dimension in term of the basis symbols.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L521'>dim</a>()</tt>	Give the dimension of the system.
<tt style='background-color:#E8E8E8;'> physics.units.DimensionSystem <a href=' /physics/units/dimensions.py#L531'>is_consistent</a>()</tt>	Check if the system is well defined.
<tt style='background-color:#E8E8E8;'> physics.units. <a href=' /physics/units/util.py#L17'>dim_simplify</a>(expr)</tt>	Note this function could be deprecated in the future.
<tt style='background-color:#E8E8E8;'> physics.units. <a href=' /physics/units/util.py#L79'>convert_to</a>(expr,target_units)</tt>	Convert expr to the same expression with all of its units and quantities represented as factors of target_units, whenever the dimension is compatible.
<tt style='background-color:#E8E8E8;'> physics.units.UnitSystem <a href=' /physics/units/unitsystem.py#L48'>__str__</a>()</tt>	Return the name of the system.
<tt style='background-color:#E8E8E8;'> physics.units.UnitSystem <a href=' /physics/units/unitsystem.py#L64'>__getitem__</a>(key)</tt>	Shortcut to the get_unit method using key access.
<tt style='background-color:#E8E8E8;'> physics.units.UnitSystem <a href=' /physics/units/unitsystem.py#L77'>extend</a>(base,units,name,description)</tt>	Extend the current system into a new one.
<tt style='background-color:#E8E8E8;'> physics.units.UnitSystem <a href=' /physics/units/unitsystem.py#L91'>print_unit_base</a>(unit)</tt>	Give the string expression of a unit in term of the basis.
<tt style='background-color:#E8E8E8;'> physics.units.UnitSystem <a href=' /physics/units/unitsystem.py#L116'>dim</a>()</tt>	Give the dimension of the system.
<tt style='background-color:#E8E8E8;'> physics.units.UnitSystem <a href=' /physics/units/unitsystem.py#L126'>is_consistent</a>()</tt>	Check if the underlying dimension system is consistent.
<tt style='background-color:#E8E8E8;'> physics.units.Quantity <a href=' /physics/units/quantities.py#L69'>abbrev</a>()</tt>	Symbol representing the unit name.
<tt style='background-color:#E8E8E8;'> physics.units.Quantity <a href=' /physics/units/quantities.py#L78'>scale_factor</a>()</tt>	Overall magnitude of the quantity as compared to the canonical units.
<tt style='background-color:#E8E8E8;'> physics.units.Quantity <a href=' /physics/units/quantities.py#L124'>convert_to</a>(other)</tt>	Convert the quantity to another quantity of same dimensions.
<tt style='background-color:#E8E8E8;'> physics.units. <a href=' /physics/units/prefixes.py#L112'>prefix_unit</a>(unit,prefixes)</tt>	Return a list of all units formed by unit and the given prefixes.
<tt style='background-color:#E8E8E8;'> physics.units. <a href=' /physics/units/__init__.py#L186'>find_unit</a>(quantity)</tt>	Return a list of matching units or dimension names.
<tt style='background-color:#E8E8E8;'> physics.optics.RayTransferMatrix <a href=' /physics/optics/gaussopt.py#L139'>A</a>()</tt>	The a parameter of the matrix.
<tt style='background-color:#E8E8E8;'> physics.optics.RayTransferMatrix <a href=' /physics/optics/gaussopt.py#L154'>B</a>()</tt>	The b parameter of the matrix.
<tt style='background-color:#E8E8E8;'> physics.optics.RayTransferMatrix <a href=' /physics/optics/gaussopt.py#L169'>C</a>()</tt>	The c parameter of the matrix.
<tt style='background-color:#E8E8E8;'> physics.optics.RayTransferMatrix <a href=' /physics/optics/gaussopt.py#L184'>D</a>()</tt>	The d parameter of the matrix.
<tt style='background-color:#E8E8E8;'> physics.optics.GeometricRay <a href=' /physics/optics/gaussopt.py#L430'>height</a>()</tt>	The distance from the optical axis.
<tt style='background-color:#E8E8E8;'> physics.optics.GeometricRay <a href=' /physics/optics/gaussopt.py#L447'>angle</a>()</tt>	The angle with the optical axis.
<tt style='background-color:#E8E8E8;'> physics.optics.BeamParameter <a href=' /physics/optics/gaussopt.py#L536'>q</a>()</tt>	The complex parameter representing the beam.
<tt style='background-color:#E8E8E8;'> physics.optics.BeamParameter <a href=' /physics/optics/gaussopt.py#L551'>radius</a>()</tt>	The radius of curvature of the phase front.
<tt style='background-color:#E8E8E8;'> physics.optics.BeamParameter <a href=' /physics/optics/gaussopt.py#L566'>w</a>()</tt>	The beam radius at 1/e^2 intensity.
<tt style='background-color:#E8E8E8;'> physics.optics.BeamParameter <a href=' /physics/optics/gaussopt.py#L586'>w_0</a>()</tt>	The beam waist minimal radius.
<tt style='background-color:#E8E8E8;'> physics.optics.BeamParameter <a href=' /physics/optics/gaussopt.py#L606'>divergence</a>()</tt>	Half of the total angular spread.
<tt style='background-color:#E8E8E8;'> physics.optics.BeamParameter <a href=' /physics/optics/gaussopt.py#L621'>gouy</a>()</tt>	The gouy phase.
<tt style='background-color:#E8E8E8;'> physics.optics.BeamParameter <a href=' /physics/optics/gaussopt.py#L636'>waist_approximation_limit</a>()</tt>	The minimal waist for which the gauss beam approximation is valid.
<tt style='background-color:#E8E8E8;'> physics.optics. <a href=' /physics/optics/gaussopt.py#L659'>waist2rayleigh</a>(w,wavelen)</tt>	Calculate the rayleigh range from the waist of a gaussian beam.
<tt style='background-color:#E8E8E8;'> physics.optics. <a href=' /physics/optics/gaussopt.py#L681'>rayleigh2waist</a>(z_r,wavelen)</tt>	Calculate the waist from the rayleigh range of a gaussian beam.
<tt style='background-color:#E8E8E8;'> physics.optics. <a href=' /physics/optics/gaussopt.py#L702'>geometric_conj_ab</a>(a,b)</tt>	Conjugation relation for geometrical beams under paraxial conditions.
<tt style='background-color:#E8E8E8;'> physics.optics. <a href=' /physics/optics/gaussopt.py#L730'>geometric_conj_af</a>(a,f)</tt>	Conjugation relation for geometrical beams under paraxial conditions.
<tt style='background-color:#E8E8E8;'> physics.optics. <a href=' /physics/optics/gaussopt.py#L760'>gaussian_conj</a>(s_in,z_r_in,f)</tt>	Conjugation relation for gaussian beams.
<tt style='background-color:#E8E8E8;'> physics.optics. <a href=' /physics/optics/gaussopt.py#L802'>conjugate_gauss_beams</a>(wavelen,waist_in,waist_out)</tt>	Find the optical setup conjugating the object/image waists.
<tt style='background-color:#E8E8E8;'> physics.optics.Medium <a href=' /physics/optics/medium.py#L88'>intrinsic_impedance</a>()</tt>	Returns intrinsic impedance of the medium.
<tt style='background-color:#E8E8E8;'> physics.optics.Medium <a href=' /physics/optics/medium.py#L111'>speed</a>()</tt>	Returns speed of the electromagnetic wave travelling in the medium.
<tt style='background-color:#E8E8E8;'> physics.optics.Medium <a href=' /physics/optics/medium.py#L127'>refractive_index</a>()</tt>	Returns refractive index of the medium.
<tt style='background-color:#E8E8E8;'> physics.optics.Medium <a href=' /physics/optics/medium.py#L143'>permittivity</a>()</tt>	Returns electric permittivity of the medium.
<tt style='background-color:#E8E8E8;'> physics.optics.Medium <a href=' /physics/optics/medium.py#L159'>permeability</a>()</tt>	Returns magnetic permeability of the medium.
<tt style='background-color:#E8E8E8;'> physics.optics.Medium <a href=' /physics/optics/medium.py#L179'>__lt__</a>(other)</tt>	Compares based on refractive index of the medium.
<tt style='background-color:#E8E8E8;'> physics.optics. <a href=' /physics/optics/utils.py#L30'>refraction_angle</a>(incident,medium1,medium2,normal)</tt>	This function calculates transmitted vector after refraction at planar surface.
<tt style='background-color:#E8E8E8;'> physics.optics. <a href=' /physics/optics/utils.py#L170'>deviation</a>(incident,medium1,medium2,normal)</tt>	This function calculates the angle of deviation of a ray due to refraction at planar surface.
<tt style='background-color:#E8E8E8;'> physics.optics. <a href=' /physics/optics/utils.py#L251'>lens_makers_formula</a>(n_lens,n_surr,r1,r2)</tt>	This function calculates focal length of a thin lens.
<tt style='background-color:#E8E8E8;'> physics.optics. <a href=' /physics/optics/utils.py#L291'>mirror_formula</a>(focal_length,u,v)</tt>	This function provides one of the three parameters when two of them are supplied.
<tt style='background-color:#E8E8E8;'> physics.optics. <a href=' /physics/optics/utils.py#L360'>lens_formula</a>(focal_length,u,v)</tt>	This function provides one of the three parameters when two of them are supplied.
<tt style='background-color:#E8E8E8;'> physics.optics.TWave <a href=' /physics/optics/waves.py#L107'>frequency</a>()</tt>	Returns the frequency of the wave.
<tt style='background-color:#E8E8E8;'> physics.optics.TWave <a href=' /physics/optics/waves.py#L124'>time_period</a>()</tt>	Returns the time period of the wave.
<tt style='background-color:#E8E8E8;'> physics.optics.TWave <a href=' /physics/optics/waves.py#L141'>wavelength</a>()</tt>	Returns wavelength of the wave.
<tt style='background-color:#E8E8E8;'> physics.optics.TWave <a href=' /physics/optics/waves.py#L159'>amplitude</a>()</tt>	Returns the amplitude of the wave.
<tt style='background-color:#E8E8E8;'> physics.optics.TWave <a href=' /physics/optics/waves.py#L176'>phase</a>()</tt>	Returns the phase angle of the wave.
<tt style='background-color:#E8E8E8;'> physics.optics.TWave <a href=' /physics/optics/waves.py#L193'>speed</a>()</tt>	Returns the speed of travelling wave.
<tt style='background-color:#E8E8E8;'> physics.optics.TWave <a href=' /physics/optics/waves.py#L211'>angular_velocity</a>()</tt>	Returns angular velocity of the wave.
<tt style='background-color:#E8E8E8;'> physics.optics.TWave <a href=' /physics/optics/waves.py#L228'>wavenumber</a>()</tt>	Returns wavenumber of the wave.
<tt style='background-color:#E8E8E8;'> physics.optics.TWave <a href=' /physics/optics/waves.py#L245'>__str__</a>()</tt>	String representation of a twave.
<tt style='background-color:#E8E8E8;'> physics.optics.TWave <a href=' /physics/optics/waves.py#L252'>__add__</a>(other)</tt>	Addition of two waves will result in their superposition.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/functions.py#L19'>cross</a>(vec1,vec2)</tt>	Cross product convenience wrapper for vector cross():.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/functions.py#L27'>dot</a>(vec1,vec2)</tt>	Dot product convenience wrapper for vector dot():.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/functions.py#L35'>express</a>(expr,frame,frame2,variables)</tt>	Global function for 'express' functionality.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/functions.py#L136'>time_derivative</a>(expr,frame,order)</tt>	Calculate the time derivative of a vector/scalar field function or dyadic expression in given frame.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/functions.py#L214'>outer</a>(vec1,vec2)</tt>	Outer product convenience wrapper for vector outer():.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/functions.py#L222'>kinematic_equations</a>(speeds,coords,rot_type,rot_order)</tt>	Gives equations relating the qdot's to u's for a rotation type.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/functions.py#L373'>get_motion_params</a>(frame)</tt>	Returns the three motion parameters - acceleration velocity and position as vectorial functions of time in the given frame.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/functions.py#L521'>partial_velocity</a>(vel_vecs,gen_speeds,frame)</tt>	Returns a list of partial velocities with respect to the provided generalized speeds in the given reference frame for each of the supplied.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/functions.py#L575'>dynamicsymbols</a>(names,level)</tt>	Uses symbols and function for functions of time.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/printing.py#L226'>vprint</a>(expr)</tt>	Function for printing of expressions generated in the sympy.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/printing.py#L261'>vsstrrepr</a>(expr)</tt>	Function for displaying expression representation's with vector printing enabled.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/printing.py#L278'>vsprint</a>(expr)</tt>	Function for displaying expressions generated in the sympy.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/printing.py#L309'>vpprint</a>(expr)</tt>	Function for pretty printing of expressions generated in the sympy.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/printing.py#L343'>vlatex</a>(expr)</tt>	Function for printing latex representation of sympy physics vector.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/printing.py#L383'>init_vprinting</a>()</tt>	Initializes time derivative printing for all sympy objects i e any.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/fieldfunctions.py#L12'>curl</a>(vect,frame)</tt>	Returns the curl of a vector field computed wrt the coordinate symbols of the given frame.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/fieldfunctions.py#L56'>divergence</a>(vect,frame)</tt>	Returns the divergence of a vector field computed wrt the coordinate symbols of the given frame.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/fieldfunctions.py#L99'>gradient</a>(scalar,frame)</tt>	Returns the vector gradient of a scalar field computed wrt the coordinate symbols of the given frame.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/fieldfunctions.py#L136'>is_conservative</a>(field)</tt>	Checks if a field is conservative.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/fieldfunctions.py#L168'>is_solenoidal</a>(field)</tt>	Checks if a field is solenoidal.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/fieldfunctions.py#L200'>scalar_potential</a>(field,frame)</tt>	Returns the scalar potential function of a field in a given frame without the added integration constant.
<tt style='background-color:#E8E8E8;'> physics.vector. <a href=' /physics/vector/fieldfunctions.py#L250'>scalar_potential_difference</a>(field,frame,point1,point2)</tt>	Returns the scalar potential difference between two points in a certain frame wrt a given field.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L26'>__init__</a>(inlist)</tt>	This is the constructor for the vector class you shouldn't be.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L58'>__add__</a>(other)</tt>	The add operator for vector.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L63'>__and__</a>(other)</tt>	Dot product of two vectors.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L106'>__div__</a>(other)</tt>	This uses mul and inputs self and 1 divided by other.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L112'>__eq__</a>(other)</tt>	Tests for equality.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L141'>__mul__</a>(other)</tt>	Multiplies the vector by a sympifyable expression.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L174'>__or__</a>(other)</tt>	Outer product between two vectors.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L214'>_latex</a>(printer)</tt>	Latex printing method.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L250'>_pretty</a>(printer)</tt>	Pretty printing method.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L300'>__ror__</a>(other)</tt>	Outer product between two vectors.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L385'>__sub__</a>(other)</tt>	The subraction operator.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L389'>__xor__</a>(other)</tt>	The cross product operator for two vectors.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L456'>separate</a>()</tt>	The constituents of this vector in different reference frames as per its definition.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L493'>diff</a>(var,frame,var_in_dcm)</tt>	Returns the partial derivative of the vector with respect to a variable in the provided reference frame.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L558'>express</a>(otherframe,variables)</tt>	Returns a vector equivalent to this one expressed in otherframe.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L587'>to_matrix</a>(reference_frame)</tt>	Returns the matrix form of the vector with respect to the given frame.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L628'>doit</a>()</tt>	Calls doit() on each term in the vector.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L635'>dt</a>(otherframe)</tt>	Returns a vector which is the time derivative of the self vector taken in frame otherframe.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L652'>simplify</a>()</tt>	Returns a simplified vector.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L659'>subs</a>()</tt>	Substituion on the vector.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L680'>magnitude</a>()</tt>	Returns the magnitude euclidean norm of self.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L684'>normalize</a>()</tt>	Returns a vector of magnitude 1 codirectional with self.
<tt style='background-color:#E8E8E8;'> physics.vector.Vector <a href=' /physics/vector/vector.py#L688'>applyfunc</a>(f)</tt>	Apply a function to each component of a vector.
<tt style='background-color:#E8E8E8;'> physics.vector.Point <a href=' /physics/vector/point.py#L18'>__init__</a>(name)</tt>	Initialization of a point object.
<tt style='background-color:#E8E8E8;'> physics.vector.Point <a href=' /physics/vector/point.py#L35'>_pdict_list</a>(other,num)</tt>	Creates a list from self to other using _dcm_dict.
<tt style='background-color:#E8E8E8;'> physics.vector.Point <a href=' /physics/vector/point.py#L57'>a1pt_theory</a>(otherpoint,outframe,interframe)</tt>	Sets the acceleration of this point with the 1-point theory.
<tt style='background-color:#E8E8E8;'> physics.vector.Point <a href=' /physics/vector/point.py#L112'>a2pt_theory</a>(otherpoint,outframe,fixedframe)</tt>	Sets the acceleration of this point with the 2-point theory.
<tt style='background-color:#E8E8E8;'> physics.vector.Point <a href=' /physics/vector/point.py#L158'>acc</a>(frame)</tt>	The acceleration vector of this point in a referenceframe.
<tt style='background-color:#E8E8E8;'> physics.vector.Point <a href=' /physics/vector/point.py#L187'>locatenew</a>(name,value)</tt>	Creates a new point with a position defined from this point.
<tt style='background-color:#E8E8E8;'> physics.vector.Point <a href=' /physics/vector/point.py#L218'>pos_from</a>(otherpoint)</tt>	Returns a vector distance between this point and the other point.
<tt style='background-color:#E8E8E8;'> physics.vector.Point <a href=' /physics/vector/point.py#L246'>set_acc</a>(frame,value)</tt>	Used to set the acceleration of this point in a referenceframe.
<tt style='background-color:#E8E8E8;'> physics.vector.Point <a href=' /physics/vector/point.py#L275'>set_pos</a>(otherpoint,value)</tt>	Used to set the position of this point w r t another point.
<tt style='background-color:#E8E8E8;'> physics.vector.Point <a href=' /physics/vector/point.py#L306'>set_vel</a>(frame,value)</tt>	Sets the velocity vector of this point in a referenceframe.
<tt style='background-color:#E8E8E8;'> physics.vector.Point <a href=' /physics/vector/point.py#L335'>v1pt_theory</a>(otherpoint,outframe,interframe)</tt>	Sets the velocity of this point with the 1-point theory.
<tt style='background-color:#E8E8E8;'> physics.vector.Point <a href=' /physics/vector/point.py#L386'>v2pt_theory</a>(otherpoint,outframe,fixedframe)</tt>	Sets the velocity of this point with the 2-point theory.
<tt style='background-color:#E8E8E8;'> physics.vector.Point <a href=' /physics/vector/point.py#L431'>vel</a>(frame)</tt>	The velocity vector of this point in the referenceframe.
<tt style='background-color:#E8E8E8;'> physics.vector.Point <a href=' /physics/vector/point.py#L458'>partial_velocity</a>(frame)</tt>	Returns the partial velocities of the linear velocity vector of this point in the given frame with respect to one or more provided.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L94'>__init__</a>(name,indices,latexs,variables)</tt>	Referenceframe initialization method.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L206'>__getitem__</a>(ind)</tt>	Returns basis vector for the provided index if the index is a string.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L230'>__str__</a>()</tt>	Returns the name of the frame.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L236'>_dict_list</a>(other,num)</tt>	Creates a list from self to other using _dcm_dict.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L258'>_w_diff_dcm</a>(otherframe)</tt>	Angular velocity from time differentiating the dcm.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L269'>variable_map</a>(otherframe)</tt>	Returns a dictionary which expresses the coordinate variables of this frame in terms of the variables of otherframe.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L311'>ang_acc_in</a>(otherframe)</tt>	Returns the angular acceleration vector of the referenceframe.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L344'>ang_vel_in</a>(otherframe)</tt>	Returns the angular velocity vector of the referenceframe.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L378'>dcm</a>(otherframe)</tt>	The direction cosine matrix between frames.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L421'>orient</a>(parent,rot_type,amounts,rot_order)</tt>	Defines the orientation of this frame relative to a parent frame.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L638'>orientnew</a>(newname,rot_type,amounts,rot_order)</tt>	Creates a new referenceframe oriented with respect to this frame.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L704'>set_ang_acc</a>(otherframe,value)</tt>	Define the angular acceleration vector in a referenceframe.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L740'>set_ang_vel</a>(otherframe,value)</tt>	Define the angular velocity vector in a referenceframe.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L776'>x</a>()</tt>	The basis vector for the referenceframe in the x direction.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L781'>y</a>()</tt>	The basis vector for the referenceframe in the y direction.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L786'>z</a>()</tt>	The basis vector for the referenceframe in the z direction.
<tt style='background-color:#E8E8E8;'> physics.vector.ReferenceFrame <a href=' /physics/vector/frame.py#L791'>partial_velocity</a>(frame)</tt>	Returns the partial angular velocities of this frame in the given frame with respect to one or more provided generalized speeds.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L22'>__init__</a>(inlist)</tt>	Just like vector's init you shouldn't call this unless creating a zero dyadic.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L60'>__add__</a>(other)</tt>	The add operator for dyadic.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L65'>__and__</a>(other)</tt>	The inner product operator for a dyadic and a dyadic or vector.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L101'>__div__</a>(other)</tt>	Divides the dyadic by a sympifyable expression.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L107'>__eq__</a>(other)</tt>	Tests for equality.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L123'>__mul__</a>(other)</tt>	Multiplies the dyadic by a sympifyable expression.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L253'>__rand__</a>(other)</tt>	The inner product operator for a vector or dyadic and a dyadic this is for vector dot dyadic.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L285'>__rxor__</a>(other)</tt>	For a cross product in the form vector x dyadic parameters.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L345'>__sub__</a>(other)</tt>	The subtraction operator.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L349'>__xor__</a>(other)</tt>	For a cross product in the form dyadic x vector.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L382'>express</a>(frame1,frame2)</tt>	Expresses this dyadic in alternate frame s the first frame is the list side expression the second frame is the.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L415'>to_matrix</a>(reference_frame,second_reference_frame)</tt>	Returns the matrix form of the dyadic with respect to one or two reference frames.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L465'>doit</a>()</tt>	Calls doit() on each term in the dyadic.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L470'>dt</a>(frame)</tt>	Take the time derivative of this dyadic in a frame.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L496'>simplify</a>()</tt>	Returns a simplified dyadic.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L503'>subs</a>()</tt>	Substituion on the dyadic.
<tt style='background-color:#E8E8E8;'> physics.vector.Dyadic <a href=' /physics/vector/dyadic.py#L522'>applyfunc</a>(f)</tt>	Apply a function to each component of a dyadic.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeG <a href=' /liealgebras/type_g.py#L14'>dimension</a>()</tt>	Dimension of the vector space v underlying the lie algebra examples.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeG <a href=' /liealgebras/type_g.py#L27'>simple_root</a>(i)</tt>	The ith simple root of g_2 every lie algebra has a unique root system.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeG <a href=' /liealgebras/type_g.py#L53'>positive_roots</a>()</tt>	Generate all the positive roots of a_n this is half of all of the roots of a_n by multiplying all the.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeG <a href=' /liealgebras/type_g.py#L74'>roots</a>()</tt>	Returns the total number of roots of g_2".
<tt style='background-color:#E8E8E8;'> liealgebras.TypeG <a href=' /liealgebras/type_g.py#L80'>cartan_matrix</a>()</tt>	The cartan matrix for g_2 the cartan matrix matrix for a lie algebra is.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeG <a href=' /liealgebras/type_g.py#L103'>basis</a>()</tt>	Returns the number of independent generators of g_2.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeA <a href=' /liealgebras/type_a.py#L21'>dimension</a>()</tt>	Dimension of the vector space v underlying the lie algebra examples.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeA <a href=' /liealgebras/type_a.py#L35'>basic_root</a>(i,j)</tt>	This is a method just to generate roots with a 1 iin the ith position and a -1.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeA <a href=' /liealgebras/type_a.py#L49'>simple_root</a>(i)</tt>	Every lie algebra has a unique root system.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeA <a href=' /liealgebras/type_a.py#L78'>positive_roots</a>()</tt>	This method generates all the positive roots of a_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeA <a href=' /liealgebras/type_a.py#L104'>highest_root</a>()</tt>	Returns the heighest weight root for a_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeA <a href=' /liealgebras/type_a.py#L111'>roots</a>()</tt>	Returns the total number of roots for a_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeA <a href=' /liealgebras/type_a.py#L118'>cartan_matrix</a>()</tt>	Returns the cartan matrix for a_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeA <a href=' /liealgebras/type_a.py#L151'>basis</a>()</tt>	Returns the number of independent generators of a_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeA <a href=' /liealgebras/type_a.py#L158'>lie_algebra</a>()</tt>	Returns the lie algebra associated with a_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeB <a href=' /liealgebras/type_b.py#L14'>dimension</a>()</tt>	Dimension of the vector space v underlying the lie algebra examples.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeB <a href=' /liealgebras/type_b.py#L28'>basic_root</a>(i,j)</tt>	This is a method just to generate roots with a 1 iin the ith position and a -1.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeB <a href=' /liealgebras/type_b.py#L40'>simple_root</a>(i)</tt>	Every lie algebra has a unique root system.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeB <a href=' /liealgebras/type_b.py#L76'>positive_roots</a>()</tt>	This method generates all the positive roots of a_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeB <a href=' /liealgebras/type_b.py#L113'>roots</a>()</tt>	Returns the total number of roots for b_n".
<tt style='background-color:#E8E8E8;'> liealgebras.TypeB <a href=' /liealgebras/type_b.py#L121'>cartan_matrix</a>()</tt>	Returns the cartan matrix for b_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeB <a href=' /liealgebras/type_b.py#L155'>basis</a>()</tt>	Returns the number of independent generators of b_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeB <a href=' /liealgebras/type_b.py#L163'>lie_algebra</a>()</tt>	Returns the lie algebra associated with b_n.
<tt style='background-color:#E8E8E8;'> liealgebras. <a href=' /liealgebras/cartan_matrix.py#L3'>CartanMatrix</a>(ct)</tt>	Access the cartan matrix of a specific lie algebra examples.
<tt style='background-color:#E8E8E8;'> liealgebras.RootSystem <a href=' /liealgebras/root_system.py#L36'>__new__</a>(cls,cartantype)</tt>	Create a new rootsystem object this method assigns an attribute called cartan_type to each instance of.
<tt style='background-color:#E8E8E8;'> liealgebras.RootSystem <a href=' /liealgebras/root_system.py#L50'>simple_roots</a>()</tt>	Generate the simple roots of the lie algebra the rank of the lie algebra determines the number of simple roots that.
<tt style='background-color:#E8E8E8;'> liealgebras.RootSystem <a href=' /liealgebras/root_system.py#L76'>all_roots</a>()</tt>	Generate all the roots of a given root system the result is a dictionary where the keys are integer numbers.
<tt style='background-color:#E8E8E8;'> liealgebras.RootSystem <a href=' /liealgebras/root_system.py#L96'>root_space</a>()</tt>	Return the span of the simple roots the root space is the vector space spanned by the simple roots i.
<tt style='background-color:#E8E8E8;'> liealgebras.RootSystem <a href=' /liealgebras/root_system.py#L117'>add_simple_roots</a>(root1,root2)</tt>	Add two simple roots together the function takes as input two integers root1 and root2.
<tt style='background-color:#E8E8E8;'> liealgebras.RootSystem <a href=' /liealgebras/root_system.py#L146'>add_as_roots</a>(root1,root2)</tt>	Add two roots together if and only if their sum is also a root it takes as input two vectors which should be roots.
<tt style='background-color:#E8E8E8;'> liealgebras.RootSystem <a href=' /liealgebras/root_system.py#L175'>cartan_matrix</a>()</tt>	Cartan matrix of lie algebra associated with this root system examples.
<tt style='background-color:#E8E8E8;'> liealgebras.RootSystem <a href=' /liealgebras/root_system.py#L191'>dynkin_diagram</a>()</tt>	Dynkin diagram of the lie algebra associated with this root system examples.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeC <a href=' /liealgebras/type_c.py#L13'>dimension</a>()</tt>	Dimension of the vector space v underlying the lie algebra examples.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeC <a href=' /liealgebras/type_c.py#L27'>basic_root</a>(i,j)</tt>	Generate roots with 1 in ith position and a -1 in jth postion.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeC <a href=' /liealgebras/type_c.py#L36'>simple_root</a>(i)</tt>	The ith simple root for the c series every lie algebra has a unique root system.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeC <a href=' /liealgebras/type_c.py#L73'>positive_roots</a>()</tt>	Generates all the positive roots of a_n this is half of all of the roots of c_n by multiplying all the.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeC <a href=' /liealgebras/type_c.py#L110'>roots</a>()</tt>	Returns the total number of roots for c_n".
<tt style='background-color:#E8E8E8;'> liealgebras.TypeC <a href=' /liealgebras/type_c.py#L118'>cartan_matrix</a>()</tt>	The cartan matrix for c_n the cartan matrix matrix for a lie algebra is.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeC <a href=' /liealgebras/type_c.py#L152'>basis</a>()</tt>	Returns the number of independent generators of c_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeC <a href=' /liealgebras/type_c.py#L160'>lie_algebra</a>()</tt>	Returns the lie algebra associated with c_n".
<tt style='background-color:#E8E8E8;'> liealgebras.WeylGroup <a href=' /liealgebras/weyl_group.py#L26'>generators</a>()</tt>	This method creates the generating reflections of the weyl group for a given lie algebra.
<tt style='background-color:#E8E8E8;'> liealgebras.WeylGroup <a href=' /liealgebras/weyl_group.py#L48'>group_order</a>()</tt>	This method returns the order of the weyl group.
<tt style='background-color:#E8E8E8;'> liealgebras.WeylGroup <a href=' /liealgebras/weyl_group.py#L86'>group_name</a>()</tt>	This method returns some general information about the weyl group for a given lie algebra.
<tt style='background-color:#E8E8E8;'> liealgebras.WeylGroup <a href=' /liealgebras/weyl_group.py#L118'>element_order</a>(weylelt)</tt>	This method returns the order of a given weyl group element which should be specified by the user in the form of products of the generating.
<tt style='background-color:#E8E8E8;'> liealgebras.WeylGroup <a href=' /liealgebras/weyl_group.py#L201'>delete_doubles</a>(reflections)</tt>	This is a helper method for determining the order of an element in the weyl group of g2.
<tt style='background-color:#E8E8E8;'> liealgebras.WeylGroup <a href=' /liealgebras/weyl_group.py#L220'>matrix_form</a>(weylelt)</tt>	This method takes input from the user in the form of products of the generating reflections and returns the matrix corresponding to the.
<tt style='background-color:#E8E8E8;'> liealgebras.WeylGroup <a href=' /liealgebras/weyl_group.py#L369'>coxeter_diagram</a>()</tt>	This method returns the coxeter diagram corresponding to a weyl group.
<tt style='background-color:#E8E8E8;'> liealgebras.Standard_Cartan <a href=' /liealgebras/cartan_type.py#L65'>rank</a>()</tt>	Returns the rank of the lie algebra.
<tt style='background-color:#E8E8E8;'> liealgebras.Standard_Cartan <a href=' /liealgebras/cartan_type.py#L71'>series</a>()</tt>	Returns the type of the lie algebra.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeD <a href=' /liealgebras/type_d.py#L13'>dimension</a>()</tt>	Dmension of the vector space v underlying the lie algebra examples.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeD <a href=' /liealgebras/type_d.py#L27'>basic_root</a>(i,j)</tt>	This is a method just to generate roots with a 1 iin the ith position and a -1.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeD <a href=' /liealgebras/type_d.py#L41'>simple_root</a>(i)</tt>	Every lie algebra has a unique root system.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeD <a href=' /liealgebras/type_d.py#L80'>positive_roots</a>()</tt>	This method generates all the positive roots of a_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeD <a href=' /liealgebras/type_d.py#L110'>roots</a>()</tt>	Returns the total number of roots for d_n".
<tt style='background-color:#E8E8E8;'> liealgebras.TypeD <a href=' /liealgebras/type_d.py#L118'>cartan_matrix</a>()</tt>	Returns the cartan matrix for d_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeD <a href=' /liealgebras/type_d.py#L153'>basis</a>()</tt>	Returns the number of independent generators of d_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeD <a href=' /liealgebras/type_d.py#L160'>lie_algebra</a>()</tt>	Returns the lie algebra associated with d_n".
<tt style='background-color:#E8E8E8;'> liealgebras.TypeF <a href=' /liealgebras/type_f.py#L14'>dimension</a>()</tt>	Dimension of the vector space v underlying the lie algebra examples.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeF <a href=' /liealgebras/type_f.py#L29'>basic_root</a>(i,j)</tt>	Generate roots with 1 in ith position and -1 in jth postion.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeF <a href=' /liealgebras/type_f.py#L40'>simple_root</a>(i)</tt>	The ith simple root of f_4 every lie algebra has a unique root system.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeF <a href=' /liealgebras/type_f.py#L72'>positive_roots</a>()</tt>	Generate all the positive roots of a_n this is half of all of the roots of f_4 by multiplying all the.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeF <a href=' /liealgebras/type_f.py#L124'>roots</a>()</tt>	Returns the total number of roots for f_4.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeF <a href=' /liealgebras/type_f.py#L130'>cartan_matrix</a>()</tt>	The cartan matrix for f_4 the cartan matrix matrix for a lie algebra is.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeF <a href=' /liealgebras/type_f.py#L155'>basis</a>()</tt>	Returns the number of independent generators of f_4.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeE <a href=' /liealgebras/type_e.py#L14'>dimension</a>()</tt>	Dimension of the vector space v underlying the lie algebra examples.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeE <a href=' /liealgebras/type_e.py#L28'>basic_root</a>(i,j)</tt>	This is a method just to generate roots with a -1 in the ith position and a 1.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeE <a href=' /liealgebras/type_e.py#L41'>simple_root</a>(i)</tt>	Every lie algebra has a unique root system.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeE <a href=' /liealgebras/type_e.py#L81'>positive_roots</a>()</tt>	This method generates all the positive roots of a_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeE <a href=' /liealgebras/type_e.py#L217'>roots</a>()</tt>	Returns the total number of roots of e_n.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeE <a href=' /liealgebras/type_e.py#L231'>cartan_matrix</a>()</tt>	Returns the cartan matrix for g_2 the cartan matrix matrix for a lie algebra is.
<tt style='background-color:#E8E8E8;'> liealgebras.TypeE <a href=' /liealgebras/type_e.py#L268'>basis</a>()</tt>	Returns the number of independent generators of e_n.
<tt style='background-color:#E8E8E8;'> liealgebras. <a href=' /liealgebras/dynkin_diagram.py#L4'>DynkinDiagram</a>(t)</tt>	Display the dynkin diagram of a given lie algebra works by generating the cartantype for the input t and then returning the.
<tt style='background-color:#E8E8E8;'> codegen.expm1 <a href=' /codegen/cfunctions.py#L49'>fdiff</a>(argindex)</tt>	Returns the first derivative of this function.
<tt style='background-color:#E8E8E8;'> codegen.log1p <a href=' /codegen/cfunctions.py#L113'>fdiff</a>(argindex)</tt>	Returns the first derivative of this function.
<tt style='background-color:#E8E8E8;'> codegen.exp2 <a href=' /codegen/cfunctions.py#L185'>fdiff</a>(argindex)</tt>	Returns the first derivative of this function.
<tt style='background-color:#E8E8E8;'> codegen.log2 <a href=' /codegen/cfunctions.py#L237'>fdiff</a>(argindex)</tt>	Returns the first derivative of this function.
<tt style='background-color:#E8E8E8;'> codegen.fma <a href=' /codegen/cfunctions.py#L287'>fdiff</a>(argindex)</tt>	Returns the first derivative of this function.
<tt style='background-color:#E8E8E8;'> codegen.log10 <a href=' /codegen/cfunctions.py#L333'>fdiff</a>(argindex)</tt>	Returns the first derivative of this function.
<tt style='background-color:#E8E8E8;'> codegen.Sqrt <a href=' /codegen/cfunctions.py#L389'>fdiff</a>(argindex)</tt>	Returns the first derivative of this function.
<tt style='background-color:#E8E8E8;'> codegen.Cbrt <a href=' /codegen/cfunctions.py#L436'>fdiff</a>(argindex)</tt>	Returns the first derivative of this function.
<tt style='background-color:#E8E8E8;'> codegen.hypot <a href=' /codegen/cfunctions.py#L482'>fdiff</a>(argindex)</tt>	Returns the first derivative of this function.
<tt style='background-color:#E8E8E8;'> codegen. <a href=' /codegen/ast.py#L137'>aug_assign</a>(lhs,op,rhs)</tt>	Create 'lhs op= rhs'.
<tt style='background-color:#E8E8E8;'> codegen.CodeBlock <a href=' /codegen/ast.py#L221'>topological_sort</a>(cls,assignments)</tt>	Return a codeblock with topologically sorted assignments so that variables are assigned before they are used.
<tt style='background-color:#E8E8E8;'> codegen.CodeBlock <a href=' /codegen/ast.py#L291'>cse</a>(symbols,optimizations,postprocess,order)</tt>	Return a new code block with common subexpressions eliminated see the docstring of :func sympy.
<tt style='background-color:#E8E8E8;'> codegen.For <a href=' /codegen/ast.py#L376'>target</a>()</tt>	Return the symbol target from the for-loop representation.
<tt style='background-color:#E8E8E8;'> codegen.For <a href=' /codegen/ast.py#L385'>iterable</a>()</tt>	Return the iterable from the for-loop representation.
<tt style='background-color:#E8E8E8;'> codegen.For <a href=' /codegen/ast.py#L394'>body</a>()</tt>	Return the sympy expression body from the for-loop representation.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/named_groups.py#L11'>AbelianGroup</a>()</tt>	Returns the direct product of cyclic groups with the given orders.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/named_groups.py#L58'>AlternatingGroup</a>(n)</tt>	Generates the alternating group on n elements as a permutation group.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/named_groups.py#L129'>CyclicGroup</a>(n)</tt>	Generates the cyclic group of order n as a permutation group.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/named_groups.py#L170'>DihedralGroup</a>(n)</tt>	Generates the dihedral group d_n as a permutation group.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/named_groups.py#L234'>SymmetricGroup</a>(n)</tt>	Generates the symmetric group on n elements as a permutation group.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/named_groups.py#L298'>RubikGroup</a>(n)</tt>	Return a group of rubik's cube generators >>> from sympy.
<tt style='background-color:#E8E8E8;'> combinatorics.Prufer <a href=' /combinatorics/prufer.py#L31'>prufer_repr</a>()</tt>	Returns prufer sequence for the prufer object.
<tt style='background-color:#E8E8E8;'> combinatorics.Prufer <a href=' /combinatorics/prufer.py#L58'>tree_repr</a>()</tt>	Returns the tree representation of the prufer object.
<tt style='background-color:#E8E8E8;'> combinatorics.Prufer <a href=' /combinatorics/prufer.py#L81'>nodes</a>()</tt>	Returns the number of nodes in the tree.
<tt style='background-color:#E8E8E8;'> combinatorics.Prufer <a href=' /combinatorics/prufer.py#L97'>rank</a>()</tt>	Returns the rank of the prufer sequence.
<tt style='background-color:#E8E8E8;'> combinatorics.Prufer <a href=' /combinatorics/prufer.py#L123'>size</a>()</tt>	Return the number of possible trees of this prufer object.
<tt style='background-color:#E8E8E8;'> combinatorics.Prufer <a href=' /combinatorics/prufer.py#L142'>to_prufer</a>(tree,n)</tt>	Return the prufer sequence for a tree given as a list of edges where n is the number of nodes in the tree.
<tt style='background-color:#E8E8E8;'> combinatorics.Prufer <a href=' /combinatorics/prufer.py#L193'>to_tree</a>(prufer)</tt>	Return the tree as a list of edges of the given prufer sequence.
<tt style='background-color:#E8E8E8;'> combinatorics.Prufer <a href=' /combinatorics/prufer.py#L238'>edges</a>()</tt>	Return a list of edges and the number of nodes from the given runs that connect nodes in an integer-labelled tree.
<tt style='background-color:#E8E8E8;'> combinatorics.Prufer <a href=' /combinatorics/prufer.py#L293'>prufer_rank</a>()</tt>	Computes the rank of a prufer sequence.
<tt style='background-color:#E8E8E8;'> combinatorics.Prufer <a href=' /combinatorics/prufer.py#L317'>unrank</a>(rank,n)</tt>	Finds the unranked prufer sequence.
<tt style='background-color:#E8E8E8;'> combinatorics.Prufer <a href=' /combinatorics/prufer.py#L336'>__new__</a>(cls)</tt>	The constructor for the prufer object.
<tt style='background-color:#E8E8E8;'> combinatorics.Prufer <a href=' /combinatorics/prufer.py#L389'>next</a>(delta)</tt>	Generates the prufer sequence that is delta beyond the current one.
<tt style='background-color:#E8E8E8;'> combinatorics.Prufer <a href=' /combinatorics/prufer.py#L411'>prev</a>(delta)</tt>	Generates the prufer sequence that is -delta before the current one.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L30'>dummy_sgs</a>(dummies,sym,n)</tt>	Return the strong generators for dummy indices parameters.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L77'>_min_dummies</a>(dummies,sym,indices)</tt>	Return list of minima of the orbits of indices in group of dummies see double_coset_can_rep for the description of dummies and sym.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L107'>_trace_S</a>(s,j,b,S_cosets)</tt>	Return the representative h satisfying s[h[b]] == j.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L119'>_trace_D</a>(gj,p_i,Dxtrav)</tt>	Return the representative h satisfying h[gj] == p_i.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L131'>_dumx_remove</a>(dumx,dumx_flat,p0)</tt>	Remove p0 from dumx.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L167'>double_coset_can_rep</a>(dummies,sym,b_S,sgens)</tt>	Butler-portugal algorithm for tensor canonicalization with dummy indices dummies.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L533'>canonical_free</a>(base,gens,g,num_free)</tt>	Canonicalization of a tensor with respect to free indices choosing the minimum with respect to lexicographical ordering.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L633'>canonicalize</a>(g,dummies,msym)</tt>	Canonicalize tensor formed by tensors parameters.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L858'>perm_af_direct_product</a>(gens1,gens2,signed)</tt>	Direct products of the generators gens1 and gens2 examples.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L895'>bsgs_direct_product</a>(base1,gens1,base2,gens2)</tt>	Direct product of two bsgs base1 base of the first bsgs.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L933'>get_symmetric_group_sgs</a>(n,antisym)</tt>	Return base gens of the minimal bsgs for anti symmetric tensor n rank of the tensor.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L965'>get_transversals</a>(base,gens)</tt>	Return transversals for the group with bsgs base gens.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L978'>_is_minimal_bsgs</a>(base,gens)</tt>	Check if the bsgs has minimal base under lexigographic order.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L1005'>get_minimal_bsgs</a>(base,gens)</tt>	Compute a minimal gsgs base gens bsgs.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L1034'>tensor_gens</a>(base,gens,list_free_indices,sym)</tt>	Returns size res_base res_gens bsgs for n tensors of the same type.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/tensor_can.py#L1153'>gens_products</a>()</tt>	Returns size res_base res_gens bsgs for n tensors of different types v is a sequence of (base_i gens_i free_i sym_i).
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/util.py#L17'>_base_ordering</a>(base,degree)</tt>	Order \{0 1 n-1\} so that base points come first and in order.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/util.py#L73'>_check_cycles_alt_sym</a>(perm)</tt>	Checks for cycles of prime length p with n/2 < p < n-2.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/util.py#L118'>_distribute_gens_by_base</a>(base,gens)</tt>	Distribute the group elements gens by membership in basic stabilizers.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/util.py#L183'>_handle_precomputed_bsgs</a>(base,strong_gens,transversals,basic_orbits)</tt>	Calculate bsgs-related structures from those present.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/util.py#L248'>_orbits_transversals_from_bsgs</a>(base,strong_gens_distr,transversals_only)</tt>	Compute basic orbits and transversals from a base and strong generating set.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/util.py#L304'>_remove_gens</a>(base,strong_gens,basic_orbits,strong_gens_distr)</tt>	Remove redundant generators from a strong generating set.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/util.py#L378'>_strip</a>(g,base,orbits,transversals)</tt>	Attempt to decompose a permutation using a possibly partial bsgs structure.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/util.py#L456'>_strip_af</a>(h,base,orbits,transversals)</tt>	Optimized _strip with h transversals and result in array form.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/util.py#L477'>_strong_gens_from_distr</a>(strong_gens_distr)</tt>	Retrieve strong generating set from generators of basic stabilizers.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/permutations.py#L15'>_af_rmul</a>(a,b)</tt>	Return the product b*a input and output are array forms the ith value.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/permutations.py#L48'>_af_rmuln</a>()</tt>	Given [a b c ] return the product of *c*b*a using array forms.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/permutations.py#L109'>_af_parity</a>(pi)</tt>	Computes the parity of a permutation in array form.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/permutations.py#L145'>_af_invert</a>(a)</tt>	Finds the inverse ~a of a permutation a given in array form.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/permutations.py#L170'>_af_pow</a>(a,n)</tt>	Routine for finding powers of a permutation.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/permutations.py#L215'>_af_commutes_with</a>(a,b)</tt>	Checks if the two permutations with array forms given by a and b commute.
<tt style='background-color:#E8E8E8;'> combinatorics.Cycle <a href=' /combinatorics/permutations.py#L308'>__missing__</a>(arg)</tt>	Enter arg into dictionary and return arg.
<tt style='background-color:#E8E8E8;'> combinatorics.Cycle <a href=' /combinatorics/permutations.py#L318'>__call__</a>()</tt>	Return product of cycles processed from r to l.
<tt style='background-color:#E8E8E8;'> combinatorics.Cycle <a href=' /combinatorics/permutations.py#L346'>list</a>(size)</tt>	Return the cycles as an explicit list starting from 0 up to the greater of the largest value in the cycles and size.
<tt style='background-color:#E8E8E8;'> combinatorics.Cycle <a href=' /combinatorics/permutations.py#L381'>__repr__</a>()</tt>	We want it to print as a cycle not as a dict.
<tt style='background-color:#E8E8E8;'> combinatorics.Cycle <a href=' /combinatorics/permutations.py#L404'>__str__</a>()</tt>	We want it to be printed in a cycle notation with no comma in-between.
<tt style='background-color:#E8E8E8;'> combinatorics.Cycle <a href=' /combinatorics/permutations.py#L427'>__init__</a>()</tt>	Load up a cycle instance with the values for the cycle.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L827'>__new__</a>(cls)</tt>	Constructor for the permutation object from a list or a list of lists in which all elements of the permutation may.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L949'>_af_new</a>(cls,perm)</tt>	A method to produce a permutation object from a list the list is bound to the _array_form attribute so it must.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L979'>array_form</a>()</tt>	Return a copy of the attribute _array_form examples.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1024'>list</a>(size)</tt>	Return the permutation as an explicit list possibly trimming unmoved elements if size is less than the maximum.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1065'>cyclic_form</a>()</tt>	This is used to convert to the cyclic notation from the canonical notation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1109'>full_cyclic_form</a>()</tt>	Return permutation in cyclic form including singletons.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1126'>size</a>()</tt>	Returns the number of elements in the permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1145'>support</a>()</tt>	Return the elements in permutation p for which p[i] != i.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1161'>__add__</a>(other)</tt>	Return permutation that is other higher in rank than self.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1188'>__sub__</a>(other)</tt>	Return the permutation that is other lower in rank than self.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1198'>rmul</a>()</tt>	Return product of permutations [a b c ] as the permutation whose.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1244'>rmul_with_af</a>(cls)</tt>	Same as rmul but the elements of args are permutation objects.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1254'>mul_inv</a>(other)</tt>	Other*~self self and other have _array_form.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1262'>__rmul__</a>(other)</tt>	This is needed to coerce other to permutation in rmul.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1267'>__mul__</a>(other)</tt>	Return the product a*b as a permutation the ith value is b(a i.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1328'>commutes_with</a>(other)</tt>	Checks if the elements are commuting.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1348'>__pow__</a>(n)</tt>	Routine for finding powers of a permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1369'>__rxor__</a>(i)</tt>	Return self i when i is an int.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1386'>__xor__</a>(h)</tt>	Return the conjugate permutation ~h*self*h.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1464'>transpositions</a>()</tt>	Return the permutation decomposed into a list of transpositions.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1502'>from_sequence</a>(i,key)</tt>	Return the permutation needed to obtain i from the sorted elements of i.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1527'>__invert__</a>()</tt>	Return the inverse of the permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1547'>__iter__</a>()</tt>	Yield elements from array form.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1560'>__call__</a>()</tt>	Allows applying a permutation instance as a bijective function.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1599'>atoms</a>()</tt>	Returns all the elements of a permutation examples.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1614'>next_lex</a>()</tt>	Returns the next permutation in lexicographical order.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1657'>unrank_nonlex</a>(n,r)</tt>	This is a linear time unranking algorithm that does not respect lexicographic order [3].
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1689'>rank_nonlex</a>(inv_perm)</tt>	This is a linear time ranking algorithm that does not enforce lexicographic order [3].
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1725'>next_nonlex</a>()</tt>	Returns the next permutation in nonlex order [3].
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1752'>rank</a>()</tt>	Returns the lexicographic rank of the permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1789'>cardinality</a>()</tt>	Returns the number of all possible permutations.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1809'>parity</a>()</tt>	Computes the parity of a permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1838'>is_even</a>()</tt>	Checks if a permutation is even.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1861'>is_odd</a>()</tt>	Checks if a permutation is odd.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1884'>is_Singleton</a>()</tt>	Checks to see if the permutation contains only one number and is thus the only possible permutation of this set of numbers.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1906'>is_Empty</a>()</tt>	Checks to see if the permutation is a set with zero elements examples.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1927'>is_Identity</a>()</tt>	Returns true if the permutation is an identity permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1957'>ascents</a>()</tt>	Returns the positions of ascents in a permutation ie the location where p[i] < p[i+1].
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L1979'>descents</a>()</tt>	Returns the positions of descents in a permutation ie the location where p[i] > p[i+1].
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2001'>max</a>()</tt>	The maximum element moved by the permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2025'>min</a>()</tt>	The minimum element moved by the permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2049'>inversions</a>()</tt>	Computes the number of inversions of a permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2105'>commutator</a>(x)</tt>	Return the commutator of self and x ~x*~self*x*self if f and g are part of a group g then the commutator of f and g.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2153'>signature</a>()</tt>	Gives the signature of the permutation needed to place the elements of the permutation in canonical order.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2184'>order</a>()</tt>	Computes the order of a permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2210'>length</a>()</tt>	Returns the number of integers moved by a permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2231'>cycle_structure</a>()</tt>	Return the cycle structure of the permutation as a dictionary indicating the multiplicity of each cycle length.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2259'>cycles</a>()</tt>	Returns the number of cycles contained in the permutation including singletons.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2282'>index</a>()</tt>	Returns the index of a permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2301'>runs</a>()</tt>	Returns the runs of a permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2321'>inversion_vector</a>()</tt>	Return the inversion vector of the permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2373'>rank_trotterjohnson</a>()</tt>	Returns the trotter johnson rank which we get from the minimal change algorithm.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2415'>unrank_trotterjohnson</a>(cls,size,rank)</tt>	Trotter johnson permutation unranking see [4] section 2 4.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2451'>next_trotterjohnson</a>()</tt>	Returns the next permutation in trotter-johnson order.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2505'>get_precedence_matrix</a>()</tt>	Gets the precedence matrix this is used for computing the.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2538'>get_precedence_distance</a>(other)</tt>	Computes the precedence distance between two permutations.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2576'>get_adjacency_matrix</a>()</tt>	Computes the adjacency matrix of a permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2616'>get_adjacency_distance</a>(other)</tt>	Computes the adjacency distance between two permutations.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2659'>get_positional_distance</a>(other)</tt>	Computes the positional distance between two permutations.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2686'>josephus</a>(cls,m,n,s)</tt>	Return as a permutation the shuffling of range n using the josephus scheme in which every m-th item is selected until all have been chosen.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2735'>from_inversion_vector</a>(cls,inversion)</tt>	Calculates the permutation from the inversion vector.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2762'>random</a>(cls,n)</tt>	Generates a random permutation of length n.
<tt style='background-color:#E8E8E8;'> combinatorics.Permutation <a href=' /combinatorics/permutations.py#L2781'>unrank_lex</a>(cls,size,rank)</tt>	Lexicographic permutation unranking.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/permutations.py#L2821'>_merge</a>(arr,temp,left,mid)</tt>	Merges two sorted arrays and calculates the inversion count.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/generators.py#L10'>symmetric</a>(n)</tt>	Generates the symmetric group of order n sn.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/generators.py#L27'>cyclic</a>(n)</tt>	Generates the cyclic group of order n cn.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/generators.py#L51'>alternating</a>(n)</tt>	Generates the alternating group of order n an.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/generators.py#L70'>dihedral</a>(n)</tt>	Generates the dihedral group of order 2n dn.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/generators.py#L107'>rubik_cube_generators</a>()</tt>	Return the permutations of the 3x3 rubik's cube see http //www.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/generators.py#L128'>rubik</a>(n)</tt>	Return permutations for an nxn rubik's cube.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L122'>__new__</a>(cls)</tt>	The default constructor accepts cycle and permutation forms.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L171'>__contains__</a>(i)</tt>	Return true if i is contained in permutationgroup.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L191'>__eq__</a>(other)</tt>	Return true if permutationgroup generated by elements in the group are same i.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L234'>__mul__</a>(other)</tt>	Return the direct product of two permutation groups as a permutation group.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L272'>_random_pr_init</a>(r,n,_random_prec_n)</tt>	Initialize random generators for the product replacement algorithm.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L329'>_union_find_merge</a>(first,second,ranks,parents)</tt>	Merges two classes in a union-find data structure.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L375'>_union_find_rep</a>(num,parents)</tt>	Find representative of a class in a union-find data structure.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L415'>base</a>()</tt>	Return a base from the schreier-sims algorithm.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L447'>baseswap</a>(base,strong_gens,pos,randomized)</tt>	Swap two consecutive base points in base and strong generating set.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L578'>basic_orbits</a>()</tt>	Return the basic orbits relative to a base and strong generating set.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L607'>basic_stabilizers</a>()</tt>	Return a chain of stabilizers relative to a base and strong generating set.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L653'>basic_transversals</a>()</tt>	Return basic transversals relative to a base and strong generating set.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L683'>coset_transversal</a>(H)</tt>	Return a transversal of the right cosets of self by its subgroup h using the second method described in [1], subsection 4.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L741'>_coset_representative</a>(g,H)</tt>	Return the representative of hg from the transversal that would be computed by self.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L768'>coset_table</a>(H)</tt>	Return the standardised right coset table of self in h as a list of lists.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L814'>center</a>()</tt>	Return the center of a permutation group.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L848'>centralizer</a>(other)</tt>	Return the centralizer of a group/set/element.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L964'>commutator</a>(G,H)</tt>	Return the commutator of two subgroups.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1008'>coset_factor</a>(g,factor_index)</tt>	Return g's (self's) coset factorization of g if g is an element of g then it can be written as the product.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1093'>coset_rank</a>(g)</tt>	Rank using schreier-sims representation the coset rank of g is the ordering number in which.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1139'>coset_unrank</a>(rank,af)</tt>	Unrank using schreier-sims representation coset_unrank is the inverse operation of coset_rank.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1163'>degree</a>()</tt>	Returns the size of the permutations in the group.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1210'>_elements</a>()</tt>	Returns all the elements of the permutation group as a list examples.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1225'>derived_series</a>()</tt>	Return the derived series for the group.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1271'>derived_subgroup</a>()</tt>	Compute the derived subgroup.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1318'>generate</a>(method,af)</tt>	Return iterator to generate the elements of the group iteration is done with one of these methods :.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1371'>generate_dimino</a>(af)</tt>	Yield group elements using dimino's algorithm if af == true it yields the array form of the permutations.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1431'>generate_schreier_sims</a>(af)</tt>	Yield group elements using the schreier-sims representation in coset_rank order.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1503'>generators</a>()</tt>	Returns the generators of the group.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1522'>contains</a>(g,strict)</tt>	Test if permutation g belong to self g.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1583'>is_abelian</a>()</tt>	Test if the group is abelian.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1618'>is_alt_sym</a>(eps,_random_prec)</tt>	Monte carlo test for the symmetric/alternating group for degrees >= 8.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1679'>is_nilpotent</a>()</tt>	Test if the group is nilpotent.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1722'>is_normal</a>(gr,strict)</tt>	Test if g=self is a normal subgroup of gr.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1761'>is_primitive</a>(randomized)</tt>	Test if a group is primitive.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1819'>is_solvable</a>()</tt>	Test if the group is solvable.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1855'>is_subgroup</a>(G,strict)</tt>	Return true if all elements of self belong to g.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1912'>is_transitive</a>(strict)</tt>	Test if the group is transitive.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1961'>is_trivial</a>()</tt>	Test if the group is the trivial group.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L1981'>lower_central_series</a>()</tt>	Return the lower central series for the group.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2020'>max_div</a>()</tt>	Maximum proper divisor of the degree of a permutation group.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2059'>minimal_block</a>(points)</tt>	For a transitive group finds the block system generated by points.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2143'>normal_closure</a>(other,k)</tt>	Return the normal closure of a subgroup/set of permutations.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2241'>orbit</a>(alpha,action)</tt>	Compute the orbit of alpha \{g(\alpha) | g \in g\} as a set.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2277'>orbit_rep</a>(alpha,beta,schreier_vector)</tt>	Return a group element which sends alpha to beta.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2317'>orbit_transversal</a>(alpha,pairs)</tt>	Computes a transversal for the orbit of alpha as a set.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2346'>orbits</a>(rep)</tt>	Return the orbits of self, ordered according to lowest element in each orbit.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2363'>order</a>()</tt>	Return the order of the group the number of permutations that can be generated from elements of the group.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2417'>pointwise_stabilizer</a>(points,incremental)</tt>	Return the pointwise stabilizer for a set of points.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2467'>make_perm</a>(n,seed)</tt>	Multiply n randomly selected permutations from pgroup together starting with the identity.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2520'>random</a>(af)</tt>	Return a random group element.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2526'>random_pr</a>(gen_count,iterations,_random_prec)</tt>	Return a random group element using product replacement.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2569'>random_stab</a>(alpha,schreier_vector,_random_prec)</tt>	Random element from the stabilizer of alpha.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2636'>schreier_sims_incremental</a>(base,gens)</tt>	Extend a sequence of points and generating set to a base and strong generating set.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2783'>schreier_sims_random</a>(base,gens,consec_succ,_random_prec)</tt>	Randomized schreier-sims algorithm.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2913'>schreier_vector</a>(alpha)</tt>	Computes the schreier vector for alpha.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2960'>stabilizer</a>(alpha)</tt>	Return the stabilizer subgroup of alpha.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L2988'>strong_gens</a>()</tt>	Return a strong generating set from the schreier-sims algorithm.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L3021'>subgroup_search</a>(prop,base,strong_gens,tests)</tt>	Find the subgroup of all elements satisfying the property prop.
<tt style='background-color:#E8E8E8;'> combinatorics.PermutationGroup <a href=' /combinatorics/perm_groups.py#L3272'>transitivity_degree</a>()</tt>	Compute the degree of transitivity of the group.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/perm_groups.py#L3321'>_orbit</a>(degree,generators,alpha,action)</tt>	Compute the orbit of alpha \{g(\alpha) | g \in g\} as a set.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/perm_groups.py#L3394'>_orbits</a>(degree,generators)</tt>	Compute the orbits of g.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/perm_groups.py#L3424'>_orbit_transversal</a>(degree,generators,alpha,pairs)</tt>	Computes a transversal for the orbit of alpha as a set.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/perm_groups.py#L3471'>_stabilizer</a>(degree,generators,alpha)</tt>	Return the stabilizer subgroup of alpha.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/free_groups.py#L18'>free_group</a>(symbols)</tt>	Construct a free group returning (freegroup (f_0 f_1 f_ n-1 ).
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/free_groups.py#L42'>xfree_group</a>(symbols)</tt>	Construct a free group returning (freegroup (f_0 f_1 f_ n-1 )).
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/free_groups.py#L66'>vfree_group</a>(symbols)</tt>	Construct a free group and inject f_0 f_1 f_ n-1 as symbols.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroup <a href=' /combinatorics/free_groups.py#L160'>_generators</a>(group)</tt>	Returns the generators of the freegroup.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroup <a href=' /combinatorics/free_groups.py#L181'>__contains__</a>(i)</tt>	Return true if i is contained in freegroup.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroup <a href=' /combinatorics/free_groups.py#L210'>__eq__</a>(other)</tt>	No freegroup is equal to any "other" freegroup.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroup <a href=' /combinatorics/free_groups.py#L215'>index</a>(gen)</tt>	Returns the index of the generator gen from (f_0 f_ n-1 ).
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroup <a href=' /combinatorics/free_groups.py#L232'>order</a>()</tt>	Returns the order of the free group.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroup <a href=' /combinatorics/free_groups.py#L248'>rank</a>()</tt>	In group theory the rank of a group g, denoted g rank,.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroup <a href=' /combinatorics/free_groups.py#L260'>_symbol_index</a>(symbol)</tt>	Returns the index of a generator for free group self, while returns the -ve index of the inverse generator.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroup <a href=' /combinatorics/free_groups.py#L279'>is_abelian</a>()</tt>	Returns if the group is abelian.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroup <a href=' /combinatorics/free_groups.py#L297'>identity</a>()</tt>	Returns the identity element of free group.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroup <a href=' /combinatorics/free_groups.py#L302'>contains</a>(g)</tt>	Tests if free group element g belong to self g.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroup <a href=' /combinatorics/free_groups.py#L324'>is_subgroup</a>(F)</tt>	Return true if all elements of self belong to f.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroup <a href=' /combinatorics/free_groups.py#L328'>center</a>()</tt>	Returns the center of the free group self.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L367'>array_form</a>()</tt>	Sympy provides two different internal kinds of representation of associative words.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L401'>letter_form</a>()</tt>	The letter representation of a freegroupelement is a tuple of generator symbols with each entry corresponding to a group.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L452'>ext_rep</a>()</tt>	This is called the external representation of freegroupelement.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L502'>__mul__</a>(other)</tt>	Returns the product of elements belonging to the same freegroup.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L551'>inverse</a>()</tt>	Returns the inverse of a freegroupelement element examples.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L570'>order</a>()</tt>	Find the order of a freegroupelement.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L587'>commutator</a>(other)</tt>	Returns the commutator of self and x: ~x*~self*x*self.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L597'>eliminate_word</a>(gen,by)</tt>	For an associative word self, a generator gen, and an associative word by eliminate_word returns the associative word obtained by.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L643'>__len__</a>()</tt>	For an associative word self, returns the number of letters in it.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L663'>__eq__</a>(other)</tt>	Two associative words are equal if they are words over the same alphabet and if they are sequences of the same letters.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L698'>__lt__</a>(other)</tt>	The ordering of associative words is defined by length and lexicography this ordering is called short-lex ordering that.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L774'>exponent_sum</a>(gen)</tt>	For an associative word self and a generator or inverse of generator gen, exponent_sum returns the number of times gen appears in.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L805'>generator_count</a>(gen)</tt>	For an associative word self and a generator gen, generator_count returns the multiplicity of generator.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L833'>subword</a>(from_i,to_j)</tt>	For an associative word self and two positive integers from_i and to_j, subword returns the subword of self that begins at position.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L929'>cyclic_conjugates</a>()</tt>	Returns a words which are cyclic to the word self.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L952'>is_cyclic_conjugate</a>(w)</tt>	Checks whether words self, w are cyclic conjugates.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L985'>number_syllables</a>()</tt>	Returns the number of syllables of the associative word self.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L999'>exponent_syllable</a>(i)</tt>	Returns the exponent of the i-th syllable of the associative word self.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L1016'>generator_syllable</a>(i)</tt>	Returns the number of the generator that is involved in the i-th syllable of the associative word self.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L1033'>sub_syllables</a>(from_i,to_j)</tt>	Sub_syllables returns the subword of the associative word self that consists of syllables from positions from_to to to_j, where.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L1061'>substituted_word</a>(from_i,to_j,by)</tt>	Returns the associative word obtained by replacing the subword of self that begins at position from_i and ends at position to_j.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L1092'>is_cyclically_reduced</a>()</tt>	Returns whether the word is cyclically reduced or not.
<tt style='background-color:#E8E8E8;'> combinatorics.FreeGroupElement <a href=' /combinatorics/free_groups.py#L1113'>identity_cyclic_reduction</a>()</tt>	Return a unique cyclically reduced version of the word.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/free_groups.py#L1146'>letter_form_to_array_form</a>(array_form,group)</tt>	This method converts a list given with possible repetitions of elements in it.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/free_groups.py#L1182'>zero_mul_simp</a>(l,index)</tt>	Used to combine two reduced words.
<tt style='background-color:#E8E8E8;'> combinatorics.Partition <a href=' /combinatorics/partitions.py#L29'>__new__</a>(cls)</tt>	Generates a new partition object.
<tt style='background-color:#E8E8E8;'> combinatorics.Partition <a href=' /combinatorics/partitions.py#L66'>sort_key</a>(order)</tt>	Return a canonical key that can be used for sorting.
<tt style='background-color:#E8E8E8;'> combinatorics.Partition <a href=' /combinatorics/partitions.py#L93'>partition</a>()</tt>	Return partition as a sorted list of lists.
<tt style='background-color:#E8E8E8;'> combinatorics.Partition <a href=' /combinatorics/partitions.py#L109'>__add__</a>(other)</tt>	Return permutation whose rank is other greater than current rank mod the maximum rank for the set.
<tt style='background-color:#E8E8E8;'> combinatorics.Partition <a href=' /combinatorics/partitions.py#L133'>__sub__</a>(other)</tt>	Return permutation whose rank is other less than current rank mod the maximum rank for the set.
<tt style='background-color:#E8E8E8;'> combinatorics.Partition <a href=' /combinatorics/partitions.py#L152'>__le__</a>(other)</tt>	Checks if a partition is less than or equal to the other based on rank.
<tt style='background-color:#E8E8E8;'> combinatorics.Partition <a href=' /combinatorics/partitions.py#L172'>__lt__</a>(other)</tt>	Checks if a partition is less than the other.
<tt style='background-color:#E8E8E8;'> combinatorics.Partition <a href=' /combinatorics/partitions.py#L189'>rank</a>()</tt>	Gets the rank of a partition.
<tt style='background-color:#E8E8E8;'> combinatorics.Partition <a href=' /combinatorics/partitions.py#L207'>RGS</a>()</tt>	Returns the "restricted growth string" of the partition.
<tt style='background-color:#E8E8E8;'> combinatorics.Partition <a href=' /combinatorics/partitions.py#L239'>from_rgs</a>(rgs,elements)</tt>	Creates a set partition from a restricted growth string.
<tt style='background-color:#E8E8E8;'> combinatorics.IntegerPartition <a href=' /combinatorics/partitions.py#L300'>__new__</a>(cls,partition,integer)</tt>	Generates a new integerpartition object from a list or dictionary.
<tt style='background-color:#E8E8E8;'> combinatorics.IntegerPartition <a href=' /combinatorics/partitions.py#L359'>prev_lex</a>()</tt>	Return the previous partition of the integer n in lexical order wrapping around to [1.
<tt style='background-color:#E8E8E8;'> combinatorics.IntegerPartition <a href=' /combinatorics/partitions.py#L396'>next_lex</a>()</tt>	Return the next partition of the integer n in lexical order wrapping around to [n] if the partition is [1.
<tt style='background-color:#E8E8E8;'> combinatorics.IntegerPartition <a href=' /combinatorics/partitions.py#L446'>as_dict</a>()</tt>	Return the partition as a dictionary whose keys are the partition integers and the values are the multiplicity of that.
<tt style='background-color:#E8E8E8;'> combinatorics.IntegerPartition <a href=' /combinatorics/partitions.py#L464'>conjugate</a>()</tt>	Computes the conjugate partition of itself.
<tt style='background-color:#E8E8E8;'> combinatorics.IntegerPartition <a href=' /combinatorics/partitions.py#L488'>__lt__</a>(other)</tt>	Return true if self is less than other when the partition is listed from smallest to biggest.
<tt style='background-color:#E8E8E8;'> combinatorics.IntegerPartition <a href=' /combinatorics/partitions.py#L507'>__le__</a>(other)</tt>	Return true if self is less than other when the partition is listed from smallest to biggest.
<tt style='background-color:#E8E8E8;'> combinatorics.IntegerPartition <a href=' /combinatorics/partitions.py#L521'>as_ferrers</a>(char)</tt>	Prints the ferrer diagram of a partition.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/partitions.py#L540'>random_integer_partition</a>(n,seed)</tt>	Generates a random integer partition summing to n as a list of reverse-sorted integers.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/partitions.py#L579'>RGS_generalized</a>(m)</tt>	Computes the m + 1 generalized unrestricted growth strings and returns them as rows in matrix.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/partitions.py#L611'>RGS_enum</a>(m)</tt>	Rgs_enum computes the total number of restricted growth strings possible for a superset of size m.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/partitions.py#L648'>RGS_unrank</a>(rank,m)</tt>	Gives the unranked restricted growth string for a given superset size.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/partitions.py#L683'>RGS_rank</a>(rgs)</tt>	Computes the rank of a restricted growth string.
<tt style='background-color:#E8E8E8;'> combinatorics.Polyhedron <a href=' /combinatorics/polyhedron.py#L32'>__new__</a>(cls,corners,faces,pgroup)</tt>	The constructor of the polyhedron group object.
<tt style='background-color:#E8E8E8;'> combinatorics.Polyhedron <a href=' /combinatorics/polyhedron.py#L396'>corners</a>()</tt>	Get the corners of the polyhedron.
<tt style='background-color:#E8E8E8;'> combinatorics.Polyhedron <a href=' /combinatorics/polyhedron.py#L420'>array_form</a>()</tt>	Return the indices of the corners.
<tt style='background-color:#E8E8E8;'> combinatorics.Polyhedron <a href=' /combinatorics/polyhedron.py#L448'>cyclic_form</a>()</tt>	Return the indices of the corners in cyclic notation.
<tt style='background-color:#E8E8E8;'> combinatorics.Polyhedron <a href=' /combinatorics/polyhedron.py#L461'>size</a>()</tt>	Get the number of corners of the polyhedron.
<tt style='background-color:#E8E8E8;'> combinatorics.Polyhedron <a href=' /combinatorics/polyhedron.py#L468'>faces</a>()</tt>	Get the faces of the polyhedron.
<tt style='background-color:#E8E8E8;'> combinatorics.Polyhedron <a href=' /combinatorics/polyhedron.py#L475'>pgroup</a>()</tt>	Get the permutations of the polyhedron.
<tt style='background-color:#E8E8E8;'> combinatorics.Polyhedron <a href=' /combinatorics/polyhedron.py#L482'>edges</a>()</tt>	Given the faces of the polyhedra we can get the edges.
<tt style='background-color:#E8E8E8;'> combinatorics.Polyhedron <a href=' /combinatorics/polyhedron.py#L507'>rotate</a>(perm)</tt>	Apply a permutation to the polyhedron *in place* the permutation.
<tt style='background-color:#E8E8E8;'> combinatorics.Polyhedron <a href=' /combinatorics/polyhedron.py#L574'>reset</a>()</tt>	Return corners to their original positions.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/polyhedron.py#L593'>_pgroup_calcs</a>()</tt>	Return the permutation groups for each of the polyhedra and the face definitions tetrahedron cube octahedron dodecahedron icosahedron.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/group_constructs.py#L11'>DirectProduct</a>()</tt>	Returns the direct product of several groups as a permutation group.
<tt style='background-color:#E8E8E8;'> combinatorics.GrayCode <a href=' /combinatorics/graycode.py#L101'>next</a>(delta)</tt>	Returns the gray code a distance delta (default = 1) from the current value in canonical order.
<tt style='background-color:#E8E8E8;'> combinatorics.GrayCode <a href=' /combinatorics/graycode.py#L119'>selections</a>()</tt>	Returns the number of bit vectors in the gray code.
<tt style='background-color:#E8E8E8;'> combinatorics.GrayCode <a href=' /combinatorics/graycode.py#L134'>n</a>()</tt>	Returns the dimension of the gray code.
<tt style='background-color:#E8E8E8;'> combinatorics.GrayCode <a href=' /combinatorics/graycode.py#L149'>generate_gray</a>()</tt>	Generates the sequence of bit vectors of a gray code.
<tt style='background-color:#E8E8E8;'> combinatorics.GrayCode <a href=' /combinatorics/graycode.py#L197'>skip</a>()</tt>	Skips the bit generation.
<tt style='background-color:#E8E8E8;'> combinatorics.GrayCode <a href=' /combinatorics/graycode.py#L225'>rank</a>()</tt>	Ranks the gray code.
<tt style='background-color:#E8E8E8;'> combinatorics.GrayCode <a href=' /combinatorics/graycode.py#L260'>current</a>()</tt>	Returns the currently referenced gray code as a bit string.
<tt style='background-color:#E8E8E8;'> combinatorics.GrayCode <a href=' /combinatorics/graycode.py#L277'>unrank</a>(n,rank)</tt>	Unranks an n-bit sized gray code of rank k this method exists.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/graycode.py#L310'>random_bitstring</a>(n)</tt>	Generates a random bitlist of length n.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/graycode.py#L324'>gray_to_bin</a>(bin_list)</tt>	Convert from gray coding to binary coding.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/graycode.py#L347'>bin_to_gray</a>(bin_list)</tt>	Convert from binary coding to gray coding.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/graycode.py#L370'>get_subset_from_bitstring</a>(super_set,bitstring)</tt>	Gets the subset defined by the bitstring.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/graycode.py#L393'>graycode_subsets</a>(gray_code_set)</tt>	Generates the subsets as enumerated by a gray code.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L65'>iterate_binary</a>(k)</tt>	This is a helper function it iterates over the.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L91'>next_binary</a>()</tt>	Generates the next binary ordered subset.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L112'>prev_binary</a>()</tt>	Generates the previous binary ordered subset.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L133'>next_lexicographic</a>()</tt>	Generates the next lexicographically ordered subset.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L177'>prev_lexicographic</a>()</tt>	Generates the previous lexicographically ordered subset.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L216'>iterate_graycode</a>(k)</tt>	Helper function used for prev_gray and next_gray.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L240'>next_gray</a>()</tt>	Generates the next gray code ordered subset.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L258'>prev_gray</a>()</tt>	Generates the previous gray code ordered subset.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L276'>rank_binary</a>()</tt>	Computes the binary ordered rank.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L302'>rank_lexicographic</a>()</tt>	Computes the lexicographic ranking of the subset.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L330'>rank_gray</a>()</tt>	Computes the gray code ranking of the subset.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L355'>subset</a>()</tt>	Gets the subset represented by the current instance.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L374'>size</a>()</tt>	Gets the size of the subset.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L393'>superset</a>()</tt>	Gets the superset of the subset.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L412'>superset_size</a>()</tt>	Returns the size of the superset.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L431'>cardinality</a>()</tt>	Returns the number of all possible subsets.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L450'>subset_from_bitlist</a>(super_set,bitlist)</tt>	Gets the subset defined by the bitlist.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L474'>bitlist_from_subset</a>(subset,superset)</tt>	Gets the bitlist corresponding to a subset.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L497'>unrank_binary</a>(rank,superset)</tt>	Gets the binary ordered subset of the specified rank.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L516'>unrank_gray</a>(rank,superset)</tt>	Gets the gray code ordered subset of the specified rank.
<tt style='background-color:#E8E8E8;'> combinatorics.Subset <a href=' /combinatorics/subsets.py#L537'>subset_indices</a>(subset,superset)</tt>	Return indices of subset in superset in a list the list is empty if all elements of subset are not in superset.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/subsets.py#L569'>ksubsets</a>(superset,k)</tt>	Finds the subsets of size k in lexicographic order.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/fp_groups.py#L33'>_parse_relators</a>(rels)</tt>	Parse the passed relators.
<tt style='background-color:#E8E8E8;'> combinatorics.FpGroup <a href=' /combinatorics/fp_groups.py#L79'>coset_enumeration</a>(H,strategy)</tt>	Return an instance of coset table, when todd-coxeter algorithm is run over the self with h as subgroup using strategy.
<tt style='background-color:#E8E8E8;'> combinatorics.FpGroup <a href=' /combinatorics/fp_groups.py#L94'>standardize_coset_table</a>()</tt>	Standardized the coset table self and makes the internal variable _is_standardized equal to true.
<tt style='background-color:#E8E8E8;'> combinatorics.FpGroup <a href=' /combinatorics/fp_groups.py#L103'>coset_table</a>(H,strategy)</tt>	Return the mathematical coset table of self in h.
<tt style='background-color:#E8E8E8;'> combinatorics.FpGroup <a href=' /combinatorics/fp_groups.py#L122'>order</a>(strategy)</tt>	Returns the order of the finitely presented group self it uses.
<tt style='background-color:#E8E8E8;'> combinatorics.FpGroup <a href=' /combinatorics/fp_groups.py#L147'>index</a>(H,strategy)</tt>	Returns the index of subgroup h in group self.
<tt style='background-color:#E8E8E8;'> combinatorics.FpGroup <a href=' /combinatorics/fp_groups.py#L174'>_generators</a>()</tt>	Returns the generators of the associated free group.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L255'>omega</a>()</tt>	Set of live cosets.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L260'>copy</a>()</tt>	Return a shallow copy of coset table instance self.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L277'>n</a>()</tt>	The number n represents the length of the sublist containing the live cosets.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L288'>is_complete</a>()</tt>	The coset table is called complete if it has no undefined entries on the live cosets that is \alpha^x is defined for all.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L298'>define</a>(alpha,x)</tt>	This routine is used in the relator-based strategy of todd-coxeter algorithm if some \alpha^x is undefined.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L330'>define_c</a>(alpha,x)</tt>	A variation of define routine described on pg 165 [1], used in.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L359'>scan_c</a>(alpha,word)</tt>	A variation of scan routine described on pg 165 of [1], which.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L405'>coincidence_c</a>(alpha,beta)</tt>	A variation of coincidence routine used in the coset-table based method of coset enumeration.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L443'>scan</a>(alpha,word)</tt>	Scan performs a scanning process on the input word.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L507'>scan_check</a>(alpha,word)</tt>	Another version of scan routine described on it checks whether \alpha scans correctly under word, it is a straightforward.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L550'>merge</a>(k,lamda,q)</tt>	Input 'k', 'lamda' being the two class representatives to be merged.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L580'>rep</a>(k)</tt>	Input k \in [0 \ldots n-1], as for self only array p is used =====.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L633'>coincidence</a>(alpha,beta)</tt>	The third situation described in scan routine is handled by this routine described on pg.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L676'>scan_and_fill</a>(alpha,word)</tt>	A modified version of scan routine used in the relator-based method of coset enumeration described on pg.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L716'>scan_and_fill_c</a>(alpha,word)</tt>	A modified version of scan routine described on pg 165 second.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L760'>look_ahead</a>()</tt>	When combined with the hlt method this is known as hlt+lookahead method of coset enumeration described on pg.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L780'>process_deductions</a>(R_c_x,R_c_x_inv)</tt>	Processes the deductions that have been pushed onto deduction_stack, described on pg.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L810'>process_deductions_check</a>(R_c_x,R_c_x_inv)</tt>	A variation of process_deductions, this calls scan_check wherever process_deductions calls scan, described on pg.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L834'>switch</a>(beta,gamma)</tt>	Switch the elements \beta \gamma \in \omega of self, used by the standardize procedure described on pg.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L857'>standardize</a>()</tt>	A coset table is standardized if when running through the cosets and within each coset through the generator images (ignoring generator.
<tt style='background-color:#E8E8E8;'> combinatorics.CosetTable <a href=' /combinatorics/fp_groups.py#L902'>compress</a>()</tt>	Removes the non-live cosets from the coset table described on pg.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/fp_groups.py#L949'>coset_enumeration_r</a>(fp_grp,Y)</tt>	This is easier of the two implemented methods of coset enumeration.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/fp_groups.py#L1118'>coset_enumeration_c</a>(fp_grp,Y)</tt>	>>> from sympy combinatorics free_groups import free_group.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/fp_groups.py#L1168'>low_index_subgroups</a>(G,N,Y)</tt>	Implements the low index subgroups algorithm i e find all subgroups of.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/fp_groups.py#L1250'>try_descendant</a>(S,C,R1_c_list,R2)</tt>	Solves the problem of trying out each individual possibility for \alpha^x.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/fp_groups.py#L1274'>first_in_class</a>(C,Y)</tt>	Checks whether the subgroup h=g1 corresponding to the coset table could possibly be the canonical representative of its conjugacy class.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/fp_groups.py#L1545'>elimination_technique_2</a>(C)</tt>	This technique eliminates one generator at a time heuristically this.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/fp_groups.py#L1585'>simplify_presentation</a>(C)</tt>	Relies upon _simplification_technique_1 for its functioning.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/fp_groups.py#L1594'>_simplification_technique_1</a>(rels)</tt>	All relators are checked to see if they are of the form gen^n if any.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/fp_groups.py#L1670'>reidemeister_presentation</a>(fp_grp,H,elm_rounds,simp_rounds)</tt>	Fp_group a finitely presented group an instance of fpgroup h a subgroup whose presentation is to be found given as a list.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/testutil.py#L10'>_cmp_perm_lists</a>(first,second)</tt>	Compare two lists of permutations as sets.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/testutil.py#L81'>_verify_bsgs</a>(group,base,gens)</tt>	Verify the correctness of a base and strong generating set.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/testutil.py#L119'>_verify_centralizer</a>(group,arg,centr)</tt>	Verify the centralizer of a group/set/element inside another group.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/testutil.py#L196'>canonicalize_naive</a>(g,dummies,sym)</tt>	Canonicalize tensor formed by tensors of the different types g permutation representing the tensor.
<tt style='background-color:#E8E8E8;'> combinatorics. <a href=' /combinatorics/testutil.py#L266'>graph_certificate</a>(gr)</tt>	Return a certificate for the graph gr adjacency list.
<tt style='background-color:#E8E8E8;'> functions.elementary. <a href=' /functions/elementary/trigonometric.py#L93'>_peeloff_pi</a>(arg)</tt>	Split arg into two parts a "rest" and a multiple of pi/2.
<tt style='background-color:#E8E8E8;'> functions.elementary. <a href=' /functions/elementary/trigonometric.py#L126'>_pi_coeff</a>(arg,cycles)</tt>	When arg is a number times pi (e g 3*pi/2) then return the number.
<tt style='background-color:#E8E8E8;'> functions.elementary.tan <a href=' /functions/elementary/trigonometric.py#L916'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.cot <a href=' /functions/elementary/trigonometric.py#L1203'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.asin <a href=' /functions/elementary/trigonometric.py#L1957'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.acos <a href=' /functions/elementary/trigonometric.py#L2097'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.atan <a href=' /functions/elementary/trigonometric.py#L2254'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.acot <a href=' /functions/elementary/trigonometric.py#L2394'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.asec <a href=' /functions/elementary/trigonometric.py#L2491'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.acsc <a href=' /functions/elementary/trigonometric.py#L2583'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.sinh <a href=' /functions/elementary/hyperbolic.py#L48'>fdiff</a>(argindex)</tt>	Returns the first derivative of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.sinh <a href=' /functions/elementary/hyperbolic.py#L57'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.sinh <a href=' /functions/elementary/hyperbolic.py#L107'>taylor_term</a>(n,x)</tt>	Returns the next term in the taylor series expansion.
<tt style='background-color:#E8E8E8;'> functions.elementary.sinh <a href=' /functions/elementary/hyperbolic.py#L127'>as_real_imag</a>(deep)</tt>	Returns this function as a complex coordinate.
<tt style='background-color:#E8E8E8;'> functions.elementary.tanh <a href=' /functions/elementary/hyperbolic.py#L365'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.coth <a href=' /functions/elementary/hyperbolic.py#L497'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.csch <a href=' /functions/elementary/hyperbolic.py#L694'>fdiff</a>(argindex)</tt>	Returns the first derivative of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.csch <a href=' /functions/elementary/hyperbolic.py#L703'>taylor_term</a>(n,x)</tt>	Returns the next term in the taylor series expansion.
<tt style='background-color:#E8E8E8;'> functions.elementary.asinh <a href=' /functions/elementary/hyperbolic.py#L849'>_eval_rewrite_as_log</a>(x)</tt>	Rewrites asinh as log function.
<tt style='background-color:#E8E8E8;'> functions.elementary.asinh <a href=' /functions/elementary/hyperbolic.py#L855'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.acosh <a href=' /functions/elementary/hyperbolic.py#L957'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.atanh <a href=' /functions/elementary/hyperbolic.py#L1032'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.acoth <a href=' /functions/elementary/hyperbolic.py#L1104'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.asech <a href=' /functions/elementary/hyperbolic.py#L1228'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.acsch <a href=' /functions/elementary/hyperbolic.py#L1322'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.ExprCondPair <a href=' /functions/elementary/piecewise.py#L21'>expr</a>()</tt>	Returns the expression of this pair.
<tt style='background-color:#E8E8E8;'> functions.elementary.ExprCondPair <a href=' /functions/elementary/piecewise.py#L28'>cond</a>()</tt>	Returns the condition of this pair.
<tt style='background-color:#E8E8E8;'> functions.elementary.ExprCondPair <a href=' /functions/elementary/piecewise.py#L35'>free_symbols</a>()</tt>	Return the free symbols of this pair.
<tt style='background-color:#E8E8E8;'> functions.elementary.Piecewise <a href=' /functions/elementary/piecewise.py#L167'>doit</a>()</tt>	Evaluate this piecewise function.
<tt style='background-color:#E8E8E8;'> functions.elementary.Piecewise <a href=' /functions/elementary/piecewise.py#L202'>_eval_interval</a>(sym,a,b)</tt>	Evaluates the function along the sym in a given interval ab.
<tt style='background-color:#E8E8E8;'> functions.elementary.Piecewise <a href=' /functions/elementary/piecewise.py#L287'>_sort_expr_cond</a>(sym,a,b,targetcond)</tt>	Determine what intervals the expr cond pairs affect.
<tt style='background-color:#E8E8E8;'> functions.elementary.Piecewise <a href=' /functions/elementary/piecewise.py#L444'>_eval_subs</a>(old,new)</tt>	Piecewise conditions may contain bool which are not of basic type.
<tt style='background-color:#E8E8E8;'> functions.elementary.Piecewise <a href=' /functions/elementary/piecewise.py#L500'>__eval_cond</a>(cls,cond)</tt>	Return the truth value of the condition.
<tt style='background-color:#E8E8E8;'> functions.elementary. <a href=' /functions/elementary/piecewise.py#L522'>piecewise_fold</a>(expr)</tt>	Takes an expression containing a piecewise function and returns the expression in piecewise form.
<tt style='background-color:#E8E8E8;'> functions.elementary.re <a href=' /functions/elementary/complexes.py#L92'>as_real_imag</a>(deep)</tt>	Returns the real number with a zero imaginary part.
<tt style='background-color:#E8E8E8;'> functions.elementary.im <a href=' /functions/elementary/complexes.py#L187'>as_real_imag</a>(deep)</tt>	Return the imaginary part with a zero real part.
<tt style='background-color:#E8E8E8;'> functions.elementary.Abs <a href=' /functions/elementary/complexes.py#L420'>fdiff</a>(argindex)</tt>	Get the first derivative of the argument to abs().
<tt style='background-color:#E8E8E8;'> functions.elementary.polar_lift <a href=' /functions/elementary/complexes.py#L826'>_eval_evalf</a>(prec)</tt>	Careful! any evalf of polar numbers is flaky.
<tt style='background-color:#E8E8E8;'> functions.elementary. <a href=' /functions/elementary/complexes.py#L1046'>polarify</a>(eq,subs,lift)</tt>	Turn all numbers in eq into their polar equivalents under the standard choice of argument.
<tt style='background-color:#E8E8E8;'> functions.elementary. <a href=' /functions/elementary/complexes.py#L1125'>unpolarify</a>(eq,subs,exponents_only)</tt>	If p denotes the projection from the riemann surface of the logarithm to the complex line return a simplified version eq' of eq such that.
<tt style='background-color:#E8E8E8;'> functions.elementary. <a href=' /functions/elementary/miscellaneous.py#L50'>sqrt</a>(arg)</tt>	The square root function sqrt x -> returns the principal square root of x.
<tt style='background-color:#E8E8E8;'> functions.elementary. <a href=' /functions/elementary/miscellaneous.py#L118'>cbrt</a>(arg)</tt>	This function computes the principial cube root of arg, so it's just a shortcut for arg**rational 1 3.
<tt style='background-color:#E8E8E8;'> functions.elementary. <a href=' /functions/elementary/miscellaneous.py#L168'>root</a>(arg,n,k)</tt>	Root x n k -> returns the k-th n-th root of x defaulting to the principle root (k=0).
<tt style='background-color:#E8E8E8;'> functions.elementary. <a href=' /functions/elementary/miscellaneous.py#L258'>real_root</a>(arg,n)</tt>	Return the real nth-root of arg if possible if n is omitted then.
<tt style='background-color:#E8E8E8;'> functions.elementary.MinMaxBase <a href=' /functions/elementary/miscellaneous.py#L357'>_new_args_filter</a>(cls,arg_sequence)</tt>	Generator filtering args.
<tt style='background-color:#E8E8E8;'> functions.elementary.MinMaxBase <a href=' /functions/elementary/miscellaneous.py#L382'>_find_localzeros</a>(cls,values)</tt>	Sequentially allocate values to localzeros.
<tt style='background-color:#E8E8E8;'> functions.elementary.MinMaxBase <a href=' /functions/elementary/miscellaneous.py#L409'>_is_connected</a>(cls,x,y)</tt>	Check if x and y are connected somehow.
<tt style='background-color:#E8E8E8;'> functions.elementary.ExpBase <a href=' /functions/elementary/exponential.py#L35'>inverse</a>(argindex)</tt>	Returns the inverse function of exp x.
<tt style='background-color:#E8E8E8;'> functions.elementary.ExpBase <a href=' /functions/elementary/exponential.py#L41'>as_numer_denom</a>()</tt>	Returns this with a positive exponent as a 2-tuple a fraction.
<tt style='background-color:#E8E8E8;'> functions.elementary.ExpBase <a href=' /functions/elementary/exponential.py#L65'>exp</a>()</tt>	Returns the exponent of the function.
<tt style='background-color:#E8E8E8;'> functions.elementary.ExpBase <a href=' /functions/elementary/exponential.py#L72'>as_base_exp</a>()</tt>	Returns the 2-tuple base exponent.
<tt style='background-color:#E8E8E8;'> functions.elementary.ExpBase <a href=' /functions/elementary/exponential.py#L104'>_eval_power</a>(other)</tt>	Exp arg **e -> exp(arg*e) if assumptions allow it.
<tt style='background-color:#E8E8E8;'> functions.elementary.exp_polar <a href=' /functions/elementary/exponential.py#L159'>_eval_evalf</a>(prec)</tt>	Careful! any evalf of polar numbers is flaky.
<tt style='background-color:#E8E8E8;'> functions.elementary.exp <a href=' /functions/elementary/exponential.py#L199'>fdiff</a>(argindex)</tt>	Returns the first derivative of this function.
<tt style='background-color:#E8E8E8;'> functions.elementary.exp <a href=' /functions/elementary/exponential.py#L304'>base</a>()</tt>	Returns the base of the exponential function.
<tt style='background-color:#E8E8E8;'> functions.elementary.exp <a href=' /functions/elementary/exponential.py#L311'>taylor_term</a>(n,x)</tt>	Calculates the next term in the taylor series expansion.
<tt style='background-color:#E8E8E8;'> functions.elementary.exp <a href=' /functions/elementary/exponential.py#L328'>as_real_imag</a>(deep)</tt>	Returns this function as a 2-tuple representing a complex number.
<tt style='background-color:#E8E8E8;'> functions.elementary.log <a href=' /functions/elementary/exponential.py#L469'>fdiff</a>(argindex)</tt>	Returns the first derivative of the function.
<tt style='background-color:#E8E8E8;'> functions.elementary.log <a href=' /functions/elementary/exponential.py#L478'>inverse</a>(argindex)</tt>	Returns e^x, the inverse function of \log x.
<tt style='background-color:#E8E8E8;'> functions.elementary.log <a href=' /functions/elementary/exponential.py#L564'>as_base_exp</a>()</tt>	Returns this function in the form base exponent.
<tt style='background-color:#E8E8E8;'> functions.elementary.log <a href=' /functions/elementary/exponential.py#L570'>taylor_term</a>(n,x)</tt>	Returns the next term in the taylor series expansion of \log 1+x.
<tt style='background-color:#E8E8E8;'> functions.elementary.log <a href=' /functions/elementary/exponential.py#L641'>as_real_imag</a>(deep)</tt>	Returns this function as a complex coordinate.
<tt style='background-color:#E8E8E8;'> functions.elementary.LambertW <a href=' /functions/elementary/exponential.py#L815'>fdiff</a>(argindex)</tt>	Return the first derivative of this function.
<tt style='background-color:#E8E8E8;'> functions.combinatorial.bell <a href=' /functions/combinatorial/numbers.py#L406'>_bell_incomplete_poly</a>(n,k,symbols)</tt>	The second kind of bell polynomials incomplete bell polynomials.
<tt style='background-color:#E8E8E8;'> functions.combinatorial. <a href=' /functions/combinatorial/numbers.py#L1025'>_multiset_histogram</a>(n)</tt>	Return tuple used in permutation and combination counting input.
<tt style='background-color:#E8E8E8;'> functions.combinatorial. <a href=' /functions/combinatorial/numbers.py#L1053'>nP</a>(n,k,replacement)</tt>	Return the number of permutations of n items taken k at a time.
<tt style='background-color:#E8E8E8;'> functions.combinatorial. <a href=' /functions/combinatorial/numbers.py#L1171'>_AOP_product</a>(n)</tt>	For n = (m1 m2 mk) return the coefficients of the polynomial.
<tt style='background-color:#E8E8E8;'> functions.combinatorial. <a href=' /functions/combinatorial/numbers.py#L1224'>nC</a>(n,k,replacement)</tt>	Return the number of combinations of n items taken k at a time.
<tt style='background-color:#E8E8E8;'> functions.combinatorial. <a href=' /functions/combinatorial/numbers.py#L1357'>stirling</a>(n,k,d,kind)</tt>	Return stirling number s n k of the first or second default kind.
<tt style='background-color:#E8E8E8;'> functions.combinatorial. <a href=' /functions/combinatorial/numbers.py#L1474'>nT</a>(n,k)</tt>	Return the number of k-sized partitions of n items.
<tt style='background-color:#E8E8E8;'> functions.combinatorial.binomial <a href=' /functions/combinatorial/factorials.py#L825'>_eval_expand_func</a>()</tt>	Function to expand binomial n k when m is positive integer also.
<tt style='background-color:#E8E8E8;'> functions.special. <a href=' /functions/special/tensor_functions.py#L15'>Eijk</a>()</tt>	Represent the levi-civita symbol.
<tt style='background-color:#E8E8E8;'> functions.special. <a href=' /functions/special/tensor_functions.py#L30'>eval_levicivita</a>()</tt>	Evaluate levi-civita symbol.
<tt style='background-color:#E8E8E8;'> functions.special.KroneckerDelta <a href=' /functions/special/tensor_functions.py#L135'>eval</a>(cls,i,j)</tt>	Evaluates the discrete delta function.
<tt style='background-color:#E8E8E8;'> functions.special.KroneckerDelta <a href=' /functions/special/tensor_functions.py#L182'>is_above_fermi</a>()</tt>	True if delta can be non-zero above fermi examples.
<tt style='background-color:#E8E8E8;'> functions.special.KroneckerDelta <a href=' /functions/special/tensor_functions.py#L216'>is_below_fermi</a>()</tt>	True if delta can be non-zero below fermi examples.
<tt style='background-color:#E8E8E8;'> functions.special.KroneckerDelta <a href=' /functions/special/tensor_functions.py#L249'>is_only_above_fermi</a>()</tt>	True if delta is restricted to above fermi examples.
<tt style='background-color:#E8E8E8;'> functions.special.KroneckerDelta <a href=' /functions/special/tensor_functions.py#L282'>is_only_below_fermi</a>()</tt>	True if delta is restricted to below fermi examples.
<tt style='background-color:#E8E8E8;'> functions.special.KroneckerDelta <a href=' /functions/special/tensor_functions.py#L315'>indices_contain_equal_information</a>()</tt>	Returns true if indices are either both above or below fermi.
<tt style='background-color:#E8E8E8;'> functions.special.KroneckerDelta <a href=' /functions/special/tensor_functions.py#L347'>preferred_index</a>()</tt>	Returns the index which is preferred to keep in the final expression.
<tt style='background-color:#E8E8E8;'> functions.special.KroneckerDelta <a href=' /functions/special/tensor_functions.py#L383'>killable_index</a>()</tt>	Returns the index which is preferred to substitute in the final expression.
<tt style='background-color:#E8E8E8;'> functions.special.KroneckerDelta <a href=' /functions/special/tensor_functions.py#L420'>_get_preferred_index</a>()</tt>	Returns the index which is preferred to keep in the final expression.
<tt style='background-color:#E8E8E8;'> functions.special.BesselBase <a href=' /functions/special/bessel.py#L46'>order</a>()</tt>	The order of the bessel-type function.
<tt style='background-color:#E8E8E8;'> functions.special.BesselBase <a href=' /functions/special/bessel.py#L51'>argument</a>()</tt>	The argument of the bessel-type function.
<tt style='background-color:#E8E8E8;'> functions.special.SphericalBesselBase <a href=' /functions/special/bessel.py#L582'>_expand</a>()</tt>	Expand self into a polynomial nu is guaranteed to be integer.
<tt style='background-color:#E8E8E8;'> functions.special.SphericalBesselBase <a href=' /functions/special/bessel.py#L586'>_rewrite</a>()</tt>	Rewrite self in terms of ordinary bessel functions.
<tt style='background-color:#E8E8E8;'> functions.special. <a href=' /functions/special/bessel.py#L913'>jn_zeros</a>(n,k,method,dps)</tt>	Zeros of the spherical bessel function of the first kind.
<tt style='background-color:#E8E8E8;'> functions.special. <a href=' /functions/special/gamma_functions.py#L944'>digamma</a>(x)</tt>	The digamma function is the first derivative of the loggamma function i e.
<tt style='background-color:#E8E8E8;'> functions.special. <a href=' /functions/special/gamma_functions.py#L975'>trigamma</a>(x)</tt>	The trigamma function is the second derivative of the loggamma function i e.
<tt style='background-color:#E8E8E8;'> functions.special. <a href=' /functions/special/polynomials.py#L216'>jacobi_normalized</a>(n,a,b,x)</tt>	Jacobi polynomial :math p_n^{\left(\alpha \beta\right)} x jacobi_normalized n alpha beta x gives the nth jacobi polynomial.
<tt style='background-color:#E8E8E8;'> functions.special. <a href=' /functions/special/bsplines.py#L9'>_add_splines</a>(c,b1,d,b2)</tt>	Construct c*b1 + d*b2.
<tt style='background-color:#E8E8E8;'> functions.special. <a href=' /functions/special/bsplines.py#L33'>bspline_basis</a>(d,knots,n,x)</tt>	The n-th b-spline at x of degree d with knots.
<tt style='background-color:#E8E8E8;'> functions.special. <a href=' /functions/special/bsplines.py#L128'>bspline_basis_set</a>(d,knots,x)</tt>	Return the len knots -d-1 b-splines at x of degree d with knots.
<tt style='background-color:#E8E8E8;'> functions.special.TupleArg <a href=' /functions/special/hyper.py#L16'>limit</a>(x,xlim,dir)</tt>	Compute limit x->xlim.
<tt style='background-color:#E8E8E8;'> functions.special. <a href=' /functions/special/hyper.py#L27'>_prep_tuple</a>(v)</tt>	Turn an iterable argument v into a tuple and unpolarify since both hypergeometric and meijer g-functions are unbranched in their parameters.
<tt style='background-color:#E8E8E8;'> functions.special.hyper <a href=' /functions/special/hyper.py#L218'>argument</a>()</tt>	Argument of the hypergeometric function.
<tt style='background-color:#E8E8E8;'> functions.special.hyper <a href=' /functions/special/hyper.py#L223'>ap</a>()</tt>	Numerator parameters of the hypergeometric function.
<tt style='background-color:#E8E8E8;'> functions.special.hyper <a href=' /functions/special/hyper.py#L228'>bq</a>()</tt>	Denominator parameters of the hypergeometric function.
<tt style='background-color:#E8E8E8;'> functions.special.hyper <a href=' /functions/special/hyper.py#L237'>eta</a>()</tt>	A quantity related to the convergence of the series.
<tt style='background-color:#E8E8E8;'> functions.special.hyper <a href=' /functions/special/hyper.py#L242'>radius_of_convergence</a>()</tt>	Compute the radius of convergence of the defining series.
<tt style='background-color:#E8E8E8;'> functions.special.hyper <a href=' /functions/special/hyper.py#L287'>convergence_statement</a>()</tt>	Return a condition on z under which the series converges.
<tt style='background-color:#E8E8E8;'> functions.special.meijerg <a href=' /functions/special/hyper.py#L569'>get_period</a>()</tt>	Return a number p such that g(x*exp(i*p)) == g x.
<tt style='background-color:#E8E8E8;'> functions.special.meijerg <a href=' /functions/special/hyper.py#L647'>integrand</a>(s)</tt>	Get the defining integrand d s.
<tt style='background-color:#E8E8E8;'> functions.special.meijerg <a href=' /functions/special/hyper.py#L656'>argument</a>()</tt>	Argument of the meijer g-function.
<tt style='background-color:#E8E8E8;'> functions.special.meijerg <a href=' /functions/special/hyper.py#L661'>an</a>()</tt>	First set of numerator parameters.
<tt style='background-color:#E8E8E8;'> functions.special.meijerg <a href=' /functions/special/hyper.py#L666'>ap</a>()</tt>	Combined numerator parameters.
<tt style='background-color:#E8E8E8;'> functions.special.meijerg <a href=' /functions/special/hyper.py#L671'>aother</a>()</tt>	Second set of numerator parameters.
<tt style='background-color:#E8E8E8;'> functions.special.meijerg <a href=' /functions/special/hyper.py#L676'>bm</a>()</tt>	First set of denominator parameters.
<tt style='background-color:#E8E8E8;'> functions.special.meijerg <a href=' /functions/special/hyper.py#L681'>bq</a>()</tt>	Combined denominator parameters.
<tt style='background-color:#E8E8E8;'> functions.special.meijerg <a href=' /functions/special/hyper.py#L686'>bother</a>()</tt>	Second set of denominator parameters.
<tt style='background-color:#E8E8E8;'> functions.special.meijerg <a href=' /functions/special/hyper.py#L695'>nu</a>()</tt>	A quantity related to the convergence region of the integral c.
<tt style='background-color:#E8E8E8;'> functions.special.meijerg <a href=' /functions/special/hyper.py#L701'>delta</a>()</tt>	A quantity related to the convergence region of the integral c.
<tt style='background-color:#E8E8E8;'> functions.special.HyperRep <a href=' /functions/special/hyper.py#L731'>_expr_small</a>(cls,x)</tt>	An expression for f x which holds for |x| < 1.
<tt style='background-color:#E8E8E8;'> functions.special.HyperRep <a href=' /functions/special/hyper.py#L736'>_expr_small_minus</a>(cls,x)</tt>	An expression for f -x which holds for |x| < 1.
<tt style='background-color:#E8E8E8;'> functions.special.HyperRep <a href=' /functions/special/hyper.py#L741'>_expr_big</a>(cls,x,n)</tt>	An expression for f(exp_polar(2*i*pi*n)*x), |x| > 1.
<tt style='background-color:#E8E8E8;'> functions.special.HyperRep <a href=' /functions/special/hyper.py#L746'>_expr_big_minus</a>(cls,x,n)</tt>	An expression for f(exp_polar(2*i*pi*n + pi*i)*x), |x| > 1.
<tt style='background-color:#E8E8E8;'> functions.special.erf <a href=' /functions/special/error_functions.py#L107'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.special.erfc <a href=' /functions/special/error_functions.py#L299'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.special.erfinv <a href=' /functions/special/error_functions.py#L764'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.special.erfcinv <a href=' /functions/special/error_functions.py#L842'>inverse</a>(argindex)</tt>	Returns the inverse of this function.
<tt style='background-color:#E8E8E8;'> functions.special. <a href=' /functions/special/error_functions.py#L1293'>E1</a>(z)</tt>	Classical case of the generalized exponential integral.
<tt style='background-color:#E8E8E8;'> functions.special. <a href=' /functions/special/spherical_harmonics.py#L241'>Ynm_c</a>(n,m,theta,phi)</tt>	Conjugate spherical harmonics defined as.
<tt style='background-color:#E8E8E8;'> functions.special.SingularityFunction <a href=' /functions/special/singularity_functions.py#L85'>fdiff</a>(argindex)</tt>	Returns the first derivative of a diracdelta function.
<tt style='background-color:#E8E8E8;'> functions.special.SingularityFunction <a href=' /functions/special/singularity_functions.py#L108'>eval</a>(cls,variable,offset,exponent)</tt>	Returns a simplified form or a value of singularity function depending on the argument passed by the object.
<tt style='background-color:#E8E8E8;'> functions.special.SingularityFunction <a href=' /functions/special/singularity_functions.py#L171'>_eval_rewrite_as_Piecewise</a>()</tt>	Converts a singularity function expression into its piecewise form.
<tt style='background-color:#E8E8E8;'> functions.special.SingularityFunction <a href=' /functions/special/singularity_functions.py#L185'>_eval_rewrite_as_Heaviside</a>()</tt>	Rewrites a singularity function expression using heavisides and diracdeltas.
<tt style='background-color:#E8E8E8;'> functions.special.DiracDelta <a href=' /functions/special/delta_functions.py#L99'>fdiff</a>(argindex)</tt>	Returns the first derivative of a diracdelta function.
<tt style='background-color:#E8E8E8;'> functions.special.DiracDelta <a href=' /functions/special/delta_functions.py#L138'>eval</a>(cls,arg,k)</tt>	Returns a simplified form or a value of diracdelta depending on the argument passed by the diracdelta object.
<tt style='background-color:#E8E8E8;'> functions.special.DiracDelta <a href=' /functions/special/delta_functions.py#L203'>_eval_expand_diracdelta</a>()</tt>	Compute a simplified representation of the function using property number 4.
<tt style='background-color:#E8E8E8;'> functions.special.DiracDelta <a href=' /functions/special/delta_functions.py#L268'>is_simple</a>(x)</tt>	Is_simple self x tells whether the argument(args[0]) of diracdelta is a linear.
<tt style='background-color:#E8E8E8;'> functions.special.DiracDelta <a href=' /functions/special/delta_functions.py#L306'>_eval_rewrite_as_Piecewise</a>()</tt>	Represents diracdelta in a piecewise form examples.
<tt style='background-color:#E8E8E8;'> functions.special.DiracDelta <a href=' /functions/special/delta_functions.py#L331'>_eval_rewrite_as_SingularityFunction</a>()</tt>	Returns the diracdelta expression written in the form of singularity functions.
<tt style='background-color:#E8E8E8;'> functions.special.Heaviside <a href=' /functions/special/delta_functions.py#L417'>fdiff</a>(argindex)</tt>	Returns the first derivative of a heaviside function.
<tt style='background-color:#E8E8E8;'> functions.special.Heaviside <a href=' /functions/special/delta_functions.py#L449'>eval</a>(cls,arg,H0)</tt>	Returns a simplified form or a value of heaviside depending on the argument passed by the heaviside object.
<tt style='background-color:#E8E8E8;'> functions.special.Heaviside <a href=' /functions/special/delta_functions.py#L508'>_eval_rewrite_as_Piecewise</a>(arg,H0)</tt>	Represents heaviside in a piecewise form examples.
<tt style='background-color:#E8E8E8;'> functions.special.Heaviside <a href=' /functions/special/delta_functions.py#L535'>_eval_rewrite_as_sign</a>(arg,H0)</tt>	Represents the heaviside function in the form of sign function.
<tt style='background-color:#E8E8E8;'> functions.special.Heaviside <a href=' /functions/special/delta_functions.py#L577'>_eval_rewrite_as_SingularityFunction</a>(args)</tt>	Returns the heaviside expression written in the form of singularity functions.
