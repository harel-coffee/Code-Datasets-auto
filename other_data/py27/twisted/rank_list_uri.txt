<tt style='background-color:#E8E8E8;'> core. <a href=' /plugin.py#L20'>_determinePickleModule</a>()</tt>	Determine which 'pickle' api module to use.
<tt style='background-color:#E8E8E8;'> core. <a href=' /plugin.py#L126'>getCache</a>(module)</tt>	Compute all the possible loadable plugins while loading as few as possible and hitting the filesystem as little as possible.
<tt style='background-color:#E8E8E8;'> core. <a href=' /plugin.py#L199'>getPlugins</a>(interface,package)</tt>	Retrieve all plugins implementing the given interface beneath the given module.
<tt style='background-color:#E8E8E8;'> core. <a href=' /plugin.py#L229'>pluginPackagePaths</a>(name)</tt>	Return a list of additional directories which should be searched for modules to be included as part of the named plugin package.
<tt style='background-color:#E8E8E8;'> news.INewsStorage <a href=' /news/database.py#L98'>listRequest</a>()</tt>	Returns a deferred whose callback will be passed a list of 4-tuples.
<tt style='background-color:#E8E8E8;'> news.INewsStorage <a href=' /news/database.py#L105'>subscriptionRequest</a>()</tt>	Returns a deferred whose callback will be passed the list of.
<tt style='background-color:#E8E8E8;'> news.INewsStorage <a href=' /news/database.py#L112'>postRequest</a>(message)</tt>	Returns a deferred whose callback will be invoked if 'message' is successfully posted to one or more specified groups and.
<tt style='background-color:#E8E8E8;'> news.INewsStorage <a href=' /news/database.py#L120'>overviewRequest</a>()</tt>	Returns a deferred whose callback will be passed the a list of headers describing this server's overview format.
<tt style='background-color:#E8E8E8;'> news.INewsStorage <a href=' /news/database.py#L127'>xoverRequest</a>(group,low,high)</tt>	Returns a deferred whose callback will be passed a list of xover headers for the given group over the given range.
<tt style='background-color:#E8E8E8;'> news.INewsStorage <a href=' /news/database.py#L136'>xhdrRequest</a>(group,low,high,header)</tt>	Returns a deferred whose callback will be passed a list of xhdr data for the given group over the given range.
<tt style='background-color:#E8E8E8;'> news.INewsStorage <a href=' /news/database.py#L145'>listGroupRequest</a>(group)</tt>	Returns a deferred whose callback will be passed a two-tuple of.
<tt style='background-color:#E8E8E8;'> news.INewsStorage <a href=' /news/database.py#L152'>groupRequest</a>(group)</tt>	Returns a deferred whose callback will be passed a five-tuple of.
<tt style='background-color:#E8E8E8;'> news.INewsStorage <a href=' /news/database.py#L159'>articleExistsRequest</a>(id)</tt>	Returns a deferred whose callback will be passed with a true value if a message with the specified message-id exists in the database.
<tt style='background-color:#E8E8E8;'> news.INewsStorage <a href=' /news/database.py#L167'>articleRequest</a>(group,index,id)</tt>	Returns a deferred whose callback will be passed a file-like object containing the full article text headers and body for the article.
<tt style='background-color:#E8E8E8;'> news.INewsStorage <a href=' /news/database.py#L179'>headRequest</a>(group,index)</tt>	Returns a deferred whose callback will be passed the header for the article of the specified index in the specified group and.
<tt style='background-color:#E8E8E8;'> news.INewsStorage <a href=' /news/database.py#L188'>bodyRequest</a>(group,index)</tt>	Returns a deferred whose callback will be passed the body for the article of the specified index in the specified group and.
<tt style='background-color:#E8E8E8;'> news._ModerationMixin <a href=' /news/database.py#L236'>notifyModerators</a>(moderators,article)</tt>	Send an article to a list of group moderators to be moderated.
<tt style='background-color:#E8E8E8;'> news.PickleStorage <a href=' /news/database.py#L292'>__init__</a>(filename,groups,moderators,mailhost)</tt>	@param mailhost a c{str} giving the mail exchange host which will accept moderation emails from this server.
<tt style='background-color:#E8E8E8;'> news.PickleStorage <a href=' /news/database.py#L317'>listRequest</a>()</tt>	Returns a list of 4-tuples name max index min index flags.
<tt style='background-color:#E8E8E8;'> news.NewsShelf <a href=' /news/database.py#L504'>__init__</a>(mailhost,path,sender)</tt>	@param mailhost a c{str} giving the mail exchange host which will accept moderation emails from this server.
<tt style='background-color:#E8E8E8;'> news.NewsShelf <a href=' /news/database.py#L573'>notifyModerator</a>(moderator,article)</tt>	Notify a single moderator about an article requiring moderation.
<tt style='background-color:#E8E8E8;'> news.Options <a href=' /news/tap.py#L105'>opt_group</a>(group)</tt>	The name of a newsgroup to carry.
<tt style='background-color:#E8E8E8;'> news.Options <a href=' /news/tap.py#L110'>opt_moderator</a>(moderator)</tt>	The email of the moderator for the most recently passed group.
<tt style='background-color:#E8E8E8;'> news.Options <a href=' /news/tap.py#L115'>opt_subscription</a>(group)</tt>	A newsgroup to list as a recommended subscription.
<tt style='background-color:#E8E8E8;'> news.Options <a href=' /news/tap.py#L120'>opt_server</a>(server)</tt>	The address of a usenet server to pass messages to and receive messages from.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L96'>gotAllGroups</a>(groups)</tt>	Override for notification when fetchgroups() action is completed.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L100'>getAllGroupsFailed</a>(error)</tt>	Override for notification when fetchgroups() action fails.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L104'>gotOverview</a>(overview)</tt>	Override for notification when fetchoverview() action is completed.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L108'>getOverviewFailed</a>(error)</tt>	Override for notification when fetchoverview() action fails.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L112'>gotSubscriptions</a>(subscriptions)</tt>	Override for notification when fetchsubscriptions() action is completed.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L116'>getSubscriptionsFailed</a>(error)</tt>	Override for notification when fetchsubscriptions() action fails.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L120'>gotGroup</a>(group)</tt>	Override for notification when fetchgroup() action is completed.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L124'>getGroupFailed</a>(error)</tt>	Override for notification when fetchgroup() action fails.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L128'>gotArticle</a>(article)</tt>	Override for notification when fetcharticle() action is completed.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L132'>getArticleFailed</a>(error)</tt>	Override for notification when fetcharticle() action fails.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L136'>gotHead</a>(head)</tt>	Override for notification when fetchhead() action is completed.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L140'>getHeadFailed</a>(error)</tt>	Override for notification when fetchhead() action fails.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L144'>gotBody</a>(info)</tt>	Override for notification when fetchbody() action is completed.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L148'>getBodyFailed</a>(body)</tt>	Override for notification when fetchbody() action fails.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L152'>postedOk</a>()</tt>	Override for notification when postarticle() action is successful.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L156'>postFailed</a>(error)</tt>	Override for notification when postarticle() action fails.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L160'>gotXHeader</a>(headers)</tt>	Override for notification when getxheader() action is successful.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L164'>getXHeaderFailed</a>(error)</tt>	Override for notification when getxheader() action fails.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L168'>gotNewNews</a>(news)</tt>	Override for notification when getnewnews() action is successful.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L172'>getNewNewsFailed</a>(error)</tt>	Override for notification when getnewnews() action fails.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L176'>gotNewGroups</a>(groups)</tt>	Override for notification when getnewgroups() action is successful.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L180'>getNewGroupsFailed</a>(error)</tt>	Override for notification when getnewgroups() action fails.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L184'>setStreamSuccess</a>()</tt>	Override for notification when setstream() action is successful.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L188'>setStreamFailed</a>(error)</tt>	Override for notification when setstream() action fails.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L192'>fetchGroups</a>()</tt>	Request a list of all news groups from the server gotallgroups().
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L201'>fetchOverview</a>()</tt>	Request the overview format from the server gotoverview() is called.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L210'>fetchSubscriptions</a>()</tt>	Request a list of the groups it is recommended a new user subscribe to.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L220'>fetchGroup</a>(group)</tt>	Get group information for the specified group from the server gotgroup().
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L229'>fetchHead</a>(index)</tt>	Get the header for the specified article (or the currently selected article if index is '') from the server.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L239'>fetchBody</a>(index)</tt>	Get the body for the specified article (or the currently selected article if index is '') from the server.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L249'>fetchArticle</a>(index)</tt>	Get the complete article with the specified index (or the currently selected article if index is '') or message-id from the server.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L259'>postArticle</a>(text)</tt>	Attempt to post an article with the specified text to the server 'text'.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L271'>fetchNewNews</a>(groups,date,distributions)</tt>	Get the message-ids for all new news posted to any of the given groups since the specified date - in seconds since the epoch gmt -.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L295'>fetchNewGroups</a>(date,distributions)</tt>	Get the names of all new groups created/added to the server since the specified date - in seconds since the ecpoh gmt - optionally.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L307'>fetchXHeader</a>(header,low,high,id)</tt>	Request a specific header from the server for an article or range of articles.
<tt style='background-color:#E8E8E8;'> news.NNTPClient <a href=' /news/nntp.py#L332'>setStream</a>()</tt>	Set the mode to stream suspending the normal "lock-step" mode of communications.
<tt style='background-color:#E8E8E8;'> news.NNTPServer <a href=' /news/nntp.py#L950'>do_XROVER</a>(range)</tt>	Handle a request for references of all messages in the currently selected group.
<tt style='background-color:#E8E8E8;'> news.UsenetClientProtocol <a href=' /news/nntp.py#L1001'>__init__</a>(groups,date,storage)</tt>	Fetch all new articles from the given groups since the given date and dump them into the given storage.
<tt style='background-color:#E8E8E8;'> spread.IPBRoot <a href=' /spread/flavors.py#L57'>rootObject</a>(broker)</tt>	Return root referenceable for broker.
<tt style='background-color:#E8E8E8;'> spread.Serializable <a href=' /spread/flavors.py#L81'>processUniqueID</a>()</tt>	Return an id which uniquely represents this object for this process.
<tt style='background-color:#E8E8E8;'> spread.Referenceable <a href=' /spread/flavors.py#L104'>remoteMessageReceived</a>(broker,message,args,kw)</tt>	A remote message has been received dispatch it appropriately.
<tt style='background-color:#E8E8E8;'> spread.Referenceable <a href=' /spread/flavors.py#L131'>jellyFor</a>(jellier)</tt>	Internal return a tuple which will be used as the s-expression to.
<tt style='background-color:#E8E8E8;'> spread.Root <a href=' /spread/flavors.py#L151'>rootObject</a>(broker)</tt>	A factory is requesting to publish me as a root object.
<tt style='background-color:#E8E8E8;'> spread.ViewPoint <a href=' /spread/flavors.py#L201'>__init__</a>(perspective,object)</tt>	Initialize me with a perspective and an object.
<tt style='background-color:#E8E8E8;'> spread.ViewPoint <a href=' /spread/flavors.py#L207'>processUniqueID</a>()</tt>	Return an id unique to a proxy for this perspective+object combination.
<tt style='background-color:#E8E8E8;'> spread.ViewPoint <a href=' /spread/flavors.py#L212'>remoteMessageReceived</a>(broker,message,args,kw)</tt>	A remote message has been received dispatch it appropriately.
<tt style='background-color:#E8E8E8;'> spread.Viewable <a href=' /spread/flavors.py#L245'>jellyFor</a>(jellier)</tt>	Serialize a l{viewpoint} for me and the perspective of the given broker.
<tt style='background-color:#E8E8E8;'> spread.Copyable <a href=' /spread/flavors.py#L264'>getStateToCopy</a>()</tt>	Gather state to send when i am serialized for a peer.
<tt style='background-color:#E8E8E8;'> spread.Copyable <a href=' /spread/flavors.py#L273'>getStateToCopyFor</a>(perspective)</tt>	Gather state to send when i am serialized for a particular perspective.
<tt style='background-color:#E8E8E8;'> spread.Copyable <a href=' /spread/flavors.py#L284'>getTypeToCopy</a>()</tt>	Determine what type tag to send for me.
<tt style='background-color:#E8E8E8;'> spread.Copyable <a href=' /spread/flavors.py#L294'>getTypeToCopyFor</a>(perspective)</tt>	Determine what type tag to send for me.
<tt style='background-color:#E8E8E8;'> spread.Copyable <a href=' /spread/flavors.py#L303'>jellyFor</a>(jellier)</tt>	Assemble type tag and state to copy for this broker.
<tt style='background-color:#E8E8E8;'> spread.Cacheable <a href=' /spread/flavors.py#L332'>getStateToCacheAndObserveFor</a>(perspective,observer)</tt>	Get state to cache on the client and client-cache reference to observe locally.
<tt style='background-color:#E8E8E8;'> spread.Cacheable <a href=' /spread/flavors.py#L348'>jellyFor</a>(jellier)</tt>	Return an appropriate tuple to serialize me.
<tt style='background-color:#E8E8E8;'> spread.Cacheable <a href=' /spread/flavors.py#L370'>stoppedObserving</a>(perspective,observer)</tt>	This method is called when a client has stopped observing me.
<tt style='background-color:#E8E8E8;'> spread.RemoteCopy <a href=' /spread/flavors.py#L392'>setCopyableState</a>(state)</tt>	I will be invoked with the state to copy locally.
<tt style='background-color:#E8E8E8;'> spread.RemoteCache <a href=' /spread/flavors.py#L426'>remoteMessageReceived</a>(broker,message,args,kw)</tt>	A remote message has been received dispatch it appropriately.
<tt style='background-color:#E8E8E8;'> spread.RemoteCache <a href=' /spread/flavors.py#L445'>jellyFor</a>(jellier)</tt>	Serialize me (only for the broker i'm for) as the original cached reference.
<tt style='background-color:#E8E8E8;'> spread.RemoteCache <a href=' /spread/flavors.py#L479'>__cmp__</a>(other)</tt>	Compare me [to another remotecache.
<tt style='background-color:#E8E8E8;'> spread.RemoteCache <a href=' /spread/flavors.py#L495'>__del__</a>()</tt>	Do distributed reference counting on finalize.
<tt style='background-color:#E8E8E8;'> spread.RemoteCache <a href=' /spread/flavors.py#L506'>_borgify</a>()</tt>	Create a new object that shares its state (i e its c{__dict__}) and.
<tt style='background-color:#E8E8E8;'> spread.RemoteCacheMethod <a href=' /spread/flavors.py#L571'>__call__</a>()</tt>	Internal action method.
<tt style='background-color:#E8E8E8;'> spread.RemoteCacheObserver <a href=' /spread/flavors.py#L593'>__init__</a>(broker,cached,perspective)</tt>	Internal initialize me.
<tt style='background-color:#E8E8E8;'> spread.RemoteCacheObserver <a href=' /spread/flavors.py#L612'>__hash__</a>()</tt>	Generate a hash unique to all l{remotecacheobserver}s for this broker/perspective/cached triplet.
<tt style='background-color:#E8E8E8;'> spread.RemoteCacheObserver <a href=' /spread/flavors.py#L620'>__cmp__</a>(other)</tt>	Compare me to another l{remotecacheobserver}.
<tt style='background-color:#E8E8E8;'> spread.RemoteCacheObserver <a href=' /spread/flavors.py#L626'>callRemote</a>(_name)</tt>	Internal action method.
<tt style='background-color:#E8E8E8;'> spread.RemoteCacheObserver <a href=' /spread/flavors.py#L639'>remoteMethod</a>(key)</tt>	Get a l{pb remotemethod} for this key.
<tt style='background-color:#E8E8E8;'> spread.LocalAsRemote <a href=' /spread/util.py#L35'>callRemote</a>(name)</tt>	Call a specially-designated local method.
<tt style='background-color:#E8E8E8;'> spread.Pager <a href=' /spread/util.py#L90'>__init__</a>(collector,callback)</tt>	Create a pager with a reference to a remote collector and an optional callable to invoke upon completion.
<tt style='background-color:#E8E8E8;'> spread.Pager <a href=' /spread/util.py#L105'>stillPaging</a>()</tt>	Internal method called by broker.
<tt style='background-color:#E8E8E8;'> spread.Pager <a href=' /spread/util.py#L115'>sendNextPage</a>()</tt>	Internal method called by broker.
<tt style='background-color:#E8E8E8;'> spread.Pager <a href=' /spread/util.py#L121'>nextPage</a>()</tt>	Override this to return an object to be sent to my collector.
<tt style='background-color:#E8E8E8;'> spread.Pager <a href=' /spread/util.py#L127'>stopPaging</a>()</tt>	Call this when you're done paging.
<tt style='background-color:#E8E8E8;'> spread.FilePager <a href=' /spread/util.py#L178'>sendNextPage</a>()</tt>	Get the first chunk read and send it to collector.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/util.py#L207'>getAllPages</a>(referenceable,methodName)</tt>	A utility method that will call a remote method which expects a pagecollector as the first argument.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/jelly.py#L149'>_createBlank</a>(cls)</tt>	Given an object if that object is a type or a legacy old-style class return a new blank instance of that type which has not had c{__init__}.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/jelly.py#L168'>_newInstance</a>(cls,state)</tt>	Make a new instance of a class without calling its __init__ method.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/jelly.py#L200'>setUnjellyableForClass</a>(classname,unjellyable)</tt>	Set which local class will represent a remote type.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/jelly.py#L226'>setUnjellyableFactoryForClass</a>(classname,copyFactory)</tt>	Set the factory to construct a remote instance of a type : jellier.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/jelly.py#L247'>setUnjellyableForClassTree</a>(module,baseClass,prefix)</tt>	Set all classes in a module derived from c{baseclass} as copiers for a corresponding remote class.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/jelly.py#L289'>getInstanceState</a>(inst,jellier)</tt>	Utility method to default to 'normal' state rules in serialization.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/jelly.py#L303'>setInstanceState</a>(inst,unjellier,jellyList)</tt>	Utility method to default to 'normal' state rules in unserialization.
<tt style='background-color:#E8E8E8;'> spread.Unpersistable <a href=' /spread/jelly.py#L322'>__init__</a>(reason)</tt>	Initialize an unpersistable object with a descriptive c{reason} string.
<tt style='background-color:#E8E8E8;'> spread.Jellyable <a href=' /spread/jelly.py#L345'>jellyFor</a>(jellier)</tt>	@see l{twisted spread interfaces ijellyable jellyfor}.
<tt style='background-color:#E8E8E8;'> spread.Unjellyable <a href=' /spread/jelly.py#L368'>unjellyFor</a>(unjellier,jellyList)</tt>	Perform the inverse operation of l{jellyable jellyfor}.
<tt style='background-color:#E8E8E8;'> spread._Jellier <a href=' /spread/jelly.py#L401'>_cook</a>(object)</tt>	Internal backreference an object.
<tt style='background-color:#E8E8E8;'> spread._Jellier <a href=' /spread/jelly.py#L432'>prepare</a>(object)</tt>	Internal create a list for persisting an object to this will allow.
<tt style='background-color:#E8E8E8;'> spread._Jellier <a href=' /spread/jelly.py#L457'>preserve</a>(object,sexp)</tt>	Internal mark an object's persistent list for later referral.
<tt style='background-color:#E8E8E8;'> spread._Jellier <a href=' /spread/jelly.py#L583'>_jellyIterable</a>(atom,obj)</tt>	Jelly an iterable object.
<tt style='background-color:#E8E8E8;'> spread._Jellier <a href=' /spread/jelly.py#L601'>jelly_decimal</a>(d)</tt>	Jelly a decimal object.
<tt style='background-color:#E8E8E8;'> spread._Jellier <a href=' /spread/jelly.py#L618'>unpersistable</a>(reason,sxp)</tt>	Internal returns an sexp (unpersistable "reason") utility method.
<tt style='background-color:#E8E8E8;'> spread._Unjellier <a href=' /spread/jelly.py#L650'>_maybePostUnjelly</a>(unjellied)</tt>	If the given object has support for the c{postunjelly} hook set it up to be called at the end of deserialization.
<tt style='background-color:#E8E8E8;'> spread._Unjellier <a href=' /spread/jelly.py#L694'>_genericUnjelly</a>(cls,state)</tt>	Unjelly a type for which no specific unjellier is registered but which is nonetheless allowed.
<tt style='background-color:#E8E8E8;'> spread._Unjellier <a href=' /spread/jelly.py#L720'>_unjelly_decimal</a>(exp)</tt>	Unjelly decimal objects.
<tt style='background-color:#E8E8E8;'> spread._Unjellier <a href=' /spread/jelly.py#L812'>_unjellySetOrFrozenset</a>(lst,containerType)</tt>	Helper method to unjelly set or frozenset.
<tt style='background-color:#E8E8E8;'> spread._Unjellier <a href=' /spread/jelly.py#L833'>_unjelly_set</a>(lst)</tt>	Unjelly set using the c{set} builtin.
<tt style='background-color:#E8E8E8;'> spread._Unjellier <a href=' /spread/jelly.py#L840'>_unjelly_frozenset</a>(lst)</tt>	Unjelly frozenset using the c{frozenset} builtin.
<tt style='background-color:#E8E8E8;'> spread._Unjellier <a href=' /spread/jelly.py#L904'>_unjelly_instance</a>(rest)</tt>	Internal unjelly an instance.
<tt style='background-color:#E8E8E8;'> spread._Unjellier <a href=' /spread/jelly.py#L929'>_unjelly_method</a>(rest)</tt>	Internal unjelly a method.
<tt style='background-color:#E8E8E8;'> spread.DummySecurityOptions <a href=' /spread/jelly.py#L969'>isModuleAllowed</a>(moduleName)</tt>	Dummysecurityoptions ismoduleallowed modulename -> boolean.
<tt style='background-color:#E8E8E8;'> spread.DummySecurityOptions <a href=' /spread/jelly.py#L977'>isClassAllowed</a>(klass)</tt>	Dummysecurityoptions isclassallowed class -> boolean.
<tt style='background-color:#E8E8E8;'> spread.DummySecurityOptions <a href=' /spread/jelly.py#L986'>isTypeAllowed</a>(typeName)</tt>	Dummysecurityoptions istypeallowed typename -> boolean.
<tt style='background-color:#E8E8E8;'> spread.SecurityOptions <a href=' /spread/jelly.py#L1020'>allowBasicTypes</a>()</tt>	Allow all basic' types (dictionary and list int string and float.
<tt style='background-color:#E8E8E8;'> spread.SecurityOptions <a href=' /spread/jelly.py#L1028'>allowTypes</a>()</tt>	Securityoptions allowtypes typestring : allow a particular type by its.
<tt style='background-color:#E8E8E8;'> spread.SecurityOptions <a href=' /spread/jelly.py#L1041'>allowInstancesOf</a>()</tt>	Securityoptions allowinstances klass klass : allow instances.
<tt style='background-color:#E8E8E8;'> spread.SecurityOptions <a href=' /spread/jelly.py#L1057'>allowModules</a>()</tt>	Securityoptions allowmodules module module : allow modules by.
<tt style='background-color:#E8E8E8;'> spread.SecurityOptions <a href=' /spread/jelly.py#L1072'>isModuleAllowed</a>(moduleName)</tt>	Securityoptions ismoduleallowed modulename -> boolean.
<tt style='background-color:#E8E8E8;'> spread.SecurityOptions <a href=' /spread/jelly.py#L1083'>isClassAllowed</a>(klass)</tt>	Securityoptions isclassallowed class -> boolean.
<tt style='background-color:#E8E8E8;'> spread.SecurityOptions <a href=' /spread/jelly.py#L1092'>isTypeAllowed</a>(typeName)</tt>	Securityoptions istypeallowed typename -> boolean.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/jelly.py#L1108'>jelly</a>(object,taster,persistentStore,invoker)</tt>	Serialize to s-expression.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/jelly.py#L1121'>unjelly</a>(sexp,taster,persistentLoad,invoker)</tt>	Unserialize from s-expression.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/banana.py#L39'>b1282int</a>(st)</tt>	Convert an integer represented as a base 128 string into an l{int} or l{long}.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/banana.py#L73'>setPrefixLimit</a>(limit)</tt>	Set the limit on the prefix length for all banana connections established after this call.
<tt style='background-color:#E8E8E8;'> spread.Banana <a href=' /spread/banana.py#L110'>setPrefixLimit</a>(limit)</tt>	Set the prefix limit for decoding done by this protocol instance.
<tt style='background-color:#E8E8E8;'> spread.Banana <a href=' /spread/banana.py#L123'>connectionReady</a>()</tt>	Surrogate for connectionmade called after protocol negotiation.
<tt style='background-color:#E8E8E8;'> spread.Banana <a href=' /spread/banana.py#L253'>expressionReceived</a>(lst)</tt>	Called when an expression list string or int is received.
<tt style='background-color:#E8E8E8;'> spread.Banana <a href=' /spread/banana.py#L310'>sendEncoded</a>(obj)</tt>	Send the encoded representation of the given object @param obj an object to encode and send.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/banana.py#L379'>encode</a>(lst)</tt>	Encode a list s-expression.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/banana.py#L387'>decode</a>(st)</tt>	Decode a banana-encoded string.
<tt style='background-color:#E8E8E8;'> spread.IJellyable <a href=' /spread/interfaces.py#L12'>jellyFor</a>(jellier)</tt>	Jelly myself for jellier.
<tt style='background-color:#E8E8E8;'> spread.IUnjellyable <a href=' /spread/interfaces.py#L20'>unjellyFor</a>(jellier,jellyList)</tt>	Unjelly myself for the jellier.
<tt style='background-color:#E8E8E8;'> spread.RemoteMethod <a href=' /spread/pb.py#L139'>__init__</a>(obj,name)</tt>	Initialize with a l{remotereference} and the name of this message.
<tt style='background-color:#E8E8E8;'> spread.RemoteMethod <a href=' /spread/pb.py#L155'>__call__</a>()</tt>	Asynchronously invoke a remote method.
<tt style='background-color:#E8E8E8;'> spread.IPerspective <a href=' /spread/pb.py#L184'>perspectiveMessageReceived</a>(broker,message,args,kwargs)</tt>	This method is called when a network message is received.
<tt style='background-color:#E8E8E8;'> spread.Avatar <a href=' /spread/pb.py#L228'>perspectiveMessageReceived</a>(broker,message,args,kw)</tt>	This method is called when a network message is received.
<tt style='background-color:#E8E8E8;'> spread.RemoteReference <a href=' /spread/pb.py#L285'>__init__</a>(perspective,broker,luid,doRefCount)</tt>	Internal initialize me with a broker and a locally-unique id.
<tt style='background-color:#E8E8E8;'> spread.RemoteReference <a href=' /spread/pb.py#L298'>notifyOnDisconnect</a>(callback)</tt>	Register a callback to be called if our broker gets disconnected.
<tt style='background-color:#E8E8E8;'> spread.RemoteReference <a href=' /spread/pb.py#L311'>dontNotifyOnDisconnect</a>(callback)</tt>	Remove a callback that was registered with notifyondisconnect.
<tt style='background-color:#E8E8E8;'> spread.RemoteReference <a href=' /spread/pb.py#L322'>_disconnected</a>()</tt>	Called if we are disconnected and have callbacks registered.
<tt style='background-color:#E8E8E8;'> spread.RemoteReference <a href=' /spread/pb.py#L331'>jellyFor</a>(jellier)</tt>	If i am being sent back to where i came from serialize as a local backreference.
<tt style='background-color:#E8E8E8;'> spread.RemoteReference <a href=' /spread/pb.py#L347'>callRemote</a>(_name)</tt>	Asynchronously invoke a remote method.
<tt style='background-color:#E8E8E8;'> spread.RemoteReference <a href=' /spread/pb.py#L369'>remoteMethod</a>(key)</tt>	@param key the key.
<tt style='background-color:#E8E8E8;'> spread.RemoteReference <a href=' /spread/pb.py#L378'>__cmp__</a>(other)</tt>	@param other another l{remotereference} to compare me to.
<tt style='background-color:#E8E8E8;'> spread.RemoteReference <a href=' /spread/pb.py#L396'>__del__</a>()</tt>	Do distributed reference counting on finalization.
<tt style='background-color:#E8E8E8;'> spread.Local <a href=' /spread/pb.py#L423'>incref</a>()</tt>	Increment the reference count.
<tt style='background-color:#E8E8E8;'> spread.Local <a href=' /spread/pb.py#L433'>decref</a>()</tt>	Decrement the reference count.
<tt style='background-color:#E8E8E8;'> spread.CopyableFailure <a href=' /spread/pb.py#L453'>getStateToCopy</a>()</tt>	Collect state related to the exception which occurred discarding state which cannot reasonably be serialized.
<tt style='background-color:#E8E8E8;'> spread.CopiedFailure <a href=' /spread/pb.py#L502'>throwExceptionIntoGenerator</a>(g)</tt>	Throw the original exception into the given generator preserving traceback information if available.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L577'>resumeProducing</a>()</tt>	Called when the consumer attached to me runs out of buffer.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L607'>expressionReceived</a>(sexp)</tt>	Evaluate an expression as it's received.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L628'>proto_version</a>(vnum)</tt>	Protocol message version version-number check to make sure that both ends of the protocol are speaking.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L642'>sendCall</a>()</tt>	Utility method to send an expression to the other side of the connection.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L651'>proto_didNotUnderstand</a>(command)</tt>	Respond to stock 'c{didnotunderstand}' message.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L664'>connectionReady</a>()</tt>	Initialize called after banana negotiation is done.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L690'>connectionLost</a>(reason)</tt>	The connection was lost.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L730'>notifyOnDisconnect</a>(notifier)</tt>	@param notifier callback to call when the broker disconnects.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L739'>notifyOnFail</a>(notifier)</tt>	@param notifier callback to call if the broker fails to connect.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L748'>notifyOnConnect</a>(notifier)</tt>	@param notifier callback to call when the broker connects.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L763'>dontNotifyOnDisconnect</a>(notifier)</tt>	@param notifier callback to remove from list of disconnect callbacks.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L774'>localObjectForID</a>(luid)</tt>	Get a local object for a locally unique id.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L793'>registerReference</a>(object)</tt>	Store a persistent reference to a local object and map its id() to a generated session-unique id.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L822'>setNameForLocal</a>(name,object)</tt>	Store a special string id for this object.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L839'>remoteForName</a>(name)</tt>	Returns an object from the remote name mapping.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L855'>cachedRemotelyAs</a>(instance,incref)</tt>	@param instance the instance to look up.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L872'>remotelyCachedForLUID</a>(luid)</tt>	@param luid the luid to look up.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L881'>cacheRemotely</a>(instance)</tt>	Xxx @return a new luid.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L904'>cacheLocally</a>(cid,instance)</tt>	Internal store a non-filled-out cached instance locally.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L917'>serialize</a>(object,perspective,method,args)</tt>	Jelly an object according to the remote security rules for this broker.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L957'>unserialize</a>(sexp,perspective)</tt>	Unjelly an sexp according to the local security rules for this broker.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L972'>newLocalID</a>()</tt>	@return a newly generated luid.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L981'>newRequestID</a>()</tt>	@return a newly generated request id.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L1032'>_recvMessage</a>(findObjMethod,requestID,objectID,message)</tt>	Received a message-send.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L1084'>_sendAnswer</a>(netResult,requestID)</tt>	Internal send an answer to a previously sent message.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L1094'>proto_answer</a>(requestID,netResult)</tt>	Internal got an answer to a previously sent message.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L1108'>_sendFailureOrError</a>(fail,requestID)</tt>	Call l{_senderror} or l{_sendfailure}, depending on whether c{fail} represents an l{error} subclass or not.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L1122'>_sendFailure</a>(fail,requestID)</tt>	Log error and then send it.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L1134'>_sendError</a>(fail,requestID)</tt>	Internal send an error for a previously sent message.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L1154'>proto_error</a>(requestID,fail)</tt>	Internal deal with an error.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L1166'>sendDecRef</a>(objectID)</tt>	Internal send a decref directive.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L1175'>proto_decref</a>(objectID)</tt>	Internal decrement the reference count of an object.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L1194'>decCacheRef</a>(objectID)</tt>	Internal send a decache directive.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L1203'>proto_decache</a>(objectID)</tt>	Internal decrement the reference count of a cached object.
<tt style='background-color:#E8E8E8;'> spread.Broker <a href=' /spread/pb.py#L1230'>proto_uncache</a>(objectID)</tt>	Internal tell the client it is now ok to uncache an object.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/pb.py#L1246'>respond</a>(challenge,password)</tt>	Respond to a challenge.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/pb.py#L1267'>challenge</a>()</tt>	@return some random data.
<tt style='background-color:#E8E8E8;'> spread.PBClientFactory <a href=' /spread/pb.py#L1292'>__init__</a>(unsafeTracebacks,security)</tt>	@param unsafetracebacks if set tracebacks for exceptions will be sent over the wire.
<tt style='background-color:#E8E8E8;'> spread.PBClientFactory <a href=' /spread/pb.py#L1307'>buildProtocol</a>(addr)</tt>	Build the broker instance passing the security options to it.
<tt style='background-color:#E8E8E8;'> spread.PBClientFactory <a href=' /spread/pb.py#L1333'>clientConnectionLost</a>(connector,reason,reconnecting)</tt>	Reconnecting subclasses should call with reconnecting=1.
<tt style='background-color:#E8E8E8;'> spread.PBClientFactory <a href=' /spread/pb.py#L1355'>getRootObject</a>()</tt>	Get root object of remote pb server.
<tt style='background-color:#E8E8E8;'> spread.PBClientFactory <a href=' /spread/pb.py#L1368'>disconnect</a>()</tt>	If the factory is connected close the connection.
<tt style='background-color:#E8E8E8;'> spread.PBClientFactory <a href=' /spread/pb.py#L1390'>_cbLoginAnonymous</a>(root,client)</tt>	Attempt an anonymous login on the given remote root object.
<tt style='background-color:#E8E8E8;'> spread.PBClientFactory <a href=' /spread/pb.py#L1409'>login</a>(credentials,client)</tt>	Login and get perspective from remote pb server.
<tt style='background-color:#E8E8E8;'> spread.PBServerFactory <a href=' /spread/pb.py#L1452'>__init__</a>(root,unsafeTracebacks,security)</tt>	@param root factory providing the root referenceable used by the broker.
<tt style='background-color:#E8E8E8;'> spread.PBServerFactory <a href=' /spread/pb.py#L1470'>buildProtocol</a>(addr)</tt>	Return a broker attached to the factory as the service provider.
<tt style='background-color:#E8E8E8;'> spread.IUsernameMD5Password <a href=' /spread/pb.py#L1498'>checkPassword</a>(password)</tt>	Validate these credentials against the correct password.
<tt style='background-color:#E8E8E8;'> spread.IUsernameMD5Password <a href=' /spread/pb.py#L1513'>checkMD5Password</a>(password)</tt>	Validate these credentials against the correct md5 digest of the password.
<tt style='background-color:#E8E8E8;'> spread._JellyableAvatarMixin <a href=' /spread/pb.py#L1552'>_cbLogin</a>(result)</tt>	Ensure that the avatar to be returned to the client is jellyable and set up disconnection notification to call the realm's logout object.
<tt style='background-color:#E8E8E8;'> spread._PortalWrapper <a href=' /spread/pb.py#L1590'>remote_login</a>(username)</tt>	Start of username/password login.
<tt style='background-color:#E8E8E8;'> spread._PortalWrapper <a href=' /spread/pb.py#L1600'>remote_loginAnonymous</a>(mind)</tt>	Attempt an anonymous login.
<tt style='background-color:#E8E8E8;'> spread._PortalAuthChallenger <a href=' /spread/pb.py#L1636'>checkPassword</a>(password)</tt>	L{iusernamehashedpassword} @param password the password.
<tt style='background-color:#E8E8E8;'> spread._PortalAuthChallenger <a href=' /spread/pb.py#L1646'>checkMD5Password</a>(md5Password)</tt>	L{iusernamemd5password} @param md5password.
<tt style='background-color:#E8E8E8;'> spread.Publishable <a href=' /spread/publish.py#L28'>republish</a>()</tt>	Set the timestamp to current and todo update all observers.
<tt style='background-color:#E8E8E8;'> spread.Publishable <a href=' /spread/publish.py#L37'>getStateToPublishFor</a>(perspective)</tt>	Implement me to special-case your state for a perspective.
<tt style='background-color:#E8E8E8;'> spread.Publishable <a href=' /spread/publish.py#L42'>getStateToPublish</a>()</tt>	Implement me to return state to copy as part of the publish phase.
<tt style='background-color:#E8E8E8;'> spread.Publishable <a href=' /spread/publish.py#L47'>getStateToCacheAndObserveFor</a>(perspective,observer)</tt>	Get all necessary metadata to keep a clientside cache.
<tt style='background-color:#E8E8E8;'> spread.RemotePublished <a href=' /spread/publish.py#L112'>activated</a>()</tt>	Implement this method if you want to be notified when your publishable subclass is activated.
<tt style='background-color:#E8E8E8;'> spread.RemotePublished <a href=' /spread/publish.py#L117'>callWhenActivated</a>(callback)</tt>	Externally register for notification when this publishable has received all relevant data.
<tt style='background-color:#E8E8E8;'> spread. <a href=' /spread/publish.py#L125'>whenReady</a>(d)</tt>	Wrap a deferred returned from a pb method in another deferred that expects a remotepublished as a result.
<tt style='background-color:#E8E8E8;'> enterprise.ConnectionPool <a href=' /enterprise/adbapi.py#L175'>__init__</a>(dbapiName)</tt>	Create a new l{connectionpool}.
<tt style='background-color:#E8E8E8;'> enterprise.ConnectionPool <a href=' /enterprise/adbapi.py#L253'>start</a>()</tt>	Start the connection pool.
<tt style='background-color:#E8E8E8;'> enterprise.ConnectionPool <a href=' /enterprise/adbapi.py#L267'>runWithConnection</a>(func)</tt>	Execute a function with a database connection and return the result.
<tt style='background-color:#E8E8E8;'> enterprise.ConnectionPool <a href=' /enterprise/adbapi.py#L310'>runInteraction</a>(interaction)</tt>	Interact with the database and return the result.
<tt style='background-color:#E8E8E8;'> enterprise.ConnectionPool <a href=' /enterprise/adbapi.py#L344'>runQuery</a>()</tt>	Execute an sql query and return the result.
<tt style='background-color:#E8E8E8;'> enterprise.ConnectionPool <a href=' /enterprise/adbapi.py#L365'>runOperation</a>()</tt>	Execute an sql query and return l{none}.
<tt style='background-color:#E8E8E8;'> enterprise.ConnectionPool <a href=' /enterprise/adbapi.py#L387'>close</a>()</tt>	Close all pool connections and shutdown the pool.
<tt style='background-color:#E8E8E8;'> enterprise.ConnectionPool <a href=' /enterprise/adbapi.py#L400'>finalClose</a>()</tt>	This should only be called by the shutdown trigger.
<tt style='background-color:#E8E8E8;'> enterprise.ConnectionPool <a href=' /enterprise/adbapi.py#L412'>connect</a>()</tt>	Return a database connection when one becomes available.
<tt style='background-color:#E8E8E8;'> enterprise.ConnectionPool <a href=' /enterprise/adbapi.py#L438'>disconnect</a>(conn)</tt>	Disconnect a database connection associated with this pool.
<tt style='background-color:#E8E8E8;'> plugins.FileCheckerFactory <a href=' /plugins/cred_file.py#L45'>generateChecker</a>(argstring)</tt>	This checker factory expects to get the location of a file.
<tt style='background-color:#E8E8E8;'> plugins.UNIXCheckerFactory <a href=' /plugins/cred_unix.py#L128'>generateChecker</a>(argstring)</tt>	This checker factory ignores the argument string everything.
<tt style='background-color:#E8E8E8;'> plugins.InMemoryCheckerFactory <a href=' /plugins/cred_memory.py#L49'>generateChecker</a>(argstring)</tt>	This checker factory expects to get a list of username password pairs with each pair also separated by a.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/dns.py#L105'>randomSource</a>()</tt>	Wrapper around l{twisted python randbytes randomfactory securerandom} to return.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/dns.py#L212'>_nameToLabels</a>(name)</tt>	Split a domain name into its constituent labels.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/dns.py#L232'>_isSubdomainOf</a>(descendantName,ancestorName)</tt>	Test whether c{descendantname} is equal to or is a i{subdomain} of c{ancestorname}.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/dns.py#L263'>str2time</a>(s)</tt>	Parse a string description of an interval into an integer number of seconds.
<tt style='background-color:#E8E8E8;'> names.IEncodable <a href=' /names/dns.py#L312'>encode</a>(strio,compDict)</tt>	Write a representation of this object to the given file object.
<tt style='background-color:#E8E8E8;'> names.IEncodable <a href=' /names/dns.py#L326'>decode</a>(strio,length)</tt>	Reconstruct an object from data read from the given file object.
<tt style='background-color:#E8E8E8;'> names.Charstr <a href=' /names/dns.py#L352'>encode</a>(strio,compDict)</tt>	Encode this character string into the appropriate byte format.
<tt style='background-color:#E8E8E8;'> names.Charstr <a href=' /names/dns.py#L366'>decode</a>(strio,length)</tt>	Decode a byte string into this charstr.
<tt style='background-color:#E8E8E8;'> names.Charstr <a href=' /names/dns.py#L398'>__str__</a>()</tt>	Represent this l{charstr} instance by its string value.
<tt style='background-color:#E8E8E8;'> names.Name <a href=' /names/dns.py#L415'>__init__</a>(name)</tt>	@param name a name.
<tt style='background-color:#E8E8E8;'> names.Name <a href=' /names/dns.py#L427'>encode</a>(strio,compDict)</tt>	Encode this name into the appropriate byte format.
<tt style='background-color:#E8E8E8;'> names.Name <a href=' /names/dns.py#L462'>decode</a>(strio,length)</tt>	Decode a byte string into this name.
<tt style='background-color:#E8E8E8;'> names.Name <a href=' /names/dns.py#L517'>__str__</a>()</tt>	Represent this l{name} instance by its string name.
<tt style='background-color:#E8E8E8;'> names.Query <a href=' /names/dns.py#L544'>__init__</a>(name,type,cls)</tt>	@type name l{bytes} or l{unicode} @param name see l{query.
<tt style='background-color:#E8E8E8;'> names._OPTHeader <a href=' /names/dns.py#L623'>__init__</a>(udpPayloadSize,extendedRCODE,version,dnssecOK)</tt>	@type udppayloadsize l{int} @param payload the number of octets of the largest udp.
<tt style='background-color:#E8E8E8;'> names._OPTHeader <a href=' /names/dns.py#L659'>name</a>()</tt>	A readonly property for accessing the c{name} attribute of this record.
<tt style='background-color:#E8E8E8;'> names._OPTHeader <a href=' /names/dns.py#L672'>type</a>()</tt>	A readonly property for accessing the c{type} attribute of this record.
<tt style='background-color:#E8E8E8;'> names._OPTHeader <a href=' /names/dns.py#L684'>encode</a>(strio,compDict)</tt>	Encode this l{_optheader} instance to bytes.
<tt style='background-color:#E8E8E8;'> names._OPTHeader <a href=' /names/dns.py#L714'>decode</a>(strio,length)</tt>	Decode bytes into an l{_optheader} instance.
<tt style='background-color:#E8E8E8;'> names._OPTHeader <a href=' /names/dns.py#L737'>fromRRHeader</a>(cls,rrHeader)</tt>	A classmethod for constructing a new l{_optheader} from the attributes and payload of an existing l{rrheader} instance.
<tt style='background-color:#E8E8E8;'> names._OPTVariableOption <a href=' /names/dns.py#L788'>__init__</a>(code,data)</tt>	@type code l{int}.
<tt style='background-color:#E8E8E8;'> names._OPTVariableOption <a href=' /names/dns.py#L800'>encode</a>(strio,compDict)</tt>	Encode this l{_optvariableoption} to bytes.
<tt style='background-color:#E8E8E8;'> names._OPTVariableOption <a href=' /names/dns.py#L817'>decode</a>(strio,length)</tt>	Decode bytes into an l{_optvariableoption} instance.
<tt style='background-color:#E8E8E8;'> names.RRHeader <a href=' /names/dns.py#L871'>__init__</a>(name,type,cls,ttl)</tt>	@type name l{bytes} or l{unicode} @param name see l{rrheader.
<tt style='background-color:#E8E8E8;'> names.SimpleRecord <a href=' /names/dns.py#L956'>__init__</a>(name,ttl)</tt>	@param name see l{simplerecord name}.
<tt style='background-color:#E8E8E8;'> names.Record_A <a href=' /names/dns.py#L1099'>__init__</a>(address,ttl)</tt>	@type address l{bytes} or l{unicode} @param address the ipv4 address associated with this record in.
<tt style='background-color:#E8E8E8;'> names.Record_SOA <a href=' /names/dns.py#L1181'>__init__</a>(mname,rname,serial,refresh)</tt>	@param mname see l{record_soa mname}.
<tt style='background-color:#E8E8E8;'> names.Record_WKS <a href=' /names/dns.py#L1291'>__init__</a>(address,protocol,map,ttl)</tt>	@type address l{bytes} or l{unicode} @param address the ipv4 address associated with this record in.
<tt style='background-color:#E8E8E8;'> names.Record_AAAA <a href=' /names/dns.py#L1345'>__init__</a>(address,ttl)</tt>	@type address l{bytes} or l{unicode} @param address the ipv6 address for this host in rfc 2373 format.
<tt style='background-color:#E8E8E8;'> names.Record_A6 <a href=' /names/dns.py#L1406'>__init__</a>(prefixLen,suffix,prefix,ttl)</tt>	@param suffix an ipv6 address suffix in in rfc 2373 format.
<tt style='background-color:#E8E8E8;'> names.Record_SRV <a href=' /names/dns.py#L1505'>__init__</a>(priority,weight,port,target)</tt>	@param target see l{record_srv target}.
<tt style='background-color:#E8E8E8;'> names.Record_NAPTR <a href=' /names/dns.py#L1590'>__init__</a>(order,preference,flags,service)</tt>	@param replacement see l{record_naptr replacement}.
<tt style='background-color:#E8E8E8;'> names.Record_AFSDB <a href=' /names/dns.py#L1661'>__init__</a>(subtype,hostname,ttl)</tt>	@param hostname see l{record_afsdb hostname}.
<tt style='background-color:#E8E8E8;'> names.Record_RP <a href=' /names/dns.py#L1712'>__init__</a>(mbox,txt,ttl)</tt>	@param mbox see l{record_rp mbox}.
<tt style='background-color:#E8E8E8;'> names.Record_MINFO <a href=' /names/dns.py#L1826'>__init__</a>(rmailbx,emailbx,ttl)</tt>	@param rmailbx see l{record_minfo rmailbx}.
<tt style='background-color:#E8E8E8;'> names.Record_MX <a href=' /names/dns.py#L1877'>__init__</a>(preference,name,ttl)</tt>	@param name see l{record_mx name}.
<tt style='background-color:#E8E8E8;'> names.UnknownRecord <a href=' /names/dns.py#L1972'>encode</a>(strio,compDict)</tt>	Write the raw bytes corresponding to this record's payload to the stream.
<tt style='background-color:#E8E8E8;'> names.UnknownRecord <a href=' /names/dns.py#L1980'>decode</a>(strio,length)</tt>	Load the bytes which are part of this record from the stream and store them unparsed and unmodified.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/dns.py#L2011'>_responseFromMessage</a>(responseConstructor,message)</tt>	Generate a l{message} like instance suitable for use as the response to c{message}.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/dns.py#L2039'>_getDisplayableArguments</a>(obj,alwaysShow,fieldNames)</tt>	Inspect the function signature of c{obj}'s constructor and get a list of which arguments should be displayed.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/dns.py#L2076'>_compactRepr</a>(obj,alwaysShow,flagNames,fieldNames)</tt>	Return a l{str} representation of c{obj} which only shows fields with non-default values flags which are true and sections which have been.
<tt style='background-color:#E8E8E8;'> names.Message <a href=' /names/dns.py#L2181'>__init__</a>(id,answer,opCode,recDes)</tt>	@param id a 16 bit identifier assigned by the program that generates any kind of query.
<tt style='background-color:#E8E8E8;'> names.Message <a href=' /names/dns.py#L2262'>__repr__</a>()</tt>	Generate a repr of this l{message}.
<tt style='background-color:#E8E8E8;'> names.Message <a href=' /names/dns.py#L2281'>addQuery</a>(name,type,cls)</tt>	Add another query to this message.
<tt style='background-color:#E8E8E8;'> names.Message <a href=' /names/dns.py#L2394'>lookupRecordType</a>(type)</tt>	Retrieve the l{irecord} implementation for the given record type.
<tt style='background-color:#E8E8E8;'> names.Message <a href=' /names/dns.py#L2408'>toStr</a>()</tt>	Encode this l{message} into a byte string in the format described by rfc 1035.
<tt style='background-color:#E8E8E8;'> names.Message <a href=' /names/dns.py#L2420'>fromStr</a>(str)</tt>	Decode a byte string in the format described by rfc 1035 into this l{message}.
<tt style='background-color:#E8E8E8;'> names._EDNSMessage <a href=' /names/dns.py#L2480'>__init__</a>(id,answer,opCode,auth)</tt>	Construct a new l{_ednsmessage} @see u{rfc1035 section-4.
<tt style='background-color:#E8E8E8;'> names._EDNSMessage <a href=' /names/dns.py#L2616'>_toMessage</a>()</tt>	Convert to a standard l{dns message}.
<tt style='background-color:#E8E8E8;'> names._EDNSMessage <a href=' /names/dns.py#L2656'>toStr</a>()</tt>	Encode to wire format by first converting to a standard l{dns message}.
<tt style='background-color:#E8E8E8;'> names._EDNSMessage <a href=' /names/dns.py#L2665'>_fromMessage</a>(cls,message)</tt>	Construct and return a new l{_ednsmessage} whose attributes and records are derived from the attributes and records of c{message} (a l{message}.
<tt style='background-color:#E8E8E8;'> names._EDNSMessage <a href=' /names/dns.py#L2727'>fromStr</a>(bytes)</tt>	Decode from wire format saving flags values and records to this l{_ednsmessage} instance in place.
<tt style='background-color:#E8E8E8;'> names.DNSMixin <a href=' /names/dns.py#L2762'>pickID</a>()</tt>	Return a unique id for queries.
<tt style='background-color:#E8E8E8;'> names.DNSMixin <a href=' /names/dns.py#L2772'>callLater</a>(period,func)</tt>	Wrapper around reactor calllater mainly for test purpose.
<tt style='background-color:#E8E8E8;'> names.DNSMixin <a href=' /names/dns.py#L2779'>_query</a>(queries,timeout,id,writeMessage)</tt>	Send out a message with the given queries.
<tt style='background-color:#E8E8E8;'> names.DNSMixin <a href=' /names/dns.py#L2814'>_clearFailed</a>(deferred,id)</tt>	Clean the deferred after a timeout.
<tt style='background-color:#E8E8E8;'> names.DNSDatagramProtocol <a href=' /names/dns.py#L2831'>stopProtocol</a>()</tt>	Stop protocol reset state variables.
<tt style='background-color:#E8E8E8;'> names.DNSDatagramProtocol <a href=' /names/dns.py#L2839'>startProtocol</a>()</tt>	Upon start reset internal state.
<tt style='background-color:#E8E8E8;'> names.DNSDatagramProtocol <a href=' /names/dns.py#L2846'>writeMessage</a>(message,address)</tt>	Send a message holding dns queries.
<tt style='background-color:#E8E8E8;'> names.DNSDatagramProtocol <a href=' /names/dns.py#L2857'>datagramReceived</a>(data,addr)</tt>	Read a datagram extract the message in it and trigger the associated deferred.
<tt style='background-color:#E8E8E8;'> names.DNSDatagramProtocol <a href=' /names/dns.py#L2890'>removeResend</a>(id)</tt>	Mark message id as no longer having duplication suppression.
<tt style='background-color:#E8E8E8;'> names.DNSDatagramProtocol <a href=' /names/dns.py#L2899'>query</a>(address,queries,timeout,id)</tt>	Send out a message with the given queries.
<tt style='background-color:#E8E8E8;'> names.DNSProtocol <a href=' /names/dns.py#L2936'>writeMessage</a>(message)</tt>	Send a message holding dns queries.
<tt style='background-color:#E8E8E8;'> names.DNSProtocol <a href=' /names/dns.py#L2945'>connectionMade</a>()</tt>	Connection is made reset internal state and notify the controller.
<tt style='background-color:#E8E8E8;'> names.DNSProtocol <a href=' /names/dns.py#L2953'>connectionLost</a>(reason)</tt>	Notify the controller that this protocol is no longer connected.
<tt style='background-color:#E8E8E8;'> names.DNSProtocol <a href=' /names/dns.py#L2993'>query</a>(queries,timeout)</tt>	Send out a message with the given queries.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L70'>__init__</a>(authorities,caches,clients,verbose)</tt>	@param authorities resolvers which provide authoritative answers.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L106'>_verboseLog</a>()</tt>	Log a message only if verbose logging is enabled.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L123'>connectionMade</a>(protocol)</tt>	Track a newly connected l{dnsprotocol}.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L133'>connectionLost</a>(protocol)</tt>	Stop tracking a no-longer connected l{dnsprotocol}.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L144'>sendReply</a>(protocol,message,address)</tt>	Send a response c{message} to a given c{address} via the supplied c{protocol}.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L182'>_responseFromMessage</a>(message,rCode,answers,authority)</tt>	Generate a l{message} instance suitable for use as the response to c{message}.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L264'>gotResolverResponse</a>(response,protocol,message,address)</tt>	A callback used by l{dnsserverfactory handlequery} for handling the.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L308'>gotResolverError</a>(failure,protocol,message,address)</tt>	A callback used by l{dnsserverfactory handlequery} for handling deferred.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L346'>handleQuery</a>(message,protocol,address)</tt>	Called by l{dnsserverfactory messagereceived} when a query message is.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L388'>handleInverseQuery</a>(message,protocol,address)</tt>	Called by l{dnsserverfactory messagereceived} when an inverse query.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L416'>handleStatus</a>(message,protocol,address)</tt>	Called by l{dnsserverfactory messagereceived} when a status message is.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L444'>handleNotify</a>(message,protocol,address)</tt>	Called by l{dnsserverfactory messagereceived} when a notify message is.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L472'>handleOther</a>(message,protocol,address)</tt>	Called by l{dnsserverfactory messagereceived} when a message with.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L501'>messageReceived</a>(message,proto,address)</tt>	L{dnsserverfactory messagereceived} is called by protocols which are.
<tt style='background-color:#E8E8E8;'> names.DNSServerFactory <a href=' /names/server.py#L565'>allowQuery</a>(message,protocol,address)</tt>	Called by l{dnsserverfactory messagereceived} to decide whether to.
<tt style='background-color:#E8E8E8;'> names.ResolverChain <a href=' /names/resolve.py#L39'>__init__</a>(resolvers)</tt>	@type resolvers l{list} @param resolvers a l{list} of l{iresolver} providers.
<tt style='background-color:#E8E8E8;'> names.ResolverChain <a href=' /names/resolve.py#L48'>_lookup</a>(name,cls,type,timeout)</tt>	Build a l{dns query} for the given parameters and dispatch it.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/hosts.py#L79'>__init__</a>(hints,maximumQueries,reactor,resolverFactory)</tt>	@param hints a l{list} of l{str} giving the dotted quad representation of ip addresses of root servers at which to.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/root.py#L74'>_roots</a>()</tt>	Return a list of two-tuples representing the addresses of the root servers as defined by c{self.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/client.py#L253'>_query</a>(query,servers,timeout,filter)</tt>	Issue one query and return a l{deferred} which fires with its response.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/client.py#L383'>_lookup</a>(name,cls,type,timeout)</tt>	Build a l{dns query} for the given parameters and dispatch it via udp.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/root.py#L129'>_discoverAuthority</a>(query,servers,timeout,queriesLeft)</tt>	Issue a query to a server and follow a delegation if necessary.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/root.py#L162'>_discoveredAuthority</a>(response,query,timeout,queriesLeft)</tt>	Interpret the response to a query checking for error codes and following delegations if necessary.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/root.py#L303'>bootstrap</a>(resolver,resolverFactory)</tt>	Lookup the root nameserver addresses using the given resolver return a resolver which will eventually become a c{root.
<tt style='background-color:#E8E8E8;'> names.SerialNumber <a href=' /names/_rfc1982.py#L59'>__init__</a>(number,serialBits)</tt>	Construct an l{serialnumber} instance.
<tt style='background-color:#E8E8E8;'> names.SerialNumber <a href=' /names/_rfc1982.py#L79'>_convertOther</a>(other)</tt>	Check that a foreign object is suitable for use in the comparison or arithmetic magic methods of this l{serialnumber} instance.
<tt style='background-color:#E8E8E8;'> names.SerialNumber <a href=' /names/_rfc1982.py#L101'>__str__</a>()</tt>	Return a string representation of this l{serialnumber} instance.
<tt style='background-color:#E8E8E8;'> names.SerialNumber <a href=' /names/_rfc1982.py#L110'>__int__</a>()</tt>	@return the integer value of this l{serialnumber} instance.
<tt style='background-color:#E8E8E8;'> names.SerialNumber <a href=' /names/_rfc1982.py#L118'>__eq__</a>(other)</tt>	Allow rich equality comparison with another l{serialnumber} instance.
<tt style='background-color:#E8E8E8;'> names.SerialNumber <a href=' /names/_rfc1982.py#L128'>__ne__</a>(other)</tt>	Allow rich equality comparison with another l{serialnumber} instance.
<tt style='background-color:#E8E8E8;'> names.SerialNumber <a href=' /names/_rfc1982.py#L137'>__lt__</a>(other)</tt>	Allow i{less than} comparison with another l{serialnumber} instance.
<tt style='background-color:#E8E8E8;'> names.SerialNumber <a href=' /names/_rfc1982.py#L153'>__gt__</a>(other)</tt>	Allow i{greater than} comparison with another l{serialnumber} instance.
<tt style='background-color:#E8E8E8;'> names.SerialNumber <a href=' /names/_rfc1982.py#L170'>__le__</a>(other)</tt>	Allow i{less than or equal} comparison with another l{serialnumber} instance.
<tt style='background-color:#E8E8E8;'> names.SerialNumber <a href=' /names/_rfc1982.py#L182'>__ge__</a>(other)</tt>	Allow i{greater than or equal} comparison with another l{serialnumber} instance.
<tt style='background-color:#E8E8E8;'> names.SerialNumber <a href=' /names/_rfc1982.py#L194'>__add__</a>(other)</tt>	Allow i{addition} with another l{serialnumber} instance.
<tt style='background-color:#E8E8E8;'> names.SerialNumber <a href=' /names/_rfc1982.py#L230'>__hash__</a>()</tt>	Allow l{serialnumber} instances to be hashed for use as l{dict} keys.
<tt style='background-color:#E8E8E8;'> names.SerialNumber <a href=' /names/_rfc1982.py#L239'>fromRFC4034DateString</a>(cls,utcDateString)</tt>	Create an l{serialnumber} instance from a date string in format 'yyyymmddhhmmss' described in u{rfc4034.
<tt style='background-color:#E8E8E8;'> names.SerialNumber <a href=' /names/_rfc1982.py#L262'>toRFC4034DateString</a>()</tt>	Calculate a date by treating the current l{serialnumber} value as a unix timestamp and return a date string in the format described in.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/authority.py#L22'>getSerial</a>(filename)</tt>	Return a monotonically increasing across program runs integer.
<tt style='background-color:#E8E8E8;'> names.FileAuthority <a href=' /names/authority.py#L89'>_additionalRecords</a>(answer,authority,ttl)</tt>	Find locally known information that could be useful to the consumer of the response and construct appropriate records to include in the.
<tt style='background-color:#E8E8E8;'> names.FileAuthority <a href=' /names/authority.py#L120'>_lookup</a>(name,cls,type,timeout)</tt>	Determine a response to a particular dns query.
<tt style='background-color:#E8E8E8;'> names.BindAuthority <a href=' /names/authority.py#L300'>loadFile</a>(filename)</tt>	Load records from c{filename}.
<tt style='background-color:#E8E8E8;'> names.BindAuthority <a href=' /names/authority.py#L318'>stripComments</a>(lines)</tt>	Strip comments from c{lines}.
<tt style='background-color:#E8E8E8;'> names.BindAuthority <a href=' /names/authority.py#L334'>collapseContinuations</a>(lines)</tt>	Transform multiline statements into single lines.
<tt style='background-color:#E8E8E8;'> names.BindAuthority <a href=' /names/authority.py#L391'>addRecord</a>(owner,ttl,type,domain)</tt>	Add a record to our authority expand domain with origin if necessary.
<tt style='background-color:#E8E8E8;'> names.BindAuthority <a href=' /names/authority.py#L426'>class_IN</a>(ttl,type,domain,rdata)</tt>	Simulate a class in and recurse into the actual class.
<tt style='background-color:#E8E8E8;'> names.BindAuthority <a href=' /names/authority.py#L456'>parseRecordLine</a>(origin,ttl,line)</tt>	Parse a c{line} from a zone file respecting c{origin} and c{ttl}.
<tt style='background-color:#E8E8E8;'> names.ResolverBase <a href=' /names/common.py#L56'>exceptionForCode</a>(responseCode)</tt>	Convert a response code (one of the possible values of l{dns.
<tt style='background-color:#E8E8E8;'> names.SecondaryAuthorityService <a href=' /names/secondary.py#L24'>__init__</a>(primary,domains)</tt>	@param primary the ip address of the server from which to perform zone transfers.
<tt style='background-color:#E8E8E8;'> names.SecondaryAuthorityService <a href=' /names/secondary.py#L38'>fromServerAddressAndDomains</a>(cls,serverAddress,domains)</tt>	Construct a new l{secondaryauthorityservice} from a tuple giving a server address and a c{str} giving the name of a domain for which this.
<tt style='background-color:#E8E8E8;'> names.SecondaryAuthority <a href=' /names/secondary.py#L104'>__init__</a>(primaryIP,domain)</tt>	@param domain the domain for which this will be the secondary authority.
<tt style='background-color:#E8E8E8;'> names.SecondaryAuthority <a href=' /names/secondary.py#L118'>fromServerAddressAndDomain</a>(cls,serverAddress,domain)</tt>	Construct a new l{secondaryauthority} from a tuple giving a server address and a c{bytes} giving the name of a domain for which this is an.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/hosts.py#L79'>__init__</a>(resolv,servers,timeout,reactor)</tt>	Construct a resolver which will query domain name servers listed in the c{resolv.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/client.py#L139'>_openFile</a>(path)</tt>	Wrapper used for opening files in the class exists primarily for unit testing purposes.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/client.py#L195'>pickServer</a>()</tt>	Return the address of a nameserver.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/client.py#L215'>_connectedProtocol</a>(interface)</tt>	Return a new l{dnsdatagramprotocol} bound to a randomly selected port number.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/client.py#L231'>connectionMade</a>(protocol)</tt>	Called by associated l{dns dnsprotocol} instances when they connect.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/client.py#L241'>connectionLost</a>(protocol)</tt>	Called by associated l{dns dnsprotocol} instances when they disconnect.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/client.py#L253'>_query</a>()</tt>	Get a new l{dnsdatagramprotocol} instance from l{_connectedprotocol}, issue a query to it using c{*args}, and arrange for it to be.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/client.py#L277'>queryUDP</a>(queries,timeout)</tt>	Make a number of dns queries via udp.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/client.py#L339'>queryTCP</a>(queries,timeout)</tt>	Make a number of dns queries via tcp.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/client.py#L363'>filterAnswers</a>(message)</tt>	Extract results from the given message.
<tt style='background-color:#E8E8E8;'> names.DNSClientFactory <a href=' /names/client.py#L519'>clientConnectionFailed</a>(connector,reason)</tt>	Fail all pending tcp dns queries if the tcp connection attempt fails.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/client.py#L552'>createResolver</a>(servers,resolvconf,hosts)</tt>	Create and return a resolver.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/client.py#L595'>getResolver</a>()</tt>	Get a resolver instance.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/client.py#L614'>getHostByName</a>(name,timeout,effort)</tt>	Resolve a name to a valid ipv4 or ipv6 address.
<tt style='background-color:#E8E8E8;'> names.Options <a href=' /names/tap.py#L49'>opt_pyzone</a>(filename)</tt>	Specify the filename of a python syntax zone definition.
<tt style='background-color:#E8E8E8;'> names.Options <a href=' /names/tap.py#L55'>opt_bindzone</a>(filename)</tt>	Specify the filename of a bind9 syntax zone definition.
<tt style='background-color:#E8E8E8;'> names.Options <a href=' /names/tap.py#L62'>opt_secondary</a>(ip_domain)</tt>	Act as secondary for the specified domain performing.
<tt style='background-color:#E8E8E8;'> names.Options <a href=' /names/tap.py#L82'>opt_verbose</a>()</tt>	Increment verbosity level.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/tap.py#L115'>_buildResolvers</a>(config)</tt>	Build dns resolver instances in an order which leaves recursive resolving as a last resort.
<tt style='background-color:#E8E8E8;'> names.SRVConnector <a href=' /names/srvconnect.py#L56'>__init__</a>(reactor,service,domain,factory)</tt>	@param domain the domain to connect to if passed as a unicode.
<tt style='background-color:#E8E8E8;'> names.SRVConnector <a href=' /names/srvconnect.py#L90'>connect</a>()</tt>	Start connection to remote server.
<tt style='background-color:#E8E8E8;'> names.SRVConnector <a href=' /names/srvconnect.py#L140'>_ebServiceUnknown</a>(failure)</tt>	Connect to the default port when the service name is unknown.
<tt style='background-color:#E8E8E8;'> names.SRVConnector <a href=' /names/srvconnect.py#L154'>pickServer</a>()</tt>	Pick the next server.
<tt style='background-color:#E8E8E8;'> names.SRVConnector <a href=' /names/srvconnect.py#L231'>stopConnecting</a>()</tt>	Stop attempting to connect.
<tt style='background-color:#E8E8E8;'> names.SRVConnector <a href=' /names/srvconnect.py#L238'>disconnect</a>()</tt>	Disconnect whatever our are state is.
<tt style='background-color:#E8E8E8;'> names.CacheResolver <a href=' /names/cache.py#L91'>cacheResult</a>(query,payload,cacheTime)</tt>	Cache a dns entry.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/hosts.py#L20'>searchFileForAll</a>(hostsFile,name)</tt>	Search the given file which is in hosts 5 standard format for an address entry with a given name.
<tt style='background-color:#E8E8E8;'> names. <a href=' /names/hosts.py#L55'>searchFileFor</a>(file,name)</tt>	Grep given file which is in hosts 5 standard format for an address entry with a given name.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/hosts.py#L85'>_aRecords</a>(name)</tt>	Return a tuple of l{dns rrheader} instances for all of the ipv4.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/hosts.py#L98'>_aaaaRecords</a>(name)</tt>	Return a tuple of l{dns rrheader} instances for all of the ipv6.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/hosts.py#L111'>_respond</a>(name,records)</tt>	Generate a response for the given name containing the given result records or a failure if there are no result records.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/hosts.py#L131'>lookupAddress</a>(name,timeout)</tt>	Read any ipv4 addresses from c{self file} and return them as l{record_a}.
<tt style='background-color:#E8E8E8;'> names.Resolver <a href=' /names/hosts.py#L139'>lookupIPV6Address</a>(name,timeout)</tt>	Read any ipv6 addresses from c{self file} and return them as.
<tt style='background-color:#E8E8E8;'> internet._SocketWaker <a href=' /internet/posixbase.py#L87'>wakeUp</a>()</tt>	Send a byte to my connection.
<tt style='background-color:#E8E8E8;'> internet._SocketWaker <a href=' /internet/posixbase.py#L96'>doRead</a>()</tt>	Read some data from my connection.
<tt style='background-color:#E8E8E8;'> internet._FDWaker <a href=' /internet/posixbase.py#L141'>doRead</a>()</tt>	Read some bytes from the pipe and discard them.
<tt style='background-color:#E8E8E8;'> internet._FDWaker <a href=' /internet/posixbase.py#L148'>connectionLost</a>(reason)</tt>	Close both ends of my pipe.
<tt style='background-color:#E8E8E8;'> internet._UnixWaker <a href=' /internet/posixbase.py#L169'>wakeUp</a>()</tt>	Write one byte to the pipe and flush it.
<tt style='background-color:#E8E8E8;'> internet._SIGCHLDWaker <a href=' /internet/posixbase.py#L203'>install</a>()</tt>	Install the handler necessary to make this waker active.
<tt style='background-color:#E8E8E8;'> internet._SIGCHLDWaker <a href=' /internet/posixbase.py#L210'>uninstall</a>()</tt>	Remove the handler which makes this waker active.
<tt style='background-color:#E8E8E8;'> internet._SIGCHLDWaker <a href=' /internet/posixbase.py#L217'>doRead</a>()</tt>	Having woken up the reactor in response to receipt of c{sigchld}, reap the process which exited.
<tt style='background-color:#E8E8E8;'> internet._DisconnectSelectableMixin <a href=' /internet/posixbase.py#L237'>_disconnectSelectable</a>(selectable,why,isRead,faildict)</tt>	Utility function for disconnecting a selectable.
<tt style='background-color:#E8E8E8;'> internet.PosixReactorBase <a href=' /internet/posixbase.py#L276'>installWaker</a>()</tt>	Install a waker' to allow threads and signals to wake up the io thread.
<tt style='background-color:#E8E8E8;'> internet.PosixReactorBase <a href=' /internet/posixbase.py#L290'>_handleSignals</a>()</tt>	Extend the basic signal handling logic to also support handling sigchld to know when to try to reap child processes.
<tt style='background-color:#E8E8E8;'> internet.PosixReactorBase <a href=' /internet/posixbase.py#L309'>_uninstallHandler</a>()</tt>	If a child waker was created and installed uninstall it now.
<tt style='background-color:#E8E8E8;'> internet.PosixReactorBase <a href=' /internet/posixbase.py#L363'>listenUDP</a>(port,protocol,interface,maxPacketSize)</tt>	Connects a given l{datagramprotocol} to the given numeric udp port.
<tt style='background-color:#E8E8E8;'> internet.PosixReactorBase <a href=' /internet/posixbase.py#L374'>listenMulticast</a>(port,protocol,interface,maxPacketSize)</tt>	Connects a given datagramprotocol to the given numeric udp port.
<tt style='background-color:#E8E8E8;'> internet.PosixReactorBase <a href=' /internet/posixbase.py#L403'>listenUNIXDatagram</a>(address,protocol,maxPacketSize,mode)</tt>	Connects a given l{datagramprotocol} to the given path.
<tt style='background-color:#E8E8E8;'> internet.PosixReactorBase <a href=' /internet/posixbase.py#L417'>connectUNIXDatagram</a>(address,protocol,maxPacketSize,mode)</tt>	Connects a l{connecteddatagramprotocol} instance to a path.
<tt style='background-color:#E8E8E8;'> internet.PosixReactorBase <a href=' /internet/posixbase.py#L432'>adoptStreamPort</a>(fileDescriptor,addressFamily,factory)</tt>	Create a new l{ilisteningport} from an already-initialized socket.
<tt style='background-color:#E8E8E8;'> internet.PosixReactorBase <a href=' /internet/posixbase.py#L517'>_removeAll</a>(readers,writers)</tt>	Remove all readers and writers and list of removed l{ireaddescriptor}s and l{iwritedescriptor}s.
<tt style='background-color:#E8E8E8;'> internet._PollLikeMixin <a href=' /internet/posixbase.py#L555'>_doReadOrWrite</a>(selectable,fd,event)</tt>	Fd is available for read or write do the work and raise errors if necessary.
<tt style='background-color:#E8E8E8;'> internet._ContinuousPolling <a href=' /internet/posixbase.py#L650'>_checkLoop</a>()</tt>	Start or stop a c{loopingcall} based on whether there are readers and writers.
<tt style='background-color:#E8E8E8;'> internet._ContinuousPolling <a href=' /internet/posixbase.py#L668'>iterate</a>()</tt>	Call c{doread} and c{dowrite} on all readers and writers respectively.
<tt style='background-color:#E8E8E8;'> internet._ContinuousPolling <a href=' /internet/posixbase.py#L678'>addReader</a>(reader)</tt>	Add a c{filedescriptor} for notification of data available to read.
<tt style='background-color:#E8E8E8;'> internet._ContinuousPolling <a href=' /internet/posixbase.py#L686'>addWriter</a>(writer)</tt>	Add a c{filedescriptor} for notification of data available to write.
<tt style='background-color:#E8E8E8;'> internet._ContinuousPolling <a href=' /internet/posixbase.py#L694'>removeReader</a>(reader)</tt>	Remove a c{filedescriptor} from notification of data available to read.
<tt style='background-color:#E8E8E8;'> internet._ContinuousPolling <a href=' /internet/posixbase.py#L705'>removeWriter</a>(writer)</tt>	Remove a c{filedescriptor} from notification of data available to write.
<tt style='background-color:#E8E8E8;'> internet._ContinuousPolling <a href=' /internet/posixbase.py#L717'>removeAll</a>()</tt>	Remove all readers and writers.
<tt style='background-color:#E8E8E8;'> internet._ContinuousPolling <a href=' /internet/posixbase.py#L729'>getReaders</a>()</tt>	Return a list of the readers.
<tt style='background-color:#E8E8E8;'> internet._ContinuousPolling <a href=' /internet/posixbase.py#L736'>getWriters</a>()</tt>	Return a list of the writers.
<tt style='background-color:#E8E8E8;'> internet._ContinuousPolling <a href=' /internet/posixbase.py#L743'>isReading</a>(fd)</tt>	Checks if the file descriptor is currently being observed for read readiness.
<tt style='background-color:#E8E8E8;'> internet._ContinuousPolling <a href=' /internet/posixbase.py#L757'>isWriting</a>(fd)</tt>	Checks if the file descriptor is currently being observed for write readiness.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/gireactor.py#L171'>install</a>(widget,ms,reactor)</tt>	Install a tkinter tk() object into the reactor.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/tksupport.py#L52'>uninstall</a>()</tt>	Remove the root tk widget from the reactor.
<tt style='background-color:#E8E8E8;'> internet.BaseProcess <a href=' /internet/_baseprocess.py#L44'>processEnded</a>(status)</tt>	This is called when the child terminates.
<tt style='background-color:#E8E8E8;'> internet.BaseProcess <a href=' /internet/_baseprocess.py#L55'>maybeCallProcessEnded</a>()</tt>	Call processended on protocol after final cleanup.
<tt style='background-color:#E8E8E8;'> internet._DCHandle <a href=' /internet/asyncioreactor.py#L43'>cancel</a>()</tt>	Cancel the inner l{asyncio handle}.
<tt style='background-color:#E8E8E8;'> internet.AsyncioSelectorReactor <a href=' /internet/asyncioreactor.py#L72'>_unregisterFDInAsyncio</a>(fd)</tt>	Compensate for a bug in asyncio where it will not unregister a fd that it cannot handle in the epoll loop.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/gireactor.py#L171'>install</a>(eventloop)</tt>	Install an asyncio-based reactor.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_glibbase.py#L26'>ensureNotImported</a>(moduleNames,errorMessage,preventImports)</tt>	Check whether the given modules were imported and if requested ensure they will not be importable in the future.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L165'>_ioEventCallback</a>(source,condition)</tt>	Called by event loop when an i/o event occurs.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L174'>_add</a>(source,primary,other,primaryFlag)</tt>	Add the given l{filedescriptor} for monitoring either for reading or writing.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L192'>addReader</a>(reader)</tt>	Add a l{filedescriptor} for monitoring of data available to read.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L200'>addWriter</a>(writer)</tt>	Add a l{filedescriptor} for monitoring ability to write data.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L208'>getReaders</a>()</tt>	Retrieve the list of current l{filedescriptor} monitored for reading.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L215'>getWriters</a>()</tt>	Retrieve the list of current l{filedescriptor} monitored for writing.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L222'>removeAll</a>()</tt>	Remove monitoring for all registered l{filedescriptor}s.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L229'>_remove</a>(source,primary,other,flags)</tt>	Remove monitoring the given l{filedescriptor} for either reading or writing.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L246'>removeReader</a>(reader)</tt>	Stop monitoring the given l{filedescriptor} for reading.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L253'>removeWriter</a>(writer)</tt>	Stop monitoring the given l{filedescriptor} for writing.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L260'>iterate</a>(delay)</tt>	One iteration of the event loop for trial's use.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L271'>crash</a>()</tt>	Crash the reactor.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L279'>stop</a>()</tt>	Stop the reactor.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L294'>run</a>(installSignalHandlers)</tt>	Run the reactor.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L304'>callLater</a>()</tt>	Schedule a c{delayedcall}.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L315'>_reschedule</a>()</tt>	Schedule a glib timeout for c{_simulate}.
<tt style='background-color:#E8E8E8;'> internet.GlibReactorBase <a href=' /internet/_glibbase.py#L329'>_simulate</a>()</tt>	Run timers and then reschedule glib timeout for next scheduled event.
<tt style='background-color:#E8E8E8;'> internet.PortableGlibReactorBase <a href=' /internet/_glibbase.py#L378'>simulate</a>()</tt>	Run simulation loops and reschedule callbacks.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/main.py#L22'>installReactor</a>(reactor)</tt>	Install reactor c{reactor}.
<tt style='background-color:#E8E8E8;'> internet.SerialPort <a href=' /internet/_posixserialport.py#L50'>writeSomeData</a>(data)</tt>	Write some data to the serial device.
<tt style='background-color:#E8E8E8;'> internet.SerialPort <a href=' /internet/_posixserialport.py#L57'>doRead</a>()</tt>	Some data's readable from serial device.
<tt style='background-color:#E8E8E8;'> internet.SerialPort <a href=' /internet/_win32serialport.py#L116'>connectionLost</a>(reason)</tt>	Called when the serial port disconnects.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/gireactor.py#L171'>install</a>(useGtk)</tt>	Configure the twisted mainloop to be run inside the glib mainloop.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/gtk2reactor.py#L105'>portableInstall</a>(useGtk)</tt>	Configure the twisted mainloop to be run inside the gtk mainloop.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/inotify.py#L109'>humanReadableMask</a>(mask)</tt>	Auxiliary function that converts a hexadecimal mask into a series of human readable flags.
<tt style='background-color:#E8E8E8;'> internet._Watch <a href=' /internet/inotify.py#L144'>_notify</a>(filepath,events)</tt>	Callback function used by l{inotify} to dispatch an event.
<tt style='background-color:#E8E8E8;'> internet.INotify <a href=' /internet/inotify.py#L191'>_addWatch</a>(path,mask,autoAdd,callbacks)</tt>	Private helper that abstracts the use of ctypes.
<tt style='background-color:#E8E8E8;'> internet.INotify <a href=' /internet/inotify.py#L212'>_rmWatch</a>(wd)</tt>	Private helper that abstracts the use of ctypes.
<tt style='background-color:#E8E8E8;'> internet.INotify <a href=' /internet/inotify.py#L225'>connectionLost</a>(reason)</tt>	Release the inotify file descriptor and do the necessary cleanup.
<tt style='background-color:#E8E8E8;'> internet.INotify <a href=' /internet/inotify.py#L237'>fileno</a>()</tt>	Get the underlying file descriptor from this inotify observer.
<tt style='background-color:#E8E8E8;'> internet.INotify <a href=' /internet/inotify.py#L245'>doRead</a>()</tt>	Read some data from the observed file descriptors.
<tt style='background-color:#E8E8E8;'> internet.INotify <a href=' /internet/inotify.py#L252'>_doRead</a>(in_)</tt>	Work on the data just read from the file descriptor.
<tt style='background-color:#E8E8E8;'> internet.INotify <a href=' /internet/inotify.py#L298'>_addChildren</a>(iwp)</tt>	This is a very private method please don't even think about using it.
<tt style='background-color:#E8E8E8;'> internet.INotify <a href=' /internet/inotify.py#L337'>watch</a>(path,mask,autoAdd,callbacks)</tt>	Watch the 'mask' events in given path can raise c{inotifyerror} when.
<tt style='background-color:#E8E8E8;'> internet.INotify <a href=' /internet/inotify.py#L383'>ignore</a>(path)</tt>	Remove the watch point monitoring the given path.
<tt style='background-color:#E8E8E8;'> internet.INotify <a href=' /internet/inotify.py#L398'>_isWatched</a>(path)</tt>	Helper function that checks if the path is already monitored and returns its watchdescriptor if so or none otherwise.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/fdesc.py#L21'>setNonBlocking</a>(fd)</tt>	Set the file description of the given file descriptor to non-blocking.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/fdesc.py#L30'>setBlocking</a>(fd)</tt>	Set the file description of the given file descriptor to blocking.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/fdesc.py#L62'>readFromFD</a>(fd,callback)</tt>	Read from file descriptor calling callback with resulting data.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/fdesc.py#L97'>writeToFD</a>(fd,data)</tt>	Write data to file descriptor.
<tt style='background-color:#E8E8E8;'> internet._PullToPush <a href=' /internet/_producer_helpers.py#L56'>_pull</a>()</tt>	A generator that calls c{resumeproducing} on the underlying producer forever.
<tt style='background-color:#E8E8E8;'> internet._PullToPush <a href=' /internet/_producer_helpers.py#L84'>startStreaming</a>()</tt>	This should be called by the consumer when the producer is registered.
<tt style='background-color:#E8E8E8;'> internet._PullToPush <a href=' /internet/_producer_helpers.py#L93'>stopStreaming</a>()</tt>	This should be called by the consumer when the producer is unregistered.
<tt style='background-color:#E8E8E8;'> internet._PullToPush <a href=' /internet/_producer_helpers.py#L106'>pauseProducing</a>()</tt>	@see c{ipushproducer pauseproducing}.
<tt style='background-color:#E8E8E8;'> internet._PullToPush <a href=' /internet/_producer_helpers.py#L113'>resumeProducing</a>()</tt>	@see c{ipushproducer resumeproducing}.
<tt style='background-color:#E8E8E8;'> internet._PullToPush <a href=' /internet/_producer_helpers.py#L120'>stopProducing</a>()</tt>	@see c{ipushproducer stopproducing}.
<tt style='background-color:#E8E8E8;'> internet.ContextFactory <a href=' /internet/ssl.py#L76'>getContext</a>()</tt>	Return a ssl context object override in subclasses.
<tt style='background-color:#E8E8E8;'> internet.DefaultOpenSSLContextFactory <a href=' /internet/ssl.py#L93'>__init__</a>(privateKeyFileName,certificateFileName,sslmethod,_contextFactory)</tt>	@param privatekeyfilename name of a file containing a private key.
<tt style='background-color:#E8E8E8;'> internet.DefaultOpenSSLContextFactory <a href=' /internet/ssl.py#L132'>getContext</a>()</tt>	Return an ssl context.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/ssl.py#L206'>_getLogPrefix</a>(factory)</tt>	Override the normal prefix to include an annotation indicating this is a port for tls connections.
<tt style='background-color:#E8E8E8;'> internet.LoopingCall <a href=' /internet/task.py#L75'>deferred</a>()</tt>	Deprecated l{deferred} fired when loop stops or fails.
<tt style='background-color:#E8E8E8;'> internet.LoopingCall <a href=' /internet/task.py#L90'>withCount</a>(cls,countCallable)</tt>	An alternate constructor for l{loopingcall} that makes available the number of calls which should have occurred since it was last invoked.
<tt style='background-color:#E8E8E8;'> internet.LoopingCall <a href=' /internet/task.py#L150'>_intervalOf</a>(t)</tt>	Determine the number of intervals passed as of the given point in time.
<tt style='background-color:#E8E8E8;'> internet.LoopingCall <a href=' /internet/task.py#L166'>start</a>(interval,now)</tt>	Start running function every interval seconds.
<tt style='background-color:#E8E8E8;'> internet.LoopingCall <a href=' /internet/task.py#L199'>stop</a>()</tt>	Stop running function.
<tt style='background-color:#E8E8E8;'> internet.LoopingCall <a href=' /internet/task.py#L211'>reset</a>()</tt>	Skip the next iteration and reset the timer.
<tt style='background-color:#E8E8E8;'> internet.LoopingCall <a href=' /internet/task.py#L244'>_scheduleFrom</a>(when)</tt>	Schedule the next iteration of this looping call.
<tt style='background-color:#E8E8E8;'> internet.CooperativeTask <a href=' /internet/task.py#L404'>__init__</a>(iterator,cooperator)</tt>	A private constructor to create a new l{cooperativetask}, see l{cooperator.
<tt style='background-color:#E8E8E8;'> internet.CooperativeTask <a href=' /internet/task.py#L418'>whenDone</a>()</tt>	Get a l{defer deferred} notification of when this task is complete.
<tt style='background-color:#E8E8E8;'> internet.CooperativeTask <a href=' /internet/task.py#L438'>pause</a>()</tt>	Pause this l{cooperativetask} stop doing work until.
<tt style='background-color:#E8E8E8;'> internet.CooperativeTask <a href=' /internet/task.py#L453'>resume</a>()</tt>	Resume processing of a paused l{cooperativetask}.
<tt style='background-color:#E8E8E8;'> internet.CooperativeTask <a href=' /internet/task.py#L466'>_completeWith</a>(completionState,deferredResult)</tt>	@param completionstate a l{taskfinished} exception or a subclass thereof indicating what exception should be raised when subsequent.
<tt style='background-color:#E8E8E8;'> internet.CooperativeTask <a href=' /internet/task.py#L490'>stop</a>()</tt>	Stop further processing of this task.
<tt style='background-color:#E8E8E8;'> internet.CooperativeTask <a href=' /internet/task.py#L501'>_checkFinish</a>()</tt>	If this task has been stopped raise the appropriate subclass of l{taskfinished}.
<tt style='background-color:#E8E8E8;'> internet.CooperativeTask <a href=' /internet/task.py#L510'>_oneWorkUnit</a>()</tt>	Perform one unit of work for this task retrieving one item from its iterator stopping if there are no further items in the iterator and.
<tt style='background-color:#E8E8E8;'> internet.Cooperator <a href=' /internet/task.py#L565'>__init__</a>(terminationPredicateFactory,scheduler,started)</tt>	Create a scheduler-like object to which iterators may be added.
<tt style='background-color:#E8E8E8;'> internet.Cooperator <a href=' /internet/task.py#L595'>coiterate</a>(iterator,doneDeferred)</tt>	Add an iterator to the list of iterators this l{cooperator} is currently running.
<tt style='background-color:#E8E8E8;'> internet.Cooperator <a href=' /internet/task.py#L615'>cooperate</a>(iterator)</tt>	Start running the given iterator as a long-running cooperative task by calling next() on it as a periodic timed event.
<tt style='background-color:#E8E8E8;'> internet.Cooperator <a href=' /internet/task.py#L627'>_addTask</a>(task)</tt>	Add a l{cooperativetask} object to this l{cooperator}.
<tt style='background-color:#E8E8E8;'> internet.Cooperator <a href=' /internet/task.py#L640'>_removeTask</a>(task)</tt>	Remove a l{cooperativetask} from this l{cooperator}.
<tt style='background-color:#E8E8E8;'> internet.Cooperator <a href=' /internet/task.py#L651'>_tasksWhileNotStopped</a>()</tt>	Yield all l{cooperativetask} objects in a loop as long as this l{cooperator}'s termination condition has not been met.
<tt style='background-color:#E8E8E8;'> internet.Cooperator <a href=' /internet/task.py#L665'>_tick</a>()</tt>	Run one scheduler tick.
<tt style='background-color:#E8E8E8;'> internet.Cooperator <a href=' /internet/task.py#L684'>start</a>()</tt>	Begin scheduling steps.
<tt style='background-color:#E8E8E8;'> internet.Cooperator <a href=' /internet/task.py#L695'>stop</a>()</tt>	Stop scheduling steps errback the completion deferreds of all.
<tt style='background-color:#E8E8E8;'> internet.Cooperator <a href=' /internet/task.py#L710'>running</a>()</tt>	Is this l{cooperator} is currently running? @return c{true} if the l{cooperator} is running c{false} otherwise.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/task.py#L724'>coiterate</a>(iterator)</tt>	Cooperatively iterate over the given iterator dividing runtime between it and all other iterators which have been passed to this function and not yet.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/task.py#L738'>cooperate</a>(iterator)</tt>	Start running the given iterator as a long-running cooperative task by calling next() on it as a periodic timed event.
<tt style='background-color:#E8E8E8;'> internet.Clock <a href=' /internet/task.py#L771'>seconds</a>()</tt>	Pretend to be time time() this is used internally when an operation.
<tt style='background-color:#E8E8E8;'> internet.Clock <a href=' /internet/task.py#L783'>_sortCalls</a>()</tt>	Sort the pending calls according to the time they are scheduled.
<tt style='background-color:#E8E8E8;'> internet.Clock <a href=' /internet/task.py#L790'>callLater</a>(when,what)</tt>	See l{twisted internet interfaces ireactortime calllater}.
<tt style='background-color:#E8E8E8;'> internet.Clock <a href=' /internet/task.py#L804'>getDelayedCalls</a>()</tt>	See l{twisted internet interfaces ireactortime getdelayedcalls}.
<tt style='background-color:#E8E8E8;'> internet.Clock <a href=' /internet/task.py#L811'>advance</a>(amount)</tt>	Move time on this clock forward by the given amount and run whatever pending calls should be run.
<tt style='background-color:#E8E8E8;'> internet.Clock <a href=' /internet/task.py#L829'>pump</a>(timings)</tt>	Advance incrementally by the given set of times.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/task.py#L840'>deferLater</a>(clock,delay,callable)</tt>	Call the given function after a certain period of time has passed.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/task.py#L871'>react</a>(main,argv,_reactor)</tt>	Call c{main} and run the reactor until the l{deferred} it returns fires.
<tt style='background-color:#E8E8E8;'> internet.Gtk3Reactor <a href=' /internet/gtk3reactor.py#L46'>__init__</a>()</tt>	Override init to set the c{usegtk} flag.
<tt style='background-color:#E8E8E8;'> internet.PortableGtk3Reactor <a href=' /internet/gtk3reactor.py#L58'>__init__</a>()</tt>	Override init to set the c{usegtk} flag.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/gireactor.py#L171'>install</a>()</tt>	Configure the twisted mainloop to be run using the select() reactor.
<tt style='background-color:#E8E8E8;'> internet._WrappingProtocol <a href=' /internet/endpoints.py#L79'>__init__</a>(connectedDeferred,wrappedProtocol)</tt>	@param connecteddeferred the l{deferred} that will callback with the c{wrappedprotocol} when it is connected.
<tt style='background-color:#E8E8E8;'> internet._WrappingProtocol <a href=' /internet/endpoints.py#L97'>logPrefix</a>()</tt>	Transparently pass through the wrapped protocol's log prefix.
<tt style='background-color:#E8E8E8;'> internet._WrappingProtocol <a href=' /internet/endpoints.py#L106'>connectionMade</a>()</tt>	Connect the c{self _wrappedprotocol} to our c{self transport} and.
<tt style='background-color:#E8E8E8;'> internet._WrappingProtocol <a href=' /internet/endpoints.py#L115'>dataReceived</a>(data)</tt>	Proxy c{datareceived} calls to our c{self _wrappedprotocol}.
<tt style='background-color:#E8E8E8;'> internet._WrappingProtocol <a href=' /internet/endpoints.py#L122'>fileDescriptorReceived</a>(descriptor)</tt>	Proxy c{filedescriptorreceived} calls to our c{self _wrappedprotocol}.
<tt style='background-color:#E8E8E8;'> internet._WrappingProtocol <a href=' /internet/endpoints.py#L129'>connectionLost</a>(reason)</tt>	Proxy c{connectionlost} calls to our c{self _wrappedprotocol}.
<tt style='background-color:#E8E8E8;'> internet._WrappingProtocol <a href=' /internet/endpoints.py#L136'>readConnectionLost</a>()</tt>	Proxy l{ihalfcloseableprotocol readconnectionlost} to our.
<tt style='background-color:#E8E8E8;'> internet._WrappingProtocol <a href=' /internet/endpoints.py#L144'>writeConnectionLost</a>()</tt>	Proxy l{ihalfcloseableprotocol writeconnectionlost} to our.
<tt style='background-color:#E8E8E8;'> internet._WrappingProtocol <a href=' /internet/endpoints.py#L152'>handshakeCompleted</a>()</tt>	Proxy l{interfaces ihandshakelistener} to our.
<tt style='background-color:#E8E8E8;'> internet._WrappingFactory <a href=' /internet/endpoints.py#L176'>__init__</a>(wrappedFactory)</tt>	@param wrappedfactory a provider of i{iprotocolfactory} whose buildprotocol method will be called and whose resulting protocol.
<tt style='background-color:#E8E8E8;'> internet._WrappingFactory <a href=' /internet/endpoints.py#L186'>startedConnecting</a>(connector)</tt>	A connection attempt was started remember the connector which started.
<tt style='background-color:#E8E8E8;'> internet._WrappingFactory <a href=' /internet/endpoints.py#L194'>_canceller</a>(deferred)</tt>	The outgoing connection attempt was cancelled fail that l{deferred}.
<tt style='background-color:#E8E8E8;'> internet._WrappingFactory <a href=' /internet/endpoints.py#L219'>doStart</a>()</tt>	Start notifications are passed straight through to the wrapped factory.
<tt style='background-color:#E8E8E8;'> internet._WrappingFactory <a href=' /internet/endpoints.py#L226'>doStop</a>()</tt>	Stop notifications are passed straight through to the wrapped factory.
<tt style='background-color:#E8E8E8;'> internet._WrappingFactory <a href=' /internet/endpoints.py#L233'>buildProtocol</a>(addr)</tt>	Proxy c{buildprotocol} to our c{self _wrappedfactory} or errback the.
<tt style='background-color:#E8E8E8;'> internet._WrappingFactory <a href=' /internet/endpoints.py#L251'>clientConnectionFailed</a>(connector,reason)</tt>	Errback the c{self _onconnection} l{deferred} when the.
<tt style='background-color:#E8E8E8;'> internet.StandardIOEndpoint <a href=' /internet/endpoints.py#L273'>__init__</a>(reactor)</tt>	@param reactor the reactor for the endpoint.
<tt style='background-color:#E8E8E8;'> internet.StandardIOEndpoint <a href=' /internet/endpoints.py#L280'>listen</a>(stdioProtocolFactory)</tt>	Implement l{istreamserverendpoint listen} to listen on stdin/stdout.
<tt style='background-color:#E8E8E8;'> internet._WrapIProtocol <a href=' /internet/endpoints.py#L326'>__init__</a>(proto,executable,errFlag)</tt>	@param proto an l{iprotocol} provider.
<tt style='background-color:#E8E8E8;'> internet._WrapIProtocol <a href=' /internet/endpoints.py#L338'>makeConnection</a>(process)</tt>	Call l{iprotocol} provider's makeconnection method with an l{itransport} provider.
<tt style='background-color:#E8E8E8;'> internet._WrapIProtocol <a href=' /internet/endpoints.py#L349'>childDataReceived</a>(childFD,data)</tt>	This is called with data from the process's stdout or stderr pipes it.
<tt style='background-color:#E8E8E8;'> internet._WrapIProtocol <a href=' /internet/endpoints.py#L365'>processEnded</a>(reason)</tt>	If the process ends with l{error processdone}, this method calls the.
<tt style='background-color:#E8E8E8;'> internet.ProcessEndpoint <a href=' /internet/endpoints.py#L405'>__init__</a>(reactor,executable,args,env)</tt>	See l{ireactorprocess spawnprocess}.
<tt style='background-color:#E8E8E8;'> internet.ProcessEndpoint <a href=' /internet/endpoints.py#L427'>connect</a>(protocolFactory)</tt>	Implement l{istreamclientendpoint connect} to launch a child process.
<tt style='background-color:#E8E8E8;'> internet._TCPServerEndpoint <a href=' /internet/endpoints.py#L454'>__init__</a>(reactor,port,backlog,interface)</tt>	@param reactor an l{ireactortcp} provider.
<tt style='background-color:#E8E8E8;'> internet._TCPServerEndpoint <a href=' /internet/endpoints.py#L473'>listen</a>(protocolFactory)</tt>	Implement l{istreamserverendpoint listen} to listen on a tcp.
<tt style='background-color:#E8E8E8;'> internet.TCP4ServerEndpoint <a href=' /internet/endpoints.py#L490'>__init__</a>(reactor,port,backlog,interface)</tt>	@param reactor an l{ireactortcp} provider.
<tt style='background-color:#E8E8E8;'> internet.TCP6ServerEndpoint <a href=' /internet/endpoints.py#L511'>__init__</a>(reactor,port,backlog,interface)</tt>	@param reactor an l{ireactortcp} provider.
<tt style='background-color:#E8E8E8;'> internet.TCP4ClientEndpoint <a href=' /internet/endpoints.py#L534'>__init__</a>(reactor,host,port,timeout)</tt>	@param reactor an l{ireactortcp} provider @param host a hostname used when connecting.
<tt style='background-color:#E8E8E8;'> internet.TCP4ClientEndpoint <a href=' /internet/endpoints.py#L559'>connect</a>(protocolFactory)</tt>	Implement l{istreamclientendpoint connect} to connect via tcp.
<tt style='background-color:#E8E8E8;'> internet.TCP6ClientEndpoint <a href=' /internet/endpoints.py#L595'>__init__</a>(reactor,host,port,timeout)</tt>	@param host an ipv6 address literal or a hostname with an ipv6 address.
<tt style='background-color:#E8E8E8;'> internet.TCP6ClientEndpoint <a href=' /internet/endpoints.py#L609'>connect</a>(protocolFactory)</tt>	Implement l{istreamclientendpoint connect} to connect via tcp.
<tt style='background-color:#E8E8E8;'> internet.TCP6ClientEndpoint <a href=' /internet/endpoints.py#L624'>_nameResolution</a>(host)</tt>	Resolve the hostname string into a tuple containing the host ipv6 address.
<tt style='background-color:#E8E8E8;'> internet.TCP6ClientEndpoint <a href=' /internet/endpoints.py#L633'>_resolvedHostConnect</a>(resolvedHost,protocolFactory)</tt>	Connect to the server using the resolved hostname.
<tt style='background-color:#E8E8E8;'> internet.HostnameEndpoint <a href=' /internet/endpoints.py#L677'>__init__</a>(reactor,host,port,timeout)</tt>	Create a l{hostnameendpoint}.
<tt style='background-color:#E8E8E8;'> internet.HostnameEndpoint <a href=' /internet/endpoints.py#L719'>_hostAsBytesAndText</a>(host)</tt>	For various reasons (documented in the c{@ivar}'s in the class docstring) we need both a textual and a binary representation of the.
<tt style='background-color:#E8E8E8;'> internet.HostnameEndpoint <a href=' /internet/endpoints.py#L765'>connect</a>(protocolFactory)</tt>	Attempts a connection to each address returned by gai and returns a connection which is established first.
<tt style='background-color:#E8E8E8;'> internet.SSL4ServerEndpoint <a href=' /internet/endpoints.py#L898'>__init__</a>(reactor,port,sslContextFactory,backlog)</tt>	@param reactor an l{ireactorssl} provider.
<tt style='background-color:#E8E8E8;'> internet.SSL4ServerEndpoint <a href=' /internet/endpoints.py#L922'>listen</a>(protocolFactory)</tt>	Implement l{istreamserverendpoint listen} to listen for ssl on a.
<tt style='background-color:#E8E8E8;'> internet.SSL4ClientEndpoint <a href=' /internet/endpoints.py#L941'>__init__</a>(reactor,host,port,sslContextFactory)</tt>	@param reactor an l{ireactorssl} provider.
<tt style='background-color:#E8E8E8;'> internet.SSL4ClientEndpoint <a href=' /internet/endpoints.py#L971'>connect</a>(protocolFactory)</tt>	Implement l{istreamclientendpoint connect} to connect with ssl over.
<tt style='background-color:#E8E8E8;'> internet.UNIXServerEndpoint <a href=' /internet/endpoints.py#L992'>__init__</a>(reactor,address,backlog,mode)</tt>	@param reactor an l{ireactorunix} provider.
<tt style='background-color:#E8E8E8;'> internet.UNIXServerEndpoint <a href=' /internet/endpoints.py#L1009'>listen</a>(protocolFactory)</tt>	Implement l{istreamserverendpoint listen} to listen on a unix socket.
<tt style='background-color:#E8E8E8;'> internet.UNIXClientEndpoint <a href=' /internet/endpoints.py#L1026'>__init__</a>(reactor,path,timeout,checkPID)</tt>	@param reactor an l{ireactorunix} provider.
<tt style='background-color:#E8E8E8;'> internet.UNIXClientEndpoint <a href=' /internet/endpoints.py#L1047'>connect</a>(protocolFactory)</tt>	Implement l{istreamclientendpoint connect} to connect via a.
<tt style='background-color:#E8E8E8;'> internet.AdoptedStreamServerEndpoint <a href=' /internet/endpoints.py#L1076'>__init__</a>(reactor,fileno,addressFamily)</tt>	@param reactor an l{ireactorsocket} provider.
<tt style='background-color:#E8E8E8;'> internet.AdoptedStreamServerEndpoint <a href=' /internet/endpoints.py#L1092'>listen</a>(factory)</tt>	Implement l{istreamserverendpoint listen} to start listening on and.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1112'>_parseTCP</a>(factory,port,interface,backlog)</tt>	Internal parser function for l{_parseserver} to convert the string arguments for a tcp ipv4 stream endpoint into the structured arguments.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1139'>_parseUNIX</a>(factory,address,mode,backlog)</tt>	Internal parser function for l{_parseserver} to convert the string arguments for a unix (af_unix/sock_stream) stream endpoint into the.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1171'>_parseSSL</a>(factory,port,privateKey,certKey)</tt>	Internal parser function for l{_parseserver} to convert the string arguments for an ssl (over tcp/ipv4) stream endpoint into the structured.
<tt style='background-color:#E8E8E8;'> internet._StandardIOParser <a href=' /internet/endpoints.py#L1266'>_parseServer</a>(reactor)</tt>	Internal parser function for l{_parseserver} to convert the string.
<tt style='background-color:#E8E8E8;'> internet._SystemdParser <a href=' /internet/endpoints.py#L1297'>_parseServer</a>(reactor,domain,index)</tt>	Internal parser function for l{_parseserver} to convert the string arguments for a systemd server endpoint into structured arguments for.
<tt style='background-color:#E8E8E8;'> internet._TCP6ServerParser <a href=' /internet/endpoints.py#L1342'>_parseServer</a>(reactor,port,backlog,interface)</tt>	Internal parser function for l{_parseserver} to convert the string arguments into structured arguments for the l{tcp6serverendpoint}.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1377'>_tokenize</a>(description)</tt>	Tokenize a strports string and yield each token.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1420'>_parse</a>(description)</tt>	Convert a description string into a list of positional and keyword parameters using logic vaguely like what python does.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1465'>_parseServer</a>(description,factory)</tt>	Parse a strports description into a 2-tuple of arguments and keyword values.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1494'>_matchPluginToPrefix</a>(plugins,endpointType)</tt>	Match plugin to prefix.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1507'>serverFromString</a>(reactor,description)</tt>	Construct a stream server endpoint from an endpoint description string.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1581'>quoteStringArgument</a>(argument)</tt>	Quote an argument to l{serverfromstring} and l{clientfromstring} since.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1617'>_parseClientTCP</a>()</tt>	Perform any argument value coercion necessary for tcp client parameters.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1657'>_loadCAsFromDir</a>(directoryPath)</tt>	Load certificate-authority certificate objects in a given directory.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1686'>_parseTrustRootPath</a>(pathName)</tt>	Parse a string referring to a directory full of certificate authorities into a trust root.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1702'>_privateCertFromPaths</a>(certificatePath,keyPath)</tt>	Parse a certificate path and key path either or both of which might be l{none}, into a certificate object.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1728'>_parseClientSSLOptions</a>(kwargs)</tt>	Parse common arguments for ssl endpoints creating an l{certificateoptions} instance.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1767'>_parseClientSSL</a>()</tt>	Perform any argument value coercion necessary for ssl client parameters.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1798'>_parseClientUNIX</a>()</tt>	Perform any argument value coercion necessary for unix client parameters.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1831'>clientFromString</a>(reactor,description)</tt>	Construct a client endpoint from a description string.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1916'>connectProtocol</a>(endpoint,protocol)</tt>	Connect a protocol instance to an endpoint.
<tt style='background-color:#E8E8E8;'> internet._WrapperEndpoint <a href=' /internet/endpoints.py#L1945'>__init__</a>(wrappedEndpoint,wrapperFactory)</tt>	Construct a l{_wrapperendpoint}.
<tt style='background-color:#E8E8E8;'> internet._WrapperEndpoint <a href=' /internet/endpoints.py#L1953'>connect</a>(protocolFactory)</tt>	Connect the given protocol factory and unwrap its result.
<tt style='background-color:#E8E8E8;'> internet._WrapperServerEndpoint <a href=' /internet/endpoints.py#L1969'>__init__</a>(wrappedEndpoint,wrapperFactory)</tt>	Construct a l{_wrapperserverendpoint}.
<tt style='background-color:#E8E8E8;'> internet._WrapperServerEndpoint <a href=' /internet/endpoints.py#L1977'>listen</a>(protocolFactory)</tt>	Connect the given protocol factory and unwrap its result.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L1987'>wrapClientTLS</a>(connectionCreator,wrappedEndpoint)</tt>	Wrap an endpoint which upgrades to tls as soon as the connection is established.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/endpoints.py#L2018'>_parseClientTLS</a>(reactor,host,port,timeout)</tt>	Internal method to construct an endpoint from string parameters.
<tt style='background-color:#E8E8E8;'> internet._TLSClientEndpointParser <a href=' /internet/endpoints.py#L2087'>parseStreamClient</a>(reactor)</tt>	Redirects to another function l{_parseclienttls}; tricks zope interface.
<tt style='background-color:#E8E8E8;'> internet._WakerPlus <a href=' /internet/cfreactor.py#L64'>doRead</a>()</tt>	Wake up the loop and force c{rununtilcurrent} to run immediately in the next timed iteration.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L127'>installWaker</a>()</tt>	Override c{installwaker} in order to use l{_wakerplus}; otherwise this should be exactly the same as the parent implementation.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L138'>_socketCallback</a>(cfSocket,callbackType,ignoredAddress,ignoredData)</tt>	The socket callback issued by cfrunloop this will issue c{doread} or.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L206'>_watchFD</a>(fd,descr,flag)</tt>	Register a file descriptor with the c{cfrunloop}, or modify its state so that it's listening for both notifications read and write rather.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L262'>_flag2idx</a>(flag)</tt>	Convert a c{kcfsocket } constant to an index into the read/write.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L276'>_unwatchFD</a>(fd,descr,flag)</tt>	Unregister a file descriptor with the c{cfrunloop}, or modify its state so that it's listening for only one notification read or write as.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L307'>addReader</a>(reader)</tt>	Implement l{ireactorfdset addreader}.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L314'>addWriter</a>(writer)</tt>	Implement l{ireactorfdset addwriter}.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L321'>removeReader</a>(reader)</tt>	Implement l{ireactorfdset removereader}.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L328'>removeWriter</a>(writer)</tt>	Implement l{ireactorfdset removewriter}.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L335'>removeAll</a>()</tt>	Implement l{ireactorfdset removeall}.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L347'>getReaders</a>()</tt>	Implement l{ireactorfdset getreaders}.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L355'>getWriters</a>()</tt>	Implement l{ireactorfdset getwriters}.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L363'>_moveCallLaterSooner</a>(tple)</tt>	Override l{posixreactorbase}'s implementation of l{idelayedcall reset}.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L378'>mainLoop</a>()</tt>	Run the runner (c{cfrunlooprun} or something that calls it), which runs the run loop until c{crash()} is called.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L392'>_scheduleSimulate</a>(force)</tt>	Schedule a call to c{self rununtilcurrent} this will cancel the.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L425'>callLater</a>(_seconds,_f)</tt>	Implement l{ireactortime calllater}.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L436'>stop</a>()</tt>	Implement l{ireactorcore stop}.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L444'>crash</a>()</tt>	Implement l{ireactorcore crash}.
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L457'>_stopNow</a>()</tt>	Immediately stop the cfrunloop (which must be running!).
<tt style='background-color:#E8E8E8;'> internet.CFReactor <a href=' /internet/cfreactor.py#L464'>iterate</a>(delay)</tt>	Emulate the behavior of c{iterate()} for things that want to call it by letting the loop run for a little while and then scheduling a timed.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/gireactor.py#L171'>install</a>(runLoop,runner)</tt>	Configure the twisted mainloop to be run inside cfrunloop.
<tt style='background-color:#E8E8E8;'> internet._BypassTLS <a href=' /internet/_newtls.py#L45'>__getattr__</a>(name)</tt>	Forward any extra attribute access to the original transport object.
<tt style='background-color:#E8E8E8;'> internet._BypassTLS <a href=' /internet/_newtls.py#L54'>write</a>(data)</tt>	Write some bytes directly to the connection.
<tt style='background-color:#E8E8E8;'> internet._BypassTLS <a href=' /internet/_newtls.py#L61'>writeSequence</a>(iovec)</tt>	Write a some bytes directly to the connection.
<tt style='background-color:#E8E8E8;'> internet._BypassTLS <a href=' /internet/_newtls.py#L68'>loseConnection</a>()</tt>	Close the underlying connection.
<tt style='background-color:#E8E8E8;'> internet._BypassTLS <a href=' /internet/_newtls.py#L75'>registerProducer</a>(producer,streaming)</tt>	Register a producer with the underlying connection.
<tt style='background-color:#E8E8E8;'> internet._BypassTLS <a href=' /internet/_newtls.py#L82'>unregisterProducer</a>()</tt>	Unregister a producer with the underlying connection.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_newtls.py#L90'>startTLS</a>(transport,contextFactory,normal,bypass)</tt>	Add a layer of ssl to a transport.
<tt style='background-color:#E8E8E8;'> internet.ConnectionMixin <a href=' /internet/_newtls.py#L175'>startTLS</a>(ctx,normal)</tt>	@see l{itlstransport starttls}.
<tt style='background-color:#E8E8E8;'> internet.ConnectionMixin <a href=' /internet/_newtls.py#L182'>write</a>(bytes)</tt>	Write some bytes to this connection passing them through a tls layer if necessary or discarding them if the connection has already been lost.
<tt style='background-color:#E8E8E8;'> internet.ConnectionMixin <a href=' /internet/_newtls.py#L194'>writeSequence</a>(iovec)</tt>	Write some bytes to this connection scatter/gather-style passing them through a tls layer if necessary or discarding them if the connection.
<tt style='background-color:#E8E8E8;'> internet.ConnectionMixin <a href=' /internet/_newtls.py#L207'>loseConnection</a>()</tt>	Close this connection after writing all pending data.
<tt style='background-color:#E8E8E8;'> internet.ConnectionMixin <a href=' /internet/_newtls.py#L220'>registerProducer</a>(producer,streaming)</tt>	Register a producer.
<tt style='background-color:#E8E8E8;'> internet.ConnectionMixin <a href=' /internet/_newtls.py#L236'>unregisterProducer</a>()</tt>	Unregister a producer.
<tt style='background-color:#E8E8E8;'> internet._PollableWritePipe <a href=' /internet/_pollingfile.py#L201'>registerProducer</a>(producer,streaming)</tt>	Register to receive data from a producer.
<tt style='background-color:#E8E8E8;'> internet._PollableWritePipe <a href=' /internet/_pollingfile.py#L223'>unregisterProducer</a>()</tt>	Stop consuming data from a producer without disconnecting.
<tt style='background-color:#E8E8E8;'> internet._PollableWritePipe <a href=' /internet/_pollingfile.py#L238'>writeSequence</a>(seq)</tt>	Append a c{list} or c{tuple} of bytes to the output buffer.
<tt style='background-color:#E8E8E8;'> internet._PollableWritePipe <a href=' /internet/_pollingfile.py#L252'>write</a>(data)</tt>	Append some bytes to the output buffer.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_sslverify.py#L49'>_getExcludedTLSProtocols</a>(oldest,newest)</tt>	Given a pair of l{tlsversion} constants figure out what versions we want to disable as openssl is an exclusion based api.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_sslverify.py#L82'>simpleVerifyHostname</a>(connection,hostname)</tt>	Check only the common name in the certificate presented by the peer and only for an exact match.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_sslverify.py#L109'>_usablePyOpenSSL</a>(version)</tt>	Check pyopenssl version string whether we can use it for host verification.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_sslverify.py#L123'>_selectVerifyImplementation</a>()</tt>	Determine if c{service_identity} is installed if so use it if not use.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_sslverify.py#L180'>_sessionCounter</a>(counter)</tt>	Private - shared between all opensslcertificateoptions counts up to provide a unique session id for each context.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_sslverify.py#L212'>protocolNegotiationMechanisms</a>()</tt>	Checks whether your versions of pyopenssl and openssl are recent enough to support protocol negotiation and if they are what kind of protocol.
<tt style='background-color:#E8E8E8;'> internet.DistinguishedName <a href=' /internet/_sslverify.py#L347'>inspect</a>()</tt>	Return a multi-line human-readable representation of this dn.
<tt style='background-color:#E8E8E8;'> internet.CertBase <a href=' /internet/_sslverify.py#L392'>getSubject</a>()</tt>	Retrieve the subject of this certificate.
<tt style='background-color:#E8E8E8;'> internet.CertBase <a href=' /internet/_sslverify.py#L402'>__conform__</a>(interface)</tt>	Convert this l{certbase} into a provider of the given interface.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_sslverify.py#L418'>_handleattrhelper</a>(Class,transport,methodName)</tt>	Private helper for l{certificate peerfromtransport} and.
<tt style='background-color:#E8E8E8;'> internet.Certificate <a href=' /internet/_sslverify.py#L458'>load</a>(Class,requestData,format,args)</tt>	Load a certificate from an asn 1- or pem-format string.
<tt style='background-color:#E8E8E8;'> internet.Certificate <a href=' /internet/_sslverify.py#L472'>dumpPEM</a>()</tt>	Dump this certificate to a pem-format data string.
<tt style='background-color:#E8E8E8;'> internet.Certificate <a href=' /internet/_sslverify.py#L481'>loadPEM</a>(Class,data)</tt>	Load a certificate from a pem-format data string.
<tt style='background-color:#E8E8E8;'> internet.Certificate <a href=' /internet/_sslverify.py#L491'>peerFromTransport</a>(Class,transport)</tt>	Get the certificate for the remote end of the given transport.
<tt style='background-color:#E8E8E8;'> internet.Certificate <a href=' /internet/_sslverify.py#L506'>hostFromTransport</a>(Class,transport)</tt>	Get the certificate for the local end of the given transport.
<tt style='background-color:#E8E8E8;'> internet.Certificate <a href=' /internet/_sslverify.py#L521'>getPublicKey</a>()</tt>	Get the public key for this certificate.
<tt style='background-color:#E8E8E8;'> internet.Certificate <a href=' /internet/_sslverify.py#L534'>serialNumber</a>()</tt>	Retrieve the serial number of this certificate.
<tt style='background-color:#E8E8E8;'> internet.Certificate <a href=' /internet/_sslverify.py#L543'>digest</a>(method)</tt>	Return a digest hash of this certificate using the specified hash algorithm.
<tt style='background-color:#E8E8E8;'> internet.Certificate <a href=' /internet/_sslverify.py#L566'>inspect</a>()</tt>	Return a multi-line human-readable representation of this certificate including information about the subject issuer and.
<tt style='background-color:#E8E8E8;'> internet.Certificate <a href=' /internet/_sslverify.py#L575'>getIssuer</a>()</tt>	Retrieve the issuer of this certificate.
<tt style='background-color:#E8E8E8;'> internet.PrivateCertificate <a href=' /internet/_sslverify.py#L628'>newCertificate</a>(newCertData,format)</tt>	Create a new l{privatecertificate} from the given certificate data and this instance's private key.
<tt style='background-color:#E8E8E8;'> internet.PrivateCertificate <a href=' /internet/_sslverify.py#L646'>dumpPEM</a>()</tt>	Dump both public and private parts of a private certificate to pem-format data.
<tt style='background-color:#E8E8E8;'> internet.PrivateCertificate <a href=' /internet/_sslverify.py#L654'>loadPEM</a>(Class,data)</tt>	Load both private and public parts of a private certificate from a chunk of pem-format data.
<tt style='background-color:#E8E8E8;'> internet.PrivateCertificate <a href=' /internet/_sslverify.py#L670'>options</a>()</tt>	Create a context factory using this l{privatecertificate}'s certificate and private key.
<tt style='background-color:#E8E8E8;'> internet.PublicKey <a href=' /internet/_sslverify.py#L738'>__init__</a>(osslpkey)</tt>	@param osslpkey the underlying pyopenssl key object.
<tt style='background-color:#E8E8E8;'> internet.PublicKey <a href=' /internet/_sslverify.py#L746'>matches</a>(otherKey)</tt>	Does this l{publickey} contain the same value as another l{publickey}? @param otherkey the key to compare c{self} to.
<tt style='background-color:#E8E8E8;'> internet.PublicKey <a href=' /internet/_sslverify.py#L763'>keyHash</a>()</tt>	Compute a hash of the underlying pkey object.
<tt style='background-color:#E8E8E8;'> internet.KeyPair <a href=' /internet/_sslverify.py#L840'>certificateRequest</a>(distinguishedName,format,digestAlgorithm)</tt>	Create a certificate request signed with this key.
<tt style='background-color:#E8E8E8;'> internet.KeyPair <a href=' /internet/_sslverify.py#L851'>signCertificateRequest</a>(issuerDistinguishedName,requestData,verifyDNCallback,serialNumber)</tt>	Given a blob of certificate request data and a certificate authority's distinguishedname return a blob of signed certificate data.
<tt style='background-color:#E8E8E8;'> internet.KeyPair <a href=' /internet/_sslverify.py#L884'>signRequestObject</a>(issuerDistinguishedName,requestObject,serialNumber,secondsToExpiry)</tt>	Sign a certificaterequest instance returning a certificate instance.
<tt style='background-color:#E8E8E8;'> internet.IOpenSSLTrustRoot <a href=' /internet/_sslverify.py#L926'>_addCACertsToContext</a>(context)</tt>	Add certificate-authority certificates to an ssl context whose connections should trust those authorities.
<tt style='background-color:#E8E8E8;'> internet.OpenSSLCertificateAuthorities <a href=' /internet/_sslverify.py#L947'>__init__</a>(caCerts)</tt>	@param cacerts the certificate authorities to trust when using this object as a c{trustroot} for l{opensslcertificateoptions}.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_sslverify.py#L963'>trustRootFromCertificates</a>(certificates)</tt>	Builds an object that trusts multiple root l{certificate}s.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_sslverify.py#L1009'>platformTrust</a>()</tt>	Attempt to discover a set of trusted certificate authority certificates or in other words trust roots or root certificates whose trust is.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_sslverify.py#L1080'>_tolerateErrors</a>(wrapped)</tt>	Wrap up an c{info_callback} for pyopenssl so that if something goes wrong the error is immediately logged and the connection is dropped if possible.
<tt style='background-color:#E8E8E8;'> internet.ClientTLSOptions <a href=' /internet/_sslverify.py#L1159'>clientConnectionForTLS</a>(tlsProtocol)</tt>	Create a tls connection for a client.
<tt style='background-color:#E8E8E8;'> internet.ClientTLSOptions <a href=' /internet/_sslverify.py#L1181'>_identityVerifyingInfoCallback</a>(connection,where,ret)</tt>	U{info_callback <http //pythonhosted.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_sslverify.py#L1209'>optionsForClientTLS</a>(hostname,trustRoot,clientCertificate,acceptableProtocols)</tt>	Create a l{client connection creator <iopensslclientconnectioncreator>} for use with apis such as l{ssl4clientendpoint.
<tt style='background-color:#E8E8E8;'> internet.OpenSSLCertificateOptions <a href=' /internet/_sslverify.py#L1323'>__init__</a>(privateKey,certificate,method,verify)</tt>	Create an openssl context ssl connection context factory.
<tt style='background-color:#E8E8E8;'> internet.OpenSSLCertificateOptions <a href=' /internet/_sslverify.py#L1644'>getContext</a>()</tt>	Return an l{openssl ssl context} object.
<tt style='background-color:#E8E8E8;'> internet._OpenSSLECCurve <a href=' /internet/_sslverify.py#L1723'>__init__</a>(snName)</tt>	@param snname the name of the curve as used by c{obj_sn2nid}.
<tt style='background-color:#E8E8E8;'> internet._OpenSSLECCurve <a href=' /internet/_sslverify.py#L1751'>_getBinding</a>()</tt>	Attempt to get cryptography's binding instance.
<tt style='background-color:#E8E8E8;'> internet._OpenSSLECCurve <a href=' /internet/_sslverify.py#L1770'>addECKeyToContext</a>(context)</tt>	Add a temporary ec key to c{context}.
<tt style='background-color:#E8E8E8;'> internet.OpenSSLCipher <a href=' /internet/_sslverify.py#L1793'>__init__</a>(fullName)</tt>	@param fullname the full name of the cipher for example.
<tt style='background-color:#E8E8E8;'> internet.OpenSSLCipher <a href=' /internet/_sslverify.py#L1802'>__repr__</a>()</tt>	A runnable representation of the cipher.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_sslverify.py#L1810'>_expandCipherString</a>(cipherString,method,options)</tt>	Expand c{cipherstring} according to c{method} and c{options} to a list of explicit ciphers that are supported by the current platform.
<tt style='background-color:#E8E8E8;'> internet.OpenSSLAcceptableCiphers <a href=' /internet/_sslverify.py#L1861'>fromOpenSSLCipherString</a>(cls,cipherString)</tt>	Create a new instance using an openssl cipher string.
<tt style='background-color:#E8E8E8;'> internet.OpenSSLDiffieHellmanParameters <a href=' /internet/_sslverify.py#L1917'>fromFile</a>(cls,filePath)</tt>	Load parameters from a file.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_sslverify.py#L1942'>_setAcceptableProtocols</a>(context,acceptableProtocols)</tt>	Called to set up the l{openssl ssl context} for doing npn and/or alpn.
<tt style='background-color:#E8E8E8;'> internet.ProcessEventsTimer <a href=' /internet/wxreactor.py#L54'>Notify</a>()</tt>	Called repeatedly by wx event loop.
<tt style='background-color:#E8E8E8;'> internet.WxReactor <a href=' /internet/wxreactor.py#L71'>registerWxApp</a>(wxapp)</tt>	Register wxapp instance with the reactor.
<tt style='background-color:#E8E8E8;'> internet.WxReactor <a href=' /internet/wxreactor.py#L78'>_installSignalHandlersAgain</a>()</tt>	Wx sometimes removes our own signal handlers so re-add them.
<tt style='background-color:#E8E8E8;'> internet.WxReactor <a href=' /internet/wxreactor.py#L91'>stop</a>()</tt>	Stop the reactor.
<tt style='background-color:#E8E8E8;'> internet.WxReactor <a href=' /internet/wxreactor.py#L101'>_runInMainThread</a>(f)</tt>	Schedule function to run in main wx/twisted thread.
<tt style='background-color:#E8E8E8;'> internet.WxReactor <a href=' /internet/wxreactor.py#L114'>_stopWx</a>()</tt>	Stop the wx event loop if it hasn't already been stopped.
<tt style='background-color:#E8E8E8;'> internet.WxReactor <a href=' /internet/wxreactor.py#L124'>run</a>(installSignalHandlers)</tt>	Start the reactor.
<tt style='background-color:#E8E8E8;'> internet.StandardIO <a href=' /internet/_posixstdio.py#L34'>__init__</a>(proto,reactor)</tt>	Start talking to standard io with the given protocol.
<tt style='background-color:#E8E8E8;'> internet.DelayedCall <a href=' /internet/base.py#L52'>__init__</a>(time,func,args,kw)</tt>	@param time seconds from the epoch at which to call c{func}.
<tt style='background-color:#E8E8E8;'> internet.DelayedCall <a href=' /internet/base.py#L79'>getTime</a>()</tt>	Return the time at which this call will fire @rtype c{float}.
<tt style='background-color:#E8E8E8;'> internet.DelayedCall <a href=' /internet/base.py#L88'>cancel</a>()</tt>	Unschedule this call @raise alreadycancelled raised if this call has already been.
<tt style='background-color:#E8E8E8;'> internet.DelayedCall <a href=' /internet/base.py#L107'>reset</a>(secondsFromNow)</tt>	Reschedule this call for a different time @type secondsfromnow c{float}.
<tt style='background-color:#E8E8E8;'> internet.DelayedCall <a href=' /internet/base.py#L130'>delay</a>(secondsLater)</tt>	Reschedule this call for a later time @type secondslater c{float}.
<tt style='background-color:#E8E8E8;'> internet.DelayedCall <a href=' /internet/base.py#L154'>active</a>()</tt>	Determine whether this call is still pending @rtype c{bool}.
<tt style='background-color:#E8E8E8;'> internet.DelayedCall <a href=' /internet/base.py#L164'>__le__</a>(other)</tt>	Implement c{<=} operator between two l{delayedcall} instances.
<tt style='background-color:#E8E8E8;'> internet.DelayedCall <a href=' /internet/base.py#L174'>__lt__</a>(other)</tt>	Implement c{<} operator between two l{delayedcall} instances.
<tt style='background-color:#E8E8E8;'> internet.ThreadedResolver <a href=' /internet/base.py#L267'>getHostByName</a>(name,timeout)</tt>	See l{twisted internet interfaces iresolversimple gethostbyname}.
<tt style='background-color:#E8E8E8;'> internet._ThreePhaseEvent <a href=' /internet/base.py#L342'>addTrigger</a>(phase,callable)</tt>	Add a trigger to the indicate phase.
<tt style='background-color:#E8E8E8;'> internet._ThreePhaseEvent <a href=' /internet/base.py#L361'>removeTrigger</a>(handle)</tt>	Remove a previously added trigger callable.
<tt style='background-color:#E8E8E8;'> internet._ThreePhaseEvent <a href=' /internet/base.py#L374'>removeTrigger_BASE</a>(handle)</tt>	Just try to remove the trigger.
<tt style='background-color:#E8E8E8;'> internet._ThreePhaseEvent <a href=' /internet/base.py#L390'>removeTrigger_BEFORE</a>(handle)</tt>	Remove the trigger if it has yet to be executed otherwise emit a warning that in the future an exception will be raised when removing an.
<tt style='background-color:#E8E8E8;'> internet._ThreePhaseEvent <a href=' /internet/base.py#L411'>fireEvent</a>()</tt>	Call the triggers added to this event.
<tt style='background-color:#E8E8E8;'> internet._ThreePhaseEvent <a href=' /internet/base.py#L431'>_continueFiring</a>(ignored)</tt>	Call the during and after phase triggers for this event.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L552'>nameResolver</a>()</tt>	Implementation of read-only l{ireactorpluggablenameresolver.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L561'>wakeUp</a>()</tt>	Wake up the event loop.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L570'>doIteration</a>(delay)</tt>	Do one iteration over the readers and writers which have been added.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L608'>resolve</a>(name,timeout)</tt>	Return a deferred that will resolve a hostname.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L621'>stop</a>()</tt>	See twisted internet interfaces ireactorcore stop.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L633'>crash</a>()</tt>	See twisted internet interfaces ireactorcore crash.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L646'>sigInt</a>()</tt>	Handle a sigint interrupt.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L652'>sigBreak</a>()</tt>	Handle a sigbreak interrupt.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L658'>sigTerm</a>()</tt>	Handle a sigterm interrupt.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L664'>disconnectAll</a>()</tt>	Disconnect every reader and writer in the system.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L674'>iterate</a>(delay)</tt>	See twisted internet interfaces ireactorcore iterate.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L681'>fireSystemEvent</a>(eventType)</tt>	See twisted internet interfaces ireactorcore firesystemevent.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L689'>addSystemEventTrigger</a>(_phase,_eventType,_f)</tt>	See twisted internet interfaces ireactorcore addsystemeventtrigger.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L699'>removeSystemEventTrigger</a>(triggerID)</tt>	See twisted internet interfaces ireactorcore removesystemeventtrigger.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L706'>callWhenRunning</a>(_callable)</tt>	See twisted internet interfaces ireactorcore callwhenrunning.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L715'>startRunning</a>()</tt>	Method called when reactor starts do some initialization and fire startup events.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L738'>_reallyStartRunning</a>()</tt>	Method called to transition to the running state this should happen.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L749'>callLater</a>(_seconds,_f)</tt>	See twisted internet interfaces ireactortime calllater.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L786'>getDelayedCalls</a>()</tt>	Return all the outstanding delayed calls in the system.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L809'>timeout</a>()</tt>	Determine the longest time the reactor may sleep (waiting on i/o notification perhaps) before it must wake up to service a time-related.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L839'>runUntilCurrent</a>()</tt>	Run all pending timed calls.
<tt style='background-color:#E8E8E8;'> internet.ReactorBase <a href=' /internet/base.py#L904'>_checkProcessArgs</a>(args,env)</tt>	Check for valid arguments and environment to spawnprocess.
<tt style='background-color:#E8E8E8;'> internet.BaseConnector <a href=' /internet/base.py#L1081'>disconnect</a>()</tt>	Disconnect whatever our state is.
<tt style='background-color:#E8E8E8;'> internet.BaseConnector <a href=' /internet/base.py#L1088'>connect</a>()</tt>	Start connection to remote server.
<tt style='background-color:#E8E8E8;'> internet.BaseConnector <a href=' /internet/base.py#L1102'>stopConnecting</a>()</tt>	Stop attempting to connect.
<tt style='background-color:#E8E8E8;'> internet.BasePort <a href=' /internet/base.py#L1165'>doWrite</a>()</tt>	Raises a runtimeerror.
<tt style='background-color:#E8E8E8;'> internet._SignalReactorMixin <a href=' /internet/base.py#L1190'>_handleSignals</a>()</tt>	Install the signal handlers for the twisted event loop.
<tt style='background-color:#E8E8E8;'> internet._SignalReactorMixin <a href=' /internet/base.py#L1211'>startRunning</a>(installSignalHandlers)</tt>	Extend the base implementation in order to remember whether signal handlers should be installed later.
<tt style='background-color:#E8E8E8;'> internet._SignalReactorMixin <a href=' /internet/base.py#L1225'>_reallyStartRunning</a>()</tt>	Extend the base implementation by also installing signal handlers if c{self.
<tt style='background-color:#E8E8E8;'> internet.PollReactor <a href=' /internet/pollreactor.py#L61'>__init__</a>()</tt>	Initialize polling object file descriptor tracking dictionaries and the base class.
<tt style='background-color:#E8E8E8;'> internet.PollReactor <a href=' /internet/pollreactor.py#L73'>_updateRegistration</a>(fd)</tt>	Register/unregister an fd with the poller.
<tt style='background-color:#E8E8E8;'> internet.PollReactor <a href=' /internet/pollreactor.py#L112'>addReader</a>(reader)</tt>	Add a filedescriptor for notification of data available to read.
<tt style='background-color:#E8E8E8;'> internet.PollReactor <a href=' /internet/pollreactor.py#L121'>addWriter</a>(writer)</tt>	Add a filedescriptor for notification of data available to write.
<tt style='background-color:#E8E8E8;'> internet.PollReactor <a href=' /internet/pollreactor.py#L130'>removeReader</a>(reader)</tt>	Remove a selectable for notification of data available to read.
<tt style='background-color:#E8E8E8;'> internet.PollReactor <a href=' /internet/pollreactor.py#L135'>removeWriter</a>(writer)</tt>	Remove a selectable for notification of data available to write.
<tt style='background-color:#E8E8E8;'> internet.PollReactor <a href=' /internet/pollreactor.py#L140'>removeAll</a>()</tt>	Remove all selectables and return a list of them.
<tt style='background-color:#E8E8E8;'> internet.PollReactor <a href=' /internet/pollreactor.py#L149'>doPoll</a>(timeout)</tt>	Poll the poller for new events.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/error.py#L191'>getConnectError</a>(e)</tt>	Given a socket exception return connection error.
<tt style='background-color:#E8E8E8;'> internet.ProcessTerminated <a href=' /internet/error.py#L337'>__init__</a>(exitCode,signal,status)</tt>	@param exitcode the exit status of the process this is roughly like.
<tt style='background-color:#E8E8E8;'> internet.ConnectingCancelledError <a href=' /internet/error.py#L430'>__init__</a>(address)</tt>	@param address the l{iaddress} that is the destination of the l{istreamclientendpoint} that was cancelled.
<tt style='background-color:#E8E8E8;'> internet.InvalidAddressError <a href=' /internet/error.py#L480'>__init__</a>(address,message)</tt>	@param address the address that was provided.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_idna.py#L10'>_idnaBytes</a>(text)</tt>	Convert some text typed by a human into some ascii bytes.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_idna.py#L34'>_idnaText</a>(octets)</tt>	Convert some idna-encoded octets into some human-readable text.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/gireactor.py#L171'>install</a>(ms,reactor,args,kw)</tt>	Schedule pyui's display to be updated approximately every c{ms} milliseconds and initialize pyui with the specified arguments.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/process.py#L57'>reapAllProcesses</a>()</tt>	Reap all registered processes.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/process.py#L68'>registerReapProcessHandler</a>(pid,process)</tt>	Register a process handler for the given pid in case l{reapallprocesses} is called.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/process.py#L92'>unregisterReapProcessHandler</a>(pid,process)</tt>	Unregister a process handler previously registered with l{registerreapprocesshandler}.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/process.py#L104'>detectLinuxBrokenPipeBehavior</a>()</tt>	On some linux version write-only pipe are detected as readable this.
<tt style='background-color:#E8E8E8;'> internet.ProcessWriter <a href=' /internet/process.py#L149'>__init__</a>(reactor,proc,name,fileno)</tt>	Initialize specifying a process instance to connect to.
<tt style='background-color:#E8E8E8;'> internet.ProcessWriter <a href=' /internet/process.py#L181'>fileno</a>()</tt>	Return the fileno() of my process's stdin.
<tt style='background-color:#E8E8E8;'> internet.ProcessWriter <a href=' /internet/process.py#L188'>writeSomeData</a>(data)</tt>	Write some data to the open process.
<tt style='background-color:#E8E8E8;'> internet.ProcessWriter <a href=' /internet/process.py#L206'>doRead</a>()</tt>	The only way a write pipe can become "readable" is at eof because the child has closed it and we're using a reactor which doesn't.
<tt style='background-color:#E8E8E8;'> internet.ProcessWriter <a href=' /internet/process.py#L237'>connectionLost</a>(reason)</tt>	See abstract filedescriptor connectionlost.
<tt style='background-color:#E8E8E8;'> internet.ProcessReader <a href=' /internet/process.py#L260'>__init__</a>(reactor,proc,name,fileno)</tt>	Initialize specifying a process to connect to.
<tt style='background-color:#E8E8E8;'> internet.ProcessReader <a href=' /internet/process.py#L272'>fileno</a>()</tt>	Return the fileno() of my process's stderr.
<tt style='background-color:#E8E8E8;'> internet.ProcessReader <a href=' /internet/process.py#L287'>doRead</a>()</tt>	This is called when the pipe becomes readable.
<tt style='background-color:#E8E8E8;'> internet.ProcessReader <a href=' /internet/process.py#L306'>connectionLost</a>(reason)</tt>	Close my end of the pipe signal the process which signals the processprotocol.
<tt style='background-color:#E8E8E8;'> internet._BaseProcess <a href=' /internet/process.py#L323'>reapProcess</a>()</tt>	Try to reap a process without blocking via waitpid.
<tt style='background-color:#E8E8E8;'> internet._BaseProcess <a href=' /internet/process.py#L365'>signalProcess</a>(signalID)</tt>	Send the given signal c{signalid} to the process it'll translate a.
<tt style='background-color:#E8E8E8;'> internet._BaseProcess <a href=' /internet/process.py#L399'>_fork</a>(path,uid,gid,executable)</tt>	Fork and then exec sub-process.
<tt style='background-color:#E8E8E8;'> internet._BaseProcess <a href=' /internet/process.py#L501'>_setupChild</a>()</tt>	Setup the child process override in subclasses.
<tt style='background-color:#E8E8E8;'> internet._BaseProcess <a href=' /internet/process.py#L508'>_execChild</a>(path,uid,gid,executable)</tt>	The exec() which is done in the forked child.
<tt style='background-color:#E8E8E8;'> internet._BaseProcess <a href=' /internet/process.py#L526'>__repr__</a>()</tt>	String representation of a process.
<tt style='background-color:#E8E8E8;'> internet._FDDetector <a href=' /internet/process.py#L561'>_listOpenFDs</a>()</tt>	Return an iterable of file descriptors which i{may} be open in this process.
<tt style='background-color:#E8E8E8;'> internet._FDDetector <a href=' /internet/process.py#L573'>_getImplementation</a>()</tt>	Pick a method which gives correct results for c{_listopenfds} in this runtime environment.
<tt style='background-color:#E8E8E8;'> internet._FDDetector <a href=' /internet/process.py#L603'>_devFDImplementation</a>()</tt>	Simple implementation for systems where /dev/fd actually works.
<tt style='background-color:#E8E8E8;'> internet._FDDetector <a href=' /internet/process.py#L613'>_procFDImplementation</a>()</tt>	Simple implementation for systems where /proc/pid/fd exists we assume it works.
<tt style='background-color:#E8E8E8;'> internet._FDDetector <a href=' /internet/process.py#L622'>_fallbackFDImplementation</a>()</tt>	Fallback implementation where either the resource module can inform us about the upper bound of how many fds to expect or where we just guess.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/process.py#L646'>_listOpenFDs</a>()</tt>	Use the global detector object to figure out which fd implementation to use.
<tt style='background-color:#E8E8E8;'> internet.Process <a href=' /internet/_dumbwin32proc.py#L147'>__init__</a>(reactor,executable,args,environment)</tt>	Spawn an operating-system process.
<tt style='background-color:#E8E8E8;'> internet.Process <a href=' /internet/process.py#L781'>_setupChild</a>(fdmap)</tt>	Fdmap[childfd] = parentfd the child wants to end up with 'childfd' attached to what used to be.
<tt style='background-color:#E8E8E8;'> internet.Process <a href=' /internet/_dumbwin32proc.py#L360'>closeStdin</a>()</tt>	Close the process' stdin.
<tt style='background-color:#E8E8E8;'> internet.Process <a href=' /internet/_dumbwin32proc.py#L307'>write</a>(data)</tt>	Write data to the process' stdin.
<tt style='background-color:#E8E8E8;'> internet.Process <a href=' /internet/_dumbwin32proc.py#L411'>registerProducer</a>(producer,streaming)</tt>	Call this to register producer for standard input.
<tt style='background-color:#E8E8E8;'> internet.Process <a href=' /internet/_dumbwin32proc.py#L414'>unregisterProducer</a>()</tt>	Call this to unregister producer for standard input.
<tt style='background-color:#E8E8E8;'> internet.Process <a href=' /internet/_dumbwin32proc.py#L316'>writeSequence</a>(seq)</tt>	Write data to the process' stdin.
<tt style='background-color:#E8E8E8;'> internet.PTYProcess <a href=' /internet/process.py#L1000'>__init__</a>(reactor,executable,args,environment)</tt>	Spawn an operating-system process.
<tt style='background-color:#E8E8E8;'> internet.PTYProcess <a href=' /internet/process.py#L1049'>_setupChild</a>(masterfd,slavefd)</tt>	Set up child process after c{fork()} but before c{exec()}.
<tt style='background-color:#E8E8E8;'> internet.PTYProcess <a href=' /internet/process.py#L1112'>doRead</a>()</tt>	Called when my standard output stream is ready for reading.
<tt style='background-color:#E8E8E8;'> internet.PTYProcess <a href=' /internet/process.py#L1121'>fileno</a>()</tt>	This returns the file number of standard output on this process.
<tt style='background-color:#E8E8E8;'> internet.PTYProcess <a href=' /internet/process.py#L1139'>connectionLost</a>(reason)</tt>	I call this to clean up when one or all of my connections has died.
<tt style='background-color:#E8E8E8;'> internet.PTYProcess <a href=' /internet/process.py#L1149'>writeSomeData</a>(data)</tt>	Write some data to the open process.
<tt style='background-color:#E8E8E8;'> internet.IConnector <a href=' /internet/interfaces.py#L31'>stopConnecting</a>()</tt>	Stop attempting to connect.
<tt style='background-color:#E8E8E8;'> internet.IConnector <a href=' /internet/interfaces.py#L36'>disconnect</a>()</tt>	Disconnect regardless of the connection state.
<tt style='background-color:#E8E8E8;'> internet.IConnector <a href=' /internet/interfaces.py#L44'>connect</a>()</tt>	Try to connect to remote address.
<tt style='background-color:#E8E8E8;'> internet.IConnector <a href=' /internet/interfaces.py#L49'>getDestination</a>()</tt>	Return destination this will try to connect to.
<tt style='background-color:#E8E8E8;'> internet.IResolverSimple <a href=' /internet/interfaces.py#L59'>getHostByName</a>(name,timeout)</tt>	Resolve the domain name c{name} into an ip address.
<tt style='background-color:#E8E8E8;'> internet.IHostResolution <a href=' /internet/interfaces.py#L101'>cancel</a>()</tt>	Stop the hostname resolution in progress.
<tt style='background-color:#E8E8E8;'> internet.IResolutionReceiver <a href=' /internet/interfaces.py#L116'>resolutionBegan</a>(resolutionInProgress)</tt>	A hostname resolution began.
<tt style='background-color:#E8E8E8;'> internet.IResolutionReceiver <a href=' /internet/interfaces.py#L124'>addressResolved</a>(address)</tt>	An internet address this is called when an address for the given name.
<tt style='background-color:#E8E8E8;'> internet.IResolutionReceiver <a href=' /internet/interfaces.py#L137'>resolutionComplete</a>()</tt>	Resolution has completed no further addresses will be relayed to l{iresolutionreceiver.
<tt style='background-color:#E8E8E8;'> internet.IHostnameResolver <a href=' /internet/interfaces.py#L153'>resolveHostName</a>(resolutionReceiver,hostName,portNumber,addressTypes)</tt>	Initiate a hostname resolution.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L192'>query</a>(query,timeout)</tt>	Dispatch c{query} to the method which can handle its type.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L215'>lookupAddress</a>(name,timeout)</tt>	Perform an a record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L237'>lookupAddress6</a>(name,timeout)</tt>	Perform an a6 record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L259'>lookupIPV6Address</a>(name,timeout)</tt>	Perform an aaaa record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L281'>lookupMailExchange</a>(name,timeout)</tt>	Perform an mx record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L303'>lookupNameservers</a>(name,timeout)</tt>	Perform an ns record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L325'>lookupCanonicalName</a>(name,timeout)</tt>	Perform a cname record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L347'>lookupMailBox</a>(name,timeout)</tt>	Perform an mb record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L369'>lookupMailGroup</a>(name,timeout)</tt>	Perform an mg record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L391'>lookupMailRename</a>(name,timeout)</tt>	Perform an mr record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L413'>lookupPointer</a>(name,timeout)</tt>	Perform a ptr record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L435'>lookupAuthority</a>(name,timeout)</tt>	Perform an soa record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L457'>lookupNull</a>(name,timeout)</tt>	Perform a null record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L479'>lookupWellKnownServices</a>(name,timeout)</tt>	Perform a wks record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L501'>lookupHostInfo</a>(name,timeout)</tt>	Perform a hinfo record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L523'>lookupMailboxInfo</a>(name,timeout)</tt>	Perform an minfo record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L545'>lookupText</a>(name,timeout)</tt>	Perform a txt record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L567'>lookupResponsibility</a>(name,timeout)</tt>	Perform an rp record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L589'>lookupAFSDatabase</a>(name,timeout)</tt>	Perform an afsdb record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L611'>lookupService</a>(name,timeout)</tt>	Perform an srv record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L633'>lookupAllRecords</a>(name,timeout)</tt>	Perform an all_record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L655'>lookupSenderPolicy</a>(name,timeout)</tt>	Perform a spf record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L677'>lookupNamingAuthorityPointer</a>(name,timeout)</tt>	Perform a naptr record lookup.
<tt style='background-color:#E8E8E8;'> internet.IResolver <a href=' /internet/interfaces.py#L699'>lookupZone</a>(name,timeout)</tt>	Perform an axfr record lookup.
<tt style='background-color:#E8E8E8;'> internet.IReactorTCP <a href=' /internet/interfaces.py#L731'>listenTCP</a>(port,factory,backlog,interface)</tt>	Connects a given protocol factory to the given numeric tcp/ip port.
<tt style='background-color:#E8E8E8;'> internet.IReactorTCP <a href=' /internet/interfaces.py#L753'>connectTCP</a>(host,port,factory,timeout)</tt>	Connect a tcp client.
<tt style='background-color:#E8E8E8;'> internet.IReactorSSL <a href=' /internet/interfaces.py#L780'>connectSSL</a>(host,port,factory,contextFactory)</tt>	Connect a client protocol to a remote ssl socket.
<tt style='background-color:#E8E8E8;'> internet.IReactorSSL <a href=' /internet/interfaces.py#L801'>listenSSL</a>(port,factory,contextFactory,backlog)</tt>	Connects a given protocol factory to the given numeric tcp/ip port.
<tt style='background-color:#E8E8E8;'> internet.IReactorUNIX <a href=' /internet/interfaces.py#L825'>connectUNIX</a>(address,factory,timeout,checkPID)</tt>	Connect a client protocol to a unix socket.
<tt style='background-color:#E8E8E8;'> internet.IReactorUNIX <a href=' /internet/interfaces.py#L844'>listenUNIX</a>(address,factory,backlog,mode)</tt>	Listen on a unix socket.
<tt style='background-color:#E8E8E8;'> internet.IReactorUNIXDatagram <a href=' /internet/interfaces.py#L872'>connectUNIXDatagram</a>(address,protocol,maxPacketSize,mode)</tt>	Connect a client protocol to a datagram unix socket.
<tt style='background-color:#E8E8E8;'> internet.IReactorUNIXDatagram <a href=' /internet/interfaces.py#L893'>listenUNIXDatagram</a>(address,protocol,maxPacketSize,mode)</tt>	Listen on a datagram unix socket.
<tt style='background-color:#E8E8E8;'> internet.IReactorWin32Events <a href=' /internet/interfaces.py#L920'>addEvent</a>(event,fd,action)</tt>	Add a new win32 event to the event loop.
<tt style='background-color:#E8E8E8;'> internet.IReactorWin32Events <a href=' /internet/interfaces.py#L935'>removeEvent</a>(event)</tt>	Remove an event.
<tt style='background-color:#E8E8E8;'> internet.IReactorUDP <a href=' /internet/interfaces.py#L951'>listenUDP</a>(port,protocol,interface,maxPacketSize)</tt>	Connects a given l{datagramprotocol} to the given numeric udp port.
<tt style='background-color:#E8E8E8;'> internet.IReactorMulticast <a href=' /internet/interfaces.py#L982'>listenMulticast</a>(port,protocol,interface,maxPacketSize)</tt>	Connects a given l{datagramprotocol<twisted.
<tt style='background-color:#E8E8E8;'> internet.IReactorSocket <a href=' /internet/interfaces.py#L1037'>adoptStreamPort</a>(fileDescriptor,addressFamily,factory)</tt>	Add an existing listening i{sock_stream} socket to the reactor to monitor for new connections to accept and handle.
<tt style='background-color:#E8E8E8;'> internet.IReactorSocket <a href=' /internet/interfaces.py#L1068'>adoptStreamConnection</a>(fileDescriptor,addressFamily,factory)</tt>	Add an existing connected i{sock_stream} socket to the reactor to monitor for data.
<tt style='background-color:#E8E8E8;'> internet.IReactorSocket <a href=' /internet/interfaces.py#L1100'>adoptDatagramPort</a>(fileDescriptor,addressFamily,protocol,maxPacketSize)</tt>	Add an existing listening i{sock_dgram} socket to the reactor to monitor for read and write readiness.
<tt style='background-color:#E8E8E8;'> internet.IReactorProcess <a href=' /internet/interfaces.py#L1139'>spawnProcess</a>(processProtocol,executable,args,env)</tt>	Spawn a process with a process protocol.
<tt style='background-color:#E8E8E8;'> internet.IReactorTime <a href=' /internet/interfaces.py#L1239'>seconds</a>()</tt>	Get the current time in seconds.
<tt style='background-color:#E8E8E8;'> internet.IReactorTime <a href=' /internet/interfaces.py#L1247'>callLater</a>(delay,callable)</tt>	Call a function later.
<tt style='background-color:#E8E8E8;'> internet.IReactorTime <a href=' /internet/interfaces.py#L1267'>getDelayedCalls</a>()</tt>	Retrieve all currently scheduled delayed calls.
<tt style='background-color:#E8E8E8;'> internet.IDelayedCall <a href=' /internet/interfaces.py#L1285'>getTime</a>()</tt>	Get time when delayed call will happen.
<tt style='background-color:#E8E8E8;'> internet.IDelayedCall <a href=' /internet/interfaces.py#L1292'>cancel</a>()</tt>	Cancel the scheduled call.
<tt style='background-color:#E8E8E8;'> internet.IDelayedCall <a href=' /internet/interfaces.py#L1302'>delay</a>(secondsLater)</tt>	Delay the scheduled call.
<tt style='background-color:#E8E8E8;'> internet.IDelayedCall <a href=' /internet/interfaces.py#L1314'>reset</a>(secondsFromNow)</tt>	Reset the scheduled call's timer.
<tt style='background-color:#E8E8E8;'> internet.IDelayedCall <a href=' /internet/interfaces.py#L1328'>active</a>()</tt>	@return true if this call is still active false if it has been called or cancelled.
<tt style='background-color:#E8E8E8;'> internet.IReactorFromThreads <a href=' /internet/interfaces.py#L1344'>callFromThread</a>(callable)</tt>	Cause a function to be executed by the reactor thread.
<tt style='background-color:#E8E8E8;'> internet.IReactorInThreads <a href=' /internet/interfaces.py#L1368'>callInThread</a>(callable)</tt>	Run the given callable object in a separate thread with the given arguments and keyword arguments.
<tt style='background-color:#E8E8E8;'> internet.IReactorThreads <a href=' /internet/interfaces.py#L1383'>getThreadPool</a>()</tt>	Return the threadpool used by l{ireactorinthreads callinthread}.
<tt style='background-color:#E8E8E8;'> internet.IReactorThreads <a href=' /internet/interfaces.py#L1392'>suggestThreadPoolSize</a>(size)</tt>	Suggest the size of the internal threadpool used to dispatch functions passed to l{ireactorinthreads.
<tt style='background-color:#E8E8E8;'> internet.IReactorCore <a href=' /internet/interfaces.py#L1410'>resolve</a>(name,timeout)</tt>	Return a l{twisted internet defer deferred} that will resolve a hostname.
<tt style='background-color:#E8E8E8;'> internet.IReactorCore <a href=' /internet/interfaces.py#L1415'>run</a>()</tt>	Fire 'startup' system events move the reactor to the 'running' state then run the main loop until it is stopped with c{stop()} or.
<tt style='background-color:#E8E8E8;'> internet.IReactorCore <a href=' /internet/interfaces.py#L1422'>stop</a>()</tt>	Fire 'shutdown' system events which will move the reactor to the 'stopped' state and cause c{reactor.
<tt style='background-color:#E8E8E8;'> internet.IReactorCore <a href=' /internet/interfaces.py#L1428'>crash</a>()</tt>	Stop the main loop *immediately*, without firing any system events.
<tt style='background-color:#E8E8E8;'> internet.IReactorCore <a href=' /internet/interfaces.py#L1438'>iterate</a>(delay)</tt>	Run the main loop's i/o polling function for a period of time.
<tt style='background-color:#E8E8E8;'> internet.IReactorCore <a href=' /internet/interfaces.py#L1453'>fireSystemEvent</a>(eventType)</tt>	Fire a system-wide event.
<tt style='background-color:#E8E8E8;'> internet.IReactorCore <a href=' /internet/interfaces.py#L1461'>addSystemEventTrigger</a>(phase,eventType,callable)</tt>	Add a function to be called when a system event occurs.
<tt style='background-color:#E8E8E8;'> internet.IReactorCore <a href=' /internet/interfaces.py#L1496'>removeSystemEventTrigger</a>(triggerID)</tt>	Removes a trigger added with addsystemeventtrigger.
<tt style='background-color:#E8E8E8;'> internet.IReactorCore <a href=' /internet/interfaces.py#L1512'>callWhenRunning</a>(callable)</tt>	Call a function when the reactor is running.
<tt style='background-color:#E8E8E8;'> internet.IReactorPluggableResolver <a href=' /internet/interfaces.py#L1541'>installResolver</a>(resolver)</tt>	Set the internal resolver to use to for name lookups.
<tt style='background-color:#E8E8E8;'> internet.IReactorPluggableNameResolver <a href=' /internet/interfaces.py#L1567'>installNameResolver</a>(resolver)</tt>	Set the internal resolver to use for name lookups.
<tt style='background-color:#E8E8E8;'> internet.IReactorDaemonize <a href=' /internet/interfaces.py#L1592'>beforeDaemonize</a>()</tt>	Hook to be called immediately before daemonization no reactor methods.
<tt style='background-color:#E8E8E8;'> internet.IReactorDaemonize <a href=' /internet/interfaces.py#L1601'>afterDaemonize</a>()</tt>	Hook to be called immediately after daemonization this may only be.
<tt style='background-color:#E8E8E8;'> internet.IReactorFDSet <a href=' /internet/interfaces.py#L1619'>addReader</a>(reader)</tt>	I add reader to the set of file descriptors to get read events for.
<tt style='background-color:#E8E8E8;'> internet.IReactorFDSet <a href=' /internet/interfaces.py#L1630'>addWriter</a>(writer)</tt>	I add writer to the set of file descriptors to get write events for.
<tt style='background-color:#E8E8E8;'> internet.IReactorFDSet <a href=' /internet/interfaces.py#L1641'>removeReader</a>(reader)</tt>	Removes an object previously added with l{addreader}.
<tt style='background-color:#E8E8E8;'> internet.IReactorFDSet <a href=' /internet/interfaces.py#L1648'>removeWriter</a>(writer)</tt>	Removes an object previously added with l{addwriter}.
<tt style='background-color:#E8E8E8;'> internet.IReactorFDSet <a href=' /internet/interfaces.py#L1655'>removeAll</a>()</tt>	Remove all readers and writers.
<tt style='background-color:#E8E8E8;'> internet.IReactorFDSet <a href=' /internet/interfaces.py#L1665'>getReaders</a>()</tt>	Return the list of file descriptors currently monitored for input events by the reactor.
<tt style='background-color:#E8E8E8;'> internet.IReactorFDSet <a href=' /internet/interfaces.py#L1674'>getWriters</a>()</tt>	Return the list file descriptors currently monitored for output events by the reactor.
<tt style='background-color:#E8E8E8;'> internet.IListeningPort <a href=' /internet/interfaces.py#L1689'>startListening</a>()</tt>	Start listening on this port.
<tt style='background-color:#E8E8E8;'> internet.IListeningPort <a href=' /internet/interfaces.py#L1698'>stopListening</a>()</tt>	Stop listening on this port.
<tt style='background-color:#E8E8E8;'> internet.IListeningPort <a href=' /internet/interfaces.py#L1706'>getHost</a>()</tt>	Get the host that this port is listening for.
<tt style='background-color:#E8E8E8;'> internet.ILoggingContext <a href=' /internet/interfaces.py#L1720'>logPrefix</a>()</tt>	@return prefix used during log formatting to indicate context.
<tt style='background-color:#E8E8E8;'> internet.IFileDescriptor <a href=' /internet/interfaces.py#L1733'>fileno</a>()</tt>	@raise if the descriptor no longer has a valid file descriptor number associated with it.
<tt style='background-color:#E8E8E8;'> internet.IFileDescriptor <a href=' /internet/interfaces.py#L1746'>connectionLost</a>(reason)</tt>	Called when the connection was lost.
<tt style='background-color:#E8E8E8;'> internet.IReadDescriptor <a href=' /internet/interfaces.py#L1773'>doRead</a>()</tt>	Some data is available for reading on your descriptor.
<tt style='background-color:#E8E8E8;'> internet.IWriteDescriptor <a href=' /internet/interfaces.py#L1790'>doWrite</a>()</tt>	Some data can be written to your descriptor.
<tt style='background-color:#E8E8E8;'> internet.IHalfCloseableDescriptor <a href=' /internet/interfaces.py#L1811'>writeConnectionLost</a>(reason)</tt>	Indicates write connection was lost.
<tt style='background-color:#E8E8E8;'> internet.IHalfCloseableDescriptor <a href=' /internet/interfaces.py#L1816'>readConnectionLost</a>(reason)</tt>	Indicates read connection was lost.
<tt style='background-color:#E8E8E8;'> internet.ISystemHandle <a href=' /internet/interfaces.py#L1827'>getHandle</a>()</tt>	Return a system- and reactor-specific handle.
<tt style='background-color:#E8E8E8;'> internet.IConsumer <a href=' /internet/interfaces.py#L1845'>registerProducer</a>(producer,streaming)</tt>	Register to receive data from a producer.
<tt style='background-color:#E8E8E8;'> internet.IConsumer <a href=' /internet/interfaces.py#L1873'>unregisterProducer</a>()</tt>	Stop consuming data from a producer without disconnecting.
<tt style='background-color:#E8E8E8;'> internet.IConsumer <a href=' /internet/interfaces.py#L1879'>write</a>(data)</tt>	The producer will write data by calling this method.
<tt style='background-color:#E8E8E8;'> internet.IProducer <a href=' /internet/interfaces.py#L1899'>stopProducing</a>()</tt>	Stop producing data.
<tt style='background-color:#E8E8E8;'> internet.IPushProducer <a href=' /internet/interfaces.py#L1917'>pauseProducing</a>()</tt>	Pause producing data.
<tt style='background-color:#E8E8E8;'> internet.IPushProducer <a href=' /internet/interfaces.py#L1924'>resumeProducing</a>()</tt>	Resume producing data.
<tt style='background-color:#E8E8E8;'> internet.IPullProducer <a href=' /internet/interfaces.py#L1938'>resumeProducing</a>()</tt>	Produce data for the consumer a single time.
<tt style='background-color:#E8E8E8;'> internet.IProtocol <a href=' /internet/interfaces.py#L1950'>dataReceived</a>(data)</tt>	Called whenever data is received.
<tt style='background-color:#E8E8E8;'> internet.IProtocol <a href=' /internet/interfaces.py#L1967'>connectionLost</a>(reason)</tt>	Called when the connection is shut down.
<tt style='background-color:#E8E8E8;'> internet.IProtocol <a href=' /internet/interfaces.py#L1980'>makeConnection</a>(transport)</tt>	Make a connection to a transport and a server.
<tt style='background-color:#E8E8E8;'> internet.IProtocol <a href=' /internet/interfaces.py#L1985'>connectionMade</a>()</tt>	Called when a connection is made.
<tt style='background-color:#E8E8E8;'> internet.IProcessProtocol <a href=' /internet/interfaces.py#L2003'>makeConnection</a>(process)</tt>	Called when the process has been created.
<tt style='background-color:#E8E8E8;'> internet.IProcessProtocol <a href=' /internet/interfaces.py#L2013'>childDataReceived</a>(childFD,data)</tt>	Called when data arrives from the child process.
<tt style='background-color:#E8E8E8;'> internet.IProcessProtocol <a href=' /internet/interfaces.py#L2026'>childConnectionLost</a>(childFD)</tt>	Called when a file descriptor associated with the child process is closed.
<tt style='background-color:#E8E8E8;'> internet.IProcessProtocol <a href=' /internet/interfaces.py#L2036'>processExited</a>(reason)</tt>	Called when the child process exits.
<tt style='background-color:#E8E8E8;'> internet.IProcessProtocol <a href=' /internet/interfaces.py#L2050'>processEnded</a>(reason)</tt>	Called when the child process exits and all file descriptors associated with it have been closed.
<tt style='background-color:#E8E8E8;'> internet.IHalfCloseableProtocol <a href=' /internet/interfaces.py#L2074'>readConnectionLost</a>()</tt>	Notification of the read connection being closed.
<tt style='background-color:#E8E8E8;'> internet.IHalfCloseableProtocol <a href=' /internet/interfaces.py#L2089'>writeConnectionLost</a>()</tt>	Notification of the write connection being closed.
<tt style='background-color:#E8E8E8;'> internet.IHandshakeListener <a href=' /internet/interfaces.py#L2109'>handshakeCompleted</a>()</tt>	Notification of the tls handshake being completed.
<tt style='background-color:#E8E8E8;'> internet.IFileDescriptorReceiver <a href=' /internet/interfaces.py#L2133'>fileDescriptorReceived</a>(descriptor)</tt>	Called when a file descriptor is received over the connection.
<tt style='background-color:#E8E8E8;'> internet.IProtocolFactory <a href=' /internet/interfaces.py#L2150'>buildProtocol</a>(addr)</tt>	Called when a connection has been established to addr.
<tt style='background-color:#E8E8E8;'> internet.IProtocolFactory <a href=' /internet/interfaces.py#L2164'>doStart</a>()</tt>	Called every time this is connected to a port or connector.
<tt style='background-color:#E8E8E8;'> internet.IProtocolFactory <a href=' /internet/interfaces.py#L2169'>doStop</a>()</tt>	Called every time this is unconnected from a port or connector.
<tt style='background-color:#E8E8E8;'> internet.ITransport <a href=' /internet/interfaces.py#L2188'>write</a>(data)</tt>	Write some data to the physical connection in sequence in a non-blocking fashion.
<tt style='background-color:#E8E8E8;'> internet.ITransport <a href=' /internet/interfaces.py#L2201'>writeSequence</a>(data)</tt>	Write an iterable of byte strings to the physical connection.
<tt style='background-color:#E8E8E8;'> internet.ITransport <a href=' /internet/interfaces.py#L2213'>loseConnection</a>()</tt>	Close my connection after writing all pending data.
<tt style='background-color:#E8E8E8;'> internet.ITransport <a href=' /internet/interfaces.py#L2221'>getPeer</a>()</tt>	Get the remote address of this connection.
<tt style='background-color:#E8E8E8;'> internet.ITransport <a href=' /internet/interfaces.py#L2233'>getHost</a>()</tt>	Similar to getpeer but returns an address describing this side of the connection.
<tt style='background-color:#E8E8E8;'> internet.ITCPTransport <a href=' /internet/interfaces.py#L2247'>loseWriteConnection</a>()</tt>	Half-close the write side of a tcp connection.
<tt style='background-color:#E8E8E8;'> internet.ITCPTransport <a href=' /internet/interfaces.py#L2259'>abortConnection</a>()</tt>	Close the connection abruptly.
<tt style='background-color:#E8E8E8;'> internet.ITCPTransport <a href=' /internet/interfaces.py#L2271'>getTcpNoDelay</a>()</tt>	Return if c{tcp_nodelay} is enabled.
<tt style='background-color:#E8E8E8;'> internet.ITCPTransport <a href=' /internet/interfaces.py#L2284'>getTcpKeepAlive</a>()</tt>	Return if c{so_keepalive} is enabled.
<tt style='background-color:#E8E8E8;'> internet.ITCPTransport <a href=' /internet/interfaces.py#L2298'>getHost</a>()</tt>	Returns l{ipv4address} or l{ipv6address}.
<tt style='background-color:#E8E8E8;'> internet.ITCPTransport <a href=' /internet/interfaces.py#L2303'>getPeer</a>()</tt>	Returns l{ipv4address} or l{ipv6address}.
<tt style='background-color:#E8E8E8;'> internet.IUNIXTransport <a href=' /internet/interfaces.py#L2314'>sendFileDescriptor</a>(descriptor)</tt>	Send a duplicate of this file socket pipe etc descriptor to the other end of this connection.
<tt style='background-color:#E8E8E8;'> internet.IOpenSSLServerConnectionCreator <a href=' /internet/interfaces.py#L2352'>serverConnectionForTLS</a>(tlsProtocol)</tt>	Create a connection for the given server protocol.
<tt style='background-color:#E8E8E8;'> internet.IOpenSSLClientConnectionCreator <a href=' /internet/interfaces.py#L2379'>clientConnectionForTLS</a>(tlsProtocol)</tt>	Create a connection for the given client protocol.
<tt style='background-color:#E8E8E8;'> internet.IProtocolNegotiationFactory <a href=' /internet/interfaces.py#L2403'>acceptableProtocols</a>()</tt>	Returns a list of protocols that can be spoken by the connection factory in the form of alpn tokens as laid out in the iana registry.
<tt style='background-color:#E8E8E8;'> internet.IOpenSSLContextFactory <a href=' /internet/interfaces.py#L2425'>getContext</a>()</tt>	Returns a tls context object suitable for securing a tls connection.
<tt style='background-color:#E8E8E8;'> internet.ITLSTransport <a href=' /internet/interfaces.py#L2444'>startTLS</a>(contextFactory)</tt>	Initiate tls negotiation.
<tt style='background-color:#E8E8E8;'> internet.ISSLTransport <a href=' /internet/interfaces.py#L2468'>getPeerCertificate</a>()</tt>	Return an object with the peer's certificate info.
<tt style='background-color:#E8E8E8;'> internet.IAcceptableCiphers <a href=' /internet/interfaces.py#L2509'>selectCiphers</a>(availableCiphers)</tt>	Choose which ciphers to allow to be negotiated on a tls connection.
<tt style='background-color:#E8E8E8;'> internet.IProcessTransport <a href=' /internet/interfaces.py#L2535'>closeStdin</a>()</tt>	Close stdin after all data has been written out.
<tt style='background-color:#E8E8E8;'> internet.IProcessTransport <a href=' /internet/interfaces.py#L2550'>closeChildFD</a>(descriptor)</tt>	Close a file descriptor which is connected to the child process identified by its fd in the child process.
<tt style='background-color:#E8E8E8;'> internet.IProcessTransport <a href=' /internet/interfaces.py#L2556'>writeToChild</a>(childFD,data)</tt>	Similar to l{itransport write} but also allows the file descriptor in.
<tt style='background-color:#E8E8E8;'> internet.IProcessTransport <a href=' /internet/interfaces.py#L2574'>loseConnection</a>()</tt>	Close stdin stderr and stdout.
<tt style='background-color:#E8E8E8;'> internet.IProcessTransport <a href=' /internet/interfaces.py#L2579'>signalProcess</a>(signalID)</tt>	Send a signal to the process.
<tt style='background-color:#E8E8E8;'> internet.IServiceCollection <a href=' /internet/interfaces.py#L2603'>getServiceNamed</a>(serviceName)</tt>	Retrieve the named service from this application.
<tt style='background-color:#E8E8E8;'> internet.IServiceCollection <a href=' /internet/interfaces.py#L2610'>addService</a>(service)</tt>	Add a service to this collection.
<tt style='background-color:#E8E8E8;'> internet.IServiceCollection <a href=' /internet/interfaces.py#L2615'>removeService</a>(service)</tt>	Remove a service from this collection.
<tt style='background-color:#E8E8E8;'> internet.IUDPTransport <a href=' /internet/interfaces.py#L2626'>write</a>(packet,addr)</tt>	Write packet to given address.
<tt style='background-color:#E8E8E8;'> internet.IUDPTransport <a href=' /internet/interfaces.py#L2638'>connect</a>(host,port)</tt>	Connect the transport to an address.
<tt style='background-color:#E8E8E8;'> internet.IUDPTransport <a href=' /internet/interfaces.py#L2651'>getHost</a>()</tt>	Get this port's host address.
<tt style='background-color:#E8E8E8;'> internet.IUDPTransport <a href=' /internet/interfaces.py#L2659'>stopListening</a>()</tt>	Stop listening on this port.
<tt style='background-color:#E8E8E8;'> internet.IUDPTransport <a href=' /internet/interfaces.py#L2667'>setBroadcastAllowed</a>(enabled)</tt>	Set whether this port may broadcast.
<tt style='background-color:#E8E8E8;'> internet.IUDPTransport <a href=' /internet/interfaces.py#L2675'>getBroadcastAllowed</a>()</tt>	Checks if broadcast is currently allowed on this port.
<tt style='background-color:#E8E8E8;'> internet.IUNIXDatagramTransport <a href=' /internet/interfaces.py#L2689'>write</a>(packet,address)</tt>	Write packet to given address.
<tt style='background-color:#E8E8E8;'> internet.IUNIXDatagramConnectedTransport <a href=' /internet/interfaces.py#L2705'>write</a>(packet)</tt>	Write packet to address we are connected to.
<tt style='background-color:#E8E8E8;'> internet.IMulticastTransport <a href=' /internet/interfaces.py#L2726'>getOutgoingInterface</a>()</tt>	Return interface of outgoing multicast packets.
<tt style='background-color:#E8E8E8;'> internet.IMulticastTransport <a href=' /internet/interfaces.py#L2731'>setOutgoingInterface</a>(addr)</tt>	Set interface for outgoing multicast packets.
<tt style='background-color:#E8E8E8;'> internet.IMulticastTransport <a href=' /internet/interfaces.py#L2738'>getLoopbackMode</a>()</tt>	Return if loopback mode is enabled.
<tt style='background-color:#E8E8E8;'> internet.IMulticastTransport <a href=' /internet/interfaces.py#L2743'>setLoopbackMode</a>(mode)</tt>	Set if loopback mode is enabled.
<tt style='background-color:#E8E8E8;'> internet.IMulticastTransport <a href=' /internet/interfaces.py#L2748'>getTTL</a>()</tt>	Get time to live for multicast packets.
<tt style='background-color:#E8E8E8;'> internet.IMulticastTransport <a href=' /internet/interfaces.py#L2753'>setTTL</a>(ttl)</tt>	Set time to live on multicast packets.
<tt style='background-color:#E8E8E8;'> internet.IMulticastTransport <a href=' /internet/interfaces.py#L2758'>joinGroup</a>(addr,interface)</tt>	Join a multicast group returns l{deferred} of success or failure.
<tt style='background-color:#E8E8E8;'> internet.IMulticastTransport <a href=' /internet/interfaces.py#L2766'>leaveGroup</a>(addr,interface)</tt>	Leave multicast group return l{deferred} of success.
<tt style='background-color:#E8E8E8;'> internet.IStreamClientEndpoint <a href=' /internet/interfaces.py#L2780'>connect</a>(protocolFactory)</tt>	Connect the c{protocolfactory} to the location specified by this l{istreamclientendpoint} provider.
<tt style='background-color:#E8E8E8;'> internet.IStreamServerEndpoint <a href=' /internet/interfaces.py#L2801'>listen</a>(protocolFactory)</tt>	Listen with c{protocolfactory} at the location specified by this l{istreamserverendpoint} provider.
<tt style='background-color:#E8E8E8;'> internet.IStreamServerEndpointStringParser <a href=' /internet/interfaces.py#L2831'>parseStreamServer</a>(reactor)</tt>	Parse a stream server endpoint from a reactor and string-only arguments and keyword arguments.
<tt style='background-color:#E8E8E8;'> internet.IStreamClientEndpointStringParserWithReactor <a href=' /internet/interfaces.py#L2870'>parseStreamClient</a>(reactor)</tt>	This method is invoked by l{endpoints clientfromstring}, if the type of.
<tt style='background-color:#E8E8E8;'> internet.KQueueReactor <a href=' /internet/kqreactor.py#L73'>__init__</a>(_kqueueImpl)</tt>	Initialize kqueue object file descriptor tracking dictionaries and the base class.
<tt style='background-color:#E8E8E8;'> internet.KQueueReactor <a href=' /internet/kqreactor.py#L94'>_updateRegistration</a>(fd,filter,op)</tt>	Private method for changing kqueue registration on a given fd filtering for events given filter/op.
<tt style='background-color:#E8E8E8;'> internet.KQueueReactor <a href=' /internet/kqreactor.py#L103'>beforeDaemonize</a>()</tt>	Implement l{ireactordaemonize beforedaemonize}.
<tt style='background-color:#E8E8E8;'> internet.KQueueReactor <a href=' /internet/kqreactor.py#L120'>afterDaemonize</a>()</tt>	Implement l{ireactordaemonize afterdaemonize}.
<tt style='background-color:#E8E8E8;'> internet.KQueueReactor <a href=' /internet/kqreactor.py#L135'>addReader</a>(reader)</tt>	Implement l{ireactorfdset addreader}.
<tt style='background-color:#E8E8E8;'> internet.KQueueReactor <a href=' /internet/kqreactor.py#L150'>addWriter</a>(writer)</tt>	Implement l{ireactorfdset addwriter}.
<tt style='background-color:#E8E8E8;'> internet.KQueueReactor <a href=' /internet/kqreactor.py#L165'>removeReader</a>(reader)</tt>	Implement l{ireactorfdset removereader}.
<tt style='background-color:#E8E8E8;'> internet.KQueueReactor <a href=' /internet/kqreactor.py#L192'>removeWriter</a>(writer)</tt>	Implement l{ireactorfdset removewriter}.
<tt style='background-color:#E8E8E8;'> internet.KQueueReactor <a href=' /internet/kqreactor.py#L219'>removeAll</a>()</tt>	Implement l{ireactorfdset removeall}.
<tt style='background-color:#E8E8E8;'> internet.KQueueReactor <a href=' /internet/kqreactor.py#L228'>getReaders</a>()</tt>	Implement l{ireactorfdset getreaders}.
<tt style='background-color:#E8E8E8;'> internet.KQueueReactor <a href=' /internet/kqreactor.py#L235'>getWriters</a>()</tt>	Implement l{ireactorfdset getwriters}.
<tt style='background-color:#E8E8E8;'> internet.KQueueReactor <a href=' /internet/kqreactor.py#L242'>doKEvent</a>(timeout)</tt>	Poll the kqueue for new events.
<tt style='background-color:#E8E8E8;'> internet.KQueueReactor <a href=' /internet/kqreactor.py#L273'>_doWriteOrRead</a>(selectable,fd,event)</tt>	Private method called when a fd is ready for reading writing or was lost.
<tt style='background-color:#E8E8E8;'> internet.EPollReactor <a href=' /internet/epollreactor.py#L61'>__init__</a>()</tt>	Initialize epoll object file descriptor tracking dictionaries and the base class.
<tt style='background-color:#E8E8E8;'> internet.EPollReactor <a href=' /internet/epollreactor.py#L77'>_add</a>(xer,primary,other,selectables)</tt>	Private method for adding a descriptor from the event loop.
<tt style='background-color:#E8E8E8;'> internet.EPollReactor <a href=' /internet/epollreactor.py#L104'>addReader</a>(reader)</tt>	Add a filedescriptor for notification of data available to read.
<tt style='background-color:#E8E8E8;'> internet.EPollReactor <a href=' /internet/epollreactor.py#L121'>addWriter</a>(writer)</tt>	Add a filedescriptor for notification of data available to write.
<tt style='background-color:#E8E8E8;'> internet.EPollReactor <a href=' /internet/epollreactor.py#L138'>_remove</a>(xer,primary,other,selectables)</tt>	Private method for removing a descriptor from the event loop.
<tt style='background-color:#E8E8E8;'> internet.EPollReactor <a href=' /internet/epollreactor.py#L164'>removeReader</a>(reader)</tt>	Remove a selectable for notification of data available to read.
<tt style='background-color:#E8E8E8;'> internet.EPollReactor <a href=' /internet/epollreactor.py#L175'>removeWriter</a>(writer)</tt>	Remove a selectable for notification of data available to write.
<tt style='background-color:#E8E8E8;'> internet.EPollReactor <a href=' /internet/epollreactor.py#L186'>removeAll</a>()</tt>	Remove all selectables and return a list of them.
<tt style='background-color:#E8E8E8;'> internet.EPollReactor <a href=' /internet/epollreactor.py#L206'>doPoll</a>(timeout)</tt>	Poll the poller for new events.
<tt style='background-color:#E8E8E8;'> internet.ThreadedSelectReactor <a href=' /internet/_threadedselect.py#L146'>_doSelectInThread</a>(timeout)</tt>	Run one iteration of the i/o monitor loop.
<tt style='background-color:#E8E8E8;'> internet.ThreadedSelectReactor <a href=' /internet/_threadedselect.py#L229'>interleave</a>(waker)</tt>	Interleave waker interleaves this reactor with the current application by moving the blocking parts of.
<tt style='background-color:#E8E8E8;'> internet.ThreadedSelectReactor <a href=' /internet/_threadedselect.py#L288'>addReader</a>(reader)</tt>	Add a filedescriptor for notification of data available to read.
<tt style='background-color:#E8E8E8;'> internet.ThreadedSelectReactor <a href=' /internet/_threadedselect.py#L294'>addWriter</a>(writer)</tt>	Add a filedescriptor for notification of data available to write.
<tt style='background-color:#E8E8E8;'> internet.ThreadedSelectReactor <a href=' /internet/_threadedselect.py#L300'>removeReader</a>(reader)</tt>	Remove a selectable for notification of data available to read.
<tt style='background-color:#E8E8E8;'> internet.ThreadedSelectReactor <a href=' /internet/_threadedselect.py#L305'>removeWriter</a>(writer)</tt>	Remove a selectable for notification of data available to write.
<tt style='background-color:#E8E8E8;'> internet.ThreadedSelectReactor <a href=' /internet/_threadedselect.py#L322'>stop</a>()</tt>	Extend the base stop implementation to also wake up the select thread so that c{rununtilcurrent} notices the reactor should stop.
<tt style='background-color:#E8E8E8;'> internet.Factory <a href=' /internet/protocol.py#L39'>forProtocol</a>(cls,protocol)</tt>	Create a factory for the given protocol.
<tt style='background-color:#E8E8E8;'> internet.Factory <a href=' /internet/protocol.py#L60'>logPrefix</a>()</tt>	Describe this factory for log messages.
<tt style='background-color:#E8E8E8;'> internet.Factory <a href=' /internet/protocol.py#L67'>doStart</a>()</tt>	Make sure startfactory is called.
<tt style='background-color:#E8E8E8;'> internet.Factory <a href=' /internet/protocol.py#L79'>doStop</a>()</tt>	Make sure stopfactory is called.
<tt style='background-color:#E8E8E8;'> internet.Factory <a href=' /internet/protocol.py#L95'>startFactory</a>()</tt>	This will be called before i begin listening on a port or connector.
<tt style='background-color:#E8E8E8;'> internet.Factory <a href=' /internet/protocol.py#L106'>stopFactory</a>()</tt>	This will be called before i stop listening on all ports/connectors.
<tt style='background-color:#E8E8E8;'> internet.Factory <a href=' /internet/protocol.py#L118'>buildProtocol</a>(addr)</tt>	Create an instance of a subclass of protocol.
<tt style='background-color:#E8E8E8;'> internet.ClientFactory <a href=' /internet/protocol.py#L146'>startedConnecting</a>(connector)</tt>	Called when a connection has been started.
<tt style='background-color:#E8E8E8;'> internet.ClientFactory <a href=' /internet/protocol.py#L154'>clientConnectionFailed</a>(connector,reason)</tt>	Called when a connection has failed to connect.
<tt style='background-color:#E8E8E8;'> internet.ClientFactory <a href=' /internet/protocol.py#L162'>clientConnectionLost</a>(connector,reason)</tt>	Called when an established connection is lost.
<tt style='background-color:#E8E8E8;'> internet._InstanceFactory <a href=' /internet/protocol.py#L195'>buildProtocol</a>(addr)</tt>	Return the pre-constructed protocol instance and arrange to fire the waiting l{deferred} to indicate success establishing the connection.
<tt style='background-color:#E8E8E8;'> internet._InstanceFactory <a href=' /internet/protocol.py#L206'>clientConnectionFailed</a>(connector,reason)</tt>	Arrange to fire the waiting l{deferred} with the given failure to indicate the connection could not be established.
<tt style='background-color:#E8E8E8;'> internet._InstanceFactory <a href=' /internet/protocol.py#L216'>fire</a>(func,value)</tt>	Clear c{self pending} to avoid a reference cycle and then invoke func.
<tt style='background-color:#E8E8E8;'> internet.ClientCreator <a href=' /internet/protocol.py#L255'>_connect</a>(method)</tt>	Initiate a connection attempt.
<tt style='background-color:#E8E8E8;'> internet.ClientCreator <a href=' /internet/protocol.py#L282'>connectTCP</a>(host,port,timeout,bindAddress)</tt>	Connect to a tcp server.
<tt style='background-color:#E8E8E8;'> internet.ClientCreator <a href=' /internet/protocol.py#L298'>connectUNIX</a>(address,timeout,checkPID)</tt>	Connect to a unix socket.
<tt style='background-color:#E8E8E8;'> internet.ClientCreator <a href=' /internet/protocol.py#L314'>connectSSL</a>(host,port,contextFactory,timeout)</tt>	Connect to an ssl server.
<tt style='background-color:#E8E8E8;'> internet.ReconnectingClientFactory <a href=' /internet/protocol.py#L386'>retry</a>(connector)</tt>	Have this connector connect again after a suitable delay.
<tt style='background-color:#E8E8E8;'> internet.ReconnectingClientFactory <a href=' /internet/protocol.py#L425'>stopTrying</a>()</tt>	Put a stop to any attempt to reconnect in progress.
<tt style='background-color:#E8E8E8;'> internet.ReconnectingClientFactory <a href=' /internet/protocol.py#L441'>resetDelay</a>()</tt>	Call this method after a successful connection it resets the delay and the retry counter.
<tt style='background-color:#E8E8E8;'> internet.ReconnectingClientFactory <a href=' /internet/protocol.py#L452'>__getstate__</a>()</tt>	Remove all of the state which is mutated by connection attempts and failures returning just the state which describes how reconnections.
<tt style='background-color:#E8E8E8;'> internet.BaseProtocol <a href=' /internet/protocol.py#L486'>makeConnection</a>(transport)</tt>	Make a connection to a transport and a server.
<tt style='background-color:#E8E8E8;'> internet.BaseProtocol <a href=' /internet/protocol.py#L496'>connectionMade</a>()</tt>	Called when a connection is made.
<tt style='background-color:#E8E8E8;'> internet.Protocol <a href=' /internet/protocol.py#L530'>logPrefix</a>()</tt>	Return a prefix matching the class name to identify log messages related to this protocol instance.
<tt style='background-color:#E8E8E8;'> internet.Protocol <a href=' /internet/protocol.py#L538'>dataReceived</a>(data)</tt>	Called whenever data is received.
<tt style='background-color:#E8E8E8;'> internet.Protocol <a href=' /internet/protocol.py#L552'>connectionLost</a>(reason)</tt>	Called when the connection is shut down.
<tt style='background-color:#E8E8E8;'> internet.ProcessProtocol <a href=' /internet/protocol.py#L609'>outReceived</a>(data)</tt>	Some data was received from stdout.
<tt style='background-color:#E8E8E8;'> internet.ProcessProtocol <a href=' /internet/protocol.py#L615'>errReceived</a>(data)</tt>	Some data was received from stderr.
<tt style='background-color:#E8E8E8;'> internet.ProcessProtocol <a href=' /internet/protocol.py#L630'>inConnectionLost</a>()</tt>	This will be called when stdin is closed.
<tt style='background-color:#E8E8E8;'> internet.ProcessProtocol <a href=' /internet/protocol.py#L636'>outConnectionLost</a>()</tt>	This will be called when stdout is closed.
<tt style='background-color:#E8E8E8;'> internet.ProcessProtocol <a href=' /internet/protocol.py#L642'>errConnectionLost</a>()</tt>	This will be called when stderr is closed.
<tt style='background-color:#E8E8E8;'> internet.ProcessProtocol <a href=' /internet/protocol.py#L648'>processExited</a>(reason)</tt>	This will be called when the subprocess exits.
<tt style='background-color:#E8E8E8;'> internet.ProcessProtocol <a href=' /internet/protocol.py#L656'>processEnded</a>(reason)</tt>	Called when the child process exits and all file descriptors associated with it have been closed.
<tt style='background-color:#E8E8E8;'> internet.AbstractDatagramProtocol <a href=' /internet/protocol.py#L681'>doStart</a>()</tt>	Make sure startprotocol is called.
<tt style='background-color:#E8E8E8;'> internet.AbstractDatagramProtocol <a href=' /internet/protocol.py#L692'>doStop</a>()</tt>	Make sure stopprotocol is called.
<tt style='background-color:#E8E8E8;'> internet.AbstractDatagramProtocol <a href=' /internet/protocol.py#L705'>startProtocol</a>()</tt>	Called when a transport is connected to this protocol.
<tt style='background-color:#E8E8E8;'> internet.AbstractDatagramProtocol <a href=' /internet/protocol.py#L711'>stopProtocol</a>()</tt>	Called when the transport is disconnected.
<tt style='background-color:#E8E8E8;'> internet.AbstractDatagramProtocol <a href=' /internet/protocol.py#L717'>makeConnection</a>(transport)</tt>	Make a connection to a transport and a server.
<tt style='background-color:#E8E8E8;'> internet.AbstractDatagramProtocol <a href=' /internet/protocol.py#L727'>datagramReceived</a>(datagram,addr)</tt>	Called when a datagram is received.
<tt style='background-color:#E8E8E8;'> internet.DatagramProtocol <a href=' /internet/protocol.py#L746'>logPrefix</a>()</tt>	Return a prefix matching the class name to identify log messages related to this protocol instance.
<tt style='background-color:#E8E8E8;'> internet.DatagramProtocol <a href=' /internet/protocol.py#L754'>connectionRefused</a>()</tt>	Called due to error from write in connected mode.
<tt style='background-color:#E8E8E8;'> internet.ConnectedDatagramProtocol <a href=' /internet/protocol.py#L768'>datagramReceived</a>(datagram)</tt>	Called when a datagram is received.
<tt style='background-color:#E8E8E8;'> internet.ConnectedDatagramProtocol <a href=' /internet/protocol.py#L774'>connectionFailed</a>(failure)</tt>	Called if connecting failed.
<tt style='background-color:#E8E8E8;'> internet.FileWrapper <a href=' /internet/protocol.py#L812'>registerProducer</a>(producer,streaming)</tt>	From abstract filedescriptor.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_dumbwin32proc.py#L42'>_fsdecode</a>(x)</tt>	Decode a string to a l{unicode} representation passing through existing l{unicode} unchanged.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_dumbwin32proc.py#L80'>_findShebang</a>(filename)</tt>	Look for a #! line and return the value following the #! if one exists or none if this file is not a script.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_dumbwin32proc.py#L108'>_invalidWin32App</a>(pywinerr)</tt>	Determine if a pywintypes error is telling us that the given process is.
<tt style='background-color:#E8E8E8;'> internet.Process <a href=' /internet/_dumbwin32proc.py#L147'>__init__</a>(reactor,protocol,command,args)</tt>	Create a new child process.
<tt style='background-color:#E8E8E8;'> internet.Process <a href=' /internet/_dumbwin32proc.py#L325'>writeToChild</a>(fd,data)</tt>	Similar to l{itransport write} but also allows the file descriptor in.
<tt style='background-color:#E8E8E8;'> internet.Process <a href=' /internet/_dumbwin32proc.py#L371'>loseConnection</a>()</tt>	Close the process' stdout in and err.
<tt style='background-color:#E8E8E8;'> internet.Process <a href=' /internet/_dumbwin32proc.py#L393'>connectionLostNotify</a>()</tt>	Will be called 3 times by stdout/err threads and process handle.
<tt style='background-color:#E8E8E8;'> internet.Process <a href=' /internet/_dumbwin32proc.py#L427'>__repr__</a>()</tt>	Return a string representation of the process.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/defer.py#L56'>logError</a>(err)</tt>	Log and return failure.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/defer.py#L70'>succeed</a>(result)</tt>	Return a l{deferred} that has already had c{ callback result } called.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/defer.py#L93'>fail</a>(result)</tt>	Return a l{deferred} that has already had c{ errback result } called.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/defer.py#L112'>execute</a>(callable)</tt>	Create a l{deferred} from a callable and arguments.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/defer.py#L129'>maybeDeferred</a>(f)</tt>	Invoke a function that may or may not return a l{deferred}.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/defer.py#L175'>setDebugging</a>(on)</tt>	Enable or disable l{deferred} debugging.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/defer.py#L186'>getDebugging</a>()</tt>	Determine whether l{deferred} debugging is enabled.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L261'>__init__</a>(canceller)</tt>	Initialize a l{deferred}.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L292'>addCallbacks</a>(callback,errback,callbackArgs,callbackKeywords)</tt>	Add a pair of callbacks success and error to this l{deferred}.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L314'>addCallback</a>(callback)</tt>	Convenience method for adding just a callback.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L324'>addErrback</a>(errback)</tt>	Convenience method for adding just an errback.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L335'>addBoth</a>(callback)</tt>	Convenience method for adding a single callable as both a callback and an errback.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L347'>addTimeout</a>(timeout,clock,onTimeoutCancel)</tt>	Time out this l{deferred} by scheduling it to be cancelled after c{timeout} seconds.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L409'>chainDeferred</a>(d)</tt>	Chain another l{deferred} to this l{deferred}.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L437'>callback</a>(result)</tt>	Run all success callbacks that have been added to this l{deferred}.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L462'>errback</a>(fail)</tt>	Run all error callbacks that have been added to this l{deferred}.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L503'>pause</a>()</tt>	Stop processing on a l{deferred} until l{unpause}() is called.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L510'>unpause</a>()</tt>	Process all callbacks made since l{pause}() was called.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L521'>cancel</a>()</tt>	Cancel this l{deferred}.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L570'>_continuation</a>()</tt>	Build a tuple of callback and errback with l{_continue}.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L578'>_runCallbacks</a>()</tt>	Run the chain of callbacks once a result is available.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L713'>__str__</a>()</tt>	Return a string representation of this c{deferred}.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L756'>asFuture</a>(loop)</tt>	Adapt a l{deferred} into a l{asyncio future} which is bound to c{loop}.
<tt style='background-color:#E8E8E8;'> internet.Deferred <a href=' /internet/defer.py#L797'>fromFuture</a>(cls,future)</tt>	Adapt an l{asyncio future} to a l{deferred}.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/defer.py#L842'>_cancelledToTimedOutError</a>(value,timeout)</tt>	A default translation function that translates l{failure}s that are l{cancellederror}s to l{timeouterror}s.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/defer.py#L865'>ensureDeferred</a>(coro)</tt>	Schedule the execution of a coroutine that awaits/yields from l{deferred}s wrapping it in a l{deferred} that will fire on success/failure of the.
<tt style='background-color:#E8E8E8;'> internet.DebugInfo <a href=' /internet/defer.py#L944'>__del__</a>()</tt>	Print tracebacks and die.
<tt style='background-color:#E8E8E8;'> internet.FirstError <a href=' /internet/defer.py#L987'>__repr__</a>()</tt>	The i{repr} of l{firsterror} instances includes the repr of the wrapped failure's exception and the index of the l{firsterror}.
<tt style='background-color:#E8E8E8;'> internet.FirstError <a href=' /internet/defer.py#L995'>__str__</a>()</tt>	The i{str} of l{firsterror} instances includes the i{str} of the entire wrapped failure including its traceback and exception and.
<tt style='background-color:#E8E8E8;'> internet.FirstError <a href=' /internet/defer.py#L1004'>__cmp__</a>(other)</tt>	Comparison between l{firsterror} and other l{firsterror} instances is defined as the comparison of the index and sub-failure of each.
<tt style='background-color:#E8E8E8;'> internet.DeferredList <a href=' /internet/defer.py#L1047'>__init__</a>(deferredList,fireOnOneCallback,fireOnOneErrback,consumeErrors)</tt>	Initialize a deferredlist.
<tt style='background-color:#E8E8E8;'> internet.DeferredList <a href=' /internet/defer.py#L1104'>_cbDeferred</a>(result,index,succeeded)</tt>	Internal callback for when one of my deferreds fires.
<tt style='background-color:#E8E8E8;'> internet.DeferredList <a href=' /internet/defer.py#L1125'>cancel</a>()</tt>	Cancel this l{deferredlist}.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/defer.py#L1156'>gatherResults</a>(deferredList,consumeErrors)</tt>	Returns via a l{deferred}, a list with the results of the given l{deferred}s - in effect a "join" of multiple deferred operations.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/defer.py#L1276'>deferredGenerator</a>(f)</tt>	L{deferredgenerator} and l{waitfordeferred} help you write l{deferred}-using code that looks like a regular sequential function.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/defer.py#L1350'>returnValue</a>(val)</tt>	Return val from a l{inlinecallbacks} generator.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/defer.py#L1466'>inlineCallbacks</a>(f)</tt>	Inlinecallbacks helps you write l{deferred}-using code that looks like a regular sequential function.
<tt style='background-color:#E8E8E8;'> internet._ConcurrencyPrimitive <a href=' /internet/defer.py#L1548'>run</a>()</tt>	Acquire run release.
<tt style='background-color:#E8E8E8;'> internet.DeferredLock <a href=' /internet/defer.py#L1593'>_cancelAcquire</a>(d)</tt>	Remove a deferred d from our waiting list as the deferred has been canceled.
<tt style='background-color:#E8E8E8;'> internet.DeferredLock <a href=' /internet/defer.py#L1608'>acquire</a>()</tt>	Attempt to acquire the lock returns a l{deferred} that fires on.
<tt style='background-color:#E8E8E8;'> internet.DeferredLock <a href=' /internet/defer.py#L1626'>release</a>()</tt>	Release the lock if there is a waiting list then the first.
<tt style='background-color:#E8E8E8;'> internet.DeferredSemaphore <a href=' /internet/defer.py#L1660'>__init__</a>(tokens)</tt>	@param tokens initial value of l{tokens} and l{limit}.
<tt style='background-color:#E8E8E8;'> internet.DeferredSemaphore <a href=' /internet/defer.py#L1672'>_cancelAcquire</a>(d)</tt>	Remove a deferred d from our waiting list as the deferred has been canceled.
<tt style='background-color:#E8E8E8;'> internet.DeferredSemaphore <a href=' /internet/defer.py#L1687'>acquire</a>()</tt>	Attempt to acquire the token.
<tt style='background-color:#E8E8E8;'> internet.DeferredSemaphore <a href=' /internet/defer.py#L1703'>release</a>()</tt>	Release the token.
<tt style='background-color:#E8E8E8;'> internet.DeferredQueue <a href=' /internet/defer.py#L1755'>_cancelGet</a>(d)</tt>	Remove a deferred d from our waiting list as the deferred has been canceled.
<tt style='background-color:#E8E8E8;'> internet.DeferredQueue <a href=' /internet/defer.py#L1770'>put</a>(obj)</tt>	Add an object to this queue.
<tt style='background-color:#E8E8E8;'> internet.DeferredQueue <a href=' /internet/defer.py#L1784'>get</a>()</tt>	Attempt to retrieve and remove an object from the queue.
<tt style='background-color:#E8E8E8;'> internet.DeferredFilesystemLock <a href=' /internet/defer.py#L1835'>__init__</a>(name,scheduler)</tt>	@param name the name of the lock to acquire.
<tt style='background-color:#E8E8E8;'> internet.DeferredFilesystemLock <a href=' /internet/defer.py#L1849'>deferUntilLocked</a>(timeout)</tt>	Wait until we acquire this lock this method is not safe for.
<tt style='background-color:#E8E8E8;'> internet._AbortingMixin <a href=' /internet/tcp.py#L147'>abortConnection</a>()</tt>	Aborts the connection immediately dropping any buffered data.
<tt style='background-color:#E8E8E8;'> internet.Connection <a href=' /internet/tcp.py#L187'>getHandle</a>()</tt>	Return the socket for this connection.
<tt style='background-color:#E8E8E8;'> internet.Connection <a href=' /internet/tcp.py#L192'>doRead</a>()</tt>	Calls self protocol datareceived with all available data.
<tt style='background-color:#E8E8E8;'> internet.Connection <a href=' /internet/tcp.py#L227'>writeSomeData</a>(data)</tt>	Write as much as possible of the given data to this tcp connection.
<tt style='background-color:#E8E8E8;'> internet.Connection <a href=' /internet/tcp.py#L276'>connectionLost</a>(reason)</tt>	See abstract filedescriptor connectionlost().
<tt style='background-color:#E8E8E8;'> internet.Connection <a href=' /internet/tcp.py#L297'>logPrefix</a>()</tt>	Return the prefix to log with when i own the logging thread.
<tt style='background-color:#E8E8E8;'> internet._BaseBaseClient <a href=' /internet/tcp.py#L373'>_finishInit</a>(whenDone,skt,error,reactor)</tt>	Called by subclasses to continue to the stage of initialization where the socket connect attempt is made.
<tt style='background-color:#E8E8E8;'> internet._BaseBaseClient <a href=' /internet/tcp.py#L397'>resolveAddress</a>()</tt>	Resolve the name that was passed to this l{_basebaseclient}, if necessary and then move on to attempting the connection once an.
<tt style='background-color:#E8E8E8;'> internet._BaseBaseClient <a href=' /internet/tcp.py#L421'>_setRealAddress</a>(address)</tt>	Set the resolved address of this l{_basebaseclient} and initiate the connection attempt.
<tt style='background-color:#E8E8E8;'> internet._BaseBaseClient <a href=' /internet/tcp.py#L436'>failIfNotConnected</a>(err)</tt>	Generic method called when the attempts to connect failed it basically.
<tt style='background-color:#E8E8E8;'> internet._BaseBaseClient <a href=' /internet/tcp.py#L457'>stopConnecting</a>()</tt>	If a connection attempt is still outstanding (i e no connection is.
<tt style='background-color:#E8E8E8;'> internet._BaseBaseClient <a href=' /internet/tcp.py#L465'>connectionLost</a>(reason)</tt>	Invoked by lower-level logic when it's time to clean the socket up.
<tt style='background-color:#E8E8E8;'> internet.BaseClient <a href=' /internet/tcp.py#L504'>_stopReadingAndWriting</a>()</tt>	Implement the posix-ish (i e.
<tt style='background-color:#E8E8E8;'> internet.BaseClient <a href=' /internet/tcp.py#L516'>_collectSocketDetails</a>()</tt>	Clean up references to the socket and its file descriptor.
<tt style='background-color:#E8E8E8;'> internet.BaseClient <a href=' /internet/tcp.py#L525'>createInternetSocket</a>()</tt>	Internal create a non-blocking socket using self.
<tt style='background-color:#E8E8E8;'> internet.BaseClient <a href=' /internet/tcp.py#L535'>doConnect</a>()</tt>	Initiate the outgoing connection attempt.
<tt style='background-color:#E8E8E8;'> internet.BaseClient <a href=' /internet/tcp.py#L589'>_connectDone</a>()</tt>	This is a hook for when a connection attempt has succeeded.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/tcp.py#L621'>_resolveIPv6</a>(ip,port)</tt>	Resolve an ipv6 literal into an ipv6 address.
<tt style='background-color:#E8E8E8;'> internet._BaseTCPClient <a href=' /internet/tcp.py#L712'>getHost</a>()</tt>	Returns an l{ipv4address} or l{ipv6address}.
<tt style='background-color:#E8E8E8;'> internet._BaseTCPClient <a href=' /internet/tcp.py#L721'>getPeer</a>()</tt>	Returns an l{ipv4address} or l{ipv6address}.
<tt style='background-color:#E8E8E8;'> internet.Server <a href=' /internet/unix.py#L244'>__init__</a>(sock,protocol,client,server)</tt>	Server sock protocol client server sessionno initialize it with a socket a protocol a descriptor for my peer (a.
<tt style='background-color:#E8E8E8;'> internet.Server <a href=' /internet/tcp.py#L792'>__repr__</a>()</tt>	A string representation of this connection.
<tt style='background-color:#E8E8E8;'> internet.Server <a href=' /internet/tcp.py#L799'>_fromConnectedSocket</a>(cls,fileDescriptor,addressFamily,factory)</tt>	Create a new l{server} based on an existing connected i{sock_stream} socket.
<tt style='background-color:#E8E8E8;'> internet.Server <a href=' /internet/unix.py#L249'>getHost</a>()</tt>	Returns an l{ipv4address} or l{ipv6address}.
<tt style='background-color:#E8E8E8;'> internet.Server <a href=' /internet/unix.py#L252'>getPeer</a>()</tt>	Returns an l{ipv4address} or l{ipv6address}.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/unix.py#L288'>__init__</a>(port,factory,backlog,interface)</tt>	Initialize with a numeric port to listen on.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/udp.py#L120'>_fromListeningDescriptor</a>(cls,reactor,fd,addressFamily)</tt>	Create a new l{port} based on an existing listening i{sock_dgram} socket.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/unix.py#L306'>startListening</a>()</tt>	Create and bind my socket and begin listening on it.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/udp.py#L221'>doRead</a>()</tt>	Called when my socket is ready for reading.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/udp.py#L358'>loseConnection</a>(connDone)</tt>	Stop accepting connections on this port.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/unix.py#L352'>_logConnectionLostMsg</a>()</tt>	Log message for closing socket.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/unix.py#L360'>connectionLost</a>(reason)</tt>	Cleans up my socket.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/udp.py#L401'>logPrefix</a>()</tt>	Return the prefix to log with.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/udp.py#L408'>getHost</a>()</tt>	Return the local address of the udp connection.
<tt style='background-color:#E8E8E8;'> internet.Connector <a href=' /internet/unix.py#L399'>_makeTransport</a>()</tt>	Create a l{client} bound to this l{connector}.
<tt style='background-color:#E8E8E8;'> internet.Connector <a href=' /internet/unix.py#L402'>getDestination</a>()</tt>	@see l{twisted internet interfaces iconnector getdestination}.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/utils.py#L99'>getProcessOutput</a>(executable,args,env,path)</tt>	Spawn a process and return its output as a deferred returning a l{bytes}.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/utils.py#L140'>getProcessValue</a>(executable,args,env,path)</tt>	Spawn a process and return its exit code as a deferred.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/utils.py#L166'>getProcessOutputAndValue</a>(executable,args,env,path)</tt>	Spawn a process and returns a deferred that will be called back with.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/utils.py#L186'>runWithWarningsSuppressed</a>(suppressedWarnings,f)</tt>	Run the function c{f}, but with some warnings suppressed.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/utils.py#L210'>suppressWarnings</a>(f)</tt>	Wrap c{f} in a callable which suppresses the indicated warnings before invoking c{f} and unsuppresses them afterwards.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/unix.py#L288'>__init__</a>(port,proto,interface,maxPacketSize)</tt>	@param port a port number on which to listen.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/udp.py#L165'>getHandle</a>()</tt>	Return a socket object.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/udp.py#L182'>_bindSocket</a>()</tt>	Prepare and assign a l{socket socket} instance to.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/udp.py#L254'>write</a>(datagram,addr)</tt>	Write a datagram.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/udp.py#L314'>writeSequence</a>(seq,addr)</tt>	Write a datagram constructed from an iterable of l{bytes}.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/udp.py#L330'>connect</a>(host,port)</tt>	'connect' to remote server.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/udp.py#L380'>setLogStr</a>()</tt>	Initialize the c{logstr} attribute to be used by c{logprefix}.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/udp.py#L388'>_setAddressFamily</a>()</tt>	Resolve address family for the socket.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/udp.py#L422'>setBroadcastAllowed</a>(enabled)</tt>	Set whether this port may broadcast this is disabled by default.
<tt style='background-color:#E8E8E8;'> internet.Port <a href=' /internet/udp.py#L433'>getBroadcastAllowed</a>()</tt>	Checks if broadcast is currently allowed on this port.
<tt style='background-color:#E8E8E8;'> internet.MulticastMixin <a href=' /internet/udp.py#L456'>setOutgoingInterface</a>(addr)</tt>	Returns deferred of success.
<tt style='background-color:#E8E8E8;'> internet.MulticastMixin <a href=' /internet/udp.py#L485'>joinGroup</a>(addr,interface)</tt>	Join a multicast group returns deferred of success.
<tt style='background-color:#E8E8E8;'> internet.MulticastMixin <a href=' /internet/udp.py#L507'>leaveGroup</a>(addr,interface)</tt>	Leave multicast group return deferred of success.
<tt style='background-color:#E8E8E8;'> internet.MulticastPort <a href=' /internet/udp.py#L519'>__init__</a>(port,proto,interface,maxPacketSize)</tt>	@see l{twisted internet interfaces ireactormulticast listenmulticast}.
<tt style='background-color:#E8E8E8;'> internet._ConsumerMixin <a href=' /internet/abstract.py#L76'>startWriting</a>()</tt>	Override in a subclass to cause the reactor to monitor this selectable for write events.
<tt style='background-color:#E8E8E8;'> internet._ConsumerMixin <a href=' /internet/abstract.py#L86'>registerProducer</a>(producer,streaming)</tt>	Register to receive data from a producer.
<tt style='background-color:#E8E8E8;'> internet._ConsumerMixin <a href=' /internet/abstract.py#L115'>unregisterProducer</a>()</tt>	Stop consuming data from a producer without disconnecting.
<tt style='background-color:#E8E8E8;'> internet._LogOwner <a href=' /internet/abstract.py#L133'>_getLogPrefix</a>(applicationObject)</tt>	Determine the log prefix to use for messages related to c{applicationobject}, which may or may not be an.
<tt style='background-color:#E8E8E8;'> internet._LogOwner <a href=' /internet/abstract.py#L146'>logPrefix</a>()</tt>	Override this method to insert custom logging behavior its.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L178'>__init__</a>(reactor)</tt>	@param reactor an l{ireactorfdset} provider which this descriptor will use to get readable and writeable event notifications.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L191'>connectionLost</a>(reason)</tt>	The connection was lost.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L210'>writeSomeData</a>(data)</tt>	Write as much as possible of the given data immediately.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L224'>doRead</a>()</tt>	Called when data is available for reading.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L234'>doWrite</a>()</tt>	Called when data can be written.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L291'>_postLoseConnection</a>()</tt>	Called after a loseconnection(), when all data has been written.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L312'>_isSendBufferFull</a>()</tt>	Determine whether the user-space send buffer for this transport is full or not.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L326'>_maybePauseProducer</a>()</tt>	Possibly pause a producer if there is one and the send buffer is full.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L339'>write</a>(data)</tt>	Reliably write some data.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L358'>writeSequence</a>(iovec)</tt>	Reliably write a sequence of data.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L386'>loseConnection</a>(_connDone)</tt>	Close the connection at the next available opportunity.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L415'>stopReading</a>()</tt>	Stop waiting for read availability.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L423'>stopWriting</a>()</tt>	Stop waiting for write availability.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L431'>startReading</a>()</tt>	Start waiting for read availability.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L436'>startWriting</a>()</tt>	Start waiting for write availability.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L452'>stopConsuming</a>()</tt>	Stop consuming data.
<tt style='background-color:#E8E8E8;'> internet.FileDescriptor <a href=' /internet/abstract.py#L475'>fileno</a>()</tt>	File descriptor number for select().
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/abstract.py#L485'>isIPAddress</a>(addr,family)</tt>	Determine whether the given string represents an ip address of the given family by default an ipv4 address.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/abstract.py#L530'>isIPv6Address</a>(addr)</tt>	Determine whether the given string represents an ipv6 address.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/threads.py#L22'>deferToThreadPool</a>(reactor,threadpool,f)</tt>	Call the function c{f} using a thread from the given threadpool and return the result as a deferred.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/threads.py#L58'>deferToThread</a>(f)</tt>	Run a function in a thread and return the result as a deferred.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/threads.py#L75'>_runMultiple</a>(tupleList)</tt>	Run a list of functions.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/threads.py#L83'>callMultipleInThread</a>(tupleList)</tt>	Run a list of functions in the same thread.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/threads.py#L93'>blockingCallFromThread</a>(reactor,f)</tt>	Run a function in the reactor from a thread and wait for the result synchronously.
<tt style='background-color:#E8E8E8;'> internet.Glib2Reactor <a href=' /internet/glib2reactor.py#L27'>__init__</a>()</tt>	Override init to set the c{usegtk} flag.
<tt style='background-color:#E8E8E8;'> internet.Win32Reactor <a href=' /internet/win32eventreactor.py#L133'>_makeSocketEvent</a>(fd,action,why)</tt>	Make a win32 event object for a socket.
<tt style='background-color:#E8E8E8;'> internet.Win32Reactor <a href=' /internet/win32eventreactor.py#L143'>addEvent</a>(event,fd,action)</tt>	Add a new win32 event to the event loop.
<tt style='background-color:#E8E8E8;'> internet.Win32Reactor <a href=' /internet/win32eventreactor.py#L150'>removeEvent</a>(event)</tt>	Remove an event.
<tt style='background-color:#E8E8E8;'> internet.Win32Reactor <a href=' /internet/win32eventreactor.py#L157'>addReader</a>(reader)</tt>	Add a socket filedescriptor for notification of data available to read.
<tt style='background-color:#E8E8E8;'> internet.Win32Reactor <a href=' /internet/win32eventreactor.py#L171'>addWriter</a>(writer)</tt>	Add a socket filedescriptor for notification of data available to write.
<tt style='background-color:#E8E8E8;'> internet.Win32Reactor <a href=' /internet/win32eventreactor.py#L179'>removeReader</a>(reader)</tt>	Remove a selectable for notification of data available to read.
<tt style='background-color:#E8E8E8;'> internet.Win32Reactor <a href=' /internet/win32eventreactor.py#L193'>removeWriter</a>(writer)</tt>	Remove a selectable for notification of data available to write.
<tt style='background-color:#E8E8E8;'> internet.Win32Reactor <a href=' /internet/win32eventreactor.py#L200'>removeAll</a>()</tt>	Remove all selectables and return a list of them.
<tt style='background-color:#E8E8E8;'> internet._ThreadFDWrapper <a href=' /internet/win32eventreactor.py#L333'>logPrefix</a>()</tt>	Return the original handler's log prefix as it was given to c{__init__}.
<tt style='background-color:#E8E8E8;'> internet._ThreadFDWrapper <a href=' /internet/win32eventreactor.py#L341'>_execute</a>()</tt>	Callback fired when the associated event is set run the c{action}.
<tt style='background-color:#E8E8E8;'> internet._ThreadFDWrapper <a href=' /internet/win32eventreactor.py#L352'>connectionLost</a>(reason)</tt>	Pass through to the wrapped descriptor but in the main reactor thread instead of the helper c{win32reactor} thread.
<tt style='background-color:#E8E8E8;'> internet._ThreadedWin32EventsMixin <a href=' /internet/win32eventreactor.py#L378'>_unmakeHelperReactor</a>()</tt>	Stop and discard the reactor started by c{_makehelperreactor}.
<tt style='background-color:#E8E8E8;'> internet._ThreadedWin32EventsMixin <a href=' /internet/win32eventreactor.py#L386'>_makeHelperReactor</a>()</tt>	Create and in a new thread start a l{win32reactor} instance to use for the implementation of l{ireactorwin32events}.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/default.py#L19'>_getInstallFunction</a>(platform)</tt>	Return a function to install the reactor most suited for the given platform.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/unix.py#L41'>_ancillaryDescriptor</a>(fd)</tt>	Pack an integer into an ancillary data structure suitable for use with l{sendmsg.
<tt style='background-color:#E8E8E8;'> internet._SendmsgMixin <a href=' /internet/unix.py#L78'>_isSendBufferFull</a>()</tt>	Determine whether the user-space send buffer for this transport is full or not.
<tt style='background-color:#E8E8E8;'> internet._SendmsgMixin <a href=' /internet/unix.py#L102'>sendFileDescriptor</a>(fileno)</tt>	Queue the given file descriptor to be sent and start trying to send it.
<tt style='background-color:#E8E8E8;'> internet._SendmsgMixin <a href=' /internet/unix.py#L111'>writeSomeData</a>(data)</tt>	Send as much of c{data} as possible also send any pending file.
<tt style='background-color:#E8E8E8;'> internet._SendmsgMixin <a href=' /internet/unix.py#L155'>doRead</a>()</tt>	Calls {iprotocol datareceived} with all available data and.
<tt style='background-color:#E8E8E8;'> internet._SendmsgMixin <a href=' /internet/unix.py#L194'>_ancillaryLevelSOLSOCKETTypeSCMRIGHTS</a>(cmsgData)</tt>	Processes ancillary data with level sol_socket and type scm_rights indicating that the ancillary data payload holds file descriptors.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/unix.py#L257'>_inFilesystemNamespace</a>(path)</tt>	Determine whether the given unix socket path is in a filesystem namespace.
<tt style='background-color:#E8E8E8;'> internet._UNIXPort <a href=' /internet/unix.py#L271'>getHost</a>()</tt>	Returns a unixaddress.
<tt style='background-color:#E8E8E8;'> internet.DatagramPort <a href=' /internet/unix.py#L414'>__init__</a>(addr,proto,maxPacketSize,mode)</tt>	Initialize with address to listen on.
<tt style='background-color:#E8E8E8;'> internet.DatagramPort <a href=' /internet/unix.py#L444'>write</a>(datagram,address)</tt>	Write a datagram.
<tt style='background-color:#E8E8E8;'> internet.DatagramPort <a href=' /internet/unix.py#L462'>connectionLost</a>(reason)</tt>	Cleans up my socket.
<tt style='background-color:#E8E8E8;'> internet.ConnectedDatagramPort <a href=' /internet/unix.py#L507'>connectionFailed</a>(reason)</tt>	Called when a connection fails stop listening on the socket.
<tt style='background-color:#E8E8E8;'> internet.ConnectedDatagramPort <a href=' /internet/unix.py#L519'>doRead</a>()</tt>	Called when my socket is ready for reading.
<tt style='background-color:#E8E8E8;'> internet.ConnectedDatagramPort <a href=' /internet/unix.py#L541'>write</a>(data)</tt>	Write a datagram.
<tt style='background-color:#E8E8E8;'> internet.wxRunner <a href=' /internet/wxsupport.py#L39'>run</a>()</tt>	Execute pending wx events followed by wx idle events and reschedule.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/gireactor.py#L171'>install</a>(app)</tt>	Install the wxpython support given a wxapp instance.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/selectreactor.py#L23'>win32select</a>(r,w,e,timeout)</tt>	Win32 select wrapper.
<tt style='background-color:#E8E8E8;'> internet.SelectReactor <a href=' /internet/selectreactor.py#L66'>__init__</a>()</tt>	Initialize file descriptor tracking dictionaries and the base class.
<tt style='background-color:#E8E8E8;'> internet.SelectReactor <a href=' /internet/selectreactor.py#L93'>doSelect</a>(timeout)</tt>	Run one iteration of the i/o monitor loop.
<tt style='background-color:#E8E8E8;'> internet.SelectReactor <a href=' /internet/selectreactor.py#L156'>addReader</a>(reader)</tt>	Add a filedescriptor for notification of data available to read.
<tt style='background-color:#E8E8E8;'> internet.SelectReactor <a href=' /internet/selectreactor.py#L162'>addWriter</a>(writer)</tt>	Add a filedescriptor for notification of data available to write.
<tt style='background-color:#E8E8E8;'> internet.SelectReactor <a href=' /internet/selectreactor.py#L168'>removeReader</a>(reader)</tt>	Remove a selectable for notification of data available to read.
<tt style='background-color:#E8E8E8;'> internet.SelectReactor <a href=' /internet/selectreactor.py#L174'>removeWriter</a>(writer)</tt>	Remove a selectable for notification of data available to write.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_signals.py#L40'>installHandler</a>(fd)</tt>	Install a signal handler which will write a byte to c{fd} when i{sigchld} is received.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/_signals.py#L64'>isDefaultHandler</a>()</tt>	Determine whether the i{sigchld} handler is the default or not.
<tt style='background-color:#E8E8E8;'> internet.UNIXAddress <a href=' /internet/address.py#L160'>name</a>(name)</tt>	On unix paths are always bytes however as paths are l{unicode} on.
<tt style='background-color:#E8E8E8;'> internet.StandardIO <a href=' /internet/_posixstdio.py#L162'>stopReading</a>()</tt>	Compatibility only don't use call pauseproducing.
<tt style='background-color:#E8E8E8;'> internet.StandardIO <a href=' /internet/_posixstdio.py#L166'>startReading</a>()</tt>	Compatibility only don't use call resumeproducing.
<tt style='background-color:#E8E8E8;'> internet.HostResolution <a href=' /internet/_resolver.py#L35'>__init__</a>(name)</tt>	Create a l{hostresolution} with the given name.
<tt style='background-color:#E8E8E8;'> internet.GAIResolver <a href=' /internet/_resolver.py#L75'>__init__</a>(reactor,getThreadPool,getaddrinfo)</tt>	Create a l{gairesolver}.
<tt style='background-color:#E8E8E8;'> internet.GAIResolver <a href=' /internet/_resolver.py#L98'>resolveHostName</a>(resolutionReceiver,hostName,portNumber,addressTypes)</tt>	See l{ihostnameresolver resolvehostname}.
<tt style='background-color:#E8E8E8;'> internet.SimpleResolverComplexifier <a href=' /internet/_resolver.py#L148'>__init__</a>(simpleResolver)</tt>	Construct a l{simpleresolvercomplexifier} with an l{iresolversimple}.
<tt style='background-color:#E8E8E8;'> internet.SimpleResolverComplexifier <a href=' /internet/_resolver.py#L155'>resolveHostName</a>(resolutionReceiver,hostName,portNumber,addressTypes)</tt>	See l{ihostnameresolver resolvehostname}.
<tt style='background-color:#E8E8E8;'> internet.FirstOneWins <a href=' /internet/_resolver.py#L197'>__init__</a>(deferred)</tt>	@param deferred the l{deferred} to fire when the first resolution result arrives.
<tt style='background-color:#E8E8E8;'> internet.FirstOneWins <a href=' /internet/_resolver.py#L206'>resolutionBegan</a>(resolution)</tt>	See l{iresolutionreceiver resolutionbegan}.
<tt style='background-color:#E8E8E8;'> internet.FirstOneWins <a href=' /internet/_resolver.py#L215'>addressResolved</a>(address)</tt>	See l{iresolutionreceiver addressresolved}.
<tt style='background-color:#E8E8E8;'> internet.FirstOneWins <a href=' /internet/_resolver.py#L227'>resolutionComplete</a>()</tt>	See l{iresolutionreceiver resolutioncomplete}.
<tt style='background-color:#E8E8E8;'> internet.ComplexResolverSimplifier <a href=' /internet/_resolver.py#L242'>__init__</a>(nameResolver)</tt>	Create a l{complexresolversimplifier} with an l{ihostnameresolver}.
<tt style='background-color:#E8E8E8;'> internet.ComplexResolverSimplifier <a href=' /internet/_resolver.py#L251'>getHostByName</a>(name,timeouts)</tt>	See l{iresolversimple gethostbyname}.
<tt style='background-color:#E8E8E8;'> internet. <a href=' /internet/gireactor.py#L49'>_oldGiInit</a>()</tt>	Make sure pygtk and gi aren't loaded at the same time and import glib if possible.
<tt style='background-color:#E8E8E8;'> internet.GIReactor <a href=' /internet/gireactor.py#L120'>registerGApplication</a>(app)</tt>	Register a c{gio application} or c{gtk application}, whose main loop.
<tt style='background-color:#E8E8E8;'> internet.PortableGIReactor <a href=' /internet/gireactor.py#L162'>registerGApplication</a>(app)</tt>	Register a c{gio application} or c{gtk application}, whose main loop.
<tt style='background-color:#E8E8E8;'> internet.SerialPort <a href=' /internet/_win32serialport.py#L59'>_finishPortSetup</a>()</tt>	Finish setting up the serial port.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.IOCPReactor <a href=' /internet/iocpreactor/reactor.py#L71'>doIteration</a>(timeout)</tt>	Poll the io completion port for new events.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.IOCPReactor <a href=' /internet/iocpreactor/reactor.py#L152'>listenTCP</a>(port,factory,backlog,interface)</tt>	@see twisted internet interfaces ireactortcp listentcp.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.IOCPReactor <a href=' /internet/iocpreactor/reactor.py#L161'>connectTCP</a>(host,port,factory,timeout)</tt>	@see twisted internet interfaces ireactortcp connecttcp.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.IOCPReactor <a href=' /internet/iocpreactor/reactor.py#L216'>listenUDP</a>(port,protocol,interface,maxPacketSize)</tt>	Connects a given l{datagramprotocol} to the given numeric udp port.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.IOCPReactor <a href=' /internet/iocpreactor/reactor.py#L227'>listenMulticast</a>(port,protocol,interface,maxPacketSize)</tt>	Connects a given datagramprotocol to the given numeric udp port.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.IOCPReactor <a href=' /internet/iocpreactor/reactor.py#L242'>spawnProcess</a>(processProtocol,executable,args,env)</tt>	Spawn a process.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.IReadHandle <a href=' /internet/iocpreactor/interfaces.py#L15'>readFromHandle</a>(bufflist,evt)</tt>	Read into the given buffers from this handle.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.IWriteHandle <a href=' /internet/iocpreactor/interfaces.py#L30'>writeToHandle</a>(buff,evt)</tt>	Write the given buffer to this handle.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Connection <a href=' /internet/iocpreactor/tcp.py#L61'>dataReceived</a>(rbuffer)</tt>	@param rbuffer data received.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Connection <a href=' /internet/iocpreactor/tcp.py#L82'>writeToHandle</a>(buff,evt)</tt>	Send c{buff} to current file handle using c{_iocp send} the buffer.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Connection <a href=' /internet/iocpreactor/tcp.py#L133'>logPrefix</a>()</tt>	Return the prefix to log with when i own the logging thread.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Connection <a href=' /internet/iocpreactor/tcp.py#L166'>write</a>(data)</tt>	Write some data either directly to the underlying handle or if tls has been started to the l{tlsmemorybioprotocol} for it to encrypt and.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Connection <a href=' /internet/iocpreactor/tcp.py#L182'>writeSequence</a>(iovec)</tt>	Write some data either directly to the underlying handle or if tls has been started to the l{tlsmemorybioprotocol} for it to encrypt and.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Connection <a href=' /internet/iocpreactor/tcp.py#L198'>loseConnection</a>(reason)</tt>	Close the underlying handle or if tls has been started first shut it down.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Connection <a href=' /internet/iocpreactor/tcp.py#L212'>registerProducer</a>(producer,streaming)</tt>	Register a producer.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Connection <a href=' /internet/iocpreactor/tcp.py#L228'>unregisterProducer</a>()</tt>	Unregister a producer.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Client <a href=' /internet/iocpreactor/tcp.py#L265'>createInternetSocket</a>()</tt>	Create a socket registered with the iocp reactor.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Client <a href=' /internet/iocpreactor/tcp.py#L274'>_collectSocketDetails</a>()</tt>	Clean up potentially circular references to the socket and to its c{getfilehandle} method.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Client <a href=' /internet/iocpreactor/tcp.py#L284'>_stopReadingAndWriting</a>()</tt>	Remove the active handle from the reactor.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Server <a href=' /internet/iocpreactor/tcp.py#L351'>__init__</a>(sock,protocol,clientAddr,serverAddr)</tt>	Server sock protocol client server sessionno initialize me with a socket a protocol a descriptor for my peer (a.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Server <a href=' /internet/iocpreactor/tcp.py#L371'>__repr__</a>()</tt>	A string representation of this connection.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Server <a href=' /internet/iocpreactor/tcp.py#L378'>getHost</a>()</tt>	Returns an ipv4address.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Server <a href=' /internet/iocpreactor/tcp.py#L387'>getPeer</a>()</tt>	Returns an ipv4address.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Port <a href=' /internet/iocpreactor/udp.py#L255'>loseConnection</a>(connDone)</tt>	Stop accepting connections on this port.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Port <a href=' /internet/iocpreactor/tcp.py#L495'>_logConnectionLostMsg</a>()</tt>	Log message for closing port.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Port <a href=' /internet/iocpreactor/udp.py#L261'>connectionLost</a>(reason)</tt>	Cleans up my socket.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Port <a href=' /internet/iocpreactor/udp.py#L285'>logPrefix</a>()</tt>	Returns the name of my class to prefix log entries with.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Port <a href=' /internet/iocpreactor/udp.py#L292'>getHost</a>()</tt>	Return the local address of the udp connection.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Port <a href=' /internet/iocpreactor/udp.py#L42'>__init__</a>(port,proto,interface,maxPacketSize)</tt>	Initialize with a numeric port to listen on.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Port <a href=' /internet/iocpreactor/udp.py#L64'>_setAddressFamily</a>()</tt>	Resolve address family for the socket.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Port <a href=' /internet/iocpreactor/udp.py#L85'>getHandle</a>()</tt>	Return a socket object.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Port <a href=' /internet/iocpreactor/udp.py#L92'>startListening</a>()</tt>	Create and bind my socket and begin listening on it.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Port <a href=' /internet/iocpreactor/udp.py#L167'>write</a>(datagram,addr)</tt>	Write a datagram.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Port <a href=' /internet/iocpreactor/udp.py#L224'>connect</a>(host,port)</tt>	'connect' to remote server.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Port <a href=' /internet/iocpreactor/udp.py#L277'>setLogStr</a>()</tt>	Initialize the c{logstr} attribute to be used by c{logprefix}.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Port <a href=' /internet/iocpreactor/udp.py#L306'>setBroadcastAllowed</a>(enabled)</tt>	Set whether this port may broadcast this is disabled by default.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.Port <a href=' /internet/iocpreactor/udp.py#L317'>getBroadcastAllowed</a>()</tt>	Checks if broadcast is currently allowed on this port.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.MulticastMixin <a href=' /internet/iocpreactor/udp.py#L340'>setOutgoingInterface</a>(addr)</tt>	Returns deferred of success.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.MulticastMixin <a href=' /internet/iocpreactor/udp.py#L374'>joinGroup</a>(addr,interface)</tt>	Join a multicast group returns deferred of success.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.MulticastMixin <a href=' /internet/iocpreactor/udp.py#L401'>leaveGroup</a>(addr,interface)</tt>	Leave multicast group return deferred of success.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.FileHandle <a href=' /internet/iocpreactor/abstract.py#L59'>_dispatchData</a>()</tt>	Dispatch previously read data return true if self reading and we don't.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.FileHandle <a href=' /internet/iocpreactor/abstract.py#L96'>_handleRead</a>(rc,data,evt)</tt>	Returns false if we should stop reading for now.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.FileHandle <a href=' /internet/iocpreactor/abstract.py#L195'>_handleWrite</a>(rc,numBytesWritten,evt)</tt>	Returns false if we should stop writing for now.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.FileHandle <a href=' /internet/iocpreactor/abstract.py#L262'>write</a>(data)</tt>	Reliably write some data.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.FileHandle <a href=' /internet/iocpreactor/abstract.py#L316'>connectionLost</a>(reason)</tt>	The connection was lost.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.FileHandle <a href=' /internet/iocpreactor/abstract.py#L342'>loseConnection</a>(_connDone)</tt>	Close the connection at the next available opportunity.
<tt style='background-color:#E8E8E8;'> internet.iocpreactor.FileHandle <a href=' /internet/iocpreactor/abstract.py#L371'>stopConsuming</a>()</tt>	Stop consuming data.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_release.py#L41'>runCommand</a>(args)</tt>	Execute a vector of arguments.
<tt style='background-color:#E8E8E8;'> python.IVCSCommand <a href=' /python/_release.py#L57'>ensureIsWorkingDirectory</a>(path)</tt>	Ensure that c{path} is a working directory of this vcs.
<tt style='background-color:#E8E8E8;'> python.IVCSCommand <a href=' /python/_release.py#L66'>isStatusClean</a>(path)</tt>	Return the git status of the files in the specified path.
<tt style='background-color:#E8E8E8;'> python.IVCSCommand <a href=' /python/_release.py#L76'>remove</a>(path)</tt>	Remove the specified path from a the vcs.
<tt style='background-color:#E8E8E8;'> python.IVCSCommand <a href=' /python/_release.py#L85'>exportTo</a>(fromDir,exportDir)</tt>	Export the content of the vcsrepository to the specified directory.
<tt style='background-color:#E8E8E8;'> python.GitCommand <a href=' /python/_release.py#L105'>ensureIsWorkingDirectory</a>(path)</tt>	Ensure that c{path} is a git working directory.
<tt style='background-color:#E8E8E8;'> python.GitCommand <a href=' /python/_release.py#L121'>isStatusClean</a>(path)</tt>	Return the git status of the files in the specified path.
<tt style='background-color:#E8E8E8;'> python.GitCommand <a href=' /python/_release.py#L135'>remove</a>(path)</tt>	Remove the specified path from a git repository.
<tt style='background-color:#E8E8E8;'> python.GitCommand <a href=' /python/_release.py#L146'>exportTo</a>(fromDir,exportDir)</tt>	Export the content of a git repository to the specified directory.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_release.py#L167'>getRepositoryCommand</a>(directory)</tt>	Detect the vcs used in the specified directory and return a l{gitcommand} if the directory is a git repository.
<tt style='background-color:#E8E8E8;'> python.Project <a href=' /python/_release.py#L212'>getVersion</a>()</tt>	@return a l{incremental version} specifying the version number of the.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_release.py#L230'>findTwistedProjects</a>(baseDirectory)</tt>	Find all twisted-style projects beneath a base directory.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_release.py#L245'>replaceInFile</a>(filename,oldToNew)</tt>	I replace the text oldstr' with newstr' in filename' using science.
<tt style='background-color:#E8E8E8;'> python.APIBuilder <a href=' /python/_release.py#L274'>build</a>(projectName,projectURL,sourceURL,packagePath)</tt>	Call pydoctor's entry point with options which will generate html documentation for the specified package's api.
<tt style='background-color:#E8E8E8;'> python.NewsBuilder <a href=' /python/_release.py#L379'>_today</a>()</tt>	Return today's date as a string in yyyy-mm-dd format.
<tt style='background-color:#E8E8E8;'> python.NewsBuilder <a href=' /python/_release.py#L386'>_findChanges</a>(path,ticketType)</tt>	Load all the feature ticket summaries.
<tt style='background-color:#E8E8E8;'> python.NewsBuilder <a href=' /python/_release.py#L412'>_formatHeader</a>(header)</tt>	Format a header for a news file.
<tt style='background-color:#E8E8E8;'> python.NewsBuilder <a href=' /python/_release.py#L425'>_writeHeader</a>(fileObj,header)</tt>	Write a version header to the given file.
<tt style='background-color:#E8E8E8;'> python.NewsBuilder <a href=' /python/_release.py#L436'>_writeSection</a>(fileObj,header,tickets)</tt>	Write out one section features bug fixes etc to the given file.
<tt style='background-color:#E8E8E8;'> python.NewsBuilder <a href=' /python/_release.py#L470'>_writeMisc</a>(fileObj,header,tickets)</tt>	Write out a miscellaneous-changes section to the given file.
<tt style='background-color:#E8E8E8;'> python.NewsBuilder <a href=' /python/_release.py#L494'>build</a>(path,output,header)</tt>	Load all of the change information from the given directory and write it out to the given output file.
<tt style='background-color:#E8E8E8;'> python.NewsBuilder <a href=' /python/_release.py#L539'>_deleteFragments</a>(path)</tt>	Delete the change information to clean up the repository once the news files have been built.
<tt style='background-color:#E8E8E8;'> python.NewsBuilder <a href=' /python/_release.py#L557'>_getNewsName</a>(project)</tt>	Return the name of c{project} that should appear in news.
<tt style='background-color:#E8E8E8;'> python.NewsBuilder <a href=' /python/_release.py#L570'>_iterProjects</a>(baseDirectory)</tt>	Iterate through the twisted projects in c{basedirectory}, yielding everything we need to know to build news for them.
<tt style='background-color:#E8E8E8;'> python.NewsBuilder <a href=' /python/_release.py#L601'>buildAll</a>(baseDirectory)</tt>	Find all of the twisted subprojects beneath c{basedirectory} and update their news files from the ticket change description files in their.
<tt style='background-color:#E8E8E8;'> python.NewsBuilder <a href=' /python/_release.py#L628'>main</a>(args)</tt>	Build all news files.
<tt style='background-color:#E8E8E8;'> python.SphinxBuilder <a href=' /python/_release.py#L659'>main</a>(args)</tt>	Build the main documentation.
<tt style='background-color:#E8E8E8;'> python.SphinxBuilder <a href=' /python/_release.py#L675'>build</a>(docDir,buildDir,version)</tt>	Build the documentation in c{docdir} with sphinx.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_release.py#L719'>filePathDelta</a>(origin,destination)</tt>	Return a list of strings that represent c{destination} as a path relative to c{origin}.
<tt style='background-color:#E8E8E8;'> python.BuildAPIDocsScript <a href=' /python/_release.py#L761'>buildAPIDocs</a>(projectRoot,output)</tt>	Build the api documentation of twisted with our project policy.
<tt style='background-color:#E8E8E8;'> python.BuildAPIDocsScript <a href=' /python/_release.py#L783'>main</a>(args)</tt>	Build api documentation.
<tt style='background-color:#E8E8E8;'> python.CheckTopfileScript <a href=' /python/_release.py#L807'>main</a>(args)</tt>	Run the script.
<tt style='background-color:#E8E8E8;'> python.UserDatabase <a href=' /python/fakepwd.py#L53'>addUser</a>(username,password,uid,gid)</tt>	Add a new user record to this database.
<tt style='background-color:#E8E8E8;'> python.UserDatabase <a href=' /python/fakepwd.py#L89'>getpwuid</a>(uid)</tt>	Return the user record corresponding to the given uid.
<tt style='background-color:#E8E8E8;'> python.UserDatabase <a href=' /python/fakepwd.py#L99'>getpwnam</a>(name)</tt>	Return the user record corresponding to the given username.
<tt style='background-color:#E8E8E8;'> python.UserDatabase <a href=' /python/fakepwd.py#L109'>getpwall</a>()</tt>	Return a list of all user records.
<tt style='background-color:#E8E8E8;'> python.ShadowDatabase <a href=' /python/fakepwd.py#L162'>addUser</a>(username,password,lastChange,min)</tt>	Add a new user record to this database.
<tt style='background-color:#E8E8E8;'> python.ShadowDatabase <a href=' /python/fakepwd.py#L206'>getspnam</a>(username)</tt>	Return the shadow user record corresponding to the given username.
<tt style='background-color:#E8E8E8;'> python.ShadowDatabase <a href=' /python/fakepwd.py#L216'>getspall</a>()</tt>	Return a list of all shadow user records.
<tt style='background-color:#E8E8E8;'> python.SyslogObserver <a href=' /python/syslog.py#L37'>__init__</a>(prefix,options,facility)</tt>	@type prefix c{str} @param prefix the syslog prefix to use.
<tt style='background-color:#E8E8E8;'> python.SyslogObserver <a href=' /python/syslog.py#L55'>emit</a>(eventDict)</tt>	Send a message event to the i{syslog}.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/log.py#L663'>startLogging</a>(prefix,options,facility,setStdout)</tt>	Send all twisted logging output to syslog from now on.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/release.py#L44'>sh</a>(command,null,prompt)</tt>	I'll try to execute c{command}, and if c{prompt} is true i'll ask before running it.
<tt style='background-color:#E8E8E8;'> python.ChunkingZipFile <a href=' /python/zipstream.py#L24'>readfile</a>(name)</tt>	Return file-like object for name.
<tt style='background-color:#E8E8E8;'> python._FileEntry <a href=' /python/zipstream.py#L93'>__init__</a>(chunkingZipFile,length)</tt>	Create a l{_fileentry} from a l{chunkingzipfile}.
<tt style='background-color:#E8E8E8;'> python._FileEntry <a href=' /python/zipstream.py#L104'>isatty</a>()</tt>	Returns false because zip files should not be ttys.
<tt style='background-color:#E8E8E8;'> python._FileEntry <a href=' /python/zipstream.py#L111'>close</a>()</tt>	Close self file-like object.
<tt style='background-color:#E8E8E8;'> python._FileEntry <a href=' /python/zipstream.py#L120'>readline</a>()</tt>	Read a line.
<tt style='background-color:#E8E8E8;'> python._FileEntry <a href=' /python/zipstream.py#L132'>__next__</a>()</tt>	Implement next as file does (like readline except raises stopiteration.
<tt style='background-color:#E8E8E8;'> python._FileEntry <a href=' /python/zipstream.py#L146'>readlines</a>()</tt>	Returns a list of all the lines.
<tt style='background-color:#E8E8E8;'> python._FileEntry <a href=' /python/zipstream.py#L153'>xreadlines</a>()</tt>	Returns an iterator so self.
<tt style='background-color:#E8E8E8;'> python._FileEntry <a href=' /python/zipstream.py#L160'>__iter__</a>()</tt>	Returns an iterator so self.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/zipstream.py#L262'>countZipFileChunks</a>(filename,chunksize)</tt>	Predict the number of chunks that will be extracted from the entire zipfile given chunksize blocks.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/zipstream.py#L274'>countFileChunks</a>(zipinfo,chunksize)</tt>	Count the number of chunks that will result from the given c{zipinfo}.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/zipstream.py#L292'>unzipIterChunky</a>(filename,directory,overwrite,chunksize)</tt>	Return a generator for the zipfile this implementation will yield after.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/filepath.py#L49'>_stub_islink</a>(path)</tt>	Always return c{false} if the operating system does not support symlinks.
<tt style='background-color:#E8E8E8;'> python.IFilePath <a href=' /python/filepath.py#L98'>child</a>(name)</tt>	Obtain a direct child of this file path the child may or may not.
<tt style='background-color:#E8E8E8;'> python.IFilePath <a href=' /python/filepath.py#L110'>open</a>(mode)</tt>	Opens this file path with the given mode.
<tt style='background-color:#E8E8E8;'> python.IFilePath <a href=' /python/filepath.py#L118'>changed</a>()</tt>	Clear any cached information about the state of this path on disk.
<tt style='background-color:#E8E8E8;'> python.IFilePath <a href=' /python/filepath.py#L123'>getsize</a>()</tt>	Retrieve the size of this file in bytes.
<tt style='background-color:#E8E8E8;'> python.IFilePath <a href=' /python/filepath.py#L131'>getModificationTime</a>()</tt>	Retrieve the time of last access from this file.
<tt style='background-color:#E8E8E8;'> python.IFilePath <a href=' /python/filepath.py#L139'>getStatusChangeTime</a>()</tt>	Retrieve the time of the last status change for this file.
<tt style='background-color:#E8E8E8;'> python.IFilePath <a href=' /python/filepath.py#L147'>getAccessTime</a>()</tt>	Retrieve the time that this file was last accessed.
<tt style='background-color:#E8E8E8;'> python.IFilePath <a href=' /python/filepath.py#L155'>exists</a>()</tt>	Check if this file path exists.
<tt style='background-color:#E8E8E8;'> python.IFilePath <a href=' /python/filepath.py#L164'>isdir</a>()</tt>	Check if this file path refers to a directory.
<tt style='background-color:#E8E8E8;'> python.IFilePath <a href=' /python/filepath.py#L172'>isfile</a>()</tt>	Check if this file path refers to a regular file.
<tt style='background-color:#E8E8E8;'> python.IFilePath <a href=' /python/filepath.py#L180'>children</a>()</tt>	List the children of this path object.
<tt style='background-color:#E8E8E8;'> python.IFilePath <a href=' /python/filepath.py#L188'>basename</a>()</tt>	Retrieve the final component of the file path's path everything after the final path separator.
<tt style='background-color:#E8E8E8;'> python.IFilePath <a href=' /python/filepath.py#L197'>parent</a>()</tt>	A file path for the directory containing the file at this file path.
<tt style='background-color:#E8E8E8;'> python.IFilePath <a href=' /python/filepath.py#L202'>sibling</a>(name)</tt>	A file path for the directory containing the file at this file path.
<tt style='background-color:#E8E8E8;'> python.UnlistableError <a href=' /python/filepath.py#L239'>__init__</a>(originalException)</tt>	Create an unlistableerror exception.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/filepath.py#L262'>_secureEnoughString</a>(path)</tt>	Compute a string usable as a new temporary filename.
<tt style='background-color:#E8E8E8;'> python.AbstractFilePath <a href=' /python/filepath.py#L287'>getContent</a>()</tt>	Retrieve the contents of the file at this path.
<tt style='background-color:#E8E8E8;'> python.AbstractFilePath <a href=' /python/filepath.py#L298'>parents</a>()</tt>	Retrieve an iterator of all the ancestors of this path.
<tt style='background-color:#E8E8E8;'> python.AbstractFilePath <a href=' /python/filepath.py#L314'>children</a>()</tt>	List the children of this path object.
<tt style='background-color:#E8E8E8;'> python.AbstractFilePath <a href=' /python/filepath.py#L381'>walk</a>(descend)</tt>	Yield myself then each of my children and each of those children's children in turn.
<tt style='background-color:#E8E8E8;'> python.AbstractFilePath <a href=' /python/filepath.py#L412'>sibling</a>(path)</tt>	Return a l{filepath} with the same directory as this instance but with a basename of c{path}.
<tt style='background-color:#E8E8E8;'> python.AbstractFilePath <a href=' /python/filepath.py#L426'>descendant</a>(segments)</tt>	Retrieve a child or child's child of this path.
<tt style='background-color:#E8E8E8;'> python.AbstractFilePath <a href=' /python/filepath.py#L444'>segmentsFrom</a>(ancestor)</tt>	Return a list of segments between a child and its ancestor.
<tt style='background-color:#E8E8E8;'> python.AbstractFilePath <a href=' /python/filepath.py#L476'>__hash__</a>()</tt>	Hash the same as another l{filepath} with the same path as mine.
<tt style='background-color:#E8E8E8;'> python.AbstractFilePath <a href=' /python/filepath.py#L484'>getmtime</a>()</tt>	Deprecated use getmodificationtime instead.
<tt style='background-color:#E8E8E8;'> python.AbstractFilePath <a href=' /python/filepath.py#L491'>getatime</a>()</tt>	Deprecated use getaccesstime instead.
<tt style='background-color:#E8E8E8;'> python.AbstractFilePath <a href=' /python/filepath.py#L498'>getctime</a>()</tt>	Deprecated use getstatuschangetime instead.
<tt style='background-color:#E8E8E8;'> python.RWX <a href=' /python/filepath.py#L535'>shorthand</a>()</tt>	Returns a short string representing the permission bits looks like.
<tt style='background-color:#E8E8E8;'> python.Permissions <a href=' /python/filepath.py#L587'>shorthand</a>()</tt>	Returns a short string representing the permission bits looks like.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/filepath.py#L610'>_asFilesystemBytes</a>(path,encoding)</tt>	Return c{path} as a string of l{bytes} suitable for use on this system's filesystem.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/filepath.py#L631'>_asFilesystemText</a>(path,encoding)</tt>	Return c{path} as a string of l{unicode} suitable for use on this system's filesystem.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/filepath.py#L653'>_coerceToFilesystemEncoding</a>(path,newpath,encoding)</tt>	Return a c{newpath} that is suitable for joining to c{path}.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L731'>__init__</a>(path,alwaysCreate)</tt>	Convert a path string to an absolute path if necessary and initialize the l{filepath} with the result.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L740'>__getstate__</a>()</tt>	Support serialization by discarding cached l{os stat} results and.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L751'>sep</a>()</tt>	Return a filesystem separator.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L762'>_asBytesPath</a>(encoding)</tt>	Return the path of this l{filepath} as bytes.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L774'>_asTextPath</a>(encoding)</tt>	Return the path of this l{filepath} as text.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L786'>asBytesMode</a>(encoding)</tt>	Return this l{filepath} in l{bytes}-mode.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L800'>asTextMode</a>(encoding)</tt>	Return this l{filepath} in l{unicode}-mode.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L814'>_getPathAsSameTypeAs</a>(pattern)</tt>	If c{pattern} is c{bytes}, return l{filepath path} as l{bytes}.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L828'>child</a>(path)</tt>	Create and return a new l{filepath} representing a path contained by c{self}.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L863'>preauthChild</a>(path)</tt>	Use me if c{path} might have slashes in it but you know they're safe.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L883'>childSearchPreauth</a>()</tt>	Return my first existing child with a name in c{paths}.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L903'>siblingExtensionSearch</a>()</tt>	Attempt to return a path with my name given multiple possible extensions.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L934'>realpath</a>()</tt>	Returns the absolute target as a l{filepath} if self is a link self otherwise.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L960'>siblingExtension</a>(ext)</tt>	Attempt to return a path with my name given the extension at c{ext}.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L974'>linkTo</a>(linkFilePath)</tt>	Creates a symlink to self to at the path in the l{filepath} c{linkfilepath}.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L990'>open</a>(mode)</tt>	Open this file using c{mode} or for writing if c{alwayscreate} is c{true}.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1016'>restat</a>(reraise)</tt>	Re-calculate cached effects of 'stat' to refresh information on this.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1036'>changed</a>()</tt>	Clear any cached information about the state of this path on disk.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1045'>chmod</a>(mode)</tt>	Changes the permissions on self if possible propagates errors from.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1057'>getsize</a>()</tt>	Retrieve the size of this file in bytes.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1072'>getModificationTime</a>()</tt>	Retrieve the time of last access from this file.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1086'>getStatusChangeTime</a>()</tt>	Retrieve the time of the last status change for this file.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1100'>getAccessTime</a>()</tt>	Retrieve the time that this file was last accessed.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1114'>getInodeNumber</a>()</tt>	Retrieve the file serial number also called inode number which distinguishes this file from all other files on the same device.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1135'>getDevice</a>()</tt>	Retrieves the device containing the file the inode number and device.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1159'>getNumberOfHardLinks</a>()</tt>	Retrieves the number of hard links to the file.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1185'>getUserID</a>()</tt>	Returns the user id of the file's owner.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1205'>getGroupID</a>()</tt>	Returns the group id of the file.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1225'>getPermissions</a>()</tt>	Returns the permissions of the file should also work on windows.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1241'>exists</a>()</tt>	Check if this l{filepath} exists.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1259'>isdir</a>()</tt>	Check if this l{filepath} refers to a directory.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1276'>isfile</a>()</tt>	Check if this file path refers to a regular file.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1293'>isBlockDevice</a>()</tt>	Returns whether the underlying path is a block device.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1310'>isSocket</a>()</tt>	Returns whether the underlying path is a socket.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1327'>islink</a>()</tt>	Check if this l{filepath} points to a symbolic link.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1342'>isabs</a>()</tt>	Check if this l{filepath} refers to an absolute path.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1354'>listdir</a>()</tt>	List the base names of the direct children of this l{filepath}.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1369'>splitext</a>()</tt>	Split the file path into a pair c{ root ext } such that c{root + ext == path}.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1385'>touch</a>()</tt>	Updates the access and last modification times of the file at this file path to the current time.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1401'>remove</a>()</tt>	Removes the file or directory that is represented by self if.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1416'>makedirs</a>(ignoreExistingDirectory)</tt>	Create all directories not yet existing in c{path} segments using l{os.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1437'>globChildren</a>(pattern)</tt>	Assuming i am representing a directory return a list of filepaths representing my children that match the given pattern.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1457'>basename</a>()</tt>	Retrieve the final component of the file path's path everything after the final path separator.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1469'>dirname</a>()</tt>	Retrieve all of the components of the l{filepath}'s path except the last one everything up to the final path separator.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1481'>parent</a>()</tt>	A file path for the directory containing the file at this file path.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1492'>setContent</a>(content,ext)</tt>	Replace the file at this path with a new file that contains the given bytes trying to avoid data-loss in the meanwhile.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1551'>createDirectory</a>()</tt>	Create the directory the l{filepath} refers to.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1562'>requireCreate</a>(val)</tt>	Sets the c{alwayscreate} variable.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1575'>create</a>()</tt>	Exclusively create a file only if this file previously did not exist.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1590'>temporarySibling</a>(extension)</tt>	Construct a path referring to a sibling of this path.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1617'>copyTo</a>(destination,followLinks)</tt>	Copies self to destination.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1690'>moveTo</a>(destination,followLinks)</tt>	Move self to destination - basically renaming self to whatever destination is named.
<tt style='background-color:#E8E8E8;'> python.FilePath <a href=' /python/filepath.py#L1737'>statinfo</a>(value)</tt>	Filepath statinfo is deprecated.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/hook.py#L43'>addPre</a>(klass,name,func)</tt>	Hook addpre klass name func -> none.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/hook.py#L51'>addPost</a>(klass,name,func)</tt>	Hook addpost klass name func -> none.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/hook.py#L58'>removePre</a>(klass,name,func)</tt>	Hook removepre klass name func -> none.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/hook.py#L67'>removePost</a>(klass,name,func)</tt>	Hook removepre klass name func -> none.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/hook.py#L97'>_XXX</a>(k,n,s)</tt>	String manipulation garbage.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/hook.py#L104'>PRE</a>(k,n)</tt>	Private munging to turn a method name into a pre-hook-method-name.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/hook.py#L108'>POST</a>(k,n)</tt>	Private munging to turn a method name into a post-hook-method-name.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/hook.py#L112'>ORIG</a>(k,n)</tt>	Private munging to turn a method name into an original' identifier.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/components.py#L89'>_addHook</a>(klass,name,phase,func)</tt>	Private adds a hook to a method on a class.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/components.py#L109'>_removeHook</a>(klass,name,phase,func)</tt>	Private removes a hook from a method on a class.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/hook.py#L143'>_enhook</a>(klass,name)</tt>	Private causes a certain method name to be hooked on a class.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/hook.py#L168'>_dehook</a>(klass,name)</tt>	Private causes a certain method name no longer to be hooked on a class.
<tt style='background-color:#E8E8E8;'> python.InsensitiveDict <a href=' /python/util.py#L48'>__init__</a>(dict,preserve)</tt>	Create an empty dictionary or update from 'dict'.
<tt style='background-color:#E8E8E8;'> python.InsensitiveDict <a href=' /python/util.py#L70'>__getitem__</a>(key)</tt>	Retrieve the value associated with 'key' in any case.
<tt style='background-color:#E8E8E8;'> python.InsensitiveDict <a href=' /python/util.py#L78'>__setitem__</a>(key,value)</tt>	Associate 'value' with 'key' if 'key' already exists but.
<tt style='background-color:#E8E8E8;'> python.InsensitiveDict <a href=' /python/util.py#L87'>has_key</a>(key)</tt>	Case insensitive test whether 'key' exists.
<tt style='background-color:#E8E8E8;'> python.InsensitiveDict <a href=' /python/util.py#L105'>keys</a>()</tt>	List of keys in their original case.
<tt style='background-color:#E8E8E8;'> python.InsensitiveDict <a href=' /python/util.py#L112'>values</a>()</tt>	List of values.
<tt style='background-color:#E8E8E8;'> python.InsensitiveDict <a href=' /python/util.py#L119'>items</a>()</tt>	List of key value pairs.
<tt style='background-color:#E8E8E8;'> python.InsensitiveDict <a href=' /python/util.py#L126'>get</a>(key,default)</tt>	Retrieve value associated with 'key' or return default value if 'key' doesn't exist.
<tt style='background-color:#E8E8E8;'> python.InsensitiveDict <a href=' /python/util.py#L137'>setdefault</a>(key,default)</tt>	If 'key' doesn't exist associate it with the 'default' value.
<tt style='background-color:#E8E8E8;'> python.InsensitiveDict <a href=' /python/util.py#L147'>update</a>(dict)</tt>	Copy key value pairs from 'dict'.
<tt style='background-color:#E8E8E8;'> python.InsensitiveDict <a href=' /python/util.py#L155'>__repr__</a>()</tt>	String representation of the dictionary.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L205'>uniquify</a>(lst)</tt>	Make the elements of a list unique by inserting them into a dictionary.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L220'>padTo</a>(n,seq,default)</tt>	Pads a sequence out to n elements filling in with a default value if it is not long enough.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L266'>sibpath</a>(path,sibling)</tt>	Return the path to a sibling of a file in the filesystem.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L278'>_getpass</a>(prompt)</tt>	Helper to turn ioerrors into keyboardinterrupts.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L294'>getPassword</a>(prompt,confirm,forceTTY,confirmPrompt)</tt>	Obtain a password by prompting or from stdin.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L358'>makeStatBar</a>(width,maxPosition,doneChar,undoneChar)</tt>	Creates a function that will return a string representing a progress bar.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L387'>spewer</a>(frame,s,ignored)</tt>	A trace function for sys settrace that prints every function or method call.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L408'>searchupwards</a>(start,files,dirs)</tt>	Walk upwards from start looking for a directory containing all files and directories given as arguments :.
<tt style='background-color:#E8E8E8;'> python.LineLog <a href=' /python/util.py#L445'>__init__</a>(size)</tt>	Create a new log with size lines of storage default 10.
<tt style='background-color:#E8E8E8;'> python.LineLog <a href=' /python/util.py#L480'>clear</a>()</tt>	Empty the log.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L488'>raises</a>(exception,f)</tt>	Determine whether the given call raises the given exception.
<tt style='background-color:#E8E8E8;'> python.IntervalDifferential <a href=' /python/util.py#L519'>__init__</a>(intervals,default)</tt>	@type intervals c{list} of c{int}, c{long}, or c{float} param @param intervals the intervals between instants.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L685'>switchUID</a>(uid,gid,euid)</tt>	Attempts to switch the uid/euid and gid/egid for the current process.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L798'>untilConcludes</a>(f)</tt>	Call c{f} with the given arguments handling c{eintr} by retrying.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L823'>mergeFunctionMetadata</a>(f,g)</tt>	Overwrite c{g}'s name and docstring with values from c{f} update.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L851'>nameToLabel</a>(mname)</tt>	Convert a string like a variable name into a slightly more human-friendly string with spaces and capitalized letters.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L898'>uidFromString</a>(uidString)</tt>	Convert a user identifier as a string into an integer uid.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L921'>gidFromString</a>(gidString)</tt>	Convert a group identifier as a string into an integer gid.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L944'>runAsEffectiveUser</a>(euid,egid,function)</tt>	Run the given function wrapped with seteuid/setegid calls.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/util.py#L985'>runWithWarningsSuppressed</a>(suppressedWarnings,f)</tt>	Run c{f(*args **kwargs)}, but with some warnings suppressed.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_setup.py#L204'>getSetupArgs</a>(extensions)</tt>	@return the keyword arguments to be used the the setup method.
<tt style='background-color:#E8E8E8;'> python.build_ext_twisted <a href=' /python/_setup.py#L279'>prepare_extensions</a>()</tt>	Prepare the c{self extensions} attribute (used by.
<tt style='background-color:#E8E8E8;'> python.build_ext_twisted <a href=' /python/_setup.py#L310'>build_extensions</a>()</tt>	Check to see which extension modules to build and then build them.
<tt style='background-color:#E8E8E8;'> python.build_ext_twisted <a href=' /python/_setup.py#L341'>_check_header</a>(header_name)</tt>	Check if the given header can be included by trying to compile a file that contains only an #include line.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_setup.py#L351'>_checkCPython</a>(sys,platform)</tt>	Checks if this implementation is cpython.
<tt style='background-color:#E8E8E8;'> python.ListenFDs <a href=' /python/systemd.py#L37'>__init__</a>(descriptors)</tt>	@param descriptors the descriptors which will be returned from calls to c{inheriteddescriptors}.
<tt style='background-color:#E8E8E8;'> python.ListenFDs <a href=' /python/systemd.py#L45'>fromEnvironment</a>(cls,environ,start)</tt>	@param environ a dictionary-like object to inspect to discover inherited descriptors.
<tt style='background-color:#E8E8E8;'> python.ListenFDs <a href=' /python/systemd.py#L85'>inheritedDescriptors</a>()</tt>	@return the configured list of descriptors.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/modules.py#L89'>_isPythonIdentifier</a>(string)</tt>	Cheezy fake test for proper identifier-ness.
<tt style='background-color:#E8E8E8;'> python._ModuleIteratorHelper <a href=' /python/modules.py#L120'>iterModules</a>()</tt>	Loop over the modules present below this entry or package on pythonpath.
<tt style='background-color:#E8E8E8;'> python._ModuleIteratorHelper <a href=' /python/modules.py#L176'>walkModules</a>(importPackages)</tt>	Similar to l{itermodules}, this yields self and then every module in my package or entry and every submodule in each package or entry.
<tt style='background-color:#E8E8E8;'> python._ModuleIteratorHelper <a href=' /python/modules.py#L188'>_subModuleName</a>(mn)</tt>	This is a hook to provide packages with the ability to specify their names as a prefix to submodules here.
<tt style='background-color:#E8E8E8;'> python._ModuleIteratorHelper <a href=' /python/modules.py#L195'>_packagePaths</a>()</tt>	Implement in subclasses to specify where to look for modules.
<tt style='background-color:#E8E8E8;'> python._ModuleIteratorHelper <a href=' /python/modules.py#L203'>_getEntry</a>()</tt>	Implement in subclasses to specify what path entry submodules will come from.
<tt style='background-color:#E8E8E8;'> python._ModuleIteratorHelper <a href=' /python/modules.py#L213'>__getitem__</a>(modname)</tt>	Retrieve a module from below this path or package.
<tt style='background-color:#E8E8E8;'> python._ModuleIteratorHelper <a href=' /python/modules.py#L235'>__iter__</a>()</tt>	Implemented to raise notimplementederror for clarity so that attempting to loop over this object won't call __getitem__.
<tt style='background-color:#E8E8E8;'> python.PythonAttribute <a href=' /python/modules.py#L258'>__init__</a>(name,onObject,loaded,pythonValue)</tt>	Create a pythonattribute this is a private constructor do not construct.
<tt style='background-color:#E8E8E8;'> python.PythonAttribute <a href=' /python/modules.py#L276'>isLoaded</a>()</tt>	Return a boolean describing whether the attribute this describes has actually been loaded into memory by importing its module.
<tt style='background-color:#E8E8E8;'> python.PythonAttribute <a href=' /python/modules.py#L286'>load</a>(default)</tt>	Load the value associated with this attribute.
<tt style='background-color:#E8E8E8;'> python.PythonModule <a href=' /python/modules.py#L312'>__init__</a>(name,filePath,pathEntry)</tt>	Create a pythonmodule do not construct this directly instead inspect a.
<tt style='background-color:#E8E8E8;'> python.PythonModule <a href=' /python/modules.py#L331'>__repr__</a>()</tt>	Return a string representation including the module name.
<tt style='background-color:#E8E8E8;'> python.PythonModule <a href=' /python/modules.py#L338'>isLoaded</a>()</tt>	Determine if the module is loaded into sys modules.
<tt style='background-color:#E8E8E8;'> python.PythonModule <a href=' /python/modules.py#L347'>iterAttributes</a>()</tt>	List all the attributes defined in this module.
<tt style='background-color:#E8E8E8;'> python.PythonModule <a href=' /python/modules.py#L367'>isPackage</a>()</tt>	Returns true if this module is also a package and might yield something from itermodules.
<tt style='background-color:#E8E8E8;'> python.PythonModule <a href=' /python/modules.py#L374'>load</a>(default)</tt>	Load this module.
<tt style='background-color:#E8E8E8;'> python.PythonModule <a href=' /python/modules.py#L398'>__eq__</a>(other)</tt>	Pythonmodules with the same name are equal.
<tt style='background-color:#E8E8E8;'> python.PythonModule <a href=' /python/modules.py#L406'>__ne__</a>(other)</tt>	Pythonmodules with different names are not equal.
<tt style='background-color:#E8E8E8;'> python.PythonModule <a href=' /python/modules.py#L419'>_subModuleName</a>(mn)</tt>	Submodules of this module are prefixed with our name.
<tt style='background-color:#E8E8E8;'> python.PythonModule <a href=' /python/modules.py#L425'>_packagePaths</a>()</tt>	Yield a sequence of filepath-like objects which represent path segments.
<tt style='background-color:#E8E8E8;'> python.PathEntry <a href=' /python/modules.py#L456'>__init__</a>(filePath,pythonPath)</tt>	Create a pathentry this is a private constructor.
<tt style='background-color:#E8E8E8;'> python.IPathImportMapper <a href=' /python/modules.py#L477'>mapPath</a>(pathLikeString)</tt>	Return a filepath-like object.
<tt style='background-color:#E8E8E8;'> python._ZipMapImpl <a href=' /python/modules.py#L504'>mapPath</a>(fsPathString)</tt>	Map the given fs path to a zippath by looking at the zipimporter's "archive" attribute and using it as our ziparchive root then walking.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/modules.py#L531'>_defaultSysPathFactory</a>()</tt>	Provide the default behavior of pythonpath's sys path factory which is to.
<tt style='background-color:#E8E8E8;'> python.PythonPath <a href=' /python/modules.py#L561'>__init__</a>(sysPath,moduleDict,sysPathHooks,importerCache)</tt>	Create a pythonpath you almost certainly want to use.
<tt style='background-color:#E8E8E8;'> python.PythonPath <a href=' /python/modules.py#L618'>_getSysPath</a>()</tt>	Retrieve the current value of the module search path list.
<tt style='background-color:#E8E8E8;'> python.PythonPath <a href=' /python/modules.py#L626'>_findEntryPathString</a>(modobj)</tt>	Determine where a given python module object came from by looking at path entries.
<tt style='background-color:#E8E8E8;'> python.PythonPath <a href=' /python/modules.py#L658'>_smartPath</a>(pathName)</tt>	Given a path entry from sys path which may refer to an importer.
<tt style='background-color:#E8E8E8;'> python.PythonPath <a href=' /python/modules.py#L678'>iterEntries</a>()</tt>	Iterate the entries on my syspath.
<tt style='background-color:#E8E8E8;'> python.PythonPath <a href=' /python/modules.py#L689'>__getitem__</a>(modname)</tt>	Get a python module by its given fully-qualified name.
<tt style='background-color:#E8E8E8;'> python.PythonPath <a href=' /python/modules.py#L729'>__contains__</a>(module)</tt>	Check to see whether or not a module exists on my import path.
<tt style='background-color:#E8E8E8;'> python.PythonPath <a href=' /python/modules.py#L743'>__repr__</a>()</tt>	Display my syspath and moduledict in a string representation.
<tt style='background-color:#E8E8E8;'> python.PythonPath <a href=' /python/modules.py#L749'>iterModules</a>()</tt>	Yield all top-level modules on my syspath.
<tt style='background-color:#E8E8E8;'> python.PythonPath <a href=' /python/modules.py#L757'>walkModules</a>(importPackages)</tt>	Similar to l{itermodules}, this yields every module on the path then every submodule in each package or entry.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/modules.py#L768'>walkModules</a>(importPackages)</tt>	Deeply iterate all modules on the global python path.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/modules.py#L776'>iterModules</a>()</tt>	Iterate all modules and top-level packages on the global python path but do not descend into packages.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/modules.py#L785'>getModule</a>(moduleName)</tt>	Retrieve a module from the system path.
<tt style='background-color:#E8E8E8;'> python.Sensitive <a href=' /python/rebuild.py#L43'>latestVersionOf</a>(anObject)</tt>	Get the latest version of an object.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/rebuild.py#L70'>latestFunction</a>(oldFunc)</tt>	Get the latest version of a function.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/rebuild.py#L83'>latestClass</a>(oldClass)</tt>	Get the latest version of a class.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/rebuild.py#L109'>updateInstance</a>()</tt>	Updates an instance to be current.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/rebuild.py#L122'>__getattr__</a>(name)</tt>	A getattr method to cause a class to be refreshed.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/rebuild.py#L134'>rebuild</a>(module,doLog)</tt>	Reload a module and do as much as possible to replace its references.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_url.py#L36'>_minimalPercentEncode</a>(text,safe)</tt>	Percent-encode only the characters that are syntactically necessary for serialization preserving any iri-style textual data.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_url.py#L56'>_maximalPercentEncode</a>(text,safe)</tt>	Percent-encode everything required to convert a portion of an iri to a portion of a uri.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_url.py#L79'>_percentDecode</a>(text)</tt>	Replace percent-encoded characters with their utf-8 equivalents.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_url.py#L101'>_resolveDotSegments</a>(path)</tt>	Normalise the url path by resolving segments of ' ' and ' '.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_url.py#L132'>_optional</a>(argument,default)</tt>	If the given value is c{_unspecified}, return c{default}; otherwise return c{argument}.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_url.py#L155'>_typecheck</a>(name,value)</tt>	Check that the given c{value} is of the given c{type}, or raise an exception describing the problem using c{name}.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L276'>__init__</a>(scheme,host,path,query)</tt>	Create a new l{url} from structured information about itself.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L359'>user</a>()</tt>	The user portion of c{userinfo}; everything up to the first c{":"}.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L367'>authority</a>(includeSecrets)</tt>	Compute and return the appropriate host/port/userinfo combination.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L392'>__eq__</a>(other)</tt>	L{url}s are equal to l{url} objects whose attributes are equal.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L405'>__ne__</a>(other)</tt>	L{url}s are unequal to l{url} objects whose attributes are unequal.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L414'>absolute</a>()</tt>	Is this url complete enough to resolve a resource without resolution.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L423'>replace</a>(scheme,host,path,query)</tt>	Make a new instance of c{self __class__}, passing along the given.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L478'>fromText</a>(cls,s)</tt>	Parse the given string into a url object.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L524'>child</a>()</tt>	Construct a l{url} where the given path segments are a child of this url presering the query and fragment.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L548'>sibling</a>(segment)</tt>	Construct a url where the given path segment is a sibling of this url.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L562'>click</a>(href)</tt>	Resolve the given uri reference relative to this base uri.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L611'>asURI</a>()</tt>	Convert a l{url} object that potentially contains non-ascii characters into a l{url} object where all non-ascii text has been encoded.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L640'>asIRI</a>()</tt>	Convert a l{url} object that potentially contains text that has been percent-encoded or idna encoded into a l{url} object containing the.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L675'>asText</a>(includeSecrets)</tt>	Convert this url to its canonical textual representation.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L706'>__repr__</a>()</tt>	Convert this url to an c{eval}-able representation that shows all of its constituent parts.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L714'>add</a>(name,value)</tt>	Create a new l{url} with a given query argument c{name}, added to it with the value c{value}, like so :.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L737'>set</a>(name,value)</tt>	Create a new l{url} with all existing occurrences of the query argument c{name}, if any removed then add the argument with the given value.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L766'>get</a>(name)</tt>	Retrieve a list of values for the given named query parameter.
<tt style='background-color:#E8E8E8;'> python.URL <a href=' /python/_url.py#L782'>remove</a>(name)</tt>	Create a new l{url} with all query arguments with the given name removed.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_appdirs.py#L17'>getDataDirectory</a>(moduleName)</tt>	Get a data directory for the caller function or c{modulename} if given.
<tt style='background-color:#E8E8E8;'> python._Attribute <a href=' /python/_textattributes.py#L60'>serialize</a>(write,attrs,attributeRenderer)</tt>	Serialize the text attribute and its children.
<tt style='background-color:#E8E8E8;'> python.DefaultFormattingState <a href=' /python/_textattributes.py#L224'>copy</a>()</tt>	Make a copy of this formatting state.
<tt style='background-color:#E8E8E8;'> python.DefaultFormattingState <a href=' /python/_textattributes.py#L233'>_withAttribute</a>(name,value)</tt>	Add a character attribute to a copy of this formatting state.
<tt style='background-color:#E8E8E8;'> python.DefaultFormattingState <a href=' /python/_textattributes.py#L246'>toVT102</a>()</tt>	Emit a vt102 control sequence that will set up all the attributes this formatting state has set.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_textattributes.py#L279'>flatten</a>(output,attrs,attributeRenderer)</tt>	Serialize a sequence of characters with attribute information the resulting string can be interpreted by compatible software so that the.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_shellcomp.py#L34'>shellComplete</a>(config,cmdName,words,shellCompFile)</tt>	Perform shell completion.
<tt style='background-color:#E8E8E8;'> python.ZshBuilder <a href=' /python/_shellcomp.py#L162'>write</a>(genSubs)</tt>	Generate the completion function and write it to the output file @return l{none}.
<tt style='background-color:#E8E8E8;'> python.ZshSubcommandBuilder <a href=' /python/_shellcomp.py#L204'>write</a>()</tt>	Generate the completion function and write it to the output file.
<tt style='background-color:#E8E8E8;'> python.ZshArgumentsGenerator <a href=' /python/_shellcomp.py#L338'>write</a>()</tt>	Write the zsh completion code to the file given to __init__.
<tt style='background-color:#E8E8E8;'> python.ZshArgumentsGenerator <a href=' /python/_shellcomp.py#L349'>writeHeader</a>()</tt>	This is the start of the code that calls _arguments.
<tt style='background-color:#E8E8E8;'> python.ZshArgumentsGenerator <a href=' /python/_shellcomp.py#L359'>writeOptions</a>()</tt>	Write out zsh code for each option in this command.
<tt style='background-color:#E8E8E8;'> python.ZshArgumentsGenerator <a href=' /python/_shellcomp.py#L370'>writeExtras</a>()</tt>	Write out completion information for extra arguments appearing on the command-line.
<tt style='background-color:#E8E8E8;'> python.ZshArgumentsGenerator <a href=' /python/_shellcomp.py#L392'>writeFooter</a>()</tt>	Write the last bit of code that finishes the call to _arguments.
<tt style='background-color:#E8E8E8;'> python.ZshArgumentsGenerator <a href=' /python/_shellcomp.py#L400'>verifyZshNames</a>()</tt>	Ensure that none of the option names given in the metadata are typoed @return l{none}.
<tt style='background-color:#E8E8E8;'> python.ZshArgumentsGenerator <a href=' /python/_shellcomp.py#L422'>excludeStr</a>(longname,buildShort)</tt>	Generate an "exclusion string" for the given option @type longname c{str}.
<tt style='background-color:#E8E8E8;'> python.ZshArgumentsGenerator <a href=' /python/_shellcomp.py#L465'>makeExcludesDict</a>()</tt>	@return a c{dict} that maps each option name appearing in self.
<tt style='background-color:#E8E8E8;'> python.ZshArgumentsGenerator <a href=' /python/_shellcomp.py#L493'>writeOpt</a>(longname)</tt>	Write out the zsh code for the given argument this is just part of the.
<tt style='background-color:#E8E8E8;'> python.ZshArgumentsGenerator <a href=' /python/_shellcomp.py#L540'>getAction</a>(longname)</tt>	Return a zsh "action" string for the given argument.
<tt style='background-color:#E8E8E8;'> python.ZshArgumentsGenerator <a href=' /python/_shellcomp.py#L557'>getDescription</a>(longname)</tt>	Return the description to be used for this argument.
<tt style='background-color:#E8E8E8;'> python.ZshArgumentsGenerator <a href=' /python/_shellcomp.py#L589'>getShortOption</a>(longname)</tt>	Return the short option letter or none.
<tt style='background-color:#E8E8E8;'> python.ZshArgumentsGenerator <a href=' /python/_shellcomp.py#L598'>addAdditionalOptions</a>()</tt>	Add additional options to the optflags and optparams lists.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_shellcomp.py#L639'>descrFromDoc</a>(obj)</tt>	Generate an appropriate description from docstring of the given object.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_shellcomp.py#L652'>escape</a>(x)</tt>	Shell escape the given string implementation borrowed from now-deprecated commands.
<tt style='background-color:#E8E8E8;'> python.CoerceParameter <a href=' /python/usage.py#L41'>__init__</a>(options,coerce)</tt>	@param options parent options object @param coerce callable used to coerce the value.
<tt style='background-color:#E8E8E8;'> python.CoerceParameter <a href=' /python/usage.py#L50'>dispatch</a>(parameterName,value)</tt>	When called in dispatch do the coerce for c{value} and save the returned value.
<tt style='background-color:#E8E8E8;'> python.Options <a href=' /python/usage.py#L194'>opt_help</a>()</tt>	Display this help and exit.
<tt style='background-color:#E8E8E8;'> python.Options <a href=' /python/usage.py#L201'>opt_version</a>()</tt>	Display twisted version and exit.
<tt style='background-color:#E8E8E8;'> python.Options <a href=' /python/usage.py#L211'>parseOptions</a>(options)</tt>	The guts of the command-line parser.
<tt style='background-color:#E8E8E8;'> python.Options <a href=' /python/usage.py#L279'>postOptions</a>()</tt>	I am called after the options are parsed.
<tt style='background-color:#E8E8E8;'> python.Options <a href=' /python/usage.py#L288'>parseArgs</a>()</tt>	I am called with any leftover arguments which were not options.
<tt style='background-color:#E8E8E8;'> python.Options <a href=' /python/usage.py#L310'>_gather_flags</a>()</tt>	Gather up boolean flag options.
<tt style='background-color:#E8E8E8;'> python.Options <a href=' /python/usage.py#L337'>_gather_parameters</a>()</tt>	Gather options which take a value.
<tt style='background-color:#E8E8E8;'> python.Options <a href=' /python/usage.py#L371'>_gather_handlers</a>()</tt>	Gather up options with their own handler methods.
<tt style='background-color:#E8E8E8;'> python.Options <a href=' /python/usage.py#L449'>getSynopsis</a>()</tt>	Returns a string containing a description of these options and how to pass them to the executed file.
<tt style='background-color:#E8E8E8;'> python.Completer <a href=' /python/usage.py#L564'>__init__</a>(descr,repeat)</tt>	@type descr c{str} @param descr an optional descriptive string displayed above matches.
<tt style='background-color:#E8E8E8;'> python.Completer <a href=' /python/usage.py#L597'>_shellCode</a>(optName,shellType)</tt>	Fetch a fragment of shell code representing this action which is suitable for use by the completion system in _shellcomp.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/usage.py#L856'>docMakeChunks</a>(optList,width)</tt>	Makes doc chunks for option declarations.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/usage.py#L950'>flagFunction</a>(method,name)</tt>	Determine whether a function is an optional handler for a i{flag} or an i{option}.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/usage.py#L989'>portCoerce</a>(value)</tt>	Coerce a string value to an int port number and checks the validity.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_oldstyle.py#L18'>_replaceIf</a>(condition,alternative)</tt>	If c{condition}, replace this function with c{alternative}.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_oldstyle.py#L49'>passthru</a>(arg)</tt>	Return c{arg} do nothing.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_oldstyle.py#L61'>_ensureOldClass</a>(cls)</tt>	Ensure that c{cls} is an old-style class.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_oldstyle.py#L83'>_oldStyle</a>(cls)</tt>	A decorator which conditionally converts old-style classes to new-style classes.
<tt style='background-color:#E8E8E8;'> python.ThreadPool <a href=' /python/threadpool.py#L54'>__init__</a>(minthreads,maxthreads,name)</tt>	Create a new threadpool.
<tt style='background-color:#E8E8E8;'> python.ThreadPool <a href=' /python/threadpool.py#L87'>workers</a>()</tt>	For legacy compatibility purposes return a total number of workers.
<tt style='background-color:#E8E8E8;'> python.ThreadPool <a href=' /python/threadpool.py#L100'>working</a>()</tt>	For legacy compatibility purposes return the number of busy workers as expressed by a list the length of that number.
<tt style='background-color:#E8E8E8;'> python.ThreadPool <a href=' /python/threadpool.py#L112'>waiters</a>()</tt>	For legacy compatibility purposes return the number of idle workers as expressed by a list the length of that number.
<tt style='background-color:#E8E8E8;'> python.ThreadPool <a href=' /python/threadpool.py#L125'>_queue</a>()</tt>	For legacy compatibility purposes return an object with a c{qsize} method that indicates the amount of work not yet allocated to a worker.
<tt style='background-color:#E8E8E8;'> python.ThreadPool <a href=' /python/threadpool.py#L150'>start</a>()</tt>	Start the threadpool.
<tt style='background-color:#E8E8E8;'> python.ThreadPool <a href=' /python/threadpool.py#L163'>startAWorker</a>()</tt>	Increase the number of available workers for the thread pool by 1 up to the maximum allowed by l{threadpool.
<tt style='background-color:#E8E8E8;'> python.ThreadPool <a href=' /python/threadpool.py#L171'>_generateName</a>()</tt>	Generate a name for a new pool thread.
<tt style='background-color:#E8E8E8;'> python.ThreadPool <a href=' /python/threadpool.py#L181'>stopAWorker</a>()</tt>	Decrease the number of available workers by 1 by quitting one as soon as it's idle.
<tt style='background-color:#E8E8E8;'> python.ThreadPool <a href=' /python/threadpool.py#L201'>callInThread</a>(func)</tt>	Call a callable object in a separate thread.
<tt style='background-color:#E8E8E8;'> python.ThreadPool <a href=' /python/threadpool.py#L214'>callInThreadWithCallback</a>(onResult,func)</tt>	Call a callable object in a separate thread and call c{onresult} with the return value or a l{twisted.
<tt style='background-color:#E8E8E8;'> python.ThreadPool <a href=' /python/threadpool.py#L272'>stop</a>()</tt>	Shutdown the threads in the threadpool.
<tt style='background-color:#E8E8E8;'> python.ThreadPool <a href=' /python/threadpool.py#L283'>adjustPoolsize</a>(minthreads,maxthreads)</tt>	Adjust the number of available threads by setting c{min} and c{max} to new values.
<tt style='background-color:#E8E8E8;'> python.ThreadPool <a href=' /python/threadpool.py#L313'>dumpStats</a>()</tt>	Dump some plain-text informational messages to the log about the state of this l{threadpool}.
<tt style='background-color:#E8E8E8;'> python.MonkeyPatcher <a href=' /python/monkey.py#L25'>addPatch</a>(obj,name,value)</tt>	Add a patch so that the attribute c{name} on c{obj} will be assigned to c{value} when c{patch} is called or during c{runwithpatches}.
<tt style='background-color:#E8E8E8;'> python.MonkeyPatcher <a href=' /python/monkey.py#L35'>_alreadyPatched</a>(obj,name)</tt>	Has the c{name} attribute of c{obj} already been patched by this.
<tt style='background-color:#E8E8E8;'> python.MonkeyPatcher <a href=' /python/monkey.py#L46'>patch</a>()</tt>	Apply all of the patches that have been specified with l{addpatch}.
<tt style='background-color:#E8E8E8;'> python.MonkeyPatcher <a href=' /python/monkey.py#L57'>restore</a>()</tt>	Restore all original values to any patched objects.
<tt style='background-color:#E8E8E8;'> python.MonkeyPatcher <a href=' /python/monkey.py#L66'>runWithPatches</a>(f)</tt>	Apply each patch already specified then run the function f with the.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_inotify.py#L24'>init</a>()</tt>	Create an inotify instance and return the associated file descriptor.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_inotify.py#L35'>add</a>(fd,path,mask)</tt>	Add a watch for the given path to the inotify file descriptor and return the watch descriptor.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_inotify.py#L56'>remove</a>(fd,wd)</tt>	Remove the given watch descriptor from the inotify file descriptor.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_inotify.py#L84'>initializeModule</a>(libc)</tt>	Initialize the module checking if the expected apis exist and setting the argtypes and restype for c{inotify_init}, c{inotify_add_watch}, and.
<tt style='background-color:#E8E8E8;'> python.RandomFactory <a href=' /python/randbytes.py#L53'>_osUrandom</a>(nbytes)</tt>	Wrapper around c{os urandom} that cleanly manage its absence.
<tt style='background-color:#E8E8E8;'> python.RandomFactory <a href=' /python/randbytes.py#L63'>secureRandom</a>(nbytes,fallback)</tt>	Return a number of secure random bytes.
<tt style='background-color:#E8E8E8;'> python.RandomFactory <a href=' /python/randbytes.py#L92'>_randBits</a>(nbytes)</tt>	Wrapper around c{os getrandbits}.
<tt style='background-color:#E8E8E8;'> python.RandomFactory <a href=' /python/randbytes.py#L123'>insecureRandom</a>(nbytes)</tt>	Return a number of non secure random bytes.
<tt style='background-color:#E8E8E8;'> python.Argument <a href=' /python/formmethod.py#L65'>coerce</a>(val)</tt>	Convert the value to the correct format.
<tt style='background-color:#E8E8E8;'> python.Date <a href=' /python/formmethod.py#L294'>coerce</a>(args)</tt>	Return tuple of ints year month day.
<tt style='background-color:#E8E8E8;'> python.FixedOffsetTimeZone <a href=' /python/_tzhelper.py#L29'>__init__</a>(offset,name)</tt>	Construct a l{fixedoffsettimezone} with a fixed offset.
<tt style='background-color:#E8E8E8;'> python.FixedOffsetTimeZone <a href=' /python/_tzhelper.py#L43'>fromSignHoursMinutes</a>(cls,sign,hours,minutes)</tt>	Construct a l{fixedoffsettimezone} from an offset described by sign ('+' or '-'), hours and minutes.
<tt style='background-color:#E8E8E8;'> python.FixedOffsetTimeZone <a href=' /python/_tzhelper.py#L73'>fromLocalTimeStamp</a>(cls,timeStamp)</tt>	Create a time zone with a fixed offset corresponding to a time stamp in the system's locally configured time zone.
<tt style='background-color:#E8E8E8;'> python.FixedOffsetTimeZone <a href=' /python/_tzhelper.py#L92'>utcoffset</a>(dt)</tt>	Return this timezone's offset from utc.
<tt style='background-color:#E8E8E8;'> python.FixedOffsetTimeZone <a href=' /python/_tzhelper.py#L99'>dst</a>(dt)</tt>	Return a zero c{datetime timedelta} for the daylight saving time.
<tt style='background-color:#E8E8E8;'> python.FixedOffsetTimeZone <a href=' /python/_tzhelper.py#L107'>tzname</a>(dt)</tt>	Return a string describing this timezone.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/procutils.py#L13'>which</a>(name,flags)</tt>	Search path for executable files with the given name.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/shortcut.py#L15'>open</a>(filename)</tt>	Open an existing shortcut for reading.
<tt style='background-color:#E8E8E8;'> python.Shortcut <a href=' /python/shortcut.py#L61'>load</a>(filename)</tt>	Read a shortcut file from disk.
<tt style='background-color:#E8E8E8;'> python.Shortcut <a href=' /python/shortcut.py#L65'>save</a>(filename)</tt>	Write the shortcut to disk.
<tt style='background-color:#E8E8E8;'> python.FilesystemLock <a href=' /python/lockfile.py#L147'>lock</a>()</tt>	Acquire this lock.
<tt style='background-color:#E8E8E8;'> python.FilesystemLock <a href=' /python/lockfile.py#L209'>unlock</a>()</tt>	Release this lock.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/lockfile.py#L227'>isLocked</a>(name)</tt>	Determine if the lock of the given name is held or not.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/components.py#L50'>registerAdapter</a>(adapterFactory,origInterface)</tt>	Register an adapter class.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/components.py#L74'>getAdapterFactory</a>(fromInterface,toInterface,default)</tt>	Return registered adapter for a given class and interface.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/components.py#L89'>_addHook</a>(registry)</tt>	Add an adapter hook which will attempt to look up adapters in the given registry.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/components.py#L109'>_removeHook</a>(hook)</tt>	Remove a previously added adapter hook.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/components.py#L122'>getRegistry</a>()</tt>	Returns the twisted global c{zope.
<tt style='background-color:#E8E8E8;'> python.Adapter <a href=' /python/components.py#L154'>__init__</a>(original)</tt>	Set my 'original' attribute to be the object i am adapting.
<tt style='background-color:#E8E8E8;'> python.Adapter <a href=' /python/components.py#L159'>__conform__</a>(interface)</tt>	I forward __conform__ to self original if it has it otherwise i.
<tt style='background-color:#E8E8E8;'> python.Adapter <a href=' /python/components.py#L168'>isuper</a>(iface,adapter)</tt>	Forward isuper to self original.
<tt style='background-color:#E8E8E8;'> python.Componentized <a href=' /python/components.py#L196'>setAdapter</a>(interfaceClass,adapterClass)</tt>	Cache a provider for the given interface by adapting c{self} using the given adapter class.
<tt style='background-color:#E8E8E8;'> python.Componentized <a href=' /python/components.py#L203'>addAdapter</a>(adapterClass,ignoreClass)</tt>	Utility method that calls addcomponent i take an adapter class and.
<tt style='background-color:#E8E8E8;'> python.Componentized <a href=' /python/components.py#L213'>setComponent</a>(interfaceClass,component)</tt>	Cache a provider of the given interface.
<tt style='background-color:#E8E8E8;'> python.Componentized <a href=' /python/components.py#L219'>addComponent</a>(component,ignoreClass)</tt>	Add a component to me for all appropriate interfaces.
<tt style='background-color:#E8E8E8;'> python.Componentized <a href=' /python/components.py#L241'>unsetComponent</a>(interfaceClass)</tt>	Remove my component specified by the given interface class.
<tt style='background-color:#E8E8E8;'> python.Componentized <a href=' /python/components.py#L245'>removeComponent</a>(component)</tt>	Remove the given component from me entirely for all interfaces for which it has been registered.
<tt style='background-color:#E8E8E8;'> python.Componentized <a href=' /python/components.py#L259'>getComponent</a>(interface,default)</tt>	Create or retrieve an adapter for the given interface.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/components.py#L308'>proxyForInterface</a>(iface,originalAttribute)</tt>	Create a class which proxies all method calls which adhere to an interface to another provider of that interface.
<tt style='background-color:#E8E8E8;'> python._ProxiedClassMethod <a href=' /python/components.py#L365'>__call__</a>(oself)</tt>	Invoke the specified l{methodname} method of the c{original} attribute for proxyforinterface.
<tt style='background-color:#E8E8E8;'> python._ProxyDescriptor <a href=' /python/components.py#L399'>__get__</a>(oself,type)</tt>	Retrieve the c{self attributename} property from i{oself}.
<tt style='background-color:#E8E8E8;'> python._ProxyDescriptor <a href=' /python/components.py#L410'>__set__</a>(oself,value)</tt>	Set the c{self attributename} property of i{oself}.
<tt style='background-color:#E8E8E8;'> python._ProxyDescriptor <a href=' /python/components.py#L418'>__delete__</a>(oself)</tt>	Delete the c{self attributename} property of i{oself}.
<tt style='background-color:#E8E8E8;'> python.HeadRequest <a href=' /python/_pydoctor.py#L24'>get_method</a>()</tt>	Use the head http method.
<tt style='background-color:#E8E8E8;'> python.TwistedSphinxInventory <a href=' /python/_pydoctor.py#L41'>getLink</a>(name)</tt>	Resolve the full url for a cross reference.
<tt style='background-color:#E8E8E8;'> python.TwistedSphinxInventory <a href=' /python/_pydoctor.py#L108'>_getURLAsHEAD</a>(url)</tt>	Get are head response for url.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_pydoctor.py#L128'>getDeprecated</a>(decorators)</tt>	With a list of decorators and the object it is running on set the c{_deprecated_info} flag if any of the decorators are a twisted deprecation.
<tt style='background-color:#E8E8E8;'> python.TwistedModuleVisitor <a href=' /python/_pydoctor.py#L159'>visitClass</a>(node)</tt>	Called when a class is visited.
<tt style='background-color:#E8E8E8;'> python.TwistedModuleVisitor <a href=' /python/_pydoctor.py#L170'>visitFunction</a>(node)</tt>	Called when a class is visited.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_pydoctor.py#L183'>versionToUsefulObject</a>(version)</tt>	Change an ast c{version()} to a real one.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/_pydoctor.py#L193'>deprecatedToUsefulText</a>(name,deprecated)</tt>	Change a c{@deprecated} to a display string.
<tt style='background-color:#E8E8E8;'> python.TwistedSystem <a href=' /python/_pydoctor.py#L245'>privacyClass</a>(documentable)</tt>	Report the privacy level for an object.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/sendmsg.py#L27'>sendmsg</a>(socket,data,ancillary,flags)</tt>	Send a message on a socket.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/sendmsg.py#L54'>recvmsg</a>(socket,maxSize,cmsgSize,flags)</tt>	Receive a message on a socket.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/sendmsg.py#L94'>getSocketFamily</a>(socket)</tt>	Return the family of the given socket.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/win32.py#L49'>getProgramsMenuPath</a>()</tt>	Get the path to the programs menu.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/win32.py#L67'>getProgramFilesPath</a>()</tt>	Get the path to the program files folder.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/win32.py#L78'>cmdLineQuote</a>(s)</tt>	Internal method for quoting a single command-line argument.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/win32.py#L93'>quoteArguments</a>(arguments)</tt>	Quote an iterable of command-line arguments for passing to createprocess or a similar api.
<tt style='background-color:#E8E8E8;'> python._ErrorFormatter <a href=' /python/win32.py#L126'>fromEnvironment</a>(cls)</tt>	Get as many of the platform-specific error translation objects as possible and return an instance of c{cls} created with them.
<tt style='background-color:#E8E8E8;'> python._ErrorFormatter <a href=' /python/win32.py#L147'>formatError</a>(errorcode)</tt>	Returns the string associated with a windows error message such as the ones found in socket.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L31'>prefixedMethodNames</a>(classObj,prefix)</tt>	Given a class object c{classobj}, returns a list of method names that match the string c{prefix}.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L52'>addMethodNamesToDict</a>(classObj,dict,prefix,baseClass)</tt>	This goes through c{classobj} and its bases and puts method names starting with 'prefix' in 'dict' with a value of 1.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L93'>prefixedMethods</a>(obj,prefix)</tt>	Given an object c{obj}, returns a list of method objects that match the string c{prefix}.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L113'>accumulateMethods</a>(obj,dict,prefix,curClass)</tt>	Given an object c{obj}, add all methods that begin with c{prefix}.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L148'>namedModule</a>(name)</tt>	Return a module given its name.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L161'>namedObject</a>(name)</tt>	Get a fully named module-global object.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L173'>requireModule</a>(name,default)</tt>	Try to import a module given its name returning c{default} value if c{importerror} is raised during import.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L223'>_importAndCheckStack</a>(importName)</tt>	Import the given name as a module then walk the stack to determine whether the failure was the module not existing or some code in the module (for.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L254'>namedAny</a>(name)</tt>	Retrieve a python object by its fully qualified name from the global python module namespace.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L318'>filenameToModuleName</a>(fn)</tt>	Convert a name in the filesystem to the name of the python module it is.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L356'>qual</a>(clazz)</tt>	Return full import path of a class.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/log.py#L369'>_safeFormat</a>(formatter,o)</tt>	Helper function for l{safe_repr} and l{safe_str}.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L408'>safe_repr</a>(o)</tt>	Returns a string representation of an object or a string containing a traceback if that object's __repr__ raised an exception.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L424'>safe_str</a>(o)</tt>	Returns a string representation of an object or a string containing a traceback if that object's __str__ raised an exception.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L468'>getClass</a>(obj)</tt>	Return the class or type of object 'obj'.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L480'>accumulateClassDict</a>(classObj,attr,adict,baseClass)</tt>	Accumulate all attributes of a given name in a class hierarchy into a single dictionary.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/reflect.py#L517'>accumulateClassList</a>(classObj,attr,listObj,baseClass)</tt>	Accumulate all attributes of a given name in a class hierarchy into a single list.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/urlpath.py#L19'>_rereconstituter</a>(name)</tt>	Attriute declaration to preserve mutability on l{urlpath}.
<tt style='background-color:#E8E8E8;'> python.URLPath <a href=' /python/urlpath.py#L69'>_reconstitute</a>()</tt>	Reconstitute this l{urlpath} from all its given attributes.
<tt style='background-color:#E8E8E8;'> python.URLPath <a href=' /python/urlpath.py#L87'>_fromURL</a>(cls,urlInstance)</tt>	Reconstruct all the public instance variables of this l{urlpath} from its underlying l{_url}.
<tt style='background-color:#E8E8E8;'> python.URLPath <a href=' /python/urlpath.py#L111'>pathList</a>(unquote,copy)</tt>	Split this url's path into its components.
<tt style='background-color:#E8E8E8;'> python.URLPath <a href=' /python/urlpath.py#L129'>fromString</a>(klass,url)</tt>	Make a l{urlpath} from a l{str} or l{unicode}.
<tt style='background-color:#E8E8E8;'> python.URLPath <a href=' /python/urlpath.py#L150'>fromBytes</a>(klass,url)</tt>	Make a l{urlpath} from a l{bytes}.
<tt style='background-color:#E8E8E8;'> python.URLPath <a href=' /python/urlpath.py#L173'>fromRequest</a>(klass,request)</tt>	Make a l{urlpath} from a l{twisted web http request}.
<tt style='background-color:#E8E8E8;'> python.URLPath <a href=' /python/urlpath.py#L187'>_mod</a>(newURL,keepQuery)</tt>	Return a modified copy of c{self} using c{newurl}, keeping the query string if c{keepquery} is c{true}.
<tt style='background-color:#E8E8E8;'> python.URLPath <a href=' /python/urlpath.py#L207'>sibling</a>(path,keepQuery)</tt>	Get the sibling of the current l{urlpath} a sibling is a file which.
<tt style='background-color:#E8E8E8;'> python.URLPath <a href=' /python/urlpath.py#L224'>child</a>(path,keepQuery)</tt>	Get the child of this l{urlpath}.
<tt style='background-color:#E8E8E8;'> python.URLPath <a href=' /python/urlpath.py#L240'>parent</a>(keepQuery)</tt>	Get the parent directory of this l{urlpath}.
<tt style='background-color:#E8E8E8;'> python.URLPath <a href=' /python/urlpath.py#L253'>here</a>(keepQuery)</tt>	Get the current directory of this l{urlpath}.
<tt style='background-color:#E8E8E8;'> python.URLPath <a href=' /python/urlpath.py#L266'>click</a>(st)</tt>	Return a path which is the url where a browser would presumably take you if you clicked on a link with an href as given.
<tt style='background-color:#E8E8E8;'> python.URLPath <a href=' /python/urlpath.py#L280'>__str__</a>()</tt>	The l{str} of a l{urlpath} is its url text.
<tt style='background-color:#E8E8E8;'> python.URLPath <a href=' /python/urlpath.py#L287'>__repr__</a>()</tt>	The l{repr} of a l{urlpath} is an eval-able expression which will construct a similar l{urlpath}.
<tt style='background-color:#E8E8E8;'> python.ZipPath <a href=' /python/zippath.py#L37'>__init__</a>(archive,pathInArchive)</tt>	Don't construct me directly use c{ziparchive child()}.
<tt style='background-color:#E8E8E8;'> python.ZipPath <a href=' /python/zippath.py#L72'>sep</a>()</tt>	Return a zip directory separator.
<tt style='background-color:#E8E8E8;'> python.ZipPath <a href=' /python/zippath.py#L90'>child</a>(path)</tt>	Return a new zippath representing a path in c{self archive} which is.
<tt style='background-color:#E8E8E8;'> python.ZipPath <a href=' /python/zippath.py#L139'>splitext</a>()</tt>	Return a value similar to that returned by c{os path splitext}.
<tt style='background-color:#E8E8E8;'> python.ZipPath <a href=' /python/zippath.py#L168'>getsize</a>()</tt>	Retrieve this file's size.
<tt style='background-color:#E8E8E8;'> python.ZipPath <a href=' /python/zippath.py#L178'>getAccessTime</a>()</tt>	Retrieve this file's last access-time this is the same as the last access.
<tt style='background-color:#E8E8E8;'> python.ZipPath <a href=' /python/zippath.py#L188'>getModificationTime</a>()</tt>	Retrieve this file's last modification time this is the time of.
<tt style='background-color:#E8E8E8;'> python.ZipPath <a href=' /python/zippath.py#L201'>getStatusChangeTime</a>()</tt>	Retrieve this file's last modification time this name is provided for.
<tt style='background-color:#E8E8E8;'> python.ZipArchive <a href=' /python/zippath.py#L226'>__init__</a>(archivePathname)</tt>	Create a ziparchive treating the archive at archivepathname as a zip file.
<tt style='background-color:#E8E8E8;'> python.ZipArchive <a href=' /python/zippath.py#L253'>child</a>(path)</tt>	Create a zippath pointing at a path within the archive.
<tt style='background-color:#E8E8E8;'> python.ZipArchive <a href=' /python/zippath.py#L263'>exists</a>()</tt>	Returns c{true} if the underlying archive exists.
<tt style='background-color:#E8E8E8;'> python.ZipArchive <a href=' /python/zippath.py#L270'>getAccessTime</a>()</tt>	Return the archive file's last access time.
<tt style='background-color:#E8E8E8;'> python.ZipArchive <a href=' /python/zippath.py#L277'>getModificationTime</a>()</tt>	Return the archive file's modification time.
<tt style='background-color:#E8E8E8;'> python.ZipArchive <a href=' /python/zippath.py#L284'>getStatusChangeTime</a>()</tt>	Return the archive file's status change time.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/text.py#L11'>stringyString</a>(object,indentation)</tt>	Expansive string formatting for sequence types.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/text.py#L66'>isMultiline</a>(s)</tt>	Returns c{true} if this string has a newline in it.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/text.py#L73'>endsInNewline</a>(s)</tt>	Returns c{true} if this string ends in a newline.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/text.py#L80'>greedyWrap</a>(inString,width)</tt>	Given a string and a column width return a list of lines.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/text.py#L149'>splitQuoted</a>(s)</tt>	Like a string split but don't break substrings inside quotes.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/text.py#L184'>strFile</a>(p,f,caseSensitive)</tt>	Find whether string c{p} occurs in a read()able object c{f}.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/compat.py#L77'>_shouldEnableNewStyle</a>()</tt>	Returns whether or not we should enable the new-style conversion of old-style classes.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/compat.py#L97'>currentframe</a>(n)</tt>	In python 3 l{inspect currentframe} does not take a stack-level argument.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/compat.py#L116'>inet_pton</a>(af,addr)</tt>	Emulator of l{socket inet_pton}.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/compat.py#L245'>execfile</a>(filename,globals,locals)</tt>	Execute a python script in the given namespaces.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/compat.py#L283'>comparable</a>(klass)</tt>	Class decorator that ensures support for the special c{__cmp__} method.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/compat.py#L356'>ioType</a>(fileIshObject,default)</tt>	Determine the type which will be returned from the given file object's read() and accepted by its write() method as an argument.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/compat.py#L417'>nativeString</a>(s)</tt>	Convert c{bytes} or c{unicode} to the native c{str} type using ascii encoding if conversion is necessary.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/compat.py#L443'>_matchingString</a>(constantString,inputString)</tt>	Some functions such as c{os path join}, operate on string arguments which.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/compat.py#L682'>_keys</a>(d)</tt>	Return a list of the keys of c{d}.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/compat.py#L696'>bytesEnviron</a>()</tt>	Return a l{dict} of l{os environ} where all text-strings are encoded into.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/compat.py#L716'>_constructMethod</a>(cls,name)</tt>	Construct a bound method.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/compat.py#L759'>_bytesChr</a>(i)</tt>	Like l{chr} but always works on ascii returning l{bytes}.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/compat.py#L782'>_coercedUnicode</a>(s)</tt>	Coerce ascii-only byte strings into unicode for python 2.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/compat.py#L817'>_bytesRepr</a>(bytestring)</tt>	Provide a repr for a byte string that begins with 'b' on both python 2 and 3.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/runtime.py#L16'>shortPythonVersion</a>()</tt>	Returns the python version as a dot-separated string.
<tt style='background-color:#E8E8E8;'> python.Platform <a href=' /python/runtime.py#L59'>isKnown</a>()</tt>	Do we know about this platform? @return boolean indicating whether this is a known platform or not.
<tt style='background-color:#E8E8E8;'> python.Platform <a href=' /python/runtime.py#L69'>getType</a>()</tt>	Get platform type.
<tt style='background-color:#E8E8E8;'> python.Platform <a href=' /python/runtime.py#L79'>isMacOSX</a>()</tt>	Check if current platform is mac os x.
<tt style='background-color:#E8E8E8;'> python.Platform <a href=' /python/runtime.py#L89'>isWinNT</a>()</tt>	Are we running in windows nt? this is deprecated and always returns c{true} on win32 because.
<tt style='background-color:#E8E8E8;'> python.Platform <a href=' /python/runtime.py#L107'>isWindows</a>()</tt>	Are we running in windows? @return c{true} if the current platform has been detected as.
<tt style='background-color:#E8E8E8;'> python.Platform <a href=' /python/runtime.py#L118'>isVista</a>()</tt>	Check if current platform is windows vista or windows server 2008.
<tt style='background-color:#E8E8E8;'> python.Platform <a href=' /python/runtime.py#L131'>isLinux</a>()</tt>	Check if current platform is linux.
<tt style='background-color:#E8E8E8;'> python.Platform <a href=' /python/runtime.py#L141'>isDocker</a>(_initCGroupLocation)</tt>	Check if the current platform is linux in a docker container.
<tt style='background-color:#E8E8E8;'> python.Platform <a href=' /python/runtime.py#L170'>_supportsSymlinks</a>()</tt>	Check for symlink support usable for twisted's purposes.
<tt style='background-color:#E8E8E8;'> python.Platform <a href=' /python/runtime.py#L197'>supportsThreads</a>()</tt>	Can threads be created? @return c{true} if the threads are supported on the current platform.
<tt style='background-color:#E8E8E8;'> python.Platform <a href=' /python/runtime.py#L211'>supportsINotify</a>()</tt>	Return c{true} if we can use the inotify api on this platform.
<tt style='background-color:#E8E8E8;'> python.Request <a href=' /python/roots.py#L37'>write</a>(data)</tt>	Add some data to the response to this request.
<tt style='background-color:#E8E8E8;'> python.Request <a href=' /python/roots.py#L42'>finish</a>()</tt>	The response to this request is finished flush all data to the network stream.
<tt style='background-color:#E8E8E8;'> python.Entity <a href=' /python/roots.py#L60'>render</a>(request)</tt>	I produce a stream of bytes for the request by calling request write().
<tt style='background-color:#E8E8E8;'> python.Collection <a href=' /python/roots.py#L85'>getStaticEntity</a>(name)</tt>	Get an entity that was added to me using putentity.
<tt style='background-color:#E8E8E8;'> python.Collection <a href=' /python/roots.py#L92'>getDynamicEntity</a>(name,request)</tt>	Subclass this to generate an entity on demand.
<tt style='background-color:#E8E8E8;'> python.Collection <a href=' /python/roots.py#L98'>getEntity</a>(name,request)</tt>	Retrieve an entity from me.
<tt style='background-color:#E8E8E8;'> python.Collection <a href=' /python/roots.py#L115'>putEntity</a>(name,entity)</tt>	Store a static reference on 'name' for 'entity'.
<tt style='background-color:#E8E8E8;'> python.Collection <a href=' /python/roots.py#L122'>delEntity</a>(name)</tt>	Remove a static reference for 'name'.
<tt style='background-color:#E8E8E8;'> python.Collection <a href=' /python/roots.py#L129'>storeEntity</a>(name,request)</tt>	Store an entity for 'name', based on the content of 'request'.
<tt style='background-color:#E8E8E8;'> python.Collection <a href=' /python/roots.py#L134'>removeEntity</a>(name,request)</tt>	Remove an entity for 'name', based on the content of 'request'.
<tt style='background-color:#E8E8E8;'> python.Collection <a href=' /python/roots.py#L139'>listStaticEntities</a>()</tt>	Retrieve a list of all name entity pairs that i store references to.
<tt style='background-color:#E8E8E8;'> python.Collection <a href=' /python/roots.py#L146'>listDynamicEntities</a>(request)</tt>	A list of all name entity that i can generate on demand.
<tt style='background-color:#E8E8E8;'> python.Collection <a href=' /python/roots.py#L153'>listEntities</a>(request)</tt>	Retrieve a list of all name entity pairs i contain.
<tt style='background-color:#E8E8E8;'> python.Collection <a href=' /python/roots.py#L160'>listStaticNames</a>()</tt>	Retrieve a list of the names of entities that i store references to.
<tt style='background-color:#E8E8E8;'> python.Collection <a href=' /python/roots.py#L168'>listDynamicNames</a>()</tt>	Retrieve a list of the names of entities that i store references to.
<tt style='background-color:#E8E8E8;'> python.Collection <a href=' /python/roots.py#L176'>listNames</a>(request)</tt>	Retrieve a list of all names for entities that i contain.
<tt style='background-color:#E8E8E8;'> python.Constrained <a href=' /python/roots.py#L192'>nameConstraint</a>(name)</tt>	A method that determines whether an entity may be added to me with a given name.
<tt style='background-color:#E8E8E8;'> python.Constrained <a href=' /python/roots.py#L200'>entityConstraint</a>(entity)</tt>	A method that determines whether an entity may be added to me.
<tt style='background-color:#E8E8E8;'> python.Constrained <a href=' /python/roots.py#L211'>putEntity</a>(name,entity)</tt>	Store an entity if it meets both constraints.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/failure.py#L33'>format_frames</a>(frames,write,detail)</tt>	Format and write frames.
<tt style='background-color:#E8E8E8;'> python._Traceback <a href=' /python/failure.py#L96'>__init__</a>(frames)</tt>	Construct a fake traceback object using a list of frames note that.
<tt style='background-color:#E8E8E8;'> python._Frame <a href=' /python/failure.py#L125'>__init__</a>(name,filename)</tt>	@param name method/function name for this frame.
<tt style='background-color:#E8E8E8;'> python.Failure <a href=' /python/failure.py#L175'>__init__</a>(exc_value,exc_type,exc_tb,captureVars)</tt>	Initialize me with an explanation of the error.
<tt style='background-color:#E8E8E8;'> python.Failure <a href=' /python/failure.py#L320'>trap</a>()</tt>	Trap this failure if its type is in a predetermined list.
<tt style='background-color:#E8E8E8;'> python.Failure <a href=' /python/failure.py#L351'>check</a>()</tt>	Check if this failure's type is in a predetermined list.
<tt style='background-color:#E8E8E8;'> python.Failure <a href=' /python/failure.py#L384'>throwExceptionIntoGenerator</a>(g)</tt>	Throw the original exception into the given generator preserving traceback information if available.
<tt style='background-color:#E8E8E8;'> python.Failure <a href=' /python/failure.py#L396'>_findFailure</a>(cls)</tt>	Find the failure that represents the exception currently in context.
<tt style='background-color:#E8E8E8;'> python.Failure <a href=' /python/failure.py#L462'>__getstate__</a>()</tt>	Avoid pickling objects in the traceback.
<tt style='background-color:#E8E8E8;'> python.Failure <a href=' /python/failure.py#L495'>cleanFailure</a>()</tt>	Remove references to other objects replacing them with strings.
<tt style='background-color:#E8E8E8;'> python.Failure <a href=' /python/failure.py#L508'>getTracebackObject</a>()</tt>	Get an object that represents this failure's stack that can be passed to traceback.
<tt style='background-color:#E8E8E8;'> python.Failure <a href=' /python/failure.py#L525'>getErrorMessage</a>()</tt>	Get a string of the exception which caused this failure.
<tt style='background-color:#E8E8E8;'> python.Failure <a href=' /python/failure.py#L542'>printTraceback</a>(file,elideFrameworkCode,detail)</tt>	Emulate python's standard error reporting mechanism.
<tt style='background-color:#E8E8E8;'> python.Failure <a href=' /python/failure.py#L611'>printBriefTraceback</a>(file,elideFrameworkCode)</tt>	Print a traceback as densely as possible.
<tt style='background-color:#E8E8E8;'> python.Failure <a href=' /python/failure.py#L616'>printDetailedTraceback</a>(file,elideFrameworkCode)</tt>	Print a traceback with detailed locals and globals information.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/failure.py#L622'>_safeReprVars</a>(varsDictItems)</tt>	Convert a list of name object pairs into name repr pairs.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/failure.py#L640'>_debuginit</a>(exc_value,exc_type,exc_tb,captureVars)</tt>	Initialize failure object possibly spawning pdb.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/failure.py#L659'>startDebugMode</a>()</tt>	Enable debug hooks for failures.
<tt style='background-color:#E8E8E8;'> python.ILogObserver <a href=' /python/log.py#L57'>__call__</a>(eventDict)</tt>	Log an event.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/log.py#L90'>callWithLogger</a>(logger,func)</tt>	Utility method which wraps a function in a try /except logs a failure if one occurs and uses the system's logprefix.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/log.py#L111'>err</a>(_stuff,_why)</tt>	Write a failure to the log.
<tt style='background-color:#E8E8E8;'> python.Logger <a href=' /python/log.py#L148'>logPrefix</a>()</tt>	Override this method to insert custom logging behavior its.
<tt style='background-color:#E8E8E8;'> python.LogPublisher <a href=' /python/log.py#L190'>observers</a>()</tt>	Property returning all observers registered on this l{logpublisher}.
<tt style='background-color:#E8E8E8;'> python.LogPublisher <a href=' /python/log.py#L201'>_startLogging</a>(other,setStdout)</tt>	Begin logging to the l{logbeginner} associated with this l{logpublisher}.
<tt style='background-color:#E8E8E8;'> python.LogPublisher <a href=' /python/log.py#L217'>_stopLogging</a>()</tt>	Clean-up hook for fixing potentially global state only for testing of.
<tt style='background-color:#E8E8E8;'> python.LogPublisher <a href=' /python/log.py#L227'>addObserver</a>(other)</tt>	Add a new observer.
<tt style='background-color:#E8E8E8;'> python.LogPublisher <a href=' /python/log.py#L240'>removeObserver</a>(other)</tt>	Remove an observer.
<tt style='background-color:#E8E8E8;'> python.LogPublisher <a href=' /python/log.py#L251'>msg</a>()</tt>	Log a new message.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/log.py#L369'>_safeFormat</a>(fmtString,fmtDict)</tt>	Try to format a string swallowing all errors to always return a string.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/log.py#L418'>textFromEventDict</a>(eventDict)</tt>	Extract text from an event dict passed to a log observer if it cannot.
<tt style='background-color:#E8E8E8;'> python._GlobalStartStopMixIn <a href=' /python/log.py#L466'>start</a>()</tt>	Start observing log events.
<tt style='background-color:#E8E8E8;'> python._GlobalStartStopMixIn <a href=' /python/log.py#L473'>stop</a>()</tt>	Stop observing log events.
<tt style='background-color:#E8E8E8;'> python.FileLogObserver <a href=' /python/log.py#L497'>getTimezoneOffset</a>(when)</tt>	Return the current local timezone offset from utc.
<tt style='background-color:#E8E8E8;'> python.FileLogObserver <a href=' /python/log.py#L512'>formatTime</a>(when)</tt>	Format the given utc value as a string representing that time in the local timezone.
<tt style='background-color:#E8E8E8;'> python.FileLogObserver <a href=' /python/log.py#L544'>emit</a>(eventDict)</tt>	Format the given log event as text and write it to the output file.
<tt style='background-color:#E8E8E8;'> python.PythonLoggingObserver <a href=' /python/log.py#L577'>__init__</a>(loggerName)</tt>	@param loggername identifier used for getting logger.
<tt style='background-color:#E8E8E8;'> python.PythonLoggingObserver <a href=' /python/log.py#L585'>emit</a>(eventDict)</tt>	Receive a twisted log entry format it and bridge it to python.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/log.py#L663'>startLogging</a>(file)</tt>	Initialize logging to a specified file.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/log.py#L677'>startLoggingWithObserver</a>(observer,setStdout)</tt>	Initialize logging to a specified observer if setstdout is true.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/log.py#L723'>discardLogs</a>()</tt>	Discard messages logged via the global c{logfile} object.
<tt style='background-color:#E8E8E8;'> python.DefaultObserver <a href=' /python/log.py#L752'>emit</a>(eventDict)</tt>	Emit an event dict.
<tt style='background-color:#E8E8E8;'> python.BaseLogFile <a href=' /python/logfile.py#L28'>__init__</a>(name,directory,defaultMode)</tt>	Create a log file.
<tt style='background-color:#E8E8E8;'> python.BaseLogFile <a href=' /python/logfile.py#L46'>fromFullPath</a>(cls,filename)</tt>	Construct a log file from a full file path.
<tt style='background-color:#E8E8E8;'> python.BaseLogFile <a href=' /python/logfile.py#L55'>shouldRotate</a>()</tt>	Override with a method to that returns true if the log should be rotated.
<tt style='background-color:#E8E8E8;'> python.BaseLogFile <a href=' /python/logfile.py#L62'>_openFile</a>()</tt>	Open the log file.
<tt style='background-color:#E8E8E8;'> python.BaseLogFile <a href=' /python/logfile.py#L108'>write</a>(data)</tt>	Write some data to the file.
<tt style='background-color:#E8E8E8;'> python.BaseLogFile <a href=' /python/logfile.py#L117'>flush</a>()</tt>	Flush the file.
<tt style='background-color:#E8E8E8;'> python.BaseLogFile <a href=' /python/logfile.py#L123'>close</a>()</tt>	Close the file.
<tt style='background-color:#E8E8E8;'> python.BaseLogFile <a href=' /python/logfile.py#L134'>reopen</a>()</tt>	Reopen the log file this is mainly useful if you use an external log.
<tt style='background-color:#E8E8E8;'> python.BaseLogFile <a href=' /python/logfile.py#L146'>getCurrentLog</a>()</tt>	Return a logreader for the current log file.
<tt style='background-color:#E8E8E8;'> python.LogFile <a href=' /python/logfile.py#L159'>__init__</a>(name,directory,rotateLength,defaultMode)</tt>	Create a log file rotating on length.
<tt style='background-color:#E8E8E8;'> python.LogFile <a href=' /python/logfile.py#L185'>shouldRotate</a>()</tt>	Rotate when the log file size is larger than rotatelength.
<tt style='background-color:#E8E8E8;'> python.LogFile <a href=' /python/logfile.py#L191'>getLog</a>(identifier)</tt>	Given an integer return a logreader for an old log file.
<tt style='background-color:#E8E8E8;'> python.LogFile <a href=' /python/logfile.py#L200'>write</a>(data)</tt>	Write some data to the file.
<tt style='background-color:#E8E8E8;'> python.LogFile <a href=' /python/logfile.py#L207'>rotate</a>()</tt>	Rotate the file and create a new one.
<tt style='background-color:#E8E8E8;'> python.LogFile <a href=' /python/logfile.py#L227'>listLogs</a>()</tt>	Return sorted list of integers - the old logs' identifiers.
<tt style='background-color:#E8E8E8;'> python.DailyLogFile <a href=' /python/logfile.py#L257'>shouldRotate</a>()</tt>	Rotate when the date has changed since last write.
<tt style='background-color:#E8E8E8;'> python.DailyLogFile <a href=' /python/logfile.py#L261'>toDate</a>()</tt>	Convert a unixtime to year month day localtime tuple or return the current year month day localtime tuple.
<tt style='background-color:#E8E8E8;'> python.DailyLogFile <a href=' /python/logfile.py#L271'>suffix</a>(tupledate)</tt>	Return the suffix given a year month day tuple or unixtime.
<tt style='background-color:#E8E8E8;'> python.DailyLogFile <a href=' /python/logfile.py#L279'>getLog</a>(identifier)</tt>	Given a unix time return a logreader for an old log file.
<tt style='background-color:#E8E8E8;'> python.DailyLogFile <a href=' /python/logfile.py#L288'>write</a>(data)</tt>	Write some data to the log file.
<tt style='background-color:#E8E8E8;'> python.DailyLogFile <a href=' /python/logfile.py#L296'>rotate</a>()</tt>	Rotate the file and create a new one.
<tt style='background-color:#E8E8E8;'> python.LogReader <a href=' /python/logfile.py#L323'>__init__</a>(name)</tt>	Open the log file for reading.
<tt style='background-color:#E8E8E8;'> python.LogReader <a href=' /python/logfile.py#L332'>readLines</a>(lines)</tt>	Read a list of lines from the log file.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/threadable.py#L60'>synchronize</a>()</tt>	Make all methods listed in each class' synchronized attribute synchronized.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/threadable.py#L111'>isInIOThread</a>()</tt>	Are we in the thread responsible for i/o requests the event loop.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/threadable.py#L118'>registerAsIOThread</a>()</tt>	Mark the current thread as responsible for i/o requests.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L99'>_fullyQualifiedName</a>(obj)</tt>	Return the fully qualified name of a module class method or function.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L132'>_getReplacementString</a>(replacement)</tt>	Surround a replacement for a deprecated api with some polite text exhorting the user to consider it as an alternative.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L148'>_getDeprecationDocstring</a>(version,replacement)</tt>	Generate an addition to a deprecated object's docstring that explains its deprecation.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L169'>_getDeprecationWarningString</a>(fqpn,version,format,replacement)</tt>	Return a string indicating that the python name was deprecated in the given version.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L206'>getDeprecationWarningString</a>(callableThing,version,format,replacement)</tt>	Return a string indicating that the callable was deprecated in the given version.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L242'>_appendToDocstring</a>(thingWithDoc,textToAppend)</tt>	Append the given text to the docstring of c{thingwithdoc}.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L269'>deprecated</a>(version,replacement)</tt>	Return a decorator that marks callables as deprecated to deprecate a.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L312'>deprecatedProperty</a>(version,replacement)</tt>	Return a decorator that marks a property as deprecated to deprecate a.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L395'>getWarningMethod</a>()</tt>	Return the warning method currently used to record deprecation warnings.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L403'>setWarningMethod</a>(newMethod)</tt>	Set the warning method to use to record deprecation warnings.
<tt style='background-color:#E8E8E8;'> python._ModuleProxy <a href=' /python/deprecate.py#L472'>__repr__</a>()</tt>	Get a string containing the type of the module proxy and a representation of the wrapped module object.
<tt style='background-color:#E8E8E8;'> python._ModuleProxy <a href=' /python/deprecate.py#L481'>__setattr__</a>(name,value)</tt>	Set an attribute on the wrapped module object.
<tt style='background-color:#E8E8E8;'> python._ModuleProxy <a href=' /python/deprecate.py#L490'>__getattribute__</a>(name)</tt>	Get an attribute from the module object possibly emitting a warning.
<tt style='background-color:#E8E8E8;'> python._DeprecatedAttribute <a href=' /python/deprecate.py#L541'>__init__</a>(module,name,version,message)</tt>	Initialise a deprecated name wrapper.
<tt style='background-color:#E8E8E8;'> python._DeprecatedAttribute <a href=' /python/deprecate.py#L552'>get</a>()</tt>	Get the underlying attribute value and issue a deprecation warning.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L568'>_deprecateAttribute</a>(proxy,name,version,message)</tt>	Mark a module-level attribute as being deprecated.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L594'>deprecatedModuleAttribute</a>(version,message,moduleName,name)</tt>	Declare a module-level attribute as being deprecated.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L621'>warnAboutFunction</a>(offender,warningString)</tt>	Issue a warning string identifying c{offender} as the responsible code.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L656'>_passedArgSpec</a>(argspec,positional,keyword)</tt>	Take an i{inspect argspec}, a tuple of positional arguments and a dict of.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L699'>_passedSignature</a>(signature,positional,keyword)</tt>	Take an l{inspect signature}, a tuple of positional arguments and a dict of.
<tt style='background-color:#E8E8E8;'> python. <a href=' /python/deprecate.py#L759'>_mutuallyExclusiveArguments</a>(argumentPairs)</tt>	Decorator which causes its decoratee to raise a l{typeerror} if two of the given arguments are passed at the same time.
<tt style='background-color:#E8E8E8;'> python.ContextTracker <a href=' /python/context.py#L65'>callWithContext</a>(newContext,func)</tt>	Call c{func(*args **kw)} such that the contents of c{newcontext} will be available for it to retrieve using l{getcontext}.
<tt style='background-color:#E8E8E8;'> python.ContextTracker <a href=' /python/context.py#L90'>getContext</a>(key,default)</tt>	Retrieve the value for a key from the context.
<tt style='background-color:#E8E8E8;'> logger.KeyFlattener <a href=' /logger/_flatten.py#L26'>__init__</a>()</tt>	Initialize a l{keyflattener}.
<tt style='background-color:#E8E8E8;'> logger.KeyFlattener <a href=' /logger/_flatten.py#L33'>flatKey</a>(fieldName,formatSpec,conversion)</tt>	Compute a string key for a given field/format/conversion.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_flatten.py#L67'>flattenEvent</a>(event)</tt>	Flatten the given event by pre-associating format fields with specific objects and callable results in a l{dict} put into the c{"log_flattened"}.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_flatten.py#L128'>extractField</a>(field,event)</tt>	Extract a given format field from the given event.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_flatten.py#L158'>flatFormat</a>(event)</tt>	Format an event which has been flattened with l{flattenevent}.
<tt style='background-color:#E8E8E8;'> logger.FileLogObserver <a href=' /logger/_file.py#L24'>__init__</a>(outFile,formatEvent)</tt>	@param outfile a file-like object ideally one should be passed which.
<tt style='background-color:#E8E8E8;'> logger.FileLogObserver <a href=' /logger/_file.py#L43'>__call__</a>(event)</tt>	Write event to file.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_file.py#L64'>textFileLogObserver</a>(outFile,timeFormat)</tt>	Create a l{filelogobserver} that emits text to a specified writable file-like object.
<tt style='background-color:#E8E8E8;'> logger.InvalidLogLevelError <a href=' /logger/_levels.py#L17'>__init__</a>(level)</tt>	@param level a log level.
<tt style='background-color:#E8E8E8;'> logger.LogLevel <a href=' /logger/_levels.py#L69'>levelWithName</a>(cls,name)</tt>	Get the log level with the given name.
<tt style='background-color:#E8E8E8;'> logger.LogLevel <a href=' /logger/_levels.py#L89'>_priorityForLevel</a>(cls,level)</tt>	We want log levels to have defined ordering - the order of definition - but they aren't value constants the only value is the name.
<tt style='background-color:#E8E8E8;'> logger.LimitedHistoryLogObserver <a href=' /logger/_buffer.py#L38'>__init__</a>(size)</tt>	@param size the maximum number of events to buffer if l{none}, the.
<tt style='background-color:#E8E8E8;'> logger.LimitedHistoryLogObserver <a href=' /logger/_buffer.py#L51'>replayTo</a>(otherObserver)</tt>	Re-play the buffered events to another log observer.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_util.py#L11'>formatTrace</a>(trace)</tt>	Format a trace (that is the contents of the c{log_trace} key of a log event) as a visual indication of the message's propagation through various.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_stdlib.py#L29'>_reverseLogLevelMapping</a>()</tt>	Reverse the above mapping adding both the numerical keys used above and the corresponding string keys also used by python logging.
<tt style='background-color:#E8E8E8;'> logger.STDLibLogObserver <a href=' /logger/_stdlib.py#L67'>__init__</a>(name,stackDepth)</tt>	@param loggername logger identifier.
<tt style='background-color:#E8E8E8;'> logger.STDLibLogObserver <a href=' /logger/_stdlib.py#L81'>_findCaller</a>(stackInfo)</tt>	Based on the stack depth passed to this l{stdliblogobserver}, identify the calling function.
<tt style='background-color:#E8E8E8;'> logger.STDLibLogObserver <a href=' /logger/_stdlib.py#L103'>__call__</a>(event)</tt>	Format an event and bridge it to python logging.
<tt style='background-color:#E8E8E8;'> logger.StringifiableFromEvent <a href=' /logger/_stdlib.py#L125'>__init__</a>(event)</tt>	@param event an event.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_json.py#L27'>failureAsJSON</a>(failure)</tt>	Convert a failure to a json-serializable data structure.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_json.py#L48'>asBytes</a>(obj)</tt>	On python 2 we really need native strings in a variety of places attribute names will sort of work in a __dict__, but they're subtly wrong.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_json.py#L73'>failureFromJSON</a>(failureDict)</tt>	Load a l{failure} from a dictionary deserialized from json.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_json.py#L129'>objectLoadHook</a>(aDict)</tt>	Dictionary-to-object-translation hook for certain value types used within the logging system.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_json.py#L148'>objectSaveHook</a>(pythonObject)</tt>	Object-to-serializable hook for certain value types used within the logging system.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_json.py#L171'>eventAsJSON</a>(event)</tt>	Encode an event as json flattening it if necessary to preserve as much structure as possible.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_json.py#L211'>eventFromJSON</a>(eventText)</tt>	Decode a log event from json.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_json.py#L226'>jsonFileLogObserver</a>(outFile,recordSeparator)</tt>	Create a l{filelogobserver} that emits json-serialized events to a specified writable file-like object.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_json.py#L257'>eventsFromJSONLogFile</a>(inFile,recordSeparator,bufferSize)</tt>	Load events from a file previously saved with l{jsonfilelogobserver}.
<tt style='background-color:#E8E8E8;'> logger.Logger <a href=' /logger/_logger.py#L24'>_namespaceFromCallingContext</a>()</tt>	Derive a namespace from the module containing the caller's caller.
<tt style='background-color:#E8E8E8;'> logger.Logger <a href=' /logger/_logger.py#L35'>__init__</a>(namespace,source,observer)</tt>	@param namespace the namespace for this logger uses a dotted.
<tt style='background-color:#E8E8E8;'> logger.Logger <a href=' /logger/_logger.py#L64'>__get__</a>(oself,type)</tt>	When used as a descriptor i e ::.
<tt style='background-color:#E8E8E8;'> logger.Logger <a href=' /logger/_logger.py#L99'>emit</a>(level,format)</tt>	Emit a log event to all log observers at the given level.
<tt style='background-color:#E8E8E8;'> logger.Logger <a href=' /logger/_logger.py#L135'>failure</a>(format,failure,level)</tt>	Log a failure and emit a traceback.
<tt style='background-color:#E8E8E8;'> logger.Logger <a href=' /logger/_logger.py#L181'>debug</a>(format)</tt>	Emit a log event at log level l{loglevel debug}.
<tt style='background-color:#E8E8E8;'> logger.Logger <a href=' /logger/_logger.py#L197'>info</a>(format)</tt>	Emit a log event at log level l{loglevel info}.
<tt style='background-color:#E8E8E8;'> logger.Logger <a href=' /logger/_logger.py#L213'>warn</a>(format)</tt>	Emit a log event at log level l{loglevel warn}.
<tt style='background-color:#E8E8E8;'> logger.Logger <a href=' /logger/_logger.py#L229'>error</a>(format)</tt>	Emit a log event at log level l{loglevel error}.
<tt style='background-color:#E8E8E8;'> logger.Logger <a href=' /logger/_logger.py#L245'>critical</a>(format)</tt>	Emit a log event at log level l{loglevel critical}.
<tt style='background-color:#E8E8E8;'> logger.LegacyLogObserverWrapper <a href=' /logger/_legacy.py#L28'>__init__</a>(legacyObserver)</tt>	@param legacyobserver a legacy observer to which this observer will forward events.
<tt style='background-color:#E8E8E8;'> logger.LegacyLogObserverWrapper <a href=' /logger/_legacy.py#L44'>__call__</a>(event)</tt>	Forward events to the legacy observer after editing them to ensure compatibility.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_legacy.py#L97'>publishToNewObserver</a>(observer,eventDict,textFromEventDict)</tt>	Publish an old-style (l{twisted python log}) event to a new-style.
<tt style='background-color:#E8E8E8;'> logger.LoggingFile <a href=' /logger/_io.py#L31'>__init__</a>(logger,level,encoding)</tt>	@param logger the logger to log through.
<tt style='background-color:#E8E8E8;'> logger.LoggingFile <a href=' /logger/_io.py#L56'>closed</a>()</tt>	Read-only property is the file closed?.
<tt style='background-color:#E8E8E8;'> logger.LoggingFile <a href=' /logger/_io.py#L67'>encoding</a>()</tt>	Read-only property file encoding.
<tt style='background-color:#E8E8E8;'> logger.LoggingFile <a href=' /logger/_io.py#L78'>mode</a>()</tt>	Read-only property file mode.
<tt style='background-color:#E8E8E8;'> logger.LoggingFile <a href=' /logger/_io.py#L89'>newlines</a>()</tt>	Read-only property types of newlines encountered.
<tt style='background-color:#E8E8E8;'> logger.LoggingFile <a href=' /logger/_io.py#L100'>name</a>()</tt>	The name of this file a repr-style string giving information about its namespace.
<tt style='background-color:#E8E8E8;'> logger.LoggingFile <a href=' /logger/_io.py#L118'>close</a>()</tt>	Close this file so it can no longer be written to.
<tt style='background-color:#E8E8E8;'> logger.LoggingFile <a href=' /logger/_io.py#L125'>flush</a>()</tt>	No-op this file does not buffer.
<tt style='background-color:#E8E8E8;'> logger.LoggingFile <a href=' /logger/_io.py#L132'>fileno</a>()</tt>	Returns an invalid file descriptor since this is not backed by an fd.
<tt style='background-color:#E8E8E8;'> logger.LoggingFile <a href=' /logger/_io.py#L142'>isatty</a>()</tt>	A l{loggingfile} is not a tty.
<tt style='background-color:#E8E8E8;'> logger.LoggingFile <a href=' /logger/_io.py#L152'>write</a>(string)</tt>	Log the given message.
<tt style='background-color:#E8E8E8;'> logger.LoggingFile <a href=' /logger/_io.py#L173'>writelines</a>(lines)</tt>	Log each of the given lines as a separate message.
<tt style='background-color:#E8E8E8;'> logger.LoggingFile <a href=' /logger/_io.py#L185'>_unsupported</a>()</tt>	Template for unsupported operations.
<tt style='background-color:#E8E8E8;'> logger.ILogObserver <a href=' /logger/_observer.py#L31'>__call__</a>(event)</tt>	Log an event.
<tt style='background-color:#E8E8E8;'> logger.LogPublisher <a href=' /logger/_observer.py#L84'>addObserver</a>(observer)</tt>	Registers an observer with this publisher.
<tt style='background-color:#E8E8E8;'> logger.LogPublisher <a href=' /logger/_observer.py#L96'>removeObserver</a>(observer)</tt>	Unregisters an observer with this publisher.
<tt style='background-color:#E8E8E8;'> logger.LogPublisher <a href=' /logger/_observer.py#L108'>__call__</a>(event)</tt>	Forward events to contained observers.
<tt style='background-color:#E8E8E8;'> logger.LogPublisher <a href=' /logger/_observer.py#L144'>_errorLoggerForObserver</a>(observer)</tt>	Create an error-logger based on this logger which does not contain the given bad observer.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_format.py#L22'>formatEvent</a>(event)</tt>	Formats an event as a l{unicode}, using the format in c{event["log_format"]}.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_format.py#L61'>formatUnformattableEvent</a>(event,error)</tt>	Formats an event as a l{unicode} that describes the event generically and a formatting error.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_format.py#L102'>formatTime</a>(when,timeFormat,default)</tt>	Format a timestamp as text.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_format.py#L139'>formatEventAsClassicLogText</a>(event,formatTime)</tt>	Format an event as a line of human-readable text for e g traditional log.
<tt style='background-color:#E8E8E8;'> logger.CallMapping <a href=' /logger/_format.py#L239'>__init__</a>(submapping)</tt>	@param submapping another read-only mapping which will be used to look up items.
<tt style='background-color:#E8E8E8;'> logger.CallMapping <a href=' /logger/_format.py#L247'>__getitem__</a>(key)</tt>	Look up an item in the submapping for this l{callmapping}, calling it if c{key} ends with c{"()"}.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_format.py#L261'>formatWithCall</a>(formatString,mapping)</tt>	Format a string like l{unicode format}, but.
<tt style='background-color:#E8E8E8;'> logger.ILogFilterPredicate <a href=' /logger/_filter.py#L50'>__call__</a>(event)</tt>	Determine whether an event should be logged.
<tt style='background-color:#E8E8E8;'> logger. <a href=' /logger/_filter.py#L59'>shouldLogEvent</a>(predicates,event)</tt>	Determine whether an event should be logged based on the result of c{predicates}.
<tt style='background-color:#E8E8E8;'> logger.FilteringLogObserver <a href=' /logger/_filter.py#L103'>__init__</a>(observer,predicates,negativeObserver)</tt>	@param observer an observer to which this observer will forward events when c{predictates} yield a positive result.
<tt style='background-color:#E8E8E8;'> logger.FilteringLogObserver <a href=' /logger/_filter.py#L125'>__call__</a>(event)</tt>	Forward to next observer if predicate allows it.
<tt style='background-color:#E8E8E8;'> logger.LogLevelFilterPredicate <a href=' /logger/_filter.py#L147'>__init__</a>(defaultLogLevel)</tt>	@param defaultloglevel the default minimum log level.
<tt style='background-color:#E8E8E8;'> logger.LogLevelFilterPredicate <a href=' /logger/_filter.py#L157'>logLevelForNamespace</a>(namespace)</tt>	Determine an appropriate log level for the given namespace.
<tt style='background-color:#E8E8E8;'> logger.LogLevelFilterPredicate <a href=' /logger/_filter.py#L191'>setLogLevelForNamespace</a>(namespace,level)</tt>	Sets the log level for a logging namespace.
<tt style='background-color:#E8E8E8;'> logger.LogLevelFilterPredicate <a href=' /logger/_filter.py#L210'>clearLogLevels</a>()</tt>	Clears all log levels to the default.
<tt style='background-color:#E8E8E8;'> logger.LogBeginner <a href=' /logger/_global.py#L82'>__init__</a>(publisher,errorStream,stdio,warningsModule)</tt>	Initialize this l{logbeginner}.
<tt style='background-color:#E8E8E8;'> logger.LogBeginner <a href=' /logger/_global.py#L114'>beginLoggingTo</a>(observers,discardBuffer,redirectStandardIO)</tt>	Begin logging to the given set of observers this will.
<tt style='background-color:#E8E8E8;'> logger.LogBeginner <a href=' /logger/_global.py#L188'>showwarning</a>(message,category,filename,lineno)</tt>	Twisted-enabled wrapper around l{warnings showwarning}.
<tt style='background-color:#E8E8E8;'> _threads.Team <a href=' /_threads/_team.py#L76'>__init__</a>(coordinator,createWorker,logException)</tt>	@param coordinator an l{iexclusiveworker} which will coordinate access to resources on this l{team}; that is to say an.
<tt style='background-color:#E8E8E8;'> _threads.Team <a href=' /_threads/_team.py#L104'>statistics</a>()</tt>	Gather information on the current status of this l{team}.
<tt style='background-color:#E8E8E8;'> _threads.Team <a href=' /_threads/_team.py#L113'>grow</a>(n)</tt>	Increase the the number of idle workers by c{n}.
<tt style='background-color:#E8E8E8;'> _threads.Team <a href=' /_threads/_team.py#L130'>shrink</a>(n)</tt>	Decrease the number of idle workers by c{n}.
<tt style='background-color:#E8E8E8;'> _threads.Team <a href=' /_threads/_team.py#L142'>_quitIdlers</a>(n)</tt>	The implmentation of c{shrink}, performed by the coordinator worker.
<tt style='background-color:#E8E8E8;'> _threads.Team <a href=' /_threads/_team.py#L159'>do</a>(task)</tt>	Perform some work in a worker created by c{createworker}.
<tt style='background-color:#E8E8E8;'> _threads.Team <a href=' /_threads/_team.py#L169'>_coordinateThisTask</a>(task)</tt>	Select a worker to dispatch to either an idle one or a new one and perform it.
<tt style='background-color:#E8E8E8;'> _threads.Team <a href=' /_threads/_team.py#L200'>_recycleWorker</a>(worker)</tt>	Called only from coordinator.
<tt style='background-color:#E8E8E8;'> _threads.Team <a href=' /_threads/_team.py#L222'>quit</a>()</tt>	Stop doing work and shut down all idle workers.
<tt style='background-color:#E8E8E8;'> _threads.Quit <a href=' /_threads/_convenience.py#L22'>__init__</a>()</tt>	Create a l{quit} un-set.
<tt style='background-color:#E8E8E8;'> _threads.Quit <a href=' /_threads/_convenience.py#L29'>set</a>()</tt>	Set the flag if it has not been set.
<tt style='background-color:#E8E8E8;'> _threads.Quit <a href=' /_threads/_convenience.py#L39'>check</a>()</tt>	Check if the flag has been set.
<tt style='background-color:#E8E8E8;'> _threads.MemoryWorker <a href=' /_threads/_memory.py#L27'>__init__</a>(pending)</tt>	Create a l{memoryworker}.
<tt style='background-color:#E8E8E8;'> _threads.MemoryWorker <a href=' /_threads/_memory.py#L35'>do</a>(work)</tt>	Queue some work for to perform later see l{creatememoryworker}.
<tt style='background-color:#E8E8E8;'> _threads.MemoryWorker <a href=' /_threads/_memory.py#L45'>quit</a>()</tt>	Quit this worker.
<tt style='background-color:#E8E8E8;'> _threads. <a href=' /_threads/_memory.py#L54'>createMemoryWorker</a>()</tt>	Create an l{iworker} that does nothing but defer work to be performed later.
<tt style='background-color:#E8E8E8;'> _threads. <a href=' /_threads/_pool.py#L25'>pool</a>(currentLimit,threadFactory)</tt>	Construct a l{team} that spawns threads as a thread pool with the given limiting function.
<tt style='background-color:#E8E8E8;'> _threads.IWorker <a href=' /_threads/_ithreads.py#L28'>do</a>(task)</tt>	Perform the given task.
<tt style='background-color:#E8E8E8;'> _threads.IWorker <a href=' /_threads/_ithreads.py#L48'>quit</a>()</tt>	Free any resources associated with this l{iworker} and cause it to reject all future work.
<tt style='background-color:#E8E8E8;'> _threads.ThreadWorker <a href=' /_threads/_threadworker.py#L28'>__init__</a>(startThread,queue)</tt>	Create a l{threadworker} with a function to start a thread and a queue to use to communicate with that thread.
<tt style='background-color:#E8E8E8;'> _threads.ThreadWorker <a href=' /_threads/_threadworker.py#L50'>do</a>(task)</tt>	Perform the given task on the thread owned by this l{threadworker}.
<tt style='background-color:#E8E8E8;'> _threads.ThreadWorker <a href=' /_threads/_threadworker.py#L60'>quit</a>()</tt>	Reject all future work and stop the thread started by c{__init__}.
<tt style='background-color:#E8E8E8;'> _threads.LockWorker <a href=' /_threads/_threadworker.py#L77'>__init__</a>(lock,local)</tt>	@param lock a mutual-exclusion lock with c{acquire} and c{release} methods.
<tt style='background-color:#E8E8E8;'> _threads.LockWorker <a href=' /_threads/_threadworker.py#L91'>do</a>(work)</tt>	Do the given work on this thread with the mutex acquired if this is.
<tt style='background-color:#E8E8E8;'> _threads.LockWorker <a href=' /_threads/_threadworker.py#L117'>quit</a>()</tt>	Quit this l{lockworker}.
<tt style='background-color:#E8E8E8;'> scripts.ServerOptions <a href=' /scripts/_twistd_unix.py#L68'>opt_version</a>()</tt>	Print version information and exit.
<tt style='background-color:#E8E8E8;'> scripts.WindowsApplicationRunner <a href=' /scripts/_twistw.py#L35'>preApplication</a>()</tt>	Do pre-application-creation setup.
<tt style='background-color:#E8E8E8;'> scripts.WindowsApplicationRunner <a href=' /scripts/_twistw.py#L44'>postApplication</a>()</tt>	Start the application and run the reactor.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/trial.py#L38'>_parseLocalVariables</a>(line)</tt>	Accepts a single line in emacs local variable declaration format and returns a dict of all the variables {name value}.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/trial.py#L64'>loadLocalVariables</a>(filename)</tt>	Accepts a filename and attempts to load the emacs variable declarations from that file simulating what emacs does.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/trial.py#L88'>isTestFile</a>(filename)</tt>	Returns true if 'filename' looks like a file containing unit tests.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/trial.py#L103'>_maybeFindSourceLine</a>(testThing)</tt>	Try to find the source line of the given test thing.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/trial.py#L144'>_checkKnownRunOrder</a>(order)</tt>	Check that the given order is a known test running order.
<tt style='background-color:#E8E8E8;'> scripts._BasicOptions <a href=' /scripts/trial.py#L219'>coverdir</a>()</tt>	Return a l{filepath} representing the directory into which coverage results should be written.
<tt style='background-color:#E8E8E8;'> scripts._BasicOptions <a href=' /scripts/trial.py#L238'>opt_coverage</a>()</tt>	Generate coverage information in the coverage file in the directory specified by the temp-directory option.
<tt style='background-color:#E8E8E8;'> scripts._BasicOptions <a href=' /scripts/trial.py#L249'>opt_testmodule</a>(filename)</tt>	Filename to grep for test cases (-*- test-case-name).
<tt style='background-color:#E8E8E8;'> scripts._BasicOptions <a href=' /scripts/trial.py#L273'>opt_spew</a>()</tt>	Print an insanely verbose log of everything that happens useful.
<tt style='background-color:#E8E8E8;'> scripts._BasicOptions <a href=' /scripts/trial.py#L303'>opt_disablegc</a>()</tt>	Disable the garbage collector.
<tt style='background-color:#E8E8E8;'> scripts._BasicOptions <a href=' /scripts/trial.py#L311'>opt_tbformat</a>(opt)</tt>	Specify the format to display tracebacks with valid formats are.
<tt style='background-color:#E8E8E8;'> scripts._BasicOptions <a href=' /scripts/trial.py#L324'>opt_recursionlimit</a>(arg)</tt>	See sys setrecursionlimit().
<tt style='background-color:#E8E8E8;'> scripts._BasicOptions <a href=' /scripts/trial.py#L351'>opt_without_module</a>(option)</tt>	Fake the lack of the specified modules separated with commas.
<tt style='background-color:#E8E8E8;'> scripts.Options <a href=' /scripts/trial.py#L441'>opt_jobs</a>(number)</tt>	Number of local workers to run a strictly positive integer.
<tt style='background-color:#E8E8E8;'> scripts.Options <a href=' /scripts/trial.py#L456'>_getWorkerArguments</a>()</tt>	Return a list of options to pass to distributed workers.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/trial.py#L518'>_wrappedPdb</a>()</tt>	Wrap an instance of c{pdb pdb} with readline support and load any rcs.
<tt style='background-color:#E8E8E8;'> scripts. <a href=' /scripts/trial.py#L551'>_makeRunner</a>(config)</tt>	Return a trial runner class set up with the parameters extracted from c{config}.
<tt style='background-color:#E8E8E8;'> scripts.UnixAppLogger <a href=' /scripts/_twistd_unix.py#L134'>_getLogObserver</a>()</tt>	Create and return a suitable log observer for the given configuration.
<tt style='background-color:#E8E8E8;'> scripts.UnixApplicationRunner <a href=' /scripts/_twistd_unix.py#L191'>preApplication</a>()</tt>	Do pre-application-creation setup.
<tt style='background-color:#E8E8E8;'> scripts.UnixApplicationRunner <a href=' /scripts/_twistd_unix.py#L202'>_formatChildException</a>(exception)</tt>	Format the c{exception} in preparation for writing to the status pipe.
<tt style='background-color:#E8E8E8;'> scripts.UnixApplicationRunner <a href=' /scripts/_twistd_unix.py#L241'>postApplication</a>()</tt>	To be called after the application is created start the application and run the reactor.
<tt style='background-color:#E8E8E8;'> scripts.UnixApplicationRunner <a href=' /scripts/_twistd_unix.py#L266'>removePID</a>(pidfile)</tt>	Remove the specified pid file if possible errors are logged not.
<tt style='background-color:#E8E8E8;'> scripts.UnixApplicationRunner <a href=' /scripts/_twistd_unix.py#L287'>setupEnvironment</a>(chroot,rundir,nodaemon,umask)</tt>	Set the filesystem root the working directory and daemonize.
<tt style='background-color:#E8E8E8;'> scripts.UnixApplicationRunner <a href=' /scripts/_twistd_unix.py#L328'>daemonize</a>(reactor)</tt>	Daemonizes the application on unix this is done by the usual double.
<tt style='background-color:#E8E8E8;'> scripts.UnixApplicationRunner <a href=' /scripts/_twistd_unix.py#L373'>_waitForStart</a>(readPipe)</tt>	Wait for the daemonization success.
<tt style='background-color:#E8E8E8;'> scripts.UnixApplicationRunner <a href=' /scripts/_twistd_unix.py#L393'>shedPrivileges</a>(euid,uid,gid)</tt>	Change the uid and gid or the euid and egid of this process.
<tt style='background-color:#E8E8E8;'> scripts.UnixApplicationRunner <a href=' /scripts/_twistd_unix.py#L419'>startApplication</a>(application)</tt>	Configure global process state based on the given application and run the application.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L136'>sibLink</a>(name)</tt>	Return the text that links to a sibling of the requested resource.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L146'>childLink</a>(name)</tt>	Return the text that links to a child of the requested resource.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L888'>process</a>()</tt>	Override in subclasses.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/distrib.py#L79'>write</a>(data)</tt>	Write some data as a result of an http request the first.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L960'>finish</a>()</tt>	Indicate that all response data has been written to this l{request}.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L228'>render</a>(resrc)</tt>	Ask a resource to render itself.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L335'>view_write</a>(issuer,data)</tt>	Remote version of write same interface.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L341'>view_finish</a>(issuer)</tt>	Remote version of finish same interface.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L347'>view_addCookie</a>(issuer,k,v)</tt>	Remote version of addcookie same interface.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L353'>view_setHeader</a>(issuer,k,v)</tt>	Remote version of setheader same interface.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L359'>view_setLastModified</a>(issuer,when)</tt>	Remote version of setlastmodified same interface.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L365'>view_setETag</a>(issuer,tag)</tt>	Remote version of setetag same interface.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L371'>view_setResponseCode</a>(issuer,code,message)</tt>	Remote version of setresponsecode same interface.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L378'>view_registerProducer</a>(issuer,producer,streaming)</tt>	Remote version of registerproducer same interface.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L393'>session</a>()</tt>	If a session has already been created or looked up with l{request.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L411'>getSession</a>(sessionInterface,forceNotSecure)</tt>	Check if there is a session cookie and if not create it.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L487'>rememberRootURL</a>()</tt>	Remember the currently-processed part of the url for later recalling.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/server.py#L496'>getRootURL</a>()</tt>	Get a previously-remembered url.
<tt style='background-color:#E8E8E8;'> web.GzipEncoderFactory <a href=' /web/server.py#L515'>encoderForRequest</a>(request)</tt>	Check the headers if the client accepts gzip encoding and encodes the request if so.
<tt style='background-color:#E8E8E8;'> web._GzipEncoder <a href=' /web/server.py#L558'>encode</a>(data)</tt>	Write to the request automatically compressing data on the fly.
<tt style='background-color:#E8E8E8;'> web._GzipEncoder <a href=' /web/server.py#L569'>finish</a>()</tt>	Finish handling the request request flushing any data from the zlib buffer.
<tt style='background-color:#E8E8E8;'> web.Session <a href=' /web/server.py#L606'>__init__</a>(site,uid,reactor)</tt>	Initialize a session with a unique id for that session.
<tt style='background-color:#E8E8E8;'> web.Session <a href=' /web/server.py#L623'>startCheckingExpiration</a>()</tt>	Start expiration tracking.
<tt style='background-color:#E8E8E8;'> web.Session <a href=' /web/server.py#L633'>notifyOnExpire</a>(callback)</tt>	Call this callback when the session expires or logs out.
<tt style='background-color:#E8E8E8;'> web.Session <a href=' /web/server.py#L640'>expire</a>()</tt>	Expire/logout of the session.
<tt style='background-color:#E8E8E8;'> web.Session <a href=' /web/server.py#L654'>touch</a>()</tt>	Notify session modification.
<tt style='background-color:#E8E8E8;'> web.Site <a href=' /web/server.py#L687'>__init__</a>(resource,requestFactory)</tt>	@param resource the root of the resource hierarchy all request.
<tt style='background-color:#E8E8E8;'> web.Site <a href=' /web/server.py#L716'>_mkuid</a>()</tt>	Internal generate an opaque unique id for a user's session.
<tt style='background-color:#E8E8E8;'> web.Site <a href=' /web/server.py#L724'>makeSession</a>()</tt>	Generate a new session instance and store it for future reference.
<tt style='background-color:#E8E8E8;'> web.Site <a href=' /web/server.py#L734'>getSession</a>(uid)</tt>	Get a previously generated session.
<tt style='background-color:#E8E8E8;'> web.Site <a href=' /web/server.py#L746'>buildProtocol</a>(addr)</tt>	Generate a channel attached to this site.
<tt style='background-color:#E8E8E8;'> web.Site <a href=' /web/server.py#L757'>render</a>(request)</tt>	Redirect because a site is always a directory.
<tt style='background-color:#E8E8E8;'> web.Site <a href=' /web/server.py#L765'>getChildWithDefault</a>(pathEl,request)</tt>	Emulate a resource's getchild method.
<tt style='background-color:#E8E8E8;'> web.Site <a href=' /web/server.py#L773'>getResourceFor</a>(request)</tt>	Get a resource for a request.
<tt style='background-color:#E8E8E8;'> web.Site <a href=' /web/server.py#L788'>acceptableProtocols</a>()</tt>	Protocols this server can speak.
<tt style='background-color:#E8E8E8;'> web.CGIScript <a href=' /web/twcgi.py#L55'>__init__</a>(filename,registry,reactor)</tt>	Initialize with the name of a cgi script file.
<tt style='background-color:#E8E8E8;'> web.CGIScript <a href=' /web/twcgi.py#L68'>render</a>(request)</tt>	Do various things to conform to the cgi specification.
<tt style='background-color:#E8E8E8;'> web.CGIScript <a href=' /web/twcgi.py#L133'>runProcess</a>(env,request,qargs)</tt>	Run the cgi script.
<tt style='background-color:#E8E8E8;'> web.FilteredScript <a href=' /web/twcgi.py#L175'>runProcess</a>(env,request,qargs)</tt>	Run a script through the c{filter} executable.
<tt style='background-color:#E8E8E8;'> web.CGIProcessProtocol <a href=' /web/twcgi.py#L249'>outReceived</a>(output)</tt>	Handle a chunk of input.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_flatten.py#L26'>escapeForContent</a>(data)</tt>	Escape some character or utf-8 byte data for inclusion in an html or xml document by replacing metacharacters (c{&<>}) with their entity.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_flatten.py#L50'>attributeEscapingDoneOutside</a>(data)</tt>	Escape some character or utf-8 byte data for inclusion in the top level of an attribute.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_flatten.py#L72'>writeWithAttributeEscaping</a>(write)</tt>	Decorate a c{write} callable so that all output written is properly quoted for inclusion within an xml attribute value.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_flatten.py#L116'>escapedCDATA</a>(data)</tt>	Escape cdata for inclusion in a document.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_flatten.py#L133'>escapedComment</a>(data)</tt>	Escape a comment for inclusion in a document.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_flatten.py#L153'>_getSlotValue</a>(name,slotData,default)</tt>	Find the value of the named slot in the given stack of slot data.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_flatten.py#L167'>_flattenElement</a>(request,root,write,slotData)</tt>	Make c{root} slightly more flat by yielding all its immediate contents as strings deferreds or generators that are recursive calls to itself.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_flatten.py#L287'>_flattenTree</a>(request,root,write)</tt>	Make c{root} into an iterable of l{bytes} and l{deferred} by doing a depth first traversal of the tree.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_flatten.py#L333'>_writeFlattenedData</a>(state,write,result)</tt>	Take strings from an iterator and pass them to a writer function.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_flatten.py#L367'>flatten</a>(request,root,write)</tt>	Incrementally write out a string representation of c{root} using c{write}.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_flatten.py#L397'>flattenString</a>(request,root)</tt>	Collate a string representation of c{root} into a single string.
<tt style='background-color:#E8E8E8;'> web.IResource <a href=' /web/resource.py#L41'>getChildWithDefault</a>(name,request)</tt>	Return a child with the given name for the given request.
<tt style='background-color:#E8E8E8;'> web.IResource <a href=' /web/resource.py#L61'>putChild</a>(path,child)</tt>	Put a child iresource implementor at the given path.
<tt style='background-color:#E8E8E8;'> web.IResource <a href=' /web/resource.py#L74'>render</a>(request)</tt>	Render a request this is called on the leaf resource for a request.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/resource.py#L91'>getChildForRequest</a>(resource,request)</tt>	Traverse resource tree to find who will handle the request.
<tt style='background-color:#E8E8E8;'> web.Resource <a href=' /web/resource.py#L161'>getChild</a>(path,request)</tt>	Retrieve a 'child' resource from me.
<tt style='background-color:#E8E8E8;'> web.Resource <a href=' /web/resource.py#L185'>getChildWithDefault</a>(path,request)</tt>	Retrieve a static or dynamically generated child resource from me.
<tt style='background-color:#E8E8E8;'> web.Resource <a href=' /web/resource.py#L209'>putChild</a>(path,child)</tt>	Register a static child.
<tt style='background-color:#E8E8E8;'> web.Resource <a href=' /web/resource.py#L223'>render</a>(request)</tt>	Render a given resource see l{iresource}'s render method.
<tt style='background-color:#E8E8E8;'> web.Resource <a href=' /web/resource.py#L253'>render_HEAD</a>(request)</tt>	Default handling of head method.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/resource.py#L264'>_computeAllowedMethods</a>(resource)</tt>	Compute the allowed methods on a c{resource} based on defined render_foo methods.
<tt style='background-color:#E8E8E8;'> web._IEncodingResource <a href=' /web/resource.py#L365'>getEncoder</a>(request)</tt>	Parse the request and return an encoder if applicable using l{_irequestencoderfactory.
<tt style='background-color:#E8E8E8;'> web.EncodingResourceWrapper <a href=' /web/resource.py#L400'>getEncoder</a>(request)</tt>	Browser the list of encoders looking for one applicable encoder.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/script.py#L51'>ResourceScript</a>(path,registry)</tt>	I am a normal py file which must define a 'resource' global which should be an instance of a subclass of web.
<tt style='background-color:#E8E8E8;'> web.PythonScript <a href=' /web/script.py#L148'>__init__</a>(filename,registry)</tt>	Initialize me with a script name.
<tt style='background-color:#E8E8E8;'> web.PythonScript <a href=' /web/script.py#L155'>render</a>(request)</tt>	Render me to a web client.
<tt style='background-color:#E8E8E8;'> web.Tag <a href=' /web/_stan.py#L147'>fillSlots</a>()</tt>	Remember the slots provided at this position in the dom.
<tt style='background-color:#E8E8E8;'> web.Tag <a href=' /web/_stan.py#L163'>__call__</a>()</tt>	Add children and change attributes on this tag.
<tt style='background-color:#E8E8E8;'> web.Tag <a href=' /web/_stan.py#L201'>_clone</a>(obj,deep)</tt>	Clone an arbitrary object used by l{tag clone}.
<tt style='background-color:#E8E8E8;'> web.Tag <a href=' /web/_stan.py#L221'>clone</a>(deep)</tt>	Return a clone of this tag if deep is true clone all of this tag's.
<tt style='background-color:#E8E8E8;'> web.Tag <a href=' /web/_stan.py#L254'>clear</a>()</tt>	Clear any existing children from this tag.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/microdom.py#L33'>getElementsByTagName</a>(iNode,name)</tt>	Return a list of all child elements of c{inode} with a name matching c{name}.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/microdom.py#L85'>unescape</a>(text,chars)</tt>	Perform the exact opposite of 'escape'.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/microdom.py#L91'>escape</a>(text,chars)</tt>	Escape a few xml special chars with xml entities.
<tt style='background-color:#E8E8E8;'> web.Node <a href=' /web/microdom.py#L117'>isEqualToNode</a>(other)</tt>	Compare this node to c{other} if the nodes have the same number of.
<tt style='background-color:#E8E8E8;'> web.Node <a href=' /web/microdom.py#L160'>appendChild</a>(child)</tt>	Make the given l{node} the last child of this node.
<tt style='background-color:#E8E8E8;'> web.Node <a href=' /web/microdom.py#L174'>insertBefore</a>(new,ref)</tt>	Make the given l{node} c{new} a child of this node which comes before the l{node} c{ref}.
<tt style='background-color:#E8E8E8;'> web.Node <a href=' /web/microdom.py#L196'>removeChild</a>(child)</tt>	Remove the given l{node} from this node's children.
<tt style='background-color:#E8E8E8;'> web.Node <a href=' /web/microdom.py#L214'>replaceChild</a>(newChild,oldChild)</tt>	Replace a l{node} which is already a child of this node with a different node.
<tt style='background-color:#E8E8E8;'> web.Document <a href=' /web/microdom.py#L286'>appendChild</a>(child)</tt>	Make the given l{node} the i{document element} of this l{document}.
<tt style='background-color:#E8E8E8;'> web.Text <a href=' /web/microdom.py#L385'>isEqualToNode</a>(other)</tt>	Compare this text to c{text} if the underlying values and the c{raw}.
<tt style='background-color:#E8E8E8;'> web.Element <a href=' /web/microdom.py#L488'>isEqualToNode</a>(other)</tt>	Compare this element to c{other} if the c{nodename}, c{namespace},.
<tt style='background-color:#E8E8E8;'> web.Element <a href=' /web/microdom.py#L545'>writexml</a>(stream,indent,addindent,newl)</tt>	Serialize this l{element} to the given stream.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/microdom.py#L940'>parse</a>(readable)</tt>	Parse html or xml readable.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/microdom.py#L983'>parseXML</a>(readable)</tt>	Parse an xml readable object.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/microdom.py#L988'>parseXMLString</a>(st)</tt>	Parse an xml readable object.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/html.py#L16'>PRE</a>(text)</tt>	Wrap <pre> tags around some text and html-escape it.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/util.py#L40'>redirectTo</a>(URL,request)</tt>	Generate a redirect to the given location.
<tt style='background-color:#E8E8E8;'> web._SourceLineElement <a href=' /web/util.py#L166'>sourceLine</a>(request,tag)</tt>	Render the line of source as a child of c{tag}.
<tt style='background-color:#E8E8E8;'> web._SourceLineElement <a href=' /web/util.py#L174'>lineNumber</a>(request,tag)</tt>	Render the line number as a child of c{tag}.
<tt style='background-color:#E8E8E8;'> web._SourceFragmentElement <a href=' /web/util.py#L198'>_getSourceLines</a>()</tt>	Find the source line references by c{self frame} and yield in source.
<tt style='background-color:#E8E8E8;'> web._SourceFragmentElement <a href=' /web/util.py#L213'>sourceLines</a>(request,tag)</tt>	Render the source line indicated by c{self frame} and several.
<tt style='background-color:#E8E8E8;'> web._FrameElement <a href=' /web/util.py#L247'>filename</a>(request,tag)</tt>	Render the name of the file this frame references as a child of c{tag}.
<tt style='background-color:#E8E8E8;'> web._FrameElement <a href=' /web/util.py#L255'>lineNumber</a>(request,tag)</tt>	Render the source line number this frame references as a child of c{tag}.
<tt style='background-color:#E8E8E8;'> web._FrameElement <a href=' /web/util.py#L264'>function</a>(request,tag)</tt>	Render the function name this frame references as a child of c{tag}.
<tt style='background-color:#E8E8E8;'> web._FrameElement <a href=' /web/util.py#L272'>source</a>(request,tag)</tt>	Render the source code surrounding the line this frame references replacing c{tag}.
<tt style='background-color:#E8E8E8;'> web._StackElement <a href=' /web/util.py#L291'>frames</a>(request,tag)</tt>	Render the list of frames in this l{_stackelement}, replacing c{tag}.
<tt style='background-color:#E8E8E8;'> web.FailureElement <a href=' /web/util.py#L393'>type</a>(request,tag)</tt>	Render the exception type as a child of c{tag}.
<tt style='background-color:#E8E8E8;'> web.FailureElement <a href=' /web/util.py#L401'>value</a>(request,tag)</tt>	Render the exception value as a child of c{tag}.
<tt style='background-color:#E8E8E8;'> web.FailureElement <a href=' /web/util.py#L409'>traceback</a>(request,tag)</tt>	Render all the frames in the wrapped l{failure<twisted.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/util.py#L420'>formatFailure</a>(myFailure)</tt>	Construct an html representation of the given failure.
<tt style='background-color:#E8E8E8;'> web._ErrorStream <a href=' /web/wsgi.py#L113'>write</a>(data)</tt>	Generate an event for the logging system with the given bytes as the message.
<tt style='background-color:#E8E8E8;'> web._ErrorStream <a href=' /web/wsgi.py#L137'>writelines</a>(iovec)</tt>	Join the given lines and pass them to c{write} to be handled in the usual way.
<tt style='background-color:#E8E8E8;'> web._ErrorStream <a href=' /web/wsgi.py#L153'>flush</a>()</tt>	Nothing is buffered so flushing does nothing this method is required.
<tt style='background-color:#E8E8E8;'> web._InputStream <a href=' /web/wsgi.py#L173'>__init__</a>(input)</tt>	Initialize the instance.
<tt style='background-color:#E8E8E8;'> web._InputStream <a href=' /web/wsgi.py#L182'>read</a>(size)</tt>	Pass through to the underlying c{read}.
<tt style='background-color:#E8E8E8;'> web._InputStream <a href=' /web/wsgi.py#L194'>readline</a>(size)</tt>	Pass through to the underlying c{readline}, with a size of c{-1} replaced with a size of l{none}.
<tt style='background-color:#E8E8E8;'> web._InputStream <a href=' /web/wsgi.py#L208'>readlines</a>(size)</tt>	Pass through to the underlying c{readlines}.
<tt style='background-color:#E8E8E8;'> web._InputStream <a href=' /web/wsgi.py#L220'>__iter__</a>()</tt>	Pass through to the underlying c{__iter__}.
<tt style='background-color:#E8E8E8;'> web._WSGIResponse <a href=' /web/wsgi.py#L342'>_finished</a>(ignored)</tt>	Record the end of the response generation for the request being serviced.
<tt style='background-color:#E8E8E8;'> web._WSGIResponse <a href=' /web/wsgi.py#L350'>startResponse</a>(status,headers,excInfo)</tt>	The wsgi i{start_response} callable the given values are saved until.
<tt style='background-color:#E8E8E8;'> web._WSGIResponse <a href=' /web/wsgi.py#L415'>write</a>(data)</tt>	The wsgi i{write} callable returned by the i{start_response} callable.
<tt style='background-color:#E8E8E8;'> web._WSGIResponse <a href=' /web/wsgi.py#L460'>_sendResponseHeaders</a>()</tt>	Set the response code and response headers on the request object but do not flush them.
<tt style='background-color:#E8E8E8;'> web._WSGIResponse <a href=' /web/wsgi.py#L480'>start</a>()</tt>	Start the wsgi application in the threadpool.
<tt style='background-color:#E8E8E8;'> web._WSGIResponse <a href=' /web/wsgi.py#L489'>run</a>()</tt>	Call the wsgi application object iterate it and handle its output.
<tt style='background-color:#E8E8E8;'> web.WSGIResource <a href=' /web/wsgi.py#L551'>render</a>(request)</tt>	Turn the request into the appropriate c{environ} c{dict} suitable to be passed to the wsgi application object and then pass it on.
<tt style='background-color:#E8E8E8;'> web.WSGIResource <a href=' /web/wsgi.py#L567'>getChildWithDefault</a>(name,request)</tt>	Reject attempts to retrieve a child resource all path segments beyond.
<tt style='background-color:#E8E8E8;'> web.WSGIResource <a href=' /web/wsgi.py#L576'>putChild</a>(path,child)</tt>	Reject attempts to add a child resource to this resource the wsgi.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/http.py#L165'>urlparse</a>(url)</tt>	Parse an url into six components.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/http.py#L194'>parse_qs</a>(qs,keep_blank_values,strict_parsing)</tt>	Like c{cgi parse_qs}, but with support for parsing byte strings on python 3.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/http.py#L220'>datetimeToString</a>(msSinceEpoch)</tt>	Convert seconds since epoch to http datetime string.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/http.py#L237'>datetimeToLogString</a>(msSinceEpoch)</tt>	Convert seconds since epoch to log datetime string.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/http.py#L253'>timegm</a>(year,month,day,hour)</tt>	Convert time tuple in gmt to seconds since epoch gmt.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/http.py#L274'>stringToDatetime</a>(dateString)</tt>	Convert an http date string one of three formats to seconds since epoch.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/http.py#L330'>toChunk</a>(data)</tt>	Convert string to a chunk.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/http.py#L342'>fromChunk</a>(data)</tt>	Convert chunk to string.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/http.py#L363'>parseContentRange</a>(header)</tt>	Parse a content-range header into start end reallength.
<tt style='background-color:#E8E8E8;'> web._IDeprecatedHTTPChannelToRequestInterface <a href=' /web/http.py#L396'>connectionLost</a>(reason)</tt>	The underlying connection has been lost.
<tt style='background-color:#E8E8E8;'> web._IDeprecatedHTTPChannelToRequestInterface <a href=' /web/http.py#L406'>gotLength</a>(length)</tt>	Called when l{httpchannel} has determined the length if any of the incoming request's body.
<tt style='background-color:#E8E8E8;'> web._IDeprecatedHTTPChannelToRequestInterface <a href=' /web/http.py#L417'>handleContentChunk</a>(data)</tt>	Deliver a received chunk of body data to the request note.
<tt style='background-color:#E8E8E8;'> web._IDeprecatedHTTPChannelToRequestInterface <a href=' /web/http.py#L427'>parseCookies</a>()</tt>	Parse the request's cookies out of received headers.
<tt style='background-color:#E8E8E8;'> web._IDeprecatedHTTPChannelToRequestInterface <a href=' /web/http.py#L433'>requestReceived</a>(command,path,version)</tt>	Called when the entire request including its body has been received.
<tt style='background-color:#E8E8E8;'> web._IDeprecatedHTTPChannelToRequestInterface <a href=' /web/http.py#L450'>__eq__</a>(other)</tt>	Determines if two requests are the same object.
<tt style='background-color:#E8E8E8;'> web._IDeprecatedHTTPChannelToRequestInterface <a href=' /web/http.py#L463'>__ne__</a>(other)</tt>	Determines if two requests are not the same object.
<tt style='background-color:#E8E8E8;'> web.HTTPClient <a href=' /web/http.py#L529'>extractHeader</a>(header)</tt>	Given a complete http header extract the field name and value and process the header.
<tt style='background-color:#E8E8E8;'> web.HTTPClient <a href=' /web/http.py#L545'>lineReceived</a>(line)</tt>	Parse the status line and headers for an http request.
<tt style='background-color:#E8E8E8;'> web.HTTPClient <a href=' /web/http.py#L590'>handleResponseEnd</a>()</tt>	The response has been completely received.
<tt style='background-color:#E8E8E8;'> web.HTTPClient <a href=' /web/http.py#L607'>handleStatus</a>(version,status,message)</tt>	Called when the status-line is received.
<tt style='background-color:#E8E8E8;'> web.HTTPClient <a href=' /web/http.py#L617'>handleHeader</a>(key,val)</tt>	Called every time a header is received.
<tt style='background-color:#E8E8E8;'> web.HTTPClient <a href=' /web/http.py#L622'>handleEndHeaders</a>()</tt>	Called when all headers have been received.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/_newclient.py#L593'>__init__</a>(channel,queued)</tt>	@param channel the channel we're connected to.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L723'>_cleanup</a>()</tt>	Called when have finished responding and are no longer queued.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L745'>noLongerQueued</a>()</tt>	Notify the object that it is no longer queued.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L759'>gotLength</a>(length)</tt>	Called when http channel got length of content in this request.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L775'>parseCookies</a>()</tt>	Parse cookie headers.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L797'>handleContentChunk</a>(data)</tt>	Write a chunk of data.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L806'>requestReceived</a>(command,path,version)</tt>	Called by channel when all data has been received.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L872'>__repr__</a>()</tt>	Return a string description of the request including such information as the request method and request uri.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/distrib.py#L96'>registerProducer</a>(producer,streaming)</tt>	Register a producer.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/distrib.py#L101'>unregisterProducer</a>()</tt>	Unregister the producer.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L922'>getHeader</a>(key)</tt>	Get an http request header.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L938'>getCookie</a>(key)</tt>	Get a cookie that was sent from the network.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L945'>notifyFinish</a>()</tt>	Notify when the response to this request has finished.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1062'>addCookie</a>(k,v,expires,domain)</tt>	Set an outgoing http cookie.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1143'>setResponseCode</a>(code,message)</tt>	Set the http response code.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1161'>setHeader</a>(name,value)</tt>	Set an http response header overrides any previously set values for.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1175'>redirect</a>(url)</tt>	Utility function that does a redirect.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1185'>setLastModified</a>(when)</tt>	Set the c{last-modified} time for the response to this request.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1222'>setETag</a>(etag)</tt>	Set an c{entity tag} for the outgoing response.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1255'>getAllHeaders</a>()</tt>	Return dictionary mapping the names of all received headers to the last value received for each.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1269'>getRequestHostname</a>()</tt>	Get the hostname that the user passed in to the request.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1287'>getHost</a>()</tt>	Get my originally requesting transport's host.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1297'>setHost</a>(host,port,ssl)</tt>	Change the host and port the request thinks it's using.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1332'>getClientIP</a>()</tt>	Return the ip address of the client who submitted this request.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1344'>isSecure</a>()</tt>	Return l{true} if this request is using a secure transport.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1385'>getUser</a>()</tt>	Return the http user sent with this request if any.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1402'>getPassword</a>()</tt>	Return the http password sent with this request if any.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1419'>getClient</a>()</tt>	Get the client's ip address if it has one no attempt is made to.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1430'>connectionLost</a>(reason)</tt>	There is no longer a connection for this request to respond over.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1444'>loseConnection</a>()</tt>	Pass the loseconnection through to the underlying channel.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1451'>__eq__</a>(other)</tt>	Determines if two requests are the same object.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/http.py#L1472'>__ne__</a>(other)</tt>	Determines if two requests are not the same object.
<tt style='background-color:#E8E8E8;'> web._IdentityTransferDecoder <a href=' /web/http.py#L1559'>dataReceived</a>(data)</tt>	Interpret the next chunk of bytes received either deliver them to the.
<tt style='background-color:#E8E8E8;'> web._IdentityTransferDecoder <a href=' /web/http.py#L1591'>noMoreData</a>()</tt>	All data which will be delivered to this decoder has been check to.
<tt style='background-color:#E8E8E8;'> web._ChunkedTransferDecoder <a href=' /web/http.py#L1714'>dataReceived</a>(data)</tt>	Interpret data from a request or response body which uses the i{chunked} transfer-encoding.
<tt style='background-color:#E8E8E8;'> web._ChunkedTransferDecoder <a href=' /web/http.py#L1725'>noMoreData</a>()</tt>	Verify that all data has been received if it has not been raise.
<tt style='background-color:#E8E8E8;'> web._NoPushProducer <a href=' /web/http.py#L1744'>pauseProducing</a>()</tt>	Pause producing data.
<tt style='background-color:#E8E8E8;'> web._NoPushProducer <a href=' /web/http.py#L1754'>resumeProducing</a>()</tt>	Resume producing data.
<tt style='background-color:#E8E8E8;'> web._NoPushProducer <a href=' /web/http.py#L1764'>registerProducer</a>(producer,streaming)</tt>	Register to receive data from a producer.
<tt style='background-color:#E8E8E8;'> web._NoPushProducer <a href=' /web/http.py#L1774'>unregisterProducer</a>()</tt>	Stop consuming data from a producer without disconnecting.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L1898'>lineReceived</a>(line)</tt>	Called for each line from request until the end of headers when it enters binary mode.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L1984'>headerReceived</a>(line)</tt>	Do pre-processing for content-length and store this header away.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2090'>checkPersistence</a>(request,version)</tt>	Check if the channel should close or not.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2134'>requestDone</a>(request)</tt>	Called by first request in queue when it is done.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2170'>forceAbortClient</a>()</tt>	Called if c{aborttimeout} seconds have passed since the timeout fired and the connection still hasn't gone away.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2194'>isSecure</a>()</tt>	Return l{true} if this channel is using a secure transport.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2209'>writeHeaders</a>(version,code,reason,headers)</tt>	Called by l{request} objects to write a complete set of http headers to a transport.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2235'>write</a>(data)</tt>	Called by l{request} objects to write response data.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2247'>writeSequence</a>(iovec)</tt>	Write a list of strings to the http response.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2259'>getPeer</a>()</tt>	Get the remote address of this connection.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2268'>getHost</a>()</tt>	Get the local address of this connection.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2277'>loseConnection</a>()</tt>	Closes the connection will write any data that is pending to be sent.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2289'>registerProducer</a>(producer,streaming)</tt>	Register to receive data from a producer.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2331'>unregisterProducer</a>()</tt>	Stop consuming data from a producer without disconnecting.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2347'>stopProducing</a>()</tt>	Stop producing data.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2360'>pauseProducing</a>()</tt>	Pause producing data.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2396'>resumeProducing</a>()</tt>	Resume producing data.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2416'>_send100Continue</a>()</tt>	Sends a 100 continue response used to signal to clients that further processing will be performed.
<tt style='background-color:#E8E8E8;'> web.HTTPChannel <a href=' /web/http.py#L2424'>_respondToBadRequestAndDisconnect</a>()</tt>	This is a quick and dirty way of responding to bad requests.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/http.py#L2440'>_escape</a>(s)</tt>	Return a string like python repr but always escaped as if surrounding quotes were double quotes.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/http.py#L2465'>combinedLogFormatter</a>(timestamp,request)</tt>	@return a combined log formatted log line for the given request.
<tt style='background-color:#E8E8E8;'> web._XForwardedForRequest <a href=' /web/http.py#L2496'>getClientIP</a>()</tt>	@return the client address the first address in the value of the i{x-forwarded-for header}.
<tt style='background-color:#E8E8E8;'> web._XForwardedForRequest <a href=' /web/http.py#L2506'>clientproto</a>()</tt>	@return the protocol version in the request.
<tt style='background-color:#E8E8E8;'> web._XForwardedForRequest <a href=' /web/http.py#L2514'>code</a>()</tt>	@return the response code for the request.
<tt style='background-color:#E8E8E8;'> web._XForwardedForRequest <a href=' /web/http.py#L2522'>sentLength</a>()</tt>	@return the number of bytes sent in the response body.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/http.py#L2532'>proxiedLogFormatter</a>(timestamp,request)</tt>	@return a combined log formatted log line for the given request but use the value of the i{x-forwarded-for} header as the value for the client.
<tt style='background-color:#E8E8E8;'> web._GenericHTTPChannelProtocol <a href=' /web/http.py#L2609'>requestFactory</a>()</tt>	A callable to use to build l{irequest} objects.
<tt style='background-color:#E8E8E8;'> web._GenericHTTPChannelProtocol <a href=' /web/http.py#L2609'>requestFactory</a>(value)</tt>	A callable to use to build l{irequest} objects.
<tt style='background-color:#E8E8E8;'> web._GenericHTTPChannelProtocol <a href=' /web/http.py#L2634'>site</a>()</tt>	A reference to the creating l{twisted web server site} object.
<tt style='background-color:#E8E8E8;'> web._GenericHTTPChannelProtocol <a href=' /web/http.py#L2634'>site</a>(value)</tt>	A reference to the creating l{twisted web server site} object.
<tt style='background-color:#E8E8E8;'> web._GenericHTTPChannelProtocol <a href=' /web/http.py#L2657'>timeOut</a>()</tt>	The idle timeout for the backing channel.
<tt style='background-color:#E8E8E8;'> web._GenericHTTPChannelProtocol <a href=' /web/http.py#L2657'>timeOut</a>(value)</tt>	The idle timeout for the backing channel.
<tt style='background-color:#E8E8E8;'> web._GenericHTTPChannelProtocol <a href=' /web/http.py#L2681'>callLater</a>()</tt>	A value for the c{calllater} callback this callback is used by the.
<tt style='background-color:#E8E8E8;'> web._GenericHTTPChannelProtocol <a href=' /web/http.py#L2681'>callLater</a>(value)</tt>	Sets the value for the c{calllater} callback this callback is used by.
<tt style='background-color:#E8E8E8;'> web._GenericHTTPChannelProtocol <a href=' /web/http.py#L2694'>dataReceived</a>(data)</tt>	An override of l{iprotocol datareceived} that checks what protocol we're.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/http.py#L2737'>_genericHTTPChannelProtocolFactory</a>()</tt>	Returns an appropriately initialized _generichttpchannelprotocol.
<tt style='background-color:#E8E8E8;'> web.HTTPFactory <a href=' /web/http.py#L2774'>__init__</a>(logPath,timeout,logFormatter,reactor)</tt>	@param logformatter an object to format requests into log lines for the access log.
<tt style='background-color:#E8E8E8;'> web.HTTPFactory <a href=' /web/http.py#L2801'>_updateLogDateTime</a>()</tt>	Update log datetime periodically so we aren't always recalculating it.
<tt style='background-color:#E8E8E8;'> web.HTTPFactory <a href=' /web/http.py#L2825'>startFactory</a>()</tt>	Set up request logging if necessary.
<tt style='background-color:#E8E8E8;'> web.HTTPFactory <a href=' /web/http.py#L2851'>_openLogFile</a>(path)</tt>	Override in subclasses e g to use l{twisted python logfile}.
<tt style='background-color:#E8E8E8;'> web.HTTPFactory <a href=' /web/http.py#L2859'>log</a>(request)</tt>	Write a line representing c{request} to the access log file.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/static.py#L77'>_addSlash</a>(request)</tt>	Add a trailing slash to c{request}'s uri.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/static.py#L120'>loadMimeTypes</a>(mimetype_locations,init)</tt>	Produces a mapping of extensions with leading dot to mime types.
<tt style='background-color:#E8E8E8;'> web.File <a href=' /web/static.py#L204'>__init__</a>(path,defaultType,ignoredExts,registry)</tt>	Create a file with the given path.
<tt style='background-color:#E8E8E8;'> web.File <a href=' /web/static.py#L246'>ignoreExt</a>(ext)</tt>	Ignore the given extension.
<tt style='background-color:#E8E8E8;'> web.File <a href=' /web/static.py#L264'>getChild</a>(path,request)</tt>	If this l{file}'s path refers to a directory return a l{file} referring to the file named c{path} in that directory.
<tt style='background-color:#E8E8E8;'> web.File <a href=' /web/static.py#L303'>openForReading</a>()</tt>	Open a file and return it.
<tt style='background-color:#E8E8E8;'> web.File <a href=' /web/static.py#L308'>getFileSize</a>()</tt>	Return file size.
<tt style='background-color:#E8E8E8;'> web.File <a href=' /web/static.py#L313'>_parseRangeHeader</a>(range)</tt>	Parse the value of a range header into start stop pairs.
<tt style='background-color:#E8E8E8;'> web.File <a href=' /web/static.py#L365'>_rangeToOffsetAndSize</a>(start,end)</tt>	Convert a start and end from a range header to an offset and size.
<tt style='background-color:#E8E8E8;'> web.File <a href=' /web/static.py#L409'>_contentRange</a>(offset,size)</tt>	Return a string suitable for the value of a content-range header for a range with the given offset and size.
<tt style='background-color:#E8E8E8;'> web.File <a href=' /web/static.py#L425'>_doSingleRangeRequest</a>(request,startAndEnd)</tt>	Set up the response for range headers that specify a single range.
<tt style='background-color:#E8E8E8;'> web.File <a href=' /web/static.py#L455'>_doMultipleRangeRequest</a>(request,byteRanges)</tt>	Set up the response for range headers that specify a single range.
<tt style='background-color:#E8E8E8;'> web.File <a href=' /web/static.py#L522'>_setContentHeaders</a>(request,size)</tt>	Set the content-length and content-type headers for this request.
<tt style='background-color:#E8E8E8;'> web.File <a href=' /web/static.py#L542'>makeProducer</a>(request,fileForReading)</tt>	Make a l{staticproducer} that will produce the body of this response.
<tt style='background-color:#E8E8E8;'> web.File <a href=' /web/static.py#L578'>render_GET</a>(request)</tt>	Begin sending the contents of this l{file} (or a subset of the contents based on the 'range' header) to the given request.
<tt style='background-color:#E8E8E8;'> web.StaticProducer <a href=' /web/static.py#L667'>__init__</a>(request,fileObject)</tt>	Initialize the instance.
<tt style='background-color:#E8E8E8;'> web.StaticProducer <a href=' /web/static.py#L683'>stopProducing</a>()</tt>	Stop producing data.
<tt style='background-color:#E8E8E8;'> web.SingleRangeStaticProducer <a href=' /web/static.py#L725'>__init__</a>(request,fileObject,offset,size)</tt>	Initialize the instance.
<tt style='background-color:#E8E8E8;'> web.MultipleRangeStaticProducer <a href=' /web/static.py#L767'>__init__</a>(request,fileObject,rangeInfo)</tt>	Initialize the instance.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/static.py#L845'>formatFileSize</a>(size)</tt>	Format the given file size in bytes to human readable format.
<tt style='background-color:#E8E8E8;'> web.DirectoryLister <a href=' /web/static.py#L952'>_getFilesAndDirectories</a>(directory)</tt>	Helper returning files and directories in given directory listing with attributes to be used to build a table content with.
<tt style='background-color:#E8E8E8;'> web.DirectoryLister <a href=' /web/static.py#L993'>_buildTableContent</a>(elements)</tt>	Build a table content using c{self linepattern} and giving elements odd.
<tt style='background-color:#E8E8E8;'> web.DirectoryLister <a href=' /web/static.py#L1006'>render</a>(request)</tt>	Render a listing of the content of c{self path}.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/domhelpers.py#L23'>substitute</a>(request,node,subs)</tt>	Look through the given node's children for strings and attempt to do string substitution with the given parameter.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/domhelpers.py#L33'>_get</a>(node,nodeId,nodeAttrs)</tt>	Internal get a node with the specified c{nodeid} as any of the c{class}, c{id} or c{pattern} attributes.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/domhelpers.py#L52'>get</a>(node,nodeId)</tt>	Get a node with the specified c{nodeid} as any of the c{class}, c{id} or c{pattern} attributes.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/domhelpers.py#L62'>getIfExists</a>(node,nodeId)</tt>	Get a node with the specified c{nodeid} as any of the c{class}, c{id} or c{pattern} attributes.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/domhelpers.py#L70'>getAndClear</a>(node,nodeId)</tt>	Get a node with the specified c{nodeid} as any of the c{class}, c{id} or c{pattern} attributes.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/domhelpers.py#L80'>clearNode</a>(node)</tt>	Remove all children from the given node.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/domhelpers.py#L86'>locateNodes</a>(nodeList,key,value,noNesting)</tt>	Find subnodes in the given node where the given attribute has the given value.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/domhelpers.py#L133'>gatherTextNodes</a>(iNode,dounescape,joinWith)</tt>	Visit each child node and collect its text data if any into a string.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/domhelpers.py#L211'>findElementsWithAttributeShallow</a>(parent,attribute)</tt>	Return an iterable of the elements which are direct children of c{parent} and which have the c{attribute} attribute.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/domhelpers.py#L221'>findElements</a>(parent,matcher)</tt>	Return an iterable of the elements which are children of c{parent} for which the predicate c{matcher} returns true.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/domhelpers.py#L268'>namedChildren</a>(parent,nodeName)</tt>	Namedchildren parent nodename -> children not descendants of parent.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L148'>connectionMade</a>()</tt>	Called by the reactor when a connection is received may also be called.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L159'>dataReceived</a>(data)</tt>	Called whenever a chunk of data is received from the transport.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L200'>timeoutConnection</a>()</tt>	Called when the connection has been inactive for l{self.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L243'>forceAbortClient</a>()</tt>	Called if c{aborttimeout} seconds have passed since the timeout fired and the connection still hasn't gone away.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L257'>connectionLost</a>(reason)</tt>	Called when the transport connection is lost.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L323'>stopProducing</a>()</tt>	Stop producing data.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L333'>pauseProducing</a>()</tt>	Pause producing data.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L343'>resumeProducing</a>()</tt>	Resume producing data.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L356'>_sendPrioritisedData</a>()</tt>	The data sending loop this function repeatedly calls itself either.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L434'>_requestReceived</a>(event)</tt>	Internal handler for when a request has been received.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L465'>_requestDataReceived</a>(event)</tt>	Internal handler for when a chunk of data is received for a given request.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L478'>_requestEnded</a>(event)</tt>	Internal handler for when a request is complete and we expect no further data for that request.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L491'>_requestAborted</a>(event)</tt>	Internal handler for when a request is aborted by a remote peer.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L504'>_handlePriorityUpdate</a>(event)</tt>	Internal handler for when a stream priority is updated.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L532'>writeHeaders</a>(version,code,reason,headers)</tt>	Called by l{twisted web http request} objects to write a complete set.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L565'>writeDataToStream</a>(streamID,data)</tt>	May be called by l{h2stream} objects to write response data to a given stream.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L592'>endRequest</a>(streamID)</tt>	Called by l{h2stream} objects to signal completion of a response.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L607'>abortRequest</a>(streamID)</tt>	Called by l{h2stream} objects to request early termination of a stream.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L620'>_requestDone</a>(streamID)</tt>	Called internally by the data sending loop to clean up state that was being used for the stream.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L635'>remainingOutboundWindow</a>(streamID)</tt>	Called to determine how much room is left in the send window for a given stream.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L660'>_handleWindowUpdate</a>(event)</tt>	Manage flow control windows.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L697'>getPeer</a>()</tt>	Get the remote address of this connection.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L711'>getHost</a>()</tt>	Similar to getpeer but returns an address describing this side of the connection.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L721'>openStreamWindow</a>(streamID,increment)</tt>	Open the stream window by a given increment.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L738'>_isSecure</a>()</tt>	Returns l{true} if this channel is using a secure transport.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L749'>_send100Continue</a>(streamID)</tt>	Sends a 100 continue response used to signal to clients that further processing will be performed.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L763'>_respondToBadRequestAndDisconnect</a>(streamID)</tt>	This is a quick and dirty way of responding to bad requests.
<tt style='background-color:#E8E8E8;'> web.H2Connection <a href=' /web/_http2.py#L792'>_streamIsActive</a>(streamID)</tt>	Checks whether twisted has still got state for a given stream and so can process events for that stream.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L867'>__init__</a>(streamID,connection,headers,requestFactory)</tt>	Initialize this http/2 stream.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L914'>_convertHeaders</a>(headers)</tt>	This method converts the http/2 header set into something that looks like http/1.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L952'>receiveDataChunk</a>(data,flowControlledLength)</tt>	Called when the connection has received a chunk of data from the underlying transport.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L975'>requestComplete</a>()</tt>	Called by the l{h2connection} when the all data for a request has been received.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L988'>connectionLost</a>(reason)</tt>	Called by the l{h2connection} when a connection is lost or a stream is reset.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L999'>windowUpdated</a>()</tt>	Called by the l{h2connection} when this stream's flow control window has been opened.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1025'>flowControlBlocked</a>()</tt>	Called by the l{h2connection} when this stream's flow control window has been exhausted.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1039'>writeHeaders</a>(version,code,reason,headers)</tt>	Called by the consumer to write headers to the stream.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1059'>requestDone</a>(request)</tt>	Called by a consumer to clean up whatever permanent state is in use.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1069'>_send100Continue</a>()</tt>	Sends a 100 continue response used to signal to clients that further processing will be performed.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1077'>_respondToBadRequestAndDisconnect</a>()</tt>	This is a quick and dirty way of responding to bad requests.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1093'>write</a>(data)</tt>	Write a single chunk of data into a data frame.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1104'>writeSequence</a>(iovec)</tt>	Write a sequence of chunks of data into data frames.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1115'>loseConnection</a>()</tt>	Close the connection after writing all pending data.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1122'>abortConnection</a>()</tt>	Forcefully abort the connection by sending a rststream frame.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1129'>getPeer</a>()</tt>	Get information about the peer.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1136'>getHost</a>()</tt>	Similar to getpeer but for this side of the connection.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1143'>isSecure</a>()</tt>	Returns l{true} if this channel is using a secure transport.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1154'>registerProducer</a>(producer,streaming)</tt>	Register to receive data from a producer.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1197'>unregisterProducer</a>()</tt>	@see l{iconsumer unregisterproducer}.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1211'>stopProducing</a>()</tt>	@see l{iproducer stopproducing}.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1219'>pauseProducing</a>()</tt>	@see l{ipushproducer pauseproducing}.
<tt style='background-color:#E8E8E8;'> web.H2Stream <a href=' /web/_http2.py#L1226'>resumeProducing</a>()</tt>	@see l{ipushproducer resumeproducing}.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_http2.py#L1248'>_addHeaderToRequest</a>(request,header)</tt>	Add a header tuple to a request header object.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/html.py#L45'>output</a>(func)</tt>	Output(func *args **kw) -> html string either return the result of a function (which presumably returns an.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/distrib.py#L51'>setCopyableState</a>(state)</tt>	Initialize this l{twisted web distrib request} based on the copied.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/distrib.py#L79'>write</a>(bytes)</tt>	Write the given bytes to the response body.
<tt style='background-color:#E8E8E8;'> web.ResourceSubscription <a href=' /web/distrib.py#L143'>__getstate__</a>()</tt>	Get persistent state for this resourcesubscription.
<tt style='background-color:#E8E8E8;'> web.ResourceSubscription <a href=' /web/distrib.py#L156'>connected</a>(publisher)</tt>	I've connected to a publisher i'll now send all my requests.
<tt style='background-color:#E8E8E8;'> web.ResourceSubscription <a href=' /web/distrib.py#L167'>notConnected</a>(msg)</tt>	I can't connect to a publisher i'll now reply to all pending requests.
<tt style='background-color:#E8E8E8;'> web.ResourceSubscription <a href=' /web/distrib.py#L182'>render</a>(request)</tt>	Render this request from my server.
<tt style='background-color:#E8E8E8;'> web.ResourcePublisher <a href=' /web/distrib.py#L234'>remote_request</a>(request)</tt>	Look up the resource for the given request and render it.
<tt style='background-color:#E8E8E8;'> web.UserDirectory <a href=' /web/distrib.py#L309'>_users</a>()</tt>	Return a list of two-tuples giving links to user resources and text to associate with those links.
<tt style='background-color:#E8E8E8;'> web.UserDirectory <a href=' /web/distrib.py#L329'>render_GET</a>(request)</tt>	Render as html a listing of all known users with links to their personal resources.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/http_headers.py#L14'>_dashCapitalize</a>(name)</tt>	Return a byte string which is capitalized using '-' as a word separator.
<tt style='background-color:#E8E8E8;'> web.Headers <a href=' /web/http_headers.py#L66'>__repr__</a>()</tt>	Return a string fully describing the headers set on this object.
<tt style='background-color:#E8E8E8;'> web.Headers <a href=' /web/http_headers.py#L73'>__cmp__</a>(other)</tt>	Define l{headers} instances as being equal to each other if they have the same raw headers.
<tt style='background-color:#E8E8E8;'> web.Headers <a href=' /web/http_headers.py#L85'>_encodeName</a>(name)</tt>	Encode the name of a header (eg 'content-type') to an iso-8859-1 encoded bytestring if required.
<tt style='background-color:#E8E8E8;'> web.Headers <a href=' /web/http_headers.py#L101'>_encodeValue</a>(value)</tt>	Encode a single header value to a utf-8 encoded bytestring if required.
<tt style='background-color:#E8E8E8;'> web.Headers <a href=' /web/http_headers.py#L116'>_encodeValues</a>(values)</tt>	Encode a l{list} of header values to a l{list} of utf-8 encoded bytestrings if required.
<tt style='background-color:#E8E8E8;'> web.Headers <a href=' /web/http_headers.py#L134'>_decodeValues</a>(values)</tt>	Decode a l{list} of header values into a l{list} of unicode strings.
<tt style='background-color:#E8E8E8;'> web.Headers <a href=' /web/http_headers.py#L151'>copy</a>()</tt>	Return a copy of itself with the same headers set.
<tt style='background-color:#E8E8E8;'> web.Headers <a href=' /web/http_headers.py#L160'>hasHeader</a>(name)</tt>	Check for the existence of a given header.
<tt style='background-color:#E8E8E8;'> web.Headers <a href=' /web/http_headers.py#L173'>removeHeader</a>(name)</tt>	Remove the named header from this header object.
<tt style='background-color:#E8E8E8;'> web.Headers <a href=' /web/http_headers.py#L185'>setRawHeaders</a>(name,values)</tt>	Sets the raw representation of the given header.
<tt style='background-color:#E8E8E8;'> web.Headers <a href=' /web/http_headers.py#L206'>addRawHeader</a>(name,value)</tt>	Add a new raw value for the given header.
<tt style='background-color:#E8E8E8;'> web.Headers <a href=' /web/http_headers.py#L226'>getRawHeaders</a>(name,default)</tt>	Returns a list of headers matching the given name as the raw string given.
<tt style='background-color:#E8E8E8;'> web.Headers <a href=' /web/http_headers.py#L250'>getAllRawHeaders</a>()</tt>	Return an iterator of key value pairs of all headers contained in this object as l{bytes}.
<tt style='background-color:#E8E8E8;'> web.Headers <a href=' /web/http_headers.py#L260'>_canonicalNameCaps</a>(name)</tt>	Return the canonical name for the given header.
<tt style='background-color:#E8E8E8;'> web._NSContext <a href=' /web/template.py#L61'>__init__</a>(parent)</tt>	Pull out the parent's namespaces if there's no parent then default to xml.
<tt style='background-color:#E8E8E8;'> web._NSContext <a href=' /web/template.py#L73'>get</a>(k,d)</tt>	Get a prefix for a namespace.
<tt style='background-color:#E8E8E8;'> web._NSContext <a href=' /web/template.py#L82'>__setitem__</a>(k,v)</tt>	Proxy through to setting the prefix for the namespace.
<tt style='background-color:#E8E8E8;'> web._NSContext <a href=' /web/template.py#L89'>__getitem__</a>(k)</tt>	Proxy through to getting the prefix for the namespace.
<tt style='background-color:#E8E8E8;'> web._ToStan <a href=' /web/template.py#L103'>__init__</a>(sourceFilename)</tt>	@param sourcefilename the filename to load the xml out of.
<tt style='background-color:#E8E8E8;'> web._ToStan <a href=' /web/template.py#L112'>setDocumentLocator</a>(locator)</tt>	Set the document locator which knows about line and character numbers.
<tt style='background-color:#E8E8E8;'> web._ToStan <a href=' /web/template.py#L119'>startDocument</a>()</tt>	Initialise the document.
<tt style='background-color:#E8E8E8;'> web._ToStan <a href=' /web/template.py#L135'>processingInstruction</a>(target,data)</tt>	Processing instructions are ignored.
<tt style='background-color:#E8E8E8;'> web._ToStan <a href=' /web/template.py#L141'>startPrefixMapping</a>(prefix,uri)</tt>	Set up the prefix mapping which maps fully qualified namespace uris onto namespace prefixes.
<tt style='background-color:#E8E8E8;'> web._ToStan <a href=' /web/template.py#L164'>endPrefixMapping</a>(prefix)</tt>	"pops the stack" on the prefix mapping.
<tt style='background-color:#E8E8E8;'> web._ToStan <a href=' /web/template.py#L173'>startElementNS</a>(namespaceAndName,qname,attrs)</tt>	Gets called when we encounter a new xmlns attribute.
<tt style='background-color:#E8E8E8;'> web._ToStan <a href=' /web/template.py#L272'>characters</a>(ch)</tt>	Called when we receive some characters cdata characters get passed.
<tt style='background-color:#E8E8E8;'> web._ToStan <a href=' /web/template.py#L285'>endElementNS</a>(name,qname)</tt>	A namespace tag is closed pop the stack if there's anything left in.
<tt style='background-color:#E8E8E8;'> web._ToStan <a href=' /web/template.py#L297'>startDTD</a>(name,publicId,systemId)</tt>	Dtds are ignored.
<tt style='background-color:#E8E8E8;'> web._ToStan <a href=' /web/template.py#L303'>endDTD</a>()</tt>	Dtds are ignored.
<tt style='background-color:#E8E8E8;'> web._ToStan <a href=' /web/template.py#L309'>startCDATA</a>()</tt>	We're starting to be in a cdata element make a note of this.
<tt style='background-color:#E8E8E8;'> web._ToStan <a href=' /web/template.py#L317'>endCDATA</a>()</tt>	We're no longer in a cdata element collect up the characters we've.
<tt style='background-color:#E8E8E8;'> web._ToStan <a href=' /web/template.py#L327'>comment</a>(content)</tt>	Add an xml comment which we've encountered.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/template.py#L335'>_flatsaxParse</a>(fl)</tt>	Perform a sax parse of an xml document with the _tostan class.
<tt style='background-color:#E8E8E8;'> web.TagLoader <a href=' /web/template.py#L369'>__init__</a>(tag)</tt>	@param tag the object which will be loaded.
<tt style='background-color:#E8E8E8;'> web.XMLString <a href=' /web/template.py#L391'>__init__</a>(s)</tt>	Run the parser on a l{nativestringio} copy of the string.
<tt style='background-color:#E8E8E8;'> web.XMLString <a href=' /web/template.py#L404'>load</a>()</tt>	Return the document.
<tt style='background-color:#E8E8E8;'> web.XMLFile <a href=' /web/template.py#L427'>__init__</a>(path)</tt>	Run the parser on a file.
<tt style='background-color:#E8E8E8;'> web.XMLFile <a href=' /web/template.py#L443'>_loadDoc</a>()</tt>	Read and parse the xml.
<tt style='background-color:#E8E8E8;'> web.XMLFile <a href=' /web/template.py#L461'>load</a>()</tt>	Return the document first loading it if necessary.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/template.py#L526'>renderElement</a>(request,element,doctype,_failElement)</tt>	Render an element or other c{irenderable}.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/xmlrpc.py#L43'>withRequest</a>(f)</tt>	Decorator to cause the request to be passed as the first argument to the method.
<tt style='background-color:#E8E8E8;'> web.XMLRPC <a href=' /web/xmlrpc.py#L213'>lookupProcedure</a>(procedurePath)</tt>	Given a string naming a procedure return a callable object for that procedure or raise nosuchfunction.
<tt style='background-color:#E8E8E8;'> web.XMLRPC <a href=' /web/xmlrpc.py#L251'>listProcedures</a>()</tt>	Return a list of the names of all xmlrpc procedures.
<tt style='background-color:#E8E8E8;'> web.XMLRPCIntrospection <a href=' /web/xmlrpc.py#L273'>__init__</a>(parent)</tt>	Implement introspection support for an xmlrpc server.
<tt style='background-color:#E8E8E8;'> web.XMLRPCIntrospection <a href=' /web/xmlrpc.py#L283'>xmlrpc_listMethods</a>()</tt>	Return a list of the method names implemented by this server.
<tt style='background-color:#E8E8E8;'> web.XMLRPCIntrospection <a href=' /web/xmlrpc.py#L299'>xmlrpc_methodHelp</a>(method)</tt>	Return a documentation string describing the use of the given method.
<tt style='background-color:#E8E8E8;'> web.XMLRPCIntrospection <a href=' /web/xmlrpc.py#L309'>xmlrpc_methodSignature</a>(method)</tt>	Return a list of type signatures.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/xmlrpc.py#L325'>addIntrospection</a>(xmlrpc)</tt>	Add introspection support to an xmlrpc server.
<tt style='background-color:#E8E8E8;'> web.QueryProtocol <a href=' /web/xmlrpc.py#L356'>handleResponse</a>(contents)</tt>	Handle the xml-rpc response received from the server.
<tt style='background-color:#E8E8E8;'> web.QueryProtocol <a href=' /web/xmlrpc.py#L367'>connectionLost</a>(reason)</tt>	The connection to the server has been lost.
<tt style='background-color:#E8E8E8;'> web._QueryFactory <a href=' /web/xmlrpc.py#L415'>__init__</a>(path,host,method,user)</tt>	@param method the name of the method to call.
<tt style='background-color:#E8E8E8;'> web.Proxy <a href=' /web/soap.py#L128'>__init__</a>(url,user,password,allowNone)</tt>	@param url the url to which to post method calls calls will be made.
<tt style='background-color:#E8E8E8;'> web.Proxy <a href=' /web/soap.py#L147'>callRemote</a>(method)</tt>	Call remote xml-rpc c{method} with given arguments.
<tt style='background-color:#E8E8E8;'> web.HTTPPageGetter <a href=' /web/client.py#L114'>handleHeader</a>(key,value)</tt>	Called every time a header is received stores the header information.
<tt style='background-color:#E8E8E8;'> web.HTTPPageGetter <a href=' /web/client.py#L129'>handleStatus</a>(version,status,message)</tt>	Handle the http status line.
<tt style='background-color:#E8E8E8;'> web.HTTPPageGetter <a href=' /web/client.py#L211'>connectionLost</a>(reason)</tt>	When the connection used to issue the http request is closed notify the factory if we have not already so it can produce a result.
<tt style='background-color:#E8E8E8;'> web.HTTPClientFactory <a href=' /web/client.py#L377'>_waitForDisconnect</a>(passthrough)</tt>	Chain onto the _disconnecteddeferred preserving c{passthrough}, so that the result is only available after the associated connection has been.
<tt style='background-color:#E8E8E8;'> web.HTTPClientFactory <a href=' /web/client.py#L423'>gotStatus</a>(version,status,message)</tt>	Set the status of the request on us.
<tt style='background-color:#E8E8E8;'> web.HTTPClientFactory <a href=' /web/client.py#L447'>clientConnectionFailed</a>(_,reason)</tt>	When a connection attempt fails the request cannot be issued if no.
<tt style='background-color:#E8E8E8;'> web.HTTPDownloader <a href=' /web/client.py#L516'>pageStart</a>(partialContent)</tt>	Called on page download start.
<tt style='background-color:#E8E8E8;'> web.HTTPDownloader <a href=' /web/client.py#L542'>noPage</a>(reason)</tt>	Close the storage file and errback the waiting l{deferred} with the given reason.
<tt style='background-color:#E8E8E8;'> web.URI <a href=' /web/client.py#L576'>__init__</a>(scheme,netloc,host,port)</tt>	@type scheme l{bytes} @param scheme uri scheme specifier.
<tt style='background-color:#E8E8E8;'> web.URI <a href=' /web/client.py#L614'>fromBytes</a>(cls,uri,defaultPort)</tt>	Parse the given uri into a l{uri}.
<tt style='background-color:#E8E8E8;'> web.URI <a href=' /web/client.py#L649'>toBytes</a>()</tt>	Assemble the individual parts of the i{uri} into a fully formed i{uri}.
<tt style='background-color:#E8E8E8;'> web.URI <a href=' /web/client.py#L661'>originForm</a>()</tt>	The absolute i{uri} path including i{uri} parameters query string and fragment identifier.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/client.py#L682'>_urljoin</a>(base,url)</tt>	Construct a full ("absolute") url by combining a "base url" with another url.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/client.py#L711'>_makeGetterFactory</a>(url,factoryFactory,contextFactory)</tt>	Create and connect an http page getting factory.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/client.py#L742'>_deprecateGetPageClasses</a>()</tt>	Mark the protocols and factories associated with l{getpage} and l{downloadpage} as deprecated.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/client.py#L765'>getPage</a>(url,contextFactory)</tt>	Download a web page as a string.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/client.py#L784'>downloadPage</a>(url,file,contextFactory)</tt>	Download a web page to a file.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/client.py#L833'>_requireSSL</a>(decoratee)</tt>	The decorated method requires pyopenssl to be present or it raises l{notimplementederror}.
<tt style='background-color:#E8E8E8;'> web.WebClientContextFactory <a href=' /web/client.py#L874'>_getCertificateOptions</a>(hostname,port)</tt>	Return a l{certificateoptions}.
<tt style='background-color:#E8E8E8;'> web.WebClientContextFactory <a href=' /web/client.py#L891'>getContext</a>(hostname,port)</tt>	Return an l{openssl ssl context}.
<tt style='background-color:#E8E8E8;'> web.BrowserLikePolicyForHTTPS <a href=' /web/client.py#L915'>creatorForNetloc</a>(hostname,port)</tt>	Create a l{client connection creator <twisted.
<tt style='background-color:#E8E8E8;'> web._ContextFactoryWithContext <a href=' /web/client.py#L962'>__init__</a>(context)</tt>	Initialize a l{_contextfactorywithcontext} with a context.
<tt style='background-color:#E8E8E8;'> web._ContextFactoryWithContext <a href=' /web/client.py#L972'>getContext</a>()</tt>	Return the context created by l{_deprecatedtocurrentpolicyforhttps.
<tt style='background-color:#E8E8E8;'> web._DeprecatedToCurrentPolicyForHTTPS <a href=' /web/client.py#L994'>__init__</a>(webContextFactory)</tt>	Wrap a web context factory in an l{ipolicyforhttps}.
<tt style='background-color:#E8E8E8;'> web._DeprecatedToCurrentPolicyForHTTPS <a href=' /web/client.py#L1006'>creatorForNetloc</a>(hostname,port)</tt>	Called the wrapped web context factory's c{getcontext} method with a hostname and port number and return the resulting context object.
<tt style='background-color:#E8E8E8;'> web.FileBodyProducer <a href=' /web/client.py#L1055'>_determineLength</a>(fObj)</tt>	Determine how many bytes can be read out of c{fobj} assuming it is not modified from this point on.
<tt style='background-color:#E8E8E8;'> web.FileBodyProducer <a href=' /web/client.py#L1073'>stopProducing</a>()</tt>	Permanently stop writing bytes from the file to the consumer by stopping the underlying l{cooperativetask}.
<tt style='background-color:#E8E8E8;'> web.FileBodyProducer <a href=' /web/client.py#L1082'>startProducing</a>(consumer)</tt>	Start a cooperative task which will read bytes from the input file and write them to c{consumer}.
<tt style='background-color:#E8E8E8;'> web.FileBodyProducer <a href=' /web/client.py#L1101'>_writeloop</a>(consumer)</tt>	Return an iterator which reads one chunk of bytes from the input file and writes them to the consumer for each time it is iterated.
<tt style='background-color:#E8E8E8;'> web.FileBodyProducer <a href=' /web/client.py#L1115'>pauseProducing</a>()</tt>	Temporarily suspend copying bytes from the input file to the consumer by pausing the l{cooperativetask} which drives that activity.
<tt style='background-color:#E8E8E8;'> web.FileBodyProducer <a href=' /web/client.py#L1123'>resumeProducing</a>()</tt>	Undo the effects of a previous c{pauseproducing} and resume copying bytes to the consumer by resuming the l{cooperativetask} which drives.
<tt style='background-color:#E8E8E8;'> web._RetryingHTTP11ClientProtocol <a href=' /web/client.py#L1166'>_shouldRetry</a>(method,exception,bodyProducer)</tt>	Indicate whether request should be retried.
<tt style='background-color:#E8E8E8;'> web._RetryingHTTP11ClientProtocol <a href=' /web/client.py#L1194'>request</a>(request)</tt>	Do a request and retry once with a new connection if it fails in a retryable manner.
<tt style='background-color:#E8E8E8;'> web.HTTPConnectionPool <a href=' /web/client.py#L1267'>getConnection</a>(key,endpoint)</tt>	Supply a connection newly created or retrieved from the pool to be used for one http request.
<tt style='background-color:#E8E8E8;'> web.HTTPConnectionPool <a href=' /web/client.py#L1305'>_newConnection</a>(key,endpoint)</tt>	Create a new connection.
<tt style='background-color:#E8E8E8;'> web.HTTPConnectionPool <a href=' /web/client.py#L1317'>_removeConnection</a>(key,connection)</tt>	Remove a connection from the cache and disconnect it.
<tt style='background-color:#E8E8E8;'> web.HTTPConnectionPool <a href=' /web/client.py#L1326'>_putConnection</a>(key,connection)</tt>	Return a persistent connection to the pool this will be called by.
<tt style='background-color:#E8E8E8;'> web.HTTPConnectionPool <a href=' /web/client.py#L1352'>closeCachedConnections</a>()</tt>	Close all persistent connections and remove them from the pool.
<tt style='background-color:#E8E8E8;'> web._AgentBase <a href=' /web/client.py#L1388'>_computeHostValue</a>(scheme,host,port)</tt>	Compute the string to use for the value of the i{host} header based on the given scheme host name and port number.
<tt style='background-color:#E8E8E8;'> web._AgentBase <a href=' /web/client.py#L1400'>_requestWithEndpoint</a>(key,endpoint,method,parsedURI)</tt>	Issue a new request given the endpoint and the path sent as part of the request.
<tt style='background-color:#E8E8E8;'> web._StandardEndpointFactory <a href=' /web/client.py#L1441'>__init__</a>(reactor,contextFactory,connectTimeout,bindAddress)</tt>	@param reactor a provider of l{twisted.
<tt style='background-color:#E8E8E8;'> web._StandardEndpointFactory <a href=' /web/client.py#L1467'>endpointForURI</a>(uri)</tt>	Connect directly over tcp for c{b'http'} scheme and tls for c{b'https'}.
<tt style='background-color:#E8E8E8;'> web.Agent <a href=' /web/client.py#L1515'>__init__</a>(reactor,contextFactory,connectTimeout,bindAddress)</tt>	Create an l{agent}.
<tt style='background-color:#E8E8E8;'> web.Agent <a href=' /web/client.py#L1561'>usingEndpointFactory</a>(cls,reactor,endpointFactory,pool)</tt>	Create a new l{agent} that will use the endpoint factory to figure out how to connect to the server.
<tt style='background-color:#E8E8E8;'> web.Agent <a href=' /web/client.py#L1586'>_init</a>(reactor,endpointFactory,pool)</tt>	Initialize a new l{agent}.
<tt style='background-color:#E8E8E8;'> web.Agent <a href=' /web/client.py#L1608'>_getEndpoint</a>(uri)</tt>	Get an endpoint for the given uri using c{self _endpointfactory}.
<tt style='background-color:#E8E8E8;'> web.Agent <a href=' /web/client.py#L1620'>request</a>(method,uri,headers,bodyProducer)</tt>	Issue a request to the server indicated by the given c{uri}.
<tt style='background-color:#E8E8E8;'> web.ProxyAgent <a href=' /web/client.py#L1660'>request</a>(method,uri,headers,bodyProducer)</tt>	Issue a new request via the configured proxy.
<tt style='background-color:#E8E8E8;'> web._FakeUrllib2Request <a href=' /web/client.py#L1697'>__init__</a>(uri)</tt>	Create a fake urllib2 request.
<tt style='background-color:#E8E8E8;'> web.CookieAgent <a href=' /web/client.py#L1807'>request</a>(method,uri,headers,bodyProducer)</tt>	Issue a new request to the wrapped l{agent}.
<tt style='background-color:#E8E8E8;'> web.CookieAgent <a href=' /web/client.py#L1837'>_extractCookies</a>(response,request)</tt>	Extract response cookies and store them in the cookie jar.
<tt style='background-color:#E8E8E8;'> web.GzipDecoder <a href=' /web/client.py#L1866'>deliverBody</a>(protocol)</tt>	Override c{deliverbody} to wrap the given c{protocol} with l{_gzipprotocol}.
<tt style='background-color:#E8E8E8;'> web._GzipProtocol <a href=' /web/client.py#L1894'>dataReceived</a>(data)</tt>	Decompress c{data} with the zlib decompressor forwarding the raw data to the original protocol.
<tt style='background-color:#E8E8E8;'> web._GzipProtocol <a href=' /web/client.py#L1907'>connectionLost</a>(reason)</tt>	Forward the connection lost event flushing remaining data from the decompressor if any.
<tt style='background-color:#E8E8E8;'> web.ContentDecoderAgent <a href=' /web/client.py#L1946'>request</a>(method,uri,headers,bodyProducer)</tt>	Send a client request which declares supporting compressed content.
<tt style='background-color:#E8E8E8;'> web.ContentDecoderAgent <a href=' /web/client.py#L1961'>_handleResponse</a>(response)</tt>	Check if the response is encoded and wrap it to handle decompression.
<tt style='background-color:#E8E8E8;'> web.RedirectAgent <a href=' /web/client.py#L2019'>request</a>(method,uri,headers,bodyProducer)</tt>	Send a client request following http redirects.
<tt style='background-color:#E8E8E8;'> web.RedirectAgent <a href=' /web/client.py#L2030'>_resolveLocation</a>(requestURI,location)</tt>	Resolve the redirect location against the request i{uri}.
<tt style='background-color:#E8E8E8;'> web.RedirectAgent <a href=' /web/client.py#L2046'>_handleRedirect</a>(response,method,uri,headers)</tt>	Handle a redirect response checking the number of redirects already followed and extracting the location header fields.
<tt style='background-color:#E8E8E8;'> web.RedirectAgent <a href=' /web/client.py#L2072'>_handleResponse</a>(response,method,uri,headers)</tt>	Handle the response making another request if it indicates a redirect.
<tt style='background-color:#E8E8E8;'> web._ReadBodyProtocol <a href=' /web/client.py#L2122'>__init__</a>(status,message,deferred)</tt>	@param status status of l{iresponse}.
<tt style='background-color:#E8E8E8;'> web._ReadBodyProtocol <a href=' /web/client.py#L2139'>dataReceived</a>(data)</tt>	Accumulate some more bytes from the response.
<tt style='background-color:#E8E8E8;'> web._ReadBodyProtocol <a href=' /web/client.py#L2146'>connectionLost</a>(reason)</tt>	Deliver the accumulated response bytes to the waiting l{deferred}, if the response body has been completely received without error.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/client.py#L2162'>readBody</a>(response)</tt>	Get the body of an l{iresponse} and return it as a byte string.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/error.py#L28'>_codeToMessage</a>(code)</tt>	Returns the response message corresponding to an http code or none if the code is unknown or unrecognized.
<tt style='background-color:#E8E8E8;'> web.Error <a href=' /web/error.py#L58'>__init__</a>(code,message,response)</tt>	Initializes a basic exception.
<tt style='background-color:#E8E8E8;'> web.PageRedirect <a href=' /web/error.py#L101'>__init__</a>(code,message,response,location)</tt>	Initializes a page redirect exception.
<tt style='background-color:#E8E8E8;'> web.InfiniteRedirection <a href=' /web/error.py#L136'>__init__</a>(code,message,response,location)</tt>	Initializes an infinite redirection exception.
<tt style='background-color:#E8E8E8;'> web.RedirectWithNoLocation <a href=' /web/error.py#L175'>__init__</a>(code,message,uri)</tt>	Initializes a page redirect exception when no location is given.
<tt style='background-color:#E8E8E8;'> web.FlattenerError <a href=' /web/error.py#L319'>_formatRoot</a>(obj)</tt>	Convert an object from c{self _roots} to a string suitable for.
<tt style='background-color:#E8E8E8;'> web.FlattenerError <a href=' /web/error.py#L361'>__repr__</a>()</tt>	Present a string representation which includes a template traceback so we can tell where this error occurred in the template as well as in.
<tt style='background-color:#E8E8E8;'> web.Options <a href=' /web/tap.py#L70'>opt_index</a>(indexName)</tt>	Add the name of a file used to check for directory indexes.
<tt style='background-color:#E8E8E8;'> web.Options <a href=' /web/tap.py#L80'>opt_user</a>()</tt>	Makes a server with ~/public_html and ~/ twistd-web-pb support for.
<tt style='background-color:#E8E8E8;'> web.Options <a href=' /web/tap.py#L90'>opt_path</a>(path)</tt>	<path> is either a specific file or a directory to be set as the root of the web server.
<tt style='background-color:#E8E8E8;'> web.Options <a href=' /web/tap.py#L104'>opt_processor</a>(proc)</tt>	Ext=class' where class' is added as a processor for files ending with ext'.
<tt style='background-color:#E8E8E8;'> web.Options <a href=' /web/tap.py#L116'>opt_class</a>(className)</tt>	Create a resource subclass with a zero-argument constructor.
<tt style='background-color:#E8E8E8;'> web.Options <a href=' /web/tap.py#L124'>opt_resource_script</a>(name)</tt>	An rpy file to be used as the root resource of the webserver.
<tt style='background-color:#E8E8E8;'> web.Options <a href=' /web/tap.py#L131'>opt_wsgi</a>(name)</tt>	The fqpn of a wsgi application object to serve as the root resource of the webserver.
<tt style='background-color:#E8E8E8;'> web.Options <a href=' /web/tap.py#L146'>opt_mime_type</a>(defaultType)</tt>	Specify the default mime-type for static files.
<tt style='background-color:#E8E8E8;'> web.Options <a href=' /web/tap.py#L157'>opt_allow_ignore_ext</a>()</tt>	Specify whether or not a request for 'foo' should return 'foo ext'.
<tt style='background-color:#E8E8E8;'> web.Options <a href=' /web/tap.py#L167'>opt_ignore_ext</a>(ext)</tt>	Specify an extension to ignore these will be processed in order.
<tt style='background-color:#E8E8E8;'> web.Options <a href=' /web/tap.py#L177'>postOptions</a>()</tt>	Set up conditional defaults and check for dependencies.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/tap.py#L202'>makePersonalServerFactory</a>(site)</tt>	Create and return a factory which will respond to i{distrib} requests against the given site.
<tt style='background-color:#E8E8E8;'> web.NameVirtualHost <a href=' /web/vhost.py#L60'>addHost</a>(name,resrc)</tt>	Add a host to this virtual host.
<tt style='background-color:#E8E8E8;'> web.NameVirtualHost <a href=' /web/vhost.py#L73'>removeHost</a>(name)</tt>	Remove a host.
<tt style='background-color:#E8E8E8;'> web.NameVirtualHost <a href=' /web/vhost.py#L77'>_getResourceForRequest</a>(request)</tt>	Internal get the appropriate resource for the given host.
<tt style='background-color:#E8E8E8;'> web.NameVirtualHost <a href=' /web/vhost.py#L88'>render</a>(request)</tt>	Implementation of resource resource's render method.
<tt style='background-color:#E8E8E8;'> web.NameVirtualHost <a href=' /web/vhost.py#L94'>getChild</a>(path,request)</tt>	Implementation of resource resource's getchild method.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/rewrite.py#L36'>alias</a>(aliasPath,sourcePath)</tt>	I am not a very good aliaser but i'm the best i can be if i'm.
<tt style='background-color:#E8E8E8;'> web.Expose <a href=' /web/_element.py#L30'>__call__</a>()</tt>	Add one or more functions to the set of exposed functions.
<tt style='background-color:#E8E8E8;'> web.Expose <a href=' /web/_element.py#L67'>get</a>(instance,methodName,default)</tt>	Retrieve an exposed method with the given name from the given instance.
<tt style='background-color:#E8E8E8;'> web.Expose <a href=' /web/_element.py#L86'>_withDocumentation</a>(cls,thunk)</tt>	Slight hack to make users of this class appear to have a docstring to documentation generators by defining them with a decorator.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_element.py#L101'>renderer</a>()</tt>	Decorate with l{renderer} to use methods as template render directives.
<tt style='background-color:#E8E8E8;'> web.Element <a href=' /web/_element.py#L161'>lookupRenderMethod</a>(name)</tt>	Look up and return the named render method.
<tt style='background-color:#E8E8E8;'> web.Element <a href=' /web/_element.py#L171'>render</a>(request)</tt>	Implement l{irenderable} to allow one l{element} to be embedded in another's template or rendering output.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L52'>getHeader</a>(key)</tt>	Get an http request header.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L65'>getCookie</a>(key)</tt>	Get a cookie that was sent from the network.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L71'>getAllHeaders</a>()</tt>	Return dictionary mapping the names of all received headers to the last value received for each.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L81'>getRequestHostname</a>()</tt>	Get the hostname that the user passed in to the request.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L93'>getHost</a>()</tt>	Get my originally requesting transport's host.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L101'>getClientIP</a>()</tt>	Return the ip address of the client who submitted this request.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L111'>getClient</a>()</tt>	Return the hostname of the ip address of the client who submitted this request if possible.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L124'>getUser</a>()</tt>	Return the http user sent with this request if any.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L135'>getPassword</a>()</tt>	Return the http password sent with this request if any.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L146'>isSecure</a>()</tt>	Return true if this request is using a secure transport.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L161'>getSession</a>(sessionInterface)</tt>	Look up the session associated with this request or create a new one if there is not one.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L172'>URLPath</a>()</tt>	@return a l{urlpath} instance which identifies the url for which this request is.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L179'>prePathURL</a>()</tt>	@return at any time during resource traversal a l{str} giving an absolute url to the most nested resource which has yet been.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L187'>rememberRootURL</a>()</tt>	Remember the currently-processed part of the url for later recalling.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L194'>getRootURL</a>()</tt>	Get a previously-remembered url.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L201'>finish</a>()</tt>	Indicate that the response to this request is complete.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L207'>write</a>(data)</tt>	Write some data to the body of the response to this request response.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L215'>addCookie</a>(k,v,expires,domain)</tt>	Set an outgoing http cookie.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L225'>setResponseCode</a>(code,message)</tt>	Set the http response code.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L231'>setHeader</a>(k,v)</tt>	Set an http response header overrides any previously set values for.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L244'>redirect</a>(url)</tt>	Utility function that does a redirect.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L252'>setLastModified</a>(when)</tt>	Set the c{last-modified} time for the response to this request.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L274'>setETag</a>(etag)</tt>	Set an c{entity tag} for the outgoing response.
<tt style='background-color:#E8E8E8;'> web.IRequest <a href=' /web/iweb.py#L296'>setHost</a>(host,port,ssl)</tt>	Change the host and port the request thinks it's using.
<tt style='background-color:#E8E8E8;'> web.INonQueuedRequestFactory <a href=' /web/iweb.py#L318'>__call__</a>(channel)</tt>	Create an l{irequest} that is operating on the given channel there.
<tt style='background-color:#E8E8E8;'> web.IAccessLogFormatter <a href=' /web/iweb.py#L338'>__call__</a>(timestamp,request)</tt>	Generate a line for the access log.
<tt style='background-color:#E8E8E8;'> web.ICredentialFactory <a href=' /web/iweb.py#L369'>getChallenge</a>(request)</tt>	Generate a new challenge to be sent to a client.
<tt style='background-color:#E8E8E8;'> web.ICredentialFactory <a href=' /web/iweb.py#L383'>decode</a>(response,request)</tt>	Create a credentials object from the given response.
<tt style='background-color:#E8E8E8;'> web.IBodyProducer <a href=' /web/iweb.py#L438'>startProducing</a>(consumer)</tt>	Start producing to the given l{iconsumer<twisted.
<tt style='background-color:#E8E8E8;'> web.IBodyProducer <a href=' /web/iweb.py#L450'>stopProducing</a>()</tt>	In addition to the standard behavior of l{iproducer.
<tt style='background-color:#E8E8E8;'> web.IRenderable <a href=' /web/iweb.py#L467'>lookupRenderMethod</a>(name)</tt>	Look up and return the render method associated with the given name.
<tt style='background-color:#E8E8E8;'> web.IRenderable <a href=' /web/iweb.py#L481'>render</a>(request)</tt>	Get the document for this l{irenderable}.
<tt style='background-color:#E8E8E8;'> web.ITemplateLoader <a href=' /web/iweb.py#L500'>load</a>()</tt>	Load a template suitable for rendering.
<tt style='background-color:#E8E8E8;'> web.IResponse <a href=' /web/iweb.py#L551'>deliverBody</a>(protocol)</tt>	Register an l{iprotocol<twisted internet interfaces iprotocol>} provider.
<tt style='background-color:#E8E8E8;'> web.IResponse <a href=' /web/iweb.py#L574'>setPreviousResponse</a>(response)</tt>	Set the reference to the previous l{iresponse}.
<tt style='background-color:#E8E8E8;'> web._IRequestEncoder <a href=' /web/iweb.py#L592'>encode</a>(data)</tt>	Encode the data given and return the result.
<tt style='background-color:#E8E8E8;'> web._IRequestEncoder <a href=' /web/iweb.py#L604'>finish</a>()</tt>	Callback called when the request is closing.
<tt style='background-color:#E8E8E8;'> web._IRequestEncoderFactory <a href=' /web/iweb.py#L622'>encoderForRequest</a>(request)</tt>	If applicable returns a l{_irequestencoder} instance which will encode the request.
<tt style='background-color:#E8E8E8;'> web.IAgent <a href=' /web/iweb.py#L691'>request</a>(method,uri,headers,bodyProducer)</tt>	Request the resource at the given location.
<tt style='background-color:#E8E8E8;'> web.IPolicyForHTTPS <a href=' /web/iweb.py#L736'>creatorForNetloc</a>(hostname,port)</tt>	Create a l{client connection creator <twisted.
<tt style='background-color:#E8E8E8;'> web.IAgentEndpointFactory <a href=' /web/iweb.py#L766'>endpointForURI</a>(uri)</tt>	Construct and return an l{istreamclientendpoint} for the outgoing request's connection.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_newclient.py#L186'>_callAppFunction</a>(function)</tt>	Call c{function} if it raises an exception log it with a minimal.
<tt style='background-color:#E8E8E8;'> web.HTTPParser <a href=' /web/_newclient.py#L252'>switchToBodyMode</a>(decoder)</tt>	Switch to body parsing mode - interpret any more bytes delivered as part of the message body and deliver them to the given decoder.
<tt style='background-color:#E8E8E8;'> web.HTTPParser <a href=' /web/_newclient.py#L265'>lineReceived</a>(line)</tt>	Handle one line from a response.
<tt style='background-color:#E8E8E8;'> web.HTTPParser <a href=' /web/_newclient.py#L295'>rawDataReceived</a>(data)</tt>	Pass data from the message body to the body decoder object.
<tt style='background-color:#E8E8E8;'> web.HTTPParser <a href=' /web/_newclient.py#L302'>isConnectionControlHeader</a>(name)</tt>	Return c{true} if the given lower-cased name is the name of a connection control header rather than an entity header.
<tt style='background-color:#E8E8E8;'> web.HTTPParser <a href=' /web/_newclient.py#L315'>statusReceived</a>(status)</tt>	Callback invoked whenever the first line of a new message is received.
<tt style='background-color:#E8E8E8;'> web.HTTPParser <a href=' /web/_newclient.py#L326'>headerReceived</a>(name,value)</tt>	Store the given header in c{self headers}.
<tt style='background-color:#E8E8E8;'> web.HTTPParser <a href=' /web/_newclient.py#L338'>allHeadersReceived</a>()</tt>	Callback invoked after the last header is passed to c{headerreceived}.
<tt style='background-color:#E8E8E8;'> web.HTTPClientParser <a href=' /web/_newclient.py#L380'>dataReceived</a>(data)</tt>	Override so that we know if any response has been received.
<tt style='background-color:#E8E8E8;'> web.HTTPClientParser <a href=' /web/_newclient.py#L388'>parseVersion</a>(strversion)</tt>	Parse version strings of the form protocol '/' major ' ' minor e g.
<tt style='background-color:#E8E8E8;'> web.HTTPClientParser <a href=' /web/_newclient.py#L406'>statusReceived</a>(status)</tt>	Parse the status line into its components and create a response object to keep track of this response's state.
<tt style='background-color:#E8E8E8;'> web.HTTPClientParser <a href=' /web/_newclient.py#L439'>_finished</a>(rest)</tt>	Called to indicate that an entire response has been received no more.
<tt style='background-color:#E8E8E8;'> web.HTTPClientParser <a href=' /web/_newclient.py#L453'>isConnectionControlHeader</a>(name)</tt>	Content-length in the response to a head request is an entity header not a connection control header.
<tt style='background-color:#E8E8E8;'> web.HTTPClientParser <a href=' /web/_newclient.py#L463'>allHeadersReceived</a>()</tt>	Figure out how long the response body is going to be by examining headers and stuff.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/_newclient.py#L593'>__init__</a>(method,uri,headers,bodyProducer)</tt>	@param method the http method for this request ex b'get', b'head', b'post', etc.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/_newclient.py#L643'>absoluteURI</a>()</tt>	The absolute uri of the request as c{bytes}, or l{none} if the absolute uri cannot be determined.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/_newclient.py#L673'>_writeToBodyProducerChunked</a>(transport)</tt>	Write this request to the given transport using chunked transfer-encoding to frame the body.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/_newclient.py#L700'>_writeToBodyProducerContentLength</a>(transport)</tt>	Write this request to the given transport using content-length to frame the body.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/_newclient.py#L816'>_writeToEmptyBodyContentLength</a>(transport)</tt>	Write this request to the given transport using content-length to frame the empty body.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/_newclient.py#L828'>writeTo</a>(transport)</tt>	Format this l{request} as an http/1 1 request and write it to the given.
<tt style='background-color:#E8E8E8;'> web.Request <a href=' /web/_newclient.py#L855'>stopWriting</a>()</tt>	Stop writing this request to the transport this can only be called.
<tt style='background-color:#E8E8E8;'> web.LengthEnforcingConsumer <a href=' /web/_newclient.py#L892'>_allowNoMoreWrites</a>()</tt>	Indicate that no additional writes are allowed attempts to write.
<tt style='background-color:#E8E8E8;'> web.LengthEnforcingConsumer <a href=' /web/_newclient.py#L900'>write</a>(bytes)</tt>	Write c{bytes} to the underlying consumer unless c{_nomorewritesexpected} has been called or there are/have been too.
<tt style='background-color:#E8E8E8;'> web.LengthEnforcingConsumer <a href=' /web/_newclient.py#L929'>_noMoreWritesExpected</a>()</tt>	Called to indicate no more bytes will be written to this consumer.
<tt style='background-color:#E8E8E8;'> web. <a href=' /web/_newclient.py#L943'>makeStatefulDispatcher</a>(name,template)</tt>	Given a i{dispatch} name and a function return a function which can be used as a method and which when called will call another method defined.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1029'>__init__</a>(version,code,phrase,headers)</tt>	@param version http version components protocol major minor e g.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1079'>deliverBody</a>(protocol)</tt>	Dispatch the given l{iprotocol} depending of the current state of the response.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1087'>_deliverBody_INITIAL</a>(protocol)</tt>	Deliver any buffered data to c{protocol} and prepare to deliver any future data to it.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1108'>_deliverBody_CONNECTED</a>(protocol)</tt>	It is invalid to attempt to deliver data to a protocol when it is already being delivered to another protocol.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1118'>_deliverBody_DEFERRED_CLOSE</a>(protocol)</tt>	Deliver any buffered data to c{protocol} and then disconnect the protocol.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1137'>_deliverBody_FINISHED</a>(protocol)</tt>	It is invalid to attempt to deliver data to a protocol after the response body has been delivered to another protocol.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1146'>_bodyDataReceived</a>(data)</tt>	Called by httpclientparser with chunks of data from the response body.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1156'>_bodyDataReceived_INITIAL</a>(data)</tt>	Buffer any data received for later delivery to a protocol passed to c{deliverbody}.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1168'>_bodyDataReceived_CONNECTED</a>(data)</tt>	Deliver any data received to the protocol to which this l{response} is connected.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1176'>_bodyDataReceived_DEFERRED_CLOSE</a>(data)</tt>	It is invalid for data to be delivered after it has been indicated that the response body has been completely delivered.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1184'>_bodyDataReceived_FINISHED</a>(data)</tt>	It is invalid for data to be delivered after the response body has been delivered to a protocol.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1193'>_bodyDataFinished</a>(reason)</tt>	Called by httpclientparser when no more body data is available if the.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1203'>_bodyDataFinished_INITIAL</a>(reason)</tt>	Move to the c{'deferred_close'} state to wait for a protocol to which to deliver the response body.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1214'>_bodyDataFinished_CONNECTED</a>(reason)</tt>	Disconnect the protocol and move to the c{'finished'} state.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1225'>_bodyDataFinished_DEFERRED_CLOSE</a>()</tt>	It is invalid to attempt to notify the l{response} of the end of the response body data more than once.
<tt style='background-color:#E8E8E8;'> web.Response <a href=' /web/_newclient.py#L1233'>_bodyDataFinished_FINISHED</a>()</tt>	It is invalid to attempt to notify the l{response} of the end of the response body data more than once.
<tt style='background-color:#E8E8E8;'> web.ChunkedEncoder <a href=' /web/_newclient.py#L1254'>_allowNoMoreWrites</a>()</tt>	Indicate that no additional writes are allowed attempts to write.
<tt style='background-color:#E8E8E8;'> web.ChunkedEncoder <a href=' /web/_newclient.py#L1262'>registerProducer</a>(producer,streaming)</tt>	Register the given producer with c{self transport}.
<tt style='background-color:#E8E8E8;'> web.ChunkedEncoder <a href=' /web/_newclient.py#L1269'>write</a>(data)</tt>	Write the given request body bytes to the transport using chunked encoding.
<tt style='background-color:#E8E8E8;'> web.ChunkedEncoder <a href=' /web/_newclient.py#L1282'>unregisterProducer</a>()</tt>	Indicate that the request body is complete and finish the request.
<tt style='background-color:#E8E8E8;'> web.TransportProxyProducer <a href=' /web/_newclient.py#L1314'>_stopProxying</a>()</tt>	Stop forwarding calls of l{twisted internet interfaces ipushproducer}.
<tt style='background-color:#E8E8E8;'> web.TransportProxyProducer <a href=' /web/_newclient.py#L1323'>stopProducing</a>()</tt>	Proxy the stoppage to the underlying producer unless this proxy has been stopped.
<tt style='background-color:#E8E8E8;'> web.TransportProxyProducer <a href=' /web/_newclient.py#L1332'>resumeProducing</a>()</tt>	Proxy the resumption to the underlying producer unless this proxy has been stopped.
<tt style='background-color:#E8E8E8;'> web.TransportProxyProducer <a href=' /web/_newclient.py#L1341'>pauseProducing</a>()</tt>	Proxy the pause to the underlying producer unless this proxy has been stopped.
<tt style='background-color:#E8E8E8;'> web.HTTP11ClientProtocol <a href=' /web/_newclient.py#L1430'>request</a>(request)</tt>	Issue c{request} over c{self transport} and return a l{deferred} which.
<tt style='background-color:#E8E8E8;'> web.HTTP11ClientProtocol <a href=' /web/_newclient.py#L1495'>_finishResponse</a>(rest)</tt>	Called by an l{httpclientparser} to indicate that it has parsed a complete response.
<tt style='background-color:#E8E8E8;'> web.HTTP11ClientProtocol <a href=' /web/_newclient.py#L1553'>_disconnectParser</a>(reason)</tt>	If there is still a parser call its c{connectionlost} method with the given reason.
<tt style='background-color:#E8E8E8;'> web.HTTP11ClientProtocol <a href=' /web/_newclient.py#L1576'>_giveUp</a>(reason)</tt>	Lose the underlying connection and disconnect the parser with the given l{failure}.
<tt style='background-color:#E8E8E8;'> web.HTTP11ClientProtocol <a href=' /web/_newclient.py#L1588'>dataReceived</a>(bytes)</tt>	Handle some stuff from some place.
<tt style='background-color:#E8E8E8;'> web.HTTP11ClientProtocol <a href=' /web/_newclient.py#L1598'>connectionLost</a>(reason)</tt>	The underlying transport went away if appropriate notify the parser.
<tt style='background-color:#E8E8E8;'> web.HTTP11ClientProtocol <a href=' /web/_newclient.py#L1606'>_connectionLost_QUIESCENT</a>(reason)</tt>	Nothing is currently happening move to the c{'connection_lost'}.
<tt style='background-color:#E8E8E8;'> web.HTTP11ClientProtocol <a href=' /web/_newclient.py#L1614'>_connectionLost_GENERATION_FAILED</a>(reason)</tt>	The connection was in an inconsistent state move to the.
<tt style='background-color:#E8E8E8;'> web.HTTP11ClientProtocol <a href=' /web/_newclient.py#L1622'>_connectionLost_TRANSMITTING</a>(reason)</tt>	Fail the l{deferred} for the current request notify the request object that it does not need to continue transmitting itself and.
<tt style='background-color:#E8E8E8;'> web.HTTP11ClientProtocol <a href=' /web/_newclient.py#L1637'>_connectionLost_TRANSMITTING_AFTER_RECEIVING_RESPONSE</a>(reason)</tt>	Move to the c{'connection_lost'} state.
<tt style='background-color:#E8E8E8;'> web.HTTP11ClientProtocol <a href=' /web/_newclient.py#L1644'>_connectionLost_WAITING</a>(reason)</tt>	Disconnect the response parser so that it can propagate the event as necessary (for example to call an application protocol's.
<tt style='background-color:#E8E8E8;'> web.HTTP11ClientProtocol <a href=' /web/_newclient.py#L1655'>_connectionLost_ABORTING</a>(reason)</tt>	Disconnect the response parser with a l{connectionaborted} failure and move to the c{'connection_lost'} state.
<tt style='background-color:#E8E8E8;'> web.HTTP11ClientProtocol <a href=' /web/_newclient.py#L1667'>abort</a>()</tt>	Close the connection and cause all outstanding l{request} l{deferred}s to fire with an error.
<tt style='background-color:#E8E8E8;'> web.ProxyClient <a href=' /web/proxy.py#L80'>handleResponseEnd</a>()</tt>	Finish the original request indicating that the response has been completely written to it and disconnect the outgoing transport.
<tt style='background-color:#E8E8E8;'> web.ProxyClientFactory <a href=' /web/proxy.py#L114'>clientConnectionFailed</a>(connector,reason)</tt>	Report a connection failure in a response to the incoming request as an error.
<tt style='background-color:#E8E8E8;'> web.ReverseProxyRequest <a href=' /web/proxy.py#L203'>process</a>()</tt>	Handle this request by connecting to the proxied server and forwarding it there then forwarding the response back as the response to this.
<tt style='background-color:#E8E8E8;'> web.ReverseProxyResource <a href=' /web/proxy.py#L248'>__init__</a>(host,port,path,reactor)</tt>	@param host the host of the web server to proxy.
<tt style='background-color:#E8E8E8;'> web.ReverseProxyResource <a href=' /web/proxy.py#L271'>getChild</a>(path,request)</tt>	Create and return a proxy resource with the same proxy configuration as this one except that its path also contains the segment given by.
<tt style='background-color:#E8E8E8;'> web.ReverseProxyResource <a href=' /web/proxy.py#L282'>render</a>(request)</tt>	Render a request by forwarding it to the proxied server.
<tt style='background-color:#E8E8E8;'> web.SOAPPublisher <a href=' /web/soap.py#L39'>lookupFunction</a>(functionName)</tt>	Lookup published soap function.
<tt style='background-color:#E8E8E8;'> web.SOAPPublisher <a href=' /web/soap.py#L49'>render</a>(request)</tt>	Handle a soap command.
<tt style='background-color:#E8E8E8;'> web.XMLParser <a href=' /web/sux.py#L96'>saveMark</a>()</tt>	Get the line number and column of the last character parsed.
<tt style='background-color:#E8E8E8;'> web.XMLParser <a href=' /web/sux.py#L104'>_buildStateTable</a>()</tt>	Return a dictionary of begin do end state function tuples.
<tt style='background-color:#E8E8E8;'> web.XMLParser <a href=' /web/sux.py#L194'>connectionLost</a>(reason)</tt>	End the last state we were in.
<tt style='background-color:#E8E8E8;'> web.XMLParser <a href=' /web/sux.py#L596'>gotTagStart</a>(name,attributes)</tt>	Encountered an opening tag.
<tt style='background-color:#E8E8E8;'> web.XMLParser <a href=' /web/sux.py#L602'>gotText</a>(data)</tt>	Encountered text default behaviour is to print.
<tt style='background-color:#E8E8E8;'> web.XMLParser <a href=' /web/sux.py#L608'>gotEntityReference</a>(entityRef)</tt>	Encountered mnemonic entity reference default behaviour is to print.
<tt style='background-color:#E8E8E8;'> web.XMLParser <a href=' /web/sux.py#L626'>gotDoctype</a>(doctype)</tt>	Encountered doctype this is really grotty it basically just gives you everything between.
<tt style='background-color:#E8E8E8;'> web.XMLParser <a href=' /web/sux.py#L634'>gotTagEnd</a>(name)</tt>	Encountered closing tag default behaviour is to print.
<tt style='background-color:#E8E8E8;'> web._auth.BasicCredentialFactory <a href=' /web/_auth/basic.py#L39'>getChallenge</a>(request)</tt>	Return a challenge including the http authentication realm with which this factory was created.
<tt style='background-color:#E8E8E8;'> web._auth.BasicCredentialFactory <a href=' /web/_auth/basic.py#L47'>decode</a>(response,request)</tt>	Parse the base64-encoded colon-separated username and password into a l{credentials.
<tt style='background-color:#E8E8E8;'> web._auth.DigestCredentialFactory <a href=' /web/_auth/digest.py#L26'>__init__</a>(algorithm,authenticationRealm)</tt>	Create the digest credential factory that this object wraps.
<tt style='background-color:#E8E8E8;'> web._auth.DigestCredentialFactory <a href=' /web/_auth/digest.py#L34'>getChallenge</a>(request)</tt>	Generate the challenge for use in the www-authenticate header @param request the l{irequest} to with access was denied and for the.
<tt style='background-color:#E8E8E8;'> web._auth.DigestCredentialFactory <a href=' /web/_auth/digest.py#L47'>decode</a>(response,request)</tt>	Create a l{twisted cred credentials digestedcredentials} object.
<tt style='background-color:#E8E8E8;'> web._auth.UnauthorizedResource <a href=' /web/_auth/wrapper.py#L41'>render</a>(request)</tt>	Send www-authenticate headers to the client.
<tt style='background-color:#E8E8E8;'> web._auth.UnauthorizedResource <a href=' /web/_auth/wrapper.py#L65'>getChildWithDefault</a>(path,request)</tt>	Disable resource dispatch.
<tt style='background-color:#E8E8E8;'> web._auth.HTTPAuthSessionWrapper <a href=' /web/_auth/wrapper.py#L87'>__init__</a>(portal,credentialFactories)</tt>	Initialize a session wrapper.
<tt style='background-color:#E8E8E8;'> web._auth.HTTPAuthSessionWrapper <a href=' /web/_auth/wrapper.py#L102'>_authorizedResource</a>(request)</tt>	Get the l{iresource} which the given request is authorized to receive.
<tt style='background-color:#E8E8E8;'> web._auth.HTTPAuthSessionWrapper <a href=' /web/_auth/wrapper.py#L127'>render</a>(request)</tt>	Find the l{iresource} avatar suitable for the given request if possible and render it.
<tt style='background-color:#E8E8E8;'> web._auth.HTTPAuthSessionWrapper <a href=' /web/_auth/wrapper.py#L136'>getChildWithDefault</a>(path,request)</tt>	Inspect the authorization http header and return a deferred which when fired after successful authentication will return an authorized.
<tt style='background-color:#E8E8E8;'> web._auth.HTTPAuthSessionWrapper <a href=' /web/_auth/wrapper.py#L150'>_login</a>(credentials)</tt>	Get the l{iresource} avatar for the given credentials.
<tt style='background-color:#E8E8E8;'> web._auth.HTTPAuthSessionWrapper <a href=' /web/_auth/wrapper.py#L162'>_loginSucceeded</a>(args)</tt>	Handle login success by wrapping the resulting l{iresource} avatar so that the c{logout} callback will be invoked when rendering is.
<tt style='background-color:#E8E8E8;'> web._auth.HTTPAuthSessionWrapper <a href=' /web/_auth/wrapper.py#L199'>_loginFailed</a>(result)</tt>	Handle login failure by presenting either another challenge (for expected authentication/authorization-related failures) or a server.
<tt style='background-color:#E8E8E8;'> web._auth.HTTPAuthSessionWrapper <a href=' /web/_auth/wrapper.py#L215'>_selectParseHeader</a>(header)</tt>	Choose an c{icredentialfactory} from c{_credentialfactories} suitable to use to decode the given i{authenticate} header.
<tt style='background-color:#E8E8E8;'> trial.DirtyReactorAggregateError <a href=' /trial/util.py#L55'>__str__</a>()</tt>	Return a multi-line message describing all of the unclean state.
<tt style='background-color:#E8E8E8;'> trial._Janitor <a href=' /trial/util.py#L81'>__init__</a>(test,result,reactor)</tt>	@param test see l{_janitor test}.
<tt style='background-color:#E8E8E8;'> trial._Janitor <a href=' /trial/util.py#L92'>postCaseCleanup</a>()</tt>	Called by l{unittest testcase} after a test to catch any logged errors.
<tt style='background-color:#E8E8E8;'> trial._Janitor <a href=' /trial/util.py#L105'>postClassCleanup</a>()</tt>	Called by l{unittest testcase} after the last test in a c{testcase}.
<tt style='background-color:#E8E8E8;'> trial._Janitor <a href=' /trial/util.py#L120'>_getReactor</a>()</tt>	Get either the passed-in reactor or the global reactor.
<tt style='background-color:#E8E8E8;'> trial._Janitor <a href=' /trial/util.py#L131'>_cleanPending</a>()</tt>	Cancel all pending calls and return their string representations.
<tt style='background-color:#E8E8E8;'> trial._Janitor <a href=' /trial/util.py#L166'>_cleanReactor</a>()</tt>	Remove all selectables from the reactor kill any of them that were processes and return their string representation.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/util.py#L182'>acquireAttribute</a>(objects,attr,default)</tt>	Go through the list 'objects' sequentially until we find one which has attribute 'attr', then return the value of that attribute.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/util.py#L197'>excInfoOrFailureToExcInfo</a>(err)</tt>	Coerce a failure to an _exc_info if err is a failure.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/util.py#L213'>suppress</a>(action)</tt>	Sets up the suppress tuple properly pass options to this method as you.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/util.py#L257'>_runSequentially</a>(callables,stopOnFirstError)</tt>	Run the given callables one after the other if a callable returns a.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/util.py#L296'>_removeSafely</a>(path)</tt>	Safely remove a path recursively.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/util.py#L331'>_unusedTestDirectory</a>(base)</tt>	Find an unused directory named similarly to c{base}.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/util.py#L378'>_listToPhrase</a>(things,finalDelimiter,delimiter)</tt>	Produce a string containing each thing in c{things}, separated by a c{delimiter}, with the last couple being separated.
<tt style='background-color:#E8E8E8;'> trial.ITestCase <a href=' /trial/itrial.py#L25'>__call__</a>(result)</tt>	Run the test should always do exactly the same thing as run().
<tt style='background-color:#E8E8E8;'> trial.ITestCase <a href=' /trial/itrial.py#L31'>countTestCases</a>()</tt>	Return the number of tests in this test case usually 1.
<tt style='background-color:#E8E8E8;'> trial.ITestCase <a href=' /trial/itrial.py#L37'>id</a>()</tt>	Return a unique identifier for the test usually the fully-qualified python name.
<tt style='background-color:#E8E8E8;'> trial.ITestCase <a href=' /trial/itrial.py#L44'>run</a>(result)</tt>	Run the test storing the results in c{result}.
<tt style='background-color:#E8E8E8;'> trial.ITestCase <a href=' /trial/itrial.py#L52'>shortDescription</a>()</tt>	Return a short description of the test.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L84'>startTest</a>(method)</tt>	Report the beginning of a run of a single test method.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L92'>stopTest</a>(method)</tt>	Report the status of a single test method.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L100'>startSuite</a>(name)</tt>	Deprecated in twisted 8 0.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L109'>endSuite</a>(name)</tt>	Deprecated in twisted 8 0.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L118'>cleanupErrors</a>(errs)</tt>	Deprecated in twisted 8 0.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L128'>upDownError</a>(userMeth,warn,printStatus)</tt>	Deprecated in twisted 8 0.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L144'>addSuccess</a>(test)</tt>	Record that test passed.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L150'>addError</a>(test,error)</tt>	Record that a test has raised an unexpected exception.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L161'>addFailure</a>(test,failure)</tt>	Record that a test has failed with the given failure.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L172'>addExpectedFailure</a>(test,failure,todo)</tt>	Record that the given test failed and was expected to do so.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L188'>addUnexpectedSuccess</a>(test,todo)</tt>	Record that the given test failed and was expected to do so.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L202'>addSkip</a>(test,reason)</tt>	Record that a test has been skipped for the given reason.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L212'>printSummary</a>()</tt>	Deprecated in twisted 8 0 use l{done} instead.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L220'>printErrors</a>()</tt>	Deprecated in twisted 8 0 use l{done} instead.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L229'>write</a>(string)</tt>	Deprecated in twisted 8 0 use l{done} instead.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L237'>writeln</a>(string)</tt>	Deprecated in twisted 8 0 use l{done} instead.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L244'>wasSuccessful</a>()</tt>	Return a boolean indicating whether all test results that were reported to this reporter were successful or not.
<tt style='background-color:#E8E8E8;'> trial.IReporter <a href=' /trial/itrial.py#L251'>done</a>()</tt>	Called when the test run is complete.
<tt style='background-color:#E8E8E8;'> trial.Todo <a href=' /trial/_synctest.py#L48'>__init__</a>(reason,errors)</tt>	@param reason a string explaining why the test is marked 'todo' @param errors an iterable of exception types that the test is.
<tt style='background-color:#E8E8E8;'> trial.Todo <a href=' /trial/_synctest.py#L65'>expected</a>(failure)</tt>	@param failure a l{twisted python failure failure}.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/_synctest.py#L80'>makeTodo</a>(value)</tt>	Return a l{todo} object built from c{value}.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/_synctest.py#L137'>_setWarningRegistryToNone</a>(modules)</tt>	Disable the per-module cache for every module found in c{modules}, typically c{sys.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/_synctest.py#L156'>_collectWarnings</a>(observeWarning,f)</tt>	Call c{f} with c{args} positional arguments and c{kwargs} keyword arguments and collect all warnings which are emitted as a result in a list.
<tt style='background-color:#E8E8E8;'> trial.PyUnitResultAdapter <a href=' /trial/_synctest.py#L202'>__init__</a>(original)</tt>	@param original a c{testresult} instance from c{unittest}.
<tt style='background-color:#E8E8E8;'> trial.PyUnitResultAdapter <a href=' /trial/_synctest.py#L237'>addSkip</a>(test,reason)</tt>	Report the skip as a failure.
<tt style='background-color:#E8E8E8;'> trial.PyUnitResultAdapter <a href=' /trial/_synctest.py#L244'>addUnexpectedSuccess</a>(test,todo)</tt>	Report the unexpected success as a failure.
<tt style='background-color:#E8E8E8;'> trial.PyUnitResultAdapter <a href=' /trial/_synctest.py#L251'>addExpectedFailure</a>(test,error)</tt>	Report the expected failure i e todo as a failure.
<tt style='background-color:#E8E8E8;'> trial._AssertRaisesContext <a href=' /trial/_synctest.py#L287'>__init__</a>(testCase,expected)</tt>	@param testcase the l{testcase} instance which is used to raise a test-failing exception when that is necessary.
<tt style='background-color:#E8E8E8;'> trial._AssertRaisesContext <a href=' /trial/_synctest.py#L303'>_handle</a>(obj)</tt>	Call the given object using this object as a context manager.
<tt style='background-color:#E8E8E8;'> trial._AssertRaisesContext <a href=' /trial/_synctest.py#L323'>__exit__</a>(exceptionType,exceptionValue,traceback)</tt>	Check exit exception against expected exception.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L368'>fail</a>(msg)</tt>	Absolutely fail the test do not pass go do not collect $200.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L378'>assertFalse</a>(condition,msg)</tt>	Fail the test if c{condition} evaluates to true.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L389'>assertTrue</a>(condition,msg)</tt>	Fail the test if c{condition} evaluates to false.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L400'>assertRaises</a>(exception,f)</tt>	Fail the test unless calling the function c{f} with the given c{args} and c{kwargs} raises c{exception}.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L425'>assertEqual</a>(first,second,msg)</tt>	Fail the test if c{first} and c{second} are not equal.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L437'>assertIs</a>(first,second,msg)</tt>	Fail the test if c{first} is not c{second} this is an.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L452'>assertIsNot</a>(first,second,msg)</tt>	Fail the test if c{first} is c{second} this is an.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L467'>assertNotEqual</a>(first,second,msg)</tt>	Fail the test if c{first} == c{second}.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L480'>assertIn</a>(containee,container,msg)</tt>	Fail the test if c{containee} is not found in c{container}.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L497'>assertNotIn</a>(containee,container,msg)</tt>	Fail the test if c{containee} is found in c{container}.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L514'>assertNotAlmostEqual</a>(first,second,places,msg)</tt>	Fail if the two objects are equal as determined by their difference rounded to the given number of decimal places.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L534'>assertAlmostEqual</a>(first,second,places,msg)</tt>	Fail if the two objects are unequal as determined by their difference rounded to the given number of decimal places.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L554'>assertApproximates</a>(first,second,tolerance,msg)</tt>	Fail if c{first} - c{second} > c{tolerance}.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L567'>assertSubstring</a>(substring,astring,msg)</tt>	Fail if c{substring} does not exist within c{astring}.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L575'>assertNotSubstring</a>(substring,astring,msg)</tt>	Fail if c{astring} contains c{substring}.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L583'>assertWarns</a>(category,message,filename,f)</tt>	Fail if the given function doesn't generate the specified warning when called.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L628'>assertIsInstance</a>(instance,classOrTuple,message)</tt>	Fail if c{instance} is not an instance of the given class or of one of the given classes.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L653'>assertNotIsInstance</a>(instance,classOrTuple)</tt>	Fail if c{instance} is an instance of the given class or of one of the given classes.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L670'>successResultOf</a>(deferred)</tt>	Return the current success result of c{deferred} or raise c{self.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L704'>failureResultOf</a>(deferred)</tt>	Return the current failure result of c{deferred} or raise c{self.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L754'>assertNoResult</a>(deferred)</tt>	Assert that c{deferred} does not have a result at this point.
<tt style='background-color:#E8E8E8;'> trial._Assertions <a href=' /trial/_synctest.py#L787'>assertRegex</a>(text,regex,msg)</tt>	Fail the test if a c{regexp} search of c{text} fails.
<tt style='background-color:#E8E8E8;'> trial._LogObserver <a href=' /trial/_synctest.py#L843'>_ignoreErrors</a>()</tt>	Do not store any errors with any of the given types.
<tt style='background-color:#E8E8E8;'> trial._LogObserver <a href=' /trial/_synctest.py#L850'>_clearIgnores</a>()</tt>	Stop ignoring any errors we might currently be ignoring.
<tt style='background-color:#E8E8E8;'> trial._LogObserver <a href=' /trial/_synctest.py#L857'>flushErrors</a>()</tt>	Flush errors from the list of caught errors if no arguments are.
<tt style='background-color:#E8E8E8;'> trial._LogObserver <a href=' /trial/_synctest.py#L878'>getErrors</a>()</tt>	Return a list of errors caught by this observer.
<tt style='background-color:#E8E8E8;'> trial._LogObserver <a href=' /trial/_synctest.py#L885'>gotEvent</a>(event)</tt>	The actual observer method called whenever a message is logged.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L954'>__eq__</a>(other)</tt>	Override the comparison defined by the base testcase which considers instances of the same class with the same _testmethodname to be.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L981'>getSkip</a>()</tt>	Return the skip reason set on this test if any is set checks on the.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L992'>getTodo</a>()</tt>	Return a l{todo} object if the test is marked todo checks on the.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L1006'>runTest</a>()</tt>	If no c{methodname} argument is passed to the constructor l{run} will treat this method as the thing with the actual test inside.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L1013'>run</a>(result)</tt>	Run the test case storing the results in c{result}.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L1056'>addCleanup</a>(f)</tt>	Add the given function to a list of functions to be called after the test has run but before c{teardown}.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L1070'>patch</a>(obj,attribute,value)</tt>	Monkey patch an object for the duration of the test.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L1091'>flushLoggedErrors</a>()</tt>	Remove stored errors received from the log.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L1106'>flushWarnings</a>(offendingFunctions)</tt>	Remove stored warnings from the list of captured warnings and return them.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L1188'>callDeprecated</a>(version,f)</tt>	Call a function that should have been deprecated at a specific version and in favor of a specific alternative and assert that it was thusly.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L1240'>mktemp</a>()</tt>	Create a new path name which can be used for a new file or directory.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L1265'>_getSuppress</a>()</tt>	Returns any warning suppressions set for this test checks on the.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L1276'>_getSkipReason</a>(method,skip)</tt>	Return the reason to use for skipping a test method.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L1293'>_run</a>(suppress,todo,method,result)</tt>	Run a single method either a test method or fixture.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L1335'>_runFixturesAndTest</a>(result)</tt>	Run c{setup}, a test method test cleanups and c{teardown}.
<tt style='background-color:#E8E8E8;'> trial.SynchronousTestCase <a href=' /trial/_synctest.py#L1370'>_runCleanups</a>(result)</tt>	Synchronously run any cleanups which have been added.
<tt style='background-color:#E8E8E8;'> trial.TestCase <a href=' /trial/_asynctest.py#L46'>__init__</a>(methodName)</tt>	Construct an asynchronous test case for c{methodname}.
<tt style='background-color:#E8E8E8;'> trial.TestCase <a href=' /trial/_asynctest.py#L59'>assertFailure</a>(deferred)</tt>	Fail if c{deferred} does not errback with one of c{expectedfailures}.
<tt style='background-color:#E8E8E8;'> trial.TestCase <a href=' /trial/_asynctest.py#L188'>deferRunCleanups</a>(ignored,result)</tt>	Run any scheduled cleanups and report errors (if any to the result object.
<tt style='background-color:#E8E8E8;'> trial.TestCase <a href=' /trial/_asynctest.py#L231'>_makeReactorMethod</a>(name)</tt>	Create a method which wraps the reactor method c{name} the new.
<tt style='background-color:#E8E8E8;'> trial.TestCase <a href=' /trial/_asynctest.py#L246'>_deprecateReactor</a>(reactor)</tt>	Deprecate c{iterate}, c{crash} and c{stop} on c{reactor} that is.
<tt style='background-color:#E8E8E8;'> trial.TestCase <a href=' /trial/_asynctest.py#L260'>_undeprecateReactor</a>(reactor)</tt>	Restore the deprecated reactor methods undoes what.
<tt style='background-color:#E8E8E8;'> trial.TestCase <a href=' /trial/_asynctest.py#L272'>_runCleanups</a>()</tt>	Run the cleanups added with l{addcleanup} in order.
<tt style='background-color:#E8E8E8;'> trial.TestCase <a href=' /trial/_asynctest.py#L287'>_runFixturesAndTest</a>(result)</tt>	Really run c{setup}, the test method and c{teardown} any of these may.
<tt style='background-color:#E8E8E8;'> trial.TestCase <a href=' /trial/_asynctest.py#L308'>addCleanup</a>(f)</tt>	Extend the base cleanup feature with support for cleanup functions which return deferreds.
<tt style='background-color:#E8E8E8;'> trial.TestCase <a href=' /trial/_asynctest.py#L323'>getTimeout</a>()</tt>	Returns the timeout value set on this test checks on the instance.
<tt style='background-color:#E8E8E8;'> trial.TestCase <a href=' /trial/_asynctest.py#L345'>_wait</a>(d,running)</tt>	Take a deferred that only ever callbacks block until it happens.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/runner.py#L51'>isPackage</a>(module)</tt>	Given an object return true if the object looks like a package.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/runner.py#L59'>isPackageDirectory</a>(dirname)</tt>	Is the directory at path 'dirname' a python package directory? returns the name of the __init__ file it may have a weird extension.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/runner.py#L70'>samefile</a>(filename1,filename2)</tt>	A hacky implementation of c{os path samefile} used by l{filenametomodule}.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/runner.py#L78'>filenameToModule</a>(fn)</tt>	Given a filename do whatever possible to return a module object matching that file.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/runner.py#L133'>_getMethodNameInClass</a>(method)</tt>	Find the attribute name on the method's class which refers to the method.
<tt style='background-color:#E8E8E8;'> trial.DestructiveTestSuite <a href=' /trial/runner.py#L153'>run</a>(result)</tt>	Almost the same as l{testsuite run}, but with c{self _tests} being.
<tt style='background-color:#E8E8E8;'> trial.LoggedSuite <a href=' /trial/runner.py#L179'>run</a>(result)</tt>	Run the suite storing all errors in c{result} if an error is logged.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/runner.py#L235'>name</a>(thing)</tt>	@param thing an object from modules instance of pythonmodule pythonattribute a testcase subclass or an instance of a testcase.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/runner.py#L254'>isTestCase</a>(obj)</tt>	@return c{true} if c{obj} is a class that contains test cases c{false} otherwise.
<tt style='background-color:#E8E8E8;'> trial.TestHolder <a href=' /trial/runner.py#L275'>__init__</a>(description)</tt>	@param description a string to be displayed l{testresult}.
<tt style='background-color:#E8E8E8;'> trial.TestHolder <a href=' /trial/runner.py#L294'>run</a>(result)</tt>	This test is just a placeholder run the test successfully.
<tt style='background-color:#E8E8E8;'> trial.ErrorHolder <a href=' /trial/runner.py#L319'>__init__</a>(description,error)</tt>	@param description a string used by c{testresult}s to identify this error.
<tt style='background-color:#E8E8E8;'> trial.ErrorHolder <a href=' /trial/runner.py#L336'>run</a>(result)</tt>	Run the test reporting the error.
<tt style='background-color:#E8E8E8;'> trial.TestLoader <a href=' /trial/runner.py#L378'>sort</a>(xs)</tt>	Sort the given things using l{sorter}.
<tt style='background-color:#E8E8E8;'> trial.TestLoader <a href=' /trial/runner.py#L386'>findTestClasses</a>(module)</tt>	Given a module return all trial test classes.
<tt style='background-color:#E8E8E8;'> trial.TestLoader <a href=' /trial/runner.py#L394'>findByName</a>(name)</tt>	Return a python object given a string describing it.
<tt style='background-color:#E8E8E8;'> trial.TestLoader <a href=' /trial/runner.py#L408'>loadModule</a>(module)</tt>	Return a test suite with all the tests from a module.
<tt style='background-color:#E8E8E8;'> trial.TestLoader <a href=' /trial/runner.py#L440'>loadClass</a>(klass)</tt>	Given a class which contains test cases return a sorted list of c{testcase} instances.
<tt style='background-color:#E8E8E8;'> trial.TestLoader <a href=' /trial/runner.py#L455'>getTestCaseNames</a>(klass)</tt>	Given a class that contains c{testcase}s return a list of names of methods that probably contain tests.
<tt style='background-color:#E8E8E8;'> trial.TestLoader <a href=' /trial/runner.py#L462'>loadMethod</a>(method)</tt>	Given a method of a c{testcase} that represents a test return a c{testcase} instance for that test.
<tt style='background-color:#E8E8E8;'> trial.TestLoader <a href=' /trial/runner.py#L474'>loadPackage</a>(package,recurse)</tt>	Load tests from a module object representing a package and return a testsuite containing those tests.
<tt style='background-color:#E8E8E8;'> trial.TestLoader <a href=' /trial/runner.py#L516'>loadDoctests</a>(module)</tt>	Return a suite of tests for all the doctests defined in c{module}.
<tt style='background-color:#E8E8E8;'> trial.TestLoader <a href=' /trial/runner.py#L544'>loadAnything</a>(thing,recurse,parent,qualName)</tt>	Given a python object return whatever tests that are in it whatever.
<tt style='background-color:#E8E8E8;'> trial.TestLoader <a href=' /trial/runner.py#L572'>loadByName</a>(name,recurse)</tt>	Given a string representing a python object return whatever tests are in that object.
<tt style='background-color:#E8E8E8;'> trial.TestLoader <a href=' /trial/runner.py#L591'>loadByNames</a>(names,recurse)</tt>	Construct a testsuite containing all the tests found in 'names', where names is a list of fully qualified python names and/or filenames.
<tt style='background-color:#E8E8E8;'> trial.TestLoader <a href=' /trial/runner.py#L611'>_uniqueTests</a>(things)</tt>	Gather unique suite objects from loaded things this will guarantee.
<tt style='background-color:#E8E8E8;'> trial.Py3TestLoader <a href=' /trial/runner.py#L639'>loadFile</a>(fileName,recurse)</tt>	Load a file and then the tests in that file.
<tt style='background-color:#E8E8E8;'> trial.Py3TestLoader <a href=' /trial/runner.py#L658'>findByName</a>(_name,recurse)</tt>	Find and load tests given c{name}.
<tt style='background-color:#E8E8E8;'> trial.Py3TestLoader <a href=' /trial/runner.py#L726'>loadAnything</a>(obj,recurse,parent,qualName)</tt>	Load absolutely anything (as long as that anything is a module package class or method with associated parent class and qualname.
<tt style='background-color:#E8E8E8;'> trial.Py3TestLoader <a href=' /trial/runner.py#L771'>loadByName</a>(name,recurse)</tt>	Load some tests by name.
<tt style='background-color:#E8E8E8;'> trial.Py3TestLoader <a href=' /trial/runner.py#L786'>loadByNames</a>(names,recurse)</tt>	Load some tests by a list of names.
<tt style='background-color:#E8E8E8;'> trial.Py3TestLoader <a href=' /trial/runner.py#L806'>loadClass</a>(klass)</tt>	Given a class which contains test cases return a list of l{testcase}s.
<tt style='background-color:#E8E8E8;'> trial.Py3TestLoader <a href=' /trial/runner.py#L826'>_uniqueTests</a>(things)</tt>	Gather unique suite objects from loaded things this will guarantee.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/runner.py#L843'>_qualNameWalker</a>(qualName)</tt>	Given a python qualified name this function yields a 2-tuple of the most specific qualified name first followed by the next-most-specific qualified.
<tt style='background-color:#E8E8E8;'> trial.TrialRunner <a href=' /trial/runner.py#L951'>run</a>(test)</tt>	Run the test or suite and return a result object.
<tt style='background-color:#E8E8E8;'> trial.TrialRunner <a href=' /trial/runner.py#L959'>_runWithoutDecoration</a>(test,forceGarbageCollection)</tt>	Private helper that runs the given test but doesn't decorate it.
<tt style='background-color:#E8E8E8;'> trial.TrialRunner <a href=' /trial/runner.py#L1006'>runUntilFailure</a>(test)</tt>	Repeatedly run c{test} until it fails.
<tt style='background-color:#E8E8E8;'> trial.TestSuite <a href=' /trial/_asyncrunner.py#L31'>run</a>(result)</tt>	Call c{run} on every member of the suite.
<tt style='background-color:#E8E8E8;'> trial.TestDecorator <a href=' /trial/_asyncrunner.py#L53'>__call__</a>(result)</tt>	Run the unit test.
<tt style='background-color:#E8E8E8;'> trial.TestDecorator <a href=' /trial/_asyncrunner.py#L62'>run</a>(result)</tt>	Run the unit test.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/_asyncrunner.py#L73'>_clearSuite</a>(suite)</tt>	Clear all tests from c{suite}.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/_asyncrunner.py#L85'>decorate</a>(test,decorator)</tt>	Decorate all test cases in c{test} with c{decorator}.
<tt style='background-color:#E8E8E8;'> trial._BrokenIDTestCaseAdapter <a href=' /trial/_asyncrunner.py#L130'>id</a>()</tt>	Return the fully-qualified python name of the doctest.
<tt style='background-color:#E8E8E8;'> trial. <a href=' /trial/_asyncrunner.py#L174'>_iterateTests</a>(testSuiteOrCase)</tt>	Iterate through all of the test cases in c{testsuiteorcase}.
<tt style='background-color:#E8E8E8;'> trial.TestResult <a href=' /trial/reporter.py#L97'>_getFailure</a>(error)</tt>	Convert a c{sys exc_info()}-style tuple to a l{failure}, if necessary.
<tt style='background-color:#E8E8E8;'> trial.TestResult <a href=' /trial/reporter.py#L106'>startTest</a>(test)</tt>	This must be called before the given test is commenced.
<tt style='background-color:#E8E8E8;'> trial.TestResult <a href=' /trial/reporter.py#L116'>stopTest</a>(test)</tt>	This must be called after the given test is completed.
<tt style='background-color:#E8E8E8;'> trial.TestResult <a href=' /trial/reporter.py#L126'>addFailure</a>(test,fail)</tt>	Report a failed assertion for the given test.
<tt style='background-color:#E8E8E8;'> trial.TestResult <a href=' /trial/reporter.py#L136'>addError</a>(test,error)</tt>	Report an error that occurred while running the given test.
<tt style='background-color:#E8E8E8;'> trial.TestResult <a href=' /trial/reporter.py#L146'>addSkip</a>(test,reason)</tt>	Report that the given test was skipped.
<tt style='background-color:#E8E8E8;'> trial.TestResult <a href=' /trial/reporter.py#L160'>addUnexpectedSuccess</a>(test,todo)</tt>	Report that the given test succeeded against expectations.
<tt style='background-color:#E8E8E8;'> trial.TestResult <a href=' /trial/reporter.py#L177'>addExpectedFailure</a>(test,error,todo)</tt>	Report that the given test failed and was expected to do so.
<tt style='background-color:#E8E8E8;'> trial.TestResult <a href=' /trial/reporter.py#L194'>addSuccess</a>(test)</tt>	Report that the given test succeeded.
<tt style='background-color:#E8E8E8;'> trial.TestResult <a href=' /trial/reporter.py#L203'>wasSuccessful</a>()</tt>	Report whether or not this test suite was successful or not.
<tt style='background-color:#E8E8E8;'> trial.TestResult <a href=' /trial/reporter.py#L218'>done</a>()</tt>	The test suite has finished running.
<tt style='background-color:#E8E8E8;'> trial.UncleanWarningsReporterWrapper <a href=' /trial/reporter.py#L244'>addError</a>(test,error)</tt>	If the error is a l{util dirtyreactoraggregateerror}, instead of.
<tt style='background-color:#E8E8E8;'> trial._AdaptedReporter <a href=' /trial/reporter.py#L282'>__init__</a>(original,testAdapter)</tt>	Construct an l{_adaptedreporter}.
<tt style='background-color:#E8E8E8;'> trial._AdaptedReporter <a href=' /trial/reporter.py#L293'>addError</a>(test,error)</tt>	See l{itrial ireporter}.
<tt style='background-color:#E8E8E8;'> trial._AdaptedReporter <a href=' /trial/reporter.py#L301'>addExpectedFailure</a>(test,failure,todo)</tt>	See l{itrial ireporter}.
<tt style='background-color:#E8E8E8;'> trial._AdaptedReporter <a href=' /trial/reporter.py#L318'>addFailure</a>(test,failure)</tt>	See l{itrial ireporter}.
<tt style='background-color:#E8E8E8;'> trial._AdaptedReporter <a href=' /trial/reporter.py#L326'>addSkip</a>(test,skip)</tt>	See l{itrial ireporter}.
<tt style='background-color:#E8E8E8;'> trial._AdaptedReporter <a href=' /trial/reporter.py#L334'>addUnexpectedSuccess</a>(test,todo)</tt>	See l{itrial ireporter}.
<tt style='background-color:#E8E8E8;'> trial._AdaptedReporter <a href=' /trial/reporter.py#L350'>startTest</a>(test)</tt>	See l{itrial ireporter}.
<tt style='background-color:#E8E8E8;'> trial._AdaptedReporter <a href=' /trial/reporter.py#L357'>stopTest</a>(test)</tt>	See l{itrial ireporter}.
<tt style='background-color:#E8E8E8;'> trial.Reporter <a href=' /trial/reporter.py#L403'>_observeWarnings</a>(event)</tt>	Observe warning events and write them to c{self _stream}.
<tt style='background-color:#E8E8E8;'> trial.Reporter <a href=' /trial/reporter.py#L423'>startTest</a>(test)</tt>	Called when a test begins to run records the time when it was first.
<tt style='background-color:#E8E8E8;'> trial.Reporter <a href=' /trial/reporter.py#L436'>addFailure</a>(test,fail)</tt>	Called when a test fails if c{realtime} is set then it prints the.
<tt style='background-color:#E8E8E8;'> trial.Reporter <a href=' /trial/reporter.py#L450'>addError</a>(test,error)</tt>	Called when a test raises an error if c{realtime} is set then it.
<tt style='background-color:#E8E8E8;'> trial.Reporter <a href=' /trial/reporter.py#L465'>_write</a>(format)</tt>	Safely write to the reporter's stream.
<tt style='background-color:#E8E8E8;'> trial.Reporter <a href=' /trial/reporter.py#L481'>_writeln</a>(format)</tt>	Safely write a line to the reporter's stream newline is appended to.
<tt style='background-color:#E8E8E8;'> trial.Reporter <a href=' /trial/reporter.py#L510'>_trimFrames</a>(frames)</tt>	Trim frames to remove internal paths.
<tt style='background-color:#E8E8E8;'> trial.Reporter <a href=' /trial/reporter.py#L606'>_groupResults</a>(results,formatter)</tt>	Group tests together based on their results.
<tt style='background-color:#E8E8E8;'> trial.Reporter <a href=' /trial/reporter.py#L633'>_printResults</a>(flavor,errors,formatter)</tt>	Print a group of errors to the stream.
<tt style='background-color:#E8E8E8;'> trial.Reporter <a href=' /trial/reporter.py#L663'>_printErrors</a>()</tt>	Print all of the non-success results to the stream in full.
<tt style='background-color:#E8E8E8;'> trial.Reporter <a href=' /trial/reporter.py#L679'>_getSummary</a>()</tt>	Return a formatted count of tests status results.
<tt style='background-color:#E8E8E8;'> trial.Reporter <a href=' /trial/reporter.py#L695'>_printSummary</a>()</tt>	Print a line summarising the test results to the stream.
<tt style='background-color:#E8E8E8;'> trial.Reporter <a href=' /trial/reporter.py#L707'>done</a>()</tt>	Summarize the result of the test run.
<tt style='background-color:#E8E8E8;'> trial.MinimalReporter <a href=' /trial/reporter.py#L737'>_printErrors</a>()</tt>	Don't print a detailed summary of errors we only care about the.
<tt style='background-color:#E8E8E8;'> trial.MinimalReporter <a href=' /trial/reporter.py#L744'>_printSummary</a>()</tt>	Print out a one-line summary of the form.
<tt style='background-color:#E8E8E8;'> trial.TimingTextReporter <a href=' /trial/reporter.py#L855'>stopTest</a>(method)</tt>	Mark the test as stopped and write the time it took to run the test to the stream.
<tt style='background-color:#E8E8E8;'> trial._AnsiColorizer <a href=' /trial/reporter.py#L879'>supported</a>(cls,stream)</tt>	A class method that returns true if the current platform supports coloring terminal output using this method.
<tt style='background-color:#E8E8E8;'> trial._AnsiColorizer <a href=' /trial/reporter.py#L903'>write</a>(text,color)</tt>	Write the given text to the stream in the given color.
<tt style='background-color:#E8E8E8;'> trial.SubunitReporter <a href=' /trial/reporter.py#L999'>__init__</a>(stream,tbformat,realtime,publisher)</tt>	Construct a l{subunitreporter}.
<tt style='background-color:#E8E8E8;'> trial.SubunitReporter <a href=' /trial/reporter.py#L1019'>done</a>()</tt>	Record that the entire test suite run is finished.
<tt style='background-color:#E8E8E8;'> trial.SubunitReporter <a href=' /trial/reporter.py#L1029'>shouldStop</a>()</tt>	Whether or not the test runner should stop running tests.
<tt style='background-color:#E8E8E8;'> trial.SubunitReporter <a href=' /trial/reporter.py#L1037'>stop</a>()</tt>	Signal that the test runner should stop running tests.
<tt style='background-color:#E8E8E8;'> trial.SubunitReporter <a href=' /trial/reporter.py#L1044'>wasSuccessful</a>()</tt>	Has the test run been successful so far? @return c{true} if we have received no reports of errors or failures.
<tt style='background-color:#E8E8E8;'> trial.SubunitReporter <a href=' /trial/reporter.py#L1057'>startTest</a>(test)</tt>	Record that c{test} has started.
<tt style='background-color:#E8E8E8;'> trial.SubunitReporter <a href=' /trial/reporter.py#L1064'>stopTest</a>(test)</tt>	Record that c{test} has completed.
<tt style='background-color:#E8E8E8;'> trial.SubunitReporter <a href=' /trial/reporter.py#L1071'>addSuccess</a>(test)</tt>	Record that c{test} was successful.
<tt style='background-color:#E8E8E8;'> trial.SubunitReporter <a href=' /trial/reporter.py#L1078'>addSkip</a>(test,reason)</tt>	Record that c{test} was skipped for c{reason}.
<tt style='background-color:#E8E8E8;'> trial.SubunitReporter <a href=' /trial/reporter.py#L1096'>addError</a>(test,err)</tt>	Record that c{test} failed with an unexpected error c{err}.
<tt style='background-color:#E8E8E8;'> trial.SubunitReporter <a href=' /trial/reporter.py#L1108'>addFailure</a>(test,err)</tt>	Record that c{test} failed an assertion with the error c{err}.
<tt style='background-color:#E8E8E8;'> trial.SubunitReporter <a href=' /trial/reporter.py#L1120'>addExpectedFailure</a>(test,failure,todo)</tt>	Record an expected failure from a test.
<tt style='background-color:#E8E8E8;'> trial.SubunitReporter <a href=' /trial/reporter.py#L1135'>addUnexpectedSuccess</a>(test,todo)</tt>	Record an unexpected success.
<tt style='background-color:#E8E8E8;'> trial.TreeReporter <a href=' /trial/reporter.py#L1175'>getDescription</a>(test)</tt>	Return the name of the method which 'test' represents this is.
<tt style='background-color:#E8E8E8;'> trial.TreeReporter <a href=' /trial/reporter.py#L1222'>_getPreludeSegments</a>(testID)</tt>	Return a list of all non-leaf segments to display in the tree.
<tt style='background-color:#E8E8E8;'> trial.TreeReporter <a href=' /trial/reporter.py#L1237'>_testPrelude</a>(testID)</tt>	Write the name of the test to the stream indenting it appropriately.
<tt style='background-color:#E8E8E8;'> trial.TreeReporter <a href=' /trial/reporter.py#L1269'>startTest</a>(test)</tt>	Called when c{test} starts writes the tests name to the stream using.
<tt style='background-color:#E8E8E8;'> trial.TreeReporter <a href=' /trial/reporter.py#L1280'>endLine</a>(message,color)</tt>	Print 'message' in the given color.
<tt style='background-color:#E8E8E8;'> trial.TreeReporter <a href=' /trial/reporter.py#L1293'>_printSummary</a>()</tt>	Print a line summarising the test results to the stream and color the status result.
<tt style='background-color:#E8E8E8;'> trial._dist. <a href=' /trial/_dist/workertrial.py#L20'>_setupPath</a>(environ)</tt>	Override c{sys path} with what the parent passed in b{trial_pythonpath}.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerLogObserver <a href=' /trial/_dist/workertrial.py#L45'>__init__</a>(protocol)</tt>	@param protocol a connected c{amp} protocol instance.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerLogObserver <a href=' /trial/_dist/workertrial.py#L53'>emit</a>(eventDict)</tt>	Produce a log output.
<tt style='background-color:#E8E8E8;'> trial._dist. <a href=' /trial/_dist/workertrial.py#L65'>main</a>(_fdopen)</tt>	Main function to be run if __name__ == "__main__".
<tt style='background-color:#E8E8E8;'> trial._dist.DistReporter <a href=' /trial/_dist/distreporter.py#L31'>startTest</a>(test)</tt>	Queue test starting.
<tt style='background-color:#E8E8E8;'> trial._dist.DistReporter <a href=' /trial/_dist/distreporter.py#L39'>addFailure</a>(test,fail)</tt>	Queue adding a failure.
<tt style='background-color:#E8E8E8;'> trial._dist.DistReporter <a href=' /trial/_dist/distreporter.py#L47'>addError</a>(test,error)</tt>	Queue error adding.
<tt style='background-color:#E8E8E8;'> trial._dist.DistReporter <a href=' /trial/_dist/distreporter.py#L55'>addSkip</a>(test,reason)</tt>	Queue adding a skip.
<tt style='background-color:#E8E8E8;'> trial._dist.DistReporter <a href=' /trial/_dist/distreporter.py#L63'>addUnexpectedSuccess</a>(test,todo)</tt>	Queue adding an unexpected success.
<tt style='background-color:#E8E8E8;'> trial._dist.DistReporter <a href=' /trial/_dist/distreporter.py#L71'>addExpectedFailure</a>(test,error,todo)</tt>	Queue adding an unexpected failure.
<tt style='background-color:#E8E8E8;'> trial._dist.DistReporter <a href=' /trial/_dist/distreporter.py#L79'>addSuccess</a>(test)</tt>	Queue adding a success.
<tt style='background-color:#E8E8E8;'> trial._dist.DistReporter <a href=' /trial/_dist/distreporter.py#L86'>stopTest</a>(test)</tt>	Queue stopping the test then unroll the queue.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerProtocol <a href=' /trial/_dist/worker.py#L42'>run</a>(testCase)</tt>	Run a test case by name.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerProtocol <a href=' /trial/_dist/worker.py#L56'>start</a>(directory)</tt>	Set up the worker moving into given directory for tests to run in them.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerAMP <a href=' /trial/_dist/worker.py#L73'>addSuccess</a>(testName)</tt>	Add a success to the reporter.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerAMP <a href=' /trial/_dist/worker.py#L83'>_buildFailure</a>(error,errorClass,frames)</tt>	Helper to build a c{failure} with some traceback.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerAMP <a href=' /trial/_dist/worker.py#L107'>addError</a>(testName,error,errorClass,frames)</tt>	Add an error to the reporter.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerAMP <a href=' /trial/_dist/worker.py#L118'>addFailure</a>(testName,fail,failClass,frames)</tt>	Add a failure to the reporter.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerAMP <a href=' /trial/_dist/worker.py#L129'>addSkip</a>(testName,reason)</tt>	Add a skip to the reporter.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerAMP <a href=' /trial/_dist/worker.py#L139'>addExpectedFailure</a>(testName,error,todo)</tt>	Add an expected failure to the reporter.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerAMP <a href=' /trial/_dist/worker.py#L150'>addUnexpectedSuccess</a>(testName,todo)</tt>	Add an unexpected success to the reporter.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerAMP <a href=' /trial/_dist/worker.py#L160'>testWrite</a>(out)</tt>	Print test output from the worker.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerAMP <a href=' /trial/_dist/worker.py#L173'>_stopTest</a>(result)</tt>	Stop the current running test case forwarding the result.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerAMP <a href=' /trial/_dist/worker.py#L181'>run</a>(testCase,result)</tt>	Run a test.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerAMP <a href=' /trial/_dist/worker.py#L192'>setTestStream</a>(stream)</tt>	Set the stream used to log output from tests.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerTransport <a href=' /trial/_dist/worker.py#L220'>write</a>(data)</tt>	Forward data to transport.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerTransport <a href=' /trial/_dist/worker.py#L227'>writeSequence</a>(sequence)</tt>	Emulate c{writesequence} by iterating data in the c{sequence}.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerTransport <a href=' /trial/_dist/worker.py#L235'>loseConnection</a>()</tt>	Closes the transport.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerTransport <a href=' /trial/_dist/worker.py#L242'>getHost</a>()</tt>	Return a l{localworkeraddress} instance.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorkerTransport <a href=' /trial/_dist/worker.py#L249'>getPeer</a>()</tt>	Return a l{localworkeraddress} instance.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorker <a href=' /trial/_dist/worker.py#L277'>connectionMade</a>()</tt>	When connection is made create the amp protocol instance.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorker <a href=' /trial/_dist/worker.py#L298'>connectionLost</a>(reason)</tt>	On connection lost close the log files that we're managing for stdin and stdout.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorker <a href=' /trial/_dist/worker.py#L307'>processEnded</a>(reason)</tt>	When the process closes call c{connectionlost} for cleanup purposes and forward the information to the c{_ampprotocol}.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorker <a href=' /trial/_dist/worker.py#L317'>outReceived</a>(data)</tt>	Send data received from stdout to log.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorker <a href=' /trial/_dist/worker.py#L324'>errReceived</a>(data)</tt>	Write error data to log.
<tt style='background-color:#E8E8E8;'> trial._dist.LocalWorker <a href=' /trial/_dist/worker.py#L331'>childDataReceived</a>(childFD,data)</tt>	Handle data received on the specific pipe for the c{_ampprotocol}.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerOptions <a href=' /trial/_dist/options.py#L25'>coverdir</a>()</tt>	Return a l{filepath} representing the directory into which coverage results should be written.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerReporter <a href=' /trial/_dist/workerreporter.py#L31'>__init__</a>(ampProtocol)</tt>	@param ampprotocol the communication channel with the trial distributed manager which collects all test results.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerReporter <a href=' /trial/_dist/workerreporter.py#L41'>_getFailure</a>(error)</tt>	Convert a c{sys exc_info()}-style tuple to a l{failure}, if necessary.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerReporter <a href=' /trial/_dist/workerreporter.py#L50'>_getFrames</a>(failure)</tt>	Extract frames from a c{failure} instance.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerReporter <a href=' /trial/_dist/workerreporter.py#L60'>addSuccess</a>(test)</tt>	Send a success over.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerReporter <a href=' /trial/_dist/workerreporter.py#L72'>addError</a>(test,error)</tt>	Send an error over.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerReporter <a href=' /trial/_dist/workerreporter.py#L91'>addFailure</a>(test,fail)</tt>	Send a failure over.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerReporter <a href=' /trial/_dist/workerreporter.py#L110'>addSkip</a>(test,reason)</tt>	Send a skip over.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerReporter <a href=' /trial/_dist/workerreporter.py#L124'>_getTodoReason</a>(todo)</tt>	Get the reason for a c{todo}.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerReporter <a href=' /trial/_dist/workerreporter.py#L136'>addExpectedFailure</a>(test,error,todo)</tt>	Send an expected failure over.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerReporter <a href=' /trial/_dist/workerreporter.py#L151'>addUnexpectedSuccess</a>(test,todo)</tt>	Send an unexpected success over.
<tt style='background-color:#E8E8E8;'> trial._dist.WorkerReporter <a href=' /trial/_dist/workerreporter.py#L164'>printSummary</a>()</tt>	I{don't} print a summary.
<tt style='background-color:#E8E8E8;'> trial._dist.DistTrialRunner <a href=' /trial/_dist/disttrial.py#L43'>_makeResult</a>()</tt>	Make reporter factory and wrap it with a l{distreporter}.
<tt style='background-color:#E8E8E8;'> trial._dist.DistTrialRunner <a href=' /trial/_dist/disttrial.py#L78'>writeResults</a>(result)</tt>	Write test run final outcome to result.
<tt style='background-color:#E8E8E8;'> trial._dist.DistTrialRunner <a href=' /trial/_dist/disttrial.py#L87'>createLocalWorkers</a>(protocols,workingDirectory)</tt>	Create local worker protocol instances and return them.
<tt style='background-color:#E8E8E8;'> trial._dist.DistTrialRunner <a href=' /trial/_dist/disttrial.py#L105'>launchWorkerProcesses</a>(spawner,protocols,arguments)</tt>	Spawn processes from a list of process protocols.
<tt style='background-color:#E8E8E8;'> trial._dist.DistTrialRunner <a href=' /trial/_dist/disttrial.py#L131'>_driveWorker</a>(worker,result,testCases,cooperate)</tt>	Drive a l{localworkeramp} instance iterating the tests and calling c{run} for every one of them.
<tt style='background-color:#E8E8E8;'> trial._dist.DistTrialRunner <a href=' /trial/_dist/disttrial.py#L161'>run</a>(suite,reactor,cooperate,untilFailure)</tt>	Spawn local worker processes and load tests after that run them.
<tt style='background-color:#E8E8E8;'> trial._dist.DistTrialRunner <a href=' /trial/_dist/disttrial.py#L252'>runUntilFailure</a>(suite)</tt>	Run the tests with local worker processes until they fail.
<tt style='background-color:#E8E8E8;'> persisted.IPersistable <a href=' /persisted/sob.py#L31'>setStyle</a>(style)</tt>	Set desired format.
<tt style='background-color:#E8E8E8;'> persisted.IPersistable <a href=' /persisted/sob.py#L37'>save</a>(tag,filename,passphrase)</tt>	Save object to file.
<tt style='background-color:#E8E8E8;'> persisted.Persistent <a href=' /persisted/sob.py#L55'>setStyle</a>(style)</tt>	Set desired format.
<tt style='background-color:#E8E8E8;'> persisted.Persistent <a href=' /persisted/sob.py#L88'>save</a>(tag,filename,passphrase)</tt>	Save object to file.
<tt style='background-color:#E8E8E8;'> persisted._EverythingEphemeral <a href=' /persisted/sob.py#L114'>__init__</a>(mainMod)</tt>	@param mainmod the '__main__' module that this class will proxy.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/sob.py#L131'>load</a>(filename,style)</tt>	Load an object from a file.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/sob.py#L164'>loadValueFromFile</a>(filename,variable)</tt>	Load the value of a variable in a python file.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/aot.py#L162'>getSource</a>(ao)</tt>	Pass me an ao i'll return a nicely-formatted source representation.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/aot.py#L243'>unjellyFromAOT</a>(aot)</tt>	Pass me an abstract object tree and i'll unjelly it for you.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/aot.py#L249'>unjellyFromSource</a>(stringOrFile)</tt>	Pass me a string of code or a filename that defines an 'app' variable (in.
<tt style='background-color:#E8E8E8;'> persisted.AOTUnjellier <a href=' /persisted/aot.py#L291'>unjellyLater</a>(node)</tt>	Unjelly a node later.
<tt style='background-color:#E8E8E8;'> persisted.AOTUnjellier <a href=' /persisted/aot.py#L298'>unjellyInto</a>(obj,loc,ao)</tt>	Utility method for unjellying one object into another.
<tt style='background-color:#E8E8E8;'> persisted.AOTUnjellier <a href=' /persisted/aot.py#L316'>unjellyAttribute</a>(instance,attrName,ao)</tt>	Utility method for unjellying into instances of attributes.
<tt style='background-color:#E8E8E8;'> persisted.AOTUnjellier <a href=' /persisted/aot.py#L325'>unjellyAO</a>(ao)</tt>	Unjelly an abstract object and everything it contains.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/aot.py#L445'>jellyToAOT</a>(obj)</tt>	Convert an object to an abstract object tree.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/aot.py#L449'>jellyToSource</a>(obj,file)</tt>	Pass me an object and optionally a file object.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/aot.py#L472'>_classOfMethod</a>(methodObject)</tt>	Get the associated class of the given method object.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/aot.py#L488'>_funcOfMethod</a>(methodObject)</tt>	Get the associated function of the given method object.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/aot.py#L504'>_selfOfMethod</a>(methodObject)</tt>	Get the object that a bound method is bound to.
<tt style='background-color:#E8E8E8;'> persisted.AOTJellier <a href=' /persisted/aot.py#L527'>prepareForRef</a>(aoref,object)</tt>	I prepare an object for later referencing by storing its id() and its _aoref in a cache.
<tt style='background-color:#E8E8E8;'> persisted.AOTJellier <a href=' /persisted/aot.py#L532'>jellyToAO</a>(obj)</tt>	I turn an object into an aot and return it.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/styles.py#L49'>pickleMethod</a>(method)</tt>	Support function for copy_reg to pickle method refs.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/styles.py#L62'>_methodFunction</a>(classObject,methodName)</tt>	Retrieve the function object implementing a method name given the class it's on and a method name.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/styles.py#L83'>unpickleMethod</a>(im_name,im_self,im_class)</tt>	Support function for copy_reg to unpickle method refs.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/styles.py#L121'>_pickleFunction</a>(f)</tt>	Reduce in the sense of l{pickle}'s c{object __reduce__} special method a.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/styles.py#L141'>_unpickleFunction</a>(fullyQualifiedName)</tt>	Convert a function name into a function by importing it.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/styles.py#L162'>pickleModule</a>(module)</tt>	Support function for copy_reg to pickle module refs.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/styles.py#L166'>unpickleModule</a>(name)</tt>	Support function for copy_reg to unpickle module refs.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/styles.py#L181'>pickleStringO</a>(stringo)</tt>	Reduce the given cstringo.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/styles.py#L196'>unpickleStringO</a>(val,sek)</tt>	Convert the output of l{picklestringo} into an appropriate type for the current python version.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/styles.py#L218'>pickleStringI</a>(stringi)</tt>	Reduce the given cstringi.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/styles.py#L235'>unpickleStringI</a>(val,sek)</tt>	Convert the output of l{picklestringi} into an appropriate type for the current python version.
<tt style='background-color:#E8E8E8;'> persisted.Ephemeral <a href=' /persisted/styles.py#L274'>__reduce__</a>()</tt>	Serialize any subclass of l{ephemeral} in a way which replaces it with l{ephemeral} itself.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/styles.py#L305'>requireUpgrade</a>(obj)</tt>	Require that a versioned instance be upgraded completely first.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/styles.py#L314'>_aybabtu</a>(c)</tt>	Get all of the parent classes of c{c}, not including c{c} itself which are strict subclasses of l{versioned}.
<tt style='background-color:#E8E8E8;'> persisted.Versioned <a href=' /persisted/styles.py#L358'>__getstate__</a>(dict)</tt>	Get state adding a version number to it on its way out.
<tt style='background-color:#E8E8E8;'> persisted.Versioned <a href=' /persisted/styles.py#L374'>versionUpgrade</a>()</tt>	Internal do a version upgrade.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L50'>__init__</a>(name)</tt>	@type name str @param name base path to use for the directory storage.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L79'>_encode</a>(k)</tt>	Encode a key so it can be used as a filename.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L87'>_decode</a>(k)</tt>	Decode a filename to get the key.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L94'>_readFile</a>(path)</tt>	Read in the contents of a file.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L105'>_writeFile</a>(path,data)</tt>	Write data to a file.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L116'>__len__</a>()</tt>	@return the number of key/value pairs in this shelf.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L123'>__setitem__</a>(k,v)</tt>	C{dirdbm[k] = v}.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L157'>__getitem__</a>(k)</tt>	C{dirdbm[k]} get the contents of a file in this directory as a string.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L177'>__delitem__</a>(k)</tt>	C{del dirdbm[foo]} delete a file in this directory.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L196'>keys</a>()</tt>	@return a l{list} of filenames keys.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L203'>values</a>()</tt>	@return a l{list} of file-contents values.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L214'>items</a>()</tt>	@return a l{list} of 2-tuples containing key/value pairs.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L225'>has_key</a>(key)</tt>	@type key bytes @param key the key to test.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L239'>setdefault</a>(key,value)</tt>	@type key bytes @param key the key to lookup.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L253'>get</a>(key,default)</tt>	@type key bytes @param key the key to lookup.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L269'>__contains__</a>(key)</tt>	@see l{dirdbm has_key}.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L276'>update</a>(dict)</tt>	Add all the key/value pairs in l{dict} to this dirdbm any conflicting.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L288'>copyTo</a>(path)</tt>	Copy the contents of this dirdbm to the dirdbm at c{path}.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L309'>clear</a>()</tt>	Delete all key/value pairs in this dirdbm.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L317'>close</a>()</tt>	Close this dbm no-op for dbm-style interface compliance.
<tt style='background-color:#E8E8E8;'> persisted.DirDBM <a href=' /persisted/dirdbm.py#L323'>getModificationTime</a>(key)</tt>	Returns modification time of an entry.
<tt style='background-color:#E8E8E8;'> persisted.Shelf <a href=' /persisted/dirdbm.py#L348'>__setitem__</a>(k,v)</tt>	C{shelf[foo] = bar} create or modify a textfile in this directory.
<tt style='background-color:#E8E8E8;'> persisted.Shelf <a href=' /persisted/dirdbm.py#L362'>__getitem__</a>(k)</tt>	C{dirdbm[foo]} get and unpickle the contents of a file in this directory.
<tt style='background-color:#E8E8E8;'> persisted. <a href=' /persisted/dirdbm.py#L377'>open</a>(file,flag,mode)</tt>	This is for 'anydbm' compatibility.
<tt style='background-color:#E8E8E8;'> persisted._Container <a href=' /persisted/crefutil.py#L45'>__init__</a>(l,containerType)</tt>	@param l the list of object which may contain some not yet referenced objects.
<tt style='background-color:#E8E8E8;'> persisted._Container <a href=' /persisted/crefutil.py#L66'>__setitem__</a>(n,obj)</tt>	Change the value of one contained objects and resolve references if all objects have been referenced.
<tt style='background-color:#E8E8E8;'> persisted._Tuple <a href=' /persisted/crefutil.py#L85'>__init__</a>(l)</tt>	@param l the list of object which may contain some not yet referenced objects.
<tt style='background-color:#E8E8E8;'> application. <a href=' /application/strports.py#L18'>service</a>(description,factory,reactor)</tt>	Return the service corresponding to a description.
<tt style='background-color:#E8E8E8;'> application. <a href=' /application/strports.py#L46'>listen</a>(description,factory)</tt>	Listen on a port corresponding to a description.
<tt style='background-color:#E8E8E8;'> application. <a href=' /application/internet.py#L57'>_maybeGlobalReactor</a>(maybeReactor)</tt>	@return the argument or the global reactor if the argument is l{none}.
<tt style='background-color:#E8E8E8;'> application._AbstractServer <a href=' /application/internet.py#L133'>_getPort</a>()</tt>	Wrapper around the appropriate listen method of the reactor.
<tt style='background-color:#E8E8E8;'> application._AbstractClient <a href=' /application/internet.py#L188'>_getConnection</a>()</tt>	Wrapper around the appropriate connect method of the reactor.
<tt style='background-color:#E8E8E8;'> application.TimerService <a href=' /application/internet.py#L251'>__init__</a>(step,callable)</tt>	@param step the number of seconds between calls.
<tt style='background-color:#E8E8E8;'> application.TimerService <a href=' /application/internet.py#L285'>stopService</a>()</tt>	Stop the service.
<tt style='background-color:#E8E8E8;'> application.StreamServerEndpointService <a href=' /application/internet.py#L355'>privilegedStartService</a>()</tt>	Start listening on the endpoint.
<tt style='background-color:#E8E8E8;'> application.StreamServerEndpointService <a href=' /application/internet.py#L373'>startService</a>()</tt>	Start listening on the endpoint unless l{privilegedstartservice} got around to it already.
<tt style='background-color:#E8E8E8;'> application.StreamServerEndpointService <a href=' /application/internet.py#L383'>stopService</a>()</tt>	Stop listening on the port if it is already listening otherwise cancel the attempt to listen.
<tt style='background-color:#E8E8E8;'> application._ReconnectingProtocolProxy <a href=' /application/internet.py#L410'>__init__</a>(protocol,lostNotification)</tt>	Create a l{_reconnectingprotocolproxy}.
<tt style='background-color:#E8E8E8;'> application._ReconnectingProtocolProxy <a href=' /application/internet.py#L427'>connectionLost</a>(reason)</tt>	The connection was lost relay this information.
<tt style='background-color:#E8E8E8;'> application._DisconnectFactory <a href=' /application/internet.py#L462'>buildProtocol</a>(addr)</tt>	Create a l{_reconnectingprotocolproxy} with the disconnect-notification callback we were called with.
<tt style='background-color:#E8E8E8;'> application. <a href=' /application/internet.py#L488'>backoffPolicy</a>(initialDelay,maxDelay,factor,jitter)</tt>	A timeout policy for l{clientservice} which computes an exponential backoff interval with configurable parameters.
<tt style='background-color:#E8E8E8;'> application. <a href=' /application/internet.py#L526'>_firstResult</a>(gen)</tt>	Return the first element of a generator and exhaust it.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L551'>__init__</a>(endpoint,factory,retryPolicy,clock)</tt>	@see l{clientservice __init__}.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L577'>_init</a>()</tt>	The service has not been started.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L583'>_connecting</a>()</tt>	The service has started connecting.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L589'>_waiting</a>()</tt>	The service is waiting for the reconnection period before reconnecting.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L596'>_connected</a>()</tt>	The service is connected.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L602'>_disconnecting</a>()</tt>	The service is disconnecting after being asked to shutdown.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L608'>_restarting</a>()</tt>	The service is disconnecting and has been asked to restart.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L614'>_stopped</a>()</tt>	The service has been stopped and is disconnected.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L620'>start</a>()</tt>	Start this l{clientservice}, initiating the connection retry loop.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L626'>_connect</a>()</tt>	Start a connection attempt.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L640'>_resetFailedAttempts</a>()</tt>	Reset the number of failed attempts.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L648'>stop</a>()</tt>	Stop trying to connect and disconnect any current connection.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L657'>_waitForStop</a>()</tt>	Return a deferred that will fire when the service has finished disconnecting.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L670'>_stopConnecting</a>()</tt>	Stop pending connection attempt.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L678'>_stopRetrying</a>()</tt>	Stop pending attempt to reconnect.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L687'>_disconnect</a>()</tt>	Disconnect the current connection.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L695'>_connectionMade</a>(protocol)</tt>	A connection has been made.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L704'>_notifyWaiters</a>(protocol)</tt>	Notify all pending requests for a connection that a connection has been made.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L721'>_connectionFailed</a>(f)</tt>	The current connection attempt failed.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L728'>_wait</a>()</tt>	Schedule a retry attempt.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L735'>_ignoreAndWait</a>(f)</tt>	Schedule a retry attempt and ignore the failure passed in.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L751'>_reconnect</a>()</tt>	The wait between connection attempts is done.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L757'>_clientDisconnected</a>()</tt>	The current connection has been disconnected.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L763'>_forgetConnection</a>()</tt>	Forget the current connection.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L771'>_cancelConnectWaiters</a>()</tt>	Notify all pending requests for a connection that no more connections are expected.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L779'>_ignoreAndCancelConnectWaiters</a>(f)</tt>	Notify all pending requests for a connection that no more connections are expected after ignoring the failure passed in.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L788'>_finishStopping</a>()</tt>	Notify all deferreds waiting on the service stopping.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L795'>_ignoreAndFinishStopping</a>(f)</tt>	Notify all deferreds waiting on the service stopping and ignore the failure passed in.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L809'>whenConnected</a>(failAfterFailures)</tt>	Retrieve the currently-connected l{protocol}, or the next one to connect.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L838'>_currentConnection</a>(failAfterFailures)</tt>	Return the currently connected protocol.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L848'>_noConnection</a>(failAfterFailures)</tt>	Notify the caller that no connection is expected.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L858'>_awaitingConnection</a>(failAfterFailures)</tt>	Return a deferred that will fire with the next connected protocol.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L870'>_deferredSucceededWithNone</a>()</tt>	Return a deferred that has already fired with l{none}.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L880'>_unawait</a>(value)</tt>	Fire all outstanding l{clientservice whenconnected} l{deferred}s.
<tt style='background-color:#E8E8E8;'> application._ClientMachine <a href=' /application/internet.py#L890'>_deliverConnectionFailure</a>(f)</tt>	Deliver connection failures to any l{clientservice whenconnected}.
<tt style='background-color:#E8E8E8;'> application.ClientService <a href=' /application/internet.py#L1012'>__init__</a>(endpoint,factory,retryPolicy,clock)</tt>	@param endpoint a l{stream client endpoint <interfaces.
<tt style='background-color:#E8E8E8;'> application.ClientService <a href=' /application/internet.py#L1042'>whenConnected</a>(failAfterFailures)</tt>	Retrieve the currently-connected l{protocol}, or the next one to connect.
<tt style='background-color:#E8E8E8;'> application.ClientService <a href=' /application/internet.py#L1072'>startService</a>()</tt>	Start this l{clientservice}, initiating the connection retry loop.
<tt style='background-color:#E8E8E8;'> application.ClientService <a href=' /application/internet.py#L1083'>stopService</a>()</tt>	Stop attempting to reconnect and close any existing connections.
<tt style='background-color:#E8E8E8;'> application._BasicProfiler <a href=' /application/app.py#L45'>_reportImportError</a>(module,e)</tt>	Helper method to report an import error with a profile module this.
<tt style='background-color:#E8E8E8;'> application.ProfileRunner <a href=' /application/app.py#L67'>run</a>(reactor)</tt>	Run reactor under the standard profiler.
<tt style='background-color:#E8E8E8;'> application.CProfileRunner <a href=' /application/app.py#L95'>run</a>(reactor)</tt>	Run reactor under the cprofile profiler.
<tt style='background-color:#E8E8E8;'> application.AppLogger <a href=' /application/app.py#L160'>__init__</a>(options)</tt>	Initialize an l{applogger} with a l{serveroptions}.
<tt style='background-color:#E8E8E8;'> application.AppLogger <a href=' /application/app.py#L168'>start</a>(application)</tt>	Initialize the global logging system for the given application.
<tt style='background-color:#E8E8E8;'> application.AppLogger <a href=' /application/app.py#L216'>_initialLog</a>()</tt>	Print twistd start log message.
<tt style='background-color:#E8E8E8;'> application.AppLogger <a href=' /application/app.py#L229'>_getLogObserver</a>()</tt>	Create a log observer to be added to the logging system before running this application.
<tt style='background-color:#E8E8E8;'> application.AppLogger <a href=' /application/app.py#L241'>stop</a>()</tt>	Remove all log observers previously set up by l{applogger start}.
<tt style='background-color:#E8E8E8;'> application. <a href=' /application/app.py#L275'>runReactorWithLogging</a>(config,oldstdout,oldstderr,profiler)</tt>	Start the reactor using profiling if specified by the configuration and log any error happening in the process.
<tt style='background-color:#E8E8E8;'> application.ApplicationRunner <a href=' /application/app.py#L375'>run</a>()</tt>	Run the application.
<tt style='background-color:#E8E8E8;'> application.ApplicationRunner <a href=' /application/app.py#L388'>startReactor</a>(reactor,oldstdout,oldstderr)</tt>	Run the reactor with the given configuration subclasses should.
<tt style='background-color:#E8E8E8;'> application.ApplicationRunner <a href=' /application/app.py#L399'>preApplication</a>()</tt>	Override in subclass.
<tt style='background-color:#E8E8E8;'> application.ApplicationRunner <a href=' /application/app.py#L409'>postApplication</a>()</tt>	Override in subclass.
<tt style='background-color:#E8E8E8;'> application.ApplicationRunner <a href=' /application/app.py#L420'>createOrGetApplication</a>()</tt>	Create or load an application based on the parameters found in the given l{serveroptions} instance.
<tt style='background-color:#E8E8E8;'> application.ReactorSelectionMixin <a href=' /application/app.py#L498'>opt_help_reactors</a>()</tt>	Display a list of possibly available reactor names.
<tt style='background-color:#E8E8E8;'> application.ReactorSelectionMixin <a href=' /application/app.py#L521'>opt_reactor</a>(shortName)</tt>	Which reactor to use see --help-reactors for a list of possibilities.
<tt style='background-color:#E8E8E8;'> application.ServerOptions <a href=' /application/app.py#L597'>opt_debug</a>()</tt>	Run the application in the python debugger implies nodaemon.
<tt style='background-color:#E8E8E8;'> application.ServerOptions <a href=' /application/app.py#L608'>opt_spew</a>()</tt>	Print an insanely verbose log of everything that happens.
<tt style='background-color:#E8E8E8;'> application.IServiceMaker <a href=' /application/service.py#L51'>makeService</a>(options)</tt>	Create and return an object providing l{twisted.
<tt style='background-color:#E8E8E8;'> application.IService <a href=' /application/service.py#L102'>setName</a>(name)</tt>	Set the name of the service.
<tt style='background-color:#E8E8E8;'> application.IService <a href=' /application/service.py#L110'>setServiceParent</a>(parent)</tt>	Set the parent of the service this method is responsible for setting.
<tt style='background-color:#E8E8E8;'> application.IService <a href=' /application/service.py#L121'>disownServiceParent</a>()</tt>	Use this api to remove an l{iservice} from an l{iservicecollection}.
<tt style='background-color:#E8E8E8;'> application.IService <a href=' /application/service.py#L134'>startService</a>()</tt>	Start the service.
<tt style='background-color:#E8E8E8;'> application.IService <a href=' /application/service.py#L139'>stopService</a>()</tt>	Stop the service.
<tt style='background-color:#E8E8E8;'> application.IService <a href=' /application/service.py#L149'>privilegedStartService</a>()</tt>	Do preparation work for starting the service.
<tt style='background-color:#E8E8E8;'> application.IServiceCollection <a href=' /application/service.py#L216'>getServiceNamed</a>(name)</tt>	Get the child service with a given name.
<tt style='background-color:#E8E8E8;'> application.IServiceCollection <a href=' /application/service.py#L226'>__iter__</a>()</tt>	Get an iterator over all child services.
<tt style='background-color:#E8E8E8;'> application.IServiceCollection <a href=' /application/service.py#L231'>addService</a>(service)</tt>	Add a child service.
<tt style='background-color:#E8E8E8;'> application.IServiceCollection <a href=' /application/service.py#L243'>removeService</a>(service)</tt>	Remove a child service.
<tt style='background-color:#E8E8E8;'> application.Process <a href=' /application/service.py#L363'>__init__</a>(uid,gid)</tt>	Set uid and gid.
<tt style='background-color:#E8E8E8;'> application. <a href=' /application/service.py#L378'>Application</a>(name,uid,gid)</tt>	Return a compound class.
<tt style='background-color:#E8E8E8;'> application. <a href=' /application/service.py#L398'>loadApplication</a>(filename,kind,passphrase)</tt>	Load application from a given file.
<tt style='background-color:#E8E8E8;'> application.IReactorInstaller <a href=' /application/reactors.py#L30'>install</a>()</tt>	Install this reactor.
<tt style='background-color:#E8E8E8;'> application. <a href=' /application/reactors.py#L64'>getReactorTypes</a>()</tt>	Return an iterator of l{ireactorinstaller} plugins.
<tt style='background-color:#E8E8E8;'> application. <a href=' /application/reactors.py#L72'>installReactor</a>(shortName)</tt>	Install the reactor with the given c{shortname} attribute.
<tt style='background-color:#E8E8E8;'> application.twist.Twist <a href=' /application/twist/_twist.py#L24'>options</a>(argv)</tt>	Parse command line options.
<tt style='background-color:#E8E8E8;'> application.twist.Twist <a href=' /application/twist/_twist.py#L45'>service</a>(plugin,options)</tt>	Create the application service.
<tt style='background-color:#E8E8E8;'> application.twist.Twist <a href=' /application/twist/_twist.py#L67'>startService</a>(reactor,service)</tt>	Start the application service.
<tt style='background-color:#E8E8E8;'> application.twist.Twist <a href=' /application/twist/_twist.py#L86'>runnerArguments</a>(twistOptions)</tt>	Take options obtained from command line and configure arguments to pass to the application runner.
<tt style='background-color:#E8E8E8;'> application.twist.Twist <a href=' /application/twist/_twist.py#L107'>run</a>(runnerArguments)</tt>	Run the application service.
<tt style='background-color:#E8E8E8;'> application.twist.Twist <a href=' /application/twist/_twist.py#L119'>main</a>(cls,argv)</tt>	Executable entry point for l{twist}.
<tt style='background-color:#E8E8E8;'> application.twist.TwistOptions <a href=' /application/twist/_options.py#L51'>opt_version</a>()</tt>	Print version and exit.
<tt style='background-color:#E8E8E8;'> application.twist.TwistOptions <a href=' /application/twist/_options.py#L58'>opt_reactor</a>(name)</tt>	The name of the reactor to use.
<tt style='background-color:#E8E8E8;'> application.twist.TwistOptions <a href=' /application/twist/_options.py#L80'>installReactor</a>(name)</tt>	Install the reactor.
<tt style='background-color:#E8E8E8;'> application.twist.TwistOptions <a href=' /application/twist/_options.py#L91'>opt_log_level</a>(levelName)</tt>	Set default log level.
<tt style='background-color:#E8E8E8;'> application.twist.TwistOptions <a href=' /application/twist/_options.py#L109'>opt_log_file</a>(fileName)</tt>	Log to file ("-" for stdout "+" for stderr default "-").
<tt style='background-color:#E8E8E8;'> application.twist.TwistOptions <a href=' /application/twist/_options.py#L130'>opt_log_format</a>(format)</tt>	Log file format.
<tt style='background-color:#E8E8E8;'> application.twist.TwistOptions <a href=' /application/twist/_options.py#L149'>selectDefaultLogObserver</a>()</tt>	Set c{filelogobserverfactory} to the default appropriate for the chosen c{logfile}.
<tt style='background-color:#E8E8E8;'> application.runner.IPIDFile <a href=' /application/runner/_pidfile.py#L23'>read</a>()</tt>	Read the process id stored in this pid file.
<tt style='background-color:#E8E8E8;'> application.runner.IPIDFile <a href=' /application/runner/_pidfile.py#L36'>writeRunningPID</a>()</tt>	Store the pid of the current process in this pid file.
<tt style='background-color:#E8E8E8;'> application.runner.IPIDFile <a href=' /application/runner/_pidfile.py#L44'>remove</a>()</tt>	Remove this pid file.
<tt style='background-color:#E8E8E8;'> application.runner.IPIDFile <a href=' /application/runner/_pidfile.py#L52'>isRunning</a>()</tt>	Determine whether there is a running process corresponding to the pid in this pid file.
<tt style='background-color:#E8E8E8;'> application.runner.IPIDFile <a href=' /application/runner/_pidfile.py#L68'>__enter__</a>()</tt>	Enter a context using this pidfile.
<tt style='background-color:#E8E8E8;'> application.runner.IPIDFile <a href=' /application/runner/_pidfile.py#L79'>__exit__</a>(excType,excValue,traceback)</tt>	Exit a context using this pidfile.
<tt style='background-color:#E8E8E8;'> application.runner.PIDFile <a href=' /application/runner/_pidfile.py#L101'>_format</a>(pid)</tt>	Format a pid file's content.
<tt style='background-color:#E8E8E8;'> application.runner.PIDFile <a href=' /application/runner/_pidfile.py#L115'>__init__</a>(filePath)</tt>	@param filepath the path to the pid file on disk.
<tt style='background-color:#E8E8E8;'> application.runner.PIDFile <a href=' /application/runner/_pidfile.py#L142'>_write</a>(pid)</tt>	Store a pid in this pid file.
<tt style='background-color:#E8E8E8;'> application.runner.PIDFile <a href=' /application/runner/_pidfile.py#L176'>_pidIsRunningPOSIX</a>(pid)</tt>	Posix implementation for running process check.
<tt style='background-color:#E8E8E8;'> application.runner.NonePIDFile <a href=' /application/runner/_pidfile.py#L239'>_write</a>(pid)</tt>	Store a pid in this pid file.
<tt style='background-color:#E8E8E8;'> application.runner. <a href=' /application/runner/_exit.py#L15'>exit</a>(status,message)</tt>	Exit the python interpreter with the given status and an optional message.
<tt style='background-color:#E8E8E8;'> application.runner.Runner <a href=' /application/runner/_runner.py#L32'>__init__</a>(reactor,pidFile,kill,defaultLogLevel)</tt>	@param reactor the reactor to start and run the application in.
<tt style='background-color:#E8E8E8;'> application.runner.Runner <a href=' /application/runner/_runner.py#L94'>run</a>()</tt>	Run this command.
<tt style='background-color:#E8E8E8;'> application.runner.Runner <a href=' /application/runner/_runner.py#L113'>killIfRequested</a>()</tt>	If c{self kill} is true attempt to kill a running instance of the.
<tt style='background-color:#E8E8E8;'> application.runner.Runner <a href=' /application/runner/_runner.py#L143'>startLogging</a>()</tt>	Start the l{twisted logger} logging system.
<tt style='background-color:#E8E8E8;'> application.runner.Runner <a href=' /application/runner/_runner.py#L164'>startReactor</a>()</tt>	If c{self reactor} is l{none}, install the default reactor and set.
<tt style='background-color:#E8E8E8;'> application.runner.Runner <a href=' /application/runner/_runner.py#L185'>whenRunning</a>()</tt>	Call c{self whenrunning}.
<tt style='background-color:#E8E8E8;'> application.runner.Runner <a href=' /application/runner/_runner.py#L194'>reactorExited</a>()</tt>	Call c{self reactorexited}.
<tt style='background-color:#E8E8E8;'> tap.Options <a href=' /tap/ftp.py#L41'>opt_password_file</a>(filename)</tt>	Specify a file containing username password login info for authenticated connections.
<tt style='background-color:#E8E8E8;'> positioning._BaseSentence <a href=' /positioning/_sentence.py#L41'>__init__</a>(sentenceData)</tt>	Initializes a sentence with parsed sentence data.
<tt style='background-color:#E8E8E8;'> positioning._BaseSentence <a href=' /positioning/_sentence.py#L51'>presentAttributes</a>()</tt>	An iterable containing the names of the attributes that are present in this sentence.
<tt style='background-color:#E8E8E8;'> positioning._BaseSentence <a href=' /positioning/_sentence.py#L63'>__getattr__</a>(name)</tt>	Gets an attribute of this sentence.
<tt style='background-color:#E8E8E8;'> positioning._BaseSentence <a href=' /positioning/_sentence.py#L75'>__repr__</a>()</tt>	Returns a textual representation of this sentence.
<tt style='background-color:#E8E8E8;'> positioning._PositioningSentenceProducerMixin <a href=' /positioning/_sentence.py#L103'>getSentenceAttributes</a>(cls)</tt>	Returns a set of all attributes that might be found in the sentences produced by this protocol.
<tt style='background-color:#E8E8E8;'> positioning.BasePositioningReceiver <a href=' /positioning/base.py#L74'>timeReceived</a>(time)</tt>	Implements l{ipositioningreceiver timereceived} stub.
<tt style='background-color:#E8E8E8;'> positioning.BasePositioningReceiver <a href=' /positioning/base.py#L80'>headingReceived</a>(heading)</tt>	Implements l{ipositioningreceiver headingreceived} stub.
<tt style='background-color:#E8E8E8;'> positioning.BasePositioningReceiver <a href=' /positioning/base.py#L86'>speedReceived</a>(speed)</tt>	Implements l{ipositioningreceiver speedreceived} stub.
<tt style='background-color:#E8E8E8;'> positioning.BasePositioningReceiver <a href=' /positioning/base.py#L92'>climbReceived</a>(climb)</tt>	Implements l{ipositioningreceiver climbreceived} stub.
<tt style='background-color:#E8E8E8;'> positioning.BasePositioningReceiver <a href=' /positioning/base.py#L98'>positionReceived</a>(latitude,longitude)</tt>	Implements l{ipositioningreceiver positionreceived} stub.
<tt style='background-color:#E8E8E8;'> positioning.BasePositioningReceiver <a href=' /positioning/base.py#L104'>positionErrorReceived</a>(positionError)</tt>	Implements l{ipositioningreceiver positionerrorreceived} stub.
<tt style='background-color:#E8E8E8;'> positioning.BasePositioningReceiver <a href=' /positioning/base.py#L110'>altitudeReceived</a>(altitude)</tt>	Implements l{ipositioningreceiver altitudereceived} stub.
<tt style='background-color:#E8E8E8;'> positioning.BasePositioningReceiver <a href=' /positioning/base.py#L116'>beaconInformationReceived</a>(beaconInformation)</tt>	Implements l{ipositioningreceiver beaconinformationreceived} stub.
<tt style='background-color:#E8E8E8;'> positioning.Angle <a href=' /positioning/base.py#L166'>__init__</a>(angle,angleType)</tt>	Initializes an angle.
<tt style='background-color:#E8E8E8;'> positioning.Angle <a href=' /positioning/base.py#L195'>inDecimalDegrees</a>()</tt>	The value of this angle in decimal degrees this value is immutable.
<tt style='background-color:#E8E8E8;'> positioning.Angle <a href=' /positioning/base.py#L207'>inDegreesMinutesSeconds</a>()</tt>	The value of this angle as a degrees minutes seconds tuple this.
<tt style='background-color:#E8E8E8;'> positioning.Angle <a href=' /positioning/base.py#L231'>setSign</a>(sign)</tt>	Sets the sign of this angle.
<tt style='background-color:#E8E8E8;'> positioning.Angle <a href=' /positioning/base.py#L247'>__float__</a>()</tt>	Returns this angle as a float.
<tt style='background-color:#E8E8E8;'> positioning.Angle <a href=' /positioning/base.py#L257'>__repr__</a>()</tt>	Returns a string representation of this angle.
<tt style='background-color:#E8E8E8;'> positioning.Angle <a href=' /positioning/base.py#L267'>_angleValueRepr</a>()</tt>	Returns a string representation of the angular value of this angle.
<tt style='background-color:#E8E8E8;'> positioning.Angle <a href=' /positioning/base.py#L283'>_angleTypeNameRepr</a>()</tt>	Returns a string representation of the type of this angle.
<tt style='background-color:#E8E8E8;'> positioning.Heading <a href=' /positioning/base.py#L315'>__init__</a>(angle,variation)</tt>	Initializes an angle with an optional variation.
<tt style='background-color:#E8E8E8;'> positioning.Heading <a href=' /positioning/base.py#L323'>fromFloats</a>(cls,angleValue,variationValue)</tt>	Constructs a heading from the float values of the angle and variation.
<tt style='background-color:#E8E8E8;'> positioning.Heading <a href=' /positioning/base.py#L338'>correctedHeading</a>()</tt>	Corrects the heading by the given variation this is sometimes known as.
<tt style='background-color:#E8E8E8;'> positioning.Heading <a href=' /positioning/base.py#L355'>setSign</a>(sign)</tt>	Sets the sign of the variation of this heading.
<tt style='background-color:#E8E8E8;'> positioning.Heading <a href=' /positioning/base.py#L374'>__repr__</a>()</tt>	Returns a string representation of this angle.
<tt style='background-color:#E8E8E8;'> positioning.Coordinate <a href=' /positioning/base.py#L400'>__init__</a>(angle,coordinateType)</tt>	Initializes a coordinate.
<tt style='background-color:#E8E8E8;'> positioning.Coordinate <a href=' /positioning/base.py#L421'>hemisphere</a>()</tt>	Gets the hemisphere of this coordinate.
<tt style='background-color:#E8E8E8;'> positioning.Altitude <a href=' /positioning/base.py#L458'>__init__</a>(altitude)</tt>	Initializes an altitude.
<tt style='background-color:#E8E8E8;'> positioning.Altitude <a href=' /positioning/base.py#L468'>inFeet</a>()</tt>	Gets the altitude this object represents in feet.
<tt style='background-color:#E8E8E8;'> positioning.Altitude <a href=' /positioning/base.py#L479'>inMeters</a>()</tt>	Returns the altitude this object represents in meters.
<tt style='background-color:#E8E8E8;'> positioning.Altitude <a href=' /positioning/base.py#L490'>__float__</a>()</tt>	Returns the altitude represented by this object expressed in meters.
<tt style='background-color:#E8E8E8;'> positioning.Altitude <a href=' /positioning/base.py#L500'>__repr__</a>()</tt>	Returns a string representation of this altitude.
<tt style='background-color:#E8E8E8;'> positioning._BaseSpeed <a href=' /positioning/base.py#L520'>__init__</a>(speed)</tt>	Initializes a speed.
<tt style='background-color:#E8E8E8;'> positioning._BaseSpeed <a href=' /positioning/base.py#L534'>inMetersPerSecond</a>()</tt>	The speed that this object represents expressed in meters per second.
<tt style='background-color:#E8E8E8;'> positioning._BaseSpeed <a href=' /positioning/base.py#L546'>inKnots</a>()</tt>	Returns the speed represented by this object expressed in knots this.
<tt style='background-color:#E8E8E8;'> positioning._BaseSpeed <a href=' /positioning/base.py#L558'>__float__</a>()</tt>	Returns the speed represented by this object expressed in meters per second.
<tt style='background-color:#E8E8E8;'> positioning._BaseSpeed <a href=' /positioning/base.py#L570'>__repr__</a>()</tt>	Returns a string representation of this speed object.
<tt style='background-color:#E8E8E8;'> positioning.Speed <a href=' /positioning/base.py#L586'>__init__</a>(speed)</tt>	Initializes a l{speed} object.
<tt style='background-color:#E8E8E8;'> positioning.Climb <a href=' /positioning/base.py#L607'>__init__</a>(climb)</tt>	Initializes a l{climb} object.
<tt style='background-color:#E8E8E8;'> positioning.PositionError <a href=' /positioning/base.py#L642'>__init__</a>(pdop,hdop,vdop,testInvariant)</tt>	Initializes a positioning error object.
<tt style='background-color:#E8E8E8;'> positioning.PositionError <a href=' /positioning/base.py#L669'>_testDilutionOfPositionInvariant</a>()</tt>	Tests if this positioning error object satisfies the dilution of position invariant (pdop = (hdop**2 + vdop**2)*.
<tt style='background-color:#E8E8E8;'> positioning.PositionError <a href=' /positioning/base.py#L711'>_getDOP</a>(dopType)</tt>	Gets a particular dilution of position value.
<tt style='background-color:#E8E8E8;'> positioning.PositionError <a href=' /positioning/base.py#L728'>_setDOP</a>(dopType,value)</tt>	Sets a particular dilution of position value.
<tt style='background-color:#E8E8E8;'> positioning.PositionError <a href=' /positioning/base.py#L770'>__repr__</a>()</tt>	Returns a string representation of positioning information object.
<tt style='background-color:#E8E8E8;'> positioning.BeaconInformation <a href=' /positioning/base.py#L795'>__init__</a>(seenBeacons)</tt>	Initializes a beacon information object.
<tt style='background-color:#E8E8E8;'> positioning.BeaconInformation <a href=' /positioning/base.py#L806'>__repr__</a>()</tt>	Returns a string representation of this beacon information object.
<tt style='background-color:#E8E8E8;'> positioning.PositioningBeacon <a href=' /positioning/base.py#L842'>__init__</a>(identifier)</tt>	Initializes a positioning beacon.
<tt style='background-color:#E8E8E8;'> positioning.PositioningBeacon <a href=' /positioning/base.py#L852'>__hash__</a>()</tt>	Returns the hash of the identifier for this beacon.
<tt style='background-color:#E8E8E8;'> positioning.PositioningBeacon <a href=' /positioning/base.py#L862'>__repr__</a>()</tt>	Returns a string representation of this beacon.
<tt style='background-color:#E8E8E8;'> positioning.Satellite <a href=' /positioning/base.py#L885'>__init__</a>(identifier,azimuth,elevation,signalToNoiseRatio)</tt>	Initializes a satellite object.
<tt style='background-color:#E8E8E8;'> positioning.Satellite <a href=' /positioning/base.py#L912'>__repr__</a>()</tt>	Returns a string representation of this satellite.
<tt style='background-color:#E8E8E8;'> positioning. <a href=' /positioning/nmea.py#L107'>_split</a>(sentence)</tt>	Returns the split version of an nmea sentence minus header and checksum.
<tt style='background-color:#E8E8E8;'> positioning. <a href=' /positioning/nmea.py#L127'>_validateChecksum</a>(sentence)</tt>	Validates the checksum of an nmea sentence.
<tt style='background-color:#E8E8E8;'> positioning.NMEAProtocol <a href=' /positioning/nmea.py#L167'>__init__</a>(receiver,sentenceCallback)</tt>	Initializes an nmeaprotocol.
<tt style='background-color:#E8E8E8;'> positioning.NMEAProtocol <a href=' /positioning/nmea.py#L182'>lineReceived</a>(rawSentence)</tt>	Parses the data from the sentence and validates the checksum.
<tt style='background-color:#E8E8E8;'> positioning.NMEASentence <a href=' /positioning/nmea.py#L402'>_isFirstGSVSentence</a>()</tt>	Tests if this current gsv sentence is the first one in a sequence.
<tt style='background-color:#E8E8E8;'> positioning.NMEASentence <a href=' /positioning/nmea.py#L412'>_isLastGSVSentence</a>()</tt>	Tests if this current gsv sentence is the final one in a sequence.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L461'>__init__</a>(receiver)</tt>	Initializes a new nmea adapter.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L473'>_fixTimestamp</a>()</tt>	Turns the nmeaprotocol timestamp notation into a datetime time object.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L486'>_fixDatestamp</a>()</tt>	Turns an nmea datestamp format into a c{datetime date} object.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L503'>_fixCoordinateFloat</a>(coordinateType)</tt>	Turns the nmeaprotocol coordinate format into python float.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L524'>_fixHemisphereSign</a>(coordinateType,sentenceDataKey)</tt>	Fixes the sign for a hemisphere.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L548'>_getHemisphereSign</a>(coordinateType)</tt>	Returns the hemisphere sign for a given coordinate type.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L577'>_convert</a>(key,converter)</tt>	A simple conversion fix.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L608'>_statefulUpdate</a>(sentenceKey)</tt>	Does a stateful update of a particular positioning attribute.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L646'>_fixUnits</a>(unitKey,valueKey,sourceKey,unit)</tt>	Fixes the units of a certain value if the units are already.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L689'>_fixGSV</a>()</tt>	Parses partial visible satellite information from a gsv sentence.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L715'>_fixGSA</a>()</tt>	Extracts the information regarding which satellites were used in obtaining the gps fix from a gsa sentence.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L737'>_sentenceSpecificFix</a>()</tt>	Executes a fix for a specific type of sentence.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L800'>clear</a>()</tt>	Resets this adapter.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L810'>sentenceReceived</a>(sentence)</tt>	Called when a sentence is received.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L835'>_validateCurrentSentence</a>()</tt>	Tests if a sentence contains a valid fix.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L845'>_cleanCurrentSentence</a>()</tt>	Cleans the current sentence.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L856'>_updateState</a>()</tt>	Updates the current state with the new information from the sentence.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L865'>_updateBeaconInformation</a>()</tt>	Updates existing beacon information state with new data.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L884'>_updateUsedBeacons</a>(beaconInformation)</tt>	Searches the adapter state and sentence data for information about which beacons where used then adds it to the provided beacon.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L908'>_mergeBeaconInformation</a>(newBeaconInformation)</tt>	Merges beacon information in the adapter state if it exists into the provided beacon information.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L928'>_combineDateAndTime</a>()</tt>	Combines a c{datetime date} object and a c{datetime time} object.
<tt style='background-color:#E8E8E8;'> positioning.NMEAAdapter <a href=' /positioning/nmea.py#L950'>_fireSentenceCallbacks</a>()</tt>	Fires sentence callbacks for the current sentence.
<tt style='background-color:#E8E8E8;'> positioning.IPositioningReceiver <a href=' /positioning/ipositioning.py#L18'>positionReceived</a>(latitude,longitude)</tt>	Method called when a position is received.
<tt style='background-color:#E8E8E8;'> positioning.IPositioningReceiver <a href=' /positioning/ipositioning.py#L29'>positionErrorReceived</a>(positionError)</tt>	Method called when position error is received.
<tt style='background-color:#E8E8E8;'> positioning.IPositioningReceiver <a href=' /positioning/ipositioning.py#L37'>timeReceived</a>(time)</tt>	Method called when time and date information arrives.
<tt style='background-color:#E8E8E8;'> positioning.IPositioningReceiver <a href=' /positioning/ipositioning.py#L47'>headingReceived</a>(heading)</tt>	Method called when a true heading is received.
<tt style='background-color:#E8E8E8;'> positioning.IPositioningReceiver <a href=' /positioning/ipositioning.py#L56'>altitudeReceived</a>(altitude)</tt>	Method called when an altitude is received.
<tt style='background-color:#E8E8E8;'> positioning.IPositioningReceiver <a href=' /positioning/ipositioning.py#L65'>speedReceived</a>(speed)</tt>	Method called when the speed is received.
<tt style='background-color:#E8E8E8;'> positioning.IPositioningReceiver <a href=' /positioning/ipositioning.py#L74'>climbReceived</a>(climb)</tt>	Method called when the climb is received.
<tt style='background-color:#E8E8E8;'> positioning.IPositioningReceiver <a href=' /positioning/ipositioning.py#L82'>beaconInformationReceived</a>(beaconInformation)</tt>	Method called when positioning beacon information is received.
<tt style='background-color:#E8E8E8;'> positioning.INMEAReceiver <a href=' /positioning/ipositioning.py#L108'>sentenceReceived</a>(sentence)</tt>	Method called when a sentence is received.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/bounce.py#L38'>generateBounce</a>(message,failedFrom,failedTo,transcript)</tt>	Generate a bounce message for an undeliverable email message.
<tt style='background-color:#E8E8E8;'> mail.DomainQueuer <a href=' /mail/relay.py#L32'>exists</a>(user)</tt>	Check whether mail can be relayed to a user.
<tt style='background-color:#E8E8E8;'> mail.DomainQueuer <a href=' /mail/relay.py#L55'>willRelay</a>(address,protocol)</tt>	Check whether we agree to relay.
<tt style='background-color:#E8E8E8;'> mail.DomainQueuer <a href=' /mail/relay.py#L67'>startMessage</a>(user)</tt>	Create an envelope and a message receiver for the relay queue.
<tt style='background-color:#E8E8E8;'> mail.RelayerMixin <a href=' /mail/relay.py#L123'>sentMail</a>(code,resp,numOk,addresses)</tt>	Since we only use one recipient per envelope this will be called with 0 or 1 addresses.
<tt style='background-color:#E8E8E8;'> mail.SMTPRelayer <a href=' /mail/relay.py#L141'>__init__</a>(messagePaths)</tt>	@type messagepaths l{list} of l{bytes} @param messagepaths the base filename for each message to be relayed.
<tt style='background-color:#E8E8E8;'> mail.ESMTPRelayer <a href=' /mail/relay.py#L162'>__init__</a>(messagePaths)</tt>	@type messagepaths l{list} of l{bytes} @param messagepaths the base filename for each message to be relayed.
<tt style='background-color:#E8E8E8;'> mail.SMTPClientError <a href=' /mail/_except.py#L113'>__init__</a>(code,resp,log,addresses)</tt>	@param code the smtp response code associated with this error.
<tt style='background-color:#E8E8E8;'> mail.ServerErrorResponse <a href=' /mail/_except.py#L371'>__init__</a>(reason,consumer)</tt>	@type reason l{bytes} @param reason the server response minus the status indicator.
<tt style='background-color:#E8E8E8;'> mail._ListSetter <a href=' /mail/pop3client.py#L46'>__init__</a>(L)</tt>	@type l l{list} of l{object} @param l the list being constructed.
<tt style='background-color:#E8E8E8;'> mail._ListSetter <a href=' /mail/pop3client.py#L55'>setitem</a>(itemAndValue)</tt>	Add the value at the specified position padding out missing entries.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/pop3client.py#L72'>_statXform</a>(line)</tt>	Parse the response to a stat command.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/pop3client.py#L88'>_listXform</a>(line)</tt>	Parse a line of the response to a list command.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/pop3client.py#L107'>_uidXform</a>(line)</tt>	Parse a line of the response to a uidl command.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/pop3client.py#L127'>_codeStatusSplit</a>(line)</tt>	Parse the first line of a multi-line server response.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/pop3client.py#L144'>_dotUnquoter</a>(line)</tt>	Remove a byte-stuffed termination character at the beginning of a line if present.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L259'>_blocked</a>(f)</tt>	Block a command if necessary.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L288'>_unblock</a>()</tt>	Send the next blocked command.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1467'>sendShort</a>(cmd,args)</tt>	Send a pop3 command to which a short response is expected.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1485'>sendLong</a>(cmd,args,consumer,xform)</tt>	Send a pop3 command to which a multi-line response is expected.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L394'>connectionMade</a>()</tt>	Wait for a greeting from the server after the connection has been made.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L407'>timeoutConnection</a>()</tt>	Drop the connection when the server does not respond in time.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L415'>connectionLost</a>(reason)</tt>	Clean up when the connection has been lost.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1555'>lineReceived</a>(line)</tt>	Dispatch a received line for processing.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L464'>lineLengthExceeded</a>(buffer)</tt>	Drop the connection when a server response exceeds the maximum line length (l{lineonlyreceiver.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L480'>state_WELCOME</a>(line)</tt>	Handle server responses for the welcome state in which the server greeting is expected.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L511'>state_WAITING</a>(line)</tt>	Log an error for server responses received in the waiting state during which the server is not expected to send anything.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L522'>state_SHORT</a>(line)</tt>	Handle server responses for the short state in which the server is expected to send a single line response.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L546'>state_LONG_INITIAL</a>(line)</tt>	Handle server responses for the long_initial state in which the server is expected to send the first line of a multi-line response.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L572'>state_LONG</a>(line)</tt>	Handle server responses for the long state in which the server is expected to send a non-initial line of a multi-line response.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L605'>serverGreeting</a>(greeting)</tt>	Handle the server greeting.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L617'>startTLS</a>(contextFactory)</tt>	Switch to encrypted communication using tls.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L657'>_startTLS</a>(caps,contextFactory,tls)</tt>	Continue the process of switching to encrypted communication.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L700'>_startedTLS</a>(result,context,tls)</tt>	Complete the process of switching to encrypted communication.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L732'>_getContextFactory</a>()</tt>	Get a context factory with which to negotiate tls.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L751'>login</a>(username,password)</tt>	Log in to the server.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L782'>_login</a>(caps,username,password)</tt>	Continue the process of logging in to the server.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L836'>_loginTLS</a>(res,username,password)</tt>	Do a plaintext login over an encrypted transport.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L863'>_plaintext</a>(username,password)</tt>	Perform a plaintext login.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L883'>_apop</a>(username,password,challenge)</tt>	Perform an apop login.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1602'>apop</a>(username,digest)</tt>	Send an apop command to perform authenticated login.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1659'>user</a>(username)</tt>	Send a user command to perform the first half of plaintext login.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L950'>password</a>(password)</tt>	Send a pass command to perform the second half of plaintext login.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L969'>delete</a>(index)</tt>	Send a dele command to delete a message from the server.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L986'>_consumeOrSetItem</a>(cmd,args,consumer,xform)</tt>	Send a command to which a long response is expected and process the multi-line response into a list accounting for deleted messages.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L1025'>_consumeOrAppend</a>(cmd,args,consumer,xform)</tt>	Send a command to which a long response is expected and process the multi-line response into a list.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L1062'>capabilities</a>(useCache)</tt>	Send a capa command to retrieve the capabilities supported by the server.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L1134'>noop</a>()</tt>	Send a noop command asking the server to do nothing but respond.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L1148'>reset</a>()</tt>	Send a rset command to unmark any messages that have been flagged for deletion on the server.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L1163'>retrieve</a>(index,consumer,lines)</tt>	Send a retr or top command to retrieve all or part of a message from the server.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L1195'>stat</a>()</tt>	Send a stat command to get information about the size of the mailbox.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L1211'>listSize</a>(consumer)</tt>	Send a list command to retrieve the sizes of all messages on the server.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3client.py#L1230'>listUID</a>(consumer)</tt>	Send a uidl command to retrieve the uids of all messages on the server.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1679'>quit</a>()</tt>	Send a quit command to disconnect from the server.
<tt style='background-color:#E8E8E8;'> mail.DomainDeliveryBase <a href=' /mail/protocols.py#L44'>__init__</a>(service,user,host)</tt>	@type service l{mailservice} @param service a mail service.
<tt style='background-color:#E8E8E8;'> mail.DomainDeliveryBase <a href=' /mail/protocols.py#L60'>receivedHeader</a>(helo,origin,recipients)</tt>	Generate a received header string for a message.
<tt style='background-color:#E8E8E8;'> mail.DomainDeliveryBase <a href=' /mail/protocols.py#L92'>validateTo</a>(user)</tt>	Validate the address for which a message is destined.
<tt style='background-color:#E8E8E8;'> mail.DomainDeliveryBase <a href=' /mail/protocols.py#L118'>validateFrom</a>(helo,origin)</tt>	Validate the address from which a message originates.
<tt style='background-color:#E8E8E8;'> mail.SMTPFactory <a href=' /mail/smtp.py#L890'>__init__</a>(service,portal)</tt>	@type service l{mailservice} @param service an email service.
<tt style='background-color:#E8E8E8;'> mail.SMTPFactory <a href=' /mail/smtp.py#L894'>buildProtocol</a>(addr)</tt>	Create an instance of an smtp server protocol.
<tt style='background-color:#E8E8E8;'> mail.ESMTPFactory <a href=' /mail/protocols.py#L231'>__init__</a>()</tt>	@param args arguments for l{smtpfactory __init__}.
<tt style='background-color:#E8E8E8;'> mail.ESMTPFactory <a href=' /mail/protocols.py#L243'>buildProtocol</a>(addr)</tt>	Create an instance of an esmtp server protocol.
<tt style='background-color:#E8E8E8;'> mail.VirtualPOP3 <a href=' /mail/protocols.py#L278'>authenticateUserAPOP</a>(user,digest)</tt>	Perform apop authentication.
<tt style='background-color:#E8E8E8;'> mail.VirtualPOP3 <a href=' /mail/protocols.py#L312'>authenticateUserPASS</a>(user,password)</tt>	Perform authentication for a username/password login.
<tt style='background-color:#E8E8E8;'> mail.VirtualPOP3 <a href=' /mail/protocols.py#L346'>lookupDomain</a>(user)</tt>	Check whether a domain is among the virtual domains supported by the mail service.
<tt style='background-color:#E8E8E8;'> mail.POP3Factory <a href=' /mail/protocols.py#L384'>__init__</a>(service)</tt>	@type service l{mailservice} @param service an email service.
<tt style='background-color:#E8E8E8;'> mail.POP3Factory <a href=' /mail/protocols.py#L392'>buildProtocol</a>(addr)</tt>	Create an instance of a pop3 server protocol.
<tt style='background-color:#E8E8E8;'> mail.ManagedRelayerMixin <a href=' /mail/relaymanager.py#L46'>sentMail</a>(code,resp,numOk,addresses)</tt>	Called when e-mail has been sent we will always get 0 or 1 addresses.
<tt style='background-color:#E8E8E8;'> mail.ManagedRelayerMixin <a href=' /mail/relaymanager.py#L61'>connectionLost</a>(reason)</tt>	Called when connection is broken.
<tt style='background-color:#E8E8E8;'> mail.SMTPManagedRelayer <a href=' /mail/relaymanager.py#L82'>__init__</a>(messages,manager)</tt>	@type messages l{list} of l{bytes} @param messages the base filenames of messages to be relayed.
<tt style='background-color:#E8E8E8;'> mail.ESMTPManagedRelayer <a href=' /mail/relaymanager.py#L109'>__init__</a>(messages,manager)</tt>	@type messages l{list} of l{bytes} @param messages the base filenames of messages to be relayed.
<tt style='background-color:#E8E8E8;'> mail.SMTPManagedRelayerFactory <a href=' /mail/relaymanager.py#L157'>__init__</a>(messages,manager)</tt>	@type messages l{list} of l{bytes} @param messages the base filenames of messages to be relayed.
<tt style='background-color:#E8E8E8;'> mail.SMTPManagedRelayerFactory <a href=' /mail/relaymanager.py#L178'>buildProtocol</a>(addr)</tt>	Create an l{smtpmanagedrelayer}.
<tt style='background-color:#E8E8E8;'> mail.SMTPManagedRelayerFactory <a href=' /mail/relaymanager.py#L194'>clientConnectionFailed</a>(connector,reason)</tt>	Notify the attempt manager that a connection could not be established.
<tt style='background-color:#E8E8E8;'> mail.ESMTPManagedRelayerFactory <a href=' /mail/relaymanager.py#L226'>__init__</a>(messages,manager,secret,contextFactory)</tt>	@type messages l{list} of l{bytes} @param messages the base filenames of messages to be relayed.
<tt style='background-color:#E8E8E8;'> mail.ESMTPManagedRelayerFactory <a href=' /mail/relaymanager.py#L254'>buildProtocol</a>(addr)</tt>	Create an l{esmtpmanagedrelayer}.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L294'>__init__</a>(directory)</tt>	Initialize non-volatile state.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L306'>_init</a>()</tt>	Initialize volatile state.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L316'>__getstate__</a>()</tt>	Create a representation of the non-volatile state of the queue.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L326'>__setstate__</a>(state)</tt>	Restore the non-volatile state of the queue and recreate the volatile state.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L338'>readDirectory</a>()</tt>	Scan the message directory for new messages.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L349'>getWaiting</a>()</tt>	Return the base filenames of messages waiting to be relayed.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L359'>hasWaiting</a>()</tt>	Return an indication of whether the queue has messages waiting to be relayed.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L371'>getRelayed</a>()</tt>	Return the base filenames of messages in the process of being relayed.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L382'>setRelaying</a>(message)</tt>	Mark a message as being relayed.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L393'>setWaiting</a>(message)</tt>	Mark a message as waiting to be relayed.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L404'>addMessage</a>(message)</tt>	Mark a message as waiting to be relayed unless it is in the process of being relayed.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L418'>done</a>(message)</tt>	Remove a message from the queue.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L431'>getPath</a>(message)</tt>	Return the full base pathname of a message in the queue.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L444'>getEnvelope</a>(message)</tt>	Get the envelope for a message.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L459'>getEnvelopeFile</a>(message)</tt>	Return the envelope file for a message in the queue.
<tt style='background-color:#E8E8E8;'> mail.Queue <a href=' /mail/relaymanager.py#L472'>createNewMessage</a>()</tt>	Create a new message in the queue.
<tt style='background-color:#E8E8E8;'> mail._AttemptManager <a href=' /mail/relaymanager.py#L504'>__init__</a>(manager,noisy,reactor)</tt>	@type manager l{smarthostsmtprelayingmanager} @param manager a smart host.
<tt style='background-color:#E8E8E8;'> mail._AttemptManager <a href=' /mail/relaymanager.py#L526'>getCompletionDeferred</a>()</tt>	Return a deferred which will fire when the attempt to relay is finished.
<tt style='background-color:#E8E8E8;'> mail._AttemptManager <a href=' /mail/relaymanager.py#L539'>_finish</a>(relay,message)</tt>	Remove a message from the relay queue and from the smart host's list of messages being relayed.
<tt style='background-color:#E8E8E8;'> mail._AttemptManager <a href=' /mail/relaymanager.py#L554'>notifySuccess</a>(relay,message)</tt>	Remove a message from the relay queue after it has been successfully sent.
<tt style='background-color:#E8E8E8;'> mail._AttemptManager <a href=' /mail/relaymanager.py#L570'>notifyFailure</a>(relay,message)</tt>	Generate a bounce message for a message which cannot be relayed.
<tt style='background-color:#E8E8E8;'> mail._AttemptManager <a href=' /mail/relaymanager.py#L599'>notifyDone</a>(relay)</tt>	When the connection is lost or cannot be established prepare to resend unsent messages and fire all deferred which are waiting for.
<tt style='background-color:#E8E8E8;'> mail._AttemptManager <a href=' /mail/relaymanager.py#L622'>notifyNoConnection</a>(relay)</tt>	When a connection to the mail exchange server cannot be established prepare to resend messages later.
<tt style='background-color:#E8E8E8;'> mail.SmartHostSMTPRelayingManager <a href=' /mail/relaymanager.py#L698'>__init__</a>(queue,maxConnections,maxMessagesPerConnection)</tt>	Initialize a smart host.
<tt style='background-color:#E8E8E8;'> mail.SmartHostSMTPRelayingManager <a href=' /mail/relaymanager.py#L724'>__getstate__</a>()</tt>	Create a representation of the non-volatile state of this object.
<tt style='background-color:#E8E8E8;'> mail.SmartHostSMTPRelayingManager <a href=' /mail/relaymanager.py#L736'>__setstate__</a>(state)</tt>	Restore the non-volatile state of this object and recreate the volatile state.
<tt style='background-color:#E8E8E8;'> mail.SmartHostSMTPRelayingManager <a href=' /mail/relaymanager.py#L748'>checkState</a>()</tt>	Check the state of the relay queue and if possible launch relayers to handle waiting messages.
<tt style='background-color:#E8E8E8;'> mail.SmartHostSMTPRelayingManager <a href=' /mail/relaymanager.py#L806'>_cbExchange</a>(address,port,factory)</tt>	Initiate a connection with a mail exchange server.
<tt style='background-color:#E8E8E8;'> mail.SmartHostSMTPRelayingManager <a href=' /mail/relaymanager.py#L827'>_ebExchange</a>(failure,factory,domain)</tt>	Prepare to resend messages later.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/relaymanager.py#L870'>_checkState</a>(manager)</tt>	Prompt a relaying manager to check state.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/relaymanager.py#L881'>RelayStateHelper</a>(manager,delay)</tt>	Set up a periodic call to prompt a relaying manager to check state.
<tt style='background-color:#E8E8E8;'> mail.MXCalculator <a href=' /mail/relaymanager.py#L945'>__init__</a>(resolver,clock)</tt>	@type resolver l{iresolver <twisted internet interfaces iresolver>}.
<tt style='background-color:#E8E8E8;'> mail.MXCalculator <a href=' /mail/relaymanager.py#L965'>markBad</a>(mx)</tt>	Record that a mail exchange host is not currently functioning.
<tt style='background-color:#E8E8E8;'> mail.MXCalculator <a href=' /mail/relaymanager.py#L975'>markGood</a>(mx)</tt>	Record that a mail exchange host is functioning.
<tt style='background-color:#E8E8E8;'> mail.MXCalculator <a href=' /mail/relaymanager.py#L988'>getMX</a>(domain,maximumCanonicalChainLength)</tt>	Find the name of a host that acts as a mail exchange server for a domain.
<tt style='background-color:#E8E8E8;'> mail.MXCalculator <a href=' /mail/relaymanager.py#L1013'>_filterRecords</a>(records)</tt>	Organize the records of a dns response by record name.
<tt style='background-color:#E8E8E8;'> mail.MXCalculator <a href=' /mail/relaymanager.py#L1034'>_cbMX</a>(answers,domain,cnamesLeft)</tt>	Try to find the mail exchange host for a domain from the given dns records.
<tt style='background-color:#E8E8E8;'> mail.MXCalculator <a href=' /mail/relaymanager.py#L1118'>_ebMX</a>(failure,domain)</tt>	Attempt to use the name of the domain directly when mail exchange lookup fails.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L35'>__init__</a>(domains,default)</tt>	@type domains l{dict} of l{bytes} -> l{idomain} provider @param domains a mapping of domain name to domain object.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L47'>setDefaultDomain</a>(domain)</tt>	Set the default domain.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L57'>has_key</a>(name)</tt>	Test for the presence of a domain name in this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L80'>fromkeys</a>(klass,keys,value)</tt>	Create a new l{domainwithdefaultdict} with the specified keys.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L101'>__contains__</a>(name)</tt>	Test for the presence of a domain name in this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L118'>__getitem__</a>(name)</tt>	Look up a domain name and if it is present return the domain object associated with it.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L132'>__setitem__</a>(name,value)</tt>	Associate a domain object with a domain name in this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L145'>__delitem__</a>(name)</tt>	Delete the entry for a domain name in this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L155'>__iter__</a>()</tt>	Return an iterator over the domain names in this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L165'>__len__</a>()</tt>	Return the number of domains in this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L175'>__str__</a>()</tt>	Build an informal string representation of this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L186'>__repr__</a>()</tt>	Build an "official" string representation of this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L197'>get</a>(key,default)</tt>	Look up a domain name in this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L215'>copy</a>()</tt>	Make a copy of this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L225'>iteritems</a>()</tt>	Return an iterator over the domain name/domain object pairs in the dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L241'>iterkeys</a>()</tt>	Return an iterator over the domain names in this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L255'>itervalues</a>()</tt>	Return an iterator over the domain objects in this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L270'>keys</a>()</tt>	Return a list of all domain names in this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L281'>values</a>()</tt>	Return a list of all domain objects in this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L291'>items</a>()</tt>	Return a list of all domain name/domain object pairs in this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L303'>popitem</a>()</tt>	Remove a random domain name/domain object pair from this dictionary and return it as a tuple.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L317'>update</a>(other)</tt>	Update this dictionary with domain name/domain object pairs from another dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L335'>clear</a>()</tt>	Remove all items from this dictionary.
<tt style='background-color:#E8E8E8;'> mail.DomainWithDefaultDict <a href=' /mail/mail.py#L345'>setdefault</a>(key,default)</tt>	Return the domain object associated with the domain name if it is present in this dictionary.
<tt style='background-color:#E8E8E8;'> mail.BounceDomain <a href=' /mail/mail.py#L374'>exists</a>(user)</tt>	Raise an exception to indicate that the user does not exist in this domain.
<tt style='background-color:#E8E8E8;'> mail.BounceDomain <a href=' /mail/mail.py#L387'>willRelay</a>(user,protocol)</tt>	Indicate that this domain will not relay.
<tt style='background-color:#E8E8E8;'> mail.BounceDomain <a href=' /mail/mail.py#L404'>addUser</a>(user,password)</tt>	Ignore attempts to add a user to this domain.
<tt style='background-color:#E8E8E8;'> mail.BounceDomain <a href=' /mail/mail.py#L417'>getCredentialsCheckers</a>()</tt>	Return no credentials checkers for this domain.
<tt style='background-color:#E8E8E8;'> mail.FileMessage <a href=' /mail/mail.py#L437'>__init__</a>(fp,name,finalName)</tt>	@type fp file-like object @param fp the file in which to store the message while it is being.
<tt style='background-color:#E8E8E8;'> mail.FileMessage <a href=' /mail/mail.py#L455'>lineReceived</a>(line)</tt>	Write a received line to the file.
<tt style='background-color:#E8E8E8;'> mail.FileMessage <a href=' /mail/mail.py#L465'>eomReceived</a>()</tt>	At the end of message rename the file holding the message to its final name.
<tt style='background-color:#E8E8E8;'> mail.FileMessage <a href=' /mail/mail.py#L478'>connectionLost</a>()</tt>	Delete the file holding the partially received message.
<tt style='background-color:#E8E8E8;'> mail.MailService <a href=' /mail/mail.py#L516'>__init__</a>()</tt>	Initialize the mail service.
<tt style='background-color:#E8E8E8;'> mail.MailService <a href=' /mail/mail.py#L530'>getPOP3Factory</a>()</tt>	Create a pop3 protocol factory.
<tt style='background-color:#E8E8E8;'> mail.MailService <a href=' /mail/mail.py#L540'>getSMTPFactory</a>()</tt>	Create an smtp protocol factory.
<tt style='background-color:#E8E8E8;'> mail.MailService <a href=' /mail/mail.py#L550'>getESMTPFactory</a>()</tt>	Create an esmtp protocol factory.
<tt style='background-color:#E8E8E8;'> mail.MailService <a href=' /mail/mail.py#L560'>addDomain</a>(name,domain)</tt>	Add a domain for which the service will accept email.
<tt style='background-color:#E8E8E8;'> mail.MailService <a href=' /mail/mail.py#L578'>setQueue</a>(queue)</tt>	Set the queue for outgoing emails.
<tt style='background-color:#E8E8E8;'> mail.MailService <a href=' /mail/mail.py#L588'>requestAvatar</a>(avatarId,mind)</tt>	Return a message delivery for an authenticated smtp user.
<tt style='background-color:#E8E8E8;'> mail.MailService <a href=' /mail/mail.py#L616'>lookupPortal</a>(name)</tt>	Find the portal for a domain.
<tt style='background-color:#E8E8E8;'> mail.MailService <a href=' /mail/mail.py#L629'>defaultPortal</a>()</tt>	Return the portal for the default domain.
<tt style='background-color:#E8E8E8;'> mail.FileMonitoringService <a href=' /mail/mail.py#L664'>__init__</a>()</tt>	Initialize the file monitoring service.
<tt style='background-color:#E8E8E8;'> mail.FileMonitoringService <a href=' /mail/mail.py#L672'>startService</a>()</tt>	Start the file monitoring service.
<tt style='background-color:#E8E8E8;'> mail.FileMonitoringService <a href=' /mail/mail.py#L680'>_setupMonitor</a>()</tt>	Schedule the next monitoring call.
<tt style='background-color:#E8E8E8;'> mail.FileMonitoringService <a href=' /mail/mail.py#L689'>stopService</a>()</tt>	Stop the file monitoring service.
<tt style='background-color:#E8E8E8;'> mail.FileMonitoringService <a href=' /mail/mail.py#L699'>monitorFile</a>(name,callback,interval)</tt>	Start monitoring a file for changes.
<tt style='background-color:#E8E8E8;'> mail.FileMonitoringService <a href=' /mail/mail.py#L720'>unmonitorFile</a>(name)</tt>	Stop monitoring a file.
<tt style='background-color:#E8E8E8;'> mail.FileMonitoringService <a href=' /mail/mail.py#L734'>_monitor</a>()</tt>	Monitor a file and make a callback if it has changed.
<tt style='background-color:#E8E8E8;'> mail.Options <a href=' /mail/tap.py#L116'>__init__</a>()</tt>	Parse options and create a mail service.
<tt style='background-color:#E8E8E8;'> mail.Options <a href=' /mail/tap.py#L127'>addEndpoint</a>(service,description)</tt>	Add an endpoint to a service.
<tt style='background-color:#E8E8E8;'> mail.Options <a href=' /mail/tap.py#L142'>opt_pop3</a>(description)</tt>	Add a pop3 port listener on the specified endpoint.
<tt style='background-color:#E8E8E8;'> mail.Options <a href=' /mail/tap.py#L152'>opt_smtp</a>(description)</tt>	Add an smtp port listener on the specified endpoint.
<tt style='background-color:#E8E8E8;'> mail.Options <a href=' /mail/tap.py#L162'>opt_default</a>()</tt>	Make the most recently specified domain the default domain.
<tt style='background-color:#E8E8E8;'> mail.Options <a href=' /mail/tap.py#L173'>opt_maildirdbmdomain</a>(domain)</tt>	Generate an smtp/pop3 virtual domain.
<tt style='background-color:#E8E8E8;'> mail.Options <a href=' /mail/tap.py#L191'>opt_user</a>(user_pass)</tt>	Add a user and password to the last specified domain.
<tt style='background-color:#E8E8E8;'> mail.Options <a href=' /mail/tap.py#L206'>opt_bounce_to_postmaster</a>()</tt>	Send undeliverable messages to the postmaster.
<tt style='background-color:#E8E8E8;'> mail.Options <a href=' /mail/tap.py#L214'>opt_aliases</a>(filename)</tt>	Specify an aliases 5 file to use for the last specified domain.
<tt style='background-color:#E8E8E8;'> mail.Options <a href=' /mail/tap.py#L237'>_getEndpoints</a>(reactor,service)</tt>	Return a list of endpoints for the specified service constructing defaults if necessary.
<tt style='background-color:#E8E8E8;'> mail.Options <a href=' /mail/tap.py#L274'>postOptions</a>()</tt>	Check the validity of the specified set of options and configure authentication.
<tt style='background-color:#E8E8E8;'> mail.AliasUpdater <a href=' /mail/tap.py#L314'>__init__</a>(domains,domain)</tt>	@type domains l{dict} mapping l{bytes} to l{idomain} provider @param domains a mapping of domain name to domain object.
<tt style='background-color:#E8E8E8;'> mail.AliasUpdater <a href=' /mail/tap.py#L326'>__call__</a>(new)</tt>	Update the aliases for a domain from an aliases 5 file.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/tap.py#L337'>makeService</a>(config)</tt>	Configure a service for operating a mail server.
<tt style='background-color:#E8E8E8;'> mail.MessageSet <a href=' /mail/imap4.py#L97'>__init__</a>(start,end)</tt>	Create a new messageset() @type start optional l{int}.
<tt style='background-color:#E8E8E8;'> mail.MessageSet <a href=' /mail/imap4.py#L152'>add</a>(start,end)</tt>	Add another range @type start l{int}.
<tt style='background-color:#E8E8E8;'> mail.MessageSet <a href=' /mail/imap4.py#L207'>clean</a>()</tt>	Clean ranges list combining adjacent ranges.
<tt style='background-color:#E8E8E8;'> mail.MessageSet <a href=' /mail/imap4.py#L230'>__contains__</a>(value)</tt>	May raise typeerror if we encounter an open-ended range.
<tt style='background-color:#E8E8E8;'> mail.LiteralString <a href=' /mail/imap4.py#L323'>callback</a>(line)</tt>	Call deferred with data and rest of line.
<tt style='background-color:#E8E8E8;'> mail.LiteralFile <a href=' /mail/imap4.py#L358'>callback</a>(line)</tt>	Call deferred with data and rest of line.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L698'>arg_astring</a>(line)</tt>	Parse an astring from the line return arg rest possibly.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L734'>arg_atom</a>(line)</tt>	Parse an atom from the line.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L747'>arg_plist</a>(line)</tt>	Parse a non-nested parenthesised list from the line.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L765'>arg_literal</a>(line)</tt>	Parse a literal from the line.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L821'>arg_flaglist</a>(line)</tt>	Flag part of store-att-flag.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L846'>arg_line</a>(line)</tt>	Command line of uid command.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L853'>opt_plist</a>(line)</tt>	Optional parenthesised list.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L863'>opt_datetime</a>(line)</tt>	Optional date-time string.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L877'>opt_charset</a>(line)</tt>	Optional charset of search command.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L1084'>authenticateLogin</a>(user,passwd)</tt>	Lookup the account associated with the given parameters override this method to define the desired authentication behavior.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L1434'>checkpoint</a>()</tt>	Called when the client issues a check command.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L1525'>__cbManualSearch</a>(result,tag,mbox,query)</tt>	Apply the search filter to a set of messages send the response to the.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L1581'>_searchFilter</a>(query,id,msg,lastSequenceId)</tt>	Pop search terms from the beginning of c{query} until there are none left and apply them to the given message.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L1610'>_singleSearchStep</a>(query,msgId,msg,lastSequenceId)</tt>	Pop one search term from the beginning of c{query} possibly more than one element and return whether it matches the given message.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L1659'>search_ALL</a>(query,id,msg)</tt>	Returns c{true} if the message matches the all search key always.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L1674'>search_ANSWERED</a>(query,id,msg)</tt>	Returns c{true} if the message has been answered.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L1689'>search_BCC</a>(query,id,msg)</tt>	Returns c{true} if the message has a bcc address matching the query.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L1756'>search_NOT</a>(query,id,msg,lastIDs)</tt>	Returns c{true} if the message does not match the query.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L1789'>search_OR</a>(query,id,msg,lastIDs)</tt>	Returns c{true} if the message matches any of the first two query items.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L1825'>search_SENTBEFORE</a>(query,id,msg)</tt>	Returns c{true} if the message date is earlier than the query date.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L1844'>search_SENTON</a>(query,id,msg)</tt>	Returns c{true} if the message date is the same as the query date.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L1860'>search_SENTSINCE</a>(query,id,msg)</tt>	Returns c{true} if the message date is later than the query date.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Server <a href=' /mail/imap4.py#L1901'>search_UID</a>(query,id,msg,lastIDs)</tt>	Returns c{true} if the message uid is in the range defined by the search query.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L2382'>registerAuthenticator</a>(auth)</tt>	Register a new form of authentication when invoking the authenticate() method of imap4client the first.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L2436'>connectionLost</a>(reason)</tt>	We are no longer connected.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L2455'>lineReceived</a>(line)</tt>	Attempt to parse a single line from the server.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L2520'>messageFile</a>(octets)</tt>	Create a file to which an incoming message may be written.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L2667'>getCapabilities</a>(useCache)</tt>	Request the capabilities available on this server.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L2715'>logout</a>()</tt>	Inform the server that we are done with the connection.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L2737'>noop</a>()</tt>	Perform no operation.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L2759'>startTLS</a>(contextFactory)</tt>	Initiates a 'starttls' request and negotiates the tls / ssl handshake.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L2802'>authenticate</a>(secret)</tt>	Attempt to enter the authenticated state with the server this command is allowed in the non-authenticated state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L2869'>login</a>(username,password)</tt>	Authenticate with the server using a username and password this command is allowed in the non-authenticated state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L2895'>serverGreeting</a>(caps)</tt>	Called when the server has sent us a greeting.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L2960'>namespace</a>()</tt>	Retrieve information about the namespaces available to this account this command is allowed in the authenticated and selected states.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L2991'>select</a>(mailbox)</tt>	Select a mailbox this command is allowed in the authenticated and selected states.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3031'>examine</a>(mailbox)</tt>	Select a mailbox in read-only mode this command is allowed in the authenticated and selected states.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3071'>_intOrRaise</a>(value,phrase)</tt>	Parse c{value} as an integer and return the result or raise l{illegalserverresponse} with c{phrase} as an argument if c{value}.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3083'>__cbSelect</a>(result,rw)</tt>	Handle lines received in response to a select or examine command.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3135'>create</a>(name)</tt>	Create a new mailbox on the server this command is allowed in the authenticated and selected states.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3151'>delete</a>(name)</tt>	Delete a mailbox this command is allowed in the authenticated and selected states.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3167'>rename</a>(oldname,newname)</tt>	Rename a mailbox this command is allowed in the authenticated and selected states.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3188'>subscribe</a>(name)</tt>	Add a mailbox to the subscription list this command is allowed in the authenticated and selected states.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3204'>unsubscribe</a>(name)</tt>	Remove a mailbox from the subscription list this command is allowed in the authenticated and selected states.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3220'>list</a>(reference,wildcard)</tt>	List a subset of the available mailboxes this command is allowed in the authenticated and selected states.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3251'>lsub</a>(reference,wildcard)</tt>	List a subset of the subscribed available mailboxes this command is allowed in the authenticated and selected states.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3279'>status</a>(mailbox)</tt>	Retrieve the status of the given mailbox this command is allowed in the authenticated and selected states.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3326'>append</a>(mailbox,message,flags,date)</tt>	Add the given message to the given mailbox.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3378'>check</a>()</tt>	Tell the server to perform a checkpoint this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3391'>close</a>()</tt>	Return the connection to the authenticated state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3408'>expunge</a>()</tt>	Return the connection to the authenticate state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3439'>search</a>()</tt>	Search messages in the currently selected mailbox this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3476'>fetchUID</a>(messages,uid)</tt>	Retrieve the unique identifier for one or more messages this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3497'>fetchFlags</a>(messages,uid)</tt>	Retrieve the flags for one or more messages this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3518'>fetchInternalDate</a>(messages,uid)</tt>	Retrieve the internal date associated with one or more messages this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3540'>fetchEnvelope</a>(messages,uid)</tt>	Retrieve the envelope data for one or more messages this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3567'>fetchBodyStructure</a>(messages,uid)</tt>	Retrieve the structure of the body of one or more messages this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3597'>fetchSimplifiedBody</a>(messages,uid)</tt>	Retrieve the simplified body structure of one or more messages this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3620'>fetchMessage</a>(messages,uid)</tt>	Retrieve one or more entire messages this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3645'>fetchHeaders</a>(messages,uid)</tt>	Retrieve headers of one or more messages this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3666'>fetchBody</a>(messages,uid)</tt>	Retrieve body text of one or more messages this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3687'>fetchSize</a>(messages,uid)</tt>	Retrieve the size in octets of one or more messages this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3708'>fetchFull</a>(messages,uid)</tt>	Retrieve several different fields of one or more messages this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3735'>fetchAll</a>(messages,uid)</tt>	Retrieve several different fields of one or more messages this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3761'>fetchFast</a>(messages,uid)</tt>	Retrieve several different fields of one or more messages this command is allowed in the selected state.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3786'>_parseFetchPairs</a>(fetchResponseList)</tt>	Given the result of parsing a single i{fetch} response construct a c{dict} mapping response keys to response values.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L3942'>fetchSpecific</a>(messages,uid,headerType,headerNumber)</tt>	Retrieve a specific section of one or more messages @type messages c{messageset} or l{str}.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L4042'>setFlags</a>(messages,flags,silent,uid)</tt>	Set the flags for one or more messages.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L4070'>addFlags</a>(messages,flags,silent,uid)</tt>	Add to the set flags for one or more messages.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L4098'>removeFlags</a>(messages,flags,silent,uid)</tt>	Remove from the set flags for one or more messages.
<tt style='background-color:#E8E8E8;'> mail.IMAP4Client <a href=' /mail/imap4.py#L4139'>copy</a>(messages,mailbox,uid)</tt>	Copy the specified messages to the specified mailbox.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/imap4.py#L4181'>parseIdList</a>(s,lastMessageId)</tt>	Parse a message set search key into a c{messageset}.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/imap4.py#L4254'>Query</a>(sorted)</tt>	Create a query string among the accepted keywords are :.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/imap4.py#L4392'>Or</a>()</tt>	The disjunction of two or more queries.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/imap4.py#L4403'>Not</a>(query)</tt>	The negation of a query.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/imap4.py#L4418'>splitQuoted</a>(s)</tt>	Split a string into whitespace delimited tokens tokens that would otherwise be separated but are surrounded by ".
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/imap4.py#L4493'>collapseStrings</a>(results)</tt>	Turns a list of length-one strings and lists into a list of longer strings and lists.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/imap4.py#L4529'>parseNestedParens</a>(s,handleLiteral)</tt>	Parse an s-exp-like string into a more useful data structure.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/imap4.py#L4635'>collapseNestedLists</a>(items)</tt>	Turn a nested list structure into an s-exp-like string.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/imap4.py#L4876'>_getContentType</a>(msg)</tt>	Return a two-tuple of the main and subtype of the given message.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/imap4.py#L4903'>_getMessageStructure</a>(message)</tt>	Construct an appropriate type of message structure object for the given message object.
<tt style='background-color:#E8E8E8;'> mail._MessageStructure <a href=' /mail/imap4.py#L4936'>__init__</a>(message,attrs)</tt>	@param message an l{imessagepart} provider which this structure object reports on.
<tt style='background-color:#E8E8E8;'> mail._MessageStructure <a href=' /mail/imap4.py#L4948'>_disposition</a>(disp)</tt>	Parse a i{content-disposition} header into a two-sequence of the disposition and a flattened list of its parameters.
<tt style='background-color:#E8E8E8;'> mail._MessageStructure <a href=' /mail/imap4.py#L4969'>_unquotedAttrs</a>()</tt>	@return the i{content-type} parameters unquoted as a flat list with each nth element giving a parameter name and n+1th element giving.
<tt style='background-color:#E8E8E8;'> mail._SinglepartMessageStructure <a href=' /mail/imap4.py#L4991'>__init__</a>(message,main,subtype,attrs)</tt>	@param message an l{imessagepart} provider which this structure object reports on.
<tt style='background-color:#E8E8E8;'> mail._SinglepartMessageStructure <a href=' /mail/imap4.py#L5011'>_basicFields</a>()</tt>	Return a list of the basic fields for a single-part message.
<tt style='background-color:#E8E8E8;'> mail._SinglepartMessageStructure <a href=' /mail/imap4.py#L5034'>encode</a>(extended)</tt>	Construct and return a list of the basic and extended fields for a single-part message.
<tt style='background-color:#E8E8E8;'> mail._SinglepartMessageStructure <a href=' /mail/imap4.py#L5046'>_extended</a>()</tt>	The extension data of a non-multipart body part are in the following order.
<tt style='background-color:#E8E8E8;'> mail._TextMessageStructure <a href=' /mail/imap4.py#L5090'>encode</a>(extended)</tt>	A body type of type text contains immediately after the basic fields the size of the body in text lines.
<tt style='background-color:#E8E8E8;'> mail._RFC822MessageStructure <a href=' /mail/imap4.py#L5110'>encode</a>(extended)</tt>	A body type of type message and subtype rfc822 contains immediately after the basic fields the envelope structure.
<tt style='background-color:#E8E8E8;'> mail._MultipartMessageStructure <a href=' /mail/imap4.py#L5131'>__init__</a>(message,subtype,attrs)</tt>	@param message an l{imessagepart} provider which this structure object reports on.
<tt style='background-color:#E8E8E8;'> mail._MultipartMessageStructure <a href=' /mail/imap4.py#L5146'>_getParts</a>()</tt>	Return an iterator over all of the sub-messages of this message.
<tt style='background-color:#E8E8E8;'> mail._MultipartMessageStructure <a href=' /mail/imap4.py#L5161'>encode</a>(extended)</tt>	Encode each sub-message and added the additional i{multipart} fields.
<tt style='background-color:#E8E8E8;'> mail._MultipartMessageStructure <a href=' /mail/imap4.py#L5172'>_extended</a>()</tt>	The extension data of a multipart body part are in the following order 1.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/imap4.py#L5208'>getBodyStructure</a>(msg,extended)</tt>	Rfc 3501 7 4 2 bodystructure :.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/imap4.py#L5333'>iterateInReactor</a>(i)</tt>	Consume an interator at most a single iteration per reactor iteration.
<tt style='background-color:#E8E8E8;'> mail.MessageProducer <a href=' /mail/imap4.py#L5367'>__init__</a>(msg,buffer,scheduler)</tt>	Produce this message.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/imap4.py#L5879'>encoder</a>(s,errors)</tt>	Encode the given c{unicode} string using the imap4 specific variation of utf-7.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/imap4.py#L5915'>decoder</a>(s,errors)</tt>	Decode the given l{str} using the imap4 specific variation of utf-7.
<tt style='background-color:#E8E8E8;'> mail.IClientAuthentication <a href=' /mail/interfaces.py#L17'>getName</a>()</tt>	Return an identifier associated with this authentication scheme.
<tt style='background-color:#E8E8E8;'> mail.IClientAuthentication <a href=' /mail/interfaces.py#L24'>challengeResponse</a>(secret,challenge)</tt>	Generate a challenge response string.
<tt style='background-color:#E8E8E8;'> mail.IServerFactoryPOP3 <a href=' /mail/interfaces.py#L47'>cap_IMPLEMENTATION</a>()</tt>	Return a string describing the pop3 server implementation.
<tt style='background-color:#E8E8E8;'> mail.IServerFactoryPOP3 <a href=' /mail/interfaces.py#L56'>cap_EXPIRE</a>()</tt>	Return the minimum number of days messages are retained.
<tt style='background-color:#E8E8E8;'> mail.IServerFactoryPOP3 <a href=' /mail/interfaces.py#L66'>perUserExpiration</a>()</tt>	Indicate whether the message expiration policy differs per user.
<tt style='background-color:#E8E8E8;'> mail.IServerFactoryPOP3 <a href=' /mail/interfaces.py#L76'>cap_LOGIN_DELAY</a>()</tt>	Return the minimum number of seconds between client logins.
<tt style='background-color:#E8E8E8;'> mail.IServerFactoryPOP3 <a href=' /mail/interfaces.py#L85'>perUserLoginDelay</a>()</tt>	Indicate whether the login delay period differs per user.
<tt style='background-color:#E8E8E8;'> mail.IMailboxPOP3 <a href=' /mail/interfaces.py#L110'>listMessages</a>(index)</tt>	Retrieve the size of a message or if none is specified the size of each message in the mailbox.
<tt style='background-color:#E8E8E8;'> mail.IMailboxPOP3 <a href=' /mail/interfaces.py#L130'>getMessage</a>(index)</tt>	Retrieve a file containing the contents of a message.
<tt style='background-color:#E8E8E8;'> mail.IMailboxPOP3 <a href=' /mail/interfaces.py#L145'>getUidl</a>(index)</tt>	Get a unique identifier for a message.
<tt style='background-color:#E8E8E8;'> mail.IMailboxPOP3 <a href=' /mail/interfaces.py#L161'>deleteMessage</a>(index)</tt>	Mark a message for deletion.
<tt style='background-color:#E8E8E8;'> mail.IMailboxPOP3 <a href=' /mail/interfaces.py#L177'>undeleteMessages</a>()</tt>	Undelete all messages marked for deletion.
<tt style='background-color:#E8E8E8;'> mail.IMailboxPOP3 <a href=' /mail/interfaces.py#L186'>sync</a>()</tt>	Discard the contents of any message marked for deletion.
<tt style='background-color:#E8E8E8;'> mail.IDomain <a href=' /mail/interfaces.py#L197'>exists</a>(user)</tt>	Check whether a user exists in this domain.
<tt style='background-color:#E8E8E8;'> mail.IDomain <a href=' /mail/interfaces.py#L212'>addUser</a>(user,password)</tt>	Add a user to this domain.
<tt style='background-color:#E8E8E8;'> mail.IDomain <a href=' /mail/interfaces.py#L224'>getCredentialsCheckers</a>()</tt>	Return credentials checkers for this domain.
<tt style='background-color:#E8E8E8;'> mail.IAlias <a href=' /mail/interfaces.py#L239'>createMessageReceiver</a>()</tt>	Create a message receiver.
<tt style='background-color:#E8E8E8;'> mail.IAliasableDomain <a href=' /mail/interfaces.py#L253'>setAliasGroup</a>(aliases)</tt>	Set the group of defined aliases for this domain.
<tt style='background-color:#E8E8E8;'> mail.IAliasableDomain <a href=' /mail/interfaces.py#L262'>exists</a>(user,memo)</tt>	Check whether a user exists in this domain or an alias of it.
<tt style='background-color:#E8E8E8;'> mail.IMessageDelivery <a href=' /mail/interfaces.py#L287'>receivedHeader</a>(helo,origin,recipients)</tt>	Generate the received header for a message.
<tt style='background-color:#E8E8E8;'> mail.IMessageDelivery <a href=' /mail/interfaces.py#L306'>validateTo</a>(user)</tt>	Validate the address for which the message is destined.
<tt style='background-color:#E8E8E8;'> mail.IMessageDelivery <a href=' /mail/interfaces.py#L323'>validateFrom</a>(helo,origin)</tt>	Validate the address from which the message originates.
<tt style='background-color:#E8E8E8;'> mail.IMessageDeliveryFactory <a href=' /mail/interfaces.py#L355'>getMessageDelivery</a>()</tt>	Return an l{imessagedelivery} object.
<tt style='background-color:#E8E8E8;'> mail.IMessageSMTP <a href=' /mail/interfaces.py#L369'>lineReceived</a>(line)</tt>	Handle another line.
<tt style='background-color:#E8E8E8;'> mail.IMessageSMTP <a href=' /mail/interfaces.py#L374'>eomReceived</a>()</tt>	Handle end of message.
<tt style='background-color:#E8E8E8;'> mail.IMessageSMTP <a href=' /mail/interfaces.py#L384'>connectionLost</a>()</tt>	Handle message truncated.
<tt style='background-color:#E8E8E8;'> mail.IMessageIMAPPart <a href=' /mail/interfaces.py#L394'>getHeaders</a>(negate)</tt>	Retrieve a group of message headers.
<tt style='background-color:#E8E8E8;'> mail.IMessageIMAPPart <a href=' /mail/interfaces.py#L410'>getBodyFile</a>()</tt>	Retrieve a file object containing only the body of this message.
<tt style='background-color:#E8E8E8;'> mail.IMessageIMAPPart <a href=' /mail/interfaces.py#L416'>getSize</a>()</tt>	Retrieve the total size in octets of this message.
<tt style='background-color:#E8E8E8;'> mail.IMessageIMAPPart <a href=' /mail/interfaces.py#L424'>isMultipart</a>()</tt>	Indicate whether this message has subparts.
<tt style='background-color:#E8E8E8;'> mail.IMessageIMAPPart <a href=' /mail/interfaces.py#L432'>getSubPart</a>(part)</tt>	Retrieve a mime sub-message @type part l{int}.
<tt style='background-color:#E8E8E8;'> mail.IMessageIMAP <a href=' /mail/interfaces.py#L450'>getUID</a>()</tt>	Retrieve the unique identifier associated with this message.
<tt style='background-color:#E8E8E8;'> mail.IMessageIMAP <a href=' /mail/interfaces.py#L456'>getFlags</a>()</tt>	Retrieve the flags associated with this message.
<tt style='background-color:#E8E8E8;'> mail.IMessageIMAP <a href=' /mail/interfaces.py#L465'>getInternalDate</a>()</tt>	Retrieve the date internally associated with this message.
<tt style='background-color:#E8E8E8;'> mail.IMessageIMAPFile <a href=' /mail/interfaces.py#L483'>open</a>()</tt>	Return a file-like object opened for reading.
<tt style='background-color:#E8E8E8;'> mail.ISearchableIMAPMailbox <a href=' /mail/interfaces.py#L495'>search</a>(query,uid)</tt>	Search for messages that meet the given query criteria.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAPListener <a href=' /mail/interfaces.py#L528'>modeChanged</a>(writeable)</tt>	Indicates that the write status of a mailbox has changed.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAPListener <a href=' /mail/interfaces.py#L538'>flagsChanged</a>(newFlags)</tt>	Indicates that the flags of one or more messages have changed.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAPListener <a href=' /mail/interfaces.py#L548'>newMessages</a>(exists,recent)</tt>	Indicates that the number of messages in a mailbox has changed.
<tt style='background-color:#E8E8E8;'> mail.IMessageIMAPCopier <a href=' /mail/interfaces.py#L564'>copy</a>(messageObject)</tt>	Copy the given message object into this mailbox.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAPInfo <a href=' /mail/interfaces.py#L593'>getFlags</a>()</tt>	Return the flags defined in this mailbox flags with the \ prefix are reserved for use as system flags.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAPInfo <a href=' /mail/interfaces.py#L605'>getHierarchicalDelimiter</a>()</tt>	Get the character which delimits namespaces for in this mailbox.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L615'>getUIDValidity</a>()</tt>	Return the unique validity identifier for this mailbox.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L623'>getUIDNext</a>()</tt>	Return the likely uid for the next message added to this mailbox.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L631'>getUID</a>(message)</tt>	Return the uid of a message in the mailbox @type message l{int}.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L643'>getMessageCount</a>()</tt>	Return the number of messages in this mailbox.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L651'>getRecentCount</a>()</tt>	Return the number of messages with the 'recent' flag.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L659'>getUnseenCount</a>()</tt>	Return the number of messages with the 'unseen' flag.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L667'>isWriteable</a>()</tt>	Get the read/write status of the mailbox.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L677'>destroy</a>()</tt>	Called before this mailbox is deleted permanently.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L686'>requestStatus</a>(names)</tt>	Return status information about this mailbox.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L708'>addListener</a>(listener)</tt>	Add a mailbox change listener @type listener any object which implements c{imailboximaplistener}.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L718'>removeListener</a>(listener)</tt>	Remove a mailbox change listener @type listener any object previously added to and not removed from.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L731'>addMessage</a>(message,flags,date)</tt>	Add the given message to this mailbox.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L754'>expunge</a>()</tt>	Remove all messages flagged \deleted.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L767'>fetch</a>(messages,uid)</tt>	Retrieve one or more messages.
<tt style='background-color:#E8E8E8;'> mail.IMailboxIMAP <a href=' /mail/interfaces.py#L784'>store</a>(messages,flags,mode,uid)</tt>	Set the flags of one or more messages.
<tt style='background-color:#E8E8E8;'> mail.ICloseableMailboxIMAP <a href=' /mail/interfaces.py#L824'>close</a>()</tt>	Close this mailbox.
<tt style='background-color:#E8E8E8;'> mail.IAccountIMAP <a href=' /mail/interfaces.py#L842'>addMailbox</a>(name,mbox)</tt>	Add a new mailbox to this account @type name l{bytes}.
<tt style='background-color:#E8E8E8;'> mail.IAccountIMAP <a href=' /mail/interfaces.py#L864'>create</a>(pathspec)</tt>	Create a new mailbox from the given hierarchical name.
<tt style='background-color:#E8E8E8;'> mail.IAccountIMAP <a href=' /mail/interfaces.py#L882'>select</a>(name,rw)</tt>	Acquire a mailbox given its name.
<tt style='background-color:#E8E8E8;'> mail.IAccountIMAP <a href=' /mail/interfaces.py#L900'>delete</a>(name)</tt>	Delete the mailbox with the specified name.
<tt style='background-color:#E8E8E8;'> mail.IAccountIMAP <a href=' /mail/interfaces.py#L917'>rename</a>(oldname,newname)</tt>	Rename a mailbox @type oldname l{bytes}.
<tt style='background-color:#E8E8E8;'> mail.IAccountIMAP <a href=' /mail/interfaces.py#L937'>isSubscribed</a>(name)</tt>	Check the subscription status of a mailbox @type name l{bytes}.
<tt style='background-color:#E8E8E8;'> mail.IAccountIMAP <a href=' /mail/interfaces.py#L951'>subscribe</a>(name)</tt>	Subscribe to a mailbox @type name l{bytes}.
<tt style='background-color:#E8E8E8;'> mail.IAccountIMAP <a href=' /mail/interfaces.py#L969'>unsubscribe</a>(name)</tt>	Unsubscribe from a mailbox @type name l{bytes}.
<tt style='background-color:#E8E8E8;'> mail.IAccountIMAP <a href=' /mail/interfaces.py#L987'>listMailboxes</a>(ref,wildcard)</tt>	List all the mailboxes that meet a certain criteria @type ref l{bytes}.
<tt style='background-color:#E8E8E8;'> mail.INamespacePresenter <a href=' /mail/interfaces.py#L1011'>getPersonalNamespaces</a>()</tt>	Report the available personal namespaces.
<tt style='background-color:#E8E8E8;'> mail.INamespacePresenter <a href=' /mail/interfaces.py#L1024'>getSharedNamespaces</a>()</tt>	Report the available shared namespaces.
<tt style='background-color:#E8E8E8;'> mail.INamespacePresenter <a href=' /mail/interfaces.py#L1038'>getUserNamespaces</a>()</tt>	Report the available user namespaces.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/alias.py#L26'>handle</a>(result,line,filename,lineNo)</tt>	Parse a line from an aliases file.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/alias.py#L54'>loadAliasFile</a>(domains,filename,fp)</tt>	Load a file containing email aliases.
<tt style='background-color:#E8E8E8;'> mail.AliasBase <a href=' /mail/alias.py#L136'>__init__</a>(domains,original)</tt>	@type domains l{dict} mapping l{bytes} to l{idomain} provider @param domains a mapping of domain name to domain object.
<tt style='background-color:#E8E8E8;'> mail.AliasBase <a href=' /mail/alias.py#L148'>domain</a>()</tt>	Return the domain associated with original address.
<tt style='background-color:#E8E8E8;'> mail.AliasBase <a href=' /mail/alias.py#L158'>resolve</a>(aliasmap,memo)</tt>	Map this alias to its ultimate destination.
<tt style='background-color:#E8E8E8;'> mail.AddressAlias <a href=' /mail/alias.py#L191'>__init__</a>(alias)</tt>	@type alias l{address}, l{user}, l{bytes} or object which can be converted into l{bytes}.
<tt style='background-color:#E8E8E8;'> mail.AddressAlias <a href=' /mail/alias.py#L205'>__str__</a>()</tt>	Build a string representation of this l{addressalias} instance.
<tt style='background-color:#E8E8E8;'> mail.AddressAlias <a href=' /mail/alias.py#L215'>createMessageReceiver</a>()</tt>	Create a message receiver which delivers a message to the destination address.
<tt style='background-color:#E8E8E8;'> mail.AddressAlias <a href=' /mail/alias.py#L226'>resolve</a>(aliasmap,memo)</tt>	Map this alias to its ultimate destination.
<tt style='background-color:#E8E8E8;'> mail.FileWrapper <a href=' /mail/alias.py#L269'>__init__</a>(filename)</tt>	@type filename l{bytes} @param filename the name of the file in which the message should be.
<tt style='background-color:#E8E8E8;'> mail.FileWrapper <a href=' /mail/alias.py#L279'>lineReceived</a>(line)</tt>	Write a received line to the temporary file.
<tt style='background-color:#E8E8E8;'> mail.FileWrapper <a href=' /mail/alias.py#L289'>eomReceived</a>()</tt>	Handle end of message by writing the message to the file.
<tt style='background-color:#E8E8E8;'> mail.FileWrapper <a href=' /mail/alias.py#L312'>connectionLost</a>()</tt>	Close the temporary file when the connection is lost.
<tt style='background-color:#E8E8E8;'> mail.FileWrapper <a href=' /mail/alias.py#L320'>__str__</a>()</tt>	Build a string representation of this l{filewrapper} instance.
<tt style='background-color:#E8E8E8;'> mail.FileAlias <a href=' /mail/alias.py#L338'>__init__</a>(filename)</tt>	@type filename l{bytes} @param filename the name of the file in which to store the message.
<tt style='background-color:#E8E8E8;'> mail.FileAlias <a href=' /mail/alias.py#L351'>__str__</a>()</tt>	Build a string representation of this l{filealias} instance.
<tt style='background-color:#E8E8E8;'> mail.FileAlias <a href=' /mail/alias.py#L361'>createMessageReceiver</a>()</tt>	Create a message receiver which delivers a message to the file.
<tt style='background-color:#E8E8E8;'> mail.MessageWrapper <a href=' /mail/alias.py#L418'>__init__</a>(protocol,process,reactor)</tt>	@type protocol l{processaliasprotocol} @param protocol the protocol associated with the child process.
<tt style='background-color:#E8E8E8;'> mail.MessageWrapper <a href=' /mail/alias.py#L440'>_processEnded</a>(result)</tt>	Record process termination and cancel the timeout call if it is active.
<tt style='background-color:#E8E8E8;'> mail.MessageWrapper <a href=' /mail/alias.py#L463'>lineReceived</a>(line)</tt>	Write a received line to the child process.
<tt style='background-color:#E8E8E8;'> mail.MessageWrapper <a href=' /mail/alias.py#L475'>eomReceived</a>()</tt>	Disconnect from the child process and set up a timeout to wait for it to exit.
<tt style='background-color:#E8E8E8;'> mail.MessageWrapper <a href=' /mail/alias.py#L491'>_completionCancel</a>()</tt>	Handle the expiration of the timeout for the child process to exit by terminating the child process forcefully and issuing a failure to the.
<tt style='background-color:#E8E8E8;'> mail.MessageWrapper <a href=' /mail/alias.py#L505'>connectionLost</a>()</tt>	Ignore notification of lost connection.
<tt style='background-color:#E8E8E8;'> mail.MessageWrapper <a href=' /mail/alias.py#L511'>__str__</a>()</tt>	Build a string representation of this l{messagewrapper} instance.
<tt style='background-color:#E8E8E8;'> mail.ProcessAliasProtocol <a href=' /mail/alias.py#L532'>processEnded</a>(reason)</tt>	Call an errback.
<tt style='background-color:#E8E8E8;'> mail.ProcessAlias <a href=' /mail/alias.py#L564'>__init__</a>(path)</tt>	@type path l{bytes} @param path the command to invoke the program consisting of the path.
<tt style='background-color:#E8E8E8;'> mail.ProcessAlias <a href=' /mail/alias.py#L580'>__str__</a>()</tt>	Build a string representation of this l{processalias} instance.
<tt style='background-color:#E8E8E8;'> mail.ProcessAlias <a href=' /mail/alias.py#L590'>spawnProcess</a>(proto,program,path)</tt>	Spawn a process.
<tt style='background-color:#E8E8E8;'> mail.ProcessAlias <a href=' /mail/alias.py#L617'>createMessageReceiver</a>()</tt>	Launch a process and create a message receiver to pass a message to the process.
<tt style='background-color:#E8E8E8;'> mail.MultiWrapper <a href=' /mail/alias.py#L640'>__init__</a>(objs)</tt>	@type objs l{list} of l{imessage <smtp imessage>} provider.
<tt style='background-color:#E8E8E8;'> mail.MultiWrapper <a href=' /mail/alias.py#L649'>lineReceived</a>(line)</tt>	Pass a received line to the message receivers.
<tt style='background-color:#E8E8E8;'> mail.MultiWrapper <a href=' /mail/alias.py#L660'>eomReceived</a>()</tt>	Pass the end of message along to the message receivers.
<tt style='background-color:#E8E8E8;'> mail.MultiWrapper <a href=' /mail/alias.py#L674'>connectionLost</a>()</tt>	Inform the message receivers that the connection has been lost.
<tt style='background-color:#E8E8E8;'> mail.MultiWrapper <a href=' /mail/alias.py#L682'>__str__</a>()</tt>	Build a string representation of this l{multiwrapper} instance.
<tt style='background-color:#E8E8E8;'> mail.AliasGroup <a href=' /mail/alias.py#L707'>__init__</a>(items)</tt>	Create a group of aliases.
<tt style='background-color:#E8E8E8;'> mail.AliasGroup <a href=' /mail/alias.py#L746'>__len__</a>()</tt>	Return the number of aliases in the group.
<tt style='background-color:#E8E8E8;'> mail.AliasGroup <a href=' /mail/alias.py#L756'>__str__</a>()</tt>	Build a string representation of this l{aliasgroup} instance.
<tt style='background-color:#E8E8E8;'> mail.AliasGroup <a href=' /mail/alias.py#L766'>createMessageReceiver</a>()</tt>	Create a message receiver for each alias and return a message receiver which will pass on a message to each of those.
<tt style='background-color:#E8E8E8;'> mail.AliasGroup <a href=' /mail/alias.py#L778'>resolve</a>(aliasmap,memo)</tt>	Map each of the aliases in the group to its ultimate destination.
<tt style='background-color:#E8E8E8;'> mail._MaildirNameGenerator <a href=' /mail/maildir.py#L61'>__init__</a>(clock)</tt>	@type clock l{ireactortime <interfaces ireactortime>} provider.
<tt style='background-color:#E8E8E8;'> mail._MaildirNameGenerator <a href=' /mail/maildir.py#L69'>generate</a>()</tt>	Generate a string which is intended to be unique across all calls to this function across all processes reboots etc.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/maildir.py#L92'>initializeMaildir</a>(dir)</tt>	Create a maildir user directory if it doesn't already exist.
<tt style='background-color:#E8E8E8;'> mail.MaildirMessage <a href=' /mail/maildir.py#L120'>__init__</a>(address,fp)</tt>	@type address l{bytes} @param address the address of the message recipient.
<tt style='background-color:#E8E8E8;'> mail.MaildirMessage <a href=' /mail/maildir.py#L141'>lineReceived</a>(line)</tt>	Write a line to the file.
<tt style='background-color:#E8E8E8;'> mail.MaildirMessage <a href=' /mail/maildir.py#L152'>eomReceived</a>()</tt>	At the end of message rename the file holding the message to its final name concatenated with the size of the file.
<tt style='background-color:#E8E8E8;'> mail.AbstractMaildirDomain <a href=' /mail/maildir.py#L181'>__init__</a>(service,root)</tt>	@type service l{mailservice} @param service an email service.
<tt style='background-color:#E8E8E8;'> mail.AbstractMaildirDomain <a href=' /mail/maildir.py#L192'>userDirectory</a>(user)</tt>	Return the maildir directory for a user.
<tt style='background-color:#E8E8E8;'> mail.AbstractMaildirDomain <a href=' /mail/maildir.py#L206'>setAliasGroup</a>(alias)</tt>	Set the group of defined aliases for this domain.
<tt style='background-color:#E8E8E8;'> mail.AbstractMaildirDomain <a href=' /mail/maildir.py#L216'>exists</a>(user,memo)</tt>	Check whether a user exists in this domain or an alias of it.
<tt style='background-color:#E8E8E8;'> mail.AbstractMaildirDomain <a href=' /mail/maildir.py#L250'>startMessage</a>(user)</tt>	Create a maildir message for a user.
<tt style='background-color:#E8E8E8;'> mail.AbstractMaildirDomain <a href=' /mail/maildir.py#L272'>willRelay</a>(user,protocol)</tt>	Check whether this domain will relay.
<tt style='background-color:#E8E8E8;'> mail.AbstractMaildirDomain <a href=' /mail/maildir.py#L290'>addUser</a>(user,password)</tt>	Add a user to this domain.
<tt style='background-color:#E8E8E8;'> mail.AbstractMaildirDomain <a href=' /mail/maildir.py#L305'>getCredentialsCheckers</a>()</tt>	Return credentials checkers for this domain.
<tt style='background-color:#E8E8E8;'> mail._MaildirMailboxAppendMessageTask <a href=' /mail/maildir.py#L359'>__init__</a>(mbox,msg)</tt>	@type mbox l{maildirmailbox} @param mbox a maildir mailbox.
<tt style='background-color:#E8E8E8;'> mail._MaildirMailboxAppendMessageTask <a href=' /mail/maildir.py#L375'>startUp</a>()</tt>	Start transferring the message to the mailbox.
<tt style='background-color:#E8E8E8;'> mail._MaildirMailboxAppendMessageTask <a href=' /mail/maildir.py#L385'>registerProducer</a>(producer,streaming)</tt>	Register a producer and start asking it for data if it is non-streaming.
<tt style='background-color:#E8E8E8;'> mail._MaildirMailboxAppendMessageTask <a href=' /mail/maildir.py#L403'>prodProducer</a>()</tt>	Repeatedly prod a non-streaming producer to produce data.
<tt style='background-color:#E8E8E8;'> mail._MaildirMailboxAppendMessageTask <a href=' /mail/maildir.py#L413'>unregisterProducer</a>()</tt>	Finish transferring the message to the mailbox.
<tt style='background-color:#E8E8E8;'> mail._MaildirMailboxAppendMessageTask <a href=' /mail/maildir.py#L423'>write</a>(data)</tt>	Write data to the maildir file.
<tt style='background-color:#E8E8E8;'> mail._MaildirMailboxAppendMessageTask <a href=' /mail/maildir.py#L436'>fail</a>(err)</tt>	Fire the deferred to indicate the task completed with a failure.
<tt style='background-color:#E8E8E8;'> mail._MaildirMailboxAppendMessageTask <a href=' /mail/maildir.py#L451'>moveFileToNew</a>()</tt>	Place the message in the i{new/} directory add it to the mailbox and fire the deferred to indicate that the task has completed.
<tt style='background-color:#E8E8E8;'> mail._MaildirMailboxAppendMessageTask <a href=' /mail/maildir.py#L476'>createTempFile</a>()</tt>	Create a temporary file to hold the message as it is being transferred.
<tt style='background-color:#E8E8E8;'> mail.MaildirMailbox <a href=' /mail/maildir.py#L520'>__init__</a>(path)</tt>	@type path l{bytes} @param path the directory name for a maildir mailbox.
<tt style='background-color:#E8E8E8;'> mail.MaildirMailbox <a href=' /mail/maildir.py#L536'>listMessages</a>(i)</tt>	Retrieve the size of a message or if none is specified the size of each message in the mailbox.
<tt style='background-color:#E8E8E8;'> mail.MaildirMailbox <a href=' /mail/maildir.py#L564'>getMessage</a>(i)</tt>	Retrieve a file-like object with the contents of a message.
<tt style='background-color:#E8E8E8;'> mail.MaildirMailbox <a href=' /mail/maildir.py#L580'>getUidl</a>(i)</tt>	Get a unique identifier for a message.
<tt style='background-color:#E8E8E8;'> mail.MaildirMailbox <a href=' /mail/maildir.py#L599'>deleteMessage</a>(i)</tt>	Mark a message for deletion.
<tt style='background-color:#E8E8E8;'> mail.MaildirMailbox <a href=' /mail/maildir.py#L620'>undeleteMessages</a>()</tt>	Undelete all messages marked for deletion.
<tt style='background-color:#E8E8E8;'> mail.MaildirMailbox <a href=' /mail/maildir.py#L645'>appendMessage</a>(txt)</tt>	Add a message to the mailbox.
<tt style='background-color:#E8E8E8;'> mail.StringListMailbox <a href=' /mail/maildir.py#L673'>__init__</a>(msgs)</tt>	@type msgs l{list} of l{bytes} @param msgs the contents of each message in the mailbox.
<tt style='background-color:#E8E8E8;'> mail.StringListMailbox <a href=' /mail/maildir.py#L682'>listMessages</a>(i)</tt>	Retrieve the size of a message or if none is specified the size of each message in the mailbox.
<tt style='background-color:#E8E8E8;'> mail.StringListMailbox <a href=' /mail/maildir.py#L706'>getMessage</a>(i)</tt>	Return an in-memory file-like object with the contents of a message.
<tt style='background-color:#E8E8E8;'> mail.StringListMailbox <a href=' /mail/maildir.py#L722'>getUidl</a>(i)</tt>	Get a unique identifier for a message.
<tt style='background-color:#E8E8E8;'> mail.StringListMailbox <a href=' /mail/maildir.py#L738'>deleteMessage</a>(i)</tt>	Mark a message for deletion.
<tt style='background-color:#E8E8E8;'> mail.StringListMailbox <a href=' /mail/maildir.py#L751'>undeleteMessages</a>()</tt>	Undelete any messages which have been marked for deletion.
<tt style='background-color:#E8E8E8;'> mail.StringListMailbox <a href=' /mail/maildir.py#L758'>sync</a>()</tt>	Discard the contents of any messages marked for deletion.
<tt style='background-color:#E8E8E8;'> mail.MaildirDirdbmDomain <a href=' /mail/maildir.py#L788'>__init__</a>(service,root,postmaster)</tt>	@type service l{mailservice} @param service an email service.
<tt style='background-color:#E8E8E8;'> mail.MaildirDirdbmDomain <a href=' /mail/maildir.py#L809'>userDirectory</a>(name)</tt>	Return the path to a user's mail directory.
<tt style='background-color:#E8E8E8;'> mail.MaildirDirdbmDomain <a href=' /mail/maildir.py#L831'>addUser</a>(user,password)</tt>	Add a user to this domain by adding an entry in the authentication database and initializing the user's mail directory.
<tt style='background-color:#E8E8E8;'> mail.MaildirDirdbmDomain <a href=' /mail/maildir.py#L847'>getCredentialsCheckers</a>()</tt>	Return credentials checkers for this domain.
<tt style='background-color:#E8E8E8;'> mail.MaildirDirdbmDomain <a href=' /mail/maildir.py#L860'>requestAvatar</a>(avatarId,mind)</tt>	Get the mailbox for an authenticated user.
<tt style='background-color:#E8E8E8;'> mail.DirdbmDatabase <a href=' /mail/maildir.py#L919'>__init__</a>(dbm)</tt>	@type dbm l{dirdbm <dirdbm dirdbm>}.
<tt style='background-color:#E8E8E8;'> mail.DirdbmDatabase <a href=' /mail/maildir.py#L927'>requestAvatarId</a>(c)</tt>	Authenticate a user and if successful return their username.
<tt style='background-color:#E8E8E8;'> mail.APOPCredentials <a href=' /mail/pop3.py#L50'>__init__</a>(magic,username,digest)</tt>	@type magic l{bytes} @param magic the challenge string used to encrypt the password.
<tt style='background-color:#E8E8E8;'> mail.APOPCredentials <a href=' /mail/pop3.py#L68'>checkPassword</a>(password)</tt>	Validate a plaintext password against the credentials.
<tt style='background-color:#E8E8E8;'> mail._HeadersPlusNLines <a href=' /mail/pop3.py#L108'>__init__</a>(f,n)</tt>	@type f file-like object @param f a file containing a mail message.
<tt style='background-color:#E8E8E8;'> mail._HeadersPlusNLines <a href=' /mail/pop3.py#L124'>read</a>(bytes)</tt>	Scan bytes from the file.
<tt style='background-color:#E8E8E8;'> mail._IteratorBuffer <a href=' /mail/pop3.py#L189'>__init__</a>(write,iterable,memoryBufferSize)</tt>	@type write callable that takes l{list} of l{bytes} @param write a writer which is a callable that takes a list of.
<tt style='background-color:#E8E8E8;'> mail._IteratorBuffer <a href=' /mail/pop3.py#L210'>__iter__</a>()</tt>	Return an iterator.
<tt style='background-color:#E8E8E8;'> mail._IteratorBuffer <a href=' /mail/pop3.py#L220'>next</a>()</tt>	Get the next string from the container buffer it and possibly send the buffer to the writer.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/pop3.py#L250'>iterateLineGenerator</a>(proto,gen)</tt>	Direct the output of an iterator to the transport of a protocol and arrange for iteration to take place.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/pop3.py#L269'>successResponse</a>(response)</tt>	Format an object as a positive response.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/pop3.py#L284'>formatStatResponse</a>(msgs)</tt>	Format a list of message sizes into a stat response.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/pop3.py#L309'>formatListLines</a>(msgs)</tt>	Format a list of message sizes for use in a list response.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/pop3.py#L328'>formatListResponse</a>(msgs)</tt>	Format a list of message sizes into a complete list response.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/pop3.py#L348'>formatUIDListLines</a>(msgs,getUidl)</tt>	Format a list of message sizes for use in a uidl response.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/pop3.py#L367'>formatUIDListResponse</a>(msgs,getUidl)</tt>	Format a list of message sizes into a complete uidl response.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L469'>connectionMade</a>()</tt>	Send a greeting to the client after the connection has been made.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L481'>connectionLost</a>(reason)</tt>	Clean up when the connection has been lost.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L494'>generateMagic</a>()</tt>	Generate an apop challenge.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L504'>successResponse</a>(message)</tt>	Send a response indicating success.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L515'>failResponse</a>(message)</tt>	Send a response indicating failure.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L526'>lineReceived</a>(line)</tt>	Pass a received line to a state machine function.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L537'>_unblock</a>(_)</tt>	Process as many blocked commands as possible.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L556'>state_COMMAND</a>(line)</tt>	Handle received lines for the command state in which commands from the client are expected.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L571'>processCommand</a>(command)</tt>	Dispatch a command from the client for handling.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L598'>listCapabilities</a>()</tt>	Return a list of server capabilities suitable for use in a capa response.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L671'>do_CAPA</a>()</tt>	Handle a capa command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L683'>do_AUTH</a>(args)</tt>	Handle an auth command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L719'>state_AUTH</a>(line)</tt>	Handle received lines for the auth state in which an authentication challenge response from the client is expected.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L749'>do_APOP</a>(user,digest)</tt>	Handle an apop command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L768'>_cbMailbox</a>(result,user)</tt>	Complete successful authentication.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L800'>_ebMailbox</a>(failure)</tt>	Handle an expected authentication failure.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L819'>_ebUnexpected</a>(failure)</tt>	Handle an unexpected authentication failure.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L832'>do_USER</a>(user)</tt>	Handle a user command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L846'>do_PASS</a>(password)</tt>	Handle a pass command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L869'>_longOperation</a>(d)</tt>	Stop timeouts and block further command processing while a long operation completes.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L890'>_coiterate</a>(gen)</tt>	Direct the output of an iterator to the transport and arrange for iteration to take place.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L904'>do_STAT</a>()</tt>	Handle a stat command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L922'>do_LIST</a>(i)</tt>	Handle a list command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L973'>do_UIDL</a>(i)</tt>	Handle a uidl command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L1017'>_getMessageFile</a>(i)</tt>	Retrieve the size and contents of a message.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L1068'>_sendMessageContent</a>(i,fpWrapper,successResponse)</tt>	Send the contents of a message.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L1118'>do_TOP</a>(i,size)</tt>	Handle a top command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L1145'>do_RETR</a>(i)</tt>	Handle a retr command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L1162'>transformChunk</a>(chunk)</tt>	Transform a chunk of a message to pop3 message format.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L1179'>finishedFileTransfer</a>(lastsent)</tt>	Send the termination sequence.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L1193'>do_DELE</a>(i)</tt>	Handle a dele command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L1207'>do_NOOP</a>()</tt>	Handle a noop command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L1216'>do_RSET</a>()</tt>	Handle a rset command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L1232'>do_LAST</a>()</tt>	Handle a last command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L1241'>do_RPOP</a>(user)</tt>	Handle an rpop command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L1254'>do_QUIT</a>()</tt>	Handle a quit command.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L1267'>authenticateUserAPOP</a>(user,digest)</tt>	Perform apop authentication.
<tt style='background-color:#E8E8E8;'> mail.POP3 <a href=' /mail/pop3.py#L1297'>authenticateUserPASS</a>(user,password)</tt>	Perform authentication for a username/password login.
<tt style='background-color:#E8E8E8;'> mail.Mailbox <a href=' /mail/pop3.py#L1333'>listMessages</a>(i)</tt>	Retrieve the size of a message or if none is specified the size of each message in the mailbox.
<tt style='background-color:#E8E8E8;'> mail.Mailbox <a href=' /mail/pop3.py#L1354'>getMessage</a>(i)</tt>	Retrieve a file containing the contents of a message.
<tt style='background-color:#E8E8E8;'> mail.Mailbox <a href=' /mail/pop3.py#L1370'>getUidl</a>(i)</tt>	Get a unique identifier for a message.
<tt style='background-color:#E8E8E8;'> mail.Mailbox <a href=' /mail/pop3.py#L1387'>deleteMessage</a>(i)</tt>	Mark a message for deletion.
<tt style='background-color:#E8E8E8;'> mail.Mailbox <a href=' /mail/pop3.py#L1404'>undeleteMessages</a>()</tt>	Undelete all messages marked for deletion.
<tt style='background-color:#E8E8E8;'> mail.Mailbox <a href=' /mail/pop3.py#L1414'>sync</a>()</tt>	Discard the contents of any message marked for deletion.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1456'>__init__</a>()</tt>	Issue deprecation warning.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1467'>sendShort</a>(command,params)</tt>	Send a pop3 command to which a short response is expected.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1485'>sendLong</a>(command,params)</tt>	Send a pop3 command to which a long response is expected.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1503'>handle_default</a>(line)</tt>	Handle responses from the server for which no other handler exists.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1514'>handle_WELCOME</a>(line)</tt>	Handle a server response which is expected to be a server greeting.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1530'>_dispatch</a>(command,default)</tt>	Dispatch a response from the server for handling.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1585'>apopAuthenticate</a>(user,password,magic)</tt>	Perform an authenticated login.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1602'>apop</a>(user,digest)</tt>	Send an apop command to perform authenticated login.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1615'>retr</a>(i)</tt>	Send a retr command to retrieve a message from the server.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1625'>dele</a>(i)</tt>	Send a dele command to delete a message from the server.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1635'>list</a>(i)</tt>	Send a list command to retrieve the size of a message or if no message is specified the sizes of all messages.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1647'>uidl</a>(i)</tt>	Send a uidl command to retrieve the unique identifier of a message or if no message is specified the unique identifiers of all messages.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1659'>user</a>(name)</tt>	Send a user command to perform the first half of a plaintext login.
<tt style='background-color:#E8E8E8;'> mail.POP3Client <a href=' /mail/pop3.py#L1669'>pass_</a>(pass_)</tt>	Perform the second half of a plaintext login.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/smtp.py#L96'>rfc822date</a>(timeinfo,local)</tt>	Format an rfc-2822 compliant date string.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/smtp.py#L147'>messageid</a>(uniq,N)</tt>	Return a globally unique random string in rfc 2822 message-id format <datetime.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/smtp.py#L167'>quoteaddr</a>(addr)</tt>	Turn an email address possibly with realname part etc into a form suitable for and smtp envelope.
<tt style='background-color:#E8E8E8;'> mail.Address <a href=' /mail/smtp.py#L271'>dequote</a>(addr)</tt>	Remove rfc-2821 quotes from address.
<tt style='background-color:#E8E8E8;'> mail.User <a href=' /mail/smtp.py#L332'>__getstate__</a>()</tt>	Helper for pickle.
<tt style='background-color:#E8E8E8;'> mail.SMTP <a href=' /mail/smtp.py#L430'>sendCode</a>(code,message)</tt>	Send an smtp code with a message.
<tt style='background-color:#E8E8E8;'> mail.SMTP <a href=' /mail/smtp.py#L468'>lookupMethod</a>(command)</tt>	@param command the command to get from this class.
<tt style='background-color:#E8E8E8;'> mail.SMTP <a href=' /mail/smtp.py#L755'>_cbAnonymousAuthentication</a>(result)</tt>	Save the state resulting from a successful anonymous cred login.
<tt style='background-color:#E8E8E8;'> mail.SMTP <a href=' /mail/smtp.py#L773'>validateFrom</a>(helo,origin)</tt>	Validate the address from which the message originates.
<tt style='background-color:#E8E8E8;'> mail.SMTP <a href=' /mail/smtp.py#L838'>validateTo</a>(user)</tt>	Validate the address for which the message is destined.
<tt style='background-color:#E8E8E8;'> mail.SMTPClient <a href=' /mail/smtp.py#L950'>connectionLost</a>(reason)</tt>	We are no longer connected.
<tt style='background-color:#E8E8E8;'> mail.SMTPClient <a href=' /mail/smtp.py#L1091'>transformChunk</a>(chunk)</tt>	Perform the necessary local to network newline conversion and escape leading periods.
<tt style='background-color:#E8E8E8;'> mail.SMTPClient <a href=' /mail/smtp.py#L1113'>getMailFrom</a>()</tt>	Return the email address the mail is from.
<tt style='background-color:#E8E8E8;'> mail.SMTPClient <a href=' /mail/smtp.py#L1120'>getMailTo</a>()</tt>	Return a list of emails to send to.
<tt style='background-color:#E8E8E8;'> mail.SMTPClient <a href=' /mail/smtp.py#L1127'>getMailData</a>()</tt>	Return file-like object containing data of message to be sent.
<tt style='background-color:#E8E8E8;'> mail.SMTPClient <a href=' /mail/smtp.py#L1136'>sendError</a>(exc)</tt>	If an error occurs before a mail message is sent senderror will be called.
<tt style='background-color:#E8E8E8;'> mail.SMTPClient <a href=' /mail/smtp.py#L1153'>sentMail</a>(code,resp,numOk,addresses)</tt>	Called when an attempt to send an email is completed.
<tt style='background-color:#E8E8E8;'> mail.ESMTPClient <a href=' /mail/smtp.py#L1240'>esmtpEHLORequired</a>(code,resp)</tt>	Fail because authentication is required but the server does not support esmtp which is required for authentication.
<tt style='background-color:#E8E8E8;'> mail.ESMTPClient <a href=' /mail/smtp.py#L1257'>esmtpAUTHRequired</a>(code,resp)</tt>	Fail because authentication is required but the server does not support any schemes we support.
<tt style='background-color:#E8E8E8;'> mail.ESMTPClient <a href=' /mail/smtp.py#L1281'>esmtpTLSRequired</a>(code,resp)</tt>	Fail because tls is required and the server does not support it.
<tt style='background-color:#E8E8E8;'> mail.ESMTPClient <a href=' /mail/smtp.py#L1297'>esmtpTLSFailed</a>(code,resp)</tt>	Fail because the tls handshake wasn't able to be completed.
<tt style='background-color:#E8E8E8;'> mail.ESMTPClient <a href=' /mail/smtp.py#L1313'>esmtpAUTHDeclined</a>(code,resp)</tt>	Fail because the authentication was rejected.
<tt style='background-color:#E8E8E8;'> mail.ESMTPClient <a href=' /mail/smtp.py#L1328'>esmtpAUTHMalformedChallenge</a>(code,resp)</tt>	Fail because the server sent a malformed authentication challenge.
<tt style='background-color:#E8E8E8;'> mail.ESMTPClient <a href=' /mail/smtp.py#L1345'>esmtpAUTHServerError</a>(code,resp)</tt>	Fail because of some other authentication error.
<tt style='background-color:#E8E8E8;'> mail.ESMTPClient <a href=' /mail/smtp.py#L1360'>registerAuthenticator</a>(auth)</tt>	Registers an authenticator with the esmtpclient the esmtpclient will.
<tt style='background-color:#E8E8E8;'> mail.ESMTPClient <a href=' /mail/smtp.py#L1375'>connectionMade</a>()</tt>	Called when a connection has been made and triggers sending an c{ehlo} to the server.
<tt style='background-color:#E8E8E8;'> mail.ESMTPClient <a href=' /mail/smtp.py#L1385'>esmtpState_ehlo</a>(code,resp)</tt>	Send an c{ehlo} to the server.
<tt style='background-color:#E8E8E8;'> mail.ESMTPClient <a href=' /mail/smtp.py#L1418'>esmtpState_serverConfig</a>(code,resp)</tt>	Handle a positive response to the i{ehlo} command by parsing the capabilities in the server's response and then taking the most.
<tt style='background-color:#E8E8E8;'> mail.ESMTPClient <a href=' /mail/smtp.py#L1435'>tryTLS</a>(code,resp,items)</tt>	Take a necessary step towards being able to begin a mail transaction.
<tt style='background-color:#E8E8E8;'> mail.ESMTPClient <a href=' /mail/smtp.py#L1487'>esmtpState_starttls</a>(code,resp)</tt>	Handle a positive response to the i{starttls} command by starting a new tls session on c{self.
<tt style='background-color:#E8E8E8;'> mail.ESMTPClient <a href=' /mail/smtp.py#L1575'>smtpState_maybeAuthenticated</a>(code,resp)</tt>	Called to handle the next message from the server after sending a response to a sasl challenge.
<tt style='background-color:#E8E8E8;'> mail.ESMTP <a href=' /mail/smtp.py#L1617'>extensions</a>()</tt>	Smtp service extensions @return the smtp service extensions that are supported.
<tt style='background-color:#E8E8E8;'> mail.ESMTP <a href=' /mail/smtp.py#L1702'>_cbAuthenticated</a>(loginInfo)</tt>	Save the state resulting from a successful cred login and mark this connection as authenticated.
<tt style='background-color:#E8E8E8;'> mail.ESMTP <a href=' /mail/smtp.py#L1712'>_ebAuthenticated</a>(reason)</tt>	Handle cred login errors by translating them to the smtp authenticate failed.
<tt style='background-color:#E8E8E8;'> mail.ESMTP <a href=' /mail/smtp.py#L1730'>state_AUTH</a>(response)</tt>	Handle one step of challenge/response authentication.
<tt style='background-color:#E8E8E8;'> mail.SMTPSenderFactory <a href=' /mail/smtp.py#L1866'>__init__</a>(fromEmail,toEmail,file,deferred)</tt>	@param fromemail the rfc 2821 address from which to send this message.
<tt style='background-color:#E8E8E8;'> mail.SMTPSenderFactory <a href=' /mail/smtp.py#L1955'>_removeProtocol</a>(result)</tt>	Remove the protocol created in c{buildprotocol}.
<tt style='background-color:#E8E8E8;'> mail.ESMTPSenderFactory <a href=' /mail/smtp.py#L2069'>buildProtocol</a>(addr)</tt>	Build an l{esmtpsender} protocol configured with c{helofallback}, c{requireauthentication}, and c{requiretransportsecurity} as specified.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/smtp.py#L2092'>sendmail</a>(smtphost,from_addr,to_addrs,msg)</tt>	Send an email.
<tt style='background-color:#E8E8E8;'> mail. <a href=' /mail/smtp.py#L2201'>xtext_decode</a>(s,errors)</tt>	Decode the xtext-encoded string c{s}.
<tt style='background-color:#E8E8E8;'> runner.SimpleConfFile <a href=' /runner/inetdconf.py#L66'>parseFile</a>(file)</tt>	Parse a configuration file if file is none and self.
<tt style='background-color:#E8E8E8;'> runner.InetdConf <a href=' /runner/inetdconf.py#L162'>parseFields</a>(serviceName,socketType,protocol,wait)</tt>	Parse an inetd conf file.
<tt style='background-color:#E8E8E8;'> runner.ProcessMonitor <a href=' /runner/procmon.py#L125'>addProcess</a>(name,args,uid,gid)</tt>	Add a new monitored process and start it immediately if the l{processmonitor} service is running.
<tt style='background-color:#E8E8E8;'> runner.ProcessMonitor <a href=' /runner/procmon.py#L158'>removeProcess</a>(name)</tt>	Stop the named process and remove it from the list of monitored processes.
<tt style='background-color:#E8E8E8;'> runner.ProcessMonitor <a href=' /runner/procmon.py#L170'>startService</a>()</tt>	Start all monitored processes.
<tt style='background-color:#E8E8E8;'> runner.ProcessMonitor <a href=' /runner/procmon.py#L179'>stopService</a>()</tt>	Stop all monitored processes and cancel all scheduled process restarts.
<tt style='background-color:#E8E8E8;'> runner.ProcessMonitor <a href=' /runner/procmon.py#L194'>connectionLost</a>(name)</tt>	Called when a monitored processes exits if.
<tt style='background-color:#E8E8E8;'> runner.ProcessMonitor <a href=' /runner/procmon.py#L237'>startProcess</a>(name)</tt>	@param name the name of the process to be started.
<tt style='background-color:#E8E8E8;'> runner.ProcessMonitor <a href=' /runner/procmon.py#L257'>_forceStopProcess</a>(proc)</tt>	@param proc an l{iprocesstransport} provider.
<tt style='background-color:#E8E8E8;'> runner.ProcessMonitor <a href=' /runner/procmon.py#L267'>stopProcess</a>(name)</tt>	@param name the name of the process to be stopped.
<tt style='background-color:#E8E8E8;'> runner.ProcessMonitor <a href=' /runner/procmon.py#L287'>restartAll</a>()</tt>	Restart all processes this is useful for third party management.
<tt style='background-color:#E8E8E8;'> runner.Options <a href=' /runner/procmontap.py#L48'>parseArgs</a>()</tt>	Grab the command line that is going to be started and monitored.
<tt style='background-color:#E8E8E8;'> runner.Options <a href=' /runner/procmontap.py#L55'>postOptions</a>()</tt>	Check for dependencies.
<tt style='background-color:#E8E8E8;'> conch.RecvLine <a href=' /conch/recvline.py#L200'>drawInputLine</a>()</tt>	Write a line containing the current input prompt and the current line buffer at the current cursor position.
<tt style='background-color:#E8E8E8;'> conch.ITelnetProtocol <a href=' /conch/telnet.py#L159'>unhandledCommand</a>(command,argument)</tt>	A command was received but not understood.
<tt style='background-color:#E8E8E8;'> conch.ITelnetProtocol <a href=' /conch/telnet.py#L171'>unhandledSubnegotiation</a>(command,data)</tt>	A subnegotiation command was received but not understood.
<tt style='background-color:#E8E8E8;'> conch.ITelnetProtocol <a href=' /conch/telnet.py#L184'>enableLocal</a>(option)</tt>	Enable the given option locally.
<tt style='background-color:#E8E8E8;'> conch.ITelnetProtocol <a href=' /conch/telnet.py#L198'>enableRemote</a>(option)</tt>	Indicate whether the peer should be allowed to enable this option.
<tt style='background-color:#E8E8E8;'> conch.ITelnetProtocol <a href=' /conch/telnet.py#L210'>disableLocal</a>(option)</tt>	Disable the given option locally.
<tt style='background-color:#E8E8E8;'> conch.ITelnetProtocol <a href=' /conch/telnet.py#L222'>disableRemote</a>(option)</tt>	Indicate that the peer has disabled this option.
<tt style='background-color:#E8E8E8;'> conch.ITelnetTransport <a href=' /conch/telnet.py#L233'>do</a>(option)</tt>	Indicate a desire for the peer to begin performing the given option.
<tt style='background-color:#E8E8E8;'> conch.ITelnetTransport <a href=' /conch/telnet.py#L250'>dont</a>(option)</tt>	Indicate a desire for the peer to cease performing the given option.
<tt style='background-color:#E8E8E8;'> conch.ITelnetTransport <a href=' /conch/telnet.py#L266'>will</a>(option)</tt>	Indicate our willingness to begin performing this option locally.
<tt style='background-color:#E8E8E8;'> conch.ITelnetTransport <a href=' /conch/telnet.py#L283'>wont</a>(option)</tt>	Indicate that we will stop performing the given option.
<tt style='background-color:#E8E8E8;'> conch.ITelnetTransport <a href=' /conch/telnet.py#L299'>requestNegotiation</a>(about,data)</tt>	Send a subnegotiation request.
<tt style='background-color:#E8E8E8;'> conch.Telnet <a href=' /conch/telnet.py#L486'>will</a>(option)</tt>	Indicate our willingness to enable an option.
<tt style='background-color:#E8E8E8;'> conch.Telnet <a href=' /conch/telnet.py#L502'>wont</a>(option)</tt>	Indicate we are not willing to enable an option.
<tt style='background-color:#E8E8E8;'> conch.Telnet <a href=' /conch/telnet.py#L544'>requestNegotiation</a>(about,data)</tt>	Send a negotiation message for the option c{about} with c{data} as the payload.
<tt style='background-color:#E8E8E8;'> conch.Telnet <a href=' /conch/telnet.py#L651'>applicationDataReceived</a>(data)</tt>	Called with application-level data.
<tt style='background-color:#E8E8E8;'> conch.Telnet <a href=' /conch/telnet.py#L656'>unhandledCommand</a>(command,argument)</tt>	Called for commands for which no handler is installed.
<tt style='background-color:#E8E8E8;'> conch.Telnet <a href=' /conch/telnet.py#L670'>unhandledSubnegotiation</a>(command,data)</tt>	Called for subnegotiations for which no handler is installed.
<tt style='background-color:#E8E8E8;'> conch.Telnet <a href=' /conch/telnet.py#L843'>enableLocal</a>(option)</tt>	Reject all attempts to enable options.
<tt style='background-color:#E8E8E8;'> conch.Telnet <a href=' /conch/telnet.py#L850'>enableRemote</a>(option)</tt>	Reject all attempts to enable options.
<tt style='background-color:#E8E8E8;'> conch.Telnet <a href=' /conch/telnet.py#L857'>disableLocal</a>(option)</tt>	Signal a programming error by raising an exception.
<tt style='background-color:#E8E8E8;'> conch.Telnet <a href=' /conch/telnet.py#L872'>disableRemote</a>(option)</tt>	Signal a programming error by raising an exception.
<tt style='background-color:#E8E8E8;'> conch. <a href=' /conch/checkers.py#L46'>verifyCryptedPassword</a>(crypted,pw)</tt>	Check that the password when crypted matches the stored crypted password.
<tt style='background-color:#E8E8E8;'> conch. <a href=' /conch/checkers.py#L61'>_pwdGetByName</a>(username)</tt>	Look up a user in the /etc/passwd database using the pwd module if the.
<tt style='background-color:#E8E8E8;'> conch. <a href=' /conch/checkers.py#L76'>_shadowGetByName</a>(username)</tt>	Look up a user in the /etc/shadow database using the spwd module if it is.
<tt style='background-color:#E8E8E8;'> conch.SSHPublicKeyDatabase <a href=' /conch/checkers.py#L156'>_cbRequestAvatarId</a>(validKey,credentials)</tt>	Check whether the credentials themselves are valid now that we know if the key matches the user.
<tt style='background-color:#E8E8E8;'> conch.SSHPublicKeyDatabase <a href=' /conch/checkers.py#L192'>getAuthorizedKeysFiles</a>(credentials)</tt>	Return a list of l{filepath} instances for i{authorized_keys} files which might contain information about authorized keys for the given.
<tt style='background-color:#E8E8E8;'> conch.SSHPublicKeyDatabase <a href=' /conch/checkers.py#L214'>checkKey</a>(credentials)</tt>	Retrieve files containing authorized keys and check against user credentials.
<tt style='background-color:#E8E8E8;'> conch.SSHProtocolChecker <a href=' /conch/checkers.py#L281'>requestAvatarId</a>(credentials)</tt>	Part of the l{icredentialschecker} interface called by a portal with.
<tt style='background-color:#E8E8E8;'> conch.SSHProtocolChecker <a href=' /conch/checkers.py#L303'>_cbGoodAuthentication</a>(avatarId,credentials)</tt>	Called if a checker has verified the credentials we call our.
<tt style='background-color:#E8E8E8;'> conch.SSHProtocolChecker <a href=' /conch/checkers.py#L320'>areDone</a>(avatarId)</tt>	Override to determine if the authentication is finished for a given avatarid.
<tt style='background-color:#E8E8E8;'> conch.IAuthorizedKeysDB <a href=' /conch/checkers.py#L348'>getAuthorizedKeys</a>(avatarId)</tt>	Gets an iterable of authorized keys that are valid for the given c{avatarid}.
<tt style='background-color:#E8E8E8;'> conch. <a href=' /conch/checkers.py#L362'>readAuthorizedKeyFile</a>(fileobj,parseKey)</tt>	Reads keys from an authorized keys file any non-comment line that cannot.
<tt style='background-color:#E8E8E8;'> conch. <a href=' /conch/checkers.py#L393'>_keysFromFilepaths</a>(filepaths,parseKey)</tt>	Helper function that turns an iterable of filepaths into a generator of keys.
<tt style='background-color:#E8E8E8;'> conch.InMemorySSHKeyDB <a href=' /conch/checkers.py#L430'>__init__</a>(mapping)</tt>	Initializes a new l{inmemorysshkeydb}.
<tt style='background-color:#E8E8E8;'> conch.UNIXAuthorizedKeysFiles <a href=' /conch/checkers.py#L457'>__init__</a>(userdb,parseKey)</tt>	Initializes a new l{unixauthorizedkeysfiles}.
<tt style='background-color:#E8E8E8;'> conch.SSHPublicKeyChecker <a href=' /conch/checkers.py#L502'>__init__</a>(keydb)</tt>	Initializes a l{sshpublickeychecker}.
<tt style='background-color:#E8E8E8;'> conch.SSHPublicKeyChecker <a href=' /conch/checkers.py#L519'>_sanityCheckKey</a>(credentials)</tt>	Checks whether the provided credentials are a valid ssh key with a signature does not actually verify the signature.
<tt style='background-color:#E8E8E8;'> conch.SSHPublicKeyChecker <a href=' /conch/checkers.py#L542'>_checkKey</a>(pubKey,credentials)</tt>	Checks the public key against all authorized keys if any for the user.
<tt style='background-color:#E8E8E8;'> conch.SSHPublicKeyChecker <a href=' /conch/checkers.py#L567'>_verifyKey</a>(pubKey,credentials)</tt>	Checks whether the credentials themselves are valid now that we know if the key matches the user.
<tt style='background-color:#E8E8E8;'> conch._ISSHConnectionCreator <a href=' /conch/endpoints.py#L50'>secureConnection</a>()</tt>	Return a new connected secured but not yet authenticated instance of l{twisted.
<tt style='background-color:#E8E8E8;'> conch._ISSHConnectionCreator <a href=' /conch/endpoints.py#L58'>cleanupConnection</a>(connection,immediate)</tt>	Perform cleanup necessary for a connection object previously returned from this creator's c{secureconnection} method.
<tt style='background-color:#E8E8E8;'> conch.SSHCommandAddress <a href=' /conch/endpoints.py#L86'>__init__</a>(server,username,command)</tt>	@param server the address of the ssh server on which the command is running.
<tt style='background-color:#E8E8E8;'> conch._CommandChannel <a href=' /conch/endpoints.py#L120'>__init__</a>(creator,command,protocolFactory,commandConnected)</tt>	@param creator the l{_isshconnectioncreator} provider which was used to get the connection which this channel exists on.
<tt style='background-color:#E8E8E8;'> conch._CommandChannel <a href=' /conch/endpoints.py#L145'>openFailed</a>(reason)</tt>	When the request to open a new channel to run this command in fails fire the c{commandconnected} deferred with a failure indicating that.
<tt style='background-color:#E8E8E8;'> conch._CommandChannel <a href=' /conch/endpoints.py#L153'>channelOpen</a>(ignored)</tt>	When the request to open a new channel to run this command in succeeds issue an c{"exec"} request to run the command.
<tt style='background-color:#E8E8E8;'> conch._CommandChannel <a href=' /conch/endpoints.py#L163'>_execFailure</a>(reason)</tt>	When the request to execute the command in this channel fails fire the c{commandconnected} deferred with a failure indicating this.
<tt style='background-color:#E8E8E8;'> conch._CommandChannel <a href=' /conch/endpoints.py#L174'>_execSuccess</a>(ignored)</tt>	When the request to execute the command in this channel succeeds use c{protocolfactory} to build a protocol to handle the command's input and.
<tt style='background-color:#E8E8E8;'> conch._CommandChannel <a href=' /conch/endpoints.py#L195'>dataReceived</a>(data)</tt>	When the command's stdout data arrives over the channel deliver it to the protocol instance.
<tt style='background-color:#E8E8E8;'> conch._CommandChannel <a href=' /conch/endpoints.py#L206'>request_exit_status</a>(data)</tt>	When the server sends the command's exit status record it for later delivery to the protocol.
<tt style='background-color:#E8E8E8;'> conch._CommandChannel <a href=' /conch/endpoints.py#L220'>request_exit_signal</a>(data)</tt>	When the server sends the command's exit status record it for later delivery to the protocol.
<tt style='background-color:#E8E8E8;'> conch._CommandChannel <a href=' /conch/endpoints.py#L233'>closed</a>()</tt>	When the channel closes deliver disconnection notification to the protocol.
<tt style='background-color:#E8E8E8;'> conch._ConnectionReady <a href=' /conch/endpoints.py#L253'>__init__</a>(ready)</tt>	@param ready a l{deferred} which should be fired when i{servicestarted} happens.
<tt style='background-color:#E8E8E8;'> conch._ConnectionReady <a href=' /conch/endpoints.py#L262'>serviceStarted</a>()</tt>	When the ssh i{connection} i{service} this object represents is ready to be used fire the c{connectionready} l{deferred} to publish that event.
<tt style='background-color:#E8E8E8;'> conch._UserAuth <a href=' /conch/endpoints.py#L287'>getPublicKey</a>()</tt>	Retrieve the next public key object to offer to the server possibly delegating to an authentication agent if there is one.
<tt style='background-color:#E8E8E8;'> conch._UserAuth <a href=' /conch/endpoints.py#L307'>signData</a>(publicKey,signData)</tt>	Extend the base signing behavior by using an ssh agent to sign the data if one is available.
<tt style='background-color:#E8E8E8;'> conch._UserAuth <a href=' /conch/endpoints.py#L321'>getPrivateKey</a>()</tt>	Get the private part of a key pair to use for authentication the key.
<tt style='background-color:#E8E8E8;'> conch._UserAuth <a href=' /conch/endpoints.py#L333'>getPassword</a>()</tt>	Get the password to use for authentication.
<tt style='background-color:#E8E8E8;'> conch._UserAuth <a href=' /conch/endpoints.py#L345'>ssh_USERAUTH_SUCCESS</a>(packet)</tt>	Handle user authentication success in the normal way but also make a note of the state change on the l{_commandtransport}.
<tt style='background-color:#E8E8E8;'> conch._UserAuth <a href=' /conch/endpoints.py#L354'>connectToAgent</a>(endpoint)</tt>	Set up a connection to the authentication agent and trigger its initialization.
<tt style='background-color:#E8E8E8;'> conch._UserAuth <a href=' /conch/endpoints.py#L376'>loseAgentConnection</a>()</tt>	Disconnect the agent.
<tt style='background-color:#E8E8E8;'> conch._CommandTransport <a href=' /conch/endpoints.py#L407'>__init__</a>(creator)</tt>	@param creator the l{_newconnectionhelper} that created this connection.
<tt style='background-color:#E8E8E8;'> conch._CommandTransport <a href=' /conch/endpoints.py#L427'>verifyHostKey</a>(hostKey,fingerprint)</tt>	Ask the l{knownhostsfile} provider available on the factory which created this protocol this protocol to verify the given host key.
<tt style='background-color:#E8E8E8;'> conch._CommandTransport <a href=' /conch/endpoints.py#L445'>_saveHostKeyFailure</a>(reason)</tt>	When host key verification fails record the reason for the failure in order to fire a l{deferred} with it later.
<tt style='background-color:#E8E8E8;'> conch._CommandTransport <a href=' /conch/endpoints.py#L460'>connectionSecure</a>()</tt>	When the connection is secure start the authentication process.
<tt style='background-color:#E8E8E8;'> conch._CommandTransport <a href=' /conch/endpoints.py#L483'>connectionLost</a>(reason)</tt>	When the underlying connection to the ssh server is lost if there were any connection setup errors propagate them.
<tt style='background-color:#E8E8E8;'> conch.SSHCommandClientEndpoint <a href=' /conch/endpoints.py#L521'>__init__</a>(creator,command)</tt>	@param creator an l{_isshconnectioncreator} provider which will be used to set up the ssh connection which will be used to run a.
<tt style='background-color:#E8E8E8;'> conch.SSHCommandClientEndpoint <a href=' /conch/endpoints.py#L540'>newConnection</a>(cls,reactor,command,username)</tt>	Create and return a new endpoint which will try to create a new connection to an ssh server and run a command over it.
<tt style='background-color:#E8E8E8;'> conch.SSHCommandClientEndpoint <a href=' /conch/endpoints.py#L600'>existingConnection</a>(cls,connection,command)</tt>	Create and return a new endpoint which will try to open a new channel on an existing ssh connection and run a command over it.
<tt style='background-color:#E8E8E8;'> conch.SSHCommandClientEndpoint <a href=' /conch/endpoints.py#L622'>connect</a>(protocolFactory)</tt>	Set up an ssh connection use a channel from that connection to launch a command and hook the stdin and stdout of that command up as a.
<tt style='background-color:#E8E8E8;'> conch.SSHCommandClientEndpoint <a href=' /conch/endpoints.py#L642'>_executeCommand</a>(connection,protocolFactory)</tt>	Given a secured ssh connection try to execute a command in a new channel created on it and associate the result with a protocol from the.
<tt style='background-color:#E8E8E8;'> conch._ReadFile <a href=' /conch/endpoints.py#L677'>__init__</a>(contents)</tt>	@param contents l{bytes} which will be returned from every c{readline} call.
<tt style='background-color:#E8E8E8;'> conch._ReadFile <a href=' /conch/endpoints.py#L693'>readline</a>(count)</tt>	Always give back the byte string that this l{_readfile} was initialized with.
<tt style='background-color:#E8E8E8;'> conch._NewConnectionHelper <a href=' /conch/endpoints.py#L722'>__init__</a>(reactor,hostname,port,command)</tt>	@param tty the path of the tty device to use in case c{ui} is l{none}.
<tt style='background-color:#E8E8E8;'> conch._NewConnectionHelper <a href=' /conch/endpoints.py#L750'>_opener</a>()</tt>	Open the tty if possible otherwise give back a file-like object from which c{b"no"} can be read.
<tt style='background-color:#E8E8E8;'> conch._NewConnectionHelper <a href=' /conch/endpoints.py#L765'>_knownHosts</a>(cls)</tt>	@return a l{knownhostsfile} instance pointed at the user's personal i{known hosts} file.
<tt style='background-color:#E8E8E8;'> conch._NewConnectionHelper <a href=' /conch/endpoints.py#L776'>secureConnection</a>()</tt>	Create and return a new ssh connection which has been secured and on which authentication has already happened.
<tt style='background-color:#E8E8E8;'> conch._NewConnectionHelper <a href=' /conch/endpoints.py#L796'>cleanupConnection</a>(connection,immediate)</tt>	Clean up the connection by closing it the command running on the.
<tt style='background-color:#E8E8E8;'> conch._ExistingConnectionHelper <a href=' /conch/endpoints.py#L824'>__init__</a>(connection)</tt>	@param connection see l{sshcommandclientendpoint existingconnection}'s.
<tt style='background-color:#E8E8E8;'> conch._ExistingConnectionHelper <a href=' /conch/endpoints.py#L832'>secureConnection</a>()</tt>	@return a l{deferred} that fires synchronously with the already-established connection object.
<tt style='background-color:#E8E8E8;'> conch._ExistingConnectionHelper <a href=' /conch/endpoints.py#L841'>cleanupConnection</a>(connection,immediate)</tt>	Do not do any cleanup on the connection leave that responsibility to.
<tt style='background-color:#E8E8E8;'> conch.TerminalProcessProtocol <a href=' /conch/stdio.py#L36'>write</a>(data)</tt>	Write to the terminal.
<tt style='background-color:#E8E8E8;'> conch.TerminalProcessProtocol <a href=' /conch/stdio.py#L46'>outReceived</a>(data)</tt>	Receive data from the terminal.
<tt style='background-color:#E8E8E8;'> conch.TerminalProcessProtocol <a href=' /conch/stdio.py#L56'>errReceived</a>(data)</tt>	Report an error.
<tt style='background-color:#E8E8E8;'> conch.ConsoleManhole <a href=' /conch/stdio.py#L85'>connectionLost</a>(reason)</tt>	When the connection is lost there is nothing more to do stop the.
<tt style='background-color:#E8E8E8;'> conch.Options <a href=' /conch/tap.py#L50'>addChecker</a>(checker)</tt>	Add the checker specified if any checkers are added the default.
<tt style='background-color:#E8E8E8;'> conch. <a href=' /conch/manhole_tap.py#L89'>makeService</a>(config)</tt>	Construct a service for operating a ssh server.
<tt style='background-color:#E8E8E8;'> conch.IConchUser <a href=' /conch/interfaces.py#L18'>lookupChannel</a>(channelType,windowSize,maxPacket,data)</tt>	The other side requested a channel of some sort.
<tt style='background-color:#E8E8E8;'> conch.IConchUser <a href=' /conch/interfaces.py#L38'>lookupSubsystem</a>(subsystem,data)</tt>	The other side requested a subsystem.
<tt style='background-color:#E8E8E8;'> conch.IConchUser <a href=' /conch/interfaces.py#L47'>gotGlobalRequest</a>(requestType,data)</tt>	A global request was sent from the other side.
<tt style='background-color:#E8E8E8;'> conch.ISession <a href=' /conch/interfaces.py#L61'>getPty</a>(term,windowSize,modes)</tt>	Get a pseudo-terminal for use by a shell or command.
<tt style='background-color:#E8E8E8;'> conch.ISession <a href=' /conch/interfaces.py#L69'>openShell</a>(proto)</tt>	Open a shell and connect it to proto.
<tt style='background-color:#E8E8E8;'> conch.ISession <a href=' /conch/interfaces.py#L76'>execCommand</a>(proto,command)</tt>	Execute a command.
<tt style='background-color:#E8E8E8;'> conch.ISession <a href=' /conch/interfaces.py#L83'>windowChanged</a>(newWindowSize)</tt>	Called when the size of the remote screen has changed.
<tt style='background-color:#E8E8E8;'> conch.ISession <a href=' /conch/interfaces.py#L88'>eofReceived</a>()</tt>	Called when the other side has indicated no more data will be sent.
<tt style='background-color:#E8E8E8;'> conch.ISession <a href=' /conch/interfaces.py#L93'>closed</a>()</tt>	Called when the session is closed.
<tt style='background-color:#E8E8E8;'> conch.ISFTPServer <a href=' /conch/interfaces.py#L115'>gotVersion</a>(otherVersion,extData)</tt>	Called when the client sends their version info.
<tt style='background-color:#E8E8E8;'> conch.ISFTPServer <a href=' /conch/interfaces.py#L131'>openFile</a>(filename,flags,attrs)</tt>	Called when the clients asks to open a file.
<tt style='background-color:#E8E8E8;'> conch.ISFTPServer <a href=' /conch/interfaces.py#L162'>removeFile</a>(filename)</tt>	Remove the given file.
<tt style='background-color:#E8E8E8;'> conch.ISFTPServer <a href=' /conch/interfaces.py#L173'>renameFile</a>(oldpath,newpath)</tt>	Rename the given file.
<tt style='background-color:#E8E8E8;'> conch.ISFTPServer <a href=' /conch/interfaces.py#L186'>makeDirectory</a>(path,attrs)</tt>	Make a directory.
<tt style='background-color:#E8E8E8;'> conch.ISFTPServer <a href=' /conch/interfaces.py#L199'>removeDirectory</a>(path)</tt>	Remove a directory non-recursively it is an error to remove a directory that has files or directories in.
<tt style='background-color:#E8E8E8;'> conch.ISFTPServer <a href=' /conch/interfaces.py#L213'>openDirectory</a>(path)</tt>	Open a directory for scanning.
<tt style='background-color:#E8E8E8;'> conch.ISFTPServer <a href=' /conch/interfaces.py#L245'>getAttrs</a>(path,followLinks)</tt>	Return the attributes for the given path.
<tt style='background-color:#E8E8E8;'> conch.ISFTPServer <a href=' /conch/interfaces.py#L259'>setAttrs</a>(path,attrs)</tt>	Set the attributes for the path.
<tt style='background-color:#E8E8E8;'> conch.ISFTPServer <a href=' /conch/interfaces.py#L272'>readLink</a>(path)</tt>	Find the root of a set of symbolic links.
<tt style='background-color:#E8E8E8;'> conch.ISFTPServer <a href=' /conch/interfaces.py#L283'>makeLink</a>(linkPath,targetPath)</tt>	Create a symbolic link.
<tt style='background-color:#E8E8E8;'> conch.ISFTPServer <a href=' /conch/interfaces.py#L295'>realPath</a>(path)</tt>	Convert any path to an absolute path.
<tt style='background-color:#E8E8E8;'> conch.ISFTPServer <a href=' /conch/interfaces.py#L306'>extendedRequest</a>(extendedName,extendedData)</tt>	This is the extension mechanism for sftp the other side can send us.
<tt style='background-color:#E8E8E8;'> conch.IKnownHostEntry <a href=' /conch/interfaces.py#L332'>matchesKey</a>(key)</tt>	Return true if this entry matches the given key object false otherwise.
<tt style='background-color:#E8E8E8;'> conch.IKnownHostEntry <a href=' /conch/interfaces.py#L342'>matchesHost</a>(hostname)</tt>	Return true if this entry matches the given hostname false otherwise.
<tt style='background-color:#E8E8E8;'> conch.IKnownHostEntry <a href=' /conch/interfaces.py#L355'>toString</a>()</tt>	@return a serialized string representation of this entry suitable for inclusion in a known_hosts file.
<tt style='background-color:#E8E8E8;'> conch.ISFTPFile <a href=' /conch/interfaces.py#L372'>close</a>()</tt>	Close the file.
<tt style='background-color:#E8E8E8;'> conch.ISFTPFile <a href=' /conch/interfaces.py#L381'>readChunk</a>(offset,length)</tt>	Read from the file.
<tt style='background-color:#E8E8E8;'> conch.ISFTPFile <a href=' /conch/interfaces.py#L397'>writeChunk</a>(offset,data)</tt>	Write to the file.
<tt style='background-color:#E8E8E8;'> conch.ISFTPFile <a href=' /conch/interfaces.py#L409'>getAttrs</a>()</tt>	Return the attributes for the file.
<tt style='background-color:#E8E8E8;'> conch.ISFTPFile <a href=' /conch/interfaces.py#L418'>setAttrs</a>(attrs)</tt>	Set the attributes for the file.
<tt style='background-color:#E8E8E8;'> conch. <a href=' /conch/manhole_tap.py#L89'>makeService</a>(options)</tt>	Create a manhole server service.
<tt style='background-color:#E8E8E8;'> conch.BufferingMixin <a href=' /conch/mixin.py#L33'>write</a>(data)</tt>	Buffer some bytes to be written soon.
<tt style='background-color:#E8E8E8;'> conch.BufferingMixin <a href=' /conch/mixin.py#L49'>flush</a>()</tt>	Flush the buffer immediately.
<tt style='background-color:#E8E8E8;'> conch.SSHSessionForUnixConchUser <a href=' /conch/unix.py#L158'>__init__</a>(avatar,reactor)</tt>	Construct an c{sshsessionforunixconchuser}.
<tt style='background-color:#E8E8E8;'> conch.SSHSessionForUnixConchUser <a href=' /conch/unix.py#L330'>_writeHack</a>(data)</tt>	Hack to send ignore messages when we aren't echoing.
<tt style='background-color:#E8E8E8;'> conch.SFTPServerForUnixConchUser <a href=' /conch/unix.py#L348'>_setAttrs</a>(path,attrs)</tt>	Note this function assumes it runs as the logged-in user i.
<tt style='background-color:#E8E8E8;'> conch. <a href=' /conch/ls.py#L17'>lsLine</a>(name,s)</tt>	Build an 'ls' line for a file ('file' in its generic sense it can be of any type).
<tt style='background-color:#E8E8E8;'> conch.ManholeInterpreter <a href=' /conch/manhole.py#L76'>resetBuffer</a>()</tt>	Reset the input buffer.
<tt style='background-color:#E8E8E8;'> conch.ManholeInterpreter <a href=' /conch/manhole.py#L83'>push</a>(line)</tt>	Push a line to the interpreter.
<tt style='background-color:#E8E8E8;'> conch.Manhole <a href=' /conch/manhole.py#L198'>handle_INT</a>()</tt>	Handle ^c as an interrupt keystroke by resetting the current input variables to their initial state.
<tt style='background-color:#E8E8E8;'> conch.Manhole <a href=' /conch/manhole.py#L221'>handle_FF</a>()</tt>	Handle a 'form feed' byte - generally used to request a screen refresh/redraw.
<tt style='background-color:#E8E8E8;'> conch. <a href=' /conch/manhole.py#L315'>lastColorizedLine</a>(source)</tt>	Tokenize and colorize the given python source.
<tt style='background-color:#E8E8E8;'> conch.ColoredManhole <a href=' /conch/manhole.py#L345'>getSource</a>()</tt>	Return a string containing the currently entered source.
<tt style='background-color:#E8E8E8;'> conch.openssh_compat.OpenSSHFactory <a href=' /conch/openssh_compat/factory.py#L26'>getPublicKeys</a>()</tt>	Return the server public keys.
<tt style='background-color:#E8E8E8;'> conch.openssh_compat.OpenSSHFactory <a href=' /conch/openssh_compat/factory.py#L43'>getPrivateKeys</a>()</tt>	Return the server private keys.
<tt style='background-color:#E8E8E8;'> conch.ui.AnsiParser <a href=' /conch/ui/ansi.py#L72'>stripEscapes</a>(string)</tt>	Remove all ansi color escapes from the given string.
<tt style='background-color:#E8E8E8;'> conch.ui.AnsiParser <a href=' /conch/ui/ansi.py#L97'>parseString</a>(str)</tt>	Turn a string input into a list of l{colortext} elements.
<tt style='background-color:#E8E8E8;'> conch.ui.AnsiParser <a href=' /conch/ui/ansi.py#L158'>parseColor</a>(str)</tt>	Handle a single ansi color sequence.
<tt style='background-color:#E8E8E8;'> conch.scripts.ClientOptions <a href=' /conch/scripts/conch.py#L55'>opt_escape</a>(esc)</tt>	Set escape character none'' = disable.
<tt style='background-color:#E8E8E8;'> conch.scripts.ClientOptions <a href=' /conch/scripts/conch.py#L67'>opt_localforward</a>(f)</tt>	Forward local port to remote address lport host port.
<tt style='background-color:#E8E8E8;'> conch.scripts.ClientOptions <a href=' /conch/scripts/conch.py#L75'>opt_remoteforward</a>(f)</tt>	Forward remote port to local address rport host port.
<tt style='background-color:#E8E8E8;'> conch.scripts.StdioClient <a href=' /conch/scripts/cftp.py#L415'>cmd_PUT</a>(rest)</tt>	Do an upload request for a single local file or a globing expression.
<tt style='background-color:#E8E8E8;'> conch.scripts.StdioClient <a href=' /conch/scripts/cftp.py#L447'>_putSingleFile</a>(local,remote)</tt>	Perform an upload for a single file.
<tt style='background-color:#E8E8E8;'> conch.scripts.StdioClient <a href=' /conch/scripts/cftp.py#L463'>_putMultipleFiles</a>(files,remote)</tt>	Perform an upload for a list of local files.
<tt style='background-color:#E8E8E8;'> conch.scripts.StdioClient <a href=' /conch/scripts/cftp.py#L479'>_cbPutMultipleNext</a>(previousResult,files,remotePath,single)</tt>	Perform an upload for the next file in the list of local files.
<tt style='background-color:#E8E8E8;'> conch.scripts.StdioClient <a href=' /conch/scripts/cftp.py#L534'>_putRemoteFile</a>(localStream,remotePath)</tt>	Do an upload request.
<tt style='background-color:#E8E8E8;'> conch.scripts.StdioClient <a href=' /conch/scripts/cftp.py#L721'>cmd_EXEC</a>(rest)</tt>	Run c{rest} using the user's shell (or /bin/sh if they do not have one).
<tt style='background-color:#E8E8E8;'> conch.scripts.StdioClient <a href=' /conch/scripts/cftp.py#L811'>_printProgressBar</a>(f,startTime)</tt>	Update a console progress bar on this l{stdioclient}'s transport based on the difference between the start time of the operation and the.
<tt style='background-color:#E8E8E8;'> conch.scripts.StdioClient <a href=' /conch/scripts/cftp.py#L853'>_getFilename</a>(line)</tt>	Parse line received as command line input and return first filename together with the remaining line.
<tt style='background-color:#E8E8E8;'> conch.scripts. <a href=' /conch/scripts/ckeygen.py#L251'>_saveKey</a>(key,options)</tt>	Persist a ssh key on local filesystem.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L61'>serviceStopped</a>()</tt>	Called when the connection is stopped.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L70'>_cleanupGlobalDeferreds</a>()</tt>	All pending requests that have returned a deferred must be errbacked when this service is stopped otherwise they might be left uncalled and.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L82'>ssh_GLOBAL_REQUEST</a>(packet)</tt>	The other side has made a global request payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L103'>ssh_REQUEST_SUCCESS</a>(packet)</tt>	Our global request succeeded get the appropriate deferred and call.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L111'>ssh_REQUEST_FAILURE</a>(packet)</tt>	Our global request failed get the appropriate deferred and errback.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L120'>ssh_CHANNEL_OPEN</a>(packet)</tt>	The other side wants to get a channel payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L165'>ssh_CHANNEL_OPEN_CONFIRMATION</a>(packet)</tt>	The other side accepted our msg_channel_open request payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L188'>ssh_CHANNEL_OPEN_FAILURE</a>(packet)</tt>	The other side did not accept our msg_channel_open request payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L206'>ssh_CHANNEL_WINDOW_ADJUST</a>(packet)</tt>	The other side is adding bytes to its window payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L219'>ssh_CHANNEL_DATA</a>(packet)</tt>	The other side is sending us data payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L248'>ssh_CHANNEL_EXTENDED_DATA</a>(packet)</tt>	The other side is sending us exteneded data payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L275'>ssh_CHANNEL_EOF</a>(packet)</tt>	The other side is not sending any more data payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L286'>ssh_CHANNEL_CLOSE</a>(packet)</tt>	The other side is closing its end it does not want to receive any more data.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L302'>ssh_CHANNEL_REQUEST</a>(packet)</tt>	The other side is sending a request to a channel payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L325'>_cbChannelRequest</a>(result,localChannel)</tt>	Called back if the other side wanted a reply to a channel request if.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L344'>_ebChannelRequest</a>(result,localChannel)</tt>	Called if the other wisde wanted a reply to the channel requeset and the channel request failed.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L357'>ssh_CHANNEL_SUCCESS</a>(packet)</tt>	Our channel request to the other side succeeded payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L370'>ssh_CHANNEL_FAILURE</a>(packet)</tt>	Our channel request to the other side failed payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L387'>sendGlobalRequest</a>(request,data,wantReply)</tt>	Send a global request for this connection current this is only used.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L406'>openChannel</a>(channel,extra)</tt>	Open a new channel on this connection.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L423'>sendRequest</a>(channel,requestType,data,wantReply)</tt>	Send a request to a channel.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L445'>adjustWindow</a>(channel,bytesToAdd)</tt>	Tell the other side that we will receive more data this should not.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L462'>sendData</a>(channel,data)</tt>	Send data to a channel this should not normally be used instead use.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L476'>sendExtendedData</a>(channel,dataType,data)</tt>	Send extended data to a channel this should not normally be used.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L492'>sendEOF</a>(channel)</tt>	Send an eof end of file for a channel.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L504'>sendClose</a>(channel)</tt>	Close a channel.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L520'>getChannel</a>(channelType,windowSize,maxPacket,data)</tt>	The other side requested a channel of some sort.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L562'>gotGlobalRequest</a>(requestType,data)</tt>	We got a global request pretty much this is just used by the client.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnection <a href=' /conch/ssh/connection.py#L590'>channelClosed</a>(channel)</tt>	Called when a channel is closed.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnectForwardingChannel <a href=' /conch/ssh/forwarding.py#L103'>channelOpen</a>(specificData)</tt>	See l{channel sshchannel}.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnectForwardingChannel <a href=' /conch/ssh/forwarding.py#L114'>_setClient</a>(client)</tt>	Called when the connection was established to the forwarding destination.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnectForwardingChannel <a href=' /conch/ssh/forwarding.py#L132'>_close</a>(reason)</tt>	Called when failed to connect to the forwarding destination.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnectForwardingChannel <a href=' /conch/ssh/forwarding.py#L143'>dataReceived</a>(data)</tt>	See l{channel sshchannel}.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHConnectForwardingChannel <a href=' /conch/ssh/forwarding.py#L153'>closed</a>()</tt>	See l{channel sshchannel}.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/forwarding.py#L191'>packOpen_direct_tcpip</a>(destination,source)</tt>	Pack the data suitable for sending in a channel_open packet.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/forwarding.py#L213'>unpackOpen_direct_tcpip</a>(data)</tt>	Unpack the data to a usable format.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/forwarding.py#L230'>packGlobal_tcpip_forward</a>(peer)</tt>	Pack the data for tcpip forwarding.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHFactory <a href=' /conch/ssh/factory.py#L33'>startFactory</a>()</tt>	Check for public and private keys.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHFactory <a href=' /conch/ssh/factory.py#L47'>buildProtocol</a>(addr)</tt>	Create an instance of the server side of the ssh protocol.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHFactory <a href=' /conch/ssh/factory.py#L69'>getPublicKeys</a>()</tt>	Called when the factory is started to get the public portions of the servers host keys.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHFactory <a href=' /conch/ssh/factory.py#L80'>getPrivateKeys</a>()</tt>	Called when the factory is started to get the private portions of the servers host keys.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHFactory <a href=' /conch/ssh/factory.py#L91'>getPrimes</a>()</tt>	Called when the factory is started to get diffie-hellman generators and primes to use.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHFactory <a href=' /conch/ssh/factory.py#L101'>getDHPrime</a>(bits)</tt>	Return a tuple of g p for a diffe-hellman process with p being as close to bits bits as possible.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHFactory <a href=' /conch/ssh/factory.py#L114'>getService</a>(transport,service)</tt>	Return a class to use as a service for the given transport.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/common.py#L36'>getNS</a>(s,count)</tt>	Get net string.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/common.py#L61'>getMP</a>(data,count)</tt>	Get multiple precision integer out of the string a multiple precision.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/common.py#L79'>_MPpow</a>(x,y,z)</tt>	Return the mp version of c{(x ** y) % z}.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/common.py#L87'>ffs</a>(c,s)</tt>	First from second.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHSessionProcessProtocol <a href=' /conch/ssh/session.py#L216'>outConnectionLost</a>()</tt>	Eof should only be sent when both stdout and stderr have been closed.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHSessionProcessProtocol <a href=' /conch/ssh/session.py#L235'>_getSignalName</a>(signum)</tt>	Get a signal name given a signal number.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHSessionProcessProtocol <a href=' /conch/ssh/session.py#L256'>processEnded</a>(reason)</tt>	When we are told the process ended try to notify the other side about how the process ended using the exit-signal or exit-status requests.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHSessionProcessProtocol <a href=' /conch/ssh/session.py#L283'>getHost</a>()</tt>	Return the host from my session's transport.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHSessionProcessProtocol <a href=' /conch/ssh/session.py#L290'>getPeer</a>()</tt>	Return the peer from my session's transport.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/session.py#L317'>parseRequest_pty_req</a>(data)</tt>	Parse the data from a pty-req request into usable data.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/session.py#L330'>packRequest_pty_req</a>(term,geometry,modes)</tt>	Pack a pty-req request so that it is suitable for sending.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/session.py#L345'>parseRequest_window_change</a>(data)</tt>	Parse the data from a window-change request into usuable data.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/session.py#L353'>packRequest_window_change</a>(geometry)</tt>	Pack a window-change request so that it is suitable for sending.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferServer <a href=' /conch/ssh/filetransfer.py#L447'>_sendStatus</a>(requestId,code,message,lang)</tt>	Helper method to send a fxp_status message.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferServer <a href=' /conch/ssh/filetransfer.py#L457'>connectionLost</a>(reason)</tt>	Clean all opened files and directories.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferClient <a href=' /conch/ssh/filetransfer.py#L472'>__init__</a>(extData)</tt>	@param extdata a dict of extended_name : extended_data items to be sent to the server.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferClient <a href=' /conch/ssh/filetransfer.py#L503'>openFile</a>(filename,flags,attrs)</tt>	Open a file.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferClient <a href=' /conch/ssh/filetransfer.py#L537'>removeFile</a>(filename)</tt>	Remove the given file.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferClient <a href=' /conch/ssh/filetransfer.py#L548'>renameFile</a>(oldpath,newpath)</tt>	Rename the given file.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferClient <a href=' /conch/ssh/filetransfer.py#L561'>makeDirectory</a>(path,attrs)</tt>	Make a directory.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferClient <a href=' /conch/ssh/filetransfer.py#L576'>removeDirectory</a>(path)</tt>	Remove a directory non-recursively it is an error to remove a directory that has files or directories in.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferClient <a href=' /conch/ssh/filetransfer.py#L590'>openDirectory</a>(path)</tt>	Open a directory for scanning.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferClient <a href=' /conch/ssh/filetransfer.py#L624'>getAttrs</a>(path,followLinks)</tt>	Return the attributes for the given path.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferClient <a href=' /conch/ssh/filetransfer.py#L641'>setAttrs</a>(path,attrs)</tt>	Set the attributes for the path.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferClient <a href=' /conch/ssh/filetransfer.py#L656'>readLink</a>(path)</tt>	Find the root of a set of symbolic links.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferClient <a href=' /conch/ssh/filetransfer.py#L669'>makeLink</a>(linkPath,targetPath)</tt>	Create a symbolic link.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferClient <a href=' /conch/ssh/filetransfer.py#L683'>realPath</a>(path)</tt>	Convert any path to an absolute path.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferClient <a href=' /conch/ssh/filetransfer.py#L702'>extendedRequest</a>(request,data)</tt>	Make an extended request of the server.
<tt style='background-color:#E8E8E8;'> conch.ssh.FileTransferClient <a href=' /conch/ssh/filetransfer.py#L783'>gotServerVersion</a>(serverVersion,extData)</tt>	Called when the client sends their version info.
<tt style='background-color:#E8E8E8;'> conch.ssh.SFTPError <a href=' /conch/ssh/filetransfer.py#L865'>message</a>()</tt>	A string received over the network that explains the error to a human.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L83'>__bytes__</a>()</tt>	Return a byte string representation of the channel.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L106'>channelOpen</a>(specificData)</tt>	Called when the channel is opened specificdata is any data that the.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L116'>openFailed</a>(reason)</tt>	Called when the open failed for some reason.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L126'>addWindowBytes</a>(data)</tt>	Called when bytes are added to the remote window by default it clears.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L148'>requestReceived</a>(requestType,data)</tt>	Called when a request is sent to this channel by default it delegates.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L167'>dataReceived</a>(data)</tt>	Called when we receive data.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L176'>extReceived</a>(dataType,data)</tt>	Called when we receive extended data usually standard error.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L186'>eofReceived</a>()</tt>	Called when the other side will send no more data.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L193'>closeReceived</a>()</tt>	Called when the other side has closed the channel.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L201'>closed</a>()</tt>	Called when the channel is closed this means that both our side and.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L209'>write</a>(data)</tt>	Write some data to the channel if there is not enough remote window.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L237'>writeExtended</a>(dataType,data)</tt>	Send extended data to this channel if there is not enough remote.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L269'>writeSequence</a>(data)</tt>	Part of the transport interface write a list of strings to the.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L279'>loseConnection</a>()</tt>	Close the channel if there is no buferred data otherwise note the.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L289'>getPeer</a>()</tt>	See l{itransport getpeer}.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L299'>getHost</a>()</tt>	See l{itransport gethost}.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L309'>stopWriting</a>()</tt>	Called when the remote buffer is full as a hint to stop writing.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHChannel <a href=' /conch/ssh/channel.py#L316'>startWriting</a>()</tt>	Called when the remote buffer has more room as a hint to continue writing.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/_kex.py#L164'>getKex</a>(kexAlgorithm)</tt>	Get a description of a named key exchange algorithm.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/_kex.py#L184'>isEllipticCurve</a>(kexAlgorithm)</tt>	Returns c{true} if c{kexalgorithm} is an elliptic curve.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/_kex.py#L199'>isFixedGroup</a>(kexAlgorithm)</tt>	Returns c{true} if c{kexalgorithm} has a fixed prime / generator group.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/_kex.py#L214'>getHashProcessor</a>(kexAlgorithm)</tt>	Get the hash algorithm callable to use in key exchange.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/_kex.py#L229'>getDHGeneratorAndPrime</a>(kexAlgorithm)</tt>	Get the generator and the prime to use in key exchange.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/_kex.py#L244'>getSupportedKeyExchanges</a>()</tt>	Get a list of supported key exchange algorithm names in order of preference.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/_cryptography_backports.py#L14'>intFromBytes</a>(data,byteorder,signed)</tt>	Convert an integer in packed form to a python l{int}.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/_cryptography_backports.py#L48'>intToBytes</a>(integer,length)</tt>	Convert a python l{int} to packed data.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthServer <a href=' /conch/ssh/userauth.py#L83'>serviceStarted</a>()</tt>	Called when the userauth service is started set up instance.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthServer <a href=' /conch/ssh/userauth.py#L110'>serviceStopped</a>()</tt>	Called when the userauth service is stopped cancel the login timeout.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthServer <a href=' /conch/ssh/userauth.py#L120'>timeoutAuthentication</a>()</tt>	Called when the user has timed out on authentication disconnect.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthServer <a href=' /conch/ssh/userauth.py#L131'>tryAuth</a>(kind,user,data)</tt>	Try to authenticate the user with the given method dispatches to a.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthServer <a href=' /conch/ssh/userauth.py#L164'>ssh_USERAUTH_REQUEST</a>(packet)</tt>	The client has requested authentication payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthServer <a href=' /conch/ssh/userauth.py#L191'>_cbFinishedAuth</a>(result)</tt>	The callback when user has successfully been authenticated for a.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthServer <a href=' /conch/ssh/userauth.py#L210'>_ebMaybeBadAuth</a>(reason)</tt>	An intermediate errback if the reason is.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthServer <a href=' /conch/ssh/userauth.py#L223'>_ebBadAuth</a>(reason)</tt>	The final errback in the authentication chain if the reason is.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthServer <a href=' /conch/ssh/userauth.py#L254'>auth_publickey</a>(packet)</tt>	Public key authentication payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthServer <a href=' /conch/ssh/userauth.py#L282'>_ebCheckKey</a>(reason,packet)</tt>	Called back if the user did not sent a signature if reason is.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthServer <a href=' /conch/ssh/userauth.py#L294'>auth_password</a>(packet)</tt>	Password authentication payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthServer <a href=' /conch/ssh/userauth.py#L307'>_ebPassword</a>(f)</tt>	If the password is invalid wait before sending the failure in order to delay brute-force password guessing.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L360'>askForAuth</a>(kind,extraData)</tt>	Send a msg_userauth_request.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L374'>tryAuth</a>(kind)</tt>	Dispatch to an authentication method.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L388'>_ebAuth</a>(ignored)</tt>	Generic callback for a failed authentication attempt respond by.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L396'>ssh_USERAUTH_SUCCESS</a>(packet)</tt>	We received a msg_userauth_success the server has accepted our.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L404'>ssh_USERAUTH_FAILURE</a>(packet)</tt>	We received a msg_userauth_failure payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L471'>ssh_USERAUTH_PK_OK</a>(packet)</tt>	This message number 60 can mean several different messages depending on the current authentication type.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L485'>ssh_USERAUTH_PK_OK_publickey</a>(packet)</tt>	This is msg_userauth_pk our public key is valid so we create a.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L503'>ssh_USERAUTH_PK_OK_password</a>(packet)</tt>	This is msg_userauth_passwd_changereq the password given has expired.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L517'>ssh_USERAUTH_PK_OK_keyboard_interactive</a>(packet)</tt>	This is msg_userauth_info_response the server has sent us the.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L537'>_cbSignedData</a>(signedData)</tt>	Called back out of self signdata with the signed data send the.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L550'>_setOldPass</a>(op)</tt>	Called back when we are choosing a new password simply store the old.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L561'>_setNewPass</a>(np)</tt>	Called back when we are choosing a new password get the old password.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L574'>_cbGenericAnswers</a>(responses)</tt>	Called back when we are finished answering keyboard-interactive questions.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L589'>auth_publickey</a>()</tt>	Try to authenticate with a public key ask the user for a public key.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L616'>auth_password</a>()</tt>	Try to authenticate with a password ask the user for a password.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L632'>auth_keyboard_interactive</a>()</tt>	Try to authenticate with keyboard-interactive authentication send.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L644'>_cbPassword</a>(password)</tt>	Called back when the user gives a password send the request to the.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L655'>signData</a>(publicKey,signData)</tt>	Sign the given data with the given public key.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L679'>_cbSignData</a>(privateKey,signData)</tt>	Called back when the private key is returned sign the data and.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L694'>getPublicKey</a>()</tt>	Return a public key for the user if no more public keys are.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L707'>getPrivateKey</a>()</tt>	Return a l{deferred} that will be called back with the private key object corresponding to the last public key from getpublickey().
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L718'>getPassword</a>(prompt)</tt>	Return a l{deferred} that will be called back with a password.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHUserAuthClient <a href=' /conch/ssh/userauth.py#L730'>getGenericAnswers</a>(name,instruction,prompts)</tt>	Returns a l{deferred} with the responses to the promopts.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHService <a href=' /conch/ssh/service.py#L20'>serviceStarted</a>()</tt>	Called when the service is active on the transport.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHService <a href=' /conch/ssh/service.py#L25'>serviceStopped</a>()</tt>	Called when the service is stopped either by the connection ending.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHService <a href=' /conch/ssh/service.py#L35'>packetReceived</a>(messageNum,packet)</tt>	Called when we receive a packet on the transport.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHAgentClient <a href=' /conch/ssh/agent.py#L63'>requestIdentities</a>()</tt>	@return a l{deferred} which will fire with a list of all keys found in the ssh agent.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHAgentClient <a href=' /conch/ssh/agent.py#L74'>_cbRequestIdentities</a>(data)</tt>	Unpack a collection of identities into a list of tuples comprised of public key blobs and comments.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHAgentClient <a href=' /conch/ssh/agent.py#L91'>addIdentity</a>(blob,comment)</tt>	Add a private key blob to the agent's collection of keys.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHAgentClient <a href=' /conch/ssh/agent.py#L100'>signData</a>(blob,data)</tt>	Request that the agent sign the given c{data} with the private key which corresponds to the public key given by c{blob}.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHAgentClient <a href=' /conch/ssh/agent.py#L124'>removeIdentity</a>(blob)</tt>	Remove the private key corresponding to the public key in blob from the running agent.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHAgentClient <a href=' /conch/ssh/agent.py#L133'>removeAllIdentities</a>()</tt>	Remove all keys from the running agent.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHAgentServer <a href=' /conch/ssh/agent.py#L178'>agentc_REQUEST_IDENTITIES</a>(data)</tt>	Return all of the identities that have been added to the server.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHAgentServer <a href=' /conch/ssh/agent.py#L193'>agentc_SIGN_REQUEST</a>(data)</tt>	Data is a structure with a reference to an already added key object and some data that the clients wants signed with that key.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHAgentServer <a href=' /conch/ssh/agent.py#L207'>agentc_ADD_IDENTITY</a>(data)</tt>	Adds a private key to the agent's collection of identities on.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHAgentServer <a href=' /conch/ssh/agent.py#L231'>agentc_REMOVE_IDENTITY</a>(data)</tt>	Remove a specific key from the agent's collection of identities.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHAgentServer <a href=' /conch/ssh/agent.py#L241'>agentc_REMOVE_ALL_IDENTITIES</a>(data)</tt>	Remove all keys from the agent's collection of identities.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHAgentServer <a href=' /conch/ssh/agent.py#L253'>agentc_REQUEST_RSA_IDENTITIES</a>(data)</tt>	V1 message for listing rsa1 keys superseded by agentc_request_identities which handles different key types.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHAgentServer <a href=' /conch/ssh/agent.py#L261'>agentc_REMOVE_RSA_IDENTITY</a>(data)</tt>	V1 message for removing rsa1 keys superseded by agentc_remove_identity which handles different key types.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHAgentServer <a href=' /conch/ssh/agent.py#L269'>agentc_REMOVE_ALL_RSA_IDENTITIES</a>(data)</tt>	V1 message for removing all rsa1 keys superseded by agentc_remove_all_identities which handles different key types.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/transport.py#L41'>_getRandomNumber</a>(random,bits)</tt>	Generate a random number in the range [0 2 ** bits).
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/transport.py#L63'>_generateX</a>(random,bits)</tt>	Generate a new value for the private key x.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHCiphers <a href=' /conch/ssh/transport.py#L169'>setKeys</a>(outIV,outKey,inIV,inKey)</tt>	Set up the ciphers and hashes using the given keys @param outiv the outgoing initialization vector.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHCiphers <a href=' /conch/ssh/transport.py#L192'>_getCipher</a>(cip,iv,key)</tt>	Creates an initialized cipher object.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHCiphers <a href=' /conch/ssh/transport.py#L213'>_getMAC</a>(mac,key)</tt>	Gets a 4-tuple representing the message authentication code.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHCiphers <a href=' /conch/ssh/transport.py#L248'>encrypt</a>(blocks)</tt>	Encrypt some data.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHCiphers <a href=' /conch/ssh/transport.py#L261'>decrypt</a>(blocks)</tt>	Decrypt some data.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHCiphers <a href=' /conch/ssh/transport.py#L274'>makeMAC</a>(seqid,data)</tt>	Create a message authentication code mac for the given packet using the outgoing mac values.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHCiphers <a href=' /conch/ssh/transport.py#L294'>verify</a>(seqid,data,mac)</tt>	Verify an incoming mac using the incoming mac values.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/transport.py#L318'>_getSupportedCiphers</a>()</tt>	Build a list of ciphers that are supported by the backend in use.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L519'>connectionLost</a>(reason)</tt>	When the underlying connection is closed stop the running service if any and log out the avatar if any.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L534'>connectionMade</a>()</tt>	Called when the connection is made to the other side we sent our.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L546'>sendKexInit</a>()</tt>	Send a i{kexinit} message to initiate key exchange or to respond to a key exchange initiated by the peer.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L580'>_allowedKeyExchangeMessageType</a>(messageType)</tt>	Determine if the given message type may be sent while key exchange is in progress.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L603'>sendPacket</a>(messageType,payload)</tt>	Sends a packet if it's been set up compress the data encrypt it.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L641'>getPacket</a>()</tt>	Try to return a decrypted authenticated and decompressed packet out of the buffer.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L702'>_unsupportedVersionReceived</a>(remoteVersion)</tt>	Called when an unsupported version of the ssh protocol is received from the remote endpoint.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L715'>dataReceived</a>(data)</tt>	First check for the version string (ssh-2 0-*) after that has been.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L746'>dispatchMessage</a>(messageNum,payload)</tt>	Send a received message to the appropriate method.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L774'>getPeer</a>()</tt>	Returns an l{sshtransportaddress} corresponding to the other peer side of this transport.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L786'>getHost</a>()</tt>	Returns an l{sshtransportaddress} corresponding to the this side of transport.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L806'>kexAlg</a>()</tt>	The key exchange algorithm name agreed between client and server.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L806'>kexAlg</a>(value)</tt>	Set the key exchange algorithm name.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L828'>ssh_KEXINIT</a>(packet)</tt>	Called when we receive a msg_kexinit message payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L909'>ssh_DISCONNECT</a>(packet)</tt>	Called when we receive a msg_disconnect message payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L927'>ssh_IGNORE</a>(packet)</tt>	Called when we receive a msg_ignore message no payload.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L937'>ssh_UNIMPLEMENTED</a>(packet)</tt>	Called when we receive a msg_unimplemented message payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L951'>ssh_DEBUG</a>(packet)</tt>	Called when we receive a msg_debug message payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L968'>setService</a>(service)</tt>	Set our service to service and start it running if we were.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L984'>sendDebug</a>(message,alwaysDisplay,language)</tt>	Send a debug message to the other side.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L1000'>sendIgnore</a>(message)</tt>	Send a message that will be ignored by the other side this is.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L1012'>sendUnimplemented</a>()</tt>	Send a message to the other side that the last packet was not understood.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L1021'>sendDisconnect</a>(reason,desc)</tt>	Send a disconnect message to the other side and then disconnect.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L1038'>_getKey</a>(c,sharedSecret,exchangeHash)</tt>	Get one of the keys for authentication/encryption.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L1061'>_keySetup</a>(sharedSecret,exchangeHash)</tt>	Set up the keys for the connection and sends msg_newkeys when finished.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L1091'>_newKeys</a>()</tt>	Called back by a subclass once a i{msg_newkeys} message has been received.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L1112'>isEncrypted</a>(direction)</tt>	Check if the connection is encrypted in the given direction.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L1132'>isVerified</a>(direction)</tt>	Check if the connection is verified/authentication in the given direction.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L1152'>loseConnection</a>()</tt>	Lose the connection to the other side sending a disconnect_connection_lost message.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L1163'>receiveError</a>(reasonCode,description)</tt>	Called when we receive a disconnect error message from the other side.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L1179'>receiveUnimplemented</a>(seqnum)</tt>	Called when we receive an unimplemented packet message from the other side.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHTransportBase <a href=' /conch/ssh/transport.py#L1190'>receiveDebug</a>(alwaysDisplay,message,lang)</tt>	Called when we receive a debug message from the other side.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHServerTransport <a href=' /conch/ssh/transport.py#L1228'>ssh_KEXINIT</a>(packet)</tt>	Called when we receive a msg_kexinit message for a description.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHServerTransport <a href=' /conch/ssh/transport.py#L1247'>_ssh_KEX_ECDH_INIT</a>(packet)</tt>	Called from l{ssh_kex_dh_gex_request_old} to handle elliptic curve key exchanges.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHServerTransport <a href=' /conch/ssh/transport.py#L1323'>_ssh_KEXDH_INIT</a>(packet)</tt>	Called to handle the beginning of a non-group key exchange.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHServerTransport <a href=' /conch/ssh/transport.py#L1364'>ssh_KEX_DH_GEX_REQUEST_OLD</a>(packet)</tt>	This represents different key exchange methods that share the same integer value.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHServerTransport <a href=' /conch/ssh/transport.py#L1401'>ssh_KEX_DH_GEX_REQUEST</a>(packet)</tt>	Called when we receive a msg_kex_dh_gex_request message payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHServerTransport <a href=' /conch/ssh/transport.py#L1427'>ssh_KEX_DH_GEX_INIT</a>(packet)</tt>	Called when we get a msg_kex_dh_gex_init message payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHServerTransport <a href=' /conch/ssh/transport.py#L1472'>ssh_NEWKEYS</a>(packet)</tt>	Called when we get a msg_newkeys message no payload.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHServerTransport <a href=' /conch/ssh/transport.py#L1488'>ssh_SERVICE_REQUEST</a>(packet)</tt>	Called when we get a msg_service_request message payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHClientTransport <a href=' /conch/ssh/transport.py#L1554'>connectionMade</a>()</tt>	Called when the connection is started with the server just sets.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHClientTransport <a href=' /conch/ssh/transport.py#L1563'>ssh_KEXINIT</a>(packet)</tt>	Called when we receive a msg_kexinit message for a description.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHClientTransport <a href=' /conch/ssh/transport.py#L1615'>_ssh_KEX_ECDH_REPLY</a>(packet)</tt>	Called to handle a reply to a ecdh exchange message(kex_ecdh_init).
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHClientTransport <a href=' /conch/ssh/transport.py#L1692'>_ssh_KEXDH_REPLY</a>(packet)</tt>	Called to handle a reply to a non-group key exchange message (kexdh_init).
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHClientTransport <a href=' /conch/ssh/transport.py#L1728'>ssh_KEX_DH_GEX_GROUP</a>(packet)</tt>	This handles different messages which share an integer value.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHClientTransport <a href=' /conch/ssh/transport.py#L1755'>_continueKEXDH_REPLY</a>(ignored,pubKey,f,signature)</tt>	The host key has been verified so we generate the keys.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHClientTransport <a href=' /conch/ssh/transport.py#L1788'>ssh_KEX_DH_GEX_REPLY</a>(packet)</tt>	Called when we receive a msg_kex_dh_gex_reply message payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHClientTransport <a href=' /conch/ssh/transport.py#L1815'>_continueGEX_REPLY</a>(ignored,pubKey,f,signature)</tt>	The host key has been verified so we generate the keys.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHClientTransport <a href=' /conch/ssh/transport.py#L1856'>_keySetup</a>(sharedSecret,exchangeHash)</tt>	See sshtransportbase _keysetup().
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHClientTransport <a href=' /conch/ssh/transport.py#L1865'>ssh_NEWKEYS</a>(packet)</tt>	Called when we receive a msg_newkeys message no payload.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHClientTransport <a href=' /conch/ssh/transport.py#L1885'>ssh_SERVICE_ACCEPT</a>(packet)</tt>	Called when we receive a msg_service_accept message payload :.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHClientTransport <a href=' /conch/ssh/transport.py#L1906'>requestService</a>(instance)</tt>	Request that a service be run over this transport.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHClientTransport <a href=' /conch/ssh/transport.py#L1919'>verifyHostKey</a>(hostKey,fingerprint)</tt>	Returns a deferred that gets a callback if it is a valid key or an errback if not.
<tt style='background-color:#E8E8E8;'> conch.ssh.SSHClientTransport <a href=' /conch/ssh/transport.py#L1935'>connectionSecure</a>()</tt>	Called when the encryption has been set up generally.
<tt style='background-color:#E8E8E8;'> conch.ssh._NullEncryptionContext <a href=' /conch/ssh/transport.py#L1948'>update</a>(data)</tt>	'encrypt' new data by doing nothing.
<tt style='background-color:#E8E8E8;'> conch.ssh._DummyCipher <a href=' /conch/ssh/transport.py#L1980'>encryptor</a>()</tt>	Construct a noop encryptor.
<tt style='background-color:#E8E8E8;'> conch.ssh._DummyCipher <a href=' /conch/ssh/transport.py#L1989'>decryptor</a>()</tt>	Construct a noop decryptor.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L122'>fromFile</a>(cls,filename,type,passphrase)</tt>	Load a key from a file.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L144'>fromString</a>(cls,data,type,passphrase)</tt>	Return a key object corresponding to the string data.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L186'>_fromString_BLOB</a>(cls,blob)</tt>	Return a public key object corresponding to this public key blob.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L245'>_fromString_PRIVATE_BLOB</a>(cls,blob)</tt>	Return a private key object corresponding to this private key blob.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L300'>_fromString_PUBLIC_OPENSSH</a>(cls,data)</tt>	Return a public key object corresponding to this openssh public key string.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L321'>_fromString_PRIVATE_OPENSSH</a>(cls,data,passphrase)</tt>	Return a private key object corresponding to this openssh private key string.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L459'>_fromString_PUBLIC_LSH</a>(cls,data)</tt>	Return a public key corresponding to this lsh public key string.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L490'>_fromString_PRIVATE_LSH</a>(cls,data)</tt>	Return a private key corresponding to this lsh private key string.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L526'>_fromString_AGENTV3</a>(cls,data)</tt>	Return a private key object corresponsing to the secure shell key agent v3 format.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L575'>_guessStringType</a>(cls,data)</tt>	Guess the type of key in data the types map to _fromstring_*.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L603'>_fromRSAComponents</a>(cls,n,e,d)</tt>	Build a key from rsa numerical components.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L648'>_fromDSAComponents</a>(cls,y,p,q)</tt>	Build a key from dsa numerical components.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L683'>_fromECComponents</a>(cls,x,y,curve)</tt>	Build a key from ec components.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L713'>__init__</a>(keyObject)</tt>	Initialize with a private or public c{cryptography.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L732'>__eq__</a>(other)</tt>	Return true if other represents an object with the same key.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L741'>__ne__</a>(other)</tt>	Return true if other represents anything other than this key.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L750'>__repr__</a>()</tt>	Return a pretty representation of this object.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L844'>keyObject</a>()</tt>	A c{crypto publickey} object similar to this key.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L885'>isPublic</a>()</tt>	Check if this instance is a public key.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L895'>public</a>()</tt>	Returns a version of this key containing only the public key data.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L906'>fingerprint</a>(format)</tt>	The fingerprint of a public key consists of the output of the message-digest algorithm in the specified format.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L946'>type</a>()</tt>	Return the type of the object we wrap currently this can only be.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L967'>sshType</a>()</tt>	Get the type of the object we wrap as defined in the ssh protocol defined in rfc 4253 section 6.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L983'>size</a>()</tt>	Return the size of the object we wrap.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L996'>data</a>()</tt>	Return the values of the public key as a dictionary.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L1055'>blob</a>()</tt>	Return the public key blob for this key the blob is the.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L1099'>privateBlob</a>()</tt>	Return the private key blob for this key the blob is the.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L1146'>toString</a>(type,extra)</tt>	Create a string representation of this key if the key is a private.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L1174'>_toString_OPENSSH</a>(extra)</tt>	Return a public or private openssh string see.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L1256'>_toString_LSH</a>()</tt>	Return a public or private lsh key see _fromstring_public_lsh and.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L1308'>_toString_AGENTV3</a>()</tt>	Return a private secure shell agent v3 key see.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L1325'>sign</a>(data)</tt>	Sign some data with this key.
<tt style='background-color:#E8E8E8;'> conch.ssh.Key <a href=' /conch/ssh/keys.py#L1394'>verify</a>(signature,data)</tt>	Verify a signature using this key.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/keys.py#L1466'>objectType</a>(obj)</tt>	Deprecated return the ssh key type corresponding to a.
<tt style='background-color:#E8E8E8;'> conch.ssh. <a href=' /conch/ssh/keys.py#L1489'>_getPersistentRSAKey</a>(location,keySize)</tt>	This function returns a persistent l{key}.
<tt style='background-color:#E8E8E8;'> conch.client. <a href=' /conch/client/knownhosts.py#L31'>_b64encode</a>(s)</tt>	Encode a binary string as base64 with no trailing newline.
<tt style='background-color:#E8E8E8;'> conch.client. <a href=' /conch/client/knownhosts.py#L45'>_extractCommon</a>(string)</tt>	Extract common elements of base64 keys from an entry in a hosts file.
<tt style='background-color:#E8E8E8;'> conch.client._BaseEntry <a href=' /conch/client/knownhosts.py#L95'>matchesKey</a>(keyObject)</tt>	Check to see if this entry matches a given key object.
<tt style='background-color:#E8E8E8;'> conch.client.PlainEntry <a href=' /conch/client/knownhosts.py#L125'>fromString</a>(cls,string)</tt>	Parse a plain-text entry in a known_hosts file and return a corresponding l{plainentry}.
<tt style='background-color:#E8E8E8;'> conch.client.PlainEntry <a href=' /conch/client/knownhosts.py#L154'>matchesHost</a>(hostname)</tt>	Check to see if this entry matches a given hostname.
<tt style='background-color:#E8E8E8;'> conch.client.PlainEntry <a href=' /conch/client/knownhosts.py#L171'>toString</a>()</tt>	Implement l{iknownhostentry tostring} by recording the comma-separated.
<tt style='background-color:#E8E8E8;'> conch.client.UnparsedEntry <a href=' /conch/client/knownhosts.py#L196'>__init__</a>(string)</tt>	Create an unparsed entry from a line in a known_hosts file which cannot otherwise be parsed.
<tt style='background-color:#E8E8E8;'> conch.client.UnparsedEntry <a href=' /conch/client/knownhosts.py#L204'>matchesHost</a>(hostname)</tt>	Always returns false.
<tt style='background-color:#E8E8E8;'> conch.client.UnparsedEntry <a href=' /conch/client/knownhosts.py#L211'>matchesKey</a>(key)</tt>	Always returns false.
<tt style='background-color:#E8E8E8;'> conch.client.UnparsedEntry <a href=' /conch/client/knownhosts.py#L218'>toString</a>()</tt>	Returns the input line without its newline if one was given.
<tt style='background-color:#E8E8E8;'> conch.client. <a href=' /conch/client/knownhosts.py#L230'>_hmacedString</a>(key,string)</tt>	Return the sha-1 hmac hash of the given key and string.
<tt style='background-color:#E8E8E8;'> conch.client.HashedEntry <a href=' /conch/client/knownhosts.py#L276'>fromString</a>(cls,string)</tt>	Load a hashed entry from a string representing a line in a known_hosts file.
<tt style='background-color:#E8E8E8;'> conch.client.HashedEntry <a href=' /conch/client/knownhosts.py#L309'>matchesHost</a>(hostname)</tt>	Implement l{iknownhostentry matcheshost} to compare the hash of the.
<tt style='background-color:#E8E8E8;'> conch.client.HashedEntry <a href=' /conch/client/knownhosts.py#L325'>toString</a>()</tt>	Implement l{iknownhostentry tostring} by base64-encoding the salt host.
<tt style='background-color:#E8E8E8;'> conch.client.KnownHostsFile <a href=' /conch/client/knownhosts.py#L361'>__init__</a>(savePath)</tt>	Create a new empty knownhostsfile.
<tt style='background-color:#E8E8E8;'> conch.client.KnownHostsFile <a href=' /conch/client/knownhosts.py#L376'>savePath</a>()</tt>	@see c{savepath} parameter of l{__init__}.
<tt style='background-color:#E8E8E8;'> conch.client.KnownHostsFile <a href=' /conch/client/knownhosts.py#L384'>iterentries</a>()</tt>	Iterate over the host entries in this file.
<tt style='background-color:#E8E8E8;'> conch.client.KnownHostsFile <a href=' /conch/client/knownhosts.py#L416'>hasHostKey</a>(hostname,key)</tt>	Check for an entry with matching hostname and key.
<tt style='background-color:#E8E8E8;'> conch.client.KnownHostsFile <a href=' /conch/client/knownhosts.py#L450'>verifyHostKey</a>(ui,hostname,ip,key)</tt>	Verify the given host key for the given ip and host asking for confirmation from and notifying the given ui about changes to this.
<tt style='background-color:#E8E8E8;'> conch.client.KnownHostsFile <a href=' /conch/client/knownhosts.py#L507'>addHostKey</a>(hostname,key)</tt>	Add a new l{hashedentry} to the key database.
<tt style='background-color:#E8E8E8;'> conch.client.KnownHostsFile <a href=' /conch/client/knownhosts.py#L532'>save</a>()</tt>	Save this l{knownhostsfile} to the path it was loaded from.
<tt style='background-color:#E8E8E8;'> conch.client.KnownHostsFile <a href=' /conch/client/knownhosts.py#L554'>fromPath</a>(cls,path)</tt>	Create a new l{knownhostsfile}, potentially reading existing known hosts information from the given file.
<tt style='background-color:#E8E8E8;'> conch.client.ConsoleUI <a href=' /conch/client/knownhosts.py#L579'>__init__</a>(opener)</tt>	@param opener a no-argument callable which should open a console binary-mode file-like object to be used for reading and writing.
<tt style='background-color:#E8E8E8;'> conch.client.ConsoleUI <a href=' /conch/client/knownhosts.py#L590'>prompt</a>(text)</tt>	Write the given text as a prompt to the console output then read a result from the console input.
<tt style='background-color:#E8E8E8;'> conch.client.ConsoleUI <a href=' /conch/client/knownhosts.py#L618'>warn</a>(text)</tt>	Notify the user non-interactively of the provided text by writing it to the console.
<tt style='background-color:#E8E8E8;'> conch.client.ConchOptions <a href=' /conch/client/options.py#L61'>opt_identity</a>(i)</tt>	Identity for public-key authentication.
<tt style='background-color:#E8E8E8;'> conch.client.ConchOptions <a href=' /conch/client/options.py#L65'>opt_ciphers</a>(ciphers)</tt>	Select encryption algorithms.
<tt style='background-color:#E8E8E8;'> conch.client.ConchOptions <a href=' /conch/client/options.py#L74'>opt_macs</a>(macs)</tt>	Specify mac algorithms.
<tt style='background-color:#E8E8E8;'> conch.client.ConchOptions <a href=' /conch/client/options.py#L84'>opt_host_key_algorithms</a>(hkas)</tt>	Select host key algorithms.
<tt style='background-color:#E8E8E8;'> conch.client.ConchOptions <a href=' /conch/client/options.py#L94'>opt_user_authentications</a>(uas)</tt>	Choose how to authenticate to the remote server.
<tt style='background-color:#E8E8E8;'> conch.client.SSHAgentClient <a href=' /conch/client/agent.py#L35'>getPublicKey</a>()</tt>	Return a l{key} from the first blob in c{self blobs}, if any or.
<tt style='background-color:#E8E8E8;'> conch.client. <a href=' /conch/client/default.py#L42'>verifyHostKey</a>(transport,host,pubKey,fingerprint)</tt>	Verify a host's key.
<tt style='background-color:#E8E8E8;'> conch.client. <a href=' /conch/client/default.py#L93'>isInKnownHosts</a>(host,pubKey,options)</tt>	Checks to see if host is in the known_hosts file for the user.
<tt style='background-color:#E8E8E8;'> conch.client. <a href=' /conch/client/default.py#L133'>getHostKeyAlgorithms</a>(host,options)</tt>	Look in known_hosts for a key corresponding to c{host}.
<tt style='background-color:#E8E8E8;'> conch.client.SSHUserAuthClient <a href=' /conch/client/default.py#L197'>_getPassword</a>(prompt)</tt>	Prompt for a password using l{getpass getpass}.
<tt style='background-color:#E8E8E8;'> conch.client.SSHUserAuthClient <a href=' /conch/client/default.py#L232'>getPublicKey</a>()</tt>	Get a public key from the key agent if possible otherwise look in the next configured identity file for one.
<tt style='background-color:#E8E8E8;'> conch.client.SSHUserAuthClient <a href=' /conch/client/default.py#L259'>signData</a>(publicKey,signData)</tt>	Extend the base signing behavior by using an ssh agent to sign the data if one is available.
<tt style='background-color:#E8E8E8;'> conch.client.SSHUserAuthClient <a href=' /conch/client/default.py#L273'>getPrivateKey</a>()</tt>	Try to load the private key from the last used file identified by c{getpublickey}, potentially asking for the passphrase if the key is.
<tt style='background-color:#E8E8E8;'> conch.client.SSHUserAuthClient <a href=' /conch/client/default.py#L316'>_openTty</a>(cls)</tt>	Open /dev/tty as two streams one in read one in write mode and return them.
<tt style='background-color:#E8E8E8;'> conch.client.SSHUserAuthClient <a href=' /conch/client/default.py#L335'>_replaceStdoutStdin</a>(cls)</tt>	Contextmanager that replaces stdout and stdin with /dev/tty and resets them when it is done.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalProtocol <a href=' /conch/insults/insults.py#L19'>makeConnection</a>(transport)</tt>	Called with an l{iterminaltransport} when a connection is established.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalProtocol <a href=' /conch/insults/insults.py#L24'>keystrokeReceived</a>(keyID,modifier)</tt>	A keystroke was received.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalProtocol <a href=' /conch/insults/insults.py#L35'>terminalSize</a>(width,height)</tt>	Called to indicate the size of the terminal.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalProtocol <a href=' /conch/insults/insults.py#L43'>unhandledControlSequence</a>(seq)</tt>	Called when an unsupported control sequence is received.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalProtocol <a href=' /conch/insults/insults.py#L51'>connectionLost</a>(reason)</tt>	Called when the connection has been lost.
<tt style='background-color:#E8E8E8;'> conch.insults.TerminalProtocol <a href=' /conch/insults/insults.py#L68'>connectionMade</a>()</tt>	Called after a connection has been established.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L92'>cursorUp</a>(n)</tt>	Move the cursor up n lines.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L98'>cursorDown</a>(n)</tt>	Move the cursor down n lines.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L104'>cursorForward</a>(n)</tt>	Move the cursor right n columns.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L110'>cursorBackward</a>(n)</tt>	Move the cursor left n columns.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L116'>cursorPosition</a>(column,line)</tt>	Move the cursor to the given line and column.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L122'>cursorHome</a>()</tt>	Move the cursor home.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L128'>index</a>()</tt>	Move the cursor down one line performing scrolling if necessary.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L134'>reverseIndex</a>()</tt>	Move the cursor up one line performing scrolling if necessary.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L140'>nextLine</a>()</tt>	Move the cursor to the first position on the next line performing scrolling if necessary.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L146'>saveCursor</a>()</tt>	Save the cursor position character attribute character set and origin mode selection.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L152'>restoreCursor</a>()</tt>	Restore the previously saved cursor position character attribute character set and origin mode selection.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L160'>setModes</a>(modes)</tt>	Set the given modes on the terminal.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L165'>resetModes</a>(mode)</tt>	Reset the given modes on the terminal.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L171'>setPrivateModes</a>(modes)</tt>	Set the given dec private modes on the terminal.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L177'>resetPrivateModes</a>(modes)</tt>	Reset the given dec private modes on the terminal.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L183'>applicationKeypadMode</a>()</tt>	Cause keypad to generate control functions.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L191'>numericKeypadMode</a>()</tt>	Cause keypad to generate normal characters.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L197'>selectCharacterSet</a>(charSet,which)</tt>	Select a character set.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L208'>shiftIn</a>()</tt>	Activate the g0 character set.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L214'>shiftOut</a>()</tt>	Activate the g1 character set.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L220'>singleShift2</a>()</tt>	Shift to the g2 character set for a single character.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L226'>singleShift3</a>()</tt>	Shift to the g3 character set for a single character.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L232'>selectGraphicRendition</a>()</tt>	Enabled one or more character attributes.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L241'>horizontalTabulationSet</a>()</tt>	Set a tab stop at the current cursor position.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L247'>tabulationClear</a>()</tt>	Clear the tab stop at the current cursor position.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L253'>tabulationClearAll</a>()</tt>	Clear all tab stops.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L259'>doubleHeightLine</a>(top)</tt>	Make the current line the top or bottom half of a double-height double-width line.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L267'>singleWidthLine</a>()</tt>	Make the current line a single-width single-height line.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L273'>doubleWidthLine</a>()</tt>	Make the current line a double-width line.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L279'>eraseToLineEnd</a>()</tt>	Erase from the cursor to the end of line including cursor position.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L285'>eraseToLineBeginning</a>()</tt>	Erase from the cursor to the beginning of the line including the cursor position.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L291'>eraseLine</a>()</tt>	Erase the entire cursor line.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L297'>eraseToDisplayEnd</a>()</tt>	Erase from the cursor to the end of the display including the cursor position.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L303'>eraseToDisplayBeginning</a>()</tt>	Erase from the cursor to the beginning of the display including the cursor position.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L309'>eraseDisplay</a>()</tt>	Erase the entire display.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L315'>deleteCharacter</a>(n)</tt>	Delete n characters starting at the cursor position.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L323'>insertLine</a>(n)</tt>	Insert n lines at the cursor position.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L332'>deleteLine</a>(n)</tt>	Delete n lines starting at the cursor position.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L341'>reportCursorPosition</a>()</tt>	Return a deferred that fires with a two-tuple of x y indicating the cursor position.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L347'>reset</a>()</tt>	Reset the terminal to its initial state.
<tt style='background-color:#E8E8E8;'> conch.insults.ITerminalTransport <a href=' /conch/insults/insults.py#L353'>unhandledControlSequence</a>(seq)</tt>	Called when an unsupported control sequence is received.
<tt style='background-color:#E8E8E8;'> conch.insults.ServerProtocol <a href=' /conch/insults/insults.py#L498'>__init__</a>(protocolFactory)</tt>	@param protocolfactory a callable which will be invoked with *a **kw and should return an iterminalprotocol implementor.
<tt style='background-color:#E8E8E8;'> conch.insults.ClientProtocol <a href=' /conch/insults/insults.py#L1004'>__init__</a>(terminalFactory)</tt>	@param terminalfactory a callable which will be invoked with *a **kw and should return an iterminaltransport provider.
<tt style='background-color:#E8E8E8;'> conch.insults.ClientProtocol <a href=' /conch/insults/insults.py#L1036'>dataReceived</a>(data)</tt>	Parse the given data from a terminal server dispatching to event handlers defined by c{self.
<tt style='background-color:#E8E8E8;'> conch.insults.InsultsClient <a href=' /conch/insults/client.py#L63'>gotoXY</a>(x,y)</tt>	Go to a position on the screen.
<tt style='background-color:#E8E8E8;'> conch.insults.InsultsClient <a href=' /conch/insults/client.py#L70'>writeCh</a>(ch)</tt>	Write a character to the screen if we're at the end of the row.
<tt style='background-color:#E8E8E8;'> conch.insults.InsultsClient <a href=' /conch/insults/client.py#L78'>writeStr</a>(s)</tt>	Write a string to the screen this does not wrap a the edge of the.
<tt style='background-color:#E8E8E8;'> conch.insults.InsultsClient <a href=' /conch/insults/client.py#L90'>eraseToLine</a>()</tt>	Erase from the current position to the end of the line.
<tt style='background-color:#E8E8E8;'> conch.insults.InsultsClient <a href=' /conch/insults/client.py#L95'>eraseToScreen</a>()</tt>	Erase from the current position to the end of the screen.
<tt style='background-color:#E8E8E8;'> conch.insults.InsultsClient <a href=' /conch/insults/client.py#L100'>clearScreen</a>()</tt>	Clear the screen and return the cursor to 0 0.
<tt style='background-color:#E8E8E8;'> conch.insults.InsultsClient <a href=' /conch/insults/client.py#L106'>setAttributes</a>()</tt>	Set the attributes for drawing on the screen.
<tt style='background-color:#E8E8E8;'> conch.insults.InsultsClient <a href=' /conch/insults/client.py#L111'>refresh</a>()</tt>	Redraw the screen.
<tt style='background-color:#E8E8E8;'> conch.insults.InsultsClient <a href=' /conch/insults/client.py#L133'>windowSizeChanged</a>()</tt>	Called when the size of the window changes.
<tt style='background-color:#E8E8E8;'> conch.insults.InsultsClient <a href=' /conch/insults/client.py#L138'>keyReceived</a>(key)</tt>	Called when the user hits a key.
<tt style='background-color:#E8E8E8;'> conch.insults.Widget <a href=' /conch/insults/window.py#L107'>focusReceived</a>()</tt>	Called when focus is being given to this widget.
<tt style='background-color:#E8E8E8;'> conch.insults. <a href=' /conch/insults/window.py#L491'>rectangle</a>(terminal,position,dimension)</tt>	Draw a rectangle @type position l{tuple}.
<tt style='background-color:#E8E8E8;'> conch.insults._FormattingState <a href=' /conch/insults/helper.py#L57'>wantOne</a>()</tt>	Add a character attribute to a copy of this formatting state.
<tt style='background-color:#E8E8E8;'> conch.insults.TerminalBuffer <a href=' /conch/insults/helper.py#L136'>write</a>(data)</tt>	Add the given printable bytes to the terminal.
<tt style='background-color:#E8E8E8;'> conch.insults.TerminalBuffer <a href=' /conch/insults/helper.py#L151'>insertAtCursor</a>(b)</tt>	Add one byte to the terminal at the cursor and make consequent state updates.
<tt style='background-color:#E8E8E8;'> conch.insults.TerminalBuffer <a href=' /conch/insults/helper.py#L236'>nextLine</a>()</tt>	Update the cursor position attributes and scroll down if appropriate.
<tt style='background-color:#E8E8E8;'> conch.insults.TerminalBuffer <a href=' /conch/insults/helper.py#L266'>setPrivateModes</a>(modes)</tt>	Enable the given modes.
<tt style='background-color:#E8E8E8;'> conch.insults.TerminalBuffer <a href=' /conch/insults/helper.py#L281'>resetPrivateModes</a>(modes)</tt>	Disable the given modes.
<tt style='background-color:#E8E8E8;'> conch.insults. <a href=' /conch/insults/text.py#L144'>assembleFormattedText</a>(formatted)</tt>	Assemble formatted text from structured information.
<tt style='background-color:#E8E8E8;'> cred.IUsernameDigestHash <a href=' /cred/credentials.py#L47'>checkHash</a>(digestHash)</tt>	@param digesthash the hashed username realm password to check against.
<tt style='background-color:#E8E8E8;'> cred.IUsernameHashedPassword <a href=' /cred/credentials.py#L72'>checkPassword</a>(password)</tt>	Validate these credentials against the correct password.
<tt style='background-color:#E8E8E8;'> cred.IUsernamePassword <a href=' /cred/credentials.py#L105'>checkPassword</a>(password)</tt>	Validate these credentials against the correct password.
<tt style='background-color:#E8E8E8;'> cred.DigestedCredentials <a href=' /cred/credentials.py#L141'>checkPassword</a>(password)</tt>	Verify that the credentials represented by this object agree with the given plaintext c{password} by hashing c{password} in the same way the.
<tt style='background-color:#E8E8E8;'> cred.DigestedCredentials <a href=' /cred/credentials.py#L164'>checkHash</a>(digestHash)</tt>	Verify that the credentials represented by this object agree with the credentials represented by the i{h a1 } given in c{digesthash}.
<tt style='background-color:#E8E8E8;'> cred.DigestCredentialFactory <a href=' /cred/credentials.py#L229'>getChallenge</a>(address)</tt>	Generate the challenge for use in the www-authenticate header.
<tt style='background-color:#E8E8E8;'> cred.DigestCredentialFactory <a href=' /cred/credentials.py#L249'>_generateNonce</a>()</tt>	Create a random value suitable for use as the nonce parameter of a www-authenticate challenge.
<tt style='background-color:#E8E8E8;'> cred.DigestCredentialFactory <a href=' /cred/credentials.py#L259'>_getTime</a>()</tt>	Parameterize the time based seed used in c{_generateopaque} so we can deterministically unittest it's behavior.
<tt style='background-color:#E8E8E8;'> cred.DigestCredentialFactory <a href=' /cred/credentials.py#L267'>_generateOpaque</a>(nonce,clientip)</tt>	Generate an opaque to be returned to the client this is a unique.
<tt style='background-color:#E8E8E8;'> cred.DigestCredentialFactory <a href=' /cred/credentials.py#L287'>_verifyOpaque</a>(opaque,nonce,clientip)</tt>	Given the opaque and nonce from the request as well as the client ip that made the request verify that the opaque was generated by us.
<tt style='background-color:#E8E8E8;'> cred.DigestCredentialFactory <a href=' /cred/credentials.py#L349'>decode</a>(response,method,host)</tt>	Decode the given response and attempt to generate a l{digestedcredentials} from it.
<tt style='background-color:#E8E8E8;'> cred.ICredentialsChecker <a href=' /cred/checkers.py#L26'>requestAvatarId</a>(credentials)</tt>	@param credentials something which implements one of the interfaces in self.
<tt style='background-color:#E8E8E8;'> cred.FilePasswordDB <a href=' /cred/checkers.py#L124'>__init__</a>(filename,delim,usernameField,passwordField)</tt>	@type filename c{str} @param filename the name of the file from which to read username and.
<tt style='background-color:#E8E8E8;'> cred.FilePasswordDB <a href=' /cred/checkers.py#L200'>_loadCredentials</a>()</tt>	Loads the credentials from the configured file.
<tt style='background-color:#E8E8E8;'> cred.ICheckerFactory <a href=' /cred/strcred.py#L53'>generateChecker</a>(argstring)</tt>	Return an l{twisted cred checkers icredentialschecker} provider using the supplied.
<tt style='background-color:#E8E8E8;'> cred. <a href=' /cred/strcred.py#L99'>findCheckerFactories</a>()</tt>	Find all objects that implement l{icheckerfactory}.
<tt style='background-color:#E8E8E8;'> cred. <a href=' /cred/strcred.py#L107'>findCheckerFactory</a>(authType)</tt>	Find the first checker factory that supports the given authtype.
<tt style='background-color:#E8E8E8;'> cred. <a href=' /cred/strcred.py#L118'>makeChecker</a>(description)</tt>	Returns an l{twisted cred checkers icredentialschecker} based on the.
<tt style='background-color:#E8E8E8;'> cred.AuthOptionMixin <a href=' /cred/strcred.py#L162'>supportsInterface</a>(interface)</tt>	Returns whether a particular credentials interface is supported.
<tt style='background-color:#E8E8E8;'> cred.AuthOptionMixin <a href=' /cred/strcred.py#L170'>supportsCheckerFactory</a>(factory)</tt>	Returns whether a checker factory will provide at least one of the credentials interfaces that we care about.
<tt style='background-color:#E8E8E8;'> cred.AuthOptionMixin <a href=' /cred/strcred.py#L181'>addChecker</a>(checker)</tt>	Supply a supplied credentials checker to the options class.
<tt style='background-color:#E8E8E8;'> cred.AuthOptionMixin <a href=' /cred/strcred.py#L205'>opt_auth</a>(description)</tt>	Specify an authentication method for the server.
<tt style='background-color:#E8E8E8;'> cred.AuthOptionMixin <a href=' /cred/strcred.py#L221'>_checkerFactoriesForOptHelpAuth</a>()</tt>	Return a list of which authtypes will be displayed by --help-auth.
<tt style='background-color:#E8E8E8;'> cred.AuthOptionMixin <a href=' /cred/strcred.py#L233'>opt_help_auth</a>()</tt>	Show all authentication methods available.
<tt style='background-color:#E8E8E8;'> cred.AuthOptionMixin <a href=' /cred/strcred.py#L255'>opt_help_auth_type</a>(authType)</tt>	Show help for a particular authentication type.
<tt style='background-color:#E8E8E8;'> cred. <a href=' /cred/_digest.py#L36'>calcHA1</a>(pszAlg,pszUserName,pszRealm,pszPassword)</tt>	Compute h a1 from rfc 2617.
<tt style='background-color:#E8E8E8;'> cred. <a href=' /cred/_digest.py#L83'>calcHA2</a>(algo,pszMethod,pszDigestUri,pszQop)</tt>	Compute h a2 from rfc 2617.
<tt style='background-color:#E8E8E8;'> cred. <a href=' /cred/_digest.py#L107'>calcResponse</a>(HA1,HA2,algo,pszNonce)</tt>	Compute the digest for the given parameters.
<tt style='background-color:#E8E8E8;'> cred.IRealm <a href=' /cred/portal.py#L24'>requestAvatar</a>(avatarId,mind)</tt>	Return avatar which provides one of the given interfaces.
<tt style='background-color:#E8E8E8;'> cred.Portal <a href=' /cred/portal.py#L58'>__init__</a>(realm,checkers)</tt>	Create a portal to a l{irealm}.
<tt style='background-color:#E8E8E8;'> cred.Portal <a href=' /cred/portal.py#L68'>listCredentialsInterfaces</a>()</tt>	Return list of credentials interfaces that can be used to login.
<tt style='background-color:#E8E8E8;'> cred.Portal <a href=' /cred/portal.py#L82'>login</a>(credentials,mind)</tt>	@param credentials an implementor of l{twisted.
<tt style='background-color:#E8E8E8;'> words.Options <a href=' /words/tap.py#L41'>opt_group</a>(name)</tt>	Specify a group which should exist.
<tt style='background-color:#E8E8E8;'> words.Options <a href=' /words/tap.py#L46'>opt_passwd</a>(filename)</tt>	Name of a passwd-style file (this is for.
<tt style='background-color:#E8E8E8;'> words.IProtocolPlugin <a href=' /words/iwords.py#L14'>getFactory</a>(realm,portal)</tt>	Retrieve a c{twisted internet interfaces iserverfactory} provider.
<tt style='background-color:#E8E8E8;'> words.IGroup <a href=' /words/iwords.py#L28'>add</a>(user)</tt>	Include the given user in this group.
<tt style='background-color:#E8E8E8;'> words.IGroup <a href=' /words/iwords.py#L34'>remove</a>(user,reason)</tt>	Remove the given user from this group.
<tt style='background-color:#E8E8E8;'> words.IGroup <a href=' /words/iwords.py#L41'>size</a>()</tt>	Return the number of participants in this group.
<tt style='background-color:#E8E8E8;'> words.IGroup <a href=' /words/iwords.py#L49'>receive</a>(sender,recipient,message)</tt>	Broadcast the given message from the given sender to other users in group.
<tt style='background-color:#E8E8E8;'> words.IGroup <a href=' /words/iwords.py#L70'>setMetadata</a>(meta)</tt>	Change the metadata associated with this group.
<tt style='background-color:#E8E8E8;'> words.IGroup <a href=' /words/iwords.py#L76'>iterusers</a>()</tt>	Return an iterator of all users in this group.
<tt style='background-color:#E8E8E8;'> words.IChatClient <a href=' /words/iwords.py#L87'>receive</a>(sender,recipient,message)</tt>	Callback notifying this user of the given message sent by the given user.
<tt style='background-color:#E8E8E8;'> words.IChatClient <a href=' /words/iwords.py#L108'>groupMetaUpdate</a>(group,meta)</tt>	Callback notifying this user that the metadata for the given group has changed.
<tt style='background-color:#E8E8E8;'> words.IChatClient <a href=' /words/iwords.py#L119'>userJoined</a>(group,user)</tt>	Callback notifying this user that the given user has joined the given group.
<tt style='background-color:#E8E8E8;'> words.IChatClient <a href=' /words/iwords.py#L130'>userLeft</a>(group,user,reason)</tt>	Callback notifying this user that the given user has left the given group for the given reason.
<tt style='background-color:#E8E8E8;'> words.IUser <a href=' /words/iwords.py#L154'>loggedIn</a>(realm,mind)</tt>	Invoked by the associated l{ichatservice} when login occurs.
<tt style='background-color:#E8E8E8;'> words.IUser <a href=' /words/iwords.py#L161'>send</a>(recipient,message)</tt>	Send the given message to the given user or group.
<tt style='background-color:#E8E8E8;'> words.IUser <a href=' /words/iwords.py#L168'>join</a>(group)</tt>	Attempt to join the given group.
<tt style='background-color:#E8E8E8;'> words.IUser <a href=' /words/iwords.py#L175'>leave</a>(group)</tt>	Discontinue participation in the given group.
<tt style='background-color:#E8E8E8;'> words.IUser <a href=' /words/iwords.py#L182'>itergroups</a>()</tt>	Return an iterator of all groups of which this user is a member.
<tt style='background-color:#E8E8E8;'> words.IChatService <a href=' /words/iwords.py#L200'>itergroups</a>()</tt>	Return all groups available on this service.
<tt style='background-color:#E8E8E8;'> words.IChatService <a href=' /words/iwords.py#L207'>getGroup</a>(name)</tt>	Retrieve the group by the given name.
<tt style='background-color:#E8E8E8;'> words.IChatService <a href=' /words/iwords.py#L219'>createGroup</a>(name)</tt>	Create a new group with the given name.
<tt style='background-color:#E8E8E8;'> words.IChatService <a href=' /words/iwords.py#L230'>lookupGroup</a>(name)</tt>	Retrieve a group by name.
<tt style='background-color:#E8E8E8;'> words.IChatService <a href=' /words/iwords.py#L242'>getUser</a>(name)</tt>	Retrieve the user by the given name.
<tt style='background-color:#E8E8E8;'> words.IChatService <a href=' /words/iwords.py#L254'>createUser</a>(name)</tt>	Create a new user with the given name.
<tt style='background-color:#E8E8E8;'> words.IRCUser <a href=' /words/service.py#L272'>irc_PASS</a>(prefix,params)</tt>	Password message -- register a password.
<tt style='background-color:#E8E8E8;'> words.IRCUser <a href=' /words/service.py#L286'>irc_NICK</a>(prefix,params)</tt>	Nick message -- set your nickname.
<tt style='background-color:#E8E8E8;'> words.IRCUser <a href=' /words/service.py#L323'>irc_USER</a>(prefix,params)</tt>	User message -- set your realname.
<tt style='background-color:#E8E8E8;'> words.IRCUser <a href=' /words/service.py#L335'>irc_NICKSERV_PRIVMSG</a>(prefix,params)</tt>	Send a private message.
<tt style='background-color:#E8E8E8;'> words.IRCUser <a href=' /words/service.py#L469'>irc_MODE</a>(prefix,params)</tt>	User mode message.
<tt style='background-color:#E8E8E8;'> words.IRCUser <a href=' /words/service.py#L522'>irc_PRIVMSG</a>(prefix,params)</tt>	Send a private message.
<tt style='background-color:#E8E8E8;'> words.IRCUser <a href=' /words/service.py#L698'>_sendTopic</a>(group)</tt>	Send the topic of the given group to this user if it has one.
<tt style='background-color:#E8E8E8;'> words.IRCUser <a href=' /words/service.py#L750'>list</a>(channels)</tt>	Send a group of list response lines @type channel c{list} of c{ str int str }.
<tt style='background-color:#E8E8E8;'> words.IRCUser <a href=' /words/service.py#L763'>irc_LIST</a>(prefix,params)</tt>	List query return information about the indicated channels or about all.
<tt style='background-color:#E8E8E8;'> words.WordsRealm <a href=' /words/service.py#L1142'>addUser</a>(user)</tt>	Add the given user to this service.
<tt style='background-color:#E8E8E8;'> words.WordsRealm <a href=' /words/service.py#L1160'>addGroup</a>(group)</tt>	Add the given group to this service.
<tt style='background-color:#E8E8E8;'> words.xish.XmlStream <a href=' /words/xish/xmlstream.py#L60'>_initializeStream</a>()</tt>	Sets up xml parser.
<tt style='background-color:#E8E8E8;'> words.xish.XmlStream <a href=' /words/xish/xmlstream.py#L73'>connectionMade</a>()</tt>	Called when a connection is made.
<tt style='background-color:#E8E8E8;'> words.xish.XmlStream <a href=' /words/xish/xmlstream.py#L82'>dataReceived</a>(data)</tt>	Called whenever data is received.
<tt style='background-color:#E8E8E8;'> words.xish.XmlStream <a href=' /words/xish/xmlstream.py#L98'>connectionLost</a>(reason)</tt>	Called when the connection is shut down.
<tt style='background-color:#E8E8E8;'> words.xish.XmlStream <a href=' /words/xish/xmlstream.py#L112'>onDocumentStart</a>(rootElement)</tt>	Called whenever the start tag of a root element has been received.
<tt style='background-color:#E8E8E8;'> words.xish.XmlStream <a href=' /words/xish/xmlstream.py#L119'>onElement</a>(element)</tt>	Called whenever a direct child element of the root element has been received.
<tt style='background-color:#E8E8E8;'> words.xish.XmlStream <a href=' /words/xish/xmlstream.py#L127'>onDocumentEnd</a>()</tt>	Called whenever the end tag of the root element has been received.
<tt style='background-color:#E8E8E8;'> words.xish.XmlStream <a href=' /words/xish/xmlstream.py#L134'>setDispatchFn</a>(fn)</tt>	Set another function to handle elements.
<tt style='background-color:#E8E8E8;'> words.xish.XmlStream <a href=' /words/xish/xmlstream.py#L138'>resetDispatchFn</a>()</tt>	Set the default function (c{onelement}) to handle elements.
<tt style='background-color:#E8E8E8;'> words.xish.XmlStream <a href=' /words/xish/xmlstream.py#L142'>send</a>(obj)</tt>	Send data over the stream.
<tt style='background-color:#E8E8E8;'> words.xish.BootstrapMixin <a href=' /words/xish/xmlstream.py#L194'>installBootstraps</a>(dispatcher)</tt>	Install registered bootstrap observers.
<tt style='background-color:#E8E8E8;'> words.xish.BootstrapMixin <a href=' /words/xish/xmlstream.py#L205'>addBootstrap</a>(event,fn)</tt>	Add a bootstrap event handler.
<tt style='background-color:#E8E8E8;'> words.xish.BootstrapMixin <a href=' /words/xish/xmlstream.py#L216'>removeBootstrap</a>(event,fn)</tt>	Remove a bootstrap event handler.
<tt style='background-color:#E8E8E8;'> words.xish.XmlStreamFactoryMixin <a href=' /words/xish/xmlstream.py#L247'>buildProtocol</a>(addr)</tt>	Create an instance of xmlstream.
<tt style='background-color:#E8E8E8;'> words.xish.XmlStreamFactory <a href=' /words/xish/xmlstream.py#L269'>buildProtocol</a>(addr)</tt>	Create a protocol instance.
<tt style='background-color:#E8E8E8;'> words.xish. <a href=' /words/xish/domish.py#L20'>_splitPrefix</a>(name)</tt>	Internal method for splitting a prefixed element name into its.
<tt style='background-color:#E8E8E8;'> words.xish. <a href=' /words/xish/domish.py#L155'>escapeToXml</a>(text,isattrib)</tt>	Escape text to proper xml form per section 2 3 in the xml specification.
<tt style='background-color:#E8E8E8;'> words.xish. <a href=' /words/xish/domish.py#L181'>generateOnlyInterface</a>(list,int)</tt>	Filters items in a list by class.
<tt style='background-color:#E8E8E8;'> words.xish. <a href=' /words/xish/domish.py#L188'>generateElementsQNamed</a>(list,name,uri)</tt>	Filters element items in a list with matching name and uri.
<tt style='background-color:#E8E8E8;'> words.xish. <a href=' /words/xish/domish.py#L194'>generateElementsNamed</a>(list,name)</tt>	Filters element items in a list with matching name regardless of uri.
<tt style='background-color:#E8E8E8;'> words.xish.IElement <a href=' /words/xish/domish.py#L233'>toXml</a>(prefixes,closeElement,defaultUri,prefixesInScope)</tt>	Serializes object to a partial xml document @param prefixes dictionary that maps namespace uris to suggested.
<tt style='background-color:#E8E8E8;'> words.xish.IElement <a href=' /words/xish/domish.py#L261'>addElement</a>(name,defaultUri,content)</tt>	Create an element and add as child.
<tt style='background-color:#E8E8E8;'> words.xish.IElement <a href=' /words/xish/domish.py#L285'>addChild</a>(node)</tt>	Adds a node as child of this element.
<tt style='background-color:#E8E8E8;'> words.xish.IElement <a href=' /words/xish/domish.py#L299'>addContent</a>(text)</tt>	Adds character data to this element.
<tt style='background-color:#E8E8E8;'> words.xish.Element <a href=' /words/xish/domish.py#L414'>__init__</a>(qname,defaultUri,attribs,localPrefixes)</tt>	@param qname tuple of uri name @param defaulturi the default uri of the element defaults to the uri.
<tt style='background-color:#E8E8E8;'> words.xish.Element <a href=' /words/xish/domish.py#L458'>__unicode__</a>()</tt>	Retrieve the first cdata content node.
<tt style='background-color:#E8E8E8;'> words.xish.Element <a href=' /words/xish/domish.py#L467'>__bytes__</a>()</tt>	Retrieve the first character data node as utf-8 bytes.
<tt style='background-color:#E8E8E8;'> words.xish.Element <a href=' /words/xish/domish.py#L478'>_dqa</a>(attr)</tt>	Dequalify an attribute key as needed.
<tt style='background-color:#E8E8E8;'> words.xish.Element <a href=' /words/xish/domish.py#L485'>getAttribute</a>(attribname,default)</tt>	Retrieve the value of attribname if it exists.
<tt style='background-color:#E8E8E8;'> words.xish.Element <a href=' /words/xish/domish.py#L489'>hasAttribute</a>(attrib)</tt>	Determine if the specified attribute exists.
<tt style='background-color:#E8E8E8;'> words.xish.Element <a href=' /words/xish/domish.py#L493'>compareAttribute</a>(attrib,value)</tt>	Safely compare the value of an attribute against a provided value.
<tt style='background-color:#E8E8E8;'> words.xish.Element <a href=' /words/xish/domish.py#L500'>swapAttributeValues</a>(left,right)</tt>	Swap the values of two attribute.
<tt style='background-color:#E8E8E8;'> words.xish.Element <a href=' /words/xish/domish.py#L507'>addChild</a>(node)</tt>	Add a child to this element.
<tt style='background-color:#E8E8E8;'> words.xish.Element <a href=' /words/xish/domish.py#L514'>addContent</a>(text)</tt>	Add some text data to this element.
<tt style='background-color:#E8E8E8;'> words.xish.Element <a href=' /words/xish/domish.py#L541'>addRawXml</a>(rawxmlstring)</tt>	Add a pre-serialized chunk o' xml as a child of this element.
<tt style='background-color:#E8E8E8;'> words.xish.Element <a href=' /words/xish/domish.py#L545'>addUniqueId</a>()</tt>	Add a unique across a given python session id attribute to this element.
<tt style='background-color:#E8E8E8;'> words.xish.Element <a href=' /words/xish/domish.py#L553'>elements</a>(uri,name)</tt>	Iterate across all children of this element that are elements.
<tt style='background-color:#E8E8E8;'> words.xish.Element <a href=' /words/xish/domish.py#L573'>toXml</a>(prefixes,closeElement,defaultUri,prefixesInScope)</tt>	Serialize this element and all children to a string.
<tt style='background-color:#E8E8E8;'> words.xish. <a href=' /words/xish/domish.py#L591'>elementStream</a>()</tt>	Preferred method to construct an elementstream uses expat-based stream if available and falls back to sux if necessary.
<tt style='background-color:#E8E8E8;'> words.xish.BooleanValue <a href=' /words/xish/xpath.py#L83'>_booleanAnd</a>(elem)</tt>	Calculate boolean and of the given expressions given an element.
<tt style='background-color:#E8E8E8;'> words.xish.BooleanValue <a href=' /words/xish/xpath.py#L91'>_booleanOr</a>(elem)</tt>	Calculate boolean or of the given expressions given an element.
<tt style='background-color:#E8E8E8;'> words.xish. <a href=' /words/xish/xpath.py#L100'>Function</a>(fname)</tt>	Internal method which selects the function object.
<tt style='background-color:#E8E8E8;'> words.xish.CallbackList <a href=' /words/xish/utility.py#L91'>callback</a>()</tt>	Call all registered callbacks.
<tt style='background-color:#E8E8E8;'> words.xish.CallbackList <a href=' /words/xish/utility.py#L118'>isEmpty</a>()</tt>	Return if list of registered callbacks is empty.
<tt style='background-color:#E8E8E8;'> words.xish.EventDispatcher <a href=' /words/xish/utility.py#L195'>addOnetimeObserver</a>(event,observerfn,priority)</tt>	Register a one-time observer for an event.
<tt style='background-color:#E8E8E8;'> words.xish.EventDispatcher <a href=' /words/xish/utility.py#L205'>addObserver</a>(event,observerfn,priority)</tt>	Register an observer for an event.
<tt style='background-color:#E8E8E8;'> words.xish.EventDispatcher <a href=' /words/xish/utility.py#L252'>removeObserver</a>(event,observerfn)</tt>	Remove callable as observer for an event.
<tt style='background-color:#E8E8E8;'> words.xish.EventDispatcher <a href=' /words/xish/utility.py#L284'>dispatch</a>(obj,event)</tt>	Dispatch an event.
<tt style='background-color:#E8E8E8;'> words.im.TwistedWordsPerson <a href=' /words/im/pbsupport.py#L37'>sendMessage</a>(text,metadata)</tt>	Return a deferred.
<tt style='background-color:#E8E8E8;'> words.im.TwistedWordsGroup <a href=' /words/im/pbsupport.py#L62'>sendGroupMessage</a>(text,metadata)</tt>	Return a deferred.
<tt style='background-color:#E8E8E8;'> words.im.PBAccount <a href=' /words/im/pbsupport.py#L191'>__init__</a>(accountName,autoLogin,username,password)</tt>	@param username the name of your pb identity.
<tt style='background-color:#E8E8E8;'> words.im.PBAccount <a href=' /words/im/pbsupport.py#L206'>logOn</a>(chatui)</tt>	@returns this breaks with l{interfaces iaccount}.
<tt style='background-color:#E8E8E8;'> words.im.ContactsList <a href=' /words/im/basechat.py#L31'>__init__</a>(chatui)</tt>	@param chatui the gui chat client associated with this contacts list.
<tt style='background-color:#E8E8E8;'> words.im.ContactsList <a href=' /words/im/basechat.py#L42'>setContactStatus</a>(person)</tt>	Inform the user that a person's status has changed.
<tt style='background-color:#E8E8E8;'> words.im.ContactsList <a href=' /words/im/basechat.py#L59'>registerAccountClient</a>(client)</tt>	Notify the user that an account client has been signed on to.
<tt style='background-color:#E8E8E8;'> words.im.ContactsList <a href=' /words/im/basechat.py#L70'>unregisterAccountClient</a>(client)</tt>	Notify the user that an account client has been signed off or disconnected from.
<tt style='background-color:#E8E8E8;'> words.im.ContactsList <a href=' /words/im/basechat.py#L83'>contactChangedNick</a>(person,newnick)</tt>	Update your contact information to reflect a change to a contact's nickname.
<tt style='background-color:#E8E8E8;'> words.im.Conversation <a href=' /words/im/basechat.py#L116'>__init__</a>(person,chatui)</tt>	@param person the person who you're having this conversation with.
<tt style='background-color:#E8E8E8;'> words.im.Conversation <a href=' /words/im/basechat.py#L128'>show</a>()</tt>	Display the conversationwindow.
<tt style='background-color:#E8E8E8;'> words.im.Conversation <a href=' /words/im/basechat.py#L135'>hide</a>()</tt>	Hide the conversationwindow.
<tt style='background-color:#E8E8E8;'> words.im.Conversation <a href=' /words/im/basechat.py#L142'>sendText</a>(text)</tt>	Send text to the person with whom the user is conversing.
<tt style='background-color:#E8E8E8;'> words.im.Conversation <a href=' /words/im/basechat.py#L152'>showMessage</a>(text,metadata)</tt>	Display a message sent from the person with whom the user is conversing.
<tt style='background-color:#E8E8E8;'> words.im.Conversation <a href=' /words/im/basechat.py#L165'>contactChangedNick</a>(person,newnick)</tt>	Change a person's name.
<tt style='background-color:#E8E8E8;'> words.im.GroupConversation <a href=' /words/im/basechat.py#L192'>__init__</a>(group,chatui)</tt>	@param chatui the gui chat client associated with this conversation.
<tt style='background-color:#E8E8E8;'> words.im.GroupConversation <a href=' /words/im/basechat.py#L205'>show</a>()</tt>	Display the groupconversationwindow.
<tt style='background-color:#E8E8E8;'> words.im.GroupConversation <a href=' /words/im/basechat.py#L212'>hide</a>()</tt>	Hide the groupconversationwindow.
<tt style='background-color:#E8E8E8;'> words.im.GroupConversation <a href=' /words/im/basechat.py#L219'>sendText</a>(text)</tt>	Send text to the group.
<tt style='background-color:#E8E8E8;'> words.im.GroupConversation <a href=' /words/im/basechat.py#L229'>showGroupMessage</a>(sender,text,metadata)</tt>	Display to the user a message sent to this group from the given sender.
<tt style='background-color:#E8E8E8;'> words.im.GroupConversation <a href=' /words/im/basechat.py#L245'>setGroupMembers</a>(members)</tt>	Set the list of members in the group.
<tt style='background-color:#E8E8E8;'> words.im.GroupConversation <a href=' /words/im/basechat.py#L255'>setTopic</a>(topic,author)</tt>	Change the topic for the group conversation window and display this change to the user.
<tt style='background-color:#E8E8E8;'> words.im.GroupConversation <a href=' /words/im/basechat.py#L269'>memberJoined</a>(member)</tt>	Add the given member to the list of members in the group conversation and displays this to the user.
<tt style='background-color:#E8E8E8;'> words.im.GroupConversation <a href=' /words/im/basechat.py#L281'>memberChangedNick</a>(oldnick,newnick)</tt>	Change the nickname for a member of the group conversation and displays this change to the user.
<tt style='background-color:#E8E8E8;'> words.im.GroupConversation <a href=' /words/im/basechat.py#L297'>memberLeft</a>(member)</tt>	Delete the given member from the list of members in the group conversation and displays the change to the user.
<tt style='background-color:#E8E8E8;'> words.im.ChatUI <a href=' /words/im/basechat.py#L345'>registerAccountClient</a>(client)</tt>	Notify the user that an account has been signed on to.
<tt style='background-color:#E8E8E8;'> words.im.ChatUI <a href=' /words/im/basechat.py#L360'>unregisterAccountClient</a>(client)</tt>	Notify the user that an account has been signed off or disconnected.
<tt style='background-color:#E8E8E8;'> words.im.ChatUI <a href=' /words/im/basechat.py#L372'>getContactsList</a>()</tt>	Get the contacts list associated with this chat window.
<tt style='background-color:#E8E8E8;'> words.im.ChatUI <a href=' /words/im/basechat.py#L382'>getConversation</a>(person,Class,stayHidden)</tt>	For the given person object return the conversation window or create and return a new conversation window if one does not exist.
<tt style='background-color:#E8E8E8;'> words.im.ChatUI <a href=' /words/im/basechat.py#L412'>getGroupConversation</a>(group,Class,stayHidden)</tt>	For the given group object return the group conversation window or create and return a new group conversation window if it doesn't exist.
<tt style='background-color:#E8E8E8;'> words.im.ChatUI <a href=' /words/im/basechat.py#L443'>getPerson</a>(name,client)</tt>	For the given name and account client return an instance of a l{igroup<interfaces.
<tt style='background-color:#E8E8E8;'> words.im.ChatUI <a href=' /words/im/basechat.py#L466'>getGroup</a>(name,client)</tt>	For the given name and account client return an instance of a l{igroup<interfaces.
<tt style='background-color:#E8E8E8;'> words.im.ChatUI <a href=' /words/im/basechat.py#L492'>contactChangedNick</a>(person,newnick)</tt>	For the given c{person}, change the c{person}'s c{name} to c{newnick} and tell the contact list and any conversation windows with that.
<tt style='background-color:#E8E8E8;'> words.im.IAccount <a href=' /words/im/interfaces.py#L29'>__init__</a>(accountName,autoLogin,username,password)</tt>	@type accountname string @param accountname a name to refer to the account by locally.
<tt style='background-color:#E8E8E8;'> words.im.IAccount <a href=' /words/im/interfaces.py#L40'>isOnline</a>()</tt>	Am i online?.
<tt style='background-color:#E8E8E8;'> words.im.IClient <a href=' /words/im/interfaces.py#L77'>__init__</a>(account,chatui,logonDeferred)</tt>	@type account l{iaccount} @type chatui l{ichatui}.
<tt style='background-color:#E8E8E8;'> words.im.IClient <a href=' /words/im/interfaces.py#L85'>joinGroup</a>(groupName)</tt>	@param groupname the name of the group to join.
<tt style='background-color:#E8E8E8;'> words.im.IClient <a href=' /words/im/interfaces.py#L91'>leaveGroup</a>(groupName)</tt>	@param groupname the name of the group to leave.
<tt style='background-color:#E8E8E8;'> words.im.IPerson <a href=' /words/im/interfaces.py#L119'>isOnline</a>()</tt>	Am i online right now?.
<tt style='background-color:#E8E8E8;'> words.im.IPerson <a href=' /words/im/interfaces.py#L127'>getStatus</a>()</tt>	What is my on-line status? @return l{locals.
<tt style='background-color:#E8E8E8;'> words.im.IPerson <a href=' /words/im/interfaces.py#L135'>getIdleTime</a>()</tt>	@rtype string (xxx how about a scalar?).
<tt style='background-color:#E8E8E8;'> words.im.IPerson <a href=' /words/im/interfaces.py#L141'>sendMessage</a>(text,metadata)</tt>	Send a message to this person.
<tt style='background-color:#E8E8E8;'> words.im.IGroup <a href=' /words/im/interfaces.py#L173'>setTopic</a>(text)</tt>	Set this groups topic on the server.
<tt style='background-color:#E8E8E8;'> words.im.IGroup <a href=' /words/im/interfaces.py#L181'>sendGroupMessage</a>(text,metadata)</tt>	Send a message to this group.
<tt style='background-color:#E8E8E8;'> words.im.IGroup <a href=' /words/im/interfaces.py#L195'>join</a>()</tt>	Join this group.
<tt style='background-color:#E8E8E8;'> words.im.IGroup <a href=' /words/im/interfaces.py#L201'>leave</a>()</tt>	Depart this group.
<tt style='background-color:#E8E8E8;'> words.im.IConversation <a href=' /words/im/interfaces.py#L213'>__init__</a>(person,chatui)</tt>	@type person l{iperson}.
<tt style='background-color:#E8E8E8;'> words.im.IConversation <a href=' /words/im/interfaces.py#L219'>show</a>()</tt>	Doesn't seem like it belongs in this interface.
<tt style='background-color:#E8E8E8;'> words.im.IConversation <a href=' /words/im/interfaces.py#L225'>hide</a>()</tt>	Nor this neither.
<tt style='background-color:#E8E8E8;'> words.im.IConversation <a href=' /words/im/interfaces.py#L239'>changedNick</a>(person,newnick)</tt>	@param person xxx shouldn't this always be conversation person?.
<tt style='background-color:#E8E8E8;'> words.im.IGroupConversation <a href=' /words/im/interfaces.py#L248'>show</a>()</tt>	Doesn't seem like it belongs in this interface.
<tt style='background-color:#E8E8E8;'> words.im.IGroupConversation <a href=' /words/im/interfaces.py#L254'>hide</a>()</tt>	Nor this neither.
<tt style='background-color:#E8E8E8;'> words.im.IGroupConversation <a href=' /words/im/interfaces.py#L268'>setGroupMembers</a>(members)</tt>	Sets the list of members in the group and displays it to the user.
<tt style='background-color:#E8E8E8;'> words.im.IGroupConversation <a href=' /words/im/interfaces.py#L274'>setTopic</a>(topic,author)</tt>	Displays the topic from the server for the group conversation window.
<tt style='background-color:#E8E8E8;'> words.im.IGroupConversation <a href=' /words/im/interfaces.py#L283'>memberJoined</a>(member)</tt>	Adds the given member to the list of members in the group conversation.
<tt style='background-color:#E8E8E8;'> words.im.IGroupConversation <a href=' /words/im/interfaces.py#L292'>memberChangedNick</a>(oldnick,newnick)</tt>	Changes the oldnick in the list of members to c{newnick} and displays this.
<tt style='background-color:#E8E8E8;'> words.im.IGroupConversation <a href=' /words/im/interfaces.py#L302'>memberLeft</a>(member)</tt>	Deletes the given member from the list of members in the group conversation and displays the change to the user.
<tt style='background-color:#E8E8E8;'> words.im.IChatUI <a href=' /words/im/interfaces.py#L314'>registerAccountClient</a>(client)</tt>	Notifies user that an account has been signed on to.
<tt style='background-color:#E8E8E8;'> words.im.IChatUI <a href=' /words/im/interfaces.py#L322'>unregisterAccountClient</a>(client)</tt>	Notifies user that an account has been signed off or disconnected.
<tt style='background-color:#E8E8E8;'> words.im.IChatUI <a href=' /words/im/interfaces.py#L338'>getConversation</a>(person,Class,stayHidden)</tt>	For the given person object returns the conversation window or creates and returns a new conversation window if one does not exist.
<tt style='background-color:#E8E8E8;'> words.im.IChatUI <a href=' /words/im/interfaces.py#L351'>getGroupConversation</a>(group,Class,stayHidden)</tt>	For the given group object returns the group conversation window or creates and returns a new group conversation window if it doesn't exist.
<tt style='background-color:#E8E8E8;'> words.im.IChatUI <a href=' /words/im/interfaces.py#L364'>getPerson</a>(name,client)</tt>	Get a person for a client.
<tt style='background-color:#E8E8E8;'> words.im.IChatUI <a href=' /words/im/interfaces.py#L377'>getGroup</a>(name,client)</tt>	Get a group for a client.
<tt style='background-color:#E8E8E8;'> words.im.IChatUI <a href=' /words/im/interfaces.py#L390'>contactChangedNick</a>(oldnick,newnick)</tt>	For the given person changes the person's name to newnick and tells the contact list and any conversation windows with that person.
<tt style='background-color:#E8E8E8;'> words.im.AccountManager <a href=' /words/im/baseaccount.py#L21'>getSnapShot</a>()</tt>	A snapshot of all the accounts and their status.
<tt style='background-color:#E8E8E8;'> words.im.AccountManager <a href=' /words/im/baseaccount.py#L49'>connect</a>(accountName,chatui)</tt>	@returntype deferred l{interfaces iclient}.
<tt style='background-color:#E8E8E8;'> words.im.IRCProto <a href=' /words/im/ircsupport.py#L138'>kickedFrom</a>(channel,kicker,message)</tt>	Called when i am kicked from a channel.
<tt style='background-color:#E8E8E8;'> words.im.IRCProto <a href=' /words/im/ircsupport.py#L177'>irc_RPL_NAMREPLY</a>(prefix,params)</tt>	Rpl_namreply >> names #bnl.
<tt style='background-color:#E8E8E8;'> words.im.AbstractGroup <a href=' /words/im/basesupport.py#L27'>getGroupCommands</a>()</tt>	Finds group commands.
<tt style='background-color:#E8E8E8;'> words.im.AbstractGroup <a href=' /words/im/basesupport.py#L35'>getTargetCommands</a>(target)</tt>	Finds group commands.
<tt style='background-color:#E8E8E8;'> words.im.AbstractPerson <a href=' /words/im/basesupport.py#L68'>getPersonCommands</a>()</tt>	Finds person commands.
<tt style='background-color:#E8E8E8;'> words.im.AbstractPerson <a href=' /words/im/basesupport.py#L76'>getIdleTime</a>()</tt>	Returns a string.
<tt style='background-color:#E8E8E8;'> words.im.AbstractClientMixin <a href=' /words/im/basesupport.py#L114'>unregisterAsAccountClient</a>()</tt>	Tell the chat ui that i have signed off'.
<tt style='background-color:#E8E8E8;'> words.im.AbstractAccount <a href=' /words/im/basesupport.py#L184'>logOn</a>(chatui)</tt>	Log on to this account.
<tt style='background-color:#E8E8E8;'> words.im.AbstractAccount <a href=' /words/im/basesupport.py#L231'>_startLogOn</a>(chatui)</tt>	Start the sign on process.
<tt style='background-color:#E8E8E8;'> words.im.AbstractAccount <a href=' /words/im/basesupport.py#L246'>_loginFailed</a>(reason)</tt>	Errorback for l{logon}.
<tt style='background-color:#E8E8E8;'> words.protocols.OscarConnection <a href=' /words/protocols/oscar.py#L302'>disconnect</a>()</tt>	Send the disconnect flap and sever the connection.
<tt style='background-color:#E8E8E8;'> words.protocols.SNACBased <a href=' /words/protocols/oscar.py#L322'>sendSNAC</a>(fam,sub,data,flags)</tt>	Send a snac and wait for the response by returning a deferred.
<tt style='background-color:#E8E8E8;'> words.protocols.SNACBased <a href=' /words/protocols/oscar.py#L342'>sendSNACnr</a>(fam,sub,data,flags)</tt>	Send a snac but don't bother adding a deferred we don't care.
<tt style='background-color:#E8E8E8;'> words.protocols.SNACBased <a href=' /words/protocols/oscar.py#L383'>oscar_01_0A</a>(snac)</tt>	Change of rate information.
<tt style='background-color:#E8E8E8;'> words.protocols.SNACBased <a href=' /words/protocols/oscar.py#L390'>oscar_01_18</a>(snac)</tt>	Host versions in the same format as we sent.
<tt style='background-color:#E8E8E8;'> words.protocols.SNACBased <a href=' /words/protocols/oscar.py#L396'>clientReady</a>()</tt>	Called when the client is ready to be online.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L450'>oscar_01_05</a>(snac,d)</tt>	Data for a new service connection.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L478'>oscar_01_10</a>(snac)</tt>	We've been warned.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L496'>oscar_02_03</a>(snac)</tt>	Location rights response.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L503'>oscar_03_03</a>(snac)</tt>	Buddy list rights response.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L525'>oscar_04_05</a>(snac)</tt>	Icbm parms response.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L531'>oscar_04_07</a>(snac)</tt>	Icbm message instant message.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L622'>oscar_09_03</a>(snac)</tt>	Bos rights response.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L630'>oscar_0B_02</a>(snac)</tt>	Stats reporting interval.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L636'>oscar_13_03</a>(snac)</tt>	Ssi rights response.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L644'>requestSelfInfo</a>()</tt>	Ask for the oscaruser for ourselves.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L655'>initSSI</a>()</tt>	This sends the rate request for family 0x13 server side information.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L665'>requestSSI</a>(timestamp,revision)</tt>	Request the server side information.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L721'>activateSSI</a>()</tt>	Active the data stored on the server use buddy list permit deny settings etc.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L727'>startModifySSI</a>()</tt>	Tell the oscar server to be on the lookout for ssi modifications.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L733'>addItemSSI</a>(item,groupID,buddyID)</tt>	Add an item to the ssi server if buddyid == 0 then this should be a group.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L770'>setProfile</a>(profile)</tt>	Set the profile.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L784'>setAway</a>(away)</tt>	Set the away message or return (if away == none).
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L793'>setIdleTime</a>(idleTime)</tt>	Set our idle time don't call more than once with a non-0 idle time.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L799'>sendMessage</a>(user,message,wantAck,autoResponse)</tt>	Send a message to user not an oscaruser.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L846'>connectService</a>(service,wantCallback,extraData)</tt>	Connect to another service if wantcallback we return a deferred that gets called back when the service is online.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L862'>createChat</a>(shortName)</tt>	Create a chat room.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L872'>joinChat</a>(exchange,fullName,instance)</tt>	Join a chat room.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L912'>initDone</a>()</tt>	Called when we get the rate information which means we should do other init stuff.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L919'>updateBuddy</a>(user)</tt>	Called when a buddy changes status with the oscaruser for that buddy.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L926'>offlineBuddy</a>(user)</tt>	Called when a buddy goes offline.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L933'>receiveMessage</a>(user,multiparts,flags)</tt>	Called when someone sends us a message.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L939'>receiveWarning</a>(newLevel,user)</tt>	Called when someone warns us.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L946'>receiveChatInvite</a>(user,message,exchange,fullName)</tt>	Called when someone invites us to a chat room.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L952'>chatReceiveMessage</a>(chat,user,message)</tt>	Called when someone in a chatroom sends us a message in the chat.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L958'>chatMemberJoined</a>(chat,member)</tt>	Called when a member joins the chat.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L964'>chatMemberLeft</a>(chat,member)</tt>	Called when a member leaves the chat.
<tt style='background-color:#E8E8E8;'> words.protocols.BOSConnection <a href=' /words/protocols/oscar.py#L970'>receiveSendFileRequest</a>(user,file,description,cookie)</tt>	Called when someone tries to send a file to us.
<tt style='background-color:#E8E8E8;'> words.protocols. <a href=' /words/protocols/irc.py#L77'>parsemsg</a>(s)</tt>	Breaks a message from an irc server into its prefix command and arguments.
<tt style='background-color:#E8E8E8;'> words.protocols. <a href=' /words/protocols/irc.py#L105'>split</a>(str,length)</tt>	Split a string into multiple lines.
<tt style='background-color:#E8E8E8;'> words.protocols. <a href=' /words/protocols/irc.py#L126'>_intOrDefault</a>(value,default)</tt>	Convert a value to an integer if possible.
<tt style='background-color:#E8E8E8;'> words.protocols._CommandDispatcherMixin <a href=' /words/protocols/irc.py#L166'>dispatch</a>(commandName)</tt>	Perform actual command dispatch.
<tt style='background-color:#E8E8E8;'> words.protocols. <a href=' /words/protocols/irc.py#L189'>parseModes</a>(modes,params,paramModes)</tt>	Parse an irc mode string.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L272'>sendMessage</a>(command)</tt>	Send a line formatted as an irc message.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L303'>sendCommand</a>(command,parameters,prefix,tags)</tt>	Send to the remote peer a line formatted as an irc message.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L349'>_stringTags</a>(tags)</tt>	Converts a tag dictionary to a string.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L368'>_validateTags</a>(tags)</tt>	Checks the tag dict for errors and raises l{valueerror} if an error is found.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L383'>_escapeTagValue</a>(value)</tt>	Escape the given tag value according to u{escaping rules in ircv3 <https //ircv3.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L402'>dataReceived</a>(data)</tt>	This hack is to support mirc which sends lf only even though the rfc says crlf.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L429'>handleCommand</a>(command,prefix,params)</tt>	Determine the function to call for the given command and call it with the given arguments.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L454'>irc_unknown</a>(prefix,command,params)</tt>	Called by l{handlecommand} on a command that doesn't have a defined handler.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L463'>privmsg</a>(sender,recip,message)</tt>	Send a message to a channel or user @type sender c{str} or c{unicode}.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L481'>notice</a>(sender,recip,message)</tt>	Send a "notice" to a channel or user.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L503'>action</a>(sender,recip,message)</tt>	Send an action to a channel or user.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L521'>topic</a>(user,channel,topic,author)</tt>	Send the topic to a user.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L550'>topicAuthor</a>(user,channel,author,date)</tt>	Send the author of and time at which a topic was set for the given channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L576'>names</a>(user,channel,names)</tt>	Send the names of a channel's participants to a user.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L612'>who</a>(user,channel,memberInfo)</tt>	Send a list of users participating in a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L641'>whois</a>(user,nick,username,hostname)</tt>	Send information about the state of a particular user.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L695'>join</a>(who,where)</tt>	Send a join message.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L709'>part</a>(who,where,reason)</tt>	Send a part message.
<tt style='background-color:#E8E8E8;'> words.protocols.IRC <a href=' /words/protocols/irc.py#L730'>channelMode</a>(user,channel,mode)</tt>	Send information about the mode of a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L776'>_splitParamArgs</a>(cls,params,valueProcessor)</tt>	Split isupport parameter arguments.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L809'>_unescapeParamValue</a>(cls,value)</tt>	Unescape an isupport parameter.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L836'>_splitParam</a>(cls,param)</tt>	Split an isupport parameter.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L852'>_parsePrefixParam</a>(cls,prefix)</tt>	Parse the isupport "prefix" parameter.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L875'>_parseChanModesParam</a>(params)</tt>	Parse the isupport "chanmodes" parameter.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L891'>getFeature</a>(feature,default)</tt>	Get a server supported feature's value.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L910'>hasFeature</a>(feature)</tt>	Determine whether a feature is supported or not.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L919'>parse</a>(params)</tt>	Parse isupport parameters.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L937'>isupport_unknown</a>(command,params)</tt>	Unknown isupport parameter.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L944'>isupport_CHANLIMIT</a>(params)</tt>	The maximum number of each channel type a user may join.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L951'>isupport_CHANMODES</a>(params)</tt>	Available channel modes.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L975'>isupport_CHANNELLEN</a>(params)</tt>	Maximum length of a channel name a client may create.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L982'>isupport_CHANTYPES</a>(params)</tt>	Valid channel prefixes.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L989'>isupport_EXCEPTS</a>(params)</tt>	Mode character for "ban exceptions".
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L999'>isupport_IDCHAN</a>(params)</tt>	Safe channel identifiers.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L1009'>isupport_INVEX</a>(params)</tt>	Mode character for "invite exceptions".
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L1019'>isupport_KICKLEN</a>(params)</tt>	Maximum length of a kick message a client may provide.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L1026'>isupport_MAXLIST</a>(params)</tt>	Maximum number of "list modes" a client may set on a channel at once.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L1035'>isupport_MODES</a>(params)</tt>	Maximum number of modes accepting parameters that may be sent by a client in a single mode command.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L1043'>isupport_NETWORK</a>(params)</tt>	Irc network name.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L1050'>isupport_NICKLEN</a>(params)</tt>	Maximum length of a nickname the client may use.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L1057'>isupport_PREFIX</a>(params)</tt>	Mapping of channel modes that clients may have to status flags.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L1067'>isupport_SAFELIST</a>(params)</tt>	Flag indicating that a client may request a list without being disconnected due to the large amount of data generated.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L1075'>isupport_STATUSMSG</a>(params)</tt>	The server supports sending messages to only to clients on a channel with a specific status.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L1083'>isupport_TARGMAX</a>(params)</tt>	Maximum number of targets allowable for commands that accept multiple targets.
<tt style='background-color:#E8E8E8;'> words.protocols.ServerSupportedFeatures <a href=' /words/protocols/irc.py#L1091'>isupport_TOPICLEN</a>(params)</tt>	Maximum length of a topic that may be set.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1249'>_createHeartbeat</a>()</tt>	Create the heartbeat l{loopingcall}.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1256'>_sendHeartbeat</a>()</tt>	Send a i{ping} message to the irc server as a form of keepalive.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1263'>stopHeartbeat</a>()</tt>	Stop sending i{ping} messages to keep the connection to the server alive.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1275'>startHeartbeat</a>()</tt>	Start sending i{ping} messages every l{ircclient heartbeatinterval}.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1296'>created</a>(when)</tt>	Called with creation date information about the server usually at logon.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1304'>yourHost</a>(info)</tt>	Called with daemon information about the server usually at logon.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1312'>myInfo</a>(servername,version,umodes,cmodes)</tt>	Called with information about the server usually at logon.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1329'>luserClient</a>(info)</tt>	Called with information about the number of connections usually at logon.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1338'>bounce</a>(info)</tt>	Called with information about where the client should reconnect.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1347'>isupport</a>(options)</tt>	Called with various information about what the server supports.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1356'>luserChannels</a>(channels)</tt>	Called with the number of channels existent on the server.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1363'>luserOp</a>(ops)</tt>	Called with the number of ops logged on to the server.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1370'>luserMe</a>(info)</tt>	Called with information about the server connected to.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1381'>privmsg</a>(user,channel,message)</tt>	Called when i have a message from a user to me or a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1387'>joined</a>(channel)</tt>	Called when i finish joining a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1395'>left</a>(channel)</tt>	Called when i have left a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1404'>noticed</a>(user,channel,message)</tt>	Called when i have a notice from a user to me or a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1419'>modeChanged</a>(user,channel,set,modes)</tt>	Called when users or channel's modes are changed.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1446'>pong</a>(user,secs)</tt>	Called with the results of a ctcp ping query.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1452'>signedOn</a>()</tt>	Called after successfully signing on to the server.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1458'>kickedFrom</a>(channel,kicker,message)</tt>	Called when i am kicked from a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1464'>nickChanged</a>(nick)</tt>	Called when my nick has been changed.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1473'>userJoined</a>(user,channel)</tt>	Called when i see another user joining a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1479'>userLeft</a>(user,channel)</tt>	Called when i see another user leaving a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1485'>userQuit</a>(user,quitMessage)</tt>	Called when i see another user disconnect from the network.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1491'>userKicked</a>(kickee,channel,kicker,message)</tt>	Called when i observe someone else being kicked from a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1497'>action</a>(user,channel,data)</tt>	Called when i see a user perform an action on a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1503'>topicUpdated</a>(user,channel,newTopic)</tt>	In channel user changed the topic to newtopic.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1511'>userRenamed</a>(oldname,newname)</tt>	A user changed their name from oldname to newname.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1519'>receivedMOTD</a>(motd)</tt>	I received a message-of-the-day banner from the server.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1535'>join</a>(channel,key)</tt>	Join a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1552'>leave</a>(channel,reason)</tt>	Leave a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1569'>kick</a>(channel,user,reason)</tt>	Attempt to kick a user from a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1591'>invite</a>(user,channel)</tt>	Attempt to invite user to channel @type user c{str}.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1607'>topic</a>(channel,topic)</tt>	Attempt to set the topic of the given channel or ask what it is.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1630'>mode</a>(chan,set,modes,limit)</tt>	Change the modes on a user or channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1665'>say</a>(channel,message,length)</tt>	Send a message to a channel @type channel c{str}.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1687'>_safeMaximumLineLength</a>(command)</tt>	Estimate a safe maximum line length for the given command.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1710'>msg</a>(user,message,length)</tt>	Send a message to a user or channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1746'>notice</a>(user,message)</tt>	Send a notice to a user.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1761'>away</a>(message)</tt>	Mark this client as away.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1771'>back</a>()</tt>	Clear the away status.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1779'>whois</a>(nickname,server)</tt>	Retrieve user information about the given nickname.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1794'>register</a>(nickname,hostname,servername)</tt>	Login to the server.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1813'>setNick</a>(nickname)</tt>	Set this client's nickname.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1824'>quit</a>(message)</tt>	Disconnect from the server @type message c{str}.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1837'>describe</a>(channel,action)</tt>	Strike a pose.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1854'>ping</a>(user,text)</tt>	Measure round-trip delay to another irc client.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1878'>dccSend</a>(user,file)</tt>	This is supposed to send a user a file directly this generally.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1892'>dccResume</a>(user,fileName,port,resumePos)</tt>	Send a dcc resume request to another user.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1900'>dccAcceptResume</a>(user,fileName,port,resumePos)</tt>	Send a dcc accept response to clients who have requested a resume.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1911'>irc_ERR_NICKNAMEINUSE</a>(prefix,params)</tt>	Called when we try to register or change to a nickname that is already taken.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1920'>alterCollidedNick</a>(nickname)</tt>	Generate an altered version of a nickname that caused a collision in an effort to create an unused related name for subsequent registration.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1934'>irc_ERR_ERRONEUSNICKNAME</a>(prefix,params)</tt>	Called when we try to register or change to an illegal nickname.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1949'>irc_ERR_PASSWDMISMATCH</a>(prefix,params)</tt>	Called when the login was incorrect.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1956'>irc_RPL_WELCOME</a>(prefix,params)</tt>	Called when we have received the welcome from the server.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1967'>irc_JOIN</a>(prefix,params)</tt>	Called when a user joins a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1978'>irc_PART</a>(prefix,params)</tt>	Called when a user leaves a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1989'>irc_QUIT</a>(prefix,params)</tt>	Called when a user has quit.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L1997'>irc_MODE</a>(user,params)</tt>	Parse a server mode change message.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2028'>irc_PING</a>(prefix,params)</tt>	Called when some has pinged us.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2034'>irc_PRIVMSG</a>(prefix,params)</tt>	Called when we get a message.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2058'>irc_NOTICE</a>(prefix,params)</tt>	Called when a user gets a notice.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2078'>irc_NICK</a>(prefix,params)</tt>	Called when a user changes their nickname.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2088'>irc_KICK</a>(prefix,params)</tt>	Called when a user is kicked from a channel.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2102'>irc_TOPIC</a>(prefix,params)</tt>	Someone in the channel set the topic.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2111'>irc_RPL_TOPIC</a>(prefix,params)</tt>	Called when the topic for a channel is initially reported or when it subsequently changes.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2140'>irc_RPL_ENDOFMOTD</a>(prefix,params)</tt>	I{rpl_endofmotd} indicates the end of the message of the day messages.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2199'>ctcpQuery</a>(user,channel,messages)</tt>	Dispatch method for any ctcp queries received.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2217'>ctcpUnknownQuery</a>(user,channel,tag,data)</tt>	Fallback handler for unrecognized ctcp queries.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2282'>ctcpQuery_CLIENTINFO</a>(user,channel,data)</tt>	A master index of what ctcp tags this client knows.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2329'>ctcpQuery_DCC</a>(user,channel,data)</tt>	Initiate a direct client connection @param user the hostmask of the user/client.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2433'>dccDoSend</a>(user,address,port,fileName)</tt>	Called when i receive a dcc send offer from a client.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2460'>dccDoResume</a>(user,file,port,resumePos)</tt>	Called when a client is trying to resume an offered file via dcc send.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2482'>dccDoAcceptResume</a>(user,file,port,resumePos)</tt>	Called when a client has verified and accepted a dcc resume request made by us.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2518'>ctcpMakeReply</a>(user,messages)</tt>	Send one or more c{extended messages} as a ctcp reply.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2529'>ctcpMakeQuery</a>(user,messages)</tt>	Send one or more c{extended messages} as a ctcp query.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2541'>ctcpReply</a>(user,channel,messages)</tt>	Dispatch method for any ctcp replies received.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2561'>ctcpUnknownReply</a>(user,channel,tag,data)</tt>	Called when a fitting ctcpreply_ method is not found.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2587'>badMessage</a>(line,excType,excValue,tb)</tt>	When i get a message that's so broken i can't use it.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2609'>quirkyMessage</a>(s)</tt>	This is called when i receive a message which is peculiar but not wholly indecipherable.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2649'>getUserModeParams</a>()</tt>	Get user modes that require parameters for correct parsing.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2659'>getChannelModeParams</a>()</tt>	Get channel modes that require parameters for correct parsing.
<tt style='background-color:#E8E8E8;'> words.protocols.IRCClient <a href=' /words/protocols/irc.py#L2681'>handleCommand</a>(command,prefix,params)</tt>	Determine the function to call for the given command and call it with the given arguments.
<tt style='background-color:#E8E8E8;'> words.protocols.DccFileReceiveBasic <a href=' /words/protocols/irc.py#L2746'>__init__</a>(resumeOffset)</tt>	@param resumeoffset an integer representing the amount of bytes from where the transfer of data should be resumed.
<tt style='background-color:#E8E8E8;'> words.protocols.DccFileReceiveBasic <a href=' /words/protocols/irc.py#L2755'>dataReceived</a>(data)</tt>	See l{protocol protocol datareceived}.
<tt style='background-color:#E8E8E8;'> words.protocols. <a href=' /words/protocols/irc.py#L2851'>fileSize</a>(file)</tt>	I'll try my damndest to determine the size of this file object.
<tt style='background-color:#E8E8E8;'> words.protocols.DccChat <a href=' /words/protocols/irc.py#L2916'>__init__</a>(client,queryData)</tt>	Initialize a new dcc chat session.
<tt style='background-color:#E8E8E8;'> words.protocols. <a href=' /words/protocols/irc.py#L2972'>dccDescribe</a>(data)</tt>	Given the data chunk from a dcc query return a descriptive string.
<tt style='background-color:#E8E8E8;'> words.protocols.DccFileReceive <a href=' /words/protocols/irc.py#L3085'>set_directory</a>(directory)</tt>	Set the directory where the downloaded file will be placed.
<tt style='background-color:#E8E8E8;'> words.protocols.DccFileReceive <a href=' /words/protocols/irc.py#L3108'>set_filename</a>(filename)</tt>	Change the name of the file being transferred.
<tt style='background-color:#E8E8E8;'> words.protocols.DccFileReceive <a href=' /words/protocols/irc.py#L3119'>set_overwrite</a>(boolean)</tt>	May i overwrite existing files? @param boolean a boolean value representing whether existing files.
<tt style='background-color:#E8E8E8;'> words.protocols.DccFileReceive <a href=' /words/protocols/irc.py#L3162'>connectionLost</a>(reason)</tt>	When the connection is lost i close the file.
<tt style='background-color:#E8E8E8;'> words.protocols._FormattingState <a href=' /words/protocols/irc.py#L3323'>toMIRCControlCodes</a>()</tt>	Emit a mirc control sequence that will set up all the attributes this formatting state has set.
<tt style='background-color:#E8E8E8;'> words.protocols. <a href=' /words/protocols/irc.py#L3349'>_foldr</a>(f,z,xs)</tt>	Apply a function of two arguments cumulatively to the items of a sequence from right to left so as to reduce the sequence to.
<tt style='background-color:#E8E8E8;'> words.protocols._FormattingParser <a href=' /words/protocols/irc.py#L3431'>complete</a>()</tt>	Flush the current buffer and return the final parsed result.
<tt style='background-color:#E8E8E8;'> words.protocols._FormattingParser <a href=' /words/protocols/irc.py#L3443'>emit</a>()</tt>	Add the currently parsed input to the result.
<tt style='background-color:#E8E8E8;'> words.protocols._FormattingParser <a href=' /words/protocols/irc.py#L3462'>state_TEXT</a>(ch)</tt>	Handle the "text" state.
<tt style='background-color:#E8E8E8;'> words.protocols._FormattingParser <a href=' /words/protocols/irc.py#L3487'>state_COLOR_FOREGROUND</a>(ch)</tt>	Handle the foreground color state.
<tt style='background-color:#E8E8E8;'> words.protocols._FormattingParser <a href=' /words/protocols/irc.py#L3524'>state_COLOR_BACKGROUND</a>(ch)</tt>	Handle the background color state.
<tt style='background-color:#E8E8E8;'> words.protocols. <a href=' /words/protocols/irc.py#L3552'>parseFormattedText</a>(text)</tt>	Parse text containing irc formatting codes into structured information.
<tt style='background-color:#E8E8E8;'> words.protocols. <a href=' /words/protocols/irc.py#L3572'>assembleFormattedText</a>(formatted)</tt>	Assemble formatted text from structured information.
<tt style='background-color:#E8E8E8;'> words.protocols. <a href=' /words/protocols/irc.py#L3629'>stripFormatting</a>(text)</tt>	Remove all formatting codes from c{text}, leaving only the text.
<tt style='background-color:#E8E8E8;'> words.protocols. <a href=' /words/protocols/irc.py#L3651'>ctcpExtract</a>(message)</tt>	Extract ctcp data from a string.
<tt style='background-color:#E8E8E8;'> words.protocols. <a href=' /words/protocols/irc.py#L3755'>ctcpStringify</a>(messages)</tt>	@type messages a list of extended messages an extended.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/xmlstream.py#L57'>hashPassword</a>(sid,password)</tt>	Create a sha1-digest string of a session identifier and password.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.Authenticator <a href=' /words/protocols/jabber/xmlstream.py#L102'>connectionMade</a>()</tt>	Called by the xmlstream when the underlying socket connection is in place.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.Authenticator <a href=' /words/protocols/jabber/xmlstream.py#L116'>streamStarted</a>(rootElement)</tt>	Called by the xmlstream when the stream has started.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.Authenticator <a href=' /words/protocols/jabber/xmlstream.py#L144'>associateWithStream</a>(xmlstream)</tt>	Called by the xmlstreamfactory when a connection has been made to the requested peer and an xmlstream object has been.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.ConnectAuthenticator <a href=' /words/protocols/jabber/xmlstream.py#L179'>initializeStream</a>()</tt>	Perform stream initialization procedures.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.ConnectAuthenticator <a href=' /words/protocols/jabber/xmlstream.py#L227'>streamStarted</a>(rootElement)</tt>	Called by the xmlstream when the stream has started.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.ListenAuthenticator <a href=' /words/protocols/jabber/xmlstream.py#L268'>associateWithStream</a>(xmlstream)</tt>	Called by the xmlstreamfactory when a connection has been made.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.ListenAuthenticator <a href=' /words/protocols/jabber/xmlstream.py#L279'>streamStarted</a>(rootElement)</tt>	Called by the xmlstream when the stream has started.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.BaseFeatureInitiatingInitializer <a href=' /words/protocols/jabber/xmlstream.py#L331'>initialize</a>()</tt>	Initiate the initialization.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.BaseFeatureInitiatingInitializer <a href=' /words/protocols/jabber/xmlstream.py#L350'>start</a>()</tt>	Start the actual initialization.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.TLSInitiatingInitializer <a href=' /words/protocols/jabber/xmlstream.py#L411'>onProceed</a>(obj)</tt>	Proceed with tls negotiation and reset the xml stream.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.TLSInitiatingInitializer <a href=' /words/protocols/jabber/xmlstream.py#L429'>start</a>()</tt>	Start tls negotiation.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XmlStream <a href=' /words/protocols/jabber/xmlstream.py#L521'>reset</a>()</tt>	Reset xml stream.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XmlStream <a href=' /words/protocols/jabber/xmlstream.py#L533'>onStreamError</a>(errelem)</tt>	Called when a stream error element has been received.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XmlStream <a href=' /words/protocols/jabber/xmlstream.py#L548'>sendHeader</a>()</tt>	Send stream header.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XmlStream <a href=' /words/protocols/jabber/xmlstream.py#L577'>sendFooter</a>()</tt>	Send stream footer.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XmlStream <a href=' /words/protocols/jabber/xmlstream.py#L584'>sendStreamError</a>(streamError)</tt>	Send stream level error.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XmlStream <a href=' /words/protocols/jabber/xmlstream.py#L607'>send</a>(obj)</tt>	Send data over the stream.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XmlStream <a href=' /words/protocols/jabber/xmlstream.py#L624'>connectionMade</a>()</tt>	Called when a connection is made.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XmlStream <a href=' /words/protocols/jabber/xmlstream.py#L634'>onDocumentStart</a>(rootElement)</tt>	Called when the stream header has been received.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XmlStreamServerFactory <a href=' /words/protocols/jabber/xmlstream.py#L700'>buildProtocol</a>(addr)</tt>	Create an instance of xmlstream.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/xmlstream.py#L723'>upgradeWithIQResponseTracker</a>(xs)</tt>	Enhances an xmlstream for iq response tracking.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IQ <a href=' /words/protocols/jabber/client.py#L37'>__init__</a>(xmlstream,stanzaType)</tt>	@type xmlstream l{xmlstream xmlstream}.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IQ <a href=' /words/protocols/jabber/client.py#L59'>send</a>(to)</tt>	Call this method to send this iq request via the associated xmlstream.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/xmlstream.py#L846'>toResponse</a>(stanza,stanzaType)</tt>	Create a response stanza from another stanza.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XMPPHandler <a href=' /words/protocols/jabber/xmlstream.py#L909'>connectionMade</a>()</tt>	Called after a connection has been established.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XMPPHandler <a href=' /words/protocols/jabber/xmlstream.py#L917'>connectionInitialized</a>()</tt>	The xml stream has been initialized.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XMPPHandler <a href=' /words/protocols/jabber/xmlstream.py#L926'>connectionLost</a>(reason)</tt>	The xml stream has been closed.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XMPPHandler <a href=' /words/protocols/jabber/xmlstream.py#L936'>send</a>(obj)</tt>	Send data over the managed xml stream.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XMPPHandlerCollection <a href=' /words/protocols/jabber/xmlstream.py#L972'>__iter__</a>()</tt>	Act as a container for handlers.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XMPPHandlerCollection <a href=' /words/protocols/jabber/xmlstream.py#L979'>addHandler</a>(handler)</tt>	Add protocol handler.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XMPPHandlerCollection <a href=' /words/protocols/jabber/xmlstream.py#L988'>removeHandler</a>(handler)</tt>	Remove protocol handler.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.StreamManager <a href=' /words/protocols/jabber/xmlstream.py#L1032'>addHandler</a>(handler)</tt>	Add protocol handler.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.StreamManager <a href=' /words/protocols/jabber/xmlstream.py#L1048'>_connected</a>(xs)</tt>	Called when the transport connection has been established.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.StreamManager <a href=' /words/protocols/jabber/xmlstream.py#L1072'>_authd</a>(xs)</tt>	Called when the stream has been initialized.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.StreamManager <a href=' /words/protocols/jabber/xmlstream.py#L1091'>initializationFailed</a>(reason)</tt>	Called when stream initialization has failed.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.StreamManager <a href=' /words/protocols/jabber/xmlstream.py#L1105'>_disconnected</a>(reason)</tt>	Called when the stream has been closed.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.StreamManager <a href=' /words/protocols/jabber/xmlstream.py#L1122'>send</a>(obj)</tt>	Send data over the xml stream.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/jid.py#L22'>parse</a>(jidstring)</tt>	Parse given jid string into its respective parts and apply stringprep.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/jid.py#L68'>prep</a>(user,host,resource)</tt>	Perform stringprep on all jid fragments.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/jid.py#L110'>internJID</a>(jidstring)</tt>	Return interned jid.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.JID <a href=' /words/protocols/jabber/jid.py#L146'>userhost</a>()</tt>	Extract the bare jid as a unicode string.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.JID <a href=' /words/protocols/jabber/jid.py#L160'>userhostJID</a>()</tt>	Extract the bare jid.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.JID <a href=' /words/protocols/jabber/jid.py#L178'>full</a>()</tt>	Return the string representation of this jid.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.JID <a href=' /words/protocols/jabber/jid.py#L233'>__unicode__</a>()</tt>	Get unicode representation.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.JID <a href=' /words/protocols/jabber/jid.py#L246'>__repr__</a>()</tt>	Get object representation.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/jstrports.py#L13'>_parseTCPSSL</a>(factory,domain,port)</tt>	For the moment parse tcp or ssl connections the same.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/sasl.py#L19'>get_mechanisms</a>(xs)</tt>	Parse the sasl feature to extract the available mechanism names.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/sasl.py#L76'>fromBase64</a>(s)</tt>	Decode base64 encoded string.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.SASLInitiatingInitializer <a href=' /words/protocols/jabber/sasl.py#L111'>setMechanism</a>()</tt>	Select and setup authentication mechanism.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.SASLInitiatingInitializer <a href=' /words/protocols/jabber/sasl.py#L140'>start</a>()</tt>	Start sasl authentication exchange.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.SASLInitiatingInitializer <a href=' /words/protocols/jabber/sasl.py#L154'>sendAuth</a>(data)</tt>	Initiate authentication protocol exchange.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.SASLInitiatingInitializer <a href=' /words/protocols/jabber/sasl.py#L172'>sendResponse</a>(data)</tt>	Send response to a challenge.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.SASLInitiatingInitializer <a href=' /words/protocols/jabber/sasl.py#L186'>onChallenge</a>(element)</tt>	Parse challenge and send response from the mechanism.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.SASLInitiatingInitializer <a href=' /words/protocols/jabber/sasl.py#L202'>onSuccess</a>(success)</tt>	Clean up observers reset the xml stream and send a new header.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.SASLInitiatingInitializer <a href=' /words/protocols/jabber/sasl.py#L218'>onFailure</a>(failure)</tt>	Clean up observers parse the failure and errback the deferred.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/component.py#L33'>componentFactory</a>(componentid,password)</tt>	Xml stream factory for external server-side components.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.ConnectComponentAuthenticator <a href=' /words/protocols/jabber/component.py#L88'>__init__</a>(componentjid,password)</tt>	@type componentjid c{str} @param componentjid jabber id that this component wishes to bind to.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.ListenComponentAuthenticator <a href=' /words/protocols/jabber/component.py#L125'>associateWithStream</a>(xs)</tt>	Associate the authenticator with a stream.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.ListenComponentAuthenticator <a href=' /words/protocols/jabber/component.py#L136'>streamStarted</a>(rootElement)</tt>	Called by the stream when it has started.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.ListenComponentAuthenticator <a href=' /words/protocols/jabber/component.py#L164'>onElement</a>(element)</tt>	Called on incoming xml stanzas.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.ListenComponentAuthenticator <a href=' /words/protocols/jabber/component.py#L180'>onHandshake</a>(handshake)</tt>	Called upon receiving the handshake request.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.Service <a href=' /words/protocols/jabber/component.py#L216'>send</a>(obj)</tt>	Send data over service parent's xml stream.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.ServiceManager <a href=' /words/protocols/jabber/component.py#L300'>send</a>(obj)</tt>	Send data over the xml stream.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/component.py#L317'>buildServiceManager</a>(jid,password,strport)</tt>	Constructs a pre-built l{servicemanager}, using the specified strport string.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.Router <a href=' /words/protocols/jabber/component.py#L355'>addRoute</a>(destination,xs)</tt>	Add a new route.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.Router <a href=' /words/protocols/jabber/component.py#L373'>removeRoute</a>(destination,xs)</tt>	Remove a route.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.Router <a href=' /words/protocols/jabber/component.py#L387'>route</a>(stanza)</tt>	Route a stanza.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XMPPComponentServerFactory <a href=' /words/protocols/jabber/component.py#L434'>onConnectionMade</a>(xs)</tt>	Called when a component connection was made.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XMPPComponentServerFactory <a href=' /words/protocols/jabber/component.py#L456'>onAuthenticated</a>(xs)</tt>	Called when a component has successfully authenticated.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IQ <a href=' /words/protocols/jabber/client.py#L37'>__init__</a>(xmlstream,type)</tt>	@type xmlstream l{xmlstream xmlstream}.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IQ <a href=' /words/protocols/jabber/client.py#L52'>addCallback</a>(fn)</tt>	Register a callback for notification when the iq result is available.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/client.py#L305'>XMPPClientFactory</a>(jid,password)</tt>	Client factory for xmpp 1 0 only.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.XMPPAuthenticator <a href=' /words/protocols/jabber/client.py#L369'>associateWithStream</a>(xs)</tt>	Register with the xml stream.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.BaseError <a href=' /words/protocols/jabber/error.py#L107'>getElement</a>()</tt>	Get xml representation from self.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.StreamError <a href=' /words/protocols/jabber/error.py#L138'>getElement</a>()</tt>	Get xml representation from self.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.StanzaError <a href=' /words/protocols/jabber/error.py#L191'>getElement</a>()</tt>	Get xml representation from self.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.StanzaError <a href=' /words/protocols/jabber/error.py#L208'>toResponse</a>(stanza)</tt>	Construct error response stanza.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/error.py#L236'>_parseError</a>(error,errorNamespace)</tt>	Parses an error element.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/error.py#L274'>exceptionFromStreamError</a>(element)</tt>	Build an exception object from a stream error.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber. <a href=' /words/protocols/jabber/error.py#L294'>exceptionFromStanza</a>(stanza)</tt>	Build an exception object from an error stanza.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.ILookupTable <a href=' /words/protocols/jabber/xmpp_stringprep.py#L34'>lookup</a>(c)</tt>	Return whether character is in this table.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IMappingTable <a href=' /words/protocols/jabber/xmpp_stringprep.py#L46'>map</a>(c)</tt>	Return mapping for character.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IInitiatingInitializer <a href=' /words/protocols/jabber/ijabber.py#L27'>initialize</a>()</tt>	Initiate the initialization step.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IXMPPHandler <a href=' /words/protocols/jabber/ijabber.py#L69'>setHandlerParent</a>(parent)</tt>	Set the parent of the handler.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IXMPPHandler <a href=' /words/protocols/jabber/ijabber.py#L77'>disownHandlerParent</a>(parent)</tt>	Remove the parent of the handler.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IXMPPHandler <a href=' /words/protocols/jabber/ijabber.py#L85'>makeConnection</a>(xs)</tt>	A connection over the underlying transport of the xml stream has been established.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IXMPPHandler <a href=' /words/protocols/jabber/ijabber.py#L100'>connectionMade</a>()</tt>	Called after a connection has been established.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IXMPPHandler <a href=' /words/protocols/jabber/ijabber.py#L110'>connectionInitialized</a>()</tt>	The xml stream has been initialized.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IXMPPHandler <a href=' /words/protocols/jabber/ijabber.py#L120'>connectionLost</a>(reason)</tt>	The xml stream has been closed.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IXMPPHandlerCollection <a href=' /words/protocols/jabber/ijabber.py#L139'>__iter__</a>()</tt>	Get an iterator over all child handlers.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IXMPPHandlerCollection <a href=' /words/protocols/jabber/ijabber.py#L145'>addHandler</a>(handler)</tt>	Add a child handler.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IXMPPHandlerCollection <a href=' /words/protocols/jabber/ijabber.py#L153'>removeHandler</a>(handler)</tt>	Remove a child handler.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IService <a href=' /words/protocols/jabber/ijabber.py#L170'>componentConnected</a>(xs)</tt>	Parent component has established a connection.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IService <a href=' /words/protocols/jabber/ijabber.py#L183'>componentDisconnected</a>()</tt>	Parent component has lost the connection to the jabber server.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.IService <a href=' /words/protocols/jabber/ijabber.py#L192'>transportConnected</a>(xs)</tt>	Parent component has established a connection over the underlying transport.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.ISASLMechanism <a href=' /words/protocols/jabber/sasl_mechanisms.py#L23'>getInitialResponse</a>()</tt>	Get the initial client response if defined for this mechanism.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.ISASLMechanism <a href=' /words/protocols/jabber/sasl_mechanisms.py#L32'>getResponse</a>(challenge)</tt>	Get the response to a server challenge.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.Plain <a href=' /words/protocols/jabber/sasl_mechanisms.py#L67'>__init__</a>(authzid,authcid,password)</tt>	@param authzid the authorization identity.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.DigestMD5 <a href=' /words/protocols/jabber/sasl_mechanisms.py#L100'>__init__</a>(serv_type,host,serv_name,username)</tt>	@param serv_type an indication of what kind of server authentication is being attempted against.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.DigestMD5 <a href=' /words/protocols/jabber/sasl_mechanisms.py#L154'>_parse</a>(challenge)</tt>	Parses the server challenge.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.DigestMD5 <a href=' /words/protocols/jabber/sasl_mechanisms.py#L198'>_unparse</a>(directives)</tt>	Create message string from directives.
<tt style='background-color:#E8E8E8;'> words.protocols.jabber.DigestMD5 <a href=' /words/protocols/jabber/sasl_mechanisms.py#L223'>_calculateResponse</a>(cnonce,nc,nonce,username)</tt>	Calculates response with given encoded parameters.
<tt style='background-color:#E8E8E8;'> pair. <a href=' /pair/testing.py#L33'>_H</a>(n)</tt>	Pack an integer into a network-order two-byte string.
<tt style='background-color:#E8E8E8;'> pair. <a href=' /pair/testing.py#L49'>_ethernet</a>(src,dst,protocol,payload)</tt>	Construct an ethernet frame.
<tt style='background-color:#E8E8E8;'> pair. <a href=' /pair/testing.py#L72'>_ip</a>(src,dst,payload)</tt>	Construct an ip datagram with the given source destination and application payload.
<tt style='background-color:#E8E8E8;'> pair. <a href=' /pair/testing.py#L125'>_udp</a>(src,dst,payload)</tt>	Construct a udp datagram with the given source destination and application payload.
<tt style='background-color:#E8E8E8;'> pair.Tunnel <a href=' /pair/testing.py#L178'>__init__</a>(system,openFlags,fileMode)</tt>	@param system an l{_iinputoutputsystem} provider to use to perform i/o.
<tt style='background-color:#E8E8E8;'> pair.Tunnel <a href=' /pair/testing.py#L202'>blocking</a>()</tt>	If the file descriptor for this tunnel is open in blocking mode c{true}.
<tt style='background-color:#E8E8E8;'> pair.Tunnel <a href=' /pair/testing.py#L211'>closeOnExec</a>()</tt>	If the file descriptor for this tunnel is marked as close-on-exec c{true}.
<tt style='background-color:#E8E8E8;'> pair.Tunnel <a href=' /pair/testing.py#L220'>addToReadBuffer</a>(datagram)</tt>	Deliver a datagram to this tunnel's read buffer this makes it.
<tt style='background-color:#E8E8E8;'> pair.Tunnel <a href=' /pair/testing.py#L238'>read</a>(limit)</tt>	Read a datagram out of this tunnel.
<tt style='background-color:#E8E8E8;'> pair.Tunnel <a href=' /pair/testing.py#L274'>write</a>(datagram)</tt>	Write a datagram into this tunnel.
<tt style='background-color:#E8E8E8;'> pair. <a href=' /pair/testing.py#L299'>_privileged</a>(original)</tt>	Wrap a l{memoryiosystem} method with permission-checking logic the.
<tt style='background-color:#E8E8E8;'> pair.MemoryIOSystem <a href=' /pair/testing.py#L343'>getTunnel</a>(port)</tt>	Get the l{tunnel} object associated with the given l{tuntapport}.
<tt style='background-color:#E8E8E8;'> pair.MemoryIOSystem <a href=' /pair/testing.py#L357'>registerSpecialDevice</a>(name,cls)</tt>	Specify a class which will be used to handle i/o to a device of a particular name.
<tt style='background-color:#E8E8E8;'> pair.MemoryIOSystem <a href=' /pair/testing.py#L371'>open</a>(name,flags,mode)</tt>	A replacement for c{os open} this initializes state in this.
<tt style='background-color:#E8E8E8;'> pair.MemoryIOSystem <a href=' /pair/testing.py#L403'>read</a>(fd,limit)</tt>	Try to read some bytes out of one of the in-memory buffers which may previously have been populated by c{write}.
<tt style='background-color:#E8E8E8;'> pair.MemoryIOSystem <a href=' /pair/testing.py#L416'>write</a>(fd,data)</tt>	Try to add some bytes to one of the in-memory buffers to be accessed by a later c{read} call.
<tt style='background-color:#E8E8E8;'> pair.MemoryIOSystem <a href=' /pair/testing.py#L429'>close</a>(fd)</tt>	Discard the in-memory buffer and other in-memory state for the given file descriptor.
<tt style='background-color:#E8E8E8;'> pair.MemoryIOSystem <a href=' /pair/testing.py#L442'>ioctl</a>(fd,request,args)</tt>	Perform some configuration change to the in-memory state for the given file descriptor.
<tt style='background-color:#E8E8E8;'> pair.MemoryIOSystem <a href=' /pair/testing.py#L466'>sendUDP</a>(datagram,address)</tt>	Write an ethernet frame containing an ip datagram containing a udp datagram containing the given payload addressed to the given address.
<tt style='background-color:#E8E8E8;'> pair.MemoryIOSystem <a href=' /pair/testing.py#L496'>receiveUDP</a>(fileno,host,port)</tt>	Get a socket-like object which can be used to receive a datagram sent from the given address.
<tt style='background-color:#E8E8E8;'> pair._FakePort <a href=' /pair/testing.py#L529'>recv</a>(nbytes)</tt>	Receive a datagram sent to this port using the l{memoryiosystem} which created this object.
<tt style='background-color:#E8E8E8;'> pair.TunnelAddress <a href=' /pair/tuntap.py#L81'>_typeValue</a>()</tt>	Return the integer value of the c{type} attribute used to produce.
<tt style='background-color:#E8E8E8;'> pair.TunnelAddress <a href=' /pair/tuntap.py#L91'>__init__</a>(type,name)</tt>	@param type either l{tunnelflags iff_tun} or l{tunnelflags iff_tap},.
<tt style='background-color:#E8E8E8;'> pair.TunnelAddress <a href=' /pair/tuntap.py#L103'>__getitem__</a>(index)</tt>	Deprecated accessor for the tunnel name use attributes instead.
<tt style='background-color:#E8E8E8;'> pair._IInputOutputSystem <a href=' /pair/tuntap.py#L137'>open</a>(filename,flag,mode)</tt>	@see l{os open}.
<tt style='background-color:#E8E8E8;'> pair._IInputOutputSystem <a href=' /pair/tuntap.py#L143'>ioctl</a>(fd,opt,arg,mutate_flag)</tt>	@see l{fcntl ioctl}.
<tt style='background-color:#E8E8E8;'> pair._IInputOutputSystem <a href=' /pair/tuntap.py#L149'>read</a>(fd,limit)</tt>	@see l{os read}.
<tt style='background-color:#E8E8E8;'> pair._IInputOutputSystem <a href=' /pair/tuntap.py#L155'>write</a>(fd,data)</tt>	@see l{os write}.
<tt style='background-color:#E8E8E8;'> pair._IInputOutputSystem <a href=' /pair/tuntap.py#L161'>close</a>(fd)</tt>	@see l{os close}.
<tt style='background-color:#E8E8E8;'> pair._IInputOutputSystem <a href=' /pair/tuntap.py#L167'>sendUDP</a>(datagram,address)</tt>	Send a datagram to a certain address.
<tt style='background-color:#E8E8E8;'> pair._IInputOutputSystem <a href=' /pair/tuntap.py#L182'>receiveUDP</a>(fileno,host,port)</tt>	Return a socket which can be used to receive datagrams sent to the given address.
<tt style='background-color:#E8E8E8;'> pair.TuntapPort <a href=' /pair/tuntap.py#L263'>startListening</a>()</tt>	Create and bind my socket and begin listening on it.
<tt style='background-color:#E8E8E8;'> pair.TuntapPort <a href=' /pair/tuntap.py#L275'>_openTunnel</a>(name,mode)</tt>	Open the named tunnel using the given mode.
<tt style='background-color:#E8E8E8;'> pair.TuntapPort <a href=' /pair/tuntap.py#L296'>_bindSocket</a>()</tt>	Open the tunnel.
<tt style='background-color:#E8E8E8;'> pair.TuntapPort <a href=' /pair/tuntap.py#L320'>doRead</a>()</tt>	Called when my socket is ready for reading.
<tt style='background-color:#E8E8E8;'> pair.TuntapPort <a href=' /pair/tuntap.py#L346'>write</a>(datagram)</tt>	Write the given data as a single datagram.
<tt style='background-color:#E8E8E8;'> pair.TuntapPort <a href=' /pair/tuntap.py#L362'>writeSequence</a>(seq)</tt>	Write a datagram constructed from a l{list} of l{bytes}.
<tt style='background-color:#E8E8E8;'> pair.TuntapPort <a href=' /pair/tuntap.py#L373'>stopListening</a>()</tt>	Stop accepting connections on this port.
<tt style='background-color:#E8E8E8;'> pair.TuntapPort <a href=' /pair/tuntap.py#L393'>loseConnection</a>()</tt>	Close this tunnel use l{tuntapport stoplistening} instead.
<tt style='background-color:#E8E8E8;'> pair.TuntapPort <a href=' /pair/tuntap.py#L400'>connectionLost</a>(reason)</tt>	Cleans up my socket.
<tt style='background-color:#E8E8E8;'> pair.TuntapPort <a href=' /pair/tuntap.py#L414'>logPrefix</a>()</tt>	Returns the name of my class to prefix log entries with.
<tt style='background-color:#E8E8E8;'> pair.TuntapPort <a href=' /pair/tuntap.py#L421'>getHost</a>()</tt>	Get the local address of this l{tuntapport}.
<tt style='background-color:#E8E8E8;'> pair.IRawDatagramProtocol <a href=' /pair/raw.py#L15'>addProto</a>()</tt>	Add a protocol on top of this one.
<tt style='background-color:#E8E8E8;'> pair.IRawDatagramProtocol <a href=' /pair/raw.py#L20'>datagramReceived</a>()</tt>	An ip datagram has been received parse and process it.
<tt style='background-color:#E8E8E8;'> pair.IRawPacketProtocol <a href=' /pair/raw.py#L32'>addProto</a>()</tt>	Add a protocol on top of this one.
<tt style='background-color:#E8E8E8;'> pair.IRawPacketProtocol <a href=' /pair/raw.py#L37'>datagramReceived</a>()</tt>	An ip datagram has been received parse and process it.
<tt style='background-color:#E8E8E8;'> pair.IEthernetProtocol <a href=' /pair/ethernet.py#L20'>addProto</a>()</tt>	Add an irawpacketprotocol protocol.
<tt style='background-color:#E8E8E8;'> pair.IEthernetProtocol <a href=' /pair/ethernet.py#L23'>datagramReceived</a>()</tt>	An ethernet frame has been received.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L139'>makeConnection</a>(transport)</tt>	Initializes the protocol.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L152'>sendString</a>(string)</tt>	Sends a netstring.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L166'>dataReceived</a>(data)</tt>	Receives some characters of a netstring.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L188'>stringReceived</a>(string)</tt>	Override this for notification when each complete string is received.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L202'>_maxLengthSize</a>()</tt>	Calculate and return the string size of c{self max_length}.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L212'>_consumeData</a>()</tt>	Consumes the content of c{self _remainingdata}.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L228'>_consumeLength</a>()</tt>	Consumes the length portion of c{self _remainingdata}.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L245'>_checkPartialLengthSpecification</a>()</tt>	Makes sure that the received data represents a valid number.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L262'>_processLength</a>(lengthMatch)</tt>	Processes the length definition of a netstring.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L286'>_extractLength</a>(lengthAsString)</tt>	Attempts to extract the length information of a netstring.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L305'>_checkStringSize</a>(lengthAsString)</tt>	Checks the sanity of lengthasstring.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L324'>_prepareForPayloadConsumption</a>()</tt>	Sets up variables necessary for consuming the payload of a netstring.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L334'>_consumePayload</a>()</tt>	Consumes the payload portion of c{self _remainingdata}.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L355'>_extractPayload</a>()</tt>	Extracts payload information from c{self _remainingdata}.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L378'>_payloadComplete</a>()</tt>	Checks if enough data have been received to complete the netstring.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L391'>_processPayload</a>()</tt>	Processes the actual payload with l{stringreceived}.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L401'>_checkForTrailingComma</a>()</tt>	Checks if the netstring has a trailing comma at the expected position.
<tt style='background-color:#E8E8E8;'> protocols.NetstringReceiver <a href=' /protocols/basic.py#L412'>_handleParseError</a>()</tt>	Terminates the connection and sets the flag c{self brokenpeer}.
<tt style='background-color:#E8E8E8;'> protocols.LineOnlyReceiver <a href=' /protocols/basic.py#L438'>dataReceived</a>(data)</tt>	Translates bytes into lines and calls linereceived.
<tt style='background-color:#E8E8E8;'> protocols.LineOnlyReceiver <a href=' /protocols/basic.py#L459'>lineReceived</a>(line)</tt>	Override this for when each line is received.
<tt style='background-color:#E8E8E8;'> protocols.LineOnlyReceiver <a href=' /protocols/basic.py#L469'>sendLine</a>(line)</tt>	Sends a line to the other end of the connection.
<tt style='background-color:#E8E8E8;'> protocols.LineOnlyReceiver <a href=' /protocols/basic.py#L479'>lineLengthExceeded</a>(line)</tt>	Called when the maximum line length has been reached.
<tt style='background-color:#E8E8E8;'> protocols.LineReceiver <a href=' /protocols/basic.py#L531'>clearLineBuffer</a>()</tt>	Clear buffered data.
<tt style='background-color:#E8E8E8;'> protocols.LineReceiver <a href=' /protocols/basic.py#L585'>setLineMode</a>(extra)</tt>	Sets the line-mode of this receiver.
<tt style='background-color:#E8E8E8;'> protocols.LineReceiver <a href=' /protocols/basic.py#L602'>setRawMode</a>()</tt>	Sets the raw mode of this receiver.
<tt style='background-color:#E8E8E8;'> protocols.LineReceiver <a href=' /protocols/basic.py#L611'>rawDataReceived</a>(data)</tt>	Override this for when raw data is received.
<tt style='background-color:#E8E8E8;'> protocols.LineReceiver <a href=' /protocols/basic.py#L618'>lineReceived</a>(line)</tt>	Override this for when each line is received.
<tt style='background-color:#E8E8E8;'> protocols.LineReceiver <a href=' /protocols/basic.py#L628'>sendLine</a>(line)</tt>	Sends a line to the other end of the connection.
<tt style='background-color:#E8E8E8;'> protocols.LineReceiver <a href=' /protocols/basic.py#L638'>lineLengthExceeded</a>(line)</tt>	Called when the maximum line length has been reached.
<tt style='background-color:#E8E8E8;'> protocols.IntNStringReceiver <a href=' /protocols/basic.py#L712'>stringReceived</a>(string)</tt>	Override this for notification when each complete string is received.
<tt style='background-color:#E8E8E8;'> protocols.IntNStringReceiver <a href=' /protocols/basic.py#L723'>lengthLimitExceeded</a>(length)</tt>	Callback invoked when a length prefix greater than c{max_length} is received.
<tt style='background-color:#E8E8E8;'> protocols.IntNStringReceiver <a href=' /protocols/basic.py#L735'>dataReceived</a>(data)</tt>	Convert int prefixed strings into calls to stringreceived.
<tt style='background-color:#E8E8E8;'> protocols.IntNStringReceiver <a href=' /protocols/basic.py#L785'>sendString</a>(string)</tt>	Send a prefixed string to the other end of the connection.
<tt style='background-color:#E8E8E8;'> protocols.StatefulStringProtocol <a href=' /protocols/basic.py#L861'>stringReceived</a>(string)</tt>	Choose a protocol phase function and call it.
<tt style='background-color:#E8E8E8;'> protocols.FileSender <a href=' /protocols/basic.py#L898'>beginFileTransfer</a>(file,consumer,transform)</tt>	Begin transferring a file @type file any file-like object.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/policies.py#L25'>_wrappedLogPrefix</a>(wrapper,wrapped)</tt>	Compute a log prefix for a wrapper and the object it wraps.
<tt style='background-color:#E8E8E8;'> protocols.ProtocolWrapper <a href=' /protocols/policies.py#L58'>logPrefix</a>()</tt>	Use a customized log prefix mentioning both the wrapped protocol and the current one.
<tt style='background-color:#E8E8E8;'> protocols.ProtocolWrapper <a href=' /protocols/ftp.py#L2355'>makeConnection</a>(transport)</tt>	When a connection is made register this wrapper with its factory save the real transport and connect the wrapped protocol to this.
<tt style='background-color:#E8E8E8;'> protocols.WrappingFactory <a href=' /protocols/policies.py#L141'>logPrefix</a>()</tt>	Generate a log prefix mentioning both the wrapped factory and this one.
<tt style='background-color:#E8E8E8;'> protocols.WrappingFactory <a href=' /protocols/policies.py#L174'>registerProtocol</a>(p)</tt>	Called by protocol to register itself.
<tt style='background-color:#E8E8E8;'> protocols.WrappingFactory <a href=' /protocols/policies.py#L181'>unregisterProtocol</a>(p)</tt>	Called by protocols when they go away.
<tt style='background-color:#E8E8E8;'> protocols.ThrottlingFactory <a href=' /protocols/policies.py#L265'>callLater</a>(period,func)</tt>	Wrapper around l{reactor.
<tt style='background-color:#E8E8E8;'> protocols.ThrottlingFactory <a href=' /protocols/policies.py#L275'>registerWritten</a>(length)</tt>	Called by protocol to tell us more bytes were written.
<tt style='background-color:#E8E8E8;'> protocols.ThrottlingFactory <a href=' /protocols/policies.py#L282'>registerRead</a>(length)</tt>	Called by protocol to tell us more bytes were read.
<tt style='background-color:#E8E8E8;'> protocols.ThrottlingFactory <a href=' /protocols/policies.py#L289'>checkReadBandwidth</a>()</tt>	Checks if we've passed bandwidth limits.
<tt style='background-color:#E8E8E8;'> protocols.ThrottlingFactory <a href=' /protocols/policies.py#L313'>throttleReads</a>()</tt>	Throttle reads on all protocols.
<tt style='background-color:#E8E8E8;'> protocols.ThrottlingFactory <a href=' /protocols/policies.py#L322'>unthrottleReads</a>()</tt>	Stop throttling reads on all protocols.
<tt style='background-color:#E8E8E8;'> protocols.ThrottlingFactory <a href=' /protocols/policies.py#L332'>throttleWrites</a>()</tt>	Throttle writes on all protocols.
<tt style='background-color:#E8E8E8;'> protocols.ThrottlingFactory <a href=' /protocols/policies.py#L341'>unthrottleWrites</a>()</tt>	Stop throttling writes on all protocols.
<tt style='background-color:#E8E8E8;'> protocols.TimeoutProtocol <a href=' /protocols/policies.py#L480'>setTimeout</a>(timeoutPeriod)</tt>	Set a timeout.
<tt style='background-color:#E8E8E8;'> protocols.TimeoutProtocol <a href=' /protocols/policies.py#L495'>cancelTimeout</a>()</tt>	Cancel the timeout.
<tt style='background-color:#E8E8E8;'> protocols.TimeoutProtocol <a href=' /protocols/policies.py#L509'>resetTimeout</a>()</tt>	Reset the timeout usually because some activity just happened.
<tt style='background-color:#E8E8E8;'> protocols.TimeoutProtocol <a href=' /protocols/policies.py#L537'>timeoutFunc</a>()</tt>	This method is called when the timeout is triggered.
<tt style='background-color:#E8E8E8;'> protocols.TimeoutFactory <a href=' /protocols/policies.py#L565'>callLater</a>(period,func)</tt>	Wrapper around l{reactor.
<tt style='background-color:#E8E8E8;'> protocols.TrafficLoggingProtocol <a href=' /protocols/policies.py#L578'>__init__</a>(factory,wrappedProtocol,logfile,lengthLimit)</tt>	@param factory factory which created this protocol.
<tt style='background-color:#E8E8E8;'> protocols.TrafficLoggingFactory <a href=' /protocols/policies.py#L664'>resetCounter</a>()</tt>	Reset the value of the counter used to identify connections.
<tt style='background-color:#E8E8E8;'> protocols.TimeoutMixin <a href=' /protocols/policies.py#L686'>callLater</a>(period,func)</tt>	Wrapper around l{reactor.
<tt style='background-color:#E8E8E8;'> protocols.TimeoutMixin <a href=' /protocols/policies.py#L696'>resetTimeout</a>()</tt>	Reset the timeout count down.
<tt style='background-color:#E8E8E8;'> protocols.TimeoutMixin <a href=' /protocols/policies.py#L711'>setTimeout</a>(period)</tt>	Change the timeout period @type period c{int} or l{none}.
<tt style='background-color:#E8E8E8;'> protocols.TimeoutMixin <a href=' /protocols/policies.py#L737'>timeoutConnection</a>()</tt>	Called when the connection times out.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/ftp.py#L181'>toSegments</a>(cwd,path)</tt>	Normalize a path as represented by a list of strings each representing one segment of the path.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/ftp.py#L206'>errnoToFailure</a>(e,path)</tt>	Map c{oserror} and c{ioerror} to standard ftp errors.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/ftp.py#L227'>_isGlobbingExpression</a>(segments)</tt>	Helper for checking if a ftpshell segments contains a wildcard unix expression.
<tt style='background-color:#E8E8E8;'> protocols.FTPCmdError <a href=' /protocols/ftp.py#L269'>response</a>()</tt>	Generate a ftp response message for this error.
<tt style='background-color:#E8E8E8;'> protocols.DTP <a href=' /protocols/ftp.py#L420'>sendLine</a>(line)</tt>	Send a line to data channel.
<tt style='background-color:#E8E8E8;'> protocols.DTP <a href=' /protocols/ftp.py#L430'>_formatOneListResponse</a>(name,size,directory,permissions)</tt>	Helper method to format one entry's info into a text entry like 'drwxrwxrwx 0 user group 0 jan 01 1970 filename.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L753'>sendLine</a>(line)</tt>	Private encodes and sends a line.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L867'>getDTPPort</a>(factory)</tt>	Return a port for passive access using c{self passiveportrange}.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L884'>ftp_USER</a>(username)</tt>	First part of login get the username the peer wants to.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L902'>ftp_PASS</a>(password)</tt>	Second part of login get the password the peer wants to.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L936'>ftp_PASV</a>()</tt>	Request for a passive connection from the rfc :.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L984'>_encodeName</a>(name)</tt>	Encode c{name} to be sent over the wire.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L1016'>ftp_LIST</a>(path)</tt>	This command causes a list to be sent from the server to the passive dtp.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L1054'>ftp_NLST</a>(path)</tt>	This command causes a directory listing to be sent from the server to the client.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L1158'>ftp_RETR</a>(path)</tt>	This command causes the content of a file to be sent over the data transfer channel.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L1231'>ftp_STOR</a>(path)</tt>	Store stor this command causes the server-dtp to accept the data.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L1328'>ftp_SIZE</a>(path)</tt>	File size the ftp command size of file size is used to obtain the transfer.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L1366'>ftp_MDTM</a>(path)</tt>	File modification time mdtm the ftp command modification time mdtm can be used to determine.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L1391'>ftp_TYPE</a>(type)</tt>	Representation type type the argument specifies the representation type as described.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L1496'>ftp_FEAT</a>()</tt>	Advertise the features supported by the server.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L1507'>ftp_OPTS</a>(option)</tt>	Handle opts command.
<tt style='background-color:#E8E8E8;'> protocols.FTP <a href=' /protocols/ftp.py#L1520'>cleanupDTP</a>()</tt>	Call when dtp connection exits.
<tt style='background-color:#E8E8E8;'> protocols.IFTPShell <a href=' /protocols/ftp.py#L1592'>makeDirectory</a>(path)</tt>	Create a directory.
<tt style='background-color:#E8E8E8;'> protocols.IFTPShell <a href=' /protocols/ftp.py#L1604'>removeDirectory</a>(path)</tt>	Remove a directory.
<tt style='background-color:#E8E8E8;'> protocols.IFTPShell <a href=' /protocols/ftp.py#L1616'>removeFile</a>(path)</tt>	Remove a file.
<tt style='background-color:#E8E8E8;'> protocols.IFTPShell <a href=' /protocols/ftp.py#L1628'>rename</a>(fromPath,toPath)</tt>	Rename a file or directory.
<tt style='background-color:#E8E8E8;'> protocols.IFTPShell <a href=' /protocols/ftp.py#L1643'>access</a>(path)</tt>	Determine whether access to the given path is allowed.
<tt style='background-color:#E8E8E8;'> protocols.IFTPShell <a href=' /protocols/ftp.py#L1655'>stat</a>(path,keys)</tt>	Retrieve information about the given path.
<tt style='background-color:#E8E8E8;'> protocols.IFTPShell <a href=' /protocols/ftp.py#L1664'>list</a>(path,keys)</tt>	Retrieve information about the given path.
<tt style='background-color:#E8E8E8;'> protocols.IFTPShell <a href=' /protocols/ftp.py#L1702'>openForReading</a>(path)</tt>	@param path the path as a list of segments to open.
<tt style='background-color:#E8E8E8;'> protocols.IFTPShell <a href=' /protocols/ftp.py#L1711'>openForWriting</a>(path)</tt>	@param path the path as a list of segments to open.
<tt style='background-color:#E8E8E8;'> protocols.IReadFile <a href=' /protocols/ftp.py#L1726'>send</a>(consumer)</tt>	Produce the contents of the given path to the given consumer this.
<tt style='background-color:#E8E8E8;'> protocols.IWriteFile <a href=' /protocols/ftp.py#L1744'>receive</a>()</tt>	Create a consumer which will write to this file this method may.
<tt style='background-color:#E8E8E8;'> protocols.IWriteFile <a href=' /protocols/ftp.py#L1752'>close</a>()</tt>	Perform any post-write work that needs to be done this method may.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/ftp.py#L1763'>_getgroups</a>(uid)</tt>	Return the primary and supplementary groups for the given uid.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/ftp.py#L1781'>_testPermissions</a>(uid,gid,spath,mode)</tt>	Checks to see if uid has proper permissions to access path with mode.
<tt style='background-color:#E8E8E8;'> protocols.FTPAnonymousShell <a href=' /protocols/ftp.py#L1874'>openForReading</a>(path)</tt>	Open c{path} for reading.
<tt style='background-color:#E8E8E8;'> protocols.FTPAnonymousShell <a href=' /protocols/ftp.py#L1900'>openForWriting</a>(path)</tt>	Reject write attempts by anonymous users with l{permissiondeniederror}.
<tt style='background-color:#E8E8E8;'> protocols.FTPAnonymousShell <a href=' /protocols/ftp.py#L1940'>list</a>(path,keys)</tt>	Return the list of files at given c{path}, adding c{keys} stat informations if specified.
<tt style='background-color:#E8E8E8;'> protocols.FTPAnonymousShell <a href=' /protocols/ftp.py#L1976'>_statNode</a>(filePath,keys)</tt>	Shortcut method to get stat info on a node.
<tt style='background-color:#E8E8E8;'> protocols.FTPAnonymousShell <a href=' /protocols/ftp.py#L1990'>_stat_size</a>(fp)</tt>	Get the filepath's size as an int @param fp l{twisted.
<tt style='background-color:#E8E8E8;'> protocols.FTPAnonymousShell <a href=' /protocols/ftp.py#L2000'>_stat_permissions</a>(fp)</tt>	Get the filepath's permissions object @param fp l{twisted.
<tt style='background-color:#E8E8E8;'> protocols.FTPAnonymousShell <a href=' /protocols/ftp.py#L2010'>_stat_hardlinks</a>(fp)</tt>	Get the number of hardlinks for the filepath - if the number of hardlinks is not yet implemented say in windows just return 0 since.
<tt style='background-color:#E8E8E8;'> protocols.FTPAnonymousShell <a href=' /protocols/ftp.py#L2028'>_stat_modified</a>(fp)</tt>	Get the filepath's last modified date @param fp l{twisted.
<tt style='background-color:#E8E8E8;'> protocols.FTPAnonymousShell <a href=' /protocols/ftp.py#L2038'>_stat_owner</a>(fp)</tt>	Get the filepath's owner's username if this is not implemented.
<tt style='background-color:#E8E8E8;'> protocols.FTPAnonymousShell <a href=' /protocols/ftp.py#L2063'>_stat_group</a>(fp)</tt>	Get the filepath's owner's group if this is not implemented.
<tt style='background-color:#E8E8E8;'> protocols.FTPAnonymousShell <a href=' /protocols/ftp.py#L2088'>_stat_directory</a>(fp)</tt>	Get whether the filepath is a directory @param fp l{twisted.
<tt style='background-color:#E8E8E8;'> protocols.FTPShell <a href=' /protocols/ftp.py#L2183'>openForWriting</a>(path)</tt>	Open c{path} for writing.
<tt style='background-color:#E8E8E8;'> protocols.BaseFTPRealm <a href=' /protocols/ftp.py#L2236'>getHomeDirectory</a>(avatarId)</tt>	Return a l{filepath} representing the home directory of the given avatar.
<tt style='background-color:#E8E8E8;'> protocols.FTPRealm <a href=' /protocols/ftp.py#L2278'>getHomeDirectory</a>(avatarId)</tt>	Use c{avatarid} as a single path segment to construct a child of c{self.
<tt style='background-color:#E8E8E8;'> protocols.SystemFTPRealm <a href=' /protocols/ftp.py#L2294'>getHomeDirectory</a>(avatarId)</tt>	Return the system-defined home directory of the system user account with the name c{avatarid}.
<tt style='background-color:#E8E8E8;'> protocols.IFinishableConsumer <a href=' /protocols/ftp.py#L2373'>finish</a>()</tt>	The producer has finished producing.
<tt style='background-color:#E8E8E8;'> protocols.SenderProtocol <a href=' /protocols/ftp.py#L2410'>registerProducer</a>(producer,streaming)</tt>	Register the given producer with our transport.
<tt style='background-color:#E8E8E8;'> protocols.SenderProtocol <a href=' /protocols/ftp.py#L2416'>unregisterProducer</a>()</tt>	Unregister the previously registered producer.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/ftp.py#L2426'>decodeHostPort</a>(line)</tt>	Decode an ftp response specifying a host and port.
<tt style='background-color:#E8E8E8;'> protocols.FTPClientBasic <a href=' /protocols/ftp.py#L2489'>_fail</a>(error)</tt>	Errback all queued deferreds.
<tt style='background-color:#E8E8E8;'> protocols.FTPClientBasic <a href=' /protocols/ftp.py#L2510'>sendLine</a>(line)</tt>	Sends a line unless line is none.
<tt style='background-color:#E8E8E8;'> protocols.FTPClientBasic <a href=' /protocols/ftp.py#L2524'>sendNextCommand</a>()</tt>	Private processes the next command in the queue.
<tt style='background-color:#E8E8E8;'> protocols.FTPClientBasic <a href=' /protocols/ftp.py#L2548'>queueCommand</a>(ftpCommand)</tt>	Add an ftpcommand object to the queue.
<tt style='background-color:#E8E8E8;'> protocols.FTPClientBasic <a href=' /protocols/ftp.py#L2563'>queueStringCommand</a>(command,public)</tt>	Queues a string to be issued as an ftp command @param command string of an ftp command to queue.
<tt style='background-color:#E8E8E8;'> protocols.FTPClientBasic <a href=' /protocols/ftp.py#L2578'>popCommandQueue</a>()</tt>	Return the front element of the command queue or none if empty.
<tt style='background-color:#E8E8E8;'> protocols.FTPClientBasic <a href=' /protocols/ftp.py#L2587'>queueLogin</a>(username,password)</tt>	Login send the username send the password.
<tt style='background-color:#E8E8E8;'> protocols.FTPClientBasic <a href=' /protocols/ftp.py#L2622'>lineReceived</a>(line)</tt>	Private parses the response messages from the ftp server.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L2732'>fail</a>(error)</tt>	Disconnect and also give an error to any queued deferreds.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L2739'>receiveFromConnection</a>(commands,protocol)</tt>	Retrieves a file or listing generated by the given command feeding it to the given protocol.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L2756'>queueLogin</a>(username,password)</tt>	Login send the username send the password and.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L2768'>sendToConnection</a>(commands)</tt>	Xxx @return a tuple of two l{deferred}s.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L2782'>_openDataConnection</a>(commands,protocol)</tt>	This method returns a deferredlist.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L2850'>generatePortCommand</a>(portCmd)</tt>	Private generates the text of a given port command.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L2884'>escapePath</a>(path)</tt>	Returns a ftp escaped path replace newlines with nulls.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L2891'>retrieveFile</a>(path,protocol,offset)</tt>	Retrieve a file from the given path this method issues the 'retr' ftp command.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L2913'>storeFile</a>(path,offset)</tt>	Store a file at the given path.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L2933'>rename</a>(pathFrom,pathTo)</tt>	Rename a file.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L2982'>list</a>(path,protocol)</tt>	Retrieve a file listing into the given protocol instance.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L3000'>nlst</a>(path,protocol)</tt>	Retrieve a short file listing into the given protocol instance.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L3016'>cwd</a>(path)</tt>	Issues the cwd change working directory command.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L3025'>makeDirectory</a>(path)</tt>	Make a directory this method issues the mkd command.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L3046'>removeFile</a>(path)</tt>	Delete a file on the server.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L3067'>removeDirectory</a>(path)</tt>	Delete a directory on the server.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L3088'>cdup</a>()</tt>	Issues the cdup change directory up command.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L3097'>pwd</a>()</tt>	Issues the pwd print working directory command.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L3111'>getDirectory</a>()</tt>	Returns the current remote directory.
<tt style='background-color:#E8E8E8;'> protocols.FTPClient <a href=' /protocols/ftp.py#L3133'>quit</a>()</tt>	Issues the i{quit} command.
<tt style='background-color:#E8E8E8;'> protocols.FTPFileListProtocol <a href=' /protocols/ftp.py#L3207'>parseDirectoryLine</a>(line)</tt>	Return a dictionary of fields or none if line cannot be parsed.
<tt style='background-color:#E8E8E8;'> protocols.FTPFileListProtocol <a href=' /protocols/ftp.py#L3228'>addFile</a>(info)</tt>	Append file information dictionary to the list of known files.
<tt style='background-color:#E8E8E8;'> protocols.FTPFileListProtocol <a href=' /protocols/ftp.py#L3242'>unknownLine</a>(line)</tt>	Deal with received lines which could not be parsed as file information.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/ftp.py#L3255'>parsePWDResponse</a>(response)</tt>	Returns the path from a response to a pwd command.
<tt style='background-color:#E8E8E8;'> protocols.PostfixTCPMapServer <a href=' /protocols/postfix.py#L63'>sendCode</a>(code,message)</tt>	Send an smtp-like code with a message.
<tt style='background-color:#E8E8E8;'> protocols.Command <a href=' /protocols/amp.py#L1836'>__init__</a>(command)</tt>	Create a command.
<tt style='background-color:#E8E8E8;'> protocols.Command <a href=' /protocols/memcache.py#L95'>success</a>(value)</tt>	Shortcut method to fire the underlying deferred.
<tt style='background-color:#E8E8E8;'> protocols.Command <a href=' /protocols/memcache.py#L102'>fail</a>(error)</tt>	Make the underlying deferred fails.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L138'>__init__</a>(timeOut)</tt>	Create the protocol.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L153'>_cancelCommands</a>(reason)</tt>	Cancel all the outstanding commands making them fail with c{reason}.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L162'>timeoutConnection</a>()</tt>	Close the connection in case of timeout.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L170'>connectionLost</a>(reason)</tt>	Cause any outstanding commands to fail.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L179'>sendLine</a>(line)</tt>	Override sendline to add a timeout to response.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L188'>rawDataReceived</a>(data)</tt>	Collect data for a get.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L212'>cmd_STORED</a>()</tt>	Manage a success response to a set operation.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L219'>cmd_NOT_STORED</a>()</tt>	Manage a specific 'not stored' response to a set operation this is not an error but some condition wasn't met.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L227'>cmd_END</a>()</tt>	This the end token to a get or a stat operation.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L251'>cmd_NOT_FOUND</a>()</tt>	Manage error response for incr/decr/delete.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L258'>cmd_VALUE</a>(line)</tt>	Prepare the reading a value after a get.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L284'>cmd_STAT</a>(line)</tt>	Reception of one stat line.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L293'>cmd_VERSION</a>(versionData)</tt>	Read version token.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L300'>cmd_ERROR</a>()</tt>	A non-existent command has been sent.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L309'>cmd_CLIENT_ERROR</a>(errText)</tt>	An invalid input as been sent.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L319'>cmd_SERVER_ERROR</a>(errText)</tt>	An error has happened server-side.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L329'>cmd_DELETED</a>()</tt>	A delete command has completed successfully.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L336'>cmd_OK</a>()</tt>	The last command has been completed.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L343'>cmd_EXISTS</a>()</tt>	A c{checkandset} update has failed.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L350'>lineReceived</a>(line)</tt>	Receive line commands from the server.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L380'>increment</a>(key,val)</tt>	Increment the value of c{key} by given value default to 1.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L398'>decrement</a>(key,val)</tt>	Decrement the value of c{key} by given value default to 1.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L417'>_incrdecr</a>(cmd,key,val)</tt>	Internal wrapper for incr/decr.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L435'>replace</a>(key,val,flags,expireTime)</tt>	Replace the given c{key} it must already exist in the server.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L459'>add</a>(key,val,flags,expireTime)</tt>	Add the given c{key} it must not exist in the server.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L483'>set</a>(key,val,flags,expireTime)</tt>	Set the given c{key}.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L507'>checkAndSet</a>(key,val,cas,flags)</tt>	Change the content of c{key} only if the c{cas} value matches the current one associated with the key.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L536'>_set</a>(cmd,key,val,flags)</tt>	Internal wrapper for setting values.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L564'>append</a>(key,val)</tt>	Append given data to the value of an existing key.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L583'>prepend</a>(key,val)</tt>	Prepend given data to the value of an existing key.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L602'>get</a>(key,withIdentifier)</tt>	Get the given c{key} it doesn't support multiple keys if.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L627'>getMultiple</a>(keys,withIdentifier)</tt>	Get the given list of c{keys} if c{withidentifier} is set to c{true},.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L654'>_get</a>(keys,withIdentifier,multiple)</tt>	Helper method for c{get} and c{getmultiple}.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L684'>stats</a>(arg)</tt>	Get some stats from the server it will be available as a dict.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L710'>version</a>()</tt>	Get the version of the server.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L726'>delete</a>(key)</tt>	Delete an existing c{key}.
<tt style='background-color:#E8E8E8;'> protocols.MemCacheProtocol <a href=' /protocols/memcache.py#L748'>flushAll</a>()</tt>	Flush all cached values.
<tt style='background-color:#E8E8E8;'> protocols._ProducerMembrane <a href=' /protocols/tls.py#L84'>pauseProducing</a>()</tt>	C{pauseproducing} the underlying producer if it's not paused.
<tt style='background-color:#E8E8E8;'> protocols._ProducerMembrane <a href=' /protocols/tls.py#L94'>resumeProducing</a>()</tt>	C{resumeproducing} the underlying producer if it's paused.
<tt style='background-color:#E8E8E8;'> protocols._ProducerMembrane <a href=' /protocols/tls.py#L104'>stopProducing</a>()</tt>	C{stopproducing} the underlying producer.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L181'>getHandle</a>()</tt>	Return the l{openssl ssl connection} object being used to encrypt and.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L194'>makeConnection</a>(transport)</tt>	Connect this wrapper to the given transport and initialize the necessary l{openssl.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L221'>_checkHandshakeStatus</a>()</tt>	Ask openssl to proceed with a handshake in progress.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L246'>_flushSendBIO</a>()</tt>	Read any bytes out of the send bio and write them to the underlying transport.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L260'>_flushReceiveBIO</a>()</tt>	Try to receive any application-level bytes which are now available because of a previous write into the receive bio.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L303'>dataReceived</a>(bytes)</tt>	Deliver any received bytes to the receive bio and then read and deliver to the application any application-level data which becomes available.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L333'>_shutdownTLS</a>()</tt>	Initiate or reply to the shutdown handshake of the tls layer.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L354'>_tlsShutdownFinished</a>(reason)</tt>	Called when tls connection has gone away tell underlying transport to disconnect.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L388'>connectionLost</a>(reason)</tt>	Handle the possible repetition of calls to this method (due to either the underlying transport going away or due to an error at the tls.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L406'>loseConnection</a>()</tt>	Send a tls close alert and close the underlying connection.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L425'>abortConnection</a>()</tt>	Tear down tls state so that if the connection is aborted mid-handshake we don't deliver any further data from the application.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L436'>failVerification</a>(reason)</tt>	Abort the connection during connection setup giving a reason that certificate verification failed.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L505'>_write</a>(bytes)</tt>	Process the given application bytes and send any resulting tls traffic which arrives in the send bio.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L467'>_bufferedWrite</a>(octets)</tt>	Put the given octets into l{tlsmemorybioprotocol _appsendbuffer}, and.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L478'>_unbufferPendingWrites</a>()</tt>	Un-buffer all waiting writes in l{tlsmemorybioprotocol _appsendbuffer}.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L547'>writeSequence</a>(iovec)</tt>	Write a sequence of application bytes by joining them into one string and passing them to l{write}.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOProtocol <a href=' /protocols/tls.py#L559'>negotiatedProtocol</a>()</tt>	@see l{inegotiated negotiatedprotocol}.
<tt style='background-color:#E8E8E8;'> protocols._ContextFactoryToConnectionFactory <a href=' /protocols/tls.py#L631'>__init__</a>(oldStyleContextFactory)</tt>	Construct a l{_contextfactorytoconnectionfactory} with a l{twisted.
<tt style='background-color:#E8E8E8;'> protocols._ContextFactoryToConnectionFactory <a href=' /protocols/tls.py#L648'>_connectionForTLS</a>(protocol)</tt>	Create an l{openssl ssl connection} object.
<tt style='background-color:#E8E8E8;'> protocols._ContextFactoryToConnectionFactory <a href=' /protocols/tls.py#L662'>serverConnectionForTLS</a>(protocol)</tt>	Construct an openssl server connection from the wrapped old-style context factory.
<tt style='background-color:#E8E8E8;'> protocols._ContextFactoryToConnectionFactory <a href=' /protocols/tls.py#L680'>clientConnectionForTLS</a>(protocol)</tt>	Construct an openssl server connection from the wrapped old-style context factory.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOFactory <a href=' /protocols/tls.py#L716'>__init__</a>(contextFactory,isClient,wrappedFactory)</tt>	Create a l{tlsmemorybiofactory}.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOFactory <a href=' /protocols/tls.py#L770'>logPrefix</a>()</tt>	Annotate the wrapped factory's log prefix with some text indicating tls is in use.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOFactory <a href=' /protocols/tls.py#L784'>_applyProtocolNegotiation</a>(connection)</tt>	Applies alpn/npn protocol neogitation to the connection if the factory supports it.
<tt style='background-color:#E8E8E8;'> protocols.TLSMemoryBIOFactory <a href=' /protocols/tls.py#L804'>_createConnection</a>(tlsProtocol)</tt>	Create an openssl connection and set it up good.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/sip.py#L112'>dashCapitalize</a>(s)</tt>	Capitalize a string making sure to treat '-' as a word separator.
<tt style='background-color:#E8E8E8;'> protocols.Via <a href=' /protocols/sip.py#L162'>__init__</a>(host,port,transport,ttl)</tt>	Set parameters of this via header all arguments correspond to.
<tt style='background-color:#E8E8E8;'> protocols.Via <a href=' /protocols/sip.py#L206'>_getrport</a>()</tt>	Returns the rport value expected by the old sip code.
<tt style='background-color:#E8E8E8;'> protocols.Via <a href=' /protocols/sip.py#L218'>_setrport</a>(newRPort)</tt>	L{base _fixupnat} sets c{rport} directly so this method sets.
<tt style='background-color:#E8E8E8;'> protocols.Via <a href=' /protocols/sip.py#L231'>toString</a>()</tt>	Serialize this header for use in a request or response.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/sip.py#L257'>parseViaHeader</a>(value)</tt>	Parse a via header.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/sip.py#L363'>parseURL</a>(url,host,port)</tt>	Return string into url object.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/sip.py#L419'>cleanRequestURL</a>(url)</tt>	Clean a url from a request line.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/sip.py#L430'>parseAddress</a>(address,host,port,clean)</tt>	Return name uri params for from/to/contact header.
<tt style='background-color:#E8E8E8;'> protocols.MessagesParser <a href=' /protocols/sip.py#L609'>dataDone</a>()</tt>	Clear out any buffered data that may be hanging around.
<tt style='background-color:#E8E8E8;'> protocols.MessagesParser <a href=' /protocols/sip.py#L640'>handleFirstLine</a>(line)</tt>	Expected to create self message.
<tt style='background-color:#E8E8E8;'> protocols.Base <a href=' /protocols/sip.py#L809'>responseFromRequest</a>(code,request)</tt>	Create a response to a request message.
<tt style='background-color:#E8E8E8;'> protocols.Base <a href=' /protocols/sip.py#L820'>sendMessage</a>(destURL,message)</tt>	Send a message.
<tt style='background-color:#E8E8E8;'> protocols.Base <a href=' /protocols/sip.py#L837'>handle_request</a>(message,addr)</tt>	Override to define behavior for requests received.
<tt style='background-color:#E8E8E8;'> protocols.Base <a href=' /protocols/sip.py#L847'>handle_response</a>(message,addr)</tt>	Override to define behavior for responses received.
<tt style='background-color:#E8E8E8;'> protocols.IRegistry <a href=' /protocols/sip.py#L877'>registerAddress</a>(domainURL,logicalURL,physicalURL)</tt>	Register the physical address of a logical url.
<tt style='background-color:#E8E8E8;'> protocols.IRegistry <a href=' /protocols/sip.py#L885'>unregisterAddress</a>(domainURL,logicalURL,physicalURL)</tt>	Unregister the physical address of a logical url.
<tt style='background-color:#E8E8E8;'> protocols.IRegistry <a href=' /protocols/sip.py#L893'>getRegistrationInfo</a>(logicalURL)</tt>	Get registration info for logical url.
<tt style='background-color:#E8E8E8;'> protocols.ILocator <a href=' /protocols/sip.py#L907'>getAddress</a>(logicalURL)</tt>	Return physical url of server for logical url of user.
<tt style='background-color:#E8E8E8;'> protocols.Proxy <a href=' /protocols/sip.py#L926'>__init__</a>(host,port)</tt>	Create new instance.
<tt style='background-color:#E8E8E8;'> protocols.Proxy <a href=' /protocols/sip.py#L938'>getVia</a>()</tt>	Return value of via header for this proxy.
<tt style='background-color:#E8E8E8;'> protocols.Proxy <a href=' /protocols/sip.py#L965'>handle_request_default</a>(message,sourcePeer)</tt>	Default request handler.
<tt style='background-color:#E8E8E8;'> protocols.Proxy <a href=' /protocols/sip.py#L1016'>responseFromRequest</a>(code,request)</tt>	Create a response to a request message.
<tt style='background-color:#E8E8E8;'> protocols.Proxy <a href=' /protocols/sip.py#L1026'>handle_response</a>(message,addr)</tt>	Default response handler.
<tt style='background-color:#E8E8E8;'> protocols.Proxy <a href=' /protocols/sip.py#L1045'>gotResponse</a>(message,addr)</tt>	Called with responses that are addressed at this server.
<tt style='background-color:#E8E8E8;'> protocols.IAuthorizer <a href=' /protocols/sip.py#L1054'>getChallenge</a>(peer)</tt>	Generate a challenge the client may respond to.
<tt style='background-color:#E8E8E8;'> protocols.IAuthorizer <a href=' /protocols/sip.py#L1066'>decode</a>(response)</tt>	Create a credentials object from the given response.
<tt style='background-color:#E8E8E8;'> protocols.RegisterProxy <a href=' /protocols/sip.py#L1103'>handle_REGISTER_request</a>(message,host_port)</tt>	Handle a registration request.
<tt style='background-color:#E8E8E8;'> protocols.RegisterProxy <a href=' /protocols/sip.py#L1166'>register</a>(message,host,port)</tt>	Allow all users to register.
<tt style='background-color:#E8E8E8;'> protocols.IArgumentType <a href=' /protocols/amp.py#L321'>fromBox</a>(name,strings,objects,proto)</tt>	Given an argument name and an amp box containing serialized values extract one or more python objects and add them to the c{objects}.
<tt style='background-color:#E8E8E8;'> protocols.IArgumentType <a href=' /protocols/amp.py#L350'>toBox</a>(name,strings,objects,proto)</tt>	Given an argument name and a dictionary containing structured python objects serialize values into one or more strings and add them to.
<tt style='background-color:#E8E8E8;'> protocols.IBoxSender <a href=' /protocols/amp.py#L384'>sendBox</a>(box)</tt>	Send an l{ampbox}.
<tt style='background-color:#E8E8E8;'> protocols.IBoxSender <a href=' /protocols/amp.py#L395'>unhandledError</a>(failure)</tt>	An unhandled error occurred in response to a box log it.
<tt style='background-color:#E8E8E8;'> protocols.IBoxReceiver <a href=' /protocols/amp.py#L411'>startReceivingBoxes</a>(boxSender)</tt>	The l{iboxreceiver ampboxreceived} method will start being called.
<tt style='background-color:#E8E8E8;'> protocols.IBoxReceiver <a href=' /protocols/amp.py#L420'>ampBoxReceived</a>(box)</tt>	A box was received from the transport dispatch it appropriately.
<tt style='background-color:#E8E8E8;'> protocols.IBoxReceiver <a href=' /protocols/amp.py#L426'>stopReceivingBoxes</a>(reason)</tt>	No further boxes will be received on this connection.
<tt style='background-color:#E8E8E8;'> protocols.IResponderLocator <a href=' /protocols/amp.py#L441'>locateResponder</a>(name)</tt>	Locate a responder method appropriate for the named command.
<tt style='background-color:#E8E8E8;'> protocols.RemoteAmpError <a href=' /protocols/amp.py#L551'>__init__</a>(errorCode,description,fatal,local)</tt>	Create a remote error with an error code and description.
<tt style='background-color:#E8E8E8;'> protocols.AmpBox <a href=' /protocols/amp.py#L640'>__init__</a>()</tt>	Initialize a new l{ampbox}.
<tt style='background-color:#E8E8E8;'> protocols.AmpBox <a href=' /protocols/amp.py#L673'>copy</a>()</tt>	Return another ampbox just like me.
<tt style='background-color:#E8E8E8;'> protocols.AmpBox <a href=' /protocols/amp.py#L682'>serialize</a>()</tt>	Convert me into a wire-encoded string.
<tt style='background-color:#E8E8E8;'> protocols.AmpBox <a href=' /protocols/amp.py#L709'>_sendTo</a>(proto)</tt>	Serialize and send this box to an amp instance by the time it is being.
<tt style='background-color:#E8E8E8;'> protocols.QuitBox <a href=' /protocols/amp.py#L743'>_sendTo</a>(proto)</tt>	Immediately call loseconnection after sending.
<tt style='background-color:#E8E8E8;'> protocols._SwitchBox <a href=' /protocols/amp.py#L760'>__init__</a>(innerProto)</tt>	Create a _switchbox with the protocol to switch to after being sent.
<tt style='background-color:#E8E8E8;'> protocols._SwitchBox <a href=' /protocols/amp.py#L776'>_sendTo</a>(proto)</tt>	Send me i am the last box on the connection all further traffic will be.
<tt style='background-color:#E8E8E8;'> protocols.BoxDispatcher <a href=' /protocols/amp.py#L823'>startReceivingBoxes</a>(boxSender)</tt>	The given boxsender is going to start calling boxreceived on this l{boxdispatcher}.
<tt style='background-color:#E8E8E8;'> protocols.BoxDispatcher <a href=' /protocols/amp.py#L833'>stopReceivingBoxes</a>(reason)</tt>	No further boxes will be received here terminate all currently.
<tt style='background-color:#E8E8E8;'> protocols.BoxDispatcher <a href=' /protocols/amp.py#L841'>failAllOutgoing</a>(reason)</tt>	Call the errback on all outstanding requests awaiting responses.
<tt style='background-color:#E8E8E8;'> protocols.BoxDispatcher <a href=' /protocols/amp.py#L854'>_nextTag</a>()</tt>	Generate protocol-local serial numbers for _ask keys.
<tt style='background-color:#E8E8E8;'> protocols.BoxDispatcher <a href=' /protocols/amp.py#L869'>_sendBoxCommand</a>(command,box,requiresAnswer)</tt>	Send a command across the wire with the given c{amp box}.
<tt style='background-color:#E8E8E8;'> protocols.BoxDispatcher <a href=' /protocols/amp.py#L910'>callRemoteString</a>(command,requiresAnswer)</tt>	This is a low-level api designed only for optimizing simple messages for which the overhead of parsing is too great.
<tt style='background-color:#E8E8E8;'> protocols.BoxDispatcher <a href=' /protocols/amp.py#L930'>callRemote</a>(commandType)</tt>	This is the primary high-level api for sending messages via amp invoke it.
<tt style='background-color:#E8E8E8;'> protocols.BoxDispatcher <a href=' /protocols/amp.py#L974'>unhandledError</a>(failure)</tt>	This is a terminal callback called after application code has had a chance to quash any errors.
<tt style='background-color:#E8E8E8;'> protocols.BoxDispatcher <a href=' /protocols/amp.py#L982'>_answerReceived</a>(box)</tt>	An amp box was received that answered a command previously sent with l{callremote}.
<tt style='background-color:#E8E8E8;'> protocols.BoxDispatcher <a href=' /protocols/amp.py#L994'>_errorReceived</a>(box)</tt>	An amp box was received that answered a command previously sent with l{callremote}, with an error.
<tt style='background-color:#E8E8E8;'> protocols.BoxDispatcher <a href=' /protocols/amp.py#L1015'>_commandReceived</a>(box)</tt>	@param box an l{ampbox} with a value for its l{command} and l{ask} keys.
<tt style='background-color:#E8E8E8;'> protocols.BoxDispatcher <a href=' /protocols/amp.py#L1050'>ampBoxReceived</a>(box)</tt>	An ampbox was received representing a command or an answer to a previously issued command either successful or erroneous.
<tt style='background-color:#E8E8E8;'> protocols.BoxDispatcher <a href=' /protocols/amp.py#L1072'>_safeEmit</a>(aBox)</tt>	Emit a box ignoring l{protocolswitched} and l{connectionlost} errors which cannot be usefully handled.
<tt style='background-color:#E8E8E8;'> protocols.BoxDispatcher <a href=' /protocols/amp.py#L1083'>dispatchCommand</a>(box)</tt>	A box with a _command key was received.
<tt style='background-color:#E8E8E8;'> protocols.CommandLocator <a href=' /protocols/amp.py#L1153'>_wrapWithSerialization</a>(aCallable,command)</tt>	Wrap acallable with its command's argument de-serialization and result serialization logic.
<tt style='background-color:#E8E8E8;'> protocols.CommandLocator <a href=' /protocols/amp.py#L1194'>lookupFunction</a>(name)</tt>	Deprecated synonym for l{commandlocator locateresponder}.
<tt style='background-color:#E8E8E8;'> protocols.CommandLocator <a href=' /protocols/amp.py#L1207'>locateResponder</a>(name)</tt>	Locate a callable to invoke when executing the named command.
<tt style='background-color:#E8E8E8;'> protocols.SimpleStringLocator <a href=' /protocols/amp.py#L1252'>locateResponder</a>(name)</tt>	Locate a callable to invoke when executing the named command.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/amp.py#L1277'>_wireNameToPythonIdentifier</a>(key)</tt>	Private normalize an argument name from the wire for use with python code.
<tt style='background-color:#E8E8E8;'> protocols.Argument <a href=' /protocols/amp.py#L1323'>__init__</a>(optional)</tt>	Create an argument.
<tt style='background-color:#E8E8E8;'> protocols.Argument <a href=' /protocols/amp.py#L1333'>retrieve</a>(d,name,proto)</tt>	Retrieve the given key from the given dictionary removing it if found.
<tt style='background-color:#E8E8E8;'> protocols.Argument <a href=' /protocols/amp.py#L1356'>fromBox</a>(name,strings,objects,proto)</tt>	Populate an 'out' dictionary with mapping names to python values decoded from an 'in' ampbox mapping strings to string values.
<tt style='background-color:#E8E8E8;'> protocols.Argument <a href=' /protocols/amp.py#L1382'>toBox</a>(name,strings,objects,proto)</tt>	Populate an 'out' ampbox with strings encoded from an 'in' dictionary mapping names to python values.
<tt style='background-color:#E8E8E8;'> protocols.Argument <a href=' /protocols/amp.py#L1410'>fromStringProto</a>(inString,proto)</tt>	Convert a string to a python value.
<tt style='background-color:#E8E8E8;'> protocols.Argument <a href=' /protocols/amp.py#L1425'>toStringProto</a>(inObject,proto)</tt>	Convert a python object to a string.
<tt style='background-color:#E8E8E8;'> protocols.Argument <a href=' /protocols/amp.py#L1437'>fromString</a>(inString)</tt>	Convert a string to a python object subclasses must implement this.
<tt style='background-color:#E8E8E8;'> protocols.Argument <a href=' /protocols/amp.py#L1448'>toString</a>(inObject)</tt>	Convert a python object into a string for passing over the network.
<tt style='background-color:#E8E8E8;'> protocols.ListOf <a href=' /protocols/amp.py#L1584'>fromString</a>(inString)</tt>	Convert the serialized form of a list of instances of some type back into that list.
<tt style='background-color:#E8E8E8;'> protocols.ListOf <a href=' /protocols/amp.py#L1597'>toString</a>(inObject)</tt>	Serialize the given list of objects to a single string.
<tt style='background-color:#E8E8E8;'> protocols.AmpList <a href=' /protocols/amp.py#L1623'>__init__</a>(subargs,optional)</tt>	Create an amplist.
<tt style='background-color:#E8E8E8;'> protocols.Descriptor <a href=' /protocols/amp.py#L1675'>fromStringProto</a>(inString,proto)</tt>	Take a unique identifier associated with a file descriptor which must have been received by now and use it to look up that descriptor in a.
<tt style='background-color:#E8E8E8;'> protocols.Descriptor <a href=' /protocols/amp.py#L1697'>toStringProto</a>(inObject,proto)</tt>	Send c{inobject}, an integer file descriptor over c{proto}'s connection and return a unique identifier which will allow the receiver to.
<tt style='background-color:#E8E8E8;'> protocols.Command <a href=' /protocols/amp.py#L1836'>__init__</a>()</tt>	Create an instance of this command with specified values for its parameters.
<tt style='background-color:#E8E8E8;'> protocols.Command <a href=' /protocols/amp.py#L1867'>makeResponse</a>(cls,objects,proto)</tt>	Serialize a mapping of arguments using this l{command}'s response schema.
<tt style='background-color:#E8E8E8;'> protocols.Command <a href=' /protocols/amp.py#L1888'>makeArguments</a>(cls,objects,proto)</tt>	Serialize a mapping of arguments using this l{command}'s argument schema.
<tt style='background-color:#E8E8E8;'> protocols.Command <a href=' /protocols/amp.py#L1914'>parseResponse</a>(cls,box,protocol)</tt>	Parse a mapping of serialized arguments using this l{command}'s response schema.
<tt style='background-color:#E8E8E8;'> protocols.Command <a href=' /protocols/amp.py#L1930'>parseArguments</a>(cls,box,protocol)</tt>	Parse a mapping of serialized arguments using this l{command}'s argument schema.
<tt style='background-color:#E8E8E8;'> protocols.Command <a href=' /protocols/amp.py#L1945'>responder</a>(cls,methodfunc)</tt>	Declare a method to be a responder for a particular command.
<tt style='background-color:#E8E8E8;'> protocols.Command <a href=' /protocols/amp.py#L1982'>_doCommand</a>(proto)</tt>	Encode and send this command to the given protocol.
<tt style='background-color:#E8E8E8;'> protocols._NoCertificate <a href=' /protocols/amp.py#L2033'>__init__</a>(client)</tt>	Create a _nocertificate which either is or isn't for the client side of the connection.
<tt style='background-color:#E8E8E8;'> protocols._NoCertificate <a href=' /protocols/amp.py#L2047'>options</a>()</tt>	Behaves like l{twisted internet ssl privatecertificate options}().
<tt style='background-color:#E8E8E8;'> protocols._TLSBox <a href=' /protocols/amp.py#L2094'>_sendTo</a>(proto)</tt>	Send my encoded value to the protocol then initiate tls.
<tt style='background-color:#E8E8E8;'> protocols.StartTLS <a href=' /protocols/amp.py#L2146'>__init__</a>()</tt>	Create a starttls command this is private use amp callremote.
<tt style='background-color:#E8E8E8;'> protocols.StartTLS <a href=' /protocols/amp.py#L2164'>_doCommand</a>(proto)</tt>	When a starttls command is sent prepare to start tls but don't actually do it wait for the acknowledgement then initiate the tls handshake.
<tt style='background-color:#E8E8E8;'> protocols.ProtocolSwitchCommand <a href=' /protocols/amp.py#L2190'>__init__</a>(_protoToSwitchToFactory)</tt>	Create a protocolswitchcommand.
<tt style='background-color:#E8E8E8;'> protocols.ProtocolSwitchCommand <a href=' /protocols/amp.py#L2210'>_doCommand</a>(proto)</tt>	When we emit a protocolswitchcommand lock the protocol but don't actually switch to the new protocol unless an acknowledgement is received.
<tt style='background-color:#E8E8E8;'> protocols._DescriptorExchanger <a href=' /protocols/amp.py#L2263'>_sendFileDescriptor</a>(descriptor)</tt>	Assign and return the next ordinal to the given descriptor after sending the descriptor over this protocol's transport.
<tt style='background-color:#E8E8E8;'> protocols._DescriptorExchanger <a href=' /protocols/amp.py#L2272'>fileDescriptorReceived</a>(descriptor)</tt>	Collect received file descriptors to be claimed later by l{descriptor}.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2336'>_switchTo</a>(newProto,clientFactory)</tt>	Switch this binaryboxprotocol's transport to a new protocol you need.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2366'>sendBox</a>(box)</tt>	Send a amp box to my peer.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2389'>makeConnection</a>(transport)</tt>	Notify l{boxreceiver} that it is about to receive boxes from this protocol by invoking l{iboxreceiver.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2399'>dataReceived</a>(data)</tt>	Either parse incoming data as l{ampbox}es or relay it to our nested protocol.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2414'>connectionLost</a>(reason)</tt>	The connection was lost notify any nested protocol.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2446'>proto_init</a>(string)</tt>	String received in the 'init' state.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2454'>proto_key</a>(string)</tt>	String received in the 'key' state if the key is empty a complete.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2469'>proto_value</a>(string)</tt>	String received in the 'value' state.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2479'>lengthLimitExceeded</a>(length)</tt>	The key length limit was exceeded disconnect the transport and make.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2488'>_lockForSwitch</a>()</tt>	Lock this binary protocol so that no further boxes may be sent this.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2498'>_unlockFromSwitch</a>()</tt>	Unlock this locked binary protocol so that further boxes may be sent again.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2509'>_prepareTLS</a>(certificate,verifyAuthorities)</tt>	Used by starttlscommand to put us into the state where we don't actually send things that get sent instead we buffer them.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2525'>_startTLS</a>(certificate,verifyAuthorities)</tt>	Used by tlsbox to initiate the ssl handshake.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2554'>unhandledError</a>(failure)</tt>	The buck stops here this error was completely unhandled time to.
<tt style='background-color:#E8E8E8;'> protocols.BinaryBoxProtocol <a href=' /protocols/amp.py#L2568'>_defaultStartTLSResponder</a>()</tt>	The default tls responder doesn't specify any certificate or anything.
<tt style='background-color:#E8E8E8;'> protocols.AMP <a href=' /protocols/amp.py#L2608'>locateResponder</a>(name)</tt>	Unify the implementations of l{commandlocator} and l{simplestringlocator} to perform both kinds of dispatch preferring.
<tt style='background-color:#E8E8E8;'> protocols.AMP <a href=' /protocols/amp.py#L2623'>__repr__</a>()</tt>	A verbose string representation which gives us information about this amp connection.
<tt style='background-color:#E8E8E8;'> protocols.AMP <a href=' /protocols/amp.py#L2636'>makeConnection</a>(transport)</tt>	Emit a helpful log message when the connection is made.
<tt style='background-color:#E8E8E8;'> protocols.AMP <a href=' /protocols/amp.py#L2654'>connectionLost</a>(reason)</tt>	Emit a helpful log message when the connection is lost.
<tt style='background-color:#E8E8E8;'> protocols._ParserHelper <a href=' /protocols/amp.py#L2685'>startReceivingBoxes</a>(sender)</tt>	No initialization is required.
<tt style='background-color:#E8E8E8;'> protocols._ParserHelper <a href=' /protocols/amp.py#L2696'>parse</a>(cls,fileObj)</tt>	Parse some amp data stored in a file.
<tt style='background-color:#E8E8E8;'> protocols._ParserHelper <a href=' /protocols/amp.py#L2712'>parseString</a>(cls,data)</tt>	Parse some amp data stored in a string.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/amp.py#L2728'>_stringsToObjects</a>(strings,arglist,proto)</tt>	Convert an ampbox to a dictionary of python objects converting through a given arglist.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/amp.py#L2750'>_objectsToStrings</a>(objects,arglist,strings,proto)</tt>	Convert a dictionary of python objects to an ampbox converting through a given arglist.
<tt style='background-color:#E8E8E8;'> protocols.Decimal <a href=' /protocols/amp.py#L2808'>toString</a>(inObject)</tt>	Serialize a c{decimal decimal} instance to the specified wire format.
<tt style='background-color:#E8E8E8;'> protocols.DateTime <a href=' /protocols/amp.py#L2847'>fromString</a>(s)</tt>	Parse a string containing a date and time in the wire format into a c{datetime.
<tt style='background-color:#E8E8E8;'> protocols.DateTime <a href=' /protocols/amp.py#L2864'>toString</a>(i)</tt>	Serialize a c{datetime datetime} instance to a string in the specified.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/dict.py#L16'>parseParam</a>(line)</tt>	Chew one dqstring or atom from beginning of line and return param remaningline.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/dict.py#L50'>makeAtom</a>(line)</tt>	Munch a string into an 'atom'.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L109'>sendLine</a>(line)</tt>	Throw up if the line is longer than 1022 characters.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L142'>dictCode_221_ready</a>(line)</tt>	We are about to get kicked off do nothing.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L168'>sendDefine</a>(database,word)</tt>	Send a dict define command.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L178'>sendMatch</a>(database,strategy,word)</tt>	Send a dict match command.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L217'>dictCode_150_define</a>(line)</tt>	N definitions retrieved.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L222'>dictCode_151_define</a>(line)</tt>	Definition text follows.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L236'>dictCode_152_match</a>(line)</tt>	N matches found text follows.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L243'>dictCode_text_define</a>(line)</tt>	A line of definition text received.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L254'>dictCode_text_match</a>(line)</tt>	One line of match text received.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L285'>protocolError</a>(reason)</tt>	Override to catch unexpected dict protocol conditions.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L290'>dictConnected</a>()</tt>	Override to be notified when the server is ready to accept commands.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L295'>defineFailed</a>(reason)</tt>	Override to catch reasonable failure responses to define.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L300'>defineDone</a>(result)</tt>	Override to catch successful define.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L305'>matchFailed</a>(reason)</tt>	Override to catch resonable failure responses to match.
<tt style='background-color:#E8E8E8;'> protocols.DictClient <a href=' /protocols/dict.py#L310'>matchDone</a>(result)</tt>	Override to catch successful match.
<tt style='background-color:#E8E8E8;'> protocols.DictLookupFactory <a href=' /protocols/dict.py#L374'>clientDone</a>()</tt>	Called by client when done.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/dict.py#L396'>define</a>(host,port,database,word)</tt>	Look up a word using a dict server.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/dict.py#L407'>match</a>(host,port,database,strategy)</tt>	Match a word using a dict server.
<tt style='background-color:#E8E8E8;'> protocols.IdentServer <a href=' /protocols/ident.py#L92'>validQuery</a>(portOnServer,portOnClient)</tt>	Called when a valid query is received to look up and deliver the response.
<tt style='background-color:#E8E8E8;'> protocols.IdentServer <a href=' /protocols/ident.py#L121'>lookup</a>(serverAddress,clientAddress)</tt>	Lookup user information about the specified address pair.
<tt style='background-color:#E8E8E8;'> protocols.IdentClient <a href=' /protocols/ident.py#L208'>lookup</a>(portOnServer,portOnClient)</tt>	Lookup user information about the specified address pair.
<tt style='background-color:#E8E8E8;'> protocols.ProducerConsumerProxy <a href=' /protocols/pcp.py#L195'>_writeSomeData</a>(data)</tt>	Write as much of this data as possible.
<tt style='background-color:#E8E8E8;'> protocols.QOTD <a href=' /protocols/wire.py#L75'>getQuote</a>()</tt>	Return a quote may be overrriden in subclasses.
<tt style='background-color:#E8E8E8;'> protocols.Who <a href=' /protocols/wire.py#L93'>getUsers</a>()</tt>	Return active users override in subclasses.
<tt style='background-color:#E8E8E8;'> protocols._LoopbackTransport <a href=' /protocols/loopback.py#L83'>abortConnection</a>()</tt>	Abort the connection same as l{loseconnection}.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/loopback.py#L113'>identityPumpPolicy</a>(queue,target)</tt>	L{identitypumppolicy} is a policy which delivers each chunk of data written to the given queue as-is to the target.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/loopback.py#L130'>collapsingPumpPolicy</a>(queue,target)</tt>	L{collapsingpumppolicy} is a policy which collapses all outstanding chunks into a single string and delivers it to the target.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/loopback.py#L148'>loopbackAsync</a>(server,client,pumpPolicy)</tt>	Establish a connection between c{server} and c{client} then transfer data between them until the connection is closed.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/loopback.py#L186'>_loopbackAsyncBody</a>(server,serverToClient,client,clientToServer)</tt>	Transfer bytes from the output queue of each protocol to the input of the other.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/loopback.py#L353'>loopbackTCP</a>(server,client,port,noisy)</tt>	Run session between server and client protocol instances over tcp.
<tt style='background-color:#E8E8E8;'> protocols. <a href=' /protocols/loopback.py#L370'>loopbackUNIX</a>(server,client,noisy)</tt>	Run session between server and client protocol instances over unix socket.
<tt style='background-color:#E8E8E8;'> protocols.ShoutcastClient <a href=' /protocols/shoutcast.py#L101'>gotMetaData</a>(metadata)</tt>	Called with a list of key value pairs of metadata if metadata is available on the server.
<tt style='background-color:#E8E8E8;'> protocols.ShoutcastClient <a href=' /protocols/shoutcast.py#L109'>gotMP3Data</a>(data)</tt>	Called with chunk of mp3 data.
<tt style='background-color:#E8E8E8;'> protocols.Bucket <a href=' /protocols/htb.py#L49'>__init__</a>(parentBucket)</tt>	Create a l{bucket} that may have a parent l{bucket}.
<tt style='background-color:#E8E8E8;'> protocols.Bucket <a href=' /protocols/htb.py#L63'>add</a>(amount)</tt>	Adds tokens to the l{bucket} and its c{parentbucket}.
<tt style='background-color:#E8E8E8;'> protocols.Bucket <a href=' /protocols/htb.py#L88'>drip</a>()</tt>	Let some of the bucket drain.
<tt style='background-color:#E8E8E8;'> protocols.IBucketFilter <a href=' /protocols/htb.py#L113'>getBucketFor</a>()</tt>	Return a l{bucket} corresponding to the provided parameters.
<tt style='background-color:#E8E8E8;'> protocols.HierarchicalBucketFilter <a href=' /protocols/htb.py#L138'>getBucketFor</a>()</tt>	Find or create a l{bucket} corresponding to the provided parameters.
<tt style='background-color:#E8E8E8;'> protocols.HierarchicalBucketFilter <a href=' /protocols/htb.py#L163'>getBucketKey</a>()</tt>	Construct a key based on the input parameters to choose a l{bucket}.
<tt style='background-color:#E8E8E8;'> protocols.HierarchicalBucketFilter <a href=' /protocols/htb.py#L174'>sweep</a>()</tt>	Remove empty buckets.
<tt style='background-color:#E8E8E8;'> protocols.ShapedProtocolFactory <a href=' /protocols/htb.py#L263'>__init__</a>(protoClass,bucketFilter)</tt>	Tell me what to wrap and where to get buckets.
<tt style='background-color:#E8E8E8;'> protocols.ShapedProtocolFactory <a href=' /protocols/htb.py#L280'>__call__</a>()</tt>	Make a c{protocol} instance with a shaped transport.
<tt style='background-color:#E8E8E8;'> protocols.SOCKSv4 <a href=' /protocols/socks.py#L94'>dataReceived</a>(data)</tt>	Called whenever data is received.
<tt style='background-color:#E8E8E8;'> protocols.SOCKSv4 <a href=' /protocols/socks.py#L130'>_dataReceived2</a>(server,user,version,code)</tt>	The second half of the socks connection setup for a socksv4 packet this.
<tt style='background-color:#E8E8E8;'> protocols.haproxy. <a href=' /protocols/haproxy/_parser.py#L20'>unparseEndpoint</a>(args,kwargs)</tt>	Un-parse the already-parsed args and kwargs back into endpoint syntax.
<tt style='background-color:#E8E8E8;'> protocols.haproxy.HAProxyServerParser <a href=' /protocols/haproxy/_parser.py#L55'>parseStreamServer</a>(reactor)</tt>	Parse a stream server endpoint from a reactor and string-only arguments and keyword arguments.
<tt style='background-color:#E8E8E8;'> protocols.haproxy.IProxyParser <a href=' /protocols/haproxy/_interfaces.py#L36'>feed</a>(data)</tt>	Consume a chunk of data and attempt to parse it.
<tt style='background-color:#E8E8E8;'> protocols.haproxy.IProxyParser <a href=' /protocols/haproxy/_interfaces.py#L52'>parse</a>(line)</tt>	Parse a bytestring as a full proxy protocol header line.
<tt style='background-color:#E8E8E8;'> protocols.haproxy.HAProxyWrappingFactory <a href=' /protocols/haproxy/_wrapper.py#L79'>logPrefix</a>()</tt>	Annotate the wrapped factory's log prefix with some text indicating the proxy protocol is in use.
<tt style='background-color:#E8E8E8;'> protocols.haproxy. <a href=' /protocols/haproxy/_wrapper.py#L94'>proxyEndpoint</a>(wrappedEndpoint)</tt>	Wrap an endpoint with proxy protocol support so that the transport's c{gethost} and c{getpeer} methods reflect the attributes of the proxied.
<tt style='background-color:#E8E8E8;'> protocols.haproxy.V1Parser <a href=' /protocols/haproxy/_v1parser.py#L47'>feed</a>(data)</tt>	Consume a chunk of data and attempt to parse it.
<tt style='background-color:#E8E8E8;'> protocols.haproxy.V1Parser <a href=' /protocols/haproxy/_v1parser.py#L75'>parse</a>(cls,line)</tt>	Parse a bytestring as a full proxy protocol header line.
<tt style='background-color:#E8E8E8;'> protocols.haproxy.V2Parser <a href=' /protocols/haproxy/_v2parser.py#L78'>feed</a>(data)</tt>	Consume a chunk of data and attempt to parse it.
<tt style='background-color:#E8E8E8;'> protocols.haproxy.V2Parser <a href=' /protocols/haproxy/_v2parser.py#L107'>_bytesToIPv4</a>(bytestring)</tt>	Convert packed 32-bit ipv4 address bytes into a dotted-quad ascii bytes representation of that address.
<tt style='background-color:#E8E8E8;'> protocols.haproxy.V2Parser <a href=' /protocols/haproxy/_v2parser.py#L125'>_bytesToIPv6</a>(bytestring)</tt>	Convert packed 128-bit ipv6 address bytes into a colon-separated ascii bytes representation of that address.
<tt style='background-color:#E8E8E8;'> protocols.haproxy.V2Parser <a href=' /protocols/haproxy/_v2parser.py#L144'>parse</a>(cls,line)</tt>	Parse a bytestring as a full proxy protocol header.
<tt style='background-color:#E8E8E8;'> protocols.haproxy. <a href=' /protocols/haproxy/_exceptions.py#L36'>convertError</a>(sourceType,targetType)</tt>	Convert an error into a different error type.
