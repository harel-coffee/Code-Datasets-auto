<tt style='background-color:#E8E8E8;'> core.PrettyHelpFormatter <a href=' /baseparser.py#L27'>_format_option_strings</a>(option,mvarfmt,optsep)</tt>	Return a comma-separated list of option strings and metavars.
<tt style='background-color:#E8E8E8;'> core.PrettyHelpFormatter <a href=' /baseparser.py#L55'>format_usage</a>(usage)</tt>	Ensure there is only one newline between usage and the first heading if there is no description.
<tt style='background-color:#E8E8E8;'> core.CustomOptionParser <a href=' /baseparser.py#L108'>insert_option_group</a>(idx)</tt>	Insert an optiongroup at a given position.
<tt style='background-color:#E8E8E8;'> core.CustomOptionParser <a href=' /baseparser.py#L117'>option_list_all</a>()</tt>	Get a list of all options including those in option groups.
<tt style='background-color:#E8E8E8;'> core.ConfigOptionParser <a href=' /baseparser.py#L147'>_update_defaults</a>(defaults)</tt>	Updates the given defaults with values from the config files and the environ.
<tt style='background-color:#E8E8E8;'> core.ConfigOptionParser <a href=' /baseparser.py#L196'>get_default_values</a>()</tt>	Overriding to make updating the defaults after instantiation of the option parser possible _update_defaults() does the dirty work.
<tt style='background-color:#E8E8E8;'> core.PackageFinder <a href=' /index.py#L108'>__init__</a>(find_links,index_urls,allow_all_prereleases,trusted_hosts)</tt>	Create a packagefinder.
<tt style='background-color:#E8E8E8;'> core.PackageFinder <a href=' /index.py#L205'>_sort_locations</a>(locations,expand_dir)</tt>	Sort locations into "files" archives and "urls", and return.
<tt style='background-color:#E8E8E8;'> core.PackageFinder <a href=' /index.py#L255'>_candidate_sort_key</a>(candidate)</tt>	Function used to generate link sort key for link tuples.
<tt style='background-color:#E8E8E8;'> core.PackageFinder <a href=' /index.py#L353'>_get_index_urls_locations</a>(project_name)</tt>	Returns the locations found via self index_urls.
<tt style='background-color:#E8E8E8;'> core.PackageFinder <a href=' /index.py#L375'>find_all_candidates</a>(project_name)</tt>	Find all available installationcandidate for project_name this checks index_urls find_links and dependency_links.
<tt style='background-color:#E8E8E8;'> core.PackageFinder <a href=' /index.py#L458'>find_requirement</a>(req,upgrade)</tt>	Try to find a link matching req.
<tt style='background-color:#E8E8E8;'> core.PackageFinder <a href=' /index.py#L557'>_get_pages</a>(locations,project_name)</tt>	Yields (page page_url) from the given locations skipping locations that have errors.
<tt style='background-color:#E8E8E8;'> core.PackageFinder <a href=' /index.py#L576'>_sort_links</a>(links)</tt>	Returns elements of links in order non-egg links first egg links.
<tt style='background-color:#E8E8E8;'> core.PackageFinder <a href=' /index.py#L605'>_link_package_versions</a>(link,search)</tt>	Return an installationcandidate or none.
<tt style='background-color:#E8E8E8;'> core. <a href=' /index.py#L686'>egg_info_matches</a>(egg_info,search_name,link,_egg_info_re)</tt>	Pull the version part out of a string.
<tt style='background-color:#E8E8E8;'> core.HTMLPage <a href=' /index.py#L832'>_get_content_type</a>(url,session)</tt>	Get the content-type of the given url using a head request.
<tt style='background-color:#E8E8E8;'> core.HTMLPage <a href=' /index.py#L857'>links</a>()</tt>	Yields all links in the page.
<tt style='background-color:#E8E8E8;'> core.HTMLPage <a href=' /index.py#L872'>clean_link</a>(url)</tt>	Makes sure a link is fully encoded that is if a ' ' shows up in.
<tt style='background-color:#E8E8E8;'> core.Link <a href=' /index.py#L882'>__init__</a>(url,comes_from,requires_python)</tt>	Object representing a parsed link from https //pypi python org/simple/*.
<tt style='background-color:#E8E8E8;'> core.Link <a href=' /index.py#L1026'>is_artifact</a>()</tt>	Determines if this points to an actual artifact e g a tarball or if.
<tt style='background-color:#E8E8E8;'> core. <a href=' /download.py#L65'>user_agent</a>()</tt>	Return a string representing the user agent.
<tt style='background-color:#E8E8E8;'> core. <a href=' /download.py#L395'>get_file_content</a>(url,comes_from,session)</tt>	Gets the content of a file it may be a filename file url or http url.
<tt style='background-color:#E8E8E8;'> core. <a href=' /download.py#L445'>is_url</a>(name)</tt>	Returns true if the name looks like a url.
<tt style='background-color:#E8E8E8;'> core. <a href=' /download.py#L453'>url_to_path</a>(url)</tt>	Convert a file url to a path.
<tt style='background-color:#E8E8E8;'> core. <a href=' /download.py#L470'>path_to_url</a>(path)</tt>	Convert a path to a file url the path will be made absolute and have.
<tt style='background-color:#E8E8E8;'> core. <a href=' /download.py#L480'>is_archive_file</a>(name)</tt>	Return true if name is a considered as an archive file.
<tt style='background-color:#E8E8E8;'> core. <a href=' /download.py#L508'>is_dir_url</a>(link)</tt>	Return whether a file // link points to a directory.
<tt style='background-color:#E8E8E8;'> core. <a href=' /download.py#L685'>unpack_file_url</a>(link,location,download_dir,hashes)</tt>	Unpack link into location.
<tt style='background-color:#E8E8E8;'> core. <a href=' /download.py#L733'>_copy_dist_from_dir</a>(link_path,location)</tt>	Copy distribution files in link_path to location.
<tt style='background-color:#E8E8E8;'> core. <a href=' /download.py#L840'>_download_http_url</a>(link,session,temp_dir,hashes)</tt>	Download link url into temp_dir using provided session.
<tt style='background-color:#E8E8E8;'> core. <a href=' /download.py#L899'>_check_download_dir</a>(link,download_dir,hashes)</tt>	Check download_dir for previously downloaded file with correct hash.
<tt style='background-color:#E8E8E8;'> core. <a href=' /cmdoptions.py#L25'>make_option_group</a>(group,parser)</tt>	Return an optiongroup object.
<tt style='background-color:#E8E8E8;'> core. <a href=' /cmdoptions.py#L37'>check_install_build_global</a>(options,check_options)</tt>	Disable wheels if per-setup py call options are set.
<tt style='background-color:#E8E8E8;'> core. <a href=' /cmdoptions.py#L327'>_get_format_control</a>(values,option)</tt>	Get a format_control object.
<tt style='background-color:#E8E8E8;'> core. <a href=' /cmdoptions.py#L466'>_merge_hash</a>(option,opt_str,value,parser)</tt>	Given a value spelled "algo digest", append the digest to a list pointed to in a dict by the algo name.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pep425tags.py#L29'>get_abbr_impl</a>()</tt>	Return abbreviated implementation name.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pep425tags.py#L42'>get_impl_ver</a>()</tt>	Return implementation version.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pep425tags.py#L50'>get_impl_version_info</a>()</tt>	Return sys version_info-like tuple for use in decrementing the minor.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pep425tags.py#L61'>get_impl_tag</a>()</tt>	Returns the tag for this specific implementation.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pep425tags.py#L68'>get_flag</a>(var,fallback,expected,warn)</tt>	Use a fallback method for determining soabi flags if the needed config var is unset or unavailable.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pep425tags.py#L80'>get_abi_tag</a>()</tt>	Return the abi tag based on soabi if available or emulate soabi cpython 2 pypy.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pep425tags.py#L118'>get_platform</a>()</tt>	Return our platform name 'win32', 'linux_x86_64'.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pep425tags.py#L161'>get_darwin_arches</a>(major,minor,machine)</tt>	Return a list of supported arches including group arches for the given major minor and machine architecture of an macos machine.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pep425tags.py#L222'>get_supported</a>(versions,noarch,platform,impl)</tt>	Return a list of supported tags for each version specified in versions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /locations.py#L32'>write_delete_marker_file</a>(directory)</tt>	Write the pip delete marker file into this directory.
<tt style='background-color:#E8E8E8;'> core. <a href=' /locations.py#L41'>running_under_virtualenv</a>()</tt>	Return true if we're running inside a virtualenv false otherwise.
<tt style='background-color:#E8E8E8;'> core. <a href=' /locations.py#L54'>virtualenv_no_global</a>()</tt>	Return true if in a venv and no system site packages.
<tt style='background-color:#E8E8E8;'> core. <a href=' /locations.py#L136'>distutils_scheme</a>(dist_name,user,home,root)</tt>	Return a distutils install scheme.
<tt style='background-color:#E8E8E8;'> core.HashError <a href=' /exceptions.py#L98'>body</a>()</tt>	Return a summary of me for display under the heading.
<tt style='background-color:#E8E8E8;'> core.HashError <a href=' /exceptions.py#L113'>_requirement_name</a>()</tt>	Return a description of the requirement that triggered me.
<tt style='background-color:#E8E8E8;'> core.HashMissing <a href=' /exceptions.py#L153'>__init__</a>(gotten_hash)</tt>	:param gotten_hash the hash of the possibly malicious archive we.
<tt style='background-color:#E8E8E8;'> core.HashMismatch <a href=' /exceptions.py#L201'>__init__</a>(allowed,gots)</tt>	:param allowed a dict of algorithm names pointing to lists of allowed.
<tt style='background-color:#E8E8E8;'> core.HashMismatch <a href=' /exceptions.py#L215'>_hash_comparison</a>()</tt>	Return a comparison of actual and expected hash values.
<tt style='background-color:#E8E8E8;'> core.RequirementCommand <a href=' /basecommand.py#L264'>populate_requirement_set</a>(requirement_set,args,options,finder)</tt>	Marshal cmd line args into a requirement set.
<tt style='background-color:#E8E8E8;'> core.RequirementCommand <a href=' /basecommand.py#L316'>_build_package_finder</a>(options,session,platform,python_versions)</tt>	Create a package finder appropriate to this requirement command.
<tt style='background-color:#E8E8E8;'> core. <a href=' /__init__.py#L54'>autocomplete</a>()</tt>	Command and option completion for the main option parser and options and its subcommands and options.
<tt style='background-color:#E8E8E8;'> core. <a href=' /compat.py#L62'>get_path_uid</a>(path)</tt>	Return path's uid.
<tt style='background-color:#E8E8E8;'> core. <a href=' /compat.py#L91'>expanduser</a>(path)</tt>	Expand ~ and ~user constructions.
<tt style='background-color:#E8E8E8;'> core. <a href=' /compat.py#L116'>samefile</a>(file1,file2)</tt>	Provide an alternative for os path samefile on windows/python2.
<tt style='background-color:#E8E8E8;'> core.Configuration <a href=' /configuration.py#L36'>items</a>()</tt>	Returns key-value pairs like dict values() representing the loaded.
<tt style='background-color:#E8E8E8;'> core.Configuration <a href=' /configuration.py#L42'>_load_config_files</a>(section)</tt>	Loads configuration from configuration files.
<tt style='background-color:#E8E8E8;'> core.Configuration <a href=' /configuration.py#L55'>_load_environment_vars</a>()</tt>	Loads configuration from environment variables.
<tt style='background-color:#E8E8E8;'> core.Configuration <a href=' /configuration.py#L60'>_normalize_keys</a>(items)</tt>	Return a config dictionary with normalized keys regardless of.
<tt style='background-color:#E8E8E8;'> core.Configuration <a href=' /configuration.py#L72'>_get_environ_vars</a>()</tt>	Returns a generator with all environmental vars with prefix pip_.
<tt style='background-color:#E8E8E8;'> core.Configuration <a href=' /configuration.py#L78'>_get_config_files</a>()</tt>	Returns configuration files in a defined order.
<tt style='background-color:#E8E8E8;'> core.WheelCache <a href=' /wheel.py#L54'>__init__</a>(cache_dir,format_control)</tt>	Create a wheel cache.
<tt style='background-color:#E8E8E8;'> core. <a href=' /wheel.py#L69'>_cache_for_link</a>(cache_dir,link)</tt>	Return a directory to store cached wheels in for link.
<tt style='background-color:#E8E8E8;'> core. <a href=' /wheel.py#L149'>rehash</a>(path,algo,blocksize)</tt>	Return hash length for path using hashlib new algo.
<tt style='background-color:#E8E8E8;'> core. <a href=' /wheel.py#L173'>fix_script</a>(path)</tt>	Replace #!python with #!/path/to/python return true if file was changed.
<tt style='background-color:#E8E8E8;'> core. <a href=' /wheel.py#L194'>root_is_purelib</a>(name,wheeldir)</tt>	Return true if the extracted wheel in wheeldir should go into purelib.
<tt style='background-color:#E8E8E8;'> core. <a href=' /wheel.py#L241'>move_wheel_files</a>(name,req,wheeldir,user)</tt>	Install a wheel.
<tt style='background-color:#E8E8E8;'> core. <a href=' /wheel.py#L531'>wheel_version</a>(source_dir)</tt>	Return the wheel-version of an extracted wheel if possible.
<tt style='background-color:#E8E8E8;'> core. <a href=' /wheel.py#L550'>check_compatibility</a>(version,name)</tt>	Raises errors or warns if called with an incompatible wheel-version.
<tt style='background-color:#E8E8E8;'> core.Wheel <a href=' /wheel.py#L591'>__init__</a>(filename)</tt>	:raises invalidwheelfilename when the filename is invalid for a wheel.
<tt style='background-color:#E8E8E8;'> core.Wheel <a href=' /wheel.py#L615'>support_index_min</a>(tags)</tt>	Return the lowest index that one of the wheel's file_tag combinations achieves in the supported_tags list e.
<tt style='background-color:#E8E8E8;'> core.Wheel <a href=' /wheel.py#L627'>supported</a>(tags)</tt>	Is this wheel supported on this system?.
<tt style='background-color:#E8E8E8;'> core.WheelBuilder <a href=' /wheel.py#L646'>_build_one</a>(req,output_dir,python_tag)</tt>	Build one wheel.
<tt style='background-color:#E8E8E8;'> req.InstallRequirement <a href=' /req/req_install.py#L174'>from_line</a>(cls,name,comes_from,isolated)</tt>	Creates an installrequirement from a name which might be a requirement directory containing 'setup.
<tt style='background-color:#E8E8E8;'> req.InstallRequirement <a href=' /req/req_install.py#L291'>populate_link</a>(finder,upgrade,require_hashes)</tt>	Ensure that if a link can be found for this that it is found.
<tt style='background-color:#E8E8E8;'> req.InstallRequirement <a href=' /req/req_install.py#L315'>is_pinned</a>()</tt>	Return whether i am pinned to an exact version.
<tt style='background-color:#E8E8E8;'> req.InstallRequirement <a href=' /req/req_install.py#L365'>_correct_build_location</a>()</tt>	Move self _temp_build_dir to self _ideal_build_dir/self req name.
<tt style='background-color:#E8E8E8;'> req.InstallRequirement <a href=' /req/req_install.py#L626'>uninstall</a>(auto_confirm)</tt>	Uninstall the distribution currently satisfying this requirement.
<tt style='background-color:#E8E8E8;'> req.InstallRequirement <a href=' /req/req_install.py#L800'>ensure_has_source_dir</a>(parent_dir)</tt>	Ensure that a source_dir is set.
<tt style='background-color:#E8E8E8;'> req.InstallRequirement <a href=' /req/req_install.py#L840'>remove_temporary_source</a>()</tt>	Remove the source files from this requirement if they are marked.
<tt style='background-color:#E8E8E8;'> req.InstallRequirement <a href=' /req/req_install.py#L880'>check_if_exists</a>()</tt>	Find an installed distribution that satisfies or conflicts with this requirement and set self.
<tt style='background-color:#E8E8E8;'> req.InstallRequirement <a href=' /req/req_install.py#L936'>get_dist</a>()</tt>	Return a pkg_resources distribution built from self egg_info_path.
<tt style='background-color:#E8E8E8;'> req.InstallRequirement <a href=' /req/req_install.py#L947'>has_hash_options</a>()</tt>	Return whether any known-good hashes are specified as options.
<tt style='background-color:#E8E8E8;'> req.InstallRequirement <a href=' /req/req_install.py#L957'>hashes</a>(trust_internet)</tt>	Return a hash-comparer that considers my option- and url-based hashes to be known-good.
<tt style='background-color:#E8E8E8;'> req. <a href=' /req/req_install.py#L979'>_strip_postfix</a>(req)</tt>	Strip req postfix -dev 0 2 etc.
<tt style='background-color:#E8E8E8;'> req. <a href=' /req/req_install.py#L995'>parse_editable</a>(editable_req)</tt>	Parses an editable requirement into - a requirement name.
<tt style='background-color:#E8E8E8;'> req. <a href=' /req/req_install.py#L1062'>deduce_helpful_msg</a>(req)</tt>	Returns helpful msg in case requirements file does not exist or cannot be parsed.
<tt style='background-color:#E8E8E8;'> req. <a href=' /req/req_file.py#L54'>parse_requirements</a>(filename,finder,comes_from,options)</tt>	Parse a requirements file and yield installrequirement instances.
<tt style='background-color:#E8E8E8;'> req. <a href=' /req/req_file.py#L87'>preprocess</a>(content,options)</tt>	Split filter and join lines and return a line iterator.
<tt style='background-color:#E8E8E8;'> req. <a href=' /req/req_file.py#L100'>process_line</a>(line,filename,line_number,finder)</tt>	Process a single requirements line this can result in creating/yielding requirements or updating the finder.
<tt style='background-color:#E8E8E8;'> req. <a href=' /req/req_file.py#L214'>break_args_options</a>(line)</tt>	Break up the line into an args and options string we only want to shlex.
<tt style='background-color:#E8E8E8;'> req. <a href=' /req/req_file.py#L231'>build_parser</a>()</tt>	Return a parser for parsing requirement lines.
<tt style='background-color:#E8E8E8;'> req. <a href=' /req/req_file.py#L251'>join_lines</a>(lines_enum)</tt>	Joins a line ending in '' with the previous line except when following comments.
<tt style='background-color:#E8E8E8;'> req. <a href=' /req/req_file.py#L280'>ignore_comments</a>(lines_enum)</tt>	Strips comments and filter empty lines.
<tt style='background-color:#E8E8E8;'> req. <a href=' /req/req_file.py#L291'>skip_regex</a>(lines_enum,options)</tt>	Skip lines that match '--skip-requirements-regex' pattern.
<tt style='background-color:#E8E8E8;'> req. <a href=' /req/req_uninstall.py#L29'>_script_names</a>(dist,script_name,is_gui)</tt>	Create the fully qualified name of the files created by {console gui}_scripts for the given dist.
<tt style='background-color:#E8E8E8;'> req. <a href=' /req/req_uninstall.py#L61'>uninstallation_paths</a>(dist)</tt>	Yield all the uninstallation paths for dist based on record-without- pyc.
<tt style='background-color:#E8E8E8;'> req.UninstallPathSet <a href=' /req/req_uninstall.py#L93'>_permitted</a>(path)</tt>	Return true if the given path is one we are permitted to remove/modify false otherwise.
<tt style='background-color:#E8E8E8;'> req.UninstallPathSet <a href=' /req/req_uninstall.py#L129'>compact</a>(paths)</tt>	Compact a path set to contain the minimal number of paths necessary to contain all paths in the set.
<tt style='background-color:#E8E8E8;'> req.UninstallPathSet <a href=' /req/req_uninstall.py#L147'>remove</a>(auto_confirm)</tt>	Remove paths in self paths with confirmation (unless.
<tt style='background-color:#E8E8E8;'> req.UninstallPathSet <a href=' /req/req_uninstall.py#L189'>rollback</a>()</tt>	Rollback the changes previously made by remove().
<tt style='background-color:#E8E8E8;'> req.UninstallPathSet <a href=' /req/req_uninstall.py#L205'>commit</a>()</tt>	Remove temporary save dir rollback will no longer be possible.
<tt style='background-color:#E8E8E8;'> req.DistAbstraction <a href=' /req/req_set.py#L81'>dist</a>(finder)</tt>	Return a setuptools dist object.
<tt style='background-color:#E8E8E8;'> req.DistAbstraction <a href=' /req/req_set.py#L85'>prep_for_dist</a>()</tt>	Ensure that we can get a dist for this requirement.
<tt style='background-color:#E8E8E8;'> req. <a href=' /req/req_set.py#L90'>make_abstract_dist</a>(req_to_install)</tt>	Factory to make an abstract dist object.
<tt style='background-color:#E8E8E8;'> req.RequirementSet <a href=' /req/req_set.py#L144'>__init__</a>(build_dir,src_dir,download_dir,upgrade)</tt>	Create a requirementset.
<tt style='background-color:#E8E8E8;'> req.RequirementSet <a href=' /req/req_set.py#L215'>add_requirement</a>(install_req,parent_req_name,extras_requested)</tt>	Add install_req as a requirement to install.
<tt style='background-color:#E8E8E8;'> req.RequirementSet <a href=' /req/req_set.py#L341'>prepare_files</a>(finder)</tt>	Prepare process create temp directories download and/or unpack files.
<tt style='background-color:#E8E8E8;'> req.RequirementSet <a href=' /req/req_set.py#L382'>_check_skip_installed</a>(req_to_install,finder)</tt>	Check if req_to_install should be skipped.
<tt style='background-color:#E8E8E8;'> req.RequirementSet <a href=' /req/req_set.py#L446'>_prepare_file</a>(finder,req_to_install,require_hashes,ignore_dependencies)</tt>	Prepare a single requirements file.
<tt style='background-color:#E8E8E8;'> req.RequirementSet <a href=' /req/req_set.py#L713'>cleanup_files</a>()</tt>	Clean up files remove builds.
<tt style='background-color:#E8E8E8;'> req.RequirementSet <a href=' /req/req_set.py#L720'>_to_install</a>()</tt>	Create the installation order.
<tt style='background-color:#E8E8E8;'> req.RequirementSet <a href=' /req/req_set.py#L746'>install</a>(install_options,global_options)</tt>	Install everything in this set (after having downloaded and unpacked.
<tt style='background-color:#E8E8E8;'> vcs.Mercurial <a href=' /vcs/mercurial.py#L22'>export</a>(location)</tt>	Export the hg repository at the url to the destination location.
<tt style='background-color:#E8E8E8;'> vcs.Mercurial <a href=' /vcs/mercurial.py#L99'>check_version</a>(dest,rev_options)</tt>	Always assume the versions don't match.
<tt style='background-color:#E8E8E8;'> vcs.Subversion <a href=' /vcs/subversion.py#L31'>get_info</a>(location)</tt>	Returns url revision where both are strings.
<tt style='background-color:#E8E8E8;'> vcs.Subversion <a href=' /vcs/subversion.py#L59'>export</a>(location)</tt>	Export the svn repository at the url to the destination location.
<tt style='background-color:#E8E8E8;'> vcs.Subversion <a href=' /vcs/subversion.py#L111'>get_revision</a>(location)</tt>	Return the maximum revision for all files under a given location.
<tt style='background-color:#E8E8E8;'> vcs.Subversion <a href=' /vcs/subversion.py#L218'>check_version</a>(dest,rev_options)</tt>	Always assume the versions don't match.
<tt style='background-color:#E8E8E8;'> vcs.Git <a href=' /vcs/git.py#L66'>export</a>(location)</tt>	Export the git repository at the url to the destination location.
<tt style='background-color:#E8E8E8;'> vcs.Git <a href=' /vcs/git.py#L79'>check_rev_options</a>(rev,dest,rev_options)</tt>	Check the revision options before checkout to compensate that tags and branches may need origin/ as a prefix.
<tt style='background-color:#E8E8E8;'> vcs.Git <a href=' /vcs/git.py#L100'>check_version</a>(dest,rev_options)</tt>	Compare the current sha to the ref ref may be a branch or tag name.
<tt style='background-color:#E8E8E8;'> vcs.Git <a href=' /vcs/git.py#L161'>get_url</a>(location)</tt>	Return url of the first remote encountered.
<tt style='background-color:#E8E8E8;'> vcs.Git <a href=' /vcs/git.py#L180'>get_full_refs</a>(location)</tt>	Yields tuples of commit ref for branches and tags.
<tt style='background-color:#E8E8E8;'> vcs.Git <a href=' /vcs/git.py#L197'>is_ref_commit</a>(ref)</tt>	A ref is a commit sha if it is not anything else.
<tt style='background-color:#E8E8E8;'> vcs.Git <a href=' /vcs/git.py#L209'>get_short_refs</a>(location)</tt>	Return map of named refs branches or tags to commit hashes.
<tt style='background-color:#E8E8E8;'> vcs.Git <a href=' /vcs/git.py#L224'>_get_subdirectory</a>(location)</tt>	Return the relative path of setup py to the git repo root.
<tt style='background-color:#E8E8E8;'> vcs.Git <a href=' /vcs/git.py#L265'>get_url_rev</a>()</tt>	Prefixes stub urls like 'user@hostname user/repo git' with 'ssh //'.
<tt style='background-color:#E8E8E8;'> vcs.VcsSupport <a href=' /vcs/__init__.py#L70'>get_backend_name</a>(location)</tt>	Return the name of the version control backend if found at given location e.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L107'>_is_local_repository</a>(repo)</tt>	Posix absolute paths start with os path sep.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L121'>export</a>(location)</tt>	Export the repository at the url to the destination location i.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L128'>get_url_rev</a>()</tt>	Returns the correct repository url and revision by parsing the given.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L147'>get_info</a>(location)</tt>	Returns url revision where both are strings.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L155'>normalize_url</a>(url)</tt>	Normalize a url for comparison by unquoting it and removing any trailing slash.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L162'>compare_urls</a>(url1,url2)</tt>	Compare two repo urls for identity ignoring incidental differences.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L168'>obtain</a>(dest)</tt>	Called when installing or updating an editable package takes the source path of the checkout.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L175'>switch</a>(dest,url,rev_options)</tt>	Switch the repo at dest to point to url.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L181'>update</a>(dest,rev_options)</tt>	Update an already-existing repo to the given rev_options.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L187'>check_version</a>(dest,rev_options)</tt>	Return true if the version is identical to what exists and doesn't need to be updated.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L194'>check_destination</a>(dest,url,rev_options,rev_display)</tt>	Prepare a location to receive a checkout/clone.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L279'>unpack</a>(location)</tt>	Clean up current location and download the url repository.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L288'>get_src_requirement</a>(dist,location)</tt>	Return a string representing the requirement needed to.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L297'>get_url</a>(location)</tt>	Return the url used at location.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L304'>get_revision</a>(location)</tt>	Return the current revision of the files at location.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L311'>run_command</a>(cmd,show_stdout,cwd,on_returncode)</tt>	Run a vcs subcommand.
<tt style='background-color:#E8E8E8;'> vcs.VersionControl <a href=' /vcs/__init__.py#L337'>controls_location</a>(cls,location)</tt>	Check if a location is controlled by the vcs.
<tt style='background-color:#E8E8E8;'> vcs.Bazaar <a href=' /vcs/bazaar.py#L38'>export</a>(location)</tt>	Export the bazaar repository at the url to the destination location.
<tt style='background-color:#E8E8E8;'> vcs.Bazaar <a href=' /vcs/bazaar.py#L111'>check_version</a>(dest,rev_options)</tt>	Always assume the versions don't match.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/ipaddress.py#L135'>ip_address</a>(address)</tt>	Take an ip string/int and return an object of the correct type.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/ipaddress.py#L171'>ip_network</a>(address,strict)</tt>	Take an ip string/int and return an object of the correct type.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/ipaddress.py#L207'>ip_interface</a>(address)</tt>	Take an ip string/int and return an object of the correct type.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/ipaddress.py#L242'>v4_int_to_packed</a>(address)</tt>	Represent an address as 4 packed bytes in network big-endian order.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/ipaddress.py#L262'>v6_int_to_packed</a>(address)</tt>	Represent an address as 16 packed bytes in network big-endian order.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/ipaddress.py#L278'>_split_optional_netmask</a>(address)</tt>	Helper to split the netmask and raise addressvalueerror if needed.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/ipaddress.py#L286'>_find_address_range</a>(addresses)</tt>	Find a sequence of sorted deduplicated ipv#address.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/ipaddress.py#L306'>_count_righthand_zero_bits</a>(number,bits)</tt>	Count the number of zero bits on the right hand side.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/ipaddress.py#L322'>summarize_address_range</a>(first,last)</tt>	Summarize a network range given the first and last ip addresses.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/ipaddress.py#L377'>_collapse_addresses_internal</a>(addresses)</tt>	Loops through the addresses collapsing concurrent netblocks.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/ipaddress.py#L426'>collapse_addresses</a>(addresses)</tt>	Collapse a list of ip objects.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/ipaddress.py#L480'>get_mixed_type_key</a>(obj)</tt>	Return a key suitable for sorting between networks and addresses.
<tt style='background-color:#E8E8E8;'> _vendor._IPAddressBase <a href=' /_vendor/ipaddress.py#L511'>exploded</a>()</tt>	Return the longhand version of the ip address as a string.
<tt style='background-color:#E8E8E8;'> _vendor._IPAddressBase <a href=' /_vendor/ipaddress.py#L516'>compressed</a>()</tt>	Return the shorthand version of the ip address as a string.
<tt style='background-color:#E8E8E8;'> _vendor._IPAddressBase <a href=' /_vendor/ipaddress.py#L521'>reverse_pointer</a>()</tt>	The name of the reverse dns pointer for the ip address e g :.
<tt style='background-color:#E8E8E8;'> _vendor._IPAddressBase <a href=' /_vendor/ipaddress.py#L556'>_ip_int_from_prefix</a>(cls,prefixlen)</tt>	Turn the prefix length into a bitwise netmask args.
<tt style='background-color:#E8E8E8;'> _vendor._IPAddressBase <a href=' /_vendor/ipaddress.py#L569'>_prefix_from_ip_int</a>(cls,ip_int)</tt>	Return prefix length from the bitwise netmask.
<tt style='background-color:#E8E8E8;'> _vendor._IPAddressBase <a href=' /_vendor/ipaddress.py#L599'>_prefix_from_prefix_string</a>(cls,prefixlen_str)</tt>	Return prefix length from a numeric string args.
<tt style='background-color:#E8E8E8;'> _vendor._IPAddressBase <a href=' /_vendor/ipaddress.py#L624'>_prefix_from_ip_string</a>(cls,ip_str)</tt>	Turn a netmask/hostmask string into a prefix length args.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L740'>hosts</a>()</tt>	Generate iterator over usable hosts in a network.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L810'>overlaps</a>(other)</tt>	Tell if self is partly contained in other.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L846'>num_addresses</a>()</tt>	Number of hosts in the current subnet.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L863'>address_exclude</a>(other)</tt>	Remove an address from a larger block.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L938'>compare_networks</a>(other)</tt>	Compare two ip objects.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L986'>_get_networks_key</a>()</tt>	Network-only key function.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L996'>subnets</a>(prefixlen_diff,new_prefix)</tt>	The subnets which join to make the current subnet.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L1049'>supernet</a>(prefixlen_diff,new_prefix)</tt>	The supernet containing the current network.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L1089'>is_multicast</a>()</tt>	Test if the address is reserved for multicast use.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L1129'>is_reserved</a>()</tt>	Test if the address is otherwise ietf reserved.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L1141'>is_link_local</a>()</tt>	Test if the address is reserved for link-local.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L1152'>is_private</a>()</tt>	Test if this address is allocated for private networks.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L1164'>is_global</a>()</tt>	Test if this address is allocated for public networks.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L1175'>is_unspecified</a>()</tt>	Test if the address is unspecified.
<tt style='background-color:#E8E8E8;'> _vendor._BaseNetwork <a href=' /_vendor/ipaddress.py#L1187'>is_loopback</a>()</tt>	Test if the address is a loopback address.
<tt style='background-color:#E8E8E8;'> _vendor._BaseV4 <a href=' /_vendor/ipaddress.py#L1226'>_make_netmask</a>(cls,arg)</tt>	Make a (netmask prefix_len) tuple from the given argument.
<tt style='background-color:#E8E8E8;'> _vendor._BaseV4 <a href=' /_vendor/ipaddress.py#L1250'>_ip_int_from_string</a>(cls,ip_str)</tt>	Turn the given ip string into an integer for comparison.
<tt style='background-color:#E8E8E8;'> _vendor._BaseV4 <a href=' /_vendor/ipaddress.py#L1277'>_parse_octet</a>(cls,octet_str)</tt>	Convert a decimal octet into an integer.
<tt style='background-color:#E8E8E8;'> _vendor._BaseV4 <a href=' /_vendor/ipaddress.py#L1314'>_string_from_ip_int</a>(cls,ip_int)</tt>	Turns a 32-bit integer into dotted decimal notation.
<tt style='background-color:#E8E8E8;'> _vendor._BaseV4 <a href=' /_vendor/ipaddress.py#L1330'>_is_hostmask</a>(ip_str)</tt>	Test if the ip string is a hostmask rather than a netmask.
<tt style='background-color:#E8E8E8;'> _vendor._BaseV4 <a href=' /_vendor/ipaddress.py#L1351'>_reverse_pointer</a>()</tt>	Return the reverse dns pointer name for the ipv4 address.
<tt style='background-color:#E8E8E8;'> _vendor.IPv4Address <a href=' /_vendor/ipaddress.py#L1375'>__init__</a>(address)</tt>	Args address a string or integer representing the ip.
<tt style='background-color:#E8E8E8;'> _vendor.IPv4Address <a href=' /_vendor/ipaddress.py#L1411'>packed</a>()</tt>	The binary representation of this address.
<tt style='background-color:#E8E8E8;'> _vendor.IPv4Address <a href=' /_vendor/ipaddress.py#L1416'>is_reserved</a>()</tt>	Test if the address is otherwise ietf reserved.
<tt style='background-color:#E8E8E8;'> _vendor.IPv4Address <a href=' /_vendor/ipaddress.py#L1427'>is_private</a>()</tt>	Test if this address is allocated for private networks.
<tt style='background-color:#E8E8E8;'> _vendor.IPv4Address <a href=' /_vendor/ipaddress.py#L1444'>is_multicast</a>()</tt>	Test if the address is reserved for multicast use.
<tt style='background-color:#E8E8E8;'> _vendor.IPv4Address <a href=' /_vendor/ipaddress.py#L1455'>is_unspecified</a>()</tt>	Test if the address is unspecified.
<tt style='background-color:#E8E8E8;'> _vendor.IPv4Address <a href=' /_vendor/ipaddress.py#L1466'>is_loopback</a>()</tt>	Test if the address is a loopback address.
<tt style='background-color:#E8E8E8;'> _vendor.IPv4Address <a href=' /_vendor/ipaddress.py#L1476'>is_link_local</a>()</tt>	Test if the address is reserved for link-local.
<tt style='background-color:#E8E8E8;'> _vendor.IPv4Network <a href=' /_vendor/ipaddress.py#L1584'>__init__</a>(address,strict)</tt>	Instantiate a new ipv4 network object.
<tt style='background-color:#E8E8E8;'> _vendor.IPv4Network <a href=' /_vendor/ipaddress.py#L1669'>is_global</a>()</tt>	Test if this address is allocated for public networks.
<tt style='background-color:#E8E8E8;'> _vendor._BaseV6 <a href=' /_vendor/ipaddress.py#L1738'>_make_netmask</a>(cls,arg)</tt>	Make a (netmask prefix_len) tuple from the given argument.
<tt style='background-color:#E8E8E8;'> _vendor._BaseV6 <a href=' /_vendor/ipaddress.py#L1756'>_ip_int_from_string</a>(cls,ip_str)</tt>	Turn an ipv6 ip_str into an integer.
<tt style='background-color:#E8E8E8;'> _vendor._BaseV6 <a href=' /_vendor/ipaddress.py#L1861'>_parse_hextet</a>(cls,hextet_str)</tt>	Convert an ipv6 hextet string into an integer.
<tt style='background-color:#E8E8E8;'> _vendor._BaseV6 <a href=' /_vendor/ipaddress.py#L1887'>_compress_hextets</a>(cls,hextets)</tt>	Compresses a list of hextets.
<tt style='background-color:#E8E8E8;'> _vendor._BaseV6 <a href=' /_vendor/ipaddress.py#L1935'>_string_from_ip_int</a>(cls,ip_int)</tt>	Turns a 128-bit integer into hexadecimal notation.
<tt style='background-color:#E8E8E8;'> _vendor._BaseV6 <a href=' /_vendor/ipaddress.py#L1961'>_explode_shorthand_ip_string</a>()</tt>	Expand a shortened ipv6 address.
<tt style='background-color:#E8E8E8;'> _vendor._BaseV6 <a href=' /_vendor/ipaddress.py#L1985'>_reverse_pointer</a>()</tt>	Return the reverse dns pointer name for the ipv6 address.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Address <a href=' /_vendor/ipaddress.py#L2009'>__init__</a>(address)</tt>	Instantiate a new ipv6 address object.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Address <a href=' /_vendor/ipaddress.py#L2046'>packed</a>()</tt>	The binary representation of this address.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Address <a href=' /_vendor/ipaddress.py#L2051'>is_multicast</a>()</tt>	Test if the address is reserved for multicast use.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Address <a href=' /_vendor/ipaddress.py#L2062'>is_reserved</a>()</tt>	Test if the address is otherwise ietf reserved.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Address <a href=' /_vendor/ipaddress.py#L2073'>is_link_local</a>()</tt>	Test if the address is reserved for link-local.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Address <a href=' /_vendor/ipaddress.py#L2083'>is_site_local</a>()</tt>	Test if the address is reserved for site-local.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Address <a href=' /_vendor/ipaddress.py#L2097'>is_private</a>()</tt>	Test if this address is allocated for private networks.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Address <a href=' /_vendor/ipaddress.py#L2108'>is_global</a>()</tt>	Test if this address is allocated for public networks.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Address <a href=' /_vendor/ipaddress.py#L2119'>is_unspecified</a>()</tt>	Test if the address is unspecified.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Address <a href=' /_vendor/ipaddress.py#L2130'>is_loopback</a>()</tt>	Test if the address is a loopback address.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Address <a href=' /_vendor/ipaddress.py#L2141'>ipv4_mapped</a>()</tt>	Return the ipv4 mapped address.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Address <a href=' /_vendor/ipaddress.py#L2154'>teredo</a>()</tt>	Tuple of embedded teredo ips.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Address <a href=' /_vendor/ipaddress.py#L2169'>sixtofour</a>()</tt>	Return the ipv4 6to4 embedded address.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Network <a href=' /_vendor/ipaddress.py#L2285'>__init__</a>(address,strict)</tt>	Instantiate a new ipv6 network object.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Network <a href=' /_vendor/ipaddress.py#L2364'>hosts</a>()</tt>	Generate iterator over usable hosts in a network.
<tt style='background-color:#E8E8E8;'> _vendor.IPv6Network <a href=' /_vendor/ipaddress.py#L2376'>is_site_local</a>()</tt>	Test if the address is reserved for site-local.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/appdirs.py#L45'>user_data_dir</a>(appname,appauthor,version,roaming)</tt>	Return full path to the user-specific data dir for this application.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/appdirs.py#L100'>site_data_dir</a>(appname,appauthor,version,multipath)</tt>	Return full path to the user-shared data dir for this application.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/appdirs.py#L166'>user_config_dir</a>(appname,appauthor,version,roaming)</tt>	Return full path to the user-specific config dir for this application.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/appdirs.py#L206'>site_config_dir</a>(appname,appauthor,version,multipath)</tt>	Return full path to the user-shared data dir for this application.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/appdirs.py#L257'>user_cache_dir</a>(appname,appauthor,version,opinion)</tt>	Return full path to the user-specific cache dir for this application.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/appdirs.py#L314'>user_state_dir</a>(appname,appauthor,version,roaming)</tt>	Return full path to the user-specific state dir for this application.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/appdirs.py#L356'>user_log_dir</a>(appname,appauthor,version,opinion)</tt>	Return full path to the user-specific log dir for this application.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/appdirs.py#L455'>_get_win_folder_from_registry</a>(csidl_name)</tt>	This is a fallback technique at best i'm not sure if using the.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L162'>_xml_escape</a>(data)</tt>	Escape &, <, >, ", ', etc in a string of data.
<tt style='background-color:#E8E8E8;'> _vendor.ParseBaseException <a href=' /_vendor/pyparsing.py#L197'>_from_exception</a>(cls,pe)</tt>	Internal factory method to simplify creating one type of parseexception.
<tt style='background-color:#E8E8E8;'> _vendor.ParseBaseException <a href=' /_vendor/pyparsing.py#L205'>__getattr__</a>(aname)</tt>	Supported attributes by name are.
<tt style='background-color:#E8E8E8;'> _vendor.ParseBaseException <a href=' /_vendor/pyparsing.py#L225'>markInputline</a>(markerString)</tt>	Extracts the exception line from the input string and marks the location of the exception with a special symbol.
<tt style='background-color:#E8E8E8;'> _vendor.ParseResults <a href=' /_vendor/pyparsing.py#L483'>haskeys</a>()</tt>	Since keys() returns an iterator this method is helpful in bypassing code that looks for the existence of any defined results names.
<tt style='background-color:#E8E8E8;'> _vendor.ParseResults <a href=' /_vendor/pyparsing.py#L488'>pop</a>()</tt>	Removes and returns item at specified index (default=c{last}).
<tt style='background-color:#E8E8E8;'> _vendor.ParseResults <a href=' /_vendor/pyparsing.py#L540'>get</a>(key,defaultValue)</tt>	Returns named result matching the given key or if there is no such name then returns the given c{defaultvalue} or c{none} if no.
<tt style='background-color:#E8E8E8;'> _vendor.ParseResults <a href=' /_vendor/pyparsing.py#L562'>insert</a>(index,insStr)</tt>	Inserts new element at location index in the list of parsed tokens.
<tt style='background-color:#E8E8E8;'> _vendor.ParseResults <a href=' /_vendor/pyparsing.py#L582'>append</a>(item)</tt>	Add single element to end of parseresults list of elements.
<tt style='background-color:#E8E8E8;'> _vendor.ParseResults <a href=' /_vendor/pyparsing.py#L596'>extend</a>(itemseq)</tt>	Add sequence of elements to end of parseresults list of elements.
<tt style='background-color:#E8E8E8;'> _vendor.ParseResults <a href=' /_vendor/pyparsing.py#L614'>clear</a>()</tt>	Clear all elements and results names.
<tt style='background-color:#E8E8E8;'> _vendor.ParseResults <a href=' /_vendor/pyparsing.py#L681'>asList</a>()</tt>	Returns the parse results as a nested list of matching tokens all converted to strings.
<tt style='background-color:#E8E8E8;'> _vendor.ParseResults <a href=' /_vendor/pyparsing.py#L697'>asDict</a>()</tt>	Returns the named parse results as a nested dictionary.
<tt style='background-color:#E8E8E8;'> _vendor.ParseResults <a href=' /_vendor/pyparsing.py#L732'>copy</a>()</tt>	Returns a new copy of a c{parseresults} object.
<tt style='background-color:#E8E8E8;'> _vendor.ParseResults <a href=' /_vendor/pyparsing.py#L743'>asXML</a>(doctag,namedItemsOnly,indent,formatted)</tt>	Deprecated returns the parse results as xml tags are created for tokens and lists that have defined results names.
<tt style='background-color:#E8E8E8;'> _vendor.ParseResults <a href=' /_vendor/pyparsing.py#L811'>getName</a>()</tt>	Returns the results name for this token expression useful when several.
<tt style='background-color:#E8E8E8;'> _vendor.ParseResults <a href=' /_vendor/pyparsing.py#L848'>dump</a>(indent,depth,full)</tt>	Diagnostic method for listing out the contents of a c{parseresults}.
<tt style='background-color:#E8E8E8;'> _vendor.ParseResults <a href=' /_vendor/pyparsing.py#L893'>pprint</a>()</tt>	Pretty-printer for parsed results as a list using the c{pprint} module.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L945'>col</a>(loc,strg)</tt>	Returns current column within a string counting newlines as line separators.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L958'>lineno</a>(loc,strg)</tt>	Returns current line number within a string counting newlines as line separators.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L970'>line</a>(loc,strg)</tt>	Returns the line of text containing loc within a string counting newlines as line separators.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L989'>nullDebugAction</a>()</tt>	'do-nothing' debug action to suppress debugging output during parsing.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1085'>setDefaultWhitespaceChars</a>(chars)</tt>	Overrides the default whitespace chars example :.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1100'>inlineLiteralsUsing</a>(cls)</tt>	Set class to be used for inclusion of string literals into a parser.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1144'>copy</a>()</tt>	Make a copy of this c{parserelement} useful for defining different parse actions.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1167'>setName</a>(name)</tt>	Define name for this expression makes debugging and exception messages clearer.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1181'>setResultsName</a>(name,listAllMatches)</tt>	Define name for referencing matching tokens as a nested attribute of the returned parse results.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1209'>setBreak</a>(breakFlag)</tt>	Method to invoke the python pdb debugger when this element is about to be parsed.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1227'>setParseAction</a>()</tt>	Define one or more actions to perform when successfully matching parse element definition.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1265'>addParseAction</a>()</tt>	Add one or more parse actions to expression's list of parse actions see l{i{setparseaction}<setparseaction>}.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1275'>addCondition</a>()</tt>	Add a boolean predicate function to expression's list of parse actions see.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1302'>setFailAction</a>(fn)</tt>	Define action to perform if parsing fails at this expression.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1551'>enablePackrat</a>(cache_size_limit)</tt>	Enables "packrat" parsing which adds memoizing to the parsing logic.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1586'>parseString</a>(instring,parseAll)</tt>	Execute the parse expression with the given string.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1636'>scanString</a>(instring,maxMatches,overlap)</tt>	Scan the input string for expression matches each match will return the.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1707'>transformString</a>(instring)</tt>	Extension to c{l{scanstring}}, to modify matching text with modified tokens that may be returned from a parse action.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1750'>searchString</a>(instring,maxMatches)</tt>	Another extension to c{l{scanstring}}, simplifying the access to the tokens found to match the given parse expression.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1777'>split</a>(instring,maxsplit,includeSeparators)</tt>	Generator method to split a string using the given expression as a separator.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1799'>__add__</a>(other)</tt>	Implementation of + operator - returns c{l{and}} adding strings to a parserelement.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1819'>__radd__</a>(other)</tt>	Implementation of + operator when left operand is not a c{l{parserelement}}.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1831'>__sub__</a>(other)</tt>	Implementation of - operator returns c{l{and}} with error stop.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1843'>__rsub__</a>(other)</tt>	Implementation of - operator when left operand is not a c{l{parserelement}}.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1855'>__mul__</a>(other)</tt>	Implementation of * operator allows use of c{expr * 3} in place of c{expr + expr + expr}.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1926'>__or__</a>(other)</tt>	Implementation of | operator - returns c{l{matchfirst}}.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1938'>__ror__</a>(other)</tt>	Implementation of | operator when left operand is not a c{l{parserelement}}.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1950'>__xor__</a>(other)</tt>	Implementation of ^ operator - returns c{l{or}}.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1962'>__rxor__</a>(other)</tt>	Implementation of ^ operator when left operand is not a c{l{parserelement}}.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1974'>__and__</a>(other)</tt>	Implementation of & operator - returns c{l{each}}.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1986'>__rand__</a>(other)</tt>	Implementation of & operator when left operand is not a c{l{parserelement}}.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L1998'>__invert__</a>()</tt>	Implementation of ~ operator - returns c{l{notany}}.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L2004'>__call__</a>(name)</tt>	Shortcut for c{l{setresultsname}}, with c{listallmatches=false}.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L2023'>suppress</a>()</tt>	Suppresses the output of this c{parserelement}; useful to keep punctuation from cluttering up returned output.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L2030'>leaveWhitespace</a>()</tt>	Disables the skipping of whitespace before matching the characters in the c{parserelement}'s defined pattern.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L2039'>setWhitespaceChars</a>(chars)</tt>	Overrides the default whitespace chars.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L2048'>parseWithTabs</a>()</tt>	Overrides default behavior to expand c{<tab>}s to spaces before parsing the input string.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L2057'>ignore</a>(other)</tt>	Define expression to be ignored (e g comments) while doing pattern.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L2080'>setDebugActions</a>(startAction,successAction,exceptionAction)</tt>	Enable display of debugging messages while doing pattern matching.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L2090'>setDebug</a>(flag)</tt>	Enable display of debugging messages while doing pattern matching.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L2145'>validate</a>(validateTrace)</tt>	Check defined expressions for valid structure check for infinite recursive definitions.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L2151'>parseFile</a>(file_or_filename,parseAll)</tt>	Execute the parse expression on the given file or filename.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L2191'>matches</a>(testString,parseAll)</tt>	Method for quick testing of a parser against a test string good for simple.
<tt style='background-color:#E8E8E8;'> _vendor.ParserElement <a href=' /_vendor/pyparsing.py#L2210'>runTests</a>(tests,parseAll,comment,fullDump)</tt>	Execute the parse expression on a series of test strings showing each test the parsed results or where the parse failed.
<tt style='background-color:#E8E8E8;'> _vendor.Keyword <a href=' /_vendor/pyparsing.py#L2476'>setDefaultKeywordChars</a>(chars)</tt>	Overrides the default keyword chars.
<tt style='background-color:#E8E8E8;'> _vendor.Regex <a href=' /_vendor/pyparsing.py#L2757'>__init__</a>(pattern,flags)</tt>	The parameters c{pattern} and c{flags} are passed to the c{re compile()} function as-is see the python c{re} module for an explanation of the acceptable patterns and flags.
<tt style='background-color:#E8E8E8;'> _vendor.ParseExpression <a href=' /_vendor/pyparsing.py#L3266'>leaveWhitespace</a>()</tt>	Extends c{leavewhitespace} defined in base class and also invokes c{leavewhitespace} on all contained expressions.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4384'>traceParseAction</a>(f)</tt>	Decorator for debugging parse actions.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4428'>delimitedList</a>(expr,delim,combine)</tt>	Helper to define a delimited list of expressions - the delimiter defaults to ','.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4447'>countedArray</a>(expr,intExpr)</tt>	Helper to define a counted list of expressions.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4487'>matchPreviousLiteral</a>(expr)</tt>	Helper to define an expression that is indirectly defined from the tokens matched in a previous expression that is it looks.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4515'>matchPreviousExpr</a>(expr)</tt>	Helper to define an expression that is indirectly defined from the tokens matched in a previous expression that is it looks.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4551'>oneOf</a>(strs,caseless,useRegex)</tt>	Helper to quickly define a set of alternative literals and makes sure to do longest-first testing when there is a conflict regardless of the input order.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4624'>dictOf</a>(key,value)</tt>	Helper to easily and clearly define a dictionary by specifying the respective patterns for the key and value.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4659'>originalTextFor</a>(expr,asString)</tt>	Helper to return the original untokenized text for a given expression useful to.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4696'>ungroup</a>(expr)</tt>	Helper to undo pyparsing's default grouping of and expressions even if all but one are non-empty.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4703'>locatedExpr</a>(expr)</tt>	Helper to decorate a returned token with its starting and ending locations in the input string.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4741'>srange</a>(s)</tt>	Helper to easily define string ranges for use in word construction borrows.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4765'>matchOnlyAtCol</a>(n)</tt>	Helper method for defining parse actions that require matching at a specific column in the input text.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4775'>replaceWith</a>(replStr)</tt>	Helper method for common parse actions that simply return a literal value especially.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4789'>removeQuotes</a>(s,l,t)</tt>	Helper parse action for removing quotation marks from parsed quoted strings.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4803'>tokenMap</a>(func)</tt>	Helper to define a parse action by mapping a function to all elements of a parseresults list if any additional.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4853'>_makeTags</a>(tagStr,xml)</tt>	Internal helper to construct opening and closing tag expressions given a tag name.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4882'>makeHTMLTags</a>(tagStr)</tt>	Helper to construct opening and closing tag expressions for html given a tag name matches.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4901'>makeXMLTags</a>(tagStr)</tt>	Helper to construct opening and closing tag expressions for xml given a tag name matches.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4910'>withAttribute</a>()</tt>	Helper to create a validating parse action to be used with start tags created with c{l{makexmltags}} or c{l{makehtmltags}}.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L4975'>withClass</a>(classname,namespace)</tt>	Simplified version of c{l{withattribute}} when matching on a div class - made difficult because c{class} is a reserved word in python.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L5014'>infixNotation</a>(baseExpr,opList,lpar,rpar)</tt>	Helper method for constructing grammars of expressions made up of operators working in a precedence hierarchy.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L5135'>nestedExpr</a>(opener,closer,content,ignoreExpr)</tt>	Helper method for defining nested lists enclosed in opening and closing delimiters ("(" and ")" are the default).
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L5225'>indentedBlock</a>(blockStatementExpr,indentStack,indent)</tt>	Helper method for defining space-delimited indentation blocks such as those used to define block statements in python source code.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/pyparsing.py#L5345'>replaceHTMLEntity</a>(t)</tt>	Helper parser action to replace common html entities with their special characters.
<tt style='background-color:#E8E8E8;'> _vendor.pyparsing_common <a href=' /_vendor/pyparsing.py#L5570'>convertToDate</a>(fmt)</tt>	Helper to create a parse action for converting parsed date string to python datetime date.
<tt style='background-color:#E8E8E8;'> _vendor.pyparsing_common <a href=' /_vendor/pyparsing.py#L5592'>convertToDatetime</a>(fmt)</tt>	Helper to create a parse action for converting parsed datetime string to python datetime datetime.
<tt style='background-color:#E8E8E8;'> _vendor.pyparsing_common <a href=' /_vendor/pyparsing.py#L5624'>stripHTMLTags</a>(s,l,tokens)</tt>	Parse action to remove html tags from web page html source example :.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L97'>linux_distribution</a>(full_distribution_name)</tt>	Return information about the current linux distribution as a tuple (id_name version codename) with items as follows.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L125'>id</a>()</tt>	Return the distro id of the current linux distribution as a machine-readable string.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L200'>name</a>(pretty)</tt>	Return the name of the current linux distribution as a human-readable string.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L239'>version</a>(pretty,best)</tt>	Return the version of the current linux distribution as a human-readable string.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L283'>version_parts</a>(best)</tt>	Return the version of the current linux distribution as a tuple (major minor build_number) with items as follows.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L300'>major_version</a>(best)</tt>	Return the major version of the current linux distribution as a string if provided.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L313'>minor_version</a>(best)</tt>	Return the minor version of the current linux distribution as a string if provided.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L326'>build_number</a>(best)</tt>	Return the build number of the current linux distribution as a string if provided.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L339'>like</a>()</tt>	Return a space-separated list of distro ids of distributions that are closely related to the current linux distribution in regards to packaging.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L356'>codename</a>()</tt>	Return the codename for the release of the current linux distribution as a string.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L380'>info</a>(pretty,best)</tt>	Return certain machine-readable information items about the current linux distribution in a dictionary as shown in the following example.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L424'>os_release_info</a>()</tt>	Return a dictionary containing key-value pairs for the information items from the os-release file data source of the current linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L434'>lsb_release_info</a>()</tt>	Return a dictionary containing key-value pairs for the information items from the lsb_release command data source of the current linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L445'>distro_release_info</a>()</tt>	Return a dictionary containing key-value pairs for the information items from the distro release file data source of the current linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L455'>os_release_attr</a>(attribute)</tt>	Return a single named information item from the os-release file data source of the current linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L474'>lsb_release_attr</a>(attribute)</tt>	Return a single named information item from the lsb_release command output data source of the current linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/distro.py#L494'>distro_release_attr</a>(attribute)</tt>	Return a single named information item from the distro release file data source of the current linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L531'>__init__</a>(include_lsb,os_release_file,distro_release_file)</tt>	The initialization method of this class gathers information from the available data sources and stores that in private instance attributes.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L598'>__repr__</a>()</tt>	Return repr of all info.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L614'>linux_distribution</a>(full_distribution_name)</tt>	Return information about the linux distribution that is compatible with python's :func platform.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L628'>id</a>()</tt>	Return the distro id of the linux distribution as a string.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L651'>name</a>(pretty)</tt>	Return the name of the linux distribution as a string.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L670'>version</a>(pretty,best)</tt>	Return the version of the linux distribution as a string.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L703'>version_parts</a>(best)</tt>	Return the version of the linux distribution as a tuple of version numbers.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L719'>major_version</a>(best)</tt>	Return the major version number of the current distribution.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L727'>minor_version</a>(best)</tt>	Return the minor version number of the linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L735'>build_number</a>(best)</tt>	Return the build number of the linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L743'>like</a>()</tt>	Return the ids of distributions that are like the linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L751'>codename</a>()</tt>	Return the codename of the linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L762'>info</a>(pretty,best)</tt>	Return certain machine-readable information about the linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L781'>os_release_info</a>()</tt>	Return a dictionary containing key-value pairs for the information items from the os-release file data source of the linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L790'>lsb_release_info</a>()</tt>	Return a dictionary containing key-value pairs for the information items from the lsb_release command data source of the linux.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L800'>distro_release_info</a>()</tt>	Return a dictionary containing key-value pairs for the information items from the distro release file data source of the linux.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L810'>os_release_attr</a>(attribute)</tt>	Return a single named information item from the os-release file data source of the linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L819'>lsb_release_attr</a>(attribute)</tt>	Return a single named information item from the lsb_release command output data source of the linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L828'>distro_release_attr</a>(attribute)</tt>	Return a single named information item from the distro release file data source of the linux distribution.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L837'>_get_os_release_info</a>()</tt>	Get the information items from the specified os-release file.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L849'>_parse_os_release_content</a>(lines)</tt>	Parse the lines of an os-release file.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L909'>_get_lsb_release_info</a>()</tt>	Get the information items from the lsb_release command output.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L938'>_parse_lsb_release_content</a>(lines)</tt>	Parse the output of the lsb_release command.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L963'>_get_distro_release_info</a>()</tt>	Get the information items from the specified distro release file.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L1022'>_parse_distro_release_file</a>(filepath)</tt>	Parse a distro release file.
<tt style='background-color:#E8E8E8;'> _vendor.LinuxDistribution <a href=' /_vendor/distro.py#L1044'>_parse_distro_release_content</a>(line)</tt>	Parse a line from a distro release file.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/retrying.py#L26'>retry</a>()</tt>	Decorator function that instantiates the retrying object.
<tt style='background-color:#E8E8E8;'> _vendor.Retrying <a href=' /_vendor/retrying.py#L141'>stop_after_attempt</a>(previous_attempt_number,delay_since_first_attempt_ms)</tt>	Stop after the previous attempt >= stop_max_attempt_number.
<tt style='background-color:#E8E8E8;'> _vendor.Retrying <a href=' /_vendor/retrying.py#L145'>stop_after_delay</a>(previous_attempt_number,delay_since_first_attempt_ms)</tt>	Stop after the time from the first attempt >= stop_max_delay.
<tt style='background-color:#E8E8E8;'> _vendor.Retrying <a href=' /_vendor/retrying.py#L149'>no_sleep</a>(previous_attempt_number,delay_since_first_attempt_ms)</tt>	Don't sleep at all before retrying.
<tt style='background-color:#E8E8E8;'> _vendor.Retrying <a href=' /_vendor/retrying.py#L153'>fixed_sleep</a>(previous_attempt_number,delay_since_first_attempt_ms)</tt>	Sleep a fixed amount of time between each retry.
<tt style='background-color:#E8E8E8;'> _vendor.Retrying <a href=' /_vendor/retrying.py#L157'>random_sleep</a>(previous_attempt_number,delay_since_first_attempt_ms)</tt>	Sleep a random amount of time between wait_random_min and wait_random_max.
<tt style='background-color:#E8E8E8;'> _vendor.Retrying <a href=' /_vendor/retrying.py#L161'>incrementing_sleep</a>(previous_attempt_number,delay_since_first_attempt_ms)</tt>	Sleep an incremental amount of time after each attempt starting at.
<tt style='background-color:#E8E8E8;'> _vendor.Attempt <a href=' /_vendor/retrying.py#L237'>get</a>(wrap_exception)</tt>	Return the return value of this attempt instance or raise an exception.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/six.py#L75'>_add_doc</a>(func,doc)</tt>	Add documentation to a function.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/six.py#L80'>_import_module</a>(name)</tt>	Import module returning the module after the last dot.
<tt style='background-color:#E8E8E8;'> _vendor._SixMetaPathImporter <a href=' /_vendor/six.py#L209'>is_package</a>(fullname)</tt>	Return true if the named module is a package.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/six.py#L486'>add_move</a>(move)</tt>	Add an item to six moves.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/six.py#L491'>remove_move</a>(name)</tt>	Remove item from six moves.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/six.py#L800'>with_metaclass</a>(meta)</tt>	Create a base class with a metaclass.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/six.py#L812'>add_metaclass</a>(metaclass)</tt>	Class decorator for creating a class with a metaclass.
<tt style='background-color:#E8E8E8;'> _vendor. <a href=' /_vendor/six.py#L828'>python_2_unicode_compatible</a>(klass)</tt>	A decorator that defines __unicode__ and __str__ methods under python 2.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.ResourceCache <a href=' /_vendor/distlib/resources.py#L35'>is_stale</a>(resource,path)</tt>	Is the cache stale for the given resource?.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.ResourceCache <a href=' /_vendor/distlib/resources.py#L46'>get</a>(resource)</tt>	Get a resource into the cache.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Resource <a href=' /_vendor/distlib/resources.py#L86'>as_stream</a>()</tt>	Get the resource as a stream.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/resources.py#L310'>finder</a>(package)</tt>	Return a resource finder for a package.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/resources.py#L338'>finder_for_path</a>(path)</tt>	Return a resource finder for a path which should represent a container.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._Cache <a href=' /_vendor/distlib/database.py#L48'>__init__</a>()</tt>	Initialise an instance there is normally one for each distributionpath.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Cache <a href=' /_vendor/distlib/util.py#L822'>clear</a>()</tt>	Clear the cache.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._Cache <a href=' /_vendor/distlib/database.py#L64'>add</a>(dist)</tt>	Add a distribution to the cache.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DistributionPath <a href=' /_vendor/distlib/database.py#L78'>__init__</a>(path,include_egg)</tt>	Create an instance from a path optionally including legacy (distutils/ setuptools/distribute) distributions.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DistributionPath <a href=' /_vendor/distlib/database.py#L106'>clear_cache</a>()</tt>	Clears the internal cache.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DistributionPath <a href=' /_vendor/distlib/database.py#L114'>_yield_distributions</a>()</tt>	Yield dist-info and/or egg -info distributions.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DistributionPath <a href=' /_vendor/distlib/database.py#L156'>_generate_cache</a>()</tt>	Scan the path for distributions and populate the cache with those that are found.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DistributionPath <a href=' /_vendor/distlib/database.py#L175'>distinfo_dirname</a>(cls,name,version)</tt>	The *name* and *version* parameters are converted into their filename-escaped form i.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DistributionPath <a href=' /_vendor/distlib/database.py#L197'>get_distributions</a>()</tt>	Provides an iterator that looks for distributions and returns :class installeddistribution or.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DistributionPath <a href=' /_vendor/distlib/database.py#L219'>get_distribution</a>(name)</tt>	Looks for a named distribution on the path.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DistributionPath <a href=' /_vendor/distlib/database.py#L245'>provides_distribution</a>(name,version)</tt>	Iterates over all distributions to find which distributions provide *name*.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DistributionPath <a href=' /_vendor/distlib/database.py#L281'>get_file_path</a>(name,relative_path)</tt>	Return the path to a resource file.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DistributionPath <a href=' /_vendor/distlib/database.py#L290'>get_exported_entries</a>(category,name)</tt>	Return all of the exported entries in a particular category.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Distribution <a href=' /_vendor/distlib/database.py#L327'>__init__</a>(metadata)</tt>	Initialise an instance.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Distribution <a href=' /_vendor/distlib/database.py#L344'>source_url</a>()</tt>	The source archive download url for this distribution.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Distribution <a href=' /_vendor/distlib/database.py#L353'>name_and_version</a>()</tt>	A utility property which displays the name and version in parentheses.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Distribution <a href=' /_vendor/distlib/database.py#L360'>provides</a>()</tt>	A set of distribution names and versions provided by this distribution.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Distribution <a href=' /_vendor/distlib/database.py#L399'>matches_requirement</a>(req)</tt>	Say if this instance matches fulfills a requirement.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Distribution <a href=' /_vendor/distlib/database.py#L433'>__repr__</a>()</tt>	Return a textual representation of this instance.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Distribution <a href=' /_vendor/distlib/database.py#L443'>__eq__</a>(other)</tt>	See if this distribution is the same as another.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Distribution <a href=' /_vendor/distlib/database.py#L459'>__hash__</a>()</tt>	Compute hash in a way which matches the equality test.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.BaseInstalledDistribution <a href=' /_vendor/distlib/database.py#L474'>__init__</a>(metadata,path,env)</tt>	Initialise an instance.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.BaseInstalledDistribution <a href=' /_vendor/distlib/database.py#L489'>get_hash</a>(data,hasher)</tt>	Get the hash of some data using a particular hash algorithm if specified.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.InstalledDistribution <a href=' /_vendor/distlib/database.py#L569'>_get_records</a>()</tt>	Get the list of installed files for the distribution :return a list of tuples of path hash and size.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.InstalledDistribution <a href=' /_vendor/distlib/database.py#L592'>exports</a>()</tt>	Return the information exported by this distribution.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.InstalledDistribution <a href=' /_vendor/distlib/database.py#L606'>read_exports</a>()</tt>	Read exports data from a file in ini format.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.InstalledDistribution <a href=' /_vendor/distlib/database.py#L621'>write_exports</a>(exports)</tt>	Write a dictionary of exports to a file in ini format.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.InstalledDistribution <a href=' /_vendor/distlib/database.py#L632'>get_resource_path</a>(relative_path)</tt>	Note this api may change in the future.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.InstalledDistribution <a href=' /_vendor/distlib/database.py#L652'>list_installed_files</a>()</tt>	Iterates over the record entries and returns a tuple path hash size for each line.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.InstalledDistribution <a href=' /_vendor/distlib/database.py#L662'>write_installed_files</a>(paths,prefix,dry_run)</tt>	Writes the record file using the paths iterable passed in any.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.InstalledDistribution <a href=' /_vendor/distlib/database.py#L697'>check_installed_files</a>()</tt>	Checks that the hashes and sizes of the files in record are matched by the files themselves.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.InstalledDistribution <a href=' /_vendor/distlib/database.py#L732'>shared_locations</a>()</tt>	A dictionary of shared locations whose keys are in the set 'prefix', 'purelib', 'platlib', 'scripts', 'headers', 'data' and 'namespace'.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.InstalledDistribution <a href=' /_vendor/distlib/database.py#L759'>write_shared_locations</a>(paths,dry_run)</tt>	Write shared location information to the shared file in dist-info.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.InstalledDistribution <a href=' /_vendor/distlib/database.py#L793'>get_distinfo_file</a>(path)</tt>	Returns a path located under the dist-info directory returns a.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.InstalledDistribution <a href=' /_vendor/distlib/database.py#L822'>list_distinfo_files</a>()</tt>	Iterates over the record entries and returns paths for each line if the path is pointing to a file located in the.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.EggInfoDistribution <a href=' /_vendor/distlib/database.py#L958'>check_installed_files</a>()</tt>	Checks that the hashes and sizes of the files in record are matched by the files themselves.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.EggInfoDistribution <a href=' /_vendor/distlib/database.py#L977'>list_installed_files</a>()</tt>	Iterates over the installed-files txt entries and returns a tuple.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.EggInfoDistribution <a href=' /_vendor/distlib/database.py#L1015'>list_distinfo_files</a>(absolute)</tt>	Iterates over the installed-files txt entries and returns paths for.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DependencyGraph <a href=' /_vendor/distlib/database.py#L1075'>add_distribution</a>(distribution)</tt>	Add the *distribution* to the graph.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DependencyGraph <a href=' /_vendor/distlib/database.py#L1085'>add_edge</a>(x,y,label)</tt>	Add an edge from distribution *x* to distribution *y* with the given *label*.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DependencyGraph <a href=' /_vendor/distlib/database.py#L1100'>add_missing</a>(distribution,requirement)</tt>	Add a missing *requirement* for the given *distribution*.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DependencyGraph <a href=' /_vendor/distlib/database.py#L1114'>repr_node</a>(dist,level)</tt>	Prints only a subgraph.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DependencyGraph <a href=' /_vendor/distlib/database.py#L1127'>to_dot</a>(f,skip_disconnected)</tt>	Writes a dot output for the graph to the provided file *f*.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DependencyGraph <a href=' /_vendor/distlib/database.py#L1159'>topological_sort</a>()</tt>	Perform a topological sort of the graph.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DependencyGraph <a href=' /_vendor/distlib/database.py#L1190'>__repr__</a>()</tt>	Representation of the graph.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/database.py#L1198'>make_graph</a>(dists,scheme)</tt>	Makes a dependency graph from the given distributions.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/database.py#L1252'>get_dependent_dists</a>(dists,dist)</tt>	Recursively generate a list of distributions from *dists* that are dependent on *dist*.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/database.py#L1278'>get_required_dists</a>(dists,dist)</tt>	Recursively generate a list of distributions from *dists* that are required by *dist*.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/database.py#L1303'>make_dist</a>(name,version)</tt>	A convenience method for making a dist given just a name and version.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L36'>__init__</a>(url)</tt>	Initialise an instance.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L66'>_get_pypirc_command</a>()</tt>	Get the distutils command for interacting with pypi configurations.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L76'>read_configuration</a>()</tt>	Read the pypi access configuration as supported by distutils getting pypi to do the actual work.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L91'>save_configuration</a>()</tt>	Save the pypi access configuration you must have set username and.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L103'>check_credentials</a>()</tt>	Check that username and password have been set and raise an exception if not.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L115'>register</a>(metadata)</tt>	Register a distribution on pypi using the provided metadata.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L135'>_reader</a>(name,stream,outbuf)</tt>	Thread runner for reading lines of from a subprocess into a buffer.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L153'>get_sign_command</a>(filename,signer,sign_password,keystore)</tt>	Return a suitable command for signing a file.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L182'>run_command</a>(cmd,input_data)</tt>	Run a command in a child process passing it any input data specified.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L217'>sign_file</a>(filename,signer,sign_password,keystore)</tt>	Sign a file.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L240'>upload_file</a>(metadata,filename,signer,sign_password)</tt>	Upload a release file to the index.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L297'>upload_documentation</a>(metadata,doc_dir)</tt>	Upload documentation to the index.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L325'>get_verify_command</a>(signature_filename,data_filename,keystore)</tt>	Return a suitable command for verifying a file.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L349'>verify_signature</a>(signature_filename,data_filename,keystore)</tt>	Verify a signature for a file.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L374'>download_file</a>(url,destfile,digest,reporthook)</tt>	This is a convenience method for downloading a file from an url.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L451'>send_request</a>(req)</tt>	Send a standard library :class request to pypi and return its response.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PackageIndex <a href=' /_vendor/distlib/index.py#L467'>encode_request</a>(fields,files)</tt>	Encode fields and files for posting to an http server.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/util.py#L124'>get_resources_dests</a>(resources_root,rules)</tt>	Find destinations for resources files.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/util.py#L310'>convert_path</a>(pathname)</tt>	Return 'pathname' as a name that will work on the native filesystem.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.FileOperator <a href=' /_vendor/distlib/util.py#L352'>newer</a>(source,target)</tt>	Tell if the target is newer than the source.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.FileOperator <a href=' /_vendor/distlib/util.py#L372'>copy_file</a>(infile,outfile,check)</tt>	Copy a file respecting dry-run and force flags.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.FileOperator <a href=' /_vendor/distlib/util.py#L491'>commit</a>()</tt>	Commit recorded changes turn off recording return changes.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/util.py#L598'>get_cache_base</a>(suffix)</tt>	Return the default base location for distlib caches if the directory does.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/util.py#L639'>path_to_cache_dir</a>(path)</tt>	Convert an absolute path to a directory name for use in a cache.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/util.py#L693'>split_filename</a>(filename,project_name)</tt>	Extract name version python version from a filename no extension.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/util.py#L721'>parse_name_and_version</a>(p)</tt>	A utility method used to get name and version from a string.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Cache <a href=' /_vendor/distlib/util.py#L802'>__init__</a>(base)</tt>	Initialise an instance.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Cache <a href=' /_vendor/distlib/util.py#L816'>prefix_to_dir</a>(prefix)</tt>	Converts a resource prefix to a directory name in the cache.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.EventMixin <a href=' /_vendor/distlib/util.py#L846'>add</a>(event,subscriber,append)</tt>	Add a subscriber for an event.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.EventMixin <a href=' /_vendor/distlib/util.py#L866'>remove</a>(event,subscriber)</tt>	Remove a subscriber for an event.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.EventMixin <a href=' /_vendor/distlib/util.py#L878'>get_subscribers</a>(event)</tt>	Return an iterator for the subscribers for an event.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.EventMixin <a href=' /_vendor/distlib/util.py#L885'>publish</a>(event)</tt>	Publish a event and return a list of values returned by its subscribers.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/util.py#L1107'>zip_dir</a>(directory)</tt>	Zip a directory tree into a bytesio object.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/util.py#L1225'>iglob</a>(path_glob)</tt>	Extended globbing function that supports ** and {opt1 opt2 opt3}.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Configurator <a href=' /_vendor/distlib/util.py#L1553'>inc_convert</a>(value)</tt>	Default converter for the inc // protocol.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.SubprocessMixin <a href=' /_vendor/distlib/util.py#L1570'>reader</a>(stream,context)</tt>	Read lines from a subprocess' output stream and either pass to a progress callable if specified or write progress information to sys.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/util.py#L1608'>normalize_name</a>(name)</tt>	Normalize a python package name a la pep 503.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.ScriptMaker <a href=' /_vendor/distlib/scripts.py#L356'>make</a>(specification,options)</tt>	Make a script.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.ScriptMaker <a href=' /_vendor/distlib/scripts.py#L375'>make_multiple</a>(specifications,options)</tt>	Take a list of specifications and make scripts from them.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Manifest <a href=' /_vendor/distlib/manifest.py#L42'>__init__</a>(base)</tt>	Initialise an instance.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Manifest <a href=' /_vendor/distlib/manifest.py#L57'>findall</a>()</tt>	Find all files under the base and set allfiles to the absolute pathnames of files found.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Manifest <a href=' /_vendor/distlib/manifest.py#L84'>add</a>(item)</tt>	Add a file to the manifest.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Manifest <a href=' /_vendor/distlib/manifest.py#L94'>add_many</a>(items)</tt>	Add a list of files to the manifest.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Manifest <a href=' /_vendor/distlib/manifest.py#L103'>sorted</a>(wantdirs)</tt>	Return sorted files in directory order.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Manifest <a href=' /_vendor/distlib/manifest.py#L125'>clear</a>()</tt>	Clear all collected files.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Manifest <a href=' /_vendor/distlib/manifest.py#L130'>process_directive</a>(directive)</tt>	Process a directive which either adds some files from allfiles to files, or removes some files from files.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Manifest <a href=' /_vendor/distlib/manifest.py#L209'>_parse_directive</a>(directive)</tt>	Validate a directive.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Manifest <a href=' /_vendor/distlib/manifest.py#L256'>_include_pattern</a>(pattern,anchor,prefix,is_regex)</tt>	Select strings presumably filenames from 'self files' that.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Manifest <a href=' /_vendor/distlib/manifest.py#L297'>_exclude_pattern</a>(pattern,anchor,prefix,is_regex)</tt>	Remove strings presumably filenames from 'files' that match 'pattern'.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Manifest <a href=' /_vendor/distlib/manifest.py#L317'>_translate_pattern</a>(pattern,anchor,prefix,is_regex)</tt>	Translate a shell-like wildcard pattern to a compiled regular expression.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Manifest <a href=' /_vendor/distlib/manifest.py#L372'>_glob_to_re</a>(pattern)</tt>	Translate a shell-like glob pattern to a regular expression.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/metadata.py#L115'>_best_version</a>(fields)</tt>	Detect the best version depending on the fields used.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/metadata.py#L223'>_get_name_and_version</a>(name,version,for_filename)</tt>	Return the distribution name with version.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.LegacyMetadata <a href=' /_vendor/distlib/metadata.py#L315'>get_fullname</a>(filesafe)</tt>	Return the distribution name with version.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.LegacyMetadata <a href=' /_vendor/distlib/metadata.py#L321'>is_field</a>(name)</tt>	Return true if name is a valid metadata key.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.LegacyMetadata <a href=' /_vendor/distlib/metadata.py#L330'>read</a>(filepath)</tt>	Read the metadata values from a file path.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.LegacyMetadata <a href=' /_vendor/distlib/metadata.py#L338'>read_file</a>(fileob)</tt>	Read the metadata values from a file object.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.LegacyMetadata <a href=' /_vendor/distlib/metadata.py#L360'>write</a>(filepath,skip_unknown)</tt>	Write the metadata fields to filepath.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.LegacyMetadata <a href=' /_vendor/distlib/metadata.py#L368'>write_file</a>(fileobject,skip_unknown)</tt>	Write the pkg-info format data to a file object.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.LegacyMetadata <a href=' /_vendor/distlib/metadata.py#L393'>update</a>(other)</tt>	Set metadata values from the given iterable other and kwargs.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.LegacyMetadata <a href=' /_vendor/distlib/metadata.py#L421'>set</a>(name,value)</tt>	Control then set a metadata field.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.LegacyMetadata <a href=' /_vendor/distlib/metadata.py#L465'>get</a>(name,default)</tt>	Get a metadata field.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.LegacyMetadata <a href=' /_vendor/distlib/metadata.py#L494'>check</a>(strict)</tt>	Check if the metadata is compliant if strict is true then raise if.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.LegacyMetadata <a href=' /_vendor/distlib/metadata.py#L538'>todict</a>(skip_missing)</tt>	Return fields as a dict.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Metadata <a href=' /_vendor/distlib/metadata.py#L854'>get_requirements</a>(reqts,extras,env)</tt>	Base method to get dependencies given a set of extras to satisfy and an optional environment context.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Matcher <a href=' /_vendor/distlib/version.py#L135'>match</a>(version)</tt>	Check if the provided version matches the constraints.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/version.py#L412'>_suggest_semantic_version</a>(s)</tt>	Try to suggest a semantic form for a version for which _suggest_normalized_version couldn't come up with anything.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/version.py#L458'>_suggest_normalized_version</a>(s)</tt>	Suggest a normalized version close to the given version string.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.VersionScheme <a href=' /_vendor/distlib/version.py#L715'>is_valid_constraint_list</a>(s)</tt>	Used for processing some metadata fields.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Evaluator <a href=' /_vendor/distlib/markers.py#L51'>__init__</a>(context)</tt>	Initialise an instance.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Evaluator <a href=' /_vendor/distlib/markers.py#L60'>get_fragment</a>(offset)</tt>	Get the part of the source which is causing a problem.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Evaluator <a href=' /_vendor/distlib/markers.py#L70'>get_handler</a>(node_type)</tt>	Get a handler for the specified ast node type.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Evaluator <a href=' /_vendor/distlib/markers.py#L76'>evaluate</a>(node,filename)</tt>	Evaluate a source string or node using filename when displaying errors.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/markers.py#L181'>interpret</a>(marker,execution_context)</tt>	Interpret a marker and return a result depending on environment.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Wheel <a href=' /_vendor/distlib/wheel.py#L144'>__init__</a>(filename,sign,verify)</tt>	Initialise an instance using a valid filename.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Wheel <a href=' /_vendor/distlib/wheel.py#L185'>filename</a>()</tt>	Build and return a filename from the various components.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Wheel <a href=' /_vendor/distlib/wheel.py#L326'>build</a>(paths,tags,wheel_version)</tt>	Build a wheel from files in specified paths and use any specified tags when determining the name of the wheel.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Wheel <a href=' /_vendor/distlib/wheel.py#L430'>install</a>(paths,maker)</tt>	Install a wheel to the specified paths if kwarg warner is.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Wheel <a href=' /_vendor/distlib/wheel.py#L701'>is_compatible</a>()</tt>	Determine if a wheel is compatible with the running system.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Wheel <a href=' /_vendor/distlib/wheel.py#L707'>is_mountable</a>()</tt>	Determine if a wheel is asserted as mountable by its metadata.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Wheel <a href=' /_vendor/distlib/wheel.py#L800'>update</a>(modifier,dest_dir)</tt>	Update the contents of a wheel in a generic way the modifier should.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/wheel.py#L901'>compatible_tags</a>()</tt>	Return pyver abi arch tuples compatible with this python.
<tt style='background-color:#E8E8E8;'> _vendor.distlib. <a href=' /_vendor/distlib/locators.py#L41'>get_all_distribution_names</a>(url)</tt>	Return all distribution names known by an index.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Locator <a href=' /_vendor/distlib/locators.py#L99'>__init__</a>(scheme)</tt>	Initialise an instance.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Locator <a href=' /_vendor/distlib/locators.py#L118'>get_errors</a>()</tt>	Return any errors which have occurred.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Locator <a href=' /_vendor/distlib/locators.py#L132'>clear_errors</a>()</tt>	Clear any errors which may have been logged.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Locator <a href=' /_vendor/distlib/locators.py#L168'>get_project</a>(name)</tt>	For a given project get a dictionary mapping available versions to distribution instances.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Locator <a href=' /_vendor/distlib/locators.py#L162'>get_distribution_names</a>()</tt>	Return all the distribution names known to this locator.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Locator <a href=' /_vendor/distlib/locators.py#L185'>score_url</a>(url)</tt>	Give an url a score which can be used to choose preferred urls for a given project release.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Locator <a href=' /_vendor/distlib/locators.py#L199'>prefer_url</a>(url1,url2)</tt>	Choose one of two urls where both are candidates for distribution archives for the same version of a distribution (for example.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Locator <a href=' /_vendor/distlib/locators.py#L221'>split_filename</a>(filename,project_name)</tt>	Attempt to split a filename in project name version and python version.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Locator <a href=' /_vendor/distlib/locators.py#L227'>convert_url_to_download_info</a>(url,project_name)</tt>	See if a url is a candidate for a download url for a project the url has typically been scraped from an html page.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Locator <a href=' /_vendor/distlib/locators.py#L297'>_get_digest</a>(info)</tt>	Get a digest from a dictionary by looking at keys of the form 'algo_digest'.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Locator <a href=' /_vendor/distlib/locators.py#L313'>_update_version_data</a>(result,info)</tt>	Update a result dictionary (the final result from _get_project) with a dictionary for a specific version which typically holds information.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Locator <a href=' /_vendor/distlib/locators.py#L336'>locate</a>(requirement,prereleases)</tt>	Find the most recent distribution which matches the given requirement.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PyPIRPCLocator <a href=' /_vendor/distlib/locators.py#L401'>__init__</a>(url)</tt>	Initialise an instance.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PyPIRPCLocator <a href=' /_vendor/distlib/locators.py#L412'>get_distribution_names</a>()</tt>	Return all the distribution names known to this locator.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.PyPIJSONLocator <a href=' /_vendor/distlib/locators.py#L453'>get_distribution_names</a>()</tt>	Return all the distribution names known to this locator.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Page <a href=' /_vendor/distlib/locators.py#L529'>__init__</a>(data,url)</tt>	Initialise an instance with the unicode page contents and the url they came from.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.Page <a href=' /_vendor/distlib/locators.py#L542'>links</a>()</tt>	Return the urls of all the links on a page together with information about their "rel" attribute for determining which ones to treat as.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.SimpleScrapingLocator <a href=' /_vendor/distlib/locators.py#L585'>__init__</a>(url,timeout,num_workers)</tt>	Initialise an instance.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.SimpleScrapingLocator <a href=' /_vendor/distlib/locators.py#L611'>_prepare_threads</a>()</tt>	Threads are created only when get_project is called and terminate before it returns.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.SimpleScrapingLocator <a href=' /_vendor/distlib/locators.py#L624'>_wait_threads</a>()</tt>	Tell all the threads to terminate by sending a sentinel value and wait for them to do so.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.SimpleScrapingLocator <a href=' /_vendor/distlib/locators.py#L658'>_is_platform_dependent</a>(url)</tt>	Does an url refer to a platform-specific download?.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.SimpleScrapingLocator <a href=' /_vendor/distlib/locators.py#L664'>_process_download</a>(url)</tt>	See if an url is a suitable download for a project.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.SimpleScrapingLocator <a href=' /_vendor/distlib/locators.py#L684'>_should_queue</a>(link,referrer,rel)</tt>	Determine whether a link url from a referring page and with a particular "rel" attribute should be queued for scraping.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.SimpleScrapingLocator <a href=' /_vendor/distlib/locators.py#L713'>_fetch</a>()</tt>	Get a url to fetch from the work queue get the html page examine its links for download candidates and candidates for further scraping.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.SimpleScrapingLocator <a href=' /_vendor/distlib/locators.py#L743'>get_page</a>(url)</tt>	Get the html for an url possibly from an in-memory cache.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.SimpleScrapingLocator <a href=' /_vendor/distlib/locators.py#L804'>get_distribution_names</a>()</tt>	Return all the distribution names known to this locator.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DirectoryLocator <a href=' /_vendor/distlib/locators.py#L821'>__init__</a>(path)</tt>	Initialise an instance.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DirectoryLocator <a href=' /_vendor/distlib/locators.py#L838'>should_include</a>(filename,parent)</tt>	Should a filename be considered as a candidate for a distribution archive? as well as the filename the directory which contains it.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DirectoryLocator <a href=' /_vendor/distlib/locators.py#L862'>get_distribution_names</a>()</tt>	Return all the distribution names known to this locator.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.JSONLocator <a href=' /_vendor/distlib/locators.py#L888'>get_distribution_names</a>()</tt>	Return all the distribution names known to this locator.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DistPathLocator <a href=' /_vendor/distlib/locators.py#L924'>__init__</a>(distpath)</tt>	Initialise an instance.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.AggregatingLocator <a href=' /_vendor/distlib/locators.py#L951'>__init__</a>()</tt>	Initialise an instance.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.AggregatingLocator <a href=' /_vendor/distlib/locators.py#L1023'>get_distribution_names</a>()</tt>	Return all the distribution names known to this locator.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DependencyFinder <a href=' /_vendor/distlib/locators.py#L1054'>__init__</a>(locator)</tt>	Initialise an instance using the specified locator to locate distributions.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DependencyFinder <a href=' /_vendor/distlib/locators.py#L1062'>add_distribution</a>(dist)</tt>	Add a distribution to the finder this will update internal information.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DependencyFinder <a href=' /_vendor/distlib/locators.py#L1077'>remove_distribution</a>(dist)</tt>	Remove a distribution from the finder this will update internal.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DependencyFinder <a href=' /_vendor/distlib/locators.py#L1095'>get_matcher</a>(reqt)</tt>	Get a version matcher for a requirement.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DependencyFinder <a href=' /_vendor/distlib/locators.py#L1111'>find_providers</a>(reqt)</tt>	Find the distributions which can fulfill a requirement.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DependencyFinder <a href=' /_vendor/distlib/locators.py#L1135'>try_to_replace</a>(provider,other,problems)</tt>	Attempt to replace one provider with another this is typically used.
<tt style='background-color:#E8E8E8;'> _vendor.distlib.DependencyFinder <a href=' /_vendor/distlib/locators.py#L1175'>find</a>(requirement,meta_extras,prereleases)</tt>	Find a distribution and all distributions it depends on.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/tarfile.py#L256'>copyfileobj</a>(fsrc,fdst,length)</tt>	Copy data from file-like object fsrc to file-like object fdst.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L87'>copyfile</a>(src,dst)</tt>	Copy data from src to dst.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L107'>copymode</a>(src,dst)</tt>	Copy mode bits from src to dst.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L114'>copystat</a>(src,dst)</tt>	Copy all stat info mode bits atime mtime flags from src to dst.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L130'>copy</a>(src,dst)</tt>	Copy data and mode bits ("cp src dst").
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L141'>copy2</a>(src,dst)</tt>	Copy data and all stat info ("cp -p src dst").
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L152'>ignore_patterns</a>()</tt>	Function that can be used as copytree() ignore parameter.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L164'>copytree</a>(src,dst,symlinks,ignore)</tt>	Recursively copy a directory tree.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L246'>rmtree</a>(path,ignore_errors,onerror)</tt>	Recursively delete a directory tree.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L300'>move</a>(src,dst)</tt>	Recursively move a file or directory to another location this is.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L349'>_get_gid</a>(name)</tt>	Returns a gid given a group name.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L361'>_get_uid</a>(name)</tt>	Returns an uid given a user name.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L373'>_make_tarball</a>(base_name,base_dir,compress,verbose)</tt>	Create a possibly compressed tar file from all the files under 'base_dir'.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L452'>_make_zipfile</a>(base_name,base_dir,verbose,dry_run)</tt>	Create a zip file from all the files under 'base_dir'.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L510'>get_archive_formats</a>()</tt>	Returns a list of supported formats for archiving and unarchiving.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L520'>register_archive_format</a>(name,function,extra_args,description)</tt>	Registers an archive format.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L544'>make_archive</a>(base_name,format,root_dir,base_dir)</tt>	Create an archive file eg zip or tar.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L599'>get_unpack_formats</a>()</tt>	Returns a list of supported formats for unpacking.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L610'>_check_unpack_options</a>(extensions,function,extra_args)</tt>	Checks what gets registered as an unpacker.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L628'>register_unpack_format</a>(name,extensions,function,extra_args)</tt>	Registers an unpack format.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L650'>unregister_unpack_format</a>(name)</tt>	Removes the pack format from the registry.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L654'>_ensure_directory</a>(path)</tt>	Ensure that the parent directory of path exists.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L660'>_unpack_zipfile</a>(filename,extract_dir)</tt>	Unpack zip filename to extract_dir.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L697'>_unpack_tarfile</a>(filename,extract_dir)</tt>	Unpack tar/tar gz/tar bz2 filename to extract_dir.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/shutil.py#L727'>unpack_archive</a>(filename,extract_dir,format)</tt>	Unpack an archive.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/tarfile.py#L185'>stn</a>(s,length,encoding,errors)</tt>	Convert a string to a null-terminated bytes object.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/tarfile.py#L191'>nts</a>(s,encoding,errors)</tt>	Convert a null-terminated bytes object to a string.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/tarfile.py#L199'>nti</a>(s)</tt>	Convert a number field to a python number.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/tarfile.py#L216'>itn</a>(n,digits,format)</tt>	Convert a python number to a number field.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/tarfile.py#L243'>calc_chksums</a>(buf)</tt>	Calculate the checksum for a member's header by summing up all characters except for the chksum field which is treated as if.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/tarfile.py#L256'>copyfileobj</a>(src,dst,length)</tt>	Copy length bytes from fileobj src to fileobj dst.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/tarfile.py#L312'>filemode</a>(mode)</tt>	Convert a file's mode to a string of the form -rwxrwxrwx.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport._Stream <a href=' /_vendor/distlib/_backport/tarfile.py#L399'>__init__</a>(name,mode,comptype,fileobj)</tt>	Construct a _stream object.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport._Stream <a href=' /_vendor/distlib/_backport/tarfile.py#L455'>_init_write_gz</a>()</tt>	Initialize for writing with gzip compression.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport._Stream <a href=' /_vendor/distlib/_backport/tarfile.py#L479'>__write</a>(s)</tt>	Write string s to the stream if a whole new block is ready to be written.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport._Stream <a href=' /_vendor/distlib/_backport/tarfile.py#L488'>close</a>()</tt>	Close the _stream object no operation should be.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport._Stream <a href=' /_vendor/distlib/_backport/tarfile.py#L516'>_init_read_gz</a>()</tt>	Initialize for reading a gzip compressed fileobj.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport._Stream <a href=' /_vendor/distlib/_backport/tarfile.py#L547'>tell</a>()</tt>	Return the stream's file pointer position.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport._Stream <a href=' /_vendor/distlib/_backport/tarfile.py#L552'>seek</a>(pos)</tt>	Set the stream's file pointer to pos negative seeking.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport._Stream <a href=' /_vendor/distlib/_backport/tarfile.py#L604'>__read</a>(size)</tt>	Return size bytes from stream if internal buffer is empty.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport._FileInFile <a href=' /_vendor/distlib/_backport/tarfile.py#L742'>tell</a>()</tt>	Return the current file position.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport._FileInFile <a href=' /_vendor/distlib/_backport/tarfile.py#L747'>seek</a>(position)</tt>	Seek to a position in the file.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport._FileInFile <a href=' /_vendor/distlib/_backport/tarfile.py#L752'>read</a>(size)</tt>	Read data from the file.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.ExFileObject <a href=' /_vendor/distlib/_backport/tarfile.py#L810'>read</a>(size)</tt>	Read at most size bytes from the file if size is not.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.ExFileObject <a href=' /_vendor/distlib/_backport/tarfile.py#L837'>readline</a>(size)</tt>	Read one entire line from the file if size is present.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.ExFileObject <a href=' /_vendor/distlib/_backport/tarfile.py#L866'>readlines</a>()</tt>	Return a list with all remaining lines.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.ExFileObject <a href=' /_vendor/distlib/_backport/tarfile.py#L876'>tell</a>()</tt>	Return the current file position.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.ExFileObject <a href=' /_vendor/distlib/_backport/tarfile.py#L884'>seek</a>(pos,whence)</tt>	Seek to a position in the file.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.ExFileObject <a href=' /_vendor/distlib/_backport/tarfile.py#L905'>close</a>()</tt>	Close the file object.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.ExFileObject <a href=' /_vendor/distlib/_backport/tarfile.py#L910'>__iter__</a>()</tt>	Get an iterator over the file's lines.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L937'>__init__</a>(name)</tt>	Construct a tarinfo object name is the optional name.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L978'>get_info</a>()</tt>	Return the tarinfo's attributes as a dictionary.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1002'>tobuf</a>(format,encoding,errors)</tt>	Return a tar header as a string of 512 byte blocks.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1016'>create_ustar_header</a>(info,encoding,errors)</tt>	Return the object as a ustar header block.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1029'>create_gnu_header</a>(info,encoding,errors)</tt>	Return the object as a gnu header block sequence.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1043'>create_pax_header</a>(info,encoding)</tt>	Return the object as a ustar header block if it cannot be.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1092'>create_pax_global_header</a>(cls,pax_headers)</tt>	Return the object as a pax global header block sequence.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1098'>_posix_split_name</a>(name)</tt>	Split a name longer than 100 chars into a prefix and a name part.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1113'>_create_header</a>(info,format,encoding,errors)</tt>	Return a header block info is a dictionary with file.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1141'>_create_payload</a>(payload)</tt>	Return the string payload filled with zero bytes up to the next 512 byte border.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1151'>_create_gnu_long_header</a>(cls,name,type,encoding)</tt>	Return a gnutype_longname or gnutype_longlink sequence for name.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1168'>_create_pax_generic_header</a>(cls,pax_headers,type,encoding)</tt>	Return a posix 1-2008 extended or global header sequence.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1219'>frombuf</a>(cls,buf,encoding,errors)</tt>	Construct a tarinfo object from a 512 byte bytes object.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1282'>fromtarfile</a>(cls,tarfile)</tt>	Return the next tarinfo object from tarfile object tarfile.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1303'>_proc_member</a>(tarfile)</tt>	Choose the right processing method depending on the type and call it.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1316'>_proc_builtin</a>(tarfile)</tt>	Process a builtin type or an unknown type which will be treated as a regular file.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1333'>_proc_gnulong</a>(tarfile)</tt>	Process the blocks that hold a gnu longname or longlink member.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1355'>_proc_sparse</a>(tarfile)</tt>	Process a gnu sparse header plus extra headers.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1383'>_proc_pax</a>(tarfile)</tt>	Process an extended or global header as described in posix.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1485'>_proc_gnusparse_00</a>(next,pax_headers,buf)</tt>	Process a gnu tar extended sparse header version 0 0.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1496'>_proc_gnusparse_01</a>(next,pax_headers)</tt>	Process a gnu tar extended sparse header version 0 1.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1502'>_proc_gnusparse_10</a>(next,pax_headers,tarfile)</tt>	Process a gnu tar extended sparse header version 1 0.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1518'>_apply_pax_info</a>(pax_headers,encoding,errors)</tt>	Replace fields with supplemental information from a previous pax extended or global header.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1541'>_decode_pax_field</a>(value,encoding,fallback_encoding,fallback_errors)</tt>	Decode a single field from a pax record.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarInfo <a href=' /_vendor/distlib/_backport/tarfile.py#L1549'>_block</a>(count)</tt>	Round up a byte count by blocksize and return it e.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L1606'>__init__</a>(name,mode,fileobj,format)</tt>	Open an uncompressed tar archive name' mode' is either 'r' to.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L1713'>open</a>(cls,name,mode,fileobj)</tt>	Open a tar archive for reading writing or appending return.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L1789'>taropen</a>(cls,name,mode,fileobj)</tt>	Open uncompressed tar archive name for reading or writing.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L1797'>gzopen</a>(cls,name,mode,fileobj)</tt>	Open gzip compressed tar archive name for reading or writing.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L1828'>bz2open</a>(cls,name,mode,fileobj)</tt>	Open bzip2 compressed tar archive name for reading or writing.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L1864'>close</a>()</tt>	Close the tarfile in write-mode two finishing zero blocks are.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L1884'>getmember</a>(name)</tt>	Return a tarinfo object for member name' if name' can not be.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L1895'>getmembers</a>()</tt>	Return the members of the archive as a list of tarinfo objects the.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L1905'>getnames</a>()</tt>	Return the members of the archive as a list of their names it has.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L1911'>gettarinfo</a>(name,arcname,fileobj)</tt>	Create a tarinfo object for either the file name' or the file object fileobj' (using os.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2009'>list</a>(verbose)</tt>	Print a table of contents to sys stdout if verbose' is false only.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2038'>add</a>(name,arcname,recursive,exclude)</tt>	Add the file name' to the archive name' may be any type of file.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2100'>addfile</a>(tarinfo,fileobj)</tt>	Add the tarinfo object tarinfo' to the archive if fileobj' is.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2126'>extractall</a>(path,members)</tt>	Extract all members from the archive to the current working directory and set owner modification time and permissions on.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2164'>extract</a>(member,path,set_attrs)</tt>	Extract a member from the archive to the current working directory using its full name.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2199'>extractfile</a>(member)</tt>	Extract a member from the archive as a file object member' may be.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2237'>_extract_member</a>(tarinfo,targetpath,set_attrs)</tt>	Extract the tarinfo object tarinfo to a physical file called targetpath.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2285'>makedir</a>(tarinfo,targetpath)</tt>	Make a directory called targetpath.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2296'>makefile</a>(tarinfo,targetpath)</tt>	Make a file called targetpath.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2312'>makeunknown</a>(tarinfo,targetpath)</tt>	Make a file from a tarinfo object with an unknown type at targetpath.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2320'>makefifo</a>(tarinfo,targetpath)</tt>	Make a fifo called targetpath.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2328'>makedev</a>(tarinfo,targetpath)</tt>	Make a character or block device called targetpath.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2343'>makelink</a>(tarinfo,targetpath)</tt>	Make a symbolic link called targetpath if it cannot be created.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2372'>chown</a>(tarinfo,targetpath)</tt>	Set owner of targetpath according to tarinfo.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2394'>chmod</a>(tarinfo,targetpath)</tt>	Set file permissions of targetpath according to tarinfo.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2403'>utime</a>(tarinfo,targetpath)</tt>	Set modification time of targetpath according to tarinfo.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2414'>next</a>()</tt>	Return the next member of the archive as a tarinfo object when tarfile is opened for reading.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2463'>_getmember</a>(name,tarinfo,normalize)</tt>	Find an archive member by name from bottom to top.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2486'>_load</a>()</tt>	Read through the entire archive file and look for readable members.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2496'>_check</a>(mode)</tt>	Check if tarfile is still open and if the operation's mode corresponds to tarfile's mode.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2505'>_find_link_target</a>(tarinfo)</tt>	Find the target member of a symlink or hardlink member in the archive.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2524'>__iter__</a>()</tt>	Provide an iterator object.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarFile <a href=' /_vendor/distlib/_backport/tarfile.py#L2532'>_dbg</a>(level,msg)</tt>	Write debugging output to sys stderr.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarIter <a href=' /_vendor/distlib/_backport/tarfile.py#L2560'>__init__</a>(tarfile)</tt>	Construct a tariter object.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarIter <a href=' /_vendor/distlib/_backport/tarfile.py#L2565'>__iter__</a>()</tt>	Return iterator object.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport.TarIter <a href=' /_vendor/distlib/_backport/tarfile.py#L2570'>__next__</a>()</tt>	Return the next item using tarfile's next() method.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/tarfile.py#L2595'>is_tarfile</a>(name)</tt>	Return true if name points to a tar archive that we are able to handle else return false.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L133'>_subst_vars</a>(path,local_vars)</tt>	In the string path, replace tokens like {some thing} with the.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L215'>_parse_makefile</a>(filename,vars)</tt>	Parse a makefile-style file.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L333'>get_makefile_filename</a>()</tt>	Return the path of the makefile.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L344'>_init_posix</a>(vars)</tt>	Initialize the module as appropriate for posix systems.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L372'>_init_non_posix</a>(vars)</tt>	Initialize the module as appropriate for nt.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L388'>parse_config_h</a>(fp,vars)</tt>	Parse a config h-style file.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L419'>get_config_h_filename</a>()</tt>	Return the path of pyconfig h.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L431'>get_scheme_names</a>()</tt>	Return a tuple containing the schemes names.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L436'>get_path_names</a>()</tt>	Return a tuple containing the paths names.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L442'>get_paths</a>(scheme,vars,expand)</tt>	Return a mapping containing an install scheme.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L455'>get_path</a>(name,scheme,vars,expand)</tt>	Return a path corresponding to the scheme.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L463'>get_config_vars</a>()</tt>	With no arguments return a dictionary of all configuration variables relevant for the current platform.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L594'>get_config_var</a>(name)</tt>	Return the value of a single variable using the dictionary returned by 'get_config_vars()'.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L603'>get_platform</a>()</tt>	Return a string that identifies the current platform.
<tt style='background-color:#E8E8E8;'> _vendor.distlib._backport. <a href=' /_vendor/distlib/_backport/sysconfig.py#L776'>_main</a>()</tt>	Display all information sysconfig detains.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile.MkdirLockFile <a href=' /_vendor/lockfile/mkdirlockfile.py#L14'>__init__</a>(path,threaded,timeout)</tt>	>>> lock = mkdirlockfile('somefile').
<tt style='background-color:#E8E8E8;'> _vendor.lockfile.SQLiteLockFile <a href=' /_vendor/lockfile/sqlitelockfile.py#L19'>__init__</a>(path,threaded,timeout)</tt>	>>> lock = sqlitelockfile('somefile').
<tt style='background-color:#E8E8E8;'> _vendor.lockfile.PIDLockFile <a href=' /_vendor/lockfile/pidlockfile.py#L42'>read_pid</a>()</tt>	Get the pid from the lock file.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile.PIDLockFile <a href=' /_vendor/lockfile/pidlockfile.py#L47'>is_locked</a>()</tt>	Test if the lock is currently held.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile.PIDLockFile <a href=' /_vendor/lockfile/pidlockfile.py#L55'>i_am_locking</a>()</tt>	Test if the lock is held by the current process.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile.PIDLockFile <a href=' /_vendor/lockfile/pidlockfile.py#L63'>acquire</a>(timeout)</tt>	Acquire the lock.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile.PIDLockFile <a href=' /_vendor/lockfile/pidlockfile.py#L95'>release</a>()</tt>	Release the lock.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile.PIDLockFile <a href=' /_vendor/lockfile/pidlockfile.py#L108'>break_lock</a>()</tt>	Break an existing lock.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile. <a href=' /_vendor/lockfile/pidlockfile.py#L118'>read_pid_from_pidfile</a>(pidfile_path)</tt>	Read the pid recorded in the named pid file.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile. <a href=' /_vendor/lockfile/pidlockfile.py#L152'>write_pid_to_pidfile</a>(pidfile_path)</tt>	Write the pid in the named pid file.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile. <a href=' /_vendor/lockfile/pidlockfile.py#L176'>remove_existing_pidfile</a>(pidfile_path)</tt>	Remove the named pid file if it exists.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile._SharedBase <a href=' /_vendor/lockfile/__init__.py#L169'>acquire</a>(timeout)</tt>	Acquire the lock.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile._SharedBase <a href=' /_vendor/lockfile/__init__.py#L185'>release</a>()</tt>	Release the lock.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile._SharedBase <a href=' /_vendor/lockfile/__init__.py#L193'>__enter__</a>()</tt>	Context manager support.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile._SharedBase <a href=' /_vendor/lockfile/__init__.py#L200'>__exit__</a>()</tt>	Context manager support.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile.LockBase <a href=' /_vendor/lockfile/__init__.py#L212'>__init__</a>(path,threaded,timeout)</tt>	>>> lock = lockbase('somefile').
<tt style='background-color:#E8E8E8;'> _vendor.lockfile.LockBase <a href=' /_vendor/lockfile/__init__.py#L245'>is_locked</a>()</tt>	Tell whether or not the file is locked.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile.LockBase <a href=' /_vendor/lockfile/__init__.py#L251'>i_am_locking</a>()</tt>	Return true if this object is locking the file.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile.LockBase <a href=' /_vendor/lockfile/__init__.py#L257'>break_lock</a>()</tt>	Remove a lock useful if a locking thread failed to unlock.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile. <a href=' /_vendor/lockfile/__init__.py#L282'>LinkFileLock</a>()</tt>	Factory function provided for backwards compatibility.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile. <a href=' /_vendor/lockfile/__init__.py#L293'>MkdirFileLock</a>()</tt>	Factory function provided for backwards compatibility.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile. <a href=' /_vendor/lockfile/__init__.py#L304'>SQLiteFileLock</a>()</tt>	Factory function provided for backwards compatibility.
<tt style='background-color:#E8E8E8;'> _vendor.lockfile. <a href=' /_vendor/lockfile/__init__.py#L315'>locked</a>(path,timeout)</tt>	Decorator which enables locks for decorated function.
<tt style='background-color:#E8E8E8;'> _vendor.packaging. <a href=' /_vendor/packaging/_compat.py#L20'>with_metaclass</a>(meta)</tt>	Create a base class with a metaclass.
<tt style='background-color:#E8E8E8;'> _vendor.packaging.BaseSpecifier <a href=' /_vendor/packaging/specifiers.py#L23'>__str__</a>()</tt>	Returns the str representation of this specifier like object this.
<tt style='background-color:#E8E8E8;'> _vendor.packaging.BaseSpecifier <a href=' /_vendor/packaging/specifiers.py#L30'>__hash__</a>()</tt>	Returns a hash value for this specifier like object.
<tt style='background-color:#E8E8E8;'> _vendor.packaging.BaseSpecifier <a href=' /_vendor/packaging/specifiers.py#L36'>__eq__</a>(other)</tt>	Returns a boolean representing whether or not the two specifier like objects are equal.
<tt style='background-color:#E8E8E8;'> _vendor.packaging.BaseSpecifier <a href=' /_vendor/packaging/specifiers.py#L43'>__ne__</a>(other)</tt>	Returns a boolean representing whether or not the two specifier like objects are not equal.
<tt style='background-color:#E8E8E8;'> _vendor.packaging.BaseSpecifier <a href=' /_vendor/packaging/specifiers.py#L57'>prereleases</a>()</tt>	Returns whether or not pre-releases as a whole are allowed by this specifier.
<tt style='background-color:#E8E8E8;'> _vendor.packaging.BaseSpecifier <a href=' /_vendor/packaging/specifiers.py#L57'>prereleases</a>(value)</tt>	Sets whether or not pre-releases as a whole are allowed by this specifier.
<tt style='background-color:#E8E8E8;'> _vendor.packaging.BaseSpecifier <a href=' /_vendor/packaging/specifiers.py#L64'>contains</a>(item,prereleases)</tt>	Determines if the given item is contained within this specifier.
<tt style='background-color:#E8E8E8;'> _vendor.packaging.BaseSpecifier <a href=' /_vendor/packaging/specifiers.py#L70'>filter</a>(iterable,prereleases)</tt>	Takes an iterable of items and filters them so that only items which are contained within this specifier are allowed in it.
<tt style='background-color:#E8E8E8;'> _vendor.packaging. <a href=' /_vendor/packaging/version.py#L24'>parse</a>(version)</tt>	Parse the given version string and return either a :class version object or a :class legacyversion object depending on if the given version is.
<tt style='background-color:#E8E8E8;'> _vendor.packaging. <a href=' /_vendor/packaging/version.py#L332'>_parse_local_version</a>(local)</tt>	Takes a string like abc 1 twelve and turns it into ("abc", 1 "twelve").
<tt style='background-color:#E8E8E8;'> _vendor.packaging.Marker <a href=' /_vendor/packaging/markers.py#L288'>evaluate</a>(environment)</tt>	Evaluate a marker.
<tt style='background-color:#E8E8E8;'> _vendor.msgpack. <a href=' /_vendor/msgpack/fallback.py#L72'>unpack</a>(stream)</tt>	Unpack an object from stream.
<tt style='background-color:#E8E8E8;'> _vendor.msgpack. <a href=' /_vendor/msgpack/fallback.py#L86'>unpackb</a>(packed)</tt>	Unpack an object from packed.
<tt style='background-color:#E8E8E8;'> _vendor.msgpack.Unpacker <a href=' /_vendor/msgpack/fallback.py#L250'>_fb_sloppy_consume</a>()</tt>	Gets rid of some of the used parts of the buffer.
<tt style='background-color:#E8E8E8;'> _vendor.msgpack.Unpacker <a href=' /_vendor/msgpack/fallback.py#L262'>_fb_consume</a>()</tt>	Gets rid of the used parts of the buffer.
<tt style='background-color:#E8E8E8;'> _vendor.msgpack. <a href=' /_vendor/msgpack/__init__.py#L31'>pack</a>(o,stream)</tt>	Pack object o and write it to stream see :class packer for options.
<tt style='background-color:#E8E8E8;'> _vendor.msgpack. <a href=' /_vendor/msgpack/__init__.py#L41'>packb</a>(o)</tt>	Pack object o and return packed bytes see :class packer for options.
<tt style='background-color:#E8E8E8;'> _vendor.webencodings. <a href=' /_vendor/webencodings/__init__.py#L35'>ascii_lower</a>(string)</tt>	Transform only ascii letters to lower case a-z is mapped to a-z.
<tt style='background-color:#E8E8E8;'> _vendor.webencodings. <a href=' /_vendor/webencodings/__init__.py#L61'>lookup</a>(label)</tt>	Look for an encoding by its label.
<tt style='background-color:#E8E8E8;'> _vendor.webencodings. <a href=' /_vendor/webencodings/__init__.py#L91'>_get_encoding</a>(encoding_or_label)</tt>	Accept either an encoding object or label.
<tt style='background-color:#E8E8E8;'> _vendor.webencodings. <a href=' /_vendor/webencodings/__init__.py#L139'>decode</a>(input,fallback_encoding,errors)</tt>	Decode a single string.
<tt style='background-color:#E8E8E8;'> _vendor.webencodings. <a href=' /_vendor/webencodings/__init__.py#L161'>_detect_bom</a>(input)</tt>	Return (bom_encoding input), with any bom removed from the input.
<tt style='background-color:#E8E8E8;'> _vendor.webencodings. <a href=' /_vendor/webencodings/__init__.py#L172'>encode</a>(input,encoding,errors)</tt>	Encode a single string.
<tt style='background-color:#E8E8E8;'> _vendor.webencodings. <a href=' /_vendor/webencodings/__init__.py#L214'>_iter_decode_generator</a>(input,decoder)</tt>	Return a generator that first yields the :obj encoding, then yields output chukns as unicode strings.
<tt style='background-color:#E8E8E8;'> _vendor.webencodings.IncrementalDecoder <a href=' /_vendor/webencodings/__init__.py#L295'>decode</a>(input,final)</tt>	Decode one chunk of the input.
<tt style='background-color:#E8E8E8;'> _vendor.colorama.AnsiToWin32 <a href=' /_vendor/colorama/ansitowin32.py#L85'>should_wrap</a>()</tt>	True if this class is actually needed if false then the output.
<tt style='background-color:#E8E8E8;'> _vendor.colorama.AnsiToWin32 <a href=' /_vendor/colorama/ansitowin32.py#L156'>write_and_convert</a>(text)</tt>	Write the given text to our wrapped stream stripping any ansi sequences from the text and optionally converting them into win32.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L250'>get_supported_platform</a>()</tt>	Return this platform's maximum compatible version.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.VersionConflict <a href=' /_vendor/pkg_resources/__init__.py#L349'>with_context</a>(required_by)</tt>	If required_by is non-empty return a version of self that is a contextualversionconflict.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L414'>register_loader_type</a>(loader_type,provider_factory)</tt>	Register provider_factory to make providers for loader_type loader_type is the type or class of a pep 302 module.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L424'>get_provider</a>(moduleOrReq)</tt>	Return an iresourceprovider for the named module or requirement.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L457'>get_build_platform</a>()</tt>	Return this platform's string for platform-specific distributions xxx currently this is the same as distutils.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L489'>compatible_platforms</a>(provided,required)</tt>	Can code for the provided platform run on the required platform? returns true if either platform is none, or the platforms are equal.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L535'>run_script</a>(dist_spec,script_name)</tt>	Locate distribution dist_spec and run its script_name script.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L548'>get_distribution</a>(dist)</tt>	Return a current distribution object for a requirement or string.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L559'>load_entry_point</a>(dist,group,name)</tt>	Return name entry point of group for dist or raise importerror.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L564'>get_entry_map</a>(dist,group)</tt>	Return the entry point map for group, or the full entry map.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L569'>get_entry_info</a>(dist,group,name)</tt>	Return the entrypoint object for group+name, or none.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.IMetadataProvider <a href=' /_vendor/pkg_resources/__init__.py#L575'>has_metadata</a>(name)</tt>	Does the package's distribution contain the named metadata?.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.IMetadataProvider <a href=' /_vendor/pkg_resources/__init__.py#L578'>get_metadata</a>(name)</tt>	The named metadata resource as a string.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.IMetadataProvider <a href=' /_vendor/pkg_resources/__init__.py#L581'>get_metadata_lines</a>(name)</tt>	Yield named metadata resource as list of non-blank non-comment lines leading and trailing whitespace is stripped from each line and lines.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.IMetadataProvider <a href=' /_vendor/pkg_resources/__init__.py#L587'>metadata_isdir</a>(name)</tt>	Is the named metadata a directory? (like os path isdir()).
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.IMetadataProvider <a href=' /_vendor/pkg_resources/__init__.py#L590'>metadata_listdir</a>(name)</tt>	List of metadata names in the directory (like os listdir()).
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.IMetadataProvider <a href=' /_vendor/pkg_resources/__init__.py#L593'>run_script</a>(script_name,namespace)</tt>	Execute the named script in the supplied namespace dictionary.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.IResourceProvider <a href=' /_vendor/pkg_resources/__init__.py#L600'>get_resource_filename</a>(manager,resource_name)</tt>	Return a true filesystem path for resource_name.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.IResourceProvider <a href=' /_vendor/pkg_resources/__init__.py#L605'>get_resource_stream</a>(manager,resource_name)</tt>	Return a readable file-like object for resource_name.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.IResourceProvider <a href=' /_vendor/pkg_resources/__init__.py#L610'>get_resource_string</a>(manager,resource_name)</tt>	Return a string containing the contents of resource_name.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.IResourceProvider <a href=' /_vendor/pkg_resources/__init__.py#L615'>has_resource</a>(resource_name)</tt>	Does the package contain the named resource?.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.IResourceProvider <a href=' /_vendor/pkg_resources/__init__.py#L618'>resource_isdir</a>(resource_name)</tt>	Is the named resource a directory? (like os path isdir()).
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.IResourceProvider <a href=' /_vendor/pkg_resources/__init__.py#L621'>resource_listdir</a>(resource_name)</tt>	List of resource names in the directory (like os listdir()).
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.WorkingSet <a href=' /_vendor/pkg_resources/__init__.py#L628'>__init__</a>(entries)</tt>	Create working set from list of path entries (default=sys path).
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.WorkingSet <a href=' /_vendor/pkg_resources/__init__.py#L641'>_build_master</a>(cls)</tt>	Prepare the master working set.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.WorkingSet <a href=' /_vendor/pkg_resources/__init__.py#L661'>_build_from_requirements</a>(cls,req_spec)</tt>	Build a working set from a requirement spec rewrites sys path.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.WorkingSet <a href=' /_vendor/pkg_resources/__init__.py#L683'>add_entry</a>(entry)</tt>	Add a path item to entries, finding any distributions on it.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.WorkingSet <a href=' /_vendor/pkg_resources/__init__.py#L698'>__contains__</a>(dist)</tt>	True if dist is the active distribution for its project.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.WorkingSet <a href=' /_vendor/pkg_resources/__init__.py#L702'>find</a>(req)</tt>	Find a distribution matching requirement req if there is an active distribution for the requested project this.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.WorkingSet <a href=' /_vendor/pkg_resources/__init__.py#L718'>iter_entry_points</a>(group,name)</tt>	Yield entry point objects from group matching name if name is none yields all entry points in group from all.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.WorkingSet <a href=' /_vendor/pkg_resources/__init__.py#L733'>run_script</a>(requires,script_name)</tt>	Locate distribution for requires and run script_name script.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.WorkingSet <a href=' /_vendor/pkg_resources/__init__.py#L741'>__iter__</a>()</tt>	Yield distributions for non-duplicate projects in the working set the yield order is the order in which the items' path entries were.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.WorkingSet <a href=' /_vendor/pkg_resources/__init__.py#L758'>add</a>(dist,entry,insert,replace)</tt>	Add dist to working set associated with entry if entry is unspecified it defaults to the.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.WorkingSet <a href=' /_vendor/pkg_resources/__init__.py#L788'>resolve</a>(requirements,env,installer,replace_conflicting)</tt>	List all distributions needed to recursively meet requirements requirements must be a sequence of requirement objects.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.WorkingSet <a href=' /_vendor/pkg_resources/__init__.py#L876'>find_plugins</a>(plugin_env,full_env,installer,fallback)</tt>	Find all activatable distributions in plugin_env example usage :.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.WorkingSet <a href=' /_vendor/pkg_resources/__init__.py#L960'>require</a>()</tt>	Ensure that distributions matching requirements are activated requirements must be a string or a possibly-nested sequence.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.WorkingSet <a href=' /_vendor/pkg_resources/__init__.py#L976'>subscribe</a>(callback,existing)</tt>	Invoke callback for all distributions if existing=true default.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources._ReqExtras <a href=' /_vendor/pkg_resources/__init__.py#L1013'>markers_pass</a>(req,extras)</tt>	Evaluate markers for req against each extra that demanded it.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Environment <a href=' /_vendor/pkg_resources/__init__.py#L1031'>__init__</a>(search_path,platform,python)</tt>	Snapshot distributions available on a search path any distributions found on search_path are added to the environment.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Environment <a href=' /_vendor/pkg_resources/__init__.py#L1054'>can_add</a>(dist)</tt>	Is distribution dist acceptable for this environment? the distribution must match the platform and python version.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Environment <a href=' /_vendor/pkg_resources/__init__.py#L1065'>remove</a>(dist)</tt>	Remove dist from the environment.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Environment <a href=' /_vendor/pkg_resources/__init__.py#L1069'>scan</a>(search_path)</tt>	Scan search_path for distributions usable in this environment any distributions found are added to the environment.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Environment <a href=' /_vendor/pkg_resources/__init__.py#L1084'>__getitem__</a>(project_name)</tt>	Return a newest-to-oldest list of distributions for project_name uses case-insensitive project_name comparison assuming all the.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Environment <a href=' /_vendor/pkg_resources/__init__.py#L1095'>add</a>(dist)</tt>	Add dist if we can_add() it and it has not already been added.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Environment <a href=' /_vendor/pkg_resources/__init__.py#L1104'>best_match</a>(req,working_set,installer)</tt>	Find distribution best matching req and usable on working_set this calls the find req method of the working_set to see if a.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Environment <a href=' /_vendor/pkg_resources/__init__.py#L1126'>obtain</a>(requirement,installer)</tt>	Obtain a distribution matching requirement e g via download.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Environment <a href=' /_vendor/pkg_resources/__init__.py#L1138'>__iter__</a>()</tt>	Yield the unique project names of the available distributions.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Environment <a href=' /_vendor/pkg_resources/__init__.py#L1144'>__iadd__</a>(other)</tt>	In-place addition of a distribution or environment.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Environment <a href=' /_vendor/pkg_resources/__init__.py#L1156'>__add__</a>(other)</tt>	Add an environment or distribution to an environment.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ResourceManager <a href=' /_vendor/pkg_resources/__init__.py#L1191'>resource_exists</a>(package_or_requirement,resource_name)</tt>	Does the named resource exist?.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ResourceManager <a href=' /_vendor/pkg_resources/__init__.py#L1195'>resource_isdir</a>(package_or_requirement,resource_name)</tt>	Is the named resource an existing directory?.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ResourceManager <a href=' /_vendor/pkg_resources/__init__.py#L1201'>resource_filename</a>(package_or_requirement,resource_name)</tt>	Return a true filesystem path for specified resource.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ResourceManager <a href=' /_vendor/pkg_resources/__init__.py#L1207'>resource_stream</a>(package_or_requirement,resource_name)</tt>	Return a readable file-like object for specified resource.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ResourceManager <a href=' /_vendor/pkg_resources/__init__.py#L1213'>resource_string</a>(package_or_requirement,resource_name)</tt>	Return specified resource as a string.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ResourceManager <a href=' /_vendor/pkg_resources/__init__.py#L1219'>resource_listdir</a>(package_or_requirement,resource_name)</tt>	List the contents of the named resource directory.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ResourceManager <a href=' /_vendor/pkg_resources/__init__.py#L1225'>extraction_error</a>()</tt>	Give an error message for problems extracting file s.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ResourceManager <a href=' /_vendor/pkg_resources/__init__.py#L1253'>get_cache_path</a>(archive_name,names)</tt>	Return absolute location in cache for archive_name and names the parent directory of the resulting path will be created if it does.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ResourceManager <a href=' /_vendor/pkg_resources/__init__.py#L1278'>_warn_unsafe_extraction_path</a>(path)</tt>	If the default extraction path is overridden and set to an insecure location such as /tmp it opens up an opportunity for an attacker to.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ResourceManager <a href=' /_vendor/pkg_resources/__init__.py#L1302'>postprocess</a>(tempname,filename)</tt>	Perform any platform-specific postprocessing of tempname this is where mac header rewrites should be done other platforms don't.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ResourceManager <a href=' /_vendor/pkg_resources/__init__.py#L1322'>set_extraction_path</a>(path)</tt>	Set the base path where resources will be extracted to if needed.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ResourceManager <a href=' /_vendor/pkg_resources/__init__.py#L1348'>cleanup_resources</a>(force)</tt>	Delete all extracted resource files and directories returning a list of the file and directory names that could not be successfully removed.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L1362'>get_default_cache</a>()</tt>	Return the python_egg_cache environment variable or a platform-relevant user cache dir for an app.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L1374'>safe_name</a>(name)</tt>	Convert an arbitrary string to a standard distribution name any runs of non-alphanumeric/.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L1382'>safe_version</a>(version)</tt>	Convert an arbitrary string to a standard version string.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L1394'>safe_extra</a>(extra)</tt>	Convert an arbitrary string to a standard 'extra' name any runs of non-alphanumeric characters are replaced with a single '_',.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L1403'>to_filename</a>(name)</tt>	Convert a project or version name to its filename-escaped form any '-' characters are currently replaced with '_'.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L1411'>invalid_marker</a>(text)</tt>	Validate text as a pep 508 environment marker return an exception if invalid or false otherwise.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L1425'>evaluate_marker</a>(text,extra)</tt>	Evaluate a pep 508 environment marker.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ZipManifests <a href=' /_vendor/pkg_resources/__init__.py#L1611'>build</a>(cls,path)</tt>	Build a dictionary similar to the zipimport directory caches except instead of tuples store zipinfo objects.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.MemoizedZipManifests <a href=' /_vendor/pkg_resources/__init__.py#L1639'>load</a>(path)</tt>	Load a manifest at path or return a suitable manifest already loaded.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ContextualZipFile <a href=' /_vendor/pkg_resources/__init__.py#L1664'>__new__</a>(cls)</tt>	Construct a zipfile or contextualzipfile as appropriate.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.ZipProvider <a href=' /_vendor/pkg_resources/__init__.py#L1780'>_is_current</a>(file_path,zip_path)</tt>	Return true if the file_path is current for this zip_path.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.EggMetadata <a href=' /_vendor/pkg_resources/__init__.py#L1909'>__init__</a>(importer)</tt>	Create a metadata provider from a zipimporter.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L1924'>register_finder</a>(importer_type,distribution_finder)</tt>	Register distribution_finder to find distributions in sys path items.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L1934'>find_distributions</a>(path_item,only)</tt>	Yield distributions accessible via path_item.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L1941'>find_eggs_in_zip</a>(importer,path_item,only)</tt>	Find eggs in zip files possibly multiple nested eggs.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L1978'>_by_version_descending</a>(names)</tt>	Given a list of filenames return them in descending order by version number.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2004'>find_on_path</a>(importer,path_item,only)</tt>	Yield distributions accessible on a sys path directory.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2059'>register_namespace_handler</a>(importer_type,namespace_handler)</tt>	Register namespace_handler to declare namespace packages importer_type is the type or class of a pep 302 "importer" (sys.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2077'>_handle_ns</a>(packageName,path_item)</tt>	Ensure that named package includes a subpath of path_item if needed.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2103'>_rebuild_mod_path</a>(orig_path,package_name,module)</tt>	Rebuild module __path__ ensuring that all entries are ordered.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2136'>declare_namespace</a>(packageName)</tt>	Declare that package 'packagename' is a namespace package.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2169'>fixup_namespace_packages</a>(path_item,parent)</tt>	Ensure that previously-declared namespace packages include path_item.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2181'>file_ns_handler</a>(importer,path_item,packageName,module)</tt>	Compute an ns-package subpath for a filesystem or zipfile importer.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2208'>normalize_path</a>(filename)</tt>	Normalize a file/dir name for comparison purposes.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2221'>_is_unpacked_egg</a>(path)</tt>	Determine if given path appears to be an unpacked egg.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2238'>yield_lines</a>(strs)</tt>	Yield non-empty/non-comment lines of a string or sequence.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.EntryPoint <a href=' /_vendor/pkg_resources/__init__.py#L2290'>load</a>(require)</tt>	Require packages for this entrypoint then resolve it.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.EntryPoint <a href=' /_vendor/pkg_resources/__init__.py#L2305'>resolve</a>()</tt>	Resolve the entry point from its module and attrs.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.EntryPoint <a href=' /_vendor/pkg_resources/__init__.py#L2337'>parse</a>(cls,src,dist)</tt>	Parse a single entry point from string src entry point syntax follows the form :.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.EntryPoint <a href=' /_vendor/pkg_resources/__init__.py#L2366'>parse_group</a>(cls,group,lines,dist)</tt>	Parse an entry point group.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.EntryPoint <a href=' /_vendor/pkg_resources/__init__.py#L2379'>parse_map</a>(cls,data,dist)</tt>	Parse a map of entry point groups.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2408'>_version_from_file</a>(lines)</tt>	Given an iterable of lines from a metadata file return the value of the version field if present or none otherwise.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Distribution <a href=' /_vendor/pkg_resources/__init__.py#L2567'>requires</a>(extras)</tt>	List of requirements needed for this distro if extras are used.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Distribution <a href=' /_vendor/pkg_resources/__init__.py#L2586'>activate</a>(path,replace)</tt>	Ensure distribution is importable on path (default=sys path).
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Distribution <a href=' /_vendor/pkg_resources/__init__.py#L2597'>egg_name</a>()</tt>	Return what this distribution's standard egg filename should be.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Distribution <a href=' /_vendor/pkg_resources/__init__.py#L2622'>__getattr__</a>(attr)</tt>	Delegate all unrecognized public attributes to metadata provider.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Distribution <a href=' /_vendor/pkg_resources/__init__.py#L2635'>as_requirement</a>()</tt>	Return a requirement that matches this distribution exactly.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Distribution <a href=' /_vendor/pkg_resources/__init__.py#L2644'>load_entry_point</a>(group,name)</tt>	Return the name entry point of group or raise importerror.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Distribution <a href=' /_vendor/pkg_resources/__init__.py#L2651'>get_entry_map</a>(group)</tt>	Return the entry point map for group, or the full entry map.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Distribution <a href=' /_vendor/pkg_resources/__init__.py#L2663'>get_entry_info</a>(group,name)</tt>	Return the entrypoint object for group+name, or none.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Distribution <a href=' /_vendor/pkg_resources/__init__.py#L2667'>insert_on</a>(path,loc,replace)</tt>	Ensure self location is on path.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Distribution <a href=' /_vendor/pkg_resources/__init__.py#L2764'>clone</a>()</tt>	Copy this distribution substituting in any changed keyword args.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.EggInfoDistribution <a href=' /_vendor/pkg_resources/__init__.py#L2778'>_reload_version</a>()</tt>	Packages installed by distutils e g numpy or scipy.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.DistInfoDistribution <a href=' /_vendor/pkg_resources/__init__.py#L2801'>_parsed_pkg_info</a>()</tt>	Parse and cache metadata.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.DistInfoDistribution <a href=' /_vendor/pkg_resources/__init__.py#L2819'>_compute_dependencies</a>()</tt>	Recompute this distribution's dependencies.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2868'>parse_requirements</a>(strs)</tt>	Yield requirement objects for each specification in strs strs must be a string or a possibly-nested iterable thereof.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources.Requirement <a href=' /_vendor/pkg_resources/__init__.py#L2888'>__init__</a>(requirement_string)</tt>	Do not call this undocumented method use requirement parse()!.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2940'>_get_mro</a>(cls)</tt>	Get an mro for a type or classic class.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2951'>_find_adapter</a>(registry,ob)</tt>	Return an adapter factory for ob from registry.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2958'>ensure_directory</a>(path)</tt>	Ensure that the parent directory of path exists.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2965'>_bypass_ensure_directory</a>(path)</tt>	Sandbox-bypassing version of ensure_directory().
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L2975'>split_sections</a>(s)</tt>	Split a string or iterable thereof into section content pairs each section is a stripped version of the section header ("[section]").
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L3025'>_initialize</a>(g)</tt>	Set up global resource manager deliberately not state-saved.
<tt style='background-color:#E8E8E8;'> _vendor.pkg_resources. <a href=' /_vendor/pkg_resources/__init__.py#L3037'>_initialize_master_working_set</a>()</tt>	Prepare the master working set and make the require() api available.
<tt style='background-color:#E8E8E8;'> _vendor.cachecontrol. <a href=' /_vendor/cachecontrol/controller.py#L21'>parse_uri</a>(uri)</tt>	Parses a uri using the regex given in appendix b of rfc 3986.
<tt style='background-color:#E8E8E8;'> _vendor.cachecontrol.CacheController <a href=' /_vendor/cachecontrol/controller.py#L40'>_urlnorm</a>(cls,uri)</tt>	Normalize the url to create a safe key for the cache.
<tt style='background-color:#E8E8E8;'> _vendor.cachecontrol.CacheController <a href=' /_vendor/cachecontrol/controller.py#L64'>parse_cache_control</a>(headers)</tt>	Parse the cache control headers returning a dictionary with values for the different directives.
<tt style='background-color:#E8E8E8;'> _vendor.cachecontrol.CacheController <a href=' /_vendor/cachecontrol/controller.py#L88'>cached_request</a>(request)</tt>	Return a cached response if it exists in the cache otherwise return false.
<tt style='background-color:#E8E8E8;'> _vendor.cachecontrol.CacheController <a href=' /_vendor/cachecontrol/controller.py#L225'>cache_response</a>(request,response,body,status_codes)</tt>	Algorithm for caching requests.
<tt style='background-color:#E8E8E8;'> _vendor.cachecontrol.CacheController <a href=' /_vendor/cachecontrol/controller.py#L313'>update_cached_response</a>(request,response)</tt>	On a 304 we will get a new set of headers that we want to update our cached value with assuming we have one.
<tt style='background-color:#E8E8E8;'> _vendor.cachecontrol.BaseHeuristic <a href=' /_vendor/cachecontrol/heuristics.py#L22'>warning</a>(response)</tt>	Return a valid 1xx warning header value describing the cache adjustments.
<tt style='background-color:#E8E8E8;'> _vendor.cachecontrol.BaseHeuristic <a href=' /_vendor/cachecontrol/heuristics.py#L33'>update_headers</a>(response)</tt>	Update the response headers with any new headers.
<tt style='background-color:#E8E8E8;'> _vendor.cachecontrol.Serializer <a href=' /_vendor/cachecontrol/serialize.py#L104'>prepare_response</a>(request,cached)</tt>	Verify our vary headers match and construct a real urllib3 httpresponse object.
<tt style='background-color:#E8E8E8;'> _vendor.cachecontrol.CacheControlAdapter <a href=' /_vendor/cachecontrol/adapter.py#L33'>send</a>(request,cacheable_methods)</tt>	Send a request use the request information to see if it.
<tt style='background-color:#E8E8E8;'> _vendor.cachecontrol.CacheControlAdapter <a href=' /_vendor/cachecontrol/adapter.py#L54'>build_response</a>(request,response,from_cache,cacheable_methods)</tt>	Build a response by making a request or using the cache.
<tt style='background-color:#E8E8E8;'> _vendor.cachecontrol.caches. <a href=' /_vendor/cachecontrol/caches/file_cache.py#L127'>url_to_file_path</a>(url,filecache)</tt>	Return the file cache path based on the url.
<tt style='background-color:#E8E8E8;'> _vendor.cachecontrol.caches. <a href=' /_vendor/cachecontrol/caches/redis_cache.py#L6'>total_seconds</a>(td)</tt>	Python 2 6 compatability.
<tt style='background-color:#E8E8E8;'> _vendor.cachecontrol.caches.RedisCache <a href=' /_vendor/cachecontrol/caches/redis_cache.py#L34'>clear</a>()</tt>	Helper for clearing all the keys in a database use with.
<tt style='background-color:#E8E8E8;'> _vendor.requests.CaseInsensitiveDict <a href=' /_vendor/requests/structures.py#L65'>lower_items</a>()</tt>	Like iteritems(), but with all lowercase keys.
<tt style='background-color:#E8E8E8;'> _vendor.requests.MockRequest <a href=' /_vendor/requests/cookies.py#L77'>add_header</a>(key,val)</tt>	Cookielib has no legitimate use for this method add it back if you find one.
<tt style='background-color:#E8E8E8;'> _vendor.requests.MockResponse <a href=' /_vendor/requests/cookies.py#L107'>__init__</a>(headers)</tt>	Make a mockresponse for cookielib to read.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/cookies.py#L121'>extract_cookies_to_jar</a>(jar,request,response)</tt>	Extract the cookies from the response into a cookiejar.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/cookies.py#L138'>get_cookie_header</a>(jar,request)</tt>	Produce an appropriate cookie header string to be sent with request, or none.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/cookies.py#L149'>remove_cookie_by_name</a>(cookiejar,name,domain,path)</tt>	Unsets a cookie by name by default over all domains and paths.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L192'>get</a>(name,default,domain,path)</tt>	Dict-like get() that also supports optional domain and path args in order to resolve naming collisions from using one cookie jar over.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L204'>set</a>(name,value)</tt>	Dict-like set() that also supports optional domain and path args in order to resolve naming collisions from using one cookie jar over.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L221'>iterkeys</a>()</tt>	Dict-like iterkeys() that returns an iterator of names of cookies from the jar.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L230'>keys</a>()</tt>	Dict-like keys() that returns a list of names of cookies from the jar.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L238'>itervalues</a>()</tt>	Dict-like itervalues() that returns an iterator of values of cookies from the jar.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L247'>values</a>()</tt>	Dict-like values() that returns a list of values of cookies from the jar.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L255'>iteritems</a>()</tt>	Dict-like iteritems() that returns an iterator of name-value tuples from the jar.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L264'>items</a>()</tt>	Dict-like items() that returns a list of name-value tuples from the jar.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L273'>list_domains</a>()</tt>	Utility method to list all the domains in the jar.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L281'>list_paths</a>()</tt>	Utility method to list all the paths in the jar.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L289'>multiple_domains</a>()</tt>	Returns true if there are multiple domains in the jar.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L302'>get_dict</a>(domain,path)</tt>	Takes as an argument an optional domain and path and returns a plain old python dict of name-value pairs of cookies that meet the.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L322'>__getitem__</a>(name)</tt>	Dict-like __getitem__() for compatibility with client code throws.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L331'>__setitem__</a>(name,value)</tt>	Dict-like __setitem__ for compatibility with client code throws.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L338'>__delitem__</a>(name)</tt>	Deletes a cookie given a name wraps cookielib cookiejar's.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L349'>update</a>(other)</tt>	Updates this jar with cookies from another cookiejar or dict-like.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L357'>_find</a>(name,domain,path)</tt>	Requests uses this method internally to get cookie values.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L377'>_find_no_duplicates</a>(name,domain,path)</tt>	Both __get_item__ and get call this function it's never used elsewhere in requests.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L402'>__getstate__</a>()</tt>	Unlike a normal cookiejar this class is pickleable.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L409'>__setstate__</a>(state)</tt>	Unlike a normal cookiejar this class is pickleable.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestsCookieJar <a href=' /_vendor/requests/cookies.py#L415'>copy</a>()</tt>	Return a copy of this requestscookiejar.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/cookies.py#L437'>create_cookie</a>(name,value)</tt>	Make a cookie from underspecified parameters.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/cookies.py#L472'>morsel_to_cookie</a>(morsel)</tt>	Convert a morsel object into a cookie containing the one k/v pair.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/cookies.py#L503'>cookiejar_from_dict</a>(cookie_dict,cookiejar,overwrite)</tt>	Returns a cookiejar from a key/value dictionary.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/cookies.py#L523'>merge_cookies</a>(cookiejar,cookies)</tt>	Add cookies to cookiejar and returns a merged cookiejar.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/api.py#L16'>request</a>(method,url)</tt>	Constructs and sends a :class request <request>.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/api.py#L59'>get</a>(url,params)</tt>	Sends a get request.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/api.py#L73'>options</a>(url)</tt>	Sends a options request.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/api.py#L86'>head</a>(url)</tt>	Sends a head request.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/api.py#L99'>post</a>(url,data,json)</tt>	Sends a post request.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/api.py#L113'>put</a>(url,data)</tt>	Sends a put request.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/api.py#L127'>patch</a>(url,data)</tt>	Sends a patch request.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/api.py#L141'>delete</a>(url)</tt>	Sends a delete request.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/sessions.py#L42'>merge_setting</a>(request_setting,session_setting,dict_class)</tt>	Determines appropriate setting for a given request taking into account the explicit setting on that request and the setting in the session.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/sessions.py#L73'>merge_hooks</a>(request_hooks,session_hooks,dict_class)</tt>	Properly merges both requests and session hooks.
<tt style='background-color:#E8E8E8;'> _vendor.requests.SessionRedirectMixin <a href=' /_vendor/requests/sessions.py#L89'>resolve_redirects</a>(resp,req,stream,timeout)</tt>	Receives a response returns a generator of responses.
<tt style='background-color:#E8E8E8;'> _vendor.requests.SessionRedirectMixin <a href=' /_vendor/requests/sessions.py#L198'>rebuild_auth</a>(prepared_request,response)</tt>	When being redirected we may want to strip authentication from the request to avoid leaking credentials.
<tt style='background-color:#E8E8E8;'> _vendor.requests.SessionRedirectMixin <a href=' /_vendor/requests/sessions.py#L222'>rebuild_proxies</a>(prepared_request,proxies)</tt>	This method re-evaluates the proxy configuration by considering the environment variables.
<tt style='background-color:#E8E8E8;'> _vendor.requests.SessionRedirectMixin <a href=' /_vendor/requests/sessions.py#L260'>rebuild_method</a>(prepared_request,response)</tt>	When being redirected we may want to change the method of the request based on certain specs or browser behavior.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Session <a href=' /_vendor/requests/sessions.py#L371'>prepare_request</a>(request)</tt>	Constructs a :class preparedrequest <preparedrequest> for transmission and returns it.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Session <a href=' /_vendor/requests/sessions.py#L411'>request</a>(method,url,params,data)</tt>	Constructs a :class request <request>, prepares it and sends it.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Session <a href=' /_vendor/requests/sessions.py#L492'>get</a>(url)</tt>	Sends a get request returns :class response object.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Session <a href=' /_vendor/requests/sessions.py#L503'>options</a>(url)</tt>	Sends a options request returns :class response object.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Session <a href=' /_vendor/requests/sessions.py#L514'>head</a>(url)</tt>	Sends a head request returns :class response object.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Session <a href=' /_vendor/requests/sessions.py#L525'>post</a>(url,data,json)</tt>	Sends a post request returns :class response object.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Session <a href=' /_vendor/requests/sessions.py#L537'>put</a>(url,data)</tt>	Sends a put request returns :class response object.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Session <a href=' /_vendor/requests/sessions.py#L548'>patch</a>(url,data)</tt>	Sends a patch request returns :class response object.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Session <a href=' /_vendor/requests/sessions.py#L559'>delete</a>(url)</tt>	Sends a delete request returns :class response object.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Session <a href=' /_vendor/requests/sessions.py#L569'>send</a>(request)</tt>	Send a given preparedrequest.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Session <a href=' /_vendor/requests/sessions.py#L645'>merge_environment_settings</a>(url,proxies,stream,verify)</tt>	Check the environment and merge it with some settings.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Session <a href=' /_vendor/requests/sessions.py#L673'>get_adapter</a>(url)</tt>	Returns the appropriate connection adapter for the given url.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Session <a href=' /_vendor/requests/sessions.py#L687'>close</a>()</tt>	Closes all adapters and as such the session.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Session <a href=' /_vendor/requests/sessions.py#L692'>mount</a>(prefix,adapter)</tt>	Registers a connection adapter to a prefix.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/sessions.py#L718'>session</a>()</tt>	Returns a :class session for context-management.
<tt style='background-color:#E8E8E8;'> _vendor.requests.BaseAdapter <a href=' /_vendor/requests/adapters.py#L57'>send</a>(request,stream,timeout,verify)</tt>	Sends preparedrequest object returns response object.
<tt style='background-color:#E8E8E8;'> _vendor.requests.BaseAdapter <a href=' /_vendor/requests/adapters.py#L73'>close</a>()</tt>	Cleans up adapter specific items.
<tt style='background-color:#E8E8E8;'> _vendor.requests.HTTPAdapter <a href=' /_vendor/requests/adapters.py#L141'>init_poolmanager</a>(connections,maxsize,block)</tt>	Initializes a urllib3 poolmanager.
<tt style='background-color:#E8E8E8;'> _vendor.requests.HTTPAdapter <a href=' /_vendor/requests/adapters.py#L161'>proxy_manager_for</a>(proxy)</tt>	Return urllib3 proxymanager for the given proxy.
<tt style='background-color:#E8E8E8;'> _vendor.requests.HTTPAdapter <a href=' /_vendor/requests/adapters.py#L198'>cert_verify</a>(conn,url,verify,cert)</tt>	Verify a ssl certificate this method should not be called from user.
<tt style='background-color:#E8E8E8;'> _vendor.requests.HTTPAdapter <a href=' /_vendor/requests/adapters.py#L240'>build_response</a>(req,resp)</tt>	Builds a :class response <requests response> object from a urllib3.
<tt style='background-color:#E8E8E8;'> _vendor.requests.HTTPAdapter <a href=' /_vendor/requests/adapters.py#L277'>get_connection</a>(url,proxies)</tt>	Returns a urllib3 connection for the given url this should not be.
<tt style='background-color:#E8E8E8;'> _vendor.requests.HTTPAdapter <a href=' /_vendor/requests/adapters.py#L300'>close</a>()</tt>	Disposes of any internal state.
<tt style='background-color:#E8E8E8;'> _vendor.requests.HTTPAdapter <a href=' /_vendor/requests/adapters.py#L310'>request_url</a>(request,proxies)</tt>	Obtain the url to use when making the final request.
<tt style='background-color:#E8E8E8;'> _vendor.requests.HTTPAdapter <a href=' /_vendor/requests/adapters.py#L339'>add_headers</a>(request)</tt>	Add any headers needed by the connection as of v2 0 this does.
<tt style='background-color:#E8E8E8;'> _vendor.requests.HTTPAdapter <a href=' /_vendor/requests/adapters.py#L353'>proxy_headers</a>(proxy)</tt>	Returns a dictionary of the headers to add to any request sent through a proxy.
<tt style='background-color:#E8E8E8;'> _vendor.requests.HTTPAdapter <a href=' /_vendor/requests/adapters.py#L375'>send</a>(request,stream,timeout,verify)</tt>	Sends preparedrequest object returns response object.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/hooks.py#L23'>dispatch_hook</a>(key,hooks,hook_data)</tt>	Dispatches a hook dictionary on a given piece of data.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestException <a href=' /_vendor/requests/exceptions.py#L17'>__init__</a>()</tt>	Initialize requestexception with request and response objects.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/_internal_utils.py#L14'>to_native_string</a>(string,encoding)</tt>	Given a string object regardless of type returns a representation of that string in the native string type encoding and decoding where.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/_internal_utils.py#L30'>unicode_is_ascii</a>(u_string)</tt>	Determine if unicode string only contains ascii characters.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L41'>dict_to_sequence</a>(d)</tt>	Returns an internal sequence dictionary update.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L109'>get_netrc_auth</a>(url,raise_errors)</tt>	Returns the requests tuple auth for a given url from netrc.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L160'>guess_filename</a>(obj)</tt>	Tries to guess the filename of the given object.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L168'>from_key_val_list</a>(value)</tt>	Take an object and test to see if it can be represented as a dictionary.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L193'>to_key_val_list</a>(value)</tt>	Take an object and test to see if it can be represented as a dictionary.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L221'>parse_list_header</a>(value)</tt>	Parse lists as described by rfc 2068 section 2.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L253'>parse_dict_header</a>(value)</tt>	Parse lists of key value pairs as described by rfc 2068 section 2 and convert them into a python dict.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L288'>unquote_header_value</a>(value,is_filename)</tt>	Unquotes a header value (reversal of :func quote_header_value).
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L313'>dict_from_cookiejar</a>(cj)</tt>	Returns a key/value dictionary from a cookiejar.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L328'>add_dict_to_cookiejar</a>(cj,cookie_dict)</tt>	Returns a cookiejar from a key/value dictionary.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L339'>get_encodings_from_content</a>(content)</tt>	Returns encodings from given content string.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L359'>get_encoding_from_headers</a>(headers)</tt>	Returns encodings from given http header dict.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L380'>stream_decode_response_unicode</a>(iterator,r)</tt>	Stream decodes a iterator.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L398'>iter_slices</a>(string,slice_length)</tt>	Iterate over slices of a string.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L408'>get_unicode_from_response</a>(r)</tt>	Returns the requested content back in unicode.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L450'>unquote_unreserved</a>(uri)</tt>	Un-escape any percent-escape sequences in a uri that are unreserved characters.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L474'>requote_uri</a>(uri)</tt>	Re-quote the given uri.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L496'>address_in_network</a>(ip,net)</tt>	This function allows you to check if on ip belongs to a network subnet example returns true if ip = 192.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L511'>dotted_netmask</a>(mask)</tt>	Converts mask from /xx format to xxx xxx xxx xxx.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L533'>is_valid_cidr</a>(string_network)</tt>	Very simple check of the cidr format in no_proxy variable.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L557'>should_bypass_proxies</a>(url)</tt>	Returns whether we should bypass proxies or not.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L611'>get_environ_proxies</a>(url)</tt>	Return a dict of environment proxies.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L623'>select_proxy</a>(url,proxies)</tt>	Select a proxy for the url if applicable.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L649'>default_user_agent</a>(name)</tt>	Return a string representing the default user agent.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L658'>default_headers</a>()</tt>	:rtype requests structures caseinsensitivedict.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L670'>parse_header_links</a>(value)</tt>	Return a dict of parsed link headers proxies.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L741'>prepend_scheme_if_needed</a>(url,new_scheme)</tt>	Given a url that may or may not have a scheme prepend the given scheme.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L758'>get_auth_from_url</a>(url)</tt>	Given a url with authentication components extract them into a tuple of username password.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L778'>check_header_validity</a>(header)</tt>	Verifies that header value is a string which doesn't contain leading whitespace or return characters.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L799'>urldefragauth</a>(url)</tt>	Given a url remove the fragment and the authentication part.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/utils.py#L815'>rewind_body</a>(prepared_request)</tt>	Move file pointer back to its recorded starting position so it can be read again on redirect.
<tt style='background-color:#E8E8E8;'> _vendor.requests. <a href=' /_vendor/requests/auth.py#L29'>_basic_auth_str</a>(username,password)</tt>	Returns a basic auth string.
<tt style='background-color:#E8E8E8;'> _vendor.requests.HTTPDigestAuth <a href=' /_vendor/requests/auth.py#L218'>handle_redirect</a>(r)</tt>	Reset num_401_calls counter on redirects.
<tt style='background-color:#E8E8E8;'> _vendor.requests.HTTPDigestAuth <a href=' /_vendor/requests/auth.py#L223'>handle_401</a>(r)</tt>	Takes the given response and tries digest-auth if needed.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestEncodingMixin <a href=' /_vendor/requests/models.py#L60'>path_url</a>()</tt>	Build the path url to use.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestEncodingMixin <a href=' /_vendor/requests/models.py#L81'>_encode_params</a>(data)</tt>	Encode parameters in a piece of data.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestEncodingMixin <a href=' /_vendor/requests/models.py#L108'>_encode_files</a>(files,data)</tt>	Build the body for a multipart/form-data request.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestHooksMixin <a href=' /_vendor/requests/models.py#L170'>register_hook</a>(event,hook)</tt>	Properly register a hook.
<tt style='background-color:#E8E8E8;'> _vendor.requests.RequestHooksMixin <a href=' /_vendor/requests/models.py#L181'>deregister_hook</a>(event,hook)</tt>	Deregister a previously registered hook.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Request <a href=' /_vendor/requests/models.py#L244'>prepare</a>()</tt>	Constructs a :class preparedrequest <preparedrequest> for transmission and returns it.
<tt style='background-color:#E8E8E8;'> _vendor.requests.PreparedRequest <a href=' /_vendor/requests/models.py#L297'>prepare</a>(method,url,headers,files)</tt>	Prepares the entire request with the given parameters.
<tt style='background-color:#E8E8E8;'> _vendor.requests.PreparedRequest <a href=' /_vendor/requests/models.py#L328'>prepare_method</a>(method)</tt>	Prepares the given http method.
<tt style='background-color:#E8E8E8;'> _vendor.requests.PreparedRequest <a href=' /_vendor/requests/models.py#L350'>prepare_url</a>(url,params)</tt>	Prepares the given http url.
<tt style='background-color:#E8E8E8;'> _vendor.requests.PreparedRequest <a href=' /_vendor/requests/models.py#L436'>prepare_headers</a>(headers)</tt>	Prepares the given http headers.
<tt style='background-color:#E8E8E8;'> _vendor.requests.PreparedRequest <a href=' /_vendor/requests/models.py#L447'>prepare_body</a>(data,files,json)</tt>	Prepares the given http body data.
<tt style='background-color:#E8E8E8;'> _vendor.requests.PreparedRequest <a href=' /_vendor/requests/models.py#L516'>prepare_content_length</a>(body)</tt>	Prepare content-length header based on request method and body.
<tt style='background-color:#E8E8E8;'> _vendor.requests.PreparedRequest <a href=' /_vendor/requests/models.py#L529'>prepare_auth</a>(auth,url)</tt>	Prepares the given http auth data.
<tt style='background-color:#E8E8E8;'> _vendor.requests.PreparedRequest <a href=' /_vendor/requests/models.py#L551'>prepare_cookies</a>(cookies)</tt>	Prepares the given http cookie data.
<tt style='background-color:#E8E8E8;'> _vendor.requests.PreparedRequest <a href=' /_vendor/requests/models.py#L571'>prepare_hooks</a>(hooks)</tt>	Prepares the given hooks.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Response <a href=' /_vendor/requests/models.py#L661'>__bool__</a>()</tt>	Returns true if :attr status_code is 'ok'.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Response <a href=' /_vendor/requests/models.py#L665'>__nonzero__</a>()</tt>	Returns true if :attr status_code is 'ok'.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Response <a href=' /_vendor/requests/models.py#L669'>__iter__</a>()</tt>	Allows you to use a response as an iterator.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Response <a href=' /_vendor/requests/models.py#L681'>is_redirect</a>()</tt>	True if this response is a well-formed http redirect that could have been processed automatically (by :meth session.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Response <a href=' /_vendor/requests/models.py#L688'>is_permanent_redirect</a>()</tt>	True if this response one of the permanent versions of redirect.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Response <a href=' /_vendor/requests/models.py#L693'>apparent_encoding</a>()</tt>	The apparent encoding provided by the chardet library.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Response <a href=' /_vendor/requests/models.py#L698'>iter_content</a>(chunk_size,decode_unicode)</tt>	Iterates over the response data when stream=true is set on the.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Response <a href=' /_vendor/requests/models.py#L753'>iter_lines</a>(chunk_size,decode_unicode,delimiter)</tt>	Iterates over the response data one line at a time when.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Response <a href=' /_vendor/requests/models.py#L784'>content</a>()</tt>	Content of the response in bytes.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Response <a href=' /_vendor/requests/models.py#L804'>text</a>()</tt>	Content of the response in unicode.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Response <a href=' /_vendor/requests/models.py#L842'>json</a>()</tt>	Returns the json-encoded content of a response if any.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Response <a href=' /_vendor/requests/models.py#L868'>links</a>()</tt>	Returns the parsed header links of the response if any.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Response <a href=' /_vendor/requests/models.py#L886'>raise_for_status</a>()</tt>	Raises stored :class httperror, if one occurred.
<tt style='background-color:#E8E8E8;'> _vendor.requests.Response <a href=' /_vendor/requests/models.py#L911'>close</a>()</tt>	Releases the connection back to the pool once this method has been.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.idna. <a href=' /_vendor/requests/packages/idna/intranges.py#L10'>intranges_from_list</a>(list_)</tt>	Represent a list of integers as a sequence of ranges ((start_0 end_0), (start_1 end_1),.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.idna. <a href=' /_vendor/requests/packages/idna/intranges.py#L31'>intranges_contain</a>(int_,ranges)</tt>	Determine if int_ falls into one of the ranges in ranges.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.idna. <a href=' /_vendor/requests/packages/idna/core.py#L307'>uts46_remap</a>(domain,std3_rules,transitional)</tt>	Re-map the characters in the string according to uts46 processing.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.chardet. <a href=' /_vendor/requests/packages/chardet/chardetect.py#L26'>description_of</a>(lines,name)</tt>	Return a string describing the probable encoding of a file or list of strings.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.chardet. <a href=' /_vendor/requests/packages/chardet/chardetect.py#L48'>main</a>(argv)</tt>	Handles command line arguments and gets things started.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.chardet.CharDistributionAnalysis <a href=' /_vendor/requests/packages/chardet/chardistribution.py#L59'>reset</a>()</tt>	Reset analyser clear any state.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.chardet.CharDistributionAnalysis <a href=' /_vendor/requests/packages/chardet/chardistribution.py#L68'>feed</a>(aBuf,aCharLen)</tt>	Feed a character with known length.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.chardet.CharDistributionAnalysis <a href=' /_vendor/requests/packages/chardet/chardistribution.py#L82'>get_confidence</a>()</tt>	Return confidence based on existing data.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3. <a href=' /_vendor/requests/packages/urllib3/filepost.py#L14'>choose_boundary</a>()</tt>	Our embarrassingly-simple replacement for mimetools choose_boundary.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3. <a href=' /_vendor/requests/packages/urllib3/filepost.py#L21'>iter_field_objects</a>(fields)</tt>	Iterate over fields.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3. <a href=' /_vendor/requests/packages/urllib3/filepost.py#L41'>iter_fields</a>(fields)</tt>	Deprecated : 1 6.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3. <a href=' /_vendor/requests/packages/urllib3/filepost.py#L59'>encode_multipart_formdata</a>(fields,boundary)</tt>	Encode a dictionary of fields using the multipart/form-data mime format.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPConnection <a href=' /_vendor/requests/packages/urllib3/connection.py#L127'>_new_conn</a>()</tt>	Establish a socket connection and set nodelay settings on it.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPConnection <a href=' /_vendor/requests/packages/urllib3/connection.py#L169'>request_chunked</a>(method,url,body,headers)</tt>	Alternative to the common request method which sends the.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.VerifiedHTTPSConnection <a href=' /_vendor/requests/packages/urllib3/connection.py#L257'>set_cert</a>(key_file,cert_file,cert_reqs,ca_certs)</tt>	This method should only be called once before the connection is used.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.RequestMethods <a href=' /_vendor/requests/packages/urllib3/request.py#L50'>request</a>(method,url,fields,headers)</tt>	Make a request using :meth urlopen with the appropriate encoding of fields based on the method used.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.RequestMethods <a href=' /_vendor/requests/packages/urllib3/request.py#L72'>request_encode_url</a>(method,url,fields,headers)</tt>	Make a request using :meth urlopen with the fields encoded in the url.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.RequestMethods <a href=' /_vendor/requests/packages/urllib3/request.py#L89'>request_encode_body</a>(method,url,fields,headers)</tt>	Make a request using :meth urlopen with the fields encoded in the body.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPHeaderDict <a href=' /_vendor/requests/packages/urllib3/_collections.py#L185'>pop</a>(key,default)</tt>	D pop(k[,d]) -> v remove specified key and return the corresponding value.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPHeaderDict <a href=' /_vendor/requests/packages/urllib3/_collections.py#L208'>add</a>(key,val)</tt>	Adds a name value pair doesn't overwrite the value if it already exists.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPHeaderDict <a href=' /_vendor/requests/packages/urllib3/_collections.py#L231'>extend</a>()</tt>	Generic import function for any type of header-like object.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPHeaderDict <a href=' /_vendor/requests/packages/urllib3/_collections.py#L257'>getlist</a>(key)</tt>	Returns a list of all the values for the named field returns an.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPHeaderDict <a href=' /_vendor/requests/packages/urllib3/_collections.py#L291'>iteritems</a>()</tt>	Iterate over all header lines including duplicate ones.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPHeaderDict <a href=' /_vendor/requests/packages/urllib3/_collections.py#L298'>itermerged</a>()</tt>	Iterate over all headers merging duplicate ones together.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPHeaderDict <a href=' /_vendor/requests/packages/urllib3/_collections.py#L307'>from_httplib</a>(cls,message)</tt>	Read headers from a python 2 httplib message object.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.ConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L86'>close</a>()</tt>	Close all pooled connections and disable the pool.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L201'>_new_conn</a>()</tt>	Return a fresh :class httpconnection.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L214'>_get_conn</a>(timeout)</tt>	Get a connection will return a pooled connection if one is available.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L252'>_put_conn</a>(conn)</tt>	Put a connection back into the pool.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L282'>_validate_conn</a>(conn)</tt>	Called right before a request is made after the socket is created.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L292'>_get_timeout</a>(timeout)</tt>	Helper that always returns a :class urllib3 util timeout.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L304'>_raise_timeout</a>(err,url,timeout_value)</tt>	Is the error actually a timeout? will raise a readtimeout or pass.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L321'>_make_request</a>(conn,method,url,timeout)</tt>	Perform a request on a given urllib connection object taken from our pool.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L409'>close</a>()</tt>	Close all pooled connections and disable the pool.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L425'>is_same_host</a>(url)</tt>	Check if the given url is a member of the same host as this connection pool.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L446'>urlopen</a>(method,url,body,headers)</tt>	Get a connection from the pool and perform an http request this is the.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPSConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L777'>_prepare_conn</a>(conn)</tt>	Prepare the connection for :meth urllib3 util ssl_wrap_socket.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPSConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L794'>_prepare_proxy</a>(conn)</tt>	Establish tunnel connection early because otherwise httplib would improperly set host header to proxy's ip port.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPSConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L812'>_new_conn</a>()</tt>	Return a fresh :class httplib httpsconnection.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPSConnectionPool <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L836'>_validate_conn</a>(conn)</tt>	Called right before a request is made after the socket is created.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3. <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L855'>connection_from_url</a>(url)</tt>	Given a url return an :class connectionpool instance of its host.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3. <a href=' /_vendor/requests/packages/urllib3/connectionpool.py#L883'>_ipv6_host</a>(host)</tt>	Process ipv6 address literals.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3. <a href=' /_vendor/requests/packages/urllib3/__init__.py#L57'>add_stderr_logger</a>(level)</tt>	Helper for quickly adding a streamhandler to the logger useful for.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3. <a href=' /_vendor/requests/packages/urllib3/__init__.py#L93'>disable_warnings</a>(category)</tt>	Helper for quickly disabling all urllib3 warnings.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3. <a href=' /_vendor/requests/packages/urllib3/poolmanager.py#L43'>_default_key_normalizer</a>(key_class,request_context)</tt>	Create a pool key of type key_class for a request.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.PoolManager <a href=' /_vendor/requests/packages/urllib3/poolmanager.py#L132'>_new_pool</a>(scheme,host,port)</tt>	Create a new :class connectionpool based on host port and scheme.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.PoolManager <a href=' /_vendor/requests/packages/urllib3/poolmanager.py#L149'>clear</a>()</tt>	Empty our store of pools and direct them all to close.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.PoolManager <a href=' /_vendor/requests/packages/urllib3/poolmanager.py#L158'>connection_from_host</a>(host,port,scheme)</tt>	Get a :class connectionpool based on the host port and scheme.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.PoolManager <a href=' /_vendor/requests/packages/urllib3/poolmanager.py#L178'>connection_from_context</a>(request_context)</tt>	Get a :class connectionpool based on the request context.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.PoolManager <a href=' /_vendor/requests/packages/urllib3/poolmanager.py#L191'>connection_from_pool_key</a>(pool_key)</tt>	Get a :class connectionpool based on the provided pool key.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.PoolManager <a href=' /_vendor/requests/packages/urllib3/poolmanager.py#L212'>connection_from_url</a>(url)</tt>	Similar to :func urllib3 connectionpool connection_from_url but.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.PoolManager <a href=' /_vendor/requests/packages/urllib3/poolmanager.py#L224'>urlopen</a>(method,url,redirect)</tt>	Same as :meth urllib3 connectionpool httpconnectionpool urlopen.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.ProxyManager <a href=' /_vendor/requests/packages/urllib3/poolmanager.py#L333'>_set_proxy_headers</a>(url,headers)</tt>	Sets headers needed by proxies specifically the accept and host headers.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.ProxyManager <a href=' /_vendor/requests/packages/urllib3/poolmanager.py#L348'>urlopen</a>(method,url,redirect)</tt>	Same as http s connectionpool urlopen url must be absolute.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3. <a href=' /_vendor/requests/packages/urllib3/fields.py#L8'>guess_content_type</a>(filename,default)</tt>	Guess the "content-type" of a file.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3. <a href=' /_vendor/requests/packages/urllib3/fields.py#L22'>format_header_param</a>(name,value)</tt>	Helper function to format and quote a single header parameter.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.RequestField <a href=' /_vendor/requests/packages/urllib3/fields.py#L71'>from_tuples</a>(cls,fieldname,value)</tt>	A :class ~urllib3 fields requestfield factory from old-style tuple parameters.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.RequestField <a href=' /_vendor/requests/packages/urllib3/fields.py#L105'>_render_part</a>(name,value)</tt>	Overridable helper function to format a single header parameter.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.RequestField <a href=' /_vendor/requests/packages/urllib3/fields.py#L116'>_render_parts</a>(header_parts)</tt>	Helper function to format and quote a single header.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.RequestField <a href=' /_vendor/requests/packages/urllib3/fields.py#L138'>render_headers</a>()</tt>	Renders the headers for this request field.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.RequestField <a href=' /_vendor/requests/packages/urllib3/fields.py#L157'>make_multipart</a>(content_disposition,content_type,content_location)</tt>	Makes this request field into a multipart request field.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPResponse <a href=' /_vendor/requests/packages/urllib3/response.py#L157'>get_redirect_location</a>()</tt>	Should we redirect and where to?.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPResponse <a href=' /_vendor/requests/packages/urllib3/response.py#L190'>tell</a>()</tt>	Obtain the number of bytes pulled over the wire so far may differ from.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPResponse <a href=' /_vendor/requests/packages/urllib3/response.py#L198'>_init_length</a>(request_method)</tt>	Set initial length value for response content if available.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPResponse <a href=' /_vendor/requests/packages/urllib3/response.py#L246'>_init_decoder</a>()</tt>	Set-up the _decoder attribute if necessary.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPResponse <a href=' /_vendor/requests/packages/urllib3/response.py#L256'>_decode</a>(data,decode_content,flush_decoder)</tt>	Decode the data passed in and potentially flush the decoder.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPResponse <a href=' /_vendor/requests/packages/urllib3/response.py#L274'>_flush_decoder</a>()</tt>	Flushes the decoder should only be called if the decoder is actually.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPResponse <a href=' /_vendor/requests/packages/urllib3/response.py#L285'>_error_catcher</a>()</tt>	Catch low-level python exceptions instead re-raising urllib3 variants so that low-level exceptions are not leaked in the.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPResponse <a href=' /_vendor/requests/packages/urllib3/response.py#L342'>read</a>(amt,decode_content,cache_content)</tt>	Similar to :meth httplib httpresponse read, but with two additional.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPResponse <a href=' /_vendor/requests/packages/urllib3/response.py#L411'>stream</a>(amt,decode_content)</tt>	A generator wrapper for the read() method a call will block until.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPResponse <a href=' /_vendor/requests/packages/urllib3/response.py#L437'>from_httplib</a>(ResponseCls,r)</tt>	Given an :class httplib httpresponse instance r, return a.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPResponse <a href=' /_vendor/requests/packages/urllib3/response.py#L518'>supports_chunked_reads</a>()</tt>	Checks if the underlying file-like object looks like a httplib.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.HTTPResponse <a href=' /_vendor/requests/packages/urllib3/response.py#L563'>read_chunked</a>(amt,decode_content)</tt>	Similar to :meth httpresponse read, but with an additional.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L28'>__init__</a>()</tt>	Initialize an ordered dictionary signature is the same as for.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L44'>__setitem__</a>(key,value,dict_setitem)</tt>	Od __setitem__ i y <==> od[i]=y.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L54'>__delitem__</a>(key,dict_delitem)</tt>	Od __delitem__ y <==> del od[y].
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L63'>__iter__</a>()</tt>	Od __iter__() <==> iter od.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L71'>__reversed__</a>()</tt>	Od __reversed__() <==> reversed od.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L79'>clear</a>()</tt>	Od clear() -> none remove all items from od.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L91'>popitem</a>(last)</tt>	Od popitem() -> k v return and remove a key value pair.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L116'>keys</a>()</tt>	Od keys() -> list of keys in od.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L120'>values</a>()</tt>	Od values() -> list of values in od.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L124'>items</a>()</tt>	Od items() -> list of key value pairs in od.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L128'>iterkeys</a>()</tt>	Od iterkeys() -> an iterator over the keys in od.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L132'>itervalues</a>()</tt>	Od itervalues -> an iterator over the values in od.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L137'>iteritems</a>()</tt>	Od iteritems -> an iterator over the key value items in od.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L142'>update</a>()</tt>	Od update(e **f) -> none update od from dict/iterable e and f.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L177'>pop</a>(key,default)</tt>	Od pop(k[,d]) -> v remove specified key and return the corresponding value.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L190'>setdefault</a>(key,default)</tt>	Od setdefault(k[,d]) -> od get k d also set od[k]=d if k not in od.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L197'>__repr__</a>(_repr_running)</tt>	Od __repr__() <==> repr od.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L210'>__reduce__</a>()</tt>	Return state information for pickling.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L220'>copy</a>()</tt>	Od copy() -> a shallow copy of od.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L224'>fromkeys</a>(cls,iterable,value)</tt>	Od fromkeys(s[, v]) -> new ordered dictionary with keys from s.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L235'>__eq__</a>(other)</tt>	Od __eq__ y <==> od==y comparison to another od is order-sensitive.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L249'>viewkeys</a>()</tt>	Od viewkeys() -> a set-like object providing a view on od's keys.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L253'>viewvalues</a>()</tt>	Od viewvalues() -> an object providing a view on od's values.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.OrderedDict <a href=' /_vendor/requests/packages/urllib3/packages/ordered_dict.py#L257'>viewitems</a>()</tt>	Od viewitems() -> a set-like object providing a view on od's items.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages. <a href=' /_vendor/requests/packages/urllib3/packages/six.py#L75'>_add_doc</a>(func,doc)</tt>	Add documentation to a function.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages. <a href=' /_vendor/requests/packages/urllib3/packages/six.py#L80'>_import_module</a>(name)</tt>	Import module returning the module after the last dot.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages._SixMetaPathImporter <a href=' /_vendor/requests/packages/urllib3/packages/six.py#L209'>is_package</a>(fullname)</tt>	Return true if the named module is a package.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages. <a href=' /_vendor/requests/packages/urllib3/packages/six.py#L486'>add_move</a>(move)</tt>	Add an item to six moves.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages. <a href=' /_vendor/requests/packages/urllib3/packages/six.py#L491'>remove_move</a>(name)</tt>	Remove item from six moves.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages. <a href=' /_vendor/requests/packages/urllib3/packages/six.py#L800'>with_metaclass</a>(meta)</tt>	Create a base class with a metaclass.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages. <a href=' /_vendor/requests/packages/urllib3/packages/six.py#L812'>add_metaclass</a>(metaclass)</tt>	Class decorator for creating a class with a metaclass.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages. <a href=' /_vendor/requests/packages/urllib3/packages/six.py#L828'>python_2_unicode_compatible</a>(klass)</tt>	A decorator that defines __unicode__ and __str__ methods under python 2.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.backports. <a href=' /_vendor/requests/packages/urllib3/packages/backports/makefile.py#L14'>backport_makefile</a>(mode,buffering,encoding,errors)</tt>	Backport of socket makefile from python 3 5.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.ssl_match_hostname. <a href=' /_vendor/requests/packages/urllib3/packages/ssl_match_hostname/_implementation.py#L26'>_dnsname_match</a>(dn,hostname,max_wildcards)</tt>	Matching according to rfc 6125 section 6 4 3.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.ssl_match_hostname. <a href=' /_vendor/requests/packages/urllib3/packages/ssl_match_hostname/_implementation.py#L84'>_ipaddress_match</a>(ipname,host_ip)</tt>	Exact matching of ip addresses.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.packages.ssl_match_hostname. <a href=' /_vendor/requests/packages/urllib3/packages/ssl_match_hostname/_implementation.py#L96'>match_hostname</a>(cert,hostname)</tt>	Verify that *cert* (in decoded format as returned by sslsocket.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/selectors.py#L38'>_fileobj_to_fd</a>(fileobj)</tt>	Return a file descriptor from a file object if.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/selectors.py#L53'>_syscall_wrapper</a>(func,recalc_timeout)</tt>	Wrapper function for syscalls that could fail due to eintr.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.BaseSelector <a href=' /_vendor/requests/packages/urllib3/util/selectors.py#L154'>_fileobj_lookup</a>(fileobj)</tt>	Return a file descriptor from a file object.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.BaseSelector <a href=' /_vendor/requests/packages/urllib3/util/selectors.py#L174'>register</a>(fileobj,events,data)</tt>	Register a file object for a set of events to monitor.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.BaseSelector <a href=' /_vendor/requests/packages/urllib3/util/selectors.py#L188'>unregister</a>(fileobj)</tt>	Unregister a file object from being monitored.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.BaseSelector <a href=' /_vendor/requests/packages/urllib3/util/selectors.py#L196'>modify</a>(fileobj,events,data)</tt>	Change a registered file object monitored events and data.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.BaseSelector <a href=' /_vendor/requests/packages/urllib3/util/selectors.py#L215'>select</a>(timeout)</tt>	Perform the actual selection until some monitored file objects are ready or the timeout expires.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.BaseSelector <a href=' /_vendor/requests/packages/urllib3/util/selectors.py#L220'>close</a>()</tt>	Close the selector this must be called to ensure that all.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.BaseSelector <a href=' /_vendor/requests/packages/urllib3/util/selectors.py#L226'>get_key</a>(fileobj)</tt>	Return the key associated with a registered file object.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.BaseSelector <a href=' /_vendor/requests/packages/urllib3/util/selectors.py#L236'>get_map</a>()</tt>	Return a mapping of file objects to selector keys.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.BaseSelector <a href=' /_vendor/requests/packages/urllib3/util/selectors.py#L240'>_key_from_fd</a>(fd)</tt>	Return the key associated to a given file descriptor return none if it is not found.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/connection.py#L7'>is_connection_dropped</a>(conn)</tt>	Returns true if the connection is dropped and should be closed.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/connection.py#L36'>create_connection</a>(address,timeout,source_address,socket_options)</tt>	Connect to *address* and return the socket object.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/connection.py#L96'>allowed_gai_family</a>()</tt>	This function is designed to work in the context of getaddrinfo where family=socket.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/connection.py#L107'>_has_ipv6</a>(host)</tt>	Returns true if the system can bind an ipv6 address.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/wait.py#L9'>_wait_for_io_events</a>(socks,events,timeout)</tt>	Waits for io events to be available from a list of sockets or optionally a single socket if passed in.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/wait.py#L29'>wait_for_read</a>(socks,timeout)</tt>	Waits for reading to be available from a list of sockets or optionally a single socket if passed in.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/wait.py#L36'>wait_for_write</a>(socks,timeout)</tt>	Waits for writing to be available from a list of sockets or optionally a single socket if passed in.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Retry <a href=' /_vendor/requests/packages/urllib3/util/retry.py#L180'>from_int</a>(cls,retries,redirect,default)</tt>	Backwards-compatibility for the old retries format.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Retry <a href=' /_vendor/requests/packages/urllib3/util/retry.py#L194'>get_backoff_time</a>()</tt>	Formula for computing the current backoff.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Retry <a href=' /_vendor/requests/packages/urllib3/util/retry.py#L224'>get_retry_after</a>(response)</tt>	Get the value of retry-after in seconds.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Retry <a href=' /_vendor/requests/packages/urllib3/util/retry.py#L248'>sleep</a>(response)</tt>	Sleep between retry attempts.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Retry <a href=' /_vendor/requests/packages/urllib3/util/retry.py#L264'>_is_connection_error</a>(err)</tt>	Errors when we're fairly sure that the server did not receive the request so it should be safe to retry.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Retry <a href=' /_vendor/requests/packages/urllib3/util/retry.py#L270'>_is_read_error</a>(err)</tt>	Errors that occur after the request has been started so we should assume that the server began processing it.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Retry <a href=' /_vendor/requests/packages/urllib3/util/retry.py#L276'>_is_method_retryable</a>(method)</tt>	Checks if a given http method should be retried upon depending if it is included on the method whitelist.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Retry <a href=' /_vendor/requests/packages/urllib3/util/retry.py#L285'>is_retry</a>(method,status_code,has_retry_after)</tt>	Is this method/status code retryable? (based on whitelists and control.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Retry <a href=' /_vendor/requests/packages/urllib3/util/retry.py#L301'>is_exhausted</a>()</tt>	Are we out of retries?.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Retry <a href=' /_vendor/requests/packages/urllib3/util/retry.py#L310'>increment</a>(method,url,response,error)</tt>	Return a new retry object with incremented retry counters.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/request.py#L11'>make_headers</a>(keep_alive,accept_encoding,user_agent,basic_auth)</tt>	Shortcuts for generating request headers.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/request.py#L77'>set_file_position</a>(body,pos)</tt>	If a position is provided move file to that point.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/request.py#L95'>rewind_body</a>(body,body_pos)</tt>	Attempt to rewind body to a certain position.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Timeout <a href=' /_vendor/requests/packages/urllib3/util/timeout.py#L103'>_validate_timeout</a>(cls,value,name)</tt>	Check that a timeout attribute is valid.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Timeout <a href=' /_vendor/requests/packages/urllib3/util/timeout.py#L140'>from_float</a>(cls,timeout)</tt>	Create a new timeout from a legacy timeout value.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Timeout <a href=' /_vendor/requests/packages/urllib3/util/timeout.py#L156'>clone</a>()</tt>	Create a copy of the timeout object timeout properties are stored per-pool but each request needs a fresh.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Timeout <a href=' /_vendor/requests/packages/urllib3/util/timeout.py#L171'>start_connect</a>()</tt>	Start the timeout clock used during a connect() attempt :raises urllib3.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Timeout <a href=' /_vendor/requests/packages/urllib3/util/timeout.py#L182'>get_connect_duration</a>()</tt>	Gets the time elapsed since the call to :meth start_connect.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Timeout <a href=' /_vendor/requests/packages/urllib3/util/timeout.py#L195'>connect_timeout</a>()</tt>	Get the value to use when setting a connection timeout.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Timeout <a href=' /_vendor/requests/packages/urllib3/util/timeout.py#L213'>read_timeout</a>()</tt>	Get the value for the read timeout.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Url <a href=' /_vendor/requests/packages/urllib3/util/url.py#L29'>hostname</a>()</tt>	For backwards-compatibility with urlparse we're nice like that.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Url <a href=' /_vendor/requests/packages/urllib3/util/url.py#L34'>request_uri</a>()</tt>	Absolute path including the query string.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Url <a href=' /_vendor/requests/packages/urllib3/util/url.py#L44'>netloc</a>()</tt>	Network location including host and port.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util.Url <a href=' /_vendor/requests/packages/urllib3/util/url.py#L51'>url</a>()</tt>	Convert self into a url this function should more or less round-trip with :func.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/url.py#L95'>split_first</a>(s,delims)</tt>	Given a string and an iterable of delimiters split on the first found delimiter.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/url.py#L128'>parse_url</a>(url)</tt>	Given a url return a parsed :class url namedtuple best-effort is.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/url.py#L221'>get_host</a>(url)</tt>	Deprecated use :func parse_url instead.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/ssl_.py#L24'>_const_compare_digest_backport</a>(a,b)</tt>	Compare two digests of equal length in constant time.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/ssl_.py#L148'>assert_fingerprint</a>(cert,fingerprint)</tt>	Checks if given fingerprint matches the supplied certificate.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/ssl_.py#L175'>resolve_cert_reqs</a>(candidate)</tt>	Resolves the argument to a numeric constant which can be passed to the wrap_socket function/method from the ssl module.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/ssl_.py#L214'>create_urllib3_context</a>(ssl_version,cert_reqs,options,ciphers)</tt>	All arguments have the same meaning as ssl_wrap_socket.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/ssl_.py#L277'>ssl_wrap_socket</a>(sock,keyfile,certfile,cert_reqs)</tt>	All arguments except for server_hostname ssl_context and ca_cert_dir have the same meaning as they do when using :func ssl.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/response.py#L7'>is_fp_closed</a>(obj)</tt>	Checks whether a given file-like object is closed.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/response.py#L38'>assert_header_parsing</a>(headers)</tt>	Asserts whether all headers have been successfully parsed.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.util. <a href=' /_vendor/requests/packages/urllib3/util/response.py#L69'>is_response_to_head</a>(response)</tt>	Checks whether the request of a response has been a head-request.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.contrib. <a href=' /_vendor/requests/packages/urllib3/contrib/pyopenssl.py#L109'>inject_into_urllib3</a>()</tt>	Monkey-patch urllib3 with pyopenssl-backed ssl-support.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.contrib. <a href=' /_vendor/requests/packages/urllib3/contrib/pyopenssl.py#L121'>extract_from_urllib3</a>()</tt>	Undo monkey-patching by :func inject_into_urllib3.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.contrib. <a href=' /_vendor/requests/packages/urllib3/contrib/pyopenssl.py#L131'>_validate_dependencies_met</a>()</tt>	Verifies that pyopenssl's package-level dependencies have been met.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.contrib. <a href=' /_vendor/requests/packages/urllib3/contrib/pyopenssl.py#L151'>_dnsname_to_stdlib</a>(name)</tt>	Converts a dnsname subjectalternativename field to the form used by the standard library on the given python version.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.contrib. <a href=' /_vendor/requests/packages/urllib3/contrib/pyopenssl.py#L181'>get_subj_alt_name</a>(peer_cert)</tt>	Given an pyopenssl certificate provides all the subject alternative names.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.contrib.SOCKSConnection <a href=' /_vendor/requests/packages/urllib3/contrib/socks.py#L67'>_new_conn</a>()</tt>	Establish a new connection via the socks proxy.
<tt style='background-color:#E8E8E8;'> _vendor.requests.packages.urllib3.contrib.NTLMConnectionPool <a href=' /_vendor/requests/packages/urllib3/contrib/ntlmpool.py#L25'>__init__</a>(user,pw,authurl)</tt>	Authurl is a random url on the server that is protected by ntlm.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLTokenizer <a href=' /_vendor/html5lib/_tokenizer.py#L49'>__iter__</a>()</tt>	This is where the magic happens.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLTokenizer <a href=' /_vendor/html5lib/_tokenizer.py#L65'>consumeNumberEntity</a>(isHex)</tt>	This function returns either u+fffd or the character based on the decimal or hexadecimal representation.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLTokenizer <a href=' /_vendor/html5lib/_tokenizer.py#L217'>processEntityInAttribute</a>(allowedChar)</tt>	This method replaces the need for "entityinattributevaluestate".
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLTokenizer <a href=' /_vendor/html5lib/_tokenizer.py#L222'>emitCurrentToken</a>()</tt>	This method is a generic handler for emitting the tags it also sets.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLUnicodeInputStream <a href=' /_vendor/html5lib/_inputstream.py#L164'>__init__</a>(source)</tt>	Initialises the htmlinputstream.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLUnicodeInputStream <a href=' /_vendor/html5lib/_inputstream.py#L210'>openStream</a>(source)</tt>	Produces a file object from source.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLUnicodeInputStream <a href=' /_vendor/html5lib/_inputstream.py#L235'>position</a>()</tt>	Returns line col of the current position in the stream.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLUnicodeInputStream <a href=' /_vendor/html5lib/_inputstream.py#L240'>char</a>()</tt>	Read one character from the stream or queue if available return.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLUnicodeInputStream <a href=' /_vendor/html5lib/_inputstream.py#L320'>charsUntil</a>(characters,opposite)</tt>	Returns a string of characters from the stream up to but not including any character in 'characters' or eof.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLBinaryInputStream <a href=' /_vendor/html5lib/_inputstream.py#L392'>__init__</a>(source,override_encoding,transport_encoding,same_origin_parent_encoding)</tt>	Initialises the htmlinputstream.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLBinaryInputStream <a href=' /_vendor/html5lib/_inputstream.py#L438'>openStream</a>(source)</tt>	Produces a file object from source.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLBinaryInputStream <a href=' /_vendor/html5lib/_inputstream.py#L535'>detectBOM</a>()</tt>	Attempts to detect at bom at the start of the stream if.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLBinaryInputStream <a href=' /_vendor/html5lib/_inputstream.py#L569'>detectEncodingMeta</a>()</tt>	Report the encoding declared by the meta element.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.EncodingBytes <a href=' /_vendor/html5lib/_inputstream.py#L640'>skip</a>(chars)</tt>	Skip past a list of characters.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.EncodingBytes <a href=' /_vendor/html5lib/_inputstream.py#L663'>matchBytes</a>(bytes)</tt>	Look for a sequence of bytes at the start of a string if the bytes.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.EncodingBytes <a href=' /_vendor/html5lib/_inputstream.py#L674'>jumpTo</a>(bytes)</tt>	Look for the next sequence of bytes matching a given sequence if.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.EncodingParser <a href=' /_vendor/html5lib/_inputstream.py#L691'>__init__</a>(data)</tt>	String - the data to work on for encoding detection.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.EncodingParser <a href=' /_vendor/html5lib/_inputstream.py#L719'>handleComment</a>()</tt>	Skip over comments.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.EncodingParser <a href=' /_vendor/html5lib/_inputstream.py#L792'>getAttribute</a>()</tt>	Return a name value pair for the next attribute in the stream.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib. <a href=' /_vendor/html5lib/_inputstream.py#L908'>lookupEncoding</a>(encoding)</tt>	Return the python codec name corresponding to an encoding or none if the string doesn't correspond to a valid encoding.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib. <a href=' /_vendor/html5lib/html5parser.py#L31'>parse</a>(doc,treebuilder,namespaceHTMLElements)</tt>	Parse a string or file-like object into a tree.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLParser <a href=' /_vendor/html5lib/html5parser.py#L60'>__init__</a>(tree,strict,namespaceHTMLElements,debug)</tt>	Strict - raise an exception when a parse error is encountered tree - a treebuilder class controlling the type of tree that will be.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLParser <a href=' /_vendor/html5lib/html5parser.py#L128'>documentEncoding</a>()</tt>	The name of the character encoding that was used to decode the input stream.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLParser <a href=' /_vendor/html5lib/html5parser.py#L223'>parse</a>(stream)</tt>	Parse a html document into a well-formed tree stream - a filelike object or string containing the html to be parsed.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLParser <a href=' /_vendor/html5lib/html5parser.py#L238'>parseFragment</a>(stream)</tt>	Parse a html fragment into a well-formed tree fragment container - name of the element we're setting the innerhtml property.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLParser <a href=' /_vendor/html5lib/html5parser.py#L264'>normalizeToken</a>(token)</tt>	Html5 specific normalizations to the token stream.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.HTMLParser <a href=' /_vendor/html5lib/html5parser.py#L333'>parseRCDataRawtext</a>(token,contentType)</tt>	Generic rcdata/rawtext parsing algorithm.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treewalkers. <a href=' /_vendor/html5lib/treewalkers/__init__.py#L21'>getTreeWalker</a>(treeType,implementation)</tt>	Get a treewalker class for various types of tree with built-in support args.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treewalkers. <a href=' /_vendor/html5lib/treewalkers/__init__.py#L75'>pprint</a>(walker)</tt>	Pretty printer for tree walkers.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.Node <a href=' /_vendor/html5lib/treebuilders/base.py#L24'>__init__</a>(name)</tt>	Node representing an item in the tree.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.Node <a href=' /_vendor/html5lib/treebuilders/base.py#L54'>appendChild</a>(node)</tt>	Insert node as a child of the current node.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.Node <a href=' /_vendor/html5lib/treebuilders/base.py#L59'>insertText</a>(data,insertBefore)</tt>	Insert data as text in the current node positioned before the start of node insertbefore or to the end of the node's text.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.Node <a href=' /_vendor/html5lib/treebuilders/base.py#L65'>insertBefore</a>(node,refNode)</tt>	Insert node as a child of the current node before refnode in the list of child nodes.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.Node <a href=' /_vendor/html5lib/treebuilders/base.py#L71'>removeChild</a>(node)</tt>	Remove node from the children of the current node.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.Node <a href=' /_vendor/html5lib/treebuilders/base.py#L76'>reparentChildren</a>(newParent)</tt>	Move all the children of the current node to newparent.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.Node <a href=' /_vendor/html5lib/treebuilders/base.py#L86'>cloneNode</a>()</tt>	Return a shallow copy of the current node i e a node with the same.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.Node <a href=' /_vendor/html5lib/treebuilders/base.py#L92'>hasContent</a>()</tt>	Return true if the node has children or text false otherwise.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.TreeBuilder <a href=' /_vendor/html5lib/treebuilders/base.py#L238'>elementInActiveFormattingElements</a>(name)</tt>	Check if an element exists between the end of the active formatting elements and the last marker.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.TreeBuilder <a href=' /_vendor/html5lib/treebuilders/base.py#L270'>createElement</a>(token)</tt>	Create an element but don't insert it anywhere.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.TreeBuilder <a href=' /_vendor/html5lib/treebuilders/base.py#L281'>_setInsertFromTable</a>(value)</tt>	Switch the function used to insert an element from the.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.TreeBuilder <a href=' /_vendor/html5lib/treebuilders/base.py#L302'>insertElementTable</a>(token)</tt>	Create an element and insert it into the tree.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.TreeBuilder <a href=' /_vendor/html5lib/treebuilders/base.py#L318'>insertText</a>(data,parent)</tt>	Insert text data.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.TreeBuilder <a href=' /_vendor/html5lib/treebuilders/base.py#L333'>getTableMisnestedNodePosition</a>()</tt>	Get the foster parent element and sibling to insert before.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.TreeBuilder <a href=' /_vendor/html5lib/treebuilders/etree_lxml.py#L268'>getDocument</a>()</tt>	Return the final tree.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.TreeBuilder <a href=' /_vendor/html5lib/treebuilders/etree_lxml.py#L274'>getFragment</a>()</tt>	Return the final fragment.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.TreeBuilder <a href=' /_vendor/html5lib/treebuilders/etree_lxml.py#L265'>testSerializer</a>(node)</tt>	Serialize the subtree of node in the format required by unit tests.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders. <a href=' /_vendor/html5lib/treebuilders/etree_lxml.py#L134'>tostring</a>(element)</tt>	Serialize an element and its child nodes to a string.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders.TreeBuilder <a href=' /_vendor/html5lib/treebuilders/etree_lxml.py#L311'>insertRoot</a>(token)</tt>	Create the document root.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treebuilders. <a href=' /_vendor/html5lib/treebuilders/__init__.py#L36'>getTreeBuilder</a>(treeType,implementation)</tt>	Get a treebuilder class for various types of tree with built-in support treetype - the name of the tree type required case-insensitive.
<tt style='background-color:#E8E8E8;'> _vendor.html5lib.treeadapters. <a href=' /_vendor/html5lib/treeadapters/sax.py#L13'>to_sax</a>(walker,handler)</tt>	Call sax-like content handler based on treewalker walker.
<tt style='background-color:#E8E8E8;'> utils.InterruptibleMixin <a href=' /utils/ui.py#L82'>__init__</a>()</tt>	Save the original sigint handler for later.
<tt style='background-color:#E8E8E8;'> utils.InterruptibleMixin <a href=' /utils/ui.py#L98'>finish</a>()</tt>	Restore the original sigint handler after finishing.
<tt style='background-color:#E8E8E8;'> utils.InterruptibleMixin <a href=' /utils/ui.py#L108'>handle_sigint</a>(signum,frame)</tt>	Call self finish() before delegating to the original sigint handler.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/outdated.py#L95'>pip_version_check</a>(session,options)</tt>	Check for an update for pip.
<tt style='background-color:#E8E8E8;'> utils.Hashes <a href=' /utils/hashes.py#L25'>__init__</a>(hashes)</tt>	:param hashes a dict of algorithm names pointing to lists of allowed.
<tt style='background-color:#E8E8E8;'> utils.Hashes <a href=' /utils/hashes.py#L32'>check_against_chunks</a>(chunks)</tt>	Check good hashes against ones built from iterable of chunks of data.
<tt style='background-color:#E8E8E8;'> utils.Hashes <a href=' /utils/hashes.py#L58'>check_against_file</a>(file)</tt>	Check good hashes against a file-like object raise hashmismatch if none match.
<tt style='background-color:#E8E8E8;'> utils.Hashes <a href=' /utils/hashes.py#L70'>__nonzero__</a>()</tt>	Return whether i know any known-good hashes.
<tt style='background-color:#E8E8E8;'> utils.MissingHashes <a href=' /utils/hashes.py#L85'>__init__</a>()</tt>	Don't offer the hashes kwarg.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/encoding.py#L19'>auto_decode</a>(data)</tt>	Check a bytes string for a bom to correctly detect the encoding fallback to locale.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/appdirs.py#L14'>user_cache_dir</a>(appname)</tt>	Return full path to the user-specific cache dir for this application.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/appdirs.py#L62'>user_data_dir</a>(appname,roaming)</tt>	Return full path to the user-specific data dir for this application.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/appdirs.py#L114'>user_config_dir</a>(appname,roaming)</tt>	Return full path to the user-specific config dir for this application.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/appdirs.py#L147'>site_config_dirs</a>(appname)</tt>	Return a list of potential user-shared config dirs for this application.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/appdirs.py#L187'>_get_win_folder_from_registry</a>(csidl_name)</tt>	This is a fallback technique at best i'm not sure if using the.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/appdirs.py#L241'>_win_path_to_bytes</a>(path)</tt>	Encode windows paths to bytes only used on python 2.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/logging.py#L28'>indent_log</a>(num)</tt>	A context manager which will cause the log output to be indented for any log messages emitted inside it.
<tt style='background-color:#E8E8E8;'> utils.IndentingFormatter <a href=' /utils/logging.py#L47'>format</a>(record)</tt>	Calls the standard formatter but will indent all of the log messages by our current indentation level.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/glibc.py#L9'>glibc_version_string</a>()</tt>	Returns glibc version string or none if not using glibc.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L80'>ensure_dir</a>(path)</tt>	Os path makedirs without eexist.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L105'>rmtree_errorhandler</a>(func,path,exc_info)</tt>	On windows the files in svn are read-only so when rmtree() tries to.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L120'>display_path</a>(path)</tt>	Gives the display value for a given path making it relative to cwd if possible.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L132'>backup_dir</a>(dir,ext)</tt>	Figure out the name of a directory to back up the given dir to (adding.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L150'>ask</a>(message,options)</tt>	Ask the message interactively with the given possible responses.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L180'>is_installable_dir</a>(path)</tt>	Return true if path is a directory containing a setup py file.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L190'>is_svn_page</a>(html)</tt>	Returns true if the page appears to be the index page of an svn repository.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L203'>read_chunks</a>(file,size)</tt>	Yield pieces of data from a file-like object until eof.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L223'>has_leading_dir</a>(paths)</tt>	Returns true if all the paths have the same leading path name (i.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L238'>normalize_path</a>(path,resolve_symlinks)</tt>	Convert a path to its canonical case-normalized absolute version.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L251'>splitext</a>(path)</tt>	Like os path splitext but take off tar too.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L260'>renames</a>(old,new)</tt>	Like os renames(), but handles renaming across devices.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L277'>is_local</a>(path)</tt>	Return true if path is within sys prefix if we're running in a virtualenv.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L289'>dist_is_local</a>(dist)</tt>	Return true if given distribution object is installed locally (i.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L300'>dist_in_usersite</a>(dist)</tt>	Return true if given distribution is installed in user site.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L308'>dist_in_site_packages</a>(dist)</tt>	Return true if given distribution is installed in sysconfig.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L318'>dist_is_editable</a>(dist)</tt>	Is distribution an editable install?.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L327'>get_installed_distributions</a>(local_only,skip,include_editables,editables_only)</tt>	Return a list of installed distribution objects.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L384'>egg_link_path</a>(dist)</tt>	Return the path for the egg-link file if it exists otherwise none.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L421'>dist_location</a>(dist)</tt>	Get the site-packages location of this distribution generally.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L435'>get_terminal_size</a>()</tt>	Returns a tuple x y representing the width x and the height x in characters of the terminal window.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L465'>current_umask</a>()</tt>	Get the current umask which involves having to set it temporarily.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L472'>unzip_file</a>(filename,location,flatten)</tt>	Unzip the file (with path filename) to the destination location all.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L515'>untar_file</a>(filename,location)</tt>	Untar the file (with path filename) to the destination location.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L726'>read_text_file</a>(filename)</tt>	Return the contents of *filename*.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L787'>captured_output</a>(stream_name)</tt>	Return a context manager used by captured_stdout/stdin/stderr that temporarily replaces the sys stream *stream_name* with a stringio.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L802'>captured_stdout</a>()</tt>	Capture the output of sys stdout.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L834'>get_installed_version</a>(dist_name,lookup_dirs)</tt>	Get the installed version of dist_name avoiding pkg_resources cache.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/__init__.py#L854'>consume</a>(iterator)</tt>	Consume an iterable at c speed.
<tt style='background-color:#E8E8E8;'> utils. <a href=' /utils/packaging.py#L17'>check_requires_python</a>(requires_python)</tt>	Check if the python version in use match the requires_python specifier.
<tt style='background-color:#E8E8E8;'> commands.CompletionCommand <a href=' /commands/completion.py#L71'>run</a>(options,args)</tt>	Prints the completion code of the given shell.
<tt style='background-color:#E8E8E8;'> commands. <a href=' /commands/hash.py#L51'>_hash_of_file</a>(path,algorithm)</tt>	Return the hash digest of a file.
<tt style='background-color:#E8E8E8;'> commands. <a href=' /commands/show.py#L47'>search_packages_info</a>(query)</tt>	Gather details from installed distributions print distribution name.
<tt style='background-color:#E8E8E8;'> commands. <a href=' /commands/show.py#L120'>print_results</a>(distributions,list_files,verbose)</tt>	Print the informations from installed distributions found.
<tt style='background-color:#E8E8E8;'> commands.ListCommand <a href=' /commands/list.py#L114'>_build_package_finder</a>(options,index_urls,session)</tt>	Create a package finder appropriate to this list command.
<tt style='background-color:#E8E8E8;'> commands. <a href=' /commands/list.py#L294'>format_for_columns</a>(pkgs,options)</tt>	Convert the package data into something usable by output_package_listing_columns.
<tt style='background-color:#E8E8E8;'> commands. <a href=' /commands/__init__.py#L52'>get_summaries</a>(ordered)</tt>	Yields sorted command name command summary tuples.
<tt style='background-color:#E8E8E8;'> commands. <a href=' /commands/__init__.py#L64'>get_similar_commands</a>(name)</tt>	Command name auto-correct.
<tt style='background-color:#E8E8E8;'> commands. <a href=' /commands/search.py#L67'>transform_hits</a>(hits)</tt>	The list from pypi is really a list of versions we want a list of.
<tt style='background-color:#E8E8E8;'> operations. <a href=' /operations/check.py#L20'>get_missing_reqs</a>(dist,installed_dists)</tt>	Return all of the requirements of dist that aren't present in installed_dists.
<tt style='background-color:#E8E8E8;'> operations. <a href=' /operations/check.py#L34'>get_incompatible_reqs</a>(dist,installed_dists)</tt>	Return all of the requirements of dist that are present in installed_dists, but have incompatible versions.
