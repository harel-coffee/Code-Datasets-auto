geometry		compact	vertices indices tolerance	compact vertices and indices within given tolerance
geometry		normals	vertices indices	compute normals over a triangulated surface
geometry		create_cube		generate vertices & indices for a filled and outlined cube returns
geometry		create_plane	width height width_segments height_segments	generate vertices & indices for a filled and outlined plane
geometry		create_box	width height depth width_segments	generate vertices & indices for a filled and outlined box
geometry		create_sphere	rows cols depth radius	create a sphere parameters
geometry		create_cylinder	rows cols radius length	create a cylinder parameters
geometry		create_cone	cols radius length	create a cone parameters
geometry		create_arrow	rows cols radius length	create a 3d arrow using a cylinder plus cone parameters
geometry		create_grid_mesh	xs ys zs	generate vertices and indices for an implicitly connected mesh
geometry		surface	func umin umax ucount	computes the parameterization of a parametric surface
geometry	Rect	padded	padding	return a new rect padded smaller by padding on all sides parameters
geometry	Rect	normalized		return a rect covering the same area but with height and width guaranteed to be positive
geometry	Rect	flipped	x y	return a rect with the same bounds but with axes inverted parameters
geometry	Rect	__add__	a	return this rect translated by *a*
geometry	Rect	contains	x y	query if the rectangle contains points parameters
geometry	Rect	_transform_in		return array of coordinates that can be mapped by transform classes
geometry	Rect	_transform_out	coords	return a new rect from coordinates mapped after _transform_in()
geometry	Triangulation	triangulate		do the triangulation
geometry	Triangulation	_edge_event	i j	force edge i j to be present in mesh
geometry	Triangulation	_find_cut_triangle	edge	return the triangle that has edge[0] as one of its vertices and is bisected by edge
geometry	Triangulation	_edge_in_front	edge	return the index where *edge* appears in the current front
geometry	Triangulation	_edge_opposite_point	tri i	given a triangle return the edge that is opposite point i
geometry	Triangulation	_adjacent_tri	edge i	given a triangle formed by edge and i return the triangle that shares edge
geometry	Triangulation	_tri_from_edge	edge	return the only tri that contains *edge* if two tris share this
geometry	Triangulation	_edges_in_tri_except	tri edge	return the edges in *tri*, excluding *edge*
geometry	Triangulation	_edge_below_front	edge front_index	return true if *edge* is below the current front
geometry	Triangulation	_intersected_edge	edges cut_edge	given a list of *edges*, return the first that is intersected by *cut_edge*
geometry	Triangulation	_find_edge_intersections		return a dictionary containing for each edge in self edges a list
geometry	Triangulation	_projection	a b c	return projection of a b onto a c arguments are point locations not indexes
geometry	Triangulation	_edges_intersect	edge1 edge2	return 1 if edges intersect completely endpoints excluded
geometry	Triangulation	_intersection_matrix	lines	return a 2d array of intercepts such that intercepts[i j] is the intercept of lines[i] onto lines[j]
geometry	Triangulation	_intersect_edge_arrays	lines1 lines2	return the intercepts of all lines defined in *lines1* as they intersect all lines in *lines2*
geometry	Triangulation	_orientation	edge point	returns +1 if edge[0]->point is clockwise from edge[0]->edge[1], -1 if counterclockwise and 0 if parallel
geometry		triangulate	vertices	triangulate a set of vertices parameters
geometry		curve3_bezier	p1 p2 p3	generate the vertices for a quadratic bezier curve
geometry		curve4_bezier	p1 p2 p3 p4	generate the vertices for a third order bezier curve
geometry	MeshData	get_faces		array nf 3 of vertex indices three per triangular face
geometry	MeshData	get_edges	indexed	edges of the mesh parameters
geometry	MeshData	set_faces	faces	set the faces parameters
geometry	MeshData	get_vertices	indexed	get the vertices parameters
geometry	MeshData	get_bounds		get the mesh bounds returns
geometry	MeshData	set_vertices	verts indexed reset_normals	set the mesh vertices parameters
geometry	MeshData	has_face_indexed_data		return true if this object already has vertex positions indexed
geometry	MeshData	has_vertex_color		return true if this data set has vertex color information
geometry	MeshData	has_face_color		return true if this data set has face color information
geometry	MeshData	get_face_normals	indexed	get face normals parameters
geometry	MeshData	get_vertex_normals	indexed	get vertex normals parameters
geometry	MeshData	get_vertex_colors	indexed	get vertex colors parameters
geometry	MeshData	set_vertex_colors	colors indexed	set the vertex color array parameters
geometry	MeshData	get_face_colors	indexed	get the face colors parameters
geometry	MeshData	set_face_colors	colors indexed	set the face color array parameters
geometry	MeshData	n_faces		the number of faces in the mesh
geometry	MeshData	n_vertices		the number of vertices in the mesh
geometry	MeshData	get_vertex_faces		list mapping each vertex index to a list of face indices that use it
geometry	MeshData	save		serialize this mesh to a string appropriate for disk storage returns
geometry	MeshData	restore	state	restore the state of a mesh previously saved using save() parameters
geometry	TorusKnot	first_component		the vertices of the first component line of the torus knot or link
geometry	TorusKnot	components		a list of the vertices in each line of the torus knot or link
geometry	TorusKnot	num_components		the number of component lines in the torus link this is equal
geometry	TorusKnot	q		the q parameter of the torus knot or link
geometry	TorusKnot	p		the p parameter of the torus knot or link
geometry	TorusKnot	minor_radius		the minor radius of the torus
geometry	TorusKnot	major_radius		the major radius of the torus
geometry	TorusKnot	num_points		the number of points in the vertices returned for each knot/link
geometry		_fast_cross_3d	x y	compute cross product between list of 3d vectors much faster than np
geometry		_calculate_normals	rr tris	efficiently compute vertex normals for triangulated surface
geometry		resize	image shape kind	resize an image parameters
geometry		isosurface	data level	generate isosurface from volumetric data using marching cubes algorithm
geometry	PolygonData	faces		return an array nf 3 of vertex indexes three per triangular face in the mesh
geometry	PolygonData	faces	f	if vertices and faces are incompatible this will generate vertices from these faces and set them
geometry	PolygonData	vertices		return an array nf 3 of vertices
geometry	PolygonData	vertices	v	if vertices and faces are incompatible this will generate faces from these vertices and set them
geometry	PolygonData	edges		return an array nv 2 of vertex indices
geometry	PolygonData	edges	e	ensures that all edges are valid
geometry	PolygonData	convex_hull		return an array of vertex indexes representing the convex hull
geometry	PolygonData	triangulate		triangulates the set of vertices and stores the triangles in faces and the convex hull in convex_hull
geometry	PolygonData	add_vertex	vertex	adds given vertex and retriangulates to generate new faces
geometry		isocurve	data level connected extend_to_edge	generate isocurve from 2d data using marching squares algorithm
color		get_color_names		get the known color names returns
color		get_color_dict		get the known colors returns
color		_vector_or_scalar	x type	convert an object to either a scalar or a row or column vector
color		_vector	x type	convert an object to a row or column vector
color		_normalize	x cmin cmax clip	normalize an array from the range [cmin cmax] to [0 1], with optional clipping
color		_mix_simple	a b x	mix b with proportion x with a
color		smoothstep	edge0 edge1 x	performs smooth hermite interpolation between 0 and 1 when edge0 < x < edge1
color		_glsl_mix	controls	generate a glsl template function from a given interpolation patterns and control points
color		_process_glsl_template	template colors	replace $color_i by color #i in the glsl template
color	BaseColormap	map	item	return a rgba array for the requested items
color		_default_controls	ncolors	generate linearly spaced control points from a set of colors
color	Colormap	interpolation		the interpolation mode of the colormap
color	Colormap	map	x	the python mapping function from the [0 1] interval to a list of rgba colors
color	CubeHelixColormap	__init__	start rot gamma reverse	cube helix colormap a full implementation of dave green's "cubehelix" for matplotlib
color		get_colormap	name	obtain a colormap some colormaps can have additional configuration parameters
color		get_colormaps		return the list of colormap names
color		_string_to_rgb	color	convert user string or hex color to color array length 3 or 4
color		_user_to_rgba	color expand clip	convert color s from any set of fmts (str/hex/arr) to rgb a array
color		_array_clip_val	val	helper to turn val into array and clip between 0 and 1
color	ColorArray	copy		return a copy
color	ColorArray	_name	cls	helper to get the class name once it's been created
color	ColorArray	extend	colors	extend a colorarray with new colors parameters
color	ColorArray	rgba		nx4 array of rgba floats
color	ColorArray	rgba	val	set the color using an nx4 array of rgba floats
color	ColorArray	rgb		nx3 array of rgb floats
color	ColorArray	rgb	val	set the color using an nx3 array of rgb floats
color	ColorArray	RGBA		nx4 array of rgba uint8s
color	ColorArray	RGBA	val	set the color using an nx4 array of rgba uint8 values
color	ColorArray	RGB		nx3 array of rgba uint8s
color	ColorArray	RGB	val	set the color using an nx3 array of rgb uint8 values
color	ColorArray	alpha		length-n array of alpha floats
color	ColorArray	alpha	val	set the color using alpha
color	ColorArray	hex		numpy array with n elements each one a hex triplet string
color	ColorArray	hex	val	set the color values using a list of hex strings
color	ColorArray	hsv		nx3 array of hsv floats
color	ColorArray	hsv	val	set the color values using an nx3 array of hsv floats
color	ColorArray	_hsv		nx3 array of hsv floats
color	ColorArray	value		length-n array of color hsv values
color	ColorArray	value	val	set the color using length-n array of from hsv
color	ColorArray	lighter	dv copy	produce a lighter color if possible parameters
color	ColorArray	darker	dv copy	produce a darker color if possible parameters
color	Color	__init__	color alpha clip	parse input type and set attribute
color	Color	is_blank		boolean indicating whether the color is invisible
color		_check_color_dim	val	ensure val is nx(n_col), usually nx3
color		_hex_to_rgba	hexs	convert hex to rgba permitting alpha values in hex
color		_rgb_to_hex	rgbs	convert rgb to hex triplet
color		_rgb_to_hsv	rgbs	convert nx3 or nx4 rgb to hsv
color		_hsv_to_rgb	hsvs	convert nx3 or nx4 hsv to rgb
color		_lab_to_rgb	labs	convert nx3 or nx4 lab to rgb
visuals	MeshVisual	set_data	vertices faces vertex_colors face_colors	set the mesh data parameters
visuals	MeshVisual	mode		the triangle mode used to draw this mesh
visuals	MeshVisual	mesh_data		the mesh data
visuals	MeshVisual	color		the uniform color for this mesh
visuals	MeshVisual	shading		the shading method used
visuals	RegularPolygonVisual	sides		the number of sides in the regular polygon
visuals		_frenet_frames	points closed	calculates and returns the tangents normals and binormals for the tube
visuals	SpectrogramVisual	freqs		the spectrogram frequencies
visuals	AxisVisual	_vec		vector in the direction of the axis line
visuals	Ticker	_tile_ticks	frac tickvec	tiles tick marks along the axis
visuals	Ticker	_get_tick_frac_labels		get the major ticks minor ticks and major labels
visuals	MaxNLocator	__init__	nbins steps trim integer	keyword args *nbins*
visuals	SphereVisual	mesh		the vispy visuals meshvisual that used to fil in
visuals	SphereVisual	border		the vispy visuals meshvisual that used to draw the border
visuals		iso_mesh_line	vertices tris vertex_data levels	generate an isocurve from vertex data in a surface mesh
visuals	IsolineVisual	levels		the threshold at which the isocurves are constructed from the data
visuals	IsolineVisual	data		the mesh data
visuals	IsolineVisual	set_data	vertices tris data	set the data parameters
visuals	IsolineVisual	set_color	color	set the color parameters
visuals	IsolineVisual	_compute_iso_color		compute linevisual color from level index and corresponding level
visuals	VolumeVisual	set_data	vol clim	set the volume data
visuals	VolumeVisual	clim		the contrast limits that were applied to the volume data
visuals	VolumeVisual	method		the render method to use current options are
visuals	VolumeVisual	threshold		the threshold value to apply for the isosurface render method
visuals	VolumeVisual	relative_step_size		the relative step size used during raycasting
visuals	VolumeVisual	_create_vertex_data		create and set positions and texture coords from the given shape we have six faces with 1 quad 2 triangles each resulting in
visuals	RectangleVisual	center		the center of the ellipse
visuals	RectangleVisual	center	center	the center of the ellipse
visuals	RectangleVisual	height		the height of the rectangle
visuals	RectangleVisual	width		the width of the rectangle
visuals	RectangleVisual	radius		the radius of curvature of rounded corners
visuals	BaseVisual	get_transform	map_from map_to	return a transform mapping between any two coordinate systems
visuals	BaseVisual	view		return a new view of this visual
visuals	BaseVisual	attach	filt view	attach a filter to this visual
visuals	BaseVisual	detach	filt view	detach a filter
visuals	BaseVisual	bounds	axis view	get the bounds of the visual parameters
visuals	BaseVisual	update		update the visual
visuals	Visual	set_gl_state	preset	define the set of gl state parameters to use when drawing parameters
visuals	Visual	update_gl_state		modify the set of gl state parameters to use when drawing parameters
visuals	Visual	_compute_bounds	axis view	return the min max bounding values of this visual along *axis* in the local coordinate system
visuals	Visual	_prepare_draw	view	this visual is about to be drawn
visuals	Visual	_prepare_transforms	view	this method is called whenever the transformsystem instance is changed for a view
visuals	Visual	_get_hook	shader name	return a functionchain that filters may use to modify the program
visuals	Visual	attach	filt view	attach a filter to this visual each filter modifies the appearance or behavior of the visual
visuals	Visual	detach	filt view	detach a filter
visuals	CompoundVisual	add_subvisual	visual	add a subvisual parameters
visuals	CompoundVisual	remove_subvisual	visual	remove a subvisual parameters
visuals	CompoundVisual	draw		draw the visual
visuals	CompoundVisual	set_gl_state	preset	define the set of gl state parameters to use when drawing parameters
visuals	CompoundVisual	update_gl_state		modify the set of gl state parameters to use when drawing parameters
visuals	CompoundVisual	attach	filt view	attach a filter to this visual each filter modifies the appearance or behavior of the visual
visuals	CompoundVisual	detach	filt view	detach a filter
visuals	LinearRegionVisual	set_data	pos color	set the data parameters
visuals	LinearRegionVisual	_compute_bounds	axis view	return the min max bounding values of this visual along *axis* in the local coordinate system
visuals	LinearRegionVisual	_prepare_draw	view	this method is called immediately before each draw
visuals	SurfacePlotVisual	set_data	x y z colors	update the data in this surface plot
visuals	IsosurfaceVisual	level		the threshold at which the isosurface is constructed from the 3d data
visuals	IsosurfaceVisual	set_data	data vertex_colors face_colors color	set the scalar array data parameters
visuals	CubeVisual	mesh		the vispy visuals meshvisual that used to fill in
visuals	CubeVisual	border		the vispy visuals meshvisual that used to draw the border
visuals	PolygonVisual	pos		the vertex position of the polygon
visuals	PolygonVisual	color		the color of the polygon
visuals	PolygonVisual	border_color		the border color of the polygon
visuals	PolygonVisual	mesh		the vispy visuals meshvisual that is owned by the polygonvisual
visuals	PolygonVisual	border		the vispy visuals linevisual that is owned by the polygonvisual
visuals	_BorderVisual	visual_border_width		the border width in visual coordinates
visuals	_BorderVisual	border_width		the width of the border
visuals	_BorderVisual	border_color		the color of the border in pixels
visuals	_BorderVisual	pos		the center of the bordervisual
visuals	_BorderVisual	halfdim		the half-dimensions measured from the center of the bordervisual
visuals	LinePlotVisual	set_data	data	set the line data parameters
visuals	MarkersVisual	set_data	pos symbol size edge_width	set the data used to display this visual
visuals	_CoreColorBarVisual	_update		rebuilds the shaders and repositions the objects
visuals	_CoreColorBarVisual	cmap		the colormap of the colorbar
visuals	ColorBarVisual	_update		rebuilds the shaders and repositions the objects
visuals	ColorBarVisual	_update_positions		updates the positions of the colorbars and labels
visuals	ColorBarVisual	_calc_positions	center halfdim border_width orientation	calculate the text centeritions given the colorbar parameters
visuals	ColorBarVisual	pos		the position of the text anchor in the local coordinate frame
visuals	ColorBarVisual	cmap		the colormap of the colorbar
visuals	ColorBarVisual	clim		the data limits of the colorbar
visuals	ColorBarVisual	label		the vispy visuals textvisual associated with the label
visuals	ColorBarVisual	ticks		the vispy visuals textvisual associated with the ticks
visuals	ColorBarVisual	border_width		the width of the border around the colorbar in pixels
visuals	ColorBarVisual	border_color		the color of the border around the colorbar in pixels
visuals	ColorBarVisual	orientation		the orientation of the colorbar
visuals	ColorBarVisual	size		the size of the colorbar
visuals	ImageVisual	set_data	image	set the data parameters
visuals	ImageVisual	_build_interpolation		rebuild the _data_lookup_fn using different interpolations within
visuals	ImageVisual	_build_vertex_data		rebuild the vertex buffers used for rendering the image when using the subdivide method
visuals	ImageVisual	_update_method	view	decide which method to use for *view* and configure it accordingly
visuals	ScrollingLinesVisual	set_pos_offset	po	set the array of position offsets for each line strip
visuals	ScrollingLinesVisual	set_color	color	set the array of colors for each line strip
visuals	ScrollingLinesVisual	roll_data	data	append new data to the right side of every line strip and remove as much data from the left
visuals	ScrollingLinesVisual	set_data	index data	set the complete data for a single line strip
visuals	BoxVisual	mesh		the vispy visuals meshvisual that used to fill in
visuals	BoxVisual	border		the vispy visuals meshvisual that used to draw the border
visuals	InfiniteLineVisual	set_data	pos color	set the data parameters
visuals	InfiniteLineVisual	_compute_bounds	axis view	return the min max bounding values of this visual along *axis* in the local coordinate system
visuals	InfiniteLineVisual	_prepare_draw	view	this method is called immediately before each draw
visuals	IsocurveVisual	levels		the threshold at which the isocurve is constructed from the 2d data
visuals	IsocurveVisual	set_data	data	set the scalar array data parameters
visuals	IsocurveVisual	_get_verts_and_connect	paths	retrieve vertices and connects from given paths-list
visuals	IsocurveVisual	_compute_iso_line		compute linevisual vertices connects and color-index
visuals	IsocurveVisual	_compute_iso_color		compute linevisual color from level index and corresponding color
visuals	EllipseVisual	center		the center of the ellipse
visuals	EllipseVisual	center	center	the center of the ellipse
visuals	EllipseVisual	radius		the start radii of the ellipse
visuals	EllipseVisual	start_angle		the start start_angle of the ellipse
visuals	EllipseVisual	span_angle		the angular span of the ellipse
visuals	EllipseVisual	num_segments		the number of segments in the ellipse
visuals	GridMeshVisual	set_data	xs ys zs colors	update the mesh data
visuals.filters	PickingFilter	color		the rgba color that will be drawn to the framebuffer for visuals that use this filter
visuals.filters	Clipper	bounds		the clipping boundaries
visuals.filters	Clipper	transform		the transform that maps from framebuffer coordinates to clipping coordinates
visuals.shaders	ModularProgram	build_if_needed		reset shader source if necesssary
visuals.shaders	Compiler	__getitem__	item	return the name of the specified object if it has been assigned one
visuals.shaders	Compiler	compile	pretty	compile all code and return a dict {name code} where the keys are determined by the keyword arguments passed to __init__()
visuals.shaders	Compiler	_rename_objects_fast		rename all objects quickly to guaranteed-unique names using the id() of each object
visuals.shaders	Compiler	_rename_objects_pretty		rename all objects like "name_1" to avoid conflicts objects are
visuals.shaders	Compiler	_is_global	obj	return true if *obj* should be declared in the global namespace
visuals.shaders	Compiler	_name_available	obj name shaders	return true if *name* is available for *obj* in *shaders*
visuals.shaders	Compiler	_assign_name	obj name shaders	assign *name* to *obj* in *shaders*
visuals.shaders	MultiProgram	add_program	name	create a program and add it to this multiprogram
visuals.shaders	MultiProgram	vert		a wrapper around all vertex shaders contained in this multiprogram
visuals.shaders	MultiProgram	frag		a wrapper around all fragmet shaders contained in this multiprogram
visuals.shaders	MultiShader	_new_program	p	new program was added to the multiprogram update items in the shader
visuals.shaders	ShaderObject	create	obj ref	convert *obj* to a new shaderobject if the output is a variable
visuals.shaders	ShaderObject	name		the name of this shader object
visuals.shaders	ShaderObject	definition	obj_names	return the glsl definition for this object use *obj_names* to
visuals.shaders	ShaderObject	expression	obj_names	return the glsl expression used to reference this object inline
visuals.shaders	ShaderObject	dependencies	sort	return all dependencies required to use this object the last item
visuals.shaders	ShaderObject	static_names		return a list of names that are declared in this object's definition not including the name of the object itself
visuals.shaders	ShaderObject	_add_dep	dep	increment the reference count for *dep* if this is a new
visuals.shaders	ShaderObject	_remove_dep	dep	decrement the reference count for *dep* if the reference count
visuals.shaders	ShaderObject	_dep_changed	dep code_changed value_changed	called when a dependency's expression has changed
visuals.shaders	ShaderObject	changed	code_changed value_changed	inform dependents that this shaderobject has changed
visuals.shaders	ShaderObject	compile		return a compilation of this object and its dependencies
visuals.shaders	Variable	name		the name of this variable
visuals.shaders	Variable	vtype		the type of variable const uniform attribute varying or inout
visuals.shaders	Variable	dtype		the type of data float int vec mat
visuals.shaders	Variable	value		the value associated with this variable
visuals.shaders	Variable	state_id		return a unique id that changes whenever the state of the variable has changed
visuals.shaders	Varying	value		the value associated with this variable
visuals.shaders	Varying	link	var	link this varying to another object from which it will derive its dtype
visuals.shaders		parse_function_signature	code	return the name arguments and return type of the first function definition found in *code*
visuals.shaders		find_functions	code	return a list of name arguments return type for all function definition2 found in *code*
visuals.shaders		find_prototypes	code	return a list of signatures for each function prototype declared in *code*
visuals.shaders		find_program_variables	code	return a dict describing program variables : {'var_name': ('uniform|attribute|varying', type),
visuals.shaders		find_template_variables	code	return a list of template variables found in *code*
visuals.shaders	Function	__setitem__	key val	setting of replacements through a dict-like syntax
visuals.shaders	Function	__getitem__	key	return a reference to a program variable from this function
visuals.shaders	Function	__call__		set the signature for this function and return an functioncall object
visuals.shaders	Function	name		the function name the name may be mangled in the final code
visuals.shaders	Function	args		list of input arguments in the function signature : [(arg_name arg_type),
visuals.shaders	Function	rtype		the return type of this function
visuals.shaders	Function	code		the template code used to generate the definition for this function
visuals.shaders	Function	replace	str1 str2	set verbatim code replacement it is strongly recommended to use function['$foo'] = 'bar' where
visuals.shaders	Function	_parse_template_vars		find all template variables in self _code excluding the
visuals.shaders	Function	_get_replaced_code	names	return code with new name expressions and replacements applied
visuals.shaders	Function	_clean_code	code	return *code* with indentation and leading/trailing blank lines removed
visuals.shaders	MainFunction	add_chain	var	create a new chainfunction and attach to $var
visuals.shaders	FunctionChain	append	function update	append a new function to the end of this chain
visuals.shaders	FunctionChain	insert	index function update	insert a new function into the chain at *index*
visuals.shaders	FunctionChain	remove	function update	remove a function from the chain
visuals.shaders	StatementList	add	item position	add an item to the list unless it is already present
visuals.shaders	StatementList	remove	item	remove an item from the list
visuals.collections	ArrayList	__init__	data itemsize dtype sizeable	create a new buffer using given data and sizes or dtype parameters
visuals.collections	ArrayList	data		the array's elements in memory
visuals.collections	ArrayList	size		number of base elements in memory
visuals.collections	ArrayList	itemsize		individual item sizes
visuals.collections	ArrayList	dtype		describes the format of the elements in the buffer
visuals.collections	ArrayList	reserve	capacity	set current capacity of the underlying array
visuals.collections	ArrayList	__len__		x __len__() <==> len x
visuals.collections	ArrayList	__getitem__	key	x __getitem__ y <==> x[y]
visuals.collections	ArrayList	__setitem__	key data	x __setitem__ i y <==> x[i]=y
visuals.collections	ArrayList	__delitem__	key	x __delitem__ y <==> del x[y]
visuals.collections	ArrayList	insert	index data itemsize	insert data before index parameters
visuals.collections	ArrayList	append	data itemsize	append data to the end
visuals.collections	AggPathCollection	__init__	user_dtype transform vertex fragment	initialize the collection
visuals.collections	AggPathCollection	append	P closed itemsize	append a new set of vertices to the collection
visuals.collections		dtype_reduce	dtype level depth	try to reduce dtype up to a given level when it is possible
visuals.collections		fetchcode	utype prefix	generate the glsl code needed to retrieve fake uniform values from a texture
visuals.collections	AggSegmentCollection	__init__	user_dtype transform vertex fragment	initialize the collection
visuals.collections	AggSegmentCollection	append	P0 P1 itemsize	append a new set of segments to the collection
visuals.collections		next_power_of_2	n	return next power of 2 greater than or equal to n
visuals.collections	Item	__init__	parent key vertices indices	create an item from an existing collection
visuals.collections	Item	__getitem__	key	get a specific uniforms value
visuals.collections	Item	__setitem__	key value	set a specific uniforms value
visuals.collections	BaseCollection	__len__		x __len__() <==> len x
visuals.collections	BaseCollection	__delitem__	index	x __delitem__ y <==> del x[y]
visuals.collections	BaseCollection	__setitem__	key data	x __setitem__ i y <==> x[i]=y
visuals.collections	BaseCollection	_compute_texture_shape	size	compute uniform texture shape
visuals.collections	BaseCollection	_update		update vertex buffers & texture
visuals.collections	AggPointCollection	__init__	user_dtype transform vertex fragment	initialize the collection
visuals.collections	RawTriangleCollection	append	points indices	append a new set of vertices to the collection
visuals.collections	RawPathCollection	__init__	user_dtype transform vertex fragment	initialize the collection
visuals.collections	RawPathCollection	append	P closed itemsize	append a new set of vertices to the collection
visuals.collections	AggFastPathCollection	__init__	user_dtype transform vertex fragment	initialize the collection
visuals.collections	AggFastPathCollection	append	P closed itemsize	append a new set of vertices to the collection
visuals.collections	AggFastPathCollection	bake	P key closed itemsize	given a path p return the baked vertices as they should be copied in the collection if the path has already been appended
visuals.collections	RawPolygonCollection	append	points	append a new set of vertices to the collection
visuals.collections	Collection	view	transform viewport	return a view on the collection using provided transform
visuals.collections	RawPointCollection	__init__	user_dtype transform vertex fragment	initialize the collection
visuals.collections	RawPointCollection	append	P itemsize	append a new set of vertices to the collection
visuals.collections	RawSegmentCollection	__init__	user_dtype transform vertex fragment	initialize the collection
visuals.collections	RawSegmentCollection	append	P0 P1 itemsize	append a new set of segments to the collection
visuals.graphs		_straight_line_vertices	adjacency_mat node_coords directed	generate the vertices for straight lines between nodes
visuals.graphs		_rescale_layout	pos scale	normalize the given coordinate list to the range [0 scale]
visuals.graphs	GraphVisual	set_data	adjacency_mat	set the data parameters
visuals.graphs.layouts		circular	adjacency_mat directed	places all nodes on a single circle
visuals.graphs.layouts		random	adjacency_mat directed random_state	place the graph nodes at random places
visuals.graphs.layouts	fruchterman_reingold	__call__	adjacency_mat directed	starts the calculation of the graph layout
visuals.graphs.layouts		_calculate_delta_pos	adjacency_arr pos t optimal	helper to calculate the delta position
visuals.graphs.layouts		get_layout	name	retrieve a graph layout some graph layouts accept extra options
visuals.line	LineVisual	method		the current drawing method
visuals.line	LineVisual	set_data	pos color width connect	set the data used to draw this visual
visuals.line	LineVisual	_compute_bounds	axis view	get the bounds parameters
visuals.line	_AggLineVisual	_agg_bake	cls vertices color closed	bake a list of 2d vertices for rendering them as thick line each line
visuals.line	ArrowVisual	set_data	pos color width connect	set the data used for this visual parameters
visuals.transforms		arg_to_array	func	decorator to convert argument to array
visuals.transforms		as_vec4	obj default	convert obj to 4-element vector (numpy array with shape[-1] == 4) parameters
visuals.transforms		arg_to_vec4	func self_ arg	decorator for converting argument to vec4 format suitable for 4x4 matrix multiplication
visuals.transforms	TransformCache	get	path	get a transform from the cache that maps along *path*, which must be a list of transforms to apply in reverse order (last transform is
visuals.transforms	TransformCache	roll		increase the age of all items in the cache by 1 items whose age
visuals.transforms	LogTransform	base		*base* is a tuple x y z containing the log base that should be applied to each axis of the input vector
visuals.transforms	MagnifyTransform	center		the x y center point of the transform
visuals.transforms	MagnifyTransform	mag		the scale factor used in the central region of the transform
visuals.transforms	MagnifyTransform	radii		the inner and outer radii of the circular area bounding the transform
visuals.transforms	NullTransform	map	coords	map coordinates parameters
visuals.transforms	NullTransform	imap	coords	inverse map coordinates parameters
visuals.transforms	STTransform	map	coords	map coordinates parameters
visuals.transforms	STTransform	imap	coords	invert map coordinates parameters
visuals.transforms	STTransform	move	move	change the translation of this transform by the amount given
visuals.transforms	STTransform	zoom	zoom center mapped	update the transform such that its scale factor is changed but the specified center point is left unchanged
visuals.transforms	STTransform	from_mapping	cls x0 x1	create an sttransform from the given mapping see set_mapping for details
visuals.transforms	STTransform	set_mapping	x0 x1 update	configure this transform such that it maps points x0 => x1 parameters
visuals.transforms	MatrixTransform	map	coords	map coordinates parameters
visuals.transforms	MatrixTransform	imap	coords	inverse map coordinates parameters
visuals.transforms	MatrixTransform	translate	pos	translate the matrix the translation is applied *after* the transformations already present
visuals.transforms	MatrixTransform	scale	scale center	scale the matrix about a given origin
visuals.transforms	MatrixTransform	rotate	angle axis	rotate the matrix by some angle about a given axis
visuals.transforms	MatrixTransform	set_mapping	points1 points2	set to a 3d transformation matrix that maps points1 onto points2
visuals.transforms	MatrixTransform	set_ortho	l r b t	set ortho transform parameters
visuals.transforms	MatrixTransform	set_perspective	fov aspect near far	set the perspective parameters
visuals.transforms	MatrixTransform	set_frustum	l r b t	set the frustum parameters
visuals.transforms	ChainTransform	transforms		the list of transform that make up the transform chain
visuals.transforms	ChainTransform	simplified		a simplified representation of the same transformation
visuals.transforms	ChainTransform	map	coords	map coordinates parameters
visuals.transforms	ChainTransform	imap	coords	inverse map coordinates parameters
visuals.transforms	ChainTransform	append	tr	add a new transform to the end of this chain
visuals.transforms	ChainTransform	prepend	tr	add a new transform to the beginning of this chain
visuals.transforms	ChainTransform	_subtr_changed	ev	one of the internal transforms changed propagate the signal
visuals.transforms	SimplifiedChainTransform	source_changed	event	generate a simplified chain by joining adjacent transforms
visuals.transforms	BaseTransform	map	obj	return *obj* mapped through the forward transformation
visuals.transforms	BaseTransform	imap	obj	return *obj* mapped through the inverse transformation
visuals.transforms	BaseTransform	inverse		the inverse of this transform
visuals.transforms	BaseTransform	dynamic		boolean flag that indicates whether this transform is expected to change frequently
visuals.transforms	BaseTransform	shader_map		return a shader function that accepts only a single vec4 argument and defines new attributes / uniforms supplying the function with
visuals.transforms	BaseTransform	_shader_object		this method allows transforms to be assigned directly to shader template variables
visuals.transforms	BaseTransform	update		called to inform any listeners that this transform has changed
visuals.transforms	BaseTransform	__mul__	tr	transform multiplication returns a new transform that is equivalent to the two operands performed in series
visuals.transforms	PanZoomTransform	attach	canvas	attach this tranform to a canvas parameters
visuals.transforms	PanZoomTransform	on_resize	event	resize handler parameters
visuals.transforms	PanZoomTransform	on_mouse_move	event	mouse move handler parameters
visuals.transforms	PanZoomTransform	on_mouse_wheel	event	mouse wheel handler parameters
visuals.transforms	TransformSystem	configure	viewport fbo_size fbo_rect canvas	automatically configure the transformsystem * canvas_transform maps from the canvas logical pixel
visuals.transforms	TransformSystem	canvas		the canvas being drawn to
visuals.transforms	TransformSystem	dpi		physical resolution of the document coordinate system dots per inch
visuals.transforms	TransformSystem	visual_transform		transform mapping from visual local coordinate frame to scene coordinate frame
visuals.transforms	TransformSystem	scene_transform		transform mapping from scene coordinate frame to document coordinate frame
visuals.transforms	TransformSystem	document_transform		transform mapping from document coordinate frame to the framebuffer physical pixel coordinate frame
visuals.transforms	TransformSystem	canvas_transform		transform mapping from canvas coordinate frame to framebuffer coordinate frame
visuals.transforms	TransformSystem	framebuffer_transform		transform mapping from pixel coordinate frame to rendering coordinate frame
visuals.transforms	TransformSystem	get_transform	map_from map_to	return a transform mapping between any two coordinate systems
visuals.text	SDFRenderer	render_to_texture	data texture offset size	render a sdf to a texture at a given offset and size parameters
visuals.text	SDFRenderer	_render_edf	orig_tex	render an edf to a texture
visuals.text	TextureFont	ratio		ratio of the initial high-res to final stored low-res glyph
visuals.text	TextureFont	slop		extra space along each glyph edge due to sdf borders
visuals.text	TextureFont	_load_char	char	build and store a glyph corresponding to an individual character parameters
visuals.text	FontManager	get_font	face bold italic	get a font described by face and size
visuals.text		_text_to_vbo	text font anchor_x anchor_y	convert text characters to vbo
visuals.text	TextVisual	text		the text string
visuals.text	TextVisual	font_size		the font size in points of the text
visuals.text	TextVisual	color		the color of the text
visuals.text	TextVisual	rotation		the rotation of the text clockwise in degrees
visuals.text	TextVisual	pos		the position of the text anchor in the local coordinate frame
util		use	app gl	set the usage options for vispy specify what app backend and gl backend to use
util		run_subprocess	command return_code	run command using subprocess popen
util		gaussian_filter	data sigma	drop-in replacement for scipy ndimage gaussian_filter
util		eq	a b	the great missing equivalence function guaranteed evaluation to a single bool value
util	Frozen	freeze		freeze the object so that only existing properties can be set
util	Frozen	unfreeze		unfreeze the object so that additional properties can be added
util		translate	offset dtype	translate by an offset x y z
util		scale	s dtype	non-uniform scaling along the x y and z axes parameters
util		rotate	angle axis dtype	the 3x3 rotation matrix for rotation about a vector
util		ortho	left right bottom top	create orthographic projection matrix parameters
util		frustum	left right bottom top	create view frustum parameters
util		perspective	fovy aspect znear zfar	create perspective projection matrix parameters
util		affine_map	points1 points2	find a 3d transformation matrix that maps points1 onto points2
util	Profiler	__new__	cls msg disabled delayed	optionally create a new profiler based on caller's qualname
util	Profiler	__call__	msg	register or print a new message with timing information
util	Profiler	finish	msg	add a final message flush the message list if no parent profiler
util		_get_vispy_caller		helper to get vispy calling function from the stack
util	_VispyStreamHandler	_vispy_emit_match_andor_record	record	log message emitter that optionally matches and/or records
util		set_log_level	verbose match return_old	convenience function for setting the logging level parameters
util		log_exception	level tb_skip	send an exception and traceback to the logger
util		_handle_exception	ignore_callback_errors print_callback_errors obj cb_event	helper for prining errors in callbacks see eventemitter
util		_serialize_buffer	buffer array_serialization	serialize a numpy array
util	Event	source		the object that the event applies to i e the source of the event
util	Event	sources		list of objects that the event applies to (i e are or have
util	Event	handled		this boolean property indicates whether the event has already been acted on by an event handler
util	Event	blocked		this boolean property indicates whether the event will be delivered to event callbacks
util	Event	__str__		shorter string representation
util	EventEmitter	ignore_callback_errors		whether exceptions during callbacks will be caught by the emitter this allows it to continue invoking other callbacks if an error
util	EventEmitter	print_callback_errors		print a message and stack trace if a callback raises an exception valid values are "first" only show first instance "reminders" (show
util	EventEmitter	callback_refs		the set of callback references
util	EventEmitter	callbacks		the set of callbacks
util	EventEmitter	source		the object that events generated by this emitter apply to
util	EventEmitter	connect	callback ref position before	connect this emitter to a new callback
util	EventEmitter	disconnect	callback	disconnect a callback from this emitter
util	EventEmitter	__call__		__call__(**kwargs) invoke all callbacks for this emitter
util	EventEmitter	blocked	callback	return boolean indicating whether the emitter is blocked for the given callback
util	EventEmitter	block	callback	block this emitter any attempts to emit an event while blocked
util	EventEmitter	unblock	callback	unblock this emitter see :func event eventemitter block
util	EventEmitter	blocker	callback	return an eventblocker to be used in 'with' statements notes
util	EmitterGroup	__getitem__	name	return the emitter assigned to the specified name
util	EmitterGroup	__setitem__	name emitter	alias for emittergroup add(name=emitter)
util	EmitterGroup	add	auto_connect	add one or more eventemitter instances to this emitter group
util	EmitterGroup	emitters		list of current emitters in this group
util	EmitterGroup	__iter__		iterates over the names of emitters in this group
util	EmitterGroup	block_all		block all emitters in this group
util	EmitterGroup	unblock_all		unblock all emitters in this group
util	EmitterGroup	connect	callback ref position before	connect the callback to the event group the callback will receive
util	EmitterGroup	disconnect	callback	disconnect the callback from this group see
util	Quaternion	copy		create an exact copy of this quaternion
util	Quaternion	norm		returns the norm of the quaternion
util	Quaternion	_normalize		make the quaternion unit length
util	Quaternion	normalize		returns a normalized unit length version of the quaternion
util	Quaternion	conjugate		obtain the conjugate of the quaternion
util	Quaternion	inverse		returns q conjugate()/q norm()**2
util	Quaternion	exp		returns the exponent of the quaternion
util	Quaternion	log		returns the natural logarithm of the quaternion
util	Quaternion	__mul__	q2	multiply two quaternions
util	Quaternion	rotate_point	p	rotate a point instance using this quaternion
util	Quaternion	get_matrix		create a 4x4 homography matrix that represents the rotation of the quaternion
util	Quaternion	get_axis_angle		get the axis-angle representation of the quaternion
util	Quaternion	create_from_axis_angle	cls angle ax ay	classmethod to create a quaternion from an axis-angle representation
util	Quaternion	create_from_euler_angles	cls rx ry rz	classmethod to create a quaternion given the euler angles
util		load_data_file	fname directory force_download	get a standard vispy demo data file parameters
util	ProgressBar	update	cur_value mesg	update progressbar with current value of process parameters
util	ProgressBar	update_with_increment_value	increment_value mesg	update progressbar with the value of the increment instead of the current value of process as in update()
util		_chunk_read	response local_file chunk_size initial_size	download a file chunk by chunk and show advancement can also be used when resuming downloads over http
util		_chunk_write	chunk local_file progress	write a chunk to file and update the progress bar
util		_fetch_file	url file_name print_destination	load requested file downloading it if needed or requested parameters
util		sizeof_fmt	num	turn number of bytes into human-readable str
util		stft	x n_fft step fs	compute the stft parameters
util		fft_freqs	n_fft fs	return frequencies for dft parameters
util		_init		create global config object parse command flags
util		_parse_command_line_arguments		transform vispy specific command line args to vispy config
util		_get_vispy_app_dir		helper to get the default directory for storing vispy data
util		get_config_keys		the config keys known by vispy and their allowed data types
util		_get_config_fname		helper for the vispy config file
util		_load_config		helper to load prefs from ~/ vispy/vispy json
util		save_config		save configuration keys to vispy config file parameters
util		set_data_dir	directory create save	set vispy data download directory parameters
util		_enable_profiling		start profiling and register callback to print stats when the program exits
util		sys_info	fname overwrite	get relevant system and debugging information parameters
util		fix_osmesa_gl_lib		when using osmesa the gl functions from libgl are included in libosmesa
util		winTime		return the current time in seconds with high precision (windows version use manager
util		unixTime		return the current time in seconds with high precision (unix version use manager
util	Key	name		the primary name of the key
util.dpi		get_dpi	raise_error	get screen dpi from the os parameters
util.dpi		_get_dpi_from	cmd pattern func	match pattern against the output of func passing the results as floats to func
util.dpi		get_dpi	raise_error	get screen dpi from the os parameters
util.dpi		get_dpi	raise_error	get screen dpi from the os parameters
util.fonts		list_fonts		list system fonts returns
util.fonts		_get_k_p_a	font left right	this actually calculates the kerning + advance
util.fonts		_load_glyph	f char glyphs_dict	load glyph from font into dict
util.fonts		_get_vispy_font_filename	face bold italic	fetch a remote vispy font
testing		assert_image_approved	image standard_file message	check that an image test result matches a pre-approved standard
testing		assert_image_match	im1 im2 min_corr px_threshold	check that two images match
testing		make_diff_image	im1 im2	return image array showing the differences between im1 and im2
testing		downsample	data n axis	downsample by averaging points together across axis
testing		get_test_data_repo		return the path to a git repository with the required commit checked out
testing		git_status	path	return a string listing all changes to the working tree in a git repository
testing		git_commit_id	path ref	return the commit id of *ref* in the git repository at *path*
testing		_safe_rep	obj short	helper for assert_* ports
testing		_safe_str	obj	helper for assert_* ports
testing		_format_msg	msg std_msg	helper for assert_* ports
testing		nottest	func	decorator to mark a function or method as *not* a test
testing		has_application	backend has capable	determine if a suitable app backend exists
testing		requires_application	backend has capable	return a decorator for tests that require an application
testing		requires_img_lib		decorator for tests that require an image library
testing		has_ipython	version	function that checks the presence of ipython
testing		has_matplotlib	version	determine if mpl is a usable version
testing		TestingCanvas	bgcolor size dpi decorate	class wrapper to avoid importing scene until necessary
testing		run_tests_if_main		run tests in a given file if it is run as a script
testing		_unit	mode extra_arg_string coverage	run unit tests using a particular mode
testing		_docs		test docstring paramters using vispy/utils/tests/test_docstring_parameters
testing		_check_line_endings		check all files in the repository for cr characters
testing		_examples	fnames_str	run examples and make sure they work
testing		test	label extra_arg_string coverage	test vispy software parameters
io		load_iris		load the iris dataset
io		load_crate		load an image of a crate returns
io		pack_unit	value	packs float values between [0 1] into 4 unsigned int8
io		pack_ieee	value	packs float ieee binary representation into 4 unsigned int8
io		load_spatial_filters	packed	load spatial-filters kernel parameters
io		read_mesh	fname	read mesh data from file
io		write_mesh	fname vertices faces normals	write mesh data to file
io	WavefrontReader	read	cls fname	read fname fmt this classmethod is the entry point for reading obj files
io	WavefrontReader	readLine		the method that reads a line and processes it
io	WavefrontReader	readTuple	line n	reads a tuple of numbers e g vertices normals or teture coords
io	WavefrontReader	readFace	line	each face consists of three or more sets of indices each set
io	WavefrontReader	finish		converts gathere lists to numpy arrays and creates basemesh instance
io	WavefrontWriter	write	cls fname vertices faces	this classmethod is the entry point for writing mesh data to obj
io	WavefrontWriter	writeLine	text	simple writeline function to write a line of code to the file
io	WavefrontWriter	writeTuple	val what	writes a tuple of numbers on one line
io	WavefrontWriter	writeFace	val what	write the face info to the net line
io	WavefrontWriter	writeMesh	vertices faces normals values	write the given mesh instance
io		_make_png	data level	convert numpy array to png byte array
io		read_png	filename	read a png file to rgb8 or rgba8 unlike imread this requires no external dependencies
io		write_png	filename data	write a png file unlike imsave this requires no external dependencies
io		imread	filename format	read image data from disk requires imageio or pil
io		imsave	filename im format	save image data to disk requires imageio or pil
io		_check_img_lib		utility to search for imageio or pil
app		set_interactive	enabled app	activate the ipython hook for vispy if the app is not specified the
app	VisPyInputHook	enable	app	activate event loop integration with this vispy application
app		use_app	backend_name call_reuse	get/create the default application object it is safe to call this function multiple times as long as
app		create		create the native application
app		run		enter the native gui event loop
app		quit		quit the native gui event loop
app		process_events		process all pending gui events if the mainloop is not running this should be done regularly to
app	Timer	app		the vispy application instance on which this timer is based
app	Timer	start	interval iterations	start the timer
app	Timer	stop		stop the timer
app	Timer	native		the native timer on which this timer is based
app	Timer	connect	callback	alias for self events timeout connect()
app	Timer	disconnect	callback	alias for self events timeout disconnect()
app	BaseCanvasBackend	_process_backend_kwargs	kwargs	simple utility to retrieve kwargs in predetermined order
app	QtCanvas	update		call update() on both this widget and the internal canvas
app	Application	backend_name		the name of the gui backend that this app wraps
app	Application	backend_module		the module object that defines the backend
app	Application	process_events		process all pending gui events if the mainloop is not
app	Application	sleep	duration_sec	sleep for the given duration in seconds
app	Application	create		create the native application
app	Application	is_interactive		determine if the user requested interactive mode
app	Application	run	allow_interactive	enter the native gui event loop
app	Application	reuse		called when the application is reused in an interactive session
app	Application	quit		quit the native gui event loop
app	Application	native		the native gui application instance
app	Application	_use	backend_name	select a backend by name see class docstring for details
app	Canvas	create_native		create the native widget if not already done so if the widget
app	Canvas	context		the opengl context of the native widget it gives access to opengl functions to call on this canvas object
app	Canvas	app		the vispy application instance on which this canvas is based
app	Canvas	native		the native widget object on which this canvas is based
app	Canvas	dpi		the physical resolution of the canvas in dots per inch
app	Canvas	connect	fun	connect a function to an event the name of the function
app	Canvas	size		the size of canvas/window
app	Canvas	physical_size		the physical size of the canvas/window which may differ from the
app	Canvas	pixel_scale		the ratio between the number of logical pixels or 'points', and the physical pixels on the device
app	Canvas	position		the position of canvas/window relative to screen
app	Canvas	title		the title of canvas/window
app	Canvas	fps		the fps of canvas/window as the rate that events draw is emitted
app	Canvas	set_current	event	make this the active gl canvas parameters
app	Canvas	swap_buffers	event	swap gl buffers such that the offscreen buffer becomes visible parameters
app	Canvas	show	visible run	show or hide the canvas parameters
app	Canvas	update	event	inform the backend that the canvas needs to be redrawn parameters
app	Canvas	close		close the canvas notes
app	Canvas	_update_fps	event	update the fps after every window
app	Canvas	measure_fps	window callback	measure the current fps sets the update window connects the draw event to update_fps
app	Canvas	render		render the canvas to an offscreen buffer and return the image array
app	MouseEvent	is_dragging		indicates whether this event is part of a mouse drag operation
app	MouseEvent	drag_events		return a list of all mouse events in the current drag operation
app	MouseEvent	trail		return an n 2 array of mouse coordinates for every event in the current mouse drag operation
app.backends		_set_config	config	set gl configuration
app.backends		_set_config	c	set gl configuration for template
app.backends		_set_config	c	set gl configuration for sdl2
app.backends		_set_config	c	set the opengl configuration
app.backends		_get_qpoint_pos	pos	return the coordinates of a qpointf object
app.backends	CanvasBackendEgl	get_window_id		get the window id of a pyside widget might also work for pyqt4
app.backends		_set_config	c	set gl configuration
app.backends		_get_mods	evt	helper to extract list of mods from event
app.backends		_process_key	evt	helper to convert from wx keycode to vispy keycode
app.backends		_extract_buffers	commands	extract all data buffers from the list of glir commands and replace them by buffer pointers {buffer <buffer_index>}
app.backends		_serialize_item	item	internal function serialize native types
app.backends		_serialize_command	command_modified	serialize a single glir modified command the modification relates
app.backends		create_glir_message	commands array_serialization	create a json-serializable message of glir commands numpy arrays
app.backends		_set_config	c	set gl configuration for glfw
app.backends	CanvasBackend	_process_mod	key down	process possible keyboard modifiers glfw provides "mod" with many callbacks but not critically the
app.backends.ipython		_stop_timers	canvas	stop all timers in a canvas
plot	PlotWidget	histogram	data bins color orientation	calculate and show a histogram of data parameters
plot	PlotWidget	image	data cmap clim fg_color	show an image parameters
plot	PlotWidget	mesh	vertices faces vertex_colors face_colors	show a 3d mesh parameters
plot	PlotWidget	plot	data color symbol line_kind	plot a series of data using lines and markers parameters
plot	PlotWidget	spectrogram	x n_fft step fs	calculate and show a spectrogram parameters
plot	PlotWidget	volume	vol clim method threshold	show a 3d volume parameters
plot	PlotWidget	surface	zdata	show a 3d surface plot
plot	PlotWidget	colorbar	cmap position label clim	show a colorbar parameters
plot	Fig	plot_widgets		list of the associated plotwidget instances
plot	Fig	__getitem__	idxs	get an axis
glsl		find	name	locate a filename into the shader library
glsl		get	name	retrieve code from the given filename
glsl	SpatialFilter	weight	x	return filter weight for a distance x
glsl	Bessel	besj	x n	function besj calculates bessel function of first kind of order n arguments
gloo		as_enum	enum	turn a possibly string enum into an integer enum
gloo	_GlirQueueShare	command		send a command see the command spec at
gloo	_GlirQueueShare	set_verbose	verbose	set verbose or not if true the glir commands are printed
gloo	_GlirQueueShare	show	filter	print the list of commands currently in the queue if filter is
gloo	_GlirQueueShare	clear		pop the whole queue and associated queues and return a list of commands
gloo	_GlirQueueShare	flush	parser	flush all current commands to the glir interpreter
gloo	_GlirQueueShare	_filter	commands parser	filter data/size commands that are overridden by a size command
gloo	GlirQueue	command		send a command see the command spec at
gloo	GlirQueue	set_verbose	verbose	set verbose or not if true the glir commands are printed
gloo	GlirQueue	clear		pop the whole queue and associated queues and return a list of commands
gloo	GlirQueue	associate	queue	merge this queue with another
gloo	GlirQueue	flush	parser	flush all current commands to the glir interpreter
gloo		convert_shaders	convert shaders	modify shading code so that we can write code once and make it run "everywhere"
gloo		as_es2_command	command	modify a desktop command so it works on es2
gloo	BaseGlirParser	is_remote		whether the code is executed remotely i e gloo gl cannot
gloo	BaseGlirParser	convert_shaders		whether to convert shading code valid values are 'es2' and
gloo	BaseGlirParser	parse	commands	parse the glir commands or sent them away
gloo	GlirParser	_parse	command	parse a single command
gloo	GlirParser	parse	commands	parse a list of commands
gloo	GlirParser	get_object	id_	get the object with the given id or none if it does not exist
gloo	GlirParser	_gl_initialize		deal with compatibility desktop does not have sprites enabled by default
gloo	GlirProgram	activate		avoid overhead in calling gluseprogram with same arg
gloo	GlirProgram	deactivate		avoid overhead in calling gluseprogram with same arg
gloo	GlirProgram	set_shaders	vert frag	this function takes care of setting the shading code and compiling+linking it into a working program object that is ready
gloo	GlirProgram	_get_active_attributes_and_uniforms		retrieve active attributes and uniforms to be able to check that all uniforms/attributes are set by the user
gloo	GlirProgram	_parse_error	error	parses a single glsl error and extracts the linenr and description other glir implementations may omit this
gloo	GlirProgram	_get_error	code errors indentation	get error and show the faulty line + some context other glir implementations may omit this
gloo	GlirProgram	set_texture	name value	set a texture sampler value is the id of the texture to link
gloo	GlirProgram	set_uniform	name type_ value	set a uniform value value is assumed to have been checked
gloo	GlirProgram	set_attribute	name type_ value	set an attribute value value is assumed to have been checked
gloo	GlirProgram	draw	mode selection	draw program in given mode with given selection indexbuffer or first count
gloo	GlirTexture	_get_alignment	width	determines a textures byte alignment
gloo		_check_pyopengl_3D		helper to ensure users have opengl for 3d texture support for now
gloo	Program	set_shaders	vert frag	set the vertex and fragment shaders
gloo	Program	shaders		source code for vertex and fragment shader
gloo	Program	variables		a list of the variables in use by the current program the list is obtained by parsing the glsl source code
gloo	Program	_parse_variables_from_code		parse uniforms attributes and varyings from the source code
gloo	Program	bind	data	bind a vertexbuffer that has structured data parameters
gloo	Program	_process_pending_variables		try to apply the variables that were set but not known yet
gloo	Program	__setitem__	name data	setting uniform or attribute data this method requires the information about the variable that we
gloo	Program	__getitem__	name	get user-defined data for attributes and uniforms
gloo	Program	draw	mode indices check_error	draw the attribute arrays in the specified mode
gloo		get_current_canvas		proxy for context get_current_canvas to avoud circular import
gloo		_check_valid	key val valid	helper to check valid options
gloo		_to_args	x	convert to args representation
gloo		_check_conversion	key valid_dict	check for existence of key in dict return value or raise error
gloo	BaseGlooFunctions	set_viewport		set the opengl viewport this is a wrapper for gl
gloo	BaseGlooFunctions	set_depth_range	near far	set depth values parameters
gloo	BaseGlooFunctions	set_front_face	mode	set which faces are front-facing parameters
gloo	BaseGlooFunctions	set_cull_face	mode	set front back or both faces to be culled parameters
gloo	BaseGlooFunctions	set_line_width	width	set line width parameters
gloo	BaseGlooFunctions	set_polygon_offset	factor units	set the scale and units used to calculate depth values parameters
gloo	BaseGlooFunctions	clear	color depth stencil	clear the screen buffers this is a wrapper for gl
gloo	BaseGlooFunctions	set_clear_color	color alpha	set the screen clear color this is a wrapper for gl
gloo	BaseGlooFunctions	set_clear_depth	depth	set the clear value for the depth buffer this is a wrapper for gl
gloo	BaseGlooFunctions	set_clear_stencil	index	set the clear value for the stencil buffer this is a wrapper for gl
gloo	BaseGlooFunctions	set_blend_func	srgb drgb salpha dalpha	specify pixel arithmetic for rgb and alpha parameters
gloo	BaseGlooFunctions	set_blend_color	color	set the blend color parameters
gloo	BaseGlooFunctions	set_blend_equation	mode_rgb mode_alpha	specify the equation for rgb and alpha blending parameters
gloo	BaseGlooFunctions	set_scissor	x y w h	define the scissor box parameters
gloo	BaseGlooFunctions	set_stencil_func	func ref mask face	set front or back function and reference value parameters
gloo	BaseGlooFunctions	set_stencil_mask	mask face	control the front or back writing of individual bits in the stencil parameters
gloo	BaseGlooFunctions	set_stencil_op	sfail dpfail dppass face	set front or back stencil test actions parameters
gloo	BaseGlooFunctions	set_depth_func	func	specify the value used for depth buffer comparisons parameters
gloo	BaseGlooFunctions	set_depth_mask	flag	toggle writing into the depth buffer parameters
gloo	BaseGlooFunctions	set_color_mask	red green blue alpha	toggle writing of frame buffer color components parameters
gloo	BaseGlooFunctions	set_sample_coverage	value invert	specify multisample coverage parameters parameters
gloo	BaseGlooFunctions	get_state_presets		the available gl state presets returns
gloo	BaseGlooFunctions	set_state	preset	set opengl rendering state optionally using a preset parameters
gloo	BaseGlooFunctions	finish		wait for gl commands to to finish this creates a glir command for glfinish and then processes the
gloo	BaseGlooFunctions	flush		flush gl commands this is a wrapper for glflush()
gloo	BaseGlooFunctions	set_hint	target mode	set opengl drawing hint parameters
gloo	GlooFunctions	glir		the glir queue corresponding to the current canvas
gloo		read_pixels	viewport alpha out_type	read pixels from the currently selected buffer
gloo		get_gl_configuration		read the current gl configuration this function uses constants that are not in the opengl es 2
gloo		_screenshot	viewport alpha	take a screenshot using glreadpixels not sure where to put this
gloo		check_variable	name	return none if *name* is expected to be a valid variable name in any glsl version
gloo		check_enum	enum name valid	get lowercase string representation of enum
gloo		draw_texture	tex	draw a 2d texture to the current viewport parameters
gloo	RenderBuffer	resize	shape format	set the render-buffer size and format parameters
gloo	FrameBuffer	activate		activate/use this frame buffer
gloo	FrameBuffer	deactivate		stop using this frame buffer the previous framebuffer will be made active
gloo	FrameBuffer	color_buffer		color buffer attachment
gloo	FrameBuffer	depth_buffer		depth buffer attachment
gloo	FrameBuffer	stencil_buffer		stencil buffer attachment
gloo	FrameBuffer	shape		the shape of the texture/renderbuffer attached to this framebuffer
gloo	FrameBuffer	resize	shape	resize all attached buffers with the given shape parameters
gloo	FrameBuffer	read	mode alpha	return array of pixel values in an attached buffer parameters
gloo	Buffer	nbytes		buffer size in bytes
gloo	Buffer	set_subdata	data offset copy	set a sub-region of the buffer deferred operation
gloo	Buffer	set_data	data copy	set data in the buffer deferred operation
gloo	Buffer	resize_bytes	size	resize this buffer deferred operation
gloo	DataBuffer	set_subdata	data offset copy	set a sub-region of the buffer deferred operation
gloo	DataBuffer	set_data	data copy	set data deferred operation parameters
gloo	DataBuffer	offset		buffer offset in bytes relative to base
gloo	DataBuffer	stride		stride of data in memory
gloo	DataBuffer	size		number of elements in the buffer
gloo	DataBuffer	itemsize		the total number of bytes required to store the array data
gloo	DataBuffer	glsl_type		glsl declaration strings required for a variable to hold this data
gloo	DataBuffer	resize_bytes	size	resize the buffer in-place deferred operation parameters
gloo	DataBuffer	__getitem__	key	create a view on this buffer
gloo	DataBuffer	__setitem__	key data	set data deferred operation
gloo	DataBufferView	offset		buffer offset in bytes relative to base
gloo	DataBufferView	base		buffer base if this buffer is a view on another buffer
gloo		_last_stack_str		print stack trace from call that didn't originate from here
gloo		remove_comments	code	remove c-style comment from glsl code string
gloo		merge_includes	code	merge all includes recursively
gloo		preprocess	code	preprocess a code by removing comments version and merging includes
gloo	GLObject	__init__		initialize the object in the default state
gloo	GLObject	delete		delete the object from gpu memory
gloo	GLObject	id		the id of this gl object used to reference the gl object in glir
gloo	GLObject	glir		the glir queue for this object
gloo		get_default_config		get the default opengl context configuration returns
gloo		get_current_canvas		get the currently active canvas returns none if there is no canvas available
gloo		set_current_canvas	canvas	make a canvas active used primarily by the canvas itself
gloo		forget_canvas	canvas	forget about the given canvas used by the canvas when closed
gloo	GLContext	create_shared	name ref	for the app backends to create the glshared object
gloo	GLContext	config		a dictionary describing the configuration of this gl context
gloo	GLContext	glir		the glir queue for the context this queue is for objects
gloo	GLContext	shared		get the object that represents the namespace that can potentially be shared between multiple contexts
gloo	GLContext	capabilities		the opengl capabilities
gloo	GLShared	parser		the glir parser shared between contexts
gloo	GLShared	add_ref	name ref	add a reference for the backend object that gives access to the low level context
gloo	GLShared	name		the name of the canvas backend that this shared namespace is associated with
gloo	GLShared	ref		a reference stored internally via a weakref to an object that the backend system can use to obtain the low-level
gloo	FakeCanvas	flush		flush commands call this after setting to context to current
gloo	BaseTexture	shape		data shape last dimension indicates number of color channels
gloo	BaseTexture	format		the texture format color channels
gloo	BaseTexture	wrapping		texture wrapping mode
gloo	BaseTexture	interpolation		texture interpolation for minification and magnification
gloo	BaseTexture	resize	shape format internalformat	set the texture size and format parameters
gloo	BaseTexture	_resize	shape format internalformat	internal method for resize
gloo	BaseTexture	set_data	data offset copy	set texture data parameters
gloo	BaseTexture	_set_data	data offset copy	internal method for set_data
gloo	BaseTexture	__setitem__	key data	x __getitem__ y <==> x[y]
gloo	Texture1D	glsl_type		glsl declaration strings required for a variable to hold this data
gloo	Texture1D	glsl_sampler_type		glsl type of the sampler
gloo	Texture1D	glsl_sample		glsl function that samples the texture
gloo	Texture2D	glsl_type		glsl declaration strings required for a variable to hold this data
gloo	Texture2D	glsl_sampler_type		glsl type of the sampler
gloo	Texture2D	glsl_sample		glsl function that samples the texture
gloo	Texture3D	glsl_type		glsl declaration strings required for a variable to hold this data
gloo	Texture3D	glsl_sampler_type		glsl type of the sampler
gloo	Texture3D	glsl_sample		glsl function that samples the texture
gloo	TextureEmulated3D	set_data	data offset copy	set texture data parameters
gloo	TextureEmulated3D	resize	shape format internalformat	set the texture size and format parameters
gloo	TextureEmulated3D	shape		data shape last dimension indicates number of color channels
gloo	TextureEmulated3D	glsl_sample		glsl function that samples the texture
gloo	TextureAtlas	get_free_region	width height	get a free region of given size and allocate it parameters
gloo	TextureAtlas	_fit	index width height	test if region width height fit into self _atlas_nodes[index]
gloo.gl		glBufferData	target data usage	data can be numpy array or the size of data to allocate
gloo.gl		_patch		monkey-patch pyopengl to fix a bug in glbuffersubdata
gloo.gl		_get_function_from_pyopengl	funcname	try getting the given function from pyopengl return a dummy function that shows a warning when called if it
gloo.gl		_inject		copy functions from opengl gl into _pyopengl namespace
gloo.gl		_inject		inject functions and constants from pyopengl but leave out the names that are deprecated or that we provide in our api
gloo.gl		glBufferData	target data usage	data can be numpy array or the size of data to allocate
gloo.gl	DebugProxy	_arg_repr	arg	get a useful and not too large represetation of an argument
gloo.gl		use_gl	target	let vispy use the target opengl es 2 0 implementation
gloo.gl		_clear_namespace		clear names that are not part of the strict es api
gloo.gl		_copy_gl_functions	source dest constants	inject all objects that start with 'gl' from the source into the dest
gloo.gl		check_error	when	check this from time to time to detect gl errors
gloo.gl		_fix_osmesa_gl_lib_if_testing		this functions checks if we a running test with the osmesa backends and fix the gl library if needed
gloo.gl		glBufferData	target data usage	data can be numpy array or the size of data to allocate
gloo.gl		_get_gl_version	_lib	helper to get the gl version string
scene	VisualNode	_set_clipper	node clipper	assign a clipper that is inherited from a parent node
scene	VisualNode	picking		boolean that determines whether this node and its children are drawn in picking mode
scene	VisualNode	_update_trsys	event	transform object s have changed for this node assign these to the visual's transformsystem
scene	VisualNode	interactive		whether this widget should be allowed to accept mouse and touch events
scene	SceneMouseEvent	pos		the position of this event in the local coordinate system of the visual
scene	SceneMouseEvent	last_event		the mouse event immediately prior to this one this
scene	SceneMouseEvent	press_event		the mouse press event that initiated a mouse drag if any
scene	SceneMouseEvent	button		the button pressed or released on this event
scene	SceneMouseEvent	buttons		a list of all buttons currently pressed on the mouse
scene	SceneMouseEvent	delta		the increment by which the mouse wheel has moved
scene	Node	visible		whether this node should be drawn or not only applicable to
scene	Node	_set_clipper	node clipper	assign a clipper that is inherited from a parent node
scene	Node	clip_children		boolean indicating whether children of this node will inherit its clipper
scene	Node	clipper		a visual filter that can be used to clip visuals to the boundaries of this node
scene	Node	order		a value used to determine the order in which nodes are drawn
scene	Node	children		a copy of the list of children of this node do not add
scene	Node	parent		the parent of this node in the scenegraph
scene	Node	on_parent_change	event	parent change event handler parameters
scene	Node	is_child	node	check if a node is a child of the current node parameters
scene	Node	canvas		the canvas in which this node's scenegraph is being drawn
scene	Node	document_node		the node to be used as the document coordinate system
scene	Node	scene_node		the first ancestor of this node that is a subscene instance or self if no such node exists
scene	Node	update		emit an event to inform listeners that properties of this node have changed
scene	Node	document		the document is an optional property that is an node representing the coordinate system from which this node should make physical
scene	Node	transform		the transform that maps the local coordinate frame to the coordinate frame of the parent
scene	Node	set_transform	type_	create a new transform of *type* and assign it to this node
scene	Node	_update_trsys	event	called when has changed
scene	Node	parent_chain		return the list of parents starting from this node the chain ends
scene	Node	describe_tree	with_transform	create tree diagram of children parameters
scene	Node	_describe_tree	prefix with_transform	helper function to actuall construct the tree
scene	Node	common_parent	node	return the common parent of two entities if the entities have no common parent return none
scene	Node	node_path_to_child	node	return a list describing the path from this node to a child node if *node* is not a grand child of this node then raise runtimeerror
scene	Node	node_path	node	return two lists describing the path from this node to another parameters
scene	Node	node_path_transforms	node	return the list of transforms along the path to another node
scene	Node	node_transform	node	return the transform that maps from the coordinate system of *self* to the local coordinate system of *node*
scene	Node	picking		boolean that determines whether this node and its children are drawn in picking mode
scene	SceneCanvas	scene		the subscene object that represents the root node of the scene graph to be displayed
scene	SceneCanvas	central_widget		returns the default widget that occupies the entire area of the canvas
scene	SceneCanvas	update	node	update the scene parameters
scene	SceneCanvas	on_draw	event	draw handler parameters
scene	SceneCanvas	render	region size bgcolor	render the scene to an offscreen buffer and return the image array
scene	SceneCanvas	draw_visual	visual event	draw a visual and its children to the canvas or currently active framebuffer
scene	SceneCanvas	_generate_draw_order	node	return a list giving the order to draw visuals
scene	SceneCanvas	_update_scenegraph	event	called when topology of scenegraph has changed
scene	SceneCanvas	visual_at	pos	return the visual at a given position parameters
scene	SceneCanvas	_visual_bounds_at	pos node	find a visual whose bounding rect encompasses *pos*
scene	SceneCanvas	visuals_at	pos radius	return a list of visuals within *radius* pixels of *pos*
scene	SceneCanvas	_render_picking		render the scene in picking mode returning a 2d array of visual ids
scene	SceneCanvas	on_resize	event	resize handler parameters
scene	SceneCanvas	on_close	event	close event handler parameters
scene	SceneCanvas	push_viewport	viewport	push a viewport x y w h on the stack values must be integers
scene	SceneCanvas	pop_viewport		pop a viewport from the stack
scene	SceneCanvas	push_fbo	fbo offset csize	push an fbo on the stack
scene	SceneCanvas	pop_fbo		pop an fbo from the stack
scene	SceneCanvas	_current_framebuffer		return (fbo origin canvas_size) for the current fbo on the stack or for the canvas if there is no fbo
scene	SceneCanvas	_update_transforms		update the canvas's transformsystem to correct for the current canvas size framebuffer and viewport
scene.cameras	PanZoomCamera	aspect		the ratio between the x and y dimension e g to show a
scene.cameras	PanZoomCamera	zoom	factor center	zoom in or out at the given center parameters
scene.cameras	PanZoomCamera	pan		pan the view
scene.cameras	PanZoomCamera	rect		the rectangular border of the viewbox visible area expressed in the coordinate system of the scene
scene.cameras	PanZoomCamera	viewbox_resize_event	event	modify the data aspect and scale factor to adjust to the new window size
scene.cameras	PanZoomCamera	viewbox_mouse_event	event	the subscene received a mouse event update transform accordingly
scene.cameras		make_camera	cam_type	factory function for creating new cameras using a string name
scene.cameras	FlyCamera	rotation		get the full rotation this rotation is composed of the
scene.cameras	FlyCamera	auto_roll		whether to rotate the camera automaticall to try and attempt to keep z up
scene.cameras	FlyCamera	keymap		a dictionary that maps keys to thruster directions the keys in this dictionary are vispy key descriptions (from
scene.cameras	FlyCamera	_set_range	init	reset the view
scene.cameras	FlyCamera	on_timer	event	timer event handler parameters
scene.cameras	FlyCamera	viewbox_key_event	event	viewbox key event handler parameters
scene.cameras	FlyCamera	viewbox_mouse_event	event	viewbox mouse event handler parameters
scene.cameras	PerspectiveCamera	viewbox_mouse_event	event	the viewbox received a mouse event update transform accordingly
scene.cameras	PerspectiveCamera	scale_factor		the measure for the scale or range that the camera should cover for the panzoomcamera and turntablecamera this translates to
scene.cameras	PerspectiveCamera	near_clip_distance		the distance of the near clipping plane from the camera's position
scene.cameras	PerspectiveCamera	_set_range	init	reset the camera view using the known limits
scene.cameras	PerspectiveCamera	viewbox_resize_event	event	the viewbox resize handler to update the transform parameters
scene.cameras	Base3DRotationCamera	distance		the user-set distance if none default the distance is
scene.cameras	Base3DRotationCamera	viewbox_mouse_event	event	the viewbox received a mouse event update transform accordingly
scene.cameras	Base3DRotationCamera	_update_camera_pos		set the camera position and orientation
scene.cameras	Base3DRotationCamera	_update_rotation	event	update rotation parmeters based on mouse movement
scene.cameras	Base3DRotationCamera	_rotate_tr		rotate the transformation matrix based on camera parameters
scene.cameras	Base3DRotationCamera	_dist_to_trans	dist	convert mouse x y movement into x y z translations
scene.cameras	ArcballCamera	_update_rotation	event	update rotation parmeters based on mouse movement
scene.cameras	ArcballCamera	_rotate_tr		rotate the transformation matrix based on camera parameters
scene.cameras	ArcballCamera	_dist_to_trans	dist	convert mouse x y movement into x y z translations
scene.cameras		_arcball	xy wh	convert x y coordinates to w x y z quaternion parameters adapted from
scene.cameras	TurntableCamera	elevation		the angle of the camera in degrees above the horizontal x z plane
scene.cameras	TurntableCamera	azimuth		the angle of the camera in degrees around the y axis an angle of
scene.cameras	TurntableCamera	roll		the angle of the camera in degrees around the z axis an angle of
scene.cameras	TurntableCamera	orbit	azim elev	orbits the camera around the center position
scene.cameras	TurntableCamera	_update_rotation	event	update rotation parmeters based on mouse movement
scene.cameras	TurntableCamera	_rotate_tr		rotate the transformation matrix based on camera parameters
scene.cameras	TurntableCamera	_dist_to_trans	dist	convert mouse x y movement into x y z translations
scene.cameras	MagnifyCamera	viewbox_mouse_event	event	viewbox mouse event handler parameters
scene.cameras	MagnifyCamera	on_timer	event	timer event handler parameters
scene.cameras	MagnifyCamera	viewbox_resize_event	event	viewbox resize event handler parameters
scene.cameras	BaseCamera	depth_value		the depth value to use in orthographic and perspective projection for orthographic projections depth_value is the distance between
scene.cameras	BaseCamera	_depth_to_z	depth	get the z-coord given the depth value
scene.cameras	BaseCamera	_viewbox_set	viewbox	friend method of viewbox to register itself
scene.cameras	BaseCamera	_viewbox_unset	viewbox	friend method of viewbox to unregister itself
scene.cameras	BaseCamera	viewbox		the viewbox that this camera applies to
scene.cameras	BaseCamera	interactive		boolean describing whether the camera should enable or disable user interaction
scene.cameras	BaseCamera	up		the dimension that is considered up
scene.cameras	BaseCamera	center		the center location for this camera the exact meaning of this value differs per type of camera but
scene.cameras	BaseCamera	fov		field-of-view angle of the camera if 0 the camera is in
scene.cameras	BaseCamera	set_range	x y z margin	set the range of the view region for the camera parameters
scene.cameras	BaseCamera	reset		reset the view to the default state
scene.cameras	BaseCamera	set_default_state		set the current state to be the default state to be applied when calling reset()
scene.cameras	BaseCamera	get_state		get the current view state of the camera returns a dict of key-value pairs
scene.cameras	BaseCamera	set_state	state	set the view state of the camera should be a dict or kwargs as returned by get_state
scene.cameras	BaseCamera	link	camera	link this camera with another camera of the same type linked camera's keep each-others' state in sync
scene.cameras	BaseCamera	view_changed		called when this camera is changes its view also called
scene.cameras	BaseCamera	pre_transform		a transform to apply to the beginning of the scene transform in addition to anything else provided by this camera
scene.cameras	BaseCamera	viewbox_mouse_event	event	viewbox mouse event handler parameters
scene.cameras	BaseCamera	on_canvas_change	event	canvas change event handler parameters
scene.cameras	BaseCamera	viewbox_key_event	event	viewbox key event handler parameters
scene.cameras	BaseCamera	viewbox_resize_event	event	the viewbox resize handler to update the transform parameters
scene.cameras	BaseCamera	_update_transform		subclasses should reimplement this method to update the scene transform by calling self
scene.cameras	BaseCamera	_set_scene_transform	tr	called by subclasses to configure the viewbox scene transform
scene.widgets	Console	on_resize	event	resize event handler parameters
scene.widgets	Console	clear		clear the console
scene.widgets	Console	write	text wrap	write text and scroll parameters
scene.widgets	Console	text_color		the color of the text
scene.widgets	Console	font_size		the font size in points of the text
scene.widgets	ConsoleVisual	text_color		the color of the text
scene.widgets	ConsoleVisual	font_size		the font size in points of the text
scene.widgets	ConsoleVisual	_resize_buffers	font_scale	resize buffers only if necessary
scene.widgets	ConsoleVisual	clear		clear the console
scene.widgets	ConsoleVisual	write	text wrap	write text and scroll parameters
scene.widgets	ConsoleVisual	_do_pending_writes		do any pending text writes
scene.widgets	ConsoleVisual	_insert_text_buf	line idx	insert text into bytes buffers
scene.widgets	AxisWidget	on_resize	event	resize event handler parameters
scene.widgets	AxisWidget	link_view	view	link this axis to a viewbox this makes it so that the axis's domain always matches the
scene.widgets	AxisWidget	_view_changed	event	linked view transform has changed update ticks
scene.widgets	Label	on_resize	event	resize event handler parameters
scene.widgets	Widget	size		the size w h of this widget
scene.widgets	Widget	width		the actual width of this widget
scene.widgets	Widget	width_min		the minimum width the widget can have
scene.widgets	Widget	width_min	width_min	set the minimum height of the widget
scene.widgets	Widget	width_max		the maximum width the widget can have
scene.widgets	Widget	width_max	width_max	set the maximum width of the widget
scene.widgets	Widget	height		the actual height of the widget
scene.widgets	Widget	height_min		the minimum height of the widget
scene.widgets	Widget	height_min	height_min	set the minimum height of the widget
scene.widgets	Widget	height_max		the maximum height of the widget
scene.widgets	Widget	height_max	height_max	set the maximum height of the widget
scene.widgets	Widget	inner_rect		the rectangular area inside the margin border and padding
scene.widgets	Widget	stretch		stretch factors w h used when determining how much space to allocate to this widget in a layout
scene.widgets	Widget	_update_clipper		called whenever the clipper for this widget may need to be updated
scene.widgets	Widget	border_color		the color of the border
scene.widgets	Widget	bgcolor		the background color of the widget
scene.widgets	Widget	_update_line		update border line to match new shape
scene.widgets	Widget	add_widget	widget	add a widget as a managed child of this widget
scene.widgets	Widget	add_grid		create a new grid and add it as a child widget
scene.widgets	Widget	add_view		create a new viewbox and add it as a child widget
scene.widgets	Widget	remove_widget	widget	remove a widget as a managed child of this widget
scene.widgets	ColorBarWidget	on_resize	event	resize event handler parameters
scene.widgets	ColorBarWidget	_calc_size		calculate a size
scene.widgets	ColorBarWidget	border_color		the color of the border around the colorbar in pixels
scene.widgets	ColorBarWidget	border_width		the width of the border around the colorbar in pixels
scene.widgets	Grid	__getitem__	idxs	return an item or create it if the location is available
scene.widgets	Grid	add_widget	widget row col row_span	add a new widget to this grid this will cause other widgets in the
scene.widgets	Grid	remove_widget	widget	remove a widget from this grid
scene.widgets	Grid	resize_widget	widget row_span col_span	resize a widget in the grid to new dimensions
scene.widgets	Grid	add_grid	row col row_span col_span	create a new grid and add it as a child widget
scene.widgets	Grid	add_view	row col row_span col_span	create a new viewbox and add it as a child widget
scene.widgets	ViewBox	camera		get/set the camera in use by this viewbox if a string is given (e
scene.widgets	ViewBox	is_in_scene	node	get whether the given node is inside the scene of this viewbox
scene.widgets	ViewBox	get_scene_bounds	dim	get the total bounds based on the visuals present in the scene parameters
scene.widgets	ViewBox	scene		the root node of the scene viewed by this viewbox
scene.widgets	ViewBox	add	node	add an node to the scene for this viewbox
scene.widgets	ViewBox	on_resize	event	resize event handler parameters
ipython		load_ipython_extension	ipython	entry point of the ipython extension
ipython		_load_webgl_backend	ipython	load the webgl backend for the ipython notebook
ipython		unload_ipython_extension	ipython	unload the ipython extension
ext		_list_fonts		list system fonts
ext		_stdin_ready_posix		return true if there's something to read on stdin posix version
ext		_stdin_ready_nt		return true if there's something to read on stdin nt version
ext		_stdin_ready_other		return true assuming there's something to read on stdin
ext		_ignore_CTRL_C_posix		ignore ctrl+c sigint
ext		_allow_CTRL_C_posix		take ctrl+c into account sigint
ext		_ignore_CTRL_C_other		ignore ctrl+c not implemented
ext		_allow_CTRL_C_other		take ctrl+c into account not implemented
ext	InputHookManager	get_pyos_inputhook		return the current pyos_inputhook as a ctypes c_void_p
ext	InputHookManager	get_pyos_inputhook_as_func		return the current pyos_inputhook as a ctypes pyfuncype
ext	InputHookManager	set_inputhook	callback	set pyos_inputhook to callback and return the previous one
ext	InputHookManager	clear_inputhook	app	set pyos_inputhook to null and return the previous one
ext	InputHookManager	clear_app_refs	gui	clear ipython's internal reference to an application instance
ext	InputHookManager	register	toolkitname	register a class to provide the event loop for a given gui
ext	InputHookManager	current_gui		return a string indicating the currently active gui or none
ext	InputHookManager	enable_gui	gui app	switch amongst gui input hooks by name
ext	InputHookManager	disable_gui		disable gui event loop integration
ext		allocate_pixels_buffer	width height	helper function to allocate a buffer to contain an image of
ext		cubehelix	start rot gamma reverse	a full implementation of dave green's "cubehelix" for matplotlib
ext		eglGetError		check for errors returns an enum int
ext		eglGetDisplay	display	connect to the egl display server
ext		eglInitialize	display	initialize egl and return egl version tuple
ext		eglTerminate	display	initialize egl and return egl version tuple
ext		eglQueryString	display name	query string from display
ext	ObjCMethod	ctype_for_encoding	encoding	return ctypes type for an encoded objective-c type
ext	ObjCSubclass	classmethod	encoding	function decorator for class methods
ext		get_NSString	string	autoreleased version of cfstr
ext		cfnumber_to_number	cfnumber	convert cfnumber to python int or float
ext		cftype_to_value	cftype	convert a cftype into an equivalent python type
ext		cfset_to_set	cfset	convert cfset to python set
ext		cfarray_to_list	cfarray	convert cfarray to python list
ext		_find_module	name path	alternative to imp find_module that can also search in subpackages
ext._bundled	FunctionMaker	update	func	update the signature of func with the data in self
ext._bundled	FunctionMaker	make	src_templ evaldict addsource	make a new function from a given template and update the signature
ext._bundled	FunctionMaker	create	cls obj body evaldict	create a function from the strings name signature and body
ext._bundled		decorator	caller func	decorator caller converts a caller function into a decorator decorator caller func decorates a function using a caller
ext._bundled		__call__	func	context manager decorator
ext._bundled		get_handle		get unique ft_library handle
ext._bundled		version		return the version of the freetype library being used as a tuple of
ext._bundled	OrderedDict	__init__		initialize an ordered dictionary signature is the same as for
ext._bundled	OrderedDict	__setitem__	key value dict_setitem	od __setitem__ i y <==> od[i]=y
ext._bundled	OrderedDict	__delitem__	key dict_delitem	od __delitem__ y <==> del od[y]
ext._bundled	OrderedDict	__iter__		od __iter__() <==> iter od
ext._bundled	OrderedDict	__reversed__		od __reversed__() <==> reversed od
ext._bundled	OrderedDict	clear		od clear() -> none remove all items from od
ext._bundled	OrderedDict	popitem	last	od popitem() -> k v return and remove a key value pair
ext._bundled	OrderedDict	keys		od keys() -> list of keys in od
ext._bundled	OrderedDict	values		od values() -> list of values in od
ext._bundled	OrderedDict	items		od items() -> list of key value pairs in od
ext._bundled	OrderedDict	iterkeys		od iterkeys() -> an iterator over the keys in od
ext._bundled	OrderedDict	itervalues		od itervalues -> an iterator over the values in od
ext._bundled	OrderedDict	iteritems		od iteritems -> an iterator over the key value items in od
ext._bundled	OrderedDict	update		od update(e **f) -> none update od from dict/iterable e and f
ext._bundled	OrderedDict	pop	key default	od pop(k[,d]) -> v remove specified key and return the corresponding value
ext._bundled	OrderedDict	setdefault	key default	od setdefault(k[,d]) -> od get k d also set od[k]=d if k not in od
ext._bundled	OrderedDict	__repr__	_repr_running	od __repr__() <==> repr od
ext._bundled	OrderedDict	__reduce__		return state information for pickling
ext._bundled	OrderedDict	copy		od copy() -> a shallow copy of od
ext._bundled	OrderedDict	fromkeys	cls iterable value	od fromkeys(s[, v]) -> new ordered dictionary with keys from s
ext._bundled	OrderedDict	__eq__	other	od __eq__ y <==> od==y comparison to another od is order-sensitive
ext._bundled	OrderedDict	viewkeys		od viewkeys() -> a set-like object providing a view on od's keys
ext._bundled	OrderedDict	viewvalues		od viewvalues() -> an object providing a view on od's values
ext._bundled	OrderedDict	viewitems		od viewitems() -> a set-like object providing a view on od's items
ext._bundled		isarray	x	same as isinstance x array except on python 2 2 where it
ext._bundled		tostring	row	python3 definition array tostring() is deprecated in python3
ext._bundled		interleave_planes	ipixels apixels ipsize apsize	interleave colour planes e g rgb + a = rgba
ext._bundled		check_palette	palette	check a palette argument (to the :class writer class) for validity
ext._bundled		check_sizes	size width height	check that these arguments in supplied are consistent
ext._bundled		check_color	c greyscale which	checks that a colour argument for transparent or background options is the right form
ext._bundled	Writer	__init__	width height size greyscale	create a png encoder object
ext._bundled	Writer	make_palette		create the byte sequences for a plte and if necessary a trns chunk
ext._bundled	Writer	write	outfile rows	write a png image to the output file rows should be
ext._bundled	Writer	write_passes	outfile rows packed	write a png image to the output file
ext._bundled	Writer	write_array	outfile pixels	write an array in flat row flat pixel format as a png file on the output file
ext._bundled	Writer	write_packed	outfile rows	write png file to outfile the pixel data comes from rows
ext._bundled	Writer	convert_pnm	infile outfile	convert a pnm file containing raw pixel data into a png file with the parameters set in the writer object
ext._bundled	Writer	convert_ppm_and_pgm	ppmfile pgmfile outfile	convert a ppm and pgm file containing raw pixel data into a png outfile with the parameters set in the writer object
ext._bundled	Writer	file_scanlines	infile	generates boxed rows in flat pixel format from the input file infile
ext._bundled	Writer	array_scanlines	pixels	generates boxed rows flat pixels from flat rows flat pixels in an array
ext._bundled	Writer	array_scanlines_interlace	pixels	generator for interlaced scanlines from an array pixels is
ext._bundled		write_chunk	outfile tag data	write a png chunk to the output file including length and checksum
ext._bundled		write_chunks	out chunks	create a png file by writing out the chunks
ext._bundled		filter_scanline	type line fo prev	apply a scanline filter to a scanline type specifies the
ext._bundled		from_array	a mode info	create a png :class image object from a 2- or 3-dimensional array
ext._bundled	Image	save	file	save the image to *file* if *file* looks like an open file
ext._bundled	Reader	__init__	_guess	create a png decoder object
ext._bundled	Reader	chunk	seek lenient	read the next png chunk from the input file returns a (*type*,*data*) tuple
ext._bundled	Reader	chunks		return an iterator that will yield each chunk as a (*chunktype*, *content*) pair
ext._bundled	Reader	undo_filter	filter_type scanline previous	undo the filter for a scanline scanline is a sequence of
ext._bundled	Reader	deinterlace	raw	read raw pixel data undo filters deinterlace and flatten
ext._bundled	Reader	iterboxed	rows	iterator that yields each scanline in boxed row flat pixel format
ext._bundled	Reader	serialtoflat	bytes width	convert serial format byte stream pixel data to flat row flat pixel
ext._bundled	Reader	iterstraight	raw	iterator that undoes the effect of filtering and yields each row in serialised format as a sequence of bytes
ext._bundled	Reader	validate_signature		if signature header has not been read then read and validate it otherwise do nothing
ext._bundled	Reader	preamble	lenient	extract the image metadata by reading the initial part of the png file up to the start of the idat chunk
ext._bundled	Reader	chunklentype		reads just enough of the input to determine the next chunk's length and type returned as a (*length*, *type*) pair
ext._bundled	Reader	process_chunk	lenient	process the next chunk and its data this only processes the
ext._bundled	Reader	read	lenient	read the png file and decode it returns (width, height,
ext._bundled	Reader	read_flat		read a png file and decode it into flat row flat pixel format
ext._bundled	Reader	palette	alpha	returns a palette that is a sequence of 3-tuples or 4-tuples synthesizing it from the plte and trns chunks
ext._bundled	Reader	asDirect		returns the image data as a direct representation of an x * y * planes array
ext._bundled	Reader	asFloat	maxval	return image pixels as per :meth asdirect method but scale all pixel values to be floating point values between 0
ext._bundled	Reader	_as_rescale	get targetbitdepth	helper used by :meth asrgb8 and :meth asrgba8
ext._bundled	Reader	asRGB8		return the image data as an rgb pixels with 8-bits per sample
ext._bundled	Reader	asRGBA8		return the image data as rgba pixels with 8-bits per sample
ext._bundled	Reader	asRGB		return image as rgb pixels rgb colour images are passed
ext._bundled	Reader	asRGBA		return image as rgba pixels greyscales are expanded into
ext._bundled		check_bitdepth_colortype	bitdepth colortype	check that bitdepth and colortype are both valid and specified in a valid combination
ext._bundled	pngfilters	undo_filter_sub	filter_unit scanline previous result	undo sub filter
ext._bundled	pngfilters	undo_filter_up	filter_unit scanline previous result	undo up filter
ext._bundled	pngfilters	undo_filter_average	filter_unit scanline previous result	undo up filter
ext._bundled	pngfilters	undo_filter_paeth	filter_unit scanline previous result	undo paeth filter
ext._bundled	pngfilters	convert_l_to_rgba	row result	convert a grayscale image to rgba this method assumes
ext._bundled	pngfilters	convert_rgb_to_rgba	row result	convert an rgb image to rgba this method assumes the
ext._bundled		_add_doc	func doc	add documentation to a function
ext._bundled		_import_module	name	import module returning the module after the last dot
ext._bundled	_SixMetaPathImporter	is_package	fullname	return true if the named module is a package
ext._bundled		add_move	move	add an item to six moves
ext._bundled		remove_move	name	remove item from six moves
ext._bundled		with_metaclass	meta	create a base class with a metaclass
ext._bundled		add_metaclass	metaclass	class decorator for creating a class with a metaclass
ext._bundled.cassowary	Constraint	__init__	param1 operator param2 strength	define a new linear constraint
ext._bundled.cassowary		approx_equal	a b epsilon	a comparison mechanism for floats
ext._bundled.cassowary		repr_strength	strength	convert a numerical strength constant into a human-readable value
