function	be associated with ||| memoized	count=1
module_class	[module_1] metadata ||| [module_1] [class_2]	count=24
module_class	this table ||| sql table	count=3
class	the purpose of ||| values base	count=1
function	namespace of ||| column attrs	count=1
function	to the target columns ||| columns	count=1
function_arg	group [arg_2] ||| orm undefer [function_1] loadopt [arg_2]	count=1
function	elements such as ||| elements	count=1
module	the class name that ||| ext	count=1
function	with the ||| annotate	count=1
function	[function_1] count ||| [function_1] [function_2]	count=2
module	by this ||| sql	count=2
class	be associated with this ||| property	count=1
function	criterion ||| criterion	count=1
arg	given state ||| state	count=3
function	[function_1] update ||| [function_1] [function_2] commands uowtransaction table	count=4
arg	of a table ||| tablename table	count=1
class	method ||| method	count=1
module_class	this [class_2] ||| [module_1] [class_2]	count=186
arg	an instance when ||| oldinit instance	count=1
function	unique constraints ||| unique	count=1
function	mock at ||| mock	count=1
arg	event ||| value initiator	count=2
function	a cte is located ||| init cte state	count=1
arg	regex ||| regex cleanup	count=1
function	represent very small values ||| precision numerics enotation small	count=1
function	the 'inherits' for ||| concrete base	count=1
function	[function_1] and ||| [function_1] [function_2]	count=3
class	this collection ||| collection	count=1
arg	against ||| element partition_by	count=1
class	cache into baked ||| baked	count=1
function	events [function] ||| [function] cursor	count=3
function_arg	[function_1] [arg_2] on failure ||| [function_1] in [arg_2]	count=1
class	all :class ||| mapper	count=3
arg	[arg] repr messaging ||| a [arg]	count=4
module	allowing modifications by ||| sql	count=1
class	a decimal ||| decimal	count=1
function	no from clause is ||| from	count=1
arg	key from the database ||| key	count=1
function	[function_1] call count ||| [function_2] [function_1]	count=1
function	proceed after ||| fetch rows post commit	count=1
class	condition suitable ||| join condition	count=1
function	namespace of ||| attrs	count=1
function	a shallow copy ||| clone	count=2
function_arg	not [arg_2] ||| [function_1] in [arg_2]	count=3
function	reflection ||| constraint reflection	count=1
function	many [function_2] ||| [function_2] [function_1]	count=1
function	and yield only outer-exposed [function_1] [function_2] ||| surface [function_1] [function_2]	count=4
function	the general class ||| affinity	count=1
function	reflection of unique constraints ||| unique constraint reflection	count=1
function	[function_1] comment ||| [function_2] [function_1]	count=5
module_class	this select() construct ||| sql select	count=1
function_arg	[function_1] and visit ||| [function_1] [arg_2]	count=1
function	do update ||| do update	count=2
function	the default [function_2] ||| [function_2] [function_1]	count=2
function	:term [function_2] ||| [function_1] [function_2]	count=1
function	:class columnproperty ||| column	count=1
function	the actual join constructs ||| join	count=1
class	to the underlying logger ||| instance logger	count=5
function	implements a native json ||| json	count=1
class	objects ||| baked	count=1
module	a [module] connection ||| [module]	count=1
class	intercept [class_2] ||| [class_1] [class_2]	count=2
function	mysql on windows failures ||| skip mysql on windows	count=1
module_class	[module_1] constraint ||| [module_1] column collection [class_2]	count=4
function	similarly ||| column reflection	count=1
function	remove an entity ||| remove	count=1
function	[function_1] order ||| [function_2] [function_1]	count=1
module	given ||| engine	count=9
class	have been ||| query	count=1
function	to have ||| do	count=3
arg	string to regex ||| regex	count=1
class	a parent query ||| query	count=1
class	compare ||| type engine	count=1
arg	given element ||| element values	count=1
module	clause ||| sql	count=1
arg	persistence of the ||| target flush_context attrs	count=1
module	interfaces ||| engine	count=1
function	modifications ||| cloned	count=1
arg	cursor to ||| cursor statement parameters context	count=2
module	string to a ||| mysql	count=1
function_arg	[function_1] b with ||| [arg_2] [function_1]	count=6
function	nested ||| nested	count=2
module_class	this select ||| sql select	count=1
function	for [function_2] ||| [function_1] [function_2]	count=4
class	clause ||| clause	count=1
function	prepare a two ||| prepare twophase	count=1
function	memoize its return ||| memoized instancemethod	count=1
function	given cascade ||| cascade iterator	count=2
module	this :class typeengine ||| sql	count=1
arg	table definitions from the ||| bind schema views only	count=1
function	have [function_2] ||| [function_1] [function_2]	count=4
class	for the purpose ||| values base	count=1
module	called for each unit ||| core	count=1
function	decimal separator ||| decimal char	count=1
module	a :func ||| sql	count=2
arg	override the generation ||| from_table extra_froms from_hints	count=1
function	rollback ||| do rollback twophase	count=1
function	using connection invalidation ||| invalidate	count=1
function	and all [function] ||| [function]	count=1
arg	criterion to the ||| criterion	count=1
arg	method args and/or return ||| method	count=1
module	associated with this :class ||| sql	count=1
function	[function_1] cursor ||| [function_1] [function_2]	count=1
function	[function_1] similarly to ||| [function_2] [function_1]	count=4
function	object for ||| init	count=1
class	associated with this ||| property	count=1
arg	function for the ||| fn	count=1
function	an info ||| info	count=1
function	to add ||| add	count=1
module	class that is ||| ext declarative	count=2
arg	an item ||| item block timeout	count=1
arg	roles ||| roles	count=1
function	delete statements ||| delete statements	count=2
module	for ||| util	count=1
arg	the string sql statement ||| statement	count=1
function_arg	traverse [arg_2] ||| [arg_2] [function_1]	count=4
class	the select ||| select	count=1
function_arg	insert [arg_2] ||| [function_1] pk returning compiler [arg_2]	count=2
function	given expression ||| traverse	count=1
module	the :class ~sqlalchemy ||| engine	count=1
arg	the given annotations dictionary ||| annotations	count=1
class	by this rowproxy ||| proxy	count=1
function	decode [function_2] ||| [function_2] [function_1]	count=1
module	:class ~sqlalchemy ||| engine	count=1
function	an implementation of ||| do	count=1
function	savepoint with ||| do savepoint	count=1
function	:class join object given ||| join	count=1
function	will provide ||| options	count=1
module	produce a declarative ||| ext	count=1
class	the ||| instance state	count=1
arg	sets of values to ||| states_to_update	count=1
arg	not it's already ||| connection_record pool ref	count=1
module	special mysql ||| dialects mysql	count=1
function	numeric value that ||| from numeric	count=1
function	[function_1] bound to ||| [function_1] [function_2]	count=1
function	_sa_instrument_role-decorated methods in ||| and methods	count=1
module_class	dbapi [class_2] ||| [module_1] [class_2]	count=2
function	representation of python datetime ||| date	count=1
function	a default instancestate if ||| new state if	count=1
class	user-defined data ||| mapper	count=1
module	the ||| sql	count=4
class	allowing ||| property	count=1
class	been specified in ||| query	count=1
function	recover list of uncommitted ||| recover	count=1
function_arg	bulk delete [arg_2] ||| [function_1] [arg_2]	count=1
arg	including calling after_insert/after_update events ||| base_mapper uowtransaction	count=1
function	filter ||| filter	count=1
function	row ||| create row	count=1
module_class	for a [class_2] ||| [module_1] [class_2]	count=2
function_arg	a delete [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	for [arg_2] ||| [function_1] [arg_2]	count=2
function	[function_1] tables ||| [function_1] [function_2]	count=1
class	back into [class] ||| [class]	count=1
arg	a state from ||| state	count=1
function	columnclause object that ||| literal column	count=1
module	nvarchar ||| dialects mysql	count=1
class	which do ||| instance	count=1
function	plain percent ||| percent sign	count=1
function	[function_1] criteria ||| [function_1] [function_2]	count=2
function	synonym matching the ||| resolve synonym	count=1
function	construct ||| init	count=37
function	produce an [function] that provides ||| proxying [function]	count=1
arg	list of mapping dictionaries ||| mapper mappings	count=2
function	by ||| cloned	count=1
function	puts ||| precolumns	count=1
class	the mapped object ||| instance state	count=2
class	condition suitable ||| condition	count=1
function	instance's ||| state	count=1
function	recover list of ||| do recover twophase	count=1
function	actual join constructs ||| join	count=1
function	returning ||| returning	count=1
module	do ||| orm	count=1
module_class	[module_1] thread ||| [module_1] [class_2]	count=2
function	objects with ||| data	count=1
function_arg	listeners to [arg_2] ||| [function_1] [arg_2]	count=2
class	data to be ||| mapper	count=1
arg	by ||| obj	count=1
class	be associated ||| mapper property	count=1
function	function call count ||| function call count	count=3
class	object ||| connectable	count=1
function	'remote' in primaryjoin ||| remote	count=1
arg	for a test case's ||| variance	count=1
function	puts ||| select precolumns	count=2
function	will execute ||| execute	count=1
function	to the query ||| with	count=1
function_arg	[function_1] count rows ||| [function_1] [arg_2]	count=1
module	target dialect ||| testing	count=2
function	list of temporary table ||| temp table	count=2
function	prepare a two phase ||| prepare twophase	count=1
arg	return a ||| dialect	count=1
arg	value [arg_2] ||| orm set attribute [arg_2] key [arg_1]	count=1
class	queue ||| queue	count=3
function	to an ||| bind to	count=1
arg	instance of this class ||| cls index value	count=1
function	be finalized at the ||| global cleanup assertions	count=1
function	object instance after ||| after	count=2
arg	key ||| key	count=3
function	a new ||| init	count=3
arg	the "lazy load" query ||| effective_path	count=1
function	a certain ||| with current	count=1
function	emit delete statements ||| emit delete statements	count=3
function	union ||| union	count=4
function	[function_1] given group ||| [function_1] [function_2]	count=1
function	[function_1] of temporary ||| [function_2] [function_1]	count=4
arg	a call to query ||| query	count=1
function	dialect implements the ||| implements get	count=1
function	clear the ||| clear	count=1
function	of elements [function_2] ||| [function_1] [function_2]	count=4
arg	given iterator of ||| iterator obj	count=1
function	return a function ||| function	count=1
function_arg	[function_1] a composite-capable ||| [arg_2] [function_1]	count=1
arg	alias of ||| alias name	count=1
class	against ||| function	count=1
arg	not found ||| ident	count=1
arg	and emit error messages ||| join_condition primary	count=1
arg	present in a select() ||| select	count=1
class	an instance [class_2] ||| [class_2] [class_1]	count=1
arg	instance to a child ||| instance property	count=1
class	set ||| attribute impl	count=1
function	create a shallow copy ||| clone	count=2
module	name that ||| ext	count=1
arg	clone the given expression ||| obj opts	count=1
function	from has a ||| has	count=1
arg	a queuepool ||| creator pool_size max_overflow timeout	count=1
module	additional clausevisitor onto this ||| sql	count=1
function	temporary table names on ||| temp table names	count=1
function	offset/limit is specifically not ||| wo	count=1
function_arg	[function_1] [arg_2] ||| [function_1] mapper [arg_2]	count=2
module	and return ||| engine	count=3
function_arg	[function_1] [arg_2] ||| [function_1] description [arg_2]	count=4
class	result ||| result meta	count=1
function	in update ||| update	count=1
function	limit/offset is specifically ||| w limit	count=1
function	update the [function_2] ||| [function_2] [function_1]	count=2
function	for on conflict clause ||| on conflict	count=2
class	collection with ||| mapped collection	count=1
function_arg	[function_1] a cursor ||| [arg_2] [function_1]	count=2
class	intercept ||| connection	count=1
function	return a list ||| get	count=7
function	replacing the select list ||| entities	count=1
arg	the given function ||| fn	count=1
function	return information about the ||| get	count=2
function_arg	with all future ||| with cls sqltype	count=1
arg	attribute and return the ||| dict_ key	count=1
function	server-side expressions and defaults ||| defaults	count=1
function	primary key expression ||| pk	count=1
class	:term returning ||| values	count=1
function_arg	slice object [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	set [arg_2] ||| [function_1] concrete base [arg_2]	count=1
function	iterator of ||| iterate	count=1
function	return ||| get table names	count=2
function	supports values with many ||| many	count=1
function	perform a bulk save ||| bulk save	count=1
function	ensure ||| required	count=1
function	results ||| all	count=1
function	for a columndefault ||| default	count=1
function	a bulk insert of ||| bulk insert	count=1
module	~sqlalchemy engine ||| engine	count=1
function	arbitrary ||| n factory	count=1
function	establish row [function_2] ||| [function_1] [function_2]	count=4
function	using "lazy" loading ||| lazyload	count=1
function	the oid ||| oid	count=1
function	[function] used for ||| [function]	count=3
module	allows initialization from ||| declarative	count=1
function	raw dbapi [function_2] ||| [function_2] [function_1]	count=1
function	connection [function_2] ||| [function_1] [function_2]	count=1
module	execute a ||| dialects	count=1
arg	the given column expression ||| column	count=1
function	clear all table objects ||| clear	count=1
function	jdbc url ||| jdbc	count=1
class	[class_1] joined by ||| [class_1] [class_2]	count=2
function	like mysqldb yaaay ||| compat fetchone	count=1
function	same as process_query(), except ||| process query conditionally	count=1
function_arg	enabled for level ||| enabled for level	count=1
function	clear all table ||| clear	count=1
function	!= ||| ne	count=1
function_arg	initialize a [arg_2] ||| [arg_2] [function_1]	count=5
module	close this ||| orm	count=1
function	function [function_2] ||| [function_2] [function_1]	count=2
class	a relationship ||| relationship	count=1
function_arg	types from [arg_2] ||| [arg_2] [function_1]	count=1
class	:class bindparameter ||| bind parameter	count=4
function	out the character set ||| detect charset	count=2
arg	attribute [arg_2] ||| [arg_2] [arg_1]	count=6
function	processing bind values ||| bind processor	count=1
function_arg	construct a [arg_2] ||| [function_1] [arg_2]	count=4
class	clause ||| values base	count=2
function	[function] wrapper/hook ||| [function]	count=2
function	perform a bulk ||| bulk	count=3
module	return the set ||| orm	count=1
function_arg	put an [arg_2] ||| [function_1] nowait [arg_2]	count=3
class	a list of string ||| key constraint	count=1
function	return the full set ||| get cls	count=1
arg	generate ||| dml whereclause values	count=1
function	a connection ||| do connect	count=1
class	for the purpose of ||| values base	count=1
function	[function_1] a delete ||| [function_2] [function_1]	count=3
class	[class_1] context ||| [class_2] [class_1]	count=2
module	as a ||| orm	count=1
module_class	return a 'bind' [module_1] [class_2] ||| [module_1] [class_2]	count=1
function	a [function] ||| [function]	count=4
arg	:class sessiontransaction is created ||| session transaction	count=1
function	expire and refresh the ||| refresh	count=1
function	expression structure [function_2] ||| [function_1] [function_2]	count=3
function	[function_1] using the ||| [function_2] [function_1]	count=4
class	oursql isn't super-broken like ||| sqldialect oursql	count=1
class	this option may ||| option	count=1
function	listeners to synchronize a ||| backref listeners	count=1
function	a literal [function_2] ||| [function_1] [function_2]	count=1
arg	the [arg_1] [arg_2] ||| [arg_2] key [arg_1]	count=2
function	an item [function] ||| identity [function] primary	count=1
arg	given :class ||| name element type_	count=1
function	dialect accepts [function] ||| date coerces from [function]	count=2
function	against the ||| against	count=1
class	expressions and ||| values base	count=1
function	allows ||| declarative	count=1
function	boolean [function_2] ||| [function_1] [function_2]	count=1
function_arg	apply listeners [arg_2] ||| [function_1] [arg_2]	count=1
class	set ||| instance state	count=1
arg	table definitions from ||| views only	count=1
function	self-referential foreign ||| self referential foreign	count=2
function	keys representing the ||| column keys	count=1
module	current transaction in ||| orm	count=2
module	of the ||| engine	count=1
function	[function] statements for ||| [function]	count=6
arg	emitted ||| connection target	count=3
function	default schema name presented ||| default schema name	count=1
function	value from the sequence ||| fire sequence	count=1
function	like ||| compat fetchone	count=2
function	check ||| check	count=1
function	[function_1] foreign keys ||| [function_1] [function_2]	count=1
function	for the first ||| first	count=1
function	of all ||| locate all	count=1
function	a "bind" ||| get	count=1
function	user-defined ||| attr	count=1
arg	allowing modifications by ||| obj	count=1
function	>> ||| rshift	count=1
function	use ||| return	count=1
arg	class ||| cls index	count=1
function	for o ||| iter id	count=1
class	[class_1] in reverse ||| [class_2] [class_1]	count=10
module	in progress for two ||| orm	count=1
class	of fetching server-side ||| values base	count=1
function	simple ||| simple	count=2
function	a dialect-specific literal ||| cached literal	count=2
function	key ||| key	count=6
function_arg	none is ||| none instance	count=1
function_arg	collection append [arg_2] ||| [arg_2] [function_1]	count=2
module	to be ||| orm	count=1
arg	given schema ||| connection schema	count=1
function_arg	[function_1] session ||| [function_1] [arg_2]	count=1
function	conforms [function_2] ||| [function_1] [function_2]	count=2
function	executemany() ||| executemany	count=1
function	for a bulk ||| bulk	count=1
function	subquery eager loaders in ||| subquery loaders	count=1
function_arg	against the given ||| against backend dialect	count=2
function	update of the given ||| update mappings	count=1
function	perform a bulk insert ||| bulk insert mappings	count=1
function	a cte is ||| init cte	count=1
function	boolean [function] set of ||| bool [function]	count=1
function	return a namespace ||| attrs	count=1
arg	definitions ||| views only	count=1
module_class	this compiled object ||| sql compiled	count=1
function	floating-point number with four ||| to four	count=1
function	:term ||| return	count=1
function	[function_1] an insert ||| [function_2] [function_1]	count=3
class	current transaction ||| session	count=2
function	mysql on ||| mysql on	count=1
class	collection with ||| collection	count=1
function	user-defined data to ||| attr	count=1
function	from ||| declarative	count=1
class	:class textclause object into ||| text	count=1
function	return the full ||| get cls	count=1
class	the set of keys ||| instance state	count=1
function	ends ||| end	count=1
function	is not [function_2] ||| [function_1] [function_2]	count=2
class	the :class ||| engine	count=1
arg	for schema [arg_2] ||| [arg_2] [arg_1]	count=2
function	transaction ||| transaction	count=1
module	be ||| orm	count=1
class	clause for ||| base	count=1
class	conjunction of expressions ||| boolean	count=1
function	an error ||| error	count=1
function	establish the c collection ||| collection	count=1
class	clause for ||| values base	count=1
function	like mysqldb ||| compat fetchone	count=1
module_class	engine or connection for [module_1] [class_2] ||| [module_1] [class_2]	count=2
class	joined ||| clause	count=1
function	ms-sql puts top ||| precolumns	count=1
arg	all future ||| cls sqltype	count=1
function	execute() with no parameters ||| execute no params	count=1
arg	connection transaction ||| transaction connection	count=2
function	filter the given ||| filter	count=1
class	make use ||| values	count=1
function	compare two ||| compare	count=1
function	the given expression structure ||| cloned traverse	count=1
module	be iterators ||| util	count=1
class	issue ||| index	count=2
module_class	[module_1] timestamp ||| [module_1] [class_2]	count=6
class	bindparameter ||| parameter	count=2
function	apply listeners to synchronize ||| backref listeners	count=1
class	if this option ||| option	count=1
function	[function_1] small ||| [function_2] [function_1]	count=3
function_arg	initialize a [arg_2] ||| [function_1] collection [arg_2]	count=3
class	expressions ||| values	count=1
function	[function_1] class attribute ||| [function_1] [function_2]	count=1
function	is called exactly once ||| once	count=1
arg	by ||| obj opts	count=1
arg	collection attribute ||| key	count=2
function	sqlalchemy database dialect ||| dialect	count=1
function	dialect implements ||| implements get lastrowid	count=1
function_arg	lateral alias of ||| lateral name	count=1
function	the version of ||| version info	count=2
function_arg	[function_1] transition for ||| [function_1] [arg_2]	count=5
function	create the python descriptor ||| create descriptor	count=1
function	listing of temporary ||| temp	count=1
function	temporary table [function_2] ||| [function_1] [function_2]	count=7
arg	given instancestate ||| state dict_	count=1
function	for a bulk update ||| bulk update	count=1
arg	statement referred to by ||| crit	count=1
function	cte is located ||| cte state	count=1
function	columns ||| columns	count=5
function_arg	[function_1] alias ||| [function_1] [arg_2]	count=3
function	deleted within ||| deleted	count=1
arg	in a select() ||| select	count=1
class	[class_1] bindparameter ||| [class_1] [class_2]	count=2
class	return ||| attribute impl	count=1
function_arg	pending actions [arg_2] ||| [arg_2] [function_1]	count=3
function	updated ||| update	count=1
function	implement the + ||| add	count=1
function	:class compositeproperty ||| composites	count=1
class	operator function ||| operators	count=1
function	new cursor generated from ||| create cursor	count=1
function	select count ||| count	count=1
function	iterate through ||| iterator	count=1
function_arg	rollback a [arg_2] ||| [function_1] connection [arg_2]	count=2
function_arg	set [arg_2] ||| [function_1] [arg_2]	count=1
class	of fetching server-side ||| values	count=1
class	logger ||| instance logger	count=6
function_arg	[function_1] instance to ||| [function_1] [arg_2]	count=2
arg	the search ||| search	count=1
arg	return an ||| context	count=1
function	is either present directly ||| immediate	count=1
function	dynamic mapping of mapper ||| mapper	count=1
arg	definitions ||| bind schema views only	count=1
class	return a compiled that ||| compiled	count=1
arg	a cursor ||| cursor statement	count=3
arg	for schema table_name ||| table_name schema	count=1
function_arg	comment for [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	[function_1] results of ||| [function_1] [arg_2]	count=1
function	return information about unique ||| get unique	count=2
function	allowing user-defined data ||| memoized	count=1
module	given two :class ||| sql	count=1
function	collection of foreignkey ||| foreign keys	count=1
function	return an attribute of ||| get	count=1
function	given column ||| column	count=1
function	comment for ||| comment	count=1
function_arg	server used [arg_2] ||| [arg_2] [function_1]	count=2
class	to be ||| mapper	count=1
class	and ||| values	count=1
function	return a :class ||| get	count=1
function	an item from ||| from	count=1
function_arg	is [arg_2] ||| [function_1] a [arg_2]	count=2
function	view definition ||| view	count=1
function	prepare ||| do prepare	count=1
arg	produce an alias ||| alias	count=1
arg	the persistence of ||| flush_context attrs	count=1
function	relationships of ||| compile	count=1
function	a particular entity only ||| load only	count=1
function	create a logger for ||| logger	count=1
class	executioncontext's ||| execution context	count=1
function	dbapi connection from the ||| connect	count=1
function	types ||| colnames	count=1
function	keys ||| keys	count=2
arg	the :class metadata and ||| engine reflect schema	count=1
arg	[arg_1] :class ||| [arg_2] [arg_1]	count=4
function	error ||| error	count=1
function	by ||| traverse	count=1
function_arg	this type as a [function_1] [arg_2] ||| [function_1] [arg_2]	count=1
function	flatten the ||| flatten	count=1
class	the connection ||| connection	count=1
function	similarly to how ||| column reflection	count=1
function	join object given ||| create join	count=1
arg	schema [arg_2] ||| [arg_2] [arg_1]	count=4
function_arg	[function_1] action ||| [arg_2] [function_1]	count=4
class	may have been ||| query	count=1
arg	given querycontext ||| context path loadopt	count=1
class	driver must ||| suite requirements	count=1
function	setter method ||| setter	count=1
class	identifier ||| oracle identifier	count=1
function	the first row ||| scalar	count=1
function_arg	two values [arg_2] ||| [arg_2] [function_1]	count=1
class	when the :meth ||| events	count=1
function_arg	oid for [arg_2] ||| [arg_2] [function_1]	count=2
function	connection ||| connect	count=4
function	self-referential ||| self referential	count=1
function	mapper dependencyprocessor ||| mapper	count=1
function_arg	[function_1] [arg_2] repr messaging on failure ||| [function_1] [arg_2]	count=3
function	first ||| first init	count=2
class	associated with this :class ||| mapper property	count=1
function	have been refreshed ||| refresh flush	count=1
function	collection 'bulk replace' ||| bulk replace	count=1
module_class	the first result of [module_1] [class_2] ||| [module_1] [class_2]	count=2
function_arg	[function_1] equality ||| [arg_2] [function_1]	count=3
class	backwards compat for ||| attribute	count=1
arg	check the existence of ||| connection sequence_name schema	count=1
function	[function_1] foreign table ||| [function_1] [function_2]	count=1
function	implement the >= ||| ge	count=1
arg	of this attribute ||| attribute	count=1
function_arg	[function_1] [arg_2] ||| [function_1] returning compiler [arg_2]	count=6
function	[function_1] literal ||| [function_1] [function_2]	count=3
class	the purpose ||| base	count=1
function	[function] a ||| create [function]	count=2
class	new selectable with the ||| generative select	count=2
arg	that meet ||| type_ state halt_on	count=1
module	allows initialization from kwargs ||| ext	count=1
function	[function_1] keys in ||| [function_2] [function_1]	count=4
arg	value on ||| value initiator	count=1
module	object allowing user-defined ||| orm	count=1
function	list of foreign ||| foreign	count=1
arg	a cursor ||| cursor statement parameters	count=2
class	names and data ||| result meta data	count=2
class	and [class_2] ||| [class_1] [class_2]	count=1
function_arg	execute [arg_2] ||| [function_1] cursor [arg_2]	count=1
class	compiled result ||| result	count=1
function_arg	[function_1] set action ||| [arg_2] [function_1]	count=4
arg	sets ||| states_to_update	count=1
function	extract ||| parse	count=1
function	:class dialect that ||| dialect cls	count=1
arg	an instance when its ||| oldinit instance	count=1
arg	with ||| msg	count=4
class	_unboundload() object into a ||| load	count=1
function	provide an implementation of ||| do	count=1
class	given identifier ||| oracle identifier	count=1
module	be associated ||| orm	count=1
function	pending actions for a ||| state actions	count=1
module	of the class that ||| ext declarative	count=1
function	of group [function_2] ||| [function_2] [function_1]	count=1
module	allows initialization ||| ext	count=1
function	[function] set of ||| bool [function]	count=1
class	the ||| session	count=2
function	either present directly on ||| immediate cls	count=1
function_arg	from a [arg_2] ||| [arg_2] [function_1]	count=1
function	primary key constraint on ||| pk constraint	count=2
arg	compiled regex ||| regex cleanup	count=1
class	:func ||| column operators	count=2
function	server [function_2] ||| [function_2] [function_1]	count=3
module	to [module] ~ ||| [module]	count=1
class	ddlelement conditionally ||| ddlelement	count=1
function	[function_1] the update ||| [function_2] [function_1]	count=6
module_class	[module_1] exists ||| [module_1] [class_2]	count=8
module_class	[module_1] cte, or ||| [module_1] [class_2]	count=8
module_class	this sequence from ||| sql sequence	count=1
function	dialect that will ||| dialect cls	count=1
function	for o ||| id	count=1
module	which ||| orm	count=2
module	expression ||| sql	count=3
function	to ||| with	count=1
function	the object allowing ||| attr	count=1
class	keys which do ||| instance	count=1
function	extend a ||| extend	count=1
module	this connection's [module] connection but ||| [module]	count=1
function	and refresh the ||| refresh	count=1
function	a setter ||| setter	count=1
arg	have [arg_2] ||| [arg_2] [arg_1]	count=4
function	a descending ||| desc	count=1
class	a :term returning ||| base	count=1
function	[function_1] values for ||| [function_1] [function_2]	count=1
class	a new selectable with ||| select	count=4
function_arg	assert [function_1] [arg_2] on failure ||| [function_1] [arg_2]	count=2
function	pool [function_2] ||| [function_1] [function_2]	count=1
class	produce a :func ||| column	count=2
function_arg	[function_1] [arg_2] ||| [function_1] to savepoint [arg_2]	count=2
function	variety of mysql on ||| skip mysql on	count=1
class	with ||| mapper	count=1
function	have execute() [function_2] ||| [function_1] [function_2]	count=1
function	raises integrityerror when reporting ||| raises integrity error	count=1
arg	on the given instance ||| instance key	count=1
arg	[arg] attribute ||| [arg] key	count=1
module	:term returning ||| sql	count=1
class	option may not apply ||| option	count=1
function	the default execution_options dictionary ||| execution options	count=1
class	this :class ||| mapper property	count=1
function	of columns ||| columns	count=1
arg	given cls ||| cls	count=1
function	eager [function] stored by ||| unbake subquery [function]	count=1
function	[function_1] side ||| [function_1] [function_2]	count=1
class	return a composite ||| composite	count=1
arg	override the generation of ||| from_table extra_froms from_hints	count=1
function_arg	within the given deferred [function_1] [arg_2] should be undeferred ||| [function_1] [arg_2]	count=1
function	"persistent to transient" ||| persistent to transient	count=2
class	pool ||| thread pool	count=1
function	new ||| init	count=3
arg	given instance ||| instance property	count=1
function	an insert ||| insert	count=1
function	the + ||| add	count=1
class	the set of ||| instance	count=1
arg	an instance when ||| mapper class_ oldinit instance	count=1
module	engine interfaces dialect ||| engine	count=1
function	implement the in ||| in	count=1
function	[function] same ||| threading with [function]	count=1
function	the first ||| first init	count=1
function	[function_1] '%' as ||| mod operator [function_2] [function_1]	count=3
arg	[arg_1] callable that ||| [arg_1] [arg_2]	count=2
arg	the persistence ||| flush_context attrs	count=1
function	"pending to ||| pending to	count=1
arg	tuple producing method ||| meth	count=1
module_class	that this query ||| orm query	count=1
function	the ||| traverse	count=1
function_arg	all attributes unconditionally ||| all dict_ instance_dict	count=1
function	bulk insert of the ||| bulk insert mappings	count=1
function	[function_1] [function_2] 'modulus' operator ||| mod operator [function_2] [function_1]	count=4
arg	updated [arg] ||| [arg]	count=3
class	the set ||| state	count=1
arg	col ||| col	count=1
module	[module] a ||| [module]	count=5
arg	provided by keyfunc ||| keyfunc	count=1
arg	to a session ||| session	count=2
arg	[arg] the ||| cursor statement [arg]	count=1
arg	dbapi connection is ||| dbapi_connection connection_record	count=2
function	actual join ||| join	count=1
function	driver name ||| driver	count=1
function_arg	arbitrary [arg_2] ||| [function_1] [arg_2]	count=1
class	fromclause is ||| from clause	count=1
arg	"lazy load" query from ||| effective_path	count=1
module	for date ||| dialects	count=1
arg	by visitors ||| obj opts visitors	count=1
function	decimal separator ||| decimal	count=1
function	a ||| column	count=1
arg	a select statement ||| select	count=2
arg	sets a and b ||| a b	count=1
function	more group [function] ||| group [function]	count=3
function	the generic [function] ||| precision generic [function]	count=1
function	the first ||| scalar	count=1
function	of group [function_2] ||| [function_1] [function_2]	count=1
function	return a ||| get table names	count=1
function	table names to ||| drop names	count=1
function	apply column labels to ||| with labels	count=1
arg	callable that ||| callable_ state	count=1
function	deleted within a session ||| deleted	count=1
function	newly resulting ||| prefix with	count=1
function_arg	[function_1] instance ||| [function_1] [arg_2]	count=2
function	collection 'bulk replace' event ||| bulk replace	count=1
function	python descriptor ||| descriptor	count=1
class	set of keys which ||| state	count=1
class	compat for [class_2] ||| [class_2] [class_1]	count=1
class	make use of a ||| values	count=1
function	refreshed from ||| refresh	count=1
class	for the ||| base	count=1
function	rollback ||| soft rollback	count=2
function	mapped by the tables ||| mapped	count=1
function	[function_1] schema ||| [function_2] [function_1]	count=1
function	associated with this :class ||| memoized attr	count=1
function	character set in use ||| detect charset	count=2
function	dialect class corresponding ||| dialect	count=1
function	[function_1] elements ||| [function_2] [function_1]	count=1
module_class	this [class_2] ||| [module_1] [class_2] except	count=3
function	be associated ||| memoized	count=1
function	[function_1] small ||| [function_1] [function_2]	count=3
function	offset/limit is ||| wo limit offset	count=1
function	append ||| append	count=9
function	[function_1] arguments ||| [function_1] [function_2]	count=4
function	about unique ||| unique	count=2
function	allowing user-defined ||| memoized attr	count=1
arg	instance ||| mapper connection instance	count=4
module_class	:class timestamp ||| sql timestamp	count=1
function	emitting a ||| emits	count=1
arg	sql expression ||| expression	count=1
class	execution context for ||| execution context	count=1
module	associated with this :class ||| orm	count=1
class	the object ||| mapper	count=1
function	in [function_2] ||| [function_1] [function_2] commands uowtransaction table	count=1
arg	structure ||| opts	count=1
function	an item [function] ||| [function] primary	count=1
function	plain percent '%' ||| percent sign	count=1
class	[class] to this ||| execution [class]	count=1
function	[function_1] jdbc ||| [function_2] [function_1]	count=1
class	driver must raise a ||| suite requirements	count=1
class	exists() construct ||| exists	count=1
function	warnings [function_2] ||| [function_2] [function_1]	count=1
function_arg	an insert [arg_2] ||| [arg_2] [function_1]	count=1
arg	the given instancestate ||| state dict_	count=1
function	a result row ||| result	count=1
class	the underlying logger ||| logger	count=5
function	in ||| get	count=2
function_arg	[function_1] name ||| orm undefer [function_1] loadopt [arg_2]	count=1
function_arg	[function_1] a composite-capable ||| [function_1] [arg_2]	count=1
arg	given mapped descriptor ||| attribute	count=2
class	add a config as ||| config	count=1
function	elements such ||| elements	count=1
class	a :func ||| clause	count=1
function_arg	sequence [arg_2] ||| [function_1] [arg_2]	count=1
function	wrap ||| wrap callable	count=2
function	[function_1] with ||| [function_2] [function_1]	count=1
function	data type from a ||| type	count=1
arg	given identity key from ||| key refresh_state lockmode	count=1
module_class	[module_1] select() construct ||| [module_1] [class_2] except	count=1
arg	persistence of the ||| flush_context	count=1
function	create the [function_2] ||| [function_2] [function_1]	count=3
class	purpose of fetching ||| base	count=1
module	mysql keywords ||| dialects mysql	count=1
class	a fromclause is ||| from clause	count=1
function	like ||| fetchone	count=1
function	be associated ||| attr	count=1
arg	clone ||| opts	count=1
module	the ||| orm	count=5
class	for the mapped ||| state	count=1
arg	alias of the ||| alias name	count=1
arg	generate ||| dml whereclause	count=2
function	return a namespace ||| column attrs	count=1
arg	a value on the ||| value initiator	count=1
function	is bound to an ||| is bound	count=1
function	[function_1] from clause ||| [function_2] [function_1]	count=2
function	a cte is ||| init cte state	count=1
arg	and ||| obj opts	count=1
function	loads ||| raiseload	count=1
function	synonym for :func joinedload_all() ||| eagerload all	count=1
function	an object ||| object	count=1
function	that relates the ||| with parent	count=1
function	execute() [function_2] ||| [function_1] [function_2]	count=1
function	simple constructor ||| declarative constructor	count=1
class	this :class history ||| history	count=1
function	single [function] id ||| set [function]	count=1
module	a transaction on this ||| orm	count=1
function	the "offset or ||| or	count=1
function	[function_1] table names ||| [function_2] [function_1]	count=16
function	the :class dialect that ||| dialect cls	count=1
function	if a cte is ||| init cte state	count=1
arg	the ||| obj	count=1
function	[function_1] update of ||| [function_2] [function_1]	count=3
arg	for schema table_name ||| connection table_name schema	count=2
module	clone the given expression ||| sql	count=1
function	[function_1] [function_2] to ||| [function_2] [function_1]	count=3
function	instance's class ||| state class	count=2
module_class	[module_1] query or ||| [module_1] [class_2]	count=2
arg	where clause of ||| clause	count=1
arg	element ||| element	count=2
arg	for connection results ||| connection	count=2
function	the % ||| rmod	count=1
function	mysql on windows failures ||| mysql on windows	count=1
arg	sql expression [arg_2] ||| [arg_1] [arg_2]	count=1
function	and execute ||| execute	count=2
class	that this option ||| mapper option	count=1
function	close the ||| close	count=1
class	be ||| property	count=1
function	append a [function_2] ||| [function_1] [function_2]	count=2
function_arg	within the given deferred [function_1] [arg_2] should be undeferred ||| orm undefer [function_1] loadopt [arg_2]	count=1
module	properties ||| orm	count=1
function	cursor [function_1] [function_2] ||| core connection events [function_2] [function_1] conn cursor	count=3
function	the server [function_2] ||| [function_1] [function_2]	count=1
class	for the purpose of ||| base	count=1
function	name ||| name	count=4
function	mysql on [function_2] ||| [function_1] [function_2]	count=1
class	joined [class_2] ||| [class_1] [class_2]	count=1
function	item from [function_2] ||| [function_2] key [function_1]	count=1
arg	produce labeled columns present ||| column populate_result_map asfrom	count=1
function	set of columns ||| columns	count=1
class	by this ||| proxy	count=1
arg	result ||| query	count=1
function	use of a :term ||| return	count=1
arg	expression structure ||| obj	count=1
arg	transaction is ||| transaction	count=1
class	if this option ||| mapper option	count=1
class	fetching server-side expressions and ||| base	count=1
function_arg	return information [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	[function_1] schema ||| [arg_2] [function_1]	count=7
arg	mapping dictionaries ||| mappings	count=2
class	make use of ||| values base	count=1
class	[class] applying the ||| [class]	count=1
class	condition ||| condition	count=1
class	receive ||| mapper extension	count=6
class	use of a ||| base	count=1
function	has [function_2] ||| [function_2] [function_1]	count=1
function	currently selected [function_2] ||| [function_1] [function_2]	count=3
function	join object given two ||| join	count=1
function	of all :class ||| column	count=1
function	remove an ||| remove	count=1
function	with ||| attr	count=1
function	unique [function_2] ||| [function_2] [function_1]	count=4
function_arg	a set [arg_2] ||| [function_1] [arg_2]	count=1
function	if a cte ||| init cte	count=1
class	bulk ||| queryable attribute	count=1
class	transaction in ||| session	count=2
function	with four ||| floats to four	count=1
function	postsortrecs as well ||| actions	count=1
class	fetching ||| values base	count=2
function	from ||| key from	count=1
arg	new :class columnelement representing ||| selectable name name_is_truncatable	count=1
function	apply ad-hoc instrumentation from ||| collection attributes	count=1
function	table names on the ||| table names	count=1
module	search for a ||| dialects	count=1
function	from an identity map ||| identity key from	count=1
arg	given querycontext ||| entity path loadopt	count=1
arg	two-way relationship ||| attribute key uselist	count=1
function	new cursor generated ||| create cursor	count=1
function	expression structure ||| cloned traverse	count=1
class	execution [class_2] ||| [class_1] [class_2]	count=3
function_arg	[function_1] all future ||| [arg_2] [function_1]	count=3
function	boolean expressions as columns ||| boolean col expressions	count=1
module	a ||| declarative	count=1
class	receive connection arguments ||| dialect events	count=1
module	data ||| orm	count=1
arg	a connection ||| connection name	count=2
class	the [class] condition ||| [class]	count=1
arg	persisted database ||| table	count=1
arg	perform ||| synchronize_session update_args	count=1
arg	retrieves a given state ||| state attribute_names	count=1
arg	the given iterator ||| iterator obj	count=1
function	allowing ||| traverse	count=1
arg	dbapi connection ||| dbapi_connection	count=4
module	one or more ||| orm	count=1
function	default instancestate if ||| new state if	count=1
function	a set of all ||| all	count=1
class	:func ~ expression ||| column operators	count=2
module	user-defined data to ||| orm	count=1
class	a :class query ||| query	count=4
function	table name ||| table	count=1
arg	provides a ||| comparator_factory descriptor doc info	count=1
arg	constructor is called ||| kwargs	count=1
function	attributes ||| attributes	count=1
function	returns ||| checkin	count=1
class	to the property to ||| mapper property	count=1
arg	sets of values to ||| states_to_update bulk	count=1
class	given [class] ||| [class]	count=3
class	thread ||| thread local	count=1
function_arg	[function_1] two-way ||| [arg_2] [function_1]	count=1
function	emit delete [function_2] ||| [function_1] [function_2]	count=3
function	[function_1] similarly ||| [function_2] [function_1]	count=4
function	[function_1] [function_2] ||| [function_1] [function_2]	count=1943
class	with compiled result column ||| result meta	count=1
function	remove pending actions ||| remove state actions	count=1
function	attribute keys which ||| keys	count=1
class	a compiled that is ||| compiled	count=1
arg	load table ||| connection table include_columns exclude_columns	count=1
class	if the given identifier ||| oracle identifier	count=1
function_arg	[function_1] object corresponding ||| [arg_2] [function_1]	count=1
function	sequence in ||| sequence	count=1
function	schema from ||| schema	count=1
function	[function] to ||| [function]	count=2
module	allows ||| ext declarative	count=2
arg	function to ||| fn	count=2
class	collection with keying provided ||| mapped collection	count=1
arg	alias of the given ||| alias name flat	count=1
function	return [function_1] [function_2] ||| engine dialect [function_1] [function_2]	count=2
arg	right ||| right onclause isouter	count=1
class	compiled that ||| compiled	count=1
arg	roles are present and ||| roles	count=1
function	subquery eager [function] stored by ||| unbake subquery [function]	count=1
function	of inserted ||| inserted	count=1
module_class	[module_1] :class session ||| [module_1] [class_2]	count=16
function_arg	transient [arg_2] ||| orm make [function_1] to detached [arg_2]	count=1
module	has ||| ext declarative	count=1
function	inserted ||| inserted	count=1
function	to have execute() ||| do execute	count=4
function	of table [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] count ||| [function_2] [function_1]	count=2
function	provide ||| update	count=1
function	defaults ||| return defaults	count=1
arg	within the persistence of ||| target flush_context	count=1
function	[function_1] select ||| [function_1] [function_2]	count=2
module	given :class ||| sql	count=1
function_arg	kwargs for [arg_2] ||| [function_1] [arg_2]	count=1
function	run del events ||| del	count=1
arg	when a connection is ||| dbapi_connection connection_record	count=1
function	full ||| full	count=1
class	[class] limited to ||| sharded [class]	count=3
class	execution ||| execution	count=3
function	implements the ||| implements	count=1
arg	column expression ||| column	count=1
function	"persistent to [function_2] ||| [function_1] [function_2]	count=1
function	plain percent [function_2] ||| mod operator [function_2] [function_1]	count=2
function	many [function_2] ||| [function_1] significant [function_2]	count=1
function	ms-sql puts top ||| get select precolumns	count=1
class	receive an object instance ||| mapper extension	count=4
function	a dbapi-level exception such ||| graceful disconnects	count=1
function	:class dialect ||| dialect	count=1
class	[class] mapper ||| mapper [class]	count=1
function	the insert ||| param insert	count=1
function	to the given partial ||| partial	count=1
function	sort the given list ||| sort	count=1
class	an execution ||| execution context	count=1
module	:class columnproperty ||| orm	count=1
function	[function_1] view names ||| [function_2] [function_1]	count=10
class	json type ||| json	count=1
function_arg	[function_1] the persistence ||| [arg_2] [function_1]	count=3
function	given order [function_2] ||| [function_1] [function_2]	count=2
function	returning clause ||| returning	count=1
function	select a numeric ||| numeric	count=1
module	fetching ||| sql	count=1
class	[class_1] execution ||| [class_2] [class_1]	count=1
class	that ||| property	count=2
function	[function_1] a criteria ||| [function_1] [function_2]	count=2
module	decorate a method ||| orm	count=1
arg	a :class ||| bind	count=1
function	a minimized set of ||| optimized get statement	count=1
class	the ||| base	count=1
function	unique ||| unique	count=2
function	to select a numeric ||| from numeric	count=1
function	execute after any ||| after	count=1
function	a namespace of all ||| attrs	count=1
function	recover list ||| do recover twophase	count=1
class	new selectable with the ||| select	count=4
class	[class_1] expression ||| [class_1] [class_2]	count=1
function_arg	[function_1] b with ||| [function_1] a [arg_2]	count=4
class	:class session for ||| session	count=1
function_arg	new [arg_2] ||| [arg_2] [function_1]	count=3
arg	[arg_1] transaction ||| [arg_2] [arg_1]	count=4
function	and issues a deprecation ||| deprecated	count=1
function	[function_1] names on ||| [function_1] [function_2]	count=12
function	the oid ||| table oid	count=1
function	collection adapter ||| collection	count=1
function	1 ||| count from 1	count=2
function	sequence in the ||| has sequence	count=1
class	the mapped [class] including ||| [class]	count=1
function	return a string describing ||| instance str	count=1
function_arg	update [arg_2] ||| [function_1] [arg_2]	count=2
arg	the existence of a ||| connection sequence_name schema	count=1
module_class	fetch the first [module_1] [class_2] unconditionally ||| [module_1] [class_2]	count=3
function	only if a cte ||| init cte state	count=1
function	create table ||| create table	count=1
function	[function_1] as ||| [function_1] [function_2]	count=2
function	of an update ||| update	count=1
class	its mapper ||| mapper	count=1
class	execute ||| default execution context	count=1
class	data to ||| mapper property	count=1
arg	an item by value ||| value	count=1
function	have some set of ||| overlap	count=1
arg	particular ||| order_by	count=1
module	have a ||| orm	count=1
arg	[arg_1] :class ~ ||| [arg_2] [arg_1]	count=4
function	intersect [function] of ||| intersect [function]	count=1
function	create ||| create table	count=2
arg	generate a ||| dml whereclause	count=1
class	attribute with an ||| attribute	count=1
function	of table ||| table	count=1
function	before a connection ||| connect	count=1
arg	keyfunc ||| keyfunc	count=1
class	values for ||| query	count=1
function	soft close this ||| soft close	count=1
function	[function_1] collection ||| [function_1] [function_2]	count=4
function	raises ||| raises	count=1
function	class :class ||| class	count=1
function	unsorted collection of postsortrecs ||| actions	count=1
class	list ||| list	count=3
class	a list of string ||| key	count=1
arg	modifications ||| obj opts	count=1
arg	of mapping dictionaries ||| mapper mappings	count=2
function	given partial [function_2] ||| [function_2] [function_1]	count=1
function_arg	with the [arg_2] ||| [function_1] element [arg_2]	count=2
function	object allowing user-defined ||| memoized attr	count=1
function	expressions ||| return	count=1
arg	[arg] attribute firing ||| [arg] key	count=1
module	string to ||| mysql	count=1
class	given ||| oracle dialect	count=2
function	produce a descending order ||| create desc	count=1
class	the set of keys ||| state	count=1
function	applied [function] ||| instrument [function]	count=1
function	table names ||| table names	count=9
function	[function_1] key columns ||| [function_2] [function_1]	count=3
function	have execute() [function_2] ||| [function_2] [function_1]	count=1
function	count ||| count	count=2
function	return a scalar result ||| scalar	count=1
function	prepare a two phase ||| do prepare	count=1
arg	identity key from ||| query key refresh_state	count=1
function	from clause specific to ||| from clause	count=1
function	called before ||| pre	count=1
function	local synonym matching the ||| synonym	count=1
function	a numeric value ||| from numeric	count=1
function	[function_1] values for ||| [function_2] [function_1]	count=1
function	provide an implementation ||| do	count=1
function	[function_1] insert of ||| [function_1] [function_2]	count=3
module	with this :class ||| orm	count=1
arg	given ||| obj opts	count=1
class	an identifier ||| identifier preparer	count=1
function	[function_1] processor ||| [function_2] [function_1]	count=8
function	execute after ||| after	count=3
module	by ||| sql	count=1
function	[function_1] binops ||| [function_1] [function_2]	count=1
function	expression nullslast clause against ||| nullslast	count=1
function	[function_1] [function_2] ||| [function_2] key [function_1]	count=6
function	return the :class dialect ||| get dialect cls	count=1
arg	identity key from the ||| key	count=1
class	object instance ||| instance events	count=2
class	two phase ||| session	count=1
module	iterate through [module] ||| [module]	count=1
module	special mysql keywords ||| mysql	count=1
module	specified ||| orm	count=1
class	receive connection ||| dialect events	count=1
function	generate the full unsorted ||| generate	count=1
function	elements ||| copy	count=1
function	[function_1] as the ||| mod operator [function_2] [function_1]	count=3
class	returning clause for the ||| values base	count=1
function	plain percent '%' as ||| as percent sign	count=1
function	particular sequence ||| has sequence	count=1
function	puts top it's version ||| precolumns	count=1
function	remote ||| constraint remote	count=2
function	[function_1] identity map ||| [function_2] key [function_1]	count=3
function	schema [function] wrapper/hook ||| [function]	count=1
function	expression ||| traverse	count=1
module	a declarative ||| ext	count=1
function	update statements corresponding ||| post update statements	count=2
class	backwards compat for impl ||| attribute impl	count=1
arg	search ||| search	count=1
module	the inter-mapper relationships ||| orm	count=1
class	produce a ||| column	count=2
class	of a ||| values	count=1
class	oursql isn't super-broken like ||| my sqldialect oursql	count=1
module	the current transaction ||| orm	count=2
function	delete construct ||| delete	count=1
function	attribute return ||| get	count=1
module	for two phase commit ||| orm	count=1
arg	given backend ||| table_name	count=1
function	row processing functions ||| row processor	count=1
class	return an ||| cls	count=1
module_class	to [module_1] [class_2] ||| [module_1] [class_2]	count=3
function	scalar result ||| scalar	count=2
arg	a ||| dialect	count=3
function	exists ||| exists	count=1
arg	persisted database state ||| table state	count=2
function_arg	[function_1] new ||| [arg_2] [function_1]	count=1
class	create ||| default dialect	count=1
function	warning [function_2] ||| [function_2] [function_1]	count=4
class	for the ||| values base	count=1
module	called by subclasses ||| core	count=1
arg	instance ||| instance attribute_names	count=1
function_arg	assert [function_1] [arg_2] messaging on failure ||| [function_1] [arg_2]	count=2
function	use random-ordering sets within ||| randomize unitofwork	count=1
module_class	of [module_1] [class_2] given selectable ||| [module_1] [class_2] union	count=1
function	table objects ||| tables	count=1
function	a join ||| join left	count=1
arg	table description from ||| connection table	count=1
function	with many ||| many	count=1
module	initialize the inter-mapper relationships ||| orm	count=1
module_class	to this [class_2] ||| [module_1] [class_2]	count=12
function	the :class dialect ||| dialect cls	count=1
module	associated with ||| orm	count=1
function	information about unique constraints ||| unique constraints	count=2
class	called ||| mapper events	count=1
function	a bulk update ||| bulk update	count=3
function	[function_1] to transient" ||| [function_1] [function_2]	count=2
class	provide a relationship ||| relationship property	count=1
function	offset/limit is ||| wo limit	count=1
class	condition suitable for ||| join condition	count=1
function	or one of a ||| or	count=1
function	general class of ||| affinity	count=1
arg	constraint ||| constraint	count=2
arg	key from ||| query key	count=1
class	all occurrences of fromclause ||| from clause	count=1
function	to use in update ||| post update	count=1
function	[function_1] constraints ||| [function_1] [function_2]	count=8
class	into a ||| unbound load	count=1
function	about unique constraints in ||| unique constraints	count=2
function	representation of python ||| time	count=1
class	do not ||| instance state	count=1
function_arg	[function_1] function to ||| [arg_2] [function_1]	count=6
function_arg	[function_1] using gen_id() ||| [function_1] [arg_2]	count=4
class	this option may not ||| mapper option	count=1
arg	given key in the ||| key	count=1
function_arg	a new [arg_2] ||| [function_1] [arg_2]	count=3
arg	schema table_name ||| table_name schema	count=2
class	bindparameter to the ||| parameter	count=1
function	[function_1] call ||| [function_1] [function_2]	count=1
function_arg	converts the [arg_2] ||| [arg_2] [function_1]	count=4
function	the :class dialect ||| dialect	count=1
function	[function_1] wrapper with ||| [function_1] [function_2]	count=1
function	refresh the ||| refresh	count=1
class	clause ||| base	count=1
class	of fetching ||| base	count=1
arg	fragment [arg_2] ||| [arg_2] [arg_1]	count=1
function	[function_1] jdbc url ||| [function_2] [function_1]	count=1
function_arg	[function_1] collection attribute ||| [function_1] collection obj [arg_2]	count=1
function	append a join to ||| join left to	count=1
function	return definition for ||| get view definition	count=1
arg	for equality ||| x y	count=1
function	[function_1] metadata for ||| [function_2] [function_1]	count=1
function_arg	[function_1] [arg_2] on failure ||| [function_1] [arg_2]	count=1
function	[function_1] insert or ||| [function_2] [function_1]	count=1
function_arg	== [arg_2] ||| [function_1] a [arg_2]	count=2
function_arg	[function_1] given :class ||| [function_1] [arg_2]	count=1
function	make use of a ||| return	count=1
function	primary key ||| pk	count=1
class	mapped [class] including its ||| [class]	count=1
function	table of ||| table	count=1
function_arg	literal parameter [arg_2] ||| [arg_2] [function_1]	count=3
module	the purpose of fetching ||| sql	count=1
function	begin a ||| begin	count=2
arg	all relationships that meet ||| type_ state halt_on	count=1
function	numeric value ||| from numeric	count=1
module	all :class ||| orm	count=3
function_arg	is [arg_2] ||| [arg_2] [function_1]	count=5
class	use of a ||| values base	count=1
arg	expression structure allowing ||| obj opts	count=1
function_arg	for level ||| for level	count=1
class	if ||| condition	count=1
function	a savepoint with ||| do savepoint	count=1
function	return the [function_2] ||| [function_1] [function_2]	count=8
arg	table_name ||| table_name	count=12
arg	registry which can be ||| registry metadata	count=1
class	all ||| class manager	count=1
function	form the actual join ||| join	count=1
class	the instance ||| instance	count=1
function	raw dbapi error ||| dbapi error	count=2
arg	a given state ||| state	count=1
class	resulting [class] ||| [class]	count=1
function	[function_1] primary ||| [function_1] [function_2]	count=1
function	a descending order by ||| desc	count=1
function	which will omit ||| correlate except	count=1
function	more group [function] query and ||| group [function]	count=1
arg	for a given querycontext ||| context entity path loadopt	count=1
module_class	of [module_1] [class_2] against the given selectable ||| [module_1] [class_2]	count=3
function	first time ||| first	count=1
function	[function_1] cursor generated ||| [function_1] [function_2]	count=1
class	option ||| option	count=2
module	a method as ||| orm	count=1
function	a select ||| select	count=1
function_arg	[function_1] [arg_2] ||| [function_1] begin session [arg_2]	count=2
arg	a table ||| base tablename table	count=1
function	to proceed after a ||| fetch rows post commit	count=1
arg	level ||| level	count=1
function	dialect implements ||| implements	count=1
class	which ||| query	count=1
function	merge a result into ||| merge result	count=1
function	clear ||| clear	count=1
module_class	that this [class_2] ||| [module_1] [class_2]	count=8
arg	given instance to a ||| instance	count=1
arg	annotating each [arg_2] ||| [arg_2] [arg_1]	count=1
function	of constraints ||| constraints	count=1
module	add special mysql keywords ||| dialects mysql	count=1
module	with this ||| orm	count=2
function	kwargs for ||| func kwargs	count=1
module	copy of [module] ||| [module]	count=1
module	that allows initialization from ||| declarative	count=1
function	warning on a ||| warning on	count=2
function	[function_1] py ||| [function_2] [function_1]	count=1
arg	[arg_1] state after ||| [arg_1] [arg_2]	count=4
function	row processing functions for ||| create row processor	count=1
function	about unique [function_2] ||| [function_1] [function_2]	count=4
arg	class ||| cls	count=2
function	clause is [function] ||| [function] int	count=2
class	create ||| dialect cx oracle	count=1
function	return information about foreign_keys ||| get	count=1
function	make use ||| return	count=1
class	for ||| base	count=1
function_arg	create [arg_2] ||| [function_1] session [arg_2]	count=1
function	a [function] ||| get [function]	count=2
function_arg	[function_1] given cls ||| [arg_2] [function_1]	count=1
class	:class ||| bind	count=2
arg	alias ||| alias	count=2
function	a view [function_2] ||| [function_1] [function_2]	count=4
arg	given expression ||| obj opts	count=1
class	the set of ||| state	count=1
function	only if a cte ||| cte state	count=1
function	check the ||| check	count=1
module	of keys which ||| orm	count=1
module	given expression ||| sql	count=1
function	dialect implements the executioncontext ||| implements	count=1
class	code that ||| property	count=1
function	associated with this ||| memoized attr	count=1
class	fetching server-side expressions ||| values base	count=1
function	save of the given ||| save	count=1
arg	the given instance ||| instance key	count=1
module	mediuminteger ||| dialects mysql	count=1
function	the dependencyprocessor operates ||| for dep	count=1
function	id ||| id	count=1
arg	required state for a ||| follower_ident	count=1
class	~sqlalchemy engine interfaces dialect ||| engine	count=1
class	into ||| unbound load	count=1
class	for ||| values base	count=2
function	be associated with ||| attr	count=1
function	foreign key ||| foreign key	count=2
function	representation of python datetime ||| datetime historic	count=1
class	the ||| operators	count=2
function_arg	object for [arg_2] ||| [arg_2] [function_1]	count=1
module	against this ||| sql	count=2
arg	an alias of the ||| alias	count=1
function	provide bound metadata for ||| provide metadata	count=1
function	given expression structure using ||| traverse using	count=1
function	to select a numeric ||| numeric	count=1
function_arg	assert [function_1] [arg_2] repr messaging on failure ||| [function_1] a [arg_2]	count=1
module	the class that ||| ext declarative	count=2
function	[function_1] wrapper with ||| [function_2] [function_1]	count=1
function	to use in update ||| update	count=1
function	identity map ||| identity key	count=1
function	[function_1] names on ||| [function_2] [function_1]	count=12
function	dialect accepts [function] the ||| date coerces from [function]	count=1
function	annotate 'remote' ||| annotate remote	count=1
function_arg	values for [arg_2] ||| [function_1] [arg_2]	count=1
module	search for a local ||| dialects oracle	count=1
module	table to this ||| sql	count=1
class	for two phase ||| session	count=1
function	float [function_2] ||| generic [function_1] [function_2]	count=1
class	the set ||| instance state	count=1
arg	fragment [arg_2] ||| a [arg_1] [arg_2]	count=1
arg	persistence ||| target flush_context	count=1
function	of postsortrecs ||| actions	count=1
arg	attribute and return ||| dict_ key	count=1
function	percent '%' ||| percent sign	count=1
class	query ||| query	count=20
function	default execution_options dictionary ||| execution options	count=1
function	supports values with many ||| precision numerics many	count=1
function	insert [function_2] ||| [function_2] [function_1]	count=6
module	return a ||| orm	count=2
function	[function_1] [function_2] details ||| my sqltable definition parser [function_1] [function_2] line state	count=1
function	to be associated with ||| attr	count=1
module	the class [module_2] ||| [module_2] [module_1]	count=2
function	[function_1] distinct ||| [function_2] [function_1]	count=3
module	called exactly once ||| core	count=1
module_class	an [class_2] ||| [module_1] [class_2] load target context	count=3
arg	object ||| object	count=1
module_class	an [class_2] ||| [module_1] [class_2]	count=11
function	expression delivering column comparisons ||| visit binary product	count=1
arg	given expression structure ||| obj	count=1
function	any method ||| any	count=1
function	a list of temporary ||| temp	count=4
class	an attribute ||| collection attribute impl	count=2
arg	set the [arg_1] [arg_2] attribute firing history events ||| orm set attribute [arg_2] key [arg_1]	count=2
function	bulk [function_2] ||| [function_1] [function_2]	count=13
function_arg	== [arg_2] ||| [arg_2] [function_1]	count=5
function	set ||| set	count=13
class	this attribute with ||| attribute impl	count=1
module	decimal ||| dialects mysql	count=1
arg	function for the ||| identifier fn	count=1
function	table of the ||| table	count=1
function	return an ||| get	count=3
module_class	[module_1] datetime type ||| [class_2] [module_1]	count=1
function	related ||| enable relationship loading	count=1
class	be associated with this ||| mapper property	count=1
class	config as one of ||| config	count=1
function	rollback the ||| rollback	count=1
class	an ||| collection	count=1
function	to a flush ||| flush	count=1
function_arg	[function_1] two-way relationship ||| [function_1] [arg_2]	count=1
class	of ||| instance state	count=1
class	query ||| baked query	count=1
function	the "persistent [function_2] ||| [function_1] [function_2]	count=2
class	add values ||| query	count=1
arg	a subclass to ||| class_ factory	count=1
function	row [function_2] ||| [function_1] [function_2]	count=4
function	extract [function_2] ||| my sqltable definition parser [function_1] [function_2] line state	count=1
class	names and [class_2] ||| [class_2] [class_1]	count=1
module	to [module] single ||| [module]	count=1
function_arg	[function_1] a new ||| [arg_2] [function_1]	count=1
function	instrumented by the attributes ||| instrumented	count=1
function	:term returning clause for ||| return	count=1
function	:class mapper ||| mapper	count=1
function	close the given ||| close	count=1
arg	definitions from the ||| schema views only	count=1
class	a compiled ||| compiled	count=1
class	the primary column ||| column	count=1
function	wrapper with ||| with	count=1
function	clause for the ||| return	count=1
class	data ||| property	count=1
function	cte ||| cte	count=1
module	set ||| dialects mysql	count=1
class	order by expression ||| unary expression	count=2
function	synonym ||| resolve synonym	count=1
function	to be associated with ||| memoized	count=1
module	all ||| orm	count=3
class	associated with ||| property	count=1
function	[function] dbapi ||| [function]	count=1
function	of string keys ||| keys	count=1
function	ad-hoc instrumentation ||| collection attributes	count=1
function	sort the given ||| sort	count=1
function	object allowing user-defined data ||| memoized	count=1
class	events as ||| events	count=2
function	processing functions for a ||| processor	count=1
class	engine interfaces dialect ||| engine	count=1
function	:class table ||| table	count=1
arg	made ||| conn_rec cargs cparams	count=1
function	a union ||| union	count=2
function	load ||| load on ident	count=4
function	method as a 'validator' ||| validates	count=1
function	default schema [function_2] ||| [function_1] [function_2]	count=4
module	and execute this :class ||| sql	count=1
class	current engine's database user ||| inspector	count=1
function_arg	the sequence [arg_2] ||| [arg_2] [function_1]	count=1
function	insert ||| param insert	count=1
arg	allowing modifications by visitors ||| visitors	count=1
function	construct a new :class ||| init	count=2
function_arg	[function_1] given instance ||| [function_1] [arg_2]	count=3
function	methods in ||| methods	count=1
module_class	to this selectable ||| sql generative select	count=2
function	to add limit ||| limit	count=1
module_class	[module_1] the result ||| [module_1] [class_2]	count=6
function	[function_1] update ||| [function_1] [function_2]	count=8
function	configuration arguments ||| arguments	count=1
function	initiate instrumentation of the ||| instrument	count=1
module	of all :class columnproperty ||| orm	count=1
class	clause for the purpose ||| base	count=1
function	compare two values ||| compare values	count=2
function	to be associated with ||| memoized attr	count=1
arg	a particular [arg_2] ||| [arg_2] [arg_1]	count=2
class	oursql isn't super-broken ||| oursql	count=2
function	using "lazy" loading with ||| lazyload	count=1
class	not have a ||| state	count=1
function	expression structure using the ||| traverse using	count=1
module	allowing user-defined ||| orm	count=1
function	to [function_2] ||| [function_2] [function_1]	count=2
class	the ||| values base	count=2
module_class	this :class ||| sql bind	count=1
arg	newly persisted database state ||| table state	count=1
function	self-referential [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] comment ||| [function_1] [function_2]	count=5
function	before a [function_2] ||| [function_1] [function_2]	count=1
module	to [module] :class ||| [module]	count=1
function	the "loaded ||| loaded	count=1
arg	composite-capable ||| columns refcolumns name onupdate	count=1
arg	url ||| cls url	count=1
module	class ||| declarative	count=1
function	default ||| default	count=2
arg	intercept a ||| conn cursor statement parameters	count=1
module_class	[module_1] fromclause ||| [module_1] [class_2]	count=14
function	[function_1] view names ||| [function_1] [function_2]	count=10
function	the // ||| rtruediv	count=1
arg	a two-way ||| attribute key uselist	count=1
function	table names for the ||| table names	count=1
function	compositeproperty ||| composites	count=1
function	of temporary table ||| temp table	count=4
function_arg	assert a [function_1] [arg_2] repr messaging on failure ||| [function_1] [arg_2]	count=4
arg	an instance when its ||| class_ oldinit instance	count=1
function	for the purpose of ||| return	count=1
class	decimal ||| decimal	count=1
function	allowing modifications ||| cloned traverse	count=1
module_class	[module_1] must support ||| [module_1] [class_2]	count=4
function	a dictionary-based ||| mapped	count=2
class	key ||| key constraint	count=1
function_arg	listeners [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	[function_1] is emitted ||| [function_1] mapper [arg_2]	count=1
class	:term returning clause ||| values	count=1
function	[function_1] ordering ||| [function_1] [function_2]	count=5
module	from kwargs ||| declarative	count=1
function	temporary [function_2] ||| [function_1] [function_2]	count=20
function	representation of ||| time	count=1
arg	roles are present ||| cls roles	count=1
function	expression ||| cloned traverse	count=2
function	force ||| force drop	count=1
function	bind parameters which ||| params	count=1
module	[module_1] that ||| [module_2] [module_1]	count=4
arg	instance to ||| instance	count=1
class	operator ||| column operators	count=21
function	initialize a collection ||| init state	count=1
function	be ||| for table	count=2
module	mssql ||| dialects mssql	count=2
function	implement the + ||| radd	count=1
arg	structure allowing modifications ||| obj opts	count=1
function_arg	[function_1] new :class ||| [arg_2] [function_1]	count=1
module	progress for ||| orm	count=1
function	update from syntax ||| update from	count=1
function	update from ||| update from	count=2
function	the given [function_2] ||| [function_2] [function_1]	count=4
function	is attached ||| attach	count=1
function	the >> ||| rshift	count=1
class	provide a relationship ||| relationship	count=1
arg	key from ||| key	count=1
class	a ||| instance	count=1
arg	if the given instance ||| instance include_collections	count=1
function	select() ||| select column	count=1
function_arg	[function_1] within the ||| [function_1] [arg_2]	count=1
function_arg	an update [arg_2] ||| [function_1] [arg_2]	count=2
arg	visitors ||| opts visitors	count=1
function	insert from ||| insert from	count=2
function	a getter ||| getter	count=1
function	dialect that ||| dialect cls	count=1
function	foreign key ||| foreign cols	count=2
function	from clause specific ||| from clause	count=2
module_class	of [module_1] [class_2] ||| [module_1] [class_2]	count=14
module	one or ||| orm	count=1
function	is applied [function] ||| instrument [function]	count=1
class	use ||| values base	count=2
function_arg	the first [arg_2] ||| [arg_2] [function_1]	count=1
arg	consistent format with which ||| keys outerjoin full create_aliases	count=1
function	the update from ||| update from	count=2
class	a new :class query ||| query	count=1
function	and ||| check	count=1
arg	[arg] the ||| connection [arg]	count=2
class	expression ||| column	count=2
class	type when applied ||| type	count=1
class	given ||| dialect	count=1
arg	given function ||| fn	count=1
function	columnclause object that ||| literal	count=1
class	user-defined data to ||| property	count=1
function	structure using the given ||| traverse using	count=1
function	all :class ||| column	count=1
function	as ||| as	count=3
function	temporary table [function_2] ||| [function_2] [function_1]	count=7
arg	attributes have [arg_2] ||| [arg_2] [arg_1]	count=2
arg	instance ||| instance include_collections passive	count=1
module	if this ||| sql	count=3
function	return a ||| get enums	count=1
function	names on ||| names	count=2
function	delete [function_2] ||| [function_2] [function_1]	count=3
arg	the given connection ||| connection	count=1
function	[function_1] type ||| [function_1] [function_2]	count=1
arg	definitions from the database ||| schema views only	count=1
function	mutation [function] for ||| [function] on	count=1
class	when ||| events	count=7
function	as alias ||| as alias	count=2
function	group ||| group	count=3
function	given table names ||| names	count=1
function	result ||| result	count=3
function	a namespace of ||| attrs	count=1
function	iterator of all ||| iterate	count=1
class	the set of keys ||| instance	count=1
arg	intercept [arg] cursor ||| conn cursor statement [arg]	count=1
function	is this ||| is	count=1
function	represent very large values ||| precision numerics enotation large	count=1
function	any rollback has ||| soft rollback	count=1
class	of fetching ||| values base	count=1
class	user-defined data to be ||| mapper property	count=1
arg	traverse an expression and ||| expression consider_as_foreign_keys consider_as_referenced_keys	count=1
function_arg	[function_1] to regex ||| [arg_2] [function_1]	count=1
function	roles ||| roles	count=1
module	prefix for a ||| ext	count=1
function	purpose of fetching server-side ||| return	count=1
function	keys representing ||| column keys	count=1
class	statements are emitted ||| ddlevents	count=2
function	return ||| column	count=1
arg	clone the given ||| obj opts	count=1
function	a dialect-specific result processor ||| cached result processor	count=1
arg	create constraint ||| constraint	count=2
module	by primary ||| orm	count=1
module	bit ||| dialects mysql	count=1
module_class	[module_1] withingroup ||| [module_1] [class_2]	count=2
module_class	iterate [module_1] [class_2] and all ||| [module_1] [class_2]	count=2
function	'constructor' ||| constructor	count=1
function	columnclause object that has ||| literal	count=1
function	[function_1] foreign ||| [function_2] [function_1]	count=4
class	execution context ||| default execution context	count=3
function	update statement is ||| update	count=1
function	version ||| version info	count=2
arg	transaction is the sessiontransaction ||| transaction	count=1
arg	that meet the ||| type_ state halt_on	count=1
function	[function_1] conflict clause ||| [function_1] [function_2]	count=4
function	oid ||| oid	count=1
function	simple constructor that allows ||| declarative constructor	count=1
function	a dictionary-based collection ||| attribute mapped collection	count=2
arg	a new ||| _branch_from	count=1
function	a bulk update ||| bulk update mappings	count=2
function	small values ||| small	count=1
function	filter ||| filter states	count=1
function_arg	[function_1] [arg_2] ||| [function_1] options [arg_2]	count=1
function_arg	connection is [arg_2] ||| [arg_2] [function_1]	count=1
module	more named properties ||| orm	count=1
function	[function_1] save of ||| [function_1] [function_2]	count=3
function	allows initialization from ||| declarative	count=1
function	for on [function_2] ||| [function_2] [function_1]	count=4
arg	all available table definitions ||| bind schema views only	count=1
module	for the purpose ||| sql	count=1
arg	persisted database [arg_2] ||| [arg_2] [arg_1]	count=4
arg	mapping dictionaries ||| mappings return_defaults render_nulls	count=1
function	[function_1] in union ||| [function_2] [function_1]	count=2
class	its mapper in ||| mapper	count=1
function_arg	[function_1] a two-way ||| [arg_2] [function_1]	count=2
function	'ddl runner' for ||| check for	count=1
function	names on the ||| names	count=2
function	a bound [function_2] ||| [function_1] [function_2]	count=1
function	many ||| numerics many	count=1
function_arg	[function_1] mapper as ||| [function_1] concrete base [arg_2]	count=1
module	transaction and return ||| engine	count=1
function	name presented ||| name	count=1
function	emitting ||| emits	count=1
module_class	[module_1] [class_2] it has been created ||| [module_1] [class_2] load target context	count=2
arg	[arg_1] table_name ||| [arg_2] [arg_1]	count=6
arg	and ||| obj	count=1
arg	given ||| dialect	count=1
function	return information about ||| get foreign	count=1
function_arg	keys [arg_2] ||| [function_1] [arg_2]	count=1
function	the results ||| all	count=1
function_arg	converts the results ||| rowset results	count=2
function	extended lookup ||| locate extended	count=1
class	if this relationship is ||| condition	count=1
arg	a cursor to ||| cursor statement	count=3
function	given cascade rule ||| cascade iterator	count=2
module	to [module] ~ schema ||| [module]	count=1
function	columnclause object that has ||| literal column	count=1
function	close ||| close	count=5
arg	key in the given ||| key	count=1
function	for use [function] an ||| [function] crud	count=1
function_arg	options [arg_2] ||| [function_1] options [arg_2]	count=1
function	function call ||| function call	count=2
arg	attribute ||| cls attribute	count=1
function	function [function_2] ||| [function_1] [function_2]	count=2
function	a copy ||| copy	count=1
function	given group [function_2] ||| [function_2] [function_1]	count=2
module	:func ~ expression ||| sql	count=2
function	[function_1] to ||| [function_1] [function_2]	count=4
function	with a ||| with warning	count=1
arg	query ||| query	count=2
function	on windows failures ||| on windows	count=2
arg	expression structure ||| opts	count=1
class	an attribute ||| collection attribute	count=1
arg	an instance when its ||| mapper class_ oldinit instance	count=1
module	this clauseelement ||| sql	count=1
arg	connection if supported by ||| connection schema	count=2
function	[function_1] :class dialect ||| [function_2] [function_1]	count=1
function	and return ||| and	count=1
function	except ||| except	count=1
class	baked ||| baked	count=1
function	a union statement used ||| union	count=1
arg	value of an attribute ||| instance key value	count=1
function	of temporary view ||| temp view	count=4
class	to ||| mapper	count=1
function	[function_1] processor ||| [function_1] [function_2]	count=8
function	produce a descending ||| desc	count=1
function	for foreign [function_2] ||| [function_1] [function_2]	count=1
function_arg	assert a [function_1] [arg_2] ||| [function_1] a [arg_2]	count=4
class	for rows ||| result proxy	count=1
function	modifications ||| traverse	count=1
function	have been refreshed within ||| refresh	count=1
function	expression in the insert ||| param insert	count=1
module	set ||| orm	count=1
arg	persistence of the ||| flush_context attrs	count=1
module	return a namespace ||| orm	count=1
function	update statements ||| post update statements	count=2
function	[function] of ||| effective [function]	count=2
function	unique constraints in ||| unique constraints	count=4
arg	the given instance ||| instance include_collections passive	count=1
function	object ||| init	count=2
function	data to ||| memoized attr	count=1
module	filter() ||| orm	count=1
function	a slice object ||| slice	count=1
class	not have ||| state	count=1
class	foreign key ||| foreign key	count=1
function	return an instance based ||| get	count=1
arg	item by value ||| value	count=1
function_arg	constraints in [arg_2] ||| [function_1] [arg_2]	count=2
function	listeners to ||| listeners	count=1
function	descending order by ||| desc	count=1
arg	called by the mapper ||| mapper	count=1
class	of ||| mapper	count=3
function	the suffix [function] ||| suffix [function]	count=3
function	of mapper dependencyprocessor ||| mapper	count=1
class	sequence ||| sequence	count=1
module	fetch ||| dialects postgresql	count=1
function	for foreign ||| foreign	count=1
module_class	this fromclause references ||| sql from clause	count=1
function	have been refreshed within ||| refresh flush	count=1
function_arg	none [arg_2] ||| [arg_2] [function_1]	count=2
class	[class_1] objects ||| [class_2] [class_1] unbake subquery	count=1
function	has [function_2] ||| [function_1] [function_2]	count=1
module_class	return a copy of [module_1] [class_2] ||| [module_1] [class_2]	count=18
module	with this ||| sql	count=1
function_arg	table comment [arg_2] ||| [arg_2] [function_1]	count=1
function	date ||| date	count=1
arg	a two phase transaction ||| xid is_prepared recover	count=2
function	dispose of this ||| dispose	count=2
function	listeners ||| listeners	count=1
class	return the ||| state	count=1
class	produce a :func ~ ||| column	count=2
function	order ||| order	count=1
class	[class_1] empty collection ||| [class_2] [class_1]	count=4
arg	two-way ||| attribute key uselist	count=1
class	server-side expressions ||| values base	count=1
function	columnclause object ||| literal column	count=1
function	a view ||| view	count=1
module	called exactly ||| core	count=1
function	rollback has occurred ||| soft rollback	count=1
function_arg	is attached [arg_2] ||| [arg_2] [function_1]	count=1
arg	particular [arg_2] ||| [arg_2] [arg_1]	count=2
function_arg	[function_1] a connection ||| [arg_2] [function_1]	count=3
function	"persistent to ||| persistent to	count=1
function_arg	[function_1] for table_name ||| [arg_2] [function_1]	count=6
function	percent '%' as ||| as percent sign	count=1
function	return a string describing ||| str	count=1
arg	annotating each element ||| element annotations exclude	count=1
function	processing function ||| bind processor	count=1
function	[function_1] dialect ||| [function_2] [function_1]	count=1
module	be associated with this ||| orm	count=1
function_arg	[function_1] persistence ||| [arg_2] [function_1]	count=2
function	an "info' [function] ||| record [function]	count=2
function	keywords in ||| get	count=1
function	bulk update ||| bulk update	count=2
module	to [module] when ||| [module]	count=1
function	py ||| py test	count=1
function	no ||| empty	count=1
function	expression structure allowing ||| cloned	count=1
function_arg	first time [arg_2] ||| [function_1] connect [arg_2]	count=1
class	of query ||| query	count=1
function	schema table ||| table	count=1
function	of the first row ||| scalar	count=1
function_arg	"bound" values [arg_2] ||| [function_1] [arg_2]	count=1
arg	produce labeled columns ||| column populate_result_map asfrom	count=1
function	server ||| get server	count=1
function	[function_1] warning ||| [function_2] [function_1]	count=3
function	emitting a warning on ||| emits warning on	count=1
module	that will iterate ||| ext	count=1
class	of string ||| foreign key constraint	count=1
class	escape ||| identifier preparer	count=1
function	key columns ||| cols	count=1
arg	in table_name ||| connection table_name	count=1
arg	iterator ||| iterator	count=1
function	a cte is located ||| cte	count=1
module	:term returning clause for ||| sql	count=1
class	events ||| proxy	count=3
arg	the given key in ||| key	count=1
function	data type ||| type	count=1
function	scalar ||| scalar	count=1
function	elements ||| elements	count=1
function	bulk save ||| bulk save	count=2
function	create a union statement ||| union	count=1
function	be ||| for	count=1
function	criterion ||| by	count=1
function	table-level options ||| options	count=1
arg	provides a method of ||| comparator_factory descriptor doc info	count=1
module_class	this :class functionelement ||| sql function element	count=1
class	userland code that ||| composite property	count=1
arg	event ||| state value oldvalue initiator	count=1
function	return information about ||| get foreign keys	count=1
arg	the given target ||| target	count=1
function	dbapi-level exception such as ||| graceful disconnects	count=1
function	elements and ||| copy and	count=1
function	schema ||| schema	count=2
arg	cursor ||| cursor	count=7
function	[function_1] create ||| [function_1] [function_2]	count=1
class	result set ||| result proxy	count=1
class	receive ||| extension	count=8
function	| ||| or	count=1
function	filter the ||| filter states	count=1
arg	render the ||| update_stmt from_table extra_froms from_hints	count=1
arg	expression structure ||| obj opts	count=1
function_arg	a logger [arg_2] ||| [function_1] [arg_2]	count=2
class	:func ~ expression ||| operators	count=2
function_arg	transient" transition ||| transient session instance	count=1
module	[module_1] that ||| [module_1] [module_2]	count=4
function	if the dependencyprocessor operates ||| for dep	count=1
function	options ||| options	count=2
function	create a logger ||| logger	count=1
function	expressions and defaults ||| defaults	count=1
function_arg	return the [arg_2] ||| [arg_2] [function_1]	count=1
class	before ||| mapper events	count=1
arg	load table ||| table include_columns exclude_columns	count=1
module	allowing user-defined data to ||| orm	count=1
function	info dictionary associated with ||| attr info	count=1
function	statements corresponding to ||| statements	count=3
arg	low-level ||| parameters	count=1
function	of foreign [function_2] ||| [function_1] [function_2]	count=2
arg	object corresponding to ||| mapper	count=1
class	of a :term ||| values base	count=1
function_arg	with [arg_2] ||| [function_1] element [arg_2]	count=2
function	allowing user-defined ||| attr	count=1
module	for date and ||| dialects	count=1
module	connection managed by this ||| engine	count=1
class	[class] against the ||| [class]	count=3
class	expressions ||| values base	count=2
class	a :func ||| column operators	count=2
arg	an alias of ||| alias name	count=1
function	to an engine connection ||| bind to	count=1
arg	value of an ||| instance	count=2
function_arg	[function_1] [arg_2] ||| [function_1] connection table_name [arg_2]	count=4
module_class	on this [class_2] ||| [module_1] [class_2]	count=2
function_arg	a listener [arg_2] ||| [function_1] target [arg_2]	count=4
arg	value ||| value dialect	count=2
module_class	dialect [class_2] ||| [module_1] [class_2]	count=2
arg	regex and callable ||| regex cleanup	count=1
function	insert ||| insert	count=4
function_arg	[function_1] is made ||| [arg_2] [function_1]	count=4
function	:class dialect ||| dialect cls	count=1
function	have been [function] or updated ||| finalize [function]	count=1
arg	produce an alias ||| alias name flat	count=1
function	a commit ||| commit	count=2
function	determine ||| determine	count=1
function	the first row and ||| scalar	count=1
arg	collection attribute and ||| dict_ key	count=1
function_arg	[function_1] an :class ||| [function_1] [arg_2]	count=1
module_class	produce a [module_1] [class_2] ||| [module_1] [class_2]	count=2
function	of ||| orm	count=1
module	inter-mapper relationships of ||| orm	count=1
arg	+ params on ||| parameters	count=1
function	by criterion applied to ||| by	count=2
function	the + ||| radd	count=1
function	relates ||| with parent	count=1
arg	the persistence of the ||| target flush_context attrs	count=1
function_arg	criteria function to ||| criteria fn	count=2
function	the :attr should_evaluate_none ||| evaluates none	count=1
function	of foreignkey objects which ||| foreign keys	count=1
arg	within the persistence of ||| target flush_context attrs	count=1
function	default instancestate if none ||| new state if none	count=1
function	particular sequence in the ||| sequence	count=1
class	foreign ||| foreign	count=1
arg	by a subclass to ||| class_ factory	count=1
function	values ||| values	count=1
function_arg	[function_1] given iterator ||| [function_1] [arg_2]	count=5
arg	within ||| clause	count=1
function_arg	on specific dialects ||| on db	count=1
module	namespace of ||| orm	count=2
function	[function_1] ddl ||| [function_2] [function_1]	count=2
function_arg	[function_1] a state ||| [function_1] [arg_2]	count=2
arg	cursor ||| cursor statement context	count=1
class	but the ||| results	count=1
function	only if a cte ||| cte	count=1
function	return [function_1] [function_2] ||| [function_1] [function_2]	count=2
function	notation to represent very ||| precision numerics enotation	count=2
function	all [function] ||| [function]	count=1
module	for one ||| orm	count=1
function	a logger ||| instance logger	count=1
function	an ||| expression	count=1
function_arg	[function_1] for connection ||| [function_1] [arg_2]	count=2
function	prepare the ||| prepare	count=1
function	binary criterion pairs ||| criterion as pairs	count=2
function_arg	this type as a [function_1] [arg_2] ||| ext mutable base [function_1] attribute [arg_2] coerce parent_cls	count=1
module	transaction in progress for ||| orm	count=1
function	view ||| view	count=3
function	[function] for ||| [function]	count=13
function	load the given ||| load on	count=1
function	not ilike ||| notilike	count=1
function	marked as deleted within ||| deleted	count=1
arg	connection transaction is the ||| transaction connection	count=1
arg	criterion to ||| criterion	count=1
function_arg	returning clause for ||| returning compiler	count=1
function	[function_1] in ||| [function_2] [function_1]	count=3
class	when ||| session events	count=2
arg	callable that ||| callable_	count=1
function	implement the - ||| neg	count=1
function	to an engine connection ||| to	count=1
function	emitting a [function_2] ||| [function_1] [function_2]	count=5
arg	have ||| context attrs	count=1
module	this connection's [module] ||| [module]	count=1
class	compat for ||| attribute	count=1
class	for ||| type	count=1
module	or more named ||| orm	count=1
function	adapt a :class ||| adapt	count=1
function	the oid ||| get table oid	count=1
function	commit all ||| commit all	count=1
class	quoted ||| identifier preparer	count=1
function	implement the & ||| and	count=1
function_arg	drop all [arg_2] ||| [function_1] [arg_2]	count=1
function	keys as strings represented ||| keys	count=1
function	the object ||| memoized	count=1
class	connection ||| connection	count=7
module	decorate ||| orm	count=1
function	remove and [function] ||| [function]	count=3
function	recover list of ||| recover twophase	count=1
function_arg	[function_1] the results ||| [arg_2] [function_1]	count=1
function	bound to ||| bound	count=1
arg	for [arg] ||| [arg] coerce	count=1
arg	the :meth ||| opts	count=1
function_arg	reconstitute [arg_2] ||| [arg_2] [function_1]	count=3
function	of all ||| all orm	count=2
module	also be iterators ||| util	count=1
function	after drop ||| after drop	count=2
arg	given identity key from ||| query key refresh_state lockmode	count=1
arg	produce an alias of ||| alias name	count=1
function	large values ||| large	count=1
module	purpose of ||| sql	count=1
function_arg	== [arg_2] ||| [function_1] [arg_2]	count=3
arg	statement and possibly a ||| stmt c values	count=1
arg	a pickletype ||| protocol pickler comparator	count=1
function	[function_1] unique constraints ||| [function_2] [function_1]	count=6
arg	compiled regex and ||| regex	count=1
function	the version of the ||| version info	count=2
class	mapped [class] including ||| [class]	count=1
module_class	receive an [class_2] ||| [module_1] [class_2]	count=9
function	table ||| table	count=15
arg	visit the given expression ||| opts visitors	count=1
arg	select() ||| select	count=1
function_arg	have been [function_1] [arg_2] ||| [function_1] [arg_2]	count=3
function	return true if the ||| has impl	count=1
function_arg	o [arg_2] ||| [arg_2] [function_1]	count=1
module_class	[module_1] result ||| [module_1] [class_2]	count=6
function	update statements corresponding to ||| update statements	count=1
function	synonym matching ||| resolve synonym	count=1
class	selectable embedded as ||| select base	count=1
function	'invoke [function] eagers' ||| [function]	count=1
arg	conditionally ||| ident force	count=1
class	return ||| mapper	count=2
module	returning clause for ||| sql	count=1
class	select() ||| select	count=2
function	connection ||| do connect	count=2
function_arg	yield only [arg_2] ||| [function_1] [arg_2]	count=4
function	expression structure ||| cloned	count=1
function_arg	table names [arg_2] ||| [function_1] [arg_2]	count=2
module_class	if this table ||| sql table	count=1
class	pool ||| singleton thread pool	count=1
arg	a sql expression with ||| expression type_	count=1
function	y [function] x1 y1 ||| tuple [function]	count=1
arg	of this class ||| cls index	count=1
class	events as ||| connection events	count=2
class	_unboundload() object into a ||| unbound load	count=1
function	of foreign [function_2] ||| [function_2] [function_1]	count=2
function	any rollback has ||| rollback	count=1
class	operator [class_2] ||| [class_2] [class_1]	count=20
class	server-side expressions and ||| values	count=1
module_class	a mysql [class_2] ||| [module_1] [class_2]	count=6
arg	constraint clause ||| constraint	count=2
function	intercept the "persistent to ||| persistent to	count=1
function	was [function_2] ||| [function_1] [function_2]	count=3
function	percent '%' as ||| as percent	count=1
function	in a view ||| view	count=1
class	do not have ||| instance state	count=1
function	as the ||| as	count=1
function_arg	compile a [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	[function_1] value ||| [arg_2] [function_1]	count=9
function	percent '%' [function_2] ||| mod operator [function_2] [function_1]	count=2
arg	given :class mapper ||| mapper	count=1
class	composite to the target ||| composite	count=1
module_class	bind [module_1] [class_2] ||| [module_1] [class_2]	count=2
function_arg	append [arg_2] ||| [arg_2] [function_1]	count=1
module	existing declarative class ||| ext declarative	count=1
class	expressions and ||| values	count=1
function	delete [function_2] ||| [function_1] [function_2]	count=3
class	set to instance of ||| set	count=1
function	a do [function_2] ||| [function_1] [function_2]	count=2
function	dialect ||| dialect cls	count=2
module_class	if this [class_2] ||| [module_1] column collection [class_2]	count=1
module	catching exceptions and ||| engine	count=1
arg	roles are ||| roles methods	count=1
function_arg	update [arg_2] ||| [function_1] expression [arg_2]	count=2
function	apply ad-hoc instrumentation ||| collection attributes	count=1
arg	given expression structure ||| obj opts	count=1
function	a :class join ||| join	count=1
function	added to ||| refresh for new	count=1
class	a new selectable with ||| generative select	count=2
arg	the given instance ||| instance include_collections	count=1
module_class	this [class_2] ||| [module_1] [class_2] union	count=5
function	that ||| declarative	count=1
class	may ||| query	count=1
arg	state ||| state attribute_names	count=1
function	a descending order by ||| create desc	count=1
arg	db-api module ||| module	count=1
class	option may not ||| mapper option	count=1
module_class	[module_1] select() construct ||| [module_1] [class_2] intersect	count=1
function	row processing ||| create row processor	count=2
arg	transition ||| session instance	count=1
function	to have [function_2] ||| [function_2] [function_1]	count=4
arg	a callable ||| dialect callable_ state	count=2
function	the identity key for ||| identity key	count=1
module	method as a ||| orm	count=1
function	be ||| memoized	count=1
function	given expression structure allowing ||| cloned	count=1
module	produce an ||| orm	count=1
function	dialect-specific [function_2] ||| [function_1] [function_2]	count=4
arg	intercept ||| conn cursor statement	count=1
arg	within the persistence ||| flush_context	count=1
class	corresponding to this ||| mapper	count=1
class	create ||| composite property	count=1
function	a namespace ||| column attrs	count=1
function	"bind" ||| get	count=1
function	[function_1] the insert ||| [function_2] [function_1]	count=2
function_arg	have [function_1] [arg_2] ||| [function_1] [arg_2]	count=14
function	starting at 1 ||| 1	count=1
function	self-referential [function_2] ||| [function_1] [function_2]	count=2
function_arg	[function_1] including calling ||| [arg_2] [function_1]	count=2
class	an [class_2] ||| [class_2] [class_1]	count=2
function	append the [function_2] ||| [function_1] [function_2]	count=6
function	the inter-mapper ||| compile	count=1
function	to [function_2] ||| [function_1] [function_2]	count=2
function	result [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] key ||| [function_1] [function_2]	count=8
arg	load ||| include_columns exclude_columns	count=1
function	[function_1] save ||| [function_1] [function_2]	count=3
arg	[arg_1] with ||| a [arg_1] [arg_2]	count=4
class	a ||| column operators	count=2
arg	allowing modifications by ||| obj opts	count=1
module	by primary key using ||| orm	count=1
module	this :class ||| orm	count=2
arg	the existence of ||| connection sequence_name schema	count=1
function	any rollback has occurred ||| rollback	count=1
function	various lists of pairs ||| pairs	count=1
arg	sql expression [arg_2] ||| [arg_2] [arg_1]	count=1
class	this option ||| mapper option	count=2
arg	building [arg] ||| [arg]	count=1
function	a set ||| set	count=1
class	thread ||| thread local meta data	count=2
class	return the ||| instance state	count=1
arg	queuepool ||| creator pool_size max_overflow timeout	count=1
function	an item from the ||| from	count=1
function	deprecation ||| deprecated	count=2
function	objects with non-ascii ||| data	count=1
class	type when applied to ||| type	count=1
arg	name of a table ||| tablename table	count=1
function	[function_1] about unique ||| [function_2] [function_1]	count=2
module	clause to [module] statement ||| [module]	count=1
module	add values ||| orm	count=1
function	[function_1] all ||| [function_1] [function_2]	count=3
function	the given cascade rule ||| cascade iterator	count=1
module	is called ||| core	count=1
arg	return a callable ||| dialect callable_ state	count=2
arg	connection [arg_2] ||| [arg_2] [arg_1]	count=8
class	[class_1] when the ||| [class_2] [class_1]	count=1
function	union of ||| union	count=1
function	lazy loaders to add ||| add	count=1
class	option ||| mapper option	count=3
function	identity key for ||| identity key	count=2
class	from a parent query ||| baked query	count=1
function	implements the executioncontext get_lastrowid() ||| implements get	count=1
class	an object instance after ||| instance	count=1
function	return ||| get func	count=1
function	collection of postsortrecs ||| actions	count=1
function	and ||| check strict	count=2
arg	modifications by visitors ||| visitors	count=1
function	a dictionary-based collection ||| mapped collection	count=3
function	instance after an insert ||| after insert	count=1
arg	given instance to ||| instance property	count=1
function	the server ||| server	count=1
class	object instance after one ||| instance	count=1
module	an existing declarative class ||| ext declarative	count=1
function	the foreign key columns ||| foreign cols	count=1
arg	transition for a specific ||| session instance	count=1
function_arg	[function_1] made ||| [arg_2] [function_1]	count=3
function	group [function] query and ||| group [function]	count=1
function	target columns ||| columns	count=1
function	execute a string ||| execute	count=1
function	emit ||| emit post	count=1
class	fetch all rows ||| result	count=1
function	removing ||| deannotate	count=1
arg	including ||| uowtransaction	count=1
function_arg	lateral [arg_2] ||| [arg_2] [function_1]	count=1
function	force the ||| force	count=1
function_arg	commit a [arg_2] ||| [function_1] [arg_2]	count=1
function	a constant 'anonymous label' ||| anon label	count=1
function_arg	create all [arg_2] ||| [arg_2] [function_1]	count=2
module	this column, unitialized ||| sql	count=1
arg	count ||| count	count=1
module	:func ~ ||| sql	count=2
function	establish row [function_2] ||| [function_2] [function_1]	count=4
function	schema name ||| schema name	count=2
function	constraints ||| constraints	count=3
function	a lateral ||| lateral	count=1
class	given column element ||| column element	count=1
function	from [function_2] ||| [function_1] [function_2]	count=4
function	expire all ||| expire	count=1
arg	clone ||| obj	count=1
class	that this option ||| option	count=1
function_arg	make the given [function_1] [arg_2] ||| [function_1] [arg_2]	count=1
function	to a flush ||| per state flush	count=1
arg	of a create constraint ||| constraint	count=2
function	information about primary ||| primary	count=1
class	[class_1] when ||| [class_1] [class_2]	count=3
function	id ||| get table id	count=2
arg	given alias object returning ||| alias	count=1
function	[function] the ||| [function]	count=3
function	[function_1] insert statements ||| [function_1] [function_2]	count=1
function	have executemany() ||| do executemany	count=2
arg	state after an ||| state	count=1
arg	return a [arg_2] ||| [arg_1] [arg_2]	count=3
function	to lowercase if it ||| normalize	count=1
function	collection are [function] ||| columns are [function]	count=3
class	in progress ||| session	count=2
function	changes ||| changes	count=1
arg	by ||| opts	count=1
function	drop [function_2] ||| [function_1] [function_2]	count=1
module	add ||| orm	count=1
module	a ||| dialects	count=7
function	emit delete statements corresponding ||| emit delete statements	count=1
function_arg	parameter [arg_2] ||| [function_1] [arg_2]	count=6
function	:class column ||| column	count=1
module_class	of [module_1] [class_2] against the given selectable ||| [module_1] [class_2] except	count=1
function	execute after [function] has ||| after [function]	count=1
arg	a connection [arg_2] ||| [arg_2] [arg_1]	count=8
class	the ||| values	count=1
class	with this :class ||| mapper property	count=1
class	:func ||| operators	count=2
function	modifications by ||| traverse	count=1
arg	low-level ||| statement parameters	count=2
function	as emitting a ||| emits	count=1
class	of keys which ||| state	count=1
function	all ||| locate all	count=1
module	to be associated ||| orm	count=1
function	statement ||| statement	count=1
module	that should ||| ext	count=1
class	newly returned delete ||| delete	count=1
module	embedded into this ||| sql	count=1
arg	on ||| attribute_names	count=1
arg	or updated [arg] ||| [arg]	count=3
arg	against ||| element partition_by order_by range_	count=1
arg	count rows at ||| count	count=1
arg	item ||| item	count=1
function	the :class mapper ||| mapper	count=1
module	all :class columnproperty ||| orm	count=1
class	a bit ||| bit	count=1
module	current ||| orm	count=2
function	[function_1] large values ||| [function_1] [function_2]	count=3
function_arg	listener [arg_2] ||| ext mutable base [function_1] on attribute [arg_2] parent_cls	count=1
function	a particular sequence in ||| sequence	count=1
module	keys which do ||| orm	count=1
class	keys ||| instance state	count=1
module_class	[module_1] fromclause references ||| [module_1] [class_2]	count=6
arg	object corresponding ||| mapper clause	count=1
arg	list of mapping dictionaries ||| mappings	count=2
class	[class_1] collection ||| [class_2] [class_1]	count=2
function	[function_1] partial ordering ||| [function_1] [function_2]	count=1
arg	mark an instance ||| instance	count=1
function	returns to the ||| checkin	count=1
function	for the offset ||| offset	count=1
function_arg	load the [arg_2] ||| [arg_2] [function_1]	count=1
function	allow blob/binary fields ||| binary comparisons	count=1
function	true if the ||| has impl	count=1
arg	load table description from ||| connection table include_columns exclude_columns	count=1
function	of all ||| column	count=1
function_arg	the first [arg_2] ||| [function_1] connect [arg_2]	count=1
function	the update [function_2] ||| [function_1] [function_2]	count=4
function_arg	collection [arg_2] ||| [function_1] [arg_2]	count=2
function	table names on ||| table names	count=2
class	dialect ||| engine	count=1
function	[function_1] executemany() ||| [function_1] [function_2]	count=2
function_arg	character set [arg_2] ||| [arg_2] [function_1]	count=2
class	sequence from the database ||| sequence	count=1
class	the result [class_2] ||| [class_1] [class_2] first	count=1
arg	an ||| instance	count=4
class	64 [class] variable length ||| cymysql [class]	count=1
arg	for a given querycontext ||| path loadopt	count=1
function	setter ||| setter	count=1
function	to ||| bind to	count=1
function	been called and raised ||| failed	count=1
class	receive ||| events	count=7
function	listeners to ||| backref listeners	count=1
class	into the queue ||| queue	count=1
function	a :term ||| return	count=1
function_arg	refreshed within [arg_2] ||| [arg_2] [function_1]	count=3
function_arg	[function_1] made ||| [function_1] [arg_2]	count=3
class	which may have ||| query	count=1
class	conjunction of expressions joined ||| boolean clause	count=1
function	table names to ||| names	count=1
class	:term returning ||| values base	count=1
class	names and ||| result meta	count=1
arg	instance ||| instance attribute_names lockmode	count=1
function_arg	parameter value to ||| param value dialect	count=2
class	:class query represented ||| query	count=1
function	called before ||| pre exec	count=1
function	of elements and return ||| copy and	count=1
function	column of the first ||| scalar	count=1
class	~ expression ||| column operators	count=2
module	a method as a ||| orm	count=1
function	emit insert [function_2] ||| [function_1] [function_2]	count=3
function	proceed after a ||| fetch rows post commit	count=1
function	unique [function_2] ||| [function_1] [function_2]	count=4
class	keys which do ||| state	count=1
function	execute after ||| after soft	count=1
function_arg	[function_1] fragment ||| [function_1] a [arg_2]	count=1
function	refreshed ||| refresh flush	count=2
function_arg	rollback [arg_2] ||| [function_1] connection [arg_2]	count=1
function	to the named savepoint ||| to savepoint	count=1
function	[function_1] digits ||| [function_1] significant [function_2]	count=4
arg	[arg_1] been ||| [arg_2] [arg_1]	count=10
function	the insert ||| insert	count=1
class	insert/update/delete statement ||| update base	count=1
function_arg	[function_1] an instance ||| [function_1] [arg_2]	count=6
module	expressions ||| sql	count=1
arg	expression structure allowing ||| obj	count=1
class	[class] compares ||| [class]	count=3
class	set ||| scalar object attribute impl	count=1
function	[function_1] unique ||| [function_1] [function_2]	count=2
class	column [class_2] ||| [class_2] [class_1]	count=1
function	returns a branched version ||| contextual connect	count=1
module	to be associated with ||| orm	count=1
function	for ||| get	count=1
function_arg	[function_1] function for ||| [arg_2] [function_1]	count=3
function	bulk update ||| bulk update mappings	count=2
class	purpose of fetching server-side ||| base	count=1
class	[class] more column ||| [class]	count=1
function	when insert() [function] executed excluding ||| autoincrement [function]	count=1
function	disallow lazy loads ||| raiseload	count=1
function	emit delete ||| emit delete	count=2
function_arg	[function_1] is present ||| [arg_2] [function_1]	count=3
function	all :class relationshipproperty properties ||| relationships	count=1
function	return a list ||| get enums	count=1
function	[function_1] table ||| [function_1] [function_2]	count=21
module_class	[module_1] :class textclause ||| [module_1] [class_2]	count=4
function	from kwargs ||| declarative	count=1
function	add a ||| with	count=3
function	elements and return the ||| copy and	count=1
module_class	an object instance ||| orm instance events	count=1
class	data to be ||| property	count=1
function	"bound" values ||| bind values	count=1
function	[function_1] literal processor ||| [function_2] [function_1]	count=3
function	return [function_2] ||| [function_2] [function_1]	count=49
class	converted ||| type decorator	count=1
function	literal processor ||| literal processor	count=2
function	data to ||| attr	count=1
function	identity key ||| identity key	count=2
arg	including ||| base_mapper uowtransaction	count=1
arg	instancestate ||| state dict_	count=1
arg	the given instance ||| instance	count=5
function	literal [function_2] ||| [function_2] [function_1]	count=2
arg	traverse an expression ||| expression	count=1
arg	sub-elements into a single ||| x	count=1
function_arg	with [arg_2] ||| [arg_2] [function_1]	count=6
function	dialect-specific result ||| cached result	count=2
module	linked to [module] :class ||| [module]	count=1
function	implement the not ilike ||| notilike	count=1
function_arg	a connection [arg_2] ||| [function_1] [arg_2]	count=1
function	use [function_1] [function_2] 'modulus' operator ||| mod operator [function_2] [function_1]	count=2
function_arg	[function_1] for schema ||| [function_1] connection table_name [arg_2]	count=2
function_arg	[function_1] statement ||| [arg_2] [function_1]	count=1
class	all ||| mapper	count=3
class	which this :class session ||| session	count=1
arg	to the given function ||| fn expr	count=1
function	primary [function_2] ||| [function_1] [function_2]	count=2
arg	and ||| state dict_	count=1
class	dictionary ||| dict	count=1
function	keys representing the ||| keys	count=1
class	use of a ||| values	count=1
arg	that instance ||| mapper connection instance	count=2
module	:class fromclause ||| sql	count=1
function	except [function] of ||| except [function]	count=1
function	[function_1] currently selected ||| [function_2] [function_1]	count=1
class	exists() ||| exists	count=1
module	to this ||| sql	count=6
function	return a ||| column	count=1
arg	this [arg_2] ||| [arg_2] [arg_1]	count=8
function	deleted within a ||| deleted	count=1
function	and ||| and	count=2
function	order [function_2] ||| [function_1] [function_2]	count=2
class	new [class] applying ||| [class]	count=1
arg	instance of this class ||| cls	count=1
function	construct a ||| init	count=21
module	[module] when targeting ||| [module]	count=1
function	allowing modifications by ||| traverse	count=1
function_arg	[function_1] :class sessiontransaction ||| [arg_2] [function_1]	count=2
class	underlying logger ||| instance logger	count=5
arg	by the mapper to ||| mapper	count=1
function	criterion that relates ||| with parent	count=1
module	through [module] ||| [module]	count=1
function	collection of factories ||| factories	count=1
class	mysql's 64 [class] variable length ||| cymysql [class]	count=1
class	the [class] ||| [class]	count=4
function	data to ||| memoized	count=1
module	transaction in ||| orm	count=2
function	at arbitrary ||| from n factory	count=1
function	call [function_2] ||| [function_2] [function_1]	count=1
function	offset ||| offset	count=2
function	starting at 1 ||| count from 1	count=1
function	in [function_2] ||| [function_1] [function_2]	count=3
function	a bulk update of ||| bulk update	count=1
class	not have ||| instance state	count=1
function	[function_1] deleted within ||| [function_2] [function_1]	count=1
function	implement the // ||| rtruediv	count=1
class	'remote' annotations [class] ||| [class]	count=1
function_arg	get [arg_2] ||| orm [function_1] attribute [arg_2]	count=1
function	kwargs for ||| cls kwargs	count=1
function	object allowing ||| memoized attr	count=1
function	[function_1] not ||| [function_2] [function_1]	count=1
arg	have ||| attrs	count=1
function_arg	get [arg_2] ||| [arg_2] [function_1]	count=1
class	query applies to objects ||| query	count=1
function	dictionary associated with ||| info	count=1
function	use [function] an insert ||| [function] crud	count=1
function	in that ||| in	count=1
module_class	this [class_2] ||| [module_1] column collection [class_2]	count=1
function	listeners to synchronize ||| listeners	count=1
function	columnclause object ||| literal	count=1
arg	mapper as ||| mapper	count=1
function	return an attribute ||| get	count=1
function	do [function_2] ||| [function_2] [function_1]	count=2
class	return ||| instance	count=1
arg	:class ||| name element type_	count=1
module	for a ||| dialects mysql	count=1
function_arg	[function_1] tuple producing ||| [function_1] expression [arg_2]	count=1
arg	new [arg_2] ||| [arg_2] [arg_1]	count=2
class	[class_1] traversal ||| [class_1] [class_2]	count=2
arg	collectionadapter associated with the ||| dict_ user_data passive	count=1
function	have been [function] or ||| finalize [function]	count=1
function	a columndefault [function_2] ||| [function_2] [function_1]	count=2
class	a queue ||| queue	count=1
class	[class_1] [class_2] unconditionally ||| [class_1] [class_2]	count=4
function	the inter-mapper relationships ||| compile	count=1
function	[function_1] for foreign ||| [function_2] key [function_1]	count=1
function	connection ||| connection	count=2
function_arg	[function_1] and ||| [function_1] [arg_2]	count=1
class	:term returning clause for ||| base	count=1
function	dialect ||| dialect	count=3
function_arg	transient [arg_2] ||| [arg_2] [function_1]	count=1
arg	:class metadata and ||| cls engine reflect schema	count=1
class	of all :class columnproperty ||| mapper	count=1
function	an [function_2] ||| [function_2] [function_1]	count=10
function	return the full set ||| get	count=1
class	an empty collection ||| collection	count=1
module	a namespace of all ||| orm	count=2
function	execute ||| execute	count=10
function	with ||| autoflush	count=1
class	if this relationship is ||| join condition	count=1
arg	transition for a specific ||| session	count=1
class	a :term returning clause ||| values	count=1
function	[function_1] processing ||| [function_2] [function_1]	count=2
function	server used by ||| server	count=2
function	conflict clause ||| conflict	count=2
function	binary criterion [function_2] ||| [function_2] [function_1]	count=1
arg	a url ||| cls url	count=1
function_arg	[function_1] transition ||| [arg_2] [function_1]	count=5
arg	table_name ||| connection table_name	count=6
function	object for the ||| init	count=1
function	[function_1] statements corresponding ||| [function_2] [function_1]	count=6
function	ad-hoc ||| collection attributes	count=2
function	a :class join ||| create join	count=1
function	[function_1] insert statements ||| [function_2] [function_1]	count=1
function_arg	[function_1] :class mapper ||| [function_1] concrete base [arg_2]	count=1
function	temporary table names ||| temp table names	count=6
arg	[arg_1] with ||| [arg_2] [arg_1]	count=7
function	[function_1] parameter ||| [function_1] [function_2]	count=6
module	target dialect which ||| testing	count=1
function	for on ||| on	count=2
function	default execution_options dictionary of ||| execution options	count=1
module	object allowing ||| orm	count=1
arg	mapping dictionaries ||| mapper mappings	count=2
function	prepare the current transaction ||| prepare	count=1
arg	given schema ||| schema	count=1
class	[class] into an ||| [class]	count=3
module_class	this composite to ||| orm composite	count=1
function	outer-exposed [function] ||| surface [function]	count=3
function	a dictionary-based [function_2] ||| [function_2] [function_1]	count=2
function	the collection adapter ||| collection	count=1
function	[function_1] [function_2] ||| [function_1] default schema [function_2]	count=5
arg	search without any ||| search	count=1
function	detect and adjust for ||| detect	count=1
module_class	[module_1] compiled object ||| [module_1] [class_2]	count=2
function	column [function_2] ||| [function_2] [function_1]	count=4
class	that ||| composite property	count=1
function_arg	relates the [arg_2] ||| [arg_2] [function_1]	count=3
class	ddl ||| ddlelement	count=1
arg	given expression ||| opts	count=1
module	allowing ||| sql	count=1
function_arg	[function_1] dbapi ||| [arg_2] [function_1]	count=2
arg	alias ||| alias name	count=1
function	return a dialect-specific result ||| cached result	count=1
class	:class bindparameter to the ||| bind parameter	count=1
class	[class_1] [class_2] of a compiled statement ||| [class_2] [class_1]	count=1
function	make use of ||| return	count=1
function	a particular property should ||| should	count=1
function_arg	[function_1] collection attribute ||| [function_1] collection state dict_ [arg_2]	count=1
arg	the cls for use ||| cls	count=1
function	"bind" to which this ||| get	count=1
function	purpose of fetching ||| return	count=1
arg	[arg_1] connection ||| [arg_2] [arg_1]	count=4
function	to do an extended ||| extended	count=1
module	~sqlalchemy engine interfaces ||| engine	count=1
function	rollback ||| rollback twophase	count=1
class	[class_1] [class_2] compares to ||| [class_1] [class_2]	count=4
arg	a new :class ||| bind	count=1
function_arg	[function_1] composite-capable ||| [arg_2] [function_1]	count=1
function	[function_1] none ||| [function_2] [function_1]	count=2
function	collection of inserted ||| inserted	count=1
function	[function_1] and return ||| [function_1] [function_2]	count=3
function_arg	return information [arg_2] ||| [arg_2] [function_1]	count=1
class	a cloning ||| cloning	count=1
arg	an alias of ||| alias	count=1
function	[function_1] digits ||| [function_2] [function_1]	count=4
function	from an ||| key from	count=1
module	decorate a ||| orm	count=1
class	text type ||| text	count=1
arg	clause of a ||| clause	count=1
class	compiled result column ||| result	count=1
function_arg	table objects [arg_2] ||| [arg_2] [function_1]	count=4
function	order by criterion applied ||| order by	count=1
function	in ||| in	count=6
function	join to ||| join left to	count=1
module	given ||| sql	count=1
function	limit/offset is ||| w limit offset	count=1
class	new query ||| query	count=1
function	[function_1] currently selected ||| [function_2] schema [function_1]	count=1
function	[function_1] from a ||| [function_1] [function_2]	count=2
function	processor ||| processor	count=2
function	collection append ||| append	count=2
function	bind parameters ||| params	count=1
function	has ||| has	count=3
function	dbapi [function] for ||| [function]	count=1
arg	of inherited ||| _set	count=1
function	convert subquery eager loaders ||| bake subquery loaders	count=1
function	[function_1] elements such ||| [function_2] [function_1]	count=1
class	a config ||| config	count=1
function	literal ||| literal	count=4
module	and then close ||| engine	count=1
function	load the given ||| load on ident	count=1
function	supports reflection ||| constraint reflection	count=1
class	fetching ||| values	count=1
function	recover list ||| do recover	count=1
arg	roles are present and ||| roles methods	count=1
function	ordering ||| ordering	count=1
function	return a union of ||| union	count=1
class	return the primary column ||| column property	count=1
class	object instance after one ||| instance events	count=1
arg	:class query object's session ||| querylib query iterator load	count=1
arg	indicate that ||| loadopt attr	count=1
function_arg	transient" transition for ||| transient session instance	count=1
module	called when ||| core	count=3
arg	a connection transaction is ||| transaction connection	count=1
class	~ ||| column	count=2
function	return a select count ||| count	count=1
class	_unboundload() object into ||| load	count=1
function	adapt a ||| adapt listener	count=1
function_arg	[function_1] given ||| [function_1] backend [arg_2]	count=1
arg	indicate that the given ||| loadopt attr sql_only	count=1
function	columndefault [function_2] ||| [function_2] [function_1]	count=2
arg	for an instance ||| instance	count=1
function	the table [function_2] ||| [function_2] [function_1]	count=3
function	sequence in the ||| sequence	count=1
function	if a cte is ||| cte state	count=1
function	[function_1] changes ||| [function_1] [function_2]	count=1
function	the "deleted to ||| deleted to	count=1
function	update from [function_2] ||| [function_1] [function_2]	count=3
function	the default schema ||| default schema	count=1
function	insert statements corresponding to ||| insert statements	count=1
module	data to be ||| orm	count=1
function	type from a ||| type	count=1
function	offset/limit is specifically not ||| wo limit offset	count=1
module	relationships ||| orm	count=1
function	mapping of mapper ||| mapper	count=1
module_class	[module_1] composite to ||| [module_1] [class_2]	count=2
arg	transition for a ||| session	count=1
class	one or ||| query	count=1
function_arg	[function_1] is emitted ||| [arg_2] [function_1]	count=1
function	database dialect class ||| dialect	count=1
module	if [module] element ||| [module]	count=1
function	return_conn, ||| return conn	count=1
module	exceptions and ||| engine	count=1
function	dependencyprocessor operates ||| for dep	count=1
function_arg	bound parameter [arg_2] ||| [function_1] [arg_2]	count=3
function	names for ||| names	count=3
class	*all* sessions in memory ||| session class methods	count=1
function	[function_1] cursors ||| [function_1] [function_2]	count=2
function	a jdbc url ||| jdbc	count=1
function	force ||| force	count=1
function	jdbc url from ||| jdbc	count=1
module_class	this relationship ||| orm relationship	count=1
module	a :func ~ ||| sql	count=2
arg	check the existence ||| connection sequence_name schema	count=1
arg	[arg_1] schema ||| [arg_2] [arg_1]	count=8
module	given ||| ext	count=1
function	character set in ||| detect charset	count=2
function	after create ||| after create	count=2
arg	instance ||| instance key	count=1
arg	create constraint clause ||| constraint	count=2
function	[function_1] bound to ||| [function_2] [function_1]	count=1
function	[function] a :class ||| create [function]	count=2
function	remove an entity from ||| remove	count=1
function	using subquery eager loading ||| subqueryload	count=1
arg	object corresponding ||| mapper	count=1
function	implement the 'contains' ||| contains	count=1
function	do ||| do	count=2
function_arg	[function_1] regex ||| [function_1] [arg_2]	count=1
function	are [function] ||| columns are [function]	count=3
module	the [module] ||| [module]	count=5
class	result ||| result meta data	count=1
class	history ||| history	count=1
class	progress for two phase ||| session	count=1
function_arg	put an [arg_2] ||| [arg_2] [function_1]	count=3
class	given column [class_2] ||| [class_2] [class_1]	count=1
module_class	of [module_1] [class_2] the given selectable ||| [module_1] [class_2] intersect	count=1
class	collection with keying ||| collection	count=1
function_arg	names [arg_2] ||| [arg_2] [function_1]	count=1
function	an implementation ||| do execute	count=1
class	the [class] firing ||| [class]	count=1
function	given order ||| order	count=1
function	setup py ||| setup py test	count=2
class	not ||| instance state	count=1
function	a table ||| table	count=1
function	implementation ||| do	count=1
arg	persistence ||| flush_context	count=1
arg	given instance ||| instance key	count=1
function	structure allowing modifications by ||| cloned traverse	count=1
function	[function_1] alias ||| [function_2] [function_1]	count=1
function	refresh ||| refresh	count=1
arg	visitors ||| obj opts visitors	count=1
function	from [function_2] ||| [function_2] key [function_1]	count=1
arg	indicate that the given ||| loadopt attr	count=1
class	the ||| state	count=1
function	a bound ||| bind	count=1
function	descending order ||| desc	count=1
arg	the cls for ||| cls	count=1
arg	results of ||| results	count=1
class	a namespace ||| mapper	count=2
class	have been specified in ||| query	count=1
arg	instance ||| instance	count=9
function	dialect-specific literal [function_2] ||| [function_2] [function_1]	count=1
class	driver must raise ||| suite requirements	count=1
class	marking columns ||| join condition	count=1
arg	attribute and ||| dict_ key	count=1
module	for two phase ||| orm	count=1
function	convert ||| bake	count=1
arg	database [arg_2] ||| [arg_1] [arg_2]	count=4
function	[function_1] schema from ||| [function_2] [function_1]	count=3
module_class	[module_1] mapper ||| [module_1] [class_2]	count=18
function	connection is ||| do connect	count=1
function	the given ||| iterator	count=1
class	this attribute with an ||| attribute impl	count=1
function_arg	[function_1] a new ||| [function_1] engine connection close_with_result [arg_2]	count=1
function	currently selected schema from ||| default schema	count=1
function	conforms [function_2] ||| [function_2] [function_1]	count=2
module	this :class ||| sql	count=29
function	do an extended ||| extended	count=1
function	puts top ||| precolumns	count=1
function_arg	[function_1] given connection ||| [function_1] [arg_2]	count=3
class	return true if parent/child ||| join condition	count=1
arg	table definitions from the ||| views only	count=1
module	been ||| orm	count=1
class	receive connection arguments before ||| dialect events	count=1
function	about primary [function_2] ||| [function_2] [function_1]	count=2
function	view names for the ||| view names	count=1
function	large decimals ||| large	count=1
arg	two phase transaction ||| xid is_prepared recover	count=2
function	foreign key columns ||| foreign cols	count=2
function_arg	table objects [arg_2] ||| [function_1] [arg_2]	count=4
function	identity map ||| identity	count=2
function_arg	in not [arg_2] ||| [function_1] [arg_2]	count=3
function_arg	type as a mutation [function_1] [arg_2] ||| [function_1] [arg_2]	count=1
function	first ||| first	count=2
function	detect and adjust ||| detect	count=1
function	identity [function_2] ||| [function_2] [function_1]	count=3
function	the ~ ||| invert	count=1
class	is ||| events	count=1
function	oid ||| table oid	count=2
class	initialize execution context for ||| default execution context	count=2
arg	given iterator ||| iterator obj	count=1
class	into a ||| load	count=1
function	remove ||| remove	count=2
arg	persistence of ||| flush_context attrs	count=1
function	a [function] ||| [function] isolation	count=1
arg	fragment with ||| fragment msg	count=1
function	for foreign [function_2] ||| [function_2] [function_1]	count=1
module	object given two :class ||| sql	count=1
function	from keyword arguments ||| from	count=1
module	intercept ||| core	count=1
class	returns ||| executable	count=1
function	called on subclasses ||| populate column	count=1
class	of fromclause ||| from clause	count=1
function	a columndefault ||| default	count=1
arg	and visit the given ||| obj opts visitors	count=1
arg	compiled regex and callable ||| regex cleanup	count=1
arg	set the [arg_1] [arg_2] firing history events ||| [arg_2] [arg_1]	count=1
class	impl ||| impl	count=1
class	that defines a ||| property	count=5
arg	identity key from ||| key refresh_state	count=1
class	cte, or ||| has	count=1
function	from clause is to ||| from	count=1
arg	issue a ||| bind checkfirst	count=1
function	enabled ||| enabled	count=1
function	[function_1] execute() ||| [function_1] [function_2]	count=4
function_arg	from [arg_2] ||| [arg_2] [function_1]	count=1
arg	a subclass to test ||| class_ factory	count=1
module_class	[module_1] constraint ||| [module_1] [class_2]	count=4
arg	"construct ||| arg	count=1
function	value processing function ||| bind processor	count=1
class	be associated with ||| property	count=1
class	must raise ||| suite requirements	count=1
function	select ||| from	count=1
arg	of mapping dictionaries ||| mapper mappings return_defaults	count=1
function	types from ||| colnames from	count=2
arg	cursor ||| cursor statement parameters context	count=2
class	the property to ||| property	count=1
function	[function_1] all ||| [function_2] [function_1]	count=5
function	apply ad-hoc instrumentation ||| set collection attributes	count=1
function	purpose ||| return	count=1
function	[function_1] on a ||| [function_2] [function_1]	count=6
function	representation of python datetime ||| time	count=1
function_arg	[function_1] iterator ||| [function_1] [arg_2]	count=5
function	using a minimized set ||| optimized get statement	count=1
function	listing of temporary table ||| temp table	count=1
function	cte is ||| cte state	count=1
class	:term ||| values base	count=2
function	the foreign key ||| foreign cols	count=2
class	receive a ||| events	count=3
module	of a [module] compiledsql is ||| [module]	count=1
arg	if this class ||| cls	count=1
arg	used by a connection ||| connection	count=2
function_arg	initialize [arg_2] ||| [arg_2] [function_1]	count=5
module	allowing ||| orm	count=1
function	[function_1] schema name ||| [function_2] [function_1]	count=1
function	label ||| label	count=1
function	[function_1] names ||| [function_1] [function_2]	count=32
function_arg	[function_1] in table_name ||| [function_1] [arg_2]	count=16
function	unordered sequence ||| class hierarchy	count=1
function	remove ||| remove state	count=1
function	relationshipproperty properties ||| relationships	count=1
function	general class ||| affinity	count=1
module	this connection's [module] connection ||| [module]	count=1
module	string to a ||| dialects mysql	count=1
function	[function_1] key columns ||| [function_1] [function_2]	count=3
function_arg	commit [arg_2] ||| [arg_2] [function_1]	count=1
class	intercept [class_2] ||| [class_2] [class_1]	count=2
function	return the mapped class ||| class	count=1
module	been specified in filter() ||| orm	count=1
function_arg	all [arg_2] ||| [arg_2] [function_1]	count=5
function	name in that collection ||| name in	count=1
function	the remote ||| remote	count=2
function	criterion to a ||| by	count=1
arg	"lazy load" ||| effective_path	count=1
arg	a ||| dialect statement column_keys inline	count=1
arg	for the given :class ||| name element type_	count=1
function	from has ||| has	count=1
function	associated ||| attr	count=1
module	turn this :class ||| sql	count=1
module_class	close this [class_2] ||| [module_1] [class_2]	count=2
function	create table string ||| create	count=1
function_arg	execute a [arg_2] ||| [function_1] [arg_2]	count=1
function	with ||| memoized attr	count=1
module_class	[module_1] [class_2] ||| [module_1] [class_2]	count=339
function_arg	using [arg_2] ||| [function_1] [arg_2]	count=2
class	type which ||| type	count=1
class	context ||| context	count=1
class	in ||| session	count=2
function	apply ad-hoc instrumentation from ||| attributes	count=1
function	return immediate child elements ||| get children	count=1
function	firing history events ||| del	count=1
arg	given ||| obj	count=1
function	the ||| compile	count=1
function	as emitting ||| emits	count=1
function	lowercase if it is ||| normalize	count=1
arg	set the [arg] ||| instance key [arg]	count=1
function	is an ||| is column	count=1
function	clone ||| traverse	count=1
function	of ||| compile	count=1
class	this attribute ||| attribute impl	count=1
function	rollback has ||| rollback	count=1
function	[function_1] transient" ||| [function_2] [function_1]	count=4
class	be associated ||| mapper	count=1
function	append a join ||| join	count=1
function_arg	[function_1] for equality ||| [arg_2] [function_1]	count=3
function	a raw dbapi error ||| dbapi error	count=1
class	fromclause is cloned ||| from clause	count=1
arg	[arg_1] with ||| [arg_1] [arg_2]	count=3
arg	a and b ||| b	count=1
arg	[arg_1] of an ||| [arg_2] [arg_1]	count=2
function	been refreshed ||| refresh flush	count=1
class	a :func ~ expression ||| column operators	count=2
function	the given ||| cloned	count=1
module	this ||| orm	count=37
function	deprecation warning on use ||| deprecated	count=1
function	intersect ||| intersect	count=2
function	[function_1] from a ||| [function_2] [function_1]	count=2
function	attributes have been refreshed ||| refresh flush	count=1
function	a view similarly to ||| view column reflection	count=1
module	this column, ||| sql	count=1
class	receive a collection ||| extension	count=1
function_arg	names for [arg_2] ||| [function_1] [arg_2]	count=1
module	make use of a ||| sql	count=1
class	the current transaction in ||| session	count=2
function	connection is retrieved from ||| checkout	count=1
function	add [function_2] ||| [function_1] [function_2]	count=3
function	save of ||| save	count=1
function	ms-sql puts top ||| select precolumns	count=1
function_arg	compile [arg_2] ||| [arg_2] [function_1]	count=1
module	expression structure allowing modifications ||| sql	count=1
arg	statement ||| context	count=1
function	if a cte ||| init cte state	count=1
arg	given object ||| object	count=1
function_arg	at arbitrary [arg_2] ||| [function_1] [arg_2]	count=1
function	a raw dbapi ||| dbapi	count=1
module	versions of [module] column ||| [module]	count=1
arg	full set of inherited ||| _set	count=1
function_arg	update [arg_2] ||| [arg_2] [function_1]	count=4
arg	a value ||| value initiator	count=1
function_arg	[function_1] types ||| [arg_2] [function_1]	count=1
function	[function_1] name ||| [function_2] [function_1]	count=5
arg	two phase transaction on ||| xid is_prepared recover	count=2
function	rollback ||| rollback	count=5
function	for a columndefault construct ||| init default	count=1
function	bound value processing function ||| bind processor	count=1
module	[module_1] mysql ||| [module_1] [module_2]	count=4
function	return ||| get enums	count=2
function	columnclause ||| literal	count=1
class	mapper [class_2] ||| [class_2] [class_1]	count=1
function	instance after [function_2] ||| [function_2] [function_1]	count=1
module	returning ||| sql	count=1
arg	identity key from the ||| query key	count=1
function	mapped by ||| mapped	count=1
function	clone ||| cloned traverse	count=2
arg	value [arg_2] ||| [arg_2] key [arg_1]	count=1
function	add limit to the ||| limit	count=1
arg	the search without any ||| search	count=1
module	string ||| mysql	count=1
module	columns in this :class ||| sql	count=1
class	tinytext ||| tinytext	count=1
function	intercept the "loaded ||| loaded	count=1
function	establish row processing functions ||| row processor	count=1
function	[function_1] python descriptor ||| [function_2] [function_1]	count=1
function	dialect implements the ||| implements	count=1
function_arg	that relates [arg_2] ||| [arg_2] [function_1]	count=2
function	[function_1] temporary ||| [function_2] [function_1]	count=4
class	[class_1] data ||| [class_1] [class_2]	count=4
function	target columns for ||| columns	count=1
class	elements ||| cloning visitor	count=1
arg	including calling ||| base_mapper uowtransaction	count=1
class	list of string ||| foreign key	count=1
function	return a union ||| union	count=1
function_arg	[function_1] [arg_2] ||| [function_1] nowait [arg_2]	count=3
function	to represent very small ||| precision numerics enotation small	count=1
function	receive a collection append ||| append	count=1
function_arg	been refreshed [arg_2] ||| [arg_2] [function_1]	count=2
class	"persistent ||| session events	count=1
class	the object allowing user-defined ||| mapper	count=1
function_arg	[function_1] the given ||| [arg_2] [function_1]	count=1
module	and ||| sql	count=1
function	filtering criterion that relates ||| with parent	count=1
function_arg	the oid [arg_2] ||| [function_1] [arg_2]	count=1
function	expand the given ||| expand	count=1
function	for insert ||| for save	count=2
class	userland code that ||| property	count=1
module_class	for this clauseelement ||| sql clause element	count=1
class	:class ||| mapper property	count=2
function	a cte ||| cte	count=1
arg	constructor ||| kwargs	count=1
class	associated with this :class ||| property	count=1
arg	[arg] so that ||| [arg]	count=3
module_class	fetch the first row [module_1] [class_2] unconditionally ||| [module_1] [class_2]	count=3
arg	value on the given ||| value	count=3
function	binops ||| binops	count=1
function	delivering column comparisons to ||| visit binary product	count=1
function	'remote' ||| remote	count=1
function	to use in update ||| collect update	count=1
function_arg	not [arg_2] ||| [function_1] in a [arg_2]	count=2
class	property ||| property	count=2
function	all reflected table-level options ||| options	count=1
function_arg	transient" [arg_2] ||| [function_1] [arg_2]	count=4
function	[function_1] cursor ||| [function_2] [function_1]	count=1
function	[function_1] given order ||| [function_2] [function_1]	count=1
function	decimal separator character is ||| decimal char	count=1
function	detached ||| detached	count=1
module	data to ||| orm	count=1
arg	using add_property ||| dict_of_properties	count=1
function	structure ||| cloned	count=1
function	no ||| no	count=1
function	pool [function_2] ||| [function_2] [function_1]	count=1
module	given two :class fromclause ||| sql	count=1
arg	provides a method ||| comparator_factory descriptor doc info	count=1
class	use ||| values	count=1
function	a bulk update of ||| bulk update mappings	count=1
function	execute() ||| before execute	count=1
class	filter() ||| query	count=1
function	structure [function_2] ||| [function_1] [function_2]	count=3
module	progress for two phase ||| orm	count=1
arg	a given querycontext ||| context path loadopt mapper	count=1
function	string name [function_2] ||| [function_2] schema [function_1]	count=1
function	values and/or types ||| bindparams	count=1
class	unaryexpression against ||| unary expression	count=1
function	refreshed from a ||| refresh	count=1
function	a flush ||| per state flush	count=1
function	flatten ||| flatten	count=1
function	temporary ||| temporary	count=2
arg	the collectionadapter associated with ||| dict_ user_data passive	count=1
function	adapt a :class poollistener ||| adapt	count=1
function	add limit ||| limit	count=1
class	its mapper in an ||| mapper	count=1
function_arg	[function_1] state from ||| [arg_2] [function_1]	count=1
arg	or not it's already ||| connection_record pool ref	count=1
function	del events ||| del	count=1
class	sql ||| clause	count=1
class	on this bakedquery object ||| baked	count=1
function	[function] 'modulus' operator ||| mod operator [function] percent	count=2
class	check ||| join condition	count=1
function	object allowing ||| memoized	count=1
arg	key in the ||| key	count=1
class	engine interfaces ||| engine	count=1
class	:class [class_2] ||| [class_2] [class_1]	count=5
class	default ||| default	count=1
arg	table ||| tablename table	count=1
module	or more named properties ||| orm	count=1
function	as boolean [function] set ||| bool [function]	count=1
function	disable of _create_rule using ||| disable	count=1
class	for [class_2] ||| [class_1] [class_2]	count=1
function_arg	to transient" [arg_2] ||| [function_1] [arg_2]	count=4
module	into this ||| sql	count=1
function	slice object ||| slice	count=1
function	as a 'validator' for ||| validates	count=1
function	return an ||| properties	count=1
arg	b with ||| b msg	count=3
class	fetching server-side expressions and ||| values	count=1
module_class	[module_1] select() construct ||| [module_1] [class_2] union	count=1
arg	the given expression structure ||| opts	count=1
function	set of all ||| all	count=1
function	return the identity key ||| identity key	count=1
arg	in the given clause ||| clause	count=1
function	by criterion ||| by	count=1
class	set of keys ||| instance state	count=1
arg	dbapi connection [arg_2] ||| [arg_2] [arg_1]	count=2
function	associated ||| memoized	count=1
function	called exactly once ||| once	count=1
function	[function_1] partial ||| [function_2] [function_1]	count=1
class	to be associated ||| mapper	count=1
function	"bind" to which ||| get	count=1
function	digits ||| digits	count=1
function	cte is ||| init cte state	count=1
function	the 'concat' ||| concat	count=1
arg	[arg] so ||| [arg]	count=3
function	a particular sequence in ||| has sequence	count=1
function	'remote' in primaryjoin secondaryjoin ||| remote with	count=1
function	local synonym matching ||| synonym	count=1
arg	value on [arg_2] ||| [arg_2] [arg_1]	count=2
function	floating-point number with four ||| floats to four	count=1
function_arg	[function_1] [arg_2] the ||| [function_1] [arg_2]	count=13
arg	:class ||| name element	count=1
function	@property a query synonym ||| synonym	count=1
module	values ||| orm	count=1
arg	current cursor returning a ||| stmt type_	count=1
function_arg	return a [function_1] [arg_2] ||| [function_1] [arg_2]	count=1
function	object allowing user-defined ||| memoized	count=1
function	[function_1] temporary ||| [function_1] [function_2]	count=4
function	same as process_query(), except ||| conditionally	count=1
arg	tuple producing ||| meth	count=1
arg	and b ||| b	count=1
function	return the :class ||| get	count=1
class	attribute with an empty ||| attribute impl	count=1
arg	sets ||| states_to_update bulk	count=1
arg	expression structure allowing modifications ||| obj	count=1
module	objects from this ||| sql	count=1
function	bound to an ||| bound	count=1
function	that ||| execution	count=1
function	before ||| before	count=2
function_arg	using the [arg_2] ||| [arg_2] [function_1]	count=3
function	extract column ||| parse column	count=1
function	distinct [function_2] ||| [function_2] [function_1]	count=1
function_arg	server used [arg_2] ||| [function_1] version info [arg_2]	count=2
arg	instance to a ||| instance property	count=1
arg	is checked out from ||| connection_record	count=1
function	the "persistent to ||| persistent to	count=2
function	insert from a select ||| insert from select	count=1
arg	on the given instancestate ||| state dict_	count=1
function	the :meth connection ||| connection	count=1
module	expression structure ||| sql	count=1
class	be ||| base	count=1
function_arg	startswith [arg_2] ||| [function_1] a [arg_2]	count=2
function	a minimized set ||| optimized get statement	count=1
function	[function_1] class attribute ||| [function_2] [function_1]	count=1
function	create the [function_2] ||| [function_1] [function_2]	count=3
module	column [module] ||| dialects [module]	count=1
function	set a ||| set	count=1
module	[module] connection ||| [module]	count=1
class	of ||| values base	count=4
function	expire and refresh ||| refresh	count=1
function	prepare a ||| prepare	count=1
arg	identity key from the ||| query key refresh_state lockmode	count=1
function	about primary keys ||| primary keys	count=2
module_class	[module_1] selectable ||| [module_1] [class_2]	count=12
function	either present directly ||| immediate cls	count=1
arg	connection ||| connection name	count=2
arg	alias object returning a ||| alias	count=1
module	exported by this ||| sql	count=1
function_arg	kwargs [arg_2] ||| [arg_2] [function_1]	count=1
class	interfaces ||| engine	count=1
function	[function_1] in that ||| [function_1] [function_2]	count=1
function_arg	[function_1] queuepool ||| [arg_2] [function_1]	count=1
arg	with ||| type_	count=1
class	collection with keying ||| mapped collection	count=1
module_class	this mapper ||| orm mapper	count=2
class	corresponding to this :class ||| mapper	count=1
function	[function_1] type ||| [function_2] [function_1]	count=2
module_class	for this column ||| sql column	count=1
function_arg	set the [arg_2] ||| [function_1] concrete base [arg_2]	count=2
module	initialize the ||| orm	count=1
module	kwargs ||| ext	count=1
function	of the class ||| class	count=1
function	[function_1] foreign key ||| [function_2] [function_1]	count=3
module	the given ||| sql	count=1
module_class	[module_1] [class_2] and all ||| [module_1] [class_2]	count=8
function	to the [function_2] ||| [function_1] [function_2]	count=1
function	retrieve the server ||| get server	count=1
function	mysql on ||| skip mysql on	count=2
function_arg	[function_1] schema table_name ||| [arg_2] [function_1]	count=2
module_class	to this table ||| sql table	count=1
function	initiate instrumentation [function_2] ||| [function_1] [function_2]	count=2
class	result corresponding to ||| query	count=1
class	selectable ||| select	count=4
function	floating-point number with four ||| four	count=1
arg	available table definitions ||| bind schema views only	count=1
function	a branched version ||| contextual connect	count=1
function	a simple ||| simple	count=2
function	to be associated ||| attr	count=1
class	:class ~sqlalchemy engine ||| engine	count=1
arg	right ||| right	count=1
function	[function_1] statement ||| [function_1] [function_2]	count=1
function	foreign keys ||| foreign keys	count=2
module	not have ||| orm	count=1
function	an object instance after ||| after	count=2
function	initialize ||| init state	count=1
module_class	this default ||| sql default	count=1
arg	event ||| target value initiator	count=1
function_arg	establish this type as [function_1] [arg_2] ||| [function_1] [arg_2]	count=1
module_class	[module_1] [class_2] after it has been ||| [module_1] [class_2] load target context	count=2
class	key ||| key	count=1
module_class	:class cte, or ||| sql has	count=1
function	new ||| create	count=3
arg	render ||| update_stmt from_table extra_froms from_hints	count=1
function	side [function_2] ||| [function_2] [function_1]	count=1
function_arg	a lateral [arg_2] ||| [arg_2] [function_1]	count=1
function	first row and ||| scalar	count=1
function_arg	[function_1] persistence of ||| [function_1] [arg_2]	count=2
class	a parent query ||| baked query	count=1
arg	an instance ||| class_ oldinit instance	count=1
function_arg	[function_1] attribute ||| [arg_2] [function_1]	count=2
function	keys representing the local ||| column keys	count=1
arg	an attribute ||| key	count=1
class	the object allowing ||| mapper property	count=1
function_arg	refreshed [arg_2] ||| [function_1] [arg_2]	count=2
function	[function_1] warning on ||| [function_1] [function_2]	count=3
arg	entity ||| entity	count=2
function	offset/limit is ||| wo	count=1
function	dialect implements the ||| implements get lastrowid	count=1
function	"detached" from a ||| detach	count=1
function	union statement used ||| union	count=1
arg	is to be "invalidated" ||| connection_record exception	count=1
function	:class result object for ||| for	count=1
function	adapt a ||| adapt	count=1
function_arg	string describing [arg_2] ||| [arg_2] [function_1]	count=1
class	this ||| mapper property	count=2
function	columnproperty ||| column	count=1
arg	value on the ||| value	count=3
function_arg	set a [arg_2] ||| [function_1] state dict_ [arg_2]	count=4
module	mysql ||| dialects mysql	count=3
function	c collection ||| collection	count=1
function	register a listener ||| listen	count=1
class	if the [class] condition ||| [class]	count=1
arg	an attribute ||| instance key	count=2
function	[function_1] ordering ||| [function_2] [function_1]	count=5
function	a descending order ||| create desc	count=1
function	percent ||| percent sign	count=1
class	allowing user-defined data ||| mapper	count=1
class	state and has not ||| state	count=1
function_arg	[function_1] mapper ||| [arg_2] [function_1]	count=1
function	a primary key ||| pk	count=1
module	~ expression ||| sql	count=2
arg	given key ||| key	count=1
function	given expression structure allowing ||| traverse	count=1
class	clause for the ||| values	count=1
module	initialization ||| declarative	count=1
function	cursor generated ||| cursor	count=1
function	a dialect-specific literal processor ||| cached literal processor	count=1
module	allows initialization from ||| ext declarative	count=1
class	[class_1] context ||| [class_1] [class_2]	count=2
function	overlap between [function] ||| [function]	count=1
function	a cte is located ||| cte state	count=1
function	a where clause to ||| where	count=1
function	mock ||| mock	count=1
function	[function_1] group ||| [function_1] [function_2]	count=1
function	temporary view names ||| temp view names	count=6
class	[class_1] joined ||| [class_2] [class_1]	count=2
class	selectable embedded as a ||| select base	count=1
function_arg	[function_1] [arg_2] ||| [function_1] in [arg_2]	count=1
function	using affinity ||| affinity	count=1
function	[function] last insert ||| lastrow [function]	count=1
module_class	[module_1] ddl ||| [module_1] [class_2]	count=2
module_class	return a [module_1] [class_2] ||| [module_1] [class_2]	count=2
class	execution context for a ||| execution context	count=1
class	a new [class] applying ||| [class]	count=1
module	enum ||| dialects mysql	count=1
function_arg	[function_1] of inherited ||| [function_1] kwargs cls [arg_2]	count=1
module	relationships of ||| orm	count=1
module	firebird ||| dialects firebird	count=2
arg	return an ||| cls	count=3
arg	[arg_1] instancestate ||| [arg_2] [arg_1]	count=2
arg	an expression and locate ||| expression consider_as_foreign_keys consider_as_referenced_keys any_operator	count=1
arg	persisted database [arg_2] ||| [arg_1] [arg_2]	count=4
module	given name to a ||| engine	count=1
function	ms-sql puts top it's ||| select precolumns	count=1
function	the purpose of fetching ||| return	count=1
function_arg	[function_1] attribute and ||| [arg_2] [function_1]	count=1
class	result column ||| result	count=1
module	class [module_2] ||| [module_2] [module_1]	count=2
function	return the results ||| all	count=1
function	insert or update ||| save	count=1
function	raw dbapi [function_2] ||| [function_1] [function_2]	count=1
class	operator in ||| column operators	count=10
function	and defaults ||| defaults	count=1
function	a descending ||| create desc	count=1
function	any ||| any	count=1
class	transaction in progress ||| session	count=2
class	type for a ||| type	count=2
arg	[arg] repr ||| a [arg]	count=4
function	[function_1] :class dialect ||| [function_1] [function_2]	count=1
class	returning clause for ||| base	count=1
class	result [class_2] ||| [class_2] [class_1]	count=2
module	attribute of the class ||| declarative	count=1
function	new ||| transaction create	count=1
arg	available table definitions ||| views only	count=1
module	managed by this ||| engine	count=1
function	+ ||| radd	count=1
function	row processing functions for ||| row processor	count=1
arg	subclass to ||| class_ factory	count=1
function_arg	first time [arg_2] ||| [arg_2] [function_1]	count=1
function	representation of ||| time microseconds	count=1
arg	an expression and ||| expression consider_as_foreign_keys consider_as_referenced_keys	count=1
function	a flush ||| flush	count=1
function_arg	[function_1] connection ||| [arg_2] [function_1]	count=10
class	which do not have ||| instance	count=1
function_arg	[function_1] [arg_2] ||| [function_1] connect [arg_2]	count=8
function_arg	[function_1] b ||| [function_1] a [arg_2]	count=4
module_class	[module_1] textclause ||| [module_1] [class_2]	count=4
function	query synonym ||| synonym	count=1
function	[function_1] a jdbc ||| [function_2] [function_1]	count=1
class	the purpose ||| values	count=1
class	for the purpose of ||| values	count=1
function	intersect [function_2] ||| [function_1] [function_2]	count=2
function	particular entity only ||| only	count=1
function	text ||| text	count=1
arg	in table_name ||| table_name	count=4
arg	the where clause ||| clause	count=1
arg	a cursor to ||| cursor	count=3
function	or one of ||| or str	count=1
class	which do not ||| instance state	count=1
function	execute() [function_2] ||| [function_2] [function_1]	count=4
arg	"construct a ||| arg	count=1
class	suggest a type for ||| type engine	count=1
class	parent query ||| baked query	count=1
class	for ||| type engine	count=1
function	primaryjoin ||| primaryjoin	count=1
module	in progress ||| orm	count=2
arg	using gen_id() ||| seq type_	count=1
function	return an item ||| get	count=1
class	elements ||| clause visitor	count=1
function	y [function] x1 ||| tuple [function]	count=1
function	expand ||| expand	count=1
function	implements the ||| implements get lastrowid	count=1
arg	a given querycontext ||| context path loadopt	count=1
function_arg	construct [arg_2] ||| [arg_2] [function_1]	count=3
arg	a transaction ||| transaction	count=1
class	a :func ~ ||| column operators	count=2
function	the not in ||| notin	count=1
arg	value to ||| value	count=2
function	first ||| scalar	count=1
class	elements ||| clause	count=2
function	bound [function_2] ||| [function_1] [function_2]	count=1
class	which do ||| instance state	count=1
function	id ||| table id	count=2
function	the decimal separator ||| decimal char	count=1
function	foreign ||| foreign	count=4
function_arg	criteria [arg_2] ||| [arg_2] [function_1]	count=6
module	set of keys which ||| orm	count=1
module	return the set of ||| orm	count=1
function	use in delete ||| collect delete	count=2
function	subquery eager [function_2] ||| [function_1] [function_2]	count=4
function	append a [function_2] ||| [function_2] [function_1]	count=2
function	relationships ||| compile	count=1
function	except of ||| except	count=1
module	for one or ||| orm	count=1
class	when the span ||| events	count=1
function	the :class dialect that ||| dialect	count=1
function	[function_1] [function_2] otherwise return false ||| [function_1] [function_2]	count=2
class	use ||| base	count=1
function	an [function] that provides ||| proxying [function]	count=1
arg	decorates a ||| version message add_deprecation_to_docstring	count=1
function	expressions and ||| return	count=1
arg	for a state ||| state	count=1
function	select a numeric value ||| from numeric	count=1
function	ms-sql puts top it's ||| precolumns	count=1
arg	dialect ||| dialect	count=2
function	tables have some overlap ||| tables overlap	count=1
function	with many [function_2] ||| [function_2] [function_1]	count=1
function	emitting [function_2] ||| [function_1] [function_2]	count=5
function	a :term returning clause ||| return	count=1
arg	:class metadata and ||| engine reflect schema	count=1
function	scalar ||| value	count=1
function	of a ||| return	count=1
class	to the select ||| scalar select	count=1
function	memoize its return value ||| memoized instancemethod	count=1
class	session execute but ||| session	count=1
function_arg	[function_1] given ||| [arg_2] [function_1]	count=1
function	the connectable associated with ||| bind	count=2
arg	mapper ||| mapper	count=2
module	kwargs ||| ext declarative	count=2
arg	where clause ||| clause	count=1
function	particular sequence in ||| has sequence	count=1
function	is [function] integer false ||| [function] int	count=2
function	particular sequence in ||| sequence	count=1
function	[function_1] for a ||| [function_2] [function_1]	count=3
function	[function_1] distinct from ||| [function_1] [function_2]	count=3
function	namespace ||| column attrs	count=1
class	by ||| list	count=1
arg	[arg_1] is ||| [arg_1] [arg_2]	count=3
class	collection ||| mapped collection	count=1
function_arg	[function_1] action for ||| [arg_2] [function_1]	count=4
function	threading and [function] ||| threading with [function]	count=2
class	this [class] connection ||| [class]	count=1
function_arg	[function_1] for it ||| [arg_2] [function_1]	count=2
function	execute() ||| execute	count=5
class	of ||| engine	count=1
class	in progress for two ||| session	count=1
arg	set the [arg_1] [arg_2] attribute firing history events ||| [arg_2] [arg_1]	count=2
function	large variety of mysql ||| mysql	count=1
function	clone the given ||| cloned traverse	count=1
function	[function_1] the table ||| [function_1] [function_2]	count=1
function	[function_1] a warning ||| [function_2] [function_1]	count=4
function	execute a string statement ||| execute	count=1
class	but the order of ||| results	count=1
function_arg	[function_1] results ||| [function_1] [arg_2]	count=1
function	[function] this ||| create [function]	count=1
function	create a ||| init	count=1
class	tuple ||| tuple	count=1
class	cloning [class_2] ||| [class_1] [class_2]	count=1
module	namespace of all ||| orm	count=2
function_arg	set a [arg_2] ||| [function_1] [arg_2]	count=1
function	target :class column ||| column	count=1
function	a warning [function_2] ||| [function_1] [function_2]	count=4
module	and ||| orm	count=1
function_arg	[function_1] [arg_2] ||| [function_1] connection [arg_2]	count=4
module	set of ||| orm	count=1
function	optimized visit dispatch function ||| generate dispatch	count=1
function	construct an ||| init	count=3
function	[function_1] on a ||| [function_1] [function_2]	count=6
function	factories ||| factories	count=1
class	mapper ||| mapper	count=8
function	list of elements ||| copy	count=1
function	row ||| row	count=1
function	[function_1] side cursors ||| [function_2] [function_1]	count=1
class	new selectable with ||| select	count=4
class	initialize execution context ||| default execution context	count=3
function	session ||| session	count=1
class	an _unboundload() object into ||| load	count=1
module	dbapi ||| core	count=2
function_arg	[function_1] attributes unconditionally ||| [arg_2] [function_1]	count=2
module_class	[module_1] when ||| [module_1] [class_2]	count=2
arg	given expression structure allowing ||| opts	count=1
function	create [function_2] ||| [function_2] [function_1]	count=5
function	apply ad-hoc ||| set collection attributes	count=1
function	insert from [function_2] ||| [function_1] [function_2]	count=1
function	a bulk insert of ||| bulk insert mappings	count=1
function	:class ||| attr	count=1
function	after a series of ||| after	count=1
function	with the given ||| with	count=1
class	data to ||| property	count=1
arg	including calling after_insert/after_update events ||| uowtransaction	count=1
class	type ||| type	count=3
function	dialect-specific result [function_2] ||| [function_2] [function_1]	count=1
class	construct ||| attribute impl	count=1
function_arg	values [arg_2] ||| [arg_2] [function_1]	count=1
function	criterion that relates the ||| with parent	count=1
function_arg	[function_1] b ||| [function_1] [arg_2]	count=1
function	contruct a new ||| init	count=1
module	:term returning clause ||| sql	count=1
module_class	[module_1] object instance ||| [module_1] [class_2]	count=6
function	given dictionary of properties ||| properties	count=1
module	string to a long ||| mysql	count=1
function	[function_1] cascade ||| [function_2] [function_1]	count=4
arg	function ||| identifier fn	count=1
module	the purpose of ||| sql	count=1
function	keys in ||| keys	count=1
function	for a hierarchy ||| for	count=1
function	the * ||| rmul	count=1
module	current transaction in progress ||| orm	count=2
module	allows initialization from kwargs ||| ext declarative	count=1
class	the ||| column operators	count=2
arg	column-oriented attribute ||| key	count=1
arg	statement referred ||| crit	count=1
function	limit [function_2] ||| [function_2] [function_1]	count=2
arg	given identity key from ||| query key refresh_state	count=1
module	objects for ||| ext	count=1
module	server-side ||| sql	count=1
class	return the set ||| instance	count=1
function	1 ||| 1	count=1
arg	alias ||| alias name flat	count=1
function	[function_1] select ||| [function_2] [function_1]	count=2
function	clone the given expression ||| traverse	count=1
function	return information about foreign_keys ||| get foreign keys	count=1
module_class	fetch the [module_1] [class_2] unconditionally ||| [module_1] [class_2] first	count=3
arg	when building [arg] ||| [arg]	count=1
function	return an instance ||| get	count=1
arg	of mapping dictionaries ||| mappings return_defaults render_nulls	count=1
module	by this :class ||| sql	count=1
arg	the _decl_class_registry associated with ||| classname cls	count=1
function	has a ||| has	count=2
arg	a particular schema ||| schema order_by	count=2
class	if the given identifier ||| identifier	count=2
function_arg	[function_1] [arg_2] ||| [function_1] attach session [arg_2]	count=1
function	processing ||| processor	count=1
function	locate binary criterion pairs ||| criterion as pairs	count=1
function	or one of ||| or	count=1
arg	by the mapper ||| mapper	count=1
module_class	[module_1] table ||| [module_1] [class_2]	count=26
function	rollback the current ||| rollback	count=1
class	against a function ||| function	count=1
function_arg	from a [arg_2] ||| [function_1] description [arg_2]	count=1
function	isolation level assigned ||| isolation level	count=1
function_arg	constraints [arg_2] ||| [function_1] [arg_2]	count=2
module	server-side expressions and ||| sql	count=1
function_arg	wrapper with [arg_2] ||| [arg_2] [function_1]	count=3
class	be ||| mapper property	count=2
function_arg	[function_1] is ||| [arg_2] [function_1]	count=3
function	pending actions for ||| state actions	count=1
arg	associate a sql expression ||| expression	count=1
arg	the given object ||| object	count=1
arg	[arg] select if ||| [arg]	count=2
function	inter-mapper ||| compile	count=1
module	a transaction and return ||| engine	count=1
function_arg	dictionary-based collection [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	[function_1] [arg_2] the ||| [function_1] connection [arg_2]	count=2
function_arg	assert a [function_1] [arg_2] on failure ||| [function_1] [arg_2]	count=8
module_class	[module_1] sequence ||| [module_1] [class_2]	count=1
function	create ||| create	count=14
function	modifications by ||| cloned traverse	count=1
class	a :term ||| values	count=1
function	:class dialect that ||| dialect	count=1
function	particular sequence in the ||| has sequence	count=1
arg	the given key ||| key	count=1
function	compile a ||| compile	count=1
module	user-defined data to be ||| orm	count=1
function	database dialect class corresponding ||| dialect	count=1
function	of all [function_2] ||| [function_2] [function_1]	count=2
function	test as emitting ||| emits	count=1
function	iterator ||| iterate	count=1
function	[function_1] names for ||| engine dialect get [function_1] [function_2]	count=3
module	associated with this ||| orm	count=1
class	:class pool ||| pool	count=1
function	binary criterion ||| criterion	count=1
function	expression for ||| expression	count=1
function	[function_1] insert ||| [function_1] [function_2]	count=5
arg	type with attribute-based keying ||| attr_name	count=1
class	string ||| foreign key	count=1
module	of all :class ||| orm	count=3
function	objects with non-ascii characters ||| data	count=1
function	[function_1] values ||| [function_2] [function_1]	count=1
function	[function_1] union ||| [function_1] [function_2]	count=2
class	names and ||| meta	count=1
function	bind ||| bind	count=1
function	join ||| join left	count=1
class	expression ||| column operators	count=2
function_arg	[function_1] given :class ||| [arg_2] [function_1]	count=1
function	string keys for ||| keys	count=1
function	use in [function_2] ||| [function_1] [function_2] commands uowtransaction table	count=1
module_class	a :class function ||| sql function	count=1
class	to the property to ||| property	count=1
function_arg	schema from [arg_2] ||| [arg_2] [function_1]	count=1
function	a follower ||| follower config	count=1
class	:class ||| session	count=1
arg	the given mapped descriptor ||| attribute	count=2
arg	an expression ||| expression consider_as_foreign_keys consider_as_referenced_keys any_operator	count=1
module	[module_1] that is ||| [module_1] [module_2]	count=4
class	the query ||| query	count=1
function	an over clause ||| over	count=1
function	receive a literal ||| literal	count=1
function	update from clause specific ||| update from clause	count=1
function	integrityerror when reporting ||| integrity error	count=1
module	firebird ||| firebird	count=1
module	special mysql ||| mysql	count=1
module	make use of ||| sql	count=1
function	criteria ||| criteria	count=2
class	:meth ~ session execute ||| session	count=1
function	if a cte is ||| init cte	count=1
function	schema name presented ||| schema name	count=2
arg	existence ||| connection sequence_name schema	count=1
arg	function for ||| identifier fn	count=1
class	order by [class_2] ||| [class_1] [class_2]	count=1
arg	relationships that meet the ||| type_ state halt_on	count=1
class	and its mapper ||| mapper	count=1
function	criterion [function_2] ||| [function_1] [function_2]	count=1
function	insert from [function_2] ||| [function_2] [function_1]	count=1
class	table ||| table	count=6
class	attribute with ||| attribute	count=1
arg	between two mapped classes ||| argument secondary primaryjoin secondaryjoin	count=1
function_arg	connection [arg_2] ||| [arg_2] [function_1]	count=5
function	[function] this ||| [function]	count=1
function	added to the ||| for new	count=1
function	create table ||| create	count=2
function	synonym matching ||| synonym	count=1
function	add limit [function_2] ||| [function_2] [function_1]	count=2
function	value from the sequence ||| sequence	count=1
function	instrumented ||| instrumented	count=1
function	inherits [function] ||| [function] inherited	count=2
function	allowing ||| cloned traverse	count=2
function	was deleted within a ||| was deleted	count=1
function	a namespace ||| attrs	count=1
function	startswith ||| startswith	count=1
function	'cloned' predecessors ||| cloned	count=1
function	bound to an engine ||| bound	count=1
function	about primary keys in ||| primary keys	count=1
class	string ||| foreign key constraint	count=2
function_arg	[function_1] [arg_2] ||| [function_1] name [arg_2]	count=12
class	for the current bind ||| inspector	count=2
function_arg	[function_1] given querycontext ||| [arg_2] [function_1]	count=3
function	[function] params ||| received [function]	count=3
module_class	iterate through [module_1] [class_2] and all ||| [module_1] [class_2]	count=2
class	instance of a ||| instance	count=1
module	and then ||| engine	count=1
function	given partial ordering ||| partial ordering	count=2
function	value processing function for ||| processor	count=1
arg	an alias ||| alias name flat	count=1
class	a set ||| set	count=1
function	local synonym ||| synonym	count=1
class	the ||| property	count=1
function_arg	[function_1] connection ||| [function_1] to savepoint [arg_2]	count=1
function	float type ||| float type	count=1
module	objects for all current ||| ext	count=1
class	instance ||| instance	count=3
module_class	[module_1] :class functionelement ||| [module_1] [class_2]	count=6
class	attribute with ||| attribute impl	count=1
function	refresh the attributes ||| refresh	count=1
module	given identity ||| ext	count=1
function	annotate 'remote' ||| annotate remote with	count=1
function	initiate instrumentation of ||| instrument	count=1
module	of the :class ||| engine	count=1
function_arg	initialize [arg_2] ||| [function_1] collection state dict_ [arg_2]	count=1
arg	an :class orderinglist ||| cls	count=1
function	use [function_1] [function_2] 'modulus' operator ||| [function_2] [function_1]	count=2
module_class	[module_1] attribute ||| [module_1] [class_2]	count=4
class	:func ||| clause	count=2
module	purpose of fetching server-side ||| sql	count=1
class	type when ||| type	count=1
class	withingroup ||| within group	count=1
arg	table definitions from the ||| schema views only	count=1
module	new :class ||| sql	count=6
function	rollback has occurred including ||| soft rollback	count=1
function	a where clause ||| where	count=1
function	with a warnings warn ||| with warning	count=1
function	given order [function_2] ||| [function_2] [function_1]	count=2
arg	the :class metadata and ||| cls engine reflect schema	count=1
function	set the given :class ||| set	count=1
arg	intercept ||| conn opts	count=1
arg	the persistence of the ||| flush_context attrs	count=1
function	extended ||| extended	count=1
function	rollback a ||| rollback twophase	count=1
arg	a given querycontext ||| entity path loadopt	count=1
module	use ||| sql	count=1
function	the 'contains' ||| contains	count=1
function	fetching server-side ||| return	count=1
module	[module] ~ schema ||| [module]	count=1
module	select if [module] element ||| [module]	count=1
function_arg	[function_1] :class ||| [arg_2] [function_1]	count=3
function	return a dialect-specific ||| cached	count=2
arg	issue ||| bind	count=2
class	engine ||| engine	count=1
function	table names for ||| table names	count=3
function	a view [function_2] ||| [function_2] [function_1]	count=4
function	the attribute keys which ||| keys	count=1
function	the object allowing user-defined ||| attr	count=1
arg	with a ||| metadata	count=1
function	insert from a ||| insert from	count=2
arg	modifications by visitors ||| opts visitors	count=1
class	uowtransaction ||| uowtransaction	count=2
function	instance after ||| after	count=2
function	important ||| important	count=1
function_arg	[function_1] [arg_2] ||| [function_1] element [arg_2]	count=6
function	foreign table [function_2] ||| [function_1] [function_2]	count=1
function	default isolation level assigned ||| default isolation level	count=1
function	integers starting at 1 ||| from 1	count=1
class	event ||| events	count=1
function	[function_1] nothing ||| [function_1] [function_2]	count=3
module	initialization from kwargs ||| declarative	count=1
function	supports representation of python ||| historic	count=1
function	within [function] ||| compare name for [function]	count=1
module	connection's [module] connection but ||| [module]	count=1
function	[function_1] detached ||| [function_1] [function_2]	count=1
function	'validator' ||| validates	count=1
function	listeners to synchronize a ||| listeners	count=1
function_arg	do update [arg_2] ||| [arg_2] [function_1]	count=2
arg	item into ||| item	count=1
function	new [function_2] ||| [function_2] [function_1]	count=3
class	server-side expressions ||| base	count=1
function	numeric value ||| numeric	count=1
function	before a connection is ||| connect	count=1
function	o) for o ||| iter id	count=1
function	have ||| do	count=3
module	this :class clauseelement ||| sql	count=1
class	to the pool ||| pool events	count=1
arg	[arg_1] an ||| [arg_2] key [arg_1]	count=1
function_arg	all tables ||| all bind tables	count=2
class	and [class_2] ||| [class_2] [class_1]	count=1
function_arg	return the [arg_2] ||| [function_1] kwargs cls [arg_2]	count=1
class	set to ||| set	count=1
function	[function_1] foreign ||| [function_2] key [function_1]	count=1
function	emitting a [function_2] ||| [function_2] [function_1]	count=5
class	into ||| load	count=1
function_arg	primary keys [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] class ||| [function_2] [function_1]	count=2
function	retrieved from the ||| checkout	count=1
arg	with ||| metadata schema referred_schema_fn name	count=1
function	user-defined ||| memoized attr	count=1
function_arg	[function_1] level 'level'? ||| [function_1] [arg_2]	count=2
function	function with ||| with warning	count=1
class	may have ||| query	count=1
function_arg	[function_1] specific dialects ||| [arg_2] [function_1]	count=2
class	[class_1] when ||| [class_2] [class_1]	count=3
module	more ||| orm	count=1
module	[module] but only ||| [module]	count=2
module	dictionary embedded into this ||| sql	count=1
function	foreign key columns collected ||| foreign cols	count=1
function	setup ||| setup	count=1
arg	the results ||| results	count=1
module	that allows initialization ||| ext declarative	count=1
module	search for a ||| dialects oracle	count=1
module	add special mysql ||| mysql	count=1
function	[function_1] schema name ||| [function_1] [function_2]	count=1
arg	clone the ||| obj opts	count=1
function	:term returning ||| return	count=1
arg	allowing modifications ||| obj opts	count=1
function	for the "reverse" direction ||| reverse remote	count=1
function	foreign [function_2] ||| [function_1] [function_2]	count=8
function	provide an implementation ||| do execute	count=1
module	that allows initialization from ||| ext declarative	count=1
module	of keys ||| orm	count=1
function	produce a ||| init	count=1
function	bound ||| bound	count=1
function	limit to [function_2] ||| [function_2] [function_1]	count=2
function	implements ||| implements	count=1
arg	a and b ||| a b	count=1
function	the python descriptor that ||| descriptor	count=1
function	"target ||| json	count=1
function	be associated with this ||| memoized	count=1
arg	within the persistence ||| target flush_context attrs	count=1
function	datetime object ||| datetime	count=1
function	generic [function] ||| precision generic [function]	count=1
class	[class] against ||| [class]	count=3
class	a cloning [class_2] ||| [class_2] [class_1]	count=1
function	drop [function_2] ||| [function_2] [function_1]	count=1
class	have a ||| state	count=1
class	compiled result ||| result meta data	count=1
module	initialization from ||| declarative	count=1
class	a :func ~ expression ||| column	count=2
module	phase ||| orm	count=1
function	oid for ||| get table oid	count=1
class	of keys which ||| instance	count=1
function	transient" ||| transient	count=2
function	of all :class compositeproperty ||| composites	count=1
function	[function_1] ddl ||| [function_1] [function_2]	count=2
module	of [module] column as ||| [module]	count=1
function	an exception ||| exception	count=1
class	keys which ||| instance	count=1
arg	key from the ||| key	count=1
function	bulk insert ||| bulk insert	count=1
arg	allowing modifications by visitors ||| opts visitors	count=1
function	against a specific schema ||| against	count=1
function	cte is located ||| init cte	count=1
arg	if supported ||| schema	count=2
arg	right clauses ||| right onclause	count=1
arg	string sql statement and ||| statement	count=1
arg	alias of the given ||| alias	count=1
class	mapped ||| state	count=2
arg	the given expression ||| opts	count=1
module_class	for a method ||| ext hybrid	count=1
function	of columns exported by ||| columns	count=1
function	[function_1] foreign ||| [function_1] [function_2]	count=3
function	[function_1] of foreign ||| [function_1] [function_2]	count=1
function	group [function_2] ||| [function_1] [function_2]	count=3
function	list of table ||| table	count=1
arg	an :class orderinglist ||| cls dict_	count=1
function	dictionary-based [function_2] ||| [function_2] [function_1]	count=2
function	constraint ||| constraint	count=2
class	attribute [class_2] ||| [class_2] [class_1]	count=2
arg	this :class ~ ||| bind checkfirst	count=4
function	been refreshed within ||| refresh flush	count=1
class	of fetching server-side ||| base	count=1
function	view similarly to how ||| view column reflection	count=1
function	relates the ||| with parent	count=1
function	a "bind" to ||| get	count=1
class	[class_1] attribute ||| [class_1] [class_2]	count=1
arg	current cursor returning a ||| stmt	count=1
function	ddl phrases ||| ddl	count=1
arg	issue ||| bind checkfirst	count=1
function	a cte ||| init cte state	count=1
function	user-defined ||| memoized	count=1
function_arg	against [arg_2] ||| [function_1] backend [arg_2]	count=1
arg	the given ||| opts	count=1
function	schema from the ||| schema	count=1
function	[function_1] as ||| mod operator [function_2] [function_1]	count=3
module	the object allowing user-defined ||| orm	count=1
function	[function_1] a ddl ||| [function_1] [function_2]	count=2
arg	with a ||| metadata schema	count=1
function_arg	for level 'level'? ||| for level	count=1
function	table [function_2] ||| [function_2] [function_1]	count=14
class	belongs ||| session class methods	count=1
function_arg	[function_1] table_name ||| [function_1] [arg_2]	count=25
class	the :class ~sqlalchemy ||| engine	count=1
function	dictionary of connection arguments ||| connect args	count=1
module_class	[module_1] [class_2] ||| [module_1] column collection [class_2]	count=4
class	keys which do ||| instance state	count=1
function	it inherits [function] mapped ||| [function] inherited	count=1
class	simple ||| generative select	count=2
arg	current cursor returning ||| stmt type_	count=1
arg	addressable [arg] ||| [arg]	count=1
function	puts ||| get select precolumns	count=2
function_arg	logger for [arg_2] ||| [arg_2] [function_1]	count=2
function	on conflict ||| on conflict	count=4
class	to this pool ||| pool	count=1
function	append [function_2] ||| [function_2] [function_1]	count=8
function	view names for ||| view names	count=2
module	an ||| orm	count=7
function	puts top ||| select precolumns	count=1
function	given ||| iterator	count=1
class	create ||| cx oracle	count=1
function	join object given ||| join	count=1
arg	cls ||| cls	count=1
arg	an expression ||| expression	count=1
function	[function_1] error ||| [function_2] [function_1]	count=2
class	purpose of ||| base	count=1
function_arg	[function_1] for schema ||| [arg_2] [function_1]	count=5
function	drop ddl ||| drop	count=1
module	commit ||| orm	count=1
arg	descriptor ||| cls attribute	count=2
function	:class join object ||| join	count=1
module_class	and then [class_2] ||| [module_1] [class_2] first	count=1
function	a :term returning ||| return	count=1
function_arg	rollback a [arg_2] ||| [function_1] [arg_2]	count=1
function	and defaults ||| return defaults	count=1
class	mapper [class_2] ||| [class_1] [class_2]	count=1
class	compiled result column ||| result meta data	count=1
function	all :class ||| all	count=1
class	do ||| instance	count=1
class	the given identifier ||| oracle identifier	count=1
function	windows failures ||| windows	count=1
arg	high level ||| clauseelement	count=2
module	for [module] mapepd object ||| [module]	count=1
class	expression ||| expression	count=1
function	return [function_2] ||| [function_1] [function_2]	count=47
arg	when building [arg] position is ||| [arg]	count=1
function	[function_1] cursor generated ||| [function_2] [function_1]	count=1
function	dbapi-level exception such ||| graceful disconnects	count=1
module_class	this :class session ||| orm session	count=2
function	structure allowing ||| cloned traverse	count=1
function	the ||| return	count=1
arg	clone ||| obj opts	count=1
class	a new selectable ||| select	count=1
function	create a primary key ||| pk	count=1
function	given expression delivering column ||| visit binary product	count=1
function	return [function_2] ||| [function_1] default schema [function_2]	count=2
module_class	[module_1] index ||| [module_1] [class_2]	count=2
arg	[arg_1] element ||| [arg_2] [arg_1]	count=3
function	all [function_2] ||| [function_1] [function_2]	count=2
function	with ||| annotate	count=2
function	intercept the "loaded as ||| loaded as	count=1
function_arg	a criteria [arg_2] ||| [function_1] [arg_2]	count=6
arg	[arg] the ||| [arg]	count=3
class	[class_1] element ||| [class_1] [class_2] compare name for	count=4
arg	true if col ||| col	count=1
arg	persistence of ||| target flush_context attrs	count=1
class	the purpose of fetching ||| values	count=1
class	compiled object ||| compiled	count=1
function	a data type ||| type	count=1
function	active collations list from ||| detect collations	count=1
function_arg	[function_1] for ||| [arg_2] [function_1]	count=2
function	the inter-mapper relationships of ||| compile	count=1
function	to transient" ||| to transient	count=2
class	be ||| mapper	count=1
function	collection reference ||| collection	count=1
function	and yield only outer-exposed [function_1] [function_2] ||| [function_1] [function_2]	count=4
function	pending actions for a ||| actions	count=1
function	temporary view ||| temp view	count=4
class	lookup ||| instrumentation factory	count=1
function	added to the ||| new	count=1
arg	the persistence of ||| target flush_context	count=1
function	force the given ||| force	count=1
arg	this attribute ||| cls attribute	count=1
function	an [function] ||| [function]	count=3
function	:meth connection execution_options ||| set connection execution options	count=1
function_arg	returning clause [arg_2] ||| [arg_2] [function_1]	count=2
class	return a new query ||| query	count=1
module_class	[module_1] composite ||| [module_1] [class_2]	count=2
class	object allowing user-defined ||| mapper	count=1
arg	a create constraint ||| constraint	count=2
function	:class session ||| session	count=2
function	[function_1] column ||| [function_2] [function_1]	count=1
arg	list of mapping dictionaries ||| mappings return_defaults	count=1
class	mapped object ||| instance state	count=2
class	object allowing user-defined ||| property	count=1
function	expressions and defaults ||| return defaults	count=1
function_arg	with the [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	[function_1] event ||| [function_1] [arg_2]	count=8
class	user-defined data to be ||| property	count=1
function	in update ||| post update	count=1
function_arg	initialize a [arg_2] ||| [function_1] collection obj [arg_2]	count=1
function	after [function] has ||| after [function]	count=1
function	integers starting at 1 ||| 1	count=1
function	determine ||| determine direction	count=1
function	with a ||| with	count=1
function	a bulk save ||| bulk save	count=2
function	a function with a ||| with warning	count=1
function	return the newly resulting ||| prefix with	count=1
function	x y [function] x1 y1 ||| tuple [function]	count=1
function	a collection reference ||| collection	count=1
class	:class functionelement ||| function element	count=1
function	setup [function_2] ||| [function_2] [function_1]	count=1
function	conforms to [function_2] ||| [function_1] [function_2]	count=2
function	convert the "offset or ||| or	count=1
function	the 'ddl runner' for ||| check for	count=1
class	[class_1] bindparameter to ||| [class_2] [class_1]	count=1
class	must ||| suite requirements	count=2
class	return a :class label ||| label	count=1
function	limit to ||| limit	count=1
function	value processing function ||| processor	count=1
function_arg	on [arg_2] ||| [arg_2] [function_1]	count=1
arg	clause of ||| clause	count=1
arg	annotating each [arg_2] ||| [arg_2] annotations [arg_1]	count=1
function	a bulk [function_2] ||| [function_2] [function_1]	count=14
function	cte is located to ||| init cte	count=1
arg	:class sessiontransaction is ||| session transaction	count=1
function	add a criteria ||| with criteria	count=3
function	[function_1] given partial ||| [function_1] [function_2]	count=1
arg	function for the given ||| fn	count=1
class	clause for the purpose ||| values base	count=1
module	not have a ||| orm	count=1
function	select [function_2] ||| [function_2] union contained [function_1]	count=2
function	key ||| cols	count=1
function	return a [function] ||| get [function]	count=1
function	loaders to add ||| add lazyload	count=1
function	[function_1] names ||| [function_2] [function_1]	count=37
function_arg	[function_1] iterator of ||| [function_1] [arg_2]	count=5
arg	an alias ||| alias	count=1
arg	current cursor returning ||| stmt	count=1
module_class	[module_1] column ||| [module_1] [class_2]	count=2
class	result column information ||| result meta	count=1
function	the [function] ||| foreign key [function]	count=2
function	for the table ||| table	count=1
class	the object ||| property	count=1
function_arg	[function_1] function ||| [function_1] [arg_2]	count=6
function_arg	[function_1] new connection ||| [function_1] [arg_2]	count=1
class	property to ||| mapper property	count=1
class	of string ||| foreign key	count=1
function_arg	[function_1] mapper ||| [function_1] concrete base [arg_2]	count=1
function	the c collection ||| collection	count=1
function	[function_1] insert or ||| [function_1] [function_2]	count=1
function	is ||| is	count=7
function	table names to be ||| drop names	count=1
class	ddlelement ||| ddlelement	count=1
function	decimal separator character ||| decimal	count=1
class	them in ||| join condition	count=1
module	the current transaction in ||| orm	count=2
function	with ||| with	count=3
module	your ||| testing	count=1
class	that references this mapperproperty ||| property	count=1
arg	the given instance to ||| instance property	count=1
function	to add ||| add lazyload	count=1
function	of temporary [function_2] ||| [function_2] [function_1]	count=18
arg	visit the ||| visitors	count=2
class	instance of a particular ||| instance	count=1
arg	test case's ||| variance	count=1
function	return the [function_2] ||| [function_1] default schema [function_2]	count=3
module	used for [module] mapepd ||| [module]	count=1
arg	given element ||| element	count=1
class	fetch ||| pgdialect	count=1
function	class ||| class	count=6
function	filter the ||| filter	count=1
arg	a select() ||| select	count=1
class	to this collection ||| collection	count=1
class	against the function ||| function	count=1
function_arg	execute a [arg_2] ||| [function_1] cursor [arg_2]	count=1
function	result processor ||| result processor	count=2
function	[function_1] dialect that ||| [function_1] [function_2]	count=1
function	intercept the "pending to ||| pending to	count=1
class	of keys which do ||| instance state	count=1
function	[function_1] a statement ||| [function_2] [function_1]	count=1
function_arg	[function_1] name ||| [arg_2] [function_1]	count=2
function	the "loaded [function_2] ||| [function_1] [function_2]	count=1
function	loaders in the cache ||| loaders	count=1
function	rollback has occurred ||| rollback	count=1
function	use of a ||| return	count=1
function	representation ||| date historic	count=1
arg	for a given querycontext ||| entity path loadopt	count=1
function	for bind parameters which ||| params	count=1
arg	connection ||| engine connection close_with_result	count=1
class	of fetching server-side expressions ||| values base	count=1
class	clause for ||| values	count=1
arg	regex ||| regex	count=2
class	construct ||| queue pool	count=1
function	into [function] ||| inner [function]	count=3
class	smallinteger ||| smallint	count=1
class	of a ||| base	count=1
function	with ||| memoized	count=1
class	add [class] more ||| [class]	count=1
function	a columndefault construct ||| init default	count=2
function	sql union [function] of ||| union [function]	count=1
function	dialect [function_2] ||| [function_2] [function_1]	count=1
function	mappers have been configured ||| configured	count=1
function_arg	[function_1] [arg_2] ||| [function_1] concrete base [arg_2]	count=9
function	attributes ||| attribute	count=1
arg	load table description ||| table include_columns exclude_columns	count=1
module_class	including this [class_2] ||| [module_1] [class_2]	count=2
function	expression delivering column ||| visit binary product	count=1
function_arg	[function_1] count ||| [function_1] [arg_2]	count=1
arg	when a ||| dbapi_connection connection_record connection_proxy	count=1
function	descending ||| desc	count=1
function_arg	[function_1] a session ||| [function_1] [arg_2]	count=1
arg	an ||| cls dict_ items	count=1
function	the - ||| sub	count=1
module	of [module] bound ||| [module]	count=1
class	expression ||| operators	count=2
arg	item into the ||| item	count=1
function	expressing the general class ||| affinity	count=1
function	should ||| should	count=1
function	as a 'validator' ||| validates	count=1
function	the columns clause of ||| columns	count=1
function	given group [function_2] ||| [function_1] [function_2]	count=2
function	added to the ||| refresh for new	count=1
function	implements the executioncontext ||| implements get lastrowid	count=1
arg	database state after an ||| table state	count=1
function	to proceed after ||| fetch rows post commit	count=1
function	warnings on ||| warnings on	count=2
function	[function_1] [function_2] ||| mod operator [function_2] [function_1]	count=4
arg	right clauses ||| right	count=1
function	before a connection is ||| do connect	count=1
function	an identity map ||| identity key	count=1
class	bindparameter to the given ||| parameter	count=1
function_arg	listener [arg_2] ||| [function_1] target [arg_2]	count=4
function	a dialect-specific result ||| cached result	count=2
function_arg	against [arg_2] ||| [arg_2] [function_1]	count=1
function	delivering column ||| visit binary product	count=1
class	with compiled result column ||| result meta data	count=1
class	[class] into ||| [class]	count=3
arg	roles are present ||| cls roles methods	count=1
module_class	[module_1] instance ||| [module_1] [class_2]	count=2
function	has the :attr should_evaluate_none ||| evaluates none	count=1
function	reflected table-level options ||| options	count=1
module_class	return a 'bind' [module_1] [class_2] ||| [module_1] [class_2] bind	count=1
function	/ ||| rdiv	count=1
function	emitting [function_2] ||| [function_2] [function_1]	count=5
arg	a table ||| table	count=1
arg	value on the given ||| state dict_ value	count=2
function_arg	[function_1] [arg_2] ||| [function_1] kwargs cls [arg_2]	count=3
function	columns for ||| columns	count=1
function	after a ||| after	count=1
function	minimized set of ||| optimized get statement	count=1
function	:class join object ||| create join	count=1
function	similarly to ||| column reflection	count=1
function	:class session to ||| session	count=1
function	a debug ||| debug	count=1
function	row processing functions ||| create row processor	count=2
class	new select() construct with ||| select	count=3
function	return a [function] ||| [function]	count=1
module_class	new :class exists ||| sql exists	count=1
module	for a local ||| dialects	count=1
function	_sa_instrument_role-decorated methods in ||| methods	count=1
arg	clause ||| clause	count=1
module	return true if this ||| sql	count=2
module	for a ||| dialects	count=3
function	flush() ||| flush	count=1
function	conforms to the given ||| conforms	count=1
function	[function_1] similarly to ||| [function_1] [function_2]	count=4
arg	the existence ||| connection sequence_name schema	count=1
function	ms-sql puts ||| precolumns	count=1
function	lowercase ||| normalize	count=1
class	operator ||| operators	count=30
function_arg	logger [arg_2] ||| [arg_2] [function_1]	count=2
class	the current bind ||| inspector	count=2
function	connectable associated with ||| bind	count=2
function	synonym ||| synonym	count=1
module	which this ||| sql	count=1
function	at 1 ||| 1	count=1
function	all :class columnproperty ||| column	count=1
arg	a collection attribute and ||| state dict_ key	count=1
module_class	if this [class_2] ||| [module_1] [class_2]	count=5
function	set the value for ||| set	count=1
function	provide an implementation of ||| do execute	count=1
function	unique constraints ||| unique constraints	count=4
function	return the 'key' ||| key	count=1
module	clause for the purpose ||| sql	count=1
class	receive ||| dialect events	count=5
module	allows ||| declarative	count=1
function_arg	[function_1] level ||| [arg_2] [function_1]	count=2
function	when using the generic [function_1] [function_2] ||| [function_1] [function_2]	count=1
function	comment ||| comment	count=1
function	of a particular sequence ||| sequence	count=1
function	all 'cloned' predecessors ||| cloned	count=1
function	[function_1] with ||| [function_1] [function_2]	count=1
module_class	[module_1] select() ||| [module_1] [class_2]	count=10
function	[function_1] temporary table ||| [function_2] [function_1]	count=2
class	server-side ||| base	count=1
module	:class ~sqlalchemy engine interfaces ||| engine	count=1
function	data ||| attr	count=1
function	rows ||| rows	count=1
arg	visit ||| opts visitors	count=1
function	[function_1] bound ||| [function_1] [function_2]	count=1
arg	[arg_1] an ||| orm set attribute [arg_2] key [arg_1]	count=1
function	against a specific ||| against	count=1
arg	a table ||| tablename table	count=1
function	be ||| attr	count=1
function	that will use ||| with	count=1
class	a pool ||| pool	count=1
class	describe ||| my sqldialect	count=1
function	the ||| memoized	count=1
class	this bakedquery object ||| baked	count=1
class	a :func ||| table clause	count=1
function	the != ||| ne	count=1
function_arg	return [function_1] [arg_2] ||| engine dialect [function_1] [arg_2]	count=1
function	prepare the current ||| prepare	count=1
function	in the insert ||| insert	count=1
function	a :class join object ||| create join	count=1
module	given name ||| engine	count=1
module	two :class fromclause ||| sql	count=1
function	the ||| cloned	count=1
module	from ||| ext	count=1
class	intercept when the ||| connection events	count=2
arg	the given value ||| value	count=1
function	[function_1] statements ||| [function_2] [function_1]	count=6
arg	identity key ||| query key	count=1
function	[function_1] temporary view ||| [function_2] [function_1]	count=2
class	reconfigure ||| scoped session	count=1
function	to the [function_2] ||| [function_2] [function_1]	count=1
module	execute this :class ||| sql	count=1
function	create a [function_2] ||| [function_1] [function_2]	count=6
arg	intercept a ||| conn	count=1
class	:term returning clause for ||| values base	count=1
function	dictionary-based collection ||| mapped collection	count=3
function	representation ||| date	count=1
function	the first ||| first	count=2
class	in the same statement ||| context	count=1
class	session execute ||| session	count=1
function_arg	server [arg_2] ||| [function_1] version info [arg_2]	count=2
class	associated ||| property	count=1
function	== ||| eq	count=2
function_arg	[function_1] b ||| [function_1] in a [arg_2]	count=1
function	metadata for a ||| metadata	count=1
arg	indicate that the ||| loadopt attr sql_only	count=1
function	associated with this :class ||| attr	count=1
arg	[arg_1] is ||| [arg_2] [arg_1]	count=3
function	implement the != ||| ne	count=1
class	fetching server-side expressions ||| base	count=1
function	offset/limit is specifically ||| wo limit	count=1
function	description ||| description	count=1
module_class	close this session ||| orm session	count=1
class	not have ||| instance	count=1
arg	in use for connection ||| connection	count=2
function	column labels to ||| with labels	count=1
module_class	return a 'bind' linked [module_1] [class_2] ||| [module_1] [class_2]	count=1
function	oid for ||| oid	count=1
class	server-side expressions and ||| values base	count=1
function	dialect that will be ||| dialect cls	count=1
function	[function] of ||| select [function]	count=3
function	recover list of uncommitted ||| do recover	count=1
function	of null ||| null from	count=1
function	a data type from ||| type	count=1
class	allowing user-defined data to ||| mapper	count=1
function	rollback a ||| do rollback twophase	count=1
arg	load [arg_2] ||| [arg_2] [arg_1]	count=8
class	for ||| values	count=1
function	transient ||| transient	count=2
function	[function_1] subquery eager ||| [function_1] [function_2]	count=1
arg	all future mapped ||| cls sqltype	count=1
class	a :term ||| base	count=1
function	a descending order ||| desc	count=1
function	string describing ||| str	count=1
module	that should be used ||| ext	count=1
function	a default instancestate if ||| state if	count=1
function_arg	[function_1] operation ||| [function_1] [arg_2]	count=3
module_class	target dialect [class_2] ||| [module_1] [class_2]	count=2
function	a logger for ||| logger	count=1
module	specific to mssql ||| mssql	count=1
class	returning clause ||| values base	count=1
arg	given a url ||| cls url	count=1
function	the full select statement ||| statement	count=1
arg	attributes on an instance ||| instance attribute_names	count=1
module	[module] when ||| [module]	count=1
function	drop all ||| drop all	count=2
function	union statement ||| union	count=1
class	for the mapped object ||| instance state	count=1
class	the purpose of fetching ||| base	count=1
function	collection ||| collection	count=6
function	pairs ||| as pairs	count=1
function	the table comment for ||| table comment	count=1
arg	is ||| instance	count=1
class	cloning traversal ||| replacing cloning visitor	count=2
function_arg	comment [arg_2] ||| [arg_2] [function_1]	count=1
function	is an instance ||| is column	count=1
module	:class columnelement objects ||| sql	count=1
function	and return the ||| and	count=1
function	[function_1] loaders in ||| [function_2] [function_1]	count=2
arg	method ||| method	count=1
function	iterator ||| iterator	count=1
function	mysql to add limit ||| limit	count=1
function	null ||| fetch null from	count=1
class	into baked ||| baked	count=1
function	the general class of ||| affinity	count=1
function	inherits [function] mapped ||| [function] inherited	count=1
module	initialization ||| ext declarative	count=2
arg	for the given cls ||| cls	count=1
arg	criterion ||| criterion	count=2
function	a scalar ||| scalar	count=1
function	and locate binary criterion ||| criterion	count=1
module_class	this columnelement to ||| sql column element	count=1
module	by primary key ||| orm	count=1
function	boolean [function_2] ||| [function_2] [function_1]	count=1
function	use in update ||| collect post update	count=1
class	a type for ||| type	count=2
function	__neg__ ||| neg	count=1
function	an [function] that ||| proxying [function]	count=1
function	_connectionfairy ||| finalize fairy	count=1
function	decimal ||| decimal	count=1
function	plain percent '%' as ||| as percent	count=1
function_arg	[function_1] value to ||| [arg_2] [function_1]	count=8
function	marked as 'deleted' within ||| deleted	count=1
function	[function_1] [function_2] ||| [function_2] schema [function_1]	count=5
function	value of null ||| null	count=1
function	:meth connection ||| connection	count=1
arg	attribute ||| key	count=4
function	to ||| memoized	count=1
arg	sets of ||| states_to_update bulk	count=1
function	key for ||| key	count=2
function	select a numeric ||| from numeric	count=1
function	perform a bulk update ||| bulk update	count=1
function	using the ||| using	count=1
function	lazy loads ||| raiseload	count=1
function	key for use in ||| key	count=1
function	a function ||| function	count=1
function	[function_1] cursors ||| [function_2] [function_1]	count=2
class	compiled result column information ||| result	count=1
function	processing function ||| processor	count=1
arg	:class mapper as the ||| mapper	count=1
module_class	:class variant ||| sql variant	count=1
function	deleted ||| delete	count=1
function	sequence ||| fire sequence	count=1
function_arg	[function_1] tuple producing ||| [function_1] [arg_2]	count=1
function_arg	[function_1] statement ||| [function_1] cursor [arg_2]	count=1
class	that this option may ||| mapper option	count=1
class	create ||| create	count=1
function	for all lazyloaders systemwide ||| lazy loaders	count=1
function_arg	commit all [arg_2] ||| [function_1] [arg_2]	count=1
function	// ||| rtruediv	count=1
function	all ||| with invoke all	count=1
function	expressions as columns ||| col expressions	count=1
function	or ||| or	count=3
function	in delete ||| collect delete	count=2
arg	[arg_1] an instance ||| [arg_2] [arg_1]	count=4
function	which an object ||| object	count=1
function	in union ||| in union	count=4
function	receive a literal parameter ||| literal param	count=1
class	belongs ||| class methods	count=1
function_arg	names for schema ||| names connection schema	count=2
module_class	this insert/update/delete statement ||| sql update base	count=1
function	added to the c ||| refresh for new	count=1
class	receive an instance when ||| instance events	count=1
function	"target dialect implements the ||| implements get lastrowid	count=1
function	the 'invoke [function] eagers' ||| [function]	count=1
function_arg	[function_1] annotations ||| [function_1] element [arg_2]	count=1
function	critical ||| critical	count=1
function	to be associated ||| memoized attr	count=1
class	for the purpose ||| values	count=1
arg	within a particular schema ||| schema order_by	count=1
function	identity ||| identity	count=3
function	the decimal separator character ||| decimal	count=1
arg	roles are ||| roles	count=1
class	type for ||| type	count=2
function	execute a ||| execute	count=7
module	called by subclasses to ||| core	count=1
class	property for use with ||| property	count=1
class	with ||| property	count=1
function	implement the not in ||| notin	count=1
function_arg	enabled for [arg_2] ||| [arg_2] [function_1]	count=2
function	call count ||| call count	count=2
function	for ||| return	count=1
function_arg	[function_1] for schema ||| engine dialect get [function_1] [arg_2]	count=1
arg	for table_name ||| table_name	count=1
function	values with many ||| precision numerics many	count=1
function_arg	the insert [arg_2] ||| [function_1] pk returning compiler [arg_2]	count=2
class	this attribute [class_2] ||| [class_2] [class_1]	count=2
function	percent '%' [function_2] ||| [function_2] [function_1]	count=2
class	if this relationship ||| condition	count=1
class	mediuminteger ||| mediumint	count=1
module	of [module] ||| [module]	count=16
function	[function_1] py ||| [function_1] [function_2]	count=1
function	is ||| is column	count=1
function	default instancestate if none ||| state if none	count=1
module	dialect ||| testing	count=1
function	result [function_2] ||| [function_1] [function_2]	count=1
module	:class ~sqlalchemy engine ||| engine	count=1
class	applied ||| generative	count=1
class	property for use ||| property	count=1
function	dbapi [function] for the ||| [function]	count=1
function	return information about primary ||| get primary	count=1
function	[function_1] slice object ||| [function_2] [function_1]	count=1
function	given [function_2] ||| [function_2] [function_1]	count=4
function	invalidate the ||| invalidate	count=1
arg	given iterator of ||| iterator	count=1
function	returns to ||| checkin	count=1
module	[module] compiledsql ||| [module]	count=1
class	new selectable with ||| generative select	count=2
arg	persistence ||| target flush_context attrs	count=1
class	produce a :func ||| column operators	count=2
function	instance before a ||| before	count=1
function	dictionary-based [function_2] ||| [function_1] [function_2]	count=2
function	a namespace of ||| column attrs	count=1
class	a ||| values base	count=2
function	with the ||| with	count=1
arg	clone the given expression ||| opts	count=1
function	item from [function_2] ||| [function_2] [function_1]	count=1
function_arg	[function_1] a transaction ||| [arg_2] [function_1]	count=1
arg	instance of this class ||| cls index	count=1
function	a deprecation warning ||| deprecated	count=1
class	to ||| mapper property	count=2
function	before a connection ||| do connect	count=1
function	implement the 'endswith' ||| endswith	count=1
class	turn them back into [class_1] [class_2] ||| [class_2] [class_1]	count=1
function	implements ||| implements get	count=1
function	to represent very large ||| precision numerics enotation large	count=1
function	sort a ||| sort	count=2
function	starting at arbitrary ||| n factory	count=1
function_arg	two values [arg_2] ||| [function_1] [arg_2]	count=1
arg	roles are present and ||| cls roles methods	count=1
function	the 'inherits' for this ||| concrete base	count=1
function	user-defined data to be ||| memoized attr	count=1
arg	[arg_1] callable that ||| [arg_2] [arg_1]	count=2
arg	attribute ||| attr	count=1
class	returning ||| base	count=1
function	"loaded as ||| loaded as	count=1
arg	statement ||| context entity	count=1
function_arg	[function_1] collection attribute ||| [arg_2] [function_1]	count=2
function	[function_1] values ||| [function_1] [function_2]	count=1
function	[function_1] processing ||| [function_1] [function_2]	count=2
function	where clause ||| where	count=1
function_arg	[function_1] b with ||| [function_1] [arg_2]	count=1
class	for the purpose ||| base	count=1
function	for bind parameters ||| params	count=1
arg	a cursor ||| cursor	count=3
function_arg	startswith [arg_2] ||| [function_1] [arg_2]	count=3
module	a method ||| orm	count=1
class	use of ||| values base	count=1
function	warnings [function_2] ||| [function_1] [function_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] backend [arg_2]	count=2
function	adapt a :class ||| adapt listener	count=1
function	kwargs for the ||| func kwargs	count=1
function	begin a transaction ||| begin	count=1
function	representation of python datetime ||| date historic	count=1
class	the object allowing user-defined ||| mapper property	count=1
function	ad-hoc ||| set collection attributes	count=2
module	to ||| orm	count=1
function	for ||| check for	count=1
class	not ||| state	count=1
function	emit delete [function_2] ||| [function_2] [function_1]	count=3
function	an implementation of ||| do execute	count=1
arg	return a callable that ||| dialect callable_ state	count=1
function	of temporary [function_2] ||| [function_1] [function_2]	count=18
function	[function_1] clause specific ||| [function_2] [function_1]	count=3
module	keys which ||| orm	count=1
module	kwargs ||| declarative	count=1
arg	given annotations dictionary ||| annotations	count=1
arg	an instance ||| mapper class_ oldinit instance	count=1
function	a query synonym for ||| synonym for	count=1
function	mapped by the ||| mapped	count=1
function_arg	traverse [arg_2] ||| [function_1] [arg_2]	count=4
arg	the given :class mapper ||| mapper	count=1
function	[function] wrapper/hook for ||| [function]	count=2
function	expression delivering ||| visit binary product	count=1
function	reconstitute ||| reconstitute	count=1
function	and return the new ||| and	count=1
function	implement the is not ||| isnot	count=2
function	a dictionary of connection ||| connect	count=1
function	server used by a ||| server	count=2
function	data to be ||| attr	count=1
function	dialect-specific literal processor ||| cached literal processor	count=3
module	the collection including this ||| orm	count=1
function_arg	create a [arg_2] ||| [function_1] session [arg_2]	count=1
arg	a value on ||| value initiator	count=1
module	a [module] compiledsql is ||| [module]	count=1
function	expression structure ||| traverse	count=2
module	the inter-mapper relationships of ||| orm	count=1
function	kwargs ||| func kwargs	count=1
module	before column [module] ||| dialects [module]	count=1
class	which do not ||| state	count=1
function_arg	bulk delete [arg_2] ||| [arg_2] [function_1]	count=1
function	the "persistent to transient" ||| persistent to transient	count=1
class	the given ||| dialect	count=1
class	this logger ||| logger	count=1
class	rows ||| result	count=2
class	return the ||| instance	count=1
class	identifier ||| identifier	count=2
function_arg	a delete [arg_2] ||| [arg_2] [function_1]	count=1
function	foreignkey objects ||| foreign keys	count=1
function	should be used given ||| classname for	count=1
class	index ||| index	count=1
function	the offset ||| offset	count=1
function	prepare a ||| do prepare twophase	count=1
class	the purpose of ||| values	count=1
function	expression structure [function_2] ||| [function_2] [function_1]	count=3
class	a conjunction of expressions ||| boolean	count=1
class	relationship ||| relationship	count=2
class	the :class pool ||| pool	count=1
function	[function_1] a delete ||| [function_1] [function_2]	count=3
class	the pool ||| pool	count=4
arg	visit the given ||| visitors	count=2
function	particular entity only ||| load only	count=1
module	called exactly once for ||| core	count=1
arg	:class mapper ||| mapper	count=1
module	listen ||| event	count=1
module	two phase commit ||| orm	count=1
function	return it to ||| return	count=1
function	[function_1] windows failures ||| [function_2] [function_1]	count=5
arg	mapping dictionaries ||| mapper mappings return_defaults	count=1
module_class	[module_1] when a ||| [module_1] [class_2]	count=2
class	of the [class] ||| [class]	count=3
function_arg	[function_1] pickletype ||| [arg_2] [function_1]	count=1
class	result corresponding to the ||| query	count=1
arg	the persistence ||| flush_context	count=1
arg	for table_name ||| table_name schema	count=1
class	purpose ||| base	count=1
class	this [class] against one ||| [class]	count=2
class	string ||| key	count=1
arg	the given instance ||| instance attribute_names	count=1
function	information about indexes ||| indexes	count=1
function	default schema ||| default schema	count=1
function	null ||| null from	count=1
arg	persistence of the ||| target flush_context	count=1
function	return a scalar ||| value	count=1
function	initialize the inter-mapper ||| compile	count=1
arg	directly ||| entities session	count=1
arg	call to query ||| query	count=1
function	version of ||| version info	count=2
function	states ||| states	count=1
arg	backend ||| table_name	count=1
function	and [function] same ||| threading with [function]	count=1
arg	given :class ||| name element	count=1
arg	structure allowing ||| opts	count=1
module_class	receive an [class_2] ||| [module_1] [class_2] load target context	count=3
function	[function_1] the table ||| [function_2] [function_1]	count=1
class	a config as one ||| config	count=1
class	phase ||| session	count=1
arg	clone the given ||| obj	count=1
function	to be ||| attr	count=1
function	[function_1] slice object ||| [function_1] [function_2]	count=1
module_class	to this select() ||| sql select	count=1
arg	statement ||| statement parameters context	count=1
module	indicate that this ||| orm	count=1
class	integer ||| integer	count=1
module	clause for ||| sql	count=1
function	apply a where clause ||| where	count=1
module	have been specified ||| orm	count=1
class	[class_1] objects ||| [class_2] [class_1]	count=1
function	the table comment ||| table comment	count=2
function	instance after [function_2] ||| [function_1] [function_2]	count=1
function_arg	criteria function ||| criteria fn	count=2
arg	compiled regex ||| regex	count=1
function	if a cte ||| cte state	count=1
class	when the span ||| session events	count=1
function_arg	keys in table_name ||| keys table_name schema	count=2
function_arg	slice object [arg_2] ||| [arg_2] [function_1]	count=1
function	have been refreshed ||| refresh	count=1
arg	consistent format with ||| keys outerjoin full create_aliases	count=1
function	* ||| rmul	count=1
arg	for a given querycontext ||| context path loadopt mapper	count=1
class	implements ||| suite requirements	count=1
function	either present directly on ||| immediate cls attr	count=1
function	of ||| column	count=1
function	[function_1] table ||| [function_2] [function_1]	count=21
module	object ||| orm	count=1
arg	mapped descriptor ||| attribute	count=2
function	iterate through ||| cascade iterator	count=1
arg	the given alias ||| alias	count=1
class	server-side expressions and ||| base	count=1
function	server-side ||| return	count=1
function	from the [function_2] ||| [function_2] [function_1]	count=1
arg	identify [arg] ||| base_mapper uowtransaction table [arg]	count=3
function	plain percent [function_2] ||| [function_2] [function_1]	count=2
class	by this ||| row proxy	count=1
function	append [function_2] ||| [function_1] [function_2]	count=8
arg	_decl_class_registry associated with ||| classname cls	count=1
function	list of temporary ||| temp	count=4
function	bulk delete ||| bulk delete	count=2
module_class	if this metadata ||| sql meta data	count=1
module	structure ||| sql	count=1
class	a pool ||| pool events	count=1
class	select statement ||| select	count=1
function	processing functions for ||| processor	count=1
module	given name to ||| engine	count=1
function	the given expression ||| traverse	count=1
function_arg	construct a [arg_2] ||| [arg_2] [function_1]	count=5
function	the given order ||| order	count=1
function	particular sequence ||| sequence	count=1
function	the given column ||| column	count=1
function	of mysql [function_2] ||| [function_1] [function_2]	count=2
class	in the same ||| context	count=1
class	object instance after ||| instance	count=1
function	remove pending actions for ||| remove state actions	count=1
function	[function_1] all of ||| [function_2] [function_1]	count=1
function	use [function] ||| mod operator as [function]	count=2
class	that this option may ||| option	count=1
class	:func ||| table clause	count=2
class	events ||| connection events	count=5
function	of an update ||| update from	count=1
function	for foreign key ||| foreign key	count=2
arg	that instance ||| instance	count=2
function	offset using ||| offset	count=1
module	table objects for ||| ext	count=1
function	no from clause ||| from	count=1
function	dictionary-based ||| mapped	count=2
module	clause for the ||| sql	count=1
class	[class_1] in ||| [class_2] [class_1]	count=10
function	methods in [function_2] ||| [function_2] [function_1]	count=1
function	supports reflection of ||| constraint reflection	count=1
function	reflected column using affinity ||| affinity	count=1
function_arg	a listener [arg_2] ||| [arg_2] [function_1]	count=4
arg	a cursor to ||| cursor statement parameters context	count=2
arg	schema table_name ||| connection table_name schema	count=4
function	table_name ||| foreign keys	count=1
function_arg	apply listeners [arg_2] ||| [arg_2] [function_1]	count=1
class	a list of string ||| foreign key	count=1
function	"persistent to [function_2] ||| [function_2] [function_1]	count=1
function	establish row processing ||| row processor	count=1
function	elements such as would ||| elements	count=1
function	rollback() ||| rollback	count=1
function_arg	rollback [arg_2] ||| [arg_2] [function_1]	count=2
module	have been specified in ||| orm	count=1
function	mapped [function] otherwise return ||| has inherited [function]	count=1
function	of elements ||| copy	count=1
function	boolean [function] set ||| bool [function]	count=1
arg	load table description ||| connection table include_columns exclude_columns	count=1
function	and [function] ||| threading with [function]	count=2
function_arg	object [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] instrumented ||| [function_2] [function_1]	count=1
function	to attributes ||| attribute	count=1
module	produce a [module] connection that ||| [module]	count=1
class	return value of query ||| query	count=1
function	arguments ||| args	count=1
function	is either present directly ||| immediate cls	count=1
function	producing ||| expression	count=2
function_arg	unique constraints [arg_2] ||| [arg_2] [function_1]	count=2
function	reflection of [function_2] ||| [function_2] [function_1]	count=2
module	namespace of all :class ||| orm	count=2
function_arg	parameter [arg_2] ||| [arg_2] [function_1]	count=6
function	python descriptor that ||| descriptor	count=1
function_arg	a criteria function ||| criteria fn	count=2
module	for ||| sql	count=1
module	one or more named ||| orm	count=1
function	simple constructor that ||| constructor	count=1
function_arg	[function_1] state ||| [arg_2] [function_1]	count=1
function_arg	[function_1] session ||| [arg_2] [function_1]	count=1
class	do not have a ||| instance state	count=1
function	commit() ||| commit	count=1
function	structure allowing ||| cloned	count=1
function	a compiler appropriate for ||| compiler	count=1
class	specified in ||| query	count=1
function	bulk insert ||| bulk insert mappings	count=2
function	connection arguments ||| connect args	count=2
function	[function_1] loaders ||| [function_1] [function_2]	count=2
function	level ||| level	count=2
function	a table of the ||| table	count=1
function	attributes have been refreshed ||| refresh	count=1
function	query synonym [function_2] ||| [function_2] [function_1]	count=3
module_class	[module_1] sequence ||| [module_1] [class_2] init name start increment	count=1
function	targeting within [function] ||| compare name for [function]	count=1
function	or one of a ||| or str	count=1
function	[function_1] elements ||| surface [function_1] [function_2]	count=1
arg	structure allowing modifications by ||| obj opts	count=1
function	not in ||| notin	count=1
arg	value on the ||| state dict_ value	count=2
function	populate/expire ||| setup event handlers	count=1
function	of foreign ||| foreign	count=1
function	decimal separator character is ||| decimal	count=1
class	textclause object into ||| text	count=1
class	be associated with ||| mapper property	count=1
function	for [function_2] ||| [function_2] [function_1]	count=4
function_arg	oid for [arg_2] ||| [function_1] connection table_name [arg_2]	count=1
function	temporary view [function_2] ||| [function_2] [function_1]	count=7
class	namespace of all :class ||| mapper	count=2
class	of keys which do ||| instance	count=1
function	filter the given ||| filter states	count=1
function	identity of ||| identity	count=1
class	make use of ||| values	count=1
module	do not ||| orm	count=1
function	wrap a function with ||| with warning	count=1
function	associate this [function_2] ||| [function_1] [function_2]	count=1
function	return an item from ||| get	count=1
class	receive connection arguments before ||| events	count=1
function	the * ||| mul	count=1
arg	an [arg_2] ||| [arg_1] [arg_2]	count=1
function	postsortrecs ||| actions	count=1
function	of updated ||| updated	count=1
arg	value on the given ||| value initiator	count=1
function_arg	nothing [arg_2] ||| [arg_2] [function_1]	count=2
function	parent ||| parent	count=1
class	initialize execution [class_2] ||| [class_1] [class_2]	count=3
class	config as ||| config	count=1
function	of factories ||| factories	count=1
arg	a cursor ||| cursor statement parameters context	count=2
function	logger for ||| logger	count=1
module	for a local ||| dialects oracle	count=1
module	expressions and ||| sql	count=1
class	by ||| proxy	count=1
class	data ||| data	count=1
function	recover list of uncommitted ||| recover twophase	count=1
arg	[arg_1] callable ||| [arg_1] [arg_2]	count=2
module_class	of [module_1] [class_2] against the given selectable ||| [module_1] [class_2] intersect	count=1
function	a dialect-specific ||| cached	count=2
function_arg	[function_1] transition for ||| [arg_2] [function_1]	count=5
function	[function_1] warning on ||| [function_2] [function_1]	count=3
arg	of this attribute ||| cls attribute	count=1
function	return a lateral ||| lateral	count=1
class	return a ||| mapper	count=2
arg	produce an alias ||| alias name	count=1
function	a union of ||| union	count=1
function_arg	[function_1] given instance ||| [arg_2] [function_1]	count=3
function	columns for those ||| columns	count=1
function	a nested ||| nested	count=2
function	full select statement ||| statement	count=1
function_arg	[function_1] alias ||| [arg_2] [function_1]	count=3
function_arg	[function_1] a dbapi ||| [arg_2] [function_1]	count=3
function	the > ||| gt	count=1
function	given group ||| group	count=1
arg	of newly persisted database ||| table	count=1
module_class	[module_1] :class ||| [module_1] [class_2]	count=6
function	[function_1] not ||| [function_2] [function_1] a	count=1
module_class	the [module_1] [class_2] ||| [module_1] [class_2]	count=2
arg	an expression and locate ||| expression consider_as_foreign_keys consider_as_referenced_keys	count=1
function	[function_1] large values ||| [function_2] [function_1]	count=3
arg	attribute ||| attribute	count=1
class	by this rowproxy ||| row proxy	count=1
function	for the ||| return	count=1
function	implement the not like ||| notlike	count=1
function	a bulk ||| bulk	count=5
function	this :class ||| memoized attr	count=1
function	tables [function_2] ||| [function_1] [function_2]	count=1
function	view names on the ||| view names	count=1
arg	descriptor ||| attribute	count=2
arg	the given ||| dialect	count=1
module_class	[module_1] insert/update/delete statement ||| [module_1] [class_2]	count=8
arg	function ||| fn	count=4
arg	_decl_class_registry associated with the ||| classname cls	count=1
function	to lowercase if ||| normalize	count=1
function	user-defined data ||| memoized	count=1
function	[function_1] iterator ||| [function_2] [function_1]	count=4
arg	generate ||| dml whereclause values inline	count=1
class	text ||| text	count=1
function	nullslast clause against ||| nullslast	count=1
class	use of ||| base	count=1
function	engine ||| engine	count=2
class	operator in reverse ||| column operators	count=10
arg	allowing ||| obj	count=1
function	the remote ||| constraint remote	count=2
arg	given expression structure ||| opts	count=1
function	save ||| save	count=1
function	arbitrary ||| from n factory	count=1
arg	the _decl_class_registry associated with ||| classname	count=1
module	as ||| util	count=1
class	current transaction in progress ||| session	count=2
function	allowing user-defined data ||| memoized attr	count=1
module	engine ||| engine	count=1
function_arg	kwargs [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] save ||| [function_2] [function_1]	count=3
module	table for a ||| dialects	count=1
function	with this :class ||| attr	count=1
function	values for bind parameters ||| params	count=1
function	[function_1] [function_2] the ||| [function_1] [function_2]	count=6
arg	time a dbapi ||| dbapi_connection	count=1
module	query object's criterion and ||| orm	count=1
function	given expression ||| cloned traverse	count=1
function	use of ||| return	count=1
function_arg	[function_1] a connection ||| [function_1] to savepoint [arg_2]	count=1
function	a value of null ||| null	count=1
class	object ||| mapper	count=1
function	dialect-specific [function_2] ||| [function_2] [function_1]	count=4
class	if this ||| join condition	count=1
function	was ||| was	count=1
function_arg	[function_1] action ||| [function_1] [arg_2]	count=4
function	puts top it's version ||| select precolumns	count=1
function	identity map check ||| get from identity	count=1
arg	given clauseelement annotating each ||| exclude	count=1
function	given list of elements ||| copy	count=1
function	elements and return ||| copy and	count=1
function	retrieve the server ||| server	count=1
function	that allows initialization ||| declarative	count=1
arg	the given iterator of ||| iterator obj	count=1
arg	schema ||| schema	count=8
function	[function_1] processing functions ||| [function_2] [function_1]	count=2
function	called on subclasses to ||| populate column	count=1
arg	schema ||| connection table_name schema	count=1
class	:func ~ ||| column operators	count=2
function	the & ||| and	count=1
arg	a given schema ||| schema	count=1
module	turn this ||| sql	count=1
module	may have been specified ||| orm	count=1
function_arg	assert [function_1] [arg_2] ||| [function_1] [arg_2]	count=3
arg	expression ||| obj	count=1
class	use of a :term ||| base	count=1
function	the object allowing ||| memoized	count=1
arg	when ||| dbapi_connection connection_record connection_proxy	count=1
function	dialect implements the executioncontext ||| implements get lastrowid	count=1
function	[function_1] drop ||| [function_2] [function_1]	count=1
arg	statement + params on ||| statement parameters context	count=1
arg	synchronize a two-way relationship ||| attribute key uselist	count=1
class	should only be used ||| generative	count=2
class	object instance ||| instance	count=2
arg	a session ||| session	count=2
function	a literal parameter ||| literal param	count=2
function	lazy loaders to add ||| add lazyload	count=1
function	any of the classes [function_1] [function_2] otherwise return false ||| [function_1] [function_2]	count=2
function	dbapi connection from ||| connect	count=1
function	associated with this ||| attr	count=1
class	with compiled result column ||| result	count=1
arg	table description from the ||| connection table	count=1
module	user-defined ||| orm	count=1
module	called by ||| core	count=1
function	'use_labels' flag set ||| apply labels	count=1
function	decode ||| decode	count=1
function	boolean ||| boolean	count=1
function	prepare a two ||| do prepare twophase	count=1
arg	the given backend ||| table_name	count=1
arg	element ||| element values	count=1
function	[function_1] metadata for ||| [function_1] [function_2]	count=1
function_arg	[function_1] item into ||| [arg_2] [function_1]	count=1
module_class	this ddlelement conditionally ||| sql ddlelement	count=1
function	number with four ||| floats to four	count=1
function	inspect getargspec with ||| getargspec	count=1
function_arg	[function_1] function to ||| [function_1] [arg_2]	count=6
arg	by keyfunc ||| keyfunc	count=1
class	[class] of ||| [class]	count=1
arg	a callable that ||| dialect callable_	count=1
function	values with many ||| many	count=1
class	a composite ||| composite	count=1
function	a create statement ||| create	count=2
function	[function_1] arguments ||| [function_2] [function_1]	count=4
class	column names and data ||| result meta data	count=1
function	an ||| properties	count=1
module	associated ||| orm	count=1
function_arg	initialize a [arg_2] ||| [function_1] collection state dict_ [arg_2]	count=1
class	when ||| connection events	count=1
function	represent very [function_2] ||| [function_2] [function_1]	count=4
function	establish row ||| create row	count=1
class	all rows ||| result	count=1
class	a ||| operators	count=2
function	default [function_2] ||| [function_2] [function_1]	count=7
class	attribute ||| attribute	count=3
function	about primary ||| primary	count=1
function	force the given ||| force drop	count=1
function	'remote' in primaryjoin secondaryjoin ||| remote	count=1
module_class	[module_1] session ||| [module_1] [class_2]	count=20
function	the target :class column ||| column	count=1
function	function call [function_2] ||| [function_1] [function_2]	count=1
module_class	of [module_1] [class_2] given selectable ||| [module_1] [class_2] intersect	count=1
function_arg	[function_1] count rows ||| [arg_2] [function_1]	count=1
function	[function_1] a jdbc ||| [function_1] [function_2]	count=1
function_arg	assert a [function_1] [arg_2] ||| [function_1] [arg_2]	count=12
function_arg	update statement [arg_2] ||| [function_1] mapper [arg_2]	count=1
function	in not ||| not in	count=1
arg	the [arg_1] [arg_2] ||| [arg_2] [arg_1]	count=8
function	it is an all-lowercase ||| denormalize	count=1
function	with no history events ||| committed value	count=1
function	"info' [function] ||| record [function]	count=2
class	a :func ||| operators	count=2
function	[function] integer ||| [function] int	count=2
function	the update from clause ||| update from clause	count=1
module_class	called [class_2] ||| [module_1] [class_2]	count=4
arg	database state after ||| table state	count=2
module	a ||| ext declarative	count=2
function	the server ||| get server	count=1
arg	is made ||| conn_rec cargs cparams	count=1
function_arg	converts [arg_2] ||| [arg_2] [function_1]	count=3
function	after [function_2] ||| [function_2] [function_1]	count=2
function	an update ||| update expression	count=2
function	to ||| to	count=5
function	object for the given ||| init	count=1
function_arg	[function_1] [arg_2] ||| [function_1] annotate [arg_2]	count=2
arg	and visit ||| obj opts visitors	count=1
function	default schema [function_2] ||| [function_2] [function_1]	count=4
arg	b [arg_2] ||| [arg_2] [arg_1]	count=3
function	1 ||| from 1	count=2
function	function with ||| with	count=1
module_class	this [class_2] ||| [module_1] [class_2] intersect	count=3
function	by criterion to ||| by	count=1
function	simple constructor that allows ||| constructor	count=1
class	close the result set ||| result proxy	count=1
function	insert statements corresponding ||| insert statements	count=2
module	structure allowing modifications by ||| sql	count=1
function	a :class join object ||| join	count=1
function	"target dialect implements the ||| implements get	count=1
module	this one ||| sql	count=1
function_arg	[function_1] within ||| [function_1] [arg_2]	count=1
class	keys which ||| instance state	count=1
function	execute a ||| cursor execute	count=1
function	keys representing ||| keys	count=1
class	a ||| state	count=1
class	must raise a ||| suite requirements	count=1
module	an ||| dialects	count=1
function	zero results ||| none	count=1
class	an [class_2] ||| [class_1] [class_2]	count=1
function	has changes ||| has changes	count=2
class	in filter() ||| query	count=1
function	result object for ||| for	count=1
function	call [function_2] ||| [function_1] [function_2]	count=1
arg	:class ~ ||| bind	count=2
class	if this relationship ||| join condition	count=1
arg	value on ||| dict_ value	count=2
class	of a :term returning ||| base	count=1
class	option may ||| mapper option	count=1
arg	[arg] select ||| [arg]	count=2
class	of keys which ||| instance state	count=1
class	target database must ||| suite requirements	count=1
function	cursor [function] events ||| before cursor [function]	count=1
function	tables have some set ||| overlap	count=1
function	number with four ||| to four	count=1
function	to an engine ||| bind to	count=1
function	the "pending to ||| pending to	count=2
function	iterate through instances ||| cascade iterator	count=1
arg	[arg] position ||| [arg]	count=2
function	[function_1] order ||| [function_1] [function_2]	count=1
function	[function_1] a select ||| [function_1] [function_2]	count=2
function_arg	relates [arg_2] ||| [function_1] [arg_2]	count=2
class	clause ||| values	count=1
function	update ||| collect post update	count=1
arg	given instance ||| instance attribute_names lockmode	count=1
function	select ||| select	count=3
function	be finalized at ||| global cleanup assertions	count=1
arg	results of sql ||| results	count=1
class	metadata ||| meta data	count=7
function	associate this [function_2] ||| [function_2] [function_1]	count=1
function	for ||| for	count=7
class	when the ||| connection events	count=1
class	if parent/child ||| join condition	count=1
arg	sql-expression ||| expr	count=2
function	a schema [function] wrapper/hook for ||| [function]	count=1
class	of fetching ||| values	count=1
class	[class_1] [class_2] of a compiled statement ||| engine [class_2] [class_1]	count=1
function	rollback has occurred including ||| rollback	count=1
function_arg	[function_1] schema table_name ||| [function_1] [arg_2]	count=2
function	limit/offset is ||| w	count=1
function	decode a slice object ||| decode slice	count=1
module	[module] the ||| [module]	count=2
arg	function for the given ||| identifier fn	count=1
class	result [class_2] ||| [class_2] [class_1] unbake subquery	count=1
function	was invalidated ||| invalidated	count=1
function_arg	[function_1] an ||| [arg_2] [function_1]	count=1
function	default instancestate if ||| state if	count=1
class	extract column names and ||| result meta	count=1
function	creating it ||| call	count=1
function_arg	with a [arg_2] ||| [function_1] [arg_2]	count=1
class	returning clause for the ||| values	count=1
function	[function_1] [function_2] details ||| [function_1] [function_2]	count=1
function	that allows ||| declarative	count=1
class	executioncontext ||| execution	count=1
function	sort the ||| sort	count=1
class	for userland code that ||| property	count=1
module	allowing user-defined data ||| orm	count=1
class	column [class_2] ||| [class_1] [class_2] compare name for	count=1
class	primary column ||| column	count=1
arg	finalize [arg] ||| base_mapper uowtransaction [arg]	count=1
arg	table and ||| connection table	count=1
class	:term returning clause for ||| values	count=1
arg	annotations dictionary ||| annotations	count=1
function	[function_1] result processor ||| [function_1] [function_2]	count=3
arg	name of a table ||| table	count=1
arg	held by this ||| e soft	count=1
arg	table ||| connection table	count=3
function	integers starting at 1 ||| count from 1	count=1
function	postsortrecs as ||| actions	count=1
function_arg	sequence [arg_2] ||| [arg_2] [function_1]	count=1
class	condition suitable for the ||| condition	count=1
function	a do ||| do	count=2
function	'validator' for one ||| validates	count=1
function	[function_1] collection ||| [function_2] [function_1]	count=4
class	a tinytext ||| tinytext	count=1
arg	including calling after_insert/after_update ||| base_mapper uowtransaction	count=1
function	a numeric value ||| numeric	count=1
function	to use in delete ||| collect delete	count=1
function_arg	listeners [arg_2] ||| [function_1] [arg_2]	count=1
function	server side [function_2] ||| [function_1] [function_2]	count=1
arg	of an ||| instance	count=4
function	test as emitting a ||| emits	count=1
function	variety of mysql ||| mysql	count=1
function	that will execute ||| execute	count=1
class	be associated with ||| mapper	count=1
class	data to be associated ||| property	count=1
function	descending ||| create desc	count=2
class	result ||| query	count=2
function	all [function_2] ||| [function_2] [function_1]	count=2
class	the clauseelement ||| clause element	count=2
class	[class_1] object ||| [class_2] [class_1]	count=6
function	update statement ||| update	count=1
function	warning on ||| warning on	count=2
function	a string describing ||| str	count=1
function	list of temporary view ||| temp view	count=2
function	return information ||| get	count=7
function	"persistent ||| persistent	count=1
function	is attached to ||| attach	count=1
module	~sqlalchemy ||| engine	count=1
class	progress for ||| session	count=1
function	commit ||| do commit twophase	count=1
class	clause for the ||| values base	count=1
function	the sqlalchemy database dialect ||| dialect	count=1
class	make use of a ||| base	count=1
function	[function_1] views ||| [function_2] [function_1]	count=1
function	'remote' in ||| remote with	count=1
function	a two-phase transaction id ||| xid	count=2
function	data to be ||| memoized attr	count=1
function	partial [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] and ||| [function_2] [function_1]	count=3
function	cascade ||| cascade	count=1
class	a real ||| real	count=1
class	with this :class ||| mapper	count=1
class	receive an ||| extension	count=4
function	[function_1] loaders ||| [function_2] [function_1]	count=2
arg	method args and/or ||| method	count=1
function	wrap a function with ||| with	count=1
function	the first time ||| first	count=1
function	add [function_2] ||| [function_2] [function_1]	count=3
function	server ||| server	count=4
function	is attached to a ||| attach	count=1
function	accepts [function] ||| date coerces from [function]	count=2
function	[function_1] integrityerror when ||| [function_2] [function_1]	count=1
class	which may ||| query	count=1
class	do ||| instance state	count=1
function	supports reflection [function_2] ||| [function_2] [function_1]	count=2
function	been refreshed within the ||| refresh flush	count=1
function	expression for this ||| expression	count=1
function	true if the ||| has	count=2
module	a [module_2] ||| [module_1] [module_2]	count=4
module	which may have been ||| orm	count=1
function	starting at arbitrary ||| from n factory	count=1
module	given declarative ||| ext declarative	count=1
function	a function with ||| with warning	count=1
class	returns the ||| executable	count=1
function	before execution receiving ||| before	count=1
function_arg	type as a mutation [function_1] [arg_2] ||| ext mutable base [function_1] on attribute [arg_2] parent_cls	count=1
function	execute ||| cursor execute	count=1
function	query synonym for ||| synonym for	count=2
function	to have executemany() ||| do executemany	count=2
class	fetching server-side expressions ||| values	count=1
function	the named savepoint ||| savepoint	count=1
module	a :term returning ||| sql	count=1
function	limit/offset ||| w limit offset	count=1
arg	table and return processed ||| table	count=1
module_class	[module_1] variant ||| [module_1] [class_2]	count=6
function	roles ||| roles and	count=1
function	is instrumented by the ||| is instrumented	count=1
module	structure allowing ||| sql	count=1
arg	produce an alias of ||| alias name flat	count=1
function	execute ||| execute if	count=1
arg	intercept a ||| conn cursor statement	count=1
class	returning ||| values base	count=2
function	given class ||| class	count=1
function	method resolution order assign ||| locate	count=1
class	test environment must ||| suite requirements	count=1
arg	given connection ||| connection	count=1
function	and ||| return	count=1
function_arg	[function_1] value on ||| [function_1] state dict_ [arg_2]	count=1
function	escape ||| escape	count=1
function	return a list of ||| get enums	count=1
class	when a ||| events	count=1
function	represent very ||| precision numerics enotation	count=2
function_arg	[function_1] all future ||| [function_1] [arg_2]	count=3
function	py ||| py	count=1
class	and ||| values base	count=2
class	64 [class] variable ||| cymysql [class]	count=1
class	the [class] attribute ||| [class]	count=1
function	object allowing user-defined data ||| attr	count=1
function	for insert or update ||| for save	count=1
class	of ||| instance	count=1
arg	the generation ||| from_table extra_froms from_hints	count=1
function	[function_1] jdbc ||| [function_1] [function_2]	count=1
class	of ||| base	count=2
function	generate ||| generate	count=1
class	data to be associated ||| mapper property	count=1
class	:class ||| property	count=1
class	add [class] ||| [class]	count=1
arg	a collection attribute ||| key	count=2
function	be associated ||| memoized attr	count=1
class	set of ||| instance	count=1
class	:class ||| engine	count=1
class	have a ||| instance state	count=1
module	the given declarative ||| ext declarative	count=1
class	have been specified ||| query	count=1
class	the [class] firing no ||| [class]	count=1
function	collection of updated ||| updated	count=1
function	after ||| after	count=6
module_class	fetch the [module_1] [class_2] unconditionally ||| [module_1] [class_2]	count=3
arg	with ||| metadata schema referred_schema_fn	count=1
arg	_decl_class_registry associated with the ||| classname	count=1
function_arg	not [arg_2] ||| [arg_2] [function_1]	count=5
class	column names and ||| meta	count=1
function	% ||| rmod	count=1
function	representation of ||| date	count=1
function_arg	[function_1] two-way ||| [function_1] [arg_2]	count=1
function	ddl phrases [function_2] ||| [function_2] key [function_1]	count=1
class	a biginteger ||| bigint	count=1
function	associated with ||| attr	count=1
function	any rollback ||| rollback	count=1
function_arg	collection [arg_2] ||| [arg_2] [function_1]	count=2
module_class	called when ||| core pool events	count=1
function	temporary [function_2] ||| [function_2] [function_1]	count=20
function	commit a ||| commit twophase	count=1
function_arg	[function_1] for schema ||| engine dialect [function_1] [arg_2]	count=1
class	columnproperty ||| mapper	count=1
function_arg	structure using [arg_2] ||| [function_1] [arg_2]	count=2
function	annotate 'remote' in primaryjoin ||| annotate remote	count=1
function	return the value ||| value	count=2
function	server side ||| server side	count=2
arg	[arg_1] state after ||| [arg_2] [arg_1]	count=4
function	check the foreign key ||| check foreign cols	count=1
function	do an extended lookup ||| locate extended	count=1
arg	required state for ||| follower_ident	count=1
function	o) for o ||| id	count=1
function	a ||| return	count=1
function	[function_1] alias ||| [function_1] [function_2]	count=1
function	the set of constraints ||| constraints	count=1
function	temporary view names on ||| temp view names	count=1
arg	event ||| state value initiator	count=1
function	compare ||| compare	count=5
arg	[arg] counting any ||| [arg]	count=3
arg	modifications by ||| opts	count=1
function	[function_1] small values ||| [function_2] [function_1]	count=3
function	a connection is ||| connect	count=1
class	object allowing user-defined ||| mapper property	count=1
function	eager [function] stored ||| unbake subquery [function]	count=1
function	wrap ||| wrap	count=1
function	random two-phase transaction id ||| xid	count=1
function	from the sequence ||| fire sequence	count=1
function	as [function_2] ||| [function_1] [function_2]	count=1
function	issues a deprecation warning ||| deprecated	count=1
function_arg	traverse and ||| traverse obj opts	count=1
function	merge a ||| merge	count=1
function_arg	kwargs for [arg_2] ||| [arg_2] [function_1]	count=1
arg	this ||| checkfirst	count=2
function	ad-hoc instrumentation from decorators ||| collection attributes	count=1
function	server-side expressions and ||| return	count=1
function	target columns for those ||| columns	count=1
arg	cursor to ||| cursor statement parameters	count=2
function	insert of the ||| insert mappings	count=1
function	null ||| null	count=1
function	the newly resulting ||| prefix with	count=1
function	[function_1] deleted within ||| [function_1] [function_2]	count=1
function	columns clause of the ||| columns	count=1
function_arg	[function_1] a connection ||| [function_1] version info [arg_2]	count=2
function	add limit to ||| limit	count=1
function	[function_1] name presented ||| [function_1] [function_2]	count=3
function	apply ad-hoc ||| collection attributes	count=1
class	the given identifier ||| identifier	count=2
function	dialect-specific result processor ||| cached result processor	count=3
class	server-side ||| values	count=1
arg	the "lazy load" ||| effective_path	count=1
class	a :term returning ||| values base	count=1
arg	[arg_1] [arg_2] ||| [arg_1] [arg_2]	count=70
function_arg	[function_1] given querycontext ||| [function_1] [arg_2]	count=3
class	set ||| state	count=1
function	conflict ||| conflict	count=2
function	rollback the current transaction ||| rollback	count=1
module	[module_1] that is ||| [module_2] [module_1]	count=4
function	allow ad-hoc engine/connection creation ||| ad hoc engines	count=1
class	object allowing user-defined data ||| property	count=1
class	return the instance ||| instance	count=1
class	in ||| column	count=5
function	types [function_2] ||| [function_1] [function_2]	count=2
arg	dbapi ||| dbapi_connection	count=1
function	for the first time ||| first	count=1
module_class	[module_1] schemaevent's ||| [module_1] [class_2]	count=6
module	produce a :func ||| sql	count=2
class	cloning [class_2] ||| [class_2] [class_1]	count=1
function	[function_1] kwargs ||| [function_1] [function_2]	count=2
module	this construct ||| sql	count=2
function	either present directly on ||| immediate	count=1
function	[function_1] about primary ||| [function_2] [function_1]	count=1
function_arg	schema [arg_2] ||| [function_1] [arg_2]	count=1
arg	[arg_1] an ||| [arg_2] [arg_1]	count=2
function	[function_1] will provide ||| [function_1] [function_2]	count=1
class	order by ||| unary	count=1
arg	key ||| query key	count=2
arg	regex and ||| regex cleanup	count=1
class	list of string ||| key constraint	count=1
function_arg	new [arg_2] ||| [function_1] [arg_2]	count=3
function_arg	none is present ||| none instance	count=1
arg	in iterable ||| iterable	count=1
arg	an instance ||| instance	count=7
function	structure allowing modifications by ||| cloned	count=1
module	in filter() ||| orm	count=1
function	ad-hoc instrumentation from ||| attributes	count=1
function_arg	[function_1] start ||| [arg_2] [function_1]	count=4
function	check the [function_2] ||| [function_1] [function_2]	count=5
function	[function_1] create ||| [function_2] [function_1]	count=1
function	four ||| four	count=1
function_arg	[function_1] given cls ||| [function_1] [arg_2]	count=1
module	called ||| core	count=18
function	perform a bulk update ||| bulk update mappings	count=1
function	from a [function_2] ||| [function_1] [function_2]	count=1
arg	visit ||| visitors	count=2
function	reconstruct the statement and ||| statement	count=1
class	:func ~ ||| column	count=2
function	'bulk replace' event ||| bulk replace	count=1
function	return a dialect-specific literal ||| cached literal	count=1
arg	within a particular ||| order_by	count=1
class	empty collection ||| collection	count=1
function	describe ||| describe table	count=2
function_arg	put an item ||| put nowait item	count=1
arg	the given ||| obj opts	count=1
function	clause for the purpose ||| return	count=1
function	[function_1] similarly ||| [function_1] [function_2]	count=4
function	allows initialization from kwargs ||| declarative	count=1
module	a :term returning clause ||| sql	count=1
function	function call [function_2] ||| [function_2] [function_1]	count=1
class	execution context ||| execution context	count=1
class	from the queue ||| queue	count=1
function	without blocking ||| nowait	count=1
arg	a cursor ||| context cursor_description	count=1
function	partial ||| partial	count=1
function	the object allowing ||| memoized attr	count=1
function	representation of python ||| historic	count=1
arg	annotations ||| annotations	count=1
class	return a compiled ||| compiled	count=1
class	phase commit ||| session	count=1
function	clause is [function] integer false ||| [function] int	count=2
function	this ||| attr	count=1
function	initialization ||| declarative	count=1
class	synchronize ordering for the ||| ordering	count=1
function	[function_1] statements ||| [function_1] [function_2]	count=6
function	implementation of ||| do	count=1
arg	action for ||| constraint index_elements index_where	count=1
arg	[arg] counting ||| [arg]	count=3
class	current :class session, ||| scoped session	count=1
function	threading and [function] same ||| threading with [function]	count=1
arg	particular 'cascade', starting with ||| type_ state visited_instances halt_on	count=1
function	side cursors ||| side cursors	count=2
class	this ||| mapper	count=1
arg	iterator of ||| iterator	count=1
class	do not ||| instance	count=1
module	search for a local ||| dialects	count=1
class	produce a ||| column operators	count=2
arg	inherited ||| _set	count=1
function	emit insert statements corresponding ||| emit insert statements	count=1
function	keys representing the local ||| keys	count=1
module	from this ||| sql	count=1
module_class	[module_1] default ||| [module_1] [class_2]	count=2
class	object ||| instance	count=3
arg	when building [arg] position ||| [arg]	count=1
function	refreshed within the ||| refresh	count=1
function	returning clause for the ||| return	count=1
function	large ||| large	count=2
arg	by a subclass ||| class_ factory	count=1
class	given column [class_2] ||| [class_1] [class_2] compare name for	count=1
function	as boolean [function] set of ||| bool [function]	count=1
function	of foreignkey ||| foreign keys	count=1
class	oursql isn't super-broken ||| sqldialect oursql	count=2
function	the given ||| traverse	count=1
function	partial [function_2] ||| [function_1] [function_2]	count=1
class	:class columnproperty ||| mapper	count=1
function	associated with ||| memoized attr	count=1
function	[function_1] pairs ||| [function_2] [function_1]	count=4
function	'ddl runner' for ||| for	count=1
function	[function_1] to transient" ||| [function_2] [function_1]	count=2
function	select() ||| label select column	count=1
function	[function_1] result ||| [function_2] [function_1]	count=3
class	to the select ||| select	count=1
module	collection including this ||| orm	count=1
module	text ||| dialects mysql	count=1
function	an hstore ||| hstore	count=2
function	a join ||| join	count=1
arg	expression ||| expr	count=1
arg	table and return ||| connection table	count=1
class	a smallinteger ||| smallint	count=1
function	save of the ||| save	count=1
arg	sql expression with ||| expression type_	count=2
module_class	called when a ||| core pool events	count=1
module_class	to this mapper ||| orm mapper	count=1
arg	and return ||| dict_	count=1
function_arg	keys in [arg_2] ||| [function_1] [arg_2]	count=1
module	make ||| sql	count=1
module	for [module] ||| [module]	count=4
function	been refreshed ||| refresh	count=1
module	of the :class ~sqlalchemy ||| engine	count=1
class	fetching server-side ||| values base	count=1
function	return information ||| get foreign keys	count=1
module	table objects from this ||| sql	count=1
module	the set ||| orm	count=1
function	with many [function_2] ||| [function_1] significant [function_2]	count=1
function	identity-map key for ||| key	count=1
function_arg	delete [arg_2] ||| [function_1] [arg_2]	count=2
function	at 1 ||| count from 1	count=1
function	which will omit the ||| correlate except	count=1
arg	given querycontext ||| context path loadopt mapper	count=1
function_arg	[function_1] [arg_2] to the ||| [function_1] [arg_2]	count=6
module_class	:class join ||| sql join	count=1
function_arg	[function_1] the results ||| [function_1] [arg_2]	count=1
function	given filtering [function] ||| filter [function]	count=3
class	an ||| context	count=1
arg	[arg] the ||| cursor [arg]	count=1
class	this logger ||| instance logger	count=1
module	the :class ||| engine	count=1
arg	load table description from ||| table include_columns exclude_columns	count=1
function	limit/offset is specifically ||| w	count=1
class	do ||| state	count=1
function	info dictionary associated with ||| info	count=3
function	close ||| close all	count=2
arg	given target ||| target	count=1
class	the newly resulting query ||| query	count=2
function	[function_1] type ||| generic [function_1] [function_2]	count=1
function	that allows initialization from ||| declarative	count=1
function	join ||| join	count=3
function_arg	[function_1] using gen_id() ||| [arg_2] [function_1]	count=4
function	refreshed within ||| refresh	count=1
class	the purpose of fetching ||| values base	count=1
function	emit update ||| emit post update	count=1
function_arg	a new [arg_2] ||| [arg_2] [function_1]	count=3
class	property ||| mapper property	count=1
function	an update ||| update	count=1
arg	name of a table ||| base tablename table	count=1
function	return true if ||| has	count=1
class	a type for a ||| type engine	count=1
function	a drop statement ||| drop	count=1
arg	of an [arg_2] ||| [arg_2] [arg_1]	count=1
function	to the query and ||| with	count=1
class	this option may ||| mapper option	count=1
module	first row [module] ||| [module]	count=3
module	:func ||| sql	count=2
arg	visit the ||| opts visitors	count=1
function_arg	warnings on [arg_2] ||| [arg_2] [function_1]	count=1
class	to be associated with ||| property	count=1
arg	for the given :class ||| name element	count=1
function	collection of postsortrecs as ||| actions	count=1
function	the currently selected ||| default	count=1
function	sequences ||| sequences	count=1
function	namespace of all :class ||| column attrs	count=1
class	the primary column ||| column property	count=1
class	this attribute with an ||| attribute	count=1
function	+ ||| add	count=1
function	like mysqldb yaaay ||| fetchone	count=1
arg	set of inherited ||| _set	count=1
function_arg	is [arg_2] ||| [function_1] [arg_2]	count=3
class	with this ||| mapper property	count=1
arg	structure ||| obj	count=1
arg	state after ||| state	count=1
function	updated ||| updated	count=1
function	the "loaded as ||| loaded as	count=2
function	by criterion to the ||| by	count=1
function	[function_1] delete statements ||| [function_1] [function_2]	count=1
function_arg	[function_1] tables ||| [function_1] bind [arg_2]	count=4
function	at arbitrary ||| count from n factory	count=1
function	for processing bind values ||| bind processor	count=1
arg	the [arg] ||| [arg]	count=1
class	associated with this :class ||| mapper	count=1
function	disable of _create_rule ||| disable	count=1
module	progress ||| orm	count=2
module_class	this ddlelement ||| sql ddlelement	count=1
function	data to be associated ||| attr	count=1
function	create a ||| create	count=6
function	structure [function_2] ||| [function_2] [function_1]	count=3
module	with this :class ||| sql	count=1
function	emit update [function_2] ||| [function_2] [function_1]	count=3
function	ddlelement [function_2] ||| [function_2] [function_1]	count=2
function	return ||| get table	count=1
class	state and ||| state	count=1
function	an implementation ||| do	count=1
arg	when ||| dbapi_connection connection_record	count=1
function	the string name ||| name	count=1
arg	when a connection ||| dbapi_connection connection_record	count=2
arg	roles are present ||| roles	count=1
module	[module] connection but ||| [module]	count=1
function	insert or ||| save	count=1
function	the id ||| get table id	count=1
function	values and/or types of ||| bindparams	count=1
class	an enum ||| enum	count=1
arg	given column expression ||| column	count=1
class	values ||| query	count=1
arg	an instance [arg_2] ||| [arg_1] [arg_2]	count=1
function	after a series ||| after	count=1
arg	sets of values ||| states_to_update	count=1
class	return the primary column ||| column	count=1
function_arg	[function_1] given connection ||| [function_1] name [arg_2]	count=4
function	produce a descending order ||| desc	count=1
function	version info from ||| version info	count=1
function	filter the given list ||| filter states	count=1
arg	a particular ||| order_by	count=1
function	commit a ||| do commit twophase	count=1
function	function within a transaction ||| transaction	count=1
function	local synonym matching the ||| resolve synonym	count=1
class	:class session ||| session	count=3
arg	collection attribute and ||| state dict_ key	count=2
function_arg	connection [arg_2] ||| [function_1] dbapi_connection [arg_2]	count=1
function	[function] same time ||| threading with [function]	count=1
arg	including calling ||| uowtransaction	count=1
function_arg	return [function_1] [arg_2] ||| [function_1] [arg_2]	count=1
arg	building [arg] position ||| [arg]	count=1
module_class	which this [class_2] ||| [module_1] [class_2]	count=4
arg	name ||| name	count=5
function	in that collection ||| in	count=1
class	with an empty collection ||| collection	count=1
function_arg	[function_1] [arg_2] ||| [function_1] annotate element annotations [arg_2]	count=2
module	biginteger ||| dialects mysql	count=1
module	the given expression structure ||| sql	count=1
function	converts ||| rowset	count=1
function	[function_1] about unique ||| [function_1] [function_2]	count=2
function	columndefault ||| default	count=1
class	clause for the purpose ||| values	count=1
arg	set action ||| constraint index_elements index_where set_	count=1
class	memoized ||| memoized property	count=1
function_arg	[function_1] and visit ||| [arg_2] [function_1]	count=1
arg	a dbapi connection ||| dbapi_connection	count=3
class	the current transaction ||| session	count=2
module_class	for [module_1] [class_2] ||| [module_1] [class_2]	count=10
arg	count rows ||| count	count=1
function	a warning on ||| warning on	count=2
function	[function_1] [function_2] statements for a list ||| [function_1] [function_2]	count=4
function	[function_1] using ||| [function_1] [function_2]	count=4
function	four ||| to four	count=1
function	bind parameters which may ||| params	count=1
class	this pool ||| pool	count=1
module_class	[module_1] datetime ||| [module_1] [class_2]	count=3
module	that this ||| orm	count=1
class	returning clause ||| values	count=1
module_class	a 'scalar' representation of [module_1] [class_2] ||| [module_1] [class_2]	count=10
class	user-defined data to ||| mapper	count=1
function	of all :class ||| all orm	count=2
function	state ||| get collection	count=1
arg	in table_name ||| table_name schema	count=4
function	[function_1] name ||| [function_1] [function_2]	count=5
function_arg	options [arg_2] ||| [arg_2] [function_1]	count=1
arg	[arg_1] callable ||| [arg_2] [arg_1]	count=2
function	[function_1] schema ||| [function_1] [function_2]	count=1
function	ms-sql puts top it's ||| get select precolumns	count=1
function	implements the executioncontext get_lastrowid() ||| implements	count=1
arg	given :class mapper as ||| mapper	count=1
module_class	new :class timestamp ||| sql timestamp	count=1
module	as ||| orm	count=1
class	resulting query ||| query	count=2
function	raised ||| error	count=1
function	and no from clause ||| from	count=1
function	[function_1] [function_2] ||| engine dialect get [function_1] [function_2]	count=4
function	a simple constructor that ||| constructor	count=1
arg	transaction ||| transaction	count=2
function	[function_1] detached ||| [function_2] [function_1]	count=1
function	distinct [function_2] ||| [function_1] [function_2]	count=1
arg	coerce the given value ||| value	count=1
function	kwargs ||| declarative	count=1
function_arg	[function_1] annotations dictionary ||| [function_1] element [arg_2]	count=1
function	[function_1] side cursors ||| [function_1] [function_2]	count=1
class	a :func ~ ||| operators	count=2
arg	type with arbitrary keying ||| keyfunc	count=1
class	textclause ||| text	count=1
class	associated with this ||| mapper	count=1
function	create a logger ||| instance logger	count=1
function	[function_1] from ||| [function_1] [function_2]	count=8
function	to create a new ||| create	count=1
function	list of group ||| group	count=1
function	mysql ||| mysql	count=1
function	[function_1] windows failures ||| [function_1] [function_2]	count=5
function	set of all ||| locate all	count=1
class	"loaded ||| session events	count=1
function	cte ||| init cte	count=1
function	[function_1] to ||| [function_2] [function_1]	count=4
function	backend ||| precision	count=1
class	commit ||| instance state	count=1
function	join constructs ||| join	count=1
class	and ||| result meta	count=1
function_arg	[function_1] connection ||| [function_1] version info [arg_2]	count=2
function	supports values with many ||| numerics many	count=1
function	a getter method ||| getter	count=1
function	object instance before ||| before	count=1
function	database dialect ||| dialect	count=1
function	follower ||| follower	count=2
function	:term returning clause ||| return	count=1
function	the :class table ||| table	count=1
function	provide bound metadata ||| provide metadata	count=2
arg	value of [arg_2] ||| [arg_2] key [arg_1]	count=1
function	as boolean [function] ||| bool [function]	count=3
function	commit a ||| do commit	count=1
arg	available table definitions from ||| schema views only	count=1
function	represent very small ||| precision numerics enotation small	count=1
function	a datetime object ||| datetime	count=1
function	memoize its ||| memoized instancemethod	count=1
function_arg	[function_1] cursor ||| [arg_2] [function_1]	count=2
function	[function] the ||| get server [function]	count=1
arg	a ||| dialect statement column_keys	count=1
arg	on the given instance ||| instance attribute_names lockmode	count=1
function	[function_1] metadata ||| [function_2] [function_1]	count=1
function	the update ||| update	count=2
function	listener ||| listen	count=2
module_class	of this attribute ||| orm attribute state	count=1
function_arg	set the [arg_2] ||| [arg_2] [function_1]	count=2
arg	transaction is the ||| transaction	count=1
class	initialize execution context for ||| execution context	count=1
function	a descriptor attribute return ||| get	count=1
function	of temporary view names ||| temp view names	count=2
class	rows ||| result proxy	count=1
function_arg	for [arg_2] ||| [arg_2] [function_1]	count=2
function	refreshed within ||| refresh flush	count=1
function	type ||| type	count=4
arg	the current cursor returning ||| stmt	count=1
arg	sets a and b ||| b	count=1
function	dialect [function_2] ||| [function_1] [function_2]	count=1
arg	instance ||| connection instance	count=2
function_arg	the sequence [arg_2] ||| [function_1] [arg_2]	count=1
function	binary ||| binary	count=1
function	apply ad-hoc instrumentation from ||| set collection attributes	count=1
arg	value on ||| state dict_ value	count=2
module	may also be iterators ||| util	count=1
arg	cursor ||| cursor statement	count=3
function_arg	[function_1] of inherited ||| [arg_2] [function_1]	count=1
arg	tables ||| tables	count=2
function	generate the full ||| generate	count=1
arg	an attributeimpl ||| class_ key callable_ dispatch	count=1
function	local synonym matching ||| resolve synonym	count=1
function_arg	assert [function_1] [arg_2] repr messaging on failure ||| [function_1] [arg_2]	count=1
function	four ||| floats to four	count=1
module	real ||| dialects mysql	count=1
module	of a :term ||| sql	count=1
arg	structure allowing modifications ||| obj	count=1
module	of [module] bound parameter ||| [module]	count=1
class	extract column names and ||| meta	count=1
module	make use ||| sql	count=1
function	create a savepoint with ||| do savepoint	count=1
function	a ||| init	count=3
function	of temporary ||| temp	count=4
function	[function_1] [function_2] ||| [function_2] contained [function_1]	count=2
function	about the table ||| table	count=1
class	a cloning ||| replacing cloning	count=1
function	- ||| sub	count=1
function	table comment for ||| table comment	count=2
class	fetching server-side ||| base	count=1
function_arg	listeners to [arg_2] ||| [arg_2] [function_1]	count=2
function	distinct from ||| distinct from	count=2
function	variety of mysql on ||| mysql on	count=1
class	bit ||| bit	count=2
function	a deprecation warning on ||| deprecated	count=1
class	not have a ||| instance	count=1
arg	the given :class ||| name element type_	count=1
class	which do not ||| instance	count=1
class	session execute but return ||| session	count=1
function	from a select ||| from select	count=3
class	function ||| function	count=3
class	:term ||| base	count=1
function	processing result row values ||| result processor	count=1
function	[function_1] primary keys ||| [function_2] [function_1]	count=1
class	column names and data ||| meta data	count=1
function	rollback a ||| do rollback	count=2
class	type which has the ||| type	count=1
function	modifications by ||| cloned	count=1
function	a particular entity only ||| only	count=1
function	inspect getargspec ||| getargspec init	count=1
function	allowing ||| memoized	count=1
class	current transaction in ||| session	count=2
function	order [function_2] ||| [function_2] [function_1]	count=2
module_class	fetch the first [module_1] [class_2] ||| [module_1] [class_2]	count=12
function	object for ||| for	count=1
function	[function_1] about primary ||| [function_1] [function_2]	count=1
function	ddl phrases for ||| ddl	count=1
function	user-defined data to ||| memoized attr	count=1
function	namespace of all ||| column attrs	count=1
module_class	the dbapi connection ||| core connection	count=1
function_arg	[function_1] transaction ||| [arg_2] [function_1]	count=1
module	method ||| orm	count=1
function	group [function_2] ||| [function_2] [function_1]	count=3
function	limit/offset is specifically ||| w limit offset	count=1
function	with this ||| memoized	count=1
function_arg	[function_1] :class mapper ||| [arg_2] [function_1]	count=1
function	partial ordering ||| partial ordering	count=2
function	append the given ||| append	count=4
class	specified ||| query	count=1
class	set ||| proxy	count=1
module	that allows initialization from ||| ext	count=1
function	criterion pairs ||| criterion as pairs	count=2
class	adapt ||| pool listener	count=1
function	bulk save of ||| bulk save	count=2
function	many ||| many	count=1
function	schema [function_2] ||| [function_2] [function_1]	count=4
arg	:class ||| selectable name	count=1
function	lateral ||| lateral	count=1
arg	allowing modifications by visitors ||| obj opts visitors	count=1
function	[function_1] given partial ||| [function_2] [function_1]	count=1
function	have execute() ||| do execute	count=4
arg	to the "lazy load" ||| effective_path	count=1
module	that is ||| ext	count=1
arg	another ||| other use_proxies equivalents	count=1
arg	to within a particular ||| order_by	count=1
function	a bulk [function_2] ||| [function_1] [function_2]	count=14
function	parameter ||| param	count=2
function	[function_1] as ||| [function_2] [function_1]	count=5
function	bulk [function_2] ||| [function_2] [function_1]	count=13
module	that will iterate just ||| ext	count=1
class	for the current ||| inspector	count=2
function	provide bound [function_2] ||| [function_1] [function_2]	count=4
module_class	[module_1] ddlelement conditionally ||| [module_1] [class_2]	count=2
class	initialize execution ||| default execution	count=1
class	class ||| class	count=2
function	the class ||| class	count=1
function	intercept the "deleted to ||| deleted to	count=1
function	[function] used ||| [function]	count=3
function	query synonym for a ||| synonym for	count=1
arg	a method ||| fn	count=1
module_class	[module_1] time type ||| [class_2] [module_1]	count=1
class	object allowing ||| mapper property	count=1
function	added to ||| for new	count=1
function	prepare a ||| prepare twophase	count=1
function	a scalar ||| value	count=1
arg	desired owner/name ||| connection desired_owner desired_synonym desired_table	count=1
function	to the ||| to	count=2
arg	roles are ||| cls roles methods	count=1
function	this :class ||| memoized	count=1
function	server [function_2] ||| [function_1] [function_2]	count=3
function	return a [function_1] [function_2] ||| [function_1] [function_2]	count=6
function	user-defined data ||| attr	count=1
function	datetime ||| datetime	count=1
function	of null ||| null	count=1
function	mapper dependencyprocessor to ||| mapper	count=1
function_arg	create all [arg_2] ||| [function_1] [arg_2]	count=1
module	this :class fromclause ||| sql	count=1
arg	types ||| none_as_null	count=1
function	a "bind" to which ||| get	count=1
class	set ||| set	count=2
function_arg	[function_1] tables ||| [arg_2] [function_1]	count=4
function	the quote flag passed ||| quote	count=1
function	implement the ~ ||| invert	count=1
class	of fetching server-side expressions ||| values	count=1
class	allowing user-defined data ||| property	count=1
function	select [function_2] ||| [function_2] contained [function_1]	count=2
function	from clause ||| from clause	count=2
class	the given column element ||| column element	count=1
arg	on [arg_2] ||| [arg_2] [arg_1]	count=2
function	set the given ||| set	count=1
function	create a :class ||| create	count=1
module	clone the ||| sql	count=1
arg	is ||| mapper	count=1
class	sequence from ||| sequence	count=1
function	return the set ||| get	count=1
module_class	for this instance ||| orm instance	count=1
arg	expression structure allowing modifications ||| opts	count=1
function	clause ||| clause	count=1
function	a select count ||| count	count=1
function	simple constructor ||| constructor	count=1
function	have some overlap ||| overlap	count=1
class	of this [class] against ||| [class]	count=2
module	fetching server-side ||| sql	count=1
arg	value [arg_2] ||| [arg_2] [arg_1]	count=8
function_arg	do nothing [arg_2] ||| [function_1] [arg_2]	count=2
module	used for [module] mapepd object ||| [module]	count=1
class	produce a :func ~ ||| operators	count=2
module	construct against this ||| sql	count=2
function	follower ||| follower config	count=2
function	particular entity only the ||| only	count=1
arg	identity key from the ||| query key refresh_state	count=1
module	compares to [module] when targeting ||| [module]	count=1
class	the given ||| oracle dialect	count=1
function	[function_1] a criteria ||| [function_2] [function_1]	count=2
function	bound [function_2] ||| [function_2] [function_1]	count=1
arg	given instance ||| instance attribute_names	count=1
class	of a :term returning ||| values	count=1
function	[function_1] key ||| [function_2] [function_1]	count=8
arg	table description from ||| table	count=1
class	a :term returning clause ||| values base	count=1
function	add a [function_2] ||| [function_2] [function_1]	count=3
module_class	a :class functionelement ||| sql function element	count=1
function	not ||| not	count=1
arg	cls for ||| cls	count=1
function_arg	collection append [arg_2] ||| [function_1] [arg_2]	count=2
function	collection ||| for	count=1
function	added to ||| new	count=1
class	[class_1] bindparameter ||| [class_2] [class_1]	count=2
class	result ||| result	count=3
function_arg	character set [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	connection is [arg_2] ||| [function_1] [arg_2]	count=1
module_class	[module_1] [class_2] ||| [module_1] [class_2] append	count=1
function	inter-mapper relationships ||| compile	count=1
arg	traverse an expression ||| expression consider_as_foreign_keys consider_as_referenced_keys any_operator	count=1
function	[function_1] cascade rule ||| [function_2] [function_1]	count=4
class	state and has not ||| instance state	count=1
function	a set of all ||| locate all	count=1
arg	table_name ||| connection table_name schema	count=4
function	the update [function_2] ||| [function_2] [function_1]	count=4
module_class	this index ||| sql index	count=1
function	from ||| from	count=8
function	the oid for ||| table oid	count=1
class	set of ||| instance state	count=1
class	"pending ||| session events	count=1
arg	given a value ||| value	count=1
function	is instrumented ||| is instrumented	count=2
function	about unique constraints ||| unique constraints	count=4
arg	generation of ||| from_table extra_froms from_hints	count=1
class	two phase commit ||| session	count=1
function_arg	[function_1] a two-way ||| [function_1] [arg_2]	count=2
function	string describing ||| instance str	count=1
class	attribute with [class_2] ||| [class_2] [class_1]	count=2
function	a cte is ||| cte	count=1
arg	~ ||| class_ local_table properties primary_key	count=1
function	desc clause against the ||| desc	count=1
function	use in update ||| update	count=1
function	column using affinity ||| affinity	count=1
function	insert of ||| insert	count=1
function	all ||| column	count=1
module	to by this :class ||| sql	count=1
function	[function_1] python descriptor ||| [function_1] [function_2]	count=1
class	be associated with this ||| mapper	count=1
function	a particular sequence ||| has sequence	count=1
function	union [function] of ||| union [function]	count=2
function	of [function_2] ||| [function_2] [function_1]	count=4
arg	within the persistence of ||| flush_context	count=1
function	given expression structure ||| cloned	count=1
function_arg	keys [arg_2] ||| [arg_2] [function_1]	count=1
arg	new :class ||| bind	count=1
function	initiate instrumentation ||| instrument	count=1
class	a :func ||| column	count=2
function_arg	rollback a [arg_2] ||| [function_1] to savepoint [arg_2]	count=1
arg	the results of ||| results	count=1
class	quote ||| identifier preparer	count=2
function	return ||| get	count=32
function	the 'invoke [function] eagers' flag ||| [function]	count=1
module	configure ||| testing plugin	count=1
function	insert statements ||| insert statements	count=2
function	"detached" from ||| detach	count=1
function	[function_1] named savepoint ||| [function_1] [function_2]	count=1
arg	expression ||| opts	count=1
class	receive connection ||| events	count=1
function	a :class ||| init	count=1
function	:term detached ||| to detached	count=2
class	purpose ||| values	count=1
class	occurrences of fromclause ||| from clause	count=1
function	loaded value ||| unloaded	count=1
function	all :class compositeproperty ||| composites	count=1
function	[function_1] large ||| [function_1] [function_2]	count=3
module_class	construct a [module_1] [class_2] object ||| [module_1] [class_2] init name start increment	count=1
arg	an expression and ||| expression	count=1
function	specifies a do nothing ||| do nothing	count=1
function	representation of ||| date historic	count=1
module_class	this function ||| sql function	count=1
function	the <= ||| le	count=1
function	kwargs for the given ||| kwargs	count=1
module	be associated with ||| orm	count=1
function	data to be associated ||| memoized attr	count=1
class	functionelement ||| function element	count=1
module	from kwargs ||| ext	count=1
module	parse ||| dialects postgresql	count=1
arg	set the [arg_1] [arg_2] firing history events ||| orm set attribute [arg_2] [arg_1]	count=1
function	server side [function_2] ||| [function_2] [function_1]	count=1
arg	an instance when ||| class_ oldinit instance	count=1
function	from [function_2] ||| [function_2] [function_1]	count=5
class	if this ||| condition	count=1
module	columnproperty ||| orm	count=1
module	initialize the inter-mapper ||| orm	count=1
class	set of keys ||| instance	count=1
arg	a ||| dialect statement	count=1
function_arg	pending actions [arg_2] ||| [function_1] [arg_2]	count=3
function	on a specific dialect ||| on	count=1
module	a mysql ||| dialects mysql	count=4
function	[function_1] parameter ||| [function_2] [function_1]	count=6
function	the "pending ||| pending	count=1
function	all connections ||| connections	count=1
module	dialect ||| engine	count=1
class	receive an instance ||| instance	count=1
function_arg	set [arg_2] ||| [arg_2] [function_1]	count=5
arg	structure allowing ||| obj opts	count=1
function_arg	[function_1] instance to ||| [arg_2] [function_1]	count=2
module	for date and datetime ||| dialects	count=1
class	from ||| from clause	count=1
arg	don't actually emit at ||| previous_transaction	count=1
function	connection execution_options ||| set connection execution options	count=1
function	plain percent '%' ||| percent	count=1
function	array ||| array	count=1
function	loaders ||| loaders	count=2
function_arg	constraints in [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	[function_1] a dbapi ||| [function_1] connect [arg_2]	count=3
function	is closed ||| closed	count=1
class	~ expression ||| operators	count=2
module_class	this metadata ||| sql meta data	count=5
class	may have been specified ||| query	count=1
function_arg	comment for [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	[function_1] results of ||| [arg_2] [function_1]	count=1
class	ordering for ||| ordering	count=1
function	sequence ||| sequence	count=4
function	return all table names ||| get table names	count=1
function	receive a scalar ||| scalar	count=1
class	type which ||| type engine	count=1
class	transaction in progress for ||| session	count=1
function	on [function_2] ||| [function_1] [function_2]	count=5
arg	as sent to __getitem__ ||| slc	count=1
arg	if applicable ||| checkfirst	count=2
function	all fromclause elements referenced ||| all froms	count=1
class	a cloning traversal ||| replacing cloning visitor	count=2
function	traverse ||| traverse	count=1
function	sort ||| sort	count=3
function	warnings ||| warnings	count=2
arg	existence of ||| connection sequence_name schema	count=1
class	keys which do not ||| instance state	count=1
function_arg	none [arg_2] ||| [function_1] [arg_2]	count=2
function	[function_1] [function_2] 'modulus' operator ||| [function_2] [function_1]	count=4
module	mysql ||| mysql	count=5
function_arg	table comment [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] of foreign ||| [function_2] [function_1]	count=1
arg	statement ||| statement	count=1
module_class	of [module_1] [class_2] the given selectable ||| [module_1] [class_2] except	count=1
class	purpose of fetching ||| values	count=1
function	metadata for ||| metadata	count=1
module	connection's [module] ||| [module]	count=1
function	apply listeners to synchronize ||| listeners	count=1
function	identity [function_2] ||| [function_1] [function_2]	count=3
function	mysql [function_2] ||| [function_2] [function_1]	count=2
class	:term returning clause ||| values base	count=1
function_arg	[function_1] annotations ||| [arg_2] [function_1]	count=1
class	which do ||| state	count=1
function	[function_1] primary keys ||| [function_1] [function_2]	count=1
function	clause ||| return	count=1
arg	traverse an expression and ||| expression consider_as_foreign_keys	count=1
function	indexes ||| indexes	count=1
function	before execution ||| before	count=1
function	primary keys in ||| primary keys	count=2
class	columndefault ||| default	count=1
class	if the given column ||| column	count=1
function	[function_1] given group ||| [function_2] [function_1]	count=1
function	integrityerror when ||| integrity error	count=1
function_arg	[function_1] for table_name ||| [function_1] [arg_2]	count=6
class	make use of a ||| values base	count=1
module_class	this :class [class_2] ||| [module_1] [class_2]	count=26
function	in the insert ||| append param insert	count=1
class	use of ||| values	count=1
class	method ||| hybrid	count=1
function	for on conflict ||| on conflict	count=4
module	use of a ||| sql	count=1
class	for two ||| session	count=1
function	actions ||| actions	count=1
function	all method ||| all	count=1
function	to an ||| to	count=1
function	[function_1] insert ||| [function_2] [function_1]	count=5
module	initialization ||| ext	count=1
function	mutation ||| with	count=1
function	user-defined data ||| memoized attr	count=1
arg	the persistence of the ||| flush_context	count=1
function_arg	[function_1] equality ||| [function_1] [arg_2]	count=3
function_arg	"bound" values [arg_2] ||| [arg_2] [function_1]	count=1
arg	definitions from the database ||| bind schema views only	count=1
function	return the full ||| get	count=2
function	allowing user-defined ||| memoized	count=1
function	tables ||| tables	count=2
class	:class [class_2] ||| [class_1] [class_2]	count=5
module	to [module] when targeting ||| [module]	count=1
function	[function_1] clause ||| [function_1] [function_2]	count=3
module_class	[module_1] query ||| [module_1] [class_2]	count=6
arg	statement ||| context entity path adapter	count=1
function	apply listeners ||| listeners	count=1
function	relates the given ||| with parent	count=1
class	[class_1] set ||| [class_2] [class_1]	count=4
class	relationship ||| relationship property	count=2
arg	value on the ||| value initiator	count=1
function	create statement ||| create	count=2
function	disable ||| disable	count=1
class	this [class] against ||| [class]	count=2
class	but ||| results	count=1
class	the result set ||| result proxy	count=1
module	of fetching ||| sql	count=1
arg	retrieves a given state ||| state	count=1
function	"target dialect implements the ||| implements	count=1
arg	the search without ||| search	count=1
function	a dialect-specific [function_2] ||| [function_1] [function_2]	count=4
arg	on states ||| states	count=1
module	specified in ||| orm	count=1
class	of a :term ||| base	count=1
function_arg	[function_1] set action ||| [function_1] [arg_2]	count=4
arg	[arg_1] [arg_2] ||| [arg_2] [arg_1]	count=107
function	is retrieved from the ||| checkout	count=1
function	return a ||| get	count=10
class	exists() construct with the ||| exists	count=1
module	purpose ||| sql	count=1
class	purpose of fetching ||| values base	count=1
function	'invoke [function] eagers' flag ||| [function]	count=1
function	for _sa_instrument_role-decorated methods in ||| methods	count=1
function	of all ||| all	count=2
function	lowercase if ||| normalize	count=1
class	[class] use ||| [class]	count=1
function	object allowing ||| attr	count=1
arg	action ||| constraint index_elements index_where	count=1
function	the foreign ||| foreign	count=1
function	of pairs ||| pairs	count=1
function	expand the given set ||| expand	count=1
function	parse ||| parse	count=1
function	quote flag passed ||| quote	count=1
arg	state ||| state	count=5
function	have some set ||| with overlap	count=1
class	an nvarchar ||| nvarchar	count=1
function	table [function_2] ||| engine dialect get [function_1] [function_2]	count=2
function	[function_1] all of ||| [function_1] [function_2]	count=1
arg	for a given querycontext ||| context path loadopt	count=1
class	session ||| session	count=11
module	of a :term returning ||| sql	count=1
function	connection [function_2] ||| [function_2] [function_1]	count=1
arg	[arg_1] and return ||| [arg_2] [arg_1]	count=6
function	sql intersect [function] of ||| intersect [function]	count=1
function	[function] the ||| date coerces from [function]	count=2
arg	:class mapper as ||| mapper	count=1
class	a mediuminteger ||| mediumint	count=1
class	expressions ||| base	count=1
function	object allowing user-defined data ||| memoized attr	count=1
arg	a callable that ||| dialect callable_ state	count=2
function	affinity ||| affinity	count=1
function	[function] statements ||| [function]	count=6
function	clone the given ||| cloned	count=1
class	condition ||| join condition	count=1
function	mapped [function] otherwise ||| has inherited [function]	count=1
module_class	this :class ||| orm session	count=1
function	:class join ||| join	count=1
function_arg	enabled for [arg_2] ||| [function_1] [arg_2]	count=2
function	with four ||| to four	count=1
function_arg	[function_1] is made ||| [function_1] [arg_2]	count=4
function_arg	yield only count ||| yield per count	count=1
arg	within the ||| clause	count=1
function	columns for those that ||| columns	count=1
function	the "loaded [function_2] ||| [function_2] [function_1]	count=1
arg	the persistence of the ||| target flush_context	count=1
class	item from the queue ||| queue	count=1
arg	backend ||| table_name schema	count=1
arg	the ||| opts	count=1
module	method as ||| orm	count=1
function_arg	[function_1] an :class ||| [arg_2] [function_1]	count=1
class	real ||| real	count=1
function	identity map check the ||| from identity	count=1
function	pairs ||| pairs	count=1
function	have some set of ||| with overlap	count=1
module	allows initialization ||| declarative	count=1
function	[function_1] tables ||| [function_2] [function_1]	count=1
class	the set of ||| instance state	count=1
class	do not have a ||| state	count=1
arg	method args ||| method	count=1
module	structure allowing modifications ||| sql	count=1
arg	definitions from ||| views only	count=1
function	a do update ||| do update	count=2
class	[class] after it ||| [class]	count=1
function	object allowing user-defined ||| attr	count=1
function	update statements corresponding ||| update statements	count=1
function_arg	[function_1] fragment ||| [arg_2] [function_1]	count=1
class	to the property ||| property	count=1
function_arg	[function_1] [arg_2] of ||| [function_1] [arg_2]	count=6
function	the target columns for ||| columns	count=1
function	instrumentation ||| instrumentation	count=1
module	that allows ||| ext	count=1
function	arguments before a connection ||| connect	count=1
module	a new :class ||| sql	count=6
function	[function_1] foreign key ||| [function_1] [function_2]	count=1
module	clausevisitor onto this ||| sql	count=1
function	new dbapi [function] for ||| [function]	count=1
function	o ||| id	count=1
function	warning ||| warning	count=1
function_arg	[function_1] a state ||| [arg_2] [function_1]	count=2
function	the sequence ||| fire sequence	count=1
function	result row ||| result	count=2
module_class	mysql datetime type ||| mysql datetime	count=1
function_arg	[function_1] function ||| [arg_2] [function_1]	count=9
module_class	this uowtransaction ||| orm uowtransaction	count=1
arg	a url ||| url	count=1
function	descendant mappers ||| polymorphic	count=1
class	be associated ||| property	count=1
class	updatebase ||| update base	count=1
arg	set the [arg_1] [arg_2] history events ||| orm set attribute [arg_2] [arg_1]	count=1
function	:class ||| memoized attr	count=1
class	variant ||| variant	count=1
module	execute this event ||| event	count=1
function	lookup ||| locate	count=1
function	been [function] or ||| finalize [function]	count=1
function	bulk ||| bulk	count=5
function	of table names for ||| table names	count=1
module	criterion and ||| orm	count=1
function	deep copy ||| deep	count=1
arg	allowing modifications by ||| opts	count=1
function_arg	arbitrary [arg_2] ||| [arg_2] [function_1]	count=1
class	a fromclause is cloned ||| from clause	count=1
function	[function_1] for foreign ||| [function_2] [function_1]	count=1
module	for ||| dialects	count=4
function	ad-hoc ||| attributes	count=1
class	append ||| attribute events	count=1
function	of a [function] column ||| [function] coerces from	count=1
arg	a [arg_2] ||| [arg_2] [arg_1]	count=3
class	type ||| type engine	count=2
class	thread ||| thread local meta	count=1
class	a list of string ||| foreign key constraint	count=1
function	if a cte ||| cte	count=1
class	must support ||| suite requirements	count=1
module	allows ||| ext	count=1
function	clone the ||| cloned traverse	count=1
class	[class_1] when the ||| [class_1] [class_2]	count=1
function	a numeric value that ||| numeric	count=1
module	associate with this ||| sql	count=1
arg	specific 'autoflush' setting ||| setting	count=1
function	the classes it inherits [function_1] [function_2] otherwise return false ||| [function_1] [function_2]	count=2
function	an identity map ||| identity	count=1
module	namespace ||| orm	count=2
function	use in [function_2] ||| [function_1] [function_2]	count=1
function_arg	drop all [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	[function_1] instance ||| [arg_2] [function_1]	count=3
arg	by value ||| value	count=1
function	a polymorphic mapper ||| polymorphic	count=1
function	the 'constructor' ||| constructor	count=1
arg	statement is emitted corresponding ||| mapper connection target	count=2
class	composite ||| composite	count=3
function_arg	assert [function_1] [arg_2] ||| [function_1] a [arg_2]	count=1
arg	for the given target ||| target	count=1
class	a new query ||| query	count=1
function	structure allowing modifications by ||| traverse	count=1
function	puts top ||| get select precolumns	count=1
function_arg	parameter value ||| param value dialect	count=2
function_arg	reconstitute [arg_2] ||| [function_1] [arg_2]	count=3
module_class	new :class [class_2] ||| [module_1] [class_2]	count=12
function	[function_1] keys ||| [function_1] [function_2]	count=6
function	instance before [function_2] ||| [function_1] [function_2]	count=1
arg	visit ||| obj visitors	count=1
function	integers starting at arbitrary ||| count from n factory	count=1
arg	an instance when its ||| instance	count=1
function	the is not distinct ||| isnot distinct	count=1
function	foreignkey objects which ||| foreign keys	count=1
function	[function_1] error ||| [function_1] [function_2]	count=2
module	prepare a ||| dialects	count=1
class	:class ||| mapper	count=4
function	descending order by ||| create desc	count=1
arg	for a state from ||| state	count=1
arg	an expression and locate ||| expression	count=1
function	on a ||| on	count=1
module	initialization from kwargs ||| ext	count=1
module	of the class ||| declarative	count=1
function	real dbapi rollback ||| rollback	count=1
module_class	[module_1] updatebase ||| [module_1] [class_2]	count=2
function	logger for ||| instance logger	count=1
function_arg	o [arg_2] ||| [function_1] [arg_2]	count=1
class	property to ||| property	count=1
function	[function_1] distinct ||| [function_1] [function_2]	count=3
function	[function] set ||| bool [function]	count=1
function	when using the generic [function_1] [function_2] ||| generic [function_1] [function_2]	count=1
class	initialize execution [class_2] ||| [class_2] [class_1]	count=3
function	from a [function_2] ||| [function_2] [function_1]	count=1
function	with many ||| numerics many	count=1
function_arg	an insert [arg_2] ||| [function_1] [arg_2]	count=1
module_class	fetch the first [module_1] [class_2] unconditionally ||| [module_1] [class_2] first	count=3
function_arg	assert a [function_1] [arg_2] repr messaging on failure ||| [function_1] a [arg_2]	count=4
function_arg	yield only [arg_2] ||| [arg_2] [function_1]	count=4
function	[function_1] large ||| [function_2] [function_1]	count=3
class	result or ||| query	count=1
module	occur ||| ext	count=1
class	textclause object ||| text	count=1
function	rollback has ||| soft rollback	count=1
class	add [class] more column ||| [class]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] collection state dict_ [arg_2]	count=3
function	descending order ||| create desc	count=1
function	identity map check ||| from identity	count=1
function	a cte ||| init cte	count=1
function	namespace of all ||| attrs	count=1
class	of the :class ~sqlalchemy ||| engine	count=1
function	criterion [function_2] ||| [function_2] [function_1]	count=1
class	namespace ||| mapper	count=2
function	in [function_2] ||| [function_2] [function_1] a	count=1
function_arg	flatten the [arg_2] ||| [arg_2] [function_1]	count=1
function	percent '%' as the ||| as percent sign	count=1
arg	and return ||| state dict_	count=1
arg	structure ||| obj opts	count=1
function_arg	[function_1] mapper as ||| [arg_2] [function_1]	count=1
module	~ ||| sql	count=2
function	prepare ||| prepare twophase	count=1
module	that will ||| ext	count=1
function	the given table names ||| names	count=1
function	intersect [function_2] ||| [function_2] [function_1]	count=2
function	be ||| memoized attr	count=1
function	representation of python ||| time microseconds	count=1
function	[function] to ||| [function] roles and	count=1
function	given table names ||| drop names	count=1
function	row [function_2] ||| [function_2] [function_1]	count=4
function	columns exported by ||| columns	count=1
function	decimal ||| decimal char	count=2
arg	sets of values ||| states_to_update bulk	count=1
function	set binops ||| set binops	count=2
arg	an [arg_2] ||| [arg_2] [arg_1]	count=1
module	target dialect which for ||| testing	count=1
function_arg	[function_1] value ||| [function_1] state dict_ [arg_2]	count=1
function	"loaded ||| loaded	count=1
function	implement the <= ||| le	count=1
function_arg	commit [arg_2] ||| [function_1] connection [arg_2]	count=1
class	and close the result ||| result	count=1
arg	the given target ||| target identifier	count=1
arg	relationship attribute ||| attr	count=1
function	structure allowing modifications ||| cloned	count=1
arg	given iterator of objects ||| iterator obj	count=1
class	result set unconditionally ||| result proxy first	count=1
function	column [function_2] ||| surface [function_1] [function_2]	count=4
function	[function_1] instrumented ||| [function_1] [function_2]	count=1
function	been refreshed within ||| refresh	count=1
function	[function_1] iterator of ||| [function_2] [function_1]	count=4
function	bulk insert of the ||| bulk insert	count=1
module	for a ||| ext	count=1
function	provide bound ||| provide	count=1
arg	a given querycontext ||| path loadopt	count=1
module	of keys which do ||| orm	count=1
function_arg	[function_1] attribute ||| [function_1] collection obj [arg_2]	count=1
module	clone ||| sql	count=1
module_class	[module_1] updatebase ||| [module_1] [class_2] bind	count=2
function	[function] last ||| lastrow [function]	count=1
module	progress for two ||| orm	count=1
function	[function_1] schema from ||| [function_1] [function_2]	count=3
function	undeferred e ||| undefer	count=1
class	state and has ||| instance state	count=1
class	the mapped [class_2] ||| [class_2] [class_1]	count=2
function	gc ||| gc	count=1
class	sqlcompiler ||| sqlcompiler	count=1
module	convert the [module] ||| [module]	count=3
module	not ||| orm	count=1
function	properties ||| properties	count=1
function	[function_1] statements corresponding ||| [function_1] [function_2]	count=6
class	query applies to ||| query	count=1
function	add a [function_2] ||| [function_1] [function_2]	count=3
class	~ ||| column operators	count=2
class	[class] after ||| [class]	count=1
function	apply ad-hoc ||| attributes	count=1
class	if this :class history ||| history	count=1
function	:class ||| column	count=1
function	in [function_2] ||| [function_2] [function_1]	count=5
arg	url ||| url	count=2
class	sequence from the ||| sequence	count=1
function	pool kwargs ||| pool kwargs	count=2
function_arg	[function_1] schema ||| [function_1] [arg_2]	count=11
class	object allowing user-defined data ||| mapper property	count=1
class	schemaevent's ||| schema event target	count=1
class	when ||| pool events	count=1
function	which will render into ||| polymorphic	count=1
function	kwargs for the given ||| func kwargs	count=1
module	clone the given ||| sql	count=1
function	the decimal separator character ||| decimal char	count=1
arg	connection ||| connection xid	count=1
function	'contains' ||| contains	count=1
module	the given expression ||| sql	count=1
function_arg	a set [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] pk returning compiler [arg_2]	count=8
function	commit ||| commit twophase	count=1
class	result objects ||| baked query	count=1
function	intersect all ||| intersect all	count=2
function	to use in ||| collect	count=2
arg	given mapped descriptor ||| cls attribute	count=2
function	:class session to which ||| session	count=1
class	ultimately represented by ||| aliased insp	count=1
class	in ||| context	count=1
function	[function] to ||| get [function]	count=2
class	instance of ||| instance	count=1
arg	emit error messages ||| join_condition primary	count=1
function	[function_1] drop ||| [function_1] [function_2]	count=1
function	at arbitrary ||| n factory	count=1
module	:term ||| sql	count=1
class	a :term returning ||| values	count=1
class	make use of ||| base	count=1
module	two phase ||| orm	count=1
function_arg	structure using [arg_2] ||| [arg_2] [function_1]	count=2
class	object corresponding ||| context	count=1
function	a warning on a ||| warning on	count=1
class	compiled result column ||| result meta	count=1
module	select if [module] element were ||| [module]	count=1
module	may ||| orm	count=1
function	cte is ||| cte	count=1
class	config ||| config	count=1
function	inspect getargspec with considerations ||| getargspec init	count=1
function	modifications ||| cloned traverse	count=2
function	structure allowing modifications ||| traverse	count=1
function	to be finalized at ||| global cleanup assertions	count=1
function	[function_1] jdbc url ||| [function_1] [function_2]	count=1
class	fetching ||| base	count=1
function	processing functions ||| processor	count=1
function	delete statements corresponding ||| delete statements	count=2
module	for all ||| ext	count=1
function_arg	server [arg_2] ||| [arg_2] [function_1]	count=2
function	update from [function_2] ||| [function_2] [function_1]	count=3
function	true if the given ||| has	count=1
function	clone the ||| traverse	count=1
function	return an [function] ||| [function]	count=3
arg	expression structure allowing ||| opts	count=1
arg	instance to a ||| instance	count=1
function	establish row processing functions ||| create row processor	count=1
class	column names and ||| result meta	count=1
class	receive a ||| dialect events	count=3
function_arg	update tuple producing ||| update expression meth	count=1
function_arg	commit a [arg_2] ||| [arg_2] [function_1]	count=3
class	_unboundload() object into ||| unbound load	count=1
function	a mutation [function] for ||| [function] on	count=1
function	a test as emitting ||| emits	count=1
arg	given expression ||| obj	count=1
function	insert ||| save	count=1
function	[function_1] unique ||| [function_2] [function_1]	count=2
function	the object ||| attr	count=1
arg	of the given instance ||| instance	count=1
function_arg	[function_1] an instance ||| [function_1] attach session [arg_2]	count=1
function	or zero results or ||| or none	count=1
function	numeric value that ||| numeric	count=1
function	annotate 'remote' in ||| annotate remote	count=1
function	a ddlelement ||| ddl	count=1
arg	search without ||| search	count=1
function_arg	[function_1] queuepool ||| [function_1] [arg_2]	count=1
function	like mysqldb ||| fetchone	count=1
arg	definitions from ||| bind schema views only	count=1
function	clone the given expression ||| cloned	count=1
module	a namespace ||| orm	count=2
function	a plain percent '%' ||| percent sign	count=1
module_class	new :class join ||| sql join	count=1
function_arg	[function_1] object corresponding ||| [function_1] [arg_2]	count=1
class	to the query ||| query	count=1
class	produce a :func ||| operators	count=2
function	produce a :class join ||| join	count=1
function	inspect getargspec with ||| getargspec init	count=1
function	return a [function_1] [function_2] ||| engine dialect get [function_1] [function_2]	count=2
function	return the [function_2] ||| [function_2] [function_1]	count=11
arg	[arg] to ||| [arg]	count=3
function	mysql ||| skip mysql	count=1
class	receive a ||| attribute extension	count=3
function	return the set ||| get func	count=1
arg	the current cursor returning ||| stmt type_	count=1
arg	of mapping dictionaries ||| mappings	count=2
function	x y [function] x1 ||| tuple [function]	count=1
arg	this attribute ||| attribute	count=1
function	given expression structure allowing ||| cloned traverse	count=1
function	a numeric ||| from numeric	count=1
function	object ||| attr	count=1
class	matching the given ||| oracle dialect	count=1
function	parse an hstore ||| parse hstore	count=1
module	server-side expressions ||| sql	count=1
function	of mysql [function_2] ||| [function_2] [function_1]	count=2
function	primary key [function_2] ||| [function_2] [function_1]	count=2
function	a table of ||| table	count=1
function	as ||| instances	count=1
function	recover list of uncommitted ||| do recover twophase	count=1
module_class	[module_1] select() construct ||| [module_1] [class_2]	count=7
arg	the given element ||| element values	count=1
function	on [function_2] ||| [function_2] [function_1]	count=5
class	keys ||| instance	count=1
module	or more ||| orm	count=1
class	called when a specific ||| events	count=1
function	for use [function] an insert ||| [function] crud	count=1
function	intercept the "pending ||| pending	count=1
class	use of a :term ||| values base	count=1
module_class	this fromclause ||| sql from clause	count=1
function	[function_1] in ||| [function_1] [function_2]	count=1
function	conforms to the ||| conforms	count=1
function	generate the ||| generate	count=1
function	data ||| memoized attr	count=1
class	receive ||| attribute extension	count=3
function	to lowercase ||| normalize	count=1
function	percent ||| percent	count=1
function	lowercase if it ||| normalize	count=1
arg	a sql expression ||| expression	count=1
function	chop ||| chop	count=1
arg	mapped descriptor ||| cls attribute	count=2
arg	[arg_1] element ||| [arg_2] annotations [arg_1]	count=3
function_arg	do nothing [arg_2] ||| [arg_2] [function_1]	count=2
class	in progress for ||| session	count=1
function	refresh the attributes on ||| refresh	count=1
function_arg	[function_1] the persistence ||| [function_1] [arg_2]	count=3
function	of temporary table names ||| temp table names	count=2
function	a real dbapi rollback ||| rollback	count=1
function_arg	load the [arg_2] ||| [function_1] [arg_2]	count=1
function	deprecation warning on ||| deprecated	count=1
module	[module_1] [module_2] ||| [module_2] [module_1]	count=16
class	foreign [class_2] ||| [class_2] [class_1]	count=1
function	processing function for ||| bind processor	count=1
arg	alias ||| name	count=1
function	a rollback ||| rollback	count=1
arg	table_name ||| table_name schema	count=10
function	of connection [function_2] ||| [function_1] [function_2]	count=1
function	any rollback has occurred ||| soft rollback	count=1
function	all ||| all	count=18
function	for on [function_2] ||| [function_1] [function_2]	count=4
module	from ||| declarative	count=1
arg	an expression ||| expression consider_as_foreign_keys consider_as_referenced_keys	count=1
class	select ||| select	count=4
function	set the value ||| set	count=1
function	a value of null ||| null from	count=1
function	identity of the ||| identity	count=1
class	a namespace of ||| mapper	count=2
function_arg	[function_1] new :class ||| [function_1] session [arg_2]	count=1
class	property for ||| property	count=1
module	object allowing user-defined data ||| orm	count=1
class	associated with ||| mapper	count=1
function_arg	refreshed within [arg_2] ||| [function_1] [arg_2]	count=3
arg	all available table definitions ||| views only	count=1
function	column elements ||| column elements	count=1
class	the ||| column	count=2
arg	receive ||| target	count=1
function	update ||| post update	count=2
function	schema [function_2] ||| [function_1] [function_2]	count=4
function	[function_1] group ||| [function_2] [function_1]	count=1
class	the :class connection ||| connection	count=1
arg	within the given ||| clause	count=1
function	delete ||| delete	count=6
function	a view similarly ||| view column reflection	count=2
class	the mapped ||| state	count=2
function	"offset or ||| or	count=1
function	oid for ||| table oid	count=1
arg	given relationship attribute ||| attr	count=1
arg	of a table ||| table	count=1
arg	table ||| base tablename table	count=1
class	attribute ||| attribute state	count=1
arg	table description from the ||| table	count=1
function	[function_1] the class ||| [function_2] [function_1]	count=2
function	decimal separator character ||| decimal char	count=1
class	a ||| column	count=2
function	for a ||| for	count=2
class	option may not apply ||| mapper option	count=1
arg	given querycontext ||| path loadopt	count=1
function	from clause is ||| from	count=1
arg	states ||| states	count=1
function	inserted ||| insert	count=1
class	the object ||| mapper property	count=1
arg	the [arg] ||| instance [arg]	count=1
function	group [function] ||| group [function]	count=3
function	"target dialect implements ||| implements get lastrowid	count=1
class	to be associated with ||| mapper	count=1
function_arg	the oid [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	[function_1] in iterable) ||| [arg_2] [function_1]	count=4
function	is ||| insert	count=1
arg	given expression structure allowing ||| obj	count=1
class	when the ||| events	count=4
module	for two ||| orm	count=1
module	add special mysql ||| dialects mysql	count=1
function_arg	from [arg_2] ||| [function_1] description [arg_2]	count=1
function	list of foreign table ||| foreign table	count=1
function	merge ||| merge	count=1
arg	traverse an expression and ||| expression consider_as_foreign_keys consider_as_referenced_keys any_operator	count=1
module	to this :class ||| sql	count=1
function_arg	[function_1] an instance ||| [arg_2] [function_1]	count=7
function	find ||| find	count=1
class	specified in filter() ||| query	count=1
class	set of keys which ||| instance state	count=1
function	by criterion applied ||| by	count=3
function_arg	[function_1] cursor ||| [function_1] description [arg_2]	count=2
function	temporary table names for ||| temp table names	count=1
class	target driver must ||| suite requirements	count=1
function	ddlelement ||| ddl	count=1
class	returning clause for ||| values base	count=1
arg	for connection ||| connection	count=2
function_arg	group [arg_2] ||| [arg_2] [function_1]	count=1
module	have been ||| orm	count=1
function_arg	[function_1] is present ||| [function_1] [arg_2]	count=3
function	isolation level assigned to ||| isolation level	count=1
function	& ||| and	count=1
function	return the primaryjoin ||| primaryjoin	count=1
arg	by visitors ||| visitors	count=1
arg	schema ||| connection schema	count=2
function	"target dialect implements ||| implements	count=1
arg	fn ||| fn	count=1
function	produce a descending ||| create desc	count=1
function	convert subquery eager ||| bake subquery	count=2
function	bulk save of the ||| bulk save	count=1
function_arg	[function_1] [arg_2] ||| [function_1] bind [arg_2]	count=4
class	server-side expressions ||| values	count=1
arg	the given instance ||| instance property	count=1
arg	for the cls for ||| cls	count=1
function	synonym for :func relationship ||| relation	count=1
module	initialization from ||| ext	count=1
function_arg	a connection [arg_2] ||| [arg_2] [function_1]	count=1
arg	given backend ||| table_name schema	count=1
function	on a specific ||| on	count=1
function	mapped class ||| class	count=2
class	[class] record ||| [class]	count=1
function_arg	[function_1] in iterable) ||| [function_1] [arg_2]	count=4
function	return the ||| get cls	count=1
function	representation ||| time	count=1
class	user-defined ||| property	count=1
class	names and [class_2] ||| [class_1] [class_2]	count=1
arg	[arg_1] and ||| [arg_2] [arg_1]	count=6
function	bulk insert of ||| bulk insert	count=1
function	a collection of factories ||| factories	count=1
module	~sqlalchemy engine interfaces dialect ||| engine	count=1
function	ddl phrases [function_2] ||| [function_2] [function_1]	count=3
arg	with a ||| metadata schema referred_schema_fn name	count=1
class	[class_1] bindparameter to ||| [class_1] [class_2]	count=1
function	join to the ||| join left to	count=1
function	return it to the ||| return	count=1
arg	given value ||| value	count=1
class	when a ||| session events	count=1
function	emit update statements corresponding ||| emit post update statements	count=1
class	fetch the ||| pgdialect	count=1
function	[function] the ||| [function] without	count=1
function	of "bound" values ||| bind values	count=1
arg	modifications ||| obj	count=1
function_arg	[function_1] function ||| [function_1] target [arg_2]	count=3
arg	instance ||| instance include_collections	count=1
function	synonym matching the ||| synonym	count=1
class	timestamp ||| timestamp	count=1
module	this event ||| event	count=1
function	given expression ||| cloned	count=1
function_arg	[function_1] a cursor ||| [function_1] description [arg_2]	count=2
function_arg	connection object corresponding ||| connection mapper clause	count=1
function	a dictionary-based ||| attribute mapped	count=1
function	expression structure allowing modifications ||| cloned traverse	count=1
module	given expression structure ||| sql	count=1
function	a primary key expression ||| pk	count=1
module_class	of [module_1] [class_2] the given selectable ||| [module_1] [class_2] union	count=1
function	the identity ||| identity	count=1
function	columns in a view ||| view	count=1
module	receive an ||| orm	count=2
function	set the ||| set	count=3
class	selectable embedded ||| select	count=1
function	return the full list ||| get	count=1
arg	list of mapping dictionaries ||| mappings return_defaults render_nulls	count=1
function	key for the ||| key	count=1
function_arg	inserted [arg_2] ||| finalize [function_1] [arg_2]	count=3
class	with ||| mapper property	count=2
function	server-side expressions and defaults ||| return defaults	count=1
arg	roles are present ||| roles methods	count=1
function	the 'use_labels' flag set ||| apply labels	count=1
class	have ||| state	count=1
module_class	this composite ||| orm composite	count=1
function	[function_1] warning ||| [function_1] [function_2]	count=3
function	create a new ||| create	count=2
function	the given expression structure ||| traverse	count=2
arg	ensure basic ||| cls methods required	count=1
function	invalidate ||| invalidate	count=1
function	- ||| neg	count=1
class	initialize execution context ||| execution context	count=1
arg	given iterator ||| iterator	count=1
arg	database state ||| table state	count=2
arg	of mapping dictionaries ||| mapper mappings return_defaults render_nulls	count=1
class	a function ||| function	count=1
function	all table names in ||| table names	count=1
function_arg	create all [arg_2] ||| [function_1] bind [arg_2]	count=1
function_arg	for o [arg_2] ||| [arg_2] [function_1]	count=1
function	a bulk insert ||| bulk insert	count=1
module	by this ||| engine	count=1
function	with no history events ||| committed	count=1
arg	fn execution ||| fn	count=1
function	the / ||| rdiv	count=1
function	execute ||| after transaction	count=1
class	receive connection arguments ||| events	count=1
function	:class join object given ||| create join	count=1
function	given partial ||| partial	count=1
module	a [module] compiledsql ||| [module]	count=1
module	returning clause for the ||| sql	count=1
function	[function_1] loaders in ||| [function_1] [function_2]	count=2
arg	particular schema ||| schema order_by	count=2
module	return ||| orm	count=3
module	string ||| dialects mysql	count=1
function	if a cte is ||| cte	count=1
arg	a cursor to ||| cursor statement context	count=1
function_arg	converts the [arg_2] ||| [function_1] [arg_2]	count=4
arg	of an [arg_2] ||| [arg_1] [arg_2]	count=1
function	the foreign [function_2] ||| [function_2] [function_1]	count=4
module	the class ||| declarative	count=1
module_class	construct a [module_1] [class_2] object ||| [module_1] [class_2]	count=1
function	of mapper dependencyprocessor to ||| mapper	count=1
function	of all 'cloned' predecessors ||| cloned	count=1
function	by a polymorphic mapper ||| polymorphic	count=1
function	an iterator of all ||| all	count=1
function_arg	[function_1] a transaction ||| [function_1] begin session [arg_2]	count=1
module	string to a long ||| dialects mysql	count=1
function_arg	values for equality ||| values x y	count=2
function	offset/limit ||| wo limit	count=1
function	callable ||| callable	count=1
function	a plain percent ||| percent sign	count=1
function	expression ||| cloned	count=1
class	to ||| property	count=1
arg	cursor to ||| cursor statement	count=3
module_class	[module_1] result set ||| [module_1] [class_2]	count=3
function	descriptor attribute return ||| get	count=1
function	given expression structure ||| cloned traverse	count=1
function_arg	literal parameter [arg_2] ||| [function_1] [arg_2]	count=3
function	create a new ||| init	count=1
function	using "lazy" loading with ||| baked lazyload	count=1
class	close the result ||| result	count=2
arg	a callable that will ||| dialect callable_ state	count=1
function	[function_1] result processor ||| [function_2] [function_1]	count=3
module	to mssql ||| mssql	count=2
arg	if the given state ||| state	count=1
function	constraints in ||| constraints	count=2
function_arg	[function_1] [arg_2] messaging on failure ||| [function_1] in [arg_2]	count=1
function	either present directly ||| immediate cls attr	count=1
function_arg	[function_1] transition ||| [function_1] [arg_2]	count=5
class	[class] of a ||| [class]	count=1
module	declarative ||| ext declarative	count=1
class	composite to the ||| composite	count=1
function	add ||| with	count=3
arg	structure allowing ||| obj	count=1
class	return a :class query ||| query	count=3
arg	the generation of ||| from_table extra_froms from_hints	count=1
module_class	[module_1] select ||| [module_1] [class_2]	count=14
function	binary criterion [function_2] ||| [function_1] [function_2]	count=1
arg	traverse an expression and ||| expression	count=1
function	function ||| function	count=2
function	return the :class mapper ||| mapper	count=1
arg	the given iterator ||| iterator	count=1
module	return the ||| orm	count=1
function	[function_1] conflict ||| [function_1] [function_2]	count=4
arg	an alias ||| alias name	count=1
function	or xa ||| twophase	count=1
module_class	return a copy [module_1] [class_2] ||| [module_1] [class_2]	count=2
class	cloning traversal ||| cloning visitor	count=1
module	user-defined data ||| orm	count=1
class	return a new selectable ||| select	count=1
class	produce a ||| operators	count=2
module	data to be associated ||| orm	count=1
function	of the first ||| scalar	count=1
class	new [class] ||| [class]	count=4
function	initiate instrumentation [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] names for ||| [function_1] [function_2]	count=12
class	column ||| column	count=4
class	mapped [class_2] ||| [class_2] [class_1]	count=2
function	empty ||| empty	count=2
function	kwargs for the ||| kwargs	count=2
function	be associated with this ||| memoized attr	count=1
function	have some set ||| overlap	count=1
function	schema [function] wrapper/hook for ||| [function]	count=1
function	the default ||| default	count=1
module	the set of ||| orm	count=1
function	to add limit to ||| limit	count=1
function_arg	drop all [arg_2] ||| [function_1] bind [arg_2]	count=1
function	match ||| match	count=1
function	[function_1] table comment ||| [function_1] [function_2]	count=1
function	subquery eager [function_2] ||| [function_2] [function_1]	count=4
function	[function_1] update of ||| [function_1] [function_2]	count=3
function_arg	oid for [arg_2] ||| [function_1] [arg_2]	count=1
function	[function] params in ||| received [function]	count=3
arg	value ||| value initiator	count=1
class	a relationship ||| relationship property	count=1
function	execute after flush has ||| after flush	count=1
function	the [function_1] [function_2] ||| [function_2] key [function_1]	count=2
function	percent [function_2] ||| mod operator [function_2] [function_1]	count=2
module_class	[module_1] type ||| [module_1] [class_2]	count=2
function	have [function_2] ||| [function_2] [function_1]	count=4
function	called exactly once ||| only once	count=1
function	shallow copy ||| clone	count=2
arg	class ||| cls index value	count=1
module_class	produce a union of [module_1] [class_2] against one or more ||| [module_1] [class_2] union	count=1
class	collection ||| collection	count=11
class	produce ||| column operators	count=2
function	[function_1] subquery eager ||| [function_2] [function_1]	count=1
function	value of null ||| null from	count=1
function	large variety of mysql ||| skip mysql	count=1
function_arg	[function_1] including ||| [function_1] [arg_2]	count=2
function	the identity map ||| identity	count=1
module	double ||| dialects mysql	count=1
function	currently selected [function_2] ||| [function_2] [function_1]	count=3
function_arg	object for [arg_2] ||| [function_1] [arg_2]	count=1
class	allowing user-defined data to ||| property	count=1
class	ultimately represented by this ||| aliased insp	count=1
class	the current ||| session	count=2
module	the :class ~sqlalchemy engine ||| engine	count=1
class	a double ||| double	count=1
function	:class relationshipproperty properties ||| relationships	count=1
function_arg	[function_1] emitted ||| [arg_2] [function_1]	count=1
arg	given alias ||| alias	count=1
function	against a ||| against	count=1
arg	persistence of the object ||| target flush_context attrs	count=1
function	drop statement ||| drop	count=1
function	added ||| refresh for new	count=1
arg	structure allowing modifications by ||| opts	count=1
function	a literal ||| literal	count=2
module_class	[module_1] :class bindparameter ||| [module_1] [class_2]	count=4
function	raw dbapi ||| dbapi	count=1
module	single table to this ||| sql	count=1
function	the "pending [function_2] ||| [function_1] [function_2]	count=1
function_arg	initialize [arg_2] ||| [function_1] collection obj [arg_2]	count=1
module	called when a connection ||| core	count=1
arg	[arg_1] given state ||| [arg_2] [arg_1]	count=2
function	clone the given ||| traverse	count=1
function_arg	[function_1] function for ||| [function_1] target [arg_2]	count=3
function	select [function_2] ||| [function_2] [function_1]	count=4
module	a ||| orm	count=7
function	[function_1] construct ||| [function_2] [function_1]	count=12
function	initialization from ||| declarative	count=1
class	the result ||| result	count=2
class	[class_1] attribute ||| [class_2] [class_1]	count=1
module_class	of [module_1] [class_2] against the given selectable ||| [module_1] [class_2] union	count=1
function	exception ||| exception	count=2
class	object allowing ||| property	count=1
function	update of ||| update mappings	count=1
function	a particular sequence ||| sequence	count=1
arg	see if this class ||| cls	count=1
function	is [function_2] ||| [function_2] [function_1]	count=9
class	when the span of ||| session events	count=1
function_arg	[function_1] schema ||| [function_1] connection table_name [arg_2]	count=2
function	that relates ||| with parent	count=1
arg	if the given object ||| object	count=1
function_arg	bound parameter [arg_2] ||| [arg_2] [function_1]	count=3
function	to ||| left to	count=1
function	with a ||| autoflush	count=1
function	a simple constructor that ||| declarative constructor	count=1
class	constraint ||| constraint	count=2
function	remain unloaded ||| noload	count=1
function_arg	[function_1] two-way relationship ||| [arg_2] [function_1]	count=1
function	dictionary associated with the ||| info	count=1
arg	callable that will ||| callable_ state	count=1
function	update statements ||| update statements	count=1
function	limit to the update ||| update limit	count=1
arg	to the given function ||| fn	count=1
arg	value to be ||| value	count=2
class	called ||| events	count=1
arg	value ||| state dict_ value	count=2
function	debug ||| debug	count=1
arg	against ||| element partition_by order_by	count=1
module	in this :class ||| sql	count=1
class	an instance ||| instance	count=1
function_arg	[function_1] regex ||| [arg_2] [function_1]	count=1
arg	an instance ||| oldinit instance	count=1
class	of ||| values	count=2
arg	its instancestate ||| state	count=1
module	keys ||| orm	count=1
class	to the property ||| mapper property	count=1
class	type for ||| type engine	count=1
function	rollback a ||| rollback	count=2
function	the given ||| cloned traverse	count=1
function	ad-hoc instrumentation from ||| set collection attributes	count=1
class	to the :class pool ||| pool	count=1
function	sequence in the database ||| has sequence	count=1
function_arg	names [arg_2] ||| [function_1] [arg_2]	count=1
arg	given ||| opts	count=1
module_class	[module_1] [class_2] has been created via ||| [module_1] [class_2] load target context	count=2
function	a numeric ||| numeric	count=1
module	the class that is ||| ext declarative	count=1
class	columnelement ||| column element	count=2
class	suggest a type for ||| type	count=2
function	[function_1] delete ||| [function_1] [function_2]	count=10
arg	dbapi connection [arg_2] ||| [arg_1] [arg_2]	count=2
module	use of ||| sql	count=1
function	or one ||| or	count=1
arg	visit the given expression ||| visitors	count=2
function	:class join ||| create join	count=1
arg	and return the ||| state dict_	count=1
class	object into a ||| load	count=1
function	values for ||| values	count=1
function	literal clause bound to ||| literal	count=1
arg	right ||| right onclause	count=1
function	and refresh the attributes ||| refresh	count=1
function	the class attribute managed ||| class	count=1
class	this option ||| option	count=2
function	in a view similarly ||| view column reflection	count=1
arg	b [arg_2] ||| a [arg_1] [arg_2]	count=3
arg	attribute and ||| state dict_ key	count=2
function	warning on a specific ||| warning on	count=1
arg	by a connection ||| connection	count=2
arg	results of sql execution ||| results	count=1
function	inter-mapper relationships of ||| compile	count=1
function	[function] 'modulus' ||| mod operator [function]	count=1
function	intersect or equivalent ||| intersect	count=1
function	a [function] column ||| [function] coerces from	count=1
function	cte is located ||| cte	count=1
function	create a jdbc url ||| create jdbc	count=1
function	table of the given ||| table	count=1
function	create a logger for ||| instance logger	count=1
module	engine interfaces ||| engine	count=1
arg	an instance when ||| instance	count=1
function	added ||| for new	count=1
class	user-defined data to be ||| mapper	count=1
function	a logger ||| logger	count=1
class	create a ||| create	count=1
class	return a query ||| query	count=1
class	:class ~sqlalchemy ||| engine	count=1
class	clauseelement ||| clause element	count=6
class	in the ||| context	count=1
class	:class connection ||| connection	count=1
function	with this ||| memoized attr	count=1
function	the identity [function_2] ||| [function_2] [function_1]	count=3
function	bound parameter ||| bind param	count=2
arg	high level ||| clauseelement multiparams params	count=1
function	distinct ||| distinct	count=1
class	which do not have ||| state	count=1
arg	the given mapped descriptor ||| cls attribute	count=2
class	of the :class ||| engine	count=1
function	assert a [function_1] [function_2] ||| [function_2] [function_1] a	count=1
arg	[arg_1] of an ||| orm set attribute [arg_2] key [arg_1]	count=1
arg	value on the ||| dict_ value	count=2
class	config as one ||| config	count=1
function	for a column ||| for	count=1
function	the "reverse" direction ||| reverse remote	count=1
class	this :class ||| mapper	count=1
arg	an expression and locate ||| expression consider_as_foreign_keys	count=1
module	a namespace of ||| orm	count=2
function	a bulk delete ||| bulk delete	count=2
function	that [function_2] ||| [function_1] [function_2]	count=1
module	a :term ||| sql	count=1
function	implements the executioncontext ||| implements get	count=1
function	refreshed from a query ||| refresh	count=1
function	inspect getargspec with considerations ||| getargspec	count=1
module	a ||| ext	count=9
class	from ||| from	count=1
function	the value ||| value	count=2
class	the object allowing user-defined ||| property	count=1
function	expression desc clause against ||| desc	count=1
arg	roles ||| cls roles methods	count=1
module	which do not have ||| orm	count=1
function	enabled [function_2] ||| [function_2] [function_1]	count=1
module	onto this ||| sql	count=1
arg	the given backend ||| table_name schema	count=1
function_arg	initialize [arg_2] ||| [function_1] collection [arg_2]	count=3
class	produce ||| column	count=2
module_class	[module_1] function ||| [module_1] [class_2]	count=4
class	in ||| query	count=1
arg	tables stored in ||| bind tables checkfirst	count=2
function	the given expression structure ||| cloned	count=1
function_arg	wrapper with [arg_2] ||| [function_1] [arg_2]	count=3
arg	have been ||| target context attrs	count=2
function	[function_1] a warning ||| [function_1] [function_2]	count=4
class	purpose of ||| values	count=1
function	begin ||| begin	count=2
function	[function_1] bound ||| [function_2] [function_1]	count=1
function	dialect that will be ||| dialect	count=1
function	allowing user-defined data to ||| memoized attr	count=1
function_arg	[function_1] within the ||| [arg_2] [function_1]	count=1
function	of a :term ||| return	count=1
arg	database ||| table	count=1
function_arg	an update [arg_2] ||| [arg_2] [function_1]	count=2
function	as emitting [function_2] ||| [function_2] [function_1]	count=5
function	this ||| memoized attr	count=1
class	object allowing ||| mapper	count=1
function_arg	[function_1] iterator ||| [arg_2] [function_1]	count=5
module	inter-mapper ||| orm	count=1
arg	identity key from the ||| key refresh_state lockmode	count=1
arg	connection transaction is ||| transaction connection	count=2
class	intercept when ||| connection events	count=2
function	the :meth connection execution_options ||| set connection execution options	count=1
function	the [function_1] [function_2] ||| [function_1] [function_2]	count=18
function	compare two [function_2] ||| [function_1] [function_2]	count=2
class	the [class] condition contains ||| [class]	count=1
class	an [class_2] ||| engine [class_2] [class_1]	count=1
function	compile a string ||| compile	count=1
module	mssql ||| mssql	count=2
function_arg	establish this type as [function_1] [arg_2] ||| ext mutable base [function_1] attribute [arg_2] coerce parent_cls	count=1
function_arg	[function_1] in table_name ||| [arg_2] [function_1]	count=16
class	true if parent/child ||| join condition	count=1
class	result [class_2] ||| [class_1] [class_2] first	count=1
function	[function_1] unique constraints ||| [function_1] [function_2]	count=2
class	a :class label ||| label	count=1
function	flush ||| state flush	count=1
arg	[arg_1] given instancestate ||| [arg_2] [arg_1]	count=4
arg	clauseelement annotating each ||| exclude	count=1
arg	alias of ||| alias	count=1
class	element and its mapper ||| mapper	count=1
function	yield only ||| yield	count=1
function_arg	all [arg_2] ||| [function_1] [arg_2]	count=3
function	before a delete ||| before delete	count=2
module	the set of keys ||| orm	count=1
arg	callable that will ||| callable_	count=1
arg	alias of the ||| alias name flat	count=1
function	the 'endswith' ||| endswith	count=1
function	[function_1] insert of ||| [function_2] [function_1]	count=3
arg	value of [arg_2] ||| orm set attribute [arg_2] key [arg_1]	count=1
function	compile ||| compile	count=1
function	[function_1] a statement ||| [function_1] [function_2]	count=1
class	return the set of ||| instance state	count=1
function	bound value processing function ||| processor	count=1
function	:term ||| to	count=1
function	emit update [function_2] ||| [function_1] [function_2]	count=3
function_arg	execute a [arg_2] ||| [arg_2] [function_1]	count=2
function	is bound to ||| is bound	count=2
module	set of keys ||| orm	count=1
arg	see :meth ||| op	count=1
function_arg	using [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] class [arg_2]	count=1
arg	existence of a ||| connection sequence_name schema	count=1
module	this element ||| sql	count=1
function	row processing ||| row processor	count=1
function	is instrumented by ||| is instrumented	count=2
module_class	[module_1] clauseelement ||| [module_1] [class_2]	count=6
class	a namespace of all ||| mapper	count=2
function	the character set ||| detect charset	count=2
module	modifications by ||| sql	count=1
function	a literal [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] [function_2] ||| [function_2] union contained [function_1]	count=2
arg	pickletype ||| protocol pickler comparator	count=1
function	loaders in ||| loaders	count=1
function	descriptor ||| attribute	count=1
function	or one ||| or str	count=1
function	drop ||| drop	count=4
function	the from clause ||| from	count=1
class	keys ||| state	count=1
class	condition suitable for ||| condition	count=1
function_arg	[function_1] to regex ||| [function_1] [arg_2]	count=1
class	this :class ||| property	count=1
module	to mssql ||| dialects mssql	count=1
function_arg	[function_1] [arg_2] ||| [function_1] session [arg_2]	count=3
function_arg	[function_1] for equality ||| [function_1] [arg_2]	count=3
module	execute this ||| sql	count=2
function	set of constraints ||| constraints	count=1
class	column element ||| column element	count=1
class	result corresponding ||| query	count=1
function	runner' for ||| check for	count=1
arg	to regex ||| regex	count=1
arg	and return the ||| dict_	count=1
function	[function_1] of temporary ||| [function_1] [function_2]	count=4
function	[function_1] table comment ||| [function_2] [function_1]	count=1
function	given ||| cloned	count=1
class	purpose of fetching server-side ||| values	count=1
function	intersect of ||| intersect	count=1
arg	indicate that for ||| loadopt	count=1
arg	a state ||| state	count=1
function	issues a deprecation ||| deprecated	count=1
function	initialize ||| init	count=1
function	object instance before a ||| before	count=1
module	allows initialization ||| ext declarative	count=1
module	add special mysql keywords ||| mysql	count=1
function	can allow blob/binary fields ||| binary comparisons	count=1
function	[function_1] integrityerror when ||| [function_1] [function_2]	count=1
arg	a cursor to ||| cursor statement parameters	count=2
module_class	:class [class_2] ||| [module_1] [class_2]	count=19
class	namespace of all ||| mapper	count=2
arg	an instance [arg_2] ||| [arg_2] [arg_1]	count=1
arg	b ||| a b	count=1
function_arg	compile [arg_2] ||| [function_1] [arg_2]	count=1
class	a query ||| query	count=2
function	the server [function_2] ||| [function_2] [function_1]	count=1
class	whole ||| has suffixes	count=1
arg	attributes on ||| attribute_names	count=1
function_arg	[function_1] [arg_2] ||| [function_1] expression [arg_2]	count=2
function	of the currently selected ||| default	count=1
arg	[arg_1] an attribute ||| [arg_2] [arg_1]	count=2
function	once for the first ||| first	count=1
class	user-defined data ||| mapper property	count=1
function	clause specific ||| clause	count=1
class	set of ||| state	count=1
function	view names on ||| view names	count=2
function	about columns ||| columns	count=1
function_arg	assert a [function_1] [arg_2] messaging on failure ||| [function_1] [arg_2]	count=8
function	extend ||| extend	count=1
arg	:class ||| bind	count=5
module	a [module] ||| [module]	count=3
function_arg	[function_1] [arg_2] ||| [function_1] in a [arg_2]	count=1
arg	key in ||| key	count=1
module	may have ||| orm	count=1
function	general class [function_2] ||| [function_2] [function_1]	count=2
module	return ||| engine	count=16
arg	or more attributes have ||| context attrs	count=1
function	the is not ||| isnot	count=2
function	establish row processing ||| create row processor	count=2
arg	callable ||| callable_ state	count=1
function	new [function_2] ||| [function_1] [function_2]	count=3
function	[function_1] an insert ||| [function_1] [function_2]	count=3
class	annotations [class] ||| [class]	count=1
function	a bound parameter ||| bind param	count=2
class	[class] removing ||| column [class]	count=3
function	add a ||| add	count=4
module_class	of [module_1] [class_2] given selectable ||| [module_1] [class_2] except	count=1
class	given identifier ||| identifier	count=2
function	ad-hoc instrumentation ||| attributes	count=1
function	extract [function_2] ||| [function_2] [function_1]	count=1
function_arg	been refreshed [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	[function_1] attribute ||| [function_1] collection state dict_ [arg_2]	count=1
function	about the table comment ||| table comment	count=1
class	which ||| instance state	count=1
function	the given expression delivering ||| visit binary product	count=1
arg	when a connection is ||| dbapi_connection connection_record connection_proxy	count=1
function	nothing ||| nothing	count=1
class	associated ||| queryable attribute	count=1
function	of table [function_2] ||| engine dialect get [function_1] [function_2]	count=2
function	represent very large ||| precision numerics enotation large	count=1
module	current transaction ||| orm	count=2
function	current isolation level assigned ||| isolation level	count=1
function	starting at 1 ||| from 1	count=1
function	is [function] ||| [function] int	count=2
function	foreign table names ||| foreign table names	count=3
function	instrumented by ||| instrumented	count=1
arg	definitions from the ||| views only	count=1
class	against ||| element	count=1
module	and unicode ||| dialects	count=1
arg	building [arg] position is ||| [arg]	count=1
function	is overriding an existing ||| overrides	count=1
class	selectable embedded ||| select base	count=1
function_arg	transient" [arg_2] ||| [arg_2] [function_1]	count=4
function	adapt ||| adapt	count=1
function	of foreignkey objects ||| foreign keys	count=1
function	the version ||| version info	count=2
class	~sqlalchemy engine ||| engine	count=1
function	should disallow lazy loads ||| raiseload	count=1
function	driver name of the ||| driver	count=1
function	implement the | ||| or	count=1
function	from a ||| from	count=2
module	:class columnelement ||| sql	count=2
function	to the update ||| update	count=1
arg	constructor is ||| kwargs	count=1
arg	given iterator of objects ||| iterator	count=1
arg	provides ||| comparator_factory descriptor doc info	count=1
function	o o) for o ||| id	count=1
function_arg	[function_1] [arg_2] ||| core connection events [function_1] execute conn cursor [arg_2]	count=3
function_arg	execute after [arg_2] ||| [function_1] begin session [arg_2]	count=1
function	dialect that will ||| dialect	count=1
arg	made ||| dialect conn_rec cargs cparams	count=1
function	a connection is ||| do connect	count=1
function	annotate 'remote' in primaryjoin ||| annotate remote with	count=1
arg	allowing modifications ||| obj	count=1
function	cursor ||| cursor	count=2
function	[function_1] criteria ||| [function_2] [function_1]	count=2
function	percent [function_2] ||| [function_2] [function_1]	count=2
class	keys which do not ||| instance	count=1
function	return the identity ||| identity	count=1
arg	iterator of objects ||| iterator obj	count=1
module	in progress for ||| orm	count=1
class	memoized ||| memoized	count=1
arg	[arg_1] transaction is ||| [arg_2] [arg_1]	count=4
function	with four ||| four	count=1
function	all fromclause elements referenced ||| locate all froms	count=1
function	return a data type ||| type	count=1
function	[function_1] class ||| [function_1] [function_2]	count=2
function_arg	processing functions [arg_2] ||| [function_1] [arg_2]	count=1
function	item from ||| from	count=1
class	the result [class_2] ||| [class_2] [class_1]	count=1
function	[function_1] constraints in ||| [function_2] [function_1]	count=8
function	dbapi connection set ||| set	count=1
function	the collection ||| collection	count=2
function	[function_1] foreign keys ||| [function_2] [function_1]	count=1
class	the pool ||| pool events	count=2
class	turns a query ||| query	count=1
function	all view names in ||| view names	count=2
arg	more attributes have ||| context attrs	count=1
function	set [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] string name ||| [function_2] [function_1]	count=1
function	from the [function_2] ||| [function_2] key [function_1]	count=1
function	float ||| float	count=1
function_arg	to transient" [arg_2] ||| [arg_2] [function_1]	count=4
arg	on the given instance ||| instance attribute_names	count=1
arg	annotating each ||| exclude	count=2
function	allows initialization ||| declarative	count=1
function	table names ||| drop names	count=1
function	a 'validator' for ||| validates	count=1
class	to be associated ||| property	count=1
function	mysql [function_2] ||| [function_1] [function_2]	count=2
class	for [class_2] ||| [class_2] [class_1]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] target [arg_2]	count=12
function	key columns collected ||| cols	count=1
function	[function_1] for ||| [function_1] [function_2]	count=4
function	commit a ||| commit	count=1
function	of unique constraints ||| unique	count=1
arg	given target ||| target identifier	count=1
function	bulk update of the ||| bulk update	count=1
function	implements the executioncontext get_lastrowid() ||| implements get lastrowid	count=1
arg	[arg_1] attribute ||| [arg_2] [arg_1]	count=2
class	boolean ||| boolean	count=1
arg	in the where clause ||| clause	count=1
function_arg	is attached [arg_2] ||| [function_1] [arg_2]	count=1
class	[class_1] traversal ||| [class_2] [class_1]	count=2
function	deep copy the ||| deep	count=1
function	a schema [function] wrapper/hook ||| [function]	count=1
arg	held by this :class ||| e soft	count=1
function	limit ||| limit	count=2
function_arg	[function_1] persistence ||| [function_1] [arg_2]	count=2
module	[module] a transaction ||| [module]	count=5
arg	the instance ||| instance	count=1
function	property should ||| should	count=1
function	of mysql on ||| mysql on	count=1
arg	persistence of the object ||| flush_context	count=1
function	a criteria ||| criteria	count=2
function	will execute ||| execute if	count=1
function	from keyword ||| from	count=1
class	join ||| join	count=3
function	implement the / ||| rdiv	count=1
function	of fetching server-side ||| return	count=1
class	execution context for a ||| default execution context	count=2
function	add ||| add	count=4
function	the given partial ||| partial	count=1
function	primary ||| primary	count=1
function	the "pending [function_2] ||| [function_2] [function_1]	count=1
class	sql expression ||| clause	count=1
function	to which an object ||| object	count=1
function	that will execute ||| execute if	count=1
function	shard ||| shard	count=1
function	put an ||| put	count=1
arg	state after an insert ||| state	count=1
function	initialize a ||| init	count=1
function	loaded within a certain ||| with current	count=1
function	of postsortrecs as ||| actions	count=1
function_arg	using the [arg_2] ||| [function_1] [arg_2]	count=3
class	:func ~ ||| operators	count=2
function	returning clause ||| return	count=1
arg	mapper to ||| mapper	count=1
function	annotate 'remote' in ||| annotate remote with	count=1
function	metadata for a single ||| metadata	count=1
module	called for each ||| core	count=1
function	type from a reflected ||| type	count=1
class	add ||| query	count=1
function	[function_1] dialect that ||| [function_2] [function_1]	count=1
function	to be ||| memoized attr	count=1
function	is retrieved from ||| checkout	count=1
function_arg	a logger [arg_2] ||| [arg_2] [function_1]	count=2
function	given partial [function_2] ||| [function_1] [function_2]	count=1
module	objects for all ||| ext	count=1
function	requires ||| requires	count=2
function	user-defined data to be ||| memoized	count=1
function	given list of group ||| group	count=1
class	state ||| state	count=1
arg	collection attribute [arg_2] ||| [arg_2] [arg_1]	count=6
arg	conditionally ||| force	count=1
function	processing function for ||| processor	count=1
function	create a jdbc ||| create jdbc	count=3
function	[function_1] clause specific ||| [function_1] [function_2]	count=3
arg	given a url ||| url	count=1
function	in update ||| collect post update	count=1
arg	a value on ||| value	count=1
function_arg	[function_1] [arg_2] ||| [function_1] engine connection close_with_result [arg_2]	count=2
arg	the value of an ||| instance	count=1
function	a query synonym ||| synonym	count=1
class	the purpose ||| values base	count=1
function	item from the ||| from	count=1
class	the set ||| instance	count=1
class	the ||| mapper	count=1
function	a 'validator' ||| validates	count=1
function	ad-hoc instrumentation ||| set collection attributes	count=1
function	foreign table ||| foreign table	count=2
function_arg	[function_1] dbapi ||| [function_1] connect [arg_2]	count=2
arg	clauseelement annotating each element ||| element exclude	count=1
class	associated with this ||| mapper property	count=1
function	with many ||| precision numerics many	count=1
arg	the persistence ||| target flush_context	count=1
function	'%' as the ||| as	count=1
class	events ||| events	count=5
class	names and data ||| meta data	count=1
class	commit ||| session	count=1
function_arg	values for [arg_2] ||| [arg_2] [function_1]	count=1
class	compat for impl ||| attribute impl	count=2
arg	statement and possibly ||| stmt c values	count=1
module_class	this session ||| orm session	count=9
arg	given alias object ||| alias	count=1
function	return a [function_2] ||| [function_2] [function_1]	count=25
class	allowing user-defined data to ||| mapper property	count=1
function	literal [function_2] ||| [function_1] [function_2]	count=2
function	key for use ||| key	count=1
function	dispatch ||| dispatch	count=1
function_arg	[function_1] given iterator ||| [arg_2] [function_1]	count=5
module	more named ||| orm	count=1
function	getter ||| getter	count=1
function	all of ||| all	count=1
module	:class ||| engine	count=1
function	column ||| column	count=5
function	listeners to synchronize ||| backref listeners	count=1
arg	roles ||| cls roles	count=1
function_arg	a lateral [arg_2] ||| [function_1] [arg_2]	count=1
function	create a copy ||| copy	count=1
function	column elements such as ||| column elements	count=1
function_arg	[function_1] attribute and ||| [function_1] collection [arg_2]	count=1
arg	key from the database ||| query key	count=1
function_arg	[function_1] persistence of ||| [arg_2] [function_1]	count=2
class	[class_1] [class_2] unconditionally ||| [class_1] [class_2] first	count=4
class	:func ||| column	count=2
function	as the 'inherits' for ||| concrete base	count=1
arg	instantiate cls ||| cls	count=1
class	query or ||| query	count=1
class	cloning ||| replacing cloning	count=1
function	that [function] the ||| [function]	count=1
function	lists of pairs ||| pairs	count=1
function	similarly to how a ||| column reflection	count=1
class	fromclause ||| from clause	count=5
function_arg	refreshed [arg_2] ||| [arg_2] [function_1]	count=2
function	server version info from ||| server version info	count=1
function	to ||| attr	count=1
class	that turns a query ||| query	count=1
function_arg	[function_1] [arg_2] ||| [function_1] collection obj [arg_2]	count=3
function_arg	construct a [arg_2] ||| [function_1] engine connection close_with_result [arg_2]	count=1
function	produce a :class join ||| create join	count=1
function	provide bound [function_2] ||| [function_2] [function_1]	count=4
function	of foreign table names ||| foreign table names	count=1
class	[class_1] set ||| [class_1] [class_2] first	count=4
function	as emitting a warning ||| emits warning	count=1
function	update of the given ||| update	count=1
function_arg	string describing [arg_2] ||| [function_1] [arg_2]	count=1
arg	mapping dictionaries ||| mappings return_defaults	count=1
function	[function_1] dialect ||| [function_1] [function_2]	count=1
arg	see :meth ||| op value	count=1
function	[function] integer false ||| [function] int	count=2
function	for a follower ||| follower	count=1
class	an inspection instance representing ||| queryable attribute	count=1
function	name [function_2] ||| [function_2] [function_1]	count=3
class	fetching server-side ||| values	count=1
function	of fetching ||| return	count=1
class	type which has ||| type engine	count=1
function	[function_1] instrumented by ||| [function_1] [function_2]	count=1
class	return a namespace of ||| mapper	count=1
function	allowing user-defined data to ||| memoized	count=1
function	this ||| memoized	count=1
arg	transition for ||| session	count=1
arg	this class ||| cls index	count=1
function	from the sequence ||| sequence	count=1
module_class	[module_1] columnelement to ||| [module_1] [class_2]	count=2
module	event ||| event	count=2
function	[function] 'modulus' ||| mod operator [function] percent	count=2
function	the character set in ||| detect charset	count=2
function_arg	[function_1] b with ||| [function_1] in a [arg_2]	count=1
class	string ||| key constraint	count=2
class	if ||| join condition	count=1
arg	when a ||| dbapi_connection connection_record	count=1
arg	on an instance ||| instance attribute_names	count=2
function	facade to attributes ||| attribute	count=1
function	which will render into ||| polymorphic properties	count=1
function	a new ||| transaction create	count=1
function_arg	[function_1] value on ||| [arg_2] [function_1]	count=1
function	a cte ||| cte state	count=1
module	allows initialization from kwargs ||| declarative	count=1
module	called once for each ||| core	count=1
function	of null ||| fetch null	count=1
function	given table names to ||| drop names	count=1
module	produce an inner ||| orm	count=1
module	row_number() ||| dialects mssql	count=1
arg	[arg] _connectionrecord ||| [arg]	count=1
arg	traverse an expression ||| expression consider_as_foreign_keys consider_as_referenced_keys	count=1
arg	the given expression structure ||| obj	count=1
function	[function_1] names ||| engine dialect [function_1] [function_2]	count=2
function	join ||| create join	count=2
function	bound ||| bind	count=2
function	raises [function_2] ||| [function_2] [function_1]	count=3
class	[class] limited ||| sharded [class]	count=3
function	active collations list from ||| collations	count=1
function	on conflict clause ||| on conflict	count=4
class	of a :term returning ||| values base	count=1
function	and refresh ||| refresh	count=1
class	of string ||| key constraint	count=1
function	interface ||| interface	count=1
module	class that ||| ext declarative	count=2
arg	clone the ||| obj	count=1
function	sequence in the database ||| sequence	count=1
class	data to ||| mapper	count=1
arg	table ||| table	count=5
function	it inherits [function] ||| [function] inherited	count=2
arg	the given relationship attribute ||| attr	count=1
arg	allowing ||| opts	count=1
class	:class textclause ||| text	count=1
class	new selectable ||| select	count=1
function	implement the % ||| rmod	count=1
arg	newly persisted database ||| table	count=1
arg	in iterable) ||| iterable	count=1
function	allowing user-defined data to ||| attr	count=1
arg	count rows at a ||| count	count=1
function	offset/limit ||| wo	count=1
arg	persistence ||| flush_context attrs	count=1
arg	foreign_keys in table_name ||| table_name schema	count=1
function_arg	execute after [arg_2] ||| [function_1] attach session [arg_2]	count=1
arg	the [arg] ||| instance key [arg]	count=2
arg	return a callable that ||| dialect callable_	count=1
class	of a :term ||| values	count=1
arg	an alias of the ||| alias name	count=1
function	getter method ||| getter	count=1
function	set of columns exported ||| columns	count=1
function	given ||| cloned traverse	count=2
class	mapper in an ||| mapper	count=1
class	[class_1] by ||| [class_1] [class_2]	count=3
function	puts top it's ||| get select precolumns	count=1
function_arg	compile a [arg_2] ||| [function_1] [arg_2]	count=1
function	starting at arbitrary ||| count from n factory	count=1
function	allowing modifications by ||| cloned traverse	count=1
function	and execute returning ||| execute	count=1
function_arg	append [arg_2] ||| [function_1] [arg_2]	count=1
class	returning clause for the ||| base	count=1
function	decode [function_2] ||| [function_1] [function_2]	count=1
class	matching the given ||| dialect	count=1
class	context for ||| context	count=1
function	for this ||| for	count=1
function	clone the ||| cloned	count=1
function	initialize ||| compile	count=1
function	instrumented by the ||| instrumented	count=1
class	elements replaced ||| clause	count=2
function	[function_1] using the ||| [function_1] [function_2]	count=4
function	tables [function_2] ||| [function_2] [function_1]	count=1
function	oid ||| get table oid	count=2
arg	instance ||| instance property	count=1
arg	value of [arg_2] ||| [arg_2] [arg_1]	count=4
function	of properties ||| properties	count=1
arg	available table definitions from ||| views only	count=1
function	value ||| value	count=2
module_class	for this columnelement ||| sql column element	count=1
function	[function_1] comment for ||| [function_2] [function_1]	count=5
function_arg	construct [arg_2] ||| [function_1] [arg_2]	count=2
module	fetching server-side expressions and ||| sql	count=1
function	user-defined data to be ||| attr	count=1
function	detect and ||| detect	count=1
function	fetching server-side expressions and ||| return	count=1
function	simple constructor that ||| declarative constructor	count=1
arg	if col ||| col	count=1
function	load ||| load on	count=2
function	against ||| against	count=2
arg	given instance ||| instance	count=5
class	the current ||| inspector	count=2
class	keys which do not ||| state	count=1
function	return a "bind" ||| get	count=1
module_class	mysql [class_2] ||| [module_1] [class_2]	count=3
function	'%' as ||| as	count=1
function	[function_1] for ||| [function_2] [function_1]	count=4
function	of fetching server-side expressions ||| return	count=1
function	dependencyprocessor ||| states for dep	count=1
arg	set the [arg_1] [arg_2] history events ||| [arg_2] [arg_1]	count=1
function	list of table names ||| table names	count=1
function	[function_1] in union ||| [function_2] contained [function_1]	count=2
function	values with many ||| numerics many	count=1
function	metadata ||| metadata	count=1
module_class	new :class select ||| sql select	count=1
function	[function] query ||| group [function]	count=1
module	that ||| declarative	count=1
function	have a loaded value ||| unloaded	count=1
function	primary key violation ||| duplicate key	count=1
arg	the persistence of ||| target flush_context attrs	count=1
class	a text ||| text	count=1
function	[function_1] using ||| [function_2] [function_1]	count=4
arg	table and return processed ||| connection table	count=1
function_arg	processing functions [arg_2] ||| [arg_2] [function_1]	count=1
module	which do not ||| orm	count=1
module	that allows initialization ||| ext	count=1
arg	available table definitions ||| schema views only	count=1
function	[function_1] pairs ||| [function_1] [function_2]	count=4
function	events that [function] the ||| [function]	count=1
function	object ||| object	count=1
class	[class] removing unaliased ||| column [class]	count=3
class	selectable ||| select base	count=1
function	about primary [function_2] ||| [function_1] [function_2]	count=2
function	> ||| gt	count=1
function	the oid for ||| get table oid	count=1
arg	level 'level'? ||| level	count=1
function	a traceback ||| traceback	count=1
function	to initiate instrumentation ||| instrument	count=1
arg	the mapper to the ||| mapper	count=1
class	when the span of ||| events	count=1
function	from the ||| from	count=1
function	[function_1] a select ||| [function_2] [function_1]	count=2
function	a union statement ||| union	count=1
function	clause for ||| return	count=1
function	conforms to [function_2] ||| [function_2] [function_1]	count=2
module	for the purpose of ||| sql	count=1
function	[function_1] save of ||| [function_2] [function_1]	count=3
arg	cls for use by ||| cls	count=1
arg	state on states ||| states	count=1
function	pool ||| pool	count=1
arg	attributes unconditionally ||| dict_ instance_dict	count=1
function	identity map check the ||| get from identity	count=1
function	cascade rule ||| cascade	count=1
arg	object ||| selectable	count=2
function	convert [function_2] ||| [function_2] [function_1]	count=5
class	by the :class connection ||| connection	count=1
function_arg	[function_1] for it ||| [function_1] [arg_2]	count=2
function	update the [function_2] ||| [function_1] [function_2]	count=2
function	[function_1] [function_2] statements for a list ||| [function_1] [function_2] commands uowtransaction table	count=4
function	new :class ||| init	count=3
arg	specific dialects ||| db	count=1
class	to the pool ||| pool	count=1
function	data to be ||| memoized	count=1
function	percent '%' as the ||| as percent	count=1
module	called once for ||| core	count=1
function	foreign table [function_2] ||| [function_2] [function_1]	count=1
class	fetching server-side expressions and ||| values base	count=1
class	which do not have ||| instance state	count=1
module_class	return a 'bind' linked [module_1] [class_2] ||| [module_1] [class_2] bind	count=1
module_class	[module_1] object instance ||| [module_1] [class_2] load target context	count=2
function	a bound [function_2] ||| [function_2] [function_1]	count=1
function_arg	set a [arg_2] ||| [arg_2] [function_1]	count=5
arg	method ||| fn	count=1
function	return the collection ||| collection	count=2
module	a dictionary ||| dialects	count=1
function	[function_1] given order ||| [function_1] [function_2]	count=1
module	mysql keywords ||| mysql	count=1
function	lookups ||| lookups	count=1
function	iterator of all ||| all	count=1
class	of this [class] against one ||| [class]	count=2
class	receive [class_2] ||| [class_2] [class_1]	count=4
function	is not distinct from ||| isnot distinct from	count=1
function	first time a ||| first	count=1
class	~sqlalchemy engine interfaces ||| engine	count=1
arg	to synchronize a two-way ||| attribute key uselist	count=1
module_class	this select() ||| sql select	count=2
function	function with a warnings ||| with	count=1
arg	the given :class ||| name element	count=1
function	new cursor ||| create cursor	count=1
function	structure ||| cloned traverse	count=2
class	mapper in an object ||| mapper	count=1
function_arg	lateral [arg_2] ||| [function_1] [arg_2]	count=1
arg	identity key from ||| query key	count=1
function	an extended ||| extended	count=1
class	detect ||| my sqldialect	count=1
function	branched version ||| contextual connect	count=1
arg	mapping dictionaries ||| mapper mappings return_defaults render_nulls	count=1
class	primary column ||| column property	count=1
class	[class] to ||| execution [class]	count=1
arg	if the given instance ||| instance include_collections passive	count=1
class	after ||| mapper events	count=2
function_arg	values [arg_2] ||| [function_1] [arg_2]	count=1
class	been specified in filter() ||| query	count=1
class	~sqlalchemy ||| engine	count=1
arg	a sql-expression ||| expr	count=1
function_arg	[function_1] b ||| [arg_2] [function_1]	count=6
function	:attr should_evaluate_none ||| evaluates none	count=1
function	return ||| get foreign keys	count=1
function	an extended lookup ||| locate extended	count=1
function	a scalar result ||| scalar	count=2
function	is called exactly once ||| only once	count=1
function	[function_1] in ||| [function_2] union contained [function_1]	count=2
class	allowing ||| mapper property	count=2
arg	the persistence ||| target flush_context attrs	count=1
function	true if the given ||| has impl	count=1
class	:class history ||| history	count=1
class	then close the result ||| result	count=1
class	oursql isn't super-broken like ||| oursql	count=1
class	allowing user-defined ||| mapper	count=1
function	filter the given list ||| filter	count=1
function	compile a string to ||| compile	count=1
arg	an alias of ||| alias name flat	count=1
function	'remote' in primaryjoin ||| remote with	count=1
class	result column ||| result meta	count=1
arg	to another ||| other use_proxies equivalents	count=1
function	clause specific to ||| clause	count=1
function	name [function_2] ||| [function_1] [function_2]	count=3
module	oracle ||| dialects oracle	count=1
function	apply listeners ||| backref listeners	count=1
function	dialect that ||| dialect	count=1
class	receive an object ||| extension	count=4
function	update of the ||| update	count=1
function	limit/offset is specifically present ||| w limit offset	count=1
function	after execution ||| after	count=1
function	[function_1] comment for ||| [function_1] [function_2]	count=5
function	added to the c ||| for new	count=1
module	which may ||| orm	count=1
class	traversal ||| visitor	count=1
function	a critical ||| critical	count=1
arg	allowing modifications ||| opts	count=1
arg	regex and callable ||| regex	count=1
module	parameters within this :class ||| sql	count=1
class	to the underlying logger ||| logger	count=5
function	o o) for o ||| iter id	count=1
class	a boolean ||| boolean	count=1
arg	clone the given ||| opts	count=1
function_arg	[function_1] count ||| [arg_2] [function_1]	count=1
function	[function_1] column ||| my sqltable definition parser [function_1] [function_2] line state	count=1
class	unaryexpression against the ||| unary expression	count=1
function	a plain percent ||| percent	count=1
function	recover list of ||| recover	count=1
class	return the set ||| instance state	count=1
function_arg	constraints [arg_2] ||| [arg_2] [function_1]	count=2
function	none ||| none	count=1
function	connection set ||| set	count=1
function	initialization from kwargs ||| declarative	count=1
function	insert() [function] executed excluding ||| autoincrement [function]	count=1
function	add a criteria ||| add criteria	count=3
function	that will provide ||| execution options	count=2
function_arg	[function_1] is ||| [function_1] [arg_2]	count=3
class	returning clause for ||| values	count=1
class	of the ||| engine	count=1
function	about unique [function_2] ||| [function_2] [function_1]	count=4
class	have ||| query	count=1
function	[function] query and ||| group [function]	count=1
module	the ||| engine	count=1
class	a type for ||| type engine	count=1
arg	by visitors ||| opts visitors	count=1
arg	don't actually emit at ||| session previous_transaction	count=1
function	returning clause for ||| return	count=1
function	make ||| return	count=1
function	enabled for ||| enabled for	count=2
function	collection of foreignkey objects ||| foreign keys	count=1
class	cloning ||| cloning	count=1
function	emitting a warning ||| emits warning	count=3
function	append the [function_2] ||| [function_2] [function_1]	count=6
arg	definitions from the ||| bind schema views only	count=1
function_arg	nothing [arg_2] ||| [function_1] [arg_2]	count=2
function	local synonym ||| resolve synonym	count=1
function	insert ||| append param insert	count=1
function	class attribute managed ||| class	count=1
class	:class textclause [class] ||| text [class]	count=1
function	"target dialect implements ||| implements get	count=1
function	column elements such ||| column elements	count=1
arg	[arg_1] state ||| [arg_1] [arg_2]	count=4
function	[function_1] an object ||| [function_2] [function_1]	count=2
function	[function_1] kwargs ||| [function_2] [function_1]	count=2
function	a do nothing ||| do nothing	count=2
function	a literal clause bound ||| literal	count=1
class	been ||| query	count=1
arg	[arg_1] table description ||| [arg_2] [arg_1]	count=2
function	create the ||| create	count=1
class	url ||| url	count=1
class	mapper in ||| mapper	count=1
class	the mapped [class] including its ||| [class]	count=1
function	ms-sql puts ||| get select precolumns	count=1
arg	is ||| connection_record	count=1
function	its where clause joined ||| where	count=1
function	reflection of ||| constraint reflection	count=1
arg	of this class ||| cls	count=1
arg	this class ||| cls index value	count=1
function	class attribute managed by ||| class	count=1
arg	for schema ||| schema	count=2
arg	mapper as the ||| mapper	count=1
function	[function_1] clause ||| [function_2] [function_1]	count=3
function	either present directly ||| immediate	count=1
arg	perform a bulk ||| synchronize_session update_args	count=1
function	any rollback ||| soft rollback	count=1
function	expand the ||| expand	count=1
module_class	[module_1] selectable embedded ||| [module_1] [class_2]	count=2
arg	indicate that for a ||| loadopt	count=1
arg	to the given query ||| query	count=1
function_arg	listener [arg_2] ||| [arg_2] [function_1]	count=5
arg	target ||| target	count=1
function	pending actions ||| state actions	count=1
function_arg	[function_1] including ||| [arg_2] [function_1]	count=2
class	the ||| engine	count=1
function	in update ||| collect update	count=1
module_class	[module_1] result set ||| [module_1] [class_2] first	count=3
module	of ||| sql	count=2
function	object ||| memoized	count=1
module_class	a mysql datetime ||| dialects mysql datetime	count=1
arg	transition for a ||| session instance	count=1
function	delete construct against ||| delete	count=1
function	an iterator of all ||| iterate properties	count=1
module_class	new :class variant ||| sql variant	count=1
function	number with four ||| four	count=1
module	from ||| ext declarative	count=2
class	the underlying logger ||| instance logger	count=5
function	as [function_2] ||| [function_2] [function_1]	count=1
function	is an ||| is	count=1
function	return it ||| return	count=1
function	a warning ||| warning	count=1
class	of query statement ||| query	count=1
function	version of the ||| version info	count=2
function	[function_1] delete statements ||| [function_2] [function_1]	count=1
function	between [function] ||| [function]	count=1
function	decode a ||| decode	count=1
function	default schema name ||| default schema name	count=1
module	of ||| orm	count=5
arg	structure allowing modifications ||| opts	count=1
class	a newly returned delete ||| delete	count=1
module_class	:class exists ||| sql exists	count=1
function	table [function_2] ||| [function_1] [function_2]	count=12
function	[function_1] of type ||| [function_2] [function_1]	count=6
function	statements corresponding ||| statements	count=3
function	iterator of all mapperproperty ||| iterate	count=1
class	value of query statement ||| query	count=1
function_arg	[function_1] [arg_2] ||| [function_1] cursor [arg_2]	count=1
function	deep copy the given ||| deep	count=1
class	of string ||| key	count=1
module_class	produce a union of [module_1] [class_2] against one or more ||| [module_1] [class_2]	count=1
function	loaders in the ||| loaders	count=1
class	option may not ||| option	count=1
function	add a class to ||| add	count=1
function	specifies a do update ||| do update	count=1
class	first ||| pool events	count=1
module	this ||| engine	count=2
arg	subclass to test ||| class_ factory	count=1
module_class	turn this [class_2] ||| [module_1] [class_2]	count=6
function	item [function] ||| [function] primary	count=1
function	is not distinct ||| isnot distinct	count=2
class	result column information ||| result	count=1
function_arg	the insert [arg_2] ||| [arg_2] [function_1]	count=2
function	expression for this columnproperty ||| expression	count=1
arg	[arg_1] attribute ||| [arg_1] [arg_2]	count=2
class	of keys ||| instance	count=1
function	mock at the ||| mock	count=1
function	the object allowing user-defined ||| memoized	count=1
function	initialize a ||| init state	count=1
function	kwargs ||| cls kwargs	count=1
arg	target ||| target identifier	count=1
function	the identity key ||| identity key	count=2
function	< ||| lt	count=1
class	two ||| session	count=1
function	cte is located ||| init cte state	count=1
function	cursor generated from ||| cursor	count=1
function_arg	with [arg_2] ||| [function_1] [arg_2]	count=4
module	[module] compiledsql is ||| [module]	count=1
module	construct a ||| ext	count=1
class	make ||| base	count=1
function	with no parameters ||| no params	count=1
class	a compiled that ||| compiled	count=1
function	a logger for ||| instance logger	count=1
arg	of [arg] ||| [arg]	count=3
module	called once ||| core	count=1
arg	visit the given ||| obj visitors	count=1
function	a plain percent '%' ||| percent	count=1
function	self-referential foreign [function_2] ||| [function_2] [function_1]	count=1
function	the given expression ||| cloned traverse	count=1
class	[class_1] [class_2] compares to ||| [class_1] [class_2] compare name for	count=4
arg	a cursor ||| cursor statement context	count=1
function	primary key values for ||| primary key from	count=1
function	a primary key violation ||| duplicate key	count=1
class	[class_1] context for ||| [class_2] [class_1]	count=2
function	mapper dependencyprocessor to true ||| mapper	count=1
function_arg	[function_1] :class sessiontransaction ||| [function_1] [arg_2]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] [arg_2]	count=1156
class	:term ||| values	count=1
function	apply listeners to ||| listeners	count=1
function	dialect-specific literal [function_2] ||| [function_1] [function_2]	count=1
class	fetch many rows ||| result	count=1
function	'inherits' for this ||| concrete base	count=1
class	selectable embedded as ||| select	count=1
class	associated ||| mapper	count=1
function	using the given ||| using	count=1
module	to [module] statement ||| [module]	count=1
class	for two phase commit ||| session	count=1
function	refreshed ||| refresh	count=2
function	literal clause bound ||| literal	count=1
function	expression in the insert ||| insert	count=1
arg	attributes have been ||| target context attrs	count=2
function	>= ||| ge	count=1
function	initialize the ||| compile	count=1
function	of the classes it [function_1] [function_2] otherwise return false ||| [function_1] [function_2]	count=2
function	the object allowing user-defined ||| memoized attr	count=1
function_arg	[function_1] :class ||| [function_1] [arg_2]	count=2
module	true if this ||| sql	count=3
module_class	from this [class_2] ||| [module_1] [class_2]	count=2
function	variety of mysql ||| skip mysql	count=1
function	cte ||| cte state	count=1
class	foreign [class_2] ||| [class_1] [class_2]	count=1
function	function with a ||| with warning	count=1
function	return a ||| get table	count=1
function	apply ad-hoc instrumentation ||| attributes	count=1
function_arg	[function_1] [arg_2] the ||| [function_1] cursor [arg_2]	count=1
class	server-side ||| values base	count=2
function	given expression delivering ||| visit binary product	count=1
function_arg	[function_1] value ||| [function_1] [arg_2]	count=8
class	current ||| inspector	count=2
module	if [module] element were ||| [module]	count=1
class	[class_1] element ||| [class_2] [class_1]	count=4
function	the given partial ordering ||| partial ordering	count=1
arg	persistence of the object ||| flush_context attrs	count=1
function	the == ||| eq	count=1
class	set of keys ||| state	count=1
class	:class query represented by ||| query	count=1
function	the class attribute ||| class	count=1
function	a ||| declarative	count=1
arg	table definitions from ||| schema views only	count=1
arg	transition for ||| session instance	count=1
function	limit/offset is ||| w limit	count=1
function	return the 'constructor' ||| constructor	count=1
function	be associated with this ||| attr	count=1
arg	a connection ||| connection	count=6
class	compiled that is capable ||| compiled	count=1
arg	decorate a method ||| fn	count=1
function	instance before [function_2] ||| [function_2] [function_1]	count=1
function	literal parameter ||| literal param	count=2
class	[class] more ||| [class]	count=1
module_class	this :class textclause ||| sql text	count=2
function	enabled [function_2] ||| [function_1] [function_2]	count=1
arg	intercept ||| conn cursor statement parameters	count=1
module	named ||| orm	count=1
function	methods in ||| and methods	count=1
function	[function_1] identity map ||| [function_2] [function_1]	count=3
function	ensure ||| required roles	count=2
function	use [function_1] [function_2] ||| mod operator [function_2] [function_1]	count=2
function	clone ||| cloned	count=1
function	explicitly ||| select	count=1
function	where clause to the ||| where	count=1
arg	"lazy load" query ||| effective_path	count=1
function	receive a bound parameter ||| bind param	count=1
function_arg	[function_1] and ||| [arg_2] [function_1]	count=1
module_class	[module_1] uowtransaction ||| [module_1] [class_2]	count=2
function	[function_1] named savepoint ||| [function_2] [function_1]	count=1
function	view names ||| view names	count=4
function	raises [function_2] ||| [function_1] [function_2]	count=3
module_class	fetch the first row [module_1] [class_2] unconditionally ||| [module_1] [class_2] first	count=3
function	decode a [function_2] ||| [function_1] [function_2]	count=1
function_arg	primary keys [arg_2] ||| [function_1] [arg_2]	count=1
class	~ ||| operators	count=2
function_arg	execute after [arg_2] ||| [arg_2] [function_1]	count=2
function	statements ||| statements	count=3
module	a ||| sql	count=3
arg	foreign_keys in table_name ||| table_name	count=1
function	a setter method ||| setter	count=1
function	temporary views ||| temporary views	count=2
module	called when a ||| core	count=3
module	list firebird ||| firebird	count=1
function_arg	[function_1] level 'level'? ||| [arg_2] [function_1]	count=2
function	values to use in ||| collect	count=1
function	pending actions for ||| actions	count=1
function	the given table names ||| drop names	count=1
arg	a given schema ||| connection schema	count=1
function_arg	create a [arg_2] ||| [arg_2] [function_1]	count=1
arg	clone the ||| opts	count=1
function	raises integrityerror when ||| raises integrity error	count=2
class	object into ||| load	count=1
function	a do [function_2] ||| [function_2] [function_1]	count=2
arg	metadata ||| reflect schema	count=1
module_class	this :class bindparameter ||| sql bind parameter	count=1
module	table objects for all ||| ext	count=1
arg	function to a ||| fn	count=1
module	iterators ||| util	count=1
arg	been ||| target	count=2
function	keys which ||| keys	count=1
arg	given instance ||| instance include_collections	count=1
module_class	this columnelement ||| sql column element	count=1
arg	mapper to the ||| mapper	count=1
class	this option may not ||| option	count=1
module_class	mysql time type ||| mysql time	count=1
function	[function_1] in that ||| [function_2] [function_1]	count=1
function	add a statement ||| with statement	count=3
module_class	of [module_1] [class_2] the given selectable ||| [module_1] [class_2]	count=3
class	object ||| mapper property	count=2
arg	the given function ||| fn expr	count=1
function	"bind" to ||| get	count=1
function	the table ||| table	count=3
function	the string name of ||| name	count=1
arg	subclass to test for ||| class_ factory	count=1
module	given expression structure allowing ||| sql	count=1
function	the >= ||| ge	count=1
function	[function_1] elements such ||| surface [function_1] [function_2]	count=1
class	progress ||| session	count=2
function	ms-sql puts ||| select precolumns	count=1
module	called for ||| core	count=1
module_class	and then [class_2] ||| [module_1] [class_2]	count=5
function	primary [function_2] ||| [function_2] [function_1]	count=2
module_class	[module_1] functionelement ||| [module_1] [class_2]	count=2
function_arg	relates the [arg_2] ||| [function_1] [arg_2]	count=3
function	offset/limit is specifically ||| wo	count=1
module_class	[module_1] datetime ||| [class_2] [module_1]	count=1
class	of all :class ||| mapper	count=3
class	associated ||| mapper property	count=2
module	inter-mapper relationships ||| orm	count=1
arg	given schema entity ||| entity	count=2
class	context for a ||| context	count=1
class	[class] applying ||| [class]	count=1
function	of null ||| fetch null from	count=1
function	of mapper ||| mapper	count=1
class	columnelement to ||| column element	count=1
class	expressions and ||| base	count=1
class	keys which ||| state	count=1
function	implementation ||| do execute	count=2
function	[function_1] and return ||| [function_2] [function_1]	count=3
class	to be ||| mapper property	count=1
function	to the mapped class ||| class	count=1
function	group by criterion applied ||| group by	count=2
function	self-referential foreign [function_2] ||| [function_1] [function_2]	count=1
function	server version info from ||| get server version info	count=1
function	the set ||| set	count=1
function_arg	[function_1] composite-capable ||| [function_1] [arg_2]	count=1
function	[function_1] all :class ||| [function_2] [function_1]	count=2
function	to an engine ||| to	count=1
function	sort a collection ||| sort	count=2
class	called when ||| events	count=1
module	produce a ||| sql	count=2
arg	return a [arg_2] ||| [arg_2] [arg_1]	count=3
function	representation of python ||| date historic	count=1
function_arg	[function_1] for connection ||| [arg_2] [function_1]	count=2
function	filtering [function] ||| filter [function]	count=3
function	threading and [function] same time ||| threading with [function]	count=1
function	return a namespace of ||| attrs	count=1
function	the in ||| in	count=1
function	columns exported ||| columns	count=1
class	double ||| double	count=1
class	transaction ||| session	count=2
function	been refreshed within the ||| refresh	count=1
function	temporary view names for ||| temp view names	count=1
arg	the given query ||| query	count=1
arg	table and return ||| table	count=1
arg	this class ||| cls	count=2
arg	a value [arg_2] ||| [arg_2] [arg_1]	count=2
function	create a union ||| union	count=1
function	limit to the ||| limit	count=1
class	use of a :term ||| values	count=1
class	merge ||| meta data	count=1
function	use in update ||| post update	count=1
function	item [function] ||| identity [function] primary	count=1
function	associate this wrapper ||| associate	count=1
module_class	a [module_1] [class_2] ||| [module_1] [class_2]	count=4
function	cursor [function_1] [function_2] ||| [function_2] [function_1]	count=3
class	_connectionrecord ||| connection fairy	count=1
class	composite to ||| composite	count=1
arg	table description ||| table	count=1
function	criterion to a copy ||| by	count=1
function	allowing user-defined data ||| attr	count=1
function	the decimal ||| decimal	count=1
class	have a ||| instance	count=1
function	that [function_2] ||| [function_2] [function_1]	count=1
function	a follower ||| follower	count=2
module	two ||| orm	count=1
function	a new :class ||| init	count=3
arg	schema ||| table_name schema	count=1
function	insert of ||| insert mappings	count=1
module_class	fetch the [module_1] [class_2] ||| [module_1] [class_2]	count=12
function_arg	[function_1] [arg_2] messaging on failure ||| [function_1] [arg_2]	count=1
function	load the ||| load on ident	count=1
arg	is ||| mapper clause	count=1
arg	and ||| dict_	count=1
arg	compiled regex and ||| regex cleanup	count=1
function	[function_1] names for ||| engine dialect [function_1] [function_2]	count=2
module_class	[module_1] method ||| [module_1] [class_2]	count=4
function	ad-hoc instrumentation from decorators ||| attributes	count=1
function	types [function_2] ||| [function_2] [function_1]	count=2
class	the purpose of ||| base	count=1
class	clauseelement ||| element	count=1
function	update [function_2] ||| [function_2] [function_1]	count=8
function	identity key for the ||| identity key	count=1
function	mapper ||| mapper	count=2
class	:class bindparameter to ||| bind parameter	count=2
class	with this ||| property	count=1
arg	session ||| session	count=2
module	versions of [module] column as ||| [module]	count=1
class	receive a collection ||| attribute extension	count=1
class	a :term returning clause ||| base	count=1
function	specifies a do ||| do	count=2
arg	for ||| compiler	count=1
class	add values for ||| query	count=1
module	transaction in progress ||| orm	count=2
class	[class_1] key ||| [class_1] [class_2]	count=1
function_arg	inserted [arg_2] ||| [arg_2] [function_1]	count=3
function_arg	logger for [arg_2] ||| [function_1] [arg_2]	count=2
arg	equality ||| x y	count=1
class	which ||| state	count=1
function_arg	flatten the [arg_2] ||| [function_1] iterator [arg_2]	count=1
class	an integer ||| integer	count=1
arg	fragment ||| fragment	count=1
class	selectable embedded as a ||| select	count=1
function_arg	construct [arg_2] ||| [function_1] engine connection close_with_result [arg_2]	count=1
class	clause representing ||| clause	count=1
function_arg	[function_1] transaction ||| [function_1] begin session [arg_2]	count=1
function	return the ||| get	count=8
function	sequence in ||| has sequence	count=1
function	[function] of ||| [function]	count=15
function	a namespace of all ||| column attrs	count=1
class	pool ||| pool	count=8
function	puts top it's version ||| get select precolumns	count=1
class	the given column ||| column	count=1
function	many ||| precision numerics many	count=1
function_arg	rollback a [arg_2] ||| [arg_2] [function_1]	count=4
class	set to instance ||| set	count=1
module_class	which this fromclause ||| sql from clause	count=1
function	list of elements and ||| copy and	count=1
function	[function_1] binops ||| [function_2] [function_1]	count=1
class	receive an object instance ||| extension	count=4
module	the class [module_2] ||| [module_1] [module_2]	count=2
module_class	[module_1] relationship ||| [module_1] [class_2]	count=2
function	implement the < ||| lt	count=1
function_arg	[function_1] given annotations ||| [function_1] element [arg_2]	count=1
function	all table names ||| table names	count=1
arg	collectionadapter associated with ||| dict_ user_data passive	count=1
class	issue a ||| index	count=2
class	test that ||| property	count=1
function	an iterator ||| iterate properties	count=2
function	a cte is ||| cte state	count=1
class	do not have ||| state	count=1
class	a config as ||| config	count=1
module_class	this selectable ||| sql generative select	count=2
module	of fetching server-side expressions ||| sql	count=1
function	ddl ||| ddl	count=2
module	for a ||| dialects oracle	count=1
function	append the given group ||| append group	count=1
function	of columns exported ||| columns	count=1
arg	high level ||| clauseelement multiparams	count=1
function	implements the ||| implements get	count=1
function	create a [function_2] ||| [function_2] [function_1]	count=6
function	numeric value that has ||| from numeric	count=1
function_arg	a criteria [arg_2] ||| [arg_2] [function_1]	count=6
function	on ||| on	count=6
arg	of mapping dictionaries ||| mappings return_defaults	count=1
function	~ ||| invert	count=1
class	produce a :func ~ ||| column operators	count=2
function	a join to ||| join left to	count=1
function	limit/offset ||| w	count=1
class	have ||| instance	count=1
function	to be associated ||| memoized	count=1
class	:class ~sqlalchemy engine interfaces ||| engine	count=1
function	not like ||| notlike	count=1
class	a cloning traversal ||| cloning visitor	count=1
class	data to be ||| mapper property	count=1
function_arg	[function_1] fragment with ||| [function_1] a [arg_2]	count=1
function	expire all ||| expire instance	count=1
function	locate binary criterion ||| criterion	count=1
function	columnclause ||| literal column	count=2
function_arg	returning clause [arg_2] ||| [function_1] [arg_2]	count=2
class	make use ||| base	count=1
function	[function_1] on ||| [function_1] [function_2]	count=11
arg	like ||| escape	count=1
function	for update clause for ||| for update	count=1
function_arg	[function_1] given connection ||| [arg_2] [function_1]	count=7
arg	iterator ||| iterator obj	count=1
function	using ||| using	count=1
function_arg	execute [arg_2] ||| [arg_2] [function_1]	count=1
function	prepare a two phase ||| do prepare twophase	count=1
class	of keys ||| state	count=1
class	and ||| base	count=1
class	a ||| mapper	count=3
function	a jdbc url from ||| jdbc	count=1
function_arg	[function_1] event ||| [arg_2] [function_1]	count=8
arg	attributes on [arg_2] ||| [arg_2] [arg_1]	count=2
class	have ||| instance state	count=1
function_arg	in not [arg_2] ||| [arg_2] [function_1]	count=5
arg	a db-api module ||| module	count=1
function	identity map ||| get from identity	count=1
function	fetchone() to proceed after ||| fetch rows post commit	count=1
function	return a :class ||| init	count=1
class	allowing user-defined ||| mapper property	count=1
module	allowing modifications ||| sql	count=1
function	polymorphic mapper ||| polymorphic	count=1
arg	connection results ||| connection	count=2
function_arg	[function_1] pickletype ||| [function_1] [arg_2]	count=1
function	any list-like class ||| list decorators	count=1
module_class	[module_1] sequence from ||| [module_1] [class_2]	count=2
class	when the :meth ||| connection events	count=1
function	iterate through instances ||| iterator	count=1
function	object ||| memoized attr	count=1
class	not ||| instance	count=1
class	exists ||| exists	count=1
function	return information ||| get foreign	count=1
function	before a ||| before	count=1
function	refreshed within the ||| refresh flush	count=1
function	a datetime object as ||| datetime	count=1
function	implement the == ||| eq	count=1
module	integer ||| dialects mysql	count=1
function_arg	oid [arg_2] ||| [function_1] [arg_2]	count=1
function	rendered into [function] ||| inner [function]	count=3
arg	instance to a child ||| instance	count=1
function	emit insert ||| emit insert	count=2
module_class	bind this metadata ||| sql meta data	count=1
function	is [function] integer ||| [function] int	count=2
function	temporary view [function_2] ||| [function_1] [function_2]	count=7
function	schema name presented by ||| schema name	count=1
arg	modifications by ||| obj	count=1
arg	left ||| left	count=1
function_arg	[function_1] iterator of ||| [arg_2] [function_1]	count=5
function	sort a collection of ||| sort	count=2
class	[class] without blocking ||| [class]	count=3
function	closed ||| close	count=2
class	a fromclause ||| from clause	count=1
arg	the given cls ||| cls	count=1
arg	and schema name ||| name	count=1
function	execute ||| execute no params	count=1
function_arg	[function_1] new connection ||| [arg_2] [function_1]	count=1
function	first row ||| scalar	count=1
class	[class_1] joined by ||| [class_2] [class_1]	count=2
function	about indexes ||| indexes	count=1
function	criterion to ||| by	count=1
function	return information about foreign_keys ||| get foreign	count=1
function	prepare a two ||| prepare	count=1
function	check the [function_2] ||| [function_2] [function_1]	count=5
arg	a specific 'autoflush' setting ||| setting	count=1
function	emit insert [function_2] ||| [function_2] [function_1]	count=3
module	that allows ||| ext declarative	count=1
module	modifications ||| sql	count=1
class	columndefault ||| column default	count=1
function	should be used given ||| classname for table	count=1
arg	the given expression ||| obj	count=1
module_class	to [module_1] [class_2] ||| [module_1] [class_2] append	count=1
function	namespace ||| attrs	count=1
module	which do ||| orm	count=1
function	particular entity only the ||| load only	count=1
function	given table names to ||| names	count=1
function	yield only ||| yield per	count=1
function	string name of the ||| name	count=2
function_arg	have been [function_1] [arg_2] ||| finalize [function_1] [arg_2]	count=3
function_arg	[function_1] instance ||| orm make [function_1] to detached [arg_2]	count=1
function	is not ||| isnot	count=2
function	execute after any ||| after soft	count=1
function	intersect all of ||| intersect all	count=2
arg	the given instance to ||| instance	count=1
function	append a ddl ||| append ddl	count=6
arg	compiled regex and callable ||| regex	count=1
function	primary key values ||| primary key from	count=1
arg	an ||| cls	count=6
arg	is present ||| instance	count=1
function	all ||| create all	count=1
class	of a ||| values base	count=1
arg	including calling after_insert/after_update ||| uowtransaction	count=1
function_arg	[function_1] item ||| [arg_2] [function_1]	count=1
function	puts top it's ||| precolumns	count=1
arg	list of mapping dictionaries ||| mapper mappings return_defaults render_nulls	count=1
arg	state of this attribute ||| attribute	count=1
function	name in that ||| name in	count=2
function	descending order by clause ||| desc	count=1
class	object allowing user-defined data ||| mapper	count=1
function_arg	table objects within ||| tables clause	count=1
function	expression in the insert ||| append param insert	count=1
arg	the results of sql ||| results	count=1
class	referenced by ||| foreign key	count=1
function	added ||| new	count=1
class	newly returned delete construct ||| delete	count=1
function	insert ||| insert mappings	count=2
function	construct a :class ||| init	count=2
function	instance's [function_2] ||| [function_1] [function_2]	count=1
function	a statement ||| statement	count=1
function	force the ||| force drop	count=1
module	transaction ||| orm	count=2
module	smallinteger ||| dialects mysql	count=1
function	returning ||| return	count=1
class	the property ||| property	count=1
function	associated with this ||| memoized	count=1
function	return an iterator ||| iterate properties	count=2
class	compiled that is ||| compiled	count=1
class	compiled ||| compiled	count=1
arg	a subclass ||| class_ factory	count=1
module	given expression to this ||| sql	count=1
class	set ||| object attribute impl	count=1
function	cte ||| init cte state	count=1
function	[function_1] on ||| [function_2] [function_1]	count=11
class	see if this option ||| mapper option	count=1
module_class	[module_1] time type ||| [module_1] [class_2]	count=3
function	return an [function_2] ||| [function_2] [function_1]	count=8
function	the :class session to ||| session	count=1
module_class	an attribute ||| orm attribute impl	count=1
class	compiled result column information ||| result meta data	count=1
module	initialize ||| orm	count=1
class	newly resulting query ||| query	count=2
arg	object corresponding to this ||| mapper	count=1
function	detached" ||| detached	count=1
module_class	[module_1] [class_2] has been created via ||| [module_1] [class_2]	count=2
function	for _sa_instrument_role-decorated methods in ||| and methods	count=1
module_class	:class select ||| sql select	count=1
function	the 'key' ||| key	count=1
module	from kwargs ||| ext declarative	count=1
function	processing function for the ||| bind processor	count=1
arg	is made ||| dialect conn_rec cargs cparams	count=1
function	serialize a ||| serialize	count=1
function	is either present directly ||| immediate cls attr	count=1
class	with compiled result ||| result	count=1
module	objects which this ||| sql	count=1
module	two :class ||| sql	count=1
module	this ||| sql	count=82
class	and its mapper in ||| mapper	count=1
arg	modifications by ||| obj opts	count=1
function	expression ||| expression	count=1
module	that allows initialization ||| declarative	count=1
function	was deleted within ||| was deleted	count=2
function	integrityerror when reporting an ||| integrity error	count=1
function	expression structure allowing ||| traverse	count=1
function_arg	names for [arg_2] ||| [arg_2] [function_1]	count=1
function	the given class ||| class	count=1
function_arg	create [arg_2] ||| [arg_2] [function_1]	count=1
arg	statement ||| statement parameters	count=1
function	apply listeners to ||| backref listeners	count=1
arg	schema ||| schema include	count=1
arg	indicate that the ||| loadopt attr	count=1
function	an object instance before ||| before	count=1
function	of table names ||| table names	count=1
function	detect ||| detect	count=2
module_class	this :class select ||| sql select	count=1
function_arg	at arbitrary [arg_2] ||| [arg_2] [function_1]	count=1
function	data ||| memoized	count=1
arg	an ||| context	count=1
function_arg	[function_1] types ||| [function_1] [arg_2]	count=1
function	<= ||| le	count=1
arg	_decl_class_registry associated with ||| classname	count=1
class	annotate ||| join condition	count=1
module	values for ||| orm	count=1
function	information about the table ||| table	count=1
module	return true if this ||| engine	count=2
function	perform a bulk insert ||| bulk insert	count=1
module	transaction on this ||| orm	count=1
class	joined by ||| clause list	count=2
function	unordered sequence of ||| class hierarchy	count=1
function	of connection [function_2] ||| [function_2] [function_1]	count=1
module_class	to this metadata ||| sql meta data	count=1
function	inserted ||| insert update	count=1
module	use of a :term ||| sql	count=1
function	the columns clause ||| columns	count=1
class	threadlocalmetadata ||| thread local meta data	count=1
class	this attribute with ||| attribute	count=1
function	[function_1] foreign table ||| [function_2] [function_1]	count=1
function	in the insert ||| param insert	count=1
arg	function for ||| fn	count=1
module	which may have ||| orm	count=1
module	produce a [module] connection ||| [module]	count=1
class	:func ~ expression ||| column	count=2
function	numeric ||| numeric	count=1
function_arg	that relates [arg_2] ||| [function_1] [arg_2]	count=2
function	do [function_2] ||| [function_1] [function_2]	count=2
arg	return a callable ||| dialect callable_	count=1
module	produce a :func ~ ||| sql	count=2
function	adapt a :class poollistener ||| adapt listener	count=1
function	the python descriptor ||| descriptor	count=1
function_arg	logger [arg_2] ||| [function_1] [arg_2]	count=2
class	new [class] applying the ||| [class]	count=1
arg	cursor to ||| cursor statement context	count=1
function	of mysql on ||| skip mysql on	count=2
function	of foreign table ||| foreign table	count=2
arg	of this class ||| cls index value	count=1
function	view [function_2] ||| [function_2] [function_1]	count=11
function	a simple constructor ||| constructor	count=1
function	foreignkey ||| foreign keys	count=1
arg	state of this attribute ||| cls attribute	count=1
arg	that instance ||| connection instance	count=2
function	the [function_1] [function_2] ||| [function_2] [function_1]	count=6
module	been specified in ||| orm	count=1
module_class	[module_1] join ||| [module_1] [class_2]	count=10
arg	produce an alias of ||| alias	count=1
function	a collection 'bulk replace' ||| bulk replace	count=1
class	this attribute ||| attribute	count=1
arg	the given annotations ||| annotations	count=1
function	methods in [function_2] ||| orm [function_2] roles [function_1]	count=1
function	only outer-exposed [function] ||| surface [function]	count=3
module	purpose of fetching ||| sql	count=1
module	one ||| orm	count=1
function_arg	[function_1] [arg_2] ||| [function_1] state dict_ [arg_2]	count=4
function	integers starting at arbitrary ||| n factory	count=1
module	been specified ||| orm	count=1
function	return the ||| get func	count=1
arg	like ||| other escape	count=1
class	:class query ||| query	count=8
arg	intercept a ||| conn cursor	count=1
function	create [function_2] ||| [function_1] [function_2]	count=5
function	is bound ||| is bound	count=2
arg	sets of ||| states_to_update	count=1
module	that should be ||| ext	count=1
module_class	with this [class_2] ||| [module_1] [class_2]	count=6
function	the "persistent [function_2] ||| [function_2] [function_1]	count=2
arg	the given state ||| state	count=2
module	expression structure allowing ||| sql	count=1
function	dialect implements ||| implements get	count=1
arg	value of ||| value	count=2
module_class	and [class_2] ||| [module_1] [class_2]	count=4
class	for ||| query	count=1
function	after [function_2] ||| [function_1] [function_2]	count=2
class	which may have been ||| query	count=1
arg	[arg_1] [arg_2] repr messaging on failure ||| a [arg_1] [arg_2]	count=4
class	return ||| instance state	count=1
function	with a warnings ||| with	count=1
function	allowing ||| cloned	count=1
arg	a callable that will ||| dialect callable_	count=1
function	instance before a delete ||| before delete	count=1
arg	existence of a particular ||| connection sequence_name schema	count=1
function	'key' ||| key	count=1
function	[function_1] constraints in ||| [function_1] [function_2]	count=8
function	[function_1] datetime ||| [function_2] [function_1]	count=4
arg	keying provided by keyfunc ||| keyfunc	count=1
function	string name of ||| name	count=2
arg	held by ||| e soft	count=1
class	returned ||| query	count=1
function_arg	[function_1] state from ||| [function_1] [arg_2]	count=1
arg	cursor to ||| cursor	count=3
function	types from a ||| colnames from	count=2
function	structure using the ||| traverse using	count=2
arg	the given expression structure ||| obj opts	count=1
arg	given instance to a ||| instance property	count=1
function	[function_1] views ||| [function_1] [function_2]	count=1
function	offset using a ||| offset	count=1
function	the insert ||| append param insert	count=1
class	a :func ~ expression ||| operators	count=2
function	[function_1] conflict ||| [function_2] [function_1]	count=4
module	may have been ||| orm	count=1
class	the cache into baked ||| baked	count=1
function	use [function] an ||| [function] crud	count=1
function	update of the ||| update mappings	count=1
function	sqlalchemy database dialect class ||| dialect	count=1
function	setup [function_2] ||| [function_1] [function_2]	count=1
function	to have [function_2] ||| [function_1] [function_2]	count=4
module_class	:class [class_2] ||| [module_1] [class_2] init name start increment	count=1
class	by ||| row proxy	count=1
function	a simple constructor ||| declarative constructor	count=1
class	not have a ||| instance state	count=1
function	dictionary of properties ||| properties	count=1
function	ddlelement construct ||| init ddl	count=2
function	only if a cte ||| init cte	count=1
function	value of null ||| fetch null	count=1
function	been called and raised ||| init failed	count=1
function	function with a warnings ||| with warning	count=1
class	should only be used ||| generative select	count=1
arg	all future mapped columns ||| cls sqltype	count=1
module	for ||| ext	count=1
arg	[arg] position is ||| [arg]	count=2
arg	roles ||| roles methods	count=1
class	do not ||| state	count=1
function	append a ||| append	count=2
arg	given key in ||| key	count=1
function	representation of python ||| date	count=1
arg	return ||| engine	count=1
class	order by [class_2] ||| [class_2] [class_1]	count=1
function	null ||| fetch null	count=1
class	textclause [class] ||| text [class]	count=1
function	where clause to ||| where	count=1
function	nullslast clause against the ||| nullslast	count=1
module	for [module] mapepd ||| [module]	count=1
arg	alias of ||| alias name flat	count=1
function_arg	return a [function_1] [arg_2] ||| engine dialect get [function_1] [arg_2]	count=1
function_arg	comment [arg_2] ||| [function_1] [arg_2]	count=1
function	instance and 'commit' it ||| committed	count=2
arg	object corresponding to ||| mapper clause	count=1
function	runner' for ||| for	count=1
module	expression to this ||| sql	count=1
arg	given function ||| fn expr	count=1
module	test ||| testing suite	count=1
class	of keys ||| instance state	count=1
class	with compiled result ||| result meta	count=1
module_class	[module_1] type which ||| [module_1] [class_2]	count=2
arg	the where clause of ||| clause	count=1
function	[function_1] a ddl ||| [function_2] [function_1]	count=2
class	this :class session ||| session	count=1
function	use in ||| collect	count=2
function	information about primary keys ||| primary keys	count=1
arg	persistence of ||| flush_context	count=1
arg	if not found ||| ident	count=1
arg	an :class ||| cls	count=1
arg	visitors ||| visitors	count=1
function	[function_1] execute() ||| [function_2] [function_1]	count=4
class	if the [class] condition contains ||| [class]	count=1
function	cte is ||| init cte	count=1
module	of [module] column ||| [module]	count=1
arg	an expression and ||| expression consider_as_foreign_keys	count=1
arg	more attributes have been ||| target context attrs	count=1
arg	and b ||| a b	count=1
function	a ddlelement construct ||| init ddl	count=2
module	[module] ~ ||| [module]	count=1
arg	schema name ||| name	count=1
function	dialect-specific literal ||| cached literal	count=2
function	[function_1] key for ||| [function_1] [function_2]	count=3
arg	value on ||| value	count=3
class	produce ||| operators	count=2
function	mapping of mapper dependencyprocessor ||| mapper	count=1
class	fromclause references ||| from clause	count=1
function	limit/offset is specifically present ||| w	count=1
module	do not have ||| orm	count=1
arg	[arg_1] of an ||| [arg_2] key [arg_1]	count=1
function	float [function_2] ||| [function_2] [function_1]	count=1
class	list of string ||| key	count=1
class	query applies ||| query	count=1
module	return a namespace of ||| orm	count=1
class	:term returning clause ||| base	count=1
function	allowing modifications ||| cloned	count=1
function	a ddlelement [function_2] ||| [function_2] [function_1]	count=2
function	emit insert statements ||| emit insert statements	count=3
function	primary key expression in ||| pk	count=1
function	base ||| base	count=1
function_arg	types from [arg_2] ||| [function_1] description [arg_2]	count=1
function	dependencyprocessor ||| for dep	count=1
module	class name that ||| ext	count=1
function	[function_1] processing functions ||| [function_1] [function_2]	count=2
function	cte is located to ||| init cte state	count=1
function	return a namespace of ||| column attrs	count=1
function_arg	oid [arg_2] ||| [function_1] connection table_name [arg_2]	count=1
function	'endswith' ||| endswith	count=1
arg	run ||| charset full_name	count=2
function	structure allowing modifications ||| cloned traverse	count=1
function	update ||| update	count=11
function	create a new :class ||| init	count=2
module	the purpose ||| sql	count=1
function	is an instance ||| is	count=1
function	column labels to the ||| with labels	count=1
function	particular property should ||| should	count=1
arg	persistence of the object ||| target flush_context	count=1
class	data ||| mapper property	count=2
function	implement the > ||| gt	count=1
function	the given group ||| group	count=1
class	many rows ||| result	count=1
function	append a join ||| join left	count=1
function	suffix [function] ||| suffix [function]	count=3
arg	of a table ||| base tablename table	count=1
function	the decimal ||| decimal char	count=1
function	[function_1] small values ||| [function_1] [function_2]	count=3
function	view similarly ||| view column reflection	count=2
function	:class session [function_2] ||| [function_2] [function_1]	count=2
class	a new [class] ||| [class]	count=4
function	logger ||| logger	count=1
class	to be associated ||| mapper property	count=1
class	the :class ~sqlalchemy engine ||| engine	count=1
arg	have been ||| target attrs	count=2
function	[function_1] will provide ||| [function_2] [function_1]	count=1
module	on this ||| orm	count=1
class	:class query object ||| query	count=1
module	an object with this ||| orm	count=1
arg	name ||| name quote	count=1
module	[module] but ||| [module]	count=2
arg	[arg_1] state ||| [arg_2] [arg_1]	count=4
function_arg	schema from [arg_2] ||| [function_1] name [arg_2]	count=1
class	set ||| instance	count=1
function_arg	[function_1] including calling ||| [function_1] [arg_2]	count=2
function	expression structure allowing modifications ||| traverse	count=1
class	[class_1] context for ||| [class_1] [class_2]	count=2
function	[function] mapped ||| [function] inherited	count=2
function	a string describing ||| instance str	count=1
class	execute ||| execution context	count=1
function_arg	[function_1] [arg_2] ||| orm [function_1] committed value [arg_2]	count=3
function	type from ||| type	count=1
class	[class] the ||| [class]	count=2
class	events ||| connection proxy	count=3
class	~ expression ||| column	count=2
function	after [function] has completed ||| after [function]	count=1
arg	where clause of a ||| clause	count=1
module	serialize ||| dialects postgresql	count=1
function	update clause ||| update	count=1
class	attribute with an empty ||| attribute	count=1
function	retrieved from ||| checkout	count=1
class	underlying logger ||| logger	count=5
class	current bind ||| inspector	count=2
function	compare two values for ||| compare values	count=1
function	call ||| call	count=1
function	rollback ||| do rollback	count=2
function	general class of type ||| type affinity	count=1
module_class	fetch the first row [module_1] [class_2] ||| [module_1] [class_2]	count=16
class	element ||| element	count=1
class	label ||| label	count=1
function	the object ||| memoized attr	count=1
function	return a "bind" to ||| get	count=1
function	annotate ||| annotate	count=2
class	result column information ||| result meta data	count=1
function	load the ||| load on	count=1
function	object for this ||| for	count=1
arg	within the persistence of ||| flush_context attrs	count=1
module_class	[module_1] table ||| [module_1] [class_2] append	count=2
function_arg	the oid [arg_2] ||| [function_1] connection table_name [arg_2]	count=1
arg	identity key from ||| key refresh_state lockmode	count=1
function	a loaded value ||| unloaded	count=1
function	names ||| names	count=7
class	:term returning ||| base	count=1
function	[function_1] key for ||| [function_2] [function_1]	count=3
function	info dictionary associated with ||| memoized attr info	count=1
function	the given expression ||| cloned	count=1
function	associate this ||| associate	count=1
function	use [function_1] [function_2] ||| [function_2] [function_1]	count=2
function	delivering ||| visit binary product	count=1
function	table names ||| names	count=1
arg	value to be ||| value dialect	count=2
class	column to this collection ||| collection	count=1
arg	value ||| dict_ value	count=2
class	been specified ||| query	count=1
function	:class ||| memoized	count=1
function	and install instrumentation ||| instrument	count=1
module_class	[module_1] unaryexpression against ||| [module_1] [class_2]	count=2
arg	a [arg_2] ||| [arg_1] [arg_2]	count=3
function	a union [function] of ||| union [function]	count=1
function	a schema table ||| table	count=1
function	[function_1] nothing ||| [function_2] [function_1]	count=3
arg	persisted database state after ||| table state	count=1
function	function with a ||| with	count=1
arg	given instance ||| instance include_collections passive	count=1
module	special mysql keywords ||| dialects mysql	count=1
function	dialect implements the executioncontext ||| implements get	count=1
arg	identity key ||| key	count=1
function	compiler appropriate for ||| compiler	count=1
class	of ||| state	count=1
function	provide a literal ||| literal	count=1
function	the ||| attr	count=1
class	and data ||| result meta data	count=2
function	append the ||| append	count=4
function_arg	startswith [arg_2] ||| [arg_2] [function_1]	count=5
arg	start ||| start	count=1
function_arg	[function_1] [arg_2] ||| [function_1] dbapi_connection [arg_2]	count=1
function	more group [function] query ||| group [function]	count=1
function	[function_1] [function_2] to ||| orm [function_2] roles [function_1]	count=3
function	with a warnings ||| with warning	count=1
function	added to the c ||| new	count=1
function	[function_1] names ||| engine dialect get [function_1] [function_2]	count=3
function	a ddl ||| ddl	count=2
class	current ||| session	count=2
arg	synchronize a two-way ||| attribute key uselist	count=1
arg	name ||| connection name	count=1
function	first row and close ||| scalar	count=1
function	within a certain ||| with current	count=1
function	table names to be ||| names	count=1
function_arg	[function_1] item ||| [function_1] nowait [arg_2]	count=1
class	pool ||| pool events	count=3
module	of all ||| orm	count=3
function	assert a [function_1] [function_2] ||| [function_2] [function_1]	count=1
class	biginteger ||| bigint	count=1
function	serialize ||| serialize	count=1
function	compare two [function_2] ||| [function_2] [function_1]	count=2
function	to ||| memoized attr	count=1
module	to [module] ||| [module]	count=5
module	have ||| orm	count=2
function	in ||| collect	count=2
function_arg	[function_1] connection ||| [function_1] [arg_2]	count=3
function	[function_1] from clause ||| [function_1] [function_2]	count=2
function	name presented by the ||| name	count=1
function	names for the ||| names	count=2
arg	about foreign_keys in table_name ||| table_name schema	count=1
function	data type from ||| type	count=1
function	recover list ||| recover	count=1
arg	database [arg_2] ||| [arg_2] [arg_1]	count=4
function	[function_1] literal processor ||| [function_1] [function_2]	count=3
function	statement and ||| statement	count=1
function	list of "bound" values ||| bind values	count=1
function	prepare ||| do prepare twophase	count=1
class	return the mapped ||| state	count=1
function	[function_1] primary ||| [function_2] [function_1]	count=1
class	[class] set ||| [class]	count=3
function	"deleted to ||| deleted to	count=1
function	return a [function_2] ||| [function_1] [function_2]	count=25
class	return a namespace ||| mapper	count=1
function	a numeric value that ||| from numeric	count=1
arg	is emitted ||| connection target	count=3
function	the statement and ||| statement	count=1
arg	[arg_1] [arg_2] repr messaging on failure ||| [arg_1] [arg_2]	count=4
function	* ||| mul	count=1
function	identity-map key ||| key	count=1
function	[function_1] delete ||| [function_2] [function_1]	count=10
arg	identity key from the ||| key refresh_state	count=1
arg	generation ||| from_table extra_froms from_hints	count=1
arg	identity key from ||| key	count=1
class	called when the ||| events	count=1
class	[class_1] by ||| [class_2] [class_1]	count=3
function_arg	criteria [arg_2] ||| [function_1] [arg_2]	count=6
function	at 1 ||| from 1	count=1
function	structure ||| traverse	count=2
arg	attribute and return ||| state dict_ key	count=2
function	implements ||| implements get lastrowid	count=1
function	[function_1] transient" ||| [function_1] [function_2]	count=4
function	return an identity-map key ||| key	count=1
function	driver name of ||| driver	count=1
function	python descriptor that will ||| descriptor	count=1
function	emit ||| emit	count=3
function	primary keys ||| primary keys	count=2
function	temporary table ||| temp table	count=4
function	a dbapi connection from ||| connect	count=1
arg	to query ||| query	count=1
module	specific to mssql ||| dialects mssql	count=1
arg	about foreign_keys in table_name ||| table_name	count=1
function	[function_1] partial ||| [function_1] [function_2]	count=1
class	for impl ||| attribute impl	count=2
function	columns clause ||| columns	count=1
class	the ||| instance	count=1
function	convert [function_2] ||| [function_1] [function_2]	count=5
function	definition ||| definition	count=1
function	the ||| memoized attr	count=1
class	bind ||| type engine	count=1
module	including this ||| orm	count=1
function	delete statements corresponding to ||| delete statements	count=1
function	identity-map key for use ||| key	count=1
arg	the given ||| obj	count=1
function	two values ||| values	count=1
function	a listener ||| listen	count=1
function	the id ||| id	count=1
module	compares to [module] when ||| [module]	count=1
module_class	of [module_1] [class_2] against one or more ||| [module_1] [class_2] union	count=1
function	numeric ||| from numeric	count=1
function_arg	[function_1] action for ||| [function_1] [arg_2]	count=4
arg	definitions from ||| schema views only	count=1
arg	overridden by a subclass ||| class_ factory	count=1
function_arg	constraints in table_name ||| constraints table_name schema	count=2
function	loaders to add ||| add	count=1
arg	new ||| _branch_from	count=1
class	:class textclause object ||| text	count=1
function_arg	[function_1] results ||| [arg_2] [function_1]	count=1
module_class	mysql datetime ||| mysql datetime	count=1
arg	an attribute ||| desc key	count=1
arg	structure allowing modifications by ||| obj	count=1
function	columns clause of ||| columns	count=1
class	do not have ||| instance	count=1
function	instance before ||| before	count=1
arg	definitions from the database ||| views only	count=1
function	[function_1] view ||| [function_2] [function_1]	count=10
arg	a value ||| value	count=2
function	remote ||| remote	count=2
function	name in ||| name in	count=2
class	environment must ||| suite requirements	count=1
arg	the given schema entity ||| entity	count=2
module	of fetching server-side ||| sql	count=1
function	as emitting [function_2] ||| [function_1] [function_2]	count=5
function	construct which will correlate ||| correlate	count=1
arg	allowing ||| obj opts	count=1
function	a transaction ||| transaction	count=1
arg	use for connection ||| connection	count=2
module_class	[module_1] query ||| [module_1] [class_2] union	count=2
function_arg	[function_1] [arg_2] ||| [function_1] collection [arg_2]	count=9
module_class	mysql [class_2] ||| [class_2] [module_1]	count=3
function	descriptor attribute return a ||| get	count=1
arg	given instance to ||| instance	count=1
function	a dialect-specific [function_2] ||| [function_2] [function_1]	count=4
function_arg	[function_1] attributes unconditionally ||| [function_1] [arg_2]	count=2
function	a [function] this ||| [function]	count=1
function	to use in update ||| collect post update	count=1
arg	cursor ||| context cursor_description	count=1
function	for the purpose ||| return	count=1
function	of the class attribute ||| class	count=1
function	columndefault construct ||| init default	count=2
function	and [function] ||| [function]	count=3
function_arg	[function_1] fragment with ||| [arg_2] [function_1]	count=1
function	'remote' ||| remote with	count=1
function	dictionary-based ||| attribute mapped	count=1
function	tables have some set ||| with overlap	count=1
class	progress for two ||| session	count=1
function_arg	[function_1] given annotations ||| [arg_2] [function_1]	count=1
function	"reverse" direction ||| reverse remote	count=1
class	that defines ||| property	count=6
arg	a new connection ||| engine connection close_with_result _branch_from	count=1
function	'concat' ||| concat	count=1
class	target driver must raise ||| suite requirements	count=1
function	the values and/or types ||| bindparams	count=1
class	[class_1] [class_2] ||| [class_1] [class_2]	count=70
function	a result ||| result	count=1
function	for any list-like class ||| list decorators	count=1
function	of mysql ||| skip mysql	count=1
function	'remote' in ||| remote	count=1
module	of a ||| sql	count=1
function	foreign [function_2] ||| [function_2] [function_1]	count=8
module	add values for ||| orm	count=1
function	identity map ||| from identity	count=1
function	[function] resulting ||| inner [function]	count=1
arg	decorates a function and ||| version message add_deprecation_to_docstring	count=1
arg	statement ||| context entity path	count=1
module_class	of [module_1] [class_2] against one or more ||| [module_1] [class_2]	count=1
function	allowing ||| attr	count=1
arg	visit the ||| obj visitors	count=1
function	implement the * ||| mul	count=1
function	return the set of ||| get func	count=1
arg	statement referred to ||| crit	count=1
function	with ||| with warning	count=2
arg	a value on the ||| value	count=1
module	a dictionary of ||| dialects	count=1
module	specified in filter() ||| orm	count=1
function	pending actions ||| actions	count=1
function	boolean [function] ||| bool [function]	count=3
class	object instance after ||| instance events	count=1
function	instance's [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] table names ||| [function_1] [function_2]	count=16
arg	callable ||| callable_	count=1
function	delivering column comparisons ||| visit binary product	count=1
function	a join to the ||| join left to	count=1
function	the given cascade ||| cascade iterator	count=2
module	that ||| ext declarative	count=2
function	begin() ||| begin	count=1
function	inspect getargspec ||| getargspec	count=1
function	string name [function_2] ||| [function_2] [function_1]	count=7
class	compiled result column information ||| result meta	count=1
class	textclause object into a ||| text	count=1
function	limit/offset is specifically present ||| w limit	count=1
function	warning [function_2] ||| [function_1] [function_2]	count=4
function	integers starting at arbitrary ||| from n factory	count=1
class	return the set ||| state	count=1
arg	the given alias object ||| alias	count=1
class	[class] record itself ||| [class]	count=1
function	for a ddlelement construct ||| init ddl	count=1
function	a bulk save of ||| bulk save	count=1
function	an update ||| update from	count=1
function	emit [function_2] ||| [function_1] [function_2]	count=8
class	mysql's 64 [class] variable ||| cymysql [class]	count=1
function_arg	oid [arg_2] ||| [arg_2] [function_1]	count=2
arg	select statement ||| select	count=2
function	[function_1] for a ||| [function_1] [function_2]	count=3
function_arg	object [arg_2] ||| [function_1] [arg_2]	count=1
class	code that ||| composite property	count=1
function_arg	[function_1] connection ||| [function_1] name [arg_2]	count=4
function	for a ddlelement ||| ddl	count=1
function	recover list of ||| do recover	count=1
function_arg	unique constraints [arg_2] ||| [function_1] [arg_2]	count=2
class	~ session execute but ||| session	count=1
function	that relates the given ||| with parent	count=1
class	attribute with an ||| attribute impl	count=1
arg	that implements :class identified ||| echoflag	count=1
function_arg	dictionary-based collection [arg_2] ||| [function_1] [arg_2]	count=2
class	extend ||| mstype compiler	count=1
function	insert of the given ||| insert	count=1
function_arg	[function_1] state ||| [function_1] [arg_2]	count=1
class	of all ||| mapper	count=3
function	a function with a ||| with	count=1
class	a type for a ||| type	count=2
function	return ||| get cls	count=1
function	mysql on [function_2] ||| [function_2] [function_1]	count=1
function	run set ||| set	count=1
arg	name ||| name table_name	count=1
function	of postsortrecs as well ||| actions	count=1
module_class	[module_1] datetime type ||| [module_1] [class_2]	count=3
function	[function_1] instrumented by ||| [function_2] [function_1]	count=1
function	configure ||| configure	count=2
module_class	[module_1] columnelement ||| [module_1] [class_2]	count=4
function	kwargs for the ||| cls kwargs	count=1
function	after an insert ||| after insert	count=1
function	commit ||| do commit	count=1
arg	given querycontext ||| context entity path loadopt	count=1
function	conforms ||| conforms	count=1
arg	instance to ||| instance property	count=1
module	by :class ||| orm	count=1
function	name presented by ||| name	count=1
class	execution context for ||| default execution context	count=3
function	names on the given ||| names	count=2
class	make ||| values	count=1
function	set the from clause ||| from	count=1
function	allowing modifications by ||| cloned	count=1
function	clone the given expression ||| cloned traverse	count=1
function	execute after [function] has completed ||| after [function]	count=1
function	information about unique ||| unique	count=2
class	turn them back into [class_1] [class_2] ||| [class_2] [class_1] unbake subquery	count=1
function	minimized set ||| optimized get statement	count=1
function	[function_1] keys ||| [function_2] [function_1]	count=6
function	bulk update of ||| bulk update	count=1
arg	the persistence of ||| flush_context	count=1
arg	with ||| metadata	count=1
arg	an expression and ||| expression consider_as_foreign_keys consider_as_referenced_keys any_operator	count=1
function	named savepoint ||| savepoint	count=1
function	to a flush ||| state flush	count=1
function	of a :term returning ||| return	count=1
class	time type ||| time	count=1
function	the < ||| lt	count=1
class	a new [class] applying the ||| [class]	count=1
arg	definitions ||| schema views only	count=1
function	view [function_2] ||| [function_1] [function_2]	count=11
function	receive a bound ||| bind	count=1
function	execute ||| after	count=2
module	of a [module] compiledsql ||| [module]	count=1
function	unordered sequence of all ||| class hierarchy	count=1
function	join object ||| create join	count=1
arg	the given element ||| element	count=1
function	constant 'anonymous label' ||| anon label	count=1
function	value processing function for ||| bind processor	count=1
function	reflection [function_2] ||| [function_2] [function_1]	count=2
module	keys which do not ||| orm	count=1
function	iterate through instances related ||| cascade iterator	count=1
arg	relationships that meet ||| type_ state halt_on	count=1
function	prepare ||| prepare	count=2
class	synchronize ordering for ||| ordering	count=1
function_arg	connection [arg_2] ||| [function_1] [arg_2]	count=4
function	new dbapi [function] for the ||| [function]	count=1
function_arg	[function_1] annotations dictionary ||| [arg_2] [function_1]	count=1
class	a ||| base	count=1
arg	alias of the ||| alias	count=1
class	user-defined data to ||| mapper property	count=1
module	the object ||| orm	count=1
function	to be ||| memoized	count=1
arg	all available table definitions ||| schema views only	count=1
function	get ||| get	count=1
class	receive an ||| mapper extension	count=4
arg	and visit the ||| obj opts visitors	count=1
class	list of string ||| foreign key constraint	count=1
module_class	of this clauseelement ||| sql clause element	count=1
module	engine and ||| engine	count=1
function	temporary ||| temp	count=4
arg	an :class ||| cls dict_ items	count=1
function	view similarly to ||| view column reflection	count=2
function	update ||| update mappings	count=2
class	[class_1] impl ||| [class_2] [class_1]	count=3
arg	[arg_1] table ||| [arg_2] [arg_1]	count=2
arg	schema entity ||| entity	count=2
function	return ||| get foreign	count=1
function	'bulk replace' ||| bulk replace	count=1
function	[function_1] [function_2] ||| [function_2] [function_1]	count=157
function	"pending ||| pending	count=1
function	[function_1] string name ||| [function_1] default schema [function_2]	count=1
function	with a warnings warn ||| with	count=1
function	initialize the inter-mapper relationships ||| compile	count=1
module	for the ||| sql	count=1
class	[class_1] joined ||| [class_1] [class_2]	count=2
module	compares to [module] ||| [module]	count=1
function	append the given order ||| append order	count=1
function	'validator' for one or ||| validates	count=1
function	numeric value that has ||| numeric	count=1
function	a list of foreign ||| foreign	count=1
function	recover list ||| recover twophase	count=1
arg	given query ||| query	count=1
arg	an expression ||| expression consider_as_foreign_keys	count=1
module	the inter-mapper ||| orm	count=1
function	before a [function_2] ||| [function_2] [function_1]	count=1
function_arg	commit a [arg_2] ||| [function_1] connection [arg_2]	count=2
function	of a traceback ||| traceback	count=1
function	a deprecation ||| deprecated	count=1
class	to be ||| property	count=1
function	expression structure allowing modifications ||| cloned	count=1
function	user-defined data to ||| memoized	count=1
class	make ||| values base	count=2
class	when a ||| pool events	count=1
function	update of ||| update	count=1
class	when the ||| session events	count=1
class	initialize a queue ||| queue	count=1
function_arg	in not [arg_2] ||| [function_1] a [arg_2]	count=2
arg	on the given instance ||| instance	count=2
arg	the mapper ||| mapper	count=1
arg	subclass ||| class_ factory	count=1
class	corresponding ||| mapper	count=1
function	the target columns ||| columns	count=1
module	phase commit ||| orm	count=1
function	arbitrary ||| count from n factory	count=1
function	[function_1] partial ordering ||| [function_2] [function_1]	count=1
arg	a two-way relationship ||| attribute key uselist	count=1
function	expression select construct ||| select	count=1
function	update the ||| update	count=1
class	returning clause ||| base	count=1
function	disable of ||| disable	count=1
function	server-side expressions ||| return	count=1
class	see if this option ||| option	count=1
arg	identity key from ||| query key refresh_state lockmode	count=1
function	a delete ||| delete	count=1
arg	available table definitions from ||| bind schema views only	count=1
function	key columns collected and ||| cols	count=1
arg	[arg_1] [arg_2] ||| [arg_2] annotations [arg_1]	count=3
function_arg	update statement [arg_2] ||| [arg_2] [function_1]	count=1
function	with this ||| attr	count=1
function	of primary key values ||| primary key from	count=1
function	associate this wrapper with ||| associate with	count=1
class	this ||| property	count=1
class	the queue ||| queue	count=2
class	the select ||| scalar select	count=1
module	that ||| ext	count=5
function	group [function] query ||| group [function]	count=1
class	receive an object ||| mapper extension	count=4
function	representation ||| time microseconds	count=1
class	foreign key ||| foreign key constraint	count=2
function	:class dialect that will ||| dialect cls	count=1
arg	alias object ||| alias	count=1
arg	a string to regex ||| regex	count=1
arg	of an attribute ||| instance key	count=2
function	the [function] ||| last [function]	count=2
arg	an alias of the ||| alias name flat	count=1
class	in reverse ||| column	count=5
class	user-defined ||| mapper	count=1
function	a value of null ||| fetch null	count=1
module	testing ||| testing	count=1
function	a value of null ||| fetch null from	count=1
class	with this ||| mapper	count=1
arg	none if not found ||| ident	count=1
function	[function_1] call ||| [function_2] [function_1]	count=1
function_arg	do update [arg_2] ||| [function_1] [arg_2]	count=2
class	oursql ||| oursql	count=1
module	within this :class ||| sql	count=1
function	fetching ||| return	count=1
function	join object given two ||| create join	count=1
function	insert of the ||| insert	count=1
function	of all :class columnproperty ||| column	count=1
class	execution ||| default execution	count=1
class	query statement ||| query	count=1
arg	operation ||| delete_context	count=1
function	return true if the ||| has	count=1
function	construct a new ||| init	count=5
class	exists() construct with ||| exists	count=1
function	return true if ||| has impl	count=1
function	a warning [function_2] ||| [function_2] [function_1]	count=4
function	the table name ||| table name	count=2
class	~ session execute ||| session	count=1
class	a :func ~ ||| column	count=2
class	all ||| manager	count=1
module	statement for ||| dialects	count=2
arg	with ||| metadata schema	count=1
function	temporary tables ||| temporary tables	count=2
function	value for the offset ||| offset	count=1
arg	expression ||| obj opts	count=1
function	two-phase transaction id ||| xid	count=2
class	which ||| instance	count=1
function_arg	[function_1] specific dialects ||| [function_1] [arg_2]	count=2
function	arguments before a connection ||| do connect	count=1
module	and ||| engine	count=2
class	user-defined ||| mapper property	count=2
class	of keys which do ||| state	count=1
function	expression structure allowing ||| cloned traverse	count=1
class	[class_1] [class_2] ||| [class_2] [class_1]	count=44
function	dialect-specific ||| cached	count=2
class	"bound expression" ||| bind parameter	count=1
class	state and ||| instance state	count=1
arg	collection attribute and return ||| state dict_ key	count=1
function	with this :class ||| memoized attr	count=1
module_class	from this metadata ||| sql meta data	count=1
class	and data ||| meta data	count=1
class	:class label ||| label	count=1
function	default [function_2] ||| [function_1] [function_2]	count=7
arg	visit the given ||| opts visitors	count=1
class	column ||| column property	count=1
function	return the set of ||| get	count=1
function	class attribute ||| class	count=1
function	iterate through instances related ||| iterator	count=1
function	a 'validator' for one ||| validates	count=1
function_arg	converts [arg_2] ||| [function_1] [arg_2]	count=3
function	instance and 'commit' it ||| committed value	count=2
function	if [function] ||| detect [function]	count=3
module	an inner ||| orm	count=1
function	the not ilike ||| notilike	count=1
function_arg	rollback [arg_2] ||| [function_1] to savepoint [arg_2]	count=1
arg	table definitions from ||| bind schema views only	count=1
function	[function_1] none ||| [function_1] [function_2]	count=2
class	type which has the ||| type engine	count=1
function	small ||| small	count=1
class	state ||| instance state	count=1
class	a cloning [class_2] ||| [class_1] [class_2]	count=1
class	of fetching server-side expressions ||| base	count=1
class	change events ||| mutable	count=1
function	[function_1] [function_2] ||| engine dialect [function_1] [function_2]	count=2
function	insert of the given ||| insert mappings	count=1
arg	for schema ||| connection schema	count=1
class	initialize execution ||| execution	count=2
arg	transition ||| session	count=1
function	class instrumentation ||| class	count=1
function	table ||| bind table	count=1
function	emit update statements ||| emit post update statements	count=1
class	purpose of ||| values base	count=1
function_arg	[function_1] within ||| [arg_2] [function_1]	count=1
function	this :class ||| attr	count=1
class	[class_1] impl ||| [class_1] [class_2]	count=3
function	the - ||| neg	count=1
class	object into ||| unbound load	count=1
module	limited to [module] single ||| [module]	count=1
class	attribute ||| attribute impl	count=3
arg	value to ||| value dialect	count=2
function	of a particular sequence ||| has sequence	count=1
function	subquery eager ||| subquery	count=1
function	return the collection adapter ||| collection	count=1
function	logger ||| instance logger	count=1
function	begin a nested transaction ||| begin nested	count=1
module	that ||| orm	count=2
function	constructor arguments ||| constructor copy	count=1
module_class	[module_1] textclause object ||| [module_1] [class_2]	count=4
class	datetime type ||| datetime	count=1
class	receive a ||| extension	count=3
function	the actual join ||| join	count=1
function	to initiate instrumentation of ||| instrument	count=1
arg	list of mapping dictionaries ||| mapper mappings return_defaults	count=1
function	flush ||| per state flush	count=1
module	initialization from kwargs ||| ext declarative	count=1
class	for the ||| values	count=1
arg	set action for ||| constraint index_elements index_where set_	count=1
class	and ||| meta	count=1
function	offset/limit is specifically not ||| wo limit	count=1
class	returning ||| values	count=1
arg	an :class ||| cls dict_	count=1
class	allowing user-defined ||| property	count=1
function	[function_1] executemany() ||| [function_2] [function_1]	count=2
function	converts the ||| rowset	count=1
function	expression structure using ||| traverse using	count=2
arg	the ||| obj opts	count=1
arg	b ||| b	count=4
function	a dictionary-based [function_2] ||| [function_1] [function_2]	count=2
class	bindparameter to ||| parameter	count=1
function_arg	relates [arg_2] ||| [arg_2] [function_1]	count=2
class	a :term ||| values base	count=1
class	given column ||| column	count=1
function	[function_1] as the ||| [function_2] [function_1]	count=3
function	execute after any rollback ||| after soft rollback	count=1
function	currently selected ||| default	count=1
arg	decorates a function ||| version message add_deprecation_to_docstring	count=1
function	table comment ||| table comment	count=2
function	before execution receiving the ||| before	count=1
function	minimized set of tables ||| optimized get statement	count=1
module	class [module_2] ||| [module_1] [module_2]	count=2
function	prepare a two ||| do prepare	count=1
class	collection with keying provided ||| collection	count=1
arg	for a db-api module ||| module	count=1
function_arg	all [arg_2] ||| [function_1] bind [arg_2]	count=2
function	[function_1] union ||| [function_2] [function_1]	count=2
arg	collection attribute and return ||| dict_ key	count=1
class	an instance when ||| instance events	count=2
function	certain ||| with current	count=1
function	[function_1] [function_2] ||| [function_1] significant [function_2]	count=4
function	with this :class ||| memoized	count=1
function	is not [function_2] ||| [function_2] [function_1]	count=2
arg	up the given key ||| key	count=1
function	[function_1] view ||| [function_1] [function_2]	count=10
function	cursors ||| cursors	count=1
function	definition ||| view definition	count=1
function	a function with ||| with	count=1
function_arg	[function_1] table_name ||| [arg_2] [function_1]	count=25
function	representation of python datetime ||| time microseconds	count=1
function	implement the * ||| rmul	count=1
module_class	dialect must support ||| testing suite requirements	count=1
module	returning clause ||| sql	count=1
function	purpose of ||| return	count=1
function_arg	[function_1] an ||| [function_1] [arg_2]	count=1
arg	traverse an expression ||| expression consider_as_foreign_keys	count=1
module	or ||| orm	count=2
function	[function_1] from ||| [function_2] [function_1]	count=8
class	to be associated with ||| mapper property	count=1
class	datetime ||| datetime	count=1
function_arg	with a [arg_2] ||| [arg_2] [function_1]	count=1
function	be associated with ||| memoized attr	count=1
function	allowing modifications ||| traverse	count=1
function	the | ||| or	count=1
function	return a [function_1] [function_2] this ||| [function_1] [function_2]	count=2
class	type which has ||| type	count=1
arg	alias of the given ||| alias name	count=1
class	with compiled result ||| result meta data	count=1
arg	within the persistence ||| target flush_context	count=1
function	[function_1] the class ||| [function_1] [function_2]	count=2
class	object ||| property	count=1
module	do not have a ||| orm	count=1
arg	intercept ||| conn	count=8
function_arg	[function_1] for schema ||| [function_1] [arg_2]	count=7
class	the property to ||| mapper property	count=1
arg	this :class ||| bind checkfirst	count=4
function	the "persistent ||| persistent	count=1
arg	a callable ||| dialect callable_	count=1
function_arg	[function_1] item into ||| [function_1] nowait [arg_2]	count=1
class	execution [class_2] ||| [class_2] [class_1]	count=3
module	allows initialization from ||| ext	count=1
arg	decorates ||| version message add_deprecation_to_docstring	count=1
function	for [function] ||| name for [function]	count=2
class	associated with ||| mapper property	count=1
function	when insert() [function] executed ||| autoincrement [function]	count=1
class	[class_1] execution ||| engine [class_2] [class_1]	count=1
function	the :class session ||| session	count=1
function	the not like ||| notlike	count=1
module	interfaces dialect ||| engine	count=1
arg	identify [arg] ||| uowtransaction table [arg]	count=3
function	of elements and ||| copy and	count=2
module	a :func ~ expression ||| sql	count=2
function	update statements corresponding to ||| post update statements	count=1
class	return ||| state	count=1
function	with the given ||| annotate	count=1
function	dictionary of connection ||| connect	count=1
function	[function_1] update ||| [function_2] [function_1]	count=18
class	all :class columnproperty ||| mapper	count=1
function	to the ||| left to	count=1
function	initialize a collection ||| init	count=1
function	union statement used by ||| union	count=1
function	limit/offset ||| w limit	count=1
arg	perform a ||| synchronize_session update_args	count=1
arg	roles are present and ||| cls roles	count=1
module	string to ||| dialects mysql	count=1
class	the object allowing ||| property	count=1
arg	for the given target ||| target identifier	count=1
function	jdbc ||| jdbc	count=1
arg	value [arg_2] ||| orm set attribute [arg_2] [arg_1]	count=2
arg	right clauses ||| right onclause isouter	count=1
function	a returning clause ||| returning	count=1
class	clause for the ||| base	count=1
arg	if the given instance ||| instance	count=1
function	true if ||| has impl	count=1
function	[function_1] '%' as ||| [function_2] [function_1]	count=3
function_arg	[function_1] for ||| [function_1] [arg_2]	count=2
function	structure allowing ||| traverse	count=1
function	true if ||| has	count=3
function_arg	against the [arg_2] ||| [function_1] backend [arg_2]	count=1
class	with this :class ||| property	count=1
function	allowing ||| memoized attr	count=1
arg	an ||| cls dict_	count=1
function	execute() [function_2] ||| core connection events [function_2] [function_1] conn cursor	count=3
class	state and has ||| state	count=1
function	implement the - ||| sub	count=1
arg	a test case's ||| variance	count=1
function	return an iterator of ||| iterate properties	count=1
function	flush ||| flush	count=3
function	given ||| traverse	count=1
function	quote ||| quote	count=2
function	the decimal separator ||| decimal	count=1
function	two values for ||| values	count=1
arg	a dbapi connection is ||| dbapi_connection connection_record	count=1
function	descending order by clause ||| create desc	count=1
function_arg	[function_1] the given ||| [function_1] backend [arg_2]	count=1
class	add a config ||| config	count=1
class	nvarchar ||| nvarchar	count=1
function	implement the >> ||| rshift	count=1
module	a dictionary of all ||| dialects	count=1
function	a jdbc ||| jdbc	count=1
arg	indicate that ||| loadopt	count=1
function	clause is [function] integer ||| [function] int	count=2
function	[function_1] name presented ||| [function_2] [function_1]	count=3
arg	in table_name ||| connection table_name schema	count=1
module	:class ||| sql	count=18
function	o ||| iter id	count=1
arg	modifications by visitors ||| obj opts visitors	count=1
class	allowing ||| mapper	count=1
class	user-defined data ||| property	count=1
class	a threadlocalmetadata ||| thread local meta data	count=1
function	associated with ||| memoized	count=1
function_arg	make the given [function_1] [arg_2] ||| orm make [function_1] to detached [arg_2]	count=1
module	for ||| orm	count=3
function	~ expression select construct ||| select	count=1
function	accepts [function] the ||| date coerces from [function]	count=1
function	given expression structure ||| traverse	count=2
class	[class_1] expression ||| [class_2] [class_1]	count=1
class	logger ||| logger	count=6
function_arg	on [arg_2] ||| [function_1] [arg_2]	count=1
class	make use ||| values base	count=1
class	an instance [class_2] ||| [class_1] [class_2]	count=1
function	:term [function_2] ||| [function_2] [function_1]	count=1
function	the default [function_2] ||| [function_1] [function_2]	count=2
module	return a new :class ||| sql	count=2
arg	a connection transaction ||| transaction connection	count=2
function	the primaryjoin ||| primaryjoin	count=1
function	connection is ||| connect	count=1
function	and [function] same time ||| threading with [function]	count=1
class	type for a ||| type engine	count=1
function	the 'ddl runner' for ||| for	count=1
function	cleanup ||| cleanup	count=1
function	emit [function_2] ||| [function_2] [function_1]	count=8
function	join object ||| join	count=1
function	conforms to ||| conforms	count=1
module	a [module] connection that ||| [module]	count=1
function	'validator' for ||| validates	count=1
module_class	[module_1] ddlelement ||| [module_1] [class_2]	count=2
arg	modifications ||| opts	count=1
arg	given annotations ||| annotations	count=1
class	corresponding to ||| mapper	count=1
arg	required state ||| follower_ident	count=1
module	row [module] ||| [module]	count=3
function	decode a [function_2] ||| [function_2] [function_1]	count=1
class	query object ||| query	count=1
arg	within the given expression ||| clause	count=1
class	purpose of fetching server-side ||| values base	count=1
function	plain percent ||| percent	count=1
module	fetching server-side expressions ||| sql	count=1
module	[module] generativeselect ||| [module]	count=1
function	offset/limit ||| wo limit offset	count=1
function	side ||| side	count=1
function	[function_1] changes ||| [function_2] [function_1]	count=1
function	cte is located to ||| cte	count=1
function	the table [function_2] ||| [function_1] [function_2]	count=3
class	condition suitable for the ||| join condition	count=1
function	kwargs for ||| kwargs	count=2
function	copy ||| copy	count=1
class	for userland code that ||| composite property	count=1
function	desc clause against ||| desc	count=1
function	offset/limit is specifically ||| wo limit offset	count=1
arg	the mapper to ||| mapper	count=1
class	value of query ||| query	count=1
module	connection's [module] connection ||| [module]	count=1
function_arg	against the [arg_2] ||| [arg_2] [function_1]	count=1
function	the set of columns ||| columns	count=1
function	intercept the "persistent ||| persistent	count=1
function	dialect kwargs ||| dialect kwargs	count=2
function	commit ||| commit	count=5
module_class	[module_1] query applies ||| [module_1] [class_2]	count=4
arg	connection ||| connection	count=14
function	to the ||| with	count=1
function	associated with this :class ||| memoized	count=1
function	puts top it's ||| select precolumns	count=1
function	[function_1] [function_2] a :class ||| [function_1] [function_2]	count=4
arg	iterator of objects ||| iterator	count=1
function	a collection ||| collection	count=1
function	describe ||| describe	count=1
function_arg	schema name ||| schema name quote	count=1
function	listeners ||| backref listeners	count=1
function	[function_1] temporary table ||| [function_1] [function_2]	count=2
function_arg	for o [arg_2] ||| [function_1] [arg_2]	count=1
class	[class_1] data ||| [class_2] [class_1]	count=4
function	subquery eager [function] stored ||| unbake subquery [function]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] iterator [arg_2]	count=1
class	compiled result ||| result meta	count=1
function	the purpose of ||| return	count=1
arg	held ||| e soft	count=1
class	compat for [class_2] ||| [class_1] [class_2]	count=1
class	unaryexpression against the given ||| unary expression	count=1
function_arg	[function_1] name ||| [function_1] [arg_2]	count=1
module_class	[module_1] [class_2] it has been created ||| [module_1] [class_2]	count=2
class	object into a ||| unbound load	count=1
arg	object corresponding to this ||| mapper clause	count=1
function	establish row ||| row	count=1
arg	when a connection ||| dbapi_connection connection_record connection_proxy	count=1
function	of type ||| type	count=1
arg	iterator of ||| iterator obj	count=1
function	clear all ||| clear	count=1
function	for delete ||| for delete	count=2
function	allow blob/binary fields to ||| binary comparisons	count=1
arg	attribute and return the ||| state dict_ key	count=1
arg	table definitions ||| bind schema views only	count=1
class	selectable ||| generative select	count=2
arg	:meth ||| opts	count=1
function	use in [function_2] ||| [function_2] [function_1]	count=2
module	[module_1] [module_2] ||| [module_1] [module_2]	count=4
class	select() construct ||| select	count=5
arg	regex and ||| regex	count=1
arg	a dbapi ||| dbapi_connection	count=1
function	from clause ||| from	count=2
function	return the :class session ||| session	count=1
function	result object for this ||| for	count=1
function	character set ||| detect charset	count=2
class	purpose ||| values base	count=2
function	string keys ||| keys	count=1
function_arg	[function_1] a session ||| [arg_2] [function_1]	count=1
class	do not have a ||| instance	count=1
arg	intercept ||| conn cursor	count=1
module	object with this ||| orm	count=1
arg	the given expression ||| obj opts	count=1
arg	function to this ||| fn	count=1
class	result column ||| result meta data	count=1
function	to represent very ||| precision numerics enotation	count=2
arg	value on the given ||| dict_ value	count=2
function	[function_1] statement ||| [function_2] [function_1]	count=1
arg	alias object returning ||| alias	count=1
arg	a given querycontext ||| context entity path loadopt	count=1
function	a collection append ||| append	count=2
module	for all current ||| ext	count=1
module	and ||| dialects	count=1
arg	a composite-capable ||| columns refcolumns name onupdate	count=1
function	check the foreign ||| check foreign	count=2
arg	given state ||| state attribute_names	count=1
function	dialect class ||| dialect	count=1
function	information about columns ||| columns	count=1
module	for one or more ||| orm	count=1
module	initialization from ||| ext declarative	count=1
function	[function_1] side ||| [function_2] [function_1]	count=1
function	that will use the ||| with	count=1
arg	use for connection results ||| connection	count=2
function	the id ||| table id	count=1
function	info ||| info	count=2
module	object's criterion and ||| orm	count=1
function	percent '%' ||| percent	count=1
function	:class dialect that will ||| dialect	count=1
arg	:class sessiontransaction ||| session transaction	count=1
module	:class ||| orm	count=4
function	a bulk insert ||| bulk insert mappings	count=2
arg	results ||| results	count=1
class	joined [class_2] ||| [class_2] [class_1]	count=1
arg	clone the given expression ||| obj	count=1
function	return information about ||| get	count=7
class	an _unboundload() object into ||| unbound load	count=1
arg	the given iterator of ||| iterator	count=1
function	of all [function_2] ||| [function_1] [function_2]	count=2
function	prepare a two phase ||| prepare	count=1
function	return the set ||| set	count=1
function_arg	schema [arg_2] ||| [arg_2] [function_1]	count=1
function	server side cursors ||| server side cursors	count=3
module	the current ||| orm	count=2
arg	for it ||| compiler	count=1
function	return information [function_2] ||| [function_2] [function_1]	count=12
class	oursql isn't super-broken ||| my sqldialect oursql	count=2
function	schema from the given ||| schema	count=1
function	numeric array indexes ||| array indexes	count=1
class	receive an object instance ||| instance events	count=1
function	sequence ||| has sequence	count=1
function	table name ||| table name	count=2
arg	against ||| element	count=1
function	bulk update of the ||| bulk update mappings	count=1
function	update [function_2] ||| [function_1] [function_2]	count=8
function	server used ||| server	count=2
function	objects ||| data	count=1
function	datetime object as ||| datetime	count=1
function_arg	[function_1] start ||| [function_1] [arg_2]	count=4
function	of connection ||| connect	count=1
class	construct ||| pickle type	count=1
class	a ||| instance state	count=1
module	that allows ||| declarative	count=1
arg	indicate that ||| loadopt attr sql_only	count=1
function	associated ||| memoized attr	count=1
function	return the :class dialect ||| get dialect	count=1
module	of a [module] ||| [module]	count=3
class	return the [class] ||| [class]	count=1
class	select ||| scalar select	count=1
class	into [class] ||| [class]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] version info [arg_2]	count=8
function	[function_1] constraints ||| [function_2] [function_1]	count=8
arg	a given state ||| state attribute_names	count=1
function	is [function_2] ||| [function_1] [function_2]	count=9
function	setup py ||| setup py	count=1
function	of group ||| group	count=1
arg	table and ||| table	count=1
module	named properties ||| orm	count=1
class	inspection instance representing ||| queryable attribute	count=1
function_arg	comment for table_name ||| comment table_name schema	count=2
class	for ||| session	count=1
function	active_history ||| get active history	count=1
module	with ||| orm	count=1
function	[function_1] temporary view ||| [function_1] [function_2]	count=2
function	been [function] or updated ||| finalize [function]	count=1
module_class	by this [class_2] ||| [module_1] [class_2]	count=4
function	within a transaction ||| transaction	count=1
function	fetching server-side expressions ||| return	count=1
function	the collection of foreignkey ||| foreign keys	count=1
function_arg	[function_1] level ||| [function_1] [arg_2]	count=2
function	structure using ||| traverse using	count=2
function	the first time a ||| first	count=1
function	of connection arguments ||| connect args	count=2
function	[function_1] metadata ||| [function_1] [function_2]	count=1
arg	a create constraint clause ||| constraint	count=2
function	the sequence ||| sequence	count=1
arg	a consistent format with ||| keys outerjoin full create_aliases	count=1
class	the property ||| mapper property	count=1
function	of ||| return	count=2
arg	state from ||| state	count=1
function	adapt ||| adapt listener	count=2
module	and then close the ||| engine	count=1
function	append the given expression ||| append	count=1
function	a connection ||| connect	count=1
function	the ||| cloned traverse	count=2
arg	an :class orderinglist ||| cls dict_ items	count=1
function	implements the executioncontext ||| implements	count=1
function_arg	[function_1] new ||| [function_1] engine connection close_with_result [arg_2]	count=1
class	allowing user-defined data ||| mapper property	count=1
function	sql except [function] of ||| except [function]	count=1
class	option may ||| option	count=1
function	implementation of ||| do execute	count=1
class	create ||| oracle dialect cx oracle	count=1
function	inserted ||| insert update commands	count=2
arg	roles are ||| cls roles	count=1
function	use in update ||| collect update	count=1
module	of ||| engine	count=1
arg	visit the given expression ||| obj visitors	count=1
module	by ||| orm	count=3
function	alias ||| alias	count=1
class	for ||| attribute	count=1
function	a cte is located ||| init cte	count=1
arg	table definitions ||| views only	count=1
function	of string keys for ||| keys	count=1
function	fromclause elements referenced ||| froms	count=1
function	delete memoized collections when ||| reset exported	count=1
arg	:class query ||| query	count=1
class	but the order ||| results	count=1
function	string name ||| name	count=2
class	interfaces dialect ||| engine	count=1
arg	persistence of ||| target flush_context	count=1
function_arg	insert [arg_2] ||| [arg_2] [function_1]	count=2
function	bulk insert of ||| bulk insert mappings	count=2
function	fromclause elements referenced by ||| froms	count=1
function	for insert or ||| for save	count=2
arg	when a dbapi connection ||| dbapi_connection	count=2
function	an iterator of ||| iterate properties	count=2
function	of mysql ||| mysql	count=1
function	do nothing ||| do nothing	count=2
function	an identity-map key for ||| key	count=1
module	:class table objects for ||| ext	count=1
class	the object allowing ||| mapper	count=1
module_class	[module_1] :class query ||| [module_1] [class_2]	count=2
function	execute after a ||| after	count=1
class	[class_1] key ||| [class_2] [class_1]	count=1
function	prepare a ||| do prepare	count=1
function	attribute return a ||| get	count=1
function	namespace of all :class ||| attrs	count=1
function	set of string keys ||| keys	count=1
arg	cls for use ||| cls	count=1
class	data to be associated ||| mapper	count=1
function	from an ||| from	count=1
class	ordering for the ||| ordering	count=1
function	set [function_2] ||| [function_1] [function_2]	count=1
function	same as process_query(), except ||| query conditionally	count=1
function	'inherits' for ||| concrete base	count=1
function	the columns ||| columns	count=1
class	enum ||| enum	count=1
function	a new ||| create	count=2
arg	expression structure allowing modifications ||| obj opts	count=1
function	producing method ||| expression	count=1
arg	:class query object's session ||| querylib query iterator	count=1
class	from a parent query ||| query	count=1
function	views ||| views	count=1
function	by ||| cloned traverse	count=2
function	[function_1] names for ||| [function_2] [function_1]	count=17
arg	new connection ||| engine connection close_with_result _branch_from	count=1
function_arg	[function_1] :class ||| [function_1] session [arg_2]	count=1
arg	table description ||| connection table	count=1
function	produce an [function] that ||| proxying [function]	count=1
function	all ||| invoke all	count=1
function	constructor arguments ||| constructor	count=1
module_class	[module_1] connection ||| [module_1] [class_2]	count=6
function	insert [function_2] ||| [function_1] [function_2]	count=6
function	deprecation warning ||| deprecated	count=1
function	update from clause ||| update from clause	count=3
function	the identity [function_2] ||| [function_1] [function_2]	count=3
function	[function_1] conflict clause ||| [function_2] [function_1]	count=4
function	create all ||| create all	count=2
function_arg	[function_1] operation ||| [arg_2] [function_1]	count=3
module_class	by this select ||| sql select	count=1
function_arg	keys in [arg_2] ||| [arg_2] [function_1]	count=1
arg	a collection attribute and ||| dict_ key	count=1
function	[function_1] result ||| [function_1] [function_2]	count=3
function	return a list of ||| get	count=7
class	a ||| values	count=1
function	'use_labels' flag set to ||| apply labels	count=1
class	[class] without ||| [class]	count=3
function	[function_1] call count ||| [function_1] [function_2]	count=1
function	select a numeric value ||| numeric	count=1
arg	value ||| value	count=10
function_arg	delete [arg_2] ||| [arg_2] [function_1]	count=2
function	return information [function_2] ||| [function_1] [function_2]	count=12
class	data ||| mapper	count=1
class	the ||| mapper property	count=2
arg	within the persistence ||| flush_context attrs	count=1
function	[function_1] distinct from ||| [function_2] [function_1]	count=3
function	query synonym [function_2] ||| [function_1] [function_2]	count=3
function	options ||| lazyload options	count=1
function	data to be associated ||| memoized	count=1
function	insert() [function] executed ||| autoincrement [function]	count=1
function	value of null ||| fetch null from	count=1
module	produce ||| sql	count=2
function_arg	[function_1] [arg_2] repr messaging on failure ||| [function_1] in a [arg_2]	count=1
function_arg	[function_1] emitted ||| [function_1] mapper [arg_2]	count=1
module	in ||| orm	count=3
function	of elements [function_2] ||| [function_2] [function_1]	count=4
arg	with a ||| metadata schema referred_schema_fn	count=1
function	kwargs ||| kwargs	count=4
function	dialect-specific result [function_2] ||| [function_1] [function_2]	count=1
class	new :class query ||| query	count=1
function	the purpose ||| return	count=1
function	[function_1] keys in ||| [function_1] [function_2]	count=4
function	ad-hoc instrumentation from decorators ||| set collection attributes	count=1
function	[function_1] literal ||| [function_2] [function_1]	count=3
function_arg	[function_1] [arg_2] ||| orm [function_1] attribute [arg_2]	count=1
function	subquery eager loaders ||| subquery loaders	count=2
function	defaults ||| defaults	count=2
function	postsortrecs as well as ||| actions	count=1
arg	table definitions ||| schema views only	count=1
module	the object allowing ||| orm	count=1
function_arg	[function_1] value to ||| [function_1] [arg_2]	count=8
function	processing function for the ||| processor	count=1
function	the oid for ||| oid	count=1
arg	a new [arg_2] ||| [arg_2] [arg_1]	count=2
arg	the given instance ||| instance attribute_names lockmode	count=1
class	set of keys which ||| instance	count=1
function	add a class ||| add	count=1
function	ad-hoc instrumentation from ||| collection attributes	count=1
function_arg	warnings on [arg_2] ||| [function_1] [arg_2]	count=1
function	bulk update of ||| bulk update mappings	count=2
function	side [function_2] ||| [function_1] [function_2]	count=1
arg	string sql statement ||| statement	count=1
module	tinytext ||| dialects mysql	count=1
function	a flush ||| state flush	count=1
class	namespace of ||| mapper	count=2
function	was [function_2] ||| [function_2] [function_1]	count=3
function	cte is located to ||| cte state	count=1
arg	cursor ||| cursor statement parameters	count=2
class	parent query ||| query	count=1
arg	given expression structure allowing ||| obj opts	count=1
function	the foreign [function_2] ||| [function_1] [function_2]	count=4
function_arg	o in iterable) ||| iter id iterable	count=1
module_class	[module_1] [class_2] after it has been ||| [module_1] [class_2]	count=2
arg	attributes have ||| context attrs	count=1
function	an identity-map key ||| key	count=1
function	the mapped class ||| class	count=2
function	dictionary-based collection ||| attribute mapped collection	count=2
arg	key from the ||| query key	count=1
function	traceback ||| traceback	count=1
function	represent very [function_2] ||| [function_1] [function_2]	count=4
function_arg	set [arg_2] ||| orm [function_1] committed value [arg_2]	count=3
function_arg	[function_1] tuple producing ||| [arg_2] [function_1]	count=2
class	return the set of ||| state	count=1
arg	given identity key from ||| key refresh_state	count=1
class	return the set of ||| instance	count=1
module_class	of [module_1] [class_2] given selectable ||| [module_1] [class_2]	count=3
class	an object instance ||| instance	count=1
function_arg	commit all [arg_2] ||| [arg_2] [function_1]	count=1
function	implement the 'concat' ||| concat	count=1
function	self-referential foreign keys ||| self referential foreign keys	count=1
module	decorate a method as ||| orm	count=1
