<tt style='background-color:#E8E8E8;'> core.DDLEvents <a href=' /events.py#L78'>before_create</a>(target,connection)</tt>	Called before create statements are emitted.
<tt style='background-color:#E8E8E8;'> core.DDLEvents <a href=' /events.py#L94'>after_create</a>(target,connection)</tt>	Called after create statements are emitted.
<tt style='background-color:#E8E8E8;'> core.DDLEvents <a href=' /events.py#L110'>before_drop</a>(target,connection)</tt>	Called before drop statements are emitted.
<tt style='background-color:#E8E8E8;'> core.DDLEvents <a href=' /events.py#L126'>after_drop</a>(target,connection)</tt>	Called after drop statements are emitted.
<tt style='background-color:#E8E8E8;'> core.DDLEvents <a href=' /events.py#L142'>before_parent_attach</a>(target,parent)</tt>	Called before a :class schemaitem is associated with.
<tt style='background-color:#E8E8E8;'> core.DDLEvents <a href=' /events.py#L158'>after_parent_attach</a>(target,parent)</tt>	Called after a :class schemaitem is associated with.
<tt style='background-color:#E8E8E8;'> core.DDLEvents <a href=' /events.py#L174'>column_reflect</a>(inspector,table,column_info)</tt>	Called for each unit of 'column info' retrieved when a :class.
<tt style='background-color:#E8E8E8;'> core.PoolEvents <a href=' /events.py#L291'>connect</a>(dbapi_connection,connection_record)</tt>	Called at the moment a particular dbapi connection is first created for a given :class.
<tt style='background-color:#E8E8E8;'> core.PoolEvents <a href=' /events.py#L306'>first_connect</a>(dbapi_connection,connection_record)</tt>	Called exactly once for the first time a dbapi connection is checked out from a particular :class.
<tt style='background-color:#E8E8E8;'> core.PoolEvents <a href=' /events.py#L327'>checkout</a>(dbapi_connection,connection_record,connection_proxy)</tt>	Called when a connection is retrieved from the pool.
<tt style='background-color:#E8E8E8;'> core.PoolEvents <a href=' /events.py#L349'>checkin</a>(dbapi_connection,connection_record)</tt>	Called when a connection returns to the pool.
<tt style='background-color:#E8E8E8;'> core.PoolEvents <a href=' /events.py#L363'>reset</a>(dbapi_connection,connection_record)</tt>	Called before the "reset" action occurs for a pooled connection.
<tt style='background-color:#E8E8E8;'> core.PoolEvents <a href=' /events.py#L392'>invalidate</a>(dbapi_connection,connection_record,exception)</tt>	Called when a dbapi connection is to be "invalidated".
<tt style='background-color:#E8E8E8;'> core.PoolEvents <a href=' /events.py#L419'>soft_invalidate</a>(dbapi_connection,connection_record,exception)</tt>	Called when a dbapi connection is to be "soft invalidated".
<tt style='background-color:#E8E8E8;'> core.PoolEvents <a href=' /events.py#L434'>close</a>(dbapi_connection,connection_record)</tt>	Called when a dbapi connection is closed.
<tt style='background-color:#E8E8E8;'> core.PoolEvents <a href=' /events.py#L451'>detach</a>(dbapi_connection,connection_record)</tt>	Called when a dbapi connection is "detached" from a pool.
<tt style='background-color:#E8E8E8;'> core.PoolEvents <a href=' /events.py#L461'>close_detached</a>(dbapi_connection)</tt>	Called when a detached dbapi connection is closed.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L592'>before_execute</a>(conn,clauseelement,multiparams,params)</tt>	Intercept high level execute() events receiving uncompiled sql constructs and other objects prior to rendering into sql.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L621'>after_execute</a>(conn,clauseelement,multiparams,params)</tt>	Intercept high level execute() events after execute.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L634'>before_cursor_execute</a>(conn,cursor,statement,parameters)</tt>	Intercept low-level cursor execute() events before execution receiving the string sql statement and dbapi-specific parameter list to.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L675'>after_cursor_execute</a>(conn,cursor,statement,parameters)</tt>	Intercept low-level cursor execute() events after execution.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L694'>dbapi_error</a>(conn,cursor,statement,parameters)</tt>	Intercept a raw dbapi error.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L741'>handle_error</a>(exception_context)</tt>	Intercept all exceptions processed by the :class connection.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L859'>engine_connect</a>(conn,branch)</tt>	Intercept the creation of a new :class connection.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L908'>set_connection_execution_options</a>(conn,opts)</tt>	Intercept when the :meth connection execution_options.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L936'>set_engine_execution_options</a>(engine,opts)</tt>	Intercept when the :meth engine execution_options.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L962'>engine_disposed</a>(engine)</tt>	Intercept when the :meth engine dispose method is called.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L979'>begin</a>(conn)</tt>	Intercept begin() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L986'>rollback</a>(conn)</tt>	Intercept rollback() events as initiated by a :class.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L1004'>commit</a>(conn)</tt>	Intercept commit() events as initiated by a :class.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L1016'>savepoint</a>(conn,name)</tt>	Intercept savepoint() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L1024'>rollback_savepoint</a>(conn,name,context)</tt>	Intercept rollback_savepoint() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L1033'>release_savepoint</a>(conn,name,context)</tt>	Intercept release_savepoint() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L1042'>begin_twophase</a>(conn,xid)</tt>	Intercept begin_twophase() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L1050'>prepare_twophase</a>(conn,xid)</tt>	Intercept prepare_twophase() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L1057'>rollback_twophase</a>(conn,xid,is_prepared)</tt>	Intercept rollback_twophase() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionEvents <a href=' /events.py#L1067'>commit_twophase</a>(conn,xid,is_prepared)</tt>	Intercept commit_twophase() events.
<tt style='background-color:#E8E8E8;'> core.DialectEvents <a href=' /events.py#L1131'>do_connect</a>(dialect,conn_rec,cargs,cparams)</tt>	Receive connection arguments before a connection is made.
<tt style='background-color:#E8E8E8;'> core.DialectEvents <a href=' /events.py#L1148'>do_executemany</a>(cursor,statement,parameters,context)</tt>	Receive a cursor to have executemany() called.
<tt style='background-color:#E8E8E8;'> core.DialectEvents <a href=' /events.py#L1157'>do_execute_no_params</a>(cursor,statement,context)</tt>	Receive a cursor to have execute() with no parameters called.
<tt style='background-color:#E8E8E8;'> core.DialectEvents <a href=' /events.py#L1166'>do_execute</a>(cursor,statement,parameters,context)</tt>	Receive a cursor to have execute() called.
<tt style='background-color:#E8E8E8;'> core.PoolListener <a href=' /interfaces.py#L76'>_adapt_listener</a>(cls,listener)</tt>	Adapt a :class poollistener to individual.
<tt style='background-color:#E8E8E8;'> core.PoolListener <a href=' /interfaces.py#L95'>connect</a>(dbapi_con,con_record)</tt>	Called once for each new db-api connection or pool's creator().
<tt style='background-color:#E8E8E8;'> core.PoolListener <a href=' /interfaces.py#L107'>first_connect</a>(dbapi_con,con_record)</tt>	Called exactly once for the first db-api connection.
<tt style='background-color:#E8E8E8;'> core.PoolListener <a href=' /interfaces.py#L119'>checkout</a>(dbapi_con,con_record,con_proxy)</tt>	Called when a connection is retrieved from the pool.
<tt style='background-color:#E8E8E8;'> core.PoolListener <a href=' /interfaces.py#L138'>checkin</a>(dbapi_con,con_record)</tt>	Called when a connection returns to the pool.
<tt style='background-color:#E8E8E8;'> core.ConnectionProxy <a href=' /interfaces.py#L253'>execute</a>(conn,execute,clauseelement)</tt>	Intercept high level execute() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionProxy <a href=' /interfaces.py#L258'>cursor_execute</a>(execute,cursor,statement,parameters)</tt>	Intercept low-level cursor execute() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionProxy <a href=' /interfaces.py#L264'>begin</a>(conn,begin)</tt>	Intercept begin() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionProxy <a href=' /interfaces.py#L269'>rollback</a>(conn,rollback)</tt>	Intercept rollback() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionProxy <a href=' /interfaces.py#L274'>commit</a>(conn,commit)</tt>	Intercept commit() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionProxy <a href=' /interfaces.py#L279'>savepoint</a>(conn,savepoint,name)</tt>	Intercept savepoint() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionProxy <a href=' /interfaces.py#L284'>rollback_savepoint</a>(conn,rollback_savepoint,name,context)</tt>	Intercept rollback_savepoint() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionProxy <a href=' /interfaces.py#L289'>release_savepoint</a>(conn,release_savepoint,name,context)</tt>	Intercept release_savepoint() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionProxy <a href=' /interfaces.py#L294'>begin_twophase</a>(conn,begin_twophase,xid)</tt>	Intercept begin_twophase() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionProxy <a href=' /interfaces.py#L299'>prepare_twophase</a>(conn,prepare_twophase,xid)</tt>	Intercept prepare_twophase() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionProxy <a href=' /interfaces.py#L304'>rollback_twophase</a>(conn,rollback_twophase,xid,is_prepared)</tt>	Intercept rollback_twophase() events.
<tt style='background-color:#E8E8E8;'> core.ConnectionProxy <a href=' /interfaces.py#L309'>commit_twophase</a>(conn,commit_twophase,xid,is_prepared)</tt>	Intercept commit_twophase() events.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pool.py#L33'>manage</a>(module)</tt>	Return a proxy for a db-api module that automatically pools connections.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pool.py#L56'>clear_managers</a>()</tt>	Remove all current db-api 2 0 managers.
<tt style='background-color:#E8E8E8;'> core.Pool <a href=' /pool.py#L103'>__init__</a>(creator,recycle,echo,use_threadlocal)</tt>	Construct a pool.
<tt style='background-color:#E8E8E8;'> core.Pool <a href=' /pool.py#L286'>_should_wrap_creator</a>(creator)</tt>	Detect if creator accepts a single argument or is sent as a legacy style no-arg function.
<tt style='background-color:#E8E8E8;'> core.Pool <a href=' /pool.py#L321'>add_listener</a>(listener)</tt>	Add a :class poollistener-like object to this pool.
<tt style='background-color:#E8E8E8;'> core.Pool <a href=' /pool.py#L333'>unique_connection</a>()</tt>	Produce a dbapi connection that is not referenced by any thread-local context.
<tt style='background-color:#E8E8E8;'> core.Pool <a href=' /pool.py#L346'>_create_connection</a>()</tt>	Called by subclasses to create a new connectionrecord.
<tt style='background-color:#E8E8E8;'> core.Pool <a href=' /pool.py#L351'>_invalidate</a>(connection,exception,_checkin)</tt>	Mark all connections established within the generation of the given connection as invalidated.
<tt style='background-color:#E8E8E8;'> core.Pool <a href=' /pool.py#L368'>recreate</a>()</tt>	Return a new :class pool, of the same class as this one.
<tt style='background-color:#E8E8E8;'> core.Pool <a href=' /pool.py#L380'>dispose</a>()</tt>	Dispose of this pool.
<tt style='background-color:#E8E8E8;'> core.Pool <a href=' /pool.py#L393'>connect</a>()</tt>	Return a dbapi connection from the pool.
<tt style='background-color:#E8E8E8;'> core.Pool <a href=' /pool.py#L414'>_return_conn</a>(record)</tt>	Given a _connectionrecord return it to the :class pool.
<tt style='background-color:#E8E8E8;'> core.Pool <a href=' /pool.py#L428'>_do_get</a>()</tt>	Implementation for :meth get, supplied by subclasses.
<tt style='background-color:#E8E8E8;'> core.Pool <a href=' /pool.py#L433'>_do_return_conn</a>(conn)</tt>	Implementation for :meth return_conn, supplied by subclasses.
<tt style='background-color:#E8E8E8;'> core._ConnectionRecord <a href=' /pool.py#L494'>info</a>()</tt>	The info dictionary associated with the dbapi connection.
<tt style='background-color:#E8E8E8;'> core._ConnectionRecord <a href=' /pool.py#L513'>record_info</a>()</tt>	An "info' dictionary associated with the connection record itself.
<tt style='background-color:#E8E8E8;'> core._ConnectionRecord <a href=' /pool.py#L575'>invalidate</a>(e,soft)</tt>	Invalidate the dbapi connection held by this :class _connectionrecord.
<tt style='background-color:#E8E8E8;'> core. <a href=' /pool.py#L681'>_finalize_fairy</a>(connection,connection_record,pool,ref)</tt>	Cleanup for a :class _connectionfairy whether or not it's already.
<tt style='background-color:#E8E8E8;'> core._ConnectionFairy <a href=' /pool.py#L888'>is_valid</a>()</tt>	Return true if this :class _connectionfairy still refers.
<tt style='background-color:#E8E8E8;'> core._ConnectionFairy <a href=' /pool.py#L895'>info</a>()</tt>	Info dictionary associated with the underlying dbapi connection referred to by this :class.
<tt style='background-color:#E8E8E8;'> core._ConnectionFairy <a href=' /pool.py#L913'>record_info</a>()</tt>	Info dictionary associated with the :class _connectionrecord.
<tt style='background-color:#E8E8E8;'> core._ConnectionFairy <a href=' /pool.py#L931'>invalidate</a>(e,soft)</tt>	Mark this connection as invalidated.
<tt style='background-color:#E8E8E8;'> core._ConnectionFairy <a href=' /pool.py#L962'>cursor</a>()</tt>	Return a new dbapi cursor for the underlying connection.
<tt style='background-color:#E8E8E8;'> core._ConnectionFairy <a href=' /pool.py#L974'>detach</a>()</tt>	Separate this connection from its pool.
<tt style='background-color:#E8E8E8;'> core.SingletonThreadPool <a href=' /pool.py#L1056'>dispose</a>()</tt>	Dispose of this pool.
<tt style='background-color:#E8E8E8;'> core.QueuePool <a href=' /pool.py#L1105'>__init__</a>(creator,pool_size,max_overflow,timeout)</tt>	Construct a queuepool.
<tt style='background-color:#E8E8E8;'> core._DBProxy <a href=' /pool.py#L1409'>__init__</a>(module,poolclass)</tt>	Initializes a new proxy.
<tt style='background-color:#E8E8E8;'> core._DBProxy <a href=' /pool.py#L1456'>connect</a>()</tt>	Activate a connection to the database.
<tt style='background-color:#E8E8E8;'> core._DBProxy <a href=' /pool.py#L1472'>dispose</a>()</tt>	Dispose the pool referenced by the given connect arguments.
<tt style='background-color:#E8E8E8;'> core.InstanceLogger <a href=' /log.py#L101'>debug</a>(msg)</tt>	Delegate a debug call to the underlying logger.
<tt style='background-color:#E8E8E8;'> core.InstanceLogger <a href=' /log.py#L106'>info</a>(msg)</tt>	Delegate an info call to the underlying logger.
<tt style='background-color:#E8E8E8;'> core.InstanceLogger <a href=' /log.py#L111'>warning</a>(msg)</tt>	Delegate a warning call to the underlying logger.
<tt style='background-color:#E8E8E8;'> core.InstanceLogger <a href=' /log.py#L118'>error</a>(msg)</tt>	Delegate an error call to the underlying logger.
<tt style='background-color:#E8E8E8;'> core.InstanceLogger <a href=' /log.py#L124'>exception</a>(msg)</tt>	Delegate an exception call to the underlying logger.
<tt style='background-color:#E8E8E8;'> core.InstanceLogger <a href=' /log.py#L130'>critical</a>(msg)</tt>	Delegate a critical call to the underlying logger.
<tt style='background-color:#E8E8E8;'> core.InstanceLogger <a href=' /log.py#L135'>log</a>(level,msg)</tt>	Delegate a log call to the underlying logger.
<tt style='background-color:#E8E8E8;'> core.InstanceLogger <a href=' /log.py#L157'>isEnabledFor</a>(level)</tt>	Is this logger enabled for level 'level'?.
<tt style='background-color:#E8E8E8;'> core.InstanceLogger <a href=' /log.py#L164'>getEffectiveLevel</a>()</tt>	What's the effective level for this logger?.
<tt style='background-color:#E8E8E8;'> core. <a href=' /log.py#L173'>instance_logger</a>(instance,echoflag)</tt>	Create a logger for an instance that implements :class identified.
<tt style='background-color:#E8E8E8;'> core. <a href=' /inspection.py#L38'>inspect</a>(subject,raiseerr)</tt>	Produce an inspection object for the given target.
<tt style='background-color:#E8E8E8;'> orm.JoinedLoader <a href=' /orm/strategies.py#L1217'>setup_query</a>(context,entity,path,loadopt)</tt>	Add a left outer join to the statement that's being constructed.
<tt style='background-color:#E8E8E8;'> orm.QueryableAttribute <a href=' /orm/attributes.py#L86'>info</a>()</tt>	Return the 'info' dictionary for the underlying sql element.
<tt style='background-color:#E8E8E8;'> orm.QueryableAttribute <a href=' /orm/attributes.py#L129'>parent</a>()</tt>	Return an inspection instance representing the parent.
<tt style='background-color:#E8E8E8;'> orm.QueryableAttribute <a href=' /orm/attributes.py#L148'>_query_clause_element</a>()</tt>	Like __clause_element__(), but called specifically by :class.
<tt style='background-color:#E8E8E8;'> orm.QueryableAttribute <a href=' /orm/attributes.py#L154'>_bulk_update_tuples</a>(value)</tt>	Return setter tuples for a bulk update.
<tt style='background-color:#E8E8E8;'> orm.QueryableAttribute <a href=' /orm/attributes.py#L204'>property</a>()</tt>	Return the :class mapperproperty associated with this.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/attributes.py#L245'>create_proxied_attribute</a>(descriptor)</tt>	Create an queryableattribute / user descriptor hybrid.
<tt style='background-color:#E8E8E8;'> orm.AttributeImpl <a href=' /orm/attributes.py#L386'>__init__</a>(class_,key,callable_,dispatch)</tt>	Construct an attributeimpl.
<tt style='background-color:#E8E8E8;'> orm.AttributeImpl <a href=' /orm/attributes.py#L471'>_get_active_history</a>()</tt>	Backwards compat for impl active_history.
<tt style='background-color:#E8E8E8;'> orm.AttributeImpl <a href=' /orm/attributes.py#L481'>hasparent</a>(state,optimistic)</tt>	Return the boolean value of a hasparent flag attached to the given state.
<tt style='background-color:#E8E8E8;'> orm.AttributeImpl <a href=' /orm/attributes.py#L503'>sethasparent</a>(state,parent_state,value)</tt>	Set a boolean flag on the given item corresponding to whether or not it is attached to a parent object via the.
<tt style='background-color:#E8E8E8;'> orm.AttributeImpl <a href=' /orm/attributes.py#L540'>get_all_pending</a>(state,dict_,passive)</tt>	Return a list of tuples of state obj for all objects in this attribute's current state.
<tt style='background-color:#E8E8E8;'> orm.AttributeImpl <a href=' /orm/attributes.py#L558'>initialize</a>(state,dict_)</tt>	Initialize the given state's attribute with an empty value.
<tt style='background-color:#E8E8E8;'> orm.AttributeImpl <a href=' /orm/attributes.py#L569'>get</a>(state,dict_,passive)</tt>	Retrieve a value from the given object.
<tt style='background-color:#E8E8E8;'> orm.AttributeImpl <a href=' /orm/attributes.py#L630'>get_committed_value</a>(state,dict_,passive)</tt>	Return the unchanged value of this attribute.
<tt style='background-color:#E8E8E8;'> orm.AttributeImpl <a href=' /orm/attributes.py#L642'>set_committed_value</a>(state,dict_,value)</tt>	Set an attribute value on the given instance and 'commit' it.
<tt style='background-color:#E8E8E8;'> orm.ScalarObjectAttributeImpl <a href=' /orm/attributes.py#L791'>set</a>(state,dict_,value,initiator)</tt>	Set a value on the given instancestate.
<tt style='background-color:#E8E8E8;'> orm.CollectionAttributeImpl <a href=' /orm/attributes.py#L991'>initialize</a>(state,dict_)</tt>	Initialize this attribute with an empty collection.
<tt style='background-color:#E8E8E8;'> orm.CollectionAttributeImpl <a href=' /orm/attributes.py#L1102'>set_committed_value</a>(state,dict_,value)</tt>	Set an attribute value on the given instance and 'commit' it.
<tt style='background-color:#E8E8E8;'> orm.CollectionAttributeImpl <a href=' /orm/attributes.py#L1129'>get_collection</a>(state,dict_,user_data,passive)</tt>	Retrieve the collectionadapter associated with the given state.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/attributes.py#L1144'>backref_listeners</a>(attribute,key,uselist)</tt>	Apply listeners to synchronize a two-way relationship.
<tt style='background-color:#E8E8E8;'> orm.History <a href=' /orm/attributes.py#L1291'>empty</a>()</tt>	Return true if this :class history has no changes.
<tt style='background-color:#E8E8E8;'> orm.History <a href=' /orm/attributes.py#L1302'>sum</a>()</tt>	Return a collection of added + unchanged + deleted.
<tt style='background-color:#E8E8E8;'> orm.History <a href=' /orm/attributes.py#L1309'>non_deleted</a>()</tt>	Return a collection of added + unchanged.
<tt style='background-color:#E8E8E8;'> orm.History <a href=' /orm/attributes.py#L1315'>non_added</a>()</tt>	Return a collection of unchanged + deleted.
<tt style='background-color:#E8E8E8;'> orm.History <a href=' /orm/attributes.py#L1321'>has_changes</a>()</tt>	Return true if this :class history has changes.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/attributes.py#L1427'>get_history</a>(obj,key,passive)</tt>	Return a :class history record for the given object.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/attributes.py#L1528'>init_collection</a>(obj,key)</tt>	Initialize a collection attribute and return the collection adapter.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/attributes.py#L1551'>init_state_collection</a>(state,dict_,key)</tt>	Initialize a collection attribute and return the collection adapter.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/attributes.py#L1559'>set_committed_value</a>(instance,key,value)</tt>	Set the value of an attribute with no history events.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/attributes.py#L1578'>set_attribute</a>(instance,key,value)</tt>	Set the value of an attribute firing history events.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/attributes.py#L1592'>get_attribute</a>(instance,key)</tt>	Get the value of an attribute firing any callables required.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/attributes.py#L1606'>del_attribute</a>(instance,key)</tt>	Delete the value of an attribute firing history events.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/attributes.py#L1620'>flag_modified</a>(instance,key)</tt>	Mark an attribute on an instance as 'modified'.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/attributes.py#L1642'>flag_dirty</a>(instance)</tt>	Mark an instance as 'dirty' without any specific attribute mentioned.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/sync.py#L106'>source_modified</a>(uowcommit,source,source_mapper,synchronize_pairs)</tt>	Return true if the source object has changes from an old to a.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L93'>attrs</a>()</tt>	Return a namespace representing each attribute on the mapped object including its current value.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L112'>transient</a>()</tt>	Return true if the object is :term transient.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L124'>pending</a>()</tt>	Return true if the object is :term pending.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L137'>deleted</a>()</tt>	Return true if the object is :term deleted.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L167'>was_deleted</a>()</tt>	Return true if this object is or was previously in the "deleted" state and has not been reverted to persistent.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L191'>persistent</a>()</tt>	Return true if the object is :term persistent.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L213'>detached</a>()</tt>	Return true if the object is :term detached.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L230'>session</a>(sessionlib)</tt>	Return the owning :class session for this instance.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L246'>object</a>()</tt>	Return the mapped object represented by this :class.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L252'>identity</a>()</tt>	Return the mapped identity of the mapped object.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L272'>identity_key</a>()</tt>	Return the identity key for the mapped object.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L294'>mapper</a>()</tt>	Return the :class mapper used for this mapepd object.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L299'>has_identity</a>()</tt>	Return true if this object has an identity key.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L360'>_cleanup</a>(ref)</tt>	Weakref callback cleanup.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L386'>dict</a>()</tt>	Return the instance dict used by the object.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L486'>_reset</a>(dict_,key)</tt>	Remove the given attribute and any callables associated with it.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L580'>_load_expired</a>(state,passive)</tt>	__call__ allows the instancestate to act as a deferred callable for loading expired attributes which is also.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L603'>unmodified</a>()</tt>	Return the set of keys which have no uncommitted changes.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L609'>unmodified_intersection</a>(keys)</tt>	Return self unmodified intersection keys.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L615'>unloaded</a>()</tt>	Return the set of keys which do not have a loaded value.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L710'>_commit_all</a>(dict_,instance_dict)</tt>	Commit all attributes unconditionally.
<tt style='background-color:#E8E8E8;'> orm.InstanceState <a href=' /orm/state.py#L728'>_commit_all_states</a>(iter,instance_dict)</tt>	Mass / highly inlined version of commit_all().
<tt style='background-color:#E8E8E8;'> orm.AttributeState <a href=' /orm/state.py#L768'>loaded_value</a>()</tt>	The current value of this attribute as loaded from the database.
<tt style='background-color:#E8E8E8;'> orm.AttributeState <a href=' /orm/state.py#L778'>value</a>()</tt>	Return the value of this attribute.
<tt style='background-color:#E8E8E8;'> orm.AttributeState <a href=' /orm/state.py#L790'>history</a>()</tt>	Return the current pre-flush change history for this attribute via the :class.
<tt style='background-color:#E8E8E8;'> orm.AttributeState <a href=' /orm/state.py#L809'>load_history</a>()</tt>	Return the current pre-flush change history for this attribute via the :class.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/util.py#L81'>_validator_events</a>(desc,key,validator,include_removes)</tt>	Runs a validation method on an attribute value to be set or appended.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/util.py#L147'>polymorphic_union</a>(table_map,typecolname,aliasname,cast_nulls)</tt>	Create a union statement used by a polymorphic mapper.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/util.py#L211'>identity_key</a>()</tt>	Generate "identity key" tuples as are used as keys in the :attr.
<tt style='background-color:#E8E8E8;'> orm.AliasedInsp <a href=' /orm/util.py#L508'>class_</a>()</tt>	Return the mapped class ultimately represented by this :class.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/util.py#L595'>aliased</a>(element,alias,name,flat)</tt>	Produce an alias of the given element usually an :class aliasedclass.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/util.py#L689'>with_polymorphic</a>(base,classes,selectable,flat)</tt>	Produce an :class aliasedclass construct which specifies.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/util.py#L780'>_orm_annotate</a>(element,exclude)</tt>	Deep copy the given clauseelement annotating each element with the "_orm_adapt" flag.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/util.py#L790'>_orm_deannotate</a>(element)</tt>	Remove annotations that link a column to a particular mapping.
<tt style='background-color:#E8E8E8;'> orm._ORMJoin <a href=' /orm/util.py#L881'>_splice_into_center</a>(other)</tt>	Splice a join into the center.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/util.py#L918'>join</a>(left,right,onclause,isouter)</tt>	Produce an inner join between left and right clauses.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/util.py#L961'>outerjoin</a>(left,right,onclause,full)</tt>	Produce a left outer join between left and right clauses.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/util.py#L972'>with_parent</a>(instance,prop)</tt>	Create filtering criterion that relates this query's primary entity to the given related instance using established :func.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/util.py#L1008'>has_identity</a>(object)</tt>	Return true if the given object has a database identity.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/util.py#L1024'>was_deleted</a>(object)</tt>	Return true if the given object was deleted within a session flush.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/util.py#L1056'>randomize_unitofwork</a>()</tt>	Use random-ordering sets within the unit of work in order to detect unit of work sorting issues.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/dynamic.py#L311'>mixin_user_query</a>(cls)</tt>	Return a new class with appenderquery functionality layered over.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/session.py#L37'>_state_session</a>(state)</tt>	Given an :class instancestate, return the :class session.
<tt style='background-color:#E8E8E8;'> orm._SessionClassMethods <a href=' /orm/session.py#L52'>close_all</a>(cls)</tt>	Close *all* sessions in memory.
<tt style='background-color:#E8E8E8;'> orm._SessionClassMethods <a href=' /orm/session.py#L59'>identity_key</a>(cls,orm_util)</tt>	Return an identity key.
<tt style='background-color:#E8E8E8;'> orm._SessionClassMethods <a href=' /orm/session.py#L69'>object_session</a>(cls,instance)</tt>	Return the :class session to which an object belongs.
<tt style='background-color:#E8E8E8;'> orm.SessionTransaction <a href=' /orm/session.py#L222'>parent</a>()</tt>	The parent :class sessiontransaction of this.
<tt style='background-color:#E8E8E8;'> orm.SessionTransaction <a href=' /orm/session.py#L334'>_restore_snapshot</a>(dirty_only)</tt>	Restore the restoration state taken before a transaction began.
<tt style='background-color:#E8E8E8;'> orm.SessionTransaction <a href=' /orm/session.py#L360'>_remove_snapshot</a>()</tt>	Remove the restoration state taken before a transaction began.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L587'>__init__</a>(bind,autoflush,expire_on_commit,_enable_transaction_accounting)</tt>	Construct a new session.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L761'>info</a>()</tt>	A user-modifiable dictionary.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L776'>begin</a>(subtransactions,nested)</tt>	Begin a transaction on this :class session.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L806'>begin_nested</a>()</tt>	Begin a nested transaction on this session.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L818'>rollback</a>()</tt>	Rollback the current transaction in progress.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L838'>commit</a>()</tt>	Flush pending changes and commit the current transaction.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L874'>prepare</a>()</tt>	Prepare the current transaction in progress for two phase commit.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L893'>connection</a>(mapper,clause,bind,close_with_result)</tt>	Return a :class connection object corresponding to this.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L976'>execute</a>(clause,params,mapper,bind)</tt>	Execute a sql expression construct or string statement within the current transaction.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1107'>scalar</a>(clause,params,mapper,bind)</tt>	Like :meth ~ session execute but return a scalar result.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1113'>close</a>()</tt>	Close this session.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1125'>invalidate</a>()</tt>	Close this session using connection invalidation.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1164'>expunge_all</a>()</tt>	Remove all object instances from this session.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1201'>bind_mapper</a>(mapper,bind)</tt>	Associate a :class mapper with a "bind", e g a :class engine.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1211'>bind_table</a>(table,bind)</tt>	Associate a :class table with a "bind", e g a :class engine.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1221'>get_bind</a>(mapper,clause)</tt>	Return a "bind" to which this :class session is bound.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1324'>query</a>()</tt>	Return a new :class query object corresponding to this.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1330'>no_autoflush</a>()</tt>	Return a context manager that disables autoflush.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1375'>refresh</a>(instance,attribute_names,lockmode)</tt>	Expire and refresh the attributes on the given instance.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1427'>expire_all</a>()</tt>	Expires all persistent instances within this session.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1460'>expire</a>(instance,attribute_names)</tt>	Expire the attributes on an instance.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1514'>_conditional_expire</a>(state)</tt>	Expire a state if persistent else expunge if pending.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1523'>prune</a>()</tt>	Remove unreferenced instances cached in the identity map.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1538'>expunge</a>(instance)</tt>	Remove the instance from this session.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1659'>add</a>(instance,_warn)</tt>	Place an object in the session.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1679'>add_all</a>(instances)</tt>	Add the given collection of instances to this session.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1698'>delete</a>(instance)</tt>	Mark an instance as deleted.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1747'>merge</a>(instance,load)</tt>	Copy the state of a given instance into a corresponding instance within this :class.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L1997'>enable_relationship_loading</a>(obj)</tt>	Associate an object with this :class session for related.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L2079'>__contains__</a>(instance)</tt>	Return true if the instance is associated with this session.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L2092'>__iter__</a>()</tt>	Iterate over all pending or persistent instances within this session.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L2103'>flush</a>(objects)</tt>	Flush all the object changes to the database.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L2259'>bulk_save_objects</a>(objects,return_defaults,update_changed_only)</tt>	Perform a bulk save of the given list of objects.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L2340'>bulk_insert_mappings</a>(mapper,mappings,return_defaults,render_nulls)</tt>	Perform a bulk insert of the given list of mapping dictionaries.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L2431'>bulk_update_mappings</a>(mapper,mappings)</tt>	Perform a bulk update of the given list of mapping dictionaries.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L2506'>is_modified</a>(instance,include_collections,passive)</tt>	Return true if the given instance has locally modified attributes.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L2597'>is_active</a>()</tt>	True if this :class session is in "transaction mode" and.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L2669'>_dirty_states</a>()</tt>	The set of all persistent states considered dirty.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L2679'>dirty</a>()</tt>	The set of all persistent instances considered dirty.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L2708'>deleted</a>()</tt>	The set of all instances marked as 'deleted' within this session.
<tt style='background-color:#E8E8E8;'> orm.Session <a href=' /orm/session.py#L2714'>new</a>()</tt>	The set of all instances marked as 'new' within this session.
<tt style='background-color:#E8E8E8;'> orm.sessionmaker <a href=' /orm/session.py#L2767'>__init__</a>(bind,class_,autoflush,autocommit)</tt>	Construct a new :class sessionmaker.
<tt style='background-color:#E8E8E8;'> orm.sessionmaker <a href=' /orm/session.py#L2809'>__call__</a>()</tt>	Produce a new :class session object using the configuration.
<tt style='background-color:#E8E8E8;'> orm.sessionmaker <a href=' /orm/session.py#L2829'>configure</a>()</tt>	Re configure the arguments for this sessionmaker.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/session.py#L2848'>make_transient</a>(instance)</tt>	Alter the state of the given instance so that it is :term transient.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/session.py#L2912'>make_transient_to_detached</a>(instance)</tt>	Make the given transient instance :term detached.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/session.py#L2952'>object_session</a>(instance)</tt>	Return the :class session to which the given instance belongs.
<tt style='background-color:#E8E8E8;'> orm.ClassManager <a href=' /orm/instrumentation.py#L118'>_all_sqla_attributes</a>(exclude)</tt>	Return an iterator of all classbound attributes that are implement :class.
<tt style='background-color:#E8E8E8;'> orm.ClassManager <a href=' /orm/instrumentation.py#L136'>_attr_has_impl</a>(key)</tt>	Return true if the given attribute is fully initialized.
<tt style='background-color:#E8E8E8;'> orm.ClassManager <a href=' /orm/instrumentation.py#L144'>_subclass_manager</a>(cls)</tt>	Create a new classmanager for a subclass of this classmanager's class.
<tt style='background-color:#E8E8E8;'> orm.ClassManager <a href=' /orm/instrumentation.py#L180'>manage</a>()</tt>	Mark this instance as the manager for its class.
<tt style='background-color:#E8E8E8;'> orm.ClassManager <a href=' /orm/instrumentation.py#L185'>dispose</a>()</tt>	Dissasociate this manager from its class.
<tt style='background-color:#E8E8E8;'> orm.ClassManager <a href=' /orm/instrumentation.py#L194'>state_getter</a>()</tt>	Return a instance -> instancestate callable.
<tt style='background-color:#E8E8E8;'> orm.ClassManager <a href=' /orm/instrumentation.py#L252'>unregister</a>()</tt>	Remove all instrumentation established by this classmanager.
<tt style='background-color:#E8E8E8;'> orm.ClassManager <a href=' /orm/instrumentation.py#L329'>_new_state_if_none</a>(instance)</tt>	Install a default instancestate if none is present.
<tt style='background-color:#E8E8E8;'> orm.ClassManager <a href=' /orm/instrumentation.py#L358'>__bool__</a>()</tt>	All classmanagers are non-zero regardless of attribute state.
<tt style='background-color:#E8E8E8;'> orm.InstrumentationFactory <a href=' /orm/instrumentation.py#L425'>_locate_extended_factory</a>(class_)</tt>	Overridden by a subclass to do an extended lookup.
<tt style='background-color:#E8E8E8;'> orm.InstrumentationFactory <a href=' /orm/instrumentation.py#L429'>_check_conflicts</a>(class_,factory)</tt>	Overridden by a subclass to test for conflicting factories.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/instrumentation.py#L455'>register_class</a>(class_)</tt>	Register class instrumentation.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/instrumentation.py#L468'>unregister_class</a>(class_)</tt>	Unregister class instrumentation.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/instrumentation.py#L474'>is_instrumented</a>(instance,key)</tt>	Return true if the given attribute on the given instance is instrumented by the attributes package.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/instrumentation.py#L486'>_generate_init</a>(class_,class_manager)</tt>	Build an __init__ decorator that triggers classmanager events.
<tt style='background-color:#E8E8E8;'> orm.InstrumentationEvents <a href=' /orm/events.py#L93'>class_instrument</a>(cls)</tt>	Called after the given class is instrumented.
<tt style='background-color:#E8E8E8;'> orm.InstrumentationEvents <a href=' /orm/events.py#L101'>class_uninstrument</a>(cls)</tt>	Called before the given class is uninstrumented.
<tt style='background-color:#E8E8E8;'> orm.InstrumentationEvents <a href=' /orm/events.py#L109'>attribute_instrument</a>(cls,key,inst)</tt>	Called when an attribute is instrumented.
<tt style='background-color:#E8E8E8;'> orm.InstanceEvents <a href=' /orm/events.py#L217'>first_init</a>(manager,cls)</tt>	Called when the first instance of a particular mapping is called.
<tt style='background-color:#E8E8E8;'> orm.InstanceEvents <a href=' /orm/events.py#L227'>init</a>(target,args,kwargs)</tt>	Receive an instance when its constructor is called.
<tt style='background-color:#E8E8E8;'> orm.InstanceEvents <a href=' /orm/events.py#L258'>init_failure</a>(target,args,kwargs)</tt>	Receive an instance when its constructor has been called and raised an exception.
<tt style='background-color:#E8E8E8;'> orm.InstanceEvents <a href=' /orm/events.py#L291'>load</a>(target,context)</tt>	Receive an object instance after it has been created via __new__, and after initial attribute population has.
<tt style='background-color:#E8E8E8;'> orm.InstanceEvents <a href=' /orm/events.py#L324'>refresh</a>(target,context,attrs)</tt>	Receive an object instance after one or more attributes have been refreshed from a query.
<tt style='background-color:#E8E8E8;'> orm.InstanceEvents <a href=' /orm/events.py#L347'>refresh_flush</a>(target,flush_context,attrs)</tt>	Receive an object instance after one or more attributes have been refreshed within the persistence of the object.
<tt style='background-color:#E8E8E8;'> orm.InstanceEvents <a href=' /orm/events.py#L370'>expire</a>(target,attrs)</tt>	Receive an object instance after its attributes or some subset have been expired.
<tt style='background-color:#E8E8E8;'> orm.InstanceEvents <a href=' /orm/events.py#L387'>pickle</a>(target,state_dict)</tt>	Receive an object instance when its associated state is being pickled.
<tt style='background-color:#E8E8E8;'> orm.InstanceEvents <a href=' /orm/events.py#L401'>unpickle</a>(target,state_dict)</tt>	Receive an object instance after its associated state has been unpickled.
<tt style='background-color:#E8E8E8;'> orm.MapperEvents <a href=' /orm/events.py#L634'>instrument_class</a>(mapper,class_)</tt>	Receive a class when the mapper is first constructed before instrumentation is applied to the mapped class.
<tt style='background-color:#E8E8E8;'> orm.MapperEvents <a href=' /orm/events.py#L657'>mapper_configured</a>(mapper,class_)</tt>	Called when a specific mapper has completed its own configuration within the scope of the :func.
<tt style='background-color:#E8E8E8;'> orm.MapperEvents <a href=' /orm/events.py#L709'>before_configured</a>()</tt>	Called before a series of mappers have been configured.
<tt style='background-color:#E8E8E8;'> orm.MapperEvents <a href=' /orm/events.py#L761'>after_configured</a>()</tt>	Called after a series of mappers have been configured.
<tt style='background-color:#E8E8E8;'> orm.MapperEvents <a href=' /orm/events.py#L812'>before_insert</a>(mapper,connection,target)</tt>	Receive an object instance before an insert statement is emitted corresponding to that instance.
<tt style='background-color:#E8E8E8;'> orm.MapperEvents <a href=' /orm/events.py#L858'>after_insert</a>(mapper,connection,target)</tt>	Receive an object instance after an insert statement is emitted corresponding to that instance.
<tt style='background-color:#E8E8E8;'> orm.MapperEvents <a href=' /orm/events.py#L904'>before_update</a>(mapper,connection,target)</tt>	Receive an object instance before an update statement is emitted corresponding to that instance.
<tt style='background-color:#E8E8E8;'> orm.MapperEvents <a href=' /orm/events.py#L969'>after_update</a>(mapper,connection,target)</tt>	Receive an object instance after an update statement is emitted corresponding to that instance.
<tt style='background-color:#E8E8E8;'> orm.MapperEvents <a href=' /orm/events.py#L1033'>before_delete</a>(mapper,connection,target)</tt>	Receive an object instance before a delete statement is emitted corresponding to that instance.
<tt style='background-color:#E8E8E8;'> orm.MapperEvents <a href=' /orm/events.py#L1073'>after_delete</a>(mapper,connection,target)</tt>	Receive an object instance after a delete statement has been emitted corresponding to that instance.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1182'>after_transaction_create</a>(session,transaction)</tt>	Execute when a new :class sessiontransaction is created.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1224'>after_transaction_end</a>(session,transaction)</tt>	Execute when the span of a :class sessiontransaction ends.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1263'>before_commit</a>(session)</tt>	Execute before commit is called.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1291'>after_commit</a>(session)</tt>	Execute after a commit has occurred.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1327'>after_rollback</a>(session)</tt>	Execute after a real dbapi rollback has occurred.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1345'>after_soft_rollback</a>(session,previous_transaction)</tt>	Execute after any rollback has occurred including "soft" rollbacks that don't actually emit at the dbapi level.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1373'>before_flush</a>(session,flush_context,instances)</tt>	Execute before flush process has started.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1393'>after_flush</a>(session,flush_context)</tt>	Execute after flush has completed but before commit has been called.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1415'>after_flush_postexec</a>(session,flush_context)</tt>	Execute after flush has completed and after the post-exec state occurs.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1439'>after_begin</a>(session,transaction,connection)</tt>	Execute after a transaction is begun on a connection.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1459'>before_attach</a>(session,instance)</tt>	Execute before an instance is attached to a session.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1478'>after_attach</a>(session,instance)</tt>	Execute after an instance is attached to a session.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1502'>after_bulk_update</a>(update_context)</tt>	Execute after a bulk update operation to the session.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1528'>after_bulk_delete</a>(delete_context)</tt>	Execute after a bulk delete operation to the session.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1554'>transient_to_pending</a>(session,instance)</tt>	Intercept the "transient to pending" transition for a specific object.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1574'>pending_to_transient</a>(session,instance)</tt>	Intercept the "pending to transient" transition for a specific object.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1594'>persistent_to_transient</a>(session,instance)</tt>	Intercept the "persistent to transient" transition for a specific object.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1613'>pending_to_persistent</a>(session,instance)</tt>	Intercept the "pending to persistent"" transition for a specific object.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1634'>detached_to_persistent</a>(session,instance)</tt>	Intercept the "detached to persistent" transition for a specific object.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1669'>loaded_as_persistent</a>(session,instance)</tt>	Intercept the "loaded as persistent" transition for a specific object.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1693'>persistent_to_deleted</a>(session,instance)</tt>	Intercept the "persistent to deleted" transition for a specific object.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1724'>deleted_to_persistent</a>(session,instance)</tt>	Intercept the "deleted to persistent" transition for a specific object.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1740'>deleted_to_detached</a>(session,instance)</tt>	Intercept the "deleted to detached" transition for a specific object.
<tt style='background-color:#E8E8E8;'> orm.SessionEvents <a href=' /orm/events.py#L1762'>persistent_to_detached</a>(session,instance)</tt>	Intercept the "persistent to detached" transition for a specific object.
<tt style='background-color:#E8E8E8;'> orm.AttributeEvents <a href=' /orm/events.py#L1899'>append</a>(target,value,initiator)</tt>	Receive a collection append event.
<tt style='background-color:#E8E8E8;'> orm.AttributeEvents <a href=' /orm/events.py#L1927'>bulk_replace</a>(target,values,initiator)</tt>	Receive a collection 'bulk replace' event.
<tt style='background-color:#E8E8E8;'> orm.AttributeEvents <a href=' /orm/events.py#L1975'>remove</a>(target,value,initiator)</tt>	Receive a collection remove event.
<tt style='background-color:#E8E8E8;'> orm.AttributeEvents <a href=' /orm/events.py#L1995'>set</a>(target,value,oldvalue,initiator)</tt>	Receive a scalar set event.
<tt style='background-color:#E8E8E8;'> orm.AttributeEvents <a href=' /orm/events.py#L2026'>init_scalar</a>(target,value,dict_)</tt>	Receive a scalar "init" event.
<tt style='background-color:#E8E8E8;'> orm.AttributeEvents <a href=' /orm/events.py#L2134'>init_collection</a>(target,collection,collection_adapter)</tt>	Receive a 'collection init' event.
<tt style='background-color:#E8E8E8;'> orm.AttributeEvents <a href=' /orm/events.py#L2168'>dispose_collection</a>(target,collection,collection_adpater)</tt>	Receive a 'collection dispose' event.
<tt style='background-color:#E8E8E8;'> orm.QueryEvents <a href=' /orm/events.py#L2207'>before_compile</a>(query)</tt>	Receive the :class query object before it is composed into a.
<tt style='background-color:#E8E8E8;'> orm.ColumnProperty <a href=' /orm/properties.py#L44'>__init__</a>()</tt>	Provide a column-level property for use with a mapper.
<tt style='background-color:#E8E8E8;'> orm.ColumnProperty <a href=' /orm/properties.py#L166'>expression</a>()</tt>	Return the primary column or expression for this columnproperty.
<tt style='background-color:#E8E8E8;'> orm._UnboundLoad <a href=' /orm/strategy_options.py#L470'>_bind_loader</a>(entities,current_path,context,raiseerr)</tt>	Convert from an _unboundload() object into a load() object.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/strategy_options.py#L680'>contains_eager</a>(loadopt,attr,alias)</tt>	Indicate that the given attribute should be eagerly loaded from columns stated manually in the query.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/strategy_options.py#L736'>load_only</a>(loadopt)</tt>	Indicate that for a particular entity only the given list of column-based attribute names should be loaded all others will be.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/strategy_options.py#L785'>joinedload</a>(loadopt,attr,innerjoin)</tt>	Indicate that the given attribute should be loaded using joined eager loading.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/strategy_options.py#L889'>subqueryload</a>(loadopt,attr)</tt>	Indicate that the given attribute should be loaded using subquery eager loading.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/strategy_options.py#L932'>selectinload</a>(loadopt,attr)</tt>	Indicate that the given attribute should be loaded using select in eager loading.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/strategy_options.py#L976'>lazyload</a>(loadopt,attr)</tt>	Indicate that the given attribute should be loaded using "lazy" loading.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/strategy_options.py#L1004'>immediateload</a>(loadopt,attr)</tt>	Indicate that the given attribute should be loaded using an immediate load with a per-attribute select statement.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/strategy_options.py#L1033'>noload</a>(loadopt,attr)</tt>	Indicate that the given relationship attribute should remain unloaded.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/strategy_options.py#L1057'>raiseload</a>(loadopt,attr,sql_only)</tt>	Indicate that the given relationship attribute should disallow lazy loads.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/strategy_options.py#L1098'>defaultload</a>(loadopt,attr)</tt>	Indicate an attribute should load using its default loader style.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/strategy_options.py#L1139'>defer</a>(loadopt,key)</tt>	Indicate that the given column-oriented attribute should be deferred e g.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/strategy_options.py#L1203'>undefer</a>(loadopt,key)</tt>	Indicate that the given column-oriented attribute should be undeferred e.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/strategy_options.py#L1250'>undefer_group</a>(loadopt,name)</tt>	Indicate that columns within the given deferred group name should be undeferred.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/base.py#L193'>_generative</a>()</tt>	Mark a method as generative e g method-chained.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/base.py#L216'>instance_str</a>(instance)</tt>	Return a string describing an instance.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/base.py#L222'>state_str</a>(state)</tt>	Return a string describing an instance via its instancestate.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/base.py#L231'>state_class_str</a>(state)</tt>	Return a string describing an instance's class via its instancestate.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/base.py#L250'>object_mapper</a>(instance)</tt>	Given an object return the primary mapper associated with the object instance.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/base.py#L269'>object_state</a>(instance)</tt>	Given an object return the :class instancestate.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/base.py#L313'>_mapper_or_none</a>(entity)</tt>	Return the :class mapper for the given class or none if the.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/base.py#L325'>_is_mapped_class</a>(entity)</tt>	Return true if the given object is a mapped class :class.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/base.py#L359'>_entity_descriptor</a>(entity,key)</tt>	Return a class attribute given an entity and string name.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/base.py#L404'>class_mapper</a>(class_,configure)</tt>	Given a class return the primary :class mapper associated.
<tt style='background-color:#E8E8E8;'> orm.InspectionAttrInfo <a href=' /orm/base.py#L507'>info</a>()</tt>	Info dictionary associated with the object allowing user-defined data to be associated with this :class.
<tt style='background-color:#E8E8E8;'> orm.CompositeProperty <a href=' /orm/descriptor_props.py#L93'>__init__</a>(class_)</tt>	Return a composite column-based property for use with a mapper.
<tt style='background-color:#E8E8E8;'> orm.CompositeProperty <a href=' /orm/descriptor_props.py#L165'>do_init</a>()</tt>	Initialization which occurs after the :class compositeproperty.
<tt style='background-color:#E8E8E8;'> orm.CompositeProperty <a href=' /orm/descriptor_props.py#L172'>_create_descriptor</a>()</tt>	Create the python descriptor that will serve as the access point on instances of the mapped class.
<tt style='background-color:#E8E8E8;'> orm.CompositeProperty <a href=' /orm/descriptor_props.py#L263'>_setup_arguments_on_columns</a>()</tt>	Propagate configuration arguments made on this composite to the target columns for those that apply.
<tt style='background-color:#E8E8E8;'> orm.CompositeProperty <a href=' /orm/descriptor_props.py#L277'>_setup_event_handlers</a>()</tt>	Establish events that populate/expire the composite attribute.
<tt style='background-color:#E8E8E8;'> orm.CompositeProperty <a href=' /orm/descriptor_props.py#L337'>get_history</a>(state,dict_,passive)</tt>	Provided for userland code that uses attributes get_history().
<tt style='background-color:#E8E8E8;'> orm.SynonymProperty <a href=' /orm/descriptor_props.py#L519'>__init__</a>(name,map_column,descriptor,comparator_factory)</tt>	Denote an attribute name as a synonym to a mapped property in that the attribute will mirror the value and expression behavior.
<tt style='background-color:#E8E8E8;'> orm.ComparableProperty <a href=' /orm/descriptor_props.py#L641'>__init__</a>(comparator_factory,descriptor,doc,info)</tt>	Provides a method of applying a :class propcomparator.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L90'>__init__</a>(class_,local_table,properties,primary_key)</tt>	Return a new :class ~ mapper object.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L690'>mapper</a>()</tt>	Part of the inspection api.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L699'>entity</a>()</tt>	Part of the inspection api.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L939'>_configure_inheritance</a>()</tt>	Configure settings related to inherting and/or inherited mappers being present.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L1081'>_set_concrete_base</a>(mapper)</tt>	Set the given :class mapper as the 'inherits' for this.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L1137'>_configure_class_instrumentation</a>()</tt>	If this mapper is to be a primary mapper (i e the.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L1218'>_configure_all</a>(cls)</tt>	Class-level path to the :func configure_mappers call.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L1373'>_configure_polymorphic_setter</a>(init)</tt>	Configure an attribute on the mapper representing the 'polymorphic_on' column if applicable and not.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L1674'>_property_from_column</a>(key,prop)</tt>	Generate/update a :class columnproprerty given a.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L1750'>_post_configure_properties</a>()</tt>	Call the init() method on all mapperproperties attached to this mapper.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L1773'>add_properties</a>(dict_of_properties)</tt>	Add the given dictionary of properties to this mapper using add_property.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L1781'>add_property</a>(key,prop)</tt>	Add an individual mapperproperty to this mapper.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L1851'>get_property</a>(key,_configure_mappers)</tt>	Return a mapperproperty associated with the given key.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L1864'>get_property_by_column</a>(column)</tt>	Given a :class column object return the.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L1870'>iterate_properties</a>()</tt>	Return an iterator of all mapperproperty objects.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L1877'>_mappers_from_spec</a>(spec,selectable)</tt>	Given a with_polymorphic() argument return the set of mappers it represents.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L1910'>_selectable_from_mappers</a>(mappers,innerjoin)</tt>	Given a list of mappers (assumed to be within this mapper's inheritance hierarchy), construct an outerjoin amongst those mapper's.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2072'>selectable</a>()</tt>	The :func select construct this :class mapper selects from.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2105'>_iterate_polymorphic_properties</a>(mappers)</tt>	Return an iterator of mapperproperty objects which will render into a select.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2130'>attrs</a>()</tt>	A namespace of all :class mapperproperty objects.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2168'>all_orm_descriptors</a>()</tt>	A namespace of all :class inspectionattr attributes associated.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2216'>synonyms</a>()</tt>	Return a namespace of all :class synonymproperty.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2229'>column_attrs</a>()</tt>	Return a namespace of all :class columnproperty.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2242'>relationships</a>()</tt>	A namespace of all :class relationshipproperty properties.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2267'>composites</a>()</tt>	Return a namespace of all :class compositeproperty.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2288'>_get_clause</a>()</tt>	Create a "get clause" based on the primary key this is used.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2300'>_equivalent_columns</a>()</tt>	Create a map of all *equivalent* columns based on the determination of column pairs that are equated to.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2349'>_should_exclude</a>(name,assigned_name,local,column)</tt>	Determine whether a particular property should be implicitly present on the class.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2387'>common_parent</a>(other)</tt>	Return true if the given mapper shares a common inherited parent as this mapper.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2400'>isa</a>(other)</tt>	Return true if the this mapper inherits from the given mapper.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2414'>self_and_descendants</a>()</tt>	The collection including this mapper and all descendant mappers.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2430'>polymorphic_iterator</a>()</tt>	Iterate through the collection including this mapper and all descendant mappers.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2443'>primary_mapper</a>()</tt>	Return the primary mapper corresponding to this mapper's class key class.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2463'>identity_key_from_row</a>(row,adapter)</tt>	Return an identity-map key for use in storing/retrieving an item from the identity map.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2481'>identity_key_from_primary_key</a>(primary_key)</tt>	Return an identity-map key for use in storing/retrieving an item from an identity map.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2490'>identity_key_from_instance</a>(instance)</tt>	Return the identity key for the given instance based on its primary key attributes.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2515'>primary_key_from_instance</a>(instance)</tt>	Return the list of primary key values for the given instance.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2588'>_optimized_get_statement</a>(state,attribute_names)</tt>	Assemble a where clause which retrieves a given state by primary key using a minimized set of tables.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2664'>cascade_iterator</a>(type_,state,halt_on)</tt>	Iterate each element and its mapper in an object graph for all relationships that meet the given cascade rule.
<tt style='background-color:#E8E8E8;'> orm.Mapper <a href=' /orm/mapper.py#L2790'>_table_to_equated</a>()</tt>	Memoized map of tables to collections of columns to be synchronized upwards to the base mapper.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/mapper.py#L2811'>configure_mappers</a>()</tt>	Initialize the inter-mapper relationships of all mappers that have been constructed thus far.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/mapper.py#L2897'>reconstructor</a>(fn)</tt>	Decorate a method as the 'reconstructor' hook.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/mapper.py#L2917'>validates</a>()</tt>	Decorate a method as a 'validator' for one or more named properties.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/mapper.py#L2972'>_event_on_first_init</a>(manager,cls)</tt>	Initial mapper compilation trigger.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/mapper.py#L2986'>_event_on_init</a>(state,args,kwargs)</tt>	Run init_instance hooks.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L227'>column_mapped_collection</a>(mapping_spec)</tt>	A dictionary-based collection type with column-based keying.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L259'>attribute_mapped_collection</a>(attr_name)</tt>	A dictionary-based collection type with attribute-based keying.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L276'>mapped_collection</a>(keyfunc)</tt>	A dictionary-based collection type with arbitrary keying.
<tt style='background-color:#E8E8E8;'> orm.collection <a href=' /orm/collections.py#L317'>appender</a>(fn)</tt>	Tag the method as the collection appender.
<tt style='background-color:#E8E8E8;'> orm.collection <a href=' /orm/collections.py#L361'>remover</a>(fn)</tt>	Tag the method as the collection remover.
<tt style='background-color:#E8E8E8;'> orm.collection <a href=' /orm/collections.py#L388'>iterator</a>(fn)</tt>	Tag the method as the collection remover.
<tt style='background-color:#E8E8E8;'> orm.collection <a href=' /orm/collections.py#L402'>internally_instrumented</a>(fn)</tt>	Tag the method as instrumented.
<tt style='background-color:#E8E8E8;'> orm.collection <a href=' /orm/collections.py#L423'>linker</a>(fn)</tt>	Tag the method as a "linked to attribute" event handler.
<tt style='background-color:#E8E8E8;'> orm.collection <a href=' /orm/collections.py#L444'>converter</a>(fn)</tt>	Tag the method as the collection converter.
<tt style='background-color:#E8E8E8;'> orm.collection <a href=' /orm/collections.py#L477'>adds</a>(arg)</tt>	Mark the method as adding an entity to the collection.
<tt style='background-color:#E8E8E8;'> orm.collection <a href=' /orm/collections.py#L498'>replaces</a>(arg)</tt>	Mark the method as replacing an entity in the collection.
<tt style='background-color:#E8E8E8;'> orm.collection <a href=' /orm/collections.py#L519'>removes</a>(arg)</tt>	Mark the method as removing an entity in the collection.
<tt style='background-color:#E8E8E8;'> orm.collection <a href=' /orm/collections.py#L540'>removes_return</a>()</tt>	Mark the method as removing an entity in the collection.
<tt style='background-color:#E8E8E8;'> orm.CollectionAdapter <a href=' /orm/collections.py#L593'>data</a>()</tt>	The entity collection being adapted.
<tt style='background-color:#E8E8E8;'> orm.CollectionAdapter <a href=' /orm/collections.py#L598'>_referenced_by_owner</a>()</tt>	Return true if the owner state still refers to this collection.
<tt style='background-color:#E8E8E8;'> orm.CollectionAdapter <a href=' /orm/collections.py#L611'>append_with_event</a>(item,initiator)</tt>	Add an entity to the collection firing mutation events.
<tt style='background-color:#E8E8E8;'> orm.CollectionAdapter <a href=' /orm/collections.py#L616'>append_without_event</a>(item)</tt>	Add or restore an entity to the collection firing no events.
<tt style='background-color:#E8E8E8;'> orm.CollectionAdapter <a href=' /orm/collections.py#L620'>append_multiple_without_event</a>(items)</tt>	Add or restore an entity to the collection firing no events.
<tt style='background-color:#E8E8E8;'> orm.CollectionAdapter <a href=' /orm/collections.py#L629'>remove_with_event</a>(item,initiator)</tt>	Remove an entity from the collection firing mutation events.
<tt style='background-color:#E8E8E8;'> orm.CollectionAdapter <a href=' /orm/collections.py#L633'>remove_without_event</a>(item)</tt>	Remove an entity from the collection firing no events.
<tt style='background-color:#E8E8E8;'> orm.CollectionAdapter <a href=' /orm/collections.py#L637'>clear_with_event</a>(initiator)</tt>	Empty the collection firing a mutation event for each entity.
<tt style='background-color:#E8E8E8;'> orm.CollectionAdapter <a href=' /orm/collections.py#L644'>clear_without_event</a>()</tt>	Empty the collection firing no events.
<tt style='background-color:#E8E8E8;'> orm.CollectionAdapter <a href=' /orm/collections.py#L651'>__iter__</a>()</tt>	Iterate over entities in the collection.
<tt style='background-color:#E8E8E8;'> orm.CollectionAdapter <a href=' /orm/collections.py#L656'>__len__</a>()</tt>	Count entities in the collection.
<tt style='background-color:#E8E8E8;'> orm.CollectionAdapter <a href=' /orm/collections.py#L665'>fire_append_event</a>(item,initiator)</tt>	Notify that a entity has entered the collection.
<tt style='background-color:#E8E8E8;'> orm.CollectionAdapter <a href=' /orm/collections.py#L684'>fire_remove_event</a>(item,initiator)</tt>	Notify that a entity has been removed from the collection.
<tt style='background-color:#E8E8E8;'> orm.CollectionAdapter <a href=' /orm/collections.py#L700'>fire_pre_remove_event</a>(initiator)</tt>	Notify that an entity is about to be removed from the collection.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L731'>bulk_replace</a>(values,existing_adapter,new_adapter,initiator)</tt>	Load a new collection firing events based on prior like membership.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L771'>prepare_instrumentation</a>(factory)</tt>	Prepare a callable for future use as a collection class factory.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L806'>__converting_factory</a>(specimen_cls,original_factory)</tt>	Return a wrapper that converts a "canned" collection like set dict list into the instrumented* version.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L825'>_instrument_class</a>(cls)</tt>	Modify methods in a class and install instrumentation.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L845'>_locate_roles_and_methods</a>(cls)</tt>	Search for _sa_instrument_role-decorated methods in method resolution order assign to roles.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L884'>_setup_canned_roles</a>(cls,roles,methods)</tt>	See if this class has "canned" roles based on a known collection type dict set list.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L905'>_assert_required_roles</a>(cls,roles,methods)</tt>	Ensure all roles are present and apply implicit instrumentation if.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L932'>_set_collection_attributes</a>(cls,roles,methods)</tt>	Apply ad-hoc instrumentation from decorators class-level defaults.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L952'>_instrument_membership_mutator</a>(method,before,argument,after)</tt>	Route method args and/or return value through the collection adapter.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L1010'>__set</a>(collection,item,_sa_initiator)</tt>	Run set events may eventually be inlined into decorators.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L1020'>__del</a>(collection,item,_sa_initiator)</tt>	Run del events may eventually be inlined into decorators.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L1028'>__before_delete</a>(collection,_sa_initiator)</tt>	Special method to run 'commit existing value' methods.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L1035'>_list_decorators</a>()</tt>	Tailored instrumentation wrappers for any list-like class.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L1184'>_dict_decorators</a>()</tt>	Tailored instrumentation wrappers for any dict-like mapping class.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L1274'>_set_binops_check_strict</a>(obj)</tt>	Allow only set frozenset and self __class__-derived.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L1280'>_set_binops_check_loose</a>(obj)</tt>	Allow anything set-like to participate in set binops.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/collections.py#L1286'>_set_decorators</a>()</tt>	Tailored instrumentation wrappers for any set-like class.
<tt style='background-color:#E8E8E8;'> orm.MappedCollection <a href=' /orm/collections.py#L1479'>__init__</a>(keyfunc)</tt>	Create a new collection with keying provided by keyfunc.
<tt style='background-color:#E8E8E8;'> orm.MappedCollection <a href=' /orm/collections.py#L1495'>set</a>(value,_sa_initiator)</tt>	Add an item by value consulting the keyfunc for the key.
<tt style='background-color:#E8E8E8;'> orm.MappedCollection <a href=' /orm/collections.py#L1503'>remove</a>(value,_sa_initiator)</tt>	Remove an item by value consulting the keyfunc for the key.
<tt style='background-color:#E8E8E8;'> orm.MappedCollection <a href=' /orm/collections.py#L1520'>_convert</a>(dictlike)</tt>	Validate and convert a dict-like object into values for set()ing.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/relationships.py#L36'>remote</a>(expr)</tt>	Annotate a portion of a primaryjoin expression with a 'remote' annotation.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/relationships.py#L56'>foreign</a>(expr)</tt>	Annotate a portion of a primaryjoin expression with a 'foreign' annotation.
<tt style='background-color:#E8E8E8;'> orm.RelationshipProperty <a href=' /orm/relationships.py#L95'>__init__</a>(argument,secondary,primaryjoin,secondaryjoin)</tt>	Provide a relationship between two mapped classes.
<tt style='background-color:#E8E8E8;'> orm.RelationshipProperty <a href=' /orm/relationships.py#L1518'>_value_as_iterable</a>(state,dict_,key,passive)</tt>	Return a list of tuples state obj for the given key.
<tt style='background-color:#E8E8E8;'> orm.RelationshipProperty <a href=' /orm/relationships.py#L1613'>mapper</a>()</tt>	Return the targeted :class mapper for this.
<tt style='background-color:#E8E8E8;'> orm.RelationshipProperty <a href=' /orm/relationships.py#L1639'>table</a>()</tt>	Return the selectable linked to this :class.
<tt style='background-color:#E8E8E8;'> orm.RelationshipProperty <a href=' /orm/relationships.py#L1659'>_process_dependent_arguments</a>()</tt>	Convert incoming configuration arguments to their proper form.
<tt style='background-color:#E8E8E8;'> orm.RelationshipProperty <a href=' /orm/relationships.py#L1738'>_check_conflicts</a>()</tt>	Test that this relationship is legal warn about inheritance conflicts.
<tt style='background-color:#E8E8E8;'> orm.RelationshipProperty <a href=' /orm/relationships.py#L1754'>_get_cascade</a>()</tt>	Return the current cascade setting for this :class.
<tt style='background-color:#E8E8E8;'> orm.RelationshipProperty <a href=' /orm/relationships.py#L1799'>_columns_are_mapped</a>()</tt>	Return true if all columns in the given collection are mapped by the tables referenced by this :class.
<tt style='background-color:#E8E8E8;'> orm.RelationshipProperty <a href=' /orm/relationships.py#L1813'>_generate_backref</a>()</tt>	Interpret the 'backref' instruction to create a :func.
<tt style='background-color:#E8E8E8;'> orm.RelationshipProperty <a href=' /orm/relationships.py#L1887'>_use_get</a>()</tt>	Memoize the 'use_get' attribute of this relationshiploader's lazyloader.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2023'>_determine_joins</a>()</tt>	Determine the 'primaryjoin' and 'secondaryjoin' attributes if not passed to the constructor already.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2123'>primaryjoin_reverse_remote</a>()</tt>	Return the primaryjoin condition suitable for the "reverse" direction.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2171'>_annotate_fks</a>()</tt>	Annotate the primaryjoin and secondaryjoin structures with 'foreign' annotations marking columns.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2249'>_refers_to_parent_table</a>()</tt>	Return true if the join condition contains column comparisons where both columns are in both tables.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2276'>_tables_overlap</a>()</tt>	Return true if parent/child tables have some overlap.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2282'>_annotate_remote</a>()</tt>	Annotate the primaryjoin and secondaryjoin structures with 'remote' annotations marking columns.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2302'>_annotate_remote_secondary</a>()</tt>	Annotate 'remote' in primaryjoin secondaryjoin when 'secondary' is present.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2315'>_annotate_selfref</a>(fn,remote_side_given)</tt>	Annotate 'remote' in primaryjoin secondaryjoin when the relationship is detected as self-referential.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2337'>_annotate_remote_from_args</a>()</tt>	Annotate 'remote' in primaryjoin secondaryjoin when the 'remote_side' or '_local_remote_pairs'.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2363'>_annotate_remote_with_overlap</a>()</tt>	Annotate 'remote' in primaryjoin secondaryjoin when the parent/child tables have some set of.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2400'>_annotate_remote_distinct_selectables</a>()</tt>	Annotate 'remote' in primaryjoin secondaryjoin when the parent/child tables are entirely.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2424'>_annotate_local</a>()</tt>	Annotate the primaryjoin and secondaryjoin structures with 'local' annotations.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2477'>_check_foreign_cols</a>(join_condition,primary)</tt>	Check the foreign key columns collected and emit error messages.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2531'>_determine_direction</a>()</tt>	Determine if this relationship is one to many many to one many to many.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2610'>_deannotate_pairs</a>(collection)</tt>	Provide deannotation for the various lists of pairs so that using them in hashes doesn't incur.
<tt style='background-color:#E8E8E8;'> orm.JoinCondition <a href=' /orm/relationships.py#L2741'>join_targets</a>(source_selectable,dest_selectable,aliased,single_crit)</tt>	Given a source and destination selectable create a join between them.
<tt style='background-color:#E8E8E8;'> orm.MapperProperty <a href=' /orm/interfaces.py#L86'>_memoized_attr_info</a>()</tt>	Info dictionary associated with the object allowing user-defined data to be associated with this :class.
<tt style='background-color:#E8E8E8;'> orm.MapperProperty <a href=' /orm/interfaces.py#L112'>setup</a>(context,entity,path,adapter)</tt>	Called by query for the purposes of constructing a sql statement.
<tt style='background-color:#E8E8E8;'> orm.MapperProperty <a href=' /orm/interfaces.py#L121'>create_row_processor</a>(context,path,mapper,result)</tt>	Produce row processing functions and append to the given set of populators lists.
<tt style='background-color:#E8E8E8;'> orm.MapperProperty <a href=' /orm/interfaces.py#L128'>cascade_iterator</a>(type_,state,visited_instances,halt_on)</tt>	Iterate through instances related to the given instance for a particular 'cascade', starting with this mapperproperty.
<tt style='background-color:#E8E8E8;'> orm.MapperProperty <a href=' /orm/interfaces.py#L144'>set_parent</a>(parent,init)</tt>	Set the parent mapper that references this mapperproperty.
<tt style='background-color:#E8E8E8;'> orm.MapperProperty <a href=' /orm/interfaces.py#L153'>instrument_class</a>(mapper)</tt>	Hook called by the mapper to the property to initiate instrumentation of the class attribute managed by this.
<tt style='background-color:#E8E8E8;'> orm.MapperProperty <a href=' /orm/interfaces.py#L177'>init</a>()</tt>	Called after all mappers are created to assemble relationships between mappers and perform other post-mapper-creation.
<tt style='background-color:#E8E8E8;'> orm.MapperProperty <a href=' /orm/interfaces.py#L187'>class_attribute</a>()</tt>	Return the class-bound descriptor corresponding to this :class.
<tt style='background-color:#E8E8E8;'> orm.MapperProperty <a href=' /orm/interfaces.py#L213'>do_init</a>()</tt>	Perform subclass-specific initialization post-mapper-creation steps.
<tt style='background-color:#E8E8E8;'> orm.MapperProperty <a href=' /orm/interfaces.py#L222'>post_instrument_class</a>(mapper)</tt>	Perform instrumentation adjustments that need to occur after init() has completed.
<tt style='background-color:#E8E8E8;'> orm.MapperProperty <a href=' /orm/interfaces.py#L237'>merge</a>(session,source_state,source_dict,dest_state)</tt>	Merge the attribute represented by this mapperproperty from source to destination object.
<tt style='background-color:#E8E8E8;'> orm.PropComparator <a href=' /orm/interfaces.py#L354'>adapt_to_entity</a>(adapt_to_entity)</tt>	Return a copy of this propcomparator which will use the given :class.
<tt style='background-color:#E8E8E8;'> orm.PropComparator <a href=' /orm/interfaces.py#L360'>_parentmapper</a>()</tt>	Legacy this is renamed to _parententity to be compatible with queryableattribute.
<tt style='background-color:#E8E8E8;'> orm.PropComparator <a href=' /orm/interfaces.py#L366'>adapter</a>()</tt>	Produce a callable that adapts column expressions to suit an aliased version of this comparator.
<tt style='background-color:#E8E8E8;'> orm.PropComparator <a href=' /orm/interfaces.py#L393'>of_type</a>(class_)</tt>	Redefine this object in terms of a polymorphic subclass.
<tt style='background-color:#E8E8E8;'> orm.PropComparator <a href=' /orm/interfaces.py#L412'>any</a>(criterion)</tt>	Return true if this collection contains any member that meets the given criterion.
<tt style='background-color:#E8E8E8;'> orm.PropComparator <a href=' /orm/interfaces.py#L430'>has</a>(criterion)</tt>	Return true if this element references a member which meets the given criterion.
<tt style='background-color:#E8E8E8;'> orm.MapperOption <a href=' /orm/interfaces.py#L580'>process_query</a>(query)</tt>	Apply a modification to the given :class query.
<tt style='background-color:#E8E8E8;'> orm.MapperOption <a href=' /orm/interfaces.py#L583'>process_query_conditionally</a>(query)</tt>	Same as process_query(), except that this option may not apply to the given query.
<tt style='background-color:#E8E8E8;'> orm.MapperOption <a href=' /orm/interfaces.py#L596'>_generate_cache_key</a>(path)</tt>	Used by the baked loader to see if this option can be cached.
<tt style='background-color:#E8E8E8;'> orm.LoaderStrategy <a href=' /orm/interfaces.py#L657'>setup_query</a>(context,entity,path,loadopt)</tt>	Establish column and other state for a given querycontext.
<tt style='background-color:#E8E8E8;'> orm.LoaderStrategy <a href=' /orm/interfaces.py#L667'>create_row_processor</a>(context,path,loadopt,mapper)</tt>	Establish row processing functions for a given querycontext.
<tt style='background-color:#E8E8E8;'> orm.MapperExtension <a href=' /orm/deprecated_interfaces.py#L118'>instrument_class</a>(mapper,class_)</tt>	Receive a class when the mapper is first constructed and has applied instrumentation to the mapped class.
<tt style='background-color:#E8E8E8;'> orm.MapperExtension <a href=' /orm/deprecated_interfaces.py#L128'>init_instance</a>(mapper,class_,oldinit,instance)</tt>	Receive an instance when its constructor is called.
<tt style='background-color:#E8E8E8;'> orm.MapperExtension <a href=' /orm/deprecated_interfaces.py#L141'>init_failed</a>(mapper,class_,oldinit,instance)</tt>	Receive an instance when its constructor has been called and raised an exception.
<tt style='background-color:#E8E8E8;'> orm.MapperExtension <a href=' /orm/deprecated_interfaces.py#L155'>reconstruct_instance</a>(mapper,instance)</tt>	Receive an object instance after it has been created via __new__, and after initial attribute population has.
<tt style='background-color:#E8E8E8;'> orm.MapperExtension <a href=' /orm/deprecated_interfaces.py#L175'>before_insert</a>(mapper,connection,instance)</tt>	Receive an object instance before that instance is inserted into its table.
<tt style='background-color:#E8E8E8;'> orm.MapperExtension <a href=' /orm/deprecated_interfaces.py#L196'>after_insert</a>(mapper,connection,instance)</tt>	Receive an object instance after that instance is inserted.
<tt style='background-color:#E8E8E8;'> orm.MapperExtension <a href=' /orm/deprecated_interfaces.py#L206'>before_update</a>(mapper,connection,instance)</tt>	Receive an object instance before that instance is updated.
<tt style='background-color:#E8E8E8;'> orm.MapperExtension <a href=' /orm/deprecated_interfaces.py#L238'>after_update</a>(mapper,connection,instance)</tt>	Receive an object instance after that instance is updated.
<tt style='background-color:#E8E8E8;'> orm.MapperExtension <a href=' /orm/deprecated_interfaces.py#L248'>before_delete</a>(mapper,connection,instance)</tt>	Receive an object instance before that instance is deleted.
<tt style='background-color:#E8E8E8;'> orm.MapperExtension <a href=' /orm/deprecated_interfaces.py#L263'>after_delete</a>(mapper,connection,instance)</tt>	Receive an object instance after that instance is deleted.
<tt style='background-color:#E8E8E8;'> orm.SessionExtension <a href=' /orm/deprecated_interfaces.py#L322'>before_commit</a>(session)</tt>	Execute right before commit is called.
<tt style='background-color:#E8E8E8;'> orm.SessionExtension <a href=' /orm/deprecated_interfaces.py#L328'>after_commit</a>(session)</tt>	Execute after a commit has occurred.
<tt style='background-color:#E8E8E8;'> orm.SessionExtension <a href=' /orm/deprecated_interfaces.py#L334'>after_rollback</a>(session)</tt>	Execute after a rollback has occurred.
<tt style='background-color:#E8E8E8;'> orm.SessionExtension <a href=' /orm/deprecated_interfaces.py#L340'>before_flush</a>(session,flush_context,instances)</tt>	Execute before flush process has started.
<tt style='background-color:#E8E8E8;'> orm.SessionExtension <a href=' /orm/deprecated_interfaces.py#L346'>after_flush</a>(session,flush_context)</tt>	Execute after flush has completed but before commit has been called.
<tt style='background-color:#E8E8E8;'> orm.SessionExtension <a href=' /orm/deprecated_interfaces.py#L354'>after_flush_postexec</a>(session,flush_context)</tt>	Execute after flush has completed and after the post-exec state occurs.
<tt style='background-color:#E8E8E8;'> orm.SessionExtension <a href=' /orm/deprecated_interfaces.py#L363'>after_begin</a>(session,transaction,connection)</tt>	Execute after a transaction is begun on a connection transaction is the sessiontransaction.
<tt style='background-color:#E8E8E8;'> orm.SessionExtension <a href=' /orm/deprecated_interfaces.py#L369'>after_attach</a>(session,instance)</tt>	Execute after an instance is attached to a session.
<tt style='background-color:#E8E8E8;'> orm.SessionExtension <a href=' /orm/deprecated_interfaces.py#L374'>after_bulk_update</a>(session,query,query_context,result)</tt>	Execute after a bulk update operation to the session.
<tt style='background-color:#E8E8E8;'> orm.SessionExtension <a href=' /orm/deprecated_interfaces.py#L384'>after_bulk_delete</a>(session,query,query_context,result)</tt>	Execute after a bulk delete operation to the session.
<tt style='background-color:#E8E8E8;'> orm.AttributeExtension <a href=' /orm/deprecated_interfaces.py#L463'>append</a>(state,value,initiator)</tt>	Receive a collection append event.
<tt style='background-color:#E8E8E8;'> orm.AttributeExtension <a href=' /orm/deprecated_interfaces.py#L472'>remove</a>(state,value,initiator)</tt>	Receive a remove event.
<tt style='background-color:#E8E8E8;'> orm.AttributeExtension <a href=' /orm/deprecated_interfaces.py#L480'>set</a>(state,value,oldvalue,initiator)</tt>	Receive a set event.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/unitofwork.py#L23'>track_cascade_events</a>(descriptor,prop)</tt>	Establish event listeners on object attributes which handle cascade-on-set/append.
<tt style='background-color:#E8E8E8;'> orm.UOWTransaction <a href=' /orm/unitofwork.py#L159'>was_already_deleted</a>(state)</tt>	Return true if the given state is expired and was deleted previously.
<tt style='background-color:#E8E8E8;'> orm.UOWTransaction <a href=' /orm/unitofwork.py#L171'>is_deleted</a>(state)</tt>	Return true if the given state is marked as deleted within this uowtransaction.
<tt style='background-color:#E8E8E8;'> orm.UOWTransaction <a href=' /orm/unitofwork.py#L184'>remove_state_actions</a>(state)</tt>	Remove pending actions for a state from the uowtransaction.
<tt style='background-color:#E8E8E8;'> orm.UOWTransaction <a href=' /orm/unitofwork.py#L191'>get_attribute_history</a>(state,key,passive)</tt>	Facade to attributes get_state_history(), including.
<tt style='background-color:#E8E8E8;'> orm.UOWTransaction <a href=' /orm/unitofwork.py#L287'>_mapper_for_dep</a>()</tt>	Return a dynamic mapping of mapper dependencyprocessor to true or false indicating if the dependencyprocessor operates.
<tt style='background-color:#E8E8E8;'> orm.UOWTransaction <a href=' /orm/unitofwork.py#L301'>filter_states_for_dep</a>(dep,states)</tt>	Filter the given list of instancestates to those relevant to the given dependencyprocessor.
<tt style='background-color:#E8E8E8;'> orm.UOWTransaction <a href=' /orm/unitofwork.py#L316'>_generate_actions</a>()</tt>	Generate the full unsorted collection of postsortrecs as well as dependency pairs for this uowtransaction.
<tt style='background-color:#E8E8E8;'> orm.UOWTransaction <a href=' /orm/unitofwork.py#L391'>finalize_flush_changes</a>()</tt>	Mark processed objects as clean / deleted after a successful flush().
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/__init__.py#L73'>create_session</a>(bind)</tt>	Create a new :class session.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/__init__.py#L112'>relation</a>()</tt>	A synonym for :func relationship.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/__init__.py#L118'>dynamic_loader</a>(argument)</tt>	Construct a dynamically-loading mapper property.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/__init__.py#L142'>backref</a>(name)</tt>	Create a back reference with explicit keyword arguments which are the same arguments one can send to :func relationship.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/__init__.py#L161'>deferred</a>()</tt>	Indicate a column-based mapped attribute that by default will not load unless accessed.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/__init__.py#L188'>compile_mappers</a>()</tt>	Initialize the inter-mapper relationships of all mappers that have been defined.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/__init__.py#L198'>clear_mappers</a>()</tt>	Remove all mappers from all classes.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/__init__.py#L253'>eagerload</a>()</tt>	A synonym for :func joinedload().
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/__init__.py#L258'>eagerload_all</a>()</tt>	A synonym for :func joinedload_all().
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/loading.py#L31'>instances</a>(query,cursor,context)</tt>	Return an orm result as an iterator.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/loading.py#L99'>merge_result</a>(querylib,query,iterator,load)</tt>	Merge a result into this :class query object's session.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/loading.py#L142'>get_from_identity</a>(session,key,passive)</tt>	Look up the given key in the given session's identity map check the object for expired state if found.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/loading.py#L171'>load_on_ident</a>(query,key,refresh_state,lockmode)</tt>	Load the given identity key from the database.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/loading.py#L279'>_instance_processor</a>(mapper,context,result,path)</tt>	Produce a mapper level row processor callable which processes rows into mapped instances.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/loading.py#L694'>load_scalar_attributes</a>(mapper,state,attribute_names)</tt>	Initiate a column-based attribute refresh operation.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L131'>save_obj</a>(base_mapper,states,uowtransaction,single)</tt>	Issue insert and/or update statements for a list of objects.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L199'>post_update</a>(base_mapper,states,uowtransaction,post_update_cols)</tt>	Issue update statements on behalf of a relationship() which specifies post_update.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L230'>delete_obj</a>(base_mapper,states,uowtransaction)</tt>	Issue delete statements for a list of objects.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L265'>_organize_states_for_save</a>(base_mapper,states,uowtransaction)</tt>	Make an initial pass across a set of states for insert or update.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L334'>_organize_states_for_post_update</a>(base_mapper,states,uowtransaction)</tt>	Make an initial pass across a set of states for update corresponding to post_update.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L347'>_organize_states_for_delete</a>(base_mapper,states,uowtransaction)</tt>	Make an initial pass across a set of states for delete.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L373'>_collect_insert_commands</a>(table,states_to_insert,bulk,return_defaults)</tt>	Identify sets of values to use in insert statements for a list of states.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L437'>_collect_update_commands</a>(uowtransaction,table,states_to_update,bulk)</tt>	Identify sets of values to use in update statements for a list of states.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L565'>_collect_post_update_commands</a>(base_mapper,uowtransaction,table,states_to_update)</tt>	Identify sets of values to use in update statements for a list of states within a post_update operation.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L600'>_collect_delete_commands</a>(base_mapper,uowtransaction,table,states_to_delete)</tt>	Identify values to use in delete statements for a list of states to be deleted.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L629'>_emit_update_statements</a>(base_mapper,uowtransaction,cached_connections,mapper)</tt>	Emit update statements corresponding to value lists collected by _collect_update_commands().
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L768'>_emit_insert_statements</a>(base_mapper,uowtransaction,cached_connections,mapper)</tt>	Emit insert statements corresponding to value lists collected by _collect_insert_commands().
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L861'>_emit_post_update_statements</a>(base_mapper,uowtransaction,cached_connections,mapper)</tt>	Emit update statements corresponding to value lists collected by _collect_post_update_commands().
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L893'>_emit_delete_statements</a>(base_mapper,uowtransaction,cached_connections,mapper)</tt>	Emit delete statements corresponding to value lists collected by _collect_delete_commands().
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L976'>_finalize_insert_update_commands</a>(base_mapper,uowtransaction,states)</tt>	Finalize state on states that have been inserted or updated including calling after_insert/after_update events.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L1021'>_postfetch</a>(mapper,uowtransaction,table,state)</tt>	Expire attributes in need of newly persisted database state after an insert or update statement has proceeded for that.
<tt style='background-color:#E8E8E8;'> orm. <a href=' /orm/persistence.py#L1090'>_connections_for_states</a>(base_mapper,uowtransaction,states)</tt>	Return an iterator of state state dict mapper connection.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L113'>__init__</a>(entities,session)</tt>	Construct a :class query directly.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L264'>_adapt_clause</a>(clause,as_filter,orm_only)</tt>	Adapt incoming clauses to transformations which have been applied within this query.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L322'>_query_entity_zero</a>()</tt>	Return the first queryentity.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L326'>_mapper_zero</a>()</tt>	Return the mapper associated with the first queryentity.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L330'>_entity_zero</a>()</tt>	Return the 'entity' mapper or aliasedclass associated with the first queryentity or alternatively the 'select from'.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L458'>statement</a>()</tt>	The full select statement represented by this query.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L477'>subquery</a>(name,with_labels,reduce_columns)</tt>	Return the full select statement represented by this :class.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L509'>cte</a>(name,recursive)</tt>	Return the full select statement represented by this :class.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L567'>label</a>(name)</tt>	Return the full select statement represented by this :class.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L580'>as_scalar</a>()</tt>	Return the full select statement represented by this :class.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L592'>selectable</a>()</tt>	Return the :class select object emitted by this :class query.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L606'>enable_eagerloads</a>(value)</tt>	Control whether or not eager joins and subqueries are rendered.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L632'>with_labels</a>()</tt>	Apply column labels to the return value of query statement.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L658'>enable_assertions</a>(value)</tt>	Control whether assertions are generated.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L680'>whereclause</a>()</tt>	A readonly attribute which returns the current where criterion for this query.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L691'>_with_current_path</a>(path)</tt>	Indicate that this query applies to objects loaded within a certain path.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L703'>with_polymorphic</a>(cls_or_mappers,selectable,polymorphic_on)</tt>	Load columns for inheriting classes.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L743'>yield_per</a>(count)</tt>	Yield only count rows at a time.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L813'>get</a>(ident)</tt>	Return an instance based on the given primary key identifier or none if not found.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L905'>correlate</a>()</tt>	Return a :class query construct which will correlate the given.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L934'>autoflush</a>(setting)</tt>	Return a query with a specific 'autoflush' setting.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L946'>populate_existing</a>()</tt>	Return a :class query that will expire and refresh all instances.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L960'>_with_invoke_all_eagers</a>(value)</tt>	Set the 'invoke all eagers' flag which causes joined- and subquery loaders to traverse into already-loaded related objects.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L971'>with_parent</a>(instance,property)</tt>	Add filtering criterion that relates the given instance to a child object or collection using its attribute state.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1007'>add_entity</a>(entity,alias)</tt>	Add a mapped entity to the list of result columns to be returned.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1019'>with_session</a>(session)</tt>	Return a :class query that will use the given :class session.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1040'>from_self</a>()</tt>	Return a query that selects from this query's select statement.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1244'>values</a>()</tt>	Return an iterator yielding result tuples corresponding.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1257'>value</a>(column)</tt>	Return a scalar result corresponding to the given column expression.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1265'>with_entities</a>()</tt>	Return a new :class query replacing the select list with the.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1293'>add_columns</a>()</tt>	Add one or more column expressions to the list of result columns to be returned.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1306'>add_column</a>(column)</tt>	Add a column expression to the list of result columns to be returned.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1320'>options</a>()</tt>	Return a new query object applying the given list of mapper options.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1349'>with_transformation</a>(fn)</tt>	Return a new :class query object transformed by.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1370'>with_hint</a>(selectable,text,dialect_name)</tt>	Add an indexing or other executional context hint for the given entity or selectable to.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1392'>with_statement_hint</a>(text,dialect_name)</tt>	Add a statement hint to this :class select.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1410'>execution_options</a>()</tt>	Set non-sql options which take effect during execution.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1424'>with_lockmode</a>(mode)</tt>	Return a new :class query object with the specified "locking mode",.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1453'>with_for_update</a>(read,nowait,of,skip_locked)</tt>	Return a new :class query with the specified options for the.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1487'>params</a>()</tt>	Add values for bind parameters which may have been specified in filter().
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1507'>filter</a>()</tt>	Apply the given filtering criterion to a copy of this :class.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1542'>filter_by</a>()</tt>	Apply the given filtering criterion to a copy of this :class.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1571'>order_by</a>()</tt>	Apply one or more order by criterion to the query and return the newly resulting query.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1602'>group_by</a>()</tt>	Apply one or more group by criterion to the query and return the newly resulting :class.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1629'>having</a>(criterion)</tt>	Apply a having criterion to the query and return the newly resulting :class.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1667'>union</a>()</tt>	Produce a union of this query against one or more queries.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1706'>union_all</a>()</tt>	Produce a union all of this query against one or more queries.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1715'>intersect</a>()</tt>	Produce an intersect of this query against one or more queries.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1724'>intersect_all</a>()</tt>	Produce an intersect all of this query against one or more queries.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1733'>except_</a>()</tt>	Produce an except of this query against one or more queries.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1742'>except_all</a>()</tt>	Produce an except all of this query against one or more queries.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L1751'>join</a>()</tt>	Create a sql join against this :class query object's criterion.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2018'>outerjoin</a>()</tt>	Create a left outer join against this query object's criterion and apply generatively returning the newly resulting query.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2047'>_join</a>(keys,outerjoin,full,create_aliases)</tt>	Consumes arguments from join() or outerjoin(), places them into a consistent format with which to form the actual join constructs.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2162'>_join_left_to_right</a>(left,right,onclause,outerjoin)</tt>	Append a join to the query's from clause.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2369'>reset_joinpoint</a>()</tt>	Return a new :class query, where the "join point" has.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2382'>select_from</a>()</tt>	Set the from clause of this :class query explicitly.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2430'>select_entity_from</a>(from_obj)</tt>	Set the from clause of this :class query to a.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2560'>slice</a>(start,stop)</tt>	Computes the "slice" of the :class query represented by.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2602'>limit</a>(limit)</tt>	Apply a limit to the query and return the newly resulting query.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2610'>offset</a>(offset)</tt>	Apply an offset to the query and return the newly resulting query.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2618'>distinct</a>()</tt>	Apply a distinct to the query and return the newly resulting query.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2650'>prefix_with</a>()</tt>	Apply the prefixes to the query and return the newly resulting query.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2681'>suffix_with</a>()</tt>	Apply the suffix to the query and return the newly resulting query.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2703'>all</a>()</tt>	Return the results represented by this query as a list.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2711'>from_statement</a>(statement)</tt>	Execute the given select statement and return results.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2740'>first</a>()</tt>	Return the first result of this query or none if the result doesn't contain any row.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2767'>one_or_none</a>()</tt>	Return at most one result or raise an exception.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2801'>one</a>()</tt>	Return exactly one result or raise an exception.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2829'>scalar</a>()</tt>	Return the first element of the first result or none if no rows present.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2894'>column_descriptions</a>()</tt>	Return metadata about the columns which would be returned by this :class.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2956'>instances</a>(cursor,__context)</tt>	Given a resultproxy cursor as returned by connection execute(),.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L2972'>merge_result</a>(iterator,load)</tt>	Merge a result into this :class query object's session.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L3017'>exists</a>()</tt>	A convenience method that turns a query into an exists subquery of the form exists (select 1 from.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L3057'>count</a>()</tt>	Return a count of rows this query would return.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L3097'>delete</a>(synchronize_session)</tt>	Perform a bulk delete query.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L3221'>update</a>(values,synchronize_session,update_args)</tt>	Perform a bulk update query.
<tt style='background-color:#E8E8E8;'> orm.Query <a href=' /orm/query.py#L3504'>_adjust_for_single_inheritance</a>(context)</tt>	Apply single-table-inheritance filtering.
<tt style='background-color:#E8E8E8;'> orm._MapperEntity <a href=' /orm/query.py#L3611'>set_with_polymorphic</a>(query,cls_or_mappers,selectable,polymorphic_on)</tt>	Receive an update from a call to query with_polymorphic().
<tt style='background-color:#E8E8E8;'> orm.Bundle <a href=' /orm/query.py#L3768'>__init__</a>(name)</tt>	Construct a new :class bundle.
<tt style='background-color:#E8E8E8;'> orm.Bundle <a href=' /orm/query.py#L3833'>label</a>(name)</tt>	Provide a copy of this :class bundle passing a new label.
<tt style='background-color:#E8E8E8;'> orm.Bundle <a href=' /orm/query.py#L3840'>create_row_processor</a>(query,procs,labels)</tt>	Produce the "row processing" function for this :class bundle.
<tt style='background-color:#E8E8E8;'> orm.AliasOption <a href=' /orm/query.py#L4153'>__init__</a>(alias)</tt>	Return a :class mapperoption that will indicate to the :class query.
<tt style='background-color:#E8E8E8;'> orm.IdentityMap <a href=' /orm/identity.py#L29'>_add_unpresent</a>(state,key)</tt>	Optional inlined form of add() which can assume item isn't present.
<tt style='background-color:#E8E8E8;'> orm.IdentityMap <a href=' /orm/identity.py#L54'>check_modified</a>()</tt>	Return true if any instancestates present have been marked as 'modified'.
<tt style='background-color:#E8E8E8;'> orm.StrongInstanceDict <a href=' /orm/identity.py#L308'>prune</a>()</tt>	Prune unreferenced non-dirty states.
<tt style='background-color:#E8E8E8;'> orm.scoped_session <a href=' /orm/scoping.py#L30'>__init__</a>(session_factory,scopefunc)</tt>	Construct a new :class scoped_session.
<tt style='background-color:#E8E8E8;'> orm.scoped_session <a href=' /orm/scoping.py#L53'>__call__</a>()</tt>	Return the current :class session, creating it.
<tt style='background-color:#E8E8E8;'> orm.scoped_session <a href=' /orm/scoping.py#L80'>remove</a>()</tt>	Dispose of the current :class session, if present.
<tt style='background-color:#E8E8E8;'> orm.scoped_session <a href=' /orm/scoping.py#L97'>configure</a>()</tt>	Reconfigure the :class sessionmaker used by this.
<tt style='background-color:#E8E8E8;'> orm.scoped_session <a href=' /orm/scoping.py#L112'>query_property</a>(query_cls)</tt>	Return a class property which produces a :class query object.
<tt style='background-color:#E8E8E8;'> orm.DependencyProcessor <a href=' /orm/dependency.py#L51'>hasparent</a>(state)</tt>	Return true if the given object instance has a parent according to the instrumentedattribute handled by this.
<tt style='background-color:#E8E8E8;'> orm.DependencyProcessor <a href=' /orm/dependency.py#L59'>per_property_preprocessors</a>(uow)</tt>	Establish actions and dependencies related to a flush.
<tt style='background-color:#E8E8E8;'> orm.DependencyProcessor <a href=' /orm/dependency.py#L99'>per_state_flush_actions</a>(uow,states,isdelete)</tt>	Establish actions and dependencies related to a flush.
<tt style='background-color:#E8E8E8;'> util.Queue <a href=' /util/queue.py#L42'>__init__</a>(maxsize)</tt>	Initialize a queue object with a given maximum size.
<tt style='background-color:#E8E8E8;'> util.Queue <a href=' /util/queue.py#L61'>qsize</a>()</tt>	Return the approximate size of the queue (not reliable!).
<tt style='background-color:#E8E8E8;'> util.Queue <a href=' /util/queue.py#L69'>empty</a>()</tt>	Return true if the queue is empty false otherwise (not reliable!).
<tt style='background-color:#E8E8E8;'> util.Queue <a href=' /util/queue.py#L78'>full</a>()</tt>	Return true if the queue is full false otherwise (not reliable!).
<tt style='background-color:#E8E8E8;'> util.Queue <a href=' /util/queue.py#L87'>put</a>(item,block,timeout)</tt>	Put an item into the queue.
<tt style='background-color:#E8E8E8;'> util.Queue <a href=' /util/queue.py#L122'>put_nowait</a>(item)</tt>	Put an item into the queue without blocking.
<tt style='background-color:#E8E8E8;'> util.Queue <a href=' /util/queue.py#L130'>get</a>(block,timeout)</tt>	Remove and return an item from the queue.
<tt style='background-color:#E8E8E8;'> util.Queue <a href=' /util/queue.py#L164'>get_nowait</a>()</tt>	Remove and return an item from the queue without blocking.
<tt style='background-color:#E8E8E8;'> util.AbstractKeyedTuple <a href=' /util/_collections.py#L25'>keys</a>()</tt>	Return a list of string key names for this :class keyedtuple.
<tt style='background-color:#E8E8E8;'> util.KeyedTuple <a href=' /util/_collections.py#L83'>_fields</a>()</tt>	Return a tuple of string key names for this :class keyedtuple.
<tt style='background-color:#E8E8E8;'> util.KeyedTuple <a href=' /util/_collections.py#L101'>_asdict</a>()</tt>	Return the contents of this :class keyedtuple as a dictionary.
<tt style='background-color:#E8E8E8;'> util._LW <a href=' /util/_collections.py#L125'>_asdict</a>()</tt>	Return the contents of this :class keyedtuple as a dictionary.
<tt style='background-color:#E8E8E8;'> util.Properties <a href=' /util/_collections.py#L217'>as_immutable</a>()</tt>	Return an immutable proxy for this :class properties.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/_collections.py#L807'>has_intersection</a>(set_,iterable)</tt>	Return true if any items of set_ are present in iterable.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/_collections.py#L838'>update_copy</a>(d,_new)</tt>	Copy the given dict and update with the given values.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/_collections.py#L848'>flatten_iterator</a>(x)</tt>	Given an iterator of which further sub-elements may also be iterators flatten the sub-elements into a single iterator.
<tt style='background-color:#E8E8E8;'> util.ScopedRegistry <a href=' /util/_collections.py#L981'>__init__</a>(createfunc,scopefunc)</tt>	Construct a new :class scopedregistry.
<tt style='background-color:#E8E8E8;'> util.ScopedRegistry <a href=' /util/_collections.py#L1003'>has</a>()</tt>	Return true if an object is present in the current scope.
<tt style='background-color:#E8E8E8;'> util.ScopedRegistry <a href=' /util/_collections.py#L1008'>set</a>(obj)</tt>	Set the value for the current scope.
<tt style='background-color:#E8E8E8;'> util.ScopedRegistry <a href=' /util/_collections.py#L1013'>clear</a>()</tt>	Clear the current scope if any.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/_collections.py#L1052'>_iter_id</a>(iterable)</tt>	Generator ((id o o) for o in iterable).
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/deprecations.py#L25'>deprecated</a>(version,message,add_deprecation_to_docstring)</tt>	Decorates a function and issues a deprecation warning on use.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/deprecations.py#L55'>pending_deprecation</a>(version,message,add_deprecation_to_docstring)</tt>	Decorates a function and issues a pending deprecation warning on use.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/deprecations.py#L98'>_decorate_with_warning</a>(func,wtype,message,docstring_header)</tt>	Wrap a function with a warnings warn and augmented docstring.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L79'>decode_slice</a>(slc)</tt>	Decode a slice object as sent to __getitem__.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L108'>map_bits</a>(fn,n)</tt>	Call the given function given each nonzero bit from n.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L117'>decorator</a>(target)</tt>	A signature-matching decorator factory.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L148'>public_factory</a>(target,location)</tt>	Produce a wrapping function for the given cls or classmethod.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L229'>get_cls_kwargs</a>(cls,_set)</tt>	Return the full set of inherited kwargs for the given cls.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L284'>get_func_kwargs</a>(func)</tt>	Return the set of legal kwargs for the given func.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L295'>get_callable_argspec</a>(fn,no_self,_is_init)</tt>	Return the argument signature for any callable.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L334'>format_argspec_plus</a>(fn,grouped)</tt>	Returns a dictionary of formatted introspected function arguments.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L411'>format_argspec_init</a>(method,grouped)</tt>	Format_argspec_plus with considerations for typical __init__ methods wraps format_argspec_plus with error handling strategies for typical.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L432'>getargspec_init</a>(method)</tt>	Inspect getargspec with considerations for typical __init__ methods.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L450'>unbound_method_to_callable</a>(func_or_cls)</tt>	Adjust the incoming callable such that a 'self' argument is not required.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L462'>generic_repr</a>(obj,additional_kw,to_inspect,omit_kwarg)</tt>	Produce a __repr__() based on direct association of the __init__() specification vs.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L559'>class_hierarchy</a>(cls)</tt>	Return an unordered sequence of all classes related to cls.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L606'>iterate_attributes</a>(cls)</tt>	Iterate all the keys and attributes associated with a class without using getattr().
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L622'>monkeypatch_proxied_specials</a>(into_cls,from_cls,skip,only)</tt>	Automates delegation of __specials__ for a proxying type.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L664'>methods_equivalent</a>(meth1,meth2)</tt>	Return true if the two methods are the same implementation.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L671'>as_interface</a>(obj,cls,methods,required)</tt>	Ensure basic interface compliance for an instance or dict of callables.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L775'>memoized_instancemethod</a>(fn)</tt>	Decorate a method memoize its return value.
<tt style='background-color:#E8E8E8;'> util.group_expirable_memoized_property <a href=' /util/langhelpers.py#L802'>expire_instance</a>(instance)</tt>	Expire all memoized properties for *instance*.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L997'>bool_or_str</a>()</tt>	Return a callable that will evaluate a string as boolean or one of a set of "alternate" string values.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L1010'>asint</a>(value)</tt>	Coerce to integer.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L1018'>coerce_kw_type</a>(kw,key,type_,flexi_bool)</tt>	If 'key' is present in dict 'kw', coerce its value to type 'type\_' if necessary.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L1031'>constructor_copy</a>(obj,cls)</tt>	Instantiate cls using the __dict__ of obj as constructor arguments.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L1045'>counter</a>()</tt>	Return a threadsafe counter function.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L1062'>duck_type_collection</a>(specimen,default)</tt>	Given an instance or class guess if it is or is acting as one of the basic collection types list set and dict.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L1108'>dictlike_iteritems</a>(dictlike)</tt>	Return a key value iterator for almost any dict-like object.
<tt style='background-color:#E8E8E8;'> util._symbol <a href=' /util/langhelpers.py#L1183'>__new__</a>(name,doc,canonical)</tt>	Construct a new named symbol.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L1244'>set_creation_order</a>(instance)</tt>	Assign a '_creation_order' sequence to the given instance.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L1257'>warn_exception</a>(func)</tt>	Executes the given function catches all exceptions and converts to a warning.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L1302'>warn</a>(msg)</tt>	Issue a warning.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L1312'>warn_limited</a>(msg,args)</tt>	Issue a warning with a paramterized string limiting the number of registrations.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L1322'>only_once</a>(fn)</tt>	Decorate the given function to be a no-op after it is called exactly once.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L1340'>chop_traceback</a>(tb,exclude_prefix,exclude_suffix)</tt>	Chop extraneous lines off beginning and end of a traceback.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/langhelpers.py#L1398'>wrap_callable</a>(wrapper,fn)</tt>	Augment functools update_wrapper() to work with objects with.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/compat.py#L215'>with_metaclass</a>(meta)</tt>	Create a base class with a metaclass.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/compat.py#L237'>nested</a>()</tt>	Implement contextlib nested mostly for unit tests.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/topological.py#L43'>sort</a>(tuples,allitems,deterministic_order)</tt>	Sort the given list of items by dependency.
<tt style='background-color:#E8E8E8;'> engine.RowProxy <a href=' /engine/result.py#L158'>has_key</a>(key)</tt>	Return true if this rowproxy contains the given key.
<tt style='background-color:#E8E8E8;'> engine.RowProxy <a href=' /engine/result.py#L163'>items</a>()</tt>	Return a list of tuples each tuple containing a key/value pair.
<tt style='background-color:#E8E8E8;'> engine.RowProxy <a href=' /engine/result.py#L168'>keys</a>()</tt>	Return the list of keys as strings represented by this rowproxy.
<tt style='background-color:#E8E8E8;'> engine.ResultMetaData <a href=' /engine/result.py#L303'>_merge_cursor_description</a>(context,cursor_description,result_columns,num_ctx_cols)</tt>	Merge a cursor description with compiled result column information.
<tt style='background-color:#E8E8E8;'> engine.ResultMetaData <a href=' /engine/result.py#L409'>_colnames_from_description</a>(context,cursor_description)</tt>	Extract column names and data types from a cursor description.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L687'>keys</a>()</tt>	Return the current set of string keys for rows.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L694'>rowcount</a>()</tt>	Return the 'rowcount' for this result.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L741'>lastrowid</a>()</tt>	Return the 'lastrowid' accessor on the dbapi cursor.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L764'>returns_rows</a>()</tt>	True if this :class resultproxy returns rows.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L776'>is_insert</a>()</tt>	True if this :class resultproxy is the result.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L790'>_cursor_description</a>()</tt>	May be overridden by subclasses.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L795'>_soft_close</a>()</tt>	Soft close this :class resultproxy.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L827'>close</a>()</tt>	Close this resultproxy.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L876'>inserted_primary_key</a>()</tt>	Return the primary key for the row just inserted.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L919'>last_updated_params</a>()</tt>	Return the collection of updated parameters from this execution.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L941'>last_inserted_params</a>()</tt>	Return the collection of inserted parameters from this execution.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L963'>returned_defaults</a>()</tt>	Return the values of default columns that were fetched using the :meth.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L981'>lastrow_has_defaults</a>()</tt>	Return lastrow_has_defaults() from the underlying :class.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L991'>postfetch_cols</a>()</tt>	Return postfetch_cols() from the underlying :class.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L1013'>prefetch_cols</a>()</tt>	Return prefetch_cols() from the underlying :class.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L1035'>supports_sane_rowcount</a>()</tt>	Return supports_sane_rowcount from the dialect.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L1044'>supports_sane_multi_rowcount</a>()</tt>	Return supports_sane_multi_rowcount from the dialect.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L1101'>fetchall</a>()</tt>	Fetch all rows just like db-api cursor fetchall().
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L1127'>fetchmany</a>(size)</tt>	Fetch many rows just like db-api cursor.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L1156'>fetchone</a>()</tt>	Fetch one row just like db-api cursor fetchone().
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L1185'>first</a>()</tt>	Fetch the first row and then close the result set unconditionally.
<tt style='background-color:#E8E8E8;'> engine.ResultProxy <a href=' /engine/result.py#L1212'>scalar</a>()</tt>	Fetch the first column of the first row and close the result set.
<tt style='background-color:#E8E8E8;'> engine.EngineStrategy <a href=' /engine/strategies.py#L39'>create</a>()</tt>	Given arguments returns a new engine instance.
<tt style='background-color:#E8E8E8;'> engine. <a href=' /engine/util.py#L11'>connection_memoize</a>(key)</tt>	Decorator memoize a function in a connection info stash.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L64'>__init__</a>(engine,connection,close_with_result,_branch_from)</tt>	Construct a new connection.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L112'>_branch</a>()</tt>	Return a new connection which references this connection's engine and connection but does not have close_with_result enabled.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L139'>_root</a>()</tt>	Return the 'root' connection.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L153'>_clone</a>()</tt>	Create a shallow copy of this connection.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L167'>execution_options</a>()</tt>	Set non-sql options for the connection which take effect during execution.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L321'>closed</a>()</tt>	Return true if this connection is closed.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L328'>invalidated</a>()</tt>	Return true if this connection was invalidated.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L334'>connection</a>()</tt>	The underlying db-api connection managed by this connection.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L353'>get_isolation_level</a>()</tt>	Return the current isolation level assigned to this :class.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L389'>default_isolation_level</a>()</tt>	The default isolation level assigned to this :class connection.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L446'>info</a>()</tt>	Info dictionary associated with the underlying dbapi connection referred to by this :class.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L460'>connect</a>()</tt>	Returns a branched version of this :class connection.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L475'>contextual_connect</a>()</tt>	Returns a branched version of this :class connection.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L490'>invalidate</a>(exception)</tt>	Invalidate the underlying dbapi connection associated with this :class.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L540'>detach</a>()</tt>	Detach the underlying db-api connection from its connection pool.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L567'>begin</a>()</tt>	Begin a transaction and return a transaction handle.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L610'>begin_nested</a>()</tt>	Begin a nested transaction and return a transaction handle.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L633'>begin_twophase</a>(xid)</tt>	Begin a two-phase or xa transaction and return a transaction handle.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L671'>in_transaction</a>()</tt>	Return true if a transaction is in progress.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L826'>close</a>()</tt>	Close this :class connection.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L871'>scalar</a>(object)</tt>	Executes and returns the first column of the first row.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L879'>execute</a>(object)</tt>	Executes a sql statement construct and returns a :class.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L947'>_execute_function</a>(func,multiparams,params)</tt>	Execute a sql functionelement object.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L953'>_execute_default</a>(default,multiparams,params)</tt>	Execute a schema columndefault object.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L983'>_execute_ddl</a>(ddl,multiparams,params)</tt>	Execute a schema ddl object.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L1009'>_execute_clauseelement</a>(elem,multiparams,params)</tt>	Execute a sql clauseelement object.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L1060'>_execute_compiled</a>(compiled,multiparams,params)</tt>	Execute a sql compiled object.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L1082'>_execute_text</a>(statement,multiparams,params)</tt>	Execute a string sql statement.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L1104'>_execute_context</a>(dialect,constructor,statement,parameters)</tt>	Create an :class executioncontext and execute returning.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L1224'>_cursor_execute</a>(cursor,statement,parameters,context)</tt>	Execute a statement + params on the given cursor.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L1271'>_safe_close_cursor</a>(cursor)</tt>	Close the given cursor catching exceptions and turning into log warnings.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L1470'>transaction</a>(callable_)</tt>	Execute the given function within a transaction boundary.
<tt style='background-color:#E8E8E8;'> engine.Connection <a href=' /engine/base.py#L1521'>run_callable</a>(callable_)</tt>	Given a callable object or function execute it passing a :class.
<tt style='background-color:#E8E8E8;'> engine.Transaction <a href=' /engine/base.py#L1599'>close</a>()</tt>	Close this :class transaction.
<tt style='background-color:#E8E8E8;'> engine.Transaction <a href=' /engine/base.py#L1615'>rollback</a>()</tt>	Roll back this :class transaction.
<tt style='background-color:#E8E8E8;'> engine.Transaction <a href=' /engine/base.py#L1627'>commit</a>()</tt>	Commit this :class transaction.
<tt style='background-color:#E8E8E8;'> engine.TwoPhaseTransaction <a href=' /engine/base.py#L1708'>prepare</a>()</tt>	Prepare this :class twophasetransaction.
<tt style='background-color:#E8E8E8;'> engine.Engine <a href=' /engine/base.py#L1780'>update_execution_options</a>()</tt>	Update the default execution_options dictionary of this :class.
<tt style='background-color:#E8E8E8;'> engine.Engine <a href=' /engine/base.py#L1802'>execution_options</a>()</tt>	Return a new :class engine that will provide.
<tt style='background-color:#E8E8E8;'> engine.Engine <a href=' /engine/base.py#L1869'>name</a>()</tt>	String name of the :class ~sqlalchemy engine interfaces dialect.
<tt style='background-color:#E8E8E8;'> engine.Engine <a href=' /engine/base.py#L1876'>driver</a>()</tt>	Driver name of the :class ~sqlalchemy engine interfaces dialect.
<tt style='background-color:#E8E8E8;'> engine.Engine <a href=' /engine/base.py#L1888'>dispose</a>()</tt>	Dispose of the connection pool used by this :class engine.
<tt style='background-color:#E8E8E8;'> engine.Engine <a href=' /engine/base.py#L1948'>begin</a>(close_with_result)</tt>	Return a context manager delivering a :class connection.
<tt style='background-color:#E8E8E8;'> engine.Engine <a href=' /engine/base.py#L1989'>transaction</a>(callable_)</tt>	Execute the given function within a transaction boundary.
<tt style='background-color:#E8E8E8;'> engine.Engine <a href=' /engine/base.py#L2031'>run_callable</a>(callable_)</tt>	Given a callable object or function execute it passing a :class.
<tt style='background-color:#E8E8E8;'> engine.Engine <a href=' /engine/base.py#L2047'>execute</a>(statement)</tt>	Executes the given construct and returns a :class resultproxy.
<tt style='background-color:#E8E8E8;'> engine.Engine <a href=' /engine/base.py#L2077'>connect</a>()</tt>	Return a new :class connection object.
<tt style='background-color:#E8E8E8;'> engine.Engine <a href=' /engine/base.py#L2093'>contextual_connect</a>(close_with_result)</tt>	Return a :class connection object which may be part of some.
<tt style='background-color:#E8E8E8;'> engine.Engine <a href=' /engine/base.py#L2116'>table_names</a>(schema,connection)</tt>	Return a list of all table names available in the database.
<tt style='background-color:#E8E8E8;'> engine.Engine <a href=' /engine/base.py#L2130'>has_table</a>(table_name,schema)</tt>	Return true if the given backend has a table of the given name.
<tt style='background-color:#E8E8E8;'> engine.Engine <a href=' /engine/base.py#L2155'>raw_connection</a>(_connection)</tt>	Return a "raw" dbapi connection from the connection pool.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L167'>create_connect_args</a>(url)</tt>	Build db-api compatible connection arguments.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L178'>type_descriptor</a>(cls,typeobj)</tt>	Transform a generic type to a dialect-specific type.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L193'>initialize</a>(connection)</tt>	Called during strategized creation of the dialect with a connection.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L210'>reflecttable</a>(connection,table,include_columns,exclude_columns)</tt>	Load table description from the database.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L231'>get_columns</a>(connection,table_name,schema)</tt>	Return information about columns in table_name.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L264'>get_primary_keys</a>(connection,table_name,schema)</tt>	Return information about primary keys in table_name.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L277'>get_pk_constraint</a>(connection,table_name,schema)</tt>	Return information about the primary key constraint on table_name.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L294'>get_foreign_keys</a>(connection,table_name,schema)</tt>	Return information about foreign_keys in table_name.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L320'>get_table_names</a>(connection,schema)</tt>	Return a list of table names for schema.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L325'>get_temp_table_names</a>(connection,schema)</tt>	Return a list of temporary table names on the given connection if supported by the underlying backend.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L333'>get_view_names</a>(connection,schema)</tt>	Return a list of all view names available in the database.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L342'>get_temp_view_names</a>(connection,schema)</tt>	Return a list of temporary view names on the given connection if supported by the underlying backend.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L350'>get_view_definition</a>(connection,view_name,schema)</tt>	Return view definition.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L360'>get_indexes</a>(connection,table_name,schema)</tt>	Return information about indexes in table_name.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L379'>get_unique_constraints</a>(connection,table_name,schema)</tt>	Return information about unique constraints in table_name.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L402'>get_check_constraints</a>(connection,table_name,schema)</tt>	Return information about check constraints in table_name.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L425'>get_table_comment</a>(connection,table_name,schema)</tt>	Return the "comment" for the table identified by table_name.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L444'>normalize_name</a>(name)</tt>	Convert the given name to lowercase if it is detected as case insensitive.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L454'>denormalize_name</a>(name)</tt>	Convert the given name to a case insensitive identifier for the backend if it is an all-lowercase name.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L464'>has_table</a>(connection,table_name,schema)</tt>	Check the existence of a particular table in the database.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L475'>has_sequence</a>(connection,sequence_name,schema)</tt>	Check the existence of a particular sequence in the database.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L485'>_get_server_version_info</a>(connection)</tt>	Retrieve the server version info from the given connection.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L496'>_get_default_schema_name</a>(connection)</tt>	Return the string name of the currently selected schema from the given connection.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L508'>do_begin</a>(dbapi_connection)</tt>	Provide an implementation of connection begin(), given a.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L531'>do_rollback</a>(dbapi_connection)</tt>	Provide an implementation of connection rollback(), given.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L542'>do_commit</a>(dbapi_connection)</tt>	Provide an implementation of connection commit(), given a.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L553'>do_close</a>(dbapi_connection)</tt>	Provide an implementation of connection close(), given a dbapi.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L567'>create_xid</a>()</tt>	Create a two-phase transaction id.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L577'>do_savepoint</a>(connection,name)</tt>	Create a savepoint with the given name.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L587'>do_rollback_to_savepoint</a>(connection,name)</tt>	Rollback a connection to the named savepoint.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L597'>do_release_savepoint</a>(connection,name)</tt>	Release the named savepoint on a connection.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L606'>do_begin_twophase</a>(connection,xid)</tt>	Begin a two phase transaction on the given connection.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L616'>do_prepare_twophase</a>(connection,xid)</tt>	Prepare a two phase transaction on the given connection.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L626'>do_rollback_twophase</a>(connection,xid,is_prepared,recover)</tt>	Rollback a two phase transaction on the given connection.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L640'>do_commit_twophase</a>(connection,xid,is_prepared,recover)</tt>	Commit a two phase transaction on the given connection.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L655'>do_recover_twophase</a>(connection)</tt>	Recover list of uncommitted prepared two phase transaction identifiers on the given connection.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L665'>do_executemany</a>(cursor,statement,parameters,context)</tt>	Provide an implementation of cursor executemany(statement.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L671'>do_execute</a>(cursor,statement,parameters,context)</tt>	Provide an implementation of cursor execute(statement.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L677'>do_execute_no_params</a>(cursor,statement,parameters,context)</tt>	Provide an implementation of cursor execute statement.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L687'>is_disconnect</a>(e,connection,cursor)</tt>	Return true if the given db-api error indicates an invalid.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L693'>connect</a>()</tt>	Return a callable which sets up a newly created dbapi connection.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L710'>reset_isolation_level</a>(dbapi_conn)</tt>	Given a dbapi connection revert its isolation to the default.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L735'>set_isolation_level</a>(dbapi_conn,level)</tt>	Given a dbapi connection set its isolation level.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L760'>get_isolation_level</a>(dbapi_conn)</tt>	Given a dbapi connection return its isolation level.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L790'>get_dialect_cls</a>(cls,url)</tt>	Given a url return the :class dialect that will be used.
<tt style='background-color:#E8E8E8;'> engine.Dialect <a href=' /engine/interfaces.py#L806'>engine_created</a>(cls,engine)</tt>	A convenience hook called before returning the final :class engine.
<tt style='background-color:#E8E8E8;'> engine.CreateEnginePlugin <a href=' /engine/interfaces.py#L902'>__init__</a>(url,kwargs)</tt>	Contruct a new :class createengineplugin.
<tt style='background-color:#E8E8E8;'> engine.CreateEnginePlugin <a href=' /engine/interfaces.py#L922'>handle_dialect_kwargs</a>(dialect_cls,dialect_args)</tt>	Parse and modify dialect kwargs.
<tt style='background-color:#E8E8E8;'> engine.CreateEnginePlugin <a href=' /engine/interfaces.py#L925'>handle_pool_kwargs</a>(pool_cls,pool_args)</tt>	Parse and modify pool kwargs.
<tt style='background-color:#E8E8E8;'> engine.CreateEnginePlugin <a href=' /engine/interfaces.py#L928'>engine_created</a>(engine)</tt>	Receive the :class engine object when it is fully constructed.
<tt style='background-color:#E8E8E8;'> engine.ExecutionContext <a href=' /engine/interfaces.py#L1029'>create_cursor</a>()</tt>	Return a new cursor generated from this executioncontext's connection.
<tt style='background-color:#E8E8E8;'> engine.ExecutionContext <a href=' /engine/interfaces.py#L1040'>pre_exec</a>()</tt>	Called before an execution of a compiled statement.
<tt style='background-color:#E8E8E8;'> engine.ExecutionContext <a href=' /engine/interfaces.py#L1050'>post_exec</a>()</tt>	Called after the execution of a compiled statement.
<tt style='background-color:#E8E8E8;'> engine.ExecutionContext <a href=' /engine/interfaces.py#L1060'>result</a>()</tt>	Return a result object corresponding to this executioncontext.
<tt style='background-color:#E8E8E8;'> engine.ExecutionContext <a href=' /engine/interfaces.py#L1068'>handle_dbapi_exception</a>(e)</tt>	Receive a dbapi exception which occurred upon execute result fetch etc.
<tt style='background-color:#E8E8E8;'> engine.ExecutionContext <a href=' /engine/interfaces.py#L1074'>should_autocommit_text</a>(statement)</tt>	Parse the given textual statement and return true if it refers to.
<tt style='background-color:#E8E8E8;'> engine.ExecutionContext <a href=' /engine/interfaces.py#L1080'>lastrow_has_defaults</a>()</tt>	Return true if the last insert or update row contained inlined or database-side defaults.
<tt style='background-color:#E8E8E8;'> engine.ExecutionContext <a href=' /engine/interfaces.py#L1087'>get_rowcount</a>()</tt>	Return the dbapi cursor rowcount value or in some.
<tt style='background-color:#E8E8E8;'> engine.Connectable <a href=' /engine/interfaces.py#L1109'>connect</a>()</tt>	Return a :class connection object.
<tt style='background-color:#E8E8E8;'> engine.Connectable <a href=' /engine/interfaces.py#L1119'>contextual_connect</a>()</tt>	Return a :class connection object which may be part of an ongoing.
<tt style='background-color:#E8E8E8;'> engine.Connectable <a href=' /engine/interfaces.py#L1132'>create</a>(entity)</tt>	Emit create statements for the given schema entity.
<tt style='background-color:#E8E8E8;'> engine.Connectable <a href=' /engine/interfaces.py#L1142'>drop</a>(entity)</tt>	Emit drop statements for the given schema entity.
<tt style='background-color:#E8E8E8;'> engine.Connectable <a href=' /engine/interfaces.py#L1152'>execute</a>(object)</tt>	Executes the given construct and returns a :class resultproxy.
<tt style='background-color:#E8E8E8;'> engine.Connectable <a href=' /engine/interfaces.py#L1156'>scalar</a>(object)</tt>	Executes and returns the first column of the first row.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L86'>__init__</a>(bind)</tt>	Initialize a new :class inspector.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L114'>from_engine</a>(cls,bind)</tt>	Construct a new dialect-specific inspector object from the given engine or connection.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L141'>default_schema_name</a>()</tt>	Return the default schema name presented by the dialect for the current engine's database user.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L152'>get_schema_names</a>()</tt>	Return all schema names.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L161'>get_table_names</a>(schema,order_by)</tt>	Return all table names in referred to within a particular schema.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L213'>get_sorted_table_and_fkc_names</a>(schema)</tt>	Return dependency-sorted table and foreign key constraint names in referred to within a particular schema.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L271'>get_temp_table_names</a>()</tt>	Return a list of temporary table names for the current bind.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L283'>get_temp_view_names</a>()</tt>	Return a list of temporary view names for the current bind.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L295'>get_table_options</a>(table_name,schema)</tt>	Return a dictionary of options specified when the table of the given name was created.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L315'>get_view_names</a>(schema)</tt>	Return all view names in schema.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L326'>get_view_definition</a>(view_name,schema)</tt>	Return definition for view_name.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L337'>get_columns</a>(table_name,schema)</tt>	Return information about columns in table_name.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L377'>get_primary_keys</a>(table_name,schema)</tt>	Return information about primary keys in table_name.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L390'>get_pk_constraint</a>(table_name,schema)</tt>	Return information about primary key constraint on table_name.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L414'>get_foreign_keys</a>(table_name,schema)</tt>	Return information about foreign_keys in table_name.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L449'>get_indexes</a>(table_name,schema)</tt>	Return information about indexes in table_name.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L483'>get_unique_constraints</a>(table_name,schema)</tt>	Return information about unique constraints in table_name.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L509'>get_table_comment</a>(table_name,schema)</tt>	Return information about the table comment for table_name.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L529'>get_check_constraints</a>(table_name,schema)</tt>	Return information about check constraints in table_name.
<tt style='background-color:#E8E8E8;'> engine.Inspector <a href=' /engine/reflection.py#L555'>reflecttable</a>(table,include_columns,exclude_columns,_extend_on)</tt>	Given a table object load its internal constructs based on introspection.
<tt style='background-color:#E8E8E8;'> engine. <a href=' /engine/__init__.py#L98'>create_engine</a>()</tt>	Create a new :class engine instance.
<tt style='background-color:#E8E8E8;'> engine. <a href=' /engine/__init__.py#L418'>engine_from_config</a>(configuration,prefix)</tt>	Create a new engine instance using a configuration dictionary.
<tt style='background-color:#E8E8E8;'> engine.URL <a href=' /engine/url.py#L128'>_get_entrypoint</a>()</tt>	Return the "entry point" dialect class.
<tt style='background-color:#E8E8E8;'> engine.URL <a href=' /engine/url.py#L150'>get_dialect</a>()</tt>	Return the sqlalchemy database dialect class corresponding to this url's driver name.
<tt style='background-color:#E8E8E8;'> engine.URL <a href=' /engine/url.py#L158'>translate_connect_args</a>(names)</tt>	Translate url attributes into a dictionary of connection arguments.
<tt style='background-color:#E8E8E8;'> engine. <a href=' /engine/url.py#L186'>make_url</a>(name_or_url)</tt>	Given a string or unicode instance produce a new url instance.
<tt style='background-color:#E8E8E8;'> engine.DefaultDialect <a href=' /engine/default.py#L282'>on_connect</a>()</tt>	Return a callable which sets up a newly created dbapi connection.
<tt style='background-color:#E8E8E8;'> engine.DefaultDialect <a href=' /engine/default.py#L371'>type_descriptor</a>(typeobj)</tt>	Provide a database-specific :class typeengine object given.
<tt style='background-color:#E8E8E8;'> engine.DefaultDialect <a href=' /engine/default.py#L388'>get_pk_constraint</a>(conn,table_name,schema)</tt>	Compatibility method adapts the result of get_primary_keys() for those dialects which don't implement get_pk_constraint().
<tt style='background-color:#E8E8E8;'> engine.DefaultDialect <a href=' /engine/default.py#L482'>create_xid</a>()</tt>	Create a random two-phase transaction id.
<tt style='background-color:#E8E8E8;'> engine.DefaultExecutionContext <a href=' /engine/default.py#L557'>_init_ddl</a>(cls,dialect,connection,dbapi_connection)</tt>	Initialize execution context for a ddlelement construct.
<tt style='background-color:#E8E8E8;'> engine.DefaultExecutionContext <a href=' /engine/default.py#L590'>_init_compiled</a>(cls,dialect,connection,dbapi_connection)</tt>	Initialize execution context for a compiled construct.
<tt style='background-color:#E8E8E8;'> engine.DefaultExecutionContext <a href=' /engine/default.py#L699'>_expand_in_parameters</a>(compiled,processors)</tt>	Handle special 'expanding' parameters in tuples that are rendered on a per-parameter basis for an otherwise fixed sql statement string.
<tt style='background-color:#E8E8E8;'> engine.DefaultExecutionContext <a href=' /engine/default.py#L785'>_init_statement</a>(cls,dialect,connection,dbapi_connection)</tt>	Initialize execution context for a string sql statement.
<tt style='background-color:#E8E8E8;'> engine.DefaultExecutionContext <a href=' /engine/default.py#L830'>_init_default</a>(cls,dialect,connection,dbapi_connection)</tt>	Initialize execution context for a columndefault construct.
<tt style='background-color:#E8E8E8;'> engine.DefaultExecutionContext <a href=' /engine/default.py#L880'>_execute_scalar</a>(stmt,type_)</tt>	Execute a string statement on the current cursor returning a scalar result.
<tt style='background-color:#E8E8E8;'> engine.DefaultExecutionContext <a href=' /engine/default.py#L960'>get_result_processor</a>(type_,colname,coltype)</tt>	Return a 'result processor' for a given type as present in cursor.
<tt style='background-color:#E8E8E8;'> engine.DefaultExecutionContext <a href=' /engine/default.py#L970'>get_lastrowid</a>()</tt>	Return self cursor lastrowid or equivalent after an insert.
<tt style='background-color:#E8E8E8;'> engine.DefaultExecutionContext <a href=' /engine/default.py#L1111'>set_input_sizes</a>(translate,exclude_types)</tt>	Given a cursor and clauseparameters call the appropriate style of setinputsizes() on the cursor using db-api types.
<tt style='background-color:#E8E8E8;'> dialects. <a href=' /dialects/__init__.py#L22'>_auto_fn</a>(name)</tt>	Default dialect importer.
<tt style='background-color:#E8E8E8;'> dialects.oracle.INTERVAL <a href=' /dialects/oracle/base.py#L406'>__init__</a>(day_precision,second_precision)</tt>	Construct an interval.
<tt style='background-color:#E8E8E8;'> dialects.oracle.OracleCompiler <a href=' /dialects/oracle/base.py#L636'>default_from</a>()</tt>	Called when a select statement has no froms and no from clause is to be appended.
<tt style='background-color:#E8E8E8;'> dialects.oracle.OracleCompiler <a href=' /dialects/oracle/base.py#L695'>get_render_as_alias_suffix</a>(alias_name_text)</tt>	Oracle doesn't like from table as alias.
<tt style='background-color:#E8E8E8;'> dialects.oracle.OracleCompiler <a href=' /dialects/oracle/base.py#L725'>_TODO_visit_compound_select</a>(select)</tt>	Need to determine how to get limit/offset into a union for oracle.
<tt style='background-color:#E8E8E8;'> dialects.oracle.OracleCompiler <a href=' /dialects/oracle/base.py#L731'>visit_select</a>(select)</tt>	Look for limit and offset in a select statement and if so tries to wrap it in a subquery with rownum criterion.
<tt style='background-color:#E8E8E8;'> dialects.oracle.OracleIdentifierPreparer <a href=' /dialects/oracle/base.py#L932'>_bindparam_requires_quotes</a>(value)</tt>	Return true if the given identifier requires quoting.
<tt style='background-color:#E8E8E8;'> dialects.oracle.OracleDialect <a href=' /dialects/oracle/base.py#L1099'>_resolve_synonym</a>(connection,desired_owner,desired_synonym,desired_table)</tt>	Search for a local synonym matching the given desired owner/name.
<tt style='background-color:#E8E8E8;'> dialects.oracle.OracleDialect <a href=' /dialects/oracle/base.py#L1277'>get_columns</a>(connection,table_name,schema)</tt>	Kw arguments can be.
<tt style='background-color:#E8E8E8;'> dialects.oracle.OracleDialect <a href=' /dialects/oracle/base.py#L1524'>get_foreign_keys</a>(connection,table_name,schema)</tt>	Kw arguments can be.
<tt style='background-color:#E8E8E8;'> dialects.oracle.OracleDialect_cx_oracle <a href=' /dialects/oracle/cx_oracle.py#L810'>_detect_decimal_char</a>(connection)</tt>	Detect if the decimal separator character is not ' ', as.
<tt style='background-color:#E8E8E8;'> dialects.oracle.OracleDialect_cx_oracle <a href=' /dialects/oracle/cx_oracle.py#L988'>create_xid</a>()</tt>	Create a two-phase transaction id.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.JSON <a href=' /dialects/postgresql/json.py#L159'>__init__</a>(none_as_null,astext_type)</tt>	Construct a :class json type.
<tt style='background-color:#E8E8E8;'> dialects.postgresql. <a href=' /dialects/postgresql/array.py#L19'>Any</a>(other,arrexpr,operator)</tt>	A synonym for the :meth array comparator any method.
<tt style='background-color:#E8E8E8;'> dialects.postgresql. <a href=' /dialects/postgresql/array.py#L33'>All</a>(other,arrexpr,operator)</tt>	A synonym for the :meth array comparator all method.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.ARRAY <a href=' /dialects/postgresql/array.py#L193'>__init__</a>(item_type,as_tuple,dimensions,zero_indexes)</tt>	Construct an array.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.HSTORE <a href=' /dialects/postgresql/hstore.py#L129'>__init__</a>(text_type)</tt>	Construct a new :class hstore.
<tt style='background-color:#E8E8E8;'> dialects.postgresql. <a href=' /dialects/postgresql/hstore.py#L345'>_parse_error</a>(hstore_str,pos)</tt>	Format an unmarshalling error.
<tt style='background-color:#E8E8E8;'> dialects.postgresql. <a href=' /dialects/postgresql/hstore.py#L363'>_parse_hstore</a>(hstore_str)</tt>	Parse an hstore from its literal string representation.
<tt style='background-color:#E8E8E8;'> dialects.postgresql. <a href=' /dialects/postgresql/hstore.py#L403'>_serialize_hstore</a>(val)</tt>	Serialize a dictionary into an hstore literal keys and values must.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.Insert <a href=' /dialects/postgresql/dml.py#L29'>excluded</a>()</tt>	Provide the excluded namespace for an on conflict statement pg's on conflict clause allows reference to the row that would.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.Insert <a href=' /dialects/postgresql/dml.py#L45'>on_conflict_do_update</a>(constraint,index_elements,index_where,set_)</tt>	Specifies a do update set action for on conflict clause.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.Insert <a href=' /dialects/postgresql/dml.py#L101'>on_conflict_do_nothing</a>(constraint,index_elements,index_where)</tt>	Specifies a do nothing action for on conflict clause.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.INTERVAL <a href=' /dialects/postgresql/base.py#L976'>__init__</a>(precision,fields)</tt>	Construct an interval.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.UUID <a href=' /dialects/postgresql/base.py#L1034'>__init__</a>(as_uuid)</tt>	Construct a uuid type.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.ENUM <a href=' /dialects/postgresql/base.py#L1169'>__init__</a>()</tt>	Construct an :class ~ postgresql enum.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.ENUM <a href=' /dialects/postgresql/base.py#L1201'>create</a>(bind,checkfirst)</tt>	Emit create type for this :class ~.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.ENUM <a href=' /dialects/postgresql/base.py#L1225'>drop</a>(bind,checkfirst)</tt>	Emit drop type for this :class ~.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.ENUM <a href=' /dialects/postgresql/base.py#L1247'>_check_for_name_in_memos</a>(checkfirst,kw)</tt>	Look in the 'ddl runner' for 'memos', then note our name in that collection.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.PGInspector <a href=' /dialects/postgresql/base.py#L1909'>get_table_oid</a>(table_name,schema)</tt>	Return the oid for the given table name.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.PGInspector <a href=' /dialects/postgresql/base.py#L1915'>get_enums</a>(schema)</tt>	Return a list of enum objects.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.PGInspector <a href=' /dialects/postgresql/base.py#L1936'>get_foreign_table_names</a>(schema)</tt>	Return a list of foreign table names.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.PGInspector <a href=' /dialects/postgresql/base.py#L1949'>get_view_names</a>(schema,include)</tt>	Return all view names in schema.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.PGDialect <a href=' /dialects/postgresql/base.py#L2313'>get_table_oid</a>(connection,table_name,schema)</tt>	Fetch the oid for schema table_name.
<tt style='background-color:#E8E8E8;'> dialects.postgresql.ExcludeConstraint <a href=' /dialects/postgresql/ext.py#L83'>__init__</a>()</tt>	Create an :class excludeconstraint object.
<tt style='background-color:#E8E8E8;'> dialects.postgresql. <a href=' /dialects/postgresql/ext.py#L209'>array_agg</a>()</tt>	Postgresql-specific form of :class array_agg, ensures.
<tt style='background-color:#E8E8E8;'> dialects.sqlite._DateTimeMixin <a href=' /dialects/sqlite/base.py#L494'>format_is_text_affinity</a>()</tt>	Return true if the storage format will automatically imply a text affinity.
<tt style='background-color:#E8E8E8;'> dialects.sqlite.SQLiteDDLCompiler <a href=' /dialects/sqlite/base.py#L918'>define_constraint_remote_table</a>(constraint,table,preparer)</tt>	Format the remote table clause of a create constraint clause.
<tt style='background-color:#E8E8E8;'> dialects.sqlite.SQLiteIdentifierPreparer <a href=' /dialects/sqlite/base.py#L1001'>format_index</a>(index,use_schema,name)</tt>	Prepare a quoted index and schema name.
<tt style='background-color:#E8E8E8;'> dialects.sqlite.SQLiteDialect <a href=' /dialects/sqlite/base.py#L1253'>_resolve_type_affinity</a>(type_)</tt>	Return a data type from a reflected column using affinity tules.
<tt style='background-color:#E8E8E8;'> dialects.sybase.SybaseInspector <a href=' /dialects/sybase/base.py#L241'>get_table_id</a>(table_name,schema)</tt>	Return the table id from table_name and schema.
<tt style='background-color:#E8E8E8;'> dialects.sybase.SybaseExecutionContext <a href=' /dialects/sybase/base.py#L251'>set_ddl_autocommit</a>(connection,value)</tt>	Must be implemented by subclasses to accommodate ddl executions.
<tt style='background-color:#E8E8E8;'> dialects.sybase.SybaseDialect <a href=' /dialects/sybase/base.py#L460'>get_table_id</a>(connection,table_name,schema)</tt>	Fetch the id for schema table_name.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect_mysqldb <a href=' /dialects/mysql/mysqldb.py#L190'>_detect_charset</a>(connection)</tt>	Sniff out the character set in use for connection results.
<tt style='background-color:#E8E8E8;'> dialects.mysql._myconnpyBIT <a href=' /dialects/mysql/mysqlconnector.py#L72'>result_processor</a>(dialect,coltype)</tt>	Mysql-connector already converts mysql bits so.
<tt style='background-color:#E8E8E8;'> dialects.mysql.ENUM <a href=' /dialects/mysql/enumerated.py#L63'>__init__</a>()</tt>	Construct an enum.
<tt style='background-color:#E8E8E8;'> dialects.mysql.SET <a href=' /dialects/mysql/enumerated.py#L156'>__init__</a>()</tt>	Construct a set.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLCompiler <a href=' /dialects/mysql/base.py#L887'>get_select_precolumns</a>(select)</tt>	Add special mysql keywords in place of distinct.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDDLCompiler <a href=' /dialects/mysql/base.py#L979'>get_column_specification</a>(column)</tt>	Builds column ddl.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDDLCompiler <a href=' /dialects/mysql/base.py#L1015'>post_create_table</a>(table)</tt>	Build table-level create options like engine and collate.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLTypeCompiler <a href=' /dialects/mysql/base.py#L1191'>_extend_numeric</a>(type_,spec)</tt>	Extend a numeric-type declaration with mysql specific extensions.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLTypeCompiler <a href=' /dialects/mysql/base.py#L1203'>_extend_string</a>(type_,defaults,spec)</tt>	Extend a string-type declaration with standard sql character set / collate annotations and mysql specific extensions.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLIdentifierPreparer <a href=' /dialects/mysql/base.py#L1485'>_quote_free_identifiers</a>()</tt>	Unilaterally identifier-quote any number of strings.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect <a href=' /dialects/mysql/base.py#L1599'>do_commit</a>(dbapi_connection)</tt>	Execute a commit.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect <a href=' /dialects/mysql/base.py#L1617'>do_rollback</a>(dbapi_connection)</tt>	Execute a rollback.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect <a href=' /dialects/mysql/base.py#L1664'>_compat_fetchall</a>(rp,charset)</tt>	Proxy result rows to smooth over mysql-python driver inconsistencies.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect <a href=' /dialects/mysql/base.py#L1670'>_compat_fetchone</a>(rp,charset)</tt>	Proxy a result row to smooth over mysql-python driver inconsistencies.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect <a href=' /dialects/mysql/base.py#L1676'>_compat_first</a>(rp,charset)</tt>	Proxy a result row to smooth over mysql-python driver inconsistencies.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect <a href=' /dialects/mysql/base.py#L1744'>get_table_names</a>(connection,schema)</tt>	Return a unicode show tables from a given schema.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect <a href=' /dialects/mysql/base.py#L1919'>_tabledef_parser</a>()</tt>	Return the mysqltabledefinitionparser generate if needed.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect <a href=' /dialects/mysql/base.py#L1952'>_detect_casing</a>(connection)</tt>	Sniff out identifier case sensitivity.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect <a href=' /dialects/mysql/base.py#L1978'>_detect_collations</a>(connection)</tt>	Pull the active collations list from the server.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect <a href=' /dialects/mysql/base.py#L1994'>_detect_ansiquotes</a>(connection)</tt>	Detect and adjust for the ansi_quotes sql mode.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect <a href=' /dialects/mysql/base.py#L2015'>_show_create_table</a>(connection,table,charset,full_name)</tt>	Run show create table for a table.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect <a href=' /dialects/mysql/base.py#L2039'>_describe_table</a>(connection,table,charset,full_name)</tt>	Run describe for a table and return processed rows.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect_pyodbc <a href=' /dialects/mysql/pyodbc.py#L52'>_detect_charset</a>(connection)</tt>	Sniff out the character set in use for connection results.
<tt style='background-color:#E8E8E8;'> dialects.mysql._oursqlBIT <a href=' /dialects/mysql/oursql.py#L32'>result_processor</a>(dialect,coltype)</tt>	Oursql already converts mysql bits so.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect_oursql <a href=' /dialects/mysql/oursql.py#L70'>do_execute</a>(cursor,statement,parameters,context)</tt>	Provide an implementation of *cursor.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect_oursql <a href=' /dialects/mysql/oursql.py#L237'>_detect_charset</a>(connection)</tt>	Sniff out the character set in use for connection results.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect_oursql <a href=' /dialects/mysql/oursql.py#L242'>_compat_fetchall</a>(rp,charset)</tt>	Oursql isn't super-broken like mysqldb yaaay.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect_oursql <a href=' /dialects/mysql/oursql.py#L246'>_compat_fetchone</a>(rp,charset)</tt>	Oursql isn't super-broken like mysqldb yaaay.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLTableDefinitionParser <a href=' /dialects/mysql/reflection.py#L65'>_parse_constraints</a>(line)</tt>	Parse a key or constraint line.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLTableDefinitionParser <a href=' /dialects/mysql/reflection.py#L100'>_parse_table_name</a>(line,state)</tt>	Extract the table name.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLTableDefinitionParser <a href=' /dialects/mysql/reflection.py#L111'>_parse_table_options</a>(line,state)</tt>	Build a dictionary of all reflected table-level options.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLTableDefinitionParser <a href=' /dialects/mysql/reflection.py#L140'>_parse_column</a>(line,state)</tt>	Extract column details.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLTableDefinitionParser <a href=' /dialects/mysql/reflection.py#L233'>_describe_to_create</a>(table_name,columns)</tt>	Re-format describe output as a show create table string.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLTableDefinitionParser <a href=' /dialects/mysql/reflection.py#L278'>_parse_keyexprs</a>(identifiers)</tt>	Unpack '"col" 2 ,"col" asc'-ish strings into components.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLTableDefinitionParser <a href=' /dialects/mysql/reflection.py#L283'>_prep_regexes</a>()</tt>	Pre-compile regular expressions.
<tt style='background-color:#E8E8E8;'> dialects.mysql. <a href=' /dialects/mysql/reflection.py#L447'>_pr_compile</a>(regex,cleanup)</tt>	Prepare a 2-tuple of compiled regex and callable.
<tt style='background-color:#E8E8E8;'> dialects.mysql. <a href=' /dialects/mysql/reflection.py#L453'>_re_compile</a>(regex)</tt>	Compile a string to regex i and unicode.
<tt style='background-color:#E8E8E8;'> dialects.mysql._cymysqlBIT <a href=' /dialects/mysql/cymysql.py#L26'>result_processor</a>(dialect,coltype)</tt>	Convert a mysql's 64 bit variable length binary string to a long.
<tt style='background-color:#E8E8E8;'> dialects.mysql._ZxJDBCBit <a href=' /dialects/mysql/zxjdbc.py#L38'>result_processor</a>(dialect,coltype)</tt>	Converts boolean or byte arrays from mysql connector/j to longs.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect_zxjdbc <a href=' /dialects/mysql/zxjdbc.py#L76'>_detect_charset</a>(connection)</tt>	Sniff out the character set in use for connection results.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MySQLDialect_zxjdbc <a href=' /dialects/mysql/zxjdbc.py#L94'>_driver_kwargs</a>()</tt>	Return kw arg dict to be sent to connect().
<tt style='background-color:#E8E8E8;'> dialects.mysql.NUMERIC <a href=' /dialects/mysql/types.py#L97'>__init__</a>(precision,scale,asdecimal)</tt>	Construct a numeric.
<tt style='background-color:#E8E8E8;'> dialects.mysql.DECIMAL <a href=' /dialects/mysql/types.py#L122'>__init__</a>(precision,scale,asdecimal)</tt>	Construct a decimal.
<tt style='background-color:#E8E8E8;'> dialects.mysql.DOUBLE <a href=' /dialects/mysql/types.py#L147'>__init__</a>(precision,scale,asdecimal)</tt>	Construct a double.
<tt style='background-color:#E8E8E8;'> dialects.mysql.REAL <a href=' /dialects/mysql/types.py#L180'>__init__</a>(precision,scale,asdecimal)</tt>	Construct a real.
<tt style='background-color:#E8E8E8;'> dialects.mysql.FLOAT <a href=' /dialects/mysql/types.py#L213'>__init__</a>(precision,scale,asdecimal)</tt>	Construct a float.
<tt style='background-color:#E8E8E8;'> dialects.mysql.INTEGER <a href=' /dialects/mysql/types.py#L241'>__init__</a>(display_width)</tt>	Construct an integer.
<tt style='background-color:#E8E8E8;'> dialects.mysql.BIGINT <a href=' /dialects/mysql/types.py#L262'>__init__</a>(display_width)</tt>	Construct a biginteger.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MEDIUMINT <a href=' /dialects/mysql/types.py#L283'>__init__</a>(display_width)</tt>	Construct a mediuminteger.
<tt style='background-color:#E8E8E8;'> dialects.mysql.TINYINT <a href=' /dialects/mysql/types.py#L304'>__init__</a>(display_width)</tt>	Construct a tinyint.
<tt style='background-color:#E8E8E8;'> dialects.mysql.SMALLINT <a href=' /dialects/mysql/types.py#L325'>__init__</a>(display_width)</tt>	Construct a smallinteger.
<tt style='background-color:#E8E8E8;'> dialects.mysql.BIT <a href=' /dialects/mysql/types.py#L352'>__init__</a>(length)</tt>	Construct a bit.
<tt style='background-color:#E8E8E8;'> dialects.mysql.BIT <a href=' /dialects/mysql/types.py#L360'>result_processor</a>(dialect,coltype)</tt>	Convert a mysql's 64 bit variable length binary string to a long.
<tt style='background-color:#E8E8E8;'> dialects.mysql.TIME <a href=' /dialects/mysql/types.py#L385'>__init__</a>(timezone,fsp)</tt>	Construct a mysql time type.
<tt style='background-color:#E8E8E8;'> dialects.mysql.TIMESTAMP <a href=' /dialects/mysql/types.py#L432'>__init__</a>(timezone,fsp)</tt>	Construct a mysql timestamp type.
<tt style='background-color:#E8E8E8;'> dialects.mysql.DATETIME <a href=' /dialects/mysql/types.py#L462'>__init__</a>(timezone,fsp)</tt>	Construct a mysql datetime type.
<tt style='background-color:#E8E8E8;'> dialects.mysql.TEXT <a href=' /dialects/mysql/types.py#L499'>__init__</a>(length)</tt>	Construct a text.
<tt style='background-color:#E8E8E8;'> dialects.mysql.TINYTEXT <a href=' /dialects/mysql/types.py#L535'>__init__</a>()</tt>	Construct a tinytext.
<tt style='background-color:#E8E8E8;'> dialects.mysql.MEDIUMTEXT <a href=' /dialects/mysql/types.py#L567'>__init__</a>()</tt>	Construct a mediumtext.
<tt style='background-color:#E8E8E8;'> dialects.mysql.LONGTEXT <a href=' /dialects/mysql/types.py#L599'>__init__</a>()</tt>	Construct a longtext.
<tt style='background-color:#E8E8E8;'> dialects.mysql.VARCHAR <a href=' /dialects/mysql/types.py#L631'>__init__</a>(length)</tt>	Construct a varchar.
<tt style='background-color:#E8E8E8;'> dialects.mysql.CHAR <a href=' /dialects/mysql/types.py#L663'>__init__</a>(length)</tt>	Construct a char.
<tt style='background-color:#E8E8E8;'> dialects.mysql.NVARCHAR <a href=' /dialects/mysql/types.py#L708'>__init__</a>(length)</tt>	Construct an nvarchar.
<tt style='background-color:#E8E8E8;'> dialects.mysql.NCHAR <a href=' /dialects/mysql/types.py#L734'>__init__</a>(length)</tt>	Construct an nchar.
<tt style='background-color:#E8E8E8;'> dialects.firebird.FBDialect_kinterbasdb <a href=' /dialects/firebird/kinterbasdb.py#L143'>_get_server_version_info</a>(connection)</tt>	Get the version of the firebird server used by a connection.
<tt style='background-color:#E8E8E8;'> dialects.firebird.FBDialect_fdb <a href=' /dialects/firebird/fdb.py#L98'>_get_server_version_info</a>(connection)</tt>	Get the version of the firebird server used by a connection.
<tt style='background-color:#E8E8E8;'> dialects.firebird.FBCompiler <a href=' /dialects/firebird/base.py#L297'>get_select_precolumns</a>(select)</tt>	Called when building a select statement position is just before column list firebird puts the limit and offset right.
<tt style='background-color:#E8E8E8;'> dialects.firebird.FBCompiler <a href=' /dialects/firebird/base.py#L312'>limit_clause</a>(select)</tt>	Already taken care of in the get_select_precolumns method.
<tt style='background-color:#E8E8E8;'> dialects.firebird.FBDDLCompiler <a href=' /dialects/firebird/base.py#L329'>visit_create_sequence</a>(create)</tt>	Generate a create generator statement for the sequence.
<tt style='background-color:#E8E8E8;'> dialects.firebird.FBDDLCompiler <a href=' /dialects/firebird/base.py#L348'>visit_drop_sequence</a>(drop)</tt>	Generate a drop generator statement for the sequence.
<tt style='background-color:#E8E8E8;'> dialects.firebird.FBExecutionContext <a href=' /dialects/firebird/base.py#L371'>fire_sequence</a>(seq,type_)</tt>	Get the next value from the sequence using gen_id().
<tt style='background-color:#E8E8E8;'> dialects.firebird.FBDialect <a href=' /dialects/firebird/base.py#L457'>has_table</a>(connection,table_name,schema)</tt>	Return true if the given table exists ignoring the schema.
<tt style='background-color:#E8E8E8;'> dialects.firebird.FBDialect <a href=' /dialects/firebird/base.py#L470'>has_sequence</a>(connection,sequence_name,schema)</tt>	Return true if the given sequence generator exists.
<tt style='background-color:#E8E8E8;'> dialects.mssql.MSTypeCompiler <a href=' /dialects/mssql/base.py#L910'>_extend</a>(spec,type_,length)</tt>	Extend a string-type declaration with standard sql collate annotations.
<tt style='background-color:#E8E8E8;'> dialects.mssql.MSExecutionContext <a href=' /dialects/mssql/base.py#L1054'>pre_exec</a>()</tt>	Activate identity_insert if needed.
<tt style='background-color:#E8E8E8;'> dialects.mssql.MSExecutionContext <a href=' /dialects/mssql/base.py#L1099'>post_exec</a>()</tt>	Disable identity_insert if enabled.
<tt style='background-color:#E8E8E8;'> dialects.mssql.MSSQLCompiler <a href=' /dialects/mssql/base.py#L1205'>get_select_precolumns</a>(select)</tt>	Ms-sql puts top it's version of limit here.
<tt style='background-color:#E8E8E8;'> dialects.mssql.MSSQLCompiler <a href=' /dialects/mssql/base.py#L1234'>visit_select</a>(select)</tt>	Look for limit and offset in a select statement and if so tries to wrap it in a subquery with row_number() criterion.
<tt style='background-color:#E8E8E8;'> dialects.mssql.MSSQLCompiler <a href=' /dialects/mssql/base.py#L1347'>visit_binary</a>(binary)</tt>	Move bind parameters to the right-hand side of an operator where possible.
<tt style='background-color:#E8E8E8;'> dialects.mssql.MSSQLCompiler <a href=' /dialects/mssql/base.py#L1409'>update_from_clause</a>(update_stmt,from_table,extra_froms,from_hints)</tt>	Render the update from clause specific to mssql.
<tt style='background-color:#E8E8E8;'> dialects.mssql.MSSQLStrictCompiler <a href=' /dialects/mssql/base.py#L1451'>render_literal_value</a>(value,type_)</tt>	For date and datetime values convert to a string format acceptable to mssql.
<tt style='background-color:#E8E8E8;'> dialects.mssql.MSIdentifierPreparer <a href=' /dialects/mssql/base.py#L1613'>quote_schema</a>(schema,force)</tt>	Prepare a quoted table and schema name.
<tt style='background-color:#E8E8E8;'> dialects.mssql.MSExecutionContext_pyodbc <a href=' /dialects/mssql/pyodbc.py#L204'>pre_exec</a>()</tt>	Where appropriate issue "select scope_identity()" in the same statement.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/assertions.py#L25'>expect_warnings</a>()</tt>	Context manager which expects one or more warnings.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/assertions.py#L41'>expect_warnings_on</a>(db)</tt>	Context manager which expects one or more warnings on specific dialects.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/assertions.py#L58'>emits_warning</a>()</tt>	Decorator form of expect_warnings().
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/assertions.py#L78'>emits_warning_on</a>(db)</tt>	Mark a test as emitting a warning on a specific dialect.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/assertions.py#L97'>uses_deprecated</a>()</tt>	Mark a test as immune from fatal deprecation warnings.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/assertions.py#L156'>global_cleanup_assertions</a>()</tt>	Check things that have to be finalized at the end of a test suite.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/assertions.py#L213'>eq_</a>(a,b,msg)</tt>	Assert a == b with repr messaging on failure.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/assertions.py#L218'>ne_</a>(a,b,msg)</tt>	Assert a != b with repr messaging on failure.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/assertions.py#L223'>le_</a>(a,b,msg)</tt>	Assert a <= b with repr messaging on failure.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/assertions.py#L236'>is_</a>(a,b,msg)</tt>	Assert a is b with repr messaging on failure.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/assertions.py#L241'>is_not_</a>(a,b,msg)</tt>	Assert a is not b with repr messaging on failure.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/assertions.py#L246'>in_</a>(a,b,msg)</tt>	Assert a in b with repr messaging on failure.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/assertions.py#L251'>not_in_</a>(a,b,msg)</tt>	Assert a in not b with repr messaging on failure.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/assertions.py#L256'>startswith_</a>(a,fragment,msg)</tt>	Assert a startswith fragment with repr messaging on failure.
<tt style='background-color:#E8E8E8;'> testing.AssertsExecutionResults <a href=' /testing/assertions.py#L436'>assert_unordered_result</a>(result,cls)</tt>	As assert_result but the order of objects is not considered.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/schema.py#L17'>Table</a>()</tt>	A schema table wrapper/hook for dialect-specific tweaks.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/schema.py#L63'>Column</a>()</tt>	A schema column wrapper/hook for dialect-specific tweaks.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/util.py#L93'>conforms_partial_ordering</a>(tuples,sorted_elements)</tt>	True if the given sorting conforms to the given partial ordering.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/util.py#L126'>function_named</a>(fn,name)</tt>	Return a function with a given __name__.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/util.py#L145'>run_as_contextmanager</a>(ctx,fn)</tt>	Run the given function under the given contextmanager simulating the behavior of 'with' to support older.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/util.py#L170'>rowset</a>(results)</tt>	Converts the results of sql execution into a plain set of column tuples.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/util.py#L183'>provide_metadata</a>(fn)</tt>	Provide bound metadata for a single test dropping afterwards.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/util.py#L202'>force_drop_names</a>()</tt>	Force the given table names to be dropped after test complete.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/profiling.py#L187'>function_call_count</a>(variance)</tt>	Assert a target for a test case's function call count.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/warnings.py#L15'>setup_filters</a>()</tt>	Set global warning behavior for the test suite.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/warnings.py#L31'>assert_warnings</a>(fn,warning_msgs,regex)</tt>	Assert that each of the given warnings are emitted by fn.
<tt style='background-color:#E8E8E8;'> testing.ComparableEntity <a href=' /testing/entities.py#L44'>__eq__</a>(other)</tt>	'deep sparse compare.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/engines.py#L119'>rollback_open_connections</a>(fn)</tt>	Decorator that rolls back all open connections after fn execution.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/engines.py#L129'>close_first</a>(fn)</tt>	Decorator that closes all connections before fn execution.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/engines.py#L137'>close_open_connections</a>(fn)</tt>	Decorator that closes all connections after fn execution.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/engines.py#L226'>testing_engine</a>(url,options)</tt>	Produce an engine configured by --options with optional overrides.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/engines.py#L264'>mock_engine</a>(dialect_name)</tt>	Provides a mocking engine based on the current testing db.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/engines.py#L355'>proxying_engine</a>(conn_cls,cursor_cls)</tt>	Produce an engine that provides proxy hooks for common methods.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/exclusions.py#L379'>_server_version</a>(engine)</tt>	Return a server_version_info tuple.
<tt style='background-color:#E8E8E8;'> testing. <a href=' /testing/runner.py#L42'>setup_py_test</a>()</tt>	Runner to use for the 'test_suite' entry of your setup py.
<tt style='background-color:#E8E8E8;'> testing.TablesTest <a href=' /testing/fixtures.py#L199'>_load_fixtures</a>(cls)</tt>	Insert rows as represented by the fixtures() method.
<tt style='background-color:#E8E8E8;'> testing.MappedTest <a href=' /testing/fixtures.py#L311'>_with_register_classes</a>(cls,fn)</tt>	Run a setup method framing the operation with a base class that will catch new subclasses to be established within.
<tt style='background-color:#E8E8E8;'> testing.Config <a href=' /testing/config.py#L37'>register</a>(cls,db,db_opts,options)</tt>	Add a config as one of the global configs.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L30'>create_table</a>()</tt>	Target platform can emit basic createtable ddl.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L36'>drop_table</a>()</tt>	Target platform can emit basic droptable ddl.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L42'>foreign_keys</a>()</tt>	Target database must support foreign keys.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L48'>on_update_cascade</a>()</tt>	"target database must support on update cascade behavior in.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L55'>non_updating_cascade</a>()</tt>	Target database must *not* support on update cascade behavior in.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L75'>self_referential_foreign_keys</a>()</tt>	Target database must support self-referential foreign keys.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L81'>foreign_key_ddl</a>()</tt>	Target database must support the ddl phrases for foreign key.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L87'>named_constraints</a>()</tt>	Target database must support names for constraints.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L93'>subqueries</a>()</tt>	Target database must support subqueries.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L99'>offset</a>()</tt>	Target database can render offset or an equivalent in a select.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L107'>bound_limit_offset</a>()</tt>	Target database can render limit and/or offset using a bound.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L115'>parens_in_union_contained_select_w_limit_offset</a>()</tt>	Target database must support parenthesized select in union when limit/offset is specifically present.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L127'>parens_in_union_contained_select_wo_limit_offset</a>()</tt>	Target database must support parenthesized select in union when offset/limit is specifically not present.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L141'>boolean_col_expressions</a>()</tt>	Target database must support boolean expressions as columns.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L147'>nullsordering</a>()</tt>	Target backends that support nulls ordering.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L153'>standalone_binds</a>()</tt>	Target database/driver supports bound parameters as column expressions without being in the context of a typed column.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L161'>intersect</a>()</tt>	Target database must support intersect or equivalent.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L166'>except_</a>()</tt>	Target database must support except or equivalent i e minus.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L171'>window_functions</a>()</tt>	Target database must support window functions.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L176'>autoincrement_insert</a>()</tt>	Target platform generates new surrogate integer primary key values when insert() is executed excluding the pk column.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L183'>fetch_rows_post_commit</a>()</tt>	Target platform will allow cursor fetchone() to proceed after a.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L196'>empty_inserts</a>()</tt>	Target platform supports insert with no values i e.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L207'>insert_from_select</a>()</tt>	Target platform supports insert from a select.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L213'>returning</a>()</tt>	Target platform supports returning.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L222'>tuple_in</a>()</tt>	Target platform supports the syntax " x y in x1 y1 x2 y2.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L230'>duplicate_names_in_cursor_description</a>()</tt>	Target platform supports a select statement that has the same name repeated more than once in the columns list.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L237'>denormalized_names</a>()</tt>	Target database must have 'denormalized', i e.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L247'>multivalues_inserts</a>()</tt>	Target database must support multiple values clauses in an insert statement.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L257'>implements_get_lastrowid</a>()</tt>	"target dialect implements the executioncontext get_lastrowid().
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L265'>emulated_lastrowid</a>()</tt>	"target dialect retrieves cursor lastrowid or fetches.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L277'>dbapi_lastrowid</a>()</tt>	"target platform includes a 'lastrowid' accessor on the dbapi cursor object.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L285'>views</a>()</tt>	Target database must support views.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L291'>schemas</a>()</tt>	Target database must support external schemas and have one named 'test_schema'.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L298'>server_side_cursors</a>()</tt>	Target dialect must support server side cursors.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L306'>sequences</a>()</tt>	Target database must support sequences.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L314'>sequences_optional</a>()</tt>	Target database supports sequences but also optionally as a means of generating new pk values.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L336'>view_column_reflection</a>()</tt>	Target database must support retrieval of the columns in a view similarly to how a table is inspected.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L346'>view_reflection</a>()</tt>	Target database must support inspection of the full create view definition.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L372'>temp_table_names</a>()</tt>	Target dialect supports listing of temporary table names.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L377'>temporary_tables</a>()</tt>	Target database supports temporary tables.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L382'>temporary_views</a>()</tt>	Target database supports temporary views.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L391'>unique_constraint_reflection</a>()</tt>	Target dialect supports reflection of unique constraints.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L396'>duplicate_key_raises_integrity_error</a>()</tt>	Target dialect raises integrityerror when reporting an insert with a primary key violation.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L404'>unbounded_varchar</a>()</tt>	Target database must support varchar with no length.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L410'>unicode_data</a>()</tt>	Target database/dialect must support python unicode objects with non-ascii characters represented delivered as bound parameters.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L419'>unicode_ddl</a>()</tt>	Target driver must support some degree of non-ascii symbol names.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L426'>datetime_literals</a>()</tt>	Target dialect supports rendering of a date time or datetime as a literal string e.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L435'>datetime</a>()</tt>	Target dialect supports representation of python datetime.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L442'>datetime_microseconds</a>()</tt>	Target dialect supports representation of python datetime.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L449'>datetime_historic</a>()</tt>	Target dialect supports representation of python datetime.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L456'>date</a>()</tt>	Target dialect supports representation of python datetime.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L463'>date_coerces_from_datetime</a>()</tt>	Target dialect accepts a datetime object as the target of a date column.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L470'>date_historic</a>()</tt>	Target dialect supports representation of python datetime.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L477'>time</a>()</tt>	Target dialect supports representation of python datetime.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L484'>time_microseconds</a>()</tt>	Target dialect supports representation of python datetime.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L491'>binary_comparisons</a>()</tt>	Target database/driver can allow blob/binary fields to be compared against a bound parameter value.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L499'>binary_literals</a>()</tt>	Target backend supports simple binary literals e g an.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L515'>json_type</a>()</tt>	Target platform implements a native json type.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L521'>json_array_indexes</a>()</tt>	"target platform supports numeric array indexes.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L528'>precision_numerics_general</a>()</tt>	Target backend has general support for moderately high-precision numerics.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L534'>precision_numerics_enotation_small</a>()</tt>	Target backend supports decimal() objects using e notation to represent very small values.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L540'>precision_numerics_enotation_large</a>()</tt>	Target backend supports decimal() objects using e notation to represent very large values.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L546'>precision_numerics_many_significant_digits</a>()</tt>	Target backend supports values with many digits on both sides such as 319438950232418390.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L554'>precision_numerics_retains_significant_digits</a>()</tt>	A precision numeric type will return empty significant digits i.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L562'>precision_generic_float_type</a>()</tt>	Target backend will return native floating point numbers with at least seven decimal places when using the generic float type.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L570'>floats_to_four_decimals</a>()</tt>	Target backend can return a floating-point number with four significant digits (such as 15.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L579'>fetch_null_from_numeric</a>()</tt>	Target backend doesn't crash when you try to select a numeric value that has a value of null.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L589'>text_type</a>()</tt>	Target database must support an unbounded text() ".
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L596'>empty_strings_varchar</a>()</tt>	Target database can persist/return an empty string with a varchar.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L604'>empty_strings_text</a>()</tt>	Target database can persist/return an empty string with an unbounded text.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L611'>selectone</a>()</tt>	Target driver must support the literal statement 'select 1'.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L616'>savepoints</a>()</tt>	Target database must support savepoints.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L622'>two_phase_transactions</a>()</tt>	Target database must support two-phase transactions.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L628'>update_from</a>()</tt>	Target must support update from syntax.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L633'>update_where_target_in_subquery</a>()</tt>	Target must support update where the same table is present in a subquery in the where clause.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L648'>mod_operator_as_percent_sign</a>()</tt>	Target database must use a plain percent '%' as the 'modulus' operator.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L654'>percent_schema_names</a>()</tt>	Target backend supports weird identifiers with percent signs in them e.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L666'>order_by_label_with_expression</a>()</tt>	Target backend supports order by a column label within an expression.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L681'>unicode_connections</a>()</tt>	Target driver must support non-ascii characters being passed at all.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L688'>graceful_disconnects</a>()</tt>	Target driver must raise a dbapi-level exception such as interfaceerror when the underlying connection has been closed.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L696'>skip_mysql_on_windows</a>()</tt>	Catchall for a large variety of mysql on windows failures.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L701'>ad_hoc_engines</a>()</tt>	Test environment must allow ad-hoc engine/connection creation.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L721'>threading_with_mock</a>()</tt>	Mark tests that use threading and mock at the same time - stability issues have been observed with coverage + python 3.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L762'>predictable_gc</a>()</tt>	Target platform must remove all cycles unconditionally when gc.
<tt style='background-color:#E8E8E8;'> testing.SuiteRequirements <a href=' /testing/requirements.py#L770'>no_coverage</a>()</tt>	Test should be skipped if coverage is enabled.
<tt style='background-color:#E8E8E8;'> testing.CompiledSQL <a href=' /testing/assertsql.py#L82'>_received_statement</a>(execute_observed)</tt>	Reconstruct the statement and params in terms of a target dialect which for compiledsql is just defaultdialect.
<tt style='background-color:#E8E8E8;'> testing.plugin. <a href=' /testing/plugin/plugin_base.py#L98'>configure_follower</a>(follower_ident)</tt>	Configure required state for a follower.
<tt style='background-color:#E8E8E8;'> testing.plugin. <a href=' /testing/plugin/plugin_base.py#L109'>memoize_important_follower_config</a>(dict_)</tt>	Store important configuration we will need to send to a follower.
<tt style='background-color:#E8E8E8;'> testing.plugin. <a href=' /testing/plugin/plugin_base.py#L125'>restore_important_follower_config</a>(dict_)</tt>	Restore important configuration needed by a follower.
<tt style='background-color:#E8E8E8;'> testing.plugin. <a href=' /testing/plugin/plugin_base.py#L142'>pre_begin</a>(opt)</tt>	Things to set up early before coverage might be setup.
<tt style='background-color:#E8E8E8;'> testing.plugin. <a href=' /testing/plugin/plugin_base.py#L161'>post_begin</a>()</tt>	Things to set up later once we know coverage is running.
<tt style='background-color:#E8E8E8;'> testing.suite.LimitOffsetTest <a href=' /testing/suite/test_select.py#L150'>test_limit_offset_nobinds</a>()</tt>	Test that 'literal binds' mode works - no bound params.
<tt style='background-color:#E8E8E8;'> testing.suite.RowFetchTest <a href=' /testing/suite/test_results.py#L95'>test_row_w_scalar_select</a>()</tt>	Test that a scalar select as a column is returned as such and that type conversion works ok.
<tt style='background-color:#E8E8E8;'> testing.suite._LiteralRoundTripFixture <a href=' /testing/suite/test_types.py#L18'>_literal_round_trip</a>(type_,input_,output,filter_)</tt>	Test literal rendering.
<tt style='background-color:#E8E8E8;'> testing.suite.NumericTest <a href=' /testing/suite/test_types.py#L448'>test_enotation_decimal</a>()</tt>	Test exceedingly small decimals.
<tt style='background-color:#E8E8E8;'> testing.suite.NumericTest <a href=' /testing/suite/test_types.py#L477'>test_enotation_decimal_large</a>()</tt>	Test exceedingly large decimals.
<tt style='background-color:#E8E8E8;'> testing.suite.EscapingTest <a href=' /testing/suite/test_dialect.py#L47'>test_percent_sign_round_trip</a>()</tt>	Test that the dbapi accommodates for escaped / nonescaped.
<tt style='background-color:#E8E8E8;'> testing.suite.ComponentReflectionTest <a href=' /testing/suite/test_reflection.py#L725'>test_autoincrement_col</a>()</tt>	Test that 'autoincrement' is reflected according to sqla's policy.
<tt style='background-color:#E8E8E8;'> connectors.ZxJDBCConnector <a href=' /connectors/zxJDBC.py#L31'>_driver_kwargs</a>()</tt>	Return kw arg dict to be sent to connect().
<tt style='background-color:#E8E8E8;'> connectors.ZxJDBCConnector <a href=' /connectors/zxJDBC.py#L35'>_create_jdbc_url</a>(url)</tt>	Create a jdbc url from a :class ~sqlalchemy engine url url.
<tt style='background-color:#E8E8E8;'> connectors.MxODBCConnector <a href=' /connectors/mxodbc.py#L55'>_load_mx_exceptions</a>(cls)</tt>	Import mxodbc exception classes into the module namespace as if they had been imported normally.
<tt style='background-color:#E8E8E8;'> connectors.MxODBCConnector <a href=' /connectors/mxodbc.py#L73'>_error_handler</a>()</tt>	Return a handler that adjusts mxodbc's raised warnings to emit python standard warnings.
<tt style='background-color:#E8E8E8;'> connectors.MxODBCConnector <a href=' /connectors/mxodbc.py#L89'>create_connect_args</a>(url)</tt>	Return a tuple of *args **kwargs for creating a connection.
<tt style='background-color:#E8E8E8;'> event._EventKey <a href=' /event/registry.py#L222'>contains</a>()</tt>	Return true if this event key is registered to listen.
<tt style='background-color:#E8E8E8;'> event._Dispatch <a href=' /event/base.py#L116'>_join</a>(other)</tt>	Create a 'join' of this :class _dispatch and another.
<tt style='background-color:#E8E8E8;'> event._Dispatch <a href=' /event/base.py#L135'>_update</a>(other,only_propagate)</tt>	Populate from the listeners in another :class _dispatch object.
<tt style='background-color:#E8E8E8;'> event. <a href=' /event/base.py#L158'>_create_dispatcher_class</a>(cls,classname,bases,dict_)</tt>	Create a :class _dispatch class corresponding to an.
<tt style='background-color:#E8E8E8;'> event. <a href=' /event/api.py#L31'>listen</a>(target,identifier,fn)</tt>	Register a listener function for the given target.
<tt style='background-color:#E8E8E8;'> event. <a href=' /event/api.py#L92'>listens_for</a>(target,identifier)</tt>	Decorate a function as a listener for the given target + identifier.
<tt style='background-color:#E8E8E8;'> event. <a href=' /event/api.py#L129'>remove</a>(target,identifier,fn)</tt>	Remove an event listener.
<tt style='background-color:#E8E8E8;'> event. <a href=' /event/api.py#L181'>contains</a>(target,identifier,fn)</tt>	Return true if the given target/ident/fn is set up to listen.
<tt style='background-color:#E8E8E8;'> event._ClsLevelDispatch <a href=' /event/attr.py#L145'>clear</a>()</tt>	Clear all class level listeners.
<tt style='background-color:#E8E8E8;'> event._ClsLevelDispatch <a href=' /event/attr.py#L154'>for_modify</a>(obj)</tt>	Return an event collection which can be modified.
<tt style='background-color:#E8E8E8;'> event._EmptyListener <a href=' /event/attr.py#L193'>for_modify</a>(obj)</tt>	Return an event collection which can be modified.
<tt style='background-color:#E8E8E8;'> event._EmptyListener <a href=' /event/attr.py#L214'>__call__</a>()</tt>	Execute this event.
<tt style='background-color:#E8E8E8;'> event._CompoundListener <a href=' /event/attr.py#L238'>exec_once</a>()</tt>	Execute this event but only if it has not been executed already for this collection.
<tt style='background-color:#E8E8E8;'> event._CompoundListener <a href=' /event/attr.py#L250'>__call__</a>()</tt>	Execute this event.
<tt style='background-color:#E8E8E8;'> event._ListenerCollection <a href=' /event/attr.py#L294'>for_modify</a>(obj)</tt>	Return an event collection which can be modified.
<tt style='background-color:#E8E8E8;'> event._ListenerCollection <a href=' /event/attr.py#L303'>_update</a>(other,only_propagate)</tt>	Populate from the listeners in another :class _dispatch object.
<tt style='background-color:#E8E8E8;'> ext.ShardedQuery <a href=' /ext/horizontal_shard.py#L32'>set_shard</a>(shard_id)</tt>	Return a new query limited to a single shard id.
<tt style='background-color:#E8E8E8;'> ext.ShardedSession <a href=' /ext/horizontal_shard.py#L78'>__init__</a>(shard_chooser,id_chooser,query_chooser,shards)</tt>	Construct a shardedsession.
<tt style='background-color:#E8E8E8;'> ext.BakedQuery <a href=' /ext/baked.py#L43'>bakery</a>(cls,size,_size_alert)</tt>	Construct a new bakery.
<tt style='background-color:#E8E8E8;'> ext.BakedQuery <a href=' /ext/baked.py#L78'>add_criteria</a>(fn)</tt>	Add a criteria function to this :class bakedquery.
<tt style='background-color:#E8E8E8;'> ext.BakedQuery <a href=' /ext/baked.py#L89'>with_criteria</a>(fn)</tt>	Add a criteria function to a :class bakedquery cloned from this one.
<tt style='background-color:#E8E8E8;'> ext.BakedQuery <a href=' /ext/baked.py#L98'>for_session</a>(session)</tt>	Return a :class result object for this :class bakedquery.
<tt style='background-color:#E8E8E8;'> ext.BakedQuery <a href=' /ext/baked.py#L110'>spoil</a>(full)</tt>	Cancel any query caching that will occur on this bakedquery object.
<tt style='background-color:#E8E8E8;'> ext.BakedQuery <a href=' /ext/baked.py#L137'>_add_lazyload_options</a>(options,effective_path)</tt>	Used by per-state lazy loaders to add options to the "lazy load" query from a parent query.
<tt style='background-color:#E8E8E8;'> ext.BakedQuery <a href=' /ext/baked.py#L200'>_bake_subquery_loaders</a>(session,context)</tt>	Convert subquery eager loaders in the cache into baked queries.
<tt style='background-color:#E8E8E8;'> ext.BakedQuery <a href=' /ext/baked.py#L219'>_unbake_subquery_loaders</a>(session,context,params)</tt>	Retrieve subquery eager loaders stored by _bake_subquery_loaders and turn them back into result objects that will iterate just.
<tt style='background-color:#E8E8E8;'> ext.Result <a href=' /ext/baked.py#L247'>params</a>()</tt>	Specify parameters to be replaced into the string sql statement.
<tt style='background-color:#E8E8E8;'> ext.Result <a href=' /ext/baked.py#L286'>count</a>()</tt>	Return the 'count'.
<tt style='background-color:#E8E8E8;'> ext.Result <a href=' /ext/baked.py#L302'>scalar</a>()</tt>	Return the first element of the first result or none if no rows present.
<tt style='background-color:#E8E8E8;'> ext.Result <a href=' /ext/baked.py#L320'>first</a>()</tt>	Return the first row.
<tt style='background-color:#E8E8E8;'> ext.Result <a href=' /ext/baked.py#L333'>one</a>()</tt>	Return exactly one result or raise an exception.
<tt style='background-color:#E8E8E8;'> ext.Result <a href=' /ext/baked.py#L349'>one_or_none</a>()</tt>	Return one or zero results or raise an exception for multiple rows.
<tt style='background-color:#E8E8E8;'> ext.Result <a href=' /ext/baked.py#L369'>all</a>()</tt>	Return all rows.
<tt style='background-color:#E8E8E8;'> ext.Result <a href=' /ext/baked.py#L377'>get</a>(ident)</tt>	Retrieve an object based on identity.
<tt style='background-color:#E8E8E8;'> ext.Result <a href=' /ext/baked.py#L387'>_load_on_ident</a>(query,key)</tt>	Load the given identity key from the database.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/baked.py#L444'>bake_lazy_loaders</a>()</tt>	Enable the use of baked queries for all lazyloaders systemwide.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/baked.py#L456'>unbake_lazy_loaders</a>()</tt>	Disable the use of baked queries for all lazyloaders systemwide.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/baked.py#L471'>baked_lazyload</a>(loadopt,attr)</tt>	Indicate that the given attribute should be loaded using "lazy" loading with a "baked" query used in the load.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/instrumentation.py#L65'>find_native_user_instrumentation_hook</a>(cls)</tt>	Find user-specified instrumentation management for a class.
<tt style='background-color:#E8E8E8;'> ext.ExtendedInstrumentationRegistry <a href=' /ext/instrumentation.py#L132'>_collect_management_factories_for</a>(cls)</tt>	Return a collection of factories in play or specified for a hierarchy.
<tt style='background-color:#E8E8E8;'> ext._ClassInstrumentationAdapter <a href=' /ext/instrumentation.py#L332'>_new_state_if_none</a>(instance)</tt>	Install a default instancestate if none is present.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/instrumentation.py#L370'>_install_instrumented_lookups</a>()</tt>	Replace global class/object management functions with extendedinstrumentationregistry implementations which.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/instrumentation.py#L392'>_reinstall_default_lookups</a>()</tt>	Restore simplified lookups.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/compiler.py#L408'>compiles</a>(class_)</tt>	Register a function as a compiler for a given :class.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/compiler.py#L448'>deregister</a>(class_)</tt>	Remove all custom compilers associated with a given :class.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/associationproxy.py#L24'>association_proxy</a>(target_collection,attr)</tt>	Return a python property implementing a view of a target attribute which references an attribute on members of the.
<tt style='background-color:#E8E8E8;'> ext.AssociationProxy <a href=' /ext/associationproxy.py#L95'>__init__</a>(target_collection,attr,creator,getset_factory)</tt>	Construct a new :class associationproxy.
<tt style='background-color:#E8E8E8;'> ext.AssociationProxy <a href=' /ext/associationproxy.py#L161'>remote_attr</a>()</tt>	The 'remote' :class mapperproperty referenced by this.
<tt style='background-color:#E8E8E8;'> ext.AssociationProxy <a href=' /ext/associationproxy.py#L177'>local_attr</a>()</tt>	The 'local' :class mapperproperty referenced by this.
<tt style='background-color:#E8E8E8;'> ext.AssociationProxy <a href=' /ext/associationproxy.py#L193'>attr</a>()</tt>	Return a tuple of (local_attr remote_attr).
<tt style='background-color:#E8E8E8;'> ext.AssociationProxy <a href=' /ext/associationproxy.py#L217'>target_class</a>()</tt>	The intermediary class handled by this :class associationproxy.
<tt style='background-color:#E8E8E8;'> ext.AssociationProxy <a href=' /ext/associationproxy.py#L227'>scalar</a>()</tt>	Return true if this :class associationproxy proxies a scalar.
<tt style='background-color:#E8E8E8;'> ext.AssociationProxy <a href=' /ext/associationproxy.py#L366'>any</a>(criterion)</tt>	Produce a proxied 'any' expression using exists.
<tt style='background-color:#E8E8E8;'> ext.AssociationProxy <a href=' /ext/associationproxy.py#L399'>has</a>(criterion)</tt>	Produce a proxied 'has' expression using exists.
<tt style='background-color:#E8E8E8;'> ext.AssociationProxy <a href=' /ext/associationproxy.py#L421'>contains</a>(obj)</tt>	Produce a proxied 'contains' expression using exists.
<tt style='background-color:#E8E8E8;'> ext._AssociationCollection <a href=' /ext/associationproxy.py#L478'>__init__</a>(lazy_collection,creator,getter,setter)</tt>	Constructs an _associationcollection.
<tt style='background-color:#E8E8E8;'> ext._AssociationList <a href=' /ext/associationproxy.py#L596'>__iter__</a>()</tt>	Iterate over proxied values.
<tt style='background-color:#E8E8E8;'> ext._AssociationList <a href=' /ext/associationproxy.py#L634'>reverse</a>()</tt>	Not supported use reversed mylist.
<tt style='background-color:#E8E8E8;'> ext._AssociationList <a href=' /ext/associationproxy.py#L639'>sort</a>()</tt>	Not supported use sorted mylist.
<tt style='background-color:#E8E8E8;'> ext._AssociationSet <a href=' /ext/associationproxy.py#L902'>__iter__</a>()</tt>	Iterate over proxied values.
<tt style='background-color:#E8E8E8;'> ext.hybrid_method <a href=' /ext/hybrid.py#L789'>__init__</a>(func,expr)</tt>	Create a new :class hybrid_method.
<tt style='background-color:#E8E8E8;'> ext.hybrid_method <a href=' /ext/hybrid.py#L815'>expression</a>(expr)</tt>	Provide a modifying decorator that defines a sql-expression producing method.
<tt style='background-color:#E8E8E8;'> ext.hybrid_property <a href=' /ext/hybrid.py#L834'>__init__</a>(fget,fset,fdel,expr)</tt>	Create a new :class hybrid_property.
<tt style='background-color:#E8E8E8;'> ext.hybrid_property <a href=' /ext/hybrid.py#L885'>overrides</a>()</tt>	Prefix for a method that is overriding an existing attribute.
<tt style='background-color:#E8E8E8;'> ext.hybrid_property <a href=' /ext/hybrid.py#L921'>getter</a>(fget)</tt>	Provide a modifying decorator that defines a getter method.
<tt style='background-color:#E8E8E8;'> ext.hybrid_property <a href=' /ext/hybrid.py#L930'>setter</a>(fset)</tt>	Provide a modifying decorator that defines a setter method.
<tt style='background-color:#E8E8E8;'> ext.hybrid_property <a href=' /ext/hybrid.py#L935'>deleter</a>(fdel)</tt>	Provide a modifying decorator that defines a deletion method.
<tt style='background-color:#E8E8E8;'> ext.hybrid_property <a href=' /ext/hybrid.py#L940'>expression</a>(expr)</tt>	Provide a modifying decorator that defines a sql-expression producing method.
<tt style='background-color:#E8E8E8;'> ext.hybrid_property <a href=' /ext/hybrid.py#L968'>comparator</a>(comparator)</tt>	Provide a modifying decorator that defines a custom comparator producing method.
<tt style='background-color:#E8E8E8;'> ext.hybrid_property <a href=' /ext/hybrid.py#L999'>update_expression</a>(meth)</tt>	Provide a modifying decorator that defines an update tuple producing method.
<tt style='background-color:#E8E8E8;'> ext.MutableBase <a href=' /ext/mutable.py#L365'>_parents</a>()</tt>	Dictionary of parent object->attribute name on the parent.
<tt style='background-color:#E8E8E8;'> ext.MutableBase <a href=' /ext/mutable.py#L377'>coerce</a>(cls,key,value)</tt>	Given a value coerce it into the target type.
<tt style='background-color:#E8E8E8;'> ext.MutableBase <a href=' /ext/mutable.py#L406'>_get_listen_keys</a>(cls,attribute)</tt>	Given a descriptor attribute return a set() of the attribute keys which indicate a change in the state of this attribute.
<tt style='background-color:#E8E8E8;'> ext.MutableBase <a href=' /ext/mutable.py#L427'>_listen_on_attribute</a>(cls,attribute,coerce,parent_cls)</tt>	Establish this type as a mutation listener for the given mapped descriptor.
<tt style='background-color:#E8E8E8;'> ext.Mutable <a href=' /ext/mutable.py#L514'>changed</a>()</tt>	Subclasses should call this method whenever change events occur.
<tt style='background-color:#E8E8E8;'> ext.Mutable <a href=' /ext/mutable.py#L520'>associate_with_attribute</a>(cls,attribute)</tt>	Establish this type as a mutation listener for the given mapped descriptor.
<tt style='background-color:#E8E8E8;'> ext.Mutable <a href=' /ext/mutable.py#L528'>associate_with</a>(cls,sqltype)</tt>	Associate this wrapper with all future mapped columns of the given type.
<tt style='background-color:#E8E8E8;'> ext.Mutable <a href=' /ext/mutable.py#L553'>as_mutable</a>(cls,sqltype)</tt>	Associate a sql type with this mutable python type.
<tt style='background-color:#E8E8E8;'> ext.MutableComposite <a href=' /ext/mutable.py#L629'>changed</a>()</tt>	Subclasses should call this method whenever change events occur.
<tt style='background-color:#E8E8E8;'> ext.MutableDict <a href=' /ext/mutable.py#L679'>__setitem__</a>(key,value)</tt>	Detect dictionary set events and emit change events.
<tt style='background-color:#E8E8E8;'> ext.MutableDict <a href=' /ext/mutable.py#L689'>__delitem__</a>(key)</tt>	Detect dictionary del events and emit change events.
<tt style='background-color:#E8E8E8;'> ext.MutableDict <a href=' /ext/mutable.py#L712'>coerce</a>(cls,key,value)</tt>	Convert plain dictionary to instance of this class.
<tt style='background-color:#E8E8E8;'> ext.MutableList <a href=' /ext/mutable.py#L754'>__setitem__</a>(index,value)</tt>	Detect list set events and emit change events.
<tt style='background-color:#E8E8E8;'> ext.MutableList <a href=' /ext/mutable.py#L759'>__setslice__</a>(start,end,value)</tt>	Detect list set events and emit change events.
<tt style='background-color:#E8E8E8;'> ext.MutableList <a href=' /ext/mutable.py#L764'>__delitem__</a>(index)</tt>	Detect list del events and emit change events.
<tt style='background-color:#E8E8E8;'> ext.MutableList <a href=' /ext/mutable.py#L769'>__delslice__</a>(start,end)</tt>	Detect list del events and emit change events.
<tt style='background-color:#E8E8E8;'> ext.MutableList <a href=' /ext/mutable.py#L807'>coerce</a>(cls,index,value)</tt>	Convert plain list to instance of this class.
<tt style='background-color:#E8E8E8;'> ext.MutableSet <a href=' /ext/mutable.py#L887'>coerce</a>(cls,index,value)</tt>	Convert plain set to instance of this class.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/orderinglist.py#L128'>ordering_list</a>(attr,count_from)</tt>	Prepares an :class orderinglist factory for use in mapper definitions.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/orderinglist.py#L166'>count_from_0</a>(index,collection)</tt>	Numbering function consecutive integers starting at 0.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/orderinglist.py#L172'>count_from_1</a>(index,collection)</tt>	Numbering function consecutive integers starting at 1.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/orderinglist.py#L178'>count_from_n_factory</a>(start)</tt>	Numbering function consecutive integers starting at arbitrary start.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/orderinglist.py#L190'>_unsugar_count_from</a>()</tt>	Builds counting functions from keyword arguments.
<tt style='background-color:#E8E8E8;'> ext.OrderingList <a href=' /ext/orderinglist.py#L217'>__init__</a>(ordering_attr,ordering_func,reorder_on_append)</tt>	A custom list that manages position information for its children.
<tt style='background-color:#E8E8E8;'> ext.OrderingList <a href=' /ext/orderinglist.py#L282'>reorder</a>()</tt>	Synchronize ordering for the entire collection.
<tt style='background-color:#E8E8E8;'> ext.OrderingList <a href=' /ext/orderinglist.py#L310'>_raw_append</a>(entity)</tt>	Append without any ordering behavior.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/orderinglist.py#L370'>_reconstitute</a>(cls,dict_,items)</tt>	Reconstitute an :class orderinglist.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/automap.py#L523'>classname_for_table</a>(base,tablename,table)</tt>	Return the class name that should be used given the name of a table.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/automap.py#L555'>name_for_scalar_relationship</a>(base,local_cls,referred_cls,constraint)</tt>	Return the attribute name that should be used to refer from one class to another for a scalar object reference.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/automap.py#L580'>name_for_collection_relationship</a>(base,local_cls,referred_cls,constraint)</tt>	Return the attribute name that should be used to refer from one class to another for a collection reference.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/automap.py#L607'>generate_relationship</a>(base,direction,return_fn,attrname)</tt>	Generate a :func relationship or :func backref on behalf of two.
<tt style='background-color:#E8E8E8;'> ext.AutomapBase <a href=' /ext/automap.py#L693'>prepare</a>(cls,engine,reflect,schema)</tt>	Extract mapped classes and relationships from the :class metadata and.
<tt style='background-color:#E8E8E8;'> ext. <a href=' /ext/automap.py#L822'>automap_base</a>(declarative_base)</tt>	Produce a declarative automap base.
<tt style='background-color:#E8E8E8;'> ext.index_property <a href=' /ext/indexable.py#L253'>__init__</a>(attr_name,index,default,datatype)</tt>	Create a new :class index_property.
<tt style='background-color:#E8E8E8;'> ext.declarative. <a href=' /ext/declarative/base.py#L53'>_get_immediate_cls_attr</a>(cls,attrname,strict)</tt>	Return an attribute of the class that is either present directly on the class e.
<tt style='background-color:#E8E8E8;'> ext.declarative. <a href=' /ext/declarative/base.py#L600'>_add_attribute</a>(cls,key,value)</tt>	Add an attribute to an existing declarative class.
<tt style='background-color:#E8E8E8;'> ext.declarative. <a href=' /ext/declarative/base.py#L638'>_declarative_constructor</a>()</tt>	A simple constructor that allows initialization from kwargs.
<tt style='background-color:#E8E8E8;'> ext.declarative. <a href=' /ext/declarative/api.py#L27'>instrument_declarative</a>(cls,registry,metadata)</tt>	Given a class configure the class declaratively using the given registry which can be any dictionary and.
<tt style='background-color:#E8E8E8;'> ext.declarative. <a href=' /ext/declarative/api.py#L42'>has_inherited_table</a>(cls)</tt>	Given a class return true if any of the classes it inherits from has a mapped table otherwise return false.
<tt style='background-color:#E8E8E8;'> ext.declarative. <a href=' /ext/declarative/api.py#L71'>synonym_for</a>(name,map_column)</tt>	Decorator make a python @property a query synonym for a column.
<tt style='background-color:#E8E8E8;'> ext.declarative. <a href=' /ext/declarative/api.py#L94'>comparable_using</a>(comparator_factory)</tt>	Decorator allow a python @property to be used in query criteria.
<tt style='background-color:#E8E8E8;'> ext.declarative.declared_attr <a href=' /ext/declarative/api.py#L194'>cascading</a>(cls)</tt>	Mark a :class declared_attr as cascading.
<tt style='background-color:#E8E8E8;'> ext.declarative. <a href=' /ext/declarative/api.py#L249'>declarative_base</a>(bind,metadata,mapper,cls)</tt>	Construct a base class for declarative class definitions.
<tt style='background-color:#E8E8E8;'> ext.declarative. <a href=' /ext/declarative/api.py#L337'>as_declarative</a>()</tt>	Class decorator for :func declarative_base.
<tt style='background-color:#E8E8E8;'> ext.declarative.DeferredReflection <a href=' /ext/declarative/api.py#L650'>prepare</a>(cls,engine)</tt>	Reflect all :class table objects for all current.
<tt style='background-color:#E8E8E8;'> ext.declarative. <a href=' /ext/declarative/clsregistry.py#L29'>add_class</a>(classname,cls)</tt>	Add a class to the _decl_class_registry associated with the given declarative class.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/functions.py#L26'>register_function</a>(identifier,fn,package)</tt>	Associate a callable with a particular func name.
<tt style='background-color:#E8E8E8;'> sql.FunctionElement <a href=' /sql/functions.py#L56'>__init__</a>()</tt>	Construct a :class functionelement.
<tt style='background-color:#E8E8E8;'> sql.FunctionElement <a href=' /sql/functions.py#L68'>columns</a>()</tt>	The set of columns exported by this :class functionelement.
<tt style='background-color:#E8E8E8;'> sql.FunctionElement <a href=' /sql/functions.py#L89'>clauses</a>()</tt>	Return the underlying :class clauselist which contains.
<tt style='background-color:#E8E8E8;'> sql.FunctionElement <a href=' /sql/functions.py#L97'>over</a>(partition_by,order_by,rows,range_)</tt>	Produce an over clause against this function.
<tt style='background-color:#E8E8E8;'> sql.FunctionElement <a href=' /sql/functions.py#L125'>within_group</a>()</tt>	Produce a within group order by expr clause against this function.
<tt style='background-color:#E8E8E8;'> sql.FunctionElement <a href=' /sql/functions.py#L140'>filter</a>()</tt>	Produce a filter clause against this function.
<tt style='background-color:#E8E8E8;'> sql.FunctionElement <a href=' /sql/functions.py#L181'>within_group_type</a>(within_group)</tt>	For types that define their return type as based on the criteria within a within group order by expression called by the.
<tt style='background-color:#E8E8E8;'> sql.FunctionElement <a href=' /sql/functions.py#L193'>alias</a>(name,flat)</tt>	Produce a :class alias construct against this.
<tt style='background-color:#E8E8E8;'> sql.FunctionElement <a href=' /sql/functions.py#L225'>select</a>()</tt>	Produce a :func ~ expression select construct.
<tt style='background-color:#E8E8E8;'> sql.FunctionElement <a href=' /sql/functions.py#L239'>scalar</a>()</tt>	Execute this :class functionelement against an embedded.
<tt style='background-color:#E8E8E8;'> sql.FunctionElement <a href=' /sql/functions.py#L253'>execute</a>()</tt>	Execute this :class functionelement against an embedded.
<tt style='background-color:#E8E8E8;'> sql.Function <a href=' /sql/functions.py#L422'>__init__</a>(name)</tt>	Construct a :class function.
<tt style='background-color:#E8E8E8;'> sql.SchemaItem <a href=' /sql/schema.py#L74'>_init_items</a>()</tt>	Initialize the list of child items for this schemaitem.
<tt style='background-color:#E8E8E8;'> sql.SchemaItem <a href=' /sql/schema.py#L81'>get_children</a>()</tt>	Used to allow schemavisitor access.
<tt style='background-color:#E8E8E8;'> sql.SchemaItem <a href=' /sql/schema.py#L88'>quote</a>()</tt>	Return the value of the quote flag passed to this schema object for those schema items which.
<tt style='background-color:#E8E8E8;'> sql.SchemaItem <a href=' /sql/schema.py#L99'>info</a>()</tt>	Info dictionary associated with the object allowing user-defined data to be associated with this :class.
<tt style='background-color:#E8E8E8;'> sql.Table <a href=' /sql/schema.py#L447'>quote_schema</a>()</tt>	Return the value of the quote_schema flag passed to this :class.
<tt style='background-color:#E8E8E8;'> sql.Table <a href=' /sql/schema.py#L456'>__init__</a>()</tt>	Constructor for :class ~ schema table.
<tt style='background-color:#E8E8E8;'> sql.Table <a href=' /sql/schema.py#L551'>_sorted_constraints</a>()</tt>	Return the set of constraints as a list sorted by creation order.
<tt style='background-color:#E8E8E8;'> sql.Table <a href=' /sql/schema.py#L559'>foreign_key_constraints</a>()</tt>	:class foreignkeyconstraint objects referred to by this.
<tt style='background-color:#E8E8E8;'> sql.Table <a href=' /sql/schema.py#L629'>key</a>()</tt>	Return the 'key' for this :class table.
<tt style='background-color:#E8E8E8;'> sql.Table <a href=' /sql/schema.py#L651'>bind</a>()</tt>	Return the connectable associated with this table.
<tt style='background-color:#E8E8E8;'> sql.Table <a href=' /sql/schema.py#L657'>add_is_dependent_on</a>(table)</tt>	Add a 'dependency' for this table.
<tt style='background-color:#E8E8E8;'> sql.Table <a href=' /sql/schema.py#L671'>append_column</a>(column)</tt>	Append a :class ~ schema column to this :class ~ schema table.
<tt style='background-color:#E8E8E8;'> sql.Table <a href=' /sql/schema.py#L693'>append_constraint</a>(constraint)</tt>	Append a :class ~ schema constraint to this.
<tt style='background-color:#E8E8E8;'> sql.Table <a href=' /sql/schema.py#L714'>append_ddl_listener</a>(event_name,listener)</tt>	Append a ddl event listener to this table.
<tt style='background-color:#E8E8E8;'> sql.Table <a href=' /sql/schema.py#L742'>exists</a>(bind)</tt>	Return true if this table exists.
<tt style='background-color:#E8E8E8;'> sql.Table <a href=' /sql/schema.py#L751'>create</a>(bind,checkfirst)</tt>	Issue a create statement for this :class.
<tt style='background-color:#E8E8E8;'> sql.Table <a href=' /sql/schema.py#L768'>drop</a>(bind,checkfirst)</tt>	Issue a drop statement for this :class.
<tt style='background-color:#E8E8E8;'> sql.Table <a href=' /sql/schema.py#L784'>tometadata</a>(metadata,schema,referred_schema_fn,name)</tt>	Return a copy of this :class table associated with a different.
<tt style='background-color:#E8E8E8;'> sql.Column <a href=' /sql/schema.py#L908'>__init__</a>()</tt>	Construct a new column object.
<tt style='background-color:#E8E8E8;'> sql.Column <a href=' /sql/schema.py#L1293'>references</a>(column)</tt>	Return true if this column references the given column via foreign key.
<tt style='background-color:#E8E8E8;'> sql.Column <a href=' /sql/schema.py#L1403'>copy</a>()</tt>	Create a copy of this column, unitialized.
<tt style='background-color:#E8E8E8;'> sql.Column <a href=' /sql/schema.py#L1439'>_make_proxy</a>(selectable,name,key,name_is_truncatable)</tt>	Create a *proxy* for this column.
<tt style='background-color:#E8E8E8;'> sql.ForeignKey <a href=' /sql/schema.py#L1532'>__init__</a>(column,_constraint,use_alter,name)</tt>	Construct a column-level foreign key.
<tt style='background-color:#E8E8E8;'> sql.ForeignKey <a href=' /sql/schema.py#L1651'>copy</a>(schema)</tt>	Produce a copy of this :class foreignkey object.
<tt style='background-color:#E8E8E8;'> sql.ForeignKey <a href=' /sql/schema.py#L1681'>_get_colspec</a>(schema,table_name)</tt>	Return a string based 'column specification' for this :class.
<tt style='background-color:#E8E8E8;'> sql.ForeignKey <a href=' /sql/schema.py#L1722'>references</a>(table)</tt>	Return true if the given :class table is referenced by this.
<tt style='background-color:#E8E8E8;'> sql.ForeignKey <a href=' /sql/schema.py#L1728'>get_referent</a>(table)</tt>	Return the :class column in the given :class table.
<tt style='background-color:#E8E8E8;'> sql.ForeignKey <a href=' /sql/schema.py#L1739'>_column_tokens</a>()</tt>	Parse a string-based _colspec into its component parts.
<tt style='background-color:#E8E8E8;'> sql.ForeignKey <a href=' /sql/schema.py#L1852'>column</a>()</tt>	Return the target :class column referenced by this.
<tt style='background-color:#E8E8E8;'> sql.DefaultGenerator <a href=' /sql/schema.py#L1991'>bind</a>()</tt>	Return the connectable associated with this default.
<tt style='background-color:#E8E8E8;'> sql.ColumnDefault <a href=' /sql/schema.py#L2022'>__init__</a>(arg)</tt>	"construct a new :class columndefault.
<tt style='background-color:#E8E8E8;'> sql.ColumnDefault <a href=' /sql/schema.py#L2078'>_maybe_wrap_callable</a>(fn)</tt>	Wrap callables that don't accept a context.
<tt style='background-color:#E8E8E8;'> sql.Sequence <a href=' /sql/schema.py#L2148'>__init__</a>(name,start,increment,minvalue)</tt>	Construct a :class sequence object.
<tt style='background-color:#E8E8E8;'> sql.Sequence <a href=' /sql/schema.py#L2285'>next_value</a>(func)</tt>	Return a :class next_value function element.
<tt style='background-color:#E8E8E8;'> sql.Sequence <a href=' /sql/schema.py#L2312'>create</a>(bind,checkfirst)</tt>	Creates this sequence in the database.
<tt style='background-color:#E8E8E8;'> sql.Sequence <a href=' /sql/schema.py#L2321'>drop</a>(bind,checkfirst)</tt>	Drops this sequence from the database.
<tt style='background-color:#E8E8E8;'> sql.Constraint <a href=' /sql/schema.py#L2448'>__init__</a>(name,deferrable,initially,_create_rule)</tt>	Create a sql constraint.
<tt style='background-color:#E8E8E8;'> sql.ColumnCollectionConstraint <a href=' /sql/schema.py#L2637'>__init__</a>()</tt>	:param \*columns a sequence of column names or column objects.
<tt style='background-color:#E8E8E8;'> sql.ColumnCollectionConstraint <a href=' /sql/schema.py#L2679'>contains_column</a>(col)</tt>	Return true if this constraint contains the given column.
<tt style='background-color:#E8E8E8;'> sql.CheckConstraint <a href=' /sql/schema.py#L2708'>__init__</a>(sqltext,name,deferrable,initially)</tt>	Construct a check constraint.
<tt style='background-color:#E8E8E8;'> sql.ForeignKeyConstraint <a href=' /sql/schema.py#L2795'>__init__</a>(columns,refcolumns,name,onupdate)</tt>	Construct a composite-capable foreign key.
<tt style='background-color:#E8E8E8;'> sql.ForeignKeyConstraint <a href=' /sql/schema.py#L2938'>referred_table</a>()</tt>	The :class table object to which this.
<tt style='background-color:#E8E8E8;'> sql.ForeignKeyConstraint <a href=' /sql/schema.py#L2966'>column_keys</a>()</tt>	Return a list of string keys representing the local columns in this :class.
<tt style='background-color:#E8E8E8;'> sql.PrimaryKeyConstraint <a href=' /sql/schema.py#L3145'>_reload</a>(columns)</tt>	Repopulate this :class primarykeyconstraint given.
<tt style='background-color:#E8E8E8;'> sql.Index <a href=' /sql/schema.py#L3333'>__init__</a>(name)</tt>	Construct an index object.
<tt style='background-color:#E8E8E8;'> sql.Index <a href=' /sql/schema.py#L3408'>bind</a>()</tt>	Return the connectable associated with this index.
<tt style='background-color:#E8E8E8;'> sql.Index <a href=' /sql/schema.py#L3414'>create</a>(bind)</tt>	Issue a create statement for this :class.
<tt style='background-color:#E8E8E8;'> sql.Index <a href=' /sql/schema.py#L3429'>drop</a>(bind)</tt>	Issue a drop statement for this :class.
<tt style='background-color:#E8E8E8;'> sql.MetaData <a href=' /sql/schema.py#L3482'>__init__</a>(bind,reflect,schema,quote_schema)</tt>	Create a new metadata object.
<tt style='background-color:#E8E8E8;'> sql.MetaData <a href=' /sql/schema.py#L3673'>is_bound</a>()</tt>	True if this metadata is bound to an engine or connection.
<tt style='background-color:#E8E8E8;'> sql.MetaData <a href=' /sql/schema.py#L3678'>bind</a>()</tt>	An :class engine or :class connection to which this.
<tt style='background-color:#E8E8E8;'> sql.MetaData <a href=' /sql/schema.py#L3697'>_bind_to</a>(url,bind)</tt>	Bind this metadata to an engine connection string or url.
<tt style='background-color:#E8E8E8;'> sql.MetaData <a href=' /sql/schema.py#L3707'>clear</a>()</tt>	Clear all table objects from this metadata.
<tt style='background-color:#E8E8E8;'> sql.MetaData <a href=' /sql/schema.py#L3714'>remove</a>(table)</tt>	Remove the given table object from this metadata.
<tt style='background-color:#E8E8E8;'> sql.MetaData <a href=' /sql/schema.py#L3719'>sorted_tables</a>()</tt>	Returns a list of :class table objects sorted in order of.
<tt style='background-color:#E8E8E8;'> sql.MetaData <a href=' /sql/schema.py#L3756'>reflect</a>(bind,schema,views,only)</tt>	Load all available table definitions from the database.
<tt style='background-color:#E8E8E8;'> sql.MetaData <a href=' /sql/schema.py#L3875'>append_ddl_listener</a>(event_name,listener)</tt>	Append a ddl event listener to this metadata.
<tt style='background-color:#E8E8E8;'> sql.MetaData <a href=' /sql/schema.py#L3888'>create_all</a>(bind,tables,checkfirst)</tt>	Create all tables stored in this metadata.
<tt style='background-color:#E8E8E8;'> sql.MetaData <a href=' /sql/schema.py#L3915'>drop_all</a>(bind,tables,checkfirst)</tt>	Drop all tables stored in this metadata.
<tt style='background-color:#E8E8E8;'> sql.ThreadLocalMetaData <a href=' /sql/schema.py#L3959'>__init__</a>()</tt>	Construct a threadlocalmetadata.
<tt style='background-color:#E8E8E8;'> sql.ThreadLocalMetaData <a href=' /sql/schema.py#L3966'>bind</a>()</tt>	The bound engine or connection for this thread.
<tt style='background-color:#E8E8E8;'> sql.ThreadLocalMetaData <a href=' /sql/schema.py#L3975'>_bind_to</a>(url,bind)</tt>	Bind to a connectable in the caller's thread.
<tt style='background-color:#E8E8E8;'> sql.ThreadLocalMetaData <a href=' /sql/schema.py#L3995'>is_bound</a>()</tt>	True if there is a bind for this thread.
<tt style='background-color:#E8E8E8;'> sql.ThreadLocalMetaData <a href=' /sql/schema.py#L4000'>dispose</a>()</tt>	Dispose all bound engines in all thread contexts.
<tt style='background-color:#E8E8E8;'> sql.String <a href=' /sql/sqltypes.py#L126'>__init__</a>(length,collation,convert_unicode,unicode_error)</tt>	Create a string-holding type.
<tt style='background-color:#E8E8E8;'> sql.Unicode <a href=' /sql/sqltypes.py#L344'>__init__</a>(length)</tt>	Create a :class unicode object.
<tt style='background-color:#E8E8E8;'> sql.UnicodeText <a href=' /sql/sqltypes.py#L373'>__init__</a>(length)</tt>	Create a unicode-converting text type.
<tt style='background-color:#E8E8E8;'> sql.Numeric <a href=' /sql/sqltypes.py#L503'>__init__</a>(precision,scale,decimal_return_scale,asdecimal)</tt>	Construct a numeric.
<tt style='background-color:#E8E8E8;'> sql.Float <a href=' /sql/sqltypes.py#L661'>__init__</a>(precision,asdecimal,decimal_return_scale)</tt>	Construct a float.
<tt style='background-color:#E8E8E8;'> sql.DateTime <a href=' /sql/sqltypes.py#L749'>__init__</a>(timezone)</tt>	Construct a new :class datetime.
<tt style='background-color:#E8E8E8;'> sql._Binary <a href=' /sql/sqltypes.py#L908'>coerce_compared_value</a>(op,value)</tt>	See :meth typeengine coerce_compared_value for a description.
<tt style='background-color:#E8E8E8;'> sql.LargeBinary <a href=' /sql/sqltypes.py#L932'>__init__</a>(length)</tt>	Construct a largebinary type.
<tt style='background-color:#E8E8E8;'> sql.SchemaType <a href=' /sql/sqltypes.py#L1074'>create</a>(bind,checkfirst)</tt>	Issue create ddl for this type if applicable.
<tt style='background-color:#E8E8E8;'> sql.SchemaType <a href=' /sql/sqltypes.py#L1083'>drop</a>(bind,checkfirst)</tt>	Issue drop ddl for this type if applicable.
<tt style='background-color:#E8E8E8;'> sql.Enum <a href=' /sql/sqltypes.py#L1208'>__init__</a>()</tt>	Construct an enum.
<tt style='background-color:#E8E8E8;'> sql.PickleType <a href=' /sql/sqltypes.py#L1490'>__init__</a>(protocol,pickler,comparator)</tt>	Construct a pickletype.
<tt style='background-color:#E8E8E8;'> sql.Boolean <a href=' /sql/sqltypes.py#L1566'>__init__</a>(create_constraint,name,_create_events)</tt>	Construct a boolean.
<tt style='background-color:#E8E8E8;'> sql.Interval <a href=' /sql/sqltypes.py#L1651'>__init__</a>(native,second_precision,day_precision)</tt>	Construct an interval object.
<tt style='background-color:#E8E8E8;'> sql.Interval <a href=' /sql/sqltypes.py#L1747'>coerce_compared_value</a>(op,value)</tt>	See :meth typeengine coerce_compared_value for a description.
<tt style='background-color:#E8E8E8;'> sql.JSON <a href=' /sql/sqltypes.py#L1916'>__init__</a>(none_as_null)</tt>	Construct a :class types json type.
<tt style='background-color:#E8E8E8;'> sql.ARRAY <a href=' /sql/sqltypes.py#L2279'>__init__</a>(item_type,as_tuple,dimensions,zero_indexes)</tt>	Construct an :class types array.
<tt style='background-color:#E8E8E8;'> sql.TIMESTAMP <a href=' /sql/sqltypes.py#L2409'>__init__</a>(timezone)</tt>	Construct a new :class timestamp.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/util.py#L34'>find_join_source</a>(clauses,join_to)</tt>	Given a list of from clauses and a selectable return the first index and element from the list of.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/util.py#L60'>visit_binary_product</a>(fn,expr)</tt>	Produce a traversal of the given expression delivering column comparisons to the given function.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/util.py#L120'>find_tables</a>(clause,check_columns,include_aliases,include_joins)</tt>	Locate table objects within the given expression.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/util.py#L152'>unwrap_order_by</a>(clause)</tt>	Break up an 'order by' expression into individual column-expressions.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/util.py#L189'>expand_column_list_from_order_by</a>(collist,order_by)</tt>	Given the columns clause and order by of a selectable return a list of column expressions that can be added to the collist.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/util.py#L211'>clause_is_present</a>(clause,search)</tt>	Given a target clause and a second to search within return true if the target is plainly present in the search without any.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/util.py#L238'>surface_column_elements</a>(clause)</tt>	Traverse and yield only outer-exposed column elements such as would be addressable in the where clause of a select if this element were.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/util.py#L253'>selectables_overlap</a>(left,right)</tt>	Return true if left/right have some overlapping selectable.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/util.py#L263'>bind_values</a>(clause)</tt>	Return an ordered list of "bound" values in the given clause.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/util.py#L416'>adapt_criterion_to_null</a>(crit,nulls)</tt>	Given criterion containing bind params convert selected elements to is null.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/util.py#L464'>reduce_columns</a>(columns)</tt>	Given a list of columns return a 'reduced' set based on natural equivalents.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/util.py#L536'>criterion_as_pairs</a>(expression,consider_as_foreign_keys,consider_as_referenced_keys,any_operator)</tt>	Traverse an expression and locate binary criterion pairs.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/annotation.py#L116'>_deep_annotate</a>(element,annotations,exclude)</tt>	Deep copy the given clauseelement annotating each element with the given annotations dictionary.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/annotation.py#L140'>_deep_deannotate</a>(element,values)</tt>	Deep copy the given element removing annotations.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/annotation.py#L166'>_shallow_annotate</a>(element,annotations)</tt>	Annotate the given clauseelement and copy its internals so that internal objects refer to the new annotated object.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L157'>evaluates_none</a>()</tt>	Return a copy of this type which has the :attr should_evaluate_none.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L211'>compare_against_backend</a>(dialect,conn_type)</tt>	Compare this type against the given backend type.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L241'>literal_processor</a>(dialect)</tt>	Return a conversion function for processing literal values that are to be rendered directly without using binds.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L254'>bind_processor</a>(dialect)</tt>	Return a conversion function for processing bind values.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L268'>result_processor</a>(dialect,coltype)</tt>	Return a conversion function for processing result row values.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L284'>column_expression</a>(colexpr)</tt>	Given a select column expression return a wrapping sql expression.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L306'>_has_column_expression</a>()</tt>	Memoized boolean check if column_expression is implemented.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L318'>bind_expression</a>(bindvalue)</tt>	"given a bind value (i e a :class bindparameter instance),.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L344'>_has_bind_expression</a>()</tt>	Memoized boolean check if bind_expression is implemented.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L356'>compare_values</a>(x,y)</tt>	Compare two values for equality.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L361'>get_dbapi_type</a>(dbapi)</tt>	Return the corresponding type object from the underlying db-api if any.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L370'>python_type</a>()</tt>	Return the python type object expected to be returned by instances of this type if known.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L389'>with_variant</a>(type_,dialect_name)</tt>	Produce a new type object that will utilize the given type when applied to the dialect of the given name.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L419'>_type_affinity</a>()</tt>	Return a rudimental 'affinity' value expressing the general class of type.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L433'>dialect_impl</a>(dialect)</tt>	Return a dialect-specific implementation for this :class.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L443'>_cached_literal_processor</a>(dialect)</tt>	Return a dialect-specific literal processor for this type.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L452'>_cached_bind_processor</a>(dialect)</tt>	Return a dialect-specific bind processor for this type.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L462'>_cached_result_processor</a>(dialect,coltype)</tt>	Return a dialect-specific result processor for this type.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L475'>_dialect_info</a>(dialect)</tt>	Return a dialect-specific registry which caches a dialect-specific implementation bind processing.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L494'>adapt</a>(cls)</tt>	Produce an "adapted" form of this type given an "impl" class to work with.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L504'>coerce_compared_value</a>(op,value)</tt>	Suggest a type for a 'coerced' python value in an expression.
<tt style='background-color:#E8E8E8;'> sql.TypeEngine <a href=' /sql/type_api.py#L533'>compile</a>(dialect)</tt>	Produce a string-compiled form of this :class typeengine.
<tt style='background-color:#E8E8E8;'> sql.UserDefinedType <a href=' /sql/type_api.py#L641'>coerce_compared_value</a>(op,value)</tt>	Suggest a type for a 'coerced' python value in an expression.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L763'>__init__</a>()</tt>	Construct a :class typedecorator.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L876'>type_engine</a>(dialect)</tt>	Return a dialect-specific :class typeengine instance.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L896'>load_dialect_impl</a>(dialect)</tt>	Return a :class typeengine object corresponding to a dialect.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L910'>__getattr__</a>(key)</tt>	Proxy all other undefined accessors to the underlying implementation.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L915'>process_literal_param</a>(value,dialect)</tt>	Receive a literal parameter value to be rendered inline within a statement.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L931'>process_bind_param</a>(value,dialect)</tt>	Receive a bound parameter value to be converted.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L955'>process_result_value</a>(value,dialect)</tt>	Receive a result-row column value to be converted.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L982'>_has_bind_processor</a>()</tt>	Memoized boolean check if process_bind_param is implemented.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L995'>_has_literal_processor</a>()</tt>	Memoized boolean check if process_literal_param is implemented.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L1005'>literal_processor</a>(dialect)</tt>	Provide a literal processing function for the given :class.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L1050'>bind_processor</a>(dialect)</tt>	Provide a bound value processing function for the given :class.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L1084'>_has_result_processor</a>()</tt>	Memoized boolean check if process_result_value is implemented.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L1096'>result_processor</a>(dialect,coltype)</tt>	Provide a result value processing function for the given :class.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L1132'>coerce_compared_value</a>(op,value)</tt>	Suggest a type for a 'coerced' python value in an expression.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L1150'>copy</a>()</tt>	Produce a copy of this :class typedecorator instance.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L1164'>get_dbapi_type</a>(dbapi)</tt>	Return the dbapi type object represented by this :class.
<tt style='background-color:#E8E8E8;'> sql.TypeDecorator <a href=' /sql/type_api.py#L1173'>compare_values</a>(x,y)</tt>	Given two values compare them for equality.
<tt style='background-color:#E8E8E8;'> sql.Variant <a href=' /sql/type_api.py#L1205'>__init__</a>(base,mapping)</tt>	Construct a new :class variant.
<tt style='background-color:#E8E8E8;'> sql.Variant <a href=' /sql/type_api.py#L1247'>with_variant</a>(type_,dialect_name)</tt>	Return a new :class variant which adds the given.
<tt style='background-color:#E8E8E8;'> sql.Variant <a href=' /sql/type_api.py#L1268'>comparator_factory</a>()</tt>	Express comparison behavior in terms of the base type.
<tt style='background-color:#E8E8E8;'> sql.UpdateBase <a href=' /sql/dml.py#L69'>params</a>()</tt>	Set the parameters for the statement.
<tt style='background-color:#E8E8E8;'> sql.UpdateBase <a href=' /sql/dml.py#L82'>bind</a>()</tt>	Return a 'bind' linked to this :class updatebase.
<tt style='background-color:#E8E8E8;'> sql.UpdateBase <a href=' /sql/dml.py#L93'>returning</a>()</tt>	Add a :term returning or equivalent clause to this statement.
<tt style='background-color:#E8E8E8;'> sql.UpdateBase <a href=' /sql/dml.py#L148'>with_hint</a>(text,selectable,dialect_name)</tt>	Add a table hint for a single table to this insert/update/delete statement.
<tt style='background-color:#E8E8E8;'> sql.ValuesBase <a href=' /sql/dml.py#L207'>values</a>()</tt>	Specify a fixed values clause for an insert statement or the set clause for an update.
<tt style='background-color:#E8E8E8;'> sql.ValuesBase <a href=' /sql/dml.py#L379'>return_defaults</a>()</tt>	Make use of a :term returning clause for the purpose of fetching server-side expressions and defaults.
<tt style='background-color:#E8E8E8;'> sql.Insert <a href=' /sql/dml.py#L463'>__init__</a>(table,values,inline,bind)</tt>	Construct an :class insert object.
<tt style='background-color:#E8E8E8;'> sql.Insert <a href=' /sql/dml.py#L533'>from_select</a>(names,select,include_defaults)</tt>	Return a new :class insert construct which represents.
<tt style='background-color:#E8E8E8;'> sql.Update <a href=' /sql/dml.py#L608'>__init__</a>(table,whereclause,values,inline)</tt>	Construct an :class update object.
<tt style='background-color:#E8E8E8;'> sql.Update <a href=' /sql/dml.py#L757'>where</a>(whereclause)</tt>	Return a new update() construct with the given expression added to its where clause joined to the existing clause via and if any.
<tt style='background-color:#E8E8E8;'> sql.Delete <a href=' /sql/dml.py#L795'>__init__</a>(table,whereclause,bind,returning)</tt>	Construct :class delete object.
<tt style='background-color:#E8E8E8;'> sql.Delete <a href=' /sql/dml.py#L839'>where</a>(whereclause)</tt>	Add the given where clause to a newly returned delete construct.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/default_comparator.py#L188'>_inv_impl</a>(expr,op)</tt>	See :meth columnoperators __inv__.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/default_comparator.py#L196'>_neg_impl</a>(expr,op)</tt>	See :meth columnoperators __neg__.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/default_comparator.py#L201'>_match_impl</a>(expr,op,other)</tt>	See :meth columnoperators match.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/default_comparator.py#L215'>_distinct_impl</a>(expr,op)</tt>	See :meth columnoperators distinct.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/default_comparator.py#L221'>_between_impl</a>(expr,op,cleft,cright)</tt>	See :meth columnoperators between.
<tt style='background-color:#E8E8E8;'> sql.Operators <a href=' /sql/operators.py#L42'>__and__</a>(other)</tt>	Implement the & operator.
<tt style='background-color:#E8E8E8;'> sql.Operators <a href=' /sql/operators.py#L66'>__or__</a>(other)</tt>	Implement the | operator.
<tt style='background-color:#E8E8E8;'> sql.Operators <a href=' /sql/operators.py#L90'>__invert__</a>()</tt>	Implement the ~ operator.
<tt style='background-color:#E8E8E8;'> sql.Operators <a href=' /sql/operators.py#L107'>op</a>(opstring,precedence,is_comparison)</tt>	Produce a generic operator function.
<tt style='background-color:#E8E8E8;'> sql.Operators <a href=' /sql/operators.py#L161'>operate</a>(op)</tt>	Operate on an argument.
<tt style='background-color:#E8E8E8;'> sql.Operators <a href=' /sql/operators.py#L187'>reverse_operate</a>(op,other)</tt>	Reverse operate on an argument.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L279'>__lt__</a>(other)</tt>	Implement the < operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L287'>__le__</a>(other)</tt>	Implement the <= operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L297'>__eq__</a>(other)</tt>	Implement the == operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L306'>__ne__</a>(other)</tt>	Implement the != operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L315'>is_distinct_from</a>(other)</tt>	Implement the is distinct from operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L326'>isnot_distinct_from</a>(other)</tt>	Implement the is not distinct from operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L337'>__gt__</a>(other)</tt>	Implement the > operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L345'>__ge__</a>(other)</tt>	Implement the >= operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L353'>__neg__</a>()</tt>	Implement the - operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L364'>__getitem__</a>(index)</tt>	Implement the [] operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L373'>__lshift__</a>(other)</tt>	Implement the << operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L382'>__rshift__</a>(other)</tt>	Implement the >> operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L391'>concat</a>(other)</tt>	Implement the 'concat' operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L400'>like</a>(other,escape)</tt>	Implement the like operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L425'>ilike</a>(other,escape)</tt>	Implement the ilike operator e g case insensitive like.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L454'>in_</a>(other)</tt>	Implement the in operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L475'>notin_</a>(other)</tt>	Implement the not in operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L499'>notlike</a>(other,escape)</tt>	Implement the not like operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L514'>notilike</a>(other,escape)</tt>	Implement the not ilike operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L529'>is_</a>(other)</tt>	Implement the is operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L544'>isnot</a>(other)</tt>	Implement the is not operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L559'>startswith</a>(other)</tt>	Implement the startwith operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L592'>endswith</a>(other)</tt>	Implement the 'endswith' operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L625'>contains</a>(other)</tt>	Implement the 'contains' operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L658'>match</a>(other)</tt>	Implements a database-specific 'match' operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L676'>desc</a>()</tt>	Produce a :func ~ expression desc clause against the.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L681'>asc</a>()</tt>	Produce a :func ~ expression asc clause against the.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L686'>nullsfirst</a>()</tt>	Produce a :func ~ expression nullsfirst clause against the.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L691'>nullslast</a>()</tt>	Produce a :func ~ expression nullslast clause against the.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L696'>collate</a>(collation)</tt>	Produce a :func ~ expression collate clause against.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L707'>__radd__</a>(other)</tt>	Implement the + operator in reverse.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L715'>__rsub__</a>(other)</tt>	Implement the - operator in reverse.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L723'>__rmul__</a>(other)</tt>	Implement the * operator in reverse.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L731'>__rdiv__</a>(other)</tt>	Implement the / operator in reverse.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L739'>__rmod__</a>(other)</tt>	Implement the % operator in reverse.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L747'>between</a>(cleft,cright,symmetric)</tt>	Produce a :func ~ expression between clause against.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L754'>distinct</a>()</tt>	Produce a :func ~ expression distinct clause against the.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L761'>any_</a>()</tt>	Produce a :func ~ expression any_ clause against the.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L770'>all_</a>()</tt>	Produce a :func ~ expression all_ clause against the.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L779'>__add__</a>(other)</tt>	Implement the + operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L791'>__sub__</a>(other)</tt>	Implement the - operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L799'>__mul__</a>(other)</tt>	Implement the * operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L807'>__div__</a>(other)</tt>	Implement the / operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L815'>__mod__</a>(other)</tt>	Implement the % operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L823'>__truediv__</a>(other)</tt>	Implement the // operator.
<tt style='background-color:#E8E8E8;'> sql.ColumnOperators <a href=' /sql/operators.py#L831'>__rtruediv__</a>(other)</tt>	Implement the // operator in reverse.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/operators.py#L1054'>mirror</a>(op)</tt>	Rotate a comparison operator 180 degrees.
<tt style='background-color:#E8E8E8;'> sql.Compiled <a href=' /sql/compiler.py#L177'>__init__</a>(dialect,statement,bind,schema_translate_map)</tt>	Construct a new :class compiled object.
<tt style='background-color:#E8E8E8;'> sql.Compiled <a href=' /sql/compiler.py#L218'>compile</a>()</tt>	Produce the internal string representation of this element.
<tt style='background-color:#E8E8E8;'> sql.Compiled <a href=' /sql/compiler.py#L231'>sql_compiler</a>()</tt>	Return a compiled that is capable of processing sql expressions.
<tt style='background-color:#E8E8E8;'> sql.Compiled <a href=' /sql/compiler.py#L244'>__str__</a>()</tt>	Return the string text of the generated sql or ddl.
<tt style='background-color:#E8E8E8;'> sql.Compiled <a href=' /sql/compiler.py#L249'>construct_params</a>(params)</tt>	Return the bind params for this compiled object.
<tt style='background-color:#E8E8E8;'> sql.Compiled <a href=' /sql/compiler.py#L259'>params</a>()</tt>	Return the bind params for this compiled object.
<tt style='background-color:#E8E8E8;'> sql.Compiled <a href=' /sql/compiler.py#L264'>execute</a>()</tt>	Execute this compiled object.
<tt style='background-color:#E8E8E8;'> sql.Compiled <a href=' /sql/compiler.py#L274'>scalar</a>()</tt>	Execute this compiled object and return the result's scalar value.
<tt style='background-color:#E8E8E8;'> sql.SQLCompiler <a href=' /sql/compiler.py#L390'>__init__</a>(dialect,statement,column_keys,inline)</tt>	Construct a new :class sqlcompiler object.
<tt style='background-color:#E8E8E8;'> sql.SQLCompiler <a href=' /sql/compiler.py#L464'>_init_cte_state</a>()</tt>	Initialize collections related to ctes only if a cte is located to save on the overhead of.
<tt style='background-color:#E8E8E8;'> sql.SQLCompiler <a href=' /sql/compiler.py#L478'>_nested_result</a>()</tt>	Special api to support the use case of 'nested result sets'.
<tt style='background-color:#E8E8E8;'> sql.SQLCompiler <a href=' /sql/compiler.py#L523'>construct_params</a>(params,_group_number,_check)</tt>	Return a dictionary of bind parameter keys and values.
<tt style='background-color:#E8E8E8;'> sql.SQLCompiler <a href=' /sql/compiler.py#L571'>params</a>()</tt>	Return the bind param dictionary embedded into this compiled object for those values that are present.
<tt style='background-color:#E8E8E8;'> sql.SQLCompiler <a href=' /sql/compiler.py#L577'>_create_result_map</a>(result)</tt>	Utility method used for unit tests only.
<tt style='background-color:#E8E8E8;'> sql.SQLCompiler <a href=' /sql/compiler.py#L582'>default_from</a>()</tt>	Called when a select statement has no froms and no from clause is to be appended.
<tt style='background-color:#E8E8E8;'> sql.SQLCompiler <a href=' /sql/compiler.py#L1264'>render_literal_value</a>(value,type_)</tt>	Render the value of a bind parameter as a quoted literal.
<tt style='background-color:#E8E8E8;'> sql.SQLCompiler <a href=' /sql/compiler.py#L1466'>_label_select_column</a>(select,column,populate_result_map,asfrom)</tt>	Produce labeled columns present in a select().
<tt style='background-color:#E8E8E8;'> sql.SQLCompiler <a href=' /sql/compiler.py#L1563'>_transform_select_for_nested_joins</a>(select)</tt>	Rewrite any "a join b join c " expression as "a join (select * from b join c) as anon", to support.
<tt style='background-color:#E8E8E8;'> sql.SQLCompiler <a href=' /sql/compiler.py#L1933'>get_select_precolumns</a>(select)</tt>	Called when building a select statement position is just before column list.
<tt style='background-color:#E8E8E8;'> sql.SQLCompiler <a href=' /sql/compiler.py#L2112'>update_limit_clause</a>(update_stmt)</tt>	Provide a hook for mysql to add limit to the update.
<tt style='background-color:#E8E8E8;'> sql.SQLCompiler <a href=' /sql/compiler.py#L2116'>update_tables_clause</a>(update_stmt,from_table,extra_froms)</tt>	Provide a hook to override the initial table clause in an update statement.
<tt style='background-color:#E8E8E8;'> sql.SQLCompiler <a href=' /sql/compiler.py#L2127'>update_from_clause</a>(update_stmt,from_table,extra_froms,from_hints)</tt>	Provide a hook to override the generation of an update.
<tt style='background-color:#E8E8E8;'> sql.DDLCompiler <a href=' /sql/compiler.py#L2678'>define_constraint_remote_table</a>(constraint,table,preparer)</tt>	Format the remote table clause of a create constraint clause.
<tt style='background-color:#E8E8E8;'> sql.IdentifierPreparer <a href=' /sql/compiler.py#L2898'>__init__</a>(dialect,initial_quote,final_quote,escape_quote)</tt>	Construct a new identifierpreparer object.
<tt style='background-color:#E8E8E8;'> sql.IdentifierPreparer <a href=' /sql/compiler.py#L2929'>_escape_identifier</a>(value)</tt>	Escape an identifier.
<tt style='background-color:#E8E8E8;'> sql.IdentifierPreparer <a href=' /sql/compiler.py#L2941'>_unescape_identifier</a>(value)</tt>	Canonicalize an escaped identifier.
<tt style='background-color:#E8E8E8;'> sql.IdentifierPreparer <a href=' /sql/compiler.py#L2950'>quote_identifier</a>(value)</tt>	Quote an identifier.
<tt style='background-color:#E8E8E8;'> sql.IdentifierPreparer <a href=' /sql/compiler.py#L2961'>_requires_quotes</a>(value)</tt>	Return true if the given identifier requires quoting.
<tt style='background-color:#E8E8E8;'> sql.IdentifierPreparer <a href=' /sql/compiler.py#L2969'>quote_schema</a>(schema,force)</tt>	Conditionally quote a schema.
<tt style='background-color:#E8E8E8;'> sql.IdentifierPreparer <a href=' /sql/compiler.py#L2980'>quote</a>(ident,force)</tt>	Conditionally quote an identifier.
<tt style='background-color:#E8E8E8;'> sql.IdentifierPreparer <a href=' /sql/compiler.py#L3038'>format_table</a>(table,use_schema,name)</tt>	Prepare a quoted table and schema name.
<tt style='background-color:#E8E8E8;'> sql.IdentifierPreparer <a href=' /sql/compiler.py#L3052'>format_schema</a>(name,quote)</tt>	Prepare a quoted schema name.
<tt style='background-color:#E8E8E8;'> sql.IdentifierPreparer <a href=' /sql/compiler.py#L3057'>format_column</a>(column,use_table,name,table_name)</tt>	Prepare a quoted column name.
<tt style='background-color:#E8E8E8;'> sql.IdentifierPreparer <a href=' /sql/compiler.py#L3081'>format_table_seq</a>(table,use_schema)</tt>	Format table name and schema as a tuple.
<tt style='background-color:#E8E8E8;'> sql.IdentifierPreparer <a href=' /sql/compiler.py#L3112'>unformat_identifiers</a>(identifiers)</tt>	Unpack 'schema table column'-like strings into components.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/visitors.py#L63'>_generate_dispatch</a>(cls)</tt>	Return an optimized visit dispatch function for the cls for use by the compiler.
<tt style='background-color:#E8E8E8;'> sql.ClauseVisitor <a href=' /sql/visitors.py#L123'>iterate</a>(obj)</tt>	Traverse the given expression structure returning an iterator of all elements.
<tt style='background-color:#E8E8E8;'> sql.ClauseVisitor <a href=' /sql/visitors.py#L130'>traverse</a>(obj)</tt>	Traverse and visit the given expression structure.
<tt style='background-color:#E8E8E8;'> sql.ClauseVisitor <a href=' /sql/visitors.py#L144'>_visitor_iterator</a>()</tt>	Iterate through this visitor and each 'chained' visitor.
<tt style='background-color:#E8E8E8;'> sql.ClauseVisitor <a href=' /sql/visitors.py#L153'>chain</a>(visitor)</tt>	'chain' an additional clausevisitor onto this clausevisitor.
<tt style='background-color:#E8E8E8;'> sql.CloningVisitor <a href=' /sql/visitors.py#L170'>copy_and_process</a>(list_)</tt>	Apply cloned traversal to the given list of elements and return the new list.
<tt style='background-color:#E8E8E8;'> sql.CloningVisitor <a href=' /sql/visitors.py#L177'>traverse</a>(obj)</tt>	Traverse and visit the given expression structure.
<tt style='background-color:#E8E8E8;'> sql.ReplacingCloningVisitor <a href=' /sql/visitors.py#L190'>replace</a>(elem)</tt>	Receive pre-copied elements during a cloning traversal.
<tt style='background-color:#E8E8E8;'> sql.ReplacingCloningVisitor <a href=' /sql/visitors.py#L199'>traverse</a>(obj)</tt>	Traverse and visit the given expression structure.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/visitors.py#L210'>iterate</a>(obj,opts)</tt>	Traverse the given expression structure returning an iterator.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/visitors.py#L231'>iterate_depthfirst</a>(obj,opts)</tt>	Traverse the given expression structure returning an iterator.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/visitors.py#L252'>traverse_using</a>(iterator,obj,visitors)</tt>	Visit the given expression structure using the given iterator of objects.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/visitors.py#L264'>traverse</a>(obj,opts,visitors)</tt>	Traverse and visit the given expression structure using the default iterator.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/visitors.py#L272'>traverse_depthfirst</a>(obj,opts,visitors)</tt>	Traverse and visit the given expression structure using the depth-first iterator.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/visitors.py#L280'>cloned_traverse</a>(obj,opts,visitors)</tt>	Clone the given expression structure allowing modifications by visitors.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/visitors.py#L304'>replacement_traverse</a>(obj,opts,replace)</tt>	Clone the given expression structure allowing element replacement by a given replacement function.
<tt style='background-color:#E8E8E8;'> sql._DDLCompiles <a href=' /sql/ddl.py#L22'>_compiler</a>(dialect)</tt>	Return a compiler appropriate for this clauseelement given a dialect.
<tt style='background-color:#E8E8E8;'> sql.DDLElement <a href=' /sql/ddl.py#L70'>execute</a>(bind,target)</tt>	Execute this ddl immediately.
<tt style='background-color:#E8E8E8;'> sql.DDLElement <a href=' /sql/ddl.py#L101'>execute_at</a>(event_name,target)</tt>	Link execution of this ddl to the ddl lifecycle of a schemaitem.
<tt style='background-color:#E8E8E8;'> sql.DDLElement <a href=' /sql/ddl.py#L138'>against</a>(target)</tt>	Return a copy of this ddl against a specific schema item.
<tt style='background-color:#E8E8E8;'> sql.DDLElement <a href=' /sql/ddl.py#L144'>execute_if</a>(dialect,callable_,state)</tt>	Return a callable that will execute this ddlelement conditionally.
<tt style='background-color:#E8E8E8;'> sql.DDLElement <a href=' /sql/ddl.py#L241'>__call__</a>(target,bind)</tt>	Execute the ddl as a ddl_listener.
<tt style='background-color:#E8E8E8;'> sql.DDL <a href=' /sql/ddl.py#L307'>__init__</a>(statement,on,context,bind)</tt>	Create a ddl statement.
<tt style='background-color:#E8E8E8;'> sql._CreateDropBase <a href=' /sql/ddl.py#L413'>_create_rule_disable</a>(compiler)</tt>	Allow disable of _create_rule using a callable.
<tt style='background-color:#E8E8E8;'> sql.CreateSchema <a href=' /sql/ddl.py#L435'>__init__</a>(name,quote)</tt>	Create a new :class createschema construct.
<tt style='background-color:#E8E8E8;'> sql.DropSchema <a href=' /sql/ddl.py#L453'>__init__</a>(name,quote,cascade)</tt>	Create a new :class dropschema construct.
<tt style='background-color:#E8E8E8;'> sql.CreateTable <a href=' /sql/ddl.py#L466'>__init__</a>(element,on,bind,include_foreign_key_constraints)</tt>	Create a :class createtable construct.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/ddl.py#L974'>sort_tables</a>(tables,skip_fn,extra_dependencies)</tt>	Sort a collection of :class table objects based on dependency.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/ddl.py#L1033'>sort_tables_and_constraints</a>(tables,filter_fn,extra_dependencies)</tt>	Sort a collection of :class table / :class foreignkeyconstraint.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/base.py#L40'>_generative</a>(fn)</tt>	Mark a method as generative.
<tt style='background-color:#E8E8E8;'> sql.DialectKWArgs <a href=' /sql/base.py#L147'>argument_for</a>(cls,dialect_name,argument_name,default)</tt>	Add a new kind of dialect-specific keyword argument for this class.
<tt style='background-color:#E8E8E8;'> sql.DialectKWArgs <a href=' /sql/base.py#L197'>dialect_kwargs</a>()</tt>	A collection of keyword arguments specified as dialect-specific options to this construct.
<tt style='background-color:#E8E8E8;'> sql.DialectKWArgs <a href=' /sql/base.py#L223'>kwargs</a>()</tt>	A synonym for :attr dialectkwargs dialect_kwargs.
<tt style='background-color:#E8E8E8;'> sql.DialectKWArgs <a href=' /sql/base.py#L248'>dialect_options</a>()</tt>	A collection of keyword arguments specified as dialect-specific options to this construct.
<tt style='background-color:#E8E8E8;'> sql.Executable <a href=' /sql/base.py#L333'>execution_options</a>()</tt>	Set non-sql options for the statement which take effect during execution.
<tt style='background-color:#E8E8E8;'> sql.Executable <a href=' /sql/base.py#L377'>execute</a>()</tt>	Compile and execute this :class executable.
<tt style='background-color:#E8E8E8;'> sql.Executable <a href=' /sql/base.py#L388'>scalar</a>()</tt>	Compile and execute this :class executable, returning the.
<tt style='background-color:#E8E8E8;'> sql.Executable <a href=' /sql/base.py#L395'>bind</a>()</tt>	Returns the :class engine or :class connection to.
<tt style='background-color:#E8E8E8;'> sql.SchemaEventTarget <a href=' /sql/base.py#L426'>_set_parent</a>(parent)</tt>	Associate with this schemaevent's parent object.
<tt style='background-color:#E8E8E8;'> sql.ColumnCollection <a href=' /sql/base.py#L461'>replace</a>(column)</tt>	Add the given column to this collection removing unaliased versions of this column as well as existing columns with the.
<tt style='background-color:#E8E8E8;'> sql.ColumnCollection <a href=' /sql/base.py#L494'>add</a>(column)</tt>	Add a column to this collection.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/selectable.py#L67'>_offset_or_limit_clause</a>(element,name,type_)</tt>	Convert the given value to an "offset or limit" clause.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/selectable.py#L85'>_offset_or_limit_clause_asint</a>(clause,attrname)</tt>	Convert the "offset or limit" clause of a select construct to an integer.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/selectable.py#L105'>subquery</a>(alias)</tt>	Return an :class alias object derived.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/selectable.py#L121'>alias</a>(selectable,name,flat)</tt>	Return an :class alias object.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/selectable.py#L164'>lateral</a>(selectable,name)</tt>	Return a :class lateral object.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/selectable.py#L186'>tablesample</a>(selectable,sampling,name,seed)</tt>	Return a :class tablesample object.
<tt style='background-color:#E8E8E8;'> sql.HasPrefixes <a href=' /sql/selectable.py#L245'>prefix_with</a>()</tt>	Add one or more expressions following the statement keyword i e.
<tt style='background-color:#E8E8E8;'> sql.HasSuffixes <a href=' /sql/selectable.py#L282'>suffix_with</a>()</tt>	Add one or more expressions following the statement as a whole.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L359'>count</a>(functions,whereclause)</tt>	Return a select count generated against this :class.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L398'>select</a>(whereclause)</tt>	Return a select of this :class fromclause.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L410'>join</a>(right,onclause,isouter,full)</tt>	Return a :class join from this :class fromclause.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L453'>outerjoin</a>(right,onclause,full)</tt>	Return a :class join from this :class fromclause.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L496'>alias</a>(name,flat)</tt>	Return an alias of this :class fromclause.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L510'>lateral</a>(name)</tt>	Return a lateral alias of this :class fromclause.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L525'>tablesample</a>(sampling,name,seed)</tt>	Return a tablesample alias of this :class fromclause.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L540'>is_derived_from</a>(fromclause)</tt>	Return true if this fromclause is 'derived' from the given fromclause.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L552'>_is_lexical_equivalent</a>(other)</tt>	Return true if this fromclause and the other represent the same lexical identity.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L562'>replace_selectable</a>(sqlutil,old,alias)</tt>	Replace all occurrences of fromclause 'old' with the given alias object returning a copy of this :class.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L571'>correspond_on_equivalents</a>(column,equivalents)</tt>	Return corresponding_column for the given column or if none search for a match in the given dictionary.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L584'>corresponding_column</a>(column,require_embedded)</tt>	Given a :class columnelement, return the exported.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L657'>description</a>()</tt>	A brief description of this fromclause.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L666'>_reset_exported</a>()</tt>	Delete memoized collections when a fromclause is cloned.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L671'>columns</a>()</tt>	A named-based collection of :class columnelement objects.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L689'>primary_key</a>()</tt>	Return the collection of column objects which comprise the primary key of this fromclause.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L698'>foreign_keys</a>()</tt>	Return the collection of foreignkey objects which this fromclause references.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L724'>_populate_column_collection</a>()</tt>	Called on subclasses to establish the c collection.
<tt style='background-color:#E8E8E8;'> sql.FromClause <a href=' /sql/selectable.py#L732'>_refresh_for_new_column</a>(column)</tt>	Given a column added to the c collection of an underlying.
<tt style='background-color:#E8E8E8;'> sql.Join <a href=' /sql/selectable.py#L785'>__init__</a>(left,right,onclause,isouter)</tt>	Construct a new :class join.
<tt style='background-color:#E8E8E8;'> sql.Join <a href=' /sql/selectable.py#L804'>_create_outerjoin</a>(cls,left,right,onclause)</tt>	Return an outer join clause element.
<tt style='background-color:#E8E8E8;'> sql.Join <a href=' /sql/selectable.py#L829'>_create_join</a>(cls,left,right,onclause)</tt>	Produce a :class join object given two :class fromclause.
<tt style='background-color:#E8E8E8;'> sql.Join <a href=' /sql/selectable.py#L933'>_join_condition</a>(cls,a,b,ignore_nonexistent_tables)</tt>	Create a join condition between two tables or selectables.
<tt style='background-color:#E8E8E8;'> sql.Join <a href=' /sql/selectable.py#L1060'>select</a>(whereclause)</tt>	Create a :class select from this :class join.
<tt style='background-color:#E8E8E8;'> sql.Join <a href=' /sql/selectable.py#L1086'>alias</a>(sqlutil,name,flat)</tt>	Return an alias of this :class join.
<tt style='background-color:#E8E8E8;'> sql.HasCTE <a href=' /sql/selectable.py#L1443'>cte</a>(name,recursive)</tt>	Return a new :class cte, or common table expression instance.
<tt style='background-color:#E8E8E8;'> sql.TableClause <a href=' /sql/selectable.py#L1696'>__init__</a>(name)</tt>	Produce a new :class tableclause.
<tt style='background-color:#E8E8E8;'> sql.TableClause <a href=' /sql/selectable.py#L1742'>insert</a>(dml,values,inline)</tt>	Generate an :func insert construct against this.
<tt style='background-color:#E8E8E8;'> sql.TableClause <a href=' /sql/selectable.py#L1757'>update</a>(dml,whereclause,values,inline)</tt>	Generate an :func update construct against this.
<tt style='background-color:#E8E8E8;'> sql.TableClause <a href=' /sql/selectable.py#L1774'>delete</a>(dml,whereclause)</tt>	Generate a :func delete construct against this.
<tt style='background-color:#E8E8E8;'> sql.ForUpdateArg <a href=' /sql/selectable.py#L1796'>parse_legacy_select</a>(arg)</tt>	Parse the for_update argument of :func select.
<tt style='background-color:#E8E8E8;'> sql.ForUpdateArg <a href=' /sql/selectable.py#L1848'>__init__</a>(nowait,read,of,skip_locked)</tt>	Represents arguments specified to :meth select for_update.
<tt style='background-color:#E8E8E8;'> sql.SelectBase <a href=' /sql/selectable.py#L1878'>as_scalar</a>()</tt>	Return a 'scalar' representation of this selectable which can be used as a column expression.
<tt style='background-color:#E8E8E8;'> sql.SelectBase <a href=' /sql/selectable.py#L1891'>label</a>(name)</tt>	Return a 'scalar' representation of this selectable embedded as a subquery with a label.
<tt style='background-color:#E8E8E8;'> sql.SelectBase <a href=' /sql/selectable.py#L1902'>autocommit</a>()</tt>	Return a new selectable with the 'autocommit' flag set to true.
<tt style='background-color:#E8E8E8;'> sql.SelectBase <a href=' /sql/selectable.py#L1915'>_generate</a>()</tt>	Override the default _generate() method to also clear out exported collections.
<tt style='background-color:#E8E8E8;'> sql.GenerativeSelect <a href=' /sql/selectable.py#L1998'>for_update</a>()</tt>	Provide legacy dialect support for the for_update attribute.
<tt style='background-color:#E8E8E8;'> sql.GenerativeSelect <a href=' /sql/selectable.py#L2002'>with_for_update</a>(nowait,read,of,skip_locked)</tt>	Specify a for update clause for this :class generativeselect.
<tt style='background-color:#E8E8E8;'> sql.GenerativeSelect <a href=' /sql/selectable.py#L2056'>apply_labels</a>()</tt>	Return a new selectable with the 'use_labels' flag set to true.
<tt style='background-color:#E8E8E8;'> sql.GenerativeSelect <a href=' /sql/selectable.py#L2069'>_limit</a>()</tt>	Get an integer value for the limit this should only be used.
<tt style='background-color:#E8E8E8;'> sql.GenerativeSelect <a href=' /sql/selectable.py#L2079'>_simple_int_limit</a>()</tt>	True if the limit clause is a simple integer false if it is not present or is a sql expression.
<tt style='background-color:#E8E8E8;'> sql.GenerativeSelect <a href=' /sql/selectable.py#L2086'>_simple_int_offset</a>()</tt>	True if the offset clause is a simple integer false if it is not present or is a sql expression.
<tt style='background-color:#E8E8E8;'> sql.GenerativeSelect <a href=' /sql/selectable.py#L2093'>_offset</a>()</tt>	Get an integer value for the offset this should only be used.
<tt style='background-color:#E8E8E8;'> sql.GenerativeSelect <a href=' /sql/selectable.py#L2103'>limit</a>(limit)</tt>	Return a new selectable with the given limit criterion applied.
<tt style='background-color:#E8E8E8;'> sql.GenerativeSelect <a href=' /sql/selectable.py#L2123'>offset</a>(offset)</tt>	Return a new selectable with the given offset criterion applied.
<tt style='background-color:#E8E8E8;'> sql.GenerativeSelect <a href=' /sql/selectable.py#L2145'>order_by</a>()</tt>	Return a new selectable with the given list of order by criterion applied.
<tt style='background-color:#E8E8E8;'> sql.GenerativeSelect <a href=' /sql/selectable.py#L2157'>group_by</a>()</tt>	Return a new selectable with the given list of group by criterion applied.
<tt style='background-color:#E8E8E8;'> sql.GenerativeSelect <a href=' /sql/selectable.py#L2169'>append_order_by</a>()</tt>	Append the given order by criterion applied to this selectable.
<tt style='background-color:#E8E8E8;'> sql.GenerativeSelect <a href=' /sql/selectable.py#L2188'>append_group_by</a>()</tt>	Append the given group by criterion applied to this selectable.
<tt style='background-color:#E8E8E8;'> sql.CompoundSelect <a href=' /sql/selectable.py#L2283'>_create_union</a>(cls)</tt>	Return a union of multiple selectables.
<tt style='background-color:#E8E8E8;'> sql.CompoundSelect <a href=' /sql/selectable.py#L2303'>_create_union_all</a>(cls)</tt>	Return a union all of multiple selectables.
<tt style='background-color:#E8E8E8;'> sql.CompoundSelect <a href=' /sql/selectable.py#L2323'>_create_except</a>(cls)</tt>	Return an except of multiple selectables.
<tt style='background-color:#E8E8E8;'> sql.CompoundSelect <a href=' /sql/selectable.py#L2340'>_create_except_all</a>(cls)</tt>	Return an except all of multiple selectables.
<tt style='background-color:#E8E8E8;'> sql.CompoundSelect <a href=' /sql/selectable.py#L2357'>_create_intersect</a>(cls)</tt>	Return an intersect of multiple selectables.
<tt style='background-color:#E8E8E8;'> sql.CompoundSelect <a href=' /sql/selectable.py#L2374'>_create_intersect_all</a>(cls)</tt>	Return an intersect all of multiple selectables.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L2490'>__init__</a>(columns,whereclause,from_obj,distinct)</tt>	Construct a new :class select.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L2776'>_get_display_froms</a>(explicit_correlate_froms,implicit_correlate_froms)</tt>	Return the full list of 'from' clauses to be displayed.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L2852'>froms</a>()</tt>	Return the displayed list of fromclause elements.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L2858'>with_statement_hint</a>(text,dialect_name)</tt>	Add a statement hint to this :class select.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L2878'>with_hint</a>(selectable,text,dialect_name)</tt>	Add an indexing or other executional context hint for the given selectable to this :class.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L2925'>locate_all_froms</a>()</tt>	Return a set of all fromclause elements referenced by this select.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L2937'>inner_columns</a>()</tt>	An iterator of all columnelement expressions which would be rendered into the columns clause of the resulting select statement.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3014'>get_children</a>(column_collections)</tt>	Return child elements as per the clauseelement specification.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3024'>column</a>(column)</tt>	Return a new select() construct with the given column expression added to its columns clause.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3032'>reduce_columns</a>(sqlutil,only_synonyms)</tt>	Return a new :func select construct with redundantly.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3064'>with_only_columns</a>(columns)</tt>	Return a new :func select construct with its columns.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3161'>where</a>(whereclause)</tt>	Return a new select() construct with the given expression added to its where clause joined to the existing clause via and if any.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3170'>having</a>(having)</tt>	Return a new select() construct with the given expression added to its having clause joined to the existing clause via and if any.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3178'>distinct</a>()</tt>	Return a new select() construct which will apply distinct to its columns clause.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3197'>select_from</a>(fromclause)</tt>	Return a new :func select construct with the.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3231'>correlate</a>()</tt>	Return a new :class select which will correlate the given from.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3294'>correlate_except</a>()</tt>	Return a new :class select which will omit the given from.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3336'>append_correlation</a>(fromclause)</tt>	Append the given correlation expression to this select() construct.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3350'>append_column</a>(column)</tt>	Append the given column expression to the columns clause of this select() construct.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3367'>append_prefix</a>(clause)</tt>	Append the given columns clause prefix expression to this select() construct.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3379'>append_whereclause</a>(whereclause)</tt>	Append the given expression to this select() construct's where criterion.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3395'>append_having</a>(having)</tt>	Append the given expression to this select() construct's having criterion.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3409'>append_from</a>(fromclause)</tt>	Append the given fromclause expression to this select() construct's from clause.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3489'>self_group</a>(against)</tt>	Return a 'grouping' construct as per the clauseelement specification.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3503'>union</a>(other)</tt>	Return a sql union of this select() construct against the given selectable.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3509'>union_all</a>(other)</tt>	Return a sql union all of this select() construct against the given selectable.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3516'>except_</a>(other)</tt>	Return a sql except of this select() construct against the given selectable.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3522'>except_all</a>(other)</tt>	Return a sql except all of this select() construct against the given selectable.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3529'>intersect</a>(other)</tt>	Return a sql intersect of this select() construct against the given selectable.
<tt style='background-color:#E8E8E8;'> sql.Select <a href=' /sql/selectable.py#L3536'>intersect_all</a>(other)</tt>	Return a sql intersect all of this select() construct against the given selectable.
<tt style='background-color:#E8E8E8;'> sql.ScalarSelect <a href=' /sql/selectable.py#L3581'>where</a>(crit)</tt>	Apply a where clause to the select statement referred to by this :class.
<tt style='background-color:#E8E8E8;'> sql.Exists <a href=' /sql/selectable.py#L3600'>__init__</a>()</tt>	Construct a new :class exists against an existing.
<tt style='background-color:#E8E8E8;'> sql.Exists <a href=' /sql/selectable.py#L3642'>select_from</a>(clause)</tt>	Return a new :class exists construct applying the given.
<tt style='background-color:#E8E8E8;'> sql.Exists <a href=' /sql/selectable.py#L3652'>where</a>(clause)</tt>	Return a new exists() construct with the given expression added to its where clause joined to the existing clause via and if any.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/elements.py#L33'>collate</a>(expression,collation)</tt>	Return the clause expression collate collation.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/elements.py#L59'>between</a>(expr,lower_bound,upper_bound,symmetric)</tt>	Produce a between predicate clause.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/elements.py#L113'>literal</a>(value,type_)</tt>	Return a literal clause bound to a bind parameter.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/elements.py#L135'>outparam</a>(key,type_)</tt>	Create an 'out' parameter for usage in functions stored procedures for databases which support them.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/elements.py#L149'>not_</a>(clause)</tt>	Return a negation of the given clause i e not clause.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L180'>_clone</a>()</tt>	Create a shallow copy of this clauseelement.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L202'>_constructor</a>()</tt>	Return the 'constructor' for this clauseelement.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L214'>_cloned_set</a>()</tt>	Return the set consisting all cloned ancestors of this clauseelement.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L236'>_annotate</a>(values)</tt>	Return a copy of this clauseelement with annotations updated by the given dictionary.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L243'>_with_annotations</a>(values)</tt>	Return a copy of this clauseelement with annotations replaced by the given dictionary.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L250'>_deannotate</a>(values,clone)</tt>	Return a copy of this :class clauseelement with annotations.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L273'>unique_params</a>()</tt>	Return a copy with :func bindparam() elements replaced.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L283'>params</a>()</tt>	Return a copy with :func bindparam() elements replaced.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L313'>compare</a>(other)</tt>	Compare this clauseelement to the given clauseelement.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L326'>_copy_internals</a>(clone)</tt>	Reassign internal elements to be clones of themselves.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L339'>get_children</a>()</tt>	Return immediate child elements of this :class clauseelement.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L353'>self_group</a>(against)</tt>	Apply a 'grouping' to this :class clauseelement.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L379'>compile</a>(default,bind,dialect)</tt>	Compile this sql expression.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L444'>_compiler</a>(dialect)</tt>	Return a compiler appropriate for this clauseelement given a dialect.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L456'>__and__</a>(other)</tt>	'and' at the clauseelement level.
<tt style='background-color:#E8E8E8;'> sql.ClauseElement <a href=' /sql/elements.py#L465'>__or__</a>(other)</tt>	'or' at the clauseelement level.
<tt style='background-color:#E8E8E8;'> sql.ColumnElement <a href=' /sql/elements.py#L703'>expression</a>()</tt>	Return a column expression.
<tt style='background-color:#E8E8E8;'> sql.ColumnElement <a href=' /sql/elements.py#L729'>shares_lineage</a>(othercolumn)</tt>	Return true if the given :class columnelement.
<tt style='background-color:#E8E8E8;'> sql.ColumnElement <a href=' /sql/elements.py#L735'>_compare_name_for_result</a>(other)</tt>	Return true if the given column element compares to this one when targeting within a result row.
<tt style='background-color:#E8E8E8;'> sql.ColumnElement <a href=' /sql/elements.py#L742'>_make_proxy</a>(selectable,name,name_is_truncatable)</tt>	Create a new :class columnelement representing this.
<tt style='background-color:#E8E8E8;'> sql.ColumnElement <a href=' /sql/elements.py#L773'>compare</a>(other,use_proxies,equivalents)</tt>	Compare this columnelement to another.
<tt style='background-color:#E8E8E8;'> sql.ColumnElement <a href=' /sql/elements.py#L801'>cast</a>(type_)</tt>	Produce a type cast i e cast(<expression> as <type>).
<tt style='background-color:#E8E8E8;'> sql.ColumnElement <a href=' /sql/elements.py#L811'>label</a>(name)</tt>	Produce a column label i e <columnname> as <name>.
<tt style='background-color:#E8E8E8;'> sql.ColumnElement <a href=' /sql/elements.py#L821'>anon_label</a>()</tt>	Provides a constant 'anonymous label' for this columnelement.
<tt style='background-color:#E8E8E8;'> sql.BindParameter <a href=' /sql/elements.py#L867'>__init__</a>(key,value,type_,unique)</tt>	Produce a "bound expression".
<tt style='background-color:#E8E8E8;'> sql.BindParameter <a href=' /sql/elements.py#L1128'>_with_value</a>(value)</tt>	Return a copy of this :class bindparameter with the given value.
<tt style='background-color:#E8E8E8;'> sql.BindParameter <a href=' /sql/elements.py#L1140'>effective_value</a>()</tt>	Return the value of this bound parameter taking into account if the callable parameter.
<tt style='background-color:#E8E8E8;'> sql.BindParameter <a href=' /sql/elements.py#L1168'>compare</a>(other)</tt>	Compare this :class bindparameter to the given clause.
<tt style='background-color:#E8E8E8;'> sql.BindParameter <a href=' /sql/elements.py#L1177'>__getstate__</a>()</tt>	Execute a deferred value for serialization purposes.
<tt style='background-color:#E8E8E8;'> sql.TextClause <a href=' /sql/elements.py#L1266'>_create_text</a>(text,bind,bindparams,typemap)</tt>	Construct a new :class textclause clause representing.
<tt style='background-color:#E8E8E8;'> sql.TextClause <a href=' /sql/elements.py#L1417'>bindparams</a>()</tt>	Establish the values and/or types of bound parameters within this :class.
<tt style='background-color:#E8E8E8;'> sql.TextClause <a href=' /sql/elements.py#L1510'>columns</a>(selectable)</tt>	Turn this :class textclause object into a :class textasfrom.
<tt style='background-color:#E8E8E8;'> sql.Null <a href=' /sql/elements.py#L1658'>_instance</a>(cls)</tt>	Return a constant :class null construct.
<tt style='background-color:#E8E8E8;'> sql.False_ <a href=' /sql/elements.py#L1685'>_instance</a>(cls)</tt>	Return a :class false_ construct.
<tt style='background-color:#E8E8E8;'> sql.True_ <a href=' /sql/elements.py#L1751'>_instance</a>(cls)</tt>	Return a constant :class true_ construct.
<tt style='background-color:#E8E8E8;'> sql.ClauseList <a href=' /sql/elements.py#L1850'>compare</a>(other)</tt>	Compare this :class clauselist to the given :class clauselist,.
<tt style='background-color:#E8E8E8;'> sql.BooleanClauseList <a href=' /sql/elements.py#L1920'>and_</a>(cls)</tt>	Produce a conjunction of expressions joined by and.
<tt style='background-color:#E8E8E8;'> sql.BooleanClauseList <a href=' /sql/elements.py#L1961'>or_</a>(cls)</tt>	Produce a conjunction of expressions joined by or.
<tt style='background-color:#E8E8E8;'> sql.Tuple <a href=' /sql/elements.py#L2014'>__init__</a>()</tt>	Return a :class tuple.
<tt style='background-color:#E8E8E8;'> sql.Case <a href=' /sql/elements.py#L2084'>__init__</a>(whens,value,else_)</tt>	Produce a case expression.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/elements.py#L2261'>literal_column</a>(text,type_)</tt>	Produce a :class columnclause object that has the.
<tt style='background-color:#E8E8E8;'> sql.Cast <a href=' /sql/elements.py#L2316'>__init__</a>(expression,type_)</tt>	Produce a cast expression.
<tt style='background-color:#E8E8E8;'> sql.TypeCoerce <a href=' /sql/elements.py#L2399'>__init__</a>(expression,type_)</tt>	Associate a sql expression with a particular type without rendering cast.
<tt style='background-color:#E8E8E8;'> sql.Extract <a href=' /sql/elements.py#L2489'>__init__</a>(field,expr)</tt>	Return a :class extract construct.
<tt style='background-color:#E8E8E8;'> sql.UnaryExpression <a href=' /sql/elements.py#L2573'>_create_nullsfirst</a>(cls,column)</tt>	Produce the nulls first modifier for an order by expression.
<tt style='background-color:#E8E8E8;'> sql.UnaryExpression <a href=' /sql/elements.py#L2616'>_create_nullslast</a>(cls,column)</tt>	Produce the nulls last modifier for an order by expression.
<tt style='background-color:#E8E8E8;'> sql.UnaryExpression <a href=' /sql/elements.py#L2658'>_create_desc</a>(cls,column)</tt>	Produce a descending order by clause element.
<tt style='background-color:#E8E8E8;'> sql.UnaryExpression <a href=' /sql/elements.py#L2698'>_create_asc</a>(cls,column)</tt>	Produce an ascending order by clause element.
<tt style='background-color:#E8E8E8;'> sql.UnaryExpression <a href=' /sql/elements.py#L2737'>_create_distinct</a>(cls,expr)</tt>	Produce an column-expression-level unary distinct clause.
<tt style='background-color:#E8E8E8;'> sql.UnaryExpression <a href=' /sql/elements.py#L2795'>compare</a>(other)</tt>	Compare this :class unaryexpression against the given :class.
<tt style='background-color:#E8E8E8;'> sql.CollectionAggregate <a href=' /sql/elements.py#L2841'>_create_any</a>(cls,expr)</tt>	Produce an any expression.
<tt style='background-color:#E8E8E8;'> sql.CollectionAggregate <a href=' /sql/elements.py#L2871'>_create_all</a>(cls,expr)</tt>	Produce an all expression.
<tt style='background-color:#E8E8E8;'> sql.BinaryExpression <a href=' /sql/elements.py#L2994'>compare</a>(other)</tt>	Compare this :class binaryexpression against the given :class binaryexpression.
<tt style='background-color:#E8E8E8;'> sql.Over <a href=' /sql/elements.py#L3121'>__init__</a>(element,partition_by,order_by,range_)</tt>	Produce an :class over object against a function.
<tt style='background-color:#E8E8E8;'> sql.Over <a href=' /sql/elements.py#L3263'>func</a>()</tt>	The element referred to by this :class over.
<tt style='background-color:#E8E8E8;'> sql.WithinGroup <a href=' /sql/elements.py#L3320'>__init__</a>(element)</tt>	Produce a :class withingroup object against a function.
<tt style='background-color:#E8E8E8;'> sql.WithinGroup <a href=' /sql/elements.py#L3362'>over</a>(partition_by,order_by)</tt>	Produce an over clause against this :class withingroup.
<tt style='background-color:#E8E8E8;'> sql.FunctionFilter <a href=' /sql/elements.py#L3422'>__init__</a>(func)</tt>	Produce a :class functionfilter object against a function.
<tt style='background-color:#E8E8E8;'> sql.FunctionFilter <a href=' /sql/elements.py#L3449'>filter</a>()</tt>	Produce an additional filter against the function.
<tt style='background-color:#E8E8E8;'> sql.FunctionFilter <a href=' /sql/elements.py#L3471'>over</a>(partition_by,order_by)</tt>	Produce an over clause against this filtered function.
<tt style='background-color:#E8E8E8;'> sql.Label <a href=' /sql/elements.py#L3523'>__init__</a>(name,element,type_)</tt>	Return a :class label object for the given :class.
<tt style='background-color:#E8E8E8;'> sql.ColumnClause <a href=' /sql/elements.py#L3669'>__init__</a>(text,type_,is_literal,_selectable)</tt>	Produce a :class columnclause object.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/elements.py#L4118'>_as_truncated</a>(value)</tt>	Coerce the given value to :class _truncated_label.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/elements.py#L4142'>_expand_cloned</a>(elements)</tt>	Expand the given set of clauseelements to be the set of all 'cloned' predecessors.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/elements.py#L4150'>_select_iterables</a>(elements)</tt>	Expand tables into individual columns in the given list of column expressions.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/elements.py#L4158'>_cloned_intersection</a>(a,b)</tt>	Return the intersection of sets a and b counting any overlap between 'cloned' predecessors.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/elements.py#L4185'>_is_column</a>(col)</tt>	True if col is an instance of :class columnelement.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/elements.py#L4191'>_find_columns</a>(clause)</tt>	Locate column objects within the given expression.
<tt style='background-color:#E8E8E8;'> sql.AnnotatedColumnElement <a href=' /sql/elements.py#L4418'>name</a>()</tt>	Pull 'name' from parent if not present.
<tt style='background-color:#E8E8E8;'> sql.AnnotatedColumnElement <a href=' /sql/elements.py#L4423'>table</a>()</tt>	Pull 'table' from parent if not present.
<tt style='background-color:#E8E8E8;'> sql.AnnotatedColumnElement <a href=' /sql/elements.py#L4428'>key</a>()</tt>	Pull 'key' from parent if not present.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/crud.py#L65'>_get_crud_params</a>(compiler,stmt)</tt>	Create a set of tuples representing column/string pairs for use in an insert or update statement.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/crud.py#L342'>_append_param_insert_pk_returning</a>(compiler,stmt,c,values)</tt>	Create a primary key expression in the insert statement and possibly a returning clause for it.
<tt style='background-color:#E8E8E8;'> sql. <a href=' /sql/crud.py#L427'>_append_param_insert_pk</a>(compiler,stmt,c,values)</tt>	Create a bound parameter in the insert statement to receive a 'prefetched' default value.
