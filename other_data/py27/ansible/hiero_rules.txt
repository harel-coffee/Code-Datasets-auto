class	code path and handle ||| clc	count=3
module	check if ||| mongodb	count=1
function	task to keep ||| next task	count=1
function_arg	[function_1] value for ||| [arg_2] [function_1]	count=1
module	an account alias ||| cloud	count=1
function	return details about ||| get	count=1
function_arg	zone in [arg_2] ||| [function_1] [arg_2]	count=1
arg	remote branch version ||| remote	count=1
function_arg	[function_1] [arg_2] ||| [function_1] module host [arg_2]	count=13
function	ids installed ||| ids	count=1
function	hosts ||| apply subscript	count=1
function	[function_1] alert ||| [function_1] [function_2]	count=6
module	nothing ||| plugins connection	count=16
module	from subscription-manager ||| packaging os	count=1
arg	google ||| provider	count=1
function	it is not found ||| from	count=1
arg	or more packages if ||| packages	count=1
function	when a task ||| v2 runner on	count=1
arg	possible ||| array	count=1
class	initialized ||| connection base	count=1
arg	of pip command ||| pip chdir	count=1
function	public ip available ||| public ip	count=1
function	branch does ||| branch	count=1
function	configure the system as ||| configure	count=1
function	on the ||| exec	count=7
function	id of ||| get file system id	count=1
function	error did not ||| error lines from	count=1
arg	the dest ||| dest src	count=1
function	[function_1] matching ||| [function_1] [function_2]	count=3
class	block with ||| block	count=1
function	alert [function_2] ||| [function_2] [function_1]	count=19
class	remove ||| clc modify server	count=1
class	the provided vault ||| vault cli	count=1
arg	the existence of ||| name cidr_block	count=1
arg	into group ||| group	count=1
class	we've been initialized ||| connection base	count=1
module	to receive updates ||| modules packaging	count=1
function	number of newlines at ||| count newlines	count=1
function	[function_1] rule ||| [function_2] [function_1]	count=1
function	named [function_2] ||| [function_2] [function_1]	count=3
arg	[arg_1] is 'absent' ||| [arg_1] [arg_2]	count=4
module	mode args ||| modules network nxos	count=1
class	pools ||| pools	count=2
function	of a custom ||| custom	count=1
function_arg	from an [arg_2] ||| [function_1] [arg_2]	count=1
arg	key are ||| key	count=1
arg	2-tuple ||| connect_timeout	count=1
module	a ||| plugins action	count=2
function	[function_1] device ||| [function_1] [function_2]	count=9
module	a previously registered ||| modules packaging	count=1
class	rule and target ||| rule manager	count=1
function	[function_1] to a ||| [function_2] [function_1]	count=1
function	status code from ||| status code from	count=1
function	to be removed ||| ids to remove	count=1
arg	or updates [arg_1] [arg_2] cache ||| [arg_2] [arg_1]	count=2
function	[function_1] [function_2] ||| [function_1] lxc [function_2]	count=9
module	uses 0/1 integer values ||| module_utils	count=1
function	[function_1] string to ||| [function_1] [function_2]	count=3
function	unused licenses ||| unused licenses	count=2
function_arg	module [arg_2] ||| [function_1] module [arg_2]	count=3
class	about the ||| cdotlun	count=1
function	returns the balancer ||| fetch balancer	count=1
function_arg	[function_1] two dictionaries ||| [arg_2] [function_1]	count=3
function	limitations [function] apply ||| [function]	count=1
function	[function_1] of ||| [function_2] remote [function_1]	count=1
arg	name it appears ||| name	count=1
function	environment ||| environment	count=3
arg	host to have the ||| propertyhash	count=1
function	[function_1] default security ||| [function_1] [function_2]	count=1
function	to array of ||| get	count=1
module	registered ||| os	count=1
function	the required_together argument ||| rax required together	count=1
module	given locale ||| modules system	count=1
arg	xml ||| xml	count=1
module	given ||| modules cloud	count=1
arg	object to a ||| obj	count=2
class	execute the ||| firewall policy	count=1
class	sets ||| variable manager	count=2
function	of the given ||| get	count=4
function	current ||| current	count=1
function_arg	from [arg_2] ||| [function_1] [arg_2]	count=3
arg	git repo if ||| git_path module repo dest	count=1
class	retrieves rule and target ||| watch event rule manager	count=1
module	attributes string for user ||| modules database	count=1
arg	hosts in a particular ||| minutes	count=1
arg	key are parameters ||| key	count=1
arg	data out ||| data	count=1
function	convert ||| convert to	count=2
function_arg	requests to [arg_2] ||| [function_1] module [arg_2]	count=1
module	vault ||| vault	count=1
module	from here ||| cloud	count=2
function	string ||| split	count=1
function	repo removes old repos ||| repo	count=1
arg	[arg] host key ||| [arg] host key	count=1
function	name of ||| get link name	count=1
module	the ||| lxc	count=1
class	if the container ||| container	count=1
function	the name of ||| get link name	count=1
function	return the key ||| get key	count=3
arg	if the user exists ||| client user db_name	count=1
function	self group ||| make group	count=1
module	start the ||| modules cloud misc	count=1
module	if ||| modules system	count=1
class	an anti [class_2] ||| [class_1] [class_2]	count=1
arg	the memory or cpu ||| server_id cpu	count=1
class	stdout ||| editor	count=1
arg	object or ||| module	count=1
module	write ||| network cumulus	count=1
function	the public [function_2] ||| [function_2] [function_1]	count=5
function	[function_1] from the ||| [function_1] [function_2]	count=3
function	[function_1] value associated ||| [function_1] [function_2]	count=1
class	wait ||| public ip	count=1
function	downtime for ||| svc downtime	count=3
module	a new ||| modules cloud amazon	count=1
function	[function_1] a group ||| [function_2] [function_1]	count=2
module	big-ip in the ||| modules	count=7
function_arg	check supplied [arg_2] ||| [function_1] module host key [arg_2]	count=2
module	all ||| modules packaging	count=1
arg	by its name or ||| locator location	count=1
function	network [function_2] ||| [function_2] [function_1]	count=6
arg	used with iterator so ||| enabled source	count=1
arg	or cpu of ||| module server_id cpu	count=1
class	path and handle the ||| group	count=1
class	[class_1] container ||| [class_2] [class_1]	count=1
function	a virtual [function_2] ||| [function_1] [function_2]	count=1
class	been ||| connection	count=1
function	host ||| host	count=8
class	find ||| clc server	count=1
arg	feature vmid = ||| vmid	count=1
function	of the server based ||| of	count=1
module	for autoscale ||| modules	count=1
function	error title ||| title from	count=1
function	absent by deleting it ||| absent	count=1
module	installs ||| modules packaging os	count=1
function	dict keys ||| json dict	count=1
function	latest [function_2] ||| [function_2] [function_1]	count=1
arg	cpu ||| module server_id cpu	count=1
module	with rhn ||| module_utils	count=1
function	spot requests to ||| await spot requests	count=2
module	lxd nothing ||| plugins connection	count=1
function	file [function_2] ||| [function_1] [function_2]	count=1
module	device and return results ||| module_utils	count=3
module	metadata keys ||| modules cloud rackspace	count=1
module	the lxc nothing ||| plugins	count=1
function	[function_1] alert policies ||| [function_1] [function_2]	count=1
module	system to ||| modules packaging os	count=1
module	or delete an ||| cloud	count=1
function	of gnu shred ||| shred	count=1
module	destination ||| modules	count=1
class	to do ||| connection	count=8
class	code ||| balancer	count=1
arg	follow_redirects [arg_2] ||| [arg_2] [arg_1]	count=1
class	from ansible galaxy ||| galaxy	count=1
function	of running servers ||| running servers by	count=1
module	start the machine via ||| modules	count=1
function_arg	[function_1] the module ||| [function_1] [arg_2]	count=3
module	a given [module_2] ||| [module_2] [module_1]	count=4
arg	file system ||| export	count=1
arg	[arg_1] baselist ||| [arg_2] [arg_1]	count=2
function	create a default ||| create default	count=3
module	execute the main ||| modules cloud centurylink	count=3
arg	string containing ssh-key options ||| options	count=1
function	factory that closes ||| factory	count=1
arg	if it doesn't ||| group_name parent_name group_description	count=1
arg	which is templated specially ||| templar	count=1
function	items result ||| items	count=1
module	the system to receive ||| packaging os	count=1
function	proxy protocol ||| set proxy protocol	count=2
module	directed for registration with ||| module_utils	count=1
function	chmod ||| chmod	count=1
function	[function_1] pool ||| [function_1] [function_2]	count=2
function	to find ||| find device	count=1
arg	task ||| task variables templar	count=1
function	the retention ||| retention	count=1
function	find the ||| find device	count=1
module	from cloud ||| cloud	count=1
function_arg	[function_1] in the ||| [function_1] [arg_2]	count=3
function	gone or ||| rebooted	count=1
function	exposed ||| exposed	count=1
arg	to see if original ||| old_ttl old_record_data new_ttl new_record_data	count=1
arg	module ||| module	count=10
function	group matching the ||| get group	count=1
class	been initialized ||| connection base	count=1
function	of strings with ||| get image	count=1
function	newlines ||| newlines	count=1
function	command returns ||| run command	count=1
function	need to be ||| remote target ids to	count=1
arg	matching containers that ||| containers	count=1
function	import a role ||| import	count=1
function	[function_1] the value ||| [function_2] [function_1]	count=1
module	args ||| network nxos	count=2
module	via the ||| modules	count=1
function_arg	executes [arg_2] ||| [arg_2] [function_1]	count=14
function	[function_1] deploy ||| [function_2] [function_1]	count=1
function	size in ||| size	count=1
function	return the days the ||| get cert days	count=1
class	handle ||| clc load balancer	count=2
function	file or ||| file	count=1
function	a range ||| range	count=1
function	id looked up by ||| id	count=1
module	needed for special ||| modules	count=1
function	running servers ||| running servers by	count=1
class	updated or added remotely ||| watch event rule	count=1
function	network domain by ||| get network domain	count=2
function	configuration matches the ||| config	count=1
class	that may ||| ip snat pool manager	count=1
class	role passed ||| galaxy	count=1
function	the remote ||| do remote	count=1
module	accelerated ||| plugins connection	count=1
function	execute the shell ||| execute	count=1
class	the in ||| module	count=1
function	get the policies ||| get policies	count=2
module_class	logicmonitor [class_2] ||| [class_2] [module_1]	count=1
function	group ||| group	count=10
function	to schedule downtime ||| schedule servicegroup svc downtime	count=1
module	[module_1] instance ||| [module_1] [module_2]	count=2
function	items result ||| loop items	count=1
arg	samples the ||| dest ref	count=1
function	network [function_2] ||| [function_2] vpc [function_1]	count=1
class	all subscribed ||| rhsm	count=1
function_arg	configuration from [arg_2] ||| [arg_2] [function_1]	count=2
function	the main code ||| process	count=3
function	stack ||| stack	count=1
function	to add ||| add host key	count=1
function	validate that ttl is ||| find ttl	count=1
function	initial data to the ||| initial data	count=1
module	for autoscale ||| modules cloud amazon	count=1
function	library supports ||| supports volume	count=1
module	check for differences ||| modules	count=3
class	[class_1] network module ||| [class_1] [class_2]	count=2
function	a log ||| log	count=1
module	elasticache parameter group ||| amazon	count=1
function	a proxy protocol enabled ||| get proxy protocol	count=1
module	for a group ||| modules cloud	count=1
module	send ||| modules monitoring	count=1
function	terminates ||| terminate	count=1
function	exists ||| exists	count=7
function	hex digest ||| digest	count=1
function_arg	file [arg_2] ||| [function_1] [arg_2]	count=32
function	returns id ||| id	count=1
arg	installed ||| name depot	count=1
function_arg	find the [arg_2] ||| [function_1] [arg_2]	count=4
function	an import ||| import	count=1
module	to a ||| modules cloud	count=1
function	a policy [function_2] ||| [function_2] [function_1]	count=3
arg	host line to ||| line	count=1
function	[function_1] server certificate ||| [function_2] [function_1]	count=3
function	[function_1] time ||| [function_2] [function_1]	count=6
arg	not be templated ||| attr value templar	count=1
function	[function_1] file with ||| [function_2] [function_1]	count=1
function	[function_1] running servers ||| [function_2] [function_1]	count=1
function	with [function_2] ||| [function_1] [function_2]	count=1
module_class	[module_1] container ||| [module_1] lxc [class_2]	count=2
function	backend [function_2] ||| [function_2] [function_1]	count=8
function	start messages ||| start	count=2
arg	particular [arg_2] ||| [arg_2] [arg_1]	count=7
function	create [function_2] ||| [function_1] [function_2]	count=6
class	if the container is ||| container	count=1
function	override post validation ||| post validate	count=3
function	template ||| template	count=3
class	code ||| clc group	count=2
function	a deploy [function_2] ||| [function_2] [function_1]	count=2
function	and write it ||| get	count=1
module	synchronize all of ||| modules packaging os	count=1
module	via the given ||| modules cloud misc	count=1
function	[function_1] ami ||| [function_1] [function_2]	count=4
class	device supports multiplexing ||| connection	count=1
module	each ||| cloud google	count=1
function_arg	security [function_1] [arg_2] group names are not ||| [function_1] names [arg_2]	count=2
module	if the ||| connection	count=1
function	on start ||| on play start	count=1
class	or added remotely ||| cloud watch event rule	count=1
module	for quoted ||| plugins	count=1
module	execute the ||| modules cloud	count=3
module	retrun ||| modules storage infinidat	count=4
arg	ec2 instance ||| ec2 module	count=1
arg	dict passed ||| name passed	count=1
arg	clc ||| clc alias server_id alert_policy_id	count=1
function	present on a ||| on	count=1
function	or add ||| add	count=1
module_class	in [class_2] ||| [module_1] [class_2]	count=1
function	of strings with format ||| get image	count=1
function	keys at the ||| host keys	count=1
module	if a server ||| cloud	count=1
function	them evaluate as such ||| evaluate	count=1
arg	server is ||| server server_params	count=1
arg	[arg_1] dict_b ||| [arg_2] [arg_1]	count=2
function	the value ||| value	count=1
module	on none ||| modules storage infinidat	count=1
arg	server_ids have ||| server_ids	count=1
function	ovirt/rhv in version ||| with version	count=1
class	[class_1] module ||| [class_1] [class_2]	count=3
function	enable the system to ||| enable	count=2
function	map to attributes for ||| validate attributes	count=1
module	list of ||| amazon	count=1
function	to a boto3 ||| boto3	count=1
function	transport ||| transport	count=2
function_arg	add nodes [arg_2] ||| [function_1] [arg_2]	count=1
function	subnets each identified either ||| subnets	count=1
module	checks to see ||| storage netapp	count=1
module	or alias or none ||| cloud amazon	count=1
class	generate ||| callback module	count=1
function_arg	[function_1] the provided ||| [arg_2] [function_1]	count=3
arg	characters a list ||| characters	count=1
function	state from ||| fetch aws state	count=1
function	results ||| process pending results	count=1
function	from the proxy ||| validate proxy	count=1
function_arg	file [arg_2] ||| [function_1] [arg_2] line_number	count=1
function	determine if changes are ||| system state change	count=1
arg	module the ansiblemodule used ||| module	count=1
function	title ||| failure title from	count=1
arg	given list rt_list ||| rt_list	count=1
function	parses an ||| parse account	count=1
function	string to [function_2] ||| [function_2] [function_1]	count=1
arg	[arg] post_validate ||| [arg]	count=1
function	cache ||| cache	count=2
module	the packages ||| modules packaging os	count=2
arg	to be fulfilled ||| ec2 spot_requests count	count=1
class	create ||| clc load balancer	count=1
arg	certificate in cert_file ||| module cert_file	count=2
function_arg	event [arg_2] ||| [function_1] [arg_2]	count=1
function	inventory which ||| generate retry inventory	count=1
module	[module] volume ||| [module]	count=1
function	start of ||| start	count=1
module	updates ||| module_utils	count=1
function	[function] all available ||| load product [function]	count=2
arg	a host in the ||| host	count=2
function	lun ||| get lun	count=1
arg	given set of server_ids ||| server_ids	count=1
function	of a missing ||| get	count=1
function	a size ||| size	count=1
function	return a temporary path ||| make tmp path	count=1
function_arg	is present [arg_2] ||| [function_1] [arg_2]	count=2
function	ids and converts ||| ids	count=1
class	the public [class_2] ||| [class_1] [class_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] task [arg_2]	count=2
function	[function_1] state ||| [function_1] [function_2]	count=9
module	a previously registered system ||| modules	count=1
arg	specific attribute ||| partitions attribute number	count=1
module	via the ||| cloud misc	count=1
function	used to schedule downtime ||| schedule servicegroup host downtime	count=1
module	bindings if any ||| cloud docker	count=1
function	[function_1] [function_2] ||| server [function_1] [function_2]	count=1
function	policies ||| policies	count=4
function	[function_1] [function_2] ||| [function_1] dhcp [function_2]	count=2
function	the lun ||| lun	count=1
function_arg	[function_1] server ||| [function_1] timeout [arg_2]	count=1
module	the main code ||| modules cloud	count=3
module	a given class ||| module_utils	count=1
class	the rule in aws ||| cloud watch event rule	count=1
module	receive ||| os	count=1
class	directed ||| rhsm	count=1
function	string ||| string	count=1
function	return a dictionary of ||| dict	count=1
function	selinux ||| semanage fcontext	count=1
function_arg	[function_1] port and ||| [arg_2] [function_1]	count=1
function	mapping from ami ||| mapping	count=2
function	[function_1] the wait ||| [function_2] requests [function_1]	count=3
function	convert self group ||| group	count=1
function	gets the most ||| get most	count=1
function_arg	a tempfile [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	[function_1] to local ||| [function_1] [arg_2]	count=18
function	returns the items result ||| items	count=1
class	path ||| clc load balancer	count=2
arg	of some ovirt entity ||| action entity	count=1
function	the version ||| version	count=3
function	a command run ||| command	count=1
function_arg	alarm handler [arg_2] ||| [arg_2] [function_1]	count=2
arg	url and next url ||| url	count=1
function	library aos-pyez is present ||| aos version	count=1
module	[module_1] a given ||| [module_1] [module_2]	count=8
function	and convert them ||| tags in	count=1
function	returns the [function_2] ||| [function_1] [function_2]	count=7
module	[module_1] database ||| [module_1] [module_2]	count=6
function	changes are ||| state change	count=1
function	required_together argument ||| infinibox required together	count=1
arg	post an ||| reference role_name	count=1
class	code path and ||| group	count=1
function	group list of ||| group list of	count=2
class	network and returns ||| docker network manager	count=2
function_arg	nodes to [arg_2] ||| [function_1] [arg_2]	count=1
function	reloaded containers were reloaded ||| get reload reason	count=1
function	base argument ||| argument	count=1
function	from a file ||| file	count=1
function	retrieves block [function_2] ||| [function_1] [function_2]	count=8
function_arg	[function_1] entity ||| [arg_2] [function_1]	count=5
function	(if the error ||| error	count=1
function	export if found fail ||| export	count=1
arg	instance newgroup into ||| newgroup	count=1
module	attributes string for user ||| modules	count=1
function	values ||| check changed parameter values	count=1
function_arg	[function_1] in dict_b ||| [arg_2] [function_1]	count=1
arg	play [arg_2] ||| [arg_2] [arg_1]	count=3
module	container ||| modules cloud docker	count=3
module	a valid ||| plugins	count=1
module	[module_1] a specified ||| [module_1] [module_2]	count=2
class	that [class] done at ||| [class]	count=1
class	and target ||| manager	count=1
function	post [function_2] ||| [function_2] [function_1]	count=9
class	method ||| lxc container management	count=1
module	previously ||| packaging os	count=2
function	create if missing ||| create	count=1
function	[function_1] v1 server ||| [function_2] [function_1]	count=1
module	for an ||| modules cloud	count=4
function_arg	is removed [arg_2] ||| [function_1] [arg_2]	count=1
class	task value ||| task	count=1
function	all targets on ||| all targets	count=1
function	changes ||| change instance	count=1
module	mysql variable ||| mysql	count=1
function	returns a dictionary ||| get	count=1
function	returns the ||| get	count=6
module	the lxc nothing ||| plugins connection	count=1
module	code path and ||| modules cloud	count=3
function	secret when closed ||| execute	count=1
function	alert policy [function_2] ||| [function_1] [function_2]	count=12
class	main ||| lxc container management	count=1
function_arg	message to [arg_2] ||| [function_1] [arg_2]	count=1
function	range pattern described ||| detect range	count=2
function	creates a nic ||| create nic	count=1
arg	if s3_url ||| s3_url	count=2
function	true ||| user	count=1
function	[function_1] alias ||| [function_1] [function_2]	count=3
arg	host port and return ||| host port	count=1
function	[function_1] clc ||| [function_1] [function_2]	count=7
function	parted ||| parted	count=1
function	containers and [function] those ||| [function] differing	count=1
class	validate ||| clc server	count=1
class	ansible galaxy server ||| galaxy cli	count=1
module	the ||| centurylink	count=6
arg	security group ||| name os_type	count=1
function	the type ||| interface type	count=2
class	docker ||| connection	count=1
function	reads ||| parseoptions	count=1
arg	facts for a ||| facts	count=2
function	[function_1] with the ||| [function_2] [function_1]	count=4
module	create ||| modules cloud azure	count=1
function_arg	checks [arg_2] ||| [arg_2] [function_1]	count=1
function	old-style (action/local_action) ||| old style args	count=1
function	ttl and values match ||| records match	count=1
class	main code ||| clc group	count=1
module	directed for registration ||| module_utils	count=1
function	[function_1] policy ||| [function_1] [function_2]	count=30
function	enables ||| enable	count=5
module	set it to self ||| system	count=1
module	machine ||| misc	count=1
module	code ||| centurylink	count=3
function	to array of strings ||| get image	count=1
class	path and handle ||| clc group	count=1
module	currently ||| modules cloud amazon	count=1
function	rule data matches ||| rule matches	count=1
arg	the iterator ||| iterator	count=1
arg	values specified ||| cf	count=1
class	main code path and ||| clc load balancer	count=1
function	by the [function_2] ||| [function_2] [function_1]	count=1
function	which loads [function_2] ||| [function_1] [function_2]	count=1
function_arg	deploy event [arg_2] ||| [function_1] [arg_2]	count=1
class	block value ||| block	count=1
class	returns a json group ||| logic monitor	count=1
arg	if the name ||| name	count=1
arg	the certificate in ||| module	count=1
function_arg	is present in ||| cert present module	count=1
function	api ||| api listener	count=1
arg	with iterator so ||| enabled	count=1
module	host we've been initialized ||| connection	count=1
class	check if the container ||| container	count=1
module	generate a ||| modules cloud	count=1
function	different and ||| different	count=1
class	to the ||| connection	count=2
module	[module_1] list of ||| [module_1] [module_2]	count=4
module	string typically ||| database mysql	count=1
function	convert the ||| convert host	count=1
module	for autoscale group deletion ||| modules	count=1
function	dict returns ||| challenges	count=1
arg	line to see if ||| line	count=1
module	for the given ||| modules cloud	count=5
module	encrypted data ||| parsing	count=1
function	this updates ||| update	count=1
module	[module] helper functions ||| [module]	count=3
class	modify ||| modify server	count=1
module	request ||| web_infrastructure	count=1
function	string to [function_2] ||| [function_2] environment [function_1]	count=1
arg	actually ||| lbtest	count=1
class	the locale module ||| ansible module	count=1
arg	whether the repository already ||| repodata overwrite_multiple	count=1
function	ensure all arguments have ||| check	count=1
module	path and handle the ||| modules cloud	count=3
module	changed false otherwise ||| database postgresql	count=1
arg	python [arg] into pascale ||| [arg]	count=1
arg	params ||| params	count=1
arg	folder to cloud ||| folder	count=1
arg	with a particular ||| minutes	count=1
function	[function_1] credentials ||| [function_2] [function_1]	count=21
function	spot requests ||| spot requests	count=1
module	for example the placement_group ||| modules cloud amazon	count=1
function	complete if [function_2] ||| [function_2] [function_1]	count=9
function	resource limits ||| has different resource limits	count=1
function	latest version ||| repository version	count=2
module	elasticache parameter group ||| cloud amazon	count=1
function	to add the ||| add	count=1
arg	for idempotency using ||| cli	count=3
module	request ||| modules	count=1
function	unused [function_2] ||| [function_2] [function_1]	count=1
arg	url hostkey ||| url	count=1
arg	vars sent through the ||| vars	count=1
arg	commands to the ||| commands	count=3
function	check mode logic for ||| check mode	count=1
module	check if the ||| database mongodb	count=1
function	state ||| state	count=12
function	[function_1] state of ||| [function_2] [function_1]	count=2
function	command prompt [function_2] ||| [function_2] [function_1]	count=2
function	returns common arguments for ||| common argument spec	count=1
arg	for ansible ||| module	count=1
function	method to compare ||| compare get	count=1
arg	vmid = ||| vmid	count=1
function	add the ||| add host	count=1
function_arg	[function_1] the pool ||| [arg_2] [function_1]	count=1
arg	play host and ||| loader play host	count=2
class	and handle ||| clc group	count=1
class	the main code ||| clc load balancer	count=1
function	string containing git branch ||| git	count=1
function	all arguments have the ||| check	count=1
arg	within the play_context ||| play_context	count=1
class	handle ||| load balancer	count=2
function	environ get call ||| get gcp environ	count=1
function	a server certificate if ||| server	count=1
module_class	in [class_2] ||| [module_1] cloud [class_2]	count=1
function	connection ||| connection	count=2
function	instance ids installed ||| instance ids	count=2
arg	next url specifically ||| url	count=1
function_arg	difference between [arg_2] ||| [function_1] [arg_2]	count=1
class	set ||| clc blueprint package	count=1
function	version ||| name version	count=1
arg	returns change status ||| module xbps_path packages state	count=1
class	in ||| cloud	count=5
class	affinity ||| affinity	count=2
function	a format ||| format	count=1
module	machine via the ||| cloud misc	count=1
arg	resource record ||| module gcdns zone record	count=1
class	main code path and ||| firewall policy	count=1
module	pool on the ||| modules cloud	count=1
function	the name [function_2] ||| [function_2] [function_1]	count=6
function	argument ||| argument	count=8
module	2 ||| packaging os	count=1
function_arg	[function_1] data ||| [function_1] [arg_2]	count=2
module	connection nothing to ||| connection	count=6
function	to all ovirt ||| ovirt	count=1
module	for a given ||| modules cloud	count=6
function	version of the six ||| get six	count=1
function	entity id by ||| get id by	count=2
function_arg	node [arg_2] ||| [arg_2] [function_1]	count=3
class	path and handle the ||| balancer	count=1
function	create a [function_2] ||| [function_2] [function_1]	count=9
function	block device [function_2] ||| [function_1] [function_2]	count=6
function	to ||| ids to	count=1
function	[function_1] [function_2] used : env cwd ||| [function_1] [function_2]	count=1
function	schedule downtime for a ||| schedule svc downtime	count=1
module	objects [module_2] ||| [module_2] [module_1]	count=3
function	is ||| group is	count=1
arg	request to the ||| request	count=1
function	plugin ||| plugin	count=1
function	post validation ||| post validate environment	count=2
function	backend service the instance ||| backend service	count=1
function	removes a volume ||| volume	count=1
function	the system [function_2] ||| [function_2] [function_1]	count=1
arg	status ||| status wait_timeout	count=1
function	and it returns ||| get	count=1
function_arg	executes the [arg_2] ||| [function_1] [arg_2]	count=21
arg	second ||| module pacman_path name	count=1
module	to receive updates from ||| packaging os	count=1
arg	checking if ||| old_parameters new_parameters	count=1
function	notifications for a ||| svc notifications	count=1
function	delete ||| delete server	count=1
function	them into the aws ||| in aws	count=1
function	helper function to add ||| add	count=1
arg	for the play ||| loader play	count=1
class	ansible module ||| module	count=2
arg	from keystore on keystore_path ||| executable keystore_path	count=1
class	passed to ansible module ||| module	count=1
module	removes metadata keys ||| rackspace	count=1
function	[function_1] [function_2] ||| [function_2] requests [function_1]	count=25
arg	not destroyed ||| bes	count=1
function	containers via ||| init	count=1
arg	download data ||| dest use_proxy	count=1
class	method for ||| cli	count=1
function	containing host ||| host	count=1
module	receive updates ||| module_utils	count=1
function	of the ||| of	count=1
function	path ||| dhcp	count=1
class	return details about the ||| net	count=1
function	for the required_together argument ||| rax required together	count=1
function	it returns a dictionary ||| get	count=1
arg	with a particular host ||| host minutes	count=1
function	overlay repository if ||| overlay	count=1
arg	forces zypper ||| auto_import_keys shortname	count=1
function	removes a [function_2] ||| [function_2] [function_1]	count=2
arg	the specified servicegroup ||| servicegroup	count=1
function	class factory that ||| redirect handler factory	count=2
function	samples the version ||| version	count=1
module	update ||| storage infinidat	count=1
function	list of [function_2] ||| [function_2] [function_1]	count=7
class	the main ||| load balancer	count=1
arg	the cli command on ||| module cli	count=7
function_arg	[function_1] provided ||| [function_1] alias location [arg_2]	count=3
function	message to [function_2] ||| [function_2] [function_1]	count=4
class	the handler ||| handler	count=1
class	as directed ||| rhsm	count=1
module	execute the main ||| modules cloud	count=3
function	associated with the device ||| associated with device	count=1
function	[function] auth ||| [function] auth	count=2
function_arg	[function_1] named name ||| [function_1] [arg_2]	count=3
arg	vm determined by the ||| vm state	count=1
function	already has and the ||| has	count=2
function	create ||| create clc	count=1
function	[function_1] node ||| [function_2] [function_1]	count=1
arg	the play host ||| loader play host	count=2
arg	provided pool ||| alias location lb_id pool_id	count=2
function	a zone by ||| get zone by	count=2
function	validation of vars on ||| validate environment	count=1
class	as directed for registration ||| rhsm	count=1
module	the main code ||| modules cloud centurylink	count=3
arg	[arg_1] host ||| [arg_1] [arg_2]	count=4
function	the number of newlines ||| newlines	count=1
function	[function_1] mode ||| [function_2] [function_1]	count=1
class	the in [class_2] ||| [class_2] [class_1]	count=2
arg	pip command ||| pip chdir	count=1
function	spaces ||| parse params	count=1
arg	[arg_1] is 'absent' ||| [arg_2] [arg_1]	count=4
module	[module_1] [module_2] state we consider "running ||| [module_2] [module_1]	count=2
module	from ||| packaging os	count=2
module	the connection ||| plugins	count=8
function_arg	ports on [arg_2] ||| [arg_2] [function_1]	count=3
module	a valid python ||| plugins	count=1
function	changed_when is evaluated ||| changed when	count=1
function_arg	export [arg_2] ||| [arg_2] [function_1]	count=1
class	[class_1] data network ||| [class_1] [class_2]	count=1
class	an image ||| image	count=1
function	[function_1] existing targets ||| [function_1] [function_2]	count=1
arg	user password ||| user password	count=1
function	[function_1] handler ||| [function_1] [function_2]	count=2
function	add this ||| add	count=1
arg	[arg] security group ||| [arg]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] cursor user [arg_2]	count=12
function	the updated cache time ||| updated cache time	count=1
function	protocol policy if needed ||| protocol policy	count=1
function	reads results off ||| pending results	count=1
function	regions ||| regions	count=1
function	transfer a [function_2] ||| [function_2] [function_1]	count=12
module	for later iteration ||| modules web_infrastructure	count=2
function	define a guest with ||| define	count=1
function	ovirt/rhv in version ||| version	count=1
arg	if dict_a ||| dict_a	count=1
module_class	[module_1] dimension data ||| [class_2] [module_1]	count=1
arg	a pattern ||| pattern	count=1
module_class	[module_1] digest ||| [module_1] [class_2]	count=2
module	execution ||| network dellos10	count=2
function	change attributes ||| converge file system	count=1
module	do for docker ||| connection	count=1
function	newlines at ||| newlines from	count=1
function	get the port ||| get port	count=3
module	a single object ||| cloud	count=1
function	stack while it ||| stack	count=1
class	container id or ||| container manager	count=1
function	attributes ||| validate attributes	count=1
function	returns the key ||| get	count=1
function_arg	[function_1] [arg_2] corresponds to the reported ||| [function_1] [arg_2] line_number	count=5
module	new ttl ||| google	count=1
class	provided vault ||| vault cli	count=1
module	from subscription-manager ||| modules packaging os	count=1
arg	elbs and wait ||| wait timeout	count=1
function	items ||| items	count=2
function	function for the galaxy ||| galaxy	count=1
module	to a ||| cloud	count=1
function	[function_1] supplied service ||| [function_1] [function_2]	count=1
function	render this crontab ||| render	count=1
function	of the api call ||| axapi call	count=2
function	search an entity id ||| get id	count=1
arg	from gce ||| gce name	count=1
function	[function_1] vpc ||| [function_2] [function_1]	count=1
function	id of ||| id by	count=2
function_arg	[function_1] value ||| [arg_2] [function_1]	count=1
class	removed remotely ||| watch event rule manager	count=1
function	array of strings ||| get image	count=1
function	check supplied key ||| check	count=1
class	server based on ||| modify server	count=2
function	[function_1] vault ||| [function_1] [function_2]	count=1
function	to modify a ||| modify	count=1
arg	of instance newgroup into ||| newgroup	count=1
class	are ||| variable manager	count=2
class	details about the ||| net app cdotlun	count=1
function	of strings with format ||| get	count=1
arg	name ||| name tag	count=1
function	get the alert ||| get alert	count=2
class	a task if ||| task	count=1
function_arg	[function_1] [arg_2] ||| [function_1] alias location [arg_2]	count=9
function	command name for ||| command	count=6
arg	object from ||| fileobj	count=1
arg	module ||| module cli	count=1
function	load config ||| core load config	count=1
function	vserver ||| vserver	count=1
class	handles ||| manager	count=1
class	the ||| app	count=1
module	method for example ||| modules cloud amazon	count=1
function	return the ip ||| ip	count=1
arg	a clc ||| clc alias server_id	count=1
module	the main method ||| lxc	count=1
module	amazon s3 arguments ||| cloud amazon	count=2
module	the given locale ||| system	count=1
class	user and ||| user	count=1
function	end of ||| from end	count=1
function_arg	security group [function_1] [arg_2] names are not unique ||| security group [function_1] names [arg_2]	count=1
function	return the [function] name ||| get [function]	count=1
class	and handle the ||| clc firewall	count=1
function_arg	an object [arg_2] ||| [function_1] [arg_2]	count=4
module	the destination file ||| modules web_infrastructure	count=1
function	it (if the error ||| error lines	count=1
arg	[arg_1] to baselist ||| [arg_2] [arg_1]	count=2
function	on ||| exists	count=1
function	deletes the ||| delete	count=1
function	the role or name ||| role name	count=1
module	return ||| storage	count=1
function	hipchat v1 ||| v1	count=1
arg	changed ||| changed	count=1
function	base argument specifiation ||| argument spec	count=1
arg	module parameters ||| module	count=1
function	generate a message that ||| message	count=1
class	environment files are ||| manager	count=1
arg	in keystore ||| module executable keystore_path keystore_pass	count=1
function_arg	to the [arg_2] ||| [function_1] server [arg_2]	count=1
function	check mode logic ||| check mode	count=2
arg	to the service name ||| name	count=2
function	ip [function_2] ||| [function_1] [function_2]	count=4
class	to ||| rhsm	count=2
function	gone or delete it ||| rebooted	count=1
function	[function_1] balancer ||| [function_1] [function_2]	count=1
function	remote sources ||| remote url	count=2
arg	the subscript which ||| subscript	count=1
arg	value for ||| value	count=1
function	when executing the ||| compute	count=1
function	stream ||| stream	count=3
function_arg	ensure that [arg_2] ||| [arg_2] [function_1]	count=1
function	nodes to the ||| lbpool nodes	count=1
function	the error ||| error lines	count=1
arg	look like passwords ||| data no_log_values	count=1
function_arg	delete the [arg_2] ||| [arg_2] [function_1]	count=2
function	a rule in the ||| rule	count=1
function	them from the elb ||| elb	count=1
module	of instances for ||| modules cloud	count=1
module	machine ||| modules	count=1
function	the argument spec ||| argument spec	count=5
function	credentials on the sdk ||| credentials	count=7
arg	return true if s3_url ||| s3_url	count=2
module	path and handle the ||| cloud	count=3
function	imperfect role ||| is role	count=1
module	host we've been ||| plugins	count=1
arg	server ||| cloud server	count=1
function	that a policy is ||| ensure policy is	count=1
class	and ||| elb manager	count=1
function_arg	decrypt a piece ||| decrypt vaulttext filename	count=2
module_class	[module_1] value ||| [module_1] [class_2]	count=8
arg	the pool ||| lb_id pool_id	count=1
function	loads a list ||| load	count=2
module	or ||| packaging os	count=1
function_arg	[function_1] object prepared ||| [function_1] module [arg_2]	count=2
module	[module_1] s3 ||| [module_2] [module_1]	count=2
class	the ||| virt	count=2
module	details [module] particular ||| [module]	count=1
class	specific command-directory-name ||| net app cdotuser	count=1
module	for registration with rhn ||| module_utils	count=1
function	a network [function_2] ||| [function_2] [function_1]	count=2
arg	the server is updated ||| server server_params	count=1
arg	in the auth ||| auth	count=1
function	a default network ||| default	count=1
class	path and handle ||| firewall policy	count=1
function	target ||| pubnub	count=1
class	host we've been ||| base	count=1
function	[function_1] the six ||| [function_2] [function_1]	count=3
arg	or modifies an existing ||| module vpc_conn	count=1
arg	dest ||| dest	count=1
class	of ||| blueprint package	count=1
function	[function_1] tags from ||| [function_2] [function_1]	count=1
class	a task ||| task	count=2
module	for ||| modules database	count=1
function	[function_1] the cluster ||| [function_2] [function_1]	count=1
class	main ||| lxc container	count=1
arg	true_val ||| true_val	count=1
function	set which ||| set task and	count=1
arg	file for a digest_method ||| filename algorithm	count=1
function	[function] returned ||| find server [function] w	count=1
function	of spot [function_2] ||| [function_2] [function_1]	count=2
function	message that briefly describes ||| message	count=1
function_arg	[function_1] the data ||| [arg_2] [function_1]	count=1
function	get the attribute ||| get	count=2
module	over a directory ||| plugins	count=1
function_arg	of the [arg_2] ||| [function_1] original task [arg_2]	count=1
module	to lxd nothing to ||| plugins	count=1
function	notifications for ||| svc notifications	count=1
class	low ||| action base	count=1
class	exists for [class] ||| [class]	count=1
function	[function_1] credentials on ||| [function_1] [function_2]	count=21
module	retention ||| cloud amazon	count=1
function	into [function] based on ||| get serialized [function]	count=1
function	the anti affinity ||| aa	count=2
function	aggregate exists ||| get aggr	count=1
class	pools ||| rhsm pools	count=1
module	channels ||| module_utils	count=1
function	create a server ||| create clc server	count=1
class	[class_1] in ||| [class_2] watch event [class_1]	count=9
module	an instance ||| modules cloud google	count=2
class	[class_1] signing request ||| [class_1] [class_2]	count=1
function	encryption of ebs ||| encryption	count=1
function	when we can ||| on	count=1
class	base ||| base	count=1
function	absent ||| absent	count=4
function	[function_1] group ||| [function_2] [function_1]	count=3
function	range pattern described in ||| detect range	count=1
function	the transport ||| transport	count=2
function	security [function_2] ||| [function_2] [function_1]	count=2
function	low ||| low	count=1
module	[module_1] vault ||| [module_1] [module_2]	count=6
class	the task with its ||| task	count=1
function	argument specifiation common ||| argument spec	count=1
function	a path is relative ||| path	count=3
function	of ||| get api	count=1
function	downtime for all ||| svc downtime	count=2
module	the destination file ||| web_infrastructure	count=1
arg	the pattern ||| pattern	count=1
arg	given flag ||| flag	count=1
function	dict keys and values ||| dict	count=1
arg	the play ||| loader play	count=1
function	get the selinux ||| semanage fcontext	count=1
function	[function_1] the device ||| [function_1] [function_2]	count=5
function	to create a server ||| create clc server	count=1
module	idemopotent function to ||| modules monitoring	count=1
module	details ||| storage netapp	count=2
module	the shell ||| system	count=1
function	output around [function] ||| filter non [function]	count=1
function	from an ||| from obj	count=2
function	of a file ||| file	count=1
module	a new ||| modules cloud google	count=2
arg	desired ||| timeout	count=2
function	pause the machine ||| pause	count=1
function	a list ||| load list	count=1
class	get ||| linux hardware	count=1
function	authorization header [function] ||| [function] auth	count=1
module	and handle ||| cloud centurylink	count=3
module	the ||| connection	count=12
function	details about the ||| get	count=1
function	an import ||| import task	count=1
arg	local to local ||| in_path out_path	count=1
arg	request to the node ||| request	count=1
function	[function_1] v2 server ||| [function_1] [function_2]	count=1
arg	re sub returning a ||| value pattern replacement ignorecase	count=1
function	stack while ||| stack	count=1
arg	given host line ||| line	count=1
class	host we've been initialized ||| connection base	count=1
arg	sends the request ||| request	count=1
function	service string ||| services	count=1
module	main method ||| lxc	count=1
function	check supplied key is ||| check	count=1
module	create a ||| modules	count=4
class	handle ||| clc firewall	count=1
function	register the ||| register	count=1
class	filesystem by ||| efsconnection	count=1
arg	vars_cache [arg_2] ||| [arg_2] [arg_1]	count=2
function	zone by ||| zone by	count=1
class	the main code ||| balancer	count=1
arg	fail module if ||| module	count=1
arg	a piece of data ||| plaintext	count=1
function	[function_1] [function_2] ||| [function_2] by [function_1]	count=8
arg	second ||| pacman_path	count=1
module	for [module_2] ||| [module_1] [module_2]	count=88
function	delete ||| delete export	count=2
module	ansible ||| ovs	count=1
function	volume ||| volume	count=7
function	server objects from ||| from	count=1
function	and port ||| and port	count=1
function	six library that's available ||| six source	count=1
function_arg	be a [function_1] [arg_2] ||| [function_1] [arg_2]	count=3
function_arg	[function_1] ansible ||| [arg_2] [function_1]	count=3
function	validation for [function_2] ||| [function_1] [function_2]	count=1
function	assemble ||| assemble	count=2
function_arg	[function_1] particular ||| [arg_2] [function_1]	count=2
function	server by [function_2] ||| [function_1] [function_2] w	count=1
function	the named ports on ||| named ports	count=1
arg	particular servicegroup ||| servicegroup minutes	count=4
class	main code path ||| load	count=1
module	preserve spaces ||| plugins lookup	count=1
arg	the play_context ||| play_context	count=1
function	repo removes old ||| addmodify repo	count=1
function	and desired version ||| name version	count=1
function	from ||| sanitize	count=1
function	encrypted ||| is encrypted	count=1
arg	be templated during ||| templar	count=2
function_arg	[function_1] certificate in ||| [function_1] [arg_2]	count=3
function	difference ||| diff	count=1
function	ensures that a ||| ensure	count=2
class	that ||| big ip snat pool manager	count=1
function	is removed from ||| absent	count=1
arg	tuples into ||| list_of_tags	count=1
arg	a key from url ||| url	count=1
module	ipa ||| ipa	count=1
module	registered system ||| packaging	count=1
arg	filepath the filepath to ||| filepath	count=1
function	deploy [function_2] ||| [function_1] [function_2]	count=2
function	argument specifiation common ||| argument	count=1
function_arg	[function_1] new or ||| [function_1] vpc [arg_2]	count=1
function	deletes a ||| delete	count=1
function	policies for ||| policies for	count=2
arg	take pear ||| pear_output	count=1
function	reads results ||| results	count=1
class	converts ||| kubernetes ansible	count=1
arg	the given flag ||| flag	count=1
function	the invoke_shell() is ||| on open shell	count=1
function	config file ||| config file	count=1
function	ports ||| ports	count=2
function	of the api call ||| call	count=2
function	check [function_2] ||| [function_2] [function_1]	count=6
function	if file is not ||| from file	count=1
function	data ||| data	count=4
module	command ||| modules system	count=2
function_arg	on start [arg_2] ||| [function_1] [arg_2]	count=1
function	as a salt ||| salt	count=1
function	[function_1] the play ||| [function_1] [function_2]	count=1
function	is used to schedule ||| schedule	count=4
function	remove the alert ||| remove alert	count=2
function	hide or [function] login ||| update system [function]	count=1
module	the host we've ||| plugins connection	count=1
function	pattern described ||| detect	count=1
function	runs handlers on those ||| run handlers	count=1
function	values ||| argument values	count=2
arg	[arg_1] task ||| [arg_1] [arg_2]	count=5
module	the major and ||| modules	count=1
function	decrypted [function] note standard ||| shred [function]	count=1
arg	from group_vars/<groupname> ||| host	count=1
function	the loop args field ||| loop args	count=1
module	for ||| modules web_infrastructure	count=2
function	arguments that were passed ||| args	count=1
function_arg	[function_1] object ||| [function_1] to dict [arg_2]	count=2
function	[function_1] name ||| [function_1] [function_2]	count=15
arg	a managed instance ||| mig named_ports	count=1
module	if this ||| playbook	count=1
arg	single base64-encoded command ||| as_list strict_mode preserve_rc	count=1
function	associated with self instance_id ||| auto scaling group lbs	count=1
function	of subnets each ||| find subnets	count=1
module	get ||| modules packaging language	count=3
module	bindings if ||| modules cloud	count=1
function	if the configuration ||| config	count=1
function	dict ||| challenges	count=1
module	the connection nothing ||| plugins connection	count=6
function	if the system ||| system	count=1
function	if network [function_2] ||| [function_2] [function_1]	count=3
arg	instance of a securityrule ||| rule	count=1
module	filter for jinja2 to ||| plugins filter	count=1
function	module error title ||| failure title from exception	count=1
module	in pip freeze pip ||| language	count=1
function	to make ||| to	count=1
function	string containing git ||| git	count=1
function	block device ||| block device	count=4
arg	[arg_1] zone ||| [arg_1] [arg_2]	count=1
module	line number ||| playbook	count=1
function_arg	[function_1] module parameters ||| [arg_2] [function_1]	count=4
arg	the clc rest api ||| clc module server_params	count=1
arg	module ansible module object ||| module ec2 instance_ids	count=1
arg	if name ||| name	count=2
class	host we've ||| connection base	count=1
function	recreate [function_2] ||| [function_2] [function_1]	count=4
function	[function_1] level ||| [function_2] [function_1]	count=3
arg	[arg] to the ||| host [arg]	count=3
module	host bindings if any ||| modules cloud docker	count=1
arg	a pattern try ||| host_pattern host_data	count=1
function	create an instance ||| create instance	count=2
function_arg	datacenter in ||| datacenter module	count=1
module	to [module] ||| [module]	count=1
function_arg	set [arg_2] ||| [arg_2] [function_1]	count=6
function	the include line ||| include	count=1
function	[function_1] targets ||| [function_1] [function_2]	count=2
module	instances for ||| modules cloud	count=1
function	[function_1] different ||| [function_1] [function_2]	count=3
class	an ||| client	count=1
function	binds to ||| binds	count=1
arg	installed or not and ||| module name depot	count=1
function	[function_1] is present ||| [function_1] [function_2]	count=8
function	a server ||| clc server	count=1
function	to ||| target ids to remove	count=1
module	create ||| modules cloud google	count=1
arg	of events to ||| events data	count=1
function	set on the host ||| set host overrides	count=1
module	registration ||| packaging os	count=1
arg	host [arg_2] ||| [arg_1] [arg_2]	count=1
function	[function_1] ports ||| [function_1] [function_2]	count=3
function	alarm ||| alarm	count=1
function_arg	[function_1] of recs[ref][key] ||| [function_1] [arg_2]	count=2
module	lxd ||| connection	count=1
function	on ||| on	count=2
module	the ami for ||| modules	count=1
function	tags [function_2] ||| [function_1] [function_2]	count=3
function_arg	datacenter in the ||| datacenter module	count=1
function	local ||| local	count=1
module	[module] the role ||| modules [module]	count=1
arg	key from url returns ||| url	count=1
function	sort ||| sort	count=1
function_arg	[function_1] data blob ||| [function_1] file [arg_2]	count=1
function	loads and [function_2] ||| [function_2] [function_1]	count=1
function	and/or attributes ||| alter	count=1
arg	set of events to ||| events	count=1
function	return the state of ||| get state	count=1
module	registered ||| packaging os	count=2
function	ip removed if ||| ip absent	count=2
function	of ||| get ec2	count=1
function	all of ||| sync	count=1
function	[function_1] actual location ||| [function_1] [function_2]	count=5
function	proxy protocol enabled ||| get proxy protocol policy	count=1
function	determine what branch head ||| head branch	count=1
function	named ||| named	count=1
module	it exists or all ||| amazon	count=1
function	details about the lun ||| lun	count=1
function	status of ||| get	count=1
function	only possible [function] few ||| [function]	count=1
function	downtime for all ||| host downtime	count=1
function	[function_1] service string ||| [function_2] [function_1]	count=1
module	the non-interactive zypper ||| modules packaging os	count=1
function	them into [function_2] ||| [function_2] [function_1]	count=1
function	to compare the ||| compare props	count=1
function_arg	security group [function_1] [arg_2] group names are not ||| security group [function_1] names [arg_2]	count=1
function	tuple ||| as tuple	count=1
module	delete ||| storage infinidat	count=1
function	add glob ||| add glob to	count=2
function	they are set ||| set task	count=1
class	path and ||| clc	count=3
function	boto3 api ||| api	count=1
module	[module_1] domain name ||| [module_2] [module_1]	count=2
function	[function_1] port ||| [function_2] [function_1]	count=4
function	attributes ||| attributes	count=1
function	values ||| values	count=1
class	method ||| cli	count=1
function	different ||| diff	count=1
function	execute a command returns ||| run command	count=1
arg	hosts [arg] by filtering ||| [arg]	count=1
function	from variables set on ||| set host	count=1
function	method to group ||| group	count=1
arg	all elbs and wait ||| wait	count=1
function	all domains of the ||| do challenges	count=1
function	as a 4- ||| as	count=1
function	unregister a previously ||| unregister	count=1
function	wait for the the ||| wait for	count=1
class	[class_1] network module ||| [class_2] [class_1]	count=2
class	start the machine ||| virt	count=1
function	certificate ||| ssh certificate tokens	count=2
class	data network ||| data network	count=2
function	reads results off the ||| process pending results	count=1
class	load ||| load	count=4
module	string typically ||| mysql	count=1
function	when a task ||| on	count=1
function	notifications for a particular ||| notifications	count=1
arg	a managed instance group ||| mig named_ports	count=1
arg	the play [arg_2] ||| [arg_2] [arg_1]	count=3
function	api tuple ||| api listener as tuple	count=1
arg	name of the ||| name tag	count=1
arg	that a user ||| user	count=2
function_arg	[function_1] [arg_2] ||| product [function_1] [arg_2]	count=1
arg	dirname subdirs ||| dirname	count=1
function	remove the boot volume ||| remove boot volume	count=1
module	execute ||| modules cloud	count=3
arg	dns zone ||| module gcdns zone	count=2
arg	value for the key ||| key value	count=1
function_arg	bind mounted [arg_2] ||| [function_1] [arg_2]	count=3
function	count from a human ||| human	count=1
function	on a [function_2] ||| [function_1] [function_2]	count=2
function	synchronize all of ||| sync	count=1
module	code path and handle ||| centurylink	count=3
function	and [function] those ||| [function] differing	count=1
function	return the [function_2] ||| [function_1] [function_2]	count=2
module	to the host ||| plugins	count=1
function	[function_1] data to ||| [function_2] [function_1]	count=2
function_arg	containers via ansible ||| init module	count=1
module	main ||| cloud	count=4
arg	pattern try to process ||| host_pattern host_data	count=1
class	dictionary or ||| cloud stack	count=1
module	request a ||| web_infrastructure	count=1
class	code path and handle ||| clc load balancer	count=1
function_arg	domain by [arg_2] ||| [arg_2] [function_1]	count=3
function	notifications for ||| notifications	count=1
arg	the key (of ||| key	count=1
function_arg	downtime [arg_2] ||| [function_1] [arg_2]	count=1
module	key authorization [module_2] ||| [module_2] [module_1]	count=1
function	the most ||| get most	count=1
function	[function_1] credentials ||| [function_1] [function_2]	count=21
arg	and values specified in ||| module cf	count=1
module	[module_1] any ||| [module_1] [module_2]	count=8
function_arg	event to [arg_2] ||| [arg_2] [function_1]	count=1
function	in port ||| port	count=1
class	the ||| clc firewall policy	count=4
function	[function_1] different host ||| [function_2] [function_1]	count=3
arg	executed when ||| action_condition wait_condition	count=1
function_arg	[function_1] module ||| [function_1] [arg_2]	count=4
arg	retrieve [arg_2] ||| [arg_2] [arg_1]	count=2
function	from ||| fetch	count=2
module	the ami for ||| modules cloud amazon	count=1
arg	specific attribute ||| partitions attribute	count=1
function	remote [function_2] ||| [function_1] [function_2]	count=3
function	[function_1] [function_2] returned from the provisioning ||| [function_1] [function_2]	count=5
function	[function] login ||| update system [function]	count=1
function	the named ports on ||| update named ports	count=1
function	resources given ||| update resources	count=1
function	writes initial [function_2] ||| [function_1] [function_2]	count=3
module	request_spot_instances() method for ||| modules	count=1
arg	[arg_1] callback ||| [arg_2] [arg_1]	count=4
function_arg	set the [arg_2] ||| [arg_2] [function_1]	count=6
arg	as they relate ||| comparelist	count=1
class	security group <name>01 to ||| azure rmmodule base	count=1
module	if a ||| modules cloud centurylink	count=2
class	with ||| rhsm	count=1
arg	its name ||| locator location	count=1
function	a size in ||| size	count=1
function	the hostname and ||| and	count=1
function	a path ||| login path	count=3
arg	memory or cpu ||| module server_id cpu	count=1
function	execute the ||| execute	count=1
function	[function_1] src ||| [function_2] [function_1]	count=1
arg	list of servers ||| server_ids	count=1
function_arg	[function_1] its name ||| [function_1] [arg_2]	count=4
arg	the given value ||| value	count=3
module	for server default ||| modules	count=1
function	the error did ||| error lines from	count=1
function	when we can ||| on missing	count=1
function	the account alias ||| alias	count=1
function	stop the servers ||| stop servers	count=3
class	dictionary or the ||| cloud stack	count=1
class	handle the ||| balancer	count=1
function	arguments have the ||| check	count=1
function	[function_1] compatibility between ||| [function_1] [function_2]	count=1
function	range [function_2] ||| [function_2] [function_1]	count=6
arg	is executed when we ||| action_condition wait_condition	count=1
function	about the lun ||| lun	count=1
function	from log ||| log sanitize	count=1
function	array of binds to ||| binds	count=1
function	if ||| remove	count=1
module	system to ||| os	count=1
class	the main code path ||| clc	count=3
class	of the server ||| clc modify server	count=2
function	write the ||| write	count=1
function	a proxy protocol enabled ||| get proxy protocol policy	count=1
function	group name ||| get group	count=2
function	id ||| file system id	count=1
function	results off the final ||| process pending results	count=1
function	list of host task ||| get next	count=1
function	group name ||| group name	count=2
arg	datacenter by calling ||| datacenter	count=1
function	if changes ||| state change	count=1
function	pool ||| pool	count=2
class	either ||| role definition	count=1
function_arg	command returns [arg_2] ||| [function_1] [arg_2]	count=3
class	the device supports ||| connection	count=1
class	variables take precedence ||| task parameters	count=1
arg	/etc/rhsm/rhsm conf ||| rhsm_conf	count=2
function	calculate difference of ||| dict diff	count=1
function	[function_1] file or ||| [function_2] [function_1]	count=4
function_arg	policy to [arg_2] ||| [arg_2] [function_1]	count=2
function	dict from ||| rule dict from	count=2
arg	module ||| module system	count=1
function	in lxc ||| lxc	count=1
arg	templated specially ||| value templar	count=1
module	deactivate ||| modules packaging os	count=1
function	task to ||| task	count=1
function	if temporary [function_2] ||| [function_2] [function_1]	count=1
arg	is 'absent' if ||| search_params	count=1
module	from here to work ||| modules cloud	count=2
module	local ||| plugins connection	count=2
module	filesystem with ||| cloud	count=1
class	the shell ||| timezone	count=1
function	[function_1] packages ||| [function_1] [function_2]	count=1
class	makes sure that a ||| clc anti affinity	count=1
function	[function_1] compatibility ||| [function_2] [function_1]	count=1
module	to linode ||| modules cloud linode	count=1
module	removing the packages ||| modules packaging os	count=2
function	the named ports ||| named ports	count=1
class	system from ||| rhsm	count=1
function	put a [function_2] ||| [function_1] [function_2]	count=1
function	transfer [function_2] ||| [function_1] [function_2]	count=11
function	string to ||| string	count=1
function	the wait ||| wait	count=3
arg	it differs from ||| conn name values	count=1
function	from a file ||| from file	count=3
function	of the installed overlays ||| overlays	count=1
function_arg	[function_1] ansible module ||| [function_1] [arg_2]	count=1
function	function to create if ||| create	count=1
function	a given firewall ||| firewall	count=1
module	a directory and ||| plugins	count=1
function	module json ||| json lines	count=1
function	retrieve a network ||| network	count=1
module	if ||| plugins	count=1
module	synchronize all of ||| packaging	count=1
function_arg	the user [arg_2] ||| [function_1] [arg_2]	count=1
class	with the provided vault ||| vault	count=1
module	synchronize ||| os	count=1
arg	change user ||| user	count=1
class	main code path and ||| balancer	count=1
module	download the ||| modules	count=1
function	loads [function_2] ||| [function_1] product [function_2]	count=2
arg	[arg_1] [arg_2] ||| [arg_1] [arg_2]	count=246
arg	filepath to ||| filepath	count=1
arg	[arg_1] or ||| [arg_2] [arg_1]	count=10
function	they are set which ||| set	count=1
function	public ||| public	count=1
arg	the script ||| vault_password_file loader	count=1
function	and write ||| get	count=1
class	retrieves rule and target ||| rule manager	count=1
function	list of ||| list	count=6
function	[function_1] policies for ||| [function_2] [function_1]	count=1
arg	a piece ||| plaintext	count=1
arg	particular service ||| host services minutes	count=1
module	about ||| modules storage	count=1
function_arg	days the [arg_2] ||| [arg_2] [function_1]	count=5
arg	module the ||| module	count=1
class	rule ||| cloud watch event rule manager	count=1
class	as ||| rhsm	count=1
module	a vault ||| parsing vault	count=2
function	wait argument is true ||| wait for	count=3
class	that may change with ||| ip snat pool manager	count=1
function	hosts given in ||| hosts	count=1
module	the main code path ||| modules cloud centurylink	count=3
function	client list ||| client	count=1
arg	play host [arg_2] ||| [arg_1] [arg_2]	count=1
arg	baselist ||| baselist	count=1
function	tags from [function_2] ||| [function_2] [function_1]	count=1
class	idemopotent ||| host	count=1
function_arg	loop [arg_2] ||| [arg_2] [function_1]	count=3
module	for example ||| modules	count=1
function	[function_1] event ||| [function_1] [function_2]	count=3
arg	[arg] which may ||| hostnames [arg]	count=4
function	add a group if ||| add	count=1
function	out the policy id ||| get policy id	count=1
function	or none if file ||| file	count=1
function	options ||| options	count=1
class	execute the ||| load	count=1
module	main code ||| modules cloud	count=3
arg	a port ||| port	count=2
module	or ||| os	count=1
class	the machine via ||| virt	count=1
module	machine via the given ||| modules cloud misc	count=1
function_arg	clb node [arg_2] ||| [function_1] to dict [arg_2]	count=3
function_arg	a file [arg_2] ||| [function_1] [arg_2]	count=32
arg	task if they are ||| task variables	count=1
function	anti affinity [function_2] ||| [function_1] [function_2]	count=1
module	path and ||| cloud centurylink	count=3
function_arg	wait for [arg_2] ||| [arg_2] [function_1]	count=4
function	[function_1] [function_2] ||| [function_1] [function_2]	count=3221
module	spaces ||| lookup	count=1
arg	[arg_1] the name ||| [arg_2] [arg_1]	count=6
arg	datacenter by calling the ||| datacenter lookup_group	count=1
function	type example of ||| type	count=1
function	[function_1] log messages ||| [function_2] [function_1]	count=2
function	name returns the ||| name	count=1
module	a given ||| cloud	count=4
function	[function] unrelated output ||| [function] non json	count=2
class	returns role ||| galaxy role	count=1
function	retention of messages ||| retention action	count=1
arg	clc ||| clc alias	count=1
function_arg	volume from [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] protocol enabled ||| [function_2] [function_1]	count=3
function	method to compare the ||| compare	count=1
module	device ||| plugins connection	count=2
arg	dict_b return ||| dict_b	count=1
module	all of the ||| modules packaging	count=1
function	will override those ||| and variable override	count=1
class	config ||| config	count=1
module	or none ||| amazon	count=1
function	[function_1] file with ||| [function_1] [function_2]	count=1
function	wait ||| wait	count=6
function	message ||| send msg	count=1
function	environment string ||| environment string	count=2
function	local rule data matches ||| rule matches	count=1
function	get installed state of ||| get installed state	count=1
class	[class] in ||| [class]	count=1
function_arg	[function_1] the pause ||| [function_1] [arg_2]	count=1
class	about ||| net app cdotlun	count=2
arg	installed or ||| depot	count=1
function	newlines ||| newlines from	count=1
function	the galaxy ||| load galaxy	count=1
function_arg	instances [arg_2] ||| [arg_2] [function_1]	count=2
function	the number of newlines ||| newlines from	count=1
class	status ||| cloud retry	count=1
function	gets the current ||| make current	count=1
arg	datastructure which ||| ds	count=1
module	we've ||| plugins	count=1
function	create an ||| create	count=1
arg	quoting [arg] based on ||| cursor mysqlvar [arg]	count=1
function	verifies that ||| verify	count=1
function	different and a ||| different	count=1
function	yaml return a list ||| load list	count=1
class	an anti ||| clc anti	count=1
function	[function_1] [function_2] ||| alert policy [function_1] [function_2]	count=1
function	[function_1] elb ||| [function_1] [function_2]	count=1
function	of the six ||| get six	count=2
arg	code and changed ||| changed req	count=1
arg	remove a user ||| cursor user	count=1
module	based on mode args ||| network nxos	count=1
function	run when ||| on	count=1
arg	matching containers that are ||| manager containers count	count=1
function	the hosts given in ||| hosts	count=1
function	need to be removed ||| remote target ids to remove	count=1
function_arg	[function_1] interface args ||| [function_1] [arg_2]	count=6
arg	goes through each bridge ||| _bridgemems	count=1
function	fetch a file from ||| fetch file	count=7
module	updates from subscription-manager ||| module_utils	count=1
class	from the module ||| ansible module	count=1
function	and the updated ||| updated	count=1
class	the locale module to ||| ansible module	count=1
arg	of pip command ||| module pip chdir	count=1
module	if the ||| modules system	count=2
function	[function_1] ami ||| [function_2] [function_1]	count=4
function	it to the destination ||| get	count=1
arg	remote branch ||| module dest remote	count=1
function_arg	[function_1] sensible host ||| [arg_2] [function_1]	count=1
module	initialized ||| connection	count=1
class	container ||| container management	count=4
class	the main code path ||| clc load balancer	count=1
arg	newgroup ||| newgroup	count=1
class	the collector ||| collector	count=1
module	all subscribed ||| module_utils	count=1
module	mode args ||| network nxos	count=1
module	to linode ||| linode	count=1
arg	the modify_module() function ||| module_name module_args task_vars	count=1
arg	a tag in the ||| tag	count=1
class	using ||| cli	count=1
module	to ||| plugins connection	count=22
class	code path and handle ||| policy	count=1
function	dict of ||| dict	count=2
module	for ||| modules	count=56
module	status for [module_2] ||| [module_1] [module_2] vmware power state	count=1
function	branch ||| branch	count=2
module	order object for ||| modules cloud	count=1
module	and new ttl ||| cloud google	count=1
function	tags to a boto3 ||| boto3	count=1
class	code ||| clc load balancer	count=2
module	ami for ||| modules cloud	count=1
module	exist [module_1] [module_2] ||| [module_1] [module_2]	count=4
function	list of subnets ||| subnets	count=1
function	need to be removed ||| remote target ids to	count=1
function	the proxy ||| proxy	count=1
arg	be fulfilled or fail ||| module ec2 spot_requests count	count=1
arg	data out ||| remote_path data	count=1
function	installed version ||| version	count=3
class	sources ||| sources	count=2
function_arg	[function_1] module if ||| [arg_2] [function_1]	count=1
function	to compare the json ||| compare	count=1
arg	explanation of ||| explanation	count=1
module_class	[module_1] signing ||| [module_1] certificate [class_2]	count=1
module	of instances for ||| modules cloud google	count=1
function	is used to schedule ||| schedule host	count=1
function	sends configuration ||| configure	count=1
module	from subscription-manager ||| modules packaging	count=1
arg	magic wake-on-lan packet ||| module mac broadcast port	count=1
function	to parse it ||| parse	count=1
function	the options_vars ||| options	count=1
function	boto library supports ||| boto supports volume	count=1
module	receive updates from subscription-manager ||| packaging	count=1
class	code path and ||| load	count=1
function_arg	[function_1] [arg_2] ||| [function_1] exists sefcontext [arg_2]	count=4
function	targets ||| targets	count=4
function	clc server [function_2] ||| [function_2] [function_1]	count=2
function	checks ||| check	count=4
module	download the logicmonitor ||| modules monitoring	count=2
arg	within the play_context object ||| play_context all_vars	count=1
function	role or [function_2] ||| [function_1] [function_2]	count=3
module	rhsm ||| modules packaging os	count=1
function	selinux ||| semanage	count=1
function	[function_1] by the ||| [function_1] [function_2]	count=1
arg	a tag [arg_2] ||| [arg_2] [arg_1]	count=4
function	mount targets ||| mount targets	count=2
arg	vars_cache for [arg_2] ||| [arg_2] [arg_1]	count=2
function	[function_1] info ||| [function_2] [function_1]	count=5
arg	name is none ||| content vimtype name	count=4
arg	by name ||| name	count=1
arg	two dictionaries ||| dict1 dict2 by_key	count=1
function	return an object ||| get obj	count=2
function	a file from ||| file	count=8
function	return any ||| get deployed	count=2
class	the galaxy api ||| galaxy	count=1
module	its request_spot_instances() method for ||| modules	count=1
module	if the ||| modules cloud	count=1
function_arg	[function_1] local ||| [arg_2] [function_1]	count=12
function	for module error title ||| title from exception	count=1
class	executing ||| action base	count=1
function	returns the correct ||| get	count=1
module	main code path and ||| modules	count=3
function	associated [function_2] ||| [function_1] [function_2]	count=3
class	the device supports multiplexing ||| connection	count=1
function	to preserve spaces ||| parse params	count=1
function	modify ||| modify	count=4
function	downtime for all services ||| servicegroup svc downtime	count=1
function	to compare ||| compare get	count=1
module	synchronize all ||| modules	count=1
function	keys at ||| host keys	count=1
function	lun ||| lun	count=4
function	device mapping from ||| device mapping	count=4
module	[module_1] domain ||| [module_2] [module_1]	count=2
module	if the device ||| plugins connection	count=1
arg	folder to cloud files ||| cf folder container ttl	count=1
function	(if the error did ||| error lines	count=1
arg	[arg_1] task ||| [arg_2] [arg_1]	count=5
function	call to setfacl ||| set user facl	count=1
function	the alert ||| alert	count=9
function	the ||| create	count=2
module	new ||| modules cloud google	count=2
arg	the existence [arg_2] ||| [arg_2] [arg_1]	count=4
function	clb ||| rax clb	count=1
function_arg	[function_1] object ||| [arg_2] [function_1]	count=2
module	a ||| web_infrastructure	count=1
class	all subscribed channels ||| rhsm	count=1
function	a file ||| file	count=21
class	and handle ||| firewall policy	count=1
function	parse it ||| parse	count=1
function_arg	[function_1] the status ||| [function_1] client stream_name [arg_2]	count=1
function	new [function] bottom ||| save [function]	count=1
function	removed from ||| absent	count=1
module	a container ||| modules cloud	count=1
function	a path is ||| login path	count=3
function	on ||| on play	count=1
function	is a class ||| redirect handler	count=1
arg	vmid = -1 returns ||| vmid	count=1
function	the machine via the ||| create	count=1
class	returns a json collector ||| logic monitor	count=2
function_arg	[function_1] the module ||| [arg_2] [function_1]	count=5
arg	from group_vars/<groupname> and host_vars/<hostname> ||| host	count=1
arg	vars sent through ||| vars play	count=1
function	[function_1] password from ||| [function_2] [function_1]	count=3
class	that [class] ran the ||| [class]	count=1
module	string for user ||| modules database postgresql	count=1
function	splits ||| split name	count=1
function	the main ||| main	count=8
class	the hostgroup ||| hostgroup	count=1
module	remove ||| modules cloud profitbricks	count=1
function	path of the lease ||| get dhcp lease	count=1
module	an [module_2] ||| [module_2] [module_1]	count=2
class	execute the ||| firewall	count=1
function	end of a string ||| from end	count=1
function	[function_1] tags ||| [function_1] [function_2]	count=1
module	execute the ||| modules	count=4
class	previously ||| rhn	count=1
arg	in ||| a	count=1
function	json request message ||| request	count=1
function	filename from ||| filename from	count=2
arg	module parameters ||| module secgroup	count=1
function	return a list of ||| get	count=1
function	returns the variables ||| get	count=1
arg	remote path ||| path sudoable	count=1
function_arg	add nodes [arg_2] ||| [arg_2] [function_1]	count=2
module	machine via the ||| cloud	count=1
function	via ||| create	count=1
module	the ||| os	count=2
arg	a folder to cloud ||| cf folder	count=1
function	[function_1] domain ||| [function_1] [function_2]	count=3
module	exist returns a ||| modules	count=1
module	exists or all ||| amazon	count=1
module	return results ||| module_utils	count=3
module	value of [module] authorization header ||| [module]	count=1
function	matching ||| match	count=1
function	removes mount [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] ports on ||| [function_2] [function_1]	count=3
function	[function_1] hipchat v2 ||| [function_1] [function_2]	count=1
arg	host [arg_2] ||| [arg_2] [arg_1]	count=1
function	attributes of a server ||| get server	count=1
arg	be a pattern try ||| host_pattern host_data	count=1
module	supports multiplexing ||| plugins connection	count=1
function	[function_1] host ||| [function_2] [function_1]	count=6
function	tuple if ||| tuple	count=1
arg	server ||| datacenter_id server_id	count=1
module	main code path and ||| centurylink	count=3
function	the certificate ||| certificate tokens	count=1
function	the file ||| from file	count=1
module	record a collection of ||| modules cloud docker	count=1
arg	for idempotency using ||| module cli	count=3
function	[function_1] pubkey ||| [function_1] [function_2]	count=1
module	for the [module_2] ||| [module_1] [module_2]	count=16
module	the host ||| connection	count=1
function	of a [function_2] ||| [function_2] [function_1]	count=4
function	the latest [function_2] ||| [function_1] [function_2]	count=1
function	executes ||| run cli	count=14
function	it (if the error ||| error lines from	count=1
function	lists the roles ||| execute list	count=1
function	if temporary [function_2] ||| [function_1] [function_2]	count=1
module	execute the main ||| cloud	count=3
arg	datacenter and ||| location firewall_policy_id firewall_dict	count=1
arg	datacenter by ||| datacenter lookup_group	count=1
function	from security ||| from	count=1
module	request_spot_instances() method for example ||| modules cloud amazon	count=1
arg	git ||| module git_path	count=1
module	check ||| database mongodb	count=2
function	already has and the ||| has database	count=1
function	used to schedule ||| schedule host	count=1
class	[class] to ||| [class]	count=1
arg	services in a particular ||| minutes	count=1
arg	arg is present ||| arg_port	count=1
module	or none ||| cloud amazon	count=1
arg	finds ||| want_private	count=1
function	zone in the ||| zone	count=1
module	method for example the ||| modules	count=1
module	to the destination ||| web_infrastructure	count=1
function	lists the [function_2] ||| [function_1] [function_2]	count=1
function	is different and a ||| different	count=1
function	fuzziness in new ||| new	count=1
arg	or pacman -si output ||| pacman_output	count=1
class	the main code ||| clc firewall	count=1
function	[function_1] v1 server ||| [function_1] [function_2]	count=1
module	a ||| cloud google	count=1
function	of binds ||| image binds	count=1
class	host to ||| host	count=1
class	process ||| clc anti affinity policy	count=1
function	keys of each ||| get	count=1
function	the command prompt and ||| handle prompt	count=1
function	[function_1] name field ||| [function_2] [function_1]	count=2
function	target state [function_2] ||| [function_2] aws [function_1]	count=1
module	synchronize ||| modules packaging os	count=2
module	start ||| modules cloud misc	count=2
arg	remote ||| module dest remote	count=1
arg	remove a user returns ||| user	count=1
class	main code path and ||| clc firewall	count=1
function	handle ||| process	count=3
arg	newgroup into ||| newgroup	count=1
function	read [function_2] ||| [function_2] [function_1]	count=8
arg	ec2 instance and ||| ec2 module	count=1
module	from [module_2] ||| [module_1] [module_2]	count=4
function	alias if it ||| alias	count=1
function	need to ||| target ids to	count=1
module	string for user ||| modules	count=1
function	autoscaling ||| autoscaling params	count=1
function	to import a role ||| import	count=1
arg	using the ||| cli	count=3
module	lxd ||| plugins	count=1
function	code from the proxy ||| validate proxy	count=1
function	downtime for all services ||| host svc downtime	count=1
function	connection close has ||| close shell	count=1
function	when we can not ||| on	count=1
function	a privileges ||| privileges	count=1
function	terminate the connection ||| close	count=7
function	action the ||| action	count=1
function	[function_1] create is ||| [function_1] [function_2]	count=2
module	install a ||| cloud amazon	count=1
function	different [function_2] ||| [function_2] [function_1]	count=1
function_arg	[function_1] ansible ||| [function_1] [arg_2]	count=3
function	alert ||| alert	count=9
function	if the system state ||| system state	count=1
module	the amazon tag format ||| modules cloud amazon	count=1
module	handle the ||| modules cloud	count=3
function	a different ||| diff	count=1
function	id by ||| id by	count=1
arg	a datacenter ||| location	count=1
module	numerical ||| modules network nxos	count=1
function	return the name of ||| get	count=1
function	[function_1] cache time ||| [function_2] [function_1]	count=5
arg	rest api to ||| module server_params	count=1
function	set sensible defaults ||| reset	count=1
arg	given pattern according ||| pattern	count=1
function	the galaxy ||| galaxy	count=1
function	preserve spaces ||| parse params	count=1
module	connection nothing ||| plugins	count=6
arg	single base64-encoded ||| as_list strict_mode preserve_rc	count=1
function_arg	be [function_1] [arg_2] ||| [function_1] lockstep hosts [arg_2]	count=3
module	on success update the ||| modules cloud	count=1
function	a temporary path ||| make tmp path	count=2
module	write it ||| web_infrastructure	count=1
function	disables the ||| disable	count=1
class	execute the main code ||| load balancer	count=1
function_arg	send message [arg_2] ||| [function_1] [arg_2]	count=1
function	path is ||| login path	count=3
arg	[arg] regular ||| attr value [arg]	count=2
function	initial data to ||| initial data	count=1
arg	[arg_1] [arg_2] ||| auth header [arg_1] [arg_2]	count=8
arg	call the clc ||| clc	count=1
class	the shell command ||| timezone	count=1
function	bind ||| bind	count=1
function	a proxy ||| proxy	count=1
function	newlines at the ||| newlines	count=1
function	execute the main ||| process	count=3
module	for the pool ||| modules	count=1
module	all ||| module_utils	count=1
function	check if ||| check	count=1
arg	module data out ||| data	count=1
function	host key ||| parse host	count=1
module	a list ||| modules cloud	count=3
function_arg	[function_1] value for ||| [function_1] key [arg_2]	count=1
function	is a class factory ||| handler factory	count=1
function	deletes [function_2] ||| [function_2] [function_1]	count=1
function	function qualifier as a ||| qualifier	count=1
function	wait ||| wait until status	count=1
arg	dict_a in ||| dict_a	count=1
function	add nodes ||| add lbpool nodes	count=1
function	distribution ||| distribution	count=1
function	connect to the ||| connect	count=3
module	by ||| cloud google	count=1
arg	the pool on ||| lb_id pool_id	count=1
function	library supports encryption of ||| supports volume encryption	count=1
function	list of clc ||| clc	count=3
function	change ||| change	count=3
function	of the module ||| configure module	count=1
arg	cert_file remains valid ||| cert_file	count=1
arg	iterator so ||| enabled	count=1
function	of binds to ||| binds	count=1
arg	via name ||| name	count=1
function_arg	[function_1] provided lb ||| [function_1] [arg_2]	count=4
function	[function_1] datacenter ||| [function_2] [function_1]	count=2
module	reach ||| openstack	count=1
function	installer ||| get installer	count=1
function	a noop [function] ||| get [function]	count=3
class	about the ||| net	count=1
function	of ||| sync	count=1
function	remote-info output and get ||| get	count=1
function	which ||| inventory	count=1
arg	in ||| module	count=10
function_arg	domain [arg_2] ||| [function_1] [arg_2]	count=2
function	returns the name ||| link name	count=1
function_arg	[function_1] [arg_2] ||| [function_1] module [arg_2]	count=19
arg	folder to cloud files ||| folder container ttl	count=1
function	remote checksum given ||| remote checksum	count=1
function	remove ||| remove	count=7
function	the installed version ||| local version	count=1
module	path ||| modules cloud	count=3
function	convert array of binds ||| binds	count=1
function	the value associated ||| value	count=1
function	find a ||| find server	count=1
function	security group [function_1] [function_2] names ||| security group [function_1] [function_2] names	count=1
function	name of the ||| get link name	count=1
class	that ||| manager	count=1
module	a previously registered ||| modules	count=1
arg	status args ||| client wait_timeout nat_gateway_id status	count=1
function	[function_1] the cluster ||| [function_1] [function_2]	count=1
arg	or cpu of ||| server_id cpu	count=1
module	definition ||| modules system	count=1
function	assumes the branch ||| branch	count=1
function	[function_1] cache ||| [function_1] [function_2]	count=5
function	policy is ||| policy	count=1
arg	memory or cpu of ||| server_id cpu	count=1
module	for a group ||| modules cloud amazon	count=2
function	the group that matches ||| matching	count=1
function	creates a dict with ||| dict	count=1
arg	host to that ||| host	count=1
function	[function_1] service string ||| [function_1] [function_2]	count=1
class	by when using ||| cli	count=1
function	the certificate ||| ssh certificate	count=1
module_class	[module_1] collector ||| [class_2] [module_1]	count=1
module	check if ||| modules database mongodb	count=1
function	post validation of ||| post validate	count=1
function	resource ||| different resource	count=1
class	alert ||| clc modify server	count=1
function	helper method to compare ||| compare	count=1
function	(if the error did ||| error lines from	count=1
arg	that they desire ||| db privs	count=1
module	of [module] authorization ||| [module]	count=1
function	changed ||| changed	count=1
function	initial data ||| initial data	count=1
module	for server default ||| modules net_tools	count=1
class	remotely ||| cloud watch event rule manager	count=2
function	the include line ||| preprocess include	count=1
function	to find the ||| find device	count=1
function	validation ||| validate params	count=4
arg	timeout ||| timeout	count=1
function	[function_1] instance ||| [function_1] [function_2]	count=1
arg	[arg] executor ||| [arg]	count=1
function_arg	[function_1] particular service ||| [arg_2] [function_1]	count=4
function	create new ||| create	count=2
module	[module_1] for the ||| [module_1] [module_2]	count=3
arg	[arg_1] group ||| [arg_2] [arg_1]	count=6
function	on ||| playbook on	count=1
function_arg	provisioning [function_1] [arg_2] ||| provisioning [function_1] [arg_2]	count=1
function	in new [function_2] ||| [function_2] [function_1]	count=1
function	proxy protocol enabled ||| get proxy protocol	count=1
class	and handle ||| balancer	count=1
arg	not be templated during ||| value templar	count=1
module	and handle the ||| cloud	count=3
arg	name/position where a yaml ||| file_name show_content	count=1
arg	and key ||| key	count=1
function	read a [function_2] ||| [function_2] [function_1]	count=8
function	download ||| download	count=1
module	from all subscribed ||| module_utils	count=1
function	associate the alert ||| alert	count=1
function	data matches aws ||| matches aws	count=2
function_arg	the type [arg_2] ||| [function_1] [arg_2]	count=2
arg	[arg_1] vpc ||| [arg_2] [arg_1]	count=4
function	as a 4- or ||| as	count=1
arg	value in ||| value	count=1
function	items in ||| items	count=1
arg	[arg_1] and key ||| [arg_2] [arg_1]	count=6
arg	of data ||| data hash_func	count=1
function	vault [function_2] ||| [function_2] [function_1]	count=7
arg	specified and return ||| options	count=1
arg	parameters ||| params	count=1
arg	service ||| services	count=3
function	type ||| interface type	count=2
class	ensures ||| alert policy	count=1
function	of strings with ||| get	count=1
module	mysql variable to a ||| modules database mysql	count=1
function_arg	checks that [arg_2] ||| [arg_2] [function_1]	count=1
arg	git ||| git_path module	count=1
function	file to the specified ||| file	count=2
function	[function_1] event to ||| [function_2] [function_1]	count=3
function	dict keys and values ||| json dict	count=1
function	policy exists ||| policy exists	count=2
function	targets that need to ||| remote target ids to remove	count=1
function	a custom ||| update custom	count=1
function	passed in port ||| port	count=1
function	present on a different ||| on diff	count=1
function	retrieves block device mapping ||| get block device mapping	count=2
module_class	for getting [class_2] ||| [module_1] centurylink clc [class_2]	count=1
function	the [function] ||| [function] from	count=1
module	return details about the ||| netapp	count=1
module	for a group of ||| modules cloud amazon	count=1
arg	task vars sent ||| vars play	count=1
module	path and handle ||| modules cloud	count=3
function_arg	application from [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	of [arg_2] ||| [function_1] inventory basename [arg_2]	count=3
module	mysql variable ||| database mysql	count=1
class	execute ||| balancer	count=1
function	the policy id from ||| get policy id from	count=1
module	the given locale ||| modules system	count=1
class	shred ||| vault editor	count=1
module	set all of the ||| amazon	count=1
class	and handle ||| clc load	count=1
class	dictionary or the value ||| ansible cloud stack	count=1
function	sanitize ||| sanitize	count=1
arg	package is [arg] ||| [arg]	count=1
function	create a [function_2] ||| azure rmmodule base [function_1] [function_2] resource_group location name allocation_method	count=1
function	and [function_2] ||| [function_2] [function_1]	count=5
class	for ||| rhsm	count=1
arg	task if they ||| task	count=1
module	correct length if ||| cloud	count=1
function	in version ||| version	count=1
function	id of the ||| id by	count=2
arg	a user returns ||| cursor user	count=1
class	the ||| clc firewall	count=2
arg	mount targets and ||| targets	count=1
arg	commands to ||| commands	count=3
class	execute ||| load	count=1
function	the lambda function alias ||| lambda alias	count=1
function	log messages ||| heuristic log	count=1
module	elasticache parameter group to ||| amazon	count=1
class	handle the ||| clc firewall	count=1
function	output current properties information ||| site facts	count=3
arg	execute the script and ||| vault_password_file loader	count=1
function	path and handle ||| process	count=3
class	ensures ||| clc modify server	count=2
module	pip freeze pip ||| packaging language	count=1
function	set on the ||| set host overrides	count=1
module	returns the major and ||| modules	count=1
class	<name>01 ||| azure rmmodule base	count=1
function_arg	present [arg_2] ||| [arg_2] [function_1]	count=2
function	days ||| days	count=1
function	end of a string ||| end	count=1
arg	[arg_1] is none ||| [arg_2] [arg_1]	count=16
function	filename from the ||| filename from	count=2
function_arg	[function_1] the server ||| [function_1] [arg_2]	count=10
function	updates nodes to the ||| set loadbalancernodes	count=1
function_arg	[function_1] pause ||| [arg_2] [function_1]	count=1
function	find a [function_2] ||| [function_1] [function_2]	count=4
function	id prefix ||| prefix	count=1
function	include line ||| preprocess include	count=1
function	a dict [function_2] ||| [function_2] [function_1]	count=2
function	and return a temporary ||| tmp	count=1
arg	and [arg] ||| username [arg]	count=3
module	receive updates ||| modules	count=1
class	main code path ||| firewall	count=1
arg	for a particular service ||| host services minutes	count=1
function	a text ||| text	count=1
module	the system to ||| modules packaging	count=1
function	start or stop the ||| start stop	count=1
function	downtime for ||| downtime	count=4
module	receive ||| packaging os	count=2
function	object and which actions ||| selector	count=2
class	lxd nothing ||| connection	count=1
arg	host and key are ||| key	count=1
function	[function] login window ||| update system [function]	count=1
arg	folder ||| cf folder container ttl	count=1
function	[function_1] alert policies ||| [function_2] [function_1]	count=1
function	revision [function_2] ||| [function_2] remote [function_1]	count=1
module	ami for ||| modules	count=1
function	compare the ||| compare	count=3
function	be one of ||| path	count=1
function	id of the ||| id	count=1
module	if the device supports ||| connection	count=1
function	dictionary of ||| get	count=1
arg	a value ||| value	count=1
function	a class ||| redirect handler	count=1
arg	server ||| server alert_policy_id	count=1
module	the ||| storage	count=1
function	add glob ||| add glob	count=2
module	package ||| packaging os	count=3
module	from ||| modules packaging os	count=2
function	key [function_2] ||| [function_2] [function_1]	count=4
arg	provided lb ||| lb	count=1
class	about the ||| app cdotlun	count=1
arg	dns [arg_2] ||| [arg_1] [arg_2]	count=1
function	clc server objects ||| clc	count=1
module_class	new dimension data ||| dimensiondata dimension data	count=1
function	backend service from ||| backend service	count=2
class	updates from subscription-manager ||| rhsm	count=2
module	lxc nothing to ||| connection	count=1
class	if ||| connection	count=1
function	runs handlers on ||| run handlers	count=1
function	resource [function_2] ||| [function_2] [function_1]	count=1
class	and handle ||| clc firewall	count=1
function	[function_1] alias if ||| [function_1] [function_2]	count=3
module	output into a ||| plugins	count=1
module	from the docker ||| modules cloud docker	count=2
arg	the server is ||| server server_params	count=1
arg	or ||| module	count=6
function	in the file ||| lines from file	count=1
function	number of newlines ||| count newlines	count=1
function	all roles in ||| compile roles	count=1
function_arg	the loop [arg_2] ||| [arg_2] [function_1]	count=3
module_class	return [class_2] ||| [module_1] [class_2]	count=4
class	that may change ||| big ip snat pool manager	count=1
arg	the play_context object ||| play_context all_vars	count=2
function	the remote user ||| remote user	count=1
module	spaces ||| plugins	count=1
function	start the machine ||| create	count=1
module	the machine via the ||| misc	count=1
class	to the host ||| connection base	count=1
function	retrieve the attributes of ||| get	count=1
class	execute the main ||| firewall	count=1
class	by [class] ||| base [class]	count=1
module	run ||| modules system	count=1
function	if the configuration is ||| config	count=1
arg	of follow_redirects [arg_2] ||| [arg_1] [arg_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] key [arg_2]	count=6
function	hash ||| hash	count=2
module	start the ||| cloud misc	count=1
module	create or delete an ||| cloud	count=1
function	the hostname and port ||| fqdn and port	count=1
function	of a role ||| get vars	count=1
arg	[arg_1] service ||| [arg_2] [arg_1]	count=3
function	group of spot ||| await spot	count=1
class	swupd ||| swupd	count=1
arg	in the vars_cache for ||| varname	count=1
function	given firewall ||| firewall	count=1
arg	is templated ||| value templar	count=1
function	run update or ||| package update	count=1
class	main ||| load	count=1
function	[function_1] uuid ||| [function_1] [function_2] w	count=2
function	them evaluate as such ||| evaluate conditional	count=1
module_class	lxc [class_2] ||| [module_1] [class_2]	count=1
function	when executing ||| compute	count=1
function	alert policy is present ||| alert policy is present	count=1
function	subnets ||| find subnets	count=1
function	them [function_2] ||| [function_2] [function_1]	count=1
function	vty shell ||| close shell	count=1
arg	of the entity ||| entity	count=2
module	amazon ||| amazon	count=8
module	a system from all ||| module_utils	count=1
function	is present ||| cert present	count=1
module	receive ||| module_utils	count=1
function	new [function_2] ||| [function_2] [function_1]	count=1
arg	changes python [arg] into ||| [arg]	count=1
function	group of spot ||| spot	count=1
class	and ||| module	count=2
function	[function_1] currently installed ||| [function_2] [function_1]	count=1
arg	module ansible module ||| module ec2 instance_ids	count=1
function	of a role ||| get	count=1
arg	the repository already ||| repodata overwrite_multiple	count=1
function	check supplied key is ||| sanity check	count=1
function	schedule downtime for ||| schedule svc downtime	count=1
module	nothing to do ||| plugins connection	count=8
function	a dict from ||| dict from	count=1
arg	module data ||| data	count=1
arg	[arg_1] service ||| [arg_1] [arg_2]	count=3
function	name ||| link name	count=1
arg	uploads a folder ||| cf folder container	count=1
function	create a ||| create clc	count=1
function_arg	[function_1] number in ||| [arg_2] [function_1]	count=1
arg	it differs from the ||| conn name values	count=1
function_arg	[function_1] pool ||| [function_1] [arg_2]	count=1
function	ansible command ||| command	count=1
function	determine if ||| has	count=1
arg	url and store ||| module url	count=1
function	encryption of ||| volume encryption	count=1
function	this is a class ||| redirect handler	count=1
module	see if a ||| cloud	count=1
class	server based ||| modify server	count=2
function	indicating if the configuration ||| config	count=1
module	iterate over a ||| plugins	count=1
function	(if the error ||| error lines	count=1
function	[function_1] v2 server ||| [function_2] [function_1]	count=1
function	the public ip available ||| public ip	count=1
function	the requested values ||| argument values	count=1
function	hostname and [function_2] ||| [function_1] [function_2]	count=1
function	downtime for ||| host downtime	count=1
function	the boto3 api ||| api	count=1
arg	the timeout ||| timeout	count=1
function	path ||| process	count=3
class	to retry ||| cloud retry	count=1
arg	specified and ||| options	count=1
arg	make verbose human readable ||| a indent	count=1
module	the power [module] ||| [module] cloud	count=1
arg	the pool ||| alias location lb_id pool_id	count=1
module	main code path ||| modules cloud	count=3
function	compatibility between the ||| compatibility	count=1
function	if the ||| close	count=1
function	remote user ||| remote user	count=1
function	ssh keys at the ||| ssh host keys	count=1
function	need to be ||| target ids to	count=1
function	parse role ||| parse role	count=1
function	list of clc server ||| clc	count=1
class	the ||| cdotlun	count=1
module	input ||| cloud google	count=1
function	vty shell if the ||| shell	count=1
class	return details about ||| net	count=1
function	key ||| make rule key	count=2
arg	via the given vmid ||| vmid	count=1
class	task if ||| task	count=1
function	[function_1] list ||| [function_2] [function_1]	count=4
class	to ||| acmeclient	count=1
class	the system as directed ||| rhsm	count=1
module	initialized with ||| plugins connection	count=1
module	2 ||| modules packaging os	count=1
arg	events to monitor ||| fileobj events	count=1
module	registration ||| module_utils	count=1
function	for module error title ||| failure title	count=1
class	the ||| base	count=1
class	from all subscribed ||| rhsm	count=1
function	return a parse ||| parse	count=1
class	path and handle the ||| load	count=1
function	lambda function [function_2] ||| [function_1] [function_2]	count=4
arg	the task if ||| task variables templar	count=1
class	paginated ||| cloud formation service manager	count=1
function	a boto3 ||| boto3	count=1
function	configuration is different ||| different config	count=1
function	[function_1] config file ||| [function_2] [function_1]	count=1
module	does not already exist ||| modules source_control	count=1
function_arg	[function_1] or ||| [arg_2] [function_1]	count=9
function_arg	new servers in ||| servers module	count=1
module	the main method ||| modules	count=1
arg	keys and values specified ||| cf	count=1
function	them into the ||| tags in	count=1
arg	a piece ||| vaulttext filename	count=1
module	set all of the ||| cloud amazon	count=1
arg	and api_key ||| api_key	count=1
arg	given facts for ||| facts	count=2
function_arg	takes ansible module ||| create annotation module	count=1
function	get the ||| get local	count=1
module	path and handle ||| cloud	count=3
function	to write a byte ||| write	count=1
module	length if ||| modules cloud	count=1
arg	the playbook specifies ||| terms variables	count=1
class	anti affinity ||| clc anti affinity	count=2
function	of subnets each identified ||| find subnets	count=1
function	add the [function_2] ||| [function_2] [function_1]	count=3
arg	in no_log_strings [arg_2] ||| [arg_2] [arg_1]	count=2
arg	from value if value ||| value	count=1
function	line preceding [function] ||| get [function]	count=1
arg	and values specified ||| cf container src	count=1
function	recreate ||| recreate	count=1
function	look for libcloud ||| libcloud	count=1
module	machine via the ||| modules cloud	count=1
class	find ||| action base	count=1
function	alert policy [function_2] ||| [function_2] [function_1]	count=12
function	glob ||| glob to array	count=2
arg	set of events to ||| fileobj events	count=1
function_arg	[function_1] 2 versions ||| [function_1] [arg_2]	count=3
function	deactivate ||| deactivate	count=1
function	update or ||| update	count=1
function	file from local to ||| file	count=1
class	read ||| lookup module	count=1
class	path and ||| load balancer	count=1
arg	a vpc when ||| module vpc	count=1
function	find a [function_2] ||| [function_2] [function_1]	count=7
function	output and get the ||| get	count=1
function	remote user ||| do remote user	count=2
class	and handle ||| clc firewall policy	count=1
function	of the resources given ||| update resources	count=1
function	run sanity ||| sanity	count=1
function_arg	start of [arg_2] ||| [arg_2] [function_1]	count=1
function	the version [function_2] ||| [function_2] [function_1]	count=6
arg	if [arg] used ||| version connection [arg]	count=1
function	name is ||| name	count=1
class	and synced ||| cloud watch event	count=2
function_arg	[function_1] fail module ||| [arg_2] [function_1]	count=1
arg	keys and values specified ||| cf container	count=1
class	each ||| callback module	count=1
function	[function_1] create ||| [function_1] [function_2]	count=2
arg	given agent using its ||| module service_id	count=1
function	run the any ||| run	count=1
function_arg	security group [function_1] [arg_2] group names are not ||| [function_1] names [arg_2]	count=1
function	(if the error ||| error lines from	count=1
function	new servers ||| servers	count=1
function	send ||| send	count=2
arg	actuall executable ||| executable	count=1
arg	or [arg_2] ||| [arg_1] [arg_2]	count=3
arg	done by ||| ubuntumode	count=1
arg	named module ||| fullname	count=1
function	retrieves the anti affinity ||| anti affinity	count=1
function_arg	security [function_1] [arg_2] names are not unique ||| [function_1] names [arg_2]	count=2
function	run sanity checks that ||| sanity check	count=1
function	main code path ||| process	count=3
module	it ||| modules web_infrastructure	count=2
function	associated [function_2] ||| [function_2] [function_1]	count=3
class	execute the main code ||| clc firewall policy	count=1
function	in new style ||| new style args	count=2
function	[function_1] rule in ||| [function_1] matching [function_2]	count=1
function	if changes ||| system state change	count=1
function	list of resource tags ||| tag list	count=1
function	[function] bottom ||| save ssh [function]	count=1
function	different ||| different	count=1
function	[function_1] info entry ||| [function_2] [function_1]	count=4
class	evaluates an existing network ||| network	count=1
class	code path and handle ||| firewall	count=1
function	reads results off the ||| results	count=1
function_arg	[function_1] iterator ||| [function_1] lockstep hosts [arg_2]	count=3
arg	remote branch version this ||| git_path module dest remote	count=1
function	ip ||| ip	count=3
arg	specific ||| vault_password	count=2
class	details ||| net	count=1
function	lists [function_2] ||| [function_1] [function_2]	count=1
module	we've been ||| connection	count=1
function	close the connection nothing ||| close	count=1
function	on ||| exec	count=11
function	fetch list of clc ||| clc	count=3
class	the lxc nothing to ||| connection	count=1
arg	vm determined by the ||| vm state force	count=1
function	batches ||| batches	count=1
function	output and get ||| get	count=1
arg	url and store in ||| url	count=1
function	a temporary path on ||| make tmp path	count=1
function	of getting [function] aside from ||| [function]	count=1
class	details about ||| app	count=1
arg	a user returns true ||| cursor user	count=1
function	map to attributes for ||| attributes	count=1
function	[function_1] server ||| [function_1] [function_2]	count=3
function	[function_1] instances ||| [function_2] [function_1]	count=1
function	searches for roles ||| execute search	count=1
function_arg	security group [function_1] [arg_2] names are not unique ||| [function_1] [arg_2]	count=2
module	metadata [module_2] ||| [module_2] cloud [module_1]	count=1
function	a policy ||| policy	count=2
class	start the ||| virt	count=1
module	[module_1] amazon tag ||| [module_1] [module_2]	count=2
function_arg	servers [arg_2] ||| [arg_2] [function_1]	count=3
function	wait for the the ||| wait for status	count=1
class	this [class] belongs ||| [class]	count=1
function	enables notifications ||| enable svc notifications	count=1
function	when a task is ||| runner on	count=1
function	as a group name ||| group name	count=1
module	domain ||| google	count=2
function	when ||| runner on	count=1
function	on the name ||| name	count=2
module	main code path ||| cloud	count=3
function	convert the ||| convert	count=1
arg	ansible ||| module	count=2
function	object ||| serialize obj	count=1
function	loop ||| run loop	count=1
function	post validation of vars ||| post validate environment	count=1
module	metadata for a single ||| modules cloud rackspace	count=1
arg	with a registered ||| fileobj	count=1
function	get the [function_2] ||| [function_1] docker [function_2]	count=1
module	display [module] user ||| [module]	count=1
class	task with ||| task executor	count=1
function	[function] server ||| get servers from [function]	count=6
function	already has and ||| has	count=2
function	[function_1] currently installed ||| [function_1] [function_2]	count=1
module	find out if the ||| modules cloud	count=1
function	temporary path on a ||| make tmp path	count=1
module	return details ||| storage	count=1
function	is fresh ||| fresh	count=1
module	idemopotent function to ||| monitoring	count=1
arg	a base64-encoded pkcs12 version ||| module ssh_cert_path	count=1
function	container ||| container	count=1
function	the branch does ||| branch	count=1
module	returns package ||| packaging os	count=1
function_arg	mode [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	to the [arg_2] ||| [arg_2] [function_1]	count=1
function	the installed overlays ||| overlays	count=1
module	a url ||| module_utils	count=1
function	of spot ||| await spot	count=1
arg	new or modifies ||| module vpc_conn	count=2
function	import certificate ||| import cert	count=1
module	from cloud files to ||| modules cloud	count=1
module	for ||| modules network	count=11
function	service the instance groups ||| service	count=1
arg	sensible host and ||| sshkeygen	count=1
module	in the ||| cloud	count=2
module	do for ||| plugins connection	count=1
function	[function_1] virtual ||| [function_2] [function_1]	count=2
function	of a role or ||| get	count=1
function	complete if [function_2] ||| [function_2] requests [function_1]	count=9
function	of ||| get vars	count=1
function	logic to get ||| get	count=2
function	to compare ||| compare props	count=1
module	details about the ||| modules storage netapp	count=1
arg	api_key ||| api_key	count=1
function	may have been split ||| split	count=1
function	and the updated cache ||| updated cache	count=1
class	field attributes for this ||| base	count=1
function	returns a ||| get	count=2
module	global mysql variable to ||| database mysql	count=1
module	only needed for ||| modules packaging	count=1
function	installer [function_2] ||| [function_2] [function_1]	count=1
function	present but disabled and ||| disabled	count=1
arg	file context mapping definition ||| module result target ftype	count=1
function	a specific type example ||| type	count=1
module	a global mysql ||| database mysql	count=1
class	process ||| clc server	count=1
module	which matches ||| executor	count=1
function	newlines at the end ||| newlines from end	count=1
function	init and update ||| update	count=1
arg	a text string :arg ||| encoding errors nonstring	count=1
arg	folder ||| folder container	count=1
function	containing a list ||| collectors	count=1
arg	account ||| account	count=1
function	run the ||| run	count=3
module	main ||| modules	count=4
function	when module ||| split module string	count=2
module	via the given ||| cloud misc	count=1
arg	using ||| module cli	count=3
module	bindings if [module_2] ||| [module_1] [module_2]	count=2
arg	lb ||| lb	count=1
arg	desired ||| timeout cloud	count=1
function_arg	volume [arg_2] ||| [arg_2] [function_1]	count=2
module	as ||| module_utils	count=1
module	the machine via the ||| modules	count=1
function	with ||| with	count=3
module_class	[module_1] [class_2] ||| [module_1] cloud [class_2]	count=1
module	the system ||| module_utils	count=2
module	the dictionary object ||| cloud	count=2
arg	json representation ||| class_name enum_modules	count=1
function	define a guest ||| define	count=1
function	if a path ||| path	count=3
function	group [function] names ||| ec2 security group [function]	count=1
module	docker ||| plugins	count=1
arg	safely split parameter term ||| term	count=1
arg	a digest_method specified by ||| filename algorithm	count=1
arg	in the name parameter ||| name	count=1
class	we've been initialized with ||| connection base	count=1
function	of key [function_2] ||| [function_2] [function_1]	count=4
function	returns a list of ||| get	count=1
function	a custom stat ||| update custom	count=1
function	already has and the ||| has table	count=1
function	a zone by name ||| get zone by name	count=1
arg	vpc when supplied ||| vpc	count=1
module	a previously registered ||| packaging	count=1
function	[function_1] containing host ||| [function_1] [function_2]	count=1
class	implements are ||| manager	count=1
class	on the ansible galaxy ||| galaxy cli	count=1
function	domain ||| domain	count=1
arg	[arg_1] in dict_b ||| [arg_2] [arg_1]	count=1
function	allowed size ||| size	count=1
function	[function_1] name or ||| [function_1] [function_2]	count=3
class	container config returns ||| container	count=1
module	validation ||| cloud amazon	count=2
function	to group list of ||| group list of	count=1
function	[function_1] dict ||| [function_1] [function_2]	count=1
class	which this [class] belongs ||| [class]	count=1
function	unpause the machine with ||| unpause	count=1
function_arg	calculate difference [arg_2] ||| [arg_2] [function_1]	count=1
function	vault password ||| vault password	count=2
function	the end of ||| from end	count=1
function	is in [function_2] ||| [function_2] [function_1]	count=1
function	a command returns ||| run command	count=1
arg	the module parameters ||| module secgroup remotegroup	count=1
function	of spot requests to ||| await spot requests	count=1
function	list of nodes exist ||| ensure lbpool nodes set	count=1
arg	ordered set of commands ||| commands	count=2
arg	[arg_1] key ||| [arg_2] [arg_1]	count=8
module	the system as directed ||| module_utils	count=1
function	to ||| ids to remove	count=1
function	tag options ||| evaluate tags	count=1
module	an ||| modules cloud	count=4
function	[function_1] path ||| [function_2] [function_1]	count=6
module	create ||| cloud google	count=1
arg	host in the ||| host	count=2
function_arg	[function_1] [arg_2] ||| [function_1] server [arg_2]	count=27
function	the repo removes ||| addmodify repo	count=1
class	path and handle ||| policy	count=1
class	ensures ||| clc alert policy	count=1
module	for the pool ||| modules cloud centurylink	count=2
function	the installed overlays ||| sync overlays	count=1
class	if missing ||| host	count=1
function	array of ||| get	count=1
module	new ||| cloud google	count=2
class	is ||| ansible cloud stack	count=1
function	to look for libcloud ||| libcloud	count=1
function	request a new certificate ||| certificate	count=1
arg	entity ||| action entity	count=1
function	galaxy info entry in ||| galaxy info	count=1
module	start the machine ||| modules	count=1
function	[function_1] value ||| [function_2] [function_1]	count=1
function	[function_1] from the ||| [function_2] [function_1]	count=3
function	at the end of ||| end	count=1
function_arg	[function_1] packages ||| [function_1] [arg_2]	count=3
function	to group ||| group	count=1
module	for autoscale group ||| modules	count=1
class	data network module ||| data network module	count=3
arg	base64-encoded pkcs12 version ||| module ssh_cert_path	count=1
function	module code through ||| configure module	count=1
function	clc server objects from ||| from clc	count=1
function	create new virtual machine ||| create virtual machine	count=1
arg	key ||| key	count=5
function	attributes of a ||| get	count=1
arg	in a particular servicegroup ||| servicegroup minutes	count=2
function	failure when ||| failure	count=1
arg	specified [arg] ||| [arg]	count=1
function	fuzziness in new style ||| new style args	count=1
module	[module_1] working ||| [module_1] [module_2]	count=6
function	key [function_2] ||| [function_1] [function_2]	count=4
function	deletes ||| delete	count=4
function	alert ||| add alert	count=1
function_arg	id [arg_2] ||| [arg_2] [function_1]	count=4
function	[function] dicts ||| ansible dict to [function]	count=2
function	exists on the specified ||| exists	count=1
function	repo ||| addmodify repo	count=2
function_arg	changed items [arg_2] ||| [function_1] baselist [arg_2]	count=2
arg	bonus feature vmid ||| vmid	count=1
function	[function_1] play ||| [function_2] [function_1]	count=1
function	snapshots ||| snapshot	count=1
function	to be ||| ids to remove	count=1
class	the ||| clc	count=6
function	on target ||| pubnub	count=1
function	changes are ||| change	count=1
module	the ||| module_utils	count=2
module	return ||| modules cloud profitbricks	count=1
function	header and format ||| format	count=1
function_arg	[function_1] pool on ||| [arg_2] [function_1]	count=1
arg	or return ||| module datacenter	count=1
function_arg	id [function_1] [arg_2] ||| [function_1] [arg_2]	count=2
function	not map to attributes ||| attributes	count=1
function	[function] extra ||| [function] tqm	count=1
module_class	[module_1] [class_2] ||| [module_1] [class_2] role get role	count=1
function	returns ||| run	count=1
module	and handle the ||| modules cloud centurylink	count=3
function	six ||| six	count=1
class	from all ||| rhsm	count=1
class	handle the ||| clc load balancer	count=1
arg	[arg] fact ||| [arg]	count=2
arg	ec2 instance ||| ec2	count=1
module	provided ||| modules cloud centurylink	count=1
function	[function_1] alert policy ||| [function_1] [function_2]	count=5
class	return ||| data loader	count=1
function	updates a ||| update	count=1
function	[function_1] groups ||| [function_2] [function_1]	count=2
arg	host in ||| host	count=2
arg	on the ||| module	count=1
module	all ||| packaging os	count=2
function_arg	containers via [arg_2] ||| [function_1] [arg_2]	count=1
function	pipelining ||| is pipelining	count=1
module	to ||| module_utils	count=1
function	aggregate exists ||| aggr	count=1
function	the state of ||| instance state	count=1
function	error did ||| error	count=1
function	on a different host ||| on diff host	count=1
arg	the play [arg_2] ||| [arg_1] [arg_2]	count=3
function	the library aos-pyez is ||| aos version	count=1
function	a list of host ||| get next	count=1
class	the certificate signing ||| certificate signing	count=2
function_arg	[function_1] commands ||| [function_1] [arg_2]	count=1
function	export if found when ||| get export	count=1
class	from all subscribed channels ||| rhsm	count=1
class	to ||| connection	count=11
arg	[arg_1] current weight ||| [arg_2] [arg_1]	count=4
class	the main ||| clc load balancer	count=1
module_class	[module_1] [class_2] ||| [module_1] action action [class_2]	count=3
arg	of the entity is ||| entity	count=2
function_arg	hostnames [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] hostnames ||| [function_1] [function_2]	count=1
arg	name parameter ||| name	count=1
function_arg	a plugin [arg_2] ||| [arg_2] [function_1]	count=2
arg	or updates [arg_1] [arg_2] fact cache ||| [arg_2] [arg_1]	count=2
module	removing the [module_2] ||| [module_1] [module_2]	count=2
class	and ||| clc firewall policy	count=2
function	file over http ||| push file	count=1
function	[function_1] file to ||| [function_2] [function_1]	count=2
function	starts or stops ||| startstop	count=1
arg	server is updated ||| server	count=1
class	main code path ||| clc load	count=1
module	[module] vpc ||| [module]	count=1
function	[function_1] actual location ||| [function_2] [function_1]	count=5
class	of a ||| lxc	count=1
module	is only needed for ||| modules	count=1
function	balancer ||| balancer	count=2
module	true if the ||| modules	count=1
function	new ||| create	count=1
arg	port and return the ||| port	count=1
arg	be fulfilled or ||| module ec2 spot_requests count	count=1
function	is absent ||| group is absent	count=2
class	executes a haproxy ||| haproxy	count=1
function	when we ||| on missing	count=1
module	[module_1] from cloud ||| [module_1] [module_2]	count=1
function	schedule downtime ||| schedule servicegroup host downtime	count=1
function	determine what branch head ||| get head branch	count=1
function	encryption of ebs volumes ||| encryption	count=1
function	spot ||| spot	count=1
class	the ||| container	count=1
function_arg	to compare [arg_2] ||| [function_1] request with dict [arg_2]	count=1
function	the low level ||| low level	count=2
function	task ||| runner	count=1
arg	via name it appears ||| name	count=1
function	a file obj are ||| file	count=1
function	when module names ||| module string	count=1
arg	for the play ||| play	count=1
module	metadata ||| modules cloud rackspace	count=1
class	aws ||| watch event	count=2
class	a task value ||| task	count=1
arg	security group ||| os_type	count=1
function	role or name field ||| role name	count=1
arg	the status to change ||| status wait_timeout	count=1
function	include line up into ||| preprocess include	count=1
function_arg	[function_1] hosts in ||| [arg_2] [function_1]	count=1
arg	finds a ||| module zone_name want_private	count=1
function	passed to ||| build	count=1
function	cloud dns ||| gcdns	count=1
function	update ||| update	count=14
arg	through each bridge ||| _bridgemems	count=1
function	[function_1] event to ||| [function_1] [function_2]	count=3
module	execute the ||| cloud	count=3
module	the system to ||| os	count=1
function	policy id from ||| get policy id from	count=1
function	action the user ||| action	count=1
module	we've ||| connection	count=1
arg	a particular ||| minutes	count=3
function	associate the alert policy ||| add alert policy	count=1
function	backup of ||| backup	count=1
class	method ||| base	count=1
arg	url returns a valid ||| url	count=1
module	[module_1] a single ||| [module_1] [module_2]	count=2
module	changed false otherwise ||| modules database postgresql	count=1
function	ensures that ||| ensure	count=4
class	to retry ||| retry	count=1
arg	the subscript which may ||| subscript	count=1
class	multiplexing ||| connection	count=1
function	schedule ||| schedule servicegroup	count=2
class	is ||| path importer	count=1
module	request ||| modules web_infrastructure	count=2
arg	a datacenter ||| location firewall_policy_id	count=1
function_arg	[function_1] from local ||| [function_1] [arg_2]	count=27
function	of a file obj ||| file	count=1
function	convert ||| convert	count=1
function	on start of ||| on play start	count=1
function	size ||| size	count=2
arg	google libcloud driver connection ||| module provider get_driver user_agent_product	count=1
module	main code path ||| cloud centurylink	count=3
function	delete ||| fcontext delete	count=2
function	name of ||| get name	count=2
function	module code through the ||| module	count=1
module	nothing to do ||| plugins	count=8
function	of device ||| get dev	count=1
module	for ||| plugins	count=1
function	values and ||| values	count=1
function	destroy [function_2] ||| [function_2] [function_1]	count=5
module	exist [module_1] [module_2] throw error if not ||| [module_1] [module_2]	count=2
function_arg	encrypt [arg_2] ||| [function_1] [arg_2]	count=3
class	add ||| clc load balancer	count=1
arg	cli command on ||| cli	count=7
function	the request ||| process request	count=3
function	parse [function_2] ||| [function_1] [function_2]	count=4
function	fetch the list ||| fetch	count=1
function	self group to is ||| make group	count=1
function	file from lxc ||| file	count=1
function	policy [function_2] ||| [function_1] [function_2]	count=19
function	local rule [function_2] ||| [function_2] [function_1]	count=2
function	fetch a [function_2] ||| [function_1] [function_2]	count=24
arg	path ||| path all_vars follow	count=1
function	[function_1] existing cluster ||| [function_1] [function_2]	count=1
function	write it ||| get	count=1
function_arg	nodes [arg_2] ||| [function_1] [arg_2]	count=1
function	if changes are ||| system state change	count=1
arg	local ||| in_path out_path	count=8
module	if it sees a ||| modules	count=2
function	is in vpc ||| is vpc	count=2
function	with the request ||| request with dict	count=1
function_arg	[function_1] tags ||| [function_1] format [arg_2]	count=7
module	code ||| modules cloud	count=3
class	is ||| ansible module	count=1
module	[module] unix ||| [module]	count=3
function	[function] state ||| [function] modifiable param	count=2
function	return a dictionary ||| dict	count=1
function	requests are ||| for requests	count=3
arg	type definition from ||| proto setype	count=1
function	(if the error did ||| error	count=1
class	code ||| firewall	count=1
module	for example the placement_group ||| modules	count=1
function	of key ||| key	count=1
module	receive updates from subscription-manager ||| os	count=1
function_arg	datacenter [arg_2] ||| [function_1] [arg_2]	count=4
function	from a human ||| human	count=1
module	a previously registered system ||| os	count=1
class	main code path and ||| clc group	count=1
class	main method ||| lxc container	count=1
function	[function_1] plugin ||| [function_1] [function_2]	count=1
function	old-style (action/local_action) ||| old style	count=1
module	return details about ||| modules	count=1
arg	file context mapping definition ||| result target ftype	count=1
arg	recs[ref][key] ||| recs key filter_func	count=1
arg	file object from ||| fileobj	count=1
function	clc [function_2] ||| [function_2] [function_1]	count=37
function	to schedule downtime ||| schedule servicegroup host downtime	count=1
module	lxc nothing to ||| plugins connection	count=1
class	code path ||| clc firewall	count=1
module	[module_1] amazon ||| [module_1] [module_2]	count=20
function	the low ||| low	count=1
module	jail ||| plugins connection	count=3
arg	key is sensible host ||| sshkeygen	count=1
arg	by name ||| module name	count=1
function	loads variables ||| hostgroup vars	count=1
function	system is ||| is	count=1
function	keys of ||| get	count=1
function	true if ||| is	count=2
class	the main code path ||| firewall policy	count=1
function	loop ||| loop	count=1
module	subscribed channels ||| module_utils	count=1
function_arg	[function_1] [arg_2] ||| [function_1] name tags [arg_2]	count=2
class	dictionary ||| stack	count=1
function	a proxy protocol enabled ||| proxy protocol	count=1
function	[function_1] version ||| [function_1] [function_2]	count=8
function	preserve ||| parse params	count=1
function	group to ||| make group	count=1
function	when module names are ||| module string	count=1
class	is ||| six meta path importer	count=1
function	umc ||| umc	count=1
module	power status for a ||| modules cloud vmware	count=1
arg	from b take ||| b	count=1
class	of ||| lxc container management	count=2
module	record a collection ||| modules cloud	count=1
module	needed for special ||| modules packaging	count=1
function	cli ||| cli	count=1
module	execute the main code ||| cloud	count=3
function	contents of a file ||| file	count=1
function	if the alert policy ||| alert policy	count=1
arg	name ||| name module	count=2
function	list of ||| get next	count=1
function	convert the ||| convert host to	count=1
arg	use ssh-keyscan ||| module fqdn port key_type	count=1
module	for a single file ||| modules cloud	count=1
arg	module ansible module ||| module client instance_name state	count=1
class	main code ||| balancer	count=1
arg	given pattern according to ||| pattern	count=1
function	system [function_2] ||| [function_2] [function_1]	count=1
arg	the entity is ||| entity	count=2
arg	checking if the ||| old_parameters new_parameters	count=1
function	which will override those ||| task and variable override	count=1
function	a class factory that ||| handler factory	count=1
function	the state ||| instance state	count=1
arg	uploads a folder ||| folder	count=1
class	module to ||| module	count=1
function	the boot ||| boot	count=1
arg	the git ||| module git_path	count=1
module	execution ||| modules network dellos6	count=2
function	members of the balancer ||| get balancer members	count=1
module	do for docker ||| plugins connection	count=1
arg	values specified in ||| module cf container src	count=1
module	if ||| modules monitoring	count=2
function	new [function] ||| save [function]	count=3
arg	as they relate to ||| comparelist	count=1
module	find ||| cloud openstack	count=1
function	remove unused licenses ||| remove unused licenses	count=2
function	needs a label to ||| label	count=1
function	run when a task ||| runner on	count=1
class	path and ||| policy	count=1
module	command ||| modules	count=1
function_arg	[function_1] if name ||| [function_1] content vimtype [arg_2]	count=2
class	all available [class] ||| [class]	count=2
function	[function] of ||| sysv [function]	count=1
function	request ||| process request	count=3
function	write to [function_2] ||| [function_1] [function_2]	count=1
function_arg	keys the [arg_2] ||| [function_1] [arg_2]	count=1
module	function to ||| modules	count=1
function	function to compare ||| compare props	count=1
arg	particular host ||| host minutes	count=2
module	[module_1] in the ||| [module_1] [module_2]	count=8
function_arg	[function_1] server to ||| [arg_2] [function_1]	count=1
arg	installed or not ||| depot	count=1
function	[function_1] difference between ||| [function_2] [function_1]	count=1
function_arg	right after [arg_2] ||| [arg_2] [function_1]	count=3
module	shell command ||| modules	count=1
function	[function_1] service the ||| [function_1] [function_2]	count=3
function_arg	creates a [arg_2] ||| [function_1] vpc [arg_2]	count=4
function	facts for a host ||| facts	count=1
function	samples the version of ||| get version	count=1
module	string for ||| modules	count=2
arg	events to monitor ||| fileobj events data	count=1
function	[function_1] group ||| [function_1] [function_2]	count=1
function	downtime for all hosts ||| host downtime	count=1
function	of newlines at ||| newlines from	count=1
module	path and handle ||| modules	count=3
function	[function] of ||| [function]	count=2
function	file is not present ||| file	count=1
function	updates the module field ||| update	count=1
arg	token ||| token	count=1
function	to read from ||| load	count=1
function	list ||| list	count=9
function_arg	[function_1] [arg_2] ||| [function_1] aa policy present [arg_2]	count=4
function	retrieves the anti affinity ||| aa	count=2
module_class	[module_1] daemon ||| [module_1] [class_2]	count=9
arg	request to ||| request	count=1
class	request ||| request	count=1
arg	through each bond ||| _bondmems	count=1
class	code path and handle ||| clc group	count=1
class	existing network [class_2] ||| [class_1] [class_2]	count=4
module	if the device ||| connection	count=1
function	list of subnets each ||| subnets	count=1
function	axapi ||| axapi	count=1
function	from list of ||| get	count=1
function_arg	ensures the [arg_2] ||| [function_1] server snapshot absent [arg_2]	count=1
arg	user exists ||| user db_name	count=1
module	the ||| modules system	count=2
function	[function_1] wait ||| [function_2] requests [function_1]	count=1
module	write ||| modules network cumulus	count=1
module	host we've been ||| connection	count=1
module	update ||| modules packaging os	count=1
arg	module if not ||| module system	count=1
class	dimension data ||| dimension data	count=2
arg	the git repo ||| git_path	count=1
function	export ||| export	count=3
class	set ||| affinity policy	count=1
function	a path is relative ||| prefix login path	count=3
class	network and returns a ||| network manager	count=1
module	for the ||| modules cloud centurylink	count=8
module	which returns ||| playbook role	count=1
function	ensures the [function_2] ||| [function_2] [function_1]	count=6
function_arg	[function_1] from group_vars/<groupname> ||| [function_1] [arg_2]	count=1
arg	2-tuple host port ||| host port connect_timeout	count=1
function	deletes them from the ||| delete	count=1
module	if any ||| cloud docker	count=1
arg	for sending ||| msg_format color notify	count=1
class	path ||| balancer	count=1
function	creates ||| create loadbalancerpool	count=2
class	a bundle with swupd ||| swupd	count=1
arg	stackdriver ||| module key revision_id deployed_by	count=1
arg	increase or decreaste the ||| retention_period action	count=1
function	each host key can ||| parse host	count=1
module	exist [module] ||| [module] cloud	count=1
module	format ||| modules cloud google	count=1
arg	true if s3_url ||| s3_url	count=2
function	to create an absolute ||| absolute	count=1
arg	the task ||| task variables	count=1
module	[module] given ||| [module]	count=1
arg	restriction ||| restriction	count=1
function	to parse it as ||| parse	count=1
function	[function_1] instance template ||| [function_1] [function_2]	count=1
class	main ||| container	count=1
function	revision and [function_2] ||| [function_2] [function_1]	count=1
function_arg	volume from [arg_2] ||| [function_1] [arg_2]	count=1
class	locale module to ||| ansible module	count=1
arg	[arg_1] 'absent' ||| [arg_2] [arg_1]	count=3
function	the policy [function_2] ||| [function_2] [function_1]	count=2
module	to do for docker ||| plugins	count=1
module_class	[module_1] aws ||| [module_1] cloud [class_2]	count=1
module	a list of ||| cloud	count=3
module	its request_spot_instances() method for ||| modules cloud	count=1
class	we've ||| base	count=1
function	changes ||| change	count=3
class	if an anti ||| clc anti	count=1
function	unsubscribe a ||| unsubscribe	count=2
class	pools for system ||| pools	count=1
class	module to test the ||| module	count=1
class	the provided rhsm ||| rhsm	count=1
module	updates ||| modules	count=1
module	to lxd nothing ||| plugins connection	count=1
function_arg	[function_1] piece of ||| [function_1] [arg_2]	count=2
module	[module_1] amazon s3 ||| [module_1] [module_2]	count=2
function	alert policy to the ||| alert policy to	count=1
arg	vars sent ||| vars	count=1
function	when we ||| fail on	count=1
module	machine via the given ||| cloud	count=1
arg	b ||| b	count=1
function	the number of newlines ||| count newlines from	count=1
function	removes all targets on ||| remove all targets	count=1
function_arg	check [arg_2] ||| [function_1] module host key [arg_2]	count=1
arg	a clc ||| clc	count=1
function	password from [function_2] ||| [function_1] [function_2]	count=3
module	in the ||| modules cloud	count=2
class	the main code path ||| policy	count=1
class	that may change ||| manager	count=1
function	[function_1] string ||| [function_2] [function_1]	count=3
function	clone a ||| clone	count=1
function	a message that ||| message	count=1
function	anti affinity [function_2] ||| [function_2] [function_1]	count=2
function	newlines at the ||| count newlines from	count=1
function	device supports multiplexing ||| close	count=1
function	create an absolute url ||| absolute	count=1
function	need to be ||| ids to	count=1
function	returns members ||| members	count=1
arg	names [arg] ||| [arg]	count=1
function	the named ||| named	count=1
function	newlines at the end ||| count newlines from end	count=1
arg	whether the dest ||| dest	count=1
function	the currently set locale ||| locale	count=1
function	and can do pipelining ||| is pipelining	count=1
function	[function_1] to the ||| [function_2] [function_1]	count=4
class	the metadata ||| metadata	count=1
function	of this ||| get	count=1
function	[function_1] spec ||| modify server [function_1] [function_2]	count=1
class	an anti [class_2] ||| [class_2] [class_1]	count=1
class	the ansible galaxy server ||| galaxy	count=1
function	the vty shell if ||| close shell	count=1
class	base class method to ||| strategy base	count=1
function	on ||| v2 playbook on	count=1
class	the container is connected ||| container	count=1
function	arguments have ||| check	count=1
function	uuid [function] ||| [function] original	count=2
function	module code through the ||| configure module	count=1
arg	entity is [arg_2] ||| [arg_2] [arg_1]	count=4
function	and set the params ||| params	count=1
function	name ||| file system	count=2
arg	on was ||| response_code	count=1
function	state if ||| state	count=1
function_arg	be a [function_1] [arg_2] ||| [function_1] lockstep hosts [arg_2]	count=3
function_arg	[function_1] note that ||| [function_1] [arg_2]	count=3
arg	the play_context [arg_2] ||| [arg_1] [arg_2]	count=1
module	receive updates from ||| packaging os	count=1
module	a given [module_2] ||| [module_1] [module_2]	count=4
function	updates ||| update	count=3
module	has all ||| modules cloud amazon	count=1
class	and handle the ||| clc group	count=1
module	if required ||| modules cloud	count=1
function	that a supplied service ||| services	count=1
function	[function_1] policy exists ||| [function_1] [function_2]	count=3
arg	changed ||| changed req	count=1
function	the boot volume from ||| boot volume	count=1
module	idemopotent ||| modules	count=1
class	execute ||| clc firewall policy	count=2
function	[function_1] ids and ||| [function_2] [function_1]	count=4
function	server ||| clc server	count=1
arg	folder ||| folder	count=1
arg	the task ||| task	count=1
arg	a single base64-encoded ||| as_list strict_mode preserve_rc	count=1
class	available [class] in data ||| [class]	count=1
function	the status of ||| get	count=1
function	tags from a ||| tags from	count=2
arg	vm determined by ||| vm state force	count=1
function	factory that ||| factory	count=1
function	set up pyrax ||| setup rax	count=1
module	closes ||| plugins	count=1
function	dict of key value ||| dict	count=2
class	certificate ||| certificate	count=1
function	the cluster ||| cluster	count=1
module_class	[module_1] nxapi json ||| [module_1] [class_2]	count=2
function	protocol enabled ||| protocol policy	count=1
arg	if anything else ||| key phase	count=1
function	delete it ||| delete	count=1
function	from variables set on ||| set	count=1
module	eip from ||| cloud	count=1
arg	play_context [arg_2] ||| [arg_2] [arg_1]	count=1
module	and handle the ||| modules cloud	count=3
arg	to get ||| host backend	count=1
module	synchronize ||| packaging os	count=2
arg	file system ||| module export	count=1
function	used to schedule downtime ||| schedule svc downtime	count=1
function	autoscaler ||| autoscaler	count=1
class	getting the firewall ||| firewall	count=1
arg	not already installed ||| module opkg_path	count=1
function	name of [function_2] ||| [function_2] [function_1]	count=2
function	version of the ||| get version	count=4
class	another network ||| network	count=1
arg	for the server ||| server	count=1
function	none if file is ||| file	count=1
module	start the ||| cloud	count=1
module	working ||| source_control	count=1
function	api call ||| call v3	count=1
module	it to self ||| system	count=1
function_arg	script [arg_2] ||| [arg_2] [function_1]	count=2
function	a file from a ||| from	count=2
function	run a ||| run	count=1
module	the ||| modules packaging	count=2
function	of newlines ||| count newlines	count=1
function	nodes ||| nodes	count=1
function	ports on ||| ports	count=1
function	convert ||| human to	count=1
function	[function_1] lease ||| [function_2] [function_1]	count=4
function	compare the host's current ||| compare	count=1
function	import ||| import	count=3
function	a backend service the ||| backend service	count=1
module	for differences [module_2] ||| [module_1] [module_2]	count=4
class	the current system ||| rhsm	count=1
function	[function_1] ports ||| [function_2] [function_1]	count=3
function	all ovirt [function_2] ||| [function_1] [function_2] full argument spec	count=1
function	[function_1] aws ||| [function_2] [function_1]	count=8
function	ensures that the alert ||| ensure alert	count=2
module	lxd nothing to do ||| connection	count=1
arg	terms contains ||| terms	count=1
function_arg	of the [arg_2] ||| [function_1] name [arg_2]	count=1
function	to ||| get	count=1
arg	data out to the ||| data	count=1
function	deploy event ||| deploy event	count=2
function	templating of the module ||| configure module	count=1
function	[function_1] a list ||| [function_1] [function_2]	count=1
module	for getting the ||| modules	count=1
function	the vars as ||| vars	count=1
arg	in a [arg_2] ||| [arg_1] [arg_2]	count=4
function	the balancer ||| fetch balancer	count=1
function	group name returns ||| group name	count=2
arg	parameters ||| module params	count=1
module	synchronize all ||| os	count=1
arg	finds a ||| want_private	count=1
class	code path ||| firewall	count=1
function	encryption of ebs volumes ||| volume encryption	count=1
module	return true ||| module_utils	count=3
function	of clc ||| clc	count=3
function	install ||| install	count=2
function	results off ||| process pending results	count=1
function	build ||| build	count=2
arg	service ||| service	count=1
function	on start ||| playbook on play start	count=1
function_arg	[function_1] any submodules ||| [arg_2] [function_1]	count=3
class	return details about ||| cdotlun	count=1
arg	run module ||| module	count=1
module	return details ||| storage netapp	count=1
function_arg	[function_1] piece ||| [arg_2] [function_1]	count=2
function_arg	[function_1] stdin filehandle ||| [function_1] [arg_2]	count=3
arg	attempt to ||| device_id isinstance	count=1
arg	newgroup [arg_2] ||| [arg_2] [arg_1]	count=2
arg	path ||| path all_vars	count=1
arg	status args ||| status	count=1
function_arg	[function_1] note that ||| [function_1] names [arg_2]	count=3
function	flat ||| ansible	count=1
arg	remote path and ||| path sudoable	count=1
arg	templated specially ||| templar	count=1
function	file over ||| file from	count=1
function	temporary path ||| tmp path	count=3
module	installs [module_2] ||| [module_2] [module_1]	count=1
function	[function_1] key ||| [function_2] [function_1]	count=1
function	create an absolute url ||| absolute location	count=1
function	list of subnets each ||| find subnets	count=1
module	new ttl and ||| modules cloud google	count=1
arg	each bond member ||| _bondmems	count=1
arg	to typetalk ||| module client_id client_secret topic	count=1
module	rhn ||| modules packaging os	count=1
arg	regular expression ||| regexp	count=1
function	a dict ||| rule dict	count=1
arg	cpu of ||| cpu	count=1
function	the error did ||| error	count=1
function	command ||| command	count=11
module	amazon s3 ||| cloud amazon	count=2
function	need to be ||| to remove	count=1
function_arg	parameter [arg_2] ||| [arg_2] [function_1]	count=1
function	delete a [function_2] ||| [function_2] [function_1]	count=5
module	main code path ||| centurylink	count=3
function_arg	a string containing all [function_1] [arg_2] ||| [function_1] [arg_2]	count=4
function	[function] was ||| check mvip [function]	count=2
arg	clc api ||| clc	count=3
function	[function_1] virtual ||| [function_1] [function_2]	count=2
function	function to add ||| add	count=1
module	if a ||| cloud	count=3
class	user ||| user	count=2
module	removes metadata ||| cloud rackspace	count=1
function_arg	[function_1] git ||| [function_1] version [arg_2]	count=1
function	of handlers this is ||| handlers	count=1
function	ovirt/rhv in version ||| get template with version	count=1
arg	and values specified in ||| module cf container src	count=1
function_arg	installed state [arg_2] ||| [arg_2] [function_1]	count=1
function	method to calculate difference ||| dict diff	count=1
function	a default [function_2] ||| [function_1] [function_2] resource_group location name allocation_method	count=1
function	add the hostkey ||| add host	count=1
module	the dictionary ||| cloud	count=2
function_arg	servers in clc ||| servers module clc	count=1
function	id by ||| get id by	count=2
module	list of instances for ||| modules cloud	count=1
module	a ||| modules cloud amazon	count=4
function	backup of the specified ||| backup	count=1
module	over a jinja2 ||| module_utils	count=1
function	digest ||| digest	count=1
module	handle the ||| cloud	count=3
arg	:arg [arg] ||| [arg] linux_mounts dest	count=3
function	to compare the host's ||| compare	count=1
function	the snapshot ||| snapshot	count=1
class	and handle ||| clc	count=3
function_arg	[function_1] is templated ||| [arg_2] [function_1]	count=4
class	locale module to ||| module	count=1
function	recursively walking ||| recursive	count=1
module	over a directory and ||| plugins	count=1
module	execution ||| modules network asa	count=1
module_class	[module_1] backends ||| [class_2] [module_1]	count=1
function	path of ||| get dhcp	count=1
module	[module_1] main ||| [module_1] [module_2]	count=4
class	for the collector ||| collector	count=1
arg	remote branch version ||| dest remote	count=1
function	compatibility between ||| compatibility	count=1
class	that may ||| big ip snat pool manager	count=1
module	[module_1] from cloud ||| [module_2] [module_1]	count=1
function	sanitize the ||| sanitize	count=1
function	temporary path on a ||| tmp path	count=1
function	repo ||| repo	count=1
module	string typically ||| modules database mysql	count=1
function	matching containers that ||| containers	count=1
class	<name>01 to associate with ||| azure rmmodule base	count=1
function	via the given ||| create	count=1
function	executes the low level ||| low level	count=1
function	deactivate a package ||| deactivate	count=1
arg	finds ||| conn module zone_name want_private	count=1
arg	a remote path and ||| path	count=1
arg	newgroup into group ||| group newgroup	count=3
function	backend [function_2] ||| [function_1] [function_2]	count=8
module	path and ||| modules cloud	count=3
class	or updates the ||| manager	count=1
function_arg	application from account ||| application module account	count=1
module_class	[module_1] signing ||| [module_1] [class_2]	count=1
function	overlay repository ||| overlay	count=1
function_arg	[function_1] in cert_file ||| [function_1] [arg_2]	count=2
module	and the ||| modules	count=1
function	set on ||| set host	count=1
module	return will ||| module_utils	count=1
class	get ||| vars module	count=2
function	will override those from ||| override	count=1
function	[function_1] latest version ||| [function_2] [function_1]	count=3
function	is currently [function_2] ||| [function_1] [function_2]	count=4
arg	something did not complete ||| azure_object requested_state	count=1
class	lxc nothing to ||| connection	count=1
function_arg	encrypted data [arg_2] ||| [arg_2] [function_1]	count=1
function	all plugins ||| all	count=1
function	needs ||| needs	count=1
arg	a remote path and ||| path sudoable	count=1
function	[function_1] plugin ||| [function_2] [function_1]	count=1
function	retrieve a network domain ||| network domain	count=1
function	new certificate ||| get certificate	count=1
function	loads all available callbacks ||| load callbacks	count=1
arg	interface args ||| interface	count=2
function	find ||| rax find	count=3
function	path and ||| process	count=3
function	cluster requires ||| requires	count=1
module	all of the ||| packaging os	count=1
function	nodes to ||| lbpool nodes	count=1
function	activate a ||| activate packages	count=1
arg	number in string format ||| number	count=1
function	[function_1] temporary ||| [function_1] [function_2]	count=1
arg	object prepared for creating ||| container_dn superordinate	count=1
function	assemble a [function_2] ||| [function_2] [function_1]	count=6
arg	reach a status args ||| wait_timeout nat_gateway_id status	count=1
function	if file is ||| from file	count=1
function	deactivate a package if ||| deactivate packages	count=1
function	to schedule downtime for ||| schedule host svc downtime	count=1
function	[function] apply (for ||| [function]	count=2
class	the rule [class_2] ||| [class_1] [class_2]	count=2
function	ip is currently associated ||| address is associated	count=1
arg	a kinesis stream ||| client stream_name	count=1
module	if it does ||| modules	count=1
class	module ||| ansible module	count=3
function	the ubuntu ami ||| ubuntu ami	count=1
arg	keys from b ||| b	count=1
arg	the pool on ||| pool_id	count=1
function	message that briefly ||| message	count=1
class	the firewall ||| firewall	count=1
function	they are set ||| set task and variable	count=1
class	nxapi ||| nxapi	count=1
module	for reading a ||| modules	count=1
module_class	[module_1] rule in ||| [module_1] [class_2]	count=2
function	info entry ||| info	count=1
module	to do for ||| plugins	count=1
module	a given domain ||| cloud google	count=4
module	machine ||| cloud	count=1
function	parted ||| check parted	count=1
module	a collection of ||| modules cloud	count=1
arg	for the play host ||| play host	count=1
function	register the current system ||| register	count=1
module	sanitize ||| modules system	count=1
class	return details ||| net app	count=1
module	as directed for ||| module_utils	count=1
module	numerical ||| network nxos	count=1
function	absolute path ||| path	count=1
function_arg	[function_1] play ||| [function_1] [arg_2]	count=2
function	on start of the ||| playbook on play start	count=1
module	if it ||| modules	count=1
function	the system [function_2] ||| [function_1] [function_2]	count=1
function_arg	[function_1] module parameters ||| [function_1] [arg_2]	count=3
function	[function_1] [function_2] ||| [function_2] vpc [function_1]	count=4
function	executes ||| run	count=7
function	password has changed ||| changed	count=1
function	config [function_2] ||| [function_1] [function_2]	count=1
function	transfer [function_2] ||| [function_2] [function_1]	count=11
class	and ||| clc firewall	count=1
module	or ||| modules packaging os	count=1
function	chmod command ||| chmod	count=1
module	to the host we've ||| plugins	count=1
function	init and update ||| submodule update	count=1
module	a single file ||| cloud	count=1
class	the ||| container management	count=1
arg	play [arg_2] ||| [arg_1] [arg_2]	count=3
function	performs tilde expansion on ||| expand user	count=1
function	public ip available ||| public ip present	count=1
function	profile [function] ||| get vnic profile [function]	count=3
class	load ||| kubernetes ansible module	count=1
arg	the vars_cache for ||| varname	count=1
class	user and see ||| user	count=1
module_class	a new [class_2] ||| [module_1] [class_2]	count=8
module	to do ||| plugins	count=8
class	server ||| modify server	count=4
function_arg	[function_1] [arg_2] ||| [function_1] servicegroup [arg_2]	count=6
arg	using urllib2 ||| method	count=1
module	for the passed in ||| modules	count=1
function	the uuid ||| uuid	count=1
arg	plays are run by ||| arg	count=2
function	update the ||| update auth	count=1
function	the policies ||| policies	count=1
arg	be templated during ||| attr value templar	count=1
function	validate that the minimum ||| validate	count=1
arg	a pattern try to ||| host_pattern host_data	count=1
function	service the instance ||| service	count=1
function	revision and [function_2] ||| [function_2] remote [function_1]	count=1
function	of newlines at ||| count newlines from	count=1
arg	piece of data ||| plaintext	count=1
arg	are not destroyed ||| bes	count=1
function	get installed state ||| get installed state	count=2
function	[function_1] groups ||| [function_1] [function_2]	count=2
function	dmi related [function_2] ||| [function_1] [function_2]	count=1
module	a ||| cloud rackspace	count=1
function	installed overlays ||| sync overlays	count=1
module_class	the logicmonitor collector ||| modules monitoring collector	count=1
module	string typically passed ||| mysql	count=1
class	see if an anti ||| clc anti	count=1
function	of the api call ||| call v3	count=1
function	that need to ||| ids to remove	count=1
function	a file from ||| from	count=2
function	packages ||| packages	count=1
function	set the remote user ||| remote user	count=1
function_arg	mode logic [arg_2] ||| [function_1] [arg_2]	count=1
function	vty shell if ||| shell	count=1
class	diff parameters and container ||| container	count=1
function	a stack ||| stack	count=1
class	handle ||| load	count=1
arg	conn ||| conn module name	count=1
module	all of the ||| modules cloud amazon	count=1
class	returns ||| ansible module	count=1
arg	goes through each bond ||| _bondmems	count=1
arg	for the server to ||| server	count=1
arg	a location header ||| location	count=1
function	'magic' dictionary 'groups' with ||| dict	count=1
module	to the ||| web_infrastructure	count=1
class	rhn redhat ||| rhn	count=1
class	files are ||| manager	count=1
function	to be ||| ids to	count=1
module	create a list ||| cloud	count=1
module	pip freeze pip and ||| language	count=1
class	bool ||| ansible module	count=1
arg	[arg] executor engine ||| [arg]	count=1
function	host patterns separated by ||| host	count=1
function	a remote file to ||| file	count=2
module	authorization [module] given ||| [module]	count=1
arg	url and store ||| url	count=1
function	commit ||| commit	count=1
module	specified file return ||| module_utils	count=1
arg	including a tag in ||| tag	count=1
function	the alert [function_2] ||| [function_1] [function_2]	count=21
function	send message ||| send message	count=1
module	a previously registered system ||| modules packaging os	count=1
function	[function_1] module ||| [function_2] [function_1]	count=3
function_arg	[function_1] given task ||| [function_1] task [arg_2]	count=1
function	to preserve ||| parse params	count=1
function	by name ||| by name	count=4
function	method to determine if ||| has	count=1
module	the driver and the ||| modules	count=1
function	a size in ||| disk size	count=1
function_arg	[function_1] url hostkey ||| [arg_2] [function_1]	count=1
module	lxc nothing ||| connection	count=1
function	line in the file ||| lines from file	count=1
function_arg	dict in ||| dict changed module	count=2
function	sure is a text ||| text	count=1
function	create the snapshot ||| create server snapshot	count=1
function	returns an option ||| get	count=1
function	virtual machine ||| virtual machine	count=6
function_arg	[function_1] to typetalk ||| [function_1] [arg_2]	count=2
module	information from ||| cloud	count=1
function	message to hipchat v1 ||| msg v1	count=1
module	file return true ||| module_utils	count=1
function	fuzziness in new style ||| new style	count=1
function	enable the [function_2] ||| [function_1] [function_2]	count=4
module	to the lxc ||| plugins connection	count=1
module	a state ||| cloud	count=1
function	encrypted return a ||| get	count=1
function	policy is absent ||| policy is absent	count=4
module	zypper ||| modules packaging os	count=1
function	they are set which ||| set task and	count=1
function	write a ||| write	count=1
function_arg	[function_1] of server_ids ||| [function_1] server snapshot absent [arg_2]	count=1
function	message describing why any ||| message	count=1
function	error ||| error	count=1
class	run ||| container management	count=1
module	here ||| connection	count=7
module_class	all [class_2] ||| [module_1] [class_2]	count=1
function	need to be ||| target ids to remove	count=1
module_class	the logicmonitor [class_2] ||| [module_1] [class_2]	count=2
function	[function_1] from ||| [function_2] [function_1]	count=22
arg	a particular service ||| host services	count=2
class	filesystem agains specified or ||| swupd	count=1
class	main code ||| clc firewall policy	count=1
function	update an account on ||| account	count=1
function	dict with ||| dict	count=1
function	policy if ||| policy	count=1
function	around [function] output ||| filter non [function]	count=1
function	umc [function_2] ||| [function_1] [function_2]	count=1
function	a zone [function_2] ||| [function_1] [function_2]	count=4
class	main code path and ||| load	count=1
function	module ||| search for host key	count=1
function	entity id by ||| id by	count=1
arg	auth ||| auth	count=1
function	module error title ||| title	count=1
class	loads ||| action module	count=1
function	of the module ||| module	count=1
function_arg	the privileges [arg_2] ||| [function_1] cursor user [arg_2]	count=4
function	executing the remote task ||| compute	count=1
function	values and ||| argument values	count=1
module	return details about ||| modules storage netapp	count=1
function	the ubuntu ami ||| lookup ubuntu ami	count=2
function	retrieves the anti affinity ||| get aa	count=1
function	[function_1] validation ||| [function_1] [function_2]	count=4
function	return the keys of ||| get	count=1
function	error title ||| title	count=1
module	instance ||| modules cloud google	count=1
arg	rc stdout and stderr ||| args check_rc close_fds executable	count=1
arg	a user returns ||| user	count=1
function	protocol [function_2] ||| [function_2] [function_1]	count=3
function	set the user that ||| user	count=1
function	[function_1] validation of ||| [function_1] [function_2]	count=2
class	the server ||| modify server	count=2
function	named ports on a ||| named ports	count=1
function	public [function_2] ||| [function_2] [function_1]	count=5
class	the console ||| console	count=1
class	the main code path ||| clc group	count=1
arg	the request ||| request	count=1
function	loads and returns ||| load	count=1
class	be removed remotely ||| watch event rule manager	count=1
function	run on start ||| on play start	count=1
class	device ||| connection	count=1
function	parse it as a ||| parse	count=1
function_arg	state [arg_2] ||| [arg_2] [function_1]	count=1
module	create a new ||| cloud dimensiondata	count=1
function	installed version ||| local version	count=1
module	about the ||| modules storage	count=1
arg	name/position where a yaml ||| file_name	count=1
arg	a tag ||| tag	count=1
function	[function] names ||| security group ids [function]	count=1
function	[function_1] the port ||| [function_2] [function_1]	count=1
function	like ||| options	count=2
arg	the given router ||| router	count=1
function_arg	[function_1] managed ||| [arg_2] [function_1]	count=4
arg	the user exists ||| user db_name	count=1
function	is present on ||| on	count=1
arg	check if [arg] used by ||| version connection [arg]	count=1
arg	forces zypper to refresh ||| module auto_import_keys shortname	count=1
arg	uploads a folder ||| cf folder	count=1
function	creates a pool ||| create loadbalancerpool	count=1
function	policy is ||| policy is	count=9
function	of clc server objects ||| clc	count=1
class	when a playbook ||| playbook executor	count=1
class	create ||| action module	count=1
function	results off ||| pending results	count=1
function	request message ||| request	count=1
function	requires ||| requires	count=1
function	wait for ||| wait for	count=3
function_arg	[function_1] [arg_2] the ||| [function_1] [arg_2]	count=2
class	system ||| rhn	count=1
module	previously registered ||| modules	count=1
arg	events ||| fileobj events data	count=1
function_arg	message [arg_2] ||| [function_1] [arg_2]	count=2
function	check the [function_2] ||| [function_1] [function_2]	count=4
module	the [module] ||| [module]	count=3
module	system ||| packaging	count=2
function	[function_1] [function_2] policy ||| [function_1] [function_2] policy	count=3
function	installed state ||| installed state	count=2
module	directed for ||| module_utils	count=1
arg	[arg_1] current weight ||| [arg_1] [arg_2]	count=4
function	pause ||| pause	count=1
arg	servers ||| server_ids package_id	count=1
function	start the ||| create	count=1
arg	user ||| module user	count=1
function	if parted ||| parted	count=1
module	[module_1] for module ||| [module_2] [module_1]	count=3
module	attributes string for ||| modules database	count=1
function	the retention ||| retention action	count=1
function	ip [function_2] ||| [function_2] [function_1]	count=4
function	set the named ||| update named	count=1
function	deletes them [function_2] ||| [function_2] [function_1]	count=1
arg	uploads a folder to ||| cf folder container	count=1
class	method ||| container management	count=1
module	port on the ||| modules cloud	count=1
function	subnets each ||| find subnets	count=1
module	machine via the given ||| misc	count=1
function	[function_1] [function_2] <name>01 to associate with ||| [function_1] [function_2]	count=4
module	search for the ||| modules	count=1
class	group <name>01 to ||| azure rmmodule base	count=1
module	case equivalent [module] example 'this_function_name' ||| [module]	count=1
class	to do for ||| connection	count=1
module	needed for special packages ||| modules packaging	count=1
module	[module] alert ||| [module]	count=1
function	all domains of ||| do challenges	count=1
module	been initialized ||| plugins	count=1
function	to ||| parse	count=1
module	to ||| modules monitoring	count=2
function	params when ||| fail on missing params	count=1
function	handlers this ||| handlers	count=1
class	add ||| load balancer	count=1
function	wait for the ||| wait for status	count=2
class	path and handle the ||| clc load	count=1
class	about ||| net app	count=1
module	has all ||| cloud amazon	count=1
function	hipchat v2 server ||| v2	count=1
class	the public ||| public	count=1
class	json ||| logic monitor	count=6
function	[function] apply ||| [function]	count=2
function_arg	[function_1] restriction this ||| [function_1] [arg_2]	count=5
function	the axapi ||| axapi enabled	count=1
class	closes ||| connection	count=1
module	with [module] network interface ||| [module]	count=1
function_arg	sends configuration commands ||| configure commands	count=1
arg	through each bridge member ||| _bridgemems	count=1
class	rule and target ||| event rule manager	count=1
module	given name ||| cloud centurylink	count=1
arg	data ||| data hash_func	count=1
function_arg	port [arg_2] ||| [function_1] on diff host [arg_2]	count=3
function	the remote state ||| remote state	count=2
function	alarm [function_2] ||| [function_2] [function_1]	count=1
function	human readable representation ||| repr	count=2
arg	or updates [arg_1] [arg_2] ||| [arg_2] [arg_1]	count=10
function	write to [function_2] ||| [function_2] [function_1]	count=1
function	read information and ||| read	count=7
arg	from remote to local ||| in_path out_path	count=2
function_arg	[function_1] given name ||| [arg_2] [function_1]	count=1
function	the resources given ||| resources	count=1
function_arg	data [arg_2] ||| [function_1] [arg_2]	count=1
module	all ||| modules packaging os	count=2
function	the anti affinity policy ||| aa policy	count=1
function	ensures ||| ensure	count=9
module	execute ||| modules	count=3
function	[function_1] default network ||| [function_1] [function_2]	count=1
arg	from /etc/rhsm/rhsm conf ||| rhsm_conf	count=2
module	milliseconds [module] ||| [module]	count=2
arg	using ||| cli	count=3
function	updated ||| updated	count=1
function	it to the ||| get	count=1
function	[function] kernel ||| get unlabeled device [function]	count=1
function	wait argument ||| wait for	count=3
class	by ||| elb manager	count=1
arg	error code and changed ||| changed	count=1
function	a command ||| command	count=1
module	do ||| plugins connection	count=16
arg	particular ||| minutes	count=3
function	an image ||| image	count=2
class	main code path and ||| clc load	count=1
module	all of the params ||| cloud amazon	count=1
arg	fail module if ||| module system	count=1
function	[function] order first ||| load [function]	count=1
module	linode ||| linode	count=1
arg	the current project quota ||| project_quota_output	count=1
arg	the datastructure which do ||| ds	count=1
function	returns true if network ||| network	count=1
class	execute the ||| load balancer	count=1
function	request a ||| get	count=1
function	if boto library supports ||| boto supports	count=1
function	[function_1] sources ||| [function_2] [function_1]	count=2
arg	from the server ||| server server_params	count=1
function	convert them ||| make tags in	count=1
module	monitoring ||| modules monitoring	count=1
arg	change user ||| cursor module user	count=1
class	set ||| clc load balancer	count=1
module	shell command ||| system	count=1
function	[function_1] protocol enabled ||| [function_1] [function_2]	count=3
arg	performs basic parameter ||| aws	count=2
function_arg	[function_1] status to ||| [function_1] client stream_name [arg_2]	count=1
function	convert them ||| tags in	count=1
function_arg	the privileges [arg_2] ||| [arg_2] [function_1]	count=4
function	[function_1] handler ||| [function_2] [function_1]	count=2
function	boot volume from ||| boot volume	count=2
function	dict keys ||| dict	count=1
arg	wrapper ||| method	count=1
function	return a ||| get	count=1
function	ids and ||| ids	count=1
module	synchronize all of the ||| packaging	count=1
class	the ||| net app cdotlun	count=2
function	[function_1] policy to ||| [function_2] [function_1]	count=9
arg	path ||| path sudoable	count=1
function	first [function] status ||| [function]	count=1
arg	to the provided ||| lb_id	count=2
arg	forces zypper to ||| module auto_import_keys shortname	count=1
arg	by [arg] ||| [arg]	count=2
function	from the elb ||| elb	count=1
function	checks ||| checks	count=1
arg	original and ||| old_ttl old_record_data new_ttl new_record_data	count=1
function_arg	run [arg_2] ||| [function_1] [arg_2]	count=1
module	execution ||| modules network eos	count=1
function	list of nodes exist ||| lbpool nodes set	count=1
function_arg	handler [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	check [arg_2] ||| [arg_2] [function_1]	count=3
function	[function_1] the key ||| [function_1] [function_2]	count=1
module	returns a list ||| cloud amazon	count=1
arg	a clc ||| clc alias	count=1
function	the options_vars ||| options vars	count=1
function	string values it will ||| values	count=1
function_arg	port [arg_2] ||| [arg_2] [function_1]	count=3
module	all ||| cloud amazon	count=4
function	depending [function] of ||| sysv [function]	count=1
function	is called right before ||| pre remove	count=1
function	the group matching ||| group	count=1
module	filter files which ||| files	count=1
function	get call ||| get	count=1
module	[module] given domain ||| [module]	count=1
function	current system is ||| is	count=1
class	and handle the ||| load balancer	count=1
class	code path and ||| policy	count=1
arg	lxd to local ||| in_path out_path	count=1
module	are a [module_2] ||| [module_1] [module_2]	count=2
arg	get ||| host backend	count=1
module	the system to receive ||| modules packaging	count=1
module	the dictionary [module_2] ||| [module_2] [module_1]	count=2
function	[function] alert policy ||| [function] alert policy is	count=1
function	[function_1] a file ||| [function_2] [function_1]	count=22
module	and write it ||| modules	count=1
function	associated with ||| associated with	count=2
arg	[arg_1] a datacenter ||| [arg_2] [arg_1]	count=1
module	[module_1] domain name ||| [module_1] [module_2]	count=6
arg	clc rest api ||| clc module server_params	count=1
module	from the [module_2] ||| [module_1] [module_2]	count=2
function	salt ||| salt	count=1
class	main code path and ||| policy	count=1
function	certificate ||| cert path	count=2
function	properties ||| properties	count=4
function_arg	requests [arg_2] ||| [function_1] [arg_2]	count=2
class	return ||| net app cdotlun	count=2
arg	standard way ||| rax_module region_required	count=1
arg	dict passed ||| name passed default	count=1
function	requests are ||| requests	count=4
arg	status args ||| nat_gateway_id status	count=1
function	network domain ||| get network domain	count=2
function	size of ||| get	count=1
module	on the system ||| modules system	count=2
function	return [function_2] ||| [function_2] [function_1]	count=8
function	parse [function_2] ||| [function_2] [function_1]	count=4
function	rule data matches aws ||| rule matches aws	count=1
function	default security ||| default	count=1
function	local rule ||| rule	count=1
function	list of key ||| shorten key	count=1
function	command run ||| command	count=1
function	service the ||| service	count=1
module	the correct length if ||| cloud	count=1
module	ansiblemodule used for ||| modules system	count=1
class	retrieves rule ||| watch event rule	count=1
module	connection failure ||| connection	count=1
class	the task with the ||| task executor	count=1
function_arg	[function_1] path ||| [function_1] inventory basename [arg_2]	count=1
module	the [module_2] ||| [module_2] [module_1]	count=2
arg	[arg_1] command ||| [arg_1] base [arg_2]	count=1
arg	folder to ||| cf folder	count=1
function	sync settings to ||| sync	count=1
function	to be ||| target ids to remove	count=1
function	a file over http ||| push file	count=1
function	check if boto ||| boto	count=3
module	if a ||| module_utils	count=1
arg	the permissions bit ||| etype entity permissions use_nfsv4_acls	count=1
arg	and ||| manager	count=1
function	clone a new ||| create clone	count=3
module	lxc ||| cloud lxc	count=2
function	[function_1] factory ||| [function_2] [function_1]	count=4
class	ansible galaxy roles ||| galaxy	count=1
function	checksum given ||| checksum	count=1
module	the ||| cloud	count=13
module	removes metadata keys and ||| modules cloud rackspace	count=1
function	will first [function] status down ||| [function]	count=1
function_arg	find the [arg_2] ||| [arg_2] [function_1]	count=4
function	[function] bottom so ||| save [function]	count=1
function	[function_1] file or ||| [function_1] [function_2]	count=4
class	method for all ||| cli	count=1
module_class	lxc [class_2] ||| [module_1] lxc [class_2]	count=1
arg	location ||| location	count=1
function	compare ||| compare props	count=2
class	return ||| app cdotlun	count=2
function	[function_1] v1 ||| [function_2] [function_1]	count=1
class	are already present ||| manager	count=1
function	fuzziness in old-style (action/local_action) ||| old style args	count=1
function	the state of ||| get state	count=2
function	write to actual location ||| write to ports conf	count=1
module	packages ||| packaging os	count=1
class	an azure object's ||| azure rmmodule base	count=1
function_arg	network id [arg_2] ||| [function_1] [arg_2]	count=4
class	the ||| lxc container	count=1
function	host ||| parse host	count=1
function	device ||| close	count=1
class	block until server provisioning ||| clc modify server	count=1
function	and if ||| and	count=1
function	all ||| sync	count=1
class	the ||| app cdotlun	count=2
module	return list ||| module_utils	count=1
function	when module names ||| split module string	count=2
class	updates from ||| rhsm	count=2
function	an init [function] corresponding ||| get sysv [function]	count=1
function	upper case ||| case	count=1
function	module ||| host key	count=1
function	set the [function_2] ||| [function_1] [function_2]	count=42
class	loader ||| loader	count=1
arg	a value [arg_2] ||| [arg_2] [arg_1]	count=6
class	that are ||| elb manager	count=1
arg	templated during ||| templar	count=2
module	method for ||| modules cloud amazon	count=1
arg	alias in a datacenter ||| location	count=1
class	into 80 ||| lib	count=1
function	mount [function_2] ||| [function_2] [function_1]	count=1
arg	specified by it's name ||| name default	count=1
module	group ||| modules cloud amazon	count=1
arg	example ||| module gce instance_names number	count=1
module	by specified attributes ||| cloud	count=1
function	the certificate ||| certificate	count=1
class	details about ||| app cdotlun	count=1
module	and return ||| module_utils	count=3
function	file with the new ||| file	count=1
function	list of running servers ||| running servers by	count=1
function	rule ||| validate rule	count=1
arg	that they desire ||| table privs	count=1
function	validation of ||| validate	count=1
module	needed for ||| modules	count=1
function	string [function_2] ||| [function_2] [function_1]	count=3
class	the task list ||| play	count=1
class	updates ||| firewall policy	count=1
module	or alias or ||| cloud amazon	count=1
arg	file context mapping ||| target ftype	count=1
arg	and values specified in ||| module cf container	count=1
function	path ||| login path	count=3
module	the main ||| centurylink	count=3
function	if the quoted ||| quote	count=1
function	clc [function_2] ||| [function_1] [function_2]	count=35
class	the certificate [class_2] ||| [class_2] [class_1]	count=2
function	[function_1] request parameters ||| [function_2] [function_1]	count=2
module	vault ||| parsing vault	count=2
class	exits ||| galaxy cli	count=1
function	if the wait ||| wait for	count=3
module	main code path and ||| modules cloud centurylink	count=3
function	end of a ||| from end	count=1
class	and ||| ansible	count=2
function	by [function_2] ||| [function_2] [function_1]	count=5
class	the destination file ||| acmeclient	count=1
arg	vars_cache for a ||| varname	count=1
module	path and ||| modules	count=3
function_arg	[function_1] task ||| [function_1] task [arg_2]	count=1
module	sources ||| modules packaging os	count=2
function	modify a ||| modify	count=1
arg	individual group [arg_2] ||| [arg_2] [arg_1]	count=2
function	[function_1] id from ||| [function_1] [function_2]	count=4
function	the provided anti affinity ||| aa	count=1
function	create a [function_2] ||| azure rmmodule base [function_1] [function_2]	count=2
arg	uploads a folder ||| folder container	count=1
function_arg	[function_1] play ||| [arg_2] [function_1]	count=2
function	of this block is ||| get	count=1
function	from the ||| from	count=2
function_arg	[function_1] in clc ||| [function_1] [arg_2]	count=3
function	alert policy is absent ||| alert policy is absent	count=1
class	the ||| net	count=1
function	read information ||| read	count=7
module	via ||| cloud	count=1
arg	[arg] based on ||| cursor mysqlvar [arg]	count=3
function	in the file ||| from file	count=1
module	closes the ||| plugins connection	count=1
arg	not be templated ||| value templar	count=1
function	to get the attribute ||| get	count=2
class	path ||| load balancer	count=2
function	compare the host's ||| compare props	count=1
function	creates a pool ||| create	count=1
function	set ||| set remote	count=1
module	do here ||| plugins	count=7
arg	the clc ||| clc module	count=4
function	put ||| put	count=1
function_arg	[function_1] [arg_2] names are not unique ||| [function_1] [arg_2]	count=9
function_arg	copies the [arg_2] ||| [arg_2] [function_1]	count=3
class	load [class_2] ||| [class_2] [class_1]	count=2
function_arg	notifications [arg_2] ||| [function_1] [arg_2]	count=2
class	path ||| firewall	count=1
arg	templated during the ||| value templar	count=1
arg	datacenter ||| location firewall_policy_id firewall_dict	count=1
module	machine via the given ||| modules	count=1
module	global mysql variable ||| modules database mysql	count=1
function	from the proxy ||| proxy	count=1
arg	loaded via name it ||| name	count=1
function	possible [function] few ||| [function]	count=1
module	and handle ||| modules cloud centurylink	count=3
function	gets ||| get	count=6
module	if ||| system	count=2
arg	from the task if ||| task variables	count=1
function	init [function] corresponding ||| get sysv [function]	count=1
class	container config returns tuple ||| container	count=1
function	rule ||| rule	count=3
module	for special packages ||| modules packaging	count=1
arg	value if value is ||| value	count=1
arg	installed or not ||| name depot	count=1
function	function to convert ||| to	count=1
function	an import request ||| import task	count=1
module	for special ||| modules packaging	count=1
function	a backend [function_2] ||| [function_1] [function_2]	count=4
class	return details ||| net app cdotlun	count=1
module	create a ||| cloud	count=3
function	file from zone to ||| file	count=1
function	the wait argument ||| wait for	count=3
class	set ||| clc alert policy	count=1
function	named ||| update named	count=1
function_arg	[function_1] object prepared ||| [arg_2] [function_1]	count=2
function	backup ||| backup	count=1
function	when [function_2] ||| [function_2] [function_1]	count=6
class	execute the main ||| balancer	count=1
module	if missing ||| monitoring	count=1
arg	defined by [arg] ||| [arg]	count=2
class	method ||| azure rmmodule base	count=1
function	all plugins with the ||| all	count=1
function	creates an argument ||| retry argument	count=1
arg	[arg_1] the vars_cache ||| [arg_2] [arg_1]	count=4
function	library that's available ||| source	count=1
function_arg	generate a string containing [function_1] [arg_2] ||| [function_1] [arg_2]	count=4
arg	some ovirt entity ||| action entity	count=1
function	which will override those ||| override	count=1
function	lists the existing targets ||| list targets	count=1
module	and handle the ||| modules	count=3
function	retrieve all subclasses ||| all subclasses	count=1
module	new ttl and ||| cloud google	count=1
class	execute the main ||| clc load balancer	count=1
function_arg	check supplied [arg_2] ||| [function_1] module host [arg_2]	count=3
class	via the given ||| virt	count=1
module	for [module] matching command ||| [module]	count=1
module	the destination ||| web_infrastructure	count=1
function	volume from ||| volume	count=1
module	execution ||| network sros	count=2
function	secret ||| execute	count=3
arg	given router ||| router network	count=1
function	export if found ||| export	count=2
function	activate ||| activate	count=1
class	the system ||| rhsm	count=3
function	[function_1] a new ||| [function_2] [function_1]	count=2
function	[function_1] path on ||| [function_2] [function_1]	count=4
function	of a server ||| get server	count=3
arg	[arg] status ||| module rsp [arg]	count=3
function	about ||| get	count=1
class	retrieves rule ||| rule	count=1
module	in [module_2] ||| [module_1] [module_2]	count=1
arg	if value is ||| value	count=1
arg	a second ||| module pacman_path name state	count=1
function_arg	task to [arg_2] ||| [arg_2] [function_1]	count=1
module	spaces ||| plugins lookup	count=2
module	gets ||| network nxos	count=1
module	to receive updates from ||| modules packaging	count=1
module	delete an [module_2] ||| [module_1] [module_2]	count=4
arg	the given pattern according ||| pattern	count=1
function	ensures the given server ||| ensure	count=2
arg	the stdin filehandle ||| fh in_data	count=1
module	create ||| modules cloud amazon	count=1
function	dictionary ||| argument	count=1
function_arg	git [arg_2] ||| [arg_2] [function_1]	count=2
class	a new block with ||| block	count=1
function	privileges ||| database privileges	count=2
module	we've ||| plugins connection	count=2
function_arg	path for an init [function_1] [arg_2] ||| sysv [function_1] [arg_2]	count=1
class	rule [class_2] ||| [class_2] [class_1]	count=10
function	updated cache [function_2] ||| [function_2] [function_1]	count=1
function	do final [function] on ||| post [function]	count=1
function	public ip [function_2] ||| [function_1] [function_2]	count=4
arg	case of a location ||| location	count=1
function	of a custom ||| update custom	count=1
function	requested values and ||| argument values	count=1
class	connection nothing ||| connection	count=6
function	[function_1] [function_2] ||| [function_2] loadbalancer [function_1]	count=1
function	verifies that [function_2] ||| [function_1] [function_2]	count=2
function	with ||| with dict	count=1
class	and ||| args parser	count=1
function	api ||| api listener as	count=1
class	initialized with ||| connection	count=1
arg	bridge member if it ||| _bridgemems	count=1
function	service id ||| remove service	count=1
arg	[arg_1] name parameter ||| [arg_2] [arg_1]	count=4
function_arg	version of [arg_2] ||| [arg_2] [function_1]	count=2
arg	the value of follow_redirects ||| follow_redirects	count=1
function	performs tilde expansion ||| expand user	count=1
function_arg	boot volume [arg_2] ||| [arg_2] [function_1]	count=1
module	or alias or none ||| amazon	count=1
module	to the system ||| modules system	count=1
function	title ||| failure title	count=1
class	main code ||| clc	count=3
arg	server image ||| image exit	count=1
arg	given task ||| task	count=1
arg	user password ||| module user password	count=1
function	on the settings ||| run	count=1
function	modify an ||| modify	count=1
function	for boto ||| boto	count=1
arg	using the ||| module cli	count=3
function_arg	delete [arg_2] ||| [function_1] [arg_2]	count=2
function	vpc ||| vpc	count=2
arg	to a 2-tuple ||| connect_timeout	count=1
function	remove unused [function_2] ||| [function_2] [function_1]	count=1
function	is a [function_2] ||| [function_2] [function_1]	count=2
arg	it doesn't ||| parent_name group_description	count=1
module_class	logicmonitor [class_2] ||| [module_1] [class_2]	count=1
arg	rest api ||| server_params	count=1
function	creates a ||| create loadbalancerpool	count=1
function	branch does not yet ||| remote branch	count=1
arg	the desired state ||| timeout	count=1
function	if system ||| system	count=1
module	idemopotent function ||| modules	count=1
function	[function_1] mounted ||| [function_1] [function_2]	count=2
function	in new style ||| new style	count=1
function	a remote ||| remote	count=1
arg	done by ||| name ubuntumode	count=1
function	the alert ||| add alert	count=1
function	ensures that the ||| ensure	count=2
function	creates a nic ||| nic	count=1
function	[function_1] validation for ||| [function_1] [function_2]	count=2
arg	folder ||| folder container ttl	count=1
module	host we've ||| plugins	count=1
class	[class_1] aws ||| [class_2] [class_1]	count=1
arg	module ||| module secgroup remotegroup	count=1
module	vm ||| vmware	count=1
function	[function_1] [function_2] modules ||| [function_1] [function_2]	count=4
arg	ids ||| server_list message	count=1
function	[function_1] of ||| [function_2] balancer [function_1]	count=2
arg	response ||| response firewall_dict	count=1
module	this method ||| network netvisor	count=18
function	[function_1] a default ||| [function_1] [function_2]	count=2
function	set which ||| set task	count=1
function	requested values ||| values	count=1
class	this runs the task ||| task	count=1
function_arg	decrypt [arg_2] ||| [function_1] [arg_2]	count=2
arg	rest api ||| module server_params	count=1
arg	kinesis ||| client stream_name number_of_shards retention_period	count=1
class	the connection nothing ||| connection	count=6
class	we've been initialized ||| base	count=1
class	rhn redhat com ||| rhn	count=1
function	parse it as ||| parse	count=1
function	check supplied key ||| sanity check	count=1
module	system from all ||| module_utils	count=1
module	checks to ||| storage netapp	count=1
function	tuple if present ||| listener as tuple	count=1
arg	security group matching ||| name os_type	count=1
function	the snapshots removed ||| server snapshot absent	count=1
function	for the group ||| group	count=1
class	execute the main code ||| clc load balancer	count=1
module	for example the ||| modules cloud amazon	count=1
function	string containing host patterns ||| split host	count=1
module	status for [module_2] ||| [module_1] [module_2]	count=3
function	complete [function_2] ||| [function_2] requests [function_1]	count=6
arg	module ansible module object ||| module ec2 instance_ids state	count=1
function	unpause the machine ||| unpause	count=1
function_arg	requests to [arg_2] ||| [function_1] [arg_2]	count=2
function	and which actions ||| selector	count=2
arg	of events to monitor ||| events data	count=1
module	sets ||| cloud amazon	count=1
function	[function_1] wait ||| [function_2] [function_1]	count=1
function	the destination file ||| get	count=1
function	verifies [function_2] ||| [function_1] [function_2]	count=1
function	create a dict from ||| create rule dict from	count=1
module	method for example the ||| modules cloud	count=1
function	need to be ||| ids to remove	count=1
module	backend_service ||| modules cloud google	count=1
function	[function_1] data ||| [function_2] [function_1]	count=2
module_class	main [class_2] ||| [module_1] [class_2]	count=2
function	if changes are ||| change	count=1
module	docker ||| modules cloud docker	count=1
arg	note [arg] *must* be ||| [arg]	count=1
class	to lxd ||| connection	count=1
module	receive updates from ||| packaging	count=1
function	block [function_2] ||| [function_1] [function_2]	count=8
arg	play_context object ||| play_context all_vars	count=2
arg	the service name supplied ||| name	count=2
arg	certificate in [arg_2] ||| [arg_1] [arg_2]	count=4
function	the action ||| action	count=1
function_arg	keys [arg_2] ||| [function_1] [arg_2]	count=1
module	filter ||| filter	count=1
function	they are set which ||| set task	count=1
module	an account alias ||| cloud centurylink	count=1
arg	to get [arg_2] ||| [arg_2] [arg_1]	count=1
module	all of ||| os	count=1
module	system to receive updates ||| os	count=1
function	name keys and hostname ||| get	count=1
module	dash ||| network cumulus	count=2
class	signing ||| signing	count=1
class	network [class_2] ||| [class_2] [class_1]	count=6
function	most ||| get most	count=1
class	the main ||| lxc container management	count=1
function_arg	the aws [arg_2] ||| [arg_2] [function_1]	count=1
class	host we've ||| connection	count=1
module	[module_1] list ||| [module_1] [module_2]	count=10
class	current system returns ||| rhsm	count=1
module	system to receive ||| modules packaging os	count=1
class	machine via ||| virt	count=1
function	validate that the ||| validate	count=1
class	a task if specified ||| task	count=1
function	get the vm ||| get vm	count=3
class	deletes ||| clc firewall policy	count=1
function	present but disabled ||| disabled	count=1
module	logicmonitor ||| monitoring	count=3
module	'&' for quoted ||| plugins	count=1
function	[function_1] service from ||| [function_2] [function_1]	count=1
function	header [function] auth ||| [function] auth	count=1
function	stringed numerical value suitable ||| numerical	count=1
function	connection close has ||| close	count=1
arg	router ||| module router network	count=1
function	local rule [function_2] ||| [function_1] [function_2]	count=2
function	a file over http ||| file	count=1
function_arg	[function_1] ssh-key options ||| [arg_2] [function_1]	count=1
class	container ||| parameters	count=1
module	code path ||| modules	count=3
function	[function_1] to a ||| [function_1] [function_2]	count=1
arg	installed or ||| module name depot	count=1
arg	the play ||| play	count=3
module	get ||| modules cloud google	count=2
function	save a ||| fetch	count=2
function	set the remote user ||| do remote user	count=1
class	task if specified and ||| task executor	count=1
function	version example ||| version	count=1
function	the current instance's availability ||| availailability	count=1
arg	set of server_ids ||| server_ids	count=1
arg	a new or modifies ||| module vpc_conn	count=1
function_arg	expected path for an [function_1] [arg_2] ||| [function_1] [arg_2]	count=2
function	when a task is ||| v2 runner on	count=1
arg	a remote path ||| path	count=1
function	[function_1] and ||| [function_2] [function_1]	count=7
arg	all of instance newgroup ||| newgroup	count=1
function	server [function_2] ||| [function_1] [function_2]	count=3
module	or none ||| modules cloud amazon	count=1
function	of the given authorization ||| get	count=1
module	a list of ||| cloud amazon	count=2
function	creates an argument ||| argument	count=2
class	and handle the ||| firewall	count=1
function	to parse [function_2] ||| [function_2] [function_1]	count=4
module	for example the ||| modules cloud	count=1
function	difference between ||| diff	count=1
class	code path and handle ||| load	count=1
function	complete ||| complete	count=3
function	copies ||| transfer	count=1
class	network ||| docker network	count=1
function	[function_1] from ||| [function_1] [function_2]	count=15
function	entry point for module ||| main	count=1
arg	assign the specified host ||| host result_item	count=1
arg	[arg_1] command ||| [arg_2] [arg_1]	count=1
module	receive updates from subscription-manager ||| module_utils	count=1
module	string typically passed as ||| mysql	count=1
function_arg	enables notifications [arg_2] ||| [function_1] [arg_2]	count=2
function	protocol policy ||| protocol policy	count=2
function	save a [function_2] ||| [function_2] [function_1]	count=6
module_class	the main [class_2] ||| [module_1] [class_2]	count=4
function	be one of - ||| path	count=1
class	server based on ||| clc modify server	count=2
function	lambda function ||| lambda	count=1
function_arg	[function_1] provided pool ||| [arg_2] [function_1]	count=3
class	path and handle the ||| clc load balancer	count=1
function	lxc ||| lxc	count=1
function	[function_1] v1 ||| [function_1] [function_2]	count=1
class	load [class_2] ||| [class_1] [class_2]	count=2
class	a task [class] one ||| [class]	count=1
arg	retrieve all ||| check_mode	count=1
function	[function_1] from ||| security group [function_1] [function_2] names	count=1
function_arg	network id [arg_2] ||| [arg_2] [function_1]	count=4
arg	be templated during the ||| value templar	count=1
arg	with [arg] ||| volume [arg]	count=1
class	the connection nothing to ||| connection	count=6
function	if the wait argument ||| wait for	count=3
arg	associated with a particular ||| minutes	count=1
function	an instance [function_2] ||| [function_1] [function_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] content vimtype [arg_2]	count=10
function	by the ||| parse key id	count=1
function	required_together argument ||| rax required together	count=1
function	enabled action ||| enabled	count=1
function	path on a ||| path	count=1
module	filter for ||| filter	count=1
function	[function_1] ip removed ||| [function_1] [function_2]	count=5
arg	extract ||| fail_on_error	count=1
class	main code ||| clc load balancer	count=1
module	the ||| cloud lxc	count=2
class	to the ||| connection base	count=1
function_arg	changed items [arg_2] ||| [arg_2] [function_1]	count=3
function	create and open a ||| create	count=1
function	include ||| include	count=1
function	container ||| get container	count=2
function	a container ||| get container	count=1
function	absolute path of ||| get path	count=2
function	it is ||| from	count=1
module	from ||| modules packaging	count=1
function	[function_1] the value ||| [function_1] [function_2]	count=1
function	[function_1] rule ||| [function_1] matching [function_2]	count=1
function	associate the alert ||| add alert	count=1
class	to ansible module ||| module	count=1
function	a valid ||| valid	count=3
class	removed remotely ||| watch event rule	count=1
function	repo removes ||| repo	count=1
arg	if the host ||| module host	count=1
arg	[arg_1] cert_file ||| [arg_1] [arg_2]	count=3
module	initialized ||| plugins connection	count=2
module	to receive ||| os	count=1
function	[function] library has ||| [function] supports param in	count=2
module	a state suitable ||| cloud	count=1
function	temporary path ||| make tmp path	count=2
function_arg	named ports [arg_2] ||| [arg_2] [function_1]	count=2
function	[function] in ||| add group vars [function]	count=3
module	code path and handle ||| modules cloud	count=3
arg	servers ||| server_ids package_id package_params	count=1
arg	ec2 instance and return ||| ec2 module	count=1
module	and ||| web_infrastructure	count=1
function	loads a file ||| load	count=1
function	environ ||| environ	count=1
function	activate a package if ||| activate	count=1
class	parameters vs existing container ||| container	count=1
class	subscription-manager ||| rhsm	count=2
function	with the [function_2] ||| [function_1] [function_2]	count=1
arg	bridge member if ||| _bridgemems	count=1
module	lxd nothing ||| connection	count=1
function	encrypted data ||| is encrypted	count=1
module	return ||| web_infrastructure	count=1
function	post validation of ||| post validate environment	count=2
function	copies the module ||| transfer data	count=1
module	to see if a ||| modules cloud centurylink	count=1
class	and handle the ||| group	count=1
arg	true if the data ||| data	count=2
function	look up the ubuntu ||| ubuntu	count=1
function	make the keys the ||| keys	count=1
class	the main code path ||| clc firewall	count=1
module	removes metadata keys ||| modules cloud rackspace	count=1
function	from the ||| get	count=1
arg	key is sensible ||| sshkeygen	count=1
function	[function_1] limits ||| [function_1] [function_2]	count=1
arg	parse the ports ||| ports	count=1
function	on the name of ||| get	count=1
function	the api call ||| axapi call v3	count=1
module	status for a ||| modules cloud	count=2
function	values match ||| records match	count=1
function	[function_1] present ||| [function_1] [function_2]	count=10
arg	and values specified ||| cf	count=1
function	vm ||| vm	count=1
class	an azure object's ||| azure rmmodule	count=1
class	signing [class_2] ||| [class_2] [class_1]	count=1
function	search ||| search	count=1
module	code ||| cloud	count=3
class	registration ||| rhsm	count=1
arg	or [arg_2] ||| [arg_2] [arg_1]	count=3
class	task without the task ||| task	count=1
module	self ||| system	count=1
function_arg	[function_1] [arg_2] ||| [function_1] module host key [arg_2]	count=9
function	and handle the request ||| process request	count=3
function_arg	[function_1] [arg_2] ||| [function_1] number [arg_2]	count=4
function	the repo removes old ||| addmodify repo	count=1
function	upper case ||| fix case	count=1
arg	this is used during ||| in_str	count=1
module	start the machine via ||| cloud	count=1
module	list for ||| modules cloud	count=1
function	the balancer as a ||| balancer	count=1
function_arg	mounted [arg_2] ||| [arg_2] [function_1]	count=3
function	fetch [function_2] ||| [function_2] [function_1]	count=19
class	nothing ||| connection	count=8
function	repo removes old repos ||| addmodify repo	count=1
function	anti affinity ||| get aa	count=1
function	lists the roles installed ||| list	count=1
function	export if found fail ||| get export	count=1
arg	the user exists ||| client user db_name	count=1
function	interface ||| interface	count=1
function	all ovirt facts ||| ovirt facts	count=1
class	nothing to do for ||| connection	count=1
module	for the ||| modules cloud amazon	count=3
arg	modifies ||| vpc_conn	count=1
module	the system to ||| packaging	count=1
function	difference of ||| dict diff	count=1
function	details about ||| get	count=1
module	plugins should implement this ||| plugins	count=1
function	loads variables ||| get hostgroup vars	count=1
module	if [module_2] ||| [module_1] [module_2]	count=5
arg	folder to cloud files ||| cf folder container	count=1
function	override post [function_2] ||| [function_2] [function_1]	count=9
arg	stdin filehandle ||| fh in_data	count=1
function	final [function] on the ||| post [function]	count=1
module	authorization for the ||| modules web_infrastructure	count=2
function	handlers this is ||| handlers	count=1
module	for getting ||| modules cloud	count=1
class	ansible galaxy ||| galaxy cli	count=1
class	management ||| management	count=3
function	unsubscribe a system ||| unsubscribe	count=2
function	if connection ||| connection	count=1
function	installer ||| installer	count=1
function_arg	wait for [arg_2] ||| [function_1] client stream_name [arg_2]	count=2
class	lxc ||| connection	count=1
function_arg	volume [arg_2] ||| [function_1] [arg_2]	count=2
function	if parted ||| check parted	count=1
arg	terms contains a ||| terms variables	count=1
module	ansiblemodule used for ||| modules	count=1
function	the galaxy info ||| load galaxy info	count=2
function	import request ||| import task	count=1
function	resource ||| has different resource	count=1
arg	that they desire to ||| table privs	count=1
function	digest of ||| digest from	count=1
module	receive updates from ||| modules packaging os	count=1
function	[function_1] [function_2] id ||| [function_1] [function_2] id	count=3
function_arg	servers in ||| servers module	count=1
module	in a ||| modules cloud docker	count=1
module	to the host we've ||| plugins connection	count=1
function	variables set on the ||| set host	count=1
arg	vpc ||| vpc	count=1
function	retrieve all subclasses of ||| get all subclasses	count=1
class	execute ||| clc load balancer	count=2
function	calculates a multipart upload ||| calculate multipart	count=1
function_arg	[function_1] account ||| [arg_2] [function_1]	count=5
class	updates the rule ||| rule	count=1
module	for a specific ||| modules	count=1
function	updates nodes to ||| set loadbalancernodes	count=1
function	subnets each identified ||| subnets	count=1
module	from cloud files ||| modules cloud	count=1
function	valid [function] as defined ||| gen candidate [function]	count=1
function	if changes are required ||| state change	count=1
module_class	[module_1] aws ||| [module_1] [class_2]	count=1
module	for an account alias ||| modules cloud	count=1
class	[class] is ||| [class]	count=6
module	destination file ||| modules web_infrastructure	count=1
function	proxy protocol enabled ||| proxy protocol policy	count=1
function	dict from ||| dict from	count=1
module	and ||| cloud	count=3
class	code path and handle ||| firewall policy	count=1
function	function which loads the ||| load inventory	count=1
function_arg	spot requests [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] request with dict [arg_2]	count=9
module_class	[module_1] [class_2] ||| [module_1] [class_2]	count=106
class	of the server ||| clc server	count=1
module	only needed for special ||| modules packaging	count=1
function	public ip removed ||| public ip absent	count=3
function	[function_1] the latest ||| [function_1] [function_2]	count=3
class	details ||| app	count=1
function	the include ||| include	count=1
arg	items specified and ||| items	count=1
module	the main method ||| cloud lxc	count=1
function	size ||| disk size	count=1
function_arg	[function_1] a piece ||| [arg_2] [function_1]	count=2
function	to attributes for ||| validate attributes	count=1
function	revert ||| revert	count=1
module	connection ||| connection	count=9
arg	is templated ||| attr value templar	count=1
module	returns a ||| modules cloud	count=1
class	data network [class_2] ||| [class_2] [class_1]	count=1
module	an ||| cloud amazon	count=2
arg	play ||| loader play	count=1
function	[function_1] lambda function ||| [function_1] [function_2]	count=1
class	from the base ||| base	count=1
function	find a ||| find	count=7
class	creates a new block ||| block	count=1
class	supports ||| connection	count=1
arg	ids ||| server_list	count=1
arg	for the server ||| cloud server	count=1
function	creates or ||| create record	count=1
module	system to receive updates ||| modules packaging os	count=1
function	retrieves the anti ||| anti	count=1
arg	rest api to ||| server_params	count=1
module	machine via ||| cloud misc	count=1
function	remove unused ||| remove unused	count=1
module	filter files ||| files	count=2
module	details about the ||| storage	count=1
function_arg	bind mounted [arg_2] ||| [arg_2] [function_1]	count=3
module	[module_1] [module_2] ||| [module_2] cloud [module_1]	count=1
arg	pacman -si output and ||| pacman_output	count=1
arg	more packages if ||| packages	count=1
function_arg	[function_1] git ||| [function_1] [arg_2]	count=2
arg	ec2 ||| ec2 module	count=1
arg	available hosts [arg] by ||| [arg]	count=1
arg	to remove a user ||| user	count=1
class	supplied vault ||| vault cli	count=1
function_arg	[function_1] or consumed ||| [arg_2] [function_1]	count=2
function	[function_1] any ||| [function_1] [function_2]	count=1
class	request a ||| acmeclient	count=1
function_arg	the keys [arg_2] ||| [arg_2] [function_1]	count=1
arg	found fail module if ||| module	count=1
arg	given pattern ||| pattern	count=1
function	instance [function_2] ||| [function_2] [function_1]	count=3
function	read the value ||| read	count=1
module	value for a ||| modules	count=1
class	id or ||| container manager	count=1
module	start the ||| misc	count=1
function	and get ||| get	count=3
function	sets ||| set	count=2
function_arg	[function_1] ec2 instance ||| [function_1] [arg_2]	count=2
function	revision and url ||| revision	count=1
arg	ovirt entity ||| action entity	count=1
function	reads a ||| parseoptions	count=1
function_arg	the aws tags ||| aws format tags	count=1
arg	extract ||| headfile remote module fail_on_error	count=1
function	become ||| become	count=2
class	vault ||| vault	count=2
module	create a list of ||| cloud	count=1
module	previously registered ||| os	count=1
module	[module_1] domain ||| [module_1] [module_2]	count=6
class	list ||| play	count=1
function	encryption of ebs ||| volume encryption	count=1
function	get installed ||| get installed	count=1
arg	terms contains a string ||| terms variables	count=1
function	the requested values ||| values	count=1
function	alert policy to ||| add alert policy to	count=1
function	when ||| string	count=1
arg	cmd ||| cmd	count=1
arg	at the beginning ||| raw_key rank	count=1
module	return details about the ||| storage netapp	count=1
function_arg	[function_1] typetalk ||| [function_1] [arg_2]	count=2
module	it ||| modules	count=1
function	add ||| add host key	count=1
arg	if [arg] used by ||| version connection [arg]	count=1
module	if the ||| plugins	count=1
function	the connection close has ||| close shell	count=1
arg	stackdriver ||| key revision_id deployed_by	count=1
function	produces a remote ||| remote	count=1
class	task list ||| play iterator	count=1
function	from the ||| url get	count=1
module	the host ||| plugins	count=1
function_arg	[function_1] lb ||| [arg_2] [function_1]	count=4
function	it ||| get	count=1
function	version example formats ||| name version	count=1
class	[class_1] affinity ||| [class_2] [class_1]	count=5
function	[function_1] latest version ||| [function_1] [function_2]	count=3
module	the ami for ||| modules cloud	count=1
function	find ||| rax find server	count=1
function	information ||| info	count=3
function	policy to ||| policy to	count=6
arg	hostnames [arg] ||| hostnames [arg]	count=2
class	server based on ||| clc server	count=1
arg	in the datastructure which ||| ds	count=1
class	checks the in ||| module	count=1
function	to the destination ||| get	count=1
class	a hash ||| host	count=2
function	metaclass ||| add metaclass	count=1
function	parted needs a label ||| parted label	count=1
arg	given router ||| router	count=1
function	the repo ||| addmodify repo	count=1
arg	post an ||| github_user github_repo reference role_name	count=1
module	the netvisor ||| modules network netvisor	count=5
arg	[arg_1] dict_b return ||| [arg_1] [arg_2]	count=2
function	for assignment of ||| get	count=1
function	policies [function_2] ||| [function_2] [function_1]	count=2
function	different and a list ||| different	count=1
module_class	for the [class_2] ||| [module_1] cloud watch event [class_2]	count=1
function_arg	tempfile [arg_2] ||| [function_1] [arg_2]	count=1
function	check if [function_2] ||| [function_1] [function_2]	count=2
module	an amazon resource ||| cloud amazon	count=2
function	network is in ||| is vpc network	count=1
function	the device supports ||| close	count=1
function	render this crontab as ||| render	count=1
arg	of follow_redirects [arg_2] ||| [arg_2] [arg_1]	count=1
module	a ||| modules cloud centurylink	count=12
module_class	main method ||| lxd lxdcontainer management	count=1
function	a path ||| path	count=3
function	and [function] those that ||| [function] differing	count=1
arg	existence of ||| name cidr_block	count=1
module	given ||| cloud	count=5
function	tapped ||| tapped	count=1
class	formatted into 80 ||| lib	count=1
module_class	all backends ||| cloud amazon elb	count=1
function	update method ||| instance update	count=1
function	[function_1] glob ||| [function_2] [function_1]	count=2
module_class	if a [class_2] ||| [module_1] centurylink clc [class_2]	count=1
function	tag options ||| tags	count=1
module	filter for jinja2 to ||| filter	count=1
arg	sensible host [arg_2] ||| [arg_2] [arg_1]	count=6
class	[class_1] balancer ||| [class_1] [class_2]	count=2
class	until server ||| clc modify server	count=1
function	[function_1] loads ||| [function_2] [function_1]	count=6
arg	to have the ||| propertyhash	count=2
module	specific value for a ||| modules system	count=1
function	salt for ||| salt	count=1
function	create and open ||| create	count=1
class	the main code ||| load balancer	count=1
class	and handle ||| clc load balancer	count=1
arg	the task ||| task variables templar	count=1
module	database ||| database	count=1
function	verifies that a ||| verify	count=1
function_arg	[function_1] a path ||| [function_1] [arg_2]	count=4
function	to get [function_2] ||| [function_1] [function_2]	count=1
function	retention of ||| retention	count=1
arg	security ||| location name os_type	count=1
class	handle the ||| clc	count=3
class	of filesystem by ||| efsconnection	count=1
arg	modifies an ||| vpc_conn	count=1
arg	[arg] character ||| [arg]	count=1
class	remote ||| action base	count=5
function	type of ||| type	count=2
function	[function] dicts args ||| dict to boto3 [function]	count=1
function	if boto ||| boto	count=3
function	returns the variables with ||| get	count=1
function	[function_1] id ||| [function_1] [function_2]	count=8
arg	elbs and wait ||| wait	count=1
function_arg	difference of [arg_2] ||| [arg_2] [function_1]	count=1
module	destination file ||| web_infrastructure	count=1
module	a generator object for ||| modules	count=1
module_class	a nxapi json ||| module_utils nxapi	count=1
function	of the documentation ||| get	count=1
class	main code path and ||| group	count=1
function	[function_1] spec ||| anti affinity policy [function_1] [function_2]	count=1
module	object for ||| modules	count=2
arg	if the service name ||| name	count=1
module	updates from ||| packaging	count=1
arg	account alias by calling ||| alias	count=1
module	receive ||| packaging	count=1
function	information directly from ||| info	count=1
module	return the ||| modules	count=1
function	find a list ||| find	count=1
module	from the ||| modules cloud	count=1
function	flat dict ||| ansible dict	count=2
function	retention ||| retention	count=1
module	of [module] authorization header ||| [module]	count=1
function	of host task tuples ||| get	count=1
arg	datacenter ||| location firewall_policy_id	count=2
module	the main code ||| cloud	count=3
function	idemopotent function to create ||| create	count=1
function	the alert policies ||| alert policies	count=2
module_class	[module_1] method ||| [module_1] [class_2]	count=6
module	wait for a group ||| modules cloud amazon	count=1
function	file obj ||| file	count=1
arg	not be templated during ||| templar	count=2
class	the task with the ||| task	count=1
function	[function_1] pool ||| [function_2] [function_1]	count=2
module	given name and ||| cloud centurylink	count=1
function	helper function which loads ||| load inventory	count=1
module	a lambda ||| modules cloud	count=1
arg	way for all modules ||| rax_module region_required	count=1
function	service ||| remove service	count=2
arg	wait ||| wait	count=1
function	a local ||| local	count=1
function	[function_1] alias ||| [function_2] [function_1]	count=3
module	index and working ||| modules source_control	count=2
function_arg	[function_1] blob ||| [function_1] file [arg_2]	count=1
function	collector ||| collector by description	count=2
arg	perform their tasks ||| tmp task_vars	count=1
function	module error title ||| title from	count=1
arg	repo ||| module repo dest	count=1
class	and ||| group	count=1
class	passed to ansible module ||| base module	count=1
module	if package ||| modules packaging os	count=1
function_arg	ensure that [arg_2] ||| [function_1] is absent [arg_2]	count=1
function	in version ||| get template with version	count=1
function	and the privileges ||| database privileges	count=1
function	the type ||| type	count=2
function	used to schedule ||| schedule servicegroup svc	count=1
function	to the [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] module ||| [function_1] [function_2]	count=1
arg	is [arg] ||| [arg]	count=1
module	[module_1] an ||| [module_1] [module_2]	count=6
class	retrieves rule and ||| cloud watch event rule manager	count=1
function	[function_1] when executing ||| [function_2] [function_1]	count=7
module	receive updates from ||| modules packaging	count=1
function	subnets each ||| subnets	count=1
function	target state from ||| fetch aws state	count=1
function	returns ||| get vars	count=2
function	return the [function_2] ||| [function_2] [function_1]	count=2
module	to lxd nothing ||| plugins	count=1
function	template and parameters ||| template	count=1
module	handle the ||| modules cloud centurylink	count=3
function	targets that need to ||| to remove	count=1
arg	[arg] by ||| [arg]	count=2
arg	bonus feature vmid = ||| vmid	count=1
function	hostnames for a ||| hosts	count=1
arg	service or ||| module	count=1
function	return ||| get	count=20
arg	installed a second ||| pacman_path name	count=1
class	server based on ||| server	count=1
function	search for assignment of ||| get	count=1
module	table has all ||| amazon	count=1
class	paginated ||| cloud front service manager	count=1
arg	and ||| module	count=1
module	the lxc ||| connection	count=1
arg	the vars_cache ||| varname	count=1
function	changes are required ||| state change	count=1
module	set it to self ||| modules system	count=1
function	[function_1] ip removed ||| [function_2] [function_1]	count=5
module	bindings if ||| cloud	count=1
class	validation that [class] done ||| [class]	count=1
function	have the ||| check	count=1
module	the key authorization ||| web_infrastructure	count=1
arg	pattern try to ||| host_pattern host_data	count=1
module	execution ||| modules network iosxr	count=1
function_arg	the selinux [arg_2] ||| [function_1] exists sefcontext [arg_2]	count=2
arg	any submodules ||| module dest track_submodules	count=1
module	to ||| packaging os	count=2
function	of ||| of	count=2
function_arg	the expected path for [function_1] [arg_2] ||| [function_1] [arg_2]	count=2
arg	in a datacenter by ||| module datacenter	count=1
arg	and wait ||| wait	count=1
arg	in cert_file remains valid ||| module cert_file	count=1
module	mysql ||| modules database mysql	count=1
function	import request ||| create import	count=1
function	an import request ||| create import task	count=1
arg	connect to a 2-tuple ||| connect_timeout	count=1
module	if ||| modules cloud	count=3
function	for all domains ||| do challenges	count=1
function	style ||| style args	count=2
function	true if connection ||| connection	count=1
module	a single ||| modules cloud	count=1
arg	device ||| check_rc	count=1
arg	false_val ||| false_val	count=1
arg	iterator so ||| enabled source	count=1
function	[function_1] remote file ||| [function_1] [function_2]	count=2
function	a base argument specifiation ||| argument spec	count=1
class	main code ||| firewall policy	count=1
class	playbook ||| playbook	count=2
function	creates new [function_2] ||| [function_2] [function_1]	count=1
function_arg	of the [arg_2] ||| [arg_2] [function_1]	count=10
function	run when a task ||| on	count=1
module	system as directed ||| module_utils	count=1
class	role ||| galaxy	count=1
function	if they are set ||| set task and variable	count=1
arg	getfacl/setfacl ||| module mode path follow	count=1
function	[function_1] password ||| [function_2] [function_1]	count=4
module	system ||| os	count=2
class	the selector this ||| base selector	count=2
function_arg	[function_1] data out ||| [function_1] [arg_2]	count=1
function	changed [function_2] ||| [function_2] [function_1]	count=1
function	retrieve a network domain ||| get network domain	count=1
function	a dict [function_2] ||| [function_1] [function_2]	count=2
module	path ||| centurylink	count=3
class	we've been initialized ||| connection	count=1
function	[function_1] by name ||| [function_2] [function_1]	count=2
module	set all of ||| cloud amazon	count=1
module	for ||| module_utils	count=1
function	do pipelining ||| pipelining	count=1
function	that need to be ||| ids to remove	count=1
function	create a ||| create content	count=1
function_arg	[function_1] directory ||| [function_1] container_path [arg_2]	count=1
function	from security group ||| from	count=1
arg	raised in case ||| signum frame	count=1
function	executes the ||| run	count=7
module	database ||| database mongodb	count=1
module	the lxc nothing ||| connection	count=1
function	downtime for all hosts ||| servicegroup host downtime	count=1
arg	a service or ||| module	count=1
function	network ||| get network	count=1
class	of the server based ||| modify server	count=2
class	over all sources ||| sources	count=1
class	the supplied vault ||| vault cli	count=1
function	information from ||| info	count=2
module	list ||| amazon	count=3
module	all of the ||| cloud amazon	count=1
module	[module_1] system ||| [module_1] [module_2]	count=10
arg	and kickstart ||| kickstart	count=1
arg	in cert_file remains ||| module cert_file	count=2
module	from here to ||| cloud	count=2
function	newlines ||| count newlines from	count=1
arg	doesn't ||| group_description	count=1
module	and handle ||| cloud	count=3
function	list the ||| list	count=1
module	remote device and return ||| module_utils	count=3
class	execute the ||| balancer	count=1
class	block until server ||| server	count=1
module	return ||| cloud google	count=1
module	make a call to [module_1] [module_2] ||| [module_1] [module_2]	count=2
function	[function_1] deploy event ||| [function_1] [function_2]	count=1
function	unused ||| unused	count=1
class	when using ||| cli	count=1
module	for the given name ||| modules cloud centurylink	count=1
class	this checks the in ||| module	count=1
module	for autoscale group deletion ||| modules cloud	count=1
class	method ||| container	count=1
function	[function_1] [function_2] ||| anti affinity policy [function_1] [function_2]	count=1
arg	datacenter and account alias ||| location	count=1
module	check for ||| modules	count=4
arg	if dict_a in dict_b ||| dict_a dict_b	count=1
function	[function_1] from a ||| [function_1] [function_2]	count=4
function	newest version of ||| get	count=1
function	a stack while ||| stack	count=1
class	previously registered ||| rhn	count=1
arg	cpu ||| cpu	count=1
class	data [class_2] ||| [class_2] [class_1]	count=2
function	alarm handler ||| alarm handler	count=2
function	[function_1] file to ||| [function_1] [function_2]	count=2
function	wait ||| wait for	count=3
function	returns the [function_2] ||| [function_1] error [function_2]	count=1
function	if any deletes ||| delete	count=1
function	a list of targets ||| targets	count=1
class	files in ||| module	count=1
function	stop the [function_2] ||| [function_2] [function_1]	count=2
function_arg	[function_1] in a ||| [arg_2] [function_1]	count=1
class	the main ||| clc firewall policy	count=1
class	rule and targets are ||| watch event rule manager	count=1
module	[module_1] amazon ||| [module_2] [module_1]	count=1
module	on the system this ||| modules system	count=1
class	process ||| clc public ip	count=1
arg	privileges that a user ||| cursor user	count=2
class	or updates the given ||| manager	count=1
function	list of hostnames for ||| list hosts	count=1
function	tags to a boto3 ||| boto3 tag	count=1
class	[class] combined with ||| docker [class]	count=3
function	do pipelining ||| is pipelining	count=1
function_arg	[function_1] name ||| [arg_2] [function_1]	count=1
class	of ||| clc blueprint package	count=1
function	and values match ||| records match	count=1
arg	the given vmid ||| vmid	count=3
arg	convert the given flag ||| flag	count=1
function	of host task ||| get	count=1
module	the index and ||| modules	count=1
function	a rule ||| rule	count=1
module	system from all subscribed ||| module_utils	count=1
arg	restriction this is used ||| restriction	count=1
arg	a folder to ||| folder container ttl	count=1
function	file from lxc to ||| file	count=1
class	executes a haproxy command ||| haproxy	count=1
class	connection nothing to do ||| connection	count=6
arg	if it doesn't ||| group_description	count=1
class	handle the ||| clc firewall policy	count=1
function	info ||| info	count=2
class	new block with ||| block	count=1
function	and url of ||| get	count=1
class	wait ||| blueprint package	count=1
function	to update ||| update	count=2
arg	standard way for all ||| rax_module region_required	count=1
function	end of a ||| end	count=1
function_arg	[function_1] in ||| [function_1] [arg_2]	count=13
function_arg	[function_1] iterator ||| [arg_2] [function_1]	count=3
module	a [module_2] ||| [module_1] [module_2]	count=30
module	[module_1] amazon ||| [module_1] cloud [module_2]	count=1
function	[function_1] requests ||| [function_2] [function_1]	count=3
arg	line to ||| line	count=1
module	[module_1] amazon resource ||| [module_2] [module_1]	count=1
module	combines the non-interactive zypper ||| modules packaging os	count=1
module	updates from subscription-manager ||| packaging os	count=1
class	[class_1] and ||| [class_2] [class_1]	count=6
arg	a second ||| pacman_path	count=1
arg	(ex '2k' => 2048) ||| default_unit isbits	count=1
module	wait for [module_2] ||| [module_1] [module_2]	count=6
arg	host to the format ||| host	count=1
function	with the request ||| get request with	count=1
arg	new object collection item ||| module collection	count=1
module	for differences ||| modules	count=3
arg	in no_log_strings from ||| no_log_strings	count=1
function	set on the host ||| set	count=1
module	updates from subscription-manager ||| packaging	count=1
function	name [function_2] ||| [function_2] by [function_1]	count=2
function	a file from lxc ||| file	count=1
function	[function_1] spec ||| [function_1] [function_2]	count=11
class	the ansible galaxy ||| galaxy cli	count=1
function	[function_1] hipchat v2 ||| [function_2] [function_1]	count=1
function_arg	notifications [arg_2] ||| [arg_2] [function_1]	count=2
function	version example ||| name version	count=1
arg	task if they ||| task variables templar	count=1
class	of ||| variable manager	count=1
function	ids installed in ||| ids	count=1
module	a list ||| cloud amazon	count=4
arg	to choose where to ||| remote_path	count=3
function_arg	the file [arg_2] ||| [arg_2] [function_1]	count=1
module	line for writing a ||| modules	count=1
class	file ||| acmeclient	count=1
function	standard limitations [function] apply ||| [function]	count=1
function	the named ports ||| update named ports	count=2
function	the requested values and ||| values	count=1
function	port ||| port	count=4
function	[function_1] [function_2] ||| core [function_1] [function_2]	count=1
function	[function_1] deploy ||| [function_1] [function_2]	count=1
class	execute the main ||| load balancer	count=1
function	the function qualifier as ||| qualifier	count=1
class	that [class] done ||| [class]	count=1
function	custom ||| custom	count=1
arg	checking if the new ||| old_parameters new_parameters	count=1
function	the balancer [function_2] ||| [function_2] [function_1]	count=2
function	remove the value ||| remove value	count=3
function	a class factory ||| redirect handler factory	count=2
function	an ec2 connection ||| ec2 connect	count=1
function	revision [function_2] ||| [function_2] [function_1]	count=1
arg	hosts in ||| arg	count=1
function	[function_1] dict of ||| [function_2] [function_1]	count=1
function	the alert policy exists ||| alert policy exists	count=1
function	the clc ||| clc	count=7
function	read information and transform ||| read	count=7
arg	the dict passed ||| name passed	count=1
class	of the task ||| task	count=3
function	self group ||| group	count=1
function	used to schedule downtime ||| schedule host svc downtime	count=1
module	an account ||| cloud	count=1
function	return filesystem ||| get filesystem	count=2
module	filter for jinja2 ||| filter	count=1
module	start ||| modules	count=1
function	by the uuid ||| by uuid	count=1
function	of key ids ||| shorten key ids	count=2
arg	attributes from the task ||| task	count=1
arg	the module ||| module	count=2
function	available on ||| available	count=1
function	then write ||| write	count=1
arg	request ||| request	count=1
module	by ||| cloud	count=4
module	the main code path ||| centurylink	count=3
arg	is sensible [arg_2] ||| [arg_2] [arg_1]	count=4
module	exists returns a ||| modules	count=1
function	name keys and ||| get	count=1
function	[function_1] the properties ||| [function_2] [function_1]	count=2
function_arg	run the [arg_2] ||| [arg_2] [function_1]	count=1
arg	or return a ||| module	count=1
class	and handle ||| load balancer	count=1
module	previously registered ||| modules packaging os	count=1
function_arg	security group [function_1] [arg_2] security group names are ||| [function_1] names [arg_2]	count=1
arg	the name parameter ||| name	count=1
function	[function_1] data matches ||| [function_1] [function_2]	count=3
class	main code path ||| clc group	count=1
arg	list of task vars ||| vars	count=1
module	in ||| cloud amazon	count=1
function_arg	items [arg_2] ||| [function_1] baselist [arg_2]	count=2
function	path of the ||| get dhcp	count=2
function_arg	backend service [arg_2] ||| [arg_2] [function_1]	count=1
arg	adds ssl_certificate_id to ||| listener	count=1
module	all ||| os	count=1
function_arg	[function_1] status to ||| [arg_2] [function_1]	count=1
function	build out ||| build	count=1
function	[function_1] a different ||| [function_1] [function_2]	count=3
arg	the entity is 'absent' ||| entity search_params	count=1
class	targets ||| cloud watch event	count=1
module	state for the ||| modules	count=1
function	zone by name or ||| zone by name	count=1
arg	standard way for ||| rax_module region_required	count=1
class	the machine ||| virt	count=1
class	if an anti affinity ||| anti affinity	count=1
function	unused [function_2] ||| [function_1] [function_2]	count=1
module	an account ||| cloud centurylink	count=1
arg	the datastructure ||| ds	count=3
arg	is none the ||| content vimtype	count=2
function	by the user ||| parse key id	count=1
module	update ||| packaging os	count=1
module	string typically passed ||| modules database mysql	count=1
arg	the host ||| host	count=2
arg	repo ||| repo dest	count=1
function	need to ||| remote target ids to remove	count=1
function	ubuntu ami ||| ubuntu ami	count=1
arg	the status ||| status wait_timeout	count=1
function	[function_1] time ||| [function_1] [function_2]	count=6
module	nodes exist [module] ||| [module]	count=3
function	the attributes of ||| get	count=1
function	[function_1] [function_2] ||| [function_1] matching [function_2]	count=3
arg	single line and tries ||| line	count=1
class	path and handle the ||| clc firewall	count=1
module	a previously ||| modules packaging os	count=1
function	account if ||| account	count=1
arg	rc stdout [arg] stderr ||| [arg]	count=1
function	to hipchat v2 ||| v2	count=1
module_class	[module_1] key ||| [module_1] public [class_2]	count=1
arg	the ec2 ||| ec2	count=1
class	register ||| base selector	count=1
function	[function_1] the file ||| [function_1] inventory [function_2]	count=1
function	of clc server ||| clc	count=1
arg	host and [arg_2] ||| [arg_2] [arg_1]	count=1
arg	the given pattern ||| pattern	count=1
class	existing network ||| docker network	count=1
function	used to schedule ||| schedule servicegroup	count=2
module	output into a ||| plugins action	count=1
module	[module] user ||| [module]	count=1
arg	pool on ||| lb_id pool_id	count=1
function	mount point ||| mount	count=1
function	[function_1] create ||| [function_2] [function_1]	count=2
arg	task if ||| task variables	count=1
function_arg	state if [arg_2] ||| [arg_2] [function_1]	count=1
module	a valid ||| plugins action	count=1
module	been ||| plugins	count=1
class	a task [class] one of ||| [class]	count=1
arg	fail module if not ||| module	count=1
function	newlines at ||| count newlines from	count=1
class	here ||| connection	count=7
function	axapi ||| axapi enabled	count=1
arg	git ||| git_path	count=2
module	the shell command ||| modules	count=1
module	power status for a ||| modules cloud	count=1
function	encrypted return a path ||| get	count=1
module	the main ||| lxc	count=1
function	it returns a ||| get	count=1
function_arg	[function_1] [arg_2] security group names are ||| [function_1] names [arg_2]	count=3
class	retrieves rule ||| cloud watch event rule	count=1
class	it to the destination ||| acmeclient	count=1
function	values ||| changed parameter values	count=1
function	notifications ||| notifications	count=4
function	to the ||| get	count=1
function	load config [function_2] ||| [function_1] [function_2]	count=2
module	ipa ||| modules identity ipa	count=1
module	write it to the ||| modules web_infrastructure	count=1
arg	blob ||| file_obj start_pos count	count=1
function	run on start ||| v2 playbook on play start	count=1
class	the lxc ||| connection	count=1
function	load config ||| load config	count=1
function	api to create ||| create clc	count=1
function	checks that ||| check	count=2
function	a path is relative ||| login path	count=3
function	array of binds ||| image binds	count=1
function	[function_1] credentials on ||| [function_2] [function_1]	count=21
class	until server ||| modify server	count=1
function	requested values ||| argument values	count=1
function_arg	the days [arg_2] ||| [arg_2] [function_1]	count=5
function	desired version example formats ||| version	count=1
module	to see if a ||| cloud centurylink	count=1
module	alias or none ||| amazon	count=1
function	[function_1] [function_2] policy ||| [function_1] [function_2]	count=3
function	application from ||| application	count=1
function	a policy is absent ||| policy is absent	count=1
module	for user ||| modules database postgresql	count=1
function	[function_1] deploy event ||| [function_2] [function_1]	count=1
function_arg	[function_1] modify_module() function ||| [function_1] [arg_2]	count=1
module	the ||| modules cloud centurylink	count=12
module	return true if the ||| module_utils six	count=1
function	path is relative then ||| prefix login path	count=3
class	changes ||| app cdotuser	count=1
function	of waiting on ||| get	count=1
class	and synced ||| watch event	count=2
function	[function_1] id of ||| [function_2] [function_1]	count=3
module	public ||| modules crypto	count=1
function_arg	[function_1] [arg_2] ||| [function_1] clc server clc [arg_2]	count=8
function	when ||| on missing	count=1
module	if required ||| cloud	count=1
function	size in ||| disk size	count=1
function	alias is present ||| present	count=1
arg	name of ||| name	count=1
class	[class_1] this ||| [class_2] [class_1]	count=4
arg	including a tag ||| tag	count=1
function	associated with [function_2] ||| [function_2] [function_1]	count=1
function	service ||| service	count=4
arg	that the dict passed ||| name passed default module	count=1
function	the name of ||| get name	count=2
module	metadata keys ||| rackspace	count=1
class	metadata ||| role metadata	count=2
class	digest ||| ansible module	count=1
arg	and kickstart image ||| kickstart	count=1
class	code path ||| clc load	count=1
module	if a server ||| cloud centurylink	count=1
function	host key can ||| host	count=1
function	group to ||| group	count=1
function	flat [function_2] ||| [function_1] [function_2]	count=4
function	function for the galaxy ||| load galaxy	count=1
function	check [function_2] ||| [function_1] [function_2]	count=6
function	file then write to ||| write to	count=1
arg	:arg characters a ||| characters	count=1
module	for ||| modules cloud vmware	count=1
arg	datacenter by ||| datacenter	count=1
function	[function_1] [function_2] :arg ||| [function_1] [function_2]	count=6
arg	templated specially in ||| templar	count=1
module	[module_1] the ||| [module_2] [module_1]	count=2
function	aggregate ||| get aggr	count=1
module	first authorization [module] given ||| [module]	count=1
module	if missing ||| modules monitoring	count=1
function_arg	[function_1] server ||| [arg_2] [function_1]	count=12
arg	return whether the dest ||| dest src	count=1
arg	the desired state ||| timeout cloud	count=1
module	a collection of ||| modules cloud docker	count=1
module	closes ||| connection	count=1
module	connection nothing ||| plugins connection	count=6
function	grimoire collections ||| codex	count=1
function_arg	start [arg_2] ||| [arg_2] [function_1]	count=1
function	the default user configured ||| remote user	count=1
arg	json response ||| response	count=1
arg	dict_a in [arg_2] ||| [arg_2] [arg_1]	count=3
class	dimension ||| dimension	count=1
arg	and kickstart image ||| module image_name kickstart	count=1
function	attributes of [function_2] ||| [function_2] [function_1]	count=3
module	exist [module] ||| [module]	count=3
function	[function] file using ||| execute [function]	count=2
module	for the ||| modules files	count=1
module	receive updates from ||| module_utils	count=1
module	the main ||| cloud	count=4
arg	samples ||| dest ref	count=1
arg	server to ||| cloud server	count=1
function_arg	type of [arg_2] ||| [arg_2] [function_1]	count=2
module	to the lxc ||| connection	count=1
function	the repo ||| repo	count=1
class	rule and targets are ||| rule manager	count=2
function	pull ||| pull	count=1
class	the server ||| clc server	count=1
class	that ||| ip snat pool manager	count=1
function	write to ||| write to	count=1
arg	certificate in cert_file remains ||| module cert_file	count=1
arg	remove a user returns ||| cursor user	count=1
module	into a valid python ||| plugins	count=1
module	the [module_2] ||| [module_1] [module_2]	count=32
function	validation of vars ||| validate environment	count=1
module	of ||| modules cloud azure	count=1
function	balancer as ||| balancer	count=1
arg	remote branch version this ||| module dest remote	count=1
function	get the action ||| action	count=1
module	create ||| cloud amazon	count=1
module	code path and handle ||| cloud centurylink	count=3
function	true update the config ||| update config	count=1
function	a multipart ||| multipart	count=1
module	a ||| modules cloud lxc	count=1
module	installs [module_2] ||| [module_1] [module_2]	count=1
arg	agent using its ||| module service_id	count=1
function_arg	[function_1] entity is ||| [function_1] [arg_2]	count=5
function_arg	type [arg_2] ||| [function_1] [arg_2]	count=2
module	fs ||| modules cloud amazon	count=1
function_arg	removed [arg_2] ||| [arg_2] [function_1]	count=1
class	been initialized with ||| base	count=1
function	is used to schedule ||| schedule servicegroup	count=2
module	are a ||| parsing	count=1
module	of ||| modules packaging	count=1
function	matching quotes that wrap ||| unquote	count=1
module	each ||| modules cloud google	count=1
module	interface if a ||| module_utils	count=1
function_arg	encrypted [arg_2] ||| [arg_2] [function_1]	count=1
function	include line ||| include	count=1
function	is on ||| is	count=1
class	the ||| clc load balancer	count=4
arg	run a command ||| module command	count=1
function	new certificate ||| certificate	count=1
class	an ||| api	count=1
arg	datacenter and account alias ||| location firewall_policy_id firewall_dict	count=1
function	a new certificate ||| certificate	count=1
function	check mode ||| check mode	count=2
function_arg	user that [arg_2] ||| [arg_2] [function_1]	count=2
class	network module ||| network module	count=2
module	google ||| google	count=1
arg	matching containers that are ||| manager containers count name	count=1
function	returns a list of ||| get next	count=1
arg	[arg] so the ||| [arg]	count=2
module	new ||| google	count=2
module	global mysql variable ||| mysql	count=1
module	and [module_2] ||| [module_1] [module_2]	count=2
function	is currently ||| address is	count=1
arg	file context mapping definition ||| target ftype	count=1
function_arg	[function_1] the value ||| [arg_2] [function_1]	count=1
function	ensures that a policy ||| ensure policy	count=1
function	to import ||| import	count=1
class	the server based ||| clc server	count=1
module	return true or ||| module_utils	count=1
arg	group_name ||| group_name parent_name	count=1
class	the task list ||| play iterator	count=1
function	ids [function_2] ||| [function_2] [function_1]	count=3
module	or all ||| modules cloud amazon	count=1
function	destroy and [function_2] ||| [function_2] [function_1]	count=4
arg	is templated specially ||| templar	count=1
arg	from the datastructure ||| ds	count=1
module	table has all ||| cloud amazon	count=1
function	arguments have ||| check argument	count=1
function	is bind [function_2] ||| [function_2] [function_1]	count=1
function	a host_vars file ||| file	count=1
arg	pattern according to ||| pattern	count=1
class	of the server ||| modify server	count=2
arg	reach a status args ||| nat_gateway_id status	count=1
function	run when a task ||| v2 runner on	count=1
function	[function_1] hostnames for ||| [function_1] [function_2]	count=1
function	[function_1] name or ||| [function_2] [function_1]	count=3
function_arg	convert [arg_2] ||| [arg_2] [function_1]	count=4
class	and ||| manager	count=4
function	the days the ||| cert days	count=1
function	binds to array ||| image binds	count=1
function	lease ||| lease	count=1
module	for ||| modules packaging	count=1
module	an instance ||| cloud google	count=1
arg	name ||| name	count=17
class	code path ||| clc	count=3
function	[function_1] factory that ||| [function_2] [function_1]	count=4
module	method for example ||| modules	count=1
class	main method ||| lxc	count=1
module	used for ||| modules	count=2
class	execute the main ||| clc group	count=1
arg	server ||| server server_params	count=2
arg	vm determined ||| vm state force	count=1
module	release an eip from ||| cloud	count=1
arg	dirname subdirs ||| dirname source is_role	count=1
function	[function_1] from security ||| security group [function_1] [function_2] names	count=1
function	initial data to the ||| send initial data	count=1
function	the api call ||| call v3	count=1
arg	changes python [arg] into pascale ||| [arg]	count=1
function	domain by ||| domain	count=1
module	[module_1] [module_2] ||| [module_1] [module_2] vmware power state	count=1
function	security groups ||| security groups	count=4
module	is present for ||| modules	count=1
class	closes the ||| connection	count=1
arg	alias in a datacenter ||| location firewall_policy_id	count=1
function	handler ||| handler	count=2
module	the non-interactive zypper ||| packaging os	count=1
class	create ||| clc server	count=2
module	host we've ||| connection	count=1
function	required are ||| required	count=1
class	another network [class_2] ||| [class_2] [class_1]	count=1
module	elasticache parameter group to ||| modules cloud amazon	count=1
function	dict keys and ||| json dict	count=1
class	the ||| balancer	count=2
function	[function_1] objects from ||| [function_2] [function_1]	count=6
arg	the module data ||| remote_path data	count=1
arg	the play host and ||| loader play host	count=1
function	[function_1] [function_2] all available ||| [function_1] product [function_2]	count=2
function	the configuration is different ||| different config	count=1
arg	all available [arg] ||| [arg]	count=1
arg	facts ||| facts	count=2
arg	nat ||| client subnet_id allocation_id	count=1
function	retrieve a network ||| get network	count=1
arg	command ||| command	count=2
arg	clc api ||| clc module	count=3
function	include line up into ||| include	count=1
function	end ||| from end	count=1
function_arg	state of [arg_2] ||| [function_1] [arg_2]	count=1
module	request_spot_instances() method for ||| modules cloud amazon	count=1
arg	to get current weight ||| backend weight	count=1
function	creates a ||| create	count=2
function_arg	[function_1] items specified ||| [arg_2] [function_1]	count=2
module	machine ||| modules cloud	count=1
function	[function_1] tags ||| [function_2] [function_1]	count=1
module	the machine via the ||| modules cloud misc	count=1
function	name returns ||| name	count=1
class	an existing network and ||| docker network manager	count=1
module	later parsing ||| web_infrastructure	count=1
function	module names ||| module	count=1
module	to the destination file ||| modules	count=1
class	main code path ||| group	count=1
function_arg	[function_1] new or ||| [arg_2] [function_1]	count=1
function_arg	[function_1] group_name ||| [function_1] is absent [arg_2]	count=1
class	task with the ||| task executor	count=1
function	the machine ||| create	count=1
function	the include ||| preprocess include	count=1
function	need to ||| to	count=1
function	wait for ||| wait for status	count=2
function	file from remote ||| file	count=2
function	to be ||| remote target ids to	count=1
class	that [class] ran ||| [class]	count=1
arg	attribute ||| attribute	count=1
module	from command ||| plugins	count=1
function	a list of key ||| key	count=1
function	[function_1] stop ||| [function_2] [function_1]	count=1
class	return details about ||| app	count=1
module	'timeout' milliseconds [module] ||| [module]	count=2
module	main code path and ||| modules cloud	count=3
function_arg	[function_1] the git ||| [function_1] [arg_2]	count=2
function	returns the ||| get vars	count=1
function	vserver ||| get vserver	count=1
function	create new [function_2] ||| [function_2] [function_1]	count=3
class	the main method ||| lxc container management	count=1
class	rule ||| rule manager	count=1
function	balancer [function_2] ||| [function_1] [function_2]	count=2
function_arg	filesystem [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] default ||| [function_1] [function_2]	count=2
function	a specific type ||| type	count=1
function_arg	[function_1] in keystore ||| [arg_2] [function_1]	count=4
module	group ||| cloud amazon	count=1
module	in [module] ||| [module]	count=1
function	hostname and ||| fqdn and	count=1
arg	[arg_1] password and ||| [arg_2] [arg_1]	count=2
module_class	certificate [class_2] ||| [module_1] certificate [class_2]	count=2
function	delete the servers on ||| delete servers	count=1
function_arg	privileges [arg_2] ||| [arg_2] [function_1]	count=4
module	subscription-manager ||| modules	count=1
function	them ||| in	count=1
function	loop args field ||| loop args	count=1
function	the request parameters ||| get request	count=1
function	desired version ||| version	count=1
module_class	[module_1] [class_2] ||| [module_1] public [class_2]	count=1
arg	current weight ||| weight	count=1
class	and handle the ||| clc firewall policy	count=1
arg	specific attribute ||| attribute	count=1
arg	of amis ||| release stream store	count=1
arg	get ||| backend	count=1
function	[function_1] the alert ||| [function_1] [function_2]	count=2
function	in ||| module	count=1
arg	the value ||| value	count=3
module	set ||| modules network nxos	count=1
function	send a deploy ||| send deploy	count=2
function	list the ||| do list	count=1
module	checks to see if ||| storage netapp	count=1
function	hash b into ||| hash	count=1
function	gets the current ||| current	count=1
module	a previously registered ||| os	count=1
function	[function_1] uuid ||| [function_2] [function_1]	count=2
function	to create an absolute ||| absolute location	count=1
arg	of commands ||| commands	count=2
function	delete a backend ||| delete backend	count=2
function_arg	new servers [arg_2] ||| [function_1] [arg_2]	count=3
function	is [function_2] ||| [function_1] [function_2]	count=12
function	the volume group used ||| vg	count=1
class	and handle ||| policy	count=1
module	of ||| module_utils six	count=1
function	git branch commit id ||| git	count=1
function	lists ||| execute list	count=1
module	a server ||| cloud	count=1
function	values match ||| match	count=1
function	start of each ||| record	count=1
arg	entity is ||| entity	count=5
function	export if ||| get export	count=2
arg	json representation of ||| class_name enum_modules	count=1
arg	from keystore on keystore_path ||| module executable keystore_path	count=1
arg	privileges that a user ||| user	count=2
function	the named [function_2] ||| [function_1] [function_2]	count=3
class	the host we've ||| connection base	count=1
module	current ||| modules network nxos	count=1
arg	of some ovirt entity ||| entity	count=1
class	main method ||| container management	count=1
function	server [function_2] ||| [function_1] [function_2] w	count=1
module	the ||| cloud centurylink	count=12
function	the environment string ||| environment string	count=2
module	receive updates from subscription-manager ||| modules	count=1
module	any ||| cloud docker	count=1
arg	the pool ||| location lb_id pool_id	count=1
function	client ||| client	count=2
function	set ||| set task	count=1
module	return details about ||| modules storage	count=1
module	python ||| module_utils six	count=1
module	to do for docker ||| connection	count=1
function	volume ||| get volume	count=1
function_arg	bytes [arg_2] ||| [function_1] number [arg_2]	count=1
arg	decreaste the ||| retention_period action	count=1
module	the system to ||| packaging os	count=1
function_arg	module code [arg_2] ||| [function_1] [arg_2]	count=1
class	do for ||| connection	count=1
module	line ||| playbook	count=1
function	return any [function_2] ||| [function_2] [function_1]	count=1
arg	find out current ||| b_path	count=1
function	it as a group ||| group	count=1
module	set a global mysql ||| mysql	count=1
function	first [function] status down ||| [function]	count=1
module	path and handle the ||| modules cloud centurylink	count=3
function	the low [function_2] ||| [function_2] [function_1]	count=2
function	the vty shell ||| shell	count=1
class	an existing network and ||| network manager	count=1
arg	kickstart image ||| module image_name kickstart	count=1
function	account if it ||| account	count=1
module	and ||| modules cloud	count=3
arg	module ansible module ||| module ec2	count=1
module	nothing to do for ||| plugins	count=1
function	[function_1] of ||| [function_2] [function_1]	count=56
module	and new ||| cloud google	count=1
arg	second ||| pacman_path name	count=1
module	system to receive updates ||| modules	count=1
class	rule ||| cloud watch event rule	count=2
function_arg	loop items specified ||| run loop items	count=1
module	if certificate with alias ||| system	count=1
function	policy [function_2] ||| [function_2] [function_1]	count=19
module	device supports multiplexing ||| plugins connection	count=1
function_arg	security [function_1] [arg_2] security group names are ||| [function_1] names [arg_2]	count=2
class	synced ||| cloud watch event	count=2
arg	[arg] to ||| [arg]	count=1
function	unregister a previously registered ||| unregister	count=1
class	main code ||| group	count=1
class	handle ||| balancer	count=1
function	of a custom stat ||| custom	count=1
function	get call ||| get gcp	count=1
function	creates new instances ||| create instances	count=2
class	all available [class] in ||| [class]	count=1
function	terminate ||| close	count=7
function	modify the memory or ||| modify	count=1
function	file is ||| file	count=1
arg	age ||| age	count=1
module	return hex ||| module_utils	count=1
module	a message to ||| utils	count=1
function	affinity ||| affinity	count=1
module	returns a ||| cloud	count=1
arg	the provided ||| target_ids	count=1
function	add the alert policy ||| add alert policy	count=1
arg	pip command ||| module pip chdir	count=1
module	only needed for ||| modules	count=1
function_arg	remote user [arg_2] ||| [arg_2] [function_1]	count=2
module	this method ||| modules network netvisor	count=18
function_arg	hostnames for [arg_2] ||| [arg_2] [function_1]	count=1
function	complete if ||| to complete	count=3
arg	matching the given pattern ||| pattern	count=1
module	over a ||| module_utils	count=1
module	create a ||| modules cloud	count=3
function_arg	data to [arg_2] ||| [arg_2] [function_1]	count=2
module	details about the ||| netapp	count=1
module	takes a ||| modules cloud	count=1
module	version or alias or ||| modules cloud amazon	count=1
arg	account alias by ||| alias	count=1
module	execute the ||| cloud centurylink	count=3
function	flat list of handlers ||| handlers	count=1
function	the name of the ||| get	count=2
module_class	public [class_2] ||| [module_1] public [class_2]	count=1
function_arg	[function_1] tags ||| [arg_2] [function_1]	count=7
module	if it does not ||| modules	count=1
function	[function_1] by name ||| [function_1] [function_2]	count=2
arg	keys in the datastructure ||| ds	count=1
function	ovirt [function_2] ||| [function_2] [function_1]	count=1
class	[class] object into ||| [class]	count=3
function	of host task ||| get next	count=1
class	the main code ||| clc group	count=1
module	and ||| cloud centurylink	count=6
function_arg	[function_1] account model ||| [function_1] [arg_2]	count=5
module	connection nothing to do ||| plugins	count=6
function_arg	return filesystem [arg_2] ||| [function_1] [arg_2]	count=1
module	if ||| monitoring	count=1
module	extracts ||| net_tools basics	count=1
module	takes a list ||| modules cloud amazon	count=2
function	message to ||| message	count=1
class	is ||| base	count=1
function	keys the value of ||| keys	count=1
class	consistent method ||| base	count=1
class	that ||| pool manager	count=1
module	s3 arguments ||| cloud	count=1
function	method returns the name ||| link name	count=1
function	a base argument ||| argument spec	count=1
function	library aos-pyez is ||| aos version	count=1
arg	the memory or cpu ||| module server_id cpu	count=1
function	group ||| modify group	count=1
module	and write it to ||| modules web_infrastructure	count=1
function	[function_1] pattern described ||| [function_2] [function_1]	count=8
function	get the latest ||| get repository	count=2
function_arg	[function_1] rc stdout ||| [arg_2] [function_1]	count=3
function_arg	path on [arg_2] ||| [arg_2] [function_1]	count=1
arg	the server to ||| server	count=1
arg	increase or decreaste ||| retention_period action	count=1
function	used when executing ||| compute	count=1
function_arg	[function_1] recs[ref][key] ||| [function_1] [arg_2]	count=1
arg	host in the fact ||| host	count=1
function	schedule downtime for ||| schedule servicegroup svc downtime	count=1
function	writes initial data to ||| send initial data	count=1
function	reads results ||| process pending results	count=1
class	group <name>01 to associate ||| azure rmmodule base	count=1
function	a file or ||| file	count=1
arg	get [arg_2] ||| [arg_1] [arg_2]	count=1
module	non-interactive zypper ||| modules packaging os	count=1
function	[function_1] ip ||| [function_2] [function_1]	count=5
module	amazon resource ||| amazon	count=1
function_arg	[function_1] sensible ||| [arg_2] [function_1]	count=1
function	configuration matches ||| config	count=1
arg	if the user exists ||| user db_name	count=1
function_arg	id or ||| id module datacenter	count=1
function	anti affinity ||| aa	count=3
arg	certificate in [arg_2] ||| [arg_2] [arg_1]	count=4
module	args for the ||| modules	count=1
function	boot [function_2] ||| [function_1] [function_2]	count=3
function	encryption of ||| encryption	count=1
function	a file over ||| push file	count=1
function	[function_1] backend service ||| [function_2] [function_1]	count=1
module	a collection ||| cloud	count=1
class	details ||| app cdotlun	count=2
class	the bzr branch ||| bzr	count=1
function	returns the line ||| get	count=1
arg	user returns ||| cursor user	count=1
arg	the ec2 instance ||| ec2 module	count=1
function	a file obj ||| file	count=1
module	delete ||| modules cloud google	count=3
function	licenses ||| licenses	count=1
class	to ||| connection base	count=1
arg	repo if ||| module repo dest	count=1
class	or updates the rule ||| rule	count=1
function	values it will ||| values	count=1
function	of key ||| shorten key	count=1
function	[function_1] virtual machine ||| [function_2] [function_1]	count=3
class	it to ||| acmeclient	count=1
function	file from lxd to ||| file	count=1
arg	to change ||| lb awaited_state initial_state timeout	count=1
function	[function_1] id of ||| [function_1] [function_2]	count=3
arg	tag [arg_2] ||| [arg_2] [arg_1]	count=4
function	a human ||| human	count=1
function	the number of newlines ||| count newlines	count=1
function	a process ||| process	count=1
function_arg	[function_1] a pattern ||| [function_1] [arg_2]	count=2
class	and ||| clc	count=3
arg	host port and ||| host port	count=1
class	execute the main code ||| policy	count=1
class	subscribed ||| rhsm	count=1
function_arg	group [arg_2] ||| [function_1] [arg_2]	count=6
module	the machine ||| modules cloud misc	count=1
function	backend service the ||| backend service	count=2
module	to a gpg ||| modules packaging os	count=1
function	and/or attributes return ||| user alter	count=1
function	on start of ||| playbook on play start	count=1
function	[function_1] from an ||| [function_2] [function_1]	count=3
function	code [function_2] ||| [function_1] [function_2]	count=2
function	format the ||| format	count=1
module	[module_1] a ||| [module_1] [module_2]	count=32
function	keys ||| change keys	count=1
module	and write ||| modules web_infrastructure	count=1
function	retention of messages ||| retention	count=1
class	server provisioning ||| modify server	count=1
function	get the alert policies ||| get alert policies	count=1
function	from log messages ||| log sanitize	count=1
function	module error title ||| failure title from	count=1
module	for the pool and ||| modules	count=1
function_arg	from the [arg_2] ||| [function_1] [arg_2]	count=4
module	which ||| playbook role	count=2
function	a size in bytes ||| size	count=1
function	the retention of ||| retention	count=1
arg	in ||| module args	count=1
module	[module_1] for ||| [module_2] cloud [module_1]	count=1
function	arguments have the ||| check argument	count=1
class	response code to retry ||| retry	count=1
class	rhsm ||| rhsm	count=3
arg	from local to remote ||| in_path out_path	count=4
function	have ||| check	count=1
module	details about ||| storage netapp	count=1
function	create ||| create rule	count=1
class	task [class] one ||| [class]	count=1
function	the local rule ||| rule	count=1
function	encrypted ||| encrypted	count=1
function	keys at the ||| keys	count=1
function	a different [function_2] ||| [function_1] [function_2]	count=1
module_class	[module_1] bool ||| [module_1] [class_2]	count=2
module_class	action [class_2] ||| [module_1] [class_2]	count=1
class	container is ||| container	count=1
function	create if ||| create	count=1
class	path and ||| firewall policy	count=1
module	the ||| modules storage	count=1
class	main code path ||| policy	count=1
class	and write ||| acmeclient	count=1
function	the latest [function_2] ||| [function_2] [function_1]	count=1
class	start ||| virt	count=1
arg	existence [arg_2] ||| [arg_2] [arg_1]	count=4
function	if temporary ||| remove tmp	count=2
arg	the server to ||| cloud server	count=1
arg	filepath the filepath ||| filepath	count=1
arg	the buffered [arg] for ||| [arg]	count=1
class	block until server provisioning ||| server	count=1
function	changed_when is ||| changed when	count=1
function	and handle ||| process	count=3
function	fetch ||| fetch	count=9
module	retention ||| modules cloud amazon	count=1
arg	catch any nclu errors ||| errmsg	count=1
class	code to retry ||| retry	count=1
function_arg	[function_1] entity is ||| [arg_2] [function_1]	count=5
module	to receive updates ||| modules	count=1
function_arg	temporary path [arg_2] ||| [arg_2] [function_1]	count=1
function	mount ||| mount	count=1
function	a network ||| get network	count=1
function	policy id [function_2] ||| [function_2] [function_1]	count=1
class	the main code ||| firewall policy	count=1
module	attributes string for ||| modules database postgresql	count=1
function	[function_1] is in ||| [function_2] [function_1]	count=4
arg	rule ||| prefix rule	count=1
function	text ||| text	count=1
function	log ||| log	count=3
module	string typically passed as ||| database mysql	count=1
function	[function_1] name field ||| [function_1] [function_2]	count=2
class	set ||| vmomi helper	count=1
arg	using the module ||| module	count=1
function_arg	export if [arg_2] ||| [arg_2] [function_1]	count=2
module	galaxy ||| galaxy	count=1
arg	raised in case of ||| signum frame	count=1
arg	with the given xml ||| xml	count=1
function_arg	updates nodes [arg_2] ||| [arg_2] [function_1]	count=2
module	code path and handle ||| modules cloud centurylink	count=3
function	class ||| redirect handler	count=1
function_arg	removed from [arg_2] ||| [arg_2] [function_1]	count=1
function	an import ||| create import task	count=1
function	base argument specifiation ||| argument	count=1
function	from remote ||| set remote	count=2
arg	module ansible module object ||| module	count=2
arg	the value for the ||| value	count=1
module	refs for the ||| modules	count=1
arg	names [arg] security group ||| [arg]	count=1
function_arg	[function_1] git ||| [arg_2] [function_1]	count=3
class	details about ||| cdotlun	count=1
function	service ||| services	count=1
module	set all of ||| amazon	count=1
arg	actuall executable [arg_2] ||| [arg_2] [arg_1]	count=2
function	data matches [function_2] ||| [function_2] [function_1]	count=1
class	the main ||| clc load	count=1
function	build out the ||| build	count=1
function	unique key ||| rule key	count=1
class	uses the locale module ||| module	count=1
function	the hostname and ||| fqdn and	count=1
arg	corresponding [arg] ||| [arg]	count=2
function	[function_1] the latest ||| [function_2] [function_1]	count=3
module	write ||| web_infrastructure	count=1
function	different [function_2] ||| [function_1] [function_2]	count=1
module	and the [module_2] ||| [module_1] [module_2]	count=2
function	a dict with ||| dict	count=1
arg	from ||| host	count=1
class	existing network and ||| network manager	count=1
function	get installed [function_2] ||| [function_2] [function_1]	count=2
class	process ||| alert policy	count=1
class	get ||| anti affinity policy	count=1
function	given ||| create	count=1
function	group to is ||| make group	count=1
function	list [function_2] ||| [function_1] [function_2]	count=1
function	get information from ||| stat	count=1
function	return the key ||| key	count=1
module	must ||| compat selectors	count=1
function	url of ||| get	count=1
class	path and ||| balancer	count=1
arg	tag ||| tag	count=1
function	executing the remote ||| compute	count=1
module	start ||| misc	count=1
module	certificate ||| modules crypto	count=1
arg	attribute ||| partitions attribute	count=1
arg	the clc api ||| clc module	count=3
arg	[arg_1] object ||| [arg_1] [arg_2]	count=4
module	and write it to ||| web_infrastructure	count=1
function	of [function_2] ||| [function_1] [function_2]	count=11
class	find ||| plugin loader	count=1
function	path is relative ||| login path	count=3
function	and make the keys ||| change keys	count=1
function	destroy and create ||| destroy and create	count=3
module	been initialized with ||| connection	count=1
arg	instance newgroup [arg_2] ||| [arg_2] [arg_1]	count=2
module	a given ||| plugins	count=1
function	destroy and [function_2] ||| [function_1] [function_2]	count=4
module	boto ||| cloud amazon	count=3
arg	pacman -si output ||| pacman_output	count=1
function	[function_1] the compatibility ||| [function_2] [function_1]	count=1
function	[function_1] validation of ||| [function_2] [function_1]	count=2
function	get the attribute or ||| get	count=2
function	hostnames ||| hosts	count=1
module	the dictionary [module_2] ||| [module_1] [module_2]	count=2
function	end ||| end	count=1
function	from the given ||| from	count=1
function	[function_1] device mapping ||| [function_1] [function_2]	count=4
function	[function_1] [function_2] all available ||| [function_1] [function_2]	count=2
function	retry ||| retry	count=2
function	instance [function_2] ||| [function_1] [function_2]	count=3
arg	attributes from the task ||| task variables templar	count=1
arg	a second ||| module pacman_path name	count=1
module	code path and ||| centurylink	count=3
function	when ||| on	count=2
class	returns ||| ansible error	count=1
arg	converts [arg] ||| [arg]	count=1
function	entity id [function_2] ||| [function_1] [function_2]	count=1
function	write a byte ||| write	count=1
function_arg	plugin [arg_2] ||| [arg_2] [function_1]	count=2
function	json request ||| request	count=1
module	for the given ||| modules cloud amazon	count=2
function	hostname this is a ||| hostname	count=1
arg	idempotency using ||| module cli	count=3
function	the public ||| public	count=1
function	[function_1] different host ||| [function_1] [function_2]	count=3
function_arg	provisioning [function_1] [arg_2] ||| [function_1] [arg_2]	count=1
function	the clc [function_2] ||| [function_2] [function_1]	count=35
function	installed version of ||| version	count=1
class	details about ||| net app	count=1
arg	key (of course ||| key	count=1
class	current system ||| rhsm	count=1
function	[function_1] v2 ||| [function_1] [function_2]	count=1
function	transfer a ||| put	count=9
arg	a folder to ||| folder	count=1
module	synchronize all ||| modules packaging os	count=1
function	[function] was successful ||| check mvip [function]	count=2
function_arg	dict_a [arg_2] ||| [function_1] dict_a [arg_2]	count=3
module	from subscription-manager ||| packaging	count=1
module	return details ||| modules storage netapp	count=1
function	role [function_2] ||| [function_1] [function_2]	count=3
class	playbook ||| playbook executor	count=2
module	updates from ||| modules	count=1
module	handle ||| cloud	count=3
class	about ||| net	count=1
function_arg	service from [arg_2] ||| [function_1] [arg_2]	count=1
function	the [function] ||| clear [function]	count=3
function	event to ||| event	count=1
function	host key can be ||| parse host	count=1
arg	port ||| port proto	count=1
function_arg	[function_1] module data ||| [function_1] [arg_2]	count=1
function	end of ||| end	count=1
arg	containing ssh-key options ||| options	count=1
module	a group of ||| cloud amazon	count=1
function	galaxy ||| galaxy	count=1
function	by the user ||| key id	count=1
arg	installed a second ||| module pacman_path name	count=1
function_arg	[function_1] json response ||| [function_1] request with dict [arg_2]	count=3
function	method to compare ||| compare	count=1
module	call to [module] ||| [module]	count=1
function	[function_1] present ||| [function_2] [function_1]	count=10
function	returns [function_2] ||| [function_2] [function_1]	count=2
function	id [function_2] ||| [function_2] [function_1]	count=2
class	in ||| strategy module	count=1
class	function ||| host	count=1
function	proxy ||| get proxy	count=1
arg	'absent' if user ||| search_params	count=1
function	by [function_2] ||| [function_1] [function_2] w	count=1
function	subnets ||| subnets	count=1
class	a previously ||| rhn	count=1
function	the keys of ||| get	count=1
function	[function_1] from an ||| [function_1] [function_2]	count=3
class	update the host ||| host	count=1
arg	if the name ||| name tag	count=1
arg	the arg ||| arg	count=1
function	a pubkey ||| pubkey	count=1
function	an account on ||| account	count=1
function	attributes for this object ||| validate attributes	count=1
module	the names parameter ||| modules cloud	count=1
function	it ||| from	count=1
function	will override those from ||| variable override	count=1
module	docker ||| cloud docker	count=1
function	a network domain by ||| get network domain	count=1
module	: ||| plugins filter	count=1
function	a range pattern described ||| detect range	count=1
arg	security ||| resource_group location name os_type	count=1
class	existing network ||| network	count=1
module	for a ||| modules net_tools	count=1
function	state of a list ||| state	count=1
class	rule and target ||| cloud watch event rule manager	count=1
class	if the device ||| connection	count=1
module	the connection nothing ||| connection	count=6
arg	[arg_1] the key ||| [arg_2] [arg_1]	count=4
arg	type definition from the ||| proto setype	count=1
function	checks that depend on ||| checks	count=1
function	if boto [function_2] ||| [function_1] [function_2]	count=3
function	convert self group ||| make group	count=1
function_arg	an [arg_2] ||| [arg_2] [function_1]	count=1
module	execution ||| network dellos9	count=2
function	[function_1] a policy ||| [function_1] [function_2]	count=1
function	[function_1] rule in ||| [function_2] [function_1]	count=1
function	proxy ||| set proxy	count=1
function	return details ||| get	count=1
function	returns an entry string ||| entry	count=1
arg	note that ||| sec_group_list ec2_connection vpc_id boto3	count=1
module	sets ||| modules cloud amazon	count=1
module	main ||| modules cloud	count=4
function	requests are ||| requests to	count=3
function	the installed version ||| version	count=2
function	out the policy id ||| policy id	count=1
module	locale ||| system	count=1
function_arg	[function_1] from ||| [arg_2] [function_1]	count=1
arg	desired value [arg_2] ||| [arg_2] [arg_1]	count=2
function_arg	[function_1] [arg_2] corresponds to the reported ||| [function_1] [arg_2]	count=5
function_arg	items [arg_2] ||| [arg_2] [function_1]	count=3
arg	facts for ||| facts	count=2
arg	url and ||| module url	count=1
module	creates ||| cloud amazon	count=1
function	[function] status ||| [function]	count=1
class	set ||| blueprint package	count=1
arg	desired value returned ||| value timeout	count=2
class	the ||| connection	count=12
class	anti ||| clc anti	count=1
function	[function_1] associated ||| [function_2] [function_1]	count=3
arg	supplied key is sensible ||| sshkeygen	count=1
function	mount point from fstab ||| unset mount	count=1
function	requests are complete if ||| requests to complete	count=3
module	entry point for module ||| modules network junos	count=3
function_arg	updates nodes [arg_2] ||| [function_1] alias location [arg_2]	count=1
function_arg	of the [arg_2] ||| [function_1] inventory basename [arg_2]	count=3
function	if file ||| from file	count=1
arg	given router ||| module router	count=1
arg	buffered [arg] for ||| [arg]	count=1
function	of spot requests to ||| spot requests	count=1
function	to add the ||| add host	count=1
function	them ||| make tags in	count=1
module_class	docker [class_2] ||| [module_1] [class_2]	count=1
function	data from ||| set	count=1
function	to calculate difference of ||| dict diff	count=1
function_arg	security group [function_1] [arg_2] names are not unique ||| [function_1] names [arg_2]	count=1
module	rhsm ||| packaging os	count=1
function	set the params ||| params	count=1
class	a file or stdout ||| editor	count=1
function	file from ||| from	count=2
function	the state of ||| state	count=1
module	filter ||| plugins filter	count=2
module	an account alias in ||| cloud	count=1
class	main code path and ||| load balancer	count=1
function_arg	check mode [arg_2] ||| [arg_2] [function_1]	count=1
module_class	return hex [class_2] ||| [module_1] [class_2]	count=2
function	if the wait argument ||| wait	count=3
function_arg	check [arg_2] ||| [function_1] module host [arg_2]	count=2
arg	idempotently ||| accept_hostkey create_dir	count=1
function_arg	[function_1] in ||| [function_1] changed [arg_2]	count=2
module	installs the ||| modules packaging os	count=1
arg	see if original ||| old_ttl old_record_data new_ttl new_record_data	count=1
class	anti affinity ||| anti affinity	count=3
function	[function] to ||| [function]	count=4
arg	parameters for the play ||| loader play	count=1
module	for user ||| modules database	count=1
function	all ovirt ||| ovirt	count=1
function	the boot volume ||| boot volume	count=2
function	[function_1] temporary path ||| [function_2] [function_1]	count=1
function	default public ip address ||| default pip	count=1
function	output around [function] output ||| filter non [function]	count=1
function	lists the [function_2] ||| [function_2] [function_1]	count=1
function	of waiting ||| get poller	count=1
function	to get ||| get	count=3
arg	google [arg_2] ||| [arg_1] [arg_2]	count=2
function	the end of a ||| end	count=1
class	the machine via the ||| virt	count=1
class	read ||| device ntp	count=1
module	set all ||| modules cloud amazon	count=1
class	execute the main code ||| balancer	count=1
function_arg	[function_1] group_name ||| [arg_2] [function_1]	count=1
arg	module ansible module ||| module ec2 instance_ids state	count=1
function	[function_1] exists ||| [function_2] [function_1]	count=5
class	and handle the ||| clc	count=3
arg	a folder to cloud ||| cf folder container	count=1
module	return details ||| modules	count=1
arg	facts [arg_2] ||| [arg_2] [arg_1]	count=8
arg	a path ||| path all_vars follow	count=1
arg	the key (of course ||| key	count=1
function	the list of ||| get list	count=2
function	loads a file and ||| load	count=1
function	and handle the ||| process	count=3
function	the privileges ||| database privileges	count=1
module_class	main [class_2] ||| [class_2] [module_1]	count=2
function	return a path ||| get	count=1
function	v2 server ||| v2	count=1
module	via ||| modules cloud misc	count=2
arg	finds a ||| zone_name want_private	count=1
function	[function_1] string ||| [function_1] [function_2]	count=3
arg	b take precedence ||| b	count=1
function	of each dict ||| get	count=1
arg	task if ||| task variables templar	count=1
function	[function_1] servers ||| [function_2] [function_1]	count=4
class	do here ||| connection	count=7
arg	on a managed instance ||| mig named_ports	count=1
class	the system as ||| rhsm	count=1
function	days the ||| days	count=1
arg	from lxd to local ||| in_path out_path	count=1
module	main code ||| modules	count=3
arg	of server_ids have the ||| server_ids	count=1
function	policy ||| get policy	count=1
module	details about ||| storage	count=1
function	[function] alert ||| [function] alert policy is	count=1
function	retention ||| retention action	count=1
function	the argument ||| argument	count=5
module	return details ||| modules storage	count=1
arg	run a command ||| command	count=1
function	[function_1] level shell ||| [function_1] [function_2]	count=3
module	if the ||| modules	count=3
arg	if original and ||| old_ttl old_record_data new_ttl new_record_data	count=1
function_arg	aws tags ||| aws format tags	count=1
function	task to keep the ||| task	count=1
module	details ||| modules	count=1
function	shell ||| execute	count=1
module	write it to ||| modules	count=1
function	list of host ||| get next	count=1
arg	uploads a folder to ||| cf folder container ttl	count=1
function	the configuration is different ||| has different config	count=1
function	digest of local file ||| digest	count=1
arg	in dict_b ||| dict_b	count=1
function_arg	[function_1] commands to ||| [arg_2] [function_1]	count=1
arg	folder to ||| cf folder container ttl	count=1
function	up pyrax ||| setup rax	count=1
arg	by callback ||| callback	count=1
class	server based on the ||| clc modify server	count=2
class	dictionary or the value ||| cloud stack	count=1
class	crontab ||| cron tab	count=1
module	key authorization ||| web_infrastructure	count=1
module	and write ||| modules	count=1
arg	available hosts [arg] by filtering ||| [arg]	count=1
arg	value returned ||| value	count=1
class	shell ||| timezone	count=1
arg	given name using ||| name	count=1
function	load an image from ||| load image	count=1
function	modify an [function_2] ||| [function_2] [function_1]	count=1
function_arg	[function_1] which ||| [arg_2] [function_1]	count=5
function	[function_1] removed if ||| [function_2] [function_1]	count=6
function	add [function_2] ||| [function_1] [function_2]	count=2
module	details [module] ||| [module]	count=1
arg	using urllib2 python2 or ||| method	count=1
arg	gce ||| gce name zone	count=1
function	the wait argument is ||| wait	count=3
class	rhn ||| rhsm	count=1
module	registered ||| packaging	count=1
function_arg	days [arg_2] ||| [function_1] [arg_2]	count=5
function	id [function_2] ||| [function_1] [function_2]	count=2
arg	the value [arg_2] ||| [arg_2] [arg_1]	count=4
function	builds a [function_2] ||| [function_2] [function_1]	count=1
function_arg	ports [arg_2] ||| [arg_2] [function_1]	count=2
arg	if the given router ||| module router	count=1
arg	sensible host and key ||| key sshkeygen	count=1
function	id ||| id by	count=3
module	sees a [module_2] ||| [module_1] [module_2]	count=4
class	are only available ||| manager	count=1
module	activate ||| modules packaging os	count=1
module	to preserve ||| plugins lookup	count=1
class	the given ||| virt	count=1
function_arg	[function_1] restriction ||| [function_1] [arg_2]	count=5
arg	in the specified servicegroup ||| servicegroup	count=1
arg	extract ||| remote module fail_on_error	count=1
function	a class factory ||| handler factory	count=1
class	are already ||| docker manager	count=1
module_class	[module_1] [class_2] ||| [module_1] centurylink clc [class_2]	count=4
module	a container ||| modules cloud docker	count=1
function	been split ||| split	count=1
function	hostname and ||| and	count=1
function	branch does not ||| remote branch	count=1
arg	a clc ||| clc alias server_id alert_policy_id	count=1
module	install a ||| modules cloud	count=1
arg	new ||| override_count	count=1
module	this ||| playbook	count=1
function	[function_1] stop ||| [function_1] [function_2]	count=1
function_arg	[function_1] tuples into ||| [function_1] [arg_2]	count=5
function	[function] policy ||| [function] aa policy id	count=1
module	start the machine ||| modules cloud	count=1
function	[function_1] default network ||| [function_2] [function_1]	count=1
function	account alias ||| alias	count=1
module	a valid python dict ||| plugins	count=1
function_arg	reads a [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] pubkey ||| [function_2] [function_1]	count=1
function	facts for ||| facts	count=1
module	for autoscale group ||| modules cloud	count=1
module	return ||| modules storage netapp	count=2
arg	the named module ||| fullname	count=1
module	lxc nothing to do ||| connection	count=1
arg	in clc [arg_2] ||| [arg_1] [arg_2]	count=1
class	remotely ||| watch event rule	count=2
class	rhn redhat com or ||| rhn	count=1
function	configuration from ||| read config	count=2
function	of the balancer as ||| get balancer	count=1
module	system this ||| system	count=1
function	[function] extra variables/information ||| [function] tqm	count=1
module	a container ||| cloud	count=1
module	list of instances for ||| modules	count=1
function_arg	[function_1] number ||| [function_1] bytes [arg_2]	count=1
class	be removed remotely ||| cloud watch event rule	count=1
function	connect ||| connect	count=4
arg	a folder ||| folder container	count=1
class	to the host ||| connection	count=1
arg	pool on ||| pool_id	count=1
arg	password and returns ||| password	count=1
class	directed for registration with ||| rhsm	count=1
arg	the url and ||| module url	count=1
class	the csr and ||| acmeclient	count=1
function	modify an existing cluster ||| modify cluster	count=1
function	a testsuite report from ||| report	count=1
module	return ||| modules source_control	count=1
function	a policy is absent ||| ensure policy is absent	count=1
function	[function_1] bind ||| [function_2] [function_1]	count=1
function	return a failure when ||| failure	count=1
function	hex digest ||| digest from	count=1
arg	host line ||| line	count=1
function	that group ||| group	count=1
function	main code ||| process	count=3
arg	method for sending ||| msg_format color notify	count=1
module	the host we've been ||| plugins	count=1
class	haproxy command ||| haproxy	count=1
class	registered ||| rhn	count=1
function	main ||| main	count=13
function	desired version example ||| name version	count=1
class	haproxy command by sending ||| haproxy	count=1
function	clc credentials ||| clc credentials	count=14
function_arg	takes [arg_2] ||| [arg_2] [function_1]	count=1
module	instance ||| cloud google	count=1
function	version of [function_2] ||| [function_1] [function_2]	count=2
function	requested values and there ||| argument values	count=1
function	configuration is ||| config	count=1
class	or ||| manager	count=2
module	assemble ||| modules files	count=1
function	server ||| server	count=8
module	it to ||| web_infrastructure	count=1
function	[function_1] the key ||| [function_2] [function_1]	count=1
function	if a path ||| login path	count=3
function	on all ||| all	count=1
function	[function_1] url of ||| [function_2] remote [function_1]	count=1
function	into bytes ||| bytes	count=1
function	python ||| python	count=1
arg	user returns ||| user	count=1
function	low level ||| low level	count=1
function	override post validation of ||| post validate environment	count=1
arg	callback ||| callback	count=1
function	of key ids ||| key ids	count=1
function	task to keep the ||| next task	count=1
function_arg	initial data [arg_2] ||| [function_1] [arg_2]	count=1
module	machine via the ||| modules cloud misc	count=1
function	can do pipelining ||| pipelining	count=1
function	[function_1] policy to ||| [function_1] [function_2]	count=9
class	existing network and returns ||| docker network manager	count=1
arg	determines ||| existing	count=1
module	get ||| modules packaging os	count=2
function_arg	[function_1] cli command ||| [function_1] [arg_2]	count=7
module	ipa ||| identity ipa	count=1
function	enable the ||| enable	count=3
function	the given role ||| role	count=1
module	to do here ||| plugins connection	count=7
arg	memory or cpu of ||| cpu	count=1
function	to make sure ||| to	count=1
class	server based ||| server	count=1
module	the shell ||| modules	count=1
function	a zone ||| zone	count=1
function	error title ||| failure title from exception	count=1
module	target ||| cloud pubnub	count=1
arg	the given facts for ||| facts	count=2
function	removes a virtual ||| remove virtual	count=2
module	course for the ||| modules	count=1
function	[function_1] remote file ||| [function_2] [function_1]	count=4
class	retrieves rule and ||| rule manager	count=1
arg	datacenter and account ||| location firewall_policy_id	count=1
function	generate the ||| generate	count=2
class	the server based on ||| clc server	count=1
module	the correct length if ||| modules cloud	count=1
arg	specified servicegroup ||| servicegroup	count=1
module	main ||| modules cloud lxc	count=2
function_arg	to [arg_2] ||| [function_1] server [arg_2]	count=3
function_arg	[function_1] data blob ||| [arg_2] [function_1]	count=1
module	if certificate with ||| system	count=1
function	started ||| started	count=1
class	execute the main ||| load	count=1
function	a human readable representation ||| repr	count=2
function_arg	[function_1] arg is ||| [arg_2] [function_1]	count=4
function	containers ||| containers	count=1
function	the error ||| error	count=1
arg	[arg] post_validate step ||| [arg]	count=1
module	the ipa ||| identity ipa	count=1
class	create ||| load balancer	count=1
function	requested values and ||| values	count=1
function_arg	[function_1] in hash ||| [function_1] changed [arg_2]	count=2
function	[function_1] remote sources ||| [function_2] [function_1]	count=1
arg	on [arg_2] ||| [arg_2] [arg_1]	count=1
function	helper function which ||| inventory	count=1
function	json ||| nice json	count=1
module	value for a specific ||| modules system	count=1
module	later iteration ||| web_infrastructure	count=1
module	initialized ||| plugins	count=1
arg	a folder ||| folder container ttl	count=1
arg	characters a ||| characters	count=1
class	that may change ||| ip snat pool manager	count=1
arg	the ec2 ||| ec2 module	count=1
arg	the module data out ||| remote_path data	count=1
function	getting univention admin objects ||| get umc admin objects	count=1
module	a ||| parsing	count=1
function	configuration is [function_2] ||| [function_2] [function_1]	count=8
arg	vm directly ||| vm	count=1
module	all of the params ||| modules cloud amazon	count=1
function	which loads the ||| load inventory	count=2
function	the volume ||| get volume	count=1
class	of a [class_2] ||| [class_2] [class_1]	count=1
class	makes sure that a ||| anti affinity policy	count=1
function	containing host patterns separated ||| host	count=1
module	by specified ||| cloud	count=1
function	search an entity id ||| id	count=1
function	run update or ||| update	count=1
module	[module_1] ansible ||| [module_1] [module_2]	count=2
function	about the lun ||| get lun	count=1
class	locale module ||| module	count=1
module	host ||| plugins	count=1
function	having the public ip ||| public ip	count=1
arg	the cli command ||| module cli	count=7
module	the device supports ||| plugins	count=1
function	the retention of ||| retention action	count=1
module	[module_1] for ||| [module_2] [module_1]	count=5
function_arg	network domain [arg_2] ||| [function_1] [arg_2]	count=2
function	network is in vpc ||| is vpc network	count=1
function	[function] variables will ||| get [function]	count=3
arg	of events to monitor ||| fileobj events data	count=1
function	security ||| security	count=2
function	update method on ||| update	count=1
function	path ||| path	count=6
class	nothing to ||| connection	count=8
function	[function] order ||| load [function]	count=1
function	server certificate if it ||| server	count=1
function	[function_1] style ||| [function_2] [function_1]	count=4
function	will override those from ||| task and variable override	count=1
arg	base64-encoded pkcs12 version ||| ssh_cert_path	count=1
function	api tuple if present ||| api listener as tuple	count=1
module	authorization ||| web_infrastructure	count=1
arg	call the clc ||| clc module	count=1
function	targets that need to ||| ids to	count=1
function	six [function_2] ||| [function_1] [function_2]	count=1
function	be one ||| path	count=1
class	[class_1] aws ||| [class_1] [class_2]	count=1
class	path and handle the ||| firewall	count=1
function	path if a path ||| login path	count=3
function	[function] state of ||| [function] modifiable param	count=2
function	show user on ||| user	count=1
function	update or ||| package update	count=1
function	fetch a ||| fetch	count=7
class	or updates ||| manager	count=1
function	multipart ||| multipart	count=1
function	the requested values and ||| argument values	count=1
module	the dictionary object required ||| cloud	count=2
arg	[arg_1] cloud ||| [arg_2] [arg_1]	count=2
function	[function] src to ||| [function]	count=1
function	latest [function_2] ||| [function_1] [function_2]	count=1
module	a message ||| utils	count=1
function	is present ||| present	count=1
module	given name ||| cloud	count=1
class	vs existing container config ||| container	count=1
function	changes the password ||| change password	count=2
module	the main ||| modules	count=4
function	[function_1] matching logic ||| [function_2] [function_1]	count=1
module_class	docker [class_2] ||| [class_2] [module_1]	count=1
function	schedule downtime for all ||| schedule host svc downtime	count=1
module	matching containers from the ||| modules cloud	count=1
function	the wait argument ||| wait	count=3
arg	based on the subscript ||| subscript	count=1
function	cache time ||| cache time	count=2
class	when using ||| console cli	count=1
module	[module_1] amazon resource ||| [module_1] [module_2]	count=3
function_arg	check the [arg_2] ||| [function_1] [arg_2]	count=1
class	loads ||| queue manager	count=1
function	wait ||| wait until	count=1
function	if boto [function_2] ||| [function_2] [function_1]	count=3
module	configuration is present for ||| modules cloud google	count=1
arg	single line ||| line	count=1
function	vault encrypted return ||| get	count=1
module	details ||| netapp	count=1
function	present on ||| on	count=1
module	as a string for ||| modules	count=1
function	override post [function_2] ||| [function_1] [function_2]	count=9
function	[function_1] licenses ||| [function_1] [function_2]	count=2
arg	the url and ||| url	count=1
function	supplied service ||| services	count=1
module	method ||| cloud	count=1
function_arg	sends configuration [arg_2] ||| [arg_2] [function_1]	count=4
function	all ovirt [function_2] ||| [function_2] [function_1]	count=1
arg	idempotency using ||| cli	count=3
module	of the ||| os	count=1
function_arg	[function_1] from gce ||| [arg_2] [function_1]	count=2
function	decorator to retry ||| retry	count=1
function	state ||| system state	count=2
module	string for ||| modules database	count=1
arg	for the server to ||| cloud server	count=1
arg	given host line to ||| line	count=1
module	function dispatches logic ||| modules monitoring	count=1
function	[function_1] with ||| [function_2] [function_1]	count=4
class	main ||| clc load balancer	count=2
function	nodes exist ||| ensure lbpool nodes set	count=1
class	passed by [class] ||| base [class]	count=1
function_arg	configuration [arg_2] ||| [function_1] [arg_2]	count=2
function	the explicit environment ||| get environment	count=1
function	entity id ||| id	count=1
function	schedule ||| schedule	count=4
function	true if the ||| is	count=1
class	new block ||| block	count=1
function	initial ||| send initial	count=1
function	name field from ||| name	count=1
function	[function_1] event ||| [function_2] [function_1]	count=3
function	the configuration [function_2] ||| [function_2] [function_1]	count=6
function	sdk provides ||| snat	count=1
function	determine if changes ||| change	count=1
module	return ||| modules packaging os	count=1
function	[function] returned from ||| find [function] w	count=1
function	tags from [function_2] ||| [function_1] [function_2]	count=1
class	and gets the ||| variable manager	count=1
class	a system from ||| rhsm	count=1
module	of the ||| modules packaging os	count=1
module	for the ||| modules source_control	count=1
class	added remotely ||| cloud watch event rule	count=1
function	set which ||| set task and variable	count=1
module	lxd nothing ||| plugins	count=1
module	for [module_2] ||| [module_1] cloud [module_2]	count=1
function	password from a ||| password	count=1
arg	a folder to cloud ||| folder	count=1
function	as a salt for ||| salt	count=1
module	idemopotent function ||| monitoring	count=1
function	clone ||| clone	count=1
module	which returns a galaxyinfo ||| playbook role	count=1
function	custom finalize method for ||| finalize	count=1
module	machine via the ||| modules	count=1
arg	if dict_a [arg_2] ||| [arg_2] [arg_1]	count=3
class	directed for registration ||| rhsm	count=1
function	a default security group ||| default	count=1
class	are ||| manager	count=5
function	connection close ||| close	count=1
class	hostgroup ||| hostgroup	count=1
function	parse ||| parse	count=5
module	registered ||| modules	count=1
module	a single object or ||| modules cloud	count=1
function	a size in ||| format disk size	count=1
function	[function_1] a policy ||| [function_2] [function_1]	count=1
module	for the given name ||| modules cloud	count=1
module	return ||| cloud profitbricks	count=1
module	for host ||| modules	count=1
function	[function_1] list ||| [function_1] [function_2]	count=4
function	send a [function_2] ||| [function_2] [function_1]	count=3
arg	to the provided pool ||| alias location lb_id pool_id	count=2
module	a group ||| cloud	count=1
arg	value [arg_2] ||| [arg_1] [arg_2]	count=1
class	daemon ||| container set	count=1
arg	cert_file ||| cert_file	count=1
function	connect to the container ||| connect	count=1
function	override post validation of ||| post validate	count=1
function	[function] output like ||| filter non [function]	count=1
function	lambda function alias if ||| lambda alias	count=1
function	check supplied ||| check	count=1
arg	groups are not destroyed ||| bes	count=1
module	a ||| modules cloud	count=41
module	shell ||| modules system	count=2
function	them into ||| tags in	count=1
module	and ||| centurylink	count=3
class	security group <name>01 ||| azure rmmodule base	count=1
function	state of ||| instance state	count=1
arg	if found fail module ||| module	count=1
class	the public key ||| public key	count=2
function	load ||| load	count=2
function	and update ||| update	count=1
class	certificate signing request ||| certificate signing request	count=1
arg	creates new ||| override_count	count=1
module	equivalent [module] example ||| [module]	count=1
arg	vm ||| vm state force	count=2
function	a supplied service string ||| services	count=1
module	return ||| modules web_infrastructure	count=1
function	number of newlines ||| count newlines from	count=1
function	record the start ||| start	count=1
function	self force is true ||| user	count=1
arg	[arg] so ||| [arg]	count=2
function	of a ||| get	count=7
function	list [function_2] ||| [function_2] [function_1]	count=6
arg	of a vpc when ||| module vpc	count=1
function	tag ||| evaluate tags	count=1
module	a ||| modules cloud docker	count=7
arg	in [arg_2] ||| [arg_1] [arg_2]	count=10
module	authorization [module] ||| [module]	count=1
module	a previously ||| modules	count=1
function	play ||| play	count=1
function	an import request ||| import	count=1
module	generate a ||| cloud docker	count=1
arg	of servers ||| server_ids package_id	count=1
function	port ||| ports	count=1
function	[function_1] a default ||| azure rmmodule base [function_1] [function_2]	count=1
function	modify the memory ||| modify	count=1
module	for a single ||| modules cloud	count=2
class	evaluates an existing network ||| docker network	count=1
function	results off the final ||| results	count=1
arg	saves all information ||| backup_file	count=1
function	cache [function_2] ||| [function_2] [function_1]	count=1
function	botocore ||| botocore	count=1
function	retrieves ||| get	count=2
function	reads results off ||| process pending results	count=1
function	multiplexing ||| close	count=1
module	locale ||| modules system	count=1
class	the certificate ||| certificate	count=1
function	elb ||| elb	count=1
module	[module_1] check depending ||| [module_1] [module_2]	count=2
function	generate a ||| generate	count=1
function	level ||| level	count=1
function	[function_1] ids ||| [function_2] [function_1]	count=4
class	execute the main code ||| firewall	count=1
arg	items specified and collates ||| items	count=1
function	used to write a ||| write	count=1
function_arg	the selinux [arg_2] ||| [arg_2] [function_1]	count=2
function	range ||| range	count=1
arg	some ovirt entity ||| entity	count=1
arg	module ||| module secgroup	count=1
function	a task ||| v2 runner	count=1
class	path ||| clc firewall policy	count=2
module	elasticache parameter ||| modules cloud amazon	count=1
module	elasticache ||| modules cloud amazon	count=1
function	and [function_2] ||| [function_1] [function_2]	count=5
module	[module_1] logicmonitor ||| [module_1] [module_2]	count=10
function	based on con attributes ||| create control path	count=1
module	a valid python dict ||| plugins action	count=1
arg	its name or id ||| locator location	count=1
class	supports multiplexing ||| connection	count=1
function	members of ||| get balancer members	count=1
module	by ||| modules cloud	count=4
function	encrypt the ||| encrypt	count=1
module	preserve ||| plugins	count=1
function	[function_1] removed from ||| [function_2] [function_1]	count=4
function_arg	decrypt a [arg_2] ||| [function_1] [arg_2]	count=2
function	[function_1] by the ||| [function_2] [function_1]	count=1
function	add new [function] bottom so ||| save [function]	count=1
function	connection to ||| connection	count=1
module	missing ||| modules monitoring	count=2
function	compatibility ||| compatibility	count=1
module	any ||| modules cloud docker	count=1
function	group [function] ||| ec2 security group [function]	count=3
function	inventory which ||| retry inventory	count=1
module	main code ||| modules cloud centurylink	count=3
arg	the kinesis stream ||| client stream_name	count=1
function	parser ||| parser	count=1
module	connection ||| plugins	count=8
function_arg	to find [arg_2] ||| [arg_2] [function_1]	count=3
arg	all elbs and wait ||| wait timeout	count=1
module	nothing ||| plugins	count=8
function	a dict from an ||| dict from obj	count=1
function_arg	[function_1] name using ||| [arg_2] [function_1]	count=1
function	modify the ||| modify	count=1
arg	need to choose where ||| remote_path	count=3
function	removed from the ||| absent	count=1
arg	of a vpc when ||| vpc	count=1
function	schedule downtime for all ||| schedule servicegroup host downtime	count=1
function	on con attributes ||| create control path	count=1
function	shelve ||| shelve	count=1
module	connection ||| modules database postgresql	count=1
function	specific type example ||| type	count=1
module	new ttl ||| cloud google	count=1
function	are set which ||| set	count=1
function	the main code path ||| process	count=3
function	backend policies ||| backend policies	count=2
class	via the ||| virt	count=1
function_arg	domain [arg_2] ||| [arg_2] [function_1]	count=2
function	object for the group ||| group	count=1
module	machine ||| modules cloud misc	count=2
module	supports ||| plugins	count=1
function	a list ||| list	count=2
module	output from command ||| plugins	count=1
arg	if the given router ||| module router network	count=1
module	retrun ||| storage infinidat	count=4
function	port matching logic ||| ports match	count=2
function	params ||| params	count=2
module	[module_1] the ||| [module_1] [module_2]	count=10
function	terminate the connection nothing ||| close	count=5
module	return true if ||| module_utils	count=2
function	based on the name ||| name	count=2
function	copies an ami ||| copy image	count=1
module	if the given locale ||| modules system	count=1
module	main code path ||| modules	count=3
class	to receive updates from ||| rhsm	count=2
function	downtime for all services ||| svc downtime	count=2
arg	count ||| count	count=1
module	on none ||| storage infinidat	count=1
arg	[arg_1] are ||| [arg_2] [arg_1]	count=2
function_arg	nodes [arg_2] ||| [function_1] alias location [arg_2]	count=1
function	set the user ||| user	count=1
class	previously registered system ||| rhn	count=1
arg	templated specially in the ||| templar	count=1
function_arg	return pool [arg_2] ||| [function_1] [arg_2]	count=1
function	decrypt a ||| decrypt	count=1
module	it to the ||| modules web_infrastructure	count=1
function_arg	compare [arg_2] ||| [function_1] request with dict [arg_2]	count=1
function	update method on ||| instance update	count=1
arg	from the server ||| profitbricks datacenter_id server_id	count=1
function	set the named ports ||| update named ports	count=1
arg	pip command to ||| pip chdir	count=1
function	[function] server objects ||| get servers from [function]	count=6
function_arg	[function_1] of packages ||| [function_1] [arg_2]	count=3
function	creates a unique key ||| key	count=1
function_arg	[function_1] those expected ||| [function_1] module [arg_2]	count=1
function	to create if ||| create	count=1
function	[function_1] is removed ||| [function_2] [function_1]	count=4
module	needs ||| modules cloud openstack	count=1
function	a nic ||| create nic	count=1
function	[function_1] port ||| [function_1] [function_2]	count=4
function	then write [function_2] ||| [function_1] [function_2]	count=2
function	virtual machine ||| machine	count=1
function	of ||| get	count=64
function	a temporary path ||| tmp path	count=1
function	and/or attributes ||| user alter	count=1
function	[function_1] volume from ||| [function_2] [function_1]	count=3
arg	object to ||| obj	count=2
function	return a list ||| list	count=1
function	line in the file ||| file	count=1
function	the sdk provides ||| snat	count=1
function	wait for ||| wait	count=2
module	system ||| modules packaging os	count=8
function	the device supports multiplexing ||| close	count=1
function	on the settings in ||| run	count=1
function	and return a parse ||| parse	count=1
function	[function_1] mode logic ||| [function_2] [function_1]	count=1
function	[function_1] the version ||| [function_1] [function_2]	count=1
module	system to receive ||| modules	count=1
function	the environment ||| environment	count=1
module	the host we've ||| plugins	count=1
class	[class] object ||| [class]	count=6
module	its request_spot_instances() method for ||| modules cloud amazon	count=1
function	state of ||| get file system state	count=1
function	version of ||| get	count=1
function	the start ||| start	count=1
function	on the docker ||| exec	count=1
module	return a ||| modules cloud	count=1
function	the role [function_2] ||| [function_1] [function_2]	count=3
function	is different and ||| different	count=1
function	loads and returns a ||| load	count=1
module	execute the ||| centurylink	count=3
class	system to ||| rhsm	count=2
function	noop [function] ||| get [function]	count=3
arg	of events to ||| fileobj events	count=1
function	virtual [function_2] ||| [function_2] [function_1]	count=3
function_arg	requests [arg_2] ||| [function_1] module [arg_2]	count=1
function	policy is removed ||| policy absent	count=3
function	method to group list ||| group list	count=1
function	passed to subprocess ||| build	count=1
function	retrieves block device ||| get block device	count=4
class	initialized ||| base	count=1
function	a base argument ||| argument	count=1
module	any ||| docker	count=2
function	to schedule downtime ||| schedule svc downtime	count=1
function_arg	[function_1] port ||| [arg_2] [function_1]	count=1
class	are only ||| manager	count=1
module	execute the main ||| centurylink	count=3
function	a path is ||| path	count=3
function	boot volume from the ||| boot volume	count=1
function	ip of ||| get api ip	count=1
function	[function_1] mapping ||| [function_2] [function_1]	count=6
function	run when ||| v2 runner on	count=1
function	a salt for ||| salt	count=1
class	load rhsm ||| rhsm	count=2
module	mysql variable to ||| mysql	count=1
arg	task vars ||| vars play	count=1
function_arg	in port [arg_2] ||| [function_1] on diff host [arg_2]	count=3
function	run on start of ||| playbook on play start	count=1
function	return a path to ||| get	count=1
arg	entity is [arg_2] ||| [arg_1] [arg_2]	count=4
function	repos [function] ||| [function]	count=1
class	details about the ||| net	count=1
class	path and ||| clc load	count=1
function	a class ||| handler	count=1
module	correct length if ||| modules cloud	count=1
function	[function_1] all avi ||| [function_2] [function_1]	count=2
function	git branch commit ||| git	count=1
module	to receive ||| packaging	count=1
module	global mysql ||| database mysql	count=1
function	[function] rsa ||| [function]	count=1
module	for amazon s3 ||| modules cloud amazon	count=2
function	configure ||| configure	count=2
class	task if specified ||| task executor	count=1
module	of output from command ||| plugins	count=1
function	is absent ||| is absent	count=5
arg	which ||| file_name	count=1
arg	explanation ||| explanation	count=1
arg	newgroup into [arg_2] ||| [arg_2] [arg_1]	count=2
function	unpause ||| unpause	count=1
function	up the ubuntu ami ||| lookup ubuntu ami	count=1
function	policy to the ||| policy to	count=2
class	with rhn ||| rhsm	count=1
function	update ||| update auth	count=2
module	return details about the ||| modules storage netapp	count=1
arg	or cpu ||| cpu	count=1
class	path and handle ||| load	count=1
function	2 ||| repo	count=1
arg	which is templated ||| templar	count=1
function	convert them into ||| make tags in	count=1
module	on ||| modules cloud	count=1
function	params when we ||| fail on missing params	count=1
module	the machine ||| modules	count=1
module	updates from subscription-manager ||| modules packaging	count=1
function_arg	task to [arg_2] ||| [function_1] lockstep hosts [arg_2]	count=1
function	the available size of ||| get	count=1
class	synced ||| watch event	count=2
arg	the given task ||| task	count=1
class	a haproxy command ||| haproxy	count=1
function	tuple if ||| as tuple	count=1
function	[function_1] path on ||| [function_1] [function_2]	count=4
arg	host ||| module host	count=1
function	alert policies ||| alert policies	count=2
arg	tag in the ||| tag	count=1
function	loads [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] the vm ||| [function_1] [function_2]	count=1
module_class	[module_1] paginated ||| [module_1] [class_2]	count=4
module	objects from cloud files ||| modules cloud rackspace	count=1
function_arg	[function_1] [arg_2] ||| [function_1] name [arg_2]	count=6
arg	which is templated specially ||| attr value templar	count=1
function	a base argument specifiation ||| argument	count=1
function	all available callbacks ||| callbacks	count=1
function	writes initial data ||| initial data	count=1
arg	entity [arg_2] ||| [arg_1] [arg_2]	count=4
function	the low [function_2] ||| [function_1] [function_2]	count=2
arg	given value ||| value num_items	count=1
class	a block ||| block	count=1
function	a salt ||| salt	count=1
function	export ||| get export	count=3
function	downtime ||| downtime	count=4
function	return any [function_2] ||| [function_1] [function_2]	count=1
module	receive updates ||| packaging os	count=1
arg	if the host ||| host	count=1
function	compare the host's current ||| compare props	count=1
function_arg	dict [arg_2] ||| [arg_2] [function_1]	count=8
module	entry point for ansiblemodule ||| modules network junos	count=1
function	clb node ||| rax clb node	count=2
function	set which ||| set	count=1
module	from here to ||| modules cloud	count=2
function	validate that name is ||| validate name	count=1
function	when we can not ||| fail on missing	count=1
function	[function_1] list of ||| [function_1] product [function_2]	count=2
arg	query [arg] using jmespath ||| [arg]	count=1
function	module code through ||| module	count=1
module	reach the ||| openstack	count=1
function	return the path ||| dhcp	count=1
module	if a ||| cloud centurylink	count=2
function	[function_1] binary ||| [function_2] [function_1]	count=1
module	s3 ||| cloud	count=1
class	copies ||| action base	count=1
function_arg	on [arg_2] ||| [function_1] cli command cmd [arg_2]	count=1
class	alert ||| modify server	count=1
module	sees a ||| modules	count=2
function	remote ||| do remote	count=1
arg	is 'present' if user ||| result_state fail_condition search_params	count=1
function_arg	[function_1] be fulfilled ||| [arg_2] [function_1]	count=4
module	lxc ||| plugins connection	count=2
arg	digest_method specified ||| filename algorithm	count=1
arg	where a yaml ||| file_name show_content	count=1
class	system as ||| rhsm	count=1
function	look up the ubuntu ||| lookup ubuntu	count=1
function	a group [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] create is ||| [function_2] [function_1]	count=2
module	synchronize all of the ||| modules packaging os	count=1
function	[function_1] associated with ||| [function_2] [function_1]	count=3
module	we've been initialized with ||| plugins	count=1
function	a shelve ||| shelve	count=1
function	dict of key ||| dict	count=2
class	cache ||| cache	count=1
arg	from task auth parameter ||| auth	count=1
arg	given facts ||| facts	count=2
function_arg	[function_1] dict passed ||| [arg_2] [function_1]	count=1
function	connection close has been ||| close	count=1
module	with ||| cloud	count=1
function	be used when executing ||| compute	count=1
arg	cli command on ||| module cli	count=7
function	the role ||| role	count=1
class	only vars ||| vars	count=1
module	file ||| modules	count=1
arg	clc [arg_2] ||| [arg_1] [arg_2]	count=1
arg	through each bond member ||| _bondmems	count=1
module	list for ||| modules	count=1
arg	commands to the device ||| commands	count=2
function	[function_1] [function_2] the ||| [function_2] [function_1]	count=12
module	the given ||| cloud misc	count=1
function	pause the ||| pause	count=1
function	[function_1] file from ||| [function_1] [function_2]	count=10
module	subscribed ||| module_utils	count=1
function	the alert policy ||| alert policy	count=13
module	a single ||| cloud	count=2
function	add the hostkey ||| add	count=1
module	via ||| modules cloud	count=1
function	[function_1] the balancer ||| [function_1] [function_2]	count=1
function_arg	task [arg_2] ||| [function_1] lockstep hosts [arg_2]	count=1
function	spot ||| await spot	count=1
arg	path into ||| module executable path	count=1
module	for [module] matching ||| [module]	count=1
function	the module code ||| configure module	count=1
arg	given agent using its ||| service_id	count=1
arg	the dict passed ||| name passed default	count=1
function	of newlines ||| newlines from	count=1
arg	or fail ||| module	count=1
function	with the request ||| request with	count=1
arg	and kickstart image ||| image_name kickstart	count=1
function	on a different ||| on diff	count=3
arg	to set the value ||| value	count=2
function	a zone by ||| zone by	count=1
module	destination file ||| modules	count=1
module	main method ||| modules cloud lxc	count=1
function	module json ||| json	count=1
function	to be removed ||| target ids to	count=1
class	code ||| clc load	count=1
arg	module data ||| remote_path data	count=1
class	on ||| connection base	count=1
class	to receive ||| rhsm	count=2
function	size of a ||| get	count=1
function	collect data about ||| describe	count=1
function	new certificate and ||| get certificate	count=1
arg	[arg_1] password ||| auth header [arg_1] [arg_2]	count=2
class	the certificate [class_2] ||| [class_1] [class_2]	count=2
class	block ||| block	count=2
function	retrieves the alert ||| alert	count=1
function	a size ||| disk size	count=1
function	type of ||| interface type	count=2
class	[class] provisioning ||| [class]	count=1
arg	host ||| host	count=13
class	added remotely ||| watch event rule	count=1
function	to preserve spaces ||| params	count=1
function	preserve ||| params	count=1
module	mysql variable to ||| database mysql	count=1
function	is currently associated with ||| address is associated with	count=1
function	[function] server ids ||| [function] from	count=2
class	file or stdout ||| editor	count=1
function_arg	[function_1] sensible host ||| [function_1] module host key [arg_2]	count=1
function	preserve spaces ||| params	count=1
function	anti affinity policy ||| anti affinity policy	count=1
module	start the machine via ||| cloud misc	count=1
function	filesystem ||| filesystem	count=1
module_class	[module_1] the module ||| [module_1] [class_2]	count=2
arg	name of the image ||| name tag	count=1
function	binds to array of ||| get image binds	count=1
function	to be updated ||| to	count=1
function	path is ||| path	count=3
arg	the provided ||| lb_id	count=2
arg	not be templated ||| templar	count=2
arg	on the clc ||| clc module alias	count=1
function	address from ||| address	count=1
module	a new ||| modules cloud	count=1
function	policy [function] ||| get alert policy [function]	count=2
class	rule [class_2] ||| [class_2] watch event [class_1]	count=4
function_arg	[function_1] git repo ||| [function_1] [arg_2]	count=2
module	entry point for ||| modules network junos	count=6
function	on a ||| on	count=1
function	parse it [function_2] ||| [function_1] [function_2]	count=4
function	[function_1] lease file ||| [function_1] [function_2]	count=3
module	is present for ||| modules cloud	count=1
function	convert array of binds ||| image binds	count=1
function_arg	security [function_1] [arg_2] group names are not ||| [function_1] [arg_2]	count=2
function_arg	task [arg_2] ||| [arg_2] [function_1]	count=1
module	the amazon tag ||| modules cloud amazon	count=2
function	class [function_2] ||| [function_2] [function_1]	count=4
function	members of the ||| get balancer members	count=1
function	request parameters ||| request	count=1
module	fs ||| cloud amazon	count=1
class	key ||| key	count=3
arg	for the specified service ||| services	count=1
function	list of ||| tag list	count=2
function_arg	pool [arg_2] ||| [arg_2] [function_1]	count=1
arg	list or ||| module	count=1
class	return details ||| app cdotlun	count=1
function	[function_1] [function_2] ||| modify server [function_1] [function_2]	count=1
arg	a command [arg_2] ||| [arg_2] [arg_1]	count=1
function	time ||| time	count=1
arg	[arg_1] a vpc ||| [arg_2] [arg_1]	count=6
function	[function_1] latest ||| [function_1] [function_2]	count=3
function	ensures the [function_2] ||| [function_1] [function_2]	count=6
module	list of instances for ||| modules cloud google	count=1
arg	change ||| lb awaited_state initial_state timeout	count=1
class	data ||| data	count=3
function	method ||| method	count=1
module	it ||| web_infrastructure	count=1
arg	in a datacenter ||| module datacenter lookup_group	count=3
module	the ||| web_infrastructure	count=1
arg	follow_redirects ||| follow_redirects	count=1
class	been initialized with ||| connection	count=1
function	check the status of ||| get	count=1
function_arg	[function_1] [arg_2] security group names are ||| [function_1] [arg_2]	count=9
function	the public ip available ||| public ip present	count=1
function	alert policy ||| add alert policy	count=2
arg	directories parallel ||| group new_pb_basedir return_results	count=1
function	in the docker container ||| docker	count=1
function	containing a list of ||| get collectors	count=1
arg	installed or ||| name depot	count=1
function_arg	zone in [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] shell ||| [function_1] [function_2]	count=5
function	the group ||| group	count=1
function	port [function_2] ||| [function_2] [function_1]	count=2
arg	entity values ||| entity	count=1
arg	play host [arg_2] ||| [arg_2] [arg_1]	count=1
class	method ||| lxc	count=1
function	initial data to ||| send initial data	count=2
function	start of the ||| start	count=1
arg	from the task ||| task variables	count=1
arg	play_context ||| play_context	count=1
module	metadata for ||| modules cloud rackspace	count=1
module	a group ||| cloud amazon	count=1
function	server_url ||| server url	count=1
arg	if it doesn't ||| parent_name group_description	count=1
module	to receive ||| modules	count=1
function	to parse ||| parse	count=1
arg	group ||| group	count=1
function	reboot ||| reboot	count=1
arg	events ||| events data	count=1
function	boto3 ||| boto3 tag	count=2
arg	clc ||| clc	count=7
function	[function_1] a list ||| [function_2] [function_1]	count=1
module	to ||| monitoring	count=1
function	[function_1] a server ||| [function_2] [function_1]	count=4
function	process the ||| process	count=6
module	and ||| modules web_infrastructure	count=2
arg	a second ||| module pacman_path	count=1
arg	the task if ||| task	count=1
function	inteligently build out ||| build	count=1
class	write it to the ||| acmeclient	count=1
class	and handle ||| firewall	count=1
function	at the end ||| from end	count=1
module	the machine via the ||| cloud	count=1
arg	entity is 'absent' ||| entity search_params	count=3
module	if already ||| modules packaging os	count=1
module	an eip from ||| cloud	count=1
function	and get the version ||| get version	count=1
module	a ||| packaging	count=1
arg	the pause ||| tmp task_vars	count=1
arg	if name is none ||| content vimtype name	count=2
function	mapping ||| mapping	count=2
arg	the dict passed ||| name passed default module	count=1
function	error did not ||| error	count=1
function_arg	group in a ||| group module	count=1
function	account if it is ||| account	count=1
arg	it doesn't ||| group_name parent_name group_description	count=1
module	system as ||| module_utils	count=1
arg	executable or ||| module executable	count=2
function	removed if there is ||| absent	count=1
arg	get [arg_2] ||| [arg_2] [arg_1]	count=1
function_arg	[function_1] port ||| [function_1] host [arg_2]	count=1
class	execute the main code ||| firewall policy	count=1
arg	should not be templated ||| templar	count=2
function	[function_1] password ||| [function_1] [function_2]	count=4
arg	from the server ||| module profitbricks datacenter_id server_id	count=1
module	object for later ||| modules web_infrastructure	count=2
function	filename [function_2] ||| [function_1] [function_2]	count=4
function	new [function] bottom so ||| save [function]	count=1
class	code path and ||| firewall	count=1
arg	remove a user ||| user	count=1
module	returns true if this ||| playbook	count=1
function_arg	[function_1] two dictionaries ||| [function_1] [arg_2]	count=3
module	string ||| modules database mysql	count=1
arg	options ||| module options	count=1
module	for server default and ||| modules net_tools	count=1
arg	installed ||| depot	count=1
function	account ||| account	count=1
class	code ||| load	count=1
arg	of events ||| events data	count=1
arg	executable execute the script ||| vault_password_file loader	count=1
function	return the list of ||| get	count=1
module	delete an ||| modules cloud	count=2
function	servers ||| servers	count=4
function	at the end ||| end	count=1
class	channels ||| rhsm	count=1
arg	specified in [arg] ||| [arg]	count=1
arg	on the [arg_2] ||| [arg_1] base [arg_2]	count=1
class	an ||| inventory parser	count=1
arg	of server_ids ||| server_ids	count=1
module	to a lambda function ||| cloud	count=1
module	object ||| monitoring	count=1
function	a range [function_2] ||| [function_2] [function_1]	count=6
function	to [function_2] ||| [function_2] [function_1]	count=2
module	a directory ||| plugins	count=1
function	connect to ||| connect	count=4
function	the version of ||| get version	count=3
module	idemopotent function to ||| modules	count=1
function	removes mount targets ||| delete mount targets	count=3
class	without the task ||| task	count=1
function	the tags ||| get tags	count=1
function	a default security ||| default	count=1
function	modify an [function_2] ||| [function_1] [function_2]	count=1
function	configuration is different and ||| has different config	count=1
function	anti affinity [function] exist ||| find aa [function]	count=1
module	system to receive updates ||| modules packaging	count=1
module	if successful otherwise false ||| modules database postgresql	count=1
function	render this ||| render	count=1
class	module ||| module	count=10
arg	a location ||| location	count=1
function	gone or delete ||| rebooted	count=1
module	for the ||| modules cloud	count=16
module	linode ||| modules cloud linode	count=1
function	post validation for ||| post validate	count=2
module	objects from cloud ||| cloud rackspace	count=1
function	a backend [function_2] ||| [function_2] [function_1]	count=4
function	only possible [function] few select ||| [function]	count=1
class	of ||| load balancer	count=1
class	set ||| public ip	count=1
class	that may change with ||| manager	count=1
module	if ||| modules cloud amazon	count=2
arg	a path to be ||| path	count=1
module	supports multiplexing ||| plugins	count=1
arg	[arg_1] servicegroup ||| [arg_2] [arg_1]	count=16
module	path and ||| centurylink	count=3
class	add ||| modify server	count=1
arg	the task if ||| task variables	count=1
function	found ||| found	count=1
class	called when a playbook ||| playbook executor	count=1
function	to be removed ||| to	count=1
module_class	[module_1] signing request ||| [module_1] certificate [class_2]	count=1
function	to create a ||| create clc	count=1
module	system to ||| modules	count=1
function	username set the remote ||| do remote	count=1
function	reads results off the ||| pending results	count=1
function	[function_1] backend ||| [function_2] [function_1]	count=1
module	it to the ||| modules	count=1
function	set ||| set	count=12
arg	the task if they ||| task variables	count=1
function	the ubuntu ||| lookup ubuntu	count=1
function	[function_1] ip ||| [function_1] [function_2]	count=5
module	host bindings if ||| cloud	count=1
function	alert policy is ||| alert policy	count=2
function	encrypt the supplied ||| encrypt	count=1
module	create a new ||| modules cloud dimensiondata	count=2
class	implements are only available ||| manager	count=1
function	post validation ||| post validate	count=3
function_arg	message from [arg_2] ||| [arg_2] [function_1]	count=1
function	create is required ||| create	count=1
module	start the ||| modules cloud	count=1
function	required_together argument to ||| infinibox required together	count=1
function	library aos-pyez ||| aos version	count=1
arg	server is ||| server	count=1
function	ubuntu [function_2] ||| [function_2] [function_1]	count=1
module	path and handle the ||| modules	count=3
function	safe ||| safe	count=1
module	if the given locale ||| system	count=1
module	previously ||| modules packaging os	count=2
function	regorganizes the data ||| data	count=1
function	requests ||| requests	count=1
function	with an error message ||| fail json	count=1
function	getting [function] aside ||| [function]	count=1
class	data [class_2] ||| [class_1] [class_2]	count=2
function	repos [function] repo dictionary ||| [function]	count=1
function	get the ||| get	count=11
module	set a global mysql ||| modules database mysql	count=1
function	[function] library ||| [function] supports param in	count=2
class	main ||| policy	count=1
function	a pager ||| pager	count=1
function	spaces ||| parse	count=1
function	need to be removed ||| to	count=1
function	action the user wants ||| action	count=1
arg	names [arg] security ||| [arg]	count=1
function	a proxy [function_2] ||| [function_2] [function_1]	count=1
arg	on a remote box ||| remote_user	count=1
class	expects container id or ||| manager	count=1
arg	value in the vars_cache ||| varname value	count=1
function	an object by ||| obj	count=2
module	zypper ||| packaging os	count=1
function	factory ||| factory	count=1
module	machine ||| cloud misc	count=2
function	be [function] ||| [function]	count=2
arg	dns ||| module gcdns	count=1
function	the low level shell ||| low level execute	count=1
module	ubuntu ||| cloud amazon	count=1
module	host we've been ||| plugins connection	count=1
arg	user ||| user	count=4
class	execute ||| firewall	count=1
function	find a ||| rax find loadbalancer	count=1
module	to receive updates ||| modules packaging os	count=1
module	lxd nothing to do ||| plugins connection	count=1
module	been initialized ||| plugins connection	count=1
arg	task if ||| task	count=1
function	provisioning request [function] ||| by uuid w [function]	count=3
function	to compare the ||| compare	count=3
arg	url specifically in the ||| url	count=1
function_arg	[function_1] given path ||| [arg_2] [function_1]	count=1
arg	be templated during ||| value templar	count=1
class	user and see if ||| user	count=1
arg	data ||| remote_path data	count=1
function	password [function_2] ||| [function_2] [function_1]	count=2
function	the named [function_2] ||| [function_2] [function_1]	count=3
function	vty shell if ||| close shell	count=1
arg	and tags of ||| tags	count=1
function	new certificate and write ||| certificate	count=1
function	vty shell ||| shell	count=1
function	returns the remote ||| remote	count=1
arg	cli command on the ||| cli	count=7
arg	way ||| rax_module region_required	count=1
function	information directly from the ||| info	count=1
function_arg	[function_1] a managed ||| [function_1] [arg_2]	count=4
function	create a new ||| create	count=3
module	the machine via the ||| cloud misc	count=1
function	fuzziness in old-style (action/local_action) ||| old style	count=1
arg	is loaded via name ||| name	count=1
function	a dictionary of ||| get	count=1
module	we've been ||| plugins connection	count=1
module	for example the placement_group ||| modules cloud	count=1
arg	a value in the ||| value	count=1
function	flat dict of ||| ansible dict	count=2
function	type example ||| type	count=1
function	id ||| system id	count=1
class	system from all subscribed ||| rhsm	count=1
function_arg	[function_1] a clc ||| [arg_2] [function_1]	count=2
function	clc server ||| clc	count=1
function_arg	service from gce ||| service gce name	count=2
arg	the server ||| cloud server	count=1
function	dictionary ||| dict	count=1
function	stream ||| find stream	count=1
function	this assumes the branch ||| branch	count=1
function_arg	notifications for [arg_2] ||| [function_1] [arg_2]	count=2
arg	set the value ||| value	count=2
module	to the host we've ||| connection	count=1
function_arg	configuration from [arg_2] ||| [function_1] [arg_2]	count=2
function	[function_1] of the ||| [function_1] [function_2]	count=3
module	a previously registered system ||| modules packaging	count=1
arg	to have ||| propertyhash	count=2
arg	to those expected by ||| module_params	count=1
class	execute the main code ||| clc	count=3
module	dn exists returns a ||| modules	count=1
module	do here ||| plugins connection	count=7
arg	remote branch version this ||| dest remote	count=1
function	an ||| parse	count=2
function	mapping from ||| mapping	count=2
function	host ||| host overrides	count=2
function_arg	nodes [arg_2] ||| [arg_2] [function_1]	count=2
function	the branch does not ||| remote branch	count=1
arg	by its name ||| locator location	count=1
function	error title ||| title from exception	count=1
arg	templated during the ||| attr value templar	count=1
module	a global mysql ||| mysql	count=1
function	policies for a ||| policies for	count=2
arg	dns zone ||| gcdns zone	count=1
function	for all avi ||| avi	count=1
function	zone [function_2] ||| [function_1] [function_2]	count=4
class	returns a json ||| logic monitor	count=3
module	for a ||| modules cloud centurylink	count=1
class	module to ||| ansible module	count=1
function	file or if executable ||| file	count=1
module	indicate if the ||| modules	count=1
arg	used during ||| in_str	count=1
function	[function_1] policy ||| [function_2] [function_1]	count=33
function	ip removed ||| ip absent	count=2
arg	in [arg] ||| [arg]	count=1
function	deploy [function_2] ||| [function_2] [function_1]	count=2
arg	name using ||| name	count=1
function	creates new ||| create	count=1
arg	a single base64-encoded command ||| as_list strict_mode preserve_rc	count=1
function	changes are required ||| system state change	count=1
arg	is executed when ||| action_condition wait_condition	count=1
function_arg	umc module [arg_2] ||| [function_1] module [arg_2]	count=3
module	power [module] ||| [module]	count=1
module	via the given ||| misc	count=1
function	[function_1] mode logic ||| [function_1] [function_2]	count=1
module	a specified function ||| cloud	count=1
function	put [function_2] ||| [function_2] [function_1]	count=1
function	if ||| close	count=1
function	user that ||| user	count=1
function	returns members [function_2] ||| [function_2] [function_1]	count=10
class	dimension data network ||| dimension data network	count=3
function	the remote [function_2] ||| [function_1] [function_2]	count=2
module	the device ||| plugins connection	count=1
function	variables ||| vars	count=2
function	results ||| results	count=1
module	from subscription-manager ||| modules	count=1
function	set instance variables ||| set	count=1
function	changes the [function_2] ||| [function_2] [function_1]	count=1
function	get the version ||| get version	count=2
class	main ||| lxc	count=1
class	process is started ||| process	count=1
function	ovirt facts ||| ovirt facts	count=1
module	eip from ||| modules cloud	count=1
function	used to schedule downtime ||| schedule servicegroup svc downtime	count=1
class	the host ||| connection base	count=1
class	elb ||| elb manager	count=3
arg	fail module ||| module system	count=1
function	[function_1] data matches ||| [function_2] [function_1]	count=3
function	api to create a ||| create clc	count=1
class	[class_1] in aws ||| [class_2] [class_1]	count=2
function	[function_1] associated with ||| [function_1] [function_2]	count=3
function	all arguments have ||| check argument	count=1
function_arg	present in ||| cert present module	count=1
module	filter files ||| modules files	count=2
function_arg	application from [arg_2] ||| [arg_2] [function_1]	count=2
module	creates ||| modules cloud amazon	count=1
arg	pattern ||| pattern	count=3
function	the updated [function_2] ||| [function_1] [function_2]	count=2
function	actual location ||| ports conf	count=1
function	file ||| file from	count=1
module	which matches the ||| executor	count=1
module	key authorization [module_2] ||| [module_1] [module_2]	count=1
function	[function_1] protocol ||| [function_1] [function_2]	count=1
function	of handlers this ||| handlers	count=1
module	system to receive ||| packaging	count=1
function	path of [function_2] ||| [function_1] [function_2]	count=2
module	removes ||| cloud profitbricks	count=1
function	create the ||| create	count=1
function	transfer ||| put	count=9
arg	permissions bit if they ||| etype entity permissions use_nfsv4_acls	count=1
class	path ||| firewall policy	count=2
function_arg	[function_1] stackdriver ||| [arg_2] [function_1]	count=4
function	and ||| process	count=3
function	retention of ||| retention action	count=1
function_arg	[function_1] the url ||| [arg_2] [function_1]	count=1
function	execute the ||| process	count=3
function	[function_1] [function_2] modules ||| [function_1] [function_2] full argument spec	count=4
function	[function_1] filesystem ||| [function_1] [function_2]	count=1
function	initial ||| initial	count=1
module	and handle ||| modules	count=3
class	a json collector object ||| logic monitor	count=2
function	the boot [function_2] ||| [function_2] [function_1]	count=3
function	command prompt and ||| handle prompt	count=2
function	role attributes string ||| role	count=1
function	name field ||| name	count=1
class	to receive updates ||| rhsm	count=2
function	to be ||| to	count=2
class	and ||| policy	count=1
class	memory cache first as ||| base file cache	count=1
module	given ||| modules cloud misc	count=2
module	ami for ||| modules cloud amazon	count=1
arg	a piece of ||| plaintext	count=1
class	json group ||| logic monitor	count=1
function	connection to python sdk ||| connection	count=1
arg	existence of a ||| name cidr_block	count=1
module	first authorization [module] given domain ||| [module]	count=1
function	the difference between ||| diff	count=1
function	list of targets ||| targets	count=1
module	update the ||| modules	count=1
function	when module names are ||| split module string	count=1
class	if the ||| connection	count=1
class	dimension [class_2] ||| [class_2] [class_1]	count=3
function	a temporary [function_2] ||| [function_2] [function_1]	count=3
class	set ||| clc snapshot	count=1
function_arg	[function_1] [arg_2] ||| [function_1] cli command cmd [arg_2]	count=2
arg	set of events ||| fileobj events data	count=1
arg	post an ||| github_repo reference role_name	count=1
arg	toggle whether plays run ||| arg	count=1
class	backends ||| elb	count=1
arg	the clc ||| clc module acct_alias	count=1
function	authorization header [function] auth ||| [function] auth	count=1
module	the args for the ||| modules files	count=1
function	zone ||| get zone	count=1
arg	datastructure which do ||| ds	count=1
module	remove ||| cloud profitbricks	count=1
arg	second ||| module pacman_path name state	count=1
function	a failure when ||| failure	count=1
module	google cloud ||| modules cloud google	count=2
module	to the ||| connection	count=2
class	that may change with ||| pool manager	count=1
module	the host we've been ||| plugins connection	count=1
module	code ||| modules	count=3
class	[class_1] request ||| [class_2] [class_1]	count=2
function	check if [function_2] ||| [function_2] [function_1]	count=2
function_arg	path for an init [function_1] [arg_2] ||| [function_1] [arg_2]	count=1
function	different ||| has different	count=1
class	filesystem agains specified ||| swupd	count=1
class	code to retry ||| cloud retry	count=1
function	the lambda function ||| lambda	count=1
class	module implements are ||| manager	count=1
function	if parted [function_2] ||| [function_1] [function_2]	count=2
function	to preserve ||| params	count=1
function	policy [function] ||| get aa policy [function]	count=2
class	server ||| server	count=3
arg	to assign the specified ||| result_item	count=1
arg	datacenter and account alias ||| location firewall_policy_id	count=1
function	role attributes ||| role	count=1
arg	[arg] host ||| [arg] host key	count=1
module	path ||| cloud centurylink	count=6
module	and new ttl and ||| cloud google	count=1
function	by the ||| by	count=2
function	any [function_2] ||| [function_2] [function_1]	count=1
arg	installed a second ||| module pacman_path name state	count=1
function	is used to schedule ||| schedule servicegroup host	count=1
module	true if package ||| packaging os	count=1
function	[function_1] from a ||| [function_2] [function_1]	count=4
function	filter ||| filter	count=1
arg	a folder to ||| cf folder container	count=1
function	create ||| create	count=27
function	remote ||| remote	count=5
class	for [class] ||| [class]	count=1
class	execution of the task ||| task	count=2
function	a file ||| push file	count=1
function	them into the aws ||| tags in aws	count=1
class	system as directed for ||| rhsm	count=1
function	[function_1] removed ||| [function_1] [function_2]	count=10
arg	returns a getfacl/setfacl ||| mode path follow	count=1
arg	named [arg_2] ||| [arg_2] [arg_1]	count=2
class	and ||| load balancer	count=2
function_arg	nodes to [arg_2] ||| [arg_2] [function_1]	count=2
arg	terms contains a ||| terms	count=1
arg	to return all hosts ||| hosts	count=1
function	boot [function_2] ||| [function_2] [function_1]	count=3
function_arg	[function_1] [arg_2] ||| [function_1] script [arg_2]	count=1
arg	[arg_1] host in ||| [arg_2] [arg_1]	count=8
arg	:arg characters a list ||| characters	count=1
function_arg	[function_1] entity ||| [function_1] [arg_2]	count=5
arg	folder ||| cf folder container	count=1
function_arg	[function_1] the server ||| [function_1] timeout [arg_2]	count=1
function	downtime for a ||| svc downtime	count=1
function	assignment of the ||| get	count=1
function	module ||| configure module	count=1
module	index and ||| modules	count=1
class	rule and ||| watch event rule manager	count=1
function	[function_1] default ||| [function_2] [function_1]	count=3
function	if they are set ||| set task and	count=1
function	provided list of nodes ||| nodes	count=1
function	base init ||| init	count=1
function	checks that depend ||| checks	count=1
function	[function_1] the version ||| [function_2] [function_1]	count=1
class	and returns a tuple ||| manager	count=1
class	memory cache first as ||| cache	count=1
function	downtime for all ||| host svc downtime	count=1
function_arg	is removed [arg_2] ||| [arg_2] [function_1]	count=1
class	when only vars ||| vars	count=1
module	of instances for ||| modules	count=1
function	configure ||| configure server url	count=1
arg	value ||| value	count=8
function	the module ||| configure module	count=1
function	argument [function_2] ||| [function_2] [function_1]	count=5
class	main code path ||| firewall policy	count=1
function	glob ||| glob to	count=2
function	loop args field which ||| loop args	count=1
function_arg	message to [arg_2] ||| [arg_2] [function_1]	count=1
function	setfacl ||| set user facl	count=2
module	authorization [module_2] ||| [module_1] [module_2]	count=1
function_arg	be a noop [function_1] [arg_2] ||| [function_1] [arg_2]	count=4
function	con attributes ||| create control path	count=1
arg	the the status to ||| status wait_timeout	count=1
arg	conn ||| conn module	count=1
class	[class_1] request ||| [class_1] [class_2]	count=2
function	the days ||| days	count=1
function	the hostname and port ||| and port	count=1
class	rule and target ||| watch event rule manager	count=1
function	id from ||| id from	count=2
arg	the given router ||| module router network	count=1
function	api call ||| call	count=2
module	the main ||| cloud centurylink	count=3
function	include ||| preprocess include	count=1
function	as a ||| as	count=1
class	to the lxc nothing ||| connection	count=1
class	the container is ||| container	count=1
arg	clc ||| clc module acct_alias	count=2
function	error title ||| failure title	count=1
function	with [function_2] ||| [function_2] [function_1]	count=5
class	network ||| network	count=3
function	of newlines at ||| newlines	count=1
arg	a command [arg_2] ||| [arg_1] [arg_2]	count=1
arg	remote path ||| path	count=1
function	an ami ||| image	count=1
class	vs existing container ||| container	count=1
function	the policy id ||| get policy id	count=2
module	a group of ||| cloud	count=1
class	process ||| clc snapshot	count=1
function	validation for ||| validate	count=1
function_arg	[function_1] arg ||| [arg_2] [function_1]	count=4
function_arg	deploy event [arg_2] ||| [arg_2] [function_1]	count=1
module	install a ||| modules cloud amazon	count=1
function	[function_1] data to ||| [function_1] [function_2]	count=2
arg	subscript which may be ||| subscript	count=1
function	[function_1] the lease ||| [function_2] [function_1]	count=3
module	to see if a ||| cloud	count=1
module	the destination ||| modules	count=1
function	of the installed overlays ||| sync overlays	count=1
function	copies ||| transfer data	count=2
function	is currently [function_2] ||| [function_2] [function_1]	count=4
module	main code ||| cloud centurylink	count=3
module	path ||| modules	count=3
module	updates ||| web_infrastructure ansible_tower	count=1
module	write ||| modules	count=1
function	a path ||| prefix login path	count=3
module	return ||| modules cloud vmware	count=2
function	[function_1] vault password ||| [function_1] [function_2]	count=1
class	the task ||| task	count=5
class	runs the task with ||| task	count=1
arg	or updates [arg] ||| host [arg]	count=2
arg	[arg_1] nat ||| [arg_2] [arg_1]	count=2
function	already has and ||| has table	count=1
module	in [module_2] ||| [module_2] [module_1]	count=1
function	the balancer [function_2] ||| [function_1] [function_2]	count=2
module	from docker ||| cloud docker	count=2
class	the server ||| server	count=1
module	for a service ||| modules net_tools	count=1
module	retrun ||| infinidat	count=1
module	a previously registered ||| modules packaging os	count=1
module	current ||| network nxos	count=1
module	previously registered system ||| modules packaging os	count=1
function	check the [function_2] ||| [function_2] [function_1]	count=4
function_arg	checksum given [arg_2] ||| [arg_2] [function_1]	count=1
module	return true if the ||| module_utils	count=2
function_arg	security group [function_1] [arg_2] security group names are ||| security group [function_1] names [arg_2]	count=1
function	policy is [function_2] ||| [function_2] [function_1]	count=7
module	record a collection ||| modules cloud docker	count=1
class	in the task list ||| play	count=1
function	in new [function_2] ||| [function_1] [function_2]	count=1
module	path and ||| modules cloud centurylink	count=3
function	they are set which ||| set task and variable	count=1
module	the ||| netapp	count=1
class	data network [class_2] ||| [class_1] [class_2]	count=1
class	code ||| clc firewall policy	count=2
function	templating of the module ||| module	count=1
module	nothing to do here ||| plugins connection	count=7
function	retry the ||| retry	count=1
module	to the host ||| plugins connection	count=1
function	and convert them into ||| tags in	count=1
function_arg	[function_1] named ||| [arg_2] [function_1]	count=3
module	of the ||| packaging	count=1
module	a previously registered system ||| packaging os	count=1
class	that may change with ||| snat pool manager	count=1
function	changes are required to ||| change	count=1
class	from ||| play context	count=1
arg	pool ||| alias location lb_id pool_id	count=1
function	from ||| set	count=2
function	[function_1] from fstab ||| [function_2] [function_1]	count=6
module	elasticache parameter group to ||| cloud amazon	count=1
arg	to stackdriver ||| module key revision_id deployed_by	count=1
function	module error title ||| title from exception	count=1
function_arg	[function_1] the pool ||| [function_1] [arg_2]	count=1
function	autoscaler from ||| autoscaler	count=1
arg	on the command ||| module base command	count=2
function	the keys of each ||| get	count=1
module	the main code ||| centurylink	count=3
arg	the key_id as supplied ||| key_id	count=1
module	needed for special packages ||| modules	count=1
arg	a particular [arg_2] ||| [arg_1] [arg_2]	count=1
function	[function_1] different and ||| [function_2] [function_1]	count=6
function	an argument ||| retry argument	count=1
function	export if found when ||| export	count=1
arg	clc ||| clc module svr_uuid	count=1
class	the play ||| play context	count=1
module	takes a list of ||| modules cloud amazon	count=1
function	[function_1] filesystem ||| [function_2] [function_1]	count=1
function	class ||| handler	count=1
function	get [function_2] ||| [function_1] docker [function_2]	count=1
module	to the lxc nothing ||| plugins	count=1
function	string containing [function_2] ||| [function_2] [function_1]	count=4
function	[function_1] a file ||| [function_1] [function_2]	count=22
function_arg	the aws [arg_2] ||| [function_1] format [arg_2]	count=1
class	server based ||| clc modify server	count=2
function_arg	check mode [arg_2] ||| [function_1] [arg_2]	count=1
function	run on ||| on	count=1
function	aggregate ||| aggr	count=1
function_arg	[function_1] data ||| [arg_2] [function_1]	count=2
module	the docker ||| modules cloud docker	count=2
function	[function_1] removed if ||| [function_1] [function_2]	count=6
arg	of server_ids have ||| server_ids	count=1
module	with [module] network ||| [module]	count=1
arg	on the clc ||| clc	count=1
function	closes the vty shell ||| close shell	count=1
function	[function_1] bind mounted ||| [function_2] [function_1]	count=1
class	cache ||| cache manager	count=6
function_arg	[function_1] server is ||| [function_1] aa policy present [arg_2]	count=1
module	cloud ||| modules cloud	count=1
function	loads variables ||| vars	count=1
function	entity id ||| get id	count=1
module	or all ||| cloud amazon	count=1
module	system to receive updates ||| packaging	count=1
function	that need to ||| to remove	count=1
arg	and task ||| task	count=1
function	create a default security ||| create default	count=1
module	to reach the ||| openstack	count=1
function	removes a ||| remove	count=1
function	error did not ||| error lines	count=1
arg	in directories parallel ||| group new_pb_basedir return_results	count=1
function	requested values and there ||| values	count=1
class	removed remotely ||| cloud watch event rule manager	count=1
module	execution ||| modules network ios	count=3
arg	the url ||| module url	count=1
function	with the request parameters ||| request with	count=1
module	provided ||| cloud centurylink	count=1
function	line in the file ||| from file	count=1
module	updates from ||| modules packaging	count=1
module	via the given ||| modules	count=1
module	successful otherwise false ||| database postgresql	count=1
function_arg	in port [arg_2] ||| [arg_2] [function_1]	count=3
function_arg	script [arg_2] ||| sysv [function_1] [arg_2]	count=1
module	and return results ||| module_utils	count=3
function	[function_1] items ||| [function_2] [function_1]	count=2
function	run on ||| playbook on	count=1
class	the main code ||| clc	count=3
function	verifies that a supplied ||| verify	count=1
function	writes initial data ||| send initial data	count=2
module	display [module] ||| [module]	count=3
function	single ||| match one	count=1
function	public ip address ||| pip	count=1
function	names ||| names	count=1
arg	magic wake-on-lan packet ||| mac broadcast port	count=1
arg	a 2-tuple host port ||| host port connect_timeout	count=1
arg	[arg_1] the command ||| [arg_2] [arg_1]	count=1
arg	all hosts ||| hosts	count=1
module	a valid python ||| plugins action	count=1
module	metadata keys and ||| cloud rackspace	count=1
class	until server provisioning ||| server	count=1
function	any [function_2] ||| [function_1] [function_2]	count=1
function_arg	delete [arg_2] ||| [arg_2] [function_1]	count=2
module	to ||| plugins lookup	count=2
arg	folder to cloud files ||| cf folder	count=1
function	that need to ||| target ids to remove	count=1
function	action ||| action	count=2
function	targets that need to ||| to	count=1
arg	execute the script ||| vault_password_file loader	count=1
function	all plugins with ||| all	count=1
function	to ||| params	count=1
class	the main ||| clc group	count=1
function	and convert them ||| make tags in	count=1
arg	take pear remoteinfo output ||| pear_output	count=1
module	a single object or ||| cloud	count=1
function	changed_when is evaluated after ||| changed when	count=1
function	file with ||| file	count=1
module	all of ||| packaging os	count=1
function	run when a ||| runner on	count=1
function	pattern described in ||| detect	count=1
function	a file from remote ||| file	count=2
module	idemopotent ||| modules monitoring	count=2
arg	is templated specially ||| attr value templar	count=1
arg	if data ||| data	count=1
class	execute the main code ||| load	count=1
function	returns the variables with ||| get vars	count=1
function	attributes for ||| validate attributes	count=1
function	associated with the ||| associated with	count=2
function	blocks for ||| blocks	count=1
function	executing ||| compute	count=1
function	params ||| missing params	count=1
function	with the ||| with dict	count=1
function	find ||| rax find loadbalancer	count=1
arg	change user [arg_2] ||| [arg_2] [arg_1]	count=1
function	security group [function_1] [function_2] names ||| [function_1] [function_2]	count=1
function	a default ||| default securitygroup	count=1
module	or alias or ||| amazon	count=1
class	handle ||| clc	count=3
arg	for a digest_method specified ||| filename algorithm	count=1
module	wait for ||| modules	count=2
function	[function_1] protocol policy ||| [function_1] [function_2]	count=1
arg	text string :arg ||| encoding errors nonstring	count=1
function	validate that [function_2] ||| [function_2] [function_1]	count=4
arg	:arg characters ||| characters	count=1
function_arg	[function_1] or return ||| [function_1] [arg_2]	count=2
module	for server default and ||| modules	count=1
arg	the name of the ||| name tag	count=1
function	the ip of ||| get api ip	count=1
function	schedule ||| schedule servicegroup svc	count=1
function_arg	[function_1] the status ||| [arg_2] [function_1]	count=1
function	is a [function_2] ||| [function_1] [function_2]	count=2
class	code path and ||| clc firewall	count=1
function_arg	[function_1] task ||| [function_1] original task [arg_2]	count=1
function	the elb ||| elb	count=1
arg	vmid ||| vmid	count=4
module	none ||| storage infinidat	count=4
module	and new ttl and ||| google	count=1
function	loads and ||| load	count=1
function	validate that ||| validate	count=3
class	code path and ||| clc	count=3
function	code path and ||| process	count=3
class	available [class] ||| [class]	count=2
function	run on ||| v2 playbook on play	count=1
function	new style ||| new style	count=1
arg	data out to ||| remote_path data	count=1
class	rule ||| event rule manager	count=1
function	them ||| tags in	count=1
function_arg	[function_1] a particular ||| [function_1] [arg_2]	count=2
function	the six [function_2] ||| [function_2] [function_1]	count=1
module	the device supports ||| plugins connection	count=1
class	device supports ||| connection	count=1
module	return ||| netapp	count=1
function	with alias is present ||| present	count=1
function	server certificate ||| server	count=1
function	downtime ||| host downtime	count=1
function	fresh ||| fresh	count=1
function	policy id from ||| policy id from	count=1
function	temporary path on ||| make tmp path	count=2
function_arg	loads variables [arg_2] ||| [arg_2] [function_1]	count=5
class	details ||| net app cdotlun	count=2
function	digest of ||| digest	count=1
function	a class factory that ||| redirect handler factory	count=1
function	module to update ||| update	count=1
function	results off ||| results	count=1
arg	[arg_1] cert_file remains ||| [arg_1] [arg_2]	count=3
function	[function_1] affinity ||| [function_1] [function_2] policy	count=3
function	[function_1] policy is ||| [function_2] [function_1]	count=13
function	ids having the public ||| public	count=1
module	method for ||| modules	count=1
module	record a collection ||| cloud	count=1
function	[function_1] matching ||| [function_2] [function_1]	count=3
function	to ||| remote target ids to remove	count=1
function	the galaxy info entry ||| galaxy info	count=1
function	in version ||| template with version	count=1
class	details about ||| net app cdotlun	count=1
arg	a registered ||| fileobj	count=1
function	the ||| sync	count=1
class	the main code ||| group	count=1
module	filter ||| utilities logic	count=1
arg	pause ||| tmp task_vars	count=1
module	start the machine via ||| modules cloud misc	count=1
function	spaces ||| params	count=1
function	[function] all ||| load product [function]	count=2
function	have the requested ||| check argument	count=1
function	[function_1] list of ||| [function_2] [function_1]	count=8
arg	[arg] based ||| cursor mysqlvar [arg]	count=3
function	reads a string containing ||| parseoptions	count=1
function	inventory which allows ||| inventory	count=1
function	zone ||| zone	count=1
function	for dmi related ||| dmi	count=1
arg	url returns a ||| url	count=1
function	of host ||| get next	count=1
arg	a command ||| module command	count=1
arg	for the key ||| key	count=1
class	connection nothing to ||| connection	count=6
function	returns id ||| file system id	count=1
arg	the clc ||| clc module acct_alias server_id	count=1
function	the start of each ||| record	count=1
function_arg	[function_1] recs[ref][key] ||| [arg_2] [function_1]	count=1
function	temp file then write ||| write	count=1
function	[function_1] volume ||| [function_1] [function_2]	count=5
function	them into ||| in	count=1
function	[function_1] facts ||| [function_1] [function_2] full argument spec	count=4
arg	[arg_1] cloud ||| [arg_1] [arg_2]	count=2
module	only needed for special ||| modules	count=1
module	all of ||| modules cloud amazon	count=1
function	[function_1] name is ||| [function_2] [function_1]	count=1
class	update ||| task parameters	count=1
function	recreate tags [function_2] ||| [function_2] [function_1]	count=3
function	to compare the host's ||| compare props	count=1
function	from the given dict ||| from	count=1
function	deactivate ||| deactivate packages	count=2
module	and write it to ||| modules	count=1
function	tries to parse it ||| parse	count=1
function	explicit environment ||| environment	count=2
module_class	return a [class_2] ||| [module_1] [class_2]	count=4
function	a list of ||| get next	count=1
arg	datacenter ||| datacenter	count=1
arg	play ||| play	count=3
class	path ||| clc group	count=2
module_class	self value ||| modules system timezone	count=1
function	target state ||| state	count=1
module	all of the params ||| amazon	count=1
function	resource ||| resource	count=1
function	around [function] ||| filter non [function]	count=1
class	on the elb ||| elb manager	count=1
module	execute the main ||| modules	count=3
module	it to ||| modules web_infrastructure	count=1
module	record a ||| cloud	count=1
function	a dictionary of ||| dict	count=1
function	provided anti affinity policy ||| aa policy present	count=1
function	code ||| code	count=1
class	network config ||| network config	count=2
function	stop ||| stop	count=1
arg	remote to local ||| in_path out_path	count=2
function	[function_1] a different ||| [function_2] [function_1]	count=3
class	ansible module ||| base module	count=1
class	[class_1] signing ||| [class_1] [class_2]	count=1
arg	uploads a folder ||| cf folder container ttl	count=1
arg	[arg_1] [arg_2] fact cache ||| [arg_2] [arg_1]	count=8
arg	folder to cloud ||| folder container ttl	count=1
arg	module parameters ||| module secgroup remotegroup	count=1
function	to do basic ||| basic	count=1
function	by the ||| id	count=1
function	list ||| load list	count=1
class	user on ||| user	count=1
module	docker ||| connection	count=1
function	[function_1] is different ||| [function_2] [function_1]	count=8
function	present ||| present	count=4
function	that ttl is > ||| ttl	count=1
function_arg	[function_1] which ||| [function_1] [arg_2] line_number	count=5
arg	found fail module if ||| module system	count=1
module	handle ||| modules cloud	count=3
function	ubuntu ami ||| lookup ubuntu ami	count=2
arg	server ||| module profitbricks datacenter_id server_id	count=1
function	and can do pipelining ||| pipelining	count=1
arg	task vars sent ||| vars	count=1
arg	new object collection item ||| collection	count=1
function	[function] status down ||| [function]	count=1
class	[class_1] signing request ||| [class_2] [class_1]	count=1
arg	events to ||| fileobj events data	count=1
function	save a remote file ||| fetch file	count=2
function	[function] bottom ||| save [function]	count=1
class	of the server based ||| clc server	count=1
class	existing container config returns ||| container	count=1
function_arg	modify the [arg_2] ||| [function_1] clc server clc [arg_2]	count=2
module	supports ||| connection	count=1
function	on start ||| v2 playbook on play start	count=1
module	mysql variable to a ||| database mysql	count=1
function	list [function_2] ||| [function_2] loadbalancer [function_1]	count=1
arg	explanation of why ||| explanation	count=1
function	error title ||| failure title from	count=1
function	host [function_2] ||| [function_2] [function_1]	count=2
module	elasticache ||| amazon	count=2
function	from aws ||| fetch aws	count=2
function	etag ||| etag	count=1
class	we've ||| connection	count=1
function	[function_1] spec ||| server [function_1] [function_2]	count=1
function	file is not present ||| from file	count=1
class	process ||| clc modify server	count=1
function	certificate ||| cert	count=1
arg	a 2-tuple ||| connect_timeout	count=1
class	host ||| connection	count=1
module	boto ||| modules cloud amazon	count=2
arg	username ||| username	count=1
module	to ||| modules packaging os	count=2
arg	new or modifies an ||| module vpc_conn	count=1
function	with the device ||| with device	count=3
module	quoted ||| plugins	count=1
module	cluster ||| modules cloud amazon	count=5
function	name or zone_id ||| name	count=1
arg	pattern according ||| pattern	count=1
arg	entity [arg_2] ||| [arg_2] [arg_1]	count=4
function	the keys ||| change keys	count=1
function	[function_1] a group ||| [function_1] [function_2]	count=2
module	a global mysql variable ||| mysql	count=1
function	return the name ||| name	count=2
function	digest of local ||| digest from	count=1
function	the snapshots ||| snapshot	count=1
module	details ||| storage	count=1
module	the main code ||| modules	count=3
arg	the specified service ||| services	count=1
function	the axapi ||| axapi enabled disabled	count=1
class	code path ||| balancer	count=1
function	ubuntu [function_2] ||| [function_1] [function_2]	count=1
arg	the filepath to ||| filepath	count=1
function	a default security group ||| default securitygroup	count=1
function	tags [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] cluster ||| [function_1] [function_2]	count=2
arg	remote branch version ||| git_path module dest remote	count=1
function	[function_1] id from ||| [function_2] [function_1]	count=4
function	targets that need to ||| target ids to	count=1
function	returns the [function_2] ||| [function_2] [function_1]	count=8
module	the system as ||| module_utils	count=1
function	header [function] ||| [function] auth	count=1
module	of the ||| modules	count=1
class	handle the ||| clc load	count=1
function	of a missing label ||| get	count=1
arg	vm determined by ||| vm state	count=1
module	it exists or all ||| modules cloud amazon	count=1
function	allocate ||| allocate	count=1
module	and the database ||| modules database	count=1
arg	from local to local ||| in_path out_path	count=1
function	galaxy ||| load galaxy	count=1
module	get ||| packaging language	count=3
function	return ||| get cert	count=1
arg	the script and ||| vault_password_file loader	count=1
function	close the ||| close	count=2
module	return information from ||| cloud	count=1
function	config ||| get config	count=2
function	[function_1] different ||| [function_2] [function_1]	count=9
module	pip freeze pip ||| language	count=1
function	variables set on the ||| set host overrides	count=1
function	the loop ||| run loop	count=1
function	schedule downtime for all ||| schedule servicegroup svc downtime	count=1
function	move ||| move	count=1
class	[class_1] and ||| [class_1] [class_2]	count=6
arg	url and store in ||| module url	count=1
class	a that are ||| manager	count=1
function	most ||| most	count=1
function	handlers ||| handlers	count=2
function	and create is ||| and create	count=2
module_class	new dimension ||| dimensiondata dimension	count=1
function	start or [function_2] ||| [function_2] [function_1]	count=4
function	for the entity by ||| by	count=1
arg	takes a remote path ||| path sudoable	count=1
class	the cache ||| cache manager	count=2
arg	piece of ||| plaintext	count=1
function	environment [function_2] ||| [function_1] [function_2]	count=4
class	is formatted into 80 ||| lib	count=1
function	[function_1] to ||| [function_2] [function_1]	count=16
arg	rule ||| rule	count=1
function	the current system is ||| is	count=1
class	a task if specified ||| task executor	count=1
module	overwrites [module_2] ||| [module_1] [module_2]	count=1
class	using ||| console cli	count=2
function	enables [function_2] ||| [function_1] host [function_2]	count=1
arg	[arg_1] keystore ||| [arg_1] [arg_2]	count=1
function	environ ||| gcp environ	count=1
function	absent by deleting ||| absent	count=1
module	for special ||| modules	count=1
function	group [function_2] ||| [function_2] [function_1]	count=11
function	handle the request ||| request	count=3
arg	host port ||| host port	count=1
module	a new ||| modules cloud dimensiondata	count=2
function	dict from an ||| dict from obj	count=1
module	multiplexing ||| plugins	count=1
class	that may change with ||| big ip snat pool manager	count=1
function	set on ||| set host overrides	count=1
function	verifies [function_2] ||| [function_2] [function_1]	count=1
arg	memory or cpu ||| server_id cpu	count=1
arg	[arg_1] host to ||| [arg_2] [arg_1]	count=4
module	a single file comma-separated ||| cloud	count=1
function	script ||| encode script	count=1
function	[function_1] vault ||| [function_2] [function_1]	count=1
module	required for ||| modules	count=2
function	[function] for a ||| preprocess [function]	count=2
module	set all of ||| modules cloud amazon	count=1
function	and the privileges ||| table privileges	count=1
module	for server ||| modules net_tools	count=1
module	create a [module_2] ||| [module_1] [module_2]	count=2
module	to receive ||| module_utils	count=1
class	makes sure ||| anti affinity policy	count=1
arg	pool on ||| location lb_id pool_id	count=1
module	new filesystem with ||| modules cloud	count=1
module	as directed for registration ||| module_utils	count=1
function	is present ||| is present	count=4
function	[function_1] service ||| [function_2] [function_1]	count=6
module	updates ||| packaging	count=1
module	for writing a ||| modules	count=1
function	and handle the request ||| request	count=3
class	80 ||| lib	count=1
function	imperfect role ||| role	count=1
class	and ||| callback module	count=2
module	prefix ||| cloud amazon	count=1
class	missing ||| host	count=1
function_arg	[function_1] particular ||| [function_1] [arg_2]	count=2
function	the group matching ||| get group	count=1
function	schedule downtime ||| schedule host svc downtime	count=1
function	keys of each dict ||| get	count=1
function	right after ||| post update	count=1
function	[function_1] existing targets ||| [function_2] [function_1]	count=1
module	code path and ||| modules cloud centurylink	count=3
function	downtime for ||| servicegroup host downtime	count=1
function_arg	[function_1] status ||| [function_1] client stream_name [arg_2]	count=1
class	go over all sources ||| sources	count=1
arg	value returned [arg_2] ||| [arg_2] [arg_1]	count=2
function	group list [function_2] ||| [function_2] [function_1]	count=1
arg	task if they are ||| task variables templar	count=1
arg	/etc/default/init if anything else ||| key phase	count=1
function	data to ||| data	count=1
function	to ||| to remove	count=1
function	is in ||| is	count=1
module	device supports multiplexing ||| plugins	count=1
arg	named name ||| name mod_type ignore_deprecated	count=2
arg	command [arg_2] ||| [arg_1] [arg_2]	count=1
class	returns a hash ||| host	count=2
function_arg	configuration [arg_2] ||| [arg_2] [function_1]	count=2
arg	of follow_redirects ||| follow_redirects	count=1
arg	for use with google-python-api-client ||| module scopes user_agent_product user_agent_version	count=1
function	used to import a ||| import	count=1
function	galaxy info entry ||| galaxy info	count=1
function	tuple ||| tuple	count=1
function	atomically move ||| move	count=1
function	it (if the error ||| error	count=1
function	value ||| value	count=1
arg	[arg_1] into group ||| [arg_2] [arg_1]	count=8
module	code path ||| modules cloud	count=3
class	rule and targets are ||| cloud watch event rule manager	count=1
function	version example formats ||| version	count=1
module	updates ||| modules packaging	count=1
arg	the cli command on ||| cli	count=7
function	file ||| file	count=36
module	which ||| playbook	count=1
module	see if a ||| cloud centurylink	count=1
module	nothing to do for ||| connection	count=1
arg	note [arg] *must* ||| [arg]	count=1
function	searches for ||| search	count=1
arg	the json response ||| response	count=1
arg	from gce ||| gce name zone	count=1
class	rule and ||| rule manager	count=1
function	import request ||| import	count=1
function_arg	to a [arg_2] ||| [arg_2] [function_1]	count=1
function	all avi ||| avi	count=1
function_arg	[function_1] /etc/rhsm/rhsm conf ||| [function_1] [arg_2]	count=2
function	[function_1] server ||| [function_2] [function_1]	count=3
function	assemble a ||| assemble	count=2
function	[function_1] library aos-pyez ||| [function_1] [function_2]	count=1
arg	idempotency using the ||| cli	count=3
function	alias ||| alias	count=1
function	[function_1] default security ||| [function_2] [function_1]	count=1
function	[function_1] facts ||| [function_2] [function_1]	count=7
module	synchronize all of ||| modules packaging	count=1
module	machine via ||| cloud	count=1
arg	a digest_method ||| filename algorithm	count=1
module	and new ||| google	count=1
arg	[arg] actually ||| [arg]	count=1
arg	it differs from the ||| module conn name values	count=1
function	loads [function_2] ||| [function_1] inventory [function_2]	count=1
arg	for google compute engine ||| module provider	count=1
class	the main code ||| clc load	count=1
module	to the ||| plugins connection	count=2
module_class	[module_1] key ||| [module_1] [class_2]	count=1
arg	group rule ||| rule	count=1
arg	to typetalk ||| client_id client_secret topic	count=1
arg	given list of servers ||| server_ids package_id	count=1
function	checksum given a ||| checksum	count=1
function	to be removed ||| remote target ids to remove	count=1
function	salt for the ||| salt	count=1
arg	a set of events ||| fileobj events data	count=1
function	the updated ||| updated	count=1
arg	hosts ||| hosts	count=1
class	the main method ||| lxc container	count=1
arg	the module ||| module secgroup	count=1
function	volume ||| delete volume	count=2
class	in [class_2] ||| [class_2] [class_1]	count=3
module	name_install while removing the ||| modules	count=1
function	inventory ||| inventory	count=1
function	it contains a range ||| range	count=1
function	the ubuntu [function_2] ||| [function_1] [function_2]	count=1
module	instance ||| google	count=2
module	previously registered ||| packaging	count=1
function	a list of ||| get	count=2
function	as a 4- or ||| as tuple	count=1
module	return will be ||| module_utils	count=1
class	arguments ||| task	count=1
class	details about the ||| app	count=1
function_arg	[function_1] the play ||| [function_1] [arg_2]	count=3
function	[function] order first ||| [function]	count=1
function	the clc credentials on ||| clc credentials	count=7
class	on the ansible galaxy ||| galaxy	count=1
module	object for [module_2] ||| [module_1] [module_2]	count=4
arg	uploads a folder to ||| folder	count=1
module	or delete an amazon ||| cloud amazon	count=1
module	modify ||| modules cloud amazon	count=1
class	path ||| load	count=1
function_arg	[function_1] of recs[ref][key] ||| [arg_2] [function_1]	count=2
module	activate ||| packaging os	count=1
arg	installed or not and ||| depot	count=1
function	become ||| do become	count=1
class	module ||| base module	count=1
arg	obj an object ||| obj	count=1
module	details [module] particular firewall ||| [module]	count=1
class	or stdout ||| editor	count=1
module	the system ||| packaging os	count=1
function	creates a unique key ||| make rule key	count=1
module	delete ||| modules storage infinidat	count=1
function	check ||| check	count=8
arg	it if it doesn't ||| group_name parent_name group_description	count=1
module	return details about the ||| modules	count=1
module	the ansiblemodule used for ||| modules system	count=1
function	on the remote ||| exec	count=3
function	admin ||| get umc admin	count=1
arg	the server ||| module profitbricks datacenter_id server_id	count=1
function	machine via ||| create	count=1
function	dict with the data ||| data	count=1
function	check connection ||| check	count=1
function	to hipchat v1 ||| v1	count=1
arg	have the ||| propertyhash	count=2
arg	module if not found ||| module	count=1
function_arg	aws [arg_2] ||| [function_1] format [arg_2]	count=1
class	been ||| connection base	count=1
module	details about ||| modules storage	count=1
arg	[arg_1] modifies an ||| [arg_1] [arg_2]	count=3
function	[function_1] associated ||| [function_1] [function_2]	count=3
function	to be updated ||| to put	count=1
function	proxy protocol [function_2] ||| [function_1] [function_2]	count=3
arg	getfacl/setfacl ||| mode path follow	count=1
function_arg	security group [function_1] [arg_2] group names are not ||| [function_1] [arg_2]	count=2
function	temp ||| rsync data	count=1
function	of the properties ||| get properties	count=6
function	password from a file ||| password file	count=1
function	and ||| get	count=1
module	new filesystem with ||| cloud	count=1
arg	handle quoting [arg] based ||| cursor mysqlvar [arg]	count=1
function	write it to the ||| get	count=1
function	need to ||| ids to	count=1
function	returns state of ||| get file system state	count=1
module	a ||| modules cloud google	count=1
function	write ||| write	count=4
function	[function_1] zone in ||| [function_1] [function_2]	count=3
arg	attempt ||| module device_id isinstance	count=1
function	set the remote ||| remote	count=1
arg	dns [arg_2] ||| [arg_2] [arg_1]	count=1
function	the role [function_2] ||| [function_2] [function_1]	count=3
function_arg	path [arg_2] ||| [function_1] [arg_2]	count=1
module	and new ||| modules cloud google	count=1
module	into a ||| modules	count=3
function	send message to ||| send message	count=1
arg	folder to cloud ||| cf folder container	count=1
class	from ||| cloud	count=1
class	main code ||| firewall	count=1
module_class	docker daemon ||| docker container set	count=1
module	to the lxc nothing ||| plugins connection	count=1
function	[function_1] datacenter ||| [function_1] [function_2]	count=2
function	if the local rule ||| rule	count=1
module	the specified file return ||| module_utils	count=1
function	function to create ||| create	count=1
function	remove ||| remove values	count=1
class	list a that are ||| elb manager	count=1
class	write it to ||| acmeclient	count=1
module	by specified ||| modules cloud	count=1
function	removes mount [function_2] ||| [function_2] [function_1]	count=1
arg	to keep the iterator ||| iterator	count=1
function	as a ||| as tuple	count=1
module	about ||| storage	count=1
class	rule ||| watch event rule manager	count=1
class	main ||| load balancer	count=2
function	security group [function_1] [function_2] ||| [function_1] [function_2]	count=2
function	grimoire collection is fresh ||| fresh	count=1
function	[function_1] domain ||| [function_2] [function_1]	count=3
function	the group ||| get group	count=1
class	pools for system ||| rhsm pools	count=1
module	[module_1] a ||| [module_2] [module_1]	count=4
arg	the entity ||| entity	count=2
arg	mount targets [arg_2] ||| [arg_2] [arg_1]	count=4
class	the selector ||| selector	count=1
function	get list of ||| get	count=1
module	import ||| modules system	count=1
arg	have been notified ||| iterator play_context	count=1
function_arg	run the pause ||| run tmp task_vars	count=2
function	string containing ||| split	count=1
function	tags and convert them ||| in	count=1
function	gather facts ||| gather facts	count=1
function	string to be used ||| string	count=1
arg	folder to ||| folder container	count=1
arg	[arg_1] [arg_2] ||| [arg_1] base [arg_2]	count=2
module	return a ||| cloud	count=1
function_arg	domain by [arg_2] ||| [function_1] [arg_2]	count=3
class	[class_1] and target ||| [class_1] [class_2]	count=2
function_arg	downtime [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	event to [arg_2] ||| [function_1] [arg_2]	count=1
function	params when we can ||| fail on missing params	count=1
arg	in ||| module path	count=1
function_arg	[function_1] module ||| [arg_2] [function_1]	count=7
function	[function] few select ||| [function]	count=2
module	[module] particular firewall ||| [module]	count=1
function	path if a path ||| prefix login path	count=3
function	used to filter ||| filter	count=1
arg	facts for [arg_2] ||| [arg_2] [arg_1]	count=16
class	shell command ||| timezone	count=1
function	retrieve a base argument ||| argument spec	count=1
function	and desired version ||| version	count=1
arg	port and ||| port	count=1
arg	yaml ||| file_name show_content	count=1
function	a size ||| format disk size	count=1
module	given name and ||| cloud	count=1
module	the lxc nothing to ||| plugins connection	count=1
arg	an ||| cloud	count=1
arg	templated ||| templar	count=3
function_arg	[function_1] path ||| [arg_2] [function_1]	count=5
arg	given flag to a ||| flag	count=1
function	each host key can ||| host	count=1
module	[module] uuid ||| [module]	count=1
function_arg	[function_1] url ||| [function_1] [arg_2]	count=2
function	[function_1] device ||| [function_2] [function_1]	count=9
arg	a remote path ||| path sudoable	count=1
function	[function_1] hipchat v1 ||| [function_1] [function_2]	count=1
module	builds ||| cloud amazon	count=1
module	to receive updates ||| packaging	count=1
class	are ||| docker manager	count=1
function	read the ||| read	count=1
arg	provided in the auth ||| auth	count=1
function	executes the ||| run cli	count=7
function	[function_1] factory ||| [function_1] [function_2]	count=4
arg	the permissions ||| permissions	count=1
function	when we ||| on	count=1
module	main method ||| cloud lxc	count=1
function	executing the ||| compute	count=1
class	ensures ||| clc public ip	count=2
module	set all ||| cloud amazon	count=1
function	yaml return a list ||| list	count=1
class	the main ||| container management	count=1
arg	module data out to ||| data	count=1
module	for later parsing ||| modules web_infrastructure	count=2
function	return the installed version ||| version	count=1
function	values and there ||| argument values	count=1
arg	from [arg] ||| attr [arg]	count=1
module	about ||| netapp	count=1
function	key ids and converts ||| key ids	count=1
arg	a particular servicegroup ||| servicegroup minutes	count=4
module	the machine ||| modules cloud	count=1
module	the machine ||| cloud	count=1
module	code path and handle ||| cloud	count=3
function	from a [function_2] ||| [function_1] [function_2]	count=2
module	an amazon ||| cloud amazon	count=5
function_arg	parameters to [arg_2] ||| [arg_2] [function_1]	count=3
module	produce [module] list of ||| [module]	count=1
function	as ||| as tuple	count=1
class	container ||| container	count=5
class	the ||| management	count=1
module	from subscription-manager ||| module_utils	count=1
module	for user ||| modules	count=1
module	entry point [module_2] ||| [module_2] [module_1]	count=9
class	path and handle the ||| clc group	count=1
function_arg	[function_1] sensible ||| [function_1] module host key [arg_2]	count=1
arg	anything else ||| key phase	count=1
function	in new ||| new	count=1
class	container is connected to ||| container	count=1
function	from variables set on ||| set host overrides	count=1
class	about the ||| app	count=1
function	is used to schedule ||| schedule host svc	count=1
arg	a standard way ||| rax_module region_required	count=1
function	builds ||| build	count=1
arg	with iterator so ||| enabled source	count=1
module	prefix ||| modules cloud amazon	count=1
class	dimension [class_2] ||| [class_1] [class_2]	count=3
function	is absent by deleting ||| group is absent	count=1
arg	is templated specially in ||| templar	count=1
arg	matching containers that ||| containers count name	count=1
function	have the snapshots removed ||| server snapshot absent	count=1
class	paginated ||| front service manager	count=1
module	delete an amazon ||| cloud amazon	count=2
function	security group [function] ||| ec2 security group [function]	count=1
function	schedule downtime ||| schedule servicegroup svc downtime	count=1
function	build the ||| build	count=1
class	execute the main ||| firewall policy	count=1
arg	way for all ||| rax_module region_required	count=1
function	if file ||| file	count=1
function	the compatibility between ||| compatibility	count=1
module	with ||| module_utils	count=1
arg	git repo ||| git_path module repo dest	count=1
arg	on the subscript which ||| subscript	count=1
class	return details about ||| net app	count=1
class	rule in aws ||| cloud watch event rule	count=2
function	execute the main code ||| process	count=3
module	the ||| modules	count=43
function	a deploy event ||| deploy event	count=2
module	state for the given ||| modules cloud	count=1
arg	templated during the ||| templar	count=2
function	a backend ||| backend	count=1
function	changed from escalated ||| deauthorize	count=1
module_class	certificate [class_2] ||| [module_1] [class_2]	count=2
arg	[arg_1] object ||| [arg_2] [arg_1]	count=4
function	return the ||| get cert	count=1
function	ssh keys at ||| ssh host keys	count=1
function	the name ||| link name	count=1
function	set on ||| set	count=1
function	returns state ||| system state	count=1
function	convert self group to ||| group	count=1
function_arg	[function_1] ansible module ||| [arg_2] [function_1]	count=1
function	list ||| do list	count=1
function_arg	[function_1] the ec2 ||| [function_1] [arg_2]	count=1
function	enabled action marks ||| enabled	count=1
function	loads the [function_2] ||| [function_2] [function_1]	count=1
function	which loads the file ||| load inventory file	count=1
function	of each ||| record	count=1
module	from cloud files to ||| cloud	count=1
function	to attributes ||| validate attributes	count=1
module	if the device supports ||| plugins connection	count=1
class	the main code path ||| group	count=1
arg	a datacenter ||| datacenter	count=1
module	registration with ||| module_utils	count=1
class	path and ||| clc group	count=1
class	execute the main ||| group	count=1
arg	stdout [arg] stderr ||| [arg]	count=1
module	method ||| lxc	count=1
function	provided anti affinity ||| aa	count=1
class	handle the ||| policy	count=1
arg	the given flag to ||| flag	count=1
function	state of a ||| state	count=1
function	the version of the ||| get version	count=2
function	if cluster requires ||| requires	count=1
function	send a deploy event ||| send deploy event	count=1
module	to lxd ||| plugins connection	count=1
module	details about ||| modules storage netapp	count=1
function	recursively walking the ||| recursive	count=1
function_arg	set [arg_2] ||| [function_1] key [arg_2]	count=3
module	about ||| storage netapp	count=2
function	[function_1] cluster ||| [function_2] [function_1]	count=2
module	for differences in ||| modules	count=2
function	of the [function_2] ||| [function_1] dhcp [function_2]	count=2
function	of spot requests ||| spot requests	count=1
function	the policy id ||| policy id	count=1
function_arg	days the [arg_2] ||| [function_1] [arg_2]	count=5
module	given locale ||| system	count=1
class	entry in the metadata ||| role metadata	count=1
class	and gets ||| manager	count=1
function	[function_1] package ||| [function_2] [function_1]	count=1
function	balancer ||| fetch balancer	count=1
function	activate ||| activate packages	count=2
function_arg	encrypt a [arg_2] ||| [arg_2] [function_1]	count=3
arg	executable [arg_2] ||| [arg_2] [arg_1]	count=2
module	function dispatches logic ||| monitoring	count=1
function	mount point [function_2] ||| [function_2] [function_1]	count=2
class	the files in ||| module	count=1
arg	provided ||| lb_id	count=2
function	a different [function_2] ||| [function_2] [function_1]	count=1
arg	in a particular ||| minutes	count=2
arg	name [arg_2] ||| [arg_2] [arg_1]	count=8
function	of the [function_2] ||| [function_1] lxc [function_2]	count=2
function	request a new certificate ||| get certificate	count=1
module	for an [module_2] ||| [module_1] [module_2]	count=4
function	containing git branch ||| git	count=1
function	alert policy is ||| alert policy is	count=6
function	difference ||| dict diff	count=1
arg	events to ||| fileobj events	count=1
function	destination ||| get	count=1
function_arg	a file [arg_2] ||| [arg_2] [function_1]	count=32
function	newlines at ||| newlines	count=1
function	name keys ||| get	count=1
arg	keys and values specified ||| cf container src	count=1
module	idemopotent function ||| modules monitoring	count=1
module	host ||| modules monitoring	count=3
function	the connection close ||| close shell	count=1
function	need to be ||| to	count=1
function	config ||| config	count=5
module	to do for ||| plugins connection	count=1
class	return details about ||| app cdotlun	count=1
function	of ||| get file system	count=2
function	anti ||| anti	count=1
function_arg	[function_1] remote box ||| [arg_2] [function_1]	count=5
class	main code path ||| clc	count=3
function	of the api call ||| axapi call v3	count=1
arg	in the kinesis stream ||| client stream_name	count=1
module	object into a ||| modules	count=3
function	set the clc credentials ||| set clc credentials	count=7
class	that may change ||| pool manager	count=1
function	validate that name ||| validate name	count=2
function	format the sdk provides ||| snat	count=1
function	to add the hostkey ||| add host	count=1
function	affinity [function] exist ||| find aa [function]	count=1
function	delete a managed ||| delete	count=1
arg	certificate in ||| module	count=1
function	new [function_2] ||| [function_1] [function_2]	count=1
module	previously ||| packaging	count=1
function	hostname and port ||| fqdn and port	count=2
function	absent by ||| absent	count=1
module	record a collection of ||| cloud	count=1
arg	rest ||| module server_params	count=1
function_arg	instances [arg_2] ||| [function_1] [arg_2]	count=2
module	main code path and ||| cloud centurylink	count=3
module	the machine via ||| misc	count=1
module	into a valid python ||| plugins action	count=1
arg	entity is updated ||| entity	count=1
class	return details ||| cdotlun	count=1
function_arg	[function_1] for ansible ||| [function_1] [arg_2]	count=2
function	backend service ||| backend service	count=6
function	ssh ||| ssh	count=2
module	check if the ||| modules database mongodb	count=1
arg	if the given router ||| router network	count=1
module	object for ||| modules cloud	count=1
class	check ||| rmmodule base	count=1
function	the anti [function_2] ||| [function_2] [function_1]	count=1
function	of binds to array ||| image binds	count=1
module	for a specified ||| modules cloud	count=2
class	of a container ||| lxc container	count=2
module	its line number ||| playbook	count=1
module	details about the ||| modules	count=1
function	request ||| targets request	count=1
function_arg	[function_1] interface args ||| [arg_2] [function_1]	count=6
function	of a stack ||| stack	count=1
function	the most ||| most	count=1
function	lambda function alias ||| lambda alias	count=2
function	[function_1] remote ||| [function_2] [function_1]	count=3
module	later ||| web_infrastructure	count=2
function_arg	[function_1] [arg_2] ||| [function_1] to dict [arg_2]	count=6
function	tag ||| tags	count=3
function	the servers ||| servers	count=2
function	generic function [function] ||| rax [function]	count=1
class	host we've ||| base	count=1
function	anti [function_2] ||| [function_1] [function_2] policy	count=1
function	of the ||| get ssh	count=1
function	updates the [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] servers ||| [function_1] [function_2]	count=4
function	the keys ||| keys	count=1
module	registered ||| modules packaging os	count=2
module	plugins should ||| plugins	count=1
module_class	logicmonitor collector ||| monitoring collector	count=1
function_arg	[function_1] be fulfilled ||| [function_1] module [arg_2]	count=4
function	check the compatibility ||| check compatibility	count=3
function	find ||| find loadbalancer	count=1
arg	server ||| profitbricks datacenter_id server_id	count=1
function	the keys the value ||| change keys	count=1
class	process ||| public ip	count=1
module	on success ||| modules cloud	count=1
module	via the ||| misc	count=1
arg	datacenter ||| datacenter lookup_group	count=1
function	and/or attributes return true ||| alter	count=1
function	absolute path of the ||| get path	count=1
function	[function_1] mount targets ||| [function_2] [function_1]	count=1
function	policies [function_2] ||| [function_1] [function_2]	count=2
function	delete the ||| delete loadbalancerpool	count=1
function	get the action the ||| action	count=1
function	exists ||| repo exists	count=2
module	filter files which ||| modules files	count=1
function	revision and ||| revision	count=1
module	to receive updates from ||| module_utils	count=1
module	filter files which contain ||| modules files	count=1
function	creates or ||| create	count=1
module	the system ||| modules packaging os	count=1
arg	tag in [arg_2] ||| [arg_2] [arg_1]	count=6
function	will first [function] ||| [function]	count=2
module	[module_1] docker ||| [module_1] [module_2]	count=12
function_arg	[function_1] module if ||| [function_1] [arg_2]	count=1
function	low level shell ||| low level execute	count=2
function	zone in the provided ||| zone	count=1
arg	from the task ||| task	count=1
function	unregister ||| unregister	count=1
function	[function_1] ids installed ||| [function_1] [function_2]	count=1
arg	new or [arg_2] ||| [arg_2] [arg_1]	count=3
class	the play ||| play	count=2
function_arg	[function_1] gce ||| [arg_2] [function_1]	count=2
function	six [function_2] ||| [function_2] [function_1]	count=1
function	human readable representation of ||| repr	count=2
module	string ||| mysql	count=1
function	to a [function] of ||| [function]	count=1
function	of ||| get next	count=1
class	main ||| management	count=1
function	policy id ||| get policy id	count=2
function	status code from the ||| status code from	count=1
class	been initialized ||| base	count=1
module	for differences in the ||| modules cloud	count=2
function	run on start of ||| v2 playbook on play start	count=1
function_arg	to [arg_2] ||| [arg_2] [function_1]	count=3
function	group that matches ||| matching	count=1
module	the given ||| misc	count=1
class	that may ||| pool manager	count=1
class	the main method ||| container management	count=1
function	complete if the ||| complete	count=3
module	a string for ||| modules	count=1
function	galaxy info entry in ||| load galaxy info	count=1
arg	or return a default ||| module datacenter	count=1
arg	a folder ||| cf folder container ttl	count=1
function	by the user ||| id	count=1
function	a given firewall policy ||| firewall policy	count=1
function	keys ||| host keys	count=2
arg	[arg_1] tags ||| [arg_2] [arg_1]	count=2
function	group of spot requests ||| spot requests	count=1
module	docker ||| docker	count=3
arg	of commands to ||| commands	count=2
module	copies ||| modules cloud amazon	count=1
arg	sort allowed_list (output ||| allowed_list	count=1
module	for getting the ||| modules cloud	count=1
function	[function_1] [function_2] returned from the provisioning ||| [function_1] [function_2] w	count=5
function	standard limitations [function] ||| [function]	count=1
function_arg	on the [arg_2] ||| [arg_2] [function_1]	count=1
function	the datacenter ||| datacenter	count=1
module	rpm ||| packaging os	count=1
function	to add the hostkey ||| add host key	count=1
arg	mig ||| mig params	count=1
module	on the ||| modules	count=1
arg	[arg_1] if value ||| [arg_2] [arg_1]	count=2
class	provided vault ||| vault	count=1
module	global mysql ||| mysql	count=1
function	closes the vty shell ||| shell	count=1
module	for docker ||| plugins connection	count=1
class	the container ||| container	count=1
function	array of ||| get image	count=1
class	the main code path ||| balancer	count=1
module	via ||| cloud misc	count=2
class	execute ||| clc load	count=1
function	create an instance template ||| create instance template	count=1
function	credentials on ||| credentials	count=7
function	[function_1] [function_2] request ||| [function_1] [function_2]	count=2
class	lxc nothing ||| connection	count=1
module	subscription-manager ||| modules packaging os	count=2
function	schedule ||| schedule host	count=1
function	and create is required ||| and create	count=1
function	the end of ||| end	count=1
module	configuration is present for ||| modules cloud	count=1
class	initialized with ||| base	count=1
class	if ||| host	count=1
module	we've been initialized ||| plugins connection	count=1
arg	of task vars ||| vars	count=1
function_arg	[function_1] [arg_2] ||| [function_1] container_path [arg_2]	count=1
class	code path and handle ||| group	count=1
function	error ||| error msg	count=3
arg	[arg_1] modifies ||| [arg_1] [arg_2]	count=3
function_arg	difference [arg_2] ||| [arg_2] [function_1]	count=1
arg	the given router ||| router network	count=1
module	retrieve a ||| cloud	count=1
module	parse ||| modules packaging os	count=1
class	the rule [class_2] ||| [class_2] watch event [class_1]	count=3
function	digits in [function] ||| [function]	count=1
arg	a command ||| command	count=1
function	the argument [function_2] ||| [function_1] [function_2]	count=5
class	retrieves rule [class_2] ||| [class_2] [class_1]	count=2
function	the file ||| lines from file	count=1
arg	a given host line ||| line	count=1
class	to lxd nothing ||| connection	count=1
function	absolute path [function_2] ||| [function_2] [function_1]	count=4
module	from here to work ||| cloud	count=2
function	the module to update ||| update	count=1
class	are already ||| manager	count=1
function	command with arguments/subcommands ||| get cmd	count=1
arg	mig ||| mig	count=1
function	return details about the ||| get	count=1
module	receive updates from subscription-manager ||| modules packaging os	count=1
function	return a list ||| load list	count=1
function	flat dict of key ||| ansible dict	count=1
arg	a datacenter by ||| datacenter lookup_group	count=1
function	get the policies for ||| get policies for	count=1
function_arg	into bytes [arg_2] ||| [function_1] number [arg_2]	count=1
function	galaxy [function_2] ||| [function_2] [function_1]	count=4
function	map to attributes ||| attributes	count=1
module	find ||| modules cloud amazon	count=2
arg	[arg_1] 'absent' if ||| [arg_1] [arg_2]	count=3
class	of a [class_2] ||| [class_1] [class_2]	count=1
module	return details about ||| storage netapp	count=1
module	connection ||| plugins connection	count=19
function	[function_1] dict of ||| [function_1] [function_2]	count=1
function_arg	security group [function_1] [arg_2] security group names are ||| [function_1] [arg_2]	count=2
function	terminate the ||| close	count=7
function	de-register the instance from ||| deregister	count=1
arg	collection of containers ||| containers	count=1
function	create new [function_2] ||| [function_1] [function_2]	count=3
module	path and ||| cloud	count=3
class	retry ||| retry	count=1
arg	the server ||| server	count=3
function	export if found ||| get export	count=2
arg	object ||| gcdns	count=2
class	that need ||| manager	count=1
module	send ||| modules notification	count=1
module	lines ||| modules system	count=1
class	an existing network ||| network	count=1
module	system to receive updates ||| packaging os	count=1
function_arg	service [arg_2] ||| [function_1] [arg_2]	count=1
arg	specific attribute ||| attribute number	count=1
module	from ||| os	count=1
arg	values specified in ||| module cf	count=1
module	the host we've been ||| connection	count=1
class	execute the main code ||| clc firewall	count=1
function	all ||| all	count=2
arg	[arg_1] rule ||| [arg_2] [arg_1]	count=2
arg	in a [arg_2] ||| [arg_2] [arg_1]	count=4
class	updated or added remotely ||| cloud watch event rule	count=1
module	system ||| modules	count=2
arg	a folder to ||| folder container	count=1
function	the anti affinity policy ||| get aa policy	count=1
module	synchronize all of ||| os	count=1
function	self group to is ||| group	count=1
function	[function_1] supplied service ||| [function_2] [function_1]	count=1
function	factory that closes over ||| factory	count=1
arg	installed or not and ||| name depot	count=1
class	value ||| timezone	count=1
function	[function_1] service ||| [function_1] [function_2]	count=6
module	associate with [module] network interface ||| [module]	count=1
class	retrieves rule and target ||| cloud watch event rule manager	count=1
class	main ||| balancer	count=1
function	a size in bytes ||| disk size	count=1
function	calculate difference of ||| diff	count=1
function	determine whether the current ||| is registered	count=1
function	[function_1] etag ||| [function_1] [function_2]	count=1
arg	file context mapping ||| module result target ftype	count=1
function	file is ||| from file	count=1
module	target for the ||| modules cloud	count=1
function	a file from zone ||| file	count=1
module	removes metadata keys and ||| cloud rackspace	count=1
function	preserve ||| parse	count=1
module_class	[module_1] container ||| [module_1] [class_2]	count=2
module	extract host bindings if ||| cloud	count=1
function	if a path is ||| path	count=3
module	receive updates from subscription-manager ||| modules packaging	count=1
function	lower or upper case ||| fix case	count=1
function	block ||| block	count=2
function_arg	return volume [arg_2] ||| [arg_2] [function_1]	count=1
function	info entry in ||| info	count=1
function	tuple ||| listener as tuple	count=1
function_arg	script [arg_2] ||| [function_1] script [arg_2]	count=1
arg	method for sending a ||| msg_format color notify	count=1
function	[function_1] aws ||| [function_1] [function_2]	count=8
function	bind mounted ||| bind mounted	count=1
function	group name keys and ||| get group	count=1
function	to be updated or ||| to put	count=1
arg	[arg_1] datacenter by ||| [arg_1] [arg_2]	count=1
function	false depending [function] of ||| sysv [function]	count=1
class	and gets the ||| manager	count=1
function_arg	[function_1] managed instance ||| [arg_2] [function_1]	count=4
arg	a tag in ||| tag	count=1
function	module ||| for host key	count=1
function	a zone [function_2] ||| [function_2] [function_1]	count=4
arg	2 versions ||| git_path dest repo	count=1
function	volume group used in ||| vg	count=1
function	initialized umc module ||| module	count=1
arg	iterator ||| iterator	count=2
module	return true ||| module_utils six	count=1
class	a file or stdout ||| vault editor	count=1
arg	key are parameters provided ||| key	count=1
function	[function_1] url of ||| [function_2] [function_1]	count=1
arg	dict_a in [arg_2] ||| [arg_1] [arg_2]	count=3
arg	cpu of ||| module server_id cpu	count=1
arg	take pear remote-info ||| pear_output	count=1
module	strings ||| module_utils	count=1
arg	include the permissions bit ||| etype entity permissions use_nfsv4_acls	count=1
function	which loads [function_2] ||| [function_2] [function_1]	count=1
function	initial data ||| send initial data	count=2
function	add [function_2] ||| [function_2] [function_1]	count=2
module	missing ||| modules	count=1
function	change attributes ||| converge file	count=1
function_arg	set [arg_2] ||| [function_1] [arg_2]	count=3
class	code path and ||| load balancer	count=1
arg	vm determined ||| vm	count=1
arg	vm ||| vm state	count=2
function	limitations [function] apply (for ||| [function]	count=1
class	block with task ||| block	count=1
function	with the [function_2] ||| [function_2] [function_1]	count=5
function	policy is absent ||| ensure policy is absent	count=1
function	the anti affinity ||| anti affinity	count=1
arg	parameters for the play ||| play	count=1
function_arg	[function_1] [arg_2] ||| [function_1] bytes [arg_2]	count=4
function_arg	[function_1] module ||| [function_1] rule [arg_2]	count=1
function	state ||| file system state	count=2
function	wait argument is true ||| wait	count=3
module	back details [module] ||| [module]	count=1
function	mode logic ||| mode	count=1
function	and convert them into ||| in	count=1
function	a dict from an ||| rule dict from obj	count=1
module	registered system ||| packaging os	count=1
class	of the server based ||| server	count=1
module	machine via the given ||| modules cloud	count=1
function	parameters ||| parameters	count=1
function	is on a ||| is	count=1
arg	list of task vars ||| vars play	count=1
class	start the machine via ||| virt	count=1
arg	ansible module ||| module	count=1
module	the system to receive ||| modules	count=1
arg	a vpc when ||| vpc	count=1
function	without the subscript ||| split subscript	count=1
module	to do ||| plugins connection	count=8
arg	registered file object ||| fileobj	count=1
function	parser for most ||| parser	count=1
class	block until server ||| modify server	count=1
function	list ||| servers	count=3
module	to self ||| system	count=1
arg	script corresponding [arg] ||| [arg]	count=1
arg	user if the host ||| module host	count=1
function	portion of ||| get loop	count=1
arg	state of the entity ||| entity	count=2
module	synchronize all of the ||| modules	count=1
arg	format ||| format	count=1
arg	results of pip command ||| pip chdir	count=1
module	check depending on ||| clustering	count=1
arg	response ||| response	count=2
module	function ||| monitoring	count=1
class	set ||| clc public ip	count=1
module	to ||| modules web_infrastructure	count=2
function_arg	checks that [arg_2] ||| [function_1] [arg_2]	count=1
module	execution ||| network iosxr	count=1
function	update ||| submodule update	count=2
arg	list of servers ||| server_ids package_id	count=1
arg	based on the clc ||| clc module alias server_id	count=1
function	the galaxy info ||| galaxy info	count=1
function	when a ||| on	count=1
function	dmi related [function_2] ||| [function_2] [function_1]	count=1
function	zone by name ||| zone by name	count=1
function	operations to [function_2] ||| [function_2] [function_1]	count=1
arg	particular service ||| host services	count=2
function	dmi related facts ||| get dmi facts	count=2
function	the quoted ||| quote	count=1
arg	and wait ||| wait timeout	count=1
function	tests plugins after loading ||| tests	count=1
module	obj are a vault ||| parsing vault	count=1
function	is a class factory ||| redirect handler factory	count=1
function	pipelining ||| pipelining	count=1
function	api call ||| axapi call	count=2
module	system to receive ||| modules packaging	count=1
function	function to compare the ||| compare	count=2
function	has a template ||| is template	count=1
function_arg	[function_1] url and ||| [function_1] [arg_2]	count=1
module	for the passed in ||| modules cloud	count=1
function	id of ||| id	count=1
function	downtime deletion ||| dt del	count=1
function	on ||| playbook on play	count=1
module	previously registered system ||| modules	count=1
function	are set which ||| set task and	count=1
class	main code path and ||| clc	count=3
function	username set the user ||| user	count=1
arg	a second ||| pacman_path name	count=1
function	compare the ||| compare get	count=1
class	from the module ||| module	count=1
class	signing [class_2] ||| [class_1] [class_2]	count=1
function	data to the ||| data	count=1
module	iterate over a directory ||| plugins	count=1
function	for module error title ||| title from	count=1
function	updated cache ||| updated cache	count=2
module	handle ||| centurylink	count=3
arg	modify_module() function ||| module_name module_args task_vars	count=1
arg	arg ||| arg_port	count=1
function	[function_1] the elb ||| [function_2] [function_1]	count=1
function	point for module ||| main	count=1
function	list of hostnames ||| list hosts	count=2
module	and ||| modules	count=6
module	details ||| modules storage	count=1
function	lazily initialize connection info ||| g connect	count=1
class	write it ||| acmeclient	count=1
function	get ||| get gcp	count=1
arg	for this iterator ||| iterator	count=1
function	by [function_2] ||| [function_1] [function_2]	count=4
function	sources ||| url	count=1
class	a new block ||| block	count=1
class	we've ||| connection base	count=1
module	a ||| cloud amazon	count=8
function	a boto3 list of ||| boto3 tag list	count=1
function	check the ||| check	count=2
function	override post validation ||| post validate environment	count=2
function	group name keys ||| get group	count=2
module	a ||| plugins	count=10
module	args for the ||| modules files	count=1
function	display playbook ||| v2 playbook on	count=2
function	named ports on ||| named ports	count=1
arg	in the specified location ||| module	count=1
module	updates ||| os	count=1
function	the path ||| dhcp	count=1
arg	uploads a folder to ||| folder container ttl	count=1
module	file return true or ||| module_utils	count=1
function	the group matching the ||| get group	count=1
class	task ||| task executor	count=1
function_arg	the type [arg_2] ||| [arg_2] [function_1]	count=2
module	device supports ||| plugins connection	count=1
arg	existence ||| name cidr_block	count=1
function	[function_1] instance template ||| [function_2] [function_1]	count=1
class	the main ||| lxc	count=1
arg	instance newgroup ||| newgroup	count=1
function	updates nodes ||| set loadbalancernodes	count=1
arg	number ||| number	count=1
class	path and handle the ||| policy	count=1
arg	backup ||| module connection replication_id cluster_id	count=1
module	true if this ||| playbook	count=1
arg	given name ||| name	count=2
module	sanity ||| modules cloud google	count=1
arg	permissions bit ||| etype entity permissions use_nfsv4_acls	count=1
function	path is relative then ||| path	count=3
class	entry in the metadata ||| metadata	count=1
function	by ||| set	count=1
function	2 ||| 2	count=1
arg	a particular [arg_2] ||| [arg_2] [arg_1]	count=7
function	create ||| create content	count=1
function	dict returns true ||| challenges	count=1
function	overridden groupby ||| groupby	count=1
function_arg	the days [arg_2] ||| [function_1] [arg_2]	count=5
function	existing vpc ||| vpc	count=1
function	version ||| version	count=8
class	that may ||| manager	count=1
function	depending [function] ||| sysv [function]	count=2
function_arg	from an [arg_2] ||| [arg_2] [function_1]	count=1
function	of key [function_2] ||| [function_1] [function_2]	count=4
class	expects container id or ||| container manager	count=1
class	retrieves rule and target ||| event rule manager	count=1
function	filename ||| filename	count=1
function	tags and convert them ||| tags in	count=1
function	environment string to ||| environment string	count=2
class	execute the main ||| policy	count=1
arg	clc ||| clc module alias	count=1
function	package ||| package	count=3
class	host we've been initialized ||| base	count=1
module	an ||| module_utils	count=2
function	string to be ||| string	count=1
arg	rc stdout and ||| args check_rc close_fds executable	count=1
function	[function_1] [function_2] <name>01 to associate with ||| [function_1] [function_2] resource_group location name allocation_method	count=3
function_arg	update [arg_2] ||| [function_1] [arg_2]	count=1
function	of the lease ||| get dhcp lease	count=1
arg	to be fulfilled or ||| module ec2 spot_requests count	count=1
function	about the ||| get	count=1
function	to be ||| target ids to	count=1
function	available size of ||| get	count=1
function	ip removed if there ||| ip absent	count=1
arg	installed a second ||| module pacman_path	count=1
function	gets the type ||| interface type	count=2
function	for libcloud ||| libcloud	count=1
arg	host and ||| host	count=1
class	a balancer ||| balancer	count=1
arg	clc rest ||| clc module server_params	count=1
function	vnic profile [function] ||| get vnic profile [function]	count=3
class	makes sure that a ||| anti affinity	count=1
class	sort the files in ||| module	count=1
function	targets that need to ||| remote target ids to	count=1
function	[function_1] absent ||| [function_1] [function_2]	count=10
function	[function_1] binary ||| [function_1] [function_2]	count=1
function	containers and [function] those that ||| [function] differing	count=1
function	whether the 2 ||| repo	count=1
module	of output from ||| plugins	count=1
arg	of events ||| fileobj events data	count=1
function_arg	from [arg_2] ||| [arg_2] [function_1]	count=3
module	in [module] unix ||| [module]	count=1
class	metadata ||| metadata	count=1
function_arg	[function_1] [arg_2] ||| [function_1] host [arg_2]	count=5
function	code ||| process	count=3
class	by when using ||| console cli	count=1
arg	the clc rest ||| clc module server_params	count=1
module	return true or false ||| module_utils	count=1
class	[class_1] signing ||| [class_2] [class_1]	count=1
module	for an ||| modules cloud amazon	count=2
function	from ||| get	count=2
module	[module_1] a ||| [module_1] [module_2] vmware power state	count=2
module_class	[module_1] signing request ||| [module_1] [class_2]	count=1
function	policy is [function_2] ||| [function_1] [function_2]	count=7
function	get packages ||| get packages	count=1
function_arg	present [arg_2] ||| [function_1] [arg_2]	count=2
class	enable ||| elb manager	count=1
module	for an account alias ||| modules cloud centurylink	count=1
function	up the ubuntu ||| lookup ubuntu	count=1
class	is ||| meta path importer	count=1
function	the keys the value ||| keys	count=1
function_arg	[function_1] the server ||| [arg_2] [function_1]	count=11
module	do for ||| plugins	count=1
module	network interface if a ||| module_utils	count=1
class	dictionary or the ||| stack	count=1
function	identify ||| transport	count=1
class	[class_1] and returns ||| [class_2] [class_1]	count=4
function	the updated [function_2] ||| [function_2] [function_1]	count=2
module	missing ||| monitoring	count=1
function	verifies that [function_2] ||| [function_2] [function_1]	count=2
function	a default [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] is in ||| [function_2] vpc [function_1]	count=4
function	path of [function_2] ||| [function_2] [function_1]	count=2
arg	path and ||| path sudoable	count=1
function	[function_1] checks that ||| [function_1] [function_2]	count=2
class	balancer ||| balancer	count=3
function	[function_1] an ||| [function_2] [function_1]	count=4
arg	file comma-separated list or ||| module	count=1
class	the main ||| policy	count=1
function	request [function] ||| by uuid w [function]	count=3
class	the lxc nothing ||| connection	count=1
function	currently ||| address	count=1
function	dict from an ||| rule dict from obj	count=1
module	takes a list ||| cloud amazon	count=1
function	possible [function] few select ||| [function]	count=1
class	system from all ||| rhsm	count=1
function	to actual location ||| to ports conf	count=2
function	[function_1] level ||| [function_1] [function_2]	count=3
function	security group [function_1] [function_2] ||| security group [function_1] [function_2] names	count=2
function	[function_1] bind mounted ||| [function_1] [function_2]	count=1
function	the path [function_2] ||| [function_2] [function_1]	count=2
function_arg	modify the [arg_2] ||| [arg_2] [function_1]	count=2
function	to ||| to put	count=1
arg	from application model ||| account application	count=1
function	[function_1] [function_2] <name>01 to associate with ||| azure rmmodule base [function_1] [function_2] resource_group location name allocation_method	count=1
module	to lxd nothing to ||| plugins connection	count=1
arg	[arg_1] in dict_b ||| [arg_1] [arg_2]	count=1
function	[function_1] requests to ||| [function_2] [function_1]	count=3
function	[function_1] the file ||| [function_1] [function_2]	count=3
function	create a tempfile ||| create content tempfile	count=1
class	until server ||| server	count=1
module	a ||| cloud docker	count=7
arg	action ||| action	count=2
module	to ||| os	count=1
function	default network ||| default	count=1
module	to preserve ||| lookup	count=1
arg	given name using arguments ||| name	count=1
module	lxd nothing to ||| plugins connection	count=1
arg	user returns true if ||| cursor user	count=1
function	delete the servers ||| delete servers	count=3
function	network domain by ||| network domain	count=1
class	dictionary or ||| stack	count=1
arg	based on the clc ||| clc	count=1
arg	the pool ||| pool_id	count=1
function	it to ||| get	count=1
module	to preserve spaces ||| lookup	count=1
function	options_vars ||| options vars	count=1
arg	or cpu ||| module server_id cpu	count=1
class	code path and handle ||| balancer	count=1
function	true if network ||| network	count=1
class	see if an anti ||| anti	count=1
function	list of ||| list of	count=2
class	with ||| connection	count=1
function	zone [function_2] ||| [function_2] [function_1]	count=4
function	clc ||| clc	count=10
module	exists or all ||| modules cloud amazon	count=1
function	[function_1] matching logic ||| [function_1] [function_2]	count=1
arg	output ||| output	count=1
arg	[arg_1] in ||| [arg_2] [arg_1]	count=6
function	a remote file ||| file	count=2
module	for amazon s3 arguments ||| modules cloud amazon	count=1
class	ensures ||| modify server	count=2
class	and returns a ||| manager	count=1
arg	if it differs from ||| conn name values	count=1
function	and ||| fqdn and	count=1
function	ensure ||| ensure	count=1
function	avi ||| avi	count=1
module_class	[module_1] module ||| [module_1] action [class_2]	count=1
function	[function_1] template ||| [function_2] [function_1]	count=3
function	tempfile ||| content tempfile	count=1
module	supports ||| plugins connection	count=3
module	machine via ||| misc	count=1
arg	single line and ||| line	count=1
function	of a role or ||| get vars	count=1
function	searches for roles ||| search	count=1
function	compare the ||| compare props	count=1
function_arg	executes [arg_2] ||| [function_1] [arg_2]	count=14
function	is different and a ||| has different	count=1
class	base class method ||| strategy base	count=1
module	connection ||| database postgresql	count=1
class	dictionary ||| ansible cloud stack	count=1
function	main code path and ||| process	count=3
module	create a list of ||| modules cloud	count=1
function	name of the ||| get	count=2
function	bind mounted :arg ||| bind mounted	count=1
module	system ||| system	count=3
module	configuration is present for ||| modules	count=1
arg	or cpu of ||| cpu	count=1
function	when we can not ||| on missing	count=1
module	get the ami for ||| modules cloud	count=1
module	global mysql variable to ||| modules database mysql	count=1
module	lxc ||| plugins	count=1
function	having the public ||| public	count=1
function	options_vars ||| options	count=1
function	load [function_2] ||| core [function_1] [function_2]	count=3
function	is the ||| is	count=1
class	that are ||| manager	count=1
function_arg	[function_1] pool ||| [arg_2] [function_1]	count=1
arg	mount targets and tags ||| tags targets	count=1
function	configured univention uldap object ||| uldap	count=1
class	or stdout ||| vault editor	count=1
function	file with the ||| file	count=1
class	to ansible module ||| base module	count=1
function	of targets ||| targets	count=1
module	must be ||| compat selectors	count=1
arg	current project quota ||| project_quota_output	count=1
function	which executes the low ||| low	count=1
module	output into a valid ||| plugins	count=1
function	[function_1] or name ||| [function_1] [function_2]	count=2
class	file or stdout ||| vault editor	count=1
arg	or cpu of a ||| module server_id cpu	count=1
class	makes sure that ||| anti affinity policy	count=1
class	/etc/localtime ||| bsdtimezone	count=1
function	notifications ||| host notifications	count=1
function	need to be ||| remote target ids to remove	count=1
arg	sensible ||| sshkeygen	count=1
function	by name or zone_id ||| by name	count=1
function_arg	[function_1] cpu of ||| [arg_2] [function_1]	count=1
function_arg	file [arg_2] ||| [arg_2] [function_1]	count=33
module	[module_1] package ||| [module_1] [module_2]	count=2
module	return details about ||| storage	count=1
module	if ||| modules	count=5
function	also search in ||| module	count=1
module	nothing to do ||| connection	count=8
function	is called right before ||| pre create	count=1
module	machine via the ||| misc	count=1
module	connection nothing to do ||| plugins connection	count=6
function	alert policy is removed ||| alert policy absent	count=1
module	backend_service ||| cloud google	count=1
function	that need to be ||| to remove	count=1
function	alias if it exists ||| alias	count=1
function	for the required_together argument ||| infinibox required together	count=1
function	recursively walking the tree ||| recursive	count=1
function	transfer a file ||| put file	count=27
module	write it to ||| web_infrastructure	count=1
function	the balancer ||| balancer	count=2
function	a custom finalize method ||| finalize	count=1
class	bzr branch ||| bzr	count=1
module	differences in the ||| cloud	count=2
arg	to stackdriver ||| key revision_id deployed_by	count=1
arg	status args ||| wait_timeout nat_gateway_id status	count=1
module	the system to receive ||| os	count=1
arg	call the clc rest ||| clc module server_params	count=1
function	updates the [function_2] ||| [function_1] [function_2]	count=1
function	numerical order ||| numerical	count=1
function	start the ||| start	count=1
function	downtime for all services ||| downtime	count=2
class	main ||| firewall	count=1
arg	those expected by ||| module_params	count=1
function_arg	send message [arg_2] ||| [arg_2] [function_1]	count=1
class	rule ||| event rule	count=2
arg	given value ||| value num_items min_value	count=1
function	a path is ||| prefix login path	count=3
module	wait for a ||| modules cloud	count=1
class	to the host we've ||| connection base	count=1
function_arg	[function_1] or ||| [function_1] [arg_2]	count=8
class	if the device supports ||| connection	count=1
module	the ||| plugins connection	count=24
function	a default network interface ||| default nic	count=1
module	record a collection of ||| cloud docker	count=1
class	role ||| role	count=1
class	the server based ||| modify server	count=2
function	to be updated or ||| to	count=1
function	a unique key ||| rule key	count=1
function	[function_1] list of ||| [function_1] [function_2]	count=6
function	an import request ||| create import	count=1
function	removes a virtual machine ||| remove virtual machine	count=1
function	ovirt/rhv in version ||| template with version	count=1
function	with the request parameters ||| request with dict	count=1
function	a group name returns ||| group name	count=1
class	return details about the ||| app	count=1
function	the [function] name ||| get [function]	count=1
arg	an ||| cloud module	count=1
class	the task with ||| task	count=2
module	of information for the ||| modules	count=1
class	on the elb ||| elb	count=2
function	loads ||| load	count=9
module	status for ||| modules	count=2
module	a collection of ||| cloud docker	count=1
function	compare the host's ||| compare	count=1
arg	the name of ||| name tag	count=1
module	main code path ||| modules cloud centurylink	count=3
class	in [class_2] ||| [class_1] [class_2]	count=1
function	a deploy event to ||| deploy event	count=1
function	the compatibility between the ||| compatibility	count=1
function	[function_1] ids ||| [function_1] [function_2]	count=4
function	base argument ||| argument spec	count=1
class	registration with rhn ||| rhsm	count=1
class	[class] cluster ||| elasti [class]	count=2
function	get the [function_2] ||| [function_2] [function_1]	count=15
class	server based ||| clc server	count=1
function	[function_1] ids and ||| [function_1] [function_2]	count=4
function	[function_1] file from ||| [function_2] [function_1]	count=10
function_arg	schedule downtime [arg_2] ||| [arg_2] [function_1]	count=1
function	target state [function_2] ||| [function_2] [function_1]	count=3
module	all of ||| modules packaging	count=1
function	file or if ||| file	count=1
function	move ||| atomic move	count=1
arg	location header ||| location	count=1
arg	user note [arg] *must* ||| [arg]	count=1
class	using the supplied vault ||| vault	count=1
function_arg	[function_1] fail module ||| [function_1] [arg_2]	count=1
function	to make sure is ||| to	count=1
function	create a path of ||| create	count=2
arg	in a datacenter ||| module datacenter	count=1
function_arg	host [arg_2] ||| [arg_2] [function_1]	count=4
function	make the keys the ||| change keys	count=1
module	preserve ||| plugins lookup	count=2
module	vm ||| cloud vmware	count=1
module	previously ||| modules	count=1
arg	supports to get ||| backend	count=1
function	from ||| url get	count=2
function	a server certificate ||| server	count=1
function	builds a ||| build	count=1
arg	datastructure which do not ||| ds	count=1
class	the connection ||| connection	count=8
function	the public ip ||| public ip	count=2
function_arg	[function_1] 2 versions ||| [arg_2] [function_1]	count=3
function	returns state ||| file system state	count=1
function_arg	is present [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	dict [arg_2] ||| [function_1] changed [arg_2]	count=8
arg	a yaml ||| file_name show_content	count=1
class	implements are only ||| manager	count=1
module	output into a valid ||| plugins action	count=1
function	set on the ||| set host	count=1
function	port where this information ||| port	count=1
function	level [function_2] ||| [function_2] [function_1]	count=1
function	the installed version of ||| version	count=1
function_arg	set the value ||| set key value	count=2
class	receive ||| rhsm	count=2
module	the netvisor ||| network netvisor	count=5
class	the ||| timezone	count=1
function	a network [function_2] ||| [function_1] [function_2]	count=2
function	binds to array ||| binds	count=1
function	makes a new ||| clone	count=1
function	by name or ||| by name	count=2
class	code ||| group	count=1
function	the keys the ||| change keys	count=1
module	been ||| connection	count=1
function	gets the most ||| most	count=1
module	each ||| google	count=1
function	function to compare ||| compare	count=2
function	all roles in the ||| compile roles	count=1
function_arg	a tempfile [arg_2] ||| [arg_2] [function_1]	count=1
function	to attributes for this ||| attributes	count=1
function	[function_1] the uuid ||| [function_1] [function_2] w	count=2
module	filter files which contain ||| files	count=1
function	a file or if ||| file	count=1
function_arg	[function_1] to local ||| [arg_2] [function_1]	count=18
module	to the destination ||| modules web_infrastructure	count=1
module	of ||| modules	count=1
function	[function_1] absent by ||| [function_2] [function_1]	count=1
function_arg	alarm handler [arg_2] ||| [function_1] [arg_2]	count=2
module	from ||| modules	count=1
function	the proxy ||| validate proxy	count=1
module	the machine via ||| cloud	count=1
module	the host ||| plugins connection	count=1
module	start the ||| modules	count=1
module	updates from ||| os	count=1
class	the ansible galaxy ||| galaxy	count=1
function	[function_1] wait argument ||| [function_2] requests [function_1]	count=3
arg	of cmd ||| cmd	count=1
function	size in bytes ||| disk size	count=1
module	attributes string for user ||| modules database postgresql	count=1
module	for the pool and ||| modules cloud centurylink	count=1
function	the state of a ||| state	count=1
arg	or return ||| module	count=1
function	updates the ||| update	count=2
function	glob ||| glob	count=2
function_arg	servers [arg_2] ||| [function_1] [arg_2]	count=3
function	of the [function_2] ||| [function_1] [function_2]	count=9
function	from a directory of ||| from	count=2
module	specific value for a ||| modules	count=1
function	id looked up ||| id	count=1
function	the end ||| from end	count=1
class	and ||| parser	count=1
function	run when a ||| v2 runner on	count=1
function	replaces lines ||| replace	count=1
class	task [class] one of ||| [class]	count=1
module	if the device ||| plugins	count=1
arg	value [arg_2] ||| [arg_2] [arg_1]	count=13
arg	a status args ||| wait_timeout nat_gateway_id status	count=1
class	a json ||| logic monitor	count=3
function_arg	and update [arg_2] ||| [arg_2] [function_1]	count=1
module	write it ||| modules web_infrastructure	count=1
arg	values specified [arg_2] ||| [arg_2] [arg_1]	count=2
module	removes ||| modules cloud profitbricks	count=1
module	method ||| cloud lxc	count=2
function	read configuration from ||| load config	count=1
module	given vpc id ||| cloud	count=1
function	operations to the ||| to	count=1
module	the device ||| connection	count=1
function_arg	downtime for [arg_2] ||| [arg_2] [function_1]	count=1
function	an object ||| obj	count=2
function	set the clc ||| set clc	count=14
function	if a path is ||| login path	count=3
arg	change user password ||| module user password	count=1
module	and new ttl and ||| modules cloud google	count=1
function	of host task tuples ||| get next	count=1
function	file ||| get	count=1
module	and new ttl ||| google	count=1
class	be removed remotely ||| cloud watch event rule manager	count=1
function	a dict ||| dict	count=3
function	a proxy ||| get proxy	count=1
function	requests are complete ||| for requests to complete	count=3
module	from ||| plugins	count=1
arg	rest ||| server_params	count=1
arg	router ||| module router	count=1
arg	folder to ||| cf folder container	count=1
arg	remote branch ||| dest remote	count=1
class	machine via the given ||| virt	count=1
function	management html page as ||| page	count=1
arg	key (of ||| key	count=1
module	for a given ||| modules cloud centurylink	count=2
function	read from ||| load	count=1
arg	is templated specially in ||| attr value templar	count=1
arg	bond member if it ||| _bondmems	count=1
function_arg	[function_1] or ||| [function_1] vpc [arg_2]	count=1
function	the existing targets ||| targets	count=1
module	for module execution ||| modules network	count=4
function	to array of ||| get image	count=1
function	the cpu value ||| cpu	count=1
function	name is the correct ||| name	count=1
function	a network ||| network	count=1
function	of spot [function_2] ||| [function_1] [function_2]	count=2
module	for host specified ||| modules	count=1
function	with ||| do	count=2
arg	in [arg_2] ||| [arg_2] [arg_1]	count=10
arg	cidr such as 10 ||| vpc_conn vpc_id identified_subnets	count=1
module	[module_1] given vpc ||| [module_1] [module_2]	count=2
function_arg	ensures the [arg_2] ||| [arg_2] [function_1]	count=5
function_arg	checks [arg_2] ||| [function_1] [arg_2]	count=1
arg	managed ||| mig named_ports	count=1
class	a json collector ||| logic monitor	count=2
function	[function_1] of ||| [function_1] [function_2]	count=8
function_arg	umc module [arg_2] ||| [arg_2] [function_1]	count=3
arg	which is templated specially ||| value templar	count=1
module	create or delete an ||| modules cloud	count=1
module	true if [module_2] ||| [module_1] [module_2]	count=2
class	detached on the elb ||| elb	count=1
function	the alert policy is ||| alert policy is	count=2
function	validate ||| find	count=1
module	details about the ||| storage netapp	count=1
arg	us know if data ||| data	count=1
function	[function] kernel and ||| get unlabeled device [function]	count=1
arg	path ||| executable path	count=1
module	to a lambda ||| modules cloud	count=1
function	device ||| device	count=3
module	see if a ||| modules cloud	count=1
function	to attributes for this ||| validate attributes	count=1
function	calculate difference ||| dict diff	count=1
arg	module if not found ||| module system	count=1
class	the system to receive ||| rhsm	count=2
arg	feature vmid ||| vmid	count=1
function	configuration from ||| config	count=2
arg	stdin filehandle of the ||| fh in_data	count=1
arg	is used during ||| in_str	count=1
function_arg	[function_1] in cert_file ||| [arg_2] [function_1]	count=2
function	of the resources given ||| resources	count=1
function	complete [function_2] ||| [function_2] [function_1]	count=6
function	removed ||| absent	count=2
function	an object by name ||| obj	count=2
arg	tags of ||| tags	count=1
module	authorization [module_2] ||| [module_2] [module_1]	count=1
function	destroy [function_2] ||| [function_1] [function_2]	count=5
function	to schedule ||| schedule host svc	count=1
arg	options at the beginning ||| module raw_key rank	count=1
module	[module_1] later ||| [module_1] [module_2]	count=16
arg	choose where to ||| remote_path	count=3
function	deletes [function_2] ||| [function_1] [function_2]	count=1
arg	hostnames [arg] which ||| hostnames [arg]	count=2
arg	a datacenter by calling ||| datacenter	count=1
class	the host we've been ||| base	count=1
class	all sources ||| sources	count=1
function	information [function] ||| [function] snat pool	count=1
function	specific type ||| type	count=1
arg	pool ||| pool_id	count=1
class	of ||| container management	count=2
class	given ||| virt	count=1
function	updated cache [function_2] ||| [function_1] [function_2]	count=1
function	enabled action marks server ||| enabled	count=1
function	[function_1] temporary ||| [function_2] [function_1]	count=1
function	group of spot requests ||| await spot requests	count=1
arg	quoting [arg] ||| cursor mysqlvar [arg]	count=1
function	the command prompt ||| prompt	count=1
function	that need to ||| remote target ids to	count=1
arg	vm determined by the ||| vm	count=1
module	an account alias in ||| cloud centurylink	count=1
class	are ||| elb manager	count=2
function	to be ||| remote target ids to remove	count=1
module	metadata keys and ||| modules cloud rackspace	count=1
arg	data blob ||| file_obj start_pos count	count=1
arg	remote ||| remote	count=1
function_arg	calculate difference [arg_2] ||| [function_1] [arg_2]	count=1
arg	a folder ||| folder	count=1
function	and get the ||| get	count=3
class	return ||| cdotlun	count=1
arg	task if they are ||| task	count=1
function	[function_1] config file ||| core [function_1] [function_2]	count=1
function	remove a mount point ||| mount	count=1
function_arg	change attributes [arg_2] ||| [function_1] name [arg_2]	count=2
arg	msg ||| msg color stderr screen_only	count=1
function	for module error title ||| failure title from exception	count=1
function	host ||| host facts	count=1
function	hex digest of ||| digest	count=1
function	size in bytes into ||| format disk size	count=1
class	dictionary or the ||| ansible cloud stack	count=1
function	and return ||| get	count=1
class	haproxy command by ||| haproxy	count=1
class	[class_1] config ||| [class_1] [class_2]	count=3
function	resources given ||| resources	count=1
function	default user configured ||| remote user	count=1
function	password ||| password	count=2
function_arg	type of [arg_2] ||| [function_1] [arg_2]	count=2
function	environment string to be ||| environment string	count=1
class	loader ||| data loader	count=1
function	lists the roles installed ||| execute list	count=1
module	the system to receive ||| modules packaging os	count=1
function	find a plugin ||| find plugin	count=2
function	[function_1] lease file ||| [function_1] dhcp [function_2]	count=1
class	with swupd ||| swupd	count=1
module	a connection ||| plugins connection	count=1
function_arg	[function_1] cpu ||| [function_1] clc server clc [arg_2]	count=1
function_arg	difference between [arg_2] ||| [arg_2] [function_1]	count=1
function	has a proxy ||| get proxy	count=1
function	state [function_2] ||| [function_2] [function_1]	count=5
function_arg	[function_1] url ||| [arg_2] [function_1]	count=2
class	with ||| console cli	count=2
function	a salt for the ||| salt	count=1
module	given vpc ||| cloud amazon	count=1
class	nondestructive ||| elasti cache manager	count=1
function	[function_1] removed from ||| [function_1] [function_2]	count=4
function	[function_1] properties ||| [function_1] [function_2]	count=2
function	do final [function] on the ||| post [function]	count=1
function	available ||| available	count=1
class	ansible galaxy server ||| galaxy	count=1
module	to [module_1] [module_2] ||| [module_1] [module_2]	count=4
function_arg	the file [arg_2] ||| [function_1] [arg_2] line_number	count=1
function	the port ||| port	count=1
arg	in clc [arg_2] ||| [arg_2] [arg_1]	count=1
function	returns an option from ||| get	count=1
arg	the clc ||| clc	count=4
arg	desired state ||| timeout	count=1
class	code path ||| load	count=1
class	main ||| clc load	count=1
function	do basic ||| basic	count=1
module	a server ||| cloud centurylink	count=1
arg	managed instance group ||| mig named_ports	count=1
class	the public [class_2] ||| [class_2] [class_1]	count=1
function	days the certificate ||| days	count=1
function	the required_together argument to ||| infinibox required together	count=1
arg	the name ||| name tag	count=1
function_arg	loads variables [arg_2] ||| [function_1] [arg_2]	count=5
class	block until server ||| clc modify server	count=1
class	and handle the ||| load	count=1
function	already has ||| has database	count=1
arg	dict passed ||| name passed default module	count=1
class	the ||| lxc	count=1
arg	feature vmid = -1 ||| vmid	count=1
module	specified port on the ||| modules cloud	count=1
arg	[arg_1] password ||| [arg_2] [arg_1]	count=4
function	associate an alert policy ||| add alert policy	count=1
function_arg	[function_1] gce ||| [function_1] [arg_2]	count=2
module	amazon [module_2] ||| [module_2] [module_1]	count=4
arg	performs basic parameter ||| module aws	count=2
class	memory cache first as ||| file cache	count=1
function	version ||| get template with version	count=1
arg	method is executed when ||| action_condition wait_condition	count=1
function_arg	executes the [arg_2] ||| [arg_2] [function_1]	count=21
module	[module] user note ||| [module]	count=1
function	in version ||| with version	count=1
function	to be removed ||| remote target ids to	count=1
function	downtime ||| servicegroup host downtime	count=1
function	self group to ||| group	count=1
module	updates from subscription-manager ||| modules	count=1
function	with check ||| do check	count=1
module	rpm ||| modules packaging os	count=1
class	new block with task ||| block	count=1
function	a new ||| create	count=1
function	[function_1] clc credentials ||| [function_1] [function_2]	count=7
module	plugins should implement ||| plugins	count=1
module	major and ||| modules	count=1
function	an existing cluster ||| cluster	count=1
arg	the name of ||| name	count=1
function_arg	[function_1] to stackdriver ||| [function_1] [arg_2]	count=4
function	json ||| to nice json	count=1
class	the locale module to ||| module	count=1
arg	a new or ||| module	count=1
arg	the beginning ||| raw_key rank	count=1
function	post [function_2] ||| [function_1] [function_2]	count=9
module	the main ||| modules cloud lxd	count=4
function	[function_1] validation for ||| [function_2] [function_1]	count=2
arg	msg ||| msg	count=1
function	an entity id by ||| get id by	count=1
module	registration with rhn ||| module_utils	count=1
function	deactivate a package ||| deactivate packages	count=1
function	start of the ||| play start	count=1
class	server provisioning ||| server	count=1
arg	characters ||| characters	count=1
arg	security group matching ||| location name os_type	count=1
function	command name for the ||| command	count=6
function_arg	hostnames [arg_2] ||| [arg_2] [function_1]	count=1
module	google [module_2] ||| [module_2] [module_1]	count=1
class	task with ||| task	count=2
module	write ||| modules web_infrastructure	count=2
function	logic to get the ||| get	count=2
arg	at the beginning ||| module raw_key rank	count=1
module	first authorization [module] ||| [module]	count=1
class	returns tuple ||| azure rmmodule base	count=1
function	or [function] ||| update system [function]	count=1
module	entry point ||| junos	count=3
arg	remote branch version this ||| remote	count=1
function	device supports ||| close	count=1
function	bind [function_2] ||| [function_1] [function_2]	count=1
module	connection nothing to ||| plugins	count=6
function_arg	[function_1] cpu of ||| [function_1] clc server clc [arg_2]	count=1
module	a dictionary ||| modules cloud	count=1
module	of ||| modules packaging os	count=3
module	a system ||| module_utils	count=1
arg	pattern according to the ||| pattern	count=1
class	<name>01 to ||| azure rmmodule base	count=1
class	of ||| plugin loader	count=1
function	hex digest of local ||| digest	count=1
module	string for later ||| modules web_infrastructure	count=2
function	lease [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] new ||| [function_2] [function_1]	count=2
class	the ||| firewall	count=2
function	port where ||| port	count=1
function	created snapshot and optionally ||| snapshot	count=1
class	server based on the ||| server	count=1
function	register a ||| register	count=1
function	to create ||| create	count=2
function	retrieves block [function_2] ||| [function_2] [function_1]	count=8
function	create a [function_2] ||| [function_1] [function_2]	count=6
function_arg	ports on [arg_2] ||| [function_1] [arg_2]	count=3
module	from subscription-manager ||| os	count=1
module	updates ||| packaging os	count=2
function_arg	export [arg_2] ||| [function_1] [arg_2]	count=1
class	all ||| rhsm	count=1
function_arg	[function_1] [arg_2] ||| [function_1] format [arg_2]	count=7
function	load config file ||| load config file	count=1
class	block until server provisioning ||| modify server	count=1
arg	change user password ||| user password	count=1
arg	is templated specially ||| value templar	count=1
function	connect to lxd nothing ||| connect	count=1
function	path and handle the ||| process	count=3
function	configuration ||| read config	count=2
function	a backend service ||| backend service	count=2
module	present for ||| modules	count=1
module_class	for [class_2] ||| [module_1] [class_2]	count=5
function_arg	[function_1] ec2 instance ||| [arg_2] [function_1]	count=2
function	present on [function_2] ||| [function_1] [function_2]	count=2
function	file ||| from file	count=2
arg	folder ||| cf folder	count=1
arg	a particular host ||| host minutes	count=2
arg	it if it doesn't ||| parent_name group_description	count=1
module_class	[module_1] load ||| [module_1] [class_2]	count=1
class	[class_1] key ||| [class_1] [class_2]	count=1
module	here ||| plugins connection	count=14
function	parameters to ||| params	count=1
arg	to baselist ||| baselist	count=1
class	dimension data network module ||| dimension data network module	count=1
function	if file is not ||| file	count=1
function	ip ||| ip present	count=2
function	hostname and [function_2] ||| [function_2] [function_1]	count=1
module	needs ||| cloud openstack	count=1
function	spec info ||| spec	count=1
arg	the server is updated ||| server	count=1
function_arg	[function_1] module ||| [function_1] [arg_2] linux_mounts	count=2
arg	uninstalls ||| port_path	count=1
arg	the module parameters ||| module secgroup	count=1
function	lists filtered based ||| filter tagged tasks	count=1
function	[function_1] a default ||| [function_2] [function_1]	count=3
function	[function_1] a server ||| [function_1] [function_2]	count=4
function	of strings ||| get image	count=1
function	lease file ||| lease file	count=2
arg	the host to have ||| propertyhash	count=1
arg	of given key ||| key	count=2
class	remove ||| app cdotlicense	count=1
function	send a ||| send	count=1
function	if boto library supports ||| boto supports volume	count=1
function	state of ||| state	count=2
module	into a ||| plugins	count=1
function	proxy protocol policy if ||| set proxy protocol policy	count=1
function	recreate tags ||| recreate tags	count=2
arg	events to ||| events	count=1
function	downtime for a ||| downtime	count=1
function	creates a new ||| create zone	count=1
function	associate the alert policy ||| alert policy	count=1
arg	run a ||| in_data sudoable	count=7
function	list of subnets ||| find subnets	count=1
module	metadata keys and ||| rackspace	count=1
class	the server ||| clc modify server	count=2
function	add new [function] ||| save [function]	count=3
class	network [class_2] ||| [class_1] [class_2]	count=6
module	needed for ||| modules packaging	count=1
function_arg	encrypt [arg_2] ||| [arg_2] [function_1]	count=3
function	[function_1] [function_2] ||| [function_2] balancer [function_1]	count=4
module	receive ||| modules packaging os	count=2
function	a policy ||| ensure policy	count=1
class	haproxy ||| haproxy	count=1
class	about ||| app cdotlun	count=2
function	[function_1] domain by ||| [function_1] [function_2]	count=3
function	is an allowed size ||| size	count=1
function	add new [function] bottom ||| save [function]	count=1
module	execute the ||| modules cloud centurylink	count=3
class	ansible galaxy roles ||| galaxy cli	count=1
arg	decreaste ||| retention_period action	count=1
arg	post ||| github_repo reference role_name	count=1
function	is absent by deleting ||| is absent	count=1
class	container config ||| container	count=1
module	the main code path ||| modules	count=3
function	validate the ||| validate	count=1
function	return a dict of ||| get	count=1
function	targets that need to ||| target ids to remove	count=1
function	the play ||| play	count=1
module_class	self [class_2] ||| [module_1] [class_2]	count=2
module	device and return ||| module_utils	count=3
function	the latest version ||| repository version	count=2
module	power status for ||| modules	count=1
function_arg	an object [arg_2] ||| [arg_2] [function_1]	count=6
function	[function_1] boot ||| [function_1] [function_2]	count=1
function	[function_1] the port ||| [function_1] [function_2]	count=1
function	of newlines ||| newlines	count=1
arg	security group matching ||| os_type	count=1
function	function which [function_2] ||| [function_2] [function_1]	count=4
function	when ||| fail on missing	count=1
arg	of a location ||| location	count=1
arg	value is a container ||| value	count=1
arg	finds ||| zone_name want_private	count=1
function	register the current ||| register	count=1
function_arg	datacenter [arg_2] ||| [arg_2] [function_1]	count=4
function	a decrypted [function] note standard ||| shred [function]	count=1
module	of ||| os	count=1
module	and write it ||| modules web_infrastructure	count=1
module	to do for ||| connection	count=1
function	the value associated with ||| value	count=1
function	network [function_2] ||| [function_1] [function_2]	count=3
arg	the current project quota ||| module project_quota_output	count=1
function	searches ||| execute search	count=1
class	a ||| acmeclient	count=1
arg	the git repo ||| module git_path	count=1
function	pyrax ||| setup rax	count=1
function	each host ||| parse host	count=1
function	certificate ||| certificate	count=1
module	for vm ||| modules cloud vmware	count=1
arg	re sub returning ||| value pattern replacement ignorecase	count=1
function	deactivate a ||| deactivate	count=1
function	called right after ||| post update	count=1
module	return a ||| modules	count=1
function_arg	delete the [arg_2] ||| [function_1] [arg_2]	count=2
arg	a value in ||| value	count=1
arg	folder to ||| folder container ttl	count=1
function	encryption ||| encryption	count=1
module	an ||| cloud centurylink	count=2
function	nic ||| create nic	count=2
function	assignment of ||| get	count=1
function	log ||| heuristic log	count=1
arg	creates a datacenter ||| profitbricks	count=1
function	an argument ||| argument	count=2
function	module code ||| configure module	count=1
function	a network domain ||| network domain	count=1
function	notifications ||| svc notifications	count=2
class	the cache ||| cache	count=1
class	registration with ||| rhsm	count=1
arg	in hash ||| module	count=2
function	[function] server ||| [function] from	count=2
function	schedule ||| schedule svc	count=1
module	the shell command ||| system	count=1
module	method for example the ||| modules cloud amazon	count=1
arg	new or [arg_2] ||| [arg_1] [arg_2]	count=3
arg	datacenter ||| location	count=2
function	file obj are ||| file	count=1
arg	the ports ||| ports	count=1
module	from cloud ||| modules cloud	count=1
arg	and returns the pattern ||| pattern	count=1
function	changed_when ||| changed when	count=2
function	spot requests to ||| spot requests	count=1
module	a ||| plugins callback	count=2
function	[function_1] [function_2] order first found is ||| core [function_1] [function_2]	count=1
function	tag list ||| tags	count=1
function	server by ||| server by	count=2
function	if temporary path ||| remove tmp path	count=3
class	elb ||| elb	count=3
arg	security ||| name os_type	count=1
function	the password ||| password	count=1
module	a previously ||| modules packaging	count=1
module	if successful otherwise false ||| database postgresql	count=1
arg	[arg_1] dict_b ||| [arg_1] [arg_2]	count=2
arg	a magic wake-on-lan packet ||| mac broadcast port	count=1
function	a container ||| container	count=1
module	the ||| modules cloud	count=36
arg	group rule ||| prefix rule	count=1
module	value of [module] authorization ||| [module]	count=1
module	system to receive ||| packaging os	count=1
arg	set of events ||| events data	count=1
module	a ||| modules	count=20
function_arg	privileges [arg_2] ||| [function_1] cursor user [arg_2]	count=4
function_arg	[function_1] the data ||| [function_1] [arg_2]	count=1
arg	[arg_1] [arg_2] ||| [arg_2] [arg_1]	count=488
function	adds the repo removes ||| addmodify repo	count=1
function	any ||| deployed	count=1
module	to ||| lookup	count=1
function	lists [function_2] ||| [function_2] [function_1]	count=1
function	a proxy [function_2] ||| [function_1] [function_2]	count=1
class	and ||| variable manager	count=1
module	power [module] ||| [module] cloud	count=1
function	splits ||| split	count=1
function_arg	[function_1] module parameters ||| [function_1] rule [arg_2]	count=1
arg	named ||| mod_type ignore_deprecated	count=1
function	checks if the alert ||| alert	count=1
function	by the [function_2] ||| [function_1] [function_2] w	count=1
function	of the ||| get link	count=1
arg	have ||| propertyhash	count=2
module	for an ||| modules cloud centurylink	count=2
function	the policy ||| get policy	count=1
function_arg	keys the [arg_2] ||| [arg_2] [function_1]	count=1
function	host key can be ||| host	count=1
function	that need to ||| remote target ids to remove	count=1
function	host ||| get host	count=4
module	create ||| cloud azure	count=1
function	the device ||| close	count=1
function_arg	[function_1] the device ||| [function_1] cli command cmd [arg_2]	count=1
function_arg	parameters [arg_2] ||| [arg_2] [function_1]	count=2
class	parameters and container ||| container	count=1
module	for special packages which ||| modules	count=1
arg	for a particular ||| host	count=1
module	overwrites a ||| cloud google	count=1
function	list of key ids ||| key ids	count=1
module	to reach ||| openstack	count=1
class	the current system returns ||| rhsm	count=1
function	pool on ||| pool	count=1
function	[function_1] cache ||| [function_2] [function_1]	count=5
function	spec info { ||| spec	count=1
arg	also supports to get ||| host backend	count=1
arg	from url returns ||| url	count=1
module	registered system ||| modules packaging os	count=1
class	json collector ||| logic monitor	count=2
function	results off the final ||| pending results	count=1
module	of the ||| modules packaging	count=1
arg	hosts [arg] ||| [arg]	count=1
module	given ||| cloud misc	count=2
function	limits ||| limits	count=1
module	sanity ||| cloud google	count=1
module	to ||| modules packaging	count=1
function	list of ||| get ec2	count=1
function	if the alert ||| alert	count=1
module	do ||| connection	count=8
function	put a file ||| put file	count=3
class	machine via the ||| virt	count=1
function	[function_1] spec ||| [function_2] [function_1]	count=15
arg	values specified in ||| module cf container	count=1
module	of ||| modules source_control	count=1
module	it to the ||| web_infrastructure	count=1
function	check supplied ||| sanity check	count=1
arg	vars ||| vars play	count=1
function	a decrypted [function] note ||| shred [function]	count=1
function	security [function_2] ||| [function_1] [function_2]	count=2
arg	sending a ||| msg_format color notify	count=1
arg	takes a remote path ||| path	count=1
function	ensures the alert ||| ensure alert	count=2
module	does not already exist ||| source_control	count=1
function	pubkey ||| pubkey	count=1
arg	the entity [arg_2] ||| [arg_2] [arg_1]	count=4
module	checks to see ||| modules storage netapp	count=1
function	complete if ||| complete	count=3
function	protocol policy if ||| protocol policy	count=2
function	the snapshot ||| server snapshot	count=1
module	to receive updates from ||| modules packaging os	count=1
function	the request parameters ||| request	count=1
arg	path ||| path	count=6
function	parted [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] the alert ||| [function_2] [function_1]	count=2
function	a supplied service ||| services	count=1
function	path is relative ||| path	count=3
module	clc ||| modules cloud centurylink	count=7
function	target state from aws ||| fetch aws state	count=1
function	[function_1] licenses ||| [function_2] [function_1]	count=2
function	a policy [function_2] ||| [function_1] [function_2]	count=3
function	updates [function_2] ||| [function_1] [function_2]	count=1
function_arg	[function_1] the device ||| [arg_2] [function_1]	count=1
arg	[arg_1] a host ||| [arg_2] [arg_1]	count=22
function	galaxy info entry ||| load galaxy info	count=2
module	the given ||| cloud	count=1
function	monkey patch for boto ||| boto	count=1
function	hash b into a ||| hash	count=1
module	the output into a ||| plugins	count=1
arg	available [arg] ||| [arg]	count=1
function	copies the ||| transfer	count=1
function	pyrax ||| rax	count=1
module	with ||| plugins	count=1
function	the certificate ||| ssh certificate tokens	count=1
function	code from the proxy ||| proxy	count=1
module	checks to ||| modules storage netapp	count=1
module	shell ||| system	count=1
arg	new object collection item ||| collection name	count=1
module	handle the ||| centurylink	count=3
module	if the ||| plugins connection	count=1
arg	yaml ||| file_name	count=2
function_arg	[function_1] piece of ||| [arg_2] [function_1]	count=2
module	been initialized with ||| plugins connection	count=1
function	anti affinity ||| anti affinity	count=1
function	[function_1] given firewall ||| [function_2] [function_1]	count=1
arg	of numeric slice amongst ||| subset_pattern	count=1
arg	events to monitor ||| events data	count=1
arg	used with iterator so ||| enabled	count=1
class	galaxy api ||| galaxy cli	count=1
function	the elastic ip is ||| is	count=1
class	group <name>01 ||| azure rmmodule base	count=1
class	consistent method ||| azure rmmodule base	count=1
arg	adds ||| with_subdir	count=1
arg	take pear remote-info output ||| pear_output	count=1
class	path ||| clc load	count=1
arg	clc cloud ||| clc override_count	count=2
function	repo removes ||| addmodify repo	count=1
arg	formats each ||| targets	count=1
function_arg	[function_1] certificate in ||| [arg_2] [function_1]	count=3
function	of key ids and ||| shorten key ids	count=1
function	partitions and it returns ||| get	count=1
function	lists ||| list	count=2
class	the ||| rhsm	count=3
class	the selector [class_2] ||| [class_2] [class_1]	count=2
arg	finds ||| module zone_name want_private	count=1
arg	subscript which may ||| subscript	count=1
module_class	[module_1] rule ||| [module_1] [class_2]	count=1
class	code path ||| clc load balancer	count=1
class	path and ||| group	count=1
function	the absolute path of ||| get path	count=1
function_arg	[function_1] the play ||| [arg_2] [function_1]	count=3
module	multiplexing ||| plugins connection	count=2
arg	given vmid ||| vmid	count=3
function	the policies [function_2] ||| [function_1] [function_2]	count=2
function	the action the ||| action	count=1
function	register a file object ||| register	count=1
function	[function_1] boot ||| [function_2] [function_1]	count=1
function	a class [function_2] ||| [function_2] [function_1]	count=4
function	[function_1] device mapping ||| [function_2] [function_1]	count=4
arg	error code and changed ||| changed req	count=1
class	makes sure ||| clc anti affinity policy	count=1
arg	ec2 instance and ||| ec2	count=1
arg	or cpu ||| server_id cpu	count=1
module	[module] state ||| [module]	count=1
class	a haproxy ||| haproxy	count=1
function	information about ||| info	count=1
function_arg	on start [arg_2] ||| [arg_2] [function_1]	count=1
function	configuration is different and ||| different config	count=1
arg	in given list rt_list ||| rt_list	count=1
module_class	to self [class_2] ||| [module_1] [class_2]	count=2
module	destination ||| modules web_infrastructure	count=2
arg	a set of events ||| fileobj events	count=1
function	generate a [function_2] ||| [function_2] [function_1]	count=2
function	set on the ||| set	count=1
function	by ||| by	count=6
class	the ||| policy	count=2
function	to retrieve all subclasses ||| all subclasses	count=1
module	returns a [module_2] ||| [module_1] [module_2]	count=2
function	the end of a ||| from end	count=1
module	[module_1] [module_2] in data structure ||| [module_1] [module_2]	count=2
module	returns a ||| modules	count=2
arg	datacenter and ||| location	count=1
module	if changed false otherwise ||| database postgresql	count=1
module	for docker ||| plugins	count=1
module	uses 0/1 ||| module_utils	count=1
class	execute ||| clc group	count=2
function	add this device ||| add	count=1
function	is absent by ||| group is absent	count=2
arg	command [arg_2] ||| [arg_2] [arg_1]	count=1
function	save [function_2] ||| [function_1] [function_2]	count=4
function	variables set on ||| set host	count=1
arg	to those expected ||| module_params	count=1
class	execute the ||| clc firewall policy	count=1
function_arg	[function_1] port and ||| [function_1] host [arg_2]	count=1
function	of the options_vars ||| options	count=1
class	to the destination ||| acmeclient	count=1
function	possible [function] ||| [function]	count=2
module	initialized with ||| plugins	count=1
module	execution ||| modules network openswitch	count=1
function	an existing vpc ||| vpc	count=1
class	the rule [class_2] ||| [class_2] [class_1]	count=5
function	text string ||| text	count=1
arg	'absent' ||| search_params	count=1
function	file is not ||| from file	count=1
class	handle ||| clc firewall policy	count=2
arg	returns change status of ||| module xbps_path packages state	count=1
function	a temporary [function_2] ||| [function_1] [function_2]	count=3
function	of device ||| get	count=1
function	of each ||| get	count=1
class	the locale module ||| module	count=1
module	subscription-manager ||| packaging os	count=2
function	event handler ||| event handler	count=2
function	[function_1] bind ||| [function_1] [function_2]	count=1
module	for a ||| modules cloud	count=15
function_arg	[function_1] [arg_2] ||| [function_1] baselist [arg_2]	count=6
function	list of [function_2] ||| [function_1] [function_2]	count=7
arg	each bridge member ||| _bridgemems	count=1
function	ubuntu ||| ubuntu	count=2
function	assemble a file ||| assemble	count=2
arg	cpu of ||| server_id cpu	count=1
arg	desired value ||| value timeout	count=2
arg	be fulfilled [arg_2] ||| [arg_2] [arg_1]	count=4
function	[function_1] absent by ||| [function_1] [function_2]	count=1
module	host ||| connection	count=1
function	to schedule downtime ||| schedule host svc downtime	count=1
function	host key ||| host	count=1
function	execute a command ||| command	count=1
function	available size of a ||| get	count=1
function_arg	encrypted data [arg_2] ||| [function_1] file [arg_2]	count=1
class	anti [class_2] ||| [class_2] [class_1]	count=2
module	a given ||| cloud google	count=1
class	task if specified and ||| task	count=1
arg	of two dictionaries ||| dict1 dict2 by_key	count=1
arg	cert_file remains ||| cert_file	count=1
function	name of [function_2] ||| [function_1] lxc [function_2]	count=1
class	and returns ||| manager	count=1
function_arg	[function_1] commands ||| [arg_2] [function_1]	count=1
function	ensures the given ||| ensure	count=3
function	anti affinity [function_2] ||| [function_1] [function_2] id	count=1
module_class	[module_1] [class_2] ||| [module_1] lxc [class_2]	count=2
module	request a ||| modules	count=1
module	removes metadata keys ||| cloud rackspace	count=1
class	set ||| alert policy	count=1
class	main ||| clc group	count=2
function	bind [function_2] ||| [function_2] [function_1]	count=1
function	list ||| diff list	count=1
class	path and handle ||| balancer	count=1
function	proxy protocol [function_2] ||| [function_2] [function_1]	count=3
function	create [function_2] ||| azure rmmodule base [function_1] [function_2]	count=2
arg	clc ||| clc module	count=5
module	receive updates from subscription-manager ||| packaging os	count=1
function	parse out the policy ||| get policy	count=1
module	from ||| modules cloud	count=6
function	is a text string ||| text	count=1
function_arg	[function_1] piece ||| [function_1] [arg_2]	count=2
function_arg	[function_1] stdin filehandle ||| [arg_2] [function_1]	count=3
module	check ||| modules database mongodb	count=2
arg	adds a service or ||| module	count=1
class	details about ||| net	count=1
module	synchronize all of the ||| os	count=1
arg	of data ||| data	count=1
arg	particular [arg_2] ||| [arg_1] [arg_2]	count=1
arg	the given facts ||| facts	count=2
arg	[arg_1] key are ||| [arg_2] [arg_1]	count=4
module	for example the ||| modules	count=1
arg	keys from b take ||| b	count=1
function_arg	update [arg_2] ||| [arg_2] [function_1]	count=1
function	inventory ||| retry inventory	count=1
class	dictionary or ||| ansible cloud stack	count=1
function	convert them [function_2] ||| [function_1] [function_2]	count=1
module	creates new filesystem with ||| modules cloud	count=1
function	branch does ||| remote branch	count=1
arg	from the task if ||| task variables templar	count=1
function	bridge ||| to array	count=1
function	a vault [function_2] ||| [function_2] [function_1]	count=7
arg	for a pattern ||| pattern	count=1
module	(of course for the ||| modules	count=1
function	present and ||| present	count=1
function	galaxy [function_2] ||| [function_1] [function_2]	count=4
function	[function_1] the aws ||| [function_2] [function_1]	count=3
module	[module_1] for a ||| [module_1] [module_2]	count=1
class	anti [class_2] ||| [class_1] [class_2]	count=2
function	[function_1] library supports ||| [function_1] [function_2]	count=2
class	process ||| clc alert policy	count=1
arg	value returned by ||| value	count=1
module	we've been initialized with ||| plugins connection	count=1
function_arg	a plugin [arg_2] ||| [function_1] [arg_2]	count=1
module	start the machine ||| misc	count=1
function	from [function_2] ||| [function_2] [function_1]	count=10
arg	user returns true ||| cursor user	count=1
function	check if cluster requires ||| requires	count=1
function	on the remote host ||| exec	count=3
function	a dict with the ||| dict	count=1
module	file ||| web_infrastructure	count=1
function	containing host patterns ||| host	count=1
arg	kickstart ||| module image_name kickstart	count=1
function	check if the system ||| system	count=1
function	alert [function_2] ||| [function_1] [function_2]	count=19
arg	in clc cloud ||| module clc override_count	count=3
module	check whether a ||| modules cloud	count=1
module	route table has all ||| cloud amazon	count=1
arg	of pip command to ||| module pip chdir	count=1
arg	a vpc when supplied ||| vpc	count=1
class	remove ||| modify server	count=1
function	an import ||| create import	count=1
function	list of key ids ||| shorten key ids	count=1
module	record a ||| cloud docker	count=1
module	details about ||| netapp	count=1
function	argument specifiation common to ||| argument spec	count=1
function	dictionary of information ||| dict	count=1
function	connect to the host ||| connect	count=1
arg	status to change for ||| status wait_timeout	count=1
function	device [function_2] ||| [function_2] [function_1]	count=6
arg	vars sent through ||| vars	count=1
class	inspection results ||| docker client	count=1
module	previously registered ||| packaging os	count=1
module	for special packages which ||| modules packaging	count=1
function	message ||| msg	count=2
arg	beginning ||| raw_key rank	count=1
function_arg	[function_1] [arg_2] ||| [function_1] server snapshot absent [arg_2]	count=6
module	details about the ||| modules storage	count=1
function	server by the ||| server by	count=2
class	makes sure that ||| anti affinity	count=1
arg	modifies an existing ||| vpc_conn	count=1
class	code ||| policy	count=1
function	the type of ||| get interface type	count=2
module	execute ||| modules cloud centurylink	count=6
function_arg	set the [arg_2] ||| [function_1] [arg_2]	count=3
arg	a path ||| path	count=1
arg	module ansible module ||| module client instance_name	count=1
module	of [module_1] [module_2] ||| [module_1] [module_2]	count=6
arg	ports ||| ports	count=1
arg	host to the ||| host	count=1
class	nxapi json ||| nxapi	count=1
function_arg	spot requests [arg_2] ||| [function_1] module [arg_2]	count=1
function	[function_1] vault password ||| [function_2] [function_1]	count=1
function	list of resource ||| list	count=1
function	dict_a ||| compare dicts	count=1
function_arg	[function_1] its name ||| [arg_2] [function_1]	count=4
module	string for ||| modules database postgresql	count=1
arg	use ssh-keyscan to ||| module fqdn port key_type	count=1
module	by ||| modules cloud google	count=1
function	remote state ||| remote state	count=2
module	recursively iterate over a ||| plugins	count=1
function	put a ||| put	count=1
arg	found fail module ||| module	count=1
arg	[arg_1] name ||| [arg_2] [arg_1]	count=2
function	boto ||| boto	count=5
module	[module_1] connection ||| [module_1] [module_2]	count=2
function	task to keep ||| task	count=1
function	loads the file ||| load inventory file	count=2
function	message ||| message	count=4
function	data matches ||| matches	count=1
module	object ||| modules monitoring	count=1
class	the main code path ||| load	count=1
function	attributes of [function_2] ||| [function_1] [function_2]	count=3
function	delete [function_2] ||| [function_1] [function_2]	count=2
module_class	return a bool ||| module_utils ansible module	count=1
module	a ||| modules packaging	count=1
function	proxy protocol policy ||| set proxy protocol policy	count=1
function	bundle ||| install bundle	count=1
arg	individual [arg_2] ||| [arg_2] [arg_1]	count=2
module	synchronize all ||| packaging os	count=1
module	synchronize all of ||| modules	count=1
function	delete ||| delete cert	count=2
arg	containing ssh-key options ||| module options	count=1
function	default ||| default	count=4
module	the main code ||| cloud centurylink	count=3
module	and ||| plugins	count=1
class	return details about the ||| net app cdotlun	count=1
arg	installed ||| module name depot	count=1
function	[function_1] string to ||| [function_2] [function_1]	count=3
function	make the keys ||| change keys	count=1
module	target for the ||| modules cloud amazon	count=1
function	[function_1] any ||| [function_2] [function_1]	count=1
module	to do for docker ||| plugins connection	count=1
function	instance with data from ||| set	count=1
arg	to get ||| backend	count=1
arg	given value ||| value	count=4
function_arg	command returns [arg_2] ||| [arg_2] [function_1]	count=3
function	destroy and ||| destroy and	count=2
function	policy ||| policy	count=21
class	selector this ||| base selector	count=2
function	[function_1] v2 ||| [function_2] [function_1]	count=1
class	json group object ||| logic monitor	count=1
function	downtime for ||| host svc downtime	count=1
function	returns common arguments ||| common argument spec	count=1
function	string containing [function_2] ||| [function_1] [function_2]	count=4
function	an instance [function_2] ||| [function_2] [function_1]	count=1
function	parse out the policy ||| policy	count=1
module	main code ||| centurylink	count=3
function	a server ||| server	count=2
function	when a task ||| runner on	count=1
function	[function_1] for ||| [function_1] [function_2]	count=3
function	paginated ||| paginated	count=2
function	zone by name ||| get zone by name	count=1
class	available [class] in ||| [class]	count=1
function	for ||| for	count=1
module	a global mysql variable ||| modules database mysql	count=1
function	attributes for this ||| validate attributes	count=1
module	lxc nothing to do ||| plugins connection	count=1
class	path and handle the ||| firewall policy	count=1
arg	json response ||| response firewall_dict	count=1
function	name of [function_2] ||| [function_1] [function_2]	count=1
arg	attribute ||| partitions attribute number	count=1
arg	security group ||| location name os_type	count=1
function	the retention of messages ||| retention action	count=1
module	returns true if package ||| modules packaging os	count=1
function_arg	temp [arg_2] ||| [function_1] container_path [arg_2]	count=1
function	instance ||| instance	count=2
function	host [function_2] ||| [function_1] [function_2]	count=2
module	on success ||| cloud	count=1
function	create ||| create server	count=1
function	instance template ||| instance template	count=2
module	start ||| cloud	count=1
function	loads and [function_2] ||| [function_1] [function_2]	count=1
function	file ||| push file	count=1
function	get ||| get	count=26
module	receive updates from ||| modules	count=1
arg	arg is ||| arg_port	count=1
function	key ids and converts ||| shorten key ids	count=1
module	or overwrites [module_2] ||| [module_2] [module_1]	count=1
function_arg	the user [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] is removed ||| [function_1] [function_2]	count=4
function	[function_1] is absent ||| [function_2] [function_1]	count=7
class	load ||| ansible module	count=1
function	new certificate and write ||| get certificate	count=1
function	run update ||| package update	count=1
module	file return ||| module_utils	count=1
function	export if ||| export	count=2
function	[function_1] data ||| [function_1] [function_2]	count=2
function	lines ||| replace	count=1
module	handle ||| modules	count=3
arg	server to ||| server	count=1
module	to the ||| modules web_infrastructure	count=1
function_arg	[function_1] given path ||| [function_1] inventory basename [arg_2]	count=1
arg	restriction this is ||| restriction	count=1
arg	idempotency using the ||| module cli	count=3
arg	of a vpc ||| module vpc	count=1
arg	object ||| all_vars	count=1
arg	search_for_host_key module ||| module	count=1
arg	a user ||| user	count=3
function	have the requested ||| check	count=1
module_class	[module_1] the firewall ||| [module_1] centurylink clc [class_2]	count=1
class	are only available in ||| manager	count=1
module	is ||| modules packaging os	count=1
function	of subnets ||| find subnets	count=1
module	execute the [module_2] ||| [module_1] [module_2]	count=2
arg	executed when we ||| action_condition wait_condition	count=1
function	required [function] ||| [function]	count=3
arg	loaded via name ||| name	count=1
function_arg	compare the [arg_2] ||| [function_1] request with dict [arg_2]	count=1
module	to receive updates ||| packaging os	count=1
function	mode logic for ||| mode	count=1
function	a default ||| default nic	count=1
function	new ||| new	count=1
function	installed state of ||| installed state	count=2
class	existing network and ||| docker network manager	count=2
function_arg	[function_1] [arg_2] group names are not ||| [function_1] names [arg_2]	count=3
arg	user [arg_2] ||| [arg_1] [arg_2]	count=1
function	an entity id ||| get id	count=1
function_arg	loop [arg_2] ||| [function_1] [arg_2]	count=3
function_arg	return volume [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	convert [arg_2] ||| [function_1] bytes [arg_2]	count=4
function	version of [function_2] ||| [function_2] [function_1]	count=2
class	anti ||| anti	count=2
function	axapi ||| axapi enabled disabled	count=1
module	takes a ||| cloud	count=1
arg	entity ||| entity	count=6
function	already has ||| has table	count=1
function	binds ||| binds	count=1
module	the lxc nothing to ||| connection	count=1
arg	object prepared for ||| container_dn superordinate	count=1
function	[function_1] from security ||| [function_2] [function_1]	count=1
module	install a ||| cloud	count=1
function	find ||| rax find image	count=1
function	quoted string ||| quote	count=1
class	a that are ||| elb manager	count=1
function	of the module code ||| module	count=1
module	to receive ||| modules packaging	count=1
function	stop [function_2] ||| [function_1] [function_2]	count=2
function	removed if ||| absent	count=1
function	group matching the ||| group	count=1
function	to hipchat v1 server ||| v1	count=1
class	of the server based ||| clc modify server	count=2
class	main code path ||| clc firewall	count=1
function	file from zone ||| file	count=1
module	lxd nothing to ||| connection	count=1
function_arg	[function_1] url hostkey ||| [function_1] [arg_2]	count=1
arg	task ||| task variables	count=1
function	log information ||| log	count=1
function	executes the low ||| low	count=1
arg	based on the clc ||| clc module	count=1
module	metadata [module_2] ||| [module_1] [module_2]	count=5
module	the ||| misc	count=2
function	a network domain by ||| network domain	count=1
function	of a local ||| local	count=1
function_arg	[function_1] to typetalk ||| [arg_2] [function_1]	count=2
module	the module ||| modules cloud	count=9
function	the ||| close	count=2
function	[function_1] lease ||| [function_1] dhcp [function_2]	count=1
function	deletes them from ||| delete	count=1
function	of newlines at the ||| newlines	count=1
arg	conn ||| conn	count=1
function	add header and format ||| format	count=1
function	group list ||| group list	count=1
class	path ||| group	count=1
function	list of resource ||| tag list	count=1
module	the ||| plugins	count=12
function	checks if vrouter exists ||| check cli	count=2
arg	the pool on ||| alias location lb_id pool_id	count=1
function	enable the system ||| enable	count=2
function	[function_1] the file ||| [function_1] error [function_2]	count=1
module	execution ||| network ios	count=3
arg	creates a ||| profitbricks	count=1
function	for the group matching ||| group	count=1
function_arg	node [arg_2] ||| [function_1] to dict [arg_2]	count=3
function	arguments have the requested ||| check	count=1
function	for all domains of ||| do challenges	count=1
function	will override those ||| task and variable override	count=1
function	which [function_2] ||| [function_2] [function_1]	count=4
module	config ||| modules network cumulus	count=2
module	in the ||| modules	count=7
class	the main ||| group	count=1
function	on the zone ||| exec	count=1
arg	commands ||| commands	count=3
function	elastic ip is ||| is	count=1
module	overwrites ||| google	count=1
arg	extra bonus feature vmid ||| vmid	count=1
function	enables [function_2] ||| [function_2] [function_1]	count=1
arg	the play host and ||| play host	count=1
function	enables notifications for a ||| enable svc notifications	count=1
function	when ||| fail on	count=1
function	create a default network ||| create default	count=1
arg	'present' if user ||| result_state fail_condition search_params	count=1
module	the system to receive ||| module_utils	count=1
function	wrap script execution with ||| wrap	count=1
function	[function_1] vm ||| [function_2] [function_1]	count=1
function	run update ||| update	count=1
arg	templated during ||| attr value templar	count=1
class	been ||| base	count=1
class	retrieves rule [class_2] ||| [class_1] [class_2]	count=2
function	the privileges ||| privileges	count=2
function	convert ||| convert host	count=1
function	[function_1] by ||| [function_2] [function_1]	count=7
function	the type ||| get interface type	count=2
function	restore ||| restore	count=1
class	main code path ||| clc firewall policy	count=1
function	binary ||| binary	count=1
function	--xmlout repos [function] repo dictionary ||| [function]	count=1
module	equivalent [module] example 'this_function_name' ||| [module]	count=1
function	variables the explicit environment ||| get environment	count=1
function	for all roles in ||| compile roles	count=1
module	all ||| modules cloud amazon	count=3
module	for the ||| modules	count=17
class	handle ||| group	count=1
module	domain name ||| google	count=2
function	[function_1] ids installed ||| [function_2] [function_1]	count=1
function	of a server certificate ||| get server	count=1
function	delete [function_2] ||| [function_2] [function_1]	count=2
function	the updated cache ||| updated cache	count=2
function	add the [function_2] ||| [function_1] [function_2]	count=3
function	on [function_2] ||| [function_1] [function_2]	count=2
function	for dmi related ||| get dmi	count=1
class	we've been ||| base	count=1
module	for a group of ||| modules cloud	count=1
module	a ||| modules cloud rackspace	count=1
arg	remote branch ||| remote	count=1
function	is a text ||| text	count=1
module	request_spot_instances() method for example ||| modules	count=1
class	azure ||| azure rmmodule	count=1
function	policy is removed from ||| policy absent	count=1
function	and performs tilde expansion ||| expand user	count=1
class	container is connected ||| container	count=1
module	registered system ||| os	count=1
class	dictionary or the value ||| stack	count=1
function	module names are ||| module	count=1
function	changes the ||| change instance	count=1
arg	task ||| task	count=3
module	[module_1] [module_2] ||| [module_2] [module_1]	count=71
function	message that ||| message	count=1
class	[class_1] network ||| [class_2] [class_1]	count=2
module	[module] the ||| modules [module]	count=1
function	returns the name of ||| get link name	count=1
function_arg	[function_1] module the ||| [arg_2] [function_1]	count=2
module	objects ||| rackspace	count=1
function	with the request parameters ||| get request with	count=1
arg	all nat ||| client subnet_id allocation_id	count=1
module	given ||| modules	count=1
function	username set the remote ||| remote	count=1
function	returns the items result ||| loop items	count=1
function	the policies for a ||| policies for	count=1
arg	clc ||| clc module alias server_id	count=1
arg	for sending a ||| msg_format color notify	count=1
arg	the given name using ||| name	count=1
function	the currently set locale ||| check locale	count=1
module	true if ||| modules	count=2
class	for registration with rhn ||| rhsm	count=1
arg	server_ids ||| server_ids	count=1
function	volume from the ||| volume	count=1
function	number of newlines ||| newlines	count=1
class	of the server ||| server	count=1
module	status for a ||| modules cloud vmware	count=2
arg	in dict_b return true ||| dict_b	count=1
module	method ||| modules cloud	count=1
arg	installed a second ||| pacman_path name state	count=1
function	prefix ||| prefix	count=1
arg	ec2 instance and return ||| ec2	count=1
module	checks ||| modules storage netapp	count=2
module	a given network ||| plugins	count=1
arg	given flag to ||| flag	count=1
function_arg	[function_1] local ||| [function_1] [arg_2]	count=12
function	wait for the ||| wait for	count=3
arg	user returns true if ||| user	count=1
arg	object prepared ||| container_dn superordinate	count=1
function	level [function_2] ||| [function_1] [function_2]	count=1
arg	name and ||| name	count=1
function	fetch [function_2] ||| [function_1] [function_2]	count=19
module	[module] routes ||| [module]	count=3
module	mysql variable to a ||| mysql	count=1
class	the host we've been ||| connection base	count=1
module	[module_1] later iteration ||| [module_1] [module_2]	count=8
function	is used to schedule ||| schedule servicegroup svc	count=1
function_arg	on the [arg_2] ||| [function_1] cli command cmd [arg_2]	count=1
arg	a yaml ||| file_name	count=1
module_class	[module_1] firewall ||| [module_1] centurylink clc [class_2]	count=1
function	[function_1] pool on ||| [function_2] [function_1]	count=1
module	preserve spaces ||| plugins	count=1
function	set up pyrax ||| rax	count=1
function	state ||| get state	count=1
function	number of newlines at ||| newlines from	count=1
arg	the [arg] ||| [arg]	count=2
module	synchronize all of the ||| modules packaging	count=1
function_arg	[function_1] restriction this ||| [arg_2] [function_1]	count=5
function	search in ||| module	count=1
function_arg	[function_1] arg ||| [function_1] on diff host [arg_2]	count=4
class	[class_1] key ||| [class_2] [class_1]	count=1
function	title ||| failure title from exception	count=2
function	provisioning [function] ||| check provisioning [function]	count=1
arg	password and returns a ||| password	count=1
function	builds a [function_2] ||| [function_1] [function_2]	count=1
function	that a policy is ||| policy is	count=1
function	is present on a ||| on	count=1
module	gpg ||| packaging os	count=1
function	delete ||| delete	count=19
class	the main code path ||| clc firewall policy	count=1
arg	templated ||| attr value templar	count=2
module	previously registered system ||| packaging	count=1
function	[function_1] default ||| azure rmmodule base [function_1] [function_2]	count=1
function	values and there are ||| values	count=1
arg	name of ||| name tag	count=1
function	a text string ||| text	count=1
function	returns the variables ||| get vars	count=1
arg	checking ||| old_parameters new_parameters	count=1
function	overlay repository if not ||| overlay	count=1
function	the alert policy ||| add alert policy	count=2
function_arg	[function_1] [arg_2] the ||| [function_1] inventory basename [arg_2]	count=2
arg	see if original and ||| old_ttl old_record_data new_ttl new_record_data	count=1
function	request ||| get request	count=1
class	ensures ||| public ip	count=2
arg	vars_cache for a host ||| host varname	count=1
function	function [function] ||| rax [function]	count=1
function	on target [function_2] ||| [function_1] [function_2]	count=1
function	complete ||| to complete	count=6
function	class factory ||| handler factory	count=1
module	return ||| modules	count=1
arg	[arg_1] cert_file remains ||| [arg_2] [arg_1]	count=3
arg	to get [arg_2] ||| [arg_1] [arg_2]	count=1
class	data ||| data module	count=1
arg	a folder to cloud ||| folder container	count=1
function	destroy ||| ensure gone	count=1
function_arg	[function_1] arg is ||| [function_1] on diff host [arg_2]	count=4
function	the current ||| current	count=1
module	subscription-manager ||| packaging	count=1
function	of the certificate ||| get ssh certificate tokens	count=1
arg	new params raises notmodifiableerror ||| params immediate	count=1
arg	templated ||| value templar	count=2
module	start ||| modules cloud	count=1
function	proxy [function_2] ||| [function_2] [function_1]	count=5
class	and write it to ||| acmeclient	count=1
arg	query [arg] using ||| [arg]	count=1
class	when a playbook ||| playbook	count=1
class	compatibility when only vars ||| vars	count=1
function	first [function] ||| [function]	count=2
arg	in a datacenter ||| location	count=1
function_arg	clb node [arg_2] ||| [arg_2] [function_1]	count=3
module	copies ||| cloud amazon	count=1
arg	so that the redirecthandler ||| validate_certs	count=1
arg	get current weight ||| backend weight	count=1
arg	individual group ||| group_id cidr_ip	count=1
module	new ttl ||| modules cloud google	count=1
class	[class] in data ||| [class]	count=1
function	run when ||| runner on	count=1
function	size in bytes into ||| size	count=1
arg	ec2 ||| ec2	count=1
module_class	a [class_2] ||| [module_1] [class_2]	count=5
arg	value for the ||| value	count=1
function	containing git ||| git	count=1
function	enabled ||| enabled	count=1
module	a global mysql variable ||| database mysql	count=1
function	the ||| get	count=2
module	been ||| plugins connection	count=2
class	the [class] ||| ansible [class]	count=1
class	set ||| clc group	count=1
function	if changes ||| change	count=1
function	if changes are ||| state change	count=1
function	args ||| args	count=1
module	elb ||| modules cloud amazon	count=2
function	the include line up ||| include	count=1
function	will override those ||| override	count=1
arg	returns expanded ||| func result_key	count=1
class	vars ||| vars	count=1
arg	is sensible ||| sshkeygen	count=1
arg	from local to lxd ||| in_path out_path	count=1
function	system ||| system	count=1
function	find a ||| find loadbalancer	count=1
class	list ||| play iterator	count=1
function	a list of ||| list	count=1
class	this ||| base	count=2
function	the 2 ||| repo	count=1
module	to see if a ||| modules cloud	count=1
module	the shell command ||| modules system	count=1
module	main method ||| modules cloud	count=1
class	to ||| host	count=1
function	unique key ||| key	count=1
function	when a ||| runner on	count=1
class	called when a playbook ||| playbook	count=1
function	downtime for ||| servicegroup svc downtime	count=1
function	service string has ||| services	count=1
module	update ||| modules storage infinidat	count=1
function	snapshots removed ||| server snapshot absent	count=1
arg	the device ||| check_rc	count=1
arg	[arg] by filtering ||| [arg]	count=2
function	path is ||| prefix login path	count=3
arg	given task ||| host task	count=1
function_arg	host [arg_2] ||| [function_1] host [arg_2]	count=4
arg	from application model ||| module account application	count=1
arg	string ||| string	count=1
module	do for ||| connection	count=1
function	name returns ||| get	count=1
function	the lease [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] virtual machine ||| [function_1] [function_2]	count=3
class	pools for ||| pools	count=1
function	create a path ||| create	count=2
module	system ||| modules packaging	count=2
arg	the provided lb ||| lb	count=1
module	filesystem with ||| modules cloud	count=1
function	will first [function] status ||| [function]	count=1
module	output from ||| plugins	count=1
function_arg	requests [arg_2] ||| [arg_2] [function_1]	count=3
function	up the ubuntu ||| ubuntu	count=1
class	get ||| affinity policy	count=1
module	[module_1] new ||| [module_1] [module_2]	count=6
function	group list [function_2] ||| [function_1] [function_2]	count=1
function	around [function] output like ||| filter non [function]	count=1
function	ids from security group ||| ids from	count=1
module	[module] particular ||| [module]	count=1
class	the ||| clc group	count=4
module	retrieve a ||| modules cloud	count=1
function	[function_1] volume ||| [function_2] [function_1]	count=5
module	encrypted ||| parsing	count=1
module	its line ||| playbook	count=1
module	for an amazon ||| modules cloud amazon	count=3
module	/etc/sysconfig/rhn/up2date ||| modules packaging os	count=1
class	the main ||| firewall policy	count=1
class	destination file ||| acmeclient	count=1
arg	events to ||| events data	count=1
module	the destination ||| modules web_infrastructure	count=1
function_arg	list [arg_2] ||| [arg_2] [function_1]	count=2
function	from a [function_2] ||| [function_2] [function_1]	count=2
module	receive ||| modules	count=1
function	need to ||| target ids to remove	count=1
function	a class [function_2] ||| [function_1] [function_2]	count=4
arg	for the play host ||| loader play host	count=1
function	to that group ||| group	count=1
function	[function_1] a text ||| [function_2] [function_1]	count=1
function	a virtual ||| virtual	count=1
function	create the ||| create server	count=1
function	assemble a [function_2] ||| [function_1] [function_2]	count=6
function	fetch a [function_2] ||| [function_2] [function_1]	count=24
function	[function_1] [function_2] id ||| [function_1] [function_2]	count=3
function	the action the user ||| action	count=1
module	[module] state we ||| [module]	count=1
function	set the ||| set	count=9
class	code path and handle ||| clc firewall policy	count=1
function_arg	[function_1] device ||| [function_1] cli command cmd [arg_2]	count=1
module	lxc nothing ||| plugins	count=1
function	run the main method ||| run	count=1
class	a haproxy command by ||| haproxy	count=1
module	start the machine ||| cloud	count=1
function	the volume ||| volume	count=1
function	details about the lun ||| get lun	count=1
function	proxy ||| validate proxy	count=1
function	of the ||| sync	count=1
function	file from lxd ||| file	count=1
arg	folder to cloud files ||| folder	count=1
function	complete if the ||| to complete	count=3
function	convert them into the ||| in	count=1
module	path and handle ||| centurylink	count=3
function	the anti [function_2] ||| [function_1] [function_2] policy	count=1
function	returns parameters used ||| parameters	count=1
module	for the response ||| modules	count=1
function	[function_1] version ||| [function_2] [function_1]	count=8
function	stores them in ||| compile patterns	count=1
function	[function_1] running servers ||| [function_1] [function_2]	count=1
arg	the certificate in cert_file ||| module cert_file	count=1
function	add this device to ||| add	count=1
function	the user that ||| user	count=1
function	to create if missing ||| create	count=1
arg	host and key ||| key	count=1
module	from ||| module_utils	count=2
module	here ||| plugins	count=7
module	check for [module_2] ||| [module_1] [module_2]	count=4
function	are set ||| set task and variable	count=1
module	elasticache parameter ||| amazon	count=1
arg	json representation of an ||| class_name enum_modules	count=1
arg	know if data ||| data	count=1
class	with ||| base	count=1
function	public ip removed if ||| public ip absent	count=1
function	stop the [function_2] ||| [function_1] [function_2]	count=2
function	[function_1] port where ||| [function_2] [function_1]	count=1
function	values it ||| values	count=1
function	recreate [function_2] ||| [function_1] [function_2]	count=4
function_arg	be a noop [function_1] [arg_2] ||| [function_1] lockstep hosts [arg_2]	count=4
class	ansible module implements are ||| manager	count=1
class	public key ||| public key	count=1
function	to the ||| to	count=2
module	all of ||| modules	count=1
arg	events ||| events	count=1
function_arg	[function_1] [arg_2] ||| [function_1] changed [arg_2]	count=8
function	create a default security ||| create default securitygroup	count=1
function	to add a group ||| add	count=1
function	facts ||| facts	count=6
function	configuration matches the required ||| config	count=1
module	[module] helper ||| [module]	count=3
module	installs ||| packaging os	count=2
class	main method ||| management	count=1
arg	dirname ||| dirname source	count=1
class	and handle the ||| clc load balancer	count=1
function	keys the value ||| keys	count=1
function	code path and handle ||| process	count=3
module	extracts a ||| modules net_tools basics	count=1
arg	for idempotency using the ||| cli	count=3
module	it to ||| modules	count=1
function	[function_1] mounted ||| [function_2] [function_1]	count=2
class	in ||| module args	count=1
function	different and ||| has different	count=1
function	convert them into ||| in	count=1
function_arg	[function_1] provided lb ||| [arg_2] [function_1]	count=4
function	de-register the instance ||| deregister	count=1
module	the connection nothing to ||| connection	count=6
arg	set of events ||| fileobj events	count=1
function	with data from ||| set	count=1
module	commit ||| cloud amazon	count=1
function	or add a ||| add	count=1
module	entry point [module_2] ||| [module_1] [module_2]	count=9
function	get the selinux ||| semanage	count=1
module	the power status for ||| modules	count=1
function_arg	of [arg_2] ||| [function_1] [arg_2]	count=2
module	string ||| database mysql	count=1
function_arg	start of [arg_2] ||| [function_1] [arg_2]	count=1
class	execute the main ||| clc load	count=1
function	[function_1] when executing ||| [function_2] environment [function_1]	count=1
function	a zone by name ||| zone by name	count=1
class	provided rhsm ||| rhsm	count=1
module	and handle ||| modules cloud	count=3
module	previously ||| modules packaging	count=1
class	execute ||| load balancer	count=2
function	import certificate ||| import cert path	count=1
function	encrypted data ||| encrypted	count=1
arg	[arg_1] vars_cache for ||| [arg_2] [arg_1]	count=4
function	get [function_2] ||| [function_1] [function_2]	count=5
class	path and handle ||| clc load	count=1
function	proxy [function_2] ||| [function_1] [function_2]	count=5
function	[function_1] file ||| [function_1] inventory [function_2]	count=1
class	main ||| container management	count=1
arg	the hosts in the ||| arg	count=1
arg	host line to see ||| line	count=1
module	return information from ||| modules cloud	count=1
function_arg	[function_1] in clc ||| [arg_2] [function_1]	count=3
function	overridden groupby ||| do groupby	count=1
function	[function_1] value associated ||| [function_2] [function_1]	count=1
function	run when a ||| on	count=1
module	capture the ||| modules cloud	count=1
arg	servicegroup ||| servicegroup	count=3
function	results ||| pending results	count=1
function	[function] <name>01 to ||| create [function]	count=1
function	[function_1] from aws ||| [function_2] [function_1]	count=4
function	used to identify ||| transport	count=1
function	variables set on the ||| set	count=1
class	the base ||| base	count=1
function	is in [function_2] ||| [function_1] [function_2]	count=1
module	it to self ||| modules system	count=1
module	must be called ||| compat selectors	count=1
arg	from lxc to local ||| in_path out_path	count=1
class	the host ||| host	count=2
function	[function_1] and create ||| [function_2] [function_1]	count=1
module	a previously ||| os	count=1
module	with ||| connection	count=1
function	[function] output ||| filter non [function]	count=1
arg	wrapper to ||| method	count=1
function_arg	security [function_1] [arg_2] security group names are ||| [function_1] [arg_2]	count=2
function	[function_1] loads the ||| [function_2] [function_1]	count=6
function	checks that don't ||| check	count=1
module	for example ||| modules cloud	count=1
function	given firewall [function_2] ||| [function_2] [function_1]	count=3
function	on start of ||| v2 playbook on play start	count=1
class	paginated ||| service manager	count=2
function	[function_1] boot volume ||| [function_1] [function_2]	count=1
function_arg	copies the [arg_2] ||| [function_1] [arg_2]	count=3
function_arg	user [arg_2] ||| [arg_2] [function_1]	count=3
module	return from ||| module_utils	count=1
module	synchronize all ||| packaging	count=1
function_arg	[function_1] particular service ||| [function_1] [arg_2]	count=4
function	hide or [function] login window ||| update system [function]	count=1
function	set the named ||| named	count=1
function	a dictionary of information ||| dict	count=1
arg	be fulfilled ||| ec2 spot_requests count	count=1
module	obj are a ||| parsing	count=1
class	of an azure ||| azure rmmodule	count=1
arg	by id or name ||| module rax_module	count=1
function_arg	to a [arg_2] ||| [function_1] server [arg_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] client stream_name [arg_2]	count=9
arg	each bond ||| _bondmems	count=1
arg	reach a status args ||| client wait_timeout nat_gateway_id status	count=1
function	if file is ||| file	count=1
function	on target [function_2] ||| [function_2] [function_1]	count=1
class	runs the task with ||| task executor	count=1
function	subdivided into [function] based ||| get serialized [function]	count=1
class	fetch ||| galaxy api	count=1
function_arg	[function_1] the value ||| [function_1] key [arg_2]	count=1
function	dict from [function_2] ||| [function_1] [function_2]	count=1
module	filter ||| modules files	count=1
function	[function_1] module names ||| [function_2] [function_1]	count=2
arg	gce ||| gce name	count=1
module	the main method ||| cloud	count=1
function	privileges ||| privileges	count=4
module	set ||| network nxos	count=1
class	method ||| lxc container	count=1
function	run sanity [function_2] ||| [function_1] [function_2]	count=4
function	delete a backend service ||| delete backend service	count=1
function	present on [function_2] ||| [function_2] [function_1]	count=2
module	to the lxc nothing ||| connection	count=1
function	recreate tags from a ||| recreate tags from	count=1
function	hash b ||| hash	count=1
function	get [function_2] ||| [function_2] [function_1]	count=6
function	the type of ||| type	count=2
function	on the docker host ||| exec	count=1
arg	[arg_1] the command ||| [arg_1] base [arg_2]	count=1
function	wrap script execution with ||| wrap for exec	count=1
class	to the host we've ||| connection	count=1
module	parse ||| database postgresql	count=1
function	git ||| git	count=2
module	sees a dash ||| modules network cumulus	count=4
function	information about a ||| info	count=1
class	method for all command ||| cli	count=1
module	the system to ||| module_utils	count=1
class	to ||| base	count=1
class	the task with ||| task executor	count=1
function	fetch the list ||| list	count=1
module	filter ||| modules utilities logic	count=1
arg	key_id as supplied ||| key_id	count=1
module	handle ||| cloud centurylink	count=6
function	ids from ||| ids from	count=1
module	return details about ||| netapp	count=1
function	start ||| play start	count=1
function	[function_1] balancer as ||| [function_2] [function_1]	count=1
function	a policy is ||| ensure policy is	count=2
function	currently set locale ||| check locale	count=1
arg	bond ||| _bondmems	count=1
function	return a temporary ||| tmp	count=1
arg	vm determined ||| vm state	count=1
function	id looked ||| id	count=1
arg	uploads a folder to ||| folder container	count=1
function	from remote [function_2] ||| [function_1] [function_2]	count=1
module	to ||| plugins	count=12
function	[function_1] [function_2] ||| azure rmmodule base [function_1] [function_2]	count=4
module	on the [module_2] ||| [module_1] [module_2]	count=4
function	with_* portion of a ||| get loop	count=1
function_arg	[function_1] [arg_2] names are not unique ||| [function_1] names [arg_2]	count=3
arg	cert_file remains valid and ||| cert_file	count=1
function	[function_1] policy exists ||| [function_2] [function_1]	count=3
module	updates ||| modules web_infrastructure ansible_tower	count=1
function	subdivided into [function] based on ||| get serialized [function]	count=1
module	via the given ||| modules cloud	count=1
module	nothing to ||| connection	count=8
function	error ||| error lines	count=1
function_arg	[function_1] [arg_2] ||| [function_1] [arg_2] linux_mounts	count=8
class	the module ||| ansible module	count=1
function	the selinux ||| semanage fcontext	count=1
function	[function_1] machine ||| [function_2] [function_1]	count=6
function	configure the ||| configure	count=1
class	actual selection until some ||| base	count=1
arg	[arg_1] zone ||| [arg_2] [arg_1]	count=1
function_arg	[function_1] from group_vars/<groupname> ||| [arg_2] [function_1]	count=1
module	for a service to ||| modules net_tools	count=1
function	specific type example of ||| type	count=1
class	to the host we've ||| base	count=1
function	[function_1] containing host ||| [function_2] [function_1]	count=1
module	return ||| module_utils	count=22
function	management html page ||| page	count=1
function	is currently installed ||| is present	count=2
class	code path ||| clc firewall policy	count=1
class	execute the ||| clc firewall	count=1
function	creates new [function_2] ||| [function_1] [function_2]	count=1
function	process ||| process	count=7
class	[class] cluster note ||| elasti [class]	count=2
function	mounted ||| mounted	count=1
arg	if the name of ||| name tag	count=1
function	a file from lxd ||| file	count=1
function	systems including all attributes ||| systems	count=1
arg	individual ||| group_id cidr_ip	count=1
module	reads ||| modules system	count=1
module	execution ||| network eos	count=1
class	if an anti ||| anti	count=1
function	goal [function] ||| [function] quote	count=3
arg	pip command to ||| module pip chdir	count=1
module	for a ||| modules cloud vmware	count=2
class	main code path ||| load balancer	count=1
function	code from ||| code from	count=2
class	details about the ||| net app	count=1
arg	the module parameters ||| module	count=1
module	return from the ||| module_utils	count=1
arg	vars ||| vars	count=1
function	the path of ||| get dhcp	count=1
function	generate a [function_2] ||| [function_1] [function_2]	count=2
arg	module ansible module object ||| module ec2	count=1
function_arg	pool or ||| pool module system	count=1
function_arg	boot volume [arg_2] ||| [function_1] [arg_2]	count=1
class	the server based on ||| server	count=1
module	the connection ||| connection	count=8
class	an anti affinity ||| anti affinity	count=1
function	wait argument is ||| wait	count=3
function	balancer management html page ||| fetch balancer page	count=1
function	size in bytes into ||| disk size	count=1
function	[function_1] host patterns ||| [function_2] [function_1]	count=1
function	lists filtered based on ||| tagged tasks	count=1
function	override post ||| post	count=2
arg	plays are run ||| arg	count=2
function	default security group ||| default securitygroup	count=1
function	title ||| title from exception	count=2
function	at the end of ||| from end	count=1
function	servers on ||| servers	count=2
module	checks if ||| storage netapp	count=1
function	import ||| create import task	count=2
module_class	return hex digest ||| module_utils ansible module	count=1
function	config [function_2] ||| [function_2] [function_1]	count=1
module	for an account ||| modules cloud	count=1
arg	include the permissions ||| permissions	count=1
function	for module error title ||| title	count=1
module	false otherwise ||| database postgresql	count=1
class	path ||| policy	count=1
function	api ||| api	count=2
arg	follow_redirects [arg_2] ||| [arg_1] [arg_2]	count=1
function	the destination ||| get	count=1
function	start the machine ||| start	count=1
function	string used to identify ||| transport	count=1
function	status of a stack ||| stack	count=1
function	dmi related ||| get dmi	count=1
function	block device mapping ||| block device mapping	count=6
function	with_* portion of a ||| get	count=1
function	lookup a container ||| get container	count=1
class	runs the task ||| task	count=1
function	delete the [function_2] ||| [function_2] [function_1]	count=2
function	used when executing the ||| compute	count=1
function	default network ||| default nic	count=1
function	event ||| event	count=3
arg	set of events to ||| fileobj events data	count=1
arg	rt_list ||| rt_list	count=1
function_arg	[function_1] if name ||| [arg_2] [function_1]	count=2
function	[function] security group ||| [function] security group ids	count=1
arg	each bridge member if ||| _bridgemems	count=1
function_arg	the loop [arg_2] ||| [function_1] [arg_2]	count=3
module	for the pool and ||| modules cloud	count=1
function_arg	[function_1] response ||| [arg_2] [function_1]	count=2
class	execute the main code ||| clc group	count=1
arg	[arg_1] host and ||| [arg_1] [arg_2]	count=4
class	the ||| clc load	count=2
arg	registered ||| fileobj	count=1
function	system [function_2] ||| [function_1] [function_2]	count=1
function	copies the module ||| transfer	count=1
module	return details about the ||| storage	count=1
class	in the metadata ||| role metadata	count=1
module	to lxd ||| connection	count=1
function	if [function_2] ||| [function_2] [function_1]	count=2
function	repo removes old ||| repo	count=1
module	a single object ||| modules cloud	count=1
module	if certificate with alias ||| modules system	count=1
function	to import a ||| import	count=1
function_arg	[function_1] server ||| [function_1] aa policy present [arg_2]	count=1
function	de-register ||| deregister	count=1
function	is bind mounted ||| is bind mounted	count=1
function	creates ||| create record	count=2
function	without the subscript and ||| subscript	count=1
class	execute ||| clc	count=3
arg	remote branch ||| git_path module dest remote	count=1
function	the required_together argument to ||| rax required together	count=1
arg	the desired ||| timeout cloud	count=1
class	a server ||| clc server	count=1
function	from a ||| from	count=4
function	limitations [function] ||| [function]	count=1
arg	vpc when ||| vpc	count=1
function_arg	keys [arg_2] ||| [arg_2] [function_1]	count=1
function	machine via the ||| create	count=1
function	desired version example ||| version	count=1
arg	if value is a ||| value	count=1
module	returns a list ||| modules cloud amazon	count=2
class	selection until some ||| base	count=1
function	the policies for ||| policies for	count=2
function	get the latest version ||| get repository version	count=1
function	the device ||| device	count=1
function_arg	[function_1] [arg_2] ||| [function_1] version [arg_2]	count=2
arg	dest ||| dest src	count=1
function	library supports ||| supports	count=1
arg	on [arg_2] ||| [arg_1] base [arg_2]	count=1
function	changes are ||| system state change	count=1
class	and ||| acmeclient	count=1
function	that need to ||| to	count=1
function	generic logic to get ||| get	count=2
function	on ||| v2 playbook on play	count=1
function	have the requested values ||| check argument values	count=1
function	groups ||| groups	count=2
module_class	for all [class_2] ||| [module_1] [class_2]	count=2
arg	for the key (of ||| key	count=1
class	makes sure ||| anti affinity	count=1
class	play ||| play	count=3
function	device mapping ||| device mapping	count=4
function	[function_1] difference between ||| [function_1] [function_2]	count=1
function	checks that ||| checks	count=1
function	return changed [function_2] ||| [function_1] [function_2]	count=1
function	module names ||| split module	count=1
function	[function_1] instance ||| [function_2] [function_1]	count=1
function_arg	[function_1] clc ||| [arg_2] [function_1]	count=12
module	the ||| packaging	count=2
arg	host to have ||| propertyhash	count=1
function	differences) ||| has different configuration	count=1
module	get ||| packaging os	count=2
function	virtual [function_2] ||| [function_1] [function_2]	count=3
function_arg	[function_1] ssh-key options ||| [function_1] [arg_2]	count=1
function	gets the type of ||| interface type	count=2
arg	service name ||| name	count=3
function	block device mapping from ||| block device mapping	count=2
function	as a group ||| group	count=1
module	a string for later ||| modules web_infrastructure	count=1
class	a task ||| task executor	count=1
function	the image ||| image	count=1
module	[module] ansible ||| [module]	count=5
module	to receive updates from ||| os	count=1
arg	the ec2 instance and ||| ec2	count=1
module_class	all [class_2] ||| [class_2] [module_1]	count=1
function	are set which ||| set task	count=1
class	main code path and ||| firewall	count=1
function	wait for the ||| wait	count=2
function	validation ||| validate environment	count=2
module	function ||| modules	count=1
function	datacenter ||| datacenter	count=2
arg	the given value ||| value num_items min_value	count=1
function	[function_1] retry the ||| [function_1] [function_2]	count=1
function	existing targets ||| targets	count=1
arg	found fail module ||| module system	count=1
function	paths you should search ||| search path	count=1
function	stack while it is ||| stack	count=1
function	start of ||| play start	count=1
function	boto library supports encryption ||| boto supports volume encryption	count=1
class	an ||| task parameters	count=1
function	wait for the nat ||| wait for status	count=1
function	[function_1] mount ||| [function_1] [function_2]	count=1
function	from ||| from	count=12
function	schedule ||| schedule host svc	count=1
arg	cli command on the ||| module cli	count=7
module	and write it ||| web_infrastructure	count=1
function	role or ||| role	count=1
function	import request ||| create import task	count=1
function_arg	uuid [function_1] [arg_2] ||| [function_1] original task [arg_2]	count=3
class	from ||| rhsm	count=3
function	of newlines at the ||| count newlines	count=1
arg	is sensible host ||| sshkeygen	count=1
module	to receive updates ||| os	count=1
function_arg	[function_1] provided pool ||| [function_1] [arg_2]	count=3
arg	dirname ||| dirname source is_role	count=1
class	the process is started ||| process	count=1
arg	name using arguments ||| name	count=1
class	validation that [class] done at ||| [class]	count=1
function	return the ||| get	count=4
arg	for a kinesis stream ||| client stream_name	count=1
function	that ttl is ||| ttl	count=1
class	rhn ||| rhn	count=1
function	class factory ||| redirect handler factory	count=2
arg	value for [arg_2] ||| [arg_2] [arg_1]	count=6
module_class	return a module ||| module_utils base module	count=1
arg	google libcloud driver ||| module provider get_driver user_agent_product	count=1
function	a remote checksum given ||| remote checksum	count=1
function	results off the ||| results	count=1
module	value for a specific ||| modules	count=1
function	a default network interface ||| default	count=1
function	will override those from ||| and variable override	count=1
function	[function_1] hostnames for ||| [function_2] [function_1]	count=1
function	read ||| read	count=9
function	from a directory ||| from	count=2
function	name ||| create file system	count=1
function	to get the ||| get	count=2
function	to [function_2] ||| [function_1] [function_2]	count=2
function	and create ||| and create	count=2
module	present for ||| modules cloud google	count=1
function	to add a ||| add	count=1
arg	whether the dest ||| dest src	count=1
module	main ||| cloud lxc	count=2
function	and get [function_2] ||| [function_1] [function_2]	count=3
function	assignment of the documentation ||| get	count=1
module	to ||| connection	count=11
function	the ip ||| api ip	count=1
arg	from the task ||| task variables templar	count=1
function	boot ||| boot	count=1
function	from log ||| heuristic log sanitize	count=2
function	in old-style (action/local_action) ||| old style args	count=1
module	to lxd nothing ||| connection	count=1
class	the ||| firewall policy	count=4
module	uses 0/1 integer ||| module_utils	count=1
module	deactivate ||| packaging os	count=1
module	for later ||| modules web_infrastructure	count=4
function	the days the certificate ||| days	count=1
function	argument spec ||| argument spec	count=10
function	return an object by ||| get obj	count=2
module	for registration ||| modules packaging os	count=1
function	and/or attributes return true ||| user alter	count=1
function	find ||| find	count=11
function_arg	named ports [arg_2] ||| [function_1] [arg_2]	count=2
function	class factory that ||| handler factory	count=1
function	will create a new ||| create	count=1
function	human ||| human	count=1
module	the shell ||| modules system	count=1
function	getting univention admin objects ||| umc admin objects	count=1
arg	pool ||| lb_id pool_id	count=1
function	create a ||| create rule	count=1
class	and handle ||| load	count=1
function	of device returns ||| get dev	count=1
arg	user if the host ||| host	count=1
module	if [module_2] ||| [module_2] [module_1]	count=1
arg	git repo ||| git_path	count=1
arg	depending on the existence ||| name cidr_block	count=1
function	take a privileges ||| privileges	count=1
module	[module_1] a group ||| [module_1] [module_2]	count=4
class	path and ||| clc load balancer	count=1
function	to write ||| write	count=1
class	selector ||| selector	count=1
arg	path into ||| path	count=1
function	import a ||| import	count=1
module	filter ||| files	count=1
function	[function_1] for ||| [function_2] [function_1]	count=3
module	action ||| plugins action	count=1
module	and write ||| web_infrastructure	count=1
class	system to receive updates ||| rhsm	count=2
function	set ||| set task and	count=1
arg	and ||| module cmd	count=1
function	updated cache time ||| updated cache time	count=3
function	that a policy ||| policy	count=1
arg	a path ||| path all_vars	count=1
class	[class_1] module ||| [class_2] [class_1]	count=4
module	lxc ||| modules cloud lxc	count=2
arg	set of events ||| events	count=1
function	checks that don't depend ||| check	count=1
module	for a specific ||| modules system	count=1
arg	of interface args ||| interface	count=2
function	creates a pool on ||| create loadbalancerpool	count=1
function	[function_1] packages ||| [function_2] [function_1]	count=1
class	via ||| virt	count=1
function	override post validation for ||| post validate	count=1
arg	script ||| vault_password_file loader	count=1
module	we've been initialized ||| plugins	count=1
function	metadata ||| metadata	count=1
function	parameters ||| params	count=1
class	galaxy api ||| galaxy	count=1
function_arg	nodes to [arg_2] ||| [function_1] alias location [arg_2]	count=1
function	tags ||| tags	count=2
arg	[arg_1] datacenter ||| [arg_1] [arg_2]	count=1
class	in aws ||| cloud watch event	count=3
module	overwrites [module_2] ||| [module_2] [module_1]	count=1
function	compare the json ||| compare get	count=1
function	find a rule ||| find matching rule	count=1
function_arg	mounted [arg_2] ||| [function_1] [arg_2]	count=3
arg	string containing ssh-key options ||| module options	count=1
function	have the ||| check argument	count=1
function	a deploy ||| deploy	count=1
module	extracts [module_2] ||| [module_2] [module_1]	count=1
function	to the destination file ||| get	count=1
module	for a ||| modules	count=2
function	delete a managed instance ||| delete	count=1
function	the required_together argument ||| infinibox required together	count=1
class	an existing network ||| docker network	count=1
module	for ||| modules cloud amazon	count=9
function	[function_1] removed ||| [function_2] [function_1]	count=10
function	if changes are required ||| change	count=1
function	path if a path ||| path	count=3
function	group to is ||| group	count=1
function	to ||| to	count=12
arg	individual group rule ||| prefix rule group_id cidr_ip	count=1
arg	[arg_1] value ||| [arg_2] [arg_1]	count=2
arg	be templated ||| value templar	count=1
function	the argument [function_2] ||| [function_2] [function_1]	count=5
module	associate with [module] network ||| [module]	count=1
function	set instance variables based ||| set	count=1
class	main code path ||| balancer	count=1
function	[function_1] info entry ||| [function_1] [function_2]	count=4
module	execution ||| modules network ordnance	count=1
function	id [function] ||| aa policy id [function]	count=3
arg	given facts for a ||| facts	count=2
arg	[arg_1] a datacenter ||| [arg_1] [arg_2]	count=1
function	message [function_2] ||| [function_1] [function_2]	count=4
function_arg	list of [arg_2] ||| [function_1] [arg_2]	count=1
arg	templated specially in ||| attr value templar	count=1
function_arg	id [function_1] [arg_2] ||| id [function_1] server [arg_2]	count=2
function	a file over ||| file	count=1
function	[function_1] protocol policy ||| [function_2] [function_1]	count=1
arg	that look like passwords ||| data no_log_values	count=1
function	[function_1] mapping from ||| [function_2] [function_1]	count=6
function	[function_1] the compatibility ||| [function_1] [function_2]	count=1
class	execute ||| policy	count=1
class	attributes for this ||| base	count=1
arg	characters :arg characters a ||| characters	count=1
arg	takes a username ||| username	count=1
function	helper method to group ||| group	count=1
module	the host we've ||| connection	count=1
module	idemopotent ||| monitoring	count=1
module_class	[module_1] elb ||| [module_1] [class_2]	count=2
arg	the server ||| server_id	count=1
function	module error title ||| failure title	count=1
function	return changed ||| get changed	count=1
arg	text ||| text	count=3
function_arg	list [arg_2] ||| [function_1] [arg_2]	count=2
module	to receive updates from ||| modules	count=1
function	parse it [function_2] ||| [function_2] [function_1]	count=4
function	method returns the name ||| name	count=1
function	alert policy exists ||| alert policy exists	count=2
arg	filepath ||| filepath	count=1
arg	of the given value ||| value	count=1
function	state of ||| get state	count=2
function_arg	dict_a [arg_2] ||| [arg_2] [function_1]	count=3
function_arg	[function_1] account ||| [function_1] [arg_2]	count=5
class	idemopotent function to ||| host	count=1
class	from the play ||| play	count=1
arg	templated during the regular ||| value templar	count=1
function	they are set ||| set task and	count=1
arg	otherwise converts [arg] ||| [arg]	count=1
function	is different ||| different	count=1
function	path is relative then ||| login path	count=3
function	credentials on the ||| credentials	count=7
function	[function] policy ||| [function] anti affinity policy	count=3
function	of waiting on and ||| get poller	count=1
module	overwrites a ||| modules cloud google	count=2
function	of the options_vars ||| options vars	count=1
arg	registered file ||| fileobj	count=1
function	configuration ||| config	count=6
class	main code path and ||| clc firewall policy	count=1
module	previously registered system ||| modules packaging	count=1
function	all domains ||| do challenges	count=1
function	by ||| id	count=1
arg	desired state ||| timeout cloud	count=1
class	an anti ||| anti	count=1
arg	bridge ||| _bridgemems	count=1
arg	[arg_1] datacenter ||| [arg_2] [arg_1]	count=1
function	cli syntax ||| publish	count=1
function_arg	[function_1] cli command ||| [arg_2] [function_1]	count=7
class	an azure ||| azure	count=2
function	[function_1] the device ||| [function_2] [function_1]	count=5
function	[function] of an ||| sysv [function]	count=1
class	the server based on ||| clc modify server	count=2
module	host ||| plugins connection	count=2
arg	lxc to local ||| in_path out_path	count=1
function	load the requested ||| load	count=1
arg	password and ||| password	count=1
arg	in a datacenter ||| location firewall_policy_id	count=1
function	of a ||| get vars	count=1
function	it's ||| check	count=1
function	cluster ||| cluster	count=2
module	a ||| os	count=1
function	on start of the ||| v2 playbook on play start	count=1
function_arg	remote user [arg_2] ||| [function_1] [arg_2]	count=2
function	wait for the nat ||| wait for	count=1
class	in ||| module	count=4
arg	host and [arg_2] ||| [arg_1] [arg_2]	count=1
function	matching items in both ||| intersect items	count=1
class	a previously registered system ||| rhn	count=1
class	method ||| rmmodule base	count=1
arg	an ||| client	count=1
function	[function_1] [function_2] ||| [function_1] inventory [function_2]	count=2
module	based on mode args ||| modules network nxos	count=1
module	or overwrites [module_2] ||| [module_1] [module_2]	count=1
function	lowercase ||| lowercase	count=1
function	atomically move ||| atomic move	count=1
module	synchronize all of ||| packaging os	count=1
arg	the given xml ||| xml	count=1
function	[function_1] of ||| [function_2] loadbalancer [function_1]	count=1
module	delete an amazon ||| modules cloud amazon	count=4
function	the branch ||| branch	count=1
function	policies ||| backend policies	count=1
function	closes ||| close	count=1
class	task if specified ||| task	count=1
function	from remote [function_2] ||| [function_2] [function_1]	count=1
class	data ||| data loader	count=1
function_arg	[function_1] pattern ||| [arg_2] [function_1]	count=2
class	the main ||| lxc container	count=1
function	all of the ||| sync	count=1
function	find a ||| rax find	count=2
arg	clc ||| clc module svr_uuid alias	count=1
function	variables the explicit environment ||| environment	count=2
module	retrieves ||| modules cloud amazon	count=2
function_arg	[function_1] is templated ||| [function_1] [arg_2]	count=4
module	method ||| modules cloud lxc	count=2
function	reads a string ||| parseoptions	count=1
function	test if ||| test	count=1
arg	desired value returned by ||| value timeout	count=1
function	up the ubuntu ami ||| ubuntu ami	count=1
function	boto library supports ||| boto supports	count=1
function	custom stat ||| update custom	count=1
function	[function_1] remote sources ||| [function_1] [function_2]	count=1
function	[function] returned from ||| find server [function] w	count=1
function	[function_1] from ||| [function_2] aws [function_1]	count=2
function	[function_1] value ||| [function_1] [function_2]	count=1
function	check connection to ||| check	count=1
module	all of ||| packaging	count=1
module	with ||| plugins connection	count=2
module	the device ||| plugins	count=1
class	code ||| clc	count=3
module	all of the ||| os	count=1
function	the with_* portion of ||| get	count=1
arg	and changed ||| changed	count=1
arg	return full ||| gitinfo	count=1
function	when we ||| fail on missing	count=1
function	days ||| cert days	count=1
arg	each bridge ||| _bridgemems	count=1
class	[class_1] network ||| [class_1] [class_2]	count=2
function	level shell ||| level execute	count=2
module	the machine ||| misc	count=1
function	state ||| instance state	count=2
arg	the data ||| data	count=3
module	the names ||| modules cloud	count=1
function	hide or [function] ||| update system [function]	count=1
arg	task vars ||| vars	count=1
function	--xmlout repos [function] ||| [function]	count=1
function_arg	[function_1] typetalk ||| [arg_2] [function_1]	count=2
function	update ||| update export	count=2
module	removes metadata ||| rackspace	count=1
arg	[arg_1] and task ||| [arg_1] [arg_2]	count=5
function	the anti affinity ||| get aa	count=1
class	code path and ||| clc load balancer	count=1
class	[class_1] in ||| [class_2] [class_1]	count=9
function	the environment [function_2] ||| [function_1] [function_2]	count=4
module	main code path and ||| cloud	count=3
function_arg	[function_1] value ||| [function_1] key [arg_2]	count=1
function	temporary ||| make tmp	count=1
arg	attributes from the task ||| task variables	count=1
arg	run ||| in_data sudoable	count=8
function	the error did not ||| error lines	count=1
function	the key ||| key	count=2
function	the given ||| create	count=1
module	system as directed for ||| module_utils	count=1
function	[function] repo ||| [function]	count=3
module	return will be false ||| module_utils	count=1
function_arg	schedule downtime [arg_2] ||| [function_1] [arg_2]	count=1
function	the port where this ||| port	count=1
module	index and [module_2] ||| [module_1] [module_2]	count=2
function	supports multiplexing ||| close	count=1
arg	task auth parameter ||| auth	count=1
arg	if value ||| value	count=1
class	the main code ||| clc firewall policy	count=1
arg	uploads a folder ||| folder container ttl	count=1
arg	but retry priorrequestnotcomplete errors ||| retry_interval wait wait_timeout	count=1
function	installer [function_2] ||| [function_1] [function_2]	count=1
class	of the handler ||| handler	count=1
class	host we've been ||| connection	count=1
function	[function] file ||| execute [function]	count=2
function	that need to be ||| remote target ids to	count=1
function	device mapping from ami ||| device mapping	count=2
function	[function_1] requests to ||| [function_1] [function_2]	count=3
module_class	[module_1] [class_2] ||| [module_1] cloud watch event [class_2]	count=1
function_arg	id [arg_2] ||| [function_1] [arg_2]	count=4
module	correctly set the power [module_1] [module_2] ||| [module_1] [module_2]	count=1
function	[function] policy ||| get [function] policy id by	count=5
function	if a path ||| prefix login path	count=3
function	[function_1] checks ||| [function_2] [function_1]	count=2
function	changed items ||| changed items	count=2
function	returns [function_2] ||| [function_1] [function_2]	count=2
arg	a folder to ||| cf folder container ttl	count=1
arg	directory ||| temp_dir	count=1
class	paginated ||| formation service manager	count=1
arg	a user returns true ||| user	count=1
module	to linode ||| cloud linode	count=1
class	handle ||| policy	count=1
module	route table has all ||| amazon	count=1
function_arg	[function_1] pool on ||| [function_1] [arg_2]	count=1
arg	url returns ||| url	count=1
function	changes are required ||| change	count=1
function	ensure all arguments have ||| check argument	count=1
arg	[arg_1] 'absent' if ||| [arg_2] [arg_1]	count=3
function	reference on target ||| pubnub	count=1
function	hex digest of ||| digest from	count=1
function	value associated with ||| value	count=1
class	we've been ||| connection	count=1
arg	the service name ||| name	count=3
function	to add ||| add host	count=1
module	if the device supports ||| plugins	count=1
arg	vm directly from ||| vm	count=1
class	and ||| clc load balancer	count=2
arg	on the subscript ||| subscript	count=1
module	host we've ||| plugins connection	count=1
function	and make the keys ||| keys	count=1
function_arg	[function_1] a path ||| [arg_2] [function_1]	count=4
function	and tries to parse ||| parse	count=1
class	dimension data [class_2] ||| [class_1] [class_2]	count=2
function	is used to write ||| write	count=1
function	alert policy ||| alert policy	count=12
function	named ports ||| named ports	count=1
arg	clc ||| clc alias server_id	count=1
module	write it to ||| modules web_infrastructure	count=1
class	we've been ||| connection base	count=1
function	get ||| get local	count=1
arg	the module ||| module secgroup remotegroup	count=1
class	until server provisioning ||| modify server	count=1
module	netvisor ||| modules network netvisor	count=5
function_arg	containers via [arg_2] ||| [arg_2] [function_1]	count=1
function	a new certificate and ||| get certificate	count=1
function	[function_1] [function_2] used : env cwd ||| core [function_1] [function_2]	count=1
arg	templated during the regular ||| attr value templar	count=1
arg	tags ||| tags	count=2
class	azure ||| azure	count=1
class	the main ||| load	count=1
function	resource limits ||| resource limits	count=1
function	the items result ||| loop items	count=1
module	execute ||| cloud	count=3
class	main ||| clc firewall policy	count=2
function	rule in ||| rule	count=1
function	the user ||| user	count=1
module	for autoscale ||| modules cloud	count=1
function	[function_1] key ||| [function_1] [function_2]	count=1
arg	the filepath ||| filepath	count=1
module	the system ||| packaging	count=1
function	the with_* portion of ||| get loop	count=1
function	user ||| user	count=4
function	write ||| get	count=1
module	execution ||| network ordnance	count=1
function_arg	plugin [arg_2] ||| [function_1] name [arg_2]	count=1
function	keys the ||| keys	count=1
module	to the destination file ||| web_infrastructure	count=1
arg	value true_val ||| value true_val	count=2
module	an [module_2] ||| [module_1] [module_2]	count=10
function	in old-style (action/local_action) ||| old style	count=1
class	a ||| rhn	count=1
class	subscribed channels ||| rhsm	count=1
module	google cloud ||| cloud google	count=1
class	execute the ||| group	count=1
function	list of host task ||| get	count=1
arg	of recs[ref][key] ||| recs key filter_func	count=1
function	block [function_2] ||| [function_2] [function_1]	count=8
arg	patterns ||| patterns	count=1
function	exists on the ||| exists	count=1
function	not map to attributes ||| validate attributes	count=1
function	extensions to load ||| extensions	count=1
module	correctly set the power [module_1] [module_2] ||| [module_1] [module_2] vmware power state	count=1
arg	splits the ||| ds new_ds k v	count=1
function	has a proxy ||| proxy	count=1
function	[function_1] factory that ||| [function_1] [function_2]	count=4
arg	[arg_1] clc cloud ||| [arg_2] [arg_1]	count=1
function	transfer a [function_2] ||| [function_1] [function_2]	count=12
class	initialized with ||| connection base	count=1
arg	user returns true ||| user	count=1
arg	of events ||| events	count=1
module	for a ||| modules cloud amazon	count=4
function_arg	state if [arg_2] ||| provisioning [function_1] [arg_2]	count=1
module	in a ||| cloud docker	count=1
function	synchronize all of the ||| sync	count=1
function	[function_1] retry ||| [function_1] [function_2]	count=1
class	json group object for ||| logic monitor	count=1
function	the file ||| file	count=2
function	start the machine via ||| create	count=1
module	of ||| packaging os	count=3
arg	with a registered file ||| fileobj	count=1
function	read a [function_2] ||| [function_1] [function_2]	count=8
function	list of nodes ||| nodes	count=1
arg	playbook specifies ||| terms variables	count=1
module	returns an ||| module_utils	count=1
module	if ||| cloud	count=3
function	or [function] login ||| update system [function]	count=1
function	[function_1] latest ||| [function_2] [function_1]	count=3
function	message describing why ||| message	count=1
function	key ids ||| key ids	count=1
class	and handle the ||| balancer	count=1
function	parse role attributes ||| parse role	count=1
module	google [module_2] ||| [module_1] [module_2]	count=1
function	wrap script execution with ||| wrap for	count=1
arg	url specifically ||| url	count=1
function_arg	list of [arg_2] ||| product [function_1] [arg_2]	count=1
class	lxd ||| connection	count=1
function	[function] order ||| [function]	count=1
arg	module if ||| module	count=1
function	hostname and port ||| and port	count=1
module	selinux ||| modules system	count=3
module	not exist returns a ||| modules	count=1
function	inventory which allows ||| retry inventory	count=1
function_arg	[function_1] or cpu ||| [arg_2] [function_1]	count=1
function	blocks for a ||| blocks	count=1
module	on mode args ||| modules network nxos	count=1
module	changes ||| cloud google	count=1
module	from all subscribed channels ||| module_utils	count=1
module	updates ||| modules packaging os	count=2
function	[function_1] mount ||| [function_2] [function_1]	count=1
module	about the ||| netapp	count=1
module	the system ||| modules packaging	count=1
arg	sending ||| msg_format color notify	count=1
function	subscribe current ||| subscribe	count=1
function	tags and convert them ||| make tags in	count=1
function	which arguments are ||| required	count=1
module	validation ||| modules cloud amazon	count=2
function	remote checksum given a ||| remote checksum	count=1
function_arg	[function_1] from local ||| [arg_2] [function_1]	count=27
function_arg	of [arg_2] ||| [arg_2] [function_1]	count=6
function	lambda function [function_2] ||| [function_2] [function_1]	count=4
arg	message ||| msg	count=1
function	[function_1] name is ||| [function_1] [function_2]	count=1
module	lxc nothing ||| plugins connection	count=1
arg	before that would conflict ||| module repodata old_repos zypper_version	count=1
module	given vpc ||| cloud	count=1
function	the repo removes ||| repo	count=1
class	parse ||| task parameters	count=2
function	read the value of ||| read	count=1
arg	and changed ||| changed req	count=1
function	import ||| import task	count=2
class	path and handle ||| group	count=1
arg	entity is removed ||| entity	count=1
function	binds to ||| image binds	count=1
function	error ||| error lines from	count=1
arg	formats each target ||| targets	count=1
function	need to be removed ||| target ids to remove	count=1
function	all available callbacks with ||| callbacks	count=1
module	host we've been initialized ||| plugins	count=1
function	helper method to compare ||| compare get	count=1
arg	which the host ||| host	count=1
function	keys the value ||| change keys	count=1
function	need to ||| remote target ids to	count=1
function	for the group matching ||| get group	count=1
function	name [function_2] ||| [function_2] [function_1]	count=6
function	validation for the ||| validate	count=1
function	[function_1] stop the ||| [function_2] [function_1]	count=1
function	alias is present ||| cert present	count=1
class	azure ||| azure rmmodule base	count=2
function	the error did not ||| error lines from	count=1
function	group that matches the ||| matching	count=1
class	handle the ||| clc group	count=1
function	to get packages ||| get packages	count=2
module	the main ||| modules cloud	count=4
arg	libcloud driver connection ||| get_driver user_agent_product	count=1
function	and port ||| fqdn and port	count=2
arg	given facts [arg_2] ||| [arg_2] [arg_1]	count=8
arg	server is updated with ||| server server_params	count=1
function	from list of volume ||| get volume	count=1
function	if network [function_2] ||| [function_2] vpc [function_1]	count=1
class	path and handle ||| clc firewall policy	count=1
function	zone by ||| get zone by	count=2
function	lists the ||| list	count=2
function	run on ||| v2 playbook on	count=1
module	the main ||| modules cloud lxc	count=1
function_arg	[function_1] task ||| [arg_2] [function_1]	count=2
class	rule ||| rule	count=11
arg	its name or ||| locator location	count=1
class	and handle the ||| clc load	count=1
class	the main method ||| management	count=1
function	false depending [function] ||| sysv [function]	count=2
class	remotely ||| cloud watch event rule	count=2
function	method to compare the ||| compare get	count=1
function	ip is ||| is	count=1
class	rule and ||| cloud watch event rule manager	count=1
function	policy if needed ||| policy	count=1
function	the name of the ||| get link name	count=1
function	portion of a ||| get	count=1
module	synchronize ||| modules	count=1
function	the policy ||| policy	count=1
function	to all ovirt facts ||| ovirt facts	count=1
function	[function_1] the balancer ||| [function_2] [function_1]	count=1
module	in ||| modules cloud amazon	count=1
function	is bind [function_2] ||| [function_1] [function_2]	count=1
function_arg	module [arg_2] ||| [arg_2] [function_1]	count=3
class	the another network ||| network	count=1
function	closes the ||| close	count=1
function	argument specifiation ||| argument	count=1
arg	if the given router ||| router	count=1
function	determine whether ||| is registered	count=1
arg	of task vars ||| vars play	count=1
module	machine via the given ||| cloud misc	count=1
function	run sanity [function_2] ||| [function_2] [function_1]	count=4
function	of the ||| get	count=22
module	for all ||| modules cloud amazon	count=1
class	that may ||| snat pool manager	count=1
arg	on the clc ||| clc module	count=1
function	template and ||| template	count=1
function	remove the boot ||| remove boot	count=2
function	and the privileges ||| privileges	count=2
arg	or ||| module system	count=3
function_arg	compare the [arg_2] ||| [arg_2] [function_1]	count=1
function	branch does not ||| branch	count=1
module	meta-characters in [module] unix ||| [module]	count=1
class	host we've been initialized ||| connection	count=1
function	frozen ||| frozen	count=1
function	the balancer as ||| balancer	count=1
function	message to [function_2] ||| [function_1] [function_2]	count=4
arg	the stdin filehandle of ||| fh in_data	count=1
class	main ||| firewall policy	count=2
class	json collector object for ||| logic monitor	count=2
function	host patterns ||| host	count=1
function	the galaxy [function_2] ||| [function_1] [function_2]	count=4
function	[function] <name>01 ||| create [function]	count=1
function	get information from remote ||| execute remote stat	count=1
arg	server ||| server expiration_days	count=1
function	all arguments have the ||| check argument	count=1
module	subscription-manager ||| os	count=1
function	[function_1] application from ||| [function_1] [function_2]	count=3
function_arg	[function_1] response ||| [function_1] request with dict [arg_2]	count=2
function	value associated ||| value	count=1
module	whether a ||| modules cloud	count=1
function	is bind ||| is bind	count=2
function	umc [function_2] ||| [function_2] [function_1]	count=1
module	[module_1] connection failure ||| [module_1] [module_2]	count=2
function	return changed items ||| get changed items	count=2
function	a vault ||| vault	count=1
function	list of handlers ||| handlers	count=1
arg	or modifies an ||| module vpc_conn	count=2
function	create a default ||| create default securitygroup	count=3
function	unpause the ||| unpause	count=1
class	[class_1] config ||| [class_2] [class_1]	count=3
module	the power [module] ||| [module]	count=1
function	galaxy info ||| load galaxy info	count=2
function	a task ||| runner	count=1
function	decrypt ||| decrypt	count=2
function	to modify ||| modify	count=1
class	load balancer ||| load balancer	count=4
class	return ||| net	count=1
class	the main method ||| container	count=1
function	final [function] on ||| post [function]	count=1
function	base argument specifiation common ||| argument	count=1
function_arg	temp [arg_2] ||| [arg_2] [function_1]	count=1
arg	permissions ||| permissions	count=1
arg	git repo ||| module git_path	count=1
arg	returns change status ||| xbps_path packages state	count=1
function	host key can ||| parse host	count=1
function	determine whether the ||| is registered	count=1
function	[function_1] alias if ||| [function_2] [function_1]	count=3
function	list of ||| get list	count=2
class	task if ||| task executor	count=1
function	a virtual [function_2] ||| [function_2] [function_1]	count=1
function	given role ||| role	count=1
function	error did ||| error lines	count=1
function	a tempfile ||| content tempfile	count=1
arg	alias [arg] ||| [arg]	count=1
module	to the ||| modules	count=1
module	global mysql ||| modules database mysql	count=1
class	with the provided vault ||| vault cli	count=1
function	host patterns separated ||| host	count=1
function	to ||| resource to	count=1
function	changes the ||| change	count=2
arg	number in ||| number	count=1
arg	folder to cloud ||| cf folder container ttl	count=1
function	tags from ||| tags from	count=2
module	the device supports ||| connection	count=1
function	[function] returned ||| find server by [function] w	count=1
module	alias or ||| cloud amazon	count=1
function	or add a new ||| add	count=1
module	objects from cloud files ||| cloud rackspace	count=1
class	host ||| connection base	count=1
arg	a magic wake-on-lan packet ||| module mac broadcast port	count=1
function	validate the authorization ||| validate	count=1
arg	from zone to local ||| in_path out_path	count=1
function	a parse ||| parse	count=1
function_arg	right after [arg_2] ||| [function_1] [arg_2]	count=3
function_arg	user [arg_2] ||| [function_1] [arg_2]	count=3
function	port matching ||| ports match	count=2
class	server based on the ||| clc server	count=1
function	portion of a ||| get loop	count=1
function	for the group ||| get group	count=1
module	execute the main ||| cloud centurylink	count=3
function_arg	list the [arg_2] ||| [arg_2] [function_1]	count=3
class	id or ||| manager	count=1
arg	server is updated ||| server server_params	count=1
function	updated [function_2] ||| [function_2] [function_1]	count=2
function_arg	[function_1] in ||| [arg_2] [function_1]	count=15
class	an azure ||| azure rmmodule base	count=2
function_arg	[function_1] [arg_2] so the ||| [function_1] inventory basename [arg_2]	count=3
module	to a lambda ||| cloud	count=1
function	can be [function] ||| [function]	count=2
module	receive updates ||| modules packaging	count=1
module	convert ||| utilities logic	count=1
module	synchronize ||| modules packaging	count=1
function	[function_1] with the ||| [function_1] [function_2]	count=4
function	difference between given 2 ||| diff	count=1
arg	events to monitor ||| events	count=1
function	set the power status ||| set	count=1
arg	entity is 'absent' if ||| entity search_params	count=1
arg	[arg_1] password ||| [arg_1] [arg_2]	count=2
function	the explicit environment ||| environment	count=2
function	deletes them ||| delete	count=1
module	create a list ||| modules cloud	count=1
arg	piece ||| plaintext	count=1
function	base object ||| base	count=1
class	server ||| clc modify server	count=4
function_arg	[function_1] the module ||| [function_1] rule [arg_2]	count=2
arg	vmid = -1 ||| vmid	count=1
module	it exists or all ||| cloud amazon	count=1
module	or delete an ||| modules cloud	count=1
function	[function] for ||| preprocess [function]	count=2
function	umc module ||| module	count=1
function	given firewall [function_2] ||| [function_1] [function_2]	count=3
function	style ||| style	count=1
function	low level [function_2] ||| [function_2] [function_1]	count=1
function	state of a list ||| instance state	count=1
class	main method ||| container	count=1
function_arg	[function_1] named ||| [function_1] name [arg_2]	count=3
class	and ||| clc group	count=2
arg	number in string ||| number	count=1
function	custom finalize method ||| finalize	count=1
function	request parameters ||| get request	count=1
module_class	[module_1] the firewall ||| [module_1] [class_2]	count=1
function	restore ||| restore server	count=1
function	dict with the ||| dict	count=1
function	returns id of ||| get file system id	count=1
function	the properties ||| properties	count=4
function	data matches [function_2] ||| [function_1] [function_2]	count=1
function	pattern described in the ||| detect	count=1
arg	a folder ||| cf folder container	count=1
function	update the given ||| update	count=1
function	a virtual machine ||| machine	count=1
function	add the hostkey ||| add host key	count=1
function	is a pubkey ||| is pubkey	count=2
function_arg	generate a string containing [function_1] [arg_2] ||| plugins lookup [function_1] [arg_2]	count=4
function	clc credentials on ||| clc credentials	count=14
arg	of events to monitor ||| events	count=1
function	the name [function_2] ||| [function_2] by [function_1]	count=2
class	the host ||| connection	count=1
class	get ||| firewall policy	count=1
class	details ||| net app	count=1
module	containers from the ||| modules cloud	count=1
arg	a host ||| host	count=3
function	the include line up ||| preprocess include	count=1
function	[function_1] targets ||| [function_2] [function_1]	count=2
function	hipchat v2 ||| v2	count=1
function	address ||| address	count=2
module	execute ||| cloud centurylink	count=6
class	for registration with ||| rhsm	count=1
function	of matching ||| get	count=1
function	list of ||| get	count=6
arg	remote box ||| remote_user	count=1
function	determine which subnets need ||| subnets	count=1
arg	to local ||| in_path out_path	count=6
module	for autoscale group ||| modules cloud amazon	count=1
module	the given ||| modules	count=1
class	path and handle the ||| clc	count=3
module	main ||| centurylink	count=3
class	set ||| clc anti affinity policy	count=1
function	to create ||| create clc	count=1
function_arg	file from [arg_2] ||| [function_1] [arg_2]	count=6
function	file from local ||| file	count=1
function	to a specific type ||| type	count=1
function	dictionary ||| argument spec	count=1
function	the password has changed ||| changed	count=1
arg	google compute engine ||| module provider	count=1
function	git ||| git host	count=1
function	a deploy [function_2] ||| [function_1] [function_2]	count=2
function_arg	of [arg_2] ||| [function_1] original task [arg_2]	count=1
class	json collector object ||| logic monitor	count=2
arg	a getfacl/setfacl ||| module mode path follow	count=1
module	the ||| modules cloud misc	count=4
function_arg	backend service [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] affinity ||| [function_2] [function_1]	count=3
function	changes are required to ||| state change	count=1
function	run input sanity checks ||| additional sanity checks	count=1
module	true if already ||| modules packaging os	count=1
class	host ||| base	count=1
module	by big-ip in the ||| modules	count=7
function	[function_1] style ||| [function_1] [function_2]	count=4
function	[function_1] the lease ||| [function_1] [function_2]	count=3
function	dict of ||| get	count=1
function	is called right before ||| pre	count=1
function	currently installed ||| present	count=1
module_class	new [class_2] ||| [class_2] [module_1]	count=4
function	function which loads ||| load inventory	count=2
function_arg	state of packages ||| state m packages	count=2
arg	string :arg [arg_2] ||| [arg_2] [arg_1]	count=2
arg	for idempotency using the ||| module cli	count=3
module	docker ||| plugins connection	count=2
class	main code ||| clc firewall	count=1
function_arg	[function_1] a clc ||| [function_1] server [arg_2]	count=2
function	lookup a container ||| container	count=1
module	for a given domain ||| modules cloud google	count=2
function	gets the type ||| type	count=2
arg	containing defined content ||| content	count=1
module	the machine via the ||| modules cloud	count=1
function	type ||| get interface type	count=2
function	run ||| run	count=6
function	determines if parted ||| parted	count=1
function	class factory that closes ||| handler factory	count=1
module	if certificate ||| system	count=1
module	a pool on the ||| modules cloud	count=1
class	the given [class] based ||| [class]	count=1
function	params when we can ||| on missing params	count=1
function	module ||| split module	count=1
class	return ||| net app	count=1
function	installed overlays ||| overlays	count=1
arg	task ||| host task	count=1
function_arg	[function_1] note that ||| [arg_2] [function_1]	count=6
class	loads ||| task queue manager	count=1
arg	not already installed ||| opkg_path	count=1
arg	is actuall executable or ||| module executable	count=1
function	the api call ||| axapi call	count=2
class	path and ||| firewall	count=1
function	digest of local ||| digest	count=1
function	that need to ||| ids to	count=1
function	kwargs ||| kwargs	count=1
function	downtime for all ||| downtime	count=3
function_arg	[function_1] hosts in ||| [function_1] [arg_2]	count=1
arg	executable ||| executable	count=1
arg	[arg_1] clc ||| [arg_1] [arg_2]	count=1
function	configure ||| configure server	count=1
module	mysql ||| database mysql	count=1
function	a volume ||| delete volume	count=1
arg	current project quota ||| module project_quota_output	count=1
function	entity id [function_2] ||| [function_2] [function_1]	count=1
function	remove the ||| remove	count=3
class	modify the cache ||| cache	count=1
function	to a ||| to	count=1
arg	from the server ||| server_id	count=1
function	balancer as a ||| balancer	count=1
function	desired version example formats ||| name version	count=1
module	if a server ||| modules cloud	count=1
function	[function_1] clc ||| [function_2] [function_1]	count=7
function	is different and ||| has different	count=1
arg	given router ||| module router network	count=1
module	request_spot_instances() method for example ||| modules cloud	count=1
module	about ||| modules	count=1
function	encrypted return ||| get	count=1
function	create a dict ||| create rule dict	count=1
function	[function_1] servers on ||| [function_1] [function_2]	count=3
module	via the given ||| cloud	count=1
module	[module_1] already ||| [module_1] [module_2]	count=6
arg	[arg_1] and task ||| [arg_2] [arg_1]	count=5
arg	of a location header ||| location	count=1
function	[function_1] glob ||| [function_1] [function_2]	count=2
module	from cloud files ||| cloud	count=1
class	handle the ||| load	count=1
class	derived from the base ||| base	count=1
module	request a ||| modules web_infrastructure	count=1
function_arg	hostnames for [arg_2] ||| [function_1] [arg_2]	count=1
class	handle ||| clc group	count=2
function	aws ||| aws	count=3
function	of ||| get dev	count=1
arg	google compute engine ||| provider	count=1
function	and desired version example ||| name version	count=1
module	the device supports multiplexing ||| plugins connection	count=1
module	the connection nothing to ||| plugins connection	count=6
module	elasticache parameter ||| cloud amazon	count=1
function	reboot the ||| reboot	count=1
arg	module if not ||| module	count=1
function	return changed [function_2] ||| [function_2] [function_1]	count=1
function_arg	[function_1] modify_module() function ||| [arg_2] [function_1]	count=1
function	is ||| is	count=17
arg	[arg_1] vars_cache ||| [arg_2] [arg_1]	count=4
function	update method ||| update	count=1
arg	module ansible module ||| module	count=5
function	[function_1] policies ||| [function_2] [function_1]	count=5
function	file from ||| file	count=8
arg	module the ansiblemodule ||| module	count=1
function	[function_1] instances ||| [function_1] [function_2]	count=1
function_arg	[function_1] in hash ||| [arg_2] [function_1]	count=2
function	number of newlines at ||| count newlines from	count=1
function	removes ||| delete	count=1
function	load the ||| load	count=1
function	patch for boto ||| boto	count=1
arg	vm directly from vsphere ||| vm	count=1
class	write ||| callback module	count=1
arg	be ||| action	count=1
class	firewall ||| firewall	count=1
arg	the server ||| datacenter_id server_id	count=1
arg	cloud ||| override_count	count=1
arg	[arg_1] key (of ||| [arg_2] [arg_1]	count=4
function_arg	[function_1] object to ||| [arg_2] [function_1]	count=2
arg	datacenter by calling the ||| datacenter	count=1
function	of the [function_2] ||| [function_2] [function_1]	count=13
module	a previously ||| packaging	count=1
module	system ||| packaging os	count=9
function	of ||| get image	count=1
class	of an azure ||| azure rmmodule base	count=1
function	[function_1] sources ||| [function_1] [function_2]	count=2
function	the servers on ||| servers	count=2
function_arg	[function_1] or cpu ||| [function_1] clc server clc [arg_2]	count=1
class	return details about the ||| app cdotlun	count=1
function	supports ||| close	count=1
module	while removing the packages ||| modules packaging os	count=1
module	convert a ||| plugins	count=1
function	caches a host_vars file ||| file	count=1
function	send a [function_2] ||| [function_1] [function_2]	count=3
function	proxy protocol ||| proxy protocol	count=1
module	code path ||| cloud	count=3
arg	[arg_1] datacenter by ||| [arg_2] [arg_1]	count=1
arg	in cert_file ||| module cert_file	count=2
module	check depending on supplied ||| clustering	count=1
module	to do here ||| plugins	count=7
function_arg	[function_1] in dict_b ||| [function_1] dict_a [arg_2]	count=1
function	to calculate difference ||| diff	count=1
arg	user password ||| cursor module user password	count=1
arg	and kickstart ||| image_name kickstart	count=1
class	main code ||| policy	count=1
function	to schedule ||| schedule servicegroup host	count=1
class	makes sure that a ||| clc anti affinity policy	count=1
function	[function_1] zone in ||| [function_2] [function_1]	count=3
function	the properties ||| set properties	count=2
function	credentials ||| credentials	count=7
function	by ||| key id	count=1
function	if no [function] vrrp_exists ||| [function]	count=1
function_arg	start [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	parameter [arg_2] ||| [function_1] [arg_2]	count=1
function	the items result ||| items	count=1
class	execute the ||| clc load balancer	count=1
arg	b take ||| b	count=1
class	the galaxy api ||| galaxy cli	count=1
arg	the existence ||| name cidr_block	count=1
arg	server ||| server_id	count=1
function	the alert policy to ||| alert policy to	count=3
module	directed ||| module_utils	count=1
arg	a set of events ||| events	count=1
function	zone by name or ||| get zone by name	count=1
arg	from host ||| host	count=1
function	name or ||| name	count=1
module	route table has all ||| modules cloud amazon	count=1
function	[function] names ||| ec2 security group [function]	count=1
function	[function_1] policy is ||| [function_1] [function_2]	count=13
arg	[arg_1] all nat ||| [arg_2] [arg_1]	count=2
arg	service name supplied ||| name	count=2
function	hostnames for ||| hosts	count=1
arg	that the dict passed ||| name passed	count=1
module	the main code path ||| cloud	count=3
module	metadata ||| rackspace	count=2
function	[function_1] temporary path ||| [function_1] [function_2]	count=1
arg	to choose where ||| remote_path	count=3
function	dict ||| json dict	count=1
arg	the task if they ||| task	count=1
arg	resource record ||| zone record	count=1
function	preserve spaces ||| parse	count=1
function_arg	[function_1] server is ||| [arg_2] [function_1]	count=1
function	pause the machine with ||| pause	count=1
class	rule [class_2] ||| [class_1] [class_2]	count=4
module	for getting ||| modules	count=1
function	admin ||| umc admin	count=1
function	retrieve reference on target ||| pubnub	count=1
class	list a that are ||| manager	count=1
class	changes ||| net app cdotuser	count=1
arg	memory or cpu ||| cpu	count=1
function	back in a format ||| format	count=1
arg	the name parameter sent ||| name	count=1
module	supports multiplexing ||| connection	count=1
function	[function_1] file ||| [function_2] [function_1]	count=36
module	plugins ||| plugins	count=1
function	script ||| script	count=1
function	with_* portion of ||| get loop	count=1
module	execution ||| modules network sros	count=2
module	a new ||| cloud amazon	count=1
function	to find the ||| find	count=1
function	[function_1] facts ||| [function_1] [function_2]	count=3
function	get the port where ||| get port	count=1
module	nothing to do for ||| plugins connection	count=1
function	values from ||| values	count=1
function_arg	user that [arg_2] ||| [function_1] [arg_2]	count=2
arg	which is templated ||| value templar	count=1
class	the ||| load	count=2
function	file to ||| file	count=2
module	to receive ||| packaging os	count=1
module	for the given ||| modules cloud centurylink	count=2
function	a list of key ||| shorten key	count=1
function	[function_1] name keys ||| [function_2] [function_1]	count=4
function	temporary ||| tmp	count=2
function	the environment [function_2] ||| [function_2] [function_1]	count=4
class	return details about the ||| net app	count=1
function	named ports ||| update named ports	count=2
function	parses an ||| parse	count=1
class	execute the main ||| clc firewall policy	count=1
class	task ||| task	count=9
module_class	[module_1] [class_2] ||| [module_1] certificate [class_2]	count=2
function	import a role into ||| import	count=1
arg	from the server ||| datacenter_id server_id	count=1
function	on start of the ||| on play start	count=1
module	updates from subscription-manager ||| os	count=1
module	machine via ||| modules cloud misc	count=1
arg	the module data out ||| data	count=1
function	of ||| get poller	count=1
function	false depending [function] of an ||| sysv [function]	count=1
module	machine via ||| modules	count=1
module	the connection nothing to ||| plugins	count=6
function	the public ip removed ||| public ip absent	count=1
function	default ||| default nic	count=1
arg	[arg_1] by callback ||| [arg_2] [arg_1]	count=4
function	with the request parameters ||| get request with dict	count=1
function	collection is fresh ||| fresh	count=1
function	activate a ||| activate	count=1
function	state [function_2] ||| [function_2] aws [function_1]	count=1
function_arg	[function_1] in the ||| [arg_2] [function_1]	count=3
module	wait for a ||| modules cloud amazon	count=2
function	--xmlout repos [function] repo ||| [function]	count=1
module	device ||| plugins	count=1
function	a port ||| port	count=1
module	a ||| cloud lxc	count=1
arg	datacenter and account ||| location	count=1
function	object for the group ||| get group	count=1
function	assumes the branch does ||| branch	count=1
function	the galaxy info entry ||| load galaxy info	count=1
function	currently set locale ||| locale	count=1
module	we've been ||| plugins	count=1
function	[function_1] the aws ||| [function_1] [function_2]	count=3
function_arg	[function_1] [arg_2] ||| [function_1] on diff host [arg_2]	count=12
function	downtime ||| svc downtime	count=3
arg	the existence of a ||| name cidr_block	count=1
function	create a new datacenter ||| create datacenter	count=1
class	execute the main ||| clc firewall	count=1
module	the output into a ||| plugins action	count=1
function	[function_1] alert policy ||| [function_2] [function_1]	count=5
arg	so ||| enabled	count=1
function	requests are ||| for requests to	count=3
function	get the [function_2] ||| [function_1] [function_2]	count=14
module	the index and working ||| modules source_control	count=1
class	the another network config ||| network config	count=1
function	from a list of ||| from list	count=1
function	of subnets each ||| subnets	count=1
class	an azure object's ||| azure	count=1
arg	vars_cache for ||| varname	count=1
function	set on the host ||| set host	count=1
function	of each dict whereas ||| get	count=1
function	ip is currently ||| address is	count=1
function	[function_1] a vault ||| [function_1] [function_2]	count=1
arg	a registered file ||| fileobj	count=1
class	about ||| cdotlun	count=1
class	and write it ||| acmeclient	count=1
module_class	if a [class_2] ||| [module_1] [class_2]	count=1
function	a new certificate and ||| certificate	count=1
module	if changed false otherwise ||| modules database postgresql	count=1
class	path ||| clc	count=3
function	decrypted [function] note ||| shred [function]	count=1
function	target string from ||| target	count=1
function	delete a ||| delete	count=3
class	and targets are ||| manager	count=2
function_arg	state of [arg_2] ||| [arg_2] [function_1]	count=1
function	them into the aws ||| make tags in aws	count=1
arg	if it differs from ||| module conn name values	count=1
function	days the ||| cert days	count=1
function_arg	the keys [arg_2] ||| [function_1] [arg_2]	count=1
class	and ||| firewall	count=1
function_arg	requests to [arg_2] ||| [arg_2] [function_1]	count=3
class	change ||| clc server	count=1
module	to lxd ||| plugins	count=1
arg	the name of the ||| name	count=1
function	the lun ||| get lun	count=1
function	argument specifiation common to ||| argument	count=1
function	takes ||| create annotation	count=1
arg	also supports to get ||| backend	count=1
function	fetch the list of ||| fetch	count=1
module	object required for ||| modules	count=2
module	into a valid ||| plugins	count=1
class	the ||| lxc container management	count=1
arg	the hosts in ||| arg	count=1
module	it to the destination ||| web_infrastructure	count=1
arg	on ||| module	count=1
module	for the given vpc ||| modules cloud amazon	count=1
function	validation of vars on ||| validate	count=1
function	has changed ||| changed	count=1
module	synchronize all ||| modules packaging	count=1
function_arg	[function_1] named name ||| [arg_2] [function_1]	count=3
arg	google [arg_2] ||| [arg_2] [arg_1]	count=2
function	[function_1] of the ||| [function_2] balancer [function_1]	count=2
arg	user note [arg] *must* be ||| [arg]	count=1
function_arg	mode logic [arg_2] ||| [arg_2] [function_1]	count=1
function	the resources given ||| update resources	count=1
function	a default ||| default	count=4
function	custom ||| update custom	count=1
function	a temporary path on ||| tmp path	count=1
function	[function] returned ||| find [function] w	count=1
function	remote file to the ||| file	count=2
module	subscription-manager ||| module_utils	count=1
function	inteligently build out the ||| build	count=1
function	loads the [function_2] ||| [function_1] inventory [function_2]	count=1
function	protocol ||| protocol	count=1
class	dictionary ||| cloud stack	count=1
class	public ||| public	count=1
function	a temporary ||| tmp	count=1
function_arg	ensures the [arg_2] ||| [function_1] aa policy present [arg_2]	count=4
module	global mysql variable ||| database mysql	count=1
function_arg	set the [arg_2] ||| [function_1] key [arg_2]	count=3
class	ansible ||| ansible	count=1
function	[function_1] alert ||| [function_2] [function_1]	count=6
class	module to test the ||| ansible module	count=1
module	path and handle the ||| centurylink	count=3
arg	existence of a vpc ||| vpc name cidr_block	count=1
function	roles ||| roles	count=1
function	adds the repo removes ||| repo	count=1
class	directed for ||| rhsm	count=1
class	code path and ||| firewall policy	count=1
function	vault password from ||| vault password	count=2
function	machine via the given ||| create	count=1
function	on a [function_2] ||| [function_2] [function_1]	count=2
function_arg	[function_1] provided ||| [arg_2] [function_1]	count=3
module	for special packages ||| modules	count=1
function	set the power ||| set	count=1
arg	in the vars_cache ||| varname	count=1
function	modification ||| modification	count=1
class	an azure ||| azure rmmodule	count=2
function_arg	installed state [arg_2] ||| [function_1] [arg_2]	count=1
module	to do here ||| connection	count=7
module	the given ||| modules cloud misc	count=1
class	code path and handle ||| clc firewall	count=1
module	start the machine ||| cloud misc	count=1
function	required_together argument to ansiblemodule ||| infinibox required together	count=1
function	register ||| register	count=2
function	[function_1] retry ||| [function_2] [function_1]	count=1
function	list of ||| get loadbalancer list	count=1
function	configuration is different ||| has different config	count=3
arg	clc ||| clc module acct_alias server_id	count=2
function	start or stop ||| start stop	count=2
arg	bridge member ||| _bridgemems	count=1
function	file over ||| push file	count=1
arg	user [arg_2] ||| [arg_2] [arg_1]	count=1
module	or ||| modules cloud amazon	count=3
function	parted [function_2] ||| [function_1] [function_2]	count=2
module	system to receive ||| os	count=1
class	details about the ||| app cdotlun	count=1
class	the destination ||| acmeclient	count=1
arg	based on the clc ||| clc module alias	count=1
module	an amazon ||| modules cloud amazon	count=6
function	machine ||| create	count=1
module	gather ||| cloud vmware	count=1
arg	matching containers that are ||| manager containers	count=1
module	or alias or none ||| modules cloud amazon	count=1
arg	name of the ||| name	count=1
module	config ||| network cumulus	count=2
arg	the ec2 instance and ||| ec2 module	count=1
arg	module if ||| module system	count=1
function	out the policy ||| policy	count=1
function	[function_1] retry the ||| [function_2] [function_1]	count=1
function_arg	into bytes [arg_2] ||| [arg_2] [function_1]	count=1
class	system as directed ||| rhsm	count=1
arg	in the ||| module	count=1
module	the ||| storage netapp	count=2
function	ids [function_2] ||| security group [function_1] [function_2] names	count=3
function	server [function_2] ||| [function_2] [function_1]	count=4
module	get the ami for ||| modules	count=1
function	service id ||| service	count=1
function	they are set ||| set	count=1
function	v2 ||| v2	count=1
function	environ get ||| get gcp environ	count=1
module_class	[module_1] [class_2] ||| [module_1] action [class_2]	count=1
function	user exists ||| user	count=1
function	them [function_2] ||| [function_1] [function_2]	count=1
module	host bindings if any ||| cloud docker	count=1
class	[class_1] container ||| [class_1] [class_2]	count=1
module	container ||| cloud docker	count=3
function	dmi related facts ||| dmi facts	count=1
function	into [function] based ||| get serialized [function]	count=1
function_arg	parameters to [arg_2] ||| [function_1] module [arg_2]	count=3
arg	of events to ||| events	count=1
arg	a status args ||| client wait_timeout nat_gateway_id status	count=1
function	[function_1] stop the ||| [function_1] [function_2]	count=1
arg	a folder to cloud ||| folder container ttl	count=1
arg	server ||| server	count=8
function	the system state ||| system state	count=2
function	the main ||| process	count=3
function	key ||| shorten key	count=1
module	format ||| cloud google	count=1
function	getting [function] aside from ||| [function]	count=1
module	datastructure ||| playbook	count=1
module	to the lxc ||| plugins	count=1
module	already ||| packaging os	count=1
function_arg	state [arg_2] ||| [function_1] [arg_2]	count=1
function	check ||| check cert	count=1
function	adds the repo ||| addmodify repo	count=1
arg	resource definition ||| resource	count=1
function	save ||| fetch	count=2
module	the lxc nothing to ||| plugins	count=1
arg	if found fail module ||| module system	count=1
class	management of ||| management	count=3
function_arg	[function_1] managed ||| [function_1] [arg_2]	count=4
function	the machine via ||| create	count=1
module	objects [module_2] ||| [module_1] [module_2]	count=3
arg	folder to cloud ||| cf folder	count=1
arg	dict_a in dict_b return ||| dict_a dict_b	count=1
class	of ||| clc snapshot	count=1
function	[function_1] remote ||| [function_1] [function_2]	count=1
function	boot volume ||| boot volume	count=2
function	returns parameters used to ||| parameters	count=1
module	start the machine via ||| modules cloud	count=1
arg	second ||| pacman_path name state	count=1
arg	state in given phase ||| phase	count=1
function	return the ip of ||| get api ip	count=1
arg	should not be templated ||| value templar	count=1
function_arg	message [arg_2] ||| [arg_2] [function_1]	count=2
module	for a specified function ||| modules cloud	count=1
function	an entity id by ||| id by	count=1
module	a list of ||| modules cloud amazon	count=3
function	make the keys ||| keys	count=1
arg	the server is ||| server	count=1
arg	templated during ||| value templar	count=1
function	public ip [function_2] ||| [function_2] [function_1]	count=4
module	set all of the ||| modules cloud amazon	count=1
function	a [function] of ||| [function]	count=1
class	code path ||| firewall policy	count=1
module	all subscribed channels ||| module_utils	count=1
module	receive updates from ||| os	count=1
function	[function_1] checksum given ||| [function_1] [function_2]	count=2
function	a remote [function_2] ||| [function_1] [function_2]	count=2
function	params when we ||| on missing params	count=1
arg	items specified ||| items	count=1
module	a message to the ||| utils	count=1
function	network domain ||| network domain	count=1
module	see if a ||| modules cloud centurylink	count=1
function	to schedule ||| schedule servicegroup	count=2
function_arg	path on [arg_2] ||| [function_1] [arg_2]	count=1
module	into a ||| plugins action	count=1
function	the selinux ||| semanage	count=1
function_arg	filesystem or ||| filesystem module system	count=1
arg	supports to get ||| host backend	count=1
function	[function_1] name ||| [function_2] [function_1]	count=19
function	module names are ||| split module	count=1
function	blocks ||| blocks	count=1
arg	change user [arg_2] ||| [arg_1] [arg_2]	count=1
function	of subnets each identified ||| subnets	count=1
function	to schedule ||| schedule servicegroup svc	count=1
arg	[arg_1] password and ||| auth header [arg_1] [arg_2]	count=2
arg	status ||| status	count=1
arg	and a port ||| port	count=2
arg	from the task if ||| task	count=1
module	start ||| cloud misc	count=2
class	[class_1] [class_2] ||| [class_2] watch event [class_1]	count=9
arg	data out to the ||| remote_path data	count=1
function	creates a pool on ||| create	count=1
function	authorizations for all domains ||| do challenges	count=1
arg	extract ||| module fail_on_error	count=1
function	[function_1] servers on ||| [function_2] [function_1]	count=3
arg	datacenter and account ||| location firewall_policy_id firewall_dict	count=1
function	to find ||| find	count=1
module	return ||| storage netapp	count=2
function	elastic ip is currently ||| address is	count=1
function	the list of ||| get	count=2
function	or name field from ||| name	count=1
module	this ||| network netvisor	count=1
function	add the ||| add host key	count=1
module	the package ||| modules packaging os	count=1
function	to schedule downtime for ||| schedule servicegroup host downtime	count=1
module	via the ||| modules cloud	count=1
function	with the request ||| get request with dict	count=1
module	the destination file ||| modules	count=1
arg	the clc api ||| clc	count=3
arg	memory or cpu of ||| module server_id cpu	count=1
module	modules ||| module_utils	count=1
function_arg	policy to [arg_2] ||| [function_1] server [arg_2]	count=2
module	get ||| cloud google	count=2
function	none if file ||| from file	count=1
module	clc ||| cloud centurylink	count=8
module	pip freeze pip and ||| packaging language	count=1
module	execute ||| centurylink	count=3
class	locale module ||| ansible module	count=1
function	the clc credentials ||| clc credentials	count=14
function	getting univention admin objects ||| admin objects	count=1
module	synchronize ||| packaging	count=1
function_arg	[function_1] restriction ||| [arg_2] [function_1]	count=5
function_arg	[function_1] given name ||| [function_1] [arg_2]	count=1
class	the host we've been ||| connection	count=1
module	for the given vpc ||| modules cloud	count=1
function_arg	data [arg_2] ||| [arg_2] [function_1]	count=1
module	[module_1] for module ||| [module_1] [module_2]	count=3
class	until some ||| base	count=1
function	[function_1] [function_2] order first found is ||| [function_1] [function_2]	count=5
function	retrieve a base argument ||| argument	count=1
function	escalated ||| deauthorize	count=1
arg	the server ||| server server_params	count=2
function	find ||| find device	count=1
function	or upper case ||| case	count=1
function	encryption ||| volume encryption	count=1
arg	original ||| old_ttl old_record_data new_ttl new_record_data	count=1
function	in vpc ||| vpc	count=1
class	a ||| rhsm	count=1
function_arg	wait [arg_2] ||| [arg_2] [function_1]	count=2
function	compare ||| compare	count=3
function	newest version of the ||| get	count=1
module	the system to receive ||| packaging	count=1
function	delete the ||| delete	count=2
function	update ||| package update	count=1
function	installed [function_2] ||| [function_2] [function_1]	count=2
function	a different host ||| diff host	count=2
function	version [function_2] ||| [function_1] [function_2]	count=1
class	[class_1] data network ||| [class_2] [class_1]	count=1
module	handle ||| modules cloud centurylink	count=6
module	return true if the ||| modules	count=1
function	configuration [function_2] ||| [function_2] [function_1]	count=6
arg	from local to docker ||| in_path out_path	count=1
function	to write a ||| write	count=1
arg	which have been notified ||| iterator play_context	count=1
function	new certificate and ||| certificate	count=1
function	a vault [function_2] ||| [function_1] [function_2]	count=7
arg	implements yaml ||| file_name	count=1
function	parse role attributes string ||| parse role	count=1
arg	play host ||| loader play host	count=2
arg	the the status ||| status wait_timeout	count=1
arg	a username ||| username	count=1
arg	change user password ||| cursor module user password	count=1
function	copies ||| copy	count=1
function	module ||| module for add	count=1
function	convert them [function_2] ||| [function_2] [function_1]	count=1
function	size ||| format disk size	count=1
function	argument specifiation ||| argument spec	count=1
module	instances for ||| modules	count=1
function	compatibility between the driver ||| compatibility	count=1
function	downtime ||| servicegroup svc downtime	count=1
module	metadata for a ||| modules cloud rackspace	count=2
function	of the documentation and ||| get	count=1
class	execute the ||| clc load	count=1
module	/etc/sysconfig/rhn/up2date ||| packaging os	count=1
function	ensures the given set ||| ensure	count=1
arg	of pip command to ||| pip chdir	count=1
function	removes ||| remove	count=2
function_arg	run [arg_2] ||| [arg_2] [function_1]	count=1
function	include line up ||| include	count=1
function_arg	handler [arg_2] ||| [arg_2] [function_1]	count=2
function	add glob ||| add glob to array	count=2
function	valid ||| valid	count=3
function	proxy protocol enabled ||| proxy protocol	count=1
function	returns a list ||| list	count=1
function	paginated operations ||| paginated	count=2
arg	vars_cache ||| varname	count=1
function	because [function] ||| [function] unlabeled device	count=3
function_arg	[function_1] the iterator ||| [arg_2] [function_1]	count=3
arg	dict_b return true ||| dict_b	count=1
function	a new certificate ||| get certificate	count=1
arg	:arg filepath the filepath ||| filepath	count=1
arg	url ||| url	count=4
module	find ||| cloud amazon	count=2
function	tuple if present ||| as tuple	count=1
class	retrieves rule and ||| watch event rule manager	count=1
arg	check if [arg] used ||| version connection [arg]	count=1
arg	set of commands ||| commands	count=2
class	retrieves rule ||| event rule	count=1
function	details ||| get	count=1
arg	that they desire to ||| db privs	count=1
function	parted needs a label ||| check parted label	count=1
function	unique key ||| make rule key	count=1
arg	amis ||| release stream store	count=1
function	is [function_2] ||| [function_2] [function_1]	count=12
function	and return a temporary ||| make tmp	count=1
module	current ||| nxos	count=1
function	[function_1] to the ||| [function_1] [function_2]	count=4
arg	handle quoting [arg] based on ||| cursor mysqlvar [arg]	count=1
function	need to be removed ||| ids to remove	count=1
class	main method ||| lxc container management	count=1
module	a ||| utils	count=1
class	execute the main code ||| group	count=1
function	of ||| get link	count=1
function	return volume ||| get volume	count=2
arg	dict_a in dict_b ||| dict_a dict_b	count=2
module	from here ||| modules cloud	count=2
function	[function_1] the vm ||| [function_2] [function_1]	count=1
function	create new virtual ||| create virtual	count=2
function	to schedule ||| schedule svc	count=1
module	a previously registered system ||| packaging	count=1
function	the quoted string ||| quote	count=1
module	the main code path ||| modules cloud	count=3
function	this is only needed ||| buffered	count=1
arg	the url and store ||| module url	count=1
function	protocol [function_2] ||| [function_1] [function_2]	count=3
function	returns ||| get	count=11
function	public [function_2] ||| [function_1] [function_2]	count=5
function_arg	[function_1] cpu ||| [arg_2] [function_1]	count=1
function	clb [function_2] ||| [function_2] [function_1]	count=1
arg	templated during the regular ||| templar	count=1
module	check for differences ||| modules cloud	count=1
class	module to test ||| ansible module	count=1
module	or all ||| amazon	count=1
class	modify ||| clc modify server	count=1
function	need to ||| to remove	count=1
class	and ||| clc load	count=1
function	on the existance ||| exists	count=1
function	find ||| find server	count=1
function	key ||| key	count=4
class	details ||| cdotlun	count=1
function_arg	[function_1] [arg_2] ||| [function_1] [arg_2]	count=2004
module	convert ||| modules utilities logic	count=1
class	is ||| cloud stack	count=1
arg	pool on ||| alias location lb_id pool_id	count=1
module	lxd ||| plugins connection	count=2
module	args ||| nxos	count=1
module	of ||| packaging	count=1
function	can also search in ||| module	count=1
function	returns an ||| get	count=1
module	metadata ||| cloud rackspace	count=1
module	main method ||| cloud	count=1
function	network id ||| network id	count=2
module	in pip freeze pip ||| packaging language	count=1
arg	to change ||| lb awaited_state initial_state	count=1
function	the latest ||| repository	count=1
module	[module] throw ||| modules [module]	count=1
arg	and key are ||| key	count=1
function	clone a [function_2] ||| [function_2] [function_1]	count=2
function	of spot ||| spot	count=1
module	specified file return true ||| module_utils	count=1
module	amazon tag format ||| amazon	count=1
function_arg	[function_1] mount targets ||| [arg_2] [function_1]	count=1
class	the user ||| user	count=1
arg	before that would conflict ||| repodata old_repos zypper_version	count=1
arg	the task if they ||| task variables templar	count=1
class	user on the host ||| user	count=1
function_arg	uuid [function_1] [arg_2] ||| [function_1] [arg_2]	count=3
arg	cli command ||| cli	count=7
function	creates a volume ||| create volume	count=1
module	length if ||| cloud	count=1
module	rhn ||| packaging os	count=1
class	assemble ||| action module	count=1
arg	s3_url ||| s3_url	count=2
arg	data out to ||| data	count=1
function	have been split ||| split	count=1
module	the ||| modules storage netapp	count=2
arg	in no_log_strings ||| no_log_strings	count=1
class	been initialized with ||| connection base	count=1
module	check depending ||| clustering	count=1
class	host ||| host	count=5
class	set ||| py vmomi helper	count=1
class	deletes ||| firewall policy	count=1
arg	this iterator ||| iterator	count=1
function	subnets each identified either ||| find subnets	count=1
function	to determine if ||| has	count=1
class	rule ||| watch event rule	count=2
class	role ||| galaxy role	count=1
function	of getting [function] aside ||| [function]	count=1
function	privilege changed from escalated ||| deauthorize	count=1
module	alias or ||| amazon	count=1
arg	the request to ||| request	count=1
class	main ||| clc firewall	count=1
function	printing ||| format paths	count=1
class	network and ||| network manager	count=1
module	hash ||| modules monitoring	count=2
function	schedule downtime ||| schedule svc downtime	count=1
class	about the ||| net app cdotlun	count=1
arg	dict_b ||| dict_b	count=1
function	properties ||| set properties	count=2
class	the provided vault ||| vault	count=1
module	if ||| plugins connection	count=2
class	targets ||| watch event	count=1
module	non-interactive zypper ||| packaging os	count=1
module	receive updates ||| modules packaging os	count=1
arg	on the existence of ||| name cidr_block	count=1
module	mysql variable ||| modules database mysql	count=1
function	string [function_2] ||| [function_1] [function_2]	count=3
function	server by [function_2] ||| [function_2] [function_1]	count=1
function_arg	[function_1] module data ||| [arg_2] [function_1]	count=1
function	returns members of ||| get balancer members	count=1
class	path and handle ||| clc firewall	count=1
function	or none if file ||| from file	count=1
class	task with the ||| task	count=1
module	via the ||| cloud	count=1
arg	datacenter by calling ||| datacenter lookup_group	count=1
module	do for docker ||| plugins	count=1
function	the module ||| module	count=1
function	run the main ||| run	count=1
arg	should not be templated ||| attr value templar	count=1
function	type example of usage ||| type	count=1
function	[function_1] application from ||| [function_2] [function_1]	count=3
function	returns id ||| system id	count=1
arg	returns a getfacl/setfacl ||| module mode path follow	count=1
arg	remote path and ||| path	count=1
function	of waiting on and ||| get	count=1
class	all available [class] in data ||| [class]	count=1
module	a global mysql ||| modules database mysql	count=1
arg	datacenter and ||| location firewall_policy_id	count=1
arg	forces zypper ||| module auto_import_keys shortname	count=1
function	[function_1] domain by ||| [function_2] [function_1]	count=3
function	the ||| process	count=6
arg	of instance newgroup ||| newgroup	count=1
function	save [function_2] ||| [function_2] [function_1]	count=4
function	that need to ||| target ids to	count=1
function	used to schedule ||| schedule	count=4
arg	the play_context [arg_2] ||| [arg_2] [arg_1]	count=1
function	[function_1] spec ||| alert policy [function_1] [function_2]	count=1
module	global mysql variable to ||| mysql	count=1
function_arg	[function_1] device ||| [arg_2] [function_1]	count=1
arg	is actuall executable ||| executable	count=1
function	function to compare the ||| compare props	count=1
arg	value returned by callback ||| callback value	count=1
arg	it if it doesn't ||| group_description	count=1
function_arg	list of [arg_2] ||| [arg_2] [function_1]	count=2
function	needs a label ||| label	count=1
module	a directory and sort ||| plugins	count=1
function	gone ||| rebooted	count=1
function	all arguments have ||| check	count=1
function	connection close ||| close shell	count=1
function_arg	an [arg_2] ||| [function_1] [arg_2]	count=1
module	closes ||| plugins connection	count=2
arg	a folder ||| cf folder	count=1
function	[function_1] clc credentials ||| [function_2] [function_1]	count=7
function	destroy ||| destroy	count=1
function	service string has correct ||| services	count=1
function	the group matching the ||| group	count=1
arg	creates a datacenter this ||| profitbricks	count=1
function	convert them into the ||| make tags in	count=1
function_arg	be [function_1] [arg_2] ||| [function_1] [arg_2]	count=3
module	netvisor ||| network netvisor	count=5
function_arg	[function_1] from ||| [function_1] [arg_2]	count=1
arg	the given router ||| module router	count=1
arg	arg ||| arg	count=1
function_arg	items [arg_2] ||| [function_1] [arg_2]	count=1
arg	vpc ||| module vpc	count=1
class	the ||| load balancer	count=4
function	a dict of ||| get	count=1
function_arg	[function_1] module the ||| [function_1] [arg_2] linux_mounts	count=2
arg	piece ||| vaulttext filename	count=1
arg	msg ||| msg color	count=1
function	to attributes for ||| attributes	count=1
function	boto3 list of ||| boto3 tag list	count=2
arg	be templated during the ||| templar	count=2
arg	subscript which ||| subscript	count=1
function	[function_1] service the ||| [function_2] [function_1]	count=3
arg	set of commands to ||| commands	count=2
module	via the ||| modules cloud misc	count=1
function	policy id [function_2] ||| [function_1] [function_2]	count=1
function	variables set on ||| set host overrides	count=1
function	determines if parted ||| check parted	count=1
module	return details about the ||| modules storage	count=1
module	receive ||| modules packaging	count=1
module	stack ||| cloud amazon	count=1
arg	numeric slice amongst ||| subset_pattern	count=1
arg	of the play ||| play	count=1
module	authorization [module] given domain ||| [module]	count=1
function	the branch does not ||| branch	count=1
function	if the quoted string ||| quote	count=1
module	[module_1] later parsing ||| [module_1] [module_2]	count=8
function	a custom stat ||| custom	count=1
arg	for a host ||| host	count=3
module	device supports ||| plugins	count=1
class	that may change ||| snat pool manager	count=1
function	doesn't ||| is changed	count=1
arg	command ||| module command	count=1
function	privilege escalation method ||| become method supported	count=1
class	the rule ||| rule	count=7
arg	value in the ||| value	count=1
module	a ||| packaging os	count=2
function	parameter ||| param	count=1
module	rhn ||| module_utils	count=1
function	remote file to ||| file	count=2
class	for the hostgroup ||| hostgroup	count=1
function	add the alert ||| add alert	count=2
arg	in a ||| module	count=1
function	the state [function_2] ||| [function_2] [function_1]	count=2
module	table has all ||| modules cloud amazon	count=1
class	add ||| clc modify server	count=1
function	read a vault password ||| read vault password	count=1
function	hipchat v1 server ||| v1	count=1
function	remove the alert policy ||| remove alert policy	count=1
module	to ||| packaging	count=1
function	of [function_2] ||| [function_2] [function_1]	count=11
class	removed remotely ||| cloud watch event rule	count=1
class	signing request ||| signing request	count=2
function	valid [function] as ||| gen candidate [function]	count=1
class	certificate signing ||| certificate signing	count=1
module	nothing to do here ||| plugins	count=7
function	run on ||| on play	count=1
module	the machine via ||| modules cloud misc	count=1
arg	or decreaste ||| retention_period action	count=1
function	for dmi related facts ||| get dmi facts	count=1
module	if missing ||| modules	count=1
function	to calculate difference of ||| diff	count=1
function	calculate difference ||| diff	count=1
function	removes a volume ||| delete volume	count=1
module	previously registered system ||| os	count=1
module	execution ||| network openswitch	count=1
module	code ||| cloud centurylink	count=6
module	object for later iteration ||| modules web_infrastructure	count=1
function	an instance template ||| instance template	count=2
function	the list [function_2] ||| [function_2] [function_1]	count=2
function	find a list of ||| find	count=1
arg	if the data ||| data	count=2
arg	[arg_1] value returned ||| [arg_2] [arg_1]	count=2
module	path ||| cloud	count=3
function	to schedule downtime for ||| schedule svc downtime	count=1
function	updates [function_2] ||| [function_2] [function_1]	count=1
module	a previously ||| packaging os	count=1
function	src ||| resource definition	count=1
arg	on the [arg_2] ||| [arg_2] [arg_1]	count=1
module	for ||| connection	count=1
function	numerical ||| numerical	count=1
module	from ||| packaging	count=1
function	to create a ||| create	count=1
function	synchronize all ||| sync	count=1
module	to preserve ||| plugins	count=1
module	system to ||| packaging	count=1
function	the data ||| data	count=2
function	git ||| git host key	count=2
function	unregister a currently registered ||| unregister	count=1
function	set refs ||| set	count=1
function	of binds ||| binds	count=1
function	to group [function_2] ||| [function_2] [function_1]	count=2
function	of spot requests ||| await spot requests	count=2
arg	if the name of ||| name	count=1
function	a group [function_2] ||| [function_1] [function_2]	count=3
function	and ||| and	count=2
function	for the given role ||| role	count=1
module	or ||| amazon	count=3
arg	of a vpc ||| vpc	count=1
module_class	a nxapi ||| module_utils nxapi	count=1
function	[function] security ||| [function] security group ids	count=1
function	[function_1] for a ||| [function_2] [function_1]	count=3
class	the metadata ||| role metadata	count=1
class	bundle with swupd ||| swupd	count=1
function	variables set on ||| set	count=1
arg	managed instance ||| mig named_ports	count=1
arg	in the specified ||| module	count=1
arg	code and changed ||| changed	count=1
module	updates from ||| packaging os	count=1
module	which returns a ||| playbook role	count=1
class	collector ||| collector	count=2
function	the lease [function_2] ||| [function_1] [function_2]	count=1
function_arg	git [arg_2] ||| [function_1] [arg_2]	count=2
module	given vpc id ||| cloud amazon	count=1
function	deploy event to ||| deploy event	count=2
arg	or cpu of a ||| cpu	count=1
module_class	public [class_2] ||| [module_1] [class_2]	count=1
arg	a remote box ||| remote_user	count=1
class	ansible galaxy ||| galaxy	count=1
module	lxc ||| connection	count=1
function	a message that briefly ||| message	count=1
function	group ||| make group	count=1
function	git branch ||| git	count=1
function	the ubuntu ||| ubuntu	count=1
function	[function_1] a text ||| [function_1] [function_2]	count=1
module	for registration with ||| module_utils	count=1
class	method ||| management	count=1
function	params when ||| on missing params	count=1
function	creates a new ||| create	count=2
function	[function_1] absent ||| [function_2] [function_1]	count=10
module	shell command ||| modules system	count=1
function	is called right after ||| post update	count=1
function	each host ||| host	count=1
class	ensures ||| clc snapshot	count=1
arg	a second ||| pacman_path name state	count=1
function	downtime for all ||| servicegroup svc downtime	count=1
arg	from group_vars/<groupname> and ||| host	count=1
arg	clc rest api to ||| clc module server_params	count=1
function	attributes for this ||| attributes	count=1
module	version or alias or ||| amazon	count=1
module_class	main method ||| lxd lxdprofile management	count=1
module	[module_1] cloud ||| [module_1] [module_2]	count=1
arg	for a particular service ||| host services	count=1
function	the state ||| state	count=2
arg	task if they ||| task variables	count=1
function	when we can not ||| fail on	count=1
function	for the galaxy ||| galaxy	count=1
module	all ||| amazon	count=3
function	with a ||| with	count=1
function	the boot [function_2] ||| [function_1] [function_2]	count=3
function_arg	version of [arg_2] ||| [function_1] [arg_2]	count=2
class	code path and handle ||| load balancer	count=1
module	string typically passed ||| database mysql	count=1
function	retry the request if ||| retry	count=1
function	[function_1] [function_2] ||| [function_2] aws [function_1]	count=2
module_class	[module_1] daemon ||| [class_2] [module_1]	count=1
module	if ||| connection	count=1
module	order object for ||| modules	count=1
arg	characters :arg characters ||| characters	count=1
arg	vpc when ||| module vpc	count=1
function	set the remote ||| do remote	count=1
function	ports on a ||| ports	count=1
arg	is 'absent' if user ||| search_params	count=1
module	a collection ||| modules cloud docker	count=1
module	a given ||| module_utils	count=1
function	by the ||| key id	count=1
function_arg	compare [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	days [arg_2] ||| [arg_2] [function_1]	count=5
function	convert them into ||| tags in	count=1
function	galaxy info ||| galaxy info	count=1
function_arg	[function_1] [arg_2] so the ||| [function_1] [arg_2]	count=3
arg	or ||| module datacenter	count=1
class	nothing to do ||| connection	count=8
function	filename from the given ||| filename from	count=1
class	the certificate signing request ||| certificate signing request	count=1
function	attributes for this object ||| attributes	count=1
function	[function_1] compatibility ||| [function_1] [function_2]	count=1
function	update the ||| update	count=2
module	produce [module] list ||| [module]	count=1
function	loads a ||| load	count=3
module	the system this ||| modules system	count=2
class	run ||| lxc container management	count=1
module	builds ||| modules cloud amazon	count=1
module	class ||| plugins strategy	count=1
module	into a valid ||| plugins action	count=1
function	convert ||| to	count=4
function	log messages ||| log	count=1
function	builds the environment string ||| environment string	count=1
module	on mode args ||| network nxos	count=1
arg	in dict_b return ||| dict_b	count=1
arg	folder to ||| folder	count=1
function	the connection close ||| close	count=1
class	disabled on the elb ||| elb	count=1
module	path ||| modules cloud centurylink	count=6
class	task list ||| play	count=1
function	[function_1] checks ||| [function_1] [function_2]	count=2
module	it sees a ||| modules	count=2
module	to preserve spaces ||| plugins lookup	count=1
module	bundle-add ||| modules packaging os	count=1
function	default ||| default securitygroup	count=2
class	been initialized ||| connection	count=1
arg	specified and return the ||| options	count=1
class	invalid sources ||| sources	count=1
function	[function_1] items ||| [function_1] [function_2]	count=2
module	a server ||| modules cloud	count=1
class	connection ||| connection	count=9
module	are a vault ||| parsing vault	count=2
class	do for docker ||| connection	count=1
function_arg	[function_1] clc ||| [function_1] server [arg_2]	count=12
arg	name parameter sent ||| name	count=1
class	system returns ||| rhsm	count=1
arg	element which link points ||| connection link	count=1
arg	values specified ||| cf container src	count=1
function	validate that [function_2] ||| [function_1] [function_2]	count=4
module	nothing to ||| plugins	count=8
class	retry ||| cloud retry	count=1
arg	url and ||| url	count=1
function	existing cluster ||| cluster	count=1
arg	is none ||| content vimtype	count=2
module	line for reading a ||| modules	count=1
function	returns the name ||| name	count=1
function	flat [function_2] ||| [function_2] [function_1]	count=4
arg	characters a list of ||| characters	count=1
function_arg	encrypt a piece ||| encrypt plaintext	count=2
function	anti [function_2] ||| [function_2] [function_1]	count=1
function	the vty shell if ||| shell	count=1
module	checks ||| storage netapp	count=2
module	get the ami for ||| modules cloud amazon	count=1
module	which ||| executor	count=1
function_arg	[function_1] any submodules ||| [function_1] [arg_2]	count=3
arg	post ||| github_user github_repo reference role_name	count=1
arg	[arg_1] vpc when ||| [arg_2] [arg_1]	count=4
module	for the passed ||| modules cloud	count=1
function	list operations to ||| to	count=1
function	activate a package ||| activate	count=1
function	return the ip ||| api ip	count=1
function_arg	takes [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] to update ||| [function_2] [function_1]	count=2
module	the ||| cloud misc	count=4
function	python 2 ||| python 2	count=1
function	compare the json ||| compare	count=1
function	is a ||| is	count=2
function	convert them into the ||| tags in	count=1
arg	given xml ||| xml	count=1
function	save a remote ||| fetch	count=2
function	a remote [function_2] ||| [function_2] [function_1]	count=2
module	device supports multiplexing ||| connection	count=1
function	[function_1] host ||| [function_1] [function_2]	count=6
module	or delete an amazon ||| modules cloud amazon	count=1
arg	mount targets ||| targets	count=1
function	the path of the ||| get dhcp	count=1
class	receive updates ||| rhsm	count=2
arg	[arg_1] modifies ||| [arg_2] [arg_1]	count=3
class	path and ||| clc firewall	count=1
function	[function_1] ports on ||| [function_1] [function_2]	count=3
function	created snapshot ||| snapshot	count=1
function	argument ||| argument spec	count=1
function	clone [function_2] ||| [function_2] [function_1]	count=2
module	of the ||| packaging os	count=1
function	a volume ||| create volume	count=1
module	a new ||| cloud	count=1
module	method for ||| modules cloud	count=1
class	idemopotent function ||| host	count=1
arg	get current weight ||| host backend weight	count=2
module	a previously registered ||| packaging os	count=1
class	method ||| lxdprofile management	count=1
function	a group ||| group	count=1
function	certificate ||| certificate tokens	count=2
function	save a [function_2] ||| [function_1] [function_2]	count=6
class	returns role ||| role	count=1
arg	next url specifically in ||| url	count=1
module	return a gcp ||| module_utils	count=2
module	mysql ||| mysql	count=1
function	to filter ||| filter	count=1
arg	comma-separated list or ||| module	count=1
function	with the data ||| data	count=1
function_arg	[function_1] to stackdriver ||| [arg_2] [function_1]	count=4
module	refs for the ||| modules source_control	count=1
module	a specified ||| cloud	count=1
module	record a ||| modules cloud	count=1
class	a system from all ||| rhsm	count=1
function_arg	[function_1] pattern ||| [function_1] [arg_2]	count=2
module	a list ||| cloud	count=3
function	type ||| type	count=3
arg	[arg] security ||| [arg]	count=1
class	for the host ||| host	count=1
arg	user ||| cursor module user	count=1
function	schedule downtime for ||| schedule host svc downtime	count=1
module	extracts [module_2] ||| [module_1] [module_2]	count=1
class	path and handle ||| load balancer	count=1
function_arg	enables notifications [arg_2] ||| [arg_2] [function_1]	count=2
module_class	for the [class_2] ||| [module_1] [class_2]	count=7
function	targets that need to ||| ids to remove	count=1
class	path and handle ||| clc load balancer	count=1
module	handle the ||| modules	count=3
arg	resource record ||| record	count=1
function	[function_1] config ||| [function_2] [function_1]	count=1
function	proxy protocol policy if ||| proxy protocol policy	count=1
function	version of ||| get version	count=3
class	main code ||| load	count=1
arg	zone to local ||| in_path out_path	count=1
class	code path ||| clc group	count=1
function	[function_1] to ||| [function_1] [function_2]	count=16
function	return [function_2] ||| [function_1] [function_2]	count=8
function	downtime for all ||| servicegroup host downtime	count=1
function	of ||| get file	count=2
function	keys at ||| keys	count=1
arg	returns expanded ||| func result_key next_token	count=1
function	branch does not yet ||| branch	count=1
function	[function_1] balancer as ||| [function_1] [function_2]	count=1
function	of newlines ||| count newlines from	count=1
module	or overwrites a ||| cloud google	count=1
function	information about a disk ||| info	count=1
class	supplied vault ||| vault	count=1
module	stack ||| modules cloud amazon	count=1
module	the system to ||| modules packaging os	count=1
class	the server based ||| server	count=1
arg	for a digest_method ||| filename algorithm	count=1
arg	differences in ||| module cloud	count=1
arg	if string ||| string	count=1
function_arg	changed items [arg_2] ||| [function_1] [arg_2]	count=1
function	ensures the ||| ensure	count=9
module_class	[module_1] rule ||| [module_1] cloud watch event [class_2]	count=1
arg	a datacenter by ||| datacenter	count=1
arg	executed when we want ||| action_condition wait_condition	count=1
function_arg	on [arg_2] ||| [arg_2] [function_1]	count=1
function	environment ||| get environment	count=1
function	number of newlines at ||| newlines	count=1
function	remove [function_2] ||| [function_2] [function_1]	count=3
arg	second ||| module pacman_path	count=1
function	for assignment of the ||| get	count=1
function	create an absolute ||| absolute location	count=1
function	recreate tags [function_2] ||| [function_1] [function_2]	count=3
function	list of ||| get servers	count=4
class	server ||| clc server	count=2
module	generator object for ||| modules	count=1
module	[module_1] system this ||| [module_1] [module_2]	count=4
module	input ||| modules cloud google	count=1
module	in ||| docker	count=1
module	on success update ||| cloud	count=1
function	testsuite report from the ||| report	count=1
function	writes initial ||| initial	count=1
arg	templated specially in the ||| attr value templar	count=1
function	the remote ||| remote	count=2
class	code path ||| load balancer	count=1
module	start the machine ||| modules cloud misc	count=1
module	which returns a galaxyinfo ||| playbook	count=1
function	the alert policy is ||| alert policy	count=1
function	zone in ||| zone	count=1
arg	from the data ||| data	count=1
function	[function_1] state ||| [function_2] [function_1]	count=9
module	execute the main code ||| modules cloud	count=3
arg	dns ||| gcdns	count=1
function	base argument specifiation common ||| argument spec	count=1
function	[function_1] policy ||| [function_1] [function_2] id	count=3
function	removes mount ||| delete mount	count=2
function	handle the request ||| process request	count=3
arg	of packages ||| m packages	count=1
function	inventory which ||| inventory	count=1
class	updates ||| rhsm	count=2
function	list of host ||| get	count=1
module	string for user ||| modules database	count=1
function	[function_1] the file ||| [function_2] [function_1]	count=5
arg	templated specially ||| attr value templar	count=1
function	if parted [function_2] ||| [function_2] [function_1]	count=2
function	only possible [function] ||| [function]	count=2
class	[class_1] and target ||| [class_2] [class_1]	count=2
arg	vars sent ||| vars play	count=1
function	of subnets ||| subnets	count=1
function	and write it to ||| get	count=1
function	to be removed ||| ids to	count=1
function	all active interfaces ||| interfaces dict	count=1
function	transfer a file from ||| put file	count=1
module	the system ||| modules	count=1
module	the netvisor ||| netvisor	count=5
function	return pool ||| get pool	count=4
module	do here ||| connection	count=7
function	admin ||| admin	count=1
module	back details [module] particular ||| [module]	count=1
arg	of events to monitor ||| fileobj events	count=1
function	[function_1] library supports ||| [function_2] [function_1]	count=2
class	pools for ||| rhsm pools	count=1
class	existing container ||| container	count=1
function	protocol enabled ||| protocol	count=1
function	run sanity checks ||| sanity check	count=2
function	secret when ||| execute	count=1
function	if the device supports ||| close	count=1
module	download the [module_2] ||| [module_1] [module_2]	count=2
function	a list of subnets ||| find subnets	count=1
function	execute ||| execute	count=1
function	default network interface ||| default nic	count=1
module	of ||| cloud azure	count=1
function_arg	right after entity ||| post update entity	count=1
class	request ||| acmeclient	count=1
function	the alert policy to ||| add alert policy to	count=1
class	for docker ||| connection	count=1
function	the configuration ||| config	count=1
function	creates a unique key ||| rule key	count=1
module	return ||| cloud vmware	count=2
function	the vty shell ||| close shell	count=1
function	of newlines at the ||| count newlines from	count=1
class	the device ||| connection	count=1
class	function to ||| host	count=1
function	add ||| add host	count=1
function	system state ||| system state	count=2
function	can do pipelining ||| is pipelining	count=1
function_arg	[function_1] [arg_2] ||| [function_1] is absent [arg_2]	count=1
function	the request ||| request	count=4
arg	and are ||| manager	count=1
function	newlines at the ||| count newlines	count=1
function	of nodes exist ||| lbpool nodes set	count=1
function	[function] <name>01 ||| create default [function]	count=1
function	request ||| request	count=6
module	the machine via ||| cloud misc	count=1
function	a size in bytes ||| format disk size	count=1
function	run on start ||| playbook on play start	count=1
function	when we can ||| fail on	count=1
function_arg	[function_1] from gce ||| [function_1] [arg_2]	count=2
module	a check depending ||| modules clustering	count=2
arg	from b take precedence ||| b	count=1
arg	which is templated ||| attr value templar	count=1
class	process ||| affinity policy	count=1
arg	splits ||| ds new_ds k v	count=1
class	code path and handle ||| clc load	count=1
module	generate a ||| modules cloud docker	count=1
class	class ||| strategy	count=1
module	about ||| modules storage netapp	count=2
arg	specified service ||| services	count=1
class	for ansible galaxy roles ||| galaxy cli	count=1
arg	sensible [arg_2] ||| [arg_2] [arg_1]	count=4
function	if ||| is	count=1
function	[function_1] mode ||| [function_1] [function_2]	count=1
arg	installed or not ||| module name depot	count=1
class	the main code path ||| firewall	count=1
arg	change user ||| module user	count=1
function	write a byte string ||| write	count=1
function	[function_1] volume from ||| [function_1] [function_2]	count=3
function	[function] dicts ||| dict to boto3 [function]	count=1
arg	2 versions ||| module git_path dest repo	count=1
arg	be templated ||| attr value templar	count=1
module	lxd nothing to ||| plugins	count=1
arg	[arg_1] 'absent' ||| [arg_1] [arg_2]	count=3
function	to preserve ||| parse	count=1
arg	retrieve all nat ||| client subnet_id allocation_id check_mode	count=1
arg	a vpc when supplied ||| module vpc	count=1
function	schedule downtime for ||| schedule servicegroup host downtime	count=1
class	to the ||| acmeclient	count=1
arg	created with [arg] ||| volume [arg]	count=1
arg	in the name ||| name	count=1
function	run input sanity ||| additional sanity	count=1
function	returns an entry ||| entry	count=1
function_arg	[function_1] packages ||| [arg_2] [function_1]	count=3
arg	attribute ||| attribute number	count=1
module	code path and ||| cloud	count=3
class	of an azure ||| azure	count=1
function	ubuntu ||| lookup ubuntu	count=1
function	matching ||| by displayname	count=2
arg	the permissions bit if ||| etype entity permissions use_nfsv4_acls	count=1
function	when executing the remote ||| compute	count=1
arg	tag in ||| tag	count=1
arg	set of events to ||| events data	count=1
module	for docker ||| connection	count=1
function_arg	spot requests [arg_2] ||| [arg_2] [function_1]	count=3
class	and ||| load	count=1
arg	[arg] to ||| host [arg]	count=3
function	proxy ||| proxy	count=3
function	file is not ||| file	count=1
arg	name it appears in ||| name	count=1
function	a ||| get	count=1
function	[function_1] [function_2] ||| [function_1] docker [function_2]	count=2
arg	zone ||| zone	count=1
class	the main code path ||| load balancer	count=1
module	for differences ||| modules cloud	count=1
function	inventory ||| generate retry inventory	count=1
class	get ||| alert policy	count=1
function	returns the correct action ||| get	count=1
function	response ||| response	count=2
function_arg	[function_1] a piece ||| [function_1] [arg_2]	count=2
module	write it ||| modules	count=1
function_arg	[function_1] in a ||| [function_1] [arg_2]	count=1
module	we've been initialized ||| connection	count=1
module	a dictionary ||| cloud	count=1
module	a given ||| cloud centurylink	count=1
module	all of ||| cloud amazon	count=1
function	checks that the ||| check	count=1
function	the wait ||| wait for	count=3
class	the host to ||| host	count=1
module	the device supports multiplexing ||| connection	count=1
function	log information to the ||| log	count=1
function	returns the lambda function ||| get lambda	count=1
arg	and kickstart ||| module image_name kickstart	count=1
function	and get ||| get local	count=1
function	to add ||| add	count=3
function	used to write ||| write	count=1
arg	name and desired ||| name	count=1
arg	the url ||| url	count=1
function	connect to lxd ||| connect	count=1
arg	given path ||| path	count=1
arg	google libcloud driver ||| provider get_driver user_agent_product	count=1
arg	path ||| module executable path	count=1
function	reloaded containers were reloaded ||| reload reason	count=1
function_arg	aws [arg_2] ||| [arg_2] [function_1]	count=1
function	return the path of ||| get dhcp	count=1
function	deploy ||| deploy	count=2
function	that need to be ||| target ids to remove	count=1
function	for module error title ||| failure title from	count=1
module	[module_1] [module_2] ||| [module_1] cloud [module_2]	count=1
function	handlers this is done ||| handlers	count=1
arg	[arg_1] libcloud driver ||| [arg_1] [arg_2]	count=1
function	file over http ||| file from	count=1
module_class	[module_1] dimension ||| [class_2] [module_1]	count=1
class	a json group ||| logic monitor	count=1
class	elbs ||| elb manager	count=1
module	[module_1] for the ||| [module_2] [module_1]	count=3
arg	when the playbook specifies ||| terms variables	count=1
class	the main ||| container	count=1
function	size in ||| format disk size	count=1
module	alias or none ||| cloud amazon	count=1
function	function which ||| inventory	count=1
function	remote file ||| file	count=2
arg	uninstalls ||| module port_path	count=1
arg	templated specially in ||| value templar	count=1
module	or overwrites ||| google	count=1
function	lists the roles ||| list	count=1
function	[function_1] checksum given ||| [function_2] [function_1]	count=2
function	determine if changes ||| system state change	count=1
module	to receive ||| modules packaging os	count=1
function	to schedule downtime for ||| schedule servicegroup svc downtime	count=1
arg	forces zypper to ||| auto_import_keys shortname	count=1
function	decrypt the ||| decrypt	count=1
module	connection nothing ||| connection	count=6
function	boto3 list of resource ||| boto3 tag list	count=1
module	if any ||| modules cloud docker	count=2
arg	[arg_1] and tags ||| [arg_2] [arg_1]	count=2
arg	play_context [arg_2] ||| [arg_1] [arg_2]	count=1
function_arg	creates a [arg_2] ||| [arg_2] [function_1]	count=4
function	[function_1] play ||| [function_1] [function_2]	count=1
class	system to receive ||| rhsm	count=2
function	path is relative ||| prefix login path	count=3
module	[module_1] for a ||| [module_2] [module_1]	count=1
arg	host_vars/<hostname> in directories parallel ||| group new_pb_basedir return_results	count=1
function	all valid [function] as ||| gen candidate [function]	count=1
module_class	to self value ||| modules system timezone	count=1
function	to a [function] of inventory ||| [function]	count=1
module	updates from ||| modules packaging os	count=1
arg	folder to cloud files ||| folder container	count=1
class	another network [class_2] ||| [class_1] [class_2]	count=1
module	the ||| packaging os	count=4
function	newlines at the ||| newlines from	count=1
function	determine which subnets need ||| set subnets	count=1
function	will override those ||| variable override	count=1
module	a lambda ||| cloud	count=1
function	vserver exists ||| get vserver	count=1
function	add the ||| add	count=2
arg	[arg] character specs ||| [arg]	count=1
module	a list of ||| modules cloud	count=3
function	first for dmi related ||| dmi	count=1
class	a system ||| rhsm	count=1
function	[function] so-called ||| [function] magic	count=3
function	[function_1] limits ||| [function_2] [function_1]	count=1
function	changes the [function_2] ||| [function_1] [function_2]	count=1
module	[module_1] s3 arguments ||| [module_2] [module_1]	count=2
function	to a boto3 ||| boto3 tag	count=1
class	code path and ||| clc group	count=1
function_arg	[function_1] lb ||| [function_1] [arg_2]	count=4
arg	the request to the ||| request	count=1
function	new style ||| new style args	count=2
function	fetch the ||| fetch	count=1
module	return ||| modules storage	count=1
arg	subscript ||| subscript	count=1
module	display [module] user note ||| [module]	count=1
function	[function_1] mount targets ||| [function_1] [function_2]	count=1
module	which returns ||| playbook	count=1
function	subset ||| subset	count=1
function	loads a list of ||| load	count=2
function	ids and converts them ||| ids	count=1
function	post ||| post	count=2
arg	module ansible module ||| module client	count=1
function	facts for a ||| facts	count=1
function	which actions ||| selector	count=2
module	record a collection ||| cloud docker	count=1
function	a list [function] ||| [function]	count=1
function	deactivate a ||| deactivate packages	count=1
arg	retrieve the ||| check_mode	count=1
function_arg	to find [arg_2] ||| [function_1] [arg_2]	count=3
function	[function_1] compatibility between ||| [function_2] [function_1]	count=1
function	provided anti affinity policy ||| aa policy	count=1
function_arg	tempfile [arg_2] ||| [arg_2] [function_1]	count=1
module	metadata [module_2] ||| [module_2] [module_1]	count=4
arg	a registered file object ||| fileobj	count=1
arg	of containers ||| containers	count=1
function	self group to ||| make group	count=1
function	to a dict ||| dict	count=2
function	which will override those ||| and variable override	count=1
function	[function_1] cache time ||| [function_1] [function_2]	count=5
function	determine if changes are ||| change	count=1
module	closes the ||| plugins	count=1
module	the args for the ||| modules	count=1
module	returns ||| modules system	count=1
function	downtime for all hosts ||| downtime	count=1
function	if ||| has	count=2
module	lxd nothing to do ||| plugins	count=1
function	by the boto3 api ||| api	count=1
arg	account ||| module account	count=1
arg	is templated specially in ||| value templar	count=1
function	mount [function_2] ||| [function_1] [function_2]	count=1
function	a zone ||| get zone	count=1
module	self ||| modules system	count=1
arg	those expected ||| module_params	count=1
function	vserver exists ||| vserver	count=1
class	if an anti affinity ||| clc anti affinity	count=1
function	the keys the ||| keys	count=1
function	alias if ||| alias	count=1
module	while removing the ||| modules	count=1
module	execution ||| network asa	count=1
function	[function_1] mapping from ||| [function_1] [function_2]	count=6
function	[function_1] hostnames ||| [function_2] [function_1]	count=1
function	removes [function_2] ||| [function_2] [function_1]	count=3
function	for module ||| main	count=1
arg	tag in the name ||| name tag	count=1
function	to add the ||| add host key	count=1
arg	ovirt entity ||| entity	count=1
function	of strings ||| get	count=1
function	used to schedule ||| schedule svc	count=1
function	a list of host ||| get	count=1
arg	existence of a vpc ||| module vpc name cidr_block	count=1
function	[function_1] policies ||| [function_1] [function_2]	count=5
class	add ||| strategy base	count=1
function	then write to ||| write to	count=2
class	as directed for ||| rhsm	count=1
function	resource limits ||| different resource limits	count=1
class	makes sure ||| clc anti affinity	count=1
function_arg	difference of [arg_2] ||| [function_1] [arg_2]	count=1
class	handler ||| handler	count=1
function	branch ||| remote branch	count=2
module	[module_1] registration ||| [module_1] [module_2]	count=2
class	the elb ||| elb manager	count=1
arg	each bond member if ||| _bondmems	count=1
module	the ansiblemodule used for ||| modules	count=1
module	a connection failure ||| plugins connection	count=1
function	an entity id ||| id	count=1
module	extract host bindings if ||| modules cloud	count=1
function	[function_1] tags from ||| [function_1] [function_2]	count=1
arg	in hash is different ||| module	count=2
function	add it ||| add	count=1
function	path ||| prefix login path	count=3
module	check for differences in ||| modules	count=2
class	a task if ||| task executor	count=1
function	balancer as a generator ||| balancer	count=1
function	convert them ||| in	count=1
function	sync settings ||| sync	count=1
function	add ||| add	count=11
arg	'absent' if ||| search_params	count=1
function	digest ||| digest from	count=1
function	reads results ||| pending results	count=1
function	and get the latest ||| get repository	count=1
class	existing container config ||| container	count=1
function	contains a range ||| range	count=1
module	function to ||| monitoring	count=1
arg	uploads a folder to ||| cf folder	count=1
function	to add the hostkey ||| add	count=1
module	for ||| modules cloud google	count=2
function	ovirt [function_2] ||| [function_1] [function_2] full argument spec	count=1
function	the params ||| params	count=1
function	task ||| v2 runner	count=1
arg	of commands to the ||| commands	count=2
module	successful otherwise false ||| modules database postgresql	count=1
module	the system ||| modules system	count=5
function	is vault encrypted return ||| get	count=1
function	module code ||| module	count=1
class	server based on the ||| modify server	count=2
module	code path ||| modules cloud centurylink	count=3
module	the connection nothing ||| plugins	count=6
function	which loads ||| load inventory	count=2
module	function ||| modules monitoring	count=2
function	specified by self ||| set elb	count=1
function	list of handlers this ||| handlers	count=1
function	[function_1] group name ||| [function_2] [function_1]	count=3
function	remove the [function_2] ||| [function_2] [function_1]	count=12
arg	module data out ||| remote_path data	count=1
function	lease [function_2] ||| [function_1] [function_2]	count=1
function	ami ||| ami	count=1
module	for a ||| modules system	count=1
class	[class_1] data ||| [class_1] [class_2]	count=1
function	quoted ||| quote	count=1
arg	remote branch version ||| module dest remote	count=1
module	given ||| misc	count=1
function	the lease ||| lease	count=1
function	volume ||| create volume	count=2
module	the machine via ||| modules cloud	count=1
function	to be removed ||| to remove	count=1
function	create a default network ||| create default nic	count=1
module	system ||| module_utils	count=3
function	of device returns ||| get	count=1
module	filter for ||| plugins filter	count=1
function	or [function] login window ||| update system [function]	count=1
function	on target application from ||| pubnub application	count=1
class	host we've been ||| connection base	count=1
arg	[arg_1] modifies an ||| [arg_2] [arg_1]	count=3
function	stop [function_2] ||| [function_2] [function_1]	count=2
arg	value of recs[ref][key] ||| recs key filter_func	count=1
arg	in no_log_strings from value ||| no_log_strings	count=1
function	a vault password from ||| vault password	count=1
arg	handle quoting [arg] ||| cursor mysqlvar [arg]	count=1
function	searches ||| search	count=1
module	and the database ||| modules database mongodb	count=2
function	[function_1] the wait ||| [function_2] [function_1]	count=3
module	write it to the ||| web_infrastructure	count=1
function	has a template ||| template	count=1
class	retrieves rule and ||| event rule manager	count=1
class	hash ||| host	count=2
class	the crontab ||| cron tab	count=1
arg	remote ||| dest remote	count=1
function	from remote sources ||| fetch	count=1
function	enables notifications for ||| enable svc notifications	count=1
module	as directed ||| module_utils	count=1
function	[function_1] lambda function ||| [function_2] [function_1]	count=1
function	[function_1] wait argument ||| [function_2] [function_1]	count=3
module	for an amazon resource ||| modules cloud amazon	count=1
function	instance ids installed in ||| instance ids	count=1
arg	kickstart ||| image_name kickstart	count=1
function	[function_1] hipchat v1 ||| [function_2] [function_1]	count=1
function	vault [function_2] ||| [function_1] [function_2]	count=7
function	check ||| sanity check	count=2
module	filter for jinja2 ||| plugins filter	count=1
module	return a gcp connection ||| module_utils	count=2
arg	templated specially in the ||| value templar	count=1
class	to do for docker ||| connection	count=1
module	for example ||| modules cloud amazon	count=1
function	determine if the quoted ||| quote	count=1
function	a file from local ||| file	count=1
arg	choose where to put ||| remote_path	count=3
function	change attributes ||| converge	count=1
function	api tuple if ||| api listener as tuple	count=1
function_arg	list the [arg_2] ||| [function_1] [arg_2]	count=3
arg	[arg] and ||| [arg]	count=2
class	the main ||| balancer	count=1
class	about the ||| net app	count=1
function	policy ||| policy present	count=1
class	we've been initialized with ||| connection	count=1
arg	of events ||| fileobj events	count=1
function	get installed [function_2] ||| [function_1] [function_2]	count=2
function	read a vault ||| read vault	count=3
function	the current ||| make current	count=1
class	handle the ||| firewall policy	count=1
arg	value is a ||| value	count=1
module	the system ||| os	count=1
arg	object ||| obj	count=2
function	ensure ||| ensure present	count=1
arg	the git ||| git_path	count=1
function	a network domain ||| get network domain	count=2
function	[function_1] the properties ||| [function_1] [function_2]	count=2
module	hostgroup ||| modules monitoring	count=1
function	[function_1] vm ||| [function_1] [function_2]	count=1
arg	of task vars sent ||| vars	count=1
function	if the device ||| close	count=1
module	the main method ||| modules cloud	count=1
function	[function_1] level shell ||| [function_2] [function_1]	count=3
function	temporary [function_2] ||| [function_2] [function_1]	count=4
function_arg	[function_1] given task ||| [arg_2] [function_1]	count=2
arg	[arg_1] dict_b return ||| [arg_2] [arg_1]	count=2
function_arg	[function_1] mount targets ||| [function_1] name tags [arg_2]	count=1
function	changes ||| system state change	count=2
function_arg	of the [arg_2] ||| [function_1] [arg_2]	count=3
function	remove [function_2] ||| [function_1] [function_2]	count=3
arg	line to see ||| line	count=1
class	path and handle ||| clc	count=3
module	[module_1] required for ||| [module_2] [module_1]	count=2
function	from fstab ||| unset	count=1
module	present for ||| modules cloud	count=1
function	from a file or ||| file	count=1
function	any matching containers that ||| deployed containers	count=1
function	builds the environment ||| environment	count=1
function	create an absolute ||| absolute	count=1
module	a collection ||| modules cloud	count=1
module	checks to see if ||| modules storage netapp	count=1
arg	password ||| password	count=2
class	we've been initialized with ||| base	count=1
function	searches for roles on ||| execute search	count=1
function	output around [function] output like ||| filter non [function]	count=1
module	to the host ||| connection	count=1
function	validation ||| validate	count=5
module	git ||| modules source_control	count=1
class	the ||| net app	count=1
class	a block value ||| block	count=1
function_arg	[function_1] account model ||| [arg_2] [function_1]	count=5
class	some ||| base	count=1
function	size in bytes ||| size	count=1
function	of a command run ||| command	count=1
function	a nic ||| nic	count=1
function	[function_1] given firewall ||| [function_1] [function_2]	count=1
function	need to be removed ||| ids to	count=1
function	[function_1] properties ||| [function_2] [function_1]	count=2
function	connect to the lxc ||| connect	count=1
function_arg	[function_1] the clc ||| [arg_2] [function_1]	count=5
function	changes the state ||| change instance state	count=1
function	default security ||| default securitygroup	count=1
function	find the ||| find	count=2
module	return details ||| netapp	count=1
arg	the repository already ||| module repodata overwrite_multiple	count=1
function	explicit environment ||| get environment	count=1
class	return details ||| net	count=1
arg	the key ||| key	count=1
function	[function_1] the six ||| [function_1] [function_2]	count=3
module	updates from subscription-manager ||| modules packaging os	count=1
module	the lxc ||| plugins	count=1
arg	hosts in the current ||| arg	count=1
arg	account model ||| account	count=1
class	main ||| clc	count=3
class	[class] combined ||| docker [class]	count=3
arg	tags from ||| tags	count=1
function_arg	[function_1] the provided ||| [function_1] alias location [arg_2]	count=3
function	[function_1] mapping ||| [function_1] [function_2]	count=6
function	to be removed ||| target ids to remove	count=1
function	stopped ||| stopped	count=1
function	task to ||| next task	count=1
function	the days the ||| days	count=1
function_arg	group [arg_2] ||| [arg_2] [function_1]	count=6
function	to array of strings ||| get	count=1
module	of ||| network nxos	count=1
function	when ||| v2 runner on	count=1
arg	hosts [arg] by ||| [arg]	count=1
function	split ||| split	count=1
function	without the subscript ||| subscript	count=1
function	of key ids and ||| key ids	count=1
function	mode ||| mode	count=1
class	the ||| group	count=2
function	image ||| image	count=3
class	receive updates from subscription-manager ||| rhsm	count=2
arg	a user ||| cursor user	count=3
module	the connection ||| plugins connection	count=8
function	collector ||| get collector by description	count=2
function	array of strings with ||| get image	count=1
function	digest of local file ||| digest from	count=1
function	tries to parse ||| parse	count=1
module	request_spot_instances() method for ||| modules cloud	count=1
class	for registration ||| rhsm	count=1
arg	bond member ||| _bondmems	count=1
arg	a host in ||| host	count=2
function	add nodes to ||| add lbpool nodes	count=1
arg	values specified ||| cf container	count=1
function	the branch ||| remote branch	count=1
module	if certificate with ||| modules system	count=1
class	destination ||| acmeclient	count=1
function	in a format ||| format	count=1
module_class	new [class_2] ||| [module_1] [class_2]	count=4
class	remotely ||| watch event rule manager	count=2
function	file [function_2] ||| [function_2] [function_1]	count=1
function	server certificate if ||| server	count=1
function_arg	id or return ||| id module datacenter	count=1
function	the named ||| update named	count=1
function	values ||| parameter values	count=1
function	convert self group to ||| make group	count=1
function	import ||| create import	count=1
arg	forces zypper to refresh ||| auto_import_keys shortname	count=1
function	the configuration is ||| config	count=1
class	execute ||| clc firewall	count=1
function	used to schedule ||| schedule host svc	count=1
class	do ||| connection	count=8
arg	or modifies ||| module vpc_conn	count=2
function_arg	of the [arg_2] ||| [function_1] version [arg_2]	count=2
class	and ||| firewall policy	count=2
function	zone by [function_2] ||| [function_2] [function_1]	count=3
function	vty shell if the ||| close shell	count=1
arg	or return a default ||| module	count=1
class	update the host to ||| host	count=1
arg	to a single base64-encoded ||| as_list strict_mode preserve_rc	count=1
function	stop the ||| stop	count=1
function	return the mtime time ||| get	count=1
function	[function_1] is absent ||| [function_1] [function_2]	count=7
function	return a temporary path ||| tmp path	count=1
function_arg	[function_1] git repo ||| [arg_2] [function_1]	count=3
function	execute ||| process	count=3
module	combines the non-interactive zypper ||| packaging os	count=1
function	with the ||| with	count=2
class	the main code ||| policy	count=1
function	it is not ||| from	count=1
module	string for [module_2] ||| [module_1] [module_2]	count=4
arg	logic for ansible ||| module	count=1
function	create is ||| create	count=1
class	updates ||| clc firewall policy	count=1
function	generate a message ||| message	count=1
function	for dmi related facts ||| dmi facts	count=1
function	load [function_2] ||| [function_2] [function_1]	count=3
function	check if the ||| check	count=1
function	returns the balancer ||| balancer	count=1
function	node ||| node	count=1
function	dmi related ||| dmi	count=1
class	selector [class_2] ||| [class_2] [class_1]	count=2
class	<name>01 to associate ||| azure rmmodule base	count=1
function	main ||| process	count=3
class	process ||| anti affinity policy	count=1
function	json ||| json	count=1
module_class	[module_1] backends ||| [module_1] [class_2]	count=3
arg	on a managed ||| mig named_ports	count=1
function	format into bytes ||| bytes	count=1
function	the list ||| list	count=1
arg	in the datastructure ||| ds	count=1
class	the supplied vault ||| vault	count=1
arg	script and ||| vault_password_file loader	count=1
module	system to ||| modules packaging	count=1
function	members ||| members	count=1
module	if a server ||| modules cloud centurylink	count=1
function	if they are set ||| set	count=1
function	[function_1] of the ||| [function_2] [function_1]	count=27
function	with become ||| do become	count=1
function	shred ||| shred	count=1
function	find a [function_2] ||| [function_1] matching [function_2]	count=3
function	retention of messages in ||| retention action	count=1
function	low level [function_2] ||| [function_1] [function_2]	count=1
class	console ||| console	count=1
module	receive updates ||| packaging	count=1
function	[function] repo dictionary ||| [function]	count=3
function	is a class ||| handler	count=1
function	[function_1] lxc ||| [function_2] [function_1]	count=2
function	file from remote to ||| file	count=2
class	using the supplied vault ||| vault cli	count=1
function	[function_1] exists ||| [function_1] [function_2]	count=5
class	lxd nothing to ||| connection	count=1
class	the system to ||| rhsm	count=2
class	main code ||| clc load	count=1
class	to the ||| base	count=1
function	return the name of ||| get name	count=2
module	[module_1] [module_2] alert policy ||| [module_1] [module_2]	count=2
class	backup ||| ansible module	count=1
class	the main method ||| lxc	count=1
arg	new or ||| module	count=1
class	the host we've ||| connection	count=1
function	of ||| get fqdn	count=1
arg	repo if ||| repo dest	count=1
function	start ||| create	count=1
module	version or alias or ||| cloud amazon	count=1
function	an ||| obj	count=1
arg	port ||| port	count=4
module	to ||| web_infrastructure	count=1
class	to the provided rhsm ||| rhsm	count=1
arg	path to be ||| path	count=1
module	is ||| packaging os	count=1
function	title ||| title from	count=1
module	this ||| modules network netvisor	count=1
module	the main code path ||| cloud centurylink	count=3
module	driver and the database ||| modules database	count=1
function	changes the state of ||| change instance state	count=1
function	a tempfile ||| tempfile	count=1
function	portion of ||| get	count=1
module	delete an ||| cloud	count=2
module	an ||| cloud	count=7
module	all of the ||| modules	count=1
module	been initialized with ||| plugins	count=1
module	a collection of ||| cloud	count=1
function	of handlers ||| handlers	count=1
function	a dictionary ||| dict	count=1
class	to do here ||| connection	count=7
function	rule in the ||| rule	count=1
function	nodes ||| lbpool nodes	count=1
function_arg	run the [arg_2] ||| [function_1] [arg_2]	count=1
arg	server_url ||| server_url	count=1
function	dict keys and ||| dict	count=1
function	create and ||| create	count=1
class	execute the main code ||| clc load	count=1
function	create is required to ||| create	count=1
function_arg	[function_1] number ||| [arg_2] [function_1]	count=1
function	spot requests ||| await spot requests	count=2
module	collector ||| modules monitoring	count=1
function	a unique key ||| make rule key	count=1
function	name of the ||| get name	count=2
arg	the server ||| profitbricks datacenter_id server_id	count=1
arg	assign the specified ||| result_item	count=1
function	named [function_2] ||| [function_1] [function_2]	count=3
arg	not be templated during ||| attr value templar	count=1
class	handle the ||| group	count=1
module	receive updates ||| os	count=1
function	[function] information ||| format [function] pool	count=3
module	removing the ||| modules	count=1
arg	python [arg] into ||| [arg]	count=1
arg	a particular service ||| host services minutes	count=1
function	post validation of vars ||| post validate	count=1
arg	events ||| fileobj events	count=1
arg	[arg_1] true_val ||| [arg_1] [arg_2]	count=1
function	[function_1] library aos-pyez ||| [function_2] [function_1]	count=1
function	remove the value associated ||| remove value	count=1
arg	msg ||| msg color stderr	count=1
module	about the ||| modules	count=1
function	status code ||| status code	count=1
arg	it doesn't ||| group_description	count=1
module	[module_1] an amazon ||| [module_1] [module_2]	count=2
function	temporary [function_2] ||| [function_1] [function_2]	count=4
function	[function_1] path ||| [function_1] [function_2]	count=6
class	for ||| connection	count=1
function	determine if changes are ||| state change	count=1
module	code path ||| centurylink	count=3
module	synchronize all of the ||| packaging os	count=1
arg	all possible ||| array	count=1
module	the ||| system	count=1
function	port [function_2] ||| [function_1] [function_2]	count=2
module	takes a list of ||| cloud amazon	count=1
arg	if dict_a in ||| dict_a	count=1
class	datasource ||| datasource	count=1
function	[function_1] the request ||| [function_2] [function_1]	count=2
module	mysql variable to ||| modules database mysql	count=1
function	an ||| execute	count=1
module	on the ||| modules cloud	count=5
function	message to ||| msg	count=2
arg	entity is created ||| entity	count=1
function	vault password from a ||| vault password	count=1
arg	[arg_1] true_val ||| [arg_2] [arg_1]	count=1
function	the remote [function_2] ||| [function_2] [function_1]	count=2
function_arg	[function_1] the iterator ||| [function_1] lockstep hosts [arg_2]	count=3
function	update grimoire collections ||| update codex	count=1
function	event [function_2] ||| [function_1] [function_2]	count=1
function	format ||| format	count=5
function	and/or attributes return ||| alter	count=1
class	that ||| snat pool manager	count=1
function	[function_1] request ||| [function_2] [function_1]	count=2
function	host_vars file ||| file	count=1
function	group matching ||| group	count=1
module	details about ||| modules	count=1
function	containing git branch commit ||| git	count=1
function	for required [function] ||| [function]	count=3
arg	the clc ||| clc module svr_uuid alias	count=1
module	target ||| modules cloud pubnub	count=1
function	the library aos-pyez ||| aos version	count=1
function	subnet ||| subnet	count=1
function	shell ||| shell	count=1
function	removes a [function_2] ||| [function_1] [function_2]	count=2
module	on ||| cloud	count=1
function	value associated with the ||| value	count=1
arg	given key ||| key	count=2
function	members [function_2] ||| [function_2] balancer [function_1]	count=2
class	role passed as ||| galaxy	count=1
function	activate a package if ||| activate packages	count=1
arg	a file object from ||| fileobj	count=1
function	on the ||| exists	count=1
arg	a vpc ||| module vpc	count=1
function_arg	[function_1] [arg_2] group names are not ||| [function_1] [arg_2]	count=9
class	and handle ||| group	count=1
function	define a ||| define	count=1
arg	to the stdin filehandle ||| fh in_data	count=1
class	the main ||| clc	count=3
function	for the galaxy ||| load galaxy	count=1
class	a playbook ||| playbook	count=1
function	[function] format {parametername ||| current modifiable param [function]	count=2
function	testsuite report from ||| report	count=1
function	remote file ||| execute remote	count=1
function_arg	[function_1] directory ||| [arg_2] [function_1]	count=1
function	connection to python ||| connection	count=1
function	if changes are required ||| system state change	count=1
function	if tag ||| has tags	count=1
function	custom stat ||| custom	count=1
module	a ||| modules packaging os	count=2
arg	a managed ||| mig named_ports	count=1
function_arg	[function_1] data out ||| [arg_2] [function_1]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] timeout [arg_2]	count=6
module	method ||| modules	count=1
function	[function_1] log ||| [function_2] [function_1]	count=2
arg	port and return ||| port	count=1
function	role [function_2] ||| [function_2] [function_1]	count=3
function	synchronize ||| sync	count=1
function_arg	message from [arg_2] ||| [function_1] [arg_2]	count=1
function	code path ||| process	count=3
arg	account model ||| module account	count=1
function	this updates the module ||| update	count=1
module	a ||| cloud vmware	count=2
function	loads the configuration onto ||| load	count=1
function	module ||| main	count=1
function	of a ||| get loop	count=1
arg	path into ||| executable path	count=1
function	method to calculate difference ||| diff	count=1
arg	conn ||| conn module name tags	count=1
arg	or consumed ||| consumed	count=1
function	compose target string from ||| target	count=1
function	for the galaxy info ||| load galaxy info	count=1
function	is on a nfs ||| is	count=1
module	registered system ||| modules	count=1
function	the module code through ||| configure module	count=1
function	them into the ||| in	count=1
function	read a ||| read	count=1
class	existing network [class_2] ||| [class_2] [class_1]	count=4
function	balancer management html page ||| balancer page	count=1
arg	it differs from ||| module conn name values	count=1
arg	the module data ||| data	count=1
arg	the entity [arg_2] ||| [arg_1] [arg_2]	count=4
class	for ansible galaxy roles ||| galaxy	count=1
arg	to perform their tasks ||| tmp task_vars	count=1
module	execute the logicmonitor ||| modules monitoring	count=2
module	return ||| module_utils six	count=2
module	if certificate ||| modules system	count=1
function	log information to ||| log	count=1
function	the name ||| name	count=5
function	none if file ||| file	count=1
function	returns a dictionary of ||| get	count=1
function	task ||| next task	count=1
module	for [module_2] ||| [module_1] [module_2] vmware power state	count=1
module	whether a ||| cloud	count=1
function	an initialized umc module ||| module	count=1
arg	stdin filehandle of ||| fh in_data	count=1
function	title ||| title	count=1
function	temporary path on ||| tmp path	count=1
function	resource [function_2] ||| [function_1] [function_2]	count=1
module	the main method ||| modules cloud lxc	count=1
function_arg	parameters [arg_2] ||| [function_1] module [arg_2]	count=2
class	an anti affinity ||| clc anti affinity	count=2
function	are set ||| set	count=1
function	to schedule ||| schedule host	count=1
function	ovirt ||| ovirt	count=1
module	returns ||| cloud amazon	count=1
module	a ||| cloud	count=53
module	if package ||| packaging os	count=1
module	of ||| modules system	count=2
function	to calculate difference ||| dict diff	count=1
module	the ||| modules cloud lxc	count=2
function	lun id ||| lun	count=1
class	code ||| firewall policy	count=2
function	from log messages ||| heuristic log sanitize	count=2
function	start or [function_2] ||| [function_1] [function_2]	count=4
function_arg	[function_1] those expected ||| [arg_2] [function_1]	count=1
function	that a policy ||| ensure policy	count=1
function	lookup an image ||| image	count=1
function	changes are required to ||| system state change	count=1
function	code [function_2] ||| [function_2] [function_1]	count=2
class	it to the ||| acmeclient	count=1
function	searches for roles on ||| search	count=1
arg	folder to cloud ||| folder container	count=1
function	required_together argument to ||| rax required together	count=1
class	the main ||| firewall	count=1
function_arg	[function_1] a managed ||| [arg_2] [function_1]	count=4
module	with ||| modules cloud	count=1
function	common to all ovirt ||| ovirt	count=1
function	pager ||| pager	count=1
module	for ||| modules net_tools	count=2
module	path and handle ||| cloud centurylink	count=3
function	lists filtered based ||| tagged tasks	count=1
function	writes initial ||| send initial	count=1
function_arg	[function_1] server ||| [function_1] [arg_2]	count=10
arg	contained within the play_context ||| play_context	count=1
function	any deletes ||| delete	count=1
arg	matching containers that ||| containers count	count=1
function	balancer [function_2] ||| [function_2] [function_1]	count=2
function	results off the ||| pending results	count=1
function	exists on ||| exists	count=1
arg	the json response ||| response firewall_dict	count=1
arg	server image [arg_2] ||| [arg_2] [arg_1]	count=2
arg	hex ||| filename	count=3
class	of ||| cloud stack facts	count=1
function_arg	[function_1] of server_ids ||| [arg_2] [function_1]	count=1
function	backup of the ||| backup	count=1
function_arg	notifications for [arg_2] ||| [arg_2] [function_1]	count=2
class	code ||| clc firewall	count=1
module	the main ||| cloud lxc	count=1
class	and container ||| container	count=1
function	start or ||| start	count=1
arg	resource record ||| gcdns zone record	count=1
module	a new ||| cloud dimensiondata	count=1
arg	[arg_1] cert_file ||| [arg_2] [arg_1]	count=3
module	or overwrites a ||| modules cloud google	count=2
module	nothing to do here ||| connection	count=7
class	handle the ||| firewall	count=1
function	reading environment variables ||| from env	count=7
arg	the datastructure which ||| ds	count=1
function	bytes ||| bytes	count=1
function	[function_1] the uuid ||| [function_2] [function_1]	count=2
arg	hosts in the ||| arg	count=1
function	set the named ports ||| named ports	count=1
function	provisioning requests are ||| requests	count=1
function	from remote sources ||| set remote url	count=3
function	by reading environment variables ||| from env	count=7
function	need to ||| ids to remove	count=1
function_arg	encrypted [arg_2] ||| [function_1] file [arg_2]	count=1
function	file from a directory ||| from	count=2
function	[function_1] vpc ||| [function_1] [function_2]	count=1
module_class	for [class_2] ||| [module_1] centurylink clc [class_2]	count=1
function	the module code through ||| module	count=1
arg	reach a status args ||| status	count=1
module	about the ||| storage netapp	count=1
class	network and ||| docker network manager	count=2
function	close the connection ||| close	count=1
class	from subscription-manager ||| rhsm	count=2
function	formats [function] ||| [function]	count=3
function	the days ||| cert days	count=1
module	for ||| modules system	count=1
function_arg	type [arg_2] ||| [arg_2] [function_1]	count=2
function	the compatibility ||| compatibility	count=1
function	collect data about the ||| describe	count=1
arg	from local ||| in_path out_path	count=9
function_arg	removed [arg_2] ||| [function_1] [arg_2]	count=1
class	return details about ||| net app cdotlun	count=1
module	main code ||| cloud	count=3
arg	fail module if not ||| module system	count=1
function	associated with [function_2] ||| [function_1] [function_2]	count=1
function	[function] policy ||| [function] alert policy id	count=1
arg	a folder to ||| cf folder	count=1
function	[function_1] existing cluster ||| [function_2] [function_1]	count=1
function	named ports on ||| update named ports	count=2
function	array of binds ||| binds	count=1
function_arg	[function_1] [arg_2] ||| [function_1] challenges [arg_2]	count=2
arg	a datacenter ||| datacenter lookup_group	count=1
function	retrieves block ||| get block	count=2
arg	and next url specifically ||| url	count=1
module	registered system ||| modules packaging	count=1
module	the main ||| modules cloud centurylink	count=3
module	a lambda function ||| cloud	count=1
module	previously registered system ||| packaging os	count=1
function_arg	dict in hash ||| dict changed module	count=2
function	values and there ||| values	count=1
function	of the certificate ||| get ssh certificate	count=1
arg	value if value ||| value	count=1
function	after the invoke_shell() is ||| on open shell	count=1
function	to ||| pct to	count=1
function_arg	[function_1] number in ||| [function_1] bytes [arg_2]	count=1
arg	through the modify_module() function ||| module_name module_args task_vars	count=1
class	execute the ||| clc group	count=1
module	all of the ||| modules packaging os	count=1
module	commit ||| modules cloud amazon	count=1
arg	list rt_list ||| rt_list	count=1
function	create [function_2] ||| [function_2] [function_1]	count=8
arg	and tags ||| tags	count=1
module	preserve spaces ||| lookup	count=1
arg	any submodules ||| dest track_submodules	count=1
module	the system to ||| modules	count=1
function_arg	file from [arg_2] ||| [arg_2] [function_1]	count=6
arg	kickstart ||| kickstart	count=1
function_arg	a string containing all [function_1] [arg_2] ||| plugins lookup [function_1] [arg_2]	count=4
function	the error ||| error lines from	count=1
function	builds a kwargs ||| build kwargs	count=2
arg	a getfacl/setfacl ||| mode path follow	count=1
arg	play host and task ||| loader play host task	count=1
arg	or return a ||| module datacenter	count=1
arg	count ||| count name	count=1
function	ensures that [function_2] ||| [function_1] [function_2]	count=14
class	execute ||| group	count=1
function_arg	[function_1] stackdriver ||| [function_1] [arg_2]	count=4
function	all valid [function] as defined ||| gen candidate [function]	count=1
module	the ||| modules packaging os	count=4
arg	path ||| module path	count=1
function	objects from ||| from	count=1
arg	for the arg ||| arg	count=1
function_arg	[function_1] the url ||| [function_1] [arg_2]	count=1
function	anti affinity policy ||| get aa policy	count=1
class	dimension data [class_2] ||| [class_2] [class_1]	count=2
function	into the aws ||| aws	count=1
arg	task vars sent through ||| vars	count=1
function	notifications for a ||| notifications	count=1
arg	libcloud driver ||| get_driver user_agent_product	count=1
arg	value of follow_redirects ||| follow_redirects	count=1
function_arg	[function_1] or modifies ||| [function_1] vpc [arg_2]	count=1
function_arg	[function_1] git repo ||| [function_1] version [arg_2]	count=1
function	a kwargs ||| kwargs	count=1
class	container id or ||| manager	count=1
module	has all ||| amazon	count=1
arg	group from gce ||| gce name zone	count=1
function	returns members [function_2] ||| [function_2] balancer [function_1]	count=2
function	force is true ||| user	count=1
class	module to test ||| module	count=1
arg	kickstart image ||| image_name kickstart	count=1
function	the request ||| get request	count=1
function_arg	wait for [arg_2] ||| [function_1] timeout [arg_2]	count=2
class	user on the ||| user	count=1
function	the six ||| six	count=1
function	v1 ||| v1	count=1
function	[function_1] state of ||| [function_1] [function_2]	count=2
class	consistent method ||| rmmodule base	count=1
function	[function_1] lease ||| [function_1] [function_2]	count=3
function_arg	change attributes [arg_2] ||| [arg_2] [function_1]	count=4
arg	ssh-key options ||| options	count=1
module	the logicmonitor ||| modules monitoring	count=5
class	the ||| connection base	count=1
function	first for dmi related ||| get dmi	count=1
function	the lease file ||| lease file	count=2
function	of ||| get ssh	count=1
function	creates a volume ||| volume	count=1
arg	keystore ||| executable keystore_path keystore_pass	count=1
function	spot [function_2] ||| [function_2] [function_1]	count=2
module	for ||| plugins connection	count=2
class	lxd nothing to do ||| connection	count=1
class	nothing to do here ||| connection	count=7
function	nic ||| nic	count=1
function	the error did not ||| error	count=1
module_class	[module_1] firewall ||| [module_1] [class_2]	count=1
arg	new object collection item ||| module collection name	count=1
arg	permissions bit if ||| etype entity permissions use_nfsv4_acls	count=1
module	preserve ||| lookup	count=1
module	main ||| cloud centurylink	count=6
module	handle the ||| cloud centurylink	count=3
arg	cpu ||| server_id cpu	count=1
function	given firewall policy is ||| firewall policy is	count=1
module	[module_1] cloud ||| [module_2] [module_1]	count=1
function	zone by [function_2] ||| [function_1] [function_2]	count=3
module	a list ||| modules cloud amazon	count=7
function	[function_1] an ||| [function_1] [function_2]	count=4
arg	[arg_1] keystore ||| [arg_2] [arg_1]	count=1
function_arg	[function_1] items specified ||| [function_1] [arg_2]	count=2
function	message to hipchat v2 ||| msg v2	count=1
function	create an [function_2] ||| [function_2] [function_1]	count=2
arg	where a yaml ||| file_name	count=1
function	deletes them [function_2] ||| [function_1] [function_2]	count=1
function	with fuzziness in new ||| new	count=1
function	tags ||| get tags	count=1
function	in the file ||| file	count=1
function	ensure that ||| ensure group	count=1
function	an instance ||| instance	count=1
arg	dict_a ||| dict_a	count=1
arg	the value of recs[ref][key] ||| recs key filter_func	count=1
function	password [function_2] ||| [function_1] [function_2]	count=2
function	of newlines at ||| count newlines	count=1
function	returns the remote state ||| remote state	count=1
arg	user exists ||| client user db_name	count=1
function	is absent by ||| is absent	count=1
arg	updates [arg] ||| host [arg]	count=2
module	return ||| modules cloud google	count=1
module	a server ||| modules cloud centurylink	count=1
function	and update ||| submodule update	count=1
function_arg	[function_1] the git ||| [arg_2] [function_1]	count=2
function	out the policy ||| get policy	count=1
class	csr and ||| acmeclient	count=1
class	[class_1] affinity ||| [class_1] [class_2]	count=5
module	wait for a group ||| modules cloud	count=1
function	to convert ||| to	count=2
function_arg	filesystem [arg_2] ||| [function_1] [arg_2]	count=1
class	server provisioning ||| clc modify server	count=1
class	path and ||| load	count=1
module	from docker ||| modules cloud docker	count=4
arg	not already installed ||| module depot name	count=1
function_arg	[function_1] in keystore ||| [function_1] [arg_2]	count=4
function_arg	[function_1] is sensible ||| [arg_2] [function_1]	count=1
module	[module_1] an account ||| [module_1] [module_2]	count=2
module	true if package ||| modules packaging os	count=1
function	[function_1] with ||| [function_1] [function_2]	count=4
module	all of the ||| amazon	count=1
function	virtual ||| virtual	count=3
function	event [function_2] ||| [function_2] [function_1]	count=1
arg	[arg_1] group rule ||| [arg_2] [arg_1]	count=2
arg	server is updated with ||| server	count=1
function	a volume ||| volume	count=2
function	the ip ||| ip	count=1
function	if they are set ||| set task	count=1
arg	security group ||| resource_group location name os_type	count=1
arg	the subscript ||| subscript	count=1
arg	of task vars sent ||| vars play	count=1
function	of the module code ||| configure module	count=1
function	a vault password ||| vault password	count=2
function	the anti ||| anti	count=1
module	dictionary object required for ||| modules	count=2
class	[class_1] [class_2] ||| [class_1] [class_2]	count=103
function	associated ||| associated	count=1
function	or name ||| name	count=1
module	and handle the ||| cloud centurylink	count=3
class	in the task list ||| play iterator	count=1
function	of a [function_2] ||| [function_1] [function_2]	count=4
arg	[arg_1] or fail ||| [arg_2] [arg_1]	count=4
module	for ||| modules database postgresql	count=1
function	[function_1] six ||| [function_2] [function_1]	count=3
function	a dict from ||| rule dict from	count=2
function	[function_1] service from ||| [function_1] [function_2]	count=1
function	account on ||| account	count=1
arg	instance newgroup into group ||| group newgroup	count=1
function	[function_1] balancer ||| [function_2] [function_1]	count=1
module	for the pool ||| modules cloud	count=2
arg	the cli command ||| cli	count=7
module	execution ||| modules network nxos	count=4
module	objects from cloud ||| modules cloud rackspace	count=2
class	makes sure that ||| clc anti affinity	count=1
function	of a custom stat ||| update custom	count=1
function	the type of ||| interface type	count=2
module	about the ||| modules storage netapp	count=1
function	[function_1] is ||| [function_1] [function_2]	count=18
class	[class_1] and returns ||| [class_1] [class_2]	count=4
class	handle ||| clc load	count=1
function	when a ||| v2 runner on	count=1
module	of a connection ||| plugins connection	count=1
arg	in a datacenter by ||| module datacenter lookup_group	count=1
arg	sat6 server ||| username password autosubscribe activationkey	count=1
function	the policy [function_2] ||| [function_1] [function_2]	count=2
function	changed [function_2] ||| [function_1] [function_2]	count=1
function	list of key ||| key	count=1
arg	the vars_cache for a ||| varname	count=1
function	create a default ||| create default nic	count=3
module	set a global mysql ||| database mysql	count=1
function	delete a [function_2] ||| [function_1] [function_2]	count=5
module	updates from ||| module_utils	count=1
function_arg	module code [arg_2] ||| [arg_2] [function_1]	count=1
class	uses the locale module ||| ansible module	count=1
function	host ||| create connection	count=1
function	size in bytes ||| format disk size	count=1
function	string values it ||| values	count=1
function	decrypt the supplied ||| decrypt	count=1
module	metadata keys ||| cloud rackspace	count=1
module	the object into a ||| modules	count=3
module	subscription-manager ||| modules packaging	count=1
function	a custom ||| custom	count=1
arg	attempt ||| device_id isinstance	count=1
function	stop the servers on ||| stop servers	count=1
function	ids from security ||| ids from	count=1
class	another network config ||| network config	count=2
function	attributes of ||| get	count=1
module	the ipa ||| modules identity ipa	count=1
arg	hostnames [arg] which may ||| hostnames [arg]	count=2
module	given ||| cloud amazon	count=1
arg	with the given vmid ||| vmid	count=2
function_arg	[function_1] or consumed ||| [function_1] [arg_2]	count=2
function	compare ||| compare get	count=1
class	registered system ||| rhn	count=1
arg	digest_method ||| filename algorithm	count=1
arg	url specifically in ||| url	count=1
arg	the beginning ||| module raw_key rank	count=1
class	receive updates from ||| rhsm	count=2
function	command name ||| command	count=6
arg	terms contains a string ||| terms	count=1
function_arg	to compare [arg_2] ||| [arg_2] [function_1]	count=1
function	to compare the ||| compare get	count=1
function	to identify ||| transport	count=1
arg	repository already ||| repodata overwrite_multiple	count=1
function_arg	[function_1] json response ||| [arg_2] [function_1]	count=3
function	[function_1] by ||| [function_1] [function_2]	count=7
function	read [function_2] ||| [function_1] [function_2]	count=8
class	execute ||| firewall policy	count=2
function	this is a class ||| handler	count=1
function	have ||| check argument	count=1
class	the main ||| clc firewall	count=1
function	restarted ||| restarted	count=1
function_arg	an object [arg_2] ||| [function_1] content vimtype [arg_2]	count=2
function	different host ||| diff host	count=2
arg	cpu of a ||| module server_id cpu	count=1
function	version ||| with version	count=1
function_arg	checksum given [arg_2] ||| [function_1] [arg_2]	count=1
arg	those expected by the ||| module_params	count=1
function	requests are complete ||| requests to complete	count=3
function	assumes the branch does ||| remote branch	count=1
module	returns true if ||| modules	count=2
function	define [function] ||| define module [function]	count=5
function	a rule in ||| rule	count=1
function	each ||| record	count=1
class	makes sure that ||| clc anti affinity policy	count=1
class	the main code path ||| clc load	count=1
function	it returns ||| get	count=1
module	attributes string for ||| modules	count=1
module	all ||| packaging	count=1
function	already has ||| has	count=2
function_arg	data to [arg_2] ||| [function_1] [arg_2]	count=2
function	of waiting ||| get	count=1
arg	returned by callback ||| callback	count=1
module	backend_service ||| google	count=1
function	unfreeze ||| unfreeze	count=1
function	returns the list of ||| get	count=1
function	tempfile ||| tempfile	count=1
function	generate ||| generate	count=3
module	about the ||| storage	count=1
arg	kinesis stream ||| client stream_name	count=2
function	version info ||| version info	count=2
function	to compare the json ||| compare get	count=1
function_arg	return filesystem [arg_2] ||| [arg_2] [function_1]	count=1
module	record a ||| modules cloud docker	count=1
class	[class_1] module ||| module_utils [class_1] [class_2]	count=1
module	a check depending on ||| modules clustering	count=1
arg	on the clc ||| clc module alias server_id	count=1
module	returns true if package ||| packaging os	count=1
arg	remote ||| git_path module dest remote	count=1
module	code path ||| cloud centurylink	count=3
function	created snapshot and ||| snapshot	count=1
function_arg	[function_1] rc stdout ||| [function_1] [arg_2]	count=3
function	role or [function_2] ||| [function_2] [function_1]	count=3
arg	[arg_1] host and ||| [arg_2] [arg_1]	count=4
module_class	[module_1] method ||| [class_2] [module_1]	count=2
function	each host key ||| parse host	count=1
function	validation of vars ||| validate	count=1
class	code path and ||| clc load	count=1
function	role or name ||| role name	count=3
module	driver and the ||| modules	count=1
function	vault password [function_2] ||| [function_1] [function_2]	count=2
module	string typically passed as ||| modules database mysql	count=1
module	a new ||| cloud google	count=1
class	execute the ||| clc	count=3
module	[module] package is ||| [module] packaging	count=3
function	disables ||| disable	count=2
function	different and a ||| has different	count=1
module	powershell ||| plugins shell	count=1
function	up pyrax ||| rax	count=1
function	library supports encryption ||| supports volume encryption	count=1
function	that need to be ||| ids to	count=1
arg	the name ||| name	count=2
function	on the ||| run	count=1
function	tuple if present ||| tuple	count=1
arg	[arg_1] clc cloud ||| [arg_1] [arg_2]	count=1
function	the name of ||| get	count=2
function	vault ||| vault	count=1
function	encoding in python-compatible form ||| encoding	count=1
arg	is templated ||| templar	count=1
function	[function_1] in lxc ||| [function_2] [function_1]	count=4
function	error did ||| error lines from	count=1
arg	a vpc ||| vpc	count=1
arg	whether the repository already ||| module repodata overwrite_multiple	count=1
module	release an eip from ||| modules cloud	count=1
arg	value is ||| value	count=1
module	main ||| modules cloud centurylink	count=6
function	enable the [function_2] ||| [function_2] [function_1]	count=4
module	execute the main code ||| modules	count=3
function	[function_1] password from ||| [function_1] [function_2]	count=3
function_arg	[function_1] a pattern ||| [arg_2] [function_1]	count=2
function	snapshot ||| server snapshot	count=1
module	to preserve spaces ||| plugins	count=1
function_arg	from the [arg_2] ||| [arg_2] [function_1]	count=4
class	role passed as an ||| galaxy	count=1
function	binds ||| image binds	count=2
class	method ||| lxdcontainer management	count=1
class	code path ||| group	count=1
arg	[arg_1] [arg_2] to the ||| [arg_1] [arg_2]	count=4
class	from the play ||| play context	count=1
arg	a status args ||| status	count=1
class	detached on the elb ||| elb manager	count=1
arg	in ||| dirname	count=1
function	updated [function_2] ||| [function_1] [function_2]	count=2
module	all of ||| modules packaging os	count=1
function	of nodes exist ||| ensure lbpool nodes set	count=1
module	back details [module_1] [module_2] particular firewall ||| [module_1] [module_2]	count=2
function	a string containing git ||| git	count=1
class	process ||| modify server	count=1
class	update ||| alert policy	count=1
arg	typetalk ||| module client_id client_secret topic	count=1
module	an eip from ||| modules cloud	count=1
function	desired version ||| name version	count=1
function	for the galaxy info ||| galaxy info	count=1
arg	particular ||| host	count=1
function	none if file is ||| from file	count=1
function	[function_1] lease file ||| [function_2] [function_1]	count=4
function	latest ||| repository	count=1
function	write it to ||| get	count=1
module	the ipa ||| ipa	count=1
function	service from ||| service	count=1
arg	string :arg ||| encoding errors nonstring	count=1
function	validate ||| validate	count=2
class	[class] secret ||| [class]	count=3
arg	backup ||| connection replication_id cluster_id	count=1
function	a message ||| message	count=1
function	list of resource tags ||| list	count=1
function	[function_1] user ||| [function_2] [function_1]	count=4
function_arg	security [function_1] [arg_2] names are not unique ||| [function_1] [arg_2]	count=2
function	a passed in port ||| port	count=1
function	add a group ||| add	count=1
class	vault ||| vault cli	count=2
function	return the difference between ||| get diff	count=1
function	function to add a ||| add	count=1
arg	path and ||| path	count=1
function	[function_1] is ||| [function_2] [function_1]	count=18
arg	the clc ||| clc module alias	count=1
function	[function_1] kwargs ||| [function_2] [function_1]	count=1
function	[function_1] name returns ||| [function_2] [function_1]	count=8
arg	to which the host ||| host	count=1
arg	the ec2 instance ||| ec2	count=1
function_arg	[function_1] or return ||| [arg_2] [function_1]	count=2
module	execution ||| modules network dellos10	count=2
function	dict ||| dict	count=9
function	attributes for ||| attributes	count=1
function	deactivate a package if ||| deactivate	count=1
function	is used to schedule ||| schedule svc	count=1
function	the absolute path ||| path	count=1
function	used to schedule ||| schedule servicegroup host	count=1
function	[function_1] group name ||| [function_1] [function_2]	count=1
arg	kickstart image ||| kickstart	count=1
class	stdout ||| vault editor	count=1
arg	with alias [arg] ||| [arg]	count=1
class	a previously registered ||| rhn	count=1
module	lxc nothing to ||| plugins	count=1
function_arg	service [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	[function_1] a particular ||| [arg_2] [function_1]	count=2
module_class	[module_1] dimension ||| [module_1] [class_2]	count=5
function_arg	temporary path [arg_2] ||| [function_1] [arg_2]	count=1
function	libcloud ||| libcloud	count=1
function	the port where ||| port	count=1
arg	module data out to ||| remote_path data	count=1
module	to the ||| plugins	count=2
function	[function_1] [function_2] ||| [function_2] [function_1]	count=369
class	a server ||| server	count=1
function	writes initial data to ||| initial data	count=1
module	used for ||| modules system	count=1
function_arg	export if [arg_2] ||| [function_1] [arg_2]	count=2
function	values and there are ||| argument values	count=1
function_arg	updates nodes [arg_2] ||| [function_1] [arg_2]	count=1
arg	the auth ||| auth	count=1
function	map to attributes ||| validate attributes	count=1
function_arg	[function_1] [arg_2] ||| [function_1] rule [arg_2]	count=6
function_arg	removed from [arg_2] ||| [function_1] [arg_2]	count=1
class	delete ||| alert policy	count=1
module	system from ||| module_utils	count=1
function	policy is present ||| policy is present	count=6
function	get the installed version ||| get local version	count=1
function	that need to be ||| target ids to	count=1
function	string format into bytes ||| bytes	count=1
function	hex digest of local ||| digest from	count=1
arg	fail module ||| module	count=1
function	message to hipchat ||| msg	count=2
function	port where this ||| port	count=1
function	already has and ||| has database	count=1
function	inteligently build ||| build	count=1
arg	user ||| cursor user	count=3
function	and get the ||| get local	count=1
module	to self ||| modules system	count=1
function	changes ||| state change	count=2
module	the machine ||| cloud misc	count=1
module	execute the main code ||| cloud centurylink	count=3
function	with alias is present ||| cert present	count=1
arg	that plays are run ||| arg	count=1
function	get information from remote ||| remote stat	count=1
module	to receive updates ||| module_utils	count=1
function	[function_1] the servers ||| [function_2] [function_1]	count=3
function	set refs ||| set remote	count=1
function	clb [function_2] ||| [function_1] [function_2]	count=1
function_arg	group in ||| group module	count=1
function	given firewall policy ||| firewall policy	count=2
function	based [function] ||| [function]	count=3
function	the branch does ||| remote branch	count=1
class	path and handle the ||| clc firewall policy	count=1
function	delete ||| delete loadbalancerpool	count=2
module	if ||| cloud amazon	count=2
function	a package ||| package	count=1
arg	[arg] regular post_validate ||| attr value [arg]	count=2
function	key ||| rule key	count=2
module	path and handle the ||| cloud centurylink	count=3
function	password from [function_2] ||| [function_2] [function_1]	count=3
function	that need to be ||| remote target ids to remove	count=1
module	for ansible ||| modules network ovs	count=2
class	start ||| callback module	count=1
function_arg	and update [arg_2] ||| [function_1] [arg_2]	count=1
function	a proxy protocol enabled ||| proxy protocol policy	count=1
module	is present for ||| modules cloud google	count=1
function	return a temporary ||| make tmp	count=1
arg	individual group rule ||| rule group_id cidr_ip	count=1
arg	restriction this ||| restriction	count=1
arg	pyrax [arg] ||| [arg]	count=2
module	or ||| cloud amazon	count=3
module	function to ||| modules monitoring	count=1
class	code ||| load balancer	count=2
class	to the lxc ||| connection	count=1
function_arg	change attributes [arg_2] ||| [function_1] name tags [arg_2]	count=2
function	device [function_2] ||| [function_1] [function_2]	count=6
class	the ansible galaxy server ||| galaxy cli	count=1
function_arg	mode [arg_2] ||| [arg_2] [function_1]	count=1
class	the host ||| base	count=1
function	the vm ||| vm	count=1
module	removes metadata keys and ||| rackspace	count=1
module	host bindings if ||| modules cloud	count=1
function	policy [function] ||| anti affinity policy [function]	count=2
module	generate a ||| cloud	count=1
function	and desired version example ||| version	count=1
arg	from b ||| b	count=1
arg	dirname ||| dirname	count=1
function	as a 4- ||| as tuple	count=1
function	create a ||| create	count=9
function	[function_1] user ||| [function_1] [function_2]	count=4
function	the public [function_2] ||| [function_1] [function_2]	count=5
function	set the [function_2] ||| [function_2] [function_1]	count=42
function	the entity by ||| by	count=1
module	main ||| lxc	count=1
function	a mount point ||| mount	count=1
arg	is 'absent' ||| search_params	count=1
function_arg	ports [arg_2] ||| [function_1] [arg_2]	count=2
arg	data ||| data	count=8
module	code path and ||| cloud centurylink	count=3
function	have the snapshots ||| snapshot	count=1
function	is currently associated ||| address is associated	count=2
function	depending [function] of an ||| sysv [function]	count=1
function_arg	volume or ||| volume module system	count=1
class	returns tuple ||| azure rmmodule	count=1
function	privileges ||| table privileges	count=2
function	keys the ||| change keys	count=1
module	a system from ||| module_utils	count=1
function	add nodes to the ||| add lbpool nodes	count=1
arg	in clc ||| module clc	count=2
arg	matching containers ||| containers	count=1
arg	name parameter sent to ||| name	count=1
arg	commands to the remote ||| commands	count=1
class	modify the cache ||| cache manager	count=1
module	on success update ||| modules cloud	count=1
function	to ||| parse params	count=1
function	type of ||| get interface type	count=2
module	code path and handle ||| modules	count=3
arg	verifies if string ||| string	count=1
function	newlines at ||| count newlines	count=1
arg	a standard way for ||| rax_module region_required	count=1
function	chars ||| chars	count=1
function_arg	[function_1] given task ||| [function_1] original task [arg_2]	count=1
module	removes metadata ||| modules cloud rackspace	count=1
function	state of a ||| instance state	count=1
function	cpu value ||| cpu	count=1
function	version of the ||| get	count=1
function	post validation for the ||| post validate	count=1
function	downtime ||| host svc downtime	count=1
function_arg	service from [arg_2] ||| [arg_2] [function_1]	count=1
function	if a path is ||| prefix login path	count=3
arg	on the existence ||| name cidr_block	count=1
arg	return all hosts ||| hosts	count=1
class	if environment files are ||| manager	count=1
function	policy ||| ensure policy	count=1
function	entity by ||| by	count=1
function	current instance's availability ||| availailability	count=1
class	[class_1] data ||| [class_2] [class_1]	count=1
function	machine ||| machine	count=3
function	a default network ||| default nic	count=1
module	a given domain name ||| cloud google	count=2
module	for the passed ||| modules	count=1
function_arg	[function_1] the clc ||| [function_1] server [arg_2]	count=5
function	[function_1] for a ||| [function_1] [function_2]	count=3
function	present ||| cert present	count=1
module	execute the main code ||| modules cloud centurylink	count=3
function	the [function_1] [function_2] ||| [function_1] [function_2]	count=4
function	the ubuntu [function_2] ||| [function_2] [function_1]	count=1
function_arg	downtime for [arg_2] ||| [function_1] [arg_2]	count=1
function	or upper case ||| fix case	count=1
class	the ||| acmeclient	count=1
module	amazon tag ||| amazon	count=1
arg	2-tuple host port and ||| host port connect_timeout	count=1
function	this updates the ||| update	count=1
class	path and handle the ||| load balancer	count=1
function	[function] in the ||| add group vars [function]	count=3
module	been initialized ||| connection	count=1
class	and handle the ||| firewall policy	count=1
module	multiplexing ||| connection	count=1
arg	servers ||| server_ids	count=1
function	vars as ||| vars	count=1
function	message from the ||| message	count=1
arg	beginning ||| module raw_key rank	count=1
arg	from url ||| url	count=1
function	loads the ||| load	count=2
arg	digest_method specified by name ||| filename algorithm	count=1
function	to get [function_2] ||| [function_2] [function_1]	count=1
function	return the mtime ||| get	count=1
function	chown command ||| chown	count=1
arg	repository already ||| module repodata overwrite_multiple	count=1
function	from escalated ||| deauthorize	count=1
function	initial [function_2] ||| [function_1] [function_2]	count=3
function_arg	[function_1] name ||| [function_1] [arg_2]	count=1
function	[function_1] name returns ||| [function_1] [function_2]	count=8
class	token from ansible galaxy ||| galaxy	count=1
function	module ||| module	count=8
function	block device [function_2] ||| [function_2] [function_1]	count=6
function	on [function_2] ||| [function_2] [function_1]	count=2
function	[function] <name>01 to ||| create default [function]	count=1
function	are set ||| set task and	count=1
function	[function_1] [function_2] ||| [function_2] environment [function_1]	count=6
arg	are ||| manager	count=1
module_class	for getting [class_2] ||| [module_1] [class_2]	count=1
class	are already present ||| docker manager	count=1
function	all active interfaces on ||| interfaces dict	count=1
function	to be ||| to put	count=1
function	nodes exist ||| lbpool nodes set	count=1
arg	a status args ||| nat_gateway_id status	count=1
function	then write [function_2] ||| [function_2] [function_1]	count=2
arg	router ||| router	count=1
function	the axapi ||| axapi	count=1
module	previously ||| os	count=1
class	details about the ||| cdotlun	count=1
function	if the wait ||| wait	count=3
function	spec ||| spec	count=6
function	matching logic ||| match	count=1
module	it to the destination ||| modules web_infrastructure	count=1
arg	to remove a user ||| cursor user	count=1
class	of the csr and ||| acmeclient	count=1
arg	a digest_method specified ||| filename algorithm	count=1
function	de-register the ||| deregister	count=1
function	a virtual machine ||| virtual machine	count=2
function	array of strings ||| get	count=1
function	certificate ||| ssh certificate	count=1
arg	cpu of a ||| server_id cpu	count=1
function	supplied service string has ||| services	count=1
arg	[arg_1] libcloud driver ||| [arg_2] [arg_1]	count=1
function	server by the uuid ||| server by uuid	count=1
function	dict from [function_2] ||| [function_2] [function_1]	count=1
function	to group list ||| group list	count=2
function	and ||| handle	count=2
function	include line up ||| preprocess include	count=1
function	message [function_2] ||| [function_2] [function_1]	count=4
class	[class_1] [class_2] ||| [class_2] [class_1]	count=23
function	in [function] ||| [function]	count=1
arg	adds ssl_certificate_id ||| listener	count=1
function	rule in [function_2] ||| [function_2] [function_1]	count=2
function_arg	[function_1] ec2 ||| [arg_2] [function_1]	count=2
function	[function] returned from ||| find server by [function] w	count=1
function	if network ||| network	count=1
function	to be ||| to remove	count=1
function	and format ||| format	count=1
module	for ||| modules cloud	count=19
function	environment [function_2] ||| [function_2] [function_1]	count=4
function	the module code ||| module	count=1
function	return the absolute path ||| path	count=1
function	unregister a ||| unregister	count=1
module	and handle ||| centurylink	count=3
arg	if name [arg_2] ||| [arg_2] [arg_1]	count=8
function	command ||| command output	count=2
arg	the given name ||| name	count=2
module	from all ||| module_utils	count=1
module	new ttl and ||| google	count=1
arg	dirname subdirs ||| dirname source	count=1
function	each host key ||| host	count=1
class	machine ||| virt	count=1
arg	in hash is ||| module	count=2
function	destroy and create is ||| destroy and create	count=1
function	invoke_shell() is ||| on open shell	count=1
module	return true if ||| module_utils six	count=1
function	[function_1] config ||| core [function_1] [function_2]	count=1
function	stamp and the updated ||| updated	count=1
function_arg	reads a [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] etag ||| [function_2] [function_1]	count=1
arg	desired [arg_2] ||| [arg_2] [arg_1]	count=8
arg	to get current weight ||| host backend weight	count=1
function	the connection close has ||| close	count=1
arg	[arg_1] tags of ||| [arg_2] [arg_1]	count=2
function	volume group used ||| vg	count=1
module	(eg '&' for quoted ||| plugins	count=1
function	filename [function_2] ||| [function_2] [function_1]	count=4
function	is removed ||| absent	count=1
function	[function_1] info ||| [function_1] [function_2]	count=5
arg	ssh-key options ||| module options	count=1
module	initialized with ||| connection	count=1
module_class	return from [class_2] ||| [module_1] [class_2]	count=2
function	the system ||| system	count=1
function_arg	wait [arg_2] ||| [function_1] timeout [arg_2]	count=2
module	path and handle ||| modules cloud centurylink	count=3
function	[function] so-called "magic" ||| [function] magic	count=3
function	activate a package ||| activate packages	count=1
function	the policy id from ||| policy id from	count=1
module	for module ||| modules network	count=4
function	values it will split ||| values	count=1
function	parse exposed ||| parse exposed	count=1
module	system to ||| packaging os	count=1
module	and ||| modules cloud centurylink	count=6
class	the elb ||| elb	count=2
module	via ||| misc	count=1
function	default [function_2] ||| [function_2] [function_1]	count=1
function	returns state ||| state	count=1
function_arg	event [arg_2] ||| [arg_2] [function_1]	count=1
class	set ||| load balancer	count=1
function	status code [function_2] ||| [function_1] [function_2]	count=2
function	base ||| base	count=1
function	is different ||| has different	count=1
module	we've been initialized with ||| connection	count=1
class	handle ||| firewall	count=1
arg	status to ||| status wait_timeout	count=1
function	[function_1] policy if ||| [function_2] [function_1]	count=2
arg	choose where ||| remote_path	count=3
function	remote [function_2] ||| [function_2] [function_1]	count=3
function	ensures that [function_2] ||| [function_2] [function_1]	count=14
module	execution ||| network dellos6	count=2
arg	from local to lxc ||| in_path out_path	count=1
function	vault encrypted return a ||| get	count=1
function	to attributes ||| attributes	count=1
function	remove the [function_2] ||| [function_1] [function_2]	count=12
arg	google libcloud driver connection ||| provider get_driver user_agent_product	count=1
module	record a collection of ||| modules cloud	count=1
function	default [function_2] ||| [function_1] [function_2] resource_group location name allocation_method	count=1
function	modify an existing ||| modify	count=1
function_arg	decrypt [arg_2] ||| [arg_2] [function_1]	count=2
function	group matching ||| get group	count=1
module	parse ||| packaging os	count=1
module_class	[module_1] module ||| [module_1] [class_2]	count=5
function	cache [function_2] ||| [function_1] [function_2]	count=1
module	execution ||| network nxos	count=4
module	command ||| system	count=1
function	supplied service string ||| services	count=1
arg	type definition ||| proto setype	count=1
function	remote ||| execute remote	count=1
class	connect ||| connection base	count=1
function_arg	[function_1] commands to ||| [function_1] [arg_2]	count=1
class	path and handle ||| firewall	count=1
module_class	[module_1] dimension data ||| [module_1] [class_2]	count=5
module	to the destination file ||| modules web_infrastructure	count=1
function	check whether the 2 ||| repo	count=1
function_arg	[function_1] /etc/rhsm/rhsm conf ||| [arg_2] [function_1]	count=2
function	wait argument ||| wait	count=3
function_arg	check supplied [arg_2] ||| [arg_2] [function_1]	count=5
function	[function_1] checks that ||| [function_2] [function_1]	count=2
function	find a ||| rax find server	count=1
arg	quoting [arg] based ||| cursor mysqlvar [arg]	count=1
function	days the certificate ||| cert days	count=1
module	to receive updates from ||| packaging	count=1
function	argument ||| retry argument	count=1
function	newlines ||| count newlines	count=1
arg	rc stdout ||| args check_rc close_fds executable	count=1
module	to lxd nothing to ||| connection	count=1
class	the server based on ||| modify server	count=2
module	must be called to ||| compat selectors	count=1
module	to do ||| connection	count=8
function	copies the ||| transfer data	count=1
function	requests are complete if ||| for requests to complete	count=3
function_arg	a plugin [arg_2] ||| [function_1] name [arg_2]	count=1
function	adds the repo ||| repo	count=1
class	and ||| data loader	count=1
function_arg	[function_1] the pause ||| [arg_2] [function_1]	count=1
class	or ||| container manager	count=1
class	a ||| lxc	count=1
function	ttl and values match ||| match	count=1
function	removes [function_2] ||| [function_1] [function_2]	count=3
function	to retry ||| retry	count=1
function	[function_1] the play ||| [function_2] [function_1]	count=1
function	the environment string to ||| environment string	count=1
function	[function_1] backend service ||| [function_1] [function_2]	count=1
module	the machine via ||| modules	count=1
module	with ||| module_utils six	count=1
function	file from a ||| from	count=2
function	status ||| status	count=3
module	it to the destination ||| modules	count=1
arg	key from url ||| url	count=1
class	lxc nothing to do ||| connection	count=1
class	read ||| device sshd	count=1
module	do ||| plugins	count=8
arg	a piece of ||| vaulttext filename	count=1
function	an allowed size ||| size	count=1
arg	security group matching ||| resource_group location name os_type	count=1
function_arg	[function_1] tuples into ||| [arg_2] [function_1]	count=5
function	results off the ||| process pending results	count=1
function	a list of subnets ||| subnets	count=1
function	initial [function_2] ||| [function_2] [function_1]	count=3
function	inventory which allows ||| generate retry inventory	count=1
module	takes a [module_2] ||| [module_1] [module_2]	count=4
function	with_* portion of ||| get	count=1
arg	and next url ||| url	count=1
arg	cli command ||| module cli	count=7
module	find ||| modules cloud openstack	count=1
function	class factory that closes ||| redirect handler factory	count=1
function	unsubscribe a system from ||| unsubscribe	count=2
function	path on ||| path	count=1
arg	vm ||| vm	count=3
function	array of strings with ||| get	count=1
module	driver and the database ||| modules database mongodb	count=1
module	retrieves ||| cloud amazon	count=2
function	alarm [function_2] ||| [function_1] [function_2]	count=1
module	information from ||| modules cloud	count=1
arg	server_ids have the ||| server_ids	count=1
function_arg	plugin [arg_2] ||| [function_1] [arg_2]	count=1
class	with ||| connection base	count=1
arg	set of server_ids have ||| server_ids	count=1
function	fetch and return ||| get	count=1
function	wait argument is ||| wait for	count=3
arg	for google compute engine ||| provider	count=1
arg	a datacenter by calling ||| datacenter lookup_group	count=1
module	elasticache ||| cloud amazon	count=1
function	name ||| get	count=1
module	uses ||| module_utils	count=1
module	netvisor ||| netvisor	count=5
function	[function_1] is present ||| [function_2] [function_1]	count=8
function	enable ||| enable	count=3
class	the host we've ||| base	count=1
arg	that the dict passed ||| name passed default	count=1
function	information directly ||| info	count=1
module	string for later parsing ||| modules web_infrastructure	count=1
function	configure the system ||| configure	count=1
arg	google ||| module provider	count=1
arg	the clc ||| clc module alias server_id	count=1
function	encrypt a ||| encrypt	count=1
module	to indicate if the ||| modules	count=1
module	over a jinja2 block ||| module_utils	count=1
function	public ip ||| public ip	count=2
function	without the subscript and ||| split subscript	count=1
arg	retrieve all [arg_2] ||| [arg_2] [arg_1]	count=2
module	for amazon ||| modules cloud amazon	count=1
function	the newest version of ||| get	count=1
function	enables ||| enable svc	count=1
class	cloudtrail ||| trail manager	count=1
class	and gets ||| variable manager	count=1
module	by specified attributes ||| modules cloud	count=1
function	class [function_2] ||| [function_1] [function_2]	count=4
function	file over http ||| file	count=2
arg	attempt to ||| module device_id isinstance	count=1
module	destination ||| web_infrastructure	count=1
class	about ||| app	count=1
function	the aws ||| aws	count=1
module	meta-characters in [module] ||| [module]	count=1
arg	[arg_1] [arg_2] cache ||| [arg_2] [arg_1]	count=8
function	to fetch ||| fetch	count=1
function	the policies [function_2] ||| [function_2] [function_1]	count=2
arg	piece of ||| vaulttext filename	count=1
arg	the play host ||| play host	count=1
arg	the provided pool ||| alias location lb_id pool_id	count=2
function	loads the configuration ||| load	count=1
function	gnu shred ||| shred	count=1
function_arg	initial data [arg_2] ||| [arg_2] [function_1]	count=1
class	a container ||| lxc container	count=1
function_arg	path [arg_2] ||| [arg_2] [function_1]	count=1
function	preceding [function] ||| get [function]	count=1
function	standard limitations [function] apply (for ||| [function]	count=1
function_arg	new servers [arg_2] ||| [arg_2] [function_1]	count=3
function	parser for ||| parser	count=1
function_arg	file from local ||| file in_path out_path	count=8
function	assemble a file from ||| assemble from	count=2
function	the state of a ||| instance state	count=1
arg	the status to ||| status wait_timeout	count=1
function	the alert [function_2] ||| [function_2] [function_1]	count=21
function	api to create ||| create	count=1
arg	file context mapping ||| result target ftype	count=1
function	get the status string ||| get	count=1
arg	agent using its ||| service_id	count=1
arg	the dest ||| dest	count=1
module	and working ||| modules source_control	count=2
function	snapshot ||| snapshot	count=2
class	return a ||| inventory	count=1
function	file over ||| file	count=2
arg	account alias ||| alias	count=1
function	uuid ||| uuid	count=2
arg	a set of events ||| events data	count=1
module	it sees a dash ||| modules network cumulus	count=2
function	gets the type of ||| get interface type	count=2
arg	the host ||| module host	count=1
function	the remote user ||| do remote user	count=2
arg	[arg] which ||| hostnames [arg]	count=4
function	dict ||| rule dict	count=1
function	the role or ||| role	count=1
module	for autoscale group deletion ||| modules cloud amazon	count=1
function	group ||| get group	count=2
module	value for a ||| modules system	count=1
function	add a ||| add	count=1
function	gets the type ||| get interface type	count=2
module	nothing ||| connection	count=8
function	determine if changes ||| state change	count=1
arg	security ||| os_type	count=1
function	task ||| task	count=2
function	name ||| name	count=12
arg	[arg] belongs ||| [arg]	count=3
function	retry the request ||| retry	count=1
module	[module_1] packages ||| [module_1] [module_2]	count=8
function	via the ||| create	count=1
module	address and filter ||| plugins filter	count=1
function	anti affinity policy ||| aa policy present	count=2
function	to ||| target ids to	count=1
module	file ||| modules web_infrastructure	count=2
arg	the memory or cpu ||| cpu	count=1
function	ssh ||| ssh host	count=1
function	to hipchat v2 server ||| v2	count=1
arg	facts for a host ||| host facts	count=2
function	the api call ||| call	count=2
arg	from local to zone ||| in_path out_path	count=1
function	[function_1] file ||| [function_1] [function_2]	count=37
function	them into [function_2] ||| [function_1] [function_2]	count=1
module	of the package ||| modules packaging os	count=1
arg	[arg_1] host ||| [arg_2] [arg_1]	count=20
module_class	a [class_2] ||| [module_1] lxc [class_2]	count=1
arg	so ||| enabled source	count=1
function	[function_1] validation ||| [function_2] [function_1]	count=4
function_arg	[function_1] path ||| [function_1] [arg_2]	count=4
function	of binds to array ||| binds	count=1
arg	that keys from b ||| b	count=1
function	[function] variables ||| get [function]	count=3
arg	provided ||| target_ids	count=1
function	repos [function] repo ||| [function]	count=1
arg	keep the iterator ||| iterator	count=1
module	main method ||| modules	count=1
function	message describing ||| message	count=1
module	delete ||| cloud google	count=3
function	start ||| start	count=5
function	members [function_2] ||| [function_2] [function_1]	count=10
class	and handle the ||| policy	count=1
module	all of ||| amazon	count=1
module	case equivalent [module] example ||| [module]	count=1
function	put [function_2] ||| [function_1] [function_2]	count=1
function	convert ||| convert host to	count=1
arg	sensible host ||| sshkeygen	count=1
module	check whether a ||| cloud	count=1
function	list [function] ||| [function]	count=1
arg	any submodules ||| git_path module dest track_submodules	count=1
module	system to receive ||| module_utils	count=1
arg	status to change ||| status wait_timeout	count=1
function	[function_1] dict ||| [function_2] [function_1]	count=1
function_arg	network domain [arg_2] ||| [arg_2] [function_1]	count=2
function	return the state ||| state	count=1
arg	existence of [arg_2] ||| [arg_2] [arg_1]	count=6
class	existing network and returns ||| network manager	count=1
function	[function_1] machine ||| [function_1] [function_2]	count=6
arg	be templated during the ||| attr value templar	count=1
module	device ||| connection	count=1
function	and convert them into ||| make tags in	count=1
arg	name is none the ||| content vimtype name	count=2
function	operations to [function_2] ||| [function_1] [function_2]	count=1
arg	installed a second ||| pacman_path	count=1
class	the main code ||| load	count=1
function	return true if ||| is	count=1
arg	play host and ||| play host	count=1
function_arg	[function_1] pause ||| [function_1] [arg_2]	count=1
module	for server ||| modules	count=1
function	returns the line in ||| get	count=1
function	set ||| set task and variable	count=1
class	path ||| clc firewall	count=1
module	to the destination ||| modules	count=1
function	[function_1] boot volume ||| [function_2] [function_1]	count=1
module	elasticache parameter group ||| modules cloud amazon	count=1
module	details ||| modules storage netapp	count=2
function	the error did ||| error lines	count=1
module	for a given ||| modules cloud google	count=2
function	the clc [function_2] ||| [function_1] [function_2]	count=35
arg	url ||| module url	count=2
function	spot [function_2] ||| [function_1] [function_2]	count=2
module	shell ||| modules	count=1
arg	a base64-encoded pkcs12 version ||| ssh_cert_path	count=1
function	vault password [function_2] ||| [function_2] [function_1]	count=2
arg	the given task ||| host task	count=1
module	for a service ||| modules	count=1
module	return a ||| module_utils	count=9
class	a json group object ||| logic monitor	count=1
function	define [function_1] [function_2] ||| [function_1] [function_2]	count=10
function	[function] dicts args ||| ansible dict to [function]	count=2
function_arg	[function_1] status ||| [arg_2] [function_1]	count=1
arg	doesn't ||| group_name parent_name group_description	count=1
module	[module] throw error ||| modules [module]	count=1
arg	returns the pattern ||| pattern	count=1
function	host ||| host variable	count=1
module	main ||| lxd	count=2
class	path and ||| clc firewall policy	count=1
class	execute the main ||| clc	count=3
function	are set which ||| set task and variable	count=1
arg	the entity values ||| entity	count=1
function	starts or stops a ||| startstop	count=1
function_arg	[function_1] [arg_2] ||| [function_1] file [arg_2]	count=6
arg	wait ||| wait timeout	count=1
arg	via name it ||| name	count=1
function	policy is ||| ensure policy is	count=2
arg	[arg] fact cache ||| [arg]	count=2
arg	if the named module ||| fullname	count=1
class	of ||| clc load balancer	count=1
arg	error message ||| msg	count=1
function	[function] unrelated ||| [function] non json	count=2
function	passed ||| build	count=1
function	[function] src ||| [function]	count=1
arg	vars sent through the ||| vars play	count=1
function	status code [function_2] ||| [function_2] [function_1]	count=2
function_arg	check the [arg_2] ||| [arg_2] [function_1]	count=1
module	[module_1] for ||| [module_1] [module_2]	count=6
arg	list of servers ||| server_ids package_id package_params	count=1
function	command prompt ||| prompt	count=1
function	named ports on a ||| update named ports	count=1
module	execution ||| modules network dellos9	count=2
function	put a [function_2] ||| [function_2] [function_1]	count=1
function	ensure that ||| ensure	count=1
module	via ||| modules	count=1
function	[function_1] port where ||| [function_1] [function_2]	count=1
function_arg	[function_1] the ec2 ||| [arg_2] [function_1]	count=1
function	unsubscribe ||| unsubscribe	count=2
function	default network interface ||| default	count=1
module	on success update the ||| cloud	count=1
function	removed if there ||| absent	count=1
function	of nodes ||| nodes	count=1
function	need to be removed ||| target ids to	count=1
arg	actuall executable or ||| module executable	count=2
arg	output ||| cmd output	count=1
function	[function_1] [function_2] ||| [function_2] remote [function_1]	count=3
function	id ||| get id	count=1
module	[module_1] given name ||| [module_1] [module_2]	count=2
function	current ||| make current	count=1
function	retention of messages in ||| retention	count=1
function	schedule ||| schedule servicegroup host	count=1
rep	[module_class_1] [function_arg_2] ||| [module_class_1] [function_arg_2]	count=2
function	encrypt ||| encrypt	count=2
function	a plugin ||| plugin	count=1
module	args ||| modules network nxos	count=2
function	close ||| close	count=2
function	remove unused [function_2] ||| [function_1] [function_2]	count=1
function	version [function_2] ||| [function_2] [function_1]	count=7
function_arg	[function_1] name using ||| [function_1] [arg_2]	count=1
function_arg	sends configuration [arg_2] ||| [function_1] [arg_2]	count=4
arg	type ||| proto setype	count=1
module	all of the ||| packaging	count=1
function	the loop ||| loop	count=1
function	register a file ||| register	count=1
function	installed ||| installed	count=2
function	installer binary ||| get installer binary	count=2
function	when we can ||| fail on missing	count=1
class	handle ||| firewall policy	count=2
function	name is the ||| name	count=1
function	from [function_2] ||| [function_1] [function_2]	count=6
function	the end ||| end	count=1
class	the module ||| module	count=1
function	[function_1] and create ||| [function_1] [function_2]	count=1
function	validation of ||| validate environment	count=1
function_arg	encrypt a [arg_2] ||| [function_1] [arg_2]	count=3
module	sources ||| packaging os	count=2
arg	a folder to cloud ||| cf folder container ttl	count=1
arg	the clc ||| clc module svr_uuid	count=1
arg	name supplied ||| name	count=2
function	file to the ||| file	count=2
arg	use with google-python-api-client ||| module scopes user_agent_product user_agent_version	count=1
class	main code ||| load balancer	count=1
arg	changes ||| changes	count=1
function	[function] format ||| current modifiable param [function]	count=2
function	a default security ||| default securitygroup	count=1
module	out if the ||| modules cloud	count=1
arg	from the server ||| server	count=1
function	searches for ||| execute search	count=1
module_class	the docker [class_2] ||| [module_1] [class_2]	count=2
function	[function_1] kwargs ||| [function_1] [function_2]	count=1
arg	given list of servers ||| server_ids package_id package_params	count=1
function	[function_1] template ||| [function_1] [function_2]	count=3
arg	play host and task ||| play host task	count=1
module	which returns a ||| playbook	count=1
class	a ||| inventory	count=1
function	a stack while it ||| stack	count=1
module	check for ||| modules cloud	count=1
class	[class_1] balancer ||| [class_2] [class_1]	count=2
arg	sends the request to ||| request	count=1
function	[function_1] package ||| [function_1] [function_2]	count=1
arg	filesystem or ||| filesystem system	count=1
module	all ||| modules	count=1
function	ensures the alert policy ||| ensure alert policy	count=1
function	host ||| set host overrides	count=1
arg	host and task ||| host task	count=3
function	argument [function_2] ||| [function_1] [function_2]	count=5
class	or added remotely ||| watch event rule	count=1
function	matches the command prompt ||| prompt	count=1
function_arg	bytes [arg_2] ||| [arg_2] [function_1]	count=1
function	and values match ||| match	count=1
class	response code to retry ||| cloud retry	count=1
class	be removed remotely ||| watch event rule	count=1
function	updates the module ||| update	count=1
function_arg	[function_1] remote box ||| [function_1] [arg_2]	count=5
class	code path and ||| balancer	count=1
function	used to import ||| import	count=1
function	group [function_2] ||| [function_1] [function_2]	count=3
arg	finds a ||| conn module zone_name want_private	count=1
module	a ||| modules web_infrastructure	count=2
module	the device supports multiplexing ||| plugins	count=1
function	subscribe current ||| subscribe product	count=1
module	package ||| modules packaging os	count=2
module	a collection ||| cloud docker	count=1
class	a playbook ||| playbook executor	count=1
arg	post ||| reference role_name	count=1
function	create new servers ||| create servers	count=2
function	are set ||| set task	count=1
function_arg	[function_1] blob ||| [arg_2] [function_1]	count=1
function	of clc [function_2] ||| [function_2] [function_1]	count=2
function	lists the ||| execute list	count=1
function_arg	[function_1] [arg_2] ||| [function_1] vpc [arg_2]	count=8
arg	name if name ||| name	count=2
function	target application from ||| pubnub application	count=1
function	destination file ||| get	count=1
function	revision ||| revision	count=1
function	as ||| as	count=1
module_class	[module_1] load ||| [module_1] centurylink clc [class_2]	count=1
function	has a default ||| default	count=1
function	[function_1] server certificate ||| [function_1] [function_2]	count=3
function_arg	[function_1] for ansible ||| [arg_2] [function_1]	count=2
module	system to ||| module_utils	count=1
arg	and key are parameters ||| key	count=1
function	bond ||| to array	count=1
module	[module_1] [module_2] ||| [module_1] [module_2]	count=312
arg	return whether the dest ||| dest	count=1
arg	the command ||| command	count=1
module	to a lambda function ||| modules cloud	count=1
function	arguments have the requested ||| check argument	count=1
function	check the compatibility between ||| check compatibility	count=1
function	network ||| network	count=4
function	by ||| parse key id	count=1
function	files ||| files	count=1
function	[function_1] policy if ||| [function_1] [function_2]	count=2
class	return details about the ||| cdotlun	count=1
function	of binds to ||| image binds	count=1
arg	doesn't ||| parent_name group_description	count=1
class	of ||| stack facts	count=1
function	[function_1] or name ||| [function_2] [function_1]	count=2
function	return the days ||| get cert days	count=1
function	of host ||| get	count=1
function	connection close has been ||| close shell	count=1
function	wait for the shared ||| wait	count=1
module	registered ||| modules packaging	count=1
module	a ||| cloud centurylink	count=14
module	set all ||| amazon	count=1
function	keys ||| keys	count=2
function	clc credentials on the ||| clc credentials	count=7
module	connection nothing to do ||| connection	count=6
function	run on ||| playbook on play	count=1
arg	value in [arg_2] ||| [arg_2] [arg_1]	count=8
arg	datastructure ||| ds	count=3
function	gets the type of ||| type	count=2
class	the server based ||| clc modify server	count=2
module	instances for ||| modules cloud google	count=1
function	key ids and ||| shorten key ids	count=2
function	the retention of messages ||| retention	count=1
class	have ||| ansible module	count=1
module	write it to the ||| modules	count=1
function	to group [function_2] ||| [function_1] [function_2]	count=2
function	the attributes of a ||| get	count=1
function	default security group ||| default	count=1
arg	name of the image ||| name	count=1
arg	typetalk ||| client_id client_secret topic	count=1
function	on ||| run	count=1
function	lists filtered based on ||| filter tagged tasks	count=1
function	a boto3 ||| boto3 tag	count=1
module	the given ||| modules cloud	count=1
arg	if dict_a [arg_2] ||| [arg_1] [arg_2]	count=3
arg	[arg_1] clc ||| [arg_2] [arg_1]	count=1
function	update the given ||| update auth	count=1
module	elb ||| cloud amazon	count=2
module	cluster ||| cloud amazon	count=5
arg	cpu of a ||| cpu	count=1
arg	for a host in ||| host	count=2
function	use as a salt ||| salt	count=1
function_arg	[function_1] server to ||| [function_1] timeout [arg_2]	count=1
class	code path and ||| clc firewall policy	count=1
function	verifies ||| verify	count=1
function	name of ||| get	count=2
function	key ids ||| shorten key ids	count=2
function	is true ||| user	count=1
arg	using urllib2 python2 ||| method	count=1
arg	or decreaste the ||| retention_period action	count=1
arg	of servers ||| server_ids package_id package_params	count=1
arg	line ||| line	count=1
function	function qualifier as ||| qualifier	count=1
module	[module_1] dash ||| [module_1] [module_2]	count=16
function	updates the play ||| update play	count=3
class	set ||| anti affinity policy	count=1
function	ip ||| api ip	count=1
module	and handle the ||| centurylink	count=3
function	[function_1] host patterns ||| [function_1] [function_2]	count=1
module	the module and ||| modules cloud	count=8
class	and ||| balancer	count=1
function	no [function] vrrp_exists ||| [function]	count=1
class	rule and ||| event rule manager	count=1
function	proxy protocol policy ||| proxy protocol policy	count=1
arg	containers ||| containers	count=1
module_class	[module_1] collector ||| [module_1] [class_2]	count=5
module	check if the ||| mongodb	count=1
module	to ||| modules	count=3
function_arg	decrypt a [arg_2] ||| [arg_2] [function_1]	count=2
module	previously registered ||| modules packaging	count=1
function	the tags ||| tags	count=1
arg	by name if name ||| name	count=2
arg	value of given key ||| key	count=2
module	system to receive updates ||| module_utils	count=1
arg	a re sub returning ||| value pattern replacement ignorecase	count=1
function	handle the ||| process	count=3
function_arg	[function_1] or modifies ||| [arg_2] [function_1]	count=1
function	[function_1] protocol ||| [function_2] [function_1]	count=1
module	and new ttl ||| modules cloud google	count=1
module	fetch a ||| module_utils	count=1
module	returns ||| modules cloud amazon	count=1
function	recreate tags from ||| recreate tags from	count=3
module	modify ||| cloud amazon	count=1
function	to make [function_2] ||| [function_1] [function_2]	count=1
function	difference of ||| diff	count=1
function	the goal [function] ||| [function] quote	count=3
function	string containing host ||| split host	count=3
arg	or cpu of a ||| server_id cpu	count=1
class	task with its ||| task	count=1
function	dict [function_2] ||| [function_1] [function_2]	count=2
module	[module] package ||| [module] packaging	count=3
arg	nat gateway ||| subnet_id allocation_id client_token	count=1
module	none ||| modules storage infinidat	count=4
class	[class_1] [class_2] ||| module_utils [class_1] [class_2]	count=1
function	and convert them ||| in	count=1
function	dictionary of ||| dict	count=1
module	containers from the docker ||| modules cloud docker	count=1
function	fetch the list of ||| get list	count=1
function	to setfacl ||| set user facl	count=1
module	key authorization for the ||| modules web_infrastructure	count=1
module	is only needed for ||| modules packaging	count=1
function	v1 server ||| v1	count=1
function	file ||| lines from file	count=1
function	and it returns a ||| get	count=1
arg	retrieve ||| check_mode	count=3
function	file then write ||| write	count=1
module	generator object for later ||| modules web_infrastructure	count=1
function	tuple if ||| listener as tuple	count=1
function	if [function_2] ||| [function_1] [function_2]	count=2
function	create an [function_2] ||| [function_1] [function_2]	count=2
class	play ||| play context	count=1
function	[function_1] id ||| [function_2] [function_1]	count=8
function	request ||| get	count=1
module_class	[module_1] nxapi ||| [module_1] [class_2]	count=2
class	remove ||| net app cdotlicense	count=1
function	[function_1] [function_2] ||| [function_1] host [function_2]	count=1
module	gets ||| modules network nxos	count=1
arg	of events to ||| fileobj events data	count=1
arg	task vars sent through ||| vars play	count=1
function	a group name ||| group name	count=2
class	return details ||| app	count=1
module	bundle-add ||| packaging os	count=1
arg	example ||| gce instance_names number	count=1
function_arg	difference [arg_2] ||| [function_1] [arg_2]	count=1
arg	digest_method specified by ||| filename algorithm	count=1
function	policy id ||| policy id	count=1
arg	the pool on ||| location lb_id pool_id	count=1
function_arg	return pool [arg_2] ||| [arg_2] [function_1]	count=1
class	it ||| acmeclient	count=1
function_arg	[function_1] [arg_2] ||| [function_1] dict_a [arg_2]	count=3
function	of ||| get loop	count=1
function	the days the certificate ||| cert days	count=1
module	lxc nothing to do ||| plugins	count=1
arg	the url and store ||| url	count=1
function	that need to be ||| to	count=1
module	of ||| modules network nxos	count=1
arg	vpc when supplied ||| module vpc	count=1
function_arg	[function_1] of packages ||| [arg_2] [function_1]	count=3
function	delete the [function_2] ||| [function_1] [function_2]	count=2
class	the main code ||| firewall	count=1
function	task lists filtered based ||| filter tagged tasks	count=1
function	return pool on ||| get pool	count=2
function	the galaxy [function_2] ||| [function_2] [function_1]	count=4
module	from ||| cloud	count=6
function	the privileges ||| table privileges	count=1
module	device supports ||| connection	count=1
function	[function_1] the elb ||| [function_1] [function_2]	count=1
arg	the value for ||| value	count=1
function	fetch a file ||| fetch file	count=21
function	input ||| additional	count=1
arg	pattern try ||| host_pattern host_data	count=1
module	the ||| modules web_infrastructure	count=2
function	state from aws ||| fetch aws state	count=2
function	[function_1] policies for ||| [function_1] [function_2]	count=1
function	to the [function_2] ||| [function_2] [function_1]	count=1
function	that ttl ||| ttl	count=1
function	get the status ||| get	count=1
function	group name returns the ||| group name	count=1
arg	changes [arg_2] ||| [arg_1] [arg_2]	count=1
arg	play host ||| play host	count=1
module	given ||| cloud centurylink	count=4
function	id ||| id	count=6
module	over a ||| plugins	count=1
function	when module ||| module string	count=1
arg	and values specified ||| cf container	count=1
function	of newlines at the ||| newlines from	count=1
function	a unique key ||| key	count=1
class	in the metadata ||| metadata	count=1
arg	fqdn ||| record_type record_name	count=1
function	extensions ||| extensions	count=1
function	hostname this is ||| hostname	count=1
function	the six [function_2] ||| [function_1] [function_2]	count=1
function	need to be removed ||| to remove	count=1
module	check ||| mongodb	count=1
module	method for example ||| modules cloud	count=1
function	resize ||| resize	count=2
module	new ||| dimensiondata	count=1
function	subnets each identified ||| find subnets	count=1
function_arg	[function_1] [arg_2] ||| [function_1] inventory basename [arg_2]	count=2
function	of waiting on ||| get poller	count=1
arg	from local to ||| in_path out_path	count=8
module	closes the ||| connection	count=1
function	run on start of ||| on play start	count=1
function	to preserve spaces ||| parse	count=1
function	is a package ||| is package	count=2
function	installed [function_2] ||| [function_1] [function_2]	count=2
arg	the given path ||| path	count=1
module	a dash ||| modules network cumulus	count=4
arg	url hostkey ||| module url	count=1
function	role ||| is role	count=2
class	command ||| timezone	count=1
function	them into ||| make tags in	count=1
function	to compare ||| compare	count=3
function	or name field ||| name	count=1
function	to parse [function_2] ||| [function_1] [function_2]	count=4
function	validation for [function_2] ||| [function_2] [function_1]	count=1
arg	returns change status of ||| xbps_path packages state	count=1
function	[function] bottom so ||| save ssh [function]	count=1
arg	a particular ||| host	count=1
module	check if ||| database mongodb	count=1
function	[function_1] and ||| [function_1] [function_2]	count=1
class	instantiates ||| plugin loader	count=1
class	main code path ||| clc load balancer	count=1
module	[module_1] given ||| [module_1] [module_2]	count=10
module	for registration ||| module_utils	count=1
arg	given list of servers ||| server_ids	count=1
function	the wait argument is ||| wait for	count=3
function	reads results off ||| results	count=1
function	api call ||| axapi call v3	count=1
arg	specified ||| options	count=1
class	main ||| group	count=1
class	code path ||| policy	count=1
arg	that a user ||| cursor user	count=2
arg	if original ||| old_ttl old_record_data new_ttl new_record_data	count=1
arg	available hosts [arg] ||| [arg]	count=1
function	api to create a ||| create	count=1
class	module implements are only ||| manager	count=1
function	remote file ||| remote	count=1
module	or alias or ||| modules cloud amazon	count=1
module	bindings if any ||| modules cloud docker	count=2
module	information for the ||| modules	count=1
function	[function_1] src ||| [function_1] [function_2]	count=1
function	installer binary ||| installer binary	count=1
function	message from ||| message	count=1
module	creates new filesystem with ||| cloud	count=1
function	work because [function] ||| [function] unlabeled device	count=3
arg	terms contains ||| terms variables	count=1
function	different and a list ||| has different	count=1
module	code ||| modules cloud centurylink	count=6
module	the amazon ||| modules cloud amazon	count=2
module	if a ||| modules cloud	count=3
module	host we've been initialized ||| plugins connection	count=1
arg	the vars_cache [arg_2] ||| [arg_2] [arg_1]	count=2
function	writes initial [function_2] ||| [function_2] [function_1]	count=3
module	for an account ||| modules cloud centurylink	count=2
function	to schedule ||| schedule	count=4
function	of this block ||| get	count=1
function_arg	[function_1] managed instance ||| [function_1] [arg_2]	count=4
module	start the machine via ||| misc	count=1
function	assumes the branch ||| remote branch	count=1
class	write ||| acmeclient	count=1
module_class	action [class_2] ||| [module_1] action [class_2]	count=1
class	initialized ||| connection	count=1
function	a temporary ||| make tmp	count=1
function	path [function_2] ||| [function_2] [function_1]	count=2
arg	change ||| lb awaited_state initial_state	count=1
arg	updates the given facts ||| facts	count=1
function	[function_1] the servers ||| [function_1] [function_2]	count=3
function_arg	[function_1] is sensible ||| [function_1] module host key [arg_2]	count=1
function_arg	add nodes [arg_2] ||| [function_1] alias location [arg_2]	count=1
arg	router ||| router network	count=1
arg	be templated ||| templar	count=2
function	for a ||| for	count=1
function	[function_1] node ||| [function_1] [function_2]	count=1
module	false otherwise ||| modules database postgresql	count=1
function	policy ||| policy id	count=2
function	and get [function_2] ||| [function_2] [function_1]	count=3
function	start the machine via ||| start	count=1
arg	name it ||| name	count=1
class	network and returns a ||| docker network manager	count=1
function	[function] few ||| [function]	count=2
arg	an ||| client instance_name	count=1
function	[function_1] [function_2] ||| [function_1] error [function_2]	count=3
arg	the desired ||| timeout	count=1
function	backend ||| backend	count=4
class	the main ||| management	count=1
function	lower or upper case ||| case	count=1
function	number of newlines ||| newlines from	count=1
function	define ||| define	count=1
function	to make [function_2] ||| [function_2] [function_1]	count=1
function	anti affinity policy ||| aa policy	count=2
class	network and returns ||| network manager	count=1
function	code from the ||| code from	count=2
function	ssh keys ||| ssh host keys	count=1
module	for a service to ||| modules	count=1
arg	consumed ||| consumed	count=1
function	a policy is ||| policy is	count=3
function	keys the value of ||| change keys	count=1
arg	options at the beginning ||| raw_key rank	count=1
function	to ||| remote target ids to	count=1
function_arg	[function_1] dict passed ||| [function_1] [arg_2]	count=1
arg	bond member if ||| _bondmems	count=1
function	requests to ||| requests	count=1
module	alias or none ||| modules cloud amazon	count=1
module	a ||| plugins connection	count=2
function	operations to ||| to	count=1
arg	vm determined by ||| vm	count=1
function	version ||| template with version	count=1
arg	b take precedence over ||| b	count=1
arg	not include the permissions ||| permissions	count=1
function	role ||| role	count=4
arg	the given value ||| value num_items	count=1
function	task lists filtered based ||| tagged tasks	count=1
arg	host to ||| host	count=2
module	a ||| module_utils	count=17
function	validate that ttl ||| find ttl	count=1
function_arg	[function_1] [arg_2] to ||| [function_1] [arg_2]	count=6
function	key ids and ||| key ids	count=1
arg	options ||| options	count=1
class	locale module to test ||| module	count=1
class	of ||| cloud stack	count=1
function	name ||| image lookup	count=1
module	[module_1] required for ||| [module_1] [module_2]	count=2
function	validate the authorization provided ||| validate	count=1
module	return ||| packaging os	count=1
module	connection nothing to ||| plugins connection	count=6
module	alias or ||| modules cloud amazon	count=1
function	of a stack while ||| stack	count=1
module	linode ||| cloud linode	count=1
class	system ||| rhsm	count=5
function	them into the ||| make tags in	count=1
arg	of servers ||| server_ids	count=1
function	instances ||| instances	count=2
function	of the balancer ||| get balancer	count=3
module	a lambda function ||| modules cloud	count=1
function	is removed from the ||| absent	count=1
arg	results of pip command ||| module pip chdir	count=1
function	password from ||| password	count=1
function	[function_1] pool on ||| [function_1] [function_2]	count=1
arg	packages ||| m packages	count=1
module	a container ||| cloud docker	count=1
module	execute the main code ||| centurylink	count=3
class	execute the ||| policy	count=1
function	[function_1] backend ||| [function_1] [function_2]	count=1
module	nothing to ||| plugins connection	count=8
module	machine via ||| modules cloud	count=1
function	boto3 ||| boto3	count=2
class	locale module to test ||| ansible module	count=1
function	creates ||| create	count=3
function	alert policy to ||| alert policy to	count=7
function	gather ||| gather	count=1
arg	clc [arg_2] ||| [arg_2] [arg_1]	count=1
class	to lxd nothing to ||| connection	count=1
function_arg	[function_1] object to ||| [function_1] to dict [arg_2]	count=2
class	return ||| app	count=1
function	change the ||| change	count=1
class	given [class] based ||| [class]	count=1
class	for this ||| base	count=1
class	until server provisioning ||| clc modify server	count=1
arg	way for ||| rax_module region_required	count=1
function_arg	[function_1] url and ||| [arg_2] [function_1]	count=1
function	chown ||| chown	count=1
arg	from url returns a ||| url	count=1
function	[function_1] a vault ||| [function_2] [function_1]	count=1
class	to the destination file ||| acmeclient	count=1
function	[function_1] requests ||| [function_1] [function_2]	count=3
function	execute the shell command ||| execute	count=1
function	and build ||| build	count=2
module	[module_1] gpg ||| [module_1] [module_2]	count=2
function	dict [function_2] ||| [function_2] [function_1]	count=2
module	the lxc ||| plugins connection	count=1
function	array of binds to ||| image binds	count=1
function_arg	[function_1] ec2 ||| [function_1] [arg_2]	count=2
function	this assumes the branch ||| remote branch	count=1
module	cloud ||| cloud	count=1
arg	in ||| module cloud	count=1
arg	next url ||| url	count=1
function	[function_1] shell ||| [function_2] [function_1]	count=5
function	extensions to ||| extensions	count=1
class	get ||| clc firewall policy	count=1
class	to the host ||| base	count=1
class	handle the ||| load balancer	count=1
module	currently ||| cloud amazon	count=1
module	code path and ||| modules	count=3
function_arg	pool [arg_2] ||| [function_1] [arg_2]	count=1
arg	pool ||| location lb_id pool_id	count=1
module	exists or all ||| cloud amazon	count=1
arg	is sensible host and ||| sshkeygen	count=1
function	which will override those ||| variable override	count=1
arg	changes [arg_2] ||| [arg_2] [arg_1]	count=1
function	[function_1] six ||| [function_1] [function_2]	count=3
function	[function] mvip ||| [function] mvip	count=1
function	list operations to the ||| to	count=1
function	of the server ||| of	count=1
function	a [function] of inventory ||| [function]	count=1
function	ids ||| ids	count=2
function	info entry in the ||| info	count=1
module	returns package ||| modules packaging os	count=1
function	the repo removes old ||| repo	count=1
function	[function_1] elb ||| [function_2] [function_1]	count=1
