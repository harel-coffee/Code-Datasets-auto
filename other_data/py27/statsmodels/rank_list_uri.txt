<tt style='background-color:#E8E8E8;'> core.NoseWrapper <a href=' /__init__.py#L37'>test</a>(label,verbose,extra_argv,doctests)</tt>	Run tests for module using nose %(test_header)s.
<tt style='background-color:#E8E8E8;'> robust. <a href=' /robust/scale.py#L17'>mad</a>(a,c,axis,center)</tt>	The median absolute deviation along given axis of an array parameters.
<tt style='background-color:#E8E8E8;'> robust.Huber <a href=' /robust/scale.py#L86'>__call__</a>(a,mu,initscale,axis)</tt>	Compute huber's proposal 2 estimate of scale using an optional initial value of scale and an optional estimate of mu.
<tt style='background-color:#E8E8E8;'> robust.Huber <a href=' /robust/scale.py#L131'>_estimate_both</a>(a,scale,mu,axis)</tt>	Estimate scale and location simultaneously with the following pseudo_loop.
<tt style='background-color:#E8E8E8;'> robust.RobustNorm <a href=' /robust/norms.py#L38'>rho</a>(z)</tt>	The robust criterion estimator function.
<tt style='background-color:#E8E8E8;'> robust.RobustNorm <a href=' /robust/norms.py#L48'>psi</a>(z)</tt>	Derivative of rho sometimes referred to as the influence function.
<tt style='background-color:#E8E8E8;'> robust.RobustNorm <a href=' /robust/norms.py#L58'>weights</a>(z)</tt>	Returns the value of psi z / z.
<tt style='background-color:#E8E8E8;'> robust.RobustNorm <a href=' /robust/norms.py#L68'>psi_deriv</a>(z)</tt>	Deriative of psi used to obtain robust covariance matrix.
<tt style='background-color:#E8E8E8;'> robust.RobustNorm <a href=' /robust/norms.py#L80'>__call__</a>(z)</tt>	Returns the value of estimator rho applied to an input.
<tt style='background-color:#E8E8E8;'> robust.LeastSquares <a href=' /robust/norms.py#L96'>rho</a>(z)</tt>	The least squares estimator rho function parameters.
<tt style='background-color:#E8E8E8;'> robust.LeastSquares <a href=' /robust/norms.py#L113'>psi</a>(z)</tt>	The psi function for the least squares estimator.
<tt style='background-color:#E8E8E8;'> robust.LeastSquares <a href=' /robust/norms.py#L132'>weights</a>(z)</tt>	The least squares estimator weighting function for the irls algorithm.
<tt style='background-color:#E8E8E8;'> robust.LeastSquares <a href=' /robust/norms.py#L152'>psi_deriv</a>(z)</tt>	The derivative of the least squares psi function.
<tt style='background-color:#E8E8E8;'> robust.HuberT <a href=' /robust/norms.py#L185'>_subset</a>(z)</tt>	Huber's t is defined piecewise over the range for z.
<tt style='background-color:#E8E8E8;'> robust.HuberT <a href=' /robust/norms.py#L192'>rho</a>(z)</tt>	The robust criterion function for huber's t.
<tt style='background-color:#E8E8E8;'> robust.HuberT <a href=' /robust/norms.py#L213'>psi</a>(z)</tt>	The psi function for huber's t estimator.
<tt style='background-color:#E8E8E8;'> robust.HuberT <a href=' /robust/norms.py#L235'>weights</a>(z)</tt>	Huber's t weighting function for the irls algorithm.
<tt style='background-color:#E8E8E8;'> robust.HuberT <a href=' /robust/norms.py#L259'>psi_deriv</a>(z)</tt>	The derivative of huber's t psi function notes.
<tt style='background-color:#E8E8E8;'> robust.RamsayE <a href=' /robust/norms.py#L288'>rho</a>(z)</tt>	The robust criterion function for ramsay's ea.
<tt style='background-color:#E8E8E8;'> robust.RamsayE <a href=' /robust/norms.py#L306'>psi</a>(z)</tt>	The psi function for ramsay's ea estimator.
<tt style='background-color:#E8E8E8;'> robust.RamsayE <a href=' /robust/norms.py#L325'>weights</a>(z)</tt>	Ramsay's ea weighting function for the irls algorithm.
<tt style='background-color:#E8E8E8;'> robust.RamsayE <a href=' /robust/norms.py#L345'>psi_deriv</a>(z)</tt>	The derivative of ramsay's ea psi function.
<tt style='background-color:#E8E8E8;'> robust.AndrewWave <a href=' /robust/norms.py#L375'>_subset</a>(z)</tt>	Andrew's wave is defined piecewise over the range of z.
<tt style='background-color:#E8E8E8;'> robust.AndrewWave <a href=' /robust/norms.py#L382'>rho</a>(z)</tt>	The robust criterion function for andrew's wave.
<tt style='background-color:#E8E8E8;'> robust.AndrewWave <a href=' /robust/norms.py#L405'>psi</a>(z)</tt>	The psi function for andrew's wave.
<tt style='background-color:#E8E8E8;'> robust.AndrewWave <a href=' /robust/norms.py#L429'>weights</a>(z)</tt>	Andrew's wave weighting function for the irls algorithm.
<tt style='background-color:#E8E8E8;'> robust.AndrewWave <a href=' /robust/norms.py#L452'>psi_deriv</a>(z)</tt>	The derivative of andrew's wave psi function notes.
<tt style='background-color:#E8E8E8;'> robust.TrimmedMean <a href=' /robust/norms.py#L483'>_subset</a>(z)</tt>	Least trimmed mean is defined piecewise over the range of z.
<tt style='background-color:#E8E8E8;'> robust.TrimmedMean <a href=' /robust/norms.py#L491'>rho</a>(z)</tt>	The robust criterion function for least trimmed mean.
<tt style='background-color:#E8E8E8;'> robust.TrimmedMean <a href=' /robust/norms.py#L512'>psi</a>(z)</tt>	The psi function for least trimmed mean.
<tt style='background-color:#E8E8E8;'> robust.TrimmedMean <a href=' /robust/norms.py#L535'>weights</a>(z)</tt>	Least trimmed mean weighting function for the irls algorithm.
<tt style='background-color:#E8E8E8;'> robust.TrimmedMean <a href=' /robust/norms.py#L558'>psi_deriv</a>(z)</tt>	The derivative of least trimmed mean psi function notes.
<tt style='background-color:#E8E8E8;'> robust.Hampel <a href=' /robust/norms.py#L592'>_subset</a>(z)</tt>	Hampel's function is defined piecewise over the range of z.
<tt style='background-color:#E8E8E8;'> robust.Hampel <a href=' /robust/norms.py#L602'>rho</a>(z)</tt>	The robust criterion function for hampel's estimator parameters.
<tt style='background-color:#E8E8E8;'> robust.Hampel <a href=' /robust/norms.py#L632'>psi</a>(z)</tt>	The psi function for hampel's estimator.
<tt style='background-color:#E8E8E8;'> robust.Hampel <a href=' /robust/norms.py#L664'>weights</a>(z)</tt>	Hampel weighting function for the irls algorithm.
<tt style='background-color:#E8E8E8;'> robust.TukeyBiweight <a href=' /robust/norms.py#L719'>_subset</a>(z)</tt>	Tukey's biweight is defined piecewise over the range of z.
<tt style='background-color:#E8E8E8;'> robust.TukeyBiweight <a href=' /robust/norms.py#L726'>rho</a>(z)</tt>	The robust criterion function for tukey's biweight estimator parameters.
<tt style='background-color:#E8E8E8;'> robust.TukeyBiweight <a href=' /robust/norms.py#L745'>psi</a>(z)</tt>	The psi function for tukey's biweight estimator.
<tt style='background-color:#E8E8E8;'> robust.TukeyBiweight <a href=' /robust/norms.py#L769'>weights</a>(z)</tt>	Tukey's biweight weighting function for the irls algorithm.
<tt style='background-color:#E8E8E8;'> robust.TukeyBiweight <a href=' /robust/norms.py#L791'>psi_deriv</a>(z)</tt>	The derivative of tukey's biweight psi function notes.
<tt style='background-color:#E8E8E8;'> robust. <a href=' /robust/norms.py#L803'>estimate_location</a>(a,scale,norm,axis)</tt>	M-estimator of location using self norm and a current.
<tt style='background-color:#E8E8E8;'> robust.RLM <a href=' /robust/robust_linear_model.py#L120'>_initialize</a>()</tt>	Initializes the model for the irls fit.
<tt style='background-color:#E8E8E8;'> robust.RLM <a href=' /robust/robust_linear_model.py#L140'>predict</a>(params,exog)</tt>	Return linear predicted values from a design matrix.
<tt style='background-color:#E8E8E8;'> robust.RLM <a href=' /robust/robust_linear_model.py#L167'>deviance</a>(tmp_results)</tt>	Returns the unnormalized log-likelihood from the m estimator.
<tt style='background-color:#E8E8E8;'> robust.RLM <a href=' /robust/robust_linear_model.py#L185'>_estimate_scale</a>(resid)</tt>	Estimates the scale based on the option provided to the fit method.
<tt style='background-color:#E8E8E8;'> robust.RLM <a href=' /robust/robust_linear_model.py#L202'>fit</a>(maxiter,tol,scale_est,init)</tt>	Fits the model using iteratively reweighted least squares.
<tt style='background-color:#E8E8E8;'> robust.RLMResults <a href=' /robust/robust_linear_model.py#L472'>summary</a>(yname,xname,title,alpha)</tt>	This is for testing the new summary setup.
<tt style='background-color:#E8E8E8;'> robust.RLMResults <a href=' /robust/robust_linear_model.py#L534'>summary2</a>(xname,yname,title,alpha)</tt>	Experimental summary function for regression results parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/ar_model.py#L24'>sumofsq</a>(x,axis)</tt>	Helper function to calculate sum of squares along first axis.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L571'>_ar_transparams</a>(params)</tt>	Transforms params to induce stationarity/invertability.
<tt style='background-color:#E8E8E8;'> tsa.AR <a href=' /tsa/ar_model.py#L88'>_invtransparams</a>(start_params)</tt>	Inverse of the jones reparameterization.
<tt style='background-color:#E8E8E8;'> tsa.AR <a href=' /tsa/ar_model.py#L98'>_presample_fit</a>(params,start,p,end)</tt>	Return the pre-sample predicted values using the kalman filter notes.
<tt style='background-color:#E8E8E8;'> tsa.AR <a href=' /tsa/ar_model.py#L157'>predict</a>(params,start,end,dynamic)</tt>	Returns in-sample and out-of-sample prediction.
<tt style='background-color:#E8E8E8;'> tsa.AR <a href=' /tsa/ar_model.py#L239'>_presample_varcov</a>(params)</tt>	Returns the inverse of the presample variance-covariance.
<tt style='background-color:#E8E8E8;'> tsa.AR <a href=' /tsa/ar_model.py#L262'>_loglike_css</a>(params)</tt>	Loglikelihood of ar p process using conditional sum of squares.
<tt style='background-color:#E8E8E8;'> tsa.AR <a href=' /tsa/ar_model.py#L274'>_loglike_mle</a>(params)</tt>	Loglikelihood of ar p process using exact maximum likelihood.
<tt style='background-color:#E8E8E8;'> tsa.AR <a href=' /tsa/ar_model.py#L311'>loglike</a>(params)</tt>	The loglikelihood of an ar p process parameters.
<tt style='background-color:#E8E8E8;'> tsa.AR <a href=' /tsa/ar_model.py#L350'>score</a>(params)</tt>	Return the gradient of the loglikelihood at params.
<tt style='background-color:#E8E8E8;'> tsa.AR <a href=' /tsa/ar_model.py#L366'>information</a>(params)</tt>	Not implemented yet.
<tt style='background-color:#E8E8E8;'> tsa.AR <a href=' /tsa/ar_model.py#L372'>hessian</a>(params)</tt>	Returns numerical hessian for now.
<tt style='background-color:#E8E8E8;'> tsa.AR <a href=' /tsa/ar_model.py#L379'>_stackX</a>(k_ar,trend)</tt>	Private method to build the rhs matrix for estimation.
<tt style='background-color:#E8E8E8;'> tsa.AR <a href=' /tsa/ar_model.py#L393'>select_order</a>(maxlag,ic,trend,method)</tt>	Select the lag order according to the information criterion.
<tt style='background-color:#E8E8E8;'> tsa.AR <a href=' /tsa/ar_model.py#L449'>fit</a>(maxlag,method,ic,trend)</tt>	Fit the unconditional maximum likelihood of an ar p process.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L33'>_autolag</a>(mod,endog,exog,startlag)</tt>	Returns the results for the lag length that maximizes the info criterion.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L118'>adfuller</a>(x,maxlag,regression,autolag)</tt>	Augmented dickey-fuller unit root test the augmented dickey-fuller test can be used to test for a unit root in a.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L296'>acovf</a>(x,unbiased,demean,fft)</tt>	Autocovariance for 1d parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L385'>q_stat</a>(x,nobs,type)</tt>	Return's ljung-box q statistic x : array-like.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L417'>acf</a>(x,unbiased,nlags,qstat)</tt>	Autocorrelation function for 1d arrays.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L495'>pacf_yw</a>(x,nlags,method)</tt>	Partial autocorrelation estimated with non-recursive yule_walker parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L524'>pacf_ols</a>(x,nlags)</tt>	Calculate partial autocorrelations parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L559'>pacf</a>(x,nlags,method,alpha)</tt>	Partial autocorrelation estimated parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L625'>ccovf</a>(x,y,unbiased,demean)</tt>	Crosscovariance for 1d parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L660'>ccf</a>(x,y,unbiased)</tt>	Cross-correlation function for 1d parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L688'>periodogram</a>(X)</tt>	Returns the periodogram for the natural frequency of x parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L718'>levinson_durbin</a>(s,nlags,isacov)</tt>	Levinson-durbin recursion for autoregressive processes parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L788'>grangercausalitytests</a>(x,maxlag,addconst,verbose)</tt>	Four tests for granger non causality of 2 timeseries all four tests give similar results.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L924'>coint</a>(y0,y1,trend,method)</tt>	Test for no-cointegration of a univariate equation the null hypothesis is no cointegration.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L1061'>arma_order_select_ic</a>(y,max_ar,max_ma,ic)</tt>	Returns information criteria for many arma models parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L1156'>has_missing</a>(data)</tt>	Returns true if 'data' contains missing entries otherwise false.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L1163'>kpss</a>(x,regression,lags,store)</tt>	Kwiatkowski-phillips-schmidt-shin test for stationarity.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/stattools.py#L1278'>_sigma_est_kpss</a>(resids,nobs,lags)</tt>	Computes equation 10 p 164 of kwiatkowski et al 1992 this is the.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_process.py#L61'>arma_generate_sample</a>(ar,ma,nsample,sigma)</tt>	Generate a random sample of an arma process parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_process.py#L116'>arma_acovf</a>(ar,ma,nobs)</tt>	Theoretical autocovariance function of arma process parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_process.py#L166'>arma_acf</a>(ar,ma,nobs)</tt>	Theoretical autocorrelation function of an arma process.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_process.py#L195'>arma_pacf</a>(ar,ma,nobs)</tt>	Partial autocorrelation function of an arma process.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_process.py#L228'>arma_periodogram</a>(ar,ma,worN,whole)</tt>	Periodogram for arma process given by lag-polynomials ar and ma parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_process.py#L270'>arma_impulse_response</a>(ar,ma,nobs)</tt>	Get the impulse response function ma representation for arma process parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_process.py#L333'>arma2ar</a>(ar,ma,nobs)</tt>	Get the ar representation of an arma process parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_process.py#L364'>ar2arma</a>(ar_des,p,q,n)</tt>	Find arma approximation to ar process this finds the arma p q coefficients that minimize the integrated.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_process.py#L424'>lpol2index</a>(ar)</tt>	Remove zeros from lagpolynomial squeezed representation with index.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_process.py#L445'>index2lpol</a>(coeffs,index)</tt>	Expand coefficients to lag poly.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_process.py#L470'>lpol_fima</a>(d,n)</tt>	Ma representation of fractional integration.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_process.py#L495'>lpol_fiar</a>(d,n)</tt>	Ar representation of fractional integration.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_process.py#L525'>lpol_sdiff</a>(s)</tt>	Return coefficients for seasonal difference (1-l^s).
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_process.py#L543'>deconvolve</a>(num,den,n)</tt>	Deconvolves divisor out of signal division of polynomials for n terms calculates den^{-1} * num.
<tt style='background-color:#E8E8E8;'> tsa.ArmaProcess <a href=' /tsa/arima_process.py#L648'>from_coeffs</a>(cls,arcoefs,macoefs,nobs)</tt>	Create armaprocess instance from coefficients of the lag-polynomials parameters.
<tt style='background-color:#E8E8E8;'> tsa.ArmaProcess <a href=' /tsa/arima_process.py#L668'>from_estimation</a>(cls,model_results,nobs)</tt>	Create armaprocess instance from arma estimation results.
<tt style='background-color:#E8E8E8;'> tsa.ArmaProcess <a href=' /tsa/arima_process.py#L752'>arroots</a>()</tt>	Roots of autoregressive lag-polynomial.
<tt style='background-color:#E8E8E8;'> tsa.ArmaProcess <a href=' /tsa/arima_process.py#L759'>maroots</a>()</tt>	Roots of moving average lag-polynomial.
<tt style='background-color:#E8E8E8;'> tsa.ArmaProcess <a href=' /tsa/arima_process.py#L766'>isstationary</a>()</tt>	Arma process is stationary if ar roots are outside unit circle.
<tt style='background-color:#E8E8E8;'> tsa.ArmaProcess <a href=' /tsa/arima_process.py#L780'>isinvertible</a>()</tt>	Arma process is invertible if ma roots are outside unit circle.
<tt style='background-color:#E8E8E8;'> tsa.ArmaProcess <a href=' /tsa/arima_process.py#L794'>invertroots</a>(retnew)</tt>	Make ma polynomial invertible by inverting roots inside unit circle parameters.
<tt style='background-color:#E8E8E8;'> tsa.ArmaProcess <a href=' /tsa/arima_process.py#L830'>generate_sample</a>(nsample,scale,distrvs,axis)</tt>	Generate arma samples parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/seasonal.py#L12'>seasonal_mean</a>(x,freq)</tt>	Return means for each period in x freq is an int that gives the.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/seasonal.py#L21'>seasonal_decompose</a>(x,model,filt,freq)</tt>	Seasonal decomposition using moving averages parameters.
<tt style='background-color:#E8E8E8;'> tsa.Arma <a href=' /tsa/arma_mle.py#L79'>loglike</a>(params)</tt>	Loglikelihood for arma model.
<tt style='background-color:#E8E8E8;'> tsa.Arma <a href=' /tsa/arma_mle.py#L109'>nloglikeobs</a>(params)</tt>	Loglikelihood for arma model.
<tt style='background-color:#E8E8E8;'> tsa.Arma <a href=' /tsa/arma_mle.py#L159'>fit</a>(order,start_params,method)</tt>	Estimate lag coefficients of an arima process.
<tt style='background-color:#E8E8E8;'> tsa.Arma <a href=' /tsa/arma_mle.py#L248'>fit_mle</a>(order,start_params,method,maxiter)</tt>	Estimate an arma model with given order using conditional maximum likelihood.
<tt style='background-color:#E8E8E8;'> tsa.Arma <a href=' /tsa/arma_mle.py#L287'>predicted</a>(ar,ma)</tt>	Past predicted values of time series.
<tt style='background-color:#E8E8E8;'> tsa.Arma <a href=' /tsa/arma_mle.py#L301'>forecast</a>(ar,ma,nperiod)</tt>	Nperiod ahead forecast at the end of the data period.
<tt style='background-color:#E8E8E8;'> tsa.Arma <a href=' /tsa/arma_mle.py#L313'>forecast2</a>(step_ahead,start,end,endog)</tt>	Rolling h-period ahead forecast without reestimation 1 period ahead only in construction uses loop to go over data and.
<tt style='background-color:#E8E8E8;'> tsa.Arma <a href=' /tsa/arma_mle.py#L353'>forecast3</a>(step_ahead,start)</tt>	Another try for h-step ahead forecasting.
<tt style='background-color:#E8E8E8;'> tsa.TSMLEModel <a href=' /tsa/mlemodel.py#L44'>loglike</a>(params)</tt>	Loglikelihood for timeseries model.
<tt style='background-color:#E8E8E8;'> tsa.TSMLEModel <a href=' /tsa/mlemodel.py#L55'>score</a>(params)</tt>	Score vector for arma model.
<tt style='background-color:#E8E8E8;'> tsa.TSMLEModel <a href=' /tsa/mlemodel.py#L64'>hessian</a>(params)</tt>	Hessian of arma model currently uses numdifftools.
<tt style='background-color:#E8E8E8;'> tsa.TSMLEModel <a href=' /tsa/mlemodel.py#L73'>fit</a>(start_params,maxiter,method,tol)</tt>	Estimate model by minimizing negative loglikelihood.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L15'>add_trend</a>(x,trend,prepend,has_constant)</tt>	Adds a trend and/or constant to an array.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L126'>add_lag</a>(x,col,lags,drop)</tt>	Returns an array with lags included given an array.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L257'>detrend</a>(x,order,axis)</tt>	Detrend an array with a trend of given order along axis 0 or 1 parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L299'>lagmat</a>(x,maxlag,trim,original)</tt>	Create 2d array of lags parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L419'>lagmat2ds</a>(x,maxlag0,maxlagex,dropex)</tt>	Generate lagmatrix for 2d array columns arranged by variables parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L527'>duplication_matrix</a>(n)</tt>	Create duplication matrix d_n which satisfies vec s = d_n vech s for.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L539'>elimination_matrix</a>(n)</tt>	Create the elimination matrix l_n which satisfies vech m = l_n vec m for.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L554'>commutation_matrix</a>(p,q)</tt>	Create the commutation matrix k_{p q} satisfying vec(a') = k_{p q} vec a.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L595'>_ar_invtransparams</a>(params)</tt>	Inverse of the jones reparameterization.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L615'>_ma_transparams</a>(params)</tt>	Transforms params to induce stationarity/invertability.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L639'>_ma_invtransparams</a>(macoefs)</tt>	Inverse of the jones reparameterization.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L658'>unintegrate_levels</a>(x,d)</tt>	Returns the successive differences needed to unintegrate the series.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L683'>unintegrate</a>(x,levels)</tt>	After taking n-differences of a series return the original series parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/tsatools.py#L717'>freq_to_period</a>(freq)</tt>	Convert a pandas frequency to a periodicity parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_model.py#L258'>_get_predict_out_of_sample</a>(endog,p,q,k_trend)</tt>	Returns endog resid mu of appropriate length for out of sample prediction.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/arima_model.py#L356'>_arma_predict_in_sample</a>(start,end,endog,resid)</tt>	Pre- and in-sample fitting for arma.
<tt style='background-color:#E8E8E8;'> tsa.ARMA <a href=' /tsa/arima_model.py#L454'>_fit_start_params_hr</a>(order,start_ar_lags)</tt>	Get starting parameters for fit.
<tt style='background-color:#E8E8E8;'> tsa.ARMA <a href=' /tsa/arima_model.py#L577'>score</a>(params)</tt>	Compute the score function at params.
<tt style='background-color:#E8E8E8;'> tsa.ARMA <a href=' /tsa/arima_model.py#L587'>hessian</a>(params)</tt>	Compute the hessian at params notes.
<tt style='background-color:#E8E8E8;'> tsa.ARMA <a href=' /tsa/arima_model.py#L597'>_transparams</a>(params)</tt>	Transforms params to induce stationarity/invertability.
<tt style='background-color:#E8E8E8;'> tsa.ARMA <a href=' /tsa/arima_model.py#L622'>_invtransparams</a>(start_params)</tt>	Inverse of the jones reparameterization.
<tt style='background-color:#E8E8E8;'> tsa.ARMA <a href=' /tsa/arima_model.py#L664'>geterrors</a>(params)</tt>	Get the errors of the arma process.
<tt style='background-color:#E8E8E8;'> tsa.ARMA <a href=' /tsa/arima_model.py#L768'>loglike</a>(params,set_sigma2)</tt>	Compute the log-likelihood for arma p q model.
<tt style='background-color:#E8E8E8;'> tsa.ARMA <a href=' /tsa/arima_model.py#L784'>loglike_kalman</a>(params,set_sigma2)</tt>	Compute exact loglikelihood for arma p q model by the kalman filter.
<tt style='background-color:#E8E8E8;'> tsa.ARMA <a href=' /tsa/arima_model.py#L790'>loglike_css</a>(params,set_sigma2)</tt>	Conditional sum of squares likelihood function.
<tt style='background-color:#E8E8E8;'> tsa.ARMA <a href=' /tsa/arima_model.py#L820'>fit</a>(start_params,trend,method,transparams)</tt>	Fits arma p q model using exact maximum likelihood via kalman filter.
<tt style='background-color:#E8E8E8;'> tsa.ARIMA <a href=' /tsa/arima_model.py#L1064'>fit</a>(start_params,trend,method,transparams)</tt>	Fits arima p d q model by exact maximum likelihood via kalman filter.
<tt style='background-color:#E8E8E8;'> tsa.ARMAResults <a href=' /tsa/arima_model.py#L1396'>arfreq</a>()</tt>	Returns the frequency of the ar roots.
<tt style='background-color:#E8E8E8;'> tsa.ARMAResults <a href=' /tsa/arima_model.py#L1409'>mafreq</a>()</tt>	Returns the frequency of the ma roots.
<tt style='background-color:#E8E8E8;'> tsa.ARMAResults <a href=' /tsa/arima_model.py#L1512'>forecast</a>(steps,exog,alpha)</tt>	Out-of-sample forecasts parameters.
<tt style='background-color:#E8E8E8;'> tsa.ARMAResults <a href=' /tsa/arima_model.py#L1566'>summary</a>(alpha)</tt>	Summarize the model parameters.
<tt style='background-color:#E8E8E8;'> tsa.ARMAResults <a href=' /tsa/arima_model.py#L1665'>summary2</a>(title,alpha,float_format)</tt>	Experimental summary function for arima results parameters.
<tt style='background-color:#E8E8E8;'> tsa.ARIMAResults <a href=' /tsa/arima_model.py#L1828'>forecast</a>(steps,exog,alpha)</tt>	Out-of-sample forecasts parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/varma_process.py#L41'>varfilter</a>(x,a)</tt>	Apply an autoregressive filter to a series x warning i just found out that convolve doesn't work as i.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/varma_process.py#L137'>varinversefilter</a>(ar,nobs,version)</tt>	Creates inverse ar filter ma representation recursively.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/varma_process.py#L188'>vargenerate</a>(ar,u,initvalues)</tt>	Generate an var process with errors u similar to gauss.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/varma_process.py#L249'>padone</a>(x,front,back,axis)</tt>	Pad with zeros along one axis currently only axis=0 can be used sequentially to pad several axis.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/varma_process.py#L283'>trimone</a>(x,front,back,axis)</tt>	Trim number of array elements along one axis examples.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/varma_process.py#L312'>ar2full</a>(ar)</tt>	Make reduced lagpolynomial into a right side lagpoly array.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/varma_process.py#L318'>ar2lhs</a>(ar)</tt>	Convert full rhs lagpolynomial into a reduced left side lagpoly array.
<tt style='background-color:#E8E8E8;'> tsa._Var <a href=' /tsa/varma_process.py#L350'>fit</a>(nlags)</tt>	Estimate parameters using ols parameters.
<tt style='background-color:#E8E8E8;'> tsa._Var <a href=' /tsa/varma_process.py#L391'>predict</a>()</tt>	Calculate estimated timeseries yhat for sample.
<tt style='background-color:#E8E8E8;'> tsa._Var <a href=' /tsa/varma_process.py#L400'>covmat</a>()</tt>	Covariance matrix of estimate # not sure it's correct need to check orientation everywhere.
<tt style='background-color:#E8E8E8;'> tsa._Var <a href=' /tsa/varma_process.py#L423'>forecast</a>(horiz,u)</tt>	Calculates forcast for horiz number of periods at end of sample parameters.
<tt style='background-color:#E8E8E8;'> tsa.VarmaPoly <a href=' /tsa/varma_process.py#L484'>vstack</a>(a,name)</tt>	Stack lagpolynomial vertically in 2d array.
<tt style='background-color:#E8E8E8;'> tsa.VarmaPoly <a href=' /tsa/varma_process.py#L499'>hstack</a>(a,name)</tt>	Stack lagpolynomial horizontally in 2d array.
<tt style='background-color:#E8E8E8;'> tsa.VarmaPoly <a href=' /tsa/varma_process.py#L514'>stacksquare</a>(a,name,orientation)</tt>	Stack lagpolynomial vertically in 2d square array with eye.
<tt style='background-color:#E8E8E8;'> tsa.VarmaPoly <a href=' /tsa/varma_process.py#L533'>vstackarma_minus1</a>()</tt>	Stack ar and lagpolynomial vertically in 2d array.
<tt style='background-color:#E8E8E8;'> tsa.VarmaPoly <a href=' /tsa/varma_process.py#L541'>hstackarma_minus1</a>()</tt>	Stack ar and lagpolynomial vertically in 2d array.
<tt style='background-color:#E8E8E8;'> tsa.VarmaPoly <a href=' /tsa/varma_process.py#L549'>getisstationary</a>(a)</tt>	Check whether the auto-regressive lag-polynomial is stationary.
<tt style='background-color:#E8E8E8;'> tsa.VarmaPoly <a href=' /tsa/varma_process.py#L578'>getisinvertible</a>(a)</tt>	Check whether the auto-regressive lag-polynomial is stationary.
<tt style='background-color:#E8E8E8;'> tsa.VarmaPoly <a href=' /tsa/varma_process.py#L613'>reduceform</a>(apoly)</tt>	This assumes no exog todo.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/x13.py#L45'>_find_x12</a>(x12path,prefer_x13)</tt>	If x12path is not given then either x13as[ exe] or x12a[ exe] must.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/x13.py#L90'>_clean_order</a>(order)</tt>	Takes something like 1 1 0 0 1 1 and returns a arma order sarma order tuple.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/x13.py#L185'>_convert_out_to_series</a>(x,dates,name)</tt>	Convert x to a dataframe where x is a string in the format given by x-13arima-seats output.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/x13.py#L314'>x13_arima_analysis</a>(endog,maxorder,maxdiff,diff)</tt>	Perform x13-arima analysis for monthly or quarterly data.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/x13.py#L483'>x13_arima_select_order</a>(endog,maxorder,maxdiff,diff)</tt>	Perform automatic seaonal arima order identification using x12/x13 arima.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/_bds.py#L25'>distance_indicators</a>(x,epsilon,distance)</tt>	Calculate all pairwise threshold distance indicators for a time series parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/_bds.py#L69'>correlation_sum</a>(indicators,embedding_dim)</tt>	Calculate a correlation sum.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/_bds.py#L106'>correlation_sums</a>(indicators,max_dim)</tt>	Calculate all correlation sums for embedding dimensions 1 max_dim.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/_bds.py#L133'>_var</a>(indicators,max_dim)</tt>	Calculate the variance of a bds effect.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/_bds.py#L170'>bds</a>(x,max_dim,epsilon,distance)</tt>	Calculate the bds test statistic for independence of a time series parameters.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/adfvalues.py#L171'>mackinnonp</a>(teststat,regression,N,lags)</tt>	Returns mackinnon's approximate p-value for teststat.
<tt style='background-color:#E8E8E8;'> tsa. <a href=' /tsa/adfvalues.py#L343'>mackinnoncrit</a>(N,regression,nobs)</tt>	Returns the critical values for cointegrating and the adf test.
<tt style='background-color:#E8E8E8;'> tsa.filters. <a href=' /tsa/filters/cf_filter.py#L15'>cffilter</a>(X,low,high,drift)</tt>	Christiano fitzgerald asymmetric random walk filter parameters.
<tt style='background-color:#E8E8E8;'> tsa.filters. <a href=' /tsa/filters/filtertools.py#L54'>fftconvolveinv</a>(in1,in2,mode)</tt>	Convolve two n-dimensional arrays using fft see convolve.
<tt style='background-color:#E8E8E8;'> tsa.filters. <a href=' /tsa/filters/filtertools.py#L97'>fftconvolve3</a>(in1,in2,in3,mode)</tt>	Convolve two n-dimensional arrays using fft see convolve.
<tt style='background-color:#E8E8E8;'> tsa.filters. <a href=' /tsa/filters/filtertools.py#L160'>recursive_filter</a>(x,ar_coeff,init)</tt>	Autoregressive or recursive filtering.
<tt style='background-color:#E8E8E8;'> tsa.filters. <a href=' /tsa/filters/filtertools.py#L219'>convolution_filter</a>(x,filt,nsides)</tt>	Linear filtering via convolution centered and backward displaced moving.
<tt style='background-color:#E8E8E8;'> tsa.filters. <a href=' /tsa/filters/filtertools.py#L310'>miso_lfilter</a>(ar,ma,x,useic)</tt>	Use nd convolution to merge inputs then use lfilter to produce output.
<tt style='background-color:#E8E8E8;'> tsa.filters. <a href=' /tsa/filters/_utils.py#L28'>_maybe_get_pandas_wrapper</a>(X,trim_head,trim_tail)</tt>	If using pandas returns a function to wrap the results e g wrapper x.
<tt style='background-color:#E8E8E8;'> tsa.filters. <a href=' /tsa/filters/_utils.py#L90'>pandas_wrapper_freq</a>(func,trim_head,trim_tail,freq_kw)</tt>	Return a new function that catches the incoming x checks if it's pandas calls the functions as is.
<tt style='background-color:#E8E8E8;'> tsa.filters. <a href=' /tsa/filters/hp_filter.py#L9'>hpfilter</a>(X,lamb)</tt>	Hodrick-prescott filter parameters.
<tt style='background-color:#E8E8E8;'> tsa.filters. <a href=' /tsa/filters/bk_filter.py#L7'>bkfilter</a>(X,low,high,K)</tt>	Baxter-king bandpass filter parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/plotting.py#L27'>plot_mts</a>(Y,names,index)</tt>	Plot multiple time series.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/plotting.py#L80'>plot_with_error</a>(y,error,x,axes)</tt>	Make plot with optional error bars.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/plotting.py#L175'>irf_grid_plot</a>(values,stderr,impcol,rescol)</tt>	Reusable function to make flexible grid plots of impulse responses and.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/util.py#L14'>get_var_endog</a>(y,lags,trend,has_constant)</tt>	Make predictor matrix for var p process z := (z_0.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/util.py#L48'>make_lag_names</a>(names,lag_order,trendorder)</tt>	Produce list of lag-variable names constant / trends go at the beginning.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/util.py#L79'>comp_matrix</a>(coefs)</tt>	Return compansion matrix for the var 1 representation for a var p process companion form.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/util.py#L106'>parse_lutkepohl_data</a>(path)</tt>	Parse data files from lutkepohl 2005 book source for data files www.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/util.py#L186'>varsim</a>(coefs,intercept,sig_u,steps)</tt>	Simulate simple var p process with known coefficients intercept white noise covariance etc.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/util.py#L228'>vech</a>(A)</tt>	Simple vech operator.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.DynamicVAR <a href=' /tsa/vector_ar/dynamic.py#L98'>T</a>()</tt>	Number of time periods in results.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.DynamicVAR <a href=' /tsa/vector_ar/dynamic.py#L124'>coefs</a>()</tt>	Return dynamic regression coefficients as panel.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.DynamicVAR <a href=' /tsa/vector_ar/dynamic.py#L142'>_coefs_raw</a>()</tt>	Reshape coefficients to be more amenable to dynamic calculations.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.DynamicVAR <a href=' /tsa/vector_ar/dynamic.py#L161'>_intercepts_raw</a>()</tt>	Similar to _coefs_raw return intercept values in easy-to-use matrix.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.DynamicVAR <a href=' /tsa/vector_ar/dynamic.py#L181'>forecast</a>(steps)</tt>	Produce dynamic forecast parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.DynamicVAR <a href=' /tsa/vector_ar/dynamic.py#L218'>plot_forecast</a>(steps,figsize)</tt>	Plot h-step ahead forecasts against actual realizations of time series.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.DynamicVAR <a href=' /tsa/vector_ar/dynamic.py#L262'>r2</a>()</tt>	Returns the r-squared values.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/dynamic.py#L296'>_filter_data</a>(lhs,rhs)</tt>	Data filtering routine for dynamic var.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.SVAR <a href=' /tsa/vector_ar/svar_model.py#L108'>fit</a>(A_guess,B_guess,maxlags,method)</tt>	Fit the svar model and solve for structural parameters parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.SVAR <a href=' /tsa/vector_ar/svar_model.py#L187'>_get_init_params</a>(A_guess,B_guess)</tt>	Returns either the given starting or 1 if none are given.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.SVAR <a href=' /tsa/vector_ar/svar_model.py#L218'>_estimate_svar</a>(start_params,lags,maxiter,maxfun)</tt>	Lags : int.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.SVAR <a href=' /tsa/vector_ar/svar_model.py#L263'>loglike</a>(params)</tt>	Loglikelihood for svar model.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.SVAR <a href=' /tsa/vector_ar/svar_model.py#L303'>score</a>(AB_mask)</tt>	Return the gradient of the loglike at ab_mask.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.SVAR <a href=' /tsa/vector_ar/svar_model.py#L319'>hessian</a>(AB_mask)</tt>	Returns numerical hessian.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.SVAR <a href=' /tsa/vector_ar/svar_model.py#L326'>_solve_AB</a>(start_params,maxiter,maxfun,override)</tt>	Solves for mle estimate of structural parameters parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.SVARProcess <a href=' /tsa/vector_ar/svar_model.py#L480'>orth_ma_rep</a>(maxn,P)</tt>	Unavailable for svar.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.SVARProcess <a href=' /tsa/vector_ar/svar_model.py#L489'>svar_ma_rep</a>(maxn,P)</tt>	Compute structural ma coefficient matrices using mle.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.SVARResults <a href=' /tsa/vector_ar/svar_model.py#L613'>irf</a>(periods,var_order)</tt>	Analyze structural impulse responses to shocks in system.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.SVARResults <a href=' /tsa/vector_ar/svar_model.py#L631'>sirf_errband_mc</a>(orth,repl,T,signif)</tt>	Compute monte carlo integrated error bands assuming normally distributed for impulse response functions.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.BaseIRAnalysis <a href=' /tsa/vector_ar/irf.py#L81'>plot</a>(orth,impulse,response,signif)</tt>	Plot impulse responses parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.BaseIRAnalysis <a href=' /tsa/vector_ar/irf.py#L164'>plot_cum_effects</a>(orth,impulse,response,signif)</tt>	Plot cumulative impulse response functions parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.IRAnalysis <a href=' /tsa/vector_ar/irf.py#L246'>cov</a>(orth)</tt>	Compute asymptotic standard errors for impulse response coefficients notes.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.IRAnalysis <a href=' /tsa/vector_ar/irf.py#L268'>errband_mc</a>(orth,svar,repl,signif)</tt>	Irf monte carlo integrated error bands.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.IRAnalysis <a href=' /tsa/vector_ar/irf.py#L283'>err_band_sz1</a>(orth,svar,repl,signif)</tt>	Irf sims-zha error band method 1 assumes symmetric error bands around.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.IRAnalysis <a href=' /tsa/vector_ar/irf.py#L346'>err_band_sz2</a>(orth,repl,signif,seed)</tt>	Irf sims-zha error band method 2.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.IRAnalysis <a href=' /tsa/vector_ar/irf.py#L415'>err_band_sz3</a>(orth,repl,signif,seed)</tt>	Irf sims-zha error band method 3 does not assume symmetric error bands around mean.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.IRAnalysis <a href=' /tsa/vector_ar/irf.py#L581'>cum_effect_cov</a>(orth)</tt>	Compute asymptotic standard errors for cumulative impulse response coefficients.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.IRAnalysis <a href=' /tsa/vector_ar/irf.py#L627'>cum_errband_mc</a>(orth,repl,signif,seed)</tt>	Irf monte carlo integrated error bands of cumulative effect.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/var_model.py#L41'>ma_rep</a>(coefs,maxn)</tt>	Ma(\infty) representation of var p process parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/var_model.py#L81'>is_stable</a>(coefs,verbose)</tt>	Determine stability of var p system by examining the eigenvalues of the.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/var_model.py#L104'>var_acf</a>(coefs,sig_u,nlags)</tt>	Compute autocovariance function acf_y h up to nlags of stable var p process.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/var_model.py#L144'>_var_acf</a>(coefs,sig_u)</tt>	Compute autocovariance function acf_y h for h=1 ,p.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/var_model.py#L168'>forecast</a>(y,coefs,intercept,steps)</tt>	Produce linear mse forecast parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/var_model.py#L216'>forecast_cov</a>(ma_coefs,sig_u,steps)</tt>	Compute theoretical forecast error variance matrices.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/var_model.py#L239'>var_loglike</a>(resid,omega,nobs)</tt>	Returns the value of the var p log-likelihood.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VAR <a href=' /tsa/vector_ar/var_model.py#L338'>predict</a>(params,start,end,lags)</tt>	Returns in-sample predictions or forecasts.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VAR <a href=' /tsa/vector_ar/var_model.py#L381'>fit</a>(maxlags,method,ic,trend)</tt>	Fit the var model parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VAR <a href=' /tsa/vector_ar/var_model.py#L439'>_estimate_var</a>(lags,offset,trend)</tt>	Lags : int.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VAR <a href=' /tsa/vector_ar/var_model.py#L482'>select_order</a>(maxlags,verbose)</tt>	Compute lag order selections based on each of the available information criteria.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARProcess <a href=' /tsa/vector_ar/var_model.py#L541'>get_eq_index</a>(name)</tt>	Return integer position of requested equation name.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARProcess <a href=' /tsa/vector_ar/var_model.py#L553'>is_stable</a>(verbose)</tt>	Determine stability based on model coefficients.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARProcess <a href=' /tsa/vector_ar/var_model.py#L568'>plotsim</a>(steps)</tt>	Plot a simulation from the var p process for the desired number of.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARProcess <a href=' /tsa/vector_ar/var_model.py#L576'>mean</a>()</tt>	Mean of stable process lutkepohl eq.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARProcess <a href=' /tsa/vector_ar/var_model.py#L585'>ma_rep</a>(maxn)</tt>	Compute ma(:math \infty) coefficient matrices.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARProcess <a href=' /tsa/vector_ar/var_model.py#L599'>orth_ma_rep</a>(maxn,P)</tt>	Compute orthogonalized ma coefficient matrices using p matrix such that :math \sigma_u = pp^\prime.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARProcess <a href=' /tsa/vector_ar/var_model.py#L621'>long_run_effects</a>()</tt>	Compute long-run effect of unit impulse.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARProcess <a href=' /tsa/vector_ar/var_model.py#L639'>acf</a>(nlags)</tt>	Compute theoretical autocovariance function.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARProcess <a href=' /tsa/vector_ar/var_model.py#L648'>acorr</a>(nlags)</tt>	Compute theoretical autocorrelation function.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARProcess <a href=' /tsa/vector_ar/var_model.py#L657'>plot_acorr</a>(nlags,linewidth)</tt>	Plot theoretical autocorrelation function.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARProcess <a href=' /tsa/vector_ar/var_model.py#L661'>forecast</a>(y,steps)</tt>	Produce linear minimum mse forecasts for desired number of steps.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARProcess <a href=' /tsa/vector_ar/var_model.py#L680'>mse</a>(steps)</tt>	Compute theoretical forecast error variance matrices parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARProcess <a href=' /tsa/vector_ar/var_model.py#L720'>forecast_interval</a>(y,steps,alpha)</tt>	Construct forecast interval estimates assuming the y are gaussian parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L852'>plot</a>()</tt>	Plot input time series.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L857'>df_model</a>()</tt>	Number of estimated parameters including the intercept / trends.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L863'>df_resid</a>()</tt>	Number of observations minus number of estimated parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L868'>fittedvalues</a>()</tt>	The predicted insample values of the response variables of the model.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L874'>resid</a>()</tt>	Residuals of response variable resulting from estimated coefficients.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L887'>plot_sample_acorr</a>(nlags,linewidth)</tt>	Plot theoretical autocorrelation function.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L892'>resid_acov</a>(nlags)</tt>	Compute centered sample autocovariance including lag 0.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L905'>resid_acorr</a>(nlags)</tt>	Compute sample autocorrelation including lag 0.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L919'>resid_corr</a>()</tt>	Centered residual correlation matrix.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L924'>sigma_u_mle</a>()</tt>	Biased maximum likelihood estimate of noise process covariance.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L930'>cov_params</a>()</tt>	Estimated variance-covariance of model coefficients notes.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L944'>cov_ybar</a>()</tt>	Asymptotically consistent estimate of covariance of the sample mean.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L970'>_cov_alpha</a>()</tt>	Estimated covariance matrix of model coefficients ex intercept.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L978'>_cov_sigma</a>()</tt>	Estimated covariance matrix of vech(sigma_u).
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L989'>llf</a>()</tt>	Compute var p loglikelihood.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L994'>stderr</a>()</tt>	Standard errors of coefficients reshaped to match in size.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1003'>tvalues</a>()</tt>	Compute t-statistics use student-t t - kp - 1 = t(df_resid) to test.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1010'>pvalues</a>()</tt>	Two-sided p-values for model coefficients from student t-distribution.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1027'>forecast_cov</a>(steps)</tt>	Compute forecast covariance matrices for desired number of steps parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1049'>irf_errband_mc</a>(orth,repl,T,signif)</tt>	Compute monte carlo integrated error bands assuming normally distributed for impulse response functions.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1118'>irf_resim</a>(orth,repl,T,seed)</tt>	Simulates impulse response function returning an array of simulations.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1232'>summary</a>()</tt>	Compute console output summary of estimates.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1241'>irf</a>(periods,var_decomp,var_order)</tt>	Analyze impulse responses to shocks in system parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1263'>fevd</a>(periods,var_decomp)</tt>	Compute forecast error variance decomposition ("fevd").
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1273'>reorder</a>(order)</tt>	Reorder variables for structural specification.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1289'>test_causality</a>(equation,variables,kind,signif)</tt>	Compute test statistic for null hypothesis of granger-noncausality general function to test joint granger-causality of multiple variables.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1374'>test_whiteness</a>(nlags,plot,linewidth)</tt>	Test white noise assumption sample y autocorrelations are compared.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1403'>test_normality</a>(signif,verbose)</tt>	Test assumption of normal-distributed errors using jarque-bera-style.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1450'>detomega</a>()</tt>	Return determinant of white noise covariance with degrees of freedom correction.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1462'>info_criteria</a>()</tt>	Information criteria for lagorder selection.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1486'>aic</a>()</tt>	Akaike information criterion.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1491'>fpe</a>()</tt>	Final prediction error fpe lutkepohl p.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARResults <a href=' /tsa/vector_ar/var_model.py#L1504'>bic</a>()</tt>	Bayesian a k a schwarz info criterion.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.FEVD <a href=' /tsa/vector_ar/var_model.py#L1577'>cov</a>()</tt>	Compute asymptotic standard errors.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.FEVD <a href=' /tsa/vector_ar/var_model.py#L1585'>plot</a>(periods,figsize)</tt>	Plot graphical display of fevd parameters.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar.VARSummary <a href=' /tsa/vector_ar/output.py#L72'>make</a>(endog_names,exog_names)</tt>	Summary of var model.
<tt style='background-color:#E8E8E8;'> tsa.vector_ar. <a href=' /tsa/vector_ar/output.py#L209'>print_ic_table</a>(ics,selected_orders)</tt>	For var order selection.
<tt style='background-color:#E8E8E8;'> tsa.base.TimeSeriesModel <a href=' /tsa/base/tsa_model.py#L54'>_init_dates</a>(dates,freq)</tt>	Initialize dates parameters.
<tt style='background-color:#E8E8E8;'> tsa.base.TimeSeriesModel <a href=' /tsa/base/tsa_model.py#L250'>_get_index_loc</a>(key,base_index)</tt>	Get the location of a specific key in an index parameters.
<tt style='background-color:#E8E8E8;'> tsa.base.TimeSeriesModel <a href=' /tsa/base/tsa_model.py#L352'>_get_index_label_loc</a>(key,base_index)</tt>	Get the location of a specific key in an index or model row labels parameters.
<tt style='background-color:#E8E8E8;'> tsa.base.TimeSeriesModel <a href=' /tsa/base/tsa_model.py#L398'>_get_prediction_index</a>(start,end,index,silent)</tt>	Get the location of a specific key in an index or model row labels parameters.
<tt style='background-color:#E8E8E8;'> tsa.base. <a href=' /tsa/base/datetools.py#L63'>date_parser</a>(timestr,parserinfo)</tt>	Uses dateutil parser parse but also handles monthly dates of the form.
<tt style='background-color:#E8E8E8;'> tsa.base. <a href=' /tsa/base/datetools.py#L89'>date_range_str</a>(start,end,length)</tt>	Returns a list of abbreviated date strings.
<tt style='background-color:#E8E8E8;'> tsa.base. <a href=' /tsa/base/datetools.py#L145'>dates_from_str</a>(dates)</tt>	Turns a sequence of date strings and returns a list of datetime.
<tt style='background-color:#E8E8E8;'> tsa.base. <a href=' /tsa/base/datetools.py#L163'>dates_from_range</a>(start,end,length)</tt>	Turns a sequence of date strings and returns a list of datetime.
<tt style='background-color:#E8E8E8;'> tsa.statespace.VARMAX <a href=' /tsa/statespace/varmax.py#L468'>transform_params</a>(unconstrained)</tt>	Transform unconstrained parameters used by the optimizer to constrained parameters used in likelihood evaluation.
<tt style='background-color:#E8E8E8;'> tsa.statespace.VARMAX <a href=' /tsa/statespace/varmax.py#L551'>untransform_params</a>(constrained)</tt>	Transform constrained parameters used in likelihood evaluation to unconstrained parameters used by the optimizer.
<tt style='background-color:#E8E8E8;'> tsa.statespace.VARMAXResults <a href=' /tsa/statespace/varmax.py#L735'>get_prediction</a>(start,end,dynamic,index)</tt>	In-sample prediction and out-of-sample forecasting parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.UnobservedComponents <a href=' /tsa/statespace/structural.py#L547'>setup</a>()</tt>	Setup the structural time series representation.
<tt style='background-color:#E8E8E8;'> tsa.statespace.UnobservedComponents <a href=' /tsa/statespace/structural.py#L828'>transform_params</a>(unconstrained)</tt>	Transform unconstrained parameters used by the optimizer to constrained.
<tt style='background-color:#E8E8E8;'> tsa.statespace.UnobservedComponents <a href=' /tsa/statespace/structural.py#L872'>untransform_params</a>(constrained)</tt>	Reverse the transformation.
<tt style='background-color:#E8E8E8;'> tsa.statespace.UnobservedComponentsResults <a href=' /tsa/statespace/structural.py#L1027'>level</a>()</tt>	Estimates of unobserved level component.
<tt style='background-color:#E8E8E8;'> tsa.statespace.UnobservedComponentsResults <a href=' /tsa/statespace/structural.py#L1063'>trend</a>()</tt>	Estimates of of unobserved trend component.
<tt style='background-color:#E8E8E8;'> tsa.statespace.UnobservedComponentsResults <a href=' /tsa/statespace/structural.py#L1100'>seasonal</a>()</tt>	Estimates of unobserved seasonal component.
<tt style='background-color:#E8E8E8;'> tsa.statespace.UnobservedComponentsResults <a href=' /tsa/statespace/structural.py#L1139'>cycle</a>()</tt>	Estimates of unobserved cycle component.
<tt style='background-color:#E8E8E8;'> tsa.statespace.UnobservedComponentsResults <a href=' /tsa/statespace/structural.py#L1180'>autoregressive</a>()</tt>	Estimates of unobserved autoregressive component.
<tt style='background-color:#E8E8E8;'> tsa.statespace.UnobservedComponentsResults <a href=' /tsa/statespace/structural.py#L1220'>regression_coefficients</a>()</tt>	Estimates of unobserved regression coefficients.
<tt style='background-color:#E8E8E8;'> tsa.statespace.UnobservedComponentsResults <a href=' /tsa/statespace/structural.py#L1274'>plot_components</a>(which,alpha,observed,level)</tt>	Plot the estimated components of the model.
<tt style='background-color:#E8E8E8;'> tsa.statespace.UnobservedComponentsResults <a href=' /tsa/statespace/structural.py#L1446'>get_prediction</a>(start,end,dynamic,index)</tt>	In-sample prediction and out-of-sample forecasting parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.DynamicFactor <a href=' /tsa/statespace/dynamic_factor.py#L632'>transform_params</a>(unconstrained)</tt>	Transform unconstrained parameters used by the optimizer to constrained parameters used in likelihood evaluation.
<tt style='background-color:#E8E8E8;'> tsa.statespace.DynamicFactor <a href=' /tsa/statespace/dynamic_factor.py#L731'>untransform_params</a>(constrained)</tt>	Transform constrained parameters used in likelihood evaluation to unconstrained parameters used by the optimizer.
<tt style='background-color:#E8E8E8;'> tsa.statespace.DynamicFactor <a href=' /tsa/statespace/dynamic_factor.py#L823'>update</a>(params,transformed,complex_step)</tt>	Update the parameters of the model updates the representation matrices to fill in the new parameter.
<tt style='background-color:#E8E8E8;'> tsa.statespace.DynamicFactorResults <a href=' /tsa/statespace/dynamic_factor.py#L985'>factors</a>()</tt>	Estimates of unobserved factors.
<tt style='background-color:#E8E8E8;'> tsa.statespace.DynamicFactorResults <a href=' /tsa/statespace/dynamic_factor.py#L1024'>coefficients_of_determination</a>()</tt>	Coefficients of determination (:math r^2) from regressions of individual estimated factors on endogenous variables.
<tt style='background-color:#E8E8E8;'> tsa.statespace.DynamicFactorResults <a href=' /tsa/statespace/dynamic_factor.py#L1067'>plot_coefficients_of_determination</a>(endog_labels,fig,figsize)</tt>	Plot the coefficients of determination parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.DynamicFactorResults <a href=' /tsa/statespace/dynamic_factor.py#L1132'>get_prediction</a>(start,end,dynamic,index)</tt>	In-sample prediction and out-of-sample forecasting parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.KalmanSmoother <a href=' /tsa/statespace/kalman_smoother.py#L175'>set_smoother_output</a>(smoother_output)</tt>	Set the smoother output the smoother can produce several types of results.
<tt style='background-color:#E8E8E8;'> tsa.statespace.KalmanSmoother <a href=' /tsa/statespace/kalman_smoother.py#L249'>set_smooth_method</a>(smooth_method)</tt>	Set the smoothing method the smoothing method can be used to override the kalman smoother.
<tt style='background-color:#E8E8E8;'> tsa.statespace.KalmanSmoother <a href=' /tsa/statespace/kalman_smoother.py#L372'>smooth</a>(smoother_output,smooth_method,results,run_filter)</tt>	Apply the kalman smoother to the statespace model.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SmootherResults <a href=' /tsa/statespace/kalman_smoother.py#L565'>update_representation</a>(model,only_options)</tt>	Update the results to match a given model parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SmootherResults <a href=' /tsa/statespace/kalman_smoother.py#L593'>update_smoother</a>(smoother)</tt>	Update the smoother results parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L225'>companion_matrix</a>(polynomial)</tt>	Create a companion matrix parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L346'>diff</a>(series,k_diff,k_seasonal_diff,seasonal_periods)</tt>	Difference a series simply and/or seasonally along the zero-th axis.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L402'>concat</a>(series,axis,allow_mix)</tt>	Concatenate a set of series.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L436'>is_invertible</a>(polynomial,threshold)</tt>	Determine if a polynomial is invertible.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L507'>solve_discrete_lyapunov</a>(a,q,complex_step)</tt>	Solves the discrete lyapunov equation using a bilinear transformation.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L534'>constrain_stationary_univariate</a>(unconstrained)</tt>	Transform unconstrained parameters used by the optimizer to constrained parameters used in likelihood evaluation.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L571'>unconstrain_stationary_univariate</a>(constrained)</tt>	Transform constrained parameters used in likelihood evaluation to unconstrained parameters used by the optimizer.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L608'>_constrain_sv_less_than_one_python</a>(unconstrained,order,k_endog)</tt>	Transform arbitrary matrices to matrices with singular values less than one.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L657'>_compute_coefficients_from_multivariate_pacf_python</a>(partial_autocorrelations,error_variance,transform_variance,order)</tt>	Transform matrices with singular values less than one to matrices corresponding to a stationary or invertible process.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L830'>constrain_stationary_multivariate_python</a>(unconstrained,error_variance,transform_variance,prefix)</tt>	Transform unconstrained parameters used by the optimizer to constrained parameters used in likelihood evaluation for a vector autoregression.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L990'>_unconstrain_sv_less_than_one</a>(constrained,order,k_endog)</tt>	Transform matrices with singular values less than one to arbitrary matrices.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L1036'>_compute_multivariate_sample_acovf</a>(endog,maxlag)</tt>	Computer multivariate sample autocovariances parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L1089'>_compute_multivariate_acovf_from_coefficients</a>(coefficients,error_variance,maxlag,forward_autocovariances)</tt>	Compute multivariate autocovariances from vector autoregression coefficient matrices.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L1198'>_compute_multivariate_sample_pacf</a>(endog,maxlag)</tt>	Computer multivariate sample partial autocorrelations parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L1223'>_compute_multivariate_pacf_from_autocovariances</a>(autocovariances,order,k_endog)</tt>	Compute multivariate partial autocorrelations from autocovariances.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L1382'>_compute_multivariate_pacf_from_coefficients</a>(constrained,error_variance,order,k_endog)</tt>	Transform matrices corresponding to a stationary or invertible process to matrices with singular values less than one.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L1443'>unconstrain_stationary_multivariate</a>(constrained,error_variance)</tt>	Transform constrained parameters used in likelihood evaluation to unconstrained parameters used by the optimizer.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L1512'>validate_matrix_shape</a>(name,shape,nrows,ncols)</tt>	Validate the shape of a possibly time-varying matrix or raise an exception parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L1565'>validate_vector_shape</a>(name,shape,nrows,nobs)</tt>	Validate the shape of a possibly time-varying vector or raise an exception parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L1612'>reorder_missing_matrix</a>(matrix,missing,reorder_rows,reorder_cols)</tt>	Reorder the rows or columns of a time-varying matrix where all non-missing values are in the upper left corner of the matrix.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L1660'>reorder_missing_vector</a>(vector,missing,inplace,prefix)</tt>	Reorder the elements of a time-varying vector where all non-missing values are in the first elements of the vector.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L1695'>copy_missing_matrix</a>(A,B,missing,missing_rows)</tt>	Copy the rows or columns of a time-varying matrix where all non-missing values are in the upper left corner of the matrix.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L1753'>copy_missing_vector</a>(a,b,missing,inplace)</tt>	Reorder the elements of a time-varying vector where all non-missing values are in the first elements of the vector.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L1798'>copy_index_matrix</a>(A,B,index,index_rows)</tt>	Copy the rows or columns of a time-varying matrix where all non-index values are in the upper left corner of the matrix.
<tt style='background-color:#E8E8E8;'> tsa.statespace. <a href=' /tsa/statespace/tools.py#L1856'>copy_index_vector</a>(a,b,index,inplace)</tt>	Reorder the elements of a time-varying vector where all non-index values are in the first elements of the vector.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L100'>prepare_data</a>()</tt>	Prepare data for use in the state space representation.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L115'>initialize_statespace</a>()</tt>	Initialize the state space representation parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L144'>set_filter_method</a>(filter_method)</tt>	Set the filtering method the filtering method controls aspects of which kalman filtering.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L166'>set_inversion_method</a>(inversion_method)</tt>	Set the inversion method the kalman filter may contain one matrix inversion that of the.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L190'>set_stability_method</a>(stability_method)</tt>	Set the numerical stability method the kalman filter is a recursive algorithm that may in some cases.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L214'>set_conserve_memory</a>(conserve_memory)</tt>	Set the memory conservation method by default the kalman filter computes a number of intermediate.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L238'>set_smoother_output</a>(smoother_output)</tt>	Set the smoother output the smoother can produce several types of results.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L297'>fit</a>(start_params,transformed,cov_type,cov_kwds)</tt>	Fits the model by maximum likelihood via kalman filter.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L457'>filter</a>(params,transformed,complex_step,cov_type)</tt>	Kalman filtering parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L517'>smooth</a>(params,transformed,complex_step,cov_type)</tt>	Kalman smoothing parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L604'>loglike</a>(params)</tt>	Loglikelihood evaluation parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L654'>loglikeobs</a>(params,transformed,complex_step)</tt>	Loglikelihood evaluation parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L697'>simulation_smoother</a>(simulation_output)</tt>	Retrieve a simulation smoother for the state space model.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L812'>observed_information_matrix</a>(params,transformed,approx_complex_step,approx_centered)</tt>	Observed information matrix parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L901'>opg_information_matrix</a>(params,transformed,approx_complex_step)</tt>	Outer product of gradients information matrix parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1025'>score</a>(params)</tt>	Compute the score function at params.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1089'>score_obs</a>(params,method,transformed,approx_complex_step)</tt>	Compute the score per observation evaluated at params parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1148'>hessian</a>(params)</tt>	Hessian matrix of the likelihood function evaluated at the given parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1217'>_hessian_oim</a>(params)</tt>	Hessian matrix computed using the harvey 1989 information matrix.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1223'>_hessian_opg</a>(params)</tt>	Hessian matrix computed using the outer product of gradients.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1248'>_hessian_complex_step</a>(params)</tt>	Hessian matrix computed by second-order complex-step differentiation on the loglike function.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1262'>start_params</a>()</tt>	Array starting parameters for maximum likelihood estimation.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1272'>param_names</a>()</tt>	List of str list of human readable parameter names for parameters actually included in the model.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1287'>transform_jacobian</a>(unconstrained,approx_centered)</tt>	Jacobian matrix for the parameter transformation function parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1315'>transform_params</a>(unconstrained)</tt>	Transform unconstrained parameters used by the optimizer to constrained parameters used in likelihood evaluation.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1339'>untransform_params</a>(constrained)</tt>	Transform constrained parameters used in likelihood evaluation to unconstrained parameters used by the optimizer.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1362'>update</a>(params,transformed,complex_step)</tt>	Update the parameters of the model parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1391'>simulate</a>(params,nsimulations,measurement_shocks,state_shocks)</tt>	Simulate a new time series following the state space model parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1442'>impulse_responses</a>(params,steps,impulse,orthogonalized)</tt>	Impulse response function parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEModel <a href=' /tsa/statespace/mlemodel.py#L1497'>from_formula</a>(cls,formula,data,subset)</tt>	Not implemented for state space models.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L1611'>_get_robustcov_results</a>(cov_type)</tt>	Create new results instance with specified covariance estimator as default.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L1727'>aic</a>()</tt>	Float akaike information criterion.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L1735'>bic</a>()</tt>	Float bayes information criterion.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L1765'>cov_params_approx</a>()</tt>	Array the variance / covariance matrix computed using the numerical.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L1790'>cov_params_oim</a>()</tt>	Array the variance / covariance matrix computed using the method.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L1815'>cov_params_opg</a>()</tt>	Array the variance / covariance matrix computed using the outer.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L1824'>cov_params_robust</a>()</tt>	Array the qmle variance / covariance matrix alias for.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L1853'>cov_params_robust_oim</a>()</tt>	Array the qmle variance / covariance matrix computed using the.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L1886'>cov_params_robust_approx</a>()</tt>	Array the qmle variance / covariance matrix computed using the.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L1895'>info_criteria</a>(criteria,method)</tt>	Information criteria parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L1976'>fittedvalues</a>()</tt>	Array the predicted values of the model an (nobs x k_endog) array.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L1991'>hqic</a>()</tt>	Float hannan-quinn information criterion.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2000'>llf_obs</a>()</tt>	Float the value of the log-likelihood function evaluated at params.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2007'>llf</a>()</tt>	Float the value of the log-likelihood function evaluated at params.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2014'>loglikelihood_burn</a>()</tt>	Float the number of observations during which the likelihood is not evaluated.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2022'>pvalues</a>()</tt>	Array the p-values associated with the z-statistics of the coefficients.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2031'>resid</a>()</tt>	Array the model residuals an (nobs x k_endog) array.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2046'>zvalues</a>()</tt>	Array the z-statistics for the coefficients.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2053'>test_normality</a>(method)</tt>	Test for normality of standardized residuals.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2098'>test_heteroskedasticity</a>(method,alternative,use_f)</tt>	Test for heteroskedasticity of standardized residuals tests whether the sum-of-squares in the first third of the sample is.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2254'>test_serial_correlation</a>(method,lags)</tt>	Ljung-box test for no serial correlation of standardized residuals null hypothesis is no serial correlation.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2326'>get_prediction</a>(start,end,dynamic,index)</tt>	In-sample prediction and out-of-sample forecasting parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2383'>get_forecast</a>(steps)</tt>	Out-of-sample forecasts parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2409'>predict</a>(start,end,dynamic)</tt>	In-sample prediction and out-of-sample forecasting parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2448'>forecast</a>(steps)</tt>	Out-of-sample forecasts parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2474'>simulate</a>(nsimulations,measurement_shocks,state_shocks,initial_state)</tt>	Simulate a new time series following the state space model parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2516'>impulse_responses</a>(steps,impulse,orthogonalized,cumulative)</tt>	Impulse response function parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2563'>plot_diagnostics</a>(variable,lags,fig,figsize)</tt>	Diagnostic plots for standardized residuals of one endogenous variable parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.MLEResults <a href=' /tsa/statespace/mlemodel.py#L2648'>summary</a>(alpha,start,title,model_name)</tt>	Summarize the model parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.KalmanFilter <a href=' /tsa/statespace/kalman_filter.py#L389'>set_filter_method</a>(filter_method)</tt>	Set the filtering method the filtering method controls aspects of which kalman filtering.
<tt style='background-color:#E8E8E8;'> tsa.statespace.KalmanFilter <a href=' /tsa/statespace/kalman_filter.py#L470'>set_inversion_method</a>(inversion_method)</tt>	Set the inversion method the kalman filter may contain one matrix inversion that of the.
<tt style='background-color:#E8E8E8;'> tsa.statespace.KalmanFilter <a href=' /tsa/statespace/kalman_filter.py#L556'>set_stability_method</a>(stability_method)</tt>	Set the numerical stability method the kalman filter is a recursive algorithm that may in some cases.
<tt style='background-color:#E8E8E8;'> tsa.statespace.KalmanFilter <a href=' /tsa/statespace/kalman_filter.py#L614'>set_conserve_memory</a>(conserve_memory)</tt>	Set the memory conservation method by default the kalman filter computes a number of intermediate.
<tt style='background-color:#E8E8E8;'> tsa.statespace.KalmanFilter <a href=' /tsa/statespace/kalman_filter.py#L701'>set_filter_timing</a>(alternate_timing)</tt>	Set the filter timing convention by default the kalman filter follows durbin and koopman 2012 in.
<tt style='background-color:#E8E8E8;'> tsa.statespace.KalmanFilter <a href=' /tsa/statespace/kalman_filter.py#L756'>filter</a>(filter_method,inversion_method,stability_method,conserve_memory)</tt>	Apply the kalman filter to the statespace model.
<tt style='background-color:#E8E8E8;'> tsa.statespace.KalmanFilter <a href=' /tsa/statespace/kalman_filter.py#L806'>loglike</a>()</tt>	Calculate the loglikelihood associated with the statespace model.
<tt style='background-color:#E8E8E8;'> tsa.statespace.KalmanFilter <a href=' /tsa/statespace/kalman_filter.py#L830'>loglikeobs</a>()</tt>	Calculate the loglikelihood for each observation associated with the statespace model.
<tt style='background-color:#E8E8E8;'> tsa.statespace.KalmanFilter <a href=' /tsa/statespace/kalman_filter.py#L865'>simulate</a>(nsimulations,measurement_shocks,state_shocks,initial_state)</tt>	Simulate a new time series following the state space model parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.KalmanFilter <a href=' /tsa/statespace/kalman_filter.py#L1035'>impulse_responses</a>(steps,impulse,orthogonalized,cumulative)</tt>	Impulse response function parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.FilterResults <a href=' /tsa/statespace/kalman_filter.py#L1322'>update_representation</a>(model,only_options)</tt>	Update the results to match a given model parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.FilterResults <a href=' /tsa/statespace/kalman_filter.py#L1345'>update_filter</a>(kalman_filter)</tt>	Update the filter results parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.FilterResults <a href=' /tsa/statespace/kalman_filter.py#L1548'>kalman_gain</a>()</tt>	Kalman gain matrices.
<tt style='background-color:#E8E8E8;'> tsa.statespace.FilterResults <a href=' /tsa/statespace/kalman_filter.py#L1591'>standardized_forecasts_error</a>()</tt>	Standardized forecast errors notes.
<tt style='background-color:#E8E8E8;'> tsa.statespace.FilterResults <a href=' /tsa/statespace/kalman_filter.py#L1643'>predict</a>(start,end,dynamic)</tt>	In-sample and out-of-sample prediction for state space models generally parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.PredictionResults <a href=' /tsa/statespace/kalman_filter.py#L2000'>__getattr__</a>(attr)</tt>	Provide access to the representation and filtered output in the appropriate range (start - end).
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L597'>initialize</a>()</tt>	Initialize the sarimax model.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L677'>initialize_state</a>(variance,complex_step)</tt>	Initialize state and state covariance arrays in preparation for the kalman filter.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L758'>initial_design</a>()</tt>	Initial design matrix.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L787'>initial_state_intercept</a>()</tt>	Initial state intercept vector.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L798'>initial_transition</a>()</tt>	Initial transition matrix.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L862'>initial_selection</a>()</tt>	Initial selection matrix.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L960'>start_params</a>()</tt>	Starting parameters for maximum likelihood estimation.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L1091'>endog_names</a>(latex)</tt>	Names of endogenous variables.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L1127'>param_terms</a>()</tt>	List of parameters actually included in the model in sorted order.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L1147'>param_names</a>()</tt>	List of human readable parameter names for parameters actually included in the model.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L1159'>model_orders</a>()</tt>	The orders of each of the polynomials in the model.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L1179'>model_names</a>()</tt>	The plain text names of all possible model parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L1186'>model_latex_names</a>()</tt>	The latex names of all possible model parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L1297'>transform_params</a>(unconstrained)</tt>	Transform unconstrained parameters used by the optimizer to constrained parameters used in likelihood evaluation.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L1401'>untransform_params</a>(constrained)</tt>	Transform constrained parameters used in likelihood evaluation to unconstrained parameters used by the optimizer.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAX <a href=' /tsa/statespace/sarimax.py#L1505'>update</a>(params,transformed,complex_step)</tt>	Update the parameters of the model updates the representation matrices to fill in the new parameter.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAXResults <a href=' /tsa/statespace/sarimax.py#L1812'>arroots</a>()</tt>	Array roots of the reduced form autoregressive lag polynomial.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAXResults <a href=' /tsa/statespace/sarimax.py#L1819'>maroots</a>()</tt>	Array roots of the reduced form moving average lag polynomial.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAXResults <a href=' /tsa/statespace/sarimax.py#L1826'>arfreq</a>()</tt>	Array frequency of the roots of the reduced form autoregressive.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAXResults <a href=' /tsa/statespace/sarimax.py#L1837'>mafreq</a>()</tt>	Array frequency of the roots of the reduced form moving average.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAXResults <a href=' /tsa/statespace/sarimax.py#L1848'>arparams</a>()</tt>	Array autoregressive parameters actually estimated in the model.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAXResults <a href=' /tsa/statespace/sarimax.py#L1856'>maparams</a>()</tt>	Array moving average parameters actually estimated in the model.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SARIMAXResults <a href=' /tsa/statespace/sarimax.py#L1864'>get_prediction</a>(start,end,dynamic,index)</tt>	In-sample prediction and out-of-sample forecasting parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SimulationSmoother <a href=' /tsa/statespace/simulation_smoother.py#L74'>get_simulation_output</a>(simulation_output,simulate_state,simulate_disturbance,simulate_all)</tt>	Get simulation output bitmask helper method to get final simulation output bitmask from a set of.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SimulationSmoother <a href=' /tsa/statespace/simulation_smoother.py#L201'>simulation_smoother</a>(simulation_output,results_class,prefix)</tt>	Retrieve a simulation smoother for the statespace model.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SimulationSmoothResults <a href=' /tsa/statespace/simulation_smoother.py#L388'>generated_measurement_disturbance</a>()</tt>	Randomly drawn measurement disturbance variates used to construct generated_obs.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SimulationSmoothResults <a href=' /tsa/statespace/simulation_smoother.py#L412'>generated_state_disturbance</a>()</tt>	Randomly drawn state disturbance variates used to construct generated_state and generated_obs.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SimulationSmoothResults <a href=' /tsa/statespace/simulation_smoother.py#L436'>generated_obs</a>()</tt>	Generated vector of observations by iterating on the observation and transition equations given a random initial state draw and random.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SimulationSmoothResults <a href=' /tsa/statespace/simulation_smoother.py#L456'>generated_state</a>()</tt>	Generated vector of states by iterating on the transition equation given a random initial state draw and random disturbance draws.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SimulationSmoothResults <a href=' /tsa/statespace/simulation_smoother.py#L475'>simulated_state</a>()</tt>	Random draw of the state vector from its conditional distribution.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SimulationSmoothResults <a href=' /tsa/statespace/simulation_smoother.py#L493'>simulated_measurement_disturbance</a>()</tt>	Random draw of the measurement disturbance vector from its conditional distribution.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SimulationSmoothResults <a href=' /tsa/statespace/simulation_smoother.py#L513'>simulated_state_disturbance</a>()</tt>	Random draw of the state disturbance vector from its conditional distribution.
<tt style='background-color:#E8E8E8;'> tsa.statespace.SimulationSmoothResults <a href=' /tsa/statespace/simulation_smoother.py#L533'>simulate</a>(simulation_output,disturbance_variates,initial_state_variates)</tt>	Perform simulation smoothing does not return anything but populates the object's simulated_*.
<tt style='background-color:#E8E8E8;'> tsa.statespace.Representation <a href=' /tsa/statespace/representation.py#L436'>prefix</a>()</tt>	Str blas prefix of currently active representation matrices.
<tt style='background-color:#E8E8E8;'> tsa.statespace.Representation <a href=' /tsa/statespace/representation.py#L450'>dtype</a>()</tt>	Dtype datatype of currently active representation matrices.
<tt style='background-color:#E8E8E8;'> tsa.statespace.Representation <a href=' /tsa/statespace/representation.py#L457'>time_invariant</a>()</tt>	Bool whether or not currently active representation matrices are.
<tt style='background-color:#E8E8E8;'> tsa.statespace.Representation <a href=' /tsa/statespace/representation.py#L480'>obs</a>()</tt>	Array observation vector :math y~(k\_endog \times nobs).
<tt style='background-color:#E8E8E8;'> tsa.statespace.Representation <a href=' /tsa/statespace/representation.py#L487'>bind</a>(endog)</tt>	Bind data to the statespace representation parameters.
<tt style='background-color:#E8E8E8;'> tsa.statespace.Representation <a href=' /tsa/statespace/representation.py#L570'>initialize_known</a>(initial_state,initial_state_cov)</tt>	Initialize the statespace model with known distribution for initial state.
<tt style='background-color:#E8E8E8;'> tsa.statespace.Representation <a href=' /tsa/statespace/representation.py#L603'>initialize_approximate_diffuse</a>(variance)</tt>	Initialize the statespace model with approximate diffuse values.
<tt style='background-color:#E8E8E8;'> tsa.statespace.Representation <a href=' /tsa/statespace/representation.py#L623'>initialize_stationary</a>()</tt>	Initialize the statespace model as stationary.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching. <a href=' /tsa/regime_switching/markov_switching.py#L63'>_logistic</a>(x)</tt>	Note that this is not a vectorized function.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching. <a href=' /tsa/regime_switching/markov_switching.py#L89'>_partials_logistic</a>(x)</tt>	Note that this is not a vectorized function.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching. <a href=' /tsa/regime_switching/markov_switching.py#L123'>py_hamilton_filter</a>(initial_probabilities,regime_transition,conditional_likelihoods)</tt>	Hamilton filter using pure python parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching. <a href=' /tsa/regime_switching/markov_switching.py#L229'>cy_hamilton_filter</a>(initial_probabilities,regime_transition,conditional_likelihoods)</tt>	Hamilton filter using cython inner loop parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching. <a href=' /tsa/regime_switching/markov_switching.py#L323'>py_kim_smoother</a>(regime_transition,predicted_joint_probabilities,filtered_joint_probabilities)</tt>	Kim smoother using pure python parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching. <a href=' /tsa/regime_switching/markov_switching.py#L408'>cy_kim_smoother</a>(regime_transition,predicted_joint_probabilities,filtered_joint_probabilities)</tt>	Kim smoother using cython inner loop parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L709'>k_params</a>()</tt>	Int number of parameters in the model.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L716'>initialize_steady_state</a>()</tt>	Set initialization of regime probabilities to be steady-state values notes.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L732'>initialize_known</a>(probabilities,tol)</tt>	Set initialization of regime probabilities to use known values.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L745'>initial_probabilities</a>(params,regime_transition)</tt>	Retrieve initial probabilities.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L797'>regime_transition_matrix</a>(params,exog_tvtp)</tt>	Construct the left-stochastic transition matrix notes.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L832'>predict</a>(params,start,end,probabilities)</tt>	In-sample prediction and out-of-sample forecasting parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L906'>predict_conditional</a>(params)</tt>	In-sample prediction conditional on the current and possibly past regimes.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L924'>_conditional_likelihoods</a>(params)</tt>	Compute likelihoods conditional on the current period's regime (and the last self.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L950'>filter</a>(params,transformed,cov_type,cov_kwds)</tt>	Apply the hamilton filter parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1031'>smooth</a>(params,transformed,cov_type,cov_kwds)</tt>	Apply the kim smoother and hamilton filter parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1107'>loglikeobs</a>(params,transformed)</tt>	Loglikelihood evaluation for each period parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1128'>loglike</a>(params,transformed)</tt>	Loglikelihood evaluation parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1142'>score</a>(params,transformed)</tt>	Compute the score function at params.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1158'>score_obs</a>(params,transformed)</tt>	Compute the score per observation evaluated at params parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1174'>hessian</a>(params,transformed)</tt>	Hessian matrix of the likelihood function evaluated at the given parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1191'>fit</a>(start_params,transformed,cov_type,cov_kwds)</tt>	Fits the model by maximum likelihood via hamilton filter.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1311'>_fit_em</a>(start_params,transformed,cov_type,cov_kwds)</tt>	Fits the model using the expectation-maximization em algorithm parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1403'>_em_iteration</a>(params0)</tt>	Em iteration notes.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1431'>_em_regime_transition</a>(result)</tt>	Em step for regime transition probabilities.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1465'>_start_params_search</a>(reps,start_params,transformed,em_iter)</tt>	Search for starting parameters as random permutations of a vector parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1538'>start_params</a>()</tt>	Array starting parameters for maximum likelihood estimation.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1553'>param_names</a>()</tt>	List of str list of human readable parameter names for parameters actually included in the model.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1578'>transform_params</a>(unconstrained)</tt>	Transform unconstrained parameters used by the optimizer to constrained parameters used in likelihood evaluation.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1621'>_untransform_logistic</a>(unconstrained,constrained)</tt>	Function to allow using a numerical root-finder to reverse the logistic transform.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitching <a href=' /tsa/regime_switching/markov_switching.py#L1635'>untransform_params</a>(constrained)</tt>	Transform constrained parameters used in likelihood evaluation to unconstrained parameters used by the optimizer.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.HamiltonFilterResults <a href=' /tsa/regime_switching/markov_switching.py#L1759'>expected_durations</a>()</tt>	Array expected duration of a regime possibly time-varying.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitchingResults <a href=' /tsa/regime_switching/markov_switching.py#L1965'>aic</a>()</tt>	Float akaike information criterion.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitchingResults <a href=' /tsa/regime_switching/markov_switching.py#L1973'>bic</a>()</tt>	Float bayes information criterion.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitchingResults <a href=' /tsa/regime_switching/markov_switching.py#L1981'>cov_params_approx</a>()</tt>	Array the variance / covariance matrix computed using the numerical.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitchingResults <a href=' /tsa/regime_switching/markov_switching.py#L1995'>cov_params_opg</a>()</tt>	Array the variance / covariance matrix computed using the outer.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitchingResults <a href=' /tsa/regime_switching/markov_switching.py#L2010'>cov_params_robust</a>()</tt>	Array the qmle variance / covariance matrix computed using the.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitchingResults <a href=' /tsa/regime_switching/markov_switching.py#L2027'>fittedvalues</a>()</tt>	Array the predicted values of the model an (nobs x k_endog) array.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitchingResults <a href=' /tsa/regime_switching/markov_switching.py#L2034'>hqic</a>()</tt>	Float hannan-quinn information criterion.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitchingResults <a href=' /tsa/regime_switching/markov_switching.py#L2042'>llf_obs</a>()</tt>	Float the value of the log-likelihood function evaluated at params.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitchingResults <a href=' /tsa/regime_switching/markov_switching.py#L2049'>llf</a>()</tt>	Float the value of the log-likelihood function evaluated at params.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitchingResults <a href=' /tsa/regime_switching/markov_switching.py#L2056'>resid</a>()</tt>	Array the model residuals an (nobs x k_endog) array.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitchingResults <a href=' /tsa/regime_switching/markov_switching.py#L2063'>predict</a>(start,end,probabilities,conditional)</tt>	In-sample prediction and out-of-sample forecasting parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitchingResults <a href=' /tsa/regime_switching/markov_switching.py#L2103'>forecast</a>(steps)</tt>	Out-of-sample forecasts parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovSwitchingResults <a href=' /tsa/regime_switching/markov_switching.py#L2125'>summary</a>(alpha,start,title,model_name)</tt>	Summarize the model parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovRegression <a href=' /tsa/regime_switching/markov_regression.py#L142'>predict_conditional</a>(params)</tt>	In-sample prediction conditional on the current regime parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovRegression <a href=' /tsa/regime_switching/markov_regression.py#L176'>_conditional_likelihoods</a>(params)</tt>	Compute likelihoods conditional on the current period's regime.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovRegression <a href=' /tsa/regime_switching/markov_regression.py#L208'>_em_iteration</a>(params0)</tt>	Em iteration notes.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovRegression <a href=' /tsa/regime_switching/markov_regression.py#L238'>_em_exog</a>(result,endog,exog,switching)</tt>	Em step for regression coefficients.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovRegression <a href=' /tsa/regime_switching/markov_regression.py#L266'>_em_variance</a>(result,endog,exog,betas)</tt>	Em step for variances.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovRegression <a href=' /tsa/regime_switching/markov_regression.py#L298'>start_params</a>()</tt>	Array starting parameters for maximum likelihood estimation.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovRegression <a href=' /tsa/regime_switching/markov_regression.py#L338'>param_names</a>()</tt>	List of str list of human readable parameter names for parameters actually included in the model.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovRegression <a href=' /tsa/regime_switching/markov_regression.py#L366'>transform_params</a>(unconstrained)</tt>	Transform unconstrained parameters used by the optimizer to constrained parameters used in likelihood evaluation.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovRegression <a href=' /tsa/regime_switching/markov_regression.py#L397'>untransform_params</a>(constrained)</tt>	Transform constrained parameters used in likelihood evaluation to unconstrained parameters used by the optimizer.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovAutoregression <a href=' /tsa/regime_switching/markov_autoregression.py#L156'>predict_conditional</a>(params)</tt>	In-sample prediction conditional on the current and previous regime parameters.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovAutoregression <a href=' /tsa/regime_switching/markov_autoregression.py#L222'>_conditional_likelihoods</a>(params)</tt>	Compute likelihoods conditional on the current period's regime and the last self.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovAutoregression <a href=' /tsa/regime_switching/markov_autoregression.py#L289'>_em_autoregressive</a>(result,betas,tmp)</tt>	Em step for autoregressive coefficients and variances.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovAutoregression <a href=' /tsa/regime_switching/markov_autoregression.py#L330'>start_params</a>()</tt>	Array starting parameters for maximum likelihood estimation.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovAutoregression <a href=' /tsa/regime_switching/markov_autoregression.py#L380'>param_names</a>()</tt>	List of str list of human readable parameter names for parameters actually included in the model.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovAutoregression <a href=' /tsa/regime_switching/markov_autoregression.py#L402'>transform_params</a>(unconstrained)</tt>	Transform unconstrained parameters used by the optimizer to constrained parameters used in likelihood evaluation.
<tt style='background-color:#E8E8E8;'> tsa.regime_switching.MarkovAutoregression <a href=' /tsa/regime_switching/markov_autoregression.py#L433'>untransform_params</a>(constrained)</tt>	Transform constrained parameters used in likelihood evaluation to unconstrained parameters used by the optimizer.
<tt style='background-color:#E8E8E8;'> tsa.interp. <a href=' /tsa/interp/denton.py#L88'>dentonm</a>(indicator,benchmark,freq)</tt>	Modified denton's method to convert low-frequency to high-frequency data.
<tt style='background-color:#E8E8E8;'> tsa.kalmanf. <a href=' /tsa/kalmanf/kalmanfilter.py#L50'>kalmanfilter</a>(F,A,H,Q)</tt>	Returns the negative log-likelihood of y conditional on the information set assumes that the initial state and all innovations are multivariate.
<tt style='background-color:#E8E8E8;'> tsa.kalmanf.StateSpaceModel <a href=' /tsa/kalmanf/kalmanfilter.py#L307'>_univariatefilter</a>(params,init_state,init_var)</tt>	Implements the kalman filter recursions optimized for univariate case.
<tt style='background-color:#E8E8E8;'> tsa.kalmanf.StateSpaceModel <a href=' /tsa/kalmanf/kalmanfilter.py#L328'>kalmanfilter</a>(params,init_state,init_var)</tt>	Runs the kalman filter.
<tt style='background-color:#E8E8E8;'> tsa.kalmanf. <a href=' /tsa/kalmanf/kalmanfilter.py#L447'>updatematrices</a>(params,y,xi10,ntrain)</tt>	Todo change api update names this isn't general.
<tt style='background-color:#E8E8E8;'> tsa.kalmanf.KalmanFilter <a href=' /tsa/kalmanf/kalmanfilter.py#L487'>T</a>(cls,params,r,k)</tt>	The coefficient matrix for the state vector in the state equation.
<tt style='background-color:#E8E8E8;'> tsa.kalmanf.KalmanFilter <a href=' /tsa/kalmanf/kalmanfilter.py#L520'>R</a>(cls,params,r,k)</tt>	The coefficient matrix for the state vector in the observation equation.
<tt style='background-color:#E8E8E8;'> tsa.kalmanf.KalmanFilter <a href=' /tsa/kalmanf/kalmanfilter.py#L551'>Z</a>(cls,r)</tt>	Returns the z selector matrix in the observation equation.
<tt style='background-color:#E8E8E8;'> tsa.kalmanf.KalmanFilter <a href=' /tsa/kalmanf/kalmanfilter.py#L571'>geterrors</a>(cls,y,k,k_ar)</tt>	Returns just the errors of the kalman filter.
<tt style='background-color:#E8E8E8;'> tsa.kalmanf.KalmanFilter <a href=' /tsa/kalmanf/kalmanfilter.py#L587'>_init_kalman_state</a>(cls,params,arma_model)</tt>	Returns the system matrices and other info needed for the.
<tt style='background-color:#E8E8E8;'> tsa.kalmanf.KalmanFilter <a href=' /tsa/kalmanf/kalmanfilter.py#L617'>loglike</a>(cls,params,arma_model,set_sigma2)</tt>	The loglikelihood for an arma model using the kalman filter recursions.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/testing.py#L18'>is_pandas_min_version</a>(min_version)</tt>	Check whether pandas is at least min_version.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/linalg.py#L21'>lstsq</a>(a,b,cond,overwrite_a)</tt>	Compute least-squares solution to equation :m a x = b compute a vector x such that the 2-norm :m |b - a x| is minimised.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/linalg.py#L104'>pinv</a>(a,cond,rcond)</tt>	Compute the moore-penrose pseudo-inverse of a matrix.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/linalg.py#L149'>pinv2</a>(a,cond,rcond)</tt>	Compute the moore-penrose pseudo-inverse of a matrix.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/linalg.py#L201'>logdet_symm</a>(m,check_symm)</tt>	Return log(det m asserting positive definiteness of m.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/linalg.py#L223'>stationary_solve</a>(r,b)</tt>	Solve a linear system for a toeplitz correlation matrix.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/wrappers.py#L14'>remove_nanrows</a>(y,x)</tt>	Remove common rows in [y x] that contain at least one nan todo this should be made more flexible.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/wrappers.py#L30'>linmod</a>(y,x,weights,sigma)</tt>	Get linear model with extra options for entry dispatches to regular model class and does not wrap the output.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/parallel.py#L18'>parallel_func</a>(func,n_jobs,verbose)</tt>	Return parallel instance with delayed function util function to use joblib only if available.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/data.py#L36'>interpret_data</a>(data,colnames,rownames)</tt>	Convert passed data structure to form required by estimation classes.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/data.py#L120'>_is_recarray</a>(data)</tt>	Returns true if data is a recarray.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L13'>mse</a>(x1,x2,axis)</tt>	Mean squared error parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L42'>rmse</a>(x1,x2,axis)</tt>	Root mean squared error parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L71'>maxabs</a>(x1,x2,axis)</tt>	Maximum absolute error parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L99'>meanabs</a>(x1,x2,axis)</tt>	Mean absolute error parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L127'>medianabs</a>(x1,x2,axis)</tt>	Median absolute error parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L155'>bias</a>(x1,x2,axis)</tt>	Bias mean error parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L183'>medianbias</a>(x1,x2,axis)</tt>	Median bias median error parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L211'>vare</a>(x1,x2,ddof,axis)</tt>	Variance of error parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L239'>stde</a>(x1,x2,ddof,axis)</tt>	Standard deviation of error parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L267'>iqr</a>(x1,x2,axis)</tt>	Interquartile range of error rounded index no interpolations.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L314'>aic</a>(llf,nobs,df_modelwc)</tt>	Akaike information criterion parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L339'>aicc</a>(llf,nobs,df_modelwc)</tt>	Akaike information criterion aic with small sample correction parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L364'>bic</a>(llf,nobs,df_modelwc)</tt>	Bayesian information criterion bic or schwarz criterion parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L389'>hqic</a>(llf,nobs,df_modelwc)</tt>	Hannan-quinn information criterion hqc.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L416'>aic_sigma</a>(sigma2,nobs,df_modelwc,islog)</tt>	Akaike information criterion parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L473'>aicc_sigma</a>(sigma2,nobs,df_modelwc,islog)</tt>	Akaike information criterion aic with small sample correction parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L508'>bic_sigma</a>(sigma2,nobs,df_modelwc,islog)</tt>	Bayesian information criterion bic or schwarz criterion parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/eval_measures.py#L543'>hqic_sigma</a>(sigma2,nobs,df_modelwc,islog)</tt>	Hannan-quinn information criterion hqc parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/numdiff.py#L109'>approx_fprime</a>(x,f,epsilon,args)</tt>	Gradient of function or jacobian if function f returns 1d array parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/numdiff.py#L164'>approx_fprime_cs</a>(x,f,epsilon,args)</tt>	Calculate gradient or jacobian with complex step derivative approximation parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/numdiff.py#L206'>approx_hess_cs</a>(x,f,epsilon,args)</tt>	Calculate hessian with complex-step derivative approximation parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/grouputils.py#L40'>combine_indices</a>(groups,prefix,sep,return_labels)</tt>	Use np unique to get integer group indices for product intersection.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/grouputils.py#L84'>group_sums</a>(x,group,use_bincount)</tt>	Simple bincount version again.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/grouputils.py#L118'>group_sums_dummy</a>(x,group_dummy)</tt>	Sum by groups given group dummy variable.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/grouputils.py#L129'>dummy_sparse</a>(groups)</tt>	Create a sparse indicator from a group array with integer labels parameters.
<tt style='background-color:#E8E8E8;'> tools.Group <a href=' /tools/grouputils.py#L222'>dummy</a>(drop_idx,sparse,dtype)</tt>	Drop_idx is only available if sparse=false.
<tt style='background-color:#E8E8E8;'> tools.GroupSorted <a href=' /tools/grouputils.py#L268'>lag_indices</a>(lag)</tt>	Return the index array for lagged values warning if k is larger then the number of observations for an.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/grouputils.py#L291'>_is_hierarchical</a>(x)</tt>	Checks if the first item of an array-like object is also array-like if so we have a multiindex and returns true.
<tt style='background-color:#E8E8E8;'> tools.Grouping <a href=' /tools/grouputils.py#L315'>__init__</a>(index,names)</tt>	Index : index-like can be pandas multiindex or index or array-like.
<tt style='background-color:#E8E8E8;'> tools.Grouping <a href=' /tools/grouputils.py#L388'>reindex</a>(index,names)</tt>	Resets the index in-place.
<tt style='background-color:#E8E8E8;'> tools.Grouping <a href=' /tools/grouputils.py#L398'>get_slices</a>(level)</tt>	Sets the slices attribute to be a list of indices of the sorted groups for the first index level.
<tt style='background-color:#E8E8E8;'> tools.Grouping <a href=' /tools/grouputils.py#L414'>count_categories</a>(level)</tt>	Sets the attribute counts to equal the bincount of the integer-valued labels.
<tt style='background-color:#E8E8E8;'> tools.Grouping <a href=' /tools/grouputils.py#L435'>sort</a>(data,index)</tt>	Applies a potentially hierarchical sort operation on a numpy array or pandas series/dataframe based on the grouping index or a.
<tt style='background-color:#E8E8E8;'> tools.Grouping <a href=' /tools/grouputils.py#L461'>transform_dataframe</a>(dataframe,function,level)</tt>	Apply function to each column by group.
<tt style='background-color:#E8E8E8;'> tools.Grouping <a href=' /tools/grouputils.py#L472'>transform_array</a>(array,function,level)</tt>	Apply function to each column by group.
<tt style='background-color:#E8E8E8;'> tools.Grouping <a href=' /tools/grouputils.py#L481'>transform_slices</a>(array,function,level)</tt>	Apply function to each group similar to transform_array but does.
<tt style='background-color:#E8E8E8;'> tools.Grouping <a href=' /tools/grouputils.py#L510'>dummy_sparse</a>(level)</tt>	Create a sparse indicator from a group array with integer labels parameters.
<tt style='background-color:#E8E8E8;'> tools.OneTimeProperty <a href=' /tools/decorators.py#L166'>__init__</a>(func)</tt>	Create a onetimeproperty instance.
<tt style='background-color:#E8E8E8;'> tools.OneTimeProperty <a href=' /tools/decorators.py#L181'>__get__</a>(obj,type)</tt>	This will be called on attribute access on the class or instance.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/tools.py#L16'>_make_dictnames</a>(tmp_arr,offset)</tt>	Helper function to create a dictionary mapping a column number to the name in tmp_arr.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/tools.py#L27'>drop_missing</a>(Y,X,axis)</tt>	Returns views on the arrays y and x where missing observations are dropped.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/tools.py#L66'>categorical</a>(data,col,dictnames,drop)</tt>	Returns a dummy matrix given an array of categorical variables.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/tools.py#L240'>add_constant</a>(data,prepend,has_constant)</tt>	Adds a column of ones to an array parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/tools.py#L292'>isestimable</a>(C,D)</tt>	True if q p contrast c is estimable for n p design d from an q x p contrast matrix c and an n x p design matrix d, checks if.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/tools.py#L333'>pinv_extended</a>(X,rcond)</tt>	Return the pinv of an array x as well as the singular values used in computation.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/tools.py#L357'>recipr</a>(X)</tt>	Return the reciprocal of an array setting all entries less than or equal to 0 to 0.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/tools.py#L367'>recipr0</a>(X)</tt>	Return the reciprocal of an array setting all entries equal to 0 as 0.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/tools.py#L377'>clean0</a>(matrix)</tt>	Erase columns of zeros can save some time in pseudoinverse.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/tools.py#L386'>fullrank</a>(X,r)</tt>	Return a matrix whose column span is the same as x.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/tools.py#L407'>unsqueeze</a>(data,axis,oldshape)</tt>	Unsqueeze a collapsed array >>> from numpy import mean.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/tools.py#L427'>chain_dot</a>()</tt>	Returns the dot product of the given matrices.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/tools.py#L454'>nan_dot</a>(A,B)</tt>	Returns np dot(left_matrix right_matrix) with the convention that.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/tools.py#L477'>maybe_unwrap_results</a>(results)</tt>	Gets raw results back from wrapped results.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/rootfinding.py#L21'>brentq_expanding</a>(func,low,upp,args)</tt>	Find the root of a function in one variable by expanding and brentq assumes function func is monotonic.
<tt style='background-color:#E8E8E8;'> tools.HoldIt <a href=' /tools/dump2module.py#L19'>save</a>(what,filename,header,useinstance)</tt>	Write attributes of this instance to python module given by filename parameters.
<tt style='background-color:#E8E8E8;'> tools.HoldIt <a href=' /tools/dump2module.py#L95'>verify</a>()</tt>	Load the saved module and verify the data this tries several ways of comparing the saved and the attached data.
<tt style='background-color:#E8E8E8;'> tools.StandardizeTransform <a href=' /tools/transform_model.py#L67'>transform</a>(data)</tt>	Standardize the data using the stored transformation.
<tt style='background-color:#E8E8E8;'> tools.StandardizeTransform <a href=' /tools/transform_model.py#L77'>transform_params</a>(params)</tt>	Transform parameters of the standardized model to the original model.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/web.py#L13'>_generate_url</a>(arg,stable)</tt>	Parse inputs and return a correctly formatted url or an error if the input.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/web.py#L44'>webdoc</a>(arg,stable)</tt>	Opens a browser and displays online documentation parameters.
<tt style='background-color:#E8E8E8;'> tools. <a href=' /tools/catadd.py#L6'>add_indep</a>(x,varnames,dtype)</tt>	Construct array with independent columns x is either iterable list tuple or instance of ndarray or a subclass of it.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/scipy.py#L162'>_next_regular</a>(target)</tt>	Find the next regular number greater than or equal to target.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L31'>__init__</a>()</tt>	Initialize an ordered dictionary signature is the same as for.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L47'>__setitem__</a>(key,value,dict_setitem)</tt>	Od __setitem__ i y <==> od[i]=y.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L57'>__delitem__</a>(key,dict_delitem)</tt>	Od __delitem__ y <==> del od[y].
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L66'>__iter__</a>()</tt>	Od __iter__() <==> iter od.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L74'>__reversed__</a>()</tt>	Od __reversed__() <==> reversed od.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L82'>clear</a>()</tt>	Od clear() -> none remove all items from od.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L94'>popitem</a>(last)</tt>	Od popitem() -> k v return and remove a key value pair.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L119'>keys</a>()</tt>	Od keys() -> list of keys in od.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L123'>values</a>()</tt>	Od values() -> list of values in od.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L127'>items</a>()</tt>	Od items() -> list of key value pairs in od.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L131'>iterkeys</a>()</tt>	Od iterkeys() -> an iterator over the keys in od.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L135'>itervalues</a>()</tt>	Od itervalues -> an iterator over the values in od.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L140'>iteritems</a>()</tt>	Od iteritems -> an iterator over the key value items in od.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L145'>update</a>()</tt>	Od update(e **f) -> none update od from dict/iterable e and f.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L180'>pop</a>(key,default)</tt>	Od pop(k[,d]) -> v remove specified key and return the corresponding value.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L193'>setdefault</a>(key,default)</tt>	Od setdefault(k[,d]) -> od get k d also set od[k]=d if k not in od.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L200'>__repr__</a>(_repr_running)</tt>	Od __repr__() <==> repr od.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L213'>__reduce__</a>()</tt>	Return state information for pickling.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L223'>copy</a>()</tt>	Od copy() -> a shallow copy of od.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L227'>fromkeys</a>(cls,iterable,value)</tt>	Od fromkeys(s[, v]) -> new ordered dictionary with keys from s.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L238'>__eq__</a>(other)</tt>	Od __eq__ y <==> od==y comparison to another od is order-sensitive.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L252'>viewkeys</a>()</tt>	Od viewkeys() -> a set-like object providing a view on od's keys.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L256'>viewvalues</a>()</tt>	Od viewvalues() -> an object providing a view on od's values.
<tt style='background-color:#E8E8E8;'> compat.OrderedDict <a href=' /compat/ordereddict.py#L260'>viewitems</a>()</tt>	Od viewitems() -> a set-like object providing a view on od's items.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/python.py#L201'>iteritems</a>(obj)</tt>	Replacement for six's iteritems for python2/3 compat uses 'iteritems' if available and otherwise uses 'items'.
<tt style='background-color:#E8E8E8;'> compat.Counter <a href=' /compat/counter.py#L25'>__init__</a>(iterable)</tt>	Create a new empty counter object and if given count elements.
<tt style='background-color:#E8E8E8;'> compat.Counter <a href=' /compat/counter.py#L41'>most_common</a>(n)</tt>	List the n most common elements and their counts from the most common to the least.
<tt style='background-color:#E8E8E8;'> compat.Counter <a href=' /compat/counter.py#L53'>elements</a>()</tt>	Iterator over elements repeating each as many times as its count.
<tt style='background-color:#E8E8E8;'> compat.Counter <a href=' /compat/counter.py#L75'>update</a>(iterable)</tt>	Like dict update() but add counts instead of replacing them.
<tt style='background-color:#E8E8E8;'> compat.Counter <a href=' /compat/counter.py#L103'>copy</a>()</tt>	Like dict copy() but returns a counter instance instead of a dict.
<tt style='background-color:#E8E8E8;'> compat.Counter <a href=' /compat/counter.py#L107'>__delitem__</a>(elem)</tt>	Like dict __delitem__() but does not raise keyerror for missing values.
<tt style='background-color:#E8E8E8;'> compat.Counter <a href=' /compat/counter.py#L127'>__add__</a>(other)</tt>	Add counts from two counters.
<tt style='background-color:#E8E8E8;'> compat.Counter <a href=' /compat/counter.py#L144'>__sub__</a>(other)</tt>	Subtract count but keep only results with positive counts.
<tt style='background-color:#E8E8E8;'> compat.Counter <a href=' /compat/counter.py#L160'>__or__</a>(other)</tt>	Union is the maximum of value in either of the input counters.
<tt style='background-color:#E8E8E8;'> compat.Counter <a href=' /compat/counter.py#L177'>__and__</a>(other)</tt>	Intersection is the minimum of corresponding counts.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/numpy.py#L455'>recarray_select</a>(recarray,fields)</tt>	" work-around for changes in numpy 1.
<tt style='background-color:#E8E8E8;'> multivariate. <a href=' /multivariate/multivariate_ols.py#L57'>_multivariate_ols_fit</a>(endog,exog,method,tolerance)</tt>	Solve multivariate linear model y = x * params where y is dependent variables x is independent variables.
<tt style='background-color:#E8E8E8;'> multivariate. <a href=' /multivariate/multivariate_ols.py#L124'>multivariate_stats</a>(eigenvals,r_err_sscp,r_contrast,df_resid)</tt>	For multivariate linear model y = x * b testing hypotheses.
<tt style='background-color:#E8E8E8;'> multivariate.MultivariateTestResults <a href=' /multivariate/multivariate_ols.py#L490'>summary_frame</a>()</tt>	Return results as a multiindex dataframe.
<tt style='background-color:#E8E8E8;'> multivariate.CanCorr <a href=' /multivariate/cancorr.py#L53'>_fit</a>(tolerance)</tt>	Fit the model a valueerror is raised if there are singular values smaller than the.
<tt style='background-color:#E8E8E8;'> multivariate.CanCorr <a href=' /multivariate/cancorr.py#L95'>corr_test</a>()</tt>	Approximate f test perform multivariate statistical tests of the hypothesis that.
<tt style='background-color:#E8E8E8;'> multivariate.PCA <a href=' /multivariate/pca.py#L299'>_adjust_missing</a>()</tt>	Implements alternatives for handling missing values.
<tt style='background-color:#E8E8E8;'> multivariate.PCA <a href=' /multivariate/pca.py#L346'>_compute_gls_weights</a>()</tt>	Computes gls weights based on percentage of data fit.
<tt style='background-color:#E8E8E8;'> multivariate.PCA <a href=' /multivariate/pca.py#L371'>_pca</a>()</tt>	Main pca routine.
<tt style='background-color:#E8E8E8;'> multivariate.PCA <a href=' /multivariate/pca.py#L404'>_prepare_data</a>()</tt>	Standardize or demean data.
<tt style='background-color:#E8E8E8;'> multivariate.PCA <a href=' /multivariate/pca.py#L422'>_compute_using_svd</a>()</tt>	Svd method to compute eigenvalues and eigenvecs.
<tt style='background-color:#E8E8E8;'> multivariate.PCA <a href=' /multivariate/pca.py#L429'>_compute_using_eig</a>()</tt>	Eigenvalue decomposition method to compute eigenvalues and eigenvectors.
<tt style='background-color:#E8E8E8;'> multivariate.PCA <a href=' /multivariate/pca.py#L436'>_compute_using_nipals</a>()</tt>	Nipals implementation to compute small number of eigenvalues and eigenvectors.
<tt style='background-color:#E8E8E8;'> multivariate.PCA <a href=' /multivariate/pca.py#L467'>_fill_missing_em</a>()</tt>	Em algorithm to fill missing values.
<tt style='background-color:#E8E8E8;'> multivariate.PCA <a href=' /multivariate/pca.py#L523'>_compute_pca_from_eig</a>()</tt>	Compute relevant statistics after eigenvalues have been computed.
<tt style='background-color:#E8E8E8;'> multivariate.PCA <a href=' /multivariate/pca.py#L558'>_compute_rsquare_and_ic</a>()</tt>	Final statistics to compute.
<tt style='background-color:#E8E8E8;'> multivariate.PCA <a href=' /multivariate/pca.py#L598'>project</a>(ncomp,transform,unweight)</tt>	Project series onto a specific number of factors parameters.
<tt style='background-color:#E8E8E8;'> multivariate.PCA <a href=' /multivariate/pca.py#L646'>_to_pandas</a>()</tt>	Returns pandas dataframes for all values.
<tt style='background-color:#E8E8E8;'> multivariate.PCA <a href=' /multivariate/pca.py#L685'>plot_scree</a>(ncomp,log_scale,cumulative,ax)</tt>	Plot of the ordered eigenvalues parameters.
<tt style='background-color:#E8E8E8;'> multivariate.PCA <a href=' /multivariate/pca.py#L744'>plot_rsquare</a>(ncomp,ax)</tt>	Box plots of the individual series r-square against the number of pcs parameters.
<tt style='background-color:#E8E8E8;'> multivariate. <a href=' /multivariate/pca.py#L780'>pca</a>(data,ncomp,standardize,demean)</tt>	Principal component analysis parameters.
<tt style='background-color:#E8E8E8;'> miscmodels.NonlinearLS <a href=' /miscmodels/nonlinls.py#L217'>fit_minimal</a>(start_value)</tt>	Minimal fitting with no extra calculations.
<tt style='background-color:#E8E8E8;'> miscmodels.NonlinearLS <a href=' /miscmodels/nonlinls.py#L223'>fit_random</a>(ntries,rvs_generator,nparams)</tt>	Fit with random starting values.
<tt style='background-color:#E8E8E8;'> miscmodels.NonlinearLS <a href=' /miscmodels/nonlinls.py#L242'>jac_predict</a>(params)</tt>	Jacobian of prediction function using complex step derivative this assumes that the predict function does not use complex variable.
<tt style='background-color:#E8E8E8;'> miscmodels. <a href=' /miscmodels/try_mlecov.py#L20'>mvn_loglike_sum</a>(x,sigma)</tt>	Loglike multivariate normal.
<tt style='background-color:#E8E8E8;'> miscmodels. <a href=' /miscmodels/try_mlecov.py#L36'>mvn_loglike</a>(x,sigma)</tt>	Loglike multivariate normal.
<tt style='background-color:#E8E8E8;'> miscmodels. <a href=' /miscmodels/try_mlecov.py#L57'>mvn_loglike_chol</a>(x,sigma)</tt>	Loglike multivariate normal.
<tt style='background-color:#E8E8E8;'> miscmodels. <a href=' /miscmodels/try_mlecov.py#L85'>mvn_nloglike_obs</a>(x,sigma)</tt>	Loglike multivariate normal.
<tt style='background-color:#E8E8E8;'> miscmodels.MLEGLS <a href=' /miscmodels/try_mlecov.py#L153'>_params2cov</a>(params,nobs)</tt>	Get autocovariance matrix from arma regression parameter.
<tt style='background-color:#E8E8E8;'> miscmodels.PoissonGMLE <a href=' /miscmodels/count.py#L103'>nloglikeobs</a>(params)</tt>	Loglikelihood of poisson model parameters.
<tt style='background-color:#E8E8E8;'> miscmodels.PoissonGMLE <a href=' /miscmodels/count.py#L124'>predict_distribution</a>(exog)</tt>	Return frozen scipy stats distribution with mu at estimated prediction.
<tt style='background-color:#E8E8E8;'> miscmodels.PoissonOffsetGMLE <a href=' /miscmodels/count.py#L164'>nloglikeobs</a>(params)</tt>	Loglikelihood of poisson model parameters.
<tt style='background-color:#E8E8E8;'> miscmodels.PoissonZiGMLE <a href=' /miscmodels/count.py#L226'>nloglikeobs</a>(params)</tt>	Loglikelihood of poisson model parameters.
<tt style='background-color:#E8E8E8;'> miscmodels.TLinearModel <a href=' /miscmodels/tmodel.py#L114'>nloglikeobs</a>(params)</tt>	Loglikelihood of linear model with t distributed errors.
<tt style='background-color:#E8E8E8;'> miscmodels.TArma <a href=' /miscmodels/tmodel.py#L191'>nloglikeobs</a>(params)</tt>	Loglikelihood for arma model for each observation t-distribute.
<tt style='background-color:#E8E8E8;'> formula. <a href=' /formula/formulatools.py#L25'>handle_formula_data</a>(Y,X,formula,depth)</tt>	Returns endog exog and the model specification from arrays and formula parameters.
<tt style='background-color:#E8E8E8;'> formula. <a href=' /formula/formulatools.py#L82'>_remove_intercept_patsy</a>(terms)</tt>	Remove intercept from patsy terms.
<tt style='background-color:#E8E8E8;'> formula. <a href=' /formula/formulatools.py#L95'>_intercept_idx</a>(design_info)</tt>	Returns boolean array index indicating which column holds the intercept.
<tt style='background-color:#E8E8E8;'> distributions. <a href=' /distributions/mixture_rvs.py#L4'>_make_index</a>(prob,size)</tt>	Returns a boolean index for given probabilities.
<tt style='background-color:#E8E8E8;'> distributions. <a href=' /distributions/mixture_rvs.py#L18'>mixture_rvs</a>(prob,size,dist,kwargs)</tt>	Sample from a mixture of distributions.
<tt style='background-color:#E8E8E8;'> distributions.MixtureDistribution <a href=' /distributions/mixture_rvs.py#L83'>pdf</a>(x,prob,dist,kwargs)</tt>	Pdf a mixture of distributions.
<tt style='background-color:#E8E8E8;'> distributions.MixtureDistribution <a href=' /distributions/mixture_rvs.py#L133'>cdf</a>(x,prob,dist,kwargs)</tt>	Cdf of a mixture of distributions.
<tt style='background-color:#E8E8E8;'> distributions. <a href=' /distributions/mixture_rvs.py#L186'>mv_mixture_rvs</a>(prob,size,dist,nvars)</tt>	Sample from a mixture of multivariate distributions.
<tt style='background-color:#E8E8E8;'> distributions. <a href=' /distributions/edgeworth.py#L24'>_faa_di_bruno_partitions</a>(n)</tt>	Return all non-negative integer solutions of the diophantine equation n*k_n +.
<tt style='background-color:#E8E8E8;'> distributions. <a href=' /distributions/edgeworth.py#L58'>cumulant_from_moments</a>(momt,n)</tt>	Compute n-th cumulant given moments.
<tt style='background-color:#E8E8E8;'> distributions. <a href=' /distributions/empirical_distribution.py#L7'>_conf_set</a>(F,alpha)</tt>	Constructs a dvoretzky-kiefer-wolfowitz confidence band for the ecdf.
<tt style='background-color:#E8E8E8;'> distributions. <a href=' /distributions/empirical_distribution.py#L145'>monotone_fn_inverter</a>(fn,x,vectorized)</tt>	Given a monotone function fn no checking is done to verify monotonicity and a set of x values return an linearly interpolated approximation.
<tt style='background-color:#E8E8E8;'> base.BoxCox <a href=' /base/transform.py#L11'>transform_boxcox</a>(x,lmbda,method)</tt>	Performs a box-cox transformation on the data array x if lmbda is none.
<tt style='background-color:#E8E8E8;'> base.BoxCox <a href=' /base/transform.py#L70'>untransform_boxcox</a>(x,lmbda,method)</tt>	Back-transforms the box-cox transformed data array by means of the indicated method.
<tt style='background-color:#E8E8E8;'> base.BoxCox <a href=' /base/transform.py#L107'>_est_lambda</a>(x,bounds,method)</tt>	Computes an estimate for the lambda parameter in the box-cox transformation using method.
<tt style='background-color:#E8E8E8;'> base.BoxCox <a href=' /base/transform.py#L151'>_guerrero_cv</a>(x,bounds,window_length,scale)</tt>	Computes lambda using guerrero's coefficient of variation if no.
<tt style='background-color:#E8E8E8;'> base.BoxCox <a href=' /base/transform.py#L203'>_loglik_boxcox</a>(x,bounds,options)</tt>	Taken from the stata manual on box-cox regressions where this is the special case of 'lhs only'.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/l1_cvxopt.py#L9'>fit_l1_cvxopt_cp</a>(f,score,start_params,args)</tt>	Solve the l1 regularized problem using cvxopt solvers cp.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/l1_slsqp.py#L128'>_objective_func</a>(f,x,k_params,alpha)</tt>	The regularized objective function.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/l1_slsqp.py#L138'>_fprime</a>(score,x,k_params,alpha)</tt>	The regularized derivative.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/l1_cvxopt.py#L167'>_get_G</a>(k_params)</tt>	The linear inequality constraint matrix.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/l1_cvxopt.py#L179'>_hessian_wrapper</a>(hess,x,z,k_params)</tt>	Wraps the hessian up in the form for cvxopt.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/data.py#L20'>_asarray_2d_null_rows</a>(x)</tt>	Makes sure input is an array and is 2d makes sure output is 2d true.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/data.py#L33'>_nan_rows</a>()</tt>	Returns a boolean array which is true where any of the rows in any of the _2d_ arrays in arrs are nans.
<tt style='background-color:#E8E8E8;'> base.ModelData <a href=' /base/data.py#L186'>handle_missing</a>(cls,endog,exog,missing)</tt>	This returns a dictionary with keys endog exog and the keys of kwargs.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/l1_slsqp.py#L10'>fit_l1_slsqp</a>(f,score,start_params,args)</tt>	Solve the l1 regularized problem using scipy optimize fmin_slsqp().
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/l1_slsqp.py#L128'>_objective_func</a>(f,x_full,k_params,alpha)</tt>	The regularized objective function.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/l1_slsqp.py#L138'>_fprime</a>(score,x_full,k_params,alpha)</tt>	The regularized derivative.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/l1_slsqp.py#L147'>_f_ieqcons</a>(x_full,k_params)</tt>	The inequality constraints.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/l1_slsqp.py#L157'>_fprime_ieqcons</a>(x_full,k_params)</tt>	Derivative of the inequality constraints.
<tt style='background-color:#E8E8E8;'> base.Model <a href=' /base/model.py#L78'>_get_init_kwds</a>()</tt>	Return dictionary with extra keys used in model __init__.
<tt style='background-color:#E8E8E8;'> base.Model <a href=' /base/model.py#L100'>from_formula</a>(cls,formula,data,subset)</tt>	Create a model from a formula and dataframe.
<tt style='background-color:#E8E8E8;'> base.Model <a href=' /base/model.py#L181'>endog_names</a>()</tt>	Names of endogenous variables.
<tt style='background-color:#E8E8E8;'> base.Model <a href=' /base/model.py#L186'>exog_names</a>()</tt>	Names of exogenous variables.
<tt style='background-color:#E8E8E8;'> base.Model <a href=' /base/model.py#L191'>fit</a>()</tt>	Fit a model to data.
<tt style='background-color:#E8E8E8;'> base.Model <a href=' /base/model.py#L197'>predict</a>(params,exog)</tt>	After a model has been fit predict returns the fitted values.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModel <a href=' /base/model.py#L215'>initialize</a>()</tt>	Initialize possibly re-initialize a model instance for.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModel <a href=' /base/model.py#L226'>loglike</a>(params)</tt>	Log-likelihood of model.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModel <a href=' /base/model.py#L232'>score</a>(params)</tt>	Score vector of model.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModel <a href=' /base/model.py#L240'>information</a>(params)</tt>	Fisher information matrix of model returns -hessian of loglike evaluated at params.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModel <a href=' /base/model.py#L248'>hessian</a>(params)</tt>	The hessian matrix of the model.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModel <a href=' /base/model.py#L254'>fit</a>(start_params,method,maxiter,full_output)</tt>	Fit method for likelihood based models parameters.
<tt style='background-color:#E8E8E8;'> base.GenericLikelihoodModel <a href=' /base/model.py#L619'>expandparams</a>(params)</tt>	Expand to full parameter array when some parameters are fixed parameters.
<tt style='background-color:#E8E8E8;'> base.GenericLikelihoodModel <a href=' /base/model.py#L662'>score</a>(params)</tt>	Gradient of log-likelihood evaluated at params.
<tt style='background-color:#E8E8E8;'> base.GenericLikelihoodModel <a href=' /base/model.py#L670'>score_obs</a>(params)</tt>	Jacobian/gradient of log-likelihood evaluated at params for each observation.
<tt style='background-color:#E8E8E8;'> base.GenericLikelihoodModel <a href=' /base/model.py#L679'>hessian</a>(params)</tt>	Hessian of log-likelihood evaluated at params.
<tt style='background-color:#E8E8E8;'> base.GenericLikelihoodModel <a href=' /base/model.py#L687'>hessian_factor</a>(params,scale,observed)</tt>	Weights for calculating hessian parameters.
<tt style='background-color:#E8E8E8;'> base.GenericLikelihoodModel <a href=' /base/model.py#L711'>fit</a>(start_params,method,maxiter,full_output)</tt>	Fit the model using maximum likelihood.
<tt style='background-color:#E8E8E8;'> base.Results <a href=' /base/model.py#L770'>predict</a>(exog,transform)</tt>	Call self model predict with self params as the first argument.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModelResults <a href=' /base/model.py#L1060'>tvalues</a>()</tt>	Return the t-statistic for a given parameter estimate.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModelResults <a href=' /base/model.py#L1076'>cov_params</a>(r_matrix,column,scale,cov_p)</tt>	Returns the variance/covariance matrix.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModelResults <a href=' /base/model.py#L1170'>t_test</a>(r_matrix,cov_p,scale,use_t)</tt>	Compute a t-test for a each linear hypothesis of the form rb = q parameters.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModelResults <a href=' /base/model.py#L1311'>f_test</a>(r_matrix,cov_p,scale,invcov)</tt>	Compute the f-test for a joint linear hypothesis.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModelResults <a href=' /base/model.py#L1408'>wald_test</a>(r_matrix,cov_p,scale,invcov)</tt>	Compute a wald-test for a joint linear hypothesis.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModelResults <a href=' /base/model.py#L1510'>wald_test_terms</a>(skip_single,extra_constraints,combine_terms)</tt>	Compute a sequence of wald tests for terms over multiple columns this computes joined wald tests for the hypothesis that all.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModelResults <a href=' /base/model.py#L1648'>conf_int</a>(alpha,cols,method)</tt>	Returns the confidence interval of the fitted parameters.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModelResults <a href=' /base/model.py#L1722'>save</a>(fname,remove_data)</tt>	Save a pickle of this instance parameters.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModelResults <a href=' /base/model.py#L1750'>load</a>(cls,fname)</tt>	Load a pickle class method parameters.
<tt style='background-color:#E8E8E8;'> base.LikelihoodModelResults <a href=' /base/model.py#L1769'>remove_data</a>()</tt>	Remove data arrays all nobs arrays from result and model this reduces the size of the instance so it can be pickled with less.
<tt style='background-color:#E8E8E8;'> base.ResultMixin <a href=' /base/model.py#L1874'>score_obsv</a>()</tt>	Cached jacobian of log-likelihood.
<tt style='background-color:#E8E8E8;'> base.ResultMixin <a href=' /base/model.py#L1880'>hessv</a>()</tt>	Cached hessian of log-likelihood.
<tt style='background-color:#E8E8E8;'> base.ResultMixin <a href=' /base/model.py#L1886'>covjac</a>()</tt>	Covariance of parameters based on outer product of jacobian of.
<tt style='background-color:#E8E8E8;'> base.ResultMixin <a href=' /base/model.py#L1900'>covjhj</a>()</tt>	Covariance of parameters based on hjjh.
<tt style='background-color:#E8E8E8;'> base.ResultMixin <a href=' /base/model.py#L1914'>bsejhj</a>()</tt>	Standard deviation of parameter estimates based on covhjh.
<tt style='background-color:#E8E8E8;'> base.ResultMixin <a href=' /base/model.py#L1920'>bsejac</a>()</tt>	Standard deviation of parameter estimates based on covjac.
<tt style='background-color:#E8E8E8;'> base.ResultMixin <a href=' /base/model.py#L1926'>bootstrap</a>(nrep,method,disp,store)</tt>	Simple bootstrap to get mean and variance of estimator see notes.
<tt style='background-color:#E8E8E8;'> base.GenericLikelihoodModelResults <a href=' /base/model.py#L2064'>summary</a>(yname,xname,title,alpha)</tt>	Summarize the regression results parameters.
<tt style='background-color:#E8E8E8;'> base.Penalty <a href=' /base/_penalties.py#L44'>func</a>(params)</tt>	A penalty function on a vector of parameters.
<tt style='background-color:#E8E8E8;'> base.Penalty <a href=' /base/_penalties.py#L60'>grad</a>(params)</tt>	The gradient of a penalty function.
<tt style='background-color:#E8E8E8;'> base.Optimizer <a href=' /base/optimizer.py#L19'>_fit</a>(objective,gradient,start_params,fargs)</tt>	Fit function for any model with an objective function.
<tt style='background-color:#E8E8E8;'> base.Optimizer <a href=' /base/optimizer.py#L203'>_fit_constrained</a>(params)</tt>	Todo how to add constraints? something like.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/covtype.py#L15'>get_robustcov_results</a>(cov_type,use_t)</tt>	Create new results instance with robust covariance as default parameters.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/l1_solvers_common.py#L8'>qc_results</a>(params,alpha,score,qc_tol)</tt>	Theory dictates that one of two conditions holds i) abs(score[i]) == alpha[i] and params[i] != 0.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/l1_solvers_common.py#L89'>do_trim_params</a>(params,k_params,alpha,score)</tt>	Trims set to zero params that are zero at the theoretical minimum.
<tt style='background-color:#E8E8E8;'> base.TransformRestriction <a href=' /base/_constraints.py#L88'>expand</a>(params_reduced)</tt>	Transform from the reduced to the full parameter space parameters.
<tt style='background-color:#E8E8E8;'> base.TransformRestriction <a href=' /base/_constraints.py#L110'>reduce</a>(params)</tt>	Transform from the full to the reduced parameter space parameters.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/_constraints.py#L132'>transform_params_constraint</a>(params,Sinv,R,q)</tt>	Find the parameters that statisfy linear constraint from unconstraint the linear constraint r params = q is imposed.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/_constraints.py#L172'>fit_constrained</a>(model,constraint_matrix,constraint_values,start_params)</tt>	Fit model subject to linear equality constraints the constraints are of the form r params = q.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/_constraints.py#L267'>fit_constrained_wrap</a>(model,constraints,start_params)</tt>	Fit_constraint that returns a results instance this is a development version for fit_constrained methods or.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/distributed_estimation.py#L75'>_est_regularized_naive</a>(mod,pnum,partitions,fit_kwds)</tt>	Estimates the regularized fitted parameters.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/distributed_estimation.py#L101'>_est_unregularized_naive</a>(mod,pnum,partitions,fit_kwds)</tt>	Estimates the unregularized fitted parameters.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/distributed_estimation.py#L127'>_join_naive</a>(params_l,threshold)</tt>	Joins the results from each run of _est_<type>_naive and returns the mean estimate of the coefficients.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/distributed_estimation.py#L152'>_calc_grad</a>(mod,params,alpha,L1_wt)</tt>	Calculates the log-likelihood gradient for the debiasing parameters.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/distributed_estimation.py#L195'>_calc_wdesign_mat</a>(mod,params,hess_kwds)</tt>	Calculates the weighted design matrix necessary to generate the approximate inverse covariance matrix.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/distributed_estimation.py#L218'>_est_regularized_debiased</a>(mod,mnum,partitions,fit_kwds)</tt>	Estimates the regularized fitted parameters is the default estimation_method for class distributedmodel.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/distributed_estimation.py#L283'>_join_debiased</a>(results_l,threshold)</tt>	Joins the results from each run of _est_regularized_debiased and returns the debiased estimate of the coefficients.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/distributed_estimation.py#L328'>_helper_fit_partition</a>(pnum,endog,exog,fit_kwds)</tt>	Handles the model fitting for each machine note this.
<tt style='background-color:#E8E8E8;'> base.DistributedModel <a href=' /base/distributed_estimation.py#L476'>fit</a>(data_generator,fit_kwds,parallel_method,parallel_backend)</tt>	Performs the distributed estimation using the corresponding distributedmodel.
<tt style='background-color:#E8E8E8;'> base.DistributedModel <a href=' /base/distributed_estimation.py#L533'>fit_sequential</a>(data_generator,fit_kwds,init_kwds_generator)</tt>	Sequentially performs the distributed estimation using the corresponding distributedmodel.
<tt style='background-color:#E8E8E8;'> base.DistributedModel <a href=' /base/distributed_estimation.py#L580'>fit_joblib</a>(data_generator,fit_kwds,parallel_backend,init_kwds_generator)</tt>	Performs the distributed estimation in parallel using joblib parameters.
<tt style='background-color:#E8E8E8;'> base.DistributedResults <a href=' /base/distributed_estimation.py#L656'>predict</a>(exog)</tt>	Calls self model predict for the provided exog see.
<tt style='background-color:#E8E8E8;'> base.ResultsWrapper <a href=' /base/wrapper.py#L53'>save</a>(fname,remove_data)</tt>	Save a pickle of this instance parameters.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/elastic_net.py#L28'>_gen_npfuncs</a>(k,L1_wt,alpha,loglike_kwds)</tt>	Negative penalized log-likelihood functions.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/elastic_net.py#L62'>fit_elasticnet</a>(model,method,maxiter,alpha)</tt>	Return an elastic net regularized fit to a regression model.
<tt style='background-color:#E8E8E8;'> base. <a href=' /base/elastic_net.py#L248'>_opt_1d</a>(func,grad,hess,model)</tt>	One-dimensional helper for elastic net.
<tt style='background-color:#E8E8E8;'> datasets. <a href=' /datasets/template_data.py#L35'>load</a>()</tt>	Load the data and return a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets. <a href=' /datasets/utils.py#L18'>webuse</a>(data,baseurl,as_df)</tt>	Download and return an example dataset from stata.
<tt style='background-color:#E8E8E8;'> datasets. <a href=' /datasets/utils.py#L148'>_maybe_reset_index</a>(data)</tt>	All the rdatasets have the integer row labels from r if there is no.
<tt style='background-color:#E8E8E8;'> datasets. <a href=' /datasets/utils.py#L194'>_urlopen_cached</a>(url,cache)</tt>	Tries to load data from cache location otherwise downloads it if it.
<tt style='background-color:#E8E8E8;'> datasets. <a href=' /datasets/utils.py#L247'>get_rdataset</a>(dataname,package,cache)</tt>	Download and return r dataset parameters.
<tt style='background-color:#E8E8E8;'> datasets. <a href=' /datasets/utils.py#L303'>get_data_home</a>(data_home)</tt>	Return the path of the statsmodels data dir.
<tt style='background-color:#E8E8E8;'> datasets. <a href=' /datasets/utils.py#L327'>clear_data_home</a>(data_home)</tt>	Delete all the content of the data home cache.
<tt style='background-color:#E8E8E8;'> datasets. <a href=' /datasets/utils.py#L332'>check_internet</a>(url)</tt>	Check if internet is available.
<tt style='background-color:#E8E8E8;'> datasets.co2. <a href=' /datasets/co2/data.py#L47'>load</a>()</tt>	Load the data and return a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.elnino. <a href=' /datasets/elnino/data.py#L44'>load</a>()</tt>	Load the el nino data and return a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.cancer. <a href=' /datasets/cancer/data.py#L33'>load</a>()</tt>	Load the data and return a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.copper. <a href=' /datasets/copper/data.py#L46'>load</a>()</tt>	Load the copper data and returns a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.copper. <a href=' /datasets/copper/data.py#L65'>load_pandas</a>()</tt>	Load the copper data and returns a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.fertility. <a href=' /datasets/fertility/data.py#L57'>load</a>()</tt>	Load the data and return a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.strikes. <a href=' /datasets/strikes/data.py#L43'>load</a>()</tt>	Load the strikes data and return a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.strikes. <a href=' /datasets/strikes/data.py#L55'>load_pandas</a>()</tt>	Load the strikes data and return a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.ccard. <a href=' /datasets/ccard/data.py#L33'>load</a>()</tt>	Load the credit card data and returns a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.ccard. <a href=' /datasets/ccard/data.py#L44'>load_pandas</a>()</tt>	Load the credit card data and returns a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.stackloss. <a href=' /datasets/stackloss/data.py#L37'>load</a>()</tt>	Load the stack loss data and returns a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.stackloss. <a href=' /datasets/stackloss/data.py#L49'>load_pandas</a>()</tt>	Load the stack loss data and returns a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.macrodata. <a href=' /datasets/macrodata/data.py#L62'>load</a>()</tt>	Load the us macro data and return a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.grunfeld. <a href=' /datasets/grunfeld/data.py#L46'>load</a>()</tt>	Loads the grunfeld data and returns a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.grunfeld. <a href=' /datasets/grunfeld/data.py#L67'>load_pandas</a>()</tt>	Loads the grunfeld data and returns a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.star98. <a href=' /datasets/star98/data.py#L71'>load</a>()</tt>	Load the star98 data and returns a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.modechoice. <a href=' /datasets/modechoice/data.py#L59'>load</a>()</tt>	Load the data modechoice data and return a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.modechoice. <a href=' /datasets/modechoice/data.py#L72'>load_pandas</a>()</tt>	Load the data modechoice data and return a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.spector. <a href=' /datasets/spector/data.py#L39'>load</a>()</tt>	Load the spector dataset and returns a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.spector. <a href=' /datasets/spector/data.py#L51'>load_pandas</a>()</tt>	Load the spector dataset and returns a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.nile. <a href=' /datasets/nile/data.py#L36'>load</a>()</tt>	Load the nile data and return a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.longley. <a href=' /datasets/longley/data.py#L46'>load</a>()</tt>	Load the longley data and return a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.longley. <a href=' /datasets/longley/data.py#L58'>load_pandas</a>()</tt>	Load the longley data and return a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.cpunish. <a href=' /datasets/cpunish/data.py#L49'>load</a>()</tt>	Load the cpunish data and return a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.cpunish. <a href=' /datasets/cpunish/data.py#L61'>load_pandas</a>()</tt>	Load the cpunish data and return a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.committee. <a href=' /datasets/committee/data.py#L52'>load</a>()</tt>	Load the committee data and returns a data class.
<tt style='background-color:#E8E8E8;'> datasets.heart. <a href=' /datasets/heart/data.py#L34'>load</a>()</tt>	Load the data and return a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.statecrime. <a href=' /datasets/statecrime/data.py#L60'>load</a>()</tt>	Load the statecrime data and return a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.scotland. <a href=' /datasets/scotland/data.py#L58'>load</a>()</tt>	Load the scotvote data and returns a dataset instance.
<tt style='background-color:#E8E8E8;'> datasets.scotland. <a href=' /datasets/scotland/data.py#L70'>load_pandas</a>()</tt>	Load the scotvote data and returns a dataset instance.
<tt style='background-color:#E8E8E8;'> datasets.anes96. <a href=' /datasets/anes96/data.py#L93'>load</a>()</tt>	Load the anes96 data and returns a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.anes96. <a href=' /datasets/anes96/data.py#L106'>load_pandas</a>()</tt>	Load the anes96 data and returns a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.fair. <a href=' /datasets/fair/data.py#L57'>load</a>()</tt>	Load the data and return a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.engel. <a href=' /datasets/engel/data.py#L38'>load</a>()</tt>	Load the data and return a dataset class instance.
<tt style='background-color:#E8E8E8;'> datasets.china_smoking. <a href=' /datasets/china_smoking/data.py#L34'>load_pandas</a>()</tt>	Load the china smoking/lung cancer data and return a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.china_smoking. <a href=' /datasets/china_smoking/data.py#L49'>load</a>()</tt>	Load the china smoking/lung cancer data and return a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.sunspots. <a href=' /datasets/sunspots/data.py#L36'>load</a>()</tt>	Load the yearly sunspot data and returns a data class.
<tt style='background-color:#E8E8E8;'> datasets.randhie. <a href=' /datasets/randhie/data.py#L54'>load</a>()</tt>	Loads the rand hie data and returns a dataset class.
<tt style='background-color:#E8E8E8;'> datasets.randhie. <a href=' /datasets/randhie/data.py#L69'>load_pandas</a>()</tt>	Loads the rand hie data and returns a dataset class.
<tt style='background-color:#E8E8E8;'> discrete. <a href=' /discrete/discrete_margins.py#L12'>_check_margeff_args</a>(at,method)</tt>	Checks valid options for margeff.
<tt style='background-color:#E8E8E8;'> discrete. <a href=' /discrete/discrete_margins.py#L21'>_check_discrete_args</a>(at,method)</tt>	Checks the arguments for margeff if the exogenous variables are discrete.
<tt style='background-color:#E8E8E8;'> discrete. <a href=' /discrete/discrete_margins.py#L30'>_get_const_index</a>(exog)</tt>	Returns a boolean array of non-constant column indices in exog and.
<tt style='background-color:#E8E8E8;'> discrete. <a href=' /discrete/discrete_margins.py#L42'>_isdummy</a>(X)</tt>	Given an array x returns the column indices for the dummy variables.
<tt style='background-color:#E8E8E8;'> discrete. <a href=' /discrete/discrete_margins.py#L81'>_iscount</a>(X)</tt>	Given an array x returns the column indices for count variables.
<tt style='background-color:#E8E8E8;'> discrete. <a href=' /discrete/discrete_margins.py#L146'>_get_count_effects</a>(effects,exog,count_ind,method)</tt>	If there's a count variable the predicted difference is taken by.
<tt style='background-color:#E8E8E8;'> discrete. <a href=' /discrete/discrete_margins.py#L166'>_get_dummy_effects</a>(effects,exog,dummy_ind,method)</tt>	If there's a dummy variable the predicted difference is taken at.
<tt style='background-color:#E8E8E8;'> discrete. <a href=' /discrete/discrete_margins.py#L194'>_margeff_cov_params_dummy</a>(model,cov_margins,params,exog)</tt>	Returns the jacobian for discrete regressors for use in margeff_cov_params.
<tt style='background-color:#E8E8E8;'> discrete. <a href=' /discrete/discrete_margins.py#L226'>_margeff_cov_params_count</a>(model,cov_margins,params,exog)</tt>	Returns the jacobian for discrete regressors for use in margeff_cov_params.
<tt style='background-color:#E8E8E8;'> discrete. <a href=' /discrete/discrete_margins.py#L257'>margeff_cov_params</a>(model,params,exog,cov_params)</tt>	Computes the variance-covariance of marginal effects by the delta method.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteMargins <a href=' /discrete/discrete_margins.py#L435'>summary_frame</a>(alpha)</tt>	Returns a dataframe summarizing the marginal effects.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteMargins <a href=' /discrete/discrete_margins.py#L492'>conf_int</a>(alpha)</tt>	Returns the confidence intervals of the marginal effects parameters.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteMargins <a href=' /discrete/discrete_margins.py#L515'>summary</a>(alpha)</tt>	Returns a summary table for marginal effects parameters.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteMargins <a href=' /discrete/discrete_margins.py#L596'>get_margeff</a>(at,method,atexog,dummy)</tt>	Get marginal effects of the fitted model.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteModel <a href=' /discrete/discrete_model.py#L158'>initialize</a>()</tt>	Initialize is called by statsmodels.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteModel <a href=' /discrete/discrete_model.py#L169'>cdf</a>(X)</tt>	The cumulative distribution function of the model.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteModel <a href=' /discrete/discrete_model.py#L175'>pdf</a>(X)</tt>	The probability density mass function of the model.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteModel <a href=' /discrete/discrete_model.py#L189'>fit</a>(start_params,method,maxiter,full_output)</tt>	Fit the model using maximum likelihood.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteModel <a href=' /discrete/discrete_model.py#L210'>fit_regularized</a>(start_params,method,maxiter,full_output)</tt>	Fit the model using a regularized maximum likelihood.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteModel <a href=' /discrete/discrete_model.py#L361'>cov_params_func_l1</a>(likelihood_model,xopt,retvals)</tt>	Computes cov_params on a reduced parameter space corresponding to the nonzero parameters resulting from the.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteModel <a href=' /discrete/discrete_model.py#L386'>predict</a>(params,exog,linear)</tt>	Predict response variable of a model given exogenous variables.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteModel <a href=' /discrete/discrete_model.py#L392'>_derivative_exog</a>(params,exog,dummy_idx,count_idx)</tt>	This should implement the derivative of the non-linear function.
<tt style='background-color:#E8E8E8;'> discrete.BinaryModel <a href=' /discrete/discrete_model.py#L408'>predict</a>(params,exog,linear)</tt>	Predict response variable of a model given exogenous variables.
<tt style='background-color:#E8E8E8;'> discrete.BinaryModel <a href=' /discrete/discrete_model.py#L452'>_derivative_predict</a>(params,exog,transform)</tt>	For computing marginal effects standard errors.
<tt style='background-color:#E8E8E8;'> discrete.BinaryModel <a href=' /discrete/discrete_model.py#L470'>_derivative_exog</a>(params,exog,transform,dummy_idx)</tt>	For computing marginal effects returns df xb / dx where f is.
<tt style='background-color:#E8E8E8;'> discrete.MultinomialModel <a href=' /discrete/discrete_model.py#L533'>initialize</a>()</tt>	Preprocesses the data for mnlogit.
<tt style='background-color:#E8E8E8;'> discrete.MultinomialModel <a href=' /discrete/discrete_model.py#L545'>predict</a>(params,exog,linear)</tt>	Predict response variable of a model given exogenous variables.
<tt style='background-color:#E8E8E8;'> discrete.MultinomialModel <a href=' /discrete/discrete_model.py#L613'>_derivative_predict</a>(params,exog,transform)</tt>	For computing marginal effects standard errors.
<tt style='background-color:#E8E8E8;'> discrete.MultinomialModel <a href=' /discrete/discrete_model.py#L654'>_derivative_exog</a>(params,exog,transform,dummy_idx)</tt>	For computing marginal effects returns df xb / dx where f is.
<tt style='background-color:#E8E8E8;'> discrete.CountModel <a href=' /discrete/discrete_model.py#L737'>predict</a>(params,exog,exposure,offset)</tt>	Predict response variable of a count model given exogenous variables.
<tt style='background-color:#E8E8E8;'> discrete.CountModel <a href=' /discrete/discrete_model.py#L766'>_derivative_predict</a>(params,exog,transform)</tt>	For computing marginal effects standard errors.
<tt style='background-color:#E8E8E8;'> discrete.CountModel <a href=' /discrete/discrete_model.py#L785'>_derivative_exog</a>(params,exog,transform,dummy_idx)</tt>	For computing marginal effects these are the marginal effects.
<tt style='background-color:#E8E8E8;'> discrete.Poisson <a href=' /discrete/discrete_model.py#L875'>cdf</a>(X)</tt>	Poisson model cumulative distribution function parameters.
<tt style='background-color:#E8E8E8;'> discrete.Poisson <a href=' /discrete/discrete_model.py#L903'>pdf</a>(X)</tt>	Poisson model probability mass function parameters.
<tt style='background-color:#E8E8E8;'> discrete.Poisson <a href=' /discrete/discrete_model.py#L933'>loglike</a>(params)</tt>	Loglikelihood of poisson model parameters.
<tt style='background-color:#E8E8E8;'> discrete.Poisson <a href=' /discrete/discrete_model.py#L958'>loglikeobs</a>(params)</tt>	Loglikelihood for observations of poisson model parameters.
<tt style='background-color:#E8E8E8;'> discrete.Poisson <a href=' /discrete/discrete_model.py#L1021'>fit_constrained</a>(constraints,start_params)</tt>	Fit the model subject to linear equality constraints the constraints are of the form r params = q.
<tt style='background-color:#E8E8E8;'> discrete.Poisson <a href=' /discrete/discrete_model.py#L1086'>score</a>(params)</tt>	Poisson model score gradient vector of the log-likelihood parameters.
<tt style='background-color:#E8E8E8;'> discrete.Poisson <a href=' /discrete/discrete_model.py#L1115'>score_obs</a>(params)</tt>	Poisson model jacobian of the log-likelihood for each observation parameters.
<tt style='background-color:#E8E8E8;'> discrete.Poisson <a href=' /discrete/discrete_model.py#L1145'>hessian</a>(params)</tt>	Poisson model hessian matrix of the loglikelihood parameters.
<tt style='background-color:#E8E8E8;'> discrete.Logit <a href=' /discrete/discrete_model.py#L1191'>cdf</a>(X)</tt>	The logistic cumulative distribution function parameters.
<tt style='background-color:#E8E8E8;'> discrete.Logit <a href=' /discrete/discrete_model.py#L1213'>pdf</a>(X)</tt>	The logistic probability density function parameters.
<tt style='background-color:#E8E8E8;'> discrete.Logit <a href=' /discrete/discrete_model.py#L1237'>loglike</a>(params)</tt>	Log-likelihood of logit model.
<tt style='background-color:#E8E8E8;'> discrete.Logit <a href=' /discrete/discrete_model.py#L1263'>loglikeobs</a>(params)</tt>	Log-likelihood of logit model for each observation.
<tt style='background-color:#E8E8E8;'> discrete.Logit <a href=' /discrete/discrete_model.py#L1291'>score</a>(params)</tt>	Logit model score gradient vector of the log-likelihood parameters.
<tt style='background-color:#E8E8E8;'> discrete.Logit <a href=' /discrete/discrete_model.py#L1316'>score_obs</a>(params)</tt>	Logit model jacobian of the log-likelihood for each observation parameters.
<tt style='background-color:#E8E8E8;'> discrete.Logit <a href=' /discrete/discrete_model.py#L1344'>hessian</a>(params)</tt>	Logit model hessian matrix of the log-likelihood parameters.
<tt style='background-color:#E8E8E8;'> discrete.Probit <a href=' /discrete/discrete_model.py#L1393'>cdf</a>(X)</tt>	Probit normal cumulative distribution function parameters.
<tt style='background-color:#E8E8E8;'> discrete.Probit <a href=' /discrete/discrete_model.py#L1413'>pdf</a>(X)</tt>	Probit normal probability density function parameters.
<tt style='background-color:#E8E8E8;'> discrete.Probit <a href=' /discrete/discrete_model.py#L1436'>loglike</a>(params)</tt>	Log-likelihood of probit model (i e the normal distribution).
<tt style='background-color:#E8E8E8;'> discrete.Probit <a href=' /discrete/discrete_model.py#L1464'>loglikeobs</a>(params)</tt>	Log-likelihood of probit model for each observation parameters.
<tt style='background-color:#E8E8E8;'> discrete.Probit <a href=' /discrete/discrete_model.py#L1494'>score</a>(params)</tt>	Probit model score gradient vector parameters.
<tt style='background-color:#E8E8E8;'> discrete.Probit <a href=' /discrete/discrete_model.py#L1524'>score_obs</a>(params)</tt>	Probit model jacobian for each observation parameters.
<tt style='background-color:#E8E8E8;'> discrete.Probit <a href=' /discrete/discrete_model.py#L1556'>hessian</a>(params)</tt>	Probit model hessian matrix of the log-likelihood parameters.
<tt style='background-color:#E8E8E8;'> discrete.MNLogit <a href=' /discrete/discrete_model.py#L1645'>cdf</a>(X)</tt>	Multinomial logit cumulative distribution function.
<tt style='background-color:#E8E8E8;'> discrete.MNLogit <a href=' /discrete/discrete_model.py#L1667'>loglike</a>(params)</tt>	Log-likelihood of the multinomial logit model.
<tt style='background-color:#E8E8E8;'> discrete.MNLogit <a href=' /discrete/discrete_model.py#L1694'>loglikeobs</a>(params)</tt>	Log-likelihood of the multinomial logit model for each observation.
<tt style='background-color:#E8E8E8;'> discrete.MNLogit <a href=' /discrete/discrete_model.py#L1723'>score</a>(params)</tt>	Score matrix for multinomial logit model log-likelihood parameters.
<tt style='background-color:#E8E8E8;'> discrete.MNLogit <a href=' /discrete/discrete_model.py#L1754'>loglike_and_score</a>(params)</tt>	Returns log likelihood and score efficiently reusing calculations.
<tt style='background-color:#E8E8E8;'> discrete.MNLogit <a href=' /discrete/discrete_model.py#L1769'>score_obs</a>(params)</tt>	Jacobian matrix for multinomial logit model log-likelihood parameters.
<tt style='background-color:#E8E8E8;'> discrete.MNLogit <a href=' /discrete/discrete_model.py#L1800'>hessian</a>(params)</tt>	Multinomial logit hessian matrix of the log-likelihood parameters.
<tt style='background-color:#E8E8E8;'> discrete.NegativeBinomial <a href=' /discrete/discrete_model.py#L2022'>loglike</a>(params)</tt>	Loglikelihood for negative binomial model parameters.
<tt style='background-color:#E8E8E8;'> discrete.NegativeBinomial <a href=' /discrete/discrete_model.py#L2066'>_score_nbin</a>(params,Q)</tt>	Score vector for nb2 model.
<tt style='background-color:#E8E8E8;'> discrete.NegativeBinomial <a href=' /discrete/discrete_model.py#L2126'>_hessian_nb1</a>(params)</tt>	Hessian of nb1 model.
<tt style='background-color:#E8E8E8;'> discrete.NegativeBinomial <a href=' /discrete/discrete_model.py#L2192'>_hessian_nb2</a>(params)</tt>	Hessian of nb2 model.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteResults <a href=' /discrete/discrete_model.py#L2425'>get_margeff</a>(at,method,atexog,dummy)</tt>	Get marginal effects of the fitted model.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteResults <a href=' /discrete/discrete_model.py#L2491'>summary</a>(yname,xname,title,alpha)</tt>	Summarize the regression results parameters.
<tt style='background-color:#E8E8E8;'> discrete.DiscreteResults <a href=' /discrete/discrete_model.py#L2562'>summary2</a>(yname,xname,title,alpha)</tt>	Experimental function to summarize regression results parameters.
<tt style='background-color:#E8E8E8;'> discrete.PoissonResults <a href=' /discrete/discrete_model.py#L2676'>predict_prob</a>(n,exog,exposure,offset)</tt>	Return predicted probability of each count level for each observation parameters.
<tt style='background-color:#E8E8E8;'> discrete.BinaryResults <a href=' /discrete/discrete_model.py#L2718'>pred_table</a>(threshold)</tt>	Prediction table parameters.
<tt style='background-color:#E8E8E8;'> discrete.BinaryResults <a href=' /discrete/discrete_model.py#L2770'>resid_dev</a>()</tt>	Deviance residuals notes.
<tt style='background-color:#E8E8E8;'> discrete.BinaryResults <a href=' /discrete/discrete_model.py#L2803'>resid_pearson</a>()</tt>	Pearson residuals notes.
<tt style='background-color:#E8E8E8;'> discrete.BinaryResults <a href=' /discrete/discrete_model.py#L2830'>resid_response</a>()</tt>	The response residuals notes.
<tt style='background-color:#E8E8E8;'> discrete.LogitResults <a href=' /discrete/discrete_model.py#L2849'>resid_generalized</a>()</tt>	Generalized residuals notes.
<tt style='background-color:#E8E8E8;'> discrete.ProbitResults <a href=' /discrete/discrete_model.py#L2870'>resid_generalized</a>()</tt>	Generalized residuals notes.
<tt style='background-color:#E8E8E8;'> discrete.MultinomialResults <a href=' /discrete/discrete_model.py#L2918'>_get_endog_name</a>(yname,yname_list,all)</tt>	If all is false the first variable name is dropped.
<tt style='background-color:#E8E8E8;'> discrete.MultinomialResults <a href=' /discrete/discrete_model.py#L2937'>pred_table</a>()</tt>	Returns the j x j prediction table.
<tt style='background-color:#E8E8E8;'> discrete.MultinomialResults <a href=' /discrete/discrete_model.py#L2974'>resid_misclassified</a>()</tt>	Residuals indicating which observations are misclassified.
<tt style='background-color:#E8E8E8;'> discrete.MultinomialResults <a href=' /discrete/discrete_model.py#L2996'>summary2</a>(alpha,float_format)</tt>	Experimental function to summarize regression results parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moment_helpers.py#L22'>mc2mnc</a>(mc)</tt>	Convert central to non-central moments uses recursive formula.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moment_helpers.py#L41'>mnc2mc</a>(mnc,wmean)</tt>	Convert non-central to central moments uses recursive formula.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moment_helpers.py#L60'>cum2mc</a>(kappa)</tt>	Convert non-central moments to cumulants recursive formula produces as many cumulants as moments.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moment_helpers.py#L84'>mnc2cum</a>(mnc)</tt>	Convert non-central moments to cumulants recursive formula produces as many cumulants as moments.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moment_helpers.py#L101'>mc2cum</a>(mc)</tt>	Just chained because i have still the test case.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moment_helpers.py#L107'>mvsk2mc</a>(args)</tt>	Convert mean variance skew kurtosis to central moments.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moment_helpers.py#L119'>mvsk2mnc</a>(args)</tt>	Convert mean variance skew kurtosis to non-central moments.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moment_helpers.py#L131'>mc2mvsk</a>(args)</tt>	Convert central moments to mean variance skew kurtosis.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moment_helpers.py#L140'>mnc2mvsk</a>(args)</tt>	Convert central moments to mean variance skew kurtosis.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moment_helpers.py#L166'>cov2corr</a>(cov,return_std)</tt>	Convert covariance matrix to correlation matrix parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moment_helpers.py#L196'>corr2cov</a>(corr,std)</tt>	Convert correlation matrix to covariance matrix given standard deviation parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moment_helpers.py#L223'>se_cov</a>(cov)</tt>	Get standard deviation from covariance matrix just a shorthand function np.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/_lilliefors.py#L24'>ksstat</a>(x,cdf,alternative,args)</tt>	Calculate statistic for the kolmogorov-smirnov test for goodness of fit this calculates the test statistic for a test of the distribution g x of an observed.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/_lilliefors.py#L137'>pval_lf</a>(Dmax,n)</tt>	Approximate pvalues for lilliefors test of normality this is only valid for pvalues smaller than 0.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/_lilliefors.py#L181'>kstest_normal</a>(x,pvalmethod)</tt>	Lilliefors test for normality kolmogorov smirnov test with estimated mean and variance.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/multicomp.py#L10'>pairwise_tukeyhsd</a>(endog,groups,alpha)</tt>	Calculate all pairwise comparisons with tukeyhsd confidence intervals this is just a wrapper around tukeyhsd method of multicomparison.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/anova.py#L28'>anova_single</a>(model)</tt>	Anova table for one fitted linear model.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/anova.py#L87'>anova1_lm_single</a>(model,endog,exog,nobs)</tt>	Anova table for one fitted linear model.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/anova.py#L144'>anova2_lm_single</a>(model,design_info,n_rows,test)</tt>	Anova type ii table for one fitted linear model.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/anova.py#L271'>anova_lm</a>()</tt>	Anova table for one or more fitted linear models.
<tt style='background-color:#E8E8E8;'> stats.ContrastResults <a href=' /stats/contrast.py#L65'>conf_int</a>(alpha)</tt>	Returns the confidence interval of the value effect of the constraint.
<tt style='background-color:#E8E8E8;'> stats.ContrastResults <a href=' /stats/contrast.py#L108'>summary</a>(xname,alpha,title)</tt>	Summarize the results of the hypothesis test parameters.
<tt style='background-color:#E8E8E8;'> stats.ContrastResults <a href=' /stats/contrast.py#L163'>summary_frame</a>(xname,alpha)</tt>	Return the parameter table as a pandas dataframe.
<tt style='background-color:#E8E8E8;'> stats.Contrast <a href=' /stats/contrast.py#L253'>_get_matrix</a>()</tt>	Gets the contrast_matrix property.
<tt style='background-color:#E8E8E8;'> stats.Contrast <a href=' /stats/contrast.py#L267'>compute_matrix</a>()</tt>	Construct a contrast matrix c so that colspan(dot d c = colspan(dot(d dot(pinv d t))).
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/contrast.py#L289'>contrastfromcols</a>(L,D,pseudo)</tt>	From an n x p design matrix d and a matrix l tries to determine a p x q contrast matrix c which.
<tt style='background-color:#E8E8E8;'> stats.WaldTestResults <a href=' /stats/contrast.py#L386'>col_names</a>()</tt>	Column names for summary table.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/contingency_tables.py#L38'>_make_df_square</a>(table)</tt>	Reindex a pandas dataframe so that it becomes square meaning that the row and column indices contain the same values in the same.
<tt style='background-color:#E8E8E8;'> stats.Table <a href=' /stats/contingency_tables.py#L142'>from_data</a>(cls,data,shift_zeros)</tt>	Construct a table object from data.
<tt style='background-color:#E8E8E8;'> stats.Table <a href=' /stats/contingency_tables.py#L169'>test_nominal_association</a>()</tt>	Assess independence for nominal factors.
<tt style='background-color:#E8E8E8;'> stats.Table <a href=' /stats/contingency_tables.py#L199'>test_ordinal_association</a>(row_scores,col_scores)</tt>	Assess independence between two ordinal variables.
<tt style='background-color:#E8E8E8;'> stats.SquareTable <a href=' /stats/contingency_tables.py#L432'>symmetry</a>(method)</tt>	Test for symmetry of a joint distribution.
<tt style='background-color:#E8E8E8;'> stats.SquareTable <a href=' /stats/contingency_tables.py#L493'>homogeneity</a>(method)</tt>	Compare row and column marginal distributions.
<tt style='background-color:#E8E8E8;'> stats.SquareTable <a href=' /stats/contingency_tables.py#L582'>summary</a>(alpha,float_format)</tt>	Produce a summary of the analysis.
<tt style='background-color:#E8E8E8;'> stats.Table2x2 <a href=' /stats/contingency_tables.py#L663'>from_data</a>(cls,data,shift_zeros)</tt>	Construct a table object from data.
<tt style='background-color:#E8E8E8;'> stats.Table2x2 <a href=' /stats/contingency_tables.py#L707'>oddsratio_pvalue</a>(null)</tt>	P-value for a hypothesis test about the odds ratio.
<tt style='background-color:#E8E8E8;'> stats.Table2x2 <a href=' /stats/contingency_tables.py#L720'>log_oddsratio_pvalue</a>(null)</tt>	P-value for a hypothesis test about the log odds ratio.
<tt style='background-color:#E8E8E8;'> stats.Table2x2 <a href=' /stats/contingency_tables.py#L735'>log_oddsratio_confint</a>(alpha,method)</tt>	A confidence level for the log odds ratio.
<tt style='background-color:#E8E8E8;'> stats.Table2x2 <a href=' /stats/contingency_tables.py#L757'>oddsratio_confint</a>(alpha,method)</tt>	A confidence interval for the odds ratio.
<tt style='background-color:#E8E8E8;'> stats.Table2x2 <a href=' /stats/contingency_tables.py#L799'>riskratio_pvalue</a>(null)</tt>	P-value for a hypothesis test about the risk ratio.
<tt style='background-color:#E8E8E8;'> stats.Table2x2 <a href=' /stats/contingency_tables.py#L812'>log_riskratio_pvalue</a>(null)</tt>	P-value for a hypothesis test about the log risk ratio.
<tt style='background-color:#E8E8E8;'> stats.Table2x2 <a href=' /stats/contingency_tables.py#L827'>log_riskratio_confint</a>(alpha,method)</tt>	A confidence interval for the log risk ratio.
<tt style='background-color:#E8E8E8;'> stats.Table2x2 <a href=' /stats/contingency_tables.py#L848'>riskratio_confint</a>(alpha,method)</tt>	A confidence interval for the risk ratio.
<tt style='background-color:#E8E8E8;'> stats.Table2x2 <a href=' /stats/contingency_tables.py#L865'>summary</a>(alpha,float_format,method)</tt>	Summarizes results for a 2x2 table analysis.
<tt style='background-color:#E8E8E8;'> stats.StratifiedTable <a href=' /stats/contingency_tables.py#L981'>from_data</a>(cls,var1,var2,strata)</tt>	Construct a stratifiedtable object from data.
<tt style='background-color:#E8E8E8;'> stats.StratifiedTable <a href=' /stats/contingency_tables.py#L1025'>test_null_odds</a>(correction)</tt>	Test that all tables have odds ratio equal to 1.
<tt style='background-color:#E8E8E8;'> stats.StratifiedTable <a href=' /stats/contingency_tables.py#L1106'>logodds_pooled_confint</a>(alpha,method)</tt>	A confidence interval for the pooled log odds ratio.
<tt style='background-color:#E8E8E8;'> stats.StratifiedTable <a href=' /stats/contingency_tables.py#L1138'>oddsratio_pooled_confint</a>(alpha,method)</tt>	A confidence interval for the pooled odds ratio.
<tt style='background-color:#E8E8E8;'> stats.StratifiedTable <a href=' /stats/contingency_tables.py#L1165'>test_equal_odds</a>(adjust)</tt>	Test that all odds ratios are identical.
<tt style='background-color:#E8E8E8;'> stats.StratifiedTable <a href=' /stats/contingency_tables.py#L1218'>summary</a>(alpha,float_format,method)</tt>	A summary of all the main results.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/contingency_tables.py#L1273'>mcnemar</a>(table,exact,correction)</tt>	Mcnemar test of homogeneity.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/contingency_tables.py#L1330'>cochrans_q</a>(x,return_object)</tt>	Cochran's q test for identical binomial proportions.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L162'>_HCCM</a>(results,scale)</tt>	Sandwich with pinv x * diag scale * pinv x t.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L173'>cov_hc0</a>(results)</tt>	See statsmodels regressionresults.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L183'>cov_hc1</a>(results)</tt>	See statsmodels regressionresults.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L192'>cov_hc2</a>(results)</tt>	See statsmodels regressionresults.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L205'>cov_hc3</a>(results)</tt>	See statsmodels regressionresults.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L220'>_get_sandwich_arrays</a>(results,cov_type)</tt>	Helper function to get scores from results.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L263'>_HCCM1</a>(results,scale)</tt>	Sandwich with pinv x * scale * pinv x t.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L291'>_HCCM2</a>(hessian_inv,scale)</tt>	Sandwich with (x'x)^ -1 * scale * (x'x)^ -1 scale is kvars kvars.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L319'>weights_bartlett</a>(nlags)</tt>	Bartlett weights for hac.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L339'>weights_uniform</a>(nlags)</tt>	Uniform weights for hac.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L359'>S_hac_simple</a>(x,nlags,weights_func)</tt>	Inner covariance matrix for hac newey west sandwich assumes we have a single time series with zero axis consecutive equal.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L406'>S_white_simple</a>(x)</tt>	Inner covariance matrix for white heteroscedastistity sandwich parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L432'>group_sums</a>(x,group)</tt>	Sum x for each group simple bincount version again.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L455'>S_hac_groupsum</a>(x,time,nlags,weights_func)</tt>	Inner covariance matrix for hac over group sums sandwich this assumes we have complete equal spaced time periods.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L497'>S_crosssection</a>(x,group)</tt>	Inner covariance matrix for white on group sums sandwich.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L511'>cov_crosssection_0</a>(results,group)</tt>	This one is still wrong use cov_cluster instead.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L520'>cov_cluster</a>(results,group,use_correction)</tt>	Cluster robust covariance matrix calculates sandwich covariance matrix for a single cluster i.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L565'>cov_cluster_2groups</a>(results,group,group2,use_correction)</tt>	Cluster robust covariance matrix for two groups/clusters parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L623'>cov_white_simple</a>(results,use_correction)</tt>	Heteroscedasticity robust covariance matrix white parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L663'>cov_hac_simple</a>(results,nlags,weights_func,use_correction)</tt>	Heteroscedasticity and autocorrelation robust covariance matrix newey-west assumes we have a single time series with zero axis consecutive equal.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L717'>lagged_groups</a>(x,lag,groupidx)</tt>	Assumes sorted by time groupidx is tuple of start and end values.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L736'>S_nw_panel</a>(xw,weights,groupidx)</tt>	Inner covariance matrix for hac for panel data.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L753'>cov_nw_panel</a>(results,nlags,groupidx,weights_func)</tt>	Panel hac robust covariance matrix assumes we have a panel of time series with consecutive equal spaced time.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/sandwich_covariance.py#L823'>cov_nw_groupsum</a>(results,nlags,time,weights_func)</tt>	Driscoll and kraay panel robust covariance matrix robust covariance matrix for panel data of driscoll and kraay.
<tt style='background-color:#E8E8E8;'> stats.Mediation <a href=' /stats/mediation.py#L184'>_simulate_params</a>(result)</tt>	Simulate model parameters from fitted sampling distribution.
<tt style='background-color:#E8E8E8;'> stats.Mediation <a href=' /stats/mediation.py#L193'>_get_mediator_exog</a>(exposure)</tt>	Return the mediator exog matrix with exposure set to the given value.
<tt style='background-color:#E8E8E8;'> stats.Mediation <a href=' /stats/mediation.py#L219'>_get_outcome_exog</a>(exposure,mediator)</tt>	Retun the exog design matrix with mediator and exposure set to the given values.
<tt style='background-color:#E8E8E8;'> stats.Mediation <a href=' /stats/mediation.py#L261'>fit</a>(method,n_rep)</tt>	Fit a regression model to assess mediation.
<tt style='background-color:#E8E8E8;'> stats.MediationResults <a href=' /stats/mediation.py#L372'>summary</a>(alpha)</tt>	Provide a summary of a mediation analysis.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/stattools.py#L15'>durbin_watson</a>(resids,axis)</tt>	Calculates the durbin-watson statistic parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/stattools.py#L51'>omni_normtest</a>(resids,axis)</tt>	Omnibus test for normality.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/stattools.py#L78'>jarque_bera</a>(resids,axis)</tt>	Calculates the jarque-bera test for normality parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/stattools.py#L131'>robust_skewness</a>(y,axis)</tt>	Calculates the four skewness measures in kim & white parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/stattools.py#L207'>_kr3</a>(y,alpha,beta)</tt>	Kr3 estimator from kim & white parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/stattools.py#L242'>expected_robust_kurtosis</a>(ab,dg)</tt>	Calculates the expected value of the robust kurtosis measures in kim and white assuming the data are normally distributed.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/stattools.py#L287'>robust_kurtosis</a>(y,axis,ab,dg)</tt>	Calculates the four kurtosis measures in kim & white parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/stattools.py#L374'>_medcouple_1d</a>(y)</tt>	Calculates the medcouple robust measure of skew.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/stattools.py#L422'>medcouple</a>(y,axis)</tt>	Calculates the medcouple robust measure of skew.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/multivariate_tools.py#L21'>partial_project</a>(endog,exog)</tt>	Helper function to get linear projection or partialling out of variables endog variables are projected on exog variables.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/multivariate_tools.py#L60'>cancorr</a>(x1,x2,demean,standardize)</tt>	Canonical correlation coefficient beween 2 arrays parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/multivariate_tools.py#L115'>cc_ranktest</a>(x1,x2,demean,fullrank)</tt>	Rank tests based on smallest canonical correlation coefficients anderson canonical correlations test lm test and.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/multivariate_tools.py#L184'>cc_stats</a>(x1,x2,demean)</tt>	Manova statistics based on canonical correlation coefficient calculates pillai's trace wilk's lambda hotelling's trace and.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/power.py#L39'>ttest_power</a>(effect_size,nobs,alpha,df)</tt>	Calculate power of a ttest.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/power.py#L73'>normal_power</a>(effect_size,nobs,alpha,alternative)</tt>	Calculate power of a normal distributed test statistic.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/power.py#L96'>ftest_anova_power</a>(effect_size,nobs,alpha,k_groups)</tt>	Power for ftest for one way anova with k equal sized groups.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/power.py#L109'>ftest_power</a>(effect_size,df_num,df_denom,alpha)</tt>	Calculate the power of a f-test.
<tt style='background-color:#E8E8E8;'> stats.Power <a href=' /stats/power.py#L190'>solve_power</a>()</tt>	Solve for any one of the parameters of a t-test for t-test the keywords are.
<tt style='background-color:#E8E8E8;'> stats.Power <a href=' /stats/power.py#L287'>plot_power</a>(dep_var,nobs,effect_size,alpha)</tt>	Plot power with number of observations or effect size on x-axis parameters.
<tt style='background-color:#E8E8E8;'> stats.TTestPower <a href=' /stats/power.py#L382'>power</a>(effect_size,nobs,alpha,df)</tt>	Calculate the power of a t-test for one sample or paired samples.
<tt style='background-color:#E8E8E8;'> stats.TTestPower <a href=' /stats/power.py#L418'>solve_power</a>(effect_size,nobs,alpha,power)</tt>	Solve for any one parameter of the power of a one sample t-test for the one sample t-test the keywords are.
<tt style='background-color:#E8E8E8;'> stats.TTestIndPower <a href=' /stats/power.py#L491'>power</a>(effect_size,nobs1,alpha,ratio)</tt>	Calculate the power of a t-test for two independent sample parameters.
<tt style='background-color:#E8E8E8;'> stats.TTestIndPower <a href=' /stats/power.py#L539'>solve_power</a>(effect_size,nobs1,alpha,power)</tt>	Solve for any one parameter of the power of a two sample t-test for t-test the keywords are.
<tt style='background-color:#E8E8E8;'> stats.NormalIndPower <a href=' /stats/power.py#L609'>power</a>(effect_size,nobs1,alpha,ratio)</tt>	Calculate the power of a t-test for two independent sample parameters.
<tt style='background-color:#E8E8E8;'> stats.NormalIndPower <a href=' /stats/power.py#L658'>solve_power</a>(effect_size,nobs1,alpha,power)</tt>	Solve for any one parameter of the power of a two sample z-test for z-test the keywords are.
<tt style='background-color:#E8E8E8;'> stats.FTestPower <a href=' /stats/power.py#L727'>power</a>(effect_size,df_num,df_denom,alpha)</tt>	Calculate the power of a f-test.
<tt style='background-color:#E8E8E8;'> stats.FTestPower <a href=' /stats/power.py#L770'>solve_power</a>(effect_size,df_num,df_denom,nobs)</tt>	Solve for any one parameter of the power of a f-test for the one sample f-test the keywords are.
<tt style='background-color:#E8E8E8;'> stats.FTestAnovaPower <a href=' /stats/power.py#L828'>power</a>(effect_size,nobs,alpha,k_groups)</tt>	Calculate the power of a f-test for one factor anova.
<tt style='background-color:#E8E8E8;'> stats.FTestAnovaPower <a href=' /stats/power.py#L855'>solve_power</a>(effect_size,nobs,alpha,power)</tt>	Solve for any one parameter of the power of a f-test for the one sample f-test the keywords are.
<tt style='background-color:#E8E8E8;'> stats.FTestAnovaPower <a href=' /stats/power.py#L916'>_solve_effect_size</a>(effect_size,nobs,alpha,power)</tt>	Experimental test failure in solve_power for effect_size.
<tt style='background-color:#E8E8E8;'> stats.GofChisquarePower <a href=' /stats/power.py#L939'>power</a>(effect_size,nobs,alpha,n_bins)</tt>	Calculate the power of a chisquare test for one sample only two-sided alternative is implemented.
<tt style='background-color:#E8E8E8;'> stats.GofChisquarePower <a href=' /stats/power.py#L970'>solve_power</a>(effect_size,nobs,alpha,power)</tt>	Solve for any one parameter of the power of a one sample chisquare-test for the one sample chisquare-test the keywords are.
<tt style='background-color:#E8E8E8;'> stats._GofChisquareIndPower <a href=' /stats/power.py#L1032'>power</a>(effect_size,nobs1,alpha,ratio)</tt>	Calculate the power of a chisquare for two independent sample parameters.
<tt style='background-color:#E8E8E8;'> stats._GofChisquareIndPower <a href=' /stats/power.py#L1074'>solve_power</a>(effect_size,nobs1,alpha,power)</tt>	Solve for any one parameter of the power of a two sample z-test for z-test the keywords are.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/_adnorm.py#L15'>anderson_statistic</a>(x,dist,fit,params)</tt>	Calculate anderson-darling a2 statistic parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/_adnorm.py#L71'>normal_ad</a>(x,axis)</tt>	Anderson-darling test for normal distribution unknown mean and variance.
<tt style='background-color:#E8E8E8;'> stats.AllPairsResults <a href=' /stats/base.py#L59'>pval_corrected</a>(method)</tt>	P-values corrected for multiple testing problem this uses the default p-value correction of the instance stored in.
<tt style='background-color:#E8E8E8;'> stats.AllPairsResults <a href=' /stats/base.py#L75'>pval_table</a>()</tt>	Create a (n_levels n_levels) array with corrected p_values.
<tt style='background-color:#E8E8E8;'> stats.AllPairsResults <a href=' /stats/base.py#L87'>summary</a>()</tt>	Returns text summarizing the results uses the default pvalue correction of the instance stored in.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/inter_rater.py#L58'>_int_ifclose</a>(x,dec,width)</tt>	Helper function for creating result string for int or float only dec=1 and width=4 is implemented.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/inter_rater.py#L87'>aggregate_raters</a>(data,n_cat)</tt>	Convert raw data with shape subject rater to (subject cat_counts) brings data into correct format for fleiss_kappa.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/inter_rater.py#L134'>to_table</a>(data,bins)</tt>	Convert raw data with shape subject rater to rater1 rater2 brings data into correct format for cohens_kappa.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/inter_rater.py#L195'>fleiss_kappa</a>(table)</tt>	Fleiss' kappa multi-rater agreement measure parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/inter_rater.py#L237'>cohens_kappa</a>(table,weights,return_results,wt)</tt>	Compute cohen's kappa with variance and equal-zero test parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/correlation_tools.py#L26'>corr_nearest</a>(corr,threshold,n_fact)</tt>	Find the nearest correlation matrix that is positive semi-definite.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/correlation_tools.py#L93'>corr_clipped</a>(corr,threshold)</tt>	Find a near correlation matrix that is positive semi-definite this function clips the eigenvalues replacing eigenvalues smaller than.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/correlation_tools.py#L153'>cov_nearest</a>(cov,method,threshold,n_fact)</tt>	Find the nearest covariance matrix that is postive semi- definite this leaves the diagonal i.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/correlation_tools.py#L223'>_nmono_linesearch</a>(obj,grad,x,d)</tt>	Implements the non-monotone line search of grippo et al 1986.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/correlation_tools.py#L308'>_spg_optim</a>(func,grad,start,project)</tt>	Implements the spectral projected gradient method for minimizing a differentiable function on a convex domain.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/correlation_tools.py#L406'>_project_correlation_factors</a>(X)</tt>	Project a matrix into the domain of matrices whose row-wise sums of squares are less than or equal to 1.
<tt style='background-color:#E8E8E8;'> stats.FactoredPSDMatrix <a href=' /stats/correlation_tools.py#L451'>to_matrix</a>()</tt>	Returns the psd matrix represented by this instance as a full square matrix.
<tt style='background-color:#E8E8E8;'> stats.FactoredPSDMatrix <a href=' /stats/correlation_tools.py#L459'>decorrelate</a>(rhs)</tt>	Decorrelate the columns of rhs.
<tt style='background-color:#E8E8E8;'> stats.FactoredPSDMatrix <a href=' /stats/correlation_tools.py#L496'>solve</a>(rhs)</tt>	Solve a linear system of equations with factor-structured coefficients.
<tt style='background-color:#E8E8E8;'> stats.FactoredPSDMatrix <a href=' /stats/correlation_tools.py#L524'>logdet</a>()</tt>	Returns the logarithm of the determinant of a factor-structured matrix.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/correlation_tools.py#L538'>corr_nearest_factor</a>(corr,rank,ctol,lam_min)</tt>	Find the nearest correlation matrix with factor structure to a given square matrix.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/correlation_tools.py#L687'>cov_nearest_factor_homog</a>(cov,rank)</tt>	Approximate an arbitrary square matrix with a factor-structured matrix of the form k*i + xx'.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/correlation_tools.py#L767'>corr_thresholded</a>(data,minabs,max_elt)</tt>	Construct a sparse matrix containing the thresholded row-wise correlation matrix from a data array.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/gof.py#L26'>powerdiscrepancy</a>(observed,expected,lambd,axis)</tt>	Calculates power discrepancy a class of goodness-of-fit tests as a measure of discrepancy between observed and expected data.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/gof.py#L172'>gof_chisquare_discrete</a>(distfn,arg,rvs,alpha)</tt>	Perform chisquare test for random sample of a discrete distribution parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/gof.py#L243'>gof_binning_discrete</a>(rvs,distfn,arg,nsupp)</tt>	Get bins for chisquare type gof tests for a discrete distribution parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/gof.py#L337'>chisquare</a>(f_obs,f_exp,value,ddof)</tt>	Chisquare goodness-of-fit test the null hypothesis is that the distance between the expected distribution.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/gof.py#L391'>chisquare_power</a>(effect_size,nobs,n_bins,alpha)</tt>	Power of chisquare goodness of fit test effect size is sqrt of chisquare statistic divided by nobs.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/gof.py#L437'>chisquare_effectsize</a>(probs0,probs1,correction,cohen)</tt>	Effect size for a chisquare goodness-of-fit test parameters.
<tt style='background-color:#E8E8E8;'> stats.RegressionFDR <a href=' /stats/_knockoff.py#L113'>threshold</a>(tfdr)</tt>	Returns the threshold statistic for a given target fdr.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/_knockoff.py#L124'>_design_knockoff_sdp</a>(exog)</tt>	Use semidefinite programming to construct a knockoff design matrix.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/_knockoff.py#L170'>_design_knockoff_equi</a>(exog)</tt>	Construct an equivariant design matrix for knockoff analysis.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/outliers_influence.py#L20'>outlier_test</a>(model_results,method,alpha,labels)</tt>	Outlier tests for regressionresults instances.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/outliers_influence.py#L86'>reset_ramsey</a>(res,degree)</tt>	Ramsey's reset specification test for linear models this is a general specification test for additional non-linear effects.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/outliers_influence.py#L123'>variance_inflation_factor</a>(exog,exog_idx)</tt>	Variance inflation factor vif for one exogenous variable the variance inflation factor is a measure for the increase of the.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L213'>hat_matrix_diag</a>()</tt>	Cached attribute diagonal of the hat_matrix for ols.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L223'>resid_press</a>()</tt>	Cached attribute press residuals.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L230'>influence</a>()</tt>	Cached attribute influence measure.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L241'>hat_diag_factor</a>()</tt>	Cached attribute factor of diagonal of hat_matrix used in influence.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L251'>ess_press</a>()</tt>	Cached attribute error sum of squares of press residuals.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L257'>resid_studentized_internal</a>()</tt>	Cached attribute studentized residuals using variance from ols.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L267'>resid_studentized_external</a>()</tt>	Cached attribute studentized residuals using looo variance.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L278'>get_resid_studentized_external</a>(sigma)</tt>	Calculate studentized residuals parameters.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L311'>dffits_internal</a>()</tt>	Cached attribute dffits measure for influence of an observation.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L327'>dffits</a>()</tt>	Cached attribute dffits measure for influence of an observation based on resid_studentized_external.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L356'>dfbetas</a>()</tt>	Cached attribute dfbetas.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L367'>sigma2_not_obsi</a>()</tt>	Cached attribute error variance for all looo regressions this is 'mse_resid' from each auxiliary regression.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L377'>params_not_obsi</a>()</tt>	Cached attribute parameter estimates for all looo regressions.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L385'>det_cov_params_not_obsi</a>()</tt>	Cached attribute determinant of cov_params of all looo regressions.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L393'>cooks_distance</a>()</tt>	Cached attribute cooks distance.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L412'>cov_ratio</a>()</tt>	Cached attribute covariance ratio between looo and original this uses determinant of the estimate of the parameter covariance.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L426'>resid_var</a>()</tt>	Cached attribute estimate of variance of the residuals.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L440'>resid_std</a>()</tt>	Cached attribute estimate of standard deviation of the residuals.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L452'>_ols_xnoti</a>(drop_idx,endog_idx,store)</tt>	Regression results from lovo auxiliary regression with cache the result instances are stored which could use a large amount of.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L504'>_get_drop_vari</a>(attributes)</tt>	Regress endog on exog without one of the variables this uses a k_vars loop only attributes of the ols instance are stored.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L531'>_res_looo</a>()</tt>	Collect required results from the looo loop all results will be attached.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L562'>summary_frame</a>()</tt>	Creates a dataframe with all available influence results.
<tt style='background-color:#E8E8E8;'> stats.OLSInfluence <a href=' /stats/outliers_influence.py#L611'>summary_table</a>(float_fmt)</tt>	Create a summary table with all influence and outlier measures this does currently not distinguish between statistics that can be.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/outliers_influence.py#L667'>summary_table</a>(res,alpha)</tt>	Generate summary table of outlier and influence similar to sas.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/descriptivestats.py#L7'>_kurtosis</a>(a)</tt>	Wrapper for scipy stats kurtosis that returns nan instead of raising error.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/descriptivestats.py#L18'>_skew</a>(a)</tt>	Wrapper for scipy stats skew that returns nan instead of raising error.
<tt style='background-color:#E8E8E8;'> stats.Describe <a href=' /stats/descriptivestats.py#L138'>_array_typer</a>()</tt>	If not a sctructured array.
<tt style='background-color:#E8E8E8;'> stats.Describe <a href=' /stats/descriptivestats.py#L149'>_is_dtype_like</a>(col)</tt>	Check whether self dataset [col][0] behaves like a string numbern.
<tt style='background-color:#E8E8E8;'> stats.Describe <a href=' /stats/descriptivestats.py#L177'>summary</a>(stats,columns,orientation)</tt>	Return a summary of descriptive statistics.
<tt style='background-color:#E8E8E8;'> stats.TableDist <a href=' /stats/tabledist.py#L79'>_critvals</a>(n)</tt>	Rows of the table linearly interpolated for given sample size.
<tt style='background-color:#E8E8E8;'> stats.TableDist <a href=' /stats/tabledist.py#L101'>prob</a>(x,n)</tt>	Find pvalues by interpolation eiter cdf x or sf x returns extrem probabilities 0.
<tt style='background-color:#E8E8E8;'> stats.TableDist <a href=' /stats/tabledist.py#L158'>crit2</a>(prob,n)</tt>	Returns interpolated quantiles similar to ppf or isf.
<tt style='background-color:#E8E8E8;'> stats.TableDist <a href=' /stats/tabledist.py#L169'>crit</a>(prob,n)</tt>	Returns interpolated quantiles similar to ppf or isf.
<tt style='background-color:#E8E8E8;'> stats.TableDist <a href=' /stats/tabledist.py#L208'>crit3</a>(prob,n)</tt>	Returns interpolated quantiles similar to ppf or isf.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L18'>proportion_confint</a>(count,nobs,alpha,method)</tt>	Confidence interval for a binomial proportion parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L125'>multinomial_proportions_confint</a>(counts,alpha,method)</tt>	Confidence intervals for multinomial proportions.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L316'>samplesize_confint_proportion</a>(proportion,half_length,alpha,method)</tt>	Find sample size to get desired confidence interval length parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L352'>proportion_effectsize</a>(prop1,prop2,method)</tt>	Effect size for a test comparing two proportions for use in power function.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L392'>std_prop</a>(prop,nobs)</tt>	Standard error for the estimate of a proportion this is just np.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L411'>_power_ztost</a>(mean_low,var_low,mean_upp,var_upp)</tt>	Generic statistical power function for normal based equivalence test.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L455'>binom_tost</a>(count,nobs,low,upp)</tt>	Exact tost test for one proportion using binomial distribution parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L481'>binom_tost_reject_interval</a>(low,upp,nobs,alpha)</tt>	Rejection region for binomial tost the interval includes the end points.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L506'>binom_test_reject_interval</a>(value,nobs,alpha,alternative)</tt>	Rejection region for binomial test for one sample proportion the interval includes the end points of the rejection region.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L541'>binom_test</a>(count,nobs,prop,alternative)</tt>	Perform a test that the probability of success is p.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L594'>power_ztost_prop</a>(low,upp,nobs,p_alt)</tt>	Power of proportions equivalence test based on normal distribution parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L681'>_table_proportion</a>(count,nobs)</tt>	Create a k by 2 contingency table for proportion helper function for proportions_chisquare.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L709'>proportions_ztest</a>(count,nobs,value,alternative)</tt>	Test for proportions based on normal z test parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L810'>proportions_ztost</a>(count,nobs,low,upp)</tt>	Equivalence test based on normal distribution parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L860'>proportions_chisquare</a>(count,nobs,value)</tt>	Test for proportions based on chisquare test parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L918'>proportions_chisquare_allpairs</a>(count,nobs,multitest_method)</tt>	Chisquare test of proportions for all pairs of k samples performs a chisquare test for proportions for all pairwise comparisons.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/proportion.py#L956'>proportions_chisquare_pairscontrol</a>(count,nobs,value,multitest_method)</tt>	Chisquare test of proportions for pairs of k samples compared to control performs a chisquare test for proportions for pairwise comparisons with a.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/regularized_covariance.py#L5'>_calc_nodewise_row</a>(exog,idx,alpha)</tt>	Calculates the nodewise_row values for the idxth variable used to estimate approx_inv_cov.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/regularized_covariance.py#L47'>_calc_nodewise_weight</a>(exog,nodewise_row,idx,alpha)</tt>	Calculates the nodewise_weightvalue for the idxth variable used to estimate approx_inv_cov.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/regularized_covariance.py#L89'>_calc_approx_inv_cov</a>(nodewise_row_l,nodewise_weight_l)</tt>	Calculates the approximate inverse covariance matrix parameters.
<tt style='background-color:#E8E8E8;'> stats.RegularizedInvCovariance <a href=' /stats/regularized_covariance.py#L150'>fit</a>(alpha)</tt>	Estimates the regularized inverse covariance using nodewise.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/multitest.py#L21'>_ecdf</a>(x)</tt>	No frills empirical cdf used in fdrcorrection.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/multitest.py#L60'>multipletests</a>(pvals,alpha,method,is_sorted)</tt>	Test results and p-value correction for multiple tests parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/multitest.py#L263'>fdrcorrection</a>(pvals,alpha,method,is_sorted)</tt>	Pvalue correction for false discovery rate this covers benjamini/hochberg for independent or positively correlated and.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/multitest.py#L340'>fdrcorrection_twostage</a>(pvals,alpha,method,iter)</tt>	Iterated two stage linear step-up procedure with estimation of number of true hypotheses.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/multitest.py#L449'>local_fdr</a>(zscores,null_proportion,null_pdf,deg)</tt>	Calculate local fdr values for a list of z-scores.
<tt style='background-color:#E8E8E8;'> stats.NullDistribution <a href=' /stats/multitest.py#L669'>pdf</a>(zscores)</tt>	Evaluates the fitted emirical null z-score density.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L118'>nobs</a>()</tt>	Alias for number of observations/cases equal to sum of weights.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L124'>sum</a>()</tt>	Weighted sum of data.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L129'>mean</a>()</tt>	Weighted mean of data.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L134'>demeaned</a>()</tt>	Data with weighted mean subtracted.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L139'>sumsquares</a>()</tt>	Weighted sum of squares of demeaned data.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L145'>var_ddof</a>(ddof)</tt>	Variance of data given ddof.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L160'>std_ddof</a>(ddof)</tt>	Standard deviation of data with given ddof.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L181'>_var</a>()</tt>	Variance without degrees of freedom correction.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L189'>std</a>()</tt>	Standard deviation with default degrees of freedom correction.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L195'>cov</a>()</tt>	Weighted covariance of data if data is 2 dimensional.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L206'>corrcoef</a>()</tt>	Weighted correlation with default ddof.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L214'>std_mean</a>()</tt>	Standard deviation of weighted mean.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L227'>quantile</a>(probs,return_pandas)</tt>	Compute quantiles for a weighted sample.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L325'>tconfint_mean</a>(alpha,alternative)</tt>	Two-sided confidence interval for weighted mean of data if the data is 2d then these are separate confidence intervals.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L362'>zconfint_mean</a>(alpha,alternative)</tt>	Two-sided confidence interval for weighted mean of data confidence interval is based on normal distribution.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L397'>ttest_mean</a>(value,alternative)</tt>	Ttest of null hypothesis that mean is equal to value.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L438'>ttost_mean</a>(low,upp)</tt>	Test of non- equivalence of one sample tost two one-sided t tests.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L474'>ztest_mean</a>(value,alternative)</tt>	Z-test of null hypothesis that mean is equal to value.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L541'>ztost_mean</a>(low,upp)</tt>	Test of non- equivalence of one sample based on z-test tost two one-sided z-tests.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L575'>get_compare</a>(other,weights)</tt>	Return an instance of comparemeans with self and other parameters.
<tt style='background-color:#E8E8E8;'> stats.DescrStatsW <a href=' /stats/weightstats.py#L602'>asrepeats</a>()</tt>	Get array that has repeats given by floor weights.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/weightstats.py#L613'>_tstat_generic</a>(value1,value2,std_diff,dof)</tt>	Generic ttest to save typing.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/weightstats.py#L627'>_tconfint_generic</a>(mean,std_mean,dof,alpha)</tt>	Generic t-confint to save typing.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/weightstats.py#L648'>_zstat_generic</a>(value1,value2,std_diff,alternative)</tt>	Generic normal z-test to save typing.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/weightstats.py#L665'>_zstat_generic2</a>(value,std_diff,alternative)</tt>	Generic normal z-test to save typing.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/weightstats.py#L681'>_zconfint_generic</a>(mean,std_mean,alpha,alternative)</tt>	Generic normal-confint to save typing.
<tt style='background-color:#E8E8E8;'> stats.CompareMeans <a href=' /stats/weightstats.py#L723'>__init__</a>(d1,d2)</tt>	Assume d1 d2 hold the relevant attributes.
<tt style='background-color:#E8E8E8;'> stats.CompareMeans <a href=' /stats/weightstats.py#L734'>from_data</a>(cls,data1,data2,weights1)</tt>	Construct a comparemeans object from data parameters.
<tt style='background-color:#E8E8E8;'> stats.CompareMeans <a href=' /stats/weightstats.py#L758'>summary</a>(use_t,alpha,usevar,value)</tt>	Summarize the results of the hypothesis test parameters.
<tt style='background-color:#E8E8E8;'> stats.CompareMeans <a href=' /stats/weightstats.py#L824'>std_meandiff_pooledvar</a>()</tt>	Variance assuming equal variance in both data sets.
<tt style='background-color:#E8E8E8;'> stats.CompareMeans <a href=' /stats/weightstats.py#L839'>dof_satt</a>()</tt>	Degrees of freedom of satterthwaite for unequal variance.
<tt style='background-color:#E8E8E8;'> stats.CompareMeans <a href=' /stats/weightstats.py#L854'>ttest_ind</a>(alternative,usevar,value)</tt>	Ttest for the null hypothesis of identical means this should also be the same as onewaygls except for ddof differences.
<tt style='background-color:#E8E8E8;'> stats.CompareMeans <a href=' /stats/weightstats.py#L908'>ztest_ind</a>(alternative,usevar,value)</tt>	Z-test for the null hypothesis of identical means parameters.
<tt style='background-color:#E8E8E8;'> stats.CompareMeans <a href=' /stats/weightstats.py#L951'>tconfint_diff</a>(alpha,alternative,usevar)</tt>	Confidence interval for the difference in means parameters.
<tt style='background-color:#E8E8E8;'> stats.CompareMeans <a href=' /stats/weightstats.py#L1000'>zconfint_diff</a>(alpha,alternative,usevar)</tt>	Confidence interval for the difference in means parameters.
<tt style='background-color:#E8E8E8;'> stats.CompareMeans <a href=' /stats/weightstats.py#L1047'>ttost_ind</a>(low,upp,usevar)</tt>	Test of equivalence for two independent samples base on t-test parameters.
<tt style='background-color:#E8E8E8;'> stats.CompareMeans <a href=' /stats/weightstats.py#L1074'>ztost_ind</a>(low,upp,usevar)</tt>	Test of equivalence for two independent samples based on z-test parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/weightstats.py#L1114'>ttest_ind</a>(x1,x2,alternative,usevar)</tt>	Ttest independent sample convenience function that uses the classes and throws away the intermediate.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/weightstats.py#L1163'>ttost_ind</a>(x1,x2,low,upp)</tt>	Test of non- equivalence for two independent samples tost two one-sided t tests.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/weightstats.py#L1237'>ttost_paired</a>(x1,x2,low,upp)</tt>	Test of non- equivalence for two dependent paired sample tost two one-sided t tests.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/weightstats.py#L1294'>ztest</a>(x1,x2,value,alternative)</tt>	Test for mean based on normal distribution one or two samples in the case of two samples the samples are assumed to be independent.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/weightstats.py#L1367'>zconfint</a>(x1,x2,value,alpha)</tt>	Confidence interval based on normal distribution z-test parameters.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/weightstats.py#L1430'>ztost</a>(x1,low,upp,x2)</tt>	Equivalence test based on normal distribution parameters.
<tt style='background-color:#E8E8E8;'> stats.libqsturng. <a href=' /stats/libqsturng/qsturng_.py#L377'>_isfloat</a>(x)</tt>	Returns true if x is a float.
<tt style='background-color:#E8E8E8;'> stats.libqsturng. <a href=' /stats/libqsturng/qsturng_.py#L393'>_phi</a>(p)</tt>	Modified from the author's original perl code original comments follow below by dfield@yahoo-inc.
<tt style='background-color:#E8E8E8;'> stats.libqsturng. <a href=' /stats/libqsturng/qsturng_.py#L458'>_ptransform</a>(p)</tt>	Function for p-value abcissa transformation.
<tt style='background-color:#E8E8E8;'> stats.libqsturng. <a href=' /stats/libqsturng/qsturng_.py#L462'>_func</a>(a,p,r,v)</tt>	Calculates f-hat for the coefficients in a probability p sample mean difference r and degrees of freedom v.
<tt style='background-color:#E8E8E8;'> stats.libqsturng. <a href=' /stats/libqsturng/qsturng_.py#L484'>_select_ps</a>(p)</tt>	Returns the points to use for interpolating p.
<tt style='background-color:#E8E8E8;'> stats.libqsturng. <a href=' /stats/libqsturng/qsturng_.py#L515'>_interpolate_p</a>(p,r,v)</tt>	Interpolates p based on the values in the a table for the.
<tt style='background-color:#E8E8E8;'> stats.libqsturng. <a href=' /stats/libqsturng/qsturng_.py#L598'>_select_vs</a>(v,p)</tt>	Returns the points to use for interpolating v.
<tt style='background-color:#E8E8E8;'> stats.libqsturng. <a href=' /stats/libqsturng/qsturng_.py#L626'>_interpolate_v</a>(p,r,v)</tt>	Interpolates v based on the values in the a table for the.
<tt style='background-color:#E8E8E8;'> stats.libqsturng. <a href=' /stats/libqsturng/qsturng_.py#L761'>qsturng</a>(p,r,v)</tt>	Approximates the quantile p for a studentized range distribution having v degrees of freedom and r samples.
<tt style='background-color:#E8E8E8;'> stats.libqsturng. <a href=' /stats/libqsturng/qsturng_.py#L842'>psturng</a>(q,r,v)</tt>	Evaluates the probability from 0 to q for a studentized range having v degrees of freedom and r samples.
<tt style='background-color:#E8E8E8;'> duration. <a href=' /duration/_kernel_estimates.py#L5'>_kernel_cumincidence</a>(time,status,exog,kfunc)</tt>	Calculates cumulative incidence functions using kernels.
<tt style='background-color:#E8E8E8;'> duration. <a href=' /duration/_kernel_estimates.py#L119'>_kernel_survfunc</a>(time,status,exog,kfunc)</tt>	Estimate the marginal survival function under dependent censoring.
<tt style='background-color:#E8E8E8;'> duration. <a href=' /duration/survfunc.py#L7'>_calc_survfunc_right</a>(time,status,weights,entry)</tt>	Calculate the survival function and its standard error for a single group.
<tt style='background-color:#E8E8E8;'> duration. <a href=' /duration/survfunc.py#L84'>_calc_incidence_right</a>(time,status,weights)</tt>	Calculate the cumulative incidence function and its standard error.
<tt style='background-color:#E8E8E8;'> duration.SurvfuncRight <a href=' /duration/survfunc.py#L364'>plot</a>(ax)</tt>	Plot the survival function.
<tt style='background-color:#E8E8E8;'> duration.SurvfuncRight <a href=' /duration/survfunc.py#L392'>quantile</a>(p)</tt>	Estimated quantile of a survival distribution.
<tt style='background-color:#E8E8E8;'> duration.SurvfuncRight <a href=' /duration/survfunc.py#L413'>quantile_ci</a>(p,alpha,method)</tt>	Returns a confidence interval for a survival quantile.
<tt style='background-color:#E8E8E8;'> duration.SurvfuncRight <a href=' /duration/survfunc.py#L485'>summary</a>()</tt>	Return a summary of the estimated survival function.
<tt style='background-color:#E8E8E8;'> duration.SurvfuncRight <a href=' /duration/survfunc.py#L502'>simultaneous_cb</a>(alpha,method,transform)</tt>	Returns a simultaneous confidence band for the survival function.
<tt style='background-color:#E8E8E8;'> duration. <a href=' /duration/survfunc.py#L564'>survdiff</a>(time,status,group,weight_type)</tt>	Test for the equality of two survival distributions.
<tt style='background-color:#E8E8E8;'> duration. <a href=' /duration/survfunc.py#L729'>plot_survfunc</a>(survfuncs,ax)</tt>	Plot one or more survivor functions.
<tt style='background-color:#E8E8E8;'> duration.PHSurvivalTime <a href=' /duration/hazard_regression.py#L85'>__init__</a>(time,status,exog,strata)</tt>	Represent a collection of survival times with possible stratification and left truncation.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L347'>from_formula</a>(cls,formula,data,status)</tt>	Create a proportional hazards regression model from a formula and dataframe.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L423'>fit</a>(groups)</tt>	Fit a proportional hazards regression model.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L461'>fit_regularized</a>(method,alpha,start_params,refit)</tt>	Return a regularized fit to a linear regression model.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L532'>loglike</a>(params)</tt>	Returns the log partial likelihood function evaluated at params.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L543'>score</a>(params)</tt>	Returns the score function evaluated at params.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L553'>hessian</a>(params)</tt>	Returns the hessian matrix of the log partial likelihood function evaluated at params.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L564'>breslow_loglike</a>(params)</tt>	Returns the value of the log partial likelihood function evaluated at params, using the breslow method to handle tied.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L607'>efron_loglike</a>(params)</tt>	Returns the value of the log partial likelihood function evaluated at params, using the efron method to handle tied.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L655'>breslow_gradient</a>(params)</tt>	Returns the gradient of the log partial likelihood using the breslow method to handle tied times.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L708'>efron_gradient</a>(params)</tt>	Returns the gradient of the log partial likelihood evaluated at params, using the efron method to handle tied times.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L771'>breslow_hessian</a>(params)</tt>	Returns the hessian of the log partial likelihood evaluated at params, using the breslow method to handle tied times.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L823'>efron_hessian</a>(params)</tt>	Returns the hessian matrix of the partial log-likelihood evaluated at params, using the efron method to handle tied.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L889'>robust_covariance</a>(params)</tt>	Returns a covariance matrix for the proportional hazards model regresion coefficient estimates that is robust to certain.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L936'>score_residuals</a>(params)</tt>	Returns the score residuals calculated at a given vector of parameters.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L1022'>weighted_covariate_averages</a>(params)</tt>	Returns the hazard-weighted average of covariate values for subjects who are at-risk at a particular time.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L1085'>baseline_cumulative_hazard</a>(params)</tt>	Estimate the baseline cumulative hazard and survival functions.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L1149'>baseline_cumulative_hazard_function</a>(params)</tt>	Returns a function that calculates the baseline cumulative hazard function for each stratum.
<tt style='background-color:#E8E8E8;'> duration.PHReg <a href=' /duration/hazard_regression.py#L1262'>get_distribution</a>(params)</tt>	Returns a scipy distribution object corresponding to the distribution of uncensored endog duration values for each.
<tt style='background-color:#E8E8E8;'> duration.PHRegResults <a href=' /duration/hazard_regression.py#L1391'>standard_errors</a>()</tt>	Returns the standard errors of the parameter estimates.
<tt style='background-color:#E8E8E8;'> duration.PHRegResults <a href=' /duration/hazard_regression.py#L1398'>bse</a>()</tt>	Returns the standard errors of the parameter estimates.
<tt style='background-color:#E8E8E8;'> duration.PHRegResults <a href=' /duration/hazard_regression.py#L1405'>get_distribution</a>()</tt>	Returns a scipy distribution object corresponding to the distribution of uncensored endog duration values for each.
<tt style='background-color:#E8E8E8;'> duration.PHRegResults <a href=' /duration/hazard_regression.py#L1440'>_group_stats</a>(groups)</tt>	Descriptive statistics of the groups.
<tt style='background-color:#E8E8E8;'> duration.PHRegResults <a href=' /duration/hazard_regression.py#L1448'>weighted_covariate_averages</a>()</tt>	The average covariate values within the at-risk set at each event time point weighted by hazard.
<tt style='background-color:#E8E8E8;'> duration.PHRegResults <a href=' /duration/hazard_regression.py#L1456'>score_residuals</a>()</tt>	A matrix containing the score residuals.
<tt style='background-color:#E8E8E8;'> duration.PHRegResults <a href=' /duration/hazard_regression.py#L1463'>baseline_cumulative_hazard</a>()</tt>	A list corresponding to the strata containing the baseline cumulative hazard function evaluated at the event points.
<tt style='background-color:#E8E8E8;'> duration.PHRegResults <a href=' /duration/hazard_regression.py#L1471'>baseline_cumulative_hazard_function</a>()</tt>	A list corresponding to the strata containing function objects that calculate the cumulative hazard function.
<tt style='background-color:#E8E8E8;'> duration.PHRegResults <a href=' /duration/hazard_regression.py#L1479'>schoenfeld_residuals</a>()</tt>	A matrix containing the schoenfeld residuals.
<tt style='background-color:#E8E8E8;'> duration.PHRegResults <a href=' /duration/hazard_regression.py#L1518'>martingale_residuals</a>()</tt>	The martingale residuals.
<tt style='background-color:#E8E8E8;'> duration.PHRegResults <a href=' /duration/hazard_regression.py#L1551'>summary</a>(yname,xname,title,alpha)</tt>	Summarize the proportional hazards regression results.
<tt style='background-color:#E8E8E8;'> duration.rv_discrete_float <a href=' /duration/hazard_regression.py#L1679'>rvs</a>()</tt>	Returns a random sample from the discrete distribution.
<tt style='background-color:#E8E8E8;'> duration.rv_discrete_float <a href=' /duration/hazard_regression.py#L1694'>mean</a>()</tt>	Returns a vector containing the mean values of the discrete distributions.
<tt style='background-color:#E8E8E8;'> duration.rv_discrete_float <a href=' /duration/hazard_regression.py#L1706'>var</a>()</tt>	Returns a vector containing the variances of the discrete distributions.
<tt style='background-color:#E8E8E8;'> duration.rv_discrete_float <a href=' /duration/hazard_regression.py#L1721'>std</a>()</tt>	Returns a vector containing the standard deviations of the discrete distributions.
<tt style='background-color:#E8E8E8;'> nonparametric.KernelReg <a href=' /nonparametric/kernel_regression.py#L129'>_est_loc_linear</a>(bw,endog,exog,data_predict)</tt>	Local linear estimator of g x in the regression y = g x + e.
<tt style='background-color:#E8E8E8;'> nonparametric.KernelReg <a href=' /nonparametric/kernel_regression.py#L189'>_est_loc_constant</a>(bw,endog,exog,data_predict)</tt>	Local constant estimator of g x in the regression y = g x + e.
<tt style='background-color:#E8E8E8;'> nonparametric.KernelReg <a href=' /nonparametric/kernel_regression.py#L238'>aic_hurvich</a>(bw,func)</tt>	Computes the aic hurvich criteria for the estimation of the bandwidth.
<tt style='background-color:#E8E8E8;'> nonparametric.KernelReg <a href=' /nonparametric/kernel_regression.py#L280'>cv_loo</a>(bw,func)</tt>	The cross-validation function with leave-one-out estimator.
<tt style='background-color:#E8E8E8;'> nonparametric.KernelReg <a href=' /nonparametric/kernel_regression.py#L322'>r_squared</a>()</tt>	Returns the r-squared for the nonparametric regression.
<tt style='background-color:#E8E8E8;'> nonparametric.KernelReg <a href=' /nonparametric/kernel_regression.py#L347'>fit</a>(data_predict)</tt>	Returns the mean and marginal effects at the data_predict points.
<tt style='background-color:#E8E8E8;'> nonparametric.KernelReg <a href=' /nonparametric/kernel_regression.py#L383'>sig_test</a>(var_pos,nboot,nested_res,pivot)</tt>	Significance test for the variables in the regression.
<tt style='background-color:#E8E8E8;'> nonparametric.KernelReg <a href=' /nonparametric/kernel_regression.py#L415'>__repr__</a>()</tt>	Provide something sane to print.
<tt style='background-color:#E8E8E8;'> nonparametric.KernelReg <a href=' /nonparametric/kernel_regression.py#L425'>_get_class_vars_type</a>()</tt>	Helper method to be able to pass needed vars to _compute_subset.
<tt style='background-color:#E8E8E8;'> nonparametric.KernelReg <a href=' /nonparametric/kernel_regression.py#L431'>_compute_dispersion</a>(data)</tt>	Computes the measure of dispersion.
<tt style='background-color:#E8E8E8;'> nonparametric.KernelCensoredReg <a href=' /nonparametric/kernel_regression.py#L535'>__repr__</a>()</tt>	Provide something sane to print.
<tt style='background-color:#E8E8E8;'> nonparametric.KernelCensoredReg <a href=' /nonparametric/kernel_regression.py#L545'>_est_loc_linear</a>(bw,endog,exog,data_predict)</tt>	Local linear estimator of g x in the regression y = g x + e.
<tt style='background-color:#E8E8E8;'> nonparametric.KernelCensoredReg <a href=' /nonparametric/kernel_regression.py#L603'>cv_loo</a>(bw,func)</tt>	The cross-validation function with leave-one-out estimator.
<tt style='background-color:#E8E8E8;'> nonparametric.KernelCensoredReg <a href=' /nonparametric/kernel_regression.py#L650'>fit</a>(data_predict)</tt>	Returns the marginal effects at the data_predict points.
<tt style='background-color:#E8E8E8;'> nonparametric.TestRegCoefC <a href=' /nonparametric/kernel_regression.py#L747'>_compute_test_stat</a>(Y,X)</tt>	Computes the test statistic see p 371 in [8].
<tt style='background-color:#E8E8E8;'> nonparametric.TestRegCoefC <a href=' /nonparametric/kernel_regression.py#L759'>_compute_lambda</a>(Y,X)</tt>	Computes only lambda -- the main part of the test statistic.
<tt style='background-color:#E8E8E8;'> nonparametric.TestRegCoefC <a href=' /nonparametric/kernel_regression.py#L774'>_compute_se_lambda</a>(Y,X)</tt>	Calculates the se of lambda by nested resampling used to pivot the statistic.
<tt style='background-color:#E8E8E8;'> nonparametric.TestRegCoefC <a href=' /nonparametric/kernel_regression.py#L792'>_compute_sig</a>()</tt>	Computes the significance value for the variable s tested.
<tt style='background-color:#E8E8E8;'> nonparametric.TestRegCoefD <a href=' /nonparametric/kernel_regression.py#L868'>_compute_test_stat</a>(Y,X)</tt>	Computes the test statistic.
<tt style='background-color:#E8E8E8;'> nonparametric.TestRegCoefD <a href=' /nonparametric/kernel_regression.py#L891'>_compute_sig</a>()</tt>	Calculates the significance level of the variable tested.
<tt style='background-color:#E8E8E8;'> nonparametric.TestRegCoefD <a href=' /nonparametric/kernel_regression.py#L925'>_est_cond_mean</a>()</tt>	Calculates the expected conditional mean.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/bandwidths.py#L9'>_select_sigma</a>(X)</tt>	Returns the smaller of std(x ddof=1) or normalized iqr x over axis 0.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/bandwidths.py#L26'>bw_scott</a>(x,kernel)</tt>	Scott's rule of thumb parameters.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/bandwidths.py#L59'>bw_silverman</a>(x,kernel)</tt>	Silverman's rule of thumb parameters.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/bandwidths.py#L92'>bw_normal_reference</a>(x,kernel)</tt>	Plug-in bandwidth with kernel specific constant based on normal reference.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/bandwidths.py#L148'>select_bandwidth</a>(x,bw,kernel)</tt>	Selects bandwidth for a selection rule bw.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/_kernel_base.py#L35'>_compute_min_std_IQR</a>(data)</tt>	Compute minimum of std and iqr for each variable.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/_kernel_base.py#L45'>_compute_subset</a>(class_type,data,bw,co)</tt>	"compute bw on subset of data.
<tt style='background-color:#E8E8E8;'> nonparametric.GenericKDE <a href=' /nonparametric/_kernel_base.py#L104'>_compute_bw</a>(bw)</tt>	Computes the bandwidth of the data.
<tt style='background-color:#E8E8E8;'> nonparametric.GenericKDE <a href=' /nonparametric/_kernel_base.py#L140'>_compute_dispersion</a>(data)</tt>	Computes the measure of dispersion.
<tt style='background-color:#E8E8E8;'> nonparametric.GenericKDE <a href=' /nonparametric/_kernel_base.py#L159'>_get_class_vars_type</a>()</tt>	Helper method to be able to pass needed vars to _compute_subset.
<tt style='background-color:#E8E8E8;'> nonparametric.GenericKDE <a href=' /nonparametric/_kernel_base.py#L165'>_compute_efficient</a>(bw)</tt>	Computes the bandwidth by estimating the scaling factor c in n_res resamples of size n_sub (in randomize case), or by.
<tt style='background-color:#E8E8E8;'> nonparametric.GenericKDE <a href=' /nonparametric/_kernel_base.py#L239'>_set_defaults</a>(defaults)</tt>	Sets the default values for the efficient estimation.
<tt style='background-color:#E8E8E8;'> nonparametric.GenericKDE <a href=' /nonparametric/_kernel_base.py#L249'>_normal_reference</a>()</tt>	Returns scott's normal reference rule of thumb bandwidth parameter.
<tt style='background-color:#E8E8E8;'> nonparametric.GenericKDE <a href=' /nonparametric/_kernel_base.py#L266'>_set_bw_bounds</a>(bw)</tt>	Sets bandwidth lower bound to effectively zero )1e-10), and for discrete values upper bound to 1.
<tt style='background-color:#E8E8E8;'> nonparametric.GenericKDE <a href=' /nonparametric/_kernel_base.py#L278'>_cv_ml</a>()</tt>	Returns the cross validation maximum likelihood bandwidth parameter.
<tt style='background-color:#E8E8E8;'> nonparametric.GenericKDE <a href=' /nonparametric/_kernel_base.py#L309'>_cv_ls</a>()</tt>	Returns the cross-validation least squares bandwidth parameter s.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/_kernel_base.py#L437'>_adjust_shape</a>(dat,k_vars)</tt>	Returns an array of shape (nobs k_vars) for use with gpke.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/_kernel_base.py#L456'>gpke</a>(bw,data,data_predict,var_type)</tt>	Returns the non-normalized generalized product kernel estimator parameters.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEMultivariate <a href=' /nonparametric/kernel_density.py#L120'>__repr__</a>()</tt>	Provide something sane to print.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEMultivariate <a href=' /nonparametric/kernel_density.py#L129'>loo_likelihood</a>(bw,func)</tt>	Returns the leave-one-out likelihood function.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEMultivariate <a href=' /nonparametric/kernel_density.py#L165'>pdf</a>(data_predict)</tt>	Evaluate the probability density function.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEMultivariate <a href=' /nonparametric/kernel_density.py#L201'>cdf</a>(data_predict)</tt>	Evaluate the cumulative distribution function.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEMultivariate <a href=' /nonparametric/kernel_density.py#L249'>imse</a>(bw)</tt>	Returns the integrated mean square error for the unconditional kde.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEMultivariate <a href=' /nonparametric/kernel_density.py#L337'>_get_class_vars_type</a>()</tt>	Helper method to be able to pass needed vars to _compute_subset.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEMultivariateConditional <a href=' /nonparametric/kernel_density.py#L428'>__repr__</a>()</tt>	Provide something sane to print.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEMultivariateConditional <a href=' /nonparametric/kernel_density.py#L441'>loo_likelihood</a>(bw,func)</tt>	Returns the leave-one-out conditional likelihood of the data.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEMultivariateConditional <a href=' /nonparametric/kernel_density.py#L481'>pdf</a>(endog_predict,exog_predict)</tt>	Evaluate the probability density function.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEMultivariateConditional <a href=' /nonparametric/kernel_density.py#L533'>cdf</a>(endog_predict,exog_predict)</tt>	Cumulative distribution function for the conditional density.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEMultivariateConditional <a href=' /nonparametric/kernel_density.py#L605'>imse</a>(bw)</tt>	The integrated mean square error for the conditional kde.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEMultivariateConditional <a href=' /nonparametric/kernel_density.py#L685'>_get_class_vars_type</a>()</tt>	Helper method to be able to pass needed vars to _compute_subset.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/smoothers_lowess_old.py#L15'>lowess</a>(endog,exog,frac,it)</tt>	Lowess locally weighted scatterplot smoothing a lowess function that outs smoothed estimates of endog.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/kernels.py#L25'>aitchison_aitken</a>(h,Xi,x,num_levels)</tt>	The aitchison-aitken kernel used for unordered discrete random variables.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/kernels.py#L70'>wang_ryzin</a>(h,Xi,x)</tt>	The wang-ryzin kernel used for ordered discrete random variables.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/kernels.py#L110'>gaussian</a>(h,Xi,x)</tt>	Gaussian kernel for continuous variables parameters.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/kernels.py#L131'>gaussian_convolution</a>(h,Xi,x)</tt>	Calculates the gaussian convolution kernel.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/kernels.py#L188'>aitchison_aitken_reg</a>(h,Xi,x)</tt>	A version for the aitchison-aitken kernel for nonparametric regression.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/kernels.py#L201'>wang_ryzin_reg</a>(h,Xi,x)</tt>	A version for the wang-ryzin kernel for nonparametric regression.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEUnivariate <a href=' /nonparametric/kde.py#L86'>fit</a>(kernel,bw,fft,weights)</tt>	Attach the density estimate to the kdeunivariate class.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEUnivariate <a href=' /nonparametric/kde.py#L162'>cdf</a>()</tt>	Returns the cumulative distribution function evaluated at the support.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEUnivariate <a href=' /nonparametric/kde.py#L188'>cumhazard</a>()</tt>	Returns the hazard function evaluated at the support.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEUnivariate <a href=' /nonparametric/kde.py#L201'>sf</a>()</tt>	Returns the survival function evaluated at the support.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEUnivariate <a href=' /nonparametric/kde.py#L213'>entropy</a>()</tt>	Returns the differential entropy evaluated at the support notes.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEUnivariate <a href=' /nonparametric/kde.py#L240'>icdf</a>()</tt>	Inverse cumulative distribution quantile function notes.
<tt style='background-color:#E8E8E8;'> nonparametric.KDEUnivariate <a href=' /nonparametric/kde.py#L255'>evaluate</a>(point)</tt>	Evaluate density at a single point.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/kde.py#L270'>kdensity</a>(X,kernel,bw,weights)</tt>	Rosenblatt-parzen univariate kernel density estimator.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/kde.py#L382'>kdensityfft</a>(X,kernel,bw,weights)</tt>	Rosenblatt-parzen univariate kernel density estimator parameters.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/kdetools.py#L6'>forrt</a>(X,m)</tt>	Rfft with order like munro 1976 fortt routine.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/kdetools.py#L15'>revrt</a>(X,m)</tt>	Inverse of forrt equivalent to munro 1976 revrt routine.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/kdetools.py#L25'>silverman_transform</a>(bw,M,RANGE)</tt>	Fft of gaussian kernel following to silverman as 176.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/kdetools.py#L41'>counts</a>(x,v)</tt>	Counts the number of elements of x that fall within the grid points v notes.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/smoothers_lowess_old.py#L126'>_lowess_initial_fit</a>(x_copy,y_copy,k,n)</tt>	The initial weighted local linear regression for lowess.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/smoothers_lowess_old.py#L181'>_lowess_wt_standardize</a>(weights,new_entries,x_copy_i,width)</tt>	The initial phase of creating the weights.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/smoothers_lowess_old.py#L207'>_lowess_robustify_fit</a>(x_copy,y_copy,fitted,weights)</tt>	Additional weighted local linear regressions performed if iter>0.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/smoothers_lowess_old.py#L265'>_lowess_update_nn</a>(x,cur_nn,i)</tt>	Update the endpoints of the nearest neighbors to the ith point.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/smoothers_lowess_old.py#L300'>_lowess_tricube</a>(t)</tt>	The _tricube function applied to a numpy array.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/smoothers_lowess_old.py#L323'>_lowess_mycube</a>(t)</tt>	Fast matrix cube.
<tt style='background-color:#E8E8E8;'> nonparametric. <a href=' /nonparametric/smoothers_lowess_old.py#L342'>_lowess_bisquare</a>(t)</tt>	The bisquare function applied to a numpy array.
<tt style='background-color:#E8E8E8;'> genmod.CovStruct <a href=' /genmod/cov_struct.py#L47'>initialize</a>(model)</tt>	Called by gee used by implementations that need additional setup prior to running fit.
<tt style='background-color:#E8E8E8;'> genmod.CovStruct <a href=' /genmod/cov_struct.py#L59'>update</a>(params)</tt>	Updates the association parameter values based on the current regression coefficients.
<tt style='background-color:#E8E8E8;'> genmod.CovStruct <a href=' /genmod/cov_struct.py#L71'>covariance_matrix</a>(endog_expval,index)</tt>	Returns the working covariance or correlation matrix for a given cluster of data.
<tt style='background-color:#E8E8E8;'> genmod.CovStruct <a href=' /genmod/cov_struct.py#L95'>covariance_matrix_solve</a>(expval,index,stdev,rhs)</tt>	Solves matrix equations of the form covmat * soln = rhs and returns the values of soln, where covmat is the covariance.
<tt style='background-color:#E8E8E8;'> genmod.CovStruct <a href=' /genmod/cov_struct.py#L175'>summary</a>()</tt>	Returns a text summary of the current estimate of the dependence structure.
<tt style='background-color:#E8E8E8;'> genmod.Nested <a href=' /genmod/cov_struct.py#L352'>initialize</a>(model)</tt>	Called on the first call to update ilabels is a list of n_i x n_i matrices containing integer.
<tt style='background-color:#E8E8E8;'> genmod.Nested <a href=' /genmod/cov_struct.py#L478'>summary</a>()</tt>	Returns a summary string describing the state of the dependence structure.
<tt style='background-color:#E8E8E8;'> genmod.GlobalOddsRatio <a href=' /genmod/cov_struct.py#L945'>pooled_odds_ratio</a>(tables)</tt>	Returns the pooled odds ratio for a list of 2x2 tables.
<tt style='background-color:#E8E8E8;'> genmod.GlobalOddsRatio <a href=' /genmod/cov_struct.py#L978'>observed_crude_oddsratio</a>()</tt>	To obtain the crude global odds ratio first pool all binary indicators corresponding to a given pair of cut points (c c'),.
<tt style='background-color:#E8E8E8;'> genmod.GlobalOddsRatio <a href=' /genmod/cov_struct.py#L1016'>get_eyy</a>(endog_expval,index)</tt>	Returns a matrix v such that v[i j] is the joint probability that endog[i] = 1 and endog[j] = 1 based on the marginal.
<tt style='background-color:#E8E8E8;'> genmod.GlobalOddsRatio <a href=' /genmod/cov_struct.py#L1048'>update</a>(params)</tt>	Update the global odds ratio based on the current value of params.
<tt style='background-color:#E8E8E8;'> genmod.Equivalence <a href=' /genmod/cov_struct.py#L1244'>_make_pairs</a>(i,j)</tt>	Create arrays containing all unique ordered pairs of i j.
<tt style='background-color:#E8E8E8;'> genmod.ParameterConstraint <a href=' /genmod/generalized_estimating_equations.py#L114'>offset_increment</a>()</tt>	Returns a vector that should be added to the offset vector to accommodate the constraint.
<tt style='background-color:#E8E8E8;'> genmod.ParameterConstraint <a href=' /genmod/generalized_estimating_equations.py#L127'>reduced_exog</a>()</tt>	Returns a linearly transformed exog matrix whose columns span the constrained model space.
<tt style='background-color:#E8E8E8;'> genmod.ParameterConstraint <a href=' /genmod/generalized_estimating_equations.py#L139'>restore_exog</a>()</tt>	Returns the full exog matrix before it was reduced to satisfy the constraint.
<tt style='background-color:#E8E8E8;'> genmod.ParameterConstraint <a href=' /genmod/generalized_estimating_equations.py#L146'>unpack_param</a>(params)</tt>	Converts the parameter vector params from reduced to full coordinates.
<tt style='background-color:#E8E8E8;'> genmod.ParameterConstraint <a href=' /genmod/generalized_estimating_equations.py#L154'>unpack_cov</a>(bcov)</tt>	Converts the covariance matrix bcov from reduced to full coordinates.
<tt style='background-color:#E8E8E8;'> genmod.GEE <a href=' /genmod/generalized_estimating_equations.py#L689'>cluster_list</a>(array)</tt>	Returns array split into subarrays corresponding to the cluster structure.
<tt style='background-color:#E8E8E8;'> genmod.GEE <a href=' /genmod/generalized_estimating_equations.py#L702'>estimate_scale</a>()</tt>	Returns an estimate of the scale parameter at the current parameter value.
<tt style='background-color:#E8E8E8;'> genmod.GEE <a href=' /genmod/generalized_estimating_equations.py#L738'>mean_deriv</a>(exog,lin_pred)</tt>	Derivative of the expected endog with respect to the parameters.
<tt style='background-color:#E8E8E8;'> genmod.GEE <a href=' /genmod/generalized_estimating_equations.py#L764'>mean_deriv_exog</a>(exog,params,offset_exposure)</tt>	Derivative of the expected endog with respect to exog.
<tt style='background-color:#E8E8E8;'> genmod.GEE <a href=' /genmod/generalized_estimating_equations.py#L838'>update_cached_means</a>(mean_params)</tt>	Cached_means should always contain the most recent calculation of the group-wise mean vectors.
<tt style='background-color:#E8E8E8;'> genmod.GEE <a href=' /genmod/generalized_estimating_equations.py#L866'>_covmat</a>()</tt>	Returns the sampling covariance matrix of the regression parameters and related quantities.
<tt style='background-color:#E8E8E8;'> genmod.GEE <a href=' /genmod/generalized_estimating_equations.py#L968'>predict</a>(params,exog,offset,exposure)</tt>	Return predicted values for a marginal regression model fit using gee.
<tt style='background-color:#E8E8E8;'> genmod.GEE <a href=' /genmod/generalized_estimating_equations.py#L1204'>_handle_constraint</a>(mean_params,bcov)</tt>	Expand the parameter estimate mean_params and covariance matrix bcov to the coordinate system of the unconstrained model.
<tt style='background-color:#E8E8E8;'> genmod.GEE <a href=' /genmod/generalized_estimating_equations.py#L1283'>_update_assoc</a>(params)</tt>	Update the association parameters.
<tt style='background-color:#E8E8E8;'> genmod.GEE <a href=' /genmod/generalized_estimating_equations.py#L1290'>_derivative_exog</a>(params,exog,transform,dummy_idx)</tt>	For computing marginal effects returns df xb / dx where f.
<tt style='background-color:#E8E8E8;'> genmod.GEEResults <a href=' /genmod/generalized_estimating_equations.py#L1373'>standard_errors</a>(cov_type)</tt>	This is a convenience function that returns the standard errors for any covariance type.
<tt style='background-color:#E8E8E8;'> genmod.GEEResults <a href=' /genmod/generalized_estimating_equations.py#L1411'>resid</a>()</tt>	Returns the residuals the endogeneous data minus the fitted values from the model.
<tt style='background-color:#E8E8E8;'> genmod.GEEResults <a href=' /genmod/generalized_estimating_equations.py#L1419'>resid_split</a>()</tt>	Returns the residuals the endogeneous data minus the fitted values from the model.
<tt style='background-color:#E8E8E8;'> genmod.GEEResults <a href=' /genmod/generalized_estimating_equations.py#L1432'>resid_centered</a>()</tt>	Returns the residuals centered within each group.
<tt style='background-color:#E8E8E8;'> genmod.GEEResults <a href=' /genmod/generalized_estimating_equations.py#L1443'>resid_centered_split</a>()</tt>	Returns the residuals centered within each group the.
<tt style='background-color:#E8E8E8;'> genmod.GEEResults <a href=' /genmod/generalized_estimating_equations.py#L1485'>fittedvalues</a>()</tt>	Returns the fitted values from the model.
<tt style='background-color:#E8E8E8;'> genmod.GEEResults <a href=' /genmod/generalized_estimating_equations.py#L1532'>conf_int</a>(alpha,cols,cov_type)</tt>	Returns confidence intervals for the fitted parameters.
<tt style='background-color:#E8E8E8;'> genmod.GEEResults <a href=' /genmod/generalized_estimating_equations.py#L1572'>summary</a>(yname,xname,title,alpha)</tt>	Summarize the gee regression results parameters.
<tt style='background-color:#E8E8E8;'> genmod.GEEResults <a href=' /genmod/generalized_estimating_equations.py#L1668'>get_margeff</a>(at,method,atexog,dummy)</tt>	Get marginal effects of the fitted model.
<tt style='background-color:#E8E8E8;'> genmod.GEEResults <a href=' /genmod/generalized_estimating_equations.py#L1735'>plot_isotropic_dependence</a>(ax,xpoints,min_n)</tt>	Create a plot of the pairwise products of within-group residuals against the corresponding time differences.
<tt style='background-color:#E8E8E8;'> genmod.GEEResults <a href=' /genmod/generalized_estimating_equations.py#L1805'>sensitivity_params</a>(dep_params_first,dep_params_last,num_steps)</tt>	Refits the gee model using a sequence of values for the dependence parameters.
<tt style='background-color:#E8E8E8;'> genmod.OrdinalGEE <a href=' /genmod/generalized_estimating_equations.py#L1897'>setup_ordinal</a>(endog,exog,groups,time)</tt>	Restructure ordinal data as binary indicators so that they can be analysed using generalized estimating equations.
<tt style='background-color:#E8E8E8;'> genmod.OrdinalGEEResults <a href=' /genmod/generalized_estimating_equations.py#L2008'>plot_distribution</a>(ax,exog_values)</tt>	Plot the fitted probabilities of endog in an ordinal model for specifed values of the predictors.
<tt style='background-color:#E8E8E8;'> genmod.NominalGEE <a href=' /genmod/generalized_estimating_equations.py#L2133'>setup_nominal</a>(endog,exog,groups,time)</tt>	Restructure nominal data as binary indicators so that they can be analysed using generalized estimating equations.
<tt style='background-color:#E8E8E8;'> genmod.NominalGEE <a href=' /genmod/generalized_estimating_equations.py#L2208'>mean_deriv</a>(exog,lin_pred)</tt>	Derivative of the expected endog with respect to the parameters.
<tt style='background-color:#E8E8E8;'> genmod.NominalGEE <a href=' /genmod/generalized_estimating_equations.py#L2251'>mean_deriv_exog</a>(exog,params,offset_exposure)</tt>	Derivative of the expected endog with respect to exog for the multinomial model used in analyzing marginal effects.
<tt style='background-color:#E8E8E8;'> genmod.NominalGEEResults <a href=' /genmod/generalized_estimating_equations.py#L2344'>plot_distribution</a>(ax,exog_values)</tt>	Plot the fitted probabilities of endog in an nominal model for specifed values of the predictors.
<tt style='background-color:#E8E8E8;'> genmod._MultinomialLogit <a href=' /genmod/generalized_estimating_equations.py#L2450'>inverse</a>(lpr)</tt>	Inverse of the multinomial logit transform which gives the expected values of the data as a function of the linear.
<tt style='background-color:#E8E8E8;'> genmod.GEEMargins <a href=' /genmod/generalized_estimating_equations.py#L2538'>summary_frame</a>(alpha)</tt>	Returns a dataframe summarizing the marginal effects.
<tt style='background-color:#E8E8E8;'> genmod.GEEMargins <a href=' /genmod/generalized_estimating_equations.py#L2570'>conf_int</a>(alpha)</tt>	Returns the confidence intervals of the marginal effects parameters.
<tt style='background-color:#E8E8E8;'> genmod.GEEMargins <a href=' /genmod/generalized_estimating_equations.py#L2593'>summary</a>(alpha)</tt>	Returns a summary table for marginal effects parameters.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L287'>initialize</a>()</tt>	Initialize a generalized linear model.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L353'>loglike_mu</a>(mu,scale)</tt>	Evaluate the log-likelihood for a generalized linear model.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L360'>loglike</a>(params,scale)</tt>	Evaluate the log-likelihood for a generalized linear model.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L372'>score_obs</a>(params,scale)</tt>	Score first derivative of the loglikelihood for each observation.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L396'>score</a>(params,scale)</tt>	Score first derivative of the loglikelihood function parameters.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L418'>score_factor</a>(params,scale)</tt>	Weights for score for each observation this can be considered as score residuals.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L453'>hessian_factor</a>(params,scale,observed)</tt>	Weights for calculating hessian parameters.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L512'>hessian</a>(params,scale,observed)</tt>	Hessian second derivative of loglikelihood function parameters.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L538'>information</a>(params,scale)</tt>	Fisher information matrix.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L545'>score_test</a>(params_constrained,k_constraints,exog_extra,observed)</tt>	Score test for restrictions or for omitted variables the covariance matrix for the score is based on the hessian i.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L619'>_update_history</a>(tmp_result,mu,history)</tt>	Helper method to update history during iterative fit.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L628'>estimate_scale</a>(mu)</tt>	Estimates the dispersion/scale.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L682'>estimate_tweedie_power</a>(mu,method,low,high)</tt>	Tweedie specific function to estimate scale and the variance parameter.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L720'>predict</a>(params,exog,exposure,offset)</tt>	Return predicted values for a design matrix parameters.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L783'>get_distribution</a>(params,scale,exog,exposure)</tt>	Returns a random number generator for the predictive distribution.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L839'>fit</a>(start_params,maxiter,method,tol)</tt>	Fits a generalized linear model for a given family.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L918'>_fit_gradient</a>(start_params,method,maxiter,tol)</tt>	Fits a generalized linear model for a given family iteratively using the scipy gradient optimizers.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L959'>_fit_irls</a>(start_params,maxiter,tol,scale)</tt>	Fits a generalized linear model for a given family using iteratively reweighted least squares irls.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L1033'>fit_regularized</a>(method,alpha,start_params,refit)</tt>	Return a regularized fit to a linear regression model.
<tt style='background-color:#E8E8E8;'> genmod.GLM <a href=' /genmod/generalized_linear_model.py#L1107'>fit_constrained</a>(constraints,start_params)</tt>	Fit the model subject to linear equality constraints the constraints are of the form r params = q.
<tt style='background-color:#E8E8E8;'> genmod.GLMResults <a href=' /genmod/generalized_linear_model.py#L1475'>summary</a>(yname,xname,title,alpha)</tt>	Summarize the regression results parameters.
<tt style='background-color:#E8E8E8;'> genmod.GLMResults <a href=' /genmod/generalized_linear_model.py#L1546'>summary2</a>(yname,xname,title,alpha)</tt>	Experimental summary for regression results parameters.
<tt style='background-color:#E8E8E8;'> genmod.PredictionResults <a href=' /genmod/_prediction.py#L51'>t_test</a>(value,alternative)</tt>	Z- or t-test for hypothesis that mean is equal to value parameters.
<tt style='background-color:#E8E8E8;'> genmod.PredictionResults <a href=' /genmod/_prediction.py#L87'>conf_int</a>(method,alpha)</tt>	Returns the confidence interval of the value effect of the constraint.
<tt style='background-color:#E8E8E8;'> genmod. <a href=' /genmod/_prediction.py#L149'>get_prediction_glm</a>(exog,transform,weights,row_labels)</tt>	Compute prediction results parameters.
<tt style='background-color:#E8E8E8;'> genmod. <a href=' /genmod/_prediction.py#L239'>params_transform_univariate</a>(params,cov_params,link,transform)</tt>	Results for univariate nonlinear monotonicaly transformed parameters this provides transformed values standard errors and confidence interval.
<tt style='background-color:#E8E8E8;'> genmod.families.Link <a href=' /genmod/families/links.py#L17'>__call__</a>(p)</tt>	Return the value of the link function this is just a placeholder.
<tt style='background-color:#E8E8E8;'> genmod.families.Link <a href=' /genmod/families/links.py#L33'>inverse</a>(z)</tt>	Inverse of the link function just a placeholder.
<tt style='background-color:#E8E8E8;'> genmod.families.Link <a href=' /genmod/families/links.py#L52'>deriv</a>(p)</tt>	Derivative of the link function g' p just a placeholder.
<tt style='background-color:#E8E8E8;'> genmod.families.Link <a href=' /genmod/families/links.py#L67'>deriv2</a>(p)</tt>	Second derivative of the link function g'' p.
<tt style='background-color:#E8E8E8;'> genmod.families.Link <a href=' /genmod/families/links.py#L76'>inverse_deriv</a>(z)</tt>	Derivative of the inverse link function g^ -1 z.
<tt style='background-color:#E8E8E8;'> genmod.families.Logit <a href=' /genmod/families/links.py#L112'>_clean</a>(p)</tt>	Clip logistic values to range eps 1-eps.
<tt style='background-color:#E8E8E8;'> genmod.families.Logit <a href=' /genmod/families/links.py#L128'>__call__</a>(p)</tt>	The logit transform.
<tt style='background-color:#E8E8E8;'> genmod.families.Logit <a href=' /genmod/families/links.py#L149'>inverse</a>(z)</tt>	Inverse of the logit transform.
<tt style='background-color:#E8E8E8;'> genmod.families.Logit <a href=' /genmod/families/links.py#L171'>deriv</a>(p)</tt>	Derivative of the logit transform.
<tt style='background-color:#E8E8E8;'> genmod.families.Logit <a href=' /genmod/families/links.py#L196'>inverse_deriv</a>(z)</tt>	Derivative of the inverse of the logit transform parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Logit <a href=' /genmod/families/links.py#L214'>deriv2</a>(p)</tt>	Second derivative of the logit function.
<tt style='background-color:#E8E8E8;'> genmod.families.Power <a href=' /genmod/families/varfuncs.py#L91'>__call__</a>(p)</tt>	Power transform link function parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Power <a href=' /genmod/families/links.py#L280'>inverse</a>(z)</tt>	Inverse of the power transform link function.
<tt style='background-color:#E8E8E8;'> genmod.families.Power <a href=' /genmod/families/varfuncs.py#L107'>deriv</a>(p)</tt>	Derivative of the power transform.
<tt style='background-color:#E8E8E8;'> genmod.families.Power <a href=' /genmod/families/links.py#L326'>deriv2</a>(p)</tt>	Second derivative of the power transform.
<tt style='background-color:#E8E8E8;'> genmod.families.Power <a href=' /genmod/families/links.py#L349'>inverse_deriv</a>(z)</tt>	Derivative of the inverse of the power transform parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Log <a href=' /genmod/families/links.py#L439'>__call__</a>(p)</tt>	Log transform link function.
<tt style='background-color:#E8E8E8;'> genmod.families.Log <a href=' /genmod/families/links.py#L460'>inverse</a>(z)</tt>	Inverse of log transform link function.
<tt style='background-color:#E8E8E8;'> genmod.families.Log <a href=' /genmod/families/links.py#L480'>deriv</a>(p)</tt>	Derivative of log transform link function.
<tt style='background-color:#E8E8E8;'> genmod.families.Log <a href=' /genmod/families/links.py#L501'>deriv2</a>(p)</tt>	Second derivative of the log transform link function.
<tt style='background-color:#E8E8E8;'> genmod.families.Log <a href=' /genmod/families/links.py#L522'>inverse_deriv</a>(z)</tt>	Derivative of the inverse of the log transform link function.
<tt style='background-color:#E8E8E8;'> genmod.families.CDFLink <a href=' /genmod/families/links.py#L572'>__call__</a>(p)</tt>	Cdf link function parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.CDFLink <a href=' /genmod/families/links.py#L593'>inverse</a>(z)</tt>	The inverse of the cdf link parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.CDFLink <a href=' /genmod/families/links.py#L613'>deriv</a>(p)</tt>	Derivative of cdf link parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.CDFLink <a href=' /genmod/families/links.py#L634'>deriv2</a>(p)</tt>	Second derivative of the link function g'' p.
<tt style='background-color:#E8E8E8;'> genmod.families.CDFLink <a href=' /genmod/families/links.py#L645'>inverse_deriv</a>(z)</tt>	Derivative of the inverse of the cdf transformation link function.
<tt style='background-color:#E8E8E8;'> genmod.families.cauchy <a href=' /genmod/families/links.py#L689'>deriv2</a>(p)</tt>	Second derivative of the cauchy link function.
<tt style='background-color:#E8E8E8;'> genmod.families.CLogLog <a href=' /genmod/families/links.py#L719'>__call__</a>(p)</tt>	C-log-log transform link function.
<tt style='background-color:#E8E8E8;'> genmod.families.CLogLog <a href=' /genmod/families/links.py#L740'>inverse</a>(z)</tt>	Inverse of c-log-log transform link function.
<tt style='background-color:#E8E8E8;'> genmod.families.CLogLog <a href=' /genmod/families/links.py#L761'>deriv</a>(p)</tt>	Derivative of c-log-log transform link function.
<tt style='background-color:#E8E8E8;'> genmod.families.CLogLog <a href=' /genmod/families/links.py#L782'>deriv2</a>(p)</tt>	Second derivative of the c-log-log ink function.
<tt style='background-color:#E8E8E8;'> genmod.families.CLogLog <a href=' /genmod/families/links.py#L802'>inverse_deriv</a>(z)</tt>	Derivative of the inverse of the c-log-log transform link function.
<tt style='background-color:#E8E8E8;'> genmod.families.NegativeBinomial <a href=' /genmod/families/varfuncs.py#L249'>__call__</a>(p)</tt>	Negative binomial transform link function.
<tt style='background-color:#E8E8E8;'> genmod.families.NegativeBinomial <a href=' /genmod/families/links.py#L872'>inverse</a>(z)</tt>	Inverse of the negative binomial transform parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.NegativeBinomial <a href=' /genmod/families/varfuncs.py#L266'>deriv</a>(p)</tt>	Derivative of the negative binomial transform.
<tt style='background-color:#E8E8E8;'> genmod.families.NegativeBinomial <a href=' /genmod/families/links.py#L912'>deriv2</a>(p)</tt>	Second derivative of the negative binomial link function.
<tt style='background-color:#E8E8E8;'> genmod.families.NegativeBinomial <a href=' /genmod/families/links.py#L935'>inverse_deriv</a>(z)</tt>	Derivative of the inverse of the negative binomial transform.
<tt style='background-color:#E8E8E8;'> genmod.families.Family <a href=' /genmod/families/family.py#L41'>_setlink</a>(link)</tt>	Helper method to set the link for a family.
<tt style='background-color:#E8E8E8;'> genmod.families.Family <a href=' /genmod/families/family.py#L68'>_getlink</a>()</tt>	Helper method to get the link for a family.
<tt style='background-color:#E8E8E8;'> genmod.families.Family <a href=' /genmod/families/family.py#L88'>starting_mu</a>(y)</tt>	Starting value for mu in the irls algorithm.
<tt style='background-color:#E8E8E8;'> genmod.families.Family <a href=' /genmod/families/family.py#L114'>weights</a>(mu)</tt>	Weights for irls steps parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Family <a href=' /genmod/families/family.py#L136'>deviance</a>(endog,mu,freq_weights,scale)</tt>	The deviance function evaluated at (endog mu freq_weights mu).
<tt style='background-color:#E8E8E8;'> genmod.families.Family <a href=' /genmod/families/family.py#L172'>resid_dev</a>(endog,mu,freq_weights,scale)</tt>	The deviance residuals parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Family <a href=' /genmod/families/family.py#L198'>fitted</a>(lin_pred)</tt>	Fitted values based on linear predictors lin_pred.
<tt style='background-color:#E8E8E8;'> genmod.families.Family <a href=' /genmod/families/family.py#L217'>predict</a>(mu)</tt>	Linear predictors based on given mu values.
<tt style='background-color:#E8E8E8;'> genmod.families.Family <a href=' /genmod/families/family.py#L234'>loglike</a>(endog,mu,freq_weights,scale)</tt>	The log-likelihood function in terms of the fitted mean response.
<tt style='background-color:#E8E8E8;'> genmod.families.Family <a href=' /genmod/families/family.py#L264'>resid_anscombe</a>(endog,mu)</tt>	The anscombe residuals see also.
<tt style='background-color:#E8E8E8;'> genmod.families.Poisson <a href=' /genmod/families/family.py#L312'>_clean</a>(x)</tt>	Helper function to trim the data so that is in 0 inf notes.
<tt style='background-color:#E8E8E8;'> genmod.families.Poisson <a href=' /genmod/families/family.py#L324'>resid_dev</a>(endog,mu,scale)</tt>	Poisson deviance residual parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Poisson <a href=' /genmod/families/family.py#L353'>deviance</a>(endog,mu,freq_weights,scale)</tt>	Poisson deviance function parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Poisson <a href=' /genmod/families/family.py#L387'>loglike</a>(endog,mu,freq_weights,scale)</tt>	The log-likelihood function in terms of the fitted mean response.
<tt style='background-color:#E8E8E8;'> genmod.families.Poisson <a href=' /genmod/families/family.py#L419'>resid_anscombe</a>(endog,mu)</tt>	Anscombe residuals for the poisson exponential family distribution parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Gaussian <a href=' /genmod/families/family.py#L478'>resid_dev</a>(endog,mu,scale)</tt>	Gaussian deviance residuals parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Gaussian <a href=' /genmod/families/family.py#L506'>deviance</a>(endog,mu,freq_weights,scale)</tt>	Gaussian deviance function parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Gaussian <a href=' /genmod/families/family.py#L535'>loglike</a>(endog,mu,freq_weights,scale)</tt>	The log-likelihood in terms of the fitted mean response.
<tt style='background-color:#E8E8E8;'> genmod.families.Gaussian <a href=' /genmod/families/family.py#L589'>resid_anscombe</a>(endog,mu)</tt>	The anscombe residuals for the gaussian exponential family distribution parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Gamma <a href=' /genmod/families/family.py#L648'>_clean</a>(x)</tt>	Helper function to trim the data so that is in 0 inf notes.
<tt style='background-color:#E8E8E8;'> genmod.families.Gamma <a href=' /genmod/families/family.py#L660'>deviance</a>(endog,mu,freq_weights,scale)</tt>	Gamma deviance function parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Gamma <a href=' /genmod/families/family.py#L690'>resid_dev</a>(endog,mu,scale)</tt>	Gamma deviance residuals parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Gamma <a href=' /genmod/families/family.py#L720'>loglike</a>(endog,mu,freq_weights,scale)</tt>	The log-likelihood function in terms of the fitted mean response.
<tt style='background-color:#E8E8E8;'> genmod.families.Gamma <a href=' /genmod/families/family.py#L758'>resid_anscombe</a>(endog,mu)</tt>	The anscombe residuals for gamma exponential family distribution parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Binomial <a href=' /genmod/families/family.py#L828'>starting_mu</a>(y)</tt>	The starting values for the irls algorithm for the binomial family.
<tt style='background-color:#E8E8E8;'> genmod.families.Binomial <a href=' /genmod/families/family.py#L835'>initialize</a>(endog,freq_weights)</tt>	Initialize the response variable.
<tt style='background-color:#E8E8E8;'> genmod.families.Binomial <a href=' /genmod/families/family.py#L863'>deviance</a>(endog,mu,freq_weights,scale)</tt>	Deviance function for either bernoulli or binomial data.
<tt style='background-color:#E8E8E8;'> genmod.families.Binomial <a href=' /genmod/families/family.py#L917'>resid_dev</a>(endog,mu,scale)</tt>	Binomial deviance residuals parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Binomial <a href=' /genmod/families/family.py#L973'>loglike</a>(endog,mu,freq_weights,scale)</tt>	The log-likelihood function in terms of the fitted mean response.
<tt style='background-color:#E8E8E8;'> genmod.families.Binomial <a href=' /genmod/families/family.py#L1027'>resid_anscombe</a>(endog,mu)</tt>	The anscombe residuals parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.InverseGaussian <a href=' /genmod/families/family.py#L1115'>resid_dev</a>(endog,mu,scale)</tt>	Returns the deviance residuals for the inverse gaussian family.
<tt style='background-color:#E8E8E8;'> genmod.families.InverseGaussian <a href=' /genmod/families/family.py#L1145'>deviance</a>(endog,mu,freq_weights,scale)</tt>	Inverse gaussian deviance function parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.InverseGaussian <a href=' /genmod/families/family.py#L1174'>loglike</a>(endog,mu,freq_weights,scale)</tt>	The log-likelihood function in terms of the fitted mean response.
<tt style='background-color:#E8E8E8;'> genmod.families.InverseGaussian <a href=' /genmod/families/family.py#L1206'>resid_anscombe</a>(endog,mu)</tt>	The anscombe residuals for the inverse gaussian distribution parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.NegativeBinomial <a href=' /genmod/families/varfuncs.py#L246'>_clean</a>(x)</tt>	Helper function to trim the data so that is in 0 inf notes.
<tt style='background-color:#E8E8E8;'> genmod.families.NegativeBinomial <a href=' /genmod/families/family.py#L1299'>deviance</a>(endog,mu,freq_weights,scale)</tt>	Returns the value of the deviance function.
<tt style='background-color:#E8E8E8;'> genmod.families.NegativeBinomial <a href=' /genmod/families/family.py#L1345'>resid_dev</a>(endog,mu,scale)</tt>	Negative binomial deviance residual parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.NegativeBinomial <a href=' /genmod/families/family.py#L1389'>loglike</a>(endog,mu,freq_weights,scale)</tt>	The log-likelihood function in terms of the fitted mean response.
<tt style='background-color:#E8E8E8;'> genmod.families.NegativeBinomial <a href=' /genmod/families/family.py#L1436'>resid_anscombe</a>(endog,mu)</tt>	The anscombe residuals for the negative binomial family parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Tweedie <a href=' /genmod/families/family.py#L1512'>_clean</a>(x)</tt>	Helper function to trim the data so that is in 0 inf notes.
<tt style='background-color:#E8E8E8;'> genmod.families.Tweedie <a href=' /genmod/families/family.py#L1524'>deviance</a>(endog,mu,freq_weights,scale)</tt>	Returns the value of the deviance function.
<tt style='background-color:#E8E8E8;'> genmod.families.Tweedie <a href=' /genmod/families/family.py#L1593'>resid_dev</a>(endog,mu,scale)</tt>	Tweedie deviance residual parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Tweedie <a href=' /genmod/families/family.py#L1655'>loglike</a>(endog,mu,freq_weights,scale)</tt>	The log-likelihood function in terms of the fitted mean response.
<tt style='background-color:#E8E8E8;'> genmod.families.Tweedie <a href=' /genmod/families/family.py#L1683'>resid_anscombe</a>(endog,mu)</tt>	The anscombe residuals for the tweedie family parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.VarianceFunction <a href=' /genmod/families/varfuncs.py#L31'>__call__</a>(mu)</tt>	Default variance function parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.VarianceFunction <a href=' /genmod/families/varfuncs.py#L48'>deriv</a>(mu)</tt>	Derivative of the variance function v' mu.
<tt style='background-color:#E8E8E8;'> genmod.families.Power <a href=' /genmod/families/varfuncs.py#L91'>__call__</a>(mu)</tt>	Power variance function parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Power <a href=' /genmod/families/varfuncs.py#L107'>deriv</a>(mu)</tt>	Derivative of the variance function v' mu may be undefined at zero.
<tt style='background-color:#E8E8E8;'> genmod.families.Binomial <a href=' /genmod/families/varfuncs.py#L181'>__call__</a>(mu)</tt>	Binomial variance function parameters.
<tt style='background-color:#E8E8E8;'> genmod.families.Binomial <a href=' /genmod/families/varfuncs.py#L199'>deriv</a>(mu)</tt>	Derivative of the variance function v' mu.
<tt style='background-color:#E8E8E8;'> genmod.families.NegativeBinomial <a href=' /genmod/families/varfuncs.py#L249'>__call__</a>(mu)</tt>	Negative binomial variance function.
<tt style='background-color:#E8E8E8;'> genmod.families.NegativeBinomial <a href=' /genmod/families/varfuncs.py#L266'>deriv</a>(mu)</tt>	Derivative of the negative binomial variance function.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/summary.py#L258'>_getnames</a>(yname,xname)</tt>	Extract names from model or construct names.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/summary.py#L279'>summary_top</a>(results,title,gleft,gright)</tt>	Generate top table s.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/summary2.py#L300'>summary_params</a>(results,yname,xname,alpha)</tt>	Create a summary table of parameters from results instance parameters.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/summary.py#L487'>summary_params_frame</a>(results,yname,xname,alpha)</tt>	Create a summary table for the parameters parameters.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/summary.py#L551'>summary_params_2d</a>(result,extras,endog_names,exog_names)</tt>	Create summary table of regression parameters with several equations this allows interleaving of parameters with bse and/or tvalues.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/summary.py#L619'>summary_params_2dflat</a>(result,endog_names,exog_names,alpha)</tt>	Summary table for parameters that are 2d e g multi-equation models.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/summary.py#L706'>table_extend</a>(tables,keep_headers)</tt>	Extend a list of simpletables adding titles to header of subtables this function returns the merged table as a deepcopy in contrast to the.
<tt style='background-color:#E8E8E8;'> iolib.Summary <a href=' /iolib/summary2.py#L26'>_repr_html_</a>()</tt>	Display as html in ipython notebook.
<tt style='background-color:#E8E8E8;'> iolib.Summary <a href=' /iolib/summary.py#L804'>add_table_2cols</a>(res,title,gleft,gright)</tt>	Add a double table 2 tables with one column merged horizontally parameters.
<tt style='background-color:#E8E8E8;'> iolib.Summary <a href=' /iolib/summary.py#L835'>add_table_params</a>(res,yname,xname,alpha)</tt>	Create and add a table for the parameter estimates.
<tt style='background-color:#E8E8E8;'> iolib.Summary <a href=' /iolib/summary.py#L872'>add_extra_txt</a>(etext)</tt>	Add additional text that will be added at the end in text format parameters.
<tt style='background-color:#E8E8E8;'> iolib.Summary <a href=' /iolib/summary2.py#L146'>as_text</a>()</tt>	Generate ascii summary table.
<tt style='background-color:#E8E8E8;'> iolib.Summary <a href=' /iolib/summary2.py#L200'>as_latex</a>()</tt>	Generate latex summary table.
<tt style='background-color:#E8E8E8;'> iolib.Summary <a href=' /iolib/summary.py#L914'>as_csv</a>()</tt>	Return tables as string.
<tt style='background-color:#E8E8E8;'> iolib.Summary <a href=' /iolib/summary2.py#L185'>as_html</a>()</tt>	Generate html summary table.
<tt style='background-color:#E8E8E8;'> iolib.Summary <a href=' /iolib/summary2.py#L30'>add_df</a>(df,index,header,float_format)</tt>	Add the contents of a dataframe to summary table.
<tt style='background-color:#E8E8E8;'> iolib.Summary <a href=' /iolib/summary2.py#L52'>add_array</a>(array,align,float_format)</tt>	Add the contents of a numpy array to summary table.
<tt style='background-color:#E8E8E8;'> iolib.Summary <a href=' /iolib/summary2.py#L68'>add_dict</a>(d,ncols,align,float_format)</tt>	Add the contents of a dict to summary table parameters.
<tt style='background-color:#E8E8E8;'> iolib.Summary <a href=' /iolib/summary2.py#L94'>add_text</a>(string)</tt>	Append a note to the bottom of the summary table in ascii tables.
<tt style='background-color:#E8E8E8;'> iolib.Summary <a href=' /iolib/summary2.py#L100'>add_title</a>(title,results)</tt>	Insert a title on top of the summary table if a string is provided.
<tt style='background-color:#E8E8E8;'> iolib.Summary <a href=' /iolib/summary2.py#L117'>add_base</a>(results,alpha,float_format,title)</tt>	Try to construct a basic summary instance.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/summary2.py#L220'>_measure_tables</a>(tables,settings)</tt>	Compare width of ascii tables in a list and calculate padding values.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/summary2.py#L256'>summary_model</a>(results)</tt>	Create a dict with information about the model.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/summary2.py#L358'>_col_params</a>(result,float_format,stars)</tt>	Stack coefficients and standard errors in single column.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/summary2.py#L385'>_col_info</a>(result,info_dict)</tt>	Stack model info in a column.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/summary2.py#L419'>summary_col</a>(results,float_format,model_names,stars)</tt>	Summarize multiple results instances side-by-side coefs and ses parameters.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/table.py#L94'>csv2st</a>(csvfile,headers,stubs,title)</tt>	Return simpletable instance created from the data in csvfile,.
<tt style='background-color:#E8E8E8;'> iolib.SimpleTable <a href=' /iolib/table.py#L225'>_add_headers_stubs</a>(headers,stubs)</tt>	Return none adds headers and stubs to table.
<tt style='background-color:#E8E8E8;'> iolib.SimpleTable <a href=' /iolib/table.py#L242'>insert</a>(idx,row,datatype)</tt>	Return none insert a row into a table.
<tt style='background-color:#E8E8E8;'> iolib.SimpleTable <a href=' /iolib/table.py#L253'>insert_header_row</a>(rownum,headers,dec_below)</tt>	Return none insert a row of headers.
<tt style='background-color:#E8E8E8;'> iolib.SimpleTable <a href=' /iolib/table.py#L269'>insert_stubs</a>(loc,stubs)</tt>	Return none insert column of stubs at column loc.
<tt style='background-color:#E8E8E8;'> iolib.SimpleTable <a href=' /iolib/table.py#L286'>_data2rows</a>(raw_data)</tt>	Return list of row the raw data as rows of cells.
<tt style='background-color:#E8E8E8;'> iolib.SimpleTable <a href=' /iolib/table.py#L304'>pad</a>(s,width,align)</tt>	Deprecated just use the pad function.
<tt style='background-color:#E8E8E8;'> iolib.SimpleTable <a href=' /iolib/table.py#L330'>get_colwidths</a>(output_format)</tt>	Return list the widths of each column.
<tt style='background-color:#E8E8E8;'> iolib.SimpleTable <a href=' /iolib/table.py#L348'>_get_fmt</a>(output_format)</tt>	Return dict the formatting options.
<tt style='background-color:#E8E8E8;'> iolib.SimpleTable <a href=' /iolib/table.py#L361'>as_csv</a>()</tt>	Return string the table in csv format.
<tt style='background-color:#E8E8E8;'> iolib.SimpleTable <a href=' /iolib/table.py#L368'>as_text</a>()</tt>	Return string the table as text.
<tt style='background-color:#E8E8E8;'> iolib.SimpleTable <a href=' /iolib/table.py#L408'>as_latex_tabular</a>(center)</tt>	Return string the table as a latex tabular environment.
<tt style='background-color:#E8E8E8;'> iolib.SimpleTable <a href=' /iolib/table.py#L470'>label_cells</a>(func)</tt>	Return none labels cells based on func.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/table.py#L486'>pad</a>(s,width,align)</tt>	Return string padded with spaces based on alignment parameter.
<tt style='background-color:#E8E8E8;'> iolib.Row <a href=' /iolib/table.py#L528'>add_format</a>(output_format)</tt>	Return none adds row-instance specific formatting.
<tt style='background-color:#E8E8E8;'> iolib.Row <a href=' /iolib/table.py#L539'>insert_stub</a>(loc,stub)</tt>	Return none inserts a stub cell.
<tt style='background-color:#E8E8E8;'> iolib.Row <a href=' /iolib/table.py#L549'>_get_fmt</a>(output_format)</tt>	Return dict the formatting options.
<tt style='background-color:#E8E8E8;'> iolib.Row <a href=' /iolib/table.py#L571'>get_aligns</a>(output_format)</tt>	Return string sequence of column alignments.
<tt style='background-color:#E8E8E8;'> iolib.Row <a href=' /iolib/table.py#L577'>as_string</a>(output_format)</tt>	Return string the formatted row.
<tt style='background-color:#E8E8E8;'> iolib.Row <a href=' /iolib/table.py#L607'>_decorate_below</a>(row_as_string,output_format)</tt>	This really only makes sense for the text and latex output formats.
<tt style='background-color:#E8E8E8;'> iolib.Cell <a href=' /iolib/table.py#L652'>_get_fmt</a>(output_format)</tt>	Return dict the formatting options.
<tt style='background-color:#E8E8E8;'> iolib.EmptyContextManager <a href=' /iolib/openfile.py#L15'>__enter__</a>()</tt>	When entering return the embedded object.
<tt style='background-color:#E8E8E8;'> iolib.EmptyContextManager <a href=' /iolib/openfile.py#L19'>__exit__</a>()</tt>	Don't hide anything.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/openfile.py#L41'>get_file_obj</a>(fname,mode,encoding)</tt>	Light wrapper to handle strings and let files anything else pass through.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/foreign.py#L26'>_datetime_to_stata_elapsed</a>(date,fmt)</tt>	Convert from datetime to sif http //www stata com/help cgi?datetime.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/foreign.py#L64'>_stata_elapsed_date_to_datetime</a>(date,fmt)</tt>	Convert from sif to datetime http //www stata com/help cgi?datetime.
<tt style='background-color:#E8E8E8;'> iolib.StataReader <a href=' /iolib/foreign.py#L305'>file_headers</a>()</tt>	Returns all dta file headers.
<tt style='background-color:#E8E8E8;'> iolib.StataReader <a href=' /iolib/foreign.py#L315'>file_format</a>()</tt>	Returns the file format.
<tt style='background-color:#E8E8E8;'> iolib.StataReader <a href=' /iolib/foreign.py#L331'>file_label</a>()</tt>	Returns the dataset's label.
<tt style='background-color:#E8E8E8;'> iolib.StataReader <a href=' /iolib/foreign.py#L341'>file_timestamp</a>()</tt>	Returns the date and time stata recorded on last file save.
<tt style='background-color:#E8E8E8;'> iolib.StataReader <a href=' /iolib/foreign.py#L351'>variables</a>()</tt>	Returns a list of the dataset's statavariables objects.
<tt style='background-color:#E8E8E8;'> iolib.StataReader <a href=' /iolib/foreign.py#L361'>dataset</a>(as_dict)</tt>	Returns a python generator object for iterating over the dataset.
<tt style='background-color:#E8E8E8;'> iolib.StataReader <a href=' /iolib/foreign.py#L399'>__len__</a>()</tt>	Return the number of observations in the dataset.
<tt style='background-color:#E8E8E8;'> iolib.StataReader <a href=' /iolib/foreign.py#L408'>__getitem__</a>(k)</tt>	Seek to an observation indexed k in the file and return it ordered by stata's output to the.
<tt style='background-color:#E8E8E8;'> iolib.StataReader <a href=' /iolib/foreign.py#L506'>_col_size</a>(k)</tt>	Calculate size of a data record.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/foreign.py#L552'>_dtype_to_stata_type</a>(dtype)</tt>	Converts dtype types to stata types returns the byte of the given ordinal.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/foreign.py#L587'>_dtype_to_default_stata_fmt</a>(dtype)</tt>	Maps numpy dtype to stata's default format for this type not terribly.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/foreign.py#L619'>_pad_bytes</a>(name,length)</tt>	Takes a char string and pads it wih null bytes until it's length chars.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/foreign.py#L625'>_default_names</a>(nvar)</tt>	Returns default stata names v1 v2 vnvar.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/foreign.py#L631'>_convert_datetime_to_stata_type</a>(fmt)</tt>	Converts from one of the stata date formats to a type in type_map.
<tt style='background-color:#E8E8E8;'> iolib.StataWriter <a href=' /iolib/foreign.py#L746'>_write</a>(to_write)</tt>	Helper to call asbytes before writing to file for python 3 compat.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/foreign.py#L967'>genfromdta</a>(fname,missing_flt,encoding,pandas)</tt>	Returns an ndarray or dataframe from a stata dta file.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/foreign.py#L1053'>savetxt</a>(fname,X,names,fmt)</tt>	Save an array to a text file.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/smpickle.py#L5'>save_pickle</a>(obj,fname)</tt>	Save the object to file via pickling.
<tt style='background-color:#E8E8E8;'> iolib. <a href=' /iolib/smpickle.py#L18'>load_pickle</a>(fname)</tt>	Load a previously saved object from file parameters.
<tt style='background-color:#E8E8E8;'> imputation. <a href=' /imputation/ros.py#L25'>_ros_sort</a>(df,observations,censorship,warn)</tt>	This function prepares a dataframe for ros.
<tt style='background-color:#E8E8E8;'> imputation. <a href=' /imputation/ros.py#L70'>cohn_numbers</a>(df,observations,censorship)</tt>	Computes the cohn numbers for the detection limits in the dataset.
<tt style='background-color:#E8E8E8;'> imputation. <a href=' /imputation/ros.py#L206'>_detection_limit_index</a>(obs,cohn)</tt>	Locates the corresponding detection limit for each observation.
<tt style='background-color:#E8E8E8;'> imputation. <a href=' /imputation/ros.py#L241'>_ros_group_rank</a>(df,dl_idx,censorship)</tt>	Ranks each observation within the data groups.
<tt style='background-color:#E8E8E8;'> imputation. <a href=' /imputation/ros.py#L280'>_ros_plot_pos</a>(row,censorship,cohn)</tt>	Ros-specific plotting positions.
<tt style='background-color:#E8E8E8;'> imputation. <a href=' /imputation/ros.py#L324'>_norm_plot_pos</a>(observations)</tt>	Computes standard normal gaussian plotting positions using scipy.
<tt style='background-color:#E8E8E8;'> imputation. <a href=' /imputation/ros.py#L342'>plotting_positions</a>(df,censorship,cohn)</tt>	Compute the plotting positions for the observations.
<tt style='background-color:#E8E8E8;'> imputation. <a href=' /imputation/ros.py#L381'>_impute</a>(df,observations,censorship,transform_in)</tt>	Executes the basic regression on order stat ros proceedure.
<tt style='background-color:#E8E8E8;'> imputation. <a href=' /imputation/ros.py#L437'>_do_ros</a>(df,observations,censorship,transform_in)</tt>	Dataframe-centric function to impute censored valies with ros.
<tt style='background-color:#E8E8E8;'> imputation. <a href=' /imputation/ros.py#L488'>impute_ros</a>(observations,censorship,df,min_uncensored)</tt>	Impute censored dataset using regression on order statistics ros.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L261'>next_sample</a>()</tt>	Returns the next imputed dataset in the imputation process.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L284'>_initial_imputation</a>()</tt>	Use a pmm-like procedure for initial imputed values.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L309'>set_imputer</a>(endog_name,formula,model_class,init_kwds)</tt>	Specify the imputation process for a single variable.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L381'>_store_changes</a>(col,vals)</tt>	Fill in dataset with imputed values.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L398'>update_all</a>(n_iter)</tt>	Perform a specified number of mice iterations.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L422'>get_split_data</a>(vname)</tt>	Return endog and exog for imputation of a given variable.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L489'>get_fitting_data</a>(vname)</tt>	Return the data needed to fit a model for imputation.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L535'>plot_missing_pattern</a>(ax,row_order,column_order,hide_complete_rows)</tt>	Generate an image showing the missing data pattern.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L637'>plot_bivariate</a>(col1_name,col2_name,lowess_args,lowess_min_n)</tt>	Plot observed and imputed values for two variables.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L749'>plot_fit_obs</a>(col_name,lowess_args,lowess_min_n,jitter)</tt>	Plot fitted versus imputed or observed values as a scatterplot.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L847'>plot_imputed_hist</a>(col_name,ax,imp_hist_args,obs_hist_args)</tt>	Display imputed values for one variable as a histogram.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L934'>_perturb_bootstrap</a>(vname)</tt>	Perturbs the model's parameters using a bootstrap.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L955'>_perturb_gaussian</a>(vname)</tt>	Gaussian perturbation of model parameters.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L991'>update</a>(vname)</tt>	Impute missing values for a single variable.
<tt style='background-color:#E8E8E8;'> imputation.MICEData <a href=' /imputation/mice.py#L1021'>impute_pmm</a>(vname)</tt>	Use predictive mean matching to impute missing values.
<tt style='background-color:#E8E8E8;'> imputation.MICE <a href=' /imputation/mice.py#L1173'>next_sample</a>()</tt>	Perform one complete mice iteration.
<tt style='background-color:#E8E8E8;'> imputation.MICE <a href=' /imputation/mice.py#L1215'>fit</a>(n_burnin,n_imputations)</tt>	Fit a model using mice.
<tt style='background-color:#E8E8E8;'> imputation.MICE <a href=' /imputation/mice.py#L1240'>combine</a>()</tt>	Pools mice imputation results.
<tt style='background-color:#E8E8E8;'> imputation.MICEResults <a href=' /imputation/mice.py#L1299'>summary</a>(title,alpha)</tt>	Summarize the results of running mice.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/factorplots.py#L12'>interaction_plot</a>(x,trace,response,func)</tt>	Interaction plot for factor level statistics.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/factorplots.py#L157'>_recode</a>(x,levels)</tt>	Recode categorial data to int factor.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/plot_grids.py#L24'>_make_ellipse</a>(mean,cov,ax,level)</tt>	Support function for scatter_ellipse.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/plot_grids.py#L42'>scatter_ellipse</a>(data,level,varnames,ell_kwds)</tt>	Create a grid of scatter plots with confidence ellipses.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/boxplots.py#L16'>violinplot</a>(data,ax,labels,positions)</tt>	Make a violin plot of each dataset in the data sequence.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/boxplots.py#L199'>_set_ticks_labels</a>(ax,data,labels,positions)</tt>	Set ticks and labels on horizontal axis.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/boxplots.py#L226'>beanplot</a>(data,ax,labels,positions)</tt>	Make a bean plot of each dataset in the data sequence.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/boxplots.py#L384'>_jitter_envelope</a>(pos_data,xvals,violin,side)</tt>	Determine envelope for jitter markers.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/boxplots.py#L402'>_show_legend</a>(ax)</tt>	Utility function to show legend.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/regressionplots.py#L45'>add_lowess</a>(ax,lines_idx,frac)</tt>	Add lowess line to a plot.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/regressionplots.py#L73'>plot_fit</a>(results,exog_idx,y_true,ax)</tt>	Plot fit against one regressor.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/regressionplots.py#L163'>plot_regress_exog</a>(results,exog_idx,fig)</tt>	Plot regression results against one regressor.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/regressionplots.py#L269'>plot_partregress</a>(endog,exog_i,exog_others,data)</tt>	Plot partial regression for a single regressor.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/regressionplots.py#L408'>plot_partregress_grid</a>(results,exog_idx,grid,fig)</tt>	Plot partial regression for a set of regressors.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/regressionplots.py#L493'>plot_ccpr</a>(results,exog_idx,ax)</tt>	Plot ccpr against one regressor.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/regressionplots.py#L556'>plot_ccpr_grid</a>(results,exog_idx,grid,fig)</tt>	Generate ccpr plots against a set of regressors plot in a grid.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/regressionplots.py#L631'>abline_plot</a>(intercept,slope,horiz,vert)</tt>	Plots a line given an intercept and slope.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/regressionplots.py#L722'>influence_plot</a>(results,external,alpha,criterion)</tt>	Plot of influence in regression plots studentized resids vs leverage.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/regressionplots.py#L813'>plot_leverage_resid2</a>(results,alpha,ax)</tt>	Plots leverage statistics vs normalized residuals squared.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/regressionplots.py#L941'>ceres_resids</a>(results,focus_exog,frac,cond_means)</tt>	Calculate the ceres residuals conditional expectation partial residuals for a fitted model.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/regressionplots.py#L1030'>partial_resids</a>(results,focus_exog)</tt>	Returns partial residuals for a fitted model with respect to a 'focus predictor'.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/regressionplots.py#L1078'>added_variable_resids</a>(results,focus_exog,resid_type,use_glm_weights)</tt>	Residualize the endog variable and a 'focus' exog variable in a regression model with respect to the other exog variables.
<tt style='background-color:#E8E8E8;'> graphics.ProbPlot <a href=' /graphics/gofplots.py#L193'>ppplot</a>(xlabel,ylabel,line,other)</tt>	P-p plot of the percentiles probabilities of x versus the probabilities percetiles of a distribution.
<tt style='background-color:#E8E8E8;'> graphics.ProbPlot <a href=' /graphics/gofplots.py#L266'>qqplot</a>(xlabel,ylabel,line,other)</tt>	Q-q plot of the quantiles of x versus the quantiles/ppf of a distribution or the quantiles of another probplot instance.
<tt style='background-color:#E8E8E8;'> graphics.ProbPlot <a href=' /graphics/gofplots.py#L336'>probplot</a>(xlabel,ylabel,line,exceed)</tt>	Probability plot of the unscaled quantiles of x versus the probabilities of a distibution not to be confused with a p-p plot.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/gofplots.py#L406'>qqplot</a>(data,dist,distargs,a)</tt>	Q-q plot of the quantiles of x versus the quantiles/ppf of a distribution.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/gofplots.py#L507'>qqplot_2samples</a>(data1,data2,xlabel,ylabel)</tt>	Q-q plot of two samples' quantiles.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/gofplots.py#L576'>qqline</a>(ax,line,x,y)</tt>	Plot a reference line for a qqplot.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/gofplots.py#L636'>plotting_pos</a>(nobs,a)</tt>	Generates sequence of plotting positions parameters.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/gofplots.py#L664'>_fmt_probplot_axis</a>(ax,dist,nobs)</tt>	Formats a theoretical quantile axis to display the corresponding probabilities on the quantiles' scale.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/gofplots.py#L702'>_do_plot</a>(x,y,dist,line)</tt>	Boiler plate plotting function for the ppplot, qqplot, and probplot methods of the probplot class.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/correlation.py#L15'>plot_corr</a>(dcorr,xnames,ynames,title)</tt>	Plot correlation of many variables in a tight color grid.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/correlation.py#L125'>plot_corr_grid</a>(dcorrs,titles,ncols,normcolor)</tt>	Create a grid of correlation plots.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/tsaplots.py#L51'>plot_acf</a>(x,ax,lags,alpha)</tt>	Plot the autocorrelation function plots lags on the horizontal and the correlations on vertical axis.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/tsaplots.py#L127'>plot_pacf</a>(x,ax,lags,alpha)</tt>	Plot the partial autocorrelation function plots lags on the horizontal and the correlations on vertical axis.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/tsaplots.py#L205'>seasonal_plot</a>(grouped_x,xticklabels,ylabel,ax)</tt>	Consider using one of month_plot or quarter_plot unless you need irregular plotting.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/tsaplots.py#L244'>month_plot</a>(x,dates,ylabel,ax)</tt>	Seasonal plot of monthly data parameters.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/tsaplots.py#L294'>quarter_plot</a>(x,dates,ylabel,ax)</tt>	Seasonal plot of quarterly data parameters.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/utils.py#L7'>_import_mpl</a>()</tt>	This function is not needed outside this utils module.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/utils.py#L17'>create_mpl_ax</a>(ax)</tt>	Helper function for when a single plot axis is needed.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/utils.py#L64'>create_mpl_fig</a>(fig,figsize)</tt>	Helper function for when multiple plot axes are needed.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/utils.py#L94'>maybe_name_or_idx</a>(idx,model)</tt>	Give a name or an integer and return the name and integer location of the column in a design matrix.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/utils.py#L119'>get_data_names</a>(series_or_dataframe)</tt>	Input can be an array or pandas-like will handle 1d array-like but not.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/utils.py#L138'>annotate_axes</a>(index,labels,points,offset_points)</tt>	Annotate axes with labels points offset_points according to the given index.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/mosaicplot.py#L24'>_normalize_split</a>(proportion)</tt>	Return a list of proportions of the available space given the division.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/mosaicplot.py#L54'>_split_rect</a>(x,y,width,height)</tt>	Split the given rectangle in n segments whose proportion is specified along the given axis if a gap is inserted they will be separated by a.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/mosaicplot.py#L93'>_reduce_dict</a>(count_dict,partial_key)</tt>	Make partial sum on a counter dict.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/mosaicplot.py#L103'>_key_splitting</a>(rect_dict,keys,values,key_subset)</tt>	Given a dictionary where each entry is a rectangle a list of key and value count of elements in each category it split each rect accordingly.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/mosaicplot.py#L123'>_tuplify</a>(obj)</tt>	Convert an object in a tuple of strings (even if it is not iterable.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/mosaicplot.py#L134'>_categories_level</a>(keys)</tt>	Use the ordered dict to implement a simple ordered set.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/mosaicplot.py#L146'>_hierarchical_split</a>(count_dict,horizontal,gap)</tt>	Split a square in a hierarchical way given a contingency table.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/mosaicplot.py#L222'>_single_hsv_to_rgb</a>(hsv)</tt>	Transform a color from the hsv space to the rgb.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/mosaicplot.py#L228'>_create_default_properties</a>(data)</tt>	"create the default properties of the mosaic given the data first it will varies the color hue first category then the color.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/mosaicplot.py#L275'>_normalize_data</a>(data,index)</tt>	Normalize the data to a dict with tuples of strings as keys right now it works with.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/mosaicplot.py#L323'>_normalize_dataframe</a>(dataframe,index)</tt>	Take a pandas dataframe and count the element present in the.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/mosaicplot.py#L336'>_statistical_coloring</a>(data)</tt>	Evaluate colors from the indipendence properties of the matrix.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/mosaicplot.py#L385'>_create_labels</a>(rects,horizontal,ax,rotation)</tt>	Find the position of the label for each value of each category.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/mosaicplot.py#L468'>mosaic</a>(data,index,ax,horizontal)</tt>	Create a mosaic plot from a contingency table.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/functional.py#L14'>fboxplot</a>(data,xdata,labels,depth)</tt>	Plot functional boxplot.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/functional.py#L207'>rainbowplot</a>(data,xdata,depth,method)</tt>	Create a rainbow plot for a set of curves.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/functional.py#L313'>banddepth</a>(data,method)</tt>	Calculate the band depth for a set of functional curves.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/plottools.py#L3'>rainbow</a>(n)</tt>	Returns a list of colors sampled at equal intervals over the spectrum.
<tt style='background-color:#E8E8E8;'> graphics. <a href=' /graphics/dotplots.py#L6'>dot_plot</a>(points,intervals,lines,sections)</tt>	Produce a dotplot similar in style to those in cleveland's "visualizing data" book.
<tt style='background-color:#E8E8E8;'> examples. <a href=' /examples/ex_generic_mle.py#L20'>probitloglike</a>(params,endog,exog)</tt>	Log likelihood for the probit.
<tt style='background-color:#E8E8E8;'> examples.MyT <a href=' /examples/ex_generic_mle_t.py#L47'>nloglikeobs</a>(params)</tt>	Loglikelihood of poisson model parameters.
<tt style='background-color:#E8E8E8;'> examples.MyPareto <a href=' /examples/ex_generic_mle_tdist.py#L198'>fit_ks</a>()</tt>	Fit pareto with nested optimization.
<tt style='background-color:#E8E8E8;'> examples.MyPareto <a href=' /examples/ex_generic_mle_tdist.py#L226'>fit_ks1_trim</a>()</tt>	Fit pareto with nested optimization.
<tt style='background-color:#E8E8E8;'> examples.MyPareto <a href=' /examples/ex_generic_mle_tdist.py#L257'>fit_ks1</a>()</tt>	Fit pareto with nested optimization.
<tt style='background-color:#E8E8E8;'> examples.tsa.LagPolynomial <a href=' /examples/tsa/lagpolynomial.py#L24'>flip</a>()</tt>	Reverse polynomial coefficients.
<tt style='background-color:#E8E8E8;'> examples.tsa.LagPolynomial <a href=' /examples/tsa/lagpolynomial.py#L29'>div</a>(other,maxlag)</tt>	Padded division pads numerator with zeros to maxlag.
<tt style='background-color:#E8E8E8;'> examples.tsa. <a href=' /examples/tsa/ar1cholesky.py#L12'>tiny2zero</a>(x,eps)</tt>	Replace abs values smaller than eps by zero makes copy.
<tt style='background-color:#E8E8E8;'> examples.tsa. <a href=' /examples/tsa/try_ar.py#L12'>armaloop</a>(arcoefs,macoefs,x)</tt>	Get arma recursion in simple loop for simplicity assumes that ma polynomial is not longer than the ar-polynomial.
<tt style='background-color:#E8E8E8;'> examples.l1_demo. <a href=' /examples/l1_demo/demo.py#L42'>main</a>()</tt>	Provides a cli for the demo.
<tt style='background-color:#E8E8E8;'> examples.l1_demo. <a href=' /examples/l1_demo/demo.py#L119'>run_demo</a>(mode,base_alpha,N,get_l1_slsqp_results)</tt>	Run the demo and print results.
<tt style='background-color:#E8E8E8;'> examples.l1_demo. <a href=' /examples/l1_demo/demo.py#L195'>run_solvers</a>(model,true_params,alpha,get_l1_slsqp_results)</tt>	Runs the solvers using the specified settings and returns a result string.
<tt style='background-color:#E8E8E8;'> examples.l1_demo. <a href=' /examples/l1_demo/demo.py#L219'>get_summary_str</a>(results,true_params,get_l1_slsqp_results,get_l1_cvxopt_results)</tt>	Gets a string summarizing the results.
<tt style='background-color:#E8E8E8;'> examples.l1_demo. <a href=' /examples/l1_demo/demo.py#L276'>get_RMSE</a>(results,true_params)</tt>	Gets the normalized root mean square error.
<tt style='background-color:#E8E8E8;'> examples.l1_demo. <a href=' /examples/l1_demo/demo.py#L286'>get_logit_endog</a>(true_params,exog,noise_level)</tt>	Gets an endogenous response that is consistent with the true_params perturbed by noise at noise_level.
<tt style='background-color:#E8E8E8;'> examples.l1_demo. <a href=' /examples/l1_demo/demo.py#L308'>get_probit_endog</a>(true_params,exog,noise_level)</tt>	Gets an endogenous response that is consistent with the true_params perturbed by noise at noise_level.
<tt style='background-color:#E8E8E8;'> examples.l1_demo. <a href=' /examples/l1_demo/demo.py#L328'>get_exog</a>(N,num_nonconst_covariates,cor_length)</tt>	Returns an exog array with correlations determined by cor_length.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/descstats.py#L16'>descstats</a>(data,cols,axis)</tt>	Prints descriptive statistics for one or multiple variables.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/predict_functional.py#L131'>_make_exog_from_formula</a>(result,focus_var,summaries,values)</tt>	Create dataframes for exploring a fitted model as a function of one variable.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/predict_functional.py#L197'>_make_exog_from_arrays</a>(result,focus_var,summaries,values)</tt>	Create dataframes for exploring a fitted model as a function of one variable.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/predict_functional.py#L377'>_glm_basic_scr</a>(result,exog,alpha)</tt>	The basic scr from sun et al annals of statistics 2000.
<tt style='background-color:#E8E8E8;'> sandbox.Results <a href=' /sandbox/gam.py#L126'>__call__</a>(exog)</tt>	Expected value check new glm same as mu for given exog.
<tt style='background-color:#E8E8E8;'> sandbox.Results <a href=' /sandbox/gam.py#L132'>linkinversepredict</a>(exog)</tt>	Expected value check new glm same as mu for given exog.
<tt style='background-color:#E8E8E8;'> sandbox.Results <a href=' /sandbox/gam.py#L137'>predict</a>(exog)</tt>	Predict response sum of smoothed components.
<tt style='background-color:#E8E8E8;'> sandbox.Results <a href=' /sandbox/gam.py#L160'>smoothed</a>(exog)</tt>	Get smoothed prediction for each component.
<tt style='background-color:#E8E8E8;'> sandbox.AdditiveModel <a href=' /sandbox/gam.py#L213'>_iter__</a>()</tt>	Initialize iteration ?, should be removed.
<tt style='background-color:#E8E8E8;'> sandbox.AdditiveModel <a href=' /sandbox/gam.py#L221'>next</a>()</tt>	Internal calculation for one fit iteration.
<tt style='background-color:#E8E8E8;'> sandbox.AdditiveModel <a href=' /sandbox/gam.py#L259'>cont</a>()</tt>	Condition to continue iteration loop parameters.
<tt style='background-color:#E8E8E8;'> sandbox.AdditiveModel <a href=' /sandbox/gam.py#L288'>df_resid</a>()</tt>	Degrees of freedom of residuals ddof is sum of all smoothers df.
<tt style='background-color:#E8E8E8;'> sandbox.AdditiveModel <a href=' /sandbox/gam.py#L293'>estimate_scale</a>()</tt>	Estimate standard deviation of residuals.
<tt style='background-color:#E8E8E8;'> sandbox.AdditiveModel <a href=' /sandbox/gam.py#L299'>fit</a>(Y,rtol,maxiter)</tt>	Fit the model to a given endogenous variable y.
<tt style='background-color:#E8E8E8;'> sandbox.Model <a href=' /sandbox/gam.py#L391'>estimate_scale</a>(Y)</tt>	Return pearson's x^2 estimate of scale.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/utils_old.py#L8'>recipr</a>(X)</tt>	Return the reciprocal of an array setting all entries less than or equal to 0 to 0.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/utils_old.py#L17'>mad</a>(a,c,axis)</tt>	Median absolute deviation.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/utils_old.py#L31'>recipr0</a>(X)</tt>	Return the reciprocal of an array setting all entries equal to 0 as 0.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/utils_old.py#L40'>clean0</a>(matrix)</tt>	Erase columns of zeros can save some time in pseudoinverse.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/utils_old.py#L48'>rank</a>(X,cond)</tt>	Return the rank of a matrix x based on its generalized inverse not the svd.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/utils_old.py#L60'>fullrank</a>(X,r)</tt>	Return a matrix whose column span is the same as x.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/utils_old.py#L127'>ECDF</a>(values)</tt>	Return the ecdf of an array as a step function.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/utils_old.py#L138'>monotone_fn_inverter</a>(fn,x,vectorized)</tt>	Given a monotone function fn no checking is done to verify monotonicity and a set of x values return an linearly interpolated approximation.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/bspline.py#L35'>_band2array</a>(a,lower,symmetric,hermitian)</tt>	Take an upper or lower triangular banded matrix and return a numpy array.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/bspline.py#L70'>_upper2lower</a>(ub)</tt>	Convert upper triangular banded matrix to lower banded form.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/bspline.py#L89'>_lower2upper</a>(lb)</tt>	Convert lower triangular banded matrix to upper banded form.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/bspline.py#L108'>_triangle2unit</a>(tb,lower)</tt>	Take a banded triangular matrix and return its diagonal and the unit matrix the banded triangular matrix with 1's on the diagonal.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/bspline.py#L136'>_trace_symbanded</a>(a,b,lower)</tt>	Compute the trace ab for two upper or banded real symmetric matrices stored either in either upper or lower form.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/bspline.py#L159'>_zero_triband</a>(a,lower)</tt>	Explicitly zero out unused elements of a real symmetric banded matrix.
<tt style='background-color:#E8E8E8;'> sandbox.BSpline <a href=' /sandbox/bspline.py#L241'>__call__</a>()</tt>	Evaluate the bspline at a given point yielding a matrix b and return.
<tt style='background-color:#E8E8E8;'> sandbox.BSpline <a href=' /sandbox/bspline.py#L271'>basis_element</a>(x,i,d)</tt>	Evaluate a particular basis element of the bspline or its derivative.
<tt style='background-color:#E8E8E8;'> sandbox.BSpline <a href=' /sandbox/bspline.py#L303'>basis</a>(x,d,lower,upper)</tt>	Evaluate the basis of the bspline or its derivative.
<tt style='background-color:#E8E8E8;'> sandbox.BSpline <a href=' /sandbox/bspline.py#L353'>gram</a>(d)</tt>	Compute gram inner product matrix storing it in lower triangular banded form.
<tt style='background-color:#E8E8E8;'> sandbox.SmoothingSpline <a href=' /sandbox/bspline.py#L422'>fit</a>(y,x,weights,pen)</tt>	Fit the smoothing spline to a set of x y pairs.
<tt style='background-color:#E8E8E8;'> sandbox.SmoothingSpline <a href=' /sandbox/bspline.py#L530'>gcv</a>()</tt>	Generalized cross-validation score of current fit.
<tt style='background-color:#E8E8E8;'> sandbox.SmoothingSpline <a href=' /sandbox/bspline.py#L543'>df_resid</a>()</tt>	Residual degrees of freedom in the fit.
<tt style='background-color:#E8E8E8;'> sandbox.SmoothingSpline <a href=' /sandbox/bspline.py#L554'>df_fit</a>()</tt>	How many degrees of freedom used in the fit? self.
<tt style='background-color:#E8E8E8;'> sandbox.SmoothingSpline <a href=' /sandbox/bspline.py#L563'>trace</a>()</tt>	Trace of the smoothing matrix s pen todo addin a reference to wahba and whoever else i used.
<tt style='background-color:#E8E8E8;'> sandbox.SmoothingSpline <a href=' /sandbox/bspline.py#L577'>fit_target_df</a>(y,x,df,weights)</tt>	Fit smoothing spline with approximately df degrees of freedom used in the fit i.
<tt style='background-color:#E8E8E8;'> sandbox.SmoothingSpline <a href=' /sandbox/bspline.py#L634'>fit_optimize_gcv</a>(y,x,weights,tol)</tt>	Fit smoothing spline trying to optimize gcv.
<tt style='background-color:#E8E8E8;'> sandbox.RLS <a href=' /sandbox/rls.py#L69'>rwexog</a>()</tt>	Whitened exogenous variables augmented with restrictions.
<tt style='background-color:#E8E8E8;'> sandbox.RLS <a href=' /sandbox/rls.py#L85'>inv_rwexog</a>()</tt>	Inverse of self rwexog.
<tt style='background-color:#E8E8E8;'> sandbox.RLS <a href=' /sandbox/rls.py#L93'>rwendog</a>()</tt>	Whitened endogenous variable augmented with restriction parameters.
<tt style='background-color:#E8E8E8;'> sandbox.RLS <a href=' /sandbox/rls.py#L106'>rnorm_cov_params</a>()</tt>	Parameter covariance under restrictions.
<tt style='background-color:#E8E8E8;'> sandbox.RLS <a href=' /sandbox/rls.py#L115'>wrnorm_cov_params</a>()</tt>	Heteroskedasticity-consistent parameter covariance used to calculate white standard errors.
<tt style='background-color:#E8E8E8;'> sandbox.SUR <a href=' /sandbox/sysreg.py#L158'>_compute_sigma</a>(resids)</tt>	Computes the sigma matrix and update the cholesky decomposition.
<tt style='background-color:#E8E8E8;'> sandbox.SUR <a href=' /sandbox/sysreg.py#L185'>whiten</a>(X)</tt>	Sur whiten method.
<tt style='background-color:#E8E8E8;'> sandbox.SUR <a href=' /sandbox/sysreg.py#L210'>fit</a>(igls,tol,maxiter)</tt>	Igls : bool iterate until estimates converge if sigma is none instead of.
<tt style='background-color:#E8E8E8;'> sandbox.Sem2SLS <a href=' /sandbox/sysreg.py#L335'>whiten</a>(Y)</tt>	Runs the first stage of the 2sls.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/multilinear.py#L23'>_model2dataframe</a>(model_endog,model_exog,model_type)</tt>	Return a series containing the summary of a linear model.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/multilinear.py#L46'>multiOLS</a>(model,dataframe,column_list,method)</tt>	Apply a linear model to several endogenous variables on a dataframe take a linear model definition via formula and a dataframe that will be.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/multilinear.py#L190'>_test_group</a>(pvalues,group_name,group,exact)</tt>	Test if the objects in the group are different from the general set.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/multilinear.py#L226'>multigroup</a>(pvals,groups,exact,keep_all)</tt>	Test if the given groups are different from the total partition.
<tt style='background-color:#E8E8E8;'> sandbox.Contrast <a href=' /sandbox/contrast_old.py#L77'>compute_matrix</a>()</tt>	Construct a contrast matrix c so that colspan(dot d c = colspan(dot(d dot(pinv d t))).
<tt style='background-color:#E8E8E8;'> sandbox.Contrast <a href=' /sandbox/contrast_old.py#L106'>_get_matrix</a>()</tt>	This will fail if the formula needs arguments to construct the design.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/contrast_old.py#L116'>contrastfromcols</a>(L,D,pseudo)</tt>	From an n x p design matrix d and a matrix l tries to determine a p x q contrast matrix c which.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/infotheo.py#L45'>logsumexp</a>(a,axis)</tt>	Compute the log of the sum of exponentials log(e^{a_1}+ e^{a_n}) of a.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/infotheo.py#L81'>_isproperdist</a>(X)</tt>	Checks to see if x is a proper probability distribution.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/infotheo.py#L91'>discretize</a>(X,method,nbins)</tt>	Discretize x parameters.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/infotheo.py#L131'>logbasechange</a>(a,b)</tt>	There is a one-to-one transformation of the entropy value from.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/infotheo.py#L144'>natstobits</a>(X)</tt>	Converts from nats to bits.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/infotheo.py#L150'>bitstonats</a>(X)</tt>	Converts from bits to nats.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/infotheo.py#L158'>shannonentropy</a>(px,logbase)</tt>	This is shannon's entropy parameters.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/infotheo.py#L193'>shannoninfo</a>(px,logbase)</tt>	Shannon's information parameters.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/infotheo.py#L215'>condentropy</a>(px,py,pxpy,logbase)</tt>	Return the conditional entropy of x given y.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/infotheo.py#L247'>mutualinfo</a>(px,py,pxpy,logbase)</tt>	Returns the mutual information between x and y.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/infotheo.py#L277'>corrent</a>(px,py,pxpy,logbase)</tt>	An information theoretic correlation measure.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/infotheo.py#L317'>covent</a>(px,py,pxpy,logbase)</tt>	An information theoretic covariance measure.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/infotheo.py#L361'>renyientropy</a>(px,alpha,logbase,measure)</tt>	Renyi's generalized entropy parameters.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/infotheo.py#L412'>gencrossentropy</a>(px,py,pxpy,alpha)</tt>	Generalized cross-entropy measures.
<tt style='background-color:#E8E8E8;'> sandbox.KaplanMeier <a href=' /sandbox/survival2.py#L194'>fit</a>()</tt>	Calculate the kaplan-meier estimator of the survival function.
<tt style='background-color:#E8E8E8;'> sandbox.KaplanMeier <a href=' /sandbox/survival2.py#L211'>plot</a>()</tt>	Plot the estimated survival curves after using this method.
<tt style='background-color:#E8E8E8;'> sandbox.KaplanMeier <a href=' /sandbox/survival2.py#L230'>summary</a>()</tt>	Print a set of tables containing the estimates of the survival.
<tt style='background-color:#E8E8E8;'> sandbox.KaplanMeier <a href=' /sandbox/survival2.py#L241'>fitting_proc</a>(group)</tt>	For internal use.
<tt style='background-color:#E8E8E8;'> sandbox.KaplanMeier <a href=' /sandbox/survival2.py#L278'>plotting_proc</a>(g)</tt>	For internal use.
<tt style='background-color:#E8E8E8;'> sandbox.KaplanMeier <a href=' /sandbox/survival2.py#L301'>summary_proc</a>(g)</tt>	For internal use.
<tt style='background-color:#E8E8E8;'> sandbox.KaplanMeier <a href=' /sandbox/survival2.py#L315'>test_diff</a>(groups,rho,weight)</tt>	Test_diff(groups rho=0) test for difference between survival curves.
<tt style='background-color:#E8E8E8;'> sandbox.Pca <a href=' /sandbox/pca.py#L24'>__init__</a>(data,names)</tt>	P x n matrix input.
<tt style='background-color:#E8E8E8;'> sandbox.Pca <a href=' /sandbox/pca.py#L45'>getCovarianceMatrix</a>()</tt>	Returns the covariance matrix for the dataset.
<tt style='background-color:#E8E8E8;'> sandbox.Pca <a href=' /sandbox/pca.py#L51'>getEigensystem</a>()</tt>	Returns a tuple of eigenvalues eigenvectors for the data set.
<tt style='background-color:#E8E8E8;'> sandbox.Pca <a href=' /sandbox/pca.py#L68'>getEnergies</a>()</tt>	"energies" are just normalized eigenvectors.
<tt style='background-color:#E8E8E8;'> sandbox.Pca <a href=' /sandbox/pca.py#L75'>plot2d</a>(ix,iy,clf)</tt>	Generates a 2-dimensional plot of the data set and principle components using matplotlib.
<tt style='background-color:#E8E8E8;'> sandbox.Pca <a href=' /sandbox/pca.py#L101'>plot3d</a>(ix,iy,iz,clf)</tt>	Generates a 3-dimensional plot of the data set and principle components using mayavi.
<tt style='background-color:#E8E8E8;'> sandbox.Pca <a href=' /sandbox/pca.py#L121'>sigclip</a>(sigs)</tt>	Clips out all data points that are more than a certain number of standard deviations from the mean.
<tt style='background-color:#E8E8E8;'> sandbox.Pca <a href=' /sandbox/pca.py#L144'>project</a>(vals,enthresh,nPCs,cumen)</tt>	Projects the normalized values onto the components enthresh npcs and cumen determine how many pcs to use.
<tt style='background-color:#E8E8E8;'> sandbox.Pca <a href=' /sandbox/pca.py#L179'>deproject</a>(A,normed)</tt>	Input is an n x q array where q <= p.
<tt style='background-color:#E8E8E8;'> sandbox.Pca <a href=' /sandbox/pca.py#L205'>subtractPC</a>(pc,vals)</tt>	Pc can be a scalar or any sequence of pc indecies if vals is none the source data is self.
<tt style='background-color:#E8E8E8;'> sandbox.Term <a href=' /sandbox/formula.py#L56'>__pow__</a>(power)</tt>	Raise the quantitative term's values to an integer power i e.
<tt style='background-color:#E8E8E8;'> sandbox.Term <a href=' /sandbox/formula.py#L102'>__str__</a>()</tt>	'<term %s>' % self termname.
<tt style='background-color:#E8E8E8;'> sandbox.Term <a href=' /sandbox/formula.py#L108'>__add__</a>(other)</tt>	Formula self + formula other.
<tt style='background-color:#E8E8E8;'> sandbox.Term <a href=' /sandbox/formula.py#L118'>__mul__</a>(other)</tt>	Formula self * formula other.
<tt style='background-color:#E8E8E8;'> sandbox.Term <a href=' /sandbox/formula.py#L134'>names</a>()</tt>	Return the names of the columns in design associated to the terms i.
<tt style='background-color:#E8E8E8;'> sandbox.Term <a href=' /sandbox/formula.py#L144'>__call__</a>()</tt>	Return the columns associated to self in a design matrix.
<tt style='background-color:#E8E8E8;'> sandbox.Factor <a href=' /sandbox/formula.py#L169'>__init__</a>(termname,keys,ordinal)</tt>	Factor is initialized with keys representing all valid levels of the factor.
<tt style='background-color:#E8E8E8;'> sandbox.Factor <a href=' /sandbox/formula.py#L199'>get_columns</a>()</tt>	Calling function for factor instance.
<tt style='background-color:#E8E8E8;'> sandbox.Factor <a href=' /sandbox/formula.py#L226'>values</a>()</tt>	Return the keys of the factor rather than the columns of the design matrix.
<tt style='background-color:#E8E8E8;'> sandbox.Factor <a href=' /sandbox/formula.py#L237'>verify</a>(values)</tt>	Verify that all values correspond to valid keys in self.
<tt style='background-color:#E8E8E8;'> sandbox.Factor <a href=' /sandbox/formula.py#L245'>__add__</a>(other)</tt>	Formula self + formula other when adding 'intercept' to a factor this just returns.
<tt style='background-color:#E8E8E8;'> sandbox.Factor <a href=' /sandbox/formula.py#L260'>main_effect</a>(reference)</tt>	Return the 'main effect' columns of a factor choosing an optional reference key.
<tt style='background-color:#E8E8E8;'> sandbox.Factor <a href=' /sandbox/formula.py#L299'>__getitem__</a>(key)</tt>	Retrieve the column corresponding to key in a formula.
<tt style='background-color:#E8E8E8;'> sandbox.Quantitative <a href=' /sandbox/formula.py#L344'>__call__</a>()</tt>	A quantitative is just like term except there is an additional transformation self.
<tt style='background-color:#E8E8E8;'> sandbox.Formula <a href=' /sandbox/formula.py#L376'>__init__</a>(termlist,namespace)</tt>	Create a formula from either i.
<tt style='background-color:#E8E8E8;'> sandbox.Formula <a href=' /sandbox/formula.py#L397'>__str__</a>()</tt>	String representation of list of termnames of a formula.
<tt style='background-color:#E8E8E8;'> sandbox.Formula <a href=' /sandbox/formula.py#L406'>__call__</a>()</tt>	Create transpose of the design matrix of the formula within namespace.
<tt style='background-color:#E8E8E8;'> sandbox.Formula <a href=' /sandbox/formula.py#L465'>hasterm</a>(query_term)</tt>	Determine whether a given term is in a formula.
<tt style='background-color:#E8E8E8;'> sandbox.Formula <a href=' /sandbox/formula.py#L492'>termcolumns</a>(query_term,dict)</tt>	Return a list of the indices of all columns associated to a given term.
<tt style='background-color:#E8E8E8;'> sandbox.Formula <a href=' /sandbox/formula.py#L510'>names</a>()</tt>	Return a list of the names in the formula the order of the.
<tt style='background-color:#E8E8E8;'> sandbox.Formula <a href=' /sandbox/formula.py#L522'>termnames</a>()</tt>	Return a list of the term names in the formula these.
<tt style='background-color:#E8E8E8;'> sandbox.Formula <a href=' /sandbox/formula.py#L539'>__mul__</a>(other,nested)</tt>	This returns a formula whose columns are the pairwise product of the columns of self and other.
<tt style='background-color:#E8E8E8;'> sandbox.Formula <a href=' /sandbox/formula.py#L611'>__add__</a>(other)</tt>	Return a formula whose columns are the concatenation of the columns of self and other.
<tt style='background-color:#E8E8E8;'> sandbox.Formula <a href=' /sandbox/formula.py#L635'>__sub__</a>(other)</tt>	Return a formula with all terms in other removed from self.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/formula.py#L655'>isnested</a>(A,B,namespace)</tt>	Is factor b nested within factor a or vice versa a very crude test which depends on the namespace.
<tt style='background-color:#E8E8E8;'> sandbox. <a href=' /sandbox/formula.py#L711'>interactions</a>(terms,order)</tt>	Output all pairwise interactions of given order of a sequence of terms.
<tt style='background-color:#E8E8E8;'> sandbox.mcevaluate. <a href=' /sandbox/mcevaluate/arma.py#L9'>mcarma22</a>(niter,nsample,ar,ma)</tt>	Run monte carlo for arma 2 2.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/try_var_convolve.py#L50'>arfilter_old</a>(x,a)</tt>	Apply an autoregressive filter to a series x x can be 2d a can be 1d 2d or 3d.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/try_var_convolve.py#L153'>fftconvolve_old</a>(in1,in2,in3,mode)</tt>	Convolve two n-dimensional arrays using fft see convolve.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L83'>padarr</a>(arr,maxlag,atend)</tt>	Pad 1d array with zeros at end to have length maxlag function that is a method no self used.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L114'>pad</a>(maxlag)</tt>	Construct ar and ma polynomials that are zero-padded to a common length.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L134'>fftar</a>(n)</tt>	Fourier transform of ar polynomial zero-padded at end to n.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L151'>fftma</a>(n)</tt>	Fourier transform of ma polynomial zero-padded at end to n.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L169'>fftarma</a>(n)</tt>	Fourier transform of arma polynomial zero-padded at end to n the fourier transform of the arma process is calculated as the ratio.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L189'>spd</a>(npos)</tt>	Raw spectral density returns fourier transform n is number of points in positive spectrum the actual number of points.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L201'>spdshift</a>(n)</tt>	Power spectral density using fftshift.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L216'>spddirect</a>(n)</tt>	Power spectral density using padding to length n done by fft.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L229'>_spddirect2</a>(n)</tt>	This looks bad maybe with an fftshift.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L237'>spdroots</a>(w)</tt>	Spectral density for frequency using polynomial roots.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L244'>spdroots_</a>(arroots,maroots,w)</tt>	Spectral density for frequency using polynomial roots.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L273'>spdpoly</a>(w,nma)</tt>	Spectral density from ma polynomial representation for arma process references.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L285'>filter</a>(x)</tt>	Filter a timeseries with the arma filter padding with zero is missing in example i needed the padding to get.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L308'>filter2</a>(x,pad)</tt>	Filter a time series using fftconvolve3 with arma filter padding of x currently works only if x is 1d.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L329'>acf2spdfreq</a>(acovf,nfreq,w)</tt>	Not really a method just for comparison not efficient for large n or long acf.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L343'>invpowerspd</a>(n)</tt>	Autocovariance from spectral density scaling is correct but n needs to be large for numerical accuracy.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArmaFft <a href=' /sandbox/tsa/fftarma.py#L360'>spdmapoly</a>(w,twosided)</tt>	Ma only need division for ar use lagpolynomial.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/movstat.py#L61'>movorder</a>(x,order,windsize,lag)</tt>	Moving order statistics.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/movstat.py#L107'>check_movorder</a>()</tt>	Graphical test for movorder.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/movstat.py#L160'>movmean</a>(x,windowsize,lag)</tt>	Moving window mean.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/movstat.py#L187'>movvar</a>(x,windowsize,lag)</tt>	Moving window variance.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/movstat.py#L211'>movmoment</a>(x,k,windowsize,lag)</tt>	Non-central moment parameters.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/example_arma.py#L45'>demean</a>(x,axis)</tt>	Return x minus its mean along the specified axis.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/example_arma.py#L54'>detrend_mean</a>(x)</tt>	Return x minus the mean x.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/example_arma.py#L58'>detrend_none</a>(x)</tt>	Return x no detrending.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/example_arma.py#L62'>detrend_linear</a>(y)</tt>	Return y minus best fit line 'linear' detrending.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/example_arma.py#L71'>acovf_explicit</a>(ar,ma,nobs)</tt>	Add correlation of ma representation explicitely.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/example_arma.py#L184'>autocorr</a>(s,axis)</tt>	Returns the autocorrelation of signal s at all lags adheres to the.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/example_arma.py#L198'>norm_corr</a>(x,y,mode)</tt>	Returns the correlation between two ndarrays by calling np correlate in.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/example_arma.py#L210'>pltacorr</a>(x)</tt>	Call signature : acorr(x normed=true detrend=detrend_none usevlines=true.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/example_arma.py#L272'>pltxcorr</a>(x,y,normed,detrend)</tt>	Call signature : def xcorr(self x y normed=true detrend=detrend_none.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/varma.py#L35'>VAR</a>(x,B,const)</tt>	Multivariate linear filter parameters.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/varma.py#L80'>VARMA</a>(x,B,C,const)</tt>	Multivariate linear filter x txk.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/garch.py#L90'>sumofsq</a>(x,axis)</tt>	Helper function to calculate sum of squares along first axis.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.LikelihoodModel <a href=' /sandbox/tsa/garch.py#L130'>initialize</a>()</tt>	Initialize possibly re-initialize a model instance for.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.LikelihoodModel <a href=' /sandbox/tsa/garch.py#L140'>loglike</a>(params)</tt>	Log-likelihood of model.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.LikelihoodModel <a href=' /sandbox/tsa/garch.py#L146'>score</a>(params)</tt>	Score vector of model.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.LikelihoodModel <a href=' /sandbox/tsa/garch.py#L154'>information</a>(params)</tt>	Fisher information matrix of model returns -hessian of loglike evaluated at params.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.LikelihoodModel <a href=' /sandbox/tsa/garch.py#L162'>hessian</a>(params)</tt>	The hessian matrix of the model.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.LikelihoodModel <a href=' /sandbox/tsa/garch.py#L168'>fit</a>(start_params,method,maxiter,tol)</tt>	Fit method for likelihood based models parameters.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.TSMLEModel <a href=' /sandbox/tsa/garch.py#L253'>loglike</a>(params)</tt>	Loglikelihood for timeseries model.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.TSMLEModel <a href=' /sandbox/tsa/garch.py#L264'>score</a>(params)</tt>	Score vector for arma model.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.TSMLEModel <a href=' /sandbox/tsa/garch.py#L273'>hessian</a>(params)</tt>	Hessian of arma model currently uses numdifftools.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.TSMLEModel <a href=' /sandbox/tsa/garch.py#L282'>fit</a>(start_params,maxiter,method,tol)</tt>	Estimate model by minimizing negative loglikelihood.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.Garch0 <a href=' /sandbox/tsa/garch.py#L358'>loglike</a>(params)</tt>	Loglikelihood for timeseries model notes.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.GarchX <a href=' /sandbox/tsa/garch.py#L484'>loglike</a>(params)</tt>	Loglikelihood for timeseries model notes.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.Garch <a href=' /sandbox/tsa/garch.py#L585'>loglike</a>(params)</tt>	Loglikelihood for timeseries model.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/garch.py#L638'>gjrconvertparams</a>(params,nar,nma)</tt>	Flat to matrix.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.AR <a href=' /sandbox/tsa/garch.py#L688'>loglike</a>(params)</tt>	The unconditional loglikelihood of an ar p process notes.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.AR <a href=' /sandbox/tsa/garch.py#L746'>information</a>(params)</tt>	Not implemented yet.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.AR <a href=' /sandbox/tsa/garch.py#L752'>hessian</a>(params)</tt>	Returns numerical hessian for now depends on numdifftools.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.AR <a href=' /sandbox/tsa/garch.py#L760'>fit</a>(start_params,method,maxiter,tol)</tt>	Fit the unconditional maximum likelihood of an ar p process.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.Arma <a href=' /sandbox/tsa/garch.py#L854'>loglike</a>(params)</tt>	Loglikelihood for arma model.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.Arma <a href=' /sandbox/tsa/garch.py#L883'>score</a>(params)</tt>	Score vector for arma model.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.Arma <a href=' /sandbox/tsa/garch.py#L894'>hessian</a>(params)</tt>	Hessian of arma model currently uses numdifftools.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/garch.py#L910'>generate_kindofgarch</a>(nobs,ar,ma,mu)</tt>	Simulate garch like process but not squared errors in arma.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/garch.py#L934'>generate_garch</a>(nobs,ar,ma,mu)</tt>	Simulate standard garch.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/garch.py#L955'>generate_gjrgarch</a>(nobs,ar,ma,mu)</tt>	Simulate gjr garch process.
<tt style='background-color:#E8E8E8;'> sandbox.tsa. <a href=' /sandbox/tsa/garch.py#L1033'>miso_lfilter_old</a>(ar,ma,x,useic)</tt>	Use nd convolution to merge inputs then use lfilter to produce output.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.Diffusion <a href=' /sandbox/tsa/diffusion.py#L64'>simulateW</a>(nobs,T,dt,nrepl)</tt>	Generate sample of wiener process.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.Diffusion <a href=' /sandbox/tsa/diffusion.py#L74'>expectedsim</a>(func,nobs,T,dt)</tt>	Get expectation of a function of a wiener process by simulation.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.AffineDiffusion <a href=' /sandbox/tsa/diffusion.py#L113'>simEM</a>(xzero,nobs,T,dt)</tt>	From higham 2001.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ExactDiffusion <a href=' /sandbox/tsa/diffusion.py#L170'>exactprocess</a>(xzero,nobs,ddt,nrepl)</tt>	Ddt : discrete delta t.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.ArithmeticBrownian <a href=' /sandbox/tsa/diffusion.py#L208'>exactprocess</a>(nobs,xzero,ddt,nrepl)</tt>	Ddt : discrete delta t.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.OUprocess <a href=' /sandbox/tsa/diffusion.py#L286'>exactprocess</a>(xzero,nobs,ddt,nrepl)</tt>	Ddt : discrete delta t.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.OUprocess <a href=' /sandbox/tsa/diffusion.py#L315'>fitls</a>(data,dt)</tt>	Assumes data is 1d univariate time series.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.SchwartzOne <a href=' /sandbox/tsa/diffusion.py#L355'>exactprocess</a>(xzero,nobs,ddt,nrepl)</tt>	Uses exact solution for log of process.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.SchwartzOne <a href=' /sandbox/tsa/diffusion.py#L369'>fitls</a>(data,dt)</tt>	Assumes data is 1d univariate time series.
<tt style='background-color:#E8E8E8;'> sandbox.tsa.examples. <a href=' /sandbox/tsa/examples/try_ld_nitime.py#L10'>levinson_durbin_nitime</a>(s,order,isacov)</tt>	Levinson-durbin recursion for autoregressive processes.
<tt style='background-color:#E8E8E8;'> sandbox.panel.PanelSample <a href=' /sandbox/panel/random_panel.py#L119'>generate_panel</a>()</tt>	Generate endog for a random panel dataset with within correlation.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/correlation_structures.py#L19'>corr_equi</a>(k_vars,rho)</tt>	Create equicorrelated correlation matrix with rho on off diagonal.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/correlation_structures.py#L40'>corr_ar</a>(k_vars,ar)</tt>	Create autoregressive correlation matrix.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/correlation_structures.py#L61'>corr_arma</a>(k_vars,ar,ma)</tt>	Create arma correlation matrix.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/correlation_structures.py#L84'>corr2cov</a>(corr,std)</tt>	Convert correlation matrix to covariance matrix parameters.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/correlation_structures.py#L102'>whiten_ar</a>(x,ar_coefs)</tt>	Whiten a series of columns according to an ar p covariance structure.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/correlation_structures.py#L139'>yule_walker_acov</a>(acov,order,method,df)</tt>	Estimate ar p parameters from acovf using yule-walker equation.
<tt style='background-color:#E8E8E8;'> sandbox.panel.Unit <a href=' /sandbox/panel/mixed.py#L70'>_compute_S</a>(D,sigma)</tt>	Covariance of observations (nobs_i nobs_i) jp check display (3.
<tt style='background-color:#E8E8E8;'> sandbox.panel.Unit <a href=' /sandbox/panel/mixed.py#L77'>_compute_W</a>()</tt>	Inverse covariance of observations (nobs_i nobs_i) jp check display (3.
<tt style='background-color:#E8E8E8;'> sandbox.panel.Unit <a href=' /sandbox/panel/mixed.py#L83'>compute_P</a>(Sinv)</tt>	Projection matrix (nobs_i nobs_i) (m in regression ?) jp check guessing display (3.
<tt style='background-color:#E8E8E8;'> sandbox.panel.Unit <a href=' /sandbox/panel/mixed.py#L92'>_compute_r</a>(alpha)</tt>	Residual after removing fixed effects display (3.
<tt style='background-color:#E8E8E8;'> sandbox.panel.Unit <a href=' /sandbox/panel/mixed.py#L99'>_compute_b</a>(D)</tt>	Coefficients for random effects/coefficients display (3.
<tt style='background-color:#E8E8E8;'> sandbox.panel.Unit <a href=' /sandbox/panel/mixed.py#L107'>fit</a>(a,D,sigma)</tt>	Compute unit specific parameters in laird lange stram (see help unit.
<tt style='background-color:#E8E8E8;'> sandbox.panel.Unit <a href=' /sandbox/panel/mixed.py#L120'>compute_xtwy</a>()</tt>	Utility function to compute x^twy (transposed ?) for unit instance.
<tt style='background-color:#E8E8E8;'> sandbox.panel.Unit <a href=' /sandbox/panel/mixed.py#L126'>compute_xtwx</a>()</tt>	Utility function to compute x^twx for unit instance.
<tt style='background-color:#E8E8E8;'> sandbox.panel.Unit <a href=' /sandbox/panel/mixed.py#L132'>cov_random</a>(D,Sinv)</tt>	Approximate covariance of estimates of random effects just after.
<tt style='background-color:#E8E8E8;'> sandbox.panel.Unit <a href=' /sandbox/panel/mixed.py#L150'>logL</a>(a,ML)</tt>	Individual contributions to the log-likelihood tries to return reml contribution by default though this requires estimated.
<tt style='background-color:#E8E8E8;'> sandbox.panel.Unit <a href=' /sandbox/panel/mixed.py#L171'>deviance</a>(ML)</tt>	Deviance defined as 2 times the negative loglikelihood.
<tt style='background-color:#E8E8E8;'> sandbox.panel.OneWayMixed <a href=' /sandbox/panel/mixed.py#L275'>_compute_a</a>()</tt>	Fixed effects parameters display (3.
<tt style='background-color:#E8E8E8;'> sandbox.panel.OneWayMixed <a href=' /sandbox/panel/mixed.py#L292'>_compute_sigma</a>(ML)</tt>	Estimate sigma if ml is true return the ml estimate of sigma.
<tt style='background-color:#E8E8E8;'> sandbox.panel.OneWayMixed <a href=' /sandbox/panel/mixed.py#L316'>_compute_D</a>(ML)</tt>	Estimate random effects covariance d.
<tt style='background-color:#E8E8E8;'> sandbox.panel.OneWayMixed <a href=' /sandbox/panel/mixed.py#L339'>cov_fixed</a>()</tt>	Approximate covariance of estimates of fixed effects.
<tt style='background-color:#E8E8E8;'> sandbox.panel.OneWayMixed <a href=' /sandbox/panel/mixed.py#L349'>cov_random</a>()</tt>	Estimate random effects covariance d.
<tt style='background-color:#E8E8E8;'> sandbox.panel.OneWayMixed <a href=' /sandbox/panel/mixed.py#L359'>params</a>()</tt>	Estimated coefficients for exogeneous variables or fixed effects see _compute_a alias for self.
<tt style='background-color:#E8E8E8;'> sandbox.panel.OneWayMixed <a href=' /sandbox/panel/mixed.py#L368'>params_random_units</a>()</tt>	Random coefficients for each unit.
<tt style='background-color:#E8E8E8;'> sandbox.panel.OneWayMixed <a href=' /sandbox/panel/mixed.py#L375'>cov_params</a>()</tt>	Estimated covariance for coefficients for exogeneous variables or fixed effects.
<tt style='background-color:#E8E8E8;'> sandbox.panel.OneWayMixed <a href=' /sandbox/panel/mixed.py#L384'>bse</a>()</tt>	Standard errors of estimated coefficients for exogeneous variables fixed.
<tt style='background-color:#E8E8E8;'> sandbox.panel.OneWayMixed <a href=' /sandbox/panel/mixed.py#L394'>deviance</a>(ML)</tt>	Deviance defined as 2 times the negative loglikelihood.
<tt style='background-color:#E8E8E8;'> sandbox.panel.OneWayMixed <a href=' /sandbox/panel/mixed.py#L401'>logL</a>(ML)</tt>	Return log-likelihood reml by default.
<tt style='background-color:#E8E8E8;'> sandbox.panel.OneWayMixed <a href=' /sandbox/panel/mixed.py#L443'>cont</a>(ML,rtol,params_rtol,params_atol)</tt>	Convergence check for iterative estimation.
<tt style='background-color:#E8E8E8;'> sandbox.panel.OneWayMixedResults <a href=' /sandbox/panel/mixed.py#L536'>plot_random_univariate</a>(bins,use_loc)</tt>	Create plot of marginal distribution of random effects parameters.
<tt style='background-color:#E8E8E8;'> sandbox.panel.OneWayMixedResults <a href=' /sandbox/panel/mixed.py#L600'>plot_scatter_pairs</a>(idx1,idx2,title,ax)</tt>	Create scatter plot of two random effects parameters.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/panelmod.py#L20'>group</a>(X)</tt>	Returns unique numeric values for groups without sorting.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/panelmod.py#L39'>repanel_cov</a>(groups,sigmas)</tt>	Calculate error covariance matrix for random effects model parameters.
<tt style='background-color:#E8E8E8;'> sandbox.panel.PanelModel <a href=' /sandbox/panel/panelmod.py#L122'>initialize</a>(endog,exog,panel,time)</tt>	Initialize plain array model.
<tt style='background-color:#E8E8E8;'> sandbox.panel.PanelModel <a href=' /sandbox/panel/panelmod.py#L200'>_group_mean</a>(X,index,counts,dummies)</tt>	Get group means of x by time or by panel.
<tt style='background-color:#E8E8E8;'> sandbox.panel.PanelModel <a href=' /sandbox/panel/panelmod.py#L232'>fit</a>(model,method,effects)</tt>	Method : lsdv demeaned mle gls be fe optional model :.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/sandwich_covariance_generic.py#L19'>kernel</a>(d1,d2,r,weights)</tt>	General product kernel hardcoded split for the example.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/sandwich_covariance_generic.py#L40'>aggregate_cov</a>(x,d,r,weights)</tt>	Sum of outer procuct over groups and time selected by r this is for a generic reference implementation it uses a nobs-nobs double.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/sandwich_covariance_generic.py#L97'>S_all_hac</a>(x,d,nlags)</tt>	Hac independent of categorical group membership.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/sandwich_covariance_generic.py#L105'>S_within_hac</a>(x,d,nlags,groupidx)</tt>	Hac for observations within a categorical group.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/sandwich_covariance_generic.py#L119'>S_white</a>(x,d)</tt>	Simple white heteroscedasticity robust covariance.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/panel_short.py#L37'>sum_outer_product_loop</a>(x,group_iter)</tt>	Sum outerproduct dot(x_i x_i t) over individuals.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/panel_short.py#L52'>sum_outer_product_balanced</a>(x,n_groups)</tt>	Sum outerproduct dot(x_i x_i t) over individuals.
<tt style='background-color:#E8E8E8;'> sandbox.panel. <a href=' /sandbox/panel/panel_short.py#L70'>whiten_individuals_loop</a>(x,transform,group_iter)</tt>	Apply linear transform for each individual.
<tt style='background-color:#E8E8E8;'> sandbox.panel.ShortPanelGLS <a href=' /sandbox/panel/panel_short.py#L184'>fit_iterative</a>(maxiter)</tt>	Perform an iterative two-step procedure to estimate the gls model.
<tt style='background-color:#E8E8E8;'> sandbox.tools.LeaveOneOut <a href=' /sandbox/tools/cross_val.py#L28'>__init__</a>(n)</tt>	Leave-one-out cross validation iterator provides train/test indexes to split data in train test sets.
<tt style='background-color:#E8E8E8;'> sandbox.tools.LeavePOut <a href=' /sandbox/tools/cross_val.py#L81'>__init__</a>(n,p)</tt>	Leave-p-out cross validation iterator provides train/test indexes to split data in train test sets.
<tt style='background-color:#E8E8E8;'> sandbox.tools.KFold <a href=' /sandbox/tools/cross_val.py#L140'>__init__</a>(n,k)</tt>	K-folds cross validation iterator provides train/test indexes to split data in train test sets.
<tt style='background-color:#E8E8E8;'> sandbox.tools.LeaveOneLabelOut <a href=' /sandbox/tools/cross_val.py#L205'>__init__</a>(labels)</tt>	Leave-one-label_out cross validation provides train/test indexes to split data in train test sets.
<tt style='background-color:#E8E8E8;'> sandbox.tools. <a href=' /sandbox/tools/cross_val.py#L258'>split</a>(train_indexes,test_indexes)</tt>	For each arg return a train and test subsets defined by indexes provided.
<tt style='background-color:#E8E8E8;'> sandbox.tools.KStepAhead <a href=' /sandbox/tools/cross_val.py#L290'>__init__</a>(n,k,start,kall)</tt>	Kstepahead cross validation iterator provides train/test indexes to split data in train test sets.
<tt style='background-color:#E8E8E8;'> sandbox.tools. <a href=' /sandbox/tools/tools_pca.py#L14'>pca</a>(data,keepdim,normalize,demean)</tt>	Principal components with eigenvector decomposition similar to princomp in matlab.
<tt style='background-color:#E8E8E8;'> sandbox.tools. <a href=' /sandbox/tools/tools_pca.py#L87'>pcasvd</a>(data,keepdim,demean)</tt>	Principal components with svd parameters.
<tt style='background-color:#E8E8E8;'> sandbox.tools.StatTestMC <a href=' /sandbox/tools/mctools.py#L107'>run</a>(nrepl,statindices,dgpargs,statsargs)</tt>	Run the actual monte carlo and save results parameters.
<tt style='background-color:#E8E8E8;'> sandbox.tools.StatTestMC <a href=' /sandbox/tools/mctools.py#L164'>histogram</a>(idx,critval)</tt>	Calculate histogram values does not do any plotting.
<tt style='background-color:#E8E8E8;'> sandbox.tools.StatTestMC <a href=' /sandbox/tools/mctools.py#L204'>quantiles</a>(idx,frac)</tt>	Calculate quantiles of monte carlo results similar to ppf.
<tt style='background-color:#E8E8E8;'> sandbox.tools.StatTestMC <a href=' /sandbox/tools/mctools.py#L247'>cdf</a>(x,idx)</tt>	Calculate cumulative probabilities of monte carlo results parameters.
<tt style='background-color:#E8E8E8;'> sandbox.tools.StatTestMC <a href=' /sandbox/tools/mctools.py#L297'>plot_hist</a>(idx,distpdf,bins,ax)</tt>	Plot the histogram against a reference distribution.
<tt style='background-color:#E8E8E8;'> sandbox.tools.StatTestMC <a href=' /sandbox/tools/mctools.py#L344'>summary_quantiles</a>(idx,distppf,frac,varnames)</tt>	Summary table for quantiles critical values.
<tt style='background-color:#E8E8E8;'> sandbox.tools.StatTestMC <a href=' /sandbox/tools/mctools.py#L392'>summary_cdf</a>(idx,frac,crit,varnames)</tt>	Summary table for cumulative density function.
<tt style='background-color:#E8E8E8;'> sandbox.archive.OneTimeProperty <a href=' /sandbox/archive/linalg_decomp_1.py#L41'>__init__</a>(func)</tt>	Create a onetimeproperty instance.
<tt style='background-color:#E8E8E8;'> sandbox.archive.OneTimeProperty <a href=' /sandbox/archive/linalg_decomp_1.py#L56'>__get__</a>(obj,type)</tt>	This will be called on attribute access on the class or instance.
<tt style='background-color:#E8E8E8;'> sandbox.archive. <a href=' /sandbox/archive/linalg_decomp_1.py#L263'>tiny2zero</a>(x,eps)</tt>	Replace abs values smaller than eps by zero makes copy.
<tt style='background-color:#E8E8E8;'> sandbox.archive. <a href=' /sandbox/archive/linalg_covmat.py#L148'>loglike_ar1</a>(x,rho)</tt>	Loglikelihood of ar 1 process as a test case sigma_u partially hard coded.
<tt style='background-color:#E8E8E8;'> sandbox.archive. <a href=' /sandbox/archive/linalg_covmat.py#L163'>ar2transform</a>(x,arcoefs)</tt>	Greene eq 12-30.
<tt style='background-color:#E8E8E8;'> sandbox.archive. <a href=' /sandbox/archive/linalg_covmat.py#L176'>mvn_loglike</a>(x,sigma)</tt>	Loglike multivariate normal.
<tt style='background-color:#E8E8E8;'> sandbox.archive. <a href=' /sandbox/archive/linalg_covmat.py#L197'>mvn_nloglike_obs</a>(x,sigma)</tt>	Loglike multivariate normal.
<tt style='background-color:#E8E8E8;'> sandbox.archive. <a href=' /sandbox/archive/tsa.py#L26'>acovf_fft</a>(x,demean)</tt>	Autocovariance function with call to fftconvolve biased.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/multivariate.py#L29'>chi2_pdf</a>(x,df)</tt>	Pdf of chi-square distribution.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/multivariate.py#L67'>mvstdtprob</a>(a,b,R,df)</tt>	Probability of rectangular area of standard t distribution assumes mean is zero and r is correlation matrix.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/multivariate.py#L90'>multivariate_t_rvs</a>(m,S,df,n)</tt>	Generate random variables of multivariate t distribution.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/copula.py#L21'>copula_bv_indep</a>(u,v)</tt>	Independent bivariate copula.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/copula.py#L26'>copula_bv_min</a>(u,v)</tt>	Comonotonic bivariate copula.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/copula.py#L31'>copula_bv_max</a>(u,v)</tt>	Countermonotonic bivariate copula.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/copula.py#L36'>copula_bv_clayton</a>(u,v,theta)</tt>	Clayton or cook johnson bivariate copula.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/copula.py#L43'>copula_bv_frank</a>(u,v,theta)</tt>	Cook johnson bivariate copula.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/copula.py#L114'>copula_mv_archimedean</a>(u,transform,args,axis)</tt>	Generic multivariate archimedean copula.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/copula.py#L123'>copula_bv_ev</a>(u,v,transform,args)</tt>	Generic bivariate extreme value copula.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/copula.py#L128'>transform_tawn</a>(t,a1,a2,theta)</tt>	Asymmetric logistic model of tawn 1988.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/copula.py#L153'>transform_joe</a>(t,a1,a2,theta)</tt>	Asymmetric negative logistic model of joe 1990.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/copula.py#L176'>transform_tawn2</a>(t,theta,k)</tt>	Asymmetric mixed model of tawn 1988.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/copula.py#L200'>transform_bilogistic</a>(t,beta,delta)</tt>	Bilogistic model of coles and tawn 1994 joe smith and weissman 1992.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/copula.py#L227'>transform_hr</a>(t,lamda)</tt>	Model of huesler reiss 1989.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/copula.py#L249'>transform_tev</a>(t,rho,x)</tt>	T-ev model of demarta and mcneil 2005.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.CopulaBivariate <a href=' /sandbox/distributions/copula.py#L305'>cdf</a>(xy,args)</tt>	Xx needs to be iterable instead of x y for extension to multivariate.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/genpareto.py#L73'>paramstopot</a>(thresh,shape,scale)</tt>	Transform shape scale for peak over threshold.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/genpareto.py#L89'>meanexcess</a>(thresh,shape,scale)</tt>	Mean excess function of genpareto.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/gof_new.py#L31'>ks_2samp</a>(data1,data2)</tt>	Computes the kolmogorov-smirnof statistic on 2 samples.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/gof_new.py#L127'>kstest</a>(rvs,cdf,args,N)</tt>	Perform the kolmogorov-smirnov test for goodness of fit this performs a test of the distribution g x of an observed.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.GOF <a href=' /sandbox/distributions/gof_new.py#L440'>wsqu</a>()</tt>	Cramer von mises.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.GOF <a href=' /sandbox/distributions/gof_new.py#L474'>asqu</a>()</tt>	Stephens 1974 doesn't have p-value formula for a^2.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/gof_new.py#L521'>asquare</a>(cdfvals,axis)</tt>	Vectorized anderson darling a^2 stephens 1974.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/gof_new.py#L544'>bootstrap</a>(distr,args,nobs,nrep)</tt>	Monte carlo or parametric bootstrap p-values for gof.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/gof_new.py#L594'>bootstrap2</a>(value,distr,args,nobs)</tt>	Monte carlo or parametric bootstrap p-values for gof.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/sppatch.py#L30'>_fitstart</a>(x)</tt>	Example method method of moment estimator as starting values.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/sppatch.py#L57'>_fitstart_beta</a>(x,fixed)</tt>	Method of moment estimator as starting values for beta distribution parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/sppatch.py#L119'>_fitstart_poisson</a>(x,fixed)</tt>	Maximum likelihood estimator as starting values for poisson distribution parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/sppatch.py#L198'>fit_fr</a>(data)</tt>	Estimate distribution parameters by mle taking some parameters as fixed parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/sppatch.py#L291'>expect</a>(fn,args,loc,scale)</tt>	Calculate expected value of a function with respect to the distribution location and scale only tested on a few examples.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/sppatch.py#L340'>expect_v2</a>(fn,args,loc,scale)</tt>	Calculate expected value of a function with respect to the distribution location and scale only tested on a few examples.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/sppatch.py#L422'>expect_discrete</a>(fn,args,loc,lb)</tt>	Calculate expected value of a function with respect to the distribution for discrete distribution.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/sppatch.py#L542'>distfitbootstrap</a>(sample,distr,nrepl)</tt>	Run bootstrap for estimation of distribution parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/sppatch.py#L570'>distfitmc</a>(sample,distr,nrepl,distkwds)</tt>	Run monte carlo for estimation of distribution parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/sppatch.py#L599'>printresults</a>(sample,arg,bres,kind)</tt>	Calculate and print(bootstrap or monte carlo result.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/quantize.py#L9'>prob_bv_rectangle</a>(lower,upper,cdf)</tt>	Helper function for probability of a rectangle in a bivariate distribution.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/quantize.py#L30'>prob_mv_grid</a>(bins,cdf,axis)</tt>	Helper function for probability of a rectangle grid in a multivariate distribution.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/quantize.py#L63'>prob_quantize_cdf</a>(binsx,binsy,cdf)</tt>	Quantize a continuous distribution given by a cdf.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/quantize.py#L89'>prob_quantize_cdf_old</a>(binsx,binsy,cdf)</tt>	Quantize a continuous distribution given by a cdf.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.ParametricMixtureD <a href=' /sandbox/distributions/otherdist.py#L47'>__init__</a>(mixing_dist,base_dist,bd_args_func,bd_kwds_func)</tt>	Create a mixture distribution parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.ClippedContinuous <a href=' /sandbox/distributions/otherdist.py#L159'>_get_clip_lower</a>(kwds)</tt>	Helper method to get clip_lower from kwds or attribute.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/try_pot.py#L10'>mean_residual_life</a>(x,frac,alpha)</tt>	Emprirical mean residual life or expected shortfall.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/estimators.py#L98'>gammamomentcond</a>(distfn,params,mom2,quantile)</tt>	Estimate distribution parameters based method of moments mean variance for distributions with 1 shape parameter and fixed loc=0.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/estimators.py#L118'>gammamomentcond2</a>(distfn,params,mom2,quantile)</tt>	Estimate distribution parameters based method of moments mean variance for distributions with 1 shape parameter and fixed loc=0.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/estimators.py#L141'>momentcondunbound</a>(distfn,params,mom2,quantile)</tt>	Moment conditions for estimating distribution parameters using method of moments uses mean variance and one quantile for distributions.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/estimators.py#L163'>momentcondunboundls</a>(distfn,params,mom2,quantile)</tt>	Moment conditions for estimating loc and scale of a distribution with method of moments using either 2 quantiles or 2 moments not both.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/estimators.py#L188'>momentcondquant</a>(distfn,params,mom2,quantile)</tt>	Moment conditions for estimating distribution parameters by matching quantiles defines as many moment conditions as quantiles.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/estimators.py#L238'>fitbinned</a>(distfn,freq,binedges,start)</tt>	Estimate parameters of distribution function for binned data using mle parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/estimators.py#L278'>fitbinnedgmm</a>(distfn,freq,binedges,start)</tt>	Estimate parameters of distribution function for binned data using gmm parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/estimators.py#L347'>logmps</a>(params,xsorted,dist)</tt>	Calculate negative log of product-of-spacings.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/estimators.py#L373'>getstartparams</a>(dist,data)</tt>	Get starting values for estimation of distribution parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/estimators.py#L402'>fit_mps</a>(dist,data,x0)</tt>	Estimate distribution parameters with maximum product-of-spacings.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/mv_measures.py#L30'>mutualinfo_kde</a>(y,x,normed)</tt>	Mutual information of two random variables estimated with kde.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/mv_measures.py#L52'>mutualinfo_kde_2sample</a>(y,x,normed)</tt>	Mutual information of two random variables estimated with kde.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/mv_measures.py#L74'>mutualinfo_binned</a>(y,x,bins,normed)</tt>	Mutual information of two random variables estimated with kde notes.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/extras.py#L225'>pdf_moments_st</a>(cnt)</tt>	Return the gaussian expanded pdf function given the list of central moments first one is mean.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/extras.py#L265'>pdf_mvsk</a>(mvsk)</tt>	Return the gaussian expanded pdf function given the list of 1st 2nd moment and skew and fisher excess kurtosis.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/extras.py#L327'>pdf_moments</a>(cnt)</tt>	Return the gaussian expanded pdf function given the list of central moments first one is mean.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/extras.py#L969'>mvstdnormcdf</a>(lower,upper,corrcoef)</tt>	Standardized multivariate normal cumulative distribution function this is a wrapper for scipy.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/extras.py#L1086'>mvnormcdf</a>(upper,mu,cov,lower)</tt>	Multivariate normal cumulative distribution function this is a wrapper for scipy.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/mv_normal.py#L153'>expect_mc</a>(dist,func,size)</tt>	Calculate expected value of function by monte carlo integration parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/mv_normal.py#L204'>expect_mc_bounds</a>(dist,func,size,lower)</tt>	Calculate expected value of function by monte carlo integration parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions. <a href=' /sandbox/distributions/mv_normal.py#L303'>bivariate_normal</a>(x,mu,cov)</tt>	Bivariate gaussian distribution for equal shape *x*, *y*.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.BivariateNormal <a href=' /sandbox/distributions/mv_normal.py#L358'>kl</a>(other)</tt>	Kullback-leibler divergence between this and another distribution int f x (log f x - log g x dx.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L388'>__init__</a>(mean,sigma)</tt>	Initialize instance parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L435'>rvs</a>(size)</tt>	Random variable parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L454'>logpdf</a>(x)</tt>	Logarithm of probability density function.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L478'>cdf</a>(x)</tt>	Cumulative distribution function.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L498'>affine_transformed</a>(shift,scale_matrix)</tt>	Affine transformation define in subclass because of distribution.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L504'>whiten</a>(x)</tt>	Whiten the data by linear transformation parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L531'>pdf</a>(x)</tt>	Probability density function.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L548'>standardize</a>(x)</tt>	Standardize the random variable i e subtract mean and whiten.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L573'>standardized</a>()</tt>	Return new standardized mvnormal instance.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L579'>normalize</a>(x)</tt>	Normalize the random variable i e subtract mean and rescale.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L607'>normalized</a>(demeaned)</tt>	Return a normalized distribution where sigma=corr.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L621'>normalized2</a>(demeaned)</tt>	Return a normalized distribution where sigma=corr.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L638'>std</a>()</tt>	Standard deviation square root of diagonal elements of cov.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L644'>std_sigma</a>()</tt>	Standard deviation square root of diagonal elements of sigma.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVElliptical <a href=' /sandbox/distributions/mv_normal.py#L658'>marginal</a>(indices)</tt>	Return marginal distribution for variables given by indices.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVNormal0 <a href=' /sandbox/distributions/mv_normal.py#L724'>whiten</a>(x)</tt>	Whiten the data by linear transformation parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVNormal0 <a href=' /sandbox/distributions/mv_normal.py#L755'>rvs</a>(size)</tt>	Random variable parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVNormal0 <a href=' /sandbox/distributions/mv_normal.py#L777'>pdf</a>(x)</tt>	Probability density function.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVNormal0 <a href=' /sandbox/distributions/mv_normal.py#L795'>logpdf</a>(x)</tt>	Logarithm of probability density function.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVNormal <a href=' /sandbox/distributions/mv_normal.py#L837'>rvs</a>(size)</tt>	Random variable parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVNormal <a href=' /sandbox/distributions/mv_normal.py#L859'>logpdf</a>(x)</tt>	Logarithm of probability density function.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVNormal <a href=' /sandbox/distributions/mv_normal.py#L888'>cdf</a>(x)</tt>	Cumulative distribution function.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVNormal <a href=' /sandbox/distributions/mv_normal.py#L914'>affine_transformed</a>(shift,scale_matrix)</tt>	Return distribution of an affine transform for full rank scale_matrix only.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVNormal <a href=' /sandbox/distributions/mv_normal.py#L954'>conditional</a>(indices,values)</tt>	Return conditional distribution indices are the variables to keep the complement is the conditioning.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVT <a href=' /sandbox/distributions/mv_normal.py#L1014'>__init__</a>(mean,sigma,df)</tt>	Initialize instance parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVT <a href=' /sandbox/distributions/mv_normal.py#L1035'>rvs</a>(size)</tt>	Random variables with student t distribution parameters.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVT <a href=' /sandbox/distributions/mv_normal.py#L1063'>logpdf</a>(x)</tt>	Logarithm of probability density function.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVT <a href=' /sandbox/distributions/mv_normal.py#L1094'>cdf</a>(x)</tt>	Cumulative distribution function.
<tt style='background-color:#E8E8E8;'> sandbox.distributions.MVT <a href=' /sandbox/distributions/mv_normal.py#L1131'>affine_transformed</a>(shift,scale_matrix)</tt>	Return distribution of a full rank affine transform for full rank scale_matrix only.
<tt style='background-color:#E8E8E8;'> sandbox.stats.Runs <a href=' /sandbox/stats/runs.py#L68'>runs_test</a>(correction)</tt>	Basic version of runs test parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/runs.py#L106'>runstest_1samp</a>(x,cutoff,correction)</tt>	Use runs test on binary discretized data above/below cutoff parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/runs.py#L139'>runstest_2samp</a>(x,y,groups,correction)</tt>	Wald-wolfowitz runstest for two samples this tests whether two samples come from the same distribution.
<tt style='background-color:#E8E8E8;'> sandbox.stats.RunsProb <a href=' /sandbox/stats/runs.py#L335'>pdf</a>(x,k,n,p)</tt>	Distribution of success runs of length k or more.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/runs.py#L390'>median_test_ksample</a>(x,groups)</tt>	Chisquare test for equality of median/location this tests whether all groups have the same fraction of observations.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/runs.py#L440'>cochrans_q</a>(x)</tt>	Cochran's q test for identical effect of k treatments cochran's q is a k-sample extension of the mcnemar test.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/runs.py#L502'>mcnemar</a>(x,y,exact,correction)</tt>	Mcnemar test parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/runs.py#L565'>symmetry_bowker</a>(table)</tt>	Test for symmetry of a k k square contingency table this is an extension of the mcnemar test to test the null hypothesis.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L133'>get_tukeyQcrit</a>(k,df,alpha)</tt>	Return critical values for tukey's hsd q parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L158'>get_tukeyQcrit2</a>(k,df,alpha)</tt>	Return critical values for tukey's hsd q parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L242'>Tukeythreegene2</a>(genes)</tt>	Gend is a list ie [first second third].
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L286'>maxzero</a>(x)</tt>	Find all up zero crossings and return the index of the highest not used anymore.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L322'>maxzerodown</a>(x)</tt>	Find all up zero crossings and return the index of the highest not used anymore.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L359'>rejectionline</a>(n,alpha)</tt>	Reference line for rejection in multiple tests not used anymore.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L379'>fdrcorrection_bak</a>(pvals,alpha,method)</tt>	Reject false discovery rate correction for pvalues.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L415'>mcfdr</a>(nrepl,nobs,ntests,ntrue)</tt>	Montecarlo to test fdrcorrection.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L438'>randmvn</a>(rho,size,standardize)</tt>	Create random draws from equi-correlated multivariate normal distribution.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L479'>tiecorrect</a>(xranks)</tt>	Should be equivalent of scipy stats tiecorrect.
<tt style='background-color:#E8E8E8;'> sandbox.stats.GroupsStats <a href=' /sandbox/stats/multicomp.py#L508'>__init__</a>(x,useranks,uni,intlab)</tt>	Descriptive statistics by groups parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats.TukeyHSDResults <a href=' /sandbox/stats/multicomp.py#L633'>summary</a>()</tt>	Summary table that can be printed.
<tt style='background-color:#E8E8E8;'> sandbox.stats.TukeyHSDResults <a href=' /sandbox/stats/multicomp.py#L639'>_simultaneous_ci</a>()</tt>	Compute simultaneous confidence intervals for comparison of means.
<tt style='background-color:#E8E8E8;'> sandbox.stats.TukeyHSDResults <a href=' /sandbox/stats/multicomp.py#L646'>plot_simultaneous</a>(comparison_name,ax,figsize,xlabel)</tt>	Plot a universal confidence interval of each group mean visiualize significant differences in a plot with one confidence.
<tt style='background-color:#E8E8E8;'> sandbox.stats.MultiComparison <a href=' /sandbox/stats/multicomp.py#L832'>getranks</a>()</tt>	Convert data to rankdata and attach this creates rankdata as it is used for non-parametric tests where.
<tt style='background-color:#E8E8E8;'> sandbox.stats.MultiComparison <a href=' /sandbox/stats/multicomp.py#L848'>kruskal</a>(pairs,multimethod)</tt>	Pairwise comparison for kruskal-wallis test this is just a reimplementation of scipy.
<tt style='background-color:#E8E8E8;'> sandbox.stats.MultiComparison <a href=' /sandbox/stats/multicomp.py#L877'>allpairtest</a>(testfunc,alpha,method,pvalidx)</tt>	Run a pairwise test on all pairs with multiple test correction the statistical test given in testfunc is calculated for all pairs.
<tt style='background-color:#E8E8E8;'> sandbox.stats.MultiComparison <a href=' /sandbox/stats/multicomp.py#L950'>tukeyhsd</a>(alpha)</tt>	Tukey's range test to compare means of all pairs of groups parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L995'>rankdata</a>(x)</tt>	Rankdata equivalent to scipy stats rankdata.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L1015'>compare_ordered</a>(vals,alpha)</tt>	Simple ordered sequential comparison of means.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L1039'>varcorrection_unbalanced</a>(nobs_all,srange)</tt>	Correction factor for variance with unequal sample sizes this is just a harmonic mean.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L1079'>varcorrection_pairs_unbalanced</a>(nobs_all,srange)</tt>	Correction factor for variance with unequal sample sizes for all pairs this is just a harmonic mean.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L1123'>varcorrection_unequal</a>(var_all,nobs_all,df_all)</tt>	Return joint variance from samples with unequal variances and unequal sample sizes.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L1171'>varcorrection_pairs_unequal</a>(var_all,nobs_all,df_all)</tt>	Return joint variance from samples with unequal variances and unequal sample sizes for all pairs.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L1222'>tukeyhsd</a>(mean_all,nobs_all,var_all,df)</tt>	Simultaneous tukey hsd check instead of sorting i use absolute value of pairwise differences.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L1290'>simultaneous_ci</a>(q_crit,var,groupnobs,pairindices)</tt>	Compute simultaneous confidence intervals for comparison of means.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L1353'>distance_st_range</a>(mean_all,nobs_all,var_all,df)</tt>	Pairwise distance matrix outsourced from tukeyhsd.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/contrast_tools.py#L31'>contrast_allpairs</a>(nm)</tt>	Contrast or restriction matrix for all pairs of nm variables.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/contrast_tools.py#L53'>contrast_all_one</a>(nm)</tt>	Contrast or restriction matrix for all against first comparison.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/contrast_tools.py#L69'>contrast_diff_mean</a>(nm)</tt>	Contrast or restriction matrix for all against mean comparison.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L1478'>multicontrast_pvalues</a>(tstat,tcorr,df,dist)</tt>	Pvalues for simultaneous tests.
<tt style='background-color:#E8E8E8;'> sandbox.stats.StepDown <a href=' /sandbox/stats/multicomp.py#L1553'>get_distance_matrix</a>()</tt>	Studentized range statistic.
<tt style='background-color:#E8E8E8;'> sandbox.stats.StepDown <a href=' /sandbox/stats/multicomp.py#L1566'>check_set</a>(indices)</tt>	Check whether pairwise distances of indices satisfy condition.
<tt style='background-color:#E8E8E8;'> sandbox.stats.StepDown <a href=' /sandbox/stats/multicomp.py#L1595'>run</a>(alpha)</tt>	Main function to run the test.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L1616'>homogeneous_subsets</a>(vals,dcrit)</tt>	Recursively check all pairs of vals for minimum distance step down method as in newman-keuls and ryan procedures.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L1687'>set_partition</a>(ssli)</tt>	Extract a partition from a list of tuples this should be correctly called select largest disjoint sets.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/multicomp.py#L1724'>set_remove_subs</a>(ssli)</tt>	Remove sets that are subsets of another set from a list of tuples parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/stats_mstats_short.py#L39'>quantiles</a>(a,prob,alphap,betap)</tt>	Computes empirical quantiles for a data array.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/stats_dhuard.py#L87'>scoreatpercentile</a>(data,per,limit,alphap)</tt>	Calculate the score at the given 'per' percentile of the sequence a.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/stats_mstats_short.py#L193'>plotting_positions</a>(data,alpha,beta,axis)</tt>	Returns the plotting positions or empirical percentile points for the data.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/stats_mstats_short.py#L272'>plotting_positions_w1d</a>(data,weights,alpha,beta)</tt>	Weighted plotting positions or empirical percentile points for the data.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/stats_mstats_short.py#L314'>edf_normal_inverse_transformed</a>(x,alpha,beta,axis)</tt>	Rank based normal inverse transformed cdf.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/stats_dhuard.py#L87'>scoreatpercentile</a>(data,percentile)</tt>	Return the score at the given percentile of the data.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/stats_dhuard.py#L101'>percentileofscore</a>(data,score)</tt>	Return the percentile-position of score relative to data.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/stats_dhuard.py#L119'>empiricalcdf</a>(data,method)</tt>	Return the empirical cdf.
<tt style='background-color:#E8E8E8;'> sandbox.stats.HistDist <a href=' /sandbox/stats/stats_dhuard.py#L177'>empiricalcdf</a>(data,method)</tt>	Return the empirical cdf.
<tt style='background-color:#E8E8E8;'> sandbox.stats.HistDist <a href=' /sandbox/stats/stats_dhuard.py#L218'>cdf_emp</a>(score)</tt>	This is score in dh.
<tt style='background-color:#E8E8E8;'> sandbox.stats.HistDist <a href=' /sandbox/stats/stats_dhuard.py#L226'>ppf_emp</a>(quantile)</tt>	This is score in dh.
<tt style='background-color:#E8E8E8;'> sandbox.stats.HistDist <a href=' /sandbox/stats/stats_dhuard.py#L236'>optimize_binning</a>(method)</tt>	Find the optimal number of bins and update the bin countaccordingly.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/contrast_tools.py#L104'>contrast_product</a>(names1,names2,intgroup1,intgroup2)</tt>	Build contrast matrices for products of two categorical variables this is an experimental script and should be converted to a class.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/contrast_tools.py#L170'>dummy_1d</a>(x,varname)</tt>	Dummy variable for id integer groups paramters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/contrast_tools.py#L225'>dummy_product</a>(d1,d2,method)</tt>	Dummy variable from product of two dummy variables parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/contrast_tools.py#L262'>dummy_limits</a>(d)</tt>	Start and endpoints of groups in a sorted dummy variable array helper function for nested categories.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/contrast_tools.py#L306'>dummy_nested</a>(d1,d2,method)</tt>	Unfinished and incomplete mainly copy past dummy_product dummy variable from product of two dummy variables.
<tt style='background-color:#E8E8E8;'> sandbox.stats.DummyTransform <a href=' /sandbox/stats/contrast_tools.py#L386'>__init__</a>(d1,d2)</tt>	C such that d1 c = d2 with d1 = x d2 = z.
<tt style='background-color:#E8E8E8;'> sandbox.stats.DummyTransform <a href=' /sandbox/stats/contrast_tools.py#L394'>dot_left</a>(a)</tt>	B = c a.
<tt style='background-color:#E8E8E8;'> sandbox.stats.DummyTransform <a href=' /sandbox/stats/contrast_tools.py#L399'>dot_right</a>(x)</tt>	Z = x c.
<tt style='background-color:#E8E8E8;'> sandbox.stats.DummyTransform <a href=' /sandbox/stats/contrast_tools.py#L404'>inv_dot_left</a>(b)</tt>	A = c^{-1} b.
<tt style='background-color:#E8E8E8;'> sandbox.stats.DummyTransform <a href=' /sandbox/stats/contrast_tools.py#L409'>inv_dot_right</a>(z)</tt>	X = z c^{-1}.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/contrast_tools.py#L418'>groupmean_d</a>(x,d)</tt>	Groupmeans using dummy variables parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats.TwoWay <a href=' /sandbox/stats/contrast_tools.py#L507'>r_nointer</a>()</tt>	Contrast/restriction matrix for no interaction.
<tt style='background-color:#E8E8E8;'> sandbox.stats.TwoWay <a href=' /sandbox/stats/contrast_tools.py#L517'>ttest_interaction</a>()</tt>	Ttests for no-interaction terms are zero.
<tt style='background-color:#E8E8E8;'> sandbox.stats.TwoWay <a href=' /sandbox/stats/contrast_tools.py#L529'>ftest_interaction</a>()</tt>	Ttests for no-interaction terms are zero.
<tt style='background-color:#E8E8E8;'> sandbox.stats.CompareCox <a href=' /sandbox/stats/diagnostic.py#L75'>run</a>(results_x,results_z,attach)</tt>	Run cox test for non-nested models parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats.CompareJ <a href=' /sandbox/stats/diagnostic.py#L168'>run</a>(results_x,results_z,attach)</tt>	Run j-test for non-nested models parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L229'>acorr_ljungbox</a>(x,lags,boxpierce)</tt>	Ljung-box test for no autocorrelation parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L306'>acorr_lm</a>(x,maxlag,autolag,store)</tt>	Lagrange multiplier tests for autocorrelation this is a generic lagrange multiplier test for autocorrelation.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L407'>het_arch</a>(resid,maxlag,autolag,store)</tt>	Engle's test for autoregressive conditional heteroscedasticity arch parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L453'>acorr_breusch_godfrey</a>(results,nlags,store)</tt>	Breusch godfrey lagrange multiplier tests for residual autocorrelation parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L543'>het_breuschpagan</a>(resid,exog_het)</tt>	Breusch-pagan lagrange multiplier test for heteroscedasticity the tests the hypothesis that the residual variance does not depend on.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L618'>het_white</a>(resid,exog,retres)</tt>	White's lagrange multiplier test for heteroscedasticity parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L677'>_het_goldfeldquandt2_old</a>(y,x,idx,split)</tt>	Test whether variance is the same in 2 subsamples parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats.HetGoldfeldQuandt <a href=' /sandbox/stats/diagnostic.py#L816'>run</a>(y,x,idx,split)</tt>	See class docstring.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L892'>linear_harvey_collier</a>(res)</tt>	Harvey collier test for linearity the null hypothesis is that the regression is correctly modeled as linear.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L924'>linear_rainbow</a>(res,frac)</tt>	Rainbow test for linearity the null hypothesis is that the regression is correctly modelled as linear.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L958'>linear_lm</a>(resid,exog,func)</tt>	Lagrange multiplier test for linearity against functional alternative limitations assumes currently that the first column is integer.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L1006'>_neweywestcov</a>(resid,x)</tt>	Did not run yet from regstats2 ::.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L1040'>_recursive_olsresiduals2</a>(olsresults,skip)</tt>	This is my original version based on greene and references.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L1104'>recursive_olsresiduals</a>(olsresults,skip,lamda,alpha)</tt>	Calculate recursive ols with residuals and cusum test statistic parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L1252'>breaks_hansen</a>(olsresults)</tt>	Test for model stability breaks in parameters for ols hansen 1992 parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L1301'>breaks_cusumolsresid</a>(olsresidual,ddof)</tt>	Cusum test for parameter stability based on ols residuals parameters.
<tt style='background-color:#E8E8E8;'> sandbox.stats. <a href=' /sandbox/stats/diagnostic.py#L1390'>breaks_AP</a>(endog,exog,skip)</tt>	Suplm explm and avelm by andrews and andrews ploberger p-values by b hansen.
<tt style='background-color:#E8E8E8;'> sandbox.stats.StatTestMC <a href=' /sandbox/stats/diagnostic.py#L1433'>run</a>(nrepl,statindices,dgpargs,statsargs)</tt>	Run the actual monte carlo and save results.
<tt style='background-color:#E8E8E8;'> sandbox.stats.StatTestMC <a href=' /sandbox/stats/diagnostic.py#L1464'>histogram</a>(idx,critval)</tt>	Calculate histogram values.
<tt style='background-color:#E8E8E8;'> sandbox.stats.StatTestMC <a href=' /sandbox/stats/diagnostic.py#L1492'>quantiles</a>(idx,frac)</tt>	Calculate quantiles of monte carlo results.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric. <a href=' /sandbox/nonparametric/dgp_examples.py#L13'>fg1</a>(x)</tt>	Fan and gijbels example function 1.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric. <a href=' /sandbox/nonparametric/dgp_examples.py#L19'>fg1eu</a>(x)</tt>	Eubank similar to fan and gijbels example function 1.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric. <a href=' /sandbox/nonparametric/dgp_examples.py#L25'>fg2</a>(x)</tt>	Fan and gijbels example function 2.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric. <a href=' /sandbox/nonparametric/dgp_examples.py#L31'>func1</a>(x)</tt>	Made up example with sin square.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric._UnivariateFunction <a href=' /sandbox/nonparametric/dgp_examples.py#L104'>plot</a>(scatter,ax)</tt>	Plot the mean function and optionally the scatter of the sample parameters.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.NdKernel <a href=' /sandbox/nonparametric/kernels.py#L60'>getH</a>()</tt>	Getter for kernel bandwidth h.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.NdKernel <a href=' /sandbox/nonparametric/kernels.py#L64'>setH</a>(value)</tt>	Setter for kernel bandwidth h.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.NdKernel <a href=' /sandbox/nonparametric/kernels.py#L87'>_kernweight</a>(x)</tt>	Returns the kernel weight for the independent multivariate kernel.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.NdKernel <a href=' /sandbox/nonparametric/kernels.py#L99'>__call__</a>(x)</tt>	This simply returns the value of the kernel function at x.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L119'>__init__</a>(shape,h,domain,norm)</tt>	Shape should be a function taking and returning numeric type.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L155'>geth</a>()</tt>	Getter for kernel bandwidth h.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L158'>seth</a>(value)</tt>	Setter for kernel bandwidth h.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L163'>in_domain</a>(xs,ys,x)</tt>	Returns the filtered xs ys based on the kernel domain centred on x.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L185'>density</a>(xs,x)</tt>	Returns the kernel density estimate for point x based on x-values.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L209'>density_var</a>(density,nobs)</tt>	Approximate pointwise variance for kernel density not verified.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L233'>density_confint</a>(density,nobs,alpha)</tt>	Approximate pointwise confidence interval for kernel density the confidence interval is centered at the estimated density and.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L268'>smooth</a>(xs,ys,x)</tt>	Returns the kernel smoothing estimate for point x based on x-values xs and y-values ys.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L283'>smoothvar</a>(xs,ys,x)</tt>	Returns the kernel smoothing estimate of the variance at point x.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L297'>smoothconf</a>(xs,ys,x,alpha)</tt>	Returns the kernel smoothing estimate with confidence 1sigma bounds.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L322'>L2Norm</a>()</tt>	Returns the integral of the square of the kernal from -inf to inf.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L334'>norm_const</a>()</tt>	Normalising constant for kernel integral from -inf to inf.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L348'>kernel_var</a>()</tt>	Returns the second moment of the kernel.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L372'>normal_reference_constant</a>()</tt>	Constant used for silverman normal reference asymtotic bandwidth calculation.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L400'>weight</a>(x)</tt>	This returns the normalised weight at distance x.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.CustomKernel <a href=' /sandbox/nonparametric/kernels.py#L404'>__call__</a>(x)</tt>	This simply returns the value of the kernel function at x.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.Biweight <a href=' /sandbox/nonparametric/kernels.py#L448'>smooth</a>(xs,ys,x)</tt>	Returns the kernel smoothing estimate for point x based on x-values xs and y-values ys.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.Biweight <a href=' /sandbox/nonparametric/kernels.py#L466'>smoothvar</a>(xs,ys,x)</tt>	Returns the kernel smoothing estimate of the variance at point x.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.Biweight <a href=' /sandbox/nonparametric/kernels.py#L483'>smoothconf_</a>(xs,ys,x)</tt>	Returns the kernel smoothing estimate with confidence 1sigma bounds.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.Gaussian <a href=' /sandbox/nonparametric/kernels.py#L526'>smooth</a>(xs,ys,x)</tt>	Returns the kernel smoothing estimate for point x based on x-values xs and y-values ys.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric. <a href=' /sandbox/nonparametric/densityorthopoly.py#L163'>inner_cont</a>(polys,lower,upper,weight)</tt>	Inner product of continuous function (with weight=1) parameters.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric. <a href=' /sandbox/nonparametric/densityorthopoly.py#L219'>is_orthonormal_cont</a>(polys,lower,upper,rtol)</tt>	Check whether functions are orthonormal parameters.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.DensityOrthoPoly <a href=' /sandbox/nonparametric/densityorthopoly.py#L300'>fit</a>(x,polybase,order,limits)</tt>	Estimate the orthogonal polynomial approximation to the density.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.DensityOrthoPoly <a href=' /sandbox/nonparametric/densityorthopoly.py#L344'>__call__</a>(xeval)</tt>	Alias for evaluate except no order argument.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.DensityOrthoPoly <a href=' /sandbox/nonparametric/densityorthopoly.py#L348'>_verify</a>()</tt>	Check for bona fide density correction.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.DensityOrthoPoly <a href=' /sandbox/nonparametric/densityorthopoly.py#L366'>_correction</a>(x)</tt>	Bona fide density correction.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.DensityOrthoPoly <a href=' /sandbox/nonparametric/densityorthopoly.py#L380'>_transform</a>(x)</tt>	Transform observation to the domain of the density.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.SingleIndexModel <a href=' /sandbox/nonparametric/kernel_extras.py#L258'>__repr__</a>()</tt>	Provide something sane to print.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.SemiLinear <a href=' /sandbox/nonparametric/kernel_extras.py#L328'>_est_b_bw</a>()</tt>	Computes the beta coefficients and the bandwidths.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.SemiLinear <a href=' /sandbox/nonparametric/kernel_extras.py#L341'>cv_loo</a>(params)</tt>	Similar to the cross validation leave-one-out estimator.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.SemiLinear <a href=' /sandbox/nonparametric/kernel_extras.py#L382'>fit</a>(exog_predict,exog_nonparametric_predict)</tt>	Computes fitted values and marginal effects.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.SemiLinear <a href=' /sandbox/nonparametric/kernel_extras.py#L408'>__repr__</a>()</tt>	Provide something sane to print.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.KernelSmoother <a href=' /sandbox/nonparametric/smoothers.py#L45'>predict</a>(x)</tt>	Returns the kernel smoothed prediction at x if x is a real number then a single value is returned.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.KernelSmoother <a href=' /sandbox/nonparametric/smoothers.py#L60'>conf</a>(x)</tt>	Returns the fitted curve and 1-sigma upper and lower point-wise confidence.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.PolySmoother <a href=' /sandbox/nonparametric/smoothers.py#L125'>df_fit</a>()</tt>	Alias of df_model for backwards compatibility.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.PolySmoother <a href=' /sandbox/nonparametric/smoothers.py#L130'>df_model</a>()</tt>	Degrees of freedom used in the fit.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.PolySmoother <a href=' /sandbox/nonparametric/smoothers.py#L140'>smooth</a>()</tt>	Alias for fit for backwards compatibility.
<tt style='background-color:#E8E8E8;'> sandbox.nonparametric.PolySmoother <a href=' /sandbox/nonparametric/smoothers.py#L148'>df_resid</a>()</tt>	Residual degrees of freedom from last fit.
<tt style='background-color:#E8E8E8;'> sandbox.examples. <a href=' /sandbox/examples/example_nbin.py#L32'>_ll_nbp</a>(y,X,beta,alph)</tt>	Negative binomial log-likelihood -- type p references.
<tt style='background-color:#E8E8E8;'> sandbox.examples. <a href=' /sandbox/examples/example_nbin.py#L59'>_ll_nb1</a>(y,X,beta,alph)</tt>	Negative binomial regression type 1 likelihood.
<tt style='background-color:#E8E8E8;'> sandbox.examples. <a href=' /sandbox/examples/example_nbin.py#L63'>_ll_nb2</a>(y,X,beta,alph)</tt>	Negative binomial regression type 2 likelihood.
<tt style='background-color:#E8E8E8;'> sandbox.examples. <a href=' /sandbox/examples/example_nbin.py#L71'>_ll_nbt</a>(y,X,beta,alph)</tt>	Negative binomial truncated truncated densities for count models (cameron & trivedi 2005 680):.
<tt style='background-color:#E8E8E8;'> sandbox.examples. <a href=' /sandbox/examples/example_nbin.py#L195'>_score_nbp</a>(y,X,beta,thet)</tt>	Negative binomial score -- type p likelihood from greene 2007.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/ols_anova_original.py#L48'>data2dummy</a>(x,returnall)</tt>	Convert array of categories to dummy variables.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/ols_anova_original.py#L59'>data2proddummy</a>(x)</tt>	Creates product dummy variables from 2 columns of 2d array.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/ols_anova_original.py#L74'>data2groupcont</a>(x1,x2)</tt>	Create dummy continuous variable.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/ols_anova_original.py#L134'>anovadict</a>(res)</tt>	Update regression results dictionary with anova specific statistics.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/ols_anova_original.py#L171'>form2design</a>(ss,data)</tt>	Convert string formula to data dictionary ss : string.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/ols_anova_original.py#L267'>dropname</a>(ss,li)</tt>	Drop names from a list of strings.
<tt style='background-color:#E8E8E8;'> sandbox.regression.TryCLogit <a href=' /sandbox/regression/runmnl.py#L82'>xbetas</a>(params)</tt>	These are the v_i.
<tt style='background-color:#E8E8E8;'> sandbox.regression.TryNCLogit <a href=' /sandbox/regression/runmnl.py#L138'>xbetas</a>(params)</tt>	These are the v_i.
<tt style='background-color:#E8E8E8;'> sandbox.regression.RU2NMNL <a href=' /sandbox/regression/treewalkerclass.py#L324'>calc_prob</a>(tree,keys)</tt>	Walking a tree bottom-up based on dictionary.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/sympy_diff.py#L11'>pdf</a>(x,mu,sigma)</tt>	Return the probability density function as an expression in x.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/sympy_diff.py#L16'>cdf</a>(x,mu,sigma)</tt>	Return the cumulative density function as an expression in x.
<tt style='background-color:#E8E8E8;'> sandbox.regression.TheilRegressionResults <a href=' /sandbox/regression/penalized.py#L125'>hatmatrix_diag</a>()</tt>	Diag(x' xpxi x) where xpxi = (x'x + lambd * sigma_prior)^{-1}.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/tools.py#L28'>norm_lls</a>(y,params)</tt>	Normal loglikelihood given observations and mean mu and variance sigma2.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/tools.py#L48'>norm_lls_grad</a>(y,params)</tt>	Jacobian of normal loglikelihood wrt mean mu and variance sigma2.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/tools.py#L76'>mean_grad</a>(x,beta)</tt>	Gradient/jacobian for d (x*beta)/ d beta.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/tools.py#L81'>normgrad</a>(y,x,params)</tt>	Jacobian of normal loglikelihood wrt mean mu and variance sigma2.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/tools.py#L117'>tstd_lls</a>(y,params,df)</tt>	T loglikelihood given observations and mean mu and variance sigma2 = 1.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/tools.py#L148'>norm_dlldy</a>(y)</tt>	Derivative of log pdf of standard normal with respect to y.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/tools.py#L213'>ts_dlldy</a>(y,df)</tt>	Derivative of log pdf of standard t with respect to y.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/tools.py#L164'>tstd_pdf</a>(x,df)</tt>	Pdf for standardized not standard t distribution variance is one.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/tools.py#L174'>ts_lls</a>(y,params,df)</tt>	T loglikelihood given observations and mean mu and variance sigma2 = 1 parameters.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/tools.py#L240'>tstd_dlldy</a>(y,df)</tt>	Derivative of log pdf of standardized t with respect to y.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/tools.py#L266'>locscale_grad</a>(y,loc,scale,dlldy)</tt>	Derivative of log-likelihood with respect to location and scale parameters.
<tt style='background-color:#E8E8E8;'> sandbox.regression.OneWayLS <a href=' /sandbox/regression/onewaygls.py#L136'>fitbygroups</a>()</tt>	Fit ols regression for each group separately.
<tt style='background-color:#E8E8E8;'> sandbox.regression.OneWayLS <a href=' /sandbox/regression/onewaygls.py#L165'>fitjoint</a>()</tt>	Fit a joint fixed effects model to all observations the regression results are attached as lsjoint.
<tt style='background-color:#E8E8E8;'> sandbox.regression.OneWayLS <a href=' /sandbox/regression/onewaygls.py#L229'>fitpooled</a>()</tt>	Fit the pooled model which assumes there are no differences across groups.
<tt style='background-color:#E8E8E8;'> sandbox.regression.OneWayLS <a href=' /sandbox/regression/onewaygls.py#L241'>ftest_summary</a>()</tt>	Run all ftests on the joint model returns.
<tt style='background-color:#E8E8E8;'> sandbox.regression.OneWayLS <a href=' /sandbox/regression/onewaygls.py#L287'>print_summary</a>(res)</tt>	Printable string of summary.
<tt style='background-color:#E8E8E8;'> sandbox.regression.OneWayLS <a href=' /sandbox/regression/onewaygls.py#L361'>lr_test</a>()</tt>	Generic likelihood ration test between nested models egin{align} d & = -2(\ln( ext{likelihood for null model}) - \ln( ext{likelihood for alternative model})) \ & = -2\ln\left( rac{ ext{likelihood for null model}}{ ext{likelihood for alternative model}}.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/gmm.py#L69'>maxabs</a>(x)</tt>	Just a shortcut to np abs x max().
<tt style='background-color:#E8E8E8;'> sandbox.regression.IV2SLS <a href=' /sandbox/regression/gmm.py#L118'>fit</a>()</tt>	Estimate model using 2sls iv regression returns.
<tt style='background-color:#E8E8E8;'> sandbox.regression.IV2SLS <a href=' /sandbox/regression/gmm.py#L163'>predict</a>(params,exog)</tt>	Return linear predicted values from a design matrix.
<tt style='background-color:#E8E8E8;'> sandbox.regression.IVRegressionResults <a href=' /sandbox/regression/gmm.py#L224'>spec_hausman</a>(dof)</tt>	Hausman's specification test.
<tt style='background-color:#E8E8E8;'> sandbox.regression.IVRegressionResults <a href=' /sandbox/regression/gmm.py#L258'>summary</a>(yname,xname,title,alpha)</tt>	Summarize the regression results parameters.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMM <a href=' /sandbox/regression/gmm.py#L483'>__init__</a>(endog,exog,instrument,k_moms)</tt>	Maybe drop and use mixin instead.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMM <a href=' /sandbox/regression/gmm.py#L539'>fit</a>(start_params,maxiter,inv_weights,weights_method)</tt>	Estimate parameters using gmm and return gmmresults todo weight and covariance arguments still need to be made consistent.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMM <a href=' /sandbox/regression/gmm.py#L692'>fitgmm</a>(start,weights,optim_method,optim_args)</tt>	Estimate parameters using gmm parameters.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMM <a href=' /sandbox/regression/gmm.py#L756'>fitgmm_cu</a>(start,optim_method,optim_args)</tt>	Estimate parameters using continuously updating gmm parameters.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMM <a href=' /sandbox/regression/gmm.py#L798'>gmmobjective</a>(params,weights)</tt>	Objective function for gmm minimization.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMM <a href=' /sandbox/regression/gmm.py#L821'>gmmobjective_cu</a>(params,weights_method,wargs)</tt>	Objective function for continuously updating gmm minimization.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMM <a href=' /sandbox/regression/gmm.py#L845'>fititer</a>(start,maxiter,start_invweights,weights_method)</tt>	Iterative estimation with updating of optimal weighting matrix stopping criteria are maxiter or change in parameter estimate less.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMM <a href=' /sandbox/regression/gmm.py#L917'>calc_weightmatrix</a>(moms,weights_method,wargs,params)</tt>	Calculate omega or the weighting matrix parameters.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMM <a href=' /sandbox/regression/gmm.py#L1047'>momcond_mean</a>(params)</tt>	Mean of moment conditions.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMM <a href=' /sandbox/regression/gmm.py#L1058'>gradient_momcond</a>(params,epsilon,centered)</tt>	Gradient of moment conditions parameters.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMMResults <a href=' /sandbox/regression/gmm.py#L1156'>calc_cov_params</a>(moms,gradmoms,weights,use_weights)</tt>	Calculate covariance of parameter estimates not all options tried out yet.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMMResults <a href=' /sandbox/regression/gmm.py#L1208'>bse_</a>()</tt>	Standard error of the parameter estimates.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMMResults <a href=' /sandbox/regression/gmm.py#L1214'>get_bse</a>()</tt>	Standard error of the parameter estimates with options.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMMResults <a href=' /sandbox/regression/gmm.py#L1243'>compare_j</a>(other)</tt>	Overidentification test for comparing two nested gmm estimates this assumes that some moment restrictions have been dropped in one.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GMMResults <a href=' /sandbox/regression/gmm.py#L1272'>summary</a>(yname,xname,title,alpha)</tt>	Summarize the regression results parameters.
<tt style='background-color:#E8E8E8;'> sandbox.regression.LinearIVGMM <a href=' /sandbox/regression/gmm.py#L1418'>fitgmm</a>(start,weights,optim_method)</tt>	Estimate parameters using gmm for linear model uses closed form expression instead of nonlinear optimizers.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/gmm.py#L1618'>spec_hausman</a>(params_e,params_i,cov_params_e,cov_params_i)</tt>	Hausmans specification test parameters.
<tt style='background-color:#E8E8E8;'> sandbox.regression.DistQuantilesGMM <a href=' /sandbox/regression/gmm.py#L1721'>momcond</a>(params)</tt>	Moment conditions for estimating distribution parameters by matching quantiles defines as many moment conditions as quantiles.
<tt style='background-color:#E8E8E8;'> sandbox.regression.DistQuantilesGMM <a href=' /sandbox/regression/gmm.py#L1754'>fitonce</a>(start,weights,has_optimal_weights)</tt>	Fit without estimating an optimal weighting matrix and return results this is a convenience function that calls fitgmm and covparams with.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/try_catdata.py#L66'>groupstatsbin</a>(factors,values)</tt>	Uses np bincount assumes factors/labels are integers.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/try_catdata.py#L79'>convertlabels</a>(ys,indices)</tt>	Convert labels based on multiple variables or string labels to unique index labels 0 1 2.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/try_catdata.py#L99'>groupsstats_1d</a>(y,x,labelsunique)</tt>	Use ndimage to get fast mean and variance.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/treewalkerclass.py#L109'>randintw</a>(w,size)</tt>	Generate integer random variables given probabilties useful because it can be used as index into any array or sequence type.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/treewalkerclass.py#L145'>getbranches</a>(tree)</tt>	Walk tree to get list of branches.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/treewalkerclass.py#L168'>getnodes</a>(tree)</tt>	Walk tree to get list of branches and list of leaves.
<tt style='background-color:#E8E8E8;'> sandbox.regression.RU2NMNL <a href=' /sandbox/regression/treewalkerclass.py#L292'>get_probs</a>(params)</tt>	Obtain the probability array given an array of parameters this is the function that can be called by loglike or other methods.
<tt style='background-color:#E8E8E8;'> sandbox.regression.RU2NMNL <a href=' /sandbox/regression/treewalkerclass.py#L324'>calc_prob</a>(tree,parent)</tt>	Walking a tree bottom-up based on dictionary.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/try_treewalker.py#L18'>branch</a>(tree)</tt>	Walking a tree bottom-up.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/try_treewalker.py#L47'>branch2</a>(tree)</tt>	Walking a tree bottom-up based on dictionary.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/kernridgeregress_class.py#L9'>plt_closeall</a>(n)</tt>	Close a number of open matplotlib windows.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GaussProcess <a href=' /sandbox/regression/kernridgeregress_class.py#L105'>fit</a>(y)</tt>	Fit the training explanatory variables to a sample ouput variable.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GaussProcess <a href=' /sandbox/regression/kernridgeregress_class.py#L115'>predict</a>(x)</tt>	Predict new y values for a given array of explanatory variables.
<tt style='background-color:#E8E8E8;'> sandbox.regression.GaussProcess <a href=' /sandbox/regression/kernridgeregress_class.py#L122'>plot</a>(y,plt)</tt>	Some basic plots.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/predstd.py#L12'>atleast_2dcol</a>(x)</tt>	Convert array_like to 2d from 1d or 0d.
<tt style='background-color:#E8E8E8;'> sandbox.regression. <a href=' /sandbox/regression/predstd.py#L27'>wls_prediction_std</a>(res,exog,weights,alpha)</tt>	Calculate standard deviation and confidence interval for prediction applies to wls and ols not to general gls.
<tt style='background-color:#E8E8E8;'> sandbox.datarich.FactorModelUnivariate <a href=' /sandbox/datarich/factormodels.py#L35'>calc_factors</a>(x,keepdim,addconst)</tt>	Get factor decomposition of exogenous variables this uses principal component analysis to obtain the factors.
<tt style='background-color:#E8E8E8;'> sandbox.datarich.FactorModelUnivariate <a href=' /sandbox/datarich/factormodels.py#L63'>fit_find_nfact</a>(maxfact,skip_crossval,cv_iter)</tt>	Estimate the model and selection criteria for up to maxfact factors the selection criteria that are calculated are aic bic and r2_adj.
<tt style='background-color:#E8E8E8;'> sandbox.datarich.FactorModelUnivariate <a href=' /sandbox/datarich/factormodels.py#L129'>summary_find_nfact</a>()</tt>	Provides a summary for the selection of the number of factors.
<tt style='background-color:#E8E8E8;'> regression.GLSHet <a href=' /regression/feasible_gls.py#L151'>iterative_fit</a>(maxiter)</tt>	Perform an iterative two-step procedure to estimate a wls model.
<tt style='background-color:#E8E8E8;'> regression. <a href=' /regression/mixed_linear_model.py#L164'>_dot</a>(x,y)</tt>	Returns the dot product of the arrays works for sparse and dense.
<tt style='background-color:#E8E8E8;'> regression. <a href=' /regression/mixed_linear_model.py#L178'>_multi_dot_three</a>(A,B,C)</tt>	Find best ordering for three arrays and do the multiplication.
<tt style='background-color:#E8E8E8;'> regression. <a href=' /regression/mixed_linear_model.py#L198'>_dotsum</a>(x,y)</tt>	Returns sum(x * y), where '*' is the pointwise product computed efficiently for dense and sparse matrices.
<tt style='background-color:#E8E8E8;'> regression. <a href=' /regression/mixed_linear_model.py#L211'>_get_exog_re_names</a>(exog_re)</tt>	Passes through if given a list of names otherwise gets pandas names.
<tt style='background-color:#E8E8E8;'> regression.MixedLMParams <a href=' /regression/mixed_linear_model.py#L259'>from_packed</a>(params,k_fe,k_re,use_sqrt)</tt>	Create a mixedlmparams object from packed parameter vector.
<tt style='background-color:#E8E8E8;'> regression.MixedLMParams <a href=' /regression/mixed_linear_model.py#L321'>from_components</a>(fe_params,cov_re,cov_re_sqrt,vcomp)</tt>	Create a mixedlmparams object from each parameter component.
<tt style='background-color:#E8E8E8;'> regression.MixedLMParams <a href=' /regression/mixed_linear_model.py#L369'>copy</a>()</tt>	Returns a copy of the object.
<tt style='background-color:#E8E8E8;'> regression.MixedLMParams <a href=' /regression/mixed_linear_model.py#L380'>get_packed</a>(use_sqrt,has_fe)</tt>	Return the model parameters packed into a single vector.
<tt style='background-color:#E8E8E8;'> regression. <a href=' /regression/mixed_linear_model.py#L417'>_smw_solver</a>(s,A,AtA,BI)</tt>	Solves the system (s*i + a*b*a') * x = rhs for an arbitrary rhs.
<tt style='background-color:#E8E8E8;'> regression. <a href=' /regression/mixed_linear_model.py#L470'>_smw_logdet</a>(s,A,AtA,BI)</tt>	Returns the log determinant of s*i + a*b*a'.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L730'>_make_param_names</a>(exog_re)</tt>	Returns the full parameter names list just the exogenous random effects variables and the exogenous random effects variables with.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L754'>from_formula</a>(cls,formula,data,re_formula)</tt>	Create a model from a formula and dataframe.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L935'>predict</a>(params,exog)</tt>	Return predicted values from a design matrix.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L967'>group_list</a>(array)</tt>	Returns array split into subarrays corresponding to the grouping structure.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L984'>fit_regularized</a>(start_params,method,alpha,ceps)</tt>	Fit a model in which the fixed effects parameters are penalized.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L1140'>get_fe_params</a>(cov_re,vcomp)</tt>	Use gls to update the fixed effects parameter estimates.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L1183'>_reparam</a>()</tt>	Returns parameters of the map converting parameters from the form used in optimization to the form returned to the user.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L1244'>_expand_vcomp</a>(vcomp,group)</tt>	Replicate variance parameters to match a group's design.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L1271'>_augment_exog</a>(group_ix)</tt>	Concatenate the columns for variance components to the columns for other random effects to obtain a single random effects.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L1301'>loglike</a>(params,profile_fe)</tt>	Evaluate the profile log-likelihood of the linear mixed effects model.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L1407'>_gen_dV_dPar</a>(ex_r,solver,group,max_ix)</tt>	A generator that yields the element-wise derivative of the marginal covariance matrix with respect to the random effects.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L1449'>score</a>(params,profile_fe)</tt>	Returns the score vector of the profile log-likelihood.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L1484'>score_full</a>(params,calc_fe)</tt>	Returns the score with respect to untransformed parameters.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L1639'>score_sqrt</a>(params,calc_fe)</tt>	Returns the score with respect to transformed parameters.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L1685'>hessian</a>(params)</tt>	Returns the model's hessian matrix.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L1841'>get_scale</a>(fe_params,cov_re,vcomp)</tt>	Returns the estimated error variance based on given estimates of the slopes and random effects covariance matrix.
<tt style='background-color:#E8E8E8;'> regression.MixedLM <a href=' /regression/mixed_linear_model.py#L1893'>fit</a>(start_params,reml,niter_sa,do_cg)</tt>	Fit a linear mixed model to the data.
<tt style='background-color:#E8E8E8;'> regression.MixedLMResults <a href=' /regression/mixed_linear_model.py#L2106'>fittedvalues</a>()</tt>	Returns the fitted values for the model.
<tt style='background-color:#E8E8E8;'> regression.MixedLMResults <a href=' /regression/mixed_linear_model.py#L2132'>resid</a>()</tt>	Returns the residuals for the model.
<tt style='background-color:#E8E8E8;'> regression.MixedLMResults <a href=' /regression/mixed_linear_model.py#L2143'>bse_fe</a>()</tt>	Returns the standard errors of the fixed effect regression coefficients.
<tt style='background-color:#E8E8E8;'> regression.MixedLMResults <a href=' /regression/mixed_linear_model.py#L2153'>bse_re</a>()</tt>	Returns the standard errors of the variance parameters note.
<tt style='background-color:#E8E8E8;'> regression.MixedLMResults <a href=' /regression/mixed_linear_model.py#L2177'>random_effects</a>()</tt>	The conditional means of random effects given the data.
<tt style='background-color:#E8E8E8;'> regression.MixedLMResults <a href=' /regression/mixed_linear_model.py#L2222'>random_effects_cov</a>()</tt>	Returns the conditional covariance matrix of the random effects for each group given the data.
<tt style='background-color:#E8E8E8;'> regression.MixedLMResults <a href=' /regression/mixed_linear_model.py#L2272'>t_test</a>(r_matrix,scale,use_t)</tt>	Compute a t-test for a each linear hypothesis of the form rb = q parameters.
<tt style='background-color:#E8E8E8;'> regression.MixedLMResults <a href=' /regression/mixed_linear_model.py#L2310'>summary</a>(yname,xname_fe,xname_re,title)</tt>	Summarize the mixed model regression results.
<tt style='background-color:#E8E8E8;'> regression.MixedLMResults <a href=' /regression/mixed_linear_model.py#L2438'>profile_re</a>(re_ix,vtype,num_low,dist_low)</tt>	Profile-likelihood inference for variance parameters.
<tt style='background-color:#E8E8E8;'> regression._MinimalWLS <a href=' /regression/_tools.py#L51'>fit</a>(method)</tt>	Minimal implementation of wls optimized for performance.
<tt style='background-color:#E8E8E8;'> regression. <a href=' /regression/linear_model.py#L146'>_get_sigma</a>(sigma,nobs)</tt>	Returns sigma matrix nobs by nobs for gls and the inverse of its cholesky decomposition.
<tt style='background-color:#E8E8E8;'> regression.RegressionModel <a href=' /regression/linear_model.py#L204'>df_model</a>()</tt>	The model degree of freedom defined as the rank of the regressor matrix minus 1 if a constant is included.
<tt style='background-color:#E8E8E8;'> regression.RegressionModel <a href=' /regression/linear_model.py#L221'>df_resid</a>()</tt>	The residual degree of freedom defined as the number of observations minus the rank of the regressor matrix.
<tt style='background-color:#E8E8E8;'> regression.RegressionModel <a href=' /regression/linear_model.py#L228'>fit</a>(method,cov_type,cov_kwds,use_t)</tt>	Full fit of the model.
<tt style='background-color:#E8E8E8;'> regression.RegressionModel <a href=' /regression/linear_model.py#L320'>predict</a>(params,exog)</tt>	Return linear predicted values from a design matrix.
<tt style='background-color:#E8E8E8;'> regression.RegressionModel <a href=' /regression/linear_model.py#L347'>get_distribution</a>(params,scale,exog,dist_class)</tt>	Returns a random number generator for the predictive distribution.
<tt style='background-color:#E8E8E8;'> regression.GLS <a href=' /regression/linear_model.py#L473'>whiten</a>(X)</tt>	Gls whiten method.
<tt style='background-color:#E8E8E8;'> regression.GLS <a href=' /regression/linear_model.py#L501'>loglike</a>(params)</tt>	Returns the value of the gaussian log-likelihood function at params.
<tt style='background-color:#E8E8E8;'> regression.GLS <a href=' /regression/linear_model.py#L543'>hessian_factor</a>(params,scale,observed)</tt>	Weights for calculating hessian parameters.
<tt style='background-color:#E8E8E8;'> regression.WLS <a href=' /regression/linear_model.py#L669'>whiten</a>(X)</tt>	Whitener for wls model multiplies each column by sqrt self weights.
<tt style='background-color:#E8E8E8;'> regression.WLS <a href=' /regression/linear_model.py#L689'>loglike</a>(params)</tt>	Returns the value of the gaussian log-likelihood function at params.
<tt style='background-color:#E8E8E8;'> regression.WLS <a href=' /regression/linear_model.py#L719'>hessian_factor</a>(params,scale,observed)</tt>	Weights for calculating hessian parameters.
<tt style='background-color:#E8E8E8;'> regression.OLS <a href=' /regression/linear_model.py#L818'>loglike</a>(params,scale)</tt>	The likelihood function for the ols model.
<tt style='background-color:#E8E8E8;'> regression.OLS <a href=' /regression/linear_model.py#L849'>whiten</a>(Y)</tt>	Ols model whitener does nothing returns y.
<tt style='background-color:#E8E8E8;'> regression.OLS <a href=' /regression/linear_model.py#L855'>score</a>(params,scale)</tt>	Evaluate the score function at a given point.
<tt style='background-color:#E8E8E8;'> regression.OLS <a href=' /regression/linear_model.py#L900'>hessian</a>(params,scale)</tt>	Evaluate the hessian function at a given point.
<tt style='background-color:#E8E8E8;'> regression.OLS <a href=' /regression/linear_model.py#L933'>hessian_factor</a>(params,scale,observed)</tt>	Weights for calculating hessian parameters.
<tt style='background-color:#E8E8E8;'> regression.OLS <a href=' /regression/linear_model.py#L1001'>_fit_ridge</a>(alpha)</tt>	Fit a linear model using ridge regression.
<tt style='background-color:#E8E8E8;'> regression.GLSAR <a href=' /regression/linear_model.py#L1104'>iterative_fit</a>(maxiter,rtol)</tt>	Perform an iterative two-stage procedure to estimate a gls model.
<tt style='background-color:#E8E8E8;'> regression.GLSAR <a href=' /regression/linear_model.py#L1165'>whiten</a>(X)</tt>	Whiten a series of columns according to an ar p covariance structure.
<tt style='background-color:#E8E8E8;'> regression. <a href=' /regression/linear_model.py#L1190'>yule_walker</a>(X,order,method,df)</tt>	Estimate ar p parameters from a sequence x using yule-walker equation.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1456'>conf_int</a>(alpha,cols)</tt>	Returns the confidence interval of the fitted parameters.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1599'>eigenvals</a>()</tt>	Return eigenvalues sorted in decreasing order.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1611'>condition_number</a>()</tt>	Return condition number of exogenous matrix.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1627'>cov_HC0</a>()</tt>	See statsmodels regressionresults.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1637'>cov_HC1</a>()</tt>	See statsmodels regressionresults.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1647'>cov_HC2</a>()</tt>	See statsmodels regressionresults.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1661'>cov_HC3</a>()</tt>	See statsmodels regressionresults.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1672'>HC0_se</a>()</tt>	See statsmodels regressionresults.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1679'>HC1_se</a>()</tt>	See statsmodels regressionresults.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1686'>HC2_se</a>()</tt>	See statsmodels regressionresults.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1693'>HC3_se</a>()</tt>	See statsmodels regressionresults.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1700'>resid_pearson</a>()</tt>	Residuals normalized to have unit variance.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1761'>compare_lm_test</a>(restricted,demean,use_lr)</tt>	Use lagrange multiplier test to test whether restricted model is correct parameters.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1842'>compare_f_test</a>(restricted)</tt>	Use f test to test whether restricted model is correct parameters.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1894'>compare_lr_test</a>(restricted,large_sample)</tt>	Likelihood ratio test to test whether restricted model is correct parameters.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L1999'>get_robustcov_results</a>(cov_type,use_t)</tt>	Create new results instance with robust covariance as default parameters.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L2291'>summary</a>(yname,xname,title,alpha)</tt>	Summarize the regression results parameters.
<tt style='background-color:#E8E8E8;'> regression.RegressionResults <a href=' /regression/linear_model.py#L2434'>summary2</a>(yname,xname,title,alpha)</tt>	Experimental summary function to summarize the regression results parameters.
<tt style='background-color:#E8E8E8;'> regression.OLSResults <a href=' /regression/linear_model.py#L2526'>get_influence</a>()</tt>	Get an instance of influence with influence and outlier measures returns.
<tt style='background-color:#E8E8E8;'> regression.OLSResults <a href=' /regression/linear_model.py#L2543'>outlier_test</a>(method,alpha)</tt>	Test observations for outliers according to method parameters.
<tt style='background-color:#E8E8E8;'> regression.OLSResults <a href=' /regression/linear_model.py#L2580'>el_test</a>(b0_vals,param_nums,return_weights,ret_params)</tt>	Tests single or joint hypotheses of the regression parameters using empirical likelihood.
<tt style='background-color:#E8E8E8;'> regression.OLSResults <a href=' /regression/linear_model.py#L2678'>conf_int_el</a>(param_num,sig,upper_bound,lower_bound)</tt>	Computes the confidence interval for the parameter given by param_num using empirical likelihood.
<tt style='background-color:#E8E8E8;'> regression.QuantReg <a href=' /regression/quantile_regression.py#L83'>whiten</a>(data)</tt>	Quantreg model whitener does nothing returns data.
<tt style='background-color:#E8E8E8;'> regression.QuantReg <a href=' /regression/quantile_regression.py#L89'>fit</a>(q,vcov,kernel,bandwidth)</tt>	Solve by iterative weighted least squares parameters.
<tt style='background-color:#E8E8E8;'> regression.QuantRegResults <a href=' /regression/quantile_regression.py#L341'>summary</a>(yname,xname,title,alpha)</tt>	Summarize the regression results parameters.
<tt style='background-color:#E8E8E8;'> regression.PredictionResults <a href=' /regression/_prediction.py#L42'>conf_int</a>(obs,alpha)</tt>	Returns the confidence interval of the value effect of the constraint.
<tt style='background-color:#E8E8E8;'> regression. <a href=' /regression/_prediction.py#L94'>get_prediction</a>(exog,transform,weights,row_labels)</tt>	Compute prediction results parameters.
<tt style='background-color:#E8E8E8;'> regression.RecursiveLS <a href=' /regression/recursive_ls.py#L94'>from_formula</a>(cls,formula,data,subset)</tt>	Not implemented for state space models.
<tt style='background-color:#E8E8E8;'> regression.RecursiveLS <a href=' /regression/recursive_ls.py#L101'>fit</a>()</tt>	Fits the model by application of the kalman filter.
<tt style='background-color:#E8E8E8;'> regression.RecursiveLS <a href=' /regression/recursive_ls.py#L176'>update</a>(params)</tt>	Update the parameters of the model updates the representation matrices to fill in the new parameter.
<tt style='background-color:#E8E8E8;'> regression.RecursiveLSResults <a href=' /regression/recursive_ls.py#L234'>recursive_coefficients</a>()</tt>	Estimates of regression coefficients recursively estimated.
<tt style='background-color:#E8E8E8;'> regression.RecursiveLSResults <a href=' /regression/recursive_ls.py#L272'>resid_recursive</a>()</tt>	Recursive residuals returns.
<tt style='background-color:#E8E8E8;'> regression.RecursiveLSResults <a href=' /regression/recursive_ls.py#L297'>cusum</a>()</tt>	Cumulative sum of standardized recursive residuals statistics returns.
<tt style='background-color:#E8E8E8;'> regression.RecursiveLSResults <a href=' /regression/recursive_ls.py#L342'>cusum_squares</a>()</tt>	Cumulative sum of squares of standardized recursive residuals statistics.
<tt style='background-color:#E8E8E8;'> regression.RecursiveLSResults <a href=' /regression/recursive_ls.py#L380'>plot_recursive_coefficient</a>(variables,alpha,legend_loc,fig)</tt>	Plot the recursively estimated coefficients on a given variable parameters.
<tt style='background-color:#E8E8E8;'> regression.RecursiveLSResults <a href=' /regression/recursive_ls.py#L528'>plot_cusum</a>(alpha,legend_loc,fig,figsize)</tt>	Plot the cusum statistic and significance bounds.
<tt style='background-color:#E8E8E8;'> regression.RecursiveLSResults <a href=' /regression/recursive_ls.py#L621'>plot_cusum_squares</a>(alpha,legend_loc,fig,figsize)</tt>	Plot the cusum of squares statistic and significance bounds.
<tt style='background-color:#E8E8E8;'> emplike.OptAFT <a href=' /emplike/aft_el.py#L62'>_opt_wtd_nuis_regress</a>(test_vals)</tt>	A function that is optimized over nuisance parameters to conduct a hypothesis test for the parameters of interest.
<tt style='background-color:#E8E8E8;'> emplike.OptAFT <a href=' /emplike/aft_el.py#L92'>_EM_test</a>(nuisance_params,params,param_nums,b0_vals)</tt>	Uses em algorithm to compute the maximum likelihood of a test parameters.
<tt style='background-color:#E8E8E8;'> emplike.OptAFT <a href=' /emplike/aft_el.py#L158'>_ci_limits_beta</a>(b0,param_num)</tt>	Returns the difference between the log likelihood for a parameter and some critical value.
<tt style='background-color:#E8E8E8;'> emplike.emplikeAFT <a href=' /emplike/aft_el.py#L254'>_is_tied</a>(endog,censors)</tt>	Indicated if an observation takes the same value as the next ordered observation.
<tt style='background-color:#E8E8E8;'> emplike.emplikeAFT <a href=' /emplike/aft_el.py#L280'>_km_w_ties</a>(tie_indic,untied_km)</tt>	Computes km estimator value at each observation taking into acocunt ties in the data.
<tt style='background-color:#E8E8E8;'> emplike.emplikeAFT <a href=' /emplike/aft_el.py#L310'>_make_km</a>(endog,censors)</tt>	Computes the kaplan-meier estimate for the weights in the aft model parameters.
<tt style='background-color:#E8E8E8;'> emplike.emplikeAFT <a href=' /emplike/aft_el.py#L344'>fit</a>()</tt>	Fits an aft model and returns results instance parameters.
<tt style='background-color:#E8E8E8;'> emplike.AFTResults <a href=' /emplike/aft_el.py#L374'>params</a>()</tt>	Fits an aft model and returns parameters.
<tt style='background-color:#E8E8E8;'> emplike.AFTResults <a href=' /emplike/aft_el.py#L399'>test_beta</a>(b0_vals,param_nums,ftol,maxiter)</tt>	Returns the profile log likelihood for regression parameters 'param_num' at 'b0_vals.
<tt style='background-color:#E8E8E8;'> emplike.AFTResults <a href=' /emplike/aft_el.py#L510'>ci_beta</a>(param_num,beta_high,beta_low,sig)</tt>	Returns the confidence interval for a regression parameter in the aft model.
<tt style='background-color:#E8E8E8;'> emplike.ELOriginRegress <a href=' /emplike/originregress.py#L66'>fit</a>()</tt>	Fits the model and provides regression results.
<tt style='background-color:#E8E8E8;'> emplike.OriginResults <a href=' /emplike/originregress.py#L162'>el_test</a>(b0_vals,param_nums,method,stochastic_exog)</tt>	Returns the llr and p-value for a hypothesized parameter value for a regression that goes through the origin.
<tt style='background-color:#E8E8E8;'> emplike.OriginResults <a href=' /emplike/originregress.py#L212'>conf_int_el</a>(param_num,upper_bound,lower_bound,sig)</tt>	Returns the confidence interval for a regression parameter when the regression is forced through the origin.
<tt style='background-color:#E8E8E8;'> emplike._ELRegOpts <a href=' /emplike/elregress.py#L38'>_opt_nuis_regress</a>(nuisance_params,param_nums,endog,exog)</tt>	A function that is optimized over nuisance parameters to conduct a hypothesis test for the parameters of interest.
<tt style='background-color:#E8E8E8;'> emplike. <a href=' /emplike/descriptive.py#L28'>DescStat</a>(endog)</tt>	Returns an instance to conduct inference on descriptive statistics via empirical likelihood.
<tt style='background-color:#E8E8E8;'> emplike._OptFuncts <a href=' /emplike/descriptive.py#L73'>_log_star</a>(eta,est_vect,weights,nobs)</tt>	Transforms the log of observation probabilities in terms of the lagrange multiplier to the log 'star' of the probabilities.
<tt style='background-color:#E8E8E8;'> emplike._OptFuncts <a href=' /emplike/descriptive.py#L109'>_hess</a>(eta,est_vect,weights,nobs)</tt>	Calculates the hessian of a weighted empirical likelihood problem.
<tt style='background-color:#E8E8E8;'> emplike._OptFuncts <a href=' /emplike/descriptive.py#L139'>_grad</a>(eta,est_vect,weights,nobs)</tt>	Calculates the gradient of a weighted empirical likelihood.
<tt style='background-color:#E8E8E8;'> emplike._OptFuncts <a href=' /emplike/descriptive.py#L168'>_modif_newton</a>(eta,est_vect,weights)</tt>	Modified newton's method for maximizing the log 'star' equation this.
<tt style='background-color:#E8E8E8;'> emplike._OptFuncts <a href=' /emplike/descriptive.py#L199'>_find_eta</a>(eta)</tt>	Finding the root of sum xi-h0 /(1+eta xi-mu solves for eta when computing elr for univariate mean.
<tt style='background-color:#E8E8E8;'> emplike._OptFuncts <a href=' /emplike/descriptive.py#L217'>_ci_limits_mu</a>(mu)</tt>	Calculates the difference between the log likelihood of mu_test and a specified critical value.
<tt style='background-color:#E8E8E8;'> emplike._OptFuncts <a href=' /emplike/descriptive.py#L235'>_find_gamma</a>(gamma)</tt>	Finds gamma that satisfies.
<tt style='background-color:#E8E8E8;'> emplike._OptFuncts <a href=' /emplike/descriptive.py#L258'>_opt_var</a>(nuisance_mu,pval)</tt>	This is the function to be optimized over a nuisance mean parameter.
<tt style='background-color:#E8E8E8;'> emplike._OptFuncts <a href=' /emplike/descriptive.py#L291'>_ci_limits_var</a>(var)</tt>	Used to determine the confidence intervals for the variance.
<tt style='background-color:#E8E8E8;'> emplike._OptFuncts <a href=' /emplike/descriptive.py#L310'>_opt_skew</a>(nuis_params)</tt>	Called by test_skew this function is optimized over.
<tt style='background-color:#E8E8E8;'> emplike._OptFuncts <a href=' /emplike/descriptive.py#L342'>_opt_kurt</a>(nuis_params)</tt>	Called by test_kurt this function is optimized over.
<tt style='background-color:#E8E8E8;'> emplike._OptFuncts <a href=' /emplike/descriptive.py#L374'>_opt_skew_kurt</a>(nuis_params)</tt>	Called by test_joint_skew_kurt this function is optimized over.
<tt style='background-color:#E8E8E8;'> emplike.DescStatUV <a href=' /emplike/descriptive.py#L492'>test_mean</a>(mu0,return_weights)</tt>	Returns - 2 x log-likelihood ratio p-value and weights for a hypothesis test of the mean.
<tt style='background-color:#E8E8E8;'> emplike.DescStatUV <a href=' /emplike/descriptive.py#L525'>ci_mean</a>(sig,method,epsilon,gamma_low)</tt>	Returns the confidence interval for the mean.
<tt style='background-color:#E8E8E8;'> emplike.DescStatUV <a href=' /emplike/descriptive.py#L605'>test_var</a>(sig2_0,return_weights)</tt>	Returns -2 x log-likelihoog ratio and the p-value for the hypothesized variance.
<tt style='background-color:#E8E8E8;'> emplike.DescStatUV <a href=' /emplike/descriptive.py#L643'>ci_var</a>(lower_bound,upper_bound,sig)</tt>	Returns the confidence interval for the variance.
<tt style='background-color:#E8E8E8;'> emplike.DescStatUV <a href=' /emplike/descriptive.py#L698'>plot_contour</a>(mu_low,mu_high,var_low,var_high)</tt>	Returns a plot of the confidence region for a univariate mean and variance.
<tt style='background-color:#E8E8E8;'> emplike.DescStatUV <a href=' /emplike/descriptive.py#L748'>test_skew</a>(skew0,return_weights)</tt>	Returns -2 x log-likelihood and p-value for the hypothesized skewness.
<tt style='background-color:#E8E8E8;'> emplike.DescStatUV <a href=' /emplike/descriptive.py#L778'>test_kurt</a>(kurt0,return_weights)</tt>	Returns -2 x log-likelihood and the p-value for the hypothesized kurtosis.
<tt style='background-color:#E8E8E8;'> emplike.DescStatUV <a href=' /emplike/descriptive.py#L808'>test_joint_skew_kurt</a>(skew0,kurt0,return_weights)</tt>	Returns - 2 x log-likelihood and the p-value for the joint hypothesis test for skewness and kurtosis.
<tt style='background-color:#E8E8E8;'> emplike.DescStatUV <a href=' /emplike/descriptive.py#L841'>ci_skew</a>(sig,upper_bound,lower_bound)</tt>	Returns the confidence interval for skewness.
<tt style='background-color:#E8E8E8;'> emplike.DescStatUV <a href=' /emplike/descriptive.py#L885'>ci_kurt</a>(sig,upper_bound,lower_bound)</tt>	Returns the confidence interval for kurtosis.
<tt style='background-color:#E8E8E8;'> emplike.DescStatMV <a href=' /emplike/descriptive.py#L964'>mv_test_mean</a>(mu_array,return_weights)</tt>	Returns -2 x log likelihood and the p-value for a multivariate hypothesis test of the mean.
<tt style='background-color:#E8E8E8;'> emplike.DescStatMV <a href=' /emplike/descriptive.py#L1005'>mv_mean_contour</a>(mu1_low,mu1_upp,mu2_low,mu2_upp)</tt>	Creates a confidence region plot for the mean of bivariate data parameters.
<tt style='background-color:#E8E8E8;'> emplike.DescStatMV <a href=' /emplike/descriptive.py#L1077'>test_corr</a>(corr0,return_weights)</tt>	Returns -2 x log-likelihood ratio and p-value for the.
<tt style='background-color:#E8E8E8;'> emplike.DescStatMV <a href=' /emplike/descriptive.py#L1110'>ci_corr</a>(sig,upper_bound,lower_bound)</tt>	Returns the confidence intervals for the correlation coefficient parameters.
<tt style='background-color:#E8E8E8;'> emplike._ANOVAOpt <a href=' /emplike/elanova.py#L28'>_opt_common_mu</a>(mu)</tt>	Optimizes the likelihood under the null hypothesis that all groups have.
<tt style='background-color:#E8E8E8;'> emplike.ANOVA <a href=' /emplike/elanova.py#L81'>compute_ANOVA</a>(mu,mu_start,return_weights)</tt>	Returns -2 log likelihood the pvalue and the maximum likelihood estimate for a common mean.
