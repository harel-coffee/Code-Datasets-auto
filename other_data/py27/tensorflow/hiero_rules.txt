arg	a few dummy images ||| tag n_images	count=1
module	in ||| tensorboard backend event_processing	count=1
arg	a tensor ||| tensor paddings mode	count=1
class	the ||| indexed slices	count=2
arg	specifies the default ||| device_name_or_function	count=1
module	and runs a ||| learn dataframe	count=1
function	for single value models ||| single value	count=1
function_arg	on [arg_2] ||| [function_1] batch [arg_2]	count=1
function	the node ||| node	count=2
arg	computes precision@k [arg_2] ||| [arg_2] [arg_1]	count=1
arg	dictionary and return indexies ||| x	count=1
module	returns serialized bigquerytablepartition messages ||| contrib cloud python ops	count=1
function_arg	split [arg_2] ||| contrib bayesflow examples reinforce_simple [function_1] merge [arg_2]	count=7
function	the loss to ||| loss	count=1
function	shape values ||| valid sample	count=1
function	a param to init ||| init assign fetch	count=1
arg	in input best ||| inputs sequence_length merge_repeated	count=1
function	pearson [function_2] ||| [function_1] [function_2]	count=2
class	an lstm cell ||| coupled input forget gate lstmcell	count=1
class	sure we don't have ||| upgrade files	count=1
function	integers ||| to sequences	count=1
class	to ||| to	count=2
function	variables according to the ||| variables	count=1
function	the files ||| index	count=1
function	creates a hook ||| session run hook	count=1
module	the ||| specs python	count=1
function	derivatives for bilinear ||| bilinear grad	count=1
function_arg	iff op is ||| constant enter op	count=1
function	via [function_2] ||| [function_2] [function_1]	count=2
function	log the in and ||| log	count=1
function	kernel size which ||| kernel size	count=2
arg	tests input-output pairs for ||| ksizes strides rates	count=1
arg	the important bits of ||| original encoded	count=1
module_class	[module_1] iteration ||| [module_1] [class_2]	count=2
function	name of the ||| name	count=5
arg	based on the ||| weight_collections trainable	count=1
class	a text ||| text	count=1
function	vocabulary dictionary ||| fit transform	count=1
function	resnet_v2() ||| resnet v2	count=2
function	size which ||| size	count=1
module	register ||| labeled_tensor python ops	count=1
function_arg	at least [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] neighbor ||| [function_2] [function_1]	count=4
function	[function_1] def from ||| [function_2] [function_1]	count=1
function	tensors ||| state tensors	count=1
function	inception ||| inception	count=5
class	names in this cluster ||| cluster spec	count=1
class	[class_1] id ||| [class_1] [class_2]	count=1
function	[function_1] dnn-only ||| [function_1] [function_2]	count=2
module	vocabulary dictionary and ||| python learn preprocessing	count=1
function	list of ||| rich line list	count=1
module	dictionary and ||| learn python	count=1
function	processor of ||| get processor	count=1
arg	of cursesui based ||| ui_type on_ui_exit	count=2
arg	activations ||| logits dim	count=1
function	return the python object ||| object	count=1
function	each ||| texts	count=1
function	type int64 ||| int64	count=1
arg	arguments into argument lists ||| args	count=1
function_arg	[function_1] [arg_2] ||| [function_1] valid dtypes [arg_2]	count=2
module	distributed floating point ||| specs python	count=1
function	linked to ops that ||| from	count=1
class	[class_1] id ||| [class_2] [class_1]	count=1
function	checkpoint from ||| checkpoint from	count=1
function	[function_1] batch ||| [function_2] [function_1]	count=32
function	partitioned variable ||| partitioned variable	count=1
function	to strings ||| test dtype string	count=1
function_arg	to train model ||| simple train model	count=1
class	the wrapper ||| debug wrapper session test	count=1
arg	tf graph ||| graph	count=1
function	for nearest neighbor ||| nearest neighbor	count=1
module	menuitem from ||| debug cli	count=1
module	to the training procedure ||| python ops losses	count=1
function	returns the function that ||| function	count=1
module	file to ||| python summary	count=1
function	[function_1] definite matrix ||| [function_1] [function_2]	count=1
function	the export strategies with ||| export strategies	count=1
function	dtype ||| dtype	count=9
function	as the initial value ||| initial value	count=1
function	the variables and names ||| and slice inputs	count=1
arg	ids in a ||| ids partition_strategy	count=1
module	creates a new ||| training	count=1
function	non-negative ||| non	count=1
function	final state ||| sequence to final	count=1
module	gfile ||| contrib session_bundle	count=1
function	report of ||| report	count=1
arg	maps a ||| mapping default_value name	count=1
module	parses ||| debug cli	count=1
function	collection with the ||| collection	count=2
class	tensor for the given ||| lazy	count=1
arg	each value in values ||| values	count=2
module	retrieves an ||| keras engine	count=1
function	values ||| hand values	count=1
module	lanczos ||| solvers python ops	count=1
function	log [function_2] ||| [function_2] [function_1]	count=9
class	for proper shape ||| multinomial	count=1
module	can do ||| python layers	count=1
module	tensorshape ||| python ops	count=1
module	from a ||| learn estimators	count=1
function	[function_1] a scalar ||| [function_2] [function_1]	count=2
arg	propagates x gradients ||| x	count=1
function	1/sec^2 x ||| tan	count=1
function	inputs of ||| sgv inputs	count=1
function	sort a ||| sort dump data	count=1
function	first [function_2] ||| [function_1] [function_2]	count=5
function	trigger ||| events trigger	count=1
function	standard services for 'sess' ||| standard services	count=1
function	node's statistics ||| stats	count=1
function	[function_1] export in ||| [function_2] [function_1]	count=2
module	total number of ||| ops	count=2
function	graph ||| set python graph	count=1
function	the projections ||| projections	count=1
function	compression for large records ||| large	count=1
module	tensors execute together ||| contrib batching	count=1
class	returns ||| resample test	count=1
function	sparsematmul ||| sparse mat mul	count=1
arg	[arg_1] keys and ||| [arg_2] values [arg_1]	count=1
function	computes the approximate auc ||| streaming auc	count=1
function	spec for ||| spec for	count=2
module	__init__ which gets ||| contrib distributions	count=1
module	have ||| tools	count=1
function	and add it ||| add op	count=1
function	safe ||| safe	count=1
function	that initializes [function_2] ||| [function_1] [function_2]	count=2
arg	sgv1 ||| sgv1 disconnect_first	count=1
class	represented by this operator ||| linear operator scaled	count=1
module	batch of beams ||| seq2seq python ops	count=1
module	sequence-to-sequence ||| legacy_seq2seq	count=2
function_arg	[function_1] operation ||| [arg_2] [function_1]	count=3
function_arg	[function_1] handle ||| [function_1] apply sparse grad [arg_2]	count=3
arg	neural network ||| cell_fw cell_bw inputs initial_state_fw	count=1
function_arg	str [arg_2] ||| [arg_2] [function_1]	count=3
class	generator ||| generator enqueuer	count=2
function	the expected contract ||| contract	count=1
function	create a scale matrix ||| scale	count=1
function	node-status ||| status label	count=1
function	converts a list of ||| to	count=1
module	image ||| python slim data	count=1
function	limit ||| limit	count=2
function	to restore variables ||| sharded restore	count=1
function	address of [function_2] ||| [function_2] [function_1]	count=4
arg	of the subgraph sgv ||| sgv control_outputs	count=1
function_arg	confusion matrix [arg_2] ||| [arg_2] [function_1]	count=4
arg	dimension to ||| dim epsilon	count=1
function	manual variable initialization ||| manual variable initialization	count=2
module	and variance of ||| python ops	count=1
function	operation [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] trainer ops ||| [function_1] [function_2]	count=7
function	[function_1] 'n' times ||| [function_2] [function_1]	count=1
module	numpy ||| python keras	count=1
module	manual ||| contrib keras python keras	count=1
module	the inputs ||| contrib graph_editor	count=1
module	loss using ||| losses	count=2
function_arg	[function_1] [arg_2] ||| [function_1] tensor [arg_2]	count=74
function	to define the ||| define	count=1
arg	a ||| name shape dtype	count=1
function_arg	[function_1] row ||| [arg_2] [function_1]	count=4
function	a dense [function_2] ||| [function_1] to sparse [function_2]	count=3
arg	create ||| capacity	count=1
function_arg	full batch [arg_2] ||| [arg_2] [function_1]	count=1
function	to normalize ||| normalizer fn	count=1
class	a table outputs the ||| mutable dense hash table	count=1
function	gradients for a merge ||| merge grad	count=1
module	for ||| python estimator export	count=2
module	in ||| backend event_processing	count=1
function	cumsum ||| cumsum	count=1
module	extract ||| python framework	count=1
function	size which is automatically ||| size	count=1
function	proto_type ||| proto	count=1
function	a menuitem ||| to	count=1
function	create an instance of ||| create profiler ui	count=1
module	self _value ||| bayesflow python	count=1
function	to initialize ||| initialize	count=2
function	for node-status ||| node	count=1
module	valueerror raised when the ||| python	count=1
class	the monitored ||| monitored	count=1
arg	in sampled_candidates ||| sampled_candidates num_true seed	count=1
module	vocabulary ||| python learn	count=1
module	disk ||| python summary	count=2
module	get ||| api lib	count=1
arg	specified dimension to ||| dim epsilon scope	count=1
function	either [function] or unicode ||| [function]	count=1
function_arg	minimize loss ||| minimize loss	count=1
function	[function] shape ||| reshape [function]	count=1
function	a dict of predictions ||| to predictions	count=2
module	labeled ||| contrib labeled_tensor	count=3
function	provided have invalid ||| test invalid number of	count=1
class	a mixture of ||| mixture	count=1
module	vocabulary dictionary and ||| learn python learn	count=1
function	[function_1] length of ||| [function_1] [function_2]	count=1
module	version with default shuffle ||| contrib learn python learn learn_io	count=1
function	batch vector ||| vector	count=1
class	[class_1] tensor in ||| [class_2] [class_1]	count=1
class	a sequence of integers ||| tokenizer	count=1
function	[function_1] dense inputs ||| [function_1] [function_2]	count=1
function	header ||| get header	count=2
module	each ||| python keras	count=1
function_arg	[function_1] [arg_2] tensor_forest ||| [function_1] [arg_2]	count=3
arg	labels and predictions ||| predictions labels dim weights	count=1
module	distribution s ||| distributions	count=1
function	build ||| build	count=10
arg	equations with best effort ||| adjoint adjoint_arg	count=1
function	page that ||| page	count=1
function	of the debug-wrapper session ||| session	count=1
function_arg	[function_1] [arg_2] atomically ||| [function_1] file [arg_2] contents	count=1
module_class	this barrier ||| python ops barrier	count=1
module	elbo ||| contrib bayesflow python ops	count=1
function	feature tuples into raw ||| to raw	count=1
function	for large ||| large	count=1
function	spaces of the range ||| range	count=2
function	match the ||| filter ts	count=1
function	vgg 16-layers version d ||| vgg 16	count=1
class	returns an input_fn that ||| kmeans test base	count=1
function	condition based on the ||| condition	count=1
function_arg	[function_1] in ||| [function_1] [arg_2]	count=5
module	last two dimensions of ||| linalg python ops	count=1
function_arg	to [arg_2] ||| [function_1] batch paddings input_shape [arg_2]	count=1
function	root ||| streaming root	count=1
arg	input and ||| cls inputs	count=2
function_arg	checkpoint [arg_2] ||| [arg_2] [function_1]	count=3
arg	[arg_1] or index ||| [arg_2] [arg_1]	count=1
class	the handler with ||| handler	count=1
function	average leaf impurity of ||| average impurity	count=1
class	event file to ||| summary writer	count=1
function	a tf placeholder ||| make placeholder	count=2
module	specified ||| contrib slim python slim	count=1
class	initializes ||| summary saver hook	count=1
function	the maximum layer ||| maximum	count=1
function	indices that ||| indices	count=1
function	search commands are recorded ||| search from	count=1
module	accessible method for determining ||| keras	count=1
function	csv file ||| csv	count=2
arg	[arg_1] in x ||| [arg_2] [arg_1]	count=6
function	their ||| bucket by	count=1
function	step true positives ||| sparse true positive at	count=1
function	indices of non-zero values ||| indices	count=1
arg	input_fn diffs ||| y batch_size num_epochs	count=1
module	and previous output ||| grid_rnn python ops	count=1
function	distribution ||| distribution	count=1
function	function [function_2] ||| [function_1] [function_2]	count=3
function	plugin asset from ||| asset	count=1
arg	new ||| name	count=1
function_arg	[function_1] key ||| [function_1] [arg_2]	count=1
arg	a tensorflow graph ||| graph debug_ops	count=1
function	name ||| kind name	count=1
module	session and ||| learn python learn	count=1
arg	scale loc and scale ||| loc scale	count=1
function_arg	[function_1] broadcasts ||| [arg_2] [function_1]	count=4
arg	the getter for ||| history_value	count=1
function	precision@k of ||| at top k	count=1
function	tuple containing coordinate labels ||| labels	count=1
arg	and a target ||| target decorator_func decorator_name decorator_doc	count=1
class	an lstm cell ||| input forget gate lstmcell	count=1
function_arg	a variable [arg_2] ||| [function_1] [arg_2]	count=1
class	eventfilewriter ||| writer	count=1
function	a filename for ||| checkpoint filename	count=1
module	the tensors linked to ||| contrib graph_editor	count=1
function_arg	[function_1] [arg_2] ||| [function_1] a b [arg_2]	count=3
function	and mirror pad ops ||| and conv	count=1
function	save variables that are ||| save ops	count=1
arg	[arg_1] with projected ||| [arg_2] [arg_1]	count=4
module	integer[s] or tensorshape object[s] ||| seq2seq	count=1
function	dfs ||| dfs from	count=1
arg	different thresholds on ||| thresholds	count=3
function	extract command ||| get command	count=1
function	tuples into raw params ||| features to raw params	count=1
function	feed types used in ||| feed types	count=1
arg	if value_or_tensor_or_var has ||| value_or_tensor_or_var	count=1
function	the node's statistics ||| stats for node	count=1
function	[function_1] urls ||| [function_1] [function_2]	count=1
function	[function_1] binary operation ||| [function_2] [function_1]	count=1
function	at least the ||| at least	count=1
function	context in ||| context	count=1
function	returns ||| get collection proto type	count=1
function_arg	metagraphdef [arg_2] ||| [function_1] [arg_2]	count=3
function	the recall ||| recall	count=1
function	the base directory ||| dir	count=2
arg	of richtextlines ||| lines font_attr_segs annotations	count=1
class	this plugin ||| projector plugin	count=1
class	full names to a ||| visitor	count=1
class	an input_fn that ||| test	count=1
class	test ||| resnet utils test	count=1
function_arg	context [arg_2] ||| [arg_2] [function_1]	count=1
function	model_fn that returns ||| with model fn	count=1
class	adadelta ||| adadelta	count=1
module_class	params [module_1] [class_2] canonical format ||| [module_1] [class_2]	count=1
arg	labels [arg_2] ||| [arg_2] [arg_1]	count=10
arg	a python object "candidate" ||| candidate name	count=1
module	for the sequence-to-sequence model ||| legacy_seq2seq python ops	count=2
function_arg	[function_1] file is ||| [arg_2] [function_1]	count=3
function_arg	input tensors [arg_2] ||| [arg_2] [function_1]	count=4
arg	input_tree ||| input_tree check_types	count=1
function	makes [function_2] ||| [function_2] [function_1]	count=2
arg	lazy bucketing of ||| tensors batch_size bucket_boundaries	count=1
function	kl for ||| non batch kl	count=1
arg	forward step for the ||| input_data input_h input_c params	count=1
arg	for given tensors ||| step tensors	count=1
module	of a tensor ||| python keras	count=1
module_class	params [module_1] [class_2] format ||| [module_1] [class_2] params	count=1
function	device for ||| device	count=1
function	strategies ||| strategies	count=1
module	a sequence of ||| keras python	count=1
function	a device ||| device	count=2
function	a log loss ||| log loss	count=2
function_arg	call node ||| call node	count=1
module	of integers ||| ops	count=1
function	the items that ||| items	count=1
arg	and [arg_2] ||| [arg_1] to_proto [arg_2]	count=3
function	from ||| guide	count=1
function_arg	[function_1] [arg_2] ||| [function_1] step [arg_2]	count=6
function	[function_1] state of ||| [function_1] [function_2]	count=1
function	richtextlines ||| lines from	count=1
function	estimate ||| estimate	count=1
function	segmentmin ||| segment min or max	count=1
function	model_fn can return ||| create model fn	count=1
module	and set ||| ops	count=1
arg	propagates x ||| x y	count=1
function	for node-status ||| node status	count=1
function	to the [function_2] ||| [function_1] [function_2]	count=1
class	the directory and ||| debug dump dir	count=1
function	the standard ||| standard	count=1
module	regression ||| learn utils	count=1
arg	new type ||| dtype name	count=1
module	constructor for ||| debug wrappers	count=1
function	whether tensorflow can ||| is	count=1
class	this plugin ||| fake plugin	count=1
function	nearest neighbor ||| nearest neighbor	count=1
function	op to fill ||| op	count=1
arg	for var ||| var	count=2
function	log p x ||| with log joint	count=1
module	create a sequence-to-sequence ||| legacy_seq2seq python ops	count=1
function	[function_1] the attribute ||| [function_2] [function_1]	count=5
class	wrapper should work ||| debug wrapper session test	count=1
function	vectors by combining all ||| vector	count=1
module	models that ||| python learn estimators	count=1
function	rename or move ||| rename	count=1
module	starting and stopping ||| slim python slim	count=1
class	initializes ||| dnnlinear combined estimator	count=1
module	and session and ||| learn python learn	count=1
class	debugtensordatum from the directory ||| debug dump dir	count=1
arg	across all steps and ||| inputs noutput scope	count=1
function	sparse tensor that will ||| sparse	count=1
function	for proper ||| maybe assert valid	count=1
function	max over sample ||| sample max	count=2
class	[class_1] subclasses ||| [class_1] [class_2]	count=2
module	the global ||| python	count=1
function	computes the minimum of ||| reduce min	count=1
arg	file / directory ||| oldname newname overwrite	count=1
arg	function which chooses ||| pred cond_true cond_false	count=1
class	labels ||| cli	count=1
function	and bucketized features ||| bucketized features	count=1
function	get static ||| get static	count=2
function_arg	assert the [arg_2] ||| [function_1] greater [arg_2]	count=1
function	return a temporary ||| get temp	count=1
module	dictionary ||| python learn	count=1
arg	linked ||| ops	count=1
arg	list of tensors ||| tensors session	count=1
class	run ||| run	count=1
function	check sparsemax-loss kernel ||| sparsemax loss	count=1
function_arg	[function_1] predictions, ||| [function_1] [arg_2]	count=2
function	large batch size to ||| large batch	count=1
arg	best effort a ||| adjoint adjoint_arg name	count=1
function	of given variable ||| variable	count=1
function	report ||| report	count=2
function	graph ||| graph for ui	count=1
class	g-lstm ||| glstmcell	count=1
module	store as self _value ||| bayesflow python	count=1
module_class	params from [module_1] [class_2] canonical format ||| [module_1] [class_2]	count=1
function	whether to verify that ||| verify pd	count=2
function	returns ||| check hooks type	count=1
module	number of ||| contrib metrics python ops	count=1
function	returns the address ||| address	count=1
class	the handler ||| item handler	count=1
function	attribute to ||| get attribute	count=1
function	an argument to ||| compatible matrix	count=2
function	file [function_2] ||| [function_1] [function_2]	count=14
function	[function_1] or minimum ||| [function_2] [function_1]	count=1
module	dropout ||| python ops	count=1
function	tensorflow graph with a ||| graph with	count=1
function	a richtextlines ||| text lines from rich	count=1
function	create a tf placeholder ||| make placeholder from tensor	count=1
arg	computes precision@k of ||| k class_id	count=1
function	variables and ||| and slice	count=1
arg	specified axis ||| x axis	count=2
arg	in ||| dead_branch	count=1
function	[function_1] merge with ||| [function_2] fake quant [function_1]	count=1
arg	a tf ||| np_array	count=1
function	[function_1] dict into ||| [function_1] [function_2]	count=1
function	[function_1] all variables ||| [function_2] [function_1]	count=2
arg	compute 1-hot encodings ||| labels num_classes scope	count=1
arg	a lower triangular matrix ||| tril	count=1
module	creates a sequence of ||| ops	count=1
function	model's input [function_2] ||| [function_2] [function_1]	count=1
function	a tensor to ||| data tensor	count=1
arg	values ||| values dimension	count=2
class	the enqueue ops for ||| runner	count=1
module	of a relaxedcategorical ||| contrib distributions python ops	count=1
module	a batch of ||| python ops distributions	count=5
module	mnist dataset ||| datasets	count=1
function	from a given ||| assign from	count=1
module	non-reference dtype based on ||| python framework	count=1
module_class	[module_1] accumulator ||| [module_1] [class_2]	count=5
class	file ||| file io	count=3
function	a checkpoint [function_2] ||| [function_1] [function_2]	count=4
module	to form the ||| python ops	count=1
function	of the image ||| image	count=1
arg	[arg_1] m ||| [arg_2] [arg_1]	count=2
function_arg	print a [arg_2] ||| [arg_2] [function_1]	count=3
class	a reservoir using a ||| reservoir	count=1
function	[function_1] tags that ||| [function_1] [function_2]	count=1
arg	fetch all outputs ||| signature_def_key input_tensor_key_feed_dict	count=1
function	should be ||| keys should	count=1
module	keras ||| contrib keras python keras utils	count=1
module	updates internal vocabulary based ||| keras preprocessing	count=1
module	the collection of losses ||| losses	count=1
module	event ||| summary	count=1
function_arg	statically compute [arg_2] ||| [function_1] equal [arg_2]	count=1
function_arg	signaturedef proto [arg_2] ||| [function_1] [arg_2]	count=2
function	is zlib library compatible ||| test write zlib	count=1
function_arg	a sparse [arg_2] ||| [arg_2] [function_1]	count=1
function	initialize [function_2] ||| [function_1] [function_2]	count=3
arg	a new adagradda optimizer ||| learning_rate global_step initial_gradient_squared_accumulator_value l1_regularization_strength	count=1
function	labels [function_2] ||| [function_2] [function_1]	count=8
function	checkpoint from a ||| checkpoint from	count=1
class	which ||| slices	count=1
module	a dataframe with ||| python learn dataframe	count=1
module	integers ||| keras python keras	count=1
function	for list_profile ||| list profile	count=1
function	in command [function_2] ||| [function_1] [function_2]	count=1
module	dimensions of zero or ||| ops	count=1
function	column with [function_2] ||| [function_2] [function_1]	count=2
module	the ||| contrib distributions python	count=4
class	parameters for an ugrnn ||| ugrnncell	count=1
class	a shape based on ||| tensor shape	count=1
function	filter data types into ||| data type filter	count=1
function	the gradient ||| grad	count=1
arg	sp_input to ||| sp_input	count=1
function_arg	[function_1] out grads ||| [function_1] op [arg_2]	count=1
module	abstract ||| keras engine	count=1
arg	state-saving ||| sequence_features context_features sequence_feature_columns num_unroll	count=1
arg	a summary tag ||| tag	count=5
module	used in this ||| contrib grid_rnn python ops	count=1
function	global step ||| global step	count=8
function	and close ||| close	count=2
function	new seed ||| new	count=1
arg	conv + ||| x filters num_row	count=1
module	in ||| python	count=2
class	initialization for all _composablemodel ||| composable model	count=1
function_arg	[function_1] signatures ||| [arg_2] [function_1]	count=1
arg	of a 4d tensor ||| data_format	count=1
function_arg	[function_1] across tensors ||| [function_1] [arg_2]	count=4
arg	wait for threads to ||| threads	count=1
function	directory containing all ||| dir with all	count=1
function	return a postfix representation ||| structure	count=1
module	indices and values of ||| ops	count=1
function	refenceresolver to [function] ||| to [function]	count=3
function	[function_1] cell used ||| [function_2] [function_1]	count=6
arg	dtype and returns it ||| dtype	count=1
module	a set of ||| python ops	count=4
arg	microbenchmark to measure ||| name target iters	count=1
arg	file ||| checkpoint_dir	count=1
function	creates default [function_2] ||| [function_1] [function_2]	count=3
function_arg	random [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] cross entropy ||| [function_1] [function_2]	count=3
arg	1d convolution layer e ||| kernel_size strides	count=1
function	returns the ||| collection proto	count=1
function_arg	[function_1] [arg_2] ||| [function_1] sp_input [arg_2]	count=13
function	pooling ||| pooling	count=3
function	gets the [function_2] ||| [function_2] [function_1]	count=10
class	multivariate normal distribution ||| multivariate normal tri l	count=1
function	[function_1] of source ||| [function_1] [function_2]	count=2
function	a pandas ||| pandas	count=1
function	return the [function_2] ||| [function_1] [function_2]	count=3
module	process to which this ||| python client	count=1
function	param to init and ||| init assign fetch	count=1
function_arg	inception v3 [arg_2] ||| [function_1] [arg_2]	count=1
function	used in the ||| info	count=1
function_arg	factory function for building [function_1] [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] accumulator for ||| [function_1] forward [function_2]	count=1
function	get legend for ||| status label legend	count=1
module	specified by the ||| slim python slim data	count=1
class	proper shape ||| multinomial	count=1
arg	concatenates n ||| n	count=1
function_arg	tensor [arg_2] ||| [function_1] [arg_2]	count=3
function	linked ||| filter ts	count=1
module	returns a ||| feature_column	count=2
function_arg	[function_1] the cells ||| [arg_2] [function_1]	count=1
function	matmul ||| matmul	count=1
function	dict symbol name ||| guide index	count=1
function	create an instance ||| create profiler ui	count=1
function	the complex conjugate ||| conj grad	count=1
function_arg	[function_1] given name ||| [arg_2] [function_1]	count=4
function	or max amazingly it's ||| or max	count=1
class	for ||| builder	count=1
arg	while maintaining ||| outputs_collections scope	count=1
class	this estimator ||| base wrapper	count=1
function	then return tensor ||| maybe assert valid	count=1
function	inputs and a depth ||| depth	count=1
arg	richtextlines ||| tst out	count=1
function	global default if ||| default	count=1
class	kmeans ||| kmeans	count=1
function_arg	[function_1] stopatstephook ||| [arg_2] [function_1]	count=1
module	total sum of ||| contrib factorization python ops	count=1
module	tensors linked to ops ||| contrib	count=1
arg	initialize the parameters for ||| use_peepholes cell_clip	count=1
function	values ||| values for	count=1
function	1-hot encodings for planes ||| hot planes	count=1
function	integer ||| integer weighted sparse	count=1
function	step true positives for ||| sparse true positive at k	count=1
function	[function_1] by the ||| [function_1] [function_2]	count=3
module	the hue [module] an rgb ||| [module]	count=1
module	evaluating a ||| tensor_forest	count=1
arg	dimensions ||| dims	count=1
class	according to partition graphs ||| dump dir	count=1
function_arg	asserts [arg_2] ||| [function_1] valid dtypes [arg_2]	count=2
function	with training ||| train	count=1
function	returns ||| check	count=1
function	loss for multi value ||| multi value loss	count=2
function	is a non-negative int32 ||| assert non negative int32	count=1
class	decodes ||| data decoder	count=1
module	returns a shape representing ||| python	count=1
module	used to ||| contrib layers python layers	count=2
module	an event to the ||| python	count=1
function_arg	[function_1] example protos ||| [function_1] [arg_2]	count=9
function	mean relative [function_2] ||| [function_1] [function_2]	count=2
arg	a diagonal matrix ||| diag event_ndims	count=1
class	mappers provided ||| linear classifier test	count=1
arg	a sequence of symbols ||| ids vocab_size embed_dim unique	count=1
function	feature [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] batch of ||| [function_2] [function_1]	count=12
function	average ||| avg	count=3
function	scope from a ||| scope	count=1
arg	loc and [arg_2] ||| [arg_2] [arg_1]	count=2
class	staging ||| staging	count=7
function_arg	sigmoid [arg_2] ||| [arg_2] [function_1]	count=1
arg	condition cond is true ||| cond	count=1
function	an rnn specified by ||| rnn	count=1
module	as self _value ||| bayesflow python	count=1
module	a given factorization ||| contrib factorization python	count=1
function	from a dict ||| dict	count=1
class	reopens ||| file writer	count=1
function	when all columns are ||| all columns	count=1
module	of a tf ||| factorization python ops	count=1
function	[function_1] debug ||| [function_1] [function_2]	count=6
function	the state of the ||| state	count=1
function	recipient of the given ||| recipients	count=1
function	reshape batch vector x ||| vector	count=1
function	rfft ||| fft length for rfft	count=1
module	rnn cell ||| contrib rnn	count=1
function_arg	[function_1] itself ||| [arg_2] [function_1]	count=1
module	graph ||| python framework	count=5
module	core implementaton of ||| python	count=1
module	combines [module] ||| [module]	count=1
module_class	[module_1] entire ||| [module_1] operator [class_2]	count=1
module_class	of d [class_2] ||| [module_1] operator [class_2]	count=1
function_arg	[function_1] gradients to ||| [function_1] [arg_2]	count=6
function	for the page ||| page	count=1
class	these student's [class_2] ||| [class_1] [class_2]	count=3
function	shape ||| assert valid	count=1
function_arg	[function_1] of many ||| [function_1] [arg_2]	count=1
arg	a tf graph and ||| graph	count=1
arg	a tf learn dataframe ||| cls pandas_dataframe num_threads enqueue_size	count=1
function	[function_1] all variables ||| [function_1] [function_2]	count=2
function	a docstring ||| docstring	count=1
function	tensor ||| maybe assert valid	count=1
function	[function_1] from ||| [function_1] [function_2] map node_map	count=2
module	monitored ||| python training	count=1
module	of a given factorization ||| contrib factorization python ops	count=1
class	writer ||| writer	count=1
module	eval ||| contrib learn python learn	count=1
function	the ||| build guide	count=1
function	predict method [function_2] ||| [function_1] [function_2]	count=5
function_arg	function for [arg_2] ||| [arg_2] [function_1]	count=2
function	subscribed identities ||| expect subscribed identities	count=1
module	returns a ||| learn python learn dataframe	count=1
module	for ||| debug cli	count=2
function	a ||| sequences	count=1
function	boots 3 servers ||| cluster spec propagation three servers	count=1
function	start line ||| start	count=1
class	learn a vocabulary dictionary ||| vocabulary	count=1
function	added to ||| to	count=1
module	indexies of ||| contrib	count=1
module	name of ||| python framework	count=1
function	the shape of ||| op output shape	count=1
arg	for f ||| f	count=1
arg	equivalent sub-graph ||| original_node	count=5
module	of a call ||| ops	count=1
function	[function_1] in ||| [function_2] [function_1]	count=10
class	[class_1] the debug ||| [class_2] [class_1]	count=1
class	labels ||| multi class head	count=1
function	to ||| get string to hash bucket fn	count=1
arg	session ||| session step	count=1
function_arg	that is [arg_2] ||| [function_1] [arg_2]	count=2
arg	tests whether two ||| a	count=1
class	a ||| strategy	count=1
function	size which is ||| size	count=1
function	image data format convention ||| image data format	count=1
module	learn the vocabulary ||| learn python	count=1
function	the real part and ||| real	count=1
function_arg	[function_1] [arg_2] length ||| [function_1] [arg_2]	count=1
function	[function_1] flow context ||| [function_2] [function_1]	count=4
function	gradient ||| softmax cross entropy with logits grad	count=1
arg	assigning ||| validate_shape	count=1
function	[function_1] indexedslices objects ||| [function_2] [function_1]	count=5
function	with partitioned [function_2] ||| [function_1] [function_2]	count=4
function_arg	[function_1] given logits ||| [function_1] _sentinel labels [arg_2]	count=2
arg	for the input samples ||| verbose	count=3
function	scope to a ||| name scope	count=1
class	creates ||| event logger thread	count=1
function_arg	[function_1] side_effects for ||| [arg_2] [function_1]	count=1
class	tests ||| linear regressor test	count=8
class	the file [class_2] ||| [class_2] [class_1]	count=1
arg	checkpoint in checkpoint_dir ||| checkpoint_dir master scaffold eval_ops	count=1
function	[function_1] two ||| [function_1] [function_2]	count=1
module	ensure that graph building ||| tensor_forest hybrid python	count=1
class	audio ||| audio	count=1
function	a single [function_2] ||| [function_2] [function_1]	count=10
function	[function_1] a matrix ||| [function_1] [function_2]	count=7
arg	in a session ||| session	count=1
function	creates a new ||| init	count=10
module	a 1 outcome (vs ||| ops	count=1
function	from a pandas ||| from pandas	count=2
function	[function_1] scope ||| [function_1] [function_2]	count=10
module	variables to represent the ||| contrib factorization examples	count=1
function	[function_1] single batch ||| [function_2] [function_1]	count=4
module	of a complex number ||| ops	count=2
class	in a real graph ||| quantize graph	count=1
module_class	[module_1] area ||| [module_1] [class_2]	count=1
function	create the ||| create control	count=1
class	for an +rnn cell ||| intersection rnncell	count=1
module	updates internal vocabulary based ||| contrib keras python keras preprocessing	count=1
function	the diagonal of ||| diag	count=1
module	or list of ||| ops	count=1
class	eventaccumulator after adding ||| mocking	count=1
function	the outputs ||| outputs make unique	count=2
class	determines whether this plugin ||| plugin	count=2
arg	debug-dumped ||| node_name output_slot debug_op	count=1
class	test ||| fractional avg test	count=2
module	batch version of ||| contrib distributions python	count=1
function	obtain all input alternatives ||| input alternatives	count=1
function	available element ||| merge	count=1
function	[function_1] output ||| [function_1] [function_2] shape input_shape	count=1
arg	with the given message ||| message	count=1
module	gets the list of ||| python ops losses	count=1
class	operation ||| gmm algorithm	count=1
class	cell ||| rnncell	count=1
function	variables that end ||| variables	count=1
arg	[arg_1] a audio ||| [arg_1] [arg_2]	count=1
function	no errors are raised ||| predict output constructor	count=1
function_arg	a sequence [arg_2] ||| [function_1] [arg_2]	count=2
module_class	[module_1] underlying accumulator ||| [module_1] [class_2]	count=3
arg	y ||| y	count=16
function	statistics ||| stats for node def	count=2
module	are ||| python ops	count=1
function	operators ||| operators	count=1
function_arg	true if v ||| is variable v	count=1
function_arg	loads [arg_2] ||| [arg_2] [function_1]	count=1
function	loads an image into ||| load	count=1
class	return ||| categorical	count=1
module	returns ||| python layers	count=6
arg	weights [arg_2] ||| [arg_1] biases [arg_2]	count=2
module	vocabulary dictionary and ||| contrib learn	count=1
arg	predictions for linear weights ||| columns_to_tensors embedding_lookup_arguments num_outputs	count=1
function	the provided fixed ||| fixed unigram	count=1
function	placeholder for ||| placeholder from dtype and shape	count=1
module	coordinate ||| ops distributions	count=1
class	of a pooling ||| pooling	count=1
function	an attribute ||| get attribute	count=1
function	and names ||| and	count=1
function	then return ||| assert	count=1
class	construct multivariate [class_2] ||| [class_1] [class_2]	count=8
function	a ||| caption to item	count=1
arg	compute/validate ||| input_shape default_size min_size data_format	count=1
function	sessionlog start message discards ||| session log start message discards	count=1
function	a richtextlines object ||| lines from rich line	count=1
function	number of ||| size	count=11
function	[function_1] [function_2] ||| [function_2] embedding lookup [function_1]	count=6
class	the op [class_2] ||| [class_2] [class_1]	count=1
function	[function_1] normalization on ||| [function_1] [function_2]	count=1
module	dataset from ||| python learn datasets	count=2
class	return ||| categorical processor	count=2
function	was computed ||| computed	count=1
module	binary ||| contrib metrics python ops	count=2
function	reshaping behavior of ||| real valued column reshaping	count=1
function	[function_1] [function_2] ||| [function_1] feed [function_2]	count=8
arg	w conjugate prior ||| prior scale s	count=1
function	[function_1] external_values from ||| [function_2] [function_1]	count=2
module_class	[module_1] [class_2] ||| [module_1] text [class_2]	count=1
function	pack a list ||| pack	count=1
function	recurrent ||| rnn	count=1
function	a device function ||| replica device	count=1
arg	the input ||| inputs rate	count=1
class	perform ||| max pool test	count=2
function	log the in ||| log op gradients	count=1
function_arg	[function_1] [arg_2] in ||| [function_1] [arg_2]	count=8
function	the proto_type for ||| collection proto type	count=1
function	all the tensors ||| filter ts from regex	count=1
module	numpy ||| keras preprocessing	count=1
module	given directory ||| learn utils	count=1
module	to ops that match ||| contrib graph_editor	count=1
function	rank rfft ||| fft length for rfft	count=1
function	queue batch ||| batch examples shared queue	count=1
function	variables and names that ||| and	count=1
function	to i ||| to	count=2
module	to a ||| ops	count=1
function	a new subdirectory within ||| get timestamped export	count=2
arg	the second-order gradients of ||| input_sizes output_sizes window_rows	count=1
class	documents ||| vocabulary processor	count=1
function	of basic metrics ||| binary metrics	count=1
module	the inputs and outputs ||| graph_editor	count=1
module	cell output dimension ||| rnn	count=1
function_arg	compile the [arg_2] ||| [function_1] scope op [arg_2]	count=2
arg	on inputs starting from ||| inputs initial_cell_state initial_output dtype	count=2
function	by tag ||| tag order	count=2
arg	node invoking a registered ||| op_type_name name	count=1
module	estimate of an ||| python ops	count=1
class	a graph into full ||| graph	count=1
function	its namesake ||| copied op	count=1
arg	[arg] tensor_forest ||| [arg]	count=3
function	ramp rgb ||| ramp	count=1
function	resnet_v1() for arg and ||| v1	count=3
module_class	[module_1] conditional ||| [module_1] [class_2]	count=2
function	a slot for ||| slot	count=1
function	with a mix of ||| mixed	count=2
arg	structure [arg_2] ||| [arg_2] [arg_1]	count=2
function	the same embedding ||| embedding	count=1
function	the boundary ||| boundary ts	count=1
function	contains non-zero information ||| bool	count=1
function	a state ||| state	count=2
function	false positives for ||| false positive at	count=2
function	to be ||| prepare or	count=1
function	a graph containing ||| graph	count=1
function	[function_1] and timestamps ||| [function_2] [function_1]	count=1
module	of d in ||| contrib distributions python ops	count=1
function_arg	[function_1] [arg_2] ||| [function_1] dependency [arg_2]	count=4
function	performs dropout given ||| recurrent dropout	count=1
function_arg	lookup table [arg_2] ||| [function_1] tensor [arg_2]	count=2
class	create ops to ||| builder	count=1
function	[function_1] dimension ||| [function_2] [function_1]	count=10
function	auc via a ||| streaming auc	count=1
function	the tensors ||| regex	count=1
function	to sparse ||| sparse recall at top	count=1
function	fixed [function_2] ||| [function_2] [function_1]	count=1
function	tensor into a placeholder ||| placeholder	count=1
function	an input_fn for ||| input fn	count=1
function_arg	[function_1] _docinfo objects ||| [function_1] index [arg_2]	count=3
function	[function_1] forward ||| [function_2] [function_1]	count=4
arg	with shuffling ||| capacity	count=1
function	returns shape for input ||| get in out shape	count=1
function	calculates true positives for ||| sparse true positive	count=1
function	2 images ||| images	count=1
function_arg	[function_1] subgraph ||| [arg_2] [function_1]	count=2
function	if the provided head [function_1] [function_2] ||| [function_1] [function_2]	count=1
class	shape ||| shape	count=5
function	generic signature ||| generic signature	count=1
module	the ||| contrib learn	count=1
function	for multi [function_2] ||| [function_2] [function_1]	count=4
arg	list of tensors ||| tensors session feed_dict fetches	count=1
function	slot for a variable ||| slot	count=1
module	produced or none ||| python framework	count=1
function	a hook to ||| session run hook	count=1
arg	the second-order gradients of ||| output_sizes window_rows	count=1
function	restore variables from ||| sharded restore	count=1
class	values ||| indexed slices	count=1
function	for full batch ||| full batch training	count=2
function	[function_1] python ||| [function_2] [function_1]	count=2
arg	creates a tensor with ||| tensor	count=1
module	a batch of ||| python ops	count=5
arg	start a looperthread that ||| timer_interval_secs target args kwargs	count=1
function	to recursively apply a ||| recursive apply	count=1
function	local variables ||| get local variables	count=2
function	true iff the jacobian ||| is constant jacobian	count=1
function	specific plugin asset from ||| plugin asset	count=1
arg	creates batches ||| batch_size num_threads capacity	count=1
function	scale matrix ||| scale	count=3
class	vocabulary dictionary of ||| vocabulary	count=1
function	the [0 n_classes) range ||| at k5 some out of range	count=2
module	dimensional version of ||| learn python learn ops	count=1
module	and ||| contrib learn python learn	count=7
function_arg	[function_1] [arg_2] through ||| contrib bayesflow examples reinforce_simple [function_1] merge [arg_2]	count=1
function	page ||| build module page	count=1
function	vector with ||| vector	count=3
function	infer the dtype ||| infer state dtype	count=1
module	create ||| python feature_column	count=2
function	the contrast ||| contrast	count=1
function	of dtypes for ||| dtypes	count=2
function	inputs ||| inputs non recursive no control	count=1
function	batches ||| batch	count=1
arg	that maps ||| default_value name	count=1
function	real [function_2] ||| [function_2] [function_1]	count=21
function	symbol name -> ||| build guide index	count=1
module	ctc ||| contrib keras python keras	count=1
module	output ||| keras engine	count=1
function	[function_1] bprop ||| [function_2] [function_1]	count=1
arg	[arg_1] dimension to ||| [arg_2] [arg_1]	count=1
function	state for ||| control flow state	count=1
module	of layers ||| layers python layers	count=1
function	gradients for a switch ||| switch grad	count=1
function	docstring [function_2] ||| [function_2] function [function_1]	count=1
arg	an exit op ||| op grad	count=1
module	of beams ||| python ops	count=1
function	for ||| grad	count=1
arg	sequence of symbols ||| ids vocab_size embed_dim sparse_lookup	count=1
module	all the tensors ||| contrib graph_editor	count=1
function_arg	binary operation [arg_2] ||| [function_1] [arg_2]	count=1
function	d v^h, [function] ||| [function]	count=1
function	[function_1] variation of ||| [function_2] [function_1]	count=2
module	1 ||| ops distributions	count=2
function	sprite ||| make sprite	count=1
function_arg	[function_1] from ||| [arg_2] [function_1]	count=5
function	direct python implementation of ||| direct	count=1
function	the fetches [function_2] ||| [function_2] [function_1]	count=3
function	ops [function_2] ||| [function_2] eval metric [function_1]	count=1
module	from a ||| python learn	count=1
module	desired shape of ||| python ops	count=1
function	int32 ||| int32	count=1
module	a batch of ||| distributions python ops	count=1
module	together ||| contrib batching	count=1
function_arg	[function_1] in given ||| [arg_2] [function_1]	count=5
module	create ||| python slim nets	count=2
function	collection with ||| collection ref	count=1
module	from the main docstring ||| tools docs	count=1
arg	config (output of get_config()) ||| cls config custom_objects	count=1
function	to merge ||| merge	count=1
arg	corresponding to token ||| token	count=1
function_arg	writes to [arg_2] ||| [arg_2] [function_1]	count=1
function	image ||| image	count=5
arg	body ||| body original_loop_vars	count=1
function	the max pool ops ||| max pool shapes	count=1
function_arg	[function_1] in tensor_list ||| [function_1] [arg_2]	count=1
module	return ||| docs	count=1
function	true if clusters centers ||| clusters	count=1
function	last snapshot ||| value	count=1
arg	a sparsetensor into ||| sp_input default_value validate_indices name	count=1
module	transform ||| dataframe transforms	count=1
function	integer ||| integer weighted sparse column succeeds for	count=1
function	num_rows, possibly add asserts ||| num rows possibly add asserts	count=1
function_arg	with var ||| with var	count=1
function	variance of a ||| var	count=1
module	get a menuitem ||| cli	count=1
function_arg	product [arg_2] ||| [arg_2] [function_1]	count=3
function	[function_1] the state ||| [function_2] [function_1]	count=5
class	page ||| class page	count=1
function	of the data/logdir endpoint ||| logdir	count=1
function	from the ||| build	count=1
function	[function_1] asserts ||| [function_2] [function_1]	count=10
function	integer weights ||| integer	count=1
function	function for ||| function	count=4
arg	selects row and col ||| project_row projection_weights	count=1
arg	using featurecolumns ||| feature_columns exports_to_keep	count=1
class	an event ||| to event transformer	count=1
function	placeholder tensor ||| placeholder	count=1
function	looks up [function_2] ||| [function_2] [function_1]	count=12
class	state ||| state	count=1
arg	or list of tensors ||| tensors session feed_dict fetches	count=1
function	real part and set ||| real	count=1
function	initialized from ||| from	count=1
module	if this ||| framework	count=1
arg	a cell ||| cell	count=1
function_arg	[function_1] an estimator ||| [function_1] [arg_2]	count=5
module	see ||| contrib slim python slim	count=2
function	override ||| override	count=2
module	normally distributed floating point ||| contrib specs python	count=1
class	the opdefs from ||| op def library	count=1
function	self with ||| with	count=1
function	summary of the ||| summary	count=1
function	[function_1] rotation ||| [function_1] [function_2]	count=2
function	wrapper for ||| wrapper	count=1
module	computation of ||| contrib distributions python ops	count=1
function	of evaluation [function_2] ||| [function_2] [function_1]	count=3
function	the coordinator to stop ||| stop	count=1
arg	along dimension dim ||| x dim	count=1
function	no effect for ||| no	count=1
function	list of tensor ||| to tensor	count=3
function	sampling [function_2] ||| [function_1] [function_2]	count=1
class	algorithm implementation ||| optimizer	count=1
module	and scores ||| contrib learn python learn	count=1
function	[function_1] benchmark ||| [function_2] [function_1]	count=1
function	reshape ||| maybe reshape	count=1
function	all inputs of ||| inputs tensor info from	count=1
function	shape values ||| maybe assert valid	count=1
function	before processing ||| on batch begin	count=1
arg	the given ids and ||| sp_ids sp_weights partition_strategy	count=1
function_arg	device name [arg_2] ||| [arg_2] [function_1]	count=1
function	represented ||| eval	count=1
function	the partition ||| dump with	count=1
function_arg	load boston [arg_2] ||| [arg_2] [function_1]	count=1
arg	maps a ||| default_value	count=1
module	a rnn ||| rnn	count=1
module	estimate of the ||| python ops	count=1
function_arg	sparse gradients ||| sparse grad	count=2
function	graph that ||| graph	count=1
class	for debug tensor watching ||| base debug	count=1
class	of ||| relaxed	count=1
function	this ||| base	count=2
function	[function_1] debug ops ||| [function_2] [function_1]	count=6
module	model ||| cudnn_rnn python ops	count=1
function	generate a full ||| full path	count=1
function_arg	[function_1] op1 and ||| [function_1] allowing override [arg_2]	count=1
module	raised when the ||| python	count=1
function	file without a ||| without	count=1
function	column ||| weighted sparse column	count=1
function	returns all variables that ||| variables	count=1
class	returns a ||| lazy builder	count=1
function	the mean relative error ||| mean relative error	count=2
function	extract ||| extract	count=4
module	instantiates a keras ||| keras	count=1
function_arg	value of [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	[function_1] many ||| [arg_2] [function_1]	count=1
function	for an input ||| input	count=1
class	erosion function ||| erosion	count=1
function	second test ||| test	count=1
arg	the recall@k ||| k weights	count=1
function	with zero gradient ||| stop gradient	count=2
module	re-route ||| contrib graph_editor	count=1
function	the weights of the ||| weights	count=1
function	get all the tensors ||| regex	count=1
class	based on either its ||| container	count=1
module	a sequence of ||| python ops	count=2
module	the sum ||| framework	count=1
arg	value ||| value dtype	count=1
function	names for each ||| names	count=1
function	the inputs ||| inputs	count=3
arg	yields batches ||| num_batches graph session start_queues	count=1
class	creator ||| creator	count=2
module	flip ||| contrib distributions python ops	count=4
function_arg	[function_1] with validation ||| [function_1] tensor [arg_2]	count=1
function_arg	slice of [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	a matmul op ||| matmul shape op	count=1
class	single ||| summary to event	count=1
function	field ||| field	count=1
function	a deconv layer ||| deconv	count=1
arg	session for ||| session	count=1
function	get legend ||| legend	count=1
arg	a tf learn dataframe ||| pandas_dataframe num_threads enqueue_size	count=1
function	bypass ||| bypass	count=1
function	[function_1] the default ||| [function_1] [function_2]	count=5
class	array ||| board wsgiapp	count=2
function_arg	[function_1] two ||| [function_1] [arg_2]	count=1
module	the axis_order ||| labeled_tensor python ops	count=1
function	[function_1] asset ||| [function_2] [function_1]	count=4
class	labels ||| node stepper	count=1
function	from a resource variable ||| resource	count=1
module	rnn ||| learn ops	count=1
arg	linear weights in a ||| columns_to_tensors embedding_lookup_arguments num_outputs	count=1
function	for given example ||| from example	count=1
function	mode in ||| mode	count=1
arg	event ||| event	count=2
function	non-reference dtype based ||| base	count=1
function	asset tensors if defined ||| get asset tensors	count=1
function	[function_1] dense inputs ||| [function_2] [function_1]	count=1
function	other subclassses [function_2] ||| [function_2] [function_1]	count=1
function	scalar value ||| scalar	count=1
arg	parameters for ||| use_peepholes share_time_frequency_weights cell_clip	count=1
function_arg	given task [arg_2] ||| [arg_2] [function_1]	count=1
function	of records ||| records	count=1
function	[function_1] attribute ||| [function_1] line [function_2]	count=5
function	[function_1] binary ||| [function_2] [function_1]	count=1
function	_guideref from ||| index	count=1
function	ops that match the ||| regex	count=1
function	a deepcopy [function_2] ||| [function_2] column [function_1]	count=1
function	dynamic rnn ||| rnn	count=1
function	[function_1] base directory ||| [function_1] [function_2]	count=2
function_arg	[function_1] architecture ||| [arg_2] [function_1]	count=4
module	a menuitem from the ||| python debug	count=1
function	returns the proto_type for ||| get collection proto	count=1
module	sequence ||| keras preprocessing	count=2
function	python traceback of ||| traceback	count=1
function	logistic regression ||| logistic regression	count=1
function	unbatch are differentiable ||| unbatch grad	count=1
function	placeholders from ||| placeholders from	count=2
function	the original [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] [function_2] symbol ||| [function_2] [function_1]	count=9
arg	split dims values ||| dims	count=1
function	every temporal slice y ||| time distributed	count=1
function	[function_1] hooks ||| [function_1] [function_2]	count=2
arg	threshold ||| threshold weights metrics_collections	count=1
arg	tensors into a ||| tensors	count=1
function	get a menuitem ||| caption to	count=1
function	sets the parameters of ||| set params	count=1
module	for labeled tensors ||| labeled_tensor python	count=2
function	[function_1] or indexedslices ||| [function_1] [function_2]	count=4
module	the sense of ||| linalg python	count=5
function_arg	[function_1] results accounting ||| [arg_2] [function_1]	count=2
function	[function_1] estimator with ||| [function_1] [function_2]	count=2
function	compute number ||| size	count=1
module	this is a ||| framework	count=2
function	classification ||| classification training loss	count=1
module	of tensor or ||| contrib layers python ops	count=1
function_arg	dense gradients ||| dense grad	count=2
function	return a postfix representation ||| tf spec structure	count=1
function_arg	shallow dict [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] or max ||| [function_1] [function_2]	count=1
function	with hashed [function_2] ||| [function_1] [function_2]	count=2
module	model ||| learn python learn estimators	count=1
function	image by [function] ||| [function]	count=2
arg	interpolates keyword arguments into ||| args kw kw_overrides	count=1
function	[function_1] [function_2] ||| [function_2] to [function_1]	count=2
arg	output according to ||| is_control	count=1
module	for ||| python feature_column	count=2
arg	based on [arg_2] ||| [arg_2] [arg_1]	count=2
function	loop over ||| loop	count=2
class	should have similar behavior ||| operator pdderived class test	count=1
function	it into html ||| array to html	count=1
function	embeddings of [function_2] ||| [function_1] lookup [function_2]	count=2
module	session and runs a ||| learn python learn dataframe	count=1
function	a restricted linear ||| joint weighted sum from feature columns	count=1
function	ops that match ||| ts from	count=1
module_class	[module_1] for ||| [module_1] [class_2]	count=2
function	for variable-length numeric ||| var len	count=1
function_arg	use [arg_2] ||| [arg_2] [function_1]	count=1
arg	satisfies ||| static_condition dynamic_condition	count=1
arg	tensor [arg_2] ||| [arg_1] [arg_2]	count=1
function	when error ||| error	count=1
module	image ||| python keras preprocessing	count=1
module	a dataframe with only ||| python learn dataframe	count=1
function	extend ||| extend	count=1
function	true if the provided [function_1] [function_2] ||| [function_1] [function_2]	count=1
module	inserted/accessed ||| backend	count=1
function	returns the [function_2] ||| [function_1] source [function_2]	count=1
function	accumulated ||| accumulated	count=1
function	_get_dense_tensor() [function_2] ||| [function_2] [function_1]	count=3
function	dropout ||| dropout	count=2
function	gets a list of ||| get	count=1
function	for serving ||| serving input	count=1
function	traceback of ||| node traceback	count=1
module	table ||| python feature_column	count=2
function_arg	restore [arg_2] ||| [function_1] [arg_2]	count=1
function	the example [function_2] ||| [function_2] [function_1]	count=3
function_arg	[function_1] x ||| [function_1] integer form [arg_2]	count=1
arg	a custom_getter ||| custom_getter	count=1
function	vocabulary dictionary ||| transform	count=1
function	sessionrunhook ||| check	count=1
function	the mode ||| mode	count=1
arg	recall@k and precision@k ||| labels predictions_idx class_id	count=1
function	[function_1] value ||| [function_1] [function_2]	count=11
module	and ||| python ops	count=2
module	transforms each ||| contrib keras python keras preprocessing	count=1
function	should trigger for ||| should trigger for	count=3
function	nearest neighbor ||| nearest neighbor grad	count=2
module	number ||| losses python losses	count=1
function_arg	[function_1] on mapping ||| [function_1] tensor [arg_2]	count=2
function	to the main ||| main	count=1
function	of compressed [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] interval ||| [function_1] [function_2]	count=1
module	models that use ||| learn python learn estimators	count=1
arg	of entries contained within ||| dirname	count=1
function	[function_1] tensors ||| [function_2] [function_1]	count=12
module	to make ||| tools	count=1
function_arg	[function_1] from predictions ||| [function_1] labels [arg_2]	count=4
function	of the given variable ||| load variable	count=1
function	sprite [function_2] ||| [function_2] [function_1]	count=2
function	all columns are ||| all columns	count=1
function_arg	gradient [arg_2] ||| [arg_2] [function_1]	count=2
function	this ||| before	count=2
arg	and col [arg_2] ||| [arg_2] [arg_1]	count=2
function	false positives for ||| false positive at k	count=2
arg	tfdecorator-aware replacement for inspect ||| object	count=9
function	generates ||| generate	count=1
function_arg	by input [arg_2] ||| [arg_2] [function_1]	count=1
module	that match the ||| graph_editor	count=1
module	and session and runs ||| python learn dataframe	count=1
module	of a 1 ||| contrib distributions python ops	count=3
function	[function_1] a conv ||| [function_2] [function_1]	count=4
function	for overriding gradient functions ||| gradient override	count=1
function	hooks can ||| hook	count=1
function	-> _guideref from the ||| guide index	count=1
function	tuple with ||| tuple	count=1
class	transforms each text ||| tokenizer	count=1
function	random ||| random	count=10
function	binary classification ||| binary	count=2
module	tfprof ||| tools tfprof	count=1
arg	to the original ||| original	count=1
function	computes log [function_2] ||| [function_2] [function_1]	count=1
function	or op [function] partially ||| map structure up [function]	count=1
function	html ||| html	count=1
module	see ||| slim	count=2
function	sensitivity ||| sensitivity	count=1
module	parameter p is ||| contrib distributions python	count=1
arg	parameter rate ||| rate validate_args	count=1
arg	stochastically creates batches by ||| tensors accept_prob_fn batch_size queue_threads	count=1
arg	compute 1-hot encodings for ||| labels num_classes scope	count=1
arg	get all ||| ops	count=1
function_arg	fakequantwithminmaxvarsperchannel [arg_2] ||| [function_1] gradient [arg_2]	count=1
function	nodes that aren't ||| nodes	count=1
function	both dense and ||| test dense and	count=1
function	fetch ||| for fetch	count=1
module	component ||| contrib learn python learn estimators	count=2
function	as a list ||| as tensor list	count=3
function	a strided [function_2] ||| [function_2] [function_1]	count=1
function	compressed [function_2] ||| [function_2] [function_1]	count=3
function	root [function_2] ||| [function_2] [function_1]	count=11
arg	runoptions [arg_2] ||| [arg_1] [arg_2]	count=1
module	of 1 ||| contrib	count=1
function	run a softmax ||| softmax	count=1
function	current device function stack ||| apply device functions	count=1
arg	a tensor [arg_2] ||| [arg_2] [arg_1]	count=12
function	train ||| train	count=3
arg	given key ||| key	count=2
function_arg	[function_1] [arg_2] given input length ||| keras python keras utils [function_1] length input_length filter_size [arg_2]	count=1
class	create ||| dump dir	count=1
arg	for storing the ||| save_dir	count=1
function	with integer ||| with integer weighted sparse column succeeds for	count=1
function_arg	from [arg_2] ||| tools docs reference resolver [function_1] [arg_2] doc_index	count=1
function_arg	tensors [arg_2] ||| [function_1] inputs tensor [arg_2]	count=3
module	vocabulary ||| contrib learn	count=1
arg	[arg_1] top-k ||| [arg_2] [arg_1]	count=4
class	don't ||| test upgrade files	count=2
function	of a bucketized column ||| bucketized column	count=1
arg	[arg_1] with projected ||| c_prev [arg_1] [arg_2]	count=2
function	clips the [function_2] ||| [function_1] [function_2]	count=5
function	step false [function_2] ||| [function_2] [function_1]	count=2
arg	to the actual ||| actual	count=1
function	a ||| to sequences	count=1
function	computes the recall ||| streaming recall	count=1
function_arg	[function_1] hdf5 file ||| [arg_2] [function_1]	count=1
arg	highwaywrapper [arg_2] ||| [arg_2] [arg_1]	count=2
module	debug ||| python debug	count=2
class	return ||| multinomial	count=1
function	on variable-updating ops with ||| test	count=1
function_arg	[function_1] graph ||| [arg_2] [function_1]	count=1
function	converts [function_2] ||| [function_2] [function_1]	count=2
function	the lists ||| lists	count=1
module	of unique items ||| labeled_tensor python ops	count=1
function	generate an array ||| generate array	count=2
function	[function_1] a page ||| [function_1] nonexistent [function_2]	count=1
function	inputs of two ||| sgv inputs	count=1
function	request [function_2] ||| [function_1] [function_2]	count=1
function_arg	[function_1] storing ||| [function_1] [arg_2]	count=3
module	returns a ||| learn dataframe	count=1
function	to ||| to clusters	count=2
class	test ||| rnn cell test	count=1
function	that labels ||| three labels	count=3
arg	learn ||| x	count=1
arg	sgv0 to the inputs ||| sgv0	count=1
function	[function_1] sum of ||| [function_1] [function_2]	count=6
module	image s ||| contrib image python ops	count=1
arg	op ||| op func	count=1
function	tensors linked to ||| filter	count=1
function	graphs ||| with graphs	count=1
function_arg	checks if [arg_2] ||| [arg_2] [function_1]	count=1
arg	nodes for input_node ||| input_node	count=1
function	shallow dict ||| dict	count=1
function_arg	dict to [arg_2] ||| [arg_2] [function_1]	count=1
function	for dnn-linear combined model ||| dnnlinear combined bug	count=1
arg	"passthrough" ||| inside_ops passthrough_ts	count=1
function	the state for all ||| flow state	count=1
function_arg	product of [arg_2] ||| [arg_2] [function_1]	count=3
class	head for [class_2] ||| [class_2] [class_1]	count=1
function_arg	[function_1] a state-saving ||| [arg_2] [function_1]	count=5
arg	front-end ||| limit_attr_size large_attrs_key	count=1
class	the depthwise ||| depthwise	count=1
module	each text ||| contrib keras python	count=1
class	tensor value was dumped ||| tensor datum	count=2
module	tensor ||| python feature_column	count=2
function	by dispatching it to ||| dispatch	count=1
function_arg	collects [arg_2] ||| [arg_2] [function_1]	count=1
function	richtextlines ||| text lines from	count=1
module	of two ||| ops	count=1
function	for [function_2] ||| [function_2] [function_1]	count=22
function	works with missing ||| with missing feature	count=1
function_arg	new checkpoint [arg_2] ||| [arg_2] [function_1]	count=3
arg	specified min and ||| clip_value_min clip_value_max name	count=1
function	kernel ||| kernel	count=4
module	tied ||| python ops	count=1
module	returns a ||| python	count=3
arg	new ||| name shape collections validate_shape	count=1
function	for input to ||| prepare inputs for	count=2
module	for labeled tensors ||| labeled_tensor python ops	count=2
function	linear_model_fn but returns modelfnops ||| linear model fn with model fn	count=2
arg	transformations to labels tensor ||| mode labels	count=4
function	gets a list ||| get	count=1
function	single epoch ||| one epoch	count=1
arg	the model over a ||| y sample_weight	count=1
function	the variable ||| variable	count=2
function	if it is inside ||| op if inside	count=1
module	in this ||| ops	count=1
arg	by pred ||| pred name	count=1
module	as self _value ||| contrib bayesflow python ops	count=1
function	register all the ops ||| register	count=1
function	loads the ||| load data	count=2
function	[function_1] distribution ||| [function_2] [function_1]	count=2
function	add matrix ||| add	count=2
function	[function_1] cluster ||| [function_1] [function_2]	count=1
arg	[arg_1] cluster ||| [arg_2] [arg_1]	count=1
class	close the queue in ||| queue	count=1
arg	housing ||| data_path	count=1
function	sets the graph-level ||| set	count=1
function_arg	[function_1] [arg_2] ||| [function_1] x axis [arg_2]	count=5
function	the save ||| save	count=1
function	the walsfactorization ||| wals factorization	count=1
arg	factor out the code ||| selector_op	count=1
arg	op was marked as ||| op func	count=1
arg	if ||| meta_graph_def_to_load	count=1
function	hooks can be merged ||| hook	count=1
arg	perform ||| headers	count=1
arg	if obj ||| obj	count=1
function_arg	[function_1] on hasher_spec ||| [arg_2] [function_1]	count=2
function	discards expired [function_2] ||| [function_2] [function_1]	count=1
function	the list of unique ||| unique fetches	count=1
function	sigmoid cross entropy given ||| sigmoid cross entropy with	count=1
module	scan ||| python ops	count=1
class	on either its ||| container	count=1
function	[function_1] python ||| tools docs parser config [function_2] name [function_1] full_name	count=2
arg	given job ||| job_name	count=3
function_arg	[function_1] [arg_2] ||| [function_1] image [arg_2]	count=1
module_class	[module_1] a conditional ||| [module_1] [class_2]	count=2
module_class	of nas ||| python ops nascell	count=1
module	verifies file_io directory handling ||| tools gcs_test python	count=1
function_arg	to enqueue [arg_2] ||| [function_1] [arg_2]	count=1
function	variance for numpy ||| var	count=1
module	retrieves the ||| contrib keras python keras	count=1
module	as ||| python learn estimators	count=20
function	manager for maybe ||| maybe	count=1
function	the files ||| guide index	count=1
function	and validates bias weight ||| bias only	count=1
function	additional logistic [function_2] ||| [function_1] [function_2]	count=1
function	verify compression for large ||| read large	count=1
module	tensorshape representing ||| framework	count=1
function	error if ||| error	count=1
function	[function_1] spatial shear ||| [function_1] [function_2]	count=2
function	plain ||| plain	count=1
arg	for-test subclass ||| command_args_sequence sess dump_root	count=1
function	collection names ||| collection names	count=2
class	matrix ||| operator	count=1
function	[function_1] [function_2] ||| [function_2] values [function_1]	count=28
arg	body to the graph ||| body loop_vars shape_invariants	count=1
function	before each [function_2] ||| [function_2] [function_1]	count=1
function	that use metricspec ||| with metric spec	count=1
function	list of tensor or ||| n to tensor or	count=1
class	or tensor in ||| tensor	count=1
function	for full [function_2] ||| [function_2] [function_1]	count=1
arg	[arg_1] audio by ||| [arg_1] [arg_2]	count=1
function	unused nodes [function_2] ||| [function_1] [function_2]	count=4
module	inception ||| python keras applications	count=1
arg	[arg_1] a target ||| [arg_2] [arg_1]	count=1
function	a unary ||| unary	count=1
class	total number of buckets ||| crossed column	count=1
class	bucket ||| bucket	count=1
function	diagonal of ||| diag update	count=1
module	a list of ||| python ops	count=14
function	has no collisions ||| hashed output v2 has no collision	count=1
function_arg	[function_1] [arg_2] ||| [function_1] weights [arg_2]	count=3
function	and attention and a ||| attention	count=1
function	with sdcaoptimizer and a ||| sdca optimizer	count=1
class	current batch of ||| sequence batch	count=1
function	of vectors ||| get vector	count=1
arg	for given tensors ||| step tensors feed_dict	count=1
function	valid types for loss ||| valid dtypes	count=1
function	generates test data ||| test data	count=1
module_class	[module_1] adagrad optimizer ||| [module_1] [class_2]	count=6
arg	ids and ||| sp_ids	count=1
function	function for converting ||| conversion function	count=3
function_arg	[function_1] labeled tensor ||| [function_1] [arg_2]	count=3
function_arg	for [arg_2] ||| [function_1] exit [arg_2]	count=1
function	noise ||| noise	count=1
function	[function_1] [function_2] a ||| [function_1] [function_2]	count=2
function	classification model ||| train model	count=2
function	[function_1] possible input ||| [function_1] [function_2]	count=2
module_class	[module_1] session ||| [module_1] monitored [class_2]	count=1
class	[class] sparsely ||| resource [class]	count=3
class	this stepper ||| node stepper	count=1
function	by a random ||| random	count=1
arg	"passthrough" tensors ||| inside_ops passthrough_ts	count=1
function	a non-negative int32 ||| assert non negative int32	count=1
function	for proper shape ||| maybe assert valid	count=1
function_arg	write a [arg_2] ||| [arg_2] [function_1]	count=6
function_arg	from [arg_2] ||| [arg_2] [function_1]	count=20
function_arg	specificity at [arg_2] ||| [function_1] [arg_2]	count=1
function	register all the ||| register	count=1
module	for labeled ||| contrib labeled_tensor	count=2
module	returns a training ||| layers	count=1
function	returns ||| get in out	count=1
module	of the ||| labeled_tensor python ops	count=2
module	of zero or more ||| linalg python ops	count=1
function	make a [function_2] ||| [function_1] [function_2]	count=5
function	with the tokens ||| tokens	count=1
function	returns list ||| get	count=1
function	[function_1] size which ||| [function_1] [function_2]	count=2
arg	[arg_1] cluster center ||| [arg_2] [arg_1]	count=1
arg	[arg_1] times ||| [arg_1] [arg_2]	count=1
function	split the parameters ||| split	count=1
module	to __init__ which gets ||| contrib distributions python ops	count=1
function	tf graph ||| tf	count=1
class	to build an input ||| feature column	count=1
class	data ||| data	count=6
class	the cell ||| grid rnncell	count=1
function	have ||| for same	count=1
function	the raw ||| get raw	count=1
arg	old_getter internally ||| old_getter	count=1
module	all the ||| contrib	count=1
function	validate the dumped tensor ||| validate	count=1
module	the sense ||| contrib linalg python ops	count=5
function	non-linearly-separable [function_2] ||| [function_1] [function_2]	count=1
function	model parameters and flops ||| logged	count=1
function	sparse softmax ||| flipped sparse softmax	count=1
arg	check counts for ||| counts	count=2
function	tensors in the sharded ||| export sharded	count=1
arg	recall@k and ||| k class_id	count=1
arg	path ||| path options	count=1
function	to ops ||| filter ts from regex	count=1
class	a table ||| dense hash table	count=1
arg	an image ||| image	count=7
arg	lstm across all steps ||| noutput scope name	count=1
function	function details ||| function details	count=1
module	method to ||| python ops	count=1
module	two dimensions of tensor ||| python ops	count=1
arg	tensors to a file ||| filename tensor_names tensors	count=1
module	returns ||| layers python	count=1
arg	to runoptions ||| run_options	count=2
function	sparse ||| streaming sparse	count=3
function	softmax training [function_2] ||| [function_1] [function_2]	count=1
function	a graph in tensorboard ||| to tensorboard	count=1
class	hook ||| hook	count=3
function	dense ||| tensor dense	count=1
function	then ||| maybe assert valid	count=1
function	additional logistic ||| logistic	count=1
module	the 5 inputs of ||| ops	count=1
module	] ||| bayesflow python ops	count=1
module	match the ||| contrib graph_editor	count=1
function	nodedef proto representing the ||| node def	count=1
function_arg	a 1d [arg_2] ||| [arg_2] [function_1]	count=5
function	model [function_2] ||| [function_1] [function_2]	count=14
function	has no collisions ||| v2 has no collision	count=1
function	not applicable to strings ||| test dtype string	count=1
function	then return tensor version ||| assert valid sample	count=1
function	[function_1] the command ||| [function_2] [function_1]	count=2
function	model_fn [function_2] ||| [function_2] [function_1]	count=2
function	invalid indices in a ||| invalid indices	count=1
arg	to axis in ||| axis	count=1
function	proto_type ||| type	count=1
function	a tensor that the ||| tensor	count=1
function	that the [function] implements ||| get [function]	count=1
function	verifies the values for ||| values	count=1
function	protocol buffer ||| proto	count=3
function	[function_1] value as ||| [function_2] [function_1]	count=2
module	which properly ||| contrib distributions python kernel_tests	count=1
function	the legacy init ||| legacy init	count=1
function	mean squared error between ||| mean squared error	count=2
function	[function_1] priors ||| [function_1] [function_2]	count=1
function	[function_1] options ||| [function_2] [function_1]	count=4
function	the total variation for ||| total variation	count=2
function	size for the next ||| size	count=1
function	using numpy ||| np	count=2
function	text ||| texts to sequences	count=1
function	get all ||| filter ts	count=1
function	derivatives for bilinear resizing ||| resize bilinear grad	count=1
function	proper shape values then ||| valid	count=1
arg	[arg_1] and labels ||| [arg_2] [arg_1]	count=8
function_arg	[function_1] sensitivity ||| [function_1] [arg_2]	count=2
function	that match ||| ts	count=1
function	according to their ||| bucket by	count=1
function	tensor's shape partitioned ||| shape	count=1
class	and return indexies of ||| processor	count=1
function	get the node ||| get node	count=2
function	[function_1] bundle from ||| [function_2] [function_1]	count=2
arg	same shape and contents [arg_1] [arg_2] ||| python ops identity [arg_1] [arg_2]	count=1
function	to minimize ||| minimize	count=1
function_arg	[function_1] multiple devices ||| [function_1] [arg_2]	count=2
function	json and writes ||| json	count=1
function	and conv2d produce ||| conv2d	count=1
class	initializer ||| key value tensor initializer	count=1
module	a given number of ||| learn python learn	count=1
function	unused nodes from a ||| unused from	count=1
arg	dim_indices ||| dim_indices	count=1
function	to a richtextlines object ||| text lines from rich line	count=1
module	of inverse ||| distributions python ops	count=1
module	all are sessionrunhook ||| python estimator	count=1
arg	and wait ||| timeout	count=1
function	update for dnn-only ||| dnnonly	count=1
function	code ||| or div grad	count=1
class	its outputs ||| highway	count=1
arg	and op2 ||| op2	count=1
function	works for one ||| one	count=1
module	multiply ||| contrib layers python layers	count=1
function	to specified invalid ||| invalid	count=1
function	legend for node-status ||| label legend	count=1
module	of the default graph ||| python ops	count=2
arg	times and then ||| name	count=1
arg	looperthread ||| timer_interval_secs target args	count=1
class	returns a tensor ||| lazy builder	count=1
function	shape for ||| in out shape	count=1
function	objective ||| objective	count=1
arg	input_fn diffs from ||| x y batch_size num_epochs	count=1
function	param to init ||| init assign fetch	count=2
function	multiply ||| multiply	count=2
arg	tree representing the spec ||| spec inputs input_shape input_type	count=1
module	model's ||| imperative examples	count=2
class	replace ||| guide parser	count=1
function	worker cluster ||| worker cluster	count=2
arg	given feature_columns ||| feature_columns name example_names	count=1
function	to [function_2] ||| [function_1] flat [function_2]	count=1
function	the shape of ||| output shape	count=1
function	a node def ||| node	count=1
arg	x ||| x axes shift name	count=1
function	lookup ||| from file	count=1
module	and stopping ||| slim python slim	count=1
function	valued features ||| valued	count=2
function	export in a directory ||| export	count=1
function	from an event ||| from event	count=2
module	features ||| learn estimators	count=2
class	check to ||| files	count=1
function	loss for ||| loss	count=4
module	a shape ||| python framework	count=1
function	tf graph ||| inference graph	count=1
function_arg	the graph [arg_2] ||| [arg_2] [function_1]	count=1
module	the same as 'values' ||| metrics python	count=1
arg	for inclusion in a ||| receiver_tensors	count=1
function	feature spec [function_2] ||| [function_1] [function_2]	count=2
function	tensor [function_2] ||| [function_2] [function_1] x	count=1
arg	for optimizer ||| global_step learning_rate optimizer	count=1
function	a simple classification model ||| train model	count=2
function	restore a [function_2] ||| [function_2] [function_1]	count=1
arg	parameter rate ||| rate validate_args allow_nan_stats	count=1
function	[function_1] arguments are ||| [function_2] [function_1]	count=18
module	of underlying vector ||| contrib distributions python ops	count=1
class	a staging area object ||| staging area	count=1
function	most recent savedmodel ||| most recent	count=1
function_arg	[function_1] table ||| [arg_2] [function_1]	count=1
function	parses a time string ||| parse readable time str	count=1
function	the test data directory ||| test data	count=1
module	each text ||| keras python keras	count=1
function	in default values ||| default	count=1
class	returns ||| replicas optimizer	count=1
arg	based on featurecolumns ||| columns_to_tensors feature_columns	count=1
function	a unary [function_2] ||| [function_2] [function_1]	count=2
module	used to ||| layers	count=2
function	save the ||| save	count=3
function	the mode in which ||| mode	count=1
function	[function_1] sqrt_solve ||| [function_2] [function_1]	count=1
arg	[arg_1] and scale ||| [arg_2] [arg_1]	count=7
module	core version with ||| python learn	count=1
arg	[arg_1] and precision@k ||| [arg_2] [arg_1]	count=8
function_arg	column of [arg_2] ||| [arg_2] [function_1]	count=4
class	[class_1] gradient ||| [class_2] [class_1]	count=1
function	parsing new values from ||| from	count=1
class	normal distribution on r^k ||| normal linear	count=1
function_arg	the sparseadd [arg_2] ||| [function_1] [arg_2]	count=1
arg	screen output from a ||| output node_name enable_list_tensors enable_node_info	count=1
function	delay between summary computations ||| save summaries secs	count=1
function	resnet_v2() for ||| resnet v2	count=2
function_arg	[function_1] value to ||| [arg_2] [function_1]	count=3
module	variable and returns ||| contrib keras python keras	count=1
function	operators within the scope ||| scope	count=1
module	_guideref from the ||| tools docs	count=1
arg	oldpath to [arg_2] ||| [arg_1] [arg_2]	count=1
arg	randomly selects [arg_2] ||| [arg_2] [arg_1]	count=1
arg	to la ||| la	count=1
function	the offset when ||| single offset	count=1
module	will be produced or ||| python	count=1
module	the files ||| tools docs	count=1
module	by a ||| ops	count=1
function	[function_1] linear-only model ||| [function_1] [function_2]	count=2
function	[function_1] model function ||| [function_2] [function_1]	count=4
function	x ||| plus b v1	count=1
function	multiply specified [function_2] ||| [function_1] [function_2]	count=1
module	event ||| python summary writer	count=2
module	make sure ||| tools	count=1
module	of the dataframe and ||| learn python learn dataframe	count=1
function	asset ||| asset	count=3
function_arg	metagraphdef from [arg_2] ||| [function_1] [arg_2]	count=1
arg	parameters ||| num_units use_peepholes share_time_frequency_weights	count=1
function	size ||| params size	count=1
arg	a target ||| target	count=2
arg	split dims ||| dims	count=1
function	the ready [function_2] ||| [function_2] [function_1]	count=3
function	mean relative ||| mean relative	count=2
module	from 'run_meta' ||| contrib tfprof python tools tfprof	count=1
function	feed [function_2] ||| [function_1] [function_2]	count=8
function	recall values ||| streaming recall	count=1
function	contains ||| contains	count=1
arg	blocks ||| blocks output_stride	count=1
function_arg	tensors [arg_2] ||| [function_1] inputs [arg_2]	count=1
function	the condition based ||| pick scalar condition	count=1
arg	computation ||| before	count=2
module	variable of the same ||| contrib keras python keras	count=2
arg	this [arg_2] ||| [arg_2] [arg_1]	count=2
function	sparse softmax ||| sparse softmax	count=3
function_arg	a summary [arg_2] ||| [arg_2] [function_1]	count=2
class	proper shape values ||| dirichlet multinomial	count=1
module	helper to ||| ops	count=2
arg	to_proto and [arg_2] ||| [arg_1] [arg_2]	count=3
function	event [function_2] ||| [function_2] [function_1]	count=1
function_arg	shape [arg_2] ||| [arg_2] [function_1]	count=11
module	vocabulary dictionary and return ||| python learn	count=1
function	of variable ||| variable	count=1
module	with another instance ||| python	count=1
function	assert that [function_2] ||| [function_1] [function_2]	count=3
class	names [class] ||| [class]	count=3
arg	sequenceexamples ||| sequence_feature_columns allow_missing_by_default	count=1
function	return a tensor to ||| tensor	count=2
arg	initialize a linearoperatorcomposition ||| operators is_non_singular is_self_adjoint is_positive_definite	count=1
function	log ||| log joint	count=2
function	a header for use ||| header from ops	count=1
module	dataframe into two dataframes ||| python learn dataframe	count=1
arg	n [arg_2] ||| [arg_1] [arg_2]	count=4
function_arg	[function_1] [arg_2] ||| [function_1] dense [arg_2]	count=4
arg	whether a and b ||| a b	count=1
module	from a rank-2 ||| contrib solvers python ops	count=1
function	creates regression [function_2] ||| [function_1] [function_2]	count=2
arg	precision@k of ||| predictions_idx weights	count=1
function	a device ||| replica device	count=1
module	of ||| contrib metrics python ops	count=10
class	operations in the session ||| session	count=1
module	op (e ||| framework	count=1
class	to summary writer ||| summary writer	count=1
function	is empty ||| empty	count=1
function	given tensor ||| tensor	count=1
function	the default ||| default	count=7
arg	on featurecolumns ||| columns_to_tensors feature_columns num_outputs	count=1
arg	in input ||| inputs sequence_length	count=2
class	without a ||| model	count=1
module	to the ||| losses python	count=1
function_arg	name [arg_2] ||| [function_1] or parent names [arg_2]	count=1
function	op to use based ||| get string to hash	count=1
function	reshape the ||| maybe reshape	count=1
arg	axes ||| x axes	count=1
class	finished ||| every n	count=1
module	given number of ||| learn python learn	count=1
function	this object the default ||| default	count=1
function	a monitoredsession for ||| monitored	count=1
function	export strategies with the ||| export strategies	count=1
function	of event ||| event	count=1
function	only the rows indicated ||| select rows	count=1
function	the ordering of op ||| op	count=1
function_arg	[function_1] model ||| [function_1] session bundle dir [arg_2]	count=1
class	node-status ||| node stepper cli	count=2
function_arg	existing variable [arg_2] ||| [function_1] [arg_2]	count=2
function	if ||| check	count=1
arg	tensor with the contents ||| name	count=1
arg	terminate ||| stop_grace_period_secs ignore_live_threads	count=1
function	with different ||| different	count=1
function	gradient for the sum ||| sum grad	count=1
function	recall ||| recall	count=2
function	classification accuracy on test ||| test accuracy	count=1
function	define a [function_2] ||| [function_1] [function_2]	count=6
function_arg	[function_1] expression summarizing ||| [function_1] [arg_2]	count=2
function	update ||| update	count=7
module	batch version ||| contrib distributions python	count=1
function	operation within [function_2] ||| [function_2] [function_1]	count=1
arg	dimension of 1 into ||| dim	count=1
module	loss using ||| contrib losses python losses	count=1
module	sequence ||| python layers	count=1
function_arg	a 1d [arg_2] ||| [function_1] cumsum [arg_2]	count=5
arg	onrunstartresponse ||| action debug_urls debug_ops node_name_regex_whitelist	count=1
class	of metadata values ||| metadata	count=1
function	initialize the state ||| initialize state	count=3
class	for ||| stepper cli	count=2
function_arg	[function_1] that op ||| [function_1] context [arg_2]	count=3
module	the vocabulary dictionary and ||| python	count=1
function	invalidate the ||| invalidate transitively outgoing	count=1
function	structure of ||| structure	count=1
module	building doesn't modify the ||| hybrid python	count=1
function	function [function_2] ||| [function_2] conversion [function_1]	count=1
function	the summary op either ||| summary op	count=1
module	of keras tensors ||| contrib keras python keras	count=1
function	define graph for ||| define graph	count=2
module	the graph ||| python	count=1
function	sparse_column_with_hash_bucket ||| sparse column hash bucket	count=1
function_arg	state [arg_2] ||| [function_1] [arg_2]	count=1
class	make sure we don't ||| test upgrade	count=1
function	a bucketized [function_2] ||| [function_1] [function_2]	count=1
module	vector of ||| contrib distributions python ops	count=4
function	get an operatorpdidentity to ||| get identity operator	count=1
function	[function_1] tf sparsetensor ||| [function_1] to [function_2]	count=2
function	-> _guideref from ||| build	count=1
function	[function_1] keys ||| [function_2] [function_1]	count=3
module	transforms each ||| python	count=1
function	pads ||| pad	count=1
class	a table outputs the ||| initializable lookup table	count=1
function	that a model_fn can ||| model fn ops	count=1
function	create an ||| create analyzer	count=1
function	computes the root ||| root	count=2
class	run to perform ||| composable model	count=1
function	menuitem from ||| caption to	count=1
module	each component of a ||| python ops	count=5
function	[function] of ||| [function]	count=2
module	invoked during construction of ||| wrappers	count=1
function	weight [function_2] ||| [function_1] [function_2]	count=6
function_arg	lstm cell [arg_2] ||| [arg_2] [function_1]	count=3
function	don't have a ||| test	count=1
function	true if the provided [function_1] [function_2] ||| contrib linear_optimizer python [function_1] [function_2] head	count=1
module	for [module_2] ||| [module_1] [module_2]	count=4
module	the vocabulary dictionary ||| python	count=1
function	example ||| ops from example	count=1
arg	summary tag ||| tag	count=5
class	normal distribution on r^k ||| normal	count=3
module	image ||| keras python keras	count=1
class	a tensor ||| lazy builder	count=1
module	a tensor for the ||| feature_column	count=1
arg	or dicts ||| rtol atol	count=1
class	outputs the corresponding ||| with	count=1
function_arg	batch and [arg_2] ||| [arg_2] [function_1]	count=1
function	integer classes and ||| build standardized	count=1
function	input/outputs are cholesky ||| cholesky	count=1
function	list the ||| list inputs	count=1
function	regression signature from ||| regression signature fn	count=5
module	finish computation of ||| ops	count=1
class	be produced ||| slices	count=1
arg	activations from the ||| activations	count=3
module	the main docstring ||| tools docs	count=1
function_arg	[function_1] [arg_2] ||| [function_1] directory [arg_2]	count=8
function	converting ||| conversion	count=1
function	[function_1] least ||| [function_2] [function_1]	count=4
function	an event ||| event	count=1
class	registered function corresponding to ||| func registry	count=1
module	using matrix data as ||| estimators	count=2
function	initializer and a ||| initializer	count=1
function	compute the weighted ||| weighted	count=1
arg	given name ||| name scope	count=2
arg	from_proto functions ||| from_proto	count=1
class	create ||| debug dump dir	count=1
class	with data ||| data	count=2
function	line ||| at line	count=1
function_arg	indexedslices object [arg_2] ||| [function_1] tensor [arg_2]	count=3
arg	sgv0 to [arg_2] ||| [arg_2] [arg_1]	count=5
module	reader ||| python ops	count=1
arg	metric and update op ||| scalar_tensor	count=1
module	sessionrunhook raises ||| python	count=1
arg	performs a ||| intensity row_axis col_axis	count=1
function	a slot ||| slot	count=4
function	values ||| fwd values	count=1
function_arg	[function_1] [arg_2] through ||| [function_1] [arg_2]	count=1
arg	the given values ||| values	count=3
function_arg	while loop [arg_2] ||| [function_1] context [arg_2]	count=1
function	string_to_hash_bucket op to ||| get string to hash bucket fn	count=1
function	flags ||| tb app	count=2
module	a ||| contrib keras python keras preprocessing	count=2
module	of tensor a ||| python ops	count=1
function	scalars in ||| count params	count=1
arg	column based on ||| column args weight_collections trainable	count=1
function	text ||| to	count=1
function	the summary tensor ||| summary op	count=1
function_arg	[function_1] given rank ||| [function_1] [arg_2]	count=5
class	this operator ||| linear operator scaled	count=1
function	using kernel methods ||| kernel	count=1
class	tests ||| regressor test	count=14
function	values then ||| maybe assert valid sample	count=1
class	dictionary and return indexies ||| categorical	count=1
module	cell with [module_2] ||| [module_1] python [module_2]	count=1
function_arg	[function_1] command arguments ||| [arg_2] [function_1]	count=4
module	model ||| framework python ops	count=1
arg	given threshold ||| threshold	count=1
arg	loc and scale ||| loc scale	count=2
arg	assets in logdir ||| logdir	count=1
function	create zeros_like ||| zeros like outside loop	count=1
function	bundle from ||| bundle or saved model bundle from	count=1
function_arg	resnet-152 [arg_2] ||| [function_1] [arg_2]	count=1
function	sequence models ||| sequence	count=1
function	embedding and attention ||| embedding attention	count=2
module_class	multivariate [class_2] ||| [module_1] multivariate [class_2]	count=12
module	nested tuple of ||| python ops	count=2
arg	feature [arg] ||| [arg] sp_values vocab_size	count=1
arg	has access ||| args screen_info	count=1
function	we use the rpc ||| use	count=1
module	of a 1 outcome ||| ops distributions	count=1
module	that graph ||| contrib tensor_forest	count=1
arg	graph_def into ||| graph_def	count=1
arg	that deepconv2d ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
function	of shapes ||| shapes	count=2
function	a safe ||| safe	count=1
function	[function_1] tag ||| events discarded per [function_2] [function_1] than2	count=1
module	containing a sequence of ||| ops	count=1
module	function ||| python framework	count=5
function	new control inputs ||| control inputs	count=2
function_arg	activations using summarize_activation ||| activations name_filter summarizer	count=1
function_arg	squared error [arg_2] ||| [function_1] [arg_2]	count=4
function	file paths from a ||| file paths	count=1
function	true tensor if ||| is	count=1
function	a batch [function_2] ||| [function_1] [function_2]	count=1
module	computes ||| python ops	count=6
arg	performs ||| intensity row_axis col_axis	count=1
arg	with ||| stride	count=1
arg	boundaries and [arg_2] ||| [arg_2] [arg_1]	count=1
arg	batches [arg_2] ||| [arg_1] capacity [arg_2]	count=2
function	the example [function_2] ||| [function_1] [function_2]	count=3
function	runs ||| add runs	count=1
function	[function] resnet ||| resnet [function]	count=1
function	tensor to ||| parse label tensor	count=1
class	add ||| local clidebug wrapper session	count=1
module	and return indexies ||| contrib learn python learn	count=1
arg	screen output from a ||| output	count=1
module	dictionary and return indexies ||| learn preprocessing	count=1
function	against the partition ||| dump with	count=1
function	at [function_2] ||| [function_2] [function_1]	count=6
function	true ||| true	count=2
class	we don't ||| upgrade files	count=1
class	each ||| tokenizer	count=1
function	the offset when the ||| offset	count=1
function	a subset ||| select	count=1
function	evaluation metrics ||| metrics	count=6
module	replace ||| labeled_tensor python ops	count=1
function	sqss for ||| for	count=1
function	the control flow context ||| control flow context	count=1
function_arg	its namesake [arg_2] ||| [function_1] [arg_2]	count=3
function	shape representing a scalar ||| scalar	count=1
module	sum ||| python layers	count=1
function_arg	[function_1] v is ||| [arg_2] [function_1]	count=3
arg	op was marked ||| scope op	count=1
function_arg	[function_1] directory ||| [arg_2] [function_1]	count=2
arg	dictionary and ||| x	count=1
arg	sequence of symbols ||| ids vocab_size embed_dim unique	count=1
module	from 'run_meta' ||| tfprof python tools tfprof	count=1
module	parameter p is ||| distributions python kernel_tests	count=1
function	with atrous ||| atrous	count=1
function	tf options to ||| options	count=1
class	returns a non-reference ||| dtype	count=1
function	the beginning of training ||| on train begin	count=1
function	per step ||| step	count=1
module	cli ||| debug cli	count=4
module	and feed functions ||| python learn	count=1
function	the product ||| mul	count=1
function	manual variable initialization flag ||| manual variable initialization	count=1
function	unstack ||| unstack	count=1
function	[function_1] static shape ||| [function_1] sample [function_2]	count=1
module	transform [module_2] ||| [module_1] [module_2]	count=3
module	image ||| keras python keras preprocessing	count=1
function_arg	keys [arg_2] ||| [function_1] [arg_2]	count=2
module	[module_1] loaded module ||| [module_1] [module_2]	count=6
function	[function_1] hash_signs=true ||| [function_2] [function_1]	count=1
module	returns a list instead ||| contrib learn python learn	count=1
function	be [function] ||| test key [function]	count=1
function	make sure we ||| test	count=1
module	the same as 'values' ||| contrib metrics python ops	count=1
function	crossed ||| crossed	count=1
module	[module_1] that wraps ||| [module_1] [module_2]	count=3
function	bad ||| test bad file	count=1
function	the raw ||| raw	count=1
arg	tensors [arg_2] ||| [arg_2] [arg_1]	count=3
function	[function_1] column of ||| [function_1] [function_2]	count=8
function	[function_1] model ||| [function_1] [function_2]	count=5
module	x + ||| distributions python ops	count=1
class	shape values then ||| dirichlet	count=1
function	get all [function_2] ||| [function_1] [function_2]	count=5
arg	y ||| x y use_gpu	count=3
module	of images by ||| python ops	count=1
module_class	with the [class_2] ||| [module_1] [class_2]	count=2
function	unbatch timeout works ||| unbatch timeout	count=1
function	a single ||| parse single	count=4
function	returns an input_fn ||| input	count=1
arg	through the ||| float_graph_def input_map output_names log_graph	count=1
arg	in values ||| values	count=2
function	the type of ||| type	count=1
function	test ||| test	count=20
function	transforms ||| texts to	count=1
function_arg	[function_1] y holds ||| [function_1] x [arg_2]	count=4
module	[module_1] image s ||| [module_2] [module_1]	count=1
function	to ||| ts from	count=1
function	compute gradients ||| compute gradients	count=1
function	tensor ||| maybe assert	count=1
function	generate class predictions ||| predict classes	count=2
module	dictionary ||| learn preprocessing	count=2
arg	the cells ||| cells c_prev	count=1
module_class	model's forward prop ||| imperative examples model	count=2
function	a deepcopy of ||| deep copy	count=1
function	make a [function_2] ||| [function_2] [function_1]	count=5
function	[function_1] a fixed ||| [function_2] size [function_1]	count=1
function	return ||| guide	count=1
module	a ||| debug	count=1
class	input ||| feature	count=1
arg	tensor_list ||| tensor_list num_epochs shuffle	count=1
function	[function_1] empty ||| [function_1] [function_2]	count=5
module	axes of two ||| ops	count=1
module	file ||| summary	count=1
function	existed in ||| unique target	count=1
class	if the ||| synthetic	count=1
function	servers ensures appropriate ||| servers one cluster	count=1
arg	given rank ||| rank	count=1
function	root mean [function_2] ||| [function_1] [function_2]	count=8
function	returns a unique ||| unique	count=1
function_arg	[function_1] the key ||| [arg_2] [function_1]	count=1
function	attribute to generate a ||| get attribute	count=1
function	= rhs, given cholesky ||| cholesky	count=1
function	[function_1] enqueue based ||| [function_2] [function_1]	count=3
function	computes the projections ||| projections	count=1
function	raises typeerror ||| check hooks type	count=1
function	[function] if it's ||| check default [function]	count=1
class	should have similar behavior ||| pdderived class test	count=1
function	false positives ||| false positive at k	count=2
arg	for the screen output ||| output node_name	count=1
arg	the model ||| export_dir	count=1
class	as a packed tensor ||| tensor	count=1
arg	with parameters loc ||| loc	count=1
arg	rnncell cell and ||| cell	count=1
arg	control_inputs [arg_2] ||| [arg_1] [arg_2]	count=1
module	of arbitrary ||| python ops	count=1
function	creates fixed size histogram ||| compress histogram	count=1
arg	keys and values ||| keys values	count=3
function	write a string ||| write	count=1
class	reference ||| reference	count=3
function_arg	loads the [arg_2] ||| [arg_2] [function_1]	count=1
function	one-to-many rnn ||| one2many rnn	count=1
function	and weighted sparse features ||| weighted sparse features	count=1
function	[function_1] weight ||| [function_2] [function_1]	count=6
function	a head for ||| head	count=1
function_arg	[function_1] [arg_2] ||| [function_1] factors [arg_2]	count=12
function	a simple [function_2] ||| [function_2] [function_1]	count=1
module	a ||| python ops	count=1
module	a ||| ops distributions	count=2
function	categorical ||| sparse categorical	count=1
module	computes ||| kernel_methods python mappers	count=1
arg	runs session for given ||| session step	count=1
function	split a ||| sparse split	count=1
module	in this ||| grid_rnn python ops	count=1
module	to ops that match ||| contrib	count=1
function	the op [function_2] ||| [function_2] [function_1]	count=2
module	binary ||| metrics python ops	count=2
function	labeledtensor ||| labeled tensor	count=1
function	with a ||| with	count=3
function	conv3d ||| conv3d	count=1
function	small input ||| small input	count=2
module	multiplies ||| contrib keras python keras	count=1
arg	according ||| is_control	count=1
module	all the element ||| graph_editor	count=1
arg	[arg_1] specific format ||| [arg_1] [arg_2]	count=2
arg	predictions and [arg_2] ||| [arg_2] [arg_1]	count=2
function	convert a list of ||| line list	count=1
function	graph ||| as graph	count=1
function	[function_1] two graphdefs ||| [function_2] [function_1]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] variables [arg_2]	count=1
module	experiment ||| python learn	count=1
module	a given ||| python learn	count=2
function	directory traversal attack ||| test directory traversal	count=2
function	a fully [function_2] ||| [function_1] [function_2]	count=4
function	[function_1] hooks can ||| [function_1] [function_2]	count=2
function	state for all the ||| flow state	count=1
module	sequence-to-sequence ||| legacy_seq2seq python	count=2
function	all the ||| ts from regex	count=1
function	key in ||| key in	count=1
arg	image ||| image saturation_factor	count=1
function_arg	[function_1] [arg_2] ||| [function_1] tf sparse [arg_2]	count=3
function_arg	[function_1] it ||| [arg_2] [function_1]	count=2
module	1 outcome (vs 0) ||| ops	count=1
class	initialize ||| linear operator udvhupdate	count=1
function	[function_1] single ||| [function_1] [function_2]	count=4
function	sdcaoptimizer and real valued ||| sdca optimizer real valued	count=1
function	tags found in ||| tags	count=1
module	same as 'values' ||| metrics python	count=1
module	after training ||| python learn	count=1
module	the op (e ||| framework	count=1
function	least ||| least	count=1
function	table ||| table from file	count=1
function	a ||| to	count=3
class	with attention ||| attention	count=1
module	and ||| feature_column	count=2
function	we can enable ||| enable	count=1
function	weight vector ||| weights	count=1
arg	a new movingaverageoptimizer ||| opt average_decay num_updates sequential_update	count=1
class	fetch mapper that ||| fetch mapper	count=1
function	methods with as_iterable=true ||| as iterable	count=1
arg	[arg_1] weights + ||| [arg_2] [arg_1]	count=4
module_class	adds an unref to [module_1] [class_2] ||| [module_1] [class_2] tracker add unref timestamp	count=3
function	from [function_2] ||| [function_1] line [function_2]	count=1
module	training ops library and ||| ops	count=1
function	state for all the ||| control flow state	count=1
class	the tensorarray as ||| array	count=1
module	dataset ||| keras python keras datasets	count=2
function_arg	[function_1] layers ||| [function_1] params [arg_2]	count=1
function	obtain all input alternatives ||| get input alternatives	count=1
function	to ops that match ||| filter	count=1
function	the main page ||| main page	count=1
arg	in dim_indices ||| dim_indices conf	count=1
function	of protos ||| protos	count=1
function	[function_1] queue ||| [function_1] batch [function_2]	count=6
module_class	[module_1] area object ||| [module_1] [class_2]	count=1
arg	values into a ||| values	count=1
arg	return a ||| name	count=3
function_arg	fit [arg_2] ||| [function_1] loop [arg_2]	count=1
module_class	the [class_2] ||| [module_1] ops [class_2]	count=19
function	[function_1] definite ||| [function_2] [function_1]	count=1
class	phased [class_2] ||| [class_1] [class_2]	count=1
function	the debug-wrapper session ||| session	count=1
function	and add ||| add	count=1
function	a variable and ||| variable	count=1
arg	/ [arg] elementwise using ||| x [arg]	count=1
module	dumps all layer ||| keras python keras engine	count=1
module	get a ||| python	count=1
function	to a richtextlines ||| text lines from rich line	count=1
function	match the ||| ts	count=1
function	captured variables by ||| get extra vars	count=1
arg	a sparsetensor ||| sp_input	count=1
arg	one step ||| state	count=3
function	a scope that ||| scope	count=1
arg	val to the current ||| val	count=1
function	up the node's statistics ||| stats	count=1
function	a graph with constants ||| to constants	count=1
arg	determined by pred ||| pred	count=2
module	with the same content ||| python ops	count=1
function	numpy matrix ||| to matrix	count=1
function	a mix of ||| mixed	count=4
arg	using ||| logits	count=1
class	given ||| lazy builder	count=2
function	copy ||| copy	count=7
module	a list of keras ||| python keras	count=1
module	a given factorization ||| contrib factorization	count=1
function	attr ||| get attr	count=1
function	batch normalization layer ||| batch normalization	count=1
arg	creates a tensor with ||| tensor dtype	count=1
function	multivariate digamma ||| digamma	count=1
function_arg	< y ||| less x y	count=1
module_class	[module_1] this linearoperator ||| [class_2] [module_1]	count=2
function	prepares features config ||| feature spec for parsing	count=1
module_class	[module_1] tensor into ||| [module_1] [class_2]	count=6
module	while training ||| learn learn_io	count=2
function	graphs ||| graphs	count=3
module	of factors ||| ops	count=1
arg	table ||| table	count=1
function	the projections of the ||| get projections	count=1
function	dot ||| dot	count=1
module_class	evaluating [class_2] ||| [module_1] [class_2]	count=4
class	tensor into [class_2] ||| [class_2] [class_1]	count=1
module	for the location ||| distributions python ops	count=1
function	the life time of ||| enter	count=1
function	a non-negative int32 scalar ||| assert non negative int32 scalar	count=1
module	specified output of ||| python ops	count=2
module	specific axes of a ||| python ops	count=1
module	indexies ||| python learn	count=1
class	is part ||| sequential	count=1
function	export [function_2] ||| [function_1] [function_2]	count=13
function_arg	exit a [arg_2] ||| [arg_2] [function_1]	count=2
arg	runs session ||| session	count=1
class	name ||| indexed slices	count=1
arg	[arg_1] graph_def ||| [arg_2] [arg_1]	count=2
function	array ||| array	count=5
class	normal ||| normal diag	count=1
class	we don't have ||| test upgrade files	count=1
module	the training procedure ||| losses python losses	count=1
arg	tensors to ||| tensors	count=2
class	have a ||| test upgrade files	count=1
module	filename linenumber for the ||| python platform	count=1
function	relative [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] feature extraction ||| [function_1] [function_2]	count=4
function	the string_to_hash_bucket op to ||| to hash	count=1
function_arg	[function_1] named ||| [function_1] column [arg_2]	count=1
function	map on the ||| map	count=2
function	direct python implementation ||| batch direct	count=1
class	table outputs the corresponding ||| dense hash table	count=1
module	initialize a batch of ||| contrib distributions python ops	count=1
arg	that propagates x ||| x	count=1
class	operator ||| linear operator identity	count=1
function	the tensors ||| filter ts from regex	count=1
arg	tree representing ||| inputs input_shape input_type	count=1
function	returns ||| get file and	count=1
function_arg	resnet-101 [arg_2] ||| [arg_2] [function_1]	count=1
module	by the ||| python	count=4
function	internal implementation ||| internal	count=1
class	a permissiondeniederror ||| permission denied error	count=1
arg	in tensor_list ||| tensor_list num_epochs shuffle seed	count=1
module	defines the ||| slim python slim nets	count=1
function	numpy arrays ||| check array	count=1
arg	value ||| value dtype name	count=1
arg	of cursesui based on ||| ui_type on_ui_exit	count=1
module	same as the ||| contrib learn python learn estimators	count=3
module_class	[module_1] stack ||| [module_1] keras [class_2]	count=3
function_arg	[function_1] to writer ||| [function_1] [arg_2]	count=1
function	to ops that ||| filter ts from	count=1
class	which values will be ||| slices	count=1
function	noise-contrastive estimation ||| nce	count=1
class	given ||| dnnlinear combined	count=1
function	the nchw format ||| nchwto	count=1
function	[function_1] a fixed ||| [function_2] [function_1]	count=1
function_arg	[function_1] loss ||| [arg_2] [function_1]	count=4
function	parsing config of ||| config	count=1
function	the full [function_2] ||| [function_1] [function_2]	count=1
module	of a ||| contrib labeled_tensor python ops	count=2
module	can be used ||| layers	count=1
function	[function_1] by the ||| [function_2] [function_1]	count=3
module	get a ||| debug lib	count=1
function	[function] these parameters ||| get [function]	count=1
module	gradients for ||| python ops	count=3
class	providing access to ||| queueing state saver	count=1
module	to a multiple of ||| python training	count=1
class	enqueue ops ||| queue runner	count=1
function	the range of ||| range	count=2
function	node-status ||| node	count=1
function	function for [function_2] ||| [function_2] [function_1]	count=8
function	[function_1] higher ||| [function_1] with [function_2]	count=2
function	[function_1] [function_2] ||| [function_2] as [function_1]	count=3
module	a ||| keras preprocessing	count=2
module	the given dicts ||| learn python learn	count=1
class	area ||| area	count=3
function	the timestamp ||| timestamp	count=1
function_arg	[function_1] [arg_2] textbox ||| python debug [function_1] [arg_2] erase_existing	count=3
module	each text ||| preprocessing	count=1
class	and ||| categorical processor	count=2
module	isfunction ||| python util	count=1
function	tensorflow variables for the ||| vars	count=1
function	multivariate digamma ||| multi digamma	count=1
function	get legend for node-status ||| legend	count=1
function	[function_1] a single ||| [function_2] [function_1]	count=4
module	numpy ||| estimator inputs	count=1
module	proper shape values ||| ops distributions	count=1
function	categorical ||| categorical	count=1
function	benchmark single [function_2] ||| [function_2] [function_1]	count=2
arg	riemann sum ||| weights num_thresholds	count=2
class	cudnn ||| cudnn rnn	count=1
function	graph to ||| graph	count=2
function	deepcopy of a ||| deep copy	count=1
function	graph and returns trainer ||| get train	count=2
function	last dimension ||| last dimension	count=1
arg	permute a ||| axis_order	count=1
function	classes and no ||| build standardized signature def classification6	count=1
arg	record ||| record	count=1
function	node-status labels ||| status label	count=1
module	proper shape values ||| ops	count=1
function	constructs the name ||| name	count=2
module	all the op in ||| graph_editor	count=1
function	graph containing a ||| graph	count=1
function	[function_1] fixed ||| [function_2] [function_1]	count=1
function	match ||| filter ts	count=1
function	returns the value ||| get value	count=1
module	the next runge-kutta ||| integrate python	count=1
function	wrap a ||| wrap custom getter	count=1
function_arg	[function_1] _kernelestimator object ||| [arg_2] [function_1]	count=1
class	tests ||| at ktest	count=1
module	of rank 2 "a" ||| ops	count=1
class	of when this tensor ||| tensor	count=1
arg	the given ||| num_shards	count=1
function	intersection of a ||| intersection ops	count=2
class	the represented dense ||| sparse	count=1
module	ids of a ||| factorization python ops	count=1
class	[class_1] hook ||| [class_1] [class_2]	count=1
arg	layer [arg_2] ||| [arg_2] [arg_1]	count=2
function	the page ||| function page	count=1
function	is tensor not ||| tensor	count=1
function	all required [function_2] ||| [function_2] [function_1]	count=4
module	valid command prefix but ||| debug cli	count=1
module	tensor of a relaxedcategorical ||| python ops	count=1
class	return indexies of ||| categorical processor	count=1
module	the tfprof ||| tfprof python tools tfprof	count=1
arg	compares two ||| a	count=1
function	calculates true positives for ||| true positive	count=1
function_arg	[function_1] [arg_2] ||| [function_1] greater [arg_2]	count=2
module	depending ||| python ops	count=1
function	up [function_2] ||| [function_1] [function_2]	count=2
function	the graph-level random ||| random	count=1
function	the cumulative sum ||| cumsum	count=1
module	of dimensions and assert ||| python ops	count=1
class	adds ||| doc generator visitor	count=1
function	re-route ||| reroute	count=4
function	restricted ||| joint weighted sum from feature columns	count=2
arg	hooks if ||| hooks	count=1
module	be [module] apply ||| [module]	count=1
class	1 ||| relaxed	count=1
class	sort ||| debug analyzer	count=1
module	ensure that graph building ||| tensor_forest hybrid	count=1
function	values ||| setup values for	count=1
arg	elements from x ||| x	count=1
function_arg	input tensors [arg_2] ||| [function_1] tensor [arg_2]	count=3
function	if the latest checkpoint ||| latest checkpoints	count=1
arg	new ||| use_locking	count=1
module	ops ||| python ops	count=6
module	sequence of integers ||| preprocessing	count=1
module_class	initialize the [class_2] ||| [module_1] [class_2]	count=8
function_arg	[function_1] saves ||| [arg_2] [function_1]	count=1
function	reservoirs with different ||| uses	count=1
function	variable-length ||| real valued var len	count=1
class	a sequence of ||| tokenizer	count=1
function	lookup [function_2] ||| [function_2] [function_1]	count=10
arg	n(mu_a sigma_a), n(mu_b sigma_b) ||| mu_a sigma_a mu_b sigma_b	count=1
arg	axis ||| axis	count=9
class	enqueue ops for ||| runner	count=1
function	ops ||| from regex	count=2
class	within [class] ||| [class]	count=3
class	that contains the values ||| indexed slices	count=1
function	a richtextlines ||| lines from	count=1
function_arg	entropy between [arg_2] ||| [function_1] with logits [arg_2]	count=1
class	its outputs ||| residual wrapper	count=1
arg	to_proto and ||| proto_type to_proto	count=2
function	convolutions actually cross ||| non atrous	count=2
arg	the data to returns ||| data	count=1
arg	initialized to ||| primary	count=1
function	be turned into ||| be	count=1
class	[class_1] weight ||| [class_1] [class_2]	count=1
module	model ||| keras engine	count=5
function	nodes that aren't needed ||| nodes	count=1
function	summary file in ||| summary	count=1
function_arg	[function_1] cursesui based ||| [function_1] debug_dump tensor_filters [arg_2]	count=1
class	the generator into the ||| generator enqueuer	count=1
function	the data/plugins_listing endpoint ||| plugins listing	count=1
function_arg	path [arg_2] ||| [function_1] [arg_2]	count=1
arg	starts ||| start	count=1
module	self _value ||| bayesflow python ops	count=1
function	an existing model variable ||| model variable	count=1
function	and a mix of ||| optimizer mixed	count=1
function_arg	[function_1] [arg_2] ||| conv2dtest [function_1] values [arg_2] filter_in_sizes stride padding	count=2
module	with default ||| contrib learn python learn learn_io	count=1
arg	indices indices in ||| indices	count=1
arg	op was marked ||| op func	count=1
function	overriding ||| then remove override	count=1
arg	value ||| value	count=12
class	create a ||| round	count=1
function	transforms ||| to sequences	count=1
function	an attribute to ||| get attribute	count=1
function	returns the training operation ||| get train	count=1
module	non-reference dtype based ||| python framework	count=1
function	linked to ops that ||| ts from	count=1
function_arg	[function_1] of a ||| [arg_2] [function_1]	count=4
module	of dimensions corresponding to ||| distributions python ops	count=2
function	[function_1] ops for ||| [function_2] [function_1]	count=5
function	[function_1] data ||| [function_1] [function_2]	count=27
arg	see evaluable evaluable ||| input_fn feed_fn	count=2
function	variables ||| get variables	count=3
function	[function] of multiple ||| [function]	count=1
arg	of tensors in tensors ||| tensors	count=1
module	representing [module_2] ||| [module_1] [module_2]	count=1
function	raises typeerror otherwise ||| type	count=1
arg	directory or specific ||| ckpt_dir_or_file	count=1
function	a complex floating point ||| complex	count=1
function	create a new ||| replace	count=1
module	form the ||| factorization python ops	count=1
module	(vs ||| distributions	count=1
function	files ||| guide index	count=1
module	normalizes ||| util protobuf	count=1
function	lookup table ||| table from	count=1
function	if it is ||| is	count=1
function	the output values of ||| setup values for	count=1
function_arg	of context [arg_2] ||| [function_1] [arg_2]	count=1
module	is ||| backend event_processing	count=1
function	of ||| texts	count=1
arg	the given threshold ||| threshold weights metrics_collections	count=1
arg	queues ||| features name	count=1
class	thread ||| looper thread	count=1
function_arg	[function_1] given logits ||| [arg_2] [function_1]	count=2
module	features ||| estimators	count=1
function	schedule ||| schedule	count=1
function	per-class accuracies ||| per class accuracy	count=1
function	poisson distribution ||| random poisson	count=1
class	a variable to ||| variable	count=1
class	[class_1] normal ||| [class_2] [class_1]	count=4
module	node-status labels ||| python	count=1
arg	rgb ||| delta	count=1
class	creates an outofrangeerror ||| out of range error	count=1
function	for multi value models ||| single value	count=1
function	graph which ||| graph	count=1
function	nodes ||| training nodes	count=1
class	the enqueue op in ||| runner	count=1
module_class	from [class_2] ||| [module_1] [class_2]	count=2
function	of sequence of ||| sequence	count=2
function	the map ||| map	count=1
function	statistics for a ||| stat	count=1
function	[function_1] argument to ||| [function_1] [function_2]	count=2
function	subgraph from ||| view from	count=2
arg	saves ||| sess tags signature_def_map assets_collection	count=1
class	returns a non-reference dtype ||| dtype	count=1
function	variable-length numeric ||| real valued var len	count=1
function	[function_1] unary operation ||| [function_2] [function_1]	count=1
class	current batch of ||| next queued sequence batch	count=1
function	when the column is ||| column	count=1
module	given set of ||| ops	count=1
class	a shape based ||| shape	count=1
function	dynamic ||| dynamic rnn	count=2
module	ops library and ||| ops	count=1
function	[function_1] parsing tf ||| [function_1] [function_2]	count=5
class	with ||| curses test	count=2
function	custom objects ||| get custom objects	count=2
arg	input while maintaining the ||| inputs outputs_collections scope	count=1
module	trains the ||| python	count=1
module	of the given ||| contrib	count=1
function	checks if the model ||| model	count=1
module	a menuitem ||| python	count=1
function	main page and verify ||| main page	count=1
function	update operations ||| update	count=2
function	[function_1] message ||| [function_1] [function_2]	count=2
module	'graph and session and ||| contrib learn python learn	count=1
arg	iterator for smaller versions ||| shrink	count=1
arg	[arg_1] rate ||| [arg_1] [arg_2]	count=2
arg	tensor ||| op dtype name	count=1
arg	read feature_values ||| feature_values keys features	count=1
function	zero gradient ||| stop gradient	count=1
arg	of rate along ||| rate	count=1
module	op ||| python	count=1
function	shape ||| assert valid sample	count=1
arg	take a numpy ndarray ||| text_arr	count=1
function	mahalanobis distance to ||| distance to clusters	count=2
function	targets ||| targets	count=1
module	evaluating ||| tensor_forest	count=1
module	building ||| hybrid	count=1
function	to save the current ||| save	count=1
function	gradients by the given ||| gradient norms	count=1
class	we don't have a ||| upgrade files	count=1
module_class	of a tensor ||| python ops tensor	count=4
function	device to ||| device	count=1
module	vocabulary dictionary ||| learn python learn preprocessing	count=1
function	rank [function_2] ||| [function_1] [function_2]	count=1
class	with logistic regression ||| logistic	count=1
function	and file [function_2] ||| [function_1] [function_2]	count=1
module	ops that ||| contrib graph_editor	count=1
function	np matrix elements as ||| np matrix	count=1
class	the value should ||| stochastic value	count=1
function	any external control ||| external control	count=2
function	returns a function ||| get feed dict fn	count=1
function	vectors [function_2] ||| [function_2] [function_1]	count=1
arg	input_node ||| input_node	count=2
function	[function_1] placeholders from ||| [function_1] [function_2]	count=1
function	table that ||| table from file	count=1
function	overriding tensor ||| then remove override	count=1
arg	value of a variable ||| x value	count=1
function	a slot for a ||| slot	count=1
arg	threads to ||| threads	count=1
class	the base feature for ||| feature column	count=1
arg	ids in a ||| ids partition_strategy name	count=1
arg	based on the ||| weight_collections	count=1
function	flatten list tuple ||| flatten	count=1
function	return a tensor ||| tensor	count=2
function	a unary ||| register unary	count=1
module	and session and ||| python learn	count=1
arg	multi-task ||| decoder_inputs_dict enc_cell dec_cells_dict	count=1
class	the session ||| base debug wrapper session	count=1
function	append ||| append	count=1
class	sdcalinearregressor has valid ||| sdcalinear regressor test	count=1
module	s of [module_2] ||| [module_1] [module_2]	count=1
function	a device function to ||| replica device	count=1
function	convert a list of ||| from rich line list	count=1
function	shapes and moments ||| shapes	count=1
function	step true positives for ||| sparse true positive	count=1
function_arg	[function_1] estimator to ||| [function_1] [arg_2]	count=1
module	a transform [module_2] ||| [module_1] [module_2]	count=3
function	trigger [function_2] ||| [function_1] [function_2]	count=2
function	gradient for the ||| grad grad	count=1
module	run the ||| python	count=1
function	adds a log loss ||| log loss	count=1
function	use a watch_fn ||| dumping with watch fn	count=1
class	registry in a ||| summary plugin asset	count=1
arg	would feed dict ||| x y batch_size num_epochs	count=1
function_arg	[function_1] for f ||| [arg_2] [function_1]	count=1
function	a rank irfft ||| length for irfft	count=1
function	report [function_2] ||| [function_2] [function_1]	count=1
class	this operator ||| operator identity	count=1
function	callable that runs a ||| callable	count=1
arg	a file with given ||| filename	count=1
class	multiple output ||| export output	count=1
function	for "op" ||| get gradient	count=1
function_arg	[function_1] tensor "t" ||| [arg_2] [function_1]	count=2
class	[class_1] was opened ||| [class_1] [class_2]	count=3
function	gradients for the ||| grad	count=1
class	of elements ||| sparse	count=1
module	of ||| python debug cli	count=2
function	computes [function_2] ||| [function_1] [function_2] shape input_shape	count=1
class	multivariate normal distribution on ||| multivariate normal diag plus	count=1
function	scaled noise from ||| scaled noise	count=2
class	get a menuitem ||| menu	count=1
function	state [function_2] ||| [function_1] [function_2]	count=3
function	from csv file with ||| csv with	count=1
module	don't have a ||| tools compatibility	count=1
function	variance of a tensor ||| var	count=1
arg	padding and convolving ||| len_tensor	count=1
class	the queue ||| queue	count=1
function	using parameter hashing ||| scattered	count=3
class	optimizer ||| optimizer	count=13
class	whether eventaccumulator contains ||| mocking event accumulator	count=1
function	audio clips ||| audio	count=1
arg	run output_dict tensors ||| output_dict feed_dict	count=1
function	with ||| test watching variable update	count=1
module	of ||| layers python ops	count=1
module	embedding projector ||| projector	count=1
arg	functional interface for the ||| inputs filters kernel_size strides	count=1
function	binary ||| binary input fn	count=1
function	a head ||| head	count=2
arg	a multiple of n ||| n	count=2
class	laplace ||| laplace	count=1
function	product of ||| reduce prod	count=1
arg	and g1 ||| g1 name	count=1
module	fetch and ||| client	count=1
function	[function_1] of indices ||| [function_2] to string table [function_1]	count=2
function	per step true ||| streaming sparse true	count=1
function	args belong to the ||| graphs	count=1
function	underlying node ||| node	count=2
function_arg	a doc [arg_2] ||| [arg_2] [function_1]	count=1
arg	a logdir ||| logdir	count=1
function	_get_sparse_tensors() for input ||| get sparse tensors one input	count=1
function_arg	[function_1] this op ||| [arg_2] [function_1]	count=5
function	prints ||| print	count=1
class	for proper shape ||| dirichlet	count=1
module	variable of the same ||| keras	count=2
module	the layer's ||| contrib keras python keras engine	count=1
arg	+ biases ||| biases name	count=4
class	phased ||| phased	count=1
class	handler ||| handler	count=4
arg	a microbenchmark to ||| target iters	count=2
function	a non-negative [function_2] ||| [function_2] [function_1]	count=2
arg	unnormalized ||| inputs tag_indices sequence_lengths transition_params	count=1
function	[function_1] shear of ||| [function_2] [function_1]	count=2
function	calculates false ||| sparse false	count=1
module	a mapping of ||| python ops	count=1
function	placeholder ||| placeholder	count=8
function_arg	dense tensor ||| dense tensor	count=1
function	value of the image ||| image	count=1
function	different dim0 sizes ||| illegal batch different dim0sizes	count=1
module	this is a ||| python framework	count=2
module	a 1 ||| python ops distributions	count=1
function	for node-status ||| node status label	count=1
function	registered ||| registered	count=1
class	test ||| avg test	count=2
module	a bijector ||| ops bijectors	count=1
function	objects from signatures ||| signatures	count=1
arg	times ||| name	count=1
module	2 inputs of ||| ops	count=2
function	decoding ||| decoder	count=2
function	shape for ||| shape	count=1
function	parses a ||| parse readable	count=1
function	return the size ||| size	count=1
arg	an rnn [arg_2] ||| [arg_1] [arg_2]	count=1
function	[function_1] [function_2] ||| python feature_column check [function_1] [function_2]	count=4
function	replaces a matmul node ||| mat mul node	count=1
function	this ||| resource	count=1
function	sparse ||| optimizer sparse	count=1
arg	distances to nearest ||| steps	count=1
class	that the decoder can ||| decoder	count=1
function_arg	line in [arg_2] ||| [function_1] [arg_2]	count=1
function	input ||| get input	count=3
module	all the element in ||| contrib graph_editor	count=1
function	copy to an ||| copy	count=1
arg	generator ||| generator	count=1
function	multivariate digamma function psi_p ||| digamma	count=1
module	a step of ||| contrib seq2seq python ops	count=1
arg	[arg_1] in queue ||| [arg_2] [arg_1]	count=2
function	prepare the [function_2] ||| [function_1] [function_2]	count=2
function	from the partition ||| partition	count=1
module	re-implementation [module_1] [module_2] ||| [module_2] [module_1] batch normalization test tf	count=4
class	these ||| variable store	count=1
function_arg	stochastic [arg_2] ||| [function_1] nodes [arg_2]	count=1
function	[function_1] edges related ||| [function_1] [function_2]	count=4
function_arg	conv layer [arg_2] ||| [arg_2] [function_1]	count=1
arg	to observe screen ||| direction line_index	count=1
function	cluster spec ||| cluster spec	count=1
arg	the estimated size of ||| print_info	count=1
arg	range(0 rank x ||| x	count=1
function	dictionary and return ||| fit transform	count=1
function	the outputs ||| outputs	count=3
module	rnn ||| learn python learn ops	count=1
module	the ||| python framework	count=12
function	example proto ||| example	count=1
module	constructor of the ||| python debug wrappers	count=2
function	[function_1] 2d ||| [function_1] [function_2]	count=3
arg	parameters loc and scale ||| loc scale	count=1
module	of tensors that summarize ||| python ops	count=1
arg	suitable summary ||| tag	count=1
function_arg	paths from [arg_2] ||| [function_1] [arg_2]	count=1
function	when all arguments are ||| all arguments	count=3
function	locate a [function_2] ||| [function_2] [function_1]	count=1
arg	of base_type ||| base_type	count=1
function_arg	cond [arg_2] ||| [function_1] [arg_2]	count=1
function	true positives for ||| true positive at	count=2
function	to a numpy matrix ||| matrix	count=1
module	of 1 ||| ops	count=1
arg	up the feeds and ||| feeds	count=1
function	json and writes it ||| json	count=1
class	with ||| decoder test	count=1
function	to recursively apply ||| recursive apply	count=1
function	[function_1] relative timestamp ||| [function_1] [function_2]	count=1
function	to file in ||| to file	count=2
module	creates a cross-entropy loss ||| python ops losses	count=1
class	check ||| upgrade files	count=2
function	[function_1] given boundary ||| [function_1] [function_2]	count=3
function	captured variables by ||| extra vars	count=1
arg	a ||| name index	count=1
function	color ramp rgb image ||| color ramp	count=1
function	creates a classification ||| classification	count=1
module	file to ||| summary	count=1
module	rank-2 tensor ||| solvers python	count=1
module	cross-entropy loss using ||| python losses	count=1
function	finite gradients at interesting ||| finite gradient	count=1
class	tensor for the ||| lazy	count=1
arg	tensor ||| tensor np_printoptions offset	count=1
function	kind name ||| get kind name	count=2
module	the default ||| python	count=2
function	checks ||| check properties	count=2
function_arg	[function_1] region ||| [function_1] crop image [arg_2]	count=2
function	[function_1] a checkpoint ||| [function_1] [function_2]	count=5
class	of ||| curses ui	count=2
function	a link for ||| link	count=2
class	enqueue op in ||| runner	count=1
arg	hdf5 file ||| filepath overwrite	count=1
class	handler with ||| item handler	count=1
function	the broadcasted static shape ||| broadcast static shape	count=1
function_arg	shape is [arg_2] ||| [arg_2] [function_1]	count=1
function	to a labeledtensor ||| labeled tensor	count=1
arg	along the specified axes ||| axes	count=1
function	contrib op library from ||| op library	count=1
module	the outputs [module_2] ||| [module_2] [module_1]	count=1
module	run the cell ||| contrib rnn python ops	count=1
function	[function_1] v1 ||| [function_1] [function_2]	count=3
function	computes the [function_2] ||| [function_1] [function_2]	count=2
function	retrieves the input ||| get input	count=2
function	rank ||| with rank at least	count=1
function	instantiates an all-ones ||| ones like	count=1
function	returns ||| get model dir	count=1
function	all the ||| from	count=1
function	tensors if defined ||| tensors	count=1
arg	n [arg_2] ||| [arg_2] [arg_1]	count=4
function	wrap a call to ||| maybe wrap	count=1
function	returns a list ||| list	count=1
function	prune non-control ||| prune non control	count=1
class	factorization [class_2] ||| [class_2] [class_1]	count=2
module	of the default ||| python ops	count=4
module	models that use ||| contrib learn python learn estimators	count=1
function	test_ops cc ||| version applies to op construction	count=1
function	variables ||| vars	count=1
class	multivariate normal distribution on ||| multivariate normal diag plus low rank	count=1
module	cell output ||| contrib rnn python ops	count=1
module_class	[module_1] [class_2] ||| [module_1] base [class_2]	count=1
function	the resultant of an ||| compute elemwise op output	count=1
class	for every loop invariant ||| while context	count=1
function_arg	sum across [arg_2] ||| [arg_2] [function_1]	count=1
module	columns in the ||| python	count=1
function	average pooling result ||| avg pool result	count=2
module	batch version of ||| distributions python	count=1
function	and no ||| classification6	count=1
function	that initializes all ||| initialize all	count=2
module	previous ||| contrib grid_rnn	count=1
arg	a categoricalprocessor instance ||| min_frequency share vocabularies	count=1
function	run ||| cli for run	count=1
arg	constructs ||| dtype reparameterization_type	count=1
function	kl for ||| compute non batch kl	count=1
class	for debug tensor ||| debug	count=1
function_arg	[function_1] sgv0 ||| [function_1] [arg_2]	count=3
class	compares ||| event accumulator test	count=1
function	and file ||| file	count=1
function	all the tensors linked ||| regex	count=1
function	[function_1] back ||| [function_1] [function_2]	count=2
function_arg	the sparseadd [arg_2] ||| [arg_2] [function_1]	count=1
function	returns -grad ||| erfc grad	count=1
function	a file to ||| file to	count=2
module	indexies ||| contrib learn python	count=1
function	resultant ||| compute elemwise op	count=1
function	statistics for a given ||| stat	count=1
function	-> _guideref from the ||| build guide	count=1
function	into pil ||| img	count=1
arg	common code [arg_2] ||| [arg_2] [arg_1]	count=1
arg	a first-in first-out ||| capacity types shapes names	count=1
class	the glimpse extraction kernel ||| extract glimpse	count=1
function	docstring and return a ||| docstring	count=1
function	training with ||| train with weights	count=2
function	rank irfft ||| for irfft	count=1
function	find [function] create ||| [function] make	count=1
function	[function_1] for ||| [function_2] [function_1]	count=14
arg	in given output ||| output_dir dictionary	count=1
arg	and interval values ||| values	count=1
function	the end of ||| on batch end	count=1
function	[function_1] gradients at ||| [function_2] [function_1]	count=2
function_arg	names in [arg_2] ||| [function_1] [arg_2]	count=1
function	constructs the ||| init	count=1
function	[function_1] zoom ||| [function_2] [function_1]	count=2
function	current ||| get	count=2
arg	input image ||| image	count=1
class	an lstm cell ||| lstmcell	count=2
function	build a ||| build standardized	count=1
function_arg	[function_1] [arg_2] ||| [function_1] proto [arg_2]	count=9
function	[function] resourcevariable responsible ||| [function] variable	count=1
function	dict symbol name -> ||| guide index	count=1
function	shape values ||| maybe	count=1
function_arg	automatically [function_1] [arg_2] textbox ||| [function_1] [arg_2]	count=2
class	fill ||| bounding box op test	count=1
function	sparsetensors from ||| sparse from	count=2
function	constructs a tf graph ||| inference graph	count=1
function	model function ||| model fn	count=6
function	the [function_2] ||| [function_2] [function_1]	count=3
class	event file ||| writer	count=2
arg	a checkpoint in checkpoint_dir ||| checkpoint_dir master scaffold	count=1
function	in the collection with ||| to collection	count=1
function	starts a thread ||| start reloading	count=1
arg	a and b have ||| a b	count=1
function	resnet-152 model of ||| 152	count=1
arg	parent ||| parent	count=1
module	of ||| contrib factorization python ops	count=17
class	will ||| slices	count=1
class	initializes a dnnestimator ||| dnnestimator	count=1
arg	that specifies the default ||| device_name_or_function	count=1
arg	sparsedensecwise{mul div} ||| is_mul	count=1
function	possible input ||| input	count=1
arg	until a ||| last_checkpoint seconds_to_sleep timeout	count=1
function	weight values ||| weights	count=1
function	[function_1] functions ||| [function_2] [function_1]	count=3
function_arg	wrap a [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] specified bounding ||| [function_2] [function_1]	count=1
class	tensor based on ||| stochastic tensor	count=1
module	name of the ||| framework	count=1
function	menuitem from ||| caption to item	count=1
arg	second-order gradients of ||| input_sizes output_sizes window_rows	count=1
arg	[arg_1] tensor of ||| [arg_2] [arg_1]	count=2
arg	specified min ||| clip_value_min clip_value_max	count=1
function	[function_1] urls for ||| [function_1] [function_2]	count=1
arg	initialize the parameters for ||| use_peepholes initializer num_proj	count=1
function	specific plugin asset from ||| retrieve plugin asset	count=1
function	latest event ||| latest event	count=1
function	ops to save ||| sharded save ops	count=2
function	load a tensor ||| load tensor	count=2
arg	the parameters for ||| num_units input_size use_peepholes	count=1
module	the mnist model ||| contrib factorization examples	count=2
function_arg	[function_1] conv ||| [arg_2] [function_1]	count=1
function	applies node renames ||| node renames	count=1
function	the string name ||| name	count=2
arg	mode in ||| mode	count=1
function	[function_1] objects ||| [function_1] [function_2]	count=4
function	tensors are ||| are tensors	count=1
module	the sense of tensors ||| contrib linalg python ops	count=2
class	value should be ||| value type	count=1
function	validates a file ||| validate file	count=2
class	diag ||| matrix diag transform	count=1
function_arg	hook [arg_2] ||| [function_1] [arg_2]	count=2
function	string representing ||| str	count=1
arg	given tensors ||| step tensors feed_dict	count=1
function	that initializes ||| initialize	count=1
function	walsfactorization estimator ||| wals factorization	count=1
arg	given table ||| table	count=1
function	a random rotation of ||| random rotation	count=1
function	sequence of ||| texts to	count=1
arg	tensor x along axis ||| x axis	count=1
function	check whether ||| is	count=1
function	conv2d produce the ||| compare fwd conv2d	count=1
function	python file ||| file	count=1
class	the grad context ||| grad loop	count=1
function	a lookup table ||| table	count=1
function	features ||| features perfectly	count=1
module	previous ||| contrib grid_rnn python ops	count=2
function	batched kl divergence ||| kl	count=2
function	return ||| fit	count=1
arg	a summarysaverhook ||| save_steps save_secs output_dir summary_writer	count=1
arg	a queue to create ||| capacity	count=1
module	values will be produced ||| python framework	count=1
function	[function_1] initialization flag ||| [function_1] [function_2]	count=4
function	return a slot named ||| get slot	count=1
function	inputs of ||| inputs	count=8
function	summarize parameters ||| tf	count=1
module	layer ||| layers	count=1
class	and ||| processor	count=1
class	merge ||| hooked session	count=1
function	updates the [function_2] ||| [function_2] [function_1]	count=1
arg	the op ||| op	count=1
class	function corresponding ||| func	count=1
function	the weight [function_2] ||| [function_2] [function_1]	count=3
function	pearson [function_2] ||| [function_2] [function_1]	count=2
arg	parameters for ||| num_units input_size use_peepholes	count=1
function	tensor watch keys ||| debug watch keys	count=2
function	count the total number ||| count params	count=1
function	load session ||| load session	count=1
class	predictions ||| sdcalogistic classifier	count=1
class	names of the stepper ||| stepper	count=1
function	the kind ||| kind	count=1
function_arg	error between [arg_2] ||| [function_1] [arg_2]	count=8
module	which gets ||| contrib distributions python ops	count=1
module	which properly compares ||| distributions	count=1
class	then return tensor version ||| multinomial	count=1
arg	[arg_1] e g ||| [arg_2] [arg_1]	count=3
function	all the tensors ||| filter ts from	count=1
module	indexies ||| learn	count=2
arg	input-output pairs ||| ksizes strides rates	count=1
module	of ||| keras python keras preprocessing	count=2
function	don't ||| test	count=1
function	per step true positives ||| streaming sparse true positive at	count=1
function	a tensorflow graph with ||| graph with	count=1
function	that makes [function_2] ||| [function_1] [function_2]	count=2
module	a ||| python training	count=2
arg	from job_name ||| job_name replica_count feeder_task_num replicas_per_feeder	count=1
module	the embedding projector ||| contrib tensorboard plugins projector	count=1
function	the optimal [function_2] ||| [function_1] step [function_2]	count=4
module	transforms each ||| keras python	count=1
function	to restore ||| restore	count=2
module	sum of ||| contrib factorization python ops	count=1
module	number ||| python losses	count=1
module	return ||| learn python	count=1
function	[function_1] [function_2] ||| [function_1] two [function_2]	count=12
function	generates test ||| get test	count=1
function	vs ||| vs gru cell	count=2
arg	for precision@k ||| predictions_idx k class_id	count=1
function	the debug [function_2] ||| [function_2] [function_1]	count=1
arg	initialize an operatorpddiag ||| diag verify_pd name	count=1
class	make ||| upgrade files	count=2
function	-1/sqrt(1-x^2) ||| acos	count=1
module	serialized bigquerytablepartition messages ||| contrib cloud	count=1
arg	[arg_1] into num_shards ||| [arg_1] [arg_2]	count=3
arg	menuitem from the caption ||| caption	count=1
arg	respect to the labels ||| labels	count=2
module	the tensor ||| python ops	count=1
module	x + loc ||| python ops	count=1
module	from a rank-2 ||| contrib solvers python	count=1
arg	clips to writer ||| writer	count=1
module	is [module_1] [module_2] ||| [module_2] [module_1] assert	count=2
function	[function_1] names from ||| [function_2] [function_1]	count=4
module	of a ||| labeled_tensor python ops	count=2
module	for a tensor ||| ops	count=1
function	respect to sparse ||| sparse recall at top	count=1
arg	[arg_1] outputs ||| [arg_1] [arg_2]	count=1
function	output tensors of ||| outputs	count=1
module	tensor or list of ||| python ops	count=1
arg	from a cell_fn ||| cell_fn	count=1
module_class	ops [class_2] ||| [class_2] [module_1]	count=1
function	with at [function_2] ||| [function_2] [function_1]	count=3
function	the global ||| global	count=2
function	returns predictions ||| predict	count=3
function	set [function_2] ||| [function_1] [function_2]	count=6
module_class	[module_1] shape ||| [module_1] [class_2]	count=6
arg	from predictions and ||| predictions num_classes dtype	count=2
arg	input [arg] it ||| [arg]	count=1
module	s ||| keras engine	count=3
function	of tensor or indexedslices ||| n to tensor or indexed slices	count=1
function	to compute predictions by ||| predictions	count=1
function_arg	[function_1] "b" ||| [function_1] [arg_2]	count=2
class	create ||| multi rnncell	count=1
function	a menuitem from ||| caption	count=1
arg	activations from the rnn ||| activations	count=3
function	[function_1] [function_2] ||| [function_2] size [function_1]	count=4
class	an embedding of the ||| embedding	count=1
function	can save and ||| train save load	count=1
arg	its execution time ||| perm num_iters	count=1
function	log-odds ||| logits	count=5
function	the barrier ||| barrier	count=2
function	filter [function_2] ||| [function_1] [function_2] filterfn key	count=1
function	monitoredsession ||| monitored	count=1
arg	using class log-probabilities ||| logits	count=1
module	helper to __init__ which ||| contrib distributions python ops	count=1
class	don't have ||| test upgrade	count=1
function_arg	[function_1] holds ||| [arg_2] [function_1]	count=2
function	integer classes ||| build standardized signature	count=1
function	via a [function_2] ||| [function_1] [function_2]	count=2
arg	model over a ||| y sample_weight	count=1
function	tensor is [function_2] ||| [function_2] [function_1] x	count=1
function	index from ||| index	count=1
function	request a [function_2] ||| [function_1] [function_2]	count=1
function	flops for ops ||| get logged ops	count=1
function	predictions is [function_2] ||| [function_1] [function_2]	count=3
function	to a scalar sum ||| sum	count=1
class	without a softmax ||| model	count=1
class	mappers provided have ||| linear classifier	count=1
function	[function_1] place to ||| [function_1] [function_2]	count=2
function	projects ||| project	count=1
arg	initialize the parameters for ||| use_peepholes share_time_frequency_weights	count=1
function	presence ||| loop grads	count=1
module	of equations with ||| linalg python ops	count=1
arg	buffer to ||| global_step	count=1
module	dict of ||| python ops	count=1
function	of its scope ||| from scope	count=1
arg	src_dir ||| src_dir	count=1
module	with default ||| python learn	count=1
function	flattens inner ||| inner flatten	count=1
arg	show ||| nodestats pid is_gputrace	count=1
arg	given sensitivity ||| predictions labels sensitivity	count=1
function	as an int32 ||| event	count=2
arg	unneeded pairs of ||| old_graph	count=1
function	volume contained in a ||| resize volumes	count=1
function	[function_1] empty ||| [function_2] [function_1]	count=5
function	to read ||| read	count=4
function	nextiteration and ||| next and	count=1
module	with training ||| learn python learn estimators	count=1
function	scaled [function_2] ||| [function_1] [function_2]	count=3
function	of the domain of ||| domain	count=1
arg	given estimator to a ||| estimator	count=1
function	extraction [function_2] ||| [function_2] values [function_1]	count=4
function_arg	[function_1] datasetdataprovider ||| [arg_2] [function_1]	count=1
function	an accumulator for each ||| accumulator	count=1
class	[class_1] forcing ||| [class_2] [class_1]	count=1
arg	and m_prev with projected ||| m_prev with_c	count=1
function	for proper ||| maybe assert valid sample	count=1
function	cross entropy between ||| cross entropy with logits	count=1
function	computes the product of ||| reduce prod	count=1
function_arg	[function_1] runoptions ||| [arg_2] [function_1]	count=3
function	a new seed ||| gen new	count=1
function	the names [function_2] ||| [function_2] [function_1]	count=2
function	the state ||| state	count=5
arg	model to x y ||| x y	count=2
module	get a menuitem ||| python	count=1
module	used by the transformer ||| python layers	count=1
function	instantiates the inception v3 ||| inception v3	count=1
module	boolean ||| contrib labeled_tensor python ops	count=1
class	in the ||| graph	count=1
function	[function_1] external ||| [function_2] [function_1]	count=1
arg	processing a batch ||| batch	count=1
function	dropout given the ||| variational recurrent dropout	count=1
arg	[arg_1] elems ||| [arg_1] [arg_2]	count=4
class	history ||| history	count=2
function	outputs in place so ||| outputs make unique	count=1
module	a step of ||| seq2seq python ops	count=1
function	values added to ||| to	count=1
module	the core version with ||| learn python learn learn_io	count=1
function	of sparse_column_with_integerized_feature ||| sparse column integerized	count=1
function	[function_1] [function_2] ||| [function_1] histogram [function_2]	count=1
function	int32 [function_2] ||| [function_1] [function_2]	count=1
arg	the proto_type for collection_name ||| collection_name	count=1
module_class	[module_1] [class_2] ||| [module_1] op [class_2]	count=1
arg	to other ||| other	count=2
class	dnn ||| dnnlinear combined classifier	count=1
function	embedding lr multipliers to ||| extract embedding lr multipliers	count=1
arg	[arg_1] and dtype ||| [arg_2] [arg_1]	count=1
module	to a ||| training	count=1
function	for mini ||| mini	count=1
function	a categorical ||| categorical	count=1
class	a dict that ||| head	count=1
function_arg	[function_1] precision@k ||| [arg_2] [function_1]	count=8
function	labels ||| three labels	count=3
function	specific plugin [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] generated boxes ||| [function_2] [function_1]	count=2
module	self _value ||| contrib bayesflow	count=1
function	values then ||| maybe	count=1
function	op execution ||| op	count=1
function	[function_1] by sdcaoptimizer ||| linear_optimizer python head is [function_1] [function_2] head	count=1
function	of [function_2] ||| [function_2] [function_1]	count=3
module	matrix data ||| contrib learn python learn	count=1
function_arg	audio [arg_2] ||| [function_1] [arg_2]	count=1
module	sense of vector spaces ||| linalg	count=3
function	tensor for ||| get	count=1
module_class	s [class_2] ||| [class_2] [module_1]	count=6
arg	caption ||| caption	count=1
arg	[arg_1] and rate ||| [arg_2] [arg_1]	count=2
function	predict and predict_prob ||| predict	count=1
module	or output [module] op ||| [module]	count=1
function	files produced are gzip ||| gzip read	count=1
arg	value ||| value session	count=1
function	valued features ||| valued features perfectly	count=1
arg	class to implement interactive ||| node_stepper restore_variable_values_on_exit	count=1
class	batch of ||| next queued sequence batch	count=1
module	in stop_gradient ||| bayesflow	count=1
function	a linear operator ||| operator	count=1
module	returns predictions for ||| layers	count=1
function	tensor ||| get tensor	count=1
function	applies node renames ||| final node renames	count=1
function	model function for the ||| model function	count=1
class	initializes ||| state saving rnn estimator	count=1
function	of the weights ||| weights	count=1
class	with these ||| variable store	count=1
function	the root [function_2] ||| [function_1] [function_2]	count=12
module	boolean ||| python ops	count=1
class	page ||| class page info	count=1
module	tensor of a ||| distributions python ops	count=1
function	[function_1] a call ||| [function_2] [function_1]	count=1
module	variable ||| contrib keras python keras	count=3
function	[function_1] [function_2] ||| [function_1] bias [function_2]	count=2
class	be produced ||| indexed	count=1
function_arg	[function_1] predicted_ids ||| [function_1] [arg_2]	count=1
function	[function_1] static shape ||| [function_1] [function_2]	count=2
module	crf ||| python ops	count=1
module	tensors linked to ops ||| graph_editor	count=1
function	switch [function_2] ||| [function_2] [function_1]	count=2
function	stack of ||| stack	count=1
function_arg	filename for [arg_2] ||| [arg_2] [function_1]	count=3
function	when the kernel mappers ||| kernel mapper	count=1
function	is not compatible ||| is compatible	count=1
function_arg	flip [arg_2] ||| [function_1] left right [arg_2]	count=1
class	for node-status labels ||| node	count=1
function	generate a new seed ||| new	count=1
module_class	chief [class_2] ||| [module_1] chief [class_2]	count=2
module	a tensor ||| feature_column	count=1
module	on this ||| python	count=1
module	helper which ||| contrib distributions python kernel_tests	count=1
function	[function_1] indices ||| [function_1] [function_2]	count=9
module	of integers ||| keras python keras	count=1
arg	[arg_1] and scale ||| [arg_1] [arg_2]	count=3
module	return ||| preprocessing	count=1
arg	an image by ||| image	count=1
function	is replicable with ||| replicable	count=2
module	randomly ||| python ops	count=1
function	a new input ||| input	count=1
module	generate ||| tools docs	count=1
class	the queue when ||| queue runner	count=1
arg	constructs ||| reparameterization_type validate_args	count=1
function	the values from a ||| values from	count=1
function_arg	[function_1] file is ||| [function_1] [arg_2]	count=3
module	the sense of tensors ||| linalg python	count=2
module	the serving ||| python	count=1
function	to use based ||| get string to hash bucket	count=1
module	new ||| learn python learn	count=1
function	both dense [function_2] ||| [function_2] [function_1]	count=1
module	all are ||| python	count=1
module	names ||| learn dataframe	count=1
arg	if value_or_tensor_or_var has a ||| value_or_tensor_or_var	count=1
function	[function_1] l2 regularization ||| [function_1] with [function_2]	count=6
function_arg	[function_1] side_effects for ||| [function_1] tensor [arg_2]	count=1
function	for node-status labels ||| status label	count=1
function	load() ||| load	count=1
function_arg	observations [arg_2] ||| [arg_2] [function_1]	count=2
function	get a menuitem from ||| item	count=1
function	loss [function_2] ||| [function_2] [function_1] by	count=1
function	max [function_2] ||| [function_1] [function_2]	count=11
module	switch ||| python ops	count=1
module	lists to tuples of ||| ops	count=1
function	discards expired events ||| discards expired events	count=3
function	[function_1] weighted ||| [function_2] [function_1]	count=3
function	a single sparsetensor ||| sparse merge	count=1
function	and names that will ||| and	count=1
function	that a model_fn ||| model fn ops	count=1
arg	of sequences ||| sequences mode	count=1
class	with these parameters ||| variable store	count=1
function	[function_1] standard ||| [function_1] [function_2]	count=1
function	an embedding [function_2] ||| [function_2] [function_1]	count=5
function	[function_1] relative error ||| [function_1] [function_2]	count=4
function_arg	[function_1] input data ||| [function_1] [arg_2]	count=5
module	scroll ||| python debug cli	count=1
function	[function_1] full covariance ||| [function_1] [function_2]	count=1
arg	a microbenchmark to measure ||| size iters	count=1
arg	[arg_1] a sparsetensor ||| [arg_2] [arg_1]	count=2
arg	d1 and [arg_2] ||| [arg_2] [arg_1]	count=1
function	a dict containing ||| dict	count=1
module	tensorshape representing [module_2] ||| [module_1] [module_2]	count=1
function	we can disable centered ||| disable centered	count=4
function	with integer weights ||| with integer weighted	count=1
function	applies inverse [function_2] ||| [function_2] [function_1]	count=1
function	average pool ||| avg pool	count=4
class	tensor ||| debug analyzer	count=1
function_arg	[function_1] expected_shape ||| [arg_2] [function_1]	count=1
function	[function_1] difference loss ||| [function_2] [function_1]	count=3
function	save and reload a ||| save load	count=1
arg	calculates how often predictions ||| predictions	count=1
function	weights ||| get weights	count=1
module_class	[module_1] underlying barrier ||| [module_1] ops [class_2]	count=1
module	slice ||| python training	count=1
function	lists the names ||| list	count=1
function	applies inverse time ||| inverse time	count=2
function_arg	[function_1] sequence model ||| [function_1] [arg_2]	count=1
function	of predictions with respect ||| precision at top	count=3
arg	for given tensors ||| tensors	count=1
function	to a sequence ||| sequence	count=2
function	of input and ||| from input and	count=2
module	store as self _value ||| bayesflow	count=1
arg	from thumbnails and ||| thumbnails thumbnail_dim	count=1
class	tensorarray ||| tensor array	count=6
arg	[arg_1] and values ||| [arg_1] [arg_2]	count=1
function	and stores trace information ||| store trace	count=1
function_arg	average [arg_2] ||| [function_1] [arg_2]	count=2
module_class	[module_1] drawing ||| [module_1] [class_2]	count=4
function_arg	name of [arg_2] ||| [function_1] or parent names [arg_2]	count=1
function	tensor to use ||| data tensor or dict	count=1
module_class	partitioned [class_2] ||| [module_1] partitioned [class_2]	count=2
class	called ||| run hook	count=2
class	[class_1] stepper ||| [class_2] [class_1]	count=1
arg	of targets ||| targets	count=1
module	a ||| contrib keras python keras	count=1
arg	and [arg_2] ||| [arg_2] [arg_1]	count=3
module_class	[module_1] [class_2] ||| [module_1] partitioned [class_2]	count=2
function	collections used ||| get all collection keys	count=1
function	indexies of ||| fit	count=1
arg	the spec ||| spec inputs	count=1
function_arg	[function_1] input and ||| [arg_2] [function_1]	count=3
function_arg	parameters [arg_2] ||| [function_1] loss loss [arg_2]	count=1
arg	state saving sequence ||| cell features labels mode	count=1
function	a header ||| header from ops and	count=1
function	to be integrated ||| can created before minimize called	count=1
function	for a merge op ||| merge	count=1
arg	checkpoint in checkpoint_dir ||| checkpoint_dir master scaffold	count=1
function	[function_1] with weights ||| [function_1] [function_2]	count=5
function	occurs in graph ||| debugging during op	count=1
function	global variables ||| global variables	count=3
class	from the directory ||| debug dump dir	count=1
arg	target ||| target from_logits	count=1
arg	a specified min ||| t clip_value_min clip_value_max name	count=1
function	calculates true positives ||| sparse true positive at k	count=1
function	[function_1] from caller ||| [function_2] [function_1]	count=1
function	appropriate for serving ||| serving input fn	count=1
function	runs from [function_2] ||| [function_1] [function_2]	count=3
arg	kernellinearclassifier ||| n_classes	count=1
function	tall output ||| tall output end	count=1
class	the base feature for ||| feature	count=1
arg	path and ||| path options	count=1
function	and flops for ops ||| logged ops	count=1
function	a get request ||| get	count=1
function	tags after calling reload ||| test reload	count=1
function	sqrt s ||| sqrt	count=1
function_arg	absolute error [arg_2] ||| [function_1] [arg_2]	count=3
arg	new ||| name shape	count=1
class	tests ||| vdvtupdate test	count=1
function_arg	[function_1] new_export_strategies ||| [arg_2] [function_1]	count=3
module	merge ||| python ops	count=1
arg	computes the recall@k of ||| k weights	count=1
module	same as the ||| python learn estimators	count=3
function	op to use ||| get string to	count=1
module	tensor s of ||| keras engine	count=6
function	train [function_2] ||| [function_2] [function_1]	count=2
function	a string of status ||| status	count=1
function	returns ||| hooks	count=1
arg	based on given feature_columns ||| features feature_columns weight_collections trainable	count=1
function	header for use ||| header from ops and kernels	count=1
arg	constructs ||| dtype reparameterization_type validate_args allow_nan_stats	count=1
class	the while loop ||| grad loop	count=1
module	tests that [module] ||| [module]	count=2
function	of integers ||| to sequences	count=1
class	by this operator ||| operator	count=2
function	initializer and ||| initializer	count=1
function	with dynamic ||| vector to matrix dynamic	count=1
function_arg	strategies [arg_2] ||| [arg_2] [function_1]	count=1
module	scalar ||| python framework	count=2
function	param to init ||| init	count=1
function	a sprite image from ||| sprite image	count=1
function	[function_1] noise from ||| [function_1] [function_2]	count=2
function	a rank irfft ||| fft length for irfft	count=1
class	worker session ||| worker session	count=1
function	shape a ||| shape	count=1
function	placeholder for the ||| placeholder	count=2
module	the vocabulary dictionary ||| learn python learn preprocessing	count=1
arg	two numpy arrays or ||| a b	count=1
function	foldl on the list ||| foldl	count=1
function_arg	given [arg_2] ||| [function_1] [arg_2]	count=1
function	a postfix ||| spec structure	count=1
function	[function_1] with as_iterable=false ||| [function_1] [function_2]	count=2
module	tensors linked to ||| contrib	count=1
function	output mask ||| get output mask	count=2
module	the image ||| contrib keras python keras preprocessing	count=1
function	information for [function_2] ||| [function_2] [function_1]	count=1
function	returns the number of ||| size	count=1
class	[class_1] weight ||| [class_2] [class_1]	count=1
arg	[arg_1] stddev loc ||| [arg_2] scale validate_args [arg_1]	count=1
function	string_to_hash_bucket op to ||| get string to	count=1
module	mapping of ||| ops	count=1
function	conv2d produce ||| compare fwd conv2d	count=1
module	shape values then return ||| python	count=1
function	along ||| along	count=4
module	starting and stopping ||| python slim	count=1
function	false positives for ||| streaming sparse false positive	count=1
function	test phase ||| test phase	count=2
module	variable and returns ||| keras python keras	count=1
function	batch of samples ||| batch	count=4
function_arg	file names [arg_2] ||| [arg_2] [function_1]	count=1
function	inputs are satisfied ||| satisfied	count=1
class	a queue ||| queue	count=2
function	return dict ||| build	count=1
class	created by this linearoperator ||| linear operator	count=1
class	within [class] filtering ||| [class]	count=1
function	variable and ||| variable	count=2
arg	bias away from ||| bias	count=1
class	the input [class_2] ||| [class_1] [class_2]	count=3
module	the default keras ||| python keras	count=1
function	the python traceback of ||| traceback	count=1
function	rank in ||| tensor rank	count=2
module_class	[module_1] bernoulli ||| [module_1] kernel_tests relaxed [class_2]	count=1
function	pool along [function_2] ||| [function_1] [function_2]	count=6
function	importance sampling with a ||| importance	count=1
function	graph, returns [function_2] ||| [function_1] [function_2]	count=1
module	latest ||| python framework	count=2
class	providing access ||| queueing state saver	count=1
class	svtimercheckpointthread ||| svtimer checkpoint thread	count=2
module	node-status labels ||| cli	count=1
module	create a sequence-to-sequence ||| legacy_seq2seq python	count=1
function	list ||| from rich line list	count=1
module	the ||| contrib linear_optimizer python	count=1
function	batch length of ||| batch length	count=2
function_arg	a sum metric ||| streaming sum scalar_tensor	count=1
function	implies [function_2] ||| [function_2] [function_1]	count=2
arg	holds ||| data summarize message	count=2
function_arg	[function_1] [arg_2] ||| [function_1] nodes [arg_2]	count=4
arg	builder based on featurecolumns ||| feature_columns num_outputs weight_collections	count=1
function	help information for ||| get help for	count=2
function	reads the savedmodel ||| read	count=1
class	directory ||| debug dump dir	count=2
function	[function_1] state names ||| [function_2] [function_1]	count=1
arg	devicewrapper for cell with ||| cell	count=1
arg	x and [arg_2] ||| [arg_2] [arg_1]	count=1
function	and returns prediction ops ||| get predict ops	count=2
function	end of training/evaluation ||| end	count=1
class	construct student's t ||| student t	count=2
arg	[arg_1] of side_effects ||| [arg_2] [arg_1]	count=2
arg	word-id matrix ||| raw_documents	count=1
module	simple ||| python kernel_tests	count=1
function	check the ||| check dimensions	count=1
function	values ||| values	count=20
function	[function_1] name ||| [function_2] [function_1]	count=15
arg	the recall@k [arg_2] ||| [arg_2] [arg_1]	count=4
class	vocabulary ||| categorical	count=1
function	-grad * ||| erfc grad	count=1
function	[function_1] convolutions actually ||| [function_2] [function_1]	count=8
function	creates a hook ||| make session run hook	count=1
function	for ||| collection proto	count=1
module	and return indexies of ||| preprocessing	count=1
module	to this input ||| framework	count=1
function	cast ||| cast	count=1
module	a batch of ||| seq2seq python ops	count=1
arg	registers [arg] ||| [arg]	count=3
function	add update op ||| add update	count=2
module	prints ||| keras utils	count=1
function	sequence of ||| embed sequence	count=1
class	id ||| crossed column	count=1
class	get ||| node stepper	count=3
module	the sequence-to-sequence model ||| legacy_seq2seq python	count=2
module	server ||| python training	count=2
class	hook ||| sync replicas optimizer hook	count=1
function	description of [function_2] ||| [function_2] [function_1]	count=2
class	sure ||| upgrade files	count=2
function	read ||| tf	count=1
function	training [function_2] ||| [function_2] [function_1]	count=27
class	for node-status labels ||| stepper	count=1
module	distributed ||| contrib specs	count=1
function	[function_1] definite ||| [function_1] [function_2]	count=1
module	get ||| python ops	count=2
module	output ||| python ops	count=1
function	the given boundary ||| boundary	count=1
module	returns only the ||| contrib ndlstm python	count=1
arg	command handler for node_info ||| args screen_info	count=1
arg	or fn2() based on ||| fn1 fn2	count=1
function_arg	sets the value ||| set epsilon value	count=1
arg	options ||| options	count=1
function	minimum ||| minimum	count=1
function	estimator using the training ||| train	count=1
function	the control flow ||| control flow	count=1
class	registered ||| registry	count=3
function	[function_1] layer ||| [function_1] [function_2]	count=4
arg	[arg_1] values tensors ||| [arg_1] [arg_2]	count=1
function	for maybe ||| maybe	count=1
class	produces values as an ||| indexed slices	count=1
class	to one ||| one	count=1
arg	[arg_1] dimension dim ||| [arg_1] [arg_2]	count=1
class	for ||| class	count=1
function	the variables ||| convert variables to	count=1
function	sqrt_solve ||| sqrt solve	count=2
function	implies a ||| from	count=1
function_arg	[function_1] [arg_2] ||| [function_1] to flat end [arg_2]	count=6
arg	to newpath ||| newpath	count=1
arg	[arg_1] [arg_2] ||| [arg_2] side_effects [arg_1]	count=48
function	diagonal ||| diag	count=2
function	of the feed ||| last feed	count=1
arg	finds the filename of ||| checkpoint_dir latest_filename	count=1
function	manager for overriding ||| override	count=1
arg	report the results ||| sess op_or_tensor feed_dict burn_iters	count=1
function	render the rich ||| render	count=1
arg	maps activations ||| activations labels sequence_length target_column	count=3
function	services for 'sess' ||| services	count=1
function_arg	export [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] format ||| [function_1] [function_2]	count=1
function	function with support ||| fn	count=1
function_arg	[function_1] a logdir ||| [arg_2] [function_1]	count=3
function_arg	[function_1] the new_export_strategies ||| [function_1] [arg_2]	count=3
function	[function_1] the sum ||| [function_2] [function_1]	count=6
function	runoptions [function_2] ||| [function_2] [function_1]	count=11
function	[function_1] model variable ||| [function_2] [function_1]	count=1
function	the signaturedef ||| graph def	count=1
function	op to use based ||| string to hash	count=1
function	for second test function ||| test function with args kwargs	count=1
module	number of dimensions ||| ops	count=3
function	max ||| max	count=10
function	the provided head is [function_1] [function_2] ||| linear_optimizer python head is [function_1] [function_2] head	count=2
arg	with the given dtype ||| dtype num_shards	count=1
function	from a ||| from visitor	count=1
class	of the file ||| file	count=1
arg	input_fn ||| input_fn	count=1
module	of a debug ||| python debug	count=1
arg	using a merge op ||| op	count=1
class	tensor based on the ||| tensor	count=1
function	of a bucketized ||| bucketized	count=1
function_arg	[function_1] inclusion in ||| [arg_2] [function_1]	count=2
arg	for a func ||| func	count=1
function	boots 3 servers ||| cluster spec propagation three servers one cluster	count=1
function	model_fn can return ||| model fn ops	count=1
module	and previous ||| contrib grid_rnn python ops	count=1
function	[function_1] inputs to ||| [function_1] [function_2]	count=5
class	metadata for ||| metadata	count=1
function	variable or ||| set variable or	count=2
function	relative ||| relative	count=2
module	normally distributed ||| specs	count=1
module	a 1 outcome (vs ||| python ops	count=1
module	needed ||| python ops	count=1
function_arg	sparse [arg_2] ||| [function_1] duplicate indices [arg_2]	count=2
arg	of a subgraph view ||| sgv control_inputs	count=1
class	hook ||| replicas optimizer hook	count=1
function	gets metagraphdef ||| get meta graph def	count=1
function	ordering ||| ordering	count=1
function	end of ||| batch end	count=1
arg	for threads to terminate ||| threads stop_grace_period_secs ignore_live_threads	count=1
class	metadata ||| metadata	count=2
module	a mapping of name ||| contrib framework python ops	count=1
class	and return ||| categorical	count=1
function	[function_1] default_value ||| [function_2] [function_1]	count=1
module	for this ||| python ops	count=1
module	command prefix but invalid ||| python debug cli	count=1
arg	if reduction_indices is none ||| axis reduction_indices	count=1
function	serializable version of ||| def	count=1
function_arg	[function_1] values is ||| [arg_2] [function_1]	count=1
module	this cell output dimension ||| contrib rnn python ops	count=1
function_arg	stochastic [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	[function_1] tensor ||| [arg_2] [function_1]	count=20
function	[function_1] labels into ||| [function_1] [function_2]	count=1
function	calculate padding required ||| required	count=1
module	and runs a ||| python learn	count=1
function	[function_1] [function_2] ||| [function_1] int [function_2]	count=8
function	with dynamic ||| dynamic	count=2
arg	value to variable's ||| value session	count=1
function_arg	rank rfft [arg_2] ||| [arg_2] [function_1]	count=1
arg	old_str ||| old_str	count=1
arg	representation of ||| dictionary	count=1
class	create ops to ||| base saver builder	count=1
module_class	[module_1] lstm cell ||| [module_1] [class_2]	count=4
module	runge-kutta ||| contrib integrate python	count=1
function	if this operator ||| operator	count=1
function	[function_1] sparse ||| [function_2] [function_1]	count=18
class	to make ||| upgrade	count=1
function	array indices for ||| array index	count=1
class	a failedpreconditionerror ||| failed precondition error	count=1
function_arg	kind name [arg_2] ||| [arg_2] [function_1]	count=1
arg	[arg_1] [arg_2] ||| c_prev [arg_1] [arg_2]	count=3
module	dummy method to ||| ops	count=1
module	for labeled tensors ||| contrib labeled_tensor python	count=2
function	op to ||| apply op	count=1
function	find latest event ||| latest event	count=2
arg	a dynamicrnnestimator ||| problem_type prediction_type sequence_feature_columns context_feature_columns	count=1
function	[function_1] is ||| [function_1] [function_2]	count=4
arg	a _kernelestimator object ||| feature_columns model_dir weight_column_name head	count=1
function	the number ||| size	count=6
class	the optimizer from ||| optimizer	count=1
function	embeddings using parameter hashing ||| sampled scattered embedding	count=1
function	valued features ||| valued feature	count=1
module	removes ||| python tools	count=1
function	all input alternatives ||| get input alternatives	count=2
function	defines the ||| define	count=4
module	of tensors specified by ||| slim data	count=1
module	compute the ||| python	count=1
module	params from [module] ||| [module]	count=1
function	restart is ||| restart for file version less than2	count=1
arg	ps jobs ||| num_workers num_param_servers port name_prefix	count=1
class	a queue ||| queue base	count=2
module_class	[module_1] type ||| [module_1] [class_2]	count=2
function	boots 3 servers ||| test cluster spec propagation three servers one cluster	count=1
function	returns the values ||| values	count=2
function_arg	[function_1] [arg_2] ||| [function_1] batch [arg_2]	count=2
function	a tensor for ||| get	count=1
class	adds ||| summary writer	count=1
module	matrix representing this ||| linalg python ops	count=1
function	tests a ||| test	count=2
function	sparse and dense inputs ||| sparse cross dense	count=1
module	then return tensor ||| ops	count=1
class	the layer from numpy ||| layer	count=1
function	[function_1] a positive ||| [function_1] [function_2]	count=1
function	[function_1] table row ||| [function_2] [function_1]	count=1
class	multivariate normal distribution on ||| multivariate normal diag plus low	count=1
function	root directory containing all ||| root dir with all resources	count=1
function	fakequantwithminmaxvarsperchannel ||| fake quant with min max vars per channel	count=1
arg	tensor in tensor_list ||| tensor_list	count=1
function	a postfix representation of ||| tf spec structure	count=1
function	partitioner to specify a ||| partitioner	count=1
module	of integers ||| contrib	count=1
function	and conv2d produce the ||| fwd conv2d	count=1
function	[function_1] combined ||| [function_1] [function_2]	count=2
module	the list of placeholder ||| python	count=1
function	conversion function for graph ||| graph	count=2
function	all the tensors linked ||| ts	count=1
arg	graph element ||| element_name handle_node_names intermediate_tensor_names override_names	count=1
function	with integer weights ||| with integer weighted sparse column succeeds for dnn	count=1
class	tensors of all keys ||| mutable hash	count=1
function	is probably ||| is tensor flow	count=1
function	[function_1] items in ||| [function_1] [function_2]	count=1
arg	[arg_1] [arg_2] ||| [arg_1] to_proto [arg_2]	count=3
function	output for ||| output	count=1
function	the names of ||| names	count=2
function	tensors linked ||| ts from	count=1
function	feature ||| feature ops	count=1
module_class	of the initializer ||| python ops initializer	count=1
function_arg	[function_1] a cell ||| [function_1] [arg_2]	count=1
function	results into summary file ||| summary results	count=1
module	from each [module] ||| [module]	count=2
function	array to a ||| array to	count=2
function	lookup table that ||| table	count=1
arg	produces a ||| show_dataflow show_memory	count=1
module	and returns only the ||| ndlstm python	count=1
function	linear_model_fn but returns ||| model fn	count=2
arg	recall@k of the ||| k	count=1
function	[function_1] events ||| [function_2] [function_1]	count=7
function_arg	[function_1] storing the ||| [function_1] [arg_2]	count=3
module	and indices of ||| ops	count=1
function	tests if a ||| is	count=1
function	[function_1] noise ||| [function_2] [function_1]	count=2
arg	src_dir and write ||| src_dir	count=1
module	of ||| contrib keras python	count=1
function	for ||| maybe assert valid	count=1
module	from ||| cli	count=1
function	handler for the command ||| command handler	count=1
function	max pooling on the ||| max pool	count=1
function	[function_1] rank ||| [function_1] [function_2]	count=1
function	ops that match ||| ts from regex	count=1
function	gradient ||| with logits grad	count=1
arg	spec ||| spec	count=2
arg	using tf nn softmax_cross_entropy_with_logits ||| onehot_labels weights	count=1
function	function for ||| conv2d	count=1
arg	adds [arg] ||| category [arg]	count=1
function_arg	border [arg_2] ||| [arg_2] [function_1]	count=1
function	by dispatching it ||| dispatch	count=1
function	[function_1] summary ||| [function_1] [function_2]	count=1
function	is active ||| is active	count=6
module	the files ||| docs	count=1
function	a deepcopy ||| deep copy	count=1
module	if all ||| python estimator	count=1
function	rejection ||| rejection sample	count=2
arg	the entire ||| level noise_shape	count=1
arg	subgraph view ||| sgv control_inputs	count=1
function	to use for input ||| or dict	count=1
function	fingerprint concatenation has collisions ||| v1 has collision	count=1
function	then ||| maybe assert valid sample	count=1
function	docstring ||| args kwargs	count=1
function	expired events ||| expired events	count=2
arg	a deprecation ||| doc instructions no_doc_str suffix_str	count=1
class	construct a quantized ||| quantized distribution	count=1
function	is an ||| hints allowing	count=1
module	a list of ||| framework python ops	count=1
function	the diagonal of d ||| diag update	count=1
arg	an initializer ||| initializer shape dtype	count=1
module	for [module_2] ||| [module_2] [module_1]	count=8
arg	permute a tensor's ||| labeled_tensor axis_order name	count=1
function	a monitoredsession [function_2] ||| [function_1] [function_2]	count=1
function	operation of ||| operation	count=1
function	in ||| ts	count=1
arg	parsing new values from ||| values	count=1
function	[function] integer type ||| test integer [function]	count=2
function	replaces a reshape node ||| reshape node	count=1
class	internal saver ||| saver	count=1
module	tensor and ||| python keras	count=1
function	a richtextlines object ||| rich text lines from rich line	count=1
function	return tensor ||| valid	count=1
module	the event file ||| python	count=1
function	shape values then return ||| maybe assert	count=1
function	linearclasssifier with sdcaoptimizer ||| sdca optimizer	count=3
class	mapper that ||| mapper	count=1
arg	output if the ||| output	count=1
arg	a list of _embeddingcolumn ||| dimension combiner	count=1
arg	screen output from ||| output node_name	count=1
function	[function_1] batch ||| [function_1] [function_2]	count=28
class	by concrete [class_2] ||| [class_2] [class_1]	count=1
arg	performs ||| x rg row_axis col_axis	count=1
function	output ||| outputs	count=1
function	produces a slice of ||| slice input producer	count=1
module	training ops ||| ops	count=1
module	in args from ||| contrib learn python learn	count=1
function	[function_1] call ||| [function_1] [function_2]	count=3
function	[function_1] then flatten ||| [function_2] [function_1]	count=4
module	dataframe and ||| learn dataframe	count=1
module	dict ||| estimator	count=1
arg	each input [arg_2] ||| [arg_2] [arg_1]	count=1
module	model ||| python keras	count=2
arg	row to an ||| row	count=1
function	a mix [function_2] ||| [function_2] [function_1]	count=4
module	indexies ||| learn python learn preprocessing	count=2
function_arg	[function_1] given features ||| [arg_2] [function_1]	count=2
function	node for the ||| node	count=1
function	reduce it to ||| reduce to	count=2
function	and conv2d ||| conv2d	count=1
function	op ||| find op	count=1
function	returns a non-reference ||| base	count=1
function	for the command ||| command	count=1
function	prune ||| prune	count=3
arg	axis in ||| axis x_ndims	count=1
arg	richtextlines ||| tst out command_prefix	count=1
function	mean squared error between ||| streaming mean squared error	count=1
class	function ||| func	count=2
function	linear-only instantiation and training ||| linear only	count=1
function	block that has a ||| block	count=1
module	inception ||| keras applications	count=1
function	works fine [function] integer ||| test integer [function]	count=1
module	the gradient of ||| hybrid python ops	count=3
function	checkpoints ||| dnnweights	count=1
module	batch of beams into ||| contrib seq2seq python ops	count=1
arg	and a target ||| target from_logits	count=1
function	a dict [function_2] ||| [function_1] [function_2]	count=2
arg	the gradient ||| op grad	count=1
function	make_linear_model() for [function_2] ||| [function_1] [function_2]	count=1
function	evaluates a ||| eval	count=1
module	event ||| summary writer	count=2
function	bias weight with ||| bias and	count=1
function	all the tensors ||| ts from	count=1
module	tensor for the given ||| python	count=1
module	the cell and ||| rnn python ops	count=3
class	names in this cluster ||| cluster	count=1
function	in command history ||| from command history	count=2
function	from the ||| to	count=1
function	end ||| end	count=6
arg	from tensors ||| tensors capacity num_threads shared_name	count=1
class	place [class] ||| [class]	count=1
class	function corresponding to ||| func	count=1
function	predictions for the ||| predict	count=5
function	[function_1] event file ||| [function_1] [function_2]	count=1
function	[function_1] key not ||| [function_1] unique target [function_2]	count=1
arg	import a function from ||| module_name function_name	count=1
arg	variable that comprise the ||| name all_vars	count=1
function	a depth ||| depth	count=2
module_class	[module_1] [class_2] ||| [module_1] mutable dense hash [class_2]	count=4
class	sure ||| test upgrade files	count=2
module	shape values then return ||| distributions	count=1
module	mean ||| keras python keras	count=1
function_arg	[function_1] [arg_2] ||| [function_1] tag tensor max_images [arg_2]	count=1
function	real valued features ||| real valued	count=3
module	hue [module] an rgb ||| [module]	count=1
arg	symbols to ||| ids vocab_size embed_dim	count=1
arg	maps activations ||| activations	count=3
arg	values ||| values dtype name	count=1
class	an interactivesession ||| interactive session	count=1
function	and column factors ||| factors	count=1
function	[function_1] to initialize ||| [function_2] col update [function_1]	count=1
function	[function_1] for binary ||| [function_2] svm [function_1]	count=3
function	and return ||| transform	count=1
module	matrix data as ||| python learn estimators	count=4
function	shape ||| get shape	count=1
module	for proper ||| python	count=1
function	create the [function_2] ||| [function_1] [function_2]	count=1
function	verifies the output values ||| values	count=1
function_arg	variable and [arg_2] ||| [function_1] [arg_2]	count=1
function	whilecontext ||| while context	count=2
module	all the op in ||| contrib graph_editor	count=1
function	graph ||| profiler ui	count=1
function_arg	names [arg_2] ||| [function_1] [arg_2]	count=3
arg	create a ||| name	count=2
module	of one or more ||| ops	count=1
function_arg	[function_1] case ||| [arg_2] [function_1]	count=10
function	loads a ||| load	count=3
class	file to disk ||| file writer	count=2
module	loss to ||| losses python losses	count=2
arg	has access to ||| args screen_info	count=1
function	the collection with ||| add to collection	count=1
function	a tensor ||| to tensor	count=1
arg	a linearoperatorscaledidentity ||| num_rows multiplier is_non_singular is_self_adjoint	count=1
arg	to tensor numpy equivalent ||| tensor	count=1
function_arg	[function_1] the image ||| [arg_2] [function_1]	count=3
function_arg	given task [arg_2] ||| [function_1] address [arg_2]	count=1
function	an op that initializes ||| initialize	count=1
module	get all the ||| contrib	count=1
function_arg	get request [arg_2] ||| [arg_2] [function_1]	count=1
function	health ||| get ops with health	count=2
arg	[arg_1] and h ||| [arg_1] [arg_2]	count=3
function	shape values then return ||| valid	count=1
module	initializes ||| python framework	count=1
function	command history ||| command history	count=1
arg	feeds and fetches for ||| fetches feeds	count=2
arg	y elementwise ||| y name	count=1
arg	the services and the ||| threads close_summary_writer	count=1
module	with default shuffle ||| learn python learn	count=1
arg	the same shape and [arg_1] [arg_2] ||| python ops identity [arg_1] [arg_2]	count=1
arg	graph from graph_def into ||| graph_def	count=1
module	[module_1] the given ||| [module_1] [module_2]	count=6
arg	the given input ||| inputs	count=1
class	the decoder can decode ||| decoder	count=1
function	to tf [function] [n1 ||| [function]	count=1
class	this estimator ||| base	count=1
function	wav [function_2] ||| [function_1] [function_2]	count=1
function	python callable that ||| make callable	count=1
function	labels ||| one hot encoding	count=1
arg	creates a new ||| name shape collections	count=1
function_arg	average of [arg_2] ||| [function_1] [arg_2]	count=2
arg	[arg_1] added ||| [arg_2] [arg_1]	count=2
function	a ||| to item	count=1
arg	args ||| args	count=1
function	returns true tensor if ||| is	count=1
function	the row [function_2] ||| [function_1] [function_2]	count=1
module	then return ||| ops distributions	count=1
function	resourcehandle representation of this ||| resource	count=1
arg	equations with best effort ||| adjoint adjoint_arg name	count=1
function	total log-likelihood ||| loglikelihood operation	count=1
function	op to use ||| get string to hash bucket fn	count=1
arg	computes recall@k of top-k ||| top_k_predictions class_id weights	count=1
arg	trains ||| max_steps	count=1
function	tensor )) ||| logsumexp	count=1
class	returns ||| lazy builder	count=2
class	function ||| defined function	count=5
module	of the model ||| contrib factorization python ops	count=1
function	[function_1] id ||| [function_2] [function_1]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] partition graphs [arg_2]	count=1
function	atrous_conv2d ||| atrous conv2d	count=1
function	batch ||| batch features	count=1
function	with respect ||| precision at	count=6
function	no [function_2] ||| [function_2] [function_1]	count=1
module	numpy ||| keras	count=1
function	symbol name -> _guideref ||| guide	count=1
class	we don't ||| test	count=1
arg	for an estimator ||| num_units target_column	count=1
arg	num_unroll ||| num_unroll	count=1
function	transposes a sparsetensor the ||| sparse transpose	count=1
function	print model ||| print model	count=1
module	a dataframe ||| dataframe	count=1
function	at ||| at sensitivity	count=2
class	a ||| upgrade	count=1
function	on bad ||| test bad file	count=1
function	inference [function_2] ||| [function_2] [function_1]	count=1
function_arg	last dimension [arg_2] ||| [function_1] [arg_2]	count=1
function	_sparsecolumn [function] configuration ||| sparse column [function]	count=1
function	with respect to ||| precision at	count=6
arg	for precision@k ||| labels predictions_idx class_id	count=1
function_arg	function to [arg_2] ||| [function_1] bn x [arg_2]	count=1
function	at least ||| at least	count=1
class	a table outputs the ||| mutable hash table	count=1
arg	between logits and ||| logits	count=1
function	for input ||| input	count=5
function	to predictions for ||| predictions	count=1
arg	decides whether ||| values salt_prefix recurrent_noise keep_prob	count=1
function	global [function_2] ||| [function_1] [function_2]	count=21
function	returns labels ||| labels	count=1
arg	returns an [arg_2] ||| [arg_2] [arg_1]	count=2
function	of tensor or indexedslices ||| tensor or indexed slices	count=1
function	a richtextlines ||| text lines from rich line	count=1
function	trigger for ||| trigger for	count=2
module	if this ||| python framework	count=1
module_class	[module_1] sparse ||| [module_1] [class_2]	count=2
function	-> _guideref ||| index	count=1
arg	screen output from ||| output node_name enable_list_tensors	count=1
function	the health [function_2] ||| [function_2] [function_1]	count=1
class	worker session creator ||| worker session creator	count=1
arg	while scaling the entire ||| level noise_shape	count=1
function	to the main page ||| request main page	count=1
function_arg	pack a [arg_2] ||| [arg_2] [function_1]	count=2
function	binary classification with float ||| logistic regression float	count=1
function	[function_1] run a ||| [function_1] [function_2]	count=2
function_arg	[function_1] at shortcut ||| [function_1] [arg_2]	count=3
module	return tensor ||| ops	count=1
arg	the given dtype ||| dtype num_shards	count=1
function	manager for overriding gradient ||| gradient override	count=1
module	an imagenet model's ||| python keras applications	count=1
arg	make sure ||| master config wait_for_checkpoint	count=1
class	all keys ||| mutable hash	count=1
function	list of unique ||| unique	count=1
class	return tensor version ||| dirichlet multinomial	count=1
function	tensors linked to ||| from	count=1
module	classification using [module] ||| [module]	count=4
function	real valued features ||| real valued features	count=7
function	rnn ||| rnn seq2seq	count=2
class	r batch ||| operator pdbase	count=1
module	the input dict ||| python estimator inputs	count=2
module	all files in the ||| backend event_processing	count=1
module	of d ||| distributions python ops	count=1
function	number ||| size	count=15
function	[function_1] node ||| [function_1] [function_2]	count=13
function	values then return tensor ||| valid	count=1
class	the statistics ||| statistics	count=1
function	list of file ||| get file	count=1
function	possibly [function_2] ||| [function_1] [function_2]	count=4
function	sequence index of each ||| sequence	count=1
module	of this ||| python ops	count=5
arg	grad along the ||| grad	count=1
arg	with [arg_2] ||| [arg_2] scale validate_args [arg_1]	count=1
arg	distances ||| steps	count=1
function	capture ||| test capture	count=1
function	[function_1] as tf ||| [function_2] [function_1]	count=2
class	get ||| debug dump dir	count=3
function	with high-dimension [function_2] ||| [function_2] valued [function_1]	count=1
function	proto_type for ||| proto type	count=1
module	of the command ||| python debug cli	count=1
arg	based on [arg] but ||| [arg]	count=1
arg	decides whether to perform ||| values salt_prefix recurrent_noise keep_prob	count=1
class	glimpse ||| extract glimpse	count=1
function	op that initializes ||| initialize	count=1
function	list ||| list	count=22
function	linked to ops that ||| from regex	count=1
arg	permute ||| axis_order name	count=1
module	in the sense of ||| contrib linalg python ops	count=2
function	positive definite [function_2] ||| [function_1] [function_2]	count=1
function	the root mean ||| root mean	count=3
function_arg	[function_1] filewriter ||| [arg_2] [function_1]	count=1
function	of /data/scalars ||| scalars	count=1
function	has no [function_2] ||| [function_1] [function_2]	count=1
function	restore a checkpoint ||| restore checkpoint	count=2
function	the eval step tensor ||| eval step	count=1
function_arg	[function_1] of n ||| [arg_2] [function_1]	count=4
function	checkpoint from ||| checkpoint path	count=1
arg	estimator to a ||| estimator	count=1
function	collection with the given ||| get collection ref	count=1
function	items ||| items	count=5
module	find ||| bayesflow python ops	count=1
function	returns the kind name ||| get kind name	count=1
function_arg	batch [arg_2] ||| [function_1] [arg_2]	count=1
class	example ||| feature column	count=1
function	to a numpy array ||| array	count=1
function	the flags [function_2] ||| [function_2] [function_1]	count=2
function	_guideref from the files ||| index	count=1
module	a single run return ||| backend	count=1
arg	operator on tensors to ||| operator	count=1
module	creates a cross-entropy loss ||| ops losses	count=1
module	of the ||| framework	count=2
module	we don't have a ||| compatibility	count=1
module	the sum ||| python framework	count=1
arg	matrices ||| num_rows num_columns batch_shape	count=1
function	decoding on ||| decoder	count=2
module	map ||| python ops	count=1
arg	given evaluation data input_fn ||| input_fn steps hooks	count=1
class	the model for a ||| model	count=1
function	condition based on ||| pick scalar condition	count=1
arg	get ||| node_name	count=1
function	of the resultant of ||| compute elemwise	count=1
module	map ||| python keras	count=1
arg	for recall@k ||| class_id weights	count=1
arg	a pure-decoding option ||| initial_state attention_states cell	count=1
function	parsing config ||| config	count=1
arg	[arg_1] + biases ||| [arg_2] [arg_1]	count=6
function	[function_1] the default ||| [function_2] [function_1]	count=5
function	for overriding [function_2] ||| [function_2] [function_1]	count=4
arg	a spec ||| spec	count=1
function	next cont() call ||| cont call	count=2
function	values then ||| maybe assert valid	count=1
function	feature spec [function_2] ||| [function_2] [function_1]	count=2
function	weights to a ||| save weights	count=1
function_arg	[function_1] expected_rank ||| [function_1] [arg_2]	count=1
function	a mix of features ||| optimizer mixed features arbitrary weights	count=1
function	dynamic shapes ||| to matrix dynamic	count=1
arg	returns differences ||| other_dump step atol	count=1
module	rejection ||| training python training	count=1
arg	[arg_1] based ||| [arg_2] [arg_1]	count=8
arg	steps and returns ||| inputs noutput scope name	count=1
function	examples to extract tensors ||| examples	count=1
function	given python file ||| file	count=1
module	retrieves the ||| keras python keras	count=1
arg	or dicts of ||| rtol atol	count=1
function	from a given mapping ||| assign from	count=1
arg	the predicted_ids ||| outputs final_state sequence_lengths	count=1
class	mappers ||| linear classifier	count=1
arg	[arg_1] scale ||| [arg_2] [arg_1]	count=6
arg	the screen output from ||| output node_name	count=1
arg	an rgb image ||| image saturation_factor name	count=1
function	resize and mirror pad ||| resize and	count=1
module	constructor for ||| python estimator export	count=1
function	[function_1] the value ||| [function_1] tensor [function_2]	count=1
function	for all inputs of ||| inputs	count=1
module	vocabulary dictionary and ||| contrib	count=1
function	op to ||| to hash bucket fn	count=1
function	a uniform base distribution ||| uniform	count=1
function	process a list of ||| process	count=1
function	merge the properties of ||| merge	count=1
function	[function_1] json ||| [function_2] [function_1]	count=1
function	list of tensor or ||| to tensor or	count=1
function	generate output ||| output	count=1
function	custom evaluation metrics ||| custom metrics	count=4
function	sparsetensors from a ||| sparse from	count=2
arg	[arg_1] instance ||| [arg_2] [arg_1]	count=4
function	multi value models ||| single value	count=1
module	outputs a summary ||| python summary	count=3
arg	and y and ||| y	count=1
function	log absolute value determinant ||| log abs det	count=1
class	rmsprop [class_2] ||| [class_1] [class_2]	count=1
module	a menuitem ||| python debug	count=1
function_arg	asset [arg_2] ||| [function_1] [arg_2]	count=2
module	of a tensor generalized ||| ops	count=1
module	as 'values' ||| metrics	count=1
function	partitioner ||| partitioner	count=1
module	s of a ||| engine	count=9
function	ops in an ||| op	count=1
function	sessionrunhook raises ||| type	count=1
function	is sparsetensor ||| sparse	count=1
function	and returns [function_2] ||| [function_2] [function_1]	count=8
class	output projection ||| output projection wrapper	count=3
class	loop invariants ||| while context	count=1
function_arg	batch [arg_2] ||| [function_1] op [arg_2]	count=2
module_class	[module_1] op with ||| [module_1] [class_2]	count=3
arg	tensorflow graph ||| graph debug_ops	count=1
arg	a tensor ||| name target	count=1
arg	gradients to [arg_2] ||| [arg_2] [arg_1]	count=2
class	wait ||| supervisor test	count=1
function	[function_1] pandas ||| [function_2] [function_1]	count=2
function	matrix ||| to matrix	count=1
function	signaturedef proto for ||| signature def	count=1
class	a worker session ||| worker session	count=2
function	has no collisions ||| has no collision	count=1
class	calls to the debug-wrapper ||| base debug wrapper	count=1
function	list of variables ||| list	count=1
module	number of dimensions corresponding ||| ops	count=2
function	a postfix ||| structure	count=2
function	gets the state ||| get state	count=2
function	feed conversion functions for ||| conversion functions	count=1
function	applies dropout to ||| dropout	count=1
function	attribute to [function_2] ||| [function_2] [function_1]	count=2
function	creates an [function_2] ||| [function_2] [function_1]	count=1
module	return ||| python	count=2
function	of evaluation [function_2] ||| [function_1] [function_2]	count=3
arg	to variabledef for ||| export_scope	count=1
function	from ||| build guide index	count=1
module	function ||| ops distributions	count=1
arg	rgb image ||| image saturation_factor name	count=1
function	create a copy ||| copy	count=1
function	a ||| texts	count=1
arg	repeatedly using stack_args ||| stack_args	count=1
function	collection with the ||| add to collection	count=1
module	distribution ||| distributions python	count=1
class	initializer as ||| initializer	count=1
function	with integer weights ||| with integer weighted sparse column succeeds for	count=1
function	collect information necessary ||| collect	count=1
module	for compilation ||| contrib compiler	count=1
function	filter [function_2] ||| [function_2] [function_1]	count=11
function	tensorboard ||| import to tensorboard	count=1
function	shallow structure ||| shallow structure	count=2
module	for node-status ||| debug cli	count=1
function	exist it should 404 ||| nonexistent	count=1
class	none ||| indexed	count=1
class	dict with data ||| data	count=2
function	restricted linear ||| joint weighted sum from feature	count=1
arg	log-uniform distributed ||| lo hi	count=1
function	a dict for ||| dict	count=1
class	will work with ||| pdbase	count=1
function	then return ||| maybe	count=1
function	and flops ||| get logged	count=1
class	a dimension ||| dimension	count=1
module	a menuitem from the ||| python debug cli	count=1
module	of linear ||| python ops	count=1
function	column is [function_2] ||| [function_2] [function_1]	count=5
function	shape of ||| shape tensor	count=1
function	[function_1] of ||| [function_1] [function_2]	count=4
function_arg	audio clips [arg_2] ||| [arg_2] [function_1]	count=1
function	xception ||| xception	count=1
module	layers ||| python layers	count=1
class	the queue when ||| queue	count=1
class	op (e g ||| operation	count=1
arg	model over ||| y sample_weight	count=1
function	[function_1] vocabulary ||| [function_2] [function_1]	count=1
function	generates the test data ||| generate test data	count=1
function_arg	resnet-50 [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] and runoptions ||| [function_1] [function_2]	count=4
function_arg	[function_1] g ||| [arg_2] [function_1]	count=3
function	to a matrix with ||| to matrix	count=1
function	incorrect [function] ||| test inconsistent label [function] raises	count=4
module	fails ||| python util protobuf	count=1
arg	tensors [arg_2] ||| [arg_1] [arg_2]	count=1
arg	by the following rule ||| column_name output_rank	count=1
function	switch ||| switch	count=3
module	version with ||| python learn learn_io	count=1
arg	frequency-weighted mean and ||| axes frequency_weights name	count=1
function	_get_dense_tensor() ||| get dense tensor	count=2
module	a menuitem from ||| python debug	count=1
module	a bijector ||| python ops bijectors	count=1
function	a solve ||| solve	count=1
function	on [function] ||| on [function]	count=3
module	reduce ||| contrib ndlstm python	count=1
function	[function] dimentation ||| test [function]	count=1
module	all events added ||| tensorboard backend event_processing	count=1
module	number ||| python ops losses	count=1
function	a method ||| a method	count=2
module	op (e g "matmul") ||| python	count=1
class	for proper shape values ||| multinomial	count=1
module	building doesn't modify the ||| hybrid	count=1
module	synthetic ||| python kernel_tests	count=1
function	[function_1] file against ||| [function_2] [function_1]	count=1
function	with partitioned variables ||| with partitioned variables	count=12
function	to a node ||| inputs node	count=1
function	of replicas ||| remote replicas	count=1
arg	matrix ||| matrix	count=1
class	grad state ||| control flow state	count=1
function	[function_1] to use ||| [function_2] [function_1]	count=3
function	adds a fake ||| add	count=1
function	tile the [function_2] ||| [function_2] [function_1]	count=2
function	the derivatives for nearest ||| nearest	count=1
function	that match ||| ts from regex	count=1
function	return the [function_2] ||| [function_2] [function_1]	count=5
module_class	from this barrier ||| python ops barrier	count=1
function	of indices [function_2] ||| [function_2] [function_1]	count=5
function	shape of a tensor ||| shape	count=1
function	dictionary of evaluation ||| eval	count=1
module	a 1 outcome ||| python	count=1
module	by the embedding projector ||| contrib tensorboard plugins projector	count=1
function	session session ||| session init	count=1
module	text ||| keras python keras preprocessing	count=2
function	num_rows, possibly [function_2] ||| [function_1] [function_2]	count=2
module	this is ||| framework	count=2
function	raised when ||| error	count=1
function	the names ||| names	count=3
function	returns a tensorshape of ||| shape	count=1
function	names for an ||| names	count=1
function	[function_1] [function_2] sparse ||| [function_2] sparse [function_1]	count=8
class	the dense ||| sparse	count=1
arg	protocol buffer with ||| name values collections	count=1
function	[function_1] dense ||| [function_2] and sparse [function_1]	count=2
function	time string ||| time str	count=1
module	make ||| tools compatibility	count=2
class	multiple ||| saved model export utils	count=1
function	the state [function_2] ||| [function_2] [function_1]	count=5
module	where the layer's ||| keras python keras engine	count=1
function	[function_1] separable ||| [function_2] [function_1]	count=2
function	proto_type ||| collection proto	count=1
module	collection of losses ||| losses	count=1
function	a @{$ ||| doc	count=1
module	the vocabulary ||| learn	count=2
module	to __init__ which gets ||| contrib distributions python ops bijectors	count=1
module	get all the tensors ||| graph_editor	count=1
function	get a flattened list ||| get fetch	count=1
class	dense [class_2] ||| [class_2] [class_1]	count=1
arg	labels into onehot_labels ||| labels	count=1
function	gather the ||| screen gather	count=1
class	that ||| walsmatrix factorization test	count=1
arg	parses ||| serialized	count=1
function	statistics ||| stats for	count=1
function	a tf cond ||| smart cond	count=1
arg	tensor text ||| tensor np_printoptions offset	count=1
module	not a function of ||| python ops distributions	count=1
class	returns ||| distribution shape	count=2
function	[function_1] covariance ||| [function_1] [function_2]	count=3
module	from the files ||| tools	count=1
arg	row and column ||| cls rows	count=1
function	[function_1] relative ||| [function_2] [function_1]	count=4
arg	exponential distribution ||| minval maxval	count=1
function	derivatives for nearest neighbor ||| nearest neighbor grad	count=1
function	vgg 11-layers ||| vgg a	count=1
arg	in self and other ||| other	count=1
function_arg	from queue_runner_def ||| from proto queue_runner_def	count=1
module	a sequence-to-sequence ||| legacy_seq2seq	count=1
function	read queue batch ||| read batch examples	count=2
function	initializer within the same ||| initializer	count=1
class	feature for tf ||| feature	count=1
function	gets or creates a ||| get	count=1
function	from a dict containing ||| dict	count=1
function	names to their defs ||| create nodes map	count=1
function	score function ||| score function	count=1
function	a tensor ||| parse data tensor	count=1
module	of a ||| contrib metrics python ops	count=1
function	its parent columns' names ||| parent names	count=1
class	and a tensorflow ||| flow	count=1
module	indexies of ||| learn	count=2
class	[class_1] area object ||| [class_2] [class_1]	count=1
function_arg	matrix [arg_2] ||| [function_1] labels [arg_2]	count=2
class	with data ||| data feeder	count=2
function	survival_function [function] cdf together ||| prob with logsf [function]	count=1
class	of mixture s ||| mixture	count=1
arg	(e g input_tensors) ||| node_index attr attr_name	count=1
class	get ||| square linear operator derived class test	count=2
function	and concatenate them ||| many	count=1
function	[function_1] debug ops ||| [function_1] [function_2]	count=6
function	tensors ||| ts	count=2
module	to ||| compatibility	count=1
function_arg	[function_1] dynamicrnnestimator ||| [arg_2] [function_1]	count=1
class	tests ||| writer cache test	count=1
arg	the given dtype ||| name shape dtype num_shards	count=1
function	dropout given ||| variational recurrent dropout	count=1
function	0 with same ||| zeros	count=1
function_arg	[function_1] by ||| [function_1] [arg_2]	count=4
module	variable of the same ||| keras python keras	count=2
function	linked to ||| filter ts from regex	count=1
function	tensors for session run() ||| tensors	count=1
function	the mean ||| streaming mean	count=1
function_arg	transformations [arg_2] ||| [function_1] mode [arg_2]	count=7
function	inner dimensions of ||| inner	count=1
module	the ||| contrib layers python	count=1
module	to ||| tools compatibility	count=2
function	[function_1] have invalid ||| [function_2] kernel [function_1]	count=1
module	proto_type ||| python framework	count=2
function	training with partitioned ||| train with partitioned	count=12
class	that failed if ||| op error	count=1
arg	[arg_1] terminate ||| [arg_2] [arg_1]	count=3
arg	a sharded ||| num_shards	count=1
class	the truncated [class_2] ||| [class_1] [class_2]	count=1
function	set operation of ||| set operation	count=2
arg	this matrix ax ||| transpose_x name	count=1
function	sparsetensor ||| remap sparse tensor	count=1
function	calculates true [function_2] ||| [function_2] [function_1]	count=2
function	absolute error ||| absolute error	count=2
function	new seed from ||| gen new	count=1
function	from a dict ||| dict to	count=1
function_arg	[function_1] tensor representing ||| [arg_2] [function_1]	count=3
module	of a single sample ||| python ops distributions	count=2
module	that with integer ||| learn python learn	count=1
module	and ||| learn python learn	count=7
module	eval ||| learn	count=1
function	[function_1] root name ||| [function_2] [function_1]	count=1
function	[function_1] bucket ||| [function_2] [function_1]	count=1
class	feature for tf parse_example ||| feature column	count=1
function	global step [function_2] ||| [function_1] [function_2]	count=6
module	in the [module_2] ||| [module_1] [module_2]	count=8
function	filter [function_2] ||| [function_1] [function_2]	count=2
function	the mtimes ||| mtimes	count=1
function	[function_1] the first ||| [function_2] event [function_1]	count=1
function	[function_1] labels ||| [function_1] [function_2]	count=9
function	of its [function_2] ||| [function_1] [function_2]	count=1
arg	given features ||| input_fn predict_keys hooks checkpoint_path	count=1
module	which values will ||| python	count=1
arg	this handle ||| handle	count=1
function	[function_1] main menu ||| [function_1] [function_2]	count=1
arg	for the input samples ||| batch_size verbose	count=3
arg	tensor ||| tensor dtype name	count=1
function_arg	the unary [arg_2] ||| [function_1] [arg_2]	count=1
class	a packed tensor ||| tensor	count=1
function	header for ||| get header	count=1
class	an outofrangeerror ||| out of range error	count=1
class	sure ||| test	count=1
function	from caller and ||| caller and	count=1
function_arg	op tensor [arg_2] ||| [arg_2] [function_1]	count=3
function	[function_1] initializer ||| [function_2] [function_1]	count=2
function	variable-updating ops with ||| test watching	count=1
module	eventfilewriter ||| python summary	count=1
function_arg	mean of [arg_2] ||| [arg_2] [function_1]	count=3
function	[function_1] end event ||| [function_1] [function_2]	count=3
class	produced ||| slices	count=1
function	initializer to assign op ||| initializer	count=1
function	a full name ||| full path	count=1
function	match ||| ts	count=1
function	[function_1] variable initializations ||| [function_1] [function_2]	count=3
function	mappers provided have ||| mapper	count=1
function	definition [function_2] ||| [function_1] [function_2]	count=2
module_class	[module_1] session ||| [module_1] interactive [class_2]	count=1
module	[module_1] and ||| [module_1] [module_2]	count=9
function_arg	[function_1] x element-wise ||| [arg_2] [function_1]	count=3
class	weight ||| regressor	count=1
function	the ||| ts from regex	count=4
function	[function_1] used ||| [function_1] [function_2]	count=4
module	of a ||| distributions	count=1
function	[function_1] along column ||| [function_2] [function_1]	count=4
function	sets static [function_2] ||| [function_2] [function_1]	count=2
class	shape or ||| tensor shape	count=2
function	the dtype of elements ||| dtype	count=1
arg	the offset in ||| offset	count=1
function	to have ||| check for same	count=1
class	a shape based ||| tensor shape	count=1
function	[function_1] the eval ||| [function_1] [function_2]	count=3
function_arg	a list [arg_2] ||| [arg_2] [function_1]	count=2
function	kernels ||| kernels	count=3
module	a menuitem from ||| debug cli	count=1
module	update ||| python ops distributions	count=1
arg	or list of tensors ||| tensors session	count=1
function	2 then tile along ||| and tile	count=1
function	notice to ||| notice to	count=2
function	after broadcasting the ||| broadcast	count=1
arg	a highwaywrapper for ||| couple_carry_transform_gates carry_bias_init	count=1
function	for nearest [function_2] ||| [function_1] [function_2]	count=1
function	current number of ||| size	count=1
function	save and reload ||| train save	count=1
arg	operations to compute the ||| examples	count=1
arg	a labeledtensor ||| labeled_tensor existing_axes new_axes name	count=1
function	ops ||| ts from regex	count=2
function_arg	[function_1] neural network ||| [arg_2] [function_1]	count=4
arg	the parameters ||| num_units input_size use_peepholes	count=1
class	current context ||| cond context	count=1
arg	creating a resnet_v2 bottleneck ||| scope base_depth num_units stride	count=1
function	a model_fn for ||| model fn	count=1
function	reads a batch ||| read batch	count=3
module	that use the ||| python	count=1
function	summarize the given tensor ||| tensor	count=1
module	shape values then return ||| python ops distributions	count=1
module	of tensor ||| linalg python ops	count=1
function	[function_1] float labels ||| [function_2] [function_1]	count=1
function_arg	contains test_name ||| contains test_name	count=1
function	distance between ||| distance	count=4
function	the outputs in place ||| outputs make	count=1
module	cross-entropy loss using tf ||| ops losses	count=1
arg	0 if the denominator ||| denominator name	count=2
function	of this [function_2] ||| [function_1] [function_2]	count=1
arg	boundaries [arg_2] ||| [arg_2] [arg_1]	count=1
arg	input ||| inputs rate noise_shape	count=1
function_arg	name in collectiondef ||| name item	count=1
function	all tensor watch ||| debug watch	count=1
module	the axis_order set ||| contrib labeled_tensor python ops	count=1
function	[function_1] tensor ||| integer [function_2] [function_1]	count=2
function	[function_1] a tensor ||| [function_2] [function_1]	count=6
arg	a kernellinearclassifier estimator object ||| model_dir n_classes weight_column_name	count=1
module	graph building ||| contrib tensor_forest hybrid	count=1
function	then return ||| valid sample	count=1
module	image s by the ||| image python	count=1
function	function estimator [function_2] ||| [function_1] [function_2]	count=1
function	hashed bucket configuration ||| hash bucket	count=1
class	no rich ||| rich line	count=1
arg	traverse for details ||| path parent children	count=1
arg	statesavingrnnestimator ||| problem_type num_unroll batch_size sequence_feature_columns	count=1
arg	[arg_1] to partitions ||| [arg_1] [arg_2]	count=1
module	(e g ||| framework	count=1
module	event ||| tensorboard backend event_processing	count=1
function_arg	decoder [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] [function_2] ||| [function_2] svm [function_1]	count=3
function_arg	observations [arg_2] ||| [function_1] generator [arg_2]	count=1
module	cell and add its ||| contrib rnn	count=2
function	normalization layer ||| normalization	count=1
class	underlying tf [class_2] ||| [class_2] [class_1]	count=1
function	for a rank rfft ||| length for rfft	count=1
function	the border of the ||| border	count=1
module	of init arg ||| python ops	count=2
arg	func and returns a ||| func	count=1
class	construct multivariate normal distribution ||| multivariate normal tri l	count=1
module	of dimensions corresponding ||| ops	count=2
function	variables that end with ||| variables	count=1
class	base feature for ||| feature	count=1
function	column with ||| column	count=1
function	restricted ||| joint weighted sum from	count=1
class	dnnestimator ||| dnnestimator	count=1
function	[function_1] creates the ||| [function_2] [function_1]	count=2
function	a numpy ||| numpy	count=3
module	s ||| python keras engine	count=3
module	with default shuffle ||| learn	count=1
class	the queue ||| queue runner	count=1
arg	kernellinearclassifier estimator object ||| feature_columns model_dir n_classes weight_column_name	count=1
arg	a run ||| run	count=1
function	specificity [function_2] ||| [function_1] [function_2]	count=3
function	hook ||| run hook	count=1
function	[function_1] by a ||| [function_2] [function_1]	count=1
arg	perform regex match ||| orig_screen_output regex font_attr	count=1
arg	m_prev [arg_2] ||| [arg_2] [arg_1]	count=3
class	rmsprop optimizer ||| rmsprop optimizer	count=2
function	top ||| get transformed map	count=1
module	that match ||| graph_editor	count=1
arg	which chooses ||| pred cond_true cond_false	count=1
function	to ops ||| ts from	count=1
function	[function_1] data ||| [function_2] files [function_1]	count=1
class	a tensor for ||| builder	count=1
arg	[arg_1] and d2 ||| [arg_2] [arg_1]	count=1
function_arg	[function_1] tree representing ||| [arg_2] [function_1]	count=1
class	context ||| cond context	count=1
arg	stored in a checkpoint ||| var_name	count=1
module_class	[module_1] file ||| [module_1] text [class_2]	count=1
function	a switch op is ||| switch	count=1
function	the step ||| step	count=1
arg	validates the ||| filename file_format duration_sec samples_per_second	count=1
module	a given ||| learn	count=2
function	fill ||| fill	count=2
function	main ||| test request main	count=1
module	the tfprof ||| tools tfprof	count=1
function_arg	with [arg_2] ||| [arg_2] [function_1]	count=6
module_class	[module_1] layer ||| [class_2] [module_1]	count=6
function	verify dense feature extraction ||| fully convolutional values	count=1
function	the graph that ||| graph	count=1
function	the feed ||| feed	count=2
class	verifies ||| depthwise conv2dtest	count=1
function	[function_1] op to ||| [function_1] [function_2]	count=1
module	we don't ||| compatibility	count=1
class	returns the sum of ||| dimension	count=1
function	sdcaoptimizer [function_2] ||| [function_1] [function_2]	count=4
function	for a matmul ||| matmul	count=1
arg	node according ||| node_name	count=1
function	using the google2 ||| google2	count=1
function	evaluation against the ||| eval	count=1
arg	non-audio parts [arg_2] ||| [arg_2] [arg_1]	count=2
arg	the predictions with ||| predictions	count=2
function	[function_1] of columns ||| [function_1] [function_2]	count=2
module	indexies of ||| learn python learn	count=1
function	merge op ||| merge grad	count=1
arg	learn the vocabulary dictionary ||| x	count=1
function	a lookup table that ||| table	count=1
arg	op1 [arg_2] ||| [arg_2] [arg_1]	count=5
function	edges related to ||| edges of	count=2
function	all the tensors linked ||| ts from regex	count=1
arg	rate ||| rate validate_args	count=1
arg	shifted [arg] ||| shape [arg]	count=3
arg	screen output ||| output	count=2
function	[function_1] value for ||| [function_2] [function_1]	count=4
function	parameters in ||| count total params	count=2
class	[class] in ||| [class]	count=3
function	[function_1] next cont() ||| [function_2] call dump path [function_1]	count=1
function	create a scale ||| make scale	count=1
function	a line in a ||| screen add line	count=1
function	[function_1] raw ||| [function_2] [function_1]	count=4
function	directory for ||| dir	count=1
arg	op ||| op loop_state aggregation_method	count=1
module	from the ||| python debug cli	count=1
function	prepares a feature ||| feature	count=1
module	return the [module_2] ||| [module_2] [module_1]	count=1
class	per example in ||| gmm algorithm	count=1
class	list ||| stepper cli	count=1
function	[function_1] table ||| [function_1] [function_2]	count=2
function	the original [function_2] ||| [function_1] [function_2]	count=2
function	[function_1] real valued ||| [function_2] [function_1]	count=2
function	dfs traversal ||| dfs from	count=1
function	to have non-broadcastable shapes ||| static check for broadcastable batch shape	count=1
function_arg	[function_1] x ||| [function_1] less [arg_2]	count=1
function	total variation for ||| total variation	count=3
class	state ||| control flow state	count=1
module_class	[module_1] these student's ||| [module_1] [class_2]	count=3
arg	[arg_1] estimator object ||| [arg_1] [arg_2]	count=2
function	[function_1] partitioned variables ||| [function_2] [function_1]	count=8
module	if ||| framework	count=3
function	step false ||| streaming sparse false	count=1
class	dense tensor ||| sparse	count=2
function	adjust the brightness ||| brightness	count=1
module	symbol name -> ||| tools	count=1
function_arg	sum metric and ||| streaming sum scalar_tensor	count=1
function	map that ||| map	count=1
function	dataframe from [function_2] ||| [function_2] [function_1]	count=1
module	numpy array ||| keras python keras	count=1
function	generate main menu ||| add main menu	count=2
function	exit a ||| exit	count=1
function	is zlib library compatible ||| write zlib	count=1
function	for ||| assert	count=1
arg	operator on ||| operator	count=1
arg	permute a tensor's ||| axis_order name	count=1
module	output ||| keras python keras engine	count=1
function	params from ||| params	count=1
function_arg	[function_1] maps a ||| [function_1] tensor [arg_2]	count=2
function	for all inputs ||| inputs tensor info from	count=1
class	if the stack ||| default graph stack	count=1
function	standard services ||| standard services	count=2
function	the gradient function ||| set grad	count=1
function	callback to ||| callback	count=1
function	the graph ||| graph	count=10
function	from caller and ||| merge caller and	count=2
function	[function_1] step ||| [function_1] [function_2]	count=12
arg	lower triangular ||| tril event_ndims	count=1
function	the ||| fit transform	count=2
arg	applying layer [arg_2] ||| [arg_1] [arg_2]	count=1
module	none ||| python	count=1
function_arg	computes cos [arg_2] ||| [function_1] [arg_2]	count=1
arg	x and h ||| x h	count=2
module	core version with ||| learn python learn	count=1
function	to ops that ||| from	count=1
module	dataset of ||| learn datasets	count=1
module	instance ||| contrib learn python learn estimators	count=4
class	learn the vocabulary dictionary ||| processor	count=1
arg	builds model graph ||| features labels	count=3
function	specificity at ||| specificity at	count=1
arg	conjugate prior ||| prior	count=1
function	[function_1] probably ||| [function_2] [function_1]	count=3
function	[function_1] collisions ||| [function_2] [function_1]	count=5
function	if feedable ||| is feedable	count=2
function	handler for the ||| handler	count=1
function	a filename ||| filename	count=2
arg	functional interface [arg_2] ||| [arg_1] [arg_2]	count=2
function_arg	end of [arg_2] ||| [function_1] [arg_2]	count=2
function	resnet_v1() for ||| resnet v1	count=3
module	helper function for ||| python ops	count=1
class	vocabulary ||| categorical processor	count=2
function	summary [function_2] ||| [function_2] [function_1]	count=2
class	an lstm cell ||| forget gate lstmcell	count=1
module	event file ||| summary	count=1
arg	a target tensor ||| target	count=1
function	trace information for ||| trace	count=1
function	summary op either ||| summary op	count=1
module	transform that wraps ||| learn python learn dataframe transforms	count=1
module	normally distributed ||| contrib specs python	count=1
arg	a microbenchmark to ||| name target iters	count=1
function	regularization ||| unregularized	count=1
function	a page that doesn't ||| page	count=1
function	the fingerprint concatenation has ||| v2 has	count=1
function	a sequence of integers ||| texts to sequences	count=1
function	feeding into predict ||| predict data	count=1
arg	stored in constant path_tensor ||| path_tensor	count=1
arg	gradients ||| grad var	count=1
function	gradient for [function_2] ||| [function_2] [function_1]	count=2
arg	tensors linked to ops ||| ops	count=1
arg	concatenates n [arg_2] ||| [arg_1] [arg_2]	count=2
function	has no entries ||| no entries	count=1
function	line in ||| at line	count=1
module	that graph building doesn't ||| tensor_forest hybrid python models	count=1
function	log [function_2] ||| [function_1] [function_2]	count=7
function	[function_1] hue ||| [function_1] [function_2]	count=1
class	feature for ||| feature column	count=1
function_arg	tensor to [arg_2] ||| [arg_2] [function_1]	count=1
function	timestamp ||| timestamp	count=2
class	dump root ||| dump	count=1
class	none ||| slices	count=1
function	table ||| table	count=5
function	forward_log_det_jacobian ||| forward log det jacobian	count=1
function	atrous ||| atrous	count=3
function	return the summary tensor ||| summary	count=1
function	get ||| from	count=1
module	matrix data as ||| contrib learn python learn estimators	count=4
class	the directory ||| debug dump dir	count=1
module	a rnn ||| contrib rnn	count=1
module	export ||| learn python learn utils	count=1
function	[function_1] difference loss ||| [function_1] [function_2]	count=3
class	this shape or ||| shape	count=2
function	[function_1] state names ||| [function_1] [function_2]	count=1
function	update for dnn-linear combined ||| dnnlinear combined bug fixed	count=1
class	be produced or ||| slices	count=1
class	dictionary and ||| categorical processor	count=1
function	for partial runs in ||| partial run setup	count=1
arg	each row in labels ||| labels k	count=1
function	a default initializer ||| default initializer	count=2
module	given set of ||| python ops	count=1
function	sparse softmax [function_2] ||| [function_2] [function_1]	count=2
function	use ||| or dict	count=1
arg	inputs [arg_2] ||| [arg_1] [arg_2]	count=14
arg	using tf one_hot ||| num_classes on_value off_value	count=1
function	with different dim0 sizes ||| illegal batch different dim0sizes	count=1
function	trials ||| total count	count=1
arg	and h ||| h	count=1
class	outputs ||| with hash buckets	count=1
function	[function_1] configuration ||| [function_2] [function_1]	count=1
class	adds ||| generator visitor	count=1
function_arg	[function_1] maps ||| [arg_2] [function_1]	count=2
function	weighted sparse ||| weighted sparse	count=2
function	encodings for planes ||| hot planes	count=1
function	an event file ||| event file	count=2
class	raw documents ||| processor	count=1
module	a cross-entropy loss using ||| losses python losses	count=1
function_arg	[function_1] output from ||| [arg_2] [function_1]	count=3
function	all inputs of ||| inputs tensor info from meta	count=1
function	converts ||| convert n	count=1
arg	object ||| obj	count=1
function_arg	for building a referenceresolver [function_1] [arg_2] ||| [function_1] [arg_2]	count=2
function	integer classes ||| build standardized	count=1
function	generate a full name ||| full path	count=1
function	specified bounding [function_2] ||| [function_2] [function_1]	count=1
function	sparse feature [function_2] ||| [function_2] embedding lookup [function_1]	count=1
class	construct a quantized distribution ||| quantized	count=1
module	values then return tensor ||| python ops distributions	count=1
arg	marking functions or methods ||| date instructions	count=1
class	[class_1] forest ||| [class_2] [class_1]	count=2
class	forward prop ||| model	count=1
function	show array indices for ||| show array index	count=1
function	path and runoptions for ||| path and run options	count=1
function	defined in every dimension ||| defined	count=1
arg	proto optionally writes it ||| meta_info_def graph_def saver_def	count=1
arg	path ||| request path	count=1
arg	[arg_1] to writer ||| [arg_2] [arg_1]	count=8
module	a sequence of ||| keras python keras preprocessing	count=1
function	an indexedslices object ||| indexed slices to	count=1
module	(vs 0) ||| distributions	count=1
arg	of categories ||| unused_y	count=1
arg	name unique ||| name	count=1
function	applies batch ||| batch	count=1
arg	to train a ||| train_samples test_samples input_shape num_classes	count=1
function_arg	variable stored in ||| variable var_name	count=1
class	registry in ||| text summary plugin asset	count=1
function	a single epoch ||| one epoch	count=1
function	to define [function_2] ||| [function_1] [function_2]	count=2
function_arg	approximate auc [arg_2] ||| [function_1] [arg_2]	count=2
function	a conv layer ||| conv	count=1
function	tensor in ||| tensor	count=1
function	all [function_2] ||| [function_2] [function_1]	count=16
class	of the base feature ||| feature	count=1
function	output ||| output page	count=1
module	of inverse ||| contrib distributions python ops	count=1
module	variable of ||| keras	count=2
module	axes of two ||| python ops	count=1
module	that graph building ||| tensor_forest hybrid python models	count=1
function_arg	[function_1] [arg_2] ||| [function_1] concat variable name [arg_2]	count=1
arg	imports the graph from ||| input_map return_elements	count=1
class	an event file ||| to event	count=1
function	default resnet ||| resnet	count=1
arg	tensor if possible ||| tensor perm	count=1
module	all the tensors linked ||| graph_editor	count=1
function	has no ||| v2 has no	count=1
function	[function_1] number ||| [function_1] [function_2]	count=6
module	a given ||| learn utils	count=1
function_arg	required to [arg_2] ||| [function_1] batch paddings input_shape [arg_2]	count=1
module	list of tensors corresponding ||| python ops	count=4
class	quantized ||| quantized	count=1
function	include classes and scores ||| build standardized signature def classify both	count=1
function	step true positives for ||| true positive at	count=1
arg	the input samples ||| batch_size verbose	count=3
function	returns the ||| ops	count=1
function	to restore variables ||| restore	count=1
function	graph containing ||| graph	count=1
function	in the presence ||| loop grads	count=1
module	returns predictions ||| layers	count=1
function	[function_1] and ||| python tools fuse [function_1] [function_2]	count=1
function	with respect to ||| precision	count=6
arg	list of items ||| items	count=3
function	to ops that match ||| filter ts from regex	count=1
function	log the ||| log op	count=1
function	write a sequence ||| write	count=1
function	a mean ||| mean	count=1
class	tests ||| sparse recall test	count=1
module	boolean tensor representing the ||| python ops	count=1
function	gradients at interesting points ||| gradient	count=1
module	of dimensions and assert ||| ops	count=1
class	with these parameters or ||| store	count=1
module	with default ||| contrib learn python learn	count=1
function	labels ||| labels	count=9
arg	input across ||| inputs	count=1
function	is not compatible with ||| assert is compatible with	count=1
module	batch of beams ||| contrib seq2seq python ops	count=1
function	list of file names ||| file names	count=1
function	legacy init op tensor ||| legacy init op tensor	count=1
function	softmax ||| softmax	count=7
module	be produced or ||| framework	count=1
class	the shape ||| gmmtest	count=1
function_arg	[function_1] handle ||| [arg_2] [function_1]	count=6
function	try all [function_2] ||| [function_2] [function_1]	count=3
class	"f" as the statistics ||| statistics	count=1
function	link [function_2] ||| [function_2] [function_1]	count=4
function	address of ||| address	count=1
function_arg	[function_1] single ||| [arg_2] [function_1]	count=1
function_arg	float graph [arg_2] ||| [arg_2] [function_1]	count=4
module	the end of ||| graph_editor	count=2
function	in train ||| in train	count=1
function	precision@k ||| k	count=1
class	tensor in [class_2] ||| [class_1] [class_2]	count=1
function	validate the ||| validate	count=1
module	from the ||| python	count=2
function	for ||| valid	count=1
module_class	student's [class_2] ||| [module_1] student [class_2]	count=1
function	valued [function_2] ||| [function_2] [function_1]	count=8
function	the tf session to ||| session	count=1
module	default ||| learn utils	count=1
function_arg	[function_1] files ||| [arg_2] [function_1]	count=4
function	various recall values ||| streaming recall at	count=1
module	representing this ||| ops	count=1
class	the enqueue ||| runner	count=2
class	set ||| base ui	count=1
function_arg	on [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	border of [arg_2] ||| [function_1] [arg_2]	count=1
function	predict ||| predict	count=7
function	and no scores ||| def classification6	count=1
function	list of shapes ||| shapes	count=2
arg	add its inputs ||| inputs state scope	count=2
function	a link [function_2] ||| [function_2] [function_1]	count=4
function	their defs ||| nodes map	count=1
arg	kernellinearclassifier estimator object ||| model_dir n_classes weight_column_name	count=1
arg	function for doing sharded ||| cls factor indices values	count=1
module	distributed floating point ||| contrib specs	count=1
function	load a tensor from ||| load tensor from	count=1
function	lists the [function_2] ||| [function_1] [function_2]	count=1
function	transforms each ||| sequences	count=1
function	from the ||| to item	count=1
module	the vocabulary dictionary and ||| preprocessing	count=1
module	instantiates a keras ||| python keras	count=1
function_arg	[function_1] filename ||| [arg_2] [function_1]	count=2
function	shape for input and ||| shape	count=1
function	state tensors ||| to state	count=1
function	computes the [function_2] ||| [function_1] [function_2] shape input_shape	count=1
module	with default ||| learn	count=1
arg	storing [arg_2] ||| [arg_1] [arg_2]	count=1
module	where the layer's ||| contrib keras python keras engine	count=1
function	legend ||| label legend	count=1
arg	the variables ||| variables	count=1
module	[module_1] the given ||| [module_2] [module_1]	count=6
arg	sparsetensor into ||| sp_input	count=1
function	creates a hook to ||| run hook	count=1
arg	[arg_1] tag ||| [arg_1] [arg_2]	count=8
function	wav [function_2] ||| [function_2] [function_1]	count=1
arg	produces ||| show_dataflow show_memory	count=1
module	integers ||| contrib keras python	count=1
class	the grad ||| grad	count=1
module	a numpy ||| python keras	count=1
arg	audio ||| audio	count=1
function	and file ||| dump file	count=1
function	infer ||| infer	count=2
class	be ||| type	count=1
module	with ||| python learn	count=2
module	previous output tensors ||| contrib grid_rnn	count=1
function	in ||| graph	count=1
function	[function_1] batch vector ||| [function_1] [function_2]	count=1
function	linked to ||| from regex	count=1
function	multi ||| multi	count=4
function	re-route both the ||| reroute	count=1
function	linear_model_fn but returns ||| model fn with model fn ops	count=2
function	with [function_2] ||| [function_1] [function_2]	count=32
module	two dimensions of tensor ||| contrib linalg python ops	count=1
function	to ||| string to	count=2
function	control ||| control	count=14
function	fetches ||| fetches	count=1
function	[function_1] directory containing ||| [function_2] [function_1]	count=3
arg	the unnormalized ||| inputs tag_indices sequence_lengths transition_params	count=1
arg	batch ||| batch	count=2
function	[function_1] context ||| [function_2] [function_1]	count=7
function	serialize an n-minibatch ||| serialize	count=1
function	int32 [function_2] ||| [function_1] dims [function_2]	count=1
function	step true positives ||| true positive at k	count=1
function	betainc a b ||| betainc	count=1
function	retrieves the output ||| output	count=5
module	building ||| hybrid python	count=1
class	a tensorflow ||| flow	count=1
function	the condition ||| pick scalar condition	count=1
function_arg	the root [arg_2] ||| [function_1] [arg_2]	count=1
module	run the cell ||| contrib rnn python	count=2
class	returns a condcontext ||| cond context	count=1
function	resource variable ||| resource	count=1
class	the cell and ||| grid rnncell	count=1
function	num_rows, possibly ||| num rows possibly	count=2
function	or its parent columns' ||| or parent	count=1
function	[function_1] tag ||| [function_2] [function_1]	count=3
function	define kernel ||| kernel	count=1
function	servers creates 2 ||| servers	count=1
arg	using tf nn softmax_cross_entropy_with_logits ||| onehot_labels weights label_smoothing	count=1
class	a reservoir ||| reservoir	count=1
function	derivatives for bilinear ||| bilinear	count=1
function	return a postfix ||| spec structure	count=1
function	depthwise 2-d ||| depthwise	count=1
arg	in input ||| inputs sequence_length merge_repeated	count=1
function	axis [function_2] ||| [function_2] [function_1]	count=4
function	boundary ||| boundary	count=1
function	and weighted [function_2] ||| [function_1] [function_2]	count=2
module	while training ||| learn python learn learn_io	count=2
function	tf placeholder for the ||| make placeholder from tensor	count=1
function	prepend (i e ||| prepend	count=1
class	data from the generator ||| generator enqueuer	count=1
module	handles starting and stopping ||| contrib slim python slim	count=1
function	the max pool ||| max pool	count=1
function	parse the object's ||| parse md	count=1
module	the end of t0 ||| contrib graph_editor	count=1
module	finish computation of ||| python ops	count=1
module	labels ||| cli	count=1
class	a menuitem from ||| menu	count=1
function	current [function_2] ||| [function_2] [function_1]	count=2
function	gradient function ||| set grad	count=1
module	return dict symbol name ||| tools docs	count=1
function_arg	[function_1] using summarize_activation ||| [arg_2] [function_1]	count=1
function	check for [function_2] ||| [function_1] [function_2]	count=1
module	a given directory ||| python learn utils	count=1
function	and numpy ||| numpy	count=1
function_arg	[function_1] with signatures ||| [arg_2] [function_1]	count=1
function	node of a ||| node	count=1
class	these parameters ||| variable store	count=1
function	switch for a ||| switch	count=1
function	and attention ||| attention	count=1
module	iterable of [module_2] ||| [module_1] [module_2]	count=2
function	empty ||| empty	count=2
module_class	[module_1] file ||| [module_1] writer event [class_2] writer	count=3
function	[function_1] valued features ||| [function_2] [function_1]	count=16
arg	lower triangular ||| diag tril	count=1
arg	context_def ||| context_def import_scope	count=1
module	decode_gif, decode_jpeg, and ||| ops	count=1
module	sets ||| python ops	count=1
function	test for ||| test ksize2x2stride1x1rate1x1same	count=1
module	returns ||| framework python framework	count=2
arg	for this ||| dtype	count=1
function	to the [function_2] ||| [function_1] flat [function_2]	count=1
function	[function_1] tables ||| [function_1] [function_2]	count=5
arg	points ||| points	count=1
class	constructs a metadata for ||| metadata	count=1
class	a node that yields ||| record input	count=1
arg	tensor to a list ||| tensor	count=2
class	tensor have the ||| tensor	count=1
class	a tensor for the ||| builder	count=1
function	generate a training ||| training	count=1
module	associated with ||| backend event_processing	count=1
function	[function_1] conv layer ||| [function_2] [function_1]	count=2
function_arg	inverse [arg_2] ||| [function_1] log det jacobian [arg_2]	count=1
function	the ||| get collection proto	count=1
function	string name ||| name	count=4
function	[function_1] input dimension ||| [function_2] [function_1]	count=1
function	return the delay between ||| secs	count=1
function	dfs ||| dfs from node	count=1
function	is an [function_2] ||| [function_2] [function_1]	count=1
arg	row and col batches ||| batch_size project_row projection_weights	count=1
function_arg	save the [arg_2] ||| [arg_2] [function_1]	count=1
class	event file to ||| summary	count=1
arg	specified min and max ||| t clip_value_min clip_value_max name	count=1
function	attribute ||| attr	count=1
function	restore ||| sharded restore ops	count=2
arg	x [arg_2] ||| [arg_1] [arg_2]	count=11
class	the stack ||| graph stack	count=1
arg	between the labels ||| labels	count=4
function	sentinel event ||| sentinel event	count=1
arg	dnnlinearcombinedestimator instance ||| head model_dir linear_feature_columns linear_optimizer	count=1
function	a one-hot ||| one hot	count=1
module	an ||| cli	count=2
module	first ||| layers python layers	count=1
class	this data [class_2] ||| [class_2] [class_1]	count=1
function	runner to the ||| runner	count=1
function	computes the shape ||| output shape	count=1
function	rank ||| rank	count=6
module	are sessionrunhook ||| python estimator	count=1
function	the end ||| on batch end	count=1
function_arg	normalization on [arg_2] ||| [arg_2] [function_1]	count=6
class	with no rich attributes ||| rich line	count=1
module	build ||| learn python learn utils	count=1
function	model_fn for ||| model fn	count=1
function	[function_1] list ||| [function_1] [function_2]	count=7
module	of two ||| contrib labeled_tensor python ops	count=1
function	scalars function ||| scalars	count=1
module	confirm ||| python framework	count=1
class	non-reference dtype based ||| dtype	count=1
function	sparsecolumns accept [function_2] ||| [function_1] [function_2]	count=3
arg	logits and [arg_2] ||| [arg_2] [arg_1]	count=2
function	condition ||| rank condition	count=1
function	[function_1] standard services ||| [function_2] [function_1]	count=1
function	a @{tensorflow : ||| cc	count=1
function	[function_1] lr ||| [function_2] [function_1]	count=2
class	with ||| assign op test	count=1
function	ranges ||| ranges	count=1
function_arg	[function_1] the graph ||| [arg_2] [function_1]	count=2
function	inception v2 ||| inception v2	count=1
function	routine wrapper complains about ||| make dataset	count=1
module	return indexies ||| learn	count=2
module	a sequence of integers ||| keras	count=2
function	from the files ||| build guide index	count=1
function	op to use based ||| to hash bucket fn	count=1
function	a menuitem from the ||| to item	count=1
arg	representation ||| dictionary	count=1
function	attr ||| attr	count=1
function	feed ||| with tensor feed keys	count=1
module	a rnn cell ||| rnn	count=1
arg	[arg_1] [arg_2] ||| [arg_2] [arg_1]	count=760
function	to ops that match ||| regex	count=1
module	get an ||| tools api lib	count=1
function_arg	train [arg_2] ||| [arg_2] [function_1]	count=2
function	[function_1] file ||| [function_2] [function_1]	count=26
module	sequence of ||| keras python keras	count=1
function	values ||| sample	count=1
arg	a tag ||| tag	count=1
arg	a state saving ||| cell features	count=1
function	absolute test ||| test	count=1
function	performs dropout ||| recurrent dropout	count=1
class	information [class] session ||| [class]	count=1
module	proper shape values ||| python ops distributions	count=1
function	a summary of ||| spec summary	count=1
function_arg	[function_1] [arg_2] atomically ||| [function_1] [arg_2]	count=2
function	with hashed bucket configuration ||| with hash bucket	count=1
function	placeholder ||| placeholder from tensor	count=2
module	__init__ which ||| distributions python ops bijectors	count=1
module_class	[module_1] tensorarray ||| [module_1] tensor [class_2] scatter indices value name	count=3
class	initializer ||| tensor initializer	count=1
module	values then return tensor ||| distributions	count=1
function	a binary ||| binary	count=1
class	that selects ||| walsmatrix factorization test	count=1
function	or op [function] ||| map structure up [function]	count=3
module	the list of the ||| python ops	count=1
class	get ||| profile analyzer	count=1
function	static shapes ||| flip vector to matrix static	count=1
module	summaries ||| summary	count=1
class	tensor ||| tensor handle	count=2
function	caches and returns ||| get	count=1
function	all variable names in ||| variable names	count=1
function	version ||| maybe assert	count=1
arg	image ||| image saturation_factor name	count=1
function	names ||| convert names	count=1
arg	path where path ||| path	count=1
arg	inputs to ||| inputs state	count=2
function	invert the [function_2] ||| [function_2] [function_1]	count=1
function_arg	objective [arg_2] ||| [arg_2] [function_1]	count=1
function	returns the learning ||| learning	count=1
function	arg num_rows, possibly add ||| num rows possibly add	count=1
function_arg	[function_1] context_def ||| [function_1] [arg_2]	count=2
arg	looperthread that ||| timer_interval_secs target args kwargs	count=1
function	jacobian is ||| jacobian	count=1
arg	condition and body to ||| body original_loop_vars	count=1
function	python callable that runs ||| make callable	count=1
function_arg	[function_1] given ||| [function_1] name [arg_2]	count=2
module	debug dump from the ||| python debug	count=1
class	user ||| ui	count=1
class	whether this plugin ||| plugin	count=3
function	save ||| train save load	count=1
function	first operation [function_2] ||| [function_1] [function_2]	count=2
arg	axis [arg_2] ||| [arg_2] [arg_1]	count=2
module_class	monitored [class_2] ||| [module_1] [class_2]	count=1
arg	ops to update is_row_sweep_var ||| processed_row_indices processed_col_indices train_op	count=1
class	of this ||| base	count=2
function	variable ||| resource	count=2
module	to the [module_2] ||| [module_1] [module_2]	count=4
function	with given ||| with	count=3
function	of the signaturedef ||| from meta graph def	count=1
function	reads ||| read batch	count=1
arg	tensors from tensors ||| tensors capacity num_threads shared_name	count=1
function	arg_scope ||| arg scope	count=2
function	check the rank of ||| check rank	count=1
function	this test ||| test	count=1
function	map that records ||| map	count=1
function	with respect to sparse ||| sparse precision at top	count=1
function	[function_1] boston ||| [function_1] [function_2]	count=1
function	reads the savedmodel pb ||| read	count=1
function	step false positives for ||| false positive	count=1
function	default schedule ||| default schedule	count=2
module	ops that match ||| contrib graph_editor	count=1
arg	if condition is ||| condition	count=1
function	computes sparse [function_2] ||| [function_2] [function_1]	count=1
function	exception on bad ||| bad file	count=1
function	"op" ||| get gradient	count=1
function	temporary directory for tests ||| get temp dir	count=1
function	a tensor ||| get dense tensor	count=1
module	tensor of ||| distributions python ops	count=1
arg	given in input ||| inputs sequence_length	count=2
class	multivariate normal ||| multivariate normal linear operator	count=1
function	to row ||| row	count=1
function	vector x [function_2] ||| [function_2] [function_1]	count=6
arg	runs a particular step ||| fetches feed_list	count=1
module	as the last ||| estimators	count=3
function	creates an instance ||| init	count=1
function_arg	[function_1] predictions ||| [arg_2] [function_1]	count=3
module	sequence ||| contrib	count=1
function_arg	min [arg_2] ||| [arg_2] [function_1]	count=1
module	this ||| contrib seq2seq python ops	count=1
function	binary operation that ||| binary op	count=2
function	all required ||| required	count=2
function	variation ||| variation	count=3
module	names ||| learn python learn dataframe	count=1
function	[function_1] at a ||| [function_2] [function_1]	count=1
module	bottleneck network ||| slim python slim nets	count=1
arg	shape for ||| shape	count=1
function	[function_1] status labels ||| [function_2] [function_1]	count=1
function	and numpy masking ||| versus numpy	count=1
function	strings e g filenames ||| string	count=1
function	a report of the ||| report	count=1
class	a recordinput ||| record input	count=1
arg	line ||| line	count=3
function	to init and ||| init	count=1
function	return the ready ||| ready	count=1
module	slice of ||| python ops	count=1
module	values then ||| python	count=1
class	for the given ||| lazy	count=1
arg	[arg] containing ||| [arg]	count=1
arg	with projected input for ||| with_c	count=1
function	dict symbol name ||| guide	count=1
function	arrays ||| array	count=1
function	ancestor ||| gather	count=1
function	forward tensor that ||| forward	count=1
class	from the generator into ||| generator	count=1
class	to [class_2] ||| [class_1] [class_2]	count=4
arg	conjugate prior on the ||| prior scale s	count=1
arg	num_epochs times and ||| num_epochs name	count=2
function	bad way ||| test construction pollution	count=1
class	without extra layers before ||| test	count=1
arg	to a hdf5 file ||| filepath overwrite	count=1
module	the derivative of ||| ops	count=1
function	a new ||| new attr	count=1
function	before ||| before	count=1
function	the tfdbg ||| tfdbg	count=1
function	test_loss ||| end to end	count=1
arg	permute ||| axis_order	count=1
class	[class_1] area ||| [class_2] [class_1]	count=3
function	non-overlapping lanes for the ||| lanes	count=1
function_arg	[function_1] function ||| [function_1] [arg_2]	count=2
module	tensors that with integer ||| learn	count=1
arg	the given tensor ||| tensor	count=1
function	to merge with ||| merge	count=1
module	this object overriding components ||| seq2seq python ops	count=1
function	original [function_2] ||| [function_2] [function_1]	count=2
module	initialize the ||| rnn python ops	count=2
function	calculate a mean ||| mean	count=1
arg	a dimension ||| dim	count=1
function	partial run ||| partial run setup	count=1
function	[function] 1d tensor ||| forward [function] shape	count=3
function_arg	[function_1] layers ||| [arg_2] [function_1]	count=5
class	mappers ||| linear classifier test	count=2
function	rgb color ||| rgbcolor	count=1
function	description of the ||| description	count=1
function	as ||| feeding	count=1
function	weighted sum [function_2] ||| [function_2] [function_1]	count=2
module	of losses ||| contrib losses python losses	count=1
arg	input tensors x ||| x	count=1
function	[function_1] if ||| [function_2] [function_1]	count=1
module	its ||| keras engine	count=1
function_arg	recall of [arg_2] ||| [function_1] [arg_2]	count=4
function	test that ||| test basic	count=1
arg	to apply conv + ||| x filters num_row num_col	count=1
class	the op (e g ||| operation	count=1
function	representing number of bytes ||| bytes	count=1
function	is raised when loss ||| loss	count=2
arg	from graph_def into ||| graph_def	count=1
function	a switch op ||| switch	count=1
class	of ||| relaxed bernoulli	count=1
module	data as input ||| contrib learn python learn estimators	count=5
function	indices in the ||| indices	count=1
function	[function_1] iff ||| [function_1] loop [function_2]	count=1
class	the decoder can ||| decoder	count=1
function_arg	dict [arg_2] ||| [arg_2] [function_1]	count=1
function	loss calculation ||| loss	count=8
module	number of dimensions needed ||| python ops	count=1
function	the values ||| output values	count=3
function	against the partition ||| dump	count=1
class	of all keys ||| mutable dense hash	count=1
class	should ||| event accumulator test	count=1
class	test a ||| test	count=1
module	a numpy ||| keras	count=1
module	list ||| python training	count=1
arg	input_fn diffs from ||| y batch_size num_epochs	count=1
module	instantiate a keras tensor ||| keras python keras	count=1
function	enter the [function_2] ||| [function_1] grad [function_2]	count=1
arg	name as ||| name	count=1
function	evaluates the model given ||| evaluate	count=1
function	prefix [function_2] ||| [function_2] [function_1]	count=2
function	inserts a placeholder ||| placeholder	count=2
function	[function_1] feature ||| [function_2] [function_1]	count=3
class	converts a hparams ||| hparams	count=1
function	for the sparseadd ||| sparse add grad	count=1
function	to colocate ||| maybe colocate	count=1
function	values from ||| values from	count=1
module	factorization ||| contrib factorization python	count=1
function	partitioner to [function_2] ||| [function_2] size [function_1]	count=1
module	helper which properly compares ||| distributions	count=1
class	woodbury ||| operator pd	count=1
function	beginning of ||| begin	count=1
function	node from which ||| node	count=1
arg	values to ||| values dtype	count=1
function_arg	dequeues [arg_2] ||| [function_1] [arg_2]	count=3
function	and feed conversion functions ||| conversion functions	count=1
class	multivariate normal ||| multivariate normal tri l	count=1
function_arg	[function_1] output ||| [function_1] [arg_2]	count=3
module	elbo ||| python ops	count=1
function	[function_1] task in ||| [function_2] [function_1]	count=2
function_arg	loads the [arg_2] ||| [function_1] [arg_2]	count=1
function	get ||| get	count=39
class	index ||| guide index	count=1
function	by ||| by	count=1
function	main menu for ||| add main menu	count=2
function_arg	the variable [arg_2] ||| [function_1] apply sparse grad [arg_2]	count=1
class	a tensor ||| lazy	count=1
module	given ||| python feature_column	count=2
function	the latest [function_2] ||| [function_1] [function_2]	count=1
function	slot named ||| slot	count=1
class	file to ||| summary writer	count=1
function	bprop [function_2] ||| [function_2] [function_1]	count=1
arg	to create batches of ||| batch_size capacity enqueue_many	count=1
module	estimate of [module_2] ||| [module_1] [module_2]	count=1
function	restore graph from ||| infer	count=1
arg	tensors ||| tensors session	count=1
function	get the output ||| output	count=1
module	component ||| python learn estimators	count=2
function	static valueerror ||| assert static	count=1
module_class	the declared dropouts ||| ops dropout wrapper	count=1
function	[function_1] possibly add ||| [function_1] [function_2]	count=6
function	returns a header ||| get header	count=1
function	maps input ||| preprocess input	count=1
function_arg	initializes a [arg_2] ||| [function_1] model_dir [arg_2]	count=1
function	replaces a concat ||| concat	count=1
module	event ||| python summary	count=2
function	[function_1] the state ||| [function_1] [function_2]	count=1
function	key not existed in ||| unique target key	count=1
function_arg	[function_1] [arg_2] ||| [function_1] names [arg_2]	count=2
module	of a tensor ||| contrib keras python keras	count=1
function	source files that ||| source	count=1
function	against a numpy implementation ||| total variation numpy	count=1
function	rank ||| rank tensor	count=2
module	logistic ||| learn utils	count=1
arg	a tensor ||| name as_ref	count=1
module	retrieves an ||| python keras engine	count=1
function_arg	dict [arg_2] ||| [function_1] [arg_2]	count=1
function	actually cross correlation ||| non	count=1
function	checks the validity of ||| check	count=1
function	model graph and returns ||| get	count=5
module	cli ||| cli	count=2
arg	the screen output ||| output node_name enable_list_tensors	count=1
function	read queue batch and ||| read keyed batch features shared queue	count=1
module	gradient for ||| rnn python ops	count=1
function	types for ||| dtypes	count=1
module	the eventfilewriter ||| python summary	count=1
arg	set for a func ||| func	count=1
module_class	[module_1] cudnn to ||| [module_1] [class_2] params	count=6
class	constructs the summary ||| summary	count=1
class	tests ||| combined regressor test	count=5
module	1 outcome (vs ||| ops	count=1
function	clusters centers [function_2] ||| [function_1] [function_2]	count=1
module	tensorflow/ ||| platform	count=1
function	[function_1] as_iterable=false ||| [function_1] [function_2]	count=2
class	operator is ||| operator	count=1
arg	grad * ||| op grad	count=1
arg	[arg_1] and values ||| [arg_2] [arg_1]	count=1
function	network instance given the ||| net	count=1
function	name -> _guideref ||| index	count=1
arg	keys [arg_2] ||| [arg_1] [arg_2]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] input args [arg_2]	count=4
function	this graph ||| graph	count=1
module	this ||| python	count=1
function	dict symbol name ||| index	count=1
function	[function_1] in a ||| cli curses ui auto [function_1] [function_2]	count=1
function	inputs of ||| inputs tensor info from meta graph	count=1
function	[function_1] [function_2] ||| [function_1] to sparse [function_2]	count=3
function	a key ||| key	count=1
arg	as specified by tags ||| sess tags export_dir	count=1
class	underlying tensorflow ||| base session	count=1
function_arg	[function_1] the given ||| [function_1] name [arg_2]	count=3
function	model variable with ||| model variable	count=1
function_arg	ratio [arg_2] ||| [function_1] [arg_2]	count=2
module	returns a dataframe with ||| python learn dataframe	count=1
function	a rank rfft ||| fft length for rfft	count=1
function	sampled softmax ||| sampled softmax	count=1
function	end ||| on epoch end	count=1
module_class	[module_1] adadelta ||| [module_1] [class_2]	count=6
module	the vocabulary dictionary ||| learn python	count=1
function	that match the ||| regex	count=1
module	version ||| distributions	count=1
function_arg	[function_1] thumbnails and ||| [arg_2] [function_1]	count=4
arg	a polymorphic ||| cond ex_type msg	count=1
module	a list of tensor ||| contrib layers python ops	count=1
arg	prior on the ||| prior scale	count=1
function	fixed ||| fixed	count=1
function	shapes and ||| shapes	count=1
function	the given boundary ||| boundary ops	count=1
module	colocate_clip_ops_with_vars ||| contrib opt	count=1
function	exit ||| exit grad	count=1
class	tests ||| streaming sparse recall test	count=1
function	stores trace information for ||| trace info	count=1
function	the resultant of an ||| compute elemwise op	count=1
arg	[arg_1] single tensor ||| [arg_2] [arg_1]	count=6
function	returns the directory containing ||| dir	count=1
arg	in input ||| inputs	count=2
class	that is part of ||| sequential	count=1
class	table outputs the ||| hash table	count=2
function	signaturedef proto ||| as signature def	count=1
module	of vectors ||| ops	count=1
module	(vs 0) ||| ops distributions	count=1
function	a state ||| static state	count=1
function	with vocabulary ||| with vocabulary	count=1
module	number of dimensions needed ||| contrib distributions python ops	count=1
module_class	[module_1] eventmultiplexer ||| tensorboard backend [module_1] [class_2]	count=1
function	begins ||| begin	count=1
function	the dump [function_2] ||| [function_2] [function_1]	count=4
arg	read feature_values ||| feature_values keys features dtypes	count=1
function	string_to_hash_bucket op to use ||| string to hash	count=1
class	some sample data ||| data	count=1
arg	that satisfies ||| static_condition dynamic_condition	count=1
function	true positives ||| sparse true positive at	count=2
function_arg	[function_1] xs ||| [arg_2] [function_1]	count=1
arg	match the ||| ops	count=1
function	integer weights ||| integer weighted	count=1
function	the original arguments ||| original args	count=2
module	equal to ||| python ops distributions	count=1
function	op to ||| string to hash bucket	count=1
function	impose desired axis ||| impose axis	count=2
module	list of ||| rnn python ops	count=1
arg	to create ||| capacity	count=1
module_class	the underlying tf ||| contrib graph_editor sub	count=1
function	clips values ||| clip by global	count=1
function	vocabulary ||| transform	count=1
arg	categories ||| unused_y	count=1
function	default signature from the ||| default signature	count=1
class	entire operator ||| operator pdbase	count=2
module	all the op ||| contrib graph_editor	count=1
function	sessionrunhook ||| type	count=1
function	internal ||| internal	count=1
function	in the [function_2] ||| [function_1] [function_2]	count=1
class	with output ||| output	count=1
module	of classes ||| python ops	count=2
class	of metadata ||| metadata	count=1
function	add an [function_2] ||| [function_2] [function_1]	count=7
function	the top ||| top	count=1
function	graph in tensorboard ||| to tensorboard	count=1
function	placeholder ||| placeholder with	count=1
module_class	[module_1] "deferred" ||| [module_1] [class_2]	count=6
function	the multivariate digamma ||| multi digamma	count=1
arg	an ||| name	count=5
function_arg	slice op ||| slice grad op	count=1
function	ops that ||| ts from	count=1
arg	feature [arg] values ||| [arg] sp_values vocab_size	count=1
module	helper to ||| python ops	count=2
module	to the ||| python ops	count=3
function	to the main page ||| main page	count=1
module	integer tensor ||| python keras	count=1
module	transforms ||| keras python keras	count=1
arg	recall@k of top-k ||| top_k_predictions class_id	count=3
class	matrix factorization ||| factorization	count=1
function	cumulative sum ||| cumsum	count=2
function	[function_1] the debug ||| [function_1] [function_2]	count=3
arg	its inputs ||| inputs state	count=2
module	function of ||| python	count=1
function	sets the list of ||| set	count=1
function	tf placeholder ||| make placeholder from tensor	count=1
function	save path ||| save path	count=2
function	the node's statistics ||| stats for node def	count=1
module	each ||| contrib	count=1
function	inside the subgraph ||| inside	count=1
arg	given ids and ||| sp_ids sp_weights partition_strategy	count=1
function	called by base class ||| operator	count=1
arg	compute/validate an ||| input_shape default_size min_size data_format	count=1
function	input tensors ||| source inputs	count=2
function_arg	[function_1] weights + ||| [arg_2] [function_1]	count=2
class	to this context ||| while context	count=1
function	control flow context for ||| context	count=1
module	[module_1] the transformer ||| [module_1] [module_2]	count=1
arg	all steps and ||| noutput scope name	count=1
module	n dimensional version of ||| contrib learn python learn ops	count=1
function	symbol name -> ||| index	count=1
function	serialized nodedef representation ||| node def	count=1
class	g ||| operation	count=1
function	compute number of ||| size	count=1
function	[function_1] distance to ||| [function_1] [function_2]	count=1
function	_guideref from the ||| index	count=1
function_arg	[function_1] in ||| [function_1] var_names_to_values [arg_2]	count=3
function	sparse and ||| sparse input	count=1
class	test ||| rnn estimator test	count=1
class	add ||| base saver builder	count=3
function	weight ||| weights	count=7
arg	metric and ||| scalar_tensor	count=1
module	of ||| contrib	count=8
function	lists of ||| name lists	count=2
function	should ||| should	count=3
function	step update for ||| step	count=4
function	backward walk ||| walks	count=1
arg	of input_tensor using ||| input_tensor	count=1
function	[function_1] tensor from ||| [function_1] [function_2]	count=2
function	checkpoint from a ||| create checkpoint from	count=2
function	representation of the tfdbg ||| get tfdbg	count=1
class	control outputs of ||| control outputs	count=2
module	returns lists of the ||| contrib linear_optimizer python ops	count=1
function_arg	a filename [arg_2] ||| [function_1] [arg_2]	count=3
arg	the entire tensor ||| level noise_shape	count=1
function	returns prediction [function_2] ||| [function_2] [function_1]	count=2
module	dictionary and return indexies ||| learn python	count=1
module	n dimensional version of ||| python learn ops	count=1
module	internal vocabulary based ||| keras python keras preprocessing	count=1
function	save ||| train save	count=1
module	all ops ||| ops	count=1
arg	given table with keys ||| table	count=1
class	get ||| tensorboard server test	count=1
function	meta [function_2] ||| [function_1] [function_2]	count=2
function	[function_1] as_iterable=false ||| [function_2] [function_1]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] with input replacements [arg_2]	count=1
function	attribute to generate ||| get attribute	count=1
module	this object overriding components ||| python ops	count=1
module	loss ||| losses python losses	count=4
module	filters ||| contrib keras python keras	count=1
function	returns the integer indices ||| get integer indices	count=1
function	a collection ||| collection	count=1
function_arg	[function_1] strings ||| [arg_2] [function_1]	count=2
module	and ||| contrib learn	count=1
class	a hparams object ||| hparams	count=1
module	a bijector ||| distributions python ops bijectors	count=1
class	returns a shape ||| tensor shape	count=1
arg	for transposed 3d convolution ||| filters kernel_size strides	count=1
module	values ||| distributions	count=1
function	and names ||| and slice inputs	count=1
arg	given definition ||| server_or_cluster_def job_name task_index protocol	count=1
function	[function_1] given sampled_candidates ||| [function_2] [function_1]	count=3
function_arg	control dependency [arg_2] ||| [arg_2] [function_1]	count=1
arg	targets are ||| targets	count=1
arg	defines the ||| weight_decay batch_norm_decay batch_norm_epsilon	count=1
module	a numpy image tensor ||| python keras preprocessing	count=3
class	test ||| operator derived class test	count=2
function	legend ||| legend	count=1
arg	baseestimator instance ||| model_dir config	count=1
function	test input ||| test input	count=2
function	loss of ||| loss	count=1
module	loaded module ||| contrib tensor_forest hybrid	count=1
arg	labels and ||| labels	count=6
function	to the default ||| default	count=2
function_arg	wrapper [arg_2] ||| [arg_2] [function_1]	count=6
module	that with integer ||| learn	count=1
function_arg	[function_1] it ||| [function_1] [arg_2]	count=2
function	column filled with ||| column	count=1
arg	with concentration ||| concentration	count=1
arg	replaces all ||| sess input_graph_def output_node_names variable_names_whitelist	count=1
arg	images ||| tensor max_images	count=1
function_arg	[function_1] a ||| [arg_2] [function_1]	count=3
function	determinant for every batch ||| determinant	count=1
module	data ||| learn datasets	count=1
function	docstring ||| with args kwargs	count=1
class	validationmonitor ||| validation monitor	count=1
function	mean ||| mean	count=15
function	weighted sparse [function_2] ||| [function_1] [function_2]	count=1
function	valued features ||| valued features	count=5
function	[function] or output ||| get [function]	count=1
arg	metagraphdefs [arg] ||| tester [arg]	count=2
module	fused kernel for ||| python ops	count=1
arg	tensors ||| cls tensors	count=1
arg	if op was ||| op func	count=1
function	all inputs ||| inputs	count=1
function	from a dict containing ||| dict to	count=1
arg	function for softmaxcrossentropywithlogits ||| grad_loss grad_grad	count=1
module	return a list of ||| python ops	count=3
class	descent [class_2] ||| [class_1] [class_2]	count=1
module	sum ||| framework	count=1
module	total number of ||| metrics python ops	count=1
class	remap ||| sub graph view	count=6
function	the ||| from	count=2
function	[function] current run() ||| get run debug [function]	count=1
function	as input [function_2] ||| [function_2] [function_1]	count=1
class	a worker [class_2] ||| [class_1] [class_2]	count=2
module	all are sessionrunhook raises ||| python estimator	count=1
function	services for ||| services	count=1
class	remove ||| control flow context	count=1
function	flags [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] schedule for ||| [function_2] [function_1]	count=3
module	load() ||| backend event_processing	count=2
function_arg	minimum of [arg_2] ||| [arg_2] [function_1]	count=2
class	handler with the ||| handler	count=1
function	the row ||| rows	count=1
arg	and return indexies ||| x	count=1
function	unused nodes from ||| unused from	count=1
module	reduced ||| contrib slim python slim nets	count=1
function_arg	absolute error [arg_2] ||| [arg_2] [function_1]	count=3
function_arg	[function_1] annotation ||| [arg_2] [function_1]	count=4
function	computes a safe mean ||| safe mean	count=1
module	vector [module_2] ||| [module_2] [module_1]	count=3
function	have invalid type ||| invalid number of classes	count=1
module	[module_1] of x ||| [module_2] [module_1]	count=4
function	[function_1] regression signature ||| [function_1] [function_2]	count=1
function	[function_1] indices of ||| [function_2] [function_1]	count=1
function	training graph ||| training graph	count=2
function_arg	cached tensor [arg_2] ||| [function_1] [arg_2]	count=1
arg	specified scope ||| scope	count=2
function_arg	global [arg_2] ||| [arg_2] [function_1]	count=1
function	benchmark single bprop step ||| single bprop step	count=1
function	return the ready op ||| ready op	count=1
arg	fills in c_prev [arg_1] [arg_2] ||| [arg_1] [arg_2]	count=3
function	quantized ||| quantized	count=1
function	[function_1] current meta ||| [function_1] [function_2]	count=1
function	is ||| assert is	count=1
arg	estimator using export_fn if ||| eval_result checkpoint_path	count=1
function	re-route both ||| reroute	count=1
function	an absolute [function_2] ||| [function_1] [function_2]	count=3
arg	hdf5 save file ||| filepath by_name	count=1
function	border ||| border	count=1
function	maximum of two tensors ||| maximum	count=1
function	and conv2d ||| fwd conv2d	count=1
function	show ||| show	count=1
arg	the provided run ||| run	count=1
arg	model ||| model line_length	count=1
function	key ||| key	count=4
function	merge ||| apply merge	count=1
function	should be ||| should	count=1
arg	path name to ||| path	count=1
function	legacy init op ||| legacy init op	count=1
arg	from savedmodel ||| saved_model_dir tag_set	count=1
function	the tensors linked ||| ts	count=1
function	sequence ||| crf sequence	count=1
function	the fetches used in ||| fetches info	count=1
module	the transformer ||| layers python	count=1
class	random ||| random	count=2
module	initialize a batch of ||| ops	count=2
function	return a tensor to ||| label tensor	count=1
module	to this ||| python framework	count=1
function	computes gradients for "op" ||| get gradient	count=1
module	helper which properly ||| distributions	count=1
function	sdcaoptimizer ||| sdca optimizer	count=3
arg	specified dimension to ||| dim epsilon	count=1
function	the feed [function_2] ||| [function_1] [function_2]	count=7
function	walsfactorization ||| wals factorization	count=1
function	delay between summary computations ||| summaries secs	count=1
function	return the summary ||| summary	count=1
arg	to apply conv ||| filters	count=1
function	from the [function_2] ||| [function_1] [function_2]	count=1
module	the ||| learn preprocessing	count=2
module	of ||| contrib distributions python ops	count=31
function	values then return ||| assert valid sample	count=1
function_arg	[function_1] rnncell cell ||| [function_1] [arg_2]	count=1
function	initializer that ||| initializer	count=1
arg	graph element ||| element_name	count=1
arg	[arg_1] top-k predictions ||| [arg_2] [arg_1]	count=4
function	size of a ||| size	count=1
function	noise-contrastive estimation [function_2] ||| [function_2] [function_1]	count=1
function_arg	[function_1] ts0 ||| [arg_2] [function_1]	count=1
module	argument in ||| python	count=1
function	total variation ||| total variation	count=4
module	to make ||| tools compatibility	count=1
arg	kicks off ||| workers max_q_size wait_time	count=1
function	legacy init op tensor ||| get legacy init op tensor	count=1
arg	a model ||| model line_length positions	count=1
function	update the [function_2] ||| [function_1] [function_2]	count=1
function	add a command ||| add	count=1
function	creates a checkpoint from ||| checkpoint from	count=1
arg	a cell with added ||| cell input_keep_prob output_keep_prob state_keep_prob	count=1
function	the labels into ||| labels	count=1
module_class	[module_1] layer ||| [module_1] [class_2]	count=22
module	keras tensor ||| python keras	count=1
arg	as the input ||| data	count=1
function	tall ||| tall	count=2
function	ops that match ||| ts	count=1
module	latest ||| python training	count=1
class	stack is ||| graph stack	count=1
arg	the values of many ||| tuples	count=1
function	[function_1] [function_2] ||| [function_1] unique target [function_2]	count=4
module	specified ||| python slim	count=1
function	of the node ||| node	count=1
function	with ||| test	count=2
arg	[arg_1] that ||| [arg_2] [arg_1]	count=2
function	test data ||| test data	count=5
function	prediction [function_2] ||| [function_2] [function_1]	count=2
function	gets or creates the ||| get or create	count=1
function	for proper ||| assert valid sample	count=1
function	a richtextlines ||| lines	count=1
function_arg	[function_1] shallow_tree ||| [function_1] [arg_2]	count=2
function	example protos ||| example	count=1
module	none ||| framework	count=1
function	instantiates a model from ||| from config	count=1
function	returns the control ||| get control	count=1
module	[module_1] sample ||| [module_1] [module_2] distribution	count=1
function	tensor watch [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] top ||| [function_1] [function_2]	count=1
function	a sequence ||| texts to sequences	count=1
arg	session for given tensors ||| session step tensors	count=1
module	get a menuitem from ||| python debug cli	count=1
function	from signatures ||| convert signatures	count=1
function	an external ||| external	count=1
arg	[arg_1] and ||| [arg_2] [arg_1]	count=2
function_arg	[function_1] given serialized ||| [arg_2] [function_1]	count=1
module	decode_jpeg, and ||| python ops	count=1
function	get a ||| to	count=1
function	record variable ||| record variable	count=1
function	creates logistic [function_2] ||| [function_2] [function_1]	count=3
function	clips ||| clip	count=1
function	[function_1] spatial shear ||| [function_2] [function_1]	count=2
function	return the page ||| function page	count=1
function	and runoptions ||| and run options	count=2
function	integer ||| integer weighted	count=1
function	lists of fetches and ||| fetch and name lists	count=1
module	sequence of ||| keras python	count=1
function	the raw handle ||| get raw handle	count=2
class	[class_1] outputs dictionary ||| [class_1] [class_2]	count=1
function	by ||| norms	count=1
function	fingerprint concatenation has ||| v2 has	count=1
module	savedmodel pbtxt file containing ||| saved_model	count=1
function	features ||| linear features	count=2
arg	a tensor to ||| name	count=1
function	for proper ||| valid sample	count=1
arg	to_proto and from_proto functions ||| proto_type to_proto from_proto	count=1
module	append ||| python layers	count=1
class	handler ||| item handler	count=1
class	of run() ||| session run	count=1
function	scope to ||| scope	count=1
function	for proper shape ||| valid sample	count=1
class	watch [class_2] ||| python debug wrappers [class_1] [class_2]	count=1
arg	boundaries ||| boundaries name	count=1
class	with ||| test	count=3
function	un-normalized l1 loss of ||| l1 loss	count=1
function	slot for ||| slot	count=1
function_arg	converting objects [arg_2] ||| [function_1] function [arg_2]	count=2
module	batch systems of equations ||| ops	count=1
function	the id tensor ||| id tensor	count=6
class	tensor ||| sparse test	count=2
function	runoptions ||| run options	count=3
arg	a input ||| inputs	count=1
function	calculates true positives ||| sparse true positive	count=1
function	string representing number of ||| str	count=1
arg	and body to ||| body loop_vars shape_invariants	count=1
module	tensor ||| python ops distributions	count=2
function	the shape ||| output shape	count=1
module	transforms each text ||| python keras	count=1
module	to ||| contrib	count=1
arg	x y ||| x y	count=4
function	generate placeholder ||| placeholder	count=1
class	wrapper should work also ||| wrapper session test	count=1
function_arg	[function_1] shape ||| [arg_2] [function_1]	count=8
function	csv ||| csv with feature	count=1
function	domain ||| domain	count=1
function	from the files ||| guide	count=1
arg	variables from multiple devices ||| filename_tensor per_device restore_sequentially reshape	count=1
function_arg	line [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] [function_2] ||| [function_2] to string table [function_1]	count=2
function	traceback of a ||| node traceback	count=1
function	in the collection with ||| get collection ref	count=1
function_arg	batch matrix [arg_2] ||| [function_1] to vector [arg_2]	count=1
function	feature extraction [function_2] ||| [function_2] [function_1]	count=4
function	symbol name ||| build guide index	count=1
module	graph building doesn't modify ||| tensor_forest hybrid	count=1
module	a sequence ||| contrib keras python keras	count=1
arg	r^k, for k ||| loc atol rtol validate_args	count=1
function	[function_1] fixed number ||| [function_2] [function_1]	count=2
class	shape ||| multinomial	count=1
function	updates [function_2] ||| [function_2] [function_1]	count=1
arg	scrollable text pad ||| is_refresh highlight_regex	count=1
arg	results accounting for invalid ||| embedding_weights sparse_ids sparse_weights combiner	count=1
function	name -> _guideref from ||| build	count=1
function	adds a batch normalization ||| batch norm	count=1
function	store ||| store	count=1
function	the end ||| on epoch end	count=1
module	distribution ||| contrib distributions	count=1
function	variation of ||| variation	count=1
function	a header ||| header	count=2
function_arg	the value [arg_2] ||| [function_1] [arg_2]	count=1
arg	src_dir and write results ||| src_dir	count=1
arg	[arg_1] hints ||| [arg_2] [arg_1]	count=5
function_arg	[function_1] summarysaver monitor ||| [function_1] [arg_2]	count=1
function	tests a [function_2] ||| [function_1] [function_2]	count=1
function	in test [function_2] ||| [function_2] [function_1]	count=2
arg	a printtensor monitor ||| tensor_names every_n first_n	count=1
function	a lanczos ||| lanczos	count=1
function	the feed dictionary used ||| init feed dict	count=1
function_arg	shape of ||| shape name	count=1
function	precision ||| precision	count=2
class	of ||| tokenizer	count=1
function	linked to ||| filter ts from	count=1
function_arg	[function_1] sparsetensor into ||| [function_1] keyword_required [arg_2]	count=1
class	this operator to ||| operator scaled	count=1
function_arg	create a [arg_2] ||| [function_1] [arg_2]	count=13
function	lr multipliers ||| lr multipliers	count=2
module	quantized ||| contrib distributions python ops	count=1
arg	convert values into a ||| values	count=1
function	return the ||| get	count=2
module	dictionary ||| contrib learn python	count=1
arg	selfadjointeigv2 ||| grad_e grad_v	count=1
class	the server ||| server	count=1
function	proto_type for ||| collection	count=1
module_class	[module_1] [class_2] ||| [module_1] output [class_2]	count=1
class	failed if known ||| error	count=1
arg	list of tensors ||| tensors session feed_dict	count=1
function	[function_1] to vector ||| [function_1] [function_2]	count=4
function	replicas ||| remote replicas	count=1
function	all possible ||| all	count=1
function	symbol name ||| index	count=1
function	a variable instance from ||| variable	count=1
function	true if this ||| is	count=1
function	graph and returns prediction ||| get predict	count=2
function	spatial zoom ||| zoom	count=1
module	to __init__ which ||| contrib distributions	count=1
module	linked to ||| graph_editor	count=1
function	adds a flow ||| flow	count=2
arg	batch_size ||| batch_size	count=1
arg	the parameters ||| num_units use_peepholes share_time_frequency_weights	count=1
class	a variable to a ||| variable	count=1
module_class	[module_1] eventmultiplexer ||| [class_2] [module_1]	count=1
function	device of [function_2] ||| [function_2] [function_1]	count=2
function	regression [function_2] ||| [function_2] [function_1]	count=2
module	number of dimensions ||| contrib distributions python ops	count=3
function	concatenation of ||| concatenate	count=1
module	non-reference dtype ||| framework	count=1
arg	to a tensor ||| op dtype name	count=1
class	column ||| column	count=3
class	from the graph ||| graph rewriter	count=1
class	file version event ||| event	count=1
class	a worker ||| worker	count=1
function	[function_1] regression signature ||| [function_2] [function_1]	count=1
function	column with int values ||| int column with hash bucket	count=1
module	version of ||| python ops	count=3
function_arg	kl for [arg_2] ||| [arg_2] [function_1]	count=1
function	atrous ||| test atrous	count=3
module	resnet ||| python slim nets	count=1
arg	parameters loc ||| loc	count=1
function	to determine ||| classes	count=2
module	internal vocabulary ||| keras python keras preprocessing	count=1
arg	feeds and ||| feeds	count=2
function	for multi value ||| single value	count=1
function	reshaping behavior of ||| valued column reshaping	count=1
function	[function_1] an input_fn ||| [function_1] [function_2]	count=5
function_arg	[function_1] for f ||| [function_1] loop [arg_2]	count=1
function	for large records ||| read large	count=1
function	input_fn appropriate for serving ||| default serving input	count=1
class	this operator ||| operator scaled identity	count=1
function	[function_1] jacobian ||| [function_2] [function_1]	count=3
arg	compile the ||| cmd_prefix	count=1
arg	protocol buffer with images ||| tensor max_outputs collections	count=1
arg	[arg_1] fns and ||| [arg_1] [arg_2]	count=1
module	the dataframe [module_2] ||| [module_1] [module_2]	count=1
function	returns the default ||| get default	count=2
function	with values added to ||| add to	count=1
function	fill ||| fill missing	count=1
arg	x ||| x axes	count=1
class	register ||| tab completion registry	count=1
function	control flow [function_2] ||| [function_1] [function_2]	count=2
module	return a list of ||| framework python ops	count=1
function	configproto that ensures ||| rpcconfig	count=1
arg	backprop ||| value dead_branch	count=1
function	performs beam search decoding ||| ctc beam search decoder	count=1
class	[class_1] feeder ||| [class_1] [class_2]	count=2
module	of a tf ||| python ops	count=1
module	for ||| contrib integrate python ops	count=1
arg	make sure [arg_2] ||| [arg_1] [arg_2]	count=1
function	data ||| data	count=23
function	of the given variable ||| variable	count=1
module	compilation [module_2] ||| [module_2] [module_1]	count=4
module	returns the ||| contrib	count=1
function	summary of ||| spec summary	count=1
function	a tf graph for ||| inference graph	count=1
arg	[arg_1] dicts ||| [arg_2] [arg_1]	count=1
class	scroll ||| scroll bar	count=1
function	generate a report ||| report last	count=1
function	makes this [function_2] ||| [function_2] [function_1]	count=2
function	average leaf impurity ||| average impurity	count=2
function_arg	[function_1] [arg_2] ||| [function_1] params [arg_2]	count=4
function	integer ||| integer weighted sparse column	count=1
class	the event file ||| event	count=2
module	tensors execute together ||| batching python ops	count=1
function	tag sequence ||| sequence	count=1
function	iff [function_2] ||| [function_2] [function_1]	count=3
module	dictionary and return indexies ||| contrib learn python	count=1
function	random [function_2] ||| [function_1] [function_2]	count=11
class	to event ||| event	count=1
function	the cosine ||| mean cosine	count=1
function	op returned by subscribe() ||| subscribed	count=1
arg	by calling experiment_fn ||| experiment_fn	count=1
class	a tensorflow [class_2] ||| [class_2] [class_1]	count=6
module	binary ||| python ops	count=2
class	running threads ||| generator enqueuer	count=1
arg	num_epochs ||| num_epochs	count=1
module	estimate of an ||| contrib bayesflow python ops	count=1
function	given its outputs' gradients ||| sym grad	count=1
function	sure we ||| test	count=1
function_arg	[function_1] stored ||| [arg_2] [function_1]	count=3
function	inception model ||| inception	count=1
class	watched by [class_2] ||| [class_2] [class_1]	count=2
function	[function_1] sdcaoptimizer ||| linear_optimizer python head is [function_1] [function_2] head	count=1
class	tensor based on ||| tensor	count=1
arg	specified min and max ||| clip_value_min clip_value_max	count=1
function	return the feed ||| init feed	count=1
function	boolean series ||| series	count=1
function	as linear_model_fn but ||| model fn with model fn ops	count=2
module	dictionary ||| python	count=1
class	to ||| base saver builder	count=2
function	2-d convolution ||| conv2d	count=1
function	step true positives for ||| sparse true positive at	count=1
arg	in given ||| output_dir dictionary current_global_step	count=1
module	we can do a ||| layers	count=1
function	sparse features and ||| sparse features	count=1
function	returns the parsing config ||| config	count=1
function	a static valueerror ||| assert static	count=1
function	returns a function that ||| get	count=1
class	and provide ||| streaming	count=1
function	adds ||| add remote	count=1
module	gets the list of ||| python ops	count=6
class	the stack is empty ||| default graph stack	count=1
function	filename for ||| filename	count=1
arg	the parameters ||| input_size use_peepholes	count=1
module	converts ||| contrib keras python keras	count=1
class	to this operator ||| linear operator	count=2
function	evaluates the value ||| eval	count=1
function	true if [function_2] ||| [function_1] [function_2]	count=2
function	of a forward ||| ops	count=1
function	[function_1] single ||| [function_2] [function_1]	count=4
function	a while loop ||| while loop	count=2
function	[function_1] standard services ||| [function_1] [function_2]	count=1
module	the name of ||| python	count=1
arg	[arg_1] and d2 ||| [arg_1] [arg_2]	count=1
arg	predictions and labels ||| labels predictions	count=3
module	dataframe [module_2] ||| [module_2] [module_1]	count=1
arg	highlightoptions ||| criterion description font_attr	count=1
arg	best effort ||| adjoint adjoint_arg name	count=1
function_arg	[function_1] other ||| [arg_2] [function_1]	count=1
module	list of tensors ||| contrib distributions python ops	count=2
function	all the tensors ||| ts from regex	count=1
function_arg	[function_1] [arg_2] input length ||| [function_1] [arg_2]	count=1
module	handles starting and stopping ||| python slim	count=1
module	return indexies ||| python learn preprocessing	count=1
function	values ||| valid	count=1
module	are ||| python	count=1
function	batch ||| normalize batch	count=1
function_arg	[function_1] handle ||| [function_1] apply dense grad [arg_2]	count=3
arg	different thresholds on predictions ||| predictions thresholds	count=1
class	tensor ||| tensor	count=32
module	dtype based on ||| python framework	count=1
function	numpy masking ||| numpy	count=1
module	all the ||| backend event_processing	count=1
function_arg	file and [arg_2] ||| [arg_2] [function_1]	count=4
arg	a graph with feeds ||| feeds	count=1
function	[function_1] [function_2] as input ||| [function_1] [function_2]	count=2
function	a model from ||| from config	count=1
module	of tensors ||| contrib framework python ops	count=1
function	variable and add it ||| variable	count=1
function	get the node of ||| get node	count=1
module	with default shuffle ||| contrib learn python learn	count=1
function	false [function_2] ||| [function_2] [function_1]	count=4
function	restart only affect the ||| restart	count=1
function	[function_1] [function_2] misordered ||| [function_1] [function_2]	count=1
function	custom ||| get custom	count=1
arg	appearing in ||| log_p q z n	count=1
function_arg	[function_1] layer ||| [arg_2] [function_1]	count=4
class	of ||| watcher	count=1
function	concat [function_2] ||| [function_1] [function_2]	count=3
arg	x is a ||| x check_integer	count=1
arg	according to which_bucket ||| which_bucket batch_size num_buckets	count=1
function	operation ||| operation	count=1
arg	on featurecolumns ||| feature_columns num_outputs	count=1
function	create a tf placeholder ||| make placeholder	count=2
module_class	this function ||| framework defined function	count=1
module	add ||| python layers	count=1
function	[function_1] the sparsetensordensematmul ||| [function_1] [function_2]	count=2
arg	[arg] in ||| f ins batch_size [arg]	count=4
function	to be ||| prepare	count=1
function	of source ||| source	count=1
function	resnet_v2() for ||| v2	count=2
function	which reads the ||| read	count=1
function	create an instance ||| create profiler	count=1
function	with zero ||| stop	count=1
function	a header for use ||| header from ops and kernels	count=1
function	_get_dense_tensor() [function_2] ||| [function_1] [function_2]	count=1
function	configuration of ||| config	count=1
function	the variables and ||| and slice inputs	count=1
function	build a model variable ||| build variable	count=1
arg	defines the ||| weight_decay	count=1
class	check ||| transform test	count=1
function	defines the full ||| define full	count=2
function	a metagraphdef ||| meta	count=1
function	to use for tests ||| test	count=1
module	[module_1] the list ||| [module_1] [module_2]	count=1
function	computes the sum of ||| sum	count=2
function	a dynamic version ||| dynamic	count=1
module	if all are ||| python	count=1
function	diagonal of d ||| diag	count=1
module	construct ||| learn python learn learn_io	count=1
function	[function_1] size for ||| [function_1] step [function_2]	count=2
function	a referenceresolver [function] ||| [function]	count=1
function	shape function for ||| grad shape	count=2
class	debug tensor dumping ||| session debug	count=1
function	assert works ||| assert	count=1
function	the element ||| element	count=1
module	accessible method for determining ||| contrib keras	count=1
arg	y w + b ||| w b dropout	count=1
module	tensor representing the ||| python ops	count=1
arg	the labels ||| labels dim weights	count=1
function	to ||| as	count=1
function	[function_1] discard expired ||| [function_2] [function_1]	count=2
function	complex floating point ||| complex	count=1
class	this operator to ||| linear operator scaled	count=1
function	presence of ||| loop grads	count=1
function	a new context in ||| new attr context	count=1
function_arg	a device [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] for single ||| [function_2] value [function_1]	count=4
function	test for ||| test ksize2x2stride1x1rate1x1valid	count=1
function	a backward walk ||| walks	count=1
function_arg	positives [arg_2] ||| [function_1] [arg_2]	count=4
function	max [function_2] ||| [function_2] [function_1]	count=13
function	replaces a biasadd node ||| bias add node	count=1
arg	sgv0 to ||| sgv0	count=4
function	[function_1] page ||| [function_2] [function_1]	count=5
function	of running an op ||| op prebuilt	count=1
class	non-reference dtype based on ||| dtype	count=1
arg	texts to a numpy ||| texts mode	count=1
arg	its inputs to ||| inputs state scope	count=2
function	the timestamp in ||| timestamp	count=1
module	[module_1] the tensor ||| [module_1] [module_2]	count=2
function	and flops for ||| get logged ops	count=1
function	prune control ||| prune control	count=1
function	meta [function_1] [function_2] it to ||| [function_2] [function_1]	count=1
function	output values ||| setup values for	count=1
function_arg	the processor [arg_2] ||| [arg_2] [function_1]	count=1
function	indices in [function_2] ||| [function_2] [function_1]	count=1
arg	tensor with ||| tensor	count=2
function	in command ||| from command	count=1
function	calls the ||| call	count=1
arg	1 or 2 ||| name	count=1
function_arg	values [arg_2] ||| [function_1] var_names_to_values [arg_2]	count=1
module	the specified output of ||| python ops	count=2
class	represented by this operator ||| operator identity	count=1
function	valid tests configs ||| test configs	count=5
function	if ||| mode	count=1
function	table that maps ||| table from file	count=1
function	with real [function_2] ||| [function_2] [function_1]	count=6
module	truncated ||| python kernel_tests	count=1
function	construct the new task ||| construct	count=1
function	[function_1] philox ||| [function_1] [function_2]	count=1
function	the standard [function_2] ||| [function_2] [function_1]	count=3
arg	docs_for_object() calls ||| reference_resolver duplicates duplicate_of tree	count=1
function	column ||| column	count=12
function_arg	[function_1] state-saving ||| [function_1] inputs for rnn [arg_2]	count=1
module	by the backend ||| contrib keras python keras	count=1
function	[function_1] weighted ||| [function_1] [function_2]	count=1
function	extract command [function_2] ||| [function_1] [function_2]	count=3
function_arg	from csv [arg_2] ||| [arg_2] [function_1]	count=5
function_arg	index of [arg_2] ||| [arg_2] [function_1]	count=2
arg	list of tensors ||| tensors	count=2
arg	rank equal to rank ||| rank data	count=2
arg	conjugate prior on the ||| prior scale	count=1
function	op to a ||| apply op	count=2
function	tf [function] [n1 ,nn ||| [function]	count=1
module	a ||| contrib keras	count=1
module	same as the ||| learn python learn estimators	count=3
function	integer or tensorshape size ||| size	count=1
function	new context ||| new attr context	count=1
arg	of v ||| v	count=1
module	an imagenet ||| applications	count=1
function	new seed from ||| new	count=1
function	are not discarded ||| data not discarded	count=1
class	represented by this operator ||| linear operator identity	count=1
function	nodes that aren't ||| remove training nodes	count=1
function	write ||| write	count=7
function	wav files ||| wav files	count=2
arg	checkpoint in checkpoint_dir and ||| checkpoint_dir master	count=1
class	to generate ||| source	count=1
function	and thin [function] ||| [function]	count=2
function	to apply ||| apply	count=1
class	part of the ||| sequential	count=1
function	returns a ||| get feed	count=1
arg	lazy bucketing of inputs ||| tensors batch_size bucket_boundaries	count=1
function	parses a ||| parse	count=1
arg	parameters for ||| input_size use_peepholes	count=1
arg	pending ||| pending	count=1
arg	along ||| x	count=1
class	returns a tensorarray ||| tensor array	count=1
function	of a dense ||| dense	count=1
function	flushes the event file ||| flush	count=1
function_arg	[function_1] op1 and ||| [arg_2] [function_1]	count=2
function	the relative timestamp ||| rel timestamps	count=1
function	of a file to ||| file to	count=1
function	session bundle from the ||| session bundle or saved model bundle from	count=1
class	tensor for the given ||| builder	count=1
function_arg	[function_1] [arg_2] ||| [function_1] k [arg_2]	count=3
class	proper shape values then ||| dirichlet multinomial	count=1
function	output [function_2] ||| [function_2] [function_1]	count=9
function	get all the tensors ||| filter ts from regex	count=1
function_arg	input [arg_2] ||| [arg_2] [function_1]	count=1
arg	to rank ||| rank data	count=2
function	[function_1] the google2 ||| [function_2] log [function_1]	count=1
function	[function_1] v1 ||| [function_2] [function_1]	count=3
class	longer rich [class_2] ||| [class_2] [class_1]	count=1
function	a strided [function_2] ||| [function_1] [function_2]	count=1
function	all are sessionrunhook raises ||| check hooks type	count=1
module	of tensors that summarize ||| framework python ops	count=1
arg	sequence of symbols to ||| ids vocab_size embed_dim sparse_lookup	count=1
class	the generator into the ||| generator	count=1
module	image ||| image python ops	count=1
function	embedding lr ||| embedding lr	count=1
arg	function to create a ||| name	count=1
function_arg	to a [arg_2] ||| [function_1] inputs for rnn [arg_2]	count=1
class	feature ||| feature	count=1
function	multiple ||| check multiple	count=1
function	projects the row factors ||| project row factors	count=1
function	flattens [function_2] ||| [function_2] [function_1]	count=4
class	ops in the monitored ||| monitored	count=1
module	returns an ||| learn	count=1
function	[function_1] an output ||| [function_2] [function_1]	count=1
class	return indexies ||| processor	count=1
module	value of ||| contrib keras python keras	count=1
function	[function_1] docstring ||| [function_1] [function_2]	count=2
function	rank is ||| is rank	count=1
arg	function for ops ||| unused_op	count=1
module	to the training procedure ||| python losses	count=1
arg	name ||| name size	count=1
function	for proper shape ||| assert valid	count=1
arg	creates batches of tensors ||| batch_size num_threads capacity	count=1
function	in args belong to ||| graphs	count=1
function	max pool ops in ||| max pool shapes	count=1
function	function estimator with ||| function with	count=3
class	set ||| command handler registry	count=1
function	should the ||| should	count=1
arg	command to the command ||| command	count=1
function	name given to ||| name	count=1
function	from the ||| caption to item	count=1
function	values of ||| values for	count=1
function	[function_1] centered ||| [function_2] [function_1]	count=7
function	prepares features config from ||| create feature spec for parsing	count=1
function	vector x to a ||| vector to	count=1
module	of load() ||| tensorboard	count=1
module	component ||| learn estimators	count=2
module	loss to the training ||| losses python losses	count=2
class	event file to disk ||| writer	count=1
class	in the session ||| wrapper session	count=1
function	the cosine [function_2] ||| [function_2] [function_1]	count=2
function_arg	control outputs [arg_2] ||| [function_1] [arg_2]	count=1
module	which ||| distributions python ops bijectors	count=2
function	featurecolumns and an input_fn ||| to feature columns and input fn	count=1
function	context containing this context ||| context	count=1
function	returns ||| get	count=60
arg	data from oldpath ||| oldpath	count=1
function	[function_1] into string ||| [function_2] [function_1]	count=1
module	returns the ||| contrib factorization python ops	count=2
function	sessionrunhook raises typeerror ||| check hooks	count=1
function_arg	path from [arg_2] ||| [function_1] [arg_2]	count=1
module	returns ||| layers python layers	count=6
module	of two tensors ||| ops	count=1
module	a transform that ||| python learn dataframe transforms	count=1
module	axes of two tensors ||| contrib labeled_tensor python ops	count=1
function_arg	dense [arg_2] ||| [arg_2] [function_1]	count=10
function	forward tensor ||| forward	count=1
function	[function_1] at the ||| [function_2] [function_1]	count=1
function	a line in a ||| add line	count=1
function	directory containing ||| dir	count=2
function	on a list ||| fit on	count=1
module	for ||| feature_column	count=1
class	control [class_2] ||| [class_1] [class_2]	count=6
function	fully connected layer and ||| legacy fully connected	count=1
function	prepare the [function_2] ||| [function_1] cont call [function_2]	count=5
function	sqrt s for every ||| sqrt	count=1
function_arg	graph [arg_2] ||| [function_1] [arg_2]	count=6
function	batch ||| keyed batch features	count=1
function	of all ancestor ||| gather	count=1
function	all possible input options ||| all input options	count=1
arg	is accessed ||| data message first_n	count=1
module	a cross-entropy loss ||| losses python losses	count=1
function	[function_1] meta graph ||| [function_1] [function_2]	count=1
function	check the main menu ||| check main menu	count=1
function	relevant values for each ||| relevant	count=1
function_arg	a conv [arg_2] ||| [function_1] block [arg_2]	count=1
function_arg	cond that [arg_2] ||| [function_1] [arg_2]	count=2
module	embedding projector ||| plugins projector	count=1
arg	a feature_spec ||| filepatterns feature_spec	count=1
function_arg	[function_1] [arg_2] ||| [function_1] to vector [arg_2]	count=5
function	creates a checkpoint from ||| create checkpoint from	count=1
module	that produces this ||| framework	count=1
function	cosine-distance ||| cosine distance	count=2
class	that selects row and ||| walsmatrix factorization test	count=1
module	keras ||| keras python keras utils	count=1
module	a list of tensors ||| contrib factorization python ops	count=4
arg	initialize the parameters ||| use_peepholes cell_clip	count=1
arg	output according to partition ||| is_control	count=1
function_arg	docstring and [arg_2] ||| [function_1] [arg_2]	count=1
function	the tensor ||| tensor	count=3
module	returns ||| learn dataframe	count=2
module_class	params from [module_1] [class_2] format ||| [module_1] [class_2]	count=1
arg	nn sigmoid_cross_entropy_with_logits ||| multi_class_labels	count=1
arg	a list of texts ||| texts mode	count=1
class	or none ||| indexed slices	count=1
arg	parent [arg_2] ||| [arg_2] [arg_1]	count=2
function	of parameters in a ||| count total params	count=1
function	has [function_2] ||| [function_1] [function_2]	count=2
function	into html ||| array to html	count=1
module	data as input ||| estimators	count=4
module	[module] entry ||| [module]	count=1
function	save the current ||| save	count=1
function	loads an [function_2] ||| [function_1] [function_2]	count=2
class	saver ||| base saver builder	count=1
arg	functional interface ||| inputs axis momentum epsilon	count=1
class	created by ||| distribution shape	count=1
module	returns ||| losses python losses	count=1
class	check to make sure ||| upgrade	count=1
function	no emitted ||| ops sees updated values	count=1
arg	a tensor with shuffling ||| capacity	count=1
function	solve ||| solve	count=3
function_arg	list of [arg_2] ||| [arg_2] [function_1]	count=4
module	dictionary and ||| python learn preprocessing	count=1
module	the matrix of ||| ops	count=1
function	values in a ||| test output values	count=2
function_arg	op tensor if ||| op tensor meta_graph_def_to_load	count=1
function_arg	[function_1] [arg_2] ||| [function_1] total loss add_regularization_losses [arg_2]	count=2
function	sequence of integers ||| texts to sequences	count=1
arg	a visitor ||| cls visitor	count=1
arg	for op ||| op loop_state aggregation_method	count=1
module	matrix data as ||| learn python learn estimators	count=4
function_arg	[function_1] would ||| [function_1] x target_key [arg_2]	count=2
function	have invalid ||| test invalid number of	count=1
function	size histogram ||| compress histogram	count=1
function	from ||| caption to item	count=1
function	device ||| device function	count=1
arg	created for var ||| var	count=1
function_arg	matrix [arg_2] ||| [function_1] to vector [arg_2]	count=1
module	features ||| python learn estimators	count=2
function	run time shape ||| missing graph shape	count=1
function	a placeholder ||| placeholder with	count=1
class	test ||| curses test	count=2
class	cli hook ||| clidebug hook	count=2
function	a specified bounding box ||| bounding box	count=1
function_arg	returns the op [function_1] [arg_2] ||| [function_1] [arg_2]	count=3
function	or create [function] ||| get [function]	count=1
function	[function_1] a pandas ||| [function_2] [function_1]	count=1
arg	matching the original ||| tensor_values	count=1
module	binary ||| python kernel_tests	count=3
function	tensor list ||| tensor list	count=1
function	automatically [function_1] [function_2] ||| cli curses ui auto [function_1] [function_2]	count=4
function	ops that ||| ts	count=1
function_arg	a numpy [arg_2] ||| [arg_2] [function_1]	count=1
class	rich attributes or a ||| rich line	count=1
arg	rank x ||| x	count=1
module	[module] event ||| [module] summary	count=3
function_arg	[function_1] subgraph ||| [function_1] with input replacements [arg_2]	count=1
function	an accumulator ||| accumulator	count=1
module	estimate of the ||| contrib bayesflow python ops	count=1
module	learn ||| learn python learn	count=1
arg	input ||| inputs rate	count=1
class	of dnn ||| dnnlinear combined classifier	count=1
class	to the file ||| writer	count=1
module	data as ||| learn estimators	count=4
function	tensor ||| maybe assert valid sample	count=1
module	a tensor ||| keras python keras	count=4
class	test ||| total variation test	count=2
function	traversal attack ||| traversal	count=1
module	sense of ||| contrib linalg	count=5
arg	the specified shape ||| shape	count=1
module_class	of [class_2] ||| [module_1] [class_2] params	count=5
module	previous output tensors from ||| contrib grid_rnn python ops	count=1
function_arg	to values [arg_2] ||| [function_1] [arg_2]	count=1
arg	specific variables ||| model_path var_list	count=2
module	return ||| python ops distributions	count=2
function	] ||| expectation	count=1
module	of dimensions corresponding ||| python ops	count=2
function	slice ||| slice	count=7
class	the navigation ||| navigation history	count=1
module	given set of ||| contrib framework python ops	count=1
module	sequence ||| python	count=1
function	of input [function_2] ||| [function_1] [function_2]	count=2
class	drawing a ||| binomial	count=2
class	proximal ||| proximal	count=1
function	op which reads ||| read	count=1
class	the optimizer ||| replicas optimizer	count=1
class	per example in a ||| gmm algorithm	count=1
function	the inception v3 ||| inception v3	count=2
function	standard [function_2] ||| [function_1] [function_2]	count=3
module_class	[module_1] processor from ||| [module_1] [class_2]	count=1
function	return the string message ||| message	count=1
function	matrixdeterminant ||| matrix determinant	count=1
arg	form 'x=y' ||| kv_str	count=1
module	the network configuration ||| python	count=1
arg	the screen output ||| output node_name	count=1
module	values will be ||| framework	count=1
function	[function_1] the batch ||| [function_2] [function_1]	count=1
arg	of tensors [arg_2] ||| [arg_2] [arg_1]	count=2
function	the ||| scope ops	count=1
arg	condition is fulfilled ||| condition	count=1
function	the number of elements ||| num	count=2
function	batch dimension ||| batch	count=1
function	the run() call ||| run	count=1
module	get ||| contrib layers python layers	count=1
function	[function_1] out-of-order ||| [function_2] [function_1]	count=2
function	rates ||| rates	count=1
function	lookup ||| lookup sparse	count=1
function	object's docstring and return ||| md docstring	count=1
function	computes the maximum ||| reduce max	count=1
module	returns a training op ||| contrib layers python layers	count=1
function	holding the original arguments ||| original args	count=1
function	list of featurecolumns and ||| feature columns and	count=1
function	that ||| ts from	count=1
module	of layers by ||| layers	count=1
function	biasadd [function_2] ||| [function_2] [function_1]	count=3
function	with static shapes ||| to matrix static	count=1
function	[function_1] message discards ||| [function_2] [function_1]	count=2
module	if ||| framework python ops	count=2
function	inputs ||| seq2seq inputs	count=1
module	debug dump ||| debug	count=1
function	model_fn for [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] normal distribution ||| [function_2] [function_1]	count=3
function	[function_1] ratio ||| [function_2] [function_1]	count=4
class	grad state ||| state	count=1
function	[function_1] alternatives ||| [function_1] [function_2]	count=3
function	op that asserts ||| assert	count=1
module	the ||| contrib framework python	count=1
function	print the value of ||| print	count=1
function	with modulus zero ||| with modulus zero	count=3
arg	_docstringinfo ||| py_object relative_path_to_root reference_resolver	count=1
module	a batch of beams ||| contrib seq2seq python ops	count=1
arg	batch_size [arg_2] ||| [arg_2] [arg_1]	count=1
arg	g input_tensors) ||| attr_name	count=1
function	step and estimate error ||| step	count=1
function	transitive ||| transitive cleanliness	count=1
function	events ||| events	count=2
function	tile along ||| and tile	count=1
module	vocabulary dictionary ||| learn python learn	count=1
module	[module_1] the list ||| [module_2] [module_1]	count=1
module	loss using tf nn ||| losses python losses	count=1
function	is replicable ||| replicable	count=2
function	[function_1] the image ||| [function_1] [function_2]	count=1
arg	that ||| unused_op	count=2
function	to train a model ||| train	count=1
function	[function_1] node ||| [function_2] without [function_1]	count=2
arg	filename ||| filename	count=4
arg	command arguments ||| args	count=1
arg	services and the ||| threads close_summary_writer	count=1
function	for model_fn ||| model fn ops	count=1
arg	gradients to ||| grad handle	count=1
arg	to compute tensor ||| tensor	count=1
module	variance ||| python keras	count=1
function	nodes to ||| nodes	count=1
function	to apply l1 l2 ||| l1 l2	count=1
function	graph with [function_2] ||| [function_1] [function_2]	count=3
module	then ||| python ops	count=1
arg	evaluates the model over ||| x y sample_weight	count=1
function	fractional [function_2] ||| [function_1] [function_2]	count=3
function	save a ||| save	count=2
function	computes sparse softmax ||| flipped sparse softmax	count=1
function	returns a [function_2] ||| [function_1] [function_2]	count=8
function	values then ||| assert	count=1
arg	and op2 [arg_2] ||| [arg_1] [arg_2]	count=3
module	layer ||| rnn python ops	count=1
function	[function_1] for input ||| [function_1] two [function_2]	count=3
function_arg	log the [arg_2] ||| [function_1] op [arg_2]	count=1
arg	t ||| t	count=1
arg	to apply conv + ||| x filters num_row	count=1
module	as 'values' ||| contrib metrics python ops	count=1
module	valid command ||| python debug cli	count=1
function	placeholder ||| replace t with placeholder	count=1
function	[function_1] updates ||| [function_2] [function_1]	count=1
function	estimate data [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] tf ||| [function_2] [function_1]	count=2
function	[function_1] integer weights ||| [function_1] [function_2]	count=1
function	the while loop ||| while	count=1
function	broadcast leading dimensions ||| broadcast matrix	count=1
function	per step false positives ||| streaming sparse false positive	count=1
arg	[arg_1] feature_spec ||| [arg_2] [arg_1]	count=2
function_arg	converts a [arg_2] ||| [function_1] dense [arg_2]	count=2
function	match the ||| ts from regex	count=1
arg	x ||| x data	count=1
module	[module_1] current ||| [module_1] [module_2]	count=9
function	an op ||| op prebuilt	count=1
class	normal distribution on ||| normal diag plus low	count=1
function	the fetches ||| fetches	count=1
function	graph ||| import graph	count=1
arg	tensors together ||| tensors	count=1
module	retrieves a ||| keras engine	count=1
module	the current tf ||| python	count=1
function	server and print ||| server	count=1
class	to some sample data ||| data	count=1
module	returns a tensor ||| contrib learn python learn dataframe	count=1
function_arg	colocate with [arg_2] ||| [arg_2] [function_1]	count=5
function	and dense inputs ||| cross dense	count=1
function	to vectors ||| as vector	count=2
class	tests ||| sum test	count=1
arg	_docinfo objects ||| src_dir	count=1
function	variables for ||| vars	count=1
class	forest ||| forest graphs	count=4
arg	the labels and predictions ||| labels predictions weights	count=2
function	shape function ||| shape	count=3
function	based on a ||| fit on	count=1
function	training for mini batch ||| mini batch training	count=1
function	return a tensor to ||| data tensor	count=1
arg	tensor ||| tensor np_printoptions	count=1
function	unary [function_2] ||| [function_1] [function_2]	count=2
arg	of the given predictions ||| predictions	count=1
module	make sure we ||| tools	count=1
class	tests ||| recall test	count=1
class	watched by [class_2] ||| [class_2] tensor [class_1]	count=2
module	returns a ||| contrib layers python layers	count=1
module	equal n [module] 2 ||| [module]	count=1
arg	logits ||| logits name	count=2
function_arg	to [arg_2] ||| [function_1] tf sparse [arg_2]	count=1
function	generates tensors without scaling ||| scaling	count=1
module	of every ||| python ops	count=1
module	get a menuitem ||| python debug	count=1
arg	the given ids ||| params sp_ids sp_weights partition_strategy	count=1
class	base feature for tf ||| feature column	count=1
function_arg	[function_1] [arg_2] ||| [function_1] grad shape [arg_2]	count=1
function	particular plugin asset ||| asset	count=1
module	'values' ||| contrib metrics	count=1
module	of the original kernel ||| python ops	count=1
arg	an rnn ||| explicit_dtype	count=1
function	scalarevents ||| scalars	count=1
arg	device device ||| device	count=1
function	the files ||| build	count=1
arg	a state saving sequence ||| cell features	count=1
function	if all are ||| type	count=1
module	a given number of ||| python learn	count=1
function	[function_1] summary ||| [function_2] [function_1]	count=2
function	bucketized features ||| bucketized features	count=4
arg	evaluation data input_fn ||| input_fn steps hooks	count=1
module	new ||| contrib learn python learn	count=1
function	execute ||| execute schedule	count=1
function	shape info ||| shape	count=1
function	global default if ||| get default	count=1
function	indices in a ||| indices	count=1
arg	constructs ||| dtype reparameterization_type validate_args	count=1
class	function into ||| function	count=1
function	other columns present ||| other columns	count=1
function_arg	[function_1] [arg_2] ||| [function_1] args [arg_2]	count=2
module_class	[module_1] session creator ||| [module_1] worker [class_2]	count=1
function	featurecolumns and ||| feature columns and	count=1
function	the specified line in ||| at line	count=1
function	it into html ||| to html	count=1
function	all are sessionrunhook raises ||| check	count=1
class	documents ||| processor	count=2
function	any containing axis_order_scope ||| axis order	count=1
function	iterations allowed to run ||| iterations	count=1
module	batch systems of ||| contrib linalg python ops	count=1
function	an rnn model ||| get dynamic rnn model	count=1
module	dataframe into two ||| contrib learn python learn dataframe	count=1
function	sets the root name ||| set root name	count=1
function	shape function ||| conv2d shape	count=2
class	the current batch ||| next queued sequence batch	count=1
function	can save ||| train save	count=1
function	returns a function that ||| get feed	count=1
module	dictionary ||| contrib learn	count=1
arg	subgraph ||| sgv dst_graph dst_scope	count=1
class	will sample data ||| data feeder	count=2
arg	m_prev with projected ||| m_prev with_c	count=1
function	tests that ||| test	count=1
module_class	[module_1] initializer ||| [module_1] [class_2]	count=7
function	converts ||| convert n to	count=1
function	lists of [function_2] ||| [function_2] and [function_1]	count=1
function	mix of [function_2] ||| [function_2] [function_1]	count=4
module	which ||| python ops distributions	count=1
module	command ||| python debug	count=1
function	positives ||| positive	count=4
function	to capture the ||| capture	count=1
function	[function_1] queue ||| [function_2] [function_1]	count=6
arg	functional interface for ||| inputs filters kernel_size	count=1
function	array indices for the ||| array index at	count=1
function	tf ||| tf	count=2
function	[function_1] restart ||| [function_2] [function_1]	count=3
function_arg	[function_1] [arg_2] ||| [function_1] new checkpoint checkpoint_dir [arg_2]	count=2
module	generic ||| python learn utils	count=1
function	search commands are ||| search from	count=1
arg	into a html ||| contents headers	count=1
class	tests ||| import graph def test	count=1
arg	of onrunstartresponse ||| action debug_urls debug_ops node_name_regex_whitelist	count=1
class	wrapper ||| base debug wrapper	count=1
function	graph dependencies ||| graph parents	count=2
function	parse events from latest ||| latest events	count=1
function	return the original ||| original	count=2
function	fit coefficients ||| fit	count=1
function_arg	the values [arg_2] ||| [function_1] [arg_2]	count=1
module	store ||| python training	count=1
function	against a numpy ||| numpy	count=1
function	and tests ||| test	count=1
module_class	[module_1] one step ||| [module_1] [class_2]	count=2
function	get tensor from ||| get tensor	count=2
function	dequeues and ||| dequeue up to	count=1
function	returns input function ||| input fn	count=2
module	constructor ||| python estimator	count=1
function	input_fn appropriate for serving ||| serving input	count=1
function	non-negative ||| axis non	count=1
function	per step false ||| false	count=1
arg	[arg_1] hints argument ||| [arg_2] [arg_1]	count=5
function	[function_1] place to ||| [function_2] [function_1]	count=2
class	in the session ||| debug wrapper session	count=1
function_arg	rows indicated [arg_2] ||| [arg_2] [function_1]	count=1
function	closes an interactivesession ||| close	count=1
module	raises ||| estimator	count=1
function	[function_1] size ||| [function_2] [function_1]	count=6
module	returns the names of ||| python ops	count=1
function	of featurecolumns and ||| feature columns and	count=1
function	evaluation ||| do eval	count=1
arg	queue to create batches ||| batch_size capacity	count=2
arg	[arg] fp16 ||| a b [arg]	count=3
module	of every ||| contrib distributions python ops	count=1
module	transforms ||| keras python keras preprocessing	count=2
function	timeline [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] discards expired ||| [function_2] [function_1]	count=3
function	default value as tuple ||| default value	count=1
class	create ||| fixed length record reader	count=1
class	tests ||| bucketized column test	count=3
class	grad state ||| flow state	count=1
module	interactivesession ||| python client	count=2
function	data directory ||| data	count=1
function	and loss functions ||| check loss and target compatibility	count=1
function	of the range ||| range	count=2
class	a tensor in ||| tensor	count=1
function	[function_1] limit ||| [function_1] [function_2]	count=10
function	tf options ||| options	count=1
arg	variable ||| variable value decay	count=1
module	execute ||| contrib learn python learn	count=1
function	servers ensures ||| servers one cluster	count=1
function	input function that ||| input fn	count=4
arg	steps and returns ||| noutput scope	count=1
function	is the block that ||| block	count=1
function	basic metrics [function_2] ||| [function_2] [function_1]	count=1
class	determines whether this plugin ||| text plugin	count=1
function_arg	confusion matrix [arg_2] ||| [function_1] [arg_2]	count=1
function	step of ||| step	count=1
class	output tensors ||| output	count=1
function_arg	attribute [arg_2] ||| [function_1] [arg_2]	count=2
function	placeholder tensor ||| replace t with placeholder	count=1
module	a rnn ||| rnn python	count=1
function	of the max pool ||| max pool	count=1
function_arg	[function_1] printtensor monitor ||| [arg_2] [function_1]	count=1
function	false positives for ||| sparse false positive at	count=2
class	column ||| feature column	count=1
function_arg	the product [arg_2] ||| [arg_2] [function_1]	count=2
class	head for binary ||| binary logistic head	count=2
function	the input tensor ||| input tensor	count=2
arg	filewriter and an ||| logdir graph max_queue flush_secs	count=1
function	colocate [function_2] ||| [function_2] [function_1]	count=2
module_class	this tensor ||| python client tensor	count=2
function	feature spec ||| create sequence feature spec	count=1
function	a benchmark ||| benchmark	count=2
function	tensor ||| verify tensor	count=1
arg	a tensor ||| tensor tag	count=1
module	for ||| ops	count=30
module	vgg ||| slim python slim nets	count=3
arg	source ||| source	count=1
module	reduce ||| plugins text	count=1
function	element shape ||| element	count=1
class	the function ||| function	count=2
arg	from a run ||| run	count=1
function	inputs of two subgraphs ||| inputs	count=1
module	value ||| keras	count=1
function	of the nodes in ||| graph	count=1
module	return indexies ||| contrib	count=1
function	extracts the values from ||| values from	count=1
function	you can save and ||| train save	count=1
function	computes average ||| average	count=3
class	registry ||| summary plugin asset	count=1
function	summary of the ||| tf spec summary	count=1
function_arg	[function_1] until a ||| [function_1] new checkpoint checkpoint_dir [arg_2]	count=1
function	make_linear_model() [function_2] ||| [function_1] [function_2]	count=1
module	print ||| contrib tfprof python tools tfprof	count=1
function	single [function_2] ||| [function_1] [function_2]	count=10
function	parsing tf ||| parsing	count=1
arg	render a ||| row txt color_segments	count=1
function	list of featurecolumns and ||| to feature columns and	count=1
function	computes various [function_2] ||| [function_2] [function_1]	count=6
class	enqueue op ||| runner	count=1
function	no ||| def classification6	count=1
function	latest checkpoint ||| latest checkpoints	count=1
arg	[arg_1] is accessed ||| [arg_2] [arg_1]	count=3
arg	given in input ||| inputs	count=2
class	for this data ||| data	count=1
function	safe mean of the ||| safe mean	count=1
function	sets [function_2] ||| [function_1] sample [function_2]	count=3
function_arg	rfft [arg_2] ||| [arg_2] [function_1]	count=1
function	with other ||| other	count=1
module	copy ||| contrib graph_editor	count=2
module	debug ||| debug lib	count=3
arg	returns a lookup ||| vocabulary_file vocab_size default_value	count=1
function	shape values then ||| maybe assert valid sample	count=1
function	results into ||| results	count=1
module	learn the vocabulary ||| learn python learn preprocessing	count=1
module	a sequence of ||| python keras preprocessing	count=1
class	test ||| pool test	count=3
function	the health pill ||| health pills	count=2
function	an rnn model function ||| dynamic rnn model fn	count=1
function	model from ||| from config	count=1
function	linear operator ||| create operator	count=1
function	[function_1] random ||| [function_2] [function_1]	count=1
module	a sequence ||| keras preprocessing	count=1
module	check to make sure ||| tools compatibility	count=1
module	new ||| training	count=11
class	a table outputs ||| initializable lookup table	count=1
function	graph with constants ||| constants	count=1
class	a deadlineexceedederror ||| deadline exceeded error	count=1
function	created ||| proto	count=1
function	wrap a call ||| maybe wrap	count=1
function	find latest [function_2] ||| [function_1] [function_2]	count=2
function	the integer ||| integer	count=1
function	string_to_hash_bucket op to ||| string to hash	count=1
class	construct ||| linear estimator	count=1
function	[function_1] placeholders ||| [function_1] [function_2]	count=1
class	for the statistics ||| stats	count=1
module	estimate of ||| python ops	count=1
function	simple classification model ||| model	count=2
function_arg	[function_1] of tuples ||| [arg_2] [function_1]	count=2
class	validates ||| saved model builder	count=2
function	tuples into raw params ||| to raw params	count=1
function	switch op is calculated ||| switch	count=1
function	computes various recall ||| streaming recall at	count=1
function	run() for details ||| run	count=1
function	menuitem ||| to	count=1
arg	[arg_1] biases ||| [arg_2] [arg_1]	count=4
function	symbol name -> ||| build	count=1
class	then ||| dirichlet	count=1
module	sequence ||| contrib keras python keras	count=1
class	hook to ||| replicas optimizer hook	count=1
arg	to a new type ||| dtype name	count=1
arg	to a tensor ||| dtype name as_ref	count=1
class	[class_1] lstm ||| [class_1] [class_2]	count=1
function	[function_1] variance ||| [function_2] [function_1]	count=8
module_class	[module_1] prop ||| [class_2] [module_1]	count=1
module	an integer tensor ||| keras python keras	count=1
function_arg	hparamdef [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	[function_1] key ||| [arg_2] [function_1]	count=1
function	print the [function_2] ||| [function_1] [function_2]	count=2
function	labels ||| node status	count=1
function	checkpoint ||| create checkpoint	count=1
function	generate a training graph ||| training graph	count=1
arg	value in values ||| values dimension	count=2
function	with ||| test watching variable update ops	count=1
function	add one or more ||| add	count=1
module	vocabulary dictionary and return ||| learn python learn	count=1
module	have ||| tools compatibility	count=2
function	build a signaturedef ||| build signature def	count=1
class	tensor for the ||| builder	count=1
function_arg	[function_1] broadcasts ||| [function_1] [arg_2]	count=4
function	gather ||| gather	count=4
function_arg	[function_1] from input_tensor ||| [arg_2] [function_1]	count=8
module	default ||| contrib learn python learn utils	count=1
module	version with ||| python learn	count=1
module	regression ||| learn python learn estimators	count=2
function	and convert it into ||| array to	count=1
function	to train ||| simple train	count=1
function	from ||| assign from	count=1
module	output of ||| python ops	count=2
function	you can save and ||| save	count=1
function	the condition ||| scalar condition	count=1
arg	the predictions with respect ||| predictions	count=2
class	an interactivesession ||| session	count=1
module	output of ||| ops	count=2
function	object [function_2] ||| tools docs parser config [function_2] name [function_1] full_name	count=1
arg	make sure ||| config wait_for_checkpoint	count=1
arg	input best path ||| inputs	count=1
function	and run [function_2] ||| [function_1] [function_2]	count=6
module	for ||| contrib distributions python ops	count=1
module	generator ||| python keras engine	count=1
arg	from op1 [arg_2] ||| [arg_1] [arg_2]	count=4
function_arg	[function_1] in graph ||| [arg_2] [function_1]	count=3
function	reads the [function_2] ||| [function_1] [function_2]	count=1
function	is the diagonal of ||| diag update	count=1
arg	record to ||| record	count=1
function	return a tensor to ||| parse label tensor	count=1
class	constructor of watchoptions debug [class_1] [class_2] ||| python debug wrappers [class_1] [class_2]	count=1
module	return tensor ||| distributions	count=1
module	using ||| learn python learn	count=3
arg	type ||| dtype name	count=1
module	regression ||| layers python layers	count=1
module	loss to the ||| python losses	count=2
function	tf placeholder ||| make placeholder from dtype	count=1
function	define kernel [function_2] ||| [function_1] [function_2]	count=4
module	symbol name -> _guideref ||| docs	count=1
class	cli [class_2] ||| [class_1] [class_2]	count=1
function	class ||| to	count=1
function	init [function_2] ||| [function_2] [function_1]	count=3
function	show array indices ||| show array index	count=1
arg	make ||| input_fn feed_fn	count=1
function_arg	[function_1] [arg_2] as an int list ||| [function_1] [arg_2]	count=6
arg	histograms ||| nbins	count=1
function	a tf placeholder ||| make placeholder from tensor	count=1
arg	linearoperatorfullmatrix ||| matrix is_non_singular is_self_adjoint is_positive_definite	count=1
function	of featurecolumns ||| to feature columns	count=1
function	[function_1] file for ||| [function_1] [function_2]	count=1
function_arg	[function_1] dnnlinearcombinedclassifier instance ||| [function_1] [arg_2]	count=1
function	the product of ||| reduce prod	count=1
module	estimate of ||| ops	count=2
module	returns ||| contrib learn python learn dataframe	count=2
function	operator is ||| operator	count=1
function	if ||| check hooks	count=1
function	neighbor ||| neighbor	count=1
class	the bucket ||| reservoir bucket	count=1
function	of new control inputs ||| control inputs	count=1
function	rewriter and tests the ||| test	count=1
class	test whether client ||| navigation history	count=1
module	a cross-entropy loss using ||| python losses	count=1
function	file paths from ||| file paths	count=2
function	indices into string values ||| index to string	count=1
function	all input [function_2] ||| [function_1] [function_2]	count=1
function_arg	split [arg_2] ||| [function_1] keyword_required [arg_2]	count=1
class	don't have ||| test	count=1
function	mix ||| optimizer mixed	count=1
module	be produced or none ||| python	count=1
class	plugin ||| text plugin	count=1
class	a new chrome ||| chrome	count=1
arg	a serialized minibatch ||| serialized_sparse dtype	count=1
module	the ||| ndlstm python	count=1
module	output tensors that with ||| contrib learn python learn	count=1
function	of ||| transform	count=1
module	session and runs a ||| contrib learn python learn	count=1
function	betainc a ||| betainc	count=1
arg	sparsetensorsmap and return its ||| container shared_name	count=1
function	from the attribute ||| from line attr	count=2
function	replicas ||| replicas	count=1
function	nodes that ||| training nodes	count=1
function	generate a report ||| report	count=1
module	list of tensors ||| rnn python ops	count=1
arg	if op was marked ||| scope op func	count=1
module	integer tensor ||| contrib keras python keras	count=1
module	__init__ which ||| contrib distributions python ops	count=1
function	that match the ||| filter ts from	count=1
function	move dims corresponding to ||| move dims	count=1
class	make sure ||| test upgrade	count=1
function	full name e ||| full path	count=1
function	nonexistent tensor [function_2] ||| [function_1] [function_2]	count=1
function	examples ||| examples	count=1
function	and weighted [function_2] ||| [function_2] [function_1]	count=2
function_arg	[function_1] services and ||| [function_1] [arg_2]	count=1
function	using [function_1] [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] given rate ||| [function_1] [function_2]	count=1
arg	called when new ||| coord	count=1
function	[function_1] start message ||| [function_1] [function_2]	count=1
function	expected contract ||| contract	count=1
module	a keras variable ||| contrib keras python keras	count=1
function	valued features ||| valued features perfectly separable	count=1
arg	the parameters for ||| input_size use_peepholes	count=1
function	[function_1] control ||| [function_2] [function_1]	count=7
module	the default keras ||| keras python keras	count=1
module	of tensor ||| contrib linalg python ops	count=1
class	test ||| non square linear operator derived class test	count=1
arg	the parameters for an ||| num_units use_peepholes share_time_frequency_weights cell_clip	count=1
function	traverse an attribute to ||| get attribute	count=1
class	make sure we don't ||| test	count=1
function	and creates [function_2] ||| [function_1] [function_2]	count=1
function	op to use ||| get string to hash bucket	count=1
function	from ||| input from	count=1
module	for the ||| tools dist_test python	count=1
function	to run ||| run	count=1
module	for ||| python ops	count=27
function	defines the mahalanobis distance ||| define distance	count=1
function	create test [function_2] ||| [function_2] [function_1]	count=2
function	the address ||| address	count=1
function	from variabledef as needed ||| from proto	count=1
function	all ||| all resources	count=1
function	a sparsetensor ||| to sparse	count=1
function	dtypes for ||| dtypes	count=2
function	for given example ||| ops from example	count=1
function	replace the contents of ||| replace	count=1
function	read queue ||| read	count=2
function	internal implementation of load() ||| internal	count=1
module	the ||| learn python learn preprocessing	count=2
function	[function_1] partitioned ||| [function_1] [function_2]	count=8
arg	that builds model graph ||| features labels	count=3
function	method to extend the ||| extend	count=1
class	normal distribution on ||| normal tri l	count=1
function	within ||| within	count=1
function	[function_1] operation for ||| [function_1] [function_2]	count=3
class	test ||| utils test	count=1
module	bijector ||| ops bijectors	count=1
arg	lower triangular ||| tril	count=1
function	of numpy ||| numpy	count=1
class	the debug tensor dumping ||| session debug test	count=1
arg	to the labels ||| labels weights	count=2
function	[function_1] shallow dict ||| [function_2] [function_1]	count=1
arg	rank of their input ||| rank	count=1
module	return dict symbol name ||| tools	count=1
module_class	text [class_2] ||| [module_1] text [class_2]	count=1
function	to the main ||| request main	count=1
function	positives for ||| positive	count=4
function	the sharded ||| export sharded	count=1
module	and ||| python feature_column	count=2
module	be used to ||| layers python layers	count=1
function_arg	[function_1] labels and ||| [function_1] [arg_2]	count=14
arg	scaling the entire tensor ||| level noise_shape seed	count=1
function	return the page ||| build class page	count=1
class	this linearoperator ||| linear operator	count=1
class	replace ||| py guide parser	count=1
function	create a scale ||| scale	count=1
arg	of sgv0 to ||| sgv0	count=3
function	linked to ops that ||| filter ts from	count=1
function	loads all [function_2] ||| [function_2] [function_1]	count=3
function_arg	least the [arg_2] ||| [arg_2] [function_1]	count=1
arg	the replaced tensors ||| target_ts replacement_ts dst_scope src_scope	count=1
arg	tensor t ||| t multiplier name	count=1
arg	fn_then() or fn_else() ||| fn_then fn_else	count=1
module	for evaluating a ||| contrib tensor_forest	count=1
module	locate ||| python debug cli	count=1
function_arg	of context words ||| context context_words	count=1
function	parse the object's ||| parse	count=1
class	vocabulary dictionary ||| vocabulary	count=1
arg	[arg_1] and y ||| [arg_2] [arg_1]	count=2
module	monte carlo estimate of ||| contrib bayesflow python ops	count=1
module	text ||| contrib keras python	count=1
function_arg	operation [arg_2] ||| [arg_2] [function_1]	count=1
arg	a scrollable text pad ||| is_refresh highlight_regex	count=1
function_arg	signaturedef proto [arg_2] ||| [arg_2] [function_1]	count=2
module	or ||| python	count=1
function	in ||| in	count=7
function	has integer ||| integer	count=1
function	that match ||| from	count=1
class	grad context ||| grad loop	count=1
module	a sequence of integers ||| keras python	count=1
function	file and ||| file and test	count=2
function_arg	before processing [arg_2] ||| [arg_2] [function_1]	count=1
class	mapper that handles ||| fetch mapper	count=1
function	render ||| render	count=2
module_class	of the [class_2] ||| [module_1] [class_2]	count=40
class	by concrete ||| interactive debug wrapper	count=1
module	be produced or none ||| framework	count=1
function	tags that a ||| unique tags	count=2
arg	in queue ||| queue	count=2
arg	tensor ||| tensor	count=26
function	approximate auc ||| auc	count=2
module_class	[module_1] [class_2] ||| [module_1] vocabulary [class_2]	count=4
function	the [function] or output ||| get [function]	count=1
function	training ||| training	count=4
arg	[arg_1] dimension ||| [arg_2] [arg_1]	count=1
function	weight column ||| weights	count=3
class	some sample data ||| image data	count=1
class	this ||| template	count=1
function	save and ||| save load	count=1
function	the shape ||| shape	count=5
function_arg	true if op ||| is switch op	count=1
function_arg	[function_1] across tensors ||| [arg_2] [function_1]	count=4
function	postfix ||| structure	count=2
function	if [function_2] ||| [function_1] [function_2]	count=2
arg	bias away ||| bias	count=1
function	the ||| add	count=1
function	save and reload ||| train save load	count=1
function	column [function_2] ||| [function_1] [function_2]	count=4
function_arg	[function_1] a variable ||| [function_1] [arg_2]	count=1
arg	object ||| feature_columns weight_column_name model_dir	count=3
module_class	[module_1] feeder ||| [module_1] data [class_2]	count=1
function	node-status labels ||| node status label	count=1
arg	steps and returns ||| inputs noutput scope	count=1
function	tensors linked to ||| ts	count=1
function	operation within ||| within	count=1
function	op to use ||| to hash bucket	count=1
module	ops created by this ||| ops	count=2
arg	tf nn sigmoid_cross_entropy_with_logits ||| logits multi_class_labels weights label_smoothing	count=1
function	[function_1] saturation ||| [function_2] [function_1]	count=1
function	returns the list ||| get	count=1
module_class	file [class_2] ||| [module_1] [class_2]	count=1
class	a resourceexhaustederror ||| resource exhausted error	count=1
function_arg	inception v3 [arg_2] ||| [arg_2] [function_1]	count=1
class	in the bucket ||| bucket	count=1
function	resnet_v1() ||| v1	count=3
function	create a [function_2] ||| [function_2] [function_1]	count=10
arg	steps and ||| noutput scope name	count=1
arg	for 1d convolution layer ||| kernel_size	count=1
arg	fully qualified name ||| name	count=1
function	assigns [function_2] ||| [function_2] [function_1]	count=3
class	resample x ||| resample	count=1
arg	rate parameters ||| rate	count=1
function	ops that match ||| from regex	count=1
function_arg	[function_1] given name ||| [function_1] [arg_2]	count=4
function	reopens ||| reopen	count=2
arg	from the graph ||| graph	count=1
arg	reduce images ||| images scope	count=1
module	constructor of [module_2] ||| [module_2] [module_1]	count=1
function	discards ||| discards	count=1
function	softmax [function_2] ||| [function_1] [function_2]	count=3
function	flattens ||| flatten	count=3
function	get a menuitem ||| to	count=1
arg	the boston housing ||| path seed test_split	count=1
class	event for ||| event	count=1
function	function returns a ||| get	count=2
module	for the given ||| python feature_column	count=1
function	state tensors ||| state	count=1
function	indices of the ||| index	count=1
function_arg	[function_1] x ||| [function_1] less equal [arg_2]	count=1
module	of ||| debug cli	count=2
class	matrix elements ||| operator pdbase	count=2
function	transitive closure ||| transitive	count=1
function_arg	[function_1] globalstepwaiterhook ||| [function_1] [arg_2]	count=1
arg	train a ||| train_samples test_samples input_shape num_classes	count=1
function	works for one feature ||| one feature	count=1
arg	a kernellinearclassifier [arg_2] ||| [arg_2] [arg_1]	count=1
function	segmentsum ||| unsorted segment sum	count=1
function	the files ||| guide	count=1
function	src_dir ||| other docs	count=1
function_arg	[function_1] tuples ||| [arg_2] [function_1]	count=2
function_arg	the node [arg_2] ||| [arg_2] [function_1]	count=1
function	update operations ||| update ops	count=2
arg	protocol buffer with a ||| values collections name	count=1
function	the ||| get collection	count=1
function	concatenation of the dimension ||| concatenate	count=1
function	the csv ||| csv	count=1
function	of n-d convolutions ||| atrous convolution	count=2
function	dnn-linear combined ||| dnnlinear combined bug	count=1
arg	rate along the spatial ||| rate	count=1
function_arg	[function_1] [arg_2] ||| [function_1] variable [arg_2]	count=3
arg	compatiblity of targets ||| targets loss_fns output_shapes	count=2
arg	tensors x and h ||| x h	count=1
function	for dnn-only model ||| dnnonly	count=1
module	of ||| ops distributions	count=20
module	of unique ||| contrib labeled_tensor python ops	count=1
function	map that records all ||| map	count=1
class	this ||| base	count=5
module	possibly nested tuple of ||| python ops	count=2
function	and conv2d produce the ||| conv2d	count=1
module	sure we ||| tools compatibility	count=1
arg	[arg_1] experiment ||| [arg_2] [arg_1]	count=2
function	values then ||| valid sample	count=1
function	specified bounding box ||| bounding box	count=2
function	name ||| name to	count=1
function_arg	[function_1] fixedlengthrecordreader ||| [arg_2] [function_1]	count=1
class	output ||| export output	count=2
module	a sequence of ||| contrib keras python keras	count=1
arg	inputs [arg_2] ||| [arg_2] [arg_1]	count=14
function_arg	[function_1] the predicted_ids ||| [arg_2] [function_1]	count=1
module	for node-status ||| python debug cli	count=1
function	can save ||| save	count=1
function	read and process the ||| process	count=1
function	[function] 1d ||| inverse [function] shape	count=3
module	tensors ||| graph_editor	count=1
function	to use ||| string to hash bucket fn	count=1
function	isclass ||| isclass	count=1
arg	xs ||| xs name colocate_gradients_with_ops	count=1
module	init ||| saved_model	count=1
class	of run() ||| session run context	count=1
function	have invalid type ||| test invalid number	count=1
function	predict_prob methods with as_iterable=true ||| as iterable	count=1
module	proper ||| ops distributions	count=2
arg	for input_node [arg_2] ||| [arg_2] [arg_1]	count=1
function	the class probability predictions ||| predict proba	count=2
arg	the form 'x=y' ||| kv_str	count=1
function	an attribute (e g ||| attribute at index	count=1
module	filters ||| keras python keras	count=1
class	tree ||| tree graphs	count=1
function	[function_1] walsfactorization estimator ||| [function_2] model [function_1]	count=1
function	returns a [function_2] ||| [function_2] [function_1]	count=11
class	logistic ||| logistic	count=1
module	parses ||| plugins projector	count=1
module	all are sessionrunhook ||| python	count=1
arg	a list of lines ||| lines	count=1
function	[function_1] closure ||| [function_1] [function_2]	count=4
function	the column ||| column	count=2
class	operation ||| operation	count=1
function	[function_1] to train ||| [function_2] [function_1]	count=2
function	[function_1] method ||| [function_2] [function_1]	count=1
function_arg	cast [arg_2] ||| [function_1] to floatx [arg_2]	count=2
module	with default shuffle ||| learn learn_io	count=1
arg	value of an ||| name	count=1
module	ops leading to this ||| python ops	count=1
function	a subgraph from ||| view from	count=2
class	this tensor [class_2] ||| [class_2] [class_1]	count=1
class	to ||| summary writer	count=1
function	condition based ||| pick scalar condition	count=1
function	for tf session run() ||| session run	count=1
function	queue ||| shared queue	count=2
arg	variabledef for collections ||| export_scope	count=1
function	returns the [function_2] ||| [function_2] [function_1]	count=34
function	ops that match the ||| ts from regex	count=1
arg	sgv0 ||| sgv0	count=5
module	the [module_2] ||| [module_1] [module_2]	count=62
function	[function_1] eval ||| [function_2] [function_1]	count=3
function	same values ||| values	count=1
function_arg	batch and [arg_2] ||| [function_1] queue [arg_2]	count=1
class	for 1x1 kernel ||| extract image patches	count=1
function	a single batch of ||| on batch	count=3
function	[function_1] absolute value ||| [function_1] [function_2]	count=2
module	decodes ||| keras applications	count=1
function	placeholder for ||| placeholder from	count=2
function	function [function_2] ||| [function_2] model [function_1]	count=2
function	trainer ||| train	count=2
function	tf operation within the ||| within	count=1
function	a single batch ||| on batch	count=5
arg	input_tensor using ||| input_tensor	count=1
arg	with screen output ||| output	count=1
module	of layers by ||| python layers	count=1
arg	shapes of the variables ||| variables	count=1
function	with integer weights ||| with integer	count=1
function	launch the interactive command-line ||| launch cli	count=1
class	event file ||| summary writer	count=2
function	a bucketized ||| bucketized	count=1
function	version functions ||| version	count=1
arg	create a svsummarythread ||| sv sess	count=1
arg	d1 and [arg_2] ||| [arg_1] [arg_2]	count=1
function	computes [function_2] ||| [function_2] [function_1]	count=3
class	session ||| debug wrapper session	count=1
function	dense scalar ||| dense scalar	count=2
function	list of ||| line list	count=1
module	the [module_2] ||| [module_2] [module_1]	count=44
module	the given ||| graph_editor	count=1
function	compatible with ||| tensors compatible	count=1
class	metadata [class_2] ||| [class_2] [class_1]	count=4
arg	runs a microbenchmark to ||| iters	count=1
function	works with real valued ||| real valued	count=2
class	area object ||| area	count=1
function	a page that ||| page	count=1
function	the concatenation of ||| concatenate	count=1
function_arg	copy a [arg_2] ||| [function_1] [arg_2]	count=1
function	arg_scope ||| add arg	count=1
function	linked ||| ts from	count=1
function	creates a queue ||| queue	count=1
arg	method for recording a ||| name iters cpu_time wall_time	count=1
function	seven gaussians ||| scalar univariate	count=1
function	a full name e ||| full	count=1
function	[function_1] a call ||| [function_1] [function_2]	count=1
function	_guideref from the ||| build guide index	count=1
function	compute number ||| set size	count=1
arg	two numpy [arg_2] ||| [arg_1] [arg_2]	count=2
arg	length [arg] given ||| input_length filter_size [arg]	count=1
function	start event ||| start	count=1
function	fill tensor shapes ||| fill missing	count=1
function	number of parameters ||| params	count=1
function	an attribute (e ||| attribute at index	count=1
module	and return ||| contrib	count=1
function_arg	[function_1] process ||| [arg_2] [function_1]	count=1
module	from ||| lib	count=1
function	a type ||| type	count=1
module	the function ||| python	count=1
function	[function_1] rotation of ||| [function_2] [function_1]	count=2
function	given command prefix ||| command prefix	count=1
function	containing all ||| with all	count=1
function	and convert it into ||| to	count=1
function	csv format of /data/scalars ||| scalars csv	count=1
function	in default ||| default	count=1
function	flops for ops ||| logged ops	count=1
module_class	found in [class_2] ||| [module_1] [class_2]	count=4
function	[function_1] scalar ||| [function_2] [function_1]	count=9
function	and biases ||| biases	count=1
module	used by the backend ||| contrib keras python keras	count=1
arg	[arg_1] estimator object ||| [arg_2] [arg_1]	count=2
module	inception ||| contrib keras python keras applications	count=1
function	tf [function] [n1 ||| [function]	count=1
module	or tensorshape object[s] ||| seq2seq python	count=1
arg	maps a ||| default_value name	count=1
module	vocabulary ||| learn preprocessing	count=4
arg	a cell with ||| cell output_size activation	count=1
function	for ||| status	count=1
function	linear [function_2] ||| [function_2] [function_1]	count=1
function	dfs traversal of a ||| dfs from	count=1
arg	aliases of the tensor ||| tensor	count=1
function	sparsesegmentmean ||| sparse segment mean	count=1
function	tensor to use for ||| tensor or dict	count=1
function	after broadcasting ||| broadcast batch shape	count=1
arg	execute ||| enqueue_op	count=1
module	[module_1] with ||| [module_2] [module_1]	count=2
function	repeats the elements of ||| elements	count=1
arg	starting from the given ||| initial_cell_state initial_output dtype	count=2
function	a postfix representation ||| tf spec structure	count=1
module	dictionary and ||| preprocessing	count=1
module	ops ||| contrib	count=1
function	pool ops in ||| pool	count=1
function_arg	[function_1] cells ||| [function_1] dim_indices [arg_2]	count=1
class	a ||| bernoulli	count=1
function	caching of control ||| caching	count=1
class	a shape ||| tensor shape	count=1
function	string ||| parse	count=3
function	hook to ||| session run hook	count=1
function	to a richtextlines object ||| text lines	count=1
module	return indexies ||| learn python	count=1
function	with attention ||| attention	count=1
arg	instance of cursesui based ||| ui_type on_ui_exit	count=1
function	on variable-updating ops with ||| test watching variable	count=1
function	fixed size histogram ||| compress histogram	count=1
function	for next cont() call ||| cont call	count=1
function	linked ||| ts from regex	count=2
arg	linearoperatordiag ||| diag is_non_singular is_self_adjoint is_positive_definite	count=1
function	for large records is ||| large	count=1
function_arg	[function_1] node ||| [arg_2] [function_1]	count=7
function	get all the tensors ||| filter	count=1
arg	node's output according to ||| is_control	count=1
function	compatible with ||| compatible with	count=2
function	indices for ||| indices for	count=2
arg	[arg_1] satisfies a ||| [arg_2] [arg_1]	count=1
function	for a batch ||| cdf batch	count=1
function	tensor into a placeholder ||| replace t with placeholder	count=1
module	a menuitem from the ||| debug cli	count=1
function	[function_1] op to ||| [function_2] [function_1]	count=2
arg	file with given ||| filename tensor_names	count=1
function	placeholder ||| with placeholder	count=1
module_class	bijector [class_2] ||| [module_1] [class_2]	count=2
arg	each row of input_tensor ||| input_tensor	count=1
function	<= 0 ||| non positive	count=1
function	the proto_type ||| get	count=1
function	19-layers version e example ||| 19	count=1
module	dimension of ||| seq2seq python ops	count=1
function	batch of ||| batch	count=6
function	list ||| rich line list	count=1
function	calculates false positives for ||| sparse false positive at	count=1
class	if this operator ||| linear operator	count=1
arg	op was ||| op	count=1
function	colocate ||| maybe colocate	count=2
function	input parsing ||| input	count=1
function	predictions for ||| predict	count=8
function_arg	static shape [arg_2] ||| [function_1] [arg_2]	count=1
arg	to newpath ||| newpath overwrite	count=1
function	define the [function_2] ||| [function_2] [function_1]	count=3
function	input_fn appropriate for serving ||| default serving	count=1
function	report a [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] batch matrix ||| [function_1] [function_2]	count=1
function	the string ||| parse	count=1
function	returns shape ||| get in out shape	count=1
function	use metricspec ||| with metric spec	count=1
module	dataframe ||| learn python learn dataframe	count=4
arg	prefix ||| prefix	count=1
module	get ||| python	count=2
arg	an alias to the ||| alias	count=1
arg	thumbnails ||| thumbnails	count=1
module	values ||| ops distributions	count=2
function	with partitioned [function_2] ||| [function_2] [function_1]	count=4
module	debug dump from ||| python debug	count=1
function	to save ||| sharded save	count=2
arg	itself ||| file_path	count=1
module	for the next runge-kutta ||| integrate	count=1
arg	method that builds ||| features	count=4
function	of file [function_2] ||| [function_2] [function_1]	count=2
function	external control [function_2] ||| [function_2] [function_1]	count=3
function	generic signature [function_2] ||| [function_2] [function_1]	count=1
function	on-run-start ||| on run start	count=1
module	of integer[s] or tensorshape ||| python ops	count=1
class	sequence of integers ||| tokenizer	count=1
arg	a graph element ||| element_name handle_node_names	count=1
arg	dnnlinearcombinedregressor ||| weight_column_name linear_feature_columns linear_optimizer	count=1
class	normalization and recurrent ||| norm	count=1
function	then return ||| assert valid	count=1
class	with the specified ||| tfexample decoder test	count=1
arg	indexies of categories ||| unused_y	count=1
function	step at which the ||| step	count=1
function	flatten list tuple of ||| flatten	count=1
class	a valid operator ||| operator pdidentity	count=1
module	event file to ||| python	count=1
function	beginning [function_2] ||| [function_2] [function_1]	count=2
arg	apply conv ||| filters num_row	count=1
class	the head ||| head	count=1
module	sessionrunhook ||| python estimator	count=2
module	dumps all layer ||| contrib keras python keras engine	count=1
module	or list of ||| contrib rnn python ops	count=1
function	the current meta ||| meta	count=1
function_arg	[function_1] full epoch ||| [function_1] [arg_2]	count=2
arg	[arg] array ||| [arg]	count=1
function	lanczos ||| lanczos	count=1
arg	between logits and labels ||| labels logits	count=1
function	an initializer that ||| initializer	count=1
function_arg	wrapper [arg_2] ||| [function_1] [arg_2]	count=6
module	instance of ||| contrib distributions python ops	count=1
arg	data to an ||| data	count=2
module	create ||| contrib slim python slim nets	count=2
function	[function_1] a node ||| [function_2] [function_1]	count=8
function	[function_1] decorator ||| [function_1] [function_2]	count=1
class	gamma ||| gamma	count=1
arg	single ||| font_attr_segs	count=1
module	iff this ||| framework	count=1
module	all are sessionrunhook ||| estimator	count=1
function	-> _guideref ||| build	count=1
module	of int or ||| ops	count=1
function_arg	binary operation [arg_2] ||| [arg_2] [function_1]	count=1
function	proper shape ||| maybe assert valid sample	count=1
function	an absolute difference ||| absolute difference	count=2
class	to ||| upgrade	count=1
function	using the google2 format ||| google2	count=1
function	before [function_2] ||| [function_1] [function_2]	count=1
module_class	step of nas ||| python ops nascell	count=1
function	multivariate digamma function ||| digamma	count=1
function	a mix of features ||| mixed features	count=4
function	a handler ||| handler	count=1
function	igamma a x with ||| igamma	count=1
arg	fetch all outputs ||| saved_model_dir tag_set signature_def_key input_tensor_key_feed_dict	count=1
module	set of ||| ops	count=6
function	gradient error ||| gradient error	count=2
module	colocate_clip_ops_with_vars ||| opt python	count=1
function	the graph is ||| graph is	count=2
function	basic metrics ||| default binary metrics	count=1
function	then return ||| sample	count=1
function	find corresponding ||| find corresponding	count=1
function	reads the value ||| read	count=1
function	asset tensors if ||| get asset tensors	count=2
function_arg	input to [arg_2] ||| [function_1] for rnn [arg_2]	count=1
class	input [class_2] ||| [class_2] [class_1]	count=3
function	display ||| display	count=1
class	[class_1] session ||| [class_1] [class_2] on	count=4
class	an ||| op test	count=1
module	version with ||| contrib learn python learn learn_io	count=1
function	the assets contained ||| assets	count=1
arg	tensors ||| summarizer	count=1
function	output a summary of ||| summary	count=1
function	from [function_2] ||| [function_2] [function_1]	count=17
arg	with feeds ||| feeds	count=1
class	table outputs the corresponding ||| mutable hash table	count=1
function	overriding tensor ||| remove override then	count=1
arg	that predictions ||| predictions	count=1
arg	if the denominator ||| denominator	count=2
arg	parameters for ||| use_peepholes cell_clip	count=1
class	tests ||| grpc server test	count=1
module	symbol name ||| tools	count=1
function	model function for ||| model fn	count=4
arg	(< 0) ||| sparse_ids sparse_weights	count=1
class	of ||| ui	count=1
module	computes ||| python mappers	count=1
function	return the string message ||| get purge message	count=1
class	tensor based on the ||| stochastic tensor	count=1
function	multi value models ||| multi value	count=2
arg	matrix ax ||| transpose_x	count=1
module	creates a cross-entropy loss ||| contrib losses python losses	count=1
module	isclass ||| python util	count=1
function	nonexistent tensor ||| list tensor nonexistent	count=1
arg	y_np ||| y_np	count=1
function	non-linearly-separable [function_2] ||| [function_2] [function_1]	count=1
function	verifies the output values ||| setup values	count=1
function	row [function_2] ||| [function_1] [function_2]	count=2
class	visitor ||| generator visitor	count=1
function	[function_1] spatial zoom ||| [function_2] [function_1]	count=2
function	[function_1] function ||| [function_1] [function_2]	count=20
function	linear_model_fn but ||| model fn	count=2
arg	files ||| has_header	count=1
function	computes the mean relative ||| mean relative	count=1
arg	a 4d ||| data_format	count=1
arg	of op for ||| op	count=1
function	[function_1] the validity ||| [function_1] [function_2]	count=4
module	3d numpy ||| contrib keras python keras preprocessing	count=1
module	the vocabulary ||| learn python learn preprocessing	count=1
function_arg	given estimator [arg_2] ||| [arg_2] [function_1]	count=3
function	cell ||| cell	count=2
function	image [function_2] ||| [function_1] [function_2]	count=1
arg	a column based on ||| column args weight_collections trainable	count=1
module	text ||| preprocessing	count=1
function	the captured variables by ||| get extra vars	count=1
module	get the ||| python debug lib	count=4
function	an output ||| output tensor	count=1
function	assert that [function_2] ||| [function_2] [function_1]	count=3
function	a 1d ||| 1d	count=1
function	arguments common ||| common args	count=2
function	the variables ||| variables	count=1
function	sort a list of ||| sort dump data by	count=1
module	the tensors linked ||| contrib graph_editor	count=1
arg	of the given values ||| values weights	count=1
function	numpy matrix ||| texts to matrix	count=1
function	biasadd node with the ||| bias add node	count=1
function	constructor of ||| init	count=1
function	all the tensors linked ||| filter ts from regex	count=1
function	adds ||| add saveable	count=1
class	indexies of ||| processor	count=1
class	learn the ||| categorical	count=1
arg	creates batches [arg_2] ||| [arg_2] [arg_1]	count=2
function	all the keys in ||| keys	count=1
arg	value of pred ||| pred	count=1
function_arg	[function_1] rank ||| [function_1] [arg_2]	count=5
function	of session session ||| session init	count=1
function	from the files ||| build	count=1
function	is both dense and ||| test dense and	count=1
function	shape values then ||| maybe assert	count=1
function_arg	list of [arg_2] ||| [function_1] [arg_2]	count=1
function	names of ||| names	count=4
function	[function_1] eval step ||| [function_2] [function_1]	count=3
function	the tensors linked to ||| from	count=1
function	slice an array or ||| slice	count=1
function	replaces a biasadd ||| bias add	count=1
module	the ||| contrib factorization python ops	count=1
function_arg	with var if ||| with var	count=1
function	have invalid type ||| test invalid	count=2
function	currentframe ||| currentframe	count=1
function_arg	tensor [arg_2] ||| [function_1] tensor [arg_2]	count=2
arg	of symbols to ||| ids vocab_size embed_dim unique	count=1
function	exception on bad ||| test bad file	count=1
function	existing variable ||| variable	count=2
function	verify the values of ||| values	count=2
function	to the average layer ||| average	count=1
function_arg	the stochastic [arg_2] ||| [function_1] nodes [arg_2]	count=1
arg	tensor numpy equivalent is ||| tensor	count=1
function	stores ||| visualize embeddings	count=1
function	adds columns to ||| assign	count=1
function	savedmodel ||| get saved model	count=1
module	transforms ||| preprocessing	count=1
function	a binary operation that ||| binary op	count=1
function	computes sparse softmax ||| sparse softmax	count=1
function	match the ||| regex	count=1
module	n [module] 2 ||| [module]	count=1
arg	tensors ||| step tensors	count=1
function	control ||| control dependencies	count=1
function	features ||| features arbitrary	count=2
class	index a file ||| index	count=1
arg	feature keys to ||| keys	count=1
arg	[arg_1] col_seq ||| [arg_1] [arg_2]	count=2
function	tensors linked ||| filter ts from	count=1
function	of n-d convolutions actually ||| non atrous convolution	count=1
class	the timer ||| timer	count=1
module	derivative of ||| ops	count=1
arg	tree representing the ||| inputs input_shape input_type	count=1
arg	b for ||| b dropout	count=1
module	generate ||| tools dist_test scripts	count=1
arg	a session ||| session	count=1
function	[function_1] numpy ||| [function_2] [function_1]	count=1
function	outputs in place ||| outputs	count=2
function	parse ||| parse tensor or dict	count=1
module	rank-2 tensor ||| solvers python ops	count=1
arg	dimension i will correspond ||| sp_input perm	count=1
function	write a sequence of ||| write	count=1
function	[function_1] decorator ||| [function_2] [function_1]	count=1
class	new chrome ||| chrome	count=1
class	and return indexies ||| categorical processor	count=1
function	a training [function_2] ||| [function_1] [function_2]	count=1
arg	pads 5d ||| padding data_format	count=1
function	dump path [function_2] ||| [function_2] [function_1]	count=3
function	render the ||| render	count=1
arg	using tf nn softmax_cross_entropy_with_logits ||| logits onehot_labels weights label_smoothing	count=1
function	data to ||| data	count=1
function_arg	[function_1] tensor ||| [function_1] cumsum [arg_2]	count=2
function	all are sessionrunhook ||| check hooks	count=1
function	looks up ||| lookup	count=3
function	calculates the size ||| params size	count=1
function_arg	[function_1] through ||| [arg_2] [function_1]	count=4
function	model_fn can ||| model fn	count=1
function	that match the ||| filter ts from regex	count=1
module	auc ||| contrib metrics python ops	count=1
module	of underlying vector space ||| ops	count=1
function	a full ||| full	count=1
module_class	[module_1] grid ||| [module_1] [class_2]	count=6
module	a keras tensor ||| keras	count=1
function	function ||| to proto function	count=1
function	matmul ||| mat mul	count=4
function	input alternatives ||| get input alternatives	count=2
function	[function_1] files with ||| [function_2] [function_1]	count=5
module	iterable of ||| tensorboard plugins	count=1
module	given number ||| learn	count=1
function	directory containing all ||| dir with all resources	count=1
function	tile along ||| expand and tile	count=1
function_arg	predictions [arg_2] ||| [function_1] classes [arg_2]	count=1
module	latest ||| tensorboard plugins projector	count=1
arg	gradients to [arg_2] ||| [arg_1] [arg_2]	count=2
function	the string_to_hash_bucket op to ||| to	count=1
function	detach ||| detach	count=1
function	of tensor or ||| tensor or	count=1
function_arg	hparamdef [arg_2] ||| [function_1] [arg_2]	count=1
module	of finalize ||| python	count=1
arg	perform regex match in ||| orig_screen_output regex font_attr	count=1
function	weighted per step false ||| false	count=1
function	dfs ||| dfs	count=1
function	of parameters in ||| count total params	count=2
function	[function_1] from ||| [function_1] [function_2]	count=48
class	to ||| test upgrade	count=1
module	from ||| docs	count=1
function	tf session [function_2] ||| [function_1] [function_2]	count=1
function	tensorflow graph [function_2] ||| [function_1] [function_2]	count=5
function	numpy ||| numpy	count=9
function	sessionlog [function_2] ||| [function_2] [function_1]	count=5
function	[function_1] creates ||| [function_1] [function_2]	count=2
class	or ||| slices	count=1
function	transformations ||| transform labels	count=4
function	are sessionrunhook raises typeerror ||| check hooks	count=1
arg	in the ||| dead_branch	count=1
function	to ops that ||| filter ts	count=1
function	queue runners ||| queue runners	count=3
function	dynamic [function_2] ||| [function_1] [function_2]	count=1
module	inner ||| contrib layers python layers	count=1
function	return true if ||| is	count=1
function	[function_1] metric value ||| [function_2] [function_1]	count=2
function	recipient of ||| recipients	count=1
function_arg	csv [arg_2] ||| [function_1] cls filepatterns feature_spec [arg_2]	count=3
function	[function_1] prediction ||| [function_2] [function_1]	count=7
function	added to [function_2] ||| [function_2] [function_1]	count=2
arg	x or [arg_2] ||| [arg_1] [arg_2]	count=1
arg	file path ||| path	count=1
function	metric ops [function_2] ||| [function_2] [function_1]	count=1
module_class	dense [class_2] ||| [module_1] [class_2]	count=1
module	retrieves ||| keras python keras engine	count=3
arg	the entire contents ||| filename binary_mode	count=1
function	[function_1] watch ||| [function_1] [function_2]	count=2
class	whether the value should ||| value	count=1
arg	sp_input ||| sp_input	count=1
function	creates a ||| create	count=2
function	batch as an int32 ||| event	count=2
function	the proto_type ||| get collection	count=1
module	an ||| python debug cli	count=2
function	return a device ||| device	count=1
function	a param to ||| assign fetch	count=1
module	tensor ||| feature_column	count=1
function	process an output tensor ||| process output tensor	count=1
function	variable or list of ||| variable or list	count=1
arg	a single tensor ||| tensor	count=2
arg	gradient for selfadjointeigv2 ||| op grad_e grad_v	count=1
class	this data set ||| data set	count=1
function	shape when possible ||| shape	count=1
function	sequence ||| to sequence	count=1
function	[function_1] observations dict ||| [function_2] [function_1]	count=3
module	[module_1] the original ||| [module_1] [module_2]	count=2
arg	3 or 4 ||| features labels mode	count=1
arg	the forward step ||| input_data input_h input_c params	count=1
function	mini batch ||| mini batch training	count=2
module	of a ||| contrib distributions python ops	count=1
arg	that cpu and gpu ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
module	ops library and return ||| ops	count=1
function_arg	[function_1] getter for ||| [function_1] accumulated value [arg_2]	count=1
function_arg	[function_1] _docstringinfo ||| [function_1] [arg_2]	count=1
module	strings ||| python training	count=1
function	[function_1] correlation coefficient ||| [function_2] [function_1]	count=1
module	filename linenumber for the ||| platform	count=1
function	batch_shape, possibly add ||| batch shape possibly add	count=1
module	same as ||| estimators	count=3
function	double ||| double	count=1
module	sure we don't have ||| compatibility	count=1
module	fetch ||| client	count=1
arg	checkpoint in checkpoint_dir and ||| checkpoint_dir master scaffold	count=1
module	if all ||| estimator	count=1
function	generates predictions for ||| predict	count=2
arg	to a file ||| filename	count=1
function_arg	[function_1] [arg_2] ||| [function_1] lookup sparse [arg_2]	count=3
function	in place to ||| to	count=1
function	the outputs [function_2] ||| [function_2] [function_1]	count=1
module	perform a step of ||| ops	count=1
function	retrieves the output mask ||| get output mask	count=1
arg	times and then raises ||| name	count=1
function	writes a [function_2] ||| [function_2] [function_1]	count=3
function	matrix [function_2] ||| [function_1] to [function_2]	count=2
class	of the glimpse extraction ||| extract glimpse	count=1
function	wrap ||| maybe wrap custom getter	count=1
module	a sequence-to-sequence ||| legacy_seq2seq python	count=1
function	learned during training ||| learned unigram	count=1
module	zero ||| python keras	count=1
function	bprop [function_2] ||| [function_1] [function_2]	count=1
module	loss to the ||| python ops losses	count=1
function	make sure the ||| compatibility	count=1
module	sessionrunhook raises typeerror ||| estimator	count=1
function	vector with dynamic ||| vector dynamic	count=3
function	the batched kl divergence ||| kl	count=2
module_class	of [class_2] ||| [module_1] vector [class_2]	count=2
function	assert bijector's forward/inverse/inverse_log_det_jacobian are ||| assert	count=1
arg	the parameters for ||| use_peepholes cell_clip	count=1
function	expired ||| expired	count=1
module	value ||| contrib keras python keras	count=1
arg	objects of base_type ||| base_type conversion_func priority	count=1
function_arg	gradient [arg_2] ||| [function_1] [arg_2]	count=1
module	same as the ||| learn estimators	count=3
function	for sequence ||| sequence input	count=1
function	tensors ||| filter	count=1
module	of each row ||| python ops	count=1
module	for the sequence-to-sequence model ||| contrib legacy_seq2seq python ops	count=2
function	classification using matrix data ||| classification	count=1
function	outputs of the ||| outputs	count=1
function	re-route both the inputs ||| reroute sgv	count=1
class	to disk ||| summary	count=1
module	name ||| tools	count=1
module	of the model ||| factorization python ops	count=1
module	systems of linear eqns ||| ops	count=1
function	collection_name ||| get collection proto type	count=1
function	create zeros_like for ||| zeros like outside loop	count=1
class	matrix [class_2] ||| [class_1] [class_2]	count=1
function	string in the ||| str	count=2
function	for node-status labels ||| node status	count=1
function	initializes all [function_2] ||| [function_1] [function_2]	count=1
module_class	[module_1] g-lstm ||| [module_1] [class_2]	count=6
arg	to sparse labels ||| labels	count=1
module	next runge-kutta ||| integrate python	count=1
module	sample from a ||| distributions	count=1
module	zero ||| contrib keras python keras	count=1
function	[function_1] graph containing ||| [function_2] [function_1]	count=1
function_arg	the sum [arg_2] ||| [function_1] sp_input [arg_2]	count=1
function	a state saver for ||| state	count=1
function	2d ||| 2d	count=1
function	a directory [function_2] ||| [function_1] [function_2]	count=1
function	irfft ||| length for irfft	count=1
arg	tensors ||| tensors capacity num_threads shared_name	count=1
module	returns true iff this ||| python framework	count=1
function	values of the ||| setup values for	count=1
class	for an ugrnn ||| ugrnncell	count=1
function	single ||| single	count=8
function	calculates false positives ||| false positive at	count=1
arg	from oldpath [arg_2] ||| [arg_2] [arg_1]	count=1
function	tf examples to ||| parse feature columns from examples	count=1
module	events inserted/accessed in ||| tensorboard backend event_processing	count=1
arg	same shard ||| filename_tensor saveables	count=1
arg	and y ||| y	count=1
function	type bfloat16 ||| bfloat16	count=1
function	[function_1] length ||| [function_2] [function_1]	count=5
function_arg	loop over [arg_2] ||| [function_1] f ins batch_size [arg_2]	count=2
function	default graph ||| import graph def	count=1
function	[function_1] name of ||| [function_2] [function_1]	count=1
module	vocabulary dictionary and return ||| learn python learn preprocessing	count=1
function	standard [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] mtimes ||| [function_2] [function_1]	count=1
function	gradient for the sum ||| reduce sum grad	count=1
arg	a looperthread that calls ||| timer_interval_secs target args	count=1
class	tensorarray as a packed ||| array	count=1
module	integrate ||| integrate	count=1
class	returns ||| builder	count=1
function	collection_name ||| proto type	count=1
function	specific plugin asset ||| retrieve plugin asset	count=2
arg	collection_name ||| collection_name	count=2
module	keras tensors ||| contrib keras python keras	count=1
function	[function_1] l1 regularization ||| [function_1] with [function_2]	count=2
function	sdcaoptimizer [function_2] ||| [function_1] real valued [function_2]	count=1
function_arg	[function_1] hdf5 file ||| [function_1] [arg_2]	count=1
function	returns ||| get collection	count=1
function	if all are sessionrunhook ||| check hooks	count=1
class	accumulator ||| conditional accumulator base	count=2
module	cell output dimension ||| contrib rnn python	count=1
arg	a specific format ||| export_path checkpoint_path eval_result	count=1
function	[function_1] its namesake ||| [function_2] [function_1]	count=3
function_arg	[function_1] graph ||| [function_1] [arg_2]	count=1
function	grublockcell ||| grublock cell	count=1
arg	b, producing [arg_2] ||| [arg_2] [arg_1]	count=4
function	with sdcaoptimizer ||| sdca optimizer	count=2
module	[module_1] of keras ||| [module_1] [module_2]	count=1
arg	with the new_export_strategies ||| new_export_strategies	count=1
arg	see traverse for details ||| parent children	count=1
function	function ||| build function	count=1
module	estimator ||| learn python learn estimators	count=1
arg	parameters for ||| num_units use_peepholes initializer num_proj	count=1
function	after ||| after	count=2
function_arg	[function_1] queue_runner_def ||| [function_1] proto [arg_2]	count=1
function	input_node ||| weight eightbit	count=1
module	returns a tensor ||| python keras	count=3
class	notfounderror ||| not found error	count=2
module	tensors specified by the ||| slim python slim	count=1
arg	value to ||| value	count=2
function	serving_input_receiver_fn ||| serving input receiver	count=2
function	and ||| and target	count=1
function	[function_1] dnn-only ||| [function_2] [function_1]	count=2
module	a menuitem from ||| cli	count=1
function	-> ||| index	count=1
function	basic fit ||| fit	count=1
function	reads the value ||| value	count=1
class	of mixture s of ||| mixture	count=1
function	creates a tf ||| server	count=1
function_arg	[function_1] [arg_2] pass results through ||| [function_1] [arg_2]	count=1
module	values will be ||| python framework	count=1
module	an ||| ops	count=1
function	[function_1] pool ||| [function_1] [function_2]	count=8
function	values of ||| values	count=10
function	precision@k of predictions ||| at top k	count=1
function	input layer ||| input layer	count=1
arg	condition ||| condition	count=1
module	node ||| tools quantization	count=1
module	batch systems of equations ||| python ops	count=1
function_arg	[function_1] tensor and ||| [arg_2] [function_1]	count=5
function	mean squared [function_2] ||| [function_2] [function_1]	count=9
function	batch vector [function_2] ||| [function_2] [function_1]	count=6
function	as linear_model_fn but returns ||| with model fn ops	count=2
arg	dimension dim ||| dim epsilon name	count=1
arg	partitions ||| partitions	count=1
module	sense of tensors ||| linalg	count=2
function	save the ||| sharded save	count=2
module	filename linenumber ||| python platform	count=1
module	is [module_1] [module_2] ||| [module_2] [module_1]	count=2
class	run() ||| run context	count=1
module	from a command ||| debug cli	count=1
module_class	[module_1] initializer as ||| [module_1] ops [class_2]	count=1
function	wait ||| wait	count=1
function	[function_1] stepper ||| [function_2] [function_1]	count=1
function	use a watch_fn ||| watch	count=1
class	resnet [class] ||| [class]	count=3
function	the processor of ||| get processor	count=1
function	evaluation metric [function_2] ||| [function_2] [function_1]	count=2
function	function estimator ||| function	count=1
function	all inputs ||| inputs tensor info from	count=1
function	wrap a ||| maybe wrap custom getter	count=1
function	file name ||| file name	count=1
class	values ||| dirichlet multinomial	count=2
function	the python traceback ||| traceback	count=1
arg	and parse example protos ||| file_pattern batch_size features reader	count=1
arg	feeds and fetches ||| fetches feeds	count=6
function_arg	[function_1] vector keep_input ||| [function_1] [arg_2]	count=4
function_arg	matmul [arg_2] ||| [arg_2] [function_1]	count=2
class	tests ||| kernel linear classifier test	count=1
arg	a tensor ||| dtype name	count=1
function	[function_1] error ||| [function_2] [function_1]	count=25
function	health pill ||| health pills	count=2
arg	has a rank that ||| rank	count=1
module_class	[module_1] processor ||| [module_1] vocabulary [class_2]	count=1
function	step false positives for ||| streaming sparse false positive	count=1
function_arg	> [arg_2] ||| [arg_2] [function_1]	count=3
function_arg	[function_1] the output ||| [arg_2] [function_1]	count=3
module	a function ||| distributions	count=1
class	erase ||| curses ui	count=1
function	[function_1] directory ||| [function_2] [function_1]	count=9
module	inception ||| keras python keras applications	count=1
arg	inputs ||| inputs environment	count=1
function	uniform base distribution ||| uniform	count=1
module	savedmodel pbtxt file containing ||| saved_model python saved_model	count=1
class	a shape ||| shape	count=1
function	[function_1] sparsetensordensematmul ||| [function_2] [function_1]	count=2
arg	of cursesui [arg_2] ||| [arg_2] [arg_1]	count=8
function	to ||| get string to hash bucket	count=1
arg	tf nn softmax_cross_entropy_with_logits ||| logits onehot_labels weights	count=1
function_arg	verifies the [arg_2] ||| [function_1] values [arg_2]	count=2
function_arg	[function_1] logits and ||| [function_1] _sentinel labels [arg_2]	count=3
function	name -> ||| build guide index	count=1
module	batch ||| contrib distributions	count=1
arg	5d tensor ||| data_format	count=1
function	use monkey-patching to capture ||| capture	count=1
module	of ||| linalg python ops	count=16
arg	for recall@k and precision@k ||| labels predictions_idx class_id	count=1
function	[function_1] metagraphdef ||| [function_2] [function_1]	count=1
function_arg	to enqueue [arg_2] ||| [arg_2] [function_1]	count=1
function	create the barrier ||| create barrier	count=2
function	to sparse [function_2] ||| [function_2] [function_1]	count=3
function	dfs traversal ||| dfs	count=1
function	line in ||| screen add line	count=1
function	batched [function] tensors ||| [function]	count=1
function	dict symbol name -> ||| build guide index	count=1
function	[function_1] main ||| [function_2] [function_1]	count=1
function	matrix to vector ||| matrix to vector	count=6
function	options to ||| options	count=1
function	graph as [function] ||| [function]	count=1
class	is positive definite ||| pdsqrt vdvtupdate	count=1
module	rank-2 ||| contrib solvers python ops	count=2
function	true positives ||| sparse true positive	count=2
function	attribute (e ||| attribute	count=1
function	derivatives for nearest ||| nearest	count=1
arg	for this handle ||| graph handle dtype	count=2
function	[function_1] file ||| [function_1] [function_2]	count=20
class	a single ||| summary to event transformer	count=1
function	[function_1] events in ||| [function_1] [function_2]	count=2
function	create ||| init	count=27
module	tensor of a ||| python ops	count=1
function	predict and [function_2] ||| [function_1] [function_2]	count=1
module	instantiates a keras ||| contrib keras python keras	count=1
function	the timestamp in seconds ||| timestamp	count=1
class	return ||| dirichlet multinomial	count=2
function	sparsesegmentsqrtn ||| sparse segment sqrt ngrad	count=1
arg	a suitable summary type ||| tag	count=1
function	then return tensor version ||| valid sample	count=1
module	name of ||| python	count=1
function	betainc ||| betainc	count=1
function	get a ||| item	count=1
function	for proper shape values ||| assert valid sample	count=1
module	validates ||| keras utils	count=1
module	timestamp when this ||| python client	count=1
module	constructor for ||| python debug wrappers	count=1
function	complexabs ||| complex abs	count=1
arg	values ||| values	count=16
function	rnn model function ||| get dynamic rnn model fn	count=1
module	this ||| contrib rnn python ops	count=1
class	in the ast ||| flow call visitor	count=1
function	that ||| ts from regex	count=2
function	[function_1] and ||| [function_1] [function_2] sparse	count=3
function	the save path ||| save path	count=2
class	adadelta optimizer ||| adadelta optimizer	count=2
module	reroute ||| python util	count=1
arg	given value to ||| value dtype	count=2
function	the inputs of ||| inputs	count=2
module	get a menuitem ||| debug	count=1
arg	predictions with ||| predictions	count=3
function	[function_1] next cont() ||| [function_2] [function_1]	count=4
function	histogram values ||| histograms	count=1
function	returns the product of ||| mul	count=1
module	same as ||| learn estimators	count=3
function	create a smaller ||| shrink	count=1
function	the field-to-obs mapping into ||| to	count=1
class	values will be ||| indexed	count=1
function	remove any [function_2] ||| [function_1] [function_2]	count=5
arg	and from_proto ||| proto_type to_proto from_proto	count=1
arg	sequence model ||| encoder_inputs decoder_inputs encoder_cell decoder_cell	count=1
arg	conjugate prior on ||| prior	count=1
function	l1 regularized model ||| train optimizer with l1reg	count=1
function_arg	[function_1] weights + ||| [function_1] x [arg_2]	count=2
function	with dynamic shapes ||| to matrix dynamic	count=1
function	tied shared ||| tied	count=1
class	create a ||| strategy	count=1
module	"matmul") ||| framework	count=1
function	input ||| one input value	count=2
function	a tensorshape [function_2] ||| [function_2] [function_1]	count=2
function_arg	max [arg_2] ||| [function_1] [arg_2]	count=1
function	the default mapping ||| default	count=2
module	the vocabulary dictionary ||| learn preprocessing	count=1
function	the summary tensor used ||| summary	count=1
function_arg	gradient for [arg_2] ||| [arg_2] [function_1]	count=3
function	at the given checkpoint ||| once	count=2
class	the column ||| valued var len column	count=1
module	of an integer tensor ||| keras	count=1
function	border of the ||| border	count=1
arg	interval values ||| values name	count=1
function	a sequence of ||| to sequences	count=1
class	to the graph ||| graph	count=1
module	the axes of two ||| python ops	count=1
function	to capture the ||| test capture	count=1
arg	state saving sequence queue ||| cell features	count=1
function	[function_1] walsfactorization ||| [function_2] [function_1]	count=3
function	[function_1] feature extraction ||| [function_2] [function_1]	count=4
function	resnet50 ||| res net50	count=1
arg	to train a model ||| train_samples test_samples input_shape num_classes	count=1
module	[module_1] of operators ||| [module_1] [module_2]	count=1
arg	estimator [arg_2] ||| [arg_2] [arg_1]	count=2
function	bilinear ||| bilinear grad	count=2
arg	tensor with defined ||| tensor	count=1
function	the sdca optimizer ||| sdca	count=1
class	input_fn that ||| test base	count=1
module	create ||| python debug cli	count=2
function	returns the id tensor ||| id tensor	count=3
arg	distributions with mean and ||| validate_args allow_nan_stats	count=1
function	write a sequence of ||| write histogram	count=1
module	have ||| compatibility	count=1
class	linearoperator in y = ||| linear operator	count=1
class	feeder ||| feeder	count=1
module	don't ||| tools compatibility	count=2
arg	creates a tensor with ||| tensor dtype name optimize	count=1
function	vocabulary dictionary and return ||| transform	count=1
function	the gradient function ||| grad	count=1
module	dtype ||| python	count=1
module	the ||| ops	count=1
function	wrap a call ||| wrap custom getter	count=1
class	check ||| operator tri l	count=1
module_class	this [class_2] ||| [module_1] [class_2] tracker add unref timestamp	count=5
function	given transform s to ||| transform	count=1
function_arg	variables according [arg_2] ||| [arg_2] [function_1]	count=1
module	of an integer tensor ||| contrib keras python keras	count=1
module	sequence of integers ||| python keras	count=1
arg	featurecolumns ||| columns_to_tensors feature_columns num_outputs weight_collections	count=1
arg	file with ||| filename	count=1
function	l2loss ||| l2loss	count=1
function	has no ||| hashed output v2 has no	count=1
class	from the dump root ||| dump	count=1
function	initializer and a corresponding ||| initializer	count=1
module	cell [module_2] ||| [module_1] [module_2]	count=2
function	[function_1] distance ||| [function_2] [function_1]	count=1
function	returns a tensor ||| get	count=1
function	cosine [function_2] ||| [function_2] [function_1]	count=4
function	reservoirs with different ||| uses seed	count=1
function	strings e ||| string	count=1
function_arg	export the [arg_2] ||| [function_1] [arg_2]	count=2
module	this input ||| python framework	count=1
function	the directory ||| dir	count=1
module	of init ||| python ops	count=2
module	samples ||| python keras	count=1
module	and ||| learn	count=8
module	batches ||| python ops	count=1
function	with real [function_2] ||| [function_1] [function_2]	count=6
function	for dnn-linear combined ||| dnnlinear combined bug fixed	count=1
function	postfix representation of the ||| tf spec structure	count=1
class	check ||| boolean mask test	count=1
function_arg	[function_1] sensitivity ||| [arg_2] [function_1]	count=2
class	create ||| stop at step	count=1
function	before processing ||| batch begin	count=1
class	whether the value ||| stochastic value	count=1
function	function to apply ||| conv2d	count=1
function	each forward tensor ||| forward	count=1
function	deserialize ||| deserialize	count=1
module	model from a savedmodel ||| saved_model	count=1
function	undoes all smartset() & ||| clean up	count=1
module	of tensors that summarize ||| ops	count=1
function	the ||| ts from	count=2
module	produced or ||| python	count=1
function	prevents adding ||| return as is	count=1
module	training ops [module_2] ||| [module_2] [module_1]	count=3
function	multiply sparsetensor ||| sparse tensor	count=1
function	[function_1] indexedslices ||| [function_2] [function_1]	count=5
function	the learning ||| learning	count=2
module	get ||| debug lib	count=6
function	inference to determine the ||| predict classes	count=2
module	this object overriding components ||| ops	count=1
function	inputs for sequence to ||| seq2seq inputs	count=1
function	as linear_model_fn but returns ||| model fn with model fn	count=2
function_arg	[function_1] x ||| [function_1] [arg_2]	count=8
function	a list of ||| list of	count=1
class	tensor with ||| tensor	count=1
function	have invalid ||| invalid number of	count=1
function	functions ||| functions	count=1
module	from 0 to ||| python training	count=1
class	represents the function ||| function	count=1
function	[function_1] weights of ||| [function_1] [function_2]	count=3
function	a key not ||| key	count=1
class	reference to a markdown ||| reference	count=1
arg	numeric labels into onehot_labels ||| labels	count=1
arg	a tensor with all ||| tensor dtype name optimize	count=1
class	process ||| code upgrader	count=1
module	of elements in this ||| framework	count=1
class	[class_1] outputs of ||| [class_1] [class_2]	count=1
class	validate ||| debug dump dir	count=1
module	all ||| contrib graph_editor	count=2
function_arg	[function_1] a debug-dumped ||| [arg_2] [function_1]	count=4
module	imagenet model's ||| applications	count=1
function	retrieve the python traceback ||| traceback	count=1
function	data types into acceptable ||| data type	count=1
function	[function_1] [function_2] input ||| [function_1] [function_2]	count=2
class	[class_1] that failed ||| [class_1] [class_2]	count=1
function_arg	in [arg_2] ||| [function_1] params [arg_2]	count=1
arg	xs by ||| xs	count=1
function_arg	[function_1] table ||| [function_1] [arg_2]	count=1
arg	python object "candidate" ||| candidate name	count=1
function	and return the total ||| total	count=1
module	of tensors ||| contrib linear_optimizer python ops	count=1
module	as the ||| learn estimators	count=3
module	a ||| contrib	count=1
function	adds a layer ||| add	count=1
class	with ||| test base	count=1
arg	term to ||| epsilon	count=1
function	variables that ||| variables	count=1
module	dimension of ||| python ops	count=1
function	adds tf options to ||| handle options	count=1
arg	from the replaced tensors ||| target_ts replacement_ts dst_scope src_scope	count=1
arg	labels [arg_2] ||| [arg_1] [arg_2]	count=4
module	the dataframe [module_2] ||| [module_2] [module_1]	count=1
function	init arg num_rows, possibly ||| num rows possibly	count=1
module	model's forward ||| imperative examples	count=1
function	temporary ||| get temp	count=1
function	default initializer and ||| default initializer	count=2
module	from ||| python debug	count=1
function	to automatically call batch ||| batch	count=1
function	planes ||| one hot planes	count=2
module	vocabulary ||| learn python learn	count=1
function	signatures ||| signatures	count=1
module	returns a tensor with ||| keras python keras	count=1
arg	the graph ||| graph	count=4
function	random spatial zoom ||| random zoom	count=3
module	using matrix data as ||| python learn estimators	count=2
function	dropout given the ||| dropout	count=1
function	mean of a ||| mean	count=1
function	specified invalid indices in ||| by invalid indices	count=1
function	feed types used ||| last feed types	count=2
class	given [class_2] ||| [class_2] [class_1]	count=2
class	in the ast ||| visitor	count=1
function_arg	[function_1] estimator to ||| [arg_2] [function_1]	count=1
function	provided have invalid type ||| test invalid number	count=1
arg	b ||| a b	count=3
function	create a tf placeholder ||| make placeholder from dtype and	count=1
function	labels outside [function_2] ||| [function_2] [function_1]	count=8
function	max pool along ||| max pool along	count=6
function	flops for ||| logged	count=1
function_arg	[function_1] tensor and ||| [function_1] [arg_2]	count=5
class	shape ||| gmmtest	count=1
module	the collection of losses ||| contrib losses python losses	count=1
module_class	ops created [class_2] ||| [module_1] [class_2]	count=1
arg	x or y ||| x y	count=1
function	root mean [function_2] ||| [function_2] [function_1]	count=8
arg	a highwaywrapper ||| couple_carry_transform_gates carry_bias_init	count=1
function	include classes ||| build standardized signature def	count=1
function	raised when loss ||| loss	count=2
function	of custom ||| get custom	count=1
function	verifies the values ||| test output values	count=3
arg	does ||| data num_clusters random_seed	count=1
function	[function_1] function ||| [function_2] [function_1]	count=22
class	the name of the ||| slices	count=1
function	output file [function_2] ||| [function_2] [function_1]	count=2
function	reads a [function_2] ||| [function_1] [function_2]	count=1
module	list of ||| python ops	count=28
module	can do a ||| contrib layers python layers	count=1
function	confusion ||| confusion	count=1
module	dataset of only 1/ratio ||| python learn datasets	count=1
function	time string in the ||| readable time str	count=1
function	adds tf options to ||| options	count=1
function	[function] faster ||| [function]	count=1
function	[function_1] input dimension ||| [function_1] [function_2]	count=1
function_arg	converting [arg_2] ||| [arg_2] [function_1]	count=2
arg	x is a non-negative ||| x check_integer	count=1
function_arg	the mean [arg_2] ||| [function_1] [arg_2]	count=1
arg	maps activations from the ||| activations labels sequence_length	count=3
module	sense of tensors ||| contrib linalg	count=2
function_arg	[function_1] numpy ||| [function_1] to floatx [arg_2]	count=1
module	returns a tensor for ||| python	count=1
function	the standard services ||| standard services	count=2
arg	the tensors linked ||| ops	count=1
class	a ||| dtype	count=1
function_arg	[function_1] given slicing ||| [arg_2] [function_1]	count=1
function	[function_1] dtype ||| [function_2] [function_1]	count=3
function	interval to a ||| interval	count=2
function	to ops that match ||| from regex	count=1
arg	body to ||| body loop_vars shape_invariants	count=1
function	run the ||| call	count=1
arg	to the offset in ||| offset	count=1
function	for the specified line ||| line	count=1
arg	trains a simple classification ||| checkpoint_dir num_steps	count=2
arg	b, producing a ||| transpose_a transpose_b	count=2
function	the current control ||| control	count=2
function	an op ||| op benchmark	count=1
function	feed dictionary ||| feed dict	count=1
arg	loc ||| loc	count=3
function	object ||| to object	count=1
function	extraction ||| bottleneck	count=2
function	resize and ||| resize and	count=1
module	core version with default ||| learn	count=1
function	set attributes self _diag_update ||| set	count=1
class	the scroll ||| scroll bar	count=1
function_arg	evaluation [arg_2] ||| [arg_2] [function_1]	count=1
function	with vocabulary file ||| with vocabulary file	count=1
module	sequence of ||| keras	count=2
arg	denominator is zero ||| numerator denominator	count=1
module	of 1 ||| python	count=1
class	linearregressor ||| linear regressor	count=2
function	average ||| average	count=12
arg	text in texts in ||| texts	count=1
function	see if it is ||| is	count=1
arg	transformations to ||| mode	count=4
function	ops to save the ||| save	count=2
class	[class_1] audio ||| [class_2] [class_1]	count=2
arg	a custom_getter to ||| custom_getter	count=1
module	shape values ||| python ops	count=1
function	[function_1] file ||| [function_1] tensor [function_2]	count=1
arg	grad along the ||| op grad	count=1
function	placeholder for ||| placeholder from tensor	count=1
class	the optimizer from numpy ||| optimizer	count=1
function	unbatch work ||| unbatch	count=1
module	return indexies of ||| preprocessing	count=1
function	equiv ||| tensor	count=2
module	function for ||| python ops	count=1
function	loss of the ||| loss	count=1
function	key not ||| key	count=1
module	embedding projector ||| tensorboard plugins projector	count=1
function	runs one evaluation against ||| eval	count=1
function	output a summary of ||| spec summary	count=1
function	dump from the run ||| for run	count=1
module_class	[module_1] _coordinatedsession ||| [module_1] [class_2]	count=4
arg	adagradda ||| global_step initial_gradient_squared_accumulator_value l1_regularization_strength	count=1
module	a rank-2 ||| solvers	count=1
function	to a number ||| to	count=1
class	for the extractimagepatches op ||| extract image patches	count=1
module	a ||| keras	count=2
function_arg	a random [arg_2] ||| [function_1] brightness [arg_2]	count=1
function	sessionrunhook raises ||| hooks type	count=1
function	the batch and ||| batch	count=1
module	a numpy array ||| python keras	count=1
arg	hints from op1 and ||| op1	count=1
arg	g1 ||| g1	count=1
function	[function_1] a matrix ||| [function_2] [function_1]	count=7
function	tensor's shape ||| shape	count=1
function	[function_1] rank of ||| [function_2] [function_1]	count=1
function_arg	[function_1] predictions, labels ||| [arg_2] [function_1]	count=2
function	covariance ||| covariance	count=1
function	and create ||| create	count=3
function	[function_1] columns present ||| [function_2] [function_1]	count=4
function	invalid indices ||| invalid indices	count=1
class	head ||| single head	count=1
function	if all are sessionrunhook ||| check hooks type	count=1
module	of underlying ||| distributions python ops	count=1
function	valid tests configs to ||| test configs	count=5
function	true ||| sparse true	count=2
function	line containing the column ||| column	count=1
function_arg	[function_1] 0 holds ||| [arg_2] [function_1]	count=1
module	verifies ||| python learn estimators	count=1
function_arg	[function_1] predictions with ||| [function_1] [arg_2]	count=2
arg	to var ||| var	count=2
arg	[arg_1] labels tensor ||| [arg_2] [arg_1]	count=8
function	[function_1] gradient ||| [function_1] [function_2]	count=2
arg	queues batches and ||| batch_size features	count=1
function	using parameter hashing ||| sampled scattered	count=1
module	of integers ||| contrib keras python keras preprocessing	count=1
module	an ||| python ops	count=1
function	[function_1] variable with ||| [function_2] [function_1]	count=4
function_arg	variable stored ||| variable var_name	count=1
function	grayscale ||| grayscale	count=1
function_arg	boundary [arg_2] ||| [function_1] [arg_2]	count=4
module	of zero or ||| linalg python ops	count=1
class	multivariate normal distribution ||| multivariate normal	count=3
function	match the ||| filter ts from	count=1
function	vector with static ||| vector static	count=3
function	back ||| back	count=1
module	s ||| engine	count=10
arg	python object "candidate" for ||| candidate	count=1
arg	and ps jobs ||| num_workers num_param_servers port name_prefix	count=1
function	table that converts ||| index table	count=1
module	a ||| python keras preprocessing	count=2
arg	row ||| rows cols num_shards	count=1
function	given path ||| path	count=1
arg	specified axis ||| axis	count=2
function	normal distribution w ||| normal	count=1
function_arg	<= [arg_2] ||| [function_1] x [arg_2]	count=3
module	pixels ||| contrib ndlstm python	count=1
module	to ||| training python training	count=1
function	sum of ||| sum	count=5
module	verifies ||| learn estimators	count=1
function	performs beam [function_2] ||| [function_1] [function_2]	count=5
module	a cross-entropy loss using ||| contrib losses python losses	count=1
function	prepares features config from ||| feature spec for parsing	count=1
arg	sha256 or md5 hash ||| fpath file_hash algorithm chunk_size	count=1
function_arg	a placeholder [arg_2] ||| [function_1] [arg_2]	count=1
arg	using tf nn sigmoid_cross_entropy_with_logits ||| logits multi_class_labels weights	count=1
function	inputs according to their ||| bucket by	count=1
function	tf session ||| session	count=2
function	[function_1] shallow dict ||| [function_1] [function_2]	count=1
function	[function_1] existing variable ||| [function_1] [function_2]	count=1
function_arg	true if [arg_2] ||| [function_1] tensor like [arg_2]	count=1
class	a ||| round robin	count=1
function	[function_1] file with ||| [function_1] [function_2]	count=2
arg	and body to ||| body original_loop_vars loop_vars	count=1
function	to read [function_2] ||| [function_1] batch [function_2]	count=2
function	default image data ||| image data	count=2
function	of the inner cell ||| cell	count=1
function	coordinator ||| coord	count=1
module	specified output of ||| ops	count=2
arg	print its execution time ||| input_shape perm num_iters	count=1
arg	the biasaddgrad [arg_2] ||| [arg_2] [arg_1]	count=2
function	to vector ||| to vector	count=4
arg	maps [arg_2] ||| [arg_2] mapping [arg_1]	count=4
function	search ||| search with	count=1
arg	a container of ||| container	count=1
function	core add the loop ||| loop	count=1
function_arg	dependency on [arg_2] ||| [function_1] [arg_2]	count=1
function	root directory ||| root dir with	count=2
class	for ||| stepper	count=1
class	feeding for a range ||| feeder	count=1
module	the ||| rnn python ops	count=3
arg	token with [arg_2] ||| [arg_1] [arg_2]	count=1
function	[function_1] message discards ||| [function_1] [function_2]	count=2
function	to loop over ||| predict loop	count=1
function	parse list of file ||| file	count=1
class	diag ||| matrix diag transform test	count=1
module	only the ||| contrib ndlstm python	count=1
module	of current ||| python ops	count=1
arg	example containing the encoded ||| image_shape image_format label	count=1
class	an interactivesession ||| interactive	count=1
arg	concentration and [arg_2] ||| [arg_1] [arg_2]	count=2
function	tensor of indices ||| index	count=1
function	then return tensor version ||| valid	count=1
function_arg	resnet-152 [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	[function_1] linearestimator object ||| [function_1] [arg_2]	count=1
module	dict of ||| ops	count=1
function	given cholesky ||| cholesky	count=1
class	a tensor into the ||| tensor	count=1
module	each ||| contrib keras python keras preprocessing	count=2
function	return a mask ||| mask	count=1
function	models from ||| input from	count=1
arg	use the old_getter internally ||| old_getter	count=1
function	save the ||| sharded save ops	count=2
function	variables and names that ||| and slice inputs	count=1
function	a postfix representation of ||| structure	count=1
function	graph, returns [function_2] ||| [function_2] [function_1]	count=1
module	the end of the ||| graph_editor	count=1
module	of the ||| framework python ops	count=1
function	graph [function_2] ||| [function_1] [function_2]	count=7
class	glimpse extraction ||| extract glimpse	count=1
function	mean ||| reduce mean	count=1
function	the run ||| run	count=1
class	create ||| sparse meta data	count=1
function	within [function_2] ||| [function_2] [function_1]	count=1
arg	parameters loc and ||| loc	count=1
function	create the ||| maybe create control	count=1
module	vocabulary ||| contrib learn python learn preprocessing	count=4
function	create a list ||| create	count=1
function	this device ||| gputrace device	count=1
function	build [function_2] ||| [function_2] [function_1]	count=3
arg	predictions and ||| predictions	count=1
arg	tensor with all elements ||| tensor	count=1
arg	feeder ||| x_shape y_shape n_classes batch_size	count=1
function_arg	name of [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	[function_1] grpcdebughook ||| [arg_2] [function_1]	count=1
class	then return tensor version ||| dirichlet multinomial	count=1
function	flatten ||| flatten	count=2
function	planes ||| hot planes	count=2
function	signaturedef ||| info from meta graph def	count=1
function_arg	[function_1] some data ||| [arg_2] [function_1]	count=8
function	the average layer ||| average	count=1
function	to ops that ||| from regex	count=1
function	see tf global_variables_initializer ||| initialize all variables	count=1
function	similar to gradient for ||| grad	count=1
function	the total variation ||| total variation	count=6
function	cell used in ||| cell	count=1
function	transforms ||| transforms	count=1
class	initializes ||| stop at step hook	count=1
class	the wrapper ||| wrapper session	count=1
function_arg	[function_1] to labels ||| [arg_2] [function_1]	count=3
function	integer indices [function_2] ||| [function_2] [function_1]	count=1
module	a keras tensor ||| contrib keras python keras	count=1
function	computes the shape of ||| shape	count=1
function	enqueue based on ||| enqueue	count=1
module	get ||| cli	count=2
function	[function_1] axis ||| [function_1] [function_2]	count=1
module_class	of current [class_2] ||| [module_1] [class_2]	count=2
class	[class_1] lstm cell ||| [class_1] [class_2]	count=2
arg	on condition ||| condition	count=1
class	menuitem from ||| menu	count=1
module	previous output tensors ||| grid_rnn python ops	count=1
module	values ||| python ops	count=1
function	absolute difference ||| absolute difference	count=2
function	from a graph file ||| from	count=1
function	with no emitted edges ||| test watching variable update ops sees updated values	count=1
function	the batch [function_2] ||| [function_2] [function_1]	count=1
function	to load a checkpoint ||| checkpoint	count=1
arg	numbered line_number with ||| line_number	count=1
function	min or [function_2] ||| [function_2] [function_1]	count=4
function	philox ||| philox	count=1
function	concatenation has no collisions ||| has no collision	count=1
function_arg	[function_1] np_matrix ||| [arg_2] [function_1]	count=1
function_arg	[function_1] between logits ||| [function_1] _sentinel labels [arg_2]	count=3
function	from a directory recursively ||| from directory	count=1
module	don't ||| tools	count=1
module	previous output ||| contrib grid_rnn python ops	count=1
function	return ||| valid	count=1
class	column ||| valued var len column	count=1
module	coordinator ||| python training	count=1
function	to predictions [function_2] ||| [function_2] [function_1]	count=5
module	tensor or list of ||| ops	count=1
module	name -> ||| tools docs	count=1
function	alternatives ||| alternatives	count=1
function	no scores ||| signature def classification6	count=1
arg	maps activations from the ||| activations sequence_length target_column problem_type	count=1
module	image s ||| contrib image	count=2
function	restore variables ||| restore ops	count=1
module	all ||| event_processing	count=2
function	verifies model ||| verify model	count=1
arg	prior on the mean ||| prior scale	count=1
function_arg	[function_1] [arg_2] ||| [function_1] rnn [arg_2]	count=8
module	evaluates ||| contrib keras python keras	count=1
function	create the [function_2] ||| [function_2] [function_1]	count=1
arg	tensor text ||| tensor	count=1
arg	called at ||| logs	count=4
function	new subdirectory within ||| timestamped export	count=2
function	the control ||| control	count=1
module	runge-kutta ||| contrib integrate python ops	count=1
function_arg	checks if [arg_2] ||| [function_1] session bundle dir [arg_2]	count=1
function	when one ||| one	count=1
module_class	produces this [class_2] ||| [module_1] [class_2]	count=2
class	to some sample data ||| data generator	count=1
module	dictionary and ||| contrib learn python learn	count=1
module	gradients for ||| ops	count=3
function	absolute error between ||| absolute error	count=2
function	[function_1] observations ||| [function_2] [function_1]	count=3
module	one step of ||| python ops	count=3
class	interactivesession ||| interactive session	count=1
class	[class_1] line ||| [class_1] [class_2]	count=3
module	two lists of unique ||| contrib labeled_tensor python ops	count=1
arg	nn sigmoid_cross_entropy_with_logits ||| multi_class_labels weights label_smoothing	count=1
arg	command handler for list_tensors ||| args screen_info	count=1
function_arg	[function_1] input samples ||| [arg_2] [function_1]	count=6
class	dense tensor ||| sparse feature	count=2
function	sparsetensor ||| sparse tensor from	count=2
class	an event ||| summary to event	count=1
function	score function estimator with ||| score function with	count=1
function	computes average [function_2] ||| [function_1] precision [function_2]	count=3
function	servers ||| servers one	count=1
function	makes a layer ||| layer	count=1
function	switch op ||| switch grad	count=1
function_arg	[function_1] state-saving ||| [function_1] for rnn [arg_2]	count=1
function	convert a list ||| rich line list	count=1
arg	rgb image ||| image saturation_factor	count=1
arg	computes the ||| weights name	count=1
arg	file is ||| checkpoint_dir	count=1
arg	sensitivity ||| predictions labels sensitivity weights	count=1
class	sequence ||| sequence batch	count=2
function	and concatenate sparsetensors from ||| many sparse	count=1
arg	a looperthread ||| timer_interval_secs target args	count=1
module	3 ||| kernel_tests	count=1
function_arg	parsing tf sequenceexamples ||| parsing sequence_feature_columns allow_missing_by_default	count=1
module	of ||| keras	count=2
function	reroute errors written to ||| reroute	count=1
function	a sine ||| sine	count=2
function	decorated function ||| function	count=1
function	plugin asset from a ||| asset	count=1
function_arg	[function_1] the key ||| [function_1] [arg_2]	count=1
module	systems of equations with ||| linalg python ops	count=1
module	__init__ which gets ||| distributions python ops bijectors	count=1
function	signature ||| build signature	count=1
function	add a control ||| maybe add control	count=1
function	[function_1] training operation ||| [function_1] [function_2]	count=1
module	bijector ||| distributions python ops bijectors	count=1
arg	each cluster ||| clusters	count=1
module	the ||| contrib ndlstm python	count=1
function	tensor ||| data tensor	count=1
class	version event ||| event	count=1
module	of load() ||| tensorboard backend	count=1
arg	output determined by pred ||| pred dtype	count=1
function	returns ||| get feed dict fn	count=1
module	learn the ||| learn python	count=1
class	dfs ||| debug analyzer	count=1
function	an identity matrix or ||| eye	count=1
function	save and reload a ||| train save load	count=1
function	inference to determine ||| classes	count=2
function	watch an output ||| output tensor	count=1
function	[function_1] evaluation metrics ||| [function_1] [function_2]	count=2
module	of factors ||| python ops	count=1
module	or tensorshape object[s] ||| contrib seq2seq python	count=1
class	sparsemax case ||| sparsemax	count=1
function	signaturedef ||| standardized signature def	count=1
function_arg	tile along [arg_2] ||| [function_1] tensor [arg_2]	count=1
function	has been decorated with ||| has arg	count=1
function	[function_1] of sparse_column_with_hash_bucket ||| [function_2] [function_1]	count=2
function	returns a function ||| get feed dict	count=1
function	queries the shape ||| shape	count=1
class	tensorshape with the given ||| shape	count=1
arg	or fn_else() ||| fn_then fn_else	count=1
module	with the matrix of ||| ops	count=1
function_arg	of replicas [arg_2] ||| [function_1] [arg_2]	count=1
function	configuration of the ||| config	count=1
function_arg	[function_1] of co-existance ||| [function_1] input args [arg_2]	count=1
function	filename ||| filename	count=2
function	a model_fn ||| create model fn ops	count=1
class	a table ||| lookup table	count=1
function	the values in a ||| output values	count=2
class	check to make ||| files	count=1
arg	the expected ||| expected_type	count=1
function	reshaping behavior ||| column reshaping	count=1
arg	all steps and ||| noutput scope	count=1
arg	op1 and ||| op1	count=2
module	the original kernel ||| python	count=1
function	converts embedding lr ||| extract embedding lr	count=2
class	the extractimagepatches op ||| extract image patches	count=1
function	a filename for ||| filename	count=1
class	that selects ||| test	count=1
function	in tensorboard ||| to tensorboard	count=1
module	return tensor ||| python	count=1
function	inputs ||| inputs tensor info from meta graph	count=1
function	image by [function] factor ||| [function]	count=2
function	parameters in a list ||| count total params	count=1
function	no emitted ||| update ops sees updated values	count=1
function	[function_1] options ||| [function_1] [function_2]	count=4
class	values will be ||| indexed slices	count=1
function	control flow [function_2] ||| [function_2] [function_1]	count=2
function	a node [function_2] ||| [function_1] [function_2] map node_map	count=3
arg	loss_collection ||| scope loss_collection	count=1
class	for debug tensor watching ||| debug wrapper	count=1
arg	linearoperatorcomposition ||| operators is_non_singular is_self_adjoint is_positive_definite	count=1
module	list of tensors ||| ops	count=13
arg	the compatiblity ||| loss_fns output_shapes	count=1
arg	name to a name ||| name	count=1
function_arg	[function_1] [arg_2] ||| [function_1] v [arg_2]	count=3
function	that is a ||| version	count=2
arg	the inputs ||| inputs	count=1
function	[function_1] to the ||| [function_1] [function_2]	count=4
module	the op ||| python framework	count=1
arg	each tensor in tensor_list ||| tensor_list	count=1
function	run ||| call	count=7
function	hash_signs=true ||| sign hash	count=1
arg	appearing ||| log_p q z n	count=1
arg	x gradients ||| x y	count=1
rep	[module_class_1] graph g ||| [module_class_1] add [function_arg_2]	count=1
function	concatenation has ||| v2 has	count=1
function	returns a ||| get feed dict fn	count=1
arg	tests input-output pairs ||| image ksizes strides rates	count=1
function	the ||| filter ts from	count=2
module	function ||| python ops distributions	count=1
class	of ||| processor	count=1
class	cudnn to the ||| cudnn rnn	count=1
function	as an ||| as	count=1
function_arg	[function_1] and h ||| [function_1] x [arg_2]	count=1
function	original [function_2] ||| [function_1] [function_2]	count=2
module	objects ||| learn python learn estimators	count=1
function	raw params used by ||| raw params	count=1
function	sets static [function_2] ||| [function_1] [function_2]	count=2
function	the ||| build	count=1
module	external ||| contrib specs python	count=1
function	vs grucell ||| vs gru	count=2
class	gradient descent optimizer ||| gradient descent optimizer	count=5
module	of dimensions ||| ops	count=4
function	get all the tensors ||| filter ts	count=1
function	output slot ||| output slot	count=2
module	rank-2 ||| solvers python	count=1
function_arg	[function_1] prior on ||| [function_1] [arg_2]	count=2
function	for converting ||| conversion	count=1
class	to make sure we ||| test	count=1
function	the integer indices ||| integer indices	count=2
function	normal distribution w conjugate ||| normal	count=1
arg	by normalizing with the ||| predictions labels normalizer	count=1
class	debug tensor ||| debug wrapper	count=1
module	of ||| learn ops	count=1
arg	[arg_1] to var ||| [arg_2] [arg_1]	count=2
function	graph containing a sequence ||| graph	count=1
function	a sequence ||| texts	count=1
function	define kernel size ||| kernel size	count=2
function	shear of a ||| shear	count=1
function	a menuitem ||| caption to item	count=1
module	a dataframe with only ||| learn dataframe	count=1
arg	a tree representing ||| input_type	count=1
arg	execute the ||| sess enqueue_op coord	count=1
class	the export ||| export	count=1
function	weighted sum [function_2] ||| [function_2] column [function_1]	count=2
function	performs greedy ||| ctc greedy	count=1
function	modulo ||| mod	count=1
function	the session run() call ||| run	count=1
module	dict ||| learn estimators	count=1
function	for ||| assert valid	count=1
class	node-status labels ||| stepper	count=1
module	of beams into a ||| ops	count=1
function	creates generic ||| generic	count=1
function	the signaturedef ||| info from meta graph def	count=1
module	determining ||| keras	count=1
module	this object ||| contrib seq2seq python ops	count=1
module	prefetech ||| python slim data	count=1
function	[function_1] slot ||| [function_1] [function_2]	count=2
function	to use ||| to hash	count=1
function	a sprite image ||| sprite image	count=1
function	[function_1] row ||| [function_1] [function_2]	count=5
function	features ||| features	count=13
function	verify compression for large ||| large	count=1
function	subgraph [function_2] ||| [function_1] [function_2]	count=2
function	into predict ||| predict data	count=1
function	higher [function_2] ||| [function_1] [function_2]	count=1
function	a non-reference dtype ||| base	count=1
function	vocabulary dictionary ||| fit	count=1
arg	the compatiblity [arg_2] ||| [arg_2] [arg_1]	count=2
arg	tensor_list ||| tensor_list	count=1
function	directory recursively walks subdirectories ||| directory	count=1
class	dense tensor ||| sparse feature column	count=2
function	a model_fn ||| create model fn	count=1
module	get a ||| lib	count=1
arg	by [arg_2] ||| [arg_2] [arg_1]	count=1
module	eventfilewriter ||| writer	count=1
function	explicitly queries the shape ||| get shape	count=1
function	total ||| total	count=5
module	make sure we ||| compatibility	count=1
arg	microbenchmark ||| iters	count=1
function	path ||| path	count=4
class	[class] filtering ||| [class]	count=2
module	lists of [module_2] ||| [module_2] [module_1]	count=1
class	vocabulary after ||| categorical vocabulary	count=1
function_arg	[function_1] tensors ||| [function_1] [arg_2]	count=5
function	[function_1] caching_device ||| [function_2] [function_1]	count=1
function	step true positives ||| true positive at	count=1
module	a specific format of ||| cudnn_rnn python ops	count=2
arg	dimensions of tensor ||| dimensions	count=1
module	'graph and session and ||| learn python learn	count=1
function	build a ||| build	count=6
function_arg	asserts [arg_2] ||| [arg_2] [function_1]	count=2
arg	dimension dim ||| dim	count=1
function	returns the appropriate ||| get	count=1
function	and ||| and conv	count=2
class	get ||| non square linear operator derived class test	count=1
module	a dict of tensors ||| ops	count=1
function	nearest ||| nearest	count=1
arg	a pil image instance ||| img data_format	count=1
module	transform that wraps a ||| learn python learn dataframe transforms	count=1
function	tensor to use for ||| data tensor or dict	count=1
function	asserts whether ||| assert	count=1
module	an ||| client	count=1
function_arg	[function_1] satisfies ||| [arg_2] [function_1]	count=4
module	number of dimensions corresponding ||| contrib distributions python ops	count=2
function	types ||| types	count=1
function	placeholder for the ||| placeholder from tensor	count=1
module	of equations ||| linalg python ops	count=1
function	creates a bijector which ||| init	count=1
arg	call to a custom_getter ||| custom_getter	count=1
function	a log [function_2] ||| [function_2] [function_1]	count=1
function	different [function] ||| test different tensor [function]	count=1
function	collect information necessary specifically ||| collect docs	count=1
function	n_classes > [function] ||| test multi [function] label	count=6
function	[function_1] should ||| [function_1] feed [function_2]	count=2
class	run() ||| session run	count=1
module	of underlying vector space ||| distributions python ops	count=1
module	from a rank-2 tensor ||| solvers	count=1
arg	some data ||| verbose	count=2
arg	distributions ||| validate_args allow_nan_stats	count=4
class	normal distribution on r^k ||| normal diag plus low	count=1
function	1-hot encodings for planes ||| planes	count=1
module_class	[module_1] multi-layer cell ||| [module_1] [class_2]	count=4
function	bias feature column ||| bias column	count=3
arg	[arg_1] b ||| [arg_1] [arg_2]	count=2
class	the value tensor ||| tensor	count=1
function	perform ||| regex find	count=1
function	values and [function_2] ||| [function_1] [function_2]	count=1
module	graphdef and returns ||| python framework	count=1
function	file will be written ||| logdir	count=1
function	from csv file ||| csv	count=2
module	the end ||| contrib graph_editor	count=2
function	variables and names that ||| and slice	count=1
function	end of ||| end	count=3
arg	x in xs ||| xs name colocate_gradients_with_ops	count=1
module	to ||| contrib learn python learn estimators	count=1
class	reservoir ||| reservoir	count=1
arg	entire contents ||| filename binary_mode	count=1
function	[function_1] cluster ||| [function_2] [function_1]	count=1
arg	of tensors ||| tensors session feed_dict	count=1
arg	[arg_1] var beta ||| [arg_2] [arg_1]	count=3
module	with ||| learn learn_io	count=2
function	[function_1] signature ||| [function_2] [function_1]	count=6
class	metadata ||| embedding metadata	count=1
function	to the ||| to	count=6
function	menuitem from ||| item	count=1
arg	a dimension of ||| dim	count=1
arg	the model over a ||| x y sample_weight	count=1
function_arg	[function_1] labels ||| [arg_2] [function_1]	count=33
class	without extra layers ||| test	count=1
class	by concrete [class_2] ||| [class_1] [class_2]	count=1
module	carlo estimate of an ||| contrib bayesflow python ops	count=1
arg	this handle ||| handle dtype	count=1
arg	their names ||| flattened_fetches	count=1
function	which concatenates input vectors ||| concat vectors	count=1
module	the cell with ||| contrib rnn python	count=3
function	then tile along the ||| tile	count=1
function	create a smaller ||| shrink csv	count=1
arg	to m ||| m	count=1
function	igamma a x ||| igamma	count=1
function	node and add it ||| add op node	count=1
arg	values to a list ||| values	count=3
arg	a summarywriter and ||| event_writer graph graph_def	count=1
module	ops that ||| graph_editor	count=1
module_class	this op with ||| framework operation	count=1
class	tests ||| accumulator test	count=4
function	feature indices represented as ||| feature indices	count=1
function	calculates false [function_2] ||| [function_1] [function_2]	count=2
module	gets the ||| python	count=1
function	values then return tensor ||| maybe assert valid	count=1
module	transforms ||| contrib keras python keras	count=1
function	flip matrix ||| flip matrix	count=2
arg	based on ||| ui_type	count=1
function	[function_1] validates bias ||| [function_2] [function_1]	count=1
module	tfdecorator-aware replacement for inspect ||| util	count=1
function	placeholder ||| placeholder from dtype	count=1
function	an [function_2] ||| [function_1] [function_2]	count=4
function	tests a matmul ||| test mat mul	count=2
function	gradients for "op" ||| gradient	count=1
function	of valid task ||| task	count=1
function	and bias [function_2] ||| [function_2] [function_1]	count=3
function	or sparsetensor objects ||| sparse	count=1
function	projects [function_2] ||| [function_1] [function_2]	count=2
function	[function_1] [function_2] ||| [function_2] column weighted [function_1]	count=6
class	tensorflow tensor have the ||| tensor flow	count=1
function	batch dimensions ||| batch	count=2
function	create a tf ||| make	count=2
function	[function_1] column factors ||| [function_2] [function_1]	count=1
function	a tensorshape ||| shape	count=1
function	operation [function_2] ||| [function_1] [function_2]	count=2
arg	y elementwise using python ||| y	count=1
function	[function_1] input parsing ||| [function_2] [function_1]	count=1
function_arg	function that [arg_2] ||| [function_1] x target_key [arg_2]	count=1
arg	returns range(0 rank x ||| x axis	count=1
function	root mean squared error ||| streaming root mean squared error	count=1
module	symbol name -> ||| docs	count=1
function	survival_function [function] cdf ||| prob with logsf [function]	count=1
arg	compute the estimated size ||| print_info	count=1
arg	logdir ||| logdir plugin_name asset_name	count=1
arg	non-initialized hashtable object ||| initializer default_value shared_name name	count=1
arg	[arg_1] op2 ||| [arg_2] [arg_1]	count=3
function	runoptions [function_2] ||| [function_2] hook [function_1]	count=1
module	outcome (vs ||| python ops	count=1
function	values then return ||| maybe	count=1
module	grad ||| python ops	count=1
function	a new seed from ||| new	count=1
function	after a [function_2] ||| [function_1] [function_2]	count=3
function	dumps ||| helper	count=1
function	time string in ||| time str	count=1
module_class	[module_1] nas ||| [module_1] [class_2]	count=3
class	if the stack is ||| default graph stack	count=1
function	the tensors linked ||| from regex	count=1
module	models that use a ||| learn python learn estimators	count=1
function	[function_1] vocabulary ||| python layers sparse column [function_1] [function_2]	count=1
module_class	[module_1] current iteration ||| [module_1] [class_2]	count=2
function	of evaluation ||| eval	count=1
function	head ||| head	count=2
function_arg	data [arg_2] ||| [arg_2] [function_1]	count=4
module	indices and values of ||| python ops	count=1
module	returns the names of ||| ops	count=1
function	[function_1] op used ||| [function_1] [function_2]	count=6
function	the init [function_2] ||| [function_1] [function_2]	count=3
function	output file ||| output file	count=2
arg	symbols ||| ids vocab_size embed_dim	count=1
function	array [function_2] ||| [function_1] [function_2]	count=6
function	on variable-updating ops with ||| test watching variable update	count=1
function	adds a flow start ||| flow start	count=1
function	increasing ||| increasing	count=1
function_arg	[function_1] with validation ||| [arg_2] [function_1]	count=1
class	the bucket ||| bucket	count=1
function	given variable [function_2] ||| [function_2] [function_1]	count=4
function	increments ||| count up	count=1
function	connected output ||| connected outputs	count=2
function	shape function [function_2] ||| [function_2] [function_1]	count=6
arg	and returns it ||| value	count=1
arg	in given output directory ||| output_dir dictionary current_global_step	count=1
function	shape values then ||| maybe assert valid	count=1
function_arg	arg_scope can [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	for serving [arg_2] ||| [function_1] [arg_2]	count=1
function	to run() call ||| run calls	count=1
class	check to make sure ||| files	count=1
arg	find or create a ||| var slot_name op_name	count=1
function	returns true if this ||| is	count=1
function	initialize the [function_2] ||| [function_2] [function_1]	count=3
class	an ||| interactive session	count=1
function	name [function_2] ||| [function_2] [function_1]	count=5
function	[function_1] dictionary used ||| [function_2] [function_1]	count=3
function_arg	[function_1] of sequences ||| [arg_2] [function_1]	count=1
module	from ||| contrib learn python learn	count=2
module	number ||| contrib losses python losses	count=1
function	message discards expired events ||| message discards expired events	count=1
function	incremental [function] on a ||| partial [function]	count=1
class	server with the ||| server	count=1
function	predictions with respect ||| precision at top	count=4
function	the name of the ||| name	count=3
function	[function_1] from metric ||| [function_2] [function_1]	count=4
function	along [function_2] ||| [function_1] [function_2]	count=6
arg	batch_size and [arg_2] ||| [arg_1] [arg_2]	count=1
arg	for input_node ||| input_node	count=2
function	format convention ||| format	count=1
function	sum of [function_2] ||| [function_2] [function_1]	count=2
module	runge-kutta ||| integrate	count=1
module	session and runs ||| python learn	count=1
function	to vectors by ||| as vector	count=2
arg	g input_tensors) from a ||| attr_name	count=1
module	component ||| learn python learn estimators	count=2
function	object created [function_2] ||| [function_2] [function_1]	count=2
arg	a loop ||| val	count=1
function	calculate one step of ||| step	count=1
function	the string_to_hash_bucket op to ||| to hash bucket	count=1
function	strided ||| strided	count=1
function	slot named "name" ||| slot	count=1
module	the sum ||| python	count=1
module	be produced or ||| python framework	count=1
function	with respect [function_2] ||| [function_2] average [function_1]	count=4
arg	the model over ||| y sample_weight	count=1
module	a sequence ||| keras python keras preprocessing	count=1
module	elements from this ||| python ops	count=1
function	[function_1] normalization ||| [function_1] [function_2]	count=5
module	specified by [module_2] ||| [module_1] [module_2]	count=4
function	with high-dimension [function_2] ||| [function_2] [function_1]	count=3
class	initializer ||| value tensor initializer	count=1
module	objects ||| python learn estimators	count=1
function	to reload ||| reload	count=1
function	has no collisions ||| output v2 has no collision	count=1
function_arg	[function_1] to train ||| [arg_2] [function_1]	count=3
function	name of [function_2] ||| [function_2] [function_1]	count=6
arg	the actual value tensor ||| actual static_shapes	count=1
function	is the diagonal ||| diag	count=1
module	shape ||| framework	count=1
module_class	[module_1] queue ||| [module_1] [class_2]	count=22
function	in the collection with ||| add to collection	count=1
function	log determinant ||| log det	count=2
module	the ||| graph_editor	count=14
function	of number [function_2] ||| [function_2] [function_1]	count=1
arg	of the single-line ||| max_length backward_command forward_command latest_command_attribute	count=1
function	you can save ||| save load	count=1
function	[function_1] slice of ||| [function_2] [function_1]	count=2
function	returns the column ||| get col	count=2
module	return dict ||| docs	count=1
module	of tensors corresponding ||| python ops	count=4
function	calculates the size ||| size	count=1
class	metadata values ||| metadata	count=1
module	and values in ||| python feature_column	count=2
module	of factors weights and ||| contrib factorization python ops	count=1
function	a file [function_2] ||| [function_1] [function_2]	count=3
class	model ||| cudnn rnn	count=2
module	ops that creates ||| ops	count=1
function	a tf placeholder ||| make placeholder from dtype	count=1
arg	value to ||| value dtype	count=1
arg	input_tensors) from a ||| node_index attr attr_name	count=1
function	node ||| op node	count=1
module	a dataframe into ||| python learn dataframe	count=1
function	returns a list of ||| get	count=1
function	featurecolumns and ||| to feature columns and	count=1
module	only the ||| python	count=1
function_arg	outputs of [arg_2] ||| [arg_2] [function_1]	count=5
class	op that failed ||| op error	count=2
function	computes sparse ||| flipped sparse	count=1
function_arg	[function_1] save_path/filename ||| [arg_2] [function_1]	count=2
module	1 ||| ops	count=5
function	string in ||| str	count=2
function	calculates the mean ||| mean	count=1
class	add ||| debug analyzer	count=1
function	traceback of a node's ||| traceback	count=1
arg	shards along given axis ||| num_shards axis	count=1
function	if all ||| hooks type	count=1
class	the head ||| single head	count=1
class	table outputs ||| interface	count=1
function	at ||| at	count=8
function_arg	[function_1] weights ||| [arg_2] [function_1]	count=2
arg	gradients [arg_2] ||| [arg_2] [arg_1]	count=2
function	[function_1] vector ||| [function_1] [function_2]	count=7
module	number ||| ops losses	count=1
module	building ||| hybrid python models	count=2
function	ops to restore variables ||| restore	count=1
function	queue for an input ||| input	count=1
function	[function_1] serving_input_receiver_fn ||| [function_2] [function_1]	count=2
function	that maps input ||| input	count=1
arg	retrieve a ||| name index	count=1
module_class	[module_1] graph ||| [module_1] [class_2]	count=5
module	the event ||| summary	count=1
function	produces a ||| input producer	count=1
function	[function_1] [function_2] ||| [function_1] parsing [function_2]	count=4
function	tensor to use ||| label tensor	count=1
function	the tensorflow variables for ||| vars	count=1
function	of the state ||| state	count=1
module	matrix data as ||| learn estimators	count=4
arg	of predictions ||| predictions	count=1
class	of the stepper ||| stepper	count=1
function	maps input ||| input	count=1
function_arg	adds [arg_2] ||| [function_1] column [arg_2]	count=1
arg	tensor representing the ||| name	count=1
module	of ||| learn	count=2
function	resnet-50 model of ||| 50	count=1
class	@ ||| multivariate normal	count=1
module	symbol name ||| tools docs	count=1
class	from the file ||| file	count=1
function	batch ||| train on batch	count=2
function	[function_1] recurrent ||| [function_2] [function_1]	count=2
arg	stored in a ||| var_name	count=1
function	single batch of samples ||| on batch	count=2
module	sequence of ||| ops	count=2
function_arg	variation for [arg_2] ||| [function_1] [arg_2]	count=1
function	exit the [function_2] ||| [function_2] [function_1]	count=1
function	trigger ||| summary events trigger	count=1
function	state of the inner ||| state	count=1
function	sdcaoptimizer and a mix ||| sdca optimizer mixed	count=1
class	get ||| derived class test	count=2
function	names of variables ||| convert names	count=1
module	summarize ||| contrib layers python layers	count=2
arg	an axis ||| axis	count=3
function	returns configuration ||| config	count=1
arg	tree representing the ||| input_type	count=1
function	the full ||| full	count=1
function	[function_1] a restart ||| [function_1] [function_2]	count=2
class	with no rich ||| rich	count=1
function_arg	variables [arg_2] ||| [arg_2] [function_1]	count=1
function	create an ||| create profiler ui	count=1
arg	object based on ||| key_dtype value_dtype	count=1
function	running an op ||| op prebuilt	count=1
function_arg	loop over [arg_2] ||| [arg_2] [function_1]	count=4
function	the tensors linked to ||| ts from	count=1
function	start message discards ||| start message discards	count=3
function_arg	[function_1] a ||| [function_1] sp_input container shared_name [arg_2]	count=1
arg	of symbols ||| ids vocab_size embed_dim unique	count=1
arg	suitable summary type ||| tag	count=1
class	the op (e ||| operation	count=1
function	minimum of ||| reduce min	count=1
arg	[arg_1] an image ||| [arg_2] [arg_1]	count=1
function	tensor to a ||| tensor	count=1
function	new values from a ||| from	count=1
module	for ||| python debug	count=1
function	when pooling ratio is ||| pooling ratio	count=1
module	the number of ||| python ops	count=2
module	from a rank-2 tensor ||| contrib solvers python ops	count=1
module	reduced ||| slim nets	count=1
arg	method for recording ||| name iters cpu_time wall_time	count=1
module	as classes ||| contrib learn python learn estimators	count=1
module	tensor and ||| contrib keras python keras	count=1
module	[module_1] input ||| [module_1] [module_2]	count=1
function	has real ||| has	count=1
arg	broadcasts ||| op_name elementwise_function	count=1
arg	for recall@k ||| k class_id	count=1
function	from the ||| caption to	count=1
function	gets the state names ||| get state names	count=1
function	labels for a ||| labels	count=1
function	indexedslices objects ||| indexed slices	count=1
module	batch ||| distributions python	count=1
function	embedding ||| extract embedding	count=1
function	monkey-patching to capture ||| capture	count=1
function	[function_1] the inputs ||| [function_1] node without [function_2]	count=1
module	for labeled ||| labeled_tensor python ops	count=2
function	learn the vocabulary dictionary ||| transform	count=1
arg	and concatenates n ||| n	count=1
function	[function_1] functions for ||| [function_1] [function_2]	count=3
module	loss using ||| python losses	count=1
function	latest ||| latest	count=4
function	for variable-length numeric data ||| valued var len	count=1
function	1d ||| 1d	count=1
function	variable instance ||| variable	count=1
class	for debug tensor ||| base debug wrapper	count=1
function	integer column with vocabulary ||| int column with vocabulary with dense input	count=1
function	sets ||| batch set value	count=1
function	richtextlines object ||| lines from rich line	count=1
class	quantized distribution ||| quantized distribution	count=1
class	the registered [class_2] ||| [class_2] [class_1]	count=6
class	values then return ||| dirichlet multinomial	count=1
function	for local ||| local	count=1
module	rnn cell composed ||| contrib rnn python	count=1
function	every temporal slice ||| time distributed dense	count=1
function	tensor from [function_2] ||| [function_1] [function_2]	count=2
function_arg	signature from [arg_2] ||| [function_1] [arg_2]	count=12
function	full batch ||| full batch training	count=2
function	return tensor version ||| maybe assert valid	count=1
arg	logits and labels ||| labels logits name	count=1
arg	the values in y_np ||| x_np y_np	count=1
function	get the device ||| device	count=1
function	dict [function_2] ||| [function_1] [function_2]	count=2
arg	[arg_1] the expected ||| [arg_2] [arg_1]	count=1
module	outcome ||| python ops	count=1
function_arg	from csv [arg_2] ||| [function_1] cls filepatterns feature_spec [arg_2]	count=3
arg	a tensor with ||| tensor dtype name	count=1
function_arg	[function_1] a config ||| [function_1] summary_writer [arg_2]	count=1
function	returns the broadcasted dynamic ||| broadcast dynamic	count=1
module	0) ||| python ops distributions	count=2
class	test ||| dnnclassifier test	count=1
function_arg	[function_1] in collectiondef ||| [arg_2] [function_1]	count=4
function	and returns [function_2] ||| [function_1] [function_2]	count=8
function	add ops to save ||| add save ops	count=1
arg	[arg_1] images ||| [arg_2] [arg_1]	count=4
arg	[arg_1] of tensors ||| [arg_2] [arg_1]	count=8
function	inference graph ||| inference graph	count=2
function	input ||| one input	count=2
function_arg	lstm cell [arg_2] ||| [function_1] [arg_2]	count=3
arg	and m_prev ||| m_prev	count=1
function	list of context ||| context	count=1
class	created ||| distribution shape	count=1
function	client feed ||| tensor feed keys	count=1
function	satisfied at given ||| satisfied at	count=1
function	prefix but invalid syntax ||| syntax error	count=1
function_arg	positives [arg_2] ||| [function_1] labels predictions_idx [arg_2]	count=4
module	for the location ||| contrib distributions python ops	count=1
module	returns ||| python losses	count=1
function	transform s to ||| transform	count=1
module	tool ||| tools graph_transforms	count=1
function	returns a header for ||| get header from ops and	count=1
class	state ||| flow state	count=1
class	the op [class_2] ||| [class_1] [class_2]	count=1
class	table outputs the ||| interface	count=1
function	key not [function_2] ||| [function_2] [function_1]	count=4
arg	by rnncell cell ||| cell	count=1
module	and runs ||| learn python learn dataframe	count=1
arg	sigmoid_cross_entropy_with_logits ||| multi_class_labels weights	count=1
function	the file paths ||| file paths	count=2
function	returns the current ||| get	count=2
function	and validates bias ||| bias only	count=1
module	the dataframe and ||| learn dataframe	count=1
function	the beginning ||| begin	count=1
arg	concentration [arg_2] ||| [arg_1] [arg_2]	count=2
function	items that the ||| items	count=1
arg	body to the ||| body original_loop_vars loop_vars	count=1
module	classification ||| contrib learn python learn estimators	count=2
arg	from predictions and labels ||| labels predictions num_classes dtype	count=1
class	lstm ||| grid lstmcell	count=1
function	fetches used in the ||| fetches info	count=1
function	a given plugin ||| retrieve plugin	count=1
function_arg	paths from [arg_2] ||| [arg_2] [function_1]	count=1
class	for the rnn model ||| cudnn rnn	count=1
function_arg	[function_1] if ||| [function_1] [arg_2]	count=5
class	values then return tensor ||| dirichlet	count=1
function	and runoptions [function_2] ||| [function_2] [function_1]	count=2
function_arg	cond [arg_2] ||| [arg_2] [function_1]	count=1
class	server with ||| server	count=1
arg	[arg] as an ||| [arg]	count=2
function	spatial shear ||| shear	count=1
arg	the given ||| scope	count=2
function	variation for a ||| variation	count=1
arg	computes matmul x ||| x	count=2
class	stack ||| sequential	count=1
function	a richtextlines ||| rich text lines from rich line	count=1
module	tensorshape object[s] ||| seq2seq python	count=1
function	broadcast ||| broadcast	count=1
function	a function for ||| function	count=1
module	if colocate_clip_ops_with_vars ||| contrib opt	count=1
function	restores the ||| restore	count=1
function	nodes after ||| again	count=1
module	step of ||| contrib seq2seq python ops	count=1
class	initialize a scalar deterministic ||| deterministic	count=1
module	parameter p is ||| contrib distributions python kernel_tests	count=1
function	of basic metrics ||| metrics	count=1
module	as the ||| learn python learn estimators	count=3
function	the file ||| file	count=1
function	and bias names haven't ||| and bias names	count=1
module	given number ||| python learn	count=1
function	representing number of bytes ||| bytes to	count=1
module	format of ||| ops	count=2
class	cell output ||| cell	count=1
function	resize and ||| resize and conv	count=1
function	generic ||| generic	count=1
arg	to [arg] embedding ||| name [arg]	count=1
function	to their [function_2] ||| [function_1] [function_2]	count=1
arg	i will correspond ||| sp_input perm name	count=1
function_arg	operation that broadcasts ||| op op_name elementwise_function	count=2
function	log p x >= ||| log	count=1
function	vectors by [function_2] ||| [function_2] as [function_1]	count=1
arg	a file with ||| filename tensor_names	count=1
module	run the [module_2] ||| [module_2] [module_1]	count=2
module	in ||| contrib keras python keras	count=3
function_arg	[function_1] [arg_2] ||| [function_1] weight [arg_2]	count=1
function_arg	shape is [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	[function_1] nonlinearity ||| [arg_2] [function_1]	count=1
module	method to ||| ops	count=1
function	current default graph ||| import graph def	count=1
function	tf session run() ||| session run	count=2
function	training with given weight ||| train with weights	count=3
function_arg	[function_1] string record ||| [function_1] [arg_2]	count=1
class	a reader ||| reader base	count=3
function	[function_1] active ||| [function_1] [function_2]	count=3
arg	validation on the compatiblity ||| loss_fns output_shapes	count=1
module	dict ||| tools docs	count=2
function	valid [function_2] ||| [function_1] [function_2]	count=4
function	when input tensor ||| tensor input	count=1
module	each text ||| contrib keras python keras	count=1
class	event file ||| event file	count=1
module	the input ||| inputs	count=1
module	a dataframe with only ||| contrib learn python learn dataframe	count=1
function	callable that runs ||| make callable	count=1
arg	fetching a tensor ||| name	count=1
class	this tensor ||| debug tensor	count=1
module	[module] op ||| [module]	count=1
module	version with default shuffle ||| python learn	count=1
function	[function_1] key ||| [function_1] unique target [function_2]	count=1
function	[function_1] a python ||| [function_2] [function_1]	count=3
function	reads the value of ||| read	count=1
module	and return indexies ||| learn python learn preprocessing	count=1
function	names from ||| names	count=1
class	[class_1] failed ||| [class_2] [class_1]	count=2
class	proper shape values then ||| dirichlet	count=1
module	given ||| learn	count=5
class	operator to ||| operator identity	count=1
class	eventaccumulator after adding some ||| mocking event	count=1
module	returns the ||| python layers	count=2
function	ops with ||| test	count=1
class	should have similar behavior ||| operator pdderived class	count=1
module	create ||| python	count=1
module	checkpoint ||| contrib learn python learn	count=1
module	bottleneck network ||| python slim nets	count=1
function	[function_1] probably ||| [function_1] [function_2]	count=3
module	summarize ||| python layers	count=2
arg	for different thresholds on ||| labels thresholds	count=2
class	have a ||| test	count=1
module	graph building doesn't ||| tensor_forest hybrid python models	count=1
function	returns the [function_2] ||| [function_1] tokens [function_2]	count=4
arg	on r^k, for k ||| loc atol rtol validate_args	count=1
function	as tf [function_2] ||| [function_2] [function_1]	count=1
module	of ||| contrib labeled_tensor python ops	count=4
function	returns trainer ||| get train	count=3
arg	validates the output tensor ||| filename file_format duration_sec samples_per_second	count=1
function	the broadcasted dynamic ||| broadcast dynamic	count=2
module	of a variable ||| ops	count=1
function	name ||| index	count=1
function	[function_1] regression ||| [function_2] [function_1]	count=1
function	command from the ||| command from	count=1
function	return the page ||| build function page	count=1
module	of every ||| ops	count=1
function	sum of [function_2] ||| [function_2] column weighted [function_1]	count=2
function	fit coefficients ||| interp fit	count=1
function	with dynamic ||| to matrix dynamic	count=1
function	dictionary of custom objects ||| custom objects	count=1
function	accepts a state saver ||| state	count=1
arg	variable that comprise ||| name all_vars	count=1
function	can save ||| save load	count=1
arg	node_info ||| node_name op_type	count=1
function	smaller ||| shrink csv	count=2
module_class	in specific [module_1] [class_2] ||| [module_1] [class_2]	count=1
function	returns the proto_type ||| get collection	count=1
module	and ||| learn python learn utils	count=2
class	sdcalinearregressor ||| sdcalinear regressor	count=4
module	of dimensions corresponding to ||| ops	count=2
function	create test ||| create test	count=2
module	all the tensors ||| graph_editor	count=1
function	create the value ||| create	count=1
function	and conv2d produce ||| fwd conv2d	count=1
class	the generator into ||| generator	count=1
function	[function_1] mean of ||| [function_2] [function_1]	count=2
module	values then return ||| distributions	count=1
function	handle visiting ||| visit	count=1
arg	node ||| node_name	count=2
function	load session bundle from ||| load session bundle or saved model bundle from	count=1
function	adjust the contrast ||| contrast	count=1
arg	and body to ||| body	count=1
class	while loop ||| loop state	count=1
arg	across all steps ||| noutput scope name	count=1
arg	x element-wise ||| x	count=6
module	the ||| cli	count=1
function	be used to ||| to	count=1
class	random [class_2] ||| [class_1] [class_2]	count=1
arg	salt ||| salt	count=1
function	valid types ||| valid dtypes	count=2
function	postfix representation of the ||| structure	count=1
function	broadcasted dynamic shape ||| broadcast dynamic shape	count=2
rep	[module_class_1] graph g ||| [module_class_1] [function_arg_2]	count=1
function	the format of /data/scalars ||| scalars	count=1
function	restore ||| restore	count=3
arg	1d convolution layer ||| kernel_size	count=1
module	values will ||| python framework	count=1
arg	given dimensions ||| dims	count=1
arg	draws [arg] samples ||| lam [arg] dtype	count=1
function	adds operations to read ||| read	count=4
module	[module_1] building doesn't ||| [module_1] [module_2]	count=6
function	[function_1] a while ||| [function_1] [function_2]	count=7
function	indices for the specified ||| index at	count=1
function	[function] tensor ||| test inconsistent [function] shape raises	count=3
function	can save and reload ||| save load	count=1
arg	given ||| num_shards	count=2
arg	reduce elems ||| elems initializer	count=2
arg	z ] with sample ||| z	count=1
function	cumulative sum of the ||| cumsum	count=1
function	based on this dtype ||| base dtype	count=1
arg	returning [arg] is <= ||| numerator [arg]	count=1
function	a mix of features ||| mixed features arbitrary	count=2
function	for model_fn that ||| with model fn ops	count=1
arg	same shape and contents [arg_1] [arg_2] ||| [arg_1] [arg_2]	count=1
function	for proper ||| assert	count=1
function	entropy given ||| entropy	count=1
function	variable or list of ||| set variable or list	count=1
arg	docstring ||| unused_arg	count=1
function	basic metrics for ||| binary metrics for	count=1
function_arg	to save [arg_2] ||| [function_1] [arg_2]	count=1
function	training with partitioned variables ||| train with partitioned variables	count=4
class	of this estimator ||| base wrapper	count=1
function	at a given rate ||| resample at rate	count=1
class	file to disk ||| writer	count=1
function	[function_1] 2d ||| [function_2] [function_1]	count=3
function	main page ||| test request main page	count=1
class	from callables ||| inline	count=1
function	segmentmin ||| segment min	count=2
module	assert ||| python ops	count=8
class	drawing a 1 ||| binomial	count=2
function	a sequence of integers ||| texts	count=1
function	[function_1] matmul ||| [function_2] [function_1]	count=1
function	a layer based on ||| get layer	count=1
class	[class] root ||| [class]	count=3
arg	a particular step ||| fetches feed_list	count=1
class	that event discards ||| mocking event accumulator	count=1
function	select ||| select	count=1
function	boots 3 servers ensures ||| test cluster spec propagation three servers one cluster	count=1
function	linear_model_fn but returns modelfnops ||| model fn with model fn ops	count=2
arg	across all steps and ||| inputs noutput scope name	count=1
arg	numpy arrays or dicts ||| rtol atol	count=1
function	nice error if someone ||| conversion error	count=1
arg	values tensors ||| values	count=1
module	labels ||| python debug	count=1
arg	of lb [arg] if they ||| [arg]	count=1
module	proto_type for ||| framework	count=1
function	dynamic shapes ||| vector to matrix dynamic	count=1
module	returns a training ||| contrib layers python layers	count=1
function	positive ||| positive	count=2
module	argument in args from ||| contrib learn python learn	count=1
arg	for smaller ||| shrink	count=1
function	conv layer ||| conv	count=1
function	without ||| without	count=1
class	linearregressor with ||| linear regressor	count=2
function	params used ||| params	count=1
function	run metadata information ||| run metadata	count=2
function	dictionary of names to ||| to dict	count=1
function	and file name ||| dump file name	count=2
function	embedding lookup to build ||| deep embedding lookup	count=1
function	the sharded ||| sharded	count=1
arg	input_sequences ||| input_sequences num_unroll	count=1
class	subclasses ||| session	count=1
module	sequence of ||| keras python keras preprocessing	count=1
arg	values is ||| values	count=1
module	latest ||| testing python framework	count=2
function	the condition based on ||| condition	count=1
module	and runs a ||| learn	count=1
arg	[arg_1] graph ||| [arg_1] [arg_2]	count=1
function	[function_1] of features ||| [function_2] [function_1]	count=14
module	values then ||| ops	count=1
module	which gets ||| distributions python ops bijectors	count=1
function	generate a sentinel event ||| sentinel event	count=1
function	their ||| by	count=1
module	that can be used ||| contrib layers python layers	count=1
arg	pending inputs are ||| pending	count=1
module	indexies ||| learn python learn	count=1
arg	a textlinereader ||| skip_header_lines name	count=1
class	for a single ||| event transformer	count=1
module	list of [module_2] ||| [module_2] [module_1]	count=1
function_arg	error between [arg_2] ||| [arg_2] [function_1]	count=12
function	respect to sparse ||| sparse recall at	count=1
function_arg	audio [arg_2] ||| [arg_2] [function_1]	count=1
module	an iterable of string ||| tensorboard plugins text	count=1
arg	return indexies of categories ||| x unused_y	count=1
module	classification ||| python learn utils	count=1
function	meta [function_1] [function_2] to ||| [function_2] [function_1]	count=1
arg	in logdir ||| logdir	count=1
function	on the value ||| value	count=1
class	directory ||| dump dir	count=2
class	create ||| round robin strategy	count=2
function	tensor version ||| maybe	count=1
class	feature ||| feature column	count=2
function	[function_1] test data ||| [function_2] [function_1]	count=3
module_class	[module_1] stack ||| [module_1] [class_2]	count=3
arg	permute a ||| labeled_tensor axis_order	count=1
class	the base class ||| base	count=1
function	an entire tree ||| tree	count=1
module	[module_1] length of ||| [module_1] [module_2]	count=3
function	of the debug-wrapper session ||| session init	count=1
function_arg	[function_1] in base_dir ||| [function_1] events [arg_2]	count=1
class	update it with ||| assign op test	count=1
function	step true positives ||| sparse true positive	count=1
module	used ||| layers python layers	count=2
function	subgraph [function_2] ||| [function_2] [function_1]	count=2
function	the brightness ||| brightness	count=1
function	proto ||| proto	count=4
function	probably [function_2] ||| [function_1] [function_2]	count=2
arg	annotation of ||| tst out list_tensors_enabled node_info_node_name	count=1
function	captured input tensors by ||| extra inputs	count=1
module	g ||| python framework	count=2
function	evaluates the ||| evaluate	count=1
arg	given slicing ||| slicing initializer	count=1
function	colocate with ||| maybe colocate with	count=4
arg	and sgv1 (see reroute_inputs) ||| sgv1	count=1
class	tests ||| summary writer cache test	count=1
module	specific axes of ||| labeled_tensor python ops	count=1
module	verifies ||| python estimator	count=1
module	nested tuple of integer[s] ||| ops	count=1
function_arg	root name [arg_2] ||| [arg_2] [function_1]	count=1
module	a keras variable ||| keras python keras	count=1
class	the wrapper should work ||| wrapper	count=1
function	learning ||| learning	count=3
function	initializer ||| initializer	count=6
function	of histogram values ||| histograms	count=1
function	thread ||| thread	count=1
module_class	and [class_2] ||| [module_1] [class_2]	count=4
function	adjust ||| adjust	count=2
arg	filewriter for the specified ||| logdir	count=1
arg	by name ||| name	count=2
function_arg	[function_1] returns it ||| [arg_2] [function_1]	count=2
function_arg	while loop [arg_2] ||| [arg_2] [function_1]	count=1
class	outcome (vs 0) ||| bernoulli	count=1
module	which the ||| python	count=1
module	mapping of name to ||| python ops	count=1
function	in train phase and ||| in train phase	count=1
module	image s by ||| image	count=1
module	sequence ||| keras python keras	count=1
function	input ||| inputs	count=6
arg	print [arg_2] ||| [arg_2] [arg_1]	count=1
module	sample ||| contrib bayesflow python ops	count=1
function	[function_1] input options ||| [function_2] [function_1]	count=2
arg	boundaries and interval values ||| boundaries values	count=1
function	sparse ||| sdca optimizer sparse	count=1
function	list of featurecolumns ||| to feature columns	count=1
function	whether it is enabled ||| plugins listing	count=1
function	show array [function_2] ||| [function_1] [function_2]	count=4
function	a debug ||| debug	count=1
function	compute the number of ||| size	count=3
arg	multiple of n ||| n	count=2
function	partial runs ||| partial run setup	count=1
module	relative to tensorflow/ ||| platform	count=1
function	shape for input ||| in out shape	count=1
function	static shapes ||| matrix static	count=1
function	the output shape ||| output shape	count=2
function	current position in ||| tell	count=1
arg	input and [arg_2] ||| [arg_2] [arg_1]	count=3
function	resnet-152 model ||| 152	count=1
arg	variables from multiple devices ||| per_device restore_sequentially reshape	count=1
function	[function_1] higher dimension ||| [function_1] with [function_2]	count=2
function	[function_1] normalization ||| [function_2] [function_1]	count=5
arg	many exports ||| export_dir_base	count=1
arg	processes a [arg_2] ||| [arg_2] [arg_1]	count=4
class	the input [class_2] ||| [class_2] [class_1]	count=3
function	the real ||| real	count=1
function	for a rank rfft ||| for rfft	count=1
function	capture the ||| capture	count=1
arg	tensor to ||| tensor	count=2
module	returns a tensor ||| keras python keras	count=3
function	any external control dependency ||| external control edges	count=1
function	from caller and hooks ||| merge caller and hook	count=1
function	[function_1] softmax training ||| [function_2] [function_1]	count=3
class	initializes ||| categorical processor	count=1
module_class	in specific indices [module_1] [class_2] ||| [module_1] tensor [class_2] scatter indices value name	count=2
module	not a function ||| distributions	count=1
function	returns the ||| get collection proto	count=1
function	column is [function_2] ||| [function_1] [function_2]	count=1
class	stack ||| stack	count=1
function	list of all variables ||| list variables	count=1
arg	tensor_list [arg_2] ||| [arg_2] [arg_1]	count=2
arg	pads the 2nd ||| x padding	count=1
function	created properly with its ||| initialization	count=1
function	name -> _guideref ||| build guide index	count=1
module	the rank of ||| metrics python ops	count=1
function	kernel mappers provided have ||| kernel mapper	count=1
arg	returns an ||| seed	count=1
module	compilation of operators ||| contrib compiler	count=2
function	[function_1] to a ||| [function_1] [function_2]	count=12
function	to read queue batch ||| read batch	count=2
function_arg	[function_1] an rnncell ||| [arg_2] [function_1]	count=4
function	based on a ||| on	count=1
function	variables ||| variables	count=21
function	[function_1] initializer and ||| [function_1] [function_2]	count=2
function	exits ||| exits	count=1
arg	make block_shape divide ||| block_shape base_paddings name	count=1
function	[function] interface ||| is [function]	count=1
arg	[arg_1] while maintaining ||| [arg_1] [arg_2]	count=1
function	product between tensors ||| product	count=1
module	'graph and session and ||| python learn dataframe	count=1
arg	and from_proto functions ||| proto_type to_proto from_proto	count=1
arg	by v ||| v	count=1
function	the insertion [function_2] ||| [function_1] [function_2]	count=4
arg	tensors x ||| x	count=3
function	into a placeholder tensor ||| placeholder	count=1
function_arg	conjugate gradient [arg_2] ||| [arg_2] [function_1]	count=1
function	load runs from a ||| add runs from	count=1
function	max pool ops in ||| max pool	count=1
function	graph for ||| graph	count=2
class	a table outputs ||| mutable hash table	count=1
function	configuration for ||| config	count=1
module	outcome (vs 0) ||| python	count=1
function	a field to ||| get field to	count=1
arg	applies transformations to ||| mode	count=4
function	[function_1] start event ||| [function_1] [function_2]	count=3
function	conv2d produce ||| fwd conv2d	count=1
class	converts a condcontext ||| cond context	count=1
function	labels ||| node status label	count=1
function	builds a graph ||| graph	count=1
function	statistics ||| stats	count=1
arg	value into index index ||| index value name	count=1
function	abstract method [function] ||| [function]	count=4
function	[function_1] unary operation ||| [function_1] [function_2]	count=1
module	of init arg ||| ops	count=2
function	[function_1] enqueue ||| [function_1] [function_2]	count=3
module	[module_1] the model ||| [module_1] [module_2]	count=1
function	creates a head ||| head	count=2
function	the value ||| value	count=7
class	[class] canonical format ||| [class]	count=1
arg	[arg_1] stddev ||| [arg_2] [arg_1]	count=4
function	while loop ||| loop	count=1
class	debug tensor ||| debug test	count=1
class	make sure we ||| test upgrade files	count=1
function	bprop step ||| bprop step	count=2
module	we can do ||| layers	count=1
function	end then flatten ||| flat end	count=2
function	at the ||| once	count=2
arg	estimator to [arg_2] ||| [arg_2] [arg_1]	count=1
function	a sequence of integers ||| texts to	count=1
function	create ||| create profiler	count=1
function	method to extend ||| extend	count=1
module	names of ||| ops	count=1
function	[function_1] and create ||| [function_2] [function_1]	count=6
function	used in ||| info	count=1
module	helper to __init__ which ||| distributions	count=1
function	lecun ||| lecun	count=1
function	thin [function] ||| [function]	count=2
module	or output [module] ||| [module]	count=1
function	[function_1] strategies with ||| [function_1] [function_2]	count=2
function	get [function_2] ||| [function_2] [function_1]	count=11
function_arg	[function_1] [arg_2] depends on ||| [function_1] dependency [arg_2]	count=4
module	are sessionrunhook ||| estimator	count=1
function	to read queue ||| read	count=2
function_arg	[function_1] a state-saving ||| [function_1] rnn [arg_2]	count=4
module	a batch [module_2] ||| [module_1] [module_2]	count=2
function	sparse column with ||| sparse int column	count=1
function	calls model function ||| call model fn	count=3
arg	value tensor ||| static_shapes	count=1
function	sequence of ||| to	count=1
function	items in ||| items	count=2
function	values ||| maybe assert valid sample	count=1
function	all are ||| hooks type	count=1
function	root directory containing ||| root dir	count=1
function	linked to ops ||| filter ts from	count=1
function	field [function_2] ||| [function_2] [function_1]	count=5
function	creates the ||| create	count=1
function_arg	[function_1] op ||| [function_1] gradient [arg_2]	count=1
function	the predictions with respect ||| precision at top	count=1
function	determines [function] length ||| conv [function]	count=1
arg	satisfies a given ||| static_condition dynamic_condition	count=1
function	sum ||| streaming sum	count=1
class	handler with the name ||| handler	count=1
function	feed dictionary used when ||| init feed dict	count=1
arg	highwaywrapper for ||| couple_carry_transform_gates carry_bias_init	count=1
arg	term to ||| weights epsilon	count=1
module	for the given ||| feature_column	count=1
function	output predictions ||| predict	count=2
module	previous output ||| grid_rnn python	count=1
arg	sgv0 and ||| sgv0	count=1
class	load() ||| directory watcher	count=2
arg	mode is ||| mode	count=1
module	rnn cell composed sequentially ||| contrib rnn python	count=1
module	ops that match ||| contrib	count=1
function	addresses ||| sanitized arg spec	count=1
function	meta [function] def ||| and add meta [function]	count=1
function	return the raw handle ||| get raw handle	count=1
arg	it is executed during ||| run_context	count=2
arg	the "passthrough" tensors ||| inside_ops passthrough_ts	count=1
function	subset ||| select	count=1
function	[function_1] of bytes ||| [function_2] [function_1]	count=1
arg	pads each sequence to ||| padding	count=1
module	or a batch of ||| python ops	count=1
arg	a dnnlinearcombinedestimator instance ||| head model_dir linear_feature_columns linear_optimizer	count=1
arg	batch_size and ||| batch_size	count=1
class	eventaccumulator ||| mocking event accumulator	count=2
function_arg	a sum [arg_2] ||| [function_1] [arg_2]	count=4
function_arg	[function_1] object itself ||| [function_1] to file [arg_2]	count=1
arg	xs [arg_2] ||| [arg_2] [arg_1]	count=1
arg	y holds ||| y data summarize	count=8
function	sum ||| reduce sum	count=3
arg	column ||| column	count=2
function	[function_1] type ||| [function_1] [function_2]	count=3
class	element ||| node stepper	count=1
module	to a ||| training python training	count=1
function	parse the ||| parse	count=2
function	parameters and flops for ||| logged ops	count=1
function_arg	[function_1] [arg_2] ||| [function_1] dim_indices [arg_2]	count=4
function	of all variables ||| variables	count=1
function	callback ||| callback	count=1
arg	[arg_1] exponential distribution ||| [arg_2] [arg_1]	count=4
function	predefined [function_2] ||| [function_1] [function_2]	count=2
function	[function_1] or indexedslices ||| [function_2] [function_1]	count=4
function_arg	[function_1] [arg_2] ||| [function_1] ys [arg_2]	count=3
arg	condition x ||| x	count=4
arg	op ||| op out_grads	count=1
function	register ||| register	count=6
arg	all ||| ops	count=1
arg	[arg_1] scale ||| [arg_1] [arg_2] validate_args	count=3
function	launch the interactive ||| launch cli	count=1
arg	maps activations from the ||| activations	count=3
class	[class_1] session ||| [class_2] [class_1]	count=8
function	all the files ||| find files	count=1
class	options ||| options	count=1
function	of sparse_column_with_keys ||| sparse column keys	count=1
arg	with mean [arg_2] ||| [arg_2] [arg_1]	count=4
function	centered or not ||| disable centered	count=1
function	[function_1] metric ops ||| [function_2] [function_1]	count=4
function_arg	[function_1] [arg_2] ||| [function_1] model_dir [arg_2]	count=1
arg	the weights ||| weights	count=7
module	[module] that ||| [module]	count=1
function	be turned into a ||| be	count=1
function	add a ||| maybe add	count=1
arg	given features ||| input_fn predict_keys hooks	count=1
function	numpy arrays into the ||| numpy	count=1
function	initialize a ||| init	count=1
class	which the file ||| file	count=1
function	[function_1] data to ||| [function_2] [function_1]	count=2
arg	row and ||| rows	count=1
function	data [function_2] ||| [function_2] [function_1]	count=3
module	from a batch of ||| ops	count=1
function	cumulative product of the ||| cumprod	count=1
arg	with projected input ||| with_c	count=1
module_class	[module_1] op ||| [module_1] [class_2]	count=6
class	fill ||| draw bounding box op test	count=1
function	results [function_2] ||| [function_2] [function_1]	count=4
module	+ ||| python ops	count=1
module	models that use the ||| python	count=1
module	computes output tensors ||| contrib keras python keras engine	count=1
function	path [function_2] ||| [function_2] [function_1]	count=8
class	gradient descent [class_2] ||| [class_1] [class_2]	count=2
function	an input_fn ||| input fn	count=1
arg	regularizer to ||| regularizer	count=1
function	sprite [function_2] ||| [function_1] [function_2]	count=2
module	same as 'values' ||| metrics	count=1
arg	from x ||| x	count=1
function	name -> ||| index	count=1
function	op to use ||| string to hash bucket fn	count=1
function	a fully [function_2] ||| [function_2] [function_1]	count=4
function	a new seed from ||| gen new	count=1
arg	losses ||| losses num_present	count=1
class	normalization ||| norm	count=1
arg	sparsetensorsmap ||| container shared_name	count=1
module	have a ||| tools compatibility	count=1
arg	worker and ps jobs ||| num_workers num_param_servers port name_prefix	count=1
function	tf session to ||| session	count=1
module	run the cell ||| rnn python	count=1
function	multivariate digamma function ||| multi digamma	count=1
module	dict of tensors ||| python ops	count=1
function	all the tensors ||| filter	count=1
function	[function_1] [function_2] shape ||| [function_1] [function_2]	count=2
function	a menuitem from ||| caption to item	count=1
arg	that were given that ||| given_name	count=1
arg	creates batches ||| batch_size	count=1
arg	shape and filled with ||| shape	count=1
function_arg	execute the [arg_2] ||| [arg_2] [function_1]	count=3
function	[function_1] valued ||| [function_1] [function_2]	count=16
function	root name for ||| root name	count=2
module	[module_1] the location ||| [module_2] [module_1]	count=1
function	_get_sparse_tensors() [function_2] ||| [function_1] [function_2]	count=1
module	dataframe with only the ||| contrib learn python learn dataframe	count=1
function	a tensor that ||| tensor	count=1
function	a weighted [function_2] ||| [function_1] [function_2]	count=6
function	the value type ||| value	count=1
module_class	partitioned [class_2] ||| [module_1] [class_2]	count=2
function	[function_1] randomly ||| [function_2] [function_1]	count=1
module	return ||| learn preprocessing	count=2
class	node names of ||| node	count=1
function_arg	average [arg_2] ||| [arg_2] [function_1]	count=2
function	weights for loss ||| loss	count=1
function	list of source ||| list source	count=2
function	a fully connected layer ||| legacy fully connected	count=1
function	of latest ||| latest	count=1
function	creates an experiment ||| run experiment	count=2
arg	doing sharded ||| cls factor indices values	count=1
function	device function to ||| device	count=1
function	2d convolution with ||| conv2d	count=1
module	constructor of ||| cli	count=1
function	file ||| get file	count=1
function_arg	stop the [arg_2] ||| [function_1] [arg_2]	count=3
function	atrous convolution ||| test atrous	count=3
function	latest saved [function_2] ||| [function_2] [function_1]	count=2
arg	featurecolumns ||| columns_to_tensors feature_columns num_outputs	count=1
function	model with attention ||| attention seq2seq	count=1
module	training and ||| learn	count=1
function	dims corresponding to ||| dims	count=1
function	the sparsetensordensematmul ||| mat mul	count=1
function	verifying the ||| adjust	count=1
class	in which the file ||| file	count=1
function	before each ||| before	count=1
function	[function_1] the data ||| [function_2] files [function_1]	count=1
class	construct multivariate normal ||| multivariate normal	count=2
module	the ||| linalg python	count=2
module	returns a training ||| layers python layers	count=1
function	to a sequence of ||| embed sequence	count=1
function	for node-status labels ||| label	count=1
class	stack for tests ||| server test	count=1
module	prepended ||| linalg python	count=1
arg	for a graph element ||| element_name	count=1
function	a shape ||| shape with rank at	count=1
function	field to ||| field to	count=1
arg	maps activations from the ||| activations labels	count=3
function	conjugate gradient ||| conjugate gradient	count=1
function	to a list ||| list	count=1
function	the default [function_2] ||| [function_1] [function_2]	count=6
arg	from ||| expected_tensor tensor	count=1
module	then return tensor ||| ops distributions	count=1
module	'values' ||| metrics	count=1
function	sparse ||| sparse input	count=1
class	recordinput op ||| record input	count=1
function	dictionary and return ||| transform	count=1
function	[function_1] spec for ||| [function_2] [function_1]	count=3
function	[function_1] versions ||| [function_2] [function_1]	count=2
module_class	[module_1] array ||| [module_1] [class_2]	count=3
function	specified line in the ||| at line	count=1
arg	list of sequences ||| sequences mode	count=1
function	subgraph ||| view	count=1
function	to use ||| get string to hash	count=1
class	the internal saver ||| saver	count=1
arg	the given path ||| request path	count=1
function_arg	split a [arg_2] ||| [arg_2] [function_1]	count=1
function	the init [function_2] ||| [function_2] [function_1]	count=3
arg	type ||| dtype	count=1
function	input with shape=[2] ||| two input values	count=9
function	[function_1] embeddings of ||| [function_2] [function_1]	count=2
arg	of the variables ||| variables	count=1
arg	input best path ||| inputs sequence_length merge_repeated	count=1
arg	steps and returns ||| noutput scope name	count=1
module_class	[module_1] a queue ||| [module_1] [class_2]	count=16
module	returns ||| contrib keras python keras engine	count=1
module	all files in ||| tensorboard backend event_processing	count=1
function	object's docstring and ||| docstring	count=1
module	cell output dimension ||| contrib rnn python ops	count=1
function	valued features ||| valued linear features	count=2
module	given directory ||| contrib learn python learn	count=1
module	used by [module_2] ||| [module_2] [module_1]	count=2
function	without the regularization ||| unregularized	count=1
class	a quantized distribution representing ||| quantized	count=1
function_arg	graph from restore_checkpoint_path ||| infer restore_checkpoint_path	count=1
function_arg	create [arg_2] ||| [arg_2] [function_1]	count=12
function	of unique ||| unique	count=1
class	rich ||| rich	count=1
function	the last snapshot ||| value	count=1
function	to train a ||| train	count=1
function	variable ||| local variable	count=1
function	with static shapes ||| vector to matrix static	count=1
function	the jacobian is ||| jacobian	count=1
module	list of tensor or ||| layers python ops	count=1
function_arg	[function_1] given job ||| [function_1] [arg_2]	count=6
function	path contains session bundle ||| session bundle dir	count=1
module_class	new adadelta ||| python training adadelta	count=1
module	labeled tensors ||| labeled_tensor	count=3
arg	regex match in ||| regex font_attr	count=1
class	create ops to ||| saver builder	count=1
function_arg	[function_1] of v ||| [arg_2] [function_1]	count=2
class	whilecontext ||| while context	count=4
function	legacy init [function_2] ||| [function_1] [function_2]	count=2
arg	options ||| feed_dict options	count=1
module	ctc ||| keras python keras	count=1
function	the previous node ||| collect previous	count=1
class	of this ||| base wrapper	count=1
class	check sparsemax-loss proposition ||| sparsemax loss test	count=1
module	indexies ||| contrib learn python learn	count=1
class	token ||| registry	count=1
function	block ||| block	count=4
function	number ||| set size	count=1
function	all are sessionrunhook raises ||| type	count=1
function	sparse and ||| sparse	count=2
function	yields ||| list	count=1
class	tensorarray as [class_2] ||| [class_2] [class_1]	count=2
module	dataframe ||| learn dataframe	count=4
module	string ||| python layers	count=1
function	[function_1] session session ||| [function_1] [function_2]	count=2
function	sparsetensors for ||| sparse	count=1
function	[function_1] sparse features ||| [function_2] [function_1]	count=2
function	[function_1] prediction ||| [function_1] [function_2]	count=7
arg	col_seq ||| col_seq overlapping	count=2
arg	op was ||| op func	count=1
class	lstm ||| lstmcell	count=3
function	a merge op ||| merge	count=1
module	training ||| learn python learn estimators	count=1
function	monkey-patching to capture ||| test capture	count=1
function	the string_to_hash_bucket op to ||| string to hash	count=1
function	image to a sequence ||| sequence	count=1
function	from variabledef as ||| from proto	count=1
function	for an exit op ||| exit grad	count=1
arg	keys and [arg_2] ||| [arg_2] [arg_1]	count=2
function	flops for ops from ||| logged ops	count=1
function	[function_1] main menu ||| [function_2] [function_1]	count=1
module	of linear ||| ops	count=1
function	tfdbg [function_2] ||| [function_1] [function_2]	count=1
module_class	[module_1] staging area ||| [module_1] [class_2]	count=11
function	[function_1] last ||| [function_1] [function_2]	count=1
function	_guideref ||| guide	count=1
function	the string message ||| get purge message	count=1
module	raises typeerror ||| estimator	count=1
module	sessionrunhook raises typeerror otherwise ||| python	count=1
arg	[arg_1] batches ||| [arg_2] points [arg_1]	count=1
function	placeholder tensor ||| t with placeholder	count=1
function	all are sessionrunhook ||| type	count=1
module	it to placeholders ||| contrib learn python learn learn_io	count=1
function	[function_1] dynamic shapes ||| [function_2] [function_1]	count=4
module	tensor of ||| python ops	count=2
arg	pred ||| pred	count=5
function	shape ||| shape with rank at	count=1
function	tensor to [function_2] ||| [function_1] [function_2]	count=3
module	specified by ||| slim data	count=1
arg	on featurecolumns ||| feature_columns num_outputs weight_collections	count=1
module	map ||| keras python keras	count=1
function	update the ||| update	count=2
class	tensor ||| sparse	count=1
class	this cluster ||| cluster spec	count=1
arg	x [arg_1] [arg_2] ||| x [arg_1] [arg_2]	count=6
function	softmax training loss ||| softmax loss	count=3
function_arg	[function_1] given table ||| [function_1] [arg_2]	count=1
module	output tensors for ||| contrib keras python keras engine	count=1
function	wait for a ||| wait for	count=1
function	classification using matrix data ||| classification training loss	count=1
function	construct the ||| construct	count=1
arg	if operators determined to ||| operators	count=1
function	rank rfft ||| length for rfft	count=1
function	has no [function_2] ||| [function_2] [function_1]	count=1
function	type int32 ||| int32	count=1
module	of ||| python learn	count=1
function	digamma ||| lgamma	count=1
function	[function_1] [function_2] ||| [function_1] to [function_2]	count=13
function	model_fn for linear ||| linear model fn	count=3
function	flops for ops ||| logged	count=1
arg	and values tensors ||| values	count=1
module	in [module] current ||| [module]	count=1
class	which ||| indexed	count=1
function_arg	[function_1] validates ||| [arg_2] [function_1]	count=2
function	[function_1] average pooling ||| [function_2] [function_1]	count=1
function	variable with ||| variable	count=4
function	[function_1] run() call ||| [function_2] [function_1]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] name [arg_2]	count=6
arg	extracts ||| input_ begin end	count=1
class	to make sure ||| upgrade files	count=1
class	with output projection ||| output projection wrapper	count=2
function	or creates the eval ||| or create eval	count=1
class	[class_1] hook ||| [class_2] [class_1]	count=1
function	feed params ||| feed params	count=2
arg	to standardize op ||| name values	count=3
function	integer [function_2] ||| [function_2] [function_1]	count=5
function	from a dictionary for ||| from	count=1
function	parameters and flops for ||| logged	count=1
class	the input ||| input	count=1
class	make ||| upgrade	count=1
function	embedding lr multipliers ||| extract embedding lr multipliers	count=1
arg	where path ||| path	count=1
function	broadcasted dynamic [function_2] ||| [function_1] [function_2]	count=1
function	at a [function_2] ||| [function_1] [function_2]	count=1
function	tensorarrayscatter ||| tensor array scatter	count=1
function	placeholder ||| placeholder from	count=2
function	outputs in [function_2] ||| [function_1] [function_2]	count=1
module	batch of ||| python ops	count=5
function	optimize ||| optimize	count=1
function	sigmoid ||| sigmoid	count=3
module	tensor for ||| python	count=1
class	the ||| lazy	count=1
function	context ||| attr context	count=1
function	minimize the life time ||| enter	count=1
function	filter items ||| filter items	count=3
function	bias ||| bias	count=12
module	vector [module_2] ||| [module_1] [module_2]	count=3
arg	of shape ||| shape	count=2
module_class	[module_1] the table ||| [module_1] [class_2]	count=2
arg	the model is ready ||| max_wait_secs	count=1
function	corresponding to row ||| row	count=1
function	batch of samples ||| on batch	count=1
function	entire tree ||| tree	count=1
function	sets the values ||| batch set value	count=1
arg	see ||| y input_fn	count=2
function	run() ||| run	count=8
class	constructor ||| output	count=1
module	a 1 outcome (vs ||| python	count=1
function_arg	pads a [arg_2] ||| [arg_2] [function_1]	count=1
function	per step false ||| sparse false	count=1
class	to its outputs ||| highway	count=1
function	[function_1] filter ||| [function_1] [function_2]	count=3
function	recipients [function_2] ||| [function_1] [function_2]	count=4
module	a tensor with ||| keras python keras	count=1
function	sets ||| set	count=21
function	[function_1] file ||| contrib layers [function_1] [function_2] column_name vocabulary_file num_oov_buckets vocab_size	count=1
arg	maps activations from the ||| activations labels sequence_length target_column	count=3
function	dict symbol name -> ||| build guide	count=1
arg	outer_coord stops ||| outer_coord	count=1
class	tensor as ||| tensor	count=1
function_arg	[function_1] record ||| [arg_2] [function_1]	count=1
function	dependencies ||| parents	count=1
arg	of value ||| value	count=1
function	it ||| to	count=1
module	from a ||| contrib learn python learn estimators	count=1
function	cached tensor ||| outgoing cache	count=1
function	sparse tensor ||| sparse value	count=2
arg	debug-dumped tensor ||| node_name output_slot debug_op	count=1
class	[class_1] function corresponding ||| [class_2] [class_1]	count=4
module	g ||| python	count=1
function	the mean and variance ||| moments	count=2
module	distributed ||| contrib specs python	count=1
arg	for optimizer ||| learning_rate optimizer	count=1
arg	a lower triangular matrix ||| diag tril	count=1
function	non-negative int32 ||| assert non negative int32	count=1
arg	richtextlines ||| tst	count=1
arg	of a convolution ||| padding stride	count=1
function	an experiment ||| run experiment	count=2
function	captured variables by the ||| get extra vars	count=1
module	and values ||| feature_column	count=2
function	dynamic ||| vector to matrix dynamic	count=1
module	generate ||| dist_test scripts	count=1
module	this cell ||| contrib rnn python	count=1
class	proper shape ||| dirichlet multinomial	count=1
function	[function_1] shapes ||| [function_2] [function_1]	count=1
function	connected output tensors ||| connected outputs	count=2
function	the last dimension ||| last dimension	count=2
function	connect the previously ||| connect ops	count=1
function_arg	create [arg_2] ||| [function_1] weights [arg_2]	count=1
module	ops ||| distributions python ops	count=1
function	[function_1] is sparsetensor ||| [function_2] [function_1] x	count=1
module	a sequence-to-sequence ||| contrib legacy_seq2seq python	count=1
function	state ||| cell	count=2
function	fine [function] ||| test integer tensor [function]	count=1
function	returns an op ||| op	count=1
module	values ||| framework	count=1
arg	ids in sampled_candidates ||| sampled_candidates num_true	count=1
function	boots 3 [function_2] ||| [function_1] [function_2]	count=4
arg	via a riemann sum ||| predictions weights num_thresholds	count=1
function	reverse a tensor along ||| reverse	count=1
module	a ||| python debug	count=1
arg	sequence to sequence model ||| encoder_inputs decoder_inputs encoder_cell decoder_cell	count=1
module	sequence ||| contrib layers python layers	count=1
function	file names from ||| file names	count=1
class	function to test ||| subscribe test	count=1
class	return tensor ||| dirichlet multinomial	count=1
function	training operation of ||| train	count=1
class	the accumulator ||| conditional accumulator	count=2
function	rate ||| rate	count=1
arg	precision@k [arg_2] ||| [arg_2] [arg_1]	count=3
class	the debug tensor ||| debug test base	count=1
module	or none ||| python	count=1
function	proper shape values then ||| maybe assert	count=1
arg	condition cond is ||| cond	count=1
module	ensure that graph ||| contrib tensor_forest	count=1
module_class	[module_1] total number ||| [module_1] [class_2]	count=2
function_arg	file and [arg_2] ||| [function_1] [arg_2]	count=4
arg	tensors into a single ||| tensors	count=1
function	[function_1] export in ||| [function_1] [function_2]	count=2
module	and runs ||| contrib learn python learn dataframe	count=1
function	state names for ||| state names	count=2
class	[class_1] flow ||| [class_2] [class_1]	count=2
function	main page ||| main page	count=1
function	the variables in ||| convert variables to	count=1
class	for ||| node	count=1
function	element ||| element	count=1
function	ops for ||| ops	count=1
module	computes output tensors for ||| python keras engine	count=1
module	[module] call_cpp_shape_fn ||| [module]	count=2
function	returns weights ||| get weights	count=2
module_class	[module_1] a tensor ||| [module_1] [class_2]	count=12
module	returns a list of ||| python ops	count=4
class	to the debug-wrapper session ||| base debug wrapper session	count=1
function	clips tensor values ||| clip by	count=3
function	a tf ||| make	count=2
module	associated with [module_2] ||| [module_2] [module_1]	count=1
function	proper ||| assert valid sample	count=1
function	a slice ||| slice	count=2
arg	model ||| export_dir	count=1
module	[module_1] sequence-to-sequence model ||| [module_1] [module_2]	count=4
function	[function_1] tf sparsetensor ||| [function_2] [function_1]	count=2
arg	the inputs of sgv1 ||| sgv1	count=1
arg	a checkpoint in checkpoint_dir ||| checkpoint_dir	count=1
function	reservoirs with ||| uses seed	count=1
function	description of [function_2] ||| [function_2] short [function_1]	count=2
module	loss using tf nn ||| contrib losses python losses	count=1
function	state ||| flow state	count=1
module	logistic ||| contrib learn python learn utils	count=1
function	the page ||| build module page	count=1
function	concatenation has no ||| hashed output v2 has no	count=1
function	backprop loop ||| back prop loop	count=2
class	its outer context recursively ||| cond context	count=1
function	total size ||| size	count=1
arg	+ ||| x	count=1
function	tf placeholder for ||| make placeholder from	count=2
function	unique ||| unique fetches	count=1
function	[function_1] vocabulary file ||| [function_2] [function_1]	count=1
module	lists of unique items ||| ops	count=1
module	of factors weights ||| factorization python ops	count=1
arg	from tensors ||| tensors capacity num_threads	count=1
module	together ||| batching python ops	count=2
function	write a sequence of ||| write histogram series	count=1
function	representation of this handle ||| resource handle	count=1
module	required ||| python ops	count=1
module	prepended to all ||| linalg	count=1
function	operation from a ||| op from	count=2
function	column of a ||| column	count=1
module	number of dimensions ||| python ops	count=3
function	[function] tensor has ||| test inconsistent [function] shape raises	count=3
arg	[arg_1] to filename ||| [arg_2] [arg_1]	count=4
arg	or fn_else() based ||| fn_then fn_else	count=1
arg	prior ||| prior scale s	count=1
function	the delay between checkpoints ||| save model secs	count=1
function_arg	[function_1] satisfies the ||| [function_1] contract [arg_2]	count=4
function	a tf ||| server	count=1
module	a function of x ||| python ops distributions	count=1
class	helper function to create ||| walsmodel	count=1
module	transforms each text ||| keras python	count=1
function	from the files ||| guide index	count=1
module	from [module] to rgb ||| [module]	count=1
function	a flow [function_2] ||| [function_2] [function_1]	count=7
function	wait for ||| wait for	count=1
arg	expected_shape ||| expected_shape	count=1
arg	an rnncell ||| cell	count=1
arg	values ||| values name	count=2
class	state for ||| control flow state	count=1
function_arg	[function_1] itself ||| [function_1] to file [arg_2]	count=1
function	tensor ||| labels tensor	count=1
module	the sense ||| linalg python	count=5
function	images ||| images	count=1
class	for 1x1 kernel the ||| extract image patches	count=1
arg	sigmoid_cross_entropy_with_logits ||| logits multi_class_labels weights label_smoothing	count=1
module	an imagenet ||| contrib keras python keras applications	count=1
function	processes ||| process	count=1
class	constructor for ||| predict	count=1
module	a given number ||| contrib learn python learn	count=1
function	sparsedensecwisediv ||| sparse dense cwise div grad	count=2
function_arg	decodes [arg_2] ||| [function_1] example [arg_2]	count=1
function	max amazingly ||| max	count=1
function_arg	graph and [arg_2] ||| [arg_2] [function_1]	count=1
arg	evaluates the model over ||| y sample_weight	count=1
function_arg	operation that [arg_2] ||| [arg_2] [function_1]	count=1
function	flip dims to ||| flip	count=2
function	the first operation from ||| first op from	count=1
class	the event file ||| writer	count=2
function	handle visiting [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] border of ||| [function_1] [function_2]	count=1
arg	thumbnails and returns ||| thumbnails	count=1
function	column is [function_2] ||| [function_2] sparse [function_1]	count=1
function	fingerprint concatenation has no ||| v2 has no	count=1
module	dictionary and return ||| python learn	count=1
class	for debug tensor ||| base debug	count=1
function	values then ||| maybe assert	count=1
function	compile ||| maybe compile	count=2
module	session and runs ||| learn python learn dataframe	count=1
function	for a sparse tensor ||| sparse	count=1
arg	the parameters for ||| num_units use_peepholes initializer num_proj	count=1
function_arg	a matmul [arg_2] ||| [arg_2] [function_1]	count=2
module	list of tensor or ||| ops	count=1
function	sparse integer [function_2] ||| [function_1] [function_2]	count=2
module	filled ||| estimator inputs queues	count=1
module	mapping of name ||| python ops	count=1
function	flops for ||| logged ops	count=1
module	of the ||| contrib bayesflow python ops	count=1
function	[function_1] for ||| [function_1] [function_2]	count=12
function	convert it into ||| text array to	count=1
arg	value to a ||| value dtype name	count=1
class	session ||| session	count=14
arg	numeric ||| column_name	count=1
module	foldr ||| python ops	count=1
module	tensor of a relaxedcategorical ||| contrib distributions python ops	count=1
function_arg	weights [arg_2] ||| [arg_2] [function_1]	count=1
module	each text ||| keras preprocessing	count=1
function	[function_1] [function_2] ||| [function_2] finite gradient [function_1]	count=2
function	[function_1] values ||| [function_1] [function_2]	count=1
function	shape ||| maybe assert	count=1
module	[module] set correctly ||| [module]	count=1
function_arg	dense tensor and ||| dense tensor	count=1
function	[function_1] tensor ||| [function_2] to [function_1]	count=2
function	of a deconv ||| get deconv	count=1
function_arg	[function_1] given features ||| [function_1] [arg_2]	count=2
arg	and body ||| body	count=1
arg	checkpoint in checkpoint_dir and ||| checkpoint_dir master scaffold eval_ops	count=1
function	train a ||| train	count=1
function	[function_1] static ||| [function_2] [function_1]	count=8
module	function for a ||| framework	count=1
function_arg	tensor to [arg_2] ||| [function_1] watch [arg_2]	count=1
module	return indexies ||| python	count=1
function	creates a [function_1] [function_2] configuration ||| contrib layers python layers [function_1] [function_2] column_name vocabulary_file num_oov_buckets vocab_size	count=1
function	a watch_fn ||| with watch	count=1
function	computes various recall ||| streaming recall at thresholds	count=1
function	a constant ||| constant	count=1
function	get a menuitem from ||| caption to item	count=1
arg	of more than one ||| tensors	count=1
function	for ||| sample	count=1
module	getsource ||| python util	count=1
module	returns the [module_2] ||| [module_1] [module_2]	count=2
arg	[arg_1] index ||| [arg_2] [arg_1]	count=5
class	if the stack is ||| stack	count=1
function	large ||| large	count=1
class	these parameters or ||| variable store	count=1
function	loss calculation [function_2] ||| [function_2] [function_1]	count=10
function	invalid [function_2] ||| [function_2] [function_1]	count=3
arg	according to ||| is_control	count=1
function	checks [function_2] ||| [function_1] [function_2]	count=4
function_arg	processor [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] philox ||| [function_2] [function_1]	count=1
function	[function_1] [function_2] ||| [function_2] short [function_1]	count=6
module	sum ||| layers python layers	count=1
module	a mapping of name ||| python ops	count=1
function	caching of control output ||| test caching	count=1
function	[function_1] walsfactorization estimator ||| [function_2] [function_1]	count=3
function	has integer [function_2] ||| [function_2] [function_1]	count=1
class	tensor in the tensorarray ||| tensor array	count=1
function	sorted transitive closure of ||| sorted nodes	count=1
arg	a lower triangular matrix ||| identity_multiplier diag tril	count=1
function	record ||| record	count=2
arg	to the given slicing ||| slicing initializer	count=1
arg	[arg_1] checkpointstate ||| [arg_1] [arg_2]	count=2
module	the given ||| python feature_column	count=1
function	tokens ||| tokens	count=1
function	that the graph ||| graph	count=1
function	average pool [function_2] ||| [function_1] [function_2]	count=5
arg	a given sensitivity ||| labels sensitivity weights	count=1
class	for a single ||| summary to event transformer	count=1
function	sort a list of ||| sort	count=1
function	_reroute) ||| ios	count=1
class	sample ||| sample	count=1
function	leaf impurity of a ||| impurity	count=1
function	tf placeholder for the ||| make placeholder from dtype and shape	count=1
function	an event [function_2] ||| [function_2] [function_1]	count=1
function	initial value ||| initial value	count=2
module	loss ||| contrib losses python losses	count=4
module	a dict of tensors ||| python ops	count=1
function	deregister a list of ||| deregister	count=1
arg	[arg] if they ||| [arg]	count=1
class	multi-layer cell ||| multi rnncell	count=1
function	validates ||| validate	count=1
arg	performs an approximate ||| weights overall_rate scope	count=1
function	dict ||| guide	count=1
function	tensor or [function_2] ||| [function_1] [function_2]	count=2
module	learn the vocabulary ||| python	count=1
function	other ||| and other	count=1
module	or list of tensors ||| rnn python ops	count=1
function_arg	[function_1] record to ||| [arg_2] [function_1]	count=1
function	paths from a ||| paths	count=1
function	of custom objects ||| get custom objects	count=2
arg	layer ||| inputs	count=2
function	preceding [function] ||| fuse [function]	count=3
function	to an example proto ||| example proto	count=1
function	a reshape ||| reshape	count=1
module	of losses ||| losses	count=1
function	indices represented as a ||| indices	count=2
class	[class_1] the debug ||| [class_2] tensor [class_1]	count=1
function_arg	gradient for [arg_2] ||| [function_1] op [arg_2]	count=1
function	add a [function_2] ||| [function_1] [function_2]	count=7
function	fill ||| fill missing graph	count=1
function	average size ||| average size	count=2
function	to define [function_2] ||| [function_2] [function_1]	count=2
arg	checkpointstate ||| latest_filename	count=1
module	graph building doesn't modify ||| tensor_forest hybrid python models	count=1
module	shape values then return ||| ops distributions	count=1
function	proto_type ||| proto type	count=1
arg	a certain predicate ||| predicate first_n	count=1
module	we don't have a ||| tools compatibility	count=1
module	inception ||| python slim nets	count=2
function	input shape ||| get input shape	count=2
function	values from ||| from	count=1
arg	[arg_1] added input ||| [arg_1] [arg_2]	count=2
class	[class] is ||| [class]	count=2
function	a header for use ||| header	count=2
arg	different thresholds on predictions ||| predictions labels thresholds	count=2
function	in ||| total	count=1
class	failed ||| op error	count=2
module	integers from 0 to ||| python training	count=1
module	of the op ||| framework	count=1
module	dataframe into two ||| dataframe	count=1
module	given ||| feature_column	count=1
function	command from [function_2] ||| [function_1] line [function_2]	count=1
arg	for recall@k and ||| k class_id	count=1
arg	precision@k of predictions ||| predictions_idx	count=2
function	per step false positives ||| sparse false positive at	count=1
function	node's statistics ||| stats for	count=1
function	step true positives ||| streaming sparse true positive at	count=1
function	python object [function_2] ||| tools docs parser config [function_2] name [function_1] full_name	count=1
function_arg	assert [arg_2] ||| [arg_2] [function_1]	count=5
function	neighbor ||| neighbor grad	count=2
arg	to sgv1 (see reroute_inputs) ||| sgv1	count=1
function	sequence ||| sequence	count=11
function_arg	hook to [arg_2] ||| [function_1] [arg_2]	count=3
function	the weight ||| weight	count=6
module	lists of unique ||| python ops	count=1
function	computes the precision ||| precision	count=1
function	the first dimension of ||| first dimension	count=1
function	name -> _guideref ||| guide index	count=1
module	[module_1] the model ||| [module_2] [module_1]	count=1
function	int32 [function_2] ||| [function_2] [function_1]	count=2
arg	seeks [arg_2] ||| [arg_2] [arg_1]	count=2
arg	a state saving sequence ||| cell features labels mode	count=1
function	[function_1] sparse tensor ||| [function_2] [function_1]	count=7
class	the debug tensor dumping ||| session debug test base	count=1
function_arg	infer hints [arg_2] ||| [function_1] allowing override [arg_2]	count=6
class	the common config ||| parser config	count=1
class	file to disk ||| summary	count=1
module	'values' ||| contrib metrics python	count=1
arg	that tensors are ||| tensors	count=1
module	each text ||| keras python	count=1
function	the original ||| original	count=3
arg	to structure [arg_2] ||| [arg_2] [arg_1]	count=2
function	an attribute (e g ||| attribute	count=1
function	for one [function_2] ||| [function_1] [function_2]	count=1
arg	interface for transposed ||| inputs filters kernel_size strides	count=1
function	handle visiting [function_2] ||| [function_2] [function_1]	count=1
class	sure we don't ||| test upgrade	count=1
function	exports the given ||| export	count=1
class	decoder can decode ||| data decoder	count=1
function	defined ||| defined	count=2
function	_get_sparse_tensors() ||| get sparse tensors one	count=1
function	types used in ||| types	count=1
module	batch of ||| python ops distributions	count=5
class	its ||| container	count=1
function	export ||| maybe export	count=1
function	captured variables by the ||| extra vars	count=1
function	generates predictions ||| predict	count=2
module	data ||| python learn learn_io	count=3
module	dtype ||| python framework	count=2
function	that asserts ||| assert	count=1
function	the string_to_hash_bucket op to ||| get string to hash	count=1
function	of batch dimensions ||| batch	count=2
function	using a wrapper ||| wrapper	count=1
module	retrieves ||| contrib keras python keras engine	count=3
arg	given [arg] is ||| [arg] tf_type message	count=1
module	build the mnist ||| contrib factorization examples	count=2
function	gradients ||| gradients	count=6
class	creates ||| logger thread	count=1
arg	node invoking a registered ||| op_type_name	count=1
function	log absolute value ||| log abs	count=4
function	a name ||| name	count=1
function	a richtextlines object ||| rich text lines from	count=1
function	a sequence of embeddings ||| sequence	count=1
module	ops that creates variables ||| python ops	count=1
arg	for this handle ||| handle	count=1
function	an argument ||| compatible matrix	count=2
function	latest saved checkpoint file ||| latest checkpoint	count=1
module	rnn cell composed sequentially ||| rnn python	count=1
function	checkpoint from ||| create checkpoint from	count=2
module	a list of ||| contrib framework python ops	count=1
arg	x given mean ||| x mean	count=2
module	of tensor or ||| python ops	count=1
function	a few handmade examples ||| handmade	count=1
function	from a ||| from map	count=1
function	log the in ||| log	count=1
function	[function_1] hue ||| [function_2] [function_1]	count=1
function	returns a global default ||| get default	count=1
module	used ||| python training	count=1
function	cross entropy given ||| cross entropy with logits	count=1
function	the outputs in ||| outputs make	count=1
class	multiple output tensors ||| model export utils	count=1
class	construct ||| with hash buckets	count=1
function	minimize ||| minimize	count=1
function	feeding into predict step ||| predict data	count=1
module	that match the ||| contrib graph_editor	count=1
function	the partition graphs ||| dump with graphs	count=1
function	log [function_2] ||| python ops quantized distribution [function_1] [function_2] logcdf	count=2
arg	y [arg_2] ||| [arg_2] [arg_1]	count=8
function	embeddings for ||| embedding	count=1
function	diagonal of ||| diag	count=1
function_arg	[function_1] condition x ||| [function_1] equal [arg_2]	count=1
function	returns feature ||| get feature ops	count=1
class	test ||| fractional max pool test	count=3
function	given sampled_candidates ||| with sampled candidates	count=1
module	graph building doesn't modify ||| contrib tensor_forest hybrid	count=1
function	the rnn to predictions ||| predictions	count=1
module	of a complex ||| ops	count=2
class	satisfied ||| dump dir	count=1
class	to the event file ||| summary to event transformer	count=2
function	lstm cell ||| lstm block cell	count=1
function	the projections of ||| get projections	count=1
function	all the tensors ||| filter ts	count=1
function	end of an ||| epoch end	count=1
function	embedding lr multipliers to ||| embedding lr multipliers	count=1
function	a rank irfft ||| infer fft length for irfft	count=1
class	cli ||| clidebug	count=1
module	which ||| framework	count=1
function	maximum or [function_2] ||| [function_1] [function_2]	count=1
arg	functional interface for ||| inputs filters	count=2
function	initializes current ||| init	count=1
function	[function_1] solve ||| [function_1] [function_2]	count=1
function	[function_1] [function_2] ||| [function_2] function [function_1]	count=1
module	[module_1] sample ||| [module_1] [module_2]	count=1
function	wrap a ||| maybe wrap	count=1
function	navigate to the main ||| main	count=1
arg	in input best ||| inputs sequence_length	count=1
function_arg	to restore [arg_2] ||| [function_1] [arg_2]	count=1
function	nodes that aren't needed ||| training nodes	count=1
function	the string_to_hash_bucket op to ||| to hash bucket fn	count=1
function	add ops to apply ||| apply	count=4
function	first event ||| first event	count=1
function	computes distance between ||| distance graph	count=1
function	for single value ||| single value	count=2
module	tensors specified by ||| slim data	count=1
arg	predictoutput ||| outputs	count=1
arg	conv + ||| x filters	count=1
arg	inputs to access ||| inputs	count=1
function	minimum of ||| min	count=1
function	a new ||| gen new	count=1
module	multiply ||| python training	count=1
arg	fn1() or fn2() ||| fn1 fn2	count=1
function	[function_1] variable initializations ||| [function_2] [function_1]	count=3
function	observations dict for ||| observations map	count=1
arg	make_linear_model ||| builder units sparse_combiner	count=1
function	returns the ||| proto	count=1
arg	a microbenchmark ||| iters	count=1
module	and scores ||| learn python learn	count=1
function	fill tensor ||| fill	count=1
class	returns this shape ||| tensor shape	count=1
function	a new [function_2] ||| [function_1] [function_2]	count=1
class	create ||| strategy	count=1
function	to a richtextlines object ||| lines	count=1
function	[function_1] all ||| [function_2] [function_1]	count=5
module	tensorshape object[s] ||| contrib seq2seq python	count=1
function	step true positives ||| true positive	count=1
module	conv ||| contrib keras python keras applications	count=1
function	tensor watch ||| tensor watch	count=2
function	the integer [function_2] ||| [function_2] [function_1]	count=2
function	assert that ||| assert	count=3
function	dataframe from [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] command ||| [function_1] [function_2]	count=1
arg	pads the ||| x padding	count=1
arg	tf nn softmax_cross_entropy_with_logits ||| onehot_labels weights label_smoothing	count=1
arg	reduces grad along the ||| grad	count=1
function	schedule for the ||| schedule	count=1
arg	and d2 ||| d2	count=1
function	a hook ||| make session run hook	count=1
function_arg	[function_1] tensorforestestimator instance ||| [arg_2] [function_1]	count=1
module	and scores ||| python learn	count=1
function	the gradients ||| gradient	count=1
function	of this ||| resource	count=1
arg	row of input_tensor using ||| input_tensor	count=1
class	convenience function to test ||| test	count=1
module	lists of ||| contrib labeled_tensor python ops	count=1
function	the size ||| size	count=4
function	predict and [function_2] ||| [function_2] [function_1]	count=1
function	return the total ||| total	count=1
arg	on x [arg_2] ||| [arg_2] [arg_1]	count=5
arg	theoretical and numerical jacobian ||| x x_shape dx y	count=1
function	restricted linear prediction ||| joint weighted sum from feature columns	count=1
class	a pooling function ||| pooling	count=1
function	sequence of integers ||| to	count=1
function	gradient [function_2] ||| [function_1] [function_2]	count=1
class	function to test a ||| subscribe test	count=1
function	a specific plugin asset ||| plugin asset	count=1
function	one feature ||| one feature	count=2
function	[function_1] generated boxes ||| [function_1] [function_2]	count=2
module	the location ||| distributions python	count=1
function	a sprite image ||| make sprite image	count=2
function	the tf session ||| session	count=1
function	a new graph ||| graph replace	count=1
module	that wraps ||| contrib learn python learn	count=1
function	the div operator ||| div	count=1
function_arg	[function_1] representation ||| [arg_2] [function_1]	count=3
function	[function_1] lists of ||| [function_2] [function_1]	count=1
arg	add its inputs ||| inputs	count=2
arg	buffer to the ||| global_step	count=1
class	in a real graph ||| graph	count=1
function	[function_1] [function_2] ||| [function_1] [function_2] path	count=1
function	return all the files ||| files	count=1
function	input ||| preprocess input exprs	count=1
module	dataframe with only the ||| learn dataframe	count=1
class	history ||| curses navigation history	count=1
module	transforms ||| keras python	count=1
function	[function_1] distribution ||| [function_1] [function_2]	count=2
module	sequence of integers ||| keras python	count=1
class	use in testing ||| total variation test	count=1
arg	loaded from a ||| graph output_dir checkpoint_path eval_dict	count=1
function	from ||| caption to	count=1
function	on variable-updating ops with ||| test watching variable update ops	count=1
arg	[arg_1] stochastictensor ||| [arg_2] [arg_1]	count=1
function	applies node renames in ||| final node renames	count=1
module	specific format of ||| contrib cudnn_rnn python ops	count=2
module	found in ||| event_processing	count=1
function_arg	sets the [arg_2] ||| [function_1] [arg_2]	count=2
arg	applying layer ||| inputs layer	count=2
arg	linear weights ||| columns_to_tensors embedding_lookup_arguments num_outputs	count=1
module	layer ||| contrib layers python layers	count=1
arg	screen output from ||| output	count=1
function	[function_1] inputs ||| [function_1] [function_2]	count=7
function	rank must be either ||| rank	count=1
function	latest event file ||| latest	count=1
arg	runs session ||| session step	count=1
module	determined at runtime ||| contrib linalg python	count=1
class	[class_1] binary ||| [class_2] logistic [class_1]	count=1
function	filter function for list_profile ||| list profile filter	count=1
function	[function_1] of ||| [function_2] [function_1]	count=8
arg	matrices ||| num_rows num_columns batch_shape dtype	count=1
arg	each value in values ||| values dimension	count=2
arg	of _embeddingcolumn ||| dimension combiner	count=1
function	sentinel event for terminating ||| get sentinel event	count=1
function	creates a dynamic ||| dynamic	count=2
module	object[s] ||| seq2seq	count=1
function	static file located at ||| static file	count=1
arg	recall@k and precision@k ||| labels predictions_idx class_id weights	count=1
module	of beams into a ||| seq2seq python ops	count=1
function	load runs ||| runs	count=1
module	initialize a batch ||| distributions	count=2
function	used as the initial ||| initial	count=1
function	all arguments are set ||| all arguments set	count=3
function	to capture ||| capture	count=1
arg	op was ||| scope op func	count=1
function	shape of batch dimensions ||| batch shape tensor	count=1
function	[function_1] dynamic shapes ||| [function_1] [function_2]	count=4
function	to ||| get string to	count=1
class	get a ||| menu	count=1
module	ensure that graph building ||| contrib tensor_forest hybrid	count=1
function_arg	tf cond [arg_2] ||| [arg_2] [function_1]	count=1
function	wrong ||| bad	count=1
arg	[arg_1] v ||| [arg_2] [arg_1]	count=1
function	the output ||| output	count=10
module	on ||| framework	count=1
module	store as self _value ||| contrib bayesflow python ops	count=1
function_arg	[function_1] [1] see ||| [function_1] [arg_2]	count=3
arg	to split dims ||| cls dims	count=1
arg	tf feature keys ||| keys	count=1
arg	slice tensor shape ||| tensor	count=1
function	[function_1] operation from ||| [function_1] [function_2]	count=3
module	multiply ||| contrib training python training	count=1
class	elements in this ||| base	count=1
class	projection ||| projection wrapper	count=4
function	clips the ||| clip	count=1
module	return a list of ||| ops	count=3
module	return ||| learn python learn preprocessing	count=2
function_arg	compile [arg_2] ||| [function_1] scope op [arg_2]	count=1
function	cosine [function_2] ||| [function_1] [function_2]	count=4
function	tf placeholder for the ||| make placeholder	count=2
module	of tensors that ||| framework python ops	count=1
class	debug op ||| debug	count=1
module	if colocate_clip_ops_with_vars ||| opt	count=1
function	projections ||| get projections	count=1
function	monkey-patching to capture the ||| capture	count=1
arg	for input_node [arg_2] ||| [arg_1] [arg_2]	count=1
arg	fully qualified name should ||| name	count=1
module	with the ||| python ops	count=1
function	valued features and ||| valued features	count=4
function	dict of metrics ||| metrics	count=3
module	5 inputs of ||| python ops	count=1
arg	the boolean predicate pred ||| pred	count=1
function	input ||| preprocess input	count=1
module	sure we don't have ||| tools compatibility	count=1
function	get legend for node-status ||| label legend	count=1
class	mappers provided have ||| linear classifier test	count=1
function	variables ||| convert variables to	count=1
function_arg	[function_1] appearing in ||| [arg_2] [function_1]	count=2
arg	logits ||| labels logits	count=1
class	first ||| event accumulator	count=1
function	a root directory containing ||| root dir with	count=1
class	make sure we ||| test	count=1
function	to loss for multi ||| loss	count=1
function	generates the [function_2] ||| [function_1] [function_2]	count=3
class	gradients of a pooling ||| pooling test	count=1
module	optimizer ||| keras python keras	count=1
class	value tensor ||| stochastic tensor	count=1
function	we use ||| use	count=1
arg	of texts to ||| texts mode	count=1
function	shape ||| sample	count=1
function	broadcasted static [function_2] ||| [function_2] [function_1]	count=1
arg	an object [arg_2] ||| [arg_2] [arg_1]	count=1
module_class	[module_1] file ||| [module_1] [class_2]	count=5
function	[function_1] [function_2] ||| [function_2] [function_1]	count=1913
function	of the image data ||| image data	count=1
function	have non-broadcastable shapes ||| for broadcastable batch shape	count=1
function	load boston ||| load boston	count=2
class	the handler with ||| item handler	count=1
function	concat node with the ||| concat node	count=1
module	tensor of ||| contrib distributions python ops	count=1
function	return index of ||| index	count=1
function	invalid type ||| invalid	count=2
module	with ||| learn	count=2
function	the max ||| max	count=1
class	full names ||| doc generator visitor	count=1
function	conjugate ||| conjugate	count=1
arg	minibatch ||| time sequence_length min_sequence_length max_sequence_length	count=1
module	the tensor ||| python	count=2
function	otherwise ||| check	count=1
arg	the denominator is zero ||| numerator denominator	count=1
function_arg	[function_1] of shape ||| [function_1] [arg_2]	count=8
function_arg	[function_1] test_name ||| [function_1] [arg_2]	count=1
function	of basic metrics for ||| default binary metrics for	count=1
function	tensorarraywrite ||| tensor array write	count=1
arg	filewriter for ||| logdir	count=1
function	a random spatial ||| random	count=2
class	of dnn weights and ||| dnnlinear combined classifier	count=1
function	name -> ||| guide	count=1
function	[function_1] the sparsetensordensematmul ||| [function_1] dense [function_2]	count=1
function	retrieves the input mask ||| get input mask	count=1
arg	factor ||| image max_delta seed	count=1
arg	permute a tensor's ||| labeled_tensor axis_order	count=1
function	[function_1] html ||| [function_2] [function_1]	count=4
function	non-linearly-separable data ||| linearly inseparable binary data	count=1
function	other subclassses [function_2] ||| [function_1] [function_2]	count=1
function	load runs [function_2] ||| [function_2] [function_1]	count=6
class	processor from ||| processor	count=1
arg	[arg_1] old_getter internally ||| [arg_1] [arg_2]	count=1
arg	tensor with ||| tensor dtype name optimize	count=1
function_arg	abstract [function_1] [arg_2] in ||| [function_1] f ins batch_size [arg_2]	count=4
function	first 'n' ||| first n	count=2
arg	threads [arg_2] ||| [arg_2] [arg_1]	count=1
function	apply l1 l2 ||| l1 l2	count=1
function	not compatible [function_2] ||| [function_1] [function_2]	count=1
function	a monitoredsession [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] input tensor ||| [function_2] [function_1]	count=3
function	the state for ||| control flow state	count=1
function	for all inputs ||| inputs tensor info from meta graph	count=1
function	enter ||| enter	count=2
class	in the monitored ||| monitored	count=1
function	time string in the ||| time str	count=1
function	spatial zoom of ||| zoom	count=1
function	and variance ||| moments	count=1
function	collect information necessary specifically ||| collect	count=1
arg	runs a microbenchmark ||| target size iters	count=1
function	the initial value ||| initial value	count=2
arg	to a custom_getter to ||| custom_getter	count=1
function_arg	[function_1] y holds ||| [arg_2] [function_1]	count=4
function	model_fn ||| with model fn	count=1
module	and values ||| python feature_column	count=2
class	the role ||| operator	count=1
module_class	run this [class_2] ||| [module_1] [class_2]	count=2
function	or recurrent dropout ||| dropout	count=1
function	positive definite matrix ||| positive definite matrix	count=3
class	without extra ||| test	count=1
function	false [function_2] ||| [function_1] [function_2]	count=4
arg	each row in labels ||| labels	count=1
module	rank-2 tensor ||| solvers	count=1
class	the sum of ||| dimension	count=1
function	and loss functions ||| check loss and	count=1
class	this operator to ||| linear operator	count=2
arg	input tensors [arg_2] ||| [arg_1] [arg_2]	count=1
function	creates placeholders ||| create placeholders	count=2
function	[function_1] a table ||| [function_1] [function_2]	count=1
class	of this operator ||| operator	count=3
function	to a dimension ||| dimension	count=1
function	scalars ||| scalars	count=1
module	keras tensor ||| keras	count=1
function	kl ||| non batch kl	count=1
arg	file path ||| path options	count=1
arg	labels ||| labels weights	count=6
function	from the ||| build guide	count=1
module	prints ||| backend event_processing	count=1
function	monitoredsession for training ||| monitored training session	count=2
arg	of symbols to ||| ids vocab_size embed_dim	count=1
arg	list of tensors ||| cls tensors	count=1
class	[class_1] provide ||| [class_2] [class_1]	count=10
function	on variable-updating ops with ||| test watching	count=1
function	get a menuitem from ||| to item	count=1
function	of ||| texts to	count=1
function	batch length of predictions ||| batch length	count=1
arg	categoricalprocessor instance ||| min_frequency share vocabularies	count=1
arg	inputs e g images ||| inputs pool_size strides padding	count=2
function	various recall values for ||| streaming recall at thresholds	count=1
arg	on the same shard ||| filename_tensor saveables	count=1
class	test ||| normalization test	count=1
class	that contains the ||| indexed slices	count=1
function	[function_1] cycling ||| [function_2] [function_1]	count=1
class	don't ||| upgrade	count=1
function	the computed [function_2] ||| [function_1] [function_2]	count=1
function	the output values of ||| values for	count=1
module	of any tensor-like ||| python ops	count=1
class	state for the ||| control flow state	count=1
class	that selects row ||| factorization test	count=1
module	create a sequence-to-sequence ||| contrib legacy_seq2seq	count=1
arg	given node ||| node_name	count=1
module	1 ||| python ops distributions	count=2
arg	in values ||| values dimension	count=2
class	tensor into the tensorarray ||| tensor array	count=1
module	be used to ||| layers	count=1
function	with respect to ||| precision at top	count=4
class	registry ||| registry	count=1
module	that with ||| contrib learn python learn	count=1
module	text ||| keras	count=2
function	to the data ||| data	count=1
function	and creates a ||| create	count=1
class	proximal gradient [class_2] ||| [class_1] [class_2]	count=2
class	given ||| tensor	count=1
function_arg	the unary [arg_2] ||| [arg_2] [function_1]	count=1
arg	y elementwise using python ||| y name	count=1
class	the wrapper ||| wrapper session test	count=1
arg	[arg_1] * b ||| [arg_2] [arg_1]	count=4
function	the gradients by the ||| gradient norms	count=1
class	initializes ||| combined estimator	count=1
function_arg	[function_1] by boolean_series ||| [function_1] [arg_2]	count=3
function	returns the proto_type for ||| type	count=1
function_arg	postfix representation [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] small input ||| [function_1] [function_2]	count=1
function	returns true iff the ||| is constant	count=1
class	to make sure we ||| test upgrade files	count=1
function	[function_1] add asserts ||| [function_1] [function_2]	count=8
module	has the ||| python	count=1
function	tensor as input ||| input	count=1
module	the list of the ||| framework python ops	count=1
function	[function_1] sdcaoptimizer ||| [function_2] [function_1]	count=3
function	returns feature ||| get feature	count=1
class	this context ||| while context	count=1
function	sparse column [function_2] ||| [function_1] [function_2]	count=1
function	all the ||| ts	count=1
arg	state saving ||| cell features labels	count=1
function_arg	params used [arg_2] ||| [function_1] [arg_2]	count=1
function	directory containing ||| dir with	count=1
class	[class_1] [class_2] ||| [class_2] [class_1]	count=143
module	x ||| python ops	count=1
module	of rank ||| python ops	count=1
function	the legacy init ||| get legacy init	count=1
class	have ||| test upgrade	count=1
function_arg	assert that [arg_2] ||| [function_1] proper iterable [arg_2]	count=3
arg	as labels ||| labels	count=1
function	be ||| prepare or	count=1
arg	sum reduces grad along ||| grad	count=1
arg	structure ||| apply_fn	count=1
arg	feeds and fetches ||| fetches	count=1
function	weights to ||| save weights	count=1
function	the connected input ||| connected inputs	count=2
function_arg	[function_1] x element-wise ||| [function_1] [arg_2]	count=3
class	of all keys ||| mutable hash	count=1
module	file ||| lib io	count=5
class	this operator ||| linear operator scaled identity	count=1
function	forward ||| forward	count=4
function	flattens inner dimensions ||| inner flatten	count=2
function	caching of ||| caching	count=1
function	the elements of ||| elements	count=1
module	the tensor ||| labeled_tensor python	count=2
arg	many ||| tuples	count=1
function	binary [function_2] ||| [function_2] [function_1]	count=2
arg	for given features ||| input_fn predict_keys	count=1
function	[function_1] dependency ||| [function_2] [function_1]	count=4
function	of given variable ||| set variable	count=1
function	[function_1] actually cross ||| [function_2] [function_1]	count=10
arg	conv + ||| x filters num_row num_col	count=1
function	header for use ||| header	count=2
module_class	[module_1] vdv^t ||| [module_1] operator [class_2]	count=1
module	[module] category to ||| contrib learn [module] learn	count=1
function	computes a header ||| get header	count=1
function_arg	name for [arg_2] ||| [arg_2] [function_1]	count=1
class	[class] sparsely using ||| resource [class]	count=3
class	create ||| queueing state saver	count=1
function	max pool [function_2] ||| [function_1] [function_2]	count=5
arg	labels are seen ||| labels num_classes smoothing_constant	count=2
function	shape ||| maybe	count=1
arg	for selfadjointeigv2 ||| grad_e grad_v	count=1
arg	predictions with respect to ||| predictions weights	count=1
function	centered or ||| disable centered	count=1
function	a batch normalization ||| batch norm	count=2
arg	in dim_indices dimensions ||| dim_indices conf	count=1
function	and ||| and target compatibility	count=1
function_arg	[function_1] for precision@k ||| [arg_2] [function_1]	count=8
class	of 1 ||| bernoulli	count=2
module	operator ||| contrib distributions python ops	count=1
function	generate a link ||| link	count=2
function	conv2d produce the ||| fwd conv2d	count=1
class	for ||| test class	count=1
function	get ||| filter ts	count=1
class	value was dumped ||| datum	count=2
function	[function_1] the dtype ||| [function_2] [function_1]	count=1
arg	the tensor ||| tensor	count=1
class	for an lstm cell ||| forget gate lstmcell	count=1
function	linear-only instantiation ||| linear only	count=1
function	implementation ||| total variation	count=1
arg	of [arg] ||| [arg]	count=1
function	directory [function_2] ||| [function_2] [function_1]	count=1
function	the tfdbg logo ||| get tfdbg logo	count=2
arg	between predictions, labels ||| predictions labels weights	count=1
module	number of ||| ops	count=11
function	of tensors [function_2] ||| [function_1] [function_2]	count=4
function	[function_1] row factors ||| [function_1] [function_2]	count=1
function	that prepares features config ||| spec for parsing	count=1
module	or tensorshape object[s] ||| contrib seq2seq	count=1
module	cross-entropy loss ||| ops losses	count=1
module	that creates training and ||| contrib learn python learn ops	count=1
function_arg	at a [arg_2] ||| [arg_2] [function_1]	count=1
arg	tensor in tensor_list ||| tensor_list num_epochs	count=1
module	s of the ||| python keras engine	count=1
function	or creates ||| or create	count=2
function	a scalar sum ||| sum	count=1
function	a richtextlines ||| rich text lines from	count=1
function_arg	normalization layer ||| norm inputs	count=1
arg	sum the weights ||| weights	count=5
function	pil image instance ||| img	count=1
function	returns key used ||| key	count=1
function_arg	[function_1] input_tensors) from ||| [arg_2] [function_1]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] decoder decoder_inputs [arg_2]	count=9
module	ensure that graph ||| tensor_forest	count=1
arg	by padding and convolving ||| len_tensor	count=1
arg	tensor ||| name target size	count=1
function_arg	[function_1] [arg_2] ||| [function_1] graph run_metadata ui_type [arg_2]	count=3
function	applies batch [function_2] ||| [function_2] [function_1]	count=2
function	matrix data ||| matrix data	count=11
function	number of parameters in ||| total params	count=1
module	return the correct ||| graph_editor	count=1
function	gradient for the ||| add grad grad	count=1
function	sessionrunhook raises typeerror ||| hooks	count=1
arg	run ||| run	count=3
function	a header ||| header from	count=1
function	an mvndiag _sample_n ||| mvndiag sample outputs	count=1
function	in the collections ||| collections	count=1
function	returns the ops to ||| get	count=1
arg	nn softmax_cross_entropy_with_logits ||| onehot_labels weights label_smoothing	count=1
function	time string in ||| readable time str	count=2
arg	a dimension of 1 ||| name dim	count=1
arg	parameters ||| num_units use_peepholes share_time_frequency_weights cell_clip	count=1
function	given variable ||| load variable	count=1
function	node ||| batch norm node	count=1
arg	w conjugate prior ||| prior scale s n	count=1
function	fakequantwithminmaxvars ||| fake quant with min max vars gradient	count=1
module	decodes ||| keras python keras applications	count=1
function	values of dense feature ||| values	count=2
function	gets the name of ||| get name	count=1
arg	two numpy arrays ||| a b	count=1
function	[function_1] tag sequence ||| [function_2] [function_1]	count=2
function	to ||| get string to hash	count=1
module	the end of t0 ||| graph_editor	count=1
class	basic [class_2] ||| [class_1] [class_2]	count=1
function_arg	sequence by ||| to sequence images	count=1
function	collections ||| collections	count=1
function	of the signaturedef ||| tensor info from meta graph def	count=1
module	of the op (e ||| python	count=1
function	simple print function for ||| tf print	count=1
function	by the ||| norms	count=1
class	normal ||| normal diag plus low	count=1
function	column ||| sparse column	count=1
arg	list of tensors into ||| cls tensors	count=1
module	sparse slice of ||| contrib factorization python ops	count=1
function	index of ||| finalize index	count=1
module	a dataframe into two ||| contrib learn python learn dataframe	count=1
function	with shape=[2] ||| two	count=3
arg	x ||| x data summarize message	count=1
function	classification using ||| classification training	count=1
module	add debug ||| debug lib	count=1
function	count ||| count	count=2
arg	non-audio parts ||| sample_rate num_channels length_frames	count=1
class	debug tensor dumping ||| session debug test base	count=1
function_arg	recall values [arg_2] ||| [function_1] at thresholds predictions [arg_2]	count=1
function	[function_1] function for ||| [function_1] [function_2]	count=6
function	or indexedslices ||| or indexed slices	count=2
arg	[arg] from ||| [arg]	count=1
module	has finished ||| data	count=1
function	a new subdirectory within ||| timestamped export	count=2
arg	[arg_1] and h ||| [arg_2] [arg_1]	count=3
function	loss for a ||| loss	count=1
function_arg	with [arg_2] ||| [function_1] [arg_2]	count=6
module	of a 1 outcome ||| ops	count=1
function	table row ||| table row	count=2
class	produced ||| indexed	count=1
module	partitioned ||| python ops	count=1
function	the node's statistics ||| stats for	count=1
function	[function_1] discards ||| [function_1] [function_2]	count=3
module	in which the ||| python	count=1
arg	given value ||| value dtype name preferred_dtype	count=1
arg	variable ||| variable value decay zero_debias	count=1
arg	appearing ||| log_p q alpha z	count=1
function	callback at the end ||| end	count=1
arg	processes a [arg_2] ||| [arg_1] [arg_2]	count=4
class	the ||| dimension	count=1
function	returns prediction ops ||| get predict ops	count=5
function	indexedslices object ||| indexed slices	count=1
function	initializes all tables ||| initialize all tables	count=3
module	columns of the dataframe ||| dataframe	count=1
function	for sequence models from ||| sequence input from	count=1
class	an input_fn that ||| test base	count=1
module_class	evaluating a [class_2] ||| [module_1] [class_2]	count=4
function	parses input arg into ||| exprs arg string	count=1
module_class	[module_1] keys and ||| [module_1] [class_2]	count=7
class	construct student's [class_2] ||| [class_1] [class_2]	count=1
module	add ||| python framework	count=1
function	step true positives for ||| true positive at k	count=1
function	softmax ||| softmax grad	count=2
module	specific indices [module] ||| [module]	count=1
function	tensor objects ||| n to tensor	count=2
class	grad state for the ||| flow state	count=1
function	input_shape ||| batch paddings	count=1
module	to ops ||| contrib	count=1
function	to use based on ||| to hash	count=1
function	be turned into ||| be regex	count=1
arg	^ [arg] = (x ||| x [arg]	count=1
function_arg	finalize and [arg_2] ||| [function_1] [arg_2]	count=1
function	extraction [function_2] ||| [function_2] [function_1]	count=4
function	restore variables from ||| restore ops	count=1
arg	that ||| optimizer	count=1
module	after training ||| contrib learn python learn	count=1
class	dump ||| dump	count=2
module	used to ||| layers python layers	count=2
function	the inner cell used ||| cell	count=1
module	a 1 outcome (vs ||| python ops distributions	count=1
module	x + loc ||| ops	count=1
function	proper shape values then ||| maybe	count=1
function	creates regression signature from ||| regression signature fn	count=1
module	[module] overfeat network ||| contrib slim [module] slim	count=3
function	recursively with control inputs ||| recursive with controls with	count=1
function	vectors [function_2] ||| [function_2] as [function_1]	count=1
class	of integers ||| tokenizer	count=1
class	the dump ||| debug dump	count=2
function	benchmark directly ||| benchmark	count=1
module	of integers ||| keras preprocessing	count=1
function	a training graph ||| training graph	count=2
module	run return ||| backend	count=1
function	search decoding on ||| search decoder	count=2
function	a sentinel [function_2] ||| [function_1] [function_2]	count=4
module	of int ||| python ops	count=1
arg	[arg_1] loc and ||| [arg_2] [arg_1]	count=1
arg	x weights + biases ||| x weights biases name	count=2
arg	given examples [arg_2] ||| [arg_1] [arg_2]	count=4
function	tree ||| tree	count=1
function	urls for ||| urls	count=1
function	shape ||| shape with rank at least	count=1
function_arg	compile the [arg_2] ||| [arg_2] [function_1]	count=2
function	converts embedding lr ||| embedding lr	count=1
function	adjust saturation ||| adjust saturation	count=2
function_arg	[function_1] [arg_2] ||| [function_1] less [arg_2]	count=2
function_arg	applies dropout [arg_2] ||| [function_1] [arg_2]	count=1
class	returns ||| data provider	count=1
arg	given examples and predictions ||| examples unused_features predictions	count=4
function	instantiates an all-zeros ||| zeros like	count=1
function	[function_1] first ||| [function_1] [function_2]	count=1
arg	for a column ||| column args	count=1
function	generate a link for ||| link	count=2
function	sampled softmax [function_2] ||| [function_1] [function_2]	count=1
function	tensor to ||| label tensor	count=1
module	get ||| python layers	count=1
module	of a ||| python	count=1
function_arg	[function_1] session ||| [arg_2] [function_1]	count=1
function	a list ||| from rich line list	count=1
function	[function_1] message ||| [function_2] [function_1]	count=2
function_arg	[function_1] var ||| [function_1] [arg_2]	count=4
function	into [function] ||| [function]	count=1
arg	y holds element-wise ||| y data summarize	count=8
module	foldl ||| python ops	count=1
module	data ||| learn python learn datasets	count=1
arg	a diagonal ||| diag	count=1
function	placeholder for a sparse ||| sparse placeholder	count=1
arg	iterator for smaller ||| shrink	count=1
function	invert the philox ||| invert philox	count=2
function	insures you can save ||| save	count=3
module_class	[module_1] entire ||| [module_1] [class_2]	count=1
module	the vocabulary ||| python	count=1
function_arg	abstract method [function_1] [arg_2] in ||| [function_1] [arg_2]	count=4
function	for one [function_2] ||| [function_2] [function_1]	count=1
arg	[arg_1] newpath ||| [arg_1] [arg_2]	count=3
arg	outputs of sgv0 to ||| sgv0	count=1
function	local init ||| local init op	count=2
arg	images ||| images scope	count=1
arg	token with ||| token	count=1
arg	slice tensor ||| tensor	count=1
function	input layer ||| make input layer	count=2
module	create ||| python ops	count=1
arg	recall@k ||| k	count=1
function	to a richtextlines ||| lines	count=1
function	the default resnet ||| resnet	count=1
function	report ||| report last	count=1
module	axes of ||| ops	count=2
module	conv ||| python keras applications	count=1
function_arg	[function_1] [arg_2] ||| [function_1] gradient [arg_2]	count=1
function_arg	[function_1] solver ||| [function_1] [arg_2]	count=2
arg	and op2 [arg_2] ||| [arg_2] [arg_1]	count=3
function	after calling reload ||| test reload	count=1
function	signatures ||| convert signatures	count=1
function	[function_1] loop ||| [function_2] [function_1]	count=12
function	represents ||| column	count=1
function	verify the values ||| values	count=2
module	core version with ||| contrib learn python learn learn_io	count=1
function	applicable to strings ||| test dtype string	count=1
function_arg	that a [arg_2] ||| [arg_2] [function_1]	count=1
function	the concatenation of the ||| concatenate	count=1
module	constructor of ||| python	count=1
module	produced ||| framework	count=1
function	wrap a call ||| wrap custom	count=1
module	and return indexies ||| learn preprocessing	count=1
function	normalizes types and ||| normalize	count=1
function	line ||| add line	count=1
function_arg	reads the [arg_2] ||| [arg_2] [function_1]	count=3
arg	coordinator ||| coord	count=1
arg	compatiblity of ||| loss_fns output_shapes	count=1
arg	[arg_1] times and ||| [arg_1] [arg_2]	count=1
class	debug tensor dumping ||| debug	count=1
function	approximate auc via ||| auc	count=2
arg	a diagonal matrix ||| identity_multiplier diag event_ndims	count=1
function	_guideref from ||| build	count=1
function_arg	converts [arg_2] ||| [function_1] array [arg_2]	count=1
function	predict method with ||| predict	count=5
function	the names ||| convert names	count=1
arg	boston housing ||| path seed test_split	count=1
class	tensor in the ||| tensor	count=2
function	containing all the ||| with all resources	count=1
function	[function_1] gradients ||| [function_2] [function_1]	count=6
function_arg	a postfix [arg_2] ||| [arg_2] [function_1]	count=2
module	if ||| contrib framework python ops	count=2
function	predictions for [function_2] ||| [function_2] [function_1]	count=11
arg	a new ||| name shape collections	count=1
function	of the max ||| max	count=1
function	kind name ||| kind name	count=1
function	volume contained in ||| resize volumes	count=1
function	l2 regularization ||| big l1regularization	count=1
module	indexies of ||| contrib learn python	count=1
module	the axis_order set ||| labeled_tensor python ops	count=1
function	total variation of ||| total variation	count=1
module	vector of ||| python ops	count=4
function	a sentinel ||| get sentinel	count=1
module	of inverse and forward ||| contrib distributions python ops	count=1
function	[function_1] a node ||| [function_2] without [function_1]	count=2
function	[function_1] barrier ||| [function_2] [function_1]	count=1
arg	make_linear_model ||| builder units weight_collections	count=1
function	to non-negative ||| make static axis non	count=1
function	edges related to the ||| edges of	count=1
function	the summarywriter ||| summary writer	count=1
function	axis ||| as axis	count=1
function	try all possible ||| all	count=1
module	verifies file_io ||| tools gcs_test	count=1
function	check the [function_2] ||| [function_2] [function_1]	count=4
module	ops that match ||| graph_editor	count=1
arg	given inputs [arg_2] ||| [arg_1] [arg_2]	count=1
function	initializes the ||| initialize	count=1
function	an arg_scope ||| add arg	count=1
function	scalar sum ||| sum	count=1
arg	a new type ||| dtype name	count=1
function	the feed dictionary ||| feed dict	count=1
arg	model is ready ||| max_wait_secs	count=1
function	calculate the next target ||| calculate next	count=1
module_class	[module_1] sequence ||| [class_2] [module_1]	count=2
function	placeholder for ||| placeholder	count=3
class	test ||| mul add test	count=1
function	linked to ||| ts from	count=1
function	to an example proto ||| row to example proto	count=1
arg	trains a ||| checkpoint_dir num_steps	count=2
class	tensor into the ||| tensor	count=1
module_class	the initializer ||| python ops initializer	count=1
arg	size of a ||| size	count=1
arg	a dictionary of sequences ||| sequences	count=1
module	the output interval ||| python	count=1
function	after a restart ||| after restart for file version less than2	count=1
function	of ||| fit transform	count=2
function_arg	[function_1] [arg_2] ||| [function_1] labels predictions_idx [arg_2]	count=32
module	of an ||| contrib bayesflow python ops	count=1
function_arg	false positives [arg_2] ||| [function_1] [arg_2]	count=2
arg	exports ||| export_dir_base	count=2
function	[0 n_classes) [function_2] ||| [function_1] [function_2]	count=6
module	be used to ||| python layers	count=1
class	resample x weights and ||| resample	count=1
function	of ||| of op	count=1
function	other columns present ||| and other columns	count=2
arg	tensors ||| tensors capacity num_threads	count=1
function	[function_1] dependency ||| [function_1] [function_2]	count=4
class	for the statistics ||| op stats	count=1
module	vocabulary ||| python	count=1
function_arg	the global [arg_2] ||| [function_1] step [arg_2]	count=1
function	reshaping behavior of realvaluedcolumn ||| real valued column reshaping	count=1
module	single ||| python kernel_tests	count=1
function	a function ||| function	count=1
module	tensorshape representing [module_2] ||| [module_2] [module_1]	count=1
function	for the given ||| get	count=1
arg	constructor of onrunstartresponse ||| action debug_urls debug_ops node_name_regex_whitelist	count=1
class	outer context ||| context	count=1
function	loop [function_2] ||| [function_2] [function_1]	count=7
function	[function_1] real ||| [function_2] [function_1]	count=4
function	replaces a matmul ||| mat mul	count=1
function	strings into int64 indices ||| string to index	count=1
function	all events in ||| all events	count=2
function	make_linear_model() [function_2] ||| [function_2] [function_1]	count=3
function_arg	approximate auc [arg_2] ||| [arg_2] [function_1]	count=2
function	initializes current variables ||| init	count=1
function	variance ||| variance	count=1
arg	builder based on featurecolumns ||| feature_columns	count=1
class	event file to disk ||| summary	count=1
arg	some expectations are met ||| x expect_static expect_ndims expect_ndims_no_more_than	count=1
arg	on inputs [arg_2] ||| [arg_2] [arg_1]	count=6
function	returns the variables and ||| and slice inputs	count=1
class	event file to ||| writer	count=1
function	[function_1] number ||| [function_2] [function_1]	count=6
arg	an operator that generates ||| name	count=1
function	the eval [function_2] ||| [function_1] [function_2]	count=2
class	with ||| for testing	count=1
function	switch op is calculated ||| switch grad	count=1
function_arg	[function_1] output ||| conv2dtest [function_1] values [arg_2] filter_in_sizes stride padding	count=1
arg	in parent [arg_2] ||| [arg_1] [arg_2]	count=2
arg	a labeled tensor ||| labeled_tensor	count=2
module	dimensions of zero or ||| contrib linalg python ops	count=1
module	of any tensor-like ||| ops	count=1
arg	of top-k ||| top_k_predictions	count=1
function_arg	[function_1] services and ||| [arg_2] [function_1]	count=1
function	the default signature from ||| default signature	count=1
function	for overriding gradient ||| gradient override	count=2
module	to make ||| compatibility	count=1
arg	maps activations from ||| activations sequence_length target_column	count=1
function	return a tensor ||| parse data tensor	count=1
module	vocabulary dictionary ||| preprocessing	count=1
class	that ||| test	count=3
function	[function_1] bias ||| [function_2] [function_1]	count=13
class	drawing ||| binomial	count=2
function	a placeholder [function_2] ||| [function_1] feed [function_2]	count=4
function	of sigmoid ||| sigmoid	count=1
arg	would feed dict ||| y batch_size num_epochs	count=1
arg	convolution to ||| stride padding	count=1
module	as the last ||| contrib learn python learn estimators	count=3
function	for node-status ||| status	count=1
function	returns the list of ||| get	count=1
function	of featurecolumns [function_2] ||| [function_1] [function_2]	count=4
module	[module] indexedslices ||| [module]	count=1
function_arg	latest event [arg_2] ||| [arg_2] [function_1]	count=1
function	stores trace information ||| trace info	count=1
function	a menuitem from ||| to	count=1
module	to instantiate this ||| python ops	count=1
module	add ||| layers python layers	count=1
function	[function_1] its namesake ||| [function_1] [function_2]	count=3
module	used by ||| layers	count=1
function_arg	[function_1] print ||| [arg_2] [function_1]	count=1
function	overriding ||| remove override then	count=1
class	a table outputs the ||| hash table	count=2
module	this ||| python client	count=3
function	values of the ||| values for	count=1
function	vector with static shapes ||| vector static	count=1
module	non-reference ||| framework	count=1
function	collection with ||| get collection ref	count=1
arg	v [arg_2] ||| [arg_2] [arg_1]	count=2
arg	elements ||| dtype name	count=2
arg	for recall@k and precision@k ||| predictions_idx class_id weights	count=1
function	lists the ||| list	count=1
arg	with best effort ||| adjoint adjoint_arg name	count=1
function	step false positives for ||| false positive at	count=1
function	[function_1] creates the ||| [function_1] [function_2]	count=2
function	local [function_2] ||| [function_1] [function_2]	count=2
module	of dimensions needed to ||| ops	count=1
arg	prior on the mean ||| prior	count=1
module	we ||| compatibility	count=1
function	retrieve all ||| all	count=1
function	create [function] ||| get [function]	count=1
class	of given ||| debug dump dir	count=1
arg	a batch of data ||| data	count=2
arg	getter for ||| history_value	count=1
module	vocabulary dictionary and return ||| learn	count=2
function	[function_1] path ||| [function_2] [function_1]	count=9
function	single epoch ||| run one epoch	count=1
module	dictionary and return indexies ||| preprocessing	count=1
function	node with the ||| batch norm node	count=1
arg	sigmoid_cross_entropy_with_logits ||| logits multi_class_labels weights	count=1
function	[function_1] sum ||| [function_1] [function_2]	count=6
arg	[arg_1] tensor of ||| [arg_2] mapping [arg_1]	count=2
class	the truncated ||| truncated	count=1
function_arg	[function_1] files ||| [function_1] [arg_2]	count=2
function	outputs in ||| outputs make	count=1
module	function ||| factorization python ops	count=1
function	single batch of ||| on batch	count=5
arg	graph ||| graph debug_ops	count=1
function	fill the [function_2] ||| [function_2] [function_1]	count=3
function	define kernel [function_2] ||| [function_2] [function_1]	count=4
arg	applies transformations to labels ||| mode labels	count=3
function	match ||| filter ts from regex	count=2
arg	pads each sequence ||| padding	count=1
function	returns the step at ||| step	count=1
arg	value tensor ||| static_shapes atol	count=1
function	all possible [function_2] ||| [function_1] [function_2]	count=3
function	get a ||| to item	count=1
module	numpy ||| contrib keras python keras preprocessing	count=1
class	that the decoder ||| decoder	count=1
function	indices [function_2] ||| [function_2] [function_1]	count=4
function	[function_1] node from ||| [function_2] [function_1]	count=2
arg	input and ||| inputs	count=2
arg	a microbenchmark ||| size iters	count=1
module	given an iterable of ||| plugins	count=1
class	init ||| assign op test	count=2
module	mean ||| contrib keras python keras	count=1
function	to have ||| for same	count=1
function	vocabulary [function_2] ||| [function_2] [function_1]	count=1
function	merges preceding [function_1] [function_2] ||| [function_1] [function_2]	count=4
function	a single [function_2] ||| [function_1] [function_2]	count=10
function	run the graph ||| run graph	count=2
function	[function_1] input ||| [function_1] source [function_2]	count=1
function_arg	[function_1] dnnlinearcombinedestimator instance ||| [arg_2] [function_1]	count=1
arg	[arg_1] to labels ||| [arg_2] [arg_1]	count=3
module	dictionary ||| learn python	count=1
class	base class ||| base	count=1
arg	list of lines to ||| lines	count=1
function_arg	waits [arg_2] ||| [function_1] new checkpoint checkpoint_dir [arg_2]	count=2
function	are satisfied [function_2] ||| [function_1] [function_2]	count=1
module	version with ||| contrib learn python learn	count=1
function	_guideref from the ||| build guide	count=1
function	build an [function_2] ||| [function_1] doc [function_2]	count=4
function	[function_1] [function_2] ||| [function_2] batch [function_1]	count=18
function	node def [function_2] ||| [function_1] [function_2] map node_map	count=4
function	an lstm ||| lstm	count=1
module	of integer[s] ||| ops	count=1
module	tensorflow/ ||| python platform	count=1
class	a whilecontext ||| while context	count=2
function	file system race ||| test inplace	count=1
function	importance sampling with a ||| expectation importance	count=1
module	the ||| slim python	count=1
class	tests ||| test	count=3
function	embedding ||| safe embedding	count=1
arg	this name ||| name	count=1
function	adds a fake bias ||| add bias	count=1
function	non-overlapping lanes ||| lanes	count=1
function	graph is ||| graph is	count=2
function	determine ||| classes	count=2
module	debug tensor ||| python debug lib	count=1
arg	input ||| inputs sequence_length beam_width top_paths	count=1
function_arg	min across [arg_2] ||| [function_1] [arg_2]	count=1
function	defines the [function_2] ||| [function_2] [function_1]	count=7
class	construct multivariate normal ||| multivariate normal tri	count=1
function	for the graph ||| graph	count=1
function	the kind name ||| kind name	count=1
function	read the flags ||| tb app	count=1
class	a dnnregressor ||| dnnregressor	count=1
function	for ops ||| for	count=1
class	debug [class] ||| [class]	count=1
arg	files in guide_src_dir ||| guide_src_dir	count=1
module	image s by the ||| contrib image python ops	count=1
function	the border of ||| border	count=1
function	model_fn can return ||| model fn	count=1
module	linked ||| graph_editor	count=1
module	a sequence of integers ||| python keras	count=1
function	[function_1] of fetches ||| [function_2] [function_1]	count=4
function	metagraphdef from ||| meta graph def	count=1
arg	operations to ||| examples	count=2
function	an attribute ||| attribute at index	count=1
arg	tf nn softmax_cross_entropy_with_logits ||| onehot_labels	count=1
function_arg	function to [arg_2] ||| [function_1] bn [arg_2]	count=1
function	output ||| output page down	count=1
function	no emitted edges ||| ops sees updated values	count=1
function	[function_1] input parsing ||| [function_1] [function_2]	count=1
function_arg	dimension of [arg_2] ||| [function_1] [arg_2]	count=2
function	[function_1] variable initialization ||| [function_2] [function_1]	count=2
function	evaluate a model ||| evaluate	count=1
module	object[s] ||| contrib seq2seq python	count=1
function	given tensor ||| get tensor	count=1
class	of the scroll ||| scroll bar	count=1
module	model ||| python learn estimators	count=1
module	input dict ||| python estimator inputs	count=2
function	shape of [function_2] ||| [function_2] [function_1]	count=6
function_arg	on a [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] mahalanobis distance ||| [function_1] [function_2]	count=1
function	creates a tf ||| make server	count=1
function	dropout ||| variational recurrent dropout	count=1
class	this cell output dimension ||| lstmblock fused cell	count=1
function_arg	[function_1] all 1s ||| [arg_2] [function_1]	count=6
function	a _targetcolumn [function_2] ||| [function_2] [function_1]	count=7
module	batch systems of ||| linalg python ops	count=1
class	sample data and provide ||| streaming data feeder	count=1
arg	val to ||| val	count=1
arg	to train ||| train_samples test_samples input_shape num_classes	count=1
module	backward ||| ndlstm python	count=1
function	model variables ||| model variables	count=1
module	convolution ||| slim nets	count=1
class	learn the vocabulary ||| categorical processor	count=1
function_arg	[function_1] [arg_2] ||| [function_1] lengths maxlen dtype [arg_2]	count=9
function	closes an ||| close	count=1
function	returns the directory where ||| get	count=2
module	return indexies of ||| contrib	count=1
module	integers ||| python keras preprocessing	count=2
function	changes the element ||| element	count=1
function	check ||| check	count=14
class	timer ||| second or step timer	count=1
function	containing the column ||| column	count=1
function	offset when ||| offset	count=1
module	the end ||| graph_editor	count=2
function	to sparse ||| sparse	count=7
function	ndtri has finite gradients ||| base ndtri finite gradient	count=1
class	make sure we don't ||| upgrade files	count=1
function	each ||| to sequences	count=1
function	at ||| once	count=2
arg	prior on the mean ||| prior scale s	count=1
function	to the default mapping ||| default	count=2
function	transforms each text ||| texts to	count=1
function	broadcasted ||| broadcast	count=2
function	absolute [function_2] ||| [function_2] [function_1]	count=6
arg	in values ||| values dimension name	count=1
arg	function call node op ||| op out_grads	count=1
module	the desired shape of ||| ops	count=1
function	process a ||| process	count=2
function	launch the ||| launch cli	count=1
function	noise-contrastive estimation training loss ||| nce loss	count=1
module	bidirectional ||| python learn	count=1
arg	functional interface [arg_2] ||| [arg_2] [arg_1]	count=2
function_arg	[function_1] sgv0 to ||| [arg_2] [function_1]	count=2
function	variabledef as needed ||| proto	count=1
function_arg	[function_1] weights ||| [function_1] x [arg_2]	count=2
module	distribution with ||| python ops distributions	count=1
function	their defs from the ||| nodes map	count=1
arg	parameters for an ||| input_size use_peepholes cell_clip	count=1
function	graph with constants ||| to constants	count=1
function	integers ||| sequences	count=1
function	into the graph ||| graph	count=1
module	load ||| python debug lib	count=2
module	equal to another ||| python ops distributions	count=1
function	and weighted ||| weighted	count=1
function	context manager to record ||| record	count=1
module_class	[module_1] [class_2] ||| [module_1] ops [class_2]	count=19
function	[function_1] type of ||| [function_1] [function_2]	count=3
function	[function_1] examples ||| [function_2] [function_1]	count=1
function_arg	[function_1] fakebigqueryserver ||| [function_1] [arg_2]	count=1
function_arg	[function_1] threshold ||| [function_1] values [arg_2]	count=1
function_arg	save the [arg_2] ||| [function_1] [arg_2]	count=1
arg	f ||| f	count=1
class	a tensor ||| builder	count=1
function	sets the current control ||| set control	count=2
function	[function_1] sampled_candidates ||| [function_1] [function_2]	count=2
function_arg	the minimum [arg_2] ||| [function_1] [arg_2]	count=1
function	placeholder ||| placeholder inputs	count=1
class	value should ||| value	count=1
module	generic ||| contrib learn python learn utils	count=1
function_arg	indices in [arg_2] ||| [function_1] [arg_2]	count=1
arg	row and col ||| project_row	count=1
function	variables updated in the ||| updated	count=1
arg	each value in values ||| values dimension sampled_candidates	count=1
class	a table outputs ||| dense hash table	count=1
arg	necessary ||| layer node_index	count=1
arg	to [arg] ||| name [arg]	count=3
module	that graph [module_2] ||| [module_1] [module_2]	count=8
function	returns the kind ||| kind	count=1
function	from a generator ||| generator	count=1
module	for compilation ||| compiler	count=1
function	_get_sparse_tensors() for [function_2] ||| [function_1] [function_2]	count=1
function	wrap a call ||| maybe wrap custom getter	count=1
function_arg	[function_1] base_type to ||| [function_1] function [arg_2]	count=2
module	feature ||| layers python layers	count=1
arg	microbenchmark to ||| target size iters	count=1
function	type of the op ||| type	count=1
module	vocabulary dictionary and ||| preprocessing	count=1
function	[function_1] size ||| [function_1] [function_2]	count=4
module	kernel ||| kernel_methods python	count=1
class	dilation ||| dilation test	count=2
module_class	vector of [class_2] ||| [module_1] [class_2]	count=10
function_arg	less than [arg_2] ||| [arg_2] [function_1]	count=1
arg	looperthread ||| coord timer_interval_secs target args	count=1
module	dataset ||| datasets	count=3
function	ops [function_2] ||| [function_2] [function_1]	count=1
function	confusion matrix ||| confusion matrix	count=1
class	normal ||| normal tri	count=1
function	with sparse features and ||| optimizer sparse features with	count=1
arg	[arg] node ||| [arg]	count=1
function	(1/x) ||| log	count=1
function_arg	rnn sequence [arg_2] ||| [function_1] [arg_2]	count=2
function	a model_fn can ||| model fn	count=1
function	add operations to ||| add	count=1
arg	output from ||| output node_name enable_list_tensors enable_node_info	count=1
arg	a tensor ||| name	count=9
function	without any [function] inputs ||| non recursive no [function]	count=1
function	inputs for sequence models ||| sequence	count=1
arg	ops that ||| ops	count=1
arg	update is_row_sweep_var and ||| processed_row_indices processed_col_indices train_op	count=1
function	to a richtextlines ||| lines from	count=1
class	to the accumulator ||| conditional accumulator	count=1
module	backward ||| contrib ndlstm python	count=1
class	be produced or none ||| indexed	count=1
module	abstract ||| keras python keras engine	count=1
arg	[arg_1] op2 hints ||| [arg_2] [arg_1]	count=3
arg	tensor ||| name	count=16
function	sparse and dense ||| sparse input	count=1
function	as linear_model_fn but returns ||| fn with model fn	count=2
function	symbol}" reference [function] ||| reference [function]	count=3
function	list recipients [function_2] ||| [function_1] [function_2]	count=4
arg	predictions for linear weights ||| column columns_to_tensors embedding_lookup_arguments num_outputs	count=1
function	slot for a ||| slot	count=1
module_class	the initializer as ||| python ops initializer	count=1
function	with partitioned ||| with partitioned	count=8
arg	tensors in tensors ||| tensors	count=1
function	should be allowed using ||| keys should work	count=1
function	can be turned into ||| can be	count=1
module	core version with default ||| learn python learn learn_io	count=1
class	get ||| stepper	count=1
class	proper shape values ||| multinomial	count=1
function	returns the default image ||| image	count=1
module	generator ||| keras engine	count=1
function	> 0 elementwise ||| update positive	count=1
arg	full epoch ||| sess eval_correct images_placeholder labels_placeholder	count=1
function	a sequence ||| sequence	count=3
function	tensors linked to ops ||| filter	count=1
module	output tensors that with ||| learn	count=1
arg	model over ||| x y sample_weight	count=1
arg	functional interface for the ||| inputs filters	count=1
function	for each forward ||| forward	count=1
function	header ||| header from	count=1
function	eval ||| eval	count=1
function	shape ||| maybe assert valid	count=1
module_class	[module_1] output ||| [module_1] [class_2]	count=7
arg	tensorflow subgraph ||| x y init_mean init_stddev	count=1
function	a list of tensor ||| tensor	count=3
function	[function_1] with atrous ||| [function_2] [function_1]	count=2
function	the same shape ||| shape	count=1
arg	value ||| value decay	count=1
function	[function_1] operations from ||| [function_2] metric [function_1]	count=2
function	constructs a tf graph ||| graph	count=1
class	transforms ||| tokenizer	count=1
module	for the ||| python ops	count=5
function	are callable ||| callable	count=1
function	the function ||| function	count=2
module	a ||| training	count=1
function	the ||| filter ops from regex	count=1
function	bias names haven't changed ||| bias names	count=1
function	then ||| valid	count=1
function	[function_1] arguments ||| [function_2] [function_1]	count=10
class	matrix factorization [class_2] ||| [class_2] [class_1]	count=2
function	the directory containing ||| dir	count=1
module	[module_1] menu ||| [module_1] [module_2]	count=2
function_arg	values of [arg_2] ||| [function_1] tensor_in_sizes [arg_2]	count=1
module	the vocabulary dictionary and ||| contrib learn	count=1
arg	to terminate ||| stop_grace_period_secs ignore_live_threads	count=1
function_arg	[function_1] baseestimator instance ||| [function_1] [arg_2]	count=1
arg	x ||| x axis	count=1
module	for labeled tensors ||| contrib labeled_tensor	count=2
function	create an instance ||| create analyzer	count=1
function	proper shape values ||| valid sample	count=1
function	all inputs of the ||| inputs tensor info from	count=1
module	run the cell ||| rnn python ops	count=1
class	a table outputs the ||| dense hash table	count=1
function	signature to object of ||| signature to signature	count=1
class	constructor for ||| predict output	count=1
function_arg	ratio [arg_2] ||| ops elbo [function_1] [arg_2]	count=5
function	the diagonal of ||| diag update	count=1
function	size ||| size bytes	count=1
module	creates a transform that ||| contrib learn python learn dataframe transforms	count=1
class	values will ||| indexed slices	count=1
arg	to apply conv ||| filters num_row	count=1
module	and ||| learn python learn dataframe	count=2
arg	on x given mean ||| x mean	count=1
module	used in this ||| ops	count=1
function	tile [function_2] ||| [function_2] [function_1]	count=2
module	of a device ||| ops	count=1
arg	computes ||| weights	count=9
class	current batch ||| batch	count=1
function	strided [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] lists of ||| [function_1] fetch and [function_2]	count=1
function	capture the output of ||| capture	count=1
arg	[arg_1] and y ||| [arg_1] [arg_2]	count=2
function	all the tensors linked ||| filter	count=1
arg	oldpath ||| oldpath	count=1
function	a time string in ||| time str	count=1
function	matrix with ||| matrix	count=1
class	a ||| builder	count=1
function	string_to_hash_bucket op to use ||| string to hash bucket fn	count=1
module	sequence of ||| contrib keras	count=1
function	[function_1] pool along ||| [function_2] [function_1]	count=4
class	to test a ||| test	count=1
function	and creates [function_2] ||| [function_2] [function_1]	count=1
function	stochastic tensors to ||| stochastic	count=1
class	fifoqueue ||| fifoqueue	count=1
class	the wrapper should ||| wrapper	count=1
function	have invalid type ||| invalid number	count=1
module	sure we ||| compatibility	count=1
function	retrieves the input mask ||| input mask	count=2
arg	whether a path ||| filename	count=1
function_arg	min [arg_2] ||| [function_1] [arg_2]	count=1
function	partition graphs ||| dump with graphs	count=1
function	remove ||| remove	count=4
function_arg	from [arg_2] ||| [function_1] proto [arg_2]	count=5
arg	using ||| logits probs	count=1
module	training and ||| learn estimators	count=1
arg	input_tree ||| input_tree	count=2
function	list of collections used ||| all collection keys	count=1
function	into a placeholder tensor ||| t with placeholder	count=1
function	[function_1] extraction by ||| [function_1] [function_2]	count=2
module	previous output tensors ||| grid_rnn	count=1
class	sure we ||| test upgrade	count=1
function	maximum [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] a solve ||| [function_2] [function_1]	count=1
module	gets ||| learn python learn estimators	count=2
function	[function_1] [function_2] ||| [function_2] fetches [function_1]	count=2
module	shape [module_1] [module_2] ||| [module_2] [module_1]	count=2
function	within the ||| within	count=1
function_arg	[function_1] v ||| [arg_2] [function_1]	count=9
function_arg	and [arg_2] ||| [function_1] [arg_2]	count=5
function	[function_1] a sparse ||| [function_1] lookup [function_2]	count=1
function	shape values then return ||| valid sample	count=1
arg	holds ||| data summarize	count=4
function_arg	[function_1] of x ||| [function_1] [arg_2]	count=1
function	tensor for the given ||| get	count=1
module	generates ||| slim python slim data	count=1
module	a rank-2 tensor ||| solvers python ops	count=1
arg	for this [arg_2] ||| [arg_2] [arg_1]	count=2
function	step false positives for ||| false positive at k	count=1
function	you can save ||| train save	count=1
class	[class_1] cell ||| [class_2] [class_1]	count=2
function	state of ||| state	count=2
function	value type store as ||| value	count=1
function	has ||| output v1 has	count=1
function	[function_1] schedule for ||| [function_1] [function_2]	count=3
function	transforms ||| texts to sequences	count=1
module	synthetic ||| contrib metrics python kernel_tests	count=1
module	a list of ||| python	count=1
function	a subgraph [function_2] ||| [function_1] [function_2]	count=2
arg	trains a simple ||| checkpoint_dir num_steps	count=2
function_arg	recall of [arg_2] ||| [arg_2] [function_1]	count=4
class	[class_1] descent optimizer ||| [class_2] [class_1]	count=2
arg	ids in ||| ids partition_strategy name	count=1
arg	method that builds model ||| features	count=4
function_arg	true if v ||| is resource v	count=1
function	flow start event to ||| flow start	count=1
function	loads all events ||| load all events	count=3
module	vocabulary dictionary ||| contrib	count=1
function	layer based ||| get layer	count=1
class	was opened ||| io	count=1
function_arg	loads [arg_2] ||| [function_1] [arg_2]	count=1
module	on ||| python ops	count=1
function	for a rank irfft ||| length for irfft	count=1
function_arg	edge from [arg_2] ||| [function_1] [arg_2]	count=1
function	all the tensors linked ||| filter ts	count=1
function	and returns trainer ||| get train	count=4
module	of rank 2 ||| python ops	count=1
function	parses ||| parse readable	count=1
arg	the parameters for an ||| use_peepholes	count=1
arg	[arg_1] from_proto functions ||| [arg_1] [arg_2]	count=1
function	the string_to_hash_bucket op to ||| get string to	count=1
module	function of this ||| python framework	count=2
function	to ||| to tensors	count=1
module	vocabulary ||| contrib	count=1
arg	nn softmax_cross_entropy_with_logits ||| logits onehot_labels weights label_smoothing	count=1
module	tensors specified by the ||| python slim data	count=1
arg	to sequence ||| decoder_inputs encoder_cell decoder_cell	count=1
function_arg	for building a referenceresolver [function_1] [arg_2] ||| tools docs reference resolver [function_1] [arg_2] doc_index	count=2
function_arg	[function_1] output ||| [arg_2] [function_1]	count=7
module	gets the list of ||| framework python ops	count=5
module	returns ||| python learn learn_io	count=2
function	pads tensors ||| padding	count=1
module	of factors weights and ||| ops	count=1
class	learn ||| processor	count=1
class	[class_1] tensor in ||| [class_1] [class_2]	count=1
arg	the recall@k ||| k	count=1
function	max pool ||| max pool shapes	count=2
class	tensorarray as ||| array	count=1
arg	scanning an lstm vertically ||| num_filters_out scope	count=1
function	end of a ||| end	count=1
function	make_linear_model() for ||| make linear model	count=1
function	[function_1] of a ||| [function_1] [function_2]	count=1
function	a given condition ||| condition	count=1
class	debug-wrapper [class_2] ||| [class_2] [class_1]	count=1
module_class	new adagrad ||| python training adagrad	count=1
function	creates a dynamic version ||| dynamic	count=1
function	[function_1] with separable ||| [function_2] [function_1]	count=2
function	control ||| control dependencies for	count=1
arg	[arg_1] def ||| [arg_2] [arg_1]	count=1
function	[function_1] precision@k of ||| [function_1] precision [function_2]	count=2
module	a menuitem from ||| python debug cli	count=1
arg	to ops that ||| ops	count=1
module	learn the ||| learn python learn	count=1
class	lstm ||| lstmblock	count=1
function	sparse id ||| sparse	count=1
module	from ||| python learn estimators	count=1
class	a real graph ||| graph	count=1
arg	conjugate prior on the ||| prior	count=1
class	if the synthetic ||| synthetic	count=1
function	the proto_type ||| collection	count=1
function_arg	file path [arg_2] ||| [arg_2] [function_1]	count=1
function	at least ||| rank at least	count=2
module	training ||| contrib learn python learn	count=3
function	output shape ||| output shape	count=2
function	object for ||| to object	count=1
module	ops ||| contrib graph_editor	count=2
module	proper shape values ||| python	count=1
function	proto_type ||| collection proto type	count=1
module	used in this ||| grid_rnn python ops	count=1
arg	[arg_1] and scale ||| [arg_1] [arg_2] validate_args	count=4
module	dict symbol name ||| tools	count=1
function	string_to_hash_bucket op to use ||| string to	count=1
function	next cont() [function_2] ||| [function_2] [function_1]	count=1
module	parameter p ||| distributions	count=1
function	forward public ||| forward	count=1
function_arg	adds a [arg_2] ||| [function_1] notice to docstring [arg_2]	count=1
function	can save ||| train save load	count=1
arg	a * b ||| a b	count=1
function	[function_1] metric ||| [function_1] [function_2]	count=6
arg	from a logdir ||| logdir plugin_name	count=1
function	table ||| make table	count=1
function	given its outputs' ||| sym	count=1
function	a menuitem ||| caption to	count=1
module_class	in this tensor ||| python framework tensor	count=1
function	should trigger [function_2] ||| [function_1] [function_2]	count=2
function	create the ||| maybe create control flow	count=1
class	this wishart distribution ||| wishart operator	count=2
module	the ||| tools docs	count=2
class	of a 1 outcome ||| bernoulli	count=1
function	variable or list ||| variable or list	count=1
class	tensor based ||| stochastic tensor	count=1
function	[function_1] weighted ||| [function_1] dense column [function_2]	count=1
arg	precision@k of ||| predictions_idx	count=2
function	raw handle ||| raw handle	count=1
function	a variable instance ||| variable	count=1
function	are discarded [function_2] ||| [function_1] [function_2]	count=5
function	layer that ||| layer	count=1
function	recipient of the ||| node recipients	count=1
arg	starting from the ||| initial_cell_state initial_output dtype	count=2
arg	a diagonal ||| identity_multiplier diag	count=1
function	[function_1] static ||| [function_1] [function_2]	count=7
function_arg	save [arg_2] ||| [function_1] [arg_2]	count=1
arg	the given [arg] is ||| [arg] tf_type message	count=1
arg	graph to be served ||| graph	count=1
module	in the sense ||| linalg python	count=2
function	shape is ||| is shape	count=1
module	cell and add ||| contrib rnn	count=2
module	returns ||| contrib losses python losses	count=1
arg	conjugate prior ||| prior scale s n	count=1
module	of the model ||| python ops	count=1
module	execute together ||| contrib batching	count=1
class	for node-status labels ||| node stepper	count=1
function	[function_1] [function_2] configuration ||| contrib layers [function_1] [function_2] column_name vocabulary_file num_oov_buckets vocab_size	count=1
arg	perform regex match ||| orig_screen_output regex	count=1
function	by dense matrix ||| tensor dense matmul	count=1
class	the rnn ||| rnn	count=1
function	path and ||| path and	count=2
class	the debug-wrapper ||| base debug wrapper	count=1
function	difference loss ||| difference	count=1
function	variable or list ||| set variable or list	count=1
function	centered ||| centered	count=7
arg	creates a tensor ||| tensor dtype name optimize	count=1
arg	given in input best ||| inputs sequence_length merge_repeated	count=1
arg	op if ||| op	count=2
module	returns a list instead ||| python learn	count=1
function	method ||| method	count=1
function	current control [function_2] ||| [function_1] [function_2]	count=2
function	converts a dense ||| dense to	count=2
arg	[arg_1] based on ||| [arg_2] [arg_1]	count=8
class	tensor in the given ||| tensor flow	count=1
arg	specified dimension to ||| dim	count=1
class	the export ||| export test	count=1
arg	[arg_1] labels tensor ||| [arg_1] [arg_2]	count=8
arg	of an ||| name	count=1
arg	[arg] elbo ||| [arg]	count=1
function	get a root directory ||| get root dir with	count=1
arg	validates the output tensor ||| file_format duration_sec samples_per_second	count=1
arg	a tensor to the ||| name	count=1
arg	prints the names and ||| print_info	count=1
class	prune ||| debug dump dir	count=2
function	a lookup table that ||| table from	count=1
function	static tensorshape ||| get shape	count=1
function_arg	[function_1] representation of ||| [function_1] [arg_2]	count=3
function	op to [function_2] ||| [function_2] [function_1]	count=1
function	vector with given batch ||| vector	count=1
class	the op that ||| op	count=1
arg	find or create ||| var slot_name op_name	count=1
function	returns the [function_2] ||| [function_1] [function_2]	count=26
module	(vs 0) ||| python	count=1
module	its ||| keras python keras engine	count=1
function	[function_1] an event ||| [function_2] [function_1]	count=4
function	all the [function] or output ||| get [function]	count=1
function	a bucketized column ||| bucketized column	count=2
arg	second-order gradients ||| output_sizes window_rows	count=1
function	[function_1] method ||| [function_1] [function_2]	count=1
function	[function_1] [function_2] ||| [function_2] list [function_1]	count=3
arg	tf nn softmax_cross_entropy_with_logits ||| logits onehot_labels	count=1
function	dtypes for each component ||| dtypes	count=2
function	and returns prediction ||| get predict	count=4
module	the cell ||| contrib rnn python ops	count=4
arg	test_name ||| test_name	count=1
function	supported ||| valid for	count=1
function	[function_1] op ||| [function_1] [function_2]	count=10
function	resize ||| resize	count=1
arg	a single ||| sample_weight	count=1
arg	a looperthread that calls ||| timer_interval_secs target args kwargs	count=1
class	the wrapper should ||| wrapper session test	count=1
function	symbol name -> _guideref ||| guide index	count=1
function	dictionary from ||| dict	count=1
module	a dataframe into ||| dataframe	count=1
arg	side_effects for ||| side_effects	count=1
function	and ||| transform	count=1
module	whether ||| keras python keras	count=1
function	address of the ||| address	count=1
function	run the graph and ||| run graph	count=3
function	arbitrary runge-kutta [function] ||| runge kutta [function]	count=3
function	the tensors ||| from regex	count=1
arg	of var ||| var	count=1
function	jacobian is not ||| jacobian	count=1
function_arg	[function_1] condition x ||| [function_1] less [arg_2]	count=1
function	an [function_2] ||| [function_2] [function_1]	count=4
class	multiple ||| utils	count=1
function	[function_1] matrix ||| [function_1] [function_2]	count=14
function	appropriate for serving ||| serving	count=1
function_arg	compatible [arg_2] ||| [function_1] tensors [arg_2]	count=1
function	a random spatial zoom ||| random zoom	count=1
function	valid task ||| task	count=1
class	data and provide ||| streaming data	count=3
function	output file path from ||| output file path	count=1
class	the wrapper ||| debug wrapper	count=1
module	the embedding projector ||| projector	count=1
function	the model [function_2] ||| [function_2] [function_1]	count=1
function_arg	[function_1] display area ||| [function_1] [arg_2]	count=2
function	move dims corresponding ||| move dims	count=1
module	menuitem ||| python debug	count=1
arg	to compute/validate an ||| input_shape default_size min_size data_format	count=1
arg	of many tensor ||| tuples	count=1
module	a labeled tensor ||| labeled_tensor python	count=1
function	a summary of the ||| tf spec summary	count=1
class	the handler with the ||| item handler	count=1
module	__init__ which gets ||| distributions	count=1
function_arg	[function_1] [arg_2] ||| [function_1] left right [arg_2]	count=2
arg	the value of the ||| value	count=1
class	an ||| session	count=1
class	proper shape, dtype ||| pdidentity	count=1
module	tensor with ||| python keras	count=1
arg	the model over ||| x y sample_weight	count=1
module	a rnn cell composed ||| rnn python	count=1
module	learn the vocabulary dictionary ||| contrib learn python learn preprocessing	count=1
function	the dtype ||| dtype	count=6
function	instantiates the inception ||| inception	count=1
function	the manual variable ||| manual variable	count=2
function	of a deconv layer ||| get deconv	count=1
function	returns predictions [function_2] ||| [function_1] [function_2]	count=7
function	this test decorator ||| test decorator	count=2
function	[function_1] of op ||| [function_1] [function_2]	count=1
arg	named ||| column_name column_values	count=1
module	proper ||| python ops distributions	count=2
arg	recall@k of ||| k weights	count=1
function	output ||| output	count=23
function	block ||| resnet v2 block	count=1
module	given number of the ||| python learn	count=1
function	writes graph_def to logdir ||| write graph	count=1
function	for gamma ||| gamma greater one	count=1
function_arg	multipliers to [arg_2] ||| [arg_2] [function_1]	count=1
arg	and m_prev [arg_2] ||| c_prev [arg_1] [arg_2]	count=3
function	shapes for each ||| shapes	count=2
function	batchwise temperature tensor ||| temperature	count=1
function	manager to record ||| record	count=1
class	no rich attributes or ||| rich	count=1
function_arg	input x ||| input x	count=1
module	proto ||| python framework	count=2
function	[function_1] [function_2] ||| [function_2] value [function_1]	count=12
function	to reshape batch matrix ||| matrix	count=1
function	returns the proto_type ||| collection proto	count=1
module	the event file ||| python summary	count=1
module	axes of two ||| labeled_tensor python ops	count=1
function_arg	slice [arg_2] ||| [arg_2] [function_1]	count=1
function	a graph ||| graph	count=6
function	exit the [function_2] ||| [function_1] grad [function_2]	count=1
function	node [function_2] ||| [function_2] [function_1]	count=7
arg	sp_input to sparsetensor and ||| sp_input	count=1
module	op (e g "matmul") ||| framework	count=1
function	features ||| features perfectly separable	count=1
function	have no outputs ||| no outputs	count=2
function	add a [function_2] ||| [function_1] [function_2] dependency	count=1
function	thin [function] faster ||| [function]	count=1
function	enqueue based on vector ||| enqueue	count=1
function	gradients of "loss" for ||| gradients	count=1
function	pool ops ||| pool	count=1
function	of [function_2] ||| [function_2] and [function_1]	count=1
function	the control [function_2] ||| [function_2] [function_1]	count=2
module	write ||| tensorboard scripts	count=3
arg	initialize the parameters for ||| num_units input_size use_peepholes cell_clip	count=1
class	one float ||| graph rewriter	count=1
arg	d1 and d2 ||| d1 d2 name	count=3
class	tests ||| def test	count=1
module	run this ||| rnn python ops	count=1
class	model for a ||| model	count=1
arg	[arg_1] each cluster ||| [arg_1] [arg_2]	count=1
module	3 ||| contrib sparsemax python kernel_tests	count=1
module	parameter ||| distributions python	count=1
function	the rank ||| rank	count=1
function	line in the ||| at line	count=1
function_arg	[function_1] strings ||| [function_1] [arg_2]	count=2
arg	name unique [arg_2] ||| [arg_1] [arg_2]	count=1
function_arg	for converting [arg_2] ||| [function_1] function [arg_2]	count=2
arg	[arg_1] of experiment ||| [arg_2] [arg_1]	count=4
arg	a custom_getter to use ||| custom_getter	count=1
function	the mean relative ||| mean relative	count=3
function	predefined collection [function_2] ||| [function_1] [function_2]	count=1
function	recorded in command ||| from command	count=1
function	define the ||| define	count=1
module	image ||| slim python slim data	count=1
class	generate ||| source helper	count=1
function	duplicate ||| duplicate of	count=1
module	normally distributed floating point ||| specs python	count=1
function	created properly ||| initialization	count=1
class	menuitem from the ||| menu	count=1
arg	loc and [arg_2] ||| [arg_1] [arg_2] validate_args	count=1
arg	summarysaverhook ||| save_steps save_secs output_dir summary_writer	count=1
arg	path and ||| path	count=1
module	and values of ||| ops	count=1
arg	tf variable that comprise ||| name all_vars	count=1
arg	utility function ||| outputs method_name	count=1
function	gamma ||| gamma greater	count=1
function_arg	[function_1] recall@k ||| [arg_2] [function_1]	count=8
arg	[arg_1] of sgv1 ||| [arg_1] [arg_2]	count=1
function	finite gradients ||| finite gradient	count=2
function	probability of ||| prob	count=1
class	tests ||| event multiplexer test	count=1
function	that performs [function] ||| [function]	count=3
arg	0-mean normal distribution ||| grads_and_vars gradient_noise_scale	count=1
arg	[arg_1] and op2 ||| [arg_2] [arg_1]	count=3
class	constructs ||| combined classifier	count=1
function	initializes values [function_2] ||| [function_1] [function_2]	count=1
function	a simple print function ||| tf print	count=1
arg	one or more images ||| images name	count=1
function	overriding gradient ||| gradient override	count=2
module	1 ||| contrib	count=1
function	the linear ||| linear	count=1
module	inner ||| contrib kernel_methods python mappers	count=1
function_arg	sum [arg_2] ||| [function_1] sp_input [arg_2]	count=1
module	when this ||| client	count=1
function	[function_1] of context ||| [function_1] [function_2]	count=1
function	param to ||| assign fetch	count=1
function	assert that the tensor ||| tensor	count=1
function	scaled ||| scaled	count=1
function_arg	contains [arg_2] ||| [function_1] [arg_2]	count=1
arg	state saving sequence queue ||| cell features labels	count=1
arg	basic ||| forget_bias use_peephole	count=1
module	the ||| contrib framework python ops	count=1
function	but with zero ||| stop	count=1
arg	a lower triangular ||| identity_multiplier diag tril event_ndims	count=1
arg	sgv1 (see _reroute_outputs) ||| sgv1	count=1
function	the example provided ||| example	count=1
function	signaturedef ||| def	count=1
module	will ||| python framework	count=2
function	weight variable to ||| weight	count=1
class	graph ||| quantize graph	count=1
function	command from the ||| get command from	count=2
function	a scope ||| scope	count=1
function_arg	a unary [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] list of ||| [function_1] [function_2]	count=4
function	[function_1] extraction ||| [function_2] [function_1]	count=2
function_arg	before [arg_2] ||| [arg_2] [function_1]	count=1
arg	the inputs of sgv1 ||| sgv1 disconnect_first	count=1
function	the barrier ||| prepare barrier	count=1
function_arg	cached tensor [arg_2] ||| [arg_2] [function_1]	count=1
function	output values of ||| setup values for	count=1
class	cell output dimension ||| cell	count=1
module	resample ||| python training	count=1
module	normally distributed floating point ||| contrib specs	count=1
function	[function_1] inside the ||| [function_1] [function_2]	count=1
class	and label ids ||| multi class	count=1
module	return indexies ||| contrib learn	count=1
function	queue batch ||| batch features shared queue	count=1
arg	and out grads ||| out_grads in_grads	count=1
function	of the tfdbg ||| tfdbg	count=1
arg	[arg_1] that satisfies ||| [arg_2] [arg_1]	count=1
function	locate a [function_2] ||| [function_1] [function_2]	count=1
function	have invalid type ||| invalid number of	count=1
module	of tensors ||| ops	count=16
function	a dictionary from ||| dict	count=1
function_arg	[function_1] on x ||| [function_1] [arg_2]	count=3
function	that ||| from regex	count=2
arg	convert [arg_2] ||| [arg_2] [arg_1]	count=6
module	constructor for ||| python estimator	count=1
module	returns true if this ||| python framework	count=1
class	gradient [class_2] ||| [class_1] [class_2]	count=2
arg	hooks if all are ||| hooks	count=1
function	a sprite [function_2] ||| [function_1] [function_2]	count=2
class	a ||| robin strategy	count=2
arg	stddev ||| stddev	count=1
function	sum [function_2] ||| [function_2] column weighted [function_1]	count=2
arg	a new type ||| dtype	count=1
function	a tuple with ||| create tuple	count=1
function	not ||| do not	count=1
module	for given ||| learn	count=1
function	return all the files ||| find files	count=1
function	a time string in ||| readable time str	count=1
function	and stores trace information ||| trace	count=1
module	multivariate ||| distributions python ops	count=3
arg	transformations to [arg_2] ||| [arg_1] [arg_2]	count=7
function	zero ||| stop	count=1
arg	on r^k, for ||| loc atol rtol validate_args	count=1
function	in test phase and ||| in test phase	count=1
function	performs greedy [function_2] ||| [function_2] [function_1]	count=4
function	the inputs to ||| inputs	count=1
arg	dim_indices dimensions ||| dim_indices conf	count=1
module	of dimensions corresponding ||| contrib distributions python ops	count=2
arg	efficiently ||| operator_name addition_tiers	count=1
function	tensors linked to ops ||| ts from regex	count=1
arg	x [arg_1] [arg_2] ||| [arg_1] [arg_2]	count=6
class	loop invariant ||| while context	count=1
module	variable and returns it ||| keras python keras	count=1
function	values for given ||| output values	count=1
module	a list of ||| ops	count=18
function	[function_1] file path ||| [function_1] [function_2]	count=2
arg	factor of rate ||| rate	count=1
function	the main ||| request main	count=1
class	registry in a ||| plugin asset	count=1
function	is created ||| after create	count=1
arg	lb [arg] ||| [arg]	count=1
function	create [function_2] ||| [function_1] [function_2]	count=11
function	and add ||| add op	count=1
arg	w conjugate prior ||| prior	count=1
function	weighted per step true ||| streaming sparse true	count=1
function	dataframe from ||| from	count=1
function	each text ||| texts	count=1
module	to ops ||| ops	count=1
function	performs beam ||| ctc beam	count=1
class	directory ||| dir	count=1
arg	and ||| a name	count=1
class	test ||| test base	count=1
class	which values ||| indexed	count=1
function	unary ||| crf unary score	count=1
function	the string_to_hash_bucket op to ||| get string to hash bucket fn	count=1
function	variables are ||| assert variables	count=1
function	a non-negative [function_2] ||| [function_1] [function_2]	count=2
function	a file against a ||| file	count=1
arg	and add its inputs ||| inputs	count=2
function	output ||| test output	count=1
function	[function_1] variation for ||| [function_2] [function_1]	count=5
function	the dtype ||| state dtype	count=1
module	conjugate ||| contrib solvers python ops	count=1
function	control dependency ||| control edges	count=2
function	exact ||| exact	count=1
function	of the signaturedef ||| graph def	count=1
function	np matrix [function_2] ||| [function_1] to [function_2]	count=2
function	head for multi class ||| multi class head	count=1
module	transforms each ||| keras python keras preprocessing	count=1
module	indexies of ||| python learn	count=1
arg	a x = rhs ||| rhs name	count=1
arg	proto optionally writes ||| graph_def	count=1
module	vocabulary dictionary and return ||| contrib learn python learn preprocessing	count=1
function	placeholder for the ||| placeholder from	count=2
function_arg	[function_1] tensors x ||| [function_1] [arg_2]	count=4
arg	[arg_1] 5d ||| [arg_1] [arg_2]	count=1
class	normal distribution ||| normal linear	count=1
module	then ||| ops	count=1
module	then the ||| python ops	count=1
class	layer ||| layer	count=13
module	the ||| contrib labeled_tensor python	count=2
function	restoring things ||| unset all	count=1
function	get a flattened ||| get fetch	count=1
function	[function_1] examples ||| [function_1] [function_2]	count=1
module	that wraps ||| python learn	count=1
function	types into ||| type	count=1
arg	cops from co ||| op cops	count=1
arg	b for ||| b	count=1
arg	richline objects or strings ||| rich_text_list	count=1
module	learn the vocabulary dictionary ||| contrib learn	count=1
arg	in-plane convolution to ||| stride padding	count=1
function_arg	waits [arg_2] ||| [arg_2] [function_1]	count=2
arg	for storing [arg_2] ||| [arg_1] [arg_2]	count=1
function	benchmark ||| global report benchmark	count=1
arg	dimension ||| dim	count=2
function	get a menuitem ||| caption to item	count=1
function	names haven't ||| names	count=1
class	or tensor in the ||| tensor flow benchmark	count=1
function	the values [function_2] ||| [function_1] [function_2]	count=5
arg	for a debug-dumped tensor ||| node_name output_slot debug_op	count=1
function	[function_1] [function_2] ||| [function_1] with [function_2]	count=16
function	create test input ||| create test input	count=2
module	[module_1] cell ||| [module_1] [module_2]	count=9
arg	instance of cursesui ||| on_ui_exit	count=2
function	directory for tests ||| dir	count=1
function	[function_1] prediction ops ||| [function_1] [function_2]	count=7
class	eventaccumulator ||| mocking	count=1
module	and ||| python learn	count=7
module_class	[module_1] [class_2] ||| [module_1] training next queued [class_2]	count=2
arg	given shape for ||| shape	count=1
module	learn the vocabulary ||| python learn	count=1
function	embedding tensors ||| embedding	count=1
module	of integers ||| python	count=1
arg	maps activations from ||| activations labels sequence_length	count=3
module	ensure that graph building ||| contrib tensor_forest hybrid python	count=1
module	node-status ||| python debug cli	count=2
function	key in a ||| key in	count=1
module	the image ||| keras preprocessing	count=1
function	mean squared ||| streaming mean squared	count=1
function_arg	[function_1] event generator ||| [arg_2] [function_1]	count=3
module	of this ||| ops	count=5
class	the value ||| stochastic value	count=1
class	g "matmul") ||| operation	count=1
function	computes the lstm ||| lstm	count=1
function	0 with ||| zeros	count=1
function	a simple classification model ||| model	count=2
function	to ops that match ||| filter ts from	count=1
arg	parameters for an ||| num_units use_peepholes share_time_frequency_weights	count=1
function	wrap ||| wrap custom getter	count=1
function	rfft ||| for rfft	count=1
module	dictionary and return indexies ||| contrib learn	count=1
function_arg	line [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] an embedding ||| [function_2] [function_1]	count=1
function_arg	[function_1] streamingdatafeeder instance ||| [function_1] [arg_2]	count=1
function	find ||| find	count=4
function_arg	[function_1] metric and ||| [arg_2] [function_1]	count=3
function	[function_1] strategies ||| [function_1] [function_2]	count=2
function	kernels have no effect ||| kernels no	count=1
function	[function_1] variables for ||| [function_2] [function_1]	count=2
function	output values ||| values for	count=1
function	defines the total log-likelihood ||| define loglikelihood operation	count=1
function	[function_1] by ||| [function_2] [function_1]	count=4
module	and indices of the ||| python ops	count=1
function	header for use with ||| header from ops and kernels	count=1
function	all the tensors ||| from	count=1
function_arg	the graph g ||| to graph g	count=1
function	mix of ||| mixed	count=4
class	create ||| looper thread	count=1
module	of string ||| tensorboard plugins text	count=2
function	creates an rnn ||| dynamic rnn	count=1
class	of node [class_2] ||| [class_2] [class_1]	count=1
function	reload ||| reload	count=1
function	compute the trace ||| trace	count=1
class	[class] command ||| command handler [class]	count=2
function	full name ||| full	count=1
function	weighted [function_2] ||| [function_1] [function_2]	count=8
function	op to use based ||| to	count=1
function	file names from ||| get file names	count=2
class	registry in ||| plugin asset	count=1
class	were provided as initialization ||| operator pdbase	count=1
arg	the graph to ||| graph	count=1
module	of [module_2] ||| [module_2] [module_1] batch normalization test tf	count=4
function	stores trace information ||| trace	count=1
module	valid command prefix but ||| python debug cli	count=1
function	[function_1] result ||| [function_1] [function_2]	count=2
function	gradient ||| grad	count=3
function	watch an output ||| output	count=1
class	function into the ||| defined function	count=1
function	sequence count of each ||| sequence count	count=1
module	the tensors linked ||| graph_editor	count=1
module	associated ||| tensorboard backend event_processing	count=2
arg	the caption ||| caption	count=1
class	hparams object to a ||| hparams	count=1
function	the same values ||| fwd values	count=1
arg	tensor in ts ||| index_or_t ts	count=1
class	underlying tf ||| sub	count=1
function	of dense feature extraction ||| bottleneck	count=2
function_arg	[function_1] value ||| [arg_2] [function_1]	count=10
module	updates internal vocabulary based ||| python keras preprocessing	count=1
function	return a tensor ||| parse label tensor	count=1
module	value of the ||| keras	count=1
function	node and ||| op node	count=1
arg	condition and body to ||| body original_loop_vars loop_vars	count=1
arg	frequency-weighted mean and variance ||| axes frequency_weights name	count=1
class	wrapper ||| debug wrapper session	count=1
module	tensorflow ||| python client	count=1
module_class	format of [class_2] ||| [module_1] [class_2]	count=7
function	length ||| length	count=1
function	extract the labels into ||| extract labels	count=1
function_arg	signaturedef [arg_2] ||| [arg_2] [function_1]	count=2
arg	the given job ||| job_name task_index	count=1
function	[function_1] dump path ||| [function_2] [function_1]	count=1
arg	the input ||| inputs rate noise_shape	count=1
function	with registered priors ||| priors	count=1
function_arg	structure of [arg_2] ||| [arg_2] [function_1]	count=1
function	safe mean ||| safe mean	count=1
function	an exportstrategy instance ||| make parsing export strategy	count=1
function	number of rows and ||| size	count=1
function	shape values then return ||| maybe	count=1
module	of the op (e ||| framework	count=1
module	whether ||| python platform	count=1
class	these student's ||| student	count=3
arg	data to returns the ||| data	count=1
class	from the dump ||| debug dump	count=1
class	the vocabulary ||| categorical vocabulary	count=1
function	existing variable with ||| variable	count=2
function	for gamma ||| gamma greater	count=1
class	an input ||| feature column	count=1
function	order on a ||| order	count=1
arg	with a and b ||| a b	count=1
function_arg	abstract [function_1] [arg_2] ||| [function_1] [arg_2]	count=8
function	make a subgraph from ||| make view from	count=1
arg	for op ||| op	count=3
function	external control ||| external control	count=2
arg	shape_x and ||| shape_x	count=2
arg	[arg_1] ops ||| [arg_2] [arg_1]	count=2
function	first ||| t0	count=1
function	tf placeholder for ||| make placeholder from dtype and shape	count=1
arg	activations from ||| activations labels	count=3
module	of the ||| contrib framework python ops	count=1
function	a python ||| py	count=3
module	"matmul") ||| python framework	count=2
function	sparseadd ||| sparse add grad	count=1
arg	attempts ||| local_step name	count=1
function	device name ||| get device name	count=1
module	of ||| framework	count=3
function	[function_1] with as_iterable=true ||| [function_1] [function_2]	count=4
class	sample data ||| data	count=1
arg	numpy scan ops ||| func x axis exclusive	count=1
function	each ||| texts to sequences	count=1
function	initializer ||| exp initializer	count=1
module	proper shape ||| python ops distributions	count=1
arg	to axis ||| axis x_ndims	count=1
function	the range ||| range	count=2
function	creates ||| create	count=6
function	for ||| maybe assert valid sample	count=1
module	of name to tensor ||| contrib	count=1
function	an attribute (e ||| attribute at	count=1
function	symbol name -> ||| build guide	count=1
function	the name ||| name	count=14
class	it with ||| assign op test	count=1
module	carlo estimate of ||| python ops	count=1
function	network instance given ||| net	count=1
function	retrieves the input shape ||| input shape	count=1
function	the total [function_2] ||| [function_1] [function_2]	count=10
function_arg	[function_1] prior ||| [function_1] [arg_2]	count=2
function	python object ||| object	count=1
arg	exclude_keys ||| exclude_keys	count=1
arg	match predictions ||| predictions	count=1
arg	builder based on featurecolumns ||| columns_to_tensors feature_columns num_outputs	count=1
function	sparse ||| sparse recall at top k	count=1
function	that match ||| regex	count=1
arg	oldpath to newpath ||| oldpath newpath overwrite	count=3
module	a rnn cell composed ||| rnn	count=1
function	values in a ||| values	count=2
class	produced or ||| indexed slices	count=1
arg	comparing ||| rtol	count=1
function	all the data ||| with all resources	count=1
class	then ||| multinomial	count=1
function	concatenation ||| concatenate	count=1
function	has incorrect [function] ||| test inconsistent weight [function] raises	count=4
arg	alongside the specified axis ||| x axis keepdims	count=4
function_arg	[function_1] function ||| [arg_2] [function_1]	count=2
class	1 outcome (vs 0) ||| bernoulli	count=1
function	computes the sum ||| sparse reduce sum	count=1
class	table outputs the ||| lookup interface	count=1
function	op ||| grad grad	count=1
function	slot [function_2] ||| [function_2] [function_1]	count=4
function	a given rate ||| rate	count=1
arg	the labels and predictions ||| predictions labels dim weights	count=1
function	count of each entry ||| count	count=1
module	learn the vocabulary dictionary ||| contrib learn python learn	count=1
class	then return tensor ||| dirichlet multinomial	count=1
function	a serializable version ||| def	count=1
function	lstm ||| lstm	count=2
module	flattens ||| python util	count=1
arg	utility to compute/validate ||| input_shape default_size min_size data_format	count=1
arg	spec ||| spec inputs input_shape	count=1
arg	and ||| x	count=1
arg	structure of tensors ||| tensors apply_fn	count=3
function	values for [function_2] ||| [function_1] [function_2]	count=1
arg	input best ||| inputs	count=1
function	[function_1] [function_2] ||| [function_1] lookup [function_2]	count=6
function	of a tensor )) ||| logsumexp	count=1
function	rewriter and tests ||| test	count=1
arg	z ] with ||| z	count=1
function	[function_1] with weights ||| [function_2] [function_1]	count=5
module	initialization of ||| debug	count=1
function	the switch [function_2] ||| [function_2] [function_1]	count=2
module	worker ||| python ops	count=1
module	returns a tensor for ||| python feature_column	count=1
module	batch version ||| distributions	count=1
function	into predict step ||| predict	count=1
arg	node according to ||| node_name	count=1
function_arg	[function_1] [arg_2] ||| [function_1] loop [arg_2]	count=3
function	new ||| new attr	count=1
function	column with vocabulary ||| column with vocabulary with dense	count=1
function	[function_1] information for ||| [function_2] [function_1]	count=2
arg	in values ||| values dimension sampled_candidates	count=1
function_arg	[function_1] [arg_2] ||| [function_1] example [arg_2]	count=2
arg	file with ||| filename tensor_names	count=1
function	restricted linear prediction builder ||| joint weighted sum from	count=1
class	[class_1] elements ||| [class_1] [class_2]	count=1
function	postfix representation ||| tf spec structure	count=1
module	vocabulary ||| python learn preprocessing	count=4
arg	regex match ||| regex font_attr	count=1
module	a tensor with ||| contrib keras python keras	count=1
function	[function_1] graph containing ||| [function_1] [function_2]	count=1
function	single ||| parse single	count=4
function	of featurecolumns ||| feature columns	count=1
class	merges ||| search decoder	count=1
function	resize and mirror ||| resize and conv	count=1
module	tensorboard wsgi application ||| tensorboard	count=1
function_arg	process the [arg_2] ||| [function_1] [arg_2]	count=1
function	a name for ||| name	count=1
function_arg	the end [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	[function_1] layer ||| [function_1] [arg_2]	count=4
function	a generator ||| generator	count=1
arg	given values are ||| values	count=2
arg	of the predictions with ||| predictions	count=2
function	header for use ||| header from	count=1
function	predictions with respect ||| precision at	count=4
function_arg	sum [arg_2] ||| [function_1] grad [arg_2]	count=2
arg	appearing ||| log_p q	count=1
function	default schedule for ||| default schedule	count=2
function	add ops to save ||| add sharded save ops	count=2
function	with sdcaoptimizer and a ||| sdca	count=1
function	address ||| address	count=1
function_arg	fetches and [arg_2] ||| [function_1] name lists [arg_2]	count=1
function_arg	[function_1] logdir ||| [function_1] [arg_2]	count=2
module	get the list ||| python debug lib	count=2
function	header ||| header from ops and kernels	count=2
module	variable and returns it ||| keras	count=1
class	hook to ||| optimizer hook	count=1
function	and mirror ||| and	count=1
module	from a rank-2 tensor ||| solvers python ops	count=1
function	to ops ||| filter ts from	count=1
class	tests ||| combined classifier test	count=7
arg	regularizer to the ||| regularizer	count=1
function_arg	options [arg_2] ||| [arg_2] [function_1]	count=1
function	a richtextlines ||| lines from rich line	count=1
function	number of dumped ||| size	count=1
module	this ||| contrib grid_rnn python ops	count=1
class	processor from given file ||| processor	count=1
function_arg	verifies the [arg_2] ||| [arg_2] [function_1]	count=3
module	for the ||| feature_column	count=1
function	barrier ||| barrier	count=2
arg	converts an op to ||| op	count=1
function	[function_1] ops ||| [function_2] [function_1]	count=37
module	the value of a ||| python	count=1
function	[function_1] end ||| [function_1] flat [function_2]	count=1
module	a dataframe ||| learn dataframe	count=1
arg	suitable for comparing ||| rtol	count=1
arg	and a pure-decoding option ||| initial_state cell num_symbols	count=1
class	identifying ||| pdbase	count=1
function	[function_1] operation ||| [function_1] [function_2]	count=11
module	parameter p ||| contrib distributions python	count=1
module	dataset of only 1/ratio ||| contrib learn python learn datasets	count=1
class	that selects row ||| test	count=1
arg	tensors to a ||| tensors tensor_slices	count=1
module	of tensors ||| contrib factorization python ops	count=4
function	[function] element if ||| as [function]	count=2
arg	custom_getter to ||| custom_getter	count=1
module	derivative of [module_2] ||| [module_2] [module_1]	count=1
function	that has a conv ||| conv	count=1
function	string_to_hash_bucket op to ||| string to hash bucket fn	count=1
function	statistics for ||| stat	count=1
arg	used by gen_parsing_ops ||| features types	count=1
module	carlo estimate of an ||| bayesflow python ops	count=1
function	define a binary ||| define binary	count=2
function	spatial shear of ||| shear	count=1
class	we don't have ||| upgrade	count=1
module	returns ||| contrib layers	count=2
module	loads ||| contrib keras python keras preprocessing	count=1
class	gamma with ||| gamma	count=1
function	[function_1] iff ||| [function_1] [function_2]	count=2
function_arg	determines [function_1] [arg_2] length ||| [function_1] [arg_2]	count=1
module	next runge-kutta ||| integrate python ops	count=1
module	vocabulary dictionary and return ||| learn preprocessing	count=1
arg	according to which_bucket ||| which_bucket	count=1
arg	and add its inputs ||| inputs state scope	count=2
class	helper function ||| walsmodel	count=3
function	[function_1] small ||| [function_2] [function_1]	count=1
class	processor ||| processor	count=1
module_class	[module_1] sequence ||| [module_1] training next queued [class_2]	count=2
function	sessionrunhook raises typeerror otherwise ||| check	count=1
class	debugtensordatum ||| dir	count=1
module	-> ||| tools docs	count=2
function	returns ||| get file and line	count=1
arg	input [arg] it only ||| [arg]	count=1
module	of zero or more ||| contrib linalg python ops	count=1
module	in ||| event_processing	count=2
function	reservoirs with different seeds ||| uses	count=1
function	shape ||| assert	count=1
function	the outputs in place ||| outputs make unique	count=1
function	names of the ||| names	count=2
arg	around gen_spectral_ops rfft* ||| fft_fn	count=1
function	_guideref from the files ||| build guide index	count=1
module	which properly ||| distributions python	count=1
function_arg	update op [arg_2] ||| [arg_2] [function_1]	count=1
arg	constructed nodes and ||| args screen_info	count=1
module	dataframe with only the ||| learn python learn dataframe	count=1
function	are sessionrunhook raises ||| hooks type	count=1
module	returns the sum of ||| python framework	count=1
arg	pads 5d tensor ||| padding data_format	count=1
function	a specific plugin ||| plugin	count=1
function	[function_1] initializer and ||| [function_2] [function_1]	count=2
class	to run the enqueue ||| queue runner	count=1
function	evaluation metric [function_2] ||| [function_1] [function_2]	count=2
function	[function_1] vocabulary file ||| python layers sparse column [function_1] [function_2] column_name vocabulary_file num_oov_buckets vocab_size	count=1
function	[function_1] specified bounding ||| [function_1] [function_2]	count=1
function	[function_1] the row ||| [function_2] [function_1]	count=2
function	a menuitem from ||| to item	count=1
arg	values returning [arg] ||| numerator [arg]	count=1
arg	list of _embeddingcolumn ||| dimension combiner	count=1
arg	graph element ||| element_name handle_node_names intermediate_tensor_names	count=1
function	the operation ||| op	count=2
function	an initializer ||| initializer	count=1
function	mean absolute error ||| mean absolute error	count=2
class	that ||| kmeans test base	count=2
function	temporary directory ||| get temp dir	count=2
arg	to runoptions [arg_2] ||| [arg_2] [arg_1]	count=1
arg	[arg_1] tensor to ||| [arg_2] [arg_1]	count=4
function	[function_1] tensors ||| [function_1] [function_2]	count=4
function	sqss for [function_2] ||| [function_2] [function_1]	count=6
module	load ||| contrib session_bundle	count=2
function	mean squared ||| mean squared	count=4
function	a switch op is ||| switch grad	count=1
function	gradients for a merge ||| merge	count=1
arg	for storing [arg_2] ||| [arg_2] [arg_1]	count=1
function_arg	[function_1] for an ||| [arg_2] [function_1]	count=5
function	linked to ||| ts from regex	count=1
module	loss ||| ops losses	count=2
module	which ||| contrib distributions	count=2
function	generate class [function_2] ||| [function_2] [function_1]	count=6
function_arg	recall [arg_2] ||| [arg_2] [function_1]	count=3
arg	devicespec or device ||| device	count=1
function	with vocabulary [function_2] ||| python layers sparse column [function_1] [function_2] column_name vocabulary_file num_oov_buckets vocab_size	count=1
arg	in the given job ||| job_name task_index	count=1
function	for bilinear resizing ||| resize bilinear	count=1
function	large records ||| read large	count=1
function	[function_1] to observations ||| [function_2] [function_1]	count=1
arg	x ||| x axes shift	count=1
arg	y, depending [arg] ||| [arg] x y	count=1
module	a list of keras ||| keras python keras	count=1
module	of tensors corresponding to ||| ops	count=4
class	values will ||| slices	count=1
class	the function ||| defined function	count=1
function	creates default ||| default	count=1
function	then return tensor ||| valid	count=1
function	with additional logistic metrics ||| with logistic metrics	count=1
function_arg	a hook [arg_2] ||| [arg_2] [function_1]	count=2
function	tensor ||| get	count=1
function	get a ||| caption to item	count=1
function	a fixed [function_2] ||| [function_2] [function_1]	count=1
class	the layer from ||| layer	count=1
module	each text ||| keras python keras preprocessing	count=1
arg	tf namespace and ||| py_modules do_not_descend_map	count=1
class	dnnclassifier ||| dnnclassifier	count=1
function_arg	[function_1] [arg_2] ||| [function_1] tags [arg_2]	count=1
function	linearclasssifier with sdcaoptimizer and ||| sdca optimizer	count=1
function	tree of python files ||| tree	count=1
arg	floats ||| f1 f2 err	count=1
function_arg	graph g ||| to graph g	count=1
arg	a graph element ||| element_name handle_node_names intermediate_tensor_names override_names	count=1
module	keras tensor ||| keras python keras	count=1
function	to record ||| record	count=1
arg	a subgraph view ||| sgv control_inputs	count=1
module	returns a shape ||| python	count=1
class	end ||| base monitor	count=1
module	name ||| framework	count=1
arg	given in input best ||| inputs sequence_length	count=1
arg	parameters ||| use_peepholes share_time_frequency_weights cell_clip	count=1
function	callable that ||| callable	count=1
function_arg	the op that performs [function_1] [arg_2] ||| hybrid python hybrid model [function_1] [arg_2] data_spec	count=3
function	use a watch_fn ||| watch fn	count=1
arg	a few dummy ||| tag n_audio	count=1
class	a tensor into ||| tensor	count=1
function	recurrent neural network specified ||| dynamic	count=1
module	of one ||| python ops	count=1
function	proper shape values then ||| assert valid	count=1
function	projections of the rows ||| get projections	count=1
class	that selects row ||| walsmatrix factorization test	count=1
module	reservoir ||| backend event_processing	count=1
function_arg	indexedslices object [arg_2] ||| [arg_2] [function_1]	count=3
arg	to apply conv ||| filters num_row num_col	count=1
module	for this ||| ops	count=1
function	purge ||| purge	count=1
arg	[arg_1] axis ||| [arg_2] [arg_1]	count=16
function_arg	mini batch [arg_2] ||| [arg_2] [function_1]	count=1
module	return dict symbol name ||| docs	count=1
arg	words ||| context_words	count=1
function	projects [function_2] ||| [function_2] [function_1]	count=2
module	raises ||| python estimator	count=2
function	[function_1] and ||| [function_1] [function_2]	count=18
arg	[arg_1] the expected ||| [arg_1] [arg_2]	count=1
function	[function_1] [function_2] ||| [function_2] and [function_1]	count=3
function	name -> ||| build guide	count=1
module	image ||| contrib slim python slim data	count=1
arg	pads 5d tensor with ||| x padding data_format	count=1
module	batch of ||| ops	count=5
arg	that subscribes ||| control_cache	count=2
function	[function_1] normalization layer ||| [function_1] [function_2]	count=2
arg	5d tensor with zeros ||| data_format	count=1
module	true if this ||| framework	count=1
arg	protocol buffer with ||| max_outputs	count=1
function_arg	[function_1] given estimator ||| [arg_2] [function_1]	count=1
class	without ||| hybrid model	count=1
module	s of the ||| contrib keras python keras engine	count=1
module	session and runs a ||| python learn	count=1
module	[module_1] the ||| [module_2] [module_1] assert	count=1
function	[function_1] in ||| cli curses ui auto [function_1] [function_2]	count=1
function	weight with other ||| and other	count=1
function	into summary file ||| to summary	count=2
function_arg	path from [arg_2] ||| [arg_2] [function_1]	count=1
class	sample data [class_2] ||| [class_2] [class_1]	count=2
class	construct ||| linear classifier	count=1
function	ndtri has finite ||| base ndtri finite	count=2
function	output predictions for ||| predict	count=2
arg	an estimator ||| num_units target_column	count=1
function	of names ||| names	count=2
arg	predictions, labels ||| predictions labels weights	count=1
arg	parameters for an ||| use_peepholes	count=1
function	assigns non-overlapping lanes ||| assign lanes	count=2
function	beginning of training ||| train begin	count=1
function	linked to ops ||| regex	count=1
function	outputs of ||| outputs	count=3
arg	activations from the rnn ||| activations labels	count=3
function	matmul node ||| mat mul node	count=2
function	2d binary indicator to ||| binary 2d label to 1d	count=1
function	a richtextlines ||| lines from rich	count=1
function	expired [function_2] ||| [function_1] [function_2]	count=1
arg	applying ||| inputs	count=1
module	typeerror ||| estimator	count=1
function	make sure ||| compatibility	count=1
class	returns ||| dtype	count=1
function	tensorshape ||| shape	count=6
arg	returns an ||| name	count=1
function	a single ||| get single	count=1
function	return ||| get	count=2
arg	make sure ||| wait_for_checkpoint	count=1
function	== ||| equal	count=2
module	of a function ||| python ops	count=1
module	vector of ||| ops distributions	count=3
module	of ||| distributions python ops	count=31
arg	of the image ||| image	count=1
arg	dimension of 1 ||| dim	count=1
arg	cell with ||| cell num_proj activation input_size	count=1
class	make ||| time freq lstmcell	count=1
arg	compute log_prob [arg] using ||| [arg]	count=1
function	arg batch_shape, [function_2] ||| [function_2] [function_1]	count=3
function	fixed [function_2] ||| [function_1] [function_2]	count=1
arg	d1 and d2 ||| d1 d2	count=1
module	training and inference ||| contrib learn python learn estimators	count=1
function	richtextlines object ||| rich text lines from	count=1
function	length of predictions ||| length	count=1
module	matrix representing this ||| contrib linalg python ops	count=1
function	runs inference to determine ||| classes	count=2
arg	a file ||| filename	count=1
function	meta graph ||| meta graph	count=2
module	the default graph ||| python	count=2
arg	tensorflow [arg_2] ||| [arg_2] [arg_1]	count=2
arg	[arg_1] by v ||| [arg_2] [arg_1]	count=1
function	extract the labels ||| extract labels	count=2
function	attempts to statically compute ||| logical	count=1
function	[function_1] given sensitivity ||| [function_2] [function_1]	count=2
class	[class_1] options ||| [class_2] [class_1]	count=1
module	a sequence of ||| keras preprocessing	count=1
function	to a richtextlines object ||| lines from	count=1
arg	a linear operator ||| operator	count=1
module	(vs ||| python	count=1
function	the given task in ||| task	count=1
function	to read queue batch ||| read keyed batch features shared queue	count=1
function_arg	[function_1] sparsetensor into ||| [arg_2] [function_1]	count=2
function	embedding ||| shared embedding	count=1
function_arg	wrt [arg_2] ||| [function_1] ys [arg_2]	count=3
function	operator from a ||| create operator	count=1
arg	labels ||| top_k_predictions labels weights	count=1
arg	create a ||| name container	count=1
arg	highwaywrapper for [arg_2] ||| [arg_2] [arg_1]	count=2
module	and return indexies ||| learn	count=2
function	run ||| for run	count=1
module	event file ||| python summary	count=1
function	the sum of ||| sparse reduce sum	count=1
class	multiple output ||| utils	count=1
function_arg	[function_1] v is ||| [function_1] resource [arg_2]	count=2
function	tf placeholder for ||| make placeholder from dtype	count=1
function	pack a list of ||| pack	count=1
module_class	worker [class_2] ||| [module_1] [class_2]	count=2
function	list of featurecolumns ||| feature columns	count=1
function_arg	[function_1] their names ||| [function_1] [arg_2]	count=3
arg	times and ||| name	count=1
function	nchw format to ||| nchwto	count=1
function	ops that match ||| filter	count=1
function_arg	strategies with [arg_2] ||| [arg_2] [function_1]	count=1
function	to extract command from ||| get command from	count=1
arg	the parameters ||| use_peepholes	count=1
function	signaturedef ||| tensor info from meta graph def	count=1
module	returns ||| contrib learn python learn estimators	count=3
module	transforms ||| keras	count=2
module	inverse ||| python training	count=1
function_arg	[function_1] factor ||| [arg_2] [function_1]	count=4
arg	tensors from tensors ||| tensors	count=1
function	tries to restore a ||| restore	count=1
function	have invalid ||| invalid number of classes	count=1
arg	based ||| ui_type	count=1
function	converts a sparse tensor ||| to	count=1
arg	recall@k ||| class_id weights	count=1
arg	elements from ||| name	count=2
function	op to use based ||| string to	count=1
arg	files [arg_2] ||| [arg_2] [arg_1]	count=2
function	max pool [function_2] ||| [function_2] [function_1]	count=5
arg	[arg_1] or index ||| [arg_1] [arg_2]	count=1
function	register a ||| register	count=3
function	axis_order_scope ||| axis order	count=1
class	to ||| builder	count=3
arg	parsed [arg] ||| [arg]	count=1
function	for a rank rfft ||| infer fft length for rfft	count=1
function	a control ||| control	count=1
function	[function_1] tensors if ||| [function_1] [function_2]	count=3
module_class	for [class_2] ||| [module_1] [class_2]	count=6
function	[function_1] to vector ||| [function_2] [function_1]	count=4
arg	collects and stores ||| graph ignore_regex_fpaths	count=1
module	return indexies ||| contrib learn python	count=1
function	keys in ||| keys	count=1
class	tensorshape with the ||| shape	count=1
module	the ||| contrib learn python learn	count=1
function	[function_1] start message ||| [function_2] [function_1]	count=1
function	op to ||| get string to	count=1
function_arg	[function_1] labels and ||| [function_1] predictions [arg_2]	count=12
arg	for an ||| num_units	count=1
arg	feature keys ||| keys	count=1
function	inputs for sequence ||| seq2seq inputs	count=1
module	index of the ||| python	count=1
module	returns number of dimensions ||| python ops	count=2
function	[function] batch/event_shape are ||| maybe validate shape [function]	count=3
arg	corresponding to axis ||| axis x_ndims	count=1
function	returns the proto_type for ||| collection proto type	count=1
function	asset tensors ||| get asset tensors	count=2
class	failed if ||| op error	count=1
module	check ||| compatibility	count=1
function	depthwise 2-d [function_2] ||| [function_2] [function_1]	count=1
arg	xs by v ||| xs v	count=3
arg	of base_type to ||| base_type	count=1
function	[function_1] meta ||| [function_2] [function_1]	count=1
arg	entries in x ||| x	count=1
function	arg [function_2] ||| [function_2] [function_1]	count=1
function	start the [function_2] ||| [function_2] [function_1]	count=4
function	valid [function_2] ||| [function_2] [function_1]	count=4
module	are sessionrunhook raises typeerror ||| python estimator	count=1
module	specified by ||| slim	count=1
function	input mask ||| input mask	count=3
class	make sure ||| files	count=1
function	as a [function_2] ||| [function_1] [function_2]	count=1
module	function that ||| python framework	count=1
function	list of collections used ||| get all collection keys	count=1
function	make ||| make	count=3
function	dynamicpartition ||| dynamic partition grads	count=1
function	positive [function_2] ||| [function_2] [function_1]	count=2
function	exit op ||| exit	count=1
arg	on a labeled tensor ||| labeled_tensor	count=1
function	a sentinel event ||| sentinel event	count=1
module	the shapes of the ||| python ops	count=1
function	strings ||| test dtype string	count=1
function	delay between checkpoints ||| model secs	count=1
function	[function_1] or ||| [function_2] [function_1]	count=8
arg	ready ||| max_wait_secs	count=1
function	max amazingly it's ||| max	count=1
module	variance ||| keras python keras	count=1
function	tensorshape [function_2] ||| [function_2] [function_1]	count=8
arg	parameters for an ||| num_units use_peepholes share_time_frequency_weights cell_clip	count=1
module	returns a list ||| contrib learn python learn	count=1
module	model ||| slim nets	count=1
arg	a stopatstephook ||| num_steps last_step	count=1
function_arg	function [arg_2] ||| [function_1] x target_key [arg_2]	count=1
function	overrides the ||| set	count=1
function	higher [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] path and ||| [function_2] [function_1]	count=3
arg	apply conv [arg_2] ||| [arg_2] [arg_1]	count=2
arg	node_def ||| node_def	count=1
function	new values from ||| from map	count=1
class	to the debug-wrapper ||| base debug wrapper	count=1
module_class	[module_1] [class_2] ||| [module_1] mutable hash [class_2]	count=4
function	resize [function_2] ||| python tools fuse [function_1] [function_2]	count=4
function_arg	[function_1] session ||| [function_1] [arg_2]	count=1
module	specified by the ||| contrib slim python slim data	count=1
arg	[arg_1] values ||| [arg_2] [arg_1]	count=2
arg	state ||| cell features	count=1
function	projects the ||| project	count=1
module_class	[module_1] variable wrapper ||| [module_1] [class_2]	count=1
module	dictionary and return indexies ||| python	count=1
module	values ||| python framework	count=2
arg	tensor ||| name optimize	count=1
function	maps input key ||| input exprs	count=1
function	dict symbol name ||| build	count=1
function	insertion indices of ||| insertion index	count=1
class	a forest ||| forest graphs	count=2
function	all ||| from	count=1
function	a node name ||| and node	count=1
module	reads ||| python lib io	count=1
function	process a [function_2] ||| [function_1] partition [function_2]	count=1
class	rich attributes or ||| rich line	count=1
class	one float ||| rewriter	count=1
function	[function_1] batch matrix ||| [function_2] [function_1]	count=1
module	transforms each text ||| contrib keras python keras preprocessing	count=1
arg	the parameters for an ||| use_peepholes share_time_frequency_weights cell_clip	count=1
function	metric ops ||| metric ops	count=2
function	[function_1] solve ||| [function_2] [function_1]	count=1
module	the dataframe and ||| python learn dataframe	count=1
function	linear-only instantiation and ||| linear only	count=1
function	the feed types used ||| last feed types	count=1
module	returns a tensor with ||| python keras	count=1
function_arg	[function_1] node according ||| [arg_2] [function_1]	count=4
function	connect ||| connect	count=2
function	a slot named "name" ||| slot	count=1
function	summary op either ||| get summary op	count=1
function	for linear-only model ||| linear only	count=1
arg	batch_size and [arg_2] ||| [arg_2] [arg_1]	count=1
arg	in given output directory ||| output_dir	count=1
function	[function_1] that repeat ||| [function_2] [function_1]	count=2
arg	steps and returns only ||| inputs noutput scope	count=1
function	parameters and flops ||| logged	count=1
arg	x = g y ||| x name	count=1
module	the tensors linked to ||| contrib	count=1
arg	fns ||| fns	count=1
arg	collects ||| graph ignore_regex_fpaths	count=1
function	return tensor version ||| maybe	count=1
module	0 to ||| python training	count=1
function	[function_1] services for ||| [function_1] [function_2]	count=3
class	stack is empty ||| stack	count=1
function_arg	[function_1] op ||| [function_1] context [arg_2]	count=2
function	external control dependency on ||| external control edges	count=1
module	if ||| learn python learn datasets	count=1
function	the tensors linked ||| regex	count=1
function	op type ||| op type	count=2
arg	sharded ||| shape dtype num_shards	count=1
function	with real valued ||| real valued linear	count=2
class	the op ||| op	count=1
function	the mahalanobis distance ||| distance	count=1
function	parameters for ||| optimize	count=1
module	tensor version ||| distributions	count=1
module	cross-entropy loss using tf ||| python losses	count=1
arg	[arg_1] loc and ||| [arg_2] scale validate_args [arg_1]	count=1
module	the ||| factorization python ops	count=1
module	matches ||| contrib metrics python metrics	count=1
class	debug tensor ||| session debug	count=1
function	[function_1] graph to ||| [function_1] [function_2]	count=4
class	load ||| debug dump dir	count=1
class	array [class_2] ||| [class_2] [class_1]	count=4
function	list of the names ||| names	count=2
class	[class] convolution ||| [class]	count=2
function	standard ||| standard	count=1
function	return tensor ||| maybe assert valid sample	count=1
class	the enqueue ||| queue runner	count=1
function_arg	a random [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] tensorflow variables ||| [function_2] [function_1]	count=3
function	runs ||| run	count=2
module	lists of unique items ||| contrib labeled_tensor python ops	count=1
function	for feeding into predict ||| predict data feeder	count=1
function	top ||| top	count=1
function	provided have invalid ||| invalid number	count=1
arg	runs session for ||| session step	count=1
arg	value ||| x value	count=1
class	a real graph ||| quantize graph	count=1
arg	interpolates keyword arguments ||| args kw kw_overrides	count=1
function	a line in ||| add line	count=1
function	node name ||| and node	count=1
arg	the screen output ||| output	count=1
arg	the labels [arg_2] ||| [arg_1] [arg_2]	count=3
module	new ||| python learn	count=1
function	the main page and ||| main page	count=1
arg	conv ||| filters num_row num_col	count=1
class	the wrapper ||| debug wrapper session	count=1
module_class	input [class_2] ||| [module_1] [class_2]	count=1
function	returns a filename ||| get checkpoint filename	count=1
arg	check counts ||| counts	count=2
arg	using tf nn sigmoid_cross_entropy_with_logits ||| logits multi_class_labels weights label_smoothing	count=1
module	and ||| python learn preprocessing	count=2
arg	a statesavingrnnestimator ||| problem_type num_unroll batch_size sequence_feature_columns	count=1
module	suitable tags ||| tensorboard backend event_processing	count=1
function	default learning ||| learning	count=1
function	add ops to save ||| add sharded save	count=2
arg	fn_else() based on ||| fn_then fn_else	count=1
function	this device is ||| gputrace device	count=1
module	(e ||| framework	count=1
function	[function_1] [function_2] labels ||| [function_2] [function_1] k labels predictions_idx k	count=3
function	list of data types ||| types	count=1
module	by the embedding projector ||| projector	count=1
arg	value ||| name	count=1
function	calculates false positives ||| false positive at k	count=1
arg	tensor ||| dtype name	count=2
function	[function_1] use metricspec ||| [function_1] [function_2]	count=2
module	s of a ||| keras python keras engine	count=2
function	raises a static valueerror ||| assert static	count=1
function_arg	confusion matrix [arg_2] ||| [function_1] labels predictions [arg_2]	count=1
arg	i will correspond to ||| sp_input perm	count=1
module	for proper shape ||| ops	count=1
function	from csv ||| from csv with feature	count=1
arg	scale_identity_multiplier ||| scale_identity_multiplier	count=1
function	[function_1] search commands ||| [function_2] [function_1]	count=1
function	[function_1] servers ensures ||| [function_2] [function_1]	count=1
function	predefined collection names ||| predefined collection names	count=3
class	this data feeder ||| data feeder	count=2
class	no error ||| infer	count=1
arg	[arg_1] a feature_spec ||| [arg_2] [arg_1]	count=2
function	trigger for the ||| trigger for	count=2
function	size histogram ||| histogram	count=1
function	generate main menu for ||| add main menu	count=1
function	creates a hook to ||| make session run hook	count=1
class	these parameters or create ||| variable store	count=1
function	read the ||| tf	count=1
function	after broadcasting the ||| broadcast batch	count=1
function	[function_1] sparse ||| [function_1] [function_2]	count=9
function	definite [function_2] ||| [function_2] [function_1]	count=1
function	default [function] for ||| get default [function]	count=2
arg	across the specified dimension ||| dim epsilon scope	count=1
module	dict symbol ||| tools docs	count=1
function	request ||| test request	count=1
function	queue batch and ||| batch features shared queue	count=1
arg	tensor ||| input_	count=1
arg	expected ||| expected_type	count=1
function	fully connected layer ||| legacy fully connected	count=2
function	into a placeholder ||| with placeholder	count=1
function	and isinf are not ||| gives false	count=1
function	runs inference to determine ||| predict classes	count=2
module	and scores ||| learn utils	count=1
module	graphdef and ||| python framework	count=1
arg	cpu and gpu produce ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
function_arg	all variables [arg_2] ||| [arg_2] [function_1]	count=1
module	specified by [module_2] ||| [module_2] [module_1]	count=4
function	plugin asset from ||| retrieve plugin asset	count=2
arg	on the compatiblity of ||| loss_fns output_shapes	count=1
arg	from op1 [arg_2] ||| [arg_2] [arg_1]	count=4
function	split the parameters of ||| split	count=1
class	[class_1] tensorflow ||| [class_1] [class_2]	count=2
function	node [function_2] ||| [function_1] [function_2]	count=1
function	numpy printoption from a ||| numpy printoption	count=1
function_arg	[function_1] tf ||| [arg_2] [function_1]	count=2
function	tensors ||| regex	count=1
function	returns a lookup table ||| table from	count=1
function_arg	inverse [arg_2] ||| [arg_2] [function_1]	count=1
arg	the given ids ||| sp_ids sp_weights partition_strategy	count=1
function	outputs to ||| outputs to	count=2
arg	the image ||| image color	count=1
function	centered [function_2] ||| [function_1] [function_2]	count=5
function	tf ||| from	count=1
function_arg	names from [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] column filled ||| [function_1] [function_2]	count=4
function	check whether a graph ||| is	count=1
function	the root ||| prefix	count=1
class	woodbury ||| tri lplus vdvtlightweight operator pd	count=1
class	index a file reading ||| index	count=1
function	l1 regularized model has ||| train optimizer with l1reg	count=1
arg	d1 ||| d1	count=1
arg	r^k, ||| loc atol rtol validate_args	count=1
function	[function_1] while ||| [function_2] [function_1]	count=8
function	shannon entropy ||| entropy	count=1
module	of a given ||| python ops	count=1
function	by a node name ||| and node	count=1
function	[function_1] parameters ||| [function_1] [function_2]	count=2
arg	loc and scale ||| loc scale validate_args	count=3
function	operation within [function_2] ||| [function_1] [function_2]	count=1
arg	microbenchmark to measure ||| size iters	count=1
function	and tensors ||| and ts	count=2
function	indices [function_2] ||| [function_1] [function_2]	count=1
function	node to compute gradient ||| compute	count=1
function	the beginning of training ||| train begin	count=1
function	create a [function_2] ||| [function_1] dense column [function_2]	count=4
function	richtextlines object ||| text lines from rich	count=1
class	node names ||| node	count=1
arg	maps activations from ||| activations sequence_length target_column problem_type	count=1
function	and flops for ||| logged ops	count=1
class	that dequeues elements ||| priority	count=1
module	of vectors matrices ||| ops	count=1
class	test ||| grid rnncell test	count=1
class	cluster ||| cluster	count=1
arg	switch op ||| op	count=1
module	or list of tensors ||| ops	count=1
function	gets an [function_2] ||| [function_2] [function_1]	count=2
module	shape values then ||| python ops distributions	count=1
function	up to ||| up to	count=4
function	whether a stop ||| stop	count=1
function	load a ||| load	count=1
function	[function_1] [function_2] ||| [function_1] save [function_2]	count=2
module	[module_1] image s ||| [module_1] [module_2]	count=1
function	with atrous convolution ||| test atrous	count=1
function	multiclass data ||| multiclass data	count=2
function	[function_1] [function_2] integer type ||| integer [function_2] [function_1]	count=1
module	variable of the ||| keras python keras	count=2
class	a tree ||| tree	count=1
function_arg	[function_1] [arg_2] kl divergence ||| ops elbo [function_1] [arg_2]	count=1
function	a temporary [function_2] ||| [function_2] [function_1]	count=4
function	specifies non-default debug ops ||| fn with non default debug ops works	count=1
function	concat node ||| concat node	count=2
module	a dataframe with ||| contrib learn python learn dataframe	count=1
function	list [function_2] ||| [function_2] [function_1]	count=10
function	[function_1] current control ||| [function_2] [function_1]	count=2
function	for proper shape values ||| assert valid	count=1
function_arg	[function_1] savedmodel ||| [arg_2] [function_1]	count=2
function	distance to the ||| distance to	count=1
arg	lines to extract the ||| lines	count=1
function	[function_1] [function_2] ||| [function_1] tokens [function_2]	count=4
class	compares ||| mocking event accumulator test	count=1
function	the rates ||| rates	count=1
function	proper shape values ||| maybe	count=1
function	example proto ||| to example proto	count=1
function	] ||| expectation importance	count=1
function	linear_model_fn but returns modelfnops ||| linear model fn with model fn ops	count=2
function_arg	the name [arg_2] ||| [function_1] or parent names [arg_2]	count=1
arg	rank 1 tensors x ||| x	count=1
function	modelfnops that a model_fn ||| create model fn ops	count=1
function	containing state ||| state	count=1
function	batch size ||| batch size	count=2
function_arg	[function_1] to sequence ||| [arg_2] [function_1]	count=1
arg	an rnn [arg_2] ||| [arg_2] [arg_1]	count=1
function	training with [function_2] ||| [function_1] [function_2]	count=14
module	the transformer ||| python	count=1
function	via [function_2] ||| [function_1] [function_2]	count=2
function	[function_1] l1 regularization ||| [function_2] [function_1]	count=3
function	device function to ||| replica device	count=1
function	loop ||| loop	count=10
class	lstm cell ||| forget gate lstmcell	count=1
arg	to ||| global_step graph_def	count=1
function	[function_1] dnn-linear combined ||| [function_1] [function_2]	count=4
function	if the model ||| model	count=1
module	abstract ||| python keras engine	count=1
arg	an alias ||| alias	count=1
function	data distribution as ||| data distribution	count=2
module	with ||| python learn learn_io	count=2
function	raises typeerror otherwise ||| hooks	count=1
function	supported by [function_2] ||| linear_optimizer python head is [function_1] [function_2] head	count=1
module	interactivesession ||| python	count=1
function	removes the ||| remove	count=1
function	true_positives false_negatives true_negatives false_positives ||| confusion matrix at thresholds	count=1
function	the keys ||| keys	count=1
class	value should be ||| stochastic value type	count=3
class	statistics ||| stats	count=1
arg	losses ||| losses	count=1
function	have no ||| no	count=2
function	digamma ||| multi digamma	count=2
class	wrapper should ||| debug wrapper session	count=1
arg	builds model ||| features labels	count=3
function_arg	[function_1] a batch ||| [function_1] [arg_2]	count=3
arg	and salt ||| salt	count=1
function	for test ||| test	count=1
function	[function_1] [function_2] ||| [function_1] average precision [function_2]	count=4
function	returns default value ||| default value	count=1
function	are absolute ||| absolute	count=1
arg	with mean ||| allow_nan_stats	count=1
arg	a cell ||| cell output_size activation	count=1
module	of dimensions and assert ||| contrib distributions python ops	count=1
module	returns a list ||| learn	count=1
function_arg	[function_1] n ||| [arg_2] [function_1]	count=2
module	shape ||| ops	count=1
class	tests ||| cross op test	count=5
function	string [function_2] ||| [function_2] [function_1]	count=1
function	tensor objects ||| to tensor	count=2
function_arg	true if [arg_2] ||| [function_1] switch [arg_2]	count=3
function	tf ||| make	count=2
module_class	[module_1] that failed ||| [module_1] [class_2]	count=1
function_arg	sparse gradients to ||| sparse grad	count=2
function	dfs traversal of a ||| dfs	count=1
class	an audio ||| audio op	count=1
function	validator callback ||| on	count=1
function	cont() [function_1] [function_2] ||| then cont [function_1] [function_2]	count=1
module	ops ||| contrib distributions python ops	count=1
arg	on hasher_spec ||| hasher_spec	count=1
arg	the given regex ||| ops regex	count=1
module	returns a tensor ||| python feature_column	count=1
function	graph, returns its namesake ||| get copied	count=1
function	fractional average pooling ||| fractional avg pool	count=2
module	with default ||| python learn learn_io	count=1
module_class	all ops [class_2] ||| [class_2] [module_1]	count=1
class	partitioned ||| partitioned	count=1
function	placeholder for the graph ||| placeholder from dtype and shape	count=1
function	[function_1] used ||| [function_2] [function_1]	count=4
module	imagenet model's ||| contrib keras python keras applications	count=1
module	in ||| python keras	count=3
function	binary synthetic ||| make dataset	count=1
class	generator into ||| generator enqueuer	count=1
function	constants of the same ||| constants	count=1
arg	vocabulary ||| x	count=1
arg	to tensor numpy ||| tensor	count=1
module	the ||| python debug cli	count=2
function	gather ||| screen gather	count=1
module	integers ||| keras preprocessing	count=2
function_arg	rank irfft [arg_2] ||| [arg_2] [function_1]	count=1
module	labeled ||| contrib labeled_tensor python	count=3
function_arg	image [arg_2] ||| [function_1] [arg_2]	count=3
arg	interpolates keyword [arg_2] ||| [arg_2] [arg_1]	count=6
function	the proto_type for ||| type	count=1
function	add the [function_2] ||| [function_2] [function_1]	count=3
class	merge ||| device spec	count=1
function	initial [function_2] ||| [function_1] [function_2]	count=3
module	for ||| contrib rnn python ops	count=2
function	client feed ||| tensor feed	count=1
module	file ||| python lib io	count=5
function	a ||| texts to	count=1
arg	new_export_strategies ||| new_export_strategies	count=1
function	function from an external ||| external	count=1
function	its parent columns' ||| parent	count=1
function	to extend the ||| extend	count=1
function_arg	least [arg_2] ||| [function_1] [arg_2]	count=1
module	and return indexies ||| python learn	count=1
function	returns the variable ||| variable	count=1
function	resultant ||| compute elemwise	count=1
function	the collection with the ||| get collection ref	count=1
class	called when the thread ||| looper thread	count=1
arg	name ||| name size test_with_fake_data	count=1
arg	the screen output ||| output node_name enable_list_tensors enable_node_info	count=1
function	possibly add ||| possibly add	count=4
function_arg	output [arg_2] ||| python keras utils conv [function_1] length [arg_2]	count=3
function	a placeholder for a ||| placeholder	count=1
arg	interface for transposed 3d ||| inputs filters kernel_size strides	count=1
function	meta ||| meta	count=1
function	cond that ||| cond	count=1
function	the decorated function ||| function	count=1
function	a placeholder tensor ||| placeholder	count=1
function	when one [function_2] ||| [function_2] [function_1]	count=3
function	resizes the volume contained ||| resize volumes	count=1
function	[function_1] spec ||| [function_1] [function_2]	count=3
module	all the ||| graph_editor	count=8
module	the axes of ||| labeled_tensor python ops	count=1
class	[class_1] projection ||| [class_2] [class_1]	count=4
class	mapper that handles the ||| fetch mapper	count=1
function_arg	[function_1] satisfies the ||| [arg_2] [function_1]	count=4
function	get all the tensors ||| ts from	count=1
function	linear-only model ||| linear only	count=1
module	as 'values' ||| contrib metrics	count=1
function_arg	sparse [arg_2] ||| [function_1] [arg_2]	count=7
function	[function_1] max amazingly ||| [function_1] [function_2]	count=2
arg	the loss_collection ||| scope loss_collection	count=1
function	boots 3 servers ||| test cluster spec propagation three servers one	count=1
function	step of a dynamic ||| step	count=1
function	on a tensor to ||| tensor	count=1
function	conv_block is the block ||| block	count=1
module	the tfprof ||| contrib tfprof python tools tfprof	count=1
function	the tensors ||| ts	count=1
function	recipient of the ||| recipients	count=1
function	tf examples to extract ||| from examples	count=1
function	calculates false [function_2] ||| [function_2] [function_1]	count=2
function	summary op either from ||| get summary op	count=1
module	and return ||| python	count=1
function	epoch ||| epoch begin	count=1
function	restart only affect ||| restart	count=1
function	the grad state for ||| get grad state	count=1
function	eval step ||| eval step	count=2
class	till the coordinator ||| coordinator	count=1
function	files ||| build guide index	count=1
function_arg	[function_1] dnnlinearcombinedclassifier instance ||| [arg_2] [function_1]	count=1
arg	recall@k of [arg_2] ||| [arg_2] labels [arg_1]	count=3
function	delay between checkpoints ||| save model secs	count=1
function	and match with ||| and	count=1
function	index from a keyword ||| index	count=1
function	make_linear_model() for [function_2] ||| [function_1] two [function_2]	count=2
module	and return indexies ||| contrib learn python	count=1
module	core version with default ||| contrib learn python learn	count=1
function	returns the weight tensor ||| weight tensor	count=3
function	all inputs are constant_value ||| all constant	count=1
module	in the [module_2] ||| [module_2] [module_1]	count=8
function	sine function ||| sine function	count=4
function_arg	[function_1] mat ||| [function_1] to vector [arg_2]	count=5
module	to __init__ which ||| distributions python ops bijectors	count=1
module_class	of this tensor ||| python framework tensor	count=3
module	the rank of ||| contrib metrics python ops	count=1
module	return ||| tools	count=1
function	bad way ||| construction pollution	count=1
module	to ||| python	count=1
function	tall [function_2] ||| [function_2] [function_1]	count=2
module_class	tensorflow [class_2] ||| [module_1] [class_2]	count=1
function	[function_1] along ||| [function_2] [function_1]	count=8
function	for an exit ||| exit grad	count=1
class	input ||| input	count=2
module	return indexies of ||| learn preprocessing	count=1
function	a matmul [function_2] ||| [function_1] [function_2]	count=3
module	which properly ||| contrib distributions	count=1
module	debug tensor ||| debug lib	count=1
module	when this ||| python client	count=1
function	given ||| call	count=1
arg	[arg_1] and fetches ||| [arg_2] [arg_1]	count=16
function	the cached tensor ||| cache	count=1
module	tensors execute together ||| contrib batching python	count=1
function	_guideref from the files ||| guide index	count=1
function	min [function_2] ||| [function_2] [function_1]	count=5
arg	the file at full_path ||| full_path	count=1
function	score for [function_2] ||| [function_2] [function_1]	count=2
function	all the ||| with all	count=1
module	learn ||| learn python	count=1
module	a rank-2 ||| contrib solvers python	count=1
function	the directory containing the ||| dir	count=1
function	gradient [function_2] ||| [function_2] [function_1]	count=5
function	[function_1] runoptions for ||| [function_1] [function_2]	count=5
arg	a state ||| cell features labels mode	count=1
module	prepended to all ||| contrib linalg python	count=1
function	multiply layer ||| multiply	count=1
module	rank-2 tensor ||| contrib solvers python	count=1
class	[class_1] degree ||| [class_2] [class_1]	count=1
arg	cell with device device ||| cell device	count=1
module	predict total sum of ||| python ops	count=1
class	generates ||| tfexample decoder test	count=1
class	basic [class_2] ||| [class_2] [class_1]	count=1
function	sparse and dense inputs ||| sparse	count=1
function	the dtype of ||| dtype	count=3
function	from a graph file ||| from files	count=1
module	creates a transform ||| dataframe transforms	count=1
function	standard deviation ||| std	count=1
arg	deprecation ||| doc instructions no_doc_str suffix_str	count=1
function	matrix ||| process matrix	count=1
module	[module_1] s ||| [module_1] [module_2]	count=12
module	and return ||| contrib learn python	count=1
module	of ||| learn python	count=1
function	adds tf options ||| handle options	count=1
arg	that maps ||| mapping default_value	count=1
module	tensors specified by the ||| python slim	count=1
function	or list ||| or list	count=2
arg	hints argument is ||| hints	count=1
arg	the full epoch ||| sess eval_correct images_placeholder labels_placeholder	count=1
function	parameters and flops for ||| get logged	count=1
function	all inputs are ||| all	count=1
module	with integer ||| learn python learn	count=1
function_arg	check if [arg_2] ||| [function_1] type [arg_2]	count=4
function	session ||| session init	count=2
function	raised when all required ||| required	count=2
module	returns a tensor with ||| keras	count=1
function	[function_1] shape ||| [function_2] [function_1]	count=19
module	dataframe with only ||| contrib learn python learn dataframe	count=1
function	to the help output ||| help	count=1
module	a dataframe into ||| learn dataframe	count=1
module	the current ||| python keras	count=2
class	quantized distribution representing y ||| quantized distribution	count=1
function	signaturedef proto for ||| as signature def	count=1
arg	tensor if possible ||| tensor	count=1
arg	an ||| num_units target_column problem_type	count=1
function_arg	[function_1] logits ||| [function_1] _sentinel labels [arg_2]	count=5
function_arg	load boston [arg_2] ||| [function_1] [arg_2]	count=1
arg	[arg_1] from_proto ||| [arg_1] to_proto [arg_2]	count=1
class	the run ||| run	count=1
function	[function_1] [function_2] ||| [function_2] conjugates known scale [function_1]	count=3
function	for #4296 ||| grid2lstmcell with rnnand dynamic batch size	count=1
module	[module_1] the original ||| [module_2] [module_1] batch normalization test tf	count=1
function	define kernel size which ||| kernel size	count=1
function	fuzz factor used ||| epsilon	count=1
class	queue ||| queue	count=4
function	returns the name ||| name	count=3
arg	given feature_columns ||| feature_columns name	count=1
function	in train [function_2] ||| [function_2] [function_1]	count=2
function	predictions is [function_2] ||| [function_2] [function_1]	count=3
class	the file ||| file io	count=2
module	a list of tensor ||| python ops	count=1
function	[function_1] tensor's shape ||| [function_1] [function_2]	count=1
module	a 3d numpy ||| python keras preprocessing	count=1
arg	the frequency-weighted mean and ||| axes frequency_weights name	count=1
function	function that ||| function	count=2
function	distance between the ||| distance	count=2
function	construct ||| init	count=22
module	and set the real ||| ops	count=1
function	the name of an ||| name	count=1
function	string of status ||| status	count=1
arg	[arg_1] times and ||| [arg_2] [arg_1]	count=1
function	model_fn can ||| create model fn ops	count=1
function	[function_1] and ||| python ops quantized distribution [function_1] [function_2] logcdf	count=1
arg	of fetching a tensor ||| name target	count=1
module	vocabulary dictionary and return ||| contrib learn python learn	count=1
function	input tensors ||| inputs	count=1
function	sparse id ||| sparse value	count=1
function	designating a doc ||| doc	count=1
arg	deterministically ||| index_series proportion batch_size	count=1
module	of ||| debug	count=2
class	no rich ||| rich	count=1
function	for a switch ||| switch	count=1
function	prod ||| prod	count=1
function	op to a graph ||| apply op	count=1
arg	by applying [arg_2] ||| [arg_1] [arg_2]	count=2
arg	new_rank ||| new_rank	count=1
function	operation with the given ||| operation by	count=1
class	[class] does not ||| mocking [class]	count=2
class	if the timer ||| step timer	count=1
module	integer tensor ||| keras	count=1
module	outcome (vs 0) ||| python ops	count=1
function	getfile ||| getfile	count=1
arg	meta graph def to ||| export_dir meta_graph_def_to_load	count=1
function	process a [function_2] ||| [function_2] [function_1]	count=3
module	constructor ||| cli	count=1
function_arg	and [arg_2] ||| [function_1] name lists [arg_2]	count=1
class	we don't ||| test upgrade files	count=1
function_arg	reads the [arg_2] ||| [function_1] file to string [arg_2]	count=3
arg	respect to the labels ||| labels weights	count=1
function	the tfdbg ||| get tfdbg	count=1
class	of the op (e ||| operation	count=1
function_arg	normalizes [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	bidirectional recurrent [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	before processing [arg_2] ||| [function_1] [arg_2]	count=1
arg	labeledtensor ||| labeled_tensor existing_axes new_axes name	count=1
function	while loop that ||| while	count=1
function	[function_1] string ||| [function_1] [function_2]	count=9
module	a transform that ||| learn python learn dataframe transforms	count=1
function	worker ||| worker	count=1
function	the sum ||| sum	count=4
module	tensorshape object[s] ||| seq2seq	count=1
function	converts a list ||| to	count=1
function	dimension in ||| dimension tensor	count=1
arg	[arg_1] node name ||| [arg_1] [arg_2]	count=2
function	as input [function_2] ||| [function_1] [function_2]	count=1
module	the axes of ||| python ops	count=1
module_class	multivariate [class_2] ||| [module_1] [class_2]	count=12
function	defines a ||| define	count=2
class	learn a vocabulary ||| vocabulary	count=1
arg	[arg_1] is ready ||| [arg_1] [arg_2]	count=1
function	[function_1] external ||| [function_1] [function_2]	count=1
function_arg	initializes the [arg_2] ||| [arg_2] [function_1]	count=4
function	main ||| request main	count=1
module	embeddings ||| layers python layers	count=1
function	fake bias feature ||| bias	count=1
arg	a tensor ||| op dtype name as_ref	count=1
module_class	[module_1] handler ||| [module_1] [class_2]	count=1
function	a menuitem from the ||| item	count=1
module	a rnn ||| contrib rnn python	count=1
function	of the example ||| example	count=1
function	options to ||| handle options	count=1
arg	of many ||| tuples	count=1
arg	elements across dimensions ||| input_tensor axis keep_dims name	count=7
module	inner ||| kernel_methods python mappers	count=1
module	[module_1] vocabulary based ||| [module_1] [module_2]	count=4
function	a directory recursively walks ||| directory	count=1
function	[function_1] metricspec ||| [function_2] [function_1]	count=2
class	an ||| interactive	count=1
function_arg	[function_1] a variable ||| [arg_2] [function_1]	count=1
module	of finalize internal ||| python	count=1
module	an interactivesession ||| client	count=1
function	infer the ||| infer	count=1
class	with ||| op test	count=1
arg	replaced tensors ||| target_ts replacement_ts dst_scope src_scope	count=1
arg	weights ||| weights metrics_collections	count=5
function	in the ||| in	count=2
function	enter are calculated using ||| enter grad	count=1
module	the model loading them ||| factorization python	count=1
function	for serving ||| default serving input	count=1
arg	an epoch ||| epoch	count=2
function	mix [function_2] ||| [function_2] [function_1]	count=4
module	of dimensions ||| contrib distributions python ops	count=4
module	for determining the current ||| contrib keras python keras	count=1
class	called ||| session run hook	count=2
module	implementaton of ||| python	count=1
arg	to runoptions ||| run_options node_name	count=1
module	a ||| python debug cli	count=2
function	] ||| expectation importance sampler	count=2
arg	in-place the graph to ||| graph	count=1
function	a header for ||| header from ops	count=1
function	true iff the ||| is constant	count=2
function	restricted ||| joint weighted sum from feature	count=1
arg	oldpath to newpath ||| oldpath newpath	count=1
arg	stddev loc ||| loc	count=1
function	the summary ||| summary op	count=1
class	rpc stack for tests ||| grpc server test	count=1
module_class	[module_1] normalization and ||| [module_1] layer [class_2]	count=1
module	get all ||| contrib	count=1
function_arg	[function_1] image ||| [function_1] [arg_2]	count=3
class	for node-status ||| node stepper	count=1
function	a sequence of ||| texts	count=1
module	of the dataframe and ||| learn dataframe	count=1
arg	and a target ||| target decorator_func	count=1
module	from a ||| python learn estimators	count=1
function	create an instance of ||| create profiler	count=1
module	sequence of ||| python ops	count=2
function_arg	collects the [arg_2] ||| [function_1] shape [arg_2]	count=1
class	create ||| record reader	count=1
function	concatenation has no collisions ||| hashed output v2 has no collision	count=1
class	[class_1] outputs ||| [class_1] [class_2]	count=2
function	an existing model ||| model	count=1
function	[function] variable e ||| get [function]	count=1
function	[function_1] scope ||| [function_2] [function_1]	count=10
function	loss for multi value ||| value loss	count=1
class	operator is positive definite ||| operator pddiag	count=1
function	slices ||| slices	count=1
function	of the names in ||| names	count=1
function_arg	[function_1] [arg_2] implements ||| [function_1] [arg_2]	count=1
arg	mode is invalid ||| mode	count=1
function	types into acceptable ||| type	count=1
class	create a ||| robin strategy	count=1
class	normal distribution on r^k ||| normal diag plus	count=1
function	set [function_2] ||| [function_2] [function_1]	count=6
module	of beams ||| contrib seq2seq python ops	count=1
arg	an ||| cell_type num_units target_column	count=1
module	matrix data ||| learn python learn	count=1
function	csv file [function_2] ||| [function_2] [function_1]	count=4
arg	next_inputs_fn ||| time outputs state sample_ids	count=1
function	a tag sequence ||| sequence	count=1
function	returns a dictionary from ||| as dict	count=1
function	[150 1] ||| multi class matrix data labels1d	count=2
arg	target tensor ||| target from_logits	count=1
arg	name should be excluded ||| name	count=1
function	the condition based ||| scalar condition	count=1
function	name for the graph ||| name	count=1
arg	the vocabulary ||| x	count=1
function	create a subgraph ||| init	count=1
class	called ||| hook	count=1
arg	a specified min ||| clip_value_min clip_value_max name	count=1
function	if ||| type	count=1
arg	entire tensor ||| level noise_shape	count=1
function	a hparamdef ||| proto	count=1
arg	that propagates x gradients ||| x y	count=1
function_arg	lookup table [arg_2] ||| [arg_2] [function_1]	count=2
class	this transform to the ||| tensor flow transform	count=1
function_arg	error [arg_2] ||| [function_1] [arg_2]	count=13
arg	if op was marked ||| op func	count=1
arg	input_tensors) from a ||| attr attr_name	count=1
function	timestamp in [function_2] ||| [function_2] event [function_1]	count=1
function	as_iterable=true ||| as iterable	count=4
function	the file [function_2] ||| [function_2] [function_1]	count=3
function	sure ||| test	count=1
class	scale ||| operator pd	count=1
arg	functional interface to the ||| inputs axis	count=1
function	current meta graph ||| meta graph	count=2
arg	an exponential distribution ||| minval maxval seed dtype	count=1
function	whether a tensor is ||| is	count=2
function	statistics ||| stat	count=1
module	with training ||| contrib learn python learn estimators	count=1
function	[function] metadata ||| [function] run	count=1
module	gradient of ||| contrib tensor_forest hybrid python ops	count=3
function	d > 0 elementwise ||| update positive	count=1
function	replace the ||| replace	count=1
class	stack is empty ||| default graph stack	count=1
arg	between the labels ||| labels weights metrics_collections	count=2
module	get a ||| cli	count=1
module	instantiates ||| keras	count=1
function	given [function_1] [function_2] ||| [function_2] [function_1] x	count=2
module	finish computation of ||| distributions python ops	count=1
class	learn the vocabulary dictionary ||| categorical	count=1
function	merge ||| merge	count=7
arg	initialize the parameters ||| input_size use_peepholes	count=1
function	export that ||| export version	count=4
function	input ||| make input	count=1
class	[class_1] area element ||| [class_2] [class_1]	count=6
module	graphdef ||| framework	count=1
arg	from [arg_2] ||| [arg_2] [arg_1]	count=10
class	a local ||| local	count=1
module	of dimensions ||| python ops	count=4
function	[function_1] edges related ||| [function_2] [function_1]	count=4
arg	ids in sampled_candidates ||| sampled_candidates	count=1
function	returns a header ||| get header from ops and	count=1
function	min or max ||| min or max	count=3
function	gets or ||| get	count=1
module	of a 1 ||| ops	count=4
class	process ||| flow code upgrader	count=1
function_arg	create an [arg_2] ||| [arg_2] [function_1]	count=6
function	variable ||| var	count=2
function	values and ||| values	count=1
function	and conv2d ||| compare fwd conv2d	count=1
function	_guideref ||| index	count=1
function	provided have invalid type ||| test invalid number of	count=1
module	for node-status labels ||| python debug cli	count=1
arg	meta file ||| export_meta_filename	count=1
module	the length [module_2] ||| [module_2] [module_1]	count=1
function	that ||| version	count=2
module	session and runs ||| contrib learn python learn dataframe	count=1
class	a dict with data ||| data	count=2
class	rmsprop [class_2] ||| [class_2] [class_1]	count=1
arg	tensor "t" ||| grads t	count=1
function	determine the predicted ||| predict classes	count=2
module	for proper shape ||| distributions	count=1
function	a time string ||| readable time str	count=2
function	a serving_input_receiver_fn ||| serving input receiver	count=2
function	of latest [function_2] ||| [function_1] [function_2]	count=2
module	the cell with the ||| contrib rnn python ops	count=1
function	name ||| by name	count=1
function	a list of ||| list	count=4
class	[class_1] to disk ||| [class_2] [class_1]	count=2
function	returns true tensor ||| is	count=1
class	in the dump ||| dump	count=1
arg	[arg] fp16 arrays ||| a b [arg]	count=3
arg	based on [arg] but using ||| [arg]	count=1
module	3d numpy ||| python keras preprocessing	count=1
function	the lists [function_2] ||| [function_2] [function_1]	count=6
module	dtype based ||| python	count=1
module	based on ||| framework	count=1
function	attribute (e g ||| attribute at index	count=1
module	"tensor_proto" has the ||| python	count=1
function	based on a list ||| on	count=1
class	of dnn weights ||| dnnlinear combined classifier	count=1
function	calling reload ||| test reload	count=1
function	variables according to ||| variables	count=1
arg	labels and ||| labels dim weights	count=1
module	which properly compares two ||| distributions python	count=1
arg	the given index ||| index tensor dtype	count=2
function	trace ||| trace	count=2
module	session and ||| learn	count=1
module	[module_1] the original ||| [module_2] [module_1] reshape	count=1
class	proximal gradient [class_2] ||| [class_2] [class_1]	count=2
class	a tensorshape ||| shape	count=1
function	[function_1] int32 ||| [function_1] [function_2]	count=4
arg	many tensor variables ||| tuples	count=1
function	the variables ||| convert variables	count=1
function	for a merge ||| merge grad	count=1
module	that wraps a ||| contrib learn python learn	count=1
class	name of the ||| slices	count=1
arg	a hdf5 file ||| filepath overwrite include_optimizer	count=1
function	read and process ||| process	count=1
function	return the function ||| function	count=1
module	and ||| learn dataframe	count=2
arg	functional interface for transposed ||| inputs filters kernel_size strides	count=1
function	w/ [function] w/o ||| test variables with [function] without	count=1
module	from a batch of ||| seq2seq python ops	count=1
module	event to [module] trace ||| [module]	count=2
function	to observations ||| to observations map	count=2
function	to vector [function_2] ||| [function_1] [function_2]	count=4
function	sprite image ||| sprite image	count=1
function	add the ||| add back prop	count=1
class	the eventfilewriter ||| file writer	count=1
module	of a ||| ops distributions	count=6
function	beams into a batch ||| batch	count=2
function	op for training for ||| training op	count=2
function	[function_1] positives for ||| [function_2] [function_1]	count=12
function_arg	the recall [arg_2] ||| [function_1] [arg_2]	count=3
module	dimensional version of ||| learn ops	count=1
function	[function_1] is tensor ||| [function_1] [function_2]	count=1
class	sdcalinearregressor works with a ||| sdcalinear regressor	count=1
function	[function_1] we use ||| [function_2] [function_1]	count=4
arg	of the losses ||| losses num_present	count=1
function	trigger [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] minimum ||| [function_2] [function_1]	count=1
function	[function_1] loop ||| [function_1] [function_2]	count=12
function	[function_1] batch dimension ||| [function_1] [function_2]	count=1
module	returns an ||| learn python learn	count=1
class	metrics ||| class head	count=1
module	on this ||| framework	count=1
module	initialization of ||| python debug	count=1
module	of name to ||| contrib	count=1
function	a tf placeholder for ||| make placeholder from tensor	count=1
function	calculates false ||| false	count=1
module	the ||| docs	count=1
function	whether a ||| is	count=2
class	interactive ||| interactive	count=1
function	summary file ||| summary	count=2
function	[function_1] from ||| [function_2] [function_1]	count=56
module	from a rank-2 ||| solvers python	count=1
function_arg	<= 0 [arg_2] ||| [arg_2] [function_1]	count=1
arg	in xs ||| xs name	count=1
class	registry ||| plugin asset	count=1
function	a mix ||| mixed	count=4
module	staging ||| python ops	count=1
class	tests ||| label2d recall at ktest	count=1
module	tensor or list of ||| contrib rnn python ops	count=1
arg	replacement node for input_node ||| input_node	count=1
function	of the output ||| output	count=1
class	the name ||| indexed slices	count=1
module	a given ||| contrib learn python learn utils	count=1
function_arg	at [arg_2] ||| [function_1] [arg_2]	count=1
function	an exit op are ||| exit grad	count=1
module	text ||| contrib	count=1
function	[function_1] files ||| [function_2] [function_1]	count=1
class	generator ||| generator	count=1
function	of the previous node ||| collect previous	count=1
function_arg	noise from [arg_2] ||| [function_1] to gradients [arg_2]	count=1
arg	of top-k predictions ||| top_k_predictions	count=1
module	all ops created by ||| python ops	count=1
function	intro for ||| intro	count=1
function	returns the control ||| control	count=1
class	nearest clusters ||| gmm	count=1
arg	the spec ||| spec	count=1
arg	to token ||| token	count=1
function	all ||| check	count=1
module	distribution s ||| contrib distributions python ops	count=1
function	computes distance between each ||| distance	count=1
function	the coordinator ||| coord	count=1
function	mahalanobis distance [function_2] ||| [function_2] [function_1]	count=2
function	a tf placeholder for ||| make placeholder	count=2
function	for a rank rfft ||| rfft	count=1
function_arg	[function_1] given predictions ||| [arg_2] [function_1]	count=2
function	stepper ||| stepper	count=1
function_arg	[function_1] node ||| [function_1] [arg_2]	count=7
arg	a scrollable text ||| is_refresh highlight_regex	count=1
function	monitoredsession for ||| monitored	count=1
function	_onehotcolumn for a one-hot ||| one hot	count=1
module	using matrix data as ||| learn estimators	count=2
function	reshape specific axes ||| reshape	count=1
module	as the ||| python learn estimators	count=3
function	a biasadd node with ||| bias add node	count=1
module	for valid command ||| python debug cli	count=1
arg	executed during ||| run_context	count=2
function	returns the product ||| mul	count=1
module	asserts ||| learn estimators	count=1
function	of fetches and ||| fetch and name	count=2
function	valid ||| valid	count=3
function	mini batch ||| mini batch	count=1
function	rank in ||| rank	count=2
module	objects ||| contrib learn python learn estimators	count=1
module_class	[module_1] a layer ||| [module_1] [class_2]	count=22
function	[function_1] for converting ||| [function_2] [function_1]	count=4
function	vgg16 ||| vgg16	count=1
class	[class_1] tensorflow ||| [class_2] [class_1]	count=2
function	initializer to assign ||| checkpoint initializer	count=1
function	first operation ||| first op	count=2
function_arg	returns metagraphdef [arg_2] ||| [function_1] filename [arg_2]	count=2
module	the event file to ||| summary	count=1
function	the signaturedef ||| meta graph def	count=1
module	vocabulary ||| preprocessing	count=2
function	the first ||| t0	count=1
arg	apply conv + ||| x filters num_row	count=1
module	the cli see ||| debug cli	count=2
module	and return ||| contrib learn	count=1
function	time interval to ||| time interval	count=2
function	context in ||| attr context	count=1
function	[function_1] predictions ||| [function_2] [function_1]	count=2
function	a ||| texts to sequences	count=1
class	the dense tensor ||| sparse tensor	count=2
function_arg	[function_1] metadata ||| [arg_2] [function_1]	count=1
function	result ||| result	count=1
function	retrieves the input shape ||| get input shape	count=1
function	sprite ||| sprite	count=1
arg	defines ||| weight_decay batch_norm_decay batch_norm_epsilon	count=1
function_arg	resnet-101 model [arg_2] ||| [function_1] [arg_2]	count=1
function	rotation of a ||| rotation	count=1
arg	tensors ||| step tensors feed_dict	count=1
arg	element-wise ||| x	count=5
module	returns an ||| layers	count=1
arg	blocks ||| blocks output_stride scope	count=1
function	inputs for ||| seq2seq inputs	count=1
function	context ||| context	count=7
function	ops that match the ||| from regex	count=1
arg	for the input samples ||| x batch_size verbose	count=3
function_arg	inference on [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] probably a ||| [function_2] [function_1]	count=3
function_arg	checkpoint file is ||| checkpoint checkpoint_dir	count=1
arg	a dnnlinearcombinedregressor ||| weight_column_name linear_feature_columns linear_optimizer	count=1
class	construct ||| table with hash buckets	count=1
function_arg	predictions for [arg_2] ||| [arg_2] [function_1]	count=4
function	exports ||| exports	count=1
function	version ||| maybe	count=1
function	[function_1] of bytes ||| [function_2] readable [function_1]	count=1
class	in the watcher ||| directory watcher test	count=1
function	allowed using client feed ||| with tensor feed keys	count=1
module	sense of vector ||| linalg	count=3
class	sum ||| dimension	count=1
function	the kind ||| get kind	count=1
function	the learning [function_2] ||| [function_1] [function_2]	count=1
function_arg	edge from [arg_2] ||| [function_1] m [arg_2]	count=2
function	to the specified height ||| to	count=1
function	tf examples to extract ||| feature columns from examples	count=1
arg	important bits ||| original encoded	count=1
arg	x ||| x	count=48
function	trainable variables ||| trainable variables	count=3
module	provided in ||| python	count=1
function	and flops ||| logged ops	count=1
function	outputs [function_2] ||| [function_1] [function_2]	count=2
module	for valid command prefix ||| python debug cli	count=1
arg	prints the names ||| print_info	count=1
function	to predictions ||| predictions	count=1
class	table outputs ||| mutable hash table	count=1
function	an op for training ||| op	count=2
module	ismethod ||| python util	count=1
module	datasets ||| learn datasets	count=1
module	of string ||| plugins text	count=1
function	that labels [function_2] ||| [function_2] [function_1]	count=8
function	_get_sparse_tensors() [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] [function_2] dictionary ||| [function_1] [function_2] input_exprs_str	count=3
function	ops to save the ||| save ops	count=2
arg	precision@k of ||| k	count=1
module	all layer ||| keras engine	count=2
module	part ||| python keras	count=1
function	variables to ||| get variables to	count=2
module	a keras ||| keras python keras utils	count=1
function	new ||| replace	count=1
module	specific axes of ||| ops	count=1
class	sure we ||| files	count=1
module_class	docstring [class_2] ||| [module_1] [class_2]	count=2
function	and runoptions [function_2] ||| [function_2] call dump path [function_1]	count=1
function	flatten list ||| flatten	count=1
function	accumulator for ||| accumulator	count=1
function_arg	plugin asset [arg_2] ||| [arg_2] [function_1]	count=2
arg	if value_or_tensor_or_var has a ||| value_or_tensor_or_var dtype	count=1
module	of 1 ||| distributions	count=1
arg	to x in xs ||| xs name colocate_gradients_with_ops	count=1
class	operator ||| operator	count=13
class	lstm cell ||| input forget gate lstmcell	count=1
class	in the history ||| curses navigation history	count=1
class	solve ||| linear operator	count=1
arg	tf feature keys to ||| keys	count=1
function	a layer based ||| layer	count=1
function	sparse ||| deprecated flipped sparse	count=1
function	in current run ||| get	count=1
function	update ops ||| update	count=1
arg	with [arg_2] ||| [arg_2] [arg_1]	count=3
function_arg	outputs of sgv0 ||| outputs sgv0	count=2
function_arg	[function_1] the labels ||| [arg_2] [function_1]	count=26
arg	axis in ||| axis	count=1
function_arg	[function_1] provided 'op_log', ||| [arg_2] [function_1]	count=1
arg	indexies ||| x	count=1
module	proper shape values then ||| python ops distributions	count=1
function	with hash_signs=true ||| with sign hash	count=2
function	transforms ||| sequences	count=1
function	by the given ||| norms	count=1
module_class	a new adam ||| python training adam	count=1
function	by tag number ||| tag order	count=2
class	with the common config ||| parser config	count=1
function_arg	[function_1] inputs ||| [function_1] [arg_2]	count=3
arg	given devicespec or device ||| device	count=1
function	specificity at a given ||| specificity at	count=1
function	initializer to assign op ||| checkpoint initializer	count=1
function	sampling table ||| sampling table	count=2
function	context to colocate ||| maybe colocate	count=1
function	regex search commands are ||| regex search from	count=1
function	[function_1] [function_2] cdf together ||| python ops quantized distribution [function_1] [function_2] logcdf	count=1
module	sequence of integers ||| keras python keras	count=1
function	results for gamma ||| gamma	count=1
arg	pred ||| pred dtype name	count=1
module	given set of ||| framework python ops	count=1
function	external module ||| external	count=1
arg	from tensors ||| tensors capacity	count=1
class	a quantized distribution representing ||| quantized distribution	count=1
class	loop ||| loop	count=1
function	into a batch ||| batch	count=2
module	the given list ||| python	count=1
function	signaturedef ||| meta graph def	count=1
function	to ||| string to hash	count=1
class	which values ||| slices	count=1
class	data ||| data generator	count=2
arg	_embeddingcolumn ||| dimension combiner	count=1
function	proper shape ||| valid sample	count=1
class	that contains ||| indexed slices	count=1
function	a uniform ||| uniform	count=1
function	timestamp of the first ||| t0	count=1
function	along column of a ||| along cols	count=2
arg	sp_input to sparsetensor ||| sp_input	count=1
function	correction and update values ||| correction and moments	count=1
function	convert it into html ||| to html	count=1
function	csv [function_2] ||| [function_1] [function_2]	count=4
function	ratio ||| ratio	count=4
arg	time ||| new_global_step name	count=1
arg	3 or 4 arguments ||| features labels mode	count=1
function	weights of the ||| get weights	count=1
function	the values [function_2] ||| [function_2] [function_1]	count=5
function	around ||| df with divisions	count=1
function	cosine ||| mean cosine	count=2
module	function for ||| python framework	count=3
function	the log ||| log	count=1
function	[function_1] converting ||| [function_2] [function_1]	count=4
function	fractional [function_2] ||| [function_2] [function_1]	count=3
function	shapes of parameters ||| shapes	count=1
class	debug tensor dumping ||| session debug test	count=1
function_arg	[function_1] rank ||| [arg_2] [function_1]	count=5
function	exception if self is ||| assert has	count=1
module	a non-reference dtype based ||| python	count=1
function	gather the ||| gather	count=1
function	a bidirectional recurrent ||| bidirectional rnn	count=2
function_arg	processor of [arg_2] ||| [arg_2] [function_1]	count=1
arg	by applying [arg_2] ||| [arg_2] [arg_1]	count=2
function	dictionary of names ||| dict	count=1
arg	tensors to a ||| tensor_names tensors	count=1
class	tests ||| operator pdsqrt vdvtupdate test	count=1
function	ops that match ||| regex	count=1
module	[module] set ||| [module]	count=1
arg	and wait for them ||| timeout	count=1
function_arg	[function_1] sp_input to ||| [arg_2] [function_1]	count=1
class	op that [class_2] ||| [class_2] [class_1]	count=1
module	list of tensors corresponding ||| ops	count=4
module	distributed floating point ||| contrib specs python	count=1
arg	by calling experiment_fn and ||| experiment_fn	count=1
module	x + ||| python ops	count=1
function	the column [function_2] ||| [function_2] sparse [function_1]	count=1
class	value should [class_2] ||| [class_1] [class_2]	count=1
function	new control ||| control	count=1
module	eval ||| learn python learn	count=1
function	generates output predictions for ||| predict	count=2
function_arg	[function_1] given slicing ||| [function_1] shape [arg_2]	count=1
arg	stochastictensor ||| dist_value_type loss_fn	count=1
function	control outputs ||| control outputs	count=2
function	indices in ||| indices	count=2
module	single ||| learn python learn estimators	count=1
arg	that cpu and ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
function	with zero dimensions ||| zeros	count=1
function	lr [function_2] ||| [function_1] [function_2]	count=2
arg	the image ||| image	count=1
class	sparse [class_2] ||| [class_1] [class_2]	count=3
function	product between ||| product	count=1
function	show array indices ||| show array index at	count=1
module_class	[module_1] barrier ||| [module_1] [class_2]	count=8
function_arg	keys of [arg_2] ||| [arg_2] [function_1]	count=3
arg	cells in ||| conf cells c_prev	count=1
arg	to match predictions ||| predictions	count=1
function	rnn model ||| dynamic rnn model	count=1
module	model ||| contrib cudnn_rnn python ops	count=1
function	tf ||| feature columns from	count=1
arg	using a filtering function ||| filterfn	count=1
function	apply boolean ||| boolean	count=1
module	learn the vocabulary dictionary ||| python	count=1
class	indexies of ||| categorical	count=1
function	multiplies the values in ||| prod	count=1
class	with no rich attributes ||| rich	count=1
function	embedding lr [function_2] ||| [function_1] [function_2]	count=2
module_class	in [module_1] [class_2] ||| [module_1] tensor [class_2] scatter indices value name	count=1
class	normal distribution ||| normal diag	count=1
arg	of lb [arg] if ||| [arg]	count=1
class	column ||| len column	count=1
module	mnist dataset ||| contrib keras python keras datasets	count=1
arg	a feature_spec ||| cls filepatterns feature_spec	count=1
function	variables in a graph ||| variables	count=1
function	head is [function] ||| head is [function]	count=2
function	values then return ||| sample	count=1
function	model_fn that returns modelfnops ||| with model fn	count=1
arg	by normalizing with ||| predictions labels normalizer weights	count=1
module	provided ||| kernel_methods	count=1
function	into predict step ||| predict data	count=1
module	sessionrunhook raises typeerror otherwise ||| python estimator	count=1
function	from a ||| from	count=18
function_arg	a call node ||| call node	count=1
module	[module] float type ||| [module]	count=2
arg	sgv0 to the ||| sgv0	count=1
function	as linear_model_fn but ||| model fn ops	count=2
arg	[arg_1] tensors ||| [arg_2] [arg_1]	count=6
function	_get_dense_tensor() for ||| get dense tensor one	count=1
function	in the sparsetensordensematmul ||| mat mul grad	count=1
function	using parameter hashing for ||| scattered	count=1
arg	feature_spec ||| cls filepatterns feature_spec	count=1
function	dict for ||| dict	count=1
class	table ||| lookup table	count=1
arg	side_effects ||| side_effects	count=3
function	return tensor ||| assert valid sample	count=1
function	dump path ||| dump path	count=2
arg	graph from graph_def ||| graph_def	count=1
arg	boston housing ||| seed test_split	count=1
function	checks ||| check	count=2
module_class	of a conditional ||| python ops cond	count=2
module	savedmodel pbtxt file containing ||| contrib saved_model python saved_model	count=1
module	multi ||| contrib learn python learn estimators	count=3
class	into the tensorarray ||| array	count=1
function	slot named ||| get slot	count=1
module	we can do a ||| contrib layers python layers	count=1
function	[function_1] paths from ||| [function_1] [function_2]	count=3
function	asserts ||| asserts	count=2
function	vocabulary ||| fit transform	count=2
function	class probability ||| proba	count=2
function_arg	[function_1] [arg_2] ||| [function_1] [arg_2] erase_existing	count=3
module	resnet ||| contrib slim python slim nets	count=1
function	and parameters for ||| optimize	count=1
module	number of ||| python ops distributions	count=2
function	wrap ||| wrap	count=1
module	values will be ||| python	count=1
module	the same as 'values' ||| contrib metrics	count=1
class	[class_1] area element ||| [class_1] [class_2]	count=6
function	[function_1] debug ||| [function_2] [function_1]	count=6
function	of evaluation metric ||| eval metric	count=2
function	dict for caching ||| dict	count=1
function	batch normalization on ||| batch normalization	count=1
function	the noise-contrastive estimation ||| nce	count=1
function_arg	[function_1] sequences ||| [function_1] matrix [arg_2]	count=1
function	[function_1] value for ||| [function_1] [function_2]	count=4
function	the default image ||| image	count=1
function	a shallow ||| shallow	count=1
function	[function_1] partitioned ||| [function_2] [function_1]	count=8
module	models that use a ||| python learn estimators	count=1
module	stored ||| tools api lib	count=2
function	root directory containing ||| root dir with	count=2
module	list of ||| python ops losses	count=1
function	that avoids duplicate lookups ||| unique	count=1
module	cross-entropy loss ||| python ops losses	count=1
arg	for transposed ||| filters kernel_size strides	count=1
module	typeerror otherwise ||| python estimator	count=1
class	shape is ||| tensor shape	count=1
function	compute predictions by ||| predictions	count=1
function_arg	[function_1] full epoch ||| [arg_2] [function_1]	count=2
function	the manual [function_2] ||| [function_1] [function_2]	count=3
arg	make sure the ||| config wait_for_checkpoint	count=1
function	to a ||| apply	count=1
arg	activations from ||| activations	count=3
function	assert that an ||| assert compatible	count=2
function	and ||| and	count=29
function_arg	[function_1] to save_path/filename ||| [function_1] [arg_2]	count=2
module	of unique items ||| contrib labeled_tensor python ops	count=1
function	all the variables in ||| variables to	count=1
arg	example protos ||| file_pattern batch_size	count=2
class	of the dilation ||| dilation	count=1
function	that ||| filter ts	count=1
module_class	[module_1] processor from ||| [module_1] vocabulary [class_2]	count=1
function	[function_1] of input ||| [function_2] [function_1]	count=1
function	with run time shape ||| missing graph shape	count=1
arg	a subgraph view ||| sgv	count=2
function	from csv ||| csv	count=2
module	2d ||| python keras	count=1
function_arg	stochastic tensors ||| stochastic nodes tensors	count=1
function	modelfnops that a model_fn ||| model fn	count=1
function_arg	maximum of [arg_2] ||| [function_1] [arg_2]	count=2
module	using ||| python learn	count=3
function	values of the given ||| values	count=1
arg	parameters ||| num_units input_size use_peepholes cell_clip	count=1
arg	wrapper and a target ||| target decorator_func decorator_name decorator_doc	count=1
function_arg	[function_1] failuretolerator ||| [arg_2] [function_1]	count=1
function	calls [function_2] ||| [function_2] [function_1]	count=5
arg	for threads [arg_2] ||| [arg_2] [arg_1]	count=1
function	a dynamic ||| dynamic rnn	count=1
function	asserts whether [function_2] ||| [function_2] [function_1]	count=1
class	[class_1] event file ||| [class_2] [class_1]	count=2
function	global default if the ||| default	count=1
function	rank must ||| rank	count=1
arg	the parameters ||| use_peepholes share_time_frequency_weights cell_clip	count=1
function	[function_1] histograms ||| [function_2] [function_1]	count=4
function	have non-broadcastable shapes ||| check for broadcastable batch shape	count=1
function	creates binary synthetic ||| make dataset	count=1
arg	a session, and ||| master saver checkpoint_dir checkpoint_filename_with_path	count=1
function_arg	to [arg_2] ||| [function_1] [arg_2]	count=2
function	the parsing config of ||| config	count=1
class	a worker [class_2] ||| [class_2] [class_1]	count=2
function	all the data ||| all resources	count=1
function	[function_1] dump ||| [function_2] [function_1]	count=1
function	step update for linear-only ||| step linear only	count=1
function	string_to_hash_bucket op to use ||| to hash bucket	count=1
function	shape of the ||| output shape	count=1
module	that with ||| learn python learn	count=1
function	bias names haven't ||| bias names	count=2
module	the execution ||| python	count=1
function	various recall ||| streaming recall at	count=1
function	of training ||| on train	count=1
class	new partitioned [class_2] ||| [class_1] [class_2]	count=2
class	navigation bar ||| curses navigation history	count=1
function	and return indexies ||| fit transform	count=1
function_arg	[function_1] fixedlengthrecordreader ||| [function_1] [arg_2]	count=1
class	basic lstm cell ||| layer norm basic lstmcell	count=1
class	of this variable ||| variable	count=1
arg	batch-ready form ||| min_rank event_ndims	count=1
function	raises typeerror ||| type	count=1
function	loss for a sequence ||| sequence loss	count=1
class	tensor ||| multinomial	count=1
function_arg	[function_1] capturevariable monitor ||| [arg_2] [function_1]	count=1
function	function to parse ||| parse tensor or dict	count=1
arg	provided ||| feed_fn	count=1
function_arg	created from [arg_2] ||| [function_1] [arg_2]	count=1
function	random initializer within ||| initializer	count=1
function	the sqss for ||| for	count=1
class	as a dense tensor ||| sparse feature column	count=2
function_arg	[function_1] symbol ||| [function_1] master name [arg_2]	count=2
module	menuitem from the ||| python	count=1
function	allowed using client feed ||| feed	count=1
module	export ||| learn utils	count=1
arg	[arg] values into ||| [arg] sp_values vocab_size	count=1
arg	linearoperatorscaledidentity ||| num_rows multiplier is_non_singular is_self_adjoint	count=1
module	dataframe into two ||| learn python learn dataframe	count=1
function	the ready ||| ready	count=1
function	assert the ||| assert	count=7
class	check ||| linear operator identity	count=2
function	page and ||| page	count=1
function	model's input ||| input	count=1
function	for the walsfactorization ||| wals factorization	count=1
arg	[arg_1] idtablewithhashbuckets object ||| [arg_2] [arg_1]	count=2
module	core version with ||| contrib learn python learn	count=1
function_arg	parsing tf [arg_2] ||| [function_1] [arg_2]	count=1
class	place [class] if possible ||| [class]	count=1
function_arg	variable [arg_2] ||| [function_1] [arg_2]	count=8
function_arg	[function_1] rnncell ||| [arg_2] [function_1]	count=4
module	learn the ||| learn	count=2
function	[function_1] connected layer ||| [function_2] [function_1]	count=4
function	from tensor [function_2] ||| [function_1] [function_2]	count=1
module	given ||| learn preprocessing	count=1
function	loads a ||| load op	count=1
module	distribution s ||| distributions python ops	count=1
function	the ||| ops	count=1
arg	the gradients for ||| grad	count=1
module	a cross-entropy loss ||| python ops losses	count=1
function	functions for ||| functions	count=1
function	start the standard ||| start standard	count=3
function	added to ||| add to	count=1
function_arg	an exception [arg_2] ||| [function_1] same rank [arg_2]	count=1
function	the vocabulary dictionary and ||| fit transform	count=1
arg	computes precision@k of the ||| k class_id	count=1
function	pool ||| pool	count=5
class	a queue element ||| queue base	count=2
function	asserts ||| assert	count=2
function	list of valid task ||| task	count=1
function	the weight tensor ||| weight tensor	count=6
arg	recording a ||| name iters cpu_time wall_time	count=1
class	the cell ||| rnncell	count=1
module	then return tensor ||| python	count=1
arg	fetching a tensor ||| name target size	count=1
function	linear_model_fn but ||| fn with model fn ops	count=2
class	tensor into ||| tensor	count=1
function	code ||| dense cwise mul or div grad	count=1
function	19-layers version e ||| 19	count=1
module	transforms ||| keras preprocessing	count=2
module	clips ||| contrib training python training	count=1
module	from ||| python ops	count=1
module	check to make sure ||| tools	count=1
function	dictionary of tensors ||| tensors	count=1
function	returns the integer ||| get integer	count=2
function	a histogram ||| histogram	count=2
module	specified by the ||| slim python slim	count=1
function	no emitted ||| sees updated values	count=1
class	full names to a ||| doc generator visitor	count=1
function	menu for ||| menu	count=1
function	initializer ||| seed	count=1
function	a tf placeholder ||| make placeholder from dtype and	count=1
function	and [function_2] ||| [function_2] [function_1]	count=30
function	embedding lookup to ||| deep embedding lookup	count=1
function	a tensor ||| to labels tensor	count=1
arg	the list of side_effects ||| side_effects	count=1
function	the string_to_hash_bucket op to ||| get string to hash bucket	count=1
module	list of ||| distributions python ops	count=2
module	returns ||| python ops	count=2
function	[function_1] should be ||| [function_2] [function_1]	count=2
function	as a [function_2] ||| [function_2] [function_1]	count=1
function	store sparsetensors for ||| store sparse	count=1
function	bias feature [function_2] ||| [function_1] [function_2]	count=3
function	the xception ||| xception	count=1
function_arg	node [arg_2] ||| [function_1] [arg_2]	count=1
function	integer weights ||| integer weighted sparse column succeeds for dnn	count=1
module	of [module_2] ||| [module_2] [module_1]	count=57
module	into the ||| python ops	count=1
function	strided slice ||| strided slice	count=2
class	[class_1] tensor ||| [class_2] [class_1]	count=9
function	docstring ||| md docstring	count=1
function	score function estimator ||| get score function	count=2
function	a matmul ||| matmul	count=1
module	otherwise ||| estimator	count=1
module	of dimensions and ||| ops	count=1
function	def from a dictionary ||| from	count=1
module	all files ||| backend event_processing	count=1
function_arg	inputs of [arg_2] ||| [arg_2] [function_1]	count=7
function	[function] 'x' appropriate ||| [function]	count=1
function	runoptions for [function_2] ||| [function_2] [function_1]	count=1
function_arg	print a [arg_2] ||| [function_1] spec [arg_2]	count=2
arg	transposed 3d convolution ||| inputs filters kernel_size strides	count=1
class	this variable ||| variable	count=2
module	return all ||| tensorboard backend event_processing	count=2
arg	prior on ||| prior scale s	count=1
module	estimate of [module_2] ||| [module_2] [module_1]	count=1
module	function that ||| framework	count=1
function	for multi class single ||| multi class	count=2
function_arg	adds a [arg_2] ||| [function_1] column [arg_2]	count=1
function	rnn [function_2] ||| [function_1] [function_2]	count=5
function	values from a ||| from	count=1
arg	of co-existance ||| x y input_fn feed_fn	count=1
class	menuitem ||| menu	count=1
function_arg	log [arg_2] ||| [arg_2] [function_1]	count=3
function	[function_1] size of ||| [function_2] [function_1]	count=1
arg	parse example protos ||| file_pattern batch_size features reader	count=1
function	process which ||| pid	count=1
function	out of input ||| from input	count=1
module	get the names ||| python debug lib	count=1
arg	weights ||| weights per_batch	count=2
function	hook ||| make session run hook	count=1
function	before each call ||| before	count=1
class	normal ||| normal	count=6
function	to use ||| to hash bucket fn	count=1
function	count of each ||| count	count=1
function	extract command [function_2] ||| [function_2] [function_1]	count=3
class	produces values as ||| indexed slices	count=1
module	bottleneck network ||| slim nets	count=1
module	of tensors ||| contrib distributions python ops	count=2
function	tensor as input layer ||| input layer	count=1
function	creates a new ||| new attr	count=1
function	save [function_2] ||| [function_1] [function_2]	count=3
function	unused nodes ||| unused	count=2
function	[function_1] have no ||| [function_2] [function_1]	count=1
function	a placeholder ||| replace t with placeholder	count=1
arg	tf learn ||| pandas_dataframe num_threads enqueue_size	count=1
class	[class_1] area object ||| [class_1] [class_2]	count=1
function	model_fn that ||| with model fn	count=1
arg	sparsetensor ||| sp_input	count=1
module	vocabulary dictionary ||| python learn	count=1
function	runs from a ||| add runs from	count=2
function_arg	matmul [arg_2] ||| [function_1] [arg_2]	count=1
arg	for make_linear_model ||| builder units weight_collections	count=1
module	colocate_clip_ops_with_vars ||| opt python training	count=2
function	global step [function_2] ||| [function_2] [function_1]	count=6
module	tensors linked to ||| contrib graph_editor	count=1
function	an example [function_2] ||| [function_1] [function_2]	count=1
function	tensor from ||| tensor from	count=2
function	[function_1] common ||| [function_2] [function_1]	count=2
class	sequence ||| tokenizer	count=1
arg	an output [arg_2] ||| [arg_2] [arg_1]	count=1
module	[module] anchor ||| [module]	count=3
class	registered [class_2] ||| [class_2] [class_1]	count=6
class	dump (event) file ||| debug tensor datum	count=1
function	false positives ||| streaming sparse false positive	count=1
arg	for a given run ||| run	count=1
arg	symbols ||| ids vocab_size embed_dim unique	count=1
function	reduce an ||| reduce to	count=1
module	pooling ||| python kernel_tests	count=5
function	tf [function] ||| [function]	count=3
arg	tensorflow subgraph ||| x y class_weight init_mean	count=1
function	to run() call history ||| run	count=1
function	does not [function] data ||| test [function]	count=1
class	the value should be ||| value type	count=1
arg	and body to the ||| body	count=1
arg	cursesui based ||| ui_type on_ui_exit	count=2
module_class	new adam ||| python training adam	count=1
module	training and ||| learn ops	count=1
function	ui ||| ui	count=1
module	sequence-to-sequence model ||| contrib legacy_seq2seq python ops	count=1
function	[function_1] tag number ||| [function_2] [function_1]	count=2
function	a dictionary of names ||| dict	count=1
module	defines ||| python platform	count=2
function	returns list ||| list	count=1
class	cell ||| cell	count=4
class	token for ||| registry	count=1
module	an interactivesession ||| python client	count=1
arg	x in xs ||| xs	count=1
class	create ||| meta data	count=1
function	classification using matrix ||| classification	count=1
function	max pool ops ||| max pool shapes	count=2
class	the common config for ||| parser config	count=1
module	where the ||| python	count=1
arg	x if reduction_indices is ||| x axis reduction_indices	count=1
class	transform to the ||| tensor flow transform	count=1
function	the maximum of ||| max	count=1
function	with ||| with	count=44
class	[class_1] debug op ||| [class_2] tensor [class_1]	count=1
arg	tensor ||| tensor paddings mode name	count=1
arg	the tf feature keys ||| keys	count=1
function	pack ||| pack	count=2
function	return ||| build guide index	count=1
function	deconv layer based ||| get deconv	count=1
function	labels ||| at top k	count=3
function	sure we don't have ||| test	count=1
module	to this ||| framework	count=1
class	a table outputs ||| interface	count=1
function	boots 3 servers ensures ||| spec propagation three servers one	count=1
function	[function_1] trigger for ||| [function_2] [function_1]	count=1
module	and return indexies ||| contrib	count=1
function	_guideref from the ||| guide	count=1
function	observations dict ||| observations map	count=1
function	the mean [function_2] ||| [function_2] [function_1]	count=8
function	or max amazingly ||| or max	count=2
module	evaluates ||| specs python	count=1
class	asset ||| asset	count=1
module	get ||| debug cli	count=6
function_arg	[function_1] subgraph view ||| [arg_2] [function_1]	count=1
arg	elems ||| elems initializer	count=5
function	list of all ancestor ||| gather	count=1
function	state for all ||| control flow state	count=1
function	convert ||| convert to	count=1
module	event file to disk ||| summary	count=1
arg	given mean ||| mean	count=1
module	of name ||| contrib framework python ops	count=1
class	tests ||| ops test	count=1
function_arg	[function_1] of op ||| [function_1] [arg_2]	count=1
arg	possibly filtered by name ||| name_filter	count=1
function	kernels have no ||| kernels no	count=3
function	operations from metric value ||| extract metric	count=2
class	op with the given ||| operation	count=1
function	[function_1] column ||| [function_1] int [function_2]	count=4
function	[function] factor ||| [function]	count=2
class	cluster ||| cluster spec	count=2
class	an event ||| event transformer	count=1
class	in the monitored session ||| monitored session	count=1
class	fetch mapper that handles ||| fetch mapper	count=1
arg	the labels and ||| labels dim	count=1
module	returns the ||| contrib layers python	count=2
arg	and the "passthrough" ||| inside_ops passthrough_ts	count=1
class	internal saver state ||| saver	count=1
arg	initialize an operatorpdfull ||| matrix verify_pd name	count=1
function_arg	inputs of sgv0 ||| inputs sgv0	count=4
function_arg	[function_1] [arg_2] an int list ||| [function_1] [arg_2]	count=4
function	[function_1] collisions ||| [function_1] [function_2]	count=5
class	make sure we ||| test upgrade	count=1
function	and loss ||| check loss and target	count=1
function	asserts that [function_2] ||| [function_1] [function_2]	count=3
function	kernels have [function_2] ||| [function_1] [function_2]	count=3
function	proper ||| maybe assert	count=1
function	conversion functions ||| conversion functions	count=2
function	for variable-length ||| real valued var len	count=1
function_arg	and parameters [arg_2] ||| [arg_2] [function_1]	count=1
class	by this operator ||| operator scaled	count=1
function	labels into ||| labels	count=1
function	create and run a ||| create and run	count=1
function	tuple of slices ||| slices	count=1
arg	or device ||| device	count=1
function	[function_1] multipliers ||| [function_2] [function_1]	count=3
module	an ndarray with the ||| python	count=1
function	to the specified file ||| to	count=1
arg	between shape_x and shape_y ||| shape_x shape_y	count=2
function	of ||| load	count=1
function	the maximum ||| max	count=1
function	step of a ||| step	count=1
class	file ||| tfrecord writer	count=2
arg	that match ||| ops	count=1
function	is ||| is	count=11
class	where event ||| writer	count=1
class	the name ||| indexed	count=1
module	will be produced or ||| framework	count=1
class	and return indexies of ||| categorical processor	count=1
arg	censusdatasource ||| data_dir train_data_url test_data_url columns	count=1
function	an exception if ||| assert has	count=1
function	queue [function_2] ||| [function_1] [function_2]	count=2
function	cumulative sum of ||| cumsum	count=1
class	pooling function ||| pooling	count=5
module	of an rgb ||| python ops	count=1
class	process ||| dump dir	count=1
function	from csv ||| from csv with feature spec	count=1
arg	a failuretolerator ||| limit init_delay backoff_factor forgive_after_seconds	count=1
function	series ||| series	count=1
arg	check the path name ||| path	count=1
class	a scalar deterministic ||| deterministic	count=1
function	inputs of the ||| inputs tensor info from meta	count=1
function	proper shape values then ||| assert valid sample	count=1
function	[function_1] dependencies ||| [function_1] [function_2]	count=5
function	all inputs ||| inputs tensor info	count=1
arg	noise ||| noise	count=1
module	and stopping ||| python slim	count=1
module	constructor of ||| python debug	count=1
arg	that were given that ||| given_name scope	count=1
module	all the nodes ||| graph_editor	count=1
arg	thumbnails ||| thumbnails thumbnail_dim	count=1
function	resize and mirror ||| resize and	count=1
function	of running an op ||| op	count=1
module	then return ||| ops	count=1
function	creates a [function_2] ||| [function_2] [function_1]	count=1
function	from the ||| caption	count=1
module	get the ||| lib	count=1
module	number of dimensions corresponding ||| python ops	count=2
function	file [function_2] ||| [function_2] [function_1]	count=14
class	[class_1] normal distribution ||| [class_1] [class_2]	count=2
class	this [class_2] ||| [class_1] [class_2]	count=3
function	process ||| process	count=5
function	step false positives ||| streaming sparse false positive at k	count=1
function	of completion items to ||| items	count=1
arg	subgraph ||| sgv	count=2
function_arg	details section as ||| details function_details	count=1
arg	of the data feeder ||| x_shape y_shape n_classes	count=1
function	variables in ||| convert variables to	count=1
function	node-status labels ||| node status	count=1
class	} references ||| resolver	count=1
function	[function_1] mean ||| [function_1] [function_2]	count=7
function	saver from savers ||| saver	count=1
function	and loss ||| loss and target	count=1
module	of each row ||| ops	count=1
arg	distances ||| batch_size steps	count=1
module	a dict of ||| python ops	count=1
function	[function_1] size which ||| [function_2] [function_1]	count=2
function	the approximate auc via ||| auc	count=2
module	value of ||| keras python keras	count=1
function	build a graph containing ||| build graph	count=1
function	to their defs ||| create nodes map	count=1
function_arg	[function_1] node in ||| [function_1] [arg_2]	count=3
module	the vocabulary dictionary ||| learn	count=2
function	mean of the ||| mean	count=1
function	a tf [function_2] ||| [function_1] [function_2]	count=8
module	for a labeled tensor ||| contrib labeled_tensor python ops	count=1
module	transform [module_2] ||| [module_2] [module_1]	count=3
function_arg	axis order [arg_2] ||| [arg_2] [function_1]	count=1
function	returns tensorflow data ||| to data	count=1
function	the tensorshape ||| shape	count=1
module	of underlying vector ||| ops	count=1
function_arg	embedding [arg_2] ||| [function_1] lookup sparse [arg_2]	count=3
arg	[arg] pass ||| [arg]	count=1
class	cross transformation ||| crossed column	count=1
arg	from ||| expected_tensor	count=1
function	objects from signatures ||| convert signatures	count=1
class	return tensor ||| multinomial	count=1
arg	computes precision@k ||| k class_id	count=1
arg	rate ||| rate validate_args allow_nan_stats	count=1
module	loss ||| losses	count=5
function_arg	abstract method [function_1] [arg_2] ||| [function_1] [arg_2]	count=8
arg	many tensor ||| tuples	count=1
arg	of tensor ||| tensor np_printoptions	count=1
function	a single example proto ||| parse single example	count=1
class	the debug tensor ||| session debug test	count=1
module	adds ||| linear_optimizer python	count=1
class	given [class_2] ||| [class_1] [class_2]	count=2
class	get a menuitem from ||| menu	count=1
function	integer classes and no ||| build standardized signature def classification6	count=1
function	loss for multi ||| loss	count=1
module	dtype based ||| python framework	count=1
class	with ||| ops test	count=1
function_arg	maximum [arg_2] ||| [function_1] [arg_2]	count=1
class	the tensor ||| tensor	count=3
arg	[arg_1] terminate ||| [arg_1] [arg_2]	count=3
class	this ||| update weights hook	count=2
function	per step false positives ||| false positive	count=1
function_arg	pack op ||| pack grad op	count=1
function	with other columns present ||| and other columns	count=1
function_arg	[function_1] an epoch ||| [arg_2] [function_1]	count=2
function	a dict for caching ||| dict	count=1
arg	all the ||| ops	count=1
function	_guideref from ||| build guide index	count=1
module	compute ||| contrib distributions python kernel_tests	count=1
module	returns predictions for ||| layers python layers	count=1
arg	finds the ||| checkpoint_dir latest_filename	count=1
function	[function_1] a restart ||| [function_2] [function_1]	count=2
function	the proto_type ||| collection proto	count=1
function	compute set operation of ||| set operation	count=1
function	the kernel ||| kernel	count=1
arg	entries in x to ||| x	count=1
function	for single [function_2] ||| [function_1] [function_2]	count=2
function	name ||| build guide	count=1
class	greedyembeddinghelper ||| greedy embedding helper	count=3
class	graph ||| graph rewriter	count=2
arg	ndarray ||| cls numpy_array	count=1
arg	tensorinfo ||| meta_graph_def signature_def_key	count=1
module	and runs a ||| contrib learn python learn	count=1
function	finite ||| finite	count=2
class	debugtensordatum from the directory ||| dir	count=1
class	table outputs ||| lookup table	count=1
arg	recall@k [arg_2] ||| [arg_2] [arg_1]	count=14
function	placeholder for the graph ||| placeholder from dtype	count=1
function	[function_1] using numpy ||| [function_2] [function_1]	count=1
arg	[arg_1] [arg_2] ||| [arg_2] labels [arg_1]	count=27
function	precision@k of predictions ||| k	count=1
class	a new partitioned variable ||| partitioned variable	count=1
arg	command handler for ||| args screen_info	count=4
arg	looperthread that calls ||| timer_interval_secs target args kwargs	count=1
module	systems of ||| contrib linalg python ops	count=1
function	dict ||| guide index	count=1
function_arg	[function_1] in model_dir ||| [function_1] [arg_2]	count=3
function	[function_1] and mirror ||| python tools fuse [function_1] [function_2]	count=1
function	[function_1] bounding box ||| [function_2] [function_1]	count=1
function	to capture ||| test capture	count=1
function	a model_fn for linear ||| linear model fn	count=1
function	to use based ||| string to	count=1
arg	between logits and labels ||| labels logits name	count=1
arg	the compatiblity of ||| loss_fns output_shapes	count=1
function	[function_1] spec for ||| [function_1] [function_2]	count=3
function	defines the mahalanobis ||| define	count=1
module	and feed ||| python learn	count=1
function	softmax cross entropy ||| softmax cross entropy with logits	count=1
module_class	[module_1] processor ||| [module_1] [class_2]	count=1
function	initializer that [function_2] ||| [function_2] [function_1]	count=4
class	run the enqueue ||| queue runner	count=1
class	partition graphs ||| dump dir	count=1
function	op to use based ||| get string to hash bucket	count=1
module	building doesn't ||| hybrid	count=1
function	that ||| filter ts from regex	count=2
class	the image ||| image	count=1
arg	4d tensor ||| data_format	count=1
function	multiple batched tensors execute ||| multiple batch	count=1
function	gets or [function_2] ||| [function_2] [function_1]	count=5
arg	of sgv1 ||| sgv1 disconnect_first	count=1
arg	given value to a ||| value dtype name	count=2
function	[0 n_classes) range ||| at k5 some out of range	count=2
module	'values' ||| metrics python ops	count=2
module	starting and stopping ||| contrib slim python slim	count=1
module	evaluating ||| contrib tensor_forest	count=1
module	integers ||| keras	count=2
function	or return index of ||| index	count=1
class	of a pooling function ||| pooling test	count=1
function_arg	[function_1] to variabledef ||| [arg_2] [function_1]	count=1
function	by a node name ||| node	count=1
function_arg	[function_1] op if ||| [function_1] [arg_2]	count=2
function	batches the ||| batch	count=1
class	full names ||| generator visitor	count=1
class	export ||| export	count=1
function	[function_1] [function_2] ||| [function_1] step [function_2]	count=8
class	construct multivariate normal distribution ||| multivariate normal linear operator	count=1
function_arg	[function_1] linearoperatorudvhupdate ||| [arg_2] [function_1]	count=1
function	from protocol buffer ||| from proto	count=4
function	transforms each text ||| texts	count=1
function	edge from ||| edge	count=1
arg	the given values ||| values weights	count=1
module	indexies ||| contrib	count=1
arg	a new ||| name	count=1
function	output a scalar value ||| scalar	count=1
function	and conv2d produce ||| compare fwd conv2d	count=1
module	a sequence of ||| ops	count=2
function	to sparse tensor ||| to sparse	count=4
arg	x ||| x data summarize	count=1
function_arg	summary [arg_2] ||| [function_1] [arg_2]	count=2
arg	x ||| x message name	count=1
function	type of ||| type	count=2
arg	all elements ||| dtype name	count=2
arg	smaller ||| shrink	count=1
function	with sparse features and ||| sdca optimizer sparse features with	count=1
function_arg	[function_1] metric ||| [arg_2] [function_1]	count=3
module	imagenet model's ||| python keras applications	count=1
arg	also suitable for comparing ||| rtol	count=1
function	left to ||| left	count=2
module	learn the vocabulary dictionary ||| python learn	count=1
function	returns the offset when ||| single offset	count=1
class	returns ||| walsmatrix factorization	count=1
arg	for different thresholds on ||| thresholds weights	count=2
function	to restore [function_2] ||| [function_2] [function_1]	count=1
function	pred ||| smart select	count=1
function	of predictions with respect ||| precision at	count=3
module	value ||| python keras	count=1
function	all the ||| filter ts from regex	count=1
function_arg	shape function for ||| shape unused_op	count=1
class	values then ||| multinomial	count=1
function	with respect to ||| precision at k	count=2
function	align the axes ||| align	count=1
module	the eventfilewriter ||| writer	count=1
arg	dtype and ||| dtype	count=1
function	input ||| input exprs	count=1
function	for parsing tf ||| for parsing	count=2
arg	x to different ||| x	count=1
function	the step at ||| step	count=1
class	that ||| kmeans test	count=1
module	create a ||| python training	count=1
module	and variance of ||| ops	count=1
function	min or ||| min or	count=2
arg	tensors to ||| tensors name	count=1
function	to stop ||| stop	count=2
function	[function_1] input to ||| [function_2] [function_1]	count=8
arg	and values ||| values	count=1
function	makes this object the ||| as	count=1
function	ops that match ||| from	count=1
function	apply a boolean ||| boolean	count=1
module	of dimensions corresponding ||| distributions python ops	count=2
function	real valued features ||| real valued features perfectly separable	count=1
function	a hook ||| session run hook	count=1
function	name -> _guideref from ||| guide	count=1
class	with ||| replicas optimizer hook test	count=1
arg	for the event generator ||| generator query_for_tag	count=1
module	helper which ||| ops distributions	count=1
function	when input ||| input	count=1
class	takes one float ||| graph rewriter	count=1
function	richtextlines ||| rich text lines from	count=1
function_arg	[function_1] logits and ||| [arg_2] [function_1]	count=3
module	this cell output dimension ||| contrib rnn python	count=1
function	file to [function_2] ||| [function_1] [function_2]	count=1
class	values ||| multinomial	count=1
module	* ||| ops	count=3
arg	between logits and ||| logits name	count=1
arg	and fetches ||| fetches	count=3
function_arg	[function_1] particular step ||| [function_1] [arg_2]	count=1
module	of ||| contrib distributions	count=1
arg	state saving sequence ||| cell features	count=1
function	tensor data ||| tensor data	count=4
class	sparsemax ||| sparsemax	count=1
module	as the last ||| python learn estimators	count=3
function	flip matrix [function_2] ||| [function_1] [function_2]	count=10
class	multiple output tensors ||| output	count=1
module	a tensor ||| keras	count=4
function	to predictions [function_2] ||| [function_2] value [function_1]	count=1
function	a single epoch ||| run one epoch	count=1
function	[function_1] to strings ||| [function_2] [function_1]	count=2
function	a sequence of integers ||| to sequences	count=1
function_arg	serving [arg_2] ||| [arg_2] [function_1]	count=1
module	return the correct container ||| graph_editor	count=1
function	percentage ||| percentage	count=1
function	collection with the ||| collection ref	count=1
function	debug_urls value for the ||| urls	count=1
function	after a [function_2] ||| [function_2] [function_1]	count=3
function	node def ||| node	count=1
arg	oldpath to ||| oldpath	count=1
function	cdf against scipy ||| cdf	count=1
function_arg	predictions [arg_2] ||| [function_1] [arg_2]	count=3
module	replace ||| contrib labeled_tensor python ops	count=1
arg	and the "passthrough" tensors ||| inside_ops passthrough_ts	count=1
function	the vocabulary dictionary and ||| fit	count=1
function	ops that match the ||| filter ts from	count=1
function	state for all the ||| state	count=1
function	a tensor )) ||| reduce logsumexp	count=1
function	to restore variables ||| sharded restore ops	count=1
arg	an ||| num_units target_column	count=1
function	operations to minimize ||| minimize	count=1
function	cycling works correctly ||| cycling	count=1
function	behavior when feed_previous is ||| with boolean feed previous	count=1
function	node-status ||| node status label	count=1
class	make ||| test upgrade files	count=2
class	get ||| node	count=1
function	seconds of the first ||| first	count=1
module	[module_1] all ||| [module_1] [module_2]	count=2
function	computes the minimum ||| reduce min	count=1
function	signature to object of ||| signature to signature def	count=1
module	of operators within ||| contrib	count=1
module	of images ||| python ops	count=1
module	models that use a ||| learn estimators	count=1
function	linear_model_fn but returns ||| with model fn	count=2
class	that ||| session test	count=1
function	specified invalid ||| invalid	count=1
function	that accepts a state ||| state	count=1
function	single value ||| single value	count=1
function	weighted sum ||| weighted sum	count=4
function	probability ||| probs	count=6
function	gets gradient for ||| get grad	count=1
function	the keys in ||| keys	count=1
function	rnn ||| get dynamic rnn	count=1
arg	along dimension dim ||| x dim epsilon name	count=1
module	specified ||| slim python slim	count=1
arg	tensors to ||| tensor_names tensors tensor_slices	count=1
module	and runs ||| contrib learn python learn	count=1
module	create ||| tools gcs_test python	count=1
function	[function_1] external control ||| [function_2] [function_1]	count=1
class	if the timer ||| or step timer	count=1
module	adds ||| layers python layers	count=1
module	a sequence of ||| keras	count=2
class	to ||| test upgrade files	count=2
function	[function_1] values of ||| [function_1] variable [function_2]	count=1
module	returns an ||| layers python layers	count=1
arg	convenience function which chooses ||| pred cond_true cond_false	count=1
class	of ||| categorical	count=1
arg	with parameter rate ||| rate validate_args allow_nan_stats	count=1
module	the mnist dataset ||| datasets	count=1
function_arg	menu [arg_2] ||| [arg_2] [function_1]	count=5
class	single ||| summary to event transformer	count=1
function	the mean of ||| mean	count=1
module	systems of linear eqns ||| python ops	count=1
function	step update [function_2] ||| [function_1] [function_2]	count=8
module	constructor ||| python debug wrappers	count=2
module	dictionary ||| python learn preprocessing	count=2
function	state of this ||| state	count=1
module	we can do ||| layers python layers	count=1
function	pad ||| to output pad	count=1
arg	transposed 3d convolution ||| filters kernel_size strides	count=1
class	this operator ||| linear operator	count=9
arg	cells ||| cells	count=1
function	when the column ||| column	count=1
function	return the coordinator ||| coord	count=1
function	true tensor ||| is	count=1
module	get ||| python debug lib	count=4
function	in current ||| get	count=1
function	current device function stack ||| device functions	count=1
function	of the range of ||| range	count=2
arg	message ||| message	count=3
module	computes output ||| contrib keras python keras engine	count=1
function	state flattening/reconstruction works ||| multi rnnstate	count=1
function_arg	[function_1] by ||| [arg_2] [function_1]	count=4
class	this context ||| context	count=1
function	this device ||| device	count=1
arg	replacement ||| m n k a	count=1
arg	applying [arg_2] ||| [arg_2] [arg_1]	count=2
module	a mapping of ||| contrib framework python ops	count=1
function	dimension ||| dimension	count=4
function	processor of ||| processor	count=1
function	calculates true positives for ||| true positive at k	count=1
function	is an override ||| hints allowing override	count=2
module	multivariate ||| python ops	count=3
function	for multi value ||| multi value	count=4
function	simple print function ||| tf print	count=1
class	mixture s ||| mixture	count=1
function	path and [function_2] ||| [function_1] [function_2]	count=2
module	writes ||| contrib learn python learn estimators	count=1
function	the underlying node name ||| node name	count=2
function	tensorshape of variable ||| variable shape	count=3
module	from a command ||| python debug cli	count=1
function	device [function_2] ||| [function_1] [function_2]	count=1
function	remove any external control ||| remove external control	count=1
module	list of keras ||| python keras	count=1
function	metric names to ||| metric	count=1
module	distributed floating point number ||| specs python	count=1
module	sure ||| compatibility	count=1
class	python ||| reference resolver	count=1
function	[function_1] root ||| [function_2] [function_1]	count=3
function	indices ||| index	count=5
module	distributed floating ||| contrib specs	count=1
function	and add it to ||| add	count=1
function	regression signature [function_2] ||| [function_1] [function_2]	count=2
function	[function_1] rotation ||| [function_2] [function_1]	count=2
function	return dict symbol ||| index	count=1
function	rank ||| tensor rank	count=3
module	a tensor with ||| keras	count=1
class	name ||| slices	count=1
arg	to implement interactive ||| node_stepper restore_variable_values_on_exit	count=1
module	get a str ||| python debug lib	count=1
function	[function_1] batch dimensions ||| [function_2] [function_1]	count=4
arg	co-existance of ||| x y input_fn feed_fn	count=1
function	return index of ||| finalize index	count=1
function	[function_1] static number ||| [function_1] [function_2]	count=1
function_arg	entropy [arg_2] ||| [function_1] with logits [arg_2]	count=1
class	a chrome ||| timeline	count=1
function	version ||| sample	count=1
arg	by [arg_2] ||| [arg_1] [arg_2]	count=1
function_arg	write [arg_2] ||| [function_1] index [arg_2]	count=1
function	are sessionrunhook raises typeerror ||| type	count=1
arg	the parameters for ||| input_size use_peepholes cell_clip	count=1
arg	[arg_1] holds element-wise ||| [arg_1] [arg_2]	count=4
function	a single example proto ||| single example	count=1
function	command [function] ||| [function]	count=2
function_arg	unary [arg_2] ||| [function_1] [arg_2]	count=2
function	applies batch [function_2] ||| [function_1] [function_2]	count=2
class	d in vdv^t ||| pdsqrt vdvtupdate	count=1
module	distribution ||| distributions python ops	count=3
arg	observedstochastictensor ||| dist value	count=1
function	when input [function_2] ||| [function_2] [function_1]	count=6
function_arg	values of [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] operators ||| [function_2] [function_1]	count=1
function	the broadcasted [function_2] ||| [function_2] [function_1]	count=4
function	and tests the results ||| test	count=1
function	of the fetches ||| fetches	count=1
arg	a fixedlengthrecordreader ||| record_bytes header_bytes footer_bytes hop_bytes	count=1
function	[function_1] used in ||| [function_1] [function_2]	count=4
arg	their norms ||| t_list clip_norm use_norm	count=1
arg	in input best ||| inputs	count=1
function	node from ||| node	count=1
module	the cli ||| cli	count=2
function	column of ||| cols	count=2
module	graph building doesn't ||| contrib tensor_forest hybrid	count=1
class	sample, batch, event ||| distribution shape	count=1
module	generic ||| learn utils	count=1
arg	[arg_1] starting from ||| [arg_2] [arg_1]	count=4
arg	given sensitivity ||| predictions labels sensitivity weights	count=1
function	file in ||| file	count=1
class	forest ||| forest	count=4
class	entire ||| pdbase	count=1
function_arg	converts [arg_2] ||| [function_1] dense [arg_2]	count=2
module	1 outcome (vs 0) ||| python ops	count=1
function	to run() ||| run	count=3
module	tf ||| contrib graph_editor	count=3
module	dataset of only ||| contrib learn python learn datasets	count=1
module	manual ||| keras python keras	count=1
class	generator into the queue ||| generator	count=1
module	reduce ||| ndlstm python	count=1
module	the proto_type for ||| python	count=1
arg	wrapper and a target ||| target decorator_func	count=1
module	of a single ||| ops distributions	count=2
function_arg	[function_1] input samples ||| [function_1] [arg_2]	count=5
function	[function_1] precision@k of ||| [function_2] [function_1]	count=2
module	pbtxt file containing ||| python saved_model	count=1
function	header for ||| header from ops	count=1
function	containing all the data ||| with all resources	count=1
module	cli see the ||| debug cli	count=2
function	an op node ||| op	count=1
function_arg	move dims [arg_2] ||| [function_1] to flat end [arg_2]	count=1
arg	the given key ||| key	count=1
class	chrome ||| chrome	count=2
function	with real valued features ||| real valued features perfectly separable	count=1
function	[function] if ||| check [function]	count=1
function	function for ||| to proto function	count=1
function	infer ||| infer state	count=1
arg	tensor to ||| name	count=1
module	of ||| learn preprocessing	count=2
module_class	of the [class_2] ||| [module_1] tensor [class_2]	count=1
module	keras ||| python keras utils	count=1
arg	in y_np ||| y_np	count=1
function	freedom in ||| df	count=2
function	invalid type ||| test invalid	count=2
function	a dynamic ||| dynamic	count=2
function	dict ||| dict to	count=2
function	rnn model function ||| dynamic rnn model fn	count=1
module	shape representing a ||| python	count=1
function	the state names ||| state names	count=2
class	the eventfilewriter ||| writer	count=1
arg	loc [arg_2] ||| [arg_1] [arg_2]	count=1
function	linear_model_fn but ||| linear model fn with model fn	count=2
module	cli see the doc ||| cli	count=2
arg	op is the ||| op	count=1
arg	in parent ||| parent	count=1
function	to a tensor ||| to tensor	count=1
function	to save the ||| save	count=3
function	richtextlines object ||| text lines from rich line	count=1
arg	as values ||| values	count=1
function	a summary of ||| summary	count=2
class	[class_1] file ||| [class_2] [class_1]	count=2
function	to ops that ||| regex	count=1
arg	by applying layer ||| inputs layer	count=2
function	a switch ||| switch grad	count=1
function	[function_1] connected ||| [function_1] [function_2]	count=4
arg	subscribes a [arg_2] ||| [arg_2] side_effects [arg_1]	count=6
module	tensor s of a ||| keras python keras engine	count=6
function_arg	[function_1] [arg_2] ||| [function_1] or dict [arg_2]	count=3
arg	append sharding information to ||| filename_tensor shard num_shards	count=1
arg	cells ||| conf cells c_prev	count=1
function	the slice ||| slice	count=1
function_arg	[function_1] pure-decoding option ||| [arg_2] [function_1]	count=4
arg	given examples and ||| examples unused_features	count=4
function_arg	to use [arg_2] ||| [arg_2] [function_1]	count=2
class	total number ||| crossed column	count=1
function	message ||| message	count=2
class	the enqueue op ||| runner	count=1
class	dense ||| sparse	count=2
function	and match [function_2] ||| [function_1] [function_2]	count=1
class	an lstm cell ||| grid lstmcell	count=1
module	axes of two ||| contrib labeled_tensor python ops	count=1
arg	tensors to a ||| tensor_names tensors tensor_slices	count=1
arg	inputs ||| inputs	count=23
function	nodes that aren't ||| training nodes	count=1
function	dictionary of parameters used ||| parameters	count=1
function	[function_1] menu ||| [function_2] [function_1]	count=5
module	a list of tensors ||| contrib framework python ops	count=1
function	[function_1] [function_2] ||| [function_1] batch [function_2]	count=6
arg	input and each cluster ||| cls inputs clusters	count=1
function	invalidate the ||| invalidate	count=1
function_arg	[function_1] term to ||| [arg_2] [function_1]	count=4
function	the end ||| batch end	count=1
function_arg	values in ||| values var_names_to_values checkpoint_dir	count=1
class	with ||| stub out for testing	count=1
class	flow ||| flow	count=2
arg	new [arg_2] ||| [arg_2] [arg_1]	count=2
class	to [class_2] ||| [class_2] [class_1]	count=4
module	vocabulary dictionary ||| learn	count=2
function	applicable to strings ||| string	count=1
module	shape of [module_2] ||| [module_1] [module_2]	count=1
arg	[arg_1] in tensors ||| [arg_2] [arg_1]	count=2
function	finished ||| every	count=1
arg	of the image ||| image color	count=1
arg	prior on the mean ||| prior scale s n	count=1
module	of ||| keras preprocessing	count=2
function	graph for ||| inference graph	count=1
function	while [function_2] ||| [function_2] [function_1]	count=3
module	that wraps ||| learn python learn	count=1
arg	of tensors into ||| tensors	count=1
arg	copies data from oldpath ||| oldpath	count=1
arg	lower triangular ||| diag tril event_ndims	count=1
function	necessary ||| or	count=1
function_arg	structure of [arg_2] ||| [function_1] shallow_tree [arg_2]	count=1
class	check ||| mask test	count=1
function	a random [function_2] ||| [function_2] [function_1]	count=9
function_arg	boundary of a ||| boundary ts ops	count=1
function	true ||| streaming sparse true	count=1
function	verifies that [function_2] ||| [function_2] finite gradient [function_1]	count=1
function	target for ||| target	count=1
module	iterable of string ||| tensorboard plugins text	count=2
function	into summary file in ||| summary	count=1
function	[function_1] params used ||| [function_1] [function_2]	count=5
function_arg	edge from v ||| edge m v	count=1
function	[function_1] mask ||| [function_1] [function_2]	count=12
module	with integer ||| learn	count=1
function_arg	[function_1] ts0 ||| [function_1] [arg_2]	count=1
module	tensor [module_2] ||| [module_1] [module_2]	count=36
function	prepares a feature spec ||| sequence feature spec	count=1
function	on this ||| base	count=1
module	returns a ||| learn	count=1
function	sparse and dense inputs ||| sparse input	count=1
arg	in given output ||| output_dir dictionary current_global_step	count=1
arg	sequence to sequence ||| encoder_cell decoder_cell	count=1
arg	labels ||| labels dim name	count=1
function	returns the log ||| log	count=1
module	same as ||| learn python learn estimators	count=3
module	operation ||| python framework	count=1
class	to perform ||| composable model	count=1
module	vocabulary dictionary and return ||| preprocessing	count=1
class	and its outer context ||| cond context	count=1
arg	row and ||| cls rows cols num_shards	count=1
module	previous output ||| grid_rnn python ops	count=1
module	the name of ||| python framework	count=1
arg	cells in ||| cells	count=1
module	a value into the ||| python ops	count=1
module	and session and ||| contrib learn python learn	count=1
function	a string ||| parse	count=1
function	[function_1] cross entropy ||| [function_2] [function_1]	count=3
function	typeerror ||| hooks	count=1
class	helper function to split ||| walsmodel	count=1
function	s of seven gaussians ||| univariate	count=1
function	a sequence ||| texts to	count=1
function	menuitem ||| caption to	count=1
function_arg	[function_1] keep_input ||| [arg_2] [function_1]	count=4
arg	body to ||| body original_loop_vars	count=1
module	gradients ||| python training	count=1
arg	validity of co-existance of ||| y input_fn feed_fn	count=1
function	doc to ||| doc	count=1
function	discards expired ||| discards expired	count=2
function	first operation from ||| first op from	count=3
arg	[arg_1] beta ||| [arg_1] [arg_2]	count=4
arg	across tensors ||| tensors	count=4
function	merge [function_2] ||| [function_2] [function_1]	count=1
arg	parameters ||| use_peepholes cell_clip	count=1
class	convenience function to test ||| subscribe test	count=1
function	menuitem ||| to item	count=1
function	[function_1] value of ||| [function_1] tensor [function_2]	count=1
arg	a specified min and ||| clip_value_min clip_value_max	count=1
arg	non-audio parts of ||| sample_rate num_channels length_frames	count=1
module_class	[module_1] eventaccumulator ||| [module_1] [class_2]	count=4
function_arg	[function_1] that maps ||| [arg_2] [function_1]	count=3
function	timestamp in seconds ||| timestamp	count=1
function	then ||| valid sample	count=1
module	verifies file_io directory handling ||| tools gcs_test	count=1
module	[module_1] cell with ||| [module_1] [module_2]	count=1
arg	output from a ||| output node_name enable_list_tensors enable_node_info	count=1
module	initialize a batch of ||| python ops distributions	count=3
module	sequence ||| python keras	count=1
function	model function [function_2] ||| [function_2] [function_1]	count=4
function	metagraphdef ||| meta	count=1
function_arg	labels for [arg_2] ||| [function_1] [arg_2]	count=1
class	multivariate normal ||| multivariate normal diag	count=1
module	rejection ||| contrib training python training	count=1
module	unique to this ||| python framework	count=1
function	that makes [function_2] ||| [function_2] [function_1]	count=2
arg	the estimator using export_fn ||| eval_result checkpoint_path	count=1
arg	x = rhs ||| rhs	count=1
function	status [function_2] ||| [function_2] [function_1]	count=3
module_class	[module_1] linearoperator ||| [module_1] [class_2]	count=9
function	list of ||| list of op	count=2
function	appropriate for serving ||| default serving input	count=1
function	to a string ||| to string	count=4
function	[function_1] type ||| [function_2] [function_1]	count=3
function	returns the ||| get init	count=1
module	a function [module_2] ||| [module_1] [module_2]	count=2
module	of beams into a ||| contrib seq2seq python ops	count=1
arg	size of ||| size	count=1
function_arg	[function_1] an image ||| [function_1] left right [arg_2]	count=2
arg	encoder and ||| loop_function	count=1
function	[function_1] [0 n_classes) ||| [function_2] [function_1]	count=4
function	[function_1] backprop loop ||| [function_2] [function_1]	count=1
class	to ||| writer	count=2
function	unsigned ||| unsigned	count=1
function	the most recent savedmodel ||| most recent	count=1
function	accepts a state saver ||| static state	count=1
module	the input ||| cloud python ops	count=1
function	the ready [function_2] ||| [function_1] [function_2]	count=3
function_arg	randomly flip [arg_2] ||| [function_1] left right [arg_2]	count=1
function	softmax cross entropy ||| softmax cross entropy with	count=1
function_arg	[function_1] t ||| [function_1] tensor like [arg_2]	count=1
class	creates ||| exponential moving average	count=1
arg	tensor with all elements ||| tensor dtype	count=1
arg	output ||| output	count=2
function	concatenation has ||| output v2 has	count=1
arg	a stopatstep monitor ||| num_steps last_step	count=1
function	to use ||| get string to	count=1
function	get a string ||| get	count=1
function	specificity at ||| specificity at sensitivity	count=2
function	centered bias ||| centered bias	count=10
function	maintain their moving averages ||| moving average	count=1
arg	tensors ||| tensors name	count=1
function	[function_1] or minimum ||| [function_1] [function_2]	count=1
module_class	this tensor ||| client tensor	count=1
function	performs dropout given ||| variational recurrent dropout	count=1
arg	dimension of ||| name dim	count=1
module	proper shape ||| ops distributions	count=1
arg	in given ||| output_dir dictionary	count=1
function	of this ||| get resource	count=1
module	to __init__ which ||| contrib distributions python ops bijectors	count=1
function	factors ||| factors	count=4
function	runs from ||| runs from	count=1
function	print a ||| spec print	count=1
function_arg	[function_1] op ||| [function_1] enter [arg_2]	count=2
arg	from graph element name ||| element_name	count=1
function	an absolute test ||| test	count=1
module	whether ||| contrib keras python keras	count=1
arg	dimension i will correspond ||| sp_input perm name	count=1
function	a concat node ||| concat node	count=2
function	a link for a ||| link	count=2
function	the weights ||| weights	count=1
class	dictionary and return indexies ||| categorical processor	count=1
function	weighted per step true ||| true	count=1
function	converts ||| convert to	count=1
function	uses the default ||| default	count=1
function	the standard [function_2] ||| [function_1] [function_2]	count=3
arg	4d ||| data_format	count=1
function	tags [function_2] ||| [function_2] [function_1]	count=4
function	values for given sampled_candidates ||| output values with sampled candidates	count=1
module	s of ||| keras python keras engine	count=3
arg	values ||| values weights	count=1
function	embedding and attention and ||| embedding attention	count=1
function	value [function_2] ||| [function_2] [function_1]	count=5
arg	state ||| state	count=3
arg	given in input ||| inputs sequence_length merge_repeated	count=1
function	list of protos ||| get protos	count=1
module_class	this [class_2] ||| [class_2] [module_1]	count=13
module_class	of this op ||| python framework operation	count=2
class	returns a shape based ||| shape	count=1
function	an ||| hints allowing	count=1
function	verifying the ||| test adjust	count=1
class	from ||| flow context	count=1
function	x ||| x	count=1
arg	the boston housing ||| seed test_split	count=1
arg	graph with feeds and ||| feeds	count=1
function	returns up [function_2] ||| [function_2] [function_1]	count=1
function	get the ||| get	count=11
function_arg	[function_1] [arg_2] ||| [function_1] sparse [arg_2]	count=4
module	linked ||| contrib	count=1
function	fuzz factor used in ||| epsilon	count=1
class	stack ||| default graph stack	count=2
arg	the actual ||| actual	count=1
arg	make sure the model ||| wait_for_checkpoint	count=1
function_arg	[function_1] tensorflow ||| [function_1] registered_name operation [arg_2]	count=3
function	given plugin ||| retrieve plugin	count=1
function	returns arguments ||| arguments	count=1
arg	provided run ||| run	count=1
function_arg	[function_1] [arg_2] elbo and kl divergence ||| ops elbo [function_1] [arg_2]	count=1
function	a checkpoint from ||| create checkpoint from	count=2
function	as input ||| input	count=1
class	directory and ||| dump dir	count=1
function	an image into pil ||| img	count=1
function_arg	control dependency [arg_2] ||| [function_1] [arg_2]	count=1
function	containing all the ||| all	count=1
function	adds ||| assign add	count=1
function	the test ||| test	count=1
class	[class_1] gradient descent ||| [class_1] [class_2]	count=1
function	restores [function_2] ||| [function_1] variable [function_2]	count=2
class	which ||| indexed slices	count=1
function	update operations from metric ||| extract metric update	count=2
function	process the given python ||| process	count=1
arg	expression summarizing ||| x include_shapes finished	count=1
function	the complex conjugate ||| conj	count=1
function	a dict of metrics ||| metrics	count=3
function	tensor of [function_2] ||| [function_2] table [function_1]	count=1
function	values in ||| output values	count=2
function	test function ||| test function with args	count=1
arg	inclusion in a metagraphdef ||| receiver_tensors	count=1
function_arg	size histogram [arg_2] ||| [arg_2] [function_1]	count=2
function	names in ||| names	count=1
class	multiple output tensors ||| saved model export utils	count=1
module	sequence ||| layers python layers	count=1
function	ops to save the ||| sharded save ops	count=2
module	[module] overfeat ||| contrib slim [module] slim	count=3
function	large batch size ||| large batch	count=1
arg	tensor whose value represents ||| add_regularization_losses name	count=2
function	if all are sessionrunhook ||| hooks type	count=1
arg	parameter rate ||| rate	count=1
function	the update ||| update	count=1
arg	specified min and max ||| clip_value_min clip_value_max name	count=1
function_arg	[function_1] restore_checkpoint_path ||| [arg_2] [function_1]	count=3
module	the given object ||| python	count=1
function	use for input ||| or dict	count=1
function	device function ||| replica device	count=1
function	variable ||| unique variable	count=1
arg	given mean [arg_2] ||| [arg_1] [arg_2]	count=4
module	generate the set of ||| python ops	count=1
function	returns the noise-contrastive estimation ||| nce	count=1
function	link for ||| link	count=2
arg	logits [arg_2] ||| [arg_2] [arg_1]	count=2
module	if ||| estimator	count=1
function_arg	[function_1] handle syncreplicashook ||| [function_1] [arg_2]	count=3
function_arg	of state [arg_2] ||| [arg_2] [function_1]	count=1
module	we don't ||| tools	count=1
function_arg	[function_1] an ||| [function_1] back prop accumulator [arg_2]	count=1
function	for this ||| def	count=1
function	show array [function_2] ||| [function_2] [function_1]	count=4
module	input ||| rnn python ops	count=1
function	runoptions [function_2] ||| [function_2] dump path and [function_1]	count=1
function	names to their defs ||| nodes map	count=1
function_arg	[function_1] train ||| [function_1] [arg_2]	count=3
module	indexies ||| learn preprocessing	count=2
arg	collects and stores ||| ignore_regex_fpaths	count=1
module	the vocabulary ||| learn preprocessing	count=1
function_arg	output [arg_2] ||| [arg_2] [function_1]	count=3
module	loads ||| contrib util	count=1
module	for node-status ||| cli	count=1
function	the run ||| for run	count=1
function	[function_1] attention ||| [function_2] [function_1]	count=1
module_class	[module_1] variable ||| [module_1] partitioned [class_2]	count=1
arg	input tensors [arg_2] ||| [arg_2] [arg_1]	count=1
arg	of side_effects for ||| side_effects	count=1
class	of a forest ||| forest graphs	count=2
function	atrous convolution ||| atrous	count=3
function	[function_1] is tensor ||| [function_2] [function_1]	count=1
class	creates a resourceexhaustederror ||| resource exhausted error	count=1
function	sorted transitive closure ||| sorted nodes	count=1
function	map from duplicate ||| duplicate	count=1
module	the ||| contrib	count=10
function	files ||| build guide	count=1
class	if a graph element ||| node stepper	count=1
function	with constants ||| to constants	count=1
arg	5d ||| data_format	count=1
module	evaluating a ||| contrib tensor_forest python	count=1
class	registry in a file ||| plugin asset	count=1
function	score function [function_2] ||| [function_1] [function_2]	count=1
arg	a tensor ||| tensor dtype name optimize	count=1
function	adds an absolute ||| absolute	count=1
function	queue batch ||| keyed batch features shared queue	count=1
function	tensor [function_2] ||| [function_1] dense [function_2]	count=1
arg	model over a ||| x y sample_weight	count=1
arg	given value to a ||| value dtype	count=2
module	for labeled tensors ||| contrib labeled_tensor python ops	count=2
arg	list of side_effects ||| side_effects	count=3
module	that creates training and ||| python learn ops	count=1
function	[function_1] fields ||| [function_2] [function_1]	count=2
class	tests ||| multiplexer test	count=1
module	of ||| contrib keras python keras	count=1
arg	tensorflow operation ||| registered_name operation ignore_dtype	count=2
module	sequence-to-sequence model with ||| contrib legacy_seq2seq	count=1
function	dict to ||| dict	count=1
function	the given ||| get	count=1
function	define the tensorflow variables ||| define vars	count=1
function	provided have invalid ||| test invalid	count=2
function	[function_1] determinant ||| [function_1] [function_2]	count=3
function	and returns ||| get	count=6
function	and mirror pad ||| and	count=1
function	resultant of an ||| compute elemwise	count=1
class	we don't have a ||| upgrade	count=1
function	a random ||| random	count=7
function	returns input function that ||| input fn	count=1
arg	return indexies of categories ||| unused_y	count=1
function	to ||| ts from regex	count=2
function	description ||| description	count=1
arg	[arg] function ||| [arg] func	count=1
arg	a target ||| target decorator_func decorator_name	count=1
module	all the nodes of ||| contrib graph_editor	count=1
class	an embedding [class] to ||| projector plugin [class]	count=1
function	with atrous convolution ||| atrous	count=1
function	the ui ||| ui	count=1
module	1 ||| contrib distributions python ops	count=5
arg	loss ||| loss	count=2
function	op [function_2] ||| [function_2] batch [function_1]	count=2
module	will be ||| python	count=1
arg	add its inputs to ||| inputs state scope	count=2
function	valued [function_2] ||| [function_1] [function_2]	count=8
module	[module_1] current ||| [module_2] [module_1]	count=1
arg	parameters ||| use_peepholes initializer num_proj	count=1
arg	value in values ||| values	count=2
function	get all the ||| from	count=1
function	the volume contained in ||| resize volumes	count=1
module	from a rank-2 ||| contrib solvers	count=1
function	the backprop loop that ||| back prop loop	count=1
function	classification accuracy on ||| accuracy	count=1
function	[function_1] google2 format ||| [function_2] log [function_1]	count=1
function	labels outside ||| labels	count=3
function	by atrous convolution ||| test atrous	count=2
function	values and [function_2] ||| [function_2] [function_1]	count=1
module	function and ||| ops	count=1
module	a function of x ||| ops distributions	count=1
class	layer normalization ||| layer norm	count=1
function	for proper shape ||| sample	count=1
module	loss to the ||| contrib losses python losses	count=2
class	attentionmechanism ||| attention mechanism	count=2
module	previous output ||| grid_rnn	count=1
arg	dnnlinearcombinedclassifier instance ||| model_dir n_classes weight_column_name linear_feature_columns	count=1
arg	evaluable evaluable ||| feed_fn	count=2
module	can be [module] apply l2 ||| [module]	count=1
function	a directory ||| directory	count=4
function	generates test data ||| get test data	count=2
arg	for different thresholds on ||| thresholds	count=3
function	the data ||| data	count=1
module_class	[module_1] [class_2] ||| [module_1] keras [class_2]	count=3
function	raises typeerror otherwise ||| check hooks type	count=1
arg	permute a tensor's ||| axis_order	count=1
class	with the ||| test	count=1
function	wrap a call to ||| wrap	count=1
class	per ||| gmm algorithm	count=2
arg	metadata ||| sparse map_op rank	count=1
function	[function_1] with vocabulary ||| [function_1] [function_2]	count=4
function	tf graph for ||| inference graph	count=1
function	each forward ||| forward	count=1
function	and converts ||| and	count=1
module	dict symbol name -> ||| tools	count=1
function	latest event [function_2] ||| [function_1] [function_2]	count=1
arg	alongside the specified axis ||| x axis	count=2
class	to disk ||| writer	count=3
class	sure we don't ||| test	count=1
function	set the ||| set shape	count=1
arg	a new loadbalancingstrategy ||| num_tasks load_fn	count=1
arg	output from a ||| output	count=1
function	to file in a ||| to file	count=1
function	[0 n_classes) [function_2] ||| [function_2] [function_1]	count=6
function_arg	evaluation [arg_2] ||| [function_1] [arg_2]	count=1
arg	this input_fn diffs from ||| x y batch_size num_epochs	count=1
function	an embedding [function_2] ||| [function_1] [function_2]	count=5
module	__init__ which gets ||| contrib distributions python ops bijectors	count=1
module	name of the ||| python	count=1
arg	check args ||| dist z n seed	count=1
function	a global default if ||| get default	count=1
function	sessionrunhook ||| hooks type	count=1
function	for a merge ||| merge	count=1
class	[class] convolution function ||| [class]	count=2
function	prints a [function_2] ||| [function_2] [function_1]	count=2
module	part ||| keras python keras	count=1
function	a strided slice ||| strided slice	count=2
function_arg	[function_1] a func ||| [arg_2] [function_1]	count=1
function	files ||| index	count=1
module	a 3d numpy ||| keras python keras preprocessing	count=1
function	flip matrix [function_2] ||| [function_2] [function_1]	count=10
function_arg	[function_1] save_path/filename ||| [function_1] [arg_2]	count=2
function	verifying the output with ||| test adjust	count=1
module	all ops created ||| ops	count=1
function	of tensor [function_2] ||| [function_1] [function_2]	count=3
function	returns a header ||| get header from ops	count=1
function	a sample ||| sample	count=2
arg	row ||| cls rows	count=1
arg	the given predictions ||| predictions	count=1
function	adds the ||| add saveable	count=1
function	zlib library compatible ||| test write zlib	count=2
arg	handle syncreplicashook ||| is_chief num_tokens	count=1
arg	a kernellinearclassifier ||| n_classes	count=1
function	tensors linked to ||| ts from	count=1
arg	[arg_1] the labels ||| [arg_1] [arg_2]	count=1
function	embeddings [function_2] ||| [function_2] [function_1]	count=6
arg	forward propagation ||| x cs_prev h_prev w	count=1
module	flip ||| distributions python ops	count=4
module	separableconv2d ||| python framework	count=1
function	flops for ops ||| get logged	count=1
function	a serializable version of ||| def	count=1
module	[module_1] the output ||| [module_1] [module_2]	count=1
function	multiline ||| multiline	count=1
function	min across ||| min	count=1
module	models that use ||| learn estimators	count=1
arg	for an ||| cell_type num_units	count=1
class	by this operator ||| linear operator	count=2
function_arg	[function_1] losses ||| [function_1] [arg_2]	count=4
module	loss using ||| losses python losses	count=1
function	make sure the shape ||| compatibility	count=1
module	tensor for the given ||| python feature_column	count=1
function	get the [function_2] ||| [function_1] [function_2]	count=12
function	invalidate the ||| invalidate transitively	count=1
function	conv ||| conv	count=1
function_arg	configuration [arg_2] ||| [arg_2] [function_1]	count=1
class	table ||| hash table	count=2
function_arg	[function_1] until ||| [arg_2] [function_1]	count=1
function	sharded variable list with ||| partitioned variable	count=2
function	string in the command ||| str	count=1
function	returns configuration of ||| config	count=1
arg	and returns differences ||| other_dump step atol	count=1
function	a sequence of ||| to	count=1
function	vectors by [function_2] ||| [function_2] [function_1]	count=1
function	real part and ||| real	count=1
class	config ||| config	count=1
function_arg	[function_1] train a ||| [function_1] [arg_2]	count=3
module	two lists of ||| python ops	count=1
module	of ||| framework python ops	count=16
class	its outer context ||| context	count=1
function	returns the ||| type	count=1
module	of a variable ||| contrib factorization python ops	count=1
function_arg	[function_1] cell ||| [arg_2] [function_1]	count=1
function	sentinel event for ||| get sentinel event	count=2
class	converts a variable ||| variable	count=1
module	given dimension [module] tensor into ||| [module]	count=1
function	items in the ||| items	count=1
class	cudnn to ||| cudnn	count=1
function	tensors for ||| tensors	count=1
arg	values ||| values dtype name as_ref	count=1
function	to finish ||| finish	count=1
function	the type of the ||| type	count=1
function_arg	flops for [arg_2] ||| [function_1] [arg_2]	count=1
module	of vectors matrices and ||| ops	count=1
function	a header for use ||| header from	count=1
function	convert it into html ||| array to html	count=1
function_arg	op to [arg_2] ||| [arg_2] [function_1]	count=1
function	all the data ||| with all	count=1
function	a list [function_2] ||| [function_2] [function_1]	count=3
function	run() calls to the ||| run end	count=1
module	of name to ||| ops	count=1
class	prevent a tensor ||| tensor	count=2
function	generate ||| gen	count=1
function	list of tensor objects ||| to tensor	count=2
module	and previous output ||| grid_rnn	count=1
function_arg	[function_1] section as ||| [arg_2] [function_1]	count=4
function	file for ||| file	count=1
arg	update 'ref' by assigning ||| validate_shape	count=1
arg	from command arguments ||| args	count=1
function_arg	[function_1] threshold ||| [arg_2] [function_1]	count=1
module	the vocabulary dictionary and ||| python learn preprocessing	count=1
module	method for determining the ||| keras python	count=1
function	a ||| item	count=1
function	supported by [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] init ||| [function_2] [function_1]	count=8
arg	a visitor ||| visitor	count=1
function	to init ||| init	count=1
module	the sum of ||| framework	count=1
function	finish the ||| finish	count=1
arg	fn2() based on ||| fn1 fn2	count=1
module	indexies of ||| contrib learn	count=1
function	create an instance of ||| create analyzer	count=1
function	the variables in ||| variables to	count=1
class	proximal [class_2] ||| [class_2] [class_1]	count=3
module	that match the ||| contrib	count=1
class	to test a ||| subscribe test	count=1
function	data types ||| data type	count=1
arg	row_seq ||| row_seq overlapping	count=2
arg	by normalizing with the ||| labels predictions normalizer	count=1
function	probability of ||| probs	count=5
function	output values of the ||| values for	count=1
class	a single iteration ||| gmm algorithm	count=1
class	the wrapper should ||| wrapper session	count=1
function	[function_1] id ||| [function_1] [function_2]	count=2
function	recipients ||| recipients	count=1
module	imagenet model's ||| keras python keras applications	count=1
function	build a graph ||| build graph	count=3
class	update ||| wrapper session	count=1
class	an input ||| feature	count=1
module	of tensors that ||| contrib distributions python ops	count=2
function	external [function_2] ||| [function_1] [function_2]	count=4
class	the current batch ||| sequence batch	count=1
function	sort ||| sort dump	count=1
class	table outputs the corresponding ||| hash table	count=2
module	[module_1] vocabulary ||| [module_1] [module_2]	count=4
function	a rank rfft ||| rfft	count=1
module_class	[module_1] [class_2] ||| [module_1] ops conditional accumulator [class_2]	count=1
function_arg	converts [arg_2] ||| [arg_2] [function_1]	count=4
function	process an output ||| process output	count=2
function	mean and variance ||| moments	count=2
function	predictions with respect to ||| precision at	count=4
function	feature spec for ||| create sequence feature spec for	count=1
arg	from x or y ||| x y name	count=1
function	[function_1] function that ||| [function_1] [function_2]	count=4
function	a restricted linear ||| joint weighted sum from	count=1
arg	and predictions ||| predictions weights metrics_collections	count=2
function	all the tensors ||| ts	count=1
function	get ||| filter ts from	count=1
function	for an accumulated ||| prop accumulated	count=1
function	the recall of ||| streaming recall	count=1
function	[function_1] names for ||| [function_1] [function_2]	count=3
function	iff the ||| constant	count=1
function	_guideref ||| build guide index	count=1
module_class	[module_1] [class_2] ||| [module_1] multivariate [class_2]	count=12
module	[module_1] input ||| [module_2] [module_1]	count=1
function	x to [function_2] ||| [function_2] [function_1]	count=3
function	a single ||| single	count=6
function	serializable version ||| def	count=1
function	[function_1] the first ||| [function_2] [function_1]	count=2
module	internal vocabulary ||| python keras preprocessing	count=1
function	recall of ||| recall	count=1
function	rnn calculation ||| rnn	count=1
class	the file ||| writer	count=2
function_arg	[function_1] estimator ||| [arg_2] [function_1]	count=1
function	no emitted edges ||| variable update ops sees updated values	count=1
module	fused kernel for ||| ops	count=1
module	op ||| framework	count=1
function	with respect to sparse ||| sparse precision	count=2
arg	single [arg_2] ||| [arg_2] [arg_1]	count=4
function	op to use based ||| to hash	count=1
function	a tensor ||| tensor	count=20
function	for model_fn that returns ||| model fn ops	count=1
function	a loop ||| loop	count=1
function	return the page ||| module page	count=1
arg	[arg_1] elems ||| [arg_2] [arg_1]	count=4
function	fixed size histogram ||| histogram	count=1
function	to read queue batch ||| read keyed batch examples shared queue	count=1
arg	utility to compute/validate an ||| input_shape default_size min_size data_format	count=1
module	transforms each text ||| keras python keras preprocessing	count=1
function_arg	max across [arg_2] ||| [function_1] [arg_2]	count=1
function	of the weights of ||| weights	count=1
function_arg	paths [arg_2] ||| [arg_2] [function_1]	count=1
module	the axis_order ||| python ops	count=1
function	of file [function_2] ||| [function_1] [function_2]	count=2
class	with output [class_2] ||| [class_1] [class_2]	count=1
function	and stores trace information ||| store trace info	count=1
module	for [module] ||| [module]	count=2
arg	queue to create ||| capacity	count=1
module	the axis_order ||| contrib labeled_tensor python ops	count=1
module	learn ||| python	count=1
arg	inputs and/or outputs to ||| remove_input_map remove_output_map	count=2
function	check that ||| check	count=2
arg	of input_tree ||| input_tree	count=1
module	on ||| python	count=1
module	read ||| python learn learn_io	count=4
module	can be used to ||| layers	count=1
arg	a target ||| target from_logits	count=1
function	at a given node ||| at	count=4
module	multi ||| learn python learn estimators	count=3
function	a tensor to ||| parse label tensor	count=1
arg	of x ||| x	count=1
class	it with ||| op test	count=1
function	add an item ||| add	count=1
arg	respect to the labels ||| labels weights metrics_collections	count=1
function	and convert it into ||| text array to	count=1
function	crop the ||| crop	count=1
arg	if the denominator ||| denominator name	count=2
function	into strings ||| to string	count=2
function	a node ||| node	count=6
function	integer weights ||| integer weighted sparse column	count=1
function	the confusion matrix ||| confusion matrix	count=2
class	proper ||| multinomial	count=1
function	[function_1] [function_2] ||| [function_1] dense [function_2]	count=3
function	the dump [function_2] ||| [function_1] [function_2]	count=4
arg	function ||| unused_op	count=1
arg	from_proto ||| from_proto	count=1
function	and weighted sparse ||| weighted sparse	count=2
arg	screen output ||| output node_name	count=1
function	device is part of ||| gputrace device	count=1
class	this tensor ||| tensor	count=1
function	number of dumped tensors ||| size	count=1
module	a ||| preprocessing	count=1
function	of tags that ||| unique tags	count=2
function	a particular plugin asset ||| asset	count=1
function	layer based on ||| layer	count=1
function	predict step ||| predict data feeder	count=1
function_arg	loop over [arg_2] ||| [function_1] [arg_2]	count=2
module	value into the ||| python ops	count=1
function	recipients recursively with control ||| recipients recursive with controls with	count=1
class	(e g ||| operation	count=1
function	a tuple with ||| tuple	count=1
class	provide ||| variable store	count=1
function	for ||| node	count=1
function	[function_1] matmul ||| [function_1] [function_2]	count=1
function_arg	registers a [arg_2] ||| [function_1] [arg_2]	count=2
module	sense of tensors of ||| contrib linalg	count=2
function	of source [function_2] ||| [function_2] [function_1]	count=1
module	list of keras ||| keras python keras	count=1
module	of the ||| linear_optimizer python ops	count=1
arg	whose value represents the ||| add_regularization_losses	count=2
function	tf examples ||| feature columns from examples	count=1
arg	given ids and weights ||| sp_ids sp_weights partition_strategy	count=2
function_arg	initialize a [arg_2] ||| [arg_2] [function_1]	count=1
module	list of tensors ||| distributions python ops	count=2
module	from a ||| learn python learn	count=1
function	the first dimension ||| first dimension	count=2
function	[function] initialized ||| create zeros [function]	count=1
arg	performs a ||| x zoom_range row_axis col_axis	count=1
arg	forward step ||| input_data input_h input_c params	count=1
function	tf ||| parse feature columns from	count=1
function	dense tensor as input ||| make input	count=1
arg	[arg_1] precision@k ||| [arg_2] [arg_1]	count=8
function	source [function_2] ||| [function_1] [function_2]	count=1
class	created by this ||| distribution shape	count=1
function	specified invalid indices ||| invalid indices	count=1
class	to the event ||| to event transformer	count=2
arg	data input_fn ||| input_fn steps hooks	count=1
function	product between lists of ||| dot product	count=1
function	the given variable ||| variable	count=1
function	forwards ||| switch ref or	count=1
function	closes this ||| close	count=1
module	from ||| tools docs	count=2
module_class	[module_1] a random ||| [module_1] [class_2]	count=4
function	calculate the total variation ||| total variation	count=1
function	feedable ||| feedable	count=2
function	rejection sampling ||| rejection sample	count=1
arg	objects of base_type to ||| base_type conversion_func	count=1
module	true ||| python ops distributions	count=1
function	[function_1] runoptions for ||| [function_2] [function_1]	count=5
class	choose a ||| device chooser	count=1
function	data ||| to data	count=1
arg	value value ||| value	count=1
function	min [function_2] ||| [function_1] [function_2]	count=5
arg	labels and predictions ||| labels predictions dim	count=3
function	[function_1] row ||| [function_2] [function_1]	count=5
function	[function_1] pil format ||| [function_2] [function_1]	count=1
module	all the element ||| contrib graph_editor	count=1
function	end event ||| end	count=1
function	add ||| add value	count=1
function	the tensors linked ||| filter ts from regex	count=1
function	timestamp of when this ||| timestamp	count=1
function	explicitly queries the shape ||| shape	count=1
module	list of ||| contrib rnn python ops	count=1
function	[function_1] implementation ||| [function_2] [function_1]	count=8
module_class	[module_1] indexedslices ||| [class_2] [module_1]	count=1
function	the id [function_2] ||| [function_1] [function_2]	count=3
arg	concatenates n [arg_2] ||| [arg_2] [arg_1]	count=2
arg	processes a audio ||| tag wall_time step audio	count=1
arg	return the gradients for ||| op grad	count=1
class	callback ||| debug wrapper session	count=1
function	raises ||| check hooks type	count=1
function	the current position ||| tell	count=1
function	same as linear_model_fn but ||| model fn ops	count=2
function	running an op ||| benchmark run op	count=1
arg	op is ||| op	count=3
module	of zero ||| contrib linalg python ops	count=1
function	then ||| maybe	count=1
function	to non-negative ||| axis non	count=1
class	of the layer from ||| layer	count=1
function	eval produces correct metrics ||| eval	count=1
function	offset when the variable ||| single offset	count=1
module	of layers ||| contrib layers python layers	count=1
function	page ||| build function page	count=1
module	will be produced ||| framework	count=1
function_arg	true iff [arg_2] ||| [arg_2] [function_1]	count=3
module	cell ||| contrib rnn python	count=3
function	indicated ||| select	count=1
arg	graphdef ||| input_graph_def input_node_names output_node_names placeholder_type_enum	count=1
function	[function_1] after ||| [function_2] [function_1]	count=1
arg	display area ||| line_index	count=1
function	first dimension ||| first dimension	count=1
function	for a batch ||| batch	count=1
class	staging area object ||| staging area	count=1
module	returns the proto_type for ||| python	count=1
function_arg	csv [arg_2] ||| [function_1] [arg_2]	count=2
function	[function_1] traversal attack ||| [function_1] [function_2]	count=3
module	x ||| contrib distributions python ops	count=1
module_class	of this tensor ||| python client tensor	count=1
function_arg	signature from [arg_2] ||| [arg_2] [function_1]	count=12
module	returns predictions ||| python layers	count=1
module	the op (e g ||| python framework	count=1
function_arg	tensors [arg_2] ||| [arg_2] [function_1]	count=4
module	an imagenet ||| keras python keras applications	count=1
module	of of ||| ops	count=1
function	within [function_2] ||| [function_1] [function_2]	count=1
module	version ||| python	count=1
module	[module_1] of keras ||| [module_2] [module_1]	count=1
function	tensor into a placeholder ||| t with placeholder	count=1
module	filename linenumber for ||| platform	count=1
function	initialized with 0 0 ||| zeros	count=1
module	re-implementation [module_1] [module_2] ||| [module_2] [module_1]	count=4
class	that selects ||| factorization test	count=1
function	report of the ||| report	count=1
module	create a sequence-to-sequence ||| legacy_seq2seq	count=1
function	tf placeholder for ||| make placeholder	count=2
module	sense of vector spaces ||| contrib linalg	count=3
function	a tf sparsetensor ||| remap sparse tensor	count=1
module	feature ||| python layers	count=1
arg	graph element ||| element_name handle_node_names	count=1
module	vocabulary dictionary and ||| contrib learn python learn preprocessing	count=1
function	inputs ||| inputs	count=16
module	sessionrunhook raises ||| estimator	count=1
function	is zlib library compatible ||| test write zlib read	count=1
function	converts ||| img to	count=1
function	gets the default ||| get default	count=3
function	prepend (i e add ||| prepend	count=1
function	of n-d [function_2] ||| [function_2] [function_1]	count=8
arg	initialize the parameters ||| num_units use_peepholes share_time_frequency_weights	count=1
module	name -> _guideref ||| tools	count=1
arg	the specified dimension ||| dim epsilon	count=1
function	layer that is ||| get layer	count=1
function	should be allowed ||| keys should work	count=1
module_class	a new optimizer ||| python training optimizer	count=1
class	sample data ||| data generator	count=1
class	we don't have a ||| test	count=1
arg	initialize the parameters ||| use_peepholes	count=1
function	the object's docstring ||| md docstring	count=1
arg	output if ||| output	count=1
function	things to ||| smart unset all	count=1
function	1/sec^2 ||| tan	count=1
function	digamma function ||| multi digamma	count=1
function	client feed ||| with tensor feed	count=1
class	constructor of ||| curses	count=1
function	transforms each ||| to	count=1
class	ops to ||| base saver builder	count=1
function_arg	[function_1] [arg_2] ||| [function_1] inputs [arg_2]	count=1
function	all pixels ||| pixels	count=1
function	the optimal [function_2] ||| [function_2] [function_1]	count=4
function	a checkpoint [function_2] ||| [function_2] [function_1]	count=4
function	benchmark single ||| single	count=1
module	tensor ||| ops	count=1
function	sequence of ||| sequence	count=3
function	save path used ||| save path	count=2
module	the next runge-kutta ||| contrib integrate	count=1
module	be used ||| layers	count=1
function_arg	sprite image [arg_2] ||| [arg_2] [function_1]	count=3
function_arg	[function_1] op belongs ||| [function_1] [arg_2]	count=2
module_class	fetch [class_2] ||| [module_1] [class_2]	count=1
arg	concentration [arg_2] ||| [arg_2] [arg_1]	count=2
module	in this ||| framework	count=3
function	construct ||| construct	count=1
function	dict symbol name -> ||| index	count=1
function	are ||| check	count=1
class	the ui ||| curses	count=1
function	various recall values ||| streaming recall at thresholds	count=1
function	broadcasted static ||| broadcast static	count=1
class	with these parameters or ||| variable store	count=1
function	containing state ||| to state	count=1
function	shape values then return ||| assert valid sample	count=1
class	its outer context recursively ||| context	count=1
function	diagonal of d ||| diag update	count=1
function	to ||| apply	count=1
module	integer[s] or tensorshape object[s] ||| contrib seq2seq	count=1
function	[function_1] index of ||| [function_2] [function_1]	count=4
function	of names for each ||| names	count=1
module	we ||| tools	count=1
arg	screen output ||| output node_name enable_list_tensors	count=1
function	a line in ||| screen add line	count=1
class	return ||| dirichlet	count=1
arg	getter for an ||| history_value	count=1
function	[function_1] l2 regularization ||| [function_2] [function_1]	count=8
module	last two dimensions of ||| contrib linalg python ops	count=1
arg	in collectiondef ||| item	count=1
function	multiplies the ||| prod	count=1
arg	nn softmax_cross_entropy_with_logits ||| onehot_labels	count=1
function	var, with repeated ||| duplicate	count=1
arg	a labeled tensor ||| labeled_tensor axis_order name	count=1
function	provided have invalid type ||| invalid number of classes	count=1
function	[function_1] event ||| [function_2] [function_1]	count=9
arg	either fn1() or fn2() ||| fn1 fn2 name	count=1
arg	of base_type to ||| base_type conversion_func	count=1
function	an absolute difference loss ||| absolute difference	count=1
function	the graph transform ||| transform graph	count=2
arg	for smaller versions of ||| shrink	count=1
function	the tensors linked to ||| regex	count=1
function	creates an rnn specified ||| rnn	count=1
class	test ||| seq2seq test	count=1
class	concrete [class_2] ||| [class_1] [class_2]	count=1
module	shape values ||| distributions	count=1
function	[function_1] dense scalar ||| [function_1] [function_2]	count=1
arg	results through [arg] ||| inp partitions [arg]	count=1
module	specified by the ||| python slim data	count=1
function	a new ||| replace	count=1
arg	specified dimension ||| dim	count=1
function	static shapes ||| static	count=2
function	[function_1] hash_signs=true ||| [function_1] [function_2]	count=1
function	plugins that have ||| plugins	count=1
function_arg	the central [arg_2] ||| [arg_2] [function_1]	count=1
module	returns an ||| python learn	count=1
arg	in-place the graph ||| graph	count=1
function	< ||| less	count=1
module	of ||| contrib learn python	count=1
arg	[arg] pass results ||| inp [arg]	count=1
function	[function_1] test ||| [function_2] [function_1]	count=3
arg	[arg_1] op2 hints ||| [arg_1] [arg_2]	count=3
class	packed tensor ||| tensor	count=1
function	to a richtextlines ||| rich text lines	count=1
module	from ||| python debug lib	count=1
function_arg	to [arg_2] ||| [function_1] sp_input container shared_name [arg_2]	count=1
function	page and verify ||| page	count=1
function	tensor or ||| tensor or	count=1
function	wrapper ||| wrapper	count=3
function	within an arg_scope ||| arg scope	count=1
arg	the tensorboard application ||| logdir plugins multiplexer reload_interval	count=1
arg	the given state ||| state scope	count=2
module	of of ||| contrib distributions python ops	count=1
module	to __init__ which gets ||| distributions python ops bijectors	count=1
function	a sparse [function_2] ||| [function_2] embedding lookup [function_1]	count=1
arg	enter op ||| op	count=1
arg	creates a tensor ||| tensor dtype name	count=1
function	current [function_2] ||| [function_1] [function_2]	count=2
function	for gamma ||| gamma	count=1
arg	[arg_1] the predictions ||| [arg_2] [arg_1]	count=5
arg	for precision@k ||| labels predictions_idx k class_id	count=1
function	the mean squared ||| streaming mean squared	count=1
arg	precision@k ||| k	count=1
function	for local init ||| local init op	count=2
function	files ||| find files	count=1
module	to disk ||| summary	count=1
class	creates ||| failure tolerator	count=1
module_class	1 [class_2] ||| [module_1] [class_2]	count=6
class	tests ||| multi label2d recall at ktest	count=1
arg	the computation done by ||| num_batch_threads max_batch_size batch_timeout_micros allowed_batch_sizes	count=1
function_arg	root name [arg_2] ||| [function_1] [arg_2]	count=1
function	computes the mean ||| reduce mean	count=1
module	outcome (vs 0) ||| distributions	count=1
arg	given value ||| value dtype name	count=2
function	predict step ||| predict data	count=1
function	[function_1] closure ||| [function_2] [function_1]	count=4
module	[module_1] model's ||| [module_1] [module_2]	count=4
function_arg	to index [arg_2] ||| [arg_2] [function_1]	count=1
module	vocabulary dictionary and ||| contrib learn python	count=1
arg	lower triangular matrix ||| tril	count=1
function	replaces a reshape ||| reshape	count=1
module	matrix representing this ||| python ops	count=1
arg	in tensor_list ||| tensor_list num_epochs	count=1
function	field to observations ||| get field to observations map	count=1
function	[function_1] [function_2] ||| [function_2] files [function_1]	count=3
module_class	the [class_2] ||| [module_1] ops grad [class_2]	count=1
module	matches ||| python metrics	count=1
function_arg	loop [arg_2] ||| [arg_2] [function_1]	count=4
function	input arg ||| arg	count=1
module	the ||| contrib bayesflow python	count=2
function	representing the shape of ||| shape	count=1
function	sequence index ||| sequence	count=1
module	prepended to all ops ||| linalg python ops	count=1
function	true if this ||| is gputrace	count=1
module	of d in ||| python ops	count=1
function_arg	cast a [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	sum [arg_2] ||| [function_1] [arg_2]	count=7
function	it works fine [function_1] [function_2] integer type ||| integer [function_2] [function_1]	count=1
function	to var, with repeated ||| duplicate	count=1
arg	in tensor_list ||| tensor_list num_epochs shuffle	count=1
function	[function_1] with as_iterable=false ||| [function_2] [function_1]	count=2
module_class	in [module_1] [class_2] ||| [module_1] [class_2]	count=1
class	[class_1] descent optimizer ||| [class_1] [class_2]	count=2
function	boots 3 [function_2] ||| [function_2] [function_1]	count=4
function	tensor [function_2] ||| [function_1] nonexistent [function_2]	count=1
function	header ||| header from ops	count=1
function	is a ||| is	count=1
function	average layer ||| average	count=1
arg	an output tensor ||| output	count=1
function	[function_1] observations dict ||| [function_1] [function_2]	count=3
arg	the parameters for an ||| num_units input_size use_peepholes cell_clip	count=1
module_class	underlying [class_2] ||| [module_1] base [class_2]	count=1
class	factorization ||| factorization	count=1
module	verifies file_io ||| tools gcs_test python	count=1
module_class	return the control ||| contrib graph_editor control	count=1
module	the core version with ||| learn python learn	count=1
function	for a merge op ||| merge grad	count=1
function	calls model [function_2] ||| [function_2] [function_1]	count=4
function	type ||| type	count=6
module	the ||| preprocessing	count=1
function	[function_1] a graph ||| [function_1] [function_2]	count=4
module	'graph and session and ||| contrib learn python learn dataframe	count=1
function_arg	[function_1] input_tensors) from ||| [function_1] [arg_2]	count=2
function	classification using ||| classification training loss	count=1
function_arg	[function_1] values ||| [arg_2] [function_1]	count=1
function	and sparse features ||| sparse features	count=1
function	a tensor ||| parse label tensor	count=1
function_arg	[function_1] an rnncell ||| [function_1] [arg_2]	count=4
module	distribution with ||| ops distributions	count=1
module	helper ||| python ops	count=2
class	the stack ||| stack	count=1
function	[function_1] [function_2] ||| [function_2] readable [function_1]	count=3
function	timeout ||| timeout	count=1
function	linked ||| ts	count=1
class	gets ||| variable scope	count=2
function	tensor ||| label tensor	count=1
function	build [function_2] ||| [function_1] [function_2]	count=3
function	into string values ||| to string	count=1
arg	shape ||| shape	count=10
function	converts ||| convert	count=2
function	values for ||| values	count=1
arg	of tensors ||| tensors session	count=1
class	navigation ||| curses navigation history	count=1
arg	the list of items ||| items	count=1
function	init arg num_rows, ||| num rows	count=1
module	slice of ||| ops	count=1
function	precision values for ||| precision at	count=1
module	samples ||| contrib keras python keras	count=1
function	restricted linear ||| joint weighted sum from	count=1
function	seven gaussians ||| univariate	count=1
function	from signatures ||| signatures	count=1
module	stochastic ||| python ops	count=1
class	don't have ||| upgrade files	count=1
module	to ||| contrib distributions python ops	count=2
function	the image ||| image	count=1
arg	output ||| input_tensors	count=2
function	the values for given ||| test output values	count=1
function	output ||| output page down up	count=1
function	the end [function_2] ||| [function_2] [function_1]	count=4
arg	log_prob [arg] using ||| [arg]	count=1
function	batch normalization ||| batch normalization	count=1
module	of 1 ||| distributions python ops	count=1
function_arg	[function_1] saves ||| [function_1] variables [arg_2]	count=1
function	digamma function psi_p ||| digamma	count=1
function	[function_1] is sparsetensor ||| [function_2] [function_1]	count=1
function	the computed ||| from	count=1
module	the vocabulary dictionary ||| contrib	count=1
function	instantiates the resnet50 ||| res net50	count=1
function	in a command to ||| in	count=1
function_arg	file [arg_2] ||| [function_1] [arg_2]	count=2
function	add [function_2] ||| [function_1] [function_2]	count=3
arg	value to variable's ||| value	count=1
arg	a riemann sum ||| weights num_thresholds	count=2
module	vocabulary dictionary ||| contrib learn python learn	count=1
arg	and fetches ||| fetches feed_dict	count=1
function	use a watch_fn ||| dumping with watch	count=1
function	classification ||| classification training	count=1
function	return dict symbol ||| build guide	count=1
function	and hooks can be ||| and hook	count=1
arg	which chooses the ||| pred cond_true cond_false	count=1
function	vgg19 ||| vgg19	count=1
arg	symbols to a ||| ids vocab_size embed_dim sparse_lookup	count=1
function	compute number of ||| set size	count=1
function_arg	get a [arg_2] ||| [arg_2] [function_1]	count=1
module	a new ||| training	count=11
function	the while ||| while	count=1
function	invariant ||| enter	count=1
function	a sine [function_2] ||| [function_1] [function_2]	count=2
function	a ||| to labels	count=1
class	the input projection ||| input projection wrapper	count=2
function_arg	[function_1] labeled tensor ||| [arg_2] [function_1]	count=3
function	the default learning ||| learning	count=1
function	[function_1] float labels ||| [function_1] [function_2]	count=1
module	and previous output tensors ||| contrib grid_rnn python	count=1
module	be used ||| layers python layers	count=1
module	variables to represent ||| factorization examples	count=1
function	[function_1] and hooks ||| [function_2] [function_1]	count=1
function	path [function] ||| get path [function]	count=3
module	be used ||| python layers	count=1
function	for ||| ops for	count=1
function	set the [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] train a ||| [function_2] [function_1]	count=2
function	string message ||| get purge message	count=1
module	returns ||| contrib factorization	count=2
function	positives for ||| positive at	count=4
class	current batch ||| sequence batch	count=1
module	the path ||| python	count=1
function	dictionary of tags that ||| unique tags	count=1
function_arg	[function_1] [arg_2] ||| [function_1] _sentinel labels [arg_2]	count=16
module	single ||| contrib rnn python kernel_tests	count=1
function_arg	file in base_dir ||| file base_dir	count=1
function	sets the [function_2] ||| [function_2] [function_1]	count=17
function	legend ||| node status label legend	count=1
function	methods inside the ||| datasets	count=1
function	shape a equal ||| shape	count=1
function	[function_1] hooks ||| [function_2] [function_1]	count=2
function_arg	a sum [arg_2] ||| [arg_2] [function_1]	count=4
module_class	[module_1] cudnn ||| [module_1] [class_2]	count=14
function	safe mean of ||| safe mean	count=1
module_class	[module_1] negative ||| [module_1] [class_2]	count=4
function	temporarily reroute errors ||| reroute	count=1
module	1 outcome ||| python	count=1
function	lookup embedding ||| embedding lookup	count=1
class	the dense [class_2] ||| [class_2] [class_1]	count=1
module	step of ||| contrib rnn python ops	count=4
function	[function_1] a numpy ||| [function_1] [function_2]	count=1
arg	g input_tensors) from a ||| attr attr_name	count=1
module	learn the vocabulary ||| learn preprocessing	count=1
function	[function_1] to 2d ||| [function_1] [function_2]	count=1
function_arg	device for op ||| device function op	count=2
module	distributed ||| specs python	count=1
module	a given ||| learn python learn utils	count=1
module	given an iterable of ||| tensorboard plugins	count=1
module	function ||| python ops	count=1
arg	their norms ||| use_norm name	count=1
function	bias [function_2] ||| [function_2] [function_1]	count=8
function	name [function_2] ||| [function_1] [function_2]	count=1
function	to generate output ||| output	count=1
function	load and ||| load	count=1
arg	op [arg_2] ||| [arg_2] [arg_1]	count=2
function_arg	softmax [arg_2] ||| [arg_2] [function_1]	count=2
function	same proto ||| proto	count=1
function_arg	bidirectional recurrent [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	[function_1] event ||| [arg_2] [function_1]	count=3
function	attribute to [function_2] ||| [function_1] [function_2]	count=2
class	model ||| dnncomposable model	count=2
module	returns ||| python learn dataframe	count=2
arg	the checkpointstate ||| latest_filename	count=1
function	raises an exception ||| assert	count=2
function	hasher_spec ||| bucket fn	count=1
module	data ||| python learn	count=1
function	device to use ||| device	count=1
function	static [function_2] ||| [function_1] [function_2]	count=4
arg	arguments into argument ||| args	count=1
module	the menu ||| python debug cli	count=1
class	file leaves ||| file	count=1
function	identity [function_2] ||| [function_2] [function_1]	count=2
class	this session ||| session	count=1
module	shape of a ||| ops	count=1
arg	opens file path ||| path options	count=1
function	[function_1] loss ||| [function_2] [function_1]	count=22
function	[function_1] session session ||| [function_2] [function_1]	count=2
class	tensor ||| debug tensor	count=2
function	serving ||| serving input fn	count=1
function	recall ||| streaming recall	count=2
module	subscribed ||| python framework	count=1
function	table that converts a ||| index table	count=1
arg	specific fully qualified name ||| name	count=1
function	servers creates 2 sessions ||| servers	count=1
function	metric ||| metric map	count=2
function_arg	[function_1] [arg_2] ||| [function_1] block [arg_2]	count=6
function	a shallow structure ||| shallow structure	count=2
function_arg	[function_1] _docinfo objects ||| [arg_2] [function_1]	count=5
class	[class_1] binary ||| [class_2] [class_1]	count=1
function	the raw handle ||| raw handle	count=1
arg	parameters for an ||| num_units input_size use_peepholes cell_clip	count=1
function	an op node followed ||| op	count=1
function	a feature ||| create sequence feature	count=1
function	proto match shape ||| proto	count=1
module	gradient for ||| ops	count=2
class	the current batch ||| batch	count=1
module	we don't ||| tools compatibility	count=1
function	deprecated argument ||| deprecated argument	count=1
function	dropout given the ||| recurrent dropout	count=1
arg	distances to nearest ||| batch_size steps	count=1
function	to loop ||| predict loop	count=1
class	this operator to ||| linear operator scaled identity	count=1
module	shape ||| ops distributions	count=2
function	type float64 ||| double	count=1
function	model variable ||| variable	count=1
function	a dict of predictions ||| logits to predictions	count=2
function_arg	v3 [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	restore variables [arg_2] ||| [arg_2] [function_1]	count=1
function	directory ||| directory	count=5
function	shape values then ||| maybe	count=1
module	of the tensors ||| python ops	count=2
function	to [function_2] ||| [function_1] 1d [function_2]	count=2
function	sequence of ||| to sequences	count=1
class	grid ||| grid rnncell	count=1
class	new partitioned ||| partitioned	count=1
function	initializer ||| checkpoint initializer	count=1
function	saturation ||| saturation	count=1
arg	predicate pred ||| pred	count=1
function	the offset when the ||| single offset	count=1
arg	and interval values ||| values name	count=1
function	op used by ||| op	count=2
module	constructor for ||| estimator export	count=1
arg	conjugate prior on ||| prior scale s	count=1
arg	precision@k ||| predictions_idx class_id	count=1
function	function and not a ||| function	count=1
function	[function_1] bucket configuration ||| [function_1] [function_2]	count=1
function	for given sampled_candidates ||| with sampled candidates	count=1
class	a validationmonitor ||| validation monitor	count=1
function	return the save ||| save	count=1
function	tall output ||| tall output page down up	count=1
arg	alongside the specified ||| keepdims	count=4
arg	this input_fn diffs ||| x y batch_size num_epochs	count=1
module	tensor for the given ||| feature_column	count=1
function	logistic regression ||| logistic	count=1
function	and bias [function_2] ||| [function_1] [function_2]	count=3
module	matrix data as input ||| estimators	count=4
function	provided fixed base ||| fixed unigram	count=1
function	sets ||| set value	count=1
function	dtype ||| base dtype	count=1
function	the default [function_2] ||| [function_2] [function_1]	count=6
function	rnn model [function_2] ||| [function_2] [function_1]	count=2
function	function ||| fn	count=5
function	the confusion [function_2] ||| [function_1] [function_2]	count=1
function	step true positives for ||| streaming sparse true positive at k	count=1
class	will be ||| indexed	count=1
function	precision@k ||| at top k	count=2
arg	a specified min and ||| t clip_value_min clip_value_max	count=1
function_arg	split the [arg_2] ||| [arg_2] [function_1]	count=2
function	compute set [function_2] ||| [function_1] [function_2]	count=2
function	for given example ||| example	count=1
function	check on [function_2] ||| [function_1] [function_2]	count=1
function	variable ||| set variable	count=1
module	from 0 to ||| training	count=1
module	dataframe into ||| contrib learn python learn dataframe	count=1
class	information [class] session run() ||| [class]	count=1
function	a root [function_2] ||| [function_1] [function_2]	count=4
function	a sprite ||| sprite	count=1
function	[function_1] state ||| [function_2] [function_1]	count=6
module_class	[module_1] handler ||| [module_1] fetch [class_2]	count=1
class	the history ||| history	count=1
function	a subset of ||| select	count=1
module	instantiate a keras tensor ||| keras	count=1
arg	a tf learn ||| num_threads enqueue_size	count=1
class	a dnnestimator ||| dnnestimator	count=1
function	the ||| to item	count=1
function	a temporary directory ||| temp dir	count=1
class	array given a ||| tensor array	count=2
function	[function] python ||| [function] arg	count=2
class	the registered function corresponding ||| func registry	count=1
module	and session and ||| contrib learn python learn dataframe	count=1
function	function ||| function with args	count=1
arg	selfadjointeigv2 ||| op grad_e grad_v	count=1
class	class id ||| categorical vocabulary	count=2
function	[function_1] the end ||| [function_1] flat [function_2]	count=1
function	allocate ||| allocate	count=1
function	a sine function ||| sine function	count=4
arg	second-order gradients of the ||| pool_func input_sizes output_sizes window_rows	count=1
arg	for the event ||| query_for_tag	count=1
function	variable-updating ops with ||| test	count=1
function	first operation [function_2] ||| [function_2] [function_1]	count=2
function	the number of parameters ||| params	count=1
arg	from_proto [arg_2] ||| [arg_2] proto_type to_proto [arg_1]	count=1
function	fake bias [function_2] ||| [function_2] [function_1]	count=3
function	a tuple ||| tuple	count=1
function	computes the maximum ||| max	count=1
function_arg	[function_1] symbol ||| [arg_2] [function_1]	count=2
function	score function [function_2] ||| [function_2] [function_1]	count=1
class	these ||| store	count=1
function	is a sparse ||| sparse	count=1
function	tries to restore ||| restore	count=1
module	by ||| ops	count=1
arg	input labels to ||| labels	count=1
function	multiple batched tensors ||| multiple batch	count=1
module	the name of the ||| python framework	count=1
module	each ||| contrib keras python keras	count=1
arg	screen output ||| output node_name enable_list_tensors enable_node_info	count=1
function	a topologically-sorted list of ||| sorted nodes	count=1
function	<= ||| less equal	count=1
module	determining the current ||| keras python keras	count=1
function	time string ||| readable time str	count=2
function	resultant of an elementwise ||| compute elemwise op output	count=1
function	the files ||| find files	count=1
module	transforms each text ||| contrib keras	count=1
function	the root ||| streaming root	count=1
function	in the collections ||| add to collections	count=1
arg	has a rank ||| rank	count=1
function	but invalid syntax ||| syntax error	count=1
module	the model loading them ||| contrib factorization python	count=1
function	computes the un-normalized l1 ||| l1	count=1
function_arg	copy a [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	[function_1] files given ||| [arg_2] [function_1]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] summary_writer [arg_2]	count=3
function	returns the variable scope ||| variable scope	count=1
arg	and returns the environment ||| environment	count=1
function_arg	print [arg_2] ||| [function_1] spec [arg_2]	count=2
function	raises typeerror ||| hooks type	count=1
module	optimizer ||| python keras	count=1
module	sequence-to-sequence model ||| contrib legacy_seq2seq	count=3
arg	[arg_1] the checkpointstate ||| [arg_2] [arg_1]	count=2
arg	microbenchmark to measure the ||| name target iters	count=1
module	get an ||| api lib	count=1
function	[function_1] for mini ||| [function_2] [function_1]	count=2
function	divides ||| scalar div	count=1
function	lookup embedding ||| safe embedding lookup	count=1
function	validate ||| validate	count=3
function	the health [function_2] ||| [function_1] [function_2]	count=1
arg	by a certain predicate ||| predicate first_n	count=1
module	the embedding projector ||| tensorboard plugins projector	count=1
function	pool ops in the ||| pool shapes	count=1
function_arg	iff op ||| constant enter op	count=1
function	[function_1] [function_2] dictionary ||| [function_1] [function_2]	count=3
function	by [function] ||| [function]	count=2
arg	fits internal statistics ||| x augment rounds seed	count=1
function	restricted linear prediction builder ||| joint weighted sum from feature	count=1
function	a richtextlines object ||| text lines	count=1
function	the resultant ||| compute elemwise op	count=1
module	return ||| backend	count=2
class	where event file ||| file writer	count=1
arg	[arg_1] 5d tensor ||| [arg_1] [arg_2]	count=1
function	get targets ||| get classification targets	count=1
arg	corresponding to axis in ||| axis	count=1
module	that of a debug ||| debug	count=1
arg	input across [arg_2] ||| [arg_1] [arg_2]	count=2
function	exception if ||| assert has	count=1
function	predictions is ||| predictions	count=1
function	returns arguments to ||| arguments	count=1
class	by the pluginasset instance ||| plugin asset	count=1
function_arg	verifies validity [arg_2] ||| [function_1] input args [arg_2]	count=2
arg	microbenchmark to measure the ||| size iters	count=1
function	count the total ||| count	count=1
arg	a gradient-based optimizer ||| labels mode params	count=1
class	record ||| imperative graph	count=1
module	returns a dataframe with ||| learn dataframe	count=1
arg	of a tensor ||| tensor	count=3
module	of current ||| contrib factorization python ops	count=1
function	that match ||| filter ts	count=1
module	imagenet ||| contrib keras python keras applications	count=2
function	and process the file ||| process	count=1
function	all tables ||| all tables	count=2
module	returns a tensor ||| keras	count=3
class	with ||| sync replicas optimizer hook test	count=1
arg	convolution layer e ||| kernel_size strides	count=2
module	tensor version ||| ops distributions	count=1
function_arg	observations dict [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] history ||| [function_2] [function_1]	count=4
function	[function_1] tensor ||| [function_1] [function_2]	count=31
function	device of a ||| device	count=1
function	callback ||| on	count=2
function	definite matrix ||| definite matrix	count=2
function	[function_1] increasing ||| [function_2] [function_1]	count=1
class	fits the model ||| model	count=1
function	menuitem ||| caption	count=1
function	and a backward walk ||| walks	count=1
class	create ||| sub graph view	count=1
arg	[arg_1] switch op ||| [arg_2] [arg_1]	count=2
function_arg	[function_1] validates ||| [function_1] [arg_2]	count=2
function	context for ||| context	count=1
function	one column [function_2] ||| [function_2] [function_1]	count=1
function	of the state of ||| state	count=1
function	[function_1] initialization flag ||| [function_2] [function_1]	count=4
function	an rnn ||| raw rnn	count=1
function	if [function_2] ||| [function_2] [function_1]	count=2
module	of two tensors ||| python ops	count=1
function	[function_1] signaturedef ||| [function_1] [function_2]	count=2
function	get all tensor watch ||| debug watch	count=1
function	specified bounding [function_2] ||| [function_1] [function_2]	count=1
function	and names that will ||| and slice	count=1
module	specific axes of a ||| ops	count=1
function	-> _guideref ||| guide	count=1
function_arg	[function_1] given job ||| [arg_2] [function_1]	count=8
module	monte carlo estimate of ||| ops	count=2
function	old values of variables ||| values	count=1
module	bottleneck ||| slim python slim nets	count=4
module	for ||| distributions python ops	count=1
function	object to a hparamdef ||| to proto	count=1
module	sequence-to-sequence model with ||| legacy_seq2seq python ops	count=1
class	a shape based on ||| shape	count=1
function_arg	[function_1] of layers ||| [function_1] [arg_2]	count=4
arg	computes recall@k [arg_2] ||| [arg_2] [arg_1]	count=6
arg	whether actual_tensor's ||| actual_tensor	count=1
module	get an argspec ||| tools api lib	count=1
function	probability of all samples ||| prob	count=1
function	mix of features ||| mixed features arbitrary weights	count=2
arg	the parameters of op ||| op	count=1
module	from a ||| contrib learn python learn	count=1
function	a benchmark directly ||| global report benchmark	count=1
function_arg	dynamic shape [arg_2] ||| [arg_2] [function_1]	count=1
function	root mean ||| root mean	count=2
function	2 audio ||| audio	count=1
class	sequence of ||| tokenizer	count=1
arg	in ||| output_dir	count=1
function	to use based on ||| to	count=1
arg	given mean var ||| mean var	count=2
module	inserted/accessed in ||| tensorboard backend event_processing	count=1
arg	the cells in dim_indices ||| dim_indices conf cells	count=1
function	shape of ||| shape	count=7
function	conv2d produce the same ||| conv2d	count=1
function	a directory [function_2] ||| [function_2] [function_1]	count=1
function	the life time ||| enter	count=1
arg	function call node op ||| op	count=1
arg	lookup ||| vocabulary_file vocab_size default_value name	count=1
module	load() ||| backend	count=1
module	current ||| keras	count=1
function	[function_1] logistic ||| [function_2] [function_1]	count=1
arg	cells in dim_indices ||| dim_indices conf cells c_prev	count=1
function	global_step tensor ||| global step	count=1
function_arg	with op ||| with op	count=1
function_arg	pads a [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	a dense [arg_2] ||| [function_1] [arg_2]	count=4
function	read in the ||| read	count=1
function	summary of a ||| summary	count=1
function	without a ||| without	count=1
function	get the tensorshape ||| get	count=1
module	menuitem from ||| python	count=1
function	for nearest neighbor resizing ||| resize nearest neighbor	count=1
arg	lstm across all steps ||| inputs noutput scope	count=1
module	the image ||| contrib image python ops	count=1
module	node-status ||| python debug	count=1
module	files ||| tools	count=1
function	construct an identity matrix ||| eye	count=1
class	check to ||| upgrade files	count=1
class	op with the ||| operation	count=1
function_arg	[function_1] record ||| [function_1] [arg_2]	count=1
function	header for use ||| get header	count=1
class	test ||| server test	count=4
arg	tensor x along axis ||| x axis exclusive	count=1
module	node ||| debug lib	count=1
module	lists of unique ||| labeled_tensor python ops	count=1
module	proper ||| ops	count=1
class	client ||| curses navigation history	count=1
arg	given value to ||| value	count=3
module	to ops that ||| contrib graph_editor	count=1
function	allowed using client feed ||| feed keys	count=1
function	on a ||| on	count=2
module	each text ||| python	count=1
function	exceptions ||| exceptions	count=1
module	estimator ||| learn estimators	count=1
arg	of co-existance of ||| y input_fn feed_fn	count=1
arg	diagonal matrix ||| diag	count=1
function	sessionlog start [function_2] ||| [function_1] [function_2]	count=4
function	assert works with tensors ||| assert	count=1
function	not ||| not	count=2
arg	input feature_columns ||| feature_columns	count=1
function	_guideref from the ||| build	count=1
function	transposes ||| sparse transpose	count=1
function	classification signature from ||| classification signature fn	count=2
class	grad context ||| grad	count=1
class	proper ||| dirichlet	count=1
function	elements of a tensor ||| elements	count=1
arg	estimated size of ||| print_info	count=1
module_class	this op ||| framework operation	count=2
function	ops to restore ||| restore ops	count=1
function	[function_1] absolute error ||| [function_1] [function_2]	count=2
arg	[arg_1] the audio_summ ||| [arg_2] [arg_1]	count=4
module	that [module] set ||| [module]	count=1
function	creates a dynamic ||| dynamic rnn	count=1
function	spatial zoom of a ||| zoom	count=1
function	[function_1] root directory ||| [function_2] [function_1]	count=1
class	we don't have ||| files	count=1
function	data distribution ||| data distribution	count=2
arg	predictions ||| predictions	count=29
function	tensor or ||| to tensor or	count=1
arg	from multiple devices ||| per_device restore_sequentially reshape	count=1
arg	a lower triangular ||| tril	count=1
function	the batchwise kl divergence ||| kl	count=1
arg	the offset in the ||| offset	count=1
module	'graph and session and ||| python learn	count=1
arg	with block closing the ||| unused_type unused_value unused_traceback	count=1
module	tensors linked ||| graph_editor	count=1
arg	value of ||| value	count=2
arg	converts x ||| x	count=1
module	prepended to all ||| contrib linalg	count=1
class	left batch ||| operator pdbase	count=1
module	vector of ||| ops	count=4
arg	selects fn_then() or fn_else() ||| fn_then fn_else	count=1
module	the specified output of ||| ops	count=2
function	computes distance between ||| distance	count=1
module	[module_1] and ||| [module_2] [module_1]	count=4
function	mean absolute [function_2] ||| [function_1] [function_2]	count=3
function	example [function_2] ||| [function_2] [function_1]	count=1
arg	given ids and weights ||| params sp_ids sp_weights partition_strategy	count=2
module	1 outcome ||| python ops distributions	count=1
arg	dicts of same ||| rtol atol	count=1
class	check to make sure ||| upgrade files	count=1
function	ops that match the ||| filter	count=1
module	for ||| python debug cli	count=2
class	a new tensor ||| tensor	count=1
module	dumps all layer ||| python keras engine	count=1
function	the projections of ||| projections	count=1
function	[function_1] the items ||| [function_1] [function_2]	count=1
arg	a new value ||| value use_locking	count=2
class	the monitored session ||| monitored session	count=2
function	[function_1] signature from ||| [function_2] [function_1]	count=9
function	[function_1] params used ||| [function_2] [function_1]	count=5
function	config ||| config	count=1
function	of the tfdbg logo ||| get tfdbg logo	count=1
function	stochastic ||| stochastic	count=2
module	evaluating a ||| contrib tensor_forest	count=1
function	size ||| size internal	count=1
module_class	params [module_1] [class_2] canonical format ||| [module_1] [class_2] params	count=1
module	conv ||| keras applications	count=1
module	inception ||| slim nets	count=2
module	a rnn cell ||| rnn python	count=1
class	[class_1] gradient ||| [class_1] [class_2]	count=1
function	initializes all ||| initialize all	count=2
class	renorm ||| batch normalization	count=1
function	of compressed ||| compressed	count=1
arg	precision@k ||| predictions_idx weights metrics_collections	count=1
function	runs ||| runs	count=1
function_arg	outputs [arg_2] ||| [function_1] [arg_2]	count=5
function	of the resultant of ||| compute elemwise op	count=1
function	[function_1] argument to ||| [function_2] [function_1]	count=2
function	full [function_2] ||| [function_2] [function_1]	count=2
function	false positives ||| streaming sparse false positive at k	count=1
function	[function_1] integer weights ||| [function_2] [function_1]	count=1
function	generate a list of ||| list	count=1
class	descent [class_2] ||| [class_2] [class_1]	count=1
function	rfft ||| rfft	count=1
arg	fixedlengthrecordreader ||| record_bytes header_bytes footer_bytes hop_bytes	count=1
function	[function_1] outputs ||| [function_1] [function_2]	count=4
function	[function] = l ||| [function]	count=1
class	check ||| upgrade	count=1
arg	overload for tensor ||| tensor	count=1
function	[function_1] tensor is ||| integer [function_2] [function_1]	count=2
function	names of [function_2] ||| [function_2] [function_1]	count=4
function	matrixtriangularsolve ||| matrix triangular solve	count=1
arg	for incompatible changes ||| in_filename out_filename	count=1
module	get ||| contrib graph_editor	count=2
arg	on the sufficient statistics ||| counts mean_ss variance_ss shift	count=1
function	its ||| from	count=1
arg	given tensors ||| step tensors	count=1
class	concrete subclasses ||| interactive debug wrapper session	count=1
class	a tensor in the ||| tensor	count=1
function	directory containing all the ||| dir with all	count=1
arg	recall@k of top-k predictions ||| top_k_predictions class_id	count=1
arg	unique or index ||| index	count=1
function	for input with shape=[2] ||| two input	count=3
function	load runs from ||| add runs from	count=2
function	or creates [function_2] ||| [function_2] [function_1]	count=3
function	a root ||| root	count=1
module	of a number of ||| python ops	count=1
arg	prints the ||| print_info	count=1
function	observations ||| observations map	count=1
class	line ||| line	count=1
arg	op_log ||| op_log	count=1
function	loss ||| loss	count=20
function_arg	[function_1] necessary ||| [arg_2] [function_1]	count=6
class	the pooling ||| pooling	count=4
class	a table outputs the ||| lookup interface	count=1
function	graph with constants of ||| constants	count=1
function	that prepares features config ||| feature spec for parsing	count=1
function	the function details ||| function details	count=1
module_class	[module_1] area object ||| [module_1] staging [class_2]	count=1
arg	for tensor ||| tensor	count=1
arg	val ||| val	count=1
function	the [function] ||| get [function]	count=1
function	adds ||| device add	count=1
function_arg	one evaluation [arg_2] ||| [arg_2] [function_1]	count=1
arg	calculation in grad_fn if ||| grad_fn	count=1
function	fill in default values ||| default	count=1
module	tensor of a relaxedcategorical ||| ops	count=1
function_arg	at least [arg_2] ||| [function_1] [arg_2]	count=1
module	execute together ||| batching python ops	count=1
module	of integers ||| contrib keras python keras	count=1
function	of integers ||| texts	count=1
function	deconv ||| get deconv	count=1
function	calculate one step ||| step	count=1
arg	with all 1s ||| feature_columns columns_to_tensors bias_variable columns_to_variables	count=1
arg	var [arg_2] ||| [arg_1] [arg_2]	count=3
module	s of the ||| keras python keras engine	count=1
function_arg	[function_1] filename ||| python lib io atomic [function_1] file [arg_2] contents	count=1
function	evaluation ||| eval	count=2
function	[function_1] [function_2] ||| [function_1] unique [function_2]	count=3
function	[function_1] batch of ||| [function_1] [function_2]	count=12
function	transforms each text ||| to	count=1
arg	while maintaining the ||| outputs_collections	count=1
function	gradients for ||| grad	count=1
module	for decode_gif, decode_jpeg, and ||| python ops	count=1
arg	random centers ||| num_vectors centers	count=1
class	the represented dense tensor ||| sparse tensor	count=1
class	this plugin ||| text plugin	count=1
function	or return index ||| finalize index	count=1
class	values of a tensor ||| tensor	count=1
module_class	event [class_2] ||| [module_1] [class_2]	count=2
function	return a temporary directory ||| get temp dir	count=1
module	function [module_2] ||| [module_2] [module_1]	count=2
arg	each cluster center ||| clusters distance_metric	count=1
function	of predictions ||| to predictions	count=2
arg	an rgb image ||| image delta name	count=1
function	tensorflow graph to ||| graph	count=1
function	all the tensors linked ||| from	count=1
function	possible input options ||| input options	count=2
module	_guideref from the files ||| tools docs	count=1
function	p x >= elbo ||| elbo with	count=1
class	multivariate normal distribution ||| multivariate normal linear operator	count=1
function_arg	a matmul [arg_2] ||| [function_1] [arg_2]	count=1
function	of the tfdbg logo ||| tfdbg logo	count=1
arg	a logdir ||| logdir plugin_name	count=1
module	loss using tf ||| python losses	count=1
function	[function_1] with given ||| [function_2] [function_1]	count=3
arg	rank 1 or 2 ||| name	count=1
arg	[arg_1] and predictions ||| [arg_1] [arg_2]	count=12
function	matrix elements ||| matrix	count=1
arg	a function to structure ||| apply_fn	count=1
arg	by rnncell cell and ||| cell	count=1
module	of d in ||| distributions python ops	count=1
arg	with this name ||| name shape	count=1
function	transforming ||| nodes recursively	count=1
function	in test phase ||| in test phase	count=2
module	returns number of ||| contrib distributions python ops	count=2
class	don't have a ||| test upgrade	count=1
module	for the given ||| python	count=1
function	the main page and ||| request main page	count=1
function	then return ||| valid	count=1
module	computes output ||| python keras engine	count=1
class	valid ||| pdidentity	count=1
module	of ||| bayesflow python ops	count=2
module	iterable of ||| plugins	count=1
function_arg	the boundary [arg_2] ||| [arg_2] [function_1]	count=4
function	applies the sum of ||| sum	count=1
function	test data to ||| test data	count=1
module	containing a sequence of ||| python ops	count=1
function_arg	normalizes along ||| normalize x	count=1
function	trace information for a ||| trace info	count=1
function	invalid ||| test invalid number of classes	count=1
function_arg	dense gradients to ||| dense grad	count=2
function	example [function_2] ||| [function_1] [function_2]	count=1
function_arg	in [arg_2] ||| [arg_2] [function_1]	count=2
function	accumulator for each forward ||| forward accumulator	count=1
arg	elements across dimensions of ||| axis keep_dims reduction_axes	count=1
function	compute predictions ||| predictions	count=1
function	n-d convolutions [function_2] ||| [function_2] [function_1]	count=4
module	session and ||| learn python learn dataframe	count=1
module	all ||| python	count=1
function	the stochastic ||| stochastic	count=1
function_arg	[function_1] in graph ||| [function_1] [arg_2]	count=3
function	target ||| target	count=1
function	x >= elbo ||| elbo	count=1
function	have ||| static check for same	count=1
function	tensorarraysplit ||| tensor array split	count=1
class	real graph ||| quantize graph	count=1
function	to save the ||| sharded save ops	count=2
arg	see traverse for details ||| path parent children	count=1
class	_composablemodel ||| composable model	count=2
module	get list ||| debug lib	count=1
function	returns default ||| default	count=1
module	dictionary and ||| python learn	count=1
arg	list of layers ||| layers layer_set	count=1
function	self with at least ||| with rank at least	count=1
function	if it is ||| op if	count=1
function_arg	conjugate gradient [arg_2] ||| [function_1] [arg_2]	count=1
module	its ||| contrib keras python keras engine	count=1
function	the sampled [function_2] ||| [function_1] [function_2]	count=3
function	full [function_2] ||| [function_1] [function_2]	count=2
class	member ||| operator pdcholesky	count=1
function	deepcopy of sparse_column_with_keys ||| sparse column keys deep copy	count=1
function	is probably [function_2] ||| [function_1] [function_2]	count=2
class	tensor version ||| dirichlet multinomial	count=1
function	to observations dict ||| to observations map	count=2
function	predictions ||| predict	count=10
class	only ||| model export utils	count=1
class	then return ||| dirichlet	count=1
function	to debug ||| debug	count=1
module	the vocabulary dictionary ||| contrib learn python learn	count=1
arg	stopatstep monitor ||| num_steps last_step	count=1
function	a scale matrix ||| make scale	count=1
function	nextiteration and [function_2] ||| [function_2] [function_1]	count=2
arg	of symbols to a ||| ids vocab_size embed_dim sparse_lookup	count=1
function	read ||| read	count=5
function	and mirror pad ops ||| and	count=1
function	values then ||| sample	count=1
arg	from thumbnails ||| thumbnails thumbnail_dim	count=1
function	returns the address of ||| address	count=1
function	[function_1] scalar inputs ||| [function_2] [function_1]	count=2
module	the list of the ||| contrib framework python ops	count=1
function	vocabulary dictionary and return ||| fit transform	count=1
function	define a unary operation ||| define unary op	count=1
function	returns whether this is ||| is	count=1
function	dynamic shapes ||| flip vector to matrix dynamic	count=1
arg	filewriter for the ||| logdir	count=1
function_arg	[function_1] record to ||| [function_1] [arg_2]	count=1
function	tensors ||| filter ts	count=1
arg	check that tensors are ||| tensors	count=1
module	linked to ops ||| contrib graph_editor	count=1
arg	gradients for ||| op grad	count=1
module	checkpoint ||| python training	count=2
arg	qualified name ||| name	count=1
function_arg	model variable [arg_2] ||| [arg_2] [function_1]	count=2
function	to the concatenate layer ||| concatenate	count=1
function	adds an ||| add	count=2
module	to a ||| python ops	count=1
arg	xs [arg_2] ||| [arg_1] [arg_2]	count=1
arg	from graph_def ||| graph_def	count=1
arg	opens file path and ||| path options	count=1
function	beginning of training ||| on train begin	count=3
function	a nonexistent tensor filter ||| list tensor nonexistent filter	count=1
function	the unary ||| crf unary score	count=1
function	to train ||| train	count=2
function	[function_1] asset ||| [function_1] [function_2]	count=4
module	prepended ||| linalg	count=1
function	[function_1] as_iterable=true ||| [function_2] [function_1]	count=3
function	restore a [function_2] ||| [function_1] [function_2]	count=1
function	is a switch ||| switch	count=1
module_class	classification [class_2] ||| [module_1] binary [class_2]	count=1
function	for the ||| get	count=1
function	maximum ||| maximum	count=2
function_arg	[function_1] expected_rank ||| [arg_2] [function_1]	count=1
module	constructor ||| debug cli	count=2
function	a link ||| link	count=2
function	[function_1] matrix ||| [function_2] [function_1]	count=14
function	should trigger for the ||| should trigger for	count=1
arg	input_fn diffs ||| x y batch_size num_epochs	count=1
function	op to ||| string to	count=1
module	[module_1] as input ||| [module_1] [module_2]	count=4
function	that labels ||| labels	count=4
module	print ||| tools tfprof	count=1
function	new tensor ||| tensor	count=1
module	of ||| python keras preprocessing	count=2
function_arg	hook to [arg_2] ||| [arg_2] [function_1]	count=3
function	return dict ||| guide	count=1
class	initializes ||| streaming data feeder	count=1
module	this input ||| framework	count=1
module	outcome (vs ||| ops distributions	count=1
function	sparse [function_2] ||| [function_1] [function_2]	count=13
function	v2 ||| v2	count=1
class	construct a quantized distribution ||| quantized distribution	count=1
arg	infers fft_length argument ||| fft_rank	count=2
module	a batch [module_2] ||| [module_2] [module_1]	count=2
function	if all are ||| hooks	count=1
class	[class_1] tensorarray ||| [class_2] [class_1]	count=4
function	a richtextlines ||| text lines from	count=1
arg	run and [arg_2] ||| [arg_1] [arg_2]	count=5
function	the condition based on ||| scalar condition	count=1
function	an attribute (e ||| attribute	count=1
module	get a menuitem from ||| debug cli	count=1
class	that the decoder can ||| data decoder	count=1
class	multivariate ||| multivariate	count=3
function	log ||| with log	count=1
arg	collect the ||| graph_def	count=1
arg	applying [arg_2] ||| [arg_1] [arg_2]	count=2
module	of rank ||| ops	count=1
function	its [function_2] ||| [function_1] [function_2]	count=1
function_arg	batches the [arg_2] ||| [arg_2] [function_1]	count=2
function	tensors with different ||| different	count=1
function	[function_1] zero ||| [function_2] [function_1]	count=3
function	wrap a call ||| maybe wrap custom	count=1
class	phased [class_2] ||| [class_2] [class_1]	count=1
function	for node-status labels ||| node status label	count=1
class	weight ||| crossed column	count=1
function	edges related [function_2] ||| [function_1] [function_2]	count=4
function_arg	[function_1] v ||| [function_1] m [arg_2]	count=4
function	have ||| check for same	count=1
function	a numpy implementation ||| total variation numpy	count=2
function	[function_1] menu for ||| [function_2] [function_1]	count=2
arg	to call func ||| func	count=1
function	list of tensor or ||| tensor or	count=1
function	reduce it to 2d ||| reduce to 2d	count=1
arg	[1] see ||| inputs num_classes is_training global_pool	count=3
function	[function] a ||| get dict [function]	count=3
class	control outputs dictionary ||| control outputs	count=2
arg	config [arg_2] ||| [arg_2] [arg_1]	count=1
arg	with these parameters or ||| shape dtype initializer	count=2
function	to loop ||| loop	count=2
function	the list of shapes ||| shapes	count=2
function	one column is empty ||| one column empty	count=1
function	to a richtextlines ||| lines from rich	count=1
function	[function_1] at a ||| [function_1] [function_2]	count=1
arg	inp ||| inp	count=1
arg	of a variable ||| variable value	count=1
class	current batch ||| next queued sequence batch	count=1
function_arg	collection with [arg_2] ||| [function_1] [arg_2]	count=2
function	convert default [function_2] ||| [function_2] [function_1]	count=2
function	for all inputs ||| inputs tensor info	count=1
function	an entire tree of ||| tree	count=1
function	pool along [function_2] ||| [function_2] [function_1]	count=6
function	[function_1] a control ||| [function_1] [function_2] dependency	count=1
function	metagraphdef to ||| export meta graph	count=1
module	-> _guideref ||| tools docs	count=1
arg	loc [arg_2] ||| [arg_2] [arg_1]	count=2
function_arg	[function_1] a graph ||| [function_1] [arg_2]	count=1
module	1 outcome ||| distributions	count=1
function	run an lstm ||| lstm	count=1
module	dataframe into two dataframes ||| contrib learn python learn dataframe	count=1
function	to non-negative ||| non	count=1
function	an n-d convolution followed ||| convolution	count=1
function	[function_1] training loss ||| [function_2] [function_1]	count=8
function	create ||| maybe create	count=1
function_arg	relative error [arg_2] ||| [function_1] [arg_2]	count=5
module	make sure we don't ||| compatibility	count=1
module	a tensor for ||| python	count=1
function	allowed using client feed ||| with tensor feed	count=1
function	returns and create ||| create	count=1
function	parses input arg ||| arg	count=1
function	specific plugin ||| plugin	count=1
function	[function_1] mean ||| [function_2] [function_1]	count=7
function	conv2d produce ||| conv2d	count=1
function	model_fn ||| model fn	count=6
function	that ||| test	count=2
arg	beta and gamma ||| beta	count=1
function	get ||| node status	count=1
class	tensor in the ||| tensor flow	count=1
function	lists ||| list	count=2
class	file [class_2] ||| [class_2] [class_1]	count=1
module	estimate ||| contrib training python training	count=1
arg	var beta ||| var beta	count=2
module	slice ||| contrib keras python keras engine	count=1
function	[function_1] command ||| [function_2] [function_1]	count=3
function	distance [function_2] ||| [function_2] [function_1]	count=2
arg	match the given regex ||| ops regex	count=1
module	of a 1 ||| distributions python ops	count=3
arg	from predictions ||| predictions num_classes dtype	count=2
function	to a hparamdef ||| to proto	count=1
function	of predictions with respect ||| precision at top k	count=2
function	the grad state for ||| grad state	count=1
function	[function_1] of columns ||| [function_2] [function_1]	count=2
class	add ||| local clidebug hook	count=1
arg	tf nn sigmoid_cross_entropy_with_logits ||| logits multi_class_labels	count=1
function_arg	context [arg_2] ||| [function_1] [arg_2]	count=1
arg	protocol buffer ||| key export_scope	count=1
arg	see ||| input_fn	count=2
function	add ||| add sharded	count=3
function_arg	callable that [arg_2] ||| [arg_2] [function_1]	count=1
function	header for use with ||| header	count=2
function	handle ||| session handle	count=1
function	simple util to ||| to	count=1
module	in a list of ||| ops	count=1
function	of graph [function_2] ||| [function_1] [function_2]	count=1
function_arg	to restore [arg_2] ||| [arg_2] [function_1]	count=1
function	all required arguments are ||| required arguments	count=2
class	textual data ||| plugin asset	count=1
function	the summary op either ||| get summary op	count=1
function	output tensors ||| outputs	count=1
class	common config for ||| parser config	count=1
module	if colocate_clip_ops_with_vars ||| opt python	count=1
function	inputs of this op ||| inputs	count=1
arg	method named schedule ||| schedule	count=1
module	of ||| contrib rnn python ops	count=8
function	loss to ||| loss	count=1
module	return indexies of ||| python	count=1
function	connected layer and ||| connected	count=1
class	of the op ||| operation	count=1
function	serving ||| default serving input	count=1
arg	matmul x [arg_2] ||| [arg_1] [arg_2]	count=6
function	[function_1] weights of ||| [function_2] [function_1]	count=3
function	train serverdef for this ||| def	count=1
module	of the tensor ||| contrib labeled_tensor python ops	count=2
function	based on ||| on	count=1
function	create a ||| init	count=24
function	dict into [function_2] ||| [function_1] [function_2]	count=1
function	flops for ops from ||| get logged	count=1
module	from the ||| tools docs	count=1
function	are discarded ||| data discarded	count=1
function	arguments are [function_2] ||| [function_1] [function_2]	count=5
arg	when the coordinator ||| coord	count=1
function	calculate the total ||| total	count=1
function	an exception ||| assert has	count=1
function	for loss ||| loss	count=1
class	debug tensor ||| base debug	count=1
class	adagrad [class_2] ||| [class_2] [class_1]	count=1
arg	called at the ||| logs	count=4
module	is where the layer's ||| contrib keras python keras engine	count=1
arg	of value ||| value decay weight truediv	count=1
function	same as linear_model_fn but ||| model fn with model fn	count=2
arg	i will correspond to ||| sp_input perm name	count=1
function	variables ||| variables to	count=1
function	[function_1] [function_2] that ||| [function_1] [function_2]	count=6
function_arg	in [arg_2] ||| [function_1] [arg_2]	count=1
class	tests ||| event accumulator test	count=2
function	tf examples to ||| from examples	count=1
module	matrix data as input ||| python learn estimators	count=5
arg	an [arg_2] ||| [arg_2] [arg_1]	count=4
function	and add it ||| add	count=1
function	checks the [function_2] ||| [function_2] [function_1]	count=4
function	[function_1] items ||| [function_1] [function_2]	count=1
module	sessionrunhook raises ||| python estimator	count=1
module	of ||| contrib linear_optimizer python ops	count=1
function_arg	call node in ||| call node	count=1
function	wrap a call to ||| maybe wrap custom	count=1
arg	proto_type for collection_name ||| collection_name	count=1
arg	an object [arg_2] ||| [arg_1] [arg_2]	count=1
function	[function_1] finite ||| [function_1] [function_2]	count=1
function	returns the name of ||| name	count=3
function	linear_model_fn but returns ||| linear model fn with model fn	count=2
function	table ||| table from	count=1
module	cell [module_2] ||| [module_1] python [module_2]	count=1
class	index a file ||| guide index	count=1
function	returns a tensor for ||| get	count=1
function	used ||| info	count=1
function	string_to_hash_bucket op to ||| string to hash bucket	count=1
arg	predictions, ||| predictions	count=1
class	generator into the queue ||| generator enqueuer	count=1
function_arg	mask [arg_2] ||| [arg_2] [function_1]	count=3
function	subset [function_2] ||| [function_1] [function_2]	count=1
class	probability ||| relaxed bernoulli	count=1
function	to a richtextlines object ||| rich text lines	count=1
function	completion items to a ||| items	count=1
function	[function_1] hashed bucket ||| [function_2] [function_1]	count=1
class	one output tensor ||| export output	count=1
function	richtextlines ||| rich text lines from rich	count=1
class	the ||| menu	count=1
function	symbol name -> _guideref ||| build guide index	count=1
class	concrete ||| interactive debug wrapper	count=1
function	gets or [function_2] ||| [function_1] [function_2]	count=5
class	cell and ||| rnncell	count=1
class	value should ||| stochastic value	count=1
function	the object's docstring and ||| docstring	count=1
arg	[arg_1] @ b ||| [arg_2] [arg_1]	count=4
module	all the element in ||| graph_editor	count=1
arg	reduces grad ||| grad	count=1
function	resnet-101 model of ||| 101	count=1
arg	front) a single line ||| line font_attr_segs	count=1
function	whether this ||| is	count=1
function	parameters ||| params	count=3
module	returns a ||| python framework	count=4
arg	appearing in the ||| log_p q z n	count=1
module	[module_1] cell with ||| [module_2] [module_1]	count=1
function_arg	[function_1] predictions, ||| [arg_2] [function_1]	count=2
arg	recall@k ||| class_id	count=2
function	real ||| real	count=10
arg	if one exists ||| meta_graph_def_to_load	count=1
arg	cells in dim_indices dimensions ||| dim_indices conf cells c_prev	count=1
function	a ||| a	count=1
module	linked to ops ||| contrib	count=1
module	see ||| slim python slim	count=2
function	the asset [function_2] ||| [function_2] [function_1]	count=4
class	normal ||| normal diag plus	count=1
function	menuitem ||| caption to item	count=1
function	the initial [function_2] ||| [function_2] [function_1]	count=3
module	a tensor for the ||| python	count=1
function	local variable ||| create local	count=1
function	all the [function] ||| get [function]	count=1
function	converts an indexedslices object ||| indexed slices to	count=1
function	value dtype ||| value dtype	count=2
module	indexies of ||| python learn preprocessing	count=1
module_class	[module_1] tensorarray ||| [module_1] [class_2]	count=11
function	number of elements ||| size	count=7
function_arg	observations dict [arg_2] ||| [function_1] generator [arg_2]	count=1
function	applies batch normalization ||| batch normalization	count=2
module	constructor ||| python estimator export	count=2
class	saver state after a ||| saver	count=1
function	a random spatial shear ||| random shear	count=1
function	multiplies the values ||| prod	count=1
module	prepended to all ops ||| contrib linalg python ops	count=1
function	random rotation of ||| random rotation	count=2
arg	use a gradient-based optimizer ||| mode params	count=1
function	_targetcolumn for binary ||| binary svm target	count=1
function	predict method ||| predict	count=5
function	compares two ||| compare	count=1
class	a table ||| mutable hash table	count=1
arg	actual value tensor ||| actual static_shapes	count=1
function	average pooling ||| avg pool	count=1
module	which properly compares ||| contrib distributions	count=1
arg	given value ||| value dtype	count=2
function	bucketized ||| bucketized	count=4
function	attribute ||| attribute	count=1
function	list of file ||| file	count=1
function	loss [function_2] ||| [function_2] value [function_1]	count=2
function	full name e ||| full	count=1
function	inverse_event_shape_tensor ||| inverse event shape tensor	count=1
function	applicable to strings ||| dtype string	count=1
function	a line ||| screen add line	count=1
module	that can be used ||| layers	count=1
function	specific plugin ||| retrieve plugin	count=1
class	then ||| dirichlet multinomial	count=2
function	checks ||| maybe assert	count=4
arg	[arg_1] stddev ||| [arg_1] [arg_2]	count=4
function_arg	[function_1] region ||| [function_1] image [arg_2]	count=1
function	regex ||| regex	count=1
class	be produced or ||| indexed	count=1
class	operator to ||| linear operator scaled	count=1
module	return the [module_2] ||| [module_1] [module_2]	count=1
module	[module] single ||| [module]	count=1
module	dimensions of ||| linalg python ops	count=2
module	the ||| contrib learn python learn preprocessing	count=2
arg	outputs in the graph ||| graph	count=1
function	tags that ||| unique tags	count=2
function	bad ||| test bad	count=1
function	get all the tensors ||| from	count=1
module	with the ||| python	count=1
module	number of ||| ops distributions	count=2
function	true if ||| is gputrace	count=1
module	learn the vocabulary dictionary ||| contrib	count=1
function	foldr on ||| foldr	count=1
class	by concrete ||| non interactive debug wrapper	count=1
function	lists of [function_2] ||| [function_2] [function_1]	count=3
function	with real ||| real	count=3
function	when input tensor is ||| tensor input	count=1
function	watch_fn ||| watch fn	count=1
function	graphdef version information ||| def versions	count=1
arg	by pred ||| pred dtype	count=1
function	create ||| create	count=21
module	in the ||| python ops	count=2
arg	from predictions and labels ||| labels predictions num_classes	count=1
function	broadcast leading ||| broadcast matrix batch	count=1
function_arg	irfft [arg_2] ||| [function_1] [arg_2]	count=1
arg	x element-wise ||| x name	count=4
class	multiple output ||| output	count=1
class	eventmultiplexer ||| event multiplexer	count=1
module	instantiates ||| python keras	count=1
arg	linked to ops ||| ops	count=1
function	to use for ||| or dict	count=1
arg	parse [arg] containing ||| [arg]	count=1
arg	gradients for ||| grad	count=2
function	dict symbol ||| guide index	count=1
arg	screen output from a ||| output node_name	count=1
module	graph building doesn't modify ||| contrib tensor_forest hybrid python	count=1
function	convert default ||| convert default	count=1
function	metagraphdef ||| export meta graph	count=2
arg	lower triangular ||| identity_multiplier diag tril	count=1
arg	datasetdataprovider ||| dataset num_readers reader_kwargs shuffle	count=1
function	[function_1] dict to ||| [function_2] [function_1]	count=1
function	the inception ||| inception	count=1
class	fetch mapper ||| mapper	count=1
module	of the ||| contrib linalg python ops	count=2
function	step and estimate ||| step	count=1
function	merge [function_2] ||| [function_1] [function_2]	count=1
function	to tensor ||| tensor	count=1
function	computes cos ||| cos	count=1
function_arg	[function_1] of base_type ||| [function_1] function [arg_2]	count=2
module	a numpy ||| keras python keras	count=1
function	[function] [n1 ||| [function]	count=1
class	input_fn that ||| test	count=1
function	[function_1] logistic regression ||| [function_2] [function_1]	count=10
module	retrieves a ||| keras python keras engine	count=1
function_arg	construct a [arg_2] ||| [arg_2] [function_1]	count=5
function	a hook to ||| hook	count=1
arg	a tree representing the ||| input_type	count=1
arg	using problem type ||| input_tensors output_tensors problem_type	count=1
function	returns ||| collection	count=1
module	batches ||| batching python ops	count=1
arg	loc and [arg_2] ||| [arg_1] [arg_2]	count=1
arg	builds ||| features labels	count=3
class	these parameters ||| store	count=1
function	second test function ||| test function with args kwargs	count=1
function	[function_1] to sparse ||| [function_2] [function_1]	count=15
module	to a multiple of ||| contrib training python training	count=1
class	and return indexies of ||| categorical	count=1
module	of shards ||| ops	count=1
arg	given in input best ||| inputs	count=1
function	@{tensorflow : ||| cc	count=1
module	hparams ||| contrib training python training	count=3
function	default input ||| default input	count=1
function	mul ||| mul	count=1
function	[function_1] rate ||| [function_1] [function_2]	count=1
function_arg	[function_1] stopatstephook ||| [function_1] [arg_2]	count=1
module	node-status ||| python	count=1
class	float ||| rewriter	count=1
function	session bundle [function_2] ||| [function_1] [function_2]	count=3
function	operator from a ||| operator	count=1
arg	gradients ||| grad	count=6
function	of tensor or ||| to tensor or	count=1
function	or creates the ||| or create	count=2
function_arg	creates [arg_2] ||| [function_1] [arg_2]	count=3
class	proper shape values then ||| multinomial	count=1
function	from the ||| item	count=1
class	make sure ||| upgrade files	count=1
function_arg	[function_1] deprecation ||| [arg_2] [function_1]	count=1
module	then return ||| distributions	count=1
function	tensors [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] [function_2] ||| [function_2] features [function_1]	count=3
function	sqss for input ||| inputs for	count=2
class	tensorshape with ||| tensor shape	count=1
function	returns the training ||| training ops	count=2
function_arg	test data [arg_2] ||| [function_1] [arg_2]	count=4
function	don't have ||| test	count=1
function	of seven gaussians ||| scalar univariate	count=1
function	[function_1] of input ||| [function_1] source [function_2]	count=1
function_arg	conv layer [arg_2] ||| [function_1] block [arg_2]	count=1
function	add a list of ||| add	count=1
function	get ||| from regex	count=2
class	index a ||| index	count=1
function	a file against ||| file	count=1
function	device setter if required ||| device setter	count=1
function_arg	doc to [arg_2] ||| [function_1] index [arg_2]	count=1
function	creates a ||| init	count=24
module	1 ||| contrib distributions	count=1
function	strings into int64 ||| string to index	count=1
function	the processor ||| get processor	count=1
function	a subset of columns ||| select columns	count=1
function	partial runs in ||| partial run setup	count=1
class	returns a dict ||| head	count=1
function	dnn-only model ||| dnnonly	count=1
function	labels ||| recall at top k	count=1
function	tensor or indexedslices ||| tensor or indexed slices	count=1
arg	merge op ||| op	count=1
function_arg	[function_1] [arg_2] ||| [function_1] switch [arg_2]	count=3
module	tensor s ||| keras engine	count=6
module	'graph and session and ||| learn dataframe	count=1
class	to the event file ||| summary to event	count=2
module	save ||| keras python keras	count=1
function	find dumped tensor ||| find	count=1
arg	train a model ||| train_samples test_samples input_shape num_classes	count=1
function	utility function for converting ||| conversion function	count=1
function	cell used ||| cell	count=1
function	embedding [function_2] ||| [function_1] [function_2]	count=3
arg	performs a ||| x rg row_axis col_axis	count=1
function	set caching_device ||| set caching device	count=1
function	and thin [function] faster ||| [function]	count=1
function	each ||| sequences	count=1
module	tensors specified by the ||| contrib slim python slim data	count=1
function	strings ||| string	count=2
function_arg	distribution as [arg_2] ||| [arg_2] [function_1]	count=2
module	return tensor version ||| python ops	count=1
function	page ||| page	count=6
function	no emitted ||| variable update ops sees updated values	count=1
class	find ||| dump dir	count=1
function	variable-length numeric ||| valued var len	count=1
function	[function_1] tf session ||| [function_2] [function_1]	count=5
module	in this ||| python ops	count=1
function	[function_1] type of ||| [function_2] [function_1]	count=3
function	creates regression ||| regression	count=1
function_arg	[function_1] of many ||| [arg_2] [function_1]	count=1
module	rnn ||| contrib rnn	count=2
arg	tensor with all elements ||| tensor dtype name	count=1
arg	the subgraph sgv ||| sgv control_outputs	count=1
function	and match [function_2] ||| [function_2] [function_1]	count=1
module	events for tags ||| tensorboard backend event_processing	count=1
function	coordinator to stop ||| stop	count=1
arg	runoptions ||| run_options node_name output_slot debug_ops	count=1
class	don't have ||| upgrade	count=1
module	a dataframe into two ||| learn dataframe	count=1
function	has real gradient ||| has	count=1
function	creates a model ||| init	count=2
function	bundle from the ||| bundle or saved model bundle from	count=1
function	total [function_2] ||| [function_2] [function_1]	count=6
module	classification ||| learn python learn estimators	count=2
function	monitoredsession for [function_2] ||| [function_2] [function_1]	count=1
arg	from a graph ||| graph	count=1
function	an output [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] cycling works ||| [function_2] [function_1]	count=1
function	[function_1] ndtri has ||| [function_2] [function_1]	count=2
function	an op for ||| training op	count=2
arg	labels and predictions ||| labels predictions weights metrics_collections	count=2
function	[function_1] with a ||| [function_1] [function_2]	count=8
function	tensors corresponding to row ||| row	count=1
function	an op node ||| op and	count=1
arg	code ||| selector_op	count=1
arg	and checkpoint into constants ||| input_graph input_saver input_binary input_checkpoint	count=1
arg	axes ||| axes	count=1
arg	run ||| run plugin_name asset_name	count=1
module	session ||| python training	count=2
function_arg	that is [arg_2] ||| [arg_2] [function_1]	count=2
module	lists of ||| ops	count=2
function_arg	mean [arg_2] ||| [arg_2] [function_1]	count=2
function	for a single ||| on	count=2
function_arg	sparsetensordensematmul [arg_2] ||| [arg_2] [function_1]	count=1
function	indices of non-zero ||| indices	count=1
module	two lists of unique ||| labeled_tensor python ops	count=1
arg	to split dims values ||| dims	count=1
arg	permute a tensor's axes ||| labeled_tensor axis_order name	count=1
function	text in command ||| command	count=1
module	assert ||| contrib tensor_forest client	count=1
arg	dimension dim ||| dim epsilon	count=1
function	generate main ||| add main	count=1
function	a sum-of-squares ||| mean squared error	count=2
function	all ||| filter ts	count=1
function_arg	postfix representation [arg_2] ||| [function_1] [arg_2]	count=1
function	key [function_2] ||| cli curses ui auto [function_1] [function_2]	count=4
arg	4 arguments ||| features labels mode	count=1
function	[function_1] use for ||| [function_2] [function_1]	count=3
module	to ops ||| distributions python ops	count=1
function	python traceback of ||| node traceback	count=1
arg	precision@k ||| labels predictions_idx class_id	count=1
function	that a model_fn can ||| create model fn ops	count=1
class	check to make sure ||| test upgrade files	count=1
function	with training with ||| train	count=1
module	outcome (vs ||| ops	count=1
function	definition [function_2] ||| [function_2] [function_1]	count=2
function_arg	params used [arg_2] ||| [arg_2] [function_1]	count=1
function	indexies ||| fit transform	count=2
function	two graphdefs ||| equal	count=1
class	create ||| length record reader	count=1
function	[function_1] initialization ||| [function_2] [function_1]	count=4
module	of the ||| contrib factorization python ops	count=1
arg	collects and ||| output_file_path graph ignore_regex_fpaths	count=1
module	binary ||| contrib layers python layers	count=1
class	one output ||| export output	count=1
arg	services and the coordinator ||| threads close_summary_writer	count=1
function	writes to ||| write string to	count=1
function_arg	factory function for building [function_1] [arg_2] ||| tools docs reference resolver [function_1] [arg_2] doc_index	count=1
function	a weighted sum ||| weighted sum	count=4
module	batch of ||| seq2seq python ops	count=1
function	is a variable ||| variable	count=1
class	to make sure ||| test upgrade files	count=1
class	the stepper ||| stepper	count=1
module	pbtxt file containing ||| saved_model	count=1
function_arg	[function_1] to variabledef ||| [function_1] v [arg_2]	count=1
module	get a ||| python debug	count=1
function_arg	[function_1] at full_path ||| [arg_2] [function_1]	count=2
module	list ||| python debug lib	count=1
function	return the raw handle ||| raw handle	count=1
function	a merge ||| merge	count=1
function	values ||| assert	count=1
function	their [function_2] ||| [function_1] [function_2]	count=1
function	-> _guideref from ||| build guide	count=1
arg	into num_shards ||| num_shards	count=1
function	vector ||| vector	count=4
function	to use based ||| string to hash bucket fn	count=1
function	from tensor ||| tensor	count=1
function	a restart is ||| restart for file version less than2	count=1
function_arg	task in [arg_2] ||| [function_1] address [arg_2]	count=1
arg	tag ||| tag	count=5
function	the op to ||| op	count=1
arg	[arg_1] keys and ||| [arg_2] [arg_1]	count=1
class	apply this transform to ||| transform	count=2
class	adagrad [class_2] ||| [class_1] [class_2]	count=1
class	a registered ||| registry	count=1
function	should ||| keys should work	count=1
module	integers ||| contrib	count=1
module	build the ||| contrib	count=1
module_class	adds an unref to [module_1] [class_2] timestamp ||| [module_1] [class_2] tracker add unref timestamp	count=1
module	of ||| python keras	count=1
function	an rnn [function_2] ||| [function_2] [function_1]	count=3
module_class	[module_1] tensorflow ||| [module_1] [class_2]	count=1
function	lookup embedding ||| embedding lookup sparse	count=1
module_class	node [class_2] ||| [module_1] node [class_2]	count=1
function_arg	cross entropy [arg_2] ||| [function_1] _sentinel labels [arg_2]	count=3
function	from ||| take	count=1
arg	given ||| tensor	count=1
function	[function_1] weight column ||| [function_1] [function_2]	count=6
function	[function_1] [function_2] symbol ||| tools docs parser config [function_2] name [function_1] full_name	count=9
function	with given weight ||| with weights	count=9
function	matmul [function_2] ||| [function_2] [function_1]	count=3
function	start the [function_2] ||| [function_1] [function_2]	count=4
function	evaluation [function_2] ||| [function_2] [function_1]	count=3
module	the next runge-kutta ||| contrib integrate python ops	count=1
function	to determine the ||| predict classes	count=2
function	test [function_2] ||| [function_1] [function_2]	count=9
arg	an image ||| image seed	count=1
function	of given variable or ||| set variable or	count=1
function	that maps input key ||| preprocess input exprs	count=1
function	each text ||| texts to	count=1
arg	session for given ||| session step	count=1
function	export in a ||| export	count=1
function_arg	at a [arg_2] ||| [function_1] [arg_2]	count=1
arg	starting from ||| initial_cell_state initial_output dtype	count=2
function	dictionary and return indexies ||| fit	count=1
function	[function_1] [function_2] ||| [function_2] [function_1] input_exprs_str	count=2
function	[function_1] shear ||| [function_2] [function_1]	count=2
class	watch [class_2] ||| [class_2] [class_1]	count=1
class	optimizer from numpy ||| optimizer	count=1
module	can be [module] apply ||| [module]	count=1
function	for graph ||| graph	count=2
arg	appenddocstring object ||| additional_note kwargs_dict	count=1
function	ops that ||| filter ts from regex	count=1
function	slice out ||| slice	count=1
module	and stopping ||| slim	count=1
module	for evaluating ||| tensor_forest	count=1
function	a while loop ||| loop	count=1
arg	from thumbnails and returns ||| thumbnails thumbnail_dim	count=1
module	input ||| inputs	count=1
module	are ||| python estimator	count=2
function	at a given rate ||| at rate	count=1
function	variable or [function_2] ||| [function_1] [function_2]	count=3
module	it to placeholders ||| learn_io	count=1
module	previous output tensors from ||| grid_rnn	count=1
function	table [function_2] ||| [function_2] [function_1]	count=1
function	the node from ||| node	count=1
function	to use ||| string to	count=1
arg	value value is a ||| value	count=1
function	of the tfdbg ||| get tfdbg	count=1
module	const ops ||| tools	count=1
class	[class_1] lstm ||| [class_2] [class_1]	count=1
function_arg	[function_1] the biasaddgrad ||| [function_1] op [arg_2]	count=1
function	the tensors ||| filter ts	count=1
module	process to which this ||| client	count=1
function	an op ||| variable op	count=1
arg	steps and ||| inputs noutput scope	count=1
module	exports ||| learn python learn utils	count=1
function	indices into string ||| index to string	count=1
function	get ||| label	count=1
module	tuple of ||| python ops	count=2
arg	a hdf5 save file ||| filepath by_name	count=1
function	variable scope ||| variable scope	count=4
arg	according to partition graphs ||| is_control	count=1
arg	scaling the entire ||| level noise_shape seed	count=1
function	by ||| order	count=1
class	process ||| py guide parser	count=1
class	to the ||| builder	count=1
module	this ||| contrib linalg python ops	count=2
module	which ||| distributions python ops	count=1
arg	distributions ||| scale validate_args	count=1
function	table that ||| index table	count=1
function_arg	output predictions [arg_2] ||| [arg_2] [function_1]	count=2
function	metric names ||| metric	count=1
module	for proper ||| ops distributions	count=1
arg	of the predictions ||| predictions	count=5
function	for variable-length numeric data ||| var len	count=1
function	a placeholder tensor ||| with placeholder	count=1
arg	fft_length argument for a ||| fft_rank	count=2
function	normalizes types ||| normalize	count=1
module	helper which properly ||| contrib distributions	count=1
function	for variable-length ||| var len	count=1
function	[function_1] signature ||| [function_1] [function_2]	count=6
arg	x to a ||| x	count=1
function	an arg_scope ||| arg	count=1
function	for ||| proto	count=1
module	the vocabulary dictionary and ||| contrib learn python learn preprocessing	count=1
module	the axis_order set ||| python ops	count=1
arg	to partitions ||| partitions	count=1
class	the vocabulary after which ||| categorical vocabulary	count=1
function	loss functions ||| check loss	count=1
function	[function_1] operation that ||| [function_1] [function_2]	count=3
function	edges related to debug ||| edges of debug	count=1
module_class	[module_1] session creator ||| [module_1] chief [class_2]	count=1
function	the ||| filter ts from regex	count=4
arg	in base_dir ||| base_dir	count=2
function_arg	[function_1] [arg_2] ||| [function_1] generator [arg_2]	count=12
arg	dimension to ||| dim epsilon scope	count=1
module	compilation ||| compiler	count=2
module	elbo ||| bayesflow python ops	count=1
function	[function] shape ||| compute [function]	count=1
function	op to form ||| op	count=1
function	runs in ||| run	count=1
arg	row and column ||| cls rows cols num_shards	count=1
module	copy ||| contrib copy_graph python util	count=1
module	vocabulary ||| contrib learn python learn	count=1
module	of integers ||| preprocessing	count=1
function_arg	[function_1] each subdataframe ||| [arg_2] [function_1]	count=5
function	n-d ||| convolution	count=1
class	maybe ||| event accumulator	count=1
function	higher dimension ||| higher dimension	count=2
class	the ||| summary writer	count=1
module	a rnn cell composed ||| contrib rnn	count=1
function	collection ||| collection	count=2
function	predictions ||| recall at k	count=1
arg	[arg_1] a target ||| [arg_1] [arg_2]	count=1
class	staging area ||| staging area	count=5
arg	prior ||| prior	count=1
function	[function_1] walsfactorization ||| [function_2] model [function_1]	count=1
arg	make block_shape divide ||| block_shape base_paddings	count=1
function	returns a ||| get checkpoint	count=1
function	then ||| assert	count=1
module	version with default shuffle ||| contrib learn python learn	count=1
module_class	in [class_2] ||| tensorboard backend [module_1] [class_2]	count=1
module	(vs ||| ops	count=1
module	a bijector ||| contrib distributions python ops bijectors	count=1
arg	a resnet_v1 bottleneck ||| scope base_depth num_units stride	count=1
function	a shallow structure of ||| shallow structure	count=1
function	tf events file ||| events file	count=2
module	that creates training and ||| learn python learn	count=1
arg	a looperthread ||| timer_interval_secs target args kwargs	count=1
module	shape values then ||| ops distributions	count=1
module_class	[module_1] t ||| [module_1] [class_2]	count=1
function	[function_1] 'n' ||| [function_1] [function_2]	count=1
arg	lower triangular ||| identity_multiplier diag tril event_ndims	count=1
class	normalization and ||| norm	count=1
function	creates a _targetcolumn for ||| target	count=1
function	overriding tensor ||| remove override	count=1
function_arg	[function_1] [arg_2] tensor_forest ||| [function_1] or dict [arg_2]	count=3
arg	sparsetensorsmap and ||| container shared_name	count=1
function	creates an ||| init	count=2
arg	labels and ||| labels weights	count=2
function	for test [function_2] ||| [function_1] [function_2]	count=1
arg	on a debugdumpdir object ||| debug_dump tensor_filters	count=1
function	file path from ||| file path	count=2
class	constructor ||| ui	count=1
function	self with ||| with rank	count=1
function	kernel mappers provided ||| kernel mapper	count=2
function	returns a [function_2] ||| [function_1] unique target [function_2]	count=2
arg	create a tf learn ||| pandas_dataframe num_threads enqueue_size	count=1
class	the tensorarray [class_2] ||| [class_2] [class_1]	count=2
function	input parsing using ||| input	count=1
module	given ||| python learn estimators	count=2
arg	labels into [arg_2] ||| [arg_1] [arg_2]	count=1
class	these student's ||| vector student	count=1
function	resnet_v2() for arg ||| v2	count=2
function	tensor ||| assert valid sample	count=1
function	generate a signaturedef proto ||| as signature def	count=1
module	transforms each ||| keras	count=2
module	default keras ||| contrib keras python keras	count=1
arg	collects and stores ||| output_file_path graph ignore_regex_fpaths	count=1
function	la ||| concatenate unique	count=1
module	of dimensions and ||| distributions python ops	count=1
function	gradients [function_2] ||| [function_1] [function_2]	count=4
function	output [function_2] ||| [function_1] [function_2]	count=9
class	the debug tensor ||| debug	count=1
arg	a tree representing the ||| input_shape input_type	count=1
function	single numpy printoption from ||| numpy printoption	count=1
function_arg	[function_1] of tensors ||| [arg_2] [function_1]	count=1
arg	parameters for ||| input_size use_peepholes cell_clip	count=1
function	returns the sum of ||| add	count=1
class	r batch systems ||| pdbase	count=1
class	predictions ||| linear classifier	count=1
module	internal vocabulary ||| keras preprocessing	count=1
function	different ||| different	count=1
function	we can disable ||| disable	count=4
class	state for the ||| state	count=1
function	exp x ||| expm1grad	count=1
module	instantiates the ||| python ops	count=1
function	and hooks ||| and hook	count=2
arg	the given ids and ||| params sp_ids sp_weights partition_strategy	count=1
module	1 outcome ||| ops	count=1
function	for numpy arrays ||| array	count=1
function	a sentinel event ||| get sentinel event	count=2
class	creates a failedpreconditionerror ||| failed precondition error	count=1
class	function that will sample ||| feeder	count=1
function	score [function_2] ||| [function_2] [function_1]	count=5
function	[function_1] use ||| [function_1] [function_2]	count=3
module	tuples of ||| ops	count=1
class	the grad state ||| state	count=1
function	for partial runs ||| partial run setup	count=1
arg	each tensor in tensor_list ||| tensor_list num_epochs shuffle	count=1
class	the glimpse ||| extract glimpse	count=1
arg	var beta and gamma ||| var beta	count=1
function_arg	[function_1] solver ||| [arg_2] [function_1]	count=2
function	merges preceding [function_1] [function_2] ||| python tools fuse [function_1] [function_2]	count=4
function	auc via ||| auc	count=2
module_class	[module_1] tensor with ||| [module_1] [class_2] tracker add unref timestamp	count=1
arg	for the screen output ||| output node_name enable_list_tensors	count=1
function_arg	product [arg_2] ||| [function_1] [arg_2]	count=3
arg	with block closing ||| unused_type unused_value unused_traceback	count=1
module	of images by a ||| ops	count=1
function	has a conv ||| conv	count=1
function	status [function_2] ||| [function_1] [function_2]	count=3
module	classification ||| python learn estimators	count=2
arg	to axis in x ||| x axis	count=1
module	returns a list of ||| ops	count=8
function	the signaturedef ||| def	count=1
function	data types into ||| data type	count=1
function_arg	rnn decoder [arg_2] ||| [arg_2] [function_1]	count=1
function	pil format ||| img	count=1
class	the grad state ||| flow state	count=1
arg	a state saving sequence ||| cell features labels	count=1
function	loads ||| load op	count=1
arg	an op to a ||| op	count=1
module	of ||| contrib keras	count=1
function	get ||| get name scope	count=1
arg	for softmaxcrossentropywithlogits ||| grad_loss grad_grad	count=1
module	tensor and returns ||| keras	count=1
module_class	[module_1] table ||| [module_1] [class_2]	count=2
function_arg	a postfix [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] address [arg_2]	count=8
function_arg	positives [arg_2] ||| [arg_2] [function_1]	count=8
function	[function] labels ||| [function] precision at top	count=1
function	returns the last ||| last	count=1
function	column with vocabulary ||| column with vocabulary with dense input tensor	count=1
function	to generate a full ||| full path	count=1
function	up the node's statistics ||| stats for	count=1
function	default signature from ||| default signature	count=2
arg	a variable ||| variable value decay	count=1
function	true positives for ||| sparse true positive at	count=2
function_arg	inference on [arg_2] ||| hybrid python hybrid model [function_1] [arg_2] data_spec	count=1
function	sequence ||| sequences	count=1
function	on bad ||| bad	count=1
module	loads ||| keras python keras preprocessing	count=1
function	bias ||| bias and	count=1
function	sdcaoptimizer and a ||| sdca optimizer	count=1
class	initializes ||| tensor forest estimator	count=1
function	-> _guideref from the ||| build	count=1
arg	processes a ||| tag wall_time step	count=1
module	of each ||| python ops	count=1
module	function of [module_2] ||| [module_1] [module_2]	count=2
function	helper function to parse ||| parse tensor or dict	count=1
function	[function_1] protocol buffer ||| [function_1] [function_2]	count=2
module	and runs a ||| learn python learn	count=1
arg	labeled tensor ||| labeled_tensor axis_order	count=1
module	and scores ||| contrib learn python learn utils	count=1
module	integers ||| contrib keras	count=1
function	static shapes ||| to matrix static	count=1
function_arg	perform [arg_2] ||| [function_1] orig_screen_output [arg_2]	count=3
arg	the parameters ||| num_units use_peepholes share_time_frequency_weights cell_clip	count=1
function	a dictionary of evaluation ||| eval	count=1
function_arg	menu for [arg_2] ||| [function_1] [arg_2]	count=2
arg	verifies the second-order gradients ||| pool_func input_sizes output_sizes window_rows	count=1
function	_get_dense_tensor() for input ||| get dense tensor one input	count=1
function	provided have invalid type ||| invalid number of	count=1
function	it to [function_2] ||| [function_2] [function_1]	count=1
arg	exception if other ||| other	count=1
class	as the statistics ||| statistics	count=1
arg	tf learn ||| cls pandas_dataframe num_threads enqueue_size	count=1
function	list recipients ||| test list recipients	count=2
module	all ||| python estimator	count=2
arg	in dim_indices ||| dim_indices	count=1
function	return a device function ||| device	count=1
module	a menuitem from ||| python	count=1
module	safe ||| contrib losses python losses	count=1
function	creates a _sparsecolumn [function_1] [function_2] configuration ||| python layers sparse column [function_1] [function_2] column_name vocabulary_file num_oov_buckets vocab_size	count=2
arg	expecting feature tensors ||| features default_batch_size	count=1
function	to loss [function_2] ||| [function_2] value [function_1]	count=2
class	[class_1] accumulator ||| [class_2] [class_1]	count=2
class	constructor ||| predict output	count=2
function	returns shape for ||| get in out shape	count=1
module	updates ||| python training	count=1
function	return the function details ||| function details	count=1
class	rnn model ||| cudnn rnn	count=1
function	[function_1] with real ||| [function_2] [function_1]	count=1
function	an op ||| benchmark run op prebuilt	count=1
arg	using tf nn sigmoid_cross_entropy_with_logits ||| multi_class_labels weights	count=1
function	an indexedslices object ||| indexed slices	count=1
class	with these parameters ||| store	count=1
function	[function_1] decoding on ||| [function_2] [function_1]	count=3
function	in test_ops cc ||| version applies to op construction	count=1
module	internal vocabulary ||| contrib keras python keras preprocessing	count=1
function_arg	value of [arg_2] ||| [function_1] [arg_2]	count=2
function	[function_1] the tilegrad ||| [function_2] [function_1]	count=4
function	returns the proto_type ||| get	count=1
class	the debug tensor ||| session debug test base	count=1
class	have ||| upgrade	count=1
function	[function_1] [function_2] ||| [function_1] constant [function_2]	count=3
arg	standardize op ||| name values	count=3
function	from a dictionary ||| from map	count=1
module	given factorization ||| contrib factorization python	count=1
function	produced ||| read	count=1
function	int32 scalar ||| int32 scalar	count=2
function	key [function_2] ||| [function_1] [function_2]	count=1
class	returns an input_fn that ||| test	count=1
module_class	a new [class_2] ||| [module_1] [class_2]	count=40
function	one evaluation ||| do eval	count=1
class	test ||| derived class test	count=2
module	building doesn't ||| hybrid python	count=1
function	is not compatible with ||| is compatible with	count=1
module	tuple of integer[s] ||| ops	count=1
class	providing access to batched ||| queueing state saver	count=1
arg	for an estimator ||| cell_type num_units target_column	count=1
function	json and ||| json	count=1
function	indices for ||| index	count=1
function	the indices ||| indices	count=1
arg	sparse labels ||| labels	count=1
class	a non-reference dtype based ||| dtype	count=1
class	the debug tensor dumping ||| debug test base	count=1
function	move dims ||| move dims	count=1
arg	to sequence model ||| encoder_inputs decoder_inputs encoder_cell decoder_cell	count=1
function	find dumped tensor data ||| find	count=1
arg	the rank of ||| rank	count=1
function	return dict symbol ||| guide index	count=1
function	cont() [function_1] [function_2] ||| [function_1] [function_2]	count=1
function	returns a dictionary of ||| get	count=1
function	number of parameters in ||| count total params	count=1
function	updates the content of ||| update	count=1
function	model_fn that returns ||| model fn	count=1
function	dense feature extraction ||| bottleneck	count=2
function	np matrix elements ||| np matrix	count=1
class	table outputs the corresponding ||| lookup interface	count=1
module	variable of ||| keras python keras	count=2
function_arg	[function_1] [arg_2] ||| [function_1] total loss [arg_2]	count=4
module	dimensions of zero or ||| linalg python ops	count=1
function_arg	dimension [arg_2] ||| [function_1] [arg_2]	count=2
class	the dump (event) file ||| datum	count=1
module	and previous ||| grid_rnn	count=1
function	the mean of ||| reduce mean	count=1
class	tensorarray [class_2] ||| [class_2] [class_1]	count=2
module	a 1 outcome ||| distributions	count=1
arg	xs by [arg_2] ||| [arg_2] [arg_1]	count=1
function	[function_1] variable initialization ||| [function_1] [function_2]	count=2
arg	creates a tensor ||| tensor	count=1
class	constructs ||| kernel estimator	count=1
function	creates a linear operator ||| create operator	count=1
class	if ||| synthetic	count=1
function_arg	sequence [arg_2] ||| [arg_2] [function_1]	count=2
arg	parameters for ||| use_peepholes share_time_frequency_weights	count=1
function	this graph the default ||| default	count=1
function_arg	an experiment [arg_2] ||| [arg_2] [function_1]	count=2
function	bias feature [function_2] ||| [function_2] [function_1]	count=3
function	invalid type ||| test invalid number	count=1
module	the total number of ||| metrics python ops	count=1
function	computes various recall values ||| streaming recall at	count=1
function_arg	[function_1] print ||| [function_1] [arg_2]	count=1
function_arg	[function_1] results accounting ||| [function_1] [arg_2]	count=1
function	[function_1] key not ||| [function_2] [function_1]	count=1
function	dict ||| dict	count=4
function_arg	from restore_checkpoint_path ||| infer restore_checkpoint_path	count=1
function	the collection with the ||| get collection	count=1
function	custom objects ||| custom objects	count=1
function	indices ||| indices	count=5
function	delete the tensor ||| delete	count=1
function	directory traversal attack ||| directory traversal	count=1
function	overriding ||| remove override	count=1
function	replace ||| replace	count=2
class	converts a whilecontext ||| while context	count=1
function	tf operation within ||| within	count=1
function_arg	variables according [arg_2] ||| [function_1] shape [arg_2]	count=1
class	outer context recursively ||| cond context	count=1
module	the list of ||| ops	count=10
function	auc via a ||| auc	count=2
module	of ||| labeled_tensor python ops	count=4
function	meta [function_2] ||| [function_2] [function_1]	count=2
function	for large records is ||| read large	count=1
arg	all categories in ||| unused_y	count=1
class	the graph ||| graph rewriter	count=1
function	test that ||| test	count=3
module	gradient of ||| python ops	count=4
arg	metric ||| scalar_tensor	count=1
module	model ||| python slim nets	count=1
module	a mapping of name ||| ops	count=1
arg	that [arg_2] ||| [arg_2] [arg_1]	count=4
function	weighted ||| weighted	count=7
module	component of a ||| ops	count=5
function_arg	[function_1] dnnlinearcombinedregressor ||| [arg_2] [function_1]	count=1
arg	feeder ||| x_shape y_shape n_classes	count=1
arg	and a target tensor ||| target	count=1
function	learn the ||| fit	count=1
function	tensorboard ||| to tensorboard	count=1
module	infer ||| linalg python ops	count=1
function	sparse softmax ||| deprecated flipped sparse softmax	count=1
function	copies ||| add ngrad	count=1
function	integer indices [function_2] ||| [function_1] [function_2]	count=1
arg	fn1() or fn2() based ||| fn1 fn2	count=1
function	directory [function_2] ||| [function_1] [function_2]	count=1
module	filename linenumber ||| platform	count=1
arg	runs the forward step ||| input_data input_h input_c params	count=1
arg	files given [arg_2] ||| [arg_2] [arg_1]	count=2
function	bidirectional recurrent ||| bidirectional rnn	count=1
function	count the total number ||| count	count=1
class	construct multivariate normal distribution ||| multivariate normal	count=2
module	ids of a ||| contrib factorization python ops	count=1
function	[function_1] with vocabulary ||| [function_2] [function_1]	count=4
module	vocabulary dictionary ||| python learn preprocessing	count=1
function	get all the ||| filter ts from regex	count=1
function	[function_1] connected ||| [function_2] [function_1]	count=4
function_arg	for a [arg_2] ||| [function_1] exit [arg_2]	count=1
arg	tensors from tensors ||| tensors capacity	count=1
function	the variables in a ||| convert variables to	count=1
arg	the biasaddgrad op ||| op received_grad	count=2
function	with dynamic shapes ||| flip vector to matrix dynamic	count=1
function	memory ||| memory	count=1
module_class	the [class_2] ||| [module_1] kernel_tests relaxed [class_2]	count=1
class	transform to ||| flow transform	count=1
module	rnn ||| python learn ops	count=1
class	the directory where event ||| writer	count=1
function	the domain of ||| domain	count=1
arg	dnnlinearcombinedregressor [arg_2] ||| [arg_2] [arg_1]	count=2
module	and feed ||| learn	count=1
function	returns a header for ||| get header from ops	count=1
module	dictionary and return indexies ||| contrib	count=1
class	if the stack is ||| graph stack	count=1
function	the variables updated ||| updated	count=1
function	common to both worker ||| common	count=1
module	using matrix data as ||| learn python learn estimators	count=2
module_class	two eventaccumulators inserted/accessed [module_1] [class_2] ||| tensorboard backend [module_1] [class_2]	count=1
module	updates internal ||| python keras	count=1
module	forest ||| tensor_forest python	count=1
function	directory ||| test directory	count=1
module	helper which properly ||| distributions python kernel_tests	count=1
function	a weighted [function_2] ||| [function_2] [function_1]	count=6
arg	looperthread that calls ||| timer_interval_secs target args	count=1
function	indices of ||| indices	count=1
arg	pure-decoding option ||| initial_state cell num_symbols	count=1
function	[function] it ||| [function]	count=1
function	renyi ||| renyi	count=1
function_arg	[function_1] expression summarizing ||| [arg_2] [function_1]	count=2
class	returns ||| dimension	count=1
class	the watcher ||| directory watcher test	count=1
function	determine the class probability ||| proba	count=2
module	last ||| layers python layers	count=1
function	stridedslicegrad ||| strided slice grad	count=1
function	the update ops ||| update	count=1
function	[function_1] asset from ||| [function_2] [function_1]	count=4
function	batch vector x ||| vector	count=1
function	for an exit ||| exit	count=1
module	the ||| contrib graph_editor	count=16
function	boots 3 servers ensures ||| cluster spec propagation three servers one cluster	count=1
module	helper which properly compares ||| distributions python kernel_tests	count=1
function	classes and ||| build standardized	count=1
module	true iff this ||| framework	count=1
module	estimator ||| contrib learn python learn estimators	count=1
arg	and return the predicted_ids ||| outputs final_state sequence_lengths	count=1
module	session and runs a ||| learn	count=1
function_arg	state names [arg_2] ||| [arg_2] [function_1]	count=1
arg	the parameters ||| input_size use_peepholes cell_clip	count=1
function	summary ||| spec summary	count=1
function	model_fn that returns modelfnops ||| model fn	count=1
function	sparsecolumns accept ||| sparse column accepts	count=1
arg	recall@k of the ||| k weights	count=1
module	has finished processing ||| data	count=1
function	all the keys ||| keys	count=1
module	for a ||| ops	count=2
module_class	this [class_2] ||| [module_1] [class_2]	count=60
function	with static ||| flip vector to matrix static	count=1
function	get a menuitem from ||| to	count=1
function	transpose ||| transpose	count=1
function	feed conversion [function_2] ||| [function_1] [function_2]	count=2
function	load [function_2] ||| [function_2] [function_1]	count=1
arg	summary ||| tag	count=1
function_arg	[function_1] [arg_2] ||| python ops [function_1] op [arg_2]	count=1
function	enqueue ||| enqueue	count=1
function	the tensors ||| filter ts from	count=1
arg	row and ||| cls rows	count=1
function	creates an rnn specified ||| raw rnn	count=1
function	batch_shape, ||| batch shape	count=1
function	with constants of the ||| constants	count=1
function_arg	dimension of [arg_2] ||| [arg_2] [function_1]	count=2
arg	of the convolution function ||| filter_in_sizes stride padding	count=1
class	lstm cell ||| gate lstmcell	count=1
function	metric ops [function_2] ||| [function_2] eval [function_1]	count=1
module_class	of of [class_2] ||| [module_1] [class_2]	count=6
class	represented by this operator ||| linear operator	count=2
arg	a state ||| cell features	count=1
arg	graph to ||| graph	count=1
function	print a ||| print	count=1
function	typeerror ||| check hooks type	count=1
module	test ||| python util	count=1
function	message discards [function_2] ||| [function_2] [function_1]	count=2
function	and ||| with	count=2
class	if the shape is ||| tensor shape	count=1
module	graph building ||| tensor_forest hybrid python	count=1
arg	image ||| image	count=7
function	a feature spec for ||| sequence feature spec for	count=1
function	return a tensor ||| data tensor	count=1
arg	signatures ||| signatures	count=1
module	the path is ||| python	count=1
function	if this operator is ||| operator	count=1
function_arg	[function_1] a single ||| [function_1] batch [arg_2]	count=1
module	of a complex number ||| python ops	count=2
arg	meta graph def ||| export_dir meta_graph_def_to_load	count=1
function	adjust hue ||| adjust hue	count=2
function_arg	control inputs [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] labels [arg_2]	count=8
class	test a ||| subscribe test	count=1
function	and loss functions ||| loss and target	count=1
class	the current batch of ||| batch	count=1
arg	conv ||| filters	count=1
function	the value [function_2] ||| [function_2] [function_1]	count=4
arg	with concentration and ||| concentration	count=1
arg	returns grad * ||| op grad	count=3
module	for ||| ops distributions	count=2
module_class	and output ||| ops output	count=1
module	of the model loading ||| python ops	count=1
function	convert ||| convert to sparse tensor	count=1
function	after restart ||| after restart	count=1
function	of batch ||| batch	count=2
function	sparse softmax cross entropy ||| sparse softmax cross entropy with	count=1
function	tfdbg logo ||| tfdbg logo	count=1
function	op [function_2] ||| [function_2] [function_1]	count=10
class	returns the sum ||| dimension	count=1
function	header for use with ||| header from ops and	count=1
function	binary classification [function_2] ||| [function_2] [function_1]	count=3
module	normally distributed ||| specs python	count=1
function	menu for the ||| menu	count=1
module	dimensions of ||| ops	count=2
function	log ||| log if	count=1
function	active ||| active	count=3
arg	given index ||| index tensor dtype	count=2
function	shapes ||| shapes	count=8
function	[function_1] iff the ||| [function_2] [function_1]	count=2
function	shapes of parameters given ||| shapes	count=1
function	summary computations ||| save summaries	count=1
class	that failed ||| error	count=2
function_arg	product of [arg_2] ||| [function_1] [arg_2]	count=3
function	checks the validity ||| maybe assert valid	count=12
module	given ||| learn python learn	count=5
module	list of tensor ||| layers python ops	count=1
module	binary ||| python layers	count=1
module	all the ||| event_processing	count=1
module	1 ||| contrib distributions python	count=1
module	create ||| gcs_test python	count=1
function_arg	from given examples ||| fn examples unused_features	count=4
class	adds ||| plugin asset	count=1
function	prevents adding the ||| return as is	count=1
function	predictions with respect to ||| precision	count=4
function_arg	[function_1] [arg_2] ||| [function_1] summary [arg_2]	count=1
arg	g input_tensors) from ||| node_index attr attr_name	count=1
function	batch ||| batch features shared	count=1
function	debug-wrapper session ||| session init	count=1
function	after calling reload ||| reload	count=1
arg	tensor in tensor_list ||| tensor_list num_epochs shuffle seed	count=1
function	running an op ||| run op	count=1
module	convolution ||| python slim nets	count=1
function	connect the previously copied ||| connect	count=1
function	number of ||| num	count=3
module	actually ||| python ops	count=1
function_arg	the minimum [arg_2] ||| [arg_2] [function_1]	count=1
module	s of ||| engine	count=10
function	header for ||| header	count=2
function	render traceback of a ||| render node traceback	count=1
function	in parallel ||| parallel	count=1
module	it to placeholders ||| python learn learn_io	count=1
module	layers ||| contrib layers python layers	count=1
function	[function_1] to search ||| [function_2] [function_1]	count=2
class	event ||| event transformer	count=2
function_arg	[function_1] queue_runner_def ||| [arg_2] [function_1]	count=1
function	[function_1] placeholder ||| [function_2] [function_1]	count=4
class	(e ||| operation	count=1
function	sets the root ||| set root	count=2
function	[function_1] invalid type ||| [function_2] kernel [function_1]	count=1
function	num_rows, ||| num rows	count=1
function	linked to ops that ||| regex	count=1
function	indices [function_2] ||| [function_2] invalid [function_1]	count=1
arg	execute the ||| enqueue_op	count=1
function_arg	[function_1] sequences into ||| [arg_2] [function_1]	count=1
class	deletion of this ||| handle	count=1
function	tags after calling reload ||| reload	count=1
function	respect to sparse ||| sparse	count=1
arg	sensitivity ||| predictions labels sensitivity	count=1
class	condcontext ||| cond context	count=3
arg	create batches of examples ||| batch_size capacity enqueue_many	count=1
arg	[arg_1] that satisfies ||| x [arg_1] [arg_2]	count=1
module	the given set of ||| ops	count=1
function	identity ||| identity	count=2
function	mode in which the ||| mode	count=1
function	returns the control flow ||| control flow	count=1
function_arg	[function_1] on hasher_spec ||| [function_1] [arg_2]	count=2
module	of a tf ||| contrib factorization python ops	count=1
function_arg	creates [arg_2] ||| [arg_2] [function_1]	count=3
function	the list of protos ||| protos	count=1
arg	multiple_of ||| multiple_of	count=1
arg	the given estimator to ||| estimator	count=1
function	parse the ||| parse md	count=1
arg	labels and ||| labels dim	count=1
function_arg	shallow structure [arg_2] ||| [arg_2] [function_1]	count=1
function	false positives ||| streaming sparse false positive at	count=1
class	initializes ||| imperative graph	count=1
class	return tensor version ||| dirichlet	count=1
module	_guideref from ||| docs	count=1
arg	that would feed dict ||| y batch_size num_epochs	count=1
function	[function_1] all events ||| [function_1] [function_2]	count=1
function	rnn model [function_2] ||| [function_1] [function_2]	count=2
arg	a line ||| line	count=1
function	a model_fn can ||| model fn ops	count=1
class	return tensor version ||| multinomial	count=1
function	the collection with the ||| add to collection	count=1
function	column [function_2] ||| [function_2] [function_1]	count=10
function	transform ||| transform op	count=1
arg	for linear weights ||| column columns_to_tensors embedding_lookup_arguments num_outputs	count=1
module	bottleneck ||| slim nets	count=4
function	to ||| prepare	count=1
function	trace information ||| store trace	count=1
function	up embeddings ||| embedding lookup	count=2
function	construct a function ||| func	count=1
module	the provided ||| contrib kernel_methods python	count=2
function	for an embedding variable ||| for embedding variable	count=1
function	constructs an ||| init	count=1
class	gradient [class_2] ||| [class_2] [class_1]	count=2
arg	fn2() based ||| fn1 fn2	count=1
arg	fn2() ||| fn1 fn2	count=1
module	format of ||| contrib cudnn_rnn python ops	count=2
function	end [function_2] ||| [function_1] [function_2]	count=2
class	the name of ||| slices	count=1
function	embedding [function_2] ||| [function_2] [function_1]	count=3
function	the rows ||| rows	count=1
arg	maps activations from the ||| activations sequence_length target_column	count=1
module	a sequence ||| python	count=1
module	__init__ which gets ||| distributions python ops	count=1
function	schedule for the provided ||| schedule	count=1
arg	featurecolumns ||| feature_columns	count=2
function	by atrous ||| atrous	count=2
function	dictionary used when evaluating ||| dict	count=1
function	checkpoint ||| checkpoints	count=1
function	nodes that aren't needed ||| remove training nodes	count=1
function	device is ||| device	count=1
module	of beams ||| ops	count=1
function	n-d convolutions actually ||| non atrous convolution	count=2
module	mnist model ||| factorization examples	count=1
arg	and body to ||| body original_loop_vars	count=1
function_arg	[function_1] cell with ||| [arg_2] [function_1]	count=4
module	run ||| python tools	count=1
class	grad state for ||| control flow state	count=1
function	[function] queue runner ||| [function]	count=1
module	which ||| distributions python kernel_tests	count=2
function	method [function] ||| [function]	count=4
function_arg	[function_1] for precision@k ||| [function_1] [arg_2]	count=8
module_class	[module_1] [class_2] ||| [module_1] layer [class_2]	count=4
function	a matrix with given ||| matrix	count=1
class	dump ||| debug dump	count=2
arg	fn_else() ||| fn_then fn_else	count=1
function	of input [function_2] ||| [function_2] [function_1]	count=4
function	rank irfft ||| length for irfft	count=1
function	for single ||| single	count=1
function	a tensor ||| dense tensor	count=1
function	[function_1] model variable ||| [function_1] [function_2]	count=1
function	connect the ||| connect ops	count=1
module	a given number ||| learn python learn	count=1
class	returns a tensor for ||| lazy builder	count=1
arg	method that builds ||| features labels	count=3
module	the outputs of ||| contrib graph_editor	count=2
function_arg	[function_1] some data ||| [function_1] f ins batch_size [arg_2]	count=8
class	graph ||| graph view	count=1
function	batch ||| on batch	count=2
function	the input mask ||| get input mask	count=2
function	write a sequence ||| write histogram series	count=1
function	to use based ||| string to hash	count=1
arg	the output ||| tensor_in_sizes glimpse_sizes offsets expected_rows	count=1
function	deepcopy of [function_2] ||| [function_2] [function_1]	count=11
function	split the ||| split	count=2
module	get [module_2] ||| [module_2] [module_1]	count=5
function	computes sparse softmax ||| deprecated flipped sparse softmax	count=1
function	[function_1] int values ||| [function_2] [function_1]	count=2
function	shape values ||| valid	count=1
function	classification ||| build standardized signature def classify	count=1
function	weights ||| weights	count=12
function	[function_1] by atrous ||| [function_2] [function_1]	count=20
module	dimensions of zero or ||| python ops	count=1
function_arg	placeholder by name ||| placeholder graph_element_name	count=1
function	be ||| prepare	count=1
arg	method that builds model ||| features labels	count=3
function	with vocabulary ||| with vocabulary with dense input tensor	count=1
function_arg	[function_1] name ||| [function_1] var_store [arg_2]	count=1
function	init ||| init	count=4
arg	session for given tensors ||| session step tensors feed_dict	count=1
class	then return tensor ||| multinomial	count=1
function	writes a ||| write	count=1
arg	a run ||| run plugin_name	count=1
class	of node [class_2] ||| [class_1] [class_2]	count=1
arg	graph ||| graph	count=8
function	for a fully ||| legacy fully	count=1
function	to statically compute ||| logical	count=1
class	wrapper ||| debug wrapper session test	count=2
function	[function_1] size ||| [function_1] step [function_2]	count=2
function	connect ||| connect ops	count=2
module	store as self _value ||| contrib bayesflow python	count=1
function	to ||| from regex	count=2
class	the debug-wrapper [class_2] ||| [class_1] [class_2] on	count=1
function	[function_1] index ||| [function_1] doc [function_2]	count=1
function	the savedmodel ||| get saved model	count=1
module	op (e g ||| python framework	count=1
module	is of the ||| python ops assert	count=1
class	to this operator ||| operator	count=2
function_arg	[function_1] to console ||| [arg_2] [function_1]	count=4
class	for an embedding ||| embedding	count=1
arg	the specified axes ||| axes	count=1
function	sort a list ||| sort	count=1
function	logistic metrics ||| logistic metrics	count=2
module	from ||| tools	count=1
function_arg	[function_1] the given ||| [arg_2] [function_1]	count=4
module_class	the model's [class_2] ||| [module_1] [class_2]	count=2
class	decoder can ||| decoder	count=1
function	[function_1] with shape=[2] ||| [function_2] [function_1]	count=12
module	dimensions of zero ||| ops	count=1
function	example ||| example	count=7
module	helper to __init__ which ||| contrib distributions python ops bijectors	count=1
function	[function_1] logistic regression ||| [function_2] eval [function_1]	count=1
function	and a mix ||| mixed	count=2
module_class	two eventaccumulators inserted/accessed [module_1] [class_2] ||| [module_1] [class_2]	count=1
module	a 1 outcome (vs ||| distributions	count=1
arg	[arg_1] rate parameters ||| [arg_1] [arg_2]	count=2
function	vgg 16-layers ||| vgg 16	count=1
function	while [function_2] ||| [function_1] [function_2]	count=3
module	after training ||| learn	count=1
module	parameter p ||| contrib distributions	count=1
module	of a rank-r ||| python ops	count=1
arg	input_tensor ||| input_tensor	count=1
function	arguments to ||| arguments	count=1
function	from a node ||| node	count=2
module	then the cell ||| rnn python ops	count=1
arg	scale ||| scale validate_args	count=1
function	postfix representation of ||| structure	count=1
function_arg	and [arg_2] ||| [arg_2] [function_1]	count=7
class	model for training ||| model	count=1
function	to a sparsetensor ||| sparse	count=1
module	helper which properly compares ||| contrib distributions python	count=1
function	delay between [function_2] ||| [function_2] [function_1]	count=2
function	then ||| assert valid	count=1
arg	transform numeric labels ||| labels	count=1
arg	[arg_1] dicts of ||| [arg_1] [arg_2]	count=1
module	pbtxt file containing ||| contrib saved_model python saved_model	count=1
function	temporarily reroute errors written ||| reroute	count=1
function_arg	pack [arg_2] ||| [function_1] [arg_2]	count=1
arg	removes unneeded pairs of ||| old_graph	count=1
function	[function_1] tags that ||| [function_2] [function_1]	count=1
function	an example ||| row to example	count=1
function	sessionmanager ||| session manager	count=1
arg	a globalstepwaiterhook ||| wait_until_step	count=1
class	to ||| summary to	count=2
function	statically compute ||| logical	count=1
function	create ||| create control	count=1
arg	of symbols to ||| ids vocab_size embed_dim sparse_lookup	count=1
class	report ||| node stepper cli	count=1
function	basic metrics [function_2] ||| [function_1] [function_2]	count=1
function	invalidate ||| invalidate transitively outgoing	count=1
class	event for a given ||| event	count=1
class	text ||| rich text	count=2
module	dropout ||| rnn python ops	count=1
function	metric names to ||| metric map	count=1
module	dataframe with only ||| python learn dataframe	count=1
function	list of input ||| inputs	count=1
module	distribution ||| python ops	count=1
function	prepares a feature spec ||| create sequence feature spec	count=1
class	be produced or none ||| slices	count=1
arg	dim_indices ||| dim_indices conf	count=1
function	the cached ||| outgoing cache	count=1
module	of an rgb ||| ops	count=1
function	the minimum ||| reduce min	count=1
module	based on this ||| python	count=1
arg	proto optionally writes it ||| graph_def	count=1
arg	storing the checkpointstate ||| save_dir latest_filename	count=3
arg	g input_tensors) from a ||| node_index attr attr_name	count=1
module	] ||| contrib bayesflow python ops	count=1
function	it is probably a ||| is tensor flow	count=1
module_class	[module_1] normalization and ||| [module_1] [class_2]	count=1
function	a table [function_2] ||| [function_2] [function_1]	count=1
class	for this data feeder ||| data feeder	count=1
class	of a pooling function ||| pooling	count=1
arg	gradient-based optimizer ||| mode params	count=1
function	shape ||| missing graph shape	count=2
function	from a given mapping ||| from	count=1
module	return indexies ||| python learn	count=1
function_arg	the graph [arg_2] ||| [function_1] [arg_2]	count=1
function	returns a ||| get	count=14
arg	for recall@k and precision@k ||| labels predictions_idx class_id weights	count=1
function	[function_1] dict ||| [function_1] [function_2]	count=2
arg	to the front-end ||| limit_attr_size large_attrs_key	count=1
module	adds ||| python layers	count=1
function_arg	error [arg_2] ||| [function_1] predictions [arg_2]	count=4
arg	function f as ||| f	count=1
class	of load() ||| directory	count=1
module_class	[module_1] array ||| [module_1] tensor [class_2]	count=2
arg	in xs ||| xs name colocate_gradients_with_ops	count=1
module	the eventfilewriter ||| python	count=1
function	compute set [function_2] ||| [function_2] [function_1]	count=2
class	choose ||| replica device chooser	count=1
class	contains the values ||| indexed slices	count=1
function	types for loss variables ||| dtypes	count=1
class	hparams object to ||| hparams	count=1
function	[function_1] tensor ||| [function_1] to sparse [function_2]	count=1
function	[function_1] modulus zero ||| [function_2] [function_1]	count=2
function	[function_1] [function_2] ||| [function_1] 1d [function_2]	count=2
class	the decoder can ||| data decoder	count=1
module	ensure that graph building ||| contrib tensor_forest hybrid python models	count=1
module	from this ||| python ops	count=5
class	dictionary ||| categorical processor	count=2
module	of load() ||| backend event_processing	count=1
arg	in input ||| inputs sequence_length beam_width top_paths	count=1
module	the index of the ||| python	count=1
class	the cell and ||| rnncell	count=1
function	false positives ||| sparse false positive	count=2
arg	name ||| name	count=13
module	list of tensors that ||| python ops	count=3
arg	between the labels ||| labels weights	count=2
module	transform that wraps ||| contrib learn python learn dataframe transforms	count=1
arg	parameters ||| use_peepholes	count=1
arg	in texts in a ||| texts	count=1
module	bijector ||| bijectors	count=1
arg	adds a pooling op ||| kernel_size pooling_type padding	count=1
arg	a idtablewithhashbuckets object ||| table num_oov_buckets hasher_spec name	count=1
function	[function_1] node of ||| [function_1] [function_2]	count=1
function	of the example provided ||| example	count=1
module	prints ||| keras python keras utils	count=1
function	store the tensors ||| assets	count=1
function	[function_1] embedding ||| [function_2] [function_1]	count=2
function	both dense ||| test dense	count=1
arg	user could query over ||| field_to_obs	count=1
class	of text ||| text lines	count=1
function	feed ||| with tensor feed	count=1
function_arg	[function_1] by name ||| [arg_2] [function_1]	count=6
class	of the kernel ||| kernel	count=1
function	reservoirs with different seeds ||| uses seed	count=1
arg	if a and b ||| a b	count=1
function	determinant for ||| determinant	count=1
class	that selects row and ||| factorization test	count=1
function	generate main [function_2] ||| [function_2] [function_1]	count=4
function	if cycling works appropriately ||| draw bounding box color cycling	count=1
function	all operators ||| all operators	count=2
arg	a kernellinearclassifier ||| model_dir n_classes	count=1
function	a switch ||| switch	count=2
function	[function_1] gradients at ||| [function_1] [function_2]	count=2
function	[function_1] next cont() ||| [function_2] call [function_1]	count=2
function	a rank irfft ||| for irfft	count=1
class	we don't ||| upgrade	count=1
module	get ||| dist_test scripts	count=1
function_arg	doc [arg_2] ||| [function_1] index [arg_2]	count=1
module	computes output ||| keras python keras engine	count=1
function	a benchmark directly ||| report benchmark	count=1
function	values then ||| assert valid	count=1
function	whether ||| is	count=6
arg	while scaling the entire ||| level noise_shape seed	count=1
arg	with mean and stddev ||| allow_nan_stats	count=1
function	the training ||| train	count=2
function	image data [function_2] ||| [function_1] [function_2]	count=1
module	parse ||| debug cli	count=1
function	returns a header for ||| get header from ops and kernels	count=1
arg	weighted ||| updates_collections	count=1
module	decodes ||| contrib keras python keras applications	count=1
module	mixture ||| contrib distributions python kernel_tests	count=2
function	argument is an override ||| hints allowing override	count=1
function	input types ||| accepts	count=1
arg	of tuples ||| dtypes unknown_dim_allowed unknown_rank_allowed	count=1
function	[function_1] with modulus ||| [function_2] [function_1]	count=1
function	the signaturedef ||| tensor info from meta graph def	count=1
function	fractional ||| fractional	count=2
arg	based on vector keep_input ||| tensor_list keep_input	count=1
module	learn the vocabulary dictionary ||| python learn preprocessing	count=1
function	_guideref from ||| build guide	count=1
class	for node-status labels ||| cli	count=1
function	reshape the [function_2] ||| [function_1] [function_2]	count=1
class	area element ||| area	count=3
class	for tests ||| test	count=1
arg	slimrnncell from a cell_fn ||| cell_fn	count=1
module	image ||| contrib keras python keras preprocessing	count=1
class	value of the tensor ||| tensor	count=1
function	spatial shear of a ||| shear	count=1
module	event file ||| python	count=1
module	the ||| losses python	count=1
function	ready op ||| ready op	count=2
function	[function_1] file paths ||| [function_2] [function_1]	count=1
module	a given number of ||| learn	count=1
function	operations from ||| extract	count=2
function	the regularization [function_2] ||| [function_1] [function_2]	count=1
module	for the ||| dist_test python	count=1
arg	runs a microbenchmark ||| name target iters	count=1
function	the row factors ||| row factors	count=2
arg	screen output from a ||| output node_name enable_list_tensors	count=1
class	fill ||| op test	count=1
arg	distances to ||| input_fn batch_size steps	count=1
module	the ||| tensorboard	count=1
class	calls hooks ||| hooked session	count=1
function	initializer within the ||| initializer	count=1
function	current number of nodes ||| size	count=1
module	the end of ||| contrib graph_editor	count=2
module	computes ||| contrib kernel_methods python mappers	count=1
function	to read ||| read keyed	count=2
module	number of ||| metrics python ops	count=1
function	[function_1] index ||| [function_1] [function_2]	count=4
function	for the ||| for	count=2
function	also on other subclassses ||| test interactive	count=1
module	sure ||| tools compatibility	count=2
function	method to recursively apply ||| recursive apply	count=1
function_arg	[function_1] sliced dimension ||| [arg_2] [function_1]	count=2
module	external ||| specs python	count=1
module	the image ||| preprocessing	count=1
function	the [function] implements ||| get [function]	count=1
function	in a graph ||| graph	count=1
module	a transform that ||| contrib learn python learn dataframe transforms	count=1
module	and return indexies of ||| contrib	count=1
arg	layer ||| kernel_size	count=1
function_arg	[function_1] op ||| [function_1] shape [arg_2]	count=4
arg	prior on ||| prior scale	count=1
arg	a filename ||| filename	count=1
function	the outputs in ||| outputs make unique	count=1
function	step on ||| step	count=1
arg	dicts of same have ||| rtol atol	count=1
function	[function_1] each forward ||| [function_2] [function_1]	count=4
function	[function_1] finite gradients ||| [function_2] [function_1]	count=1
function	of indices into string ||| index to string	count=1
arg	a tf learn dataframe ||| num_threads enqueue_size	count=1
function_arg	summary of [arg_2] ||| [arg_2] [function_1]	count=2
function	predictive [function_2] ||| [function_2] [function_1]	count=3
function_arg	the border [arg_2] ||| [function_1] [arg_2]	count=1
function	a matmul ||| mat mul	count=2
function	to 0 with same ||| zeros	count=1
arg	whose value represents ||| add_regularization_losses	count=2
function	[function_1] dictionary ||| [function_1] [function_2]	count=3
function_arg	processor of v ||| get processor v	count=2
function	tensor or sparsetensor ||| sparse	count=1
function	[function_1] that ||| [function_1] [function_2]	count=2
function	returns the mtimes ||| get checkpoint mtimes	count=1
module	which ||| distributions	count=2
class	the ||| writer	count=2
function	updates ||| updates	count=1
class	wrapper should work also ||| debug wrapper session	count=1
module	the axis_order set by ||| labeled_tensor python ops	count=1
function	feed conversion [function_2] ||| [function_2] [function_1]	count=2
function	create a tf placeholder ||| make placeholder from dtype	count=1
arg	x is a ||| x	count=1
function	regression signature [function_2] ||| [function_2] [function_1]	count=2
arg	pooling op ||| kernel_size pooling_type padding	count=1
function	dump path [function_2] ||| [function_1] [function_2]	count=3
function	a shallow [function_2] ||| [function_2] [function_1]	count=2
module	classification ||| estimators	count=1
function_arg	a mask [arg_2] ||| [arg_2] [function_1]	count=3
module	dtype based on ||| framework	count=1
function_arg	[function_1] display area ||| [arg_2] [function_1]	count=2
function	the insertion indices of ||| insertion index	count=1
module	for ||| python	count=5
function	reshaping behavior of ||| reshaping	count=1
arg	if op ||| scope op	count=1
function	ops ||| filter ts from regex	count=2
class	text ||| text	count=3
function	arguments ||| get positional	count=1
module	return the correct ||| contrib graph_editor	count=1
class	of the underlying ||| base	count=1
function_arg	product across tensors ||| prod tensors	count=2
class	[class_1] the tensorarray ||| [class_1] [class_2]	count=4
function	computed ||| from	count=1
function_arg	precision values [arg_2] ||| [function_1] labels predictions [arg_2]	count=1
arg	utility function to ||| outputs method_name	count=1
function	[function_1] edge from ||| [function_1] [function_2]	count=3
function	trace ||| store trace	count=1
function	a signaturedef proto for ||| as signature def	count=1
class	variable to a ||| variable	count=1
arg	actual value tensor ||| actual static_shapes atol	count=2
module	next runge-kutta ||| contrib integrate python	count=1
function	vectors ||| get vector	count=1
function	runs a single epoch ||| epoch	count=1
function	[function_1] options for ||| [function_2] [function_1]	count=4
function	[function_1] functions for ||| [function_2] [function_1]	count=3
function_arg	multipliers to [arg_2] ||| [function_1] [arg_2]	count=1
function	weight when instances are ||| and other columns fabricated	count=1
function	is [function_2] ||| [function_1] [function_2]	count=5
module	carlo estimate of ||| contrib bayesflow python ops	count=1
function	for all inputs of ||| inputs tensor info from meta graph	count=1
function	the model [function_2] ||| [function_1] [function_2]	count=1
class	new tensor ||| tensor	count=1
arg	in dim_indices dimensions ||| dim_indices	count=1
function	the product of ||| prod	count=1
function	[function_1] normalization layer ||| [function_2] [function_1]	count=2
class	for a mixture ||| mixture	count=1
function_arg	[function_1] minibatch ||| [function_1] [arg_2]	count=3
function	that match ||| filter ts from regex	count=1
function	index of ||| index	count=2
arg	a dnnlinearcombinedclassifier instance ||| model_dir n_classes weight_column_name linear_feature_columns	count=1
function	[function_1] traversal attack ||| [function_2] [function_1]	count=3
function	a graph in tensorboard ||| import to tensorboard	count=1
function	[function_1] boundary ||| [function_1] [function_2]	count=2
function	kl for ||| batch kl	count=1
function_arg	[function_1] command arguments ||| [function_1] [arg_2]	count=4
arg	returns a lookup ||| vocabulary_file vocab_size	count=1
module	for labeled ||| contrib labeled_tensor python	count=2
function	[function_1] accumulator for ||| [function_2] [function_1]	count=1
arg	softmax_cross_entropy_with_logits ||| logits onehot_labels weights label_smoothing	count=1
function_arg	[function_1] of input_tree ||| [arg_2] [function_1]	count=3
module	version of ||| contrib learn python learn ops	count=1
module	tests that [module] set ||| [module]	count=1
function	the values of the ||| values	count=1
arg	[arg_1] the checkpointstate ||| [arg_1] [arg_2]	count=2
function	operator is a ||| operator	count=1
function	default mapping ||| default	count=2
function	creates a _sparsecolumn [function_1] [function_2] configuration ||| [function_1] [function_2]	count=2
module	of 1 ||| python ops	count=1
arg	all steps and ||| inputs noutput scope	count=1
module	of ||| contrib linalg python ops	count=16
module	vocabulary dictionary and return ||| contrib learn	count=1
function	[function_1] status labels ||| [function_1] [function_2]	count=1
function	from a dictionary ||| from	count=2
module	then return ||| python ops	count=1
class	view ||| view	count=3
function	flushes the event ||| flush	count=1
function	extracts the values ||| values	count=1
function	of graph ||| graph	count=1
module	of ||| linear_optimizer python ops	count=1
function	[function_1] box ||| [function_2] [function_1]	count=4
function	return the feed dictionary ||| init feed dict	count=1
module	given ||| learn python learn preprocessing	count=1
function	model variable ||| model variable	count=1
module	specified by the ||| contrib slim python slim	count=1
function_arg	histogram [arg_2] ||| [function_1] [arg_2]	count=2
function	the value of a ||| value	count=1
function	map on ||| map	count=2
class	dropout ||| dropout wrapper	count=2
module	updates ||| contrib kernel_methods python	count=1
function	non-batch kl for ||| compute non batch kl	count=1
function	calculates true ||| true	count=1
function	tensor that ||| tensor	count=1
function	[function_1] details ||| [function_1] [function_2]	count=3
module_class	values of [class_2] ||| [module_1] [class_2]	count=16
class	deregister ||| tab completion registry	count=1
module_class	tensorflow [class_2] ||| [module_1] interactive [class_2]	count=1
function	the total [function_2] ||| [function_2] [function_1]	count=10
function	dictionary used ||| dict	count=1
arg	applies transformations [arg_2] ||| [arg_1] [arg_2]	count=7
arg	an ||| name alias	count=1
arg	objects of base_type to ||| base_type	count=1
module	sequence ||| keras python keras preprocessing	count=2
module	representing ||| python framework	count=1
class	predictions ||| kernel linear classifier	count=1
module	the list of ||| contrib framework python ops	count=6
function_arg	contains [arg_2] ||| [arg_2] [function_1]	count=1
function	global default ||| get default	count=1
arg	blocks ||| blocks	count=1
function	n-d [function_2] ||| [function_2] [function_1]	count=8
function	with static ||| vector to matrix static	count=1
function	of slices ||| slices	count=1
function	[function_1] to the ||| [function_2] [function_1]	count=4
class	a tensorflow tensor ||| tensor flow	count=1
class	by this operator ||| linear operator identity	count=1
module	a transform ||| dataframe transforms	count=1
function	are satisfied at given ||| satisfied at	count=1
function	training ||| on train	count=1
arg	run ||| run plugin_name	count=1
class	labeledtensor objects ||| labeled	count=1
module	of a tensor generalized ||| python ops	count=1
function	integer classes and ||| build standardized signature def	count=1
function	the values in ||| values	count=2
function_arg	a unary [arg_2] ||| [arg_2] [function_1]	count=2
function	the variable [function_2] ||| [function_2] [function_1]	count=2
arg	inner_coord ||| inner_coord	count=1
arg	[arg_1] and op2 ||| [arg_1] [arg_2]	count=3
function	keys ||| keys	count=2
function	reshape node ||| reshape node	count=2
class	debug tensor dumping ||| debug test base	count=1
function	the state for all ||| state	count=1
function	have invalid type ||| test invalid number of	count=1
function	it into [function_2] ||| [function_1] [function_2]	count=1
class	the event file ||| summary	count=1
class	the attention ||| attention	count=1
module	the list of ||| framework python ops	count=6
function	the operation that ||| op	count=1
function	shapes for ||| shapes	count=2
function	session bundle from ||| session bundle or saved model bundle from	count=1
function	tensorshape of vectors ||| get vector shape	count=3
function	linear_model_fn but ||| model fn with model fn ops	count=2
arg	looperthread that calls a ||| timer_interval_secs target args	count=1
function	saved checkpoint ||| checkpoint	count=1
class	loop ||| while context	count=3
class	constructor ||| curses ui	count=2
function	prints a shallow ||| print	count=1
function	least 1 [function] pill ||| [function]	count=2
arg	handle ||| handle	count=3
function	use a watch_fn ||| with watch fn	count=1
module	a rnn cell ||| contrib rnn	count=1
function	tensor version ||| maybe assert valid sample	count=1
module	keras ||| keras utils	count=1
function	[function_1] meta ||| [function_1] [function_2]	count=1
function	[function_1] a vector ||| [function_2] [function_1]	count=1
function	[function_1] bounding box ||| [function_1] [function_2]	count=1
function	and file name ||| file name	count=1
module	a rnn cell ||| contrib rnn python	count=1
module	from a ||| learn	count=1
function	specified line in ||| line	count=1
function	collect information necessary ||| collect docs for	count=1
function	weights of ||| get weights	count=1
module	be found in ||| event_processing	count=1
function_arg	gets metagraphdef [arg_2] ||| [function_1] [arg_2]	count=1
class	to its outputs ||| residual wrapper	count=1
arg	value to ||| value session	count=1
function	[function_1] initializations ||| [function_2] [function_1]	count=5
class	[class_1] forcing ||| [class_1] [class_2]	count=1
function	match ||| regex	count=1
function	of the signaturedef ||| def	count=1
module	image s by the ||| contrib image	count=1
function	and stores trace information ||| trace info	count=1
function	[function] tensor or ||| int [function]	count=2
function	using parameter hashing for ||| sampled scattered	count=1
function_arg	from variable_def ||| from proto variable_def	count=1
function	[function_1] positives ||| [function_2] [function_1]	count=12
function	add a tensor ||| add tensor	count=6
function	for left recursion ||| tf left	count=1
function	are ||| check hooks	count=1
arg	top-k predictions with respect ||| top_k_predictions	count=1
function	resnet_v2() for arg and ||| v2	count=2
module	returns a shape ||| python framework	count=1
arg	position ids in sampled_candidates ||| sampled_candidates num_true	count=1
arg	of a variable ||| variable value decay zero_debias	count=1
arg	[arg_1] to m ||| [arg_2] [arg_1]	count=2
arg	pads 5d ||| x padding data_format	count=2
arg	operation ||| op	count=1
function	test [function_2] ||| [function_2] [function_1]	count=9
function	the page ||| module page	count=1
function	that the tensor ||| tensor	count=1
module	list of ||| contrib framework python ops	count=7
function	the string_to_hash_bucket op to ||| string to hash bucket	count=1
class	[class_1] session creator ||| [class_1] [class_2]	count=1
function	one step ||| step	count=1
function	a wrapper for ||| wrapper	count=1
module	shape of [module_2] ||| [module_2] [module_1]	count=1
function	[function_1] matrix data ||| [function_2] [function_1]	count=3
module	the dataframe and ||| contrib learn python learn dataframe	count=1
function	noise from a ||| noise	count=1
function	[function_1] expired ||| [function_1] [function_2]	count=4
function	from the ||| from	count=2
function	the variables and ||| and	count=1
function	if clusters centers ||| clusters	count=1
function	calculates true positives for ||| true positive at	count=1
function	renyi divergence ||| renyi	count=1
arg	a grpcdebughook ||| grpc_debug_server_addresses watch_fn thread_name_filter log_usage	count=1
arg	target ||| target decorator_func decorator_name decorator_doc	count=1
function	extend the ||| extend	count=1
class	in vdv^t ||| pdsqrt vdvtupdate	count=1
arg	a ||| a	count=2
function_arg	[function_1] [arg_2] ||| [function_1] matrix [arg_2]	count=11
function_arg	[function_1] tensors x ||| [arg_2] [function_1]	count=4
function	the output values ||| values	count=1
function	signature ||| signature	count=6
module	values of a ||| ops	count=2
function	ops to restore variables ||| restore ops	count=1
class	directory where event file ||| file writer	count=1
function	for small input ||| for small input	count=3
module	op ||| python framework	count=3
function	sigmoid of ||| sigmoid	count=1
module	of tensors corresponding ||| ops	count=4
function	get static [function_2] ||| [function_2] [function_1]	count=1
class	normal distribution ||| normal tri l	count=1
function	wrapper ||| rfft wrapper	count=1
class	total ||| variation test	count=1
class	[class_1] given ||| [class_2] [class_1]	count=2
arg	ids ||| vocab_size	count=1
class	tensor for the ||| lazy builder	count=1
class	of the layer ||| layer	count=1
arg	the given serialized ||| serialized_example item_handler	count=1
arg	[arg_1] are seen ||| [arg_2] [arg_1]	count=2
arg	floats ||| f1 f2	count=1
module	computes the peak memory ||| memory_stats python ops	count=1
function	[function_1] bias feature ||| [function_2] [function_1]	count=1
arg	prior on the ||| prior	count=1
module	given directory ||| python learn	count=1
function	nearest [function_2] ||| [function_2] [function_1]	count=1
function	creates a queue to ||| queue	count=1
function	monitor callbacks ||| monitors	count=1
class	a tensor ||| tensor	count=5
arg	and control_outputs ||| control_outputs	count=1
function	creates a bijector ||| init	count=1
function	full ||| full	count=3
class	outcome (vs ||| bernoulli	count=1
class	checkpoint ||| checkpoint	count=1
function	[function_1] a sparse ||| [function_2] [function_1]	count=9
class	failed if ||| error	count=1
arg	name unique or ||| name	count=1
arg	the input ||| inputs	count=1
class	a graph into ||| graph	count=1
function	this operator [function] = l ||| [function]	count=1
arg	restore_checkpoint_path ||| restore_checkpoint_path	count=1
function	verifies that [function_2] ||| [function_2] [function_1]	count=10
function	prefix using [function_2] ||| [function_2] log [function_1]	count=2
module	slice ||| python keras engine	count=1
arg	labels ||| _sentinel labels	count=1
function	external_values from ||| from	count=1
function_arg	the sum [arg_2] ||| [function_1] [arg_2]	count=2
function	per step true positives ||| true positive at k	count=1
module	to form the ||| factorization python ops	count=1
module	are ||| estimator	count=1
function	makes [function_2] ||| [function_1] [function_2]	count=2
arg	concentration and rate parameters ||| concentration rate	count=1
function	[function_1] a @{$ ||| [function_2] [function_1]	count=6
arg	array to the actual ||| actual	count=1
class	returns a tensor for ||| lazy	count=1
module	name -> _guideref from ||| tools docs	count=1
function	kl ||| batch kl	count=1
module	training and inference ||| learn python learn estimators	count=1
module	of dimensions and assert ||| distributions python ops	count=1
function	plugin ||| plugin	count=3
function	convolutions [function_2] ||| [function_2] [function_1]	count=4
function_arg	[function_1] event ||| [function_1] generator [arg_2]	count=3
function	subset of ||| select	count=1
class	student's t ||| student t	count=1
function	valued features of ||| valued	count=1
function_arg	[function_1] of layers ||| [function_1] params [arg_2]	count=1
arg	validates the ||| file_format duration_sec samples_per_second	count=1
function	feature extraction [function_2] ||| [function_2] values [function_1]	count=4
arg	ys with respect ||| ys	count=1
function	a summary ||| tf spec summary	count=1
arg	sparsetensorsmap and return ||| container shared_name	count=1
function	num_rows, [function_2] ||| [function_2] [function_1]	count=3
class	with these ||| store	count=1
function	validate ||| validate keep	count=1
arg	from elems ||| fn elems dtype	count=2
arg	of tensors ||| tensors session feed_dict fetches	count=1
class	return ||| flow context	count=1
function_arg	log the [arg_2] ||| [arg_2] [function_1]	count=1
function	returns the sum ||| add	count=1
function	random rotation of a ||| random rotation	count=1
arg	to ||| ops	count=1
arg	protocol buffer ||| protocol	count=1
class	the column ||| real valued var len column	count=1
module	with the matrix of ||| python ops	count=1
function	[function_1] relative timestamp ||| [function_2] [function_1]	count=1
module	registers ||| python framework	count=2
module	of two ||| labeled_tensor python ops	count=1
function	deregister ||| deregister	count=1
function	and linear ||| linear	count=1
module	rnn ||| python ops	count=1
function	loss functions ||| loss	count=1
function	adds [function_2] ||| [function_1] [function_2]	count=3
arg	input [arg_2] ||| [arg_1] [arg_2]	count=7
module	labeled tensors ||| contrib labeled_tensor python ops	count=3
function_arg	sharded variables [arg_2] ||| [function_1] name shape dtype [arg_2]	count=1
function	applies node renames ||| apply final node renames	count=1
function	a queue to ||| queue	count=1
module	for ||| framework	count=1
module	proper shape values then ||| distributions	count=1
function	pairwise-errors-squared ||| mean pairwise squared error	count=2
function	predictions for single ||| single value predictions	count=1
function	the page ||| build function page	count=1
module	interactivesession ||| client	count=1
module	[module_1] the location ||| [module_1] [module_2]	count=1
function	the function [function_2] ||| [function_2] [function_1]	count=1
function	is a ||| is diag update	count=1
function	map on the list ||| map	count=2
arg	(e g input_tensors) from ||| attr_name	count=1
function	a flow ||| flow	count=3
function	no scores ||| classification6	count=1
function	the export [function_2] ||| [function_2] [function_1]	count=3
function	sigmoid cross entropy ||| sigmoid cross entropy with	count=1
function_arg	[function_1] value ||| [function_1] [arg_2]	count=5
function	interval to ||| interval	count=2
function	[function_1] operations from ||| [function_2] [function_1]	count=2
class	learn the vocabulary ||| categorical	count=1
arg	the input image ||| image	count=1
function	construct and ||| create	count=1
function	[function_1] after ||| [function_1] [function_2]	count=1
function	[function_1] with as_iterable=true ||| [function_2] [function_1]	count=4
arg	output determined by pred ||| pred name	count=1
class	of ||| curses	count=1
function	collection with the ||| to collection	count=1
function	mix of features ||| mixed features	count=8
module	1 outcome (vs ||| ops distributions	count=1
module	tensors linked ||| contrib	count=1
function	line ||| screen add line	count=1
function_arg	exit a [arg_2] ||| [function_1] [arg_2]	count=2
function	graph ||| freeze graph	count=1
class	a sdcalinearregressor ||| sdcalinear regressor	count=1
function_arg	[function_1] a column ||| [arg_2] [function_1]	count=3
function	that maps input ||| input exprs	count=1
arg	[arg_1] b ||| [arg_2] [arg_1]	count=6
function	[function_1] multipliers ||| [function_1] [function_2]	count=3
module	are sessionrunhook raises ||| estimator	count=1
module	1 outcome ||| python ops	count=1
arg	a tensor ||| op dtype name	count=1
function	caching of control ||| test caching	count=1
function	positive [function_2] ||| [function_1] [function_2]	count=2
function	of parameters ||| params	count=1
function	generate a report of ||| report	count=1
function	list the [function_2] ||| [function_2] [function_1]	count=5
function	save and reload a ||| train save	count=1
module_class	from this [class_2] ||| [module_1] [class_2]	count=8
function	[function] python expression ||| [function] arg	count=2
function	file system race ||| inplace	count=1
function	gradient functions ||| gradient	count=1
function	current weights ||| get weights	count=2
function	number ||| number	count=1
arg	a [arg_2] ||| [arg_2] [arg_1]	count=11
function	no ||| signature def classification6	count=1
function	strictly [function_2] ||| [function_2] [function_1]	count=1
function	get the tensor value ||| get	count=1
function	to restore ||| restore ops	count=1
class	for node-status labels ||| node stepper cli	count=1
function_arg	[function_1] recall@k and ||| [arg_2] [function_1]	count=8
function	batch [function_2] ||| [function_2] [function_1]	count=6
function	outputs in ||| outputs make unique	count=1
arg	apply conv ||| filters	count=1
class	[class] in specific ||| [class]	count=3
module	of the model loading ||| factorization python ops	count=1
class	function into ||| defined function	count=1
function	predefined [function_2] ||| [function_2] [function_1]	count=2
function	of a dict ||| dict to	count=1
function	matrix ||| matrix	count=17
arg	grpcdebughook ||| grpc_debug_server_addresses watch_fn thread_name_filter log_usage	count=1
function	for binary [function_2] ||| [function_1] [function_2]	count=1
function	local ||| create local	count=1
class	normal distribution on ||| normal linear operator	count=1
arg	adds a pooling op ||| inputs kernel_size pooling_type padding	count=1
function_arg	function [arg_2] ||| [arg_2] [function_1]	count=6
function	single bprop ||| single bprop	count=1
function	new ||| init	count=2
arg	[arg_1] given mean ||| [arg_2] [arg_1]	count=2
function	[function] a ||| filter [function]	count=1
arg	self and other ||| other	count=4
function	exception on bad ||| test bad	count=1
function	mix of ||| optimizer mixed	count=1
class	represented by this operator ||| linear operator scaled identity	count=1
module	into a dict of ||| ops	count=1
function	docstring and ||| md docstring	count=1
function	writes graph_def ||| write	count=1
function	spec for parsing tf ||| spec for parsing	count=1
class	tests ||| mocking event accumulator test	count=1
function	nearest [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] mean of ||| [function_1] [function_2]	count=2
arg	between an output tensor ||| output	count=1
function	fully connected ||| legacy fully connected	count=2
function	and loss functions ||| loss and target compatibility	count=1
arg	details ||| parent children	count=1
module	tensors that with integer ||| python learn	count=1
arg	slice non-zero ||| np_matrix row_slices col_slices transpose	count=1
function_arg	[function_1] [arg_2] it only depends on ||| [function_1] dependency [arg_2]	count=4
class	generates ||| decoder test	count=1
class	or a ||| tensor	count=1
function	provided have invalid type ||| invalid	count=2
function	initializes values [function_2] ||| [function_2] [function_1]	count=1
function	tensors if ||| tensors	count=1
class	context recursively ||| cond context	count=1
arg	[arg_1] given mean ||| [arg_1] [arg_2]	count=2
function_arg	[function_1] tensor ||| [function_1] total loss add_regularization_losses [arg_2]	count=2
module	monitoredsession ||| python training	count=1
function	sessionrunhook ||| check hooks type	count=1
function	to a specified bounding ||| to bounding	count=1
function	classes ||| build standardized	count=1
function	state saver ||| state	count=1
module	a rank-2 ||| contrib solvers	count=1
class	of load() ||| directory watcher	count=1
arg	recall@k and precision@k ||| labels predictions_idx k class_id	count=1
function	to colocate [function_2] ||| [function_1] [function_2]	count=1
function	all ||| regex	count=1
function	the given tensor ||| tensor	count=1
class	its outer context ||| cond context	count=1
class	that is part ||| sequential	count=1
function	real valued features and ||| real valued features	count=2
module	numpy ||| keras python keras	count=1
function	calculates the loss ||| loss	count=1
module	cli see ||| debug cli	count=2
arg	a x = rhs ||| rhs	count=1
function	[function_1] and runoptions ||| [function_2] [function_1]	count=4
function_arg	[function_1] from savedmodel ||| [arg_2] [function_1]	count=2
function	non-negative [function_2] ||| [function_2] [function_1]	count=2
arg	dense labels ||| labels	count=1
arg	arguments into ||| args	count=1
function	maximum or [function_2] ||| [function_2] [function_1]	count=1
arg	[arg_1] d2 ||| [arg_2] [arg_1]	count=1
module	do a ||| layers	count=1
function	tensors linked to ops ||| filter ts from	count=1
function	match the ||| from regex	count=1
arg	filled with all 1s ||| feature_columns columns_to_tensors bias_variable columns_to_variables	count=1
function	[function_1] order ||| [function_2] [function_1]	count=3
function	a command [function] ||| [function]	count=2
function	of ||| to sequences	count=1
function_arg	[function_1] _kernelestimator object ||| [function_1] [arg_2]	count=1
class	for debug tensor watching ||| debug	count=1
function	ops to restore variables ||| sharded restore	count=1
module	a tensor ||| contrib keras python keras	count=4
function	average size of a ||| average size	count=1
function	numpy matrix ||| matrix	count=2
function_arg	experiment [arg_2] ||| [function_1] [arg_2]	count=2
function	the difference ||| difference	count=1
function	[function_1] weighted sum ||| [function_1] dense column [function_2]	count=1
function_arg	edge from [arg_2] ||| [arg_2] [function_1]	count=3
module	the cli see the ||| debug cli	count=2
function	check the main ||| check main	count=2
function	all the ||| filter ts	count=1
function	[function_1] error between ||| [function_1] [function_2]	count=17
function	a restricted linear prediction ||| joint weighted sum from feature columns	count=1
function	returns ||| type	count=2
function	instantiates the xception ||| xception	count=1
module	get a str representation ||| lib	count=1
module	runge-kutta ||| contrib integrate	count=1
class	remove ||| graph view	count=1
module	non-reference dtype based ||| python	count=1
module	of current ||| ops	count=1
arg	given input [arg_2] ||| [arg_1] [arg_2]	count=1
arg	data feeder ||| x_shape y_shape n_classes batch_size	count=1
arg	microbenchmark to measure ||| target iters	count=2
module	sequence ||| keras python	count=1
function	be integrated [function_2] ||| [function_2] [function_1]	count=2
module	the position ||| python ops	count=1
module	from ||| debug lib	count=1
module	utility ||| python keras applications	count=1
arg	encoded ||| image_shape image_format label	count=1
class	descent ||| descent	count=1
function_arg	noise from [arg_2] ||| [arg_2] [function_1]	count=1
arg	concentration ||| concentration	count=1
function	using [function] survival_function ||| [function] prob with logsf	count=1
function	predict method with as_iterable=true ||| predict as iterable	count=3
function_arg	process the [arg_2] ||| [arg_2] [function_1]	count=1
function	probabilities for ||| proba	count=1
function	index from a ||| index	count=1
arg	[arg_1] holds ||| [arg_2] [arg_1]	count=4
arg	in ||| output_dir dictionary current_global_step	count=1
function	to loss [function_2] ||| [function_2] [function_1]	count=14
arg	performs a ||| row_axis col_axis	count=3
function	the list of dtypes ||| dtypes	count=2
arg	columns given in input_fn ||| input_fn	count=1
function	[function] input ||| test different tensor [function]	count=1
arg	tensor and ||| tensor	count=1
arg	sgv0 [arg_2] ||| [arg_1] [arg_2]	count=5
module	indexies ||| python learn preprocessing	count=2
function	a flow [function_2] ||| [function_1] [function_2]	count=7
module	decodes ||| python keras applications	count=1
function	restore ||| restore ops	count=2
function	shape values then return ||| maybe assert valid	count=1
function	[function_1] variation for ||| [function_1] [function_2]	count=5
function	tensor ||| to tensor	count=4
function_arg	postfix [arg_2] ||| [arg_2] [function_1]	count=2
class	the graph ||| graph	count=6
function	a tensor to use ||| parse label tensor	count=1
function	[function_1] precision@k ||| [function_2] [function_1]	count=2
function	symbol ||| guide index	count=1
function	a new graph which ||| graph replace	count=1
module	the ||| contrib slim python	count=1
function	returns the string name ||| name	count=1
function	test data ||| get test data	count=2
arg	mode in the ||| mode	count=1
function	true [function_2] ||| [function_1] loop [function_2]	count=1
function	given filter ||| filter	count=1
class	from which the tensor ||| debug tensor	count=1
function	condition ||| scalar condition	count=1
function	placeholder for [function_2] ||| [function_2] [function_1]	count=6
function	are discarded after a ||| data discarded after	count=1
function	a model_fn can return ||| create model fn	count=1
arg	protocol buffer with images ||| name tensor max_outputs collections	count=1
module	sessionrunhook ||| estimator	count=1
module	summarize ||| layers python layers	count=2
function	[function_1] training operation ||| [function_2] [function_1]	count=1
function	filename for ||| checkpoint filename	count=1
function	return indexies ||| fit transform	count=1
arg	the graph from graph_def ||| graph_def	count=1
function	a model variable ||| variable	count=1
class	initializes ||| key value tensor initializer	count=1
arg	handle syncreplicaoptimizer initialization ||| sync_optimizer is_chief num_tokens	count=1
module	a batch of ||| contrib seq2seq python ops	count=1
function	sum of ||| sparse reduce sum	count=1
module	value of the ||| keras python keras	count=1
function	set attributes ||| set	count=1
class	in that coordinate ||| multinomial	count=1
class	helper ||| walsmodel	count=3
function	[function_1] full ||| [function_1] [function_2]	count=2
function	labels ||| top k	count=3
arg	input ||| inputs sequence_length merge_repeated	count=1
function	sharded variables with the ||| sharded variable	count=1
module	mnist model up ||| factorization examples	count=1
arg	in ||| checkpoint_dir	count=1
function	segmentmin ||| segment min or	count=1
module	get all ||| graph_editor	count=1
arg	top-k predictions ||| top_k_predictions	count=1
function	a key [function_2] ||| [function_2] [function_1]	count=4
function_arg	a sparse tensor ||| sparse tensor	count=1
function	node's statistics ||| stats for node def	count=1
function	reshape the input ||| maybe reshape input	count=3
function	rnn sequence to ||| rnn	count=1
function	[function_1] tensor to ||| [function_2] [function_1]	count=2
class	one step [class_2] ||| [class_2] [class_1]	count=1
function	for sequence ||| sequence	count=1
module	distribution s ||| contrib distributions python	count=1
function	random spatial [function_2] ||| [function_1] [function_2]	count=6
function	[function_1] collection names ||| [function_2] [function_1]	count=1
function	changes the element shape ||| element	count=1
function	a shallow dict to ||| dict	count=1
function	padding required ||| required	count=1
class	of the pooling function ||| pooling	count=4
function	values ||| maybe assert	count=1
module	get all the ||| tensorboard backend event_processing	count=1
class	name of ||| indexed	count=1
function	a positive ||| positive	count=1
function_arg	update op [arg_2] ||| [function_1] [arg_2]	count=1
function	add the [function_2] ||| [function_1] [function_2]	count=3
class	a ||| round	count=1
module	imagenet ||| keras python keras applications	count=2
function	tensor to use for ||| parse label tensor	count=1
function_arg	verifies the output ||| verify values tensor_in_sizes	count=3
function	converts ||| sequences to	count=1
function	[function_1] graph with ||| [function_1] [function_2]	count=3
module	vocabulary dictionary ||| learn preprocessing	count=1
module	data ||| learn python learn	count=1
function	negatives ||| negatives	count=2
function	creates an op ||| training op	count=2
arg	given ||| scope	count=2
function	flow [function_2] ||| [function_1] [function_2]	count=9
arg	to a specified min ||| t clip_value_min clip_value_max name	count=1
arg	of sequences ||| sequences	count=1
function_arg	[function_1] n elements ||| [arg_2] [function_1]	count=2
module	dictionary and return ||| learn preprocessing	count=1
module	a rank-2 tensor ||| contrib solvers python ops	count=1
class	creates fetch mapper ||| mapper	count=1
function	the latest ||| latest	count=1
function	reduce an ||| reduce	count=1
function	returns trainer [function_2] ||| [function_1] [function_2]	count=2
module	of the given ||| python ops	count=5
module	the core version with ||| contrib learn python learn	count=1
arg	capturevariable monitor ||| var_name every_n first_n	count=1
module	that graph ||| tensor_forest	count=1
arg	oldpath [arg_2] ||| [arg_1] [arg_2]	count=1
function	implementation against a numpy ||| numpy	count=1
function	[function_1] a categorical ||| [function_2] [function_1]	count=3
function	constructs caches and returns ||| get	count=1
function	and loss functions ||| loss and	count=1
class	outputs of ||| outputs	count=1
arg	based on a ||| ui_type	count=1
function_arg	cell [arg_2] ||| [arg_2] [function_1]	count=3
arg	pads ||| x padding	count=3
function_arg	[function_1] for an ||| [function_1] [arg_2]	count=5
module_class	[module_1] cudnn ||| [module_1] [class_2] params	count=6
arg	across all steps and ||| noutput scope	count=1
function	graph in tensorboard ||| import to tensorboard	count=1
module	to ||| factorization	count=1
function	to use ||| get string to hash bucket	count=1
function	switch for ||| switch	count=1
function	main [function_2] ||| [function_2] [function_1]	count=9
function	reads [function_2] ||| [function_1] [function_2]	count=2
function	a matrix ||| matrix	count=1
function	scaled noise ||| scaled noise	count=2
function	[function_1] logistic metrics ||| [function_1] [function_2]	count=1
function	[function_1] sequence ||| [function_2] [function_1] by	count=1
function	sort ||| sort	count=1
arg	elements across dimensions ||| keep_dims name	count=2
arg	position ids in sampled_candidates ||| sampled_candidates	count=1
function	different [function] input ||| test different tensor [function]	count=1
function_arg	a hook [arg_2] ||| [function_1] [arg_2]	count=2
function	[function_1] attention and ||| [function_2] [function_1]	count=1
class	the wrapper should work ||| debug wrapper session test	count=1
function	model from ||| from	count=1
arg	initialize the parameters ||| input_size use_peepholes cell_clip	count=1
module	construct a new ||| training	count=6
function	max across ||| max	count=1
function_arg	a list [arg_2] ||| [function_1] shapes [arg_2]	count=1
function	classification ||| build standardized signature def classify classes	count=1
function	is replicable with a ||| replicable	count=2
arg	co-existance ||| y input_fn feed_fn	count=1
function	valued ||| valued	count=8
function	default graph ||| import graph	count=1
function	options for ||| options	count=1
module	get [module_2] ||| [module_1] [module_2]	count=5
function	fixed number ||| fixed size	count=2
arg	term ||| epsilon	count=1
module	sample from a single ||| distributions	count=1
module_class	this type ||| python framework dtype	count=1
arg	reduces grad along ||| op grad	count=1
arg	column based on the ||| column args weight_collections trainable	count=1
class	test ||| test	count=3
function	sharded ||| sharded	count=1
function	return the handle ||| get session handle	count=1
class	state and/or output dropout ||| dropout	count=1
function	numpy printoption from a ||| parse numpy printoption	count=1
function	variables that end with ||| get variables	count=1
function	a model_fn can return ||| model fn ops	count=1
module	build ||| python layers	count=1
function	adds ||| multi device add	count=1
module	use the ||| python	count=1
arg	associated with screen output ||| output	count=1
function	[function_1] logo ||| [function_2] [function_1]	count=4
arg	take ||| text_arr	count=1
function_arg	fetches and [arg_2] ||| [arg_2] [function_1]	count=1
class	run ||| session run	count=1
function_arg	fakequantwithminmaxvarsperchannel [arg_2] ||| [arg_2] [function_1]	count=1
function	prediction ops ||| predict ops	count=4
function	recall of the ||| recall	count=1
function_arg	x [arg_2] ||| [function_1] x [arg_2]	count=9
arg	regex match in rich ||| regex	count=1
module	each text ||| contrib	count=1
class	new partitioned variable wrapper ||| partitioned variable	count=1
module	a transform that wraps ||| contrib learn python learn dataframe transforms	count=1
function	are sessionrunhook raises typeerror ||| hooks type	count=1
function	mappers provided [function_2] ||| [function_2] [function_1]	count=2
function	the params ||| params	count=1
function_arg	[function_1] tensor "t" ||| [function_1] [arg_2]	count=2
function	as linear_model_fn but returns ||| linear model fn with model fn	count=2
function	variable instance from one ||| variable	count=1
arg	condition and body ||| body loop_vars shape_invariants	count=1
function	a model_fn ||| model fn ops	count=1
function	parse the object's docstring ||| parse md docstring	count=1
class	registry in a file ||| text summary plugin asset	count=1
module	the ||| learn python learn	count=1
module	the backend ||| keras python keras	count=1
arg	verifies that cpu ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
module	of factors ||| factorization python ops	count=1
function	creates ||| init	count=31
module	real ||| python ops	count=1
function	returns the tf session ||| get session	count=1
function	small ||| small	count=1
function	the values in a ||| values	count=2
function	[function_1] gradients ||| [function_1] [function_2]	count=6
module	[module_1] [module_2] ||| [module_2] [module_1]	count=448
module	the names of ||| ops	count=1
function	header for ||| header from	count=1
class	export ||| export test	count=1
function	parse events from ||| events	count=1
function	for a switch ||| switch grad	count=1
function	tensors ||| ts from	count=1
arg	a ||| name	count=13
arg	stddev loc and scale ||| loc scale	count=1
function	[function_1] expired ||| [function_2] [function_1]	count=4
class	of a pooling ||| pooling test	count=1
module	-> _guideref ||| docs	count=1
function_arg	[function_1] tensor ||| [function_1] lengths maxlen dtype [arg_2]	count=3
module	parameter ||| contrib distributions	count=1
function_arg	a str [arg_2] ||| [arg_2] [function_1]	count=3
function_arg	an attribute [arg_2] ||| [function_1] [arg_2]	count=2
arg	values from ||| values	count=1
function	various recall values for ||| streaming recall at	count=1
module	to __init__ which gets ||| contrib distributions	count=1
function	[function_1] dense scalar ||| [function_2] [function_1]	count=1
module	proto ||| framework	count=2
function	into raw params used ||| to raw params	count=1
function	to verify that ||| verify pd	count=2
function	the asset tensors ||| asset tensors	count=1
function	the presence ||| loop grads	count=1
function	batch of ||| on batch	count=1
arg	given ||| x y input_fn	count=1
function_arg	[function_1] xs by ||| [arg_2] [function_1]	count=1
function	non-batch kl for ||| kl	count=1
module	a specific format of ||| contrib cudnn_rnn python ops	count=2
function	get all ||| ts from	count=1
arg	generates a ||| data batch_size	count=1
function	[function_1] is empty ||| [function_2] [function_1]	count=3
arg	rnncell ||| cell	count=1
module	returns a list instead ||| learn python learn	count=1
function	[function_1] [function_2] ||| [function_1] fetch and [function_2]	count=1
function	return all the keys ||| keys	count=1
function	each text ||| texts to sequences	count=1
module	dtype based on ||| python	count=1
function_arg	decoder [arg_2] ||| [function_1] [arg_2]	count=1
function	the backprop [function_2] ||| [function_1] [function_2]	count=2
function	initializer to ||| initializer	count=1
function	returns op for ||| op	count=1
module	all ||| tensorboard backend event_processing	count=2
arg	kicks off threads ||| workers max_q_size wait_time	count=1
arg	scrollable ||| is_refresh highlight_regex	count=1
arg	opens file path ||| path	count=1
function	returns the ||| get	count=24
function	[function_1] feature column ||| [function_1] [function_2]	count=4
function	conv2d ||| fwd conv2d	count=1
class	a mixture ||| mixture	count=1
function_arg	estimator [arg_2] ||| [function_1] contract [arg_2]	count=3
module	linked to ||| contrib	count=1
function	[function_1] functions ||| [function_1] [function_2]	count=3
function	calculate ||| calculate	count=1
function	[function_1] with dynamic ||| [function_1] [function_2]	count=4
arg	the fft_length argument ||| fft_rank	count=2
module_class	from this staging ||| python ops staging	count=1
class	cell ||| grid rnncell	count=1
arg	given a tag ||| tag	count=1
module	computes ||| ops	count=5
function	the eval [function_2] ||| [function_2] [function_1]	count=2
class	page ||| page	count=1
module	a non-reference dtype ||| python framework	count=1
module	same as the ||| estimators	count=3
function_arg	into string [arg_2] ||| [function_1] tensor [arg_2]	count=1
function	[function_1] "operation" ||| [function_1] [function_2]	count=1
function	run() ||| run end	count=2
function	range of this ||| range	count=2
class	adadelta [class_2] ||| [class_1] [class_2]	count=1
function	[function_1] [function_2] ||| [function_2] and hook [function_1]	count=1
class	the monitored [class_2] ||| [class_1] [class_2]	count=1
function	loss goes down ||| joint linear model	count=1
function	main menu ||| main menu	count=2
function_arg	assert the [arg_2] ||| [function_1] less [arg_2]	count=1
function	benchmark ||| report benchmark	count=1
module	ugrnn ||| python ops	count=1
function	run() calls to ||| run	count=1
function_arg	image from thumbnails ||| image thumbnails thumbnail_dim	count=2
arg	given threshold ||| threshold weights	count=1
function	sparsetensors ||| sparse	count=3
module	tensors that with ||| learn python learn	count=1
function	[function_1] of sparse_column_with_integerized_feature ||| [function_2] [function_1]	count=2
function	the valid tests configs ||| test configs	count=5
function	given rate ||| rate	count=1
function	containing axis_order_scope ||| axis order	count=1
function	merges the ||| merge	count=1
function_arg	[function_1] tensors ||| [function_1] valid dtypes [arg_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] proper iterable [arg_2]	count=3
function	calculate padding required to ||| required space to	count=1
module	and return indexies ||| python	count=1
function	modulus ||| modulus	count=1
module	a tensor ||| python feature_column	count=1
module	of a ||| factorization python ops	count=3
module	np ||| factorization python ops	count=1
function	help information for a ||| help for	count=1
function	a tf cond that ||| smart cond	count=1
arg	config file ||| config	count=1
function	pulls [function_1] [function_2] ||| [function_1] [function_2]	count=7
module	don't have ||| tools	count=1
function	collect information ||| collect	count=1
function	defined by input ||| input	count=1
arg	state saving sequence queue ||| cell features labels mode	count=1
function	[function_1] for serving ||| [function_2] [function_1]	count=2
function	[function_1] graph-level random ||| [function_1] [function_2]	count=1
arg	[arg_1] [arg_2] ||| [arg_1] fft_rank [arg_2]	count=2
arg	elems ||| elems dtype	count=1
function	sort ||| sort dump data by	count=2
function	for nearest [function_2] ||| [function_2] [function_1]	count=1
function_arg	a tensor [arg_2] ||| [arg_2] [function_1]	count=1
function	a map from ||| map	count=1
function	tensor ||| tensor alias	count=1
function	estimate data [function_2] ||| [function_1] [function_2]	count=2
function	sparse ||| sparse value	count=6
module	from a rank-2 tensor ||| solvers python	count=1
arg	run and [arg_2] ||| [arg_2] [arg_1]	count=5
function	single sparsetensor ||| sparse	count=1
module	opaque parameter buffer needed ||| contrib cudnn_rnn	count=1
function	[function_1] the eval ||| [function_2] [function_1]	count=3
function	a feature [function_2] ||| [function_1] [function_2]	count=3
class	construct ||| diag plus low rank	count=1
module	checks ||| python layers	count=1
module	confusion ||| python ops	count=1
module	of images ||| ops	count=1
function	update nodes after overriding ||| update then remove override then update again	count=1
function	nonexistent tensor [function_2] ||| [function_2] [function_1]	count=1
module	given number of the ||| learn python learn	count=1
arg	checkpoint's tensor ||| file_pattern tensor_name slice_spec	count=1
module	checks ||| contrib layers python layers	count=1
function	operations from [function_2] ||| [function_1] [function_2]	count=6
function	[function_1] without a ||| [function_2] [function_1]	count=2
function	gets the asset tensors ||| asset tensors	count=1
module	operator ||| distributions python ops	count=1
arg	n ||| n	count=6
arg	[arg_1] or y ||| [arg_1] [arg_2]	count=4
function	a biasadd node ||| bias add node	count=2
function	an rnn [function_2] ||| [function_1] [function_2]	count=3
class	input ||| feature column	count=1
function	a list of featurecolumns ||| feature columns	count=1
module	model ||| nets	count=1
function	then tile along the ||| and tile	count=1
function	operation for the histogram ||| histogram	count=1
arg	tensors to ||| tensors tensor_slices	count=1
function	tensor input/outputs are cholesky ||| cholesky	count=1
function	[function_1] convolution ||| [function_1] [function_2]	count=1
class	returns this shape ||| shape	count=1
function_arg	sum across [arg_2] ||| [function_1] [arg_2]	count=1
function	output ||| scroll output	count=1
arg	internal utility to compute/validate ||| input_shape default_size min_size data_format	count=1
function	returns the first ||| first	count=1
function	[function_1] dimension of ||| [function_1] [function_2]	count=4
function	field to [function_2] ||| [function_1] [function_2]	count=4
module_class	in [class_2] ||| [class_2] [module_1]	count=1
function	the specified line ||| at line	count=1
function	forwards ||| switch ref or tensor	count=1
function	the node of ||| node	count=1
function	[function_1] scalar ||| [function_1] [function_2]	count=7
arg	[arg_1] cluster ||| [arg_1] [arg_2]	count=1
module_class	and values [class_2] ||| [module_1] [class_2]	count=2
module	a dataframe ||| python learn dataframe	count=1
function	rank irfft ||| irfft	count=1
module	sequence of ||| keras preprocessing	count=1
function	tensor in [function_2] ||| [function_2] [function_1]	count=1
function	the same values ||| compare fwd values	count=1
arg	if colocate_gradients_with_ops ||| colocate_gradients_with_ops	count=1
function	used in [function_2] ||| [function_2] [function_1]	count=1
arg	cell with ||| cell num_proj	count=1
function_arg	add the [arg_2] ||| [function_1] accumulated value [arg_2]	count=3
function	the elements ||| elements	count=1
function	for ||| get	count=2
module	of this ||| linalg python ops	count=3
function	split ||| sparse split	count=1
function	by a graph ||| graph	count=1
arg	a path ||| filename	count=1
class	dilation function ||| dilation	count=1
function	batch ||| batch norms	count=2
arg	on this op ||| op	count=1
arg	hooks ||| hooks	count=1
module	dict ||| python learn estimators	count=1
function	ops that ||| filter	count=1
function	asserts that [function_2] ||| [function_2] [function_1]	count=3
module	repeat ||| contrib keras python keras	count=1
module	for node-status labels ||| cli	count=1
module	of integers ||| ops distributions	count=1
arg	ys with ||| ys	count=1
function	slots created by ||| get slot	count=1
module	axes of ||| contrib labeled_tensor python ops	count=2
function	sequence ||| texts to	count=1
function	into raw params ||| to raw params	count=1
function	absolute difference loss ||| absolute difference	count=2
function	plugin [function_2] ||| [function_1] [function_2]	count=3
arg	and a target tensor ||| target from_logits	count=1
function	events in ||| events	count=1
module	the vocabulary ||| learn python	count=1
function	isinf are not applicable ||| gives false	count=1
function	check whether a ||| is	count=1
arg	validity of co-existance of ||| x y input_fn feed_fn	count=1
function	a new ||| init	count=2
function	an embedding column ||| embedding column	count=2
function	digamma x ||| lgamma	count=1
function_arg	[function_1] batch ||| [function_1] [arg_2]	count=3
function_arg	a python [arg_2] ||| [arg_2] [function_1]	count=1
module	a sequence of ||| python	count=1
function	verifies that ||| test	count=1
class	to make sure we ||| files	count=1
class	callback ||| wrapper session	count=1
arg	the cells in ||| conf cells c_prev	count=1
function	transposes ||| transpose	count=1
function	iff the [function_2] ||| [function_2] [function_1]	count=4
arg	softmax_cross_entropy_with_logits ||| onehot_labels	count=1
class	of when this tensor ||| debug tensor	count=1
function	the predictions with respect ||| precision	count=1
function	[function_1] features ||| [function_1] [function_2]	count=29
module	learn the vocabulary ||| learn python learn	count=1
function	parameters and flops ||| logged ops	count=1
function	returns a function that ||| get feed dict fn	count=1
arg	cond is ||| cond	count=1
class	registered function corresponding ||| func registry	count=2
arg	by randomly shuffling ||| min_after_dequeue	count=1
function	a concat ||| concat	count=1
function	values then ||| assert valid sample	count=1
function	random spatial zoom of ||| random zoom	count=1
arg	tensor ||| height	count=1
function	a biasadd [function_2] ||| [function_2] [function_1]	count=3
function	reservoirs ||| uses seed	count=1
module	for evaluating ||| contrib tensor_forest	count=1
module_class	[module_1] [class_2] ||| [module_1] distributions [class_2]	count=2
arg	runs a microbenchmark ||| size iters	count=1
function	tensors linked to ||| regex	count=1
module	that creates training and ||| learn python learn ops	count=1
function	returns the proto_type ||| type	count=1
class	variable to ||| variable	count=1
arg	[arg_1] sgv1 (see ||| [arg_2] [arg_1]	count=5
function	to make sure we ||| test	count=1
function	in tensorboard ||| tensorboard	count=1
module	an integer tensor ||| keras	count=1
module	a ||| keras python	count=1
arg	pending inputs ||| pending	count=1
arg	add its inputs ||| inputs state	count=2
function	graph which compute ||| graph	count=1
module	a menuitem ||| cli	count=1
arg	to runoptions ||| run_options node_name output_slot debug_ops	count=1
module	dictionary and return ||| learn python	count=1
function	real valued features ||| real valued features perfectly	count=1
function	overriding [function_2] ||| [function_2] [function_1]	count=4
module	checkpoint ||| python learn	count=1
module	variable ||| python keras	count=3
function_arg	correlation coefficient [arg_2] ||| [function_1] [arg_2]	count=2
arg	common code ||| op	count=1
arg	to the transformed ||| transformed	count=1
function	creates a bidirectional recurrent ||| bidirectional rnn	count=1
arg	recording ||| name iters cpu_time wall_time	count=1
function	runoptions for [function_2] ||| [function_2] dump path and [function_1]	count=1
function	that initializes all tables ||| initialize all tables	count=1
arg	a tree representing the ||| inputs input_shape input_type	count=1
class	underlying [class_2] ||| [class_2] [class_1]	count=2
function	function for ||| fn	count=2
module	colocate_clip_ops_with_vars ||| opt	count=1
function	[function_1] outputs ||| [function_2] [function_1]	count=4
function	has been decorated with ||| has arg scope	count=1
function	[function_1] events in ||| [function_2] [function_1]	count=2
class	the input projection and ||| input projection wrapper	count=1
module	text ||| keras python	count=1
module	of the ||| contrib distributions python ops	count=3
function	validates bias ||| bias only	count=1
function	same as linear_model_fn but ||| linear model fn with model fn	count=2
function	[function_1] invalid type ||| [function_2] [function_1]	count=9
function	[function_1] gradient ||| [function_2] [function_1]	count=10
function	and names that ||| and	count=1
module	of ||| contrib distributions python	count=1
function	whether a [function_2] ||| [function_1] [function_2]	count=1
function	a sentinel [function_2] ||| [function_2] [function_1]	count=4
function	dense [function_2] ||| [function_2] to [function_1]	count=1
arg	normalizes the given input ||| inputs	count=1
function	integer column [function_2] ||| [function_1] [function_2]	count=1
function_arg	value [arg_2] ||| [function_1] [arg_2]	count=2
class	for debug tensor watching ||| base debug wrapper	count=1
arg	a python object "candidate" ||| candidate	count=1
function_arg	write the [arg_2] ||| [arg_2] [function_1]	count=1
arg	converts an op ||| op	count=1
arg	visitor ||| cls visitor	count=1
module	evaluates ||| training python training	count=1
function_arg	[function_1] labels ||| [function_1] predictions [arg_2]	count=13
arg	the labels and predictions ||| predictions labels	count=3
arg	given sensitivity ||| sensitivity weights	count=1
function	to vector [function_2] ||| [function_2] [function_1]	count=4
function	values ||| maybe assert valid	count=1
function	tile the [function_2] ||| [function_1] [function_2]	count=2
function	[function_1] factors ||| [function_1] [function_2]	count=7
class	with output [class_2] ||| [class_2] [class_1]	count=1
module	a ||| distributions	count=1
class	to ||| saver builder	count=2
function	[function_1] sparse_column_with_integerized_feature ||| [function_2] [function_1]	count=2
function_arg	[function_1] biasaddgrad op ||| [arg_2] [function_1]	count=1
arg	dtype ||| name shape dtype	count=1
module	the sense of ||| linalg python ops	count=5
function	exit op are ||| exit grad	count=1
function_arg	compile [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] without ||| [function_1] [function_2]	count=2
function	a tensor to use ||| parse data tensor or dict	count=1
function	[function_1] train ||| [function_2] [function_1]	count=2
function	init op ||| init op	count=2
function	return ||| maybe	count=1
class	internal saver state after ||| saver	count=1
function	all the ||| regex	count=1
arg	ys with respect to ||| ys	count=1
arg	distances to ||| steps	count=1
function	given task in the ||| task	count=1
function	exists or not ||| file exists	count=1
module	to __init__ which gets ||| contrib distributions python	count=1
function	convert it into html ||| text array to html	count=1
module	constant ||| layers python layers	count=1
function	value ||| value	count=16
function	[function_1] items ||| [function_2] [function_1]	count=2
function	sprite image ||| make sprite image	count=2
function	real valued [function_2] ||| [function_1] [function_2]	count=7
function_arg	python file [arg_2] ||| [function_1] [arg_2]	count=1
module	for proper shape values ||| python ops distributions	count=1
function	rank ||| tensor rank tensor	count=2
arg	given sensitivity ||| sensitivity	count=1
function	converts embedding lr multipliers ||| extract embedding lr multipliers	count=1
arg	with all elements ||| dtype name	count=2
module	copy ||| copy_graph python util	count=1
module	model ||| contrib keras python keras engine	count=5
function	integer ||| integer weighted sparse column succeeds	count=1
function	a smaller ||| shrink	count=1
arg	of tensors into a ||| tensors	count=1
function	total loss ||| total loss	count=4
module	list of ||| contrib layers python ops	count=1
module	dimension of ||| ops	count=1
function_arg	[function_1] v to ||| [arg_2] [function_1]	count=4
function	[function_1] update op ||| [function_1] [function_2]	count=1
function	[function_1] a sparsetensor ||| [function_2] [function_1]	count=2
function	[function_1] batch dimension ||| [function_2] [function_1]	count=1
arg	an exponential distribution ||| minval maxval seed	count=1
function	_guideref from ||| guide index	count=1
class	using the wals method ||| walsmatrix	count=1
arg	different dtype and returns ||| dtype	count=1
module	[module_1] model's forward ||| [module_1] [module_2]	count=2
function	worker [function_2] ||| [function_2] [function_1]	count=1
function	a tuple of slices ||| slices	count=1
function	constructor ||| init	count=2
arg	tensor if ||| tensor perm	count=1
module	do ||| layers python layers	count=2
function	given variable ||| set variable	count=1
function	get all the ||| regex	count=1
arg	registered assets in logdir ||| logdir	count=1
arg	input best path ||| inputs sequence_length	count=1
function_arg	[function_1] "b" ||| [arg_2] [function_1]	count=2
function	to ops that match ||| filter ts	count=1
module	image s by ||| image python	count=1
function	a deconv layer based ||| get deconv	count=1
function	[function_1] inputs to ||| [function_1] node without [function_2]	count=1
function	task ||| task	count=1
module	training ops [module_2] ||| [module_1] [module_2]	count=1
class	multivariate normal distribution ||| multivariate normal diag plus low rank	count=1
function_arg	names from [arg_2] ||| [arg_2] [function_1]	count=1
function	single bprop [function_2] ||| [function_1] [function_2]	count=1
module	the given ||| feature_column	count=1
module	inner ||| layers python layers	count=1
class	table ||| mutable dense hash table	count=1
function	on the value type ||| value	count=1
class	indicated ||| data frame	count=1
module	the op (e ||| python framework	count=1
function	supported by sdcaoptimizer ||| valid for sdca	count=1
arg	svstepcounterthread ||| sv sess step_counter	count=1
arg	a single ||| x y sample_weight	count=1
function	get [function_2] ||| [function_1] tensor [function_2]	count=3
function	a python callable that ||| callable	count=1
module	are sessionrunhook raises typeerror ||| estimator	count=1
function_arg	extend [arg_2] ||| [function_1] tensor [arg_2]	count=1
function	for matmul ||| mat mul	count=1
function	initializer within ||| initializer	count=1
arg	pure-decoding option ||| initial_state attention_states cell	count=1
function	verifying ||| adjust	count=1
class	proper shape values ||| dirichlet	count=1
module	integer[s] or tensorshape object[s] ||| seq2seq python	count=1
arg	based on ||| weight_collections	count=1
arg	the parameters for ||| use_peepholes share_time_frequency_weights cell_clip	count=1
arg	a session, and tries ||| master saver checkpoint_dir checkpoint_filename_with_path	count=1
arg	long short-term memory ||| x states_prev scope	count=1
function	scope from ||| scope	count=1
arg	dims values [arg_2] ||| [arg_1] [arg_2]	count=1
class	have a ||| files	count=1
module_class	in specific [module_1] [class_2] ||| [module_1] tensor [class_2] scatter indices value name	count=1
module	helper which properly compares ||| contrib distributions	count=1
class	the grad state for ||| flow state	count=1
arg	the forward step for ||| input_data input_h input_c params	count=1
arg	index ||| index	count=2
function	[function_1] tensor's shape ||| [function_2] [function_1]	count=1
module	to disk ||| python summary	count=1
class	by this operator to ||| operator scaled	count=1
function	step false positives ||| sparse false positive at k	count=1
function	operator [function] ||| [function]	count=1
function_arg	column filled [arg_2] ||| [function_1] [arg_2]	count=1
function	handler for [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] at ||| [function_1] [function_2]	count=2
function	stochastic tensors ||| stochastic	count=1
class	the value ||| value	count=1
class	test ||| fused rnn cell test	count=1
function	a network instance given ||| net	count=1
function	of replicas ||| replicas	count=1
module	the cli see the ||| python debug cli	count=2
function	deepcopy of ||| deep copy	count=5
class	returns a condcontext object ||| cond context	count=1
class	hparams object ||| hparams	count=1
function_arg	[function_1] savedmodel ||| [function_1] [arg_2]	count=2
function	end of an ||| on epoch end	count=1
module	version ||| python ops distributions	count=2
function	definition if ||| definition if	count=1
arg	or y ||| y name	count=1
class	that ||| test base	count=2
class	elements ||| pdbase	count=1
function	to index of ||| add to index	count=2
module	a numpy ||| contrib keras python keras	count=1
module	make sure we ||| tools compatibility	count=1
function	the mean relative ||| streaming mean relative	count=2
arg	value to a ||| value	count=1
class	initializer as a ||| initializer	count=1
function	used within an arg_scope ||| add arg scope	count=1
arg	the calculation in grad_fn ||| func grad_fn	count=1
function	wrong shape ||| bad	count=1
function	matrix to ||| matrix to	count=4
function	calculate the optimal ||| optimal	count=1
function	export strategies with ||| export strategies	count=2
function	the variable scope ||| variable scope	count=2
module	the ||| python ops	count=56
arg	with ||| allow_nan_stats	count=1
arg	computes the ||| dim weights	count=1
function	enable or disable ||| experimental	count=1
function	0 with same shape ||| zeros	count=1
module	the matrix of ||| contrib factorization python ops	count=1
arg	an optional batch_norm layer ||| inputs num_outputs kernel_size stride	count=1
function	returns whether a ||| is	count=1
function	11-layers version ||| a	count=1
function	boots 3 servers ||| spec propagation three servers one	count=1
arg	v ||| v	count=5
function	bounding [function_2] ||| [function_1] [function_2]	count=1
function	for the batch ||| batch	count=1
function	[function_1] model_fn ||| [function_2] [function_1]	count=2
class	gradients of the dilation ||| dilation test	count=1
arg	to_proto and from_proto ||| proto_type to_proto from_proto	count=2
function_arg	[function_1] sequences into ||| [function_1] matrix [arg_2]	count=1
class	of the erosion function ||| erosion	count=1
function	richtextlines object ||| rich text lines	count=1
function	_targetcolumn [function_2] ||| [function_2] [function_1]	count=7
function_arg	[function_1] precision@k ||| [function_1] [arg_2]	count=8
function	or backward ||| ndlstm base	count=1
function	check for out-of-order ||| check for out of order	count=1
function	a switch op ||| switch grad	count=1
function	single example ||| parse single example	count=2
module	list of ||| contrib linalg python ops	count=2
class	a staging [class_2] ||| [class_2] [class_1]	count=5
function	create ||| create control flow	count=1
function	at the end of ||| end	count=2
function	params from the ||| params	count=1
function	the collection with the ||| to collection	count=1
function	an example [function_2] ||| [function_2] [function_1]	count=1
function	bad ||| bad file	count=1
function	the fingerprint concatenation has ||| output v2 has	count=1
arg	n elements from ||| n name	count=4
function	a subgraph from a ||| view from	count=1
module	embedding ||| legacy_seq2seq python ops	count=2
function	the given path ||| path	count=1
function	[function_1] dynamic rnn ||| [function_2] [function_1]	count=4
class	a ||| menu	count=1
function	the address of the ||| address	count=1
function	trace ||| store trace info	count=2
arg	node in ||| node	count=1
class	that yields a ||| record input	count=1
function	dense [function_2] ||| [function_1] [function_2]	count=2
function	relative timestamp ||| rel timestamps	count=1
function	kernels [function_2] ||| [function_2] [function_1]	count=3
arg	data_sources ||| data_sources	count=1
function	arg ||| arg	count=1
function	that applies the sum ||| sum	count=1
module	of current ||| factorization python ops	count=1
arg	op1 ||| op1	count=2
class	for an lstm cell ||| coupled input forget gate lstmcell	count=1
function	by a graph ||| by graph def	count=3
function_arg	converting objects [arg_2] ||| [arg_2] [function_1]	count=2
module	embeddings ||| python layers	count=1
function	[function_1] noise from ||| [function_2] [function_1]	count=2
function	ops with ||| test watching variable update	count=1
function	the 2d convolution layer ||| conv2d	count=1
function	postfix representation of ||| spec structure	count=1
function	timeline ||| timeline	count=1
function	[function_1] filter ||| [function_1] nonexistent [function_2]	count=1
function_arg	filename for [arg_2] ||| [function_1] [arg_2]	count=3
function	end ||| on batch end	count=1
module	convolution ||| contrib slim python slim nets	count=1
class	of run() ||| run context	count=1
function	of the names ||| names	count=2
function	fingerprint concatenation has ||| hashed output v2 has	count=1
function	[function_1] a pandas ||| [function_1] [function_2]	count=1
function	[function_1] new control ||| [function_1] [function_2]	count=1
function	directory ||| dir	count=5
module	estimate of the ||| bayesflow python ops	count=1
class	sparse tensor in a ||| sparse tensor	count=1
function	>= elbo ||| elbo	count=1
arg	a tf learn ||| pandas_dataframe num_threads enqueue_size	count=1
module	and return ||| learn python	count=1
function	switch op is ||| switch grad	count=1
arg	body to the ||| body	count=1
class	create a ||| round robin	count=1
function	containing all the data ||| all	count=1
function	the ||| type	count=1
function	[function_1] a bucketized ||| [function_2] [function_1]	count=2
class	which values will ||| indexed slices	count=1
arg	or grayscale images ||| images contrast_factor	count=2
function	[function_1] cell ||| [function_2] [function_1]	count=6
class	an event file ||| summary to event	count=1
module	return indexies of ||| contrib learn python learn preprocessing	count=1
function	root mean squared error ||| root mean squared error	count=2
arg	input best ||| inputs sequence_length	count=1
module	updates internal ||| keras	count=1
function	the nchw format to ||| nchwto	count=1
arg	the specified axes ||| x axes	count=1
module	dataframe into ||| learn python learn dataframe	count=1
function	x ||| strict conv1d	count=1
module	output ||| contrib keras python keras engine	count=1
arg	that maps ||| mapping default_value name	count=1
function	keys of ||| keys	count=1
module	returns a tensor ||| learn python learn dataframe	count=1
arg	with feeds and fetches ||| fetches feeds	count=1
function	values from ||| from map	count=1
arg	string record to ||| record	count=1
class	make sure we ||| upgrade	count=1
class	will be ||| indexed slices	count=1
arg	r^k, for k >= ||| loc atol rtol validate_args	count=1
function	custom ||| custom	count=4
arg	a riemann sum ||| labels weights num_thresholds	count=1
function_arg	1d [arg_2] ||| [function_1] cumsum [arg_2]	count=5
module	factorization ||| factorization python	count=1
module	a dataframe into ||| contrib learn python learn dataframe	count=1
module	perform the ||| python ops	count=1
function	operation for ||| op	count=1
arg	getter ||| history_value	count=1
function	input ||| input values	count=3
function	a file ||| file	count=3
function_arg	sparse [arg_2] ||| [arg_2] [function_1]	count=9
class	for node-status labels ||| stepper cli	count=1
function	into raw ||| features to raw	count=2
function	writes a dict ||| write dict	count=2
function	tensor [function_2] ||| [function_2] to string table [function_1]	count=1
arg	loop function loop_fn ||| loop_fn parallel_iterations swap_memory	count=1
class	sure ||| upgrade	count=1
function_arg	[function_1] [arg_2] ||| [function_1] shallow_tree [arg_2]	count=6
module	__init__ which ||| distributions python ops	count=1
class	callback after ||| base monitor	count=1
function_arg	matrix multiply [arg_2] ||| [function_1] [arg_2]	count=6
function_arg	[function_1] sequence model ||| [arg_2] [function_1]	count=1
function	all the files ||| files	count=1
module	rank of ||| ops	count=1
class	this cell ||| lstmblock fused cell	count=2
arg	specified min and ||| t clip_value_min clip_value_max	count=1
arg	transposed 3d convolution layer ||| inputs filters kernel_size strides	count=1
class	the statistics ||| op stats	count=1
module	tensor and returns it ||| python keras	count=1
arg	concentration and rate ||| concentration rate	count=3
function	sparsecolumns accept [function_2] ||| [function_2] [function_1]	count=3
function	lr [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] feature ||| [function_1] [function_2]	count=3
function	the inputs [function_2] ||| [function_2] without [function_1]	count=1
function	pack ||| pack grad	count=1
function	probabilities for given ||| proba	count=1
function	[function_1] path used ||| [function_2] [function_1]	count=3
arg	the weights ||| weights metrics_collections	count=5
module	returns the length of ||| contrib layers python ops	count=1
arg	all the tensors ||| ops	count=1
function	global dictionary of custom ||| custom	count=1
arg	a state saving ||| cell features labels mode	count=1
module	session and ||| python learn	count=1
function	switch ||| switch grad	count=1
arg	with feeds and ||| feeds	count=1
class	opdefs from ||| op def library	count=1
arg	the cells ||| conf cells c_prev	count=1
function	and no ||| signature def classification6	count=1
function	log p ||| with log	count=1
module	then return tensor version ||| python ops distributions	count=1
module	sense of vector ||| contrib linalg	count=3
function_arg	details [arg_2] ||| [function_1] [arg_2]	count=3
class	the current batch of ||| sequence batch	count=1
function	flip ||| flip	count=6
function	the backprop loop ||| back prop loop	count=2
function_arg	rank is [arg_2] ||| [arg_2] [function_1]	count=1
arg	keep_input ||| tensor_list keep_input	count=1
function	the sum ||| sparse reduce sum	count=2
module	inception ||| contrib slim python slim nets	count=2
arg	values in y_np ||| y_np	count=1
module	relative to tensorflow/ ||| python platform	count=1
arg	given event ||| event	count=1
module	of the ||| bayesflow python ops	count=1
function	stores trace ||| trace info	count=1
function	to loss ||| loss	count=3
function	we can enable centered ||| enable centered	count=1
arg	file ||| filename	count=1
function	partitioned variable ||| collect partitioned variable	count=2
function	with separable ||| separable	count=1
module	ids of a ||| python ops	count=1
function	infer hints ||| infer hints	count=1
function	json ||| json	count=3
function	false positives for ||| streaming sparse false positive at	count=1
function	verifying ||| test adjust	count=1
function	computes various ||| at	count=1
class	registry in a ||| text summary plugin asset	count=1
module	model from a savedmodel ||| python saved_model	count=1
function	with zero [function_2] ||| [function_1] [function_2]	count=1
function	score [function_2] ||| [function_1] [function_2]	count=3
function	[function] if ||| check default [function]	count=1
function	legacy init ||| legacy init	count=1
function	loss calculation with ||| loss with	count=10
class	from the generator ||| generator	count=1
function	[function_1] metric ||| [function_2] [function_1]	count=6
module	parse ||| python debug cli	count=1
function	context manager for maybe ||| maybe	count=1
function	to ||| filter ts	count=1
arg	feature_columns ||| feature_columns name	count=1
function	new checkpoint ||| new checkpoint	count=2
module	we can do a ||| python layers	count=1
arg	the labels ||| labels weights	count=4
function	function for a ||| conv2d	count=1
arg	each input ||| inputs	count=1
function	log ||| write op log	count=1
function	node ||| inputs node	count=1
module	which values will ||| python framework	count=1
function_arg	[function_1] value of ||| [function_1] epsilon [arg_2]	count=1
function_arg	assert [arg_2] ||| python ops [function_1] condition [arg_2]	count=5
arg	a lower triangular matrix ||| tril event_ndims	count=1
arg	event ||| query_for_tag	count=1
class	dictionary and ||| processor	count=1
arg	a non-initialized hashtable object ||| initializer default_value shared_name name	count=1
function	returns the broadcasted ||| broadcast	count=2
function	temporary directory for ||| temp dir	count=1
function	partitioner to ||| partitioner	count=1
module	datasets ||| learn python learn datasets	count=1
function	non-negative ||| static axis non	count=1
function	argument name and ||| argument	count=1
module	or list of tensors ||| python ops	count=1
function	nchw format ||| nchwto	count=1
function_arg	[function_1] variable_def ||| [function_1] proto [arg_2]	count=1
function	recipient ||| node recipients	count=1
function	of a debug ||| debug	count=1
arg	value to a ||| value dtype	count=1
function	whether this is a ||| is	count=1
module	a rank-2 tensor ||| solvers python	count=1
class	truncated ||| truncated	count=1
function	sampled ||| sampled	count=1
class	for the rnn ||| rnn	count=1
arg	the full epoch of ||| sess eval_correct images_placeholder labels_placeholder	count=1
function	for binary [function_2] ||| [function_2] [function_1]	count=1
function	gradients by ||| gradient norms	count=2
function	[function_1] estimator with ||| [function_2] [function_1]	count=2
module	variables to represent the ||| factorization examples	count=1
module	a labeled tensor ||| labeled_tensor	count=1
module	event file to ||| summary	count=1
function	signature from ||| signature	count=1
function	[function_1] lr multipliers ||| [function_1] [function_2]	count=2
arg	num_epochs times and then ||| num_epochs name	count=1
class	tests ||| graph def test	count=1
module	select ||| python training	count=1
module	internal ||| keras	count=1
function	[function_1] tensor ||| [function_2] invalid [function_1]	count=1
function	rnn to predictions ||| predictions	count=1
function	clips values ||| clip by	count=1
function	fingerprint concatenation has no ||| output v2 has no	count=1
arg	of the given values ||| values	count=1
class	shape based on self ||| tensor shape	count=1
function	feed ||| feed keys	count=1
function	the cached tensor ||| transitively outgoing cache	count=1
arg	a graph ||| graph run_meta	count=1
function	and flops for ||| get logged	count=1
function	vector with given ||| vector	count=1
function	for variable-length numeric ||| real valued var len	count=1
function_arg	positives for [arg_2] ||| [arg_2] [function_1]	count=8
arg	parameters of op for ||| op	count=1
arg	op2 hints argument ||| op2 hints	count=2
function	initialize [function_2] ||| [function_2] [function_1]	count=3
module	average ||| python layers	count=3
function	[function_1] to run() ||| [function_1] [function_2]	count=1
arg	via a riemann sum ||| labels weights num_thresholds	count=1
function	valued features [function_2] ||| [function_2] [function_1]	count=2
arg	for recall@k and ||| class_id	count=1
function	column filled ||| column	count=1
function	false positives ||| sparse false positive at	count=2
function_arg	[function_1] [arg_2] in ||| [function_1] f ins batch_size [arg_2]	count=8
function	for proper shape values ||| valid sample	count=1
module	a ||| tools compatibility	count=2
arg	formatted text lines given ||| formatted	count=1
module	and then the cell ||| rnn python ops	count=1
function_arg	[function_1] [arg_2] ||| [function_1] array [arg_2]	count=3
function	make a table row ||| make table row	count=1
function	[function_1] inside ||| [function_2] [function_1]	count=1
function_arg	write [arg_2] ||| [arg_2] [function_1]	count=4
module	of a single ||| python ops distributions	count=2
function	add a summary ||| add histogram summary	count=1
arg	permute a tensor's axes ||| labeled_tensor axis_order	count=1
function	an attribute [function_2] ||| [function_1] [function_2]	count=1
class	the recorded ||| file edit	count=1
function	print the difference ||| print difference	count=2
function	based on ||| fit on	count=1
arg	state saving sequence queue ||| cell	count=1
function	operator is a = ||| operator	count=1
function	input key ||| input	count=1
arg	optimizer ||| learning_rate optimizer	count=1
module	of the model loading ||| contrib factorization python ops	count=1
module	of inverse ||| ops	count=1
function_arg	[function_1] op ||| [function_1] [arg_2]	count=30
arg	based on hasher_spec ||| hasher_spec	count=1
function	the projections of the ||| projections	count=1
function	wrapper ||| irfft wrapper	count=1
function	pooling ratio ||| pooling ratio	count=4
function	reduce an image to ||| reduce	count=1
function	variable and add ||| local variable	count=1
function	with integer ||| with integer weighted sparse column succeeds	count=1
arg	diagonal matrix ||| identity_multiplier diag	count=1
function	tied shared parameters ||| tied	count=1
function	compatible ||| tensors compatible	count=1
module	which properly compares two ||| distributions python kernel_tests	count=1
function	[function_1] graph which ||| [function_2] [function_1]	count=6
function	of tensors ||| tensors	count=1
function_arg	initializes the [arg_2] ||| [function_1] [arg_2]	count=4
arg	that subscribes [arg_2] ||| [arg_2] [arg_1]	count=8
module	of a function ||| ops	count=1
function	dtype based on ||| base	count=1
class	update ||| step timer	count=1
function	no effect ||| no	count=1
function	collections used ||| all collection keys	count=1
module	returns a tensor ||| learn dataframe	count=1
class	construct ||| device wrapper	count=1
module	dictionary and ||| contrib learn python learn preprocessing	count=1
arg	regex match ||| regex	count=1
module	0) ||| distributions	count=1
function	attribute (e ||| attribute at	count=1
arg	e g volumes ||| pool_size strides padding	count=1
function	dict containing state tensors ||| dict to state	count=1
function	cross-entropy [function] ||| sequence [function] by	count=2
function	to a richtextlines object ||| rich text lines from rich	count=1
function	asset from a ||| asset	count=2
function	symbol name -> ||| guide index	count=1
class	text file ||| text file	count=1
module	run ||| python framework	count=1
function	for a rank irfft ||| infer fft length for irfft	count=1
function	[function_1] a page ||| [function_2] [function_1]	count=1
function	state ||| state	count=15
arg	of ||| x	count=1
module	updates internal vocabulary ||| keras python keras preprocessing	count=1
function	details ||| details	count=1
class	hook to ||| hook	count=1
function	produce the same values ||| values	count=1
function	scalar ||| scalar	count=6
function	returns the kind ||| get kind	count=1
function	record variable [function_2] ||| [function_1] [function_2]	count=1
arg	by ||| images	count=1
function	computes log ||| log	count=1
function_arg	structure [arg_2] ||| [function_1] shallow_tree [arg_2]	count=1
function	a shape ||| shape with rank	count=1
module	sense of ||| linalg	count=5
function	_get_sparse_tensors() for ||| get sparse tensors one	count=1
function	classes and no scores ||| build standardized signature def classification6	count=1
function	for state ||| state	count=2
function	tensorflow variables ||| vars	count=1
module_class	[module_1] op with ||| [class_2] [module_1]	count=1
function	variable initialization flag ||| variable initialization	count=2
function	flow ||| flow	count=8
function	[function_1] weighted ||| [function_1] categorical column [function_2]	count=1
arg	runoptions for ||| run_options	count=1
arg	[arg_1] object ||| [arg_2] [arg_1]	count=1
arg	provided evaluation data ||| feed_fn	count=1
arg	operator on [arg_2] ||| [arg_2] [arg_1]	count=1
module	predicate/value ||| layers python layers	count=1
function	transposes a ||| transpose	count=1
function	python object for ||| object	count=1
function	represents the shape ||| shape	count=1
class	creates ||| dense hash table	count=1
function	data format convention ||| data format	count=2
arg	with this name ||| name	count=1
function	util to ||| to	count=1
function_arg	and parameters [arg_2] ||| [function_1] loss loss [arg_2]	count=1
module	returns ||| python learn	count=9
module	given directory ||| python learn utils	count=1
arg	and col batches ||| batch_size project_row projection_weights	count=2
arg	symbol ||| full_name	count=1
arg	kernellinearclassifier [arg_2] ||| [arg_1] [arg_2]	count=1
module	transform that wraps ||| python learn dataframe transforms	count=1
class	create ||| cudnn rnntest	count=1
function	and ||| with feed dict	count=2
function_arg	[function_1] of tensors ||| [function_1] [arg_2]	count=1
module	the end of the ||| contrib graph_editor	count=1
function	split a ||| split	count=2
arg	fn1() or fn2() based ||| fn1 fn2 name	count=1
arg	an output [arg_2] ||| [arg_1] [arg_2]	count=1
function	get the op ||| op	count=1
function	input arguments ||| input args	count=2
function	of the variables updated ||| updated	count=1
function	[function_1] proto ||| [function_1] [function_2]	count=3
function	the broadcasted dynamic shape ||| broadcast dynamic shape	count=1
function	to determine the predicted ||| classes	count=2
module	this cell ||| rnn python ops	count=1
function_arg	tf options [arg_2] ||| [function_1] [arg_2]	count=1
module	returns a ||| contrib learn python learn	count=1
arg	to a tensor ||| name	count=1
function	the tensors linked ||| filter ts from	count=1
module	values then return ||| ops distributions	count=1
module	with the same ||| python ops	count=1
function	backward ||| ndlstm base	count=2
function	into html ||| to html	count=1
function	get request for the ||| get	count=1
module	returns the ||| python framework	count=2
class	split ||| flow data frame	count=1
function	arg_scope can set for ||| arg scoped arguments	count=1
module	then return tensor version ||| ops distributions	count=1
function	with constants ||| constants	count=1
arg	tensor ||| height width channels	count=1
function	for every temporal slice ||| time distributed dense	count=1
arg	migrates the ||| checkpoint_from_path checkpoint_to_path write_v1_checkpoint	count=1
function	single batch of ||| test on batch	count=2
function	returns the ||| get kind	count=1
arg	[arg_1] with validation ||| [arg_2] [arg_1]	count=3
function	file name ||| dump file name	count=2
module	the given subgraph by ||| contrib graph_editor	count=1
function	training ||| training session	count=2
arg	microbenchmark to measure the ||| target size iters	count=1
arg	[arg_1] value tensor ||| [arg_2] [arg_1]	count=4
function	of the variable ||| variable	count=1
class	provide ||| streaming	count=1
function	arguments ||| args	count=6
module	of a call to ||| ops	count=1
class	the grad state for ||| control flow state	count=1
function	maybe ||| maybe	count=2
function	a flow start ||| flow start	count=2
module	dictionary of ||| contrib	count=1
arg	in sampled_candidates ||| sampled_candidates num_true	count=1
arg	by name ||| name size test_with_fake_data	count=1
function	the input mask ||| input mask	count=3
function_arg	[function_1] the command ||| [function_1] [arg_2] erase_existing	count=1
function	input key to ||| input	count=1
module	a dataframe into two ||| learn python learn dataframe	count=1
function	sessionrunhook raises typeerror ||| check	count=1
function	by base class ||| operator	count=1
function_arg	[function_1] between predictions, ||| [arg_2] [function_1]	count=2
function	[function_1] parameters ||| [function_2] [function_1]	count=2
module	needed ||| contrib metrics python ops	count=1
arg	creates batches ||| tensors accept_prob_fn batch_size	count=1
arg	in input_fn ||| input_fn	count=1
module	the op ||| framework	count=1
arg	a microbenchmark to measure ||| target iters	count=2
module	returns ||| learn learn_io	count=2
function	verifies the values for ||| test output values	count=1
function	[function_1] parameters of ||| [function_2] [function_1]	count=2
arg	serialized minibatch ||| serialized_sparse dtype rank name	count=1
function	trainable ||| trainable	count=2
function	does not [function] data purge ||| test [function]	count=1
module	the gradient of ||| ops	count=3
arg	tensor with ||| tensor dtype	count=1
function	raises ||| type	count=1
class	keys and values tensors ||| sharded mutable dense hash	count=1
function	build a signaturedef ||| build standardized signature def	count=1
function	with at ||| with rank at	count=1
module	instantiate a keras tensor ||| python keras	count=1
function	field to observations ||| field to observations map	count=1
function	array [function_2] ||| [function_2] [function_1]	count=6
module	systems of equations ||| contrib linalg python ops	count=1
function	range of replicas ||| replicas	count=1
arg	token [arg_2] ||| [arg_2] [arg_1]	count=1
arg	dimension ||| dim epsilon	count=1
function	[function_1] ops for ||| [function_1] [function_2]	count=5
class	reference to a ||| reference	count=1
function_arg	generate configuration [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] objects ||| [function_2] [function_1]	count=4
function	to run [function_2] ||| [function_2] [function_1]	count=1
module	integrate a ||| contrib integrate	count=1
function	op to initialize the ||| initialize	count=1
module	the rank of ||| ops	count=1
arg	method named schedule of ||| schedule	count=1
function	types for loss ||| dtypes	count=1
arg	inputs to access input ||| inputs	count=1
arg	new values from ||| values	count=1
function	closure ||| closure	count=1
function	of file ||| file	count=1
function	classification ||| classification	count=3
module	returns a tensor for ||| feature_column	count=1
function	a root directory ||| root dir with	count=2
function	between grublockcell [function] ||| training gru block [function]	count=1
function	[function_1] predictive ||| [function_1] [function_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] input_node [arg_2]	count=1
function	tensors linked ||| filter ts	count=1
function	returns the size ||| size	count=2
arg	the targets are ||| targets	count=1
module	batch ||| distributions	count=3
function	required ||| required space	count=1
class	table outputs the ||| mutable hash table	count=1
module	[module_1] that ||| [module_1] [module_2]	count=3
function	[function_1] export ||| [function_2] [function_1]	count=2
function	list of tensor ||| n to tensor	count=3
class	total number of ||| crossed	count=1
arg	use a gradient-based optimizer ||| labels mode params	count=1
function	op ||| op	count=21
function	an iterator ||| iterator	count=1
arg	dims [arg_2] ||| [arg_2] [arg_1]	count=1
module	lanczos ||| python ops	count=1
function_arg	[function_1] and h ||| [arg_2] [function_1]	count=1
arg	[arg_1] loc ||| [arg_2] [arg_1]	count=1
function	for local [function_2] ||| [function_1] [function_2]	count=1
function	symbol name -> _guideref ||| build	count=1
module	get ||| python platform	count=3
module	a sequence of integers ||| keras python keras preprocessing	count=1
function	resnet_v1() ||| resnet v1	count=3
function	1 [function] pill ||| [function]	count=2
arg	full epoch of data ||| sess eval_correct images_placeholder labels_placeholder	count=1
function	add a [function_2] ||| [function_2] [function_1]	count=9
function_arg	creates a [arg_2] ||| [arg_2] [function_1]	count=8
function	inner dimensions ||| inner	count=1
arg	[arg_1] from_proto ||| [arg_1] [arg_2]	count=1
function	the ||| collection proto type	count=1
function	summary tensor used by ||| summary op	count=1
function	[function_1] while loop ||| [function_1] [function_2]	count=7
function_arg	returns predictions [arg_2] ||| [arg_2] [function_1]	count=1
function	an attribute ||| attribute	count=1
module	two dimensions of tensor ||| linalg python ops	count=1
function	to restore variables from ||| sharded restore ops	count=1
function	conv2d ||| conv2d	count=2
arg	computation done by the ||| num_batch_threads max_batch_size batch_timeout_micros allowed_batch_sizes	count=1
function	feature [function_2] ||| [function_1] [function_2]	count=3
function	returns the proto_type for ||| get	count=1
function	underlying node name ||| node name	count=4
function	[function_1] no effect ||| [function_2] [function_1]	count=1
class	is part of ||| sequential	count=1
class	add ||| loop state	count=2
function_arg	[function_1] validates the ||| [function_1] [arg_2]	count=2
function	linear-only ||| linear only	count=1
function	variables for the ||| vars	count=1
arg	on a labeled tensor ||| labeled_tensor axis_order name	count=1
arg	of indices indices in ||| indices	count=1
function_arg	[function_1] condition x ||| [function_1] less equal [arg_2]	count=1
function	read queue batch ||| read keyed batch examples shared queue	count=1
function_arg	[function_1] from job_name ||| [arg_2] [function_1]	count=4
function_arg	[function_1] tf ||| [function_1] sparse [arg_2]	count=2
function	metric names to tuple ||| metric	count=1
function	[function_1] base directory ||| [function_2] [function_1]	count=2
module	image ||| preprocessing	count=1
arg	pads the 2nd and ||| padding	count=1
function	checks whether the ||| maybe	count=1
module	a sequence of integers ||| contrib keras python keras preprocessing	count=1
function	[function_1] binary ||| [function_1] [function_2]	count=1
class	a hparams ||| hparams	count=1
module	provided ||| contrib kernel_methods	count=1
module	non-reference dtype ||| python framework	count=1
function_arg	[function_1] tensors are ||| [arg_2] [function_1]	count=1
module	savedmodel ||| python saved_model	count=1
function	tensor or indexedslices objects ||| n to tensor or indexed slices	count=1
class	} references ||| reference resolver	count=1
class	true if the timer ||| or step timer	count=1
function	insures you can save ||| train save	count=3
function	get ||| caption	count=1
module	of losses ||| python losses	count=1
module	'values' ||| contrib metrics python ops	count=2
module	returns [module_2] ||| [module_1] [module_2]	count=12
class	insertion ||| next queued sequence batch	count=1
module	sequence-to-sequence model ||| legacy_seq2seq python	count=1
arg	from the caption ||| caption	count=1
function	whether a tensor ||| is	count=1
module	the tensors linked ||| contrib	count=1
module	a function of ||| python ops distributions	count=2
function_arg	normalization [arg_2] ||| [function_1] [arg_2]	count=7
arg	scaling the entire ||| level noise_shape	count=1
function	cond that ||| smart cond	count=1
function	processor ||| get processor	count=1
class	wrapper ||| wrapper session test	count=2
module	otherwise ||| python estimator	count=2
function	python object for a ||| to object	count=1
function	a tensorshape of ||| shape	count=1
function	in the collection with ||| collection	count=2
class	dict that contains ||| head	count=1
function	add ||| maybe add	count=1
function	menuitem from ||| to item	count=1
function	all ||| check hooks type	count=1
arg	for inclusion in ||| receiver_tensors	count=1
function_arg	[function_1] given predictions ||| [function_1] [arg_2]	count=2
function	equiv to i + ||| to tensor	count=2
module	reads ||| learn python learn learn_io	count=1
function	computes the number of ||| num	count=2
function	for input to a ||| prepare inputs for	count=1
module	build ||| python saved_model	count=1
function	sentinel event ||| get sentinel event	count=2
function	validate ||| validate keep input	count=1
function	to compute gradient ||| compute	count=1
function	vector x ||| vector	count=1
class	dimension or a ||| tensor	count=1
function	has incorrect [function] ||| test inconsistent label [function] raises	count=4
function	create an ||| create	count=2
module	tensor version ||| python	count=1
function	generate a sentinel event ||| get sentinel event	count=1
module	of keras tensors ||| keras python keras	count=1
function	values then return tensor ||| assert valid sample	count=1
function	flushes ||| flush	count=4
module	-> _guideref from ||| tools docs	count=1
function	sigmoid [function_2] ||| [function_1] [function_2]	count=2
arg	a dimension of ||| name dim	count=1
arg	to axis in ||| axis x_ndims	count=1
class	for a single ||| to event transformer	count=1
function	higher ||| higher	count=1
arg	tensors to ||| tensor_names tensors	count=1
function	function for the ||| function	count=1
module	be used by the ||| python	count=1
arg	of sgv0 [arg_2] ||| [arg_2] [arg_1]	count=5
function	tfdbg logo ||| get tfdbg logo	count=2
module	tensor s ||| keras python keras engine	count=6
module	that can be used ||| layers python layers	count=1
function	the current weights of ||| get weights	count=1
module	converts ||| keras python keras	count=1
module	learn the vocabulary dictionary ||| learn python learn	count=1
function	registered for ||| registered	count=1
function	stores trace information for ||| store trace	count=1
function	input alternatives ||| input alternatives	count=1
class	batch ||| sequence batch	count=1
function	for serving ||| serving	count=1
arg	of x element-wise ||| x	count=3
class	be produced ||| indexed slices	count=1
function	[function_1] add asserts ||| [function_2] [function_1]	count=8
module	from [module] to ||| [module]	count=1
arg	model is ready to ||| max_wait_secs	count=1
module	vocabulary dictionary ||| python	count=1
function	calling reload ||| reload	count=1
arg	mat ||| mat batch_shape static_batch_shape	count=1
module	parameter p ||| contrib distributions python kernel_tests	count=1
module	normally distributed ||| contrib specs	count=1
function	checks if ||| maybe	count=1
arg	func and ||| func	count=1
function	false ||| false	count=2
arg	from a run ||| run plugin_name asset_name	count=1
function	abs ||| abs	count=1
arg	[arg_1] audio ||| [arg_2] [arg_1]	count=1
module	prints ||| contrib keras python keras utils	count=1
function	matrix as an operatorpd ||| operator pd	count=1
module	integer tensor ||| keras python keras	count=1
function	[function_1] predictive ||| [function_2] [function_1]	count=1
arg	across all steps ||| noutput scope	count=1
class	don't have a ||| upgrade files	count=1
function_arg	rnn decoder [arg_2] ||| [function_1] [arg_2]	count=1
function	markdown ||| markdown	count=1
function	parameters of ||| params	count=2
arg	these parameters or ||| name shape dtype initializer	count=2
function	[function_1] step update ||| [function_1] [function_2]	count=4
function	slice ||| slice grad	count=1
function	[function_1] linear-only ||| [function_2] [function_1]	count=2
function	the main page and ||| test request main page	count=1
module	determining [module_2] ||| [module_1] [module_2]	count=4
function	and a mix of ||| mixed	count=2
function	the tensors ||| ts from regex	count=1
class	forcing ||| array	count=1
function	a checkpoint from a ||| checkpoint from	count=1
arg	+ [arg_2] ||| [arg_2] [arg_1]	count=4
function	for an accumulated ||| accumulated	count=1
class	of a forest ||| forest	count=2
module_class	[module_1] session ||| [module_1] chief [class_2]	count=1
module	instantiates a ||| contrib keras python keras	count=1
function	both dense [function_2] ||| [function_1] [function_2] sparse	count=1
function	partitioned [function_2] ||| [function_1] [function_2]	count=5
module	the mnist model up ||| contrib factorization examples	count=1
module	shape values then return ||| python ops	count=1
class	bernoulli ||| bernoulli	count=1
function	convolutions ||| atrous	count=1
function	for linear ||| linear	count=1
function	internal implementation of load() ||| load internal	count=1
function_arg	[function_1] op ||| [arg_2] [function_1]	count=45
function	the vgg ||| vgg	count=1
function	[function_1] at given ||| [function_1] [function_2]	count=2
arg	for precision@k ||| labels predictions_idx class_id weights	count=1
module	helper which ||| distributions	count=1
arg	creates a new ||| name	count=1
module	helper to __init__ which ||| distributions python ops	count=1
function	[function_1] the run() ||| [function_2] [function_1]	count=1
function	record that the given ||| record	count=1
function	the output [function_2] ||| [function_2] [function_1]	count=5
arg	construct an observedstochastictensor ||| dist value name	count=2
module	of tensor a ||| ops	count=1
arg	a batch ||| batch	count=2
function	[function_1] the central ||| [function_2] [function_1]	count=2
function_arg	[function_1] [arg_2] and kl divergence ||| [function_1] [arg_2]	count=1
function	a tensor ||| get	count=1
function	> 0 elementwise ||| diag update positive	count=1
function	filename ||| checkpoint filename	count=1
module	while ||| learn_io	count=2
function	creates a hook ||| run hook	count=1
module	worker ||| contrib factorization python ops	count=1
function	binary classification with ||| logistic	count=1
function	regex search commands ||| regex search	count=1
function	linear operator from a ||| create operator	count=1
arg	the ||| x	count=1
function	[function_1] for linear-only ||| [function_2] [function_1]	count=2
function	x ||| weighted moments	count=1
function_arg	[function_1] inputs ||| [arg_2] [function_1]	count=5
function	[function_1] a tensor ||| [function_1] [function_2]	count=1
function	connected [function_2] ||| [function_2] [function_1]	count=6
function	a report ||| report	count=1
arg	batches [arg_2] ||| [arg_2] [arg_1]	count=2
function	of slots created by ||| slot	count=1
function	a header ||| header from ops and kernels	count=1
function	device is part ||| device	count=1
module	dataframe with only ||| learn python learn dataframe	count=1
function	make sure ||| test	count=1
function	create [function] ||| [function]	count=3
function_arg	last dimension [arg_2] ||| [arg_2] [function_1]	count=1
function	copy to an export ||| copy	count=1
function	the id ||| id	count=3
function	squared error between the ||| squared error	count=2
arg	by names ||| names	count=1
class	and update it with ||| test	count=1
arg	tensor shape in 2 ||| tensor	count=1
class	the vocabulary ||| categorical	count=1
function	a tensor or an ||| tensor or	count=1
function_arg	[function_1] the labels ||| [function_1] [arg_2]	count=14
arg	by applying ||| inputs	count=1
function	are absolute ||| directory absolute	count=1
arg	symbols ||| ids vocab_size embed_dim sparse_lookup	count=1
arg	between an output ||| output	count=1
arg	to ops ||| ops	count=1
function	determinant for ||| det	count=2
module	[module_1] cell and ||| [module_2] [module_1]	count=2
function	field-to-obs mapping into ||| to	count=1
module	return the ||| graph_editor	count=2
arg	a looperthread that ||| timer_interval_secs target args	count=1
function_arg	[function_1] replacement ||| [arg_2] [function_1]	count=3
class	0) ||| bernoulli	count=1
module_class	[module_1] forward ||| [module_1] ops grad [class_2]	count=1
arg	input_fn diffs from the ||| y batch_size num_epochs	count=1
module	the list of ||| python ops losses	count=1
function	return dict symbol name ||| guide	count=1
function	csv [function_2] ||| [function_2] [function_1]	count=6
module_class	this indexedslices ||| framework indexed slices	count=1
function	[function_1] given sampled_candidates ||| [function_1] [function_2]	count=3
arg	graph with feeds ||| feeds	count=1
function	int values ||| int	count=1
class	the debug-wrapper session ||| base debug wrapper session	count=1
class	tests ||| label sparse precision test	count=2
function	[function_1] column with ||| [function_2] [function_1]	count=4
function	by any containing axis_order_scope ||| axis order	count=1
function_arg	[function_1] output ||| [function_1] values [arg_2]	count=2
class	corresponding to this operator ||| linear operator	count=2
arg	tf namespace and write ||| py_modules do_not_descend_map	count=1
module	compute ||| python kernel_tests	count=1
class	symbol}" [class] ||| [class]	count=3
function	crop the [function_2] ||| [function_2] [function_1]	count=2
module	a given factorization ||| factorization python	count=1
class	dimension that ||| dimension	count=1
module_class	params [module_1] [class_2] format ||| [module_1] [class_2]	count=1
module	for determining ||| contrib keras	count=1
class	from the file leaves ||| file	count=1
function	[function_1] real ||| [function_2] valued features [function_1]	count=2
module	returns serialized bigquerytablepartition messages ||| cloud python	count=1
arg	[arg_1] if colocate_gradients_with_ops ||| [arg_2] [arg_1]	count=1
function	and return indexies of ||| fit	count=1
module	dataframe ||| contrib learn python learn dataframe	count=4
module	check ||| python training	count=2
module	each component of ||| ops	count=5
function	message ||| get purge message	count=1
class	to make sure we ||| upgrade	count=1
arg	[arg_1] audio by ||| [arg_2] [arg_1]	count=1
module	this cell output ||| contrib rnn python	count=1
function	or list of variables ||| or list	count=1
module	ops leading to this ||| ops	count=1
function	to strings ||| dtype string	count=1
function	checkpoint file ||| checkpoint	count=1
arg	output from a ||| output node_name	count=1
class	by concrete subclasses ||| debug wrapper session	count=1
function	adds ||| add to	count=1
function	[function_1] forward tensor ||| [function_2] [function_1]	count=4
function	computes log ||| sqrt log	count=1
function	cumulative product of ||| cumprod	count=1
module	the tensors linked to ||| graph_editor	count=1
arg	a lower triangular matrix ||| identity_multiplier diag tril event_ndims	count=1
function	typeerror otherwise ||| hooks type	count=1
function	concentration parameter ||| concentration	count=2
module	tool ||| graph_transforms	count=1
function	state ||| to state	count=1
module	prefetech ||| slim python slim data	count=1
function	the lstm ||| lstm	count=1
module	as the ||| estimators	count=3
function	is requested or not ||| requested	count=1
function	computes exact ||| compute exact	count=1
function	run() call history ||| run calls	count=1
function	[function_1] logistic metrics ||| [function_2] [function_1]	count=1
module	shape representing ||| framework	count=1
function	cell ||| block cell	count=1
module	to ||| contrib factorization	count=1
function_arg	[function_1] regex match ||| [function_1] orig_screen_output [arg_2]	count=1
function	rnn ||| rnn	count=12
function	setter if required ||| setter	count=1
module_class	[module_1] staging ||| [class_2] [module_1]	count=1
function	and loss ||| loss and	count=1
arg	feature_spec ||| feature_spec	count=1
function	it works fine [function_1] [function_2] ||| [function_2] [function_1]	count=3
arg	the filewriter ||| logdir	count=1
arg	[arg_1] + biases ||| [arg_1] [arg_2]	count=6
arg	given inputs [arg_2] ||| [arg_2] [arg_1]	count=1
function	with respect to sparse ||| sparse precision at	count=2
function	[function_1] initialization ||| [function_1] [function_2]	count=4
function_arg	[function_1] deprecation ||| [function_1] notice to docstring [arg_2]	count=1
function	[function_1] for training ||| [function_2] [function_1]	count=2
arg	with these parameters or ||| name shape dtype initializer	count=2
function	of basic metrics ||| default binary metrics	count=1
function	-> _guideref from ||| guide index	count=1
function	[function_1] methods inside ||| [function_2] [function_1]	count=1
module	[module_1] length of ||| [module_2] [module_1]	count=1
arg	epoch ||| epoch	count=2
arg	html ||| contents headers	count=1
function	the save path used ||| save path	count=1
function	[function_1] tensor to ||| [function_1] to sparse [function_2]	count=1
function	finite gradients at ||| finite gradient	count=2
function	logistic [function_2] ||| [function_1] [function_2]	count=1
function	an existing variable ||| variable	count=2
function_arg	[function_1] value ||| [function_1] tensor [arg_2]	count=3
module	rnn ||| contrib learn python learn ops	count=1
function	the names of variables ||| convert names	count=1
function	_guideref ||| guide index	count=1
arg	from thumbnails and returns ||| thumbnails	count=1
module	normal ||| python ops distributions	count=1
module	of a ||| distributions python ops	count=1
function	with ||| feature with	count=1
function	[function] tensor ||| int [function]	count=2
module	instantiates a keras ||| keras python keras	count=1
function	variable-length ||| valued var len	count=1
class	tests ||| export output test	count=1
class	to the ||| summary to	count=2
function	concat node with ||| concat node	count=2
arg	the calculation in grad_fn ||| grad_fn	count=1
module	conjugate ||| solvers python ops	count=1
arg	sequence of symbols to ||| ids vocab_size embed_dim unique	count=1
module	batch systems of equations ||| contrib linalg python ops	count=1
function	and return indexies ||| transform	count=1
function	specified bounding ||| bounding	count=1
function	[function_1] from the ||| [function_1] [function_2]	count=7
function	dict ||| build	count=1
function	argument is an override ||| allowing override	count=1
function	[function_1] dense ||| [function_2] column [function_1]	count=2
module	node-status labels ||| debug cli	count=1
class	context recursively ||| context	count=1
function	[function_1] checkpoint file ||| [function_1] [function_2]	count=3
function	[function_1] and hooks ||| [function_1] [function_2]	count=1
function_arg	a list [arg_2] ||| [function_1] directory [arg_2]	count=1
function	of features ||| features arbitrary	count=2
function_arg	given variable [arg_2] ||| [function_1] [arg_2]	count=1
function	mini [function_2] ||| [function_1] [function_2]	count=1
arg	resnet_v2 bottleneck ||| scope base_depth num_units stride	count=1
function_arg	[function_1] optimizer ||| [arg_2] [function_1]	count=2
function	the sparseadd ||| sparse add grad	count=1
module	for a tensor that ||| python ops	count=1
module	[module_1] image ||| [module_2] [module_1]	count=1
function	printoption ||| printoption	count=1
function	use a nonexistent tensor ||| list tensor nonexistent	count=1
function	[function_1] external_values from ||| [function_1] [function_2]	count=2
function	for second test function ||| test function with args	count=1
function	custom [function_2] ||| [function_2] [function_1]	count=6
function	slots created by the ||| slot	count=1
function	training for mini ||| mini	count=1
function_arg	dependency [arg_2] ||| [arg_2] [function_1]	count=1
function	unary ||| unary	count=1
arg	and scale ||| scale validate_args allow_nan_stats	count=1
function	we detect error for ||| sdcanot supported	count=1
module	last ||| contrib layers python layers	count=1
arg	objects of base_type to ||| base_type conversion_func priority	count=1
arg	to create [arg_2] ||| [arg_2] [arg_1]	count=2
function	a scale ||| make scale	count=1
function	makes this object ||| as	count=1
module	of integer[s] or tensorshape ||| ops	count=1
function_arg	rnn sequence [arg_2] ||| [arg_2] [function_1]	count=2
module	training ops library ||| ops	count=1
function	census wide & deep ||| census	count=1
function	variables updated ||| updated	count=1
module	of a ||| python ops distributions	count=6
function	actually cross ||| non	count=1
function_arg	distribution [arg_2] ||| [function_1] [arg_2]	count=2
function	a richtextlines ||| text lines	count=1
function	the file [function_2] ||| [function_1] [function_2]	count=3
function	step on this estimator ||| step	count=1
function_arg	asset [arg_2] ||| [arg_2] [function_1]	count=2
arg	and col batches ||| batch_size project_row	count=1
arg	processes an image ||| tag wall_time step image	count=1
function	proper shape values ||| assert valid	count=1
function	transposes a sparsetensor ||| transpose	count=1
module	sessionrunhook raises typeerror otherwise ||| estimator	count=1
module	a list of tensors ||| factorization python ops	count=4
function	returns ||| hooks type	count=1
function	current meta ||| meta	count=1
arg	node in the ||| node	count=1
function	arg batch_shape, possibly add ||| batch shape possibly add	count=1
class	debug tensor watching ||| base debug	count=1
function	names of variables within ||| convert names	count=1
module	of one or more ||| python ops	count=1
function	sessionrunhook raises typeerror otherwise ||| check hooks type	count=1
function	with given weight column ||| with weights	count=3
module	for the next runge-kutta ||| integrate python ops	count=1
function	resources visible ||| shared resources	count=1
function	to a sequence ||| embed sequence	count=1
module	the cell [module_2] ||| [module_2] [module_1]	count=1
function	same ||| same	count=2
function	this operator is a ||| operator	count=1
module	given directory ||| contrib learn python learn utils	count=1
module	computes output tensors for ||| keras engine	count=1
function	[function_1] override ||| [function_1] [function_2]	count=3
function	[function_1] [function_2] ||| [function_2] average [function_1]	count=14
module	graphdef ||| python framework	count=1
function	writes metagraphdef to ||| export meta graph	count=1
function	string_to_hash_bucket op to ||| to hash	count=1
function	static ||| static	count=5
class	create ||| state saver	count=1
arg	oxford net ||| inputs num_classes is_training dropout_keep_prob	count=3
class	[class_1] optimizer ||| [class_1] [class_2]	count=8
module	of an integer tensor ||| keras python keras	count=1
class	one step [class_2] ||| [class_1] [class_2]	count=1
class	image buffer ||| image	count=1
arg	@ b ||| a b	count=1
function	init and ||| init	count=3
function_arg	[function_1] failuretolerator ||| [function_1] [arg_2]	count=1
function_arg	[function_1] given ||| [function_1] name shape dtype [arg_2]	count=1
function	[function_1] page and ||| [function_2] [function_1]	count=4
arg	labels and predictions ||| labels predictions weights	count=2
class	inputs ||| debug analyzer	count=1
arg	along [arg_2] ||| [arg_1] [arg_2]	count=1
module	a sequence of integers ||| contrib keras python	count=1
function	computes exact [function_2] ||| [function_1] [function_2]	count=2
function_arg	[function_1] cells in ||| [function_1] dim_indices [arg_2]	count=1
function	scipy for a batch ||| cdf batch	count=1
function	[function_1] a sparse ||| [function_1] [function_2]	count=2
function	weight with other columns ||| other columns	count=1
function	of file names ||| get file names	count=2
arg	a single line ||| line font_attr_segs	count=2
function	true positives ||| true positive at k	count=2
function	output strings e g ||| string	count=1
function_arg	cast a [arg_2] ||| [function_1] to floatx [arg_2]	count=1
class	data ||| data feeder	count=2
function	command [function_2] ||| [function_1] [function_2]	count=4
class	the vocabulary dictionary and ||| processor	count=1
function	load session [function_2] ||| [function_2] [function_1]	count=4
module	a list of tensor ||| ops	count=1
arg	a gradient-based optimizer ||| features labels mode params	count=1
class	array given ||| tensor array	count=2
class	sure we ||| test upgrade files	count=1
function	nodes ||| nodes	count=3
module	true ||| ops distributions	count=1
function	update the [function_2] ||| [function_2] [function_1]	count=1
function_arg	[function_1] g ||| [function_1] [arg_2]	count=3
function	[function_1] discards ||| [function_2] [function_1]	count=3
class	sure we ||| upgrade	count=1
function	rank rfft ||| rfft	count=1
module	as classes ||| learn python learn estimators	count=1
module	creates a sequence of ||| python ops	count=1
function	[function_1] merge with ||| [function_2] [function_1]	count=1
function_arg	created from [arg_2] ||| [arg_2] [function_1]	count=1
arg	computation done by ||| num_batch_threads max_batch_size batch_timeout_micros allowed_batch_sizes	count=1
module	rank-2 ||| contrib solvers python	count=1
function	bundle from [function_2] ||| [function_2] [function_1]	count=1
arg	a list of tensors ||| tensors	count=1
function	values and external_values ||| values	count=1
class	tensorflow tensor have ||| tensor flow	count=2
function	returns the proto_type ||| get collection proto	count=1
function	up ||| up	count=2
function	deprecated argument name ||| deprecated argument	count=1
function	[function_1] data types ||| [function_2] [function_1]	count=2
arg	predictions, labels ||| predictions labels	count=1
function	end [function_2] ||| [function_2] [function_1]	count=4
function	richtextlines object ||| lines	count=1
function	timestamp in ||| timestamp	count=1
arg	custom_getter to [arg_2] ||| [arg_1] [arg_2]	count=1
function	benchmark directly ||| global report benchmark	count=1
function	sparsetensor ||| to sparse	count=1
function	inputs defined by input ||| input	count=1
arg	n elements ||| n name	count=4
module	the axes of two ||| contrib labeled_tensor python ops	count=1
class	distribution parameter ||| gumbel	count=1
class	when this tensor ||| debug tensor	count=1
function	1d ||| strict 1d	count=1
function_arg	initialize a [arg_2] ||| [function_1] [arg_2]	count=1
module	then return tensor ||| python ops	count=1
function	computes the number ||| num	count=2
function	have invalid ||| test invalid number	count=1
function	partition ||| dump with	count=1
arg	example protos ||| file_pattern batch_size reader randomize_input	count=2
function	projections of the ||| projections	count=1
function	trace in chrome trace ||| chrome trace	count=1
arg	layer at shortcut ||| input_tensor kernel_size filters stage	count=1
module	of the ||| contrib linear_optimizer python ops	count=1
module	graph building ||| tensor_forest hybrid	count=1
arg	sgv1 ||| sgv1	count=1
class	run() ||| run	count=1
module	retrieve the ||| python	count=2
function	the flow ||| flow	count=1
function	download the ||| maybe download	count=1
arg	all steps and ||| inputs noutput scope name	count=1
arg	start of an epoch ||| epoch	count=1
function	a sentinel event for ||| get sentinel event	count=1
arg	given node according ||| node_name	count=1
module	forest ||| contrib tensor_forest python	count=1
function	all the ||| filter	count=1
function	from a directory ||| from directory	count=3
function_arg	randomly flip [arg_2] ||| [arg_2] [function_1]	count=1
class	[class_1] event ||| [class_2] [class_1]	count=2
function	[function_1] test ||| [function_1] [function_2]	count=1
function	[function_1] loss of ||| [function_2] [function_1]	count=3
function_arg	status labels [arg_2] ||| [function_1] [arg_2]	count=1
arg	[arg_1] 1 or ||| [arg_2] [arg_1]	count=1
function	the output [function_2] ||| [function_1] [function_2]	count=5
class	name ||| indexed	count=1
module	default ||| python framework	count=1
function	state before starting column ||| col	count=1
function	entire tree of ||| tree	count=1
function	[function_1] for mini ||| [function_2] batch [function_1]	count=2
function	[function_1] the debug ||| [function_2] [function_1]	count=3
function	run() call history ||| run	count=1
function	weight and bias names ||| weight and bias names	count=1
module	previous ||| grid_rnn python ops	count=2
module	given ||| contrib learn python learn estimators	count=2
function	a tf placeholder ||| make placeholder from dtype and shape	count=1
function	internal implementation of ||| load internal	count=1
module	vocabulary dictionary and return ||| python	count=1
module	variable and returns ||| python keras	count=1
arg	seeks to the ||| whence position	count=1
class	normal distribution on ||| normal diag plus low rank	count=1
arg	shape and ||| shape	count=1
function	original input ||| input	count=1
arg	graph to be ||| graph	count=1
module	make sure we don't ||| tools	count=1
arg	file in base_dir ||| base_dir	count=1
function	the fetches used ||| fetches info	count=2
function_arg	node [arg_2] ||| [arg_2] [function_1]	count=1
arg	cond ||| cond	count=1
module	of keras tensors ||| python keras	count=1
module	and return indexies of ||| learn python	count=1
arg	remaps ||| sp_x row_ids shape	count=1
function	2-dimensional data ||| make data from	count=1
arg	tree representing ||| input_shape input_type	count=1
function	initializes values and external_values ||| init values	count=1
class	by the model ||| model	count=1
function	from a [function_2] ||| [function_1] [function_2]	count=9
module	or list of ||| rnn python ops	count=1
function	collection with ||| add to collection	count=1
function	same as linear_model_fn but ||| linear model fn with model fn ops	count=2
function	batch [function_2] ||| [function_1] [function_2]	count=6
function_arg	inputs of [arg_2] ||| [function_1] [arg_2]	count=7
function	kernel mappers ||| kernel mapper	count=2
class	of load() ||| watcher	count=1
arg	input_sequences ||| input_sequences	count=1
function	tensorshape of ||| shape	count=3
function	[function_1] control dependency ||| [function_1] [function_2]	count=3
function	are discarded after ||| data discarded after	count=1
arg	texts to ||| texts mode	count=1
function_arg	specified line [arg_2] ||| [function_1] [arg_2]	count=1
function	loop ||| test loop	count=1
arg	input [arg] pass results ||| [arg]	count=1
class	initializes ||| append docstring	count=1
arg	collects and ||| graph ignore_regex_fpaths	count=1
module	shape ||| python	count=2
function	the resultant of an ||| compute elemwise	count=1
function	creates a default ||| default	count=1
function	as linear_model_fn but returns ||| model fn with model fn ops	count=2
arg	a tensor ||| name optimize	count=1
module	indices of ||| ops	count=1
module	image s by ||| contrib image python	count=1
function	and flops for ops ||| get logged	count=1
module	retrieve ||| tensorboard backend event_processing	count=1
arg	finds ||| checkpoint_dir latest_filename	count=1
function	the last dimension of ||| last dimension	count=1
class	of the dense tensor ||| sparse tensor	count=1
function	return ||| maybe assert valid sample	count=1
class	a vocabulary ||| vocabulary	count=1
arg	predictions ||| predictions labels	count=2
function_arg	[function_1] train a ||| [arg_2] [function_1]	count=3
class	in the ast ||| call visitor	count=1
module	command to the ||| python	count=1
function	the [function_2] ||| [function_1] [function_2]	count=1
function	check on the ||| check	count=1
function	get an ||| get identity operator	count=1
function	computes the mean ||| streaming mean	count=1
function	unique ||| unique	count=3
function	scaled noise from a ||| scaled noise	count=1
function	variable and add it ||| local variable	count=1
function_arg	sets [arg_2] ||| [arg_2] [function_1]	count=1
function	possibly add [function_2] ||| [function_1] [function_2]	count=2
function	squared ||| squared	count=2
module	filters ||| python keras	count=1
arg	value ||| value dtype name as_ref	count=1
function	list of dtypes for ||| dtypes	count=2
arg	from keyword arguments ||| hparam_def model_structure	count=1
arg	using tf nn softmax_cross_entropy_with_logits ||| logits onehot_labels	count=1
function	asset tensors if defined ||| asset tensors	count=1
function	an op that ||| variable op	count=1
function	of all variable names ||| variable names	count=1
function	to extract command ||| command	count=1
function	download ||| maybe download	count=1
function	estimator with ||| with	count=2
function	object's docstring ||| docstring	count=1
module	a given directory ||| learn utils	count=1
function	a savedmodel ||| saved model	count=1
function	predictions [function_2] ||| [function_2] [function_1]	count=15
class	debug tensor watching ||| base debug wrapper	count=1
function	a richtextlines object ||| lines	count=1
function	mean absolute ||| mean absolute	count=1
function	[function_1] sparse feature ||| [function_1] lookup [function_2]	count=1
function	test the ||| test	count=2
function	total size [function_2] ||| [function_2] [function_1]	count=8
arg	batch_size and dtype ||| batch_size dtype	count=3
function	up ||| lookup	count=1
function	sigmoid [function_2] ||| [function_2] [function_1]	count=2
function	log p ||| log	count=1
function	the test [function_2] ||| [function_1] [function_2]	count=2
function_arg	converts a [arg_2] ||| [function_1] matrix [arg_2]	count=2
function_arg	[function_1] the command ||| python debug [function_1] [arg_2] erase_existing	count=1
module	of ||| python ops	count=281
function	run a ||| run	count=2
function_arg	== [arg_2] ||| [function_1] x [arg_2]	count=4
function	to record [function_2] ||| [function_2] [function_1]	count=2
module	-> _guideref from ||| docs	count=1
class	wrapper should ||| wrapper session test	count=1
function	regex [function_2] ||| [function_2] [function_1]	count=4
module	the estimator ||| python	count=1
function	the eval step ||| eval step	count=2
function	a tensor of indices ||| index	count=1
arg	activations from the ||| activations labels	count=3
module	the core version with ||| learn	count=1
arg	[arg_1] keys ||| [arg_2] [arg_1]	count=1
function	serialize an n-minibatch sparsetensor ||| serialize	count=1
function	and real valued ||| optimizer real valued	count=1
function	process the file ||| process	count=1
module	this object overriding ||| ops	count=1
function_arg	mean of [arg_2] ||| [function_1] [arg_2]	count=3
module	which properly ||| contrib distributions python	count=1
arg	all 1s ||| feature_columns columns_to_tensors bias_variable columns_to_variables	count=1
function	the function that computes ||| function	count=1
arg	convert ops to ||| ops check_graph allow_graph ignore_ts	count=1
function	a sentinel ||| sentinel	count=1
arg	of symbols ||| ids vocab_size embed_dim sparse_lookup	count=1
function	on input dimension ||| dim	count=1
module	of tensor ||| python ops	count=4
class	the while loop ||| loop state	count=1
function	[function_1] numpy ||| [function_1] [function_2]	count=1
module	and return ||| python learn preprocessing	count=1
function_arg	[function_1] convolution function ||| [arg_2] [function_1]	count=1
function	the input shape ||| get input shape	count=2
function	dict of predictions ||| logits to predictions	count=2
module	ops library [module_2] ||| [module_2] [module_1]	count=3
arg	input ||| inputs rate noise_shape seed	count=1
module	function for a ||| python framework	count=1
function	indices for ||| index at	count=1
function	[function] if it's ||| check [function]	count=1
function	return the raw ||| get raw	count=1
function	left-most consistent ordering between ||| consistent ordering	count=1
function	loads a [function_2] ||| [function_1] [function_2]	count=2
class	grad ||| grad loop state	count=1
function	adds an event to ||| add	count=2
arg	validates the output ||| file_format duration_sec samples_per_second	count=1
module	models that use a ||| contrib learn python learn estimators	count=1
function	from the ||| build guide index	count=1
function	directory ||| dir with	count=1
arg	microbenchmark ||| name target iters	count=1
class	as a dense tensor ||| sparse	count=2
function	array [function] ||| cast [function]	count=2
function	subscribed ||| subscribed	count=1
class	tests ||| dnnlinear combined classifier test	count=7
function	returns the ||| collection proto type	count=1
function	a copy of ||| copy	count=2
function	all input [function_2] ||| [function_2] [function_1]	count=1
function	an rnn model ||| dynamic rnn model	count=1
function	its ||| name from	count=1
arg	maps [arg_2] ||| [arg_2] [arg_1]	count=4
function	for ||| for	count=12
arg	custom_getter to use the ||| custom_getter	count=1
arg	performs a ||| zoom_range row_axis col_axis	count=1
function	the names of variables ||| names	count=1
arg	and returns it ||| value dtype	count=1
arg	num_epochs times ||| num_epochs name	count=2
function	should be allowed ||| should work	count=1
class	lstm cell ||| lstmblock fused cell	count=2
arg	4 ||| features labels mode	count=1
function	normal distribution of ||| normal	count=1
module_class	of this [class_2] ||| [module_1] [class_2]	count=31
function	with constants of ||| constants	count=1
function	recipients [function_2] ||| [function_2] [function_1]	count=4
function	checks if the ||| maybe	count=1
function	restores the old ||| restore	count=1
module	a transform that wraps ||| learn dataframe transforms	count=1
module	equal to ||| ops distributions	count=1
function	a process ||| pid	count=1
function	variables in a graph ||| convert variables to	count=1
function_arg	[function_1] a sparsetensorsmap ||| [arg_2] [function_1]	count=1
module	_guideref ||| tools	count=1
module	of dimensions corresponding to ||| contrib distributions python ops	count=2
function	not within [1 2) ||| large	count=1
class	page ||| page info	count=1
function	is zlib library compatible ||| write zlib read	count=1
function	-> _guideref from the ||| guide	count=1
function	kernel [function_2] ||| [function_1] [function_2]	count=7
function_arg	placeholder [arg_2] ||| [arg_2] [function_1]	count=1
arg	the labels ||| labels	count=9
module	rotate ||| python ops	count=1
module	the vocabulary ||| contrib	count=1
module_class	[module_1] operator ||| [class_2] [module_1]	count=2
function	with vocabulary ||| with vocabulary with dense	count=1
module	the core version with ||| contrib learn python learn learn_io	count=1
function	[function_1] real ||| [function_2] valued [function_1]	count=2
module	check to ||| tools	count=1
function_arg	[function_1] linearestimator object ||| [arg_2] [function_1]	count=1
function	clusters centers ||| clusters	count=1
function_arg	[function_1] textlinereader ||| [function_1] [arg_2]	count=1
module	of rank 2 ||| ops	count=1
function	the ||| build guide index	count=1
arg	the meta graph def ||| export_dir meta_graph_def_to_load	count=1
module	the proto_type ||| python framework	count=1
arg	a graph element ||| element_name handle_node_names intermediate_tensor_names	count=1
function	[function_1] matrix data ||| [function_1] [function_2]	count=3
class	a session ||| session	count=1
function	audio ||| audio	count=4
function	to restore variables from ||| restore	count=1
module	variable and ||| contrib keras python keras	count=1
arg	fn_else() based ||| fn_then fn_else	count=1
function	a richtextlines object ||| rich text lines from rich	count=1
arg	two tensors ||| a b	count=1
function	mean and variance ||| normalize moments	count=1
arg	boundaries and [arg_2] ||| [arg_1] [arg_2]	count=1
function	few handmade examples ||| handmade	count=1
function	zlib library compatible ||| test write zlib read	count=2
class	a layer ||| layer	count=8
function	[function_1] training ||| [function_1] [function_2]	count=4
module	init ||| python saved_model	count=1
module	systems of ||| linalg python ops	count=1
function	binary operation ||| binary op	count=2
module	generate the set of ||| ops	count=1
function	list of names ||| names	count=2
function	have non-broadcastable shapes ||| broadcastable batch shape	count=1
function	next cont() [function_2] ||| [function_1] [function_2]	count=1
function	gradients at ||| gradient	count=1
class	pack ||| optimizer interface	count=1
function	[function_1] path ||| [function_1] [function_2]	count=9
function	create sharding ||| sharding	count=1
class	staging [class_2] ||| [class_1] [class_2]	count=5
function	[function_1] model ||| [function_2] [function_1]	count=5
function_arg	decoder with ||| decoder decoder_inputs	count=1
arg	function for ||| unused_op	count=1
arg	x or y ||| x y name	count=3
arg	yields batches ||| graph session start_queues	count=1
function	types into acceptable format ||| type	count=1
function_arg	variation for [arg_2] ||| [arg_2] [function_1]	count=1
module	s of the ||| engine	count=1
function	precision values for ||| precision at thresholds	count=1
arg	with new_child ||| new_child	count=1
arg	evaluates a spec ||| spec	count=1
function	menuitem from the ||| caption to	count=1
function	the cached ||| cache	count=1
function	ops that match the ||| filter ts	count=1
function	node stepper ||| invoke node stepper	count=2
module	of a given ||| ops	count=1
arg	each subdataframe ||| df start	count=1
module	of tensor ||| layers python ops	count=1
function	device function ||| device	count=1
function_arg	an exception [arg_2] ||| [arg_2] [function_1]	count=1
class	shape values then return ||| multinomial	count=1
function	[function_1] the attribute ||| [function_1] line [function_2]	count=5
function	an rnn specified ||| raw rnn	count=1
arg	the denominator is zero ||| numerator denominator name	count=1
class	model ||| model	count=11
module	sure we don't ||| tools compatibility	count=1
function	outputs in place to ||| outputs to	count=1
class	enqueue ops for ||| queue runner	count=1
function	the file paths from ||| file paths	count=1
class	function to test a ||| test	count=1
function	tensor from ||| tensor	count=1
class	build an input ||| feature	count=1
module	axes of a ||| contrib labeled_tensor python ops	count=1
arg	tags the ||| tags	count=1
module	indexies of ||| learn preprocessing	count=1
function	[function_1] next cont() ||| [function_2] call dump [function_1]	count=1
module	two dimensions of tensor ||| ops	count=1
function	sessionrunhook raises typeerror ||| type	count=1
function	the list of names ||| names	count=1
arg	[arg_1] outputs ||| [arg_2] [arg_1]	count=1
function	existing model variable with ||| model variable	count=1
function_arg	dict to console ||| dict d show_missing	count=2
function	trigger ||| only summary events trigger	count=1
arg	indices indices in the ||| indices	count=1
function	placeholder [function_2] ||| [function_1] feed [function_2]	count=4
function	helper function to create ||| create	count=1
function	the plugins ||| plugins	count=1
module	for proper shape values ||| distributions	count=1
module	of ||| tensor_forest hybrid python ops	count=3
function	tf events ||| events	count=1
function	have non-broadcastable shapes ||| static check for broadcastable batch shape	count=1
function	tile along the ||| expand and tile	count=1
function	second test function ||| test function with args	count=1
arg	[arg_1] graph_def into ||| [arg_2] [arg_1]	count=2
function	whether tensorflow can access ||| is	count=1
class	sets ||| doc generator visitor	count=1
function	check two ||| two	count=1
function	restore variables ||| sharded restore	count=1
class	and return ||| categorical processor	count=1
class	dictionary and ||| categorical	count=1
function	a report ||| report last	count=1
function	column with int values ||| int column	count=1
class	variable ||| optimizable variable	count=1
class	that ||| debug wrapper session test	count=1
module	tensor ||| keras python keras	count=14
arg	tf nn sigmoid_cross_entropy_with_logits ||| multi_class_labels weights	count=1
function	reduce an image ||| reduce	count=1
arg	saves ||| sess tags	count=1
function	placeholders ||| placeholders	count=1
function	the tensor list ||| tensor list	count=2
function	which reads the value ||| value	count=1
function	return ||| maybe assert valid	count=1
arg	given regex ||| regex	count=1
function	log ||| log op	count=1
module	returns a ||| python learn	count=1
function	a stack of ||| stack	count=1
function	plugin asset ||| retrieve plugin asset	count=2
arg	[arg_1] predictions and ||| [arg_2] [arg_1]	count=2
function	writes have been detected ||| writes detected	count=1
function	[function_1] checkpoint file ||| [function_2] [function_1]	count=3
function	of tensors [function_2] ||| [function_2] [function_1]	count=4
module	build ||| python learn utils	count=1
module	depending ||| contrib labeled_tensor python ops	count=1
function	to gradient for the ||| grad	count=1
function_arg	[function_1] in model_dir ||| [arg_2] [function_1]	count=3
function	object for a ||| object	count=1
function	sequence ||| to sequences	count=1
function	to ||| add to	count=1
function_arg	a dense tensor ||| dense tensor	count=1
function	image ||| image dtype	count=1
module_class	[module_1] node ||| [module_1] [class_2]	count=2
class	[class] does ||| mocking [class]	count=2
function	tf examples to extract ||| columns from examples	count=1
function_arg	computes cos [arg_2] ||| [arg_2] [function_1]	count=1
function	returns a tuple with ||| tuple	count=1
module	are sessionrunhook raises typeerror ||| python	count=1
function	large ||| read large	count=1
arg	a state saving ||| cell features labels	count=1
module	constructor for ||| estimator	count=1
function	a vector with given ||| vector	count=1
module	dict symbol ||| docs	count=1
function	array to ||| array to	count=2
module	cell output ||| contrib rnn python	count=1
function	parameters [function_2] ||| [function_2] [function_1]	count=8
function	pearson ||| pearson	count=1
class	of mixture ||| mixture	count=1
function_arg	to save [arg_2] ||| [arg_2] [function_1]	count=1
arg	create a new loadbalancingstrategy ||| num_tasks load_fn	count=1
function	when one column is ||| one column	count=1
arg	from oldpath [arg_2] ||| [arg_1] [arg_2]	count=1
arg	performs ||| rg row_axis col_axis	count=1
function	calculate the ||| calculate	count=1
arg	condition and body ||| body original_loop_vars loop_vars	count=1
function_arg	[function_1] time ||| [function_1] step [arg_2]	count=3
function	[function_1] distance between ||| [function_2] [function_1]	count=3
function	of status [function_2] ||| [function_1] [function_2]	count=3
module	for node-status ||| debug	count=1
arg	from [arg_2] ||| [arg_1] [arg_2]	count=4
module	of linear eqns ||| ops	count=1
module	get an argspec string ||| lib	count=1
module	the proto_type ||| python	count=1
arg	that broadcasts ||| op_name elementwise_function	count=1
module	for valid command prefix ||| debug cli	count=1
arg	initialize the parameters for ||| num_units use_peepholes share_time_frequency_weights cell_clip	count=1
function_arg	[function_1] op1 ||| [function_1] [arg_2]	count=1
module	sequence ||| keras	count=2
module	tensor s of a ||| keras engine	count=6
arg	and labels ||| _sentinel labels	count=1
module	of [module_2] ||| [module_2] [module_1] assert	count=2
function_arg	[function_1] kernellinearclassifier ||| [function_1] [arg_2]	count=1
arg	of normally distributed histograms ||| tag mu_sigma_tuples n	count=1
function	prepare ||| prepare	count=1
function	can save and ||| train save	count=1
function	[function_1] example ||| [function_1] [function_2]	count=2
function	returns key used for ||| key	count=1
class	output tensors ||| export output	count=1
function	the ||| item	count=1
arg	imports the ||| input_map return_elements	count=1
arg	input and [arg_2] ||| [arg_1] [arg_2]	count=3
function	op to ||| op	count=5
module	building doesn't modify ||| hybrid python models	count=1
function	coordinate labels ||| labels	count=1
function	predictions for [function_2] ||| [function_1] [function_2]	count=7
module	datasets ||| python learn datasets	count=1
module	[module_1] sequence-to-sequence model ||| [module_2] [module_1]	count=4
function_arg	[function_1] metric ||| [function_1] [arg_2]	count=3
function	[function_1] [function_2] ||| [function_1] categorical column [function_2]	count=4
module	prepended ||| contrib linalg	count=1
function	[function_1] handle ||| [function_2] [function_1]	count=7
module	creates a cross-entropy loss ||| losses python losses	count=1
arg	time ||| new_global_step	count=1
class	new partitioned variable ||| partitioned variable	count=2
arg	[arg_1] tf one_hot ||| [arg_1] [arg_2]	count=1
function	state for all ||| state	count=1
function	to the add ||| add	count=1
function	[function_1] the validity ||| [function_2] [function_1]	count=4
function	[function_1] least the ||| [function_1] [function_2]	count=4
module	and ||| contrib learn python learn utils	count=2
module	of zero or ||| ops	count=1
module	from the ||| cli	count=1
function	[function_1] into ||| [function_1] [function_2]	count=3
module	loads all events added ||| tensorboard backend event_processing	count=1
arg	v to m ||| m v	count=3
function	converts a list of ||| sequences to	count=1
function	tensor ||| tensor slice	count=1
function	returns global [function_2] ||| [function_1] [function_2]	count=1
function	unit length ||| unit norm	count=1
function_arg	dequeues and [arg_2] ||| [function_1] [arg_2]	count=3
function	to record variable ||| record variable	count=2
function_arg	values [arg_2] ||| [function_1] tensor_in_sizes [arg_2]	count=1
function	the mahalanobis distance to ||| distance to	count=1
arg	a 4d tensor ||| data_format	count=1
function	pred ||| smart cond	count=1
class	[class_1] feeder ||| [class_2] [class_1]	count=2
class	with the specified item ||| decoder test	count=1
function	log_softmax ||| log softmax	count=1
class	disk ||| summary	count=1
function	a weighted ||| weighted	count=2
function	metagraphdef ||| meta graph	count=3
arg	loc [arg_2] ||| [arg_1] [arg_2] validate_args	count=1
function	of integers ||| texts to sequences	count=1
module	distributed floating ||| contrib specs python	count=1
function	computes the ||| compute	count=3
function	the inception [function_2] ||| [function_2] [function_1]	count=1
function	current meta [function_2] ||| [function_1] [function_2]	count=2
function	the un-normalized l1 ||| l1	count=1
module	updates internal vocabulary ||| keras preprocessing	count=1
function	sqss for input to ||| prepare inputs for	count=1
arg	provided 'op_log', ||| graph log_dir op_log run_meta	count=1
module	to ops ||| contrib distributions python ops	count=1
arg	returns an ||| seed dtype	count=1
function	single example proto ||| single example	count=1
arg	function to structure of ||| apply_fn	count=1
function	resultant of an elementwise ||| compute elemwise op	count=1
function	of a ||| ops	count=1
function	[function_1] into strings ||| [function_2] [function_1]	count=4
module	value of the ||| python	count=1
function	a tf graph for ||| graph	count=1
function	[function_1] decoding ||| [function_2] [function_1]	count=3
class	initializes ||| waiter hook	count=1
module	[module_1] tensorboard ||| [module_1] [module_2]	count=1
module	[module_1] provided ||| [module_1] [module_2]	count=1
function	[function_1] the run() ||| [function_2] short [function_1]	count=1
function	with constants of ||| to constants	count=1
arg	specified min and ||| t clip_value_min clip_value_max name	count=1
arg	value of the ||| value	count=1
function	creates a slot ||| create slot	count=2
function_arg	in a [arg_2] ||| [arg_2] [function_1]	count=3
function	converts embedding [function_2] ||| [function_1] [function_2]	count=3
function	[function_1] absolute value ||| [function_2] [function_1]	count=2
function	to restore ||| sharded restore ops	count=1
function	returns all health ||| health	count=1
class	one ||| one	count=1
module	indexies of ||| python	count=1
function	checks the input types ||| accepts	count=1
function	arg num_rows, ||| num rows	count=1
function	against the partition graphs ||| dump with graphs	count=1
module	loss to the ||| python ops	count=1
module	do a ||| layers python layers	count=1
function_arg	safe mean [arg_2] ||| [function_1] [arg_2]	count=1
class	table outputs the ||| initializable lookup table	count=1
module	the vocabulary ||| contrib learn	count=1
arg	function for f ||| f	count=1
function	an output ||| output	count=2
arg	over some data ||| verbose	count=2
function_arg	device [arg_2] ||| [function_1] [arg_2]	count=1
function	check on the ordering ||| check	count=1
arg	stored ||| var_name	count=1
function	node def [function_2] ||| [function_2] [function_1]	count=4
arg	labels ||| labels num_classes	count=1
function	training with given ||| train with	count=6
module	generates ||| dist_test scripts	count=2
arg	all the tensors linked ||| ops	count=1
arg	compares metagraphdefs [arg] unit test ||| tester [arg]	count=1
function	a contrib op library ||| op library	count=1
function	for small ||| for small	count=2
arg	y w + ||| w	count=1
function	table [function_2] ||| [function_1] [function_2]	count=1
function	second test [function_2] ||| [function_1] [function_2]	count=1
function	tensor as input layer ||| make input layer	count=1
function	[function_1] feedable ||| [function_1] [function_2]	count=1
module	mapping of name to ||| framework python ops	count=1
function	add an ||| add	count=2
arg	token with args ||| token args	count=3
function	csv file without ||| csv without	count=3
function	completely runtime [function_2] ||| [function_2] [function_1]	count=1
function	state ||| call cell	count=2
function	log the ||| log	count=1
class	adagrad optimizer ||| adagrad optimizer	count=2
function	eval step tensor ||| eval step	count=2
function	bilinear resizing ||| resize bilinear	count=1
function	before processing ||| begin	count=1
class	returns a ||| lazy	count=1
module	collection of losses ||| python losses	count=1
module	to ops ||| contrib graph_editor	count=1
function	lstm ||| lstm block	count=1
class	[class_1] be ||| [class_1] [class_2]	count=3
function	to a ||| to	count=11
function	stridedslicegrad ||| strided slice grad grad	count=1
function	[function_1] for serving ||| [function_1] parsing [function_2]	count=1
function	new context in ||| new attr context	count=1
module	which properly compares ||| distributions python kernel_tests	count=1
arg	for linear weights in ||| column columns_to_tensors embedding_lookup_arguments num_outputs	count=1
module	the ||| debug	count=1
function	dims ||| dims	count=1
class	to make sure ||| test upgrade	count=1
function	convert ||| convert to sparse	count=1
arg	recall@k [arg_2] ||| [arg_2] labels [arg_1]	count=2
function	get ||| caption to	count=1
function	sigmoid cross entropy ||| sigmoid cross entropy with logits	count=1
function	the specified line ||| line	count=1
function	this operator ||| operator	count=1
function	sparse [function_2] ||| [function_2] embedding lookup [function_1]	count=1
class	the value tensor ||| stochastic tensor	count=1
function	[function_1] initialize ||| [function_2] [function_1]	count=1
class	resourceexhaustederror ||| resource exhausted error	count=2
function	feed dictionary used when ||| feed dict	count=1
function	[function_1] vectors by ||| [function_2] [function_1]	count=1
function	[function_1] dictionary used ||| [function_1] [function_2]	count=3
class	wrapper should work also ||| wrapper	count=1
arg	to a labeled tensor ||| labeled_tensor	count=1
function	the debug_urls value ||| urls	count=1
module	graph ||| tensor_forest	count=1
function	a menuitem ||| item	count=1
function_arg	[function_1] constructed nodes ||| [function_1] [arg_2]	count=1
class	returns ||| lazy	count=1
function	[function_1] bounding ||| [function_2] [function_1]	count=1
module	given ||| learn utils	count=1
module	losses ||| losses	count=1
function	[function] directorywatcher ||| [function]	count=2
function	a tensor to use ||| label tensor	count=1
arg	row and column ||| rows cols num_shards	count=1
function	given [function] ||| check no sparse [function]	count=1
function	then return tensor version ||| maybe assert valid sample	count=1
arg	to a specified min ||| t clip_value_min clip_value_max	count=1
module	helper to ||| distributions python ops	count=2
function	single bprop step ||| single bprop step	count=2
function_arg	border of [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] graph ||| [function_1] [function_2]	count=19
function	op to use ||| string to	count=1
function	into ||| to	count=5
function	page ||| class page	count=1
arg	[arg_1] tag ||| [arg_2] [arg_1]	count=8
module	a given directory ||| learn python learn utils	count=1
function	get ||| to	count=1
function	rnn model function for ||| dynamic rnn model fn	count=1
module	utility ||| keras python keras applications	count=1
function	extract output file ||| extract output file	count=2
class	summary ||| fake summary	count=1
function_arg	the names [arg_2] ||| [function_1] [arg_2]	count=1
module	of init arg ||| linalg python ops	count=2
module	outputs a summary ||| summary	count=3
function	tf events [function_2] ||| [function_1] [function_2]	count=1
function	adds scaled [function_2] ||| [function_1] [function_2]	count=3
function	returns its namesake ||| get copied op	count=1
module	shape representing a ||| framework	count=1
function	extract command from the ||| get command from	count=1
arg	collect ||| graph_def	count=1
module	self _value ||| contrib bayesflow python ops	count=1
function_arg	[function_1] with ||| [arg_2] [function_1]	count=2
module	1 ||| distributions python	count=1
function	computes the sum ||| reduce sum	count=2
arg	values to a ||| values dtype name as_ref	count=1
arg	contents ||| contents tag	count=1
function	using a wrapper for ||| wrapper	count=1
module	create ||| python training	count=5
arg	ids in a list ||| ids partition_strategy	count=1
module	the element-wise max of ||| python ops	count=1
function	[function] path ||| [function] path to	count=1
arg	or grayscale [arg_2] ||| [arg_2] [arg_1]	count=2
arg	to a tensor ||| name as_ref	count=1
arg	validity of co-existance ||| x y input_fn feed_fn	count=1
function	run time shape ||| shape	count=1
arg	transformations ||| mode	count=4
function	table that converts ||| table	count=1
function	[function_1] saturation ||| [function_1] [function_2]	count=1
class	a graph element ||| node stepper	count=1
function	a simple ||| simple	count=2
function	step [function_2] ||| [function_1] [function_2]	count=8
function	to colocate [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] input tensors ||| [function_1] [function_2]	count=3
arg	the getter for an ||| history_value	count=1
arg	[arg_1] of side_effects ||| [arg_1] [arg_2]	count=2
module	core version with ||| python learn learn_io	count=1
class	the column ||| var len column	count=1
module	of factors weights and ||| factorization python ops	count=1
arg	construct a new movingaverageoptimizer ||| opt average_decay num_updates sequential_update	count=1
function	"a" by dense matrix ||| dense matmul	count=1
function	[function_1] search decoding ||| [function_2] [function_1]	count=1
arg	sequences into a ||| sequences mode	count=1
arg	[arg_1] or y ||| [arg_2] [arg_1]	count=4
function_arg	[function_1] v ||| [function_1] variable [arg_2]	count=1
arg	co-existance ||| x y input_fn feed_fn	count=1
arg	from predictions [arg_2] ||| [arg_2] [arg_1]	count=2
class	a ||| tensor	count=1
function_arg	[function_1] looperthread ||| [arg_2] [function_1]	count=1
function	with respect to ||| precision at top k	count=2
class	gradient ||| gradient	count=2
function	are discarded ||| expired data discarded	count=1
function	un-normalized l1 ||| l1	count=1
function	the gradient ||| set grad	count=1
module	dataframe with ||| contrib learn python learn dataframe	count=1
arg	[arg] meta ||| meta_graph_def [arg]	count=1
module	a 1 ||| python	count=1
function_arg	[function_1] table with ||| [function_1] [arg_2]	count=1
module	values then ||| python ops distributions	count=1
function	its namesake ||| copied	count=1
function	render the rich text ||| render	count=1
function	[function_1] a checkpoint ||| [function_2] [function_1]	count=5
function	of names of the ||| names	count=1
class	index a file reading ||| generate guide index	count=1
arg	validity of co-existance ||| y input_fn feed_fn	count=1
class	of ||| directory watcher	count=2
module_class	[module_1] tensor ||| [module_1] ops [class_2]	count=1
function	scope that ||| scope	count=1
function	operator from ||| create operator	count=1
function	projections of the rows ||| projections	count=1
arg	value ||| value decay weight truediv	count=1
class	derived classes ||| operator derived class	count=1
function	of subscribed ||| subscribed	count=1
arg	from_proto functions [arg_2] ||| [arg_2] proto_type to_proto [arg_1]	count=1
module	normally distributed floating ||| contrib specs	count=1
function	ops to save ||| save ops	count=2
class	vocabulary dictionary of all ||| vocabulary	count=1
function	to their [function_2] ||| [function_2] [function_1]	count=1
class	for a single ||| event	count=1
function	non-reference ||| base	count=1
class	the optimizer ||| sync replicas optimizer	count=1
function	device only if ||| maybe	count=1
function	an exception on bad ||| bad	count=1
function	and ||| and moments	count=2
function	returns a batch ||| get	count=1
function	[function_1] of a ||| [function_2] [function_1]	count=1
function	with integer ||| with integer	count=1
class	tensor with the ||| tensor	count=1
module	auc ||| metrics python ops	count=1
module	extract ||| python debug cli	count=1
arg	a convolution ||| padding stride	count=1
function	gradients [function_2] ||| [function_2] [function_1]	count=4
arg	apply conv ||| filters num_row num_col	count=1
module	of the dataframe and ||| python learn dataframe	count=1
module	of d in ||| ops	count=1
function	[function_1] file ||| contrib layers python layers [function_1] [function_2] column_name vocabulary_file num_oov_buckets vocab_size	count=2
function	interval ||| interval	count=2
arg	given dtype ||| name shape dtype num_shards	count=1
module	number of dimensions needed ||| distributions python ops	count=1
function	control [function_2] ||| [function_2] [function_1]	count=21
function	match the ||| filter	count=1
class	operator ||| operator scaled identity	count=1
module	labeled tensor ||| contrib labeled_tensor python	count=1
arg	state saving ||| cell	count=1
function	of custom [function_2] ||| [function_1] [function_2]	count=1
module	mapping of name to ||| contrib framework python ops	count=1
function	the real part ||| real	count=1
function_arg	[function_1] [arg_2] ||| [function_1] embedding lookup params [arg_2]	count=2
function	capture ||| capture	count=1
function	per step false positives ||| streaming sparse false positive at	count=1
function	a filter for ||| filter	count=1
function	variable ||| variable	count=25
function	tensor ||| from tensor	count=2
function	[function_1] squared error ||| [function_2] [function_1]	count=8
function	variables in a graph ||| variables to	count=1
class	name of the ||| indexed	count=1
class	operator is [class_2] ||| [class_2] [class_1]	count=1
function	nodedef ||| node def	count=1
function	column ||| cols	count=2
class	the stack is empty ||| graph stack	count=1
function	of ||| to	count=1
module	dictionary and ||| learn python learn preprocessing	count=1
module	from a set of ||| ops	count=1
module	optimize ||| python grappler	count=1
function_arg	creates a fakebigqueryserver ||| init address port	count=1
function	then return tensor ||| assert valid	count=1
class	to the meta graph ||| builder	count=1
module	initializes ||| framework python framework	count=1
function	initial value for ||| initial value	count=2
function	of completion items ||| items	count=1
function	rank of ||| rank	count=1
function	[function_1] two graphdefs ||| [function_1] [function_2]	count=1
module	sum of ||| ops	count=2
module	sessionrunhook ||| python	count=1
function	rnn to loss for ||| loss	count=3
function	default graph ||| default graph	count=2
class	have ||| files	count=1
function_arg	abstract method [function_1] [arg_2] in ||| [function_1] f ins batch_size [arg_2]	count=4
function	x ||| reduction dims	count=1
module_class	[module_1] in vdv^t ||| [module_1] operator [class_2]	count=1
arg	a tf learn ||| cls pandas_dataframe num_threads enqueue_size	count=1
arg	the parameters ||| use_peepholes initializer num_proj	count=1
function_arg	converts [arg_2] ||| [function_1] matrix [arg_2]	count=1
function_arg	[function_1] [arg_2] elbo and kl divergence ||| [function_1] [arg_2]	count=1
function	either [function] or ||| [function]	count=1
function	all ancestor ||| gather	count=1
function	shape ||| shape with rank	count=1
function	parameters for a fully ||| legacy fully	count=1
function_arg	stores [arg_2] ||| [function_1] summary_writer [arg_2]	count=3
class	whether the value should ||| stochastic value	count=1
arg	in the checkpoint ||| checkpoint_dir	count=1
function	[function_1] operation that ||| [function_2] [function_1]	count=3
function	a sequence of ||| texts to sequences	count=1
function	[function_1] jit ||| [function_1] [function_2]	count=1
module	of ||| cli	count=1
module	as the ||| contrib learn python learn estimators	count=3
function	recovers ||| recover last checkpoints	count=1
function	jit ||| jit	count=1
class	the name of the ||| indexed	count=1
function	posterior predictive normal distribution ||| normal conjugates known scale predictive	count=1
arg	served to the front-end ||| limit_attr_size large_attrs_key	count=1
function	func ||| arg scope	count=1
function	main page and ||| request main page	count=1
class	wrapper ||| wrapper session	count=1
function	split ||| split apply	count=1
function	examples to ||| examples	count=1
arg	shape as values ||| values	count=1
module	the value of the ||| python	count=1
function_arg	split a [arg_2] ||| [function_1] keyword_required [arg_2]	count=1
function	getargspec ||| getargspec	count=1
function	to use based on ||| to hash bucket fn	count=1
class	table ||| lookup interface	count=1
function	[function_1] row factors ||| [function_2] [function_1]	count=1
function	the legacy init op ||| get legacy init op	count=1
module	the model ||| factorization python	count=1
function	[function_1] page and ||| [function_1] [function_2]	count=4
function	health ||| with health	count=2
function	deconv layer ||| get deconv	count=1
arg	a with block closing ||| unused_type unused_value unused_traceback	count=1
function	tensor into a dense ||| dense	count=1
arg	[arg_1] holds ||| [arg_1] [arg_2]	count=4
class	debug tensor ||| base debug wrapper	count=1
module	instance of ||| ops	count=1
function	legend for node-status labels ||| node status label legend	count=1
function	[function_1] [function_2] ||| [function_1] tensor [function_2]	count=10
function	to the default ||| to	count=1
arg	the given table ||| table	count=1
function	the tensors ||| from	count=1
function	into raw [function_2] ||| [function_1] [function_2]	count=3
function_arg	[function_1] [arg_2] array ||| [function_1] to floatx [arg_2]	count=2
function	operation from ||| op from	count=2
function	removes batch ||| batch norms	count=1
function	[function_1] the global ||| [function_2] [function_1]	count=1
function_arg	with op if ||| with op	count=1
function	[function] into ||| [function]	count=1
arg	an rgb image ||| image saturation_factor	count=1
module	dimensions of ||| python ops	count=2
arg	function for ops that ||| unused_op	count=1
function	creates logistic ||| logistic	count=2
function	time shape ||| graph shape	count=1
module	version with default ||| contrib learn python learn learn_io	count=1
module	batch of beams ||| python ops	count=1
arg	whether pending inputs are ||| pending	count=1
function	the eval ||| eval	count=1
class	check to ||| upgrade	count=1
module	of ||| contrib learn	count=1
class	classifier ||| classifier	count=2
function	provided have invalid ||| test invalid number	count=1
function	tags found ||| tags	count=1
function	if ||| check hooks type	count=1
class	the latest checkpoint ||| checkpoint	count=1
arg	tensors ||| tensors session feed_dict fetches	count=1
module	vgg ||| slim nets	count=3
module	list of the ||| framework python ops	count=1
function_arg	resnet-50 model [arg_2] ||| [function_1] [arg_2]	count=1
arg	queue to create batches ||| batch_size capacity enqueue_many	count=1
module	list of the ||| contrib framework python ops	count=1
function	sprite image from ||| sprite image	count=1
function	to handle, with repeated ||| duplicate	count=1
function	serving ||| default serving input fn	count=1
function	return indexies ||| transform	count=1
function	get all [function_2] ||| [function_2] [function_1]	count=5
function	has been decorated ||| has	count=1
function	and timestamps ||| with	count=1
function	[function_1] placeholders from ||| [function_2] [function_1]	count=1
function_arg	[function_1] cursesui ||| [arg_2] [function_1]	count=2
function	fake bias feature column ||| bias column	count=1
function	protos ||| get protos	count=1
function	rank [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] [function_2] ||| [function_2] valued [function_1]	count=2
function	used in [function_2] ||| [function_2] fetches [function_1]	count=1
function	dynamic shapes ||| dynamic	count=2
class	tensor version ||| dirichlet	count=1
module	of this ||| python client	count=2
function_arg	labels for [arg_2] ||| [arg_2] [function_1]	count=1
function	dask dataframe [function_2] ||| [function_1] [function_2]	count=1
arg	and col ||| project_row projection_weights	count=1
function	value of the attr ||| get attr	count=1
class	table outputs ||| dense hash table	count=1
module	with [module_2] ||| [module_1] rnn python [module_2]	count=1
function	input_fn appropriate for serving ||| serving	count=1
class	of text ||| text	count=2
function	[function_1] the jacobian ||| [function_2] [function_1]	count=3
arg	the given threshold ||| threshold	count=1
function_arg	fit function [arg_2] ||| [function_1] loop [arg_2]	count=1
function	computes an output ||| compute	count=1
function	multiply the hessian ||| hessian	count=1
class	determinant ||| operator pdbase	count=1
function	check for [function_2] ||| [function_2] [function_1]	count=1
function	task in the ||| task	count=1
function	page that doesn't exist ||| page	count=1
module	the eventfilewriter ||| python summary writer	count=1
function	[function_1] queue batch ||| [function_1] [function_2]	count=6
function	a temporary directory for ||| temp dir	count=1
module	specific axes of ||| python ops	count=1
function	dequeues ||| dequeue up to	count=1
function	the root [function_2] ||| [function_2] [function_1]	count=12
function	checks whether ||| maybe	count=1
arg	[arg_1] h ||| [arg_1] [arg_2]	count=3
module	rnn ||| rnn python	count=2
function	with ||| test watching	count=1
function	resnet-152 ||| 152	count=1
function	for tf session ||| session	count=1
function	from a given ||| from	count=1
class	table outputs ||| lookup interface	count=1
arg	numeric labels into ||| labels	count=1
function	the end of a ||| batch end	count=1
module	derivative of the ||| python ops	count=2
module	this ||| python framework	count=18
function	[function_1] the input ||| [function_1] [function_2]	count=1
function	true iff [function_2] ||| [function_1] [function_2]	count=3
function	return a tensor ||| label tensor	count=1
class	a valid ||| pdidentity	count=1
function	to a richtextlines ||| rich text lines from rich line	count=1
arg	for the screen output ||| output	count=1
function	device is part ||| gputrace device	count=1
arg	smaller versions of convolution ||| shrink	count=1
function	returns the ||| get collection	count=1
function	non-decreasing ||| non decreasing	count=1
function	get request ||| get	count=1
module	derivative of [module_2] ||| [module_1] [module_2]	count=1
function	arg num_rows, [function_2] ||| [function_2] [function_1]	count=3
module	graph building doesn't modify ||| contrib tensor_forest hybrid python models	count=1
function	the dense tensor ||| sparse tensor dense	count=1
function	computes the approximate auc ||| auc	count=2
module	the matrix of ||| python ops	count=1
function	that maps input key ||| input exprs	count=1
function	wrapped ||| stop	count=1
function_arg	[function_1] predictions ||| [function_1] [arg_2]	count=3
function	[function_1] page ||| [function_1] [function_2]	count=4
function	[function_1] for dnn-only ||| [function_2] [function_1]	count=2
function	caching of control output ||| caching	count=1
function	positives ||| positive at	count=4
function	gmm clustering ||| gmm	count=1
function	the end of an ||| end	count=1
function	size of the state ||| state size	count=1
class	report ||| stepper cli	count=1
arg	initialize a linearoperatordiag ||| diag is_non_singular is_self_adjoint is_positive_definite	count=1
class	history ||| navigation history	count=1
function	exists ||| exists	count=2
class	add ||| clidebug hook	count=1
function	should be ||| should work	count=1
function	input to a ||| prepare inputs	count=2
function	[function_1] estimator ||| [function_2] [function_1]	count=1
class	to the event ||| to event	count=2
function	input arg [function_2] ||| [function_1] [function_2] input_exprs_str	count=1
module	learn ||| learn python learn preprocessing	count=2
function	initial value for the ||| initial value	count=1
function	pandas dataframe ||| pandas	count=2
function	the indices of ||| indices	count=1
function	the number of elements ||| size	count=3
arg	the same shape and [arg_1] [arg_2] ||| [arg_1] [arg_2]	count=1
arg	second-order gradients ||| input_sizes output_sizes window_rows	count=1
function_arg	[function_1] the biasaddgrad ||| [arg_2] [function_1]	count=1
function_arg	[function_1] op1 ||| [function_1] allowing override [arg_2]	count=1
module	dataframe into ||| learn dataframe	count=1
function	cdf ||| cdf	count=1
function	attempt a directory ||| directory	count=1
arg	collects ||| ignore_regex_fpaths	count=1
function	underlying node [function_2] ||| [function_2] [function_1]	count=2
arg	additional feeds and fetches ||| fetches feed_dict	count=1
arg	sharded ||| cls wt_init num_wts num_shards	count=1
arg	python object "candidate" ||| candidate	count=1
function_arg	[function_1] sequence ||| [arg_2] [function_1]	count=1
function_arg	[function_1] tensors are ||| [function_1] valid dtypes [arg_2]	count=1
function	returns -grad * ||| erfc grad	count=1
class	hparams ||| hparams	count=3
function_arg	[function_1] of a ||| [function_1] [arg_2]	count=4
arg	the recall@k of ||| k weights	count=1
function_arg	[function_1] y ||| [function_1] log det jacobian [arg_2]	count=1
function	are sessionrunhook raises ||| check	count=1
arg	input_tensors) from a ||| attr_name	count=1
function	load a checkpoint from ||| checkpoint path	count=1
function	multiply specified ||| multiply	count=1
function_arg	[function_1] from op1 ||| [function_1] allowing override [arg_2]	count=1
module	both the ||| python ops	count=1
function	a menuitem ||| caption	count=1
function	their defs ||| create nodes map	count=1
function	for the specified line ||| at line	count=1
module	dictionary and return indexies ||| python learn preprocessing	count=1
arg	[arg_1] with args ||| [arg_2] [arg_1]	count=1
function	variable-length numeric data ||| valued var len	count=1
function	scaled [function_2] ||| [function_2] [function_1]	count=3
function	cdf against scipy for ||| cdf	count=1
function	the training operation of ||| train	count=1
arg	[arg_1] of predictions ||| [arg_2] [arg_1]	count=2
function	true positives ||| streaming sparse true positive at	count=1
class	a non-reference ||| dtype	count=1
function	set custom ||| set custom	count=2
arg	make sure [arg_2] ||| [arg_2] [arg_1]	count=1
function	debug urls for ||| debug urls	count=2
function_arg	[function_1] getter ||| [function_1] accumulated value [arg_2]	count=1
function	pads a ||| pad	count=1
class	kernel ||| kernel	count=2
function	returns the value ||| value	count=1
function	boots 3 ||| cluster spec propagation three	count=1
arg	fn1() or fn2() ||| fn1 fn2 name	count=1
function	adds the current meta ||| add meta	count=1
class	the dump (event) file ||| tensor datum	count=1
function	lookup ||| lookup	count=2
function	[function_1] list of ||| [function_2] [function_1]	count=4
arg	protocol buffer with images ||| max_images collections	count=1
class	returns the ||| dimension	count=1
function	sparse and [function_2] ||| [function_1] [function_2]	count=1
module	a ||| feature_column	count=1
function	ready ||| ready	count=1
arg	filtering function ||| filterfn	count=1
function	a tensor from ||| tensor from	count=2
function	used within an arg_scope ||| arg	count=1
function	deepcopy [function_2] ||| [function_2] [function_1]	count=11
function	the asset tensors if ||| get asset tensors	count=1
function	[function_1] and mirror ||| [function_2] [function_1]	count=1
module	batch version ||| contrib distributions	count=1
class	tensor into [class_2] ||| [class_1] [class_2]	count=1
function	create a tf placeholder ||| make placeholder from	count=2
function	wrap a ||| wrap custom	count=1
function_arg	load and [arg_2] ||| [arg_2] [function_1]	count=1
arg	try to ||| element_name	count=1
function_arg	[function_1] handle syncreplicashook ||| [arg_2] [function_1]	count=3
function	of higher dimension ||| higher dimension	count=2
function	decode ||| decode	count=1
function	sum [function_2] ||| [function_2] [function_1]	count=2
arg	each input and ||| cls inputs	count=1
function_arg	dequeues [arg_2] ||| [arg_2] [function_1]	count=3
arg	layer repeatedly using stack_args ||| layer stack_args	count=1
function	shape values then ||| valid	count=1
arg	sgv0 to sgv1 (see ||| sgv0 sgv1	count=2
function	to ops ||| from regex	count=1
class	a vocabulary dictionary ||| vocabulary	count=1
arg	functional interface to the ||| inputs	count=3
function	partial runs in the ||| partial run setup	count=1
function	[function_1] mahalanobis distance ||| [function_2] [function_1]	count=1
arg	vectordeterministic distribution on r^k, ||| loc atol rtol validate_args	count=1
function	path to [function_2] ||| [function_2] [function_1]	count=1
module	as the last ||| learn estimators	count=3
module	the ||| feature_column	count=1
module	returns a non-reference dtype ||| python framework	count=1
function	[function_1] control dependencies ||| [function_1] [function_2]	count=1
arg	subgraph sgv ||| sgv control_outputs	count=1
function_arg	[function_1] [arg_2] ||| [function_1] debug_dump tensor_filters [arg_2]	count=9
function	with other columns present ||| other columns	count=1
function	given variable or ||| set variable or	count=2
function	for proper shape values ||| valid	count=1
function	max pool ops ||| max pool	count=1
function	convert ||| as	count=1
module	learn the vocabulary dictionary ||| preprocessing	count=1
function	from the ||| index	count=1
function	labels ||| status	count=1
function	example indices represented as ||| example indices	count=1
class	of the depthwise ||| depthwise	count=1
function	op to ||| string to hash bucket fn	count=1
arg	entries contained within ||| dirname	count=1
function	of tensor objects ||| tensor	count=2
module	of ||| python ops distributions	count=18
class	values of the pooling ||| pooling	count=2
function	a feature [function_2] ||| [function_2] [function_1]	count=3
function	tensors linked to ||| ts from regex	count=1
function	test function ||| test function with args kwargs	count=1
module	the saturation [module] an rgb ||| [module]	count=1
function	of the resultant of ||| compute elemwise op output	count=1
function	the multivariate digamma ||| digamma	count=1
function	[function_1] init and ||| [function_2] [function_1]	count=6
arg	runoptions [arg_2] ||| [arg_2] [arg_1]	count=1
class	iteration ||| gmm algorithm	count=1
module	reduced ||| slim python slim nets	count=1
arg	tensors linked ||| ops	count=1
function	traceback of a ||| traceback	count=1
function	integer ||| int	count=1
class	[class_1] tensor ||| [class_1] [class_2]	count=7
function	ops for [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] possibly add ||| [function_2] [function_1]	count=6
module	of a matrix ||| ops	count=1
arg	initialize the parameters ||| use_peepholes share_time_frequency_weights cell_clip	count=1
module	a sequence of integers ||| contrib keras	count=1
function	predefined ||| predefined	count=1
function	sqrt ||| sqrt	count=1
arg	regex match in rich ||| regex font_attr	count=1
function	inputs ||| inputs tensor info	count=1
arg	featurecolumns ||| feature_columns num_outputs	count=1
function	time [function_2] ||| [function_1] [function_2]	count=7
function	a feature spec ||| create sequence feature spec	count=1
class	create ||| slim rnncell	count=1
function	after broadcasting ||| broadcast	count=1
function	to generate a full ||| full	count=1
function_arg	to observations [arg_2] ||| [function_1] [arg_2]	count=1
function	calculates a file ||| file	count=1
arg	state ||| cell	count=1
class	a table ||| mutable dense hash table	count=1
function	table that ||| table from	count=1
function	function for graph ||| graph	count=2
arg	recall@k of ||| k	count=1
function	training for mini batch ||| mini batch	count=1
module	the collection of losses ||| losses python losses	count=1
class	insertion ||| sequence batch	count=1
class	we don't have a ||| files	count=1
function	the connected ||| connected	count=2
function	returns the complex conjugate ||| conj	count=1
class	a table outputs ||| lookup interface	count=1
class	test ||| draw bounding box op test	count=2
function	conversion functions for ||| conversion functions	count=2
function	run time shape ||| graph shape	count=1
function	with respect ||| precision at top	count=4
module	s of ||| keras engine	count=3
arg	distributions [arg_1] [arg_2] ||| [arg_2] scale validate_args [arg_1]	count=7
arg	output ||| output node_name enable_list_tensors	count=1
arg	a subgraph ||| sgv dst_graph dst_scope	count=1
function	the mean relative error ||| streaming mean relative error	count=1
function	the partitioned ||| collect partitioned	count=1
function_arg	[function_1] given examples ||| [function_1] [arg_2]	count=17
arg	op was marked as ||| op	count=1
arg	values is a ||| values	count=1
class	decoder can decode ||| decoder	count=1
module	the vocabulary dictionary ||| python learn	count=1
function_arg	fit [arg_2] ||| [arg_2] [function_1]	count=1
function	the jacobian is not ||| jacobian	count=1
function_arg	input layer [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] with dynamic ||| [function_2] [function_1]	count=4
module	rank of ||| python ops	count=1
arg	indexies of ||| x	count=1
function	node with the ||| norm node	count=1
function	linear combined ||| linear combined	count=2
arg	validates ||| file_format duration_sec samples_per_second	count=1
arg	[arg_1] fns ||| [arg_2] [arg_1]	count=1
arg	predictions, [arg_2] ||| [arg_2] [arg_1]	count=1
module	returns the proto_type ||| python framework	count=1
arg	across all steps ||| inputs noutput scope name	count=1
function	op that initializes all ||| initialize all	count=1
function	[function_1] op ||| [function_1] tokens [function_2]	count=1
function	fully [function_2] ||| [function_1] [function_2]	count=4
function	numpy ||| versus numpy	count=1
arg	of child_graph ||| child_graph	count=1
arg	the given state ||| state	count=1
function	create an instance of ||| create	count=2
module	the number ||| python	count=1
function	[function_1] jacobian is ||| [function_2] [function_1]	count=3
function	are satisfied [function_2] ||| [function_2] [function_1]	count=1
function	a device for ||| device function	count=1
arg	the second-order gradients ||| pool_func input_sizes output_sizes window_rows	count=1
arg	container of ||| container	count=1
module	constructor ||| estimator	count=1
function	the state for ||| state	count=1
function	to ops that match ||| from	count=1
class	the vocabulary ||| processor	count=1
class	control outputs ||| control outputs	count=4
function	get a ||| caption	count=1
function	given a variable ||| variable	count=1
class	test ||| clisimple mul add test	count=1
module	that wraps ||| learn	count=1
module	input [module_2] ||| [module_1] [module_2]	count=1
function	conv2d produce the same ||| compare fwd conv2d	count=1
function	posterior [function_2] ||| [function_2] [function_1]	count=1
function	wrap ||| wrap custom	count=1
function	sum across ||| sum	count=1
function	computes log [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] variables for ||| [function_1] [function_2]	count=2
function	vectors ||| vector	count=2
function_arg	[function_1] conv + ||| [function_1] bn [arg_2]	count=1
function	richtextlines ||| lines	count=2
arg	x to different tf ||| x	count=1
function	define the tensorflow ||| define	count=1
module	define ||| python ops	count=3
arg	hasher_spec ||| hasher_spec	count=1
arg	for given features ||| input_fn predict_keys hooks checkpoint_path	count=1
function	loop over ||| test loop	count=1
arg	the sliced dimension ||| multiple dim name	count=1
arg	a lookup ||| vocabulary_file vocab_size default_value name	count=1
class	the operation that failed ||| error	count=1
arg	from the loss_collection ||| loss_collection	count=1
function	in a graph and ||| freeze graph	count=1
function	values from a ||| from map	count=1
function	bidirectional ||| bidirectional	count=2
module	model definition for the ||| python	count=1
function	sequence count ||| sequence count	count=1
class	simple ||| actions train test	count=1
arg	session for ||| session step	count=1
class	tests ||| atrous conv2dtest	count=1
function	in the top ||| in top	count=2
function	sharded variables with ||| sharded variable	count=1
class	the event [class_2] ||| [class_2] [class_1]	count=2
arg	that deepconv2d and ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
function	a header for use ||| get header	count=1
function	on a ||| fit on	count=1
module	the sense of ||| contrib linalg python ops	count=5
function_arg	[function_1] [arg_2] ||| [function_1] cls filepatterns feature_spec [arg_2]	count=6
function	given task ||| task	count=1
arg	tensor with defined shape ||| tensor	count=1
function	parses ||| parse	count=3
function	state for ||| state	count=1
function_arg	op to [arg_2] ||| [function_1] [arg_2]	count=1
module	based ||| python framework	count=3
arg	a tensor with the ||| name	count=1
function	least the ||| least	count=1
module	tensor s of a ||| python keras engine	count=6
arg	tensor ||| height width	count=1
function	tensor in [function_2] ||| [function_1] dense [function_2]	count=1
function	prune non-control edges related ||| prune non control edges of	count=1
function	linear_model_fn but ||| linear model fn with model fn ops	count=2
function	[function_1] logo ||| [function_1] [function_2]	count=4
function	run the [function_2] ||| [function_1] [function_2]	count=2
function	create zeros_like for the ||| zeros like outside loop	count=1
function	[function_1] loop to ||| [function_1] [function_2]	count=9
arg	[arg_1] var ||| [arg_2] [arg_1]	count=7
function	verify that ||| verify pd	count=2
function	@{$ ||| doc	count=1
function_arg	[function_1] section as ||| [function_1] [arg_2]	count=4
arg	or 4 ||| features labels mode	count=1
function	write a ||| write	count=5
function	feature spec for ||| sequence feature spec for	count=1
module	same as 'values' ||| contrib metrics	count=1
function	values then return ||| valid	count=1
function	evaluation metric ops ||| eval metric ops	count=3
arg	[arg_1] that ||| [arg_1] fft_rank [arg_2]	count=2
function	invalidate ||| invalidate	count=1
function	embedding and [function_2] ||| [function_1] [function_2]	count=3
function_arg	[function_1] [arg_2] ||| [function_1] tensor_in_sizes [arg_2]	count=3
arg	cpu ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
function	the connected output tensors ||| connected outputs	count=1
function_arg	numpy [arg_2] ||| [arg_2] [function_1]	count=1
class	[class_1] function ||| [class_2] [class_1]	count=4
module	convolution ||| slim python slim nets	count=1
class	or tensor ||| tensor	count=1
function	for bilinear ||| bilinear	count=1
function	the batch normalization layer ||| batch normalization	count=1
function	feature extraction by ||| bottleneck	count=2
arg	matrix ax ||| transpose_x name	count=1
function_arg	verifies validity [arg_2] ||| [arg_2] [function_1]	count=2
function	shape function for ||| conv2d shape	count=2
function	function with support of ||| fn	count=1
arg	a linearoperatorudvhupdate ||| base_operator u diag_update v	count=1
function_arg	[function_1] files given ||| [function_1] cls filepatterns feature_spec [arg_2]	count=2
function	[function_1] and bias ||| [function_1] [function_2]	count=1
function	on ||| fit	count=1
arg	precision@k of predictions ||| predictions_idx weights metrics_collections	count=1
function	node ||| graph node	count=1
function	all the variables ||| convert variables	count=1
function	_targetcolumn for multi class ||| multi class target	count=1
function	the column is both ||| column	count=1
class	values then return ||| multinomial	count=1
module	model ||| keras python keras	count=2
function	average of ||| average	count=2
module	sample ||| bayesflow python ops	count=1
module	abstract ||| contrib keras python keras engine	count=1
module_class	[module_1] in vdv^t ||| [module_1] [class_2]	count=1
module	can be [module] ||| [module]	count=1
module	as ||| learn estimators	count=20
arg	of op ||| op	count=2
arg	data from oldpath to ||| oldpath	count=1
module_class	component of [class_2] ||| [module_1] [class_2]	count=20
function	v3 ||| v3	count=1
module	number of dimensions needed ||| ops	count=1
class	a random [class_2] ||| [class_2] [class_1]	count=1
class	state and/or output dropout ||| dropout wrapper	count=1
function	the values for given ||| values	count=1
function	the ||| guide	count=1
arg	that would feed dict ||| x y batch_size num_epochs	count=1
function	sparse softmax cross entropy ||| sparse softmax cross entropy with logits	count=1
function	absolute ||| absolute	count=2
class	scipy for a mixture ||| mixture	count=1
arg	[arg_1] audio_summ ||| [arg_2] [arg_1]	count=2
class	derived classes ||| linear operator derived class	count=1
function	an op ||| benchmark run op	count=1
module	the given test ||| python	count=1
arg	rank of their ||| rank	count=1
arg	see [arg_2] ||| [arg_1] [arg_2]	count=2
function	value type store ||| value	count=1
arg	a diagonal ||| diag event_ndims	count=1
function	new subdirectory within the ||| get timestamped export	count=2
class	only ||| saved model export utils	count=1
function_arg	in a [arg_2] ||| [function_1] [arg_2] erase_existing	count=2
function_arg	[function_1] with signatures ||| [function_1] tensors [arg_2]	count=1
arg	process ||| partition_graphs validate	count=1
module	[module_1] the tensors ||| [module_1] [module_2]	count=3
module	regression ||| contrib learn python learn estimators	count=2
function	maps input key ||| input	count=1
class	tensor ||| lazy builder	count=2
function	[function_1] barrier ||| [function_1] [function_2]	count=1
module	verifies file_io directory ||| tools gcs_test	count=1
function	determine the ||| classes	count=2
function	[function_1] def from ||| [function_1] [function_2] map node_map	count=1
function	into raw params ||| features to raw params	count=1
function	from the ||| guide	count=1
function_arg	max across [arg_2] ||| [arg_2] [function_1]	count=1
arg	cells ||| cells c_prev	count=1
function_arg	[function_1] incompatible changes ||| [function_1] [arg_2]	count=4
function	[function_1] lr ||| [function_1] [function_2]	count=2
module	outcome (vs 0) ||| python ops distributions	count=1
module	for each component of ||| ops	count=5
function	[function_1] a slot ||| [function_2] [function_1]	count=1
class	event file ||| event transformer	count=2
function	average pooling [function_2] ||| [function_2] [function_1]	count=1
function	the lstm ||| lstm block	count=1
module	of integer[s] or ||| python ops	count=1
function	sequence ||| sequence input	count=1
function_arg	minimum of [arg_2] ||| [function_1] [arg_2]	count=2
function	adds a ||| add	count=11
arg	parameters loc [arg_2] ||| [arg_1] [arg_2]	count=1
function	the main ||| main	count=2
module	each ||| contrib keras python	count=1
class	decoder ||| decoder	count=1
function	gradient for the sum ||| sparse reduce sum grad	count=1
module	of zero or more ||| python ops	count=1
module	number of ||| python ops	count=11
function_arg	matrix multiply two ||| matmul a b	count=1
module	a rank-2 tensor ||| contrib solvers	count=1
class	we ||| test upgrade	count=1
function	of fetches ||| fetch and name	count=1
function	[function_1] params ||| [function_2] [function_1]	count=6
function	gets the list ||| get	count=2
function	tensor not ||| tensor	count=1
arg	initialize an operatorpdsqrtdiag ||| diag verify_pd name	count=1
function	return a postfix representation ||| spec structure	count=1
arg	custom_getter ||| custom_getter	count=1
function	fractional labels ||| fractional labels	count=2
function	not existed in the ||| unique target	count=1
function_arg	[function_1] op if ||| [arg_2] [function_1]	count=2
function	elbo ||| elbo	count=1
class	feeding for a ||| feeder	count=1
function	function used to normalize ||| normalizer fn	count=1
function	the number of rows ||| size	count=1
module	of [module_2] ||| [module_2] [module_1] reshape	count=2
arg	create batches ||| batch_size capacity	count=3
function	predictions [function_2] ||| [function_2] value [function_1]	count=1
function	calls restoring things to ||| smart unset all	count=1
function_arg	[function_1] an object ||| [arg_2] [function_1]	count=1
arg	op2 hints argument is ||| op2 hints	count=1
arg	vector keep_input ||| tensor_list keep_input	count=1
function_arg	shape is expected_shape ||| is shape expected_shape	count=1
class	cudnn ||| cudnn	count=2
class	a ||| robin	count=1
function	to make ||| test	count=1
arg	given in input_fn ||| input_fn	count=1
function	read the records from ||| tf	count=1
arg	for transposed 3d convolution ||| inputs filters kernel_size strides	count=1
function	a uniform base ||| uniform	count=1
module	the cli see ||| cli	count=2
function	a tensor )) ||| logsumexp	count=1
function	trace information for ||| trace info	count=1
function	nextiteration and back ||| next and back	count=2
module	experiment ||| learn python learn	count=1
function	or [function_2] ||| [function_2] [function_1]	count=16
module	saver ||| python training	count=1
arg	do what is needed ||| update_ops name_scope	count=1
function	[function_1] a slot ||| python training optimizer [function_1] [function_2]	count=1
class	operator to ||| operator	count=2
function	go [function] one ||| go [function]	count=1
module	a ||| keras python keras preprocessing	count=2
function	[function_1] possibly ||| [function_1] [function_2]	count=6
function	sine [function_2] ||| [function_1] [function_2]	count=2
function	generates 2-dimensional data ||| make data from centers	count=1
function	static shapes ||| vector to matrix static	count=1
function	the product ||| prod	count=1
function	[function_1] bprop step ||| [function_1] [function_2]	count=1
function	with real valued features ||| real valued linear features	count=1
function	if rgba color ||| draw bounding box rgbacolor	count=1
function	temporary directory ||| temp dir	count=1
class	metrics ||| binary logistic head	count=1
class	the stack is ||| stack	count=1
function	the kernel [function_2] ||| [function_2] [function_1]	count=3
arg	1 tensors x and ||| x	count=1
function	temporary directory for ||| get temp dir	count=2
arg	from oldpath ||| oldpath	count=1
function	new [function_2] ||| [function_1] [function_2]	count=1
class	left batch ||| pdbase	count=1
module_class	adds an unref to [module_1] [class_2] ||| [module_1] [class_2]	count=3
arg	wait ||| timeout	count=1
function	all methods inside the ||| all datasets	count=1
module	this ||| linalg python ops	count=2
function	dataframe from a ||| from	count=1
module_class	[module_1] feeder ||| [module_1] [class_2]	count=1
function	[function_1] [0 n_classes) ||| [function_1] [function_2]	count=4
module	(vs 0) ||| ops	count=1
module	graph building ||| contrib tensor_forest hybrid python models	count=1
module_class	[module_1] tensorarray ||| [module_1] ops [class_2]	count=2
function	are raised when all ||| all	count=3
module	of two tensors ||| labeled_tensor python ops	count=1
arg	parameters for ||| num_units input_size use_peepholes cell_clip	count=1
class	from the directory and ||| dir	count=1
function	pool [function_2] ||| [function_1] [function_2]	count=10
class	[class_1] graph ||| [class_2] [class_1]	count=1
arg	same in-plane convolution to ||| stride padding	count=1
function	can save and reload ||| train save load	count=1
function	a dict of predictions ||| predictions	count=2
function	arg batch_shape, possibly ||| batch shape possibly	count=2
function	placeholder for the ||| placeholder from dtype and	count=1
function	returns configuration of the ||| config	count=1
function	duplicate ||| duplicate	count=1
arg	debugdumpdir object ||| debug_dump tensor_filters	count=1
function	all are sessionrunhook ||| check hooks type	count=1
class	normal distribution on ||| normal	count=3
function	get arguments common ||| get common args	count=1
function	register [function_2] ||| [function_1] [function_2]	count=1
arg	a filewriter and an ||| logdir graph max_queue flush_secs	count=1
function	[function_1] [function_2] ||| [function_2] conversion [function_1]	count=4
class	and update it with ||| assign op test	count=1
function	contrast ||| contrast	count=2
module	sessionrunhook raises typeerror ||| python estimator	count=1
module	datasets ||| datasets	count=1
class	input_fn that ||| kmeans test base	count=1
function_arg	csv [arg_2] ||| [arg_2] [function_1]	count=5
module	tensor s of ||| python keras engine	count=6
arg	conjugate prior ||| prior scale s	count=1
module	don't ||| compatibility	count=1
function	proto_type ||| collection	count=1
function	builds inputs for sequence ||| sequence	count=1
class	normal distribution on ||| normal diag	count=1
function	incorrect [function] ||| test inconsistent weight [function] raises	count=4
arg	over ||| y sample_weight	count=1
function	to sparse ||| sparse recall	count=1
arg	labeled tensor ||| labeled_tensor axis_order name	count=1
function	a matmul node ||| mat mul node	count=2
module	numpy ||| contrib keras python keras	count=1
function	maximum or minimum ||| maximum minimum	count=3
function	validates a [function_2] ||| [function_2] [function_1]	count=3
function	an exception if self ||| assert has	count=1
function	operation within the ||| within	count=1
function	embedding lr multipliers ||| embedding lr multipliers	count=1
module	that graph building ||| contrib tensor_forest hybrid	count=1
module	to a multiple ||| training	count=1
function_arg	[function_1] appearing ||| [function_1] [arg_2]	count=1
function	state tensor ||| state	count=1
function	conj y ^3 ||| rsqrt	count=1
function	16-layers version ||| 16	count=1
function_arg	[function_1] [arg_2] ||| [function_1] replace [arg_2]	count=1
arg	the actual [arg_2] ||| [arg_1] [arg_2]	count=1
function	the name of a ||| name	count=2
module	returns predictions ||| layers python layers	count=1
function	constructs a sprite ||| make sprite	count=1
function	line in ||| add line	count=1
arg	the path name to ||| path	count=1
module	as input ||| learn estimators	count=10
arg	for an estimator ||| num_units	count=1
arg	on mapping ||| mapping	count=2
module_class	[module_1] was opened ||| [module_1] file [class_2]	count=1
module	variance of ||| ops	count=1
class	keys and values tensors ||| mutable dense hash	count=1
module_class	params [module_1] [class_2] ||| [module_1] [class_2] params	count=3
class	to summary writer ||| fake summary writer	count=1
function	for inference ||| inference	count=1
function	of scalars in a ||| count params	count=1
function	file to [function_2] ||| [function_2] [function_1]	count=1
module	for the next runge-kutta ||| integrate python	count=1
module_class	step of [class_2] ||| [class_2] [module_1]	count=1
class	table outputs the ||| table	count=3
module	tensorshape representing the ||| python framework	count=2
function	[function_1] index from ||| [function_1] doc [function_2]	count=1
arg	tensor to a ||| tensor	count=2
arg	precision@k ||| labels predictions_idx	count=2
function_arg	[function_1] [arg_2] ||| [function_1] watch [arg_2]	count=6
function	of the tensor list ||| tensor list	count=1
function	of a dynamic rnn ||| rnn	count=1
function	test function ||| test function with	count=1
function	[function_1] validity ||| [function_1] [function_2]	count=4
arg	subgraph view ||| sgv	count=2
function	input and ||| from input and	count=2
module	we can do ||| python layers	count=1
function	state from a dict ||| dict	count=1
function_arg	variable with [arg_2] ||| [function_1] [arg_2]	count=6
function	partitioned ||| collect partitioned	count=1
function	the partitioned variable ||| collect partitioned variable	count=2
function	from metric ||| extract metric	count=2
function_arg	fakequantwithminmaxvars [arg_2] ||| [arg_2] [function_1]	count=1
arg	compares metagraphdefs [arg] ||| tester [arg]	count=2
class	validate ||| dump dir	count=1
function	contains session bundle ||| session bundle	count=1
function	sparse and [function_2] ||| [function_2] [function_1]	count=1
function	sparse_column_with_integerized_feature ||| sparse column integerized	count=1
function	[function_1] with estimators ||| [function_2] [function_1]	count=6
class	the glimpse extraction ||| extract glimpse	count=1
module	rnn cell composed ||| contrib rnn	count=1
arg	the rank ||| rank	count=1
function	test ||| test ksize2x2stride1x1rate1x1same	count=1
function	tensor or indexedslices objects ||| tensor or indexed slices	count=1
arg	of side_effects for a ||| side_effects	count=1
function	rnn sequence to ||| rnn seq2seq	count=1
class	the file leaves the ||| file	count=1
arg	permute a ||| labeled_tensor axis_order name	count=1
function	integer weights ||| integer weighted sparse	count=1
class	quantized distribution representing ||| quantized	count=1
function	get a ||| caption to	count=1
function	rnn and apply a ||| rnn	count=1
module	the ||| tools	count=1
class	the wrapper should ||| debug wrapper session	count=1
class	(vs 0) ||| bernoulli	count=1
module	the tensors ||| graph_editor	count=2
class	the queue when the ||| queue runner	count=1
function	log p ||| with log joint	count=1
function_arg	to values in ||| values var_names_to_values checkpoint_dir	count=1
function_arg	[function_1] getter for ||| [arg_2] [function_1]	count=1
class	tensor ||| stochastic tensor	count=1
function	[function_1] slice ||| [function_2] [function_1]	count=3
arg	ignore_value ||| ignore_value	count=1
function	is a non-negative ||| assert non negative	count=1
function	[function_1] with partitioned ||| [function_1] [function_2]	count=4
function	the first [function_2] ||| [function_2] [function_1]	count=6
class	descent optimizer ||| descent optimizer	count=2
function	then tile along ||| expand and tile	count=1
function	reads ||| read	count=6
function	bounding [function_2] ||| [function_2] [function_1]	count=1
function	per step false positives ||| false positive at k	count=1
function	[function_1] loop to ||| [function_2] [function_1]	count=9
module	getfile ||| python util	count=1
function	a report of ||| report last	count=1
function	accumulator [function_2] ||| [function_2] [function_1]	count=4
module	[module] anchor points ||| [module]	count=3
function	to restore a checkpoint ||| restore checkpoint	count=1
function	evaluates the model ||| evaluate	count=2
class	from the directory and ||| dump dir	count=1
function	regression [function_2] ||| [function_1] [function_2]	count=2
module	loads ||| python keras preprocessing	count=1
function	to their ||| bucket by	count=1
function	[function_1] benchmark ||| [function_1] [function_2]	count=1
function	called per step ||| step	count=1
arg	calling [arg] apply ||| [arg]	count=1
function	no emitted edges ||| sees updated values	count=1
function	to their defs ||| nodes map	count=1
function	or creates [function_2] ||| [function_1] [function_2]	count=3
arg	name created for ||| name	count=1
function	[function_1] mean squared ||| [function_2] [function_1]	count=5
arg	for smaller versions ||| shrink	count=1
function	default [function_2] ||| [function_1] [function_2]	count=13
function	returns a ||| get feed dict	count=1
function	[function_1] have invalid ||| [function_2] [function_1]	count=9
arg	prints ||| print_info	count=1
arg	rank equal to rank ||| rank	count=2
module	for ||| export	count=1
function	with atrous ||| test atrous	count=1
function	field ||| get field	count=1
function	process a list ||| process	count=1
function_arg	copy a [arg_2] ||| [function_1] with input replacements [arg_2]	count=1
function_arg	[function_1] using summarize_activation ||| [function_1] [arg_2]	count=1
module	to ||| training	count=2
function	[function_1] dependency on ||| [function_1] [function_2]	count=4
function	the partition ||| dump	count=1
function	data types ||| types	count=1
function	a richtextlines object ||| text lines from rich line	count=1
function	keyword designating a doc ||| doc	count=1
arg	to save_path/filename ||| filename collection_list as_text export_scope	count=1
module	menuitem from the ||| cli	count=1
arg	matmul x ||| x	count=2
arg	list of texts ||| texts mode	count=1
function	output values of the ||| setup values	count=1
function	a tf sparsetensor ||| sparse tensor	count=1
arg	of texts ||| texts mode	count=1
function	all are sessionrunhook raises ||| check hooks	count=1
module	safe ||| python losses	count=1
function	create and [function_2] ||| [function_1] [function_2]	count=9
function	determine the predicted class ||| classes	count=2
function	get a menuitem ||| caption	count=1
arg	[arg_1] scale ||| [arg_1] [arg_2]	count=3
module	be ||| python	count=1
function	evaluation metrics [function_2] ||| [function_2] [function_1]	count=1
function	2 ||| class	count=3
function	and flops for ops ||| get logged ops	count=1
function	insertion ||| insertion	count=1
class	test ||| cell test	count=1
function	before starting col updates ||| col update prep	count=1
function	mtimes ||| mtimes	count=1
class	file ||| writer	count=3
arg	y of x ||| x	count=1
function_arg	[function_1] [arg_2] ||| [function_1] scope op [arg_2]	count=3
function	metadata information ||| metadata	count=1
function	constant_value ||| constant	count=1
function	root name ||| root name	count=2
arg	an estimator ||| num_units	count=1
arg	precision@k of predictions ||| predictions_idx weights	count=1
function	step at ||| step	count=1
class	sum of ||| dimension	count=1
function	runners ||| runners	count=2
function	exact [function_2] ||| [function_2] [function_1]	count=2
module	carlo estimate of ||| ops	count=2
function	expected results for gamma ||| gamma greater one	count=1
module	[module_1] of operators ||| [module_2] [module_1]	count=1
module	name -> _guideref from ||| docs	count=1
module_class	[module_1] session ||| [module_1] worker [class_2]	count=1
function	the root ||| root	count=3
function	definition ||| definition	count=1
arg	in and out grads ||| out_grads in_grads	count=1
function	sharded ||| export sharded	count=2
function	statistics ||| stats for node	count=1
function	save path used by ||| save path	count=1
class	fetch mapper that ||| mapper	count=1
function	[function_1] types ||| [function_2] [function_1]	count=1
function	input ||| project input	count=1
function_arg	decodes the [arg_2] ||| [arg_2] [function_1]	count=1
arg	config file used by ||| config	count=1
arg	of many exports ||| export_dir_base	count=1
function	the minimum of ||| reduce min	count=1
function	the connected [function_2] ||| [function_1] [function_2]	count=6
function	write a ||| write histogram	count=1
function	[function] misordered ||| per tag after [function] for file version	count=1
function	[function_1] to debug ||| [function_2] [function_1]	count=3
function	generate a signaturedef proto ||| signature def	count=1
function	to record variable initializations ||| record variable inits	count=1
function	images by a random ||| random	count=1
function	performs dropout given the ||| dropout	count=1
module	of inverse and forward ||| distributions python ops	count=1
arg	[arg_1] of top-k ||| [arg_2] [arg_1]	count=4
arg	single tensor ||| tensor	count=2
function	[function_1] in parallel ||| [function_2] [function_1]	count=2
module	the vocabulary dictionary ||| learn python learn	count=1
function_arg	[function_1] a _docstringinfo ||| [arg_2] [function_1]	count=2
module	a numpy array ||| keras python keras	count=1
function	most recent savedmodel export ||| most recent export	count=1
module	then the [module_2] ||| [module_2] [module_1]	count=1
function_arg	index [arg_2] ||| [function_1] [arg_2]	count=2
module	sense of tensors of ||| linalg	count=2
function	a variable and returns ||| variable	count=1
function	boots 3 servers ||| test cluster spec propagation three servers	count=1
class	learn the vocabulary ||| processor	count=1
module	the image ||| image python ops	count=1
function	exception ||| assert	count=2
function	to help output ||| help	count=1
function	every temporal slice y ||| time distributed dense	count=1
function_arg	file [arg_2] ||| [arg_2] [function_1]	count=2
function	with integer weights ||| with integer weighted sparse	count=1
function	all uninitialized resources in ||| uninitialized resources	count=1
module	[module_1] the tensors ||| [module_2] [module_1]	count=3
arg	[arg_1] while maintaining ||| [arg_2] [arg_1]	count=1
function_arg	[function_1] other ||| [function_1] [arg_2]	count=1
function	of features ||| features arbitrary weights	count=2
arg	[arg_1] satisfies ||| x [arg_1] [arg_2]	count=1
function	[function_1] [function_2] misordered ||| [function_1] [function_2] for file version less	count=1
class	sure that the ui ||| curses	count=1
module	transform that wraps ||| learn dataframe transforms	count=1
function_arg	determines [function_1] [arg_2] given input length ||| [function_1] [arg_2]	count=1
module_class	[module_1] [class_2] ||| [module_1] kernel_tests relaxed [class_2]	count=1
function	returns true if this ||| is gputrace	count=1
class	the ||| file	count=1
arg	given run ||| run	count=1
function_arg	add the [arg_2] ||| [arg_2] [function_1]	count=3
arg	cell ||| cell output_size activation reuse	count=1
function	tests that labels outside ||| test	count=1
module	the event file to ||| python	count=1
function	save and reload a ||| save	count=1
function	make sure we don't ||| test	count=1
function	node with the ||| node	count=6
arg	[arg_1] sparsetensorsmap ||| [arg_2] [arg_1]	count=2
arg	given node according to ||| node_name	count=1
function	average pool along ||| avg pool along	count=6
module	create ||| python framework	count=1
class	dnn weights and ||| dnnlinear combined classifier	count=1
module	it to placeholders ||| learn python learn learn_io	count=1
class	this operator ||| operator	count=9
module	loss to ||| contrib losses python losses	count=2
function	get the [function_2] ||| [function_2] [function_1]	count=21
module	is not a function ||| distributions	count=1
arg	an exception if other ||| other	count=1
class	make sure we ||| files	count=1
class	while loop ||| while	count=2
function	depending ||| where	count=1
arg	constructor for predictoutput ||| outputs	count=1
function	[function_1] op used ||| [function_2] [function_1]	count=6
function	an op or ||| op benchmark	count=1
function	[function_1] least ||| [function_1] [function_2]	count=4
arg	entire ||| level noise_shape	count=1
function	helper function to train ||| train	count=1
function	foldr on the list ||| foldr	count=1
function	sparse [function_2] ||| [function_2] [function_1]	count=19
function	restore a ||| restore	count=1
arg	between logits and labels ||| _sentinel labels logits name	count=1
arg	the vector inner ||| xs ys name	count=1
module	transforms each ||| preprocessing	count=1
module	return indexies of ||| contrib learn python	count=1
function	[function_1] rank ||| [function_2] [function_1]	count=1
module	unique to this ||| framework	count=1
function	extract command from the ||| command from	count=1
module_class	[module_1] server ||| [module_1] [class_2]	count=4
function	python traceback ||| traceback	count=1
function	[function_1] leaf impurity ||| [function_2] [function_1]	count=1
function	[function_1] constant_value ||| [function_2] [function_1]	count=2
arg	inputs and outputs ||| inputs outputs	count=3
function	to ||| test	count=1
function	[function_1] cycling works ||| [function_1] [function_2]	count=1
module	number of dimensions ||| distributions python ops	count=3
module	the location ||| contrib distributions python	count=1
function	a map from duplicate ||| duplicate of	count=1
module	tensorflow ||| client	count=1
function_arg	[function_1] the output ||| conv2dtest [function_1] values [arg_2] filter_in_sizes stride padding	count=1
function	should be allowed using ||| should work	count=1
module	iterable of string ||| plugins text	count=1
function	returns the first dimension ||| first dimension	count=1
function	message discards expired ||| message discards expired	count=3
function	the help ||| get help	count=1
function	the savedmodel ||| saved model	count=1
function	> 0 elementwise ||| positive	count=1
class	op ||| operation	count=3
module	execute ||| learn python learn	count=1
arg	and body to the ||| body loop_vars shape_invariants	count=1
arg	steps and returns only ||| noutput scope name	count=1
function	kl divergence kl(d1 ||| kl	count=1
module	[module_1] the output ||| [module_2] [module_1]	count=1
module	multi ||| python layers	count=1
class	represented dense tensor ||| sparse tensor	count=2
function	[function_1] the diagonal ||| [function_1] [function_2]	count=1
module	of a ||| ops	count=45
function	end of a ||| batch end	count=1
function_arg	a device [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] shape ||| [function_1] [function_2]	count=19
function	order ||| order	count=2
function	[function_1] output tensors ||| [function_1] [function_2]	count=2
function	legend for node-status ||| legend	count=1
function	state ||| calls state	count=1
function	menuitem from the ||| to item	count=1
arg	same in-plane convolution ||| stride padding	count=1
function	the broadcasted ||| broadcast	count=2
function	dict of predictions ||| to predictions	count=2
function_arg	[function_1] their names ||| [function_1] name lists [arg_2]	count=2
function	get a root ||| get root	count=2
module	and return indexies ||| learn python	count=1
function	prints input ||| show inputs	count=1
class	make a longer rich ||| rich	count=1
function	a page ||| page	count=1
function	tensors in the sharded ||| sharded	count=1
module	cell output dimension ||| rnn python	count=1
arg	times that predictions ||| predictions	count=1
class	state for the ||| flow state	count=1
function	legend for ||| legend	count=1
function	normal distribution of values ||| normal	count=1
function	cached tensor ||| transitively outgoing cache	count=1
function	return dict symbol ||| build guide index	count=1
function	proper shape values then ||| sample	count=1
module_class	[module_1] [class_2] format ||| [module_1] [class_2] params	count=4
function_arg	[function_1] output from ||| [function_1] [arg_2]	count=3
function	max over ||| max	count=1
function	resourcehandle representation of this ||| get resource	count=1
arg	steps and ||| noutput scope	count=1
module_class	[module_1] declared dropouts ||| [module_1] [class_2]	count=7
function	to enqueue based on ||| to enqueue	count=1
function	analyze ||| analyze	count=1
function	an attribute to generate ||| get attribute	count=1
function	of file names from ||| get file names	count=1
function	a fully ||| legacy fully	count=1
function_arg	[function_1] of sgv0 ||| [function_1] [arg_2]	count=3
module	the model ||| python	count=1
arg	the given name ||| name scope	count=2
function	constructs ||| init	count=11
module	to __init__ which ||| distributions	count=1
function	flops for ||| get logged	count=1
function	line in a ||| add line	count=1
class	placeholders for the statistics ||| op stats	count=1
function_arg	determines [function_1] [arg_2] given input length ||| python keras utils conv [function_1] length [arg_2]	count=1
function	the insertion ||| insertion	count=1
class	gradients that ||| conditional	count=1
function	as linear_model_fn but ||| with model fn ops	count=2
function	make [function_2] ||| [function_1] [function_2]	count=2
arg	handle syncreplicashook ops ||| is_chief num_tokens	count=1
arg	recall@k and ||| class_id weights	count=1
class	session [class_2] ||| [class_1] [class_2]	count=2
function_arg	[function_1] subgraph sgv ||| [function_1] [arg_2]	count=2
module	and previous ||| contrib grid_rnn	count=1
function	dependencies ||| dependencies	count=1
function	the connected [function_2] ||| [function_2] [function_1]	count=6
function_arg	[function_1] necessary to ||| [function_1] tensor [arg_2]	count=5
function	calculates true positives ||| true positive at k	count=1
module_class	new server with ||| python training server	count=1
function_arg	from csv [arg_2] ||| [function_1] [arg_2]	count=2
arg	cell with [arg_2] ||| [arg_2] [arg_1]	count=5
function	the collections ||| collections	count=1
function	linear_model_fn but returns modelfnops ||| with model fn ops	count=2
function	dict symbol ||| guide	count=1
module	learn ||| contrib learn python	count=1
class	contains ||| indexed slices	count=1
function	a deconv ||| get deconv	count=1
function	current meta [function_2] ||| [function_2] [function_1]	count=2
module_class	[module_1] class id ||| [module_1] [class_2]	count=2
function	[function_1] google2 format ||| [function_2] [function_1]	count=1
arg	sequence to sequence model ||| encoder_cell decoder_cell	count=1
function	the weights of ||| weights	count=1
function	unary operation ||| unary op	count=2
function	same as linear_model_fn but ||| with model fn ops	count=2
function	new ||| gen new	count=1
module	the given ||| learn python learn	count=2
module_class	[module_1] output projection ||| [class_2] [module_1]	count=1
function	"a" by dense matrix ||| tensor dense matmul	count=1
class	[class_1] the stepper ||| [class_2] [class_1]	count=2
function	dequeues and concatenates ||| dequeue many	count=1
function	transforms each text ||| texts to sequences	count=1
function	trainer [function_2] ||| [function_1] [function_2]	count=2
module	returns ||| learn python learn	count=9
arg	logits per ||| logits	count=1
function	checkpoint ||| checkpoint	count=7
class	saver state ||| saver	count=1
function	[function_1] fetches ||| [function_2] [function_1]	count=3
class	[class_1] gradient descent ||| [class_2] [class_1]	count=1
module	max of ||| ops	count=1
class	exp ||| exp	count=1
module	values of a ||| python ops	count=2
module	sequence-to-sequence model ||| legacy_seq2seq	count=3
function	for proper shape ||| assert valid sample	count=1
function_arg	[function_1] op1 and ||| [function_1] [arg_2]	count=1
class	1 outcome (vs ||| bernoulli	count=1
function_arg	data distribution [arg_2] ||| [arg_2] [function_1]	count=2
function	the flags ||| tb app	count=1
arg	a single ||| y sample_weight	count=1
function	run [function_2] ||| [function_1] [function_2]	count=9
function	a mix of features ||| optimizer mixed features arbitrary	count=1
function	notice [function_2] ||| [function_1] [function_2]	count=3
function	multi value ||| value	count=1
module	of one or ||| python ops	count=1
class	multivariate normal ||| multivariate normal	count=3
function	the norm ||| norm	count=1
function	shape a equal to ||| shape	count=1
function_arg	to minimize [arg_2] ||| [function_1] [arg_2]	count=2
module	an imagenet model's ||| keras applications	count=1
arg	based on featurecolumns ||| columns_to_tensors feature_columns num_outputs weight_collections	count=1
arg	to split dims ||| dims	count=1
function	series for ||| series	count=1
function	mix [function_2] ||| [function_1] [function_2]	count=4
function	parse list of file ||| get file	count=1
module	for ||| python estimator	count=1
module_class	model's [class_2] ||| [class_2] [module_1]	count=1
module	decode_gif, decode_jpeg, and ||| python ops	count=1
function	logistic [function_2] ||| [function_2] [function_1]	count=1
arg	diagonal ||| identity_multiplier diag event_ndims	count=1
module	a given number ||| python learn	count=1
function	save variables ||| save ops	count=1
function	trace information ||| trace	count=1
function	for ||| collection	count=1
function	insertion indices ||| insertion index	count=1
arg	root ||| root	count=1
arg	maps activations ||| activations labels	count=3
function	a rank rfft ||| length for rfft	count=1
function_arg	sigmoid of [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	lookup embedding [arg_2] ||| [arg_2] [function_1]	count=3
module	from a rank-2 ||| solvers	count=1
function	that avoids ||| unique	count=1
arg	a serialized minibatch ||| serialized_sparse dtype rank name	count=1
module	proper shape ||| python ops	count=1
function	sequence ||| embed sequence	count=1
arg	recall@k of ||| class_id	count=1
module	datasets ||| contrib learn python learn datasets	count=1
function	that labels outside ||| labels	count=3
class	will be produced or ||| indexed slices	count=1
function	-grad * 2/sqrt ||| erfc	count=1
function	and run ||| and run	count=2
arg	cluster center ||| clusters	count=1
arg	x and [arg_2] ||| [arg_1] [arg_2]	count=1
function	inside the ||| inside	count=1
module	of tensors that ||| ops	count=3
function	nested in the same ||| same	count=1
arg	between predictions, labels ||| predictions labels	count=1
function	[function_1] new tensor ||| [function_2] [function_1]	count=1
function	a signaturedef proto ||| as signature def	count=1
function	train phase ||| train phase	count=2
function	address [function_2] ||| [function_2] [function_1]	count=2
module	factorization ||| contrib factorization	count=1
function	the proto_type for ||| get collection proto type	count=1
arg	convolution layer [arg_2] ||| [arg_2] [arg_1]	count=1
function	sparsetensor from ||| to sparse	count=1
function	operation that ||| op	count=2
arg	[arg_1] v ||| [arg_1] [arg_2]	count=1
class	table outputs ||| table	count=3
module	the cell and add ||| rnn python ops	count=2
function	gradient for the ||| bias add grad grad	count=1
class	split ||| tensor flow data frame	count=1
class	returns a ||| dtype	count=1
module	dataset ||| learn datasets	count=4
class	add ||| scaled identity	count=1
function	get a list ||| get	count=2
class	a quantized distribution ||| quantized distribution	count=1
function	the init op ||| init op	count=2
arg	and loop function loop_fn ||| loop_fn parallel_iterations swap_memory	count=1
module	dataframe into two dataframes ||| learn python learn dataframe	count=1
function	is a loop ||| loop	count=1
function	results for gamma ||| gamma greater one	count=1
function	valued features [function_2] ||| [function_1] with [function_2]	count=2
module	dictionary and return indexies ||| learn python learn	count=1
function	tensorflow data ||| data	count=1
arg	sgv0 to [arg_2] ||| [arg_1] [arg_2]	count=5
class	event discards ||| mocking event accumulator	count=1
module	for proper shape ||| python ops	count=1
module	tensor ||| distributions	count=1
arg	parse example protos ||| file_pattern batch_size features	count=1
function	wraps a python ||| py	count=1
function	invalid indices ||| by invalid indices	count=2
arg	seeks to ||| whence position	count=1
module	the ||| distributions python	count=4
arg	extracts a ||| input_ begin	count=1
class	creates fetch mapper ||| fetch mapper	count=1
function	example ||| to example	count=1
class	[class_1] was opened ||| [class_2] [class_1]	count=3
function	[function_1] @{$ ||| [function_2] [function_1]	count=4
class	or tensor in the ||| tensor flow	count=1
function	[function_1] old values ||| [function_2] [function_1]	count=2
function	and flops for ops ||| logged	count=1
function	[function_1] pool ops ||| [function_1] [function_2]	count=4
module	the given ||| python	count=8
function	hparamdef ||| to proto	count=1
function	using [function_1] [function_2] together ||| [function_1] [function_2]	count=1
function	dictionary of tags ||| tags	count=1
class	by concrete subclasses ||| non interactive debug wrapper session	count=1
module	get a str ||| lib	count=1
function	a static valueerror with ||| assert static	count=1
function	tensor version ||| maybe assert valid	count=1
module	can be used ||| python layers	count=1
arg	file ||| filename tensor_names	count=1
function_arg	[function_1] [arg_2] ||| [function_1] bn [arg_2]	count=3
module	used ||| contrib layers python layers	count=2
function	a scalar value ||| scalar	count=1
function	return tensor ||| maybe assert valid	count=1
module	variable to the ||| python	count=1
function	update operations from metric ||| extract metric update ops	count=2
class	index ||| generate guide index	count=1
function	add ||| add op	count=1
module	that graph building doesn't ||| tensor_forest hybrid	count=1
arg	[arg_1] arguments into ||| [arg_2] [arg_1]	count=2
function	nonexistent tensor filter ||| list tensor nonexistent filter	count=1
module	returns the sum of ||| python	count=1
class	we don't have ||| test upgrade	count=1
function_arg	enqueue based [arg_2] ||| [arg_2] [function_1]	count=1
class	tests ||| pdsqrt vdvtupdate test	count=1
arg	a lower triangular matrix ||| diag tril event_ndims	count=1
class	the vocabulary ||| vocabulary	count=1
class	the ||| categorical processor	count=2
function	vector with [function_2] ||| [function_2] [function_1]	count=4
module	sequence ||| python keras preprocessing	count=2
module	the current tf graph ||| python	count=1
function	this device is ||| device	count=1
function	recent commands ||| recent	count=1
module	outcome (vs 0) ||| ops	count=1
module	a rank-2 tensor ||| solvers	count=1
function_arg	observations dict [arg_2] ||| [arg_2] [function_1]	count=2
arg	for cell ||| cell	count=1
function	mode ||| mode valid	count=1
function	can be used to ||| to	count=1
function	fit coefficients for ||| interp fit	count=1
function	initialized [function] ||| create [function]	count=2
function	raises typeerror otherwise ||| check	count=1
function	the product of ||| mul	count=1
function	real ||| optimizer real	count=1
module	ui ||| debug cli	count=1
function	[function_1] vectors by ||| [function_1] [function_2]	count=1
function	runs in the ||| run	count=1
function	[function_1] subgraph from ||| [function_2] [function_1]	count=1
module	load() ||| tensorboard backend	count=1
function	precision values ||| precision at	count=1
class	converts this queuerunner ||| queue runner	count=1
function	of tensor ||| n to tensor	count=3
arg	a microbenchmark to measure ||| iters	count=1
arg	x and ||| x	count=1
function	[function_1] file for ||| [function_2] [function_1]	count=1
function	the [0 n_classes) ||| at k5 some out of	count=2
function_arg	[function_1] as labels ||| [arg_2] [function_1]	count=3
function	the partition ||| partition	count=1
function	[function_1] index of ||| [function_1] [function_2]	count=4
arg	computes the element-wise weighted ||| updates_collections	count=1
function	an accumulated ||| accumulated	count=1
function	and real valued ||| real valued	count=3
function	message [function_2] ||| [function_1] [function_2]	count=3
class	control ||| control	count=5
function	values of dense ||| values	count=2
class	run ||| base ui	count=1
module	of the ||| distributions python ops	count=3
function	[function_1] pooling ||| [function_2] [function_1]	count=2
module	specified by the given ||| slim python slim	count=1
module	to __init__ which gets ||| distributions python	count=1
function	[function_1] custom ||| [function_2] [function_1]	count=1
function	sort a ||| sort dump data by	count=1
function_arg	sparsetensor [arg_2] ||| [arg_2] [function_1]	count=1
function	object for [function_2] ||| tools docs parser config [function_2] name [function_1] full_name	count=1
function	into ||| features to	count=1
class	a labeledtenor ||| labeled tensor	count=1
function	labels ||| at k	count=2
function	of file names ||| file names	count=1
function	gradient ||| entropy with logits grad	count=1
function	manual variable [function_2] ||| [function_2] [function_1]	count=2
function	predictions ||| predictions	count=5
function	prune control [function_2] ||| [function_1] [function_2]	count=5
function	a call ||| call	count=1
module	kernel for ||| ops	count=1
function	the tensors linked to ||| filter ts	count=1
module	dimensions of tensor ||| linalg python ops	count=1
function_arg	[function_1] [arg_2] ||| [function_1] audio series writer [arg_2]	count=1
arg	by normalizing with ||| predictions labels normalizer	count=1
arg	the spec ||| spec inputs input_shape	count=1
function	metric value operations ||| metric	count=2
class	tensor ||| tensor flow	count=1
function	shape values then ||| assert valid sample	count=1
function	dequeues and concatenates ||| dequeue up to	count=1
function	of tags that a ||| unique tags	count=1
function	with respect to sparse ||| sparse recall at	count=1
function	non-batch kl ||| kl	count=1
class	values will ||| indexed	count=1
function	denormals correctly ||| denormals	count=1
function	norm ||| norm	count=1
arg	the rank of their ||| rank	count=1
module	layer ||| contrib keras python keras engine	count=7
function	the ||| get	count=3
function	to embedding lookup ||| deep embedding lookup	count=1
function	add ||| add back	count=1
function	labels outside [function_2] ||| [function_1] [function_2]	count=8
class	this transform to ||| tensor flow transform	count=1
arg	indices based on mapping ||| mapping	count=1
function	vs ||| vs gru	count=2
function_arg	check if [arg_2] ||| [arg_2] [function_1]	count=4
module	(e g ||| python framework	count=1
function_arg	[function_1] gen_parsing_ops ||| [function_1] [arg_2]	count=6
module	of columns in the ||| python	count=1
function	the column is ||| column	count=1
function_arg	column [arg_2] ||| [arg_2] [function_1]	count=1
function	variable and returns ||| variable	count=1
module	a rank-2 ||| solvers python ops	count=1
function	learn the ||| transform	count=1
function	with sdcaoptimizer and ||| sdca optimizer	count=2
module	(vs 0) ||| python ops distributions	count=1
arg	given input [arg_2] ||| [arg_2] [arg_1]	count=1
function	tensor ||| valid	count=1
module	the sum of ||| python framework	count=1
function	a range of replicas ||| replicas	count=1
arg	subgraph ||| y class_weight	count=1
function	the attr ||| attr	count=1
function	last call to reload ||| reload	count=1
module	the sense of ||| contrib linalg python	count=5
function	link ||| python link	count=1
module	loss to the training ||| python ops losses	count=1
function	save ||| save ops	count=3
module	and session and ||| python learn dataframe	count=1
function	typeerror otherwise ||| type	count=1
module	we ||| tools compatibility	count=2
module_class	[module_1] array given ||| [module_1] [class_2]	count=5
module	a given number of ||| contrib learn python learn	count=1
module	of zero ||| linalg python ops	count=1
function	from a graph ||| from files	count=1
arg	for threads ||| threads	count=1
class	creates ||| hash table	count=3
function	linked to ops ||| from	count=1
function	watch_fn ||| watch	count=1
function	clips tensor values ||| clip by value	count=1
module	for given ||| contrib learn python learn	count=1
function	lookup table ||| table	count=1
function	to ||| to	count=48
function	[function_1] function for ||| [function_2] [function_1]	count=8
arg	new_child ||| new_child	count=1
function	[function_1] [function_2] ||| [function_1] sample [function_2]	count=3
function	same as linear_model_fn but ||| fn with model fn ops	count=2
class	[class_1] data ||| [class_2] [class_1]	count=8
module	transforms ||| contrib keras python	count=1
module_class	of a [class_2] ||| [module_1] tensor [class_2] scatter indices value name	count=1
function	deregister a list ||| deregister	count=1
arg	to ||| global_step	count=1
function	the while [function_2] ||| [function_2] [function_1]	count=1
function	weights to ||| weights	count=1
function	dictionary and return indexies ||| transform	count=1
module	gets the list of ||| contrib framework python ops	count=5
arg	a subgraph ||| sgv dst_graph	count=1
function_arg	[function_1] axis ||| [function_1] [arg_2]	count=1
function	the end ||| epoch end	count=1
module	dictionary and ||| python	count=1
function_arg	[function_1] biasaddgrad ||| [arg_2] [function_1]	count=1
function	linear_model_fn but returns modelfnops ||| fn with model fn ops	count=2
function	an ||| allowing	count=1
function	[function_1] a graph ||| [function_2] [function_1]	count=4
function	[function_1] file without ||| [function_1] [function_2]	count=2
function	source files with ||| source files	count=2
arg	[arg_1] control_outputs ||| [arg_1] [arg_2]	count=1
function	as linear_model_fn but ||| fn with model fn ops	count=2
module	ops library [module_2] ||| [module_1] [module_2]	count=1
function	attention and ||| attention	count=1
class	a staging area element ||| staging area	count=3
class	multiple output ||| model export utils	count=1
class	wrapper should work ||| wrapper	count=1
module	vocabulary dictionary and return ||| contrib	count=1
arg	the input ||| inputs rate noise_shape seed	count=1
module	determining the ||| contrib keras python	count=2
function	most ||| most	count=1
class	projection and ||| projection wrapper	count=1
module	raises typeerror otherwise ||| python	count=1
module	which properly compares two ||| contrib distributions python	count=1
module	tensor with ||| keras python keras	count=1
module	based ||| python	count=1
function	construct a ||| init	count=9
function	[function_1] to sparse ||| [function_2] average [function_1]	count=10
module	instantiates a ||| keras	count=1
arg	model to x ||| x	count=2
module	-> ||| tools	count=1
module	component of ||| ops	count=5
function	[function_1] use for ||| [function_1] [function_2]	count=3
function_arg	[function_1] a ||| [function_1] weight [arg_2]	count=1
function	event file ||| event file	count=2
function	[function_1] mappers ||| [function_1] [function_2]	count=4
arg	logits given in input ||| inputs sequence_length merge_repeated	count=1
function	end event to ||| end	count=1
class	shape or ||| shape	count=2
function	sets the ||| set value	count=1
module	creates a cross-entropy loss ||| python losses	count=1
module	returns ||| python keras engine	count=1
class	a table ||| lookup interface	count=1
class	operator ||| linear operator scaled	count=1
arg	body ||| body	count=1
module	same as the last ||| contrib learn python learn estimators	count=3
function	to row factor shards ||| row factors	count=1
module	the vocabulary dictionary and ||| contrib learn python	count=1
module	values then return ||| ops	count=1
arg	precision@k of predictions ||| predictions k	count=3
class	full names to a ||| generator visitor	count=1
function	to ||| filter ts from regex	count=2
class	part ||| sequential	count=1
function	overriding tensor values ||| then remove override then	count=1
class	construct base attentionmechanism class ||| base attention mechanism	count=1
function	fetches and ||| fetch and	count=2
function	operations to read ||| read keyed	count=2
function	write the ||| write	count=1
function	indexies of ||| transform	count=1
function_arg	[function_1] housing ||| [arg_2] [function_1]	count=2
function	computes the recall of ||| recall	count=1
function	[function_1] bundle ||| [function_1] [function_2]	count=2
function	are ||| check hooks type	count=1
module	can be used to ||| contrib layers python layers	count=1
module	sum of ||| python framework	count=1
module	run this ||| contrib rnn python ops	count=1
class	return indexies of ||| categorical	count=1
class	returns ||| sync replicas optimizer	count=1
function	trainable [function_2] ||| [function_2] [function_1]	count=2
arg	[arg_1] or dicts ||| [arg_1] [arg_2]	count=1
function	[function_1] search decoding ||| [function_1] [function_2]	count=1
module	load ||| debug lib	count=2
function	new subdirectory within ||| get timestamped export	count=2
arg	column based on the ||| column args weight_collections	count=1
module	learn the vocabulary ||| learn	count=2
function	a tag sequence ||| crf sequence	count=1
module	systems of equations ||| python ops	count=1
function	[function_1] [function_2] ||| [function_1] [function_2] for file version less	count=3
function	operator ||| create operator	count=2
function	restores [function_2] ||| [function_2] [function_1]	count=2
module	form the ||| contrib factorization python ops	count=1
function	a shallow [function_2] ||| [function_1] [function_2]	count=2
function	[function_1] export ||| [function_1] [function_2]	count=2
module	of ||| distributions	count=2
function	per step true positives ||| sparse true positive	count=1
arg	functional interface for the ||| inputs axis momentum epsilon	count=1
function	it should 404 ||| nonexistent	count=1
function	into a placeholder ||| placeholder	count=1
module	for given ||| python learn	count=1
function	indexies of ||| fit transform	count=1
module	_guideref from ||| tools	count=1
arg	tensor x ||| x name	count=2
function	param to [function_2] ||| [function_2] [function_1]	count=8
function	summary tensor used ||| summary	count=1
function	with real valued features ||| real valued features perfectly	count=1
function	line ||| line	count=3
function	true positives ||| sparse true positive at k	count=2
function	proto ||| check proto	count=2
module	a shape ||| framework	count=1
arg	mat ||| mat	count=2
function_arg	parameters in [arg_2] ||| [arg_2] [function_1]	count=1
function	initializations ||| inits	count=1
arg	infers the fft_length argument ||| fft_rank	count=2
function	read sparsetensors [function_2] ||| [function_2] [function_1]	count=2
function	condition based on ||| scalar condition	count=1
function	add matrix represented by ||| add	count=2
function	returns a batch of ||| get	count=1
function_arg	initializes a globalstepwaiterhook ||| init wait_until_step	count=1
module	get ||| python kernel_tests	count=5
module	all elements of ||| python ops	count=1
class	wrapper ||| debug wrapper	count=2
module	[module_1] [module_2] ||| [module_1] [module_2] distribution	count=4
function	[function] symbol ||| [function] name to	count=2
module	and ||| preprocessing	count=1
class	this operator to ||| linear operator identity	count=1
function_arg	[function_1] highwaywrapper ||| [function_1] cell [arg_2]	count=1
function_arg	[function_1] given job ||| [function_1] address [arg_2]	count=2
arg	the model to x ||| x	count=2
function	re-route ||| reroute sgv	count=2
arg	that maps a ||| default_value name	count=1
function	shape values then ||| assert	count=1
function	shape ||| in out shape	count=1
function	num_rows, possibly add ||| num rows possibly add	count=1
function_arg	[function_1] annotation of ||| [arg_2] [function_1]	count=4
module	all the tensors linked ||| contrib	count=1
arg	given ids ||| params sp_ids sp_weights partition_strategy	count=1
function_arg	[function_1] [arg_2] ||| [function_1] log det jacobian [arg_2]	count=1
function	store sparsetensors ||| store sparse	count=1
class	config ||| parser config	count=2
function	information for a ||| for	count=1
function	tensors to ||| tensors to	count=1
class	watchoptions debug [class] ||| [class]	count=1
function	a filename ||| sharded filename	count=1
function_arg	str representation of ||| str dictionary	count=1
module	a non-reference ||| python	count=1
function	write the object ||| write	count=1
module	that graph building ||| contrib tensor_forest hybrid python models	count=1
module	an integer tensor ||| python keras	count=1
function	static shape info ||| static shape	count=2
module_class	input [class_2] ||| [module_1] input [class_2]	count=1
function_arg	add op1 ||| add op1	count=1
arg	nn softmax_cross_entropy_with_logits ||| logits onehot_labels	count=1
function	external [function_2] ||| [function_2] [function_1]	count=4
function	sampling [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] paths ||| [function_1] [function_2]	count=3
module	dimensional version of ||| python learn ops	count=1
function	construct the new ||| construct	count=1
function	clusters centers [function_2] ||| [function_2] [function_1]	count=1
function	restore variables ||| restore	count=1
function	matrixsetdiag ||| matrix set diag	count=1
arg	this name ||| name shape	count=1
function_arg	[function_1] [arg_2] ||| [function_1] contract [arg_2]	count=12
function	calls restoring things ||| smart unset all	count=1
function_arg	the boundary [arg_2] ||| [function_1] [arg_2]	count=4
function_arg	the values [arg_2] ||| [arg_2] [function_1]	count=1
class	failedpreconditionerror ||| failed precondition error	count=2
module	tensors that with integer ||| learn python learn	count=1
module	a number of ||| python ops	count=1
function	indices ||| index at	count=1
arg	op [arg] ||| [arg]	count=1
arg	cursesui ||| on_ui_exit	count=3
function_arg	rows indicated [arg_2] ||| [function_1] [arg_2]	count=1
arg	an op ||| op index	count=2
function	the saver from savers ||| saver	count=1
class	initializes ||| value tensor initializer	count=1
module	values of ||| python ops	count=3
function_arg	[function_1] a cell_fn ||| [arg_2] [function_1]	count=1
function	print ||| print	count=4
class	returns an input_fn that ||| test base	count=1
class	none if the shape ||| tensor shape	count=1
function	the string_to_hash_bucket op to ||| string to	count=1
module	loss using tf ||| losses	count=2
class	debug-wrapper ||| base debug wrapper	count=1
function	dictionary ||| fit	count=1
arg	functional interface for ||| inputs axis momentum epsilon	count=1
class	kmeans algorithm ||| kmeans	count=1
class	classifier ||| linear classifier	count=2
function	it is probably ||| is tensor flow	count=2
function	o abs o det ||| abs det	count=1
module	sequence of integers ||| contrib keras python keras preprocessing	count=1
module	getargspec ||| python util	count=1
function	learn the vocabulary ||| fit transform	count=1
module	and previous output tensors ||| contrib grid_rnn python ops	count=1
arg	a factor of rate ||| rate	count=1
class	from the directory ||| dir	count=1
function	for proper shape values ||| maybe assert valid	count=1
function	shape of the output ||| output shape	count=1
function	for variable-length numeric ||| valued var len	count=1
function	return indexies ||| fit	count=1
arg	op1 and [arg_2] ||| [arg_2] [arg_1]	count=5
arg	e g ||| pool_size strides padding	count=3
function	config of ||| config	count=1
function_arg	the product [arg_2] ||| [function_1] [arg_2]	count=2
function	creates [function_2] ||| [function_2] [function_1]	count=6
function	all the variables ||| convert variables to	count=1
function_arg	[function_1] [arg_2] ||| [function_1] tensors [arg_2]	count=6
function_arg	constructs a [arg_2] ||| [function_1] cell [arg_2]	count=2
function	the initial value for ||| initial value	count=1
function	then tile along ||| and tile	count=1
module	a sparse slice of ||| contrib factorization python ops	count=1
function	tuples into [function_2] ||| [function_1] [function_2]	count=4
function	types used in the ||| types	count=1
function	verifies validity ||| verify	count=1
function	doesn't discard the loaded ||| loads	count=1
arg	in feature_column ||| feature_column	count=1
function	instead of [150 1] ||| multi class matrix data labels1d	count=2
function	[function_1] [function_2] ||| [function_2] model [function_1]	count=6
class	multivariate normal ||| multivariate normal diag plus	count=1
function	and validates bias ||| bias and other columns	count=1
function	an op that ||| op	count=1
module	and set the ||| ops	count=1
function	[function_1] decoding ||| [function_1] [function_2]	count=3
function	at the given ||| once	count=2
function	tensors linked ||| ts	count=1
function	lr ||| lr	count=1
function	[function_1] no effect ||| [function_1] [function_2]	count=1
class	dict with data ||| data feeder	count=2
function	[function_1] border ||| [function_2] [function_1]	count=1
arg	tf nn softmax_cross_entropy_with_logits ||| onehot_labels weights	count=1
function	with other ||| and other	count=1
function	[function_1] arguments ||| [function_1] [function_2]	count=10
class	tensor have ||| tensor	count=1
function	get ||| item	count=1
function	output a summary of ||| tf spec summary	count=1
arg	x has ||| x data summarize	count=1
class	[class] if ||| [class]	count=2
module	input dict ||| estimator inputs	count=1
module	from the ||| debug cli	count=1
module	a numpy image tensor ||| keras preprocessing	count=3
function	sequence of integers ||| sequences	count=1
function	strictly [function_2] ||| [function_1] [function_2]	count=1
arg	on inputs ||| inputs	count=2
function	[function_1] paths from ||| [function_2] [function_1]	count=3
function	contract ||| contract	count=1
function	device ||| gputrace device	count=1
function	healthpills ||| health pills	count=1
arg	row and column ||| cls rows cols	count=1
arg	and stddev loc and ||| loc	count=1
module	of the op ||| python framework	count=1
function	number of ||| set size	count=1
function	[function_1] real valued ||| [function_2] features [function_1]	count=2
class	vocabulary dictionary and return ||| categorical	count=1
function	args belong to ||| graphs	count=1
module	instantiate this ||| ops	count=1
arg	both the original ||| mode	count=1
function	returns tensorflow data ||| data	count=1
function	to tf [function] [n1 ,nn ||| [function]	count=1
class	is ||| manager	count=1
class	apply this transform to ||| tensor flow transform	count=1
module	disk ||| python	count=1
module	the cli ||| debug cli	count=2
function	ndtri has ||| base ndtri	count=1
function	crop [function_2] ||| [function_2] [function_1]	count=2
function	eval [function_2] ||| [function_2] [function_1]	count=2
module	a sequence of ||| contrib keras python keras preprocessing	count=1
function	-grad * ||| erfc	count=1
class	will ||| pdbase	count=1
class	get ||| menu	count=1
function	proper ||| assert	count=1
module	a step of ||| ops	count=1
function	generates test [function_2] ||| [function_2] [function_1]	count=2
module	ops that ||| ops	count=1
arg	using the dequantize op ||| quantization_mode	count=1
arg	verifies that deepconv2d and ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
class	with ||| hook test	count=1
function	page ||| function page	count=1
function	[function] linearregressor estimator ||| [function]	count=1
class	vocabulary dictionary ||| categorical	count=1
function	[function_1] labels into ||| [function_2] [function_1]	count=1
module	computation of ||| python ops	count=1
function	adds a metagraphdef ||| add meta graph	count=1
function	of a given plugin ||| retrieve plugin	count=1
function	sparsetensor objects and return ||| sparse	count=1
module	create a sequence-to-sequence ||| contrib legacy_seq2seq python ops	count=1
arg	unneeded pairs of quantize/dequantize ||| old_graph	count=1
function	converts embedding lr multipliers ||| embedding lr multipliers	count=1
arg	operation ||| registered_name operation	count=1
arg	start a looperthread ||| timer_interval_secs target args	count=1
function	extract output [function_2] ||| [function_1] [function_2]	count=3
module_class	[module_1] [class_2] ||| [module_1] writer event [class_2] writer	count=3
module	return ||| tools docs	count=2
arg	x = g ||| x	count=1
arg	pads [arg_2] ||| [arg_2] [arg_1]	count=4
function	values for given sampled_candidates ||| values with sampled candidates	count=1
module	gradient for ||| python ops	count=2
arg	retrieve a ||| name	count=1
function	control dependencies ||| control dependencies	count=2
class	values in the table ||| table	count=2
function	add ||| add	count=29
arg	parameters for an ||| use_peepholes share_time_frequency_weights cell_clip	count=1
function	returns the proto_type for ||| collection	count=1
function	constructs a sprite image ||| sprite image	count=1
function	true positives for ||| true positive	count=2
function	of freedom in ||| df	count=2
function	function ||| get to proto function	count=1
function	as linear_model_fn but ||| with model fn	count=2
function	invalid ||| invalid	count=5
function	used by a graph ||| graph	count=1
module	a menuitem ||| python debug cli	count=1
function	inception v3 ||| inception v3	count=1
module	and feed functions ||| contrib learn python learn	count=1
module	dictionary and return ||| contrib learn python learn	count=1
function	sparsecolumns accept ||| column accepts	count=1
module	shape of a ||| python ops	count=1
module_class	[module_1] underlying ||| [module_1] [class_2]	count=2
arg	and dtype ||| dtype	count=1
module	match ||| graph_editor	count=1
function	a deconv ||| deconv	count=1
module	the specified ||| python	count=2
function	the tensors linked ||| filter	count=1
function	load training ||| load	count=1
function	the feed ||| last feed	count=1
class	be ||| indexed	count=1
function	while loop to ||| while loop	count=2
function	[function_1] control ||| [function_1] [function_2] dependency	count=1
function_arg	[function_1] if ||| [arg_2] [function_1]	count=5
class	coordinator ||| coordinator	count=2
function	[function_1] summary ||| [function_1] histogram [function_2]	count=1
arg	initialize a linearoperatorscaledidentity ||| num_rows multiplier is_non_singular is_self_adjoint	count=1
module	transforms each ||| contrib keras python keras	count=1
function_arg	collects the [arg_2] ||| [arg_2] [function_1]	count=1
module	mapping of ||| python ops	count=1
function	get legend for ||| legend	count=1
function_arg	callable that [arg_2] ||| [function_1] [arg_2]	count=1
function	to sparse [function_2] ||| [function_1] average precision [function_2]	count=3
module	loss using tf ||| contrib losses python losses	count=1
arg	using an enter op ||| op	count=1
module	dataframe ||| python learn dataframe	count=4
module	the ||| labeled_tensor python ops	count=2
function	the multivariate digamma function ||| multi digamma	count=1
function	implies a [function_2] ||| [function_2] [function_1]	count=2
function	accepts a state ||| static state	count=1
module	get a menuitem from ||| python	count=1
function	process [function_2] ||| [function_2] [function_1]	count=2
function	the summary tensor used ||| summary op	count=1
arg	an alias to ||| alias	count=1
function	function ||| function with args kwargs	count=1
arg	calculate the vector inner ||| xs ys	count=1
function	not [function] data purge ||| test [function]	count=1
function_arg	computes sin [arg_2] ||| [arg_2] [function_1]	count=1
function	add asserts ||| add asserts	count=4
function_arg	[function_1] var if ||| [function_1] [arg_2]	count=4
arg	tensor to [arg_2] ||| [arg_1] [arg_2]	count=2
class	outcome ||| bernoulli	count=1
function_arg	[function_1] [arg_2] ||| [function_1] m [arg_2]	count=8
arg	an enter op ||| op grad	count=1
function	[function_1] to observations ||| [function_1] [function_2]	count=1
module	dimensions of tensor ||| python ops	count=1
function	log p x >= ||| with log joint	count=1
function	projects the [function_2] ||| [function_2] [function_1]	count=2
function	a dense ||| dense	count=4
function	weight tensor ||| weight tensor	count=3
function	command ||| get command	count=1
arg	computes ||| dim weights	count=1
function	returns the proto_type for ||| proto	count=1
function	weights of the ||| weights	count=2
function	proper shape values then ||| maybe assert valid sample	count=1
function	a time ||| readable time	count=1
class	in this ||| base	count=2
class	play the role ||| operator	count=1
function	are sessionrunhook ||| type	count=1
function	loads ||| load	count=13
function	life time of a ||| enter	count=1
function	a sequence of integers ||| to	count=1
function	in a ||| count total	count=1
class	a notfounderror ||| not found error	count=1
function	mapping into ||| to	count=1
function	recipients of a node ||| node	count=1
function	[function_1] [function_2] ||| [function_2] call dump [function_1]	count=2
function	creates regression signature ||| regression signature	count=2
class	for proper ||| multinomial	count=1
arg	imports the graph ||| input_map return_elements	count=1
class	full names to ||| doc generator visitor	count=1
function	inference on ||| inference graph	count=2
function	of running an op ||| run op	count=1
function	max pool ||| max pool	count=5
function	string representing [function_2] ||| [function_2] [function_1]	count=1
class	random forest ||| random forest	count=1
function	[function_1] queue batch ||| [function_2] [function_1]	count=6
class	node-status ||| node	count=1
function	in args belong ||| graphs	count=1
function	reshape the ||| reshape	count=1
function	[function_1] absolute ||| [function_2] [function_1]	count=2
function	[function_1] invariant ||| [function_2] [function_1]	count=3
function	go [function] one place ||| go [function]	count=1
function	and a mix ||| optimizer mixed	count=1
module	a sparse slice of ||| factorization python ops	count=1
function	score for ||| score	count=1
function	resultant of an ||| compute elemwise op output	count=1
class	rich attributes ||| rich	count=1
module	returns a ||| layers python layers	count=1
module	the name of the ||| framework	count=1
module	image ||| contrib image	count=2
class	generator into ||| generator	count=1
function	hooks ||| check hooks type	count=1
arg	a resnet_v2 bottleneck ||| scope base_depth num_units stride	count=1
arg	for a given node ||| node	count=1
function	[function_1] types for ||| [function_2] [function_1]	count=1
arg	input and each cluster ||| inputs clusters	count=1
class	run() ||| session run context	count=1
module	the tensors ||| contrib	count=1
module	context to ||| python ops	count=1
function	[function_1] the training ||| [function_1] [function_2]	count=1
arg	sequences ||| sequences mode	count=1
function	from csv ||| from csv base	count=2
arg	the tensors ||| ops	count=1
arg	these parameters ||| name shape dtype initializer	count=3
arg	given shape ||| shape	count=2
class	tensorshape with the given ||| tensor shape	count=1
function_arg	[function_1] data ||| [function_1] [arg_2]	count=6
function_arg	image from [arg_2] ||| [arg_2] [function_1]	count=4
function	in a ||| total	count=1
module	invoked during construction ||| python debug wrappers	count=1
function	the value type store ||| value	count=1
module	shape ||| python ops	count=1
function	featurecolumns and an input_fn ||| feature columns and input fn	count=1
function	[function_1] constant_value ||| [function_1] [function_2]	count=2
function	status ||| status	count=1
function	last ||| last	count=3
function	values then return tensor ||| assert valid	count=1
function	a watch_fn ||| watch	count=1
class	the ||| builder	count=1
module_class	new [class_2] ||| [module_1] [class_2]	count=40
module	the model loading ||| factorization python	count=1
module	list of keras tensors ||| keras python keras	count=1
function	[function_1] tables ||| [function_2] [function_1]	count=5
module	tensor s of a ||| contrib keras python keras engine	count=6
function	which ensures override ||| override	count=1
module	creates a transform that ||| python learn dataframe transforms	count=1
module	get the list of ||| python debug lib	count=1
arg	kernellinearclassifier ||| model_dir n_classes	count=1
function	slots created by the ||| get slot	count=1
module	tensor and returns it ||| keras	count=1
module	the mnist dataset ||| python keras datasets	count=1
module	model ||| contrib slim python slim nets	count=1
class	multivariate normal distribution on ||| multivariate normal tri	count=1
module	on ||| python framework	count=2
function	a benchmark directly ||| benchmark	count=1
module	returns the ||| python	count=5
class	one place [class] if ||| [class]	count=1
arg	given estimator to ||| estimator	count=1
function	[function_1] x to ||| [function_2] [function_1]	count=5
class	check to make ||| test upgrade files	count=1
arg	longest ||| m	count=1
module	learn ||| learn preprocessing	count=2
function	its scope ||| name from scope	count=2
function_arg	[function_1] labels and ||| [arg_2] [function_1]	count=26
function_arg	names for [arg_2] ||| [arg_2] [function_1]	count=1
arg	denominator is zero ||| numerator denominator name	count=1
arg	g input_tensors) from ||| attr attr_name	count=1
module	prefetech ||| contrib slim python slim data	count=1
function	create summary based ||| to summary	count=1
module	output tensors ||| keras python keras engine	count=1
function	with no emitted ||| test watching variable update ops sees updated values	count=1
arg	a cell with ||| cell num_proj activation	count=1
function	[function_1] monitor callbacks ||| [function_2] [function_1]	count=1
module	learn the ||| contrib	count=1
module	the estimator for ||| python	count=1
function	get a root directory ||| get root dir	count=1
function_arg	least the [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	move dims [arg_2] ||| [arg_2] [function_1]	count=1
function	inputs for sequence to ||| inputs	count=1
function	a while [function_2] ||| [function_1] [function_2]	count=2
function	server and print some ||| server	count=1
function	x ||| b v1	count=1
function_arg	[function_1] of cursesui ||| [arg_2] [function_1]	count=2
function	save the ||| save ops	count=2
arg	gradient ||| op grad	count=2
arg	precision@k ||| k class_id	count=1
arg	m_prev [arg_2] ||| c_prev [arg_1] [arg_2]	count=3
class	of 1 ||| relaxed	count=1
function	transposes a sparsetensor ||| sparse transpose	count=1
function	[function_1] estimator ||| [function_1] [function_2]	count=1
function_arg	operation [arg_2] ||| [function_1] [arg_2]	count=1
function	column of a sparse ||| column	count=1
class	the event ||| writer	count=2
arg	application ||| logdir plugins multiplexer reload_interval	count=1
arg	in tensor_list ||| tensor_list	count=1
module	monte carlo estimate of ||| python ops	count=1
function	[function_1] data to ||| [function_1] [function_2]	count=2
function	the flags and create ||| create tb app	count=1
arg	gamma ||| gamma	count=1
arg	a microbenchmark ||| name target iters	count=1
module	[module_1] loaded module ||| [module_2] [module_1]	count=6
class	wrapper should ||| debug wrapper session test	count=1
function	classes ||| build standardized signature	count=1
function_arg	constructs a [arg_2] ||| [arg_2] [function_1]	count=6
class	prop ||| model	count=1
function	watch_fn ||| with watch fn	count=1
function	has no ||| has no	count=1
function	inputs [function_2] ||| [function_2] [function_1]	count=1
module	the cli see ||| python debug cli	count=2
module	shape of the ||| python ops reshape	count=1
function	to a docstring ||| to docstring	count=3
class	sdcalinearregressor has valid ||| sdcalinear regressor	count=1
function	[function_1] valued ||| [function_2] [function_1]	count=16
module	this cell ||| contrib rnn python ops	count=1
arg	op ||| op	count=38
arg	input [arg] ||| [arg]	count=3
arg	the losses ||| losses	count=1
function	postfix representation of ||| tf spec structure	count=1
arg	returns the frequency-weighted mean ||| axes frequency_weights name	count=1
function_arg	irfft [arg_2] ||| [arg_2] [function_1]	count=1
function	object holding the original ||| original	count=1
function	create an instance ||| create	count=2
function	create an instance of ||| create analyzer ui	count=1
module	for node-status labels ||| debug cli	count=1
function	[function_1] no ||| [function_1] [function_2]	count=5
function	of shapes for each ||| shapes	count=2
module	feeding ||| training python training	count=1
function	per step false positives ||| sparse false positive at k	count=1
function	objects ||| objects	count=1
class	[class_1] normal ||| [class_1] [class_2]	count=4
module	learn the vocabulary dictionary ||| contrib learn python	count=1
class	with ||| tfexample decoder test	count=1
function	[function_1] header for ||| [function_1] [function_2]	count=1
module	constructor for ||| export	count=1
arg	term to ||| predictions labels weights epsilon	count=1
function	collections ||| to collections	count=1
module	internal version of ||| python ops	count=2
module	the given tensors ||| python	count=1
arg	cond is true ||| cond	count=1
function	load [function_2] ||| [function_1] [function_2]	count=1
arg	on vector keep_input ||| tensor_list keep_input	count=1
function	shape ||| output shape	count=2
module	the model ||| contrib	count=1
function	graph ||| graph	count=37
function	all required [function_2] ||| [function_1] [function_2]	count=4
class	id ||| vocabulary	count=1
function	process ||| pid	count=1
function_arg	> 0 [arg_2] ||| [arg_2] [function_1]	count=1
function	fill tensor shapes ||| fill missing graph	count=1
module	together ||| batching python	count=1
function	get an ||| get identity	count=1
module	a debug ||| debug	count=1
arg	from op1 ||| op1	count=1
function	evaluating zero-sized tensors ||| zero sized	count=1
arg	feeds and [arg_2] ||| [arg_2] [arg_1]	count=8
arg	elements across dimensions of ||| keep_dims name	count=2
module	from a savedmodel ||| python saved_model	count=1
function	the resultant of ||| compute elemwise	count=1
function	[function_1] [function_2] ||| [function_1] grad [function_2]	count=2
class	sure we don't ||| test upgrade files	count=1
class	model for ||| model	count=2
function_arg	rank is expected_rank ||| is rank expected_rank	count=1
function_arg	test data [arg_2] ||| [arg_2] [function_1]	count=4
function	summary ||| tf spec summary	count=1
arg	x [arg_2] ||| [arg_2] [arg_1]	count=11
arg	normally distributed histograms ||| tag mu_sigma_tuples n	count=1
module	mnist ||| factorization examples	count=1
function	csv file with ||| csv with	count=3
function	a get ||| get	count=1
class	is part of the ||| sequential	count=1
function	a sequence of ||| embed sequence	count=1
class	index ||| index	count=2
function	calculates false positives for ||| false positive	count=1
function	that makes this graph ||| as	count=1
module	a keras ||| contrib keras python keras utils	count=1
function	of tasks defined ||| tasks	count=1
module	slice ||| python ops	count=1
function	shape values ||| assert valid	count=1
function	ready op used by ||| ready op	count=1
function_arg	to [arg_2] ||| [function_1] sp_input [arg_2]	count=4
function	conversion ||| conversion	count=2
arg	ids ||| ids partition_strategy name	count=1
arg	and return a _docstringinfo ||| py_object relative_path_to_root reference_resolver	count=1
module	dict symbol name ||| docs	count=1
function_arg	up to shallow_tree ||| up to shallow_tree	count=1
function_arg	[function_1] to console ||| [function_1] [arg_2]	count=4
arg	create batches of ||| batch_size capacity enqueue_many	count=1
function	[function_1] [function_2] ||| [function_2] log [function_1]	count=5
function	reads ||| read batch record	count=1
class	a ps task index ||| round robin strategy	count=1
function	inference to determine the ||| classes	count=2
function_arg	and process [arg_2] ||| [function_1] [arg_2]	count=1
function	for inputs ||| inputs	count=1
arg	axis ||| axis x_ndims	count=1
function	enter the ||| enter	count=1
function	the imaginary part ||| imag	count=1
function	[function_1] axis order ||| [function_2] [function_1]	count=1
arg	body to ||| body original_loop_vars loop_vars	count=1
function	[function_1] control flow ||| [function_1] [function_2]	count=2
function	range of replicas ||| remote replicas	count=1
function	is an [function_2] ||| [function_1] [function_2]	count=1
function	intersection [function_2] ||| [function_2] [function_1]	count=4
function	false positives ||| sparse false positive at k	count=2
function	variance ||| moments	count=1
function	used within an arg_scope ||| add arg	count=1
module	of layers ||| python layers	count=1
function_arg	required to [arg_2] ||| [arg_2] [function_1]	count=1
module	the proto_type ||| framework	count=1
arg	symbols to a ||| ids vocab_size embed_dim unique	count=1
module	tfrecords ||| python kernel_tests	count=1
function	[function_1] sparsetensordensematmul ||| [function_1] [function_2]	count=1
function	custom evaluation metrics ||| custom metrics with metric spec	count=1
function	the outputs [function_2] ||| [function_1] [function_2]	count=1
arg	validates ||| filename file_format duration_sec samples_per_second	count=1
function	size for ||| size	count=1
module	dimensions of this ||| contrib linalg python ops	count=1
module_class	[module_1] drawing a ||| [module_1] [class_2]	count=4
module	of integers ||| contrib keras python	count=1
arg	body to the graph ||| body original_loop_vars	count=1
class	multiple ||| export utils	count=1
module	sets ||| python keras	count=3
function	exit op are calculated ||| exit	count=1
module	of of ||| python ops	count=1
arg	the frequency-weighted ||| axes frequency_weights name	count=1
class	a condcontext object ||| cond context	count=1
function	[function_1] current control ||| [function_1] [function_2]	count=2
function	the vgg19 ||| vgg19	count=1
class	the pooling function ||| pooling test	count=1
module	a tensor ||| python	count=1
function	not applicable to strings ||| dtype string	count=1
function	in test ||| in test	count=1
module	transform that wraps a ||| contrib learn python learn dataframe transforms	count=1
function	array indices for the ||| array index	count=1
function	predictions ||| streaming recall at k	count=1
arg	size ||| size	count=1
function	mean relative ||| streaming mean relative	count=2
function	creates a checkpoint ||| checkpoint	count=1
arg	on inputs [arg_2] ||| [arg_1] [arg_2]	count=6
arg	runs session for given ||| session	count=1
function	hooks can be ||| hook	count=1
class	tensorshape with the ||| tensor shape	count=1
arg	microbenchmark ||| target iters	count=2
function	handler ||| handler	count=2
module	from a rank-2 ||| solvers python ops	count=1
function	get the [function_2] ||| [function_1] tensor [function_2]	count=7
module	the derivative of the ||| python ops	count=1
arg	a tensor ||| tensor	count=7
function	the integer [function_2] ||| [function_1] [function_2]	count=2
arg	to the op ||| op	count=1
arg	in sampled_candidates ||| sampled_candidates	count=1
module	adds ||| contrib linear_optimizer python	count=1
function	returns the update ||| update	count=1
module	opaque parameter buffer needed ||| cudnn_rnn	count=1
arg	input-output pairs for ||| image ksizes strides rates	count=1
arg	var [arg_2] ||| [arg_2] [arg_1]	count=3
function	when pooling ratio ||| pooling ratio	count=1
function	parsing new values from ||| from map	count=1
class	hook ||| optimizer hook	count=1
function	[function_1] regression ||| [function_1] [function_2]	count=1
function	tensor to ||| data tensor	count=1
arg	the path name ||| path	count=1
module	distributed floating point ||| specs	count=1
module	learn ||| contrib learn python learn	count=1
function	event for ||| event	count=1
function	run a [function_2] ||| [function_2] [function_1]	count=8
arg	labels ||| labels	count=32
function	[function_1] [function_2] within ||| [function_1] [function_2]	count=1
function	resultant of ||| compute elemwise	count=1
function	richtextlines ||| lines from rich	count=1
arg	body to the graph ||| body original_loop_vars loop_vars	count=1
module_class	a table [class_2] ||| [module_1] [class_2]	count=2
arg	for a tensorflow graph ||| graph	count=1
class	cell and ||| grid rnncell	count=1
arg	directory of many exports ||| export_dir_base	count=1
function	vocabulary [function_2] ||| [function_1] [function_2] column_name vocabulary_file num_oov_buckets vocab_size	count=1
function_arg	[function_1] [arg_2] ||| [function_1] with logits [arg_2]	count=2
function	[function_1] sparse id ||| [function_2] [function_1]	count=2
function	mix of features ||| optimizer mixed features arbitrary	count=1
function	for proper shape ||| valid	count=1
module	[module_1] [module_2] ||| [module_1] rnn python [module_2]	count=1
arg	parse [arg] ||| [arg]	count=1
function_arg	[function_1] at full_path ||| [function_1] [arg_2]	count=2
function	precision@k of predictions ||| top k	count=1
function	a scale ||| scale	count=1
arg	column based on ||| column args weight_collections	count=1
function	prune control [function_2] ||| [function_2] [function_1]	count=5
function	performs beam search ||| ctc beam search	count=2
arg	of a batch ||| batch	count=1
module	[module_1] the ||| [module_1] [module_2]	count=88
function	is the diagonal ||| diag update	count=1
function	values ||| maybe	count=1
function	connected input tensors of ||| connected inputs	count=1
function	manual ||| manual	count=1
function	from a mapping ||| from	count=1
function	provided have invalid ||| test invalid number of classes	count=1
function	rank must be ||| rank	count=1
module	[module_1] [module_2] ||| [module_1] python [module_2]	count=2
function	maximum layer ||| maximum	count=1
module	check to make ||| compatibility	count=1
function	input key ||| preprocess input	count=1
function	a mix ||| optimizer mixed	count=1
arg	a sparsetensor into a ||| sp_input default_value validate_indices name	count=1
arg	cells in dim_indices dimensions ||| dim_indices conf cells	count=1
function	probability of of ||| probs	count=1
module	and returns only the ||| contrib ndlstm python	count=1
function	audio clips ||| audio series	count=1
function	initialize ||| initialize	count=4
function	get tensor ||| get tensor	count=2
function	function to train ||| simple train	count=1
function_arg	[function_1] input_tree ||| [function_1] shallow_tree [arg_2]	count=3
function	a new seed ||| new	count=1
function	biasadd node ||| bias add node	count=2
function_arg	given variable [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] dynamic ||| [function_1] [function_2]	count=6
class	have a ||| upgrade	count=1
arg	input across the specified ||| inputs	count=1
function	[function_1] higher dimension ||| [function_2] [function_1]	count=2
function	sdcaoptimizer and ||| sdca	count=2
class	sample [class_2] ||| [class_2] [class_1]	count=6
arg	for selfadjointeigv2 ||| op grad_e grad_v	count=1
function	a loop [function_2] ||| [function_1] constant [function_2]	count=1
function	pooling layer for 2d ||| pooling2d	count=2
class	sdcalinearregressor works with ||| sdcalinear regressor	count=2
arg	a first-in first-out order ||| capacity types shapes names	count=1
arg	and body to the ||| body original_loop_vars loop_vars	count=1
function	from csv ||| from csv	count=1
class	[class] session ||| [class]	count=2
function	to use based ||| to hash	count=1
function	tensor to use ||| parse label tensor	count=1
function	restore variables from ||| restore	count=1
module	of unique ||| ops	count=1
module	inputs of ||| ops	count=3
module	output ||| rnn python ops	count=1
function	the resultant ||| compute elemwise	count=1
module	this ||| python keras wrappers	count=1
module	crf ||| contrib crf python ops	count=1
class	labels ||| class head	count=1
function	non-negative ||| assert non negative	count=1
class	the directory ||| dir	count=1
module	for labeled tensors ||| labeled_tensor	count=2
arg	a given sensitivity ||| sensitivity	count=1
class	audio ||| decode audio	count=1
arg	code ||| op	count=1
function	[function_1] [function_2] ||| [function_2] fake quant [function_1]	count=1
function	on ||| fit on	count=1
function_arg	order on [arg_2] ||| [arg_2] [function_1]	count=1
class	labels ||| stepper	count=1
function	components or floats equal ||| form	count=1
function_arg	on a [arg_2] ||| [function_1] batch [arg_2]	count=1
function	run ops in ||| run	count=1
function_arg	[function_1] ndarray ||| [function_1] [arg_2] num_threads enqueue_size	count=3
arg	new type ||| dtype	count=1
arg	tensors for given feature_columns ||| feature_columns name	count=1
function_arg	[function_1] tensor representing ||| [function_1] lengths maxlen dtype [arg_2]	count=3
function	plugin [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] example proto ||| [function_1] [function_2]	count=2
arg	these parameters or creates ||| name shape dtype initializer	count=2
module	of an ||| bayesflow python ops	count=1
function	new input ||| input	count=1
arg	for given features ||| input_fn batch_size	count=4
function	common to ||| common	count=1
module	of load() ||| backend	count=1
class	wrapper should ||| wrapper	count=1
class	queue ||| queue base	count=5
function	stores trace ||| trace	count=1
function	a list of ||| from rich line list	count=1
arg	be visualized ||| values metadata thumbnails	count=1
class	if this operator ||| operator	count=1
function	leaf impurity ||| impurity	count=1
function	left recursion ||| tf left	count=1
arg	ax ||| transpose_x	count=1
function	a device for ||| device	count=1
class	wrapper should work also ||| debug wrapper	count=1
module_class	in [class_2] ||| [module_1] [class_2]	count=4
function_arg	[function_1] [arg_2] ||| [function_1] for rnn [arg_2]	count=2
function	the op type of ||| op type	count=1
function	compressed ||| compressed	count=3
arg	functional interface for transposed ||| filters kernel_size strides	count=1
function	computes the root mean ||| root mean	count=2
function	the vocabulary ||| transform	count=1
module	check ||| debug cli	count=1
arg	of elements across dimensions ||| keep_dims name	count=2
function	returns whether tensorflow can ||| is	count=1
function	2 then tile along ||| tile	count=1
function	are satisfied ||| satisfied	count=1
function	saved checkpoint file ||| checkpoint	count=1
function	ops with ||| test watching variable update ops	count=1
function	to row [function_2] ||| [function_1] [function_2]	count=1
function_arg	[function_1] if one ||| [arg_2] [function_1]	count=5
function	dynamic shapes ||| matrix dynamic	count=1
function_arg	returns a [arg_2] ||| [arg_2] [function_1]	count=6
module	of inverse and ||| python ops	count=1
function	operation ||| op v2	count=1
function	as [function] into given ||| [function]	count=1
function	merge the ||| merge	count=2
class	underlying queue ||| queue base	count=1
function	of vectors ||| vector	count=1
module	queue ||| python training	count=1
module	data ||| learn_io	count=1
function	non-control [function_2] ||| [function_1] [function_2]	count=4
function	[function_1] dictionary ||| [function_2] [function_1]	count=3
module_class	[module_1] [class_2] ||| [module_1] student [class_2]	count=1
class	to ||| test	count=1
function	has been initialized ||| initialized	count=1
class	the ||| lazy builder	count=2
arg	items ||| items	count=3
module	0) ||| python ops	count=1
function_arg	[function_1] context_def ||| [function_1] proto [arg_2]	count=2
function	[function_1] inside the ||| [function_2] [function_1]	count=1
function	for ops used ||| for	count=1
module	for ||| debug	count=1
function_arg	[function_1] in base_dir ||| [function_1] [arg_2]	count=5
function_arg	[function_1] an ||| [function_1] [arg_2]	count=5
module	the current ||| python	count=2
function	a deconv layer based ||| deconv	count=1
function	valid task [function_2] ||| [function_2] [function_1]	count=2
function	get ||| filter ts from regex	count=2
function	single ||| get single	count=1
function	recurrent dropout ||| dropout	count=1
arg	forward propagation for 1 ||| x cs_prev h_prev w	count=1
arg	reduces grad ||| op grad	count=1
function	a dictionary of tags ||| tags	count=1
function	sets the list ||| set	count=1
function	sort a ||| sort	count=1
module	the ||| learn	count=2
function	finalize ||| finalize	count=1
function	[function_1] variable with ||| [function_1] [function_2]	count=4
function	single numpy printoption from ||| parse numpy printoption	count=1
function	transforms ||| texts	count=1
class	to ||| op def library	count=1
module	returns ||| contrib learn python learn	count=9
function	convert a list ||| line list	count=1
function	urls ||| urls	count=1
function	to parse ||| parse tensor or dict	count=1
function	the proto_type for ||| get collection	count=1
arg	inputs e g volumes ||| inputs pool_size strides padding	count=1
function	variable [function_2] ||| [function_1] [function_2]	count=10
function	the input ||| get input	count=2
function	16-layers version d example ||| 16	count=1
module	returns serialized bigquerytablepartition messages ||| contrib cloud python	count=1
arg	[arg_1] holds element-wise ||| [arg_2] [arg_1]	count=4
function	request a [function_2] ||| [function_1] nonexistent [function_2]	count=4
module	the sense of tensors ||| linalg python ops	count=2
module_class	of d [class_2] ||| [module_1] [class_2]	count=1
class	constructor of watchoptions debug [class_1] [class_2] ||| [class_1] [class_2]	count=1
function	save ||| sharded save	count=2
function	and linear combined ||| linear combined	count=2
function	in a list of ||| count total	count=1
function	[function_1] an output ||| [function_1] [function_2]	count=1
function	[function_1] active ||| [function_2] [function_1]	count=3
module	transforms ||| python	count=1
class	then return ||| multinomial	count=1
module	shape values then ||| distributions	count=1
arg	reduces grad along ||| grad	count=1
function	and stores trace ||| trace	count=1
module	list of tensors ||| contrib rnn python ops	count=1
function	this ||| get resource	count=1
function	logistic regression [function_2] ||| [function_1] [function_2]	count=2
arg	storing the [arg_2] ||| [arg_1] [arg_2]	count=1
module	session and runs a ||| contrib learn python learn dataframe	count=1
function	recursively with control ||| recursive with controls with	count=2
function	calculates true positives for ||| sparse true positive at k	count=1
function	the end of an ||| epoch end	count=1
function	convolutions actually ||| non atrous	count=1
function	and no scores ||| classification6	count=1
function	dtype based on this ||| base	count=1
module	distributed floating point number ||| contrib specs python	count=1
module	gradient for ||| contrib rnn python ops	count=1
function	[function_1] restart is ||| [function_2] [function_1]	count=2
module	read ||| contrib learn python learn learn_io	count=4
arg	ops from a graph ||| graph	count=1
function	invert ||| invert	count=1
function	[function_1] save ||| [function_2] [function_1]	count=1
function	the ||| name scope ops	count=1
function	all ||| ts from regex	count=2
class	this ||| sdca update weights hook	count=2
module	r [module] ||| [module]	count=2
module	return indexies ||| contrib learn python learn	count=1
module	lists of unique items ||| python ops	count=1
function	tensorflow graph [function_2] ||| [function_2] [function_1]	count=5
arg	the parameters for an ||| num_units use_peepholes share_time_frequency_weights	count=1
function	complex conjugate ||| conj	count=1
module	create a sequence-to-sequence ||| contrib legacy_seq2seq python	count=1
function	inference ||| inference	count=2
function	that is ||| version	count=2
module	using ||| contrib learn python learn	count=3
module	tensorboard ||| tensorboard	count=4
function	a unary ||| register unary op	count=1
function	handler [function_2] ||| [function_2] [function_1]	count=2
arg	new adagradda optimizer ||| learning_rate global_step initial_gradient_squared_accumulator_value l1_regularization_strength	count=1
function	are reparameterized ||| reparameterization type	count=1
function	for multi class ||| multi class	count=2
arg	[arg_1] dense labels ||| [arg_2] [arg_1]	count=1
function_arg	a mask [arg_2] ||| [function_1] lengths maxlen dtype [arg_2]	count=3
function	get all the ||| ts from	count=1
class	will be produced ||| indexed slices	count=1
module	returns the length ||| contrib layers python	count=2
module	conv ||| keras python keras applications	count=1
function	connected ||| connected	count=3
class	returns whether this plugin ||| fake plugin	count=1
class	the image buffer ||| image	count=1
class	constructs a metadata ||| metadata	count=1
function	proper ||| assert valid	count=1
function	multi value ||| single value	count=1
arg	returns the longest ||| m	count=1
arg	rank equal to rank ||| rank data summarize	count=2
arg	predictions, [arg_2] ||| [arg_1] [arg_2]	count=1
class	if ||| manager	count=1
arg	pooling op ||| inputs kernel_size pooling_type padding	count=1
class	model ||| cudnn	count=2
module	same as the last ||| learn estimators	count=3
class	[class_1] wishart distribution ||| [class_2] [class_1]	count=2
function	spec for [function_2] ||| [function_2] [function_1]	count=1
function	a node name ||| node	count=1
module	all events ||| tensorboard backend event_processing	count=2
class	coordinatewise ||| exp relaxed one hot categorical	count=1
class	[class_1] area ||| [class_1] [class_2]	count=3
module	create ||| debug cli	count=2
arg	a cell with ||| cell output_size activation reuse	count=1
module	nan ||| python ops	count=1
arg	extracts ||| input_ begin	count=1
function	init and update it ||| init	count=1
function	symbol ||| build guide index	count=1
function_arg	parameters for [arg_2] ||| [arg_2] [function_1]	count=1
module	of the original ||| python ops	count=2
module	values then return tensor ||| python ops	count=1
function	an op ||| training op	count=2
arg	different thresholds on ||| thresholds weights	count=2
module	of inverse and ||| contrib distributions python ops	count=1
function	[function_1] hooks can ||| [function_2] [function_1]	count=2
function	a tensor to use ||| data tensor or dict	count=1
function	resources visible to ||| shared resources	count=1
function	[function_1] binary operation ||| [function_1] [function_2]	count=1
function	maximum ||| max	count=1
module	[module_1] training ||| [module_1] [module_2]	count=2
module_class	params from [module_1] [class_2] canonical format ||| [module_1] [class_2] params	count=1
function	[function_1] sparse feature ||| [function_2] [function_1]	count=2
arg	to a file with ||| filename	count=1
module	list of tensors ||| python ops	count=9
function	tensor objects ||| tensor	count=2
arg	microbenchmark to ||| iters	count=1
function_arg	menu for [arg_2] ||| [arg_2] [function_1]	count=2
arg	a file / directory ||| oldname newname overwrite	count=1
function	[function_1] two ||| [function_2] [function_1]	count=1
arg	from the replaced ||| target_ts replacement_ts dst_scope src_scope	count=1
module	fetch and feed ||| client	count=1
function	for sequence models ||| sequence input	count=1
function	tensorshape of [function_2] ||| [function_2] [function_1]	count=8
function	the kernel mappers ||| kernel mapper	count=2
function	tf session to be ||| session	count=1
function	of [150 1] ||| multi class matrix data labels1d	count=2
function	running an op ||| benchmark run op prebuilt	count=1
class	a non-reference dtype ||| dtype	count=1
function	that match the ||| filter ts	count=1
arg	ax ||| transpose_x name	count=1
function	values from a dictionary ||| from map	count=1
function	specified gradients ||| gradients	count=2
arg	computes matmul x weights ||| x weights	count=2
function	node-status labels ||| status	count=1
module_class	to ops [class_2] ||| [module_1] [class_2]	count=8
arg	randomly selects ||| randomize num_epochs	count=1
function	multivariate digamma function psi_p ||| multi digamma	count=1
arg	sparsetensor into ||| sp_input default_value validate_indices name	count=1
function	by a [function_2] ||| [function_2] [function_1]	count=1
class	don't have a ||| test upgrade files	count=1
function_arg	assert the [arg_2] ||| [function_1] equal [arg_2]	count=1
function	strings into int64 ||| string to	count=1
module	symbol name -> ||| tools docs	count=1
module	dimensional version of ||| ops	count=1
function	dict into [function_2] ||| [function_2] [function_1]	count=1
function	in a graph ||| freeze graph	count=1
function	each text ||| to sequences	count=1
class	tests ||| draw bounding box op test	count=1
function	the vgg16 ||| vgg16	count=1
function	variable and ||| local variable	count=1
function	the output values ||| values for	count=1
class	and return indexies ||| categorical	count=1
function	returns op that asserts ||| assert	count=1
module	a shape representing ||| python framework	count=1
module	of tensors that summarize ||| contrib framework python ops	count=1
arg	parameters ||| input_size use_peepholes cell_clip	count=1
module	keras variable ||| contrib keras python keras	count=1
arg	a given sensitivity ||| sensitivity weights	count=1
function	input_node ||| quantize weight eightbit	count=1
function	are cholesky ||| cholesky	count=1
function	adds a log ||| log	count=1
function	partitioner to specify ||| partitioner	count=1
function	add a ||| add	count=8
class	given weight column ||| dnnlinear combined regressor	count=2
function	a sprite [function_2] ||| [function_2] [function_1]	count=2
function	a watch_fn ||| with watch fn	count=1
function	sdcaoptimizer ||| sdca	count=3
function_arg	[function_1] representation ||| [function_1] [arg_2]	count=3
function	[function_1] total log-likelihood ||| [function_2] [function_1]	count=1
function_arg	true positives [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	positives for [arg_2] ||| [function_1] labels predictions_idx [arg_2]	count=4
class	array ||| tensor board wsgiapp	count=2
function	prepares features config ||| create feature spec for parsing	count=1
function	python implementation ||| py	count=1
class	we ||| test	count=1
arg	the given input across ||| inputs	count=1
arg	a new [arg_2] ||| [arg_2] [arg_1]	count=2
function	the [function] or ||| get [function]	count=1
function	export in ||| export	count=1
class	staging area element ||| staging area	count=6
function	[function_1] fetches ||| [function_2] and [function_1]	count=3
class	lstm ||| lstmblock fused	count=1
module	to ||| ops	count=10
function_arg	the given operation ||| call op	count=1
function	list of completion items ||| items	count=1
function	[function_1] source ||| [function_1] [function_2]	count=3
function_arg	dimension [arg_2] ||| [arg_2] [function_1]	count=2
function	the block that has ||| block	count=1
function	a given sensitivity ||| sensitivity	count=1
function	block [function_2] ||| [function_2] [function_1]	count=2
module	constructor ||| python debug cli	count=2
arg	return ||| x	count=1
function	the page ||| page	count=4
function	savedmodel ||| savedmodel	count=1
arg	inp for ||| inp	count=1
module	to all ops created ||| python ops	count=1
function	create test [function_2] ||| [function_1] [function_2]	count=2
function	other [function_2] ||| [function_1] [function_2]	count=2
function	values of [function_2] ||| [function_2] [function_1]	count=4
module_class	the control ||| contrib graph_editor control	count=2
arg	best effort ||| adjoint adjoint_arg	count=1
function_arg	an experiment [arg_2] ||| [function_1] [arg_2]	count=2
arg	functional interface for 1d ||| inputs filters	count=1
module	sequence-to-sequence model with ||| contrib legacy_seq2seq python	count=1
class	one place [class] if possible ||| [class]	count=1
class	number ||| tensor shape	count=1
function	scan ||| scan	count=1
module	of a relaxedcategorical ||| ops	count=1
function	returns the timestamp ||| timestamp	count=1
module	to init ||| saved_model	count=1
arg	initialize the basic ||| forget_bias use_peephole	count=1
arg	record to the ||| record	count=1
function	a tf events file ||| events file	count=1
function	tensorshape of batch dimensions ||| batch shape	count=1
function	grad state for ||| get grad state	count=1
function	[function_1] given task ||| [function_2] [function_1]	count=4
arg	targets ||| targets	count=1
function	to compute ||| compute	count=1
function	have invalid ||| invalid	count=2
function_arg	[function_1] of input_tree ||| [function_1] shallow_tree [arg_2]	count=3
module	file to ||| python	count=1
function	difference ||| difference	count=2
function	conversion [function_2] ||| [function_2] [function_1]	count=4
function	gets [function_2] ||| [function_2] [function_1]	count=5
function	the op ||| find op	count=1
arg	values to a ||| values dtype name	count=1
module	creates training and ||| contrib learn python learn	count=1
function	unused nodes from ||| unused from files	count=2
module	computes output tensors for ||| contrib keras python keras engine	count=1
arg	creates a session, and ||| master saver checkpoint_dir checkpoint_filename_with_path	count=1
function	creates regression [function_2] ||| [function_2] [function_1]	count=2
arg	added input state and/or ||| input_keep_prob output_keep_prob state_keep_prob	count=1
module	(vs ||| python ops	count=1
arg	tensor for this head ||| target features	count=1
function	object created from ||| from proto	count=2
arg	to the labels ||| labels weights metrics_collections	count=2
function	[function_1] tf session ||| [function_1] [function_2]	count=1
function	[function_1] set ||| [function_2] [function_1]	count=23
function	a feature spec ||| sequence feature spec	count=1
module	labels ||| debug	count=1
module	of tensors specified by ||| slim	count=1
function	the variables in a ||| convert variables	count=1
function	[function_1] slice ||| [function_1] save [function_2]	count=1
function_arg	from np_matrix ||| fn np_matrix	count=1
function_arg	[function_1] _docstringinfo ||| [arg_2] [function_1]	count=1
function	[function_1] system implementation ||| [function_2] [function_1]	count=1
function	the root name for ||| root name	count=1
module	of the ||| contrib labeled_tensor python ops	count=2
function	state saver ||| static state	count=1
arg	two ||| a	count=2
function	to loss for ||| loss	count=3
class	common config for ||| config	count=1
module	dumps all layer ||| keras engine	count=1
function	to restore [function_2] ||| [function_1] [function_2]	count=1
arg	control_inputs and control_outputs ||| control_inputs control_outputs	count=1
function_arg	[function_1] two tensors ||| [arg_2] [function_1]	count=1
arg	mean and stddev loc ||| loc	count=1
module	one step of ||| contrib rnn python ops	count=1
function	to use ||| string to hash	count=1
function	[function_1] variables ||| [function_2] [function_1]	count=21
function	make [function_2] ||| [function_2] [function_1]	count=2
function	overriding gradient functions ||| gradient override	count=2
function	restoring things to ||| unset all	count=1
function	all ||| from regex	count=2
function	a summary ||| summary	count=3
module	generic ||| learn python learn utils	count=1
arg	ops ||| ops	count=2
module	of ||| contrib cudnn_rnn python ops	count=2
function_arg	boston [arg_2] ||| [function_1] [arg_2]	count=1
function	learn ||| fit	count=1
function	their [function_2] ||| [function_2] [function_1]	count=1
arg	[arg_1] h ||| [arg_2] [arg_1]	count=3
function	root directory containing all ||| root dir with all	count=1
module	data ||| contrib learn python learn learn_io	count=3
arg	the following rule ||| column_name output_rank	count=1
module	loss using ||| ops losses	count=1
function	of latest saved ||| latest	count=1
function	benchmark directly ||| report benchmark	count=1
arg	on [arg] but using ||| [arg]	count=1
function_arg	[function_1] in ||| [arg_2] [function_1]	count=8
function	[function_1] small input ||| [function_2] [function_1]	count=1
function	evaluates ||| evaluate	count=2
function	shape values then return ||| assert	count=1
function	column factors ||| factors	count=1
class	values then return tensor ||| dirichlet multinomial	count=1
function	return a postfix ||| structure	count=1
module	loss to ||| losses	count=3
function	[function_1] [function_2] sparse ||| [function_1] [function_2]	count=3
function	creates a new ||| create	count=1
arg	a tensor with ||| name	count=1
module	tensor ||| keras	count=14
class	by this operator ||| linear operator scaled	count=1
arg	execute the ||| enqueue_op coord	count=1
arg	permute ||| labeled_tensor axis_order	count=1
function	[function_1] runners ||| [function_2] [function_1]	count=2
class	have a ||| test upgrade	count=1
function	run() ||| run calls	count=1
function	to restore variables from ||| sharded restore	count=1
class	and its outer context ||| context	count=1
module	__init__ which gets ||| contrib distributions python ops	count=1
module	sum ||| python framework	count=2
arg	[arg_1] 5d tensor ||| [arg_2] [arg_1]	count=1
arg	dimension of 1 into ||| name dim	count=1
class	staging [class_2] ||| [class_2] [class_1]	count=5
module	batched ||| training python training	count=1
module	is where the layer's ||| keras python keras engine	count=1
function	a subgraph [function_2] ||| [function_2] [function_1]	count=2
arg	cell with ||| cell	count=4
class	ugrnn ||| ugrnncell	count=1
arg	the basic ||| forget_bias use_peephole	count=1
function	a slot [function_2] ||| [function_2] [function_1] primary name dtype colocate_with_primary	count=2
function	graph the default ||| default	count=1
class	queue in case ||| queue	count=1
class	with ||| gmm ops test	count=1
function	feed types used in ||| last feed types	count=1
module	embedding ||| python ops	count=5
function	output mask ||| output mask	count=3
function	run() calls to ||| run end	count=1
function	of the names ||| fetch names	count=1
function	total [function] ||| [function]	count=3
function	denormals ||| denormals	count=1
module	each ||| keras python keras preprocessing	count=2
function	of predictions with respect ||| precision	count=3
class	node ||| debug dump dir	count=1
arg	the labels ||| labels dim	count=1
function	legend for node-status ||| node status label legend	count=1
class	table outputs the corresponding ||| table	count=3
module	of a tensor ||| keras python keras	count=1
function	[function_1] start ||| [function_2] [function_1]	count=4
function	batch ||| keyed batch features shared	count=1
function	the training ||| training ops	count=2
module	register ||| python ops	count=1
arg	inputs and/or outputs ||| remove_input_map remove_output_map	count=2
function	extract the [function_2] ||| [function_1] [function_2]	count=3
function	the handle ||| session handle	count=1
function	weights to a ||| weights	count=1
module	ndarray with the ||| python	count=1
module	updates internal vocabulary based ||| keras python keras preprocessing	count=1
function	of data types ||| types	count=1
function	direct python implementation of ||| to batch direct	count=1
class	of the base class ||| base	count=1
class	construct multivariate [class_2] ||| [class_2] [class_1]	count=8
module	variable and ||| keras python keras	count=1
arg	a session, ||| master saver checkpoint_dir checkpoint_filename_with_path	count=1
function	constants ||| constants	count=1
function	variables in ||| variables	count=1
function	_targetcolumn [function_2] ||| [function_2] svm [function_1]	count=1
function	to 2d ||| to 2d	count=2
function	separable ||| separable	count=1
function_arg	[function_1] necessary to ||| [function_1] inputs tensor [arg_2]	count=1
arg	for an estimator ||| num_units target_column problem_type	count=1
module	for evaluating ||| tensor_forest python	count=1
function	a slot named "name" ||| get slot	count=1
module	for the next runge-kutta ||| contrib integrate python ops	count=1
function	vocabulary dictionary and ||| fit transform	count=1
function	summary ||| summary op	count=1
function	create ||| maybe create control flow	count=1
module	the total number of ||| ops	count=2
function	a dense [function_2] ||| [function_1] to [function_2]	count=1
arg	to_proto ||| to_proto	count=1
function	[function_1] types for ||| [function_1] [function_2]	count=1
function	download the data from ||| download	count=1
function	the end of training/evaluation ||| end	count=1
function	local variables ||| local variables	count=2
module	linear ||| contrib rnn python ops	count=1
arg	axis in x ||| x axis	count=1
arg	deepconv2d and ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
function	example ||| from example	count=1
class	id ||| sparse column	count=2
module	local ||| python ops	count=1
function	of the tensor ||| tensor	count=1
class	checkpoint ||| feature column	count=1
function	[function_1] summary computations ||| [function_2] [function_1]	count=6
function	we use the ||| use	count=1
function	and real valued ||| optimizer real valued linear	count=1
module	dataset ||| contrib learn python learn datasets	count=4
arg	the event ||| query_for_tag	count=1
function	the loss ||| calculate loss	count=1
arg	the given definition ||| server_or_cluster_def job_name task_index protocol	count=1
arg	subgraph ||| sgv dst_graph dst_scope src_scope	count=1
function	given variable or list ||| set variable or list	count=1
arg	for a tensorflow graph ||| graph debug_ops	count=1
class	current batch of ||| queued sequence batch	count=1
function_arg	check [arg_2] ||| [arg_2] [function_1]	count=1
arg	arrays or dicts of ||| rtol atol	count=1
arg	services and ||| threads close_summary_writer	count=1
function	creates classification ||| classification	count=1
function	the feed dictionary ||| init feed dict	count=2
arg	of [1] see ||| inputs num_classes is_training global_pool	count=3
arg	given input across the ||| inputs	count=1
function	a metagraphdef proto ||| import meta	count=1
function_arg	distribution as [arg_2] ||| [function_1] [arg_2]	count=2
function	tensor version ||| assert valid	count=1
class	transform to ||| transform	count=2
function	_guideref from the files ||| build guide	count=1
module	if all are ||| estimator	count=1
module	each text ||| contrib keras	count=1
function_arg	a graph [arg_2] ||| [function_1] [arg_2]	count=1
function	sessionrunhook raises typeerror otherwise ||| check hooks	count=1
class	multivariate normal ||| multivariate normal linear	count=1
module	then ||| python ops distributions	count=2
function	any [function] inputs ||| non recursive no [function]	count=1
function	[function_1] a benchmark ||| [function_1] [function_2]	count=1
function	containing all ||| with all resources	count=1
arg	checkpoint in checkpoint_dir ||| checkpoint_dir	count=1
function	to enqueue based ||| to enqueue	count=2
function	get ||| get fetch	count=1
function	return the python object ||| to object	count=1
function	render traceback ||| render node traceback	count=1
function_arg	compatible [arg_2] ||| [arg_2] [function_1]	count=1
class	make ||| test	count=1
function	assert the condition ||| assert	count=7
function_arg	[function_1] [arg_2] kl divergence ||| [function_1] [arg_2]	count=1
module_class	new optimizer ||| python training optimizer	count=1
function	metric [function_2] ||| [function_1] [function_2]	count=2
function	directory containing all the ||| dir with all resources	count=1
function	containing all ||| all resources	count=1
function	[function_1] graph-level random ||| [function_2] [function_1]	count=1
function	per example ||| example	count=1
function	a summary [function_2] ||| [function_2] [function_1]	count=2
module	variables to represent ||| contrib factorization examples	count=1
arg	from x [arg_2] ||| [arg_1] [arg_2]	count=1
function	end of ||| on epoch end	count=1
module_class	[module_1] [class_2] ||| [module_1] staging [class_2]	count=2
class	label ids ||| multi class	count=1
arg	globalstepwaiterhook ||| wait_until_step	count=1
function_arg	metagraphdef to [arg_2] ||| [arg_2] [function_1]	count=1
module	distribution s ||| contrib distributions	count=1
module_class	all ops [class_2] ||| [module_1] [class_2]	count=1
class	the generator ||| generator	count=1
module	returns serialized bigquerytablepartition messages ||| cloud python ops	count=1
arg	constructs ||| reparameterization_type validate_args allow_nan_stats	count=1
function	into ||| input	count=1
class	eventaccumulator after adding ||| mocking event	count=1
function	step update for dnn-only ||| step dnnonly	count=1
function	computes the recall of ||| streaming recall	count=1
arg	perform depth-first search ||| lines attr_segs	count=1
arg	the convolution function ||| filter_in_sizes stride padding	count=1
function	getsource ||| getsource	count=1
arg	value of a ||| x value	count=1
module	image s by ||| contrib image python ops	count=1
class	proper shape, dtype ||| operator pdidentity	count=1
class	test ||| stepper backward run test	count=1
module_class	event [class_2] ||| [module_1] event [class_2]	count=2
arg	from x [arg_2] ||| [arg_2] [arg_1]	count=1
module	tuple of integer[s] ||| python ops	count=1
arg	create a tf learn ||| cls pandas_dataframe num_threads enqueue_size	count=1
function	summary file in given ||| summary	count=1
module	logistic ||| distributions python ops	count=1
function	variables in a graph ||| freeze graph	count=1
function	obtain all input ||| input	count=1
function	reshape specific ||| reshape	count=1
module	a cross-entropy loss using ||| losses	count=2
function	isinf are not ||| gives false	count=1
function	mahalanobis distance to the ||| distance to	count=1
function	external control [function_2] ||| [function_1] [function_2]	count=3
function	file names ||| file names	count=3
arg	using tf nn softmax_cross_entropy_with_logits ||| logits onehot_labels weights	count=1
function	to ops ||| filter	count=1
module	return tensor version ||| ops	count=1
function	batch_shape, [function_2] ||| [function_1] [function_2]	count=3
function	the end of ||| epoch end	count=1
arg	in guide_src_dir ||| guide_src_dir	count=1
function	for bilinear ||| bilinear grad	count=1
class	the debug tensor dumping ||| session debug	count=1
function	parses and [function_2] ||| [function_2] [function_1]	count=1
arg	the specified axis ||| axis	count=2
arg	of the form 'x=y' ||| kv_str	count=1
function	a mix of features ||| mixed features arbitrary weights	count=2
function	a model_fn can return ||| create model fn ops	count=1
function	define [function_2] ||| [function_2] [function_1]	count=5
class	which values will be ||| indexed	count=1
class	basic ||| layer norm basic	count=1
function	average of a ||| average	count=1
function	is the switch for ||| switch	count=1
function	has integer [function_2] ||| [function_1] [function_2]	count=1
class	to make ||| test	count=1
function_arg	[function_1] op ||| [function_1] loop switch [arg_2]	count=2
function	the noise-contrastive estimation training ||| nce	count=1
function	map ||| map	count=6
function	the plugins that have ||| plugins	count=1
function	the handle ||| get session handle	count=1
arg	to handle syncreplicaoptimizer initialization ||| sync_optimizer is_chief num_tokens	count=1
function	of a node ||| node	count=2
function	to the ||| to clusters	count=1
function	that a model_fn ||| create model fn ops	count=1
class	declare object ||| declare	count=1
function	[function_1] step ||| [function_2] [function_1]	count=12
function	[function_1] variation ||| [function_2] [function_1]	count=7
function	create the state ||| maybe create control flow state	count=1
class	check to ||| test upgrade files	count=1
function	exit op ||| exit grad	count=1
function_arg	[function_1] [arg_2] ||| [function_1] crop image [arg_2]	count=2
arg	console ||| d show_missing	count=1
function	tests the results ||| test	count=1
function	as an operation ||| as	count=1
module	retrieves a ||| python keras engine	count=1
function	[function_1] into pil ||| [function_2] [function_1]	count=1
function	[function_1] squared error ||| [function_1] [function_2]	count=8
module_class	[module_1] initializer ||| [module_1] ops [class_2]	count=1
function	menu ||| menu	count=2
arg	from oldpath to newpath ||| oldpath newpath	count=1
function	absolute value [function_2] ||| [function_2] [function_1]	count=1
class	a ||| files	count=1
arg	while maintaining ||| outputs_collections	count=1
function	[function_1] old values ||| [function_1] variable [function_2]	count=1
function_arg	gradient for [arg_2] ||| [function_1] [arg_2]	count=2
module	specific format of ||| python ops	count=2
function_arg	cross entropy [arg_2] ||| [function_1] [arg_2]	count=1
function	mappers provided [function_2] ||| [function_2] kernel [function_1]	count=2
function	invalid type ||| invalid number of	count=1
class	pooling ||| pooling	count=5
module_class	[module_1] that failed ||| [module_1] op [class_2]	count=1
function_arg	[function_1] given rank ||| [arg_2] [function_1]	count=5
class	for ||| multinomial	count=1
arg	values ||| values dtype	count=1
function	sdcaoptimizer and ||| sdca optimizer	count=2
module	sequence ||| preprocessing	count=1
function	sum ||| sparse reduce sum	count=2
class	event ||| summary	count=1
module	of underlying vector ||| python ops	count=1
function	reads ||| read batch record features	count=2
arg	x has ||| x	count=1
arg	[arg_1] with new_child ||| [arg_1] [arg_2]	count=3
function	re-route both the inputs ||| reroute	count=1
module	equal to ||| distributions	count=1
function	computes the confusion ||| confusion	count=1
arg	the method named schedule ||| schedule	count=1
function	the unbatch timeout works ||| unbatch timeout	count=1
module	shape of the ||| python ops	count=2
function	return ||| fit transform	count=2
class	this operator ||| operator scaled	count=1
module	and set the ||| python ops	count=1
function	if all are ||| check	count=1
arg	stopatstephook ||| num_steps last_step	count=1
function_arg	the stochastic tensors ||| stochastic nodes tensors	count=1
class	from ||| base estimator	count=1
function	parameters ||| optimize	count=1
function	accessing the underlying partition ||| iter	count=1
arg	[arg_1] elements ||| [arg_2] [arg_1]	count=4
class	[class_1] flow ||| [class_1] [class_2]	count=2
function	all are ||| hooks	count=1
function	the tfdbg [function_2] ||| [function_1] [function_2]	count=1
function	to their defs from ||| create nodes map	count=1
function	[function_1] of training ||| [function_2] [function_1]	count=4
function	a state saver ||| static state	count=1
function	to read [function_2] ||| [function_2] [function_1]	count=5
function	device ||| replica device	count=1
function	compute the cumulative sum ||| cumsum	count=1
module	previous output ||| contrib grid_rnn python	count=1
function	with [function_2] ||| [function_2] features [function_1]	count=3
function	tensor version ||| sample	count=1
function	linear_model_fn but ||| with model fn	count=2
class	update ||| second or step timer	count=1
function_arg	export the [arg_2] ||| [arg_2] [function_1]	count=2
arg	row to ||| row	count=1
function	dfs traversal of ||| dfs from node	count=1
function	reduce an image to ||| reduce to	count=1
function	constants of the same ||| to constants	count=1
class	the shape is ||| tensor shape	count=1
arg	serialized minibatch ||| serialized_sparse dtype rank	count=1
function	to have non-broadcastable shapes ||| broadcastable batch shape	count=1
class	return tensor ||| dirichlet	count=1
class	svm classifier with ||| svmtest	count=2
arg	annotation of an output ||| tst out list_tensors_enabled node_info_node_name	count=1
function	parameters used ||| parameters	count=1
function	repeat ||| repeat	count=2
function	serialize an n-minibatch ||| serialize many	count=1
class	the thread ||| looper thread	count=1
function	[function_1] distance to ||| [function_2] [function_1]	count=1
function	containing all the data ||| all resources	count=1
function	[function_1] mappers ||| [function_2] [function_1]	count=4
class	tests ||| batch ops test	count=1
arg	distributions ||| df loc scale validate_args	count=1
module	be found in ||| backend event_processing	count=1
arg	biases ||| biases	count=2
function_arg	boundary of ||| boundary ts ops	count=1
arg	from_proto [arg_2] ||| [arg_2] [arg_1]	count=1
function	into string ||| to string	count=1
function	versions ||| versions	count=2
function	int32 ||| event	count=2
function	every batch ||| batch	count=1
arg	feeds and fetches ||| fetches feed_dict	count=1
function_arg	pack [arg_2] ||| [arg_2] [function_1]	count=1
function	head [function_2] ||| [function_2] [function_1]	count=4
arg	of symbols to a ||| ids vocab_size embed_dim unique	count=1
module	inception ||| slim python slim nets	count=2
function_arg	[function_1] from op1 ||| [arg_2] [function_1]	count=1
function	get a [function_2] ||| [function_2] [function_1]	count=9
arg	second-order gradients ||| pool_func input_sizes output_sizes window_rows	count=1
function	non-batch kl ||| non batch kl	count=1
class	[class_1] t ||| [class_2] [class_1]	count=4
function_arg	[function_1] x ||| [arg_2] [function_1]	count=16
function	of ||| of	count=1
function	key [function_2] ||| [function_2] [function_1]	count=9
arg	to sequence model ||| decoder_inputs encoder_cell decoder_cell	count=1
arg	an estimator ||| cell_type num_units target_column problem_type	count=1
module	of any ||| ops	count=1
function_arg	[function_1] a graph ||| [arg_2] [function_1]	count=1
module	a ||| ops	count=1
arg	operators determined ||| operators	count=1
module	returns true if this ||| framework	count=1
module	parameter p ||| distributions python	count=1
function	based on self with ||| with	count=1
arg	batch of data ||| data	count=2
class	function into the ||| function	count=1
arg	fills in c_prev [arg_1] [arg_2] ||| c_prev [arg_1] [arg_2]	count=3
arg	input_fn diffs from the ||| x y batch_size num_epochs	count=1
arg	tensor numpy equivalent ||| tensor	count=1
arg	run and tag ||| run tag	count=8
function	file to a ||| file to	count=2
function	prints input and ||| show inputs	count=1
class	input [class_2] ||| [class_1] [class_2]	count=3
function	provided have invalid type ||| test invalid	count=2
function	the ||| caption to	count=1
function	op to ||| to hash bucket	count=1
function_arg	[function_1] a debug-dumped ||| [function_1] [arg_2]	count=4
function_arg	resnet-152 model [arg_2] ||| [arg_2] [function_1]	count=1
module	previous ||| grid_rnn python	count=1
function	[function_1] sparse_column_with_vocabulary_file ||| [function_2] [function_1]	count=2
function	match ||| filter ts from	count=1
module	as classes ||| learn estimators	count=1
class	head ||| head	count=3
module	each text ||| python keras preprocessing	count=1
arg	textlinereader ||| skip_header_lines name	count=1
arg	in c_prev [arg] ||| inputs c_prev [arg]	count=2
module_class	and [class_2] ||| [class_2] [module_1]	count=2
function	[function_1] [function_2] ||| [function_2] intersection [function_1]	count=2
class	tests ||| classifier test	count=14
arg	subgraph for this ||| dtype	count=1
function	get legend for ||| label legend	count=1
function	check on [function_2] ||| [function_2] [function_1]	count=1
class	satisfied ||| debug dump dir	count=1
function_arg	create an [arg_2] ||| [function_1] graph run_metadata ui_type [arg_2]	count=1
function	match the ||| from	count=1
class	rpc stack for tests ||| test	count=1
arg	provided evaluation ||| feed_fn	count=1
function	the command ||| command	count=1
function_arg	for converting [arg_2] ||| [arg_2] [function_1]	count=2
arg	for the given path ||| path	count=1
function	get a menuitem from ||| caption to	count=1
function	that accepts a state ||| static state	count=1
arg	sub-graphs ||| decoder_inputs initial_state cell scope	count=1
class	derived classes ||| linear operator derived class test	count=1
arg	side_effects for a ||| side_effects	count=1
function	the device name ||| get device name	count=1
function	extract the subgraph that ||| extract	count=1
function_arg	[function_1] gradients ||| [function_1] duplicate indices [arg_2]	count=2
function	a restricted linear ||| joint weighted sum from feature	count=1
function	field [function_2] ||| [function_1] [function_2]	count=5
function_arg	global [arg_2] ||| [function_1] step [arg_2]	count=1
arg	of lb [arg] ||| [arg]	count=1
module	from ||| debug cli	count=2
function	a tf cond that ||| cond	count=1
function	the cached ||| transitively outgoing cache	count=1
module	the vocabulary dictionary and ||| python learn	count=1
module	proper shape values then ||| python ops	count=1
function_arg	[function_1] by name ||| [function_1] [arg_2]	count=6
function	l2 regularization ||| l2regularization	count=1
arg	the non-audio parts of ||| sample_rate num_channels length_frames	count=1
function	linked ||| from	count=1
function	initialized from a ||| from	count=1
function	the feed types used ||| feed types	count=1
function	[function_1] pil ||| [function_1] [function_2]	count=1
arg	[arg_1] value tensor ||| [arg_1] [arg_2]	count=4
module	of equations with ||| contrib linalg python ops	count=1
arg	the params per shard ||| filename_tensor per_device	count=1
function	a stop [function_2] ||| [function_1] [function_2]	count=1
arg	body to the graph ||| body	count=1
function_arg	evaluation against [arg_2] ||| [function_1] [arg_2]	count=2
arg	satisfies ||| tester estimator_class	count=1
function	add ops to apply ||| resource apply	count=1
function	size of the ||| size	count=1
function	returns the value of ||| batch get value	count=1
function	[function_1] given rate ||| [function_2] [function_1]	count=1
function	[function_1] merge ||| [function_2] with fake quant [function_1]	count=1
function	completely runtime [function_2] ||| [function_1] [function_2]	count=1
module_class	ops created [class_2] ||| [class_2] [module_1]	count=1
function	gradient is correct for ||| grad	count=1
function	step update [function_2] ||| [function_2] [function_1]	count=8
function	signaturedef ||| from meta graph def	count=1
function	[function_1] for full ||| [function_2] [function_1]	count=2
function	types ||| dtypes	count=1
function_arg	[function_1] a named ||| [function_1] column [arg_2]	count=1
function	of this graph ||| as graph	count=1
function	ismethod ||| ismethod	count=1
function_arg	[function_1] on mapping ||| [arg_2] [function_1]	count=2
class	stop ||| session run context	count=1
function	linear [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] system implementation ||| [function_1] [function_2]	count=1
arg	an rgb image ||| image	count=1
module	the loaded module ||| tensor_forest hybrid python	count=1
function	[function_1] names haven't ||| [function_1] [function_2]	count=3
arg	corresponding to axis in ||| axis x_ndims	count=1
function	returns a header ||| get header from ops and kernels	count=1
function	node-status labels ||| node	count=1
function	input_fn ||| input fn	count=1
function	main page ||| request main page	count=1
function	classification ||| build standardized signature def classify classes only	count=1
function	sums of n-d ||| convolution	count=1
module	the length [module_2] ||| [module_1] [module_2]	count=1
function_arg	the mean [arg_2] ||| [arg_2] [function_1]	count=1
function	with [function_2] ||| [function_2] [function_1]	count=47
function	the variable scope ||| var scope	count=2
arg	activations ||| activations labels sequence_length target_column	count=3
function	string message ||| message	count=1
module	utility ||| keras applications	count=1
function	return the [function_2] ||| [function_1] output [function_2]	count=2
module	which ||| python framework	count=2
function	the standard services for ||| standard services	count=1
function_arg	a merge [arg_2] ||| [arg_2] [function_1]	count=2
module	lists of unique ||| ops	count=1
module	single ||| python learn estimators	count=1
function	results into [function_2] ||| [function_2] [function_1]	count=6
function	asset [function_2] ||| [function_1] [function_2]	count=4
function	returns the number ||| size	count=1
module	fails ||| util protobuf	count=1
module	of ||| python	count=31
function	some graph, returns ||| get	count=1
module	and previous output ||| contrib grid_rnn python ops	count=1
function	compatible with ||| compatible	count=1
class	the generator into ||| generator enqueuer	count=1
module_class	[module_1] adagrad ||| [module_1] [class_2]	count=6
function_arg	to minimize loss ||| minimize loss	count=1
module	s of a ||| python keras engine	count=2
arg	two ||| a b	count=2
module	returns the proto_type ||| framework	count=1
function	[function_1] attention and ||| [function_1] [function_2]	count=1
function	block that has ||| block	count=1
module	get list of ||| debug lib	count=1
class	table ||| interface	count=1
function_arg	docstring [arg_2] ||| [arg_2] [function_1]	count=1
module	function ||| framework	count=4
module	a ||| python	count=8
arg	the gputracer logging ||| device_name	count=1
function	for ||| assert valid sample	count=1
function	sequence of embeddings ||| embed sequence	count=1
function	batch ||| keyed batch	count=2
function	convert a list of ||| list	count=1
function	sigmoid cross entropy given ||| sigmoid cross entropy with logits	count=1
module_class	this staging ||| ops staging	count=1
arg	returns an exponential distribution ||| minval maxval seed	count=1
arg	targets from the replaced ||| target_ts replacement_ts dst_scope src_scope	count=1
class	test ||| backward run test	count=1
class	debugger ||| dumping	count=1
function	input options ||| input options	count=2
function	embeddings of ||| embedding	count=1
function	reshape [function_2] ||| [function_1] [function_2]	count=4
module	from ||| learn estimators	count=1
function	test phase and ||| test phase	count=2
arg	while maintaining the batch_size ||| outputs_collections	count=1
module	values then ||| ops distributions	count=1
function	[function_1] value models ||| [function_1] [function_2]	count=3
arg	i will correspond ||| sp_input perm	count=1
function	adds ||| add	count=27
function	the multivariate digamma function ||| digamma	count=1
function	def [function] adds it ||| tag [function] add meta	count=1
function	backprop loop that ||| back prop loop	count=2
function	[function_1] axis ||| [function_2] [function_1]	count=1
function	the control flow ||| get control flow	count=2
function	for input ||| input values	count=3
module	ids of ||| factorization python ops	count=1
function	for ||| init	count=1
function	a time [function_2] ||| [function_2] [function_1]	count=3
arg	rnncell cell ||| cell	count=1
module	disk ||| summary	count=1
function	tensorshape of batch ||| batch shape	count=3
function_arg	the variable [arg_2] ||| [arg_2] [function_1]	count=2
function	of the fetches used ||| fetches info	count=1
function	firsteventtimestamp() [function_2] ||| [function_1] [function_2]	count=2
arg	dirname ||| dirname	count=1
function	[function_1] items in ||| [function_2] [function_1]	count=1
function	number of scalars in ||| count params	count=1
function	postfix representation ||| spec structure	count=1
module	reduced ||| python slim nets	count=1
function_arg	[function_1] filewriter for ||| [function_1] [arg_2]	count=1
function	argument ||| matrix	count=1
function	returns list of ||| get	count=1
function	appropriate for serving ||| default serving	count=1
function_arg	[function_1] predictions with ||| [arg_2] [function_1]	count=2
class	node that yields a ||| record input	count=1
module	regression ||| learn python learn utils	count=1
class	stepper ||| node stepper	count=2
arg	v is something you ||| v	count=1
function	[function_1] max ||| [function_2] [function_1]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] loop switch [arg_2]	count=6
function	splits ||| split	count=1
module	estimate of ||| contrib bayesflow python ops	count=1
module	of ||| tensorboard	count=1
function	extract the [function_2] ||| [function_2] [function_1]	count=3
module	construct ||| contrib learn python learn learn_io	count=1
function	return the string message ||| purge message	count=1
arg	tensor with all elements ||| dtype name	count=1
module	unique to this input ||| python framework	count=1
class	don't have ||| files	count=1
function	specified invalid [function_2] ||| [function_1] [function_2]	count=3
class	initializes a dnnregressor ||| dnnregressor	count=1
class	grad state for the ||| state	count=1
function_arg	name [arg_2] ||| [function_1] [arg_2]	count=2
function	a layer ||| get layer	count=1
function_arg	given operation ||| call op	count=1
arg	import a ||| module_name function_name	count=1
arg	[arg_1] state ||| [arg_1] [arg_2]	count=1
module	simple ||| python ops	count=1
function	path to [function_2] ||| [function_2] files [function_1]	count=1
arg	weights [arg_2] ||| [arg_2] [arg_1]	count=4
function	1] ||| matrix data labels1d	count=1
function	proper ||| valid sample	count=1
function_arg	[function_1] minibatch ||| [arg_2] [function_1]	count=6
function	before ||| begin	count=1
class	1x1 kernel the ||| extract image patches	count=1
function	a ||| caption	count=1
function_arg	auc [arg_2] ||| [arg_2] [function_1]	count=1
module	if colocate_clip_ops_with_vars ||| opt python training	count=1
function	for all inputs of ||| inputs tensor	count=1
function_arg	[function_1] file ||| [arg_2] [function_1]	count=3
function	the broadcasted static ||| broadcast static	count=2
class	of the dense ||| sparse	count=1
function	from csv [function_2] ||| [function_1] [function_2]	count=4
module	all the ||| contrib graph_editor	count=8
function	[function_1] file with ||| [function_2] [function_1]	count=2
module	stochastic ||| contrib bayesflow python ops	count=1
arg	randomly selects [arg_2] ||| [arg_2] points [arg_1]	count=1
function	pooling [function_2] ||| [function_2] [function_1]	count=2
function_arg	[function_1] [arg_2] int list ||| [function_1] [arg_2]	count=4
arg	[arg_1] e g ||| [arg_1] [arg_2]	count=3
module	is where the ||| python	count=1
arg	predictions with [arg_2] ||| [arg_1] [arg_2]	count=2
function	should ||| keys should	count=1
function	-grad ||| erfc	count=1
function	the process which ||| pid	count=1
class	process ||| tensor flow code upgrader	count=1
function	tensors ||| filter ts from	count=1
arg	file with given names ||| filename	count=1
module	carlo estimate of an ||| ops	count=1
function	[function_1] and run ||| [function_2] [function_1]	count=1
module	add ||| python ops	count=3
arg	ready to ||| max_wait_secs	count=1
function	the collections ||| to collections	count=1
module	compilation of operators within ||| contrib compiler	count=1
module	loss to the training ||| ops losses	count=1
function	-grad ||| erfc grad	count=2
class	a random forest ||| random forest	count=1
module	make ||| tools	count=1
function	manual variable ||| manual variable	count=1
arg	x to zero at ||| x	count=1
function	tensor [function_2] ||| [function_2] table [function_1]	count=1
module	list of the ||| python ops	count=1
function	[function_1] sum ||| [function_2] [function_1]	count=10
class	to make sure we ||| test upgrade	count=1
function	export model ||| export	count=3
class	multivariate normal distribution ||| multivariate normal tri	count=1
function	inputs ||| inputs tensor	count=1
arg	variabledef for ||| export_scope	count=1
function	return the summary tensor ||| summary op	count=1
module	of name ||| contrib	count=1
function_arg	tile along [arg_2] ||| [arg_2] [function_1]	count=1
arg	runoptions ||| run_options	count=2
module	cell ||| rnn python	count=3
function	[function_1] [function_2] ||| python training optimizer [function_1] [function_2]	count=3
function	according to their ||| by	count=1
arg	with feeds [arg_2] ||| [arg_2] [arg_1]	count=4
arg	with rank 1 or ||| name	count=1
function	matrix ||| texts to matrix	count=1
function_arg	tensor if ||| tensor meta_graph_def_to_load	count=1
function	all the ||| from regex	count=1
function	the collection with ||| collection	count=2
function	representing a scalar ||| scalar	count=1
class	ast ||| tensor flow call visitor	count=1
function	get a ||| get fetch	count=1
class	batch ||| operator pdbase	count=1
module	labeled tensors ||| labeled_tensor python	count=3
class	scroll ||| scroll	count=1
class	in the place ||| graph	count=1
function	return [function_2] ||| [function_1] output [function_2]	count=1
class	plugin ||| plugin	count=3
arg	directory ||| path	count=1
arg	target ||| target decorator_func decorator_name	count=1
arg	linked to ops that ||| ops	count=1
function	to a relative ||| to	count=1
function	[function_1] weights ||| [function_1] [function_2]	count=14
arg	the filewriter for the ||| logdir	count=1
function	tfdbg ||| tfdbg	count=1
class	tests ||| sparse cross op test	count=5
arg	given dtype ||| shape dtype num_shards	count=1
function	file names ||| get file names	count=2
function	all possible input ||| all input	count=3
module	the length of ||| python ops	count=3
function	services ||| services	count=1
function	existing model ||| model	count=1
module	the collection of losses ||| python losses	count=1
function	remove any ||| remove	count=1
function	to extend the list ||| extend	count=1
module	that creates training and ||| contrib learn python learn	count=1
function	their defs from the ||| create nodes map	count=1
module	needed ||| metrics python ops	count=1
function	batch length ||| batch length	count=2
function	instantiates a model from ||| from	count=1
function	[function_1] search ||| [function_2] [function_1]	count=4
function	gradient for ||| add grad grad	count=1
function	integer weights ||| integer weighted sparse column succeeds for	count=1
function	16-layers ||| 16	count=1
arg	weights + biases ||| weights biases name	count=4
arg	(e g input_tensors) ||| attr_name	count=1
class	placeholders for the statistics ||| stats	count=1
function	[function_1] a list ||| [function_2] [function_1]	count=1
arg	log-probabilities ||| logits probs dtype	count=1
arg	of fetching a tensor ||| name target size	count=1
arg	the labels and ||| labels	count=6
function	sparsecolumns accept dense ||| sparse column accepts dense	count=1
function	works with a mix ||| mixed	count=1
function	returns the ||| get collection proto type	count=1
function	of predictions ||| predictions	count=2
function	is the block ||| block	count=1
function	names of ||| convert names	count=1
module_class	text [class_2] ||| [module_1] [class_2]	count=1
function	a tensor [function_2] ||| [function_2] to string table [function_1]	count=1
function	normalize ||| normalizer fn	count=1
function	[function_1] the value ||| [function_1] [function_2]	count=5
function	prune non-control [function_2] ||| [function_1] [function_2]	count=4
module	if colocate_clip_ops_with_vars ||| contrib opt python training	count=1
arg	create batches of examples ||| batch_size capacity	count=1
function	to the main page ||| test request main page	count=1
function	< ||| negative	count=1
class	check to make ||| test	count=1
arg	texts ||| texts mode	count=1
arg	the parameters ||| use_peepholes cell_clip	count=1
function	for partial run ||| partial run setup	count=1
function	of latest [function_2] ||| [function_2] [function_1]	count=2
module	a list of keras ||| contrib keras python keras	count=1
module	to tuples of ||| python ops	count=1
function	of bytes ||| bytes	count=1
function	tf ||| make server	count=1
arg	tensor ||| message name	count=1
function	log p x ||| with log	count=1
class	operator ||| operator identity	count=1
function	[function_1] static ||| [function_1] sample [function_2]	count=1
function	the jacobian ||| jacobian	count=1
class	without ||| utils test	count=1
class	calculates the truncated ||| truncated	count=1
function	[function_1] [function_2] ||| [function_1] checkpoint [function_2]	count=1
function	loads all [function_2] ||| [function_1] [function_2]	count=3
function	when one column ||| one column	count=2
function	single batch ||| on batch	count=5
function	computes the mean ||| mean	count=4
function	internal implementation of ||| internal	count=1
function	div operator ||| div	count=1
function	after broadcasting the leading ||| broadcast	count=1
function	all the variables ||| variables	count=1
function	older exports ||| exports	count=1
function	we ||| test	count=1
function	matrix [function_2] ||| [function_1] [function_2]	count=16
function	return the global_step tensor ||| global step	count=1
class	returns a dict that ||| head	count=1
arg	function to structure ||| apply_fn	count=1
function	error between the ||| error	count=4
function	a tf placeholder ||| make placeholder from	count=2
function	boolean ||| boolean	count=1
function	positives for ||| positive at k	count=4
arg	this input_fn diffs from ||| y batch_size num_epochs	count=1
function	[function_1] centered bias ||| [function_1] [function_2]	count=5
class	constructor of ||| curses ui	count=1
function	clips tensor values to ||| clip by	count=3
function	[function] speed between ||| [function] gru block vs	count=1
arg	tf graph and ||| graph	count=1
function	the end of ||| batch end	count=1
function	restore_variable_values() [function] ||| test [function] variable	count=2
function_arg	layer [arg_2] ||| [function_1] [arg_2]	count=1
module	into a list of ||| python	count=1
arg	a svstepcounterthread ||| sv sess step_counter	count=1
class	the debug op ||| debug	count=1
class	operator [class_2] ||| [class_1] [class_2]	count=1
function	[function_1] with ||| [function_1] [function_2]	count=36
arg	class log-probabilities ||| logits probs dtype	count=1
class	returns a ||| builder	count=1
class	vocabulary dictionary and ||| processor	count=1
function	mahalanobis distance to ||| distance to	count=1
function	pulls [function_1] [function_2] ||| [function_1] [function_2] map node_map	count=7
class	plugin ||| projector plugin	count=1
function	create ||| create analyzer	count=1
function	[function_1] backprop ||| [function_1] [function_2]	count=1
function	topologically-sorted list ||| sorted nodes	count=1
function	row factors ||| row factors	count=2
arg	and wait for ||| timeout	count=1
module	stochastic ||| bayesflow python ops	count=1
arg	name created [arg_2] ||| [arg_2] [arg_1]	count=2
function	computes sparse [function_2] ||| [function_1] [function_2]	count=1
class	reservoir using ||| reservoir	count=1
class	values will be produced ||| slices	count=1
function	feature tuples into ||| to	count=1
function	tensor ||| valid sample	count=1
function_arg	of replicas [arg_2] ||| [arg_2] [function_1]	count=1
function	produces [function_2] ||| [function_2] [function_1]	count=6
module	integers ||| python	count=1
function	function for converting objects ||| conversion function	count=1
module	1 ||| python ops	count=6
module	vocabulary based ||| preprocessing	count=1
module	the ||| dist_test python	count=1
function	trace information for a ||| store trace info	count=1
arg	to runoptions [arg_2] ||| [arg_1] [arg_2]	count=1
arg	variable based gradient multiplier ||| embedding_lr_multipliers collection_key input_layer_scope	count=1
arg	new value ||| value use_locking	count=2
module	the sense of vector ||| linalg python ops	count=3
function	with respect ||| precision at top k	count=2
function	rbf kernel given ||| rbf kernel	count=1
arg	and precision@k ||| labels predictions_idx	count=2
function	a [function_1] [function_2] ||| [function_1] [function_2]	count=18
module	that graph building doesn't ||| contrib tensor_forest hybrid python models	count=1
function_arg	wrt [arg_2] ||| [arg_2] [function_1]	count=3
function	returns the mode ||| mode	count=1
class	or tensor ||| tensor flow benchmark	count=1
function_arg	tensor if one ||| tensor meta_graph_def_to_load	count=1
function	get legend ||| label legend	count=1
function	to run() call history ||| run calls	count=1
class	base feature for ||| feature column	count=1
module_class	return the [class_2] ||| [module_1] [class_2]	count=6
arg	returns whether actual_tensor's ||| actual_tensor	count=1
function	returns the ||| add	count=1
module	and values in the ||| python feature_column	count=2
function	nodedef proto representing ||| node def	count=1
function_arg	stop [arg_2] ||| [arg_2] [function_1]	count=2
function	tensorflow graph with ||| graph with	count=2
function	ops that ||| regex	count=1
class	[class] canonical ||| [class]	count=1
module	tensor ||| python keras	count=14
function	the vocabulary dictionary and ||| transform	count=1
class	+rnn cell ||| intersection rnncell	count=1
arg	vocabulary dictionary and ||| x	count=1
function	this device is part ||| device	count=1
function	instantiates the vgg19 ||| vgg19	count=1
function	debug-wrapper session ||| session	count=1
arg	state ||| cell features labels	count=1
function	queries the shape ||| get shape	count=1
function	find dumped ||| find	count=1
function	returns the dtype ||| get dtype	count=3
function	step true [function_2] ||| [function_2] [function_1]	count=2
arg	distribution on r^k, ||| loc atol rtol validate_args	count=1
function	discards expired [function_2] ||| [function_1] [function_2]	count=1
class	with the ||| tfexample decoder test	count=1
class	initializes ||| forest estimator	count=1
class	sparse tensor in ||| sparse tensor	count=2
function	tf ||| columns from	count=1
function	[function_1] mask ||| [function_2] [function_1]	count=12
function	the sum of ||| add	count=1
function_arg	[function_1] [arg_2] ||| [function_1] at thresholds [arg_2]	count=1
class	tensor in ||| tensor flow benchmark	count=1
function	impose desired ||| impose	count=1
module	the next runge-kutta ||| contrib integrate python	count=1
function	whether a graph ||| is	count=1
function_arg	[function_1] prior on ||| [arg_2] [function_1]	count=2
function	calculates true positives ||| sparse true positive at	count=1
arg	activations from the ||| activations labels sequence_length target_column	count=3
function	adds a layer instance ||| add	count=1
function	the multiply layer ||| multiply	count=1
function	search ||| search from	count=1
module	a transform [module_2] ||| [module_2] [module_1]	count=3
function	rnn to loss ||| loss	count=3
arg	of an epoch ||| epoch	count=2
class	a text [class_2] ||| [class_2] [class_1]	count=1
arg	string record ||| record	count=1
function	check the ||| check	count=5
class	vocabulary after which new ||| categorical vocabulary	count=1
function	a param to init ||| init	count=1
function	[function_1] metricspec ||| [function_1] [function_2]	count=2
function	features and [function_2] ||| [function_2] [function_1]	count=3
function	captured input tensors by ||| get extra inputs	count=1
function	to initialize the ||| initialize	count=1
module	and ||| contrib	count=1
function	[function_1] vector ||| [function_2] [function_1]	count=7
function_arg	[function_1] [arg_2] ||| python ops [function_1] condition [arg_2]	count=5
function	summaries from ||| from	count=1
function	summary of ||| summary	count=2
arg	denominator ||| denominator name	count=2
arg	frequency-weighted mean ||| axes frequency_weights name	count=1
arg	based on featurecolumns ||| feature_columns num_outputs	count=1
module	tensor version ||| ops	count=1
module	a labeled tensor ||| contrib labeled_tensor python	count=1
class	init ||| op test	count=2
function	device on which ||| device	count=1
function	[function_1] discards expired ||| [function_1] [function_2]	count=3
function	[function_1] sparse id ||| [function_1] [function_2]	count=1
arg	[arg] is <= ||| numerator [arg]	count=3
function	kernel [function_2] ||| [function_2] [function_1]	count=7
function	typeerror otherwise ||| check	count=1
arg	value of ||| x value	count=1
function	[function_1] 'n' ||| [function_2] [function_1]	count=1
arg	xs ||| xs name	count=1
function	in [function] ||| test [function] biases	count=1
module	dictionary and ||| learn	count=2
function	[function_1] node of ||| [function_2] [function_1]	count=1
arg	these parameters ||| shape dtype initializer	count=3
function	cycling ||| cycling	count=2
function	process the [function_2] ||| [function_2] [function_1]	count=2
class	tests ||| bounding box op test	count=1
function	automatically packs arguments ||| autopacking	count=1
function	serializable version of the ||| def	count=1
function	a boolean series for ||| series	count=1
function_arg	batch [arg_2] ||| [function_1] queue [arg_2]	count=2
module	scroll ||| debug cli	count=1
arg	file with given names ||| filename tensor_names	count=1
module	learn ||| contrib learn	count=1
function	it is [function_2] ||| [function_2] [function_1]	count=4
arg	file_content ||| file_content	count=1
function	object created ||| proto	count=1
function	string_to_hash_bucket op to ||| to hash bucket	count=1
arg	deepconv2d ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
function	to ops that match ||| ts	count=1
module	kernel for ||| python ops	count=1
function	is both dense ||| dense	count=1
function_arg	[function_1] recall@k ||| [function_1] labels predictions_idx [arg_2]	count=8
function	tensor to use for ||| label tensor	count=1
module_class	step of [class_2] ||| [module_1] [class_2]	count=9
module	of underlying ||| python ops	count=1
function	log p ||| log joint	count=1
function	to values ||| values	count=1
function	train a model ||| train	count=1
module	iff this ||| python framework	count=1
module	of the ||| python ops	count=70
function	end of an ||| end	count=1
function	converts either [function] or unicode ||| [function]	count=1
arg	labels ||| labels weights metrics_collections	count=6
function	[function_1] sparsetensor ||| [function_2] [function_1] x	count=1
module	for proper shape ||| python ops distributions	count=1
function_arg	to create [arg_2] ||| [function_1] factors [arg_2]	count=3
function	you can save ||| train save load	count=1
arg	of num_unroll ||| num_unroll	count=1
function	history ||| history	count=1
module	auc ||| python ops	count=2
function	returns a list ||| get	count=1
module	name ||| python	count=1
function	verifies the ||| verify hand	count=1
arg	the gradients for ||| op grad	count=1
class	values then return ||| dirichlet	count=1
function_arg	converting [arg_2] ||| [function_1] function [arg_2]	count=2
function	as the initial ||| initial	count=1
function_arg	[function_1] tensor with ||| [function_1] cumsum [arg_2]	count=2
function	servers ||| servers one cluster	count=1
arg	[arg_1] keys ||| [arg_2] values [arg_1]	count=1
function	sparsesegmentsum ||| sparse segment sum	count=1
function	deepcopy ||| deep copy	count=5
module	a shape representing ||| python	count=1
function	step false [function_2] ||| [function_1] [function_2]	count=2
function	from the run ||| run	count=1
module	layer ||| keras python keras engine	count=7
module	proper shape values ||| python ops	count=1
arg	of data ||| data	count=2
function	tensor from an event ||| tensor from event	count=1
class	of ||| slices	count=1
function	is zlib library compatible ||| zlib read	count=1
arg	input tensors ||| tensors	count=1
module	a sequence-to-sequence ||| legacy_seq2seq python ops	count=1
function	a directory traversal attack ||| test directory traversal	count=1
function	op to fill the ||| op	count=1
function	runge-kutta [function] ||| runge kutta [function]	count=3
module	returns true iff this ||| framework	count=1
function	rgba ||| bounding box rgbacolor	count=1
arg	[arg_1] x ||| [arg_2] [arg_1]	count=14
module	specified by the given ||| slim python slim data	count=1
module	of int ||| ops	count=1
module	can be used to ||| python layers	count=1
arg	for threads [arg_2] ||| [arg_1] [arg_2]	count=1
arg	with a and b ||| a b name	count=1
function	its scope ||| from scope	count=1
function	predict method [function_2] ||| [function_2] [function_1]	count=5
arg	base_type ||| base_type	count=1
function	to sparse ||| sparse recall at	count=1
function	[function_1] [function_2] ||| [function_2] dump path [function_1]	count=2
module	a list of ||| layers python ops	count=1
function_arg	function [arg_2] ||| [function_1] [arg_2]	count=3
function	a doc ||| doc	count=1
arg	value ||| value decay weight	count=1
function	synthetic ||| synthetic	count=1
function	filter items in ||| filter items	count=1
arg	axis ||| x axis	count=6
function	a summary of a ||| summary	count=1
module	and runs a ||| learn python learn dataframe	count=1
arg	if self and other ||| other	count=1
module	dataframe with ||| python learn dataframe	count=1
arg	perform ||| orig_screen_output	count=1
module	the gradient of ||| tensor_forest hybrid python ops	count=3
arg	steps and ||| inputs noutput scope name	count=1
function	flip dims to reshape ||| flip	count=2
module	sequence of ||| preprocessing	count=1
function	search commands are ||| search	count=1
module	returns ||| copy_graph python util	count=1
function	weighted [function_2] ||| [function_2] [function_1]	count=8
function	[function_1] function that ||| [function_2] [function_1]	count=4
function	the insertion [function_2] ||| [function_2] [function_1]	count=4
function	to determine ||| predict classes	count=2
function	sparse_column_with_keys ||| sparse column keys	count=1
function	if all ||| hooks	count=1
class	shape values then ||| multinomial	count=1
function	convolution shapes ||| shapes	count=1
module	sure we don't ||| compatibility	count=1
function	by atrous ||| test atrous	count=2
function	can save and reload ||| train save	count=1
function_arg	context words ||| context context_words	count=1
function	can be turned into ||| can be regex	count=1
class	[class_1] for binary ||| [class_2] [class_1]	count=1
module	rnn cell ||| contrib rnn python	count=1
arg	given directory the paths ||| directory	count=1
function	predict and predict_prob methods ||| predict	count=1
function_arg	unary [arg_2] ||| [function_1] registered_name operation [arg_2]	count=1
module	lstm ||| python ops	count=1
function	a sparsetensor ||| sparse	count=2
function	switch op is ||| switch	count=1
arg	axis to ||| axis	count=1
function	returns the appropriate string ||| get	count=1
function	layer that is ||| layer	count=1
function	"operation" ||| using	count=1
arg	loss by updating var_list ||| loss global_step var_list gate_gradients	count=1
function	central ||| central	count=1
arg	[arg_1] starting from ||| [arg_1] [arg_2]	count=4
module	a shape ||| python	count=1
function	end of ||| epoch end	count=1
function	scan on the ||| scan	count=1
function	invalid indices in ||| by invalid indices	count=2
module	that ||| contrib graph_editor	count=2
function	tall [function_2] ||| [function_1] [function_2]	count=2
arg	on [arg] but ||| [arg]	count=1
function	placeholder ||| placeholder with tensor	count=1
function	gets the asset tensors ||| get asset tensors	count=1
function	[function_1] factor shards ||| [function_2] [function_1]	count=4
function	generates the [function_2] ||| [function_2] [function_1]	count=3
function	ops that match the ||| from	count=1
function_arg	experiment [arg_2] ||| [arg_2] [function_1]	count=2
function	calculates true [function_2] ||| [function_1] [function_2]	count=2
function	a concat [function_2] ||| [function_2] [function_1]	count=3
module	check to ||| compatibility	count=1
module	run the cell and ||| rnn python ops	count=1
arg	the labels and predictions ||| labels predictions dim	count=1
class	the underlying ||| base	count=2
module	1 outcome (vs 0) ||| distributions	count=1
class	creates ||| data provider	count=1
function	[function_1] of source ||| [function_2] [function_1]	count=2
arg	make sure the ||| master config wait_for_checkpoint	count=1
arg	rate ||| rate validate_args allow_nan_stats name	count=1
class	dilation function ||| dilation test	count=1
arg	extracts a ||| input_ begin end	count=1
arg	[arg_1] [arg_2] ||| [arg_1] [arg_2] validate_args	count=7
function	get all the ||| filter	count=1
arg	the parameters for ||| num_units use_peepholes share_time_frequency_weights cell_clip	count=1
function	the save [function_2] ||| [function_1] [function_2]	count=3
arg	split dims [arg_2] ||| [arg_1] [arg_2]	count=1
module	session and runs ||| learn dataframe	count=1
function	return tensor ||| assert	count=1
module	sequence-to-sequence model with ||| legacy_seq2seq	count=1
function	split feature tuples into ||| features to	count=1
function	from caller ||| caller	count=1
module_class	[module_1] [class_2] ||| [module_1] conditional accumulator [class_2]	count=1
function	dictionary and ||| fit transform	count=1
function	op to use based ||| to hash bucket	count=1
arg	tensor ||| tensor dtype name optimize	count=1
function	verifying the output ||| adjust	count=1
class	no rich attributes ||| rich line	count=1
module	embedding projector ||| contrib tensorboard plugins projector	count=1
function_arg	returns the op that [function_1] [arg_2] ||| hybrid python hybrid model [function_1] [arg_2] data_spec	count=3
class	dilation ||| dilation	count=1
class	converts a hparams object ||| hparams	count=1
function	[function_1] length ||| [function_1] [function_2]	count=5
arg	is executed during ||| run_context	count=2
function	timestamp of ||| timestamp	count=1
module	the ||| contrib distributions python ops	count=2
arg	given examples [arg_2] ||| [arg_2] [arg_1]	count=4
function	wrapper for [function_2] ||| [function_2] [function_1]	count=2
arg	the estimated size ||| print_info	count=1
arg	predictions ||| predictions dim	count=1
arg	with concentration [arg_2] ||| [arg_2] [arg_1]	count=2
arg	computes the unnormalized ||| inputs tag_indices sequence_lengths transition_params	count=1
function	[function_1] linear-only model ||| [function_2] [function_1]	count=2
function	[function_1] with ||| [function_2] [function_1]	count=37
module	menuitem from the ||| debug	count=1
function	of running an op ||| benchmark run op	count=1
function	is [function_2] ||| [function_2] [function_1]	count=5
function	original ||| original	count=3
function	iff the [function_2] ||| [function_1] [function_2]	count=4
function	one evaluation against the ||| do eval	count=1
function	graph and ||| freeze graph	count=1
function	to a specified ||| to	count=1
module	of this ||| contrib linalg python ops	count=3
class	the current context ||| cond context	count=1
class	should ||| graph rewriter	count=1
function	for logistic regression ||| make logistic	count=1
arg	to labels tensor ||| labels	count=4
function	less than the given ||| below	count=1
arg	convert ||| check_graph allow_graph ignore_ts	count=1
function	slot named "name" created ||| get slot	count=1
module	of every ||| distributions python ops	count=1
function	zoom ||| zoom	count=1
arg	returns it ||| value	count=1
arg	the condition x ||| x	count=4
function	linear_model_fn but returns ||| fn with model fn ops	count=2
function_arg	a sparsetensor [arg_2] ||| [arg_2] [function_1]	count=1
function	x to a matrix ||| to matrix	count=1
module	returns ||| feature_column	count=2
module	each ||| keras	count=2
function	it is [function_2] ||| [function_1] [function_2]	count=4
class	insertion ||| queued sequence batch	count=1
arg	a config ||| config	count=1
function	the switch for a ||| switch	count=1
function	initial [function_2] ||| [function_2] [function_1]	count=3
module	method for determining the ||| contrib keras python	count=1
function	other subclassses of ||| test interactive	count=1
function	the border ||| border	count=1
module	of equations ||| ops	count=1
module	returns ||| contrib layers python	count=1
module	returns number of ||| distributions python ops	count=2
function	[function_1] run() ||| [function_1] [function_2]	count=3
function	computes a safe ||| safe	count=1
function	int64 representing the shape ||| shape	count=1
arg	text lines ||| lines	count=1
arg	from the given state ||| state	count=1
module	broadcasted ||| python ops	count=2
arg	op if colocate_gradients_with_ops ||| op colocate_gradients_with_ops	count=3
function_arg	numpy [arg_2] ||| [function_1] [arg_2] num_threads enqueue_size	count=1
function	run the ||| run	count=4
function	return a single ||| get single	count=1
module	loss to the ||| losses	count=3
module	of one or ||| ops	count=1
module	and then the ||| python ops	count=1
module	library and return the ||| python	count=1
function	works fine [function] integer type ||| test integer [function]	count=1
arg	control_inputs [arg_2] ||| [arg_2] [arg_1]	count=1
function	an exportstrategy instance is ||| make parsing export strategy	count=1
module	summaries ||| python summary	count=1
function	of tensor or ||| n to tensor or	count=1
module	keras variable ||| keras	count=1
function	same as linear_model_fn but ||| fn with model fn	count=2
module_class	in specific indices [module_1] [class_2] ||| [module_1] [class_2]	count=2
function	number of nodes ||| size	count=1
module	the 5 inputs of ||| python ops	count=1
arg	an output tensor and ||| output	count=1
function	input tensor ||| input	count=1
arg	maps a ||| mapping default_value	count=1
function_arg	[function_1] n elements ||| [function_1] [arg_2]	count=2
function	read queue batch and ||| read batch	count=1
arg	to sequence ||| encoder_inputs decoder_inputs encoder_cell decoder_cell	count=1
function_arg	depending on [arg_2] ||| [function_1] [arg_2]	count=1
function	batchwise temperature ||| temperature	count=1
class	multivariate normal distribution on ||| multivariate normal linear operator	count=1
module	validate ||| debug cli	count=1
function	intersection of a forward ||| intersection ops	count=1
function	[function_1] extraction by ||| [function_2] [function_1]	count=2
module	move ||| distributions python ops	count=1
function_arg	[function_1] f ||| [function_1] loop [arg_2]	count=1
function	[function_1] index ||| [function_2] [function_1]	count=5
function	to run() ||| run calls	count=1
function_arg	outputs of [arg_2] ||| [function_1] [arg_2]	count=5
module	regression ||| python layers	count=1
module	a dataframe ||| contrib learn python learn dataframe	count=1
function	node-status labels ||| label	count=1
module	format of ||| cudnn_rnn python ops	count=2
class	in the history ||| history	count=1
function	values for given ||| values	count=1
module	a dataframe with ||| learn python learn dataframe	count=1
module	of a ||| python ops	count=44
function_arg	cell [arg_2] ||| [function_1] [arg_2]	count=3
function_arg	decodes the [arg_2] ||| [function_1] example [arg_2]	count=1
module	a cross-entropy loss ||| ops losses	count=1
function	with attention ||| attention seq2seq	count=1
class	ops from the graph ||| graph	count=1
arg	gradient for selfadjointeigv2 ||| grad_e grad_v	count=1
class	of text ||| rich text lines	count=1
module_class	[module_1] was opened ||| [module_1] [class_2]	count=1
module	[module_1] cell ||| [module_2] [module_1]	count=11
class	for the head ||| head	count=1
function	16-layers version d ||| 16	count=1
module	the proto_type for ||| framework	count=1
function	of numpy arrays ||| numpy	count=1
class	returns ||| summary writer	count=1
function	the same embedding ||| shared embedding	count=1
function	[function_1] add ||| [function_1] [function_2]	count=8
function	shape values then return ||| assert valid	count=1
arg	a state-saving ||| sequence_features context_features sequence_feature_columns num_unroll	count=1
function	time interval to a ||| time interval	count=1
function	sure we don't ||| test	count=1
class	finalize ||| search decoder	count=1
function	to a richtextlines object ||| lines from rich	count=1
module_class	[module_1] greedyembeddinghelper ||| [module_1] [class_2]	count=4
function	of file names from ||| file names	count=1
arg	control_inputs and [arg_2] ||| [arg_2] [arg_1]	count=1
module	the name ||| python framework	count=1
arg	reduce images ||| images	count=1
class	only ||| export utils	count=1
function_arg	[function_1] that broadcasts ||| [function_1] [arg_2]	count=4
arg	a externally defined ||| loss_collection	count=1
function_arg	adds a [arg_2] ||| [arg_2] [function_1]	count=2
function	creates placeholders [function_2] ||| [function_1] [function_2]	count=1
function_arg	[function_1] y ||| [function_1] [arg_2]	count=6
function	self-adjoint ||| self adjoint	count=1
arg	given in input ||| inputs sequence_length beam_width	count=1
function	[function_1] a slice ||| [function_2] [function_1]	count=2
module	dictionary and ||| contrib learn python	count=1
function	elements as tf sparsetensor ||| tf sparse	count=1
arg	pads the 2nd and ||| x padding	count=1
function	scope ||| scope	count=15
module	dimensions of this ||| ops	count=2
function	name for ||| name	count=3
function	works fine [function] ||| test integer [function]	count=2
function	then ||| sample	count=1
module	specified by the given ||| python slim data	count=1
function	compressed histograms ||| compressed histograms	count=6
function	is an ||| allowing	count=1
function	[function_1] positives for ||| [function_1] [function_2]	count=12
function	function details ||| build function details	count=2
module	by a ||| python ops	count=1
module_class	[module_1] [class_2] ||| [module_1] node [class_2]	count=1
arg	v is something ||| v	count=1
function	a list [function_2] ||| [function_1] [function_2]	count=3
function	random spatial ||| random	count=2
module	get all ||| contrib graph_editor	count=1
function	have no [function_2] ||| [function_2] [function_1]	count=1
function	normalization ||| norm op	count=2
function	and return indexies of ||| transform	count=1
arg	tensor in tensor_list ||| tensor_list num_epochs shuffle	count=1
function_arg	[function_1] runoptions ||| [function_1] watch [arg_2]	count=3
module	dictionary ||| contrib	count=1
arg	[arg_1] cell ||| [arg_2] [arg_1]	count=4
function	real valued features of ||| real valued	count=1
function	is zlib library compatible ||| zlib	count=1
function	specify a fixed ||| fixed	count=1
class	accumulator ||| accumulator	count=4
arg	by randomly shuffling conditionally-enqueued ||| min_after_dequeue	count=1
function	and compute param += ||| assign add fetch	count=1
function_arg	boundary [arg_2] ||| [arg_2] [function_1]	count=4
module	all ops ||| python ops	count=1
function	and process the ||| process	count=1
function	have ||| same	count=1
function	decoding on the ||| decoder	count=2
arg	row and ||| cls rows cols	count=1
function	then return ||| assert valid sample	count=1
function	estimate data distribution as ||| estimate data distribution	count=1
function	all input ||| input	count=1
function	valid task indices in ||| task indices	count=1
arg	the encoded ||| image_format image_shape	count=1
function	with other columns ||| and other columns	count=2
module	of rank 2 "a" ||| python ops	count=1
function	prepares features config from ||| spec for parsing	count=1
class	for ||| node stepper	count=1
function	all the tensors linked ||| ts from	count=1
arg	make sure the model ||| master config wait_for_checkpoint	count=1
function_arg	[function_1] region ||| [arg_2] [function_1]	count=3
module	that creates training and ||| learn	count=1
function	horizontally left to right ||| left right	count=1
arg	results accounting for ||| embedding_weights sparse_ids sparse_weights combiner	count=1
function_arg	[function_1] subsequent __call__s ||| [function_1] [arg_2]	count=4
function_arg	[function_1] [arg_2] only depends on ||| [function_1] [arg_2]	count=6
function	fingerprint concatenation has no ||| hashed output v2 has no	count=1
class	a condcontext ||| cond context	count=2
function	evaluation metrics [function_2] ||| [function_1] [function_2]	count=1
function	random spatial shear ||| random shear	count=3
module	vocabulary dictionary and ||| python	count=1
arg	a _docstringinfo ||| py_object relative_path_to_root reference_resolver	count=1
function	list the ||| list	count=2
module	the tfprof ||| python tools tfprof	count=1
function	provided fixed ||| fixed unigram	count=1
function	batch and ||| keyed batch	count=1
function_arg	an attribute [arg_2] ||| [arg_2] [function_1]	count=2
function	the max [function_2] ||| [function_2] [function_1]	count=4
module	cell and ||| contrib rnn	count=2
function	from the ||| take	count=1
function_arg	a conv [arg_2] ||| [arg_2] [function_1]	count=1
class	a longer rich line ||| rich line	count=1
function	a safe [function_2] ||| [function_1] [function_2]	count=3
function	weighted cross-entropy [function_1] [function_2] ||| [function_2] [function_1]	count=3
function	to a [function_2] ||| [function_1] [function_2]	count=13
function	node name ||| node name	count=2
function	[function_1] names ||| [function_1] [function_2]	count=15
function	integer ||| integer	count=3
function_arg	[function_1] [arg_2] ||| [function_1] batch paddings input_shape [arg_2]	count=4
function	an op for training ||| training op	count=2
function	loss ||| calculate loss	count=2
function	string_to_hash_bucket op to use ||| string to hash bucket	count=1
class	write ||| text lines	count=1
function	run() for ||| run	count=1
function_arg	[function_1] in collectiondef ||| [function_1] [arg_2]	count=4
function	tf placeholder for ||| make placeholder from dtype and	count=1
function	ops ||| ops	count=10
function	list of the names ||| fetch names	count=1
function	[function_1] [function_2] ||| [function_1] dense column [function_2]	count=4
function	[function_1] a full ||| [function_1] [function_2]	count=2
function	new seed ||| gen new	count=1
module	sequence of integers ||| contrib	count=1
function	a dict ||| dict	count=3
module	dimensions of this ||| linalg python ops	count=1
arg	in batch-ready form ||| min_rank event_ndims	count=1
function	this is the diagonal ||| diag	count=1
class	variables ||| partitioned variable	count=1
class	node-status labels ||| node stepper cli	count=1
arg	protocol buffer with a ||| collections	count=2
function	calls model [function_2] ||| [function_1] [function_2]	count=4
function	writes [function_2] ||| [function_2] [function_1]	count=1
function	erase ||| erase	count=1
function	a non-reference dtype based ||| base	count=1
module	of classes ||| distributions python ops	count=2
class	the table ||| table	count=2
arg	a microbenchmark ||| target iters	count=2
class	the operation that failed ||| op error	count=1
module	first ||| contrib layers python layers	count=1
arg	activations from the rnn ||| activations labels sequence_length target_column	count=3
module	learn ||| preprocessing	count=1
function	shape of ||| output shape	count=1
class	random [class_2] ||| [class_2] [class_1]	count=1
class	an audio ||| decode audio op test	count=1
function	deprecated ||| deprecated	count=2
function_arg	for serving [arg_2] ||| [arg_2] [function_1]	count=1
function	aliases of the input ||| aliases	count=1
function	typeerror ||| type	count=1
function	for a tag sequence ||| crf sequence	count=1
class	creates ||| big query server	count=1
function_arg	from a [arg_2] ||| [arg_2] [function_1]	count=1
class	produced or none ||| indexed slices	count=1
function	get all ||| from	count=1
function	close the current ||| close	count=1
function	integer [function_2] ||| [function_1] [function_2]	count=5
module	instance ||| learn estimators	count=4
module	this ||| seq2seq python ops	count=1
function	tensor or an ||| tensor or	count=1
class	watcher ||| directory watcher test	count=1
arg	sequence ||| decoder_inputs encoder_cell decoder_cell	count=1
class	class [class_2] ||| [class_1] [class_2]	count=1
function	to a contatenated list ||| to	count=1
class	a ||| lazy builder	count=2
module	tensor for the ||| python	count=1
class	a random [class_2] ||| [class_1] [class_2]	count=1
function	[function_1] absolute error ||| [function_2] [function_1]	count=2
function	get ||| get classification	count=1
module	previous ||| grid_rnn	count=1
function	then return tensor version ||| assert	count=1
arg	or grayscale ||| contrast_factor	count=1
function	computed [function_2] ||| [function_1] [function_2]	count=1
arg	oldpath to [arg_2] ||| [arg_2] [arg_1]	count=1
arg	the output ||| tensor_in_sizes	count=4
module	predict total sum of ||| ops	count=1
function	[function_1] a batch ||| [function_1] [function_2]	count=1
module	a list of tensor ||| layers python ops	count=1
function	labels outside ||| three labels	count=3
function	dropout ||| recurrent dropout	count=1
function	end of a ||| on batch end	count=1
function	applies batch normalization on ||| batch normalization	count=1
function_arg	print [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	[function_1] tree representing ||| [function_1] spec [arg_2]	count=1
function_arg	to train [arg_2] ||| [arg_2] [function_1]	count=2
class	the wrapper ||| wrapper	count=1
function	key used for ||| key	count=1
function	of indices ||| index	count=3
function	matmul [function_2] ||| [function_1] [function_2]	count=3
function	randomly ||| random	count=3
arg	of a set of ||| ops	count=1
arg	[arg_1] partitions ||| [arg_2] [arg_1]	count=1
function	split feature tuples into ||| to	count=1
arg	storing [arg_2] ||| [arg_2] [arg_1]	count=1
function	the resultant of ||| compute elemwise op output	count=1
module	of tensors that ||| python ops	count=3
function	global step update ||| global step	count=8
arg	read feature_values ||| feature_values	count=1
class	node-status ||| node stepper	count=1
function	the given filter ||| filter	count=1
module	match the ||| contrib	count=1
function	[function_1] a string ||| [function_2] [function_1]	count=6
module	command ||| debug	count=1
function	handler for ||| handler	count=1
function	tuples into [function_2] ||| [function_2] [function_1]	count=4
function_arg	[function_1] nonlinearity ||| [function_1] [arg_2]	count=1
function_arg	input function [arg_2] ||| [function_1] x target_key [arg_2]	count=1
class	woodbury ||| lplus vdvtlightweight operator pd	count=1
function	before [function_2] ||| [function_2] [function_1]	count=1
function	combined ||| combined	count=3
module	of ||| contrib bayesflow python ops	count=2
function_arg	[function_1] string record ||| [arg_2] [function_1]	count=1
function	invert the [function_2] ||| [function_1] [function_2]	count=1
arg	logits and labels ||| _sentinel labels logits	count=1
function	dict or tensor ||| prediction	count=1
function	dask dataframe [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] by atrous ||| [function_2] values [function_1]	count=8
module	of name to ||| python ops	count=1
function	up [function_2] ||| [function_2] [function_1]	count=6
function	linked to ops that ||| ts from regex	count=1
module	set of ||| framework python ops	count=1
function	and match with registered ||| and	count=1
module	a batch of ||| ops distributions	count=3
function	values ||| compare fwd values	count=1
function	if all are ||| hooks type	count=1
function	standard services for ||| standard services	count=2
function_arg	metagraphdef [arg_2] ||| [function_1] filename [arg_2]	count=2
function	the gradients for ||| grad	count=1
function	returns the ||| collection	count=1
function	mean relative error ||| streaming mean relative error	count=1
module	of vectors matrices and ||| python ops	count=1
function	return dict symbol ||| build	count=1
function	converting objects ||| conversion	count=1
module	find ||| contrib graph_editor	count=1
module	[module] float ||| [module]	count=2
module	ops [module_2] ||| [module_2] [module_1]	count=3
module	and return the ||| python	count=1
function	[function_1] the parameters ||| [function_2] [function_1]	count=2
function	overriding tensor values ||| then remove override	count=1
function	phase to a fixed ||| phase	count=1
function_arg	[function_1] graph element ||| [arg_2] [function_1]	count=9
function	[function_1] dynamic ||| [function_2] [function_1]	count=6
function	[function_1] default_value ||| [function_1] [function_2]	count=1
function	from [function_2] ||| [function_1] [function_2]	count=16
arg	token ||| token	count=2
class	an event file ||| event	count=1
module	adds ||| python ops	count=1
class	construct ||| kernel linear classifier	count=1
function	indexies ||| fit	count=1
function	watch_fn ||| dumping with watch	count=1
function	[function_1] for linear ||| [function_2] [function_1]	count=4
function	for ops [function_2] ||| [function_1] [function_2]	count=1
function	returns -grad ||| erfc	count=1
module	learn the ||| contrib learn python	count=1
function	number of bytes ||| bytes	count=1
function	with [function_2] ||| python layers sparse column [function_1] [function_2] column_name vocabulary_file num_oov_buckets vocab_size	count=1
function	the derivatives for bilinear ||| bilinear	count=1
function	list of tensor objects ||| n to tensor	count=2
function	invalid indices in a ||| by invalid indices	count=1
function	resets ||| reset	count=1
module	the name of the ||| python	count=1
module_class	[module_1] [class_2] canonical format ||| [module_1] [class_2] params	count=4
function	attempt to extract command ||| get command	count=1
function	[function_1] examples to ||| [function_2] [function_1]	count=1
module	systems of linear ||| ops	count=1
function	version ||| assert	count=1
class	operation that failed if ||| error	count=1
module	returns a tensor with ||| contrib keras python keras	count=1
function	from the ||| guide index	count=1
function	csv file without a ||| csv without	count=1
function	required ||| required	count=1
module	for determining the ||| contrib keras python	count=2
function	linear operator from ||| operator	count=1
function_arg	[function_1] along ||| [arg_2] [function_1]	count=1
function	make ||| test	count=1
function	from ||| infer	count=1
module	text ||| contrib keras	count=1
function	with [function_2] ||| [function_2] valued features [function_1]	count=2
module	a tensor with ||| python keras	count=1
function	with given [function_2] ||| [function_1] [function_2]	count=6
module	if ||| learn datasets	count=1
arg	for recording ||| name iters cpu_time wall_time	count=1
function	loop that ||| loop	count=1
module	event file to disk ||| python summary	count=1
module	mnist dataset ||| keras datasets	count=1
function	of dtypes for each ||| dtypes	count=2
arg	logits and ||| logits	count=1
function	create [function] ||| get or make [function]	count=3
function_arg	add val to ||| add value val	count=1
module	the cell ||| contrib rnn python	count=2
module	flatten ||| python debug lib	count=1
function	multiple batched ||| multiple batch	count=1
class	check to make ||| upgrade	count=1
module	manual ||| python keras	count=1
function	find latest event file ||| latest event file	count=1
module	return [module_2] ||| [module_1] [module_2]	count=2
function	init ||| init op	count=3
arg	convolution function ||| filter_in_sizes stride padding	count=2
function	a sentinel event for ||| sentinel event	count=1
arg	tensor with all ||| tensor dtype	count=1
function	the values in ||| output values	count=2
module	of load() ||| event_processing	count=1
function	learn ||| fit transform	count=2
function	variance of ||| var	count=1
function	[function_1] and ||| [function_1] bias [function_2]	count=2
module_class	a new proximal ||| python training proximal	count=1
function	the partitioned [function_2] ||| [function_1] [function_2]	count=1
arg	an op that performs ||| data data_spec	count=1
function	display main ||| display main	count=1
module	linked ||| contrib graph_editor	count=2
function_arg	batches the [arg_2] ||| [function_1] function [arg_2]	count=2
class	for ||| predict output	count=2
function	recipient of the given ||| node recipients	count=1
function	[function_1] determinant ||| [function_2] [function_1]	count=3
module	the tensorshape representing the ||| python framework	count=1
function	a list of tensor ||| to tensor	count=3
arg	the provided series, producing ||| input_series	count=1
arg	calculation in grad_fn if ||| func grad_fn	count=1
function	step false positives ||| false positive at	count=1
function	node [function_2] ||| [function_2] fake quant [function_1]	count=1
function	generate class predictions for ||| predict classes	count=1
function	runs [function_2] ||| [function_2] [function_1]	count=6
class	an audio ||| audio op test	count=1
class	of the optimizer from ||| optimizer	count=1
module	labeled tensor ||| labeled_tensor python	count=1
function	[function_1] default graph ||| [function_2] [function_1]	count=2
function	shape when ||| shape	count=1
function	shape=[2] ||| two	count=3
function	produces ||| input producer	count=1
class	dnnregressor ||| dnnregressor	count=1
class	of this shape or ||| tensor shape	count=2
module	a specific format of ||| python ops	count=2
arg	take a ||| text_arr	count=1
function	[function_1] signaturedef ||| [function_2] [function_1]	count=2
module	of tensors ||| linear_optimizer python ops	count=1
function	[function_1] a control ||| [function_2] [function_1]	count=1
function	-> _guideref from the ||| index	count=1
function	linear operator from a ||| operator	count=1
function	the root mean ||| streaming root mean	count=2
function	exit op are ||| exit	count=1
function	a sparse integer column ||| sparse int column	count=1
function	computes the [function_2] ||| [function_2] [function_1]	count=3
function	generate a list ||| list	count=1
function	restricted linear ||| joint weighted sum from feature columns	count=1
function	rank in ||| rank tensor	count=1
function	default signature to object ||| default signature to signature	count=1
module	training and ||| contrib learn python learn ops	count=1
function	metagraphdef to ||| meta graph	count=1
function	-> ||| build guide	count=1
function	in the collection with ||| collection ref	count=1
module	batch matrix representing this ||| contrib linalg python ops	count=1
function	a nonexistent tensor ||| list tensor nonexistent	count=1
function_arg	value [arg_2] ||| [arg_2] [function_1]	count=2
function	[function_1] around ||| [function_1] [function_2]	count=3
module	for proper shape ||| ops distributions	count=1
function	the input [function_2] ||| [function_2] [function_1]	count=4
function	time ||| readable time	count=1
arg	name [arg_2] ||| [arg_1] [arg_2]	count=1
arg	sequence to sequence ||| encoder_inputs decoder_inputs encoder_cell decoder_cell	count=1
module	return indexies of ||| python learn preprocessing	count=1
class	check ||| operator identity	count=2
arg	from the given state ||| state scope	count=1
module	used by the ||| python layers	count=1
function	depth ||| depth	count=2
function	retrieve the python traceback ||| node traceback	count=1
function	asserts that ||| assert	count=3
function	connect the ||| connect	count=1
function	equiv [function_2] ||| [function_2] [function_1]	count=12
class	test ||| subscribe test	count=1
function_arg	[function_1] these parameters ||| [function_1] [arg_2]	count=10
function	download the ||| download	count=1
arg	model of [1] see ||| inputs num_classes is_training global_pool	count=3
module	sequence of integers ||| contrib keras	count=1
class	saver ||| saver	count=1
function	returns ||| collection proto	count=1
function	typeerror ||| check hooks	count=1
arg	a given node ||| node	count=1
function	a safe mean of ||| safe mean	count=1
function	conversion functions [function_2] ||| [function_2] [function_1]	count=3
function_arg	[function_1] side_effects ||| [arg_2] [function_1]	count=1
function	can handle rpc tracing ||| with rpcs	count=1
module	output tensors that with ||| python learn	count=1
function	the rows indicated ||| select rows	count=1
arg	on col_seq ||| col_seq	count=2
module	a given number ||| learn	count=1
class	registry ||| text summary plugin asset	count=1
module	returns ||| contrib copy_graph python util	count=1
function	placeholders [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] full ||| [function_2] batch [function_1]	count=1
function	symbol name -> _guideref ||| build guide	count=1
function	the block that ||| block	count=1
function	specificity ||| specificity	count=1
class	dtype based ||| dtype	count=1
function	nodes after [function_2] ||| [function_2] [function_1]	count=3
module	and session and runs ||| learn python learn	count=1
function	exception if self ||| assert has	count=1
arg	using class log-probabilities ||| logits probs	count=1
function	[function_1] full name ||| [function_1] [function_2]	count=1
module	together ||| contrib batching python ops	count=2
function	name -> _guideref from ||| build guide index	count=1
function_arg	[function_1] entire contents ||| [arg_2] [function_1]	count=1
function_arg	[function_1] returns it ||| [function_1] [arg_2]	count=2
arg	satisfies the ||| tester estimator_class	count=1
function	return tensor ||| valid sample	count=1
arg	control_inputs and ||| control_inputs	count=1
arg	their norms ||| use_norm	count=1
function	tensorflow session ||| session	count=1
arg	formatted style ||| tensor_label include_metadata np_printoptions	count=1
function_arg	[function_1] [arg_2] ||| ops elbo [function_1] [arg_2]	count=2
function	[function_1] header ||| [function_2] [function_1]	count=1
function	random input [function_2] ||| [function_1] [function_2]	count=1
module	that creates training and ||| learn ops	count=1
function	filter ||| filter	count=7
function	recurrent neural network ||| dynamic	count=1
module	transforms each text ||| keras preprocessing	count=1
function	path from ||| path	count=1
arg	labels into ||| labels	count=1
module	distributed floating ||| specs	count=1
function	a list ||| line list	count=1
module_class	representing this [class_2] ||| [module_1] [class_2]	count=2
module	list of ||| layers python ops	count=1
function_arg	[function_1] [arg_2] ||| [function_1] filename [arg_2]	count=4
function	shape values then return ||| maybe assert valid sample	count=1
function	to verify that ||| verify	count=2
function	files with ||| files	count=1
module	session and ||| learn dataframe	count=1
module	in the sense of ||| linalg python	count=2
function	[function_1] stepper ||| [function_1] [function_2]	count=1
function	[function_1] [function_2] ||| [function_1] forward [function_2]	count=3
arg	depending [arg] ||| [arg] x y	count=1
function_arg	[function_1] an object ||| [function_1] type [arg_2]	count=1
function	tall output ||| tall output page down	count=1
arg	it ||| value dtype name	count=1
arg	convert values ||| values	count=1
arg	fills in [arg_1] [arg_2] ||| [arg_1] [arg_2]	count=6
module_class	[module_1] the table ||| [module_1] mutable hash [class_2]	count=1
function_arg	[function_1] from ||| [function_1] labels predictions [arg_2]	count=4
function	2-dimensional data ||| make data from centers	count=1
module	n dimensional version of ||| ops	count=1
function	concatenation has no ||| has no	count=1
module_class	when this [class_2] ||| [module_1] [class_2]	count=2
function	the loop ||| loop	count=2
module	lists of the ||| linear_optimizer python ops	count=1
class	generates ||| tensorboard server test	count=1
arg	if op was marked ||| scope op	count=1
function	gets the name ||| get name	count=2
function	linear_model_fn but ||| fn with model fn	count=2
function	to index ||| to index	count=1
module	representing a ||| framework	count=1
module	a sequence of ||| contrib keras	count=1
function	and return indexies of ||| fit transform	count=1
module	get ||| graph_editor	count=1
function	to restore variables ||| restore ops	count=1
module	variable of ||| contrib keras python keras	count=2
class	class [class_2] ||| [class_2] [class_1]	count=1
function	looks up deprecated argument ||| deprecated argument lookup	count=1
function	remove the ||| remove	count=1
function	get a topologically-sorted list ||| sorted nodes	count=1
function	to [function] ||| to [function]	count=3
function	to [function_2] ||| then cont [function_1] [function_2]	count=1
class	make sure ||| test	count=1
function	proto_type for ||| get collection proto	count=1
function	the sqss for input ||| inputs for	count=1
function	a signaturedef ||| signature def	count=1
function_arg	file for [arg_2] ||| [arg_2] [function_1]	count=1
module_class	ops [class_2] ||| [module_1] [class_2]	count=9
module	retrieves an ||| contrib keras python keras engine	count=1
arg	creating a resnet_v1 bottleneck ||| scope base_depth num_units stride	count=1
module	a tensor for ||| python feature_column	count=1
function	existed in the ||| unique target	count=1
function	raises an exception ||| assert has	count=1
module	of beams into ||| python ops	count=1
arg	a specified min ||| clip_value_min clip_value_max	count=1
function	to the help ||| help	count=1
function	[function] sequence-to-sequence ||| [function]	count=1
function	[function_1] v3 ||| [function_2] [function_1]	count=2
arg	extracts a ||| input_ begin end strides	count=1
function	unused nodes from a ||| unused from files	count=1
function	returns ||| collection proto type	count=1
arg	tensor ||| op dtype name as_ref	count=1
class	if the shape ||| shape	count=1
class	helper function to ||| walsmodel	count=3
module	dictionary and return indexies ||| contrib learn python learn preprocessing	count=1
arg	term to ||| labels weights epsilon	count=1
module	get all the ||| contrib graph_editor	count=1
function	defines the version ||| version	count=1
class	which values ||| indexed slices	count=1
function_arg	[function_1] f ||| [arg_2] [function_1]	count=1
function	[function_1] fake bias ||| [function_2] [function_1]	count=1
class	version event ||| event accumulator	count=1
arg	config (output of get_config()) ||| config custom_objects	count=1
function	a head [function_2] ||| [function_2] [function_1]	count=4
function	[function_1] custom ||| [function_1] [function_2]	count=1
module	of the op ||| python	count=1
arg	run() call fetches ||| fetches	count=1
module	helper which properly ||| distributions python	count=1
function	given condition ||| condition	count=1
function	in a tensor ||| tensor	count=1
function	rnn decoder ||| rnn decoder	count=4
arg	of tensor in ts ||| index_or_t ts	count=1
function	[function_1] column of ||| [function_2] [function_1]	count=8
class	a text file ||| text file	count=2
arg	sequences ||| sequences	count=1
function	builds inputs for sequence ||| sequence input	count=1
function	the raw [function_2] ||| [function_2] [function_1]	count=1
function	flops ||| logged ops	count=1
class	gated recurrent unit gru ||| grucell	count=1
function	state ||| static state	count=1
class	create ||| robin strategy	count=2
arg	proto optionally writes ||| meta_info_def graph_def saver_def	count=1
function	an op node followed ||| op and	count=1
class	tensor for ||| lazy builder	count=1
arg	as labels [arg_2] ||| [arg_2] [arg_1]	count=1
function	returns global ||| global	count=1
module	for determining the current ||| keras python keras	count=1
arg	performs a ||| x intensity row_axis col_axis	count=1
module	rnn cell ||| rnn python	count=1
function	a ||| base	count=1
class	[class_1] that failed ||| [class_2] [class_1]	count=1
function	generates the test ||| generate test	count=2
function	default float type ||| floatx	count=1
function	multiply sparsetensor ||| sparse	count=1
function	projections of ||| get projections	count=1
function	get ||| get identity operator	count=2
class	the session ||| wrapper session	count=1
arg	initialize the parameters ||| use_peepholes share_time_frequency_weights	count=1
function	gets a ||| get	count=1
function	the gradients for the ||| grad	count=1
class	coordinatewise ||| categorical	count=2
function	has a conv layer ||| conv	count=1
class	create a ||| robin	count=1
function	a softmax ||| softmax	count=1
function_arg	[function_1] ndarray ||| [arg_2] [function_1]	count=3
function	[function_1] restart is ||| [function_1] [function_2]	count=2
arg	of tensor text ||| tensor np_printoptions	count=1
function_arg	[function_1] x ||| [function_1] greater [arg_2]	count=1
module	model ||| keras python keras engine	count=5
function	randomly generated boxes ||| random boxes	count=2
function	sessionrunhook raises ||| hooks	count=1
arg	a and b in ||| a b	count=1
arg	mat ||| mat batch_shape	count=1
module	representing ||| python	count=1
module	tensor and returns ||| contrib keras python keras	count=1
function	gradients in the presence ||| loop grads	count=1
function	[function_1] iff the ||| [function_1] [function_2]	count=2
function	one step of ||| step	count=1
class	is positive definite ||| pddiag	count=1
function	checks the validity ||| check	count=1
function_arg	order [arg_2] ||| [arg_2] [function_1]	count=1
class	latest checkpoint ||| checkpoint	count=1
function	a random [function_2] ||| [function_1] [function_2]	count=9
function	the current ||| get	count=2
module	dictionary ||| contrib learn python learn preprocessing	count=2
function	from an external module ||| external	count=1
function	a loop [function_2] ||| [function_2] [function_1]	count=1
class	queue ||| queue runner	count=1
function	to save the ||| save ops	count=2
function	inputs of the ||| inputs tensor	count=1
function	initialize the state of ||| initialize state	count=1
function	each text ||| to	count=1
function	of sparse_column_with_hash_bucket ||| sparse column hash bucket	count=1
module	mixture ||| distributions python kernel_tests	count=2
function	into html ||| text array to html	count=1
module	reads ||| learn learn_io	count=1
function	model [function_2] ||| [function_2] [function_1]	count=14
function	a slot named ||| get slot	count=1
module	tfprof ||| tfprof python tools tfprof	count=1
function	various [function_2] ||| [function_2] [function_1]	count=6
function	[function_1] logistic regression ||| [function_2] eval metric [function_1]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] rnn decoder decoder_inputs [arg_2]	count=2
module	have a ||| compatibility	count=1
function	match the ||| filter ts from regex	count=1
arg	saveables ||| saveables	count=2
function	[function_1] [function_2] labels ||| [function_2] [function_1]	count=3
module	a 1 outcome ||| python ops	count=1
arg	to a new type ||| dtype	count=1
class	normal distribution ||| normal tri	count=1
arg	a tensor with all ||| tensor dtype name	count=1
function	of the node from ||| node	count=1
arg	values based on mapping ||| mapping	count=1
arg	distributions with mean ||| validate_args allow_nan_stats	count=1
arg	graph_def ||| graph_def	count=1
arg	fft_length argument ||| fft_rank	count=2
arg	see evaluable evaluable ||| y input_fn feed_fn	count=2
arg	vec ||| vec	count=1
module	loss using tf nn ||| losses	count=2
function	[function_1] run() ||| [function_2] [function_1]	count=4
class	the registered ||| registry	count=2
function	[function] batch/event_shape ||| maybe validate shape [function]	count=3
arg	config file used ||| config	count=1
module_class	this dimension ||| python framework dimension	count=2
class	trace ||| chrome trace formatter	count=1
function	tensor into a placeholder ||| with placeholder	count=1
module_class	new proximal ||| python training proximal	count=1
module	zero ||| keras python keras	count=1
function	that match the ||| from	count=1
module	a non-reference dtype ||| framework	count=1
function	output values of the ||| setup values for	count=1
function	input arg into ||| arg string	count=1
arg	content of the single-line ||| max_length backward_command forward_command latest_command_attribute	count=1
function	op ||| op internal	count=2
function	get ||| status label	count=1
class	op (e ||| operation	count=1
function	transforms each ||| texts	count=1
class	process ||| debug dump dir	count=1
module	ctc ||| python keras	count=1
module	runge-kutta ||| integrate python ops	count=1
function_arg	returns metagraphdef [arg_2] ||| [function_1] [arg_2]	count=1
function	returns a global default ||| default	count=1
class	for the ||| lazy builder	count=1
function	a random rotation ||| random rotation	count=2
function_arg	matrix multiply [arg_2] ||| [arg_2] [function_1]	count=6
function	default initializer and a ||| default initializer	count=1
module	representing [module_2] ||| [module_2] [module_1]	count=1
function	the backprop ||| back prop	count=1
function	compressed histogram ||| compressed histograms	count=1
module	a keras ||| keras	count=2
module	constructor ||| python debug	count=1
class	watched by ||| datum	count=1
arg	returns hooks ||| hooks	count=1
arg	given name ||| name	count=2
function	typeerror ||| check	count=1
module	add debug tensor ||| debug lib	count=1
function	[function_1] schedule ||| [function_2] [function_1]	count=3
arg	list of side_effects for ||| side_effects	count=1
module	op (e g ||| python	count=1
function	2 with label_keys ||| class	count=3
arg	input ||| inputs sequence_length	count=2
function	rank ||| at least	count=1
function	of strings into int64 ||| string to	count=1
arg	handle syncreplicashook ops such ||| is_chief num_tokens	count=1
class	test whether client ||| curses navigation history	count=1
function	dict symbol name ||| build guide	count=1
module	with training ||| learn python learn	count=3
class	[class_1] tensor have ||| [class_2] [class_1]	count=6
module	string ||| plugins text	count=1
function	[function_1] predictions for ||| [function_2] [function_1]	count=2
class	in the session ||| session	count=2
arg	a given sensitivity ||| labels sensitivity	count=1
function	[function_1] format convention ||| [function_1] [function_2]	count=5
arg	propagates x ||| x	count=1
function	computes sin of ||| sin	count=1
module	a menuitem from the ||| debug	count=1
function	to capture the output ||| capture	count=1
function	wraps a unary ||| register unary	count=1
class	string ||| runner	count=1
arg	def ||| input_dict	count=1
module_class	a 1 [class_2] ||| [module_1] [class_2]	count=6
function_arg	stop the [arg_2] ||| [arg_2] [function_1]	count=3
function	float [function_2] ||| [function_1] [function_2]	count=1
function	classes for ||| classes	count=2
function	proto_type ||| get	count=1
function	a boolean ||| boolean	count=1
class	will be produced ||| indexed	count=1
function_arg	rank is [arg_2] ||| [function_1] [arg_2]	count=1
module	image ||| contrib image python	count=1
function_arg	[function_1] variable_def ||| [arg_2] [function_1]	count=1
module	specific axes of a ||| labeled_tensor python ops	count=1
function	step tensor ||| step	count=1
module	bottleneck network ||| contrib slim python slim nets	count=1
module	of tensor or ||| ops	count=1
arg	for calling [arg] apply ||| [arg]	count=1
function	a signaturedef proto ||| signature def	count=1
arg	whether a func ||| func	count=1
function	as linear_model_fn but ||| model fn	count=2
arg	v to [arg_2] ||| [arg_2] [arg_1]	count=2
arg	of times that predictions ||| predictions	count=1
function	gradients for an exit ||| exit	count=1
module	transform that ||| learn python learn dataframe transforms	count=1
function	at a [function_2] ||| [function_2] [function_1]	count=3
arg	input tensors ||| inputs	count=1
function	notice [function_2] ||| [function_2] [function_1]	count=3
function	approximate auc via a ||| streaming auc	count=1
function	the handle by ||| handle	count=1
function	prune invalid ||| prune invalid	count=1
function_arg	stores [arg_2] ||| [arg_2] [function_1]	count=3
module	graph building doesn't ||| tensor_forest hybrid	count=1
function	save variables that are ||| save	count=1
function	then flatten ||| flat	count=1
arg	given feature_columns ||| feature_columns	count=2
function_arg	options [arg_2] ||| [function_1] [arg_2]	count=1
function	the mean and variance ||| normalize moments	count=1
function	all ||| hooks	count=1
arg	in backprop ||| value dead_branch	count=1
function	mini [function_2] ||| [function_2] [function_1]	count=1
function	legacy init op ||| get legacy init op	count=1
function	[function_1] servers ensures ||| [function_1] [function_2]	count=1
module	returns a shape representing ||| framework	count=1
module_class	[module_1] [class_2] ||| [module_1] worker [class_2]	count=2
module	variable of the same ||| python keras	count=2
function	dot format ||| dot	count=1
class	keys ||| sharded mutable dense hash	count=1
class	exit ||| tfrecord writer	count=1
function	of a tensor ||| tensor	count=3
class	positive definite ||| pddiag	count=1
arg	_kernelestimator object ||| feature_columns model_dir weight_column_name head	count=1
module	hparams ||| training python training	count=3
arg	audio by ||| audio	count=1
function	compute predictions by the ||| predictions	count=1
module	parameter p is ||| distributions python	count=1
function_arg	create [arg_2] ||| [function_1] [arg_2]	count=8
class	returns ||| file writer cache	count=1
module	for proper shape values ||| python	count=1
module	which gets ||| distributions	count=1
function_arg	returns the filewriter ||| get logdir	count=1
function	table that maps ||| table from	count=1
function_arg	[function_1] logits ||| [arg_2] [function_1]	count=5
module	ops that ||| contrib	count=1
module	hyperparameters ||| python training	count=1
class	for an lstm cell ||| grid lstmcell	count=1
function	the rank of ||| rank	count=1
function	graph with constants of ||| to constants	count=1
module	a mapping of ||| framework python ops	count=1
module	reverse ||| python keras	count=1
function	the shape ||| get shape	count=3
function	a bidirectional [function_2] ||| [function_1] [function_2]	count=1
arg	recall@k ||| k weights	count=1
class	check ||| test upgrade	count=1
module	if ||| python estimator	count=2
function	all inputs of ||| inputs tensor info	count=1
class	creates a permissiondeniederror ||| permission denied error	count=1
function	we don't have ||| test	count=1
module	all events added since ||| tensorboard backend event_processing	count=1
function_arg	[function_1] input feature_columns ||| [function_1] [arg_2]	count=1
module	and ||| python learn dataframe	count=2
module	tensors that with ||| learn	count=1
module_class	[module_1] [class_2] ||| [module_1] event [class_2]	count=2
function	resnet_v1() for arg ||| v1	count=3
function	a serialized nodedef representation ||| node def	count=1
arg	tensors into ||| cls tensors	count=1
function	for input ||| inputs for	count=2
function	one step [function_2] ||| [function_2] [function_1]	count=2
arg	convert values into ||| values	count=1
function_arg	mask [arg_2] ||| [function_1] lengths maxlen dtype [arg_2]	count=3
module	specified by the given ||| contrib slim python slim	count=1
module	list of tensor ||| ops	count=1
module	with ||| learn python learn	count=2
module	name ||| docs	count=1
class	a svtimercheckpointthread ||| svtimer checkpoint thread	count=1
function_arg	[function_1] of value ||| [function_1] [arg_2]	count=1
function	inputs ||| sgv inputs	count=2
function	creates a head for ||| head	count=1
function_arg	[function_1] the output ||| [function_1] values [arg_2]	count=1
function	to ||| to tensors map	count=1
function	[function_1] input with ||| [function_1] two [function_2]	count=3
arg	[arg_1] checkpointstate ||| [arg_2] [arg_1]	count=2
arg	m_prev ||| m_prev	count=1
function	add it ||| add	count=1
function_arg	positives for [arg_2] ||| [function_1] [arg_2]	count=4
function	computed arguments ||| from arguments	count=2
function	init arg batch_shape, possibly ||| batch shape possibly	count=1
module	student's ||| ops distributions	count=1
function	[function_1] sparse features ||| [function_1] [function_2]	count=2
module	learn the vocabulary ||| contrib learn	count=1
module_class	a bijector [class_2] ||| [module_1] [class_2]	count=2
arg	along dimension dim ||| x dim epsilon	count=1
arg	permute a tensor's axes ||| axis_order	count=1
function	names ||| fetch names	count=1
function	constant ||| constant	count=2
function	[function_1] arguments of ||| [function_2] [function_1]	count=4
module	get all the tensors ||| contrib graph_editor	count=1
arg	steps ||| inputs noutput scope name	count=1
function	control flow context ||| get control flow context	count=1
function	values [function_2] ||| [function_2] [function_1]	count=4
function	list of [function_2] ||| [function_1] [function_2]	count=3
function	boots 3 servers ||| spec propagation three servers	count=1
class	tests ||| dnnregressor test	count=6
arg	inputs of sgv1 ||| sgv1 disconnect_first	count=1
function_arg	list of [arg_2] ||| [function_1] shapes [arg_2]	count=1
arg	from the given path ||| path	count=1
module	0) ||| ops distributions	count=2
function	computes the percentage ||| percentage	count=1
function_arg	precision values [arg_2] ||| [arg_2] [function_1]	count=2
function	of number ||| number	count=1
function	[function_1] default graph ||| [function_1] [function_2]	count=2
arg	label ||| labels label_name	count=1
function	[function_1] atrous ||| [function_2] values [function_1]	count=6
class	an lstm cell ||| gate lstmcell	count=1
module	of keras ||| keras	count=1
function_arg	end [arg_2] ||| [function_1] [arg_2]	count=2
function	labels outside the ||| labels	count=3
arg	given dtype ||| dtype num_shards	count=1
function	the list of input ||| inputs	count=1
function	other subclassses ||| interactive	count=1
module	proto_type ||| framework	count=1
function	feeding tensors with different ||| different	count=1
function_arg	activations [arg_2] ||| [arg_2] [function_1]	count=2
function	tf graph for ||| graph	count=1
function	op type of ||| op type	count=2
function	sdcaoptimizer and real valued ||| sdca optimizer real valued linear	count=1
function_arg	variable with [arg_2] ||| [function_1] var_store [arg_2]	count=1
function	[function_1] should ||| [function_2] [function_1]	count=2
class	returns a variable ||| variable	count=1
arg	across all steps ||| inputs noutput scope	count=1
function	object's docstring and ||| md docstring	count=1
function	health ||| ops with health	count=2
function	cos x ||| sin	count=1
function_arg	to loop [arg_2] ||| [arg_2] [function_1]	count=4
function	runs the float graph ||| graph	count=1
class	variable ||| variable	count=7
module	normalizes ||| python util protobuf	count=1
class	with ||| testing	count=1
class	produced or ||| slices	count=1
function	tests the ||| test	count=2
function	total size of ||| size	count=1
function	returns the variable scope ||| var scope	count=1
function	report a benchmark ||| report benchmark	count=3
function_arg	[function_1] of tuples ||| [function_1] shapes [arg_2]	count=2
function	feed ||| feed	count=5
function	the names ||| fetch names	count=1
function_arg	flip [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] is empty ||| [function_1] [function_2]	count=3
function	reverse a ||| reverse	count=1
function	sparse ||| sparse	count=28
function	symbol ||| index	count=1
function	command ||| from command	count=1
module_class	[module_1] [class_2] ||| [module_1] ops grad [class_2]	count=1
function	_targetcolumn for [function_2] ||| [function_2] [function_1]	count=2
module	of one ||| ops	count=1
function	for logistic regression ||| logistic	count=1
arg	of the gputracer logging ||| device_name	count=1
module	same as 'values' ||| contrib metrics python	count=1
module	for a labeled tensor ||| labeled_tensor python ops	count=1
module	implements ||| specs python	count=1
module	of the command registry ||| python debug cli	count=1
function	overriding tensor values ||| remove override	count=1
function	starts a ||| start reloading	count=1
function	tensor ||| parse data tensor	count=1
module	return all ||| backend event_processing	count=1
function_arg	to a tf ||| to sparse np_array	count=2
function	n-d convolution followed ||| convolution	count=1
module	normally distributed floating ||| contrib specs python	count=1
arg	gradients for the 5 ||| grad	count=1
function	gets or creates ||| get or create	count=2
function	of featurecolumns and ||| to feature columns and	count=1
class	value [class_2] ||| [class_2] [class_1]	count=1
module	list of keras tensors ||| python keras	count=1
function	list of ||| list	count=6
function	list of names of ||| names	count=1
function	scalar inputs ||| scalar	count=1
function	main page and verify ||| request main page	count=1
module	a list of ||| contrib layers python ops	count=1
function	the recall of the ||| streaming recall	count=1
function	return the op ||| find op	count=1
module	sparse ||| metrics python ops	count=1
arg	functional interface ||| inputs	count=3
function	overrides ||| set	count=1
class	into sample, batch, event ||| distribution shape	count=1
function_arg	minimum [arg_2] ||| [arg_2] [function_1]	count=1
arg	the actual [arg_2] ||| [arg_2] [arg_1]	count=1
function	computes softmax ||| softmax	count=1
function	evaluation metric ||| eval metric	count=2
arg	the given message ||| message	count=1
function	a richtextlines object ||| text lines from rich	count=1
module	the ||| debug cli	count=2
function_arg	state [arg_2] ||| [arg_2] [function_1]	count=1
function	get all the tensors ||| ts from regex	count=1
function	function for batch and ||| batch	count=1
module	and runs ||| learn	count=1
module	indexies ||| python	count=1
module	get ||| lib	count=3
function	start message discards expired ||| start message discards expired	count=1
module	variable of the ||| contrib keras python keras	count=2
function	which examples to enqueue ||| which to enqueue	count=1
function	for feeding into predict ||| predict data	count=1
function	creates a sparsetensor ||| to sparse	count=1
function	returns ||| get feed	count=1
module	an imagenet model's ||| keras python keras applications	count=1
module	return ||| contrib	count=1
module	replace ||| python ops	count=1
arg	recall@k of [arg_2] ||| [arg_2] [arg_1]	count=13
function	definite [function_2] ||| [function_1] [function_2]	count=1
arg	of top-k predictions with ||| top_k_predictions	count=1
arg	cpu and gpu ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
module	vgg ||| python slim nets	count=3
arg	ops from a graph ||| graph run_meta	count=1
function	variable-length ||| var len	count=1
class	construct the attention ||| attention	count=1
function	remove any external ||| remove external	count=2
module	of dimensions needed ||| ops	count=1
function	write ||| write histogram	count=1
arg	sum reduces grad along ||| op grad	count=1
module	hyperparameters ||| contrib training python training	count=1
module	* ||| python ops	count=3
function	prefix using [function_2] ||| [function_2] [function_1]	count=2
function	of the first event ||| first event	count=1
class	which the tensor ||| debug tensor	count=1
function	array indices ||| array index at	count=2
function	[function_1] priors ||| [function_2] [function_1]	count=1
arg	a checkpoint in checkpoint_dir ||| checkpoint_dir master scaffold eval_ops	count=1
class	failed if known ||| op error	count=1
function	[function] resourcevariable ||| [function] variable	count=1
function_arg	list of [arg_2] ||| [function_1] directory [arg_2]	count=2
function	obj [function] ||| as [function]	count=1
function	[function_1] run a ||| [function_2] [function_1]	count=2
function	false positives ||| false positive	count=2
function	control inputs ||| control inputs	count=4
class	summary ||| summary	count=3
function_arg	[function_1] name ||| [arg_2] [function_1]	count=2
function	the variables and ||| and slice	count=1
arg	efficiently ||| operator_name addition_tiers name	count=1
function	sets the ||| batch set value	count=1
function	distance to ||| distance to	count=1
class	for proper shape values ||| dirichlet	count=1
function	sets [function_2] ||| [function_2] [function_1]	count=11
function_arg	[function_1] between predictions, ||| [function_1] [arg_2]	count=2
function	image to a sequence ||| to sequence	count=1
module	of dimensions needed ||| python ops	count=1
module	and previous output ||| grid_rnn python	count=1
module	multivariate ||| contrib distributions python ops	count=3
class	return ||| control flow context	count=1
class	proximal [class_2] ||| [class_1] [class_2]	count=3
arg	gradient to ||| op grad	count=1
module	cross-entropy loss ||| python losses	count=1
function	no ||| classification6	count=1
module	given directory ||| learn python learn	count=1
function	foldl on ||| foldl	count=1
function	the help information for ||| get help for	count=1
function_arg	to create [arg_2] ||| [arg_2] [function_1]	count=4
function	the mahalanobis distance to ||| distance to clusters	count=1
function	computes the output ||| compute output	count=4
arg	an object ||| obj	count=1
module	from a set of ||| python ops	count=1
class	for the ||| builder	count=1
arg	a gradient-based optimizer ||| mode params	count=1
function	graph ||| graph def	count=3
module	integers from 0 to ||| training	count=1
arg	based on ||| args weight_collections	count=1
function_arg	generate configuration [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] spec [arg_2]	count=9
function_arg	in a [arg_2] ||| [function_1] params [arg_2]	count=1
function	trace information for a ||| store trace	count=1
arg	by assigning ||| validate_shape	count=1
arg	via a riemann sum ||| predictions labels weights num_thresholds	count=1
function_arg	returns the [arg_2] ||| [function_1] [arg_2]	count=4
class	we don't have a ||| test upgrade	count=1
function	[function_1] 'n' times ||| [function_1] [function_2]	count=1
module	dictionary and return ||| learn python learn	count=1
function	of the linear ||| linear	count=1
function	the version ||| version	count=1
function	export ||| export	count=10
class	should have similar behavior ||| pdderived class	count=1
function	get an operatorpdidentity ||| get identity operator	count=1
class	outofrangeerror ||| out of range error	count=2
function	flags and create ||| create tb app	count=1
function	feed ||| last feed	count=1
arg	to compute/validate ||| input_shape default_size min_size data_format	count=1
module	total sum of ||| factorization python ops	count=1
arg	0 if the denominator ||| denominator	count=2
function_arg	[function_1] [arg_2] and kl divergence ||| ops elbo [function_1] [arg_2]	count=1
function	string_to_hash_bucket op to ||| get string to hash bucket	count=1
function	all the tensors ||| from regex	count=1
function	planes ||| planes	count=1
class	of text ||| rich text	count=2
class	for ||| lazy	count=1
function	is or return index ||| finalize index	count=1
function	attention ||| attention seq2seq	count=2
function	the value of ||| value	count=2
function	[function_1] runners ||| [function_1] [function_2]	count=2
class	a local debugger ||| dumping	count=1
function	update operations [function_2] ||| [function_2] [function_1]	count=12
function	with static ||| to matrix static	count=1
function	irfft ||| for irfft	count=1
function	gather ||| gather grad	count=1
arg	la ||| la	count=1
function	[function_1] whilecontext ||| [function_1] grad [function_2]	count=2
function_arg	creates a [arg_2] ||| [function_1] [arg_2]	count=8
arg	[arg_1] and predictions ||| [arg_2] [arg_1]	count=28
arg	feature_values ||| feature_values keys	count=1
function	while ||| while	count=3
module	image s by the ||| image	count=1
function_arg	[function_1] [arg_2] ||| [function_1] cumsum [arg_2]	count=10
function	[function_1] invariant ||| [function_1] constant [function_2]	count=3
function	batch by ||| batch	count=1
arg	[arg_1] with new_child ||| [arg_2] [arg_1]	count=3
function	values ||| test output values	count=3
function	the state [function_2] ||| [function_1] [function_2]	count=3
module	dictionary and ||| contrib	count=1
module	the given subgraph by ||| graph_editor	count=1
function	wraps a unary ||| register unary op	count=1
arg	encoder and decoder ||| loop_function	count=1
module	typeerror ||| python estimator	count=2
function_arg	[function_1] [arg_2] ||| [function_1] exit [arg_2]	count=2
function_arg	[function_1] from job_name ||| [function_1] [arg_2]	count=4
function	finalize and return ||| finalize	count=1
class	the coordinator ||| coordinator	count=1
function	bias names ||| bias names	count=2
module	desired shape of ||| ops	count=1
module	of dimensions needed ||| contrib distributions python ops	count=1
module	[module_1] that ||| [module_2] [module_1]	count=3
module	cross-entropy loss using tf ||| python ops losses	count=1
function	to ops that ||| ts	count=1
function	from caller [function_2] ||| [function_1] [function_2]	count=5
function	the philox ||| philox	count=1
function	ops with ||| test watching variable	count=1
class	restore ||| session manager	count=1
function	representation of this ||| resource	count=1
arg	values ||| values value_range	count=1
module	version of ||| learn ops	count=1
function	when error occurs ||| debugging during op error	count=1
function	plugin asset from ||| plugin asset	count=1
arg	input-output pairs ||| image ksizes strides rates	count=1
function	forward_event_shape_tensor ||| forward event shape tensor	count=1
function	the max [function_2] ||| [function_1] [function_2]	count=4
function	sparsetensor ||| sparse tensor	count=4
function	the feature ||| feature	count=1
function	dtype ||| base	count=1
arg	to the saveables ||| saveables	count=1
arg	given table with ||| table	count=1
function	a graph and ||| freeze graph	count=1
function	google2 format ||| google2	count=1
function	_get_sparse_tensors() for [function_2] ||| [function_1] two [function_2]	count=2
class	check sparsemax-loss ||| sparsemax loss	count=2
module	the eventfilewriter ||| summary	count=1
class	creates ||| query server	count=1
module_class	[module_1] dimension ||| [module_1] [class_2]	count=4
function	symbol name ||| guide index	count=1
function_arg	load boston housing ||| load boston data_path	count=1
function_arg	[function_1] model ||| [arg_2] [function_1]	count=7
function_arg	summary [arg_2] ||| [function_1] tag [arg_2]	count=1
function_arg	normalization [arg_2] ||| [arg_2] [function_1]	count=7
function	list of tensor objects ||| tensor	count=2
arg	tf nn sigmoid_cross_entropy_with_logits ||| multi_class_labels weights label_smoothing	count=1
class	multivariate normal distribution on ||| multivariate normal diag	count=1
function	score function estimator ||| score function	count=1
class	operation that failed ||| op error	count=1
function	dimension of ||| dimension	count=2
function	[function_1] [function_2] ||| [function_1] sparse [function_2]	count=3
function	tf sparsetensor ||| tf sparse	count=2
function	menu for the screen ||| menu	count=1
function	be ||| prepare or wait	count=1
function	[function_1] increasing ||| [function_1] [function_2]	count=1
function	[function_1] occurs in ||| [function_2] [function_1]	count=4
function	11-layers ||| a	count=1
module	output tensors ||| keras engine	count=1
arg	an object is ||| obj	count=1
function	gradients for a switch ||| switch	count=1
function	[function_1] dict ||| [function_2] [function_1]	count=2
function	computes the unary ||| crf unary score	count=1
module	can ||| contrib graph_editor	count=1
function	average [function_2] ||| [function_2] [function_1]	count=16
function	batchnormwithglobalnormalization ||| batch norm with global normalization	count=1
function	most recent savedmodel export ||| get most recent export	count=1
module	the list of ||| python ops	count=9
function	[function_1] servers ||| [function_1] [function_2]	count=1
function	get all the tensors ||| ts	count=1
arg	from ||| num_classes dtype	count=1
function	weighted sum of a ||| weighted sum	count=2
arg	predictions with [arg_2] ||| [arg_2] [arg_1]	count=4
function	set ||| set shape	count=1
class	mixture of ||| mixture	count=1
class	worker ||| worker	count=1
function	given variable ||| variable	count=2
function	to restore ||| sharded restore	count=1
function	all inputs ||| inputs tensor info from meta	count=1
function	health [function_2] ||| [function_1] [function_2]	count=1
function	update the last ||| update last	count=2
module	lists of ||| labeled_tensor python ops	count=1
class	creates a notfounderror ||| not found error	count=1
module	helper which ||| python ops distributions	count=1
module	pad ||| python ops	count=1
class	vocabulary dictionary and ||| categorical processor	count=1
arg	input while maintaining the ||| inputs outputs_collections	count=1
module	a ||| framework	count=3
function_arg	[function_1] tensors ||| [function_1] nodes [arg_2]	count=4
function	> ||| greater	count=1
arg	smaller versions ||| shrink	count=1
function_arg	[function_1] [arg_2] textbox ||| [function_1] [arg_2]	count=6
function	number of records this ||| num records	count=1
class	tensors in the dump ||| debug dump	count=1
class	shape based ||| tensor shape	count=1
function	when input [function_2] ||| integer [function_2] [function_1]	count=2
function	at a given ||| at	count=7
function	interval to a tuple ||| interval	count=2
arg	holds element-wise ||| data summarize	count=4
function	[function_1] [function_2] ||| [function_2] without [function_1]	count=6
function	the switch for ||| switch	count=1
module	returns a list of ||| factorization python ops	count=4
class	outputs the ||| with hash buckets	count=1
class	debug ||| debug	count=1
arg	marks the given tensor ||| tensor	count=1
module	and feed functions ||| learn	count=1
function_arg	a call [arg_2] ||| [function_1] [arg_2]	count=3
arg	[arg_1] to terminate ||| [arg_2] [arg_1]	count=3
function	inputs of the ||| inputs tensor info from meta graph	count=1
function	a monitoredsession for training ||| monitored training session	count=1
module	names ||| python learn dataframe	count=1
function	state_tuple_to_dict and dict_to_state_tuple ||| state tuple dict conversion	count=1
function	all the ||| ts from	count=1
function_arg	variable [arg_2] ||| [function_1] var_store [arg_2]	count=1
function	function that computes gradients ||| function	count=1
function	for a ||| for	count=2
module	get a menuitem ||| python debug cli	count=1
module	version with default ||| learn python learn	count=1
class	dump (event) file ||| datum	count=1
function	[function_1] raw params ||| [function_1] [function_2]	count=4
module	name of ||| framework	count=1
module	the given function ||| python	count=1
function	while loop ||| while	count=1
class	debug tensor watching ||| debug	count=1
class	session ||| base session	count=2
function	assigns [function_2] ||| [function_1] [function_2]	count=3
function	tensor filter ||| tensor nonexistent filter	count=1
function	with integer weights ||| with integer weighted sparse column	count=1
arg	a variable ||| variable value	count=1
module	with ||| contrib learn python learn	count=2
function	for a switch op ||| switch	count=1
arg	a file ||| filename tensor_names	count=1
function_arg	write the [arg_2] ||| [function_1] to file [arg_2]	count=1
function	batch_shape, possibly ||| batch shape possibly	count=2
module	this object overriding ||| seq2seq python ops	count=1
class	make sure we ||| upgrade files	count=1
function	invalid syntax ||| syntax error	count=1
arg	interval values ||| values	count=1
module	serialized bigquerytablepartition messages ||| cloud	count=1
function	[function_1] batch and ||| [function_1] [function_2]	count=3
function	mahalanobis distance ||| distance	count=1
arg	constructor of highlightoptions ||| criterion description font_attr	count=1
arg	the element-wise weighted ||| updates_collections	count=1
arg	add operations ||| examples	count=2
function	menuitem from the ||| item	count=1
module	returns ||| contrib framework python framework	count=2
arg	runs a microbenchmark to ||| target size iters	count=1
module_class	returns [class_2] ||| [module_1] [class_2]	count=6
function	mean squared [function_2] ||| [function_1] [function_2]	count=9
arg	concatenates n elements from ||| n name	count=1
module	transform that ||| learn dataframe transforms	count=1
arg	determined by pred ||| pred dtype	count=1
arg	second-order gradients of the ||| input_sizes output_sizes window_rows	count=1
function	biases ||| biases	count=1
module	bidirectional ||| contrib learn python learn	count=1
module	reads ||| contrib learn python learn learn_io	count=1
module	do ||| layers	count=1
function	uniform base ||| uniform	count=1
module	return ||| contrib learn	count=1
function_arg	[function_1] stopatstep monitor ||| [arg_2] [function_1]	count=1
module	[module_1] that wraps ||| [module_2] [module_1]	count=3
module	retrieves a ||| contrib keras python keras engine	count=1
function	graph in tensorboard ||| tensorboard	count=1
module	on ||| labeled_tensor python ops	count=1
function	at ||| resample at	count=1
module	of tensors corresponding to ||| python ops	count=4
class	the ast ||| flow call visitor	count=1
function	true positives for ||| sparse true positive	count=2
function	the computed arguments ||| from arguments	count=2
module	constructor for ||| python	count=1
function	[function_1] covariance ||| [function_2] [function_1]	count=3
function	[function_1] [function_2] ||| [function_2] to string [function_1]	count=2
function	is not compatible ||| assert is compatible	count=2
function	compute param += ||| assign add fetch	count=1
function	object for [function_2] ||| [function_2] [function_1]	count=1
arg	gradients to the ||| grad	count=2
function	classes ||| classes	count=2
arg	tensor numpy ||| tensor	count=1
module_class	[module_1] a tensorarray ||| [module_1] [class_2]	count=1
function	stop ||| stop	count=6
module	the given ||| contrib learn python learn	count=2
arg	keyed by name ||| eval_loss predictions labels weights	count=3
arg	x [arg] ||| x [arg] static_condition	count=2
module	the eventfilewriter ||| summary writer	count=1
class	deregister ||| completion registry	count=1
class	by this operator to ||| linear operator	count=2
function_arg	[function_1] bigqueryreader ||| [function_1] [arg_2]	count=1
arg	to apply conv + ||| x filters	count=1
function	the mode in ||| mode	count=1
function	list of file names ||| get file names	count=1
function	summary tensor ||| summary	count=1
function	get a flattened list ||| get	count=1
function	transposes a sparsetensor the ||| transpose	count=1
class	a variable ||| resource variable	count=1
module	shape ||| distributions	count=1
arg	d2 ||| d2 name	count=1
function	linear_model_fn but returns ||| fn with model fn	count=2
function	on self with ||| with	count=1
function	compatible [function_2] ||| [function_1] [function_2]	count=1
function	single value models ||| single value	count=1
function	return the init ||| init	count=1
function	creates fixed size histogram ||| histogram	count=1
module	symbol name -> _guideref ||| tools docs	count=1
class	the dump root ||| dump	count=1
class	tfrecords ||| tfrecord iterator	count=1
function	[function_1] summary file ||| [function_1] [function_2]	count=4
function	create an ||| init	count=1
arg	4th order polynomial interpolation ||| y0 y1 y_mid f0	count=1
function	trainer [function_2] ||| [function_2] [function_1]	count=2
class	trains the model for ||| model	count=1
class	list ||| node stepper cli	count=1
function	[function_1] control dependencies ||| [function_2] [function_1]	count=1
function	static number ||| static ndims	count=2
function	return ||| valid sample	count=1
function_arg	[function_1] [arg_2] ||| [function_1] orig_screen_output [arg_2]	count=3
module	by the embedding projector ||| plugins projector	count=1
function	block that ||| block	count=1
arg	microbenchmark to ||| name target iters	count=1
function	return the feed ||| feed	count=1
function	richtextlines ||| text lines	count=1
arg	train a model on ||| train_samples test_samples input_shape num_classes	count=1
function	then return ||| maybe assert	count=1
function	inputs of ||| inputs tensor info	count=1
module	learn the vocabulary ||| python learn preprocessing	count=1
function	posterior ||| conjugates known scale	count=1
module	of tensors corresponding ||| contrib factorization python ops	count=4
function	sequence index of ||| sequence	count=1
module	of factors weights and ||| python ops	count=1
class	lstm ||| freq lstmcell	count=1
function	_get_sparse_tensors() for input ||| get sparse tensors one input value	count=1
arg	name created for var ||| var name	count=1
function	implements [function] interface ||| is [function]	count=1
function_arg	matrix [arg_2] ||| [function_1] labels predictions [arg_2]	count=1
function	tf examples ||| from examples	count=1
function	edges related ||| edges of	count=2
function	the integer indices for ||| integer indices for	count=1
function	the gradients by ||| gradient norms	count=2
arg	to structure of tensors ||| tensors apply_fn	count=1
arg	node for input_node ||| input_node	count=1
arg	from ||| num_classes	count=1
function	[function_1] all tables ||| [function_1] [function_2]	count=4
function_arg	[function_1] x has ||| [function_1] integer form [arg_2]	count=1
class	this transform to ||| transform	count=2
class	an [class_2] ||| [class_2] [class_1]	count=2
arg	to sequence model ||| encoder_cell decoder_cell	count=1
function	in a command ||| in	count=1
function_arg	compatible with [arg_2] ||| [function_1] tensors [arg_2]	count=1
arg	microbenchmark to measure the ||| iters	count=1
function	return ||| build	count=1
function	has no entries with ||| no entries with	count=1
module	for the location ||| python ops	count=1
class	[class_1] positive definite ||| [class_1] [class_2]	count=1
module	3d numpy ||| keras python keras preprocessing	count=1
arg	storing ||| save_dir	count=1
function	output ||| output end	count=1
class	name of the ||| indexed slices	count=1
arg	lazy bucketing ||| tensors batch_size bucket_boundaries	count=1
function	for guide files ||| files	count=1
function	return the page ||| class page	count=1
class	role ||| operator	count=1
module_class	[module_1] bernoulli ||| [class_2] [module_1]	count=1
function	constants of the ||| to constants	count=1
arg	threads to terminate ||| threads stop_grace_period_secs ignore_live_threads	count=3
function_arg	strategies [arg_2] ||| [function_1] [arg_2]	count=1
arg	weights [arg_2] ||| [arg_1] [arg_2]	count=2
class	test ||| box op test	count=2
function	clips the gradients ||| clip gradient	count=2
arg	op2 hints ||| op2 hints	count=2
function	-> _guideref ||| build guide	count=1
module	in this tensor ||| framework	count=1
function	header ||| header	count=2
module	linked to ops that ||| contrib	count=1
function	uninitialized ||| uninitialized	count=1
module	number of ||| contrib distributions python ops	count=4
module	layer ||| python keras engine	count=7
function	collection with the ||| get collection	count=1
function	main ||| add main	count=1
function	as a ||| as tensor	count=1
module	learn the vocabulary dictionary ||| learn python learn preprocessing	count=1
function	type of the ||| type	count=1
arg	is of the expected ||| expected_type	count=1
class	feature for tf ||| feature column	count=1
function	matrix [function_2] ||| [function_2] [function_1]	count=18
function	the ops in an ||| op	count=1
function	ops to save ||| sharded save	count=2
arg	or fn2() ||| fn1 fn2 name	count=1
class	entire [class_2] ||| [class_2] [class_1]	count=2
module	of the ||| python ops distributions	count=2
module	outcome (vs ||| python	count=1
function	of names of ||| names	count=1
function	an n-d convolution ||| convolution	count=1
function	create a slot ||| slot	count=1
function	when all required ||| required	count=2
function	variables and ||| and	count=1
function_arg	raw params [arg_2] ||| [arg_2] [function_1]	count=1
arg	permute a ||| axis_order name	count=1
function	to determine the predicted ||| predict classes	count=2
arg	execute the ||| sess enqueue_op	count=1
function	fully ||| legacy fully	count=1
function	relative [function_2] ||| [function_1] [function_2]	count=2
module	all ||| backend event_processing	count=2
module	op (e g ||| framework	count=1
function	[function_1] saved checkpoint ||| [function_2] [function_1]	count=3
module	data [module_2] ||| [module_1] [module_2]	count=2
function	the float graph ||| graph	count=1
module	be [module] ||| [module]	count=1
function	gets the legacy init ||| legacy init	count=1
class	weight ||| weighted sparse column	count=1
function_arg	distribution [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] or parent names [arg_2]	count=9
function	[function_1] pool along ||| [function_1] [function_2]	count=4
function	dfs traversal ||| dfs from node	count=1
arg	m_prev with projected ||| c_prev m_prev with_c	count=1
function	[function_1] tf events ||| [function_2] [function_1]	count=5
function	verifies the output values ||| values for	count=1
function	has been decorated ||| has arg	count=1
arg	[arg_1] y ||| [arg_2] [arg_1]	count=11
module	of factors weights ||| ops	count=1
function	the names in ||| names	count=1
function	run an op or ||| run op	count=1
function	the dense tensor in ||| sparse tensor dense	count=1
function	plugins ||| plugins	count=1
module	format of ||| python ops	count=2
arg	as labels [arg_2] ||| [arg_1] [arg_2]	count=1
class	tensor [class_2] ||| [class_1] [class_2]	count=5
function	make sure the shape ||| check ts compatibility	count=1
class	file leaves the ||| file	count=1
module	a step of ||| python ops	count=1
function	init arg batch_shape, ||| batch shape	count=1
function	determinant for every ||| determinant	count=1
arg	matmul x weights ||| x weights	count=4
function	classes and ||| build standardized signature def	count=1
module	value of the ||| python keras	count=1
function	the tensors linked to ||| ts	count=1
function	decode the ||| decode	count=1
module	dropout ||| contrib rnn python ops	count=1
module	ui ||| python debug cli	count=1
module	shape representing a ||| python framework	count=1
function_arg	input function [arg_2] ||| [arg_2] [function_1]	count=2
function	after broadcasting the leading ||| broadcast batch	count=1
arg	elements from x or ||| x	count=1
module	the set of ||| python ops	count=1
module_class	classification [class_2] ||| [module_1] [class_2]	count=1
module	retrieves an ||| keras python keras engine	count=1
function	return tensor ||| maybe	count=1
function	tensor of [function_2] ||| [function_2] [function_1]	count=1
function	run a tensorflow ||| run	count=1
function	in the same ||| same	count=1
module	the embedding projector ||| plugins projector	count=1
function	to use based ||| get string to	count=1
function	a strided ||| strided	count=1
function_arg	tf cond [arg_2] ||| [function_1] [arg_2]	count=1
module	a 3d numpy ||| contrib keras python keras preprocessing	count=1
module	returns the proto_type for ||| framework	count=1
module	mapping of ||| contrib framework python ops	count=1
function	traceback ||| traceback	count=1
class	of a 1 ||| bernoulli	count=1
function_arg	[function_1] [arg_2] ||| [function_1] values [arg_2]	count=6
arg	adds a ||| name	count=1
module	lanczos ||| contrib solvers python ops	count=1
module	dataset of only ||| learn datasets	count=1
module	whether ||| python debug lib	count=1
module	of linear eqns a ||| ops	count=1
class	the tensorarray as a ||| array	count=1
function	[function_1] softmax training ||| [function_1] [function_2]	count=3
function	all inputs ||| inputs tensor info from meta graph	count=1
module	version of ||| ops	count=4
function	average pool [function_2] ||| [function_2] [function_1]	count=5
function	generic signature from ||| generic signature fn	count=2
function	variables in a ||| convert variables	count=1
arg	corresponding to axis ||| axis	count=1
function	based on self with ||| with rank	count=1
module	return dict ||| tools docs	count=1
module	variable of ||| python keras	count=2
function	[function_1] static number ||| [function_2] [function_1]	count=1
arg	gradient to all ||| op grad	count=1
module	see ||| python slim	count=2
function	validate the dumped ||| validate	count=1
class	a staging ||| staging	count=4
function	run [function_2] ||| [function_2] [function_1]	count=9
module	to [module] trace ||| [module]	count=2
function	extraction by ||| bottleneck	count=2
class	concrete [class_2] ||| [class_2] [class_1]	count=1
class	or ||| indexed	count=1
function	no collisions ||| no collision	count=2
arg	values to a list ||| values dtype	count=1
arg	random positive ||| n mean stddev	count=1
arg	the replaced ||| target_ts replacement_ts dst_scope src_scope	count=1
function_arg	[function_1] appearing in ||| [function_1] [arg_2]	count=1
module	matrix data as input ||| learn estimators	count=5
class	data from the generator ||| generator	count=1
function	save and reload ||| save	count=1
module	graph [module_2] ||| [module_1] [module_2]	count=8
function	list recipients [function_2] ||| [function_2] [function_1]	count=4
function	values for [function_2] ||| [function_2] [function_1]	count=1
module	an instance of ||| contrib distributions python ops	count=1
class	sdcalinearregressor works ||| sdcalinear regressor	count=2
module	of unique items ||| python ops	count=1
function	shannon entropy in ||| entropy	count=1
function	forward or backward ||| ndlstm	count=1
function	search commands ||| search from	count=1
module	indexies ||| contrib learn	count=1
function	verifies the values for ||| output values	count=1
function	new subdirectory within the ||| timestamped export	count=2
function_arg	state names [arg_2] ||| [function_1] [arg_2]	count=1
function	array indices for ||| array index at	count=2
arg	the given dimensions ||| dims	count=1
class	(vs ||| bernoulli	count=1
function	current weights of ||| get weights	count=2
function	verifies the output values ||| setup values for	count=1
function	to ops that ||| filter ts from regex	count=1
arg	loss [arg_2] ||| [arg_2] [arg_1]	count=1
module	tensor s of ||| keras python keras engine	count=6
function	create sharding function for ||| get sharding func	count=1
function	[function_1] int32 ||| [function_2] [function_1]	count=4
function	number of elements in ||| size	count=2
class	the vocabulary dictionary and ||| categorical	count=1
function	all the variables in ||| convert variables	count=1
module	list of keras tensors ||| keras	count=1
function	variable [function_2] ||| [function_2] [function_1]	count=10
class	pooling ||| pooling test	count=4
function	values of the ||| hand values	count=1
function	returns up to ||| up to	count=2
function_arg	[function_1] sharded ||| [function_1] concat variable name [arg_2]	count=1
function	[function_1] operation of ||| [function_2] [function_1]	count=2
function	bad ||| bad	count=1
function	ensures override ||| override	count=1
function	updates the content ||| update	count=1
module	shapes of the tensors ||| python ops	count=1
module	features ||| learn python learn estimators	count=2
arg	file is found ||| checkpoint_dir	count=1
function_arg	status labels [arg_2] ||| [arg_2] [function_1]	count=1
module	the shapes of ||| ops	count=1
function	tokens ||| init tokens	count=1
function_arg	main menu [arg_2] ||| [arg_2] [function_1]	count=5
module	which properly ||| distributions python kernel_tests	count=1
function	init [function_2] ||| [function_1] [function_2]	count=3
function	add a command to ||| add	count=1
function	all variables ||| variables	count=2
function	performs greedy [function_2] ||| [function_1] [function_2]	count=4
module	returns a ||| contrib framework python framework	count=1
function	partition [function_2] ||| [function_2] [function_1]	count=1
module	the values [module] ||| [module]	count=1
arg	to structure ||| apply_fn	count=1
module	event file to disk ||| python	count=1
function_arg	input_node [arg_2] ||| [arg_2] [function_1]	count=1
function	add the loop ||| loop	count=2
function	map from parents ||| map	count=1
arg	initialized ||| primary	count=1
arg	parameters of op ||| op	count=1
function	session bundle [function_2] ||| [function_2] [function_1]	count=3
class	remove ||| sub graph view	count=1
module	model ||| learn estimators	count=1
arg	[arg_1] specific format ||| [arg_2] [arg_1]	count=2
arg	a kernellinearclassifier estimator object ||| feature_columns model_dir n_classes weight_column_name	count=1
module	cell and add its ||| rnn	count=2
module	compute ||| distributions python kernel_tests	count=1
function_arg	[function_1] highwaywrapper for ||| [function_1] cell [arg_2]	count=1
arg	feature_columns ||| feature_columns	count=4
function	as [function_2] ||| [function_1] [function_2]	count=1
function_arg	specified line [arg_2] ||| [arg_2] [function_1]	count=1
function	run ops ||| run	count=1
module	a sequence ||| contrib keras python	count=1
arg	is needed in backprop ||| value dead_branch	count=1
function	dataframe from a pandas ||| from pandas	count=1
function	shapes of ||| shapes	count=3
function	filename of latest saved ||| latest	count=1
class	from the graph ||| graph	count=2
function	clips the gradients by ||| clip gradient norms	count=1
function	graph which compute the ||| graph	count=1
arg	object itself ||| file_path	count=1
function	scalar multiplication ||| mul	count=1
module	rnn ||| rnn	count=2
function	[function_1] bias names ||| [function_2] [function_1]	count=2
function	invert the ||| invert	count=1
function	deconv layer based on ||| deconv	count=1
function_arg	that a [arg_2] ||| [function_1] tags [arg_2]	count=1
module	create ||| slim python slim nets	count=2
function	all ||| with all	count=1
class	for a mixture of ||| mixture	count=1
module	from a rank-2 tensor ||| contrib solvers	count=1
function	otherwise ||| check hooks type	count=1
function	dynamic ||| flip vector to matrix dynamic	count=1
module_class	[module_1] rmsprop ||| [module_1] [class_2]	count=6
arg	that ||| ops	count=1
function	based on the value ||| value	count=1
class	operator to ||| linear operator identity	count=1
function_arg	log loss [arg_2] ||| [function_1] [arg_2]	count=2
module	samples a set of ||| python ops	count=3
module	losses ||| contrib losses python losses	count=1
function	return dict symbol name ||| guide index	count=1
function	subset of [function_2] ||| [function_1] [function_2]	count=1
function	should be ||| keys should work	count=1
function	path to ||| path	count=1
arg	estimator ||| example_id_column	count=1
class	"@{python symbol}" [class] ||| [class]	count=3
module	check ||| tools	count=1
function	inputs of two subgraphs ||| sgv inputs	count=1
class	real graph ||| graph	count=1
function	to a sequence ||| to sequence	count=1
module	tfprof ||| tfprof	count=1
function	value of a ||| value	count=1
function	call to reload ||| reload	count=1
function	sequence ||| to	count=1
function	is a placeholder ||| placeholder	count=1
function	get [function] ||| get run debug [function]	count=2
module	version of ||| python learn ops	count=1
module	and ||| learn python	count=1
function_arg	[function_1] files ||| [function_1] cls filepatterns feature_spec [arg_2]	count=2
module	single argument in ||| python	count=1
function	tensorboard ||| tensorboard	count=1
function	record that ||| record	count=1
function	by [function] factor ||| [function]	count=2
class	a metadata for ||| metadata	count=1
class	quantized distribution representing ||| quantized distribution	count=1
module_class	this tensor ||| framework tensor	count=3
function	the approximate auc via ||| streaming auc	count=1
arg	rgb image ||| image	count=1
function	[function_1] a categorical ||| [function_2] column weighted [function_1]	count=1
class	this ||| dtype	count=1
function	conv2d ||| compare fwd conv2d	count=1
function	constants of the ||| constants	count=1
module	for the ||| python	count=5
module	training and inference ||| python learn estimators	count=1
arg	storing the ||| save_dir	count=1
function_arg	[function_1] cells in ||| [arg_2] [function_1]	count=1
function	placeholder ||| placeholder from dtype and shape	count=2
function	from an external ||| external	count=1
function	extract output file path ||| extract output file path	count=1
module	layers by ||| contrib layers python layers	count=1
arg	a list of sequences ||| sequences mode	count=1
function	float graph ||| graph	count=1
module	tensors specified by the ||| slim python slim data	count=1
function	python file for ||| file	count=1
class	which values will ||| indexed	count=1
function	that for ||| test	count=1
function_arg	[function_1] variable ||| [function_1] [arg_2]	count=1
module	for determining the ||| keras python	count=1
arg	a func ||| func	count=2
arg	distributions with mean ||| validate_args	count=1
function	creates [function_1] [function_2] configuration ||| contrib layers python layers [function_1] [function_2] column_name vocabulary_file num_oov_buckets vocab_size	count=1
function_arg	the given [arg_2] ||| [arg_2] [function_1]	count=1
module	hue [module] an ||| [module]	count=1
class	or tensor in ||| tensor flow benchmark	count=1
arg	between logits [arg_2] ||| [arg_2] [arg_1]	count=2
function	calculates false positives ||| sparse false positive	count=1
function	returns the proto_type ||| proto type	count=1
function	for all inputs of ||| inputs tensor info from	count=1
function_arg	[function_1] op ||| [function_1] grad [arg_2]	count=2
function	an int32 ||| event	count=2
arg	input and each ||| inputs	count=1
function	operator [function] = ||| [function]	count=1
arg	implement interactive ||| node_stepper restore_variable_values_on_exit	count=1
function	get ||| get collection	count=2
function	by [function_2] ||| [function_1] [function_2]	count=1
function	tile the batch ||| tile batch	count=3
module	non-reference dtype based ||| framework	count=1
function	[function_1] context ||| [function_1] [function_2]	count=7
arg	tensor and a target ||| target	count=1
function_arg	replicas [arg_2] ||| [arg_2] [function_1]	count=1
function	queue batch and ||| batch	count=1
module	dtype based on this ||| python	count=1
function	root directory ||| root dir	count=1
function	deletes older exports ||| exports	count=1
function	command history ||| from command history	count=2
module	return ||| python ops	count=5
module	the vocabulary ||| python learn	count=1
function_arg	[function_1] op is ||| [arg_2] [function_1]	count=5
module	a non-reference dtype ||| python	count=1
function	the kind name ||| get kind name	count=2
function	[function_1] model function ||| [function_1] [function_2]	count=4
function	strategies with the ||| strategies	count=1
class	to play the role ||| operator	count=1
arg	tensor to [arg_2] ||| [arg_2] [arg_1]	count=2
function_arg	[function_1] stored in ||| [function_1] [arg_2]	count=3
function	summary tensor ||| summary op	count=1
module	a command to the ||| python	count=1
function	resets the global default ||| reset default	count=1
function	run an op ||| run op	count=1
arg	qualified name should be ||| name	count=1
function	for a specific plugin ||| retrieve plugin	count=1
class	adds ||| base saver builder	count=1
module	of a variable ||| python ops	count=1
arg	[arg_1] tensor ||| [arg_2] mapping [arg_1]	count=2
function	returns a function ||| get	count=1
function_arg	[function_1] statesavingrnnestimator ||| [arg_2] [function_1]	count=1
module	from the ||| docs	count=1
module	to ||| learn estimators	count=1
module	outcome ||| python	count=1
arg	stddev loc [arg_2] ||| [arg_2] [arg_1]	count=1
arg	input [arg] pass ||| [arg]	count=1
arg	weights ||| weights	count=13
arg	wrapper and a target ||| target decorator_func decorator_name	count=1
function	[function_1] format ||| [function_2] [function_1]	count=1
function	mean of a tensor ||| mean	count=1
function	name ||| name	count=34
function	sparsetensors [function_2] ||| [function_2] [function_1]	count=2
function	using client feed ||| tensor feed	count=1
function	that arg_scope can ||| arg scoped arguments	count=1
function	connected [function_2] ||| [function_1] [function_2]	count=6
function	dict containing ||| dict to	count=1
function	name ||| build	count=1
function	raises typeerror ||| check hooks	count=1
function	simple classification model ||| train model	count=2
function_arg	[function_1] of base_type ||| [function_1] [arg_2]	count=2
module	[module_1] the default ||| [module_1] [module_2]	count=2
module_class	the staging ||| python ops staging	count=2
function	_get_dense_tensor() [function_2] ||| [function_1] two [function_2]	count=2
function	in renyi ||| renyi	count=1
function	contrib op library ||| op library	count=1
class	sure ||| files	count=1
arg	sequences into ||| sequences mode	count=1
class	without ||| test	count=1
arg	predictions, labels ||| predictions labels weights metrics_collections	count=1
function	add the ||| add back	count=1
arg	tensor and returns ||| tensor	count=1
function	get ||| regex	count=1
function	[function_1] to ||| [function_1] [function_2]	count=31
function	timestamp in [function_2] ||| [function_2] [function_1]	count=3
function_arg	true if [arg_2] ||| [function_1] loop switch [arg_2]	count=3
function	embedding lr ||| extract embedding lr	count=2
arg	replaces ||| sess input_graph_def output_node_names variable_names_whitelist	count=1
arg	or 2 ||| name	count=1
function	the filename of latest ||| latest	count=1
function	with sdcaoptimizer and ||| sdca	count=2
arg	all steps and returns ||| inputs noutput scope	count=1
arg	np_matrix ||| np_matrix	count=1
arg	to a specified min ||| clip_value_min clip_value_max	count=1
arg	specified min and max ||| t clip_value_min clip_value_max	count=1
function	[function_1] dynamic shape ||| [function_2] [function_1]	count=2
class	when the thread ||| looper thread	count=1
function	dnn-only instantiation works ||| dnnonly	count=1
function	specified invalid ||| by invalid	count=1
module	to a multiple ||| contrib training python training	count=1
arg	different dtype ||| dtype	count=1
function	get the inputs ||| inputs	count=1
function_arg	> y ||| greater x y	count=1
module	test ||| tools docs	count=2
arg	the parameters for an ||| num_units use_peepholes initializer num_proj	count=1
module	cell ||| rnn python ops	count=3
function	dynamic ||| to matrix dynamic	count=1
module	regression ||| learn estimators	count=2
function_arg	[function_1] for op ||| [function_1] [arg_2]	count=2
module	session and runs a ||| python learn dataframe	count=1
function	menuitem ||| item	count=1
arg	dirichletmultinomial distributions ||| total_count concentration validate_args allow_nan_stats	count=1
module_class	[module_1] file ||| [module_1] event [class_2]	count=1
module	op that trains the ||| python	count=1
arg	the specified dimension to ||| dim	count=1
function	[function] a printable ||| get dict [function]	count=3
class	current batch ||| queued sequence batch	count=1
function	tests ||| test	count=17
function	deregister a ||| deregister	count=1
function	return a slot named ||| slot	count=1
function	functions [function_2] ||| [function_2] conversion [function_1]	count=1
function	add legacy init op ||| maybe add legacy init op	count=1
function	relative timestamp from for ||| rel timestamps	count=1
arg	predictions ||| predictions weights metrics_collections	count=3
function	possibly [function_2] ||| [function_2] [function_1]	count=4
module	and values of ||| python ops	count=1
module	a command ||| debug cli	count=1
function	register all ||| register	count=1
function	produced ||| read write	count=1
function	of the run() ||| run	count=1
function	[function_1] bucketized ||| [function_2] [function_1]	count=2
module	an instance of ||| ops	count=1
function	deprecated argument name and ||| deprecated argument	count=1
module	file ||| summary writer	count=3
function	whilecontext to which this ||| while context	count=1
arg	the event [arg_2] ||| [arg_2] [arg_1]	count=2
function_arg	split [arg_2] ||| [arg_2] [function_1]	count=9
arg	prefix or its alias ||| prefix	count=1
function	the concatenation ||| concatenate	count=1
arg	microbenchmark to measure the ||| target iters	count=2
module	transform that wraps a ||| python learn dataframe transforms	count=1
arg	a tree representing ||| input_shape input_type	count=1
function	accepts a state ||| state	count=1
arg	a graph ||| graph	count=2
function	converts embedding ||| embedding	count=1
function	a report of ||| report	count=1
function	return dict ||| build guide index	count=1
class	table ||| dense hash table	count=1
arg	events will be logged ||| summary_writer	count=1
function_arg	[function_1] [arg_2] implements ||| [function_1] tensor like [arg_2]	count=1
function	regression signature ||| regression signature	count=3
module	[module_1] dict ||| [module_1] [module_2]	count=2
arg	[arg_1] stddev loc ||| [arg_2] [arg_1]	count=1
function	[function_1] dependency on ||| [function_2] [function_1]	count=4
function_arg	dims [arg_2] ||| [arg_2] [function_1]	count=1
module	of init ||| contrib linalg python ops	count=2
function	tf options ||| handle options	count=1
arg	given job ||| job_name task_index	count=1
function	files ||| files	count=3
class	a table ||| initializable lookup table	count=1
function_arg	finalize and [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] run ||| [function_1] [function_2]	count=2
class	current iteration ||| gmm algorithm	count=1
module	cli see ||| python debug cli	count=2
function	[function_1] a batch ||| [function_2] [function_1]	count=1
function	returns a tuple ||| create tuple	count=1
function	[function_1] tensorflow variables ||| [function_1] [function_2]	count=3
module	and scores ||| learn	count=1
function	of n-d ||| convolution	count=1
arg	config ||| config	count=2
arg	a sharded ||| dtype num_shards	count=1
function	dense scalar inputs ||| dense scalar	count=2
function	the manual ||| manual	count=1
function	num_rows, [function_2] ||| [function_1] [function_2]	count=3
class	[class_1] data and ||| [class_2] [class_1]	count=8
function	[function_1] columns ||| [function_2] [function_1]	count=7
arg	[arg_1] values tensors ||| [arg_2] [arg_1]	count=1
function	any external ||| external	count=1
function_arg	object's docstring [arg_2] ||| [function_1] [arg_2]	count=1
function	set attributes self ||| set	count=1
function	parses and asserts ||| parse	count=1
module	ids of a tf ||| python ops	count=1
module	constructor ||| debug wrappers	count=2
function	other ||| other	count=1
function	in chrome ||| chrome	count=1
function	compute ||| compute	count=4
function	to a ||| format to	count=1
function	a tensor to ||| label tensor	count=1
class	constructor for ||| output	count=1
arg	returns grad * ||| grad	count=3
function	finalize and return the ||| finalize	count=1
arg	with these parameters ||| name shape dtype initializer	count=2
function_arg	asset from [arg_2] ||| [function_1] [arg_2]	count=2
function	adds the ||| add	count=4
function	from the [function_2] ||| [function_2] [function_1]	count=2
module	outcome ||| ops distributions	count=2
module	raises typeerror otherwise ||| estimator	count=1
function_arg	[function_1] [arg_2] ||| [function_1] syntax error output [arg_2]	count=1
function_arg	log softmax [arg_2] ||| [arg_2] [function_1]	count=1
arg	defines ||| weight_decay	count=1
arg	a list of layers ||| layers layer_set	count=1
function	that ||| ts	count=1
arg	the dimensions of tensor ||| dimensions	count=1
module	vocabulary dictionary ||| contrib learn python learn preprocessing	count=1
class	will be produced or ||| indexed	count=1
function_arg	[function_1] kernellinearclassifier ||| [arg_2] [function_1]	count=1
function	test for ||| test	count=2
function	mean ||| streaming mean	count=2
arg	op1 and [arg_2] ||| [arg_1] [arg_2]	count=5
function	the provided head is [function_1] [function_2] ||| [function_1] [function_2]	count=2
module	of a ||| metrics python ops	count=1
module	that graph building doesn't ||| contrib tensor_forest hybrid	count=1
module	the gradient of ||| contrib tensor_forest hybrid python ops	count=3
function	[function_1] pill ||| [function_1] [function_2]	count=2
function	for all inputs ||| inputs tensor info from meta	count=1
arg	a capturevariable monitor ||| var_name every_n first_n	count=1
function	return the op ||| op	count=1
function	for model_fn that ||| model fn ops	count=1
function	proper shape ||| valid	count=1
function	maximum ||| reduce max	count=1
module	vocabulary dictionary and ||| learn python	count=1
function	returns metagraphdef ||| export meta graph	count=1
module	then return tensor version ||| python ops	count=1
function	concatenation has no ||| output v2 has no	count=1
module	get a ||| debug	count=1
function	run "operation" ||| run using	count=1
function	tuples into ||| to	count=1
arg	python object "candidate" for ||| candidate name	count=1
arg	add operations to ||| examples	count=2
module	elements in this ||| python framework	count=1
module	of integers ||| python keras	count=1
function	returns global variables ||| global variables	count=2
function_arg	returns predictions [arg_2] ||| [function_1] [arg_2]	count=1
function	enable or disable jit ||| experimental jit	count=1
function	to gradients ||| to gradients	count=2
function	apply the ||| apply	count=1
function	model with ||| model with	count=1
function_arg	[function_1] gradients to ||| [function_1] duplicate indices [arg_2]	count=2
function	invalid ||| test invalid	count=2
class	perform ||| composable model	count=1
arg	tensors x [arg_2] ||| [arg_2] [arg_1]	count=4
function	given dictionary of tensors ||| tensors	count=1
function	it to 2d ||| to 2d	count=2
function	reverse a tensor ||| reverse	count=1
module	of vectors ||| python ops	count=1
arg	multiple devices ||| per_device restore_sequentially reshape	count=1
function	to use based ||| to hash bucket	count=1
module	the outputs [module_2] ||| [module_1] [module_2]	count=1
module	[module_1] training ||| [module_2] [module_1]	count=2
module	tensor ||| python ops	count=4
module	validates ||| contrib keras python keras utils	count=1
function	are sessionrunhook ||| hooks type	count=1
function	listing images ||| images	count=1
module	equal to another ||| ops distributions	count=1
function	sum ||| add	count=1
class	will be produced or ||| slices	count=1
function	[function_1] [function_2] ||| [function_1] output [function_2]	count=3
function	node-status ||| node status	count=1
function	scalars function returns suitable ||| scalars	count=1
function_arg	> [arg_2] ||| [function_1] x [arg_2]	count=3
function	the cosine [function_2] ||| [function_1] [function_2]	count=2
module	dictionary and return ||| contrib learn	count=1
function	with hashed bucket ||| with hash bucket	count=3
arg	[arg] it ||| [arg]	count=3
module	models that ||| learn python learn estimators	count=1
function	of graph dependencies ||| graph parents	count=2
module	docstring ||| tools docs	count=3
function	scope to a ||| scope	count=1
function	a linear operator from ||| create operator	count=1
module	vocabulary dictionary ||| contrib learn	count=1
function	current default graph ||| graph	count=1
function	single bprop [function_2] ||| [function_2] [function_1]	count=1
function	for an accumulated ||| back prop accumulated	count=1
module	from 'run_meta' ||| python tools tfprof	count=1
function	dense batch ||| dense	count=1
module	and return indexies of ||| contrib learn python learn	count=1
function	domain of this ||| domain	count=1
function	bounding box ||| bounding box	count=2
function	weighted sparse [function_2] ||| [function_2] [function_1]	count=1
module	single [module] ||| python ops [module]	count=3
arg	to axis [arg_2] ||| [arg_2] [arg_1]	count=2
module	each ||| keras preprocessing	count=2
function	[function_1] monitor callbacks ||| [function_1] [function_2]	count=1
arg	that comprise ||| name all_vars	count=1
function	random spatial [function_2] ||| [function_2] [function_1]	count=6
function	non-batch kl for ||| non batch kl	count=1
function	a reshape [function_2] ||| [function_1] [function_2]	count=3
function_arg	[function_1] a custom_getter ||| [function_1] [arg_2]	count=1
module	tensor of a ||| ops	count=1
function	label ||| label	count=5
function	get all ||| filter	count=1
function_arg	function details [arg_2] ||| [function_1] [arg_2]	count=3
function	latest saved checkpoint ||| latest checkpoint	count=2
function	shapes for each component ||| shapes	count=2
function	assert that an argument ||| assert compatible matrix	count=1
module	the dataframe and ||| learn python learn dataframe	count=1
function	tensors ||| from	count=1
function	sine ||| sine	count=2
function	via a sqrt_solve ||| via sqrt solve	count=3
module	to __init__ which ||| distributions python	count=1
function	[function_1] feature column ||| [function_2] [function_1]	count=4
function	[function_1] jit ||| [function_2] [function_1]	count=1
function	return ||| assert	count=1
function	defines a flag ||| define	count=2
module	shape values then ||| python ops	count=1
module	of the given tensors ||| python ops	count=1
function	dense ||| dense	count=13
module	given dimension [module] ||| [module]	count=2
function_arg	[function_1] necessary ||| [function_1] inputs tensor [arg_2]	count=1
module	vocabulary ||| learn python learn preprocessing	count=4
module	batched ||| training	count=1
arg	a tensor with validation ||| tensor tensor_slicing	count=1
function	normalize the ||| normalizer fn	count=1
function	valued features of ||| valued feature	count=1
function	back [function_2] ||| [function_2] [function_1]	count=1
class	part of the model ||| sequential	count=1
function	is an override ||| allowing override	count=1
function	gradient from ||| take grad	count=2
function	from ||| from map	count=2
arg	body to the ||| body loop_vars shape_invariants	count=1
class	a table outputs ||| lookup table	count=1
function	it's not created yet ||| needed	count=1
function_arg	[function_1] new_export_strategies ||| [function_1] [arg_2]	count=3
function_arg	false positives [arg_2] ||| [arg_2] [function_1]	count=2
function	key validator callback of ||| on	count=1
class	of 1 ||| relaxed bernoulli	count=2
module	all files in ||| backend event_processing	count=1
arg	scale ||| scale	count=2
function	produces a [function_2] ||| [function_2] [function_1]	count=6
function_arg	[function_1] for storing ||| [arg_2] [function_1]	count=3
function	matrix to vector with ||| matrix to vector	count=2
arg	for an estimator ||| cell_type num_units	count=1
class	1 outcome ||| bernoulli	count=1
class	visitor ||| doc generator visitor	count=1
function	for one feature ||| one feature	count=2
function	attribute (e g ||| attribute	count=1
arg	find or ||| var slot_name op_name	count=1
function	values then return tensor ||| valid sample	count=1
function	at a given ||| resample at	count=1
function	temporarily reroute ||| reroute	count=1
arg	use based on hasher_spec ||| hasher_spec	count=1
function	object to a hparamdef ||| proto	count=1
function	variable-updating ops with ||| test watching variable	count=1
function	mean and variance of ||| moments	count=1
module	list of ||| python	count=2
function	[function_1] versions ||| [function_1] [function_2]	count=2
function	traceback of a node's ||| node traceback	count=1
arg	y elementwise using ||| y	count=1
arg	permute ||| labeled_tensor axis_order name	count=1
module	get a menuitem ||| debug cli	count=1
function	navigate to the main ||| request main	count=1
function	for multi ||| multi	count=2
module	two dimensions of ||| contrib linalg python ops	count=1
module	the vocabulary ||| python learn preprocessing	count=1
arg	given logits ||| logits name	count=1
arg	entire contents of a ||| filename binary_mode	count=1
function_arg	device [arg_2] ||| [arg_2] [function_1]	count=1
arg	boundaries and interval ||| boundaries	count=1
function	dense batch matrix ||| to dense	count=1
function	map from ||| map	count=1
arg	tensor ||| dtype name as_ref	count=2
function	the values of ||| values	count=3
class	residualwrapper ||| residual wrapper	count=1
function	get all the ||| get	count=5
function	one-hot ||| one hot	count=1
function_arg	[function_1] resource_list ||| [arg_2] [function_1]	count=1
module	the name ||| python	count=1
module	by ||| python ops	count=1
class	initializes ||| rnn estimator	count=2
arg	specification ||| spec inputs input_shape input_type	count=2
module	the vocabulary dictionary ||| contrib learn python learn preprocessing	count=1
function	[function_1] start ||| [function_1] [function_2]	count=4
function	infer hints ||| infer	count=1
arg	logits given in input ||| inputs sequence_length	count=2
function	returns a reference ||| ref	count=1
module	s of a list ||| engine	count=1
function	the csv [function_2] ||| [function_2] [function_1]	count=2
function	source ||| source	count=1
function	the gradients [function_2] ||| [function_2] [function_1]	count=4
class	lstm ||| time freq lstmcell	count=1
function	fetches [function_2] ||| [function_1] [function_2]	count=4
arg	inputs and [arg_2] ||| [arg_2] [arg_1]	count=1
module	to all ops ||| python ops	count=1
module	get a menuitem from ||| python debug	count=1
arg	to a file with ||| filename tensor_names	count=1
arg	this op if it's ||| op before	count=1
function	you can save and ||| save load	count=1
function	tile along the ||| tile	count=1
module	systems of ||| ops	count=2
function	[function_1] tensor from ||| [function_2] [function_1]	count=2
arg	vec to match ||| vec	count=1
function	feature extraction ||| bottleneck	count=2
module	google2 ||| python platform	count=1
module	and session and runs ||| contrib learn python learn dataframe	count=1
arg	parameters for ||| use_peepholes initializer num_proj	count=1
module	function ||| distributions	count=2
arg	name [arg_2] ||| [arg_2] [arg_1]	count=3
class	will ||| indexed	count=1
function	[function_1] into pil ||| [function_1] [function_2]	count=1
function_arg	a str representation ||| str dictionary	count=1
function	sync_token_queue with the tokens ||| tokens	count=1
function_arg	converts a [arg_2] ||| [function_1] array [arg_2]	count=2
arg	prunes out ||| input_graph	count=1
module_class	student's [class_2] ||| [module_1] [class_2]	count=1
function	whether tensorflow ||| is	count=1
function	labels ||| label	count=2
class	statistics ||| op stats	count=2
function	values of the ||| setup values	count=1
function	match with registered priors ||| priors	count=1
function	step true positives for ||| streaming sparse true positive	count=1
function	term ||| term	count=1
function	[function_1] with static ||| [function_1] [function_2]	count=4
function	biasadd [function_2] ||| [function_1] [function_2]	count=3
function	hessian ||| hessian	count=1
module_class	[module_1] [class_2] ||| [module_1] fetch [class_2]	count=1
function	tensor to use ||| tensor or dict	count=1
function_arg	file paths [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] restart only ||| [function_1] [function_2] for file version less	count=1
function	graph with ||| graph with	count=2
module	can be used to ||| layers python layers	count=1
function	using the training ||| train	count=1
function	operation with the given ||| get operation by	count=1
function_arg	[function_1] constructed nodes ||| [arg_2] [function_1]	count=1
module	the inputs and ||| contrib graph_editor	count=1
module	0 to ||| training	count=1
function	on other subclassses of ||| interactive	count=1
arg	basedebugwrappersession ||| sess thread_name_filter	count=1
class	an event file ||| event transformer	count=1
function	stochastic tensors to the ||| stochastic	count=1
module	sparse ||| contrib metrics python ops	count=1
function	to help ||| help	count=1
class	the shape ||| shape	count=2
function	noise-contrastive estimation training ||| nce	count=1
function_arg	[function_1] x ||| [function_1] equal [arg_2]	count=4
arg	their norms ||| clip_norm use_norm	count=1
function	to be integrated with ||| test can created before minimize called	count=1
function	loads ||| load data	count=4
function	first 'n' times ||| first n	count=2
module	this cell output dimension ||| rnn	count=1
function	betainc a b x ||| betainc	count=1
function	if ||| hooks type	count=1
arg	computes ||| weights name	count=1
module	element-wise max of ||| ops	count=1
function	of protos ||| get protos	count=1
arg	the labels ||| labels weights metrics_collections	count=4
module	can do a ||| layers	count=1
function	one step of a ||| step	count=1
function	a graph with constants ||| constants	count=1
function	to save ||| save	count=3
arg	to tensor ||| tensor	count=1
function_arg	the names [arg_2] ||| [arg_2] [function_1]	count=1
function	into the graph ||| to graph	count=1
function	[function_1] gradients by ||| [function_1] [function_2]	count=1
function	shallow [function_2] ||| [function_2] [function_1]	count=2
module	values ||| ops	count=1
function	for forward public ||| forward	count=1
function	[function_1] value ||| [function_2] [function_1]	count=18
module	this ||| client	count=4
function	return index ||| index	count=1
function	_get_sparse_tensors() for [function_2] ||| [function_2] [function_1]	count=3
function_arg	[function_1] with ||| [function_1] [arg_2]	count=2
function	returns the update ops ||| update	count=1
class	the event file to ||| writer	count=1
module	helper which ||| contrib distributions	count=1
function	fill tensor shapes in ||| fill missing	count=1
function	resnet v1 ||| resnet	count=1
arg	[arg_1] from_proto functions ||| [arg_2] [arg_1]	count=2
function	to ops ||| from	count=1
class	class ||| categorical	count=1
function	add an item to ||| add	count=1
arg	base_type ||| base_type conversion_func	count=1
module_class	model's forward [class_2] ||| [class_2] [module_1]	count=1
function	current control ||| control	count=2
module	as input ||| python learn estimators	count=10
class	line from the file ||| file	count=1
function	blocklstm ||| block lstmgrad	count=2
module_class	[module_1] [class_2] ||| [module_1] truncated [class_2]	count=1
arg	for the given ids ||| params sp_ids sp_weights partition_strategy	count=1
function	with dynamic shapes ||| matrix dynamic	count=1
arg	of feature_columns ||| feature_columns	count=1
module	pbtxt file containing ||| saved_model python saved_model	count=1
function	per step true positives ||| sparse true positive at	count=1
arg	state ||| cell features labels mode	count=1
arg	values to a ||| values dtype	count=1
function	kl for ||| kl	count=1
function	cosine distance between the ||| mean cosine distance	count=2
function	if the provided head [function_1] [function_2] ||| contrib linear_optimizer python [function_1] [function_2] head	count=1
function	benchmark ||| benchmark	count=2
module	determining the [module_2] ||| [module_1] [module_2]	count=2
function	for a specific plugin ||| plugin	count=1
function	master ||| master	count=1
module_class	staging [class_2] ||| [module_1] staging [class_2]	count=2
module	flatten ||| python kernel_tests	count=1
function_arg	[function_1] the cells ||| [function_1] dim_indices [arg_2]	count=1
module	for the ||| distributions python ops	count=1
module	returns a shape ||| framework	count=1
arg	distributions ||| validate_args allow_nan_stats name	count=1
module	optimizer ||| contrib keras python keras	count=1
class	for inputs ||| analyzer	count=1
module	all ops created by ||| ops	count=1
class	node-status labels ||| stepper cli	count=1
module	returns ||| contrib learn python learn learn_io	count=2
function	from tensor watch ||| tensor watch	count=2
function	gradient ||| set grad	count=1
arg	node op ||| op	count=1
module	the vocabulary dictionary ||| contrib learn python	count=1
function	update for dnn-linear combined ||| dnnlinear combined bug	count=1
module	safe ||| python ops losses	count=1
arg	to a different dtype ||| dtype	count=1
arg	feature [arg] values into ||| [arg] sp_values vocab_size	count=1
arg	an empty mutablehashtable object ||| key_dtype value_dtype default_value shared_name	count=1
arg	builds model graph and ||| features labels	count=3
module	from the ||| tools	count=1
function	mask ||| mask	count=6
class	the vocabulary after ||| vocabulary	count=1
function	python callable that ||| callable	count=1
function	[function_1] [function_2] ||| [function_1] precision [function_2]	count=6
function	debug ||| debug	count=5
function	-> ||| build guide index	count=1
class	the ||| slices	count=2
module	helper to __init__ which ||| contrib distributions python	count=1
class	with the specified item ||| tfexample decoder test	count=1
class	that selects row and ||| test	count=1
function	sampled softmax [function_2] ||| [function_2] [function_1]	count=1
function	to a graph ||| apply	count=1
function	returns the sampled ||| sampled	count=1
function_arg	automatically [function_1] [arg_2] ||| cli curses ui auto [function_1] [arg_2] erase_existing	count=2
arg	pads 5d tensor with ||| padding data_format	count=1
class	tensor forcing ||| tensor array	count=2
arg	with validation ||| tensor_slicing	count=1
arg	input_tensors) ||| attr attr_name	count=1
arg	of censusdatasource ||| data_dir train_data_url test_data_url columns	count=1
module	for ||| cli	count=1
function	shape for input ||| shape	count=1
function	pool [function_2] ||| [function_2] [function_1]	count=10
arg	see _head create_model_fn_ops ||| features mode labels train_op_fn	count=1
function	[function] linearregressor ||| [function]	count=1
function	two float arrays ||| array	count=1
module	the values of ||| ops	count=2
function	_guideref from the ||| guide index	count=1
module	return tensor ||| python ops distributions	count=1
class	the grad context ||| grad	count=1
function	proper shape values then ||| maybe assert valid	count=1
class	make sure ||| upgrade	count=1
arg	beta and ||| beta	count=1
function	bidirectional recurrent neural network ||| stack bidirectional	count=1
arg	to the given slicing ||| slicing initializer dtype	count=1
function	protos ||| protos	count=1
arg	cell with ||| cell output_size activation	count=1
class	event file to disk ||| summary writer	count=1
function	a global default ||| default	count=1
function	a menuitem from the ||| caption to item	count=1
function	isfunction ||| isfunction	count=1
function	filename ||| sharded filename	count=1
class	for proper shape ||| dirichlet multinomial	count=1
module	distributed floating ||| specs python	count=1
function	dumping when error ||| error	count=1
function	params used by ||| params	count=1
module	internal ||| contrib keras python keras	count=1
arg	learn the ||| x	count=1
module	for the [module_2] ||| [module_1] [module_2]	count=2
function	fields ||| fields	count=1
arg	[arg_1] on col_seq ||| [arg_2] [arg_1]	count=4
function	launch the ||| launch	count=1
class	stack for tests ||| test	count=1
function	runs a single epoch ||| run one epoch	count=1
function	whether this is ||| is	count=1
function_arg	[function_1] side_effects ||| [function_1] tensor [arg_2]	count=1
function	compute gradients of ||| compute gradients	count=1
function_arg	[function_1] sgv0 to ||| [function_1] [arg_2]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] type [arg_2]	count=4
module	self _value ||| contrib bayesflow python	count=1
function_arg	batch normalization layer ||| batch norm inputs	count=1
function	connected input ||| connected inputs	count=2
function_arg	[function_1] out grads ||| [arg_2] [function_1]	count=1
function_arg	to extend [arg_2] ||| [function_1] tensor [arg_2]	count=1
arg	of ||| ops	count=1
function	trainable variables ||| get trainable variables	count=2
function	l1 ||| l1	count=1
function	[function_1] integer ||| [function_1] [function_2]	count=4
arg	dictionary ||| x	count=1
function	makes this [function_2] ||| [function_1] [function_2]	count=2
module	the ||| python debug	count=1
function_arg	[function_1] of ||| [function_1] [arg_2]	count=5
function	leaf impurity of ||| impurity	count=1
function_arg	[function_1] fakebigqueryserver ||| [arg_2] [function_1]	count=1
arg	in labels ||| labels	count=1
class	1 in that coordinate ||| multinomial	count=1
arg	collects ||| output_file_path graph ignore_regex_fpaths	count=1
function_arg	[function_1] given path ||| [function_1] [arg_2]	count=1
class	set ||| operator udvhupdate	count=1
arg	the output ||| tensor_in_sizes glimpse_sizes offsets	count=1
function	device on which values ||| device	count=1
arg	scope ||| scope	count=6
class	values ||| dirichlet	count=1
function	returns global [function_2] ||| [function_2] [function_1]	count=1
class	of ||| directory	count=1
function	then tile along the ||| expand and tile	count=1
arg	from a logdir ||| logdir plugin_name asset_name	count=1
arg	[arg_1] tensor ||| [arg_2] side_effects [arg_1]	count=2
module	of a single sample ||| ops	count=2
function	[function_1] [function_2] ||| [function_2] eval metric [function_1]	count=2
function	reads the [function_2] ||| [function_2] [function_1]	count=1
function	returns prediction [function_2] ||| [function_1] [function_2]	count=2
function_arg	[function_1] input ||| [arg_2] [function_1]	count=4
module	s of a ||| contrib keras python keras engine	count=2
function	current number ||| size	count=1
function	then return tensor ||| assert valid sample	count=1
function	a linear operator ||| create operator	count=1
function	estimate data distribution ||| estimate data distribution	count=2
arg	around gen_spectral_ops irfft* ||| ifft_fn	count=1
function	make sure the ||| ts compatibility	count=1
function	a quantized ||| quantized	count=1
class	to make sure ||| test	count=1
function	of session session ||| session	count=1
function	node def from ||| node from	count=1
arg	scale ||| scale validate_args allow_nan_stats	count=1
module	the desired shape of ||| python ops	count=1
function_arg	their defs [arg_2] ||| [function_1] [arg_2]	count=1
class	to the file ||| tfrecord writer	count=1
module	are sessionrunhook raises ||| python estimator	count=1
module	the gradient of ||| python ops	count=3
module	text ||| python keras preprocessing	count=2
class	python ||| analyzer	count=1
class	tests ||| weighted sum test	count=1
function	[function] previously revealed ||| [function]	count=1
function	input with ||| input	count=3
function	from ||| build	count=1
arg	entries contained within a ||| dirname	count=1
function	pooling [function_2] ||| [function_1] [function_2]	count=2
function	the column ||| col	count=1
class	classification ||| estimator	count=1
arg	labeled tensor ||| labeled_tensor	count=2
module	check to make ||| tools compatibility	count=1
function	[function_1] for input ||| [function_2] [function_1]	count=3
function	that initializes [function_2] ||| [function_2] [function_1]	count=2
function	collects the ||| collect input	count=1
function	to a list of ||| list of op	count=1
module	helper ||| contrib factorization python ops	count=2
arg	file path and ||| path	count=1
function	return ||| sample	count=1
function	test ||| get test	count=1
function	into pil format ||| img	count=1
function	invalidate ||| invalidate transitively	count=1
class	test ||| variation test	count=2
function	registers a ||| register	count=2
arg	cells in ||| conf cells	count=1
module	learn the ||| learn preprocessing	count=1
function	weighted cross-entropy [function] ||| sequence [function] by	count=2
function	the output mask ||| get output mask	count=2
function	tied ||| tied	count=2
function_arg	resnet-50 model [arg_2] ||| [arg_2] [function_1]	count=1
module	keras ||| contrib keras python keras	count=4
module	list of ||| ops	count=33
function	the diagonal of d ||| diag	count=1
function	converts embedding ||| extract embedding	count=1
class	pooling function ||| pooling test	count=2
module_class	tensor s [class_2] ||| [module_1] [class_2]	count=12
module_class	a new adadelta ||| python training adadelta	count=1
function_arg	[function_1] v ||| [function_1] resource [arg_2]	count=2
function	in test [function_2] ||| [function_1] [function_2]	count=2
function	vgg 19-layers version e ||| vgg 19	count=1
function	loads a [function_2] ||| [function_2] [function_1]	count=2
function	queue ||| examples shared queue	count=1
class	common config ||| parser config	count=1
module	returns a ||| framework python framework	count=1
module	transforms each text ||| keras	count=2
function	[function_1] bias names ||| [function_1] [function_2]	count=2
module	rich ||| debug cli	count=1
class	a forest ||| forest	count=3
module	if ||| python learn datasets	count=1
function	feature ||| sequence feature	count=1
module	operator ||| python ops	count=1
function	wrapper for the graph ||| graph	count=1
function	read sparsetensors from a ||| sparse from	count=1
function	the given state ||| call cell	count=2
module	of a relaxedcategorical ||| distributions python ops	count=1
function	[function_1] by sdcaoptimizer ||| [function_2] [function_1]	count=1
class	without extra layers before ||| resnet utils test	count=1
function_arg	test data directory ||| test data path	count=1
module	for "dense*dense" ||| python ops	count=1
function	the row ids ||| rows	count=1
function	a bucketized [function_2] ||| [function_2] [function_1]	count=1
module	sample ||| python ops	count=3
function	resnet_v2() for arg ||| resnet v2	count=2
arg	tensors ||| ops	count=1
function	decorator ||| decorator	count=1
function	inputs of ||| inputs tensor info from meta	count=1
module	from ||| python debug cli	count=2
function	given sensitivity ||| sensitivity	count=1
function	the id [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] sparse_column_with_hash_bucket ||| [function_2] [function_1]	count=2
module	gets ||| contrib learn python learn estimators	count=2
class	test ||| class test	count=2
module	transforms each text ||| preprocessing	count=1
function	output a summary ||| spec summary	count=1
function	the percentage ||| percentage	count=1
function	based on this dtype ||| dtype	count=1
function	sparse tensor ||| sparse	count=4
function	names of variables ||| names	count=1
function	dense [function_2] ||| [function_2] [function_1]	count=4
function_arg	first dimension [arg_2] ||| [arg_2] [function_1]	count=1
class	of given ||| dir	count=1
function_arg	<= [arg_2] ||| [arg_2] [function_1]	count=3
class	clone ||| attention wrapper state	count=1
arg	softmax_cross_entropy_with_logits ||| onehot_labels weights	count=1
function	to ops ||| ts	count=1
arg	the cells in dim_indices ||| dim_indices conf cells c_prev	count=1
function	given example ||| from example	count=1
function	match ||| filter	count=1
function	to enqueue ||| to enqueue	count=2
module	a keras tensor ||| python keras	count=1
class	with no rich ||| rich line	count=1
class	and only ||| graph	count=1
function	returns a header for ||| get header from	count=1
module	broadcast ||| python ops	count=1
class	mixture ||| mixture	count=2
function	checkpoint [function_2] ||| [function_1] [function_2]	count=3
module	cell with [module_2] ||| [module_1] [module_2]	count=1
function_arg	and process [arg_2] ||| [arg_2] [function_1]	count=1
function	variables ||| analyze vars	count=1
function	returns ||| get checkpoint	count=1
module	integers ||| preprocessing	count=1
function	basic metrics ||| metrics	count=1
function_arg	static shape [arg_2] ||| [arg_2] [function_1]	count=1
arg	using class ||| logits	count=1
function	restore_variable_values() [function_1] [function_2] ||| [function_1] [function_2]	count=8
class	curses ||| curses	count=1
function	scope to ||| name scope	count=1
module	returns ||| learn estimators	count=3
function_arg	[function_1] debug-dumped ||| [arg_2] [function_1]	count=4
module	check ||| python debug cli	count=1
module	the axes of ||| ops	count=1
function	[function_1] cycling ||| [function_1] [function_2]	count=1
module	file to disk ||| python summary	count=1
arg	custom_getter to [arg_2] ||| [arg_2] [arg_1]	count=1
function	the dump path ||| dump path	count=2
function	[function_1] embeddings for ||| [function_2] [function_1]	count=2
function_arg	[function_1] v ||| [function_1] [arg_2]	count=2
function	tensor ||| sparse tensor	count=1
module	for the next runge-kutta ||| contrib integrate python	count=1
module	a batch of beams ||| ops	count=1
function	computes the mean of ||| mean	count=1
function	tf events [function_2] ||| [function_2] [function_1]	count=1
function	fill ||| batch join	count=1
function	debug [function_2] ||| [function_2] [function_1]	count=5
module	indexies of ||| contrib learn python learn	count=1
function	of this handle ||| get resource handle	count=2
function	sparse tensor that ||| sparse	count=1
class	the session ||| debug wrapper session	count=1
function_arg	event file [arg_2] ||| [function_1] [arg_2]	count=1
module_class	[module_1] keys ||| [module_1] [class_2]	count=7
class	normal distribution on r^k ||| normal tri	count=1
module	graph building doesn't ||| contrib tensor_forest hybrid python	count=1
function	[function_1] dump path ||| [function_1] cont call [function_2]	count=1
module_class	[module_1] [class_2] ||| [module_1] binary [class_2]	count=1
class	handler with ||| handler	count=1
function	a sparsetensor ||| sparse tensor	count=1
module	check to ||| tools compatibility	count=1
module	systems of equations with ||| python ops	count=1
arg	and each cluster ||| clusters	count=1
function	the partitioned [function_2] ||| [function_2] [function_1]	count=1
function	tensors if defined in ||| tensors	count=1
function	[function_1] experiment ||| [function_2] [function_1]	count=2
function	define a ||| define	count=3
arg	screen output from ||| output node_name enable_list_tensors enable_node_info	count=1
arg	input data ||| data	count=1
function	proper shape values ||| maybe assert valid sample	count=1
arg	tensor alongside the specified ||| keepdims	count=4
function	op to use based ||| string to hash bucket fn	count=1
class	benchmarks ||| benchmark	count=1
arg	row of input_tensor ||| input_tensor	count=1
function	we don't ||| test	count=1
function	a header for ||| header from ops and	count=1
module	integrate ||| contrib integrate	count=1
class	any input ||| clicontrol dep	count=1
function	prints ||| show	count=1
arg	with best effort ||| adjoint adjoint_arg	count=1
function	compression for large ||| large	count=1
module	of underlying ||| ops	count=1
arg	if reduction_indices is ||| axis reduction_indices	count=1
module	the element-wise max of ||| ops	count=1
module	dataframe into two dataframes ||| learn dataframe	count=1
module	predicate/value ||| python layers	count=1
arg	a ||| name shape	count=1
function	block ||| v1 block	count=1
function	not [function] data ||| test [function]	count=1
class	to make ||| test upgrade files	count=1
module	embeddings ||| contrib layers python layers	count=1
function	tensors linked to ops ||| ts	count=1
function	a checkpoint ||| checkpoint	count=5
function	when error [function_2] ||| [function_2] [function_1]	count=8
function	file and ||| file and	count=1
function	performs greedy decoding ||| ctc greedy decoder	count=2
function	true positives ||| streaming sparse true positive at k	count=1
class	run ||| batch norm benchmark	count=1
function	a watch_fn ||| watch fn	count=1
function	computes the shape of ||| op output shape	count=1
function_arg	[function_1] sparsetensor into ||| [function_1] dense [arg_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] brightness [arg_2]	count=4
module	of zero ||| ops	count=1
function	depth [function_2] ||| [function_2] [function_1]	count=2
function	performs beam [function_2] ||| [function_2] [function_1]	count=5
function	[function_1] positives ||| [function_1] [function_2]	count=12
arg	and scale ||| scale validate_args	count=1
function_arg	[function_1] [arg_2] ||| [function_1] mode [arg_2]	count=7
function	[function_1] tf ||| [function_1] to [function_2]	count=2
function_arg	util to [arg_2] ||| [function_1] tf sparse [arg_2]	count=1
module	instance ||| contrib learn python learn	count=1
function	resultant of an elementwise ||| compute elemwise	count=1
arg	summarywriter and ||| event_writer graph graph_def	count=1
function	step false positives ||| false positive at k	count=1
function	computes various ||| at thresholds	count=1
function_arg	[function_1] row and ||| [arg_2] [function_1]	count=4
function	for every temporal slice ||| time distributed	count=1
function	prefix using the ||| prefix	count=1
function	should ||| should work	count=1
function	analyze tensor ||| analyze	count=1
function_arg	matrix [arg_2] ||| [function_1] [arg_2]	count=1
module	of tensors that ||| distributions python ops	count=2
function	works with real valued ||| real valued linear	count=1
function	[function] tensor has ||| test inconsistent [function] size raises	count=4
arg	images ||| images	count=3
function	restore ||| sharded restore	count=1
class	tests ||| atrous convolution test	count=1
function	return dict ||| guide index	count=1
function	[function_1] call ||| [function_2] [function_1]	count=3
module	dictionary and return ||| python learn preprocessing	count=1
class	[class_1] cell output ||| [class_1] [class_2]	count=1
class	a tensor for ||| lazy	count=1
function	build an input_fn appropriate ||| build	count=2
function	for nearest neighbor ||| nearest neighbor grad	count=2
class	initializes ||| global step waiter hook	count=1
arg	for given feature_columns ||| feature_columns name example_names	count=1
function	an op ||| run op prebuilt	count=1
function	state from a dict ||| dict to	count=1
function_arg	[function_1] loaded from ||| [arg_2] [function_1]	count=1
function	construct a richline with ||| init	count=1
module	vocabulary dictionary and return ||| python learn preprocessing	count=1
function	[function_1] of higher ||| [function_2] [function_1]	count=4
arg	a tensor ||| input_	count=1
arg	recall@k and precision@k ||| predictions_idx class_id weights	count=1
module	step of ||| python ops	count=7
arg	a file with given ||| filename tensor_names	count=1
function_arg	[function_1] for optimizer ||| [function_1] loss loss [arg_2]	count=2
function	bias [function_2] ||| [function_1] [function_2]	count=8
function	to ||| regex	count=1
class	as a dense tensor ||| sparse feature	count=2
function	specificity at a ||| specificity at	count=1
arg	imports the graph ||| input_map return_elements name	count=1
class	to make ||| test upgrade	count=1
function	have a ||| test	count=1
function	[function_1] given weight ||| [function_2] [function_1]	count=6
arg	string record to the ||| record	count=1
function	multiply specified gradients ||| multiply gradients	count=2
module	returns a ||| framework	count=4
module	linked to ops that ||| contrib graph_editor	count=1
function	custom evaluation metrics that ||| custom metrics	count=1
function	of a line ||| line	count=1
function	check ||| check dimensions	count=1
function	leaf impurity ||| average impurity	count=1
function	score ||| score	count=4
function	from caller and hooks ||| caller and hook	count=1
function	modulus zero ||| modulus zero	count=2
module	_guideref ||| tools docs	count=2
function	an accumulated ||| prop accumulated	count=1
function	synthetic boolean_labels ||| synthetic	count=1
function	single sparsetensor ||| sparse merge	count=1
function	the diagonal ||| diag update	count=1
function_arg	tensor name [arg_2] ||| [function_1] names [arg_2]	count=1
module	asserts ||| learn python learn estimators	count=1
module	batch systems of ||| ops	count=1
class	then return tensor version ||| dirichlet	count=1
module	previous output tensors ||| contrib grid_rnn python	count=1
arg	over ||| x y sample_weight	count=1
function	variable or ||| variable or	count=1
module	returns a training op ||| layers	count=1
function	fine [function] ||| test integer [function]	count=2
function	print ||| tf print	count=2
arg	prior on the ||| prior scale s	count=1
function	the input types ||| accepts	count=1
function_arg	input layer [arg_2] ||| [arg_2] [function_1]	count=1
function	all are ||| type	count=1
function	merge op ||| merge	count=1
function	histogram ||| histogram fixed width	count=1
function	sparsetensordensematmul ||| mat mul	count=1
function	serving ||| serving input	count=1
class	normal distribution ||| normal	count=3
module	for node-status labels ||| debug	count=1
function	creates a monitoredsession for ||| monitored	count=1
module_class	[module_1] [class_2] ||| [module_1] chief [class_2]	count=2
module	eventfilewriter ||| python summary writer	count=2
function	trace information ||| store trace info	count=1
function	command ||| command	count=8
function	elements of ||| elements	count=1
function	proper ||| maybe assert valid	count=1
function	a sequence ||| to	count=1
function	the batch [function_2] ||| [function_1] [function_2]	count=1
module	feature ||| contrib layers python layers	count=1
function	number of elements in ||| num	count=2
function	of tensor ||| to tensor	count=3
module	ops created by ||| ops	count=1
arg	setup() and [arg] ||| [arg]	count=3
arg	to the specified shape ||| shape	count=1
function	step and discard expired ||| step and maybe purge	count=1
function	the ||| collection proto	count=1
function	get the op type ||| op type	count=1
module	list ||| python lib io	count=1
arg	the ||| ops	count=3
function	op to use ||| string to hash bucket	count=1
module_class	[module_1] forward ||| [module_1] [class_2]	count=1
function	foldr on the ||| foldr	count=1
arg	specified min ||| t clip_value_min clip_value_max name	count=1
module	with training ||| contrib learn python learn	count=3
module	extract ||| python learn datasets	count=1
module	ops that creates variables ||| ops	count=1
arg	along given axis ||| num_shards axis	count=1
module	logistic ||| python learn utils	count=1
function	tensors ||| tensors near	count=1
function_arg	[function_1] input samples ||| [function_1] classes [arg_2]	count=1
module	ops created by ||| python ops	count=1
function	has produced ||| produced	count=1
class	check ||| test upgrade files	count=2
arg	fits internal statistics to ||| augment rounds seed	count=1
function	gradients for the 2 ||| grad	count=1
arg	call func ||| func	count=1
class	[class_1] creator ||| [class_1] [class_2]	count=3
module	dictionary ||| learn python learn	count=1
function	shallow structure of ||| shallow structure	count=2
class	apply this transform to ||| flow transform	count=1
function	respect to sparse ||| sparse recall at top k	count=1
function	predict method with as_iterable=false ||| predict as iterable false	count=2
class	construct multivariate normal distribution ||| multivariate normal linear	count=1
function	name -> _guideref ||| build guide	count=1
arg	a tf graph ||| graph	count=1
function	input_fn appropriate for serving ||| default serving input fn	count=1
function	a graph in tensorboard ||| tensorboard	count=1
function	creates an rnn ||| get dynamic rnn	count=1
function	csv ||| csv with feature spec	count=2
function	softmax_cross_entropy_with_logits ||| softmax cross entropy	count=1
module	of tensors ||| python ops	count=12
class	[class_1] projection and ||| [class_2] [class_1]	count=2
function	dimension ||| dim	count=1
function	v1 ||| v1	count=1
function	to a numpy matrix ||| to matrix	count=1
module	loss using ||| python ops losses	count=1
function	nodes ||| remove training nodes	count=1
module	step of ||| ops	count=7
module	elements of ||| ops	count=1
module	numpy image tensor ||| keras python keras preprocessing	count=3
class	node names of the ||| node	count=1
function	tile along ||| tile	count=1
function	to a graph ||| graph	count=1
function	the python traceback ||| node traceback	count=1
function	[function] partially ||| map structure up [function]	count=1
function	least the given ||| least	count=1
arg	the predictions ||| predictions	count=5
module	input [module_2] ||| [module_2] [module_1]	count=1
function	the graphdef version information ||| def versions	count=1
function	[function_1] asset from ||| [function_1] [function_2]	count=4
function	recall values for ||| streaming recall	count=1
class	operator to ||| operator scaled identity	count=1
class	a ||| upgrade files	count=2
function	a 1d ||| strict 1d	count=1
function	using invalid regex to ||| invalid regex	count=1
class	discards ||| mocking	count=1
class	minimize while training ||| hybrid model	count=1
arg	processes [arg_2] ||| [arg_2] [arg_1]	count=6
module	samples ||| keras python keras	count=1
function	metric names to tuple ||| metric map	count=1
function	an attribute (e g ||| attribute at	count=1
function	of integers ||| sequences	count=1
class	partitioned variable ||| partitioned variable	count=1
function	derivatives for nearest neighbor ||| nearest neighbor	count=1
module	desired shape of a ||| ops	count=1
arg	of a model ||| model	count=1
function	add the backprop loop ||| add back prop loop	count=1
module	given factorization ||| factorization	count=1
module	rank-2 ||| solvers	count=1
arg	num_epochs [arg_2] ||| [arg_1] [arg_2]	count=4
function	integer column ||| int column	count=2
function	tests that labels ||| test	count=1
function	the update ops for ||| update	count=1
function	and numpy masking ||| numpy	count=1
function	the help [function_2] ||| [function_1] [function_2]	count=3
function	using [function_1] [function_2] ||| python ops quantized distribution [function_1] [function_2] logcdf	count=1
function	to be ||| prepare or wait for	count=1
function	[function_1] multipliers to ||| [function_2] [function_1]	count=3
function	[function_1] use ||| [function_2] [function_1]	count=3
function	for one ||| one	count=1
class	part of ||| sequential	count=1
arg	at shortcut ||| input_tensor kernel_size filters stage	count=1
module	pixels ||| ndlstm python	count=1
function	[function_1] spatial zoom ||| [function_1] [function_2]	count=2
function	random spatial shear of ||| random shear	count=1
arg	gputracer logging ||| device_name	count=1
arg	predictions with respect ||| predictions	count=3
function	shape values ||| sample	count=1
module	sequence-to-sequence ||| contrib legacy_seq2seq python ops	count=2
function_arg	true if [arg_2] ||| [function_1] resource [arg_2]	count=4
arg	tensor with all ||| tensor	count=1
arg	of co-existance ||| y input_fn feed_fn	count=1
arg	at level ||| level	count=2
function	vgg 19-layers version ||| vgg 19	count=1
module	get the names of ||| lib	count=1
arg	new exponentialmovingaverage object ||| decay num_updates zero_debias name	count=1
class	pill [class] ||| [class]	count=3
function	checkpoint filenames and ||| last checkpoints with	count=2
function	returns a header ||| get header from	count=1
function	a new tensor ||| tensor	count=1
module	add ||| contrib linalg python ops	count=1
function	second test function ||| test function with	count=1
class	[class_1] the event ||| [class_2] [class_1]	count=2
module_class	[module_1] normal distribution ||| [module_1] [class_2]	count=3
function	predictions ||| at thresholds	count=1
function_arg	minimize [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	[function_1] for recall@k ||| [arg_2] [function_1]	count=8
function	for guide files ||| md files	count=1
function	into [function_2] ||| [function_2] [function_1] input_exprs_str	count=2
function	first [function_2] ||| [function_2] [function_1]	count=5
function	latest saved ||| latest	count=1
class	lstm [class_2] ||| [class_1] [class_2]	count=1
arg	the encoded ||| image_shape image_format label	count=1
class	outputs the corresponding values ||| with	count=1
module	of an ||| ops	count=2
module	training ||| learn estimators	count=1
function	resnet ||| resnet	count=2
module	mapping of ||| framework python ops	count=1
function	a tensorshape of variable ||| variable shape	count=1
arg	operator ||| operator	count=5
function	computes exact [function_2] ||| [function_2] [function_1]	count=2
function	session [function_2] ||| [function_2] [function_1]	count=4
class	[class_1] variable wrapper ||| [class_2] [class_1]	count=2
function	execute the ||| execute schedule	count=1
arg	convolution ||| stride padding	count=1
arg	with screen output if ||| output	count=1
function_arg	[function_1] a named ||| [arg_2] [function_1]	count=1
class	to the event file ||| to event transformer	count=2
class	whether this plugin ||| fake plugin	count=1
module	local ||| debug wrappers	count=1
module	helper to ||| contrib distributions python ops	count=2
function	that [function_2] ||| [function_2] gradient [function_1]	count=1
function	loads an [function_2] ||| [function_2] [function_1]	count=2
function	to debug ops ||| debug ops	count=2
function	list of names for ||| names	count=1
function	#4296 ||| grid2lstmcell with rnnand dynamic batch size	count=1
arg	ops that match the ||| ops	count=1
function	to use based ||| get string to hash bucket fn	count=1
module	generates ||| tools dist_test scripts	count=2
function	print the [function_2] ||| [function_2] [function_1]	count=2
class	metadata information [class] session ||| [class]	count=1
function	mean absolute [function_2] ||| [function_2] [function_1]	count=3
module	ids of ||| contrib factorization python ops	count=1
function_arg	[function_1] incompatible changes ||| [arg_2] [function_1]	count=4
function	the total ||| total	count=5
arg	given inputs ||| inputs	count=1
function	for training for full ||| full	count=1
function	return indexies of ||| transform	count=1
arg	a serialized minibatch ||| serialized_sparse dtype rank	count=1
function	stores trace ||| store trace	count=1
arg	graph element name ||| element_name	count=1
arg	cell with ||| cell num_proj activation	count=1
function_arg	[function_1] [arg_2] ||| [function_1] file to string [arg_2]	count=3
arg	for recall@k and ||| class_id weights	count=1
function	tensor name ||| tensor	count=1
module	matches ||| metrics python metrics	count=1
function	and ||| and slice	count=1
function	control dependency on ||| control edges	count=2
function	get the device of ||| device	count=1
function	have invalid ||| test invalid number of classes	count=1
module	vocabulary ||| contrib learn python	count=1
arg	distances to ||| batch_size steps	count=1
function_arg	[function_1] entire contents ||| [function_1] file to string [arg_2]	count=1
arg	s potentially dependent on ||| updates	count=1
function	converts a ||| sequences to	count=1
class	one step ||| grid	count=1
function	make sure the ||| check ts compatibility	count=1
arg	dimension of 1 ||| name dim	count=1
function	tensors linked to ||| filter ts from	count=1
function	the help information for ||| help for	count=1
function_arg	[function_1] many tensor ||| [function_1] [arg_2]	count=1
function_arg	filename [arg_2] ||| [arg_2] [function_1]	count=3
function_arg	[function_1] on x ||| [arg_2] [function_1]	count=3
function	node name ||| node	count=1
function	deconv layer [function_2] ||| [function_1] [function_2]	count=1
function	tensorflow graph ||| graph	count=2
class	run the enqueue ops ||| queue runner	count=1
function	variables in a graph ||| convert variables	count=1
arg	microbenchmark ||| target size iters	count=1
module	[module] tensor ||| [module]	count=1
module	text ||| python keras	count=1
function	the optimal size ||| optimal step size	count=1
function_arg	x [arg_2] ||| [arg_2] [function_1]	count=9
function	and stores trace ||| store trace	count=1
arg	value in values ||| values dimension name	count=1
function	firsteventtimestamp() [function_2] ||| [function_2] [function_1]	count=2
function	the test data ||| test data	count=2
arg	protocol buffer with ||| values collections name	count=1
function	input with ||| input values	count=3
function_arg	[function_1] [arg_2] ||| [function_1] shapes [arg_2]	count=4
module	the names of ||| python ops	count=1
function_arg	[function_1] given dtype ||| [function_1] [arg_2]	count=1
function	export the ||| maybe export	count=1
function	weight and bias ||| weight and bias	count=3
module	a shape representing ||| framework	count=1
module_class	underlying [class_2] ||| [module_1] [class_2]	count=1
function	state with ||| state	count=1
function	centered ||| disable centered	count=1
function	sparse ||| sparse recall	count=1
function	persistent ||| delete	count=1
function	and names that ||| and slice	count=1
function_arg	the global [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	[function_1] console ||| [arg_2] [function_1]	count=4
module	which values will be ||| framework	count=1
module	helper which properly compares ||| distributions python	count=1
function	of tensor or indexedslices ||| to tensor or indexed slices	count=1
function	prints a ||| print	count=1
module	transform that ||| python learn dataframe transforms	count=1
function	computes the mean absolute ||| mean absolute	count=1
function	help output ||| help	count=2
function	resnet_v2() for arg and ||| resnet v2	count=2
module	of tensors ||| rnn python ops	count=1
function	print a ||| tf spec print	count=1
module	return the correct container ||| contrib graph_editor	count=1
arg	of x element-wise ||| x name	count=1
arg	to axis ||| axis	count=1
module	all the nodes ||| contrib graph_editor	count=1
function_arg	doc to [arg_2] ||| [arg_2] [function_1]	count=1
module	if all are sessionrunhook ||| python estimator	count=1
function	with a while loop ||| with while loop	count=1
function	posterior predictive [function_2] ||| [function_2] [function_1]	count=6
function	the collections ||| add to collections	count=1
function	of the given task ||| task	count=1
module	tensor of a relaxedcategorical ||| distributions python ops	count=1
function_arg	registers [arg_2] ||| [function_1] [arg_2]	count=1
function	fit function for ||| fit	count=1
class	data ||| image data	count=1
function	a depth [function_2] ||| [function_1] [function_2]	count=2
function	step at which ||| step	count=1
function	if all are ||| check hooks type	count=1
module	finish computation of ||| contrib distributions python ops	count=1
module	solves systems of linear ||| python ops	count=1
module	returns ||| python feature_column	count=4
function	run() call ||| run calls	count=1
function	returns metagraphdef ||| meta graph	count=1
arg	to the op if ||| op	count=1
function	a placeholder ||| t with placeholder	count=1
class	node-status ||| stepper cli	count=2
function	either forward or backward ||| ndlstm	count=1
class	dictionary ||| processor	count=1
module	vocabulary dictionary and ||| contrib learn python learn	count=1
module	a list of tensors ||| framework python ops	count=1
module	core version with default ||| contrib learn python learn learn_io	count=1
function	build an [function_2] ||| [function_2] [function_1]	count=8
function	start line of function ||| start	count=1
arg	input-output pairs for the ||| image ksizes strides rates	count=1
class	with ||| session debug test base	count=1
function	get all the ||| filter ts from	count=1
function	adds the [function_2] ||| [function_1] [function_2]	count=4
function	raises ||| hooks type	count=1
arg	given threshold ||| threshold weights metrics_collections	count=1
class	shape values then return ||| dirichlet	count=1
class	if the timer ||| timer	count=1
function	used within an arg_scope ||| arg scope	count=1
module	tests that [module] set correctly ||| [module]	count=1
function	image [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] metric ops ||| [function_1] [function_2]	count=4
module	an iterable of ||| tensorboard plugins	count=1
function	[function_1] [function_2] ||| [function_1] fetch and name [function_2]	count=1
function	evaluation against ||| eval	count=1
module	produced or ||| python framework	count=1
module	the axes of ||| contrib labeled_tensor python ops	count=1
function	multiclass [function_2] ||| [function_1] [function_2]	count=1
class	of elements ||| indexed slices	count=1
function	-> ||| guide index	count=1
function_arg	adds [arg_2] ||| [arg_2] [function_1]	count=2
function	object for ||| object	count=1
function	with respect to sparse ||| sparse	count=1
module	returns ||| learn python learn learn_io	count=2
class	true if the timer ||| step timer	count=1
function	train [function_2] ||| [function_1] [function_2]	count=2
arg	to_proto and [arg_2] ||| [arg_2] [arg_1]	count=3
class	full names ||| visitor	count=1
function	by dense matrix ||| dense matmul	count=1
module	transform ||| contrib graph_editor	count=1
class	a reader ||| reader	count=2
function	[function_1] integer column ||| [function_1] [function_2]	count=2
function	parameters and flops for ||| get logged ops	count=1
arg	of elements across dimensions ||| input_tensor axis keep_dims name	count=6
arg	the feeds and fetches ||| fetches feeds	count=1
function	node [function_2] ||| [function_2] with fake quant [function_1]	count=1
class	values will be ||| slices	count=1
function	to an example ||| to example	count=1
function	a tensor of ||| tensor	count=1
function	[function_1] into ||| [function_1] [function_2] input_exprs_str	count=3
arg	logits ||| logits	count=4
function	of numpy arrays into ||| numpy	count=1
arg	specified dimension ||| dim epsilon scope	count=1
function	of a tensor )) ||| reduce logsumexp	count=1
module	the ||| python summary	count=3
class	fetch mapper that handles ||| mapper	count=1
module_class	[module_1] forward prop ||| [module_1] [class_2]	count=3
class	the dilation ||| dilation	count=1
function	slots created by ||| slot	count=1
function	load the ||| load	count=1
function	collection with ||| to collection	count=1
function	[function_1] first operation ||| [function_1] [function_2]	count=1
function	list of unique ||| unique fetches	count=1
arg	an ||| op	count=1
function_arg	[function_1] [arg_2] ||| [function_1] accumulated value [arg_2]	count=3
class	shape based on ||| tensor shape	count=1
function	of tensors to a ||| tensors to	count=1
module_class	[module_1] underlying barrier ||| [module_1] [class_2]	count=3
arg	an object is of ||| obj	count=1
arg	given a feature_spec ||| cls filepatterns feature_spec	count=1
arg	sequence to sequence model ||| decoder_inputs encoder_cell decoder_cell	count=1
function_arg	[function_1] protocol buffer ||| [function_1] [arg_2]	count=4
function	[function_1] a sqrt_solve ||| [function_1] [function_2]	count=1
function	sequence of ||| texts	count=1
class	the internal saver state ||| saver	count=1
function	read queue batch ||| read keyed batch features shared queue	count=1
module	equal ||| python ops distributions	count=1
function	shallow ||| shallow	count=1
function	mean and variance of ||| normalize moments	count=1
class	normal distribution on r^k ||| normal diag plus low rank	count=1
function	spec [function_2] ||| [function_1] [function_2]	count=2
arg	initialize the parameters for ||| num_units input_size use_peepholes	count=1
function	the asset tensors ||| get asset tensors	count=2
function	as linear_model_fn but ||| model fn with model fn	count=2
function	holding the original ||| original	count=1
function_arg	[function_1] streamingdatafeeder instance ||| [arg_2] [function_1]	count=1
class	optimizer from numpy arrays ||| optimizer	count=1
arg	riemann sum ||| num_thresholds	count=2
function	given boundary ||| boundary	count=1
arg	sufficient statistics ||| counts mean_ss variance_ss shift	count=1
function	[function_1] graphs ||| [function_2] [function_1]	count=1
arg	tensor of ||| tensor	count=2
arg	on a tf graph ||| graph	count=1
class	dictionary and return ||| processor	count=1
function	the values of dense ||| values	count=2
function	computes the root mean ||| streaming root mean	count=1
function	to init [function_2] ||| [function_2] [function_1]	count=1
arg	given slicing ||| slicing initializer dtype	count=1
function	rotation ||| rotation	count=1
function	a filter ||| filter	count=1
function	[function_1] average pooling ||| [function_1] [function_2]	count=1
function	the column [function_2] ||| [function_1] [function_2]	count=1
function	all inputs of the ||| inputs	count=1
arg	keys to use ||| keys	count=1
function	a model_fn [function_2] ||| [function_2] [function_1]	count=2
function	a temporary directory ||| get temp dir	count=2
arg	x or [arg_2] ||| [arg_2] [arg_1]	count=1
arg	cells in dim_indices ||| dim_indices conf cells	count=1
class	perform ||| fractional max pool test	count=2
arg	operations ||| examples	count=2
class	outputs ||| with hash	count=1
function	returns a name ||| name	count=1
function	add one or ||| add	count=1
function	returns ||| get in	count=1
class	[class_1] should be ||| [class_2] [class_1]	count=3
function	histogram ||| compress histogram	count=1
module	eventfilewriter ||| summary writer	count=2
arg	values of many tensor ||| tuples	count=1
arg	subscribes [arg_2] ||| [arg_2] side_effects [arg_1]	count=4
function	docstring and ||| docstring	count=1
function_arg	function for building a [function_1] [arg_2] ||| [function_1] [arg_2]	count=1
class	creates fetch mapper that ||| fetch mapper	count=1
function	results for gamma ||| gamma greater	count=1
module	n dimensional version of ||| learn python learn ops	count=1
function	same shape ||| shape	count=1
function	static valueerror ||| static	count=1
function_arg	[function_1] [arg_2] ||| [function_1] to gradients [arg_2]	count=6
function	to specified invalid ||| by invalid	count=1
function	[function_1] for multi ||| [function_2] [function_1]	count=8
arg	call node op ||| op out_grads	count=1
function	shape function for ||| shape	count=2
class	based ||| dtype	count=1
arg	the labels and predictions ||| predictions labels weights metrics_collections	count=2
module	of ||| tensorboard backend	count=1
function	given weight column ||| weights	count=3
class	file was opened ||| file io	count=1
function_arg	signaturedef [arg_2] ||| [function_1] [arg_2]	count=2
arg	data to returns ||| data	count=1
module	set of ||| python ops	count=6
function_arg	[function_1] mat ||| [arg_2] [function_1]	count=5
module	models that ||| contrib learn python learn estimators	count=1
function	tests a [function_2] ||| [function_2] [function_1]	count=1
function	product between lists ||| dot product	count=1
function	a shape ||| shape with	count=2
function	[function_1] python file ||| [function_2] [function_1]	count=1
class	keys and ||| mutable dense hash	count=1
function	functions for [function_2] ||| [function_2] [function_1]	count=2
module	computes ||| contrib losses python losses	count=1
arg	a new ||| use_locking	count=1
function	export [function_2] ||| [function_2] [function_1]	count=13
function	original arguments of ||| original args	count=2
function	an exception ||| assert	count=2
function	[function_1] whilecontext ||| [function_2] [function_1]	count=2
function	tensor to use ||| tensor	count=1
module	vocabulary ||| learn	count=2
function	necessary the ||| or	count=1
function	acceptance ||| acceptance	count=1
function	get ||| ts from regex	count=2
class	tensorarray ||| array	count=4
function_arg	exports the [arg_2] ||| [arg_2] [function_1]	count=4
class	no rich attributes or ||| rich line	count=1
module	[module] update_weights op ||| contrib learn [module] learn	count=1
module	output ||| python keras engine	count=1
module	matrix data [module_2] ||| [module_1] [module_2]	count=2
function	values and external_values from ||| values from	count=1
class	of a layer ||| layer	count=8
function	for serving ||| serving input fn	count=1
arg	each value in values ||| values dimension name	count=1
function	pool ops in the ||| pool	count=1
arg	an image by adding ||| image	count=1
function	tile [function_2] ||| [function_1] [function_2]	count=2
function	collect ||| collect	count=1
arg	[arg_1] into num_shards ||| [arg_2] [arg_1]	count=3
function	a sequence ||| sequences	count=1
function	slice out a ||| slice	count=1
class	of the underlying tensorflow ||| base session	count=1
module	0) ||| ops	count=1
module	proper shape values ||| distributions	count=1
class	of the optimizer ||| optimizer	count=2
function_arg	product between [arg_2] ||| [function_1] [arg_2]	count=2
function	notice ||| notice	count=1
function	of input tensors ||| source inputs	count=2
module	infer ||| python ops	count=1
function	[function_1] old values ||| [function_1] [function_2]	count=1
function	docstring and return ||| docstring	count=1
module	indexies ||| contrib learn python learn preprocessing	count=2
arg	row in labels ||| labels	count=1
function	register a [function_2] ||| [function_2] [function_1]	count=1
module	variable and returns it ||| python keras	count=1
module	this cell output dimension ||| contrib rnn	count=1
module	command ||| debug cli	count=6
arg	[arg_1] times ||| [arg_2] [arg_1]	count=1
module	[module] apply ||| [module]	count=1
function	early stop ||| early	count=1
function	[function_1] weights ||| [function_2] [function_1]	count=14
arg	replaces all the ||| sess input_graph_def output_node_names variable_names_whitelist	count=1
arg	[arg_1] to partitions ||| [arg_2] [arg_1]	count=1
function	[function_1] prediction ops ||| [function_2] [function_1]	count=7
function	hook to ||| run hook	count=1
function	that is a multiple ||| version	count=2
function	[function_1] mini ||| [function_2] batch [function_1]	count=1
function	functions [function_2] ||| [function_2] run conversion [function_1]	count=1
function	remove any [function_2] ||| [function_2] [function_1]	count=5
function	containing all the ||| with all	count=1
function	registered for classes a ||| registered	count=1
module	sequence-to-sequence model with ||| contrib legacy_seq2seq python ops	count=1
function	model_fn can return ||| create model fn ops	count=1
class	in the dump ||| debug dump	count=1
class	this cluster ||| cluster	count=1
function	variables and names ||| and	count=1
arg	base_type ||| base_type conversion_func priority	count=1
function	returns [function_2] ||| [function_1] [function_2]	count=23
module	of beams into ||| ops	count=1
function	for a one-hot ||| one hot	count=1
module_class	on [class_2] ||| [module_1] [class_2]	count=2
arg	tf nn sigmoid_cross_entropy_with_logits ||| multi_class_labels	count=1
function	callable that runs a ||| make callable	count=1
function	x to [function_2] ||| [function_1] [function_2]	count=3
function	construct a devicewrapper for ||| init	count=1
function	code ||| sparse dense cwise mul or div grad	count=1
function_arg	[function_1] input_tensors) ||| [function_1] [arg_2]	count=2
function	a specific plugin ||| retrieve plugin	count=1
arg	[arg_1] dimension dim ||| [arg_2] [arg_1]	count=1
function	shape of ||| op output shape	count=1
function	the manual [function_2] ||| [function_2] [function_1]	count=3
function	python traceback of node's ||| traceback	count=1
function	[function_1] initializer ||| [function_1] [function_2]	count=2
class	enqueue ||| queue runner	count=1
function	defines ||| define	count=6
module	quantized ||| python ops	count=1
function	all ||| ts from	count=1
module_class	[module_1] [class_2] format ||| [module_1] [class_2]	count=4
arg	[arg_1] tensor to ||| [arg_2] side_effects [arg_1]	count=4
arg	riemann sum ||| labels predictions weights num_thresholds	count=1
function	the predictions with respect ||| precision at	count=1
function	float labels ||| regression float label	count=2
function	of the device on ||| device	count=1
function_arg	[function_1] appenddocstring object ||| [arg_2] [function_1]	count=1
arg	make sure the model ||| config wait_for_checkpoint	count=1
function	classification using matrix ||| classification training	count=1
class	sample ||| feeder	count=1
arg	entire contents of ||| filename binary_mode	count=1
function	tensor is sparsetensor ||| sparse tensor	count=1
module	which values will be ||| python framework	count=1
function_arg	[function_1] of co-existance ||| [arg_2] [function_1]	count=1
function	[function_1] matrix with ||| [function_1] [function_2]	count=7
function	[function_1] graph for ||| [function_2] [function_1]	count=1
arg	maps activations from ||| activations labels sequence_length target_column	count=3
function	non-quantized real floating point ||| floating	count=1
function	raised when the kernel ||| kernel	count=1
module	carlo estimate of the ||| bayesflow python ops	count=1
class	resample x weights ||| resample	count=1
function	large records is ||| read large	count=1
function	dumping when error occurs ||| debugging during op error	count=1
arg	wait for them ||| timeout	count=1
function	invalid ||| test invalid number	count=1
arg	a specified min and ||| t clip_value_min clip_value_max name	count=1
function	a tensor ||| label tensor	count=1
function	vgg 11-layers version a ||| vgg a	count=1
function	add ops ||| add sharded	count=3
arg	(e g input_tensors) from ||| node_index attr attr_name	count=1
arg	linear operator ||| operator	count=1
function	a tf graph ||| inference graph	count=1
function_arg	call [arg_2] ||| [function_1] [arg_2]	count=3
function_arg	root [arg_2] ||| [arg_2] [function_1]	count=1
arg	an observedstochastictensor ||| dist value name	count=2
function	of input ||| from input	count=1
function	connected output tensors of ||| connected outputs	count=1
arg	dim_indices dimensions ||| dim_indices	count=1
function	[function_1] float ||| [function_1] [function_2]	count=1
arg	[arg_1] dtype ||| [arg_2] [arg_1]	count=7
module	which properly compares two ||| distributions	count=1
arg	[arg_1] added ||| [arg_1] [arg_2]	count=2
arg	function to standardize op ||| name values	count=3
function_arg	the end [arg_2] ||| [arg_2] [function_1]	count=2
function	pandas dataframe for predictors ||| pandas	count=1
module	gradient of ||| ops	count=4
function	of input ||| input	count=2
function	whether given estimator ||| estimator	count=1
function	returns ||| get feed dict	count=1
function	splits the tensor from ||| split	count=1
function	can ||| can	count=2
class	+ ||| operator	count=1
function	poisson distribution ||| poisson	count=1
function	featurecolumns ||| to feature columns	count=1
function	read sparsetensors [function_2] ||| [function_1] [function_2]	count=2
function	model from ||| model from	count=2
arg	for recall@k and precision@k ||| labels predictions_idx k class_id	count=1
function	a scalar ||| scalar	count=3
class	that ||| dumping debug wrapper session test	count=1
module	keras ||| python keras	count=4
arg	[arg] x ||| rhs [arg]	count=2
function	linked to ops ||| ts	count=1
class	the tensor ||| debug tensor	count=1
function	the block ||| block	count=1
function	things ||| unset all	count=1
function	imaginary part ||| imag	count=1
class	the registered function ||| func registry	count=3
class	matrix [class_2] ||| [class_2] [class_1]	count=1
arg	initialize the parameters ||| num_units use_peepholes initializer num_proj	count=1
class	ast ||| flow call visitor	count=1
function	python object ||| to object	count=1
class	r batch systems a ||| pdbase	count=1
function	as [function_2] ||| [function_2] [function_1]	count=1
module	to all ops ||| ops	count=1
function	stack ||| stack	count=1
function	whether a graph element ||| is	count=1
module	helper which ||| distributions python	count=1
arg	a tensorforestestimator instance ||| params device_assigner model_dir graph_builder_class	count=1
function	new control [function_2] ||| [function_1] [function_2]	count=2
function	notice to a docstring ||| notice to docstring	count=1
class	test ||| division test case	count=2
function	per step true positives ||| sparse true positive at k	count=1
module	same as ||| contrib learn python learn estimators	count=3
function	for full [function_2] ||| [function_1] [function_2]	count=1
function	the help ||| help	count=2
module	features ||| contrib learn python learn estimators	count=2
module	in stop_gradient ||| bayesflow python ops	count=1
arg	train ||| train_samples test_samples input_shape num_classes	count=1
function	returns a [function_2] ||| [function_1] unique [function_2]	count=1
function	[function_1] bias ||| [function_1] [function_2]	count=13
function_arg	[function_1] maps a ||| [arg_2] [function_1]	count=2
module	menuitem ||| cli	count=1
function_arg	[function_1] input_tensors) ||| [arg_2] [function_1]	count=2
function	prints a shallow dict ||| print dict	count=1
function	as linear_model_fn but ||| linear model fn with model fn	count=2
function	load ||| load	count=10
module	assert ||| tensor_forest client	count=1
module	the core version with ||| learn learn_io	count=1
arg	two tensors with ||| a b	count=1
function	then return tensor version ||| maybe	count=1
arg	table with ||| table	count=1
function	the global_step tensor ||| global step	count=1
arg	kernellinearclassifier ||| feature_columns model_dir n_classes	count=1
module	elements in this ||| framework	count=1
function	to ||| space to	count=1
module	get ||| layers python layers	count=1
function	[function_1] time ||| [function_1] [function_2]	count=1
function	kernel methods ||| kernel	count=1
function	tensorflow session object ||| session	count=1
function	running an op ||| op	count=1
arg	regex match in ||| regex	count=1
function	directory recursively ||| directory	count=1
module	specific axes of ||| contrib labeled_tensor python ops	count=1
module	axes of two tensors ||| ops	count=1
module	of two tensors ||| contrib labeled_tensor python ops	count=1
module	learn the vocabulary dictionary ||| learn python	count=1
arg	floats ||| f1 f2 err msg	count=1
function	for [function_2] ||| [function_1] [function_2]	count=6
function	scale ||| make scale	count=1
function	with additional [function_2] ||| [function_1] [function_2]	count=2
module	is ||| contrib framework python framework	count=2
module	cell with ||| contrib rnn	count=2
module	dictionary and return indexies ||| contrib learn python learn	count=1
function	name for the ||| name	count=1
class	normal distribution on r^k ||| normal linear operator	count=1
function	reference ||| ref	count=3
class	[class_1] variable wrapper ||| [class_1] [class_2]	count=2
function	[function_1] given weight ||| [function_1] [function_2]	count=6
function	creates an object to ||| init	count=1
function	dimension of a deconv ||| deconv	count=1
function	the op for ||| op	count=1
function	[function_1] given path ||| [function_1] [function_2]	count=4
module	of dimensions needed to ||| contrib distributions python ops	count=1
function	mode ||| mode	count=1
arg	row ||| cls rows cols num_shards	count=1
arg	table with keys and ||| table	count=1
function_arg	[function_1] subgraph sgv ||| [arg_2] [function_1]	count=2
function	with respect to sparse ||| streaming sparse precision at k	count=1
function	queue batch ||| keyed batch examples shared queue	count=1
function	ndtri has [function_2] ||| [function_1] [function_2]	count=5
module	loss to the ||| losses python losses	count=2
arg	constructed nodes and tensors ||| args screen_info	count=1
function_arg	attention and [arg_2] ||| [function_1] decoder decoder_inputs [arg_2]	count=1
function_arg	return index [arg_2] ||| [function_1] [arg_2]	count=1
arg	[arg] of ||| [arg]	count=2
function	the current default graph ||| import graph	count=1
function	step false positives ||| sparse false positive at	count=1
arg	strings ||| num_workers num_param_servers port request_load_balancer	count=1
module	last two dimensions of ||| python ops	count=1
function	collects ||| collect input	count=1
function	process the ||| process	count=2
function	[function_1] a dense ||| [function_2] column [function_1]	count=2
arg	(< 0) from ||| sparse_ids sparse_weights	count=1
function	the signature ||| signature	count=1
arg	given [arg_2] ||| [arg_2] [arg_1]	count=8
module	which gets ||| distributions python ops	count=1
function	[function_1] default schedule ||| [function_2] [function_1]	count=1
arg	session, ||| master saver checkpoint_dir checkpoint_filename_with_path	count=1
module	layers ||| layers python layers	count=1
function	to a richtextlines ||| lines from rich line	count=1
function	tensor to use for ||| tensor	count=1
class	choose ||| device chooser	count=1
class	in the table ||| table	count=2
arg	a target tensor ||| target from_logits	count=1
class	from the generator ||| generator enqueuer	count=1
arg	for cell with ||| cell	count=1
function	with respect to sparse ||| streaming sparse precision	count=1
function	which reads ||| read	count=1
arg	diagonal matrix ||| identity_multiplier diag event_ndims	count=1
function	return dict symbol ||| guide	count=1
function	bundle from [function_2] ||| [function_1] [function_2]	count=1
function	prepend (i ||| prepend	count=1
function	converts a sparse ||| to	count=1
module	method for determining ||| keras	count=1
module	losses ||| python losses	count=1
module	do a ||| python layers	count=1
function	at a ||| at	count=7
function	sprite image from ||| make sprite image	count=2
function	[function] in ||| test dnnweights [function]	count=2
module	creates training and ||| python learn ops	count=1
class	the grad ||| grad loop state	count=1
class	a recordinput op ||| record input	count=1
class	these student's t ||| student t	count=5
class	the ||| summary	count=1
function	loads an ||| load	count=1
function_arg	min across [arg_2] ||| [arg_2] [function_1]	count=1
function	performs dropout given the ||| variational recurrent dropout	count=1
function	[function_1] if ||| [function_1] [function_2]	count=1
function	returns the directory ||| dir	count=1
module	return indexies of ||| python learn	count=1
module	debug ||| debug	count=2
function	[function_1] metrics ||| [function_2] [function_1]	count=3
function	a tensor ||| tensor by	count=1
module	learn the ||| python learn preprocessing	count=1
function	[function_1] ops ||| [function_1] [function_2]	count=37
function_arg	sigmoid of [arg_2] ||| [function_1] [arg_2]	count=1
class	the name of ||| indexed slices	count=1
arg	an op ||| op	count=5
function	with integer ||| with integer weighted sparse	count=1
module	using [module] ||| [module]	count=4
module	as input ||| estimators	count=12
function	of ||| add	count=1
module	two dimensions of ||| linalg python ops	count=1
function	mix of features ||| optimizer mixed features arbitrary weights	count=1
function	returns predictions [function_2] ||| [function_2] [function_1]	count=7
function	stores trace information ||| store trace info	count=1
class	summary ||| text summary	count=1
arg	fn2() based on the ||| fn1 fn2	count=1
module	the cell [module_2] ||| [module_1] [module_2]	count=3
function	collection with the given ||| collection ref	count=1
class	timer ||| step timer	count=1
class	without ||| model	count=1
function	on-run-start ||| on run start step	count=1
class	[class_1] creator ||| [class_2] [class_1]	count=3
module	tensor ||| ops distributions	count=2
function_arg	[function_1] sharded ||| [arg_2] [function_1]	count=4
function	concatenation has [function_2] ||| [function_1] [function_2]	count=2
class	this ||| operator	count=1
function	get all the ||| ts from regex	count=1
function	return ||| build guide	count=1
function	its [function_2] ||| [function_2] [function_1]	count=1
class	get ||| node stepper cli	count=3
function	[function_1] event for ||| [function_2] [function_1]	count=3
function	sessionlog [function_2] ||| [function_1] [function_2]	count=5
module_class	[module_1] tensor ||| [module_1] sparse [class_2]	count=2
function	per step true ||| sparse true	count=1
function_arg	[function_1] given estimator ||| [function_1] [arg_2]	count=1
function	for numpy arrays ||| check array	count=1
module	values ||| python	count=2
module	distribution ||| contrib distributions python	count=1
function	the python object for ||| object	count=1
function	completely runtime ||| zero rate unknown	count=1
class	node-status labels ||| node	count=1
arg	[arg_1] tensor ||| [arg_2] [arg_1]	count=9
module	all the tensors linked ||| contrib graph_editor	count=1
module	a ||| contrib keras python	count=1
function	validates a file against ||| validate file	count=1
function	approximate auc via a ||| auc	count=2
module	tensor s ||| contrib keras python keras engine	count=6
module	move ||| python ops	count=1
function	adds a sum-of-squares ||| mean squared error	count=2
function_arg	an rnn [arg_2] ||| [function_1] [arg_2]	count=2
class	get ||| server test	count=1
function	crop the central ||| central crop	count=3
function_arg	[function_1] few dummy ||| [arg_2] [function_1]	count=1
function	featurecolumns ||| feature columns	count=2
function	for ||| get collection proto	count=1
class	t ||| t	count=5
module	don't have ||| tools compatibility	count=1
class	vocabulary ||| categorical vocabulary	count=1
function	tensor ||| assert	count=1
arg	streamingdatafeeder instance ||| x y n_classes batch_size	count=1
class	the dump ||| dump	count=2
module	specified ||| slim	count=1
module	ops created by this ||| python ops	count=2
function	command from [function_2] ||| [function_2] [function_1]	count=1
module	s ||| keras python keras engine	count=3
class	create ||| round robin	count=1
function	report of the ||| report last	count=1
function	cached ||| transitively outgoing cache	count=1
arg	metric and update ||| scalar_tensor	count=1
function	a menuitem ||| to item	count=1
class	some sample data ||| image data generator	count=1
module	(vs ||| ops distributions	count=2
arg	x ||| x y	count=1
arg	activations ||| logits dim name	count=1
function	transforms each text ||| to sequences	count=1
arg	op2 else false ||| op2	count=1
module	and session and runs ||| learn	count=1
function	x+1 ||| delayed plus1	count=1
function	dfs traversal of ||| dfs from	count=1
arg	threshold ||| threshold weights	count=1
class	the common config for ||| config	count=1
module	learn the ||| learn python learn preprocessing	count=1
function	evaluation metric ops for ||| eval metric ops	count=1
module	be ||| framework	count=1
function	return the summary ||| summary op	count=1
function	verifies validity of ||| verify	count=1
class	[class_1] stepper ||| [class_1] [class_2]	count=1
function	node ||| node	count=24
module	sample ||| distributions	count=1
module	top of the ||| python	count=1
class	constructor ||| curses	count=1
module	gets ||| python tools	count=2
class	check to make ||| upgrade files	count=1
arg	maps activations from ||| activations	count=3
arg	a streamingdatafeeder instance ||| x y n_classes batch_size	count=1
class	construct student's ||| student	count=1
function	with static shapes ||| static	count=2
function	sessionrunhook raises ||| check	count=1
function	values added to ||| add to	count=1
module	multiply ||| python layers	count=1
function	)) ||| reduce logsumexp	count=1
function	[function_1] value models ||| [function_2] [function_1]	count=7
module	rnn ||| contrib rnn python	count=2
function	with ||| with weights	count=1
class	of this shape or ||| shape	count=2
function	as linear_model_fn but ||| linear model fn with model fn ops	count=2
function	sequences in a crf ||| crf	count=1
function	session [function_2] ||| [function_1] [function_2]	count=4
arg	dropping ignore_value cells ||| dense_tensor ignore_value	count=1
function_arg	verifies [arg_2] ||| [arg_2] [function_1]	count=2
function	for proper shape ||| maybe assert valid sample	count=1
class	the exp ||| exp	count=1
module	outcome (vs ||| python ops distributions	count=1
arg	objects of base_type ||| base_type	count=1
function	[function_1] first operation ||| [function_2] [function_1]	count=1
class	directory and ||| debug dump dir	count=1
function	a bidirectional ||| bidirectional	count=1
arg	g ||| g	count=1
module	[module_1] the length ||| [module_1] [module_2]	count=2
arg	across the specified dimension ||| dim	count=1
function	auc via ||| streaming auc	count=1
module	of a relaxedcategorical ||| python ops	count=1
function	a header for ||| header from ops and kernels	count=1
module	and return indexies of ||| python learn	count=1
module	prepended ||| contrib linalg python	count=1
module	matrix data as ||| estimators	count=4
function	an output tensor ||| output tensor	count=2
function	return index ||| finalize index	count=1
arg	obj ||| obj	count=1
function	for a single batch ||| on batch	count=2
module	proper shape ||| python	count=1
function	[function_1] path from ||| [function_2] [function_1]	count=3
function	igamma a ||| igamma	count=1
function_arg	[function_1] their names ||| [arg_2] [function_1]	count=6
function	each ||| to	count=1
arg	for a column ||| column	count=1
function	return tensor version ||| assert valid sample	count=1
function	the shape ||| op output shape	count=1
module	embeddings ||| layers	count=1
function	max pooling ||| max	count=1
function	the central ||| central	count=1
function	create synthetic ||| synthetic	count=1
arg	'ref' by assigning ||| validate_shape	count=1
module	conjugate ||| python ops	count=1
module	the model loading ||| python	count=1
function	the data/logdir endpoint ||| logdir	count=1
function	returns a header for ||| get header	count=1
module	list ||| debug lib	count=1
function	inputs to a ||| inputs	count=1
module	data as input ||| learn python learn estimators	count=5
class	data type ||| dtype	count=1
function	deepcopy [function_2] ||| [function_2] column [function_1]	count=1
module	the given subgraph ||| graph_editor	count=1
function	the last [function_2] ||| [function_2] [function_1]	count=2
function_arg	create the [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	writes metagraphdef [arg_2] ||| [function_1] [arg_2]	count=1
function	absolute value determinant ||| abs det	count=2
function	single example ||| single example	count=1
function	a hook to ||| make session run hook	count=1
class	some sample data ||| data generator	count=1
function	[function_1] [function_2] shape ||| [function_1] [function_2] shape input_shape	count=2
arg	0 holds ||| data summarize message	count=1
arg	a microbenchmark to ||| size iters	count=1
function	shape [function_2] ||| [function_2] [function_1]	count=14
function	variable instance from ||| variable	count=1
function	gradients for an exit ||| exit grad	count=1
function	determine ||| predict classes	count=4
function	with zero [function_2] ||| [function_2] [function_1]	count=1
function	initializes values ||| init values	count=1
function	creates an [function_2] ||| [function_1] [function_2]	count=1
module	of ||| contrib learn python learn ops	count=1
function	the variable ||| var	count=1
function	maps ||| maps	count=1
function	[function_1] of vectors ||| [function_2] [function_1]	count=2
arg	stored in ||| var_name	count=1
function	out-of-order ||| out of order	count=1
function	an rnn ||| get dynamic rnn	count=1
function_arg	[function_1] activations ||| [arg_2] [function_1]	count=2
arg	a cell with ||| cell	count=3
module	and runs a ||| contrib learn python learn dataframe	count=1
class	returns a whilecontext ||| while context	count=1
function	a restart ||| restart for file version less than2	count=1
function	at the end ||| end	count=2
function	one evaluation against the ||| eval	count=1
function	that arg_scope can set ||| arg scoped arguments	count=1
module	validates ||| python keras utils	count=1
module	used by the ||| contrib layers python layers	count=1
module	proper shape values then ||| python	count=1
function	return the raw ||| raw	count=1
arg	symbols to a ||| ids vocab_size embed_dim	count=1
class	without extra layers ||| utils test	count=1
function_arg	[function_1] necessary ||| [function_1] tensor [arg_2]	count=5
module	function of x ||| python ops distributions	count=2
module	text ||| python feature_column	count=1
arg	distributions [arg_1] [arg_2] ||| [arg_2] [arg_1]	count=15
function	mean over sample ||| sample mean	count=2
function	of training ||| train	count=1
function	defines [function_2] ||| [function_2] [function_1]	count=5
function	given example ||| example	count=1
function_arg	create an [arg_2] ||| [function_1] debug_dump tensor_filters [arg_2]	count=3
function	[function_1] options for ||| [function_1] [function_2]	count=4
module	dataframe [module_2] ||| [module_1] [module_2]	count=1
function	sum ||| sum	count=7
arg	x has ||| x data	count=1
function	tensor watch keys of ||| debug watch keys	count=1
function	the outputs ||| outputs make	count=2
function	sets ||| set checkpoint	count=1
arg	the results ||| sess op_or_tensor feed_dict burn_iters	count=1
module	based on ||| python framework	count=1
module	the 2 inputs of ||| ops	count=2
arg	out grads ||| out_grads in_grads	count=1
function	sampled_candidates ||| with sampled candidates	count=1
function	[function_1] overriding tensor ||| [function_2] [function_1]	count=1
arg	[arg_1] object ||| [arg_1] [arg_2]	count=1
function	closes a ||| close	count=1
module	dict of tensors ||| ops	count=1
function_arg	a doc [arg_2] ||| [function_1] index [arg_2]	count=1
module_class	[module_1] variable wrapper ||| [module_1] partitioned [class_2]	count=1
function	loss ||| check loss	count=1
function	[function_1] [function_2] ||| [function_1] flat [function_2]	count=2
function_arg	[function_1] g input_tensors) ||| [function_1] [arg_2]	count=2
class	op with ||| operation	count=1
module	produced ||| python framework	count=2
function_arg	[function_1] of cursesui ||| [function_1] graph run_metadata ui_type [arg_2]	count=1
arg	via a riemann sum ||| labels predictions weights num_thresholds	count=1
function	dump from the run ||| run	count=1
arg	outputs of sgv0 ||| sgv0	count=1
module	length of ||| ops	count=1
function	n-d convolutions ||| atrous convolution	count=2
arg	thumbnails and ||| thumbnails thumbnail_dim	count=1
module	to a multiple ||| python training	count=1
arg	[arg_1] fetches for ||| [arg_2] [arg_1]	count=12
function	a batch by ||| batch	count=1
function	output values of ||| values for	count=1
module	helper which properly compares ||| contrib distributions python kernel_tests	count=1
arg	sets up the feeds ||| feeds	count=1
arg	the parameters for an ||| input_size use_peepholes cell_clip	count=1
function	[function_1] for single ||| [function_2] [function_1]	count=4
function	richtextlines ||| lines from rich line	count=1
function	the collection with ||| get collection ref	count=1
function	[function_1] input with ||| [function_2] [function_1]	count=3
function	computes the sum ||| sum	count=2
module	the list of ||| python	count=2
function	summarywriter ||| summary writer	count=2
function	[function_1] occurs ||| [function_2] [function_1]	count=4
function	to be ||| prepare or wait	count=1
class	a vocabulary dictionary of ||| vocabulary	count=1
function	node ||| quantize node	count=1
module	for proper ||| distributions	count=1
function_arg	[function_1] op is ||| [function_1] switch [arg_2]	count=1
arg	print ||| input_shape	count=1
function	of state ||| state	count=1
arg	output ||| output node_name	count=1
function	message discards ||| message discards	count=2
class	its outputs ||| highway wrapper	count=1
function	in the collections ||| to collections	count=1
function_arg	slice of [arg_2] ||| [function_1] input producer [arg_2]	count=1
function	specified invalid indices in ||| invalid indices	count=1
function_arg	[function_1] thumbnails ||| [function_1] [arg_2]	count=4
function_arg	initializes a stopatstephook ||| init num_steps last_step	count=1
module	and values in ||| feature_column	count=2
function	add a [function_2] ||| [function_1] histogram [function_2]	count=1
class	sdcalogisticclassifier with ||| sdcalogistic classifier	count=2
module	which ||| python	count=1
module	an interactivesession ||| python	count=1
function	in train phase ||| in train phase	count=2
module	if ||| contrib framework	count=1
module	to ||| contrib graph_editor	count=2
function	plugin asset ||| plugin asset	count=1
function	[function_1] the first ||| [function_1] [function_2]	count=1
arg	second-order gradients of ||| pool_func input_sizes output_sizes window_rows	count=1
arg	axis ||| axis ndims	count=1
class	multivariate normal distribution on ||| multivariate normal linear	count=1
module	representing the ||| python framework	count=2
function	report of the feed ||| report last feed	count=1
function	the signaturedef ||| from meta graph def	count=1
function	mean [function_2] ||| [function_1] [function_2]	count=10
module	suitable tags after ||| tensorboard backend event_processing	count=1
function	select which examples to ||| select which to	count=1
module	of int or none ||| python ops	count=1
module_class	[module_1] normal ||| [module_1] [class_2]	count=4
function	convert possibly negatively indexed ||| negative	count=1
function_arg	cast [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	feature column [arg_2] ||| [arg_2] [function_1]	count=1
arg	processes [arg_2] ||| [arg_1] [arg_2]	count=6
function	slice dimension ||| dim	count=1
function_arg	[function_1] housing ||| [function_1] [arg_2]	count=2
module	tensor and returns ||| keras python keras	count=1
function	[function_1] used in ||| [function_2] [function_1]	count=4
function	simple print ||| tf print	count=1
arg	to a specific format ||| export_path checkpoint_path eval_result	count=1
arg	of input_tree ||| input_tree check_types	count=1
function	op to initialize ||| initialize	count=1
module	a list of ||| contrib factorization python ops	count=4
function	one column ||| one column	count=2
function_arg	[function_1] this name ||| [function_1] var_store [arg_2]	count=1
module	retrieves ||| python keras engine	count=3
function	a tf cond ||| cond	count=1
function	minimum ||| min	count=1
arg	tensor ||| tensor tag	count=1
function	into a placeholder ||| replace t with placeholder	count=1
function	[function_1] observations ||| [function_1] [function_2]	count=3
function	old values of ||| values	count=1
function	a doc to ||| doc	count=1
arg	sequences into a numpy ||| sequences mode	count=1
function_arg	the sum [arg_2] ||| [function_1] grad [arg_2]	count=2
function	computes the product ||| reduce prod	count=1
arg	region ||| central_fraction	count=1
function	reduce ||| reduce to	count=1
function	matrix to [function_2] ||| [function_2] [function_1]	count=8
module	runge-kutta ||| integrate python	count=1
function	the proto_type ||| type	count=1
function	the insertion indices ||| insertion index	count=2
function	the control flow context ||| get control flow context	count=1
function	check ||| check versus	count=1
function	default value as ||| default value	count=1
function_arg	gather op ||| gather grad op	count=1
module	we can do a ||| layers python layers	count=1
arg	try to retrieve ||| element_name	count=1
module	images from [module] to ||| [module]	count=1
function	compatible ||| compatible	count=2
function	a sparse [function_2] ||| [function_1] [function_2]	count=5
module_class	[module_1] coordinatewise ||| [module_1] [class_2]	count=18
arg	all steps and returns ||| inputs noutput scope name	count=1
module	given number of the ||| learn	count=1
function	returns a dictionary from ||| dict	count=1
module	of tensors or ||| ops	count=1
function	get all the tensors ||| filter ts from	count=1
function	and returns trainer ops ||| get train ops	count=2
module	colocate_clip_ops_with_vars ||| contrib opt python training	count=2
function	sessionrunhook raises typeerror otherwise ||| hooks	count=1
function	parameters used to instantiate ||| parameters	count=1
function	main page and verify ||| test request main page	count=1
function	returns true [function_2] ||| [function_1] [function_2]	count=6
function_arg	[function_1] factor ||| [function_1] brightness [arg_2]	count=4
function	[function_1] tensor ||| [function_1] sparse [function_2]	count=1
function	should trigger [function_2] ||| [function_2] [function_1]	count=2
arg	print its execution time ||| device input_shape perm num_iters	count=1
function_arg	squared error [arg_2] ||| [function_1] predictions [arg_2]	count=2
function	[function_1] of features ||| [function_1] [function_2]	count=14
class	total number of ||| crossed column	count=1
class	sure we ||| test	count=1
function	forward public function ||| forward	count=1
function	[function_1] enqueue based ||| [function_1] [function_2]	count=3
arg	rank 1 or ||| name	count=1
module	for proper shape ||| python	count=1
class	the timer ||| step timer	count=1
module	tensor ||| python slim	count=1
function	[function_1] centered bias ||| [function_2] [function_1]	count=5
function	probabilities ||| probs	count=4
arg	a lower triangular ||| diag tril	count=1
class	mapper ||| fetch mapper	count=2
arg	in a scrollable text ||| is_refresh highlight_regex	count=1
function	docstring and return a ||| md docstring	count=1
class	create ||| sequence queueing state saver	count=1
function	prepares a feature ||| sequence feature	count=1
function	[function_1] of tags ||| [function_2] [function_1]	count=1
module	dataset of only ||| python learn datasets	count=1
function	the debug-wrapper session ||| session init	count=1
function	loop to train ||| train loop	count=3
arg	see [arg_2] ||| [arg_2] [arg_1]	count=2
arg	function which chooses the ||| pred cond_true cond_false	count=1
function_arg	[function_1] annotation of ||| [function_1] [arg_2]	count=4
arg	feature_columns ||| feature_columns name example_names	count=1
function	step true positives ||| streaming sparse true positive at k	count=1
module	1 outcome (vs ||| python ops	count=1
function	sparse [function_2] ||| [function_1] average precision [function_2]	count=1
module	rnn cell composed sequentially ||| rnn	count=1
module	sure we don't ||| tools	count=1
function	command from ||| command from	count=1
function	in the collection with ||| get collection	count=1
function	returns all variables ||| variables	count=1
arg	or list of tensors ||| tensors session feed_dict	count=1
function	wrt ||| vector product	count=1
arg	using ||| logits probs dtype	count=1
function_arg	all variables [arg_2] ||| [function_1] [arg_2]	count=1
module	two dimensions of ||| python ops	count=1
module	classification ||| learn utils	count=1
arg	tensorinfo for all ||| meta_graph_def signature_def_key	count=1
module	of arbitrary dimension ||| python ops	count=1
function	[function_1] the output ||| [function_1] [function_2]	count=1
function	and match ||| and	count=1
module	can be used ||| layers python layers	count=1
class	load() ||| watcher	count=1
arg	tensor with all ||| tensor dtype name optimize	count=1
function	ordering of op ||| op	count=1
module	create ||| slim nets	count=2
arg	to shape ||| shape	count=1
class	containing textual data ||| plugin asset	count=1
module	create a ||| training	count=1
function	default ||| default	count=15
arg	input-output pairs for the ||| ksizes strides rates	count=1
module	cluster ||| python training	count=1
function	key dtype ||| key dtype	count=2
function_arg	writes to [arg_2] ||| python lib io atomic [function_1] file [arg_2] contents	count=1
function_arg	correlation coefficient [arg_2] ||| [arg_2] [function_1]	count=2
function	[function_1] values of ||| [function_1] [function_2]	count=1
class	feeding ||| feeder	count=1
module_class	fetch [class_2] ||| [module_1] fetch [class_2]	count=1
arg	from oldpath to ||| oldpath	count=1
module	carlo estimate of the ||| python ops	count=1
function	foldr ||| foldr	count=1
class	proper ||| dirichlet multinomial	count=2
function	cond ||| smart cond	count=1
module	create ||| contrib framework python ops	count=1
module	of ||| learn python learn ops	count=1
function_arg	[function_1] [arg_2] ||| [function_1] x target_key [arg_2]	count=4
class	this ||| weights hook	count=2
function	a sequence of embeddings ||| embed sequence	count=1
function	description [function_2] ||| [function_2] [function_1]	count=2
function	asserts whether given ||| assert	count=1
function	a node [function_2] ||| [function_2] [function_1]	count=3
function	supported by ||| valid for	count=1
class	outputs the corresponding values ||| with hash buckets	count=1
function	is ||| is diag update	count=1
function	string ||| str	count=3
module	numpy ||| python estimator inputs	count=1
function	ndtri has finite ||| ndtri finite	count=1
module	each ||| keras python keras	count=1
module	a tensor ||| python keras	count=4
module	defines the ||| contrib slim python slim nets	count=1
function	get arguments common to ||| get common args	count=1
module	an iterable of string ||| plugins text	count=1
function	in a bad way ||| construction pollution	count=1
function	returns the first ||| get first	count=3
function	error between ||| error	count=4
function	with dynamic ||| matrix dynamic	count=1
function	ready [function_2] ||| [function_2] [function_1]	count=3
arg	two tensors [arg_2] ||| [arg_2] [arg_1]	count=1
function	create an instance ||| create analyzer ui	count=1
function	overriding tensor ||| then remove override then	count=1
function	dict of predictions ||| predictions	count=2
module_class	cell and [class_2] ||| [module_1] [class_2]	count=4
function	[function_1] a python ||| tools docs parser config [function_2] name [function_1] full_name	count=3
arg	the given path ||| path	count=3
function	handle by ||| handle	count=1
function	a fixed [function_2] ||| [function_1] [function_2]	count=1
class	choose a ||| replica device chooser	count=1
arg	with ||| decoder_inputs	count=1
module	of a rank-r ||| ops	count=1
module	graphdef and returns ||| framework	count=1
function	restores the [function_2] ||| [function_2] [function_1]	count=3
function	file to ||| file to	count=2
class	flushes ||| summary writer	count=1
class	richline with no rich ||| rich	count=1
function	menuitem from ||| caption	count=1
arg	model ||| model line_length positions	count=1
module	dimensions of zero ||| python ops	count=1
function_arg	[function_1] necessary to ||| [arg_2] [function_1]	count=6
function	we don't have a ||| test	count=1
function	provided fixed base distribution ||| fixed unigram	count=1
function	[function_1] finite gradients ||| [function_1] [function_2]	count=1
class	constructor of ||| ui	count=1
arg	two tensors [arg_2] ||| [arg_1] [arg_2]	count=1
function	input with [function_2] ||| [function_2] [function_1]	count=6
arg	to create batches of ||| batch_size capacity	count=1
class	outputs the ||| with	count=1
function	value for ||| value	count=1
class	update it with ||| op test	count=1
function	given ||| get	count=1
function	not existed in ||| unique target	count=1
module	multi ||| learn estimators	count=3
function	exists or not ||| exists	count=1
function	[function_1] for serving ||| [function_1] [function_2]	count=1
function	all [function_2] ||| [function_1] [function_2]	count=16
function	trainable ||| get trainable	count=1
module	given ||| python learn utils	count=1
function	use for tests ||| test	count=1
function	the current meta graph ||| meta graph	count=1
arg	summarysaver monitor ||| summary_op save_steps output_dir summary_writer	count=1
module	delete ||| python ops	count=1
arg	loc and ||| loc	count=3
function	tensor version ||| assert	count=1
arg	take a numpy ||| text_arr	count=1
class	value ||| stochastic value	count=1
function	an item ||| item	count=1
function	non-negative int32 [function_2] ||| [function_2] [function_1]	count=1
module	version with default ||| python learn	count=1
arg	input while maintaining ||| inputs outputs_collections	count=1
function	a model from ||| from	count=1
function	a recurrent neural network ||| dynamic	count=1
function	[function_1] both dense ||| [function_2] and sparse [function_1]	count=3
function	variable-length numeric data ||| var len	count=1
function	test data to ||| get test data	count=2
arg	of layers ||| layers layer_set	count=1
arg	data to ||| data	count=3
class	with ||| debug test base	count=1
class	of the pooling ||| pooling test	count=1
function	[function_1] outputs of ||| [function_2] [function_1]	count=1
module	the values of a ||| python ops	count=2
function	of the resultant ||| compute elemwise	count=1
function_arg	[function_1] n ||| [function_1] [arg_2]	count=2
arg	a tensor x ||| x name	count=2
arg	metagraphdefs [arg] unit ||| tester [arg]	count=1
function	adds an n-d convolution ||| convolution	count=1
arg	by boolean_series ||| boolean_series	count=1
module	keras tensors ||| python keras	count=1
module_class	file [class_2] ||| [module_1] file [class_2]	count=1
function	fill tensor shapes in ||| fill missing graph	count=1
function	with int values ||| int	count=1
module_class	the [class_2] ||| [module_1] [class_2]	count=57
function_arg	[function_1] [arg_2] ||| [function_1] x [arg_2]	count=25
function	reroute ||| reroute	count=2
class	ps task index ||| greedy load balancing strategy	count=1
function	loads the ||| load	count=4
function	[function_1] merge ||| [function_2] [function_1]	count=1
arg	initialized to the ||| primary	count=1
arg	[arg_1] weights ||| [arg_1] [arg_2]	count=4
arg	enter op ||| op grad	count=1
function	restoring things to ||| smart unset all	count=1
function	_get_sparse_tensors() for ||| get sparse tensors	count=2
function	dump ||| dump	count=1
function	return a temporary ||| temp	count=1
module	from ||| learn python learn	count=2
function	asset from ||| asset	count=2
function	the last ||| last	count=2
class	don't ||| files	count=1
class	vocabulary ||| vocabulary	count=2
arg	output from ||| output node_name	count=1
module	[module] layer ||| contrib keras [module]	count=3
module	of 1 ||| contrib distributions python	count=1
function	arg num_rows, [function_2] ||| [function_1] [function_2]	count=3
function	feeding into predict ||| predict data feeder	count=1
function	[function_1] dynamic shape ||| [function_1] [function_2]	count=2
module	which ||| distributions python	count=2
function	per step true ||| true	count=1
function_arg	image [arg_2] ||| [arg_2] [function_1]	count=3
function_arg	name for [arg_2] ||| [function_1] [arg_2]	count=1
function	are sessionrunhook ||| check hooks type	count=1
arg	from input feature_columns ||| feature_columns	count=1
function	defined in every ||| defined	count=1
function	find the [function_2] ||| [function_2] [function_1]	count=1
module	that with integer ||| contrib learn python learn	count=1
function	as a tensorshapeproto ||| as proto	count=1
arg	sensitivity ||| labels sensitivity weights	count=1
function	get legend for node-status ||| node status label legend	count=1
function	return the gradients for ||| grad	count=1
function	recall of ||| streaming recall	count=1
function	volume contained ||| resize volumes	count=1
function	[function_1] integer indices ||| [function_2] [function_1]	count=1
class	a tensor for the ||| lazy	count=1
module	returns ||| learn	count=7
function	[function_1] the image ||| [function_2] [function_1]	count=1
function	intersection [function_2] ||| [function_1] [function_2]	count=4
function	same embedding ||| embedding	count=1
class	mixture s of ||| mixture	count=1
function	in train [function_2] ||| [function_1] [function_2]	count=2
arg	the feeds ||| feeds	count=1
module	to ops ||| graph_editor	count=1
class	tensorshape ||| shape	count=1
function	[function_1] tensor ||| [function_1] dims [function_2]	count=1
module	all the ||| tensorboard backend event_processing	count=2
function	should [function_2] ||| [function_2] [function_1]	count=3
module	representing the ||| python ops	count=1
class	the dilation function ||| dilation	count=1
function	uniform ||| uniform	count=1
function_arg	[function_1] the specification ||| [function_1] [arg_2]	count=5
module	values will ||| python	count=1
function	new graph ||| graph replace	count=1
function	as [function] ||| [function]	count=1
arg	gen_parsing_ops ||| features types	count=1
function_arg	[function_1] pure-decoding option ||| [function_1] decoder decoder_inputs [arg_2]	count=3
module	helper to __init__ which ||| distributions python ops bijectors	count=1
function	a specific plugin asset ||| retrieve plugin asset	count=1
module	returns a training op ||| python layers	count=1
function	flip dims [function_2] ||| [function_2] [function_1]	count=8
function	intersection ||| intersection	count=1
arg	if op ||| op	count=1
function_arg	metagraphdef [arg_2] ||| [arg_2] [function_1]	count=5
function	summarize the given tensor ||| get tensor	count=1
module	returns the list of ||| python	count=1
function	[function_1] name of ||| [function_1] [function_2]	count=1
class	a residualwrapper ||| residual wrapper	count=1
arg	traverse for details ||| parent children	count=1
function	infer ||| infer hints	count=1
function	a temporary ||| temp	count=1
class	modelfnops ||| model fn ops	count=1
function	decodes the prediction ||| decode	count=1
function	restart only ||| restart	count=1
class	normal distribution on ||| normal linear	count=1
function	richtextlines ||| assert node attribute lines	count=1
function_arg	input tensors [arg_2] ||| [function_1] [arg_2]	count=1
function	by the given value ||| norms	count=1
module	build ||| estimator export	count=2
module_class	[module_1] linearoperator ||| [class_2] [module_1]	count=1
module	the number of ||| python	count=1
module	dataset ||| python keras datasets	count=2
function	metagraphdef proto ||| import meta	count=1
function	to their defs from ||| nodes map	count=1
function	igamma ||| igamma	count=1
function	[function_1] loss of ||| [function_1] [function_2]	count=3
arg	a html ||| contents headers	count=1
module	x + ||| contrib distributions python ops	count=1
module	and ||| contrib learn python	count=1
function	and discard expired ||| and maybe purge	count=2
function	using client feed ||| with tensor feed	count=1
module	return ||| contrib learn python learn preprocessing	count=2
function	size for the ||| size	count=1
function_arg	[function_1] var if ||| [arg_2] [function_1]	count=4
function	list ||| line list	count=1
function	the ||| caption	count=1
function	integers ||| texts to	count=1
function	and flops ||| get logged ops	count=1
function	parses and ||| parse	count=1
function_arg	[function_1] tensors into ||| [arg_2] [function_1]	count=1
arg	of many tensor variables ||| tuples	count=1
function	number ||| ndims	count=1
function	[function_1] to enqueue ||| [function_1] [function_2]	count=2
module	this object overriding components ||| contrib seq2seq python ops	count=1
function	computes a header for ||| get header	count=1
function	[function_1] default schedule ||| [function_1] [function_2]	count=1
module	cli see ||| cli	count=2
module	or none ||| framework	count=1
function	dense tensor in the ||| sparse tensor dense	count=1
function	return ||| guide index	count=1
function	a temporary ||| get temp	count=1
function	prefix ||| prefix	count=1
class	to ||| summary	count=1
class	of the ||| slices	count=1
function	we detect error ||| sdcanot supported	count=1
arg	gradients [arg_2] ||| [arg_1] [arg_2]	count=2
function	resize and mirror pad ||| resize and conv	count=1
function_arg	a call [arg_2] ||| [arg_2] [function_1]	count=3
function	data dependencies ||| datafile	count=1
arg	given estimator [arg_2] ||| [arg_1] [arg_2]	count=1
arg	the parameters for an ||| use_peepholes cell_clip	count=1
arg	gradient to all inputs ||| op grad	count=1
class	the base feature ||| feature	count=1
function	fns in test_ops cc ||| version applies to op construction	count=1
module	collection of losses ||| losses python losses	count=1
class	invalidate ||| node stepper	count=1
function	table that converts a ||| table	count=1
function	return the total variation ||| total variation	count=1
arg	add operations to compute ||| examples	count=2
function	[function_1] header for ||| [function_2] [function_1]	count=1
arg	for recall@k ||| class_id	count=1
arg	for given tensors ||| tensors feed_dict	count=1
arg	given ||| tensor dtype	count=1
module	s of a ||| keras engine	count=2
class	the queue in ||| queue	count=1
function	transforms each text ||| sequences	count=1
class	of node names ||| node	count=1
module	ops that match the ||| contrib	count=1
arg	f as ||| f	count=1
arg	evidence lower bound ||| log_joint variational keep_batch_dim form	count=1
function	the auc ||| auc	count=1
function	[function_1] op to ||| [function_1] tokens [function_2]	count=1
function	creates a _sparsecolumn [function_1] [function_2] ||| [function_1] [function_2]	count=2
function	asserts that two graphdefs ||| assert equal	count=1
class	check ||| linear operator tri l	count=1
function	[function_1] variation of ||| [function_1] [function_2]	count=2
function_arg	max across tensors ||| max tensors	count=2
function	feed [function_2] ||| [function_2] [function_1]	count=8
class	wishart distribution ||| wishart	count=2
arg	element-wise ||| x y	count=1
module	version with default shuffle ||| learn	count=1
function	wrap a ||| wrap	count=1
function	maximum or ||| maximum	count=1
function	a menuitem from the ||| caption to	count=1
class	stepper ||| stepper	count=1
function	[function_1] values ||| [function_1] variable [function_2]	count=1
arg	[arg_1] convolution layer ||| [arg_1] [arg_2]	count=1
function	vocabulary ||| vocabulary	count=1
function	for planes ||| planes	count=1
module	writes ||| learn python learn estimators	count=1
module	do a ||| contrib layers python layers	count=1
function_arg	[function_1] the image ||| [function_1] [arg_2]	count=3
function	the graph ||| to graph	count=1
module	rank of ||| metrics python ops	count=1
function	dense and ||| test dense and	count=1
function	dropout given ||| dropout	count=1
function	retrieves the output mask ||| output mask	count=2
module_class	truncated [class_2] ||| [module_1] [class_2]	count=1
function	shape ||| shape	count=46
module	of the tensor ||| python ops	count=2
class	tensor ||| sparse tensor	count=1
function	probably ||| tensor flow	count=1
class	this ||| lstmblock fused	count=1
function	the kernel mappers provided ||| kernel mapper	count=1
function	default [function_2] ||| [function_2] [function_1]	count=16
function	false positives for ||| sparse false positive	count=2
class	outcome (vs 0) ||| geometric	count=1
function	to ||| to hash bucket	count=1
function	read queue [function_2] ||| [function_2] [function_1]	count=3
function_arg	> 0 [arg_2] ||| [function_1] x [arg_2]	count=1
function	function [function_2] ||| [function_2] [function_1]	count=12
function_arg	[function_1] term ||| [arg_2] [function_1]	count=4
module_class	[module_1] forward prop ||| [class_2] [module_1]	count=1
module	to ||| summary	count=1
function	[function_1] page that ||| [function_1] nonexistent [function_2]	count=1
arg	output from ||| output node_name enable_list_tensors	count=1
module	the dataframe ||| dataframe	count=1
function	the given state ||| cell	count=2
module	total sum of ||| ops	count=1
arg	tensors to a ||| tensors	count=2
function	gradient ||| cross entropy with logits grad	count=1
module	the given list ||| slim python	count=1
module	values of ||| ops	count=3
function	re-route both the ||| reroute sgv	count=1
function_arg	function to [arg_2] ||| [arg_2] [function_1]	count=2
function	[function_1] to sparse ||| [function_2] [function_1] k labels predictions_idx k	count=3
function	a log [function_2] ||| [function_1] [function_2]	count=1
class	will be ||| slices	count=1
function	run one step ||| call	count=3
function	[function_1] menu ||| [function_1] [function_2]	count=5
function	variables [function_2] ||| [function_2] [function_1]	count=1
class	directory and ||| dir	count=1
function	a function ||| func	count=1
function	checks ||| maybe	count=1
function_arg	names for [arg_2] ||| [function_1] [arg_2]	count=1
module	can do ||| layers	count=1
module	the image s ||| contrib image python ops	count=1
function	runs from a ||| runs from	count=1
module	a number of ||| ops	count=1
function	a monitoredsession ||| monitored	count=1
function	clips ||| clip by value	count=2
function	[function_1] meta graph ||| [function_2] [function_1]	count=1
function	proto_type for ||| get collection	count=1
module	and feed functions ||| learn python learn	count=1
function	path ||| dir	count=1
function	placeholder for the graph ||| placeholder from dtype and	count=1
arg	fakebigqueryserver ||| address port	count=1
module	produced ||| python	count=1
arg	[arg_1] node name ||| [arg_2] [arg_1]	count=2
function	fine [function] integer type ||| test integer [function]	count=1
function	returns the configuration ||| get config	count=3
arg	structure of ||| apply_fn	count=1
function	[function_1] table that ||| [function_2] [function_1]	count=2
function_arg	print a [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	assert that [arg_2] ||| [arg_2] [function_1]	count=5
function	float ||| regression float	count=1
function	not compatible ||| compatible	count=1
class	of node ||| node	count=1
function	proper ||| maybe	count=1
module	all files in the ||| tensorboard backend event_processing	count=1
function	irfft ||| infer fft length for irfft	count=1
arg	this matrix ax ||| transpose_x	count=1
function_arg	enqueue based [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	a sparse [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] positive ||| [function_2] [function_1]	count=1
function	the next ||| next	count=3
function	a directory ||| test directory	count=1
module	a ||| compatibility	count=1
module	for a tensor ||| python ops	count=1
function_arg	normalizes [arg_2] ||| [arg_2] [function_1]	count=2
class	an embedding of ||| embedding	count=1
function	logits ||| logits	count=3
function_arg	[function_1] cursesui ||| [function_1] debug_dump tensor_filters ui_type [arg_2]	count=1
function	an event [function_2] ||| [function_1] [function_2]	count=1
function	partition graphs ||| partition	count=1
function	x to a ||| to	count=1
module_class	[module_1] [class_2] ||| [module_1] file [class_2]	count=1
arg	saves ||| sess	count=1
function	place to ||| to	count=1
module	of ||| ops losses	count=2
function_arg	the maximum [arg_2] ||| [function_1] [arg_2]	count=1
module	labeled tensors ||| labeled_tensor python ops	count=3
arg	keys ||| keys	count=7
function	scalars after ||| scalars	count=1
class	exports ||| export strategy	count=1
function	for a fully connected ||| legacy fully connected	count=1
class	the event file to ||| summary writer	count=1
function	within an arg_scope ||| add arg scope	count=1
arg	term ||| weights epsilon	count=1
module	returns a non-reference ||| python framework	count=1
function	[function_1] after a ||| [function_2] [function_1]	count=1
function	[function_1] with static ||| [function_2] [function_1]	count=4
function_arg	[function_1] a loop ||| [arg_2] [function_1]	count=1
arg	log(sum(exp elements across dimensions ||| input_tensor axis keep_dims name	count=1
function	be turned into a ||| be regex	count=1
module	of a matrix ||| factorization python ops	count=1
arg	tensors ||| tensors tensor_slices	count=1
class	stack is empty ||| graph stack	count=1
module	event file to ||| python summary	count=1
function	of the items ||| items	count=1
module	which ||| contrib distributions python	count=2
arg	g input_tensors) ||| node_index attr attr_name	count=1
arg	directory ||| ckpt_dir_or_file	count=1
class	to the event ||| summary to event	count=2
module	menuitem from ||| cli	count=1
arg	output determined by pred ||| pred	count=2
function	[function_1] input tensors ||| [function_2] [function_1]	count=3
function	[function_1] tf session ||| [function_2] run [function_1]	count=3
arg	a stochastictensor ||| name dist_value_type loss_fn	count=2
function_arg	given [arg_2] ||| [arg_2] [function_1]	count=1
module_class	of a [class_2] ||| [module_1] [class_2]	count=39
function	num_rows, possibly [function_2] ||| [function_2] [function_1]	count=2
module	of tensor ||| contrib layers python ops	count=1
function	linear operator ||| operator	count=1
module	of layers by ||| contrib layers python layers	count=1
function	loop [function_2] ||| [function_1] constant [function_2]	count=1
function	hook ||| hook	count=1
function	tensors linked to ||| filter ts	count=1
function	or max ||| or max	count=2
function	converts a ||| img to	count=1
arg	dims values [arg_2] ||| [arg_2] [arg_1]	count=1
class	modelfnops ||| model fn	count=1
class	that ||| wrapper session test	count=1
class	one place [class] ||| [class]	count=1
function	input shape ||| input shape	count=2
function	randomly [function_2] ||| [function_2] [function_1]	count=1
module	the tensor of ||| ops	count=1
function	the tensors ||| ts from	count=1
function	a _targetcolumn [function_2] ||| [function_2] svm [function_1]	count=1
function	proper shape values ||| sample	count=1
module	tensors ||| contrib graph_editor	count=2
function	value models ||| single value	count=1
function_arg	a str [arg_2] ||| [function_1] [arg_2]	count=3
function	create the state for ||| maybe create control flow state	count=1
function	the shape of the ||| op output shape	count=1
function	current default graph ||| graph def	count=1
function	returns true [function_2] ||| [function_2] [function_1]	count=6
function	parse summaries from ||| simple values from	count=1
function	axis ||| axis	count=3
function_arg	[function_1] image ||| [arg_2] [function_1]	count=3
function	boston ||| boston	count=1
arg	batch_size [arg_2] ||| [arg_1] [arg_2]	count=1
arg	initialize the parameters ||| use_peepholes initializer num_proj	count=1
function_arg	1d [arg_2] ||| [arg_2] [function_1]	count=5
function	tensor or sparsetensor objects ||| sparse	count=1
function	things ||| smart unset all	count=1
function	string_to_hash_bucket op to use ||| to hash	count=1
function	a map from parents ||| map	count=1
function	add it to ||| add op	count=1
function	generate placeholder ||| placeholder inputs	count=1
module	the event file ||| summary	count=1
arg	[arg_1] observedstochastictensor ||| [arg_2] [arg_1]	count=4
function_arg	graph [arg_2] ||| [arg_2] [function_1]	count=6
arg	[arg_1] tf one_hot ||| [arg_2] [arg_1]	count=1
function	performs greedy decoding on ||| ctc greedy decoder	count=1
module	values then return ||| python ops	count=1
arg	lower triangular matrix ||| diag tril event_ndims	count=1
class	the wrapper should work ||| wrapper session	count=1
function_arg	error between [arg_2] ||| [function_1] predictions [arg_2]	count=4
function	that a model_fn can ||| model fn	count=1
function	google2 ||| google2	count=1
function	[function_1] external control ||| [function_1] [function_2]	count=1
module	return ||| learn python learn	count=1
arg	logdir ||| logdir plugin_name	count=1
function_arg	[function_1] example protos ||| [arg_2] [function_1]	count=10
arg	of a variable ||| variable	count=1
module	each component of ||| python ops	count=5
function	_get_sparse_tensors() [function_2] ||| [function_1] two [function_2]	count=2
module	data ||| learn python learn learn_io	count=3
function	a node to compute ||| compute	count=1
function	various ||| at	count=1
function	notice to a ||| notice to	count=2
function	hook ||| session run hook	count=1
function	[function_1] for linear-only ||| [function_1] [function_2]	count=2
arg	and from_proto [arg_2] ||| [arg_2] [arg_1]	count=2
function	11-layers version a ||| a	count=1
class	partitioned variable wrapper ||| partitioned variable	count=1
function	tf placeholder for the ||| make placeholder from dtype	count=1
function	binary classification using numpy ||| logistic regression np	count=1
function	processor ||| processor	count=1
module	to ||| learn python learn estimators	count=1
function	added to [function_2] ||| [function_1] [function_2]	count=2
function	rfft ||| infer fft length for rfft	count=1
function	computes the shape ||| op output shape	count=1
module_class	node [class_2] ||| [module_1] [class_2]	count=1
function	as linear_model_fn but returns ||| with model fn	count=2
arg	replace obj ||| obj	count=1
function_arg	error [arg_2] ||| [arg_2] [function_1]	count=17
module	data as input ||| learn estimators	count=5
function	tensor ||| tensor	count=59
module	the given list of ||| python	count=1
function	a graph containing a ||| graph	count=1
function	and ||| and test	count=2
function	lists [function_2] ||| [function_2] [function_1]	count=6
function	to run() call ||| run	count=1
class	of the scroll ||| scroll	count=1
function	valued ||| valued linear	count=2
function	the shape ||| shape internal	count=1
function_arg	[function_1] gradients to ||| [arg_2] [function_1]	count=8
function	in chrome ||| generate chrome	count=1
function	in the presence of ||| loop grads	count=1
module	computes output tensors for ||| keras python keras engine	count=1
module	load() ||| event_processing	count=1
class	get ||| operator derived class test	count=2
function	list of new control ||| control	count=1
function	op for training ||| training op	count=2
arg	annotation of an ||| tst out list_tensors_enabled node_info_node_name	count=1
function	multiplies ||| prod	count=1
module	that creates training and ||| python learn	count=1
arg	the gradients for the ||| op grad	count=1
module	tensor and ||| keras	count=1
function_arg	[function_1] the losses ||| [arg_2] [function_1]	count=4
function	[function_1] fixed ||| [function_2] size [function_1]	count=1
arg	make ||| x y input_fn feed_fn	count=1
class	index a ||| guide index	count=1
function_arg	resourcevariable [arg_2] ||| [arg_2] [function_1]	count=3
module	ops that match the ||| contrib graph_editor	count=1
function	metric ||| metric	count=4
function	creates a new context ||| new attr context	count=1
function_arg	[function_1] inputs ||| [function_1] spec [arg_2]	count=2
module	synthetic ||| metrics python kernel_tests	count=1
function_arg	control [arg_2] ||| [function_1] dependency [arg_2]	count=4
function	input [function_2] ||| [function_1] [function_2]	count=16
function	flow [function_2] ||| [function_2] [function_1]	count=9
function	initial ||| initial	count=1
function	after [function_2] ||| [function_1] [function_2]	count=3
function	[function_1] value of ||| [function_2] [function_1]	count=2
arg	a dimension ||| name dim	count=1
arg	from a logdir ||| logdir	count=1
function_arg	[function_1] a visitor ||| [arg_2] [function_1]	count=1
function	a tensorflow graph ||| graph	count=2
function	temporary [function_2] ||| [function_1] [function_2]	count=4
function	list of graph dependencies ||| graph parents	count=1
function	get the relative timestamp ||| get rel timestamps	count=1
function	[function_1] range ||| [function_1] [function_2]	count=10
arg	unneeded pairs ||| old_graph	count=1
arg	input [arg] ||| [arg] partitions	count=1
function	with modulus ||| with modulus	count=2
module	sequence of integers ||| keras	count=2
function	a placeholder tensor ||| replace t with placeholder	count=1
function_arg	create an [arg_2] ||| [function_1] [arg_2]	count=1
function	show array indices for ||| show array index at	count=1
arg	[arg_1] col_seq ||| [arg_2] [arg_1]	count=2
function	time ||| time	count=3
class	longer rich ||| rich	count=1
arg	is ready to ||| max_wait_secs	count=1
function	shape of the ||| op output shape	count=1
function	replace the contents ||| replace	count=1
function	scale ||| scale	count=6
function	integer classes ||| build standardized signature def	count=1
function	equiv to ||| to tensor	count=4
class	current batch of ||| batch	count=1
arg	[arg] values ||| [arg] sp_values vocab_size	count=1
function	all the tensors linked ||| filter ts from	count=1
function	image into pil format ||| img	count=1
class	initializes ||| data feeder	count=1
function_arg	graph from [arg_2] ||| [arg_2] [function_1]	count=1
function	function that [function_2] ||| [function_2] [function_1]	count=3
module	load() ||| tensorboard backend event_processing	count=2
module	vocabulary dictionary and ||| learn preprocessing	count=1
function	[function_1] bundle ||| [function_2] [function_1]	count=2
arg	recall@k and ||| class_id	count=1
function	of ||| init	count=1
function	spec [function_2] ||| [function_2] [function_1]	count=2
function	tensor to use ||| parse data tensor or dict	count=1
function	linear_model_fn but returns ||| with model fn ops	count=2
arg	an op to ||| op	count=1
function	list of tensor ||| tensor	count=3
function	a pil image instance ||| img	count=1
function	and loss ||| check loss and target compatibility	count=1
module	clips ||| python training	count=1
class	value tensor based ||| stochastic tensor	count=1
function	[function_1] border ||| [function_1] [function_2]	count=1
function	in a graph and ||| graph	count=1
class	based on ||| dtype	count=1
arg	a sharded ||| shape dtype num_shards	count=1
arg	the value of an ||| name	count=1
arg	(e g input_tensors) from ||| attr attr_name	count=1
function	fetches used in ||| fetches info	count=2
function	assert that the tensor ||| verify tensor	count=1
class	[class] command-line ||| [class] debug	count=2
function	a graph ||| freeze graph	count=1
function	batch normalization ||| batch norm	count=4
module	last ||| python layers	count=1
module	sequence of integers ||| contrib keras python keras	count=1
module	of an integer tensor ||| python keras	count=1
arg	computes [arg_2] ||| [arg_2] [arg_1]	count=12
function	restart ||| restart for file version less than2	count=1
function	a richtextlines object ||| text lines from	count=1
function	a model_fn can return ||| model fn	count=1
module	instance ||| learn python learn	count=1
function	precision ||| precision at	count=1
function_arg	[function_1] [arg_2] only depends on ||| [function_1] dependency [arg_2]	count=4
function	connected layer ||| connected	count=1
class	value tensor based on ||| stochastic tensor	count=1
function	and crossed features ||| crossed features	count=1
function	ndtri has ||| ndtri	count=1
function	make sure ||| check ts compatibility	count=1
arg	and g1 ||| g1	count=1
arg	that infers fft_length argument ||| fft_rank default_name	count=2
function	of this graph ||| graph	count=1
function_arg	[function_1] xs ||| [function_1] ys [arg_2]	count=1
module	predict total sum of ||| contrib factorization python ops	count=1
class	be produced or none ||| indexed slices	count=1
class	for ||| lazy builder	count=2
function	for large ||| read large	count=1
class	version ||| dirichlet	count=1
module	create a ||| python	count=1
arg	dir ||| input_feature_key use_deprecated_input_fn	count=1
function	if ||| is	count=2
class	wrapper should work ||| wrapper session test	count=1
arg	expected_rank ||| expected_rank	count=1
function	probabilities for given features ||| proba	count=1
function	field to [function_2] ||| [function_2] [function_1]	count=4
function	external control dependency ||| external control edges	count=3
arg	[arg] pass ||| inp [arg]	count=1
arg	the value of pred ||| pred	count=1
function	[function_1] a positive ||| [function_2] [function_1]	count=1
class	by concrete ||| debug wrapper	count=1
function_arg	[function_1] [arg_2] ||| [function_1] bn x [arg_2]	count=3
class	the event file ||| event transformer	count=2
arg	from graph_def into the ||| graph_def	count=1
function	tensor watch [function_2] ||| [function_1] [function_2]	count=3
function	clips the [function_2] ||| [function_2] [function_1]	count=5
function	[function_1] string in ||| [function_1] [function_2]	count=3
arg	the recall@k of the ||| k weights	count=1
function	are sessionrunhook raises ||| check hooks	count=1
arg	incompatible changes ||| in_filename out_filename	count=1
function	inserts a placeholder for ||| placeholder	count=1
function	tf options to ||| handle options	count=1
arg	the parameters for ||| use_peepholes share_time_frequency_weights	count=1
function	initializer that generates ||| initializer	count=1
function	for proper ||| sample	count=1
function	prediction [function_2] ||| [function_1] [function_2]	count=2
function_arg	at [arg_2] ||| [arg_2] [function_1]	count=1
module	learn the vocabulary dictionary ||| learn preprocessing	count=1
function_arg	batch normalization [arg_2] ||| [function_1] [arg_2]	count=7
function	divides ||| div	count=2
function	returns local [function_2] ||| [function_1] [function_2]	count=1
function	bias feature ||| bias	count=1
module	a given ||| contrib learn python learn	count=2
class	compute ||| replicas optimizer	count=1
arg	from a run ||| run plugin_name	count=1
function	random rotation ||| random rotation	count=2
function	step and ||| step and	count=2
arg	its inputs to ||| inputs state	count=2
class	algorithm ||| optimizer	count=1
arg	x ||| x name	count=2
function	predictions [function_2] ||| [function_1] [function_2]	count=10
module	1 outcome (vs ||| distributions	count=1
function	collect information ||| collect docs	count=1
function	logistic ||| logistic	count=4
function	merge with ||| merge	count=1
function	get static [function_2] ||| [function_1] [function_2]	count=1
class	control flow ||| control flow	count=4
function	the row ||| row	count=2
function	before processing a ||| batch begin	count=1
module	the core version with ||| python learn	count=1
arg	evaluation data input_fn ||| input_fn steps hooks checkpoint_path	count=1
function	events in the ||| events	count=1
function	sp_input ||| sparse tensor	count=1
function	convert default [function_2] ||| [function_1] [function_2]	count=2
function	the main page ||| test request main page	count=1
module	of an ||| contrib	count=1
class	construct ||| plus low rank	count=1
class	or tensor in the ||| tensor	count=1
module	a tensor for the ||| python feature_column	count=1
module	of x ||| ops	count=1
function	to a string ||| format to string	count=3
function_arg	objective [arg_2] ||| [function_1] [arg_2]	count=1
function	a numpy [function_2] ||| [function_2] [function_1]	count=2
class	the truncated [class_2] ||| [class_2] [class_1]	count=1
function	returns the concatenation of ||| concatenate	count=1
arg	event file in base_dir ||| base_dir	count=1
class	generate ||| source	count=1
module_class	if this [class_2] ||| [module_1] [class_2]	count=2
function	-> ||| build	count=1
module	mnist dataset ||| python keras datasets	count=1
function	a mask ||| mask	count=1
function	[function_1] while ||| [function_1] [function_2]	count=8
class	of the file ||| file io	count=1
arg	in graph ||| graph	count=2
function	with [function_2] ||| [function_2] valued [function_1]	count=1
function	if all are sessionrunhook ||| hooks	count=1
module_class	[module_1] t ||| [module_1] student [class_2]	count=1
module	default keras ||| keras	count=1
module	sparse ||| python ops	count=5
module	and session and runs ||| learn dataframe	count=1
function	help ||| get help	count=1
arg	row and column ||| rows cols	count=1
arg	a run and ||| run	count=5
function	in the signature ||| signature	count=1
function_arg	[function_1] metadata ||| [function_1] [arg_2]	count=1
module	returns number of ||| python ops	count=2
function	boots 3 servers ||| cluster spec propagation three servers one	count=1
function	in a tensor ||| tensor by	count=1
function	the elements of a ||| elements	count=1
arg	with signatures ||| signatures	count=1
class	tensorshape ||| tensor shape	count=1
arg	[arg_1] dicts ||| [arg_1] [arg_2]	count=1
function	a single sparsetensor ||| sparse	count=1
function	second test function ||| test function	count=1
arg	see evaluable evaluable ||| x y input_fn feed_fn	count=2
class	the debug tensor dumping ||| debug test	count=1
function	crop ||| crop	count=1
function	for converting objects of ||| conversion	count=1
module	node-status labels ||| debug	count=1
module	dictionary ||| learn python learn preprocessing	count=2
function	step false positives ||| streaming sparse false positive	count=1
function_arg	[function_1] in base_dir ||| [arg_2] [function_1]	count=6
function_arg	[function_1] an ||| [arg_2] [function_1]	count=6
function	a placeholder ||| placeholder with tensor	count=1
arg	diagonal ||| identity_multiplier diag	count=1
function	servers ensures ||| servers one	count=1
function	inputs of the subgraph ||| inputs	count=1
function	[function_1] subgraph from ||| [function_1] [function_2]	count=1
function	[function_1] using numpy ||| [function_1] [function_2]	count=1
arg	functional interface to ||| inputs	count=3
arg	[arg_1] + ||| [arg_1] biases [arg_2]	count=6
class	for the given ||| lazy builder	count=1
function	conversion function [function_2] ||| [function_2] [function_1]	count=2
arg	that builds ||| features labels	count=3
function	all ||| all	count=12
arg	given tensors ||| tensors	count=1
module	the ||| labeled_tensor python	count=2
module	constructor of ||| debug	count=1
class	metadata for an embedding ||| embedding metadata	count=1
function	gets the [function_2] ||| [function_1] [function_2]	count=10
function	if it is probably ||| is tensor flow	count=1
arg	tensors from tensors ||| tensors capacity num_threads	count=1
class	graph into full ||| graph	count=1
module	saturation [module] an rgb ||| [module]	count=1
function	weight [function_2] ||| [function_2] [function_1]	count=6
class	the run ||| session run	count=1
function	a list of ||| line list	count=1
class	eventaccumulator after adding some ||| mocking	count=1
arg	to a tensor ||| op dtype name as_ref	count=1
module	be produced ||| python framework	count=1
module	for labeled ||| contrib labeled_tensor python ops	count=2
function	computes a header ||| header	count=1
function	sparsetensors [function_2] ||| [function_1] [function_2]	count=2
module	it to placeholders ||| learn learn_io	count=1
module	tensor ||| python framework	count=3
module	learn ||| python learn preprocessing	count=2
arg	(i e tf reduce_sum()) ||| out_grad	count=1
arg	sums the weights ||| weights	count=2
function	the default schedule ||| default schedule	count=2
module	returns a non-reference dtype ||| framework	count=1
function	subset [function_2] ||| [function_2] [function_1]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] resource [arg_2]	count=8
arg	creates a session, ||| master saver checkpoint_dir checkpoint_filename_with_path	count=1
function_arg	[function_1] from ||| [function_1] [arg_2]	count=1
module	as the last ||| learn python learn estimators	count=3
arg	screen output if the ||| output	count=1
function	[function_1] absolute ||| [function_1] [function_2]	count=2
function	hashed ||| hashed	count=1
function	[function_1] html ||| [function_1] [function_2]	count=4
module	parameter p ||| distributions python kernel_tests	count=1
function	creates placeholders from ||| create placeholders from	count=3
function	for proper shape values ||| maybe assert valid sample	count=1
function	delete the tensor for ||| delete	count=1
function	mode in which ||| mode	count=1
arg	next_inputs_fn ||| outputs state sample_ids	count=1
function	generates test [function_2] ||| [function_1] [function_2]	count=2
function	from ||| make	count=1
class	this cell output ||| lstmblock fused cell	count=2
function	tf placeholder for ||| make placeholder from tensor	count=1
function_arg	[function_1] in tensor_list ||| [arg_2] [function_1]	count=2
arg	with the given definition ||| server_or_cluster_def job_name task_index protocol	count=1
function	creates a hook to ||| hook	count=1
arg	nonlinearity ||| op grad_softmax	count=1
function	necessary ||| get or	count=1
class	contains the values indices ||| indexed slices	count=1
function	sort a list of ||| sort dump	count=1
module	dictionary and return indexies ||| learn python learn preprocessing	count=1
module	for ||| integrate python ops	count=1
function	returns the proto_type ||| collection proto type	count=1
module	numpy image tensor ||| python keras preprocessing	count=3
function_arg	[function_1] op ||| [function_1] switch [arg_2]	count=1
class	return indexies ||| categorical processor	count=1
module	get ||| python debug cli	count=6
class	a staging [class_2] ||| [class_1] [class_2]	count=5
function	a signaturedef proto for ||| signature def	count=1
function	initializes all [function_2] ||| [function_2] [function_1]	count=1
function	concatenation has ||| has	count=1
module	sequence of ||| contrib	count=1
function	function to build ||| build	count=1
function	function ||| function with	count=1
module	execute together ||| batching python	count=1
class	run the enqueue ops ||| runner	count=1
module	3 ||| python kernel_tests	count=1
module	bottleneck ||| python slim nets	count=4
function	invalid type ||| invalid number of classes	count=1
arg	dimensions of a 4d ||| data_format	count=1
module	last two dimensions of ||| ops	count=1
arg	computes the recall@k of ||| k	count=1
module	prints ||| tensorboard backend event_processing	count=1
class	tensorarray as a ||| array	count=1
function	of higher [function_2] ||| [function_2] [function_1]	count=1
function	strictly increasing ||| strictly increasing	count=2
arg	equivalence between boolean_mask and ||| ndims_mask arr_shape make_mask	count=1
class	returns a tensorshape ||| tensor shape	count=1
function	recorded in command history ||| command history	count=1
function	set the ||| set	count=3
arg	for a graph element ||| element_name handle_node_names intermediate_tensor_names override_names	count=1
module	a sequence of integers ||| python	count=1
module	return dict symbol ||| tools docs	count=1
function	return tensor version ||| maybe assert valid sample	count=1
function	number of parameters in ||| tf num params	count=1
function_arg	[function_1] at shortcut ||| [arg_2] [function_1]	count=6
module	learn the ||| preprocessing	count=1
function	the variables and names ||| and	count=1
function	sets the learning ||| set learning	count=2
module	returns ||| keras python keras engine	count=1
function	writes graph_def ||| write graph	count=1
function	containing bucketed floats ||| quantize weight rounded	count=1
function	defined in ||| defined	count=1
function	ndtri has [function_2] ||| [function_2] [function_1]	count=5
function_arg	[function_1] values is ||| [function_1] proper iterable [arg_2]	count=1
module	then return ||| python ops distributions	count=1
module	a sequence of ||| keras python keras	count=1
arg	of ||| name	count=2
function	dictionary [function] ||| [function] arg	count=2
arg	verifies the second-order gradients ||| input_sizes output_sizes window_rows	count=1
arg	computes the ||| weights	count=4
function	combined model ||| combined	count=2
arg	loc and scale ||| loc scale validate_args allow_nan_stats	count=1
function	be integrated ||| can created before minimize called	count=1
function_arg	cond that [arg_2] ||| [arg_2] [function_1]	count=2
function	filter for ||| filter	count=1
function	the collection with ||| to collection	count=1
function	deconv layer based on ||| get deconv	count=1
function	[function_1] root name ||| [function_1] [function_2]	count=1
arg	trains ||| checkpoint_dir num_steps	count=2
function	to a ||| prepare	count=1
function	subset of [function_2] ||| [function_2] [function_1]	count=1
module_class	the variable ||| python ops variable	count=1
function	tuples into raw ||| features to raw	count=2
module	1 outcome ||| ops distributions	count=1
arg	tuples ||| dtypes unknown_dim_allowed unknown_rank_allowed	count=1
function	[function_1] structure of ||| [function_1] [function_2]	count=2
module	image ||| contrib image python ops	count=1
class	initializes ||| base estimator	count=1
function	add ops to save ||| add save	count=1
class	by the ||| plugin asset	count=1
module	[module_1] the tensor ||| [module_2] [module_1]	count=2
function	float [function_2] ||| [function_2] [function_1]	count=1
module	batch ||| python keras	count=1
class	queue element ||| queue base	count=2
function	clips tensor ||| clip by	count=3
arg	runs session for ||| session	count=1
arg	given a feature_spec ||| feature_spec	count=1
arg	[arg_1] for var ||| [arg_2] [arg_1]	count=2
function	takes a markdown ||| markdown	count=1
function	broadcasted dynamic [function_2] ||| [function_2] [function_1]	count=1
module	tensor with ||| contrib keras python keras	count=1
function	prefix using ||| prefix	count=1
function	make a table ||| make table	count=3
function_arg	[function_1] until a ||| [arg_2] [function_1]	count=1
arg	[arg_1] from_proto functions ||| [arg_1] to_proto [arg_2]	count=1
module	the axes of two ||| labeled_tensor python ops	count=1
function	[function_1] squared ||| [function_1] [function_2]	count=8
function	create and [function_2] ||| [function_2] [function_1]	count=9
module	read ||| learn python learn learn_io	count=4
function	additional logistic [function_2] ||| [function_2] [function_1]	count=1
arg	inputs to ||| inputs	count=3
function	[function_1] matrix with ||| [function_2] [function_1]	count=7
module	and return ||| python learn	count=1
function	shear of ||| shear	count=1
function_arg	keys of [arg_2] ||| [function_1] [arg_2]	count=3
function	dask dataframe ||| dask	count=1
function	batch and ||| batch features shared	count=1
arg	given examples ||| examples unused_features	count=4
function	model parameters and flops ||| logged ops	count=1
class	initializer as a json-serializable ||| initializer	count=1
module	ops ||| ops	count=6
module	gets ||| python ops	count=3
module	a 3d numpy ||| keras preprocessing	count=1
module	for evaluating a ||| tensor_forest	count=1
function	loads all ||| load all	count=2
function	current default graph ||| import graph	count=1
function	write ||| write histogram series	count=1
arg	biasaddgrad [arg_2] ||| [arg_2] [arg_1]	count=2
module	estimate of ||| bayesflow python ops	count=1
module_class	[module_1] normal distribution ||| [module_1] multivariate [class_2]	count=3
module_class	[module_1] a layer ||| [class_2] [module_1]	count=6
function	raises valueerror if unspecified ||| len	count=1
arg	with mean [arg_2] ||| [arg_2] scale validate_args [arg_1]	count=2
function	partition graphs ||| partition graphs	count=2
function	the sum of ||| sum	count=3
function_arg	true positives [arg_2] ||| [arg_2] [function_1]	count=6
function	linear_model_fn but ||| model fn with model fn	count=2
arg	for op ||| op loop_state	count=1
function	handle visiting a call ||| visit call	count=1
function	init op used by ||| init op	count=1
function	manager that makes this ||| as	count=2
module	and scores ||| learn python learn utils	count=1
function	generator ||| generator	count=1
class	then return tensor ||| dirichlet	count=1
function	tensor ||| tensor by	count=1
function_arg	[function_1] from input_tensor ||| [function_1] [arg_2]	count=8
module	and session and runs ||| python learn	count=1
function	[function_1] directory for ||| [function_2] [function_1]	count=3
function	csv ||| csv base	count=1
function	main page and ||| main page	count=1
function	all ||| filter ts from regex	count=2
function	tag ||| tag	count=2
function	kind ||| get kind	count=1
arg	estimated size ||| print_info	count=1
function_arg	[function_1] op for ||| [arg_2] [function_1]	count=1
function	makes ||| as	count=2
function	linear regression ||| regression	count=1
arg	[arg_1] loc ||| [arg_2] scale validate_args [arg_1]	count=1
arg	tensorforestestimator instance ||| params device_assigner model_dir graph_builder_class	count=1
function	that match ||| filter ts from	count=1
class	event ||| event accumulator	count=4
function	add the backprop ||| add back prop	count=2
function	placeholder for ||| placeholder from dtype	count=1
function	address of the given ||| address	count=1
function	output values of ||| setup values	count=1
function	the asset ||| get asset	count=1
function	tensor ||| evaluate tensor slice	count=1
arg	their norms ||| clip_norm use_norm name	count=1
module	axes of ||| labeled_tensor python ops	count=2
class	we ||| files	count=1
class	to disk and ||| writer	count=1
class	operator [class_2] ||| [class_2] [class_1]	count=1
function	input arg into ||| exprs arg string	count=1
arg	input_tensors) ||| node_index attr attr_name	count=1
arg	[arg_1] hints ||| [arg_1] [arg_2]	count=5
module	which gets ||| contrib distributions	count=1
function	[function_1] dense and ||| [function_2] sparse [function_1]	count=2
class	indicated ||| tensor flow data frame	count=1
function	loop to ||| loop	count=2
function	[function_1] static shape ||| [function_2] [function_1]	count=3
function	sessionrunhook ||| check hooks	count=1
module	of inverse and forward ||| python ops	count=1
module_class	[module_1] class ||| [module_1] [class_2]	count=2
function	options ||| handle options	count=1
function	propagates through all ||| propagate	count=1
function	bucketized column ||| bucketized column	count=2
function	returns a filename for ||| get checkpoint filename	count=1
function	[function_1] control dependency ||| [function_2] [function_1]	count=3
function	for nearest ||| nearest	count=1
module	rank-2 tensor ||| contrib solvers	count=1
function	normal distribution ||| normal	count=2
function	of number fields ||| number fields	count=2
function	have invalid type ||| invalid	count=2
module	s of the ||| keras engine	count=1
function	values from a ||| values from	count=1
function	[function_1] standard ||| [function_2] [function_1]	count=1
function	[function_1] [function_2] input ||| [function_1] [function_2] dependency	count=2
function	it into html ||| text array to html	count=1
function_arg	[function_1] to save_path/filename ||| [arg_2] [function_1]	count=2
module	which values ||| python	count=1
function	sessionlog start message ||| session log start message	count=1
function	model_fn ||| model fn ops	count=2
function	a checkpoint from ||| checkpoint path	count=2
function	create [function] variable ||| get [function]	count=1
class	loop for every loop ||| while context	count=1
function_arg	[function_1] co-existance of ||| [arg_2] [function_1]	count=1
function	[function_1] connected layer ||| [function_1] [function_2]	count=4
module_class	s [class_2] ||| [module_1] [class_2]	count=10
function	link for [function_2] ||| [function_2] [function_1]	count=4
function	softmax training [function_2] ||| [function_2] [function_1]	count=1
module	repeat ||| python keras	count=1
arg	op if [arg_2] ||| [arg_1] [arg_2]	count=1
function	applies node renames in ||| apply final node renames	count=1
arg	parameters loc and scale ||| loc scale validate_args	count=1
module	used by the backend ||| keras python keras	count=1
function_arg	maximum of [arg_2] ||| [arg_2] [function_1]	count=2
arg	the object itself ||| file_path	count=1
function_arg	iff [arg_2] ||| [function_1] enter [arg_2]	count=3
function	of a forward and ||| ops	count=1
function_arg	[function_1] two tensors ||| [function_1] [arg_2]	count=1
module	will ||| framework	count=1
module_class	this graph ||| python framework graph	count=1
function	a state saver ||| state	count=1
function	gets an existing ||| get	count=1
function_arg	[function_1] visitor ||| [arg_2] [function_1]	count=3
function	constructs a ||| init	count=9
function	from csv ||| from csv with	count=1
function	the vocabulary dictionary ||| fit transform	count=1
module	all layer ||| contrib keras python keras engine	count=2
module	tuple of ||| ops	count=2
function	op to ||| get string to hash bucket	count=1
module	tensorshape object[s] ||| contrib seq2seq	count=1
module	with training ||| python learn	count=3
function_arg	[function_1] [arg_2] ||| [function_1] sp_input container shared_name [arg_2]	count=1
class	the string ||| runner	count=1
function	training [function_2] ||| [function_1] [function_2]	count=27
function	state of [function_2] ||| [function_2] [function_1]	count=4
function	a sequence of ||| sequences	count=1
function	tensor or ||| n to tensor or	count=1
function	[function_1] fetches and ||| [function_2] [function_1]	count=6
function	[function_1] start event ||| [function_2] [function_1]	count=3
function	shape values ||| maybe assert	count=1
function	the first event ||| first event	count=2
function_arg	[function_1] capturevariable monitor ||| [function_1] [arg_2]	count=1
function	device ||| apply device	count=1
module	compilation [module_2] ||| [module_1] [module_2]	count=4
module	used to ||| python layers	count=2
function	node from which the ||| node	count=1
arg	runoptions for a tensorflow ||| run_options	count=1
function	a map ||| map	count=1
class	stack for tests ||| grpc server test	count=1
class	this [class_2] ||| [class_2] [class_1]	count=5
module	normally distributed floating ||| specs	count=1
arg	results accounting ||| embedding_weights sparse_ids sparse_weights combiner	count=1
function	[function_1] file ||| [function_1] [function_2] column_name vocabulary_file num_oov_buckets vocab_size	count=1
function	labels ||| status label	count=1
function	the data dependencies ||| datafile	count=1
module	all are sessionrunhook raises ||| estimator	count=1
module_class	params from [module_1] [class_2] format ||| [module_1] [class_2] params	count=1
module	lists of the ||| contrib linear_optimizer python ops	count=1
module	proper shape ||| ops	count=1
module	of a tf ||| ops	count=1
function	observations dict for the ||| observations map	count=1
class	event for a ||| event	count=1
function	linked to ||| filter	count=1
function	registered for classes ||| registered	count=1
function_arg	infer hints [arg_2] ||| [arg_2] [function_1]	count=6
module	and ||| learn python learn preprocessing	count=2
class	mapper that handles the ||| mapper	count=1
function	extract command from ||| command from	count=1
class	name of ||| slices	count=1
module	proper ||| distributions	count=1
module	a menuitem from the ||| python	count=1
arg	all steps ||| noutput scope name	count=1
function	of running an op ||| run op prebuilt	count=1
function	add an [function_2] ||| [function_1] [function_2]	count=4
function	flow context ||| flow context	count=4
function	[function] func ||| [function]	count=2
arg	random centers ||| centers	count=1
module	in stop_gradient ||| contrib bayesflow python	count=1
function	reroute errors ||| reroute	count=1
module	1 ||| distributions python ops	count=5
function	initializer to ||| checkpoint initializer	count=1
function	beginning of [function_2] ||| [function_2] [function_1]	count=2
class	constructs ||| grpc debug hook	count=1
arg	func and returns ||| func	count=1
function	and concatenate ||| many	count=1
function	set the [function_2] ||| [function_1] [function_2]	count=2
function	signature to object ||| signature to signature def	count=1
module	with the matrix of ||| contrib factorization python ops	count=1
module	a given directory ||| python learn	count=1
arg	runoptions for [arg_2] ||| [arg_1] [arg_2]	count=1
function	a full ||| full path	count=1
arg	gradients for the 5 ||| op grad	count=1
function	[function_1] to enqueue ||| [function_2] [function_1]	count=2
function	shape function for a ||| conv2d shape	count=1
module	raises typeerror ||| python	count=1
function	[function_1] data ||| [function_2] [function_1]	count=28
function	a dimension ||| dimension	count=1
module	a sequence of ||| contrib	count=1
function	richtextlines object ||| lines from rich	count=1
class	to some sample data ||| image data	count=1
function	product of ||| mul	count=1
function	log-odds of a ||| logits	count=3
function	[function] metadata information ||| [function] run	count=1
class	the column ||| column	count=1
function	a flow end event ||| flow end	count=1
module	of keras ||| contrib keras python keras	count=1
class	returns a tensor for ||| builder	count=1
function_arg	verifies the [arg_2] ||| conv2dtest [function_1] values [arg_2] filter_in_sizes stride padding	count=1
arg	a variable ||| variable value decay zero_debias	count=1
function	rbf kernel given input ||| rbf kernel	count=1
function_arg	[function_1] storing ||| [arg_2] [function_1]	count=3
function	returns [function_2] ||| [function_1] unique target [function_2]	count=2
function	[function_1] decoder ||| [function_2] [function_1]	count=2
function	adds tf options ||| options	count=1
function	input to ||| input	count=1
arg	fetches ||| fetches	count=3
function	a merge op ||| merge grad	count=1
function	file to a string ||| file to string	count=1
module	name -> _guideref ||| docs	count=1
function	with dynamic shapes ||| dynamic	count=2
module	[module_1] building ||| [module_1] [module_2]	count=6
module	sampled ||| python ops	count=1
function	matrix elements as ||| matrix	count=1
arg	tensor into int64 ids ||| num_oov_buckets vocab_size default_value	count=1
module	utility ||| contrib keras python keras applications	count=1
function	and return a single ||| single	count=1
function	absolute [function_2] ||| [function_1] [function_2]	count=6
module	__init__ which ||| distributions python	count=1
function	modelfnops that a model_fn ||| model fn ops	count=1
module	image ||| slim data	count=1
arg	tensor ||| tensor paddings	count=1
arg	tensor ||| tensor name	count=1
function_arg	dict to [arg_2] ||| [function_1] [arg_2]	count=1
function	the control ||| get control	count=1
arg	[arg] image ||| [arg]	count=6
function_arg	[function_1] [arg_2] ||| [function_1] less equal [arg_2]	count=2
function	[function_1] vectors ||| [function_2] [function_1]	count=3
function_arg	[function_1] state_name ||| [function_1] [arg_2]	count=2
function	basic metrics for ||| metrics for	count=1
function	of a tensor that ||| tensor	count=1
function	[function_1] saved checkpoint ||| [function_1] [function_2]	count=3
module	callback [module] on ||| [module]	count=1
arg	for onrunendrequest ||| performed_action run_metadata client_graph_def tf_error	count=1
module	training ||| python learn	count=3
module	creates training and ||| learn python learn ops	count=1
function	that maps input ||| preprocess input exprs	count=1
function	to use based ||| string to hash bucket	count=1
function	calculates false positives for ||| sparse false positive at k	count=1
function	a feature ||| sequence feature	count=1
function_arg	log [arg_2] ||| [function_1] [arg_2]	count=3
arg	variabledef ||| export_scope	count=1
function	proper shape ||| assert valid sample	count=1
function	keys of given ||| keys	count=1
function	returns the values of ||| values	count=1
function	dense [function_2] ||| [function_1] [function_2] sparse	count=1
module	generates ||| scripts	count=2
function	the condition ||| condition	count=1
function	weighted cross-entropy [function_1] [function_2] ||| [function_2] [function_1] by	count=3
function	to an example ||| example	count=1
function	-> _guideref from the ||| build guide index	count=1
function	generates output predictions ||| predict	count=2
arg	flip_vector_to_matrix with ||| vec batch_shape	count=2
function	compute set operation ||| set operation	count=2
function	to search ||| regex search with	count=1
function	latest saved [function_2] ||| [function_1] [function_2]	count=2
function	get ||| ts	count=1
function	a python callable that ||| make callable	count=1
module	the given list ||| contrib slim python	count=1
function	[function_1] trigger ||| [function_1] [function_2]	count=1
function	dict_to_state_tuple ||| state tuple dict conversion	count=1
function	summary computations ||| summaries	count=1
function	for ops used by ||| for	count=1
module	indices of [module_2] ||| [module_2] [module_1]	count=1
class	feature for tf parse_example ||| feature	count=1
arg	for transposed 3d ||| filters kernel_size strides	count=1
function	symbol name -> _guideref ||| index	count=1
function	to loop ||| test loop	count=1
arg	a list of side_effects ||| side_effects	count=2
function	verifying the output ||| test adjust	count=1
arg	check counts ||| counts check_integer	count=1
module	local ||| python debug wrappers	count=1
arg	precision@k of [arg_2] ||| [arg_2] labels [arg_1]	count=1
function	prevents adding the extra ||| return as is	count=1
function	exact rbf kernel given ||| exact rbf kernel	count=1
arg	riemann sum ||| labels weights num_thresholds	count=1
class	full names to ||| generator visitor	count=1
arg	list of tensors into ||| tensors	count=1
function	gets the ||| get	count=6
arg	rank ||| rank data summarize	count=2
class	a worker session creator ||| worker session creator	count=1
class	dimentation [class] ||| [class]	count=1
function	tag number ||| tag	count=1
function	name -> _guideref from ||| guide index	count=1
class	this queuerunner ||| queue runner	count=1
class	tensor ||| tensor flow benchmark	count=1
function_arg	inputs [arg_2] ||| [function_1] [arg_2]	count=8
module	this cell output dimension ||| rnn python	count=1
function	connected layer and returns ||| connected	count=1
function	of load() ||| load	count=1
module	values will ||| framework	count=1
class	time ||| time	count=1
function	transforms ||| to	count=1
function_arg	function that [arg_2] ||| [function_1] [arg_2]	count=2
arg	yields batches ||| start_queues	count=1
module	1 outcome (vs ||| python ops distributions	count=1
module	sum of ||| factorization python ops	count=1
function	values for given ||| test output values	count=1
function	[function_1] subgraph ||| [function_1] [function_2]	count=1
function	file system implementation ||| file system	count=2
function	prepares a feature spec ||| feature spec	count=1
arg	tensors x and ||| x	count=1
function	positives ||| positive at k	count=8
module	checks ||| python saved_model	count=1
function	[function_1] sparse id ||| [function_1] 1d [function_2]	count=1
function	dense batch ||| to dense	count=1
function	creates the [function_2] ||| [function_2] [function_1]	count=3
function	supported [function_2] ||| [function_2] [function_1]	count=1
module	get ||| tools dist_test scripts	count=1
class	to test ||| subscribe test	count=1
function	loads the model ||| load	count=1
module	of ||| plugins	count=1
module_class	a new rmsprop ||| python training rmsprop	count=1
function	examples to extract ||| examples	count=1
function	digamma function psi_p a ||| multi digamma	count=1
arg	in run() call fetches ||| fetches	count=1
module	gradient of ||| tensor_forest hybrid python ops	count=3
class	without a softmax ||| hybrid model	count=1
function_arg	[function_1] subgraph view ||| [function_1] [arg_2]	count=1
function	op to use ||| string to hash	count=1
function	function returns a dict ||| get	count=2
function	create an ||| create analyzer ui	count=1
arg	biasaddgrad ||| received_grad	count=1
function	given variable or ||| variable or	count=1
function	the same values ||| values	count=1
arg	loss_collection ||| loss_collection	count=1
arg	print its execution time ||| device output_shape variable num_outputs	count=1
function_arg	[function_1] of op ||| [arg_2] [function_1]	count=1
function_arg	data [arg_2] ||| [function_1] [arg_2]	count=4
arg	to the command ||| command	count=1
function	of compressed histograms ||| compressed histograms	count=2
function	false positives for ||| streaming sparse false positive at k	count=1
function	a tensor ||| from tensor	count=1
arg	dictionary of sequences ||| sequences	count=1
arg	var if ||| var	count=1
module_class	the reference to [module_1] [class_2] ||| [module_1] [class_2]	count=2
arg	tensor text ||| tensor np_printoptions	count=1
arg	tensors according to which_bucket ||| tensors which_bucket	count=1
class	which values will be ||| indexed slices	count=1
function	which examples [function_2] ||| [function_2] [function_1]	count=5
function	graph ||| python graph	count=1
function	condition based ||| condition	count=1
function	update [function_2] ||| [function_2] [function_1]	count=14
arg	tensors x [arg_2] ||| [arg_1] [arg_2]	count=4
function	the shape of ||| shape	count=2
function	[function_1] pooling ratio ||| [function_2] [function_1]	count=2
class	creates ||| dataset data provider	count=1
function	computes the projections ||| get projections	count=1
module	instantiates ||| contrib keras python keras	count=1
function	return the save path ||| save path	count=1
function	converts ||| convert row	count=1
class	callback ||| base monitor	count=1
arg	until ||| last_checkpoint seconds_to_sleep timeout	count=1
function	of this [function_2] ||| [function_2] [function_1]	count=1
class	eventaccumulator contains ||| mocking event accumulator	count=1
function	feature tuples into ||| features to	count=1
class	tests ||| linear classifier test	count=5
function	inference ||| base inference	count=1
function	matrix multiply ||| matmul	count=1
arg	the values in y_np ||| y_np	count=1
function	[function_1] invalid ||| [function_2] [function_1]	count=9
function	[function_1] json ||| [function_1] [function_2]	count=1
function	batch of ||| cdf batch	count=1
arg	condition cond ||| cond	count=1
function	step false positives ||| sparse false positive	count=1
arg	render ||| row txt color_segments	count=1
module_class	inserted/accessed in [class_2] ||| [module_1] [class_2]	count=2
module	in stop_gradient ||| bayesflow python	count=1
class	of ||| bernoulli	count=2
class	[class_1] descent ||| [class_2] [class_1]	count=2
module	form the ||| python ops	count=1
module	returns ||| python tools	count=1
function	reopens the eventfilewriter ||| reopen	count=1
module	with ||| learn python learn learn_io	count=2
function	a matmul [function_2] ||| [function_2] [function_1]	count=3
function	local [function_2] ||| [function_2] [function_1]	count=2
function	step false ||| false	count=1
function	from the files ||| index	count=1
function	by atrous convolution ||| atrous	count=2
function	[function_1] asserts ||| [function_1] [function_2]	count=10
function	into a ||| string	count=1
arg	outer_coord ||| outer_coord	count=1
arg	elements across dimensions ||| axis keep_dims reduction_axes	count=1
arg	[arg_1] for collection_name ||| [arg_2] proto_type to_proto [arg_1]	count=1
arg	values into a histogram ||| values	count=1
module	a non-reference ||| python framework	count=1
module	the tensors at ||| contrib graph_editor	count=1
arg	with args ||| args	count=1
function	training with ||| train	count=1
class	end of the file ||| file	count=1
function	node with ||| node	count=7
module	latest ||| plugins projector	count=1
class	of ||| indexed slices	count=1
function_arg	[function_1] sequenceexamples ||| [function_1] [arg_2]	count=6
class	create ||| graph view	count=1
function	regex search ||| regex search	count=1
arg	labels and [arg_2] ||| [arg_2] [arg_1]	count=9
arg	precision@k of the ||| k class_id	count=1
function	calls model ||| call model	count=2
function	returns true iff ||| is constant	count=2
module	return dict symbol ||| tools	count=1
function	[function_1] [function_2] ||| [function_2] with fake quant [function_1]	count=1
function_arg	[function_1] holds ||| [function_1] x [arg_2]	count=2
function	vector with [function_2] ||| [function_1] [function_2]	count=4
function	model parameters and flops ||| get logged ops	count=1
module	tuples of ||| python ops	count=1
function	adjust [function_2] ||| [function_2] [function_1]	count=2
arg	the parameters for an ||| num_units input_size use_peepholes	count=1
arg	a microbenchmark to ||| target size iters	count=1
function	a pairwise-errors-squared ||| mean pairwise squared error	count=1
function	[function_1] given path ||| [function_2] [function_1]	count=4
module	evaluates ||| keras python keras	count=1
module	the sense of vector ||| linalg python	count=3
function	analyze tensor references ||| analyze	count=1
function	an example ||| to example	count=1
function	input is a non-negative ||| assert non negative	count=1
arg	with this name ||| name shape dtype	count=1
module	values ||| python ops distributions	count=2
function	plugin asset ||| asset	count=1
function	a tf placeholder for ||| make placeholder from dtype	count=1
function	fingerprint concatenation has no ||| has no	count=1
module	batch matrix representing this ||| python ops	count=1
module	__init__ which ||| distributions	count=1
function	when error occurs in ||| debugging during op error	count=1
class	to generate ||| source helper	count=1
function	return the summarywriter ||| summary writer	count=1
function	mappers ||| mapper	count=1
module	raises typeerror otherwise ||| python estimator	count=1
class	dense [class_2] ||| [class_1] [class_2]	count=1
class	that failed ||| op error	count=1
function	parses and [function_2] ||| [function_1] [function_2]	count=1
function_arg	[function_1] v is ||| [function_1] variable [arg_2]	count=1
function_arg	axis order [arg_2] ||| [function_1] [arg_2]	count=1
arg	resnet_v1 bottleneck ||| scope base_depth num_units stride	count=1
function	linked ||| filter ts from regex	count=2
function_arg	[function_1] [arg_2] ||| [function_1] keyword_required [arg_2]	count=2
function	get the tensor ||| get	count=2
module	a sequence ||| python keras preprocessing	count=1
function	shape values then ||| assert valid	count=1
function	creates an embedding ||| embedding	count=1
module	of ||| python learn preprocessing	count=2
module_class	of the [class_2] ||| [module_1] conditional accumulator [class_2]	count=1
arg	(e g input_tensors) ||| attr attr_name	count=1
arg	transformations to [arg_2] ||| [arg_2] [arg_1]	count=7
arg	[arg_1] rate parameters ||| [arg_2] [arg_1]	count=2
function	full covariance ||| full covariance	count=2
arg	parameters loc [arg_2] ||| [arg_2] [arg_1]	count=1
function	adds a [function_2] ||| [function_1] [function_2]	count=6
function	create a new graph ||| graph replace	count=1
module	a batch of ||| contrib distributions python ops	count=1
function	the inception [function_2] ||| [function_1] [function_2]	count=1
function	at a ||| at sensitivity	count=1
function	check to make ||| test	count=1
class	learn ||| categorical	count=1
arg	labels and ||| labels weights metrics_collections	count=2
arg	values to a list ||| values dtype name as_ref	count=1
module	dataset from ||| contrib learn python learn datasets	count=2
module	tensor and returns it ||| keras python keras	count=1
function	return a tensor to ||| parse data tensor	count=1
function	to ||| ops	count=1
function	shape ||| shape tensor	count=2
function_arg	[function_1] the given ||| [function_1] name shape dtype [arg_2]	count=1
class	the vocabulary dictionary ||| processor	count=1
function	fill tensor shapes ||| fill	count=1
function_arg	[function_1] an epoch ||| [function_1] [arg_2]	count=2
function	test ||| test ksize2x2stride1x1rate1x1valid	count=1
class	the accumulator ||| sparse conditional accumulator	count=2
function	scalars function returns ||| scalars	count=1
arg	on featurecolumns ||| columns_to_tensors feature_columns	count=1
function_arg	a merge [arg_2] ||| [function_1] op [arg_2]	count=1
arg	and body ||| body loop_vars shape_invariants	count=1
module	events for ||| tensorboard backend event_processing	count=1
function_arg	loss [arg_2] ||| [function_1] [arg_2]	count=2
module	a sequence of integers ||| contrib keras python keras	count=1
function	returns a dict ||| get	count=2
function	ops that ||| ts from regex	count=1
module	with integer ||| python learn	count=1
arg	params per shard ||| filename_tensor per_device	count=1
function	[function_1] linear-only ||| [function_1] [function_2]	count=2
function	dense inputs ||| cross dense	count=1
function	model variables ||| get model variables	count=2
function	[function_1] bounding ||| [function_1] [function_2]	count=1
module	the tensors ||| python	count=1
function	at a given sensitivity ||| sensitivity at	count=1
function	accumulator for each ||| accumulator	count=1
module	all layer ||| keras python keras engine	count=2
arg	values ||| values value_range nbins	count=1
function	posterior predictive ||| conjugates known scale predictive	count=1
function	values in ||| values	count=2
function	collisions ||| collision	count=1
module	make sure we don't ||| tools compatibility	count=1
function	for mini [function_2] ||| [function_1] [function_2]	count=1
function	any external [function_2] ||| [function_1] [function_2]	count=4
arg	condition is ||| condition	count=1
arg	of experiment ||| experiment	count=1
module	elements of ||| python ops	count=1
function	retrieves the output shape ||| output shape	count=1
function	only the rows ||| rows	count=1
module	rnn cell composed ||| rnn python	count=1
function	restoring things ||| smart unset all	count=1
function	function for ||| proto function	count=1
function	trigger ||| trigger	count=2
function	header for use with ||| get header	count=1
class	[class] specified timestamp ||| [class]	count=1
function	from ||| extract	count=2
function	hparamdef ||| proto	count=1
function	of given variable or ||| variable or	count=1
function	with respect to sparse ||| sparse precision at k	count=1
module	given number ||| contrib learn python learn	count=1
function_arg	[function_1] val ||| [function_1] [arg_2]	count=1
function	serving_input_receiver_fn ||| serving input receiver fn	count=1
function_arg	[function_1] the model ||| [arg_2] [function_1]	count=1
arg	single ||| sample_weight	count=1
function	and ||| with feed	count=1
function	mappers [function_2] ||| [function_2] [function_1]	count=2
function_arg	model function [arg_2] ||| [function_1] [arg_2]	count=2
function	a list of tensor ||| n to tensor	count=3
arg	values to ||| values dtype name	count=1
class	initializes ||| saving rnn estimator	count=1
function	a given condition ||| rank condition	count=1
function	true ||| is	count=3
module	dense ||| python ops	count=1
function	exit the ||| exit	count=1
function	vgg 19-layers ||| vgg 19	count=1
function	[function_1] centered ||| [function_1] [function_2]	count=7
function	[function_1] from a ||| [function_1] [function_2]	count=17
class	timer ||| timer	count=1
module	session and runs ||| python learn dataframe	count=1
function	maps input key to ||| input exprs	count=1
arg	keys to ||| keys	count=1
function	generate an ||| generate	count=1
class	[class_1] outputs dictionary ||| [class_2] [class_1]	count=1
function	[function_1] and ||| [function_2] [function_1]	count=25
class	the current batch of ||| queued sequence batch	count=1
function	of its ||| from	count=1
function	static ||| vector to matrix static	count=1
function	of the run() call ||| run	count=1
function	a placeholder tensor ||| t with placeholder	count=1
function	with dynamic shapes ||| vector to matrix dynamic	count=1
function	ops ||| filter ts	count=1
function	divides ||| safe scalar div	count=1
function	yields ||| list directory	count=1
function_arg	[function_1] to runoptions ||| [arg_2] [function_1]	count=3
function	initializes the given ||| initialize	count=1
module	debug dump ||| python debug	count=1
function	correlation coefficient between ||| correlation	count=1
class	accumulator ||| conditional accumulator	count=4
function_arg	a summary [arg_2] ||| [function_1] [arg_2]	count=2
function	obtain all input ||| get input	count=1
module	variable and ||| keras	count=1
function_arg	auc via [arg_2] ||| [function_1] [arg_2]	count=2
arg	given index ||| index tensor	count=1
class	queue when the ||| queue runner	count=1
class	in the session ||| base debug wrapper session	count=1
function	[function_1] integer column ||| [function_2] [function_1]	count=2
function	trace information ||| trace info	count=1
function	[function_1] for binary ||| [function_2] [function_1]	count=3
function	a tensor to ||| tensor	count=3
arg	threads [arg_2] ||| [arg_1] [arg_2]	count=1
function	[function_1] data directory ||| [function_2] [function_1]	count=3
class	normal ||| normal linear operator	count=2
module	method for determining ||| contrib keras	count=1
module	and feed ||| learn python learn	count=1
function	element in args belong ||| graphs	count=1
class	shape values ||| dirichlet multinomial	count=1
module	the path is a ||| python	count=1
module	of shards ||| python ops	count=1
function	[function_1] [function_2] ||| [function_2] hook [function_1]	count=1
module	(e g ||| python	count=1
function	[function_1] inner dimensions ||| [function_2] [function_1]	count=2
function_arg	creates a ||| init name	count=1
function	defines a flag of ||| define	count=2
module	dataset of ||| contrib learn python learn datasets	count=1
function	decoder ||| decoder	count=3
function	model parameters and flops ||| get logged	count=1
module	check to make sure ||| compatibility	count=1
class	dropout ||| dropout	count=1
function	a tf placeholder for ||| make placeholder from	count=2
function	a serving_input_receiver_fn ||| serving input receiver fn	count=1
function	create synthetic boolean_labels and ||| synthetic	count=1
function	routingfunction ||| kfeature routing function gradient	count=2
module	batch systems of ||| python ops	count=1
class	the name of the ||| indexed slices	count=1
function	an ||| compatible	count=1
arg	[arg_1] labels ||| [arg_2] [arg_1]	count=16
function_arg	existing variable [arg_2] ||| [arg_2] [function_1]	count=2
module	from the ||| python debug	count=1
function	[function_1] or list ||| [function_1] [function_2]	count=3
module	object[s] ||| seq2seq python	count=1
function	to 0 with ||| zeros	count=1
module	all are ||| python estimator	count=1
class	1 ||| relaxed bernoulli	count=2
function	classification model ||| model	count=2
function	[function_1] [function_2] ||| [function_2] table [function_1]	count=4
class	the vocabulary dictionary and ||| categorical processor	count=1
function	rejection ||| rejection	count=1
arg	linear weights ||| column columns_to_tensors embedding_lookup_arguments num_outputs	count=1
class	for the layer ||| layer	count=1
module	of a matrix ||| python ops	count=1
class	a metadata ||| metadata	count=1
function	a sparse tensor that ||| sparse	count=1
module	tensor of a ||| contrib distributions python ops	count=1
function	wrap a call ||| wrap	count=1
function	infer hints from ||| infer	count=1
module	and session and runs ||| learn python learn dataframe	count=1
class	tests ||| streaming sparse precision test	count=1
function	2 then tile along ||| expand and tile	count=1
function_arg	check the [arg_2] ||| [function_1] value [arg_2]	count=1
function	have been detected ||| detected	count=1
function_arg	paths [arg_2] ||| [function_1] [arg_2]	count=1
function	makes this ||| as	count=2
function	for serving ||| default serving input fn	count=1
function	[function_1] dnn-linear combined ||| [function_2] [function_1]	count=4
function	health [function_2] ||| [function_2] [function_1]	count=1
function	tensors linked to ops ||| filter ts	count=1
module	learn the vocabulary ||| contrib learn python	count=1
function	rotation of ||| rotation	count=1
module	image ||| contrib keras python keras	count=1
function_arg	[function_1] particular step ||| [arg_2] [function_1]	count=1
class	mapper that handles ||| mapper	count=1
arg	[arg_1] and control_outputs ||| [arg_2] [arg_1]	count=1
module	of ||| contrib tensor_forest hybrid python ops	count=3
module	safe ||| losses python losses	count=1
class	load ||| dump dir	count=1
function	vs grucell ||| vs gru cell	count=2
function	discard expired ||| maybe purge	count=1
module	output ||| contrib rnn python ops	count=1
module	returns an ||| contrib learn python learn	count=1
arg	steps ||| noutput scope	count=1
function	assert ||| assert	count=14
function	summaries from ||| values from	count=1
module	a keras ||| contrib keras python keras	count=2
function_arg	serving [arg_2] ||| [function_1] [arg_2]	count=1
function	of integers ||| to	count=1
function	[function_1] a sequence ||| [function_2] [function_1]	count=1
module	that of a debug ||| python debug	count=1
module	lists to tuples of ||| python ops	count=1
arg	image ||| image color	count=1
function	the feature [function_2] ||| [function_1] [function_2]	count=3
class	for a single ||| to event	count=1
function	real [function_2] ||| [function_1] [function_2]	count=21
function	direct python implementation ||| space to batch direct	count=1
function	names to skip ||| tests to skip	count=2
function	summary ||| image summary	count=1
function	recall values for ||| recall	count=1
arg	col batches ||| batch_size project_row	count=1
arg	the labels and predictions ||| predictions labels weights	count=2
arg	condition and body ||| body original_loop_vars	count=1
function	[function_1] from a ||| [function_1] [function_2] map node_map	count=2
function	[function_1] neighbor ||| [function_1] [function_2]	count=4
arg	over the elements elems ||| elems name dtype	count=1
module_class	[module_1] proximal gradient ||| [module_1] [class_2]	count=6
function	state saver for ||| static state	count=1
function	support tf graph ||| graph	count=1
arg	new_attr ||| new_attr	count=1
function	dictionary used when ||| dict	count=1
module	rename ||| lib io	count=1
arg	and col ||| project_row	count=1
arg	runs a microbenchmark to ||| size iters	count=1
arg	if op was ||| scope op	count=1
arg	and outputs of sgv0 ||| sgv0	count=1
function	split the values ||| split	count=1
module	for ||| seq2seq python ops	count=2
function	for ||| type	count=1
class	monitored session ||| monitored session	count=1
module	cell and ||| rnn	count=2
function_arg	[function_1] cursesui based ||| [arg_2] [function_1]	count=1
function	batch of samples ||| train on batch	count=1
module	sure we don't have ||| tools	count=1
function	elements ||| elements	count=1
class	we ||| upgrade files	count=2
function	an rnn ||| dynamic rnn	count=1
function	value of a tensor ||| tensor	count=2
module	the location ||| python	count=1
function	[function_1] modulus ||| [function_1] [function_2]	count=2
function	output file [function_2] ||| [function_1] [function_2]	count=2
arg	[arg_1] predictions ||| [arg_1] [arg_2]	count=12
class	make ||| test upgrade	count=1
function	placeholder for the ||| placeholder from dtype and shape	count=1
class	returns ||| base estimator	count=5
function	[function_1] dense ||| [function_2] column weighted [function_1]	count=1
arg	spec ||| spec inputs	count=1
function	values for given sampled_candidates ||| test output values with sampled candidates	count=1
function	ops that match ||| filter ts from	count=1
arg	and body ||| body original_loop_vars loop_vars	count=1
function	[function_1] placeholder for ||| [function_1] [function_2]	count=4
module	the sense of vector ||| contrib linalg python ops	count=3
module	images from [module] to rgb ||| [module]	count=1
function	[function_1] a key ||| [function_1] unique target [function_2]	count=1
function	and ||| fit transform	count=2
arg	of base_type to ||| base_type conversion_func priority	count=1
function	the full covariance ||| full covariance	count=2
function	used to ||| to	count=1
function	download ||| download	count=1
function	time [function_2] ||| [function_2] [function_1]	count=7
class	[class_1] the event ||| [class_1] [class_2]	count=2
function	returns up ||| up	count=1
function	a node ||| get node	count=1
class	a menuitem ||| menu	count=1
function	batch and ||| batch	count=4
function	get the [function_2] ||| [function_1] fetch and [function_2]	count=1
function	dictionary ||| dict	count=2
function	[function_1] central ||| [function_2] [function_1]	count=2
function	predictive [function_2] ||| [function_2] conjugates known scale [function_1]	count=3
arg	to variabledef for collections ||| export_scope	count=1
function	final ||| sequence to final	count=2
function	before processing a ||| begin	count=1
function	string message ||| purge message	count=1
function	size of ||| size bytes	count=1
function	[function_1] parsing tf ||| [function_2] [function_1]	count=5
function	maps input key to ||| preprocess input exprs	count=1
arg	estimator [arg_2] ||| [arg_1] [arg_2]	count=2
function	same as linear_model_fn but ||| model fn with model fn ops	count=2
function	the google2 ||| google2	count=1
function	gets an [function_2] ||| [function_1] [function_2]	count=2
module	of ||| tensorboard plugins	count=1
arg	stochastically creates batches by ||| accept_prob_fn batch_size queue_threads	count=1
module	save ||| python keras	count=1
module_class	this graph ||| framework graph	count=1
arg	a tensor is accessed ||| input_ data message first_n	count=1
class	the layer ||| hybrid layer	count=1
function	context manager that makes ||| as	count=2
function_arg	[function_1] [arg_2] ||| [function_1] inputs tensor [arg_2]	count=3
arg	conv2d operations ||| device input_shape perm datatype	count=1
arg	softmax_cross_entropy_with_logits ||| logits onehot_labels	count=1
class	to ||| def library	count=1
function	dump from the run ||| cli for run	count=1
module	[module_1] the ||| [module_2] [module_1] batch normalization test tf	count=1
module	single ||| rnn python kernel_tests	count=1
function	learn the vocabulary ||| transform	count=1
module	a 1 outcome ||| python ops distributions	count=1
class	sdcalogisticclassifier works with ||| sdcalogistic classifier	count=1
class	of the dilation function ||| dilation test	count=1
module_class	the [class_2] ||| [class_2] [module_1]	count=4
arg	of base_type ||| base_type conversion_func priority	count=1
function	arg [function_2] ||| [function_1] [function_2] input_exprs_str	count=1
function_arg	merge op [arg_2] ||| [arg_2] [function_1]	count=3
function	to an example proto ||| to example proto	count=1
arg	and op2 hints ||| op2 hints	count=2
arg	calculate the vector inner ||| xs ys name	count=1
function	precision ||| precision at thresholds	count=2
function	training for full batch ||| full batch	count=1
module	return the ||| contrib graph_editor	count=2
module	the cell and ||| contrib rnn python ops	count=3
function	overriding tensor values ||| remove override then	count=1
function	sparsedensecwisemul ||| sparse dense cwise mul	count=1
arg	[arg_1] dimension to ||| [arg_1] [arg_2]	count=1
function	match ||| ts from regex	count=2
arg	axis in [arg_2] ||| [arg_2] [arg_1]	count=2
function	converts ||| to	count=6
function	small [function_2] ||| [function_2] [function_1]	count=1
function	variable-length numeric ||| var len	count=1
module	this object overriding ||| contrib seq2seq python ops	count=1
module	keras ||| keras python keras	count=4
function	[function_1] indices in ||| [function_1] [function_2]	count=6
function_arg	its namesake [arg_2] ||| [arg_2] [function_1]	count=3
function	feature tuples into raw ||| features to raw	count=1
module	the event file to ||| python summary	count=1
function	remove unused ||| remove unused	count=1
arg	tree representing the ||| input_shape input_type	count=1
function	the size ||| params size	count=1
function_arg	central [arg_2] ||| [arg_2] [function_1]	count=1
function	proper ||| sample	count=1
function	reduce an image ||| reduce to	count=1
function	[function_1] factor shards ||| [function_1] [function_2]	count=4
function	root mean squared ||| root mean squared	count=3
function	ops to save ||| save	count=2
function	returns the value of ||| get value	count=1
function	compute gradient ||| compute	count=1
function	symbol ||| build guide	count=1
function	given device only if ||| maybe	count=1
class	number ||| with hash buckets	count=1
class	sure ||| test upgrade	count=1
function	returns the sampled softmax ||| sampled softmax	count=1
arg	sequence of symbols ||| ids vocab_size embed_dim	count=1
arg	fills [arg_1] [arg_2] ||| [arg_1] [arg_2]	count=6
function_arg	keys [arg_2] ||| [arg_2] [function_1]	count=2
function	to extract command from ||| command from	count=1
function	using numpy [function_2] ||| [function_2] [function_1]	count=4
function	matrix to [function_2] ||| [function_1] [function_2]	count=8
function	to a numpy matrix ||| texts to matrix	count=1
arg	[arg_1] dicts of ||| [arg_2] [arg_1]	count=1
function	linked to ||| ts	count=1
function	[function_1] [function_2] sparse ||| [function_1] [function_2] sparse	count=3
function	returns feature ||| get feature ops from	count=1
function	the input [function_2] ||| [function_1] [function_2]	count=4
module	returns ||| python estimator inputs queues	count=1
module	returns a non-reference ||| framework	count=1
module	the ||| contrib learn python	count=1
module	of name to ||| framework python ops	count=1
arg	[arg_1] is ready ||| [arg_2] [arg_1]	count=1
function	initialize ||| init	count=7
function	get legend for ||| node status label legend	count=1
function	the configuration ||| config	count=1
function	client feed ||| with tensor feed keys	count=1
function	node's statistics ||| stats for node	count=1
function	initializes a ||| init	count=19
function	report [function_2] ||| [function_1] [function_2]	count=1
function	to a filename ||| filename	count=1
function	basic metrics ||| binary metrics	count=1
function	proper shape ||| sample	count=1
function	single ||| on	count=3
function	the gauss error function ||| erf	count=1
function_arg	summary [arg_2] ||| [function_1] tag tensor max_images [arg_2]	count=1
function	batch ||| batch examples	count=2
arg	a different dtype and ||| dtype	count=1
module	saturation [module] an ||| [module]	count=1
function	python ||| py	count=3
module	batch of beams ||| ops	count=1
function	vgg ||| vgg	count=4
function	call ||| call	count=2
arg	reference ||| reference	count=1
class	operation that failed ||| error	count=1
function	tf [function_2] ||| [function_1] [function_2]	count=5
function	model function with ||| model fn	count=2
function	values ||| assert valid	count=1
function	with as_iterable=true ||| as iterable	count=4
function	of the attr ||| get attr	count=1
arg	needed in backprop ||| value dead_branch	count=1
arg	session for given ||| session	count=1
module	[module_1] training procedure ||| [module_1] [module_2]	count=10
arg	on the condition ||| condition	count=1
class	[class_1] session creator ||| [class_2] [class_1]	count=1
function_arg	options to [arg_2] ||| [function_1] [arg_2]	count=1
function	to a list of ||| list of	count=1
function	define a unary ||| define unary	count=2
function	non-control edges related ||| non control edges of	count=1
module	distribution with parameters ||| ops distributions	count=1
arg	op2 ||| op2	count=1
function	node and add ||| add op node	count=1
function_arg	layer [arg_2] ||| [arg_2] [function_1]	count=1
function	the end of an ||| on epoch end	count=1
arg	a container ||| container	count=1
arg	node op ||| op out_grads	count=1
function	[function_1] caching_device ||| [function_1] [function_2]	count=1
function	handle, with repeated ||| duplicate	count=1
function	to extend ||| extend	count=1
function	attribute [function_2] ||| [function_2] [function_1]	count=1
function	create the ||| create control flow	count=1
arg	ids ||| ids partition_strategy	count=1
arg	failuretolerator ||| limit init_delay backoff_factor forgive_after_seconds	count=1
module	returns a list ||| python learn	count=1
function	directory containing the ||| dir	count=1
function	flow end event ||| flow end	count=2
function	returns list [function_2] ||| [function_2] [function_1]	count=2
module	returns a training ||| python layers	count=1
module	graphdef and returns the ||| framework	count=1
class	column ||| var len column	count=1
function	biases) ||| relu layer	count=1
module	get list of ||| python debug lib	count=1
function	[function_1] the input ||| [function_2] [function_1]	count=1
module	_guideref from the files ||| docs	count=1
function	matrix elements [function_2] ||| [function_2] [function_1]	count=2
function	the outputs in ||| outputs	count=2
class	vdv^t ||| pdsqrt vdvtupdate	count=1
function	collect information necessary ||| collect docs	count=1
module	save ||| contrib keras python keras	count=1
function	[function_1] after a ||| [function_1] [function_2]	count=1
function	all the data ||| all	count=1
function	back [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] names for ||| [function_2] [function_1]	count=3
function	[function_1] axis order ||| [function_1] [function_2]	count=1
function	to a relative path ||| to	count=1
function	the transformed ||| transformed	count=2
class	for all _composablemodel ||| composable model	count=1
function_arg	sum across tensors ||| sum tensors	count=2
function	all uninitialized resources in ||| report uninitialized resources	count=1
module	graph building doesn't modify ||| tensor_forest hybrid python	count=1
module	of a single sample ||| python ops	count=2
module	an ||| python	count=1
module	s ||| contrib keras python keras engine	count=3
function	[function_1] bundle from ||| [function_1] [function_2]	count=2
function_arg	[function_1] a model ||| [function_1] [arg_2]	count=2
function	pil ||| img	count=1
function	a report of the ||| report last	count=1
function	allowed using client feed ||| tensor feed keys	count=1
module	will be produced or ||| python framework	count=1
class	test ||| test case	count=2
function	operations from metric ||| extract metric	count=4
module_class	adds an unref to [module_1] [class_2] specified timestamp ||| [module_1] [class_2]	count=1
function	log p x >= ||| with log	count=1
arg	necessary [arg_2] ||| [arg_2] [arg_1]	count=2
arg	single tensor to a ||| tensor	count=2
class	text ||| tokenizer	count=1
function_arg	stop [arg_2] ||| [function_1] [arg_2]	count=2
arg	the given values are ||| values	count=2
module	rank-2 tensor ||| contrib solvers python ops	count=1
arg	new movingaverageoptimizer ||| opt average_decay num_updates sequential_update	count=1
function	tensors without scaling ||| scaling	count=1
function	[function_1] of status ||| [function_2] [function_1]	count=1
arg	precision@k [arg_2] ||| [arg_2] labels [arg_1]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] context [arg_2]	count=5
function	build a simple ||| simple	count=1
function	to read [function_2] ||| [function_1] [function_2]	count=3
function	fill the border of ||| fill border	count=1
arg	case ||| inputs cluster_idx_list cluster_centers	count=2
function	and run a ||| and run	count=2
function	[function_1] invalid ||| [function_2] kernel [function_1]	count=1
module	an instance of ||| python ops	count=1
class	unique [class] ||| [class]	count=1
function	biasadd ||| bias add	count=1
function	and external_values from ||| from	count=1
function	value [function_2] ||| [function_1] [function_2]	count=1
module	shape of ||| ops	count=2
module	a cross-entropy loss ||| losses	count=2
module	if ||| contrib framework python	count=1
function_arg	boston housing ||| boston data_path	count=1
class	creates ||| query reader	count=1
module	the axis_order set by ||| contrib labeled_tensor python ops	count=1
function	debug ops ||| debug ops	count=6
function_arg	[function_1] results accounting ||| [function_1] lookup sparse [arg_2]	count=1
function	using numpy [function_2] ||| [function_1] [function_2]	count=4
function	prepend ||| prepend	count=1
arg	that match the ||| ops	count=1
class	a declare object ||| declare	count=1
function	menuitem from the ||| caption	count=1
function_arg	input function [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	[function_1] that op ||| [arg_2] [function_1]	count=3
function	file ||| dump file	count=1
class	the tensorarray ||| array	count=3
arg	command handler ||| args screen_info	count=4
arg	to sequence ||| encoder_cell decoder_cell	count=1
arg	of lines ||| lines	count=1
function	concatenates ||| concat	count=1
class	for an embedding of ||| embedding	count=1
function	rank ||| rank at least	count=1
function	it works fine [function_1] [function_2] ||| integer [function_2] [function_1]	count=1
function	elements as tf ||| tf	count=1
arg	ys ||| ys	count=2
arg	node name ||| node_name	count=1
function	[function_1] difference ||| [function_2] [function_1]	count=4
function	of context ||| context	count=1
function	updates the row ||| update row	count=3
module	[module_1] sense of ||| [module_1] [module_2]	count=7
function	of its scope ||| name from scope	count=2
class	python ||| debug analyzer	count=1
function	graph ||| analyze ops	count=1
module	the values of ||| python ops	count=2
function	[function_1] keys of ||| [function_1] [function_2]	count=3
module_class	[module_1] function ||| [module_1] [class_2]	count=7
function	and no ||| def classification6	count=1
module	new ||| python training	count=11
function_arg	weights to [arg_2] ||| [arg_2] [function_1]	count=1
module	then ||| python	count=1
module	mean and variance of ||| ops	count=1
module	training and ||| python learn estimators	count=1
module	a non-reference dtype based ||| framework	count=1
function	definition if ||| create definition if	count=2
module	shape ||| python ops distributions	count=2
arg	sensitivity ||| sensitivity weights	count=1
class	indexies ||| categorical	count=1
module	[module] feature ||| [module]	count=2
class	a tensorarray ||| tensor array	count=1
function	[function_1] test data ||| [function_1] [function_2]	count=1
function	from ||| from files	count=2
arg	[arg_1] specified scope ||| [arg_2] [arg_1]	count=1
arg	to sgv1 (see _reroute_outputs) ||| sgv1	count=1
function	to file ||| to file	count=2
module	[module_1] sense of ||| [module_2] [module_1]	count=7
function	[function_1] a directory ||| [function_2] [function_1]	count=3
class	from the ||| menu	count=1
function	save a list ||| save	count=1
function	output predictions for the ||| predict	count=2
function_arg	[function_1] between logits ||| [arg_2] [function_1]	count=3
function	[function_1] services ||| [function_1] [function_2]	count=3
arg	[arg_1] handle ||| [arg_2] [arg_1]	count=8
function	get ||| node	count=1
function	the values in a ||| test output values	count=2
function	to normalize the ||| normalizer fn	count=1
module	which properly compares ||| distributions python	count=1
module	(e ||| python	count=1
function_arg	recurrent [arg_2] ||| [arg_2] [function_1]	count=1
function	rename or ||| rename	count=1
function_arg	arg_scope can [arg_2] ||| [function_1] [arg_2]	count=1
arg	flip_vector_to_matrix ||| vec batch_shape	count=2
arg	the parameters for ||| use_peepholes initializer num_proj	count=1
function	extract the subgraph ||| extract	count=1
function	bias weight with ||| bias	count=1
function	non-batch kl for ||| batch kl	count=1
function	input options for ||| input options	count=2
class	by this operator to ||| operator scaled identity	count=1
function	custom [function_2] ||| [function_1] [function_2]	count=6
class	outputs the corresponding ||| with hash buckets	count=1
function	a rank rfft ||| infer fft length for rfft	count=1
class	value tensor based on ||| tensor	count=1
class	event file to disk ||| event file writer	count=1
function	[function_1] all ||| [function_1] [function_2]	count=5
function_arg	[function_1] to writer ||| [arg_2] [function_1]	count=1
module	return indexies ||| learn python learn preprocessing	count=1
arg	of sgv1 ||| sgv1	count=1
function	applies inverse [function_2] ||| [function_1] [function_2]	count=1
class	for ||| cli	count=1
function	the main page ||| request main page	count=1
function_arg	mini batch [arg_2] ||| [function_1] op [arg_2]	count=1
module	list of tensor or ||| contrib layers python ops	count=1
function	a tf placeholder for ||| make placeholder from dtype and	count=1
module	values then return ||| python	count=1
function	runner to the graph ||| runner	count=1
module	ids of ||| ops	count=1
arg	length [arg] ||| input_length filter_size [arg]	count=1
class	stack is ||| stack	count=1
class	initializes a dnnclassifier ||| dnnclassifier	count=1
function	loop to train a ||| train loop	count=1
class	recorded ||| file edit	count=1
function	fingerprint concatenation has ||| output v2 has	count=1
arg	different thresholds on ||| labels thresholds weights	count=2
function	a specified bounding ||| bounding	count=1
function	attempt a directory ||| test directory	count=1
function	ismodule ||| ismodule	count=1
arg	of sgv0 [arg_2] ||| [arg_1] [arg_2]	count=5
arg	for predictoutput ||| outputs	count=1
function	[function_1] by a ||| [function_1] [function_2]	count=1
arg	newpath ||| newpath overwrite	count=1
class	tensorflow ||| session	count=1
module	coordinate ||| python ops distributions	count=1
module	the vocabulary ||| contrib learn python learn preprocessing	count=1
module	are sessionrunhook raises ||| python	count=1
class	[class_1] positive definite ||| [class_2] [class_1]	count=1
class	one output ||| output	count=1
function	sdca optimizer ||| sdca	count=1
function	a safe [function_2] ||| [function_2] [function_1]	count=3
arg	of input tensors ||| tensors	count=1
arg	for node_info ||| node_name op_type	count=1
function	batch ||| keyed batch examples shared	count=1
function	of status labels for ||| status labels	count=1
class	grad state for ||| state	count=1
function	linked to ops ||| filter	count=1
function	as input ||| make input	count=1
class	check to ||| test	count=1
function	return the feed dictionary ||| feed dict	count=1
class	the debug-wrapper [class_2] ||| [class_2] [class_1]	count=1
function	predictions for a single ||| predict on	count=2
arg	output from a ||| output node_name enable_list_tensors	count=1
function	[function_1] max amazingly ||| [function_2] [function_1]	count=2
class	sets ||| generator visitor	count=1
function_arg	to [arg_2] ||| [arg_2] [function_1]	count=11
class	don't have a ||| files	count=1
function	for ||| get collection	count=1
module	a ||| keras python keras	count=1
function	launch ||| launch	count=1
module_class	staging [class_2] ||| [module_1] [class_2]	count=2
function	at least the given ||| at least	count=1
function	event ||| event	count=6
class	negative ||| negative binomial	count=1
function	default image ||| image	count=1
function	training for full ||| full	count=1
function	queue ||| start queue	count=1
function	create sharding function ||| get sharding func	count=1
module	tensor of ||| ops	count=2
function_arg	[function_1] a single ||| [arg_2] [function_1]	count=1
function	line in a ||| screen add line	count=1
function	[function_1] column ||| [function_2] [function_1]	count=26
function	caching_device ||| caching device	count=1
function	learning [function_2] ||| [function_1] [function_2]	count=1
module_class	[module_1] a tensorarray ||| [module_1] tensor [class_2] scatter indices value name	count=1
arg	compatiblity [arg_2] ||| [arg_2] [arg_1]	count=2
function_arg	audio clips [arg_2] ||| [function_1] [arg_2]	count=1
function	computes the norm ||| norm	count=1
function	maximum average ||| average	count=1
class	given ||| debug dump dir	count=1
module	symbol ||| docs	count=1
function	returns the step ||| step	count=1
function	return histogram ||| histogram fixed width	count=1
function	smartset() calls restoring things ||| smart unset all	count=1
arg	in formatted style ||| tensor_label include_metadata np_printoptions	count=1
class	event file ||| file writer	count=2
function	full name ||| full path	count=1
module_class	[module_1] vdv^t ||| [module_1] [class_2]	count=1
function	returns resources visible ||| shared resources	count=1
arg	it ||| value	count=1
function	run an op or ||| run op benchmark	count=1
arg	across all steps and ||| noutput scope name	count=1
function	tensor ||| parse label tensor	count=1
function_arg	[function_1] restore_checkpoint_path ||| [function_1] [arg_2]	count=3
arg	of a variable ||| variable value decay	count=1
module	menuitem ||| debug	count=1
function_arg	[function_1] [arg_2] ||| [function_1] serialized [arg_2]	count=4
function	a map from duplicate ||| duplicate	count=1
function	integer column with vocabulary ||| int column with vocabulary with dense	count=1
function	'n' times ||| n	count=1
arg	fetches for ||| fetches	count=2
class	labels ||| stepper cli	count=2
module	for ||| contrib seq2seq python ops	count=2
module	has ||| data	count=1
function	for multi value ||| value	count=1
class	by a reader ||| reader base	count=1
function	corresponding ||| corresponding	count=1
class	this cell output ||| fused cell	count=1
function_arg	of state [arg_2] ||| [function_1] [arg_2]	count=1
class	server ||| server	count=3
function	loads the model from ||| load	count=1
arg	by adding compression ||| histo_ev bps	count=1
module	from the files ||| docs	count=1
function	to the [function_2] ||| [function_2] [function_1]	count=2
function	standard deviation of a ||| std	count=1
function	function ||| proto function	count=1
arg	an ||| seed	count=1
function	a json ||| json	count=1
class	debug tensor watching ||| debug wrapper	count=1
arg	a sequence of symbols ||| ids vocab_size embed_dim	count=1
function	callback to copy ||| callback	count=1
function	[function_1] weighted sum ||| [function_2] [function_1]	count=2
class	type ||| dtype	count=2
function	values then return ||| maybe assert	count=1
class	file ||| summary writer	count=1
function	a range of replicas ||| remote replicas	count=1
function	gamma ||| gamma	count=1
function	divides ||| safe div	count=1
arg	that builds model ||| features labels	count=3
module_class	[module_1] the table ||| [module_1] mutable dense hash [class_2]	count=1
arg	m_prev with projected input ||| m_prev with_c	count=1
arg	the services and ||| threads close_summary_writer	count=1
function	of higher ||| higher	count=1
function	[function_1] learning ||| [function_2] [function_1]	count=1
function	task in ||| task	count=1
function	outputs in place so ||| outputs	count=1
arg	subscribes [arg_2] ||| [arg_2] [arg_1]	count=8
function_arg	save [arg_2] ||| [arg_2] [function_1]	count=1
function	returns a tuple with ||| create tuple	count=1
function	and returns the sampled ||| sampled	count=1
function	registered priors ||| priors	count=1
function	create the ||| maybe create	count=1
class	input projection ||| input projection wrapper	count=3
function	richtextlines object ||| lines from	count=1
function_arg	product across [arg_2] ||| [arg_2] [function_1]	count=1
function	then number of event ||| event	count=1
arg	a subgraph view ||| info sgv	count=1
function	concatenation has no collisions ||| output v2 has no collision	count=1
arg	linearestimator object ||| feature_columns head model_dir weight_column_name	count=1
arg	given message ||| message	count=1
function	[function_1] and run ||| [function_1] [function_2]	count=1
class	returns a shape ||| shape	count=1
function	on this dtype ||| base dtype	count=1
module	the ||| learn python	count=1
function	slot named "name" created ||| slot	count=1
function	[function_1] the google2 ||| [function_2] [function_1]	count=1
function	initialization ||| initialization	count=1
function_arg	[function_1] biasaddgrad op ||| [function_1] [arg_2]	count=1
function	get the [function_2] ||| [function_1] fetch and name [function_2]	count=1
module	with default shuffle ||| python learn	count=1
function	convert ||| convert	count=1
module	embedding ||| contrib legacy_seq2seq python ops	count=2
function	variables ||| convert variables	count=1
function	classification without classes tensor ||| build standardized signature def classify scores only	count=1
function	adds scaled noise ||| add scaled noise	count=2
module	with another ||| python	count=1
module	the model loading them ||| python	count=1
function	the full [function_2] ||| [function_2] [function_1]	count=1
function	creates generic signature ||| generic signature	count=2
function	current [function] scope ||| get unique [function]	count=1
function	test that the ||| test	count=1
module	get a str representation ||| python debug lib	count=1
function	the function ||| build function	count=1
class	table ||| initializable lookup table	count=1
arg	as labels are seen ||| labels num_classes smoothing_constant	count=1
module	a rank-2 ||| contrib solvers python ops	count=1
function	columns present ||| columns	count=1
function	returns the kind name ||| kind name	count=1
function	build an [function_2] ||| [function_1] parsing [function_2]	count=1
function	[function_1] update op ||| [function_2] [function_1]	count=1
function	op that will ||| op	count=1
module	evaluates ||| contrib specs python	count=1
module_class	output [class_2] ||| [module_1] [class_2]	count=1
arg	graph element ||| element	count=1
class	with layer normalization and ||| layer norm basic	count=1
arg	a scrollable ||| is_refresh highlight_regex	count=1
function	benchmark training ||| training	count=1
arg	an ||| num_units	count=1
module	list of tensors that ||| contrib distributions python ops	count=2
function	a batch [function_2] ||| [function_2] [function_1]	count=1
function	for linear regression ||| regression	count=1
module	this object overriding ||| python ops	count=1
function_arg	a python [arg_2] ||| [function_1] master name [arg_2]	count=1
function	schedule for ||| schedule	count=1
arg	a kernellinearclassifier [arg_2] ||| [arg_1] [arg_2]	count=1
arg	pads the 2nd ||| padding	count=1
arg	visitor ||| visitor	count=1
function_arg	write value ||| write index value	count=1
function_arg	[function_1] [arg_2] ||| contrib bayesflow examples reinforce_simple [function_1] merge [arg_2]	count=4
function	and flops for ||| logged	count=1
arg	if operators determined ||| operators	count=1
arg	a linearoperatorcomposition ||| operators is_non_singular is_self_adjoint is_positive_definite	count=1
class	an event file ||| summary to event transformer	count=1
function	no scores ||| def classification6	count=1
arg	that satisfies a given ||| static_condition dynamic_condition	count=1
function	classification signature ||| classification signature	count=1
arg	exit op ||| op	count=1
function	creates a monitoredsession ||| monitored	count=1
function	sets the value of ||| set	count=1
arg	of tensors into a ||| cls tensors	count=1
function	a list of source ||| list source	count=1
function	define the [function_2] ||| [function_1] [function_2]	count=3
class	to minimize while training ||| hybrid model	count=1
module_class	[module_1] tensor with ||| [module_1] [class_2]	count=1
module	constructor ||| estimator export	count=2
function	_targetcolumn ||| target	count=2
arg	a config file used ||| config	count=1
function	[function_1] backprop loop ||| [function_1] [function_2]	count=1
arg	the parameters for ||| num_units input_size use_peepholes cell_clip	count=1
module	of underlying vector ||| distributions python ops	count=1
function	indices of ||| index	count=1
function	operator from ||| operator	count=1
arg	cursesui based on a ||| ui_type on_ui_exit	count=1
function_arg	[function_1] [arg_2] length ||| keras python keras utils [function_1] length [arg_2]	count=1
function	accumulator ||| accumulator	count=1
function_arg	device for [arg_2] ||| [arg_2] [function_1]	count=1
function	computes the projections of ||| get projections	count=1
function	to the specified ||| to	count=2
module	tensor version ||| python ops distributions	count=1
module	crf ||| crf python ops	count=1
class	for ||| dirichlet multinomial	count=2
class	current context ||| while context	count=1
function	same as linear_model_fn but ||| model fn	count=2
module	resnet ||| slim python slim nets	count=1
class	and ||| manager	count=1
arg	a labeled tensor ||| labeled_tensor axis_order	count=1
function	add a control ||| add control	count=1
arg	for different thresholds on ||| labels thresholds weights	count=2
function	[function_1] a sqrt_solve ||| [function_2] [function_1]	count=1
function	training for full batch ||| full batch training	count=1
arg	functional interface to ||| inputs axis	count=1
module	the given set of ||| framework python ops	count=1
function	embedding rnn ||| embedding rnn	count=1
class	values will be produced ||| indexed	count=1
function	[function_1] loop that ||| [function_2] [function_1]	count=3
arg	x -> 2 ||| x	count=1
module	tensors specified by the ||| contrib slim python slim	count=1
module	proto_type for ||| python	count=1
function_arg	configuration [arg_2] ||| [function_1] [arg_2]	count=1
arg	initialize a linearoperatorfullmatrix ||| matrix is_non_singular is_self_adjoint is_positive_definite	count=1
function_arg	[function_1] satisfies ||| [function_1] contract [arg_2]	count=4
function	[function_1] input ||| [function_2] [function_1]	count=23
module	proper ||| python ops	count=1
function_arg	dims corresponding [arg_2] ||| [function_1] to flat end [arg_2]	count=1
function	move ||| move	count=1
function	start the ||| start	count=1
function	x to ||| to	count=1
class	[class_1] cell ||| [class_1] [class_2]	count=2
module	a transform that ||| learn dataframe transforms	count=1
function	vectors by ||| vector	count=1
module	imagenet model's ||| keras applications	count=1
arg	different thresholds on predictions ||| labels predictions thresholds	count=1
module	data as ||| estimators	count=4
arg	a new _roundrobinstrategy ||| num_tasks	count=1
function	into json ||| to json	count=2
function_arg	[function_1] y ||| [arg_2] [function_1]	count=12
function_arg	data to [arg_2] ||| [arg_2] [function_1]	count=4
module	updates ||| kernel_methods python	count=1
function	a non-negative ||| assert non negative	count=1
function	for single [function_2] ||| [function_2] [function_1]	count=2
module	get the names ||| debug lib	count=1
function_arg	parsing tf [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] to use ||| [function_1] [function_2]	count=3
module_class	this tensor as ||| python framework tensor	count=1
module	initialize the ||| python ops	count=4
function_arg	flops for [arg_2] ||| [arg_2] [function_1]	count=1
class	a quantized ||| quantized distribution	count=1
arg	list of lines ||| lines	count=1
function	all are sessionrunhook raises ||| hooks	count=1
function	an absolute ||| absolute	count=1
function_arg	[function_1] slice non-zero ||| [arg_2] [function_1]	count=3
class	a random forest ||| random forest graphs	count=2
function_arg	variable [arg_2] ||| [arg_2] [function_1]	count=11
function	tensor or indexedslices ||| to tensor or indexed slices	count=1
arg	of elements across dimensions ||| axis keep_dims name	count=1
arg	if reduction_indices is none ||| reduction_indices	count=1
function	[function_1] run() call ||| [function_2] short [function_1]	count=1
function	most recent commands ||| most recent	count=1
function	image data [function_2] ||| [function_2] [function_1]	count=1
function	an exit op are ||| exit	count=1
class	whether the value ||| value	count=1
arg	the input samples ||| verbose	count=3
function	zoom of ||| zoom	count=1
function_arg	verifies [arg_2] ||| [function_1] values [arg_2]	count=1
module	the vocabulary ||| contrib learn python	count=1
module	given dimension [module] tensor ||| [module]	count=1
module	get all the ||| graph_editor	count=1
arg	[arg_1] elements ||| [arg_1] [arg_2]	count=4
function	for multi value models ||| value	count=1
function	with hashed [function_2] ||| [function_2] [function_1]	count=2
function	that labels outside the ||| three labels	count=3
module	model ||| slim python slim nets	count=1
module	batch of beams into ||| python ops	count=1
function_arg	[function_1] cell ||| [function_1] [arg_2]	count=1
arg	the entire tensor ||| level noise_shape seed	count=1
arg	constructor of basedebugwrappersession ||| sess thread_name_filter	count=1
function	[function_1] leaf impurity ||| [function_1] [function_2]	count=1
function	dict into summary file ||| dict to summary	count=1
function	dict [function_2] ||| [function_2] [function_1]	count=2
function	that match the ||| from regex	count=1
function	[function_1] a docstring ||| [function_2] [function_1]	count=2
function	ref ||| ref	count=1
function	test decorator ||| test decorator	count=1
class	produced or none ||| indexed	count=1
function	a line ||| line	count=2
arg	see ||| x y input_fn	count=2
function	decodes ||| decode	count=2
arg	dims [arg_2] ||| [arg_1] [arg_2]	count=1
module	multi ||| layers python layers	count=1
function	for variable-length ||| valued var len	count=1
function	floatint point ||| lf	count=1
function	appropriate for serving ||| default serving input fn	count=1
function	as_iterable=false ||| as iterable false	count=2
function	for serving ||| default serving	count=1
module	version with default ||| python learn learn_io	count=1
module	cross-entropy loss using ||| losses python losses	count=1
arg	and scale ||| scale	count=2
arg	a state ||| cell features labels	count=1
function	of custom ||| custom	count=1
module	that with ||| python learn	count=1
arg	tensorboard application ||| logdir plugins multiplexer reload_interval	count=1
arg	a 0-mean normal distribution ||| grads_and_vars gradient_noise_scale	count=1
module	an ||| python client	count=2
module	and values in the ||| feature_column	count=2
module	and runs ||| learn dataframe	count=1
function_arg	normalization on x ||| normalization x	count=2
arg	of a model ||| model line_length positions	count=1
class	given ||| builder	count=1
function	[function_1] accumulator ||| [function_1] forward [function_2]	count=1
function	digamma ||| digamma	count=1
arg	the front-end ||| limit_attr_size large_attrs_key	count=1
arg	conjugate prior on the ||| prior scale s n	count=1
function	[function] s ||| [function]	count=2
rep	this function [function_arg_2] ||| [module_class_1] add [function_arg_2]	count=1
function	of the feed ||| feed	count=1
module	names ||| contrib learn python learn dataframe	count=1
function	calculates true positives ||| true positive at	count=1
module	previous output tensors from ||| grid_rnn python	count=1
function	add an item to ||| add item	count=1
module_class	[module_1] normal ||| [module_1] truncated [class_2]	count=1
function	build a [function_2] ||| [function_2] [function_1]	count=8
function	callable that ||| make callable	count=1
class	a conditional ||| cond	count=1
function	a restricted ||| joint weighted sum from feature columns	count=1
module	returns ||| keras python keras	count=1
function	converts a ||| to	count=5
function	to unit length ||| unit norm	count=1
function	[function_1] pandas ||| [function_1] [function_2]	count=2
function	[function_1] an argument ||| [function_2] [function_1]	count=1
function	the proto_type ||| proto type	count=1
arg	e ||| strides	count=2
function	column with vocabulary ||| column with vocabulary with dense input	count=1
function	integer indices for ||| integer indices for	count=3
function	all the tensors linked ||| from regex	count=1
module	the ||| contrib specs python	count=1
function	header for use ||| header from ops	count=1
class	config for ||| parser config	count=1
function	the tensor [function_2] ||| [function_2] [function_1]	count=1
arg	file with given ||| filename	count=1
function	the current default graph ||| import graph def	count=1
module	execute together ||| contrib batching python	count=1
function	determine the predicted class ||| predict classes	count=2
function	using client feed ||| with tensor feed keys	count=1
function	returns up [function_2] ||| [function_1] [function_2]	count=1
function_arg	[function_1] estimator ||| [function_1] [arg_2]	count=1
function_arg	[function_1] from predictions ||| [arg_2] [function_1]	count=4
function	for second test function ||| test function with	count=1
function	on ||| base	count=1
function	gradients ||| grad	count=1
class	any input ||| analyzer clicontrol dep	count=1
function	[function_1] range ||| [function_2] [function_1]	count=10
function	dtype ||| state dtype	count=1
function_arg	batch matrix [arg_2] ||| [arg_2] [function_1]	count=1
function	prediction ||| predict	count=2
arg	a audio by adding ||| audio	count=1
function	and return ||| fit	count=1
function_arg	[function_1] multiple devices ||| [arg_2] [function_1]	count=2
class	adadelta [class_2] ||| [class_2] [class_1]	count=1
module	for ||| estimator	count=1
function	inputs ||| inputs tensor info from	count=1
function	and return indexies ||| fit	count=1
arg	initialize the parameters for ||| input_size use_peepholes cell_clip	count=1
class	health ||| event accumulator	count=1
arg	performs ||| row_axis col_axis	count=3
function	variables in ||| convert variables	count=1
module	transforms ||| contrib	count=1
class	in the tensorarray ||| array	count=1
arg	reshapes [arg] ||| [arg]	count=1
function_arg	input_node [arg_2] ||| [function_1] input_node [arg_2]	count=1
function	message [function_2] ||| [function_2] [function_1]	count=3
arg	tests input-output pairs for ||| image ksizes strides rates	count=1
module	check ||| contrib training python training	count=2
arg	according to partitions ||| inp partitions	count=1
function	[function_1] output ||| [function_1] [function_2]	count=6
function	and ||| fit	count=1
function	[function_1] labels for ||| [function_1] [function_2]	count=5
function	servers ensures appropriate communication ||| servers one cluster	count=1
function	search commands ||| search	count=1
function	and validates bias weight ||| bias and other columns	count=1
function	[function_1] inputs ||| [function_1] node without [function_2]	count=1
arg	tensors according to which_bucket ||| tensors which_bucket batch_size	count=1
function	to a number of ||| to	count=1
class	a tensor [class_2] ||| [class_2] [class_1]	count=2
arg	single ||| y sample_weight	count=1
function	[function_1] op ||| [function_2] [function_1]	count=11
class	whether this plugin ||| text plugin	count=1
arg	a new ||| name shape collections validate_shape	count=1
class	the model ||| model	count=10
class	[class_1] be ||| [class_2] [class_1]	count=3
function	code ||| div grad	count=1
function	[function_1] strategies ||| [function_2] [function_1]	count=2
function	tensorshape ||| get shape	count=1
function	[function_1] variable ||| [function_1] [function_2]	count=14
class	don't have ||| test upgrade files	count=1
function_arg	to train [arg_2] ||| [function_1] [arg_2]	count=2
function	[function_1] the sparsetensordensematmul ||| [function_2] [function_1]	count=3
class	labeledtenor ||| labeled tensor	count=1
function	input function ||| input fn	count=4
arg	the given ||| tensor	count=1
function	should [function_2] ||| [function_1] [function_2]	count=3
class	the op ||| operation	count=1
arg	z ||| z	count=1
function	an op that creates ||| op	count=1
function	step false positives for ||| streaming sparse false positive at k	count=1
arg	imports ||| input_map return_elements	count=1
module	exports ||| learn utils	count=1
module	if ||| contrib learn python learn datasets	count=1
function	collection [function_2] ||| [function_2] [function_1]	count=1
function	vector with dynamic shapes ||| vector dynamic	count=1
module	menuitem ||| python debug cli	count=2
arg	labels and predictions ||| labels predictions	count=3
function	to operation ||| op list to	count=1
function_arg	[function_1] biasaddgrad ||| [function_1] op [arg_2]	count=1
arg	[arg_1] the predictions ||| [arg_2] labels [arg_1]	count=5
function	write a ||| write image series	count=1
function	[function_1] keys of ||| [function_2] [function_1]	count=3
function	outputs ||| outputs make	count=2
function	get ||| status	count=1
function	converts embedding [function_2] ||| [function_2] [function_1]	count=3
function	number [function_2] ||| [function_2] [function_1]	count=1
function	sum of ||| reduce sum	count=2
arg	them into a html ||| contents headers	count=1
module	generates ||| contrib slim python slim data	count=1
function	list of graph ||| graph	count=1
function	removes batch ||| batch	count=1
module	an ||| debug cli	count=2
function	estimated-loss ||| estimate	count=1
function	maximum of ||| max	count=1
class	corresponding to the recorded ||| file edit	count=1
function	to use based on ||| get string to	count=1
arg	categories ||| x unused_y	count=1
function	[function_1] non-overlapping lanes ||| [function_1] [function_2]	count=1
module	produced or none ||| framework	count=1
function_arg	[function_1] [arg_2] ||| [function_1] [arg_2]	count=5634
function	configuration of the base ||| config	count=1
module	build ||| contrib learn python learn utils	count=1
arg	for linear weights in ||| columns_to_tensors embedding_lookup_arguments num_outputs	count=1
function	a postfix representation ||| structure	count=1
function	tf sparsetensor ||| remap sparse tensor	count=1
function	invalid type ||| test invalid number of	count=1
function	by a graph ||| by graph	count=1
function	shape values ||| assert	count=1
function	be used to ||| lengths to	count=1
module	models that use ||| python learn estimators	count=1
function	that makes this ||| as	count=2
function	read sparsetensors ||| sparse	count=1
function	link ||| link	count=2
module_class	[module_1] staging ||| [module_1] [class_2]	count=32
function	pool ||| pool shapes	count=2
function	evaluation [function_2] ||| [function_1] [function_2]	count=3
class	for ||| predict	count=1
function	border of ||| border	count=1
function_arg	[function_1] gradients ||| [function_1] [arg_2]	count=6
function	[function_1] mean squared ||| [function_1] [function_2]	count=5
arg	these parameters or ||| shape dtype initializer	count=2
function	with a while ||| with while	count=3
function	when all [function_2] ||| [function_1] [function_2]	count=6
class	of the ||| operation	count=1
function	global ||| global	count=8
module	dilation ||| python kernel_tests	count=1
function	of the signaturedef ||| meta graph def	count=1
class	represented by this operator ||| operator	count=2
class	barrier ||| barrier	count=3
function	arg num_rows, possibly ||| num rows possibly	count=2
function	[function_1] shapes ||| [function_1] [function_2]	count=1
class	depends on [class] ||| [class]	count=1
function	[function_1] shape info ||| [function_2] [function_1]	count=2
arg	that does nothing when ||| pred if_true if_false	count=1
module	append ||| layers python layers	count=1
arg	op ||| op grad	count=4
class	to the ||| to	count=2
function	generate a full name ||| full	count=1
function	the backprop [function_2] ||| [function_2] [function_1]	count=2
function_arg	[function_1] along ||| [function_1] [arg_2]	count=1
module	op (e g "matmul") ||| python framework	count=1
function	[function_1] an argument ||| [function_1] [function_2]	count=1
function	flip matrix to ||| flip matrix to	count=4
arg	polymorphic ||| cond ex_type msg	count=1
function	and dict_to_state_tuple ||| state tuple dict conversion	count=1
class	the value tensor based ||| stochastic tensor	count=1
module	returns only the ||| python	count=1
function	numpy implementation ||| total variation numpy	count=2
function	default_value ||| default value compatible	count=1
class	the optimizer ||| optimizer	count=5
function	start [function_2] ||| [function_1] [function_2]	count=8
function	cross entropy given ||| cross entropy with	count=1
function	sequence of integers ||| texts to	count=1
class	shape values then ||| dirichlet multinomial	count=1
arg	specified axes ||| axes	count=1
function	then ||| maybe assert	count=1
function	[function_1] example ||| [function_2] [function_1]	count=2
function	[function_1] diagonal ||| [function_1] [function_2]	count=1
arg	[arg_1] and control_outputs ||| [arg_1] [arg_2]	count=1
function	computes sparse ||| deprecated flipped sparse	count=1
function	of ||| ops	count=2
function	tensor watch ||| debug watch	count=1
function	a str ||| str	count=1
module	then return tensor version ||| distributions	count=1
arg	op [arg_2] ||| [arg_1] [arg_2]	count=2
function	reduce it [function_2] ||| [function_2] [function_1]	count=2
function_arg	[function_1] labels ||| [function_1] [arg_2]	count=17
arg	convolving ||| len_tensor	count=1
class	stop ||| run context	count=1
arg	[arg_1] e ||| [arg_2] [arg_1]	count=5
arg	the inputs and/or outputs ||| remove_input_map remove_output_map	count=1
arg	decides whether to ||| values salt_prefix recurrent_noise keep_prob	count=1
arg	activations ||| activations labels	count=3
function	its gradient ||| grad	count=1
class	we ||| test upgrade files	count=2
module	for evaluating a ||| contrib tensor_forest python	count=1
module	of finalize internal interface ||| python	count=1
arg	the specification ||| spec inputs input_shape input_type	count=2
function	file path ||| file path	count=2
function_arg	[function_1] v to ||| [function_1] m [arg_2]	count=4
module	(vs 0) ||| python ops	count=1
function	step false positives ||| false positive	count=1
function	caption ||| to item	count=1
module	get ||| tools api lib	count=1
arg	co-existance of ||| y input_fn feed_fn	count=1
module	tfdecorator-aware replacement for inspect ||| python util	count=1
function_arg	adds [arg_2] ||| [function_1] weight [arg_2]	count=1
arg	x is of ||| x	count=1
arg	sequence of symbols to ||| ids vocab_size embed_dim	count=1
arg	a tensor ||| tensor dtype name	count=1
function	[function_1] the walsfactorization ||| [function_2] model [function_1]	count=1
function	initialize the ||| init	count=1
function	inputs [function_2] ||| [function_2] without [function_1]	count=1
module	from the ||| debug	count=1
function	tf ||| server	count=1
function	maps input key ||| preprocess input exprs	count=1
function	close ||| close	count=4
function	isinf are ||| gives false	count=1
class	[class] is a ||| [class]	count=2
class	sure we don't have ||| test	count=1
function	assert ||| assert rank	count=3
arg	x = rhs ||| rhs name	count=1
module	sets ||| framework python framework	count=1
class	deadlineexceedederror ||| deadline exceeded error	count=2
module	slice of ||| factorization python ops	count=1
arg	lower triangular matrix ||| identity_multiplier diag tril	count=1
function	find the ||| find	count=1
arg	given input across ||| inputs	count=1
module	specific format of ||| ops	count=2
function	are discarded after a ||| expired data discarded after	count=1
arg	based [arg_2] ||| [arg_2] [arg_1]	count=2
arg	using tf nn sigmoid_cross_entropy_with_logits ||| multi_class_labels	count=1
module	labels ||| debug cli	count=2
arg	and return indexies of ||| x	count=1
function	creates an rnn ||| raw rnn	count=1
class	random forest ||| random forest graphs	count=2
function	deepcopy of sparse_column_with_hash_bucket ||| sparse column hash bucket deep copy	count=1
module	this ||| keras wrappers	count=1
class	get ||| cli	count=1
module	get an argspec string ||| api lib	count=1
module	rich ||| python debug cli	count=1
function	[function_1] possible input ||| [function_2] [function_1]	count=2
module	forwards ||| python ops	count=1
function	[function_1] expired events ||| [function_2] [function_1]	count=4
function	op for training ||| op	count=2
module	to make sure we ||| tools	count=1
function	dfs traversal of ||| dfs	count=1
function	from a ||| from files	count=1
function	tensor ||| sample	count=1
function_arg	sparse tensor ||| sparse tensor	count=1
arg	that cpu ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
function	to a richtextlines object ||| rich text lines from	count=1
function	product of ||| prod	count=1
module	batch ||| contrib distributions python	count=1
function	doc ||| doc	count=1
function	run the [function_2] ||| [function_2] [function_1]	count=2
class	a pooling ||| pooling	count=1
function	adds [function_2] ||| [function_2] [function_1]	count=3
module	path in which the ||| python	count=1
function	[function] 1d tensor ||| inverse [function] shape	count=3
module	updates internal ||| keras python keras	count=1
module	learn ||| learn	count=2
arg	that propagates x gradients ||| x	count=1
arg	highwaywrapper for cell ||| cell couple_carry_transform_gates carry_bias_init	count=3
function	flip dims ||| flip	count=2
arg	op was ||| scope op	count=1
function_arg	[function_1] these parameters ||| [arg_2] [function_1]	count=10
function	inputs of the ||| inputs tensor info	count=1
function	fingerprint concatenation has collisions ||| has collision	count=1
arg	sgv1 (see ||| sgv1	count=2
module	session and runs a ||| learn python learn	count=1
arg	experiment using featurecolumns ||| feature_columns exports_to_keep	count=1
function	tensors linked ||| filter	count=1
function	returns a tensorshape ||| shape	count=1
class	shape ||| dirichlet	count=1
function	gets or ||| get or	count=1
function	the save [function_2] ||| [function_2] [function_1]	count=3
function	output strings e ||| string	count=1
function	create summary ||| summary	count=1
function	create global step tensor ||| create global step	count=1
function	create the state ||| create control flow state	count=1
arg	to the input ||| inputs rate noise_shape seed	count=1
module	the values of a ||| ops	count=2
function	[function_1] [function_2] ||| [function_2] valued features [function_1]	count=2
function	real valued features ||| real valued feature	count=2
function	of tags [function_2] ||| [function_2] [function_1]	count=4
arg	featurecolumns ||| feature_columns num_outputs weight_collections	count=1
function	help information for a ||| get help for	count=1
arg	x and y ||| x y	count=2
function	that prepares features config ||| create feature spec for parsing	count=1
class	whether client ||| history	count=1
function	returns the [function_2] ||| [function_1] checkpoint [function_2]	count=1
function	sequence of ||| texts to sequences	count=1
arg	given in input ||| inputs sequence_length beam_width top_paths	count=1
module	the ||| contrib labeled_tensor python ops	count=2
function_arg	[function_1] epoch ||| [arg_2] [function_1]	count=2
function	the mean ||| reduce mean	count=1
function	before each call to ||| before	count=1
function	with estimators ||| test	count=1
arg	keys and [arg_2] ||| [arg_1] [arg_2]	count=2
arg	a tensor ||| name target size	count=1
arg	checkpoint in checkpoint_dir ||| checkpoint_dir master	count=1
module	tensor and ||| keras python keras	count=1
function	a line in ||| line	count=1
class	tensor for the given ||| lazy builder	count=1
function	save ||| save load	count=1
function_arg	loop [arg_2] ||| [function_1] [arg_2]	count=2
module	of dimensions needed ||| distributions python ops	count=1
function	input_fn ||| input	count=1
function	based on input dimension ||| dim	count=1
function	crf ||| crf	count=1
class	creates ||| moving average	count=1
function	of sparse_column_with_vocabulary_file ||| sparse column vocabulary	count=1
class	the shape is ||| shape	count=1
function	a matmul node with ||| mat mul node	count=1
module_class	params from [module_1] [class_2] ||| [module_1] [class_2]	count=3
module	name -> ||| tools	count=1
function	stores trace ||| store trace info	count=1
module	execute together ||| contrib batching python ops	count=1
function	initializes current variables with ||| init	count=1
arg	output ||| tensor_in_sizes glimpse_sizes	count=1
function	list_ops ||| arg scope	count=1
module	keras variable ||| keras python keras	count=1
class	test ||| classifier test	count=1
arg	y ||| x y	count=3
arg	of lines to extract ||| lines	count=1
function_arg	[function_1] [arg_2] input length ||| keras python keras utils [function_1] length [arg_2]	count=1
function	values of ||| setup values for	count=1
arg	cell with ||| cell output_size activation reuse	count=1
function	docstring ||| docstring	count=2
function	create a nodedef ||| node def	count=1
function	it works fine [function_1] [function_2] type ||| [function_2] [function_1]	count=2
module	name -> ||| docs	count=1
function	the approximate auc ||| auc	count=2
class	dictionary and return ||| categorical	count=1
function	the summary ||| summary	count=2
module	of ||| ops	count=296
class	tree ||| tree	count=1
function	[function_1] of status ||| [function_1] [function_2]	count=1
function	runs from a directory ||| add runs from directory	count=1
function	pool along column ||| pool along cols	count=6
class	[class_1] variable ||| [class_1] [class_2]	count=2
function	a reshape [function_2] ||| [function_2] [function_1]	count=3
module	for valid command ||| debug cli	count=1
module	to disk ||| python	count=1
module	based on this ||| framework	count=1
function	returns a dictionary ||| get	count=1
arg	rank ||| rank data	count=2
function	writes ||| writes	count=1
class	input projection and ||| input projection wrapper	count=2
arg	distances ||| input_fn batch_size steps	count=1
function	make an ||| make	count=1
function	exit op are calculated ||| exit grad	count=1
class	for a single iteration ||| gmm algorithm	count=1
function	log loss ||| log loss	count=2
arg	split dims [arg_2] ||| [arg_2] [arg_1]	count=1
function	is tensor not dict ||| tensor	count=1
class	permissiondeniederror ||| permission denied error	count=2
function_arg	file for [arg_2] ||| [function_1] [arg_2]	count=1
function	the label ||| label	count=4
function_arg	[function_1] protocol buffer ||| [arg_2] [function_1]	count=4
module	the backend ||| contrib keras python keras	count=1
arg	axis to ||| axis ndims	count=1
function_arg	pack a [arg_2] ||| [function_1] [arg_2]	count=2
function	un-normalized l1 [function_2] ||| [function_2] [function_1]	count=3
module	outcome ||| ops	count=1
function	all input ||| get input	count=1
function	_get_dense_tensor() for ||| get dense tensor	count=2
module	hyperparameters ||| training python training	count=1
module	and return indexies of ||| contrib learn	count=1
arg	[arg_1] interval values ||| [arg_1] [arg_2]	count=1
function	for inputs ||| list inputs	count=1
module	matrix representing this ||| ops	count=1
function	from metric value ||| extract metric	count=2
arg	a logdir ||| logdir plugin_name asset_name	count=1
module_class	[module_1] session creator ||| [module_1] [class_2]	count=2
function	total size of the ||| size	count=1
function	that match ||| filter	count=1
function	auc ||| streaming auc	count=2
module_class	[module_1] adadelta optimizer ||| [module_1] [class_2]	count=6
module	sequence-to-sequence model ||| contrib legacy_seq2seq python	count=1
class	given a ||| tensor	count=1
class	the dump root ||| debug dump	count=1
class	determines whether this plugin ||| projector plugin	count=1
function	a single epoch ||| epoch	count=1
function	name scope ||| name scope	count=2
function	sequence models ||| sequence input	count=1
module	dimensions of tensor ||| ops	count=1
function	have invalid type ||| test invalid number of classes	count=1
module	resample ||| training python training	count=1
function_arg	new checkpoint file ||| new checkpoint checkpoint_dir	count=1
module	of any tensor-like object ||| python ops	count=1
function	root [function_2] ||| [function_1] [function_2]	count=11
module	return tensor ||| python ops	count=1
function_arg	column filled [arg_2] ||| [arg_2] [function_1]	count=1
class	the grad state for ||| state	count=1
arg	op ||| op loop_state	count=1
class	[class_1] the tensorarray ||| [class_2] [class_1]	count=4
function	definite ||| definite	count=1
function	[function_1] zoom of ||| [function_2] [function_1]	count=2
function	operator [function] = l ||| [function]	count=1
function	matmul node with ||| mat mul node	count=2
arg	to a custom_getter ||| custom_getter	count=1
function	tensor is ||| tensor	count=2
function	maps input ||| preprocess input exprs	count=1
module	tensors that with ||| contrib learn python learn	count=1
function	the relative timestamp from ||| rel timestamps	count=1
arg	if other ||| other	count=1
function_arg	dims corresponding [arg_2] ||| [arg_2] [function_1]	count=1
function	syntax ||| syntax error	count=1
function	and [function_2] ||| [function_1] [function_2]	count=26
module	core version with ||| learn	count=1
arg	distribution on r^k, for ||| loc atol rtol validate_args	count=1
module	text ||| contrib keras python keras	count=1
module	solves systems of ||| python ops	count=1
function	data/plugins_listing endpoint ||| plugins listing	count=1
module	for a tensor that ||| ops	count=1
function	dump path and runoptions ||| dump path and run options	count=1
function	summary ||| summary	count=6
function	types ||| type	count=1
module	proto_type ||| python	count=1
module	output tensors for ||| keras python keras engine	count=1
module	quantization ||| quantization	count=1
module	extract ||| contrib learn python learn datasets	count=1
function	all columns are empty ||| all columns empty	count=1
function	[function_1] [function_2] ||| [function_1] dims [function_2]	count=1
function	hue ||| hue	count=1
function	finalize and ||| finalize	count=1
arg	values returning [arg] is <= ||| numerator [arg]	count=1
function	probability of 1 ||| probs	count=1
module	of tensor ||| ops	count=4
module	keras tensor ||| contrib keras python keras	count=1
arg	[arg_1] line of ||| [arg_2] [arg_1]	count=8
function_arg	[function_1] signatures ||| [function_1] tensors [arg_2]	count=1
module	dimension [module] ||| [module]	count=5
class	its outputs ||| residual	count=1
arg	session, and ||| master saver checkpoint_dir checkpoint_filename_with_path	count=1
function_arg	[function_1] predicted_ids ||| [arg_2] [function_1]	count=1
arg	of the tensor ||| tensor	count=1
module	transforms each text ||| python	count=1
function	proper shape ||| assert	count=1
function	tensorflow variables for ||| vars	count=1
arg	in xs ||| xs	count=1
function	writes metagraphdef ||| meta graph	count=1
function	log ||| log	count=15
function	of a file ||| file	count=1
function_arg	order [arg_2] ||| [function_1] [arg_2]	count=1
function	read queue batch ||| read batch	count=3
function	generates 2-dimensional data ||| make data from	count=1
function	[function_1] or list ||| [function_2] [function_1]	count=3
arg	a config file ||| config	count=1
arg	an ||| cell_type num_units target_column problem_type	count=1
module	version with default ||| contrib learn python learn	count=1
arg	subgraph ||| sgv dst_graph	count=1
function	then return tensor version ||| assert valid	count=1
function	[function_1] [function_2] ||| [function_1] doc [function_2]	count=4
function	returns the proto_type ||| proto	count=1
function	single epoch ||| epoch	count=1
function	information for [function_2] ||| [function_1] [function_2]	count=1
arg	from the given ||| scope	count=1
function	header for use ||| header from ops and	count=1
function	new values from ||| from	count=1
function	difference loss to ||| difference	count=1
function	process a [function_2] ||| [function_1] [function_2]	count=2
module	a given ||| python learn utils	count=1
function	after a restart is ||| after restart for file version less than2	count=1
module	dataframe into two dataframes ||| dataframe	count=1
module	underlying ||| python client	count=1
function	[function_1] discard expired ||| [function_1] [function_2]	count=2
function	possibly add [function_2] ||| [function_2] [function_1]	count=2
module	return ||| contrib learn python	count=1
function	re-route both ||| reroute sgv	count=1
function	types used ||| types	count=1
class	calls hooks ||| hooked	count=1
module	parameter ||| distributions	count=1
function	feed ||| tensor feed	count=1
arg	contains both the original ||| mode	count=1
function	init and [function_2] ||| [function_1] [function_2]	count=1
module	tensors linked to ops ||| contrib graph_editor	count=1
function	[function_1] set ||| [function_1] [function_2]	count=23
function	of seven gaussians ||| univariate	count=1
function	state of the ||| state	count=1
function	[function_1] bucketized ||| [function_2] column [function_1]	count=2
class	construct ||| id table with hash buckets	count=1
arg	tensor_list ||| tensor_list num_epochs shuffle seed	count=1
module	validate ||| python debug cli	count=1
function_arg	[function_1] input data ||| [arg_2] [function_1]	count=5
class	[class] specified ||| [class]	count=1
function	returns ||| get file	count=1
function	has ||| hashed output v2 has	count=1
function_arg	[function_1] _docinfo objects ||| [function_1] [arg_2]	count=2
class	enter ||| flow state	count=1
function	creates an rnn model ||| get dynamic rnn model	count=1
class	normal distribution ||| normal diag plus low	count=1
function	a new dask dataframe ||| dask	count=1
class	a tensor for ||| lazy builder	count=1
arg	col_seq ||| col_seq	count=2
class	of this operator ||| linear operator	count=3
function	[function_1] [function_2] if it's valid otherwise ||| python feature_column check [function_1] [function_2]	count=2
function	timeline [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] node ||| [function_2] [function_1]	count=18
class	tests ||| logistic regressor test	count=1
function	in a list ||| count total	count=1
function	reroute errors written ||| reroute	count=1
arg	specified min ||| t clip_value_min clip_value_max	count=1
arg	x is ||| x check_integer	count=1
class	by this operator ||| operator scaled identity	count=1
function	metagraphdef ||| import meta	count=1
function_arg	returns metagraphdef [arg_2] ||| [arg_2] [function_1]	count=3
class	tensor in a ||| tensor	count=1
function	to a node ||| node	count=1
arg	dims values into num_shards ||| cls dims num_shards	count=1
function_arg	restore variables [arg_2] ||| [function_1] [arg_2]	count=1
function	variables in a ||| variables	count=1
function	produce the same values ||| compare fwd values	count=1
module	a mapping of ||| ops	count=1
class	[class_1] projection and ||| [class_1] [class_2]	count=2
function	invalid type ||| invalid number	count=1
arg	[arg_1] tensorflow graph ||| [arg_2] [arg_1]	count=2
function	the element shape ||| element	count=1
arg	elements ||| name dtype	count=1
module	the value of ||| python	count=1
function	importance sampling ||| importance	count=1
function	string_to_hash_bucket op to ||| get string to hash	count=1
class	check to ||| test upgrade	count=1
function	benchmark single [function_2] ||| [function_1] [function_2]	count=2
arg	that builds ||| features	count=4
function	an accumulator for ||| accumulator	count=1
class	vocabulary after which new ||| vocabulary	count=1
function	the beginning of ||| begin	count=1
module	will be ||| framework	count=1
module	can do a ||| python layers	count=1
arg	dimension of ||| dim	count=1
module	a sequence of ||| contrib keras python	count=1
class	[class_1] tensorarray ||| [class_1] [class_2]	count=4
arg	called right ||| logs	count=1
function	if rgba color cycling ||| draw bounding box rgbacolor cycling	count=1
arg	maps activations ||| activations labels sequence_length	count=3
class	normal distribution ||| normal linear operator	count=1
function	a fake bias feature ||| bias	count=1
arg	base_type to ||| base_type conversion_func priority	count=1
arg	retrieves the output ||| input_tensors	count=1
class	file version event ||| event accumulator	count=1
arg	for make_linear_model ||| builder units sparse_combiner	count=1
function	[function_1] filter ||| [function_2] [function_1]	count=4
module	image ||| keras preprocessing	count=1
module	dummy method to ||| python ops	count=1
function	start the standard services ||| start standard services	count=1
function	[function_1] sqrt_solve ||| [function_1] [function_2]	count=1
arg	the labels and predictions ||| labels predictions weights metrics_collections	count=2
arg	using class ||| logits probs	count=1
class	[class_1] debug op ||| [class_2] [class_1]	count=1
function	the max pooling on ||| max pool	count=1
function	initializer ||| random exp initializer	count=1
arg	a named ||| column_name column_values	count=1
class	by this operator to ||| operator	count=2
function	op to initialize ||| init	count=1
arg	many tensor variables at ||| tuples	count=1
function	reshape node with the ||| reshape node	count=1
function	when the kernel ||| kernel	count=1
function_arg	[function_1] summarywriter and ||| [arg_2] [function_1]	count=1
function	with [function] ||| embedding [function] rnn	count=2
function	[function_1] softmax ||| [function_2] [function_1]	count=7
function	indices for the ||| index	count=1
function	timestamp of when ||| timestamp	count=1
function	check for ||| check for	count=1
function	a slot named ||| slot	count=1
function	linked to ops that ||| filter ts from regex	count=1
module_class	[module_1] phased ||| [module_1] [class_2]	count=4
class	that event ||| event	count=1
module_class	and [class_2] ||| [module_1] mutable hash [class_2]	count=1
function	conv2d produce the same ||| fwd conv2d	count=1
arg	for transposed 3d ||| inputs filters kernel_size strides	count=1
function	[function_1] logistic ||| [function_1] [function_2]	count=1
function	validates a ||| validate	count=1
arg	from op1 and ||| op1	count=1
function	binary classification with svms ||| binary svm	count=1
arg	a diagonal matrix ||| diag	count=1
function	rnn to predictions for ||| predictions	count=1
function	from ||| fn	count=6
function	flushes the ||| flush	count=3
function	files ||| build	count=1
module_class	list of [class_2] ||| [module_1] [class_2]	count=6
arg	split dims values ||| cls dims	count=1
function	capture the output ||| test capture	count=1
module	lists of the ||| python ops	count=1
function	the maximum ||| reduce max	count=1
module	on ||| ops	count=1
arg	for recording a ||| name iters cpu_time wall_time	count=1
module	command ||| python debug cli	count=6
arg	batches ||| tensors accept_prob_fn batch_size	count=1
function	reservoirs ||| uses	count=1
module_class	[module_1] [class_2] canonical format ||| [module_1] [class_2]	count=4
function	a header for ||| header from	count=1
function	number fields ||| number fields	count=2
module	converts ||| python keras	count=1
function_arg	str representation ||| str dictionary	count=1
module	the tensor ||| contrib labeled_tensor python	count=2
module	1 ||| python	count=2
arg	a tensor with all ||| tensor dtype	count=1
function	dependency on this ||| edges	count=1
class	the assigned gaussian ||| gmm algorithm	count=1
function	register a new tensor ||| register tensor	count=1
module	calculate ||| contrib training python training	count=1
module	returns the ||| framework	count=2
function	to ||| to hash	count=1
function	state [function_2] ||| [function_2] [function_1]	count=5
module	parses ||| python debug cli	count=1
function	depending on ||| getitem	count=1
function	proper shape values ||| maybe assert	count=1
function	wrap a call to ||| wrap custom	count=1
function	classes for given ||| classes	count=2
module	that with ||| learn	count=1
arg	values ||| values dimension sampled_candidates	count=1
function_arg	[function_1] a config ||| [arg_2] [function_1]	count=1
arg	precision@k ||| predictions_idx	count=4
function	return floating point ||| assert float	count=1
function	[function_1] indices ||| [function_2] [function_1]	count=9
arg	appearing ||| log_p q alpha	count=1
function	with additional ||| with	count=1
function_arg	slice [arg_2] ||| [function_1] [arg_2]	count=1
module	tensors execute together ||| batching python	count=1
function	[function_1] jacobian ||| [function_1] [function_2]	count=3
function_arg	file names [arg_2] ||| [function_1] [arg_2]	count=1
function	all arguments are ||| all arguments	count=6
function	[function_1] loss functions ||| [function_2] [function_1]	count=2
function	and loss functions ||| check loss and target	count=1
function	insures you can save ||| save load	count=3
arg	input ||| inputs	count=10
module	to __init__ which ||| distributions python ops	count=1
arg	[arg_1] offset in ||| [arg_2] [arg_1]	count=2
module	mnist dataset ||| keras python keras datasets	count=1
arg	[arg_1] [arg_2] ||| [arg_2] mapping [arg_1]	count=4
function_arg	[function_1] row and ||| [function_1] factors [arg_2]	count=4
function	[function_1] sum of ||| [function_2] [function_1]	count=6
function	dynamic ||| dynamic	count=5
function	a _targetcolumn for ||| target	count=1
arg	labels tensor ||| labels	count=4
function	insures you can save ||| train save load	count=3
arg	state_name ||| state_name value	count=1
function	bias weight ||| bias and	count=1
function	[function_1] indices represented ||| [function_2] [function_1]	count=2
module	worker ||| python training	count=1
function	non-reference dtype ||| base	count=1
function_arg	[function_1] function for ||| [arg_2] [function_1]	count=1
arg	factor of rate along ||| rate	count=1
function	plugin ||| retrieve plugin	count=2
class	the decoder ||| decoder	count=1
module	this ||| ops	count=15
arg	term ||| labels weights epsilon	count=1
arg	called at the start ||| logs	count=1
arg	apply y w + ||| w	count=1
function	the parameters ||| params	count=2
module	as ||| contrib learn python learn estimators	count=20
function	define ||| define	count=5
function_arg	== [arg_2] ||| [arg_2] [function_1]	count=4
function	name -> _guideref from ||| build guide	count=1
function	to use ||| or dict	count=1
module	batch ||| contrib layers python layers	count=1
module	of ||| metrics python ops	count=10
function	[function_1] bucket ||| [function_1] [function_2]	count=1
function	feature ||| feature ops from	count=1
class	vocabulary dictionary and ||| categorical	count=1
class	construct a quantized ||| quantized	count=1
arg	to runoptions for a ||| run_options	count=1
arg	the screen output from ||| output node_name enable_list_tensors	count=1
class	labels ||| node stepper cli	count=2
function	creates classification signature ||| classification signature	count=2
function	names for each component ||| names	count=1
function	computes the global ||| global	count=1
arg	that builds model graph ||| features	count=4
module	labeled tensors ||| contrib labeled_tensor python	count=3
arg	a svsummarythread ||| sv sess	count=1
arg	given list of items ||| items	count=1
module	g "matmul") ||| python	count=1
arg	a lower triangular ||| tril event_ndims	count=1
arg	a microbenchmark to ||| iters	count=1
function	dense tensor [function_2] ||| [function_2] [function_1]	count=1
module	specified by the given ||| contrib slim python slim data	count=1
function	ops that ||| filter ts from	count=1
arg	that respects ||| rename	count=1
class	[class_1] variable ||| [class_2] [class_1]	count=2
function	from the partition graphs ||| partition	count=1
class	the variable ||| optimizable variable	count=1
module	g "matmul") ||| framework	count=1
module	discards ||| backend event_processing	count=1
function	from the given path ||| from path	count=1
function	the asset ||| asset	count=1
function	a savedmodel ||| export savedmodel	count=1
module	numpy ||| python keras preprocessing	count=1
function	watch_fn ||| dumping with watch fn	count=1
class	tensor references ||| tensor	count=1
function	of basic metrics for ||| metrics for	count=1
function	head for ||| head	count=1
function	restores the [function_2] ||| [function_1] variable [function_2]	count=3
module	variable ||| contrib framework python ops	count=1
module	dataframe and ||| contrib learn python learn dataframe	count=1
arg	parameters for an ||| use_peepholes initializer num_proj	count=1
function	the ||| filter ts	count=2
function	possible input options for ||| input options	count=1
class	to a registered ||| registry	count=1
function_arg	[function_1] [arg_2] it only depends on ||| [function_1] [arg_2]	count=6
function	an op ||| run op	count=1
function	if ||| skip if	count=1
function	the function [function_2] ||| [function_1] [function_2]	count=1
arg	d2 ||| d2	count=1
class	to the event file ||| to event	count=2
function	rgb color cycling ||| bounding box rgbcolor cycling	count=1
function	calculates true positives for ||| sparse true positive at	count=1
module	that wraps a ||| learn	count=1
function	deconv layer [function_2] ||| [function_2] [function_1]	count=1
arg	replaced ||| target_ts replacement_ts dst_scope src_scope	count=1
function	adds an absolute difference ||| absolute difference	count=1
class	[class_1] for binary ||| [class_2] logistic [class_1]	count=1
class	on this ||| dtype	count=1
module	from a savedmodel ||| saved_model	count=1
function	accumulated ||| back prop accumulated	count=1
function	text ||| texts to	count=1
module	sessionrunhook raises typeerror ||| python	count=1
function	the names in ||| fetch names	count=1
class	to some sample data ||| image data generator	count=1
function	with monitor callbacks ||| run with monitors	count=2
module	sum of ||| python	count=1
class	don't have a ||| test	count=1
module	a given directory ||| learn python learn	count=1
module	the input ||| contrib cloud python ops	count=1
function	signaturedef ||| signature def	count=2
function	the main ||| test request main	count=1
function	isinf are [function_2] ||| [function_2] [function_1]	count=2
module	return tensor version ||| python	count=1
function	append ||| append tensor alias	count=1
arg	computes the percentage ||| weights	count=1
function	one evaluation against ||| do eval	count=1
function	returns input ||| input	count=1
arg	[arg_1] sparsetensorsmap and ||| [arg_2] [arg_1]	count=2
function	every temporal slice ||| time distributed	count=1
function	a model_fn ||| model fn	count=2
arg	pads each ||| padding	count=1
module	keras variable ||| python keras	count=1
function	to sparse ||| to sparse value	count=4
function	the output ||| test output	count=1
arg	this ||| dtype	count=1
module	parameter ||| contrib distributions python kernel_tests	count=2
function	to have non-broadcastable shapes ||| check for broadcastable batch shape	count=1
function	names in ||| fetch names	count=1
module	of linear eqns ||| python ops	count=1
function_arg	objective function ||| objective fn	count=1
module	based on this ||| python framework	count=1
class	for this ||| base	count=1
function	and return a single ||| get single	count=1
function	root ||| prefix	count=1
function_arg	[function_1] for recall@k ||| [function_1] labels predictions_idx [arg_2]	count=8
function	[function_1] directory recursively ||| [function_2] [function_1]	count=3
arg	execute ||| sess enqueue_op	count=1
function	any external [function_2] ||| [function_2] [function_1]	count=4
function	arg into ||| arg string	count=1
module	previous output tensors ||| grid_rnn python	count=1
class	constructs ||| debug hook	count=1
module	cross-entropy loss using ||| python ops losses	count=1
function_arg	[function_1] that would ||| [arg_2] [function_1]	count=2
arg	name as containing ||| name	count=1
function_arg	[function_1] tensor ||| [function_1] [arg_2]	count=13
module	which values will ||| framework	count=1
function	symbol ||| guide	count=1
arg	predictions with respect ||| predictions weights metrics_collections	count=1
class	a tensorflow tensor have ||| tensor flow	count=1
module	on top of the ||| python	count=1
function	random input [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] top ||| [function_2] [function_1]	count=1
arg	lower triangular matrix ||| diag tril	count=1
function	with monitor callbacks ||| with monitors	count=1
function	lists the names of ||| list	count=1
function	a feature spec ||| feature spec	count=1
function	return a device function ||| replica device	count=1
function	[function_1] names from ||| [function_1] [function_2]	count=4
function	data against the partition ||| dump	count=1
function_arg	kind name [arg_2] ||| [function_1] [arg_2]	count=1
function	show array ||| show array	count=1
function	classification using matrix ||| classification training loss	count=1
function	[function_1] full name ||| [function_2] [function_1]	count=1
arg	a numpy ||| x	count=1
function	small [function_2] ||| [function_1] [function_2]	count=1
function	feed ||| init feed	count=1
function	resnet v1 for ||| resnet	count=1
module	this ||| framework	count=25
function	the default schedule for ||| default schedule	count=1
function	constructs output ||| output	count=1
function	wrap a call to ||| wrap custom getter	count=1
function	[function_1] tf session ||| [function_2] run conversion [function_1]	count=1
function	not applicable to strings ||| string	count=1
function	an op to initialize ||| initialize	count=1
module	of a call to ||| python ops	count=1
function	validator callback of ||| on	count=1
function	are sessionrunhook raises typeerror ||| check hooks type	count=1
function_arg	[function_1] visitor ||| tools docs reference resolver [function_1] [arg_2] doc_index	count=3
function	adds scaled [function_2] ||| [function_2] [function_1]	count=3
function_arg	node of [arg_2] ||| [function_1] [arg_2]	count=1
module	training and ||| learn python learn estimators	count=1
function	by [function_2] ||| [function_2] [function_1]	count=5
module	the ||| linear_optimizer python	count=1
arg	the important bits ||| original encoded	count=1
function	from a ||| assign from	count=1
class	config for ||| config	count=1
function	the ||| ts	count=2
function	have the same shape ||| shape	count=1
function	tensorshape of vectors ||| vector shape	count=1
function	make a subgraph ||| make view	count=2
class	sample data and ||| data feeder	count=2
function	node with ||| norm node	count=1
arg	indexies of categories ||| x unused_y	count=1
function	records ||| records	count=1
function	dimensions ||| dimensions	count=1
class	queue element ||| queue	count=2
function	returns -grad * 2/sqrt ||| erfc	count=1
function	proper shape ||| assert valid	count=1
function	device is part of ||| device	count=1
module	values then ||| python ops	count=1
function	along column of ||| along cols	count=4
module	of the dataframe and ||| contrib learn python learn dataframe	count=1
arg	runs a microbenchmark ||| target iters	count=2
function	a numpy matrix ||| matrix	count=2
function	extraction by [function_2] ||| [function_2] [function_1]	count=4
function	returns a canonical ||| canonical	count=1
module	sets ||| python training	count=1
class	that event discards ||| mocking event	count=1
module	ops leading to ||| ops	count=1
module	tuple of integer[s] or ||| python ops	count=1
function	watch_fn ||| with watch	count=1
arg	keys ||| keys name	count=5
module	graphdef and returns the ||| python framework	count=1
function	with vocabulary ||| with vocabulary with dense input	count=1
function	scan on ||| scan	count=1
class	according to partition graphs ||| debug dump dir	count=1
arg	for given features ||| input_fn predict_keys hooks	count=1
function	for proper shape values ||| maybe assert	count=1
module	non-reference ||| python framework	count=2
function_arg	outputs [arg_2] ||| [arg_2] [function_1]	count=5
function	[function] queue ||| [function]	count=1
class	positive definite ||| pdsqrt vdvtupdate	count=1
arg	against the full epoch ||| sess eval_correct images_placeholder labels_placeholder	count=1
function	shape of batch ||| batch shape tensor	count=3
class	lstm cell ||| coupled input forget gate lstmcell	count=1
function	[function_1] operators ||| [function_1] [function_2]	count=1
class	multiple output tensors ||| utils	count=1
arg	instance ||| model_dir	count=3
arg	parameters for an ||| use_peepholes share_time_frequency_weights	count=1
module	gets ||| python learn estimators	count=2
arg	command ||| command	count=1
function_arg	[function_1] a cell ||| [arg_2] [function_1]	count=1
module	checks ||| layers python layers	count=1
module	an imagenet model's ||| applications	count=1
function	returns the concatenation ||| concatenate	count=1
function	number of rows ||| size	count=1
function	the proto_type ||| get collection proto type	count=1
class	check ||| tri l	count=1
module	logistic ||| contrib distributions python ops	count=1
function	[function_1] event ||| [function_1] [function_2]	count=9
module	returns a dataframe with ||| contrib learn python learn dataframe	count=1
function_arg	to [arg_2] ||| [function_1] sparse [arg_2]	count=1
arg	and convolving ||| len_tensor	count=1
class	[class_1] failed ||| [class_1] [class_2]	count=2
function	[function_1] sparse_column_with_keys ||| [function_2] [function_1]	count=2
arg	given sensitivity ||| labels sensitivity	count=1
module	returns the ||| layers python	count=1
function	embedding lr [function_2] ||| [function_2] [function_1]	count=2
function	[function] partially flattened ||| map structure up [function]	count=1
function	losses ||| losses	count=3
function	given plugin ||| plugin	count=1
function	the product ||| reduce prod	count=1
function	[function_1] feedable ||| [function_2] [function_1]	count=1
function	a copy ||| copy	count=2
function	pool along column of ||| pool along cols	count=2
function	[function_1] the configuration ||| [function_1] [function_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] index [arg_2]	count=8
arg	given value to ||| value dtype name	count=2
function_arg	border [arg_2] ||| [function_1] [arg_2]	count=1
function	the connected output ||| connected outputs	count=2
arg	an output ||| output	count=1
arg	given mean var beta ||| mean var beta	count=1
function	sums of n-d convolutions ||| atrous convolution	count=1
function	calculates true positives ||| true positive	count=1
arg	labels ||| top_k_predictions labels	count=1
function_arg	one evaluation [arg_2] ||| [function_1] [arg_2]	count=1
class	weight ||| sparse column	count=2
arg	distributions with ||| validate_args	count=1
class	that ||| factorization test	count=1
arg	with these parameters ||| shape dtype initializer	count=2
function	be ||| prepare or wait for session	count=2
function	minimum ||| reduce min	count=1
class	or none ||| indexed	count=1
module_class	[module_1] coordinatewise ||| [module_1] distributions [class_2]	count=2
arg	tensor ||| name as_ref	count=2
module	returns ||| estimator	count=1
function	by a ||| by	count=1
arg	op was marked ||| scope op func	count=1
function	default value ||| default value	count=1
module	handles starting and stopping ||| slim python slim	count=1
class	write ||| rich text lines	count=1
function	is the switch ||| switch	count=1
module	the ||| writer	count=1
function	root ||| root	count=4
module_class	chief [class_2] ||| [module_1] [class_2]	count=2
module	a given factorization ||| factorization	count=1
module	clips ||| training python training	count=1
function	trace information for ||| store trace info	count=1
function	the rnn to loss ||| loss	count=3
function	maybe purge ||| maybe purge	count=1
function	the total variation of ||| total variation	count=1
function	returns the ops ||| get	count=1
arg	satisfies the expected ||| tester estimator_class	count=1
function	control [function_2] ||| [function_1] [function_2]	count=21
function_arg	a sparsetensor [arg_2] ||| [function_1] tensor [arg_2]	count=1
module	which ||| contrib distributions python ops bijectors	count=2
module	a command ||| python debug cli	count=1
function	op to save ||| save	count=1
class	tests ||| op test	count=6
function	report of ||| report last	count=1
function	graph ||| to graph	count=1
function	contains session bundle model ||| session bundle	count=1
function	name -> ||| build	count=1
function	call batch ||| batch	count=1
module	to the ||| python	count=9
module	the vocabulary ||| contrib learn python learn	count=1
module	with [module_2] ||| [module_1] [module_2]	count=1
arg	[arg_1] specified scope ||| [arg_1] [arg_2]	count=1
function	session run() metadata ||| run metadata	count=1
function	[function_1] inner cell ||| [function_2] [function_1]	count=8
function	example ||| row to example	count=1
function	an op [function_2] ||| [function_2] batch [function_1]	count=2
function	richtextlines ||| rich text lines from rich line	count=1
module_class	[module_1] adam optimizer ||| [module_1] [class_2]	count=6
arg	sharded ||| num_shards	count=1
module_class	[module_1] keys and ||| [module_1] ops [class_2]	count=1
arg	[arg_1] from_proto ||| [arg_2] [arg_1]	count=2
class	to the meta ||| builder	count=1
arg	returning [arg] is ||| numerator [arg]	count=1
arg	has access ||| tensor_name	count=1
function	max amazingly it's precisely ||| max	count=1
function	variables ||| variable	count=2
module	list of keras ||| contrib keras python keras	count=1
function	cached ||| cache	count=1
function	rank ||| with rank	count=1
function_arg	[function_1] model ||| [function_1] [arg_2]	count=6
arg	op that performs ||| data data_spec	count=1
arg	the parameters ||| use_peepholes share_time_frequency_weights	count=1
class	head [class_2] ||| [class_2] logistic [class_1]	count=1
function	sets the graph-level random ||| set random	count=1
function	code ||| cwise mul or div grad	count=1
function	the asset tensors if ||| asset tensors	count=1
module	slice of ||| contrib factorization python ops	count=1
function	a sequence ||| embed sequence	count=1
function	[function_1] box ||| [function_1] [function_2]	count=4
function	filter data types ||| data type filter	count=2
arg	the old_getter internally ||| old_getter	count=1
module	all files ||| tensorboard backend event_processing	count=1
module	(e g "matmul") ||| python	count=1
arg	model [arg_2] ||| [arg_1] [arg_2]	count=1
class	a tensor for the ||| lazy builder	count=1
function	a benchmark ||| global report benchmark	count=1
module	shapes of [module_2] ||| [module_1] [module_2]	count=2
class	trains the model ||| model	count=1
function	_get_sparse_tensors() ||| get sparse tensors	count=2
function	the resultant of ||| compute elemwise op	count=1
function	[function_1] name ||| [function_1] [function_2]	count=15
function	of running an op ||| benchmark run op prebuilt	count=1
function	inputs for sequence ||| sequence input	count=1
function	a sparse [function_2] ||| [function_1] int [function_2]	count=4
function	importance sampling with ||| expectation importance	count=1
function	bytes ||| bytes limit	count=1
function	can [function_2] ||| [function_1] [function_2]	count=1
class	exit ||| control flow state	count=1
class	[class_1] outputs ||| [class_2] [class_1]	count=2
arg	labels ||| labels dim	count=2
function	equiv to i ||| to tensor	count=4
function	distribution as ||| distribution	count=1
module	estimator ||| python learn estimators	count=1
function	reads the value ||| read value	count=3
class	reader ||| parallel reader	count=1
function	the range of this ||| range	count=2
function	column is ||| column	count=2
function	get legend ||| node status label legend	count=1
function	pool ops ||| pool shapes	count=1
function	for "op" ||| gradient	count=1
function	via a solve ||| via solve	count=3
function	return a temporary directory ||| temp dir	count=1
function	validate a ||| validate	count=1
module	helper to __init__ which ||| contrib distributions	count=1
arg	in input best path ||| inputs	count=1
function	[function_1] sampled_candidates ||| [function_2] [function_1]	count=2
module	make sure ||| tools compatibility	count=1
function	return ||| assert valid sample	count=1
function	for the ||| grad	count=1
module	sequence of ||| python keras preprocessing	count=1
function	reshape [function_2] ||| [function_2] [function_1]	count=4
class	richline with no rich ||| rich line	count=1
class	the truncated normal ||| truncated normal	count=2
function	the lstm cell ||| lstm block cell	count=1
class	dimension ||| dimension	count=3
function	to have ||| same	count=1
function	the end ||| end	count=5
class	file [class_2] ||| [class_1] [class_2]	count=1
module	logic of the ||| python	count=1
function	the help output ||| help	count=1
function	define a [function_2] ||| [function_2] [function_1]	count=6
function	reservoirs with ||| uses	count=1
arg	the cells in ||| cells c_prev	count=1
module	of ||| contrib layers python ops	count=1
module	the cell and add ||| contrib rnn python ops	count=2
module	version with default shuffle ||| learn python learn learn_io	count=1
class	get ||| linear operator derived class test	count=2
function_arg	variable and [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] run ||| [function_2] [function_1]	count=2
function_arg	names [arg_2] ||| [arg_2] [function_1]	count=3
arg	handle ||| handle indices	count=1
arg	the getter ||| history_value	count=1
module	next runge-kutta ||| integrate	count=1
function_arg	[function_1] this name ||| [arg_2] [function_1]	count=1
function	session for use ||| session	count=1
module	the tensors at the ||| contrib graph_editor	count=1
module	batch systems of equations ||| linalg python ops	count=1
function	[function_1] indices for ||| [function_2] [function_1]	count=5
class	this ||| base wrapper	count=1
function	that labels [function_2] ||| [function_1] [function_2]	count=8
function_arg	model variable [arg_2] ||| [function_1] [arg_2]	count=2
function	[function_1] pil format ||| [function_1] [function_2]	count=1
module	predict total sum of ||| factorization python ops	count=1
function	from ||| build guide	count=1
function_arg	get request [arg_2] ||| [function_1] [arg_2]	count=1
function	ops that match the ||| filter ts from regex	count=1
arg	tensor if ||| tensor	count=1
function	for local [function_2] ||| [function_2] [function_1]	count=1
function	placeholder for the ||| placeholder from dtype	count=1
function	[function_1] around ||| [function_2] [function_1]	count=3
function	to their ||| by	count=1
function	-> _guideref from ||| build guide index	count=1
arg	multiple of num_unroll ||| num_unroll	count=1
class	text ||| text lines	count=1
class	values will be produced ||| indexed slices	count=1
module	the proto_type for ||| python framework	count=1
module	cluster ||| tools dist_test scripts	count=1
function	same values ||| compare fwd values	count=1
function	[function_1] end ||| [function_1] [function_2]	count=3
function	[function] layer ||| sequence [function]	count=2
module	return indexies of ||| contrib learn	count=1
function	broadcast leading dimensions ||| broadcast matrix batch	count=1
function	[function_1] restart ||| [function_1] [function_2] for file version less	count=1
module	__init__ which ||| contrib distributions python ops bijectors	count=1
function	record variable initializations ||| record variable inits	count=2
arg	predictions [arg_2] ||| [arg_2] [arg_1]	count=2
module	training and ||| contrib learn python learn	count=1
module	dictionary and ||| learn preprocessing	count=1
function	with static shapes ||| flip vector to matrix static	count=1
module	data as ||| python learn estimators	count=4
function	[function_1] categorical ||| [function_2] column [function_1]	count=2
function	graph ||| inference graph	count=2
function	inference [function_2] ||| [function_1] [function_2]	count=1
function	that defines the version ||| version	count=1
function	be integrated with ||| test can created before minimize called	count=1
function	padding required ||| required space	count=1
module_class	[module_1] random ||| [module_1] [class_2]	count=4
function	creates classification signature from ||| classification signature fn	count=1
class	information [class] ||| [class]	count=1
function_arg	[function_1] the model ||| [function_1] session bundle dir [arg_2]	count=1
function	match the ||| ts from	count=1
function	parses a time ||| parse readable time	count=1
function	extract the ||| extract states	count=1
function	create a [function_2] ||| [function_1] categorical column [function_2]	count=4
function_arg	[function_1] stopatstep monitor ||| [function_1] [arg_2]	count=1
module	of classes ||| ops	count=2
class	array ||| array	count=1
arg	stddev loc and ||| loc	count=1
function	a stop [function_2] ||| [function_2] [function_1]	count=1
module	determined at runtime ||| linalg	count=1
module	the rank of ||| python ops	count=1
module	concatenates ||| ops distributions	count=1
function	normalization ||| normalization	count=1
function	performs dropout given ||| dropout	count=1
arg	and add its inputs ||| inputs state	count=2
function	of the domain ||| domain	count=1
class	[class] command-line interface ||| [class] debug	count=2
arg	a column ||| column args	count=1
function	embeddings of [function_2] ||| [function_2] [function_1]	count=2
function	line in the ||| line	count=1
class	statistics ||| statistics	count=1
function	get a list with ||| get	count=1
class	eventaccumulator after adding ||| mocking event accumulator	count=1
function	returns ||| check hooks	count=1
function	[function_1] static shapes ||| [function_2] [function_1]	count=4
function	[function_1] [function_2] ||| [function_2] run [function_1]	count=6
module	shape ||| python framework	count=1
function	the variable ||| resource	count=2
function	the same proto ||| proto	count=1
class	the dump (event) file ||| debug tensor datum	count=1
function	leaf impurity of ||| average impurity	count=1
function	[function_1] metadata information ||| [function_2] [function_1]	count=1
arg	[arg_1] labels ||| [arg_1] [arg_2]	count=8
function_arg	create a textlinereader ||| init skip_header_lines name	count=1
module	indices of [module_2] ||| [module_1] [module_2]	count=1
module	keras tensors ||| keras python keras	count=1
function_arg	collection with [arg_2] ||| [arg_2] [function_1]	count=3
class	be ||| indexed slices	count=1
module	returns the proto_type for ||| python framework	count=1
module	distribution with parameters ||| python ops distributions	count=1
function	into a numpy matrix ||| matrix	count=1
function	[function_1] ui ||| [function_2] [function_1]	count=1
class	a random ||| random	count=1
function	[function_1] indices represented ||| [function_1] [function_2]	count=2
module	as self _value ||| bayesflow	count=1
arg	values returning [arg] is ||| numerator [arg]	count=1
module	which values ||| python framework	count=1
function_arg	[function_1] process ||| [function_1] partition graphs [arg_2]	count=1
arg	the parameters for an ||| use_peepholes initializer num_proj	count=1
module	on ||| contrib labeled_tensor python ops	count=1
module	register ||| contrib labeled_tensor python ops	count=1
class	bucket ||| reservoir bucket	count=1
function_arg	by input x ||| input x	count=1
module	list of tensors ||| framework python ops	count=1
class	and run the ||| run	count=1
function	ops that match ||| filter ts	count=1
function	starts ||| start reloading	count=1
module	same as ||| python learn estimators	count=3
module	print ||| tfprof python tools tfprof	count=1
function_arg	[function_1] [arg_2] ||| [function_1] input producer [arg_2]	count=5
function	the while [function_2] ||| [function_1] [function_2]	count=1
class	operator ||| linear operator	count=14
function_arg	entropy [arg_2] ||| [arg_2] [function_1]	count=1
function	modelfnops that a model_fn ||| create model fn	count=1
function	a global default ||| get default	count=1
module	returns only the ||| ndlstm python	count=1
function_arg	relative error [arg_2] ||| [arg_2] [function_1]	count=5
module_class	[module_1] variable ||| [module_1] [class_2]	count=3
function	version ||| assert valid	count=1
function	make_linear_model() for [function_2] ||| [function_2] [function_1]	count=3
arg	single line of ||| line font_attr_segs	count=2
module	function for ||| ops	count=1
function	[function_1] weighted sum ||| [function_1] categorical column [function_2]	count=1
arg	the cells in ||| conf cells	count=1
arg	to x in xs ||| xs name	count=1
function	the plugins that ||| plugins	count=1
arg	specified dimension ||| dim epsilon	count=1
function	returns [function_2] ||| [function_2] [function_1]	count=25
function	tensors which are input ||| tensors	count=1
function	from ||| caption	count=1
module	models that ||| learn estimators	count=1
function	restricted linear prediction ||| joint weighted sum from feature	count=1
function	[function_1] dtype ||| [function_1] [function_2]	count=3
function	[function_1] that is ||| [function_1] [function_2]	count=2
module	this cell output ||| contrib rnn	count=1
function	integers ||| to	count=1
module	the ||| contrib rnn python ops	count=3
function	sequence of embeddings ||| sequence	count=1
function	meta graph to ||| meta graph	count=2
function_arg	[function_1] filewriter ||| [function_1] [arg_2]	count=1
module	a sequence ||| contrib keras python keras preprocessing	count=1
arg	transposed ||| inputs filters kernel_size strides	count=1
class	feeding for ||| feeder	count=1
arg	the second-order gradients ||| output_sizes window_rows	count=1
module	getdoc ||| python util	count=1
function	values then return tensor ||| sample	count=1
class	the debug tensor dumping ||| debug	count=1
module	given directory ||| learn	count=1
function_arg	[function_1] of n ||| [function_1] [arg_2]	count=4
arg	prior on the ||| prior scale s n	count=1
function	of the names in ||| fetch names	count=1
module	values then return tensor ||| ops	count=1
module	dataframe ||| dataframe	count=3
function	predict ||| predict data feeder	count=2
function	for node-status labels ||| node	count=1
module	construct ||| python learn learn_io	count=1
arg	sequence ||| encoder_cell decoder_cell	count=1
function	file against a ||| file	count=1
function_arg	batch [arg_2] ||| [arg_2] [function_1]	count=5
function	control outputs of the ||| control outputs	count=1
function	table that maps ||| table	count=1
function	options ||| options	count=2
class	sure we don't ||| files	count=1
class	gradient descent ||| gradient descent	count=3
function	dimension of a deconv ||| get deconv	count=1
arg	to writer ||| writer	count=3
function	[function_1] end event ||| [function_2] [function_1]	count=3
function	shape values ||| maybe assert valid sample	count=1
module	eventfilewriter ||| summary	count=1
module	return tensor ||| ops distributions	count=1
module	tilegrad ||| python ops	count=1
rep	[module_class_1] [function_arg_2] ||| [module_class_1] add [function_arg_2]	count=3
function	a watch_fn ||| dumping with watch	count=1
module	serializes the ||| python	count=1
function	start ||| start	count=5
function	clips tensor values to ||| clip by value	count=1
module	which properly ||| distributions	count=1
class	each text ||| tokenizer	count=1
function	generic signature [function_2] ||| [function_1] [function_2]	count=1
function	as linear_model_fn but ||| fn with model fn	count=2
arg	checkpoint into constants ||| input_graph input_saver input_binary input_checkpoint	count=1
function	variable initializations ||| variable inits	count=2
module	+ ||| contrib distributions python ops	count=1
function	creates generic [function_2] ||| [function_2] [function_1]	count=2
arg	and predictions ||| predictions dim	count=1
function	from ||| from visitor	count=2
class	with ||| basic	count=1
module_class	[module_1] tensor ||| [class_2] [module_1]	count=4
class	dtype ||| dtype	count=1
function	that [function_2] ||| [function_2] finite gradient [function_1]	count=1
function	base directory ||| dir	count=2
function	set the parameters ||| set params	count=3
arg	with the given ||| num_shards	count=1
class	add ||| while context	count=1
function	the files ||| build guide	count=1
module	the position ids ||| python ops	count=1
arg	the entire contents of ||| filename binary_mode	count=1
module	is ||| framework python framework	count=2
function	metrics ||| metrics	count=5
function	a bad way ||| test construction pollution	count=1
class	check ||| base linear operator identity	count=1
function_arg	[function_1] the specification ||| [arg_2] [function_1]	count=5
module	of a ||| contrib factorization python ops	count=3
class	the ||| file writer	count=1
function	return the function details ||| build function details	count=1
function	retrieves the output ||| get output	count=2
module	filters ||| keras	count=1
arg	symbols to ||| ids vocab_size embed_dim unique	count=1
arg	an estimator ||| num_units target_column problem_type	count=1
function	parse ||| parse	count=3
function	of convolution shapes ||| shapes	count=1
class	the vocabulary dictionary ||| categorical processor	count=1
arg	output ||| output node_name enable_list_tensors enable_node_info	count=1
module	the image s ||| image python ops	count=1
function	current meta graph to ||| meta graph	count=1
arg	structure of [arg_2] ||| [arg_2] [arg_1]	count=2
module	eval ||| python learn	count=1
function	deepcopy of [function_2] ||| [function_2] column [function_1]	count=1
arg	[arg_1] or dicts ||| [arg_2] [arg_1]	count=1
function	of the max pool ||| max pool shapes	count=1
function	name of a ||| name	count=2
class	session [class_2] ||| [class_2] [class_1]	count=2
arg	row ||| rows	count=1
function	original arguments ||| original args	count=2
arg	svsummarythread ||| sv sess	count=1
arg	alongside the specified axis ||| axis	count=2
function	the values for ||| test output values	count=1
arg	dims values into num_shards ||| dims num_shards	count=1
function	possible input [function_2] ||| [function_1] [function_2]	count=2
function	that using a wrapper ||| wrapper	count=1
function	shape for input ||| out shape	count=1
function_arg	[function_1] appearing ||| ops elbo [function_1] [arg_2]	count=1
function	dynamic version ||| dynamic	count=1
function	incremental [function] on ||| partial [function]	count=1
class	returns a tensor ||| builder	count=1
function	nchw ||| nhwcto nchw	count=1
function	[function_1] serving_input_receiver_fn ||| [function_1] parsing [function_2]	count=1
function	output values ||| values	count=1
function	shallow [function_2] ||| [function_1] [function_2]	count=2
module	axes of two tensors ||| labeled_tensor python ops	count=1
module	axes of a ||| python ops	count=1
function	training operation ||| train	count=1
arg	sparsetensor into a ||| sp_input default_value validate_indices name	count=1
function	partitioned [function_2] ||| [function_2] [function_1]	count=5
function_arg	[function_1] a loop ||| [function_1] exit [arg_2]	count=1
arg	tensor with the ||| name	count=1
arg	an exit op ||| op	count=1
arg	the losses ||| losses num_present	count=1
function	version ||| valid sample	count=1
function	legend for node-status labels ||| label legend	count=1
function	a summary of the ||| summary	count=1
function_arg	automatically [function_1] [arg_2] ||| [function_1] [arg_2]	count=2
arg	sgv1 (see reroute_inputs) ||| sgv1	count=2
class	this operator ||| linear operator identity	count=1
function	first ||| first	count=4
class	build an input ||| feature column	count=1
module_class	[module_1] table ||| [module_1] mutable dense hash [class_2]	count=1
arg	the given slicing ||| slicing initializer	count=1
function	to initialize ||| init	count=1
function	request [function_2] ||| [function_1] nonexistent [function_2]	count=3
function	are ||| are	count=1
function	and real [function_2] ||| [function_2] [function_1]	count=4
function	[function_1] example proto ||| [function_2] [function_1]	count=2
function	weight and ||| weight and	count=2
arg	the longest ||| m	count=1
module	dimensions of zero ||| contrib linalg python ops	count=1
arg	name should ||| name	count=1
function	[function_1] [function_2] ||| [function_1] partition [function_2]	count=1
function	basic metrics for ||| default binary metrics for	count=1
module	dataframe and ||| python learn dataframe	count=1
function	[function_1] eval step ||| [function_1] [function_2]	count=3
class	outputs the ||| with hash	count=1
class	a tfrecordreader ||| tfrecord reader	count=1
arg	of tensor text ||| tensor	count=1
function	input key to ||| input exprs	count=1
function	sets [function_2] ||| [function_1] [function_2]	count=7
function	boots 3 servers ||| spec propagation three servers one cluster	count=1
function	an example ||| example	count=1
function	a resource variable ||| resource	count=1
arg	a diagonal ||| identity_multiplier diag event_ndims	count=1
class	creates the function ||| defined function	count=1
module	of operators within the ||| contrib	count=1
module	layer ||| contrib rnn python ops	count=1
arg	rank ||| rank	count=6
class	represented dense [class_2] ||| [class_1] [class_2]	count=1
function	validity ||| valid	count=4
function	for a tag sequence ||| sequence	count=1
function_arg	resnet-50 [arg_2] ||| [function_1] [arg_2]	count=1
function	a sparse ||| sparse	count=6
function	tensors ||| source	count=1
class	a ||| test	count=1
function_arg	[function_1] that maps ||| [function_1] tensor [arg_2]	count=3
function	to ||| from	count=1
arg	/ [arg] elementwise ||| x [arg]	count=1
arg	processes ||| tag wall_time step	count=2
module	a sequence of integers ||| keras python keras	count=1
function	sets the [function_2] ||| [function_1] save [function_2]	count=1
function	worker [function_2] ||| [function_1] [function_2]	count=1
function	normalization on ||| normalization	count=1
function	a concat [function_2] ||| [function_1] [function_2]	count=3
module	of dimensions ||| distributions python ops	count=4
function	backend ||| backend	count=1
arg	creates a tensor ||| tensor dtype	count=1
class	optimizer ||| sync replicas optimizer	count=2
arg	equal to rank ||| rank data	count=2
function	otherwise ||| check hooks	count=1
function_arg	[function_1] tensorforestestimator instance ||| [function_1] [arg_2]	count=1
module	data as ||| learn python learn estimators	count=4
function	the sampled softmax ||| sampled softmax	count=2
function	performs dropout ||| variational recurrent dropout	count=1
function	create a dictionary ||| init	count=1
function	from the run ||| for run	count=1
module	tensor ||| contrib keras python keras	count=14
function	list the [function_2] ||| [function_1] node without [function_2]	count=3
function_arg	[function_1] [arg_2] ||| [function_1] to file [arg_2]	count=2
function	running an op ||| run op prebuilt	count=1
class	outputs the corresponding ||| with hash	count=1
arg	based on ||| args weight_collections trainable	count=1
function	with other [function_2] ||| [function_2] [function_1]	count=2
function	predefined collection ||| predefined collection	count=2
function	creates an embedding column ||| embedding column	count=1
function_arg	[function_1] labels ||| [function_1] k [arg_2]	count=3
class	shape values ||| dirichlet	count=1
module	loss using tf ||| python ops losses	count=1
function	add ops to restore ||| add sharded restore ops	count=1
module	core version with ||| learn python learn learn_io	count=1
function	to observations dict for ||| to observations map	count=1
function	iff the jacobian is ||| constant jacobian	count=1
function	op to use ||| get string to hash	count=1
function_arg	construct a [arg_2] ||| [function_1] [arg_2]	count=5
class	a dimension or a ||| tensor	count=1
arg	+ ||| name	count=2
arg	name created ||| name	count=1
function	metadata ||| metadata	count=1
function	updates [function_2] ||| [function_1] [function_2]	count=1
arg	on x ||| x	count=1
function	convert it into ||| to	count=1
function	creates a model for ||| init	count=2
module	model ||| python keras engine	count=5
function	invalidate the cached ||| invalidate transitively outgoing cache	count=1
arg	weights + ||| weights biases name	count=2
module	which gets ||| contrib distributions python ops bijectors	count=1
function	the proto_type ||| proto	count=1
function	[function_1] sparse ||| [function_1] 1d [function_2]	count=1
function	fit function ||| fit	count=1
function	validates bias weight ||| bias only	count=1
function	the recall of the ||| recall	count=1
module	convert ||| python framework	count=1
module	and return indexies ||| contrib learn python learn preprocessing	count=1
class	constructs ||| highway wrapper	count=1
function	[function_1] search commands ||| [function_1] [function_2]	count=1
arg	of the audio_summ ||| audio_summ	count=1
function	switch to the next ||| next	count=1
function	this device is part ||| gputrace device	count=1
class	without extra layers ||| resnet utils test	count=1
class	to ||| upgrade files	count=2
module	next runge-kutta ||| contrib integrate	count=1
function	header for use with ||| header from	count=1
class	inputs ||| analyzer	count=1
function	init and update ||| init	count=1
function	product between two ||| dot product	count=1
arg	permute a tensor's axes ||| axis_order name	count=1
function	clips tensor ||| clip by value	count=1
class	of the model ||| sdca model	count=1
module_class	model's forward [class_2] ||| [module_1] [class_2]	count=1
function_arg	main menu [arg_2] ||| [function_1] [arg_2]	count=5
class	lstm cell ||| grid lstmcell	count=1
function	optimal ||| optimal	count=1
function	monitoredsession for training ||| monitored training	count=1
module	a dataframe with only ||| learn python learn dataframe	count=1
function_arg	[function_1] by boolean_series ||| [arg_2] [function_1]	count=3
function_arg	sequence [arg_2] ||| [function_1] [arg_2]	count=2
function	mix of [function_2] ||| [function_1] [function_2]	count=4
arg	hdf5 file ||| filepath overwrite include_optimizer	count=1
class	tests ||| server test	count=1
function	summaries from ||| simple values from	count=1
module_class	of this graph ||| python framework graph	count=1
function	to the main ||| test request main	count=1
function	slice of ||| slice	count=1
module	integer[s] or tensorshape object[s] ||| contrib seq2seq python	count=1
arg	[arg_1] for collection_name ||| [arg_2] [arg_1]	count=5
function	generate a report of ||| report last	count=1
function	[function_1] zero ||| [function_1] [function_2]	count=3
function	a menuitem from ||| caption to	count=1
arg	x -> ||| x	count=1
function	[function_1] factors ||| [function_2] [function_1]	count=7
function	lr multipliers to ||| lr multipliers	count=2
module	returns ||| ops losses	count=1
function	inputs of the ||| inputs tensor info from	count=1
module	add debug tensor ||| python debug lib	count=1
arg	all steps and returns ||| noutput scope	count=1
module	of name ||| ops	count=1
function	[function_1] metadata information ||| [function_1] [function_2]	count=1
arg	[arg_1] [arg_2] ||| [arg_2] values [arg_1]	count=2
module	next runge-kutta ||| contrib integrate python ops	count=1
class	restore a reader ||| reader base	count=1
function	external ||| external	count=2
function	loop to [function_2] ||| [function_2] [function_1]	count=6
arg	with mean and ||| allow_nan_stats	count=1
arg	row and ||| rows cols num_shards	count=1
module	a given directory ||| contrib learn python learn utils	count=1
arg	a new exponentialmovingaverage object ||| decay num_updates zero_debias name	count=1
function	[function_1] static shapes ||| [function_1] [function_2]	count=4
arg	loaded from ||| graph output_dir checkpoint_path eval_dict	count=1
class	a ||| tokenizer	count=1
function	python object for a ||| object	count=1
arg	that ||| default_name	count=2
module	transforms each ||| python keras	count=1
function	should be allowed ||| keys should	count=1
class	of a tensor ||| tensor	count=1
function	unique output tensors ||| get output ts	count=1
class	compute ||| sync replicas optimizer	count=1
function_arg	[function_1] dynamicrnnestimator ||| [function_1] [arg_2]	count=1
function	[function_1] integer ||| [function_2] [function_1]	count=4
function	the device of a ||| device	count=1
module	a sequence ||| keras python	count=1
function	attribute ||| attribute at index	count=2
class	embedding [class] to ||| projector plugin [class]	count=1
arg	of a subgraph view ||| sgv	count=1
function	the tensors linked to ||| filter ts from regex	count=1
module	creates ||| python training	count=2
function	gets an existing model ||| model	count=1
function	column [function_2] ||| [function_2] and sparse [function_1]	count=1
module	_guideref from the ||| tools	count=1
function	trace information for ||| store trace	count=1
arg	top-k ||| top_k_predictions	count=1
module	get the names ||| lib	count=1
class	to run the enqueue ||| runner	count=1
function	with ||| test watching variable	count=1
arg	a single tensor to ||| tensor	count=2
function	resize [function_2] ||| [function_2] [function_1]	count=4
arg	protocol ||| protocol	count=1
function	gradients by the ||| gradient norms	count=2
arg	alongside the specified axis ||| axis keepdims	count=4
function_arg	log loss [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	[function_1] concatenates n ||| [function_1] [arg_2]	count=1
function	the manual variable initialization ||| manual variable initialization	count=1
arg	col ||| project_row projection_weights	count=1
class	partition graphs ||| debug dump dir	count=1
class	merges ||| beam search decoder	count=1
function	condition based on ||| condition	count=1
arg	precision@k ||| labels predictions_idx class_id weights	count=1
module	cli see the ||| cli	count=2
function	[function_1] types ||| [function_1] [function_2]	count=1
module	with training ||| learn	count=3
arg	term ||| predictions labels weights epsilon	count=1
function	estimate data ||| estimate data	count=1
function	features and [function_2] ||| [function_1] with [function_2]	count=3
module	matrix of ||| python ops	count=1
arg	sequence ||| encoder_inputs decoder_inputs encoder_cell decoder_cell	count=1
function	raises ||| hooks	count=1
arg	be visualized by the ||| values metadata thumbnails	count=1
module	decode_jpeg, and ||| ops	count=1
function	with bucketized [function_2] ||| [function_1] [function_2]	count=2
function	forwards ||| switch	count=1
function_arg	mean [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	sparsetensordensematmul [arg_2] ||| [function_1] [arg_2]	count=1
function	a header for ||| get header	count=1
function	true if ||| is dense	count=1
function	a _definedfunction initialized from ||| from	count=1
function	[function_1] [function_2] sparse ||| [function_2] [function_1]	count=8
function	a tensor of ||| from tensor	count=1
function	all possible [function_2] ||| [function_2] [function_1]	count=3
arg	in given output directory ||| output_dir dictionary	count=1
function	that have no outputs ||| no outputs	count=1
module	a keras ||| python keras utils	count=1
module	component of ||| python ops	count=5
arg	of each subdataframe ||| df start	count=1
function	plugins that ||| plugins	count=1
arg	y elementwise ||| y	count=1
module	that wraps a ||| python learn	count=1
module	that ||| contrib learn python learn	count=1
function	the default image data ||| image data	count=1
function	based on this ||| base	count=1
function	the input to ||| input	count=1
function	calculates false positives for ||| sparse false positive	count=1
function	n-d convolution ||| convolution	count=1
function	[function] previously ||| [function]	count=1
function	has shut down ||| join	count=1
module	string ||| tensorboard plugins text	count=1
module	invoked during construction of ||| python debug wrappers	count=1
function	sparse features and ||| sdca optimizer sparse features	count=1
module	for proper ||| python ops	count=1
function	a given plugin ||| plugin	count=1
function	a smaller ||| shrink csv	count=1
arg	state saving sequence ||| cell	count=1
function	string_to_hash_bucket op to use ||| get string to hash	count=1
function	broadcasted static [function_2] ||| [function_1] [function_2]	count=1
class	by this operator to ||| linear operator scaled identity	count=1
module	creates training and ||| contrib learn python learn ops	count=1
module	of equations with ||| ops	count=1
function	step and ||| step	count=1
arg	graph_def into the current ||| graph_def	count=1
arg	the cells ||| conf cells	count=1
function	names of the nodes ||| names	count=1
function_arg	[function_1] baseestimator instance ||| [arg_2] [function_1]	count=1
class	of a tree ||| tree graphs	count=1
arg	lines ||| lines	count=1
function	ops that ||| from regex	count=1
function	can be used to ||| lengths to	count=1
class	file to disk ||| summary writer	count=1
module_class	[module_1] basic ||| [module_1] [class_2]	count=2
function_arg	replicas [arg_2] ||| [function_1] [arg_2]	count=1
function	nextiteration and [function_2] ||| [function_1] [function_2]	count=2
module	_guideref from the files ||| tools	count=1
function_arg	[function_1] neural network ||| [function_1] [arg_2]	count=4
function	regex [function_2] ||| [function_1] [function_2]	count=4
arg	to dense labels ||| labels	count=1
function	[function_1] [function_2] ||| [function_2] column [function_1]	count=18
function	[function_1] lists ||| [function_2] [function_1]	count=1
function	priors ||| priors	count=1
function	node and ||| node	count=1
function	an example proto ||| to example proto	count=1
class	condcontext object ||| cond context	count=1
class	instantiates the exp ||| exp	count=1
class	any ||| analyzer clicontrol dep	count=1
module	all ||| estimator	count=1
function_arg	[function_1] op ||| [function_1] grad shape [arg_2]	count=1
module	values then return tensor ||| python	count=1
function	have the same ||| same	count=1
function	[function_1] attention ||| [function_1] [function_2]	count=1
function	as tf ||| tf	count=1
function	and real valued ||| real valued linear	count=1
function	a new [function_2] ||| [function_2] [function_1]	count=7
arg	diagonal ||| diag event_ndims	count=1
arg	axis in x ||| x axis x_ndims	count=3
arg	val to the ||| val	count=1
function	dict symbol name -> ||| build	count=1
function_arg	[function_1] of side_effects ||| [function_1] tensor [arg_2]	count=2
module	mapping of name ||| framework python ops	count=1
module	batch of ||| distributions python ops	count=1
function	the ||| caption to item	count=1
function_arg	[function_1] for optimizer ||| [arg_2] [function_1]	count=2
class	vocabulary ||| processor	count=1
function	[function_1] [function_2] ||| [function_1] raw [function_2]	count=1
function	vector x [function_2] ||| [function_1] [function_2]	count=6
arg	^ [arg] = ||| x [arg]	count=1
arg	sgv0 [arg_2] ||| [arg_2] [arg_1]	count=5
arg	base_type to ||| base_type conversion_func	count=1
function	a list ||| rich line list	count=1
function	otherwise ||| type	count=1
function	values of [function_2] ||| [function_1] [function_2]	count=4
function	float arrays ||| array	count=1
function	[function_1] node ||| [function_1] partition [function_2]	count=1
module	linear ||| python ops	count=1
function	into a dense ||| dense	count=1
function	[function] element ||| as [function]	count=2
function_arg	[function_1] dnnlinearcombinedregressor instance ||| [arg_2] [function_1]	count=1
arg	at full_path ||| full_path	count=1
arg	fn_else() based on the ||| fn_then fn_else	count=1
function	op [function_2] ||| [function_2] col update [function_1]	count=1
function	euclidean distance between each ||| euclidean distance	count=1
function	splits the tensor ||| split	count=1
function_arg	[function_1] tensorflow ||| [arg_2] [function_1]	count=3
function	column is empty ||| column empty	count=3
arg	to create batches ||| batch_size capacity enqueue_many	count=1
function	then return tensor ||| maybe assert valid sample	count=1
class	integers ||| tokenizer	count=1
module	given number of the ||| contrib learn python learn	count=1
function	the test [function_2] ||| [function_2] [function_1]	count=2
function	into a placeholder tensor ||| with placeholder	count=1
function	flow id ||| flow id	count=2
function	in renyi divergence ||| renyi	count=1
function	the device on ||| device	count=1
function_arg	input to [arg_2] ||| [arg_2] [function_1]	count=1
module	non-reference dtype ||| python	count=1
function	[function_1] a directory ||| [function_1] [function_2]	count=3
function	proper shape values ||| maybe assert valid	count=1
function	computes the sum of ||| sparse reduce sum	count=1
class	a quantized distribution ||| quantized	count=1
function	mean of ||| mean	count=3
arg	the path ||| path	count=1
function	correction and update values ||| correction and	count=1
function	score ||| get score	count=3
class	defines ||| gmm algorithm	count=1
module_class	a new coordinator ||| python training coordinator	count=1
arg	for the given key ||| key	count=1
function	histograms ||| histograms	count=5
function	[function_1] tensor that ||| [function_2] [function_1]	count=4
function	for multi value models ||| multi value	count=2
function_arg	output predictions [arg_2] ||| [function_1] [arg_2]	count=2
module	a dict of ||| ops	count=1
function	via a ||| via	count=2
function	if it is ||| if	count=1
class	debug tensor ||| debug	count=2
arg	[arg_1] interval values ||| [arg_2] [arg_1]	count=1
function	true positives ||| streaming sparse true positive	count=1
function	assigns ||| assign	count=1
function	[function_1] while loop ||| [function_2] [function_1]	count=11
function	numpy printoption from ||| numpy printoption	count=1
function	arg_scope ||| arg	count=1
function	sparse column ||| sparse int column	count=2
module	multiply ||| layers python layers	count=1
arg	nn sigmoid_cross_entropy_with_logits ||| logits multi_class_labels weights label_smoothing	count=1
arg	specified axes ||| x axes	count=1
function	this handle ||| resource handle	count=1
function	[function_1] extraction ||| [function_1] [function_2]	count=2
function	[function_1] to run() ||| [function_2] [function_1]	count=1
class	returns a tensor ||| lazy	count=1
function	tf examples ||| parse feature columns from examples	count=1
function	adds a [function_2] ||| [function_2] [function_1]	count=6
function	writes graph_def to ||| write graph	count=1
arg	e g images ||| pool_size strides padding	count=2
class	run ||| norm benchmark	count=1
function_arg	[function_1] each subdataframe ||| [function_1] [arg_2]	count=5
module	as self _value ||| contrib bayesflow python	count=1
function	the list of unique ||| unique	count=1
function	[function_1] that is ||| [function_2] [function_1]	count=2
arg	layer [arg_2] ||| [arg_1] [arg_2]	count=2
class	value should [class_2] ||| [class_2] [class_1]	count=1
module	a dataframe into ||| learn python learn dataframe	count=1
function	values then return tensor ||| maybe	count=1
function	other columns ||| and other columns	count=2
function	condition based on the ||| pick scalar condition	count=1
module	of d ||| python ops	count=1
module	cell ||| contrib rnn	count=9
function	variables updated in ||| updated	count=1
class	to run to perform ||| composable model	count=1
function	creates generic [function_2] ||| [function_1] [function_2]	count=2
function	constructs a sprite ||| sprite	count=1
function	used to normalize ||| normalizer fn	count=1
module_class	[module_1] [class_2] ||| [module_1] sparse [class_2]	count=2
function_arg	[function_1] of session ||| [arg_2] [function_1]	count=1
module_class	in this [class_2] ||| [module_1] sparse [class_2]	count=1
function	a list ||| list	count=7
function_arg	to values [arg_2] ||| [function_1] var_names_to_values [arg_2]	count=1
arg	sequence to sequence ||| decoder_inputs encoder_cell decoder_cell	count=1
module	dataset from ||| learn datasets	count=2
arg	how often predictions ||| predictions	count=1
function	weight and [function_2] ||| [function_1] [function_2]	count=4
function	unary [function_2] ||| [function_2] [function_1]	count=2
function	decodes the ||| decode	count=2
function	logistic regression signature ||| logistic regression signature	count=2
module_class	[module_1] operator ||| [module_1] [class_2]	count=10
function	a biasadd ||| bias add	count=1
arg	start a looperthread that ||| timer_interval_secs target args	count=1
arg	values ||| values dimension name	count=1
arg	the given threshold ||| threshold weights	count=1
function	instantiates the vgg16 ||| vgg16	count=1
function	cross entropy ||| cross entropy with	count=2
class	ps task index for ||| round robin strategy	count=1
arg	necessary to compute ||| layer node_index	count=1
function	for the while loop ||| while	count=1
module	a sequence ||| preprocessing	count=1
function	true positives for ||| true positive at k	count=2
function	a fixed ||| fixed	count=1
module	name ||| python framework	count=2
function	make_linear_model() ||| make linear model	count=1
function	jacobian is not a ||| jacobian	count=1
function	tensor ||| dense tensor	count=3
function	a numpy matrix ||| texts to matrix	count=1
module	of a tensor ||| keras	count=1
arg	of basedebugwrappersession ||| sess thread_name_filter	count=1
class	for an lstm cell ||| input forget gate lstmcell	count=1
function	into summary file ||| summary	count=1
function	summary op either from ||| summary op	count=1
function	of status labels ||| status labels	count=2
function	op tensor ||| op tensor	count=2
function	provided have invalid ||| invalid	count=2
function_arg	log softmax [arg_2] ||| [function_1] [arg_2]	count=1
function	the values for ||| output values	count=1
function	[function_1] bprop step ||| [function_2] [function_1]	count=1
module	systems of ||| python ops	count=2
module	each ||| python keras preprocessing	count=2
class	for the variable ||| variable	count=1
function	value for the ||| value	count=1
function	using invalid regex ||| invalid regex	count=1
function_arg	assert the [arg_2] ||| [function_1] less equal [arg_2]	count=1
function	for input ||| input value	count=2
arg	steps and returns only ||| noutput scope	count=1
module	version ||| python ops	count=1
function	square root ||| sqrt	count=2
class	the queue in case ||| queue	count=1
class	exception ||| tensor shape	count=2
function	with hashed ||| with	count=1
function	a device ||| device function	count=1
function	[function_1] files with ||| [function_1] [function_2]	count=5
function	up the node's statistics ||| stats for node	count=1
function	into a placeholder ||| t with placeholder	count=1
function	a sequence of ||| sequence	count=1
function	importance ||| expectation importance	count=1
function	connect the previously ||| connect	count=1
function	verifies the values in ||| output values	count=2
function	a tensor [function_2] ||| [function_2] table [function_1]	count=1
function	of a deconv layer ||| deconv	count=1
function	file paths ||| file paths	count=2
arg	oldpath [arg_2] ||| [arg_2] [arg_1]	count=1
arg	apply conv + ||| x filters	count=1
class	produced or none ||| slices	count=1
arg	imports ||| input_map return_elements name	count=1
function	[function_1] the parameters ||| [function_1] [function_2]	count=2
function	are sessionrunhook raises typeerror ||| check	count=1
function	squared [function_2] ||| [function_2] [function_1]	count=6
function	the python object for ||| to object	count=1
class	that will sample ||| feeder	count=1
class	registry in ||| summary plugin asset	count=1
arg	shallow_tree ||| shallow_tree	count=1
function	while loop ||| while loop	count=2
module	returns a ||| python feature_column	count=2
function	concatenation has [function_2] ||| [function_2] [function_1]	count=2
arg	with the given dtype ||| name shape dtype num_shards	count=1
function	adds a batch ||| batch	count=1
function	with sdcaoptimizer ||| sdca	count=2
module	a dataframe ||| learn python learn dataframe	count=1
arg	precision@k ||| predictions_idx k class_id	count=1
function	tensors ||| tensors	count=6
function	gradients of ||| gradients	count=1
function	[function_1] for full ||| [function_2] batch [function_1]	count=2
class	multivariate normal distribution ||| multivariate normal diag plus	count=1
function_arg	[function_1] screen output ||| [function_1] [arg_2]	count=3
function	step true ||| streaming sparse true	count=1
arg	cell with added input ||| cell input_keep_prob output_keep_prob state_keep_prob	count=1
module	of layers by ||| layers python layers	count=1
function	function for list_profile ||| list profile	count=1
arg	inputs starting from ||| inputs initial_cell_state initial_output dtype	count=2
arg	initialized to the given ||| primary	count=1
function	numpy arrays ||| array	count=1
function	[function_1] handle ||| [function_1] [function_2]	count=7
function	meta [function_1] [function_2] it to ||| [function_2] [function_1] meta_graph_def	count=1
arg	kicks off threads which ||| workers max_q_size wait_time	count=1
function	individual audio clip ||| individual audio	count=1
function	make sure the shape ||| ts compatibility	count=1
function_arg	least [arg_2] ||| [arg_2] [function_1]	count=1
function	inputs to [function_2] ||| [function_2] [function_1]	count=1
arg	performs a ||| rg row_axis col_axis	count=1
function_arg	a hparamdef [arg_2] ||| [function_1] [arg_2]	count=1
function	static valueerror with ||| assert static	count=1
function	predictions is tensor not ||| predictions tensor	count=1
function	list ||| list inputs	count=1
module	dictionary ||| learn	count=2
function	centered [function_2] ||| [function_2] [function_1]	count=5
module	function ||| contrib factorization python ops	count=1
arg	estimator ||| estimator	count=1
arg	to create a ||| name	count=1
function	returns the directory ||| get	count=2
function	to a richtextlines ||| text lines from	count=1
function_arg	[function_1] slice non-zero ||| [function_1] tf sparse [arg_2]	count=3
arg	tensor to the ||| name	count=1
function_arg	attention [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] iff ||| [function_2] [function_1]	count=3
module	tensor for the ||| python feature_column	count=1
function	count ||| count params	count=1
class	of metadata values ||| embedding metadata	count=1
module	the vocabulary dictionary ||| python learn preprocessing	count=1
function_arg	function details [arg_2] ||| [arg_2] [function_1]	count=3
function	kwargs that arg_scope can ||| arg scoped arguments	count=1
function	[function_1] range are ||| [function_2] [function_1]	count=10
function	status labels ||| status labels	count=2
arg	add its inputs to ||| inputs state	count=2
function	the end [function_2] ||| [function_1] [function_2]	count=2
arg	y_np ||| x_np y_np	count=1
module	command prefix but ||| python debug cli	count=1
function	a bad way ||| construction pollution	count=1
module	shape values then ||| ops	count=1
function	ops with ||| test watching	count=1
module	internal vocabulary based ||| contrib keras python keras preprocessing	count=1
function	of shapes for ||| shapes	count=2
function	ops that ||| from	count=1
module	this object ||| seq2seq python ops	count=1
function	tensor to ||| parse data tensor	count=1
function	a shape ||| shape with rank at least	count=1
function	average size of ||| average size	count=2
module	a cross-entropy loss using ||| ops losses	count=1
function	occurs in graph runtime ||| debugging during op	count=1
function	line in ||| line	count=2
function	[function_1] node with ||| [function_1] [function_2]	count=12
function	slot [function_2] ||| [function_2] [function_1] primary name dtype colocate_with_primary	count=2
function	foldl ||| foldl	count=1
module	and runs ||| python learn dataframe	count=1
module	component of a ||| python ops	count=5
function	mean squared error ||| streaming mean squared error	count=1
module	if ||| framework python	count=1
function	checks [function_2] ||| [function_2] [function_1]	count=4
arg	featurecolumns ||| feature_columns exports_to_keep	count=1
function	in the [function_2] ||| [function_2] [function_1]	count=1
class	the decoder ||| data decoder	count=1
function	[function_1] index from ||| [function_2] [function_1]	count=1
class	created by this class ||| distribution shape	count=1
arg	given sensitivity ||| labels sensitivity weights	count=1
module	prefetech ||| slim data	count=1
function	callable ||| callable	count=1
module	a 1 ||| contrib distributions python ops	count=3
function	the variables in ||| variables	count=1
function	op to [function_2] ||| [function_2] col update [function_1]	count=1
function_arg	[function_1] for storing ||| [function_1] [arg_2]	count=3
function_arg	[function_1] through the ||| [function_1] [arg_2]	count=4
arg	[arg] nearest ||| x [arg]	count=2
module	be found in ||| tensorboard backend event_processing	count=1
function	and stores trace ||| store trace info	count=1
function	the type ||| type	count=1
function	returns input [function_2] ||| [function_2] [function_1]	count=2
function	then return ||| maybe assert valid	count=1
function	all inputs of the ||| inputs tensor info from meta graph	count=1
arg	additional feeds and fetches ||| fetches	count=1
function	subset of columns ||| select columns	count=3
module	+ ||| distributions python ops	count=1
arg	tree representing ||| input_type	count=1
function_arg	attribute (e [arg_2] ||| [function_1] [arg_2]	count=3
function	containing state tensors ||| state	count=1
arg	based on the ||| args weight_collections trainable	count=1
function	are recorded in command ||| command	count=1
function	computes the mean squared ||| streaming mean squared	count=1
function	the sparsetensordensematmul ||| mat mul grad	count=1
module	initialize a batch of ||| ops distributions	count=3
function_arg	full batch [arg_2] ||| [function_1] op [arg_2]	count=1
module	of ||| hybrid python ops	count=3
function	with integer ||| with integer weighted sparse column	count=1
function	a directory recursively ||| directory	count=1
function	a while ||| while	count=1
arg	lb [arg] if they ||| [arg]	count=1
module	values ||| python tools	count=1
module	for labeled ||| labeled_tensor python	count=2
class	in the bucket ||| reservoir bucket	count=1
function_arg	[function_1] a run ||| [function_1] [arg_2]	count=5
function	and run a tensorflow ||| and run	count=1
arg	the screen output from ||| output node_name enable_list_tensors enable_node_info	count=1
function_arg	util to [arg_2] ||| [arg_2] [function_1]	count=1
arg	elements across dimensions of ||| input_tensor axis keep_dims name	count=7
arg	in given output ||| output_dir	count=1
arg	a kernellinearclassifier estimator object ||| n_classes weight_column_name	count=1
function	implementation for forward public ||| forward	count=1
arg	details ||| path parent children	count=1
function	predictions for single value ||| single value predictions	count=1
module	update ||| ops distributions	count=1
function	to use based ||| to hash bucket fn	count=1
arg	with experiment using featurecolumns ||| feature_columns exports_to_keep	count=1
function	for a rank irfft ||| irfft	count=1
function	the inner cell ||| cell	count=1
function_arg	[function_1] resource_list ||| [function_1] [arg_2]	count=1
function	indices represented as ||| indices	count=2
function	new values from a ||| from map	count=1
function	outside the [0 n_classes) ||| at k5 some out of	count=2
function	[function_1] directory recursively ||| [function_1] [function_2]	count=3
function	rank in ||| rank in	count=2
class	a declare ||| declare	count=1
function	log p x ||| log joint	count=1
function	for model_fn that returns ||| with model fn ops	count=1
function_arg	[function_1] at shortcut ||| [function_1] block [arg_2]	count=3
function	symbol name ||| build guide	count=1
function	the vocabulary ||| fit transform	count=1
function_arg	[function_1] categoricalprocessor instance ||| [arg_2] [function_1]	count=1
function	2d convolution [function_2] ||| [function_2] [function_1]	count=2
function	, but use as_str ||| any	count=1
arg	and parse example protos ||| file_pattern batch_size features	count=1
function	transforms each ||| to sequences	count=1
module	resample ||| contrib training python training	count=1
arg	divides [arg] / ||| [arg] y	count=1
arg	files given a ||| has_header	count=1
function	update ||| update ops	count=2
arg	computes the percentage ||| weights name	count=1
class	node ||| dump dir	count=1
function	legend for ||| status label legend	count=1
function_arg	object's docstring [arg_2] ||| [arg_2] [function_1]	count=1
function	getdoc ||| getdoc	count=1
arg	given features ||| input_fn predict_keys	count=1
function	computes the recall ||| recall	count=1
function	[function_1] labels ||| [function_1] average precision [function_2]	count=4
function	function that computes ||| function	count=1
function	[function_1] output tensors ||| [function_2] [function_1]	count=2
module	maybe ||| python framework	count=1
module	previous output tensors from ||| contrib grid_rnn python	count=1
function	restore_variable_values() [function_1] [function_2] ||| [function_1] variable [function_2]	count=8
function	run the ui ||| run ui	count=2
class	these parameters or ||| store	count=1
function	to a contatenated ||| to	count=1
function	for out-of-order ||| for out of order	count=1
function	of basic metrics for ||| binary metrics for	count=1
function	tf placeholder for the ||| make placeholder from dtype and	count=1
function	the proto_type for ||| collection proto	count=1
function	run() calls ||| run end	count=1
arg	subscribes a [arg_2] ||| [arg_2] [arg_1]	count=10
module	a ||| python feature_column	count=2
class	outcome (vs 0) ||| negative binomial	count=2
function	rank ||| rank internal	count=1
function	of its ||| name from	count=1
class	perform ||| avg test	count=2
function	from a [function_2] ||| [function_2] [function_1]	count=9
arg	value in checkpoint's tensor ||| file_pattern tensor_name slice_spec	count=1
class	tests ||| recall at ktest	count=1
function	sum of ||| add	count=1
function_arg	[function_1] [arg_2] ||| [function_1] queue [arg_2]	count=3
module	returns ||| layers	count=8
module	loaded module ||| tensor_forest hybrid	count=1
function	with respect ||| precision at k	count=2
arg	from predictions ||| predictions num_classes	count=1
class	for this variable ||| variable	count=1
module	a 1 ||| ops distributions	count=1
function_arg	float graph [arg_2] ||| [function_1] [arg_2]	count=4
function	[function_1] file paths ||| [function_1] tensor [function_2]	count=1
function_arg	auc [arg_2] ||| [function_1] [arg_2]	count=1
arg	of all categories in ||| unused_y	count=1
module	linked to ops ||| graph_editor	count=1
module	we can do ||| contrib layers python layers	count=1
function	bprop ||| bprop	count=1
function	python object for ||| to object	count=1
arg	new_rank ||| inputs new_rank	count=1
arg	determine whether pending inputs ||| pending	count=1
function	other columns ||| other columns	count=1
function	converts ||| convert row to	count=1
module	of this ||| python framework	count=18
function	report a [function_2] ||| [function_2] [function_1]	count=1
module	into a dict of ||| python ops	count=1
arg	determines whether a path ||| filename	count=1
module	value of ||| keras	count=1
function	signaturedef proto ||| signature def	count=1
module	flip ||| python ops	count=5
arg	a linearoperatorfullmatrix ||| matrix is_non_singular is_self_adjoint is_positive_definite	count=1
function	queue batch and ||| keyed batch features shared queue	count=1
function	device ||| device	count=10
module	or none ||| python framework	count=1
module	the number of input ||| python	count=1
function	are sessionrunhook ||| hooks	count=1
class	check ||| event accumulator	count=1
class	the history ||| curses navigation history	count=1
class	client ||| history	count=1
module	given ||| contrib learn python learn preprocessing	count=1
function	for planes ||| hot planes	count=1
module	can do ||| contrib layers python layers	count=1
function	a markdown ||| markdown	count=1
function	modulus [function_2] ||| [function_2] [function_1]	count=1
function	gradient for ||| bias add grad grad	count=1
class	the ast ||| tensor flow call visitor	count=1
function	shape of batch ||| batch shape	count=1
function	tensors linked ||| from	count=1
arg	parameter rate ||| rate validate_args allow_nan_stats name	count=1
module	this ||| python ops	count=15
arg	a run and tag ||| run tag	count=4
function	a placeholder ||| with placeholder	count=1
function	equal ||| equal	count=1
module	batch version of ||| contrib distributions	count=1
function_arg	[function_1] object itself ||| [arg_2] [function_1]	count=1
arg	a lower triangular ||| identity_multiplier diag tril	count=1
function	raised when all ||| all	count=3
function_arg	a sequence by ||| to sequence images	count=1
module	element-wise max of ||| python ops	count=1
function	linked to ||| from	count=1
arg	builder based on featurecolumns ||| columns_to_tensors feature_columns num_outputs weight_collections	count=1
module	write ||| tools git	count=1
class	tensorflow [class_2] ||| [class_2] [class_1]	count=6
function	binary ||| binary input	count=1
function	[function_1] error between ||| [function_2] [function_1]	count=17
class	returns a tensorshape ||| shape	count=1
function_arg	sum of [arg_2] ||| [arg_2] [function_1]	count=5
function	on a tensor ||| tensor	count=1
function	node to compute ||| compute	count=1
module	the cell ||| rnn python ops	count=4
arg	its inputs ||| inputs	count=2
arg	ids in ||| ids partition_strategy	count=1
class	to test ||| test	count=1
function	state for ||| flow state	count=1
function	intersection of ||| intersection ops	count=2
function	kernels have ||| kernels	count=1
module	[module_1] of ||| [module_2] [module_1]	count=16
function	of tensor [function_2] ||| [function_2] [function_1]	count=3
arg	from graph, under ||| org_instance graph	count=1
function	and real ||| optimizer real	count=1
function	a unary operation for ||| unary op	count=1
arg	between logits ||| logits name	count=1
arg	gradient-based optimizer ||| features labels mode params	count=1
function	possibly add asserts ||| possibly add asserts	count=6
class	single ||| to event transformer	count=1
module	returns ||| factorization	count=2
module	can do ||| layers python layers	count=1
function	given python file for ||| file	count=1
arg	propagates x gradients ||| x y	count=1
function	or sparsetensor ||| sparse	count=1
function_arg	[function_1] given sensitivity ||| [arg_2] [function_1]	count=2
function	queue batch ||| batch examples	count=1
arg	compares metagraphdefs [arg] unit ||| tester [arg]	count=1
arg	[arg_1] specified dimension ||| [arg_2] [arg_1]	count=2
arg	data feeder ||| x_shape y_shape n_classes	count=1
function	[function_1] as_iterable=true ||| [function_1] [function_2]	count=3
function	[function_1] categorical ||| [function_2] [function_1]	count=3
function_arg	the root [arg_2] ||| [arg_2] [function_1]	count=1
module	symbol ||| tools docs	count=2
function_arg	determines [function_1] [arg_2] input length ||| python keras utils conv [function_1] length [arg_2]	count=1
module	of int or ||| python ops	count=1
function	[function_1] [function_2] configuration ||| [function_1] [function_2] column_name vocabulary_file num_oov_buckets vocab_size	count=1
function	new dask dataframe ||| dask	count=1
arg	of a 4d ||| data_format	count=1
class	values ||| indexed	count=1
arg	of a sparsetensor ||| sp_input	count=1
arg	actual ||| actual	count=1
class	perform a ||| composable model	count=1
class	metadata information [class] ||| [class]	count=1
function	[function_1] outputs of ||| [function_1] [function_2]	count=1
function	to the multiply layer ||| multiply	count=1
arg	sensitivity ||| sensitivity	count=1
class	tests ||| dnnestimator test	count=1
class	that event ||| event accumulator	count=1
module_class	[module_1] declared dropouts ||| [class_2] [module_1]	count=1
class	indexedslices ||| indexed slices	count=1
arg	specified shape ||| shape	count=1
function	output for valid ||| output	count=1
function_arg	control inputs [arg_2] ||| [arg_2] [function_1]	count=1
function	np matrix [function_2] ||| [function_2] [function_1]	count=2
arg	microbenchmark to measure ||| iters	count=1
function	-> _guideref from ||| guide	count=1
function	[function_1] a numpy ||| [function_2] [function_1]	count=1
module	debug dump from the ||| debug	count=1
module	the inputs and ||| graph_editor	count=1
class	event discards ||| mocking event	count=1
module	model ||| estimators	count=1
function	parameter ||| param	count=1
function	fine [function] integer ||| test integer [function]	count=1
function	returns the input tensor ||| input tensor	count=1
module	representing a ||| python	count=1
function	unary ||| register unary	count=1
function_arg	[function_1] event generator ||| [function_1] [arg_2]	count=3
module	optimizer ||| python training	count=1
function	probably [function_2] ||| [function_2] [function_1]	count=2
function	of tensors to ||| tensors to	count=2
module	the mnist dataset ||| keras python keras datasets	count=1
function	mean relative [function_2] ||| [function_2] [function_1]	count=2
function	the processor of ||| processor	count=1
function	is ||| is diag	count=1
arg	[arg_1] op ||| [arg_2] [arg_1]	count=4
class	tests ||| convolution test	count=1
module	batched ||| contrib training python training	count=1
function	graph from ||| infer	count=1
arg	a graph element ||| element	count=1
class	one output tensor ||| output	count=1
module	sure ||| tools	count=1
function	stores trace information for ||| trace	count=1
function	a stack ||| stack	count=1
function	return tensor version ||| maybe assert	count=1
class	the file leaves ||| file	count=1
function_arg	extend the [arg_2] ||| [arg_2] [function_1]	count=2
function	for each forward tensor ||| forward	count=1
function	floatint point number ||| lf	count=1
function	computes the shape ||| shape	count=1
function	[function_1] time ||| [function_2] [function_1]	count=1
module	to form the ||| contrib factorization python ops	count=1
function_arg	[function_1] y ||| [function_1] x [arg_2]	count=5
function	operations to read queue ||| read	count=2
module_class	[module_1] normal ||| [module_1] multivariate [class_2]	count=3
arg	constructor of richtextlines ||| lines font_attr_segs annotations	count=1
function	extract the ||| extract	count=3
class	[class_1] lstm cell ||| [class_2] [class_1]	count=2
function	add one ||| add	count=1
arg	dictionary and return ||| x	count=1
function	constructs a sprite image ||| make sprite image	count=1
function	should be allowed using ||| keys should	count=1
class	multivariate normal distribution ||| multivariate normal linear	count=1
function	map the ||| map	count=1
function	unary ||| register unary op	count=2
function_arg	[function_1] value to ||| [function_1] tensor [arg_2]	count=3
arg	nn softmax_cross_entropy_with_logits ||| onehot_labels weights	count=1
function	to use ||| string to hash bucket	count=1
class	for tests ||| server test	count=1
class	table outputs ||| hash table	count=2
module	of a 1 ||| python ops	count=4
function	total [function_2] ||| [function_1] [function_2]	count=6
module	for ||| distributions	count=1
function	fingerprint concatenation has collisions ||| output v1 has collision	count=1
arg	a string record ||| record	count=1
function	for second test function ||| test function	count=1
module	carlo estimate of the ||| contrib bayesflow python ops	count=1
arg	replace child_name's old definition ||| child_name	count=1
function_arg	gradient [arg_2] ||| [function_1] op [arg_2]	count=1
function	a graph ||| graph def	count=1
arg	queues batches and ||| file_pattern batch_size features	count=1
module	to make sure we ||| tools compatibility	count=1
module	and returns only the ||| python	count=1
arg	sample ||| sample	count=1
function	starts a thread to ||| start reloading	count=1
module	chief ||| python training	count=1
class	enqueue op in a ||| runner	count=1
function_arg	[function_1] of ||| [arg_2] [function_1]	count=5
module	a shape representing a ||| framework	count=1
function	[function_1] inputs ||| [function_2] [function_1]	count=8
module	dtype based on this ||| framework	count=1
function_arg	[function_1] given path ||| [arg_2] [function_1]	count=1
function	returns trainer [function_2] ||| [function_2] [function_1]	count=2
function	new graph which ||| graph replace	count=2
function	helper method to extend ||| extend	count=1
function	rnn sequence ||| rnn seq2seq	count=1
function_arg	[function_1] state-saving ||| [function_1] rnn [arg_2]	count=4
function	[function_1] of higher ||| [function_1] with [function_2]	count=2
function	an rnn ||| rnn	count=1
module	returns a tensor ||| python learn dataframe	count=1
function	to colocate with ||| maybe colocate with	count=2
function	functions [function_2] ||| [function_2] [function_1]	count=2
function	and an input_fn ||| and input fn	count=2
module	a cross-entropy loss using ||| python ops losses	count=1
function	recursively ||| recursive	count=1
module	implements ||| contrib specs python	count=1
arg	yields batches ||| session start_queues	count=1
function_arg	normalization on [arg_2] ||| [function_1] [arg_2]	count=6
function	the fetches [function_2] ||| [function_1] [function_2]	count=3
function	less than ||| below	count=1
function	path to the ||| path	count=1
function	fake bias ||| bias	count=1
arg	grad along ||| grad	count=1
function	all the data attributes ||| with all	count=1
function	the initializer ||| initializer	count=1
module	and return indexies of ||| contrib learn python	count=1
module	returns ||| python framework	count=11
function	provides a scope that ||| scope	count=1
arg	true if obj ||| obj	count=1
function	code ||| mul or div grad	count=1
module	shape representing ||| python	count=1
function_arg	structure [arg_2] ||| [arg_2] [function_1]	count=1
arg	input_tensors) from ||| attr_name	count=1
function_arg	[function_1] the graph ||| [function_1] [arg_2]	count=2
module	'graph and session and ||| learn python learn dataframe	count=1
arg	hints from op1 ||| op1	count=1
function	proper ||| valid	count=1
function	an ||| run	count=1
function	creates the eval ||| create eval	count=3
function	for ||| collection proto type	count=1
function	op to use based ||| get string to hash bucket fn	count=1
module	numpy image tensor ||| keras preprocessing	count=3
function	the input ||| inputs	count=1
function	of op ||| op	count=1
function	construct a devicewrapper ||| init	count=1
class	batch and ||| batch	count=2
module	symbol name -> _guideref ||| tools	count=1
function	with vocabulary [function_2] ||| [function_2] [function_1]	count=1
function	dtype of ||| dtype	count=3
arg	example protos ||| file_pattern batch_size reader	count=2
function	checkpoint filenames and timestamps ||| last checkpoints with	count=1
function_arg	[function_1] variable ||| [arg_2] [function_1]	count=1
function_arg	the given [arg_2] ||| [function_1] [arg_2]	count=1
function	creates generic signature from ||| generic signature fn	count=1
function	an exit op ||| exit	count=1
function	a numpy matrix ||| to matrix	count=1
module	parameters ||| specs python	count=1
module	the vocabulary ||| learn python learn	count=1
function	returns the proto_type for ||| get collection proto type	count=1
function	[function_1] configuration ||| [function_1] [function_2]	count=1
function	key in a command ||| key in	count=1
function	shallow dict to ||| dict	count=1
module	calculate ||| training python training	count=1
function	regression ||| regression	count=3
function	define graph for a ||| define graph	count=1
module	generator ||| contrib keras python keras engine	count=1
arg	from_proto functions for ||| from_proto	count=1
function_arg	[function_1] input_tree ||| [arg_2] [function_1]	count=3
function	[function_1] trigger for ||| [function_1] [function_2]	count=1
arg	to sgv1 (see ||| sgv1	count=2
module	with the matrix of ||| factorization python ops	count=1
arg	returns whether actual_tensor's ||| actual_tensor actual_shape	count=1
function	the collection with ||| collection ref	count=1
module	list of ||| linalg python ops	count=2
arg	the event generator ||| generator query_for_tag	count=2
function	params ||| params	count=4
module	model ||| contrib keras python keras	count=2
function_arg	[function_1] cell with ||| [function_1] [arg_2]	count=4
function	[function_1] learning ||| [function_1] [function_2]	count=1
function	system implementation ||| system	count=1
function	func to generate output ||| output	count=1
module	docs ||| docs	count=1
function	learn ||| transform	count=1
function	example provided ||| example	count=1
module	check ||| tools compatibility	count=2
module	as classes ||| python learn estimators	count=1
function	given poisson distribution ||| random poisson	count=1
arg	front) a single ||| font_attr_segs	count=1
module	return indexies ||| learn preprocessing	count=1
function	the input shape ||| input shape	count=1
function	argument ||| argument	count=1
function	number ||| num	count=6
function	tensor )) ||| reduce logsumexp	count=1
arg	protocol buffer with a ||| collections name	count=1
function_arg	[function_1] context_def ||| [arg_2] [function_1]	count=4
arg	using tf nn sigmoid_cross_entropy_with_logits ||| logits multi_class_labels	count=1
module	get a str representation ||| debug lib	count=1
arg	fetches ||| fetches feed_dict	count=1
function	the max pool ops ||| max pool	count=1
function	to loop over ||| test loop	count=1
function_arg	split the [arg_2] ||| [function_1] [arg_2]	count=2
arg	by name ||| graph_element_name	count=1
arg	stochastically creates batches by ||| batch_size queue_threads	count=1
arg	input [arg_2] ||| [arg_2] [arg_1]	count=7
function	to reshape batch vector ||| vector	count=1
arg	x = ||| x	count=1
arg	tensor shape in ||| tensor	count=1
function	weight column ||| weight column	count=2
arg	next_inputs_fn ||| sample_ids	count=1
function	[function_1] [function_2] integer type ||| [function_2] [function_1]	count=1
module	dict symbol name -> ||| docs	count=1
function	markdown for the page ||| page	count=1
arg	sets entries in x ||| x	count=1
function	variation for [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] for the ||| [function_2] [function_1]	count=4
function_arg	first dimension [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	add [arg_2] ||| [arg_2] [function_1]	count=8
function	[function_1] valued features ||| [function_1] [function_2]	count=16
function	common to both ||| common	count=1
arg	on the compatiblity ||| loss_fns output_shapes	count=1
class	for proper ||| dirichlet	count=1
arg	new values ||| values	count=1
function	non-control ||| non control	count=1
function	a ||| caption to	count=1
function	from ||| values from	count=1
arg	tensorflow graph ||| graph	count=1
function	rank irfft ||| fft length for irfft	count=1
class	a single ||| summary to event	count=1
arg	labels ||| labels name	count=1
module	sets ||| contrib keras python keras	count=3
arg	lines to ||| lines	count=1
function	[function_1] [function_2] ||| [function_1] [function_2] map node_map	count=4
module	ids of a tf ||| ops	count=1
function	first operation from a ||| first op from	count=1
function	version ||| maybe assert valid	count=1
function	returns the training ||| get train	count=3
function	[function_1] size of ||| [function_1] [function_2]	count=1
function	tensor for the ||| get	count=1
function	[function_1] [function_2] ||| [function_1] loop [function_2]	count=1
class	tests ||| column test	count=8
function	and runoptions [function_2] ||| [function_2] dump path [function_1]	count=1
function_arg	[function_1] debug-dumped ||| [function_1] [arg_2]	count=4
module	'values' ||| metrics python	count=1
function	a menuitem from the ||| caption	count=1
function	op to ||| to	count=1
module	function [module_2] ||| [module_1] [module_2]	count=2
module	the same as 'values' ||| metrics	count=1
function	legend for node-status labels ||| legend	count=1
module	mean ||| python ops	count=3
function	get a menuitem ||| to item	count=1
function	register all [function_2] ||| [function_2] [function_1]	count=1
module_class	layer [class_2] ||| [module_1] layer [class_2]	count=4
function	the map that ||| map	count=1
arg	dims values ||| dims	count=1
module	proper shape ||| distributions	count=1
arg	the metadata ||| sparse map_op rank	count=1
module	of a 1 ||| python ops distributions	count=1
function	values into [function] ||| [function]	count=1
function	fill the ||| fill	count=1
class	nas ||| nascell	count=1
module	of linear eqns a ||| python ops	count=1
function	sparse softmax [function_2] ||| [function_1] [function_2]	count=2
function	the op [function_2] ||| [function_1] [function_2]	count=2
function	batch and ||| keyed batch features shared	count=1
class	corresponding to this operator ||| operator	count=2
function	value ||| single value	count=1
function	forward tensor that is ||| forward	count=1
class	in the raw documents ||| processor	count=1
arg	x weights ||| x weights	count=2
function_arg	[function_1] until ||| [function_1] new checkpoint checkpoint_dir [arg_2]	count=1
module	of integer[s] or ||| ops	count=1
function	>= elbo ||| elbo with	count=1
function	is both dense ||| test dense	count=1
function_arg	event file [arg_2] ||| [arg_2] [function_1]	count=1
function	step and [function_2] ||| [function_2] [function_1]	count=1
arg	two [arg_2] ||| [arg_2] [arg_1]	count=1
class	the curses ||| curses	count=1
function	and creates a ||| init	count=1
function	[function_1] tensors if ||| [function_2] [function_1]	count=3
function	[function_1] the global ||| [function_1] [function_2]	count=1
function	[function_1] convolutions ||| [function_2] [function_1]	count=8
function	serialize an n-minibatch sparsetensor ||| serialize many	count=1
module	this ||| rnn python ops	count=1
arg	matrix b, producing a ||| transpose_a transpose_b	count=2
function_arg	and attention [arg_2] ||| [arg_2] [function_1]	count=1
module	loads all events ||| tensorboard backend event_processing	count=1
class	creates an invalidargumenterror ||| invalid argument error	count=1
function	this handle ||| get resource handle	count=2
function	the sorted transitive closure ||| sorted	count=1
function	[function_1] tensorflow graph ||| [function_2] [function_1]	count=4
function	a merge ||| merge grad	count=1
class	create a svtimercheckpointthread ||| svtimer checkpoint thread	count=1
function	[function_1] given estimator ||| [function_2] [function_1]	count=1
class	session creator ||| session creator	count=4
function	a biasadd [function_2] ||| [function_1] [function_2]	count=3
arg	and op2 hints argument ||| op2 hints	count=1
function	an op ||| op	count=9
function	boots 3 ||| test cluster spec propagation three	count=1
arg	biasaddgrad op ||| op received_grad	count=2
module	from ||| learn python learn estimators	count=1
function	[function_1] v3 ||| [function_1] [function_2]	count=2
function	most recent ||| most recent	count=1
class	until the server ||| server	count=1
class	ops from the graph ||| graph rewriter	count=1
function	probably a [function_2] ||| [function_1] [function_2]	count=2
function	to a richtextlines object ||| text lines from	count=1
function	fit ||| fit	count=4
module	bijector ||| contrib distributions python ops bijectors	count=1
module	representing this ||| contrib linalg python ops	count=1
class	coordinate ||| multinomial	count=1
function	values ||| assert valid sample	count=1
function	-grad * 2/sqrt pi ||| erfc	count=1
function	un-normalized l1 [function_2] ||| [function_1] [function_2]	count=3
function	returns a dict with ||| get	count=2
function	with respect [function_2] ||| [function_2] [function_1] k labels predictions_idx k	count=1
function	_get_dense_tensor() ||| get dense tensor one	count=1
function	sparsemax activations [1] ||| sparsemax	count=1
module	regression ||| python learn utils	count=1
module	for the ||| contrib distributions python ops	count=1
function	scalars after adding ||| scalars	count=1
arg	an list of items ||| items	count=1
module	completed elements from this ||| python ops	count=1
function_arg	[function_1] [arg_2] array ||| [function_1] [arg_2]	count=2
class	test ||| run test	count=1
function	graph with a ||| graph with	count=2
function	image ||| adjust gamma	count=1
class	the history ||| navigation history	count=1
function	from an event file ||| from event file	count=1
function	definition ||| create definition	count=1
arg	factor ||| max_delta seed	count=1
function	variables and names ||| and slice inputs	count=1
arg	elements in last dimension ||| set_operation validate_indices	count=1
function	tensor or indexedslices objects ||| to tensor or indexed slices	count=1
module	graph building doesn't ||| contrib tensor_forest hybrid python models	count=1
module	sequence-to-sequence model with ||| legacy_seq2seq python	count=1
function	a sequence ||| to sequence	count=1
function	[function_1] operation of ||| [function_1] [function_2]	count=2
arg	for storing ||| save_dir	count=1
class	the stack is ||| default graph stack	count=1
module	of d ||| contrib distributions python ops	count=1
module	a list of ||| factorization python ops	count=4
function_arg	[function_1] condition x ||| [function_1] greater [arg_2]	count=1
arg	activations from the ||| activations labels sequence_length	count=3
arg	pads the ||| padding	count=1
class	a ||| lazy	count=1
module_class	s of [class_2] ||| [module_1] [class_2]	count=10
function	linear_model_fn but returns modelfnops ||| model fn	count=2
function	the ||| index	count=1
function	[function_1] a docstring ||| [function_1] [function_2]	count=2
module	[module_1] of ||| [module_1] [module_2]	count=18
arg	in checkpoint's tensor ||| file_pattern tensor_name slice_spec	count=1
class	rpc stack for tests ||| server test	count=1
module_class	a new adagrad ||| python training adagrad	count=1
function	linked to ops ||| from regex	count=1
function	mean absolute error between ||| mean absolute error	count=1
function	cosine distance between ||| mean cosine distance	count=4
arg	monitors and returns differences ||| other_dump step atol	count=1
function	_guideref ||| build	count=1
module	tensor version ||| python ops	count=1
arg	[arg_1] specified dimension ||| [arg_1] [arg_2]	count=2
arg	dims ||| dims	count=1
function	returns a numpy ||| numpy	count=1
function	variance ||| var	count=2
module	a rnn cell composed ||| contrib rnn python	count=1
function	one column is ||| one column	count=2
module	of 1 ||| contrib distributions	count=1
function	latest event ||| latest	count=1
arg	transposed ||| filters kernel_size strides	count=1
function	[function] configuration ||| sparse column [function]	count=1
function	export strategies ||| export strategies	count=2
function_arg	the variable [arg_2] ||| [function_1] apply dense grad [arg_2]	count=1
module	helper to __init__ which ||| distributions python	count=1
function	one-to-many rnn ||| rnn	count=1
module	mapping of name ||| contrib framework python ops	count=1
function_arg	[function_1] [arg_2] ||| [function_1] registered_name operation [arg_2]	count=3
function	variation for ||| variation	count=2
class	as the shape ||| shape	count=1
arg	output from ||| output	count=1
module	be used to ||| contrib layers python layers	count=1
function	for large records ||| large	count=1
arg	to the labels ||| labels	count=3
module	get the ||| debug lib	count=1
module	cell output ||| rnn python	count=1
function	input key ||| input exprs	count=1
class	restore a reader ||| reader	count=1
class	update ||| clidebug wrapper session	count=1
arg	protocol buffer with ||| values collections	count=2
function	indexies ||| transform	count=1
function	global step update for ||| global step	count=4
class	initializes ||| saver hook	count=1
arg	a @ b ||| a b	count=1
module_class	[module_1] nas ||| [class_2] [module_1]	count=3
function	a root directory containing ||| root dir	count=1
module	[module_1] with ||| [module_1] [module_2]	count=2
arg	the sliced dimension ||| multiple dim	count=1
function	[function_1] a dense ||| [function_2] column weighted [function_1]	count=1
module	representing a ||| python framework	count=1
module	latest ||| contrib testing python framework	count=2
function_arg	[function_1] [arg_2] ||| [function_1] master name [arg_2]	count=2
arg	the same in-plane convolution ||| stride padding	count=1
module	the ||| framework python	count=1
function_arg	ratio [arg_2] ||| [arg_2] [function_1]	count=7
function	real valued ||| real valued	count=12
function	approximate auc ||| streaming auc	count=1
function_arg	[function_1] given threshold ||| [function_1] values [arg_2]	count=1
function	typeerror ||| hooks type	count=1
function_arg	values [arg_2] ||| [function_1] [arg_2]	count=2
module	session ||| python client	count=1
arg	path ||| path	count=6
arg	formats ||| pretty	count=1
arg	given tensor ||| tensor	count=1
function	depending on the ||| getitem	count=1
module	this ||| contrib keras python keras wrappers	count=1
module	cluster ||| dist_test scripts	count=1
function	concatenate layer ||| concatenate	count=1
function	return tensor version ||| assert valid	count=1
function	weights and biases ||| biases	count=1
function	variables that ||| get variables	count=1
function	with dynamic ||| flip vector to matrix dynamic	count=1
module	of tensors corresponding to ||| contrib factorization python ops	count=4
arg	an ||| seed dtype	count=1
function_arg	distance between [arg_2] ||| [arg_2] [function_1]	count=6
arg	tensor is accessed ||| input_ data message first_n	count=1
function	to define the tensorflow ||| define	count=1
arg	optimizer ||| global_step learning_rate optimizer	count=1
function	sessionlog start ||| session log start	count=2
function	trace ||| trace info	count=2
module	the ||| python summary writer	count=2
class	to the accumulator ||| sparse conditional accumulator	count=1
module	cell output dimension ||| contrib rnn	count=1
class	should ||| accumulator test	count=2
function	check ||| test	count=1
arg	value of a ||| value	count=1
module_class	vocabulary [class_2] ||| [module_1] [class_2]	count=4
arg	vocabulary dictionary and return ||| x	count=1
arg	a run ||| run plugin_name asset_name	count=1
function	and returns a copy ||| copy	count=1
function	for training ||| training	count=1
function	monitoredsession for [function_2] ||| [function_1] [function_2]	count=1
function	tensor from the ||| tensor	count=1
function	parameters in a ||| total params	count=1
function	op to ||| to hash	count=1
arg	functional interface for ||| inputs filters kernel_size strides	count=1
arg	to x y ||| x y	count=4
arg	a audio ||| audio	count=1
module	which ||| ops distributions	count=1
module	vocabulary dictionary and return ||| contrib learn python	count=1
function	collect ||| collect docs for	count=1
module	specified by the ||| python slim	count=1
function	lookup helper for ||| lookup	count=1
function	indexedslices ||| indexed slices	count=2
module	function of ||| python ops distributions	count=2
class	initializes ||| flow context	count=1
function	[function] or ||| get [function]	count=1
function	which reads the value ||| read value	count=1
module	a mapping of name ||| framework python ops	count=1
function	the device [function_2] ||| [function_2] [function_1]	count=2
module	[module_1] string ||| [module_1] [module_2]	count=8
function	see run_feeds_iter() ||| run feeds	count=1
function	calculates the loss ||| calculate loss	count=1
function	the debug ops ||| debug ops	count=2
module	associated with [module_2] ||| [module_1] [module_2]	count=1
function	get a flattened ||| get	count=1
module	'graph and session and ||| learn	count=1
function	in an ||| op	count=1
function	[function_1] raw params ||| [function_2] [function_1]	count=4
module	step of ||| rnn python ops	count=4
function_arg	random [arg_2] ||| [function_1] brightness [arg_2]	count=1
function	the files ||| files	count=1
function	[function_1] features and ||| [function_1] [function_2]	count=5
function	column ||| col	count=1
function	[function_1] step tensor ||| [function_2] [function_1]	count=5
function_arg	[function_1] tensorflow operation ||| [function_1] [arg_2]	count=3
function	event for terminating worker ||| event	count=1
function_arg	summary of [arg_2] ||| [function_1] [arg_2]	count=2
class	table outputs ||| mutable dense hash table	count=1
arg	different thresholds on predictions ||| predictions labels thresholds weights	count=2
function_arg	filename for storing ||| checkpoint filename save_dir	count=2
function	to run [function_2] ||| [function_1] [function_2]	count=1
function	linear operator from ||| create operator	count=1
function	param to init and ||| init	count=1
class	underlying barrier ||| barrier	count=1
function_arg	the border [arg_2] ||| [arg_2] [function_1]	count=1
function	propagates through all the ||| propagate	count=1
module	given number of ||| learn	count=1
function	have no effect ||| no	count=1
function	the ||| proto	count=1
function_arg	[function_1] epoch ||| [function_1] [arg_2]	count=2
arg	interface for transposed 3d ||| filters kernel_size strides	count=1
function	computes the shape of ||| output shape	count=1
arg	path ||| filename	count=1
function	for mini batch ||| mini batch training	count=2
arg	save_path/filename ||| filename collection_list as_text export_scope	count=1
module	given ||| learn python learn utils	count=1
function	you can save ||| save	count=1
function	multi value models ||| value	count=1
function	[function_1] use metricspec ||| [function_2] [function_1]	count=2
arg	linear weights in ||| column columns_to_tensors embedding_lookup_arguments num_outputs	count=1
function	the variables ||| variables to	count=1
function	in the data dependencies ||| datafile	count=1
arg	[arg_1] rate ||| [arg_2] [arg_1]	count=2
function	input ||| input value	count=2
function	node ||| norm node	count=1
arg	create [arg_2] ||| [arg_2] [arg_1]	count=2
module_class	[module_1] this linearoperator ||| [module_1] [class_2]	count=2
function	sparsetensor ||| sparse merge	count=1
function	given state ||| call cell	count=2
function	for ||| ops	count=1
module	all ||| contrib	count=1
arg	[arg_1] convolution layer ||| [arg_2] [arg_1]	count=1
function_arg	the boundary of ||| boundary ts ops	count=1
function	true positives ||| true positive	count=2
function	natural exponential ||| natural exp	count=1
arg	given ids ||| sp_ids sp_weights partition_strategy	count=1
module	of factors ||| contrib factorization python ops	count=1
arg	print [arg_2] ||| [arg_1] [arg_2]	count=1
function	menuitem from ||| to	count=1
function	matmul ||| calc mat mul	count=1
module	matrix data as input ||| contrib learn python learn estimators	count=5
module	computes output tensors ||| keras engine	count=1
module	for ||| contrib factorization python ops	count=2
arg	op1 and op2 hints ||| op1 op2 hints	count=1
function	csv file with a ||| csv with	count=1
function	op to use based ||| string to hash bucket	count=1
function	get ||| to item	count=1
arg	execute ||| enqueue_op coord	count=1
function	kernel size ||| kernel size	count=2
class	[class_1] to disk ||| [class_1] [class_2]	count=2
function	[function_1] pool ops ||| [function_2] [function_1]	count=4
module	sense ||| linalg	count=5
arg	given path ||| path	count=3
arg	of elements across dimensions ||| axis keep_dims reduction_axes	count=1
module	updates internal ||| contrib keras python keras	count=1
arg	inputs to ||| inputs state scope	count=2
function	both dense ||| dense	count=1
function	all the [function] or ||| get [function]	count=1
module	from this ||| ops	count=3
function	help information for ||| help for	count=1
class	ps task index for ||| greedy load balancing strategy	count=1
function	in a list ||| total	count=1
module	the cli see the ||| cli	count=2
module	proper shape values then ||| ops	count=1
function_arg	tensor [arg_2] ||| [function_1] watch [arg_2]	count=1
arg	handles by tracing output ||| source_element	count=1
module	of any ||| python ops	count=1
function	with static ||| matrix static	count=1
function	richtextlines ||| attribute lines	count=1
module	the name ||| framework	count=1
function	generates predictions for the ||| predict	count=2
function_arg	fit function [arg_2] ||| [arg_2] [function_1]	count=1
function	with integer ||| with integer weighted	count=1
arg	[arg] pass results ||| [arg]	count=1
module	to __init__ which ||| contrib distributions python ops	count=1
function_arg	to loop [arg_2] ||| [function_1] f ins batch_size [arg_2]	count=2
module	sample from ||| distributions	count=1
function	creates a bidirectional ||| bidirectional	count=1
function	to ||| ts	count=1
module	or list of tensors ||| contrib rnn python ops	count=1
function	returns the control flow ||| get control flow	count=1
function	a slot [function_2] ||| [function_2] [function_1]	count=4
module	ops leading ||| python ops	count=1
arg	summary type ||| tag	count=1
function	for a sparse ||| sparse	count=1
function	[function_1] types used ||| [function_1] [function_2]	count=4
arg	distributions ||| logits probs validate_args	count=1
function	valid ||| check valid	count=1
function	latest event file ||| latest event file	count=2
function	it into ||| to	count=1
function	score function estimator with ||| get score function with	count=1
arg	a single ||| font_attr_segs	count=1
function	static [function_2] ||| [function_2] [function_1]	count=4
function	a single ||| on	count=3
arg	performs gamma correction on ||| gamma gain	count=1
function	rank rfft ||| for rfft	count=1
function	or create [function] variable e ||| get [function]	count=1
function	restart is detected ||| restart for file version less than2	count=1
class	rich attributes or ||| rich	count=1
class	of elements in this ||| base	count=1
module	tests ||| python training	count=1
function	to strings ||| string	count=1
module	non-reference dtype based on ||| framework	count=1
function	shape ||| valid sample	count=1
function_arg	histogram [arg_2] ||| [arg_2] [function_1]	count=2
arg	section as an ||| function_details	count=1
function	value of the attr ||| attr	count=1
class	in the history ||| navigation history	count=1
arg	full epoch of ||| sess eval_correct images_placeholder labels_placeholder	count=1
function	export model for servo ||| export	count=3
module	deprecated ||| python util	count=2
function	update op ||| update	count=1
class	version ||| dirichlet multinomial	count=2
class	the event file ||| event file	count=2
function	node-status ||| status	count=1
module	mapping of name to ||| ops	count=1
arg	col [arg_2] ||| [arg_2] [arg_1]	count=2
function	learning [function_2] ||| [function_2] [function_1]	count=1
function_arg	verifies [arg_2] ||| conv2dtest [function_1] values [arg_2] filter_in_sizes stride padding	count=1
class	multiple output ||| saved model export utils	count=1
function	[function_1] dnn-only model ||| [function_1] [function_2]	count=2
class	learn the ||| categorical processor	count=1
function_arg	initializes a [arg_2] ||| [function_1] [arg_2]	count=14
arg	maps ||| mapping default_value name	count=1
function	into a batch by ||| batch	count=1
function	vgg 11-layers version ||| vgg a	count=1
module	multiplies ||| python keras	count=1
function	matrix with given batch ||| matrix	count=1
module	building doesn't modify ||| hybrid	count=1
arg	parameters ||| num_units input_size use_peepholes	count=1
function	the device ||| device	count=4
function	has ||| hashed output v1 has	count=1
function	dense batch matrix ||| dense	count=1
class	to make sure we ||| upgrade files	count=1
function	return ||| transform	count=1
function	[function_1] positive ||| [function_1] [function_2]	count=1
arg	returns an exponential distribution ||| minval maxval seed dtype	count=1
module	first ||| python layers	count=1
arg	op are calculated using ||| grad _	count=1
function	arguments common to both ||| common args	count=1
function	applies node renames in ||| node renames	count=1
function_arg	sum metric ||| streaming sum scalar_tensor	count=1
function	returns op ||| op	count=1
function	link for a @{$ ||| doc link	count=1
module	to ops ||| python ops	count=1
function	valid task [function_2] ||| [function_1] [function_2]	count=2
class	the base feature ||| feature column	count=1
module	menuitem ||| debug cli	count=2
arg	has access to ||| tensor_name	count=1
module	match ||| contrib	count=1
module	returns number of dimensions ||| distributions python ops	count=2
function	signature [function_2] ||| [function_2] [function_1]	count=4
function	and converts it ||| and	count=1
class	1x1 kernel ||| extract image patches	count=1
function	source [function_2] ||| [function_2] [function_1]	count=1
module	given number ||| learn python learn	count=1
function	sort a list ||| sort dump data	count=1
function	scope from a ||| name scope	count=1
module	find single argument in ||| python	count=1
module	of tensors or ||| python ops	count=1
function_arg	rnn decoder with ||| rnn decoder decoder_inputs	count=1
function	loop over ||| predict loop	count=1
function	a tf graph ||| graph	count=1
arg	file path and ||| path options	count=1
function_arg	filename [arg_2] ||| [function_1] [arg_2]	count=3
function	batch ||| batch training	count=2
function_arg	[function_1] xs by ||| [function_1] ys [arg_2]	count=1
module	and return indexies of ||| learn	count=2
arg	column ||| column args	count=1
class	multiple output tensors ||| export output	count=1
function	beginning ||| begin	count=1
module	transforms each ||| contrib keras python	count=1
module	used by the transformer ||| layers python layers	count=1
arg	a tensor ||| dtype name as_ref	count=1
class	grad context ||| grad loop state	count=1
function	d > 0 elementwise ||| diag update positive	count=1
function	shape ||| shape internal	count=2
function_arg	[function_1] [arg_2] results through ||| contrib bayesflow examples reinforce_simple [function_1] merge [arg_2]	count=1
module	a menuitem from ||| debug	count=1
function	initialize the [function_2] ||| [function_1] [function_2]	count=3
arg	with concentration [arg_2] ||| [arg_1] [arg_2]	count=2
class	closes ||| interactive session	count=1
function	a richtextlines ||| rich text lines	count=1
function	[function_1] function with ||| [function_1] [function_2]	count=2
function	additional logistic metrics ||| logistic metrics	count=2
class	wishart distribution [class_2] ||| [class_2] [class_1]	count=1
function_arg	[function_1] given dtype ||| [arg_2] [function_1]	count=1
function_arg	gets metagraphdef [arg_2] ||| [arg_2] [function_1]	count=1
module	the logic of the ||| python	count=1
function	dictionary of tensors to ||| tensors to	count=1
function_arg	matrix [arg_2] ||| [function_1] matrix [arg_2]	count=1
function	add ops ||| add	count=3
arg	constructor of censusdatasource ||| data_dir train_data_url test_data_url columns	count=1
function_arg	[function_1] rnncell cell ||| [arg_2] [function_1]	count=1
module	prepended to ||| contrib linalg	count=1
function	tensor [function_2] ||| [function_1] [function_2]	count=12
function	[function_1] boston ||| [function_2] [function_1]	count=1
arg	activations ||| activations	count=3
module	tensors linked ||| contrib graph_editor	count=1
module	will be produced ||| python framework	count=1
function	value as tuple ||| value	count=1
arg	[arg_1] partitions ||| [arg_1] [arg_2]	count=1
function	dense tensor ||| sparse tensor dense	count=1
arg	dicts of ||| rtol atol	count=1
arg	a subgraph ||| sgv	count=2
function	and loss ||| loss and target compatibility	count=1
function	all variables that ||| variables	count=1
function_arg	registers [arg_2] ||| [arg_2] [function_1]	count=1
function	this ||| def	count=1
function_arg	convert [arg_2] ||| [arg_2] [function_1]	count=3
arg	and outputs ||| outputs	count=1
arg	sliced dimension ||| multiple dim name	count=1
class	derived classes ||| operator derived class test	count=1
arg	according [arg_2] ||| [arg_2] [arg_1]	count=1
function	mahalanobis distance to the ||| distance to clusters	count=1
function	true iff [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] path and ||| [function_1] [function_2]	count=3
arg	[arg_1] are seen ||| [arg_1] [arg_2]	count=2
function	rank in ||| tensor rank tensor	count=1
function	offset when the ||| single offset	count=1
function	reshaping behavior of realvaluedcolumn ||| reshaping	count=1
class	without ||| resnet utils test	count=1
arg	parameters for an ||| use_peepholes cell_clip	count=1
module	the cell ||| rnn python	count=3
module	creates ||| training python training	count=1
function	current control flow ||| control flow	count=4
function	[function_1] not compatible ||| [function_2] [function_1]	count=1
function	from ||| path	count=1
function	of graph [function_2] ||| [function_2] [function_1]	count=1
function	and asserts a positive ||| positive	count=1
function_arg	processor of [arg_2] ||| [function_1] [arg_2]	count=1
module	imagenet ||| keras applications	count=2
function	from ||| input fn	count=1
function	indices of the examples ||| index	count=1
function	with given [function_2] ||| [function_2] [function_1]	count=6
function	multiclass [function_2] ||| [function_2] [function_1]	count=1
arg	parameters for ||| num_units use_peepholes share_time_frequency_weights cell_clip	count=1
function	step true ||| sparse true	count=1
function	reshaping behavior ||| reshaping	count=1
arg	the vocabulary dictionary ||| x	count=1
module	invoked during construction ||| wrappers	count=1
function	richtextlines ||| node attribute lines	count=1
module	3 ||| sparsemax python kernel_tests	count=1
function	updates the ||| set	count=1
arg	boundaries [arg_2] ||| [arg_1] [arg_2]	count=1
class	this operator to ||| operator scaled identity	count=1
class	for tests ||| grpc server test	count=1
module_class	of [class_2] ||| [module_1] tensor [class_2] scatter indices value name	count=1
function	dnn-linear combined model ||| dnnlinear combined bug fixed	count=1
function_arg	transformations [arg_2] ||| [arg_2] [function_1]	count=7
class	a new partitioned ||| partitioned	count=1
arg	[arg_1] value ||| [arg_2] [arg_1]	count=4
module	cli see the doc ||| python debug cli	count=2
arg	returning [arg] ||| numerator [arg]	count=1
module	a keras variable ||| keras	count=1
arg	call node op ||| op	count=1
function	average [function_2] ||| [function_1] [function_2]	count=13
function	top ||| transformed map	count=1
function	on a list ||| on	count=1
function	product between two lists ||| dot product	count=1
function	given a variable instance ||| variable	count=1
function	if ||| hooks	count=1
class	a text [class_2] ||| [class_1] [class_2]	count=1
module	of ||| seq2seq python ops	count=7
function	created properly with ||| initialization	count=1
function	that ||| filter	count=1
arg	performs ||| zoom_range row_axis col_axis	count=1
function	graph with [function_2] ||| [function_2] [function_1]	count=3
arg	given tensors ||| tensors feed_dict	count=1
function	the approximate auc ||| streaming auc	count=1
class	without a ||| hybrid model	count=1
function	[function_1] mappers provided ||| [function_2] [function_1]	count=4
function	random [function_2] ||| [function_2] [function_1]	count=11
function	the first ||| first	count=3
function_arg	the sum [arg_2] ||| [arg_2] [function_1]	count=5
class	layer from numpy arrays ||| layer	count=1
function	an op ||| op and	count=1
function	get a [function_2] ||| [function_1] [function_2]	count=9
function	generate a boolean series ||| series	count=1
function	the example ||| example	count=2
arg	session, and tries to ||| master saver checkpoint_dir checkpoint_filename_with_path	count=1
module	returns ||| python learn estimators	count=3
function	[function_1] tags ||| [function_1] unique [function_2]	count=1
arg	necessary to [arg_2] ||| [arg_2] [arg_1]	count=2
module	two lists of ||| ops	count=1
module	if ||| python	count=1
function	op for [function_2] ||| [function_2] [function_1]	count=2
module	a 1 ||| distributions python ops	count=3
arg	with parameters loc and ||| loc	count=1
function	temporary directory for tests ||| temp dir	count=1
function_arg	[function_1] shape ||| [function_1] [arg_2]	count=8
function	tensor is a sparse ||| sparse	count=1
arg	add its inputs to ||| inputs	count=2
function	static check ||| check	count=5
class	these student's [class_2] ||| [class_2] [class_1]	count=3
function	element is a placeholder ||| placeholder	count=1
function	scale matrix [function_2] ||| [function_1] [function_2]	count=1
function	loss without the regularization ||| unregularized	count=1
module	prints ||| python keras utils	count=1
module	of name to ||| contrib framework python ops	count=1
function_arg	the tilegrad [arg_2] ||| [function_1] grad shape [arg_2]	count=1
class	shape values ||| multinomial	count=1
function	existing model [function_2] ||| [function_1] [function_2]	count=2
function	is tensor ||| tensor	count=1
function	a sparse column ||| sparse int column	count=2
function	the google2 format ||| google2	count=1
function	returns whether a stop ||| stop	count=1
function	column factors ||| col factors	count=2
module	node-status ||| debug	count=1
class	session ||| base debug wrapper session	count=1
function	local ||| get local	count=1
module	this cell output ||| rnn python	count=1
function	[function_1] possibly ||| [function_2] [function_1]	count=6
module	factorization ||| factorization	count=1
class	finalize ||| beam search decoder	count=1
arg	example containing the encoded ||| image_format image_shape	count=1
function	session for ||| session	count=1
function	[function_1] experiment ||| [function_1] [function_2]	count=2
class	a ||| round robin strategy	count=2
function	direct python implementation of ||| batch direct	count=1
function	combining all pixels ||| pixels	count=1
module	then return tensor version ||| python	count=1
function	all methods inside ||| all datasets	count=2
function	all the tensors ||| regex	count=1
module	value ||| keras python keras	count=1
module_class	params [module_1] [class_2] ||| [module_1] [class_2]	count=3
arg	w conjugate prior on ||| prior scale	count=1
function	of custom objects ||| custom objects	count=1
function	decodes the prediction of ||| decode	count=1
module	integers ||| keras python keras preprocessing	count=2
arg	valuesdef ||| values_def import_scope	count=1
module_class	[module_1] cudnn to ||| [module_1] [class_2]	count=6
function	create [function_2] ||| [function_2] [function_1]	count=11
module	that trains the ||| python	count=1
arg	in the checkpoint ||| ckpt_dir_or_file	count=1
function	specified invalid [function_2] ||| [function_2] [function_1]	count=3
module	loss to ||| ops losses	count=1
function_arg	[function_1] given node ||| [arg_2] [function_1]	count=4
arg	and each cluster center ||| clusters	count=1
arg	a audio by ||| audio	count=1
module	dict ||| contrib learn python learn estimators	count=1
class	the chrome ||| chrome	count=1
function_arg	create a [arg_2] ||| [arg_2] [function_1]	count=13
function	[function_1] file path ||| [function_2] [function_1]	count=2
class	lstm ||| lstm	count=1
function	create [function] variable e ||| get [function]	count=1
function	filename of latest ||| latest	count=1
function	proper shape values ||| valid	count=1
function	value of a tensor ||| tensor value	count=1
module_class	new rmsprop ||| python training rmsprop	count=1
function	zlib library compatible ||| zlib read	count=2
module	of dimensions and ||| contrib distributions python ops	count=1
arg	str returns the longest ||| m	count=1
function	a training ||| training	count=1
module	by the embedding projector ||| tensorboard plugins projector	count=1
arg	filewriter ||| logdir	count=1
function	merge ||| merge grad	count=1
module	rnn cell composed sequentially ||| contrib rnn	count=1
function	with respect [function_2] ||| [function_2] [function_1]	count=7
function	positive definite ||| positive definite	count=2
function	field to ||| get field to	count=1
function_arg	[function_1] pure-decoding option ||| [function_1] rnn decoder decoder_inputs [arg_2]	count=1
arg	or fn_else() based on ||| fn_then fn_else	count=1
arg	a pooling op ||| kernel_size pooling_type padding	count=1
function_arg	train [arg_2] ||| [function_1] [arg_2]	count=2
arg	for linear weights ||| columns_to_tensors embedding_lookup_arguments num_outputs	count=1
arg	dimension ||| name dim	count=1
function	summary based ||| to summary	count=1
class	check ||| test	count=1
module	distributed ||| specs	count=1
function	is of tensor ||| tensor	count=1
function	sparse integer [function_2] ||| [function_2] [function_1]	count=2
function	queue [function_2] ||| [function_2] [function_1]	count=2
function	of latest saved checkpoint ||| latest checkpoint	count=1
function	tf examples to extract ||| parse feature columns from examples	count=1
class	eventfilewriter ||| file	count=1
module	returns a non-reference ||| python	count=1
function	proper ||| maybe assert valid sample	count=1
arg	tensor and returns it ||| tensor	count=1
function	example proto ||| row to example proto	count=1
arg	w conjugate prior on ||| prior scale s n	count=1
function	inputs to ||| inputs	count=2
class	value tensor based ||| tensor	count=1
class	registered function ||| func registry	count=3
function	the switch ||| switch	count=1
function	returns ||| get init	count=1
function_arg	[function_1] conv ||| [function_1] bn x [arg_2]	count=1
module	sequence of integers ||| contrib keras python	count=1
arg	[arg_1] for cell ||| [arg_2] [arg_1]	count=4
function	returns the value ||| batch get value	count=3
module	on this ||| python framework	count=1
function	no ||| no	count=3
arg	given a summary tag ||| tag	count=5
function	dictionary of evaluation metric ||| eval metric	count=1
function_arg	write a [arg_2] ||| [function_1] writer [arg_2]	count=1
module	batch version ||| distributions python	count=1
arg	data to an output ||| data	count=2
module	tests ||| tools quantization	count=3
arg	[arg] given ||| input_length filter_size [arg]	count=2
function	update for linear-only ||| linear only	count=1
function_arg	[function_1] filename ||| [function_1] file [arg_2] contents	count=1
arg	a linearoperatortril ||| tril is_non_singular is_self_adjoint is_positive_definite	count=1
function	sort ||| sort dump data	count=1
function	[function_1] shear of ||| [function_1] [function_2]	count=2
function	model's input shape ||| obtain input shape	count=2
module	ismodule ||| python util	count=1
module	the default keras ||| contrib keras python keras	count=1
function	search decoding on the ||| search decoder	count=1
function	then return tensor ||| maybe assert	count=1
module	list of tensors ||| factorization python ops	count=4
arg	[arg] if ||| [arg]	count=1
class	the event ||| event	count=4
function	of collections used ||| get all collection keys	count=1
function	get all ||| get	count=5
arg	that maps a ||| mapping default_value	count=1
function	input ||| input	count=31
arg	of lines to ||| lines	count=1
function	adds operations to read ||| read keyed	count=2
module	in stop_gradient ||| contrib bayesflow	count=1
module	list of tensors corresponding ||| factorization python ops	count=4
function	with integer ||| with integer weighted sparse column succeeds for dnn	count=1
function	a scale matrix ||| scale	count=1
class	[class_1] line ||| [class_2] [class_1]	count=3
class	a staging area ||| staging area	count=2
function	the init op used ||| init op	count=1
arg	using problem type and ||| input_tensors output_tensors problem_type	count=1
class	indexies ||| processor	count=1
arg	the entire ||| level noise_shape seed	count=1
arg	removes unneeded pairs ||| old_graph	count=1
class	produced or ||| indexed	count=1
function	maps input key to ||| preprocess input	count=1
arg	the given dtype ||| shape dtype num_shards	count=1
function	have ||| test	count=1
function	path and runoptions ||| path and run options	count=1
function	[function_1] accumulator ||| [function_2] [function_1]	count=1
module	perform a step of ||| contrib seq2seq python ops	count=1
function	returns ||| base	count=1
function	order on ||| order	count=1
function	that the tensor ||| verify tensor	count=1
function	for model_fn ||| with model fn ops	count=1
module	helper which properly ||| contrib distributions python	count=1
function	debug_urls value ||| urls	count=1
class	that will sample data ||| data feeder	count=1
class	from which the tensor ||| tensor	count=1
function	ops ||| ts	count=1
function	save variables ||| save	count=1
module	integrate a ||| integrate python	count=1
module	of underlying ||| contrib distributions python ops	count=1
function_arg	[function_1] from savedmodel ||| [function_1] [arg_2]	count=2
function	arg batch_shape, [function_2] ||| [function_1] [function_2]	count=3
function	a file [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] existed in ||| [function_2] [function_1]	count=4
class	this shape ||| shape	count=1
function	[function_1] file against ||| [function_1] [function_2]	count=1
function	node for ||| node	count=1
function	unique output tensors ||| output ts	count=1
function	start message [function_2] ||| [function_2] [function_1]	count=3
function_arg	abstract [function_1] [arg_2] in ||| [function_1] [arg_2]	count=4
function	restricted linear prediction builder ||| joint weighted sum from feature columns	count=1
function	binary [function_2] ||| [function_1] [function_2]	count=2
function	proper shape values ||| assert	count=1
module	n dimensional version of ||| learn ops	count=1
function	for node-status ||| label	count=1
function	[function_1] boundary ||| [function_2] [function_1]	count=2
class	sparse ||| sparse	count=4
function	the derivatives for bilinear ||| bilinear grad	count=1
arg	the parameters for an ||| input_size use_peepholes	count=1
function	creates a new ||| new	count=1
function	in a crf ||| crf	count=1
module	boolean ||| labeled_tensor python ops	count=1
module	the tensors ||| contrib graph_editor	count=2
function_arg	[function_1] axis to ||| [function_1] [arg_2]	count=1
class	"f" as the shape ||| shape	count=1
function	[function_1] loop that ||| [function_1] [function_2]	count=3
function	the values in ||| test output values	count=2
arg	scaling the entire tensor ||| level noise_shape	count=1
function	a feature spec for ||| create sequence feature spec for	count=1
function_arg	lookup embedding [arg_2] ||| [function_1] [arg_2]	count=3
function	the root mean squared ||| root mean squared	count=2
class	to perform a ||| composable model	count=1
function	of units ||| units	count=2
arg	tensors into a single ||| cls tensors	count=1
function_arg	[function_1] given threshold ||| [arg_2] [function_1]	count=1
function	a simple print ||| tf print	count=1
function	fill the [function_2] ||| [function_1] [function_2]	count=3
arg	w conjugate prior ||| prior scale	count=1
module	distributed floating point number ||| contrib specs	count=1
module	gamma ||| python ops distributions	count=1
function	output values of ||| values	count=1
function	static valueerror with ||| static	count=1
function	launch ||| launch cli	count=1
function	[function_1] pool ||| [function_2] [function_1]	count=8
arg	fft_length argument for ||| fft_rank	count=2
function_arg	root [arg_2] ||| [function_1] [arg_2]	count=1
function	checkpoint filenames ||| last checkpoints	count=1
module	invoked ||| wrappers	count=1
function	read the records ||| tf	count=1
module	reverse ||| keras python keras	count=1
function	returns predictions for ||| predict	count=3
module	imagenet ||| applications	count=1
module	output tensors that with ||| learn python learn	count=1
class	output [class_2] ||| [class_1] [class_2]	count=1
function	the maximum of ||| reduce max	count=1
function	ops that match the ||| ts	count=1
function	the checkpoints ||| dnnweights	count=1
module	classification ||| contrib learn python learn utils	count=1
function	a single batch ||| test on batch	count=2
function	ops ||| ts from	count=1
function	graph transform ||| transform graph	count=2
arg	fetching a tensor ||| name target	count=1
function	which examples [function_2] ||| [function_1] [function_2]	count=5
arg	the parameters ||| num_units input_size use_peepholes cell_clip	count=1
function	tensors ||| filter ts from regex	count=2
function	the walsfactorization estimator ||| wals factorization	count=1
function	inside ||| inside	count=1
function	logo ||| logo	count=1
function_arg	use for [arg_2] ||| [function_1] [arg_2]	count=1
function	max pooling on ||| max pool	count=1
function_arg	gather [arg_2] ||| [arg_2] [function_1]	count=1
function	all variable names ||| variable names	count=1
function	iterable ||| iterable	count=2
function	for nearest neighbor resizing ||| resize nearest neighbor grad	count=1
function	works fine [function] ||| test integer tensor [function]	count=1
function_arg	postfix [arg_2] ||| [function_1] [arg_2]	count=2
function	one evaluation against ||| eval	count=1
function	[function_1] metrics ||| [function_1] [function_2]	count=3
function	servers ensures ||| servers	count=1
function	[function_1] a bucketized ||| [function_2] column [function_1]	count=2
function	verifying the output with ||| adjust	count=1
arg	x given mean var ||| x mean var	count=1
function	to debug [function_2] ||| [function_1] [function_2]	count=1
module	1 outcome (vs 0) ||| ops distributions	count=1
module	the vocabulary dictionary and ||| learn python	count=1
function	this is the diagonal ||| diag update	count=1
function	get legend ||| status label legend	count=1
module	the default keras ||| keras	count=1
function	[function_1] values of ||| [function_2] [function_1]	count=2
module	the ||| contrib factorization python	count=1
module	from the files ||| tools docs	count=1
function	by combining all pixels ||| pixels	count=1
class	a table outputs the ||| interface	count=1
function_arg	[function_1] example protos ||| [function_1] queue [arg_2]	count=1
function_arg	[function_1] [arg_2] pass results through ||| contrib bayesflow examples reinforce_simple [function_1] merge [arg_2]	count=1
function	of ||| texts to sequences	count=1
arg	by adding compression to ||| histo_ev bps	count=1
function_arg	[function_1] loaded from ||| [function_1] [arg_2]	count=1
function	of status ||| status	count=1
class	dump root ||| debug dump	count=1
class	[class_1] degree ||| [class_1] [class_2]	count=1
module	a debug ||| python debug	count=1
arg	whether two ||| a	count=1
module	computes ||| contrib metrics python ops	count=1
function	the condition based on ||| pick scalar condition	count=1
class	check to make sure ||| test upgrade	count=1
function	constants ||| to constants	count=1
module	tensors that with ||| python learn	count=1
arg	[arg_1] + ||| [arg_2] [arg_1]	count=12
arg	using tf nn sigmoid_cross_entropy_with_logits ||| multi_class_labels weights label_smoothing	count=1
function	and creates ||| init	count=1
function	[function_1] tags ||| [function_2] [function_1]	count=1
function	rnn and apply ||| rnn	count=1
function	[function] [n1 ,nn ||| [function]	count=1
function_arg	for a [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] global ||| [function_1] [function_2]	count=1
arg	with projected ||| with_c	count=1
function	[function_1] as tf ||| [function_1] to [function_2]	count=2
module	a sparse slice of ||| ops	count=1
module	dataframe into ||| dataframe	count=1
class	stack is ||| default graph stack	count=1
function	and no scores ||| signature def classification6	count=1
module	g ||| framework	count=1
function	create a slimrnncell ||| init	count=1
function	inputs for sequence models ||| sequence input	count=1
function_arg	[function_1] [arg_2] ||| [function_1] duplicate indices [arg_2]	count=4
module	check ||| training python training	count=2
module	sequence of integers ||| keras python keras preprocessing	count=1
module	and ||| learn preprocessing	count=2
function	node stepper ||| node stepper	count=1
function	strategies with ||| strategies	count=1
module	x + loc ||| distributions python ops	count=1
function_arg	shape from ||| shape expected_tensor tensor	count=1
module	previous ||| contrib grid_rnn python	count=1
function	whether to verify that ||| verify	count=2
function	values [function_2] ||| [function_1] [function_2]	count=4
module	a 1 ||| ops	count=4
function	feature column ||| column	count=1
function	example proto ||| example proto	count=1
function_arg	the processor [arg_2] ||| [function_1] [arg_2]	count=1
function	internal implementation ||| load internal	count=1
arg	[arg_1] [arg_2] ||| [arg_1] [arg_2]	count=1127
function	op for ||| training op	count=2
function	kl divergence ||| kl	count=1
arg	of tensor ||| tensor	count=1
function	header for ||| header from ops and	count=1
function	and numpy ||| versus numpy	count=1
module	version with ||| learn	count=1
function	and merge ||| apply merge	count=1
class	add ||| clidebug wrapper session	count=1
function	then return tensor ||| sample	count=1
class	feature for ||| feature	count=1
function_arg	return index [arg_2] ||| [arg_2] [function_1]	count=1
module	safe ||| ops losses	count=1
class	the stack is empty ||| stack	count=1
function	if all ||| type	count=1
function	a file system race ||| inplace	count=1
function	specify a fixed number ||| fixed size	count=1
arg	in given ||| output_dir	count=1
arg	the given event ||| event	count=1
function	at the boundary ||| boundary ts	count=1
module	of the ||| contrib	count=1
module	of a call ||| python ops	count=1
module	of each ||| ops	count=1
module	and stopping ||| contrib slim python slim	count=1
function	extract output ||| extract output	count=1
function	dfs traversal of a ||| dfs from node	count=1
function	[function_1] information for ||| [function_1] [function_2]	count=2
function	caching ||| test caching	count=1
function_arg	[function_1] the losses ||| [function_1] [arg_2]	count=4
module	parameter p is ||| distributions	count=1
function	bias weight with other ||| bias and other	count=1
arg	from_proto functions [arg_2] ||| [arg_2] [arg_1]	count=1
function	creates variables and ||| create	count=1
function	linked to ||| filter ts	count=1
function	[function_1] [function_2] ||| [function_1] [function_2]	count=9357
function	on other subclassses ||| test interactive	count=1
arg	control_inputs and control_outputs ||| control_inputs control_outputs control_ios	count=3
function	representation of this ||| get resource	count=1
function	values then ||| valid	count=1
function	a mix of features ||| optimizer mixed features	count=1
class	proximal gradient descent ||| proximal gradient descent	count=3
function	a checkpoint from ||| checkpoint from	count=1
arg	appearing in ||| log_p q alpha	count=1
module	labeled ||| labeled_tensor python	count=3
function	work units ||| work units completed	count=1
function	11-layers version a example ||| a	count=1
arg	sgv0 and [arg_2] ||| [arg_1] [arg_2]	count=1
function	predictions ||| to predictions	count=4
function	return dict symbol name ||| build	count=1
function	to restore variables from ||| restore ops	count=1
function	[function_1] normal distribution ||| [function_2] conjugates known scale [function_1]	count=1
module	this ||| python kernel_tests	count=1
function	[function_1] along ||| [function_1] [function_2]	count=8
function	a sine [function_2] ||| [function_2] [function_1]	count=2
arg	make sure the ||| wait_for_checkpoint	count=1
arg	each tensor in tensor_list ||| tensor_list num_epochs shuffle seed	count=1
function	to a sequence of ||| sequence	count=1
module	of images by a ||| python ops	count=1
arg	op ||| scope op	count=1
module	in the sense of ||| linalg python ops	count=2
module	of tensors that ||| contrib framework python ops	count=1
arg	batches ||| tensors_list batch_size	count=2
function	generate class ||| classes	count=1
arg	whether pending inputs ||| pending	count=1
function_arg	[function_1] forward propagation ||| [function_1] [arg_2]	count=4
function	builds a stack ||| stack	count=1
module	verifies ||| learn python learn estimators	count=1
class	local debugger ||| dumping	count=1
function	[function_1] recipients ||| [function_2] [function_1]	count=1
arg	appearing in ||| log_p q	count=1
module	constructor of ||| python debug wrappers	count=1
function	[function_1] [function_2] a ||| [function_2] [function_1]	count=6
function	new seed from the ||| new	count=1
arg	[arg_1] values ||| [arg_1] [arg_2]	count=2
module_class	output [class_2] ||| [module_1] output [class_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] tag [arg_2]	count=1
arg	kernel tensors ||| kernel	count=1
function	table ||| index table	count=1
function	used to ||| lengths to	count=1
module	transforms ||| python keras	count=1
function	tests if ||| is	count=1
function	gradient function ||| grad	count=1
function	example indices represented ||| example indices	count=1
function	constants of ||| constants	count=1
function	a dict into ||| dict to	count=2
function_arg	sparsetensor [arg_2] ||| [function_1] tensor [arg_2]	count=1
function	id ||| id	count=4
function	a device function ||| device	count=1
function	all inputs of the ||| inputs tensor info	count=1
module	values will be produced ||| python	count=1
module	computes output tensors ||| keras python keras engine	count=1
function	or indexedslices objects ||| or indexed slices	count=2
class	of the pooling ||| pooling	count=4
arg	[arg_1] a audio ||| [arg_2] [arg_1]	count=1
function	all the data attributes ||| all resources	count=1
function	bias weight ||| bias	count=1
arg	that would ||| batch_size num_epochs	count=1
module	returns ||| contrib layers python layers	count=6
arg	given predictions ||| predictions	count=1
function	column of a ||| cols	count=2
function_arg	[function_1] value ||| [function_1] epsilon [arg_2]	count=1
function	inner cell used ||| cell	count=1
function	[function_1] [function_2] ||| [function_2] update [function_1]	count=3
class	model for matrix factorization ||| factorization	count=1
arg	[arg_1] of sgv1 ||| [arg_2] [arg_1]	count=1
function	device for ||| device function	count=1
function_arg	control outputs [arg_2] ||| [arg_2] [function_1]	count=1
arg	if op was marked ||| op	count=1
module	based ||| contrib testing python framework	count=1
arg	a list of tensors ||| cls tensors	count=1
module	return tensor version ||| distributions	count=1
function	and stores trace ||| trace info	count=1
function	is a ||| is diag	count=1
function	values then return ||| valid sample	count=1
function_arg	from context_def ||| from proto context_def	count=1
function	can save and ||| save load	count=1
module	constructor ||| debug	count=1
function_arg	[function_1] run ||| [arg_2] [function_1]	count=5
arg	2-d matrix based on ||| input_matrix	count=2
module	a sequence of integers ||| contrib	count=1
arg	between predictions, [arg_2] ||| [arg_2] [arg_1]	count=1
module	5 inputs of ||| ops	count=1
function	to read queue batch ||| read batch examples	count=1
module	returns a ||| python layers	count=1
function_arg	[function_1] the predictions ||| [arg_2] [function_1]	count=3
module	with training ||| learn estimators	count=1
function	string_to_hash_bucket op to use ||| to hash bucket fn	count=1
class	watch ||| watch	count=1
module	of ||| contrib seq2seq python ops	count=7
function_arg	automatically [function_1] [arg_2] textbox ||| cli curses ui auto [function_1] [arg_2] erase_existing	count=2
class	have a ||| upgrade files	count=1
class	input projection and then ||| input projection wrapper	count=1
function	flops ||| get logged	count=1
function	with at [function_2] ||| [function_1] [function_2]	count=3
class	output tensor ||| export output	count=1
arg	and concatenates n elements ||| n name	count=1
function	[function_1] a while ||| [function_2] [function_1]	count=7
function	value type ||| value	count=1
function	transforms ||| transform	count=1
function	full batch ||| full batch	count=1
module	that graph building doesn't ||| contrib tensor_forest hybrid python	count=1
function_arg	[function_1] loop ||| [function_1] exit [arg_2]	count=1
function	object's docstring ||| md docstring	count=1
function	creates logistic [function_2] ||| [function_1] [function_2]	count=3
function	maps input key ||| preprocess input	count=1
function	on a list of ||| fit on	count=1
function	create an instance of ||| init	count=1
module	and previous ||| grid_rnn python	count=1
arg	line of ||| line	count=2
function_arg	[function_1] state-saving ||| [arg_2] [function_1]	count=6
module	cross-entropy loss using ||| losses	count=2
function	to specified invalid indices ||| invalid indices	count=1
function	pulls [function] ||| [function] from	count=2
arg	tensorflow ||| ignore_dtype	count=1
function_arg	confusion matrix [arg_2] ||| [function_1] labels [arg_2]	count=2
function	adds the [function_2] ||| [function_2] [function_1]	count=4
function_arg	docstring and [arg_2] ||| [arg_2] [function_1]	count=1
function	for ||| maybe assert	count=1
module	gets the list of ||| ops	count=7
module	and ||| contrib learn python learn dataframe	count=2
function	[function_1] relative error ||| [function_2] [function_1]	count=4
function_arg	[function_1] sgv0 and ||| [arg_2] [function_1]	count=1
module	each ||| python	count=1
function	[function_1] correlation coefficient ||| [function_1] [function_2]	count=1
module	convert ||| contrib session_bundle	count=1
function	values then return tensor ||| assert	count=1
function	creates a hook ||| hook	count=1
arg	runs a microbenchmark to ||| target iters	count=2
function	inputs to [function_2] ||| [function_2] without [function_1]	count=1
function	function with ||| function with	count=2
arg	to variabledef ||| export_scope	count=1
function	in the sharded ||| sharded	count=1
arg	whether actual_tensor's ||| actual_tensor actual_shape	count=1
function	start threads for ||| start	count=1
class	inference from the graph ||| graph	count=1
arg	row ||| cls rows cols	count=1
function	sets [function_2] ||| [function_1] save [function_2]	count=1
function	swap ||| swap	count=2
function	size of ||| size	count=3
function	np matrix ||| np matrix	count=1
function	creates classification [function_2] ||| [function_1] [function_2]	count=2
class	cudnn to ||| cudnn rnn	count=1
module	and previous output tensors ||| grid_rnn	count=1
function	gets an existing variable ||| get variable	count=1
function	[function_1] of tags ||| [function_1] unique [function_2]	count=1
function	projections of ||| projections	count=1
arg	in a scrollable ||| is_refresh highlight_regex	count=1
module	inputs of ||| python ops	count=3
module	print ||| python tools tfprof	count=1
function	output values of the ||| values	count=1
arg	block_shape ||| block_shape	count=1
class	with the specified ||| decoder test	count=1
module	and ||| python	count=1
arg	the specified dimension to ||| dim epsilon scope	count=1
arg	with provided evaluation ||| feed_fn	count=1
function	outputs in ||| outputs	count=2
function	[function_1] image ||| [function_2] [function_1]	count=3
module	and return ||| learn preprocessing	count=1
function	of a deconv ||| deconv	count=1
module	has ||| python ops	count=1
function	scale matrix [function_2] ||| [function_2] [function_1]	count=1
function	for an exit op ||| exit	count=1
class	multivariate normal ||| multivariate normal tri	count=1
function	for input [function_2] ||| [function_2] [function_1]	count=8
module	verifies file_io directory ||| tools gcs_test python	count=1
function	[function_1] checkpoint ||| [function_1] [function_2]	count=13
function	mean [function_2] ||| [function_2] [function_1]	count=12
function	needed ||| remove	count=1
function	linear_model_fn but returns modelfnops ||| model fn with model fn	count=2
function_arg	writes metagraphdef [arg_2] ||| [arg_2] [function_1]	count=1
module	linear ||| rnn python ops	count=1
function	arguments ||| arguments	count=2
function	returns a tuple ||| tuple	count=1
function	node with a ||| node	count=1
arg	tensor_list ||| tensor_list threads	count=1
function	true positives for ||| streaming sparse true positive	count=1
module	the vocabulary dictionary and ||| learn	count=2
function	[function_1] variable ||| [function_2] [function_1]	count=20
function	a restart is detected ||| restart for file version less than2	count=1
function	[function_1] value ||| python feature_column check [function_1] [function_2]	count=2
module	[module_1] the ||| [module_2] [module_1] reshape	count=1
function	satisfied ||| satisfied	count=1
function_arg	to values [arg_2] ||| [arg_2] [function_1]	count=2
arg	pads 5d tensor ||| x padding data_format	count=2
arg	tensors for given feature_columns ||| feature_columns	count=1
module	estimate ||| python training	count=1
function	l1 regularization ||| l1reg	count=1
function	return the init op ||| init op	count=1
function	returns the shape ||| shape internal	count=1
class	queue when ||| queue runner	count=1
function	predictions ||| at k	count=2
function	kl ||| compute non batch kl	count=1
function	each call to run() ||| run	count=1
arg	necessary to ||| layer node_index	count=1
function	specific plugin [function_2] ||| [function_1] [function_2]	count=3
module	sequence-to-sequence ||| contrib legacy_seq2seq python	count=2
function	a slice of ||| slice	count=1
function	a ||| get	count=1
module	rank of ||| contrib metrics python ops	count=1
function	[function_1] non-overlapping lanes ||| [function_2] [function_1]	count=1
module_class	[module_1] area ||| [module_1] staging [class_2]	count=1
function	creates a _sparsecolumn [function_1] [function_2] ||| python layers sparse column [function_1] [function_2]	count=2
function	a metagraphdef proto ||| meta	count=1
module	for ||| python framework	count=2
function_arg	[function_1] activations ||| [function_1] [arg_2]	count=2
function	name of an ||| name	count=1
class	of this ||| handle	count=1
function	for planes ||| one hot planes	count=1
function	to the debug ops ||| debug ops	count=1
function	values from a dictionary ||| from	count=1
function	expected results for gamma ||| gamma greater	count=1
class	determinant ||| linear operator	count=2
function	[function_1] from the ||| [function_2] [function_1]	count=9
function	[function_1] save variables ||| [function_2] [function_1]	count=1
function	return the transformed ||| transformed	count=2
class	the grad ||| grad loop	count=1
module	the given ||| contrib slim python	count=1
function	absolute value [function_2] ||| [function_1] [function_2]	count=1
module	that ||| contrib	count=1
arg	constructs ||| reparameterization_type	count=1
function	returns local [function_2] ||| [function_2] [function_1]	count=1
arg	c_prev [arg] ||| inputs c_prev [arg]	count=2
class	loop ||| grad loop	count=1
arg	imports the ||| input_map return_elements name	count=1
arg	parameters ||| input_size use_peepholes	count=1
class	op that [class_2] ||| [class_1] [class_2]	count=1
module	from 'run_meta' ||| tools tfprof	count=1
function	[function_1] l1 regularization ||| [function_1] [function_2]	count=1
function	initializes ||| init	count=31
module	building doesn't modify the ||| hybrid python models	count=1
class	by this operator ||| linear operator scaled identity	count=1
arg	[arg_1] evaluable evaluable ||| [arg_1] [arg_2]	count=2
class	remove ||| node stepper	count=1
function_arg	[function_1] of sequences ||| [function_1] matrix [arg_2]	count=1
function	an op [function_2] ||| [function_2] [function_1]	count=2
function	as ||| as	count=1
function	returns ||| get collection proto	count=1
function_arg	[function_1] g input_tensors) ||| [arg_2] [function_1]	count=2
function	transforms each ||| texts to	count=1
module	each ||| preprocessing	count=1
function	directory for tests to ||| dir	count=1
function	for second test ||| test	count=1
arg	kernellinearclassifier estimator object ||| n_classes weight_column_name	count=1
arg	for recall@k and precision@k ||| predictions_idx k class_id	count=1
arg	control_inputs ||| control_inputs	count=1
class	from ||| flow data frame	count=1
module	list of tensors that ||| distributions python ops	count=2
module	of a given factorization ||| factorization python ops	count=1
function	for ops [function_2] ||| [function_2] [function_1]	count=1
function	recursively with control ||| recursive with controls	count=1
module	labeled tensors ||| contrib labeled_tensor	count=3
class	these student's t ||| vector student t	count=2
class	glimpse extraction kernel ||| extract glimpse	count=1
function	returns the proto_type ||| collection	count=1
function	shape values ||| assert valid sample	count=1
module	ops created ||| python ops	count=1
module	a numpy array ||| contrib keras python keras	count=1
function	the presence of python ||| loop grads	count=1
function_arg	[function_1] batch ||| [arg_2] [function_1]	count=3
function	resultant of an ||| compute elemwise op	count=1
function	the first operation ||| first op	count=2
class	batch ||| next queued sequence batch	count=1
arg	of rate ||| rate	count=1
function	this test [function_2] ||| [function_2] [function_1]	count=1
arg	(< 0) from the ||| sparse_ids sparse_weights	count=1
function	other subclassses ||| test interactive	count=1
function	a sparse tensor ||| sparse	count=1
function	rnn model ||| get dynamic rnn model	count=1
function	experiment ||| experiment	count=2
class	the shape ||| tensor shape	count=1
function	[function_1] in ||| [function_1] [function_2]	count=1
function	when one [function_2] ||| [function_1] [function_2]	count=3
module	for the [module_2] ||| [module_2] [module_1]	count=2
function	merges the tensor from ||| merge	count=1
function	for bilinear resizing ||| resize bilinear grad	count=1
function	gets the asset ||| asset	count=1
function	a restricted ||| joint weighted sum from	count=1
arg	checkpoint in checkpoint_dir and ||| checkpoint_dir	count=1
function	compute the number ||| size	count=3
module	batch of beams into ||| seq2seq python ops	count=1
module	lists of ||| python ops	count=1
arg	the second-order gradients ||| input_sizes output_sizes window_rows	count=1
function	same as linear_model_fn but ||| with model fn	count=2
class	cli [class_2] ||| [class_2] [class_1]	count=1
arg	constructed nodes ||| args screen_info	count=1
arg	the labels and predictions ||| labels predictions	count=3
module	learn the vocabulary ||| contrib	count=1
function	servers ensures appropriate communication ||| servers one	count=1
arg	[arg_1] call func ||| [arg_2] [arg_1]	count=1
class	proximal gradient ||| proximal gradient	count=2
function	routingfunction ||| routing function gradient	count=2
function	legend for node-status ||| status label legend	count=1
function_arg	placeholder [arg_2] ||| [function_1] [arg_2]	count=1
class	into sample, batch, event ||| distribution	count=1
function	[function_1] an ||| [function_2] [function_1]	count=1
arg	steps ||| inputs noutput scope	count=1
module	in the sense of ||| contrib linalg python	count=2
module_class	this sparse ||| python framework sparse	count=1
class	[class] histoyr ||| curses [class]	count=1
arg	and fetches for ||| fetches	count=2
module	of a function ||| contrib labeled_tensor python ops	count=1
function_arg	colocate with [arg_2] ||| [function_1] [arg_2]	count=5
module	return indexies ||| contrib learn python learn preprocessing	count=1
function	for input with shape=[2] ||| two input values	count=3
class	table outputs the corresponding ||| initializable lookup table	count=1
class	parse ||| device spec	count=1
function	execute the ||| execute	count=1
class	normal distribution on ||| normal tri	count=1
class	optimizer from ||| optimizer	count=1
module	transforms each ||| keras preprocessing	count=1
function	weight variable ||| weight	count=1
module	normal ||| ops distributions	count=1
function	within the scope ||| scope	count=1
function	created from ||| from proto	count=2
arg	given value to a ||| value	count=3
arg	ts0 ||| ts0	count=1
arg	[arg_1] if colocate_gradients_with_ops ||| [arg_1] [arg_2]	count=1
class	this plugin ||| plugin	count=3
function	test function ||| test function	count=2
function	state saver for ||| state	count=1
class	initializes ||| at step hook	count=1
function	[function_1] sparsetensor ||| [function_1] [function_2]	count=5
function	directory recursively walks ||| directory	count=1
function_arg	[function_1] sharded ||| [function_1] weights [arg_2]	count=3
class	purge ||| event accumulator	count=1
function	all ||| with all resources	count=1
class	tensor in the given ||| tensor	count=1
arg	key ||| key	count=3
function	concatenation has ||| hashed output v2 has	count=1
module	imagenet ||| python keras applications	count=2
class	a menuitem from the ||| menu	count=1
arg	use a gradient-based optimizer ||| features labels mode params	count=1
function	rank rfft ||| infer fft length for rfft	count=1
function	sparse integer ||| sparse int	count=2
arg	it may be used ||| inp num_clusters hidden1_units hidden2_units	count=1
arg	few dummy ||| tag n_audio	count=1
function	an override ||| allowing override	count=1
function	create ||| maybe create control	count=1
arg	of side_effects ||| side_effects	count=3
function	files ||| guide	count=1
module	produced or none ||| python	count=1
function_arg	shape function ||| shape unused_op	count=1
function	of unique ||| unique fetches	count=1
arg	from state ||| state	count=2
arg	or list of tensors ||| tensors	count=1
function	print function ||| tf print	count=1
module	the tfprof ||| tfprof	count=1
function	for all inputs of ||| inputs tensor info from meta	count=1
module	a ||| cli	count=1
function	boolean series for ||| series	count=1
arg	[arg_1] to var ||| [arg_1] [arg_2]	count=2
module	image s ||| contrib image python	count=1
function	dnn-linear combined model ||| dnnlinear combined bug	count=1
module	name of the ||| python framework	count=1
function	one evaluation ||| eval	count=1
function_arg	assert that [arg_2] ||| [function_1] integer form [arg_2]	count=2
function	the partition graphs ||| partition	count=1
function	to build a ||| build	count=1
function	the concatenate layer ||| concatenate	count=1
function	tensors linked to ops ||| ts from	count=1
function	the debug_urls value for ||| urls	count=1
arg	input samples ||| batch_size verbose	count=3
function_arg	[function_1] to runoptions ||| [function_1] watch [arg_2]	count=3
class	get ||| class test	count=2
function	generates the ||| generate	count=1
function	[function_1] csv ||| [function_1] [function_2]	count=2
function	transform ||| transform	count=3
function_arg	python file [arg_2] ||| [arg_2] [function_1]	count=1
function	rows/cols can evenly divide ||| divisible	count=2
module	of operators ||| contrib	count=1
module	of ||| python ops losses	count=2
function	[function_1] history ||| [function_1] [function_2]	count=4
function	to be ||| prepare or wait for session	count=1
function	[function_1] relative ||| [function_1] [function_2]	count=4
function	for the 2d convolution ||| conv2d	count=1
class	single ||| event	count=1
module_class	[module_1] underlying ||| [module_1] ops conditional accumulator [class_2]	count=1
function	as an operation or ||| as	count=1
module	flattens ||| python ops	count=1
function	node ||| final node	count=1
function	that [function_2] ||| [function_2] [function_1]	count=10
arg	[arg_1] [arg_2] ||| [arg_1] biases [arg_2]	count=6
function	sparsecolumns accept dense scalar ||| sparse column accepts dense scalar	count=1
class	the vocabulary after which ||| vocabulary	count=1
function	test data ||| test	count=1
function	synthetic boolean_labels and scores ||| synthetic	count=1
function	all ||| ts	count=1
function	return dict symbol name ||| build guide index	count=1
function	a function for converting ||| conversion function	count=1
function	to ops that ||| ts from	count=1
function	an exit op ||| exit grad	count=1
function	invalidate the cached tensor ||| invalidate transitively outgoing cache	count=1
function	get the value ||| get tensor value	count=2
function	and conv2d produce the ||| compare fwd conv2d	count=1
function	dict symbol ||| build	count=1
arg	the input samples ||| x batch_size verbose	count=3
function	integers ||| texts to sequences	count=1
function	real valued features ||| real valued linear features	count=2
function	probability of a 1 ||| probs	count=1
class	[class_1] and provide ||| [class_2] [class_1]	count=10
function	[function_1] phase and ||| [function_2] [function_1]	count=4
module	dictionary and return ||| learn	count=2
class	callback ||| base debug wrapper session	count=1
function_arg	to [arg_2] ||| [function_1] file [arg_2] contents	count=1
function	computes various recall values ||| streaming recall at thresholds	count=1
function	tensor to use for ||| parse data tensor or dict	count=1
arg	dtype and returns ||| dtype	count=1
function	[function_1] graph ||| [function_2] [function_1]	count=19
class	tfrecordreader ||| tfrecord reader	count=1
function	utility function to build ||| build	count=1
arg	the given table with ||| table	count=1
arg	for details ||| parent children	count=1
function	[function_1] flow context ||| [function_1] [function_2]	count=4
arg	from elems ||| fn elems initializer	count=6
function	layer ||| get layer	count=2
module	variable ||| keras	count=3
module	of an ||| python ops	count=2
module	[module_1] this ||| [module_1] [module_2]	count=24
function_arg	[function_1] by gen_parsing_ops ||| [arg_2] [function_1]	count=6
class	make ||| freq lstmcell	count=1
function	[function_1] root directory ||| [function_1] [function_2]	count=1
function	sessionrunhook raises typeerror ||| hooks type	count=1
function	and a depth ||| depth	count=2
function	default signature to object ||| default signature to signature def	count=1
module	feeding ||| python training	count=1
function	within an arg_scope ||| arg	count=1
function	function to train ||| train	count=1
function	a log ||| log	count=1
arg	node ||| node	count=2
arg	lstm across all steps ||| noutput scope	count=1
function	that labels outside the ||| labels	count=3
module	dimensions of zero ||| linalg python ops	count=1
function	[function_1] [function_2] ||| [function_2] embedding [function_1]	count=1
module	numpy array ||| python keras	count=1
function	[function] matching ||| [function] or	count=1
module	batch matrix representing this ||| ops	count=1
module	a dataframe into two ||| python learn dataframe	count=1
function	status labels for a ||| status labels	count=1
function	to a richtextlines ||| text lines from rich	count=1
module	dictionary and return ||| contrib learn python	count=1
function	1-hot encodings for planes ||| one hot planes	count=1
function	both dense and ||| dense and	count=1
module	the core version with ||| python learn learn_io	count=1
function	automatically [function_1] [function_2] ||| [function_1] [function_2]	count=4
module_class	data [class_2] ||| [module_1] [class_2]	count=1
module	variable and ||| python keras	count=1
module	constructor ||| export	count=1
arg	concentration and [arg_2] ||| [arg_2] [arg_1]	count=2
arg	the "passthrough" ||| inside_ops passthrough_ts	count=1
module	concatenates ||| python ops distributions	count=1
function	placeholder tensor ||| with placeholder	count=1
function	importance sampling with ||| importance	count=1
function_arg	up to [arg_2] ||| [function_1] [arg_2]	count=1
arg	from a debug-dumped ||| node_name output_slot debug_op	count=1
function	sessionrunhook ||| hooks	count=1
function	server and ||| server	count=1
function	[function_1] indexedslices objects ||| [function_1] [function_2]	count=5
module	dimension [module] tensor into ||| [module]	count=1
function_arg	add val ||| add value val	count=1
function	and evaluates ||| evaluate	count=1
arg	operator on [arg_2] ||| [arg_1] [arg_2]	count=1
function	[function_1] sparsetensordensematmul ||| [function_1] dense [function_2]	count=1
function	the same ||| same	count=2
function_arg	attribute [arg_2] ||| [arg_2] [function_1]	count=2
class	a dense tensor ||| sparse feature	count=2
module	batch version of ||| distributions	count=1
arg	the given serialized ||| serialized_example item_handler image_format	count=1
module	and return ||| learn	count=2
function	[function_1] initialize ||| [function_2] col update [function_1]	count=1
function_arg	[function_1] printtensor monitor ||| [function_1] [arg_2]	count=1
function	partition ||| dump	count=1
arg	slice tensor shape in ||| tensor	count=1
arg	returns the frequency-weighted ||| axes frequency_weights name	count=1
module	internal vocabulary based ||| keras preprocessing	count=1
module	add debug ||| python debug lib	count=1
function	dict symbol ||| build guide index	count=1
module	outcome (vs ||| distributions	count=1
arg	[arg_1] single tensor ||| [arg_2] side_effects [arg_1]	count=6
function_arg	[function_1] an estimator ||| [arg_2] [function_1]	count=5
function	block ||| resnet v1 block	count=1
module	list of tensors ||| contrib factorization python ops	count=4
module_class	new coordinator ||| python training coordinator	count=1
function	load session bundle ||| load session bundle or saved model bundle	count=1
function	a binary [function_2] ||| [function_1] [function_2]	count=2
module	training ||| contrib learn python learn estimators	count=1
function	get a ||| get	count=7
arg	onrunendrequest ||| performed_action run_metadata client_graph_def tf_error	count=1
module_class	of [class_2] ||| [module_1] operator [class_2]	count=2
function	string_to_hash_bucket op to use ||| get string to hash bucket	count=1
function	return tensor version ||| sample	count=1
module	if all are ||| python estimator	count=1
function	closes ||| close	count=3
arg	provided 'op_log', and ||| graph log_dir op_log run_meta	count=1
function	generate a new seed ||| gen new	count=1
module	sequence of ||| python keras	count=1
function	p x >= elbo ||| elbo	count=1
module	for decode_gif, decode_jpeg, and ||| ops	count=1
function_arg	summary file [arg_2] ||| [arg_2] [function_1]	count=4
function	dump [function_2] ||| [function_2] [function_1]	count=4
arg	tensors stochastically resamples each ||| rates scope seed	count=1
function	input arg [function_2] ||| [function_2] [function_1]	count=1
class	the value should be ||| stochastic value type	count=1
arg	handle syncreplicaoptimizer initialization ops ||| sync_optimizer is_chief num_tokens	count=1
function	for the given ||| call	count=1
arg	[arg_1] colocate_gradients_with_ops ||| [arg_2] [arg_1]	count=1
function	queue ||| queue	count=5
class	head for [class_2] ||| [class_2] logistic [class_1]	count=1
function	[function_1] placeholder ||| [function_1] [function_2]	count=4
function_arg	a merge [arg_2] ||| [function_1] [arg_2]	count=1
arg	between predictions, [arg_2] ||| [arg_1] [arg_2]	count=1
arg	features ||| features	count=1
arg	[arg_1] audio ||| [arg_1] [arg_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] accumulator [arg_2]	count=3
function	first dimension of ||| first dimension	count=1
function_arg	rfft [arg_2] ||| [function_1] [arg_2]	count=1
function	a sequence of ||| texts to	count=1
function	copy of ||| copy	count=2
module	building doesn't ||| hybrid python models	count=1
function	[function_1] of sparse_column_with_vocabulary_file ||| [function_2] [function_1]	count=2
function_arg	predictions for [arg_2] ||| [function_1] classes [arg_2]	count=1
function	link for a ||| link	count=2
function	finish the update ||| finish	count=1
arg	feature_values ||| feature_values	count=1
module_class	[module_1] [class_2] ||| [module_1] input [class_2]	count=1
class	sure we don't have ||| test upgrade	count=1
function	shape of the output ||| test output shape	count=1
function	backprop ||| back prop	count=1
function	variation for [function_2] ||| [function_2] [function_1]	count=1
function	object the default ||| default	count=1
function	creates the [function_2] ||| [function_1] [function_2]	count=3
function	the raw [function_2] ||| [function_1] [function_2]	count=1
function	time interval ||| time interval	count=2
function	plugins that have registered ||| plugins	count=1
function	returns input [function_2] ||| [function_1] [function_2]	count=2
module	data as ||| contrib learn python learn estimators	count=4
module	output tensors for ||| keras engine	count=1
module	initialize a batch of ||| distributions python ops	count=1
module	return indexies ||| learn python learn	count=1
arg	that subscribes a single ||| control_cache	count=2
class	make sure we don't ||| files	count=1
module	nested tuple of integer[s] ||| python ops	count=1
function	the main menu ||| main menu	count=2
module	distribution ||| contrib distributions python ops	count=3
arg	according to [arg_2] ||| [arg_2] [arg_1]	count=1
function	returns prediction ||| get predict	count=3
function	[function_1] vectors ||| [function_1] [function_2]	count=1
function	build an index ||| build doc index	count=1
module	dense ||| contrib layers python ops	count=1
function	run ops in the ||| run	count=1
function	single batch of samples ||| test on batch	count=1
class	sure we don't have ||| files	count=1
module	loss using tf nn ||| python ops losses	count=1
module	command prefix but invalid ||| debug cli	count=1
arg	prior on ||| prior scale s n	count=1
function	return tensor ||| sample	count=1
function	shear ||| shear	count=1
class	prepare ||| node stepper	count=1
module	layers by ||| python layers	count=1
function	flow end event to ||| flow end	count=1
function_arg	[function_1] of cursesui ||| [function_1] debug_dump tensor_filters ui_type [arg_2]	count=1
arg	to rank ||| rank	count=2
arg	in tensors ||| tensors	count=1
function	life time of ||| enter	count=1
arg	a highwaywrapper for cell ||| cell couple_carry_transform_gates carry_bias_init	count=1
arg	audio by adding ||| audio	count=1
function	dtype based ||| base	count=1
module	dictionary and return ||| contrib learn python learn preprocessing	count=1
module	from a ||| learn python learn estimators	count=1
class	dnn weights ||| dnnlinear combined classifier	count=1
function	the ||| collection	count=1
function	in the forward ||| forward	count=1
function	sequence ||| texts	count=1
module	transform that wraps a ||| learn dataframe transforms	count=1
function	servers ||| servers	count=2
function	distance to the ||| distance to clusters	count=2
function	search [function_2] ||| [function_1] [function_2]	count=4
function	tensor ||| format tensor	count=1
function	and real valued features ||| real valued features	count=1
class	of hparams ||| hparams	count=1
function	to search ||| search with	count=1
function	partitioned variables ||| partitioned variables	count=8
function	have no [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] collection names ||| [function_1] [function_2]	count=1
arg	the graph to be ||| graph	count=1
function	/data/scalars ||| scalars	count=1
class	a single ||| to event	count=1
class	an event file ||| to event transformer	count=1
function	it works fine [function_1] [function_2] integer type ||| [function_2] [function_1]	count=1
function	to ops that ||| ts from regex	count=1
function	digamma function psi_p ||| multi digamma	count=1
module_class	[module_1] kmeans algorithm ||| [module_1] [class_2]	count=2
function_arg	add [arg_2] ||| [function_1] back prop accumulator [arg_2]	count=1
arg	x = ||| x name	count=1
module	and then the cell ||| contrib rnn python ops	count=1
function	creates linear ||| linear	count=1
arg	a tensor with ||| tensor	count=1
function	are discarded after ||| expired data discarded after	count=1
arg	[arg_1] of targets ||| [arg_2] [arg_1]	count=8
function	[function_1] operation from ||| [function_2] [function_1]	count=3
function	tags found in the ||| tags	count=1
arg	for collection_name ||| collection_name	count=2
function	define a binary operation ||| define binary op	count=1
arg	imports the graph from ||| input_map return_elements name	count=1
function_arg	[function_1] [arg_2] ||| [function_1] node_name [arg_2]	count=3
module	to the training procedure ||| losses python losses	count=1
function	from csv file without ||| csv without	count=1
arg	value to ||| value dtype name	count=1
arg	interface for transposed ||| filters kernel_size strides	count=1
class	concrete ||| non interactive debug wrapper	count=1
function	lists the [function_2] ||| [function_2] [function_1]	count=1
function	tag sequence ||| crf sequence	count=1
function	the vocabulary dictionary ||| fit	count=1
class	vocabulary dictionary and return ||| processor	count=1
arg	objects of base_type ||| base_type conversion_func	count=1
function	[function_1] all tables ||| [function_2] [function_1]	count=4
class	assigned gaussian ||| gmm algorithm	count=1
module	to ||| python summary	count=2
arg	transform numeric labels into ||| labels	count=1
module	returns ||| tensorboard backend event_processing	count=1
class	vocabulary dictionary ||| categorical processor	count=1
arg	in x to ||| x	count=1
function	check if ||| check	count=2
arg	looperthread that calls a ||| timer_interval_secs target args kwargs	count=1
function	root mean squared ||| streaming root mean squared	count=1
arg	[arg_1] line ||| [arg_2] [arg_1]	count=8
function	graph-level random ||| random	count=1
function	impose desired [function_2] ||| [function_2] [function_1]	count=4
class	an invalidargumenterror ||| invalid argument error	count=1
function	is a quantized ||| quantized	count=1
function	the row [function_2] ||| [function_2] [function_1]	count=1
arg	rate ||| rate	count=4
function	[function_1] fields ||| [function_1] [function_2]	count=2
function	tfdbg ||| get tfdbg	count=1
module	that match ||| contrib	count=1
module	produces this ||| python framework	count=1
function	[function_1] vector with ||| [function_1] [function_2]	count=7
function	dynamic ||| matrix dynamic	count=1
arg	for sparsedensecwise{mul div} gradients ||| grad is_mul	count=1
class	or none ||| slices	count=1
function	all are ||| check	count=1
function	[function_1] trigger ||| [function_2] [function_1]	count=1
function	bytes ||| bytes	count=3
function	create test input tensor ||| create test input	count=1
function_arg	[function_1] the output ||| [function_1] shape [arg_2]	count=1
function	to a richtextlines object ||| rich text lines from rich line	count=1
function	probably a [function_2] ||| [function_2] [function_1]	count=2
arg	based on the ||| args weight_collections	count=1
function_arg	[function_1] tensors into ||| [function_1] [arg_2]	count=1
module	distribution ||| ops distributions	count=3
module	training and ||| python learn	count=1
module	a function [module_2] ||| [module_2] [module_1]	count=2
function	entropy between ||| entropy	count=3
function	[function_1] schedule ||| [function_1] [function_2]	count=3
function_arg	details [arg_2] ||| [arg_2] [function_1]	count=3
function	scale matrix ||| make scale	count=1
function	reads a ||| read	count=1
arg	a tree representing ||| inputs input_shape input_type	count=1
arg	one ||| state	count=3
function	return the while ||| get while	count=2
function	the mean [function_2] ||| [function_1] [function_2]	count=8
function	containing coordinate labels ||| labels	count=1
function_arg	true iff [arg_2] ||| [function_1] enter [arg_2]	count=3
function	[function_1] a tensor ||| [function_2] invalid [function_1]	count=1
function	an rnn model function ||| get dynamic rnn model fn	count=1
function	if a ||| is	count=1
function	learn the ||| fit transform	count=1
function	subgraph from a ||| view from	count=2
function	checks the ||| maybe assert	count=4
function	single batch ||| test on batch	count=2
function	symbol ||| build	count=1
function	parses input arg into ||| arg string	count=1
module	in this ||| contrib grid_rnn python ops	count=1
class	initializes ||| step hook	count=1
function	2 with label_keys vocabulary ||| class	count=3
class	batch and ||| batch ops	count=2
function_arg	[function_1] riemann sum ||| [function_1] [arg_2]	count=4
arg	[arg_1] debugdumpdir object ||| [arg_2] [arg_1]	count=10
function	configuration ||| config	count=4
class	outputs dictionary ||| outputs	count=1
module	command prefix ||| debug cli	count=1
class	[class_1] [class_2] ||| [class_2] tensor [class_1]	count=3
function	the python traceback of ||| node traceback	count=1
class	file ||| summary	count=1
class	proper shape ||| dirichlet	count=1
arg	qualified name should ||| name	count=1
arg	[arg_1] predictions with ||| [arg_2] labels [arg_1]	count=2
function	[function_1] save variables ||| [function_1] [function_2]	count=1
class	to the event ||| summary to event transformer	count=2
function	from the run ||| cli for run	count=1
arg	node's output according ||| is_control	count=1
function	dynamic shape ||| dynamic shape	count=2
class	either its ||| container	count=1
function	to finish the ||| finish	count=1
function	boots 3 ||| spec propagation three	count=1
module	and return ||| contrib learn python learn	count=1
function	collect ||| collect docs	count=1
arg	a hdf5 file ||| filepath overwrite	count=1
function	all the data attributes ||| all	count=1
module	which returns ||| distributions python ops	count=1
function	[function_1] minimum ||| [function_1] [function_2]	count=1
function	[function_1] the training ||| [function_2] [function_1]	count=1
function	the first [function_2] ||| [function_1] [function_2]	count=6
function	per step true positives ||| streaming sparse true positive	count=1
function	feature column filled ||| column	count=1
arg	random ||| shape	count=1
function	mean over ||| mean	count=1
arg	ts1 ||| ts1 mode	count=1
function	string ||| string	count=4
arg	the fft_length argument for ||| fft_rank	count=2
function	[function_1] [function_2] ||| [function_2] invalid [function_1]	count=3
arg	arrays or dicts ||| rtol atol	count=1
module	to ||| python ops	count=15
module	of ||| learn python learn	count=1
function_arg	[function_1] term ||| [function_1] [arg_2]	count=4
arg	perform depth-first search ||| lines attr_segs node_name tracker	count=1
arg	files ||| cls filepatterns get_default_values has_header	count=1
module	cli see the ||| python debug cli	count=2
arg	that match regex regex ||| regex	count=1
class	invalidargumenterror ||| invalid argument error	count=2
arg	each tensor in tensor_list ||| tensor_list num_epochs	count=1
module_class	[module_1] queue element ||| [module_1] [class_2]	count=12
module	non-reference ||| python	count=1
arg	of sgv0 and ||| sgv0	count=1
function	richtextlines object ||| text lines from	count=1
function	based on a list ||| fit on	count=1
module	of tensors ||| factorization python ops	count=4
arg	elements across dimensions ||| axis keep_dims name	count=1
class	if the shape ||| tensor shape	count=1
module	otherwise ||| python	count=1
function	creates a hook to ||| session run hook	count=1
function	string_to_hash_bucket op to use ||| to	count=1
arg	of session ||| session	count=1
class	have ||| test upgrade files	count=2
class	watched by the ||| datum	count=1
function	[function_1] integer indices ||| [function_1] [function_2]	count=1
function_arg	[function_1] apply conv ||| [arg_2] [function_1]	count=1
function	that represents the shape ||| shape	count=1
function	[function_1] small ||| [function_1] [function_2]	count=1
class	for the given ||| builder	count=1
function	to use ||| get string to hash bucket fn	count=1
function	returns a name for ||| name	count=1
function	recipient of ||| node recipients	count=1
function_arg	export strategies [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] global ||| [function_2] [function_1]	count=1
function_arg	a [function_1] [arg_2] ||| [function_1] [arg_2]	count=6
function	gets or creates ||| get	count=1
module	append ||| contrib layers python layers	count=1
module	2 inputs of ||| python ops	count=2
function	debug [function_2] ||| [function_1] [function_2]	count=5
function	tensor ||| assert valid	count=1
module	[module_1] the default ||| [module_2] [module_1]	count=2
arg	sgv0 and [arg_2] ||| [arg_2] [arg_1]	count=1
arg	a debug-dumped ||| node_name output_slot debug_op	count=1
module	return the loaded module ||| contrib tensor_forest hybrid python	count=1
arg	num_epochs [arg_2] ||| [arg_2] [arg_1]	count=4
arg	state saving sequence ||| cell features labels	count=1
module	batch ||| python layers	count=2
arg	data ||| data	count=7
function	gauss error function ||| erf	count=1
class	this tensor [class_2] ||| [class_1] [class_2]	count=1
function	image into pil ||| img	count=1
function	normalization ||| norm	count=3
class	on ||| dtype	count=1
class	sure we don't have ||| upgrade	count=1
function_arg	write [arg_2] ||| [function_1] [arg_2]	count=3
function	with run time shape ||| shape	count=1
class	underlying tf [class_2] ||| [class_1] [class_2]	count=1
function	a new context ||| new attr context	count=1
function	process [function_2] ||| [function_1] [function_2]	count=2
function	name given ||| name	count=1
function	range are ||| range	count=3
function	writes ||| write	count=3
function	op for training for ||| op	count=2
function	sorted transitive closure ||| sorted	count=1
module	which returns ||| contrib distributions python ops	count=1
arg	imports the [arg_2] ||| [arg_2] [arg_1]	count=4
module	or ||| framework	count=1
arg	g input_tensors) ||| attr attr_name	count=1
module	session and runs ||| contrib learn python learn	count=1
function_arg	the maximum [arg_2] ||| [arg_2] [function_1]	count=1
module	given number of ||| contrib learn python learn	count=1
function	from ||| to	count=1
arg	inputs and ||| inputs	count=1
function	for a batch of ||| batch	count=1
arg	equivalence between boolean_mask ||| ndims_mask arr_shape make_mask	count=1
function	parameters ||| tf	count=1
function	using numpy matrix data ||| np matrix data	count=2
module	specific axes of a ||| contrib labeled_tensor python ops	count=1
function	placeholder ||| placeholder from dtype and	count=1
module	used in this ||| python ops	count=1
arg	and process ||| partition_graphs validate	count=1
arg	sum of [arg] ||| [arg]	count=1
function	function with ||| fn	count=1
arg	when a tensor ||| input_	count=1
function	whether histograms ||| histograms	count=1
function	added to index ||| add to index	count=2
module	[module_1] s of ||| [module_1] [module_2]	count=12
module	systems of equations with ||| ops	count=1
function_arg	[function_1] [arg_2] ||| [function_1] shape [arg_2]	count=9
function	after broadcasting ||| broadcast batch	count=1
function	log-odds of ||| logits	count=4
function	possibly ||| possibly	count=2
module	of inverse and forward ||| ops	count=1
module	of ||| cudnn_rnn python ops	count=2
arg	applies transformations [arg_2] ||| [arg_2] [arg_1]	count=7
function	overriding ||| then remove override then	count=1
function	vgg 16-layers version ||| vgg 16	count=1
class	a longer rich ||| rich	count=1
class	[class_1] event ||| [class_1] [class_2]	count=2
function	creates local cache ||| create transient vars	count=1
module	return indexies of ||| learn python learn	count=1
function	from ||| simple values from	count=1
function	in command [function_2] ||| [function_2] [function_1]	count=1
module_class	[module_1] coordinator ||| [module_1] [class_2]	count=4
class	a table outputs ||| hash table	count=2
function	[function_1] fake bias ||| [function_1] [function_2]	count=1
function	checks the [function_2] ||| [function_1] [function_2]	count=4
function	learn the vocabulary dictionary ||| fit transform	count=1
function	has no ||| output v2 has no	count=1
function	the cosine distance between ||| mean cosine distance	count=1
arg	theoretical and numerical jacobian ||| x x_shape y y_shape	count=1
module	ids of ||| python ops	count=1
function	column is both ||| column	count=1
arg	if one ||| meta_graph_def_to_load	count=1
function	variable-length numeric data ||| real valued var len	count=1
function	[function_1] or max ||| [function_2] [function_1]	count=1
arg	base_type to ||| base_type	count=1
function	indices for the specified ||| index	count=1
function_arg	sparseadd [arg_2] ||| [arg_2] [function_1]	count=1
function	determinant ||| determinant	count=1
arg	[arg_1] dimension ||| [arg_1] [arg_2]	count=1
arg	sum reduces grad ||| grad	count=1
function	an input ||| input	count=1
class	get ||| dump dir	count=3
function	with respect to sparse ||| streaming sparse precision at	count=1
arg	an operator that ||| name	count=1
arg	gradients ||| grad handle	count=1
function	write a ||| write histogram series	count=1
function	firsteventtimestamp() ||| first event timestamp	count=1
function	an rnn specified ||| rnn	count=1
function	the presence of ||| loop grads	count=1
class	tensor in [class_2] ||| [class_2] [class_1]	count=1
function	add the grad ||| add	count=1
function_arg	[function_1] globalstepwaiterhook ||| [arg_2] [function_1]	count=1
arg	value in values ||| values dimension sampled_candidates	count=1
module	systems of equations ||| ops	count=1
function	graph-level random seed ||| seed	count=1
function	calculates false positives for ||| false positive at k	count=1
function	shape ||| out shape	count=1
class	initializes ||| dynamic rnn estimator	count=1
class	tensor ||| dirichlet	count=1
arg	scores of tag sequences ||| tag_indices sequence_lengths inputs	count=1
function	[function_1] csv ||| [function_2] [function_1]	count=2
function_arg	the node [arg_2] ||| [function_1] [arg_2]	count=1
function	get all the ||| filter ts	count=1
function	[function_1] converting objects ||| [function_2] [function_1]	count=4
function	[function_1] size for ||| [function_2] [function_1]	count=2
function	tensors are ||| are tensors near	count=2
function	a safe mean ||| safe mean	count=2
arg	[arg_1] with validation ||| [arg_1] [arg_2]	count=3
module	that match ||| contrib graph_editor	count=1
module	returns a list ||| learn python learn	count=1
module	to make sure ||| tools compatibility	count=1
module	returns the sum of ||| framework	count=1
function	to vectors [function_2] ||| [function_2] [function_1]	count=2
arg	linearoperatortril ||| tril is_non_singular is_self_adjoint is_positive_definite	count=1
module	sparse slice of ||| factorization python ops	count=1
arg	diagonal matrix ||| diag event_ndims	count=1
function	get ||| get name	count=1
arg	riemann sum ||| predictions labels weights num_thresholds	count=1
function	to a filename ||| sharded filename	count=1
function	output a summary ||| tf spec summary	count=1
function	sorted transitive closure of ||| sorted	count=1
function	gets [function_2] ||| [function_1] [function_2]	count=5
function	for a checkpoint ||| for	count=1
function	n-d convolutions actually cross ||| non atrous convolution	count=1
function	a fully connected ||| legacy fully connected	count=2
function	creates an object ||| init	count=1
class	adam ||| adam	count=1
function	model function ||| model function	count=2
function	run an op ||| run op benchmark	count=1
function	global [function_2] ||| [function_2] [function_1]	count=21
function	return a single ||| single	count=1
arg	cell_fn ||| cell_fn	count=1
function	model with [function] ||| embedding [function] rnn	count=2
class	every loop invariant ||| while context	count=1
function	add ||| add back prop	count=1
class	shape values then return ||| dirichlet multinomial	count=1
module	returns a dataframe with ||| learn python learn dataframe	count=1
function	to [function_2] ||| [function_2] [function_1]	count=51
function	variables in a ||| convert variables to	count=1
module	transforms each ||| keras python keras	count=1
function	function and ||| function	count=1
function	rename or move a ||| rename	count=1
function	from a checkpoint ||| from checkpoint	count=6
function_arg	[function_1] the predicted_ids ||| [function_1] [arg_2]	count=1
function	download the data from ||| maybe download	count=1
class	a single ||| to event transformer	count=1
class	index a file ||| generate guide index	count=1
arg	on row_seq ||| row_seq	count=2
module	sequence-to-sequence ||| contrib legacy_seq2seq	count=2
function_arg	[function_1] [arg_2] ||| dynamic rnn estimator test [function_1] none [arg_2]	count=6
function	if all are sessionrunhook ||| check	count=1
arg	and contents [arg] ||| [arg]	count=2
function	provided have invalid ||| invalid number of classes	count=1
module	ensure that graph building ||| tensor_forest hybrid python models	count=1
module	returns ||| keras engine	count=1
function	collection with ||| get collection	count=1
module	as 'values' ||| contrib metrics python	count=1
function	to the variable ||| resource	count=2
arg	lookup ||| vocabulary_file vocab_size	count=1
function	of sequence ||| sequence	count=2
arg	length [arg] given input ||| input_length filter_size [arg]	count=1
function	latest event [function_2] ||| [function_2] [function_1]	count=1
function	invalid [function_2] ||| [function_1] [function_2]	count=3
function	resnet_v2() ||| v2	count=2
module	of the dataframe ||| dataframe	count=1
function	[function_1] file without ||| [function_2] [function_1]	count=2
function	prepare the [function_2] ||| [function_2] [function_1]	count=7
arg	precision@k ||| labels predictions_idx k class_id	count=1
module	from ||| python learn	count=2
function	[function_1] a full ||| [function_2] [function_1]	count=2
function	centered or not ||| centered	count=1
function	output strings ||| string	count=1
arg	tf nn sigmoid_cross_entropy_with_logits ||| logits multi_class_labels weights	count=1
module	each ||| contrib keras	count=1
function	helper function to train ||| simple train	count=1
module	shape of ||| python ops	count=1
function	gradients ||| gradient	count=2
function	the class probability ||| proba	count=2
function	the mean absolute ||| mean absolute	count=2
arg	child_graph ||| child_graph	count=1
arg	control_inputs and [arg_2] ||| [arg_1] [arg_2]	count=1
class	shape is ||| shape	count=1
arg	if op ||| op func	count=1
function	false positives for ||| false positive	count=2
class	lstm cell ||| lstmcell	count=4
function	self with at ||| with rank at	count=1
function_arg	graph from [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] current meta ||| [function_2] [function_1]	count=1
function	calculates true ||| sparse true	count=1
function	replaces a concat node ||| concat node	count=1
arg	determine whether pending ||| pending	count=1
module	ops that ||| python ops	count=1
function	from duplicate ||| duplicate	count=1
arg	sensitivity ||| labels sensitivity	count=1
function	of predictions ||| logits to predictions	count=2
function	calls restoring things to ||| unset all	count=1
function	the resnet50 ||| res net50	count=1
arg	runs a microbenchmark to ||| name target iters	count=1
module	given ||| python	count=1
module_class	number of [class_2] ||| [module_1] [class_2]	count=2
function_arg	check [arg_2] ||| [function_1] syntax error output [arg_2]	count=1
module	valid command prefix ||| python debug cli	count=1
function	of a sparse ||| sparse	count=1
function	for a python ||| py	count=2
function	new control inputs to ||| control inputs	count=1
module	argument in args from ||| learn python learn	count=1
class	true if the timer ||| second or step timer	count=1
class	disk ||| writer	count=1
module	[module_1] tensorboard ||| [module_2] [module_1]	count=1
function	benchmark single bprop ||| single bprop	count=2
function_arg	data distribution [arg_2] ||| [function_1] [arg_2]	count=2
module	be produced ||| python	count=1
function_arg	[function_1] appenddocstring object ||| [function_1] [arg_2]	count=1
function	that match ||| from regex	count=1
function	runs [function_2] ||| [function_1] [function_2]	count=6
arg	of value ||| value decay weight	count=1
class	shape ||| tensor shape	count=4
class	float ||| graph rewriter	count=2
function	size ||| length	count=1
function	sets the manual ||| manual	count=1
function	true if ||| is	count=8
function	load runs [function_2] ||| [function_1] [function_2]	count=6
arg	linearoperatorudvhupdate ||| base_operator u diag_update v	count=1
function	a deepcopy [function_2] ||| [function_2] [function_1]	count=3
module	the inputs ||| graph_editor	count=1
module	which ||| contrib distributions python ops	count=1
class	debug tensor ||| debug test base	count=1
arg	[arg] textbox ||| [arg]	count=3
function	sort a list ||| sort dump data by	count=1
function	it into ||| text array to	count=1
function	the resultant ||| compute elemwise op output	count=1
function	compression for large ||| read large	count=1
function	paths ||| paths	count=1
function	a single example ||| single example	count=1
class	event file ||| summary	count=1
function	for the output ||| output	count=1
arg	mode in the current ||| mode	count=1
arg	input samples ||| verbose	count=3
function	evaluates ||| eval	count=2
function	condition ||| pick scalar condition	count=1
function	computes the projections of ||| projections	count=1
class	gradients of a pooling ||| pooling	count=1
function_arg	[function_1] validates the ||| [arg_2] [function_1]	count=2
function	when all [function_2] ||| [function_2] [function_1]	count=6
function	kernel size which is ||| kernel size	count=1
class	the column ||| len column	count=1
arg	second-order gradients of the ||| output_sizes window_rows	count=1
function	as tf [function_2] ||| [function_1] [function_2]	count=1
module	evaluating ||| contrib tensor_forest python	count=1
function	logistic regression signature from ||| logistic regression signature fn	count=1
function	computes cos of ||| cos	count=1
function	define graph ||| define graph	count=2
class	control [class_2] ||| [class_2] [class_1]	count=6
class	a dense tensor ||| sparse feature column	count=2
arg	rnncell cell [arg_2] ||| [arg_2] [arg_1]	count=1
arg	the new_export_strategies ||| new_export_strategies	count=1
arg	via a riemann sum ||| weights num_thresholds	count=2
function	depthwise 2-d [function_2] ||| [function_1] [function_2]	count=1
module_class	of the staging ||| python ops staging	count=1
module	list of ||| factorization python ops	count=4
function	a stop ||| stop	count=1
module	of integer[s] ||| python ops	count=1
arg	new values from a ||| values	count=1
function	randomly [function_2] ||| [function_1] [function_2]	count=1
module	for proper shape values ||| ops	count=1
function	[function_1] file in ||| [function_2] [function_1]	count=1
function	[function_1] result ||| [function_2] [function_1]	count=2
module	shapes of ||| ops	count=1
function	lookup helper for ||| embedding lookup	count=1
arg	try ||| element_name	count=1
module	dimension ||| python framework	count=1
class	shape based ||| shape	count=1
arg	[arg_1] state ||| [arg_2] [arg_1]	count=7
class	flushes the event ||| event	count=1
function_arg	batch normalization [arg_2] ||| [arg_2] [function_1]	count=7
function	[function_1] input options ||| [function_1] [function_2]	count=2
module	creates a new ||| python training	count=1
function	compile the ||| compile	count=1
function	with high-dimension ||| feature with higher dimension	count=1
function	the collection with ||| get collection	count=1
function	rank irfft ||| infer fft length for irfft	count=1
arg	rank x ||| x axis	count=1
function	path [function_2] ||| [function_1] [function_2]	count=3
arg	row and col ||| project_row projection_weights	count=1
function	graph, returns its namesake ||| get copied op	count=1
function	broadcasted dynamic ||| broadcast dynamic	count=1
class	table outputs the ||| lookup table	count=1
function	[function_1] metric value ||| [function_1] [function_2]	count=2
module	and return ||| learn python learn	count=1
function	to use based on ||| string to	count=1
function_arg	[function_1] thumbnails ||| [arg_2] [function_1]	count=4
function	per step false positives ||| false positive at	count=1
module	learn ||| contrib learn python learn preprocessing	count=2
function	loss for [function_2] ||| [function_2] [function_1] by	count=1
arg	and is_list ||| is_list	count=1
function	[function_1] alternatives ||| [function_2] [function_1]	count=3
module	of integers ||| keras	count=2
arg	handle ||| graph handle	count=1
arg	config [arg_2] ||| [arg_1] [arg_2]	count=1
function	[function_1] urls ||| [function_2] [function_1]	count=1
arg	x is a non-negative ||| x	count=1
function	dict ||| index	count=1
class	event ||| writer	count=4
function	parse summaries from ||| values from	count=1
function	or higher ||| at least	count=1
function	a temporary directory for ||| get temp dir	count=1
module	checkpoint ||| learn python learn	count=1
module	of int or none ||| ops	count=1
function_arg	[function_1] the command ||| [arg_2] [function_1]	count=2
module	locate ||| debug cli	count=1
class	have ||| upgrade files	count=2
arg	featurecolumns ||| columns_to_tensors feature_columns	count=1
module	given number of ||| python learn	count=1
arg	in the graph ||| graph	count=3
function	summary tensor used by ||| summary	count=1
class	value of this variable ||| variable	count=1
function	the sampled ||| sampled	count=1
function	[function_1] of higher ||| [function_1] [function_2]	count=2
module	-> _guideref from the ||| tools docs	count=1
module	the execution with ||| python	count=1
module	dict symbol ||| tools	count=1
arg	1 tensors x ||| x	count=1
function	predictions for a ||| predict	count=2
module	and session and ||| learn dataframe	count=1
arg	the given ||| tensor dtype	count=1
function	for proper ||| maybe assert	count=1
function	graph ||| for ui	count=1
function	parse summaries from ||| from	count=1
arg	row and ||| rows cols	count=1
function	will be written ||| logdir	count=2
function	vector [function_2] ||| [function_2] [function_1]	count=10
function	metric ops for ||| metric ops	count=2
function	previous node ||| collect previous	count=1
function	[function_1] recall ||| [function_2] [function_1]	count=4
arg	[arg_1] is accessed ||| [arg_1] [arg_2]	count=3
function	flops for ||| get logged ops	count=1
arg	for given feature_columns ||| feature_columns	count=1
function	convolutions actually cross correlation ||| non atrous	count=1
function	op to ||| string to hash	count=1
module	of the ||| python framework	count=2
module	the ||| python learn	count=1
arg	output ||| tensor_in_sizes glimpse_sizes offsets expected_rows	count=1
function	the processor ||| processor	count=1
function	[function_1] function with ||| [function_2] [function_1]	count=2
function	[function_1] params ||| [function_1] [function_2]	count=6
module	return the ||| python	count=1
arg	input-output pairs for ||| ksizes strides rates	count=1
arg	session report the results ||| sess op_or_tensor feed_dict burn_iters	count=1
function	rnn model function for ||| get dynamic rnn model fn	count=1
module	sum of ||| python ops	count=2
function	compile the ||| maybe compile	count=1
arg	fn2() based ||| fn1 fn2 name	count=1
module	raises typeerror ||| python estimator	count=1
arg	the files in guide_src_dir ||| guide_src_dir	count=1
arg	given path ||| request path	count=1
function	the ||| from regex	count=5
arg	the tensors linked to ||| ops	count=1
function	to finish the update ||| finish	count=1
function	the last [function_2] ||| [function_1] [function_2]	count=2
function	new graph which compute ||| graph replace	count=1
arg	the recall@k of ||| k	count=1
class	to the [class_2] ||| [class_1] [class_2]	count=4
class	and return indexies ||| processor	count=1
class	an event ||| to event	count=1
arg	single-line ||| max_length backward_command forward_command latest_command_attribute	count=1
function	to sparse ||| sparse recall at top k	count=1
module	batch ||| layers python layers	count=1
arg	according to ||| inp	count=1
class	this transform to the ||| transform	count=2
module	debug dump from ||| debug	count=1
function	return tensor version ||| valid sample	count=1
function	[function_1] from a ||| [function_2] [function_1]	count=19
function	the current default graph ||| graph	count=1
module	the next runge-kutta ||| integrate python ops	count=1
function	load a checkpoint ||| checkpoint	count=1
module_class	[module_1] server with ||| [module_1] [class_2]	count=4
function	)) ||| logsumexp	count=1
function_arg	extend the [arg_2] ||| [function_1] tensor [arg_2]	count=2
class	the dense [class_2] ||| [class_1] [class_2]	count=1
arg	the specified dimension to ||| dim epsilon	count=1
function	this dtype ||| base dtype	count=1
function	the node of a ||| node	count=1
function	when all ||| all	count=3
function	a placeholder for ||| placeholder	count=1
function	the tilegrad ||| tile	count=1
function	returns default value as ||| default value	count=1
function	the column factors ||| col factors	count=2
function	layer based ||| layer	count=1
function	creates an absolute test ||| test	count=1
module	that events ||| tensorboard backend event_processing	count=1
function	the optimal ||| optimal	count=1
function	functions for [function_2] ||| [function_2] conversion [function_1]	count=1
function	tensors for session ||| tensors	count=1
arg	appearing in ||| log_p q alpha z	count=1
function	dictionary of custom ||| get custom	count=1
function	[function_1] control ||| [function_1] [function_2]	count=6
function	that ||| filter ts from	count=1
arg	the audio_summ ||| audio_summ	count=1
class	tensor version ||| multinomial	count=1
function	exception on bad ||| bad	count=1
module	a transform that wraps ||| learn python learn dataframe transforms	count=1
function	featurecolumns [function_2] ||| [function_1] [function_2]	count=4
class	for node-status ||| stepper	count=1
function	create a tf placeholder ||| make placeholder from dtype and shape	count=1
function	of the assets contained ||| assets	count=1
function	and add it to ||| add op	count=1
function	ops to restore ||| sharded restore	count=1
function	a node def from ||| node from	count=1
class	return indexies of ||| processor	count=1
function	[function_1] dimension of ||| [function_2] [function_1]	count=4
module	default keras ||| python keras	count=1
module	will be ||| python framework	count=1
arg	of self and other ||| other	count=3
module	files ||| docs	count=1
function	mean relative error ||| mean relative error	count=3
class	debug tensor ||| session debug test base	count=1
function	sets the global ||| set global	count=3
function_arg	[function_1] regex match ||| [arg_2] [function_1]	count=1
class	a 1 outcome ||| bernoulli	count=1
function	[function_1] and bias ||| [function_2] [function_1]	count=1
function_arg	[function_1] replacement ||| [function_1] [arg_2]	count=3
arg	runoptions ||| run_options node_name output_slot	count=1
arg	evidence lower bound ||| variational keep_batch_dim form	count=1
module	a keras tensor ||| keras python keras	count=1
module	the given test data ||| python	count=1
function	a sum ||| streaming sum	count=1
function	embedding and ||| embedding	count=2
class	find ||| debug dump dir	count=1
function	basicrnn works as expected ||| basic rnnfused	count=1
module	the value ||| python	count=1
function	[function_1] model_fn that ||| [function_2] [function_1]	count=2
function	test data directory ||| test data	count=2
class	task ||| cluster spec	count=1
module	this cell ||| rnn	count=1
module_class	[module_1] underlying queue ||| [module_1] ops [class_2]	count=1
arg	pads ||| padding	count=4
class	queuerunner ||| queue runner	count=3
arg	5d tensor with ||| data_format	count=1
module	pads ||| python ops	count=1
function	[function_1] categorical ||| [function_2] column weighted [function_1]	count=1
arg	provided series, producing ||| input_series	count=1
arg	the data feeder ||| x_shape y_shape n_classes	count=1
module	each text ||| keras	count=2
function	step true ||| true	count=1
class	output dropout ||| dropout	count=1
function_arg	[function_1] by normalizing ||| [function_1] [arg_2]	count=5
arg	imports [arg_2] ||| [arg_2] [arg_1]	count=2
function	tensor to [function_2] ||| [function_2] [function_1]	count=5
module	loss to ||| python ops losses	count=1
module	classification ||| learn estimators	count=2
module	gradient of ||| hybrid python ops	count=3
function	converts ||| internal convert n	count=1
function	containing [function] ||| parse [function]	count=3
function	[function_1] with real ||| [function_1] [function_2]	count=1
function	sparse and dense ||| sparse	count=1
function	the kind [function_2] ||| [function_2] [function_1]	count=1
module	in the sense ||| contrib linalg python ops	count=2
function	log the ||| log op gradients	count=1
module	add ||| linalg python ops	count=1
function	the inputs [function_2] ||| [function_2] [function_1]	count=1
arg	fetch all outputs ||| tag_set signature_def_key input_tensor_key_feed_dict	count=1
function	inputs of two ||| inputs	count=1
function	[function_1] training loss ||| [function_1] [function_2]	count=8
class	to its outputs ||| highway wrapper	count=1
arg	value to a ||| value dtype name as_ref	count=1
function	waits ||| wait for	count=1
function_arg	[function_1] a tf ||| [arg_2] [function_1]	count=2
function_arg	[function_1] an image ||| [arg_2] [function_1]	count=2
function	control flow context ||| context	count=1
arg	given values ||| values weights	count=1
arg	tensors to a file ||| filename tensor_names tensors tensor_slices	count=1
function	computes the product of ||| prod	count=1
arg	the original ||| original	count=1
module	of elements in this ||| python framework	count=1
class	generator into the ||| generator	count=1
module_class	data [class_2] ||| [module_1] data [class_2]	count=1
function	that ||| regex	count=1
module	vocabulary dictionary and return ||| learn python	count=1
function	run a [function_2] ||| [function_1] [function_2]	count=8
function	with additional logistic ||| with logistic	count=3
module	as ||| estimators	count=11
class	adagrad ||| adagrad	count=1
function	vocabulary ||| fit	count=1
function	[function_1] op tensor ||| [function_1] [function_2]	count=3
class	construct multivariate normal distribution ||| multivariate normal tri	count=1
function	[function_1] [function_2] ||| integer [function_2] [function_1]	count=1
function	the function details ||| build function details	count=2
function	[function_1] layer ||| [function_2] [function_1]	count=4
module	dictionary and return ||| learn python learn preprocessing	count=1
module	vector of ||| distributions python ops	count=4
arg	boundaries and interval values ||| boundaries values name	count=1
function	fetches ||| fetch	count=1
function	to ||| string to hash bucket fn	count=1
function	the original arguments of ||| original args	count=1
function	traceback of ||| traceback	count=1
arg	runoptions for a ||| run_options	count=1
function	weighted per step true ||| sparse true	count=1
arg	an empty mutabledensehashtable object ||| key_dtype value_dtype default_value empty_key	count=1
arg	[arg_1] by v ||| [arg_1] [arg_2]	count=1
module	loss using tf ||| losses python losses	count=1
function	matmul node with the ||| mat mul node	count=1
module	get an argspec ||| api lib	count=1
arg	function ||| fn	count=1
module	vocabulary ||| learn python	count=1
function	evaluation metrics that use ||| metrics	count=1
function	get a string of ||| get	count=1
function	and mirror ||| and conv	count=1
function	names [function_2] ||| [function_2] [function_1]	count=2
function	the collection with the ||| collection	count=2
function	[function_1] [function_2] ||| [function_2] kernel [function_1]	count=6
function	convolution ||| conv2d	count=2
function	concatenation has no ||| v2 has no	count=1
module	returns a tensor ||| contrib keras python keras	count=3
arg	draws [arg] samples from ||| lam [arg] dtype	count=1
function	text ||| sequences	count=1
function	the vocabulary dictionary ||| transform	count=1
function	[function] a ||| [function] tb	count=1
module	shapes of [module_2] ||| [module_2] [module_1]	count=2
function	the tensors linked ||| ts from regex	count=1
arg	lb [arg] if ||| [arg]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] at thresholds predictions [arg_2]	count=2
function	feature spec ||| sequence feature spec	count=1
module	with default shuffle ||| python learn learn_io	count=1
function	[function_1] weight column ||| [function_2] [function_1]	count=6
function	add it to ||| add	count=1
function	a mix of ||| optimizer mixed	count=1
function	updates the [function_2] ||| [function_1] [function_2]	count=1
class	rich attributes ||| rich line	count=1
class	sample data ||| image data	count=1
function	generates test ||| test	count=1
module	s of ||| python keras engine	count=3
function	log ||| op log	count=1
function	two ||| equal	count=1
class	[class_1] cell output ||| [class_2] [class_1]	count=1
function	term in the ||| term	count=1
arg	to _docinfo objects ||| src_dir	count=1
function	[function_1] keys ||| [function_1] [function_2]	count=3
function	the items that the ||| items	count=1
arg	to console ||| d show_missing	count=1
class	from ||| data frame	count=1
module	x ||| distributions python ops	count=1
arg	feeds ||| feeds	count=2
function	-grad * 2/sqrt ||| erfc grad	count=1
function	as [function] into ||| [function]	count=1
module	bijector ||| python ops bijectors	count=1
module	learn the vocabulary ||| preprocessing	count=1
function_arg	[function_1] op for ||| [function_1] [arg_2]	count=1
class	for an lstm cell ||| lstmcell	count=2
function	count of ||| count	count=1
function	variables in a ||| variables to	count=1
function	last dimension of ||| last dimension	count=1
function	a shallow dict ||| dict	count=1
module	dtype based on this ||| python framework	count=1
function	[function] current ||| get run debug [function]	count=1
class	by this operator to ||| linear operator identity	count=1
module	we don't have a ||| tools	count=1
function	match ||| ts from	count=1
function_arg	tf options [arg_2] ||| [arg_2] [function_1]	count=1
class	operator ||| operator scaled	count=1
function_arg	dependency [arg_2] ||| [function_1] [arg_2]	count=1
function	get ||| get lib	count=1
function	[function_1] [function_2] ||| [function_2] call [function_1]	count=4
function	each ||| texts to	count=1
function	metric names ||| metric map	count=1
function	then tile along ||| tile	count=1
function	from ||| to item	count=1
arg	by pred ||| pred dtype name	count=1
function	gets an existing variable ||| variable	count=1
arg	[arg_1] args ||| [arg_2] [arg_1]	count=1
module	[module_1] the specified ||| [module_2] [module_1] assert	count=1
arg	of fetching a tensor ||| name	count=1
function	expired [function_2] ||| [function_2] [function_1]	count=1
module	adds ||| contrib layers python layers	count=1
arg	prior ||| prior scale	count=1
arg	thumbnails and returns the ||| thumbnails thumbnail_dim	count=1
function_arg	with other ||| with other	count=1
function	gets ||| get	count=17
module	an imagenet model's ||| contrib keras python keras applications	count=1
arg	added input state ||| input_keep_prob output_keep_prob state_keep_prob	count=1
class	by this operator to ||| linear operator scaled	count=1
module	command prefix but ||| debug cli	count=1
arg	layer e ||| kernel_size strides	count=2
module	the vocabulary dictionary and ||| learn preprocessing	count=1
function	real valued ||| real valued linear	count=3
function	the double ||| double	count=1
function	sets the values of ||| set value	count=1
arg	override to observe screen ||| direction line_index	count=1
arg	tensor ||| name target	count=1
class	we ||| upgrade	count=1
module	layers by ||| layers	count=1
function	[function_1] to 2d ||| [function_2] [function_1]	count=1
class	the debug tensor ||| debug test	count=1
function_arg	[function_1] of data ||| [arg_2] [function_1]	count=4
function	strided 2-d convolution ||| conv2d	count=1
module	a 1 outcome ||| ops distributions	count=1
class	by this linearoperator ||| linear operator	count=1
class	operator to ||| operator scaled	count=1
function	layer that ||| get layer	count=1
function	the python object ||| object	count=1
function_arg	options to [arg_2] ||| [arg_2] [function_1]	count=1
function	predictions ||| logits to predictions	count=4
class	multiple output ||| export utils	count=1
function	input [function_2] ||| [function_2] [function_1]	count=32
arg	the parameters for ||| num_units use_peepholes share_time_frequency_weights	count=1
function_arg	for a loop ||| for exit val	count=2
arg	of given node ||| node_name	count=1
module	computes ||| losses python losses	count=1
class	construct multivariate normal ||| multivariate normal linear	count=1
arg	tensors according to which_bucket ||| tensors which_bucket batch_size num_buckets	count=1
function	align the ||| align	count=1
function	step false positives for ||| sparse false positive at	count=1
class	cont() ||| node stepper	count=1
arg	an operator ||| name	count=1
function	the whilecontext ||| while context	count=2
module	learn the ||| contrib learn python learn	count=1
function	are discarded [function_2] ||| [function_2] [function_1]	count=5
function	for small [function_2] ||| [function_2] [function_1]	count=1
arg	path name to see ||| path	count=1
function	creates variables and ||| create embedding	count=1
function	false positives ||| false positive at	count=2
function	parses input arg ||| exprs arg	count=1
function	has [function_2] ||| [function_2] [function_1]	count=2
module	sense ||| contrib linalg	count=5
function	19-layers version ||| 19	count=1
arg	using featurecolumns ||| feature_columns	count=1
module_class	[module_1] keys ||| [module_1] ops [class_2]	count=1
class	[class] if possible ||| [class]	count=2
arg	using summarize_activation ||| name_filter summarizer	count=1
function_arg	sharded variables [arg_2] ||| [arg_2] [function_1]	count=2
function	the variables in ||| convert variables	count=1
module	or list of ||| python ops	count=1
class	outer context ||| cond context	count=1
arg	a model ||| model	count=1
class	we don't have ||| upgrade files	count=1
arg	parameters ||| num_units use_peepholes initializer num_proj	count=1
function	mix of features ||| mixed features arbitrary	count=2
function	start message [function_2] ||| [function_1] [function_2]	count=3
module_class	params from [module_1] [class_2] ||| [module_1] [class_2] params	count=3
function	arguments are set ||| arguments set	count=10
function	count the ||| count	count=1
function	of the attr ||| attr	count=1
arg	grad ||| _ grad	count=1
function	adds the current ||| add	count=1
function	restore variables ||| sharded restore ops	count=1
module	batches ||| contrib batching python ops	count=1
module	of factors weights ||| python ops	count=1
function	save and reload ||| save load	count=1
function_arg	a unary [arg_2] ||| [function_1] registered_name operation [arg_2]	count=1
arg	given state ||| state scope	count=2
function	shape ||| valid	count=1
function	add ops to ||| add sharded	count=3
function	initialize the ||| initialize	count=2
arg	[arg_1] colocate_gradients_with_ops ||| [arg_1] [arg_2]	count=1
function	inputs of this ||| inputs	count=1
function	along column ||| along cols	count=4
arg	this head ||| target features	count=1
module	a list of keras ||| keras	count=1
arg	checks whether a func ||| func	count=1
function	rnn sequence ||| rnn	count=1
function	export the ||| export	count=1
function	cached ||| outgoing cache	count=1
arg	vocabulary dictionary ||| x	count=1
function	dense tensor as input ||| input	count=1
module	of ||| keras python	count=1
function	applies inverse ||| inverse	count=1
function	[function_1] end ||| [function_2] [function_1]	count=4
module	of a 1 outcome ||| python	count=1
module_class	adds an unref to [module_1] [class_2] timestamp ||| [module_1] [class_2]	count=1
module	graph building ||| tensor_forest hybrid python models	count=1
function	[function_1] no ||| [function_2] [function_1]	count=5
function	that the graph is ||| graph is	count=1
function	integer indices ||| integer indices	count=2
module	representing this ||| linalg python ops	count=1
function	add [function_2] ||| [function_2] [function_1]	count=4
module	(vs ||| python ops distributions	count=2
module	mean ||| python keras	count=1
class	tensor have the same ||| tensor	count=1
arg	construct the attentionmechanism mechanism ||| num_units memory memory_sequence_length scale	count=1
function	creates a sparsetensor from ||| to sparse	count=1
function	jacobian ||| jacobian	count=1
arg	[arg_1] operation ||| [arg_2] [arg_1]	count=2
function	set the parameters of ||| set params	count=1
function_arg	[function_1] data to ||| [arg_2] [function_1]	count=1
function	returns predictions for a ||| predict	count=2
class	wrapper should work also ||| wrapper session	count=1
arg	containing the encoded ||| image_shape image_format label	count=1
function	to embedding ||| embedding	count=1
module	the given set of ||| contrib framework python ops	count=1
function	into ||| text array to	count=1
function	return a device ||| replica device	count=1
function	sparse column [function_2] ||| [function_2] [function_1]	count=1
module	multi ||| contrib layers python layers	count=1
function	traceback ||| node traceback	count=2
function	a header ||| get header	count=1
module	each ||| keras python	count=1
function_arg	[function_1] dnnlinearcombinedestimator instance ||| [function_1] [arg_2]	count=1
function	values for ||| output values	count=1
arg	the second-order gradients of ||| pool_func input_sizes output_sizes window_rows	count=1
function	a _targetcolumn ||| target	count=2
function	lists ||| lists	count=1
module	prints ||| python tools	count=1
class	with the ||| decoder test	count=1
function_arg	their defs [arg_2] ||| [arg_2] [function_1]	count=1
class	values then ||| dirichlet multinomial	count=1
function	[function_1] expired events ||| [function_1] [function_2]	count=4
arg	[arg] elbo and ||| [arg]	count=1
function	feature ||| create sequence feature	count=1
arg	check counts for proper ||| counts	count=2
module	from ||| learn	count=2
function	sparse ||| flipped sparse	count=1
class	tests ||| output test	count=1
function_arg	external_values from [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	sigmoid [arg_2] ||| [function_1] [arg_2]	count=1
arg	row and col batches ||| batch_size project_row	count=1
function	with respect ||| precision	count=6
function	object ||| object	count=1
arg	tensor with all elements ||| tensor dtype name optimize	count=1
arg	predictions with ||| predictions weights	count=1
module_class	[module_1] tensor as ||| [module_1] [class_2]	count=6
arg	target ||| target decorator_func	count=1
function	all input alternatives ||| input alternatives	count=1
module	cross-entropy loss using tf ||| contrib losses python losses	count=1
function	non-negative ||| make static axis non	count=1
arg	values in y_np ||| x_np y_np	count=1
function	that ||| unique	count=2
module	a rank-2 tensor ||| contrib solvers python	count=1
class	(e g "matmul") ||| operation	count=1
arg	same shape as values ||| values	count=1
module	find ||| contrib bayesflow python ops	count=1
module	dataframe into two ||| learn dataframe	count=1
function	log ||| with log joint	count=2
arg	subscribes a single ||| control_cache	count=2
arg	by normalizing with the ||| predictions labels normalizer weights	count=1
arg	variable ||| variable	count=2
function	raises typeerror ||| check	count=1
module	returns an ||| contrib layers python layers	count=1
function	op [function] partially flattened ||| map structure up [function]	count=1
function	training works with missing ||| train with missing feature	count=1
function	lookup embedding ||| safe embedding lookup sparse	count=1
function_arg	[function_1] base_type to ||| [function_1] [arg_2]	count=2
function	a tf ||| make server	count=1
class	decoder ||| data decoder	count=1
function	real part ||| real	count=1
module	function of ||| ops distributions	count=1
function	insertion indices of the ||| insertion index	count=1
function	along [function_2] ||| [function_2] [function_1]	count=6
function	the given task ||| task	count=1
function	make a ||| make	count=2
class	run ||| curses ui	count=1
module	cross-entropy loss using tf ||| losses	count=2
function	the labels into a ||| labels	count=1
function	constructs a new ||| init	count=4
arg	the parameters for an ||| use_peepholes share_time_frequency_weights	count=1
function	shape ||| maybe assert valid sample	count=1
function_arg	external_values from [arg_2] ||| [function_1] proto [arg_2]	count=1
arg	two numpy ||| a b	count=1
arg	processes a audio by ||| tag wall_time step audio	count=1
function	to a vector with ||| to vector	count=1
function	creates an rnn model ||| dynamic rnn model	count=1
function	tensors to a contatenated ||| tensors to	count=1
function	batch ||| cdf batch	count=1
module	samples a set of ||| ops	count=3
function	a sparse integer ||| sparse int	count=2
function	map method ||| map	count=1
function	handle ||| get session handle	count=1
rep	this function [function_arg_2] ||| [module_class_1] [function_arg_2]	count=1
function	append ||| append tensor	count=1
module	a list of tensors ||| python ops	count=6
module	the ||| tools dist_test python	count=1
function	converts either [function] or ||| [function]	count=1
module	of ||| rnn python ops	count=8
function	get all ||| regex	count=1
function_arg	[function_1] time ||| [arg_2] [function_1]	count=3
module	get an ||| lib	count=1
class	register the opdefs from ||| def library	count=1
function	a header ||| header from ops	count=1
class	_coordinatedsession ||| coordinated session	count=1
arg	the feeds and ||| feeds	count=1
class	value ||| value	count=1
module	list of ||| framework python ops	count=7
function	writes a [function_2] ||| [function_1] [function_2]	count=3
class	from the dump ||| dump	count=1
function	out of input and ||| from input and	count=1
module	vocabulary dictionary and ||| learn python learn preprocessing	count=1
function	[function_1] default ||| [function_1] [function_2]	count=6
module	a cross-entropy loss ||| python losses	count=1
module	get a ||| debug cli	count=1
arg	[arg_1] an image ||| [arg_1] [arg_2]	count=1
function	runs from ||| add runs from	count=2
function	for dnn-linear combined model ||| dnnlinear combined bug fixed	count=1
function	is or return index ||| index	count=1
function	[function_1] mini ||| [function_2] [function_1]	count=1
module	[module_1] the ||| [module_2] [module_1]	count=75
arg	the labels and ||| labels weights metrics_collections	count=2
function	non-negative [function_2] ||| [function_1] [function_2]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] op [arg_2]	count=25
function_arg	inputs [arg_2] ||| [arg_2] [function_1]	count=8
function	that a model_fn ||| model fn	count=1
function	[function_1] dump ||| [function_1] cont call [function_2]	count=1
function	all the ||| filter ts from	count=1
function	rename ||| rename	count=1
module	that ||| graph_editor	count=1
function	[function_1] overriding tensor ||| [function_2] update [function_1]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] function [arg_2]	count=14
function_arg	function that [arg_2] ||| [arg_2] [function_1]	count=3
class	the op that failed ||| op error	count=1
function	batch ||| keyed batch examples	count=1
function	to use ||| to hash bucket	count=1
class	to ||| files	count=1
arg	tensor shape ||| tensor	count=1
function	[function_1] [function_2] ||| [function_2] dump [function_1]	count=2
function	output a scalar ||| scalar	count=1
function	the end of a ||| on batch end	count=1
arg	transposed 3d convolution layer ||| filters kernel_size strides	count=1
function	execute ||| execute	count=1
function	save and ||| train save	count=1
module	the ||| python learn preprocessing	count=2
function	path [function_1] [function_2] ||| path [function_1] [function_2] path	count=1
function	[function_1] column factors ||| [function_1] [function_2]	count=1
function	hashed bucket ||| hash bucket	count=1
function	create a subgraph containing ||| init	count=1
function	only if ||| maybe	count=1
arg	y elementwise using ||| y name	count=1
function	full name e g ||| full	count=1
class	display ||| curses ui	count=1
function	[function_1] unary ||| [function_1] [function_2]	count=1
module	returns predictions for ||| contrib layers python layers	count=1
module	make ||| contrib graph_editor	count=1
arg	inclusion in a ||| receiver_tensors	count=1
arg	following rule ||| column_name output_rank	count=1
arg	few dummy images ||| tag n_images	count=1
module	computes output tensors ||| python keras engine	count=1
class	rich attributes or a ||| rich	count=1
module	node-status labels ||| python debug cli	count=1
function	layer based on ||| get layer	count=1
function	non-linearly-separable ||| linearly inseparable binary	count=1
module	a table ||| python feature_column	count=1
function	linked to ||| regex	count=1
function	vs ||| vs	count=2
arg	tensor x ||| x message name	count=1
class	phased lstm cell ||| phased lstmcell	count=2
function	resizing ||| resize	count=2
class	from the dump root ||| debug dump	count=1
module	menuitem from ||| python debug cli	count=1
function	of the signaturedef ||| info from meta graph def	count=1
function	asserts that two ||| assert	count=1
module	determining ||| contrib keras	count=1
function	feature indices represented ||| feature indices	count=1
module	extract ||| learn datasets	count=1
function	indices that repeat ||| repeat indices	count=3
class	debug tensor dumping ||| debug test	count=1
module	same as the last ||| estimators	count=3
class	the current batch of ||| next queued sequence batch	count=1
function	as an operatorpd ||| operator pd	count=1
function	the tensor ||| dense tensor	count=1
function	tf session [function_2] ||| [function_2] [function_1]	count=1
arg	are calculated using ||| grad _	count=1
function	the number ||| num	count=2
function	implements [function] ||| is [function]	count=1
function	context manager for overriding ||| override	count=1
function	product ||| reduce prod	count=1
function	linear_model_fn but returns modelfnops ||| model fn ops	count=2
arg	graph ||| export_dir	count=1
function	[function_1] int32 scalar ||| [function_2] [function_1]	count=4
function_arg	[function_1] keep_input ||| [function_1] [arg_2]	count=4
arg	would feed dict of ||| y batch_size num_epochs	count=1
module	root ||| python ops	count=1
arg	var beta and ||| var beta	count=2
arg	returns it ||| value dtype	count=1
function	tensors at the boundary ||| boundary ts	count=1
module	of layers ||| layers	count=1
module	mixture ||| python kernel_tests	count=2
function	a weighted sum of ||| weighted sum	count=2
function	python callable that runs ||| callable	count=1
function	create a scale matrix ||| make scale	count=1
function_arg	max [arg_2] ||| [arg_2] [function_1]	count=1
class	should be ||| type	count=1
function	int32 tensor ||| event dims tensor	count=1
function	scope ||| name scope	count=5
arg	activations from ||| activations labels sequence_length target_column	count=3
arg	reduces grad along the ||| op grad	count=1
arg	a diagonal matrix ||| identity_multiplier diag	count=1
function	[function_1] the batch ||| [function_1] [function_2]	count=1
function	for feeding into predict ||| predict	count=1
class	the enqueue ops for ||| queue runner	count=1
function	to ||| lengths to	count=1
function	batch ||| batch examples shared	count=1
function_arg	[function_1] summarysaverhook ||| [arg_2] [function_1]	count=1
module	dtype ||| framework	count=1
function	from being used as ||| nonzero	count=1
module	the same as 'values' ||| contrib metrics python	count=1
function	"op" ||| gradient	count=1
function	feature spec for ||| feature spec for	count=1
function	for sequence models ||| sequence	count=1
arg	equal to rank ||| rank data summarize	count=2
function	the specified line in ||| line	count=1
arg	with parameter rate ||| rate validate_args allow_nan_stats name	count=1
function	non-negative int32 scalar ||| assert non negative int32 scalar	count=1
function	[function_1] [function_2] ||| [function_1] line [function_2]	count=10
arg	with the given name ||| name	count=1
function_arg	[function_1] textlinereader ||| [arg_2] [function_1]	count=1
function	x >= elbo ||| elbo with	count=1
module	menu ||| debug cli	count=1
module	repeat ||| keras python keras	count=1
arg	tensor t ||| t	count=2
function	[function_1] transform ||| [function_2] [function_1]	count=8
module_class	[module_1] random forest ||| [module_1] [class_2]	count=4
module	of ||| contrib legacy_seq2seq python ops	count=1
module	get list ||| python debug lib	count=1
class	running threads and ||| generator enqueuer	count=1
arg	a column ||| column	count=2
arg	softmaxcrossentropywithlogits ||| grad_loss grad_grad	count=1
function	and loss ||| check loss and	count=1
function	supported [function_2] ||| linear_optimizer python head is [function_1] [function_2] head	count=1
arg	using class log-probabilities ||| logits probs dtype	count=2
function	backprop [function_2] ||| [function_1] [function_2]	count=2
function	or list of ||| or list	count=2
arg	condition and body to ||| body loop_vars shape_invariants	count=1
function	that a model_fn can ||| create model fn	count=1
function	for small [function_2] ||| [function_1] [function_2]	count=1
arg	given value ||| value	count=3
arg	by matrix b, producing ||| transpose_a transpose_b	count=2
module	tfprof ||| contrib tfprof python tools tfprof	count=1
function	input to ||| prepare inputs	count=1
function	compatible [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] collection ||| [function_2] [function_1]	count=1
arg	control_outputs ||| control_outputs control_ios	count=1
class	batch of ||| queued sequence batch	count=1
arg	[arg_1] cluster center ||| [arg_1] [arg_2]	count=1
module	gets ||| learn estimators	count=2
class	the timer ||| second or step timer	count=1
arg	with the same shape [arg_1] [arg_2] ||| python ops identity [arg_1] [arg_2]	count=1
arg	the specified scope ||| scope	count=2
function	sequence of integers ||| texts	count=1
arg	xs ||| xs	count=2
function	distance [function_2] ||| [function_1] [function_2]	count=2
module	supervisor ||| python training	count=1
module	[module_1] dict ||| [module_2] [module_1]	count=2
arg	a switch op ||| op	count=1
function	to have ||| static check for same	count=1
class	of given ||| dump dir	count=1
arg	sliced dimension ||| multiple dim	count=1
class	the underlying [class_2] ||| [class_1] [class_2]	count=1
function	op to use ||| to hash bucket fn	count=1
function	within an arg_scope ||| add arg	count=1
class	the erosion ||| erosion	count=1
function	the training operation ||| train	count=1
arg	[arg_1] satisfies ||| [arg_2] [arg_1]	count=1
function	iff [function_2] ||| [function_1] [function_2]	count=3
module	all the op ||| graph_editor	count=1
class	sdcalogisticclassifier with a ||| sdcalogistic classifier	count=1
function	bucketized [function_2] ||| [function_1] [function_2]	count=3
arg	the cells in ||| cells	count=1
function	tf examples to ||| feature columns from examples	count=1
module	of the output ||| python ops	count=2
arg	grad along ||| op grad	count=1
class	construct ||| hash buckets	count=1
module	indexies of ||| learn python learn preprocessing	count=1
arg	of symbols ||| ids vocab_size embed_dim	count=1
function	the main [function_2] ||| [function_1] [function_2]	count=5
arg	the specified axis ||| x axis	count=2
module	returns number of ||| ops	count=2
module	multiply ||| training python training	count=1
function	generate an [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] to ||| [function_2] [function_1]	count=39
module	sequence of integers ||| python keras preprocessing	count=1
function	a sparsetensor from ||| to sparse	count=1
function	[function_1] signature from ||| [function_1] [function_2]	count=9
arg	a linearoperatordiag ||| diag is_non_singular is_self_adjoint is_positive_definite	count=1
function	fill tensor shapes in ||| fill	count=1
function	the scope ||| scope	count=1
class	the event file to ||| summary	count=1
module	tensors that with integer ||| contrib learn python learn	count=1
function	collection with ||| collection	count=2
function	argument name ||| argument	count=1
function	sdcaoptimizer [function_2] ||| [function_2] [function_1]	count=5
function	a reshape node with ||| reshape node	count=1
arg	condition and body ||| body	count=1
module	monte carlo estimate of ||| bayesflow python ops	count=1
arg	graph and ||| graph	count=1
function	run() calls ||| run	count=1
arg	linear weights in ||| columns_to_tensors embedding_lookup_arguments num_outputs	count=1
module	run this ||| python ops	count=1
function	field to observations dict ||| get field to observations map	count=1
arg	logits and labels ||| _sentinel labels logits name	count=1
arg	that satisfies a ||| static_condition dynamic_condition	count=1
class	have ||| test	count=1
class	the sum ||| dimension	count=1
function	epoch ||| on epoch begin	count=1
function_arg	loss [arg_2] ||| [arg_2] [function_1]	count=2
function	sessionrunhook raises typeerror ||| check hooks type	count=1
module	return ||| ops distributions	count=2
function	if all ||| check hooks type	count=1
function_arg	[function_1] [arg_2] depends on ||| [function_1] [arg_2]	count=6
arg	tensors ||| tensors capacity	count=1
function	a sequence ||| to sequences	count=1
function	merges ||| merge	count=2
arg	a sparsetensorsmap and return ||| container shared_name name	count=1
module	of tensors ||| contrib rnn python ops	count=1
function	adds scaled noise from ||| add scaled noise	count=1
function	within the given ||| within	count=1
function	get all ||| from regex	count=1
module	distribution ||| ops	count=1
module	tensor ||| slim python slim	count=1
class	tests ||| box op test	count=1
function	with ||| with rank	count=1
module	execute together ||| batching	count=1
function	[function_1] recurrent ||| [function_1] [function_2]	count=2
function_arg	[function_1] each input ||| [function_1] [arg_2]	count=1
function_arg	sum of [arg_2] ||| [function_1] [arg_2]	count=3
arg	(output of get_config()) ||| custom_objects	count=1
function	get [function_2] ||| [function_1] [function_2]	count=8
module	return ||| ops	count=5
function	args belong ||| graphs	count=1
arg	in-plane convolution ||| stride padding	count=1
function	[function_1] interval to ||| [function_2] [function_1]	count=1
arg	tf learn dataframe ||| pandas_dataframe num_threads enqueue_size	count=1
function	multiply specified [function_2] ||| [function_2] [function_1]	count=1
function	n-d convolution followed by ||| convolution	count=1
function_arg	[function_1] [arg_2] ||| [function_1] enter [arg_2]	count=6
function	control inputs to ||| control inputs	count=2
module	return ||| python learn preprocessing	count=2
class	by the pluginasset ||| plugin asset	count=1
function	and isinf are ||| gives false	count=1
class	from ||| tensor flow data frame	count=1
function	into [function_2] ||| [function_1] [function_2]	count=7
arg	files given a feature_spec ||| cls filepatterns feature_spec has_header	count=1
arg	for an ||| cell_type num_units target_column problem_type	count=1
function	find latest [function_2] ||| [function_2] [function_1]	count=2
arg	sum reduces grad ||| op grad	count=1
function	[function] matching setup() ||| [function] or	count=1
module	for proper ||| python ops distributions	count=1
function	an override ||| hints allowing override	count=2
module	generate ||| tools git	count=1
function_arg	model function [arg_2] ||| [arg_2] [function_1]	count=2
function	to debug [function_2] ||| [function_2] [function_1]	count=1
arg	keys and ||| keys	count=1
function	compute gradients of "loss" ||| compute gradients	count=1
arg	[arg_1] added input ||| [arg_2] [arg_1]	count=2
function	[function_1] border of ||| [function_2] [function_1]	count=1
function	circles are generated correctly ||| spirals	count=1
module	1 outcome (vs ||| python	count=1
class	sample, batch, event ||| distribution	count=1
arg	variable ||| variable value	count=1
module	return ||| tensorboard backend event_processing	count=2
class	ast ||| call visitor	count=1
function	required to be integrated ||| can created before minimize called	count=1
function	[function_1] or ||| [function_1] [function_2]	count=8
class	test ||| dynamic rnn estimator test	count=1
module	return dict ||| tools	count=1
function	the name of ||| name	count=6
module	rank-2 ||| solvers python ops	count=2
function	precision values ||| precision at thresholds	count=1
module	internal vocabulary based ||| python keras preprocessing	count=1
class	base attentionmechanism class ||| base attention mechanism	count=1
function_arg	execute the [arg_2] ||| [function_1] experiment [arg_2]	count=2
function	returns true if ||| is	count=3
function	evaluates the value of ||| eval	count=1
class	initializes ||| print tensor	count=1
function	of slots created by ||| get slot	count=1
function	at a ||| resample at	count=1
function_arg	[function_1] op1 ||| [arg_2] [function_1]	count=2
function	broadcasted static shape ||| broadcast static shape	count=2
function_arg	auc via [arg_2] ||| [arg_2] [function_1]	count=2
function	hooks ||| hooks type	count=1
function	converts a list ||| sequences to	count=1
arg	logdir ||| logdir	count=2
module_class	[module_1] tensor ||| [module_1] [class_2]	count=44
function	ops to restore ||| restore	count=1
function	the graph [function_2] ||| [function_2] [function_1]	count=3
function	specificity at a ||| specificity at sensitivity	count=2
module	bijector ||| python ops distributions	count=1
class	truncated normal ||| truncated normal	count=1
function	[function_1] file in ||| [function_1] [function_2]	count=1
module_class	given [class_2] ||| [module_1] [class_2]	count=4
module_class	[module_1] tensor ||| [module_1] [class_2] tracker add unref timestamp	count=1
class	tensor [class_2] ||| [class_2] [class_1]	count=5
arg	function to split dims ||| cls dims	count=1
function	histogram ||| histogram	count=3
function	attribute (e g ||| attribute at	count=1
function	end ||| batch end	count=1
class	wrapper should ||| debug wrapper	count=1
function_arg	distance between [arg_2] ||| [function_1] [arg_2]	count=4
arg	between the labels and ||| labels weights	count=2
class	the scroll ||| scroll	count=1
function	or tensorshape size ||| size	count=1
function	a mix [function_2] ||| [function_1] [function_2]	count=4
module	function and ||| python ops	count=1
function	name -> _guideref ||| guide	count=1
arg	y w + b ||| w b	count=1
function	computes the maximum of ||| reduce max	count=1
arg	rate along ||| rate	count=1
function	returns the timestamp in ||| timestamp	count=1
function	an attribute ||| attribute at	count=1
function	build a model ||| build	count=1
function	new [function_2] ||| [function_2] [function_1]	count=7
function	caption ||| caption to item	count=1
function	[function_1] runoptions ||| [function_2] [function_1]	count=5
function	relative error ||| relative error	count=4
function	weighted per step false ||| sparse false	count=1
function	then return tensor ||| assert	count=1
function_arg	operation of [arg_2] ||| [arg_2] [function_1]	count=1
arg	parsing new values ||| values	count=1
function	mappers [function_2] ||| [function_2] kernel [function_1]	count=2
function	[function_1] no collisions ||| [function_1] [function_2]	count=4
class	perform ||| test	count=4
function_arg	dequeues and [arg_2] ||| [arg_2] [function_1]	count=3
class	the vocabulary ||| categorical processor	count=1
class	sample data ||| image data generator	count=1
function	to use based ||| to	count=1
arg	of texts to a ||| texts mode	count=1
function	[function_1] loss ||| [function_1] [function_2]	count=20
function	string [function_2] ||| [function_2] readable [function_1]	count=1
function	transforms each ||| texts to sequences	count=1
function	precision@k of ||| top k	count=1
class	sparse [class_2] ||| [class_2] [class_1]	count=3
arg	operations to compute ||| examples	count=2
function	proto_type ||| get collection proto	count=1
arg	state saving ||| cell features	count=1
function	as linear_model_fn but returns ||| fn with model fn ops	count=2
function	for proper ||| assert valid	count=1
module	of a complex ||| python ops	count=2
function	creates classification [function_2] ||| [function_2] [function_1]	count=2
arg	a lookup ||| vocabulary_file vocab_size default_value	count=1
arg	convolution layer ||| kernel_size	count=1
arg	by gen_parsing_ops ||| features types	count=1
function	all the variables ||| variables to	count=1
function_arg	[function_1] [arg_2] ||| [function_1] lookup params [arg_2]	count=1
arg	operation ||| operation	count=1
module	image s by ||| image python ops	count=1
function	[function_1] path from ||| [function_1] [function_2]	count=3
module	of tensors ||| framework python ops	count=1
function	mix ||| mixed	count=4
function	the max pool ||| max pool shapes	count=2
function	based on ||| base	count=1
function	mix of features ||| optimizer mixed features	count=1
module	registers ||| python ops	count=1
arg	[arg_1] elements from ||| [arg_1] [arg_2]	count=4
module_class	[module_1] [class_2] ||| [module_1] [class_2]	count=1062
module	cell and add ||| rnn	count=2
class	initializes ||| tensor initializer	count=1
module	found in ||| backend event_processing	count=1
function	returns default [function_2] ||| python feature_column check [function_1] [function_2]	count=3
function	tensors linked ||| ts from regex	count=1
class	adds ||| graph rewriter	count=1
module	dictionary and ||| contrib learn	count=1
function	[function_1] sparsetensor ||| [function_2] [function_1]	count=8
function	samples ||| samples	count=1
function	dict containing state ||| dict to state	count=1
function	updates ||| update	count=7
function	name -> _guideref from ||| index	count=1
module	helper which ||| distributions python kernel_tests	count=1
class	creates ||| mutable dense hash table	count=1
class	from ||| control flow context	count=1
function	1/ (1 + x^2) ||| atan	count=1
function	try all ||| all	count=1
arg	precision@k ||| predictions_idx weights	count=1
function	entire tree of python ||| tree	count=1
arg	or y ||| y	count=1
module	for the ||| python feature_column	count=1
module	export ||| contrib learn python learn utils	count=1
function	and real valued features ||| real valued linear features	count=1
arg	computes the recall@k ||| k	count=1
arg	api symbol ||| full_name	count=1
module	loss to the training ||| losses	count=3
function	variable scope ||| var scope	count=2
class	to partition graphs ||| debug dump dir	count=1
function	predictions with respect to ||| precision at top k	count=2
function_arg	[function_1] as labels ||| [function_1] [arg_2]	count=3
function	numpy arrays into ||| numpy	count=1
arg	a single [arg_2] ||| [arg_2] [arg_1]	count=4
arg	in ||| output_dir dictionary	count=1
function_arg	strategies with [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] total log-likelihood ||| [function_1] [function_2]	count=1
module	returns a ||| learn python learn	count=1
function	[function_1] column with ||| [function_1] int [function_2]	count=4
function_arg	a placeholder [arg_2] ||| [arg_2] [function_1]	count=1
function	predictions with respect to ||| precision at top	count=4
function	switch op ||| switch	count=1
function	linear_model_fn but returns ||| linear model fn with model fn ops	count=2
module	computation of ||| distributions python ops	count=1
arg	given values ||| values	count=3
arg	compile ||| cmd_prefix	count=1
function	proto match shape ||| check proto	count=1
module	merges ||| python ops	count=1
function	the current control flow ||| control flow	count=2
function	capture the output of ||| test capture	count=1
function	create an ||| create profiler	count=1
module	batch of ||| contrib seq2seq python ops	count=1
function	[function_1] value ||| [function_1] tensor [function_2]	count=1
class	clusters ||| gmm	count=1
class	debugtensordatum from the directory ||| dump dir	count=1
function	partitioned ||| partitioned	count=5
module	the same as 'values' ||| metrics python ops	count=1
module	dimension of ||| contrib seq2seq python ops	count=1
function_arg	dependency on [arg_2] ||| [arg_2] [function_1]	count=1
function	all ||| filter	count=1
arg	predicted_ids ||| outputs final_state sequence_lengths	count=1
function	the state ||| control flow state	count=1
function	creates [function_1] [function_2] configuration ||| [function_1] [function_2]	count=1
class	of a ||| bernoulli	count=1
function	probability of all ||| prob	count=1
arg	tensor ||| tensor dtype	count=1
function	inputs of a ||| inputs	count=1
function_arg	[function_1] [arg_2] ||| [function_1] same rank [arg_2]	count=2
function	timestamp in seconds of ||| timestamp	count=1
function	of tensor objects ||| to tensor	count=2
function	of the resultant ||| compute elemwise op output	count=1
function	padding required to ||| required space to	count=1
function	[function_1] restart ||| [function_1] [function_2]	count=2
function	context to colocate with ||| maybe colocate with	count=1
module	adapt the ||| python	count=1
class	[class_1] projection ||| [class_1] [class_2]	count=4
class	timer ||| or step timer	count=1
function	outputs ||| outputs make unique	count=2
function	min ||| min	count=2
function	generate ||| generate	count=3
arg	for this handle ||| handle dtype	count=1
function	raises ||| check	count=1
arg	[arg_1] with args ||| [arg_1] [arg_2]	count=1
module	of ||| keras python keras	count=1
function	computes average [function_2] ||| [function_2] [function_1]	count=3
function	variables and ||| and slice inputs	count=1
class	using random ||| random	count=1
function	symbol name ||| guide	count=1
module	of a 1 outcome ||| python ops distributions	count=1
function	to determine the ||| classes	count=2
function	op [function] ||| map structure up [function]	count=3
function_arg	[function_1] grpcdebughook ||| [function_1] [arg_2]	count=1
arg	operators determined to ||| operators	count=1
module	this cell output ||| contrib rnn python ops	count=1
function	reads the ||| read	count=4
arg	x along ||| x	count=1
module	a non-reference dtype based ||| python framework	count=1
module	not a function of ||| ops distributions	count=1
function	provided have invalid type ||| invalid number	count=1
function	generated boxes ||| boxes	count=1
function	convert a list ||| list	count=1
function	tensors linked ||| from regex	count=1
function	postfix representation ||| structure	count=1
module	a 1 outcome (vs ||| ops distributions	count=1
function	batch normalization ||| batch norm op	count=2
module	for evaluating ||| contrib tensor_forest python	count=1
function	at least the ||| rank at least	count=2
class	"deferred" ||| grad loop state	count=1
arg	of the losses ||| losses	count=1
function	true if [function_2] ||| [function_2] [function_1]	count=2
function	offset when the variable ||| offset	count=1
function	to make sure ||| test	count=1
module	list of ||| contrib distributions python ops	count=2
arg	[arg_1] to terminate ||| [arg_1] [arg_2]	count=3
module	vocabulary dictionary ||| learn python	count=1
function	of tags ||| tags	count=1
function	is probably [function_2] ||| [function_2] [function_1]	count=2
function	the sampled [function_2] ||| [function_2] [function_1]	count=3
module	of tensors corresponding ||| factorization python ops	count=4
function	[function_1] sparse ||| [function_2] features [function_1]	count=1
module	of the output interval ||| python ops	count=1
function	pad ||| pad	count=2
arg	newpath ||| newpath	count=1
function_arg	[function_1] np_matrix ||| [function_1] [arg_2]	count=1
module	menuitem from the ||| python debug	count=1
arg	and [arg] ||| [arg]	count=3
module	learn the ||| contrib learn python learn preprocessing	count=1
function	[function_1] slice ||| [function_1] [function_2]	count=2
function	represents a reference ||| ref	count=1
function	computes the minimum ||| min	count=1
function	[function_1] step tensor ||| [function_1] [function_2]	count=5
arg	of tensor ||| tensor np_printoptions offset	count=1
function	rnn ||| dynamic rnn	count=1
function	approximate auc via ||| streaming auc	count=1
function	the tensors linked to ||| from regex	count=1
arg	[arg] unit test ||| tester [arg]	count=1
function	[function_1] order ||| [function_1] [function_2]	count=3
function	to ops ||| filter ts	count=1
function	non-control edges related to ||| non control edges of	count=1
function	[function_1] with ||| [function_1] real valued [function_2]	count=1
function	maximum of two ||| maximum	count=1
module	numpy array ||| contrib keras python keras	count=1
class	navigation ||| navigation history	count=1
class	weight column ||| regressor	count=1
function	indices represented ||| indices	count=2
module	return tensor version ||| python ops distributions	count=1
arg	representation of a ||| dictionary	count=1
function_arg	[function_1] looperthread ||| [function_1] [arg_2]	count=1
function_arg	sets the [arg_2] ||| [function_1] epsilon [arg_2]	count=3
function	and ||| and mat	count=2
function	of an mvndiag _sample_n ||| mvndiag sample outputs	count=1
function	variables in a graph ||| graph	count=1
arg	construct an ||| name	count=1
function_arg	[function_1] table with ||| [arg_2] [function_1]	count=1
arg	return the gradients for ||| grad	count=1
function	bilinear ||| bilinear	count=1
function	use for ||| or dict	count=1
function	_sparsecolumn [function] ||| sparse column [function]	count=2
class	the wrapper should work ||| wrapper session test	count=1
module	sets ||| keras python keras	count=3
class	callback ||| curses ui	count=1
function	add [function_2] ||| [function_1] [function_2] dependency	count=1
function	calculate padding required ||| required space	count=1
module	whether ||| python keras	count=1
module	matrix of ||| contrib factorization python ops	count=1
function	arg into ||| exprs arg string	count=1
class	by concrete subclasses ||| interactive debug wrapper session	count=1
function	dump [function_2] ||| [function_1] [function_2]	count=4
function	classes for given features ||| classes	count=2
function	add operations to minimize ||| minimize	count=1
function	impose desired [function_2] ||| [function_1] [function_2]	count=4
function	[function_1] new tensor ||| [function_1] [function_2]	count=1
arg	boundaries and ||| boundaries	count=1
function	proto match ||| check proto	count=1
module	from [module_2] ||| [module_1] [module_2]	count=2
module	find ||| python ops	count=1
arg	[arg] it only ||| [arg]	count=3
module	loss to the training ||| python losses	count=2
module	a ||| tools	count=1
arg	real ||| real	count=1
function	the state for all ||| control flow state	count=1
module	op (e ||| python framework	count=1
arg	keys [arg_2] ||| [arg_2] [arg_1]	count=2
arg	on col_seq ||| col_seq overlapping	count=2
function	compile ||| compile	count=1
module	list of tensor or ||| python ops	count=1
function	precision values for ||| precision	count=1
module	[module] update_weights ||| contrib learn [module] learn	count=1
function	returns all ||| all	count=1
arg	[arg_1] tensor reference ||| [arg_2] [arg_1]	count=2
arg	gradients to ||| grad var	count=1
class	tensor for ||| builder	count=1
module	the inputs and outputs ||| contrib graph_editor	count=1
class	learn the ||| processor	count=1
module	the transformer ||| contrib layers python	count=1
arg	the feeds [arg_2] ||| [arg_2] [arg_1]	count=4
function	common ||| common	count=2
function	feed conversion functions ||| conversion functions	count=2
arg	print ||| device input_shape	count=1
function	tensor [function_2] ||| [function_2] [function_1]	count=19
module	to a multiple of ||| training	count=1
class	to partition graphs ||| dump dir	count=1
function_arg	task in [arg_2] ||| [arg_2] [function_1]	count=1
arg	tensor with all ||| tensor dtype name	count=1
function	fill tensor ||| fill missing graph	count=1
class	number ||| hash buckets	count=1
arg	create a svstepcounterthread ||| sv sess step_counter	count=1
function	tensor not dict ||| tensor	count=1
function	the end of ||| on epoch end	count=1
function	[function_1] training ||| [function_2] [function_1]	count=12
arg	to x ||| x	count=2
function	invalid ||| invalid number of classes	count=1
function	[function_1] file ||| python layers sparse column [function_1] [function_2] column_name vocabulary_file num_oov_buckets vocab_size	count=1
module	ops library ||| ops	count=1
function	return ||| assert valid	count=1
module	of tensors ||| distributions python ops	count=2
function	cdf against ||| cdf	count=1
class	the file was opened ||| file io	count=1
function	the object's docstring and ||| md docstring	count=1
function	the asset [function_2] ||| [function_1] [function_2]	count=4
function	converts an indexedslices object ||| indexed slices	count=1
function	for matmul ||| calc mat mul	count=1
function	of parameters in ||| total params	count=1
function	are ||| assert	count=1
function	[0 n_classes) ||| at k5 some out of	count=2
arg	nonlinearity ||| grad_softmax	count=1
function	graph with a while ||| graph with while	count=1
function	and attention and ||| attention	count=1
function_arg	device for [arg_2] ||| [function_1] [arg_2]	count=1
class	a table ||| hash table	count=2
class	data ||| image data generator	count=2
function	collect information ||| collect docs for	count=1
function	build a [function_2] ||| [function_1] [function_2]	count=6
function	that match ||| ts from	count=1
module	returns a list instead ||| learn	count=1
function	[function_1] evaluation metrics ||| [function_2] [function_1]	count=2
arg	a cell with ||| cell num_proj activation input_size	count=1
function_arg	[function_1] a model ||| [arg_2] [function_1]	count=2
class	[class_1] elements ||| [class_2] [class_1]	count=1
function	[function_1] and timestamps ||| [function_1] [function_2]	count=1
function	the proto_type for ||| collection	count=1
function	[function_1] summary file ||| [function_2] [function_1]	count=6
function	queue batch ||| batch	count=2
class	op responsible for initializing ||| resource	count=1
module	event ||| backend event_processing	count=1
module	returns a list of ||| contrib factorization python ops	count=4
module	nested tuple of ||| ops	count=2
function	of compressed [function_2] ||| [function_2] [function_1]	count=1
arg	are seen ||| num_classes smoothing_constant	count=1
function	report a ||| report	count=1
function	[function_1] single batch ||| [function_1] [function_2]	count=4
function	sparse features ||| sparse features	count=2
function	[function_1] randomly ||| [function_1] [function_2]	count=1
arg	the actual value tensor ||| actual static_shapes atol	count=1
function	handle ||| handle	count=2
function	boundary ||| boundary ops	count=2
function	output a summary ||| summary	count=1
function	entries in the signature ||| signature	count=1
arg	input_tensors) from ||| attr attr_name	count=1
arg	pred ||| pred dtype	count=1
class	tensorflow ||| flow	count=1
function	values then return ||| assert valid	count=1
arg	serialized minibatch ||| serialized_sparse dtype	count=1
function	real valued features of ||| real valued feature	count=1
function	and parameters ||| optimize	count=1
module	the given list of ||| slim python	count=1
class	to prevent a tensor ||| tensor	count=2
arg	execute ||| sess enqueue_op coord	count=1
function	positive definite [function_2] ||| [function_2] [function_1]	count=1
function	given [function_1] [function_2] ||| [function_2] [function_1]	count=2
function	raw handle ||| get raw handle	count=2
function	input arg ||| exprs arg	count=1
function	sync_token_queue with the tokens ||| init tokens	count=1
module	be produced or ||| python	count=1
module	filled ||| python estimator inputs queues	count=1
class	the model ||| sdca model	count=3
function_arg	[function_1] condition x ||| [arg_2] [function_1]	count=4
function_arg	latest event [arg_2] ||| [function_1] events [arg_2]	count=1
module	if all are sessionrunhook ||| estimator	count=1
module	of zero or ||| contrib linalg python ops	count=1
module	that [module] set correctly ||| [module]	count=1
module	[module_1] return the ||| [module_2] [module_1]	count=4
function_arg	central [arg_2] ||| [function_1] crop image [arg_2]	count=1
function	true positives for ||| streaming sparse true positive at k	count=1
function	targets ||| target compatibility	count=1
function	cond ||| cond	count=1
function	left ||| left	count=2
class	whether client ||| navigation history	count=1
arg	cell with [arg_2] ||| [arg_1] [arg_2]	count=5
class	wrapper should work ||| debug wrapper	count=1
function	weights ||| save weights	count=1
module	image s ||| image python	count=1
class	that yields ||| record input	count=1
function_arg	decodes [arg_2] ||| [arg_2] [function_1]	count=1
function	axis [function_2] ||| [function_1] [function_2]	count=4
function_arg	[function_1] convolution function ||| [function_1] tensor_in_sizes [arg_2]	count=1
class	in this cluster ||| cluster spec	count=1
function	resnet-50 model ||| 50	count=1
module	samples from each [module_1] [module_2] ||| [module_2] [module_1]	count=4
arg	lines to extract ||| lines	count=1
function	returns a shape ||| shape	count=2
function	that maps input key ||| preprocess input	count=1
module	-> _guideref ||| tools	count=1
class	with ||| out for testing	count=1
module	convert all elements of ||| ops	count=1
function	returns the weight ||| weight	count=3
function	sentinel event for ||| sentinel event	count=1
module	of a function ||| labeled_tensor python ops	count=1
function	computes the lstm ||| lstm block	count=1
function	all inputs of the ||| inputs tensor	count=1
function	get all ||| filter ts from	count=1
function	[function_1] all events ||| [function_2] [function_1]	count=1
module	[module_1] the specified ||| [module_1] [module_2]	count=1
function	[function_1] inputs to ||| [function_2] [function_1]	count=6
module_class	a new server ||| python training server	count=1
function	strings e g ||| string	count=1
module	of underlying vector space ||| python ops	count=1
function	path used ||| path	count=1
function	[function_1] array ||| [function_2] [function_1]	count=1
module	as self _value ||| bayesflow python ops	count=1
function	control outputs of ||| control outputs	count=2
function_arg	[function_1] co-existance ||| [function_1] input args [arg_2]	count=1
function	the diagonal ||| diag	count=2
arg	b ||| b dropout	count=1
function	a numpy array ||| array	count=1
function	the latest [function_2] ||| [function_2] [function_1]	count=1
function	invalid ||| by invalid	count=1
arg	batches ||| file_pattern batch_size	count=1
function	update [function_2] ||| [function_2] metric [function_1]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] grad [arg_2]	count=4
function	a savedmodel ||| savedmodel	count=1
module	invoked ||| python debug wrappers	count=1
arg	append sharding information ||| filename_tensor shard num_shards	count=1
function	a depth [function_2] ||| [function_2] [function_1]	count=2
function	op to save the ||| save	count=1
class	tensor based ||| tensor	count=1
function_arg	[function_1] tensors ||| [arg_2] [function_1]	count=10
class	the handler with the ||| handler	count=1
arg	according to which_bucket ||| which_bucket batch_size	count=1
function	count the total ||| count params	count=1
function	random initializer ||| initializer	count=1
arg	predictions with respect to ||| predictions	count=3
function	signature to object ||| signature to signature	count=1
function_arg	min across tensors ||| min tensors	count=2
function	the string message ||| message	count=1
module	instance ||| learn	count=1
function_arg	perform [arg_2] ||| [arg_2] [function_1]	count=3
function	the state of this ||| state	count=1
function	[function_1] decoder ||| [function_1] [function_2]	count=2
function	[function_1] root ||| [function_1] [function_2]	count=3
function	time shape ||| shape	count=1
function_arg	recurrent [arg_2] ||| [function_1] [arg_2]	count=1
function	render ||| render node	count=1
arg	return elements from x ||| x	count=1
function_arg	enqueue [arg_2] ||| [function_1] [arg_2]	count=1
function	string_to_hash_bucket op to ||| string to	count=1
arg	x to ||| x	count=3
function	for node-status ||| status label	count=1
function	training loss ||| loss	count=2
function	[function_1] an input_fn ||| [function_2] [function_1]	count=5
function_arg	[function_1] of data ||| hybrid python hybrid model [function_1] [arg_2] data_spec	count=3
module	sequence ||| contrib keras python keras preprocessing	count=2
arg	lstm across all steps ||| inputs noutput scope name	count=1
class	and/or output dropout ||| dropout wrapper	count=1
arg	matching the ||| tensor_values	count=1
arg	activations ||| activations labels sequence_length	count=3
class	the current context ||| while context	count=1
function	computes the multivariate digamma ||| multi digamma	count=1
class	don't ||| test	count=1
function	the image [function_2] ||| [function_1] [function_2]	count=1
function	sentinel event for terminating ||| sentinel event	count=1
function	[function_1] menu for ||| [function_1] [function_2]	count=2
function	metagraphdef ||| meta graph def	count=1
arg	container ||| container	count=1
class	construct multivariate normal ||| multivariate normal linear operator	count=1
function	added to index ||| to index	count=1
function	score function ||| get score function	count=2
class	normal distribution on ||| normal diag plus	count=1
function	global default ||| default	count=1
class	a dnnclassifier ||| dnnclassifier	count=1
class	multivariate normal ||| multivariate normal diag plus low rank	count=1
function	restores ||| restore	count=1
function	get request for ||| get	count=1
function	the regularization ||| unregularized	count=1
function	[function_1] pooling ratio ||| [function_1] [function_2]	count=2
function	kind ||| kind	count=1
arg	estimator object ||| weight_column_name	count=1
class	eventaccumulator after adding some ||| mocking event accumulator	count=1
class	total number ||| crossed	count=1
arg	a bigqueryreader ||| project_id dataset_id table_id timestamp_millis	count=1
function	the output ||| get output	count=2
function	function to ||| conv2d	count=1
class	any ||| clicontrol dep	count=1
function	[function_1] bias feature ||| [function_1] [function_2]	count=1
function	find the [function_2] ||| [function_1] [function_2]	count=1
class	input_fn that ||| kmeans test	count=1
function	python traceback ||| node traceback	count=1
function	[function_1] a table ||| [function_2] [function_1]	count=1
module	invoked ||| debug wrappers	count=1
function	[function_1] names ||| [function_2] [function_1]	count=15
function	sets the value ||| set	count=1
class	the decoder can decode ||| data decoder	count=1
class	the enqueue ops ||| queue runner	count=1
class	conditional ||| cond	count=1
class	wrapper should work ||| debug wrapper session	count=1
function	list of [function_2] ||| [function_2] [function_1]	count=3
class	node ||| node stepper	count=1
module	same as the last ||| learn python learn estimators	count=3
arg	x ||| x message	count=2
arg	from input_tensor ||| input_tensor	count=2
module	of x ||| python ops	count=1
function_arg	[function_1] through ||| [function_1] [arg_2]	count=4
module	to make sure ||| tools	count=1
function_arg	[function_1] sequence ||| [function_1] [arg_2]	count=1
arg	differences ||| other_dump step atol	count=1
function	[function_1] jacobian is ||| [function_1] [function_2]	count=3
function	flip dims [function_2] ||| [function_1] [function_2]	count=8
module	with training ||| python learn estimators	count=1
function	the tensor [function_2] ||| [function_1] [function_2]	count=1
function	dict ||| build guide index	count=1
function	spec ||| spec	count=2
function	the ||| fit	count=1
function	sets the summary ||| set summary	count=2
function	a summary of ||| tf spec summary	count=1
function	rfft ||| length for rfft	count=1
arg	config ||| cls config	count=1
function	tf cond ||| smart cond	count=1
function	returns the proto_type for ||| collection proto	count=1
class	transform to the ||| flow transform	count=1
class	an +rnn cell ||| intersection rnncell	count=1
function	maximum of ||| maximum	count=1
arg	y ||| y name	count=6
function	search ||| search	count=2
module	used by the ||| python	count=4
function	if it is inside ||| if inside	count=1
arg	threshold ||| threshold	count=1
function	nearest neighbor resizing ||| resize nearest neighbor	count=1
function	to init [function_2] ||| [function_1] [function_2]	count=1
function	try all possible input ||| all input	count=1
function	proto_type for ||| collection proto	count=1
arg	from multiple devices ||| filename_tensor per_device restore_sequentially reshape	count=1
class	from the directory ||| dump dir	count=1
function	the given variable ||| load variable	count=1
function	[function_1] [function_2] ||| [function_2] and sparse [function_1]	count=8
function	variabledef as ||| proto	count=1
function	the variable [function_2] ||| [function_1] [function_2]	count=2
function	[function_1] structure ||| [function_1] [function_2]	count=2
function	mean squared error ||| mean squared error	count=6
function	[function_1] initializations ||| [function_1] [function_2]	count=5
module	only the ||| ndlstm python	count=1
function_arg	shape of [arg_2] ||| [arg_2] [function_1]	count=3
arg	is_list ||| is_list	count=1
function	[function] into given ||| [function]	count=1
class	tensor in ||| tensor	count=3
function	construct a richline ||| init	count=1
arg	creates a tensor with ||| tensor dtype name	count=1
arg	solver ||| operator rhs tol max_iter	count=1
module	the sense ||| linalg python ops	count=5
module	if all are sessionrunhook ||| python	count=1
arg	a suitable summary ||| tag	count=1
arg	rnncells ||| cells state_is_tuple	count=1
arg	fn2() ||| fn1 fn2 name	count=1
function	create command ||| create command	count=2
module	construct a new ||| python training	count=6
function	columns ||| columns	count=5
function	tuples into ||| features to	count=1
module_class	and [class_2] ||| [module_1] mutable dense hash [class_2]	count=1
function	the beginning [function_2] ||| [function_2] [function_1]	count=2
function	list [function_2] ||| [function_1] [function_2]	count=7
function	min or max amazingly ||| min or max	count=1
function	or ||| get or	count=1
function	metagraphdef proto ||| meta	count=1
module	whether ||| debug lib	count=1
module	ops [module_2] ||| [module_1] [module_2]	count=1
function	lookup table that ||| table from	count=1
arg	vector inner ||| xs ys name	count=2
function	[function_1] a vector ||| [function_1] [function_2]	count=1
function	return the next ||| next	count=1
module	of [module_2] ||| [module_1] [module_2]	count=85
function	the inputs to a ||| inputs	count=1
arg	builds model graph and ||| features	count=4
function	event for terminating ||| event	count=1
module	vocabulary dictionary and ||| learn	count=2
arg	to runoptions for ||| run_options	count=1
function	[function_1] single value ||| [function_2] [function_1]	count=6
arg	by normalizing with ||| labels predictions normalizer	count=1
module	to ops that match ||| graph_editor	count=1
function	zlib library compatible ||| write zlib read	count=2
arg	of sequences into ||| sequences mode	count=1
class	simple ||| graph actions train test	count=1
function	for proper shape values ||| sample	count=1
arg	storing the [arg_2] ||| [arg_2] [arg_1]	count=1
module	get ||| contrib	count=1
function	tensor version ||| assert valid sample	count=1
function	are sessionrunhook raises ||| check hooks type	count=1
function	return the saver ||| saver	count=1
module	will ||| python	count=1
function	the given ||| call	count=1
function	when loss ||| loss	count=2
arg	[arg_1] 1 or ||| [arg_1] [arg_2]	count=1
function	recipient ||| recipients	count=1
class	mapper that ||| fetch mapper	count=1
function	fake bias [function_2] ||| [function_1] [function_2]	count=3
function	returns -grad * ||| erfc	count=1
arg	conjugate prior on ||| prior scale	count=1
arg	ops to a ||| ops	count=1
arg	softmax_cross_entropy_with_logits ||| onehot_labels weights label_smoothing	count=1
function_arg	product across [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] common to ||| [function_2] [function_1]	count=2
function	[function_1] pill ||| [function_2] [function_1]	count=2
function	placeholders [function_2] ||| [function_2] [function_1]	count=1
function	local [function] ops to ||| get local [function]	count=1
module	asserts ||| contrib learn python learn estimators	count=1
class	layer ||| hybrid layer	count=1
function	all the ||| all	count=1
module	rejection ||| python training	count=1
function	converts ||| internal convert n to	count=1
class	layer from numpy ||| layer	count=1
class	the model for training ||| model	count=1
arg	the labels and predictions ||| predictions labels dim	count=1
class	[class_1] weight column ||| [class_2] [class_1]	count=1
class	output tensor ||| output	count=1
module	as input ||| contrib learn python learn estimators	count=10
function	values ||| output values	count=3
function	numpy arrays ||| numpy	count=1
function	process the given ||| process	count=1
arg	elems ||| elems initializer name	count=2
module	"matmul") ||| python	count=1
class	chrome ||| timeline	count=1
arg	the given [arg_2] ||| [arg_2] [arg_1]	count=8
function	discards [function_2] ||| [function_1] [function_2]	count=2
function_arg	[function_1] numpy ||| [arg_2] [function_1]	count=1
module	get ||| debug	count=2
function	linear_model_fn but returns ||| model fn ops	count=2
class	a fifoqueue ||| fifoqueue	count=1
class	base feature ||| feature	count=1
function	proto_type for ||| get	count=1
function	__init__ which ensures override ||| override	count=1
arg	of tensors into ||| cls tensors	count=1
function	file without ||| without	count=1
function	shape for ||| out shape	count=1
class	sdcalogisticclassifier ||| sdcalogistic classifier	count=4
class	the ast ||| visitor	count=1
function	[function_1] [function_2] ||| [function_2] [function_1] primary name dtype colocate_with_primary	count=4
module	dense ||| python framework	count=1
module	a sequence ||| python keras	count=1
function	log the in and ||| log op gradients	count=1
function	returns ||| get model	count=1
arg	are calculated using a ||| grad _	count=1
module	regression ||| python learn estimators	count=2
module	to ||| python training	count=2
function_arg	[function_1] optimizer ||| [function_1] loss loss [arg_2]	count=2
module	helper which ||| contrib distributions python	count=1
module	a 1 outcome ||| ops	count=1
arg	in model_dir ||| var_names_to_values checkpoint_dir global_step	count=1
module	equal ||| distributions	count=1
module	that [module] ||| [module]	count=2
function	[function_1] list ||| [function_2] [function_1]	count=7
function	from ||| from	count=41
function	split ||| split	count=6
module	returns ||| python estimator	count=2
function_arg	[function_1] given examples ||| [arg_2] [function_1]	count=17
class	resample ||| resample	count=1
arg	a sparsetensorsmap ||| container shared_name name	count=2
function	name to values ||| values	count=1
function	then return tensor version ||| sample	count=1
function	[function_1] the output ||| [function_1] [function_2] shape input_shape	count=1
function	an embedding column of ||| embedding column	count=1
function	reshape node with ||| reshape node	count=2
module	determining the ||| keras python	count=1
function	step_begin ||| begin	count=1
module	a bijector ||| bijectors	count=1
module	values then ||| distributions	count=1
function	temporary ||| temp	count=1
arg	of inputs ||| inputs	count=1
function	has ||| has	count=4
class	longer rich [class_2] ||| [class_1] [class_2]	count=1
function	classes and ||| build standardized signature	count=1
class	keys and values ||| sharded mutable dense hash	count=1
function	it to ||| to	count=1
function	a root directory ||| root dir	count=1
function	queue to ||| queue	count=1
function	the indices of non-zero ||| indices	count=1
function_arg	dynamic rnn [arg_2] ||| [function_1] step [arg_2]	count=1
function	wav ||| wav	count=1
function	update for dnn-only model ||| dnnonly	count=1
function	for proper ||| valid	count=1
arg	get ||| ops	count=1
function	[function_1] shape=[2] ||| [function_2] [function_1]	count=12
arg	custom_getter to use ||| custom_getter	count=1
function	all the ||| with all resources	count=1
function	[function_1] combined ||| [function_2] [function_1]	count=2
function	gets the asset ||| get asset	count=1
function	[function_1] [function_2] ||| [function_1] node without [function_2]	count=6
function_arg	[function_1] conjugate prior ||| [arg_2] [function_1]	count=2
module	text ||| keras python keras	count=1
arg	estimator object ||| example_id_column feature_columns weight_column_name model_dir	count=1
function	[function_1] page ||| [function_1] nonexistent [function_2]	count=1
arg	given logits ||| logits	count=1
function	2d ||| conv2d	count=1
function_arg	shape of [arg_2] ||| [function_1] [arg_2]	count=3
arg	grad ||| grad	count=4
class	bernoulli ||| bernoulli test	count=2
arg	purges ||| most_recent_step most_recent_wall_time event_step event_wall_time	count=1
function	return tensor ||| maybe assert	count=1
function	for a type ||| type	count=1
function	[function_1] at ||| [function_2] [function_1]	count=2
function	adds a pairwise-errors-squared ||| mean pairwise squared error	count=1
function	reshape batch vector ||| vector	count=1
function	[function_1] repeat ||| [function_2] [function_1]	count=2
function	zoom of a ||| zoom	count=1
module	[module_1] image ||| [module_1] [module_2]	count=1
function_arg	[function_1] apply conv ||| [function_1] bn x [arg_2]	count=1
function_arg	[function_1] vector keep_input ||| [arg_2] [function_1]	count=4
function	dims corresponding ||| dims	count=1
function	name of the handle ||| name	count=1
function	a list of context ||| context	count=1
module	the loaded module ||| contrib tensor_forest hybrid python	count=1
module	mnist model up to ||| factorization examples	count=1
function	returns a copy ||| copy	count=1
function	graph and returns ||| get	count=5
function	to use based on ||| string to hash bucket	count=1
arg	feature_values ||| feature_values keys features	count=1
function	prune non-control [function_2] ||| [function_2] [function_1]	count=4
function	a richtextlines object ||| rich text lines	count=1
function	reshaping behavior of ||| column reshaping	count=1
arg	lower triangular matrix ||| identity_multiplier diag tril event_ndims	count=1
arg	for precision@k ||| predictions_idx class_id weights	count=1
module	-> ||| docs	count=1
arg	gradients to var ||| grad var	count=6
arg	for the screen output ||| output node_name enable_list_tensors enable_node_info	count=1
function	ops that ||| filter ts	count=1
class	a metadata [class_2] ||| [class_2] [class_1]	count=4
module	node ||| python debug lib	count=1
module	two lists of ||| contrib labeled_tensor python ops	count=1
arg	[arg_1] b for ||| [arg_1] [arg_2]	count=2
arg	labels and predictions ||| predictions labels weights metrics_collections	count=2
function	stores trace information ||| store trace	count=1
function	with real valued ||| real valued	count=5
function	of parameters [function_2] ||| [function_2] [function_1]	count=8
function_arg	[function_1] output ||| [function_1] shape [arg_2]	count=1
arg	non-audio parts of the ||| sample_rate num_channels length_frames	count=1
class	by the pluginasset ||| asset	count=1
module	store as self _value ||| contrib bayesflow	count=1
arg	experiment ||| experiment	count=1
arg	[arg_1] weights + ||| [arg_1] [arg_2]	count=4
module	creates ||| contrib training python training	count=1
function	the ||| guide index	count=1
function	mini ||| mini	count=1
function	get ||| ts from	count=1
function	[function_1] that ||| [function_2] [function_1]	count=10
arg	certain predicate ||| predicate first_n	count=1
function	for linear-only ||| linear only	count=1
function	run a tensorflow graph ||| run graph	count=2
class	to nearest clusters ||| gmm	count=1
function_arg	[function_1] to train ||| [function_1] [arg_2]	count=3
module	typeerror ||| python	count=1
module	with default shuffle ||| contrib learn python learn learn_io	count=1
function	returns true if ||| is gputrace	count=1
module	sequence-to-sequence model ||| legacy_seq2seq python ops	count=1
function	a ||| test	count=1
module	number of ||| distributions python ops	count=4
arg	satisfies a ||| static_condition dynamic_condition	count=1
function	feeding into predict step ||| predict	count=1
function	large records is ||| large	count=1
module	_guideref from the ||| docs	count=1
function	the offset when ||| offset	count=1
function	the old values ||| values	count=1
module	loss to ||| python losses	count=2
function	hasher_spec ||| hash bucket fn	count=1
function_arg	[function_1] predictions, labels ||| [function_1] [arg_2]	count=2
function	absolute value ||| abs	count=3
function	write ||| write image	count=1
function	cross entropy ||| cross entropy with logits	count=2
module	of keras tensors ||| keras	count=1
class	concatenation ||| tensor shape	count=1
function	page ||| build class page	count=1
function	typeerror otherwise ||| hooks	count=1
class	initializer ||| initializer	count=2
function	and process ||| process	count=1
function	[function_1] random ||| [function_1] [function_2]	count=1
class	elements ||| indexed slices	count=1
arg	tf ||| np_array	count=1
module_class	layer [class_2] ||| [module_1] [class_2]	count=4
class	gradients of the dilation ||| dilation	count=1
module	tensor and returns it ||| contrib keras python keras	count=1
function	[function_1] sparse ||| [function_1] lookup [function_2]	count=1
module	predicate/value ||| contrib layers python layers	count=1
module	outcome (vs 0) ||| ops distributions	count=1
arg	logits given in input ||| inputs sequence_length beam_width top_paths	count=1
module	the mnist ||| contrib factorization examples	count=2
function_arg	control [arg_2] ||| [arg_2] [function_1]	count=4
arg	g1 ||| g1 name	count=1
function	export model for ||| export	count=3
function	input tensor ||| input tensor	count=4
module	and return indexies of ||| learn python learn preprocessing	count=1
function	returns the id ||| id	count=3
arg	vec to ||| vec	count=1
arg	of a set ||| ops	count=1
module	list of tensors ||| contrib framework python ops	count=1
module	collection of losses ||| contrib losses python losses	count=1
arg	maps ||| default_value name	count=3
function	generate main [function_2] ||| [function_1] [function_2]	count=4
arg	functional interface ||| inputs filters	count=2
function	with values added to ||| to	count=1
function	the help [function_2] ||| [function_2] [function_1]	count=3
module	a dataframe into two ||| dataframe	count=1
arg	looperthread ||| timer_interval_secs target args kwargs	count=1
function	an input_fn for use ||| input fn	count=1
module	to ||| graph_editor	count=1
function	a conv ||| conv	count=1
function	graph as [function] into given ||| [function]	count=1
class	queue when the ||| queue	count=1
module	node ||| python tools	count=2
module_class	op [class_2] ||| [module_1] [class_2]	count=1
function	absolute error between the ||| absolute error	count=1
function	inference on a batch ||| inference graph	count=2
module	matrix of ||| factorization python ops	count=1
class	dictionary and return ||| categorical processor	count=1
class	the model for ||| model	count=2
function	predict and ||| predict	count=1
arg	wait for ||| timeout	count=1
arg	and d2 ||| d2 name	count=1
module	run the ||| python ops	count=1
function	before ||| on batch begin	count=1
module_class	[module_1] staging ||| [module_1] ops [class_2]	count=1
function	true positives for ||| sparse true positive at k	count=2
module	variable and returns ||| keras	count=1
class	and a tensorflow tensor ||| tensor flow	count=1
module	all the operations ||| graph_editor	count=1
arg	x is ||| x	count=2
arg	x or ||| x	count=1
arg	cursesui [arg_2] ||| [arg_2] [arg_1]	count=8
arg	a tensorflow graph ||| graph	count=1
function	batch_shape, possibly [function_2] ||| [function_2] [function_1]	count=2
function	the partitioned variable ||| partitioned variable	count=1
arg	[arg_1] and outputs ||| [arg_2] [arg_1]	count=1
function	condition based ||| scalar condition	count=1
arg	each cluster center ||| clusters	count=1
function	request a [function_2] ||| [function_2] [function_1]	count=5
function_arg	to observations [arg_2] ||| [arg_2] [function_1]	count=2
function	length of ||| length	count=1
module	session and ||| python learn dataframe	count=1
function_arg	[function_1] val to ||| [arg_2] [function_1]	count=1
function	output ||| get output	count=3
function	into predict ||| predict data feeder	count=1
class	multiple ||| model export utils	count=1
function	arguments are ||| arguments	count=5
arg	for input data ||| data	count=1
function	projects the row ||| project row	count=3
class	queue in case of ||| queue	count=1
arg	var_list ||| var_list	count=1
function	with bucketized ||| bucketized	count=2
function	gets ||| get unique	count=1
arg	[arg_1] recall@k of ||| [arg_2] [arg_1]	count=2
function	flattens inner dimensions of ||| inner flatten	count=1
arg	row in labels ||| labels k	count=1
function	capture the output ||| capture	count=1
function	precision@k of ||| k	count=1
function	checks the ||| check	count=1
module	a numpy image tensor ||| contrib keras python keras preprocessing	count=3
module	total sum of ||| python ops	count=1
arg	sigmoid_cross_entropy_with_logits ||| multi_class_labels weights label_smoothing	count=1
module	layer ||| python layers	count=2
arg	to split dims values ||| cls dims	count=1
function	to vector with dynamic ||| to vector dynamic	count=1
class	represented by this operator ||| operator scaled identity	count=1
function	creates the eval step ||| create eval step	count=1
function_arg	variable [arg_2] ||| [function_1] apply dense grad [arg_2]	count=1
arg	values to ||| values dtype name as_ref	count=1
function	op to ||| get string to hash	count=1
function	inputs according to their ||| by	count=1
class	visitor ||| visitor	count=1
module	using matrix data as ||| contrib learn python learn estimators	count=2
function	[function_1] a string ||| [function_1] [function_2]	count=6
function	an arg_scope ||| add arg scope	count=1
arg	body ||| body original_loop_vars loop_vars	count=1
function	of the first ||| first	count=1
class	to make ||| files	count=1
arg	gradient-based optimizer ||| labels mode params	count=1
module	to init ||| python saved_model	count=1
arg	tensors ||| tensors feed_dict	count=1
module	loss ||| python ops losses	count=2
function_arg	labels [arg_2] ||| [arg_2] [function_1]	count=1
module	a sequence ||| contrib keras	count=1
function_arg	[function_1] [arg_2] ||| [function_1] allowing override [arg_2]	count=12
function	and tests the ||| test	count=1
function	list inputs ||| list inputs non recursive no control	count=1
function	estimator using kernel methods ||| kernel	count=1
class	create ||| robin	count=1
function	inference on a ||| inference graph	count=2
function_arg	a signaturedef [arg_2] ||| [arg_2] [function_1]	count=2
module	desired shape of a ||| python ops	count=1
arg	dimension ||| dim epsilon scope	count=1
class	location ||| relaxed bernoulli	count=1
function	versions of convolution shapes ||| shapes	count=1
function	decoding on the logits ||| decoder	count=2
function	containing all the data ||| with all	count=1
arg	initialize the parameters for ||| use_peepholes	count=1
module	to a multiple of ||| training python training	count=1
function_arg	parameters [arg_2] ||| [arg_2] [function_1]	count=1
function	accumulator for [function_2] ||| [function_2] [function_1]	count=6
function	computes the mean relative ||| streaming mean relative	count=1
module_class	[module_1] rmsprop optimizer ||| [module_1] [class_2]	count=6
module	the number of ||| ops	count=2
function	a menuitem from the ||| to	count=1
class	[class_1] operator ||| [class_2] [class_1]	count=2
module_class	[module_1] [class_2] ||| [module_1] operator [class_2]	count=4
function	same embedding ||| shared embedding	count=1
function	subscribed identity ops are ||| subscribed identity	count=1
function_arg	[function_1] the inputs ||| [arg_2] [function_1]	count=3
function	to use based ||| get string to hash	count=1
module	previous output ||| contrib grid_rnn	count=1
function	string_to_hash_bucket op to ||| to	count=1
arg	values to a list ||| values dtype name	count=1
function	zlib library compatible ||| zlib	count=2
function	dependency on ||| edges	count=1
function	of the items that ||| items	count=1
class	reader ||| reader base	count=3
module	version with default ||| learn python learn learn_io	count=1
function	extend the list of ||| extend	count=1
function	dictionary and return indexies ||| fit transform	count=1
function	to index of ||| to index	count=1
function_arg	[function_1] gradients ||| [arg_2] [function_1]	count=8
function	names haven't changed ||| names	count=1
function	importance sampling ||| expectation importance	count=1
function	check that the ||| check	count=1
function	parses and asserts a ||| parse	count=1
function_arg	[function_1] [arg_2] ||| [function_1] debug_dump tensor_filters ui_type [arg_2]	count=3
function	return [function_2] ||| [function_2] [function_1]	count=2
function	depends on all registered ||| seen by	count=1
function	[function_1] of indices ||| [function_2] [function_1]	count=2
function	a file system race ||| test inplace	count=1
class	[class_1] forest ||| [class_1] [class_2]	count=2
arg	whether pending ||| pending	count=1
class	[class_1] session ||| [class_1] [class_2]	count=4
module	-> _guideref from ||| tools	count=1
function	[function_1] serving_input_receiver_fn ||| [function_1] raw [function_2]	count=1
function_arg	[function_1] words ||| [arg_2] [function_1]	count=5
module	cross-entropy loss ||| losses python losses	count=1
module	is ||| tensorboard backend event_processing	count=1
function	shape ||| shape with	count=2
class	of the model ||| sequential	count=2
function	returns its namesake ||| get copied	count=1
module_class	[module_1] output ||| [class_2] [module_1]	count=1
function	collect information necessary specifically ||| collect docs for	count=1
arg	tensor and a target ||| target from_logits	count=1
class	concrete subclasses ||| non interactive debug wrapper session	count=1
function	graph [function_2] ||| [function_2] [function_1]	count=11
class	test ||| bounding box op test	count=2
function	splits the ||| split	count=1
function	returns the mode in ||| mode	count=1
arg	to update is_row_sweep_var ||| processed_row_indices processed_col_indices train_op	count=1
function	the values ||| values	count=8
function	create ||| create profiler ui	count=1
function	new ||| new	count=4
module	creates a transform that ||| learn python learn dataframe transforms	count=1
function_arg	[function_1] appearing ||| [arg_2] [function_1]	count=2
arg	instantiates an ||| name	count=1
function	function to create ||| create	count=2
function	a simple [function_2] ||| [function_1] [function_2]	count=1
arg	[arg] x = ||| rhs [arg]	count=2
function	classification with svms ||| svm	count=1
function	the state names for ||| state names	count=1
module	from a batch of ||| python ops	count=1
arg	for an estimator ||| cell_type num_units target_column problem_type	count=1
module	training and ||| python learn ops	count=1
function	the mean ||| mean	count=6
function	tensor that the ||| tensor	count=1
function	[function_1] atrous ||| [function_2] [function_1]	count=18
module	of dimensions corresponding to ||| python ops	count=2
function	into raw [function_2] ||| [function_2] [function_1]	count=3
function	using client feed ||| feed keys	count=1
arg	x and y and ||| x y	count=1
function	node ||| get node	count=1
module	the list ||| python	count=1
class	r batch systems a ||| operator pdbase	count=1
arg	y^2), grad * ||| op grad	count=1
function	dictionary ||| fit transform	count=2
function	modulus [function_2] ||| [function_1] [function_2]	count=1
module	of dimensions and ||| python ops	count=1
function	the proto_type for ||| get collection proto	count=1
module	the given set of ||| python ops	count=1
function	direct python implementation of ||| space to batch direct	count=1
function	given state ||| cell	count=2
function	[function_1] registered priors ||| [function_2] [function_1]	count=1
arg	formats the ||| pretty	count=1
module	the model's ||| contrib imperative examples	count=4
function_arg	variable with [arg_2] ||| [arg_2] [function_1]	count=7
function	richtextlines ||| text lines from rich line	count=1
function	file with ||| with	count=1
arg	operator on tensors ||| operator	count=1
function	scipy for a batch ||| batch	count=1
module	part ||| contrib keras python keras	count=1
function	fractional average pooling result ||| fractional avg pool result	count=1
arg	images ||| max_images	count=1
class	an event ||| event	count=1
function	of parameters used ||| parameters	count=1
class	which values will ||| slices	count=1
arg	offset in ||| offset	count=1
function	the op ||| op	count=4
arg	pred ||| pred name	count=1
arg	[arg_1] control_outputs ||| [arg_2] [arg_1]	count=1
function_arg	a numpy [arg_2] ||| [function_1] [arg_2] num_threads enqueue_size	count=1
module	of 1 ||| distributions python	count=1
arg	the front) a single ||| font_attr_segs	count=1
function	a subset [function_2] ||| [function_1] [function_2]	count=1
module_class	[module_1] [class_2] ||| [module_1] monitored [class_2]	count=1
function	clips ||| clip by	count=3
class	of the model ||| dnncomposable model	count=2
module	flatten ||| debug lib	count=1
function	creates default input ||| default input	count=2
class	token for ||| func registry	count=1
function_arg	returns the op [function_1] [arg_2] ||| hybrid python hybrid model [function_1] [arg_2] data_spec	count=3
function	[function_1] [function_2] ||| [function_2] col update [function_1]	count=2
function	print function for a ||| tf print	count=1
function	deconv layer ||| deconv	count=1
class	of the glimpse ||| extract glimpse	count=1
arg	two numpy [arg_2] ||| [arg_2] [arg_1]	count=2
module	integrate ||| contrib integrate python	count=1
function	loop ||| predict loop	count=1
function	ops to restore variables ||| sharded restore ops	count=1
arg	particular step ||| fetches feed_list	count=1
arg	a datasetdataprovider ||| dataset num_readers reader_kwargs shuffle	count=1
function	[function_1] [function_2] ||| [function_2] call dump path [function_1]	count=2
module	a sequence-to-sequence ||| contrib legacy_seq2seq	count=1
module	labeled ||| labeled_tensor	count=3
function	the root name ||| root name	count=2
class	log ||| operator pdbase	count=1
arg	between predictions, labels ||| predictions labels weights metrics_collections	count=1
arg	an instance of cursesui ||| on_ui_exit	count=2
arg	inputs and [arg_2] ||| [arg_1] [arg_2]	count=1
function	shape function for a ||| shape	count=2
function	values of ||| hand values	count=1
function_arg	[function_1] a tf ||| [function_1] sparse [arg_2]	count=2
arg	single line ||| line font_attr_segs	count=2
arg	maps ||| mapping default_value	count=1
function	batched kl divergence kl(a ||| kl	count=1
module	session and ||| contrib learn python learn	count=1
function	pack a ||| pack	count=1
class	linearoperator ||| linear operator	count=4
module	completed elements from this ||| ops	count=1
module	a keras ||| keras python keras	count=2
module	or a batch of ||| ops	count=1
function	names for ||| names	count=2
function	retrieves the input ||| input	count=3
arg	a dnnlinearcombinedregressor [arg_2] ||| [arg_2] [arg_1]	count=2
arg	variables ||| variables	count=2
function	name -> _guideref ||| build	count=1
module	tfprof ||| python tools tfprof	count=1
function	the ||| proto type	count=1
function	partitioner [function_2] ||| [function_2] [function_1]	count=3
function	hyperbolic tangent ||| tanh	count=1
function	model gmm clustering ||| gmm	count=1
function	[function_1] docstring ||| [function_2] [function_1]	count=2
function	the recall of ||| recall	count=1
class	of ||| categorical processor	count=2
function	linked to ops ||| filter ts from regex	count=1
class	debug tensor ||| session debug test	count=1
class	the name ||| slices	count=1
function	returns resources visible to ||| shared resources	count=1
function_arg	the name [arg_2] ||| [arg_2] [function_1]	count=1
function	proper shape values ||| assert valid sample	count=1
function	a while [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] graph with ||| [function_2] [function_1]	count=3
module	bytes ||| debug cli	count=1
function	for ||| status label	count=1
function	> [function] ||| test multi [function] label	count=6
module	a set of ||| ops	count=4
module	a savedmodel ||| saved_model	count=1
function	[function_1] for the ||| [function_1] [function_2]	count=2
module	files ||| tools docs	count=2
arg	to a specified min ||| clip_value_min clip_value_max name	count=1
module	which gets ||| contrib distributions python	count=1
arg	predictions with respect ||| predictions weights	count=1
function	feed ||| tensor feed keys	count=1
function	y ||| y	count=2
function	returns tensor's shape partitioned ||| get shape	count=1
function	sparsetensor ||| sparse	count=12
function	that of a debug ||| debug	count=1
function_arg	[function_1] [1] see ||| [arg_2] [function_1]	count=3
function	format of /data/scalars ||| scalars	count=2
module	s of [module_2] ||| [module_2] [module_1]	count=1
function	to ops ||| ts from regex	count=1
module	of ||| contrib keras python keras preprocessing	count=2
function	convert a list of ||| rich line list	count=1
arg	queues ||| features	count=1
arg	inclusion in ||| receiver_tensors	count=1
function	get all the tensors ||| from regex	count=1
function	op [function_2] ||| [function_1] [function_2]	count=3
arg	rank of ||| rank	count=1
class	dtype based on this ||| dtype	count=1
class	generator into the ||| generator enqueuer	count=1
arg	protocol buffer with ||| collections name	count=1
function	returns the offset when ||| offset	count=1
module	and session and ||| learn python learn dataframe	count=1
function	deregister a [function_2] ||| [function_1] [function_2]	count=1
module	a menuitem ||| debug cli	count=1
function	returns a dict ||| dict	count=1
class	tfrecords ||| tfrecord	count=1
arg	feature_values ||| feature_values keys features dtypes	count=1
function	a bidirectional [function_2] ||| [function_2] [function_1]	count=1
arg	for transposed ||| inputs filters kernel_size strides	count=1
arg	steps and returns only ||| inputs noutput scope name	count=1
function	register a [function_2] ||| [function_1] [function_2]	count=1
arg	matching ||| tensor_values	count=1
module	be [module] apply l2 ||| [module]	count=1
arg	a microbenchmark to measure ||| target size iters	count=1
function	tensorarrayread ||| tensor array read	count=1
function_arg	[function_1] given ||| [arg_2] [function_1]	count=3
function	of ||| name	count=1
function	[function_1] collection ||| [function_1] [function_2]	count=1
module	all layer ||| python keras engine	count=2
function	files ||| md files	count=1
arg	with parameter rate ||| rate	count=1
function	sampled softmax training loss ||| sampled softmax loss	count=1
module	graph building doesn't ||| tensor_forest hybrid python	count=1
arg	values into ||| values	count=1
function	command [function_2] ||| [function_2] [function_1]	count=4
module	systems of equations with ||| contrib linalg python ops	count=1
module	node-status labels ||| python debug	count=1
function	of a sparse feature ||| sparse	count=1
function	all inputs of ||| inputs tensor info from meta graph	count=1
arg	the recall@k [arg_2] ||| [arg_2] labels [arg_1]	count=2
function	tf examples to ||| columns from examples	count=1
module	this cell output ||| rnn python ops	count=1
module	sets ||| contrib framework python framework	count=1
function	the items ||| items	count=1
function	the output values of ||| setup values	count=1
module	an iterable of ||| plugins	count=1
arg	while maintaining the batch_size ||| outputs_collections scope	count=1
function	to a vector ||| to vector	count=3
module	construct the ||| python	count=2
module	data ||| contrib learn python learn datasets	count=1
function	given poisson distribution ||| poisson	count=1
class	to this context ||| context	count=1
function	device [function_2] ||| [function_2] [function_1]	count=3
module	graph building ||| contrib tensor_forest hybrid python	count=1
class	layer normalization and ||| layer norm	count=1
module	as 'values' ||| metrics python ops	count=1
arg	ids in a list ||| ids partition_strategy name	count=1
function	for input with ||| input values	count=3
function	kernels [function_2] ||| [function_1] [function_2]	count=3
module	of factors weights ||| contrib factorization python ops	count=1
function	as input layer ||| input layer	count=1
function_arg	the sparsetensordensematmul [arg_2] ||| [arg_2] [function_1]	count=1
arg	for given features ||| input_fn	count=1
function	sparsecolumns accept dense ||| column accepts dense	count=1
module	] ||| python ops	count=1
function	assert works with ||| assert	count=1
class	student's ||| student t	count=1
function	training ||| train	count=13
module	to the ||| contrib losses python	count=1
function	optimize the ||| optimize	count=1
function	[function_1] graphs ||| [function_1] [function_2]	count=1
class	return ||| processor	count=1
arg	labels into [arg_2] ||| [arg_2] [arg_1]	count=1
function	node ||| invoke node	count=1
function_arg	[function_1] a _docstringinfo ||| [function_1] [arg_2]	count=2
function	feature using parameter hashing ||| scattered	count=2
function	of indices [function_2] ||| [function_1] [function_2]	count=5
arg	[arg_1] dtype ||| [arg_1] [arg_2]	count=1
function	dict symbol ||| build guide	count=1
function	new seed from the ||| gen new	count=1
function	computes distance between each ||| distance graph	count=1
function	shape values then return ||| sample	count=1
function	linked to ops that ||| filter	count=1
function	get the inputs of ||| inputs	count=1
class	we don't have ||| test	count=1
function_arg	index [arg_2] ||| [arg_2] [function_1]	count=2
function	[function_1] input ||| [function_1] [function_2]	count=11
function	that a ||| unique	count=1
class	create ||| round	count=1
function	parameters in a list ||| total params	count=1
function	depth limit ||| depth limit	count=4
function	softmax cross entropy between ||| softmax cross entropy with	count=1
module	2d ||| contrib keras python keras	count=1
class	run ||| readline ui	count=1
function	the export ||| export	count=1
function	batch_shape, possibly add asserts ||| batch shape possibly add asserts	count=1
class	for inputs ||| debug analyzer	count=1
module	_guideref from ||| tools docs	count=1
arg	returns hooks if all ||| hooks	count=1
function	of input arguments ||| input args	count=2
function	op to use ||| to hash	count=1
function	arg_scope ||| add arg scope	count=2
arg	for doing sharded ||| cls factor indices values	count=1
function	arguments common to ||| common args	count=2
function	[function_1] image from ||| [function_1] [function_2]	count=3
module	then the cell ||| contrib rnn python ops	count=1
arg	op1 [arg_2] ||| [arg_1] [arg_2]	count=5
function	scope that changes ||| scope	count=1
class	base feature for tf ||| feature	count=1
function	the proto_type for ||| proto type	count=1
function	[function_1] sparse ||| [function_2] average [function_1]	count=4
function	[function_1] max ||| [function_1] [function_2]	count=2
function	postfix representation of the ||| spec structure	count=1
module	for labeled ||| labeled_tensor	count=2
arg	a feature_spec ||| feature_spec	count=1
arg	and return ||| x	count=1
function_arg	[function_1] minibatch ||| [function_1] step [arg_2]	count=3
module	suitable ||| tensorboard backend event_processing	count=1
function_arg	queue batch [arg_2] ||| [arg_2] [function_1]	count=3
class	session ||| wrapper session	count=1
function	resources visible to all ||| shared resources	count=1
arg	tensors ||| tensors session feed_dict	count=1
function	this operator [function] ||| [function]	count=1
arg	an estimator ||| cell_type num_units	count=1
function	the tensors linked ||| from	count=1
module	and return ||| contrib learn python learn preprocessing	count=1
function_arg	[function_1] case ||| [function_1] op [arg_2]	count=10
class	generates ||| server test	count=1
function	monkey-patching to capture the ||| test capture	count=1
function_arg	[function_1] value ||| [function_1] index [arg_2]	count=1
module	tensor ||| python	count=2
function	score for a tag ||| score	count=1
function_arg	attention [arg_2] ||| [function_1] decoder decoder_inputs [arg_2]	count=1
module	fetch and ||| python client	count=1
function	values ||| setup values	count=1
arg	g input_tensors) from ||| attr_name	count=1
function	a checkpoint ||| create checkpoint	count=1
arg	according ||| inp	count=1
function	true [function_2] ||| [function_2] [function_1]	count=11
module	menuitem from ||| debug	count=1
function	ops that match ||| filter ts from regex	count=1
function	calls model function with ||| call model fn	count=1
class	a sequence ||| tokenizer	count=1
module	all elements of ||| ops	count=1
arg	check counts for ||| counts check_integer	count=1
function	cast a ||| cast	count=1
function	[function_1] the data ||| [function_2] [function_1]	count=1
function	transitive ||| transitive	count=1
function	rows ||| rows	count=1
function	the gradients [function_2] ||| [function_1] [function_2]	count=4
function	ops to restore ||| sharded restore ops	count=1
function	the tensors linked to ||| filter	count=1
function	bn ||| bn	count=1
class	values then ||| dirichlet	count=1
function	a graph and ||| graph	count=1
function_arg	array to [arg_2] ||| [function_1] sparse [arg_2]	count=1
function	a dynamic [function_2] ||| [function_2] [function_1]	count=2
function	select which examples ||| select which	count=1
arg	applies transformations ||| mode	count=4
function	computes the mean of ||| reduce mean	count=1
module	in the ||| python	count=5
arg	for a graph element ||| element_name handle_node_names intermediate_tensor_names	count=1
function	inverse time ||| inverse time	count=1
function_arg	[function_1] [arg_2] ||| [function_1] apply sparse grad [arg_2]	count=3
module	multi ||| python learn estimators	count=3
function	completion items ||| items	count=1
module	student's ||| python ops distributions	count=1
function	step false ||| sparse false	count=1
class	single ||| to event	count=1
function	message discards [function_2] ||| [function_1] [function_2]	count=2
arg	rate along the ||| rate	count=1
arg	either fn1() or fn2() ||| fn1 fn2	count=1
module	training ||| python learn estimators	count=1
arg	section as ||| function_details	count=1
class	if ||| session manager	count=1
arg	body to the ||| body original_loop_vars	count=1
arg	get all the ||| ops	count=1
arg	target ||| target	count=2
module	run the cell and ||| contrib rnn python ops	count=1
function	input ||| from input	count=1
module	normally distributed floating ||| specs python	count=1
class	the file ||| tfrecord writer	count=2
function	list of protos ||| protos	count=1
function_arg	params [arg_2] ||| [function_1] [arg_2]	count=1
function	path [function_2] ||| [function_2] files [function_1]	count=1
function	to an example ||| row to example	count=1
function	method with as_iterable=false ||| as iterable false	count=2
function_arg	[function_1] of sgv0 ||| [arg_2] [function_1]	count=3
function	name ||| guide index	count=1
module	of equations ||| python ops	count=1
arg	op2 [arg_2] ||| [arg_1] [arg_2]	count=3
module	cell output ||| contrib rnn	count=1
function	[function_1] no collisions ||| [function_2] [function_1]	count=4
function	every ||| every	count=2
arg	printtensor monitor ||| tensor_names every_n first_n	count=1
function	with a [function_2] ||| [function_1] [function_2]	count=3
function	default [function_2] ||| python feature_column check [function_1] [function_2]	count=3
class	return indexies ||| categorical	count=1
module	if ||| python ops	count=1
function	creates logistic regression signature ||| logistic regression signature	count=1
module	systems of linear ||| python ops	count=1
function	dict ||| build guide	count=1
function	determinant ||| det	count=4
function	state for all ||| flow state	count=1
function	this test [function_2] ||| [function_1] [function_2]	count=1
function	creates an op for ||| training op	count=2
function	a temporary [function_2] ||| [function_1] [function_2]	count=4
module	the vocabulary dictionary and ||| contrib	count=1
function	run method ||| run	count=1
class	the pooling function ||| pooling	count=4
function	get static number ||| get static ndims	count=3
arg	control_outputs ||| control_outputs	count=1
function_arg	execute the [arg_2] ||| [function_1] [arg_2]	count=1
arg	cluster ||| clusters	count=2
module	dict ||| learn python learn estimators	count=1
function	return the page ||| build module page	count=1
function	into a placeholder tensor ||| replace t with placeholder	count=1
function	has ||| v2 has	count=1
arg	labels and predictions ||| predictions labels	count=3
module	then return tensor ||| distributions	count=1
module	__init__ which ||| contrib distributions python	count=1
module	this cell output ||| rnn	count=1
function	tf placeholder ||| make placeholder from	count=2
function	outputs in place ||| outputs make	count=1
module	version of ||| learn python learn ops	count=1
function	[function_1] higher ||| [function_2] [function_1]	count=2
function	linear_model_fn but returns modelfnops ||| fn with model fn	count=2
class	student's ||| student	count=1
module	of init ||| linalg python ops	count=2
class	an audio ||| decode audio op	count=1
function_arg	[function_1] [arg_2] ||| [function_1] integer form [arg_2]	count=2
function	with respect to sparse ||| sparse recall at top k	count=1
arg	from oldpath to newpath ||| oldpath newpath overwrite	count=1
function	nan ||| nan	count=1
module	of arbitrary ||| ops	count=1
function	to use based on ||| to hash bucket	count=1
function	fetches used ||| fetches info	count=2
function	weight with other columns ||| and other columns	count=1
module	elements from this ||| ops	count=1
class	underlying tf graph ||| sub graph view	count=1
class	and return ||| processor	count=1
function	on bad ||| test bad	count=1
function	python object [function_2] ||| [function_2] [function_1]	count=1
class	node names [class_2] ||| [class_2] [class_1]	count=1
module	axes of a ||| labeled_tensor python ops	count=1
module	axes of two tensors ||| python ops	count=1
class	decoder can ||| data decoder	count=1
function_arg	to minimize [arg_2] ||| [arg_2] [function_1]	count=2
class	creates ||| big query reader	count=1
arg	hooks if all ||| hooks	count=1
function_arg	[function_1] richtextlines ||| [function_1] syntax error output [arg_2]	count=1
function	runner ||| runner	count=1
function	default input parsing ||| default input	count=1
function	broadcast leading ||| broadcast matrix batch dims	count=1
function	the number of ||| size	count=4
module	get a menuitem from ||| cli	count=1
function	determine the predicted ||| classes	count=2
function_arg	data to [arg_2] ||| [function_1] [arg_2]	count=4
arg	op for ||| op	count=1
function	queue ||| features shared queue	count=1
module	of a matrix ||| contrib factorization python ops	count=1
function	for a @{$ ||| doc	count=1
arg	the same shard ||| filename_tensor saveables	count=1
module	solves systems of ||| ops	count=1
function	the output values of ||| values	count=1
function	the ||| ops from regex	count=1
arg	x in xs ||| xs name	count=1
function	to ||| format to	count=1
function	for a @{tensorflow : ||| cc	count=1
function_arg	embedding and [arg_2] ||| [function_1] rnn decoder decoder_inputs [arg_2]	count=1
function	a default ||| default	count=2
module	for given ||| learn python learn	count=1
function	[function_1] distance between ||| [function_1] [function_2]	count=3
module	to ||| contrib training python training	count=1
arg	attentionmechanism mechanism ||| num_units memory memory_sequence_length scale	count=1
class	operation that failed if ||| op error	count=1
arg	between logits and labels ||| _sentinel labels logits	count=1
function	to index ||| add to index	count=2
function	load a [function_2] ||| [function_2] [function_1]	count=4
class	the event ||| event transformer	count=2
class	given ||| lazy	count=1
arg	name unique or index ||| name index	count=1
class	run the enqueue ||| runner	count=1
function	[function_1] placeholders ||| [function_2] [function_1]	count=1
function	with a list ||| with	count=1
function	[function_1] back ||| [function_2] [function_1]	count=2
module	of images by ||| ops	count=1
function	tags ||| tags	count=2
module	text ||| contrib keras python keras preprocessing	count=2
function	of the output ||| test output	count=1
function	a richtextlines object ||| lines from	count=1
function	this dtype ||| dtype	count=1
function	mappers provided ||| mapper	count=1
arg	initialize the parameters ||| num_units input_size use_peepholes cell_clip	count=1
function	methods inside ||| datasets	count=1
function	of a categorical ||| categorical	count=1
function	sequence of ||| sequences	count=1
module	data ||| python learn datasets	count=1
function	per step false positives ||| sparse false positive	count=1
function	variable and add ||| variable	count=1
function_arg	[function_1] of v ||| [function_1] [arg_2]	count=2
function	an accumulator [function_2] ||| [function_2] [function_1]	count=4
function	sessionrunhook raises typeerror otherwise ||| hooks type	count=1
function	creates logistic regression ||| logistic regression	count=2
function	variables [function_2] ||| [function_1] [function_2]	count=1
function	load runs from a ||| runs from	count=1
module	perform a step of ||| python ops	count=1
module	returns the sum ||| python framework	count=1
module	returns predictions for ||| python layers	count=1
module	that ||| learn python learn	count=1
function	based ||| base	count=1
function	the feed dictionary used ||| feed dict	count=1
function	static shape ||| static shape	count=4
module	the model ||| contrib factorization python	count=1
function	[function_1] header ||| [function_1] [function_2]	count=1
class	the ||| processor	count=1
function	labels into a ||| labels	count=1
function	a dictionary from ||| as dict	count=1
arg	equal to rank ||| rank	count=2
function	absolute difference loss to ||| absolute difference	count=1
function	session run() call ||| run	count=1
arg	import ||| module_name function_name	count=1
function	the device of ||| device	count=1
function	operation ||| op	count=6
module	[module_1] sense ||| [module_2] [module_1]	count=7
module	hparams ||| python training	count=3
function	list of ||| from rich line list	count=1
function	init and [function_2] ||| [function_2] [function_1]	count=1
module	[module] tensor into ||| [module]	count=1
arg	it to filename ||| filename	count=2
class	this cell ||| fused cell	count=1
module	regression ||| contrib layers python layers	count=1
function	load runs ||| add runs	count=1
class	we don't ||| test upgrade	count=1
module	returns ||| python ops losses	count=1
arg	the given job ||| job_name	count=3
function	on ||| on	count=2
function_arg	[function_1] function for ||| [function_1] [arg_2]	count=1
class	a single ||| event transformer	count=1
class	fetch mapper ||| fetch mapper	count=1
function	the main [function_2] ||| [function_2] [function_1]	count=5
module	previous output tensors from ||| grid_rnn python ops	count=1
function	calculates false positives ||| sparse false positive at	count=1
function_arg	sum of [arg_2] ||| [function_1] sp_input [arg_2]	count=2
class	the underlying [class_2] ||| [class_2] [class_1]	count=1
arg	between predictions, ||| predictions	count=1
function_arg	of metrics [arg_2] ||| [arg_2] [function_1]	count=3
function	standard deviation of ||| std	count=1
function	bucketized [function_2] ||| [function_2] [function_1]	count=3
function	axis order on ||| axis order	count=2
module	g "matmul") ||| python framework	count=1
function_arg	[function_1] recall@k and ||| [function_1] labels predictions_idx [arg_2]	count=8
module	node-status ||| debug cli	count=2
arg	to labels ||| labels	count=3
function	[function_1] runoptions ||| [function_1] [function_2]	count=5
function	apply ||| apply	count=2
arg	and op2 else false ||| op2	count=1
function	object [function_2] ||| [function_2] [function_1]	count=1
function_arg	[function_1] base_type ||| [function_1] [arg_2]	count=2
function	featurecolumns and [function_2] ||| [function_2] [function_1]	count=3
function	returns tensor's shape ||| get shape	count=2
module	normally distributed floating point ||| specs	count=1
function	the list of protos ||| get protos	count=1
function	appropriate for serving ||| serving input	count=1
arg	from predictions and ||| predictions num_classes	count=1
function	the feature indices represented ||| feature indices	count=1
module	self _value ||| bayesflow	count=1
function	of subscribed identities ||| expect subscribed identities	count=1
module	the image ||| keras python keras preprocessing	count=1
arg	constructs the tensorboard application ||| logdir plugins multiplexer reload_interval	count=1
function	[function_1] indices in ||| [function_2] [function_1]	count=6
function_arg	[function_1] to labels ||| [function_1] mode [arg_2]	count=3
function	tuples into raw ||| to raw	count=1
class	a reservoir using ||| reservoir	count=1
function	a nodedef ||| node def	count=1
function	for ||| label	count=1
function	file with a ||| with	count=1
function_arg	[function_1] [arg_2] ||| [function_1] predictions [arg_2]	count=73
function	[function_1] limit ||| [function_2] [function_1]	count=10
module	that graph building ||| contrib tensor_forest hybrid python	count=1
function	tensors in the transitive ||| slots in	count=1
class	indexies of ||| categorical processor	count=1
module	with default shuffle ||| learn python learn learn_io	count=1
class	will sample ||| feeder	count=1
function_arg	dynamic rnn [arg_2] ||| [arg_2] [function_1]	count=1
function	arg ||| exprs arg	count=1
function_arg	function [arg_2] ||| [function_1] bn [arg_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] classes [arg_2]	count=3
function	restore variables from ||| sharded restore ops	count=1
function	merges the tensor ||| merge	count=1
arg	recall@k ||| k class_id	count=1
function_arg	forwards [arg_2] ||| [function_1] [arg_2]	count=5
arg	given mean [arg_2] ||| [arg_2] [arg_1]	count=4
function	sessionlog start [function_2] ||| [function_2] [function_1]	count=4
function	[function_1] mtimes ||| [function_1] checkpoint [function_2]	count=1
arg	element-wise weighted ||| updates_collections	count=1
module	asserts ||| python learn estimators	count=1
function	stores trace information for ||| store trace info	count=1
class	check sparsemax-loss proposition ||| sparsemax loss	count=1
module	output tensors ||| python keras engine	count=1
function	after [function_2] ||| [function_2] [function_1]	count=7
function	main page and ||| test request main page	count=1
arg	a highwaywrapper [arg_2] ||| [arg_2] [arg_1]	count=2
module_class	[module_1] created ||| [module_1] [class_2]	count=4
class	image ||| image	count=2
class	check ||| files	count=1
class	for the head ||| single head	count=1
function	size ||| size	count=10
function	input with shape=[2] ||| two input	count=3
arg	type dtype ||| dtype name	count=1
function	the sum ||| add	count=1
arg	that builds model ||| features	count=4
function	integer classes and ||| build standardized signature	count=1
module	given ||| contrib learn python learn utils	count=1
module	based ||| testing python framework	count=1
function	unused nodes [function_2] ||| [function_2] [function_1]	count=4
function	[function_1] both dense ||| [function_2] [function_1]	count=3
function	op to use ||| to	count=1
module	returns the ||| factorization python ops	count=2
arg	protocol buffer ||| export_scope	count=2
arg	of tensors ||| cls tensors	count=1
function	_guideref from the files ||| build	count=1
function_arg	[function_1] richtextlines ||| [arg_2] [function_1]	count=1
function_arg	[function_1] run ||| [function_1] [arg_2]	count=5
function	linked to ops that ||| filter ts	count=1
arg	method that subscribes a ||| control_cache	count=2
arg	that ||| optimizer global_step update_ops	count=1
function	control flow ||| get control flow	count=2
module	feeding ||| contrib training python training	count=1
function	false ||| sparse false	count=2
function	up the node's statistics ||| stats for node def	count=1
class	calculates the truncated normal ||| truncated normal	count=1
function	returns true ||| is	count=2
function	determinant for every batch ||| det	count=2
function	[function_1] input tensor ||| [function_1] [function_2]	count=3
arg	this input_fn diffs ||| y batch_size num_epochs	count=1
arg	their norms ||| t_list clip_norm use_norm name	count=1
arg	the non-audio parts ||| sample_rate num_channels length_frames	count=1
function	override to define ||| define	count=1
function	slice of each ||| slice	count=1
function	gets the legacy init ||| get legacy init	count=1
function_arg	[function_1] the input ||| [arg_2] [function_1]	count=1
function	squared [function_2] ||| [function_1] [function_2]	count=6
function	an example proto ||| row to example proto	count=1
function	the current position in ||| tell	count=1
arg	keys and values tensors ||| keys values	count=1
function	set operation ||| set operation	count=2
module	together ||| batching	count=1
function	variable or [function_2] ||| [function_2] [function_1]	count=3
arg	to rank ||| rank data summarize	count=2
module	determined at runtime ||| linalg python	count=1
function	print the value ||| print	count=1
module	a menuitem from the ||| cli	count=1
function	[function_1] files ||| [function_1] [function_2]	count=1
function	function that [function_2] ||| [function_2] conversion [function_1]	count=1
module	an imagenet ||| python keras applications	count=1
function	description [function_2] ||| [function_2] short [function_1]	count=2
function	output ||| output end home	count=1
function	the control [function_2] ||| [function_1] [function_2]	count=2
function	from the nchw format ||| nchwto	count=1
function	register [function_2] ||| [function_2] [function_1]	count=1
function	asserts that two ||| assert equal	count=2
module	execute ||| python learn	count=1
function	collections ||| add to collections	count=1
module	of equations with ||| python ops	count=1
function	[function_1] a dense ||| [function_2] [function_1]	count=5
arg	according to partition ||| is_control	count=1
class	grad state for ||| flow state	count=1
function	det ||| det	count=1
arg	concentration and ||| concentration	count=1
function	main ||| main	count=4
function	labels ||| hot encoding	count=1
arg	the recall@k of the ||| k	count=1
function	a header for ||| header	count=2
function	tf graph ||| graph	count=2
module	for evaluating a ||| tensor_forest python	count=1
function_arg	[function_1] axis ||| [arg_2] [function_1]	count=1
arg	and ||| proto_type	count=1
arg	[arg_1] the labels ||| [arg_2] [arg_1]	count=3
module	table ||| feature_column	count=1
function_arg	[function_1] cells ||| [arg_2] [function_1]	count=1
function	function that ||| fn	count=2
function_arg	node of [arg_2] ||| [arg_2] [function_1]	count=1
class	binary ||| dnnlinear combined	count=1
function	path used by ||| path	count=1
module	shapes of the ||| python ops	count=2
function	a labeledtensor ||| labeled tensor	count=1
function	[function_1] for "op" ||| [function_2] [function_1]	count=2
module	default ||| python learn utils	count=1
function	[function_1] recipients ||| [function_1] [function_2]	count=1
arg	queue_runner_def ||| queue_runner_def	count=1
function	batch and ||| batch features	count=1
function	step true [function_2] ||| [function_1] [function_2]	count=2
arg	the screen output from ||| output	count=1
module	and return indexies ||| learn python learn	count=1
function	that maps input key ||| input	count=1
class	the value [class_2] ||| [class_1] [class_2]	count=1
arg	the biasaddgrad ||| received_grad	count=1
function	you can save and ||| train save load	count=1
arg	lookup ||| vocabulary_file vocab_size default_value	count=1
function	arg_scope can set ||| arg scoped arguments	count=1
function	the number of ||| num	count=2
class	handler with the ||| item handler	count=1
module	dataframe with ||| learn dataframe	count=1
class	tensor for ||| lazy	count=1
class	the debug ||| debug	count=1
function_arg	and attention [arg_2] ||| [function_1] decoder decoder_inputs [arg_2]	count=1
module	can be used ||| contrib layers python layers	count=1
function	returns ||| get kind	count=1
arg	performs ||| x zoom_range row_axis col_axis	count=1
function	[function_1] ndtri has ||| [function_2] finite gradient [function_1]	count=2
class	wishart distribution degree ||| wishart operator pd	count=2
function	the parsing config ||| config	count=1
module	writes ||| python learn estimators	count=1
function	step false positives for ||| streaming sparse false positive at	count=1
arg	and ||| a	count=1
arg	for input labels to ||| labels	count=1
module	infer ||| contrib linalg python ops	count=1
class	learn the vocabulary dictionary ||| categorical processor	count=1
arg	two tensors with rank ||| a b	count=1
arg	method that subscribes ||| control_cache	count=2
function	unstack the ||| unstack	count=1
module	a tensor for ||| feature_column	count=1
module	the training procedure ||| contrib losses python losses	count=1
arg	input ||| inputs sequence_length beam_width	count=1
arg	the labels and ||| labels weights	count=2
arg	of variables ||| variables	count=1
arg	that subscribes a ||| control_cache	count=2
class	event ||| event	count=9
function	colocate [function_2] ||| [function_1] [function_2]	count=2
function_arg	embedding and [arg_2] ||| [arg_2] [function_1]	count=1
function	after broadcasting the ||| broadcast batch shape	count=1
function	or ||| or	count=6
arg	the filewriter for ||| logdir	count=1
module	given factorization ||| contrib factorization	count=1
function	outputs [function_2] ||| [function_2] [function_1]	count=2
arg	+ y^2), grad * ||| op grad	count=1
arg	with concentration and rate ||| concentration rate	count=1
function_arg	[function_1] valuesdef ||| [arg_2] [function_1]	count=5
function_arg	list [arg_2] ||| [function_1] shapes [arg_2]	count=1
function	of source [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] flow ||| [function_2] [function_1]	count=12
arg	and predictions ||| predictions weights	count=2
function	in the sparsetensordensematmul ||| mat mul	count=1
module_class	[module_1] control ||| [module_1] [class_2]	count=6
function	raises ||| check hooks	count=1
function	various recall ||| streaming recall at thresholds	count=1
function_arg	parameters in [arg_2] ||| [function_1] [arg_2]	count=1
class	returns whether this plugin ||| plugin	count=1
module_class	[module_1] projection ||| [module_1] output [class_2]	count=1
function	servers ensures appropriate ||| servers	count=1
function	a signaturedef ||| standardized signature def	count=1
class	common config ||| config	count=1
function	sequence models from ||| sequence input from	count=1
class	queue in ||| queue	count=1
arg	[arg_1] tensorflow graph ||| [arg_1] [arg_2]	count=2
function	fill the border ||| fill border	count=2
function	function ||| conv2d	count=2
module	do ||| python layers	count=2
module	the model loading ||| contrib factorization python	count=1
module	all are ||| estimator	count=1
arg	of pred ||| pred	count=1
function	sdcaoptimizer and real ||| sdca optimizer real	count=1
module	one step of ||| ops	count=3
module_class	[module_1] array ||| [module_1] ops tensor [class_2]	count=1
function	create the ||| init	count=1
arg	returns it ||| value dtype name	count=1
module	and return indexies ||| preprocessing	count=1
arg	distributions with mean and ||| validate_args	count=1
module	ids of a tf ||| contrib factorization python ops	count=1
arg	2-d matrix based ||| input_matrix	count=2
function	with a [function_2] ||| [function_2] [function_1]	count=3
module	shape values then return ||| ops	count=1
module	sequence ||| ndlstm python	count=1
module	a transform that wraps ||| python learn dataframe transforms	count=1
function	[function_1] modulus zero ||| [function_1] [function_2]	count=2
module	by the backend ||| keras python keras	count=1
function	the ready op used ||| ready op	count=1
function	resnet_v1() for arg ||| resnet v1	count=3
module	creates training and ||| python learn	count=1
arg	tensors into ||| tensors	count=1
function	the values for ||| values	count=1
arg	a subgraph ||| sgv dst_graph dst_scope src_scope	count=1
arg	the tensor reference ||| reference	count=1
function	the labels ||| labels	count=1
function_arg	operation that [arg_2] ||| [function_1] [arg_2]	count=1
function	sets the values ||| set value	count=1
class	of the pooling function ||| pooling test	count=1
function	from ||| item	count=1
module	and previous ||| grid_rnn python ops	count=1
module	compute ||| kernel_tests	count=1
function	node-status ||| label	count=1
function	request a ||| test request	count=1
class	outputs the corresponding values ||| with hash	count=1
arg	remaps the ||| sp_x row_ids shape	count=1
function	a slice of each ||| slice	count=1
module	of d ||| ops	count=1
function	indexedslices object ||| indexed slices to	count=1
module	evaluating ||| tensor_forest python	count=1
arg	[arg_1] hints argument ||| [arg_1] [arg_2]	count=5
function	main [function_2] ||| [function_1] [function_2]	count=9
function	and a depth limit ||| depth limit	count=2
function	automatically call batch ||| batch	count=1
class	that failed if known ||| error	count=1
function	a device function to ||| device	count=1
function	vocabulary dictionary and return ||| fit	count=1
function	model ||| get model	count=1
function	the summary tensor ||| summary	count=1
class	in the ast ||| tensor flow call visitor	count=1
function	state with ||| calls state	count=1
class	new partitioned [class_2] ||| [class_2] [class_1]	count=2
function	respect to sparse ||| sparse recall	count=1
module	labeled tensor ||| contrib labeled_tensor	count=1
class	as containing textual data ||| plugin asset	count=1
class	sure we ||| upgrade files	count=1
class	transform to ||| tensor flow transform	count=1
function	[function] 'x' ||| [function]	count=1
module	0) ||| python	count=1
function	impose desired axis order ||| impose axis order	count=1
function	all the different ways ||| division	count=2
module	and set the real ||| python ops	count=1
class	which the tensor ||| tensor	count=1
function	integer column with vocabulary ||| int column with vocabulary with dense input tensor	count=1
class	in the place the ||| graph	count=1
arg	[arg_1] name ||| [arg_2] [arg_1]	count=4
module	of zero or more ||| ops	count=1
function	and bias ||| and bias	count=2
function_arg	[function_1] valuesdef ||| [function_1] proto [arg_2]	count=5
module	sequence of integers ||| python	count=1
function	the batch ||| batch	count=3
module	generates ||| slim data	count=1
module	step of ||| seq2seq python ops	count=1
module	variable and returns it ||| contrib keras python keras	count=1
function	foldl on the ||| foldl	count=1
function	training with ||| train with	count=15
arg	in x ||| x	count=2
module	of vectors matrices ||| python ops	count=1
function	values ||| valid sample	count=1
function	cumulative product ||| cumprod	count=1
module	of ||| python framework	count=6
module	carlo estimate of an ||| python ops	count=1
class	projection and then ||| projection wrapper	count=1
arg	and body ||| body original_loop_vars	count=1
class	this session ||| base session	count=1
function	feature ||| get feature	count=1
arg	[arg_1] to newpath ||| [arg_1] [arg_2]	count=4
module	linked to ops that ||| graph_editor	count=1
function	saver ||| saver	count=1
module	for node-status labels ||| python debug	count=1
function_arg	str [arg_2] ||| [function_1] [arg_2]	count=3
function	number of bytes ||| bytes to	count=1
arg	and labels ||| labels	count=2
function	the variables and names ||| and slice	count=1
arg	each input [arg_2] ||| [arg_1] [arg_2]	count=1
module	learn the vocabulary dictionary ||| learn	count=2
module	the given ||| contrib graph_editor	count=1
module	max ||| python layers	count=1
function	to have non-broadcastable shapes ||| for broadcastable batch shape	count=1
function	table that maps a ||| table from	count=1
function_arg	[function_1] operation ||| [function_1] [arg_2]	count=3
function	to sparse ||| to sparse	count=4
class	[class_1] [class_2] ||| [class_2] logistic [class_1]	count=2
arg	if value_or_tensor_or_var has ||| value_or_tensor_or_var dtype	count=1
function_arg	matmul op ||| matmul shape op	count=1
function	a topologically-sorted list ||| sorted nodes	count=1
function	notice to [function_2] ||| [function_1] [function_2]	count=1
class	the wrapper should ||| debug wrapper session test	count=1
class	tensor value was dumped ||| debug tensor datum	count=2
function	direct python implementation ||| direct	count=1
function	tensor ||| subscribe new	count=1
class	table ||| mutable hash table	count=1
arg	tensor_list ||| tensor_list num_epochs	count=1
arg	tensors ||| tensors	count=18
arg	all steps ||| noutput scope	count=1
arg	[arg_1] to newpath ||| [arg_2] [arg_1]	count=4
module	constructor of [module_2] ||| [module_1] [module_2]	count=1
module_class	[module_1] op ||| [class_2] [module_1]	count=2
module	dataset ||| learn python learn datasets	count=4
arg	with best effort a ||| adjoint adjoint_arg name	count=1
function	total variation for a ||| total variation	count=1
function	[function_1] length of ||| [function_2] [function_1]	count=1
function	is [function] ||| head is [function]	count=2
class	dict ||| head	count=1
function	with a mix ||| mixed	count=2
function_arg	[function_1] a column ||| [function_1] or parent names [arg_2]	count=3
function	create a slimrnncell from ||| init	count=1
function	calculates false positives for ||| false positive at	count=1
module	this object ||| ops	count=1
function	maps input key to ||| input	count=1
class	the eventfilewriter ||| file	count=1
function	all ||| filter ts from	count=1
arg	of the data feeder ||| x_shape y_shape n_classes batch_size	count=1
function	a layer ||| layer	count=2
function	returns local variables ||| local variables	count=2
module	instance ||| learn python learn estimators	count=4
function	whether a [function_2] ||| [function_2] [function_1]	count=1
arg	tests input-output pairs ||| ksizes strides rates	count=1
module	default ||| learn python learn utils	count=1
function	this [function_2] ||| [function_2] [function_1]	count=1
class	tfrecords ||| tfrecord iterator test	count=2
function	a sparse feature ||| sparse	count=1
function	scan on the list ||| scan	count=1
function_arg	[function_1] state_name ||| [arg_2] [function_1]	count=2
module	loads ||| python framework	count=2
function	the precision ||| precision	count=1
function	model_fn can ||| model fn ops	count=1
function_arg	and [arg_2] ||| [function_1] variables [arg_2]	count=1
arg	the display area ||| line_index	count=1
function	create the ||| create	count=3
function	add matrix represented ||| add	count=2
module	return ||| python learn	count=1
arg	input ||| cls inputs	count=3
function_arg	up to [arg_2] ||| [arg_2] [function_1]	count=1
function	proper shape ||| maybe assert valid	count=1
module	don't have a ||| compatibility	count=1
function	a tensor for the ||| get	count=1
function	or [function_2] ||| [function_1] [function_2]	count=16
function	a restricted linear prediction ||| joint weighted sum from	count=1
function	gradient ||| gradient	count=5
module	op (e ||| python	count=1
class	valid operator ||| operator pdidentity	count=1
function	[function_1] [function_2] ||| [function_1] cont call [function_2]	count=5
module	dense ||| layers python ops	count=1
function	a single example ||| parse single example	count=2
arg	of the specification ||| spec inputs input_shape input_type	count=2
module	a non-reference ||| framework	count=1
arg	that the non-audio parts ||| sample_rate num_channels length_frames	count=1
arg	to x in xs ||| xs	count=1
arg	[arg_1] satisfies a ||| x [arg_1] [arg_2]	count=1
function	[function_1] run() ||| [function_2] short [function_1]	count=1
function	model_fn can ||| create model fn	count=1
module	of unique ||| labeled_tensor python ops	count=1
module	text ||| keras preprocessing	count=2
function	add an accumulator ||| add forward accumulator	count=1
class	a pooling function ||| pooling test	count=1
arg	"b" ||| sp_a b adjoint_a adjoint_b	count=1
module	of ||| learn python learn preprocessing	count=2
function	for forward public function ||| forward	count=1
function	distribution learned during training ||| learned unigram	count=1
function	not compatible [function_2] ||| [function_2] [function_1]	count=1
function	the variables in a ||| variables	count=1
arg	of value ||| value decay	count=1
function	[function_1] ratio ||| [function_1] [function_2]	count=4
function	an ||| op	count=1
module	variable of the ||| keras	count=2
function	direct python implementation ||| to batch direct	count=1
function	[function_1] subgraph ||| [function_2] [function_1]	count=1
module_class	[module_1] output projection ||| [module_1] [class_2]	count=7
function	and tries to restore ||| restore	count=1
function	the end of a ||| end	count=1
class	normal distribution on r^k ||| normal tri l	count=1
class	non-reference dtype ||| dtype	count=1
function	string_to_hash_bucket op to use ||| get string to	count=1
function	with sdcaoptimizer and real ||| sdca optimizer real	count=1
function	a static valueerror with ||| static	count=1
module	and return ||| learn python learn preprocessing	count=1
function	checkpoint [function_2] ||| [function_2] [function_1]	count=3
function	rejection sampling ||| rejection	count=1
module	dimensions of ||| contrib linalg python ops	count=2
class	quantized ||| quantized distribution	count=2
function	with at least the ||| with rank at least	count=1
module	transpose ||| python ops	count=1
module	deserialize ||| python ops	count=1
function_arg	a variable [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	function [arg_2] ||| [function_1] bn x [arg_2]	count=1
module	validates ||| keras python keras utils	count=1
function	dictionary and ||| transform	count=1
module	reservoir ||| tensorboard backend event_processing	count=2
function	returns a ||| base	count=1
function	sequence of integers ||| to sequences	count=1
arg	[arg_1] dense labels ||| [arg_1] [arg_2]	count=1
module	initialize the ||| contrib rnn python ops	count=2
arg	and body to the ||| body original_loop_vars	count=1
function	a batch ||| batch	count=5
function	a dict containing state ||| dict to state	count=1
class	op (e g "matmul") ||| operation	count=1
function	pixels ||| pixels	count=1
module	the total number of ||| python ops	count=2
arg	that ||| optimizer global_step	count=1
function	random input ||| random input	count=2
function	the shape of the ||| shape	count=2
function	no emitted edges ||| update ops sees updated values	count=1
class	of run() ||| run	count=1
function_arg	sets [arg_2] ||| [function_1] [arg_2]	count=1
class	the kernel ||| kernel	count=1
function	richtextlines ||| text lines from rich	count=1
function	compute set ||| set	count=1
arg	creates batches of ||| batch_size num_threads capacity	count=1
arg	values parsing new values ||| values	count=1
function	an op which reads ||| read	count=1
module	produced or ||| framework	count=1
function	pearson correlation coefficient ||| pearson correlation	count=2
module	the next runge-kutta ||| integrate	count=1
function	scope that changes to ||| scope	count=1
class	[class_1] an embedding ||| [class_2] [class_1]	count=6
function	proto_type for ||| collection proto type	count=1
function	sparse [function_2] ||| [function_1] int [function_2]	count=4
function	[function_1] by ||| [function_1] [function_2]	count=4
class	head [class_2] ||| [class_2] [class_1]	count=1
function	to sparse ||| streaming sparse	count=3
function	generate a sentinel ||| get sentinel	count=1
function	barrier ||| prepare barrier	count=1
function	the total log-likelihood ||| loglikelihood operation	count=1
module	version with default shuffle ||| python learn learn_io	count=1
arg	distributions ||| loc scale validate_args	count=1
module	the ||| summary	count=2
function	for converting objects ||| conversion	count=1
class	op that ||| op	count=1
arg	[arg_1] fns ||| [arg_1] [arg_2]	count=1
function	a dict ||| dict to	count=2
module	instance of ||| distributions python ops	count=1
arg	count ||| count	count=1
module	a dictionary of ||| contrib	count=1
function	variables in ||| variables to	count=1
function	[function_1] columns ||| [function_1] [function_2]	count=7
function	vector [function_2] ||| [function_1] [function_2]	count=10
module	tensor with ||| keras	count=1
function	zlib library compatible ||| write zlib	count=2
function	name of ||| name	count=8
function	inputs for sequence ||| inputs	count=1
function	an individual audio clip ||| individual audio	count=1
function	callback to copy files ||| callback	count=1
function	[function_1] table ||| [function_2] [function_1]	count=4
module	to a ||| contrib training python training	count=1
function	initializer to assign ||| initializer	count=1
module	vector ||| distributions	count=3
module	session and runs a ||| learn dataframe	count=1
module	dictionary and return indexies ||| learn	count=2
class	node that yields ||| record input	count=1
function	the feed [function_2] ||| [function_2] [function_1]	count=7
module_class	[module_1] [class_2] ||| [module_1] ops tensor [class_2]	count=1
function	value of ||| value	count=2
function	[function_1] raw ||| [function_1] [function_2]	count=4
class	single ||| event transformer	count=1
function	the mean absolute error ||| mean absolute error	count=1
function	path [function_1] [function_2] ||| [function_1] [function_2]	count=1
module	to the training procedure ||| contrib losses python losses	count=1
module	version ||| ops	count=1
arg	values ||| values value_range nbins dtype	count=1
function	to ops that ||| filter	count=1
function	relevant values ||| relevant	count=1
function	[function_1] bprop ||| [function_1] [function_2]	count=1
arg	[arg] as ||| [arg]	count=2
module_class	[module_1] created by ||| [module_1] [class_2]	count=4
function	squared error ||| squared error	count=4
module	canonical ||| python framework	count=1
module	the original kernel for ||| python	count=1
function	sets the parameters ||| set params	count=3
module	dataset ||| contrib keras python keras datasets	count=2
function	text ||| to sequences	count=1
module	instance ||| python learn	count=1
function	variables ||| variables by	count=1
module	each [module] ||| [module]	count=2
function	x-y ^2 ||| squared difference	count=1
class	interactivesession ||| session	count=1
class	file to ||| summary	count=1
function	a root [function_2] ||| [function_2] [function_1]	count=4
module	retrieves ||| keras engine	count=3
module	tuple of integer[s] or ||| ops	count=1
function	on self with ||| with rank	count=1
function	returns a json ||| json	count=1
module	returns the length ||| layers python	count=1
function	prefix [function_2] ||| [function_2] log [function_1]	count=2
module	and return ||| preprocessing	count=1
function	reshape batch matrix ||| matrix	count=1
function	to use based on ||| get string to hash bucket	count=1
function	tile the batch dimension ||| tile batch	count=1
function	generate a full ||| full	count=1
arg	tensor ||| tensor perm	count=1
function	true iff ||| is constant	count=2
function	prepares features config ||| spec for parsing	count=1
function	the cached tensor ||| outgoing cache	count=1
function	other subclassses of ||| interactive	count=1
arg	on x [arg_2] ||| [arg_1] [arg_2]	count=5
function	of a given plugin ||| plugin	count=1
arg	parameters loc and scale ||| loc scale validate_args allow_nan_stats	count=1
function	multipliers to ||| multipliers	count=1
function	sets static ||| set sample static	count=1
arg	bucketing of input tensors ||| tensors	count=1
function_arg	[function_1] data ||| [arg_2] [function_1]	count=6
module	core version with default ||| learn python learn	count=1
function_arg	image from [arg_2] ||| [function_1] [arg_2]	count=4
function	for variable-length numeric data ||| real valued var len	count=1
module	return ||| tensorboard backend	count=2
function	[function_1] over sample ||| [function_2] [function_1]	count=4
arg	a tensor ||| tensor paddings	count=1
module	get a menuitem from ||| debug	count=1
module	that wraps a ||| learn python learn	count=1
arg	given estimator ||| estimator	count=1
function	kl divergence kl(d1 || ||| kl	count=1
function	[function_1] validates bias ||| [function_1] [function_2]	count=1
function_arg	[function_1] highwaywrapper ||| [arg_2] [function_1]	count=1
function	version ||| valid	count=1
function	a reshape node ||| reshape node	count=2
module	of ||| preprocessing	count=2
function	of featurecolumns [function_2] ||| [function_2] [function_1]	count=4
function_arg	[function_1] maps ||| [function_1] tensor [arg_2]	count=2
module	[module_1] the transformer ||| [module_2] [module_1]	count=1
function	tensor as input ||| make input	count=1
module	given ||| learn estimators	count=2
module	perform a step of ||| seq2seq python ops	count=1
function	unused ||| unused	count=1
class	graph into ||| graph	count=1
function_arg	[function_1] specification ||| [arg_2] [function_1]	count=3
arg	x = g ||| x name	count=1
function	returns the complex conjugate ||| conj grad	count=1
function	weight ||| weight	count=9
function	invalid type ||| test invalid number of classes	count=1
function	[function_1] the inputs ||| [function_2] [function_1]	count=1
function	with static shapes ||| matrix static	count=1
class	the current batch ||| queued sequence batch	count=1
module_class	monitored [class_2] ||| [module_1] monitored [class_2]	count=1
module	while training ||| python learn learn_io	count=2
function	the op type ||| op type	count=2
function	[function_1] arguments of ||| [function_1] [function_2]	count=4
module_class	[module_1] [class_2] ||| [module_1] tensor [class_2]	count=2
arg	tensors x and y ||| x y	count=1
function	[function_1] function estimator ||| [function_2] [function_1]	count=1
module	and runs a ||| python learn dataframe	count=1
function	a header for use ||| header from ops and	count=1
arg	tensors linked to ||| ops	count=1
function_arg	[function_1] gen_parsing_ops ||| [arg_2] [function_1]	count=6
function	a tensor ||| data tensor	count=1
module	object[s] ||| contrib seq2seq	count=1
function	prune control edges related ||| prune control edges of	count=1
function	the tokens ||| init tokens	count=1
class	eventfilewriter ||| file writer	count=1
class	check to make ||| test upgrade	count=1
arg	arguments ||| args	count=1
module	of init ||| ops	count=2
function	make the ||| make	count=1
function	check sparsemax kernel ||| sparsemax	count=1
function	block ||| v2 block	count=1
function	a placeholder ||| placeholder	count=5
module_class	[module_1] from callables ||| [module_1] [class_2]	count=4
arg	tensorflow operation ||| operation ignore_dtype	count=1
class	check sparsemax ||| sparsemax	count=1
arg	apply conv + ||| x filters num_row num_col	count=1
module	dataframe and ||| learn python learn dataframe	count=1
function	occurs in ||| debugging during op	count=1
class	declare ||| declare	count=1
function	are ||| hooks	count=1
function	the names of ||| convert names	count=1
module	tensor for ||| python feature_column	count=1
function	output file path ||| output file path	count=3
function	export that is a ||| export version	count=2
function	serialize an n-minibatch sparsetensor ||| serialize many sparse	count=1
function	multi value ||| multi value	count=2
function	into ||| python input	count=1
arg	the denominator ||| denominator	count=2
arg	read subgraph for this ||| dtype	count=1
function_arg	[function_1] [arg_2] ||| [function_1] experiment [arg_2]	count=2
function	[function_1] of sparse_column_with_keys ||| [function_2] [function_1]	count=2
module	returns predictions ||| contrib layers python layers	count=1
function	back edge from ||| back edge	count=2
function	if all ||| check	count=1
module	shape of a call ||| ops	count=1
function	[function_1] gradients by ||| [function_2] [function_1]	count=1
module	the set of ||| ops	count=1
function	values then return tensor ||| maybe assert valid sample	count=1
function	the while loop that ||| while	count=1
arg	threads ||| threads	count=1
arg	returns hooks if ||| hooks	count=1
function	input tensor ||| tensor input	count=1
class	a tree ||| tree graphs	count=1
module	shape of a call ||| python ops	count=1
function	at [function_2] ||| [function_1] [function_2]	count=4
arg	logits given in input ||| inputs	count=2
module_class	[module_1] labeledtensor objects ||| [module_1] [class_2]	count=2
arg	[arg_1] and dtype ||| [arg_1] [arg_2]	count=1
function	the partitioned ||| partitioned	count=1
class	multivariate normal distribution ||| multivariate normal diag	count=1
module	tensors specified by ||| slim	count=1
function	a tensor [function_2] ||| [function_1] [function_2]	count=6
module_class	[module_1] function ||| [class_2] [module_1]	count=1
function	the graph-level random seed ||| seed	count=1
class	wrapper should work also ||| debug wrapper session test	count=1
arg	and stddev loc ||| loc	count=1
function	are ||| hooks type	count=1
function	wrap a ||| maybe wrap custom	count=1
arg	import a function ||| module_name function_name	count=1
function	defines the [function_2] ||| [function_1] [function_2]	count=7
function_arg	summary file [arg_2] ||| [function_1] [arg_2]	count=4
function	not compatible with ||| compatible with	count=2
module	and return indexies of ||| contrib learn python learn preprocessing	count=1
module_class	[module_1] function into ||| [module_1] [class_2]	count=2
module	transforms each text ||| python keras preprocessing	count=1
arg	or dicts of same ||| rtol atol	count=1
module	parameter p is ||| contrib distributions	count=1
arg	the single-line ||| max_length backward_command forward_command latest_command_attribute	count=1
class	normal distribution ||| normal diag plus	count=1
function	with bucketized features ||| bucketized features	count=4
module	reduce ||| tensorboard plugins text	count=1
function	a sparse [function_2] ||| [function_2] [function_1]	count=10
function	to a richtextlines ||| rich text lines from	count=1
class	operator is [class_2] ||| [class_1] [class_2]	count=1
class	shape based on ||| shape	count=1
arg	via session_bundle by creating ||| saver checkpoint_path export_dir	count=1
arg	vector inner ||| xs ys	count=2
function	create a [function_2] ||| [function_1] [function_2]	count=2
function	create the state for ||| create control flow state	count=1
function	weighted per step false ||| streaming sparse false	count=1
function	sessionrunhook raises typeerror otherwise ||| type	count=1
function	[function_1] tensor to ||| [function_1] sparse [function_2]	count=1
function	save and ||| save	count=1
module	the vocabulary dictionary and ||| contrib learn python learn	count=1
function	dense batch matrix representing ||| dense	count=1
function	leaf impurity of a ||| average impurity	count=1
function	into a list ||| string	count=1
class	column ||| real valued var len column	count=1
function_arg	[function_1] of shape ||| [arg_2] [function_1]	count=8
function_arg	[function_1] test_name ||| [arg_2] [function_1]	count=1
function	also on other subclassses ||| interactive	count=1
module	of inverse and ||| distributions python ops	count=1
arg	transformations to labels ||| mode labels	count=6
class	cudnn to the ||| cudnn	count=1
class	by the ||| asset	count=1
function_arg	[function_1] a logdir ||| [function_1] [arg_2]	count=3
class	batch of ||| sequence batch	count=1
function	for a rank irfft ||| fft length for irfft	count=1
class	a table outputs ||| table	count=3
function	resnet-101 model ||| 101	count=1
class	a table outputs the ||| lookup table	count=1
function	definition if [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] variation ||| [function_1] [function_2]	count=7
function	[function_1] without ||| [function_2] [function_1]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] name lists [arg_2]	count=2
module	the sum of ||| python	count=1
class	of the model ||| model	count=3
function	fill tensor ||| fill missing	count=1
module	returns the length of ||| layers python ops	count=1
module	the condition ||| python ops	count=1
function	kernels have [function_2] ||| [function_2] [function_1]	count=3
module	training procedure ||| losses	count=2
function	for all inputs ||| inputs tensor	count=1
class	show ||| curses ui	count=1
function	from caller [function_2] ||| [function_2] [function_1]	count=5
function	a binary [function_2] ||| [function_2] [function_1]	count=2
function	parameters and flops ||| get logged	count=1
function	loads all events in ||| load all events	count=1
module	menuitem from the ||| python debug cli	count=1
function	binary classification [function_2] ||| [function_1] [function_2]	count=3
function	to use based on ||| get string to hash bucket fn	count=1
arg	whether the targets are ||| targets	count=1
function	initializes ||| initialize	count=2
function_arg	recall values [arg_2] ||| [arg_2] [function_1]	count=1
function	numpy printoption from ||| parse numpy printoption	count=1
function	[function_1] creates ||| [function_2] [function_1]	count=2
function	the node's statistics ||| stats	count=1
class	extractimagepatches op ||| extract image patches	count=1
arg	op2 [arg_2] ||| [arg_2] [arg_1]	count=3
class	a dict that contains ||| head	count=1
module	as self _value ||| contrib bayesflow	count=1
module	list of keras ||| keras	count=1
function	from ||| index	count=1
module	for "dense*dense" ||| ops	count=1
arg	of rate along the ||| rate	count=1
function_arg	[function_1] [arg_2] ||| [function_1] value [arg_2]	count=1
function	some of the max ||| max	count=1
function	[function_1] [function_2] ||| [function_1] nonexistent [function_2]	count=8
function	message ||| purge message	count=1
function	labels for ||| labels	count=1
function	cholesky factorization ||| chol	count=1
function_arg	array to [arg_2] ||| [arg_2] [function_1]	count=1
arg	outputs ||| outputs	count=1
function	[function_1] embeddings ||| [function_2] [function_1]	count=4
function	a directory traversal attack ||| directory traversal	count=1
module	for ||| factorization python ops	count=2
function	boots 3 servers ensures ||| spec propagation three servers	count=1
class	load() ||| directory	count=1
function	tf placeholder for the ||| make placeholder from	count=2
module	of a 1 ||| python	count=1
function	[function_1] backprop ||| [function_2] [function_1]	count=1
function_arg	[function_1] that would ||| [function_1] x target_key [arg_2]	count=2
function	all are sessionrunhook ||| hooks type	count=1
function	regularizer ||| apply regularization	count=1
function	via a [function_2] ||| [function_2] [function_1]	count=2
arg	distances to nearest ||| input_fn batch_size steps	count=1
arg	determined by pred ||| pred name	count=1
function	conversion function ||| conversion function	count=2
module	symbol ||| tools	count=1
class	stack ||| graph stack	count=2
module	tensorboard wsgi ||| tensorboard	count=1
function_arg	< [arg_2] ||| [arg_2] [function_1]	count=4
class	ops to ||| saver builder	count=1
module	the layer's ||| keras python keras engine	count=1
module	recursively ||| python framework	count=1
function	runs one evaluation ||| eval	count=1
function	savedmodel ||| export savedmodel	count=1
class	for the layer ||| hybrid layer	count=1
module	-> _guideref from the ||| docs	count=1
module	initializes ||| contrib framework python framework	count=1
function	try all [function_2] ||| [function_1] [function_2]	count=3
module	eventfilewriter ||| python	count=1
function_arg	[function_1] concatenates n ||| [arg_2] [function_1]	count=1
function	[function_1] histograms ||| [function_1] [function_2]	count=4
function_arg	function for [arg_2] ||| [function_1] [arg_2]	count=2
arg	based on mapping ||| mapping	count=2
function	dynamic [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] tensor not ||| [function_2] [function_1]	count=1
arg	a file with ||| filename	count=1
module	after training ||| learn python learn	count=1
module	dataset ||| python learn datasets	count=4
arg	fns and ||| fns	count=1
function	calls [function_2] ||| [function_1] [function_2]	count=5
module	output tensors for ||| python keras engine	count=1
function	or higher ||| rank at least	count=1
function	should be allowed ||| should	count=1
module	vector of ||| python ops distributions	count=6
function	which examples to ||| which to	count=2
function	the values from ||| values from	count=2
function	at least the given ||| rank at least	count=1
arg	a baseestimator instance ||| model_dir config	count=1
function	returns the ||| proto type	count=1
module	and runs ||| learn python learn	count=1
function	[function_1] distance ||| [function_1] [function_2]	count=1
class	on [class] ||| [class]	count=1
function	inner ||| inner	count=1
arg	[arg_1] beta ||| [arg_2] [arg_1]	count=4
module	single ||| learn estimators	count=1
function	linked to ops ||| ts from	count=1
function_arg	to extend [arg_2] ||| [arg_2] [function_1]	count=1
function	all are sessionrunhook ||| hooks	count=1
class	to make sure ||| files	count=1
arg	across the specified dimension ||| dim epsilon	count=1
module	determined at runtime ||| contrib linalg	count=1
module	worker ||| factorization python ops	count=1
function	[function_1] structure of ||| [function_2] [function_1]	count=2
arg	name ||| name shape	count=2
arg	convert ops ||| ops check_graph allow_graph ignore_ts	count=1
module	handles starting and stopping ||| slim	count=1
function	after restart only affect ||| after restart	count=1
class	the grad state ||| control flow state	count=1
module	be produced or none ||| python framework	count=1
arg	section as an md ||| function_details	count=1
module	of ||| event_processing	count=1
arg	op1 and op2 ||| op1 op2	count=3
function_arg	[function_1] [arg_2] ||| python debug [function_1] [arg_2] erase_existing	count=3
function	[function_1] overriding ||| [function_2] update [function_1]	count=1
function	to non-negative ||| static axis non	count=1
arg	pil image instance ||| img data_format	count=1
module	kernel ||| contrib kernel_methods python	count=1
module	ids of a tf ||| factorization python ops	count=1
function	writes a dict into ||| write dict to	count=1
function	resnet-50 ||| 50	count=1
function	features and ||| features	count=3
module	if ||| python framework	count=2
arg	sharded ||| dtype num_shards	count=1
module	of name ||| python ops	count=1
module	layers ||| layers	count=1
module	transforms each text ||| keras python keras	count=1
module	savedmodel pbtxt file containing ||| python saved_model	count=1
function	and merge ||| merge	count=1
function	converts ||| internal convert	count=1
function	[function_1] [function_2] ||| [function_2] event [function_1]	count=6
arg	given a filename ||| filename	count=1
module_class	[module_1] underlying ||| [module_1] conditional accumulator [class_2]	count=1
function	typeerror otherwise ||| check hooks	count=1
arg	conjugate prior on ||| prior scale s n	count=1
module	carlo estimate of ||| bayesflow python ops	count=1
function	returns a shape ||| shape with rank	count=1
module_class	in this [class_2] ||| [module_1] [class_2]	count=5
function	return tensor ||| assert valid	count=1
module	tensors execute together ||| batching	count=1
function	output values ||| setup values	count=1
function	get an operatorpdidentity ||| get	count=1
function	step [function_2] ||| [function_2] [function_1]	count=10
function	the fuzz factor used ||| epsilon	count=1
function	op to use based ||| get string to	count=1
arg	of a tensor ||| tensor tag	count=1
module	to tensorflow/ ||| python platform	count=1
module	dict ||| docs	count=1
function_arg	a sequence [arg_2] ||| [arg_2] [function_1]	count=2
function	a get request for ||| get	count=1
function	get ||| caption to item	count=1
arg	model ||| model	count=2
class	for node-status ||| cli	count=1
function	create a sum ||| streaming sum	count=1
arg	the gradients for the ||| grad	count=1
function	registers ||| register	count=2
module	prepended to ||| linalg	count=1
module	previous output tensors from ||| contrib grid_rnn	count=1
function	attention and a ||| attention	count=1
module_class	adds an unref to [module_1] [class_2] specified timestamp ||| [module_1] [class_2] tracker add unref timestamp	count=1
function	[function_1] convolution ||| [function_2] [function_1]	count=1
function	computes the confusion matrix ||| confusion matrix	count=1
function	predictions is tensor ||| predictions tensor	count=3
function	to the end ||| to flat end	count=2
module	of zero ||| python ops	count=1
arg	debugger command-line interface ||| ui_type dump_root thread_name_filter	count=1
function	integer weights ||| integer weighted sparse column succeeds	count=1
function_arg	[function_1] tuples ||| [function_1] shapes [arg_2]	count=2
function	image from ||| image	count=1
function	[function_1] are ||| [function_2] [function_1]	count=2
function	to save the ||| sharded save	count=2
function	serving ||| default serving	count=1
module	the serving thread ||| python	count=1
module	when the ||| python	count=1
function	static ||| matrix static	count=1
class	[class_1] outputs of ||| [class_2] [class_1]	count=1
module	integers ||| contrib keras python keras preprocessing	count=2
arg	given value to a ||| value dtype name preferred_dtype	count=1
function	flops ||| logged	count=1
class	or tensor ||| tensor flow	count=1
function	an exit ||| exit	count=1
function	noise from ||| noise	count=1
function	string of status labels ||| status labels	count=1
class	and run ||| run	count=1
module	representing ||| framework	count=2
function	using client feed ||| feed	count=1
arg	given serialized ||| serialized_example item_handler	count=1
module	this object ||| python ops	count=1
function	tensor's shape partitioned into ||| shape	count=1
function_arg	loop [arg_2] ||| [function_1] f ins batch_size [arg_2]	count=2
class	table outputs the ||| mutable dense hash table	count=1
module_class	[module_1] graph ||| [class_2] [module_1]	count=1
arg	the labels [arg_2] ||| [arg_2] [arg_1]	count=9
module	this ||| grid_rnn python ops	count=1
function	isnan and isinf are ||| gives false	count=1
function_arg	[function_1] dnnlinearcombinedregressor instance ||| [function_1] [arg_2]	count=1
function	has been decorated ||| has arg scope	count=1
function	the dump ||| dump	count=1
arg	given input ||| inputs	count=1
class	to make sure ||| upgrade	count=1
function	functionality ||| new step	count=1
module	used by the transformer ||| contrib layers python layers	count=1
function	raw params ||| raw params	count=2
function	fill in default ||| default	count=1
function	the latest checkpoint ||| latest checkpoints	count=2
class	outputs ||| with	count=1
class	normalization and recurrent dropout ||| norm	count=1
module	match ||| contrib graph_editor	count=2
function	then return ||| maybe assert valid sample	count=1
module	a keras variable ||| python keras	count=1
function	constants of ||| to constants	count=1
module	from a batch of ||| contrib seq2seq python ops	count=1
function	otherwise ||| hooks type	count=1
class	construct multivariate normal ||| multivariate normal tri l	count=1
function	or return index ||| index	count=1
module	dataset of only ||| learn python learn datasets	count=1
function	reshaping behavior of realvaluedcolumn ||| valued column reshaping	count=1
arg	be visualized by ||| values metadata thumbnails	count=1
module	menuitem from ||| python debug	count=1
class	state for ||| state	count=1
module	of a 1 ||| ops distributions	count=1
function	offset when ||| single offset	count=1
function	a training [function_2] ||| [function_2] [function_1]	count=1
function	returns a description ||| get	count=1
module	in the sense ||| linalg python ops	count=2
module	version with default shuffle ||| learn learn_io	count=1
module	variance ||| contrib keras python keras	count=1
function	[function_1] function estimator ||| [function_1] [function_2]	count=1
function	model's input [function_2] ||| [function_1] [function_2]	count=1
function	true positives ||| true positive at	count=2
module	[module_1] sample from ||| [module_1] [module_2]	count=1
function_arg	raw params [arg_2] ||| [function_1] [arg_2]	count=1
function	computes the lstm cell ||| lstm block cell	count=1
function	all inputs of ||| inputs	count=1
arg	on r^k, ||| loc atol rtol validate_args	count=1
function	parameters used to ||| parameters	count=1
function	tensors without scaling variance ||| variance scaling	count=1
arg	the data ||| data	count=1
arg	op belongs ||| op	count=1
module	objects ||| learn estimators	count=1
function	fully [function_2] ||| [function_2] [function_1]	count=4
function	specified invalid indices ||| by invalid indices	count=2
function	column of ||| column	count=2
module	recall ||| python ops	count=1
function	sequence count of ||| sequence count	count=1
arg	in the given job ||| job_name	count=1
function	sort a ||| sort dump	count=1
module_class	[module_1] staging area ||| [module_1] ops [class_2]	count=1
arg	input across the ||| inputs	count=1
function	partition ||| partition	count=2
arg	a state ||| cell	count=1
function	has been decorated with ||| has	count=1
function	list of input tensors ||| source inputs	count=1
function	non-batch kl ||| compute non batch kl	count=1
module	and ||| ops	count=3
function	tilegrad ||| tile	count=1
function	inputs of ||| inputs tensor info from	count=1
arg	func ||| func	count=4
function_arg	[function_1] subgraph ||| [function_1] [arg_2]	count=1
class	register the opdefs from ||| op def library	count=1
function	sum-of-squares ||| mean squared error	count=4
function	this operator [function] = ||| [function]	count=1
class	layer normalization and recurrent ||| layer norm	count=1
function	[function_1] should be ||| [function_1] feed [function_2]	count=2
module	to all ops created ||| ops	count=1
function	[function_1] an event ||| [function_1] [function_2]	count=4
module	inner ||| python mappers	count=1
module	true iff this ||| python framework	count=1
function	a unique ||| unique	count=1
arg	by pred ||| pred	count=2
class	test ||| op test	count=2
function	help [function_2] ||| [function_1] [function_2]	count=3
module	dict ||| python estimator	count=1
arg	the parameters for ||| use_peepholes	count=1
function_arg	[function_1] of session ||| [function_1] [arg_2]	count=1
function_arg	true if [arg_2] ||| [function_1] variable [arg_2]	count=3
arg	resource_list ||| resource_list name	count=1
arg	a specified min ||| t clip_value_min clip_value_max	count=1
function	a time [function_2] ||| [function_1] [function_2]	count=3
function	it into [function_2] ||| [function_2] [function_1]	count=1
module	file ||| python summary writer	count=3
class	adam [class_2] ||| [class_1] [class_2]	count=1
class	vocabulary dictionary and return ||| categorical processor	count=1
module	output of the command ||| python debug cli	count=1
arg	a merge op ||| op	count=1
function	watch ||| watch	count=1
module	dataframe into two ||| python learn dataframe	count=1
function	[function_1] scalar inputs ||| [function_1] [function_2]	count=2
module	which values will be ||| python	count=1
function	with real valued features ||| real valued feature with	count=1
module	logistic ||| learn python learn utils	count=1
function	nodes after [function_2] ||| [function_2] update [function_1]	count=3
function	the graph [function_2] ||| [function_1] [function_2]	count=1
module	get ||| contrib rnn python ops	count=1
function_arg	[function_1] a cell_fn ||| [function_1] [arg_2]	count=1
module	model ||| contrib learn python learn estimators	count=1
module	returns ||| backend event_processing	count=1
function	[function_1] indices for ||| [function_1] [function_2]	count=5
function	labels ||| recall at k	count=1
function	number of elements ||| num	count=2
function	and runoptions for ||| and run options	count=2
function	creates an op for ||| op	count=2
function	main menu ||| add main menu	count=2
function	sparse ||| sparse recall at top	count=1
function	postfix ||| tf spec structure	count=1
class	a table outputs the ||| table	count=3
module	the ||| python training	count=1
function_arg	applies dropout [arg_2] ||| [arg_2] [function_1]	count=1
function	extract ||| extract states	count=1
function	the sampled softmax training ||| sampled softmax	count=1
function	sum of a ||| sum	count=2
function	version ||| assert valid sample	count=1
arg	to the input ||| inputs rate noise_shape	count=1
function	completely runtime shapes ||| zero rate unknown shapes	count=1
function	bytes ||| as bytes	count=1
arg	valueerror if operators determined ||| operators	count=1
class	quantized distribution ||| quantized	count=1
function	prepare the ||| prepare	count=1
function_arg	a [function_1] [arg_2] ||| [function_1] generator [arg_2]	count=2
function	to use ||| to	count=1
function	[function_1] eval ||| [function_1] [function_2]	count=3
function	all tensor watch keys ||| debug watch keys	count=1
function_arg	[function_1] var ||| [arg_2] [function_1]	count=4
module	returns a training op ||| layers python layers	count=1
function	slice an array ||| slice	count=1
class	the given ||| lazy builder	count=1
module_class	dense [class_2] ||| [module_1] sparse [class_2]	count=1
function	maximum [function_2] ||| [function_2] [function_1]	count=1
function	state names ||| state names	count=2
class	enqueue ops ||| runner	count=1
function	-> _guideref ||| guide index	count=1
function	intro ||| intro	count=1
function	or op [function] partially flattened ||| map structure up [function]	count=1
function	works with real ||| real	count=2
class	a ||| test upgrade	count=1
function	a line in a ||| line	count=1
function	generates test data to ||| get test data	count=1
module	layer ||| layers python layers	count=1
module	session and runs ||| learn	count=1
function	a hparamdef ||| to proto	count=1
arg	[arg_1] with projected ||| [arg_1] [arg_2]	count=2
arg	via a riemann sum ||| num_thresholds	count=2
module	1 ||| distributions	count=2
module	don't have ||| compatibility	count=1
class	tensor ||| dirichlet multinomial	count=2
class	a dict with data ||| data feeder	count=2
function	save variables that ||| save ops	count=1
function	concat [function_2] ||| [function_2] [function_1]	count=3
arg	return indexies of ||| x	count=1
function	creates a [function_1] [function_2] configuration ||| [function_1] [function_2]	count=1
module	dataset from ||| learn python learn datasets	count=2
class	event ||| summary writer	count=2
function	device on ||| device	count=1
function	for ||| proto type	count=1
function	stop the ||| stop	count=1
function	list of dtypes ||| dtypes	count=2
module	of ||| backend event_processing	count=2
function	check the [function_2] ||| [function_1] [function_2]	count=4
function	class probability predictions ||| predict proba	count=2
function	the un-normalized l1 loss ||| l1 loss	count=1
function	table that maps a ||| table	count=1
module	multiplies ||| keras python keras	count=1
module	and return indexies ||| python learn preprocessing	count=1
function	run() calls to the ||| run	count=1
function	occurs ||| debugging during op	count=1
function	each forward tensor that ||| forward	count=1
function	a cosine-distance ||| cosine distance	count=1
function_arg	a hparamdef [arg_2] ||| [arg_2] [function_1]	count=1
class	the name of ||| indexed	count=1
class	metrics ||| logistic head	count=1
function	an accumulated ||| back prop accumulated	count=1
function	a richtextlines ||| rich text lines from rich	count=1
function	[function_1] [function_2] configuration ||| [function_1] [function_2]	count=2
function	x ||| xw plus b	count=1
module	cross-entropy loss using ||| ops losses	count=1
function	a wrapper ||| wrapper	count=1
class	mapper ||| mapper	count=1
function	the rewriter and tests ||| test	count=1
function	[function] integer ||| test integer [function]	count=3
class	a table outputs ||| mutable dense hash table	count=1
function	then return tensor ||| valid sample	count=1
arg	tensor reference ||| reference	count=1
arg	values to a ||| values	count=3
arg	a lookup ||| vocabulary_file vocab_size	count=1
arg	a sparsetensorsmap and ||| container shared_name name	count=2
class	svm classifier ||| svmtest	count=4
module	while training ||| contrib learn python learn learn_io	count=2
function	batch vector x to ||| vector to	count=1
arg	op was marked ||| op	count=1
arg	docstring ||| unused_arg unused_kwarg	count=1
module	transforms ||| python keras preprocessing	count=2
function	on bad ||| bad file	count=1
function_arg	matmul [arg_2] ||| [function_1] shape [arg_2]	count=1
module	classification ||| learn python learn utils	count=1
function_arg	[function_1] boston housing ||| [arg_2] [function_1]	count=1
arg	in input ||| inputs sequence_length beam_width	count=1
class	tensors of all keys ||| mutable dense hash	count=1
class	by ||| asset	count=1
function_arg	distance between [arg_2] ||| [function_1] predictions [arg_2]	count=2
module	shape values ||| python	count=1
module	__init__ which gets ||| distributions python	count=1
function	proto_type ||| get collection proto type	count=1
arg	file at full_path ||| full_path	count=1
module	of ||| legacy_seq2seq python ops	count=1
function	tensor is [function_2] ||| [function_2] [function_1]	count=1
arg	x = g y ||| x	count=1
module	to __init__ which gets ||| distributions python ops	count=1
class	[class_1] the stepper ||| [class_1] [class_2]	count=2
function	a file to a ||| file to	count=1
arg	of input_tensor ||| input_tensor	count=1
function	value of [function_2] ||| [function_2] [function_1]	count=6
function	placeholder [function_2] ||| [function_2] [function_1]	count=8
arg	parameters for ||| use_peepholes	count=1
module	internal ||| python keras	count=1
function	graph as [function] into ||| [function]	count=1
function	[function_1] the end ||| [function_2] [function_1]	count=1
function	resets the global ||| reset	count=1
module	string ||| text	count=2
class	and run the original ||| run	count=1
function	if all are sessionrunhook ||| type	count=1
function	step and [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] bucket configuration ||| [function_2] [function_1]	count=1
arg	a dimension of 1 ||| dim	count=1
class	recordinput ||| record input	count=1
module	[module_1] sample from ||| [module_1] [module_2] distribution	count=1
arg	[arg_1] stochastictensor ||| [arg_1] [arg_2]	count=1
function	returns the variables and ||| and	count=1
function_arg	[function_1] many ||| [function_1] [arg_2]	count=1
function	check to make sure ||| test	count=1
function_arg	[function_1] through the ||| [arg_2] [function_1]	count=4
arg	and m_prev [arg_2] ||| [arg_2] [arg_1]	count=3
module_class	[module_1] underlying accumulator ||| [module_1] ops [class_2]	count=1
arg	for recall@k and precision@k ||| predictions_idx class_id	count=1
module_class	of [class_2] ||| [module_1] [class_2]	count=95
class	for an lstm cell ||| gate lstmcell	count=1
function	checkpoint from a mapping ||| checkpoint from	count=1
module	which gets ||| distributions python	count=1
module	value of ||| python keras	count=1
class	for node-status ||| node stepper cli	count=1
function_arg	attribute (e [arg_2] ||| [arg_2] [function_1]	count=3
arg	input_tensors) ||| attr_name	count=1
module	dictionary ||| contrib learn python learn	count=1
function	shape of the ||| shape	count=4
function	the map that records ||| map	count=1
arg	beta ||| beta	count=1
class	the pooling ||| pooling test	count=1
function	ops ||| from	count=1
module	parameters ||| contrib specs python	count=1
function_arg	[function_1] two ||| [arg_2] [function_1]	count=1
module	registry ||| python framework	count=1
module	lstm ||| contrib rnn python ops	count=1
class	value tensor ||| tensor	count=1
function_arg	[function_1] a run ||| [arg_2] [function_1]	count=5
function	irfft ||| irfft	count=1
function	correction and update ||| correction and	count=1
module	get a ||| python debug cli	count=1
module	and ||| learn utils	count=2
module	[module] apply l2 ||| [module]	count=1
module	version with default ||| learn	count=1
module	loss to the ||| ops losses	count=1
function	generate a new ||| new	count=2
arg	using class ||| logits probs dtype	count=1
function	single example proto ||| parse single example	count=2
function	boundary ||| boundary ts	count=1
class	diag ||| matrix diag	count=1
function	into string values based ||| to string	count=1
class	batch ||| queued sequence batch	count=1
function	runs from a directory ||| runs from directory	count=1
function	[function_1] rate ||| [function_2] [function_1]	count=1
function	description of ||| description	count=1
function	default image [function_2] ||| [function_2] [function_1]	count=2
arg	[arg_1] fns and ||| [arg_2] [arg_1]	count=1
function	legend for node-status labels ||| status label legend	count=1
function_arg	[function_1] [arg_2] ||| [function_1] [arg_2] num_threads enqueue_size	count=3
function	broadcast leading dimensions ||| broadcast matrix batch dims	count=1
function_arg	[function_1] architecture ||| [function_1] [arg_2]	count=4
arg	in x to zero ||| x	count=1
function	and flops ||| logged	count=1
class	run ||| flow benchmark	count=1
arg	in the display area ||| line_index	count=1
module	a 1 ||| distributions	count=1
arg	based on ||| weight_collections trainable	count=1
function	the recall ||| streaming recall	count=1
function	request [function_2] ||| [function_2] [function_1]	count=4
arg	create batches of ||| batch_size capacity	count=1
arg	all categories in x ||| x unused_y	count=1
module	input ||| cloud	count=1
arg	that op ||| op	count=1
arg	w conjugate prior on ||| prior scale s	count=1
arg	entire tensor ||| level noise_shape seed	count=1
class	multiple output tensors ||| export utils	count=1
function	[function_1] main ||| [function_1] [function_2]	count=1
module	of beams into ||| contrib seq2seq python ops	count=1
class	index a file reading ||| guide index	count=1
module	of inverse and ||| ops	count=1
function	device is ||| gputrace device	count=1
module	image s by the ||| contrib image python	count=1
function	[function_1] in an ||| [function_1] [function_2]	count=1
function_arg	shallow dict [arg_2] ||| [arg_2] [function_1]	count=1
class	instance of hparams ||| hparams	count=1
function	predictions by ||| predictions	count=1
arg	op was marked as ||| scope op func	count=1
function	the model ||| model	count=2
module	file to disk ||| summary	count=1
class	the value [class_2] ||| [class_2] [class_1]	count=1
class	will sample [class_2] ||| [class_2] [class_1]	count=6
arg	* b ||| a b	count=1
module	same as the last ||| python learn estimators	count=3
module	loss ||| python losses	count=4
function	convert the string ||| parse	count=1
function	call to run() ||| run	count=2
function_arg	use [arg_2] ||| [function_1] [arg_2]	count=1
class	metadata for [class_2] ||| [class_2] [class_1]	count=6
module	same as 'values' ||| metrics python ops	count=1
function	an external module ||| external	count=1
function	register a new ||| register	count=1
function	write a sequence ||| write histogram	count=1
arg	cell with ||| cell output_size	count=1
function	the proto_type for ||| proto	count=1
module	a sequence of ||| preprocessing	count=1
function	[function_1] dependencies ||| [function_2] [function_1]	count=5
function	for input ||| one input	count=2
function	variables to ||| variables to	count=1
module	which properly compares two ||| contrib distributions	count=1
module	a batch of ||| ops	count=5
arg	it ||| value dtype	count=1
class	for ||| dirichlet	count=1
module	from ||| python	count=2
function	into predict step ||| predict data feeder	count=1
function	variable ||| load variable	count=1
function_arg	checkpoint file ||| checkpoint checkpoint_dir	count=1
function_arg	restore [arg_2] ||| [arg_2] [function_1]	count=1
class	and update it with ||| op test	count=1
function	summary tensor used ||| summary op	count=1
arg	elements across dimensions of ||| axis keep_dims name	count=1
arg	transposed 3d ||| inputs filters kernel_size strides	count=1
arg	or fn2() ||| fn1 fn2	count=1
class	shape based on self ||| shape	count=1
function	large records ||| large	count=1
function	of its [function_2] ||| [function_2] [function_1]	count=1
function	raises typeerror otherwise ||| check hooks	count=1
class	a tensorshape ||| tensor shape	count=1
arg	values from a ||| values	count=1
module	returns ||| io	count=1
module	with default ||| learn learn_io	count=1
function	to apply a ||| apply	count=1
arg	or 4 arguments ||| features labels mode	count=1
function	to a [function_2] ||| [function_2] [function_1]	count=13
class	the session ||| session	count=3
function	client feed ||| feed	count=1
function	input tensors of ||| inputs	count=1
module	to this input ||| python framework	count=1
function	[function_1] all pixels ||| [function_2] as [function_1]	count=1
function	from the [function_2] ||| [function_1] line [function_2]	count=1
function_arg	boston [arg_2] ||| [arg_2] [function_1]	count=1
module	all ops created ||| python ops	count=1
module	dictionary and return indexies ||| python learn	count=1
function	tensor version ||| valid sample	count=1
arg	var ||| var	count=7
module	starting and stopping ||| slim	count=1
function_arg	[function_1] op is ||| [function_1] loop switch [arg_2]	count=2
arg	cursesui based on ||| ui_type on_ui_exit	count=2
arg	would feed dict of ||| x y batch_size num_epochs	count=1
arg	on a labeled tensor ||| labeled_tensor axis_order	count=1
function	embedding lookup ||| deep embedding lookup	count=1
function	with zero ||| zeros	count=1
function	sort a list ||| sort dump	count=1
function	computes an ||| compute	count=1
function	cross-entropy [function] ||| [function] by	count=1
arg	labels into onehot_labels using ||| labels	count=1
arg	predictions ||| predictions weights	count=3
module	the ||| bayesflow python	count=2
function	and validates bias weight ||| bias and other columns fabricated centered	count=1
class	directory where event ||| writer	count=1
class	the stack ||| default graph stack	count=1
function	returns a shape ||| shape with	count=2
function	finish ||| finish	count=1
function	[function_1] of batch ||| [function_2] [function_1]	count=4
function_arg	by input [arg_2] ||| [function_1] [arg_2]	count=1
function	adds a cosine-distance ||| cosine distance	count=1
function	returns ||| proto type	count=1
function	a plain ||| plain	count=1
function	typeerror otherwise ||| check hooks type	count=1
function	prints a [function_2] ||| [function_1] [function_2]	count=2
arg	labels and predictions ||| predictions labels dim	count=1
function	prepares a feature ||| create sequence feature	count=1
arg	inputs ||| inputs state	count=2
function	checks ||| assert	count=1
module	estimate of an ||| ops	count=1
arg	an estimator ||| cell_type num_units target_column	count=1
class	output [class_2] ||| [class_2] [class_1]	count=1
arg	token [arg_2] ||| [arg_1] [arg_2]	count=1
function	[function_1] [function_2] ||| [function_2] run conversion [function_1]	count=2
function	indices for the ||| index at	count=1
function	squared error between ||| squared error	count=4
function	tables ||| tables	count=1
function	creates a _targetcolumn ||| target	count=2
function	the ||| transform	count=1
class	longer rich line ||| rich line	count=2
function_arg	[function_1] given sensitivity ||| [function_1] [arg_2]	count=2
function	irfft ||| fft length for irfft	count=1
module	given ||| python learn	count=5
function_arg	[function_1] sliced dimension ||| [function_1] tensor [arg_2]	count=2
function	returns ||| batch get	count=1
arg	[arg_1] tensor ||| python ops identity [arg_1] [arg_2]	count=3
function	variable-updating ops with ||| test watching variable update ops	count=1
function	add an [function_2] ||| [function_1] forward [function_2]	count=3
class	create ||| line reader	count=1
function	returns a list of ||| list	count=1
function	get ||| get identity	count=1
function	projects the column ||| project col	count=1
function	from ||| guide index	count=1
module	distribution ||| python ops distributions	count=3
arg	docstring for ||| unused_arg unused_kwarg	count=1
function	a fake bias ||| bias	count=1
arg	with experiment using featurecolumns ||| feature_columns	count=1
function	pandas dataframe for ||| pandas	count=2
function	matrix elements [function_2] ||| [function_1] to [function_2]	count=2
arg	subgraph view ||| info sgv	count=1
function_arg	[function_1] all 1s ||| [function_1] [arg_2]	count=6
function	the sessionmanager ||| session manager	count=1
function	bundle ||| bundle or saved model bundle	count=1
function	of integers ||| texts to	count=1
module_class	op [class_2] ||| [module_1] op [class_2]	count=1
function	creates placeholders [function_2] ||| [function_2] [function_1]	count=1
function	flops for ops from ||| get logged ops	count=1
function	routingfunction ||| stochastic hard routing function gradient	count=2
function	the loss ||| loss	count=2
class	the given ||| builder	count=1
function	next cont() ||| cont	count=1
arg	for recall@k [arg_2] ||| [arg_2] [arg_1]	count=4
function	node with a quint8 ||| node	count=1
function	evaluation against ||| do eval	count=1
arg	distributions with ||| validate_args allow_nan_stats	count=1
function	that match the ||| ts from regex	count=1
module_class	[module_1] [class_2] ||| [module_1] [class_2] params	count=12
function	map from parents to ||| map	count=1
class	shape ||| dirichlet multinomial	count=2
arg	on featurecolumns ||| feature_columns	count=1
class	rich ||| rich line	count=1
function	extract command ||| command	count=1
class	token ||| func registry	count=1
function_arg	parameters for [arg_2] ||| [function_1] loss loss [arg_2]	count=1
function	batch matrix ||| matrix	count=1
module	fetch and feed ||| python client	count=1
function_arg	[function_1] sequenceexamples ||| [arg_2] [function_1]	count=6
function	hook to ||| make session run hook	count=1
class	to build an input ||| feature	count=1
function	is probably a ||| is tensor flow	count=1
arg	defines the default ||| weight_decay batch_norm_decay batch_norm_epsilon	count=1
module	that produces this ||| python framework	count=1
function	batched kl divergence kl(g0 ||| kl	count=1
module	[module] bucketized ||| contrib layers [module]	count=1
module	helper which properly ||| contrib distributions python kernel_tests	count=1
arg	to ops that match ||| ops	count=1
function	shape function for the ||| grad shape	count=1
function	string representing number ||| str	count=1
arg	tf learn ||| num_threads enqueue_size	count=1
function	name of the node ||| node name	count=1
module	event ||| python	count=1
class	queue when ||| queue	count=1
function	that match the ||| filter	count=1
function	the delay between checkpoints ||| model secs	count=1
function	verifies the values in ||| values	count=2
arg	using summarize_activation to ||| name_filter summarizer	count=1
function	the variables updated in ||| updated	count=1
module	image s by the ||| image python ops	count=1
module	ops leading ||| ops	count=1
function	loss calculation [function_2] ||| [function_1] [function_2]	count=10
module	a menuitem ||| debug	count=1
arg	builder based on featurecolumns ||| columns_to_tensors feature_columns	count=1
class	table outputs ||| initializable lookup table	count=1
module_class	[module_1] [class_2] ||| [module_1] vector [class_2]	count=2
function	[function_1] operation for ||| [function_2] [function_1]	count=3
arg	on inp for num_iterations ||| inp num_iterations	count=1
function	bytes ||| bytes to	count=1
function_arg	determines [function_1] [arg_2] length ||| python keras utils conv [function_1] length [arg_2]	count=1
function_arg	new checkpoint [arg_2] ||| [function_1] [arg_2]	count=3
module	this cell ||| rnn python	count=1
function_arg	a graph [arg_2] ||| [arg_2] [function_1]	count=1
arg	a microbenchmark to measure ||| name target iters	count=1
arg	a ||| name container	count=1
function	returns trainer ops ||| get train ops	count=5
function	[function_1] dict into ||| [function_2] [function_1]	count=1
function	op ||| training op	count=2
module	and return indexies of ||| python learn preprocessing	count=1
class	output ||| output	count=4
function	[function_1] x to ||| [function_1] [function_2]	count=5
arg	and rate ||| rate	count=1
function	control edges related to ||| control edges of	count=1
function	this run ||| before run	count=2
function_arg	indices in [arg_2] ||| [arg_2] [function_1]	count=1
function	function returns ||| get	count=2
function	_get_dense_tensor() for input ||| get dense tensor one input value	count=1
function	an identity matrix ||| eye	count=1
function	of names for ||| names	count=1
arg	a cell ||| cell output_size activation reuse	count=1
function	tall output ||| tall output page	count=1
function_arg	[function_1] appearing in ||| ops elbo [function_1] [arg_2]	count=1
arg	computes the recall@k ||| k weights	count=1
function	dense feature extraction by ||| bottleneck	count=2
class	perform ||| fractional avg test	count=2
arg	and a target ||| target	count=2
function	inputs for ||| inputs	count=1
function	[function_1] dnn-only model ||| [function_2] [function_1]	count=2
arg	trains a ||| max_steps	count=1
class	given weight ||| dnnlinear combined regressor	count=2
arg	a pooling op ||| inputs kernel_size pooling_type padding	count=1
function	in tensorboard ||| import to tensorboard	count=1
function_arg	computes sin [arg_2] ||| [function_1] [arg_2]	count=1
class	a queuerunner ||| queue runner	count=2
function	a canonical ||| canonical	count=1
module	returns the sum ||| framework	count=1
function	dropout given ||| recurrent dropout	count=1
function_arg	metagraphdef to [arg_2] ||| [function_1] [arg_2]	count=1
arg	input [arg_1] [arg_2] pass results through ||| [arg_1] [arg_2]	count=4
module	constructor of ||| debug wrappers	count=2
function	the feed ||| init feed	count=1
function	update ||| update docstring	count=1
function	specific plugin asset ||| plugin asset	count=1
arg	numpy ||| x	count=1
module	possibly nested tuple of ||| ops	count=2
function	test input tensor ||| test input	count=2
class	labels ||| node	count=1
module	match the ||| graph_editor	count=1
module	that ||| learn	count=1
module	proper ||| python	count=1
function	initializes values and ||| init values	count=1
module	are sessionrunhook ||| python	count=1
arg	the given index ||| index tensor	count=1
function	placeholder for ||| placeholder from dtype and	count=1
arg	docstring for ||| unused_arg	count=1
function_arg	[function_1] node in ||| [arg_2] [function_1]	count=3
arg	seeks ||| whence position	count=1
function	dynamicstitch ||| dynamic stitch grads	count=1
function	[function_1] argument ||| [function_1] [function_2]	count=2
function	a non-reference ||| base	count=1
module	of the ||| python	count=15
arg	row ||| rows cols	count=1
function	from a string ||| parse	count=1
arg	input best ||| inputs sequence_length merge_repeated	count=1
class	attention ||| attention	count=1
class	the rnn model ||| cudnn rnn	count=1
function	outputs of this ||| outputs	count=1
module_class	[module_1] underlying tf ||| [module_1] [class_2]	count=2
function	box ||| box	count=1
function	smaller ||| shrink	count=1
function	'n' ||| n	count=1
module	global ||| python ops	count=2
function	[function_1] dense and ||| [function_2] [function_1]	count=2
function	copy a ||| copy	count=2
function	in a list of ||| total	count=1
function	indices into strings ||| index to string	count=2
function	state tensor s ||| state	count=1
function	[function_1] path used ||| [function_1] [function_2]	count=3
function_arg	[function_1] the inputs ||| [function_1] spec [arg_2]	count=3
function	help ||| help	count=3
function	name ||| guide	count=1
function	verify that ||| verify	count=3
arg	along the specified axes ||| x axes	count=1
function	nearest neighbor resizing ||| resize nearest neighbor grad	count=1
function	[function_1] the slice ||| [function_2] [function_1]	count=1
function	object's docstring and return ||| docstring	count=1
module	rnn cell composed ||| rnn	count=1
arg	[arg_1] predictions ||| [arg_2] [arg_1]	count=36
class	to the [class_2] ||| [class_2] [class_1]	count=4
class	ps task index ||| round robin strategy	count=1
function	writes metagraphdef to ||| meta graph	count=1
arg	wait for them to ||| timeout	count=1
function	train phase and ||| train phase	count=2
function_arg	[function_1] column ||| [arg_2] [function_1]	count=3
function	boots 3 servers ensures ||| cluster spec propagation three servers one	count=1
function_arg	add op1 and ||| add op1	count=1
module	then return tensor version ||| ops	count=1
function	for all inputs of ||| inputs tensor info	count=1
arg	shape and filled ||| shape	count=1
function	run ||| run	count=22
function	proto_type ||| get collection	count=1
function	adds an event ||| add	count=2
function	with other [function_2] ||| [function_1] [function_2]	count=2
module	slice ||| keras engine	count=1
function	an op or ||| op	count=1
function	exists in ||| exists	count=1
function	up embeddings for ||| embedding lookup	count=2
function	tensors linked to ops ||| from regex	count=1
module	prepended to all ||| linalg python	count=1
function	an absolute [function_2] ||| [function_2] [function_1]	count=3
function_arg	write a [arg_2] ||| [function_1] audio series writer [arg_2]	count=1
function	[function_1] array ||| [function_1] [function_2]	count=1
function	tensor to a sparsetensor ||| sparse tensor	count=1
module	run the [module_2] ||| [module_1] [module_2]	count=2
function	conversion functions [function_2] ||| [function_2] run [function_1]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] lists [arg_2]	count=1
function	gamma ||| gamma greater one	count=1
function_arg	write a [arg_2] ||| [function_1] [arg_2]	count=4
function_arg	from [arg_2] ||| [function_1] [arg_2]	count=14
function	that avoids duplicate ||| unique	count=1
function	within the [function_2] ||| [function_2] [function_1]	count=1
function	parse ||| parse md	count=1
function	shape values then ||| sample	count=1
function	[function_1] the node ||| [function_2] [function_1]	count=2
module	a rank-2 ||| solvers python	count=1
arg	tensors to call func ||| func	count=1
module	a ||| debug cli	count=2
arg	labels ||| top_k_predictions labels weights metrics_collections	count=1
arg	each input and ||| inputs	count=1
module_class	[module_1] [class_2] ||| [module_1] data [class_2]	count=1
function	load runs from ||| runs from	count=1
function	callback of ||| on	count=1
arg	[arg_1] y ||| [arg_1] [arg_2]	count=11
function_arg	cross entropy [arg_2] ||| [arg_2] [function_1]	count=4
function	[function_1] is ||| [function_2] [function_1]	count=4
function	list the [function_2] ||| [function_1] [function_2]	count=2
function	docstring and return ||| md docstring	count=1
class	prune ||| dump dir	count=3
function	legacy init ||| get legacy init	count=1
module	sequence-to-sequence ||| legacy_seq2seq python ops	count=2
function	for dnn-linear combined ||| dnnlinear combined bug	count=1
function	unary operation for ||| unary op	count=2
class	monitored ||| monitored	count=1
function	placeholder ||| t with placeholder	count=1
function_arg	add [arg_2] ||| [function_1] [arg_2]	count=7
module_class	and values [class_2] ||| [module_1] mutable dense hash [class_2]	count=1
function	save variables that ||| save	count=1
function	the captured variables by ||| extra vars	count=1
function	[function_1] column is ||| [function_2] [function_1]	count=2
module	loss using tf nn ||| ops losses	count=1
function	full name e g ||| full path	count=1
function_arg	[function_1] data to ||| [function_1] [arg_2]	count=1
module	of any tensor-like object ||| ops	count=1
class	table outputs the ||| dense hash table	count=1
function	determinant for every ||| det	count=2
function	implies a scalar ||| scalar from	count=3
module	the training procedure ||| python ops losses	count=2
function	all inputs of ||| inputs tensor	count=1
module	verifies ||| contrib learn python learn estimators	count=1
function	and real valued features ||| optimizer real valued linear features	count=1
arg	parameters for ||| num_units use_peepholes share_time_frequency_weights	count=1
module	batched ||| python training	count=1
function	overriding ||| override	count=1
class	[class] session run() ||| [class]	count=2
arg	the value of ||| value	count=1
arg	interpolates keyword ||| kw kw_overrides	count=1
function	model ||| train model	count=2
arg	initialize the parameters ||| num_units use_peepholes share_time_frequency_weights cell_clip	count=1
function	for tests ||| test	count=1
function	verifies the values in ||| test output values	count=2
module	and previous ||| contrib grid_rnn python	count=1
function	or minimum ||| minimum	count=1
module	default ||| python ops	count=1
arg	dilation_rate ||| dilation_rate	count=1
module	text ||| python	count=1
function	add ops to ||| add	count=4
function	get the underlying node ||| node	count=2
function	[function_1] in a ||| [function_2] [function_1]	count=9
module	construct ||| learn learn_io	count=1
module	returns ||| learn python learn dataframe	count=2
function	control dependency on this ||| control edges	count=1
function	bundle [function_2] ||| [function_2] [function_1]	count=3
arg	rnncell cell [arg_2] ||| [arg_1] [arg_2]	count=1
class	gradient descent [class_2] ||| [class_2] [class_1]	count=2
function	[function_1] distribution as ||| [function_2] [function_1]	count=2
function	reverse ||| reverse	count=1
function	a model_fn can ||| create model fn	count=1
arg	tensor_list in queue ||| queue tensor_list threads	count=2
class	the generator ||| generator enqueuer	count=1
function	outputs in place so ||| outputs make	count=1
module	[module_1] sense ||| [module_1] [module_2]	count=7
function_arg	[function_1] of x ||| [arg_2] [function_1]	count=1
function	embedding and a ||| embedding	count=1
function	name of the variable ||| name	count=1
arg	a model ||| model line_length	count=1
function	score for a ||| score	count=1
module	one step of ||| rnn python ops	count=1
function	_get_dense_tensor() for [function_2] ||| [function_1] two [function_2]	count=2
function	[function_1] an ||| [function_1] [function_2]	count=1
function	sampling ||| sampling	count=1
module_class	the [class_2] ||| [module_1] ops conditional accumulator [class_2]	count=1
module	data ||| learn	count=1
class	the given ||| lazy	count=1
arg	next_inputs_fn ||| state sample_ids	count=1
function	outputs ||| outputs	count=8
function	dict containing ||| dict	count=1
function	[function_1] string ||| [function_2] [function_1]	count=9
function_arg	[function_1] [arg_2] ||| [function_1] labels predictions [arg_2]	count=6
function	[function] that ||| print [function]	count=3
module	timestamp when this ||| client	count=1
module	of ||| python debug	count=2
arg	x -> 2 x+a ||| x	count=1
function	trainer ops ||| train ops	count=4
function	[function_1] node with ||| [function_2] [function_1]	count=12
function	average pooling [function_2] ||| [function_1] [function_2]	count=1
class	with the common config ||| config	count=1
module	tensor and returns ||| python keras	count=1
function	number of units in ||| num units	count=2
module	ops that match the ||| graph_editor	count=1
function	global dictionary of custom ||| get custom	count=1
function	dnn-only ||| dnnonly	count=1
function	predict [function_2] ||| [function_2] [function_1]	count=5
class	wrapper should ||| wrapper session	count=1
function	generate a sentinel ||| sentinel	count=1
function	[function_1] from caller ||| [function_2] and hook [function_1]	count=1
module_class	[module_1] tensorflow ||| [module_1] base [class_2]	count=1
function	signature [function_2] ||| [function_1] [function_2]	count=4
function	[function_1] probably a ||| [function_1] [function_2]	count=3
function	the files ||| build guide index	count=1
arg	savedmodel ||| saved_model_dir tag_set	count=1
function	gradient ||| logits grad	count=1
function	an input_fn ||| input	count=1
arg	op if [arg_2] ||| [arg_2] [arg_1]	count=1
module_class	[module_1] entire operator ||| [module_1] [class_2]	count=2
function	the delay between ||| secs	count=1
function_arg	resnet-152 model [arg_2] ||| [function_1] [arg_2]	count=1
class	tests ||| transformer test	count=2
arg	specific format ||| export_path checkpoint_path eval_result	count=1
function	partitioner [function_2] ||| [function_2] size [function_1]	count=1
module	generator ||| keras python keras engine	count=1
function	deconv ||| deconv	count=1
function_arg	== y ||| equal x y	count=2
class	a quantized ||| quantized	count=1
function	[function_1] features ||| [function_2] [function_1]	count=29
module	output tensors ||| contrib keras python keras engine	count=1
function	[function_1] strategies with ||| [function_2] [function_1]	count=2
arg	more than one ||| tensors	count=1
function	classification using ||| classification	count=1
module	a sparse slice of ||| python ops	count=1
function_arg	[function_1] given table ||| [arg_2] [function_1]	count=1
function	asset ||| get asset	count=1
function	[function_1] at the ||| [function_1] [function_2]	count=1
function	[function_1] order on ||| [function_1] [function_2]	count=2
module	for ||| rnn python ops	count=2
function	projections of the ||| get projections	count=1
arg	initialize the parameters ||| num_units input_size use_peepholes	count=1
class	[class_1] given a ||| [class_2] [class_1]	count=2
function	parameters in ||| total params	count=1
function	scale ||| variance scale	count=2
module	add ||| contrib layers python layers	count=1
arg	audio_summ ||| audio_summ	count=1
module	values [module] ||| [module]	count=1
module	of integers ||| python ops	count=1
function_arg	column of [arg_2] ||| [function_1] [arg_2]	count=4
module_class	[module_1] normalization ||| [module_1] [class_2]	count=1
function	capture the ||| test capture	count=1
arg	tensorinfo for ||| meta_graph_def signature_def_key	count=1
function	the sorted transitive closure ||| sorted nodes	count=1
function	for overriding ||| override	count=1
arg	session, and tries ||| master saver checkpoint_dir checkpoint_filename_with_path	count=1
arg	learn the vocabulary ||| x	count=1
function	if the latest ||| latest	count=1
module	equal to another ||| distributions	count=1
function	no emitted ||| watching variable update ops sees updated values	count=1
function	[function_1] hashed bucket ||| [function_1] [function_2]	count=1
class	table outputs the corresponding ||| lookup table	count=1
function_arg	[function_1] shallow_tree ||| [arg_2] [function_1]	count=2
function	checkpoint from a mapping ||| create checkpoint from	count=1
function	sets the ||| set	count=16
function	finite [function_2] ||| [function_2] [function_1]	count=4
function	[function_1] dense ||| [function_2] [function_1]	count=7
module	distribution s ||| distributions python	count=1
function	set ||| set	count=18
function_arg	file path [arg_2] ||| [function_1] [arg_2]	count=1
function	outputs of this op ||| outputs	count=1
function	full ||| full path	count=2
function	attempt to extract command ||| command	count=1
function_arg	a control [arg_2] ||| [function_1] dependency [arg_2]	count=4
function	given variable [function_2] ||| [function_1] [function_2]	count=4
function	for test function ||| test function	count=2
module	outcome ||| distributions	count=1
class	of the dilation ||| dilation test	count=1
module	bottleneck ||| contrib slim python slim nets	count=4
arg	tags ||| tags	count=1
arg	on featurecolumns ||| columns_to_tensors feature_columns num_outputs weight_collections	count=1
function_arg	metagraphdef from [arg_2] ||| [arg_2] [function_1]	count=1
function	computes sums of n-d ||| convolution	count=1
function_arg	evaluation against [arg_2] ||| [arg_2] [function_1]	count=2
class	if the stack ||| graph stack	count=1
function	model_fn ||| create model fn ops	count=2
function	model function for ||| model function	count=2
module	resizing ||| python ops	count=2
function	dimension in ||| dimension	count=3
class	contains the ||| indexed slices	count=1
function	fetches [function_2] ||| [function_2] [function_1]	count=4
function	[function_1] examples to ||| [function_1] [function_2]	count=1
module	constructor of ||| debug cli	count=1
module	training and ||| learn python learn ops	count=1
class	the tensor [class_2] ||| [class_1] [class_2]	count=1
function	[function_1] normalization on ||| [function_2] [function_1]	count=1
class	grad ||| grad loop	count=1
module	if all ||| python	count=1
class	file to ||| writer	count=1
arg	values are ||| values	count=2
function_arg	processor [arg_2] ||| [function_1] [arg_2]	count=1
module	a given directory ||| contrib learn python learn	count=1
function_arg	split [arg_2] ||| [function_1] [arg_2]	count=1
arg	of tensors ||| summarizer	count=1
function_arg	shape [arg_2] ||| [function_1] [arg_2]	count=11
arg	fits internal statistics to ||| x augment rounds seed	count=1
module	build ||| learn utils	count=1
arg	with best effort a ||| adjoint adjoint_arg	count=1
module	a specific format of ||| ops	count=2
arg	or ||| name	count=2
arg	mode ||| mode	count=2
class	no rich attributes ||| rich	count=1
function	to ||| string to hash bucket	count=1
module	and set ||| python ops	count=1
class	for matrix factorization ||| factorization	count=1
function_arg	a tensor [arg_2] ||| [function_1] watch [arg_2]	count=1
function	validates a [function_2] ||| [function_1] [function_2]	count=3
function	finalized ||| not finalized	count=1
module	dimensions of tensor ||| contrib linalg python ops	count=1
arg	return a _docstringinfo ||| py_object relative_path_to_root reference_resolver	count=1
function	a node ||| inputs node	count=1
function	shape ||| op output shape	count=2
arg	functional interface ||| inputs filters kernel_size	count=1
class	reader ||| reader	count=3
class	the directory and ||| dump dir	count=1
arg	[arg_1] to labels ||| [arg_1] [arg_2]	count=3
module	register ||| python framework	count=1
function	[function_1] new control ||| [function_2] [function_1]	count=1
function	return dict ||| index	count=1
function	which reads [function_2] ||| [function_2] [function_1]	count=1
function	the minimum ||| min	count=1
function	[function_1] the row ||| [function_1] [function_2]	count=2
arg	from x or ||| x	count=1
function	representation of the fetches ||| fetches	count=1
function	kernel mappers [function_2] ||| [function_2] [function_1]	count=4
function	path and [function_2] ||| [function_2] [function_1]	count=2
arg	looperthread that ||| timer_interval_secs target args	count=1
function	values added to index ||| add to index	count=1
function	have invalid ||| test invalid	count=2
arg	name ||| name shape dtype	count=2
function	to specify a fixed ||| fixed	count=1
function	resnet_v1() for arg and ||| resnet v1	count=3
module	integrate a ||| contrib integrate python	count=1
class	a ps task index ||| greedy load balancing strategy	count=1
function	sdcaoptimizer and a ||| sdca	count=1
function	dense tensor in ||| sparse tensor dense	count=1
function	linked ||| filter ts from	count=1
function	initialization flag ||| initialization	count=1
module	the ||| framework	count=6
function	of the data/plugins_listing endpoint ||| plugins listing	count=1
function_arg	docstring [arg_2] ||| [function_1] [arg_2]	count=1
arg	of sgv0 ||| sgv0	count=4
function	[function_1] column ||| [function_1] [function_2]	count=22
function_arg	[function_1] representation of ||| [arg_2] [function_1]	count=3
module	loss using tf ||| ops losses	count=1
function	biasadd node with ||| bias add node	count=2
function	notice to [function_2] ||| [function_2] [function_1]	count=1
arg	smaller versions of ||| shrink	count=1
module	we don't have ||| tools	count=1
class	vocabulary dictionary ||| processor	count=1
function	resultant ||| compute elemwise op output	count=1
class	a single ||| event	count=1
function	resultant of ||| compute elemwise op	count=1
module	a list of tensors ||| ops	count=10
function	a dense [function_2] ||| [function_2] [function_1]	count=5
function	each text ||| sequences	count=1
function	[function_1] of variable ||| [function_2] [function_1]	count=6
function	dense ||| to dense	count=1
class	sure we don't have ||| test upgrade files	count=1
module	numpy array ||| keras	count=1
function	sparse_column_with_vocabulary_file ||| sparse column vocabulary	count=1
function	computed [function_2] ||| [function_2] [function_1]	count=1
class	the dilation function ||| dilation test	count=1
function	for ||| node status	count=1
function_arg	[function_1] tensorflow operation ||| [arg_2] [function_1]	count=3
module	lists of unique items ||| labeled_tensor python ops	count=1
arg	the loss_collection ||| loss_collection	count=1
function	2d convolution layer ||| conv2d	count=2
arg	layers ||| layers layer_set	count=1
arg	results ||| sess op_or_tensor feed_dict burn_iters	count=1
module	debug ||| python debug lib	count=3
function	match ||| from	count=1
function_arg	[function_1] [arg_2] ||| [function_1] to floatx [arg_2]	count=1
function	layer ||| layer	count=4
class	constructor ||| predict	count=1
function	[function_1] noise ||| [function_1] [function_2]	count=2
function_arg	[function_1] filewriter for ||| [arg_2] [function_1]	count=1
arg	[arg] nearest integer ||| x [arg]	count=2
function	object for a ||| to object	count=1
arg	a tensor ||| tensor paddings mode name	count=1
function	given boundary ||| boundary ops	count=1
module	the image ||| python keras preprocessing	count=1
function	is both dense and ||| dense and	count=1
class	for node-status ||| node	count=1
arg	[arg_1] sgv1 (see ||| [arg_1] [arg_2]	count=5
module	ops ||| graph_editor	count=1
arg	an _eventloggerthread ||| queue ev_writer flush_secs	count=1
function	dict symbol name -> ||| guide	count=1
module	cell output dimension ||| rnn python ops	count=1
function	function for [function_2] ||| [function_2] model [function_1]	count=2
arg	seeks to [arg_2] ||| [arg_2] [arg_1]	count=4
function	normalizes ||| normalize	count=2
arg	fn2() based on the ||| fn1 fn2 name	count=1
arg	run and node name ||| run node_name	count=1
module	declare ||| python framework	count=1
module	a sequence of ||| python keras	count=1
class	value [class_2] ||| [class_1] [class_2]	count=1
function	arguments [function_2] ||| [function_2] [function_1]	count=8
arg	more than one tensor ||| tensors	count=1
function	a tuple ||| create tuple	count=1
function	get all ||| ts from regex	count=1
function	verifies ||| verify	count=5
module	loads ||| keras preprocessing	count=1
module	invoked during construction of ||| debug wrappers	count=1
module	internal ||| keras python keras	count=1
arg	reduce elems ||| elems initializer name	count=2
module	returns [module_2] ||| [module_2] [module_1]	count=2
function	returns a copy of ||| copy	count=1
module	list of tensor ||| python ops	count=1
module	-grad ||| python ops	count=1
arg	input and each ||| cls inputs	count=1
module	total number of ||| python ops	count=2
function_arg	[function_1] single ||| [function_1] batch [arg_2]	count=1
function	the vocabulary ||| fit	count=1
class	this data ||| data	count=1
arg	dicts ||| rtol atol	count=1
module	run this ||| ops	count=1
function_arg	extend [arg_2] ||| [arg_2] [function_1]	count=1
function	return dict ||| build guide	count=1
function	linear_model_fn but ||| with model fn ops	count=2
arg	the inputs ||| inputs environment	count=1
function	the debug [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] out-of-order ||| [function_1] [function_2]	count=2
module_class	[module_1] gradients that ||| [module_1] [class_2]	count=2
module	can do a ||| layers python layers	count=1
arg	modifies in-place the graph ||| graph	count=1
class	dense tensor ||| sparse tensor	count=3
arg	and predictions ||| predictions	count=10
arg	the given regex ||| regex	count=1
module	of a 1 outcome ||| distributions	count=1
class	underlying accumulator ||| conditional accumulator base	count=2
function	of parameters used to ||| parameters	count=1
function	iff ||| constant	count=2
function	op which reads the ||| read	count=1
function	to ops that match ||| ts from	count=1
arg	a debug-dumped tensor ||| node_name output_slot debug_op	count=1
function	specifies non-default debug ops ||| with non default debug ops works	count=1
function	can save and ||| save	count=1
arg	through the rewriter ||| float_graph_def input_map output_names log_graph	count=1
function	size of [function_2] ||| [function_2] [function_1]	count=12
function_arg	[function_1] a state-saving ||| [function_1] for rnn [arg_2]	count=1
module	labeled ||| contrib labeled_tensor python ops	count=3
module	of unique items ||| ops	count=1
function	tile ||| tile	count=1
function	a subgraph ||| view	count=1
function	gets metagraphdef from ||| get meta graph def	count=1
function_arg	[function_1] file ||| [function_1] [arg_2]	count=3
function	with real valued features ||| real valued features	count=2
arg	for storing the checkpointstate ||| save_dir latest_filename	count=1
arg	the frequency-weighted mean ||| axes frequency_weights name	count=1
function_arg	[function_1] their names ||| [function_1] lists [arg_2]	count=1
function	adds a flow end ||| flow end	count=1
arg	speeds up parsing by ||| parsed_features keys feature_queue_capacity num_enqueue_threads	count=1
function	defines the version functions ||| version	count=1
arg	perform depth-first search ||| lines attr_segs node_name	count=1
class	1 ||| bernoulli	count=3
function	on other subclassses of ||| test interactive	count=1
class	graph ||| graph	count=12
function	file ||| file	count=18
module	return indexies of ||| learn python learn preprocessing	count=1
function	binary indicator ||| binary	count=1
function	dependency ||| edges	count=1
function	returns a lookup table ||| table	count=1
function	dump path and ||| dump path and	count=3
function	adds scaled ||| add scaled	count=1
function	of higher [function_2] ||| [function_1] [function_2]	count=1
function	linked to ops ||| filter ts	count=1
arg	using tf nn softmax_cross_entropy_with_logits ||| onehot_labels	count=1
arg	to numpy scan ops ||| func x axis exclusive	count=1
function_arg	squared error [arg_2] ||| [arg_2] [function_1]	count=6
function	row [function_2] ||| [function_2] [function_1]	count=2
module	dataset ||| keras datasets	count=2
function	a batch of ||| cdf batch	count=1
function	to record [function_2] ||| [function_1] [function_2]	count=2
arg	[arg_1] each cluster ||| [arg_2] [arg_1]	count=1
module	value of the ||| contrib keras python keras	count=1
function	[function_1] lists ||| [function_1] fetch and name [function_2]	count=1
class	of this estimator ||| base	count=1
function	uninitialized ||| report uninitialized	count=1
function	[function_1] [function_2] ||| [function_2] eval [function_1]	count=2
function	the debug ||| debug	count=1
arg	tensors for given feature_columns ||| feature_columns name example_names	count=1
module_class	model's [class_2] ||| [module_1] [class_2]	count=1
function	tile along the ||| and tile	count=1
function	for next cont() ||| cont	count=1
module	specific format of ||| cudnn_rnn python ops	count=2
function	tensor ||| maybe	count=1
arg	of cursesui ||| on_ui_exit	count=3
function	or return index of ||| finalize index	count=1
function	metric value ||| metric	count=2
function_arg	dimension of shape ||| dimension shape	count=4
module	non-reference dtype based on ||| python	count=1
function_arg	initializes a [arg_2] ||| [arg_2] [function_1]	count=15
function	generate a new ||| gen new	count=1
function	and linear [function_2] ||| [function_1] [function_2]	count=1
class	none if the shape ||| shape	count=1
module	for the next runge-kutta ||| contrib integrate	count=1
module	a batch ||| distributions	count=2
function	[function_1] key ||| [function_2] [function_1]	count=1
function_arg	[function_1] directory ||| [function_1] [arg_2]	count=2
function	[function_1] a single ||| [function_1] [function_2]	count=4
function	[function_1] the items ||| [function_2] [function_1]	count=1
arg	given state ||| state	count=1
module	to a multiple ||| training python training	count=1
arg	a checkpoint in checkpoint_dir ||| checkpoint_dir master	count=1
function	enqueue based ||| enqueue	count=1
function_arg	before [arg_2] ||| [function_1] [arg_2]	count=1
arg	based on featurecolumns ||| feature_columns num_outputs weight_collections	count=1
function	postfix ||| spec structure	count=1
module	make ||| compatibility	count=1
function	helper ||| helper	count=1
module	menuitem ||| python	count=1
function	the lists of ||| name lists	count=2
function	at ||| rank at	count=1
module	data ||| learn learn_io	count=3
function	run one ||| call	count=3
module	indexies of ||| learn python	count=1
function	richtextlines object ||| text lines	count=1
function	a unary [function_2] ||| [function_1] [function_2]	count=2
function	a benchmark ||| report benchmark	count=1
module	matrix data ||| python learn	count=1
arg	protocol buffer with a ||| values collections	count=2
function	waits for ||| wait for	count=1
arg	[arg] is ||| numerator [arg]	count=3
function	end of ||| on batch end	count=1
function	integer column [function_2] ||| [function_2] [function_1]	count=1
function	step true positives for ||| streaming sparse true positive at	count=1
function	a restricted linear prediction ||| joint weighted sum from feature	count=1
function	as linear_model_fn but returns ||| linear model fn with model fn ops	count=2
function	flow end ||| flow end	count=2
function	richtextlines object ||| rich text lines from rich line	count=1
function	manual variable [function_2] ||| [function_1] [function_2]	count=2
function	as linear_model_fn but returns ||| model fn ops	count=2
function_arg	[function_1] row ||| [function_1] factors [arg_2]	count=4
function	multiclass ||| multiclass	count=1
function	weighted sum of ||| weighted sum	count=4
module	lstm ||| rnn python ops	count=1
arg	[arg] embedding ||| name [arg]	count=1
function	into ||| array to	count=1
function	[function_1] pooling ||| [function_1] [function_2]	count=2
function	into [function_2] ||| [function_2] [function_1]	count=9
function_arg	dims [arg_2] ||| [function_1] to flat end [arg_2]	count=1
function	false positives for ||| sparse false positive at k	count=2
arg	b, producing a * ||| transpose_a transpose_b	count=1
arg	gradients for the ||| grad	count=2
function	a linear operator from ||| operator	count=1
arg	slicing of a tensor ||| tensor	count=1
function	input and ||| inputs	count=1
module	we don't have ||| tools compatibility	count=1
function	[function_1] at given ||| [function_2] [function_1]	count=2
module	of 1 ||| contrib distributions python ops	count=1
function	concatenation of the ||| concatenate	count=1
class	vocabulary after which ||| vocabulary	count=1
arg	split dims ||| cls dims	count=1
arg	transposed 3d ||| filters kernel_size strides	count=1
function	elbo ||| elbo with	count=1
class	tensor in ||| tensor flow	count=1
function	for input with ||| input	count=3
class	dtype based on ||| dtype	count=1
arg	of items ||| items	count=3
arg	function to split dims ||| dims	count=1
module	an instance of ||| distributions python ops	count=1
class	an input_fn that ||| kmeans test base	count=1
function	tensor ||| benchmark fetch	count=1
module	returns lists of ||| ops	count=1
class	an input_fn that ||| kmeans test	count=1
class	test ||| linear classifier test	count=1
function	[function_1] state ||| [function_1] [function_2]	count=2
arg	[arg_1] fetches ||| [arg_2] [arg_1]	count=12
function	add the ||| add	count=3
function	the given python file ||| file	count=1
function	runoptions [function_2] ||| [function_2] and hook [function_1]	count=1
function	tf [function_2] ||| [function_2] [function_1]	count=5
function	id tensor ||| id tensor	count=3
class	make sure ||| test upgrade files	count=1
function	to embedding lookup to ||| deep embedding lookup	count=1
function	function estimator [function_2] ||| [function_2] [function_1]	count=1
function	condition based on the ||| scalar condition	count=1
class	wrapper should work ||| wrapper session	count=1
class	takes one float ||| rewriter	count=1
function	resultant of ||| compute elemwise op output	count=1
function	files produced are gzip ||| gzip read write	count=1
function	static ||| flip vector to matrix static	count=1
function	the sum of ||| reduce sum	count=2
function	raises an exception if ||| assert has	count=1
function_arg	[function_1] op belongs ||| [arg_2] [function_1]	count=2
class	table outputs the corresponding ||| interface	count=1
function	the address of ||| address	count=1
arg	of a model ||| model line_length	count=1
function	a postfix ||| tf spec structure	count=1
function_arg	convert [arg_2] ||| [function_1] [arg_2]	count=3
function	the ready op ||| ready op	count=2
module	bidirectional ||| learn python learn	count=1
function_arg	collects [arg_2] ||| [function_1] shape [arg_2]	count=1
class	vocabulary after ||| vocabulary	count=1
function	string_to_hash_bucket op to ||| to hash bucket fn	count=1
function	the image [function_2] ||| [function_2] [function_1]	count=1
arg	return true if obj ||| obj	count=1
function	given weight ||| weights	count=3
function_arg	[function_1] [arg_2] given input length ||| [function_1] [arg_2]	count=1
function_arg	[function_1] dnnlinearcombinedregressor ||| [function_1] model_dir [arg_2]	count=1
module	the given ||| slim python	count=1
function	strided [function_2] ||| [function_1] [function_2]	count=1
function_arg	to shallow_tree ||| to shallow_tree	count=1
arg	cell with added ||| cell input_keep_prob output_keep_prob state_keep_prob	count=1
function	product between ||| dot product	count=1
module	get the names of ||| python debug lib	count=1
function	the condition based ||| condition	count=1
function	dense batch matrix representing ||| to dense	count=1
function	bucket ||| hash bucket	count=1
class	saver state after ||| saver	count=1
arg	first-in first-out ||| capacity types shapes names	count=1
module	to add to the ||| python ops	count=1
function	index ||| finalize index	count=1
arg	batches ||| batch_size	count=9
module_class	the [class_2] ||| [module_1] training next queued [class_2]	count=2
function	verifies the values ||| values	count=3
function_arg	[function_1] val ||| [arg_2] [function_1]	count=1
function	local ||| local	count=3
function	encodings for planes ||| one hot planes	count=1
class	all keys ||| mutable dense hash	count=1
module	same as 'values' ||| contrib metrics python ops	count=1
module	the ||| python	count=220
function	meta [function_1] [function_2] to ||| [function_2] [function_1] meta_graph_def	count=1
module	of a 1 outcome ||| python ops	count=1
module	list ||| lib io	count=1
function_arg	returns a [arg_2] ||| [function_1] total loss [arg_2]	count=4
function	values then return ||| assert	count=1
arg	if condition ||| condition	count=1
module	returns a tensor ||| python	count=1
arg	according [arg_2] ||| [arg_1] [arg_2]	count=1
function	2d convolution ||| conv2d	count=3
function	returns the variable ||| var	count=1
function	sampled softmax training ||| sampled softmax	count=1
arg	for docs_for_object() calls ||| reference_resolver duplicates duplicate_of tree	count=1
function	removes ||| remove	count=1
function	to vector with static ||| to vector static	count=1
function	for a while loop ||| loop	count=1
arg	helper method that subscribes ||| control_cache	count=2
function	loss [function_2] ||| [function_2] [function_1]	count=15
arg	a summarysaver monitor ||| summary_op save_steps output_dir summary_writer	count=1
function	and ||| and slice inputs	count=2
class	these parameters or create ||| store	count=1
module	depending ||| labeled_tensor python ops	count=1
class	operator ||| linear operator scaled identity	count=1
arg	data input_fn ||| input_fn steps hooks checkpoint_path	count=1
class	layer from ||| layer	count=1
function	provides a scope ||| scope	count=1
arg	from x or y ||| x y	count=1
function	the provided fixed base ||| fixed unigram	count=1
arg	symbols to ||| ids vocab_size embed_dim sparse_lookup	count=1
arg	for an ||| cell_type num_units target_column	count=1
module	returns number of dimensions ||| ops	count=2
function	digamma function psi_p a ||| digamma	count=1
module	computation of ||| ops	count=1
module	labels ||| python	count=1
function	a dense [function_2] ||| [function_2] to [function_1]	count=1
arg	return the predicted_ids ||| outputs final_state sequence_lengths	count=1
function	asserts a positive ||| positive	count=1
arg	by name ||| name size	count=1
module	optimal ||| python ops	count=1
function	read in ||| read	count=1
function	the validity ||| valid	count=4
function	integer dtype ||| integer	count=1
module	don't have a ||| tools	count=1
function	[function_1] services for ||| [function_2] [function_1]	count=3
function	merge the properties ||| merge	count=1
function	tensor of ||| from tensor	count=1
function_arg	export strategies [arg_2] ||| [function_1] [arg_2]	count=1
module	sensitivity ||| python ops	count=1
function	writes [function_2] ||| [function_1] [function_2]	count=1
function	asserts whether given estimator ||| assert estimator	count=1
arg	the key ||| key	count=1
class	dictionary and return indexies ||| processor	count=1
module	a keras ||| keras utils	count=1
class	by the optimizer ||| optimizer	count=1
function	computes sparse ||| sparse	count=1
function	length ||| sequence length	count=1
arg	files given a feature_spec ||| feature_spec has_header	count=1
function	and hooks can ||| and hook	count=2
arg	pattern optionally shuffled ||| file_pattern randomize_input	count=1
function	def [function] adds ||| tag [function] add meta	count=1
function	[function_1] @{tensorflow : ||| [function_2] [function_1]	count=4
arg	different dtype and ||| dtype	count=1
module	a keras ||| python keras	count=2
arg	parameters for an ||| num_units use_peepholes initializer num_proj	count=1
module	the ||| layers python	count=1
function_arg	[function_1] metric and ||| [function_1] [arg_2]	count=3
class	of the tensor ||| tensor	count=1
function	runs from [function_2] ||| [function_2] [function_1]	count=3
function_arg	[function_1] [arg_2] ||| [function_1] session bundle dir [arg_2]	count=2
function	sets the slice ||| set save slice	count=2
arg	the labels and ||| labels dim weights	count=1
arg	functional interface for the ||| inputs filters kernel_size	count=1
function	sine [function_2] ||| [function_2] [function_1]	count=2
arg	constructor of cursesui ||| on_ui_exit	count=1
arg	if condition is fulfilled ||| condition	count=1
function	tensors ||| from regex	count=2
function	use a watch_fn ||| with watch	count=1
module_class	vocabulary [class_2] ||| [module_1] vocabulary [class_2]	count=4
arg	inputs e g ||| inputs pool_size strides padding	count=3
arg	path name ||| path	count=1
module	get a str ||| debug lib	count=1
function	probability of of drawing ||| probs	count=1
function	estimator ||| estimator	count=1
module	(e ||| python framework	count=2
function	[function_1] int32 scalar ||| [function_1] [function_2]	count=4
arg	values into num_shards ||| num_shards	count=1
arg	activations from the rnn ||| activations labels sequence_length	count=3
arg	tensors ||| tensor_names tensors tensor_slices	count=1
function	integer ||| integer weighted sparse column succeeds for dnn	count=1
arg	layer ||| layer	count=1
arg	of n ||| n	count=2
arg	richtextlines ||| lines font_attr_segs annotations	count=1
function	with ||| run with	count=1
function	root mean ||| streaming root mean	count=2
function	before each [function_2] ||| [function_1] [function_2]	count=1
class	choose a ||| chooser	count=1
arg	estimator using export_fn ||| eval_result checkpoint_path	count=1
arg	initialize the parameters for ||| num_units use_peepholes share_time_frequency_weights	count=1
function_arg	[function_1] given node ||| [function_1] [arg_2]	count=4
arg	context_def ||| context_def	count=2
function	placeholder for a ||| placeholder	count=1
module	creates training and ||| learn python learn	count=1
function	broadcast leading ||| broadcast matrix	count=1
class	multivariate normal distribution ||| multivariate normal diag plus low	count=1
module	the sense ||| contrib linalg python	count=5
function_arg	operation of [arg_2] ||| [function_1] a b [arg_2]	count=1
module	for node-status ||| python	count=1
function	depthwise 2-d convolution ||| depthwise conv2d	count=2
module	and return indexies ||| contrib learn	count=1
function	sentinel ||| get sentinel	count=1
function	tensor of the node ||| tensor	count=1
function	load session [function_2] ||| [function_1] [function_2]	count=4
function_arg	[function_1] the labels ||| [function_1] predictions [arg_2]	count=12
module	for a ||| python ops	count=2
module	a numpy array ||| keras	count=1
module	dict ||| tools	count=1
arg	check counts for proper ||| counts check_integer	count=1
function	this graph ||| as graph	count=1
class	of ||| dimension	count=1
function	[function_1] all pixels ||| [function_2] [function_1]	count=3
function	row ||| rows	count=1
module	dataset of ||| python learn datasets	count=1
function	[function_1] that a ||| [function_2] [function_1]	count=8
class	the ast ||| call visitor	count=1
function_arg	iff [arg_2] ||| [arg_2] [function_1]	count=3
function	tensorflow data ||| to data	count=1
arg	[arg_1] [arg_2] ||| [arg_1] capacity [arg_2]	count=2
function	of custom [function_2] ||| [function_2] [function_1]	count=1
arg	2 3 or 4 ||| features labels mode	count=1
arg	thumbnails and returns ||| thumbnails thumbnail_dim	count=1
function	input [function_2] ||| integer [function_2] [function_1]	count=2
function	gradient from the ||| take grad	count=2
function_arg	resnet-101 [arg_2] ||| [function_1] [arg_2]	count=1
function	servers ensures appropriate ||| servers one	count=1
function	delay between ||| secs	count=1
module	this is ||| python framework	count=2
arg	mapping ||| mapping	count=2
function	same values ||| fwd values	count=1
function	a fixed number ||| fixed size	count=2
function	[function_1] lr multipliers ||| [function_2] [function_1]	count=2
class	this ||| handle	count=1
function	a _sparsecolumn [function] ||| sparse column [function]	count=2
class	summing to one ||| exp relaxed one hot categorical	count=1
function	by sdcaoptimizer ||| sdca	count=1
function_arg	[function_1] loss ||| [function_1] [arg_2]	count=4
arg	observe screen ||| direction line_index	count=1
function	get the file ||| get tensor file	count=1
function	convert it into ||| array to	count=1
function	step true positives ||| sparse true positive at k	count=1
function	rnn ||| one2many rnn	count=1
arg	the output ||| input_tensors	count=2
function	scalars in a ||| count params	count=1
function	are sessionrunhook ||| check	count=1
class	the event ||| summary writer	count=2
arg	the value ||| value	count=1
function	conversion function that ||| conversion function	count=2
class	keys ||| mutable dense hash	count=1
module	the model's forward ||| contrib imperative examples	count=2
function	reduce it [function_2] ||| [function_1] [function_2]	count=2
function	embeddings ||| embedding	count=3
function	[function] input ||| maybe add [function]	count=1
module	tensors execute together ||| contrib batching python ops	count=1
function	[function_1] full ||| [function_2] [function_1]	count=3
arg	softmax_cross_entropy_with_logits ||| logits onehot_labels weights	count=1
module	[module_1] and ||| [module_1] python [module_2]	count=1
arg	precision@k of ||| k class_id	count=1
module	in ||| keras python keras	count=3
function	asset [function_2] ||| [function_2] [function_1]	count=4
arg	tensor t ||| t multiplier	count=1
arg	v to ||| v	count=1
function	[function_1] diagonal ||| [function_2] [function_1]	count=1
function	[function_1] default ||| [function_2] [function_1]	count=6
function	pearson correlation coefficient between ||| pearson correlation	count=1
function	list of ||| list of	count=1
arg	from tensors ||| tensors	count=1
function	command from ||| get command from	count=2
module	and previous output ||| contrib grid_rnn	count=1
module	the list of ||| ops losses	count=1
function	the domain ||| domain	count=1
function_arg	[function_1] [arg_2] ||| [function_1] epsilon [arg_2]	count=3
function	default input parsing using ||| default input	count=1
module	this ||| keras python keras wrappers	count=1
module	(e g "matmul") ||| framework	count=1
function_arg	[function_1] prior ||| [arg_2] [function_1]	count=2
function	determine the ||| predict classes	count=2
function	if all are ||| check hooks	count=1
function	return ||| index	count=1
class	[class_1] normal distribution ||| [class_2] [class_1]	count=2
arg	tensor with ||| tensor dtype name	count=1
module	exports ||| python learn utils	count=1
function	summary of ||| tf spec summary	count=1
function	creates a [function_2] ||| [function_1] [function_2]	count=1
function_arg	create [arg_2] ||| [function_1] factors [arg_2]	count=3
class	while loop ||| grad loop	count=1
function	[function_1] a list ||| [function_1] [function_2]	count=1
function	[function_1] phase ||| [function_2] [function_1]	count=4
function_arg	[function_1] cursesui ||| [function_1] graph run_metadata ui_type [arg_2]	count=1
function_arg	inference on [arg_2] ||| [arg_2] [function_1]	count=2
function	raw ||| get raw	count=1
function	[function_1] definite matrix ||| [function_2] [function_1]	count=1
function	bucket configuration ||| hash bucket	count=1
module	get all the tensors ||| contrib	count=1
class	none ||| indexed slices	count=1
module	cli ||| python debug cli	count=4
module	based ||| framework	count=1
module	load() ||| tensorboard	count=1
module	to instantiate this ||| ops	count=1
module	the training procedure ||| python losses	count=1
arg	these parameters or creates ||| shape dtype initializer	count=2
function	sparse ||| sparse recall at	count=1
function	nodes in ||| graph	count=1
module	that graph building doesn't ||| tensor_forest hybrid python	count=1
class	a 1 outcome (vs ||| bernoulli	count=1
function	a checkpoint from a ||| create checkpoint from	count=1
function	training with [function_2] ||| [function_2] [function_1]	count=14
arg	a tensor with ||| tensor dtype name optimize	count=1
class	the wrapper should work ||| debug wrapper session	count=1
module	print ||| python ops	count=1
function	which examples ||| which	count=1
function	[function_1] tensor ||| [function_2] [function_1]	count=43
module	return ||| learn	count=2
arg	experiment using featurecolumns ||| feature_columns	count=1
class	metrics ||| multi class head	count=1
function	[function_1] state of ||| [function_2] [function_1]	count=5
class	variables ||| variable	count=1
module	__init__ which ||| contrib distributions	count=1
function	the learning [function_2] ||| [function_2] [function_1]	count=1
function	a metagraphdef ||| import meta	count=1
arg	to x [arg_2] ||| [arg_2] [arg_1]	count=2
class	data [class_2] ||| [class_2] [class_1]	count=2
function_arg	[function_1] axis to ||| [arg_2] [function_1]	count=1
class	that produces values as ||| indexed slices	count=1
module	a batch of beams ||| seq2seq python ops	count=1
function	dictionary of custom objects ||| get custom objects	count=1
module	batch of beams into ||| ops	count=1
function	a single batch of ||| test on batch	count=1
function	[function_1] metagraphdef ||| [function_1] [function_2]	count=1
module	while [module_2] ||| [module_2] [module_1]	count=2
function	write ||| write image series	count=1
module	list of tensors that ||| framework python ops	count=1
arg	given features ||| input_fn	count=1
function	manager that makes ||| as	count=2
function_arg	[function_1] highwaywrapper for ||| [arg_2] [function_1]	count=1
function	linked ||| regex	count=1
function	classes ||| build standardized signature def	count=2
module	values will be produced ||| framework	count=1
module	transform that ||| contrib learn python learn dataframe transforms	count=1
arg	initialize the parameters for ||| input_size use_peepholes	count=1
function_arg	[function_1] from thumbnails ||| [function_1] [arg_2]	count=4
arg	tensors into a ||| cls tensors	count=1
function	the end then flatten ||| flat end	count=1
function	feeding into predict ||| predict	count=1
arg	between the labels and ||| labels	count=4
function	flip matrix to vector ||| flip matrix to vector	count=2
class	erosion ||| erosion	count=1
function	correlation coefficient ||| correlation	count=1
module	the event ||| python summary	count=1
arg	a string record to ||| record	count=1
function	loss calculation with weights ||| loss with weights	count=5
module	variable of the ||| python keras	count=2
function	an exception on bad ||| bad file	count=1
arg	dnnlinearcombinedregressor instance ||| model_dir weight_column_name linear_feature_columns linear_optimizer	count=1
function	[function_1] rotation of ||| [function_1] [function_2]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] var_names_to_values [arg_2]	count=3
function	as tf sparsetensor ||| tf sparse	count=2
function	computes the sum of ||| reduce sum	count=2
arg	to x [arg_2] ||| [arg_1] [arg_2]	count=2
function_arg	[function_1] many tensor ||| [arg_2] [function_1]	count=1
function_arg	constructs a [arg_2] ||| [function_1] [arg_2]	count=4
function	returns -grad * 2/sqrt ||| erfc grad	count=1
module	all ||| python ops	count=1
class	data and [class_2] ||| [class_2] [class_1]	count=2
function	from metric value operations ||| extract metric	count=2
function	a tf events ||| events	count=1
class	elements ||| sparse	count=1
function	to the maximum layer ||| maximum	count=1
function	multiple ||| multiple	count=1
module	dataset of only 1/ratio ||| learn datasets	count=1
module	[module_1] of x ||| [module_1] [module_2]	count=4
function	the kernel [function_2] ||| [function_1] [function_2]	count=3
module	tensors ||| contrib	count=1
module	then ||| distributions	count=1
function_arg	use for [arg_2] ||| [arg_2] [function_1]	count=1
module	the ||| framework python ops	count=1
function_arg	gather [arg_2] ||| [function_1] [arg_2]	count=1
module	a sequence-to-sequence ||| contrib legacy_seq2seq python ops	count=1
function	returns a description of ||| get	count=1
class	underlying ||| base	count=3
function_arg	[function_1] logdir ||| [arg_2] [function_1]	count=2
class	tensors in the dump ||| dump	count=1
function	name -> ||| guide index	count=1
arg	the vector inner ||| xs ys	count=1
function	performs dropout given the ||| recurrent dropout	count=1
function	set the shapes ||| set shape	count=1
module	training ||| learn	count=3
function	attribute [function_2] ||| [function_1] [function_2]	count=1
function	classification signature [function_2] ||| [function_1] [function_2]	count=1
function_arg	path [arg_2] ||| [arg_2] [function_1]	count=1
module	found in ||| tensorboard backend event_processing	count=1
function	of the process which ||| pid	count=1
arg	col batches ||| batch_size project_row projection_weights	count=2
arg	based on featurecolumns ||| columns_to_tensors feature_columns num_outputs	count=1
function	[function_1] for multi ||| [function_2] value [function_1]	count=8
function_arg	[function_1] the event ||| [arg_2] [function_1]	count=3
module	of keras ||| python keras	count=1
module	in the sense ||| contrib linalg python	count=2
module	two dimensions of ||| ops	count=1
arg	distributions ||| validate_args	count=6
function	[function_1] directory for ||| [function_1] [function_2]	count=3
function	true if the latest ||| latest	count=1
module	ids of a ||| ops	count=1
function	with [function_2] ||| python layers sparse column [function_1] [function_2]	count=2
class	of the dilation function ||| dilation	count=1
function	creates output ||| create output	count=2
function	[function_1] sparse tensor ||| [function_1] [function_2]	count=3
class	indicated ||| flow data frame	count=1
module	to make sure we ||| compatibility	count=1
function_arg	into string [arg_2] ||| [arg_2] [function_1]	count=1
function	graph for a ||| graph	count=1
class	the grad context ||| grad loop state	count=1
function	that makes ||| as	count=2
function	[function_1] overriding ||| [function_2] [function_1]	count=1
module	exports ||| contrib learn python learn utils	count=1
function	the initial [function_2] ||| [function_1] [function_2]	count=3
arg	for a linear operator ||| operator	count=1
function	_guideref ||| build guide	count=1
function	inverse ||| inverse	count=2
function	slot named "name" ||| get slot	count=1
class	categorical ||| categorical	count=1
arg	stddev loc [arg_2] ||| [arg_1] [arg_2] validate_args	count=1
function	returns the current position ||| tell	count=1
arg	y [arg_2] ||| [arg_1] [arg_2]	count=8
module_class	format of [class_2] ||| [module_1] [class_2] params	count=5
module	given directory ||| learn python learn utils	count=1
function	next ||| next	count=3
function	node ||| apply final node	count=1
function	[function_1] atrous convolution ||| [function_2] values [function_1]	count=6
function	pool along ||| pool along	count=8
function	designating a doc to ||| doc	count=1
module	read ||| learn learn_io	count=4
function	map from duplicate ||| duplicate of	count=1
arg	cells ||| conf cells	count=1
function	exact [function_2] ||| [function_1] [function_2]	count=2
function	create an instance ||| init	count=1
arg	[arg_1] and rate ||| [arg_1] [arg_2]	count=2
function	elements of a ||| elements	count=1
function	search [function_2] ||| [function_2] [function_1]	count=4
function	the ||| filter	count=2
module	which values ||| framework	count=1
module	check to make ||| tools	count=1
function	variables that end ||| get variables	count=1
function_arg	of context [arg_2] ||| [arg_2] [function_1]	count=1
arg	single tensor to ||| tensor	count=2
class	will ||| indexed slices	count=1
module_class	when this tensor ||| python client tensor	count=1
class	ops to ||| builder	count=1
arg	create a tf learn ||| num_threads enqueue_size	count=1
arg	processes ||| x y input_length output_length	count=1
function_arg	statically compute x ||| logical equal x	count=1
function	tf placeholder ||| make placeholder from dtype and	count=1
arg	tensor with validation ||| tensor tensor_slicing	count=1
arg	using an enter op ||| op grad	count=1
class	concrete ||| debug wrapper	count=1
function	column is [function_2] ||| [function_2] and sparse [function_1]	count=1
function	[function_1] value of ||| [function_1] [function_2]	count=1
class	in the represented dense ||| sparse	count=1
arg	value to variable's memory ||| value	count=1
module	returns ||| inputs queues	count=1
function	step on this ||| step	count=1
function_arg	an rnn [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	depending on [arg_2] ||| [arg_2] [function_1]	count=1
class	using ||| dnnlinear combined	count=1
function	regex search commands are ||| regex search	count=1
class	initializes ||| capture variable	count=1
function	exports the ||| export	count=1
function	defines [function_2] ||| [function_1] [function_2]	count=5
function	ops to save the ||| sharded save	count=2
module	from [module] ||| [module]	count=1
arg	row and column ||| rows	count=1
function	looks up embeddings of ||| embedding lookup	count=1
function	parameters and flops ||| get logged ops	count=1
function	kind [function_2] ||| [function_2] [function_1]	count=1
function	batch ||| batch	count=33
function_arg	a control [arg_2] ||| [arg_2] [function_1]	count=4
arg	given values are true ||| values	count=2
function	topologically-sorted list of ||| sorted nodes	count=1
function	weights of ||| weights	count=3
function	linked to ops that ||| ts	count=1
class	failed ||| error	count=2
class	without extra ||| utils test	count=1
arg	r^k, for ||| loc atol rtol validate_args	count=1
function	parse a ||| parse	count=1
arg	to structure of ||| apply_fn	count=1
function	to sparse tensor ||| to sparse value	count=4
function	predictive ||| predictive	count=1
function	at a given ||| at sensitivity	count=1
function	embedding and [function_2] ||| [function_2] [function_1]	count=3
module	reads ||| lib io	count=1
function_arg	recall [arg_2] ||| [function_1] [arg_2]	count=3
function	from ||| from config	count=2
function	[function_1] the value ||| [function_2] [function_1]	count=6
module	version with ||| learn python learn learn_io	count=1
function	it into ||| array to	count=1
module	rnn cell ||| rnn	count=1
arg	that maps a ||| mapping default_value name	count=1
function	[function_1] items ||| [function_1] [function_2] filterfn key	count=1
module	dictionary ||| preprocessing	count=1
function	[function_1] graph to ||| [function_2] [function_1]	count=4
module	filename linenumber for ||| python platform	count=1
arg	builder based on featurecolumns ||| feature_columns num_outputs	count=1
function	creates [function_2] ||| [function_1] [function_2]	count=6
module	file ||| python	count=1
function	[function_1] slot ||| [function_2] [function_1]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] notice to docstring [arg_2]	count=1
function	the tensorflow variables ||| vars	count=1
function	[function_1] trainer ops ||| [function_2] [function_1]	count=7
module	total ||| python ops	count=1
function	all the ||| all resources	count=1
arg	calculation in grad_fn ||| grad_fn	count=1
function	specified line ||| line	count=1
module	returns a non-reference dtype ||| python	count=1
function	feed dictionary used ||| init feed dict	count=2
module	the given object to ||| python	count=1
class	will sample data and ||| data feeder	count=1
function	tensor name from ||| tensor	count=1
arg	for subsequent __call__s ||| root_name	count=1
function	with a list of ||| with	count=1
function	init op used ||| init op	count=2
function	build a state ||| state	count=1
function	[function_1] with partitioned ||| [function_2] [function_1]	count=4
function	and feed conversion ||| conversion	count=1
function	of tensor ||| tensor	count=4
function	flow start ||| flow start	count=2
class	enqueue ops for the ||| queue runner	count=1
arg	an rnn state ||| explicit_dtype state	count=2
function_arg	[function_1] that broadcasts ||| [arg_2] [function_1]	count=4
module	reverse ||| contrib keras python keras	count=1
function	input key ||| preprocess input exprs	count=1
function	one ||| one	count=4
function_arg	[function_1] forward propagation ||| [arg_2] [function_1]	count=4
function	and close the ||| close	count=2
module	layers by ||| layers python layers	count=1
function	a unary operation ||| unary op	count=2
module	axes of ||| python ops	count=2
function	the tensors ||| filter	count=1
class	by this operator ||| operator identity	count=1
module	associated with tensorboard ||| tensorboard backend event_processing	count=2
function	deepcopy of sparse_column_with_vocabulary_file ||| sparse column vocabulary deep copy	count=1
module	each text ||| contrib keras python keras preprocessing	count=1
function	labels ||| node	count=1
function	a placeholder [function_2] ||| [function_2] [function_1]	count=8
function	verifies the values ||| output values	count=3
function	softmax [function_2] ||| [function_2] [function_1]	count=3
arg	input_tensors) from ||| node_index attr attr_name	count=1
function	depth [function_2] ||| [function_1] [function_2]	count=2
function	of tensor objects ||| n to tensor	count=2
function	[function_1] protocol buffer ||| [function_2] [function_1]	count=2
function	control flow context ||| control flow context	count=4
function	a tensorflow graph to ||| graph	count=1
module	core version with default ||| python learn	count=1
function	obj [function] element ||| as [function]	count=1
function	importance ||| importance	count=1
module	model ||| python ops	count=3
function	using [function_1] [function_2] together ||| python ops quantized distribution [function_1] [function_2] logcdf	count=1
function	is the diagonal of ||| diag	count=1
module	sparse slice of ||| python ops	count=1
class	the vocabulary after ||| categorical vocabulary	count=1
module	list of ||| contrib factorization python ops	count=4
function	input ||| process input	count=1
module	updates internal vocabulary ||| python keras preprocessing	count=1
function	update for linear-only model ||| linear only	count=1
function	of status [function_2] ||| [function_2] [function_1]	count=3
function	for proper ||| maybe	count=1
function	[function_1] pil ||| [function_2] [function_1]	count=1
arg	subgraph ||| y	count=2
function	dnn-linear combined ||| dnnlinear combined bug fixed	count=1
arg	linear weights in a ||| column columns_to_tensors embedding_lookup_arguments num_outputs	count=1
module	a table ||| feature_column	count=1
module	prepended to ||| contrib linalg python	count=1
module	a sequence of integers ||| keras preprocessing	count=1
module	of classes ||| contrib distributions python ops	count=2
function_arg	[function_1] conv + ||| [arg_2] [function_1]	count=1
function	inner cell ||| cell	count=1
function	noise-contrastive estimation [function_2] ||| [function_1] [function_2]	count=1
function	to ||| filter	count=1
class	tensor in the ||| tensor flow benchmark	count=1
function	from a node ||| get node	count=1
function	to [function_2] ||| [function_2] list [function_1]	count=1
function	format ||| format	count=1
function	predictions with respect ||| precision at top k	count=2
class	for the ||| lazy	count=1
function	but with zero gradient ||| stop gradient	count=1
module	mean and variance of ||| python ops	count=1
function_arg	[function_1] subsequent __call__s ||| [arg_2] [function_1]	count=4
function	weight with other ||| other	count=1
function	[function_1] trainer ||| [function_1] [function_2]	count=7
module	combines [module] feature ||| [module]	count=1
arg	cell ||| cell	count=4
module_class	number [module_1] [class_2] ||| [module_1] [class_2]	count=2
function	from csv [function_2] ||| [function_2] [function_1]	count=4
function_arg	[function_1] the predictions ||| [function_1] [arg_2]	count=3
function_arg	[function_1] this op ||| [function_1] [arg_2]	count=5
function	[function_1] shape info ||| [function_1] [function_2]	count=2
class	rmsprop ||| rmsprop	count=1
class	values ||| slices	count=1
function	[function_1] tf events ||| [function_1] [function_2]	count=5
function	relevant values for ||| relevant	count=1
function	a table row ||| table row	count=2
function	of this handle ||| resource handle	count=1
module_class	[module_1] underlying queue ||| [module_1] [class_2]	count=3
function	function ||| function	count=18
module	of arbitrary dimension ||| ops	count=1
function	returns the function ||| function	count=1
function	created [function_2] ||| [function_2] [function_1]	count=2
arg	parameters for an ||| input_size use_peepholes	count=1
module	is ||| python framework	count=3
module	which ||| contrib distributions python kernel_tests	count=2
module	and return indexies of ||| learn python learn	count=1
function	invalid ||| invalid number of	count=1
module	for determining ||| keras	count=1
class	returns a dimension that ||| dimension	count=1
arg	grad ||| op grad	count=3
function	[function_1] phase and ||| [function_1] [function_2]	count=4
function	[function_1] a key ||| [function_2] [function_1]	count=1
function	[function_1] mappers provided ||| [function_1] [function_2]	count=4
class	were provided as initialization ||| operator pdidentity	count=1
function	the attr ||| get attr	count=1
function	input shape ||| obtain input shape	count=2
arg	a riemann sum ||| predictions weights num_thresholds	count=1
function	this [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] to debug ||| [function_1] [function_2]	count=3
function	the state ||| flow state	count=1
module	core version with ||| learn learn_io	count=1
class	add ||| wrapper session	count=1
function_arg	line in [arg_2] ||| [arg_2] [function_1]	count=1
arg	riemann sum ||| predictions weights num_thresholds	count=1
function_arg	[function_1] sgv0 and ||| [function_1] [arg_2]	count=1
module	of a single ||| ops	count=3
module	the ||| distributions python ops	count=2
arg	threads to [arg_2] ||| [arg_2] [arg_1]	count=1
class	for debug tensor ||| debug wrapper	count=1
arg	with provided evaluation data ||| feed_fn	count=1
function	[function_1] parameters of ||| [function_1] [function_2]	count=2
function	x ||| plus b	count=1
function	have invalid ||| invalid number	count=1
function	save and ||| train save load	count=1
function	produces a slice ||| slice input producer	count=2
module_class	[module_1] sparse tensor ||| [module_1] [class_2]	count=2
function	[function_1] a solve ||| [function_1] [function_2]	count=1
arg	case ||| inputs cluster_idx_list cluster_centers total_counts	count=1
module	two lists of unique ||| ops	count=1
module	get an argspec string ||| tools api lib	count=1
function	the proto_type ||| get collection proto	count=1
arg	col ||| project_row	count=1
module	the vocabulary ||| preprocessing	count=1
function	step false positives for ||| sparse false positive	count=1
class	one step lstm ||| grid lstmcell	count=2
function	returns a shape ||| shape with rank at least	count=1
arg	tensor [arg_2] ||| [arg_2] [arg_1]	count=11
function	[function_1] registered priors ||| [function_1] [function_2]	count=1
function	get a str ||| str	count=1
function	[function_1] directory ||| [function_1] [function_2]	count=9
function	the legacy init op ||| legacy init op	count=1
function	[function_1] a categorical ||| [function_2] column [function_1]	count=2
module	of integers ||| contrib keras	count=1
function_arg	statically compute [arg_2] ||| [arg_2] [function_1]	count=1
module	file to disk ||| python	count=1
function	vector x to ||| vector to	count=3
class	by the pluginasset instance ||| asset	count=1
function_arg	tensor [arg_2] ||| [arg_2] [function_1]	count=6
function	the initial ||| initial	count=1
function	are sessionrunhook raises ||| hooks	count=1
arg	microbenchmark to ||| size iters	count=1
module	proto_type for ||| python framework	count=1
function	wrapped ||| stop gradient	count=1
arg	by normalizing ||| predictions labels normalizer	count=1
module	the network ||| python	count=1
arg	new loadbalancingstrategy ||| num_tasks load_fn	count=1
class	the queue when the ||| queue	count=1
function	that match the ||| ts	count=1
function	integers ||| texts	count=1
arg	d1 [arg_2] ||| [arg_2] [arg_1]	count=1
function	add legacy init ||| maybe add legacy init	count=1
arg	all steps ||| inputs noutput scope	count=1
function	a filename ||| checkpoint filename	count=1
module	matrix data ||| learn	count=1
function_arg	[function_1] a tensor ||| [function_1] [arg_2]	count=1
function	add nextiteration and back ||| add next and back	count=1
module	instance ||| python learn estimators	count=4
function	binary classification ||| logistic regression	count=1
function_arg	[function_1] given serialized ||| [function_1] example [arg_2]	count=1
function	for proper shape values ||| assert	count=1
class	most ||| command history	count=1
function	proto_type for ||| proto	count=1
function	specified line in ||| at line	count=1
class	from ||| menu	count=1
function	then ||| assert valid sample	count=1
arg	to the input ||| inputs rate	count=1
module	indexies of ||| preprocessing	count=1
function	attribute ||| attribute at	count=1
function	read sparsetensors from ||| sparse from	count=2
function	the trace ||| trace	count=1
class	construct student's [class_2] ||| [class_2] [class_1]	count=1
function	session ||| session	count=5
module	values then return tensor ||| ops distributions	count=1
class	the ||| indexed	count=2
arg	given node's output according ||| is_control	count=1
class	node ||| node	count=2
function	get legend for node-status ||| status label legend	count=1
function	by input ||| input	count=1
module	the input [module_2] ||| [module_2] [module_1]	count=1
function	arguments are [function_2] ||| [function_2] [function_1]	count=5
class	tests ||| dnnclassifier test	count=7
arg	w conjugate prior on ||| prior	count=1
class	we don't have a ||| test upgrade files	count=1
function	[function_1] along column ||| [function_1] [function_2]	count=4
function	asserts that two structures ||| assert	count=1
arg	to a tensor ||| dtype name	count=1
arg	a given sensitivity ||| predictions labels sensitivity weights	count=1
function	the regularization loss ||| unregularized loss	count=2
arg	common code [arg_2] ||| [arg_1] [arg_2]	count=1
module	of ||| backend	count=1
module	get a ||| python debug lib	count=1
class	end of the file ||| file io	count=1
arg	cells in ||| cells c_prev	count=1
function	to calculate a mean ||| mean	count=1
class	adds ||| saver builder	count=1
module	symbol name ||| docs	count=1
class	scalar deterministic ||| deterministic	count=1
function	regex search commands ||| regex search from	count=2
function	sessionrunhook raises ||| check hooks type	count=1
function	concatenation has no collisions ||| v2 has no collision	count=1
function	of the names of ||| names	count=1
function	return ||| maybe assert	count=1
module	and return indexies of ||| python	count=1
module	move ||| contrib distributions python ops	count=1
function_arg	[function_1] sgv0 ||| [arg_2] [function_1]	count=3
function	reopens the ||| reopen	count=1
function_arg	[function_1] graph element ||| [function_1] [arg_2]	count=9
arg	predictions ||| labels predictions	count=2
arg	fits internal statistics ||| augment rounds seed	count=1
arg	functions for collection_name ||| collection_name	count=1
function	items to a ||| items	count=1
function	get ||| filter	count=1
module_class	[module_1] a staging ||| [module_1] [class_2]	count=24
arg	convolution ||| padding stride	count=1
module_class	[module_1] normalization ||| [module_1] layer [class_2]	count=1
function_arg	the central [arg_2] ||| [function_1] crop image [arg_2]	count=1
class	with layer normalization ||| layer norm basic	count=1
module_class	of [class_2] ||| [class_2] [module_1]	count=1
arg	recall@k and [arg_2] ||| [arg_2] [arg_1]	count=4
class	get ||| stepper cli	count=3
arg	the given estimator ||| estimator	count=1
class	variable wrapper ||| variable	count=1
function	arg_scope can ||| arg scoped arguments	count=1
class	will be produced ||| slices	count=1
module	of a tensor ||| python ops	count=5
function_arg	names in [arg_2] ||| [arg_2] [function_1]	count=1
class	returns ||| writer cache	count=1
function	randomly flip ||| random flip	count=1
module	values and indices of ||| ops	count=1
function	linear ||| linear	count=6
function	for ||| node status label	count=1
module	vgg ||| contrib slim python slim nets	count=3
function	raw ||| raw	count=2
function	of indices into strings ||| index to string	count=2
function	a flow end ||| flow end	count=2
module	main docstring ||| tools docs	count=1
class	worker ||| walsmodel	count=1
function	the function that ||| function	count=1
arg	to the input ||| inputs	count=1
function	probably a tf events ||| tensor flow events	count=1
function	in ||| count total	count=1
module	x ||| ops	count=1
class	create ||| at step	count=1
arg	this name ||| name shape dtype	count=1
function	distance ||| distance	count=1
function	function for ||| get to proto function	count=1
arg	[arg_1] [arg_2] ||| [arg_2] proto_type to_proto [arg_1]	count=2
arg	wrapper and a target ||| target	count=1
module	and scores ||| python learn utils	count=1
module	and runs ||| python learn	count=1
module	or ||| python framework	count=2
class	values then return tensor ||| multinomial	count=1
function	operator for the sparseadd ||| sparse add grad	count=1
arg	idtablewithhashbuckets object ||| table num_oov_buckets hasher_spec	count=1
function	to run "operation" ||| run using	count=2
function	get all ||| filter ts from regex	count=1
function	of dtypes ||| dtypes	count=2
function	state flattening/reconstruction works for ||| multi rnnstate	count=1
function_arg	[function_1] node according ||| [function_1] [arg_2]	count=4
function	asset tensors if ||| asset tensors	count=1
module	the input dict ||| estimator inputs	count=1
function	the tensors linked to ||| filter ts from	count=1
module	1 outcome (vs 0) ||| python ops distributions	count=1
module	cross-entropy loss ||| losses	count=2
class	client ||| navigation history	count=1
function	node def from a ||| node from	count=1
function_arg	wrap a [arg_2] ||| [function_1] [arg_2]	count=1
class	in this cluster ||| cluster	count=1
module	the tensors at ||| graph_editor	count=1
arg	that maps a ||| default_value	count=1
arg	based on featurecolumns ||| feature_columns	count=1
module	__init__ which gets ||| contrib distributions python	count=1
arg	feature_spec ||| filepatterns feature_spec	count=1
function	[function_1] tensor not ||| [function_1] [function_2]	count=1
function	custom_getter ||| custom getter	count=1
function	required to ||| required space to	count=1
module	as input ||| learn python learn estimators	count=10
function_arg	< [arg_2] ||| [function_1] x [arg_2]	count=4
function	with the tokens ||| init tokens	count=1
function	dictionary and return ||| fit	count=1
function	containing all the ||| all resources	count=1
module	list of keras tensors ||| contrib keras python keras	count=1
arg	for an rnncell ||| cell	count=1
function	loads an image ||| load	count=1
module	rank-2 ||| contrib solvers	count=1
function_arg	hook [arg_2] ||| [arg_2] [function_1]	count=2
function	entropy ||| entropy	count=4
function	loss for multi ||| multi value loss	count=2
class	without extra layers before ||| utils test	count=1
function	shape ||| graph shape	count=2
module	in stop_gradient ||| contrib bayesflow python ops	count=1
module	cross-entropy loss ||| contrib losses python losses	count=1
function	[function_1] indexedslices ||| [function_1] [function_2]	count=5
module	be ||| python framework	count=2
module	shape values ||| ops distributions	count=1
function	use monkey-patching to capture ||| test capture	count=1
module	variable ||| python ops	count=4
class	to disk ||| summary writer	count=1
module	from ||| python estimator	count=1
arg	[arg_1] index ||| [arg_1] [arg_2]	count=1
function	two graphdefs are ||| equal	count=1
function	a single ||| test on	count=1
module	dataframe with only the ||| python learn dataframe	count=1
function_arg	weights to [arg_2] ||| [function_1] [arg_2]	count=1
function	update ops for ||| update	count=1
function	tensor or [function_2] ||| [function_2] [function_1]	count=2
function	mixture model gmm clustering ||| gmm	count=1
function	returns default [function_2] ||| [function_2] [function_1]	count=3
module	cli see the doc ||| debug cli	count=2
function	the output values ||| setup values	count=1
arg	a graphdef ||| input_graph_def input_node_names output_node_names placeholder_type_enum	count=1
module_class	table [class_2] ||| [module_1] [class_2]	count=2
function	no emitted edges ||| watching variable update ops sees updated values	count=1
function	of ops ||| ops	count=1
arg	kernel ||| kernel	count=1
function_arg	[function_1] [arg_2] ||| [function_1] cell [arg_2]	count=2
class	the directory ||| dump dir	count=1
module	do ||| contrib layers python layers	count=2
arg	opens file path and ||| path	count=1
module	function for ||| framework	count=3
function	given example ||| ops from example	count=1
function	the block [function_2] ||| [function_2] [function_1]	count=2
function	variable with this ||| variable	count=1
function	[function_1] given boundary ||| [function_2] [function_1]	count=3
function	values of variables ||| values	count=1
module	tensor s ||| python keras engine	count=6
module	summary ||| python summary	count=6
module	np ||| python ops	count=1
function	[function_1] columns present ||| [function_1] [function_2]	count=4
module	initialize a batch of ||| python ops	count=2
function	and an input_fn for ||| and input fn	count=1
function	two ||| two	count=1
module	variable ||| keras python keras	count=3
class	a dict ||| head	count=1
module	savedmodel ||| saved_model	count=1
module	build ||| contrib layers python layers	count=1
function	returns ||| proto	count=1
function	per step true positives ||| true positive at	count=1
function	tf cond that ||| smart cond	count=1
arg	subsequent __call__s ||| root_name	count=1
arg	x ||| x check_integer	count=1
function	a model_fn can ||| create model fn ops	count=1
module	and previous output tensors ||| grid_rnn python	count=1
function	return a postfix ||| tf spec structure	count=1
function	to a richtextlines object ||| text lines from rich	count=1
function	for a switch op ||| switch grad	count=1
module	indexies ||| learn python	count=1
module	transforms each text ||| contrib keras python	count=1
class	by this handle ||| handle	count=1
class	split ||| data frame	count=1
module	gamma ||| ops distributions	count=1
arg	handles quantizing a single ||| input_node	count=1
module	and session and ||| learn	count=1
arg	subscribes ||| control_cache	count=2
function	v^h, [function] ||| [function]	count=1
function	[function_1] [function_2] ||| [function_1] source [function_2]	count=3
function	the step at which ||| step	count=1
class	the model ||| dnncomposable model	count=2
arg	of sequences into a ||| sequences mode	count=1
function_arg	embedding [arg_2] ||| [arg_2] [function_1]	count=3
class	[class_1] weight column ||| [class_1] [class_2]	count=1
function	go forward one place ||| go forward	count=1
module	training and ||| contrib learn python learn estimators	count=1
function	learn the vocabulary ||| fit	count=1
function	to vectors by combining ||| as vector	count=1
arg	[arg] unit ||| tester [arg]	count=1
arg	between logits ||| logits	count=1
arg	provided 'op_log', and add ||| graph log_dir op_log run_meta	count=1
function	a tensor to use ||| tensor or dict	count=1
function	be integrated with estimators ||| test can created before minimize called	count=1
module	indexies of ||| contrib learn python learn preprocessing	count=1
function	tensor to ||| tensor	count=4
arg	of tensor text ||| tensor np_printoptions offset	count=1
function	[function_1] into strings ||| [function_1] [function_2]	count=4
function	the output values ||| setup values for	count=1
module	from a rank-2 tensor ||| contrib solvers python	count=1
module	for each component of ||| python ops	count=5
class	choose ||| chooser	count=1
function	locate a ||| locate	count=1
module	model ||| contrib framework python ops	count=1
function	restricted linear prediction ||| joint weighted sum from	count=1
function	creates an op ||| op	count=2
function	richtextlines object ||| rich text lines from rich	count=1
class	reload ||| event accumulator	count=1
function	log the in and ||| log op	count=1
function	step false positives for ||| sparse false positive at k	count=1
arg	microbenchmark to ||| target iters	count=2
function	initializes [function_2] ||| [function_1] [function_2]	count=2
module	that can be used ||| python layers	count=1
class	op ||| op	count=1
arg	linked to ||| ops	count=1
function	via ||| via	count=2
function	enter the [function_2] ||| [function_2] [function_1]	count=1
module	a given ||| learn python learn	count=2
module	core version with default ||| learn learn_io	count=1
function	and real [function_2] ||| [function_1] [function_2]	count=4
module	[module_1] the ||| [module_1] rnn python [module_2]	count=1
module	sequence of ||| contrib keras python	count=1
module	training and ||| learn python learn	count=1
arg	and rate parameters ||| rate	count=1
function	and real ||| real	count=2
function	a hook to ||| run hook	count=1
arg	sigmoid_cross_entropy_with_logits ||| logits multi_class_labels	count=1
function	step true positives ||| streaming sparse true positive	count=1
function_arg	[function_1] stored ||| [function_1] [arg_2]	count=3
function	search commands are recorded ||| search	count=1
function_arg	[function_1] by gen_parsing_ops ||| [function_1] [arg_2]	count=6
function	reads a [function_2] ||| [function_2] [function_1]	count=1
function	indices that [function_2] ||| [function_2] [function_1]	count=2
function	[function] tensor ||| test inconsistent [function] size raises	count=4
arg	of categories ||| x unused_y	count=1
arg	tensor with ||| name	count=1
arg	ops that match ||| ops	count=1
module	a function of ||| ops distributions	count=1
class	the underlying tensorflow ||| base session	count=2
function	graph ||| import graph def	count=1
module	the output ||| python	count=1
module	given factorization ||| factorization python	count=1
function_arg	column [arg_2] ||| [function_1] [arg_2]	count=1
function	copy to ||| copy	count=1
function	canonical ||| canonical	count=1
arg	regularizer ||| regularizer	count=1
module	to tensorflow/ ||| platform	count=1
function	returns the column factors ||| get col factors	count=1
class	the model ||| sequential	count=2
module	evaluating a ||| tensor_forest python	count=1
function	for test [function_2] ||| [function_2] [function_1]	count=1
arg	to handle syncreplicashook ops ||| is_chief num_tokens	count=1
class	concrete subclasses ||| debug wrapper session	count=1
function	[function_1] to a ||| [function_2] [function_1]	count=24
function	[function_1] multi value ||| [function_2] [function_1]	count=18
module	the vocabulary dictionary and ||| learn python learn preprocessing	count=1
function	from caller ||| merge caller	count=1
function	concat ||| concat	count=1
function	that maps input ||| preprocess input	count=1
function	a list of featurecolumns ||| to feature columns	count=1
class	tensor ||| builder	count=1
arg	exit op ||| op grad	count=1
module	if colocate_clip_ops_with_vars ||| contrib opt python	count=1
arg	of tensors ||| tensors	count=3
function	variable initialization ||| variable initialization	count=2
class	perform ||| pool test	count=2
function	a tensor to ||| parse data tensor	count=1
function	create a copy of ||| copy	count=1
function_arg	safe mean [arg_2] ||| [arg_2] [function_1]	count=1
function	the outputs in place ||| outputs	count=2
arg	and each cluster center ||| clusters distance_metric	count=1
module	output [module] ||| [module]	count=1
function	the root mean squared ||| streaming root mean squared	count=1
function	on other subclassses ||| interactive	count=1
function	the version functions ||| version	count=1
function_arg	[function_1] datasetdataprovider ||| [function_1] [arg_2]	count=1
function	and names that ||| and slice inputs	count=1
arg	given node ||| node	count=1
module	input ||| contrib cloud	count=1
function	and names ||| and slice	count=1
function	a summary of the ||| spec summary	count=1
function	sparse feature ||| sparse	count=1
function_arg	[function_1] x has ||| [arg_2] [function_1]	count=1
arg	threads to [arg_2] ||| [arg_1] [arg_2]	count=1
function	if ||| if	count=2
function	all events in the ||| all events	count=1
function	return the function ||| build function	count=1
function_arg	load and [arg_2] ||| [function_1] partition graphs [arg_2]	count=1
module	transforms ||| contrib keras python keras preprocessing	count=2
module	indices of the ||| python ops	count=2
function_arg	[function_1] to sequence ||| [function_1] [arg_2]	count=1
function	a layer based on ||| layer	count=1
module	dataset of ||| learn python learn datasets	count=1
function_arg	[function_1] summarywriter and ||| [function_1] [arg_2]	count=1
module	to __init__ which ||| contrib distributions python	count=1
function	non-batch kl ||| batch kl	count=1
class	tests ||| multi label sparse precision test	count=2
arg	inputs starting from the ||| inputs initial_cell_state initial_output dtype	count=2
function	rnn [function_2] ||| [function_2] [function_1]	count=5
function	representation of this handle ||| get resource handle	count=1
function	signature from the ||| signature	count=1
arg	a ||| name shape dtype initializer	count=1
module	evaluates ||| python training	count=1
function	at given ||| at	count=1
function	a table ||| table	count=1
arg	a graph element ||| element_name	count=1
function	with other columns ||| other columns	count=1
arg	runoptions ||| run_options node_name	count=1
function_arg	[function_1] column ||| [function_1] or parent names [arg_2]	count=3
function	ops ||| filter	count=1
module	to a ||| python training	count=1
arg	[arg_1] newpath ||| [arg_2] [arg_1]	count=3
function	a state saver for ||| static state	count=1
function	sure that the graph ||| graph	count=1
function	all are sessionrunhook raises ||| hooks type	count=1
function	values in ||| test output values	count=2
function_arg	function for building a [function_1] [arg_2] ||| tools docs reference resolver [function_1] [arg_2] doc_index	count=1
function	returns a shape ||| shape with rank at	count=1
function	for proper shape ||| assert	count=1
module	learn the vocabulary ||| contrib learn python learn preprocessing	count=1
class	wishart distribution [class_2] ||| [class_1] [class_2]	count=1
function	find latest ||| latest	count=1
class	normal distribution ||| normal diag plus low rank	count=1
module	returns ||| tools docs	count=1
function	index ||| index	count=3
function	input dimension ||| dim	count=1
function_arg	[function_1] a batch ||| [arg_2] [function_1]	count=3
module	sequence of ||| contrib keras python keras	count=1
module_class	[module_1] adam ||| [module_1] [class_2]	count=6
arg	builds model graph ||| features	count=4
arg	all steps and returns ||| noutput scope name	count=1
arg	compatiblity ||| loss_fns output_shapes	count=1
module	the op (e ||| python	count=1
function	session session ||| session	count=1
class	for binary ||| binary	count=1
class	opdefs from ||| def library	count=1
function	produce the same values ||| fwd values	count=1
function	should trigger ||| should trigger	count=2
function	computes sin ||| sin	count=1
function	[function_1] [function_2] type ||| [function_2] [function_1]	count=2
function	include classes ||| build standardized signature def classification3	count=1
function	recorded in command history ||| from command history	count=1
function	product across ||| prod	count=1
module_class	[module_1] session ||| [module_1] [class_2]	count=4
function	other [function_2] ||| [function_2] [function_1]	count=2
module	batch ||| contrib keras python keras	count=1
function	hooks ||| hook	count=1
function	graph ||| prepare graph for ui	count=1
class	an ||| op	count=1
function	or backward ||| ndlstm	count=1
function	a rank rfft ||| for rfft	count=1
function	log softmax ||| log softmax	count=2
arg	in labels ||| labels k	count=1
function	adds the root ||| add prefix	count=2
function	default image [function_2] ||| [function_1] [function_2]	count=2
function	implies ||| from	count=1
arg	often predictions ||| predictions	count=1
function	backprop [function_2] ||| [function_2] [function_1]	count=2
arg	the data feeder ||| x_shape y_shape n_classes batch_size	count=1
arg	the appenddocstring object ||| additional_note kwargs_dict	count=1
arg	different thresholds on ||| labels thresholds	count=2
function	[function_1] names haven't ||| [function_2] [function_1]	count=3
module	dimensions of this ||| python ops	count=2
arg	tensor representing ||| name	count=1
function	2 health ||| health	count=1
module	of losses ||| losses python losses	count=1
arg	[arg] unique ||| [arg]	count=1
function_arg	rank irfft [arg_2] ||| [function_1] [arg_2]	count=1
class	hook to ||| sync replicas optimizer hook	count=1
class	the tensor ||| sparse tensor	count=1
module	session and runs ||| learn python learn	count=1
class	creates ||| mutable hash table	count=1
module	writes ||| learn estimators	count=1
arg	functional interface ||| inputs filters kernel_size strides	count=1
module	sum ||| contrib layers python layers	count=1
function	save ||| save	count=9
function	feed dictionary ||| init feed dict	count=2
arg	externally defined ||| loss_collection	count=1
module	systems of equations ||| linalg python ops	count=1
arg	recall@k and precision@k ||| predictions_idx class_id	count=1
function	expected results for gamma ||| gamma	count=1
module	ops created ||| ops	count=1
function	function ||| func	count=1
function_arg	observations [arg_2] ||| [function_1] [arg_2]	count=1
function	state ||| control flow state	count=1
arg	according to [arg_2] ||| [arg_1] [arg_2]	count=1
function	to a matrix ||| to matrix	count=3
arg	the output ||| tensor_in_sizes glimpse_sizes	count=1
function	invalid ||| test invalid number of	count=1
function	[function_1] for dnn-only ||| [function_1] [function_2]	count=2
function	log p x ||| log	count=1
function	projects the column factors ||| project col factors	count=1
function	a reference ||| ref	count=1
module	given ||| learn python learn estimators	count=2
function	inputs ||| inputs tensor info from meta	count=1
arg	numeric labels ||| labels	count=1
function	tile the ||| tile	count=1
module	valid command ||| debug cli	count=1
function	return dict symbol name ||| index	count=1
module	compilation of ||| contrib compiler	count=2
function_arg	name [arg_2] ||| [arg_2] [function_1]	count=3
arg	specified by rnncell cell ||| cell	count=1
function	per step false ||| streaming sparse false	count=1
function_arg	[function_1] expected_shape ||| [function_1] [arg_2]	count=1
module	x + ||| ops	count=1
class	reservoir using a ||| reservoir	count=1
function	to the next ||| next	count=1
function_arg	[function_1] [arg_2] ||| [function_1] back prop accumulator [arg_2]	count=1
function	one [function_2] ||| [function_1] [function_2]	count=4
module	batch [module_2] ||| [module_2] [module_1]	count=2
module	distribution ||| distributions	count=2
class	the event ||| summary	count=1
module	of a tensor ||| ops	count=5
function	[function_1] structure ||| [function_2] [function_1]	count=2
function	tuple ||| create tuple	count=1
function_arg	[function_1] sequences ||| [arg_2] [function_1]	count=1
function	[function_1] [function_2] within ||| [function_1] [function_2] filterfn key	count=1
module	loss using tf nn ||| python losses	count=1
function	rows indicated ||| select rows	count=1
module	gets the list of ||| ops losses	count=1
module	used ||| python layers	count=2
module	transforms each text ||| contrib keras python keras	count=1
arg	of a column ||| column	count=1
function	for dnn-only ||| dnnonly	count=1
arg	given serialized ||| serialized_example item_handler image_format	count=1
function	from a numpy ||| from numpy	count=3
arg	a multiple of num_unroll ||| num_unroll	count=1
function	that repeat ||| repeat	count=1
function	returns whether ||| is	count=5
module	and ||| python learn utils	count=2
module	dictionary and return ||| preprocessing	count=1
arg	ops and the "passthrough" ||| inside_ops passthrough_ts	count=1
function	grublockcell [function] ||| training gru block [function]	count=1
class	to its outputs ||| residual	count=1
function	[function_1] unary ||| [function_2] [function_1]	count=1
function	sessionlog ||| session log	count=1
class	eventaccumulator ||| mocking event	count=1
function	[function_1] op tensor ||| [function_2] [function_1]	count=3
module	name ||| tools docs	count=2
function	the dump path and ||| dump path and	count=1
class	[class_1] graph ||| [class_1] [class_2]	count=1
class	the event [class_2] ||| [class_1] [class_2]	count=2
class	adds ||| projector plugin asset	count=1
class	model for a fixed ||| model	count=1
function	sparsecolumns accept dense scalar ||| column accepts dense scalar	count=1
function_arg	merge op [arg_2] ||| [function_1] op [arg_2]	count=2
function	defines the full covariance ||| define full covariance	count=1
function	to use based on ||| get string to hash	count=1
function	sessionrunhook raises ||| check hooks	count=1
arg	xs by [arg_2] ||| [arg_1] [arg_2]	count=1
function_arg	[function_1] input and ||| [function_1] [arg_2]	count=3
function	loss for multi value ||| single value loss	count=1
function	synthetic ||| make dataset	count=1
module	bijector ||| ops distributions	count=1
function_arg	distribution as labels ||| distribution labels	count=2
class	of the ||| indexed slices	count=1
function	debug urls ||| debug urls	count=2
function	value as ||| value	count=1
function	[function_1] a sequence ||| [function_2] [function_1] by	count=1
function	extend the list ||| extend	count=1
function	assigns non-overlapping lanes for ||| assign lanes	count=1
module	we don't have ||| compatibility	count=1
function	a full name ||| full	count=1
function	the proto_type for ||| get	count=1
function	menuitem from the ||| caption to item	count=1
module_class	[module_1] prop ||| [module_1] [class_2]	count=3
function	of features ||| features	count=4
arg	protocol buffer with images ||| tensor max_images collections	count=1
class	the dilation ||| dilation test	count=1
function	[function_1] enqueue ||| [function_2] [function_1]	count=3
function_arg	[function_1] riemann sum ||| [arg_2] [function_1]	count=4
function	the saver ||| saver	count=1
function	grad state for ||| grad state	count=1
arg	or fn2() based ||| fn1 fn2	count=1
function	extract command from ||| get command from	count=2
function	life time ||| enter	count=1
class	per example ||| gmm algorithm	count=1
module	learn ||| python learn	count=1
arg	a cell ||| cell output_size	count=1
module	to make sure ||| compatibility	count=1
module	function of x ||| ops distributions	count=1
function	exit ||| exit	count=4
class	grad state for the ||| control flow state	count=1
function	creates ||| create train	count=1
function_arg	given estimator [arg_2] ||| [function_1] contract [arg_2]	count=3
module	dataset of only 1/ratio ||| learn python learn datasets	count=1
function_arg	the op that performs [function_1] [arg_2] ||| [function_1] [arg_2]	count=3
function	download the data ||| download	count=1
function	the current [function_2] ||| [function_1] [function_2]	count=2
function	runoptions for ||| run options	count=1
arg	loaded from a checkpoint ||| graph output_dir checkpoint_path eval_dict	count=1
module	values then return ||| python ops distributions	count=1
module	store as self _value ||| bayesflow python ops	count=1
function	vocabulary file ||| vocabulary file	count=1
function	a [function_2] ||| [function_1] [function_2]	count=1
function	collection_name ||| proto function	count=1
arg	a riemann sum ||| predictions labels weights num_thresholds	count=1
function	header for use with ||| header from ops	count=1
module	version with default shuffle ||| learn python learn	count=1
module	returns a ||| contrib learn python learn dataframe	count=1
function	cross entropy between ||| cross entropy with	count=1
arg	cell ||| cell output_size activation	count=1
function	[function_1] save ||| [function_1] [function_2]	count=1
function_arg	[function_1] categoricalprocessor instance ||| [function_1] [arg_2]	count=1
class	exit ||| flow state	count=1
module	sum of ||| framework	count=1
class	of the ||| indexed	count=1
function	from arguments ||| from args	count=4
function_arg	checkpoint [arg_2] ||| [function_1] [arg_2]	count=3
module	return the loaded module ||| tensor_forest hybrid python	count=1
function	for proper shape ||| maybe assert	count=1
function	list of ops used ||| ops used	count=1
module	get an argspec ||| lib	count=1
function	[function_1] spec ||| [function_2] [function_1]	count=3
arg	a 2-d matrix based ||| input_matrix	count=2
module	a summary ||| python summary	count=3
function	>= 0, treating 0 ||| safe shape	count=1
function	conversion [function_2] ||| [function_1] [function_2]	count=4
function	generates test data to ||| test data	count=1
arg	[arg_1] layer ||| [arg_2] [arg_1]	count=2
arg	[arg_1] b for ||| [arg_2] [arg_1]	count=2
function_arg	[function_1] input feature_columns ||| [arg_2] [function_1]	count=1
function	read queue [function_2] ||| [function_1] [function_2]	count=3
function	load a [function_2] ||| [function_1] [function_2]	count=4
arg	initialize the parameters for ||| num_units use_peepholes initializer num_proj	count=1
function	[function_1] the slice ||| [function_1] save [function_2]	count=1
module	a [module] ||| [module]	count=2
function	boots 3 servers ensures ||| spec propagation three servers one cluster	count=1
function	bundle [function_2] ||| [function_1] [function_2]	count=3
class	learn ||| categorical processor	count=2
function	its initial clean state ||| reset	count=1
function	broadcast leading dimensions ||| broadcast	count=1
arg	[arg_1] var beta ||| [arg_1] [arg_2]	count=3
function	a full name e ||| full path	count=1
module	quantized ||| distributions python ops	count=1
function	print the ||| print	count=2
arg	returns range(0 rank x ||| x	count=1
arg	[arg_1] var ||| [arg_1] [arg_2]	count=5
function	the tensors linked ||| ts from	count=1
function	the collection with the ||| collection ref	count=1
function	sentinel [function_2] ||| [function_1] [function_2]	count=4
function_arg	[function_1] of value ||| [arg_2] [function_1]	count=1
function	batch vector [function_2] ||| [function_1] [function_2]	count=6
function	inputs for sequence ||| sequence	count=1
module	of a single ||| python ops	count=3
function	saves ||| save	count=1
function	block that [function_2] ||| [function_2] [function_1]	count=4
module	returns a tensor ||| feature_column	count=1
function	returns whether tensorflow ||| is	count=1
function	tensors linked to ops ||| from	count=1
arg	a and b ||| a b	count=4
function	computes the product ||| prod	count=1
function	creates an ||| run	count=1
function	data/logdir endpoint ||| logdir	count=1
module	the estimator for a ||| python	count=1
arg	a target ||| target decorator_func	count=1
module	the given list of ||| contrib slim python	count=1
function	ops that have no ||| no	count=1
function	slice an ||| slice	count=1
function	inputs of ||| inputs tensor	count=1
function	handle visiting a ||| visit	count=1
function	device of a node ||| node device	count=1
function	summary of the ||| spec summary	count=1
function	[function_1] with a ||| [function_2] [function_1]	count=8
function	condition ||| condition	count=2
function	to gradient for ||| grad	count=1
function_arg	[function_1] a visitor ||| tools docs reference resolver [function_1] [arg_2] doc_index	count=1
function_arg	determines [function_1] [arg_2] input length ||| [function_1] [arg_2]	count=1
function	the most recent savedmodel ||| get most recent	count=1
arg	range(0 rank x ||| x axis	count=1
function	classification using matrix data ||| classification training	count=1
class	this operator to ||| operator	count=2
function_arg	to a [arg_2] ||| [function_1] sparse [arg_2]	count=1
arg	through ||| float_graph_def input_map output_names log_graph	count=1
function	[function_1] given estimator ||| [function_1] [function_2]	count=1
function	that match the ||| ts from	count=1
function	the health ||| health	count=1
module	instantiates a ||| keras python keras	count=1
function	[function_1] arguments are ||| [function_1] [function_2]	count=18
function_arg	precision values [arg_2] ||| [function_1] [arg_2]	count=1
arg	important bits of ||| original encoded	count=1
function	random input tensor ||| random input tensor	count=3
module	mapping of name ||| ops	count=1
function	performs dropout ||| dropout	count=1
arg	a variable ||| variable	count=1
function	sparsesoftmax ||| sparse softmax grad	count=1
class	the layer ||| layer	count=2
class	tensor in the given ||| tensor flow benchmark	count=1
function_arg	end [arg_2] ||| [arg_2] [function_1]	count=2
function	[function_1] vector with ||| [function_2] [function_1]	count=7
function	the init ||| init	count=1
module	using ||| learn	count=3
function	value models ||| value	count=4
function	2d convolution with separable ||| separable conv2d	count=1
arg	a dnnlinearcombinedregressor instance ||| model_dir weight_column_name linear_feature_columns linear_optimizer	count=1
function	nodes that ||| remove training nodes	count=1
function	checkpoint filenames [function_2] ||| [function_2] [function_1]	count=2
module	dictionary and return ||| contrib	count=1
function_arg	activations [arg_2] ||| [function_1] [arg_2]	count=2
function	print ||| tf spec print	count=1
module	typeerror otherwise ||| estimator	count=1
class	model ||| sequential	count=2
function	initialize a param to ||| assign fetch	count=1
function	for training for mini ||| mini	count=1
arg	labels ||| labels dim weights	count=1
function	navigate to the main ||| test request main	count=1
function	feed types used ||| feed types	count=1
function	return the master ||| master	count=1
module	to ||| distributions python ops	count=2
function	from tensor [function_2] ||| [function_2] [function_1]	count=1
function	without the regularization loss ||| unregularized loss	count=1
function_arg	to loop [arg_2] ||| [function_1] [arg_2]	count=2
arg	an image ||| image k	count=1
function	create synthetic boolean_labels ||| synthetic	count=1
function	completion items to ||| items	count=1
function	[function_1] methods inside ||| [function_1] [function_2]	count=1
arg	files given a feature_spec ||| filepatterns feature_spec has_header	count=1
function	transposes a ||| sparse transpose	count=1
class	this operator to ||| operator identity	count=1
function	a watch_fn ||| dumping with watch fn	count=1
module	sparse slice of ||| ops	count=1
class	a variable ||| variable	count=3
module	the provided ||| kernel_methods python	count=1
function	ready [function_2] ||| [function_1] [function_2]	count=3
arg	predictions with ||| predictions weights metrics_collections	count=1
module	training and inference ||| learn estimators	count=1
class	whether this plugin ||| projector plugin	count=1
function	line in a ||| line	count=1
class	of metadata ||| embedding metadata	count=1
function	defines the diagonal ||| define diag	count=3
function	tf cond that ||| cond	count=1
function	list ||| test list	count=4
class	metadata values ||| embedding metadata	count=1
function	tf configproto that ensures ||| rpcconfig	count=1
arg	docstring for second ||| unused_arg	count=1
module	linked to ||| contrib graph_editor	count=1
arg	[arg_1] device device ||| [arg_2] [arg_1]	count=3
function	of evaluation metric ops ||| eval metric ops	count=1
function	all events ||| all events	count=2
arg	condition and body to ||| body	count=1
class	lstm [class_2] ||| [class_2] [class_1]	count=1
class	with the specified ||| test	count=1
module	the vocabulary dictionary ||| preprocessing	count=1
function_arg	export [arg_2] ||| [arg_2] [function_1]	count=1
module	extract ||| learn python learn datasets	count=1
module	of the ||| factorization python ops	count=1
class	the ||| categorical	count=1
function	reshape the input ||| reshape input	count=1
function	> 0 ||| positive	count=1
module	returns ||| python keras	count=1
arg	wait for threads ||| threads	count=1
function	recent ||| recent	count=2
function_arg	[function_1] the new_export_strategies ||| [arg_2] [function_1]	count=3
module	returns number of dimensions ||| contrib distributions python ops	count=2
module	retrieve ||| backend event_processing	count=1
arg	op is a ||| op	count=2
function	resnet_v1() for ||| v1	count=3
arg	architecture ||| include_top weights input_tensor input_shape	count=1
function	local [function] ops ||| get local [function]	count=1
function	a shape ||| shape	count=2
function	[function_1] the dtype ||| [function_1] [function_2]	count=1
module	learn the ||| contrib learn	count=1
arg	thumbnails and ||| thumbnails	count=1
module	invert ||| python kernel_tests	count=1
class	a tensor [class_2] ||| [class_1] [class_2]	count=2
arg	prior on ||| prior	count=1
arg	a target ||| target decorator_func decorator_name decorator_doc	count=1
class	creates the function ||| function	count=1
class	test ||| analyzer clisimple mul add test	count=1
arg	dimension to ||| dim	count=1
function_arg	[function_1] inclusion in ||| [function_1] [arg_2]	count=2
function	[function_1] batch and ||| [function_2] [function_1]	count=3
arg	[arg] given input ||| input_length filter_size [arg]	count=2
function_arg	to a [arg_2] ||| [arg_2] [function_1]	count=2
function	operations from [function_2] ||| [function_2] [function_1]	count=6
function	it is ||| is	count=1
function	get all the ||| from regex	count=1
function_arg	minimum [arg_2] ||| [function_1] [arg_2]	count=1
class	the debug tensor ||| session debug	count=1
function	tensor of ||| tensor	count=2
function	models from ||| from	count=1
module	sequence of ||| contrib keras python keras preprocessing	count=1
function	dropout or recurrent dropout ||| dropout	count=1
function	feature column filled with ||| column	count=1
function	box key validator callback ||| on	count=1
class	wrapper ||| wrapper	count=2
function	specificity at a given ||| specificity at sensitivity	count=1
function	state names for an ||| state names	count=1
function	tall output ||| tall output end home	count=1
module_class	[module_1] proximal ||| [module_1] [class_2]	count=6
module	with integer ||| contrib learn python learn	count=1
arg	to update is_row_sweep_var and ||| processed_row_indices processed_col_indices train_op	count=1
function	dictionary from ||| as dict	count=1
class	a table ||| table	count=3
function	an rnn specified by ||| raw rnn	count=1
function	kind [function_2] ||| [function_1] [function_2]	count=1
function	domain of ||| domain	count=1
arg	op ||| scope op func	count=1
function	model's input ||| obtain input	count=1
function	process ranges ||| ranges	count=1
function	runs a single epoch ||| one epoch	count=1
module	of dimensions needed to ||| python ops	count=1
function_arg	rank rfft [arg_2] ||| [function_1] [arg_2]	count=1
function	to row [function_2] ||| [function_2] [function_1]	count=1
function	function and not ||| function	count=1
module	which properly compares two ||| contrib distributions python kernel_tests	count=1
arg	for the given ids ||| sp_ids sp_weights partition_strategy	count=1
module	return indexies ||| preprocessing	count=1
arg	[arg_1] old_getter internally ||| [arg_2] [arg_1]	count=1
arg	tf namespace ||| py_modules do_not_descend_map	count=1
function	[function_1] atrous convolution ||| [function_2] [function_1]	count=18
module	used by the ||| layers python layers	count=1
module	in a list of ||| python ops	count=1
arg	the parameters ||| num_units use_peepholes initializer num_proj	count=1
module	return a list of ||| contrib framework python ops	count=1
arg	applying layer [arg_2] ||| [arg_2] [arg_1]	count=1
function	learn the vocabulary dictionary ||| fit	count=1
function	predict step ||| predict	count=1
function	log the in ||| log op	count=1
class	that failed if known ||| op error	count=1
function	real valued ||| optimizer real valued	count=1
function	save [function_2] ||| [function_2] [function_1]	count=3
function	smartset() calls restoring things ||| unset all	count=1
arg	b ||| b	count=3
function	[function_1] latest event ||| [function_2] [function_1]	count=2
function	build an input_fn ||| build	count=2
function	the underlying node ||| node	count=2
arg	of symbols to a ||| ids vocab_size embed_dim	count=1
arg	for an ||| num_units target_column problem_type	count=1
function_arg	[function_1] name ||| [function_1] [arg_2]	count=1
function	get an operatorpdidentity to ||| get	count=1
function	default graph ||| graph	count=1
function	[function_1] ui ||| [function_1] [function_2]	count=1
module	to ||| python learn estimators	count=1
function	row ||| row	count=4
module	with default ||| learn python learn learn_io	count=1
module	of two ||| python ops	count=1
module_class	s of [class_2] ||| [class_2] [module_1]	count=6
module	tensor s of ||| contrib keras python keras engine	count=6
arg	activations from ||| activations labels sequence_length	count=3
arg	verifies that deepconv2d ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
class	blocks until the server ||| server	count=1
function	names of variables within ||| names	count=1
function	provided have invalid type ||| test invalid number of classes	count=1
function	true positives for ||| streaming sparse true positive at	count=1
function	start line of ||| start	count=1
class	new interactive ||| interactive	count=1
module	version with ||| learn python learn	count=1
function	get all the ||| ts	count=1
class	accumulator ||| accumulator base	count=1
module	variable ||| framework python ops	count=1
class	ui ||| curses	count=1
module	with ||| python	count=1
arg	the given rank ||| rank	count=1
arg	protocol buffer with ||| collections	count=3
module	shape [module_1] [module_2] ||| [module_2] [module_1] reshape	count=2
arg	value value is ||| value	count=1
class	creates fetch mapper that ||| mapper	count=1
module_class	[module_1] these student's ||| [module_1] vector [class_2]	count=1
function	[function_1] interval ||| [function_2] [function_1]	count=1
function	op used ||| op	count=2
function	be ||| prepare or wait for	count=1
function	proto_type for ||| type	count=1
function	[function_1] paths ||| [function_2] [function_1]	count=3
function_arg	true positives [arg_2] ||| [function_1] labels predictions_idx [arg_2]	count=4
function	[function_1] variables ||| [function_1] [function_2]	count=21
function	all health ||| health	count=1
function	a default [function_2] ||| [function_2] [function_1]	count=4
function	the run ||| cli for run	count=1
function	returns the proto_type ||| get collection proto type	count=1
function	write a ||| write image	count=1
function	legend for ||| label legend	count=1
arg	contents [arg] ||| [arg]	count=2
function_arg	returns the [arg_2] ||| [arg_2] [function_1]	count=4
function	a subset [function_2] ||| [function_2] [function_1]	count=1
function	input tensor ||| integer tensor input	count=1
arg	given regex ||| ops regex	count=1
module	file ||| python summary	count=2
function	the ||| get collection proto type	count=1
function	[function_1] rank of ||| [function_1] [function_2]	count=1
function	into raw params used ||| features to raw params	count=1
function	a list of ||| rich line list	count=1
module	which properly compares ||| contrib distributions python kernel_tests	count=1
function	to use based on ||| string to hash	count=1
function	with as_iterable=false ||| as iterable false	count=2
function	[function_1] tensorflow graph ||| [function_1] [function_2]	count=4
class	test ||| tensorboard server test	count=4
module	indices [module] ||| [module]	count=1
function_arg	[function_1] storing the ||| [arg_2] [function_1]	count=3
function	a string ||| string	count=3
function	evaluation metrics that ||| metrics	count=1
arg	thumbnails and returns the ||| thumbnails	count=1
module	events ||| tensorboard backend event_processing	count=9
arg	precision@k of ||| predictions_idx weights metrics_collections	count=1
function	computes gradients for "op" ||| gradient	count=1
arg	extracts ||| input_ begin end strides	count=1
function	has ||| v1 has	count=1
function	a loop invariant ||| loop constant enter	count=1
function	embedding ||| embedding	count=10
function	an example proto ||| example proto	count=1
module	get the names of ||| debug lib	count=1
arg	and returns it ||| value dtype name	count=1
class	head for ||| head	count=2
module	dimensional version of ||| contrib learn python learn ops	count=1
function	the export [function_2] ||| [function_1] [function_2]	count=3
function	delete the ||| delete	count=1
arg	[arg_1] batches ||| [arg_2] [arg_1]	count=17
module	[module_1] provided ||| [module_2] [module_1]	count=1
function	op that ||| op	count=1
function	dictionary and ||| fit	count=1
function	tensors ||| ts from regex	count=2
module	output [module] op ||| [module]	count=1
function_arg	[function_1] would ||| [arg_2] [function_1]	count=2
class	update ||| local clidebug wrapper session	count=1
function_arg	estimator [arg_2] ||| [arg_2] [function_1]	count=3
function	tensors linked to ||| filter ts from regex	count=1
module	the given subgraph ||| contrib graph_editor	count=1
function	arguments of ||| args	count=1
function	[function] = ||| [function]	count=1
arg	creates a new ||| name shape collections validate_shape	count=1
arg	maps activations from ||| activations labels	count=3
function	gradients of "loss" ||| gradients	count=1
arg	model [arg_2] ||| [arg_2] [arg_1]	count=1
class	test ||| square linear operator derived class test	count=1
class	a hparams object to ||| hparams	count=1
function	create ||| create analyzer ui	count=1
arg	to axis in x ||| x axis x_ndims	count=1
function	that makes this object ||| as	count=1
function	added to index of ||| add to index	count=1
module	and feed ||| contrib learn python learn	count=1
function	[function_1] servers ||| [function_2] [function_1]	count=1
module	dictionary and ||| learn python learn	count=1
class	for proper shape values ||| dirichlet multinomial	count=1
function	less than the ||| below	count=1
function_arg	merge op [arg_2] ||| [function_1] [arg_2]	count=1
function	applies the sum ||| sum	count=1
arg	sequence model ||| encoder_cell decoder_cell	count=1
function	batch of ||| train on batch	count=1
module	names of ||| python ops	count=1
arg	dims ||| cls dims	count=1
module	for determining [module_2] ||| [module_1] [module_2]	count=4
function	for an embedding ||| for embedding	count=2
class	batch ||| batch	count=1
function	[function_1] least the ||| [function_2] [function_1]	count=4
arg	device_string ||| device_string	count=1
class	tensors ||| bounding box	count=1
class	disk ||| summary writer	count=1
function	featurecolumns [function_2] ||| [function_2] [function_1]	count=4
function	[function_1] types used ||| [function_2] [function_1]	count=4
function	underlying node [function_2] ||| [function_1] [function_2]	count=2
function	audio ||| audio series	count=1
function	predefined collection [function_2] ||| [function_2] [function_1]	count=1
arg	the denominator ||| denominator name	count=2
arg	directory or ||| ckpt_dir_or_file	count=1
module	that graph building ||| tensor_forest hybrid python	count=1
function	tensors to a ||| tensors to	count=1
function	asserts whether [function_2] ||| [function_1] [function_2]	count=1
module	the op (e g ||| framework	count=1
function_arg	fakequantwithminmaxvars [arg_2] ||| [function_1] [arg_2]	count=1
function	health ||| health	count=5
module	returns ||| framework	count=7
function	[function_1] values ||| [function_2] [function_1]	count=2
function	recorded in command ||| command	count=1
module	with ||| contrib	count=1
module	map ||| contrib keras python keras	count=1
function	attention ||| attention	count=3
function	of strings into int64 ||| string to index	count=1
function	vs grucell ||| vs	count=2
module	returns ||| python	count=12
function	featurecolumns and [function_2] ||| [function_1] [function_2]	count=3
arg	a tensor with all ||| tensor	count=1
module	the op ||| python	count=1
module	the cli ||| python debug cli	count=2
function	computes [function] ||| [function]	count=1
function	axis order ||| axis order	count=4
function	feed dictionary used ||| feed dict	count=1
function	ops for [function_2] ||| [function_2] eval metric [function_1]	count=1
module	logistic ||| python ops	count=1
function	placeholder for the graph ||| placeholder from	count=2
function	to restore a ||| restore	count=1
class	metrics ||| regression head	count=1
function	row ids ||| rows	count=1
function	tensor ||| get dense tensor	count=2
module	tensor for ||| feature_column	count=1
function_arg	[function_1] [arg_2] textbox ||| [function_1] [arg_2] erase_existing	count=3
arg	from the loss_collection ||| scope loss_collection	count=1
function	log ||| log op gradients	count=1
function	creates variables and ||| create embedding lookup	count=1
class	multivariate normal distribution on ||| multivariate normal	count=3
function_arg	hparamdef protocol buffer ||| to proto export_scope	count=1
function_arg	[function_1] [arg_2] ||| [function_1] var_store [arg_2]	count=3
arg	[arg_1] predictions with ||| [arg_2] [arg_1]	count=2
arg	given a feature_spec ||| filepatterns feature_spec	count=1
function	exports ||| export	count=2
function	returns the first operation ||| get first op	count=1
class	processor from given ||| processor	count=1
module	this cell output dimension ||| rnn python ops	count=1
module	then ||| ops distributions	count=2
function	a line ||| add line	count=1
function	manager to record variable ||| record variable	count=1
function_arg	[function_1] [arg_2] ||| [function_1] loss loss [arg_2]	count=4
function	checkpoint filenames [function_2] ||| [function_1] [function_2]	count=2
module	the input [module_2] ||| [module_1] [module_2]	count=1
function_arg	resnet-101 model [arg_2] ||| [arg_2] [function_1]	count=1
module	parameter ||| distributions python kernel_tests	count=2
function	node of ||| node	count=1
arg	inputs ||| inputs state scope	count=2
module	a sequence ||| keras	count=2
module	dtype based ||| framework	count=1
class	check to make sure ||| test	count=1
function	constructor for ||| init	count=1
module	in this ||| python framework	count=3
class	with the specified item ||| test	count=1
module	of a number of ||| ops	count=1
function	un-normalized l1 loss ||| l1 loss	count=2
module	for proper shape values ||| python ops	count=1
function	the parameters of ||| params	count=2
function	all the data attributes ||| with all resources	count=1
function_arg	predictions for [arg_2] ||| [function_1] [arg_2]	count=3
function	posterior [function_2] ||| [function_1] [function_2]	count=1
module	tensors linked to ||| graph_editor	count=1
module	for node-status labels ||| python	count=1
function	[function_1] restart only ||| [function_2] [function_1]	count=1
function	[0 n_classes) range are ||| at k5 some out of range	count=2
module	depthwise ||| python kernel_tests	count=1
function	[function_1] sdcaoptimizer ||| contrib linear_optimizer python [function_1] [function_2] head	count=2
function	the shape of the ||| output shape	count=1
function	arg batch_shape, ||| batch shape	count=1
function	op to ||| get string to hash bucket fn	count=1
arg	dtype ||| dtype	count=3
module	shape representing ||| python framework	count=1
function	variables and names ||| and slice	count=1
arg	containing the encoded ||| image_format image_shape	count=1
function	existing model variable ||| model variable	count=2
arg	its inputs ||| inputs state scope	count=2
class	file ||| file	count=11
module_class	[module_1] tensor in ||| [module_1] [class_2]	count=6
arg	dims values ||| cls dims	count=1
function	the feature [function_2] ||| [function_2] [function_1]	count=3
arg	sigmoid_cross_entropy_with_logits ||| multi_class_labels	count=1
function	trace information for a ||| trace	count=1
function	makes this graph the ||| as	count=1
function	[function_1] l2 regularization ||| [function_1] [function_2]	count=2
function	labels [function_2] ||| [function_1] [function_2]	count=8
function	writes ||| write string	count=1
function	field to observations dict ||| field to observations map	count=1
function_arg	average of [arg_2] ||| [arg_2] [function_1]	count=2
function_arg	[function_1] base_type ||| [function_1] function [arg_2]	count=2
module	of load() ||| tensorboard backend event_processing	count=1
arg	[arg] of a ||| [arg]	count=2
arg	name should be ||| name	count=1
function	within the given boundary ||| within boundary ops	count=1
function	[function_1] first ||| [function_2] [function_1]	count=1
function	returns the current weights ||| get weights	count=1
function	extend this instance ||| extend	count=1
function	start [function_2] ||| [function_2] [function_1]	count=8
module	return indexies of ||| learn python	count=1
function	as input layer ||| make input layer	count=2
module	a sequence ||| keras python keras	count=1
function	writes graph_def to logdir ||| write	count=1
module	returns ||| python training	count=5
function_arg	returns a [arg_2] ||| [function_1] total loss add_regularization_losses [arg_2]	count=2
function	[function_1] into string ||| [function_1] [function_2]	count=1
function	of input and ||| input and	count=1
function	deconv layer based ||| deconv	count=1
function	probability ||| prob	count=1
function	error ||| error	count=10
function	dict symbol name ||| build guide index	count=1
module_class	[module_1] test ||| [module_1] [class_2]	count=16
function_arg	plugin asset [arg_2] ||| [function_1] [arg_2]	count=2
function	the weighted ||| weighted	count=2
function	[function] sequence-to-sequence model ||| [function]	count=1
class	debug-wrapper [class_2] ||| [class_1] [class_2] on	count=1
module	list of tensor ||| contrib layers python ops	count=1
arg	conv [arg_2] ||| [arg_2] [arg_1]	count=2
arg	a microbenchmark ||| target size iters	count=1
function	and ||| create	count=1
module	of integers ||| keras python keras preprocessing	count=1
function_arg	softmax [arg_2] ||| [function_1] [arg_2]	count=2
class	the file [class_2] ||| [class_1] [class_2]	count=1
function_arg	[function_1] layers ||| [function_1] [arg_2]	count=4
arg	read feature_values ||| feature_values keys	count=1
module	a cross-entropy loss ||| contrib losses python losses	count=1
function	[function_1] batch vector ||| [function_2] [function_1]	count=1
function	data against the partition ||| dump with	count=1
module	the op (e g ||| python	count=1
function	functions for [function_2] ||| [function_2] run conversion [function_1]	count=1
module	variance of ||| python ops	count=1
function	with at least ||| with rank at least	count=1
arg	[arg_1] [arg_2] ||| [arg_2] points [arg_1]	count=1
arg	pads [arg_2] ||| [arg_1] [arg_2]	count=4
arg	batches ||| accept_prob_fn batch_size	count=1
module	log ||| python platform	count=2
function	a crf ||| crf	count=1
class	place [class] if ||| [class]	count=1
class	outputs ||| outputs	count=2
function_arg	[function_1] provided 'op_log', ||| [function_1] [arg_2]	count=1
arg	kernellinearclassifier [arg_2] ||| [arg_2] [arg_1]	count=1
function	derivatives for bilinear resizing ||| resize bilinear	count=1
function	makes this graph ||| as	count=1
function	string_to_hash_bucket op to use ||| get string to hash bucket fn	count=1
function	shannon entropy in nats ||| entropy	count=1
function	def from a ||| from	count=1
module	of a single sample ||| ops distributions	count=2
arg	body ||| body loop_vars shape_invariants	count=1
class	for proper ||| dirichlet multinomial	count=1
function_arg	[function_1] bigqueryreader ||| [arg_2] [function_1]	count=1
class	normal ||| normal tri l	count=2
module	transforms each text ||| contrib	count=1
function	start message ||| start message	count=2
arg	[arg_1] call func ||| [arg_1] [arg_2]	count=1
function	after a ||| after	count=1
arg	precision@k of [arg_2] ||| [arg_2] [arg_1]	count=3
module	a 1 ||| python ops	count=4
module	the ||| contrib linalg python	count=2
class	function to test ||| test	count=1
module	none ||| python framework	count=2
class	[class_1] event file ||| [class_1] [class_2]	count=2
function	1/sqrt(1-x^2) ||| asin	count=1
function	tensor or indexedslices ||| n to tensor or indexed slices	count=1
module	make sure ||| compatibility	count=1
module	copy ||| python util	count=1
function	csv ||| csv with	count=1
module	data as input ||| python learn estimators	count=5
arg	a given sensitivity ||| predictions labels sensitivity	count=1
function	transitive closure ||| transitive cleanliness	count=1
arg	this op ||| op	count=1
function	a batch ||| cdf batch	count=1
function	a dynamic rnn ||| rnn	count=1
function	values then return tensor ||| maybe assert	count=1
function	computes the weighted ||| compute weighted	count=2
module	the tensorshape representing ||| framework	count=1
module	a sequence ||| contrib	count=1
function	default schedule for the ||| default schedule	count=1
module	indices ||| python feature_column	count=3
function	get a menuitem ||| item	count=1
arg	value to ||| value dtype name as_ref	count=1
function	all inputs ||| inputs tensor	count=1
function	with modulus [function_2] ||| [function_1] [function_2]	count=1
function	scope from ||| name scope	count=1
module_class	for evaluating [class_2] ||| [module_1] [class_2]	count=4
function	tensors to the stochastic ||| stochastic	count=1
function	convert a list ||| from rich line list	count=1
class	degree ||| operator pd	count=1
function_arg	the recall [arg_2] ||| [arg_2] [function_1]	count=3
function	average pool along column ||| avg pool along cols	count=1
arg	a state saving sequence ||| cell	count=1
function	for multi [function_2] ||| [function_1] [function_2]	count=4
arg	fn_then() or fn_else() based ||| fn_then fn_else	count=1
function	are sessionrunhook raises ||| type	count=1
function	flops for ops from ||| logged	count=1
function	[function_1] have no ||| [function_1] [function_2]	count=1
function	with constants of the ||| to constants	count=1
class	register ||| completion registry	count=1
arg	logits and labels ||| labels logits	count=1
module	prune ||| python feature_column	count=1
function_arg	[function_1] sp_input to ||| [function_1] [arg_2]	count=1
class	node names [class_2] ||| [class_1] [class_2]	count=1
arg	second-order gradients of ||| output_sizes window_rows	count=1
class	index a ||| generate guide index	count=1
arg	in input best path ||| inputs sequence_length	count=1
module	input ||| python ops	count=1
arg	inputs of sgv1 ||| sgv1	count=1
function	the fingerprint concatenation has ||| has	count=1
arg	given estimator [arg_2] ||| [arg_2] [arg_1]	count=1
function	[function_1] partitioned variables ||| [function_1] [function_2]	count=8
function	generate an [function_2] ||| [function_2] [function_1]	count=1
function	a feature spec for ||| feature spec for	count=1
function	flow start event ||| flow start	count=2
function	menuitem from the ||| to	count=1
function	names ||| names	count=12
arg	and control_outputs ||| control_outputs control_ios	count=1
arg	a sparsetensor into ||| sp_input	count=1
module	cell ||| contrib rnn python ops	count=3
function	-> _guideref ||| build guide index	count=1
arg	tensor ||| tensor paddings mode	count=1
function	an exception on bad ||| test bad file	count=1
function	tuple ||| tuple	count=1
module	loss to the training ||| contrib losses python losses	count=2
function	file in a plain ||| file	count=1
function	term in ||| term	count=1
function	all are ||| check hooks type	count=1
function	model_fn that ||| model fn	count=1
function	end ||| epoch end	count=1
module	typeerror otherwise ||| python	count=1
arg	from ||| fn	count=4
arg	a cell_fn ||| cell_fn	count=1
class	this shape ||| tensor shape	count=1
function	the nodedef proto representing ||| node def	count=1
function	computes [function_2] ||| [function_1] [function_2]	count=2
module	to ||| tools	count=1
function	[function_1] gradient functions ||| [function_2] [function_1]	count=8
arg	update is_row_sweep_var ||| processed_row_indices processed_col_indices train_op	count=1
arg	determined by pred ||| pred dtype name	count=1
function	outputs in [function_2] ||| [function_2] [function_1]	count=1
function_arg	create an [arg_2] ||| [function_1] debug_dump tensor_filters ui_type [arg_2]	count=1
function	step of [function_2] ||| [function_2] [function_1]	count=2
function	batch_shape, [function_2] ||| [function_2] [function_1]	count=3
arg	output ||| tensor_in_sizes glimpse_sizes offsets	count=1
module	the tensor of ||| python ops	count=1
function	no [function_2] ||| [function_1] [function_2]	count=1
function	true [function_2] ||| [function_1] [function_2]	count=10
arg	from graph, under the ||| org_instance graph	count=1
function	the compressed histogram ||| compressed histograms	count=1
function	sets the manual variable ||| manual variable	count=1
function	recall of the ||| streaming recall	count=1
module	sure we ||| tools	count=1
function_arg	get a [arg_2] ||| [function_1] concat variable name [arg_2]	count=1
module	be produced ||| framework	count=1
arg	is ready ||| max_wait_secs	count=1
function	callable that runs ||| callable	count=1
function	a restricted ||| joint weighted sum from feature	count=1
function	returns the variables and ||| and slice	count=1
function_arg	returns the op that [function_1] [arg_2] ||| [function_1] [arg_2]	count=3
class	the wrapper should ||| debug wrapper	count=1
function	the batch dimension ||| batch	count=1
function	as linear_model_fn but returns ||| model fn	count=2
class	accumulator ||| sparse conditional accumulator	count=2
arg	boundaries ||| boundaries	count=2
function	[function_1] attribute ||| [function_2] [function_1]	count=5
function	get ||| node status label	count=1
function	to i + ||| to	count=2
module	a ||| python keras	count=1
function	linked to ops ||| ts from regex	count=1
module	its ||| python keras engine	count=1
function	the string message ||| purge message	count=1
function	all inputs of the ||| inputs tensor info from meta	count=1
function	return dict symbol name ||| build guide	count=1
module	list of tensors that ||| ops	count=3
function	bounding ||| bounding	count=1
function	list_profile ||| list profile	count=1
function	align ||| align	count=1
function	to a richtextlines ||| rich text lines from rich	count=1
module	updates internal vocabulary ||| contrib keras python keras preprocessing	count=1
module	computes output ||| keras engine	count=1
function	this operator is ||| operator	count=1
module	and previous output tensors ||| contrib grid_rnn	count=1
function	for the walsfactorization estimator ||| wals factorization	count=1
class	[class_1] subclasses ||| [class_2] [class_1]	count=2
function	an initializer that generates ||| initializer	count=1
class	of node names of ||| node	count=1
function	partition [function_2] ||| [function_1] [function_2]	count=1
arg	from op1 and op2 ||| op1 op2	count=1
function_arg	[function_1] a numpy ||| [arg_2] [function_1]	count=1
function	creates a linear operator ||| operator	count=1
arg	logits given in input ||| inputs sequence_length beam_width	count=1
class	node-status labels ||| node stepper	count=1
arg	computes recall@k of ||| class_id weights	count=2
module	as 'values' ||| metrics python	count=1
function	to [function_2] ||| [function_1] [function_2]	count=46
arg	processes an image by ||| tag wall_time step image	count=1
module	of beams into a ||| python ops	count=1
arg	parent [arg_2] ||| [arg_1] [arg_2]	count=2
module	internal version of ||| ops	count=2
class	normal distribution on r^k ||| normal diag	count=1
function_arg	[function_1] val to ||| [function_1] [arg_2]	count=1
function	creates a checkpoint ||| create checkpoint	count=1
class	be produced or ||| indexed slices	count=1
module	returns the sum ||| python	count=1
arg	position ids in sampled_candidates ||| sampled_candidates num_true seed	count=1
arg	added ||| input_keep_prob output_keep_prob state_keep_prob	count=1
function	log ||| sqrt log	count=1
module	3d numpy ||| keras preprocessing	count=1
module	of equations ||| contrib linalg python ops	count=1
function	calculates false positives ||| false positive	count=1
class	we don't ||| files	count=1
module	cell output ||| rnn python ops	count=1
function	initializes the ||| init	count=3
module	definition for the ||| python	count=1
function	[function_1] directory containing ||| [function_1] [function_2]	count=3
module	prepended to ||| linalg python	count=1
class	don't have a ||| upgrade	count=1
arg	convolution layer [arg_2] ||| [arg_1] [arg_2]	count=1
function	recall values ||| recall	count=1
arg	to runoptions ||| run_options node_name output_slot	count=1
module	evaluates ||| contrib training python training	count=1
function	loads [function_2] ||| [function_1] [function_2]	count=4
class	tests ||| feature column test	count=5
function	tfdbg [function_2] ||| [function_2] [function_1]	count=1
function	plugin asset from a ||| plugin asset	count=1
function	gradients at interesting ||| gradient	count=1
function	waits for model to ||| wait for	count=1
arg	perform regex match in ||| orig_screen_output regex	count=1
class	variable ||| resource variable	count=1
class	set ||| handler registry	count=1
function	[function_1] column is ||| [function_1] [function_2]	count=2
arg	[arg_1] and outputs ||| [arg_1] [arg_2]	count=1
function	all ||| check hooks	count=1
function	sparse integer column ||| sparse int column	count=3
function	specified type ||| type	count=1
arg	sequence model ||| decoder_inputs encoder_cell decoder_cell	count=1
function	guide files ||| md files	count=1
arg	[arg_1] args ||| [arg_1] [arg_2]	count=1
class	creates ||| fake big query server	count=1
function	obj [function] element if ||| as [function]	count=1
arg	for this head ||| target features	count=1
function	mahalanobis distance [function_2] ||| [function_1] [function_2]	count=2
function	cos ||| sin	count=1
class	test ||| max pool test	count=3
function	scalars after adding them ||| scalars	count=1
module	data ||| contrib learn python learn	count=1
arg	gradients to ||| grad	count=6
module_class	into the [class_2] ||| [module_1] [class_2]	count=4
function	for a rank rfft ||| fft length for rfft	count=1
function	a monitoredsession for training ||| monitored training	count=1
function	for the tilegrad ||| tile grad	count=2
module	and return indexies of ||| learn preprocessing	count=1
function	the values for given ||| output values	count=1
function_arg	sharded variables [arg_2] ||| [function_1] [arg_2]	count=1
module	of of ||| distributions python ops	count=1
class	don't ||| test upgrade	count=1
class	this ||| fused	count=1
function	a dict [function_2] ||| [function_2] [function_1]	count=2
function	a ||| init	count=1
function	op [function] partially ||| map structure up [function]	count=1
arg	value to variable's memory ||| value session	count=1
function	with modulus [function_2] ||| [function_2] [function_1]	count=1
module	a numpy image tensor ||| keras python keras preprocessing	count=3
function	collection [function_2] ||| [function_1] [function_2]	count=1
module	representing this ||| python ops	count=1
arg	from pattern optionally shuffled ||| file_pattern randomize_input	count=1
function	_get_dense_tensor() for [function_2] ||| [function_1] [function_2]	count=1
function	from the files ||| build guide	count=1
module	total number of ||| contrib metrics python ops	count=1
function	returns the proto_type for ||| get collection	count=1
class	of this stepper ||| node stepper	count=1
function	legend ||| status label legend	count=1
function	_guideref from ||| guide	count=1
function	str ||| str	count=1
function_arg	index of [arg_2] ||| [function_1] [arg_2]	count=2
function	proto_type for ||| get collection proto type	count=1
function	the column [function_2] ||| [function_2] and sparse [function_1]	count=1
module	returns ||| learn python learn estimators	count=3
function	to use based on ||| string to hash bucket fn	count=1
class	this transform to the ||| flow transform	count=1
arg	nn sigmoid_cross_entropy_with_logits ||| logits multi_class_labels weights	count=1
function	number of event ||| event	count=1
function	are the same proto ||| proto	count=1
arg	given ids and ||| params sp_ids sp_weights partition_strategy	count=1
arg	an image ||| image k name	count=1
function	argument is an ||| allowing	count=1
function	check on ||| check	count=1
function	builds a stack of ||| stack	count=1
arg	[arg_1] recall@k ||| [arg_2] [arg_1]	count=2
function	the attribute ||| attr	count=1
arg	x to zero ||| x	count=1
class	sdcalogisticclassifier works ||| sdcalogistic classifier	count=1
function	and file [function_2] ||| [function_2] [function_1]	count=1
arg	loop ||| val	count=1
class	text ||| rich text lines	count=1
function_arg	code [arg_2] ||| python ops [function_1] op [arg_2]	count=1
arg	over a ||| x y sample_weight	count=1
function	slot ||| slot	count=5
arg	tensors to a ||| tensors name	count=1
function	dtype of elements ||| dtype	count=1
function	returns the input ||| input	count=1
arg	input while maintaining ||| inputs outputs_collections scope	count=2
function	for a batch of ||| cdf batch	count=1
function	into ||| string	count=2
function_arg	[function_1] rnncell ||| [function_1] [arg_2]	count=4
function	compressed [function_2] ||| [function_1] [function_2]	count=3
function	[function_1] [function_2] ||| [function_2] metric [function_1]	count=2
module_class	[module_1] table ||| [module_1] mutable hash [class_2]	count=1
class	an ugrnn ||| ugrnncell	count=1
function	[function] speed ||| [function] gru block vs	count=1
function	to ops that match ||| ts from regex	count=1
function_arg	to observations [arg_2] ||| [function_1] generator [arg_2]	count=1
module	returns a shape representing ||| python framework	count=1
function_arg	data directory ||| data path	count=1
arg	encoded in the handle ||| handle	count=1
class	for ||| output	count=1
class	event file ||| event	count=2
function	by a [function_2] ||| [function_1] [function_2]	count=1
function	default initializer ||| default initializer	count=2
function	the 2d convolution ||| conv2d	count=1
function	multipliers ||| multipliers	count=1
function	true iff ||| is loop constant	count=1
function	a [function_2] ||| [function_2] [function_1]	count=1
arg	an imperativegraph ||| parent_graph	count=1
function	[function_1] additional logistic ||| [function_2] [function_1]	count=1
function_arg	forwards [arg_2] ||| [arg_2] [function_1]	count=5
function	the weight [function_2] ||| [function_1] [function_2]	count=3
function_arg	sparseadd [arg_2] ||| [function_1] [arg_2]	count=1
function	regex search ||| regex search from	count=2
function	sparsetensordensematmul ||| mat mul grad	count=1
arg	[arg_1] weights ||| [arg_2] [arg_1]	count=4
function	runner to ||| runner	count=1
arg	to create batches ||| batch_size capacity	count=3
arg	matrix b, producing ||| transpose_a transpose_b	count=2
arg	the specified dimension ||| dim	count=1
function	values for ||| test output values	count=1
module	dictionary and return ||| python	count=1
arg	the saveables ||| saveables	count=1
function	an op for ||| op	count=2
module	sets ||| python framework	count=2
module	while [module_2] ||| [module_1] [module_2]	count=2
module	layer ||| python ops	count=1
function	[function_1] order on ||| [function_2] [function_1]	count=2
arg	given path where path ||| path	count=1
function	clips values ||| clip by global norm	count=1
function	rotate ||| rotate	count=1
module_class	[module_1] projection ||| [module_1] [class_2]	count=2
module	constant ||| python layers	count=1
function	structure ||| structure	count=1
function	over sample ||| sample	count=2
module	node-status ||| cli	count=1
arg	the vocabulary dictionary and ||| x	count=1
function	[function_1] [function_2] ||| [function_2] gradient [function_1]	count=2
function	boots 3 servers ensures ||| test cluster spec propagation three servers	count=1
function	fingerprint concatenation has ||| has	count=1
function	[function_1] operation ||| [function_2] [function_1]	count=14
function	performs [function] ||| [function]	count=3
class	sparse tensor ||| sparse tensor	count=2
function	for all inputs ||| inputs	count=1
function_arg	[function_1] 0 holds ||| [function_1] x [arg_2]	count=1
function	sets the [function_2] ||| [function_1] [function_2]	count=16
class	will work ||| pdbase	count=1
function	on a list of ||| on	count=1
function	from some graph, returns ||| get	count=1
module	return indexies of ||| learn	count=2
function	get all ||| ts	count=1
function_arg	[function_1] base_type to ||| [arg_2] [function_1]	count=4
function	the control flow context ||| context	count=1
function	spaces of the domain ||| domain	count=1
function	lookup helper ||| lookup	count=1
arg	microbenchmark ||| size iters	count=1
function	using numpy matrix ||| np matrix	count=4
function	[function_1] watch ||| [function_2] [function_1]	count=2
function	items that ||| items	count=1
module	experiment ||| contrib learn python learn	count=1
arg	match ||| ops	count=1
module	command prefix ||| python debug cli	count=1
arg	predictions with respect to ||| predictions weights metrics_collections	count=1
class	tensor ||| lazy	count=1
class	name of ||| indexed slices	count=1
arg	feature keys to use ||| keys	count=1
class	depthwise ||| depthwise	count=1
arg	from thumbnails and ||| thumbnails	count=1
function	[function_1] [function_2] ||| [function_1] real valued [function_2]	count=1
module	of zero or ||| python ops	count=1
module	lists of unique ||| contrib labeled_tensor python ops	count=1
module	invoked during construction ||| debug wrappers	count=1
class	that coordinate ||| multinomial	count=1
module	sequence of ||| python	count=1
arg	[arg_1] generator ||| [arg_2] [arg_1]	count=8
function	cached tensor ||| cache	count=1
module	summary ||| summary	count=4
module	estimate ||| training python training	count=1
module	filter ||| contrib graph_editor	count=1
function	an embedding variable ||| embedding variable	count=2
function	real valued features ||| optimizer real valued linear features	count=1
function	vectors by combining ||| vector	count=1
module	adds ||| python util	count=1
function	key used ||| key	count=1
function	[function_1] to initialize ||| [function_2] [function_1]	count=1
arg	for given feature_columns ||| feature_columns name	count=1
function	sparsedensecwisediv ||| sparse dense cwise div	count=1
function	the ||| to	count=1
function_arg	[function_1] specification ||| [function_1] [arg_2]	count=3
function	dtypes ||| dtypes	count=2
arg	output according ||| is_control	count=1
function	and return ||| fit transform	count=1
function	it to [function_2] ||| [function_1] [function_2]	count=1
module	cell output ||| rnn	count=1
function	an embedding ||| embedding	count=2
function	results ||| results	count=1
module	get ||| python debug	count=2
function	legacy init [function_2] ||| [function_2] [function_1]	count=2
function	main menu for the ||| add main menu	count=1
arg	elements ||| name	count=2
function	numpy array ||| array	count=1
function	assets contained ||| assets	count=1
function	their defs from ||| nodes map	count=1
function	given condition ||| rank condition	count=1
function	vocabulary dictionary and ||| fit	count=1
class	vocabulary after which ||| categorical vocabulary	count=1
function	[function_1] python file ||| [function_1] [function_2]	count=1
module	a new ||| python training	count=11
function	backward ||| ndlstm	count=1
function	match ||| from regex	count=2
function	old values ||| values	count=1
class	state for ||| flow state	count=1
arg	shuffling ||| capacity	count=1
function	create a ||| create	count=5
function	are ||| type	count=1
function_arg	op tensor [arg_2] ||| [function_1] [arg_2]	count=3
function	shape of a ||| shape	count=2
function	[function_1] add ||| [function_2] [function_1]	count=8
function	or tensorshape size of ||| size	count=1
function	applies dropout to the ||| dropout	count=1
function	with bucketized [function_2] ||| [function_2] [function_1]	count=2
function	a vector ||| vector	count=1
function	csv ||| csv	count=4
function	an op that creates ||| variable op	count=1
module	valid command prefix ||| debug cli	count=1
function	are kept normalized ||| l2 normalized	count=1
function_arg	[function_1] few dummy ||| [function_1] audio series writer [arg_2]	count=1
arg	and y and stddev ||| y stddev	count=1
function	[function_1] graph for ||| [function_1] [function_2]	count=1
function	lookup ||| embedding lookup	count=1
class	to make ||| upgrade files	count=1
function	after broadcasting the leading ||| broadcast batch shape	count=1
module	discards ||| tensorboard backend event_processing	count=1
function	the given tensor ||| get tensor	count=1
function	total number of elements ||| num elements	count=1
module	helper function for ||| ops	count=1
arg	a new ||| name shape	count=1
arg	tensor with shuffling ||| capacity	count=1
module	image s ||| image	count=2
class	to the recorded ||| file edit	count=1
function	page that doesn't ||| page	count=1
function	true if this device ||| is gputrace device	count=1
module	instantiates a ||| python keras	count=1
function	render traceback of ||| render node traceback	count=1
class	event file to disk ||| file writer	count=1
class	the value should ||| value	count=1
arg	[arg_1] beta and ||| [arg_2] [arg_1]	count=4
arg	b, producing a @ ||| transpose_a transpose_b	count=1
function	add a list ||| add	count=1
module	list of tensors corresponding ||| contrib factorization python ops	count=4
module	the 2 inputs of ||| python ops	count=2
function	return tensor version ||| assert	count=1
class	test ||| batch normalization test	count=1
function	map [function] ||| [function] dependencies	count=3
function	record variable [function_2] ||| [function_2] [function_1]	count=1
class	data and ||| data	count=1
arg	matmul x [arg_2] ||| [arg_2] [arg_1]	count=6
function_arg	[function_1] getter ||| [arg_2] [function_1]	count=1
function	add nextiteration and ||| add next and	count=1
module	unique to this input ||| framework	count=1
class	normal ||| normal diag plus low rank	count=1
function	tall output ||| tall output	count=2
function	metricspec ||| with metric spec	count=1
function_arg	[function_1] stored in ||| [arg_2] [function_1]	count=3
arg	resource_list ||| resource_list	count=1
arg	distributions [arg] ||| loc scale validate_args [arg]	count=3
class	[class_1] options ||| python debug wrappers [class_1] [class_2]	count=1
arg	if reduction_indices is ||| reduction_indices	count=1
function	text ||| texts	count=1
module	raises ||| python	count=1
function	[function_1] source ||| [function_2] [function_1]	count=3
function	on self with at ||| with rank at	count=1
class	grad ||| grad	count=1
function	[function_1] deprecated argument ||| [function_2] [function_1]	count=2
function_arg	[function_1] statesavingrnnestimator ||| [function_1] [arg_2]	count=1
function	[function_1] event for ||| [function_1] [function_2]	count=3
class	that the decoder ||| data decoder	count=1
function	batch_shape, possibly [function_2] ||| [function_1] [function_2]	count=2
function	of collections used ||| all collection keys	count=1
module	estimate of an ||| bayesflow python ops	count=1
function_arg	[function_1] a sparsetensorsmap ||| [function_1] sp_input [arg_2]	count=1
function	the export strategies ||| export strategies	count=2
class	metadata information [class] session run() ||| [class]	count=1
class	by the model ||| sdca model	count=1
function	strictly ||| strictly	count=1
module	of a 1 ||| distributions	count=1
arg	to_proto [arg_2] ||| [arg_2] [arg_1]	count=2
class	then return ||| dirichlet multinomial	count=1
arg	collects and ||| ignore_regex_fpaths	count=1
function_arg	[function_1] summarysaverhook ||| [function_1] [arg_2]	count=1
function_arg	[function_1] of base_type ||| [arg_2] [function_1]	count=4
function_arg	train model ||| simple train model	count=1
arg	perform a ||| headers	count=1
module	to ops that ||| contrib	count=1
module	[module_1] mnist ||| [module_1] [module_2]	count=4
arg	of co-existance of ||| x y input_fn feed_fn	count=1
module	return indexies of ||| contrib learn python learn	count=1
arg	the compatiblity of targets ||| targets loss_fns output_shapes	count=1
function	signature from ||| signature fn	count=8
class	for use in testing ||| total variation test	count=1
function	initializes [function_2] ||| [function_2] [function_1]	count=2
function	sets the values of ||| batch set value	count=1
function	for proper shape values ||| maybe	count=1
class	the handler ||| handler	count=1
class	enqueue ops for the ||| runner	count=1
function	returns the last snapshot ||| value	count=1
class	the file ||| file	count=4
class	from the directory and ||| debug dump dir	count=1
function	returns list of ||| list	count=1
module	set of ||| contrib framework python ops	count=1
module	sequence ||| contrib ndlstm python	count=1
arg	state saving ||| cell features labels mode	count=1
function	to save ||| sharded save ops	count=2
class	pack ||| external optimizer interface	count=1
function	[function_1] in an ||| [function_2] [function_1]	count=1
function_arg	[function_1] for op ||| [arg_2] [function_1]	count=2
module	image ||| image python	count=1
function	offset when the ||| offset	count=1
module	build ||| layers python layers	count=1
function	activations ||| activations	count=1
arg	from thumbnails ||| thumbnails	count=1
module	tensor ||| contrib slim python slim	count=1
module	fifoqueue ||| python kernel_tests	count=1
function	binary indicator to ||| binary	count=1
function	slice of each tensor ||| slice	count=1
class	multivariate normal ||| multivariate normal diag plus low	count=1
module	a shape representing a ||| python	count=1
function	sentinel [function_2] ||| [function_2] [function_1]	count=4
class	by ||| plugin asset	count=1
module_class	of a staging ||| python ops staging	count=6
function	relative timestamp from ||| rel timestamps	count=1
arg	annotation ||| tst out list_tensors_enabled node_info_node_name	count=1
class	total number of buckets ||| crossed	count=1
function_arg	compatible with [arg_2] ||| [arg_2] [function_1]	count=1
arg	compute tensor ||| tensor	count=1
function	model_fn ||| create model fn	count=1
arg	parameters for an ||| num_units input_size use_peepholes	count=1
function	after restart only ||| after restart	count=1
function	returns a dict for ||| dict	count=1
function	[function_1] sparse feature ||| [function_1] [function_2]	count=1
function	runs one evaluation against ||| do eval	count=1
function	given variable or list ||| variable or list	count=1
module	which properly compares ||| contrib distributions python	count=1
arg	for comparing ||| rtol	count=1
function	average [function_2] ||| [function_1] precision [function_2]	count=3
function	boots 3 servers ensures ||| cluster spec propagation three servers	count=1
class	every loop ||| while context	count=1
function	[function_1] last ||| [function_2] [function_1]	count=1
module	the name of ||| framework	count=1
arg	output determined by pred ||| pred dtype name	count=1
module	return ||| distributions	count=1
function	outputs in place ||| outputs make unique	count=1
function	tf cond ||| cond	count=1
function	handles ||| insert transformed feature	count=3
module	returns both the ||| python ops	count=1
function	[function_1] event file ||| [function_2] [function_1]	count=1
module	the sense of vector ||| contrib linalg python	count=3
module	[module_1] [module_2] ||| [module_1] [module_2]	count=197
function	[function_1] search ||| [function_1] [function_2]	count=2
module	a sequence of integers ||| python keras preprocessing	count=1
function_arg	order on [arg_2] ||| [function_1] [arg_2]	count=1
function	-grad * 2/sqrt pi ||| erfc grad	count=1
function_arg	[function_1] t ||| [arg_2] [function_1]	count=1
function	trainable [function_2] ||| [function_1] [function_2]	count=2
class	node-status ||| cli	count=1
function	[function_1] image ||| [function_1] [function_2]	count=3
module	of ||| factorization python ops	count=17
arg	bigqueryreader ||| project_id dataset_id table_id timestamp_millis	count=1
arg	computes recall@k ||| class_id weights	count=2
function_arg	[function_1] if one ||| [function_1] [arg_2]	count=5
function_arg	maximum [arg_2] ||| [arg_2] [function_1]	count=1
function	phase ||| phase	count=2
module_class	truncated [class_2] ||| [module_1] truncated [class_2]	count=1
module	learn the vocabulary ||| contrib learn python learn	count=1
function	[function_1] finite ||| [function_2] [function_1]	count=1
function	and linear [function_2] ||| [function_2] [function_1]	count=1
arg	given evaluation data input_fn ||| input_fn steps hooks checkpoint_path	count=1
class	tensorshape with ||| shape	count=1
module	integers ||| python keras	count=1
arg	tensors ||| tensor_names tensors	count=1
module	the original ||| python	count=2
class	reference to ||| reference	count=1
function	_definedfunction initialized from a ||| from	count=1
arg	each input ||| cls inputs	count=1
function	[function_1] decoding on ||| [function_1] [function_2]	count=3
function	the tensor ||| verify tensor	count=1
function_arg	asset from [arg_2] ||| [arg_2] [function_1]	count=2
module	docs ||| tools docs	count=1
function	page ||| module page	count=1
function_arg	[function_1] each input ||| [arg_2] [function_1]	count=1
class	a new interactive ||| interactive	count=1
function	specified line ||| at line	count=1
arg	a column based on ||| column args weight_collections	count=1
arg	if op was ||| op	count=1
function_arg	[function_1] [arg_2] ||| [function_1] name shape dtype [arg_2]	count=3
module	x + loc ||| contrib distributions python ops	count=1
class	when this tensor ||| tensor	count=1
class	the tensor [class_2] ||| [class_2] [class_1]	count=1
function	model with attention ||| attention	count=1
function	vocabulary dictionary and ||| transform	count=1
function	a feature ||| feature	count=1
arg	builds ||| features	count=4
function	all are ||| check hooks	count=1
function	in command history ||| command history	count=1
function	[function_1] dense ||| [function_1] [function_2]	count=2
arg	hints ||| hints	count=1
function_arg	[function_1] [arg_2] ||| [function_1] apply dense grad [arg_2]	count=3
arg	[arg_1] on col_seq ||| [arg_1] [arg_2]	count=4
function_arg	[function_1] of side_effects ||| [arg_2] [function_1]	count=2
function	eval [function_2] ||| [function_1] [function_2]	count=2
class	compares ||| accumulator test	count=1
arg	d1 [arg_2] ||| [arg_1] [arg_2]	count=1
function	d > 0 elementwise ||| positive	count=1
function	[function_1] multipliers to ||| [function_1] [function_2]	count=3
class	produced ||| indexed slices	count=1
arg	convert ops to a ||| ops check_graph allow_graph ignore_ts	count=1
function	attribute (e ||| attribute at index	count=1
class	constructs ||| dnnlinear combined classifier	count=1
function	[function_1] softmax ||| [function_1] [function_2]	count=7
arg	returns a lookup ||| vocabulary_file vocab_size default_value name	count=1
function	sentinel ||| sentinel	count=1
arg	all steps ||| inputs noutput scope name	count=1
function	a sequence of integers ||| sequences	count=1
module	vocabulary dictionary and ||| python learn	count=1
function	the python object ||| to object	count=1
function	add ops to restore ||| add sharded restore	count=1
class	test whether client ||| history	count=1
class	of the erosion ||| erosion	count=1
arg	builds model ||| features	count=4
function_arg	[function_1] co-existance of ||| [function_1] input args [arg_2]	count=1
arg	dilation_rate arguments ||| dilation_rate	count=1
module	sequence ||| contrib keras	count=1
arg	does nothing when the ||| pred if_true if_false	count=1
function_arg	end of [arg_2] ||| [arg_2] [function_1]	count=2
arg	a looperthread ||| coord timer_interval_secs target args	count=1
module	will be produced ||| python	count=1
function	richtextlines ||| rich text lines	count=1
class	that represents the function ||| function	count=1
class	the vocabulary dictionary ||| categorical	count=1
function	extract output [function_2] ||| [function_2] [function_1]	count=3
function	a time string ||| time str	count=1
class	construct multivariate ||| multivariate	count=2
function	make sure ||| ts compatibility	count=1
function	[function_1] with given ||| [function_1] [function_2]	count=3
arg	in y_np ||| x_np y_np	count=1
arg	from a graph ||| graph run_meta	count=1
function	computes a header for ||| header	count=1
module	with default ||| learn python learn	count=1
function_arg	[function_1] linearoperatorudvhupdate ||| [function_1] [arg_2]	count=1
function_arg	doc [arg_2] ||| [arg_2] [function_1]	count=1
function	otherwise ||| hooks	count=1
function	predict ||| predict data	count=1
function	false ||| streaming sparse false	count=1
function	key validator callback ||| on	count=1
function	_get_dense_tensor() for [function_2] ||| [function_2] [function_1]	count=3
function	raises typeerror otherwise ||| hooks type	count=1
arg	runoptions for [arg_2] ||| [arg_2] [arg_1]	count=1
function	print ||| spec print	count=1
arg	of highlightoptions ||| criterion description font_attr	count=1
module	session and ||| contrib learn python learn dataframe	count=1
module	[module_1] mnist model ||| [module_1] [module_2]	count=4
function	a flow id ||| flow id	count=2
function_arg	summary [arg_2] ||| [arg_2] [function_1]	count=4
function	linear-only ||| linear	count=1
arg	labels ||| labels k	count=1
function	with respect to sparse ||| sparse recall	count=1
class	enter ||| control flow state	count=1
function_arg	[function_1] [arg_2] ||| operator derived class test [function_1] x [arg_2] adjoint	count=1
function	infer hints from ||| infer hints	count=1
function	a default initializer and ||| default initializer	count=1
arg	tf learn dataframe ||| num_threads enqueue_size	count=1
class	local ||| local	count=1
function	of new control ||| control	count=1
function	collection with the ||| get collection ref	count=1
function	input and ||| input and	count=1
function	[function_1] updates ||| [function_1] [function_2]	count=1
function	with integer weights ||| with integer weighted sparse column succeeds	count=1
function	ops with no emitted ||| test watching variable update ops sees updated values	count=1
module	add to the ||| python ops	count=1
module	of keras ||| keras python keras	count=1
function_arg	[function_1] a custom_getter ||| [arg_2] [function_1]	count=1
function	creates default input parsing ||| default input	count=1
function	inference to determine ||| predict classes	count=2
function	caching ||| caching	count=1
function	tensors linked to ops ||| regex	count=1
function	can [function_2] ||| [function_2] [function_1]	count=1
module	cell ||| rnn	count=10
module	a ||| python framework	count=4
module	of ||| tensorboard backend event_processing	count=2
function	export versions ||| export versions	count=4
function	the hessian ||| hessian	count=1
function	the values ||| test output values	count=3
function	analyze tensor references to ||| analyze	count=1
module_class	[module_1] indexedslices ||| [module_1] [class_2]	count=3
arg	computes the percentage of ||| weights	count=1
function	[function_1] error ||| [function_1] [function_2]	count=25
function	tensors linked ||| filter ts from regex	count=1
function	indices in [function_2] ||| [function_2] invalid [function_1]	count=1
function	that labels outside ||| three labels	count=3
arg	values of many ||| tuples	count=1
function	with weights ||| with weights	count=10
arg	frequency-weighted ||| axes frequency_weights name	count=1
module	ops that creates ||| python ops	count=1
arg	tensor ||| v dtype name as_ref	count=1
arg	calculation in grad_fn ||| func grad_fn	count=1
module	building doesn't modify ||| hybrid python	count=1
function	class ||| operator	count=1
function_arg	[function_1] a tensor ||| [arg_2] [function_1]	count=1
module	integers ||| keras python	count=1
class	based on this ||| dtype	count=1
module	given ||| contrib learn python learn	count=5
module	from ||| python framework	count=1
class	test ||| add test	count=1
function	variable-updating ops with ||| test watching variable update	count=1
function_arg	collection with [arg_2] ||| [function_1] name [arg_2]	count=1
function	check to ||| test	count=1
module_class	[module_1] array given ||| [module_1] ops [class_2]	count=1
function	the tensors linked to ||| ts from regex	count=1
function	the variables in a ||| variables to	count=1
function	[function_1] table row ||| [function_1] [function_2]	count=1
class	full names to ||| visitor	count=1
function	bilinear resizing ||| resize bilinear grad	count=1
function	probability of a ||| probs	count=3
function	trace in chrome trace ||| generate chrome trace	count=1
function	values of the ||| values	count=7
module	the files ||| tools	count=1
class	tests ||| imperative test	count=2
function	product ||| prod	count=2
function	[function_1] indices of ||| [function_1] [function_2]	count=1
function	the state for ||| flow state	count=1
function	projections ||| projections	count=1
arg	by updating var_list ||| global_step var_list gate_gradients	count=1
function	tensor from [function_2] ||| [function_2] [function_1]	count=2
module	an imagenet ||| keras applications	count=1
function_arg	[function_1] [arg_2] ||| [function_1] events [arg_2]	count=2
module	lists of [module_2] ||| [module_1] [module_2]	count=1
module	together ||| contrib batching python	count=1
class	sample data ||| data feeder	count=2
module	transforms ||| contrib keras	count=1
arg	body to ||| body	count=1
function	variables according ||| variables	count=1
function	name ||| build guide index	count=1
class	represented dense ||| sparse	count=1
function	servers creates ||| servers	count=1
function	simple ||| simple	count=3
arg	encoder and decoder parameters ||| loop_function	count=1
function	matrix with given ||| matrix	count=1
function	the state of ||| state	count=2
module	returns the ||| python ops	count=1
function	version ||| maybe assert valid sample	count=1
function	the run() ||| run	count=1
module_class	of [class_2] ||| [module_1] distributions [class_2]	count=2
function	values then return ||| maybe assert valid sample	count=1
function	[function] as ||| benchmark multi class [function]	count=1
function	close the ||| close	count=4
function_arg	predictions [arg_2] ||| [arg_2] [function_1]	count=4
module	given ||| python learn preprocessing	count=1
arg	the data to ||| data	count=1
module	returns an ||| python layers	count=1
function	predictions for ||| predictions	count=1
module	be used ||| contrib layers python layers	count=1
function	existing model [function_2] ||| [function_2] [function_1]	count=2
function	is unspecified ||| dims	count=1
arg	the attentionmechanism mechanism ||| num_units memory memory_sequence_length scale	count=1
function	hook to ||| hook	count=1
function	the current [function_2] ||| [function_2] [function_1]	count=2
function_arg	shallow structure [arg_2] ||| [function_1] shallow_tree [arg_2]	count=1
module	-> _guideref from the ||| tools	count=1
arg	on row_seq ||| row_seq overlapping	count=2
function	provided have invalid ||| invalid number of	count=1
module	for ||| estimator export	count=2
function	request a ||| request	count=1
function	within the [function_2] ||| [function_1] [function_2]	count=1
arg	microbenchmark to measure ||| target size iters	count=1
function	zero ||| zero	count=1
function	locate a tensor ||| locate tensor	count=2
function	[function_1] range are ||| [function_1] [function_2]	count=10
function	after [function_2] ||| [function_1] [function_2] for file version less	count=4
function	tensors linked to ||| from regex	count=1
arg	in input best path ||| inputs sequence_length merge_repeated	count=1
module	a labeled tensor ||| contrib labeled_tensor	count=1
function	a postfix representation of ||| spec structure	count=1
function	variance for numpy scale ||| var	count=1
arg	[arg_1] graph ||| [arg_2] [arg_1]	count=1
class	create a ||| round robin strategy	count=1
function_arg	[function_1] boston housing ||| [function_1] [arg_2]	count=1
function	[function_1] init ||| [function_1] [function_2]	count=2
arg	functional interface ||| inputs axis	count=1
function	stridedslicegrad ||| strided slice	count=1
function	legend for ||| node status label legend	count=1
function	classification signature [function_2] ||| [function_2] [function_1]	count=1
function	paths from ||| paths	count=1
function	that have no ||| no	count=1
class	interactivesession ||| interactive	count=1
arg	of the expected ||| expected_type	count=1
function	returns the ||| batch get	count=1
function_arg	menu [arg_2] ||| [function_1] [arg_2]	count=5
function	maps input ||| input exprs	count=1
module	list of [module_2] ||| [module_1] [module_2]	count=1
arg	subscribes a ||| control_cache	count=2
function	inputs of the ||| inputs	count=2
function	a batch of ||| batch	count=1
module	transforms each ||| python keras preprocessing	count=1
arg	input across [arg_2] ||| [arg_2] [arg_1]	count=2
module	the axis_order set by ||| python ops	count=1
arg	construct an [arg_2] ||| [arg_2] [arg_1]	count=2
function_arg	file paths [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] trainer ||| [function_2] [function_1]	count=7
module	constructor of ||| python debug cli	count=1
function	shape for input and ||| in out shape	count=1
function	[function_1] control flow ||| [function_2] [function_1]	count=2
arg	that propagates x ||| x y	count=1
function	particular plugin asset from ||| asset	count=1
function_arg	[function_1] value of ||| [arg_2] [function_1]	count=1
function	the total loss ||| total loss	count=4
function	[function_1] column filled ||| [function_2] [function_1]	count=4
arg	the coordinator ||| coord	count=1
class	update ||| or step timer	count=1
arg	new _roundrobinstrategy ||| num_tasks	count=1
function	all ||| type	count=1
function	from a string ||| from string	count=3
arg	added input ||| input_keep_prob output_keep_prob state_keep_prob	count=1
class	or ||| indexed slices	count=1
function	range of ||| range	count=2
module	in args from ||| learn python learn	count=1
function	all are sessionrunhook ||| check	count=1
module	parses ||| tensorboard plugins projector	count=1
class	proximal gradient descent optimizer ||| proximal gradient descent optimizer	count=1
module	the ||| factorization python	count=1
function	softmax training ||| softmax	count=1
function	softmax cross entropy between ||| softmax cross entropy with logits	count=1
function	build ||| build standardized	count=1
arg	fn2() based on ||| fn1 fn2 name	count=1
module	create ||| framework python ops	count=1
function	an op to save ||| save	count=1
module	labeled tensor ||| labeled_tensor	count=1
module	specified by the given ||| python slim	count=1
arg	a debugdumpdir object ||| debug_dump tensor_filters	count=1
arg	a pure-decoding option ||| initial_state cell num_symbols	count=1
arg	creates batches ||| accept_prob_fn batch_size	count=1
arg	multiple devices ||| filename_tensor per_device restore_sequentially reshape	count=1
arg	target tensor ||| target	count=1
module	updates internal [module_2] ||| [module_1] [module_2]	count=4
function	the node from which ||| node	count=1
function	invalid ||| invalid number	count=1
arg	distribution shifted [arg] ||| shape [arg]	count=3
class	test ||| estimator test	count=2
module	sequence ||| contrib keras python	count=1
function_arg	true if [arg_2] ||| [arg_2] [function_1]	count=14
function	[function_1] features and ||| [function_2] [function_1]	count=5
function	[function_1] the standard ||| [function_2] [function_1]	count=1
function	to a tensor ||| tensor	count=3
function	variance for ||| var	count=1
function	added to index of ||| to index	count=1
function	connected input tensors ||| connected inputs	count=2
arg	variable_def ||| variable_def	count=1
function	[function_1] additional logistic ||| [function_1] [function_2]	count=1
function	ops ||| regex	count=1
function	reshaping behavior ||| real valued column reshaping	count=1
arg	labels and [arg_2] ||| [arg_1] [arg_2]	count=3
arg	verifies the second-order gradients ||| output_sizes window_rows	count=1
function	a scope that changes ||| scope	count=1
function	delete ||| delete	count=1
function	reduce ||| reduce	count=2
module_class	[module_1] [class_2] ||| [module_1] interactive [class_2]	count=1
function	[function_1] to operation ||| [function_2] [function_1]	count=4
module	version with default ||| learn learn_io	count=1
function_arg	[function_1] annotation ||| [function_1] [arg_2]	count=4
function_arg	unary [arg_2] ||| [arg_2] [function_1]	count=3
module	dict symbol name -> ||| tools docs	count=1
function	the default [function] for ||| get default [function]	count=2
function	predict [function_2] ||| [function_1] [function_2]	count=5
function_arg	values of [arg_2] ||| [arg_2] [function_1]	count=2
function	a hook ||| run hook	count=1
function	restart ||| restart	count=1
function	the ||| regex	count=2
function	range ||| range	count=5
function	one column [function_2] ||| [function_1] [function_2]	count=1
function	reads [function_2] ||| [function_2] [function_1]	count=2
function	finished ||| end	count=1
arg	encoder ||| loop_function	count=1
function	parameters in a ||| count total params	count=2
module	instantiates ||| keras python keras	count=1
function	can save and reload ||| save	count=1
class	if the timer ||| second or step timer	count=1
function	values of ||| setup values	count=1
function	tensorarraygather ||| tensor array gather	count=1
module	inner ||| python layers	count=1
function	non-negative int32 [function_2] ||| [function_1] [function_2]	count=1
class	remap ||| graph view	count=4
class	represented by this operator ||| operator scaled	count=1
arg	z ] ||| z	count=1
arg	list of texts to ||| texts mode	count=1
class	whether ||| node stepper	count=1
module	regression ||| contrib learn python learn utils	count=1
module	and ||| contrib learn python learn preprocessing	count=2
function	are recorded in command ||| from command	count=1
module	the vocabulary dictionary and ||| learn python learn	count=1
arg	v is ||| v	count=2
class	initializes ||| summary saver	count=1
module	with ||| contrib learn python learn learn_io	count=2
function	valued columns ||| valued columns	count=2
function	representing the shape ||| shape	count=1
function	of columns ||| columns	count=1
function	row factor shards ||| row factors	count=2
function	[function_1] precision@k ||| [function_1] precision [function_2]	count=2
class	keys and ||| sharded mutable dense hash	count=1
class	operator to ||| linear operator	count=2
module	constant ||| contrib layers python layers	count=1
function	returns number ||| get	count=1
function	tensor version ||| valid	count=1
arg	labels to ||| labels	count=1
function	switch for [function_2] ||| [function_2] [function_1]	count=2
class	graph element ||| node stepper	count=1
function	computes ||| compute	count=6
class	batch ||| pdbase	count=1
class	context ||| context	count=1
arg	run and ||| run	count=5
arg	forward step for ||| input_data input_h input_c params	count=1
function	[function_1] status ||| [function_1] [function_2]	count=1
function	graph and ||| graph	count=1
function	download the data ||| maybe download	count=1
function	and names that will ||| and slice inputs	count=1
function	raises a static valueerror ||| static	count=1
function	record that the ||| record	count=1
class	with ||| optimizer hook test	count=1
function	csv file [function_2] ||| [function_1] [function_2]	count=4
arg	this handle ||| graph handle dtype	count=2
class	for node-status ||| stepper cli	count=1
class	with ||| multiplexer	count=1
function	type float32 ||| float	count=1
function	tensors ||| zero state tensors	count=1
function_arg	tensor name [arg_2] ||| [arg_2] [function_1]	count=1
function	locate ||| locate	count=1
function	input key to ||| preprocess input	count=1
function	allowed using client feed ||| tensor feed	count=1
function	with respect to sparse ||| sparse recall at top	count=1
class	this cell output dimension ||| fused cell	count=1
module	returns ||| estimator inputs queues	count=1
arg	audio by adding it ||| audio	count=1
class	add ||| saver builder	count=3
function	into raw ||| to raw	count=1
arg	v is a ||| v	count=1
module	[module_1] cell and ||| [module_1] [module_2]	count=2
module	for proper shape values ||| ops distributions	count=1
function	the current weights ||| get weights	count=2
arg	and a target ||| target decorator_func decorator_name	count=1
class	all _composablemodel ||| composable model	count=1
function	possible input [function_2] ||| [function_2] [function_1]	count=2
function	event [function_2] ||| [function_1] [function_2]	count=1
function_arg	to use [arg_2] ||| [function_1] [arg_2]	count=2
function	for binary ||| binary	count=1
function	digamma function ||| digamma	count=1
arg	in texts in ||| texts	count=1
function	into predict ||| predict	count=1
function	set the shapes ||| set	count=1
arg	specified min ||| clip_value_min clip_value_max name	count=1
function_arg	code [arg_2] ||| [arg_2] [function_1]	count=1
function	linked ||| from regex	count=2
class	the raw documents ||| processor	count=1
function	values in a ||| output values	count=2
class	output dropout ||| dropout wrapper	count=1
class	run to perform a ||| composable model	count=1
function	file against ||| file	count=1
function	their defs from ||| create nodes map	count=1
module	np ||| contrib factorization python ops	count=1
function	specificity [function_2] ||| [function_2] [function_1]	count=3
arg	actual [arg_2] ||| [arg_2] [arg_1]	count=1
function	the input ||| input	count=6
function_arg	[function_1] term to ||| [function_1] [arg_2]	count=4
function	exception ||| assert has	count=1
function	sparsedensecwisemul ||| sparse dense cwise mul grad	count=2
function	for a checkpoint file ||| for	count=1
function_arg	[function_1] the event ||| [function_1] generator [arg_2]	count=3
function	sample ||| sample	count=5
function	operation within the given ||| within	count=1
arg	selects row and col ||| project_row	count=1
arg	tf nn softmax_cross_entropy_with_logits ||| logits onehot_labels weights label_smoothing	count=1
arg	an ||| cell_type num_units	count=1
function	connect the previously copied ||| connect ops	count=1
function	linear_model_fn but returns ||| model fn with model fn	count=2
function	a given command prefix ||| command prefix	count=1
function	computes the root ||| streaming root	count=1
function	use the sdca optimizer ||| sdca	count=1
function_arg	[function_1] input ||| [function_1] [arg_2]	count=4
arg	values are true ||| values	count=2
function	returns whether a tensor ||| is	count=1
function	and resets the global ||| reset	count=1
function	[function_1] bucketized column ||| [function_2] [function_1]	count=4
module	of ||| contrib framework python ops	count=16
module	and previous output tensors ||| grid_rnn python ops	count=1
module	instantiate a keras tensor ||| contrib keras python keras	count=1
function	[function_1] validity ||| [function_2] [function_1]	count=4
function	broadcast leading ||| broadcast	count=1
function_arg	[function_1] in given ||| [function_1] [arg_2]	count=5
function	distance to ||| distance to clusters	count=2
function	to vector with ||| to vector	count=4
function	returns local ||| local	count=1
function	single [function_2] ||| [function_2] [function_1]	count=10
function_arg	check the [arg_2] ||| [arg_2] [function_1]	count=1
arg	a riemann sum ||| num_thresholds	count=2
function	sparse feature [function_2] ||| [function_2] [function_1]	count=1
function	linear_model_fn but ||| model fn ops	count=2
function	the string_to_hash_bucket op to ||| string to hash bucket fn	count=1
function	tree of python ||| tree	count=1
module	(e g "matmul") ||| python framework	count=1
class	given ||| dump dir	count=1
function	proto match ||| proto	count=1
class	single iteration ||| gmm algorithm	count=1
arg	the specified dimension ||| dim epsilon scope	count=1
module	as ||| learn python learn estimators	count=20
class	binary ||| binary	count=1
module	image ||| python keras	count=1
function	to define ||| define	count=1
class	[class_1] packed tensor ||| [class_2] [class_1]	count=4
function	a lookup table ||| table from	count=1
function	for ||| valid sample	count=1
function	returns ||| add	count=1
function	per step true positives ||| true positive	count=1
function	all the variables in ||| variables	count=1
function	proper shape ||| maybe	count=1
function	[function_1] difference ||| [function_1] [function_2]	count=4
module	of the tensor ||| labeled_tensor python ops	count=2
module	graphdef and ||| framework	count=1
function_arg	[function_1] values ||| [function_1] proper iterable [arg_2]	count=1
function	wrap ||| maybe wrap custom	count=1
function	embeddings [function_2] ||| [function_1] lookup [function_2]	count=2
function_arg	[function_1] from thumbnails ||| [arg_2] [function_1]	count=4
module	the ||| summary writer	count=2
arg	to a hdf5 file ||| filepath overwrite include_optimizer	count=1
function	read ||| read keyed	count=2
class	a queue element ||| queue	count=2
function	the volume contained ||| resize volumes	count=1
class	classifier ||| kernel linear classifier	count=2
function	[function_1] interval to ||| [function_1] [function_2]	count=1
arg	a filtering function ||| filterfn	count=1
class	a dimension that ||| dimension	count=1
module_class	[module_1] accumulator ||| [module_1] ops [class_2]	count=1
function	sharded variables ||| sharded variable	count=1
function	ndtri has finite gradients ||| ndtri finite gradient	count=1
function	step true positives for ||| true positive	count=1
class	tests ||| precision test	count=3
arg	respects ||| rename	count=1
function	a tensor [function_2] ||| [function_2] [function_1]	count=8
function	creates default [function_2] ||| [function_2] [function_1]	count=3
class	generates a chrome ||| timeline	count=1
class	multivariate normal distribution on ||| multivariate normal tri l	count=1
function	linked ||| filter	count=1
class	sure we don't ||| upgrade files	count=1
class	an embedding ||| embedding	count=1
module	the sequence-to-sequence model ||| contrib legacy_seq2seq python	count=4
arg	metagraphdefs [arg] unit test ||| tester [arg]	count=1
function	serving ||| serving	count=1
function	targets ||| classification targets	count=1
module	have a ||| tools	count=1
function	asset tensors ||| asset tensors	count=1
class	the value tensor based ||| tensor	count=1
function	[function_1] checkpoint ||| [function_2] [function_1]	count=13
class	rnn ||| rnn	count=1
module	for proper ||| ops	count=1
arg	the command ||| command	count=1
function	updates ||| set	count=1
arg	would ||| batch_size num_epochs	count=1
function	per step false positives ||| streaming sparse false positive at k	count=1
module	slice ||| keras python keras engine	count=1
function	check the rank ||| check rank	count=2
module	export ||| python learn utils	count=1
function	loop invariant ||| loop constant enter	count=1
module	single run return ||| backend	count=1
module	the tensors at the ||| graph_editor	count=1
class	that failed if ||| error	count=1
arg	colocate_gradients_with_ops ||| colocate_gradients_with_ops	count=1
class	the monitored [class_2] ||| [class_2] [class_1]	count=1
module	internal [module_2] ||| [module_1] [module_2]	count=4
function_arg	a matmul [arg_2] ||| [function_1] shape [arg_2]	count=1
function	with sparse features and ||| sparse features with	count=1
function	inputs of the signaturedef ||| inputs tensor info from meta graph def	count=1
arg	verifies that cpu and ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
function	tf placeholder ||| make placeholder from dtype and shape	count=1
arg	a specified min and ||| clip_value_min clip_value_max name	count=1
arg	event generator ||| generator query_for_tag	count=2
module	the event ||| python	count=1
arg	tf learn dataframe ||| cls pandas_dataframe num_threads enqueue_size	count=1
function	file in a ||| file	count=1
function_arg	enqueue [arg_2] ||| [arg_2] [function_1]	count=1
module	of the specified ||| python ops	count=1
function	most recent savedmodel ||| get most recent	count=1
function	computes the multivariate digamma ||| digamma	count=1
function	see tf local_variables_initializer ||| initialize local variables	count=1
function	returns the broadcasted static ||| broadcast static	count=1
arg	subgraph for this handle ||| handle dtype	count=1
arg	a lower triangular ||| diag tril event_ndims	count=1
function	rhs, given cholesky ||| cholesky	count=1
module	shape values then ||| python	count=1
class	tensorflow tensor ||| tensor flow	count=1
function	the tokens ||| tokens	count=1
function	verifies the ||| verify	count=3
arg	m ||| m	count=1
class	a dense tensor ||| sparse	count=2
function	of file ||| get file	count=1
function	returns list [function_2] ||| [function_1] [function_2]	count=2
class	make ||| files	count=1
function	the connected input tensors ||| connected inputs	count=1
function	a queue ||| queue	count=1
class	the ||| operation	count=2
function	input tensor is ||| tensor input	count=1
function	returns a function that ||| get feed dict	count=1
function	list recipients ||| list recipients	count=1
arg	one level of nesting ||| list_of_lists	count=1
function	placeholder for the graph ||| placeholder	count=2
function	[function_1] [function_2] if it's valid otherwise ||| [function_1] [function_2]	count=2
function	inner cell used in ||| cell	count=1
arg	input samples ||| x batch_size verbose	count=3
function	[function_1] the output ||| [function_2] [function_1]	count=6
module	get ||| rnn python ops	count=1
function	a function [function_2] ||| [function_2] [function_1]	count=6
function	or create [function] variable ||| get [function]	count=1
function	non-reference dtype based on ||| base	count=1
module	[module] category ||| contrib learn [module] learn	count=1
module	of ||| distributions python	count=1
arg	a [arg_2] ||| [arg_1] [arg_2]	count=1
function_arg	in ts0 ||| ts ts0	count=1
arg	of a ||| ops	count=1
module	determining the current ||| contrib keras python keras	count=1
function	_guideref from the files ||| guide	count=1
function	a dict containing ||| dict to	count=1
module	dict symbol name ||| tools docs	count=1
arg	estimator to ||| estimator	count=1
class	adam optimizer ||| adam optimizer	count=2
function	the old values of ||| values	count=1
function	that automatically packs arguments ||| autopacking	count=1
function	tree of ||| tree	count=1
class	keys and values ||| mutable dense hash	count=1
function	necessary the ||| get or	count=1
function	a layer based ||| get layer	count=1
function_arg	[function_1] tensor with ||| [arg_2] [function_1]	count=2
class	initializes ||| step waiter hook	count=1
function	looks up embeddings ||| embedding lookup	count=2
function	[function_1] inside ||| [function_1] [function_2]	count=1
module	batch of ||| ops distributions	count=3
function	signaturedef ||| graph def	count=1
arg	[arg_1] device device ||| [arg_1] [arg_2]	count=3
function	lookup helper ||| embedding lookup	count=1
function	return indexies of ||| fit transform	count=1
function	with run time shape ||| graph shape	count=1
function	a static valueerror ||| static	count=1
class	table ||| table	count=7
class	in ||| graph	count=1
function	strings into int64 indices ||| string to	count=1
arg	a single line of ||| line font_attr_segs	count=1
function	a sprite ||| make sprite	count=1
class	the timer ||| or step timer	count=1
function	dense tensor [function_2] ||| [function_1] [function_2]	count=1
function	tensor in the ||| tensor	count=1
function	predictions with respect ||| precision	count=4
function	return tensor version ||| valid	count=1
function	gradient for ||| grad grad	count=1
arg	and a pure-decoding option ||| initial_state attention_states cell	count=1
function	ordereddict ||| convert collection to dict	count=1
module	transforms each ||| contrib	count=1
class	a 1 ||| bernoulli	count=1
module	grayscale ||| python ops	count=1
arg	recall@k and precision@k ||| predictions_idx k class_id	count=1
arg	[arg_1] def ||| [arg_1] [arg_2]	count=1
module	each text ||| python keras	count=1
module	two lists of ||| labeled_tensor python ops	count=1
class	test ||| linear operator derived class test	count=2
module	returns lists of the ||| python ops	count=1
module	integrate ||| integrate python	count=1
arg	screen output if ||| output	count=1
function_arg	size histogram [arg_2] ||| [function_1] [arg_2]	count=2
function	names of the items ||| items	count=1
module	of unique ||| python ops	count=1
module	extract ||| debug cli	count=1
arg	other ||| other	count=8
arg	between the labels and ||| labels weights metrics_collections	count=2
module	core version with default ||| python learn learn_io	count=1
module	of ||| contrib learn python learn preprocessing	count=2
module	that graph building ||| tensor_forest hybrid	count=1
arg	a tensor ||| tensor dtype	count=1
arg	necessary to compute tensor ||| tensor layer node_index	count=1
function	phase and ||| phase	count=2
function	help [function_2] ||| [function_2] [function_1]	count=3
class	handler with the name ||| item handler	count=1
function_arg	the stochastic [arg_2] ||| [arg_2] [function_1]	count=1
class	returns an input_fn that ||| kmeans test	count=1
function	for a sequence ||| sequence	count=1
function	return indexies of ||| fit	count=1
function	then return tensor version ||| maybe assert valid	count=1
class	[class_1] [class_2] ||| [class_1] [class_2] on	count=4
function	the confusion [function_2] ||| [function_2] [function_1]	count=1
class	table outputs the corresponding ||| mutable dense hash table	count=1
class	and/or output dropout ||| dropout	count=1
function	transform_input ||| produce output series	count=1
function	docstring [function_2] ||| [function_2] [function_1]	count=1
function_arg	[function_1] train ||| [arg_2] [function_1]	count=3
arg	that subscribes [arg_2] ||| [arg_2] side_effects [arg_1]	count=4
module	the execution with additional ||| python	count=1
arg	returns label ||| labels label_name	count=1
module	of ||| contrib learn python learn	count=1
function	an arg_scope ||| arg scope	count=1
function	definition if [function_2] ||| [function_1] [function_2]	count=1
module	reads ||| python learn learn_io	count=1
function	sparsetensor objects ||| sparse	count=2
function_arg	variable [arg_2] ||| [function_1] apply sparse grad [arg_2]	count=1
function	client feed ||| feed keys	count=1
module	graph ||| contrib graph_editor	count=1
function	op for ||| op	count=5
function	[function_1] zoom of ||| [function_1] [function_2]	count=2
function	a variable ||| variable	count=3
function	has ||| output v2 has	count=1
function	[function_1] services ||| [function_2] [function_1]	count=3
class	watch options ||| watch options	count=1
module	or tensorshape object[s] ||| seq2seq	count=1
function	presence of python ||| loop grads	count=1
function	unspecified ||| dims	count=1
arg	value of a variable ||| value	count=1
function	to save ||| save ops	count=2
function_arg	matrix [arg_2] ||| [arg_2] [function_1]	count=6
arg	op was marked as ||| scope op	count=1
arg	create a new _roundrobinstrategy ||| num_tasks	count=1
arg	return indexies ||| x	count=1
function	the tensors linked ||| filter ts	count=1
module	graph ||| contrib tensor_forest	count=1
function	tf examples ||| columns from examples	count=1
arg	[arg_1] op2 ||| [arg_1] [arg_2]	count=3
class	node-status labels ||| cli	count=1
module	event to the ||| python	count=3
arg	check the path ||| path	count=1
function_arg	less than [arg_2] ||| [function_1] values [arg_2]	count=1
arg	a fakebigqueryserver ||| address port	count=1
function	get tensor from the ||| get tensor	count=1
arg	precision@k ||| predictions_idx class_id weights	count=1
function	single ||| test on	count=1
function	ops ||| filter ts from	count=1
arg	with provided ||| feed_fn	count=1
arg	make ||| y input_fn feed_fn	count=1
function	kl ||| kl	count=1
module	image s by ||| contrib image	count=1
arg	in parent [arg_2] ||| [arg_2] [arg_1]	count=2
function	dtypes for each ||| dtypes	count=2
arg	new ||| name shape collections	count=1
function	19-layers ||| 19	count=1
module	creates training and ||| learn ops	count=1
function	a deconv layer ||| get deconv	count=1
function	inputs ||| list inputs	count=1
function	a maximum average ||| average	count=1
function	all ||| hooks type	count=1
module	batch [module_2] ||| [module_1] [module_2]	count=2
function	get an operatorpdidentity ||| get identity	count=1
function	the mean squared error ||| streaming mean squared error	count=1
function	for input ||| one input value	count=2
function	2 with ||| class	count=3
function	sort a list of ||| sort dump data	count=1
function	for node-status labels ||| status	count=1
function	model ||| model	count=15
arg	of a graph element ||| element	count=1
function	the fingerprint concatenation has ||| hashed output v2 has	count=1
module	integers ||| contrib keras python keras	count=1
module	the length ||| python	count=1
module	keras ||| keras	count=4
function_arg	from a [arg_2] ||| tools docs reference resolver [function_1] [arg_2] doc_index	count=1
module	exit ||| python ops	count=1
function	auc ||| auc	count=4
function	-> ||| guide	count=1
function	calculates false positives ||| sparse false positive at k	count=1
function	values then return ||| maybe assert valid	count=1
function	a richtextlines object ||| lines from rich	count=1
arg	a kernellinearclassifier ||| feature_columns model_dir n_classes	count=1
function	debug_urls value for ||| urls	count=1
function	precision@k ||| top k	count=2
function	verifies that [function_2] ||| [function_2] gradient [function_1]	count=1
function	the projections ||| get projections	count=1
function	dict symbol ||| index	count=1
arg	[arg_1] elements from ||| [arg_2] [arg_1]	count=4
function_arg	[function_1] thumbnails and ||| [function_1] [arg_2]	count=4
function	x ||| xw plus b v1	count=1
function	waits for model ||| wait for	count=1
function	spec for [function_2] ||| [function_1] [function_2]	count=1
module	tensor for the ||| feature_column	count=1
module	dataframe with only ||| learn dataframe	count=1
class	it with ||| test	count=1
function	batchwise kl divergence ||| kl	count=1
function	request ||| request	count=1
function	a matrix with ||| matrix	count=1
module	shape values ||| ops	count=1
function	temporary [function_2] ||| [function_2] [function_1]	count=4
arg	boolean predicate pred ||| pred	count=1
function	list inputs ||| test list inputs non recursive no control	count=1
function	raises typeerror ||| hooks	count=1
arg	replacement nodes for input_node ||| input_node	count=1
class	only ||| utils	count=1
function	the confusion ||| confusion	count=1
arg	forward propagation for ||| x cs_prev h_prev w	count=1
function	static ||| to matrix static	count=1
class	function ||| function	count=5
function	a default [function_2] ||| [function_1] [function_2]	count=4
function	points of a tiny ||| points	count=1
function	should be allowed using ||| should	count=1
arg	actual [arg_2] ||| [arg_1] [arg_2]	count=1
function_arg	[function_1] conjugate prior ||| [function_1] [arg_2]	count=2
function_arg	[function_1] a func ||| [function_1] [arg_2]	count=1
module	equal ||| ops distributions	count=1
module	solves systems of linear ||| ops	count=1
function	an exit ||| exit grad	count=1
module	colocate_clip_ops_with_vars ||| contrib opt python	count=1
module	version ||| ops distributions	count=2
function	number [function_2] ||| [function_1] [function_2]	count=1
function	of ||| fit	count=1
function	to capture the output ||| test capture	count=1
class	regularization ||| sdca model	count=1
function	per step true positives ||| streaming sparse true positive at k	count=1
class	[class_1] [class_2] ||| [class_1] [class_2]	count=310
function	transformed ||| transformed	count=2
function	attribute ||| get attribute	count=1
function	[function_1] dimension ||| [function_1] [function_2]	count=10
arg	conjugate prior ||| prior scale	count=1
function	projects the [function_2] ||| [function_1] [function_2]	count=2
function	the current default graph ||| graph def	count=1
arg	for threads to ||| threads	count=1
function	[function_1] step update ||| [function_2] [function_1]	count=4
module	returns lists of the ||| linear_optimizer python ops	count=1
function	[function_1] urls for ||| [function_2] [function_1]	count=1
function_arg	[function_1] losses ||| [arg_2] [function_1]	count=4
function	embeddings of a ||| embedding	count=1
module	numpy ||| keras python keras preprocessing	count=1
arg	for details ||| path parent children	count=1
function	based ||| to	count=1
function	to a hparamdef ||| proto	count=1
function	[function_1] an embedding ||| [function_1] [function_2]	count=1
class	if the stack ||| stack	count=1
module	the ||| contrib losses python	count=1
function	non-control [function_2] ||| [function_2] [function_1]	count=4
function	specified line in the ||| line	count=1
function	process the [function_2] ||| [function_1] [function_2]	count=2
function	the column [function_2] ||| [function_2] [function_1]	count=5
arg	a given run ||| run	count=1
arg	to a file ||| filename tensor_names	count=1
arg	maps ||| default_value	count=3
module	then return ||| python	count=1
function	dense ||| test dense	count=1
module	distributed floating point number ||| specs	count=1
function	with static ||| static	count=2
function	accumulated ||| prop accumulated	count=1
arg	the elements ||| name dtype	count=1
arg	the sufficient statistics ||| counts mean_ss variance_ss shift	count=1
module	of inverse ||| python ops	count=1
arg	a cell with ||| cell num_proj	count=1
arg	prior ||| prior scale s n	count=1
function	all lines ||| readlines	count=1
module	matrix data as input ||| learn python learn estimators	count=5
arg	offset in the ||| offset	count=1
module	transforms each ||| contrib keras	count=1
function	correction and update ||| correction and moments	count=1
function	return the handle ||| session handle	count=1
function	returns the proto_type for ||| proto type	count=1
arg	over a ||| y sample_weight	count=1
module	return tensor version ||| ops distributions	count=1
arg	hints argument ||| hints	count=1
function	resourcevariable ||| to proto fn	count=1
arg	[arg_1] layer ||| [arg_1] [arg_2]	count=2
function_arg	<= 0 [arg_2] ||| [function_1] x [arg_2]	count=1
function	feeding into predict step ||| predict data feeder	count=1
arg	nn sigmoid_cross_entropy_with_logits ||| multi_class_labels weights	count=1
function_arg	device name [arg_2] ||| [function_1] [arg_2]	count=1
module	all the nodes of ||| graph_editor	count=1
arg	and precision@k ||| predictions_idx	count=2
function_arg	weights [arg_2] ||| [function_1] [arg_2]	count=1
arg	[arg_1] 5d ||| [arg_2] [arg_1]	count=1
function	control ||| get control	count=1
function_arg	[function_1] op is ||| [function_1] enter [arg_2]	count=2
function_arg	[function_1] of layers ||| [arg_2] [function_1]	count=5
module	instantiate this ||| python ops	count=1
class	a tensorarray ||| array	count=1
function	[function_1] string in ||| [function_2] [function_1]	count=3
module	and previous output ||| contrib grid_rnn python	count=1
arg	loss [arg_2] ||| [arg_1] [arg_2]	count=1
arg	match the given regex ||| regex	count=1
function	[function_1] proto ||| [function_2] [function_1]	count=3
function	a sqrt_solve ||| sqrt solve	count=1
arg	of given node according ||| node_name	count=1
function_arg	[function_1] by normalizing ||| [arg_2] [function_1]	count=5
function_arg	[function_1] co-existance ||| [arg_2] [function_1]	count=1
module	1 outcome (vs 0) ||| python	count=1
function	a tf [function_2] ||| [function_2] [function_1]	count=8
arg	migrates ||| checkpoint_from_path checkpoint_to_path write_v1_checkpoint	count=1
module	gets ||| python training	count=1
arg	[arg_1] compute tensor ||| [arg_2] [arg_1]	count=2
module	dimension [module] tensor ||| [module]	count=1
class	the stack is ||| graph stack	count=1
module	layer ||| keras engine	count=7
function	a rank irfft ||| irfft	count=1
module	a savedmodel ||| python saved_model	count=1
function_arg	a filename [arg_2] ||| [arg_2] [function_1]	count=3
class	adam [class_2] ||| [class_2] [class_1]	count=1
module	the given dicts ||| contrib learn python learn	count=1
function	finite [function_2] ||| [function_1] [function_2]	count=4
function	a vector with ||| vector	count=1
function	of metrics ||| metrics	count=3
arg	nn sigmoid_cross_entropy_with_logits ||| logits multi_class_labels	count=1
arg	h ||| h	count=1
class	base feature ||| feature column	count=1
class	lstm on ||| lstmblock	count=1
function	computes the maximum of ||| max	count=1
arg	original ||| original	count=1
function	to ops ||| regex	count=1
function	partitioner to [function_2] ||| [function_2] [function_1]	count=3
module	list of ||| ops losses	count=1
module	bytes ||| python debug cli	count=1
class	make sure we don't ||| test upgrade files	count=1
arg	values to ||| values	count=3
module	of tensors corresponding to ||| factorization python ops	count=4
function	a new checkpoint ||| new checkpoint	count=2
arg	denominator ||| denominator	count=2
module	dataframe with ||| learn python learn dataframe	count=1
module	the specified shape ||| python	count=1
class	make sure we don't ||| upgrade	count=1
function	cycling works ||| cycling	count=1
class	transform to the ||| transform	count=2
function	maximum of ||| reduce max	count=1
function	cluster ||| cluster	count=3
function	[function] variable ||| get [function]	count=1
function_arg	graph and [arg_2] ||| [function_1] [arg_2]	count=1
function	a concat node with ||| concat node	count=1
arg	src_dir and ||| src_dir	count=1
function_arg	minimize [arg_2] ||| [arg_2] [function_1]	count=2
module	create ||| training	count=1
function	header ||| header from ops and	count=1
function	invalid indices in ||| invalid indices	count=1
arg	through the rewriter and ||| float_graph_def input_map output_names log_graph	count=1
module	default keras ||| keras python keras	count=1
function	model's input shape ||| input shape	count=1
function	[function_1] input ||| [function_1] two [function_2]	count=3
function	in command ||| command	count=2
class	[class] root directory ||| [class]	count=3
function	[function_1] flow ||| [function_1] [function_2]	count=12
module	previous output tensors ||| contrib grid_rnn python ops	count=1
function_arg	dynamic shape [arg_2] ||| [function_1] [arg_2]	count=1
function	tf placeholder ||| make placeholder	count=2
class	a table ||| interface	count=1
arg	estimator to [arg_2] ||| [arg_1] [arg_2]	count=1
function	[function_1] weight ||| [function_1] [function_2]	count=6
module	and session and runs ||| contrib learn python learn	count=1
module	matrix of ||| ops	count=1
arg	up the feeds ||| feeds	count=1
function	a flow start event ||| flow start	count=1
function_arg	specificity at [arg_2] ||| [arg_2] [function_1]	count=1
function	for a rank irfft ||| for irfft	count=1
class	r batch systems ||| operator pdbase	count=1
function	used to normalize the ||| normalizer fn	count=1
function	a tf placeholder for ||| make placeholder from dtype and shape	count=1
class	of ||| indexed	count=1
function	product ||| mul	count=1
function_arg	[function_1] a ||| [function_1] [arg_2]	count=1
module	tensor ||| python platform	count=1
function	of the first ||| t0	count=1
class	this transform to ||| flow transform	count=1
function	given task in ||| task	count=1
module	produces this ||| framework	count=1
class	test ||| rnncell test	count=1
arg	estimated size of the ||| print_info	count=1
module_class	[module_1] initializer as ||| [module_1] [class_2]	count=3
module	a batch of beams ||| python ops	count=1
function	merge with ||| merge with	count=2
function	an output [function_2] ||| [function_1] [function_2]	count=1
module	vocabulary dictionary ||| contrib learn python	count=1
function	wait for a checkpoint ||| wait for	count=1
module	indexies ||| preprocessing	count=1
function	list of shapes for ||| shapes	count=2
function	edges related [function_2] ||| [function_2] [function_1]	count=4
module	binary ||| layers python layers	count=1
module	the axes of two ||| ops	count=1
function	device of ||| device	count=1
function	control edges related ||| control edges of	count=2
function	the object's docstring ||| docstring	count=1
function	shape of the resultant ||| compute elemwise op output shape	count=1
function	to loop over ||| loop	count=2
function_arg	sets the [arg_2] ||| [arg_2] [function_1]	count=5
function_arg	attention and [arg_2] ||| [arg_2] [function_1]	count=1
function	dense and ||| dense and	count=1
function	an attribute [function_2] ||| [function_2] [function_1]	count=1
function	that a model_fn ||| create model fn	count=1
function	[function_1] not compatible ||| [function_1] [function_2]	count=1
function	containing state tensors ||| to state	count=1
module	const ||| tools	count=1
arg	the cells ||| cells	count=1
class	the directory and ||| dir	count=1
function	sets the current ||| set	count=2
function	on this dtype ||| dtype	count=1
module	sum ||| python	count=1
arg	row_seq ||| row_seq	count=2
module	axes of a ||| ops	count=1
class	declared dropouts ||| dropout wrapper	count=1
module	based on ||| python	count=1
function	a _sparsecolumn [function] configuration ||| sparse column [function]	count=1
function	and creates ||| create	count=1
function	log p x >= ||| log joint	count=1
function_arg	registers a [arg_2] ||| [arg_2] [function_1]	count=2
arg	with the same shape [arg_1] [arg_2] ||| [arg_1] [arg_2]	count=1
arg	b, producing ||| transpose_a transpose_b	count=2
arg	event [arg_2] ||| [arg_2] [arg_1]	count=2
arg	bias away from 0 ||| bias	count=1
function	[function_1] name for ||| [function_2] [function_1]	count=3
function	for full ||| full	count=1
function	and return floating point ||| assert float	count=1
class	[class] filtering function ||| [class]	count=2
function	[function_1] float ||| [function_2] [function_1]	count=1
function_arg	the tilegrad [arg_2] ||| [arg_2] [function_1]	count=1
function	session bundle ||| session bundle or saved model bundle	count=1
function_arg	labels [arg_2] ||| [function_1] [arg_2]	count=1
arg	a different dtype ||| dtype	count=1
function	gpu ||| gpu available	count=1
function	predictions by the ||| predictions	count=1
function	bias feature column filled ||| bias column	count=1
function	in a ||| in	count=1
module	name -> _guideref from ||| tools	count=1
function	regularization loss ||| unregularized loss	count=1
function_arg	a signaturedef [arg_2] ||| [function_1] [arg_2]	count=2
function	for batch and ||| batch	count=1
module	for node-status ||| python debug	count=1
class	[class_1] should be ||| [class_1] [class_2]	count=3
class	construct ||| low rank	count=1
arg	separate ||| eval_dict	count=2
function	for ||| get collection proto type	count=1
function	of input ||| inputs	count=1
function	raw params used ||| raw params	count=2
module	batch ||| keras python keras	count=1
function	forward loop ||| forward loop	count=1
module	of dimensions needed to ||| distributions python ops	count=1
function	tensor version ||| maybe assert	count=1
function	the image data ||| image data	count=2
function	dictionary ||| transform	count=1
function_arg	[function_1] console ||| [function_1] [arg_2]	count=4
function	_targetcolumn for ||| target	count=1
function	reshaping behavior ||| valued column reshaping	count=1
class	that the ui ||| curses	count=1
function	values added to index ||| to index	count=1
module	of underlying vector space ||| contrib distributions python ops	count=1
function	to specified invalid indices ||| by invalid indices	count=1
arg	entire ||| level noise_shape seed	count=1
function	evaluation against the ||| do eval	count=1
arg	cell ||| cell output_size	count=1
function	centered or ||| centered	count=1
function	a classification ||| classification	count=1
arg	get all the tensors ||| ops	count=1
function	returns the default learning ||| learning	count=1
module_class	new server ||| python training server	count=1
arg	through [arg] ||| inp partitions [arg]	count=1
arg	concatenates n elements ||| n name	count=2
class	and ||| categorical	count=1
arg	dict for the event ||| query_for_tag	count=1
function_arg	entropy between [arg_2] ||| [arg_2] [function_1]	count=1
function	a depth limit ||| depth limit	count=4
function	unstack the values ||| unstack	count=1
function	out of input and ||| input and	count=1
arg	a tensor [arg_2] ||| [arg_1] [arg_2]	count=2
arg	validates the output ||| filename file_format duration_sec samples_per_second	count=1
arg	table with keys ||| table	count=1
function	traverse an attribute ||| get attribute	count=1
function	items to ||| items	count=1
function	range are ignored ||| range	count=3
function	[function_1] zoom ||| [function_1] [function_2]	count=2
function	ops that match the ||| ts from	count=1
function	ready op used ||| ready op	count=2
module	all the operations ||| contrib graph_editor	count=1
function	argument to ||| matrix	count=1
function_arg	a dense [arg_2] ||| [arg_2] [function_1]	count=4
function	return the page ||| page	count=3
function	reshaping behavior of realvaluedcolumn ||| column reshaping	count=1
arg	out the code ||| selector_op	count=1
function	[function] 1d ||| forward [function] shape	count=3
function	information for ||| for	count=1
arg	a tensor with ||| tensor dtype	count=1
function	wrap ||| maybe wrap	count=1
function	[function_1] shear ||| [function_1] [function_2]	count=2
function	weighted sparse features ||| weighted sparse features	count=3
arg	for an ||| num_units target_column	count=1
function	metric [function_2] ||| [function_2] [function_1]	count=2
arg	x has ||| x data summarize message	count=1
function	register all [function_2] ||| [function_1] [function_2]	count=1
function_arg	[function_1] screen output ||| [arg_2] [function_1]	count=3
class	don't ||| upgrade files	count=2
class	add ||| grad loop state	count=1
arg	finds the filename ||| checkpoint_dir latest_filename	count=1
function	creates an rnn ||| rnn	count=1
arg	when new ||| coord	count=1
class	tests ||| cache test	count=1
function	[function_1] a benchmark ||| [function_2] [function_1]	count=1
arg	if op ||| scope op func	count=1
function	logistic regression [function_2] ||| [function_2] [function_1]	count=2
function	to create ||| create	count=2
function	search decoding ||| search decoder	count=2
arg	[arg_1] evaluable evaluable ||| [arg_2] [arg_1]	count=2
function	probably a ||| tensor flow	count=1
class	operator to ||| linear operator scaled identity	count=1
module	of beams into ||| seq2seq python ops	count=1
function	dictionary of custom ||| custom	count=1
arg	subgraph for this handle ||| graph handle dtype	count=1
function	[function_1] operation ||| [function_2] list [function_1]	count=3
function	and bias names ||| and bias names	count=3
module	batch matrix representing this ||| linalg python ops	count=1
function	[function_1] data directory ||| [function_1] [function_2]	count=3
module	used ||| layers	count=2
class	remove ||| flow context	count=1
class	tests ||| sparse precision test	count=3
function	symbol name -> ||| guide	count=1
module	labels ||| python debug cli	count=2
function	iff the jacobian ||| constant jacobian	count=3
function	graph [function_2] ||| [function_2] [function_1] meta_graph_def	count=2
arg	d1 and ||| d1	count=1
function	[function_1] [function_2] ||| [function_2] dump path and [function_1]	count=2
class	[class_1] descent ||| [class_1] [class_2]	count=2
class	ast ||| visitor	count=1
function	[function_1] into ||| [function_2] [function_1]	count=6
function	image data ||| image data	count=3
function	[function_1] value as ||| python feature_column check [function_1] [function_2]	count=2
function	array indices ||| array index	count=1
function	the page ||| class page	count=1
module	returns the proto_type ||| python	count=1
module_class	worker [class_2] ||| [module_1] worker [class_2]	count=2
class	of ||| operation	count=1
function	non-overlapping lanes for ||| lanes	count=1
class	initializes ||| dnnlinear combined regressor	count=1
function	placeholder for the graph ||| placeholder from tensor	count=1
module	of integers ||| keras python	count=1
function	mean of ||| reduce mean	count=1
module	rename ||| python lib io	count=1
arg	a sequence of symbols ||| ids vocab_size embed_dim sparse_lookup	count=1
function	caching of ||| test caching	count=1
function	for full batch ||| full batch	count=1
function	reference [function] ||| reference [function]	count=3
function	get a menuitem from ||| caption	count=1
arg	a looperthread that ||| timer_interval_secs target args kwargs	count=1
function	read in the current ||| read	count=1
function	verifies ||| verify hand	count=1
function	shape for input and ||| out shape	count=1
function_arg	[function_1] a numpy ||| [function_1] to floatx [arg_2]	count=1
arg	encoded ||| image_format image_shape	count=1
module	computes ||| python losses	count=1
class	returns a dimension ||| dimension	count=1
arg	conv ||| filters num_row	count=1
module	build ||| python estimator export	count=2
module	all the tensors ||| contrib	count=1
arg	onrunstartrequest ||| fetches feed_dict run_options run_metadata	count=1
function	a boolean series ||| series	count=1
function	pill ||| pills	count=1
module	used by [module_2] ||| [module_1] [module_2]	count=2
arg	labels and predictions ||| predictions labels weights	count=2
function	one [function_2] ||| [function_2] [function_1]	count=4
arg	best effort a ||| adjoint adjoint_arg	count=1
module	training ||| learn python learn	count=3
function_arg	to create [arg_2] ||| [function_1] weights [arg_2]	count=1
function	in the sharded ||| export sharded	count=1
class	set ||| linear operator udvhupdate	count=1
function	input key to ||| preprocess input exprs	count=1
arg	initialize the parameters for ||| use_peepholes share_time_frequency_weights cell_clip	count=1
function	a table [function_2] ||| [function_1] [function_2]	count=1
arg	first-in first-out order ||| capacity types shapes names	count=1
arg	for a graph element ||| element_name handle_node_names	count=1
function	method with as_iterable=true ||| as iterable	count=3
module	list of tensors that ||| contrib framework python ops	count=1
class	woodbury ||| vdvtlightweight operator pd	count=1
function	the tfdbg logo ||| tfdbg logo	count=1
function	the minimum of ||| min	count=1
module	sequence of integers ||| keras preprocessing	count=1
function	are sessionrunhook raises typeerror ||| hooks	count=1
arg	parameters ||| use_peepholes share_time_frequency_weights	count=1
function	op for [function_2] ||| [function_2] batch [function_1]	count=2
function	control flow ||| control flow	count=7
function	runs one evaluation ||| do eval	count=1
function	for mini [function_2] ||| [function_2] [function_1]	count=1
module	creates a transform that ||| learn dataframe transforms	count=1
arg	[arg_1] e ||| [arg_1] [arg_2]	count=5
module	an integer tensor ||| contrib keras python keras	count=1
function	serialize an n-minibatch ||| serialize many sparse	count=1
arg	tensor ||| v dtype name	count=1
function	should 404 ||| nonexistent	count=1
arg	token with [arg_2] ||| [arg_2] [arg_1]	count=1
module	returns a ||| layers	count=1
function	[function_1] events ||| [function_1] [function_2]	count=7
function	pandas ||| pandas	count=1
function_arg	the value [arg_2] ||| [arg_2] [function_1]	count=1
function	sqrt s for ||| sqrt	count=1
function	calls restoring things ||| unset all	count=1
function_arg	[function_1] summarysaver monitor ||| [arg_2] [function_1]	count=1
module	string ||| layers	count=1
function	are sessionrunhook ||| check hooks	count=1
module	creates training and ||| learn	count=1
arg	directory the paths ||| directory	count=1
arg	runs a microbenchmark ||| iters	count=1
arg	nn softmax_cross_entropy_with_logits ||| logits onehot_labels weights	count=1
arg	[arg_1] ops to ||| [arg_2] [arg_1]	count=2
function	fit ||| interp fit	count=1
function_arg	[function_1] [arg_2] ||| [function_1] inputs for rnn [arg_2]	count=1
function	[function_1] recall values ||| [function_2] [function_1]	count=4
function	[function_1] [function_2] ||| events discarded per [function_2] [function_1] than2	count=1
function	server ||| server	count=4
function	[function_1] without a ||| [function_1] [function_2]	count=2
function	the address [function_2] ||| [function_2] [function_1]	count=2
function	for training ||| training session	count=1
arg	cpu and ||| tensor_in_sizes filter_in_sizes conv_strides padding	count=1
function_arg	values [arg_2] ||| [arg_2] [function_1]	count=4
function	synthetic boolean_labels and ||| synthetic	count=1
function	version ||| version	count=1
class	the variable ||| variable	count=2
function	[function_1] the walsfactorization ||| [function_2] [function_1]	count=3
function	degrees of freedom in ||| df	count=2
arg	feeds [arg_2] ||| [arg_2] [arg_1]	count=8
arg	generates ||| data batch_size	count=1
function	if all ||| check hooks	count=1
module_class	[module_1] lstm ||| [module_1] [class_2]	count=16
module	learn the ||| python learn	count=1
function	actually ||| non	count=1
function	a while loop to ||| while loop	count=1
function	evaluates the model at ||| evaluate once	count=1
function	tensor of the ||| tensor	count=1
class	[class_1] file ||| [class_1] [class_2]	count=2
class	[class_1] optimizer ||| [class_2] [class_1]	count=8
function	returns whether this ||| is	count=1
function	[function_1] status ||| [function_2] [function_1]	count=1
function	referenceresolver [function] ||| [function]	count=1
function	a list of ||| list of op	count=2
class	tfrecordwriter writing to it ||| tfrecord writer	count=1
function	to extract command ||| get command	count=1
function	a time ||| time	count=1
module	build the mnist model ||| contrib factorization examples	count=1
function	within the given boundary ||| within boundary	count=1
module	number of dimensions corresponding ||| distributions python ops	count=2
function	binary classification ||| binary input	count=1
function_arg	kl for [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	to index [arg_2] ||| [function_1] [arg_2]	count=1
function	discards [function_2] ||| [function_2] [function_1]	count=2
function	symbol name ||| build	count=1
class	outer context recursively ||| context	count=1
function	status labels for ||| status labels	count=2
function	tensor ||| n to tensor	count=3
function_arg	exports the [arg_2] ||| [function_1] [arg_2]	count=4
arg	with parameter rate ||| rate validate_args	count=1
module	histogram ||| python ops	count=1
function	probabilities ||| proba	count=1
function	deepcopy of sparse_column_with_integerized_feature ||| sparse column integerized deep copy	count=1
function_arg	sum [arg_2] ||| [arg_2] [function_1]	count=10
function	computes a lanczos ||| lanczos	count=1
class	true if the timer ||| timer	count=1
class	process ||| guide parser	count=1
function	nodes that ||| nodes	count=2
function	operator ||| operator	count=2
class	optimizer ||| replicas optimizer	count=2
class	the summary ||| summary	count=1
function	raw [function_2] ||| [function_2] [function_1]	count=4
function	resourcevariable ||| proto fn	count=1
function_arg	product between [arg_2] ||| [arg_2] [function_1]	count=2
function	[function_1] to i ||| [function_2] [function_1]	count=4
module	of integers ||| python keras preprocessing	count=1
arg	to filename ||| filename	count=2
arg	the code ||| selector_op	count=1
module	of ||| python learn ops	count=1
function	proper shape values then ||| valid sample	count=1
function	string representing [function_2] ||| [function_2] readable [function_1]	count=1
function	a deepcopy of a ||| deep copy	count=1
class	by this operator to ||| operator identity	count=1
arg	type dtype ||| dtype	count=1
function	sparsetensor objects and ||| sparse	count=1
module	to ops that ||| graph_editor	count=1
function	get an ||| get	count=1
function	out of input ||| input	count=1
function	_definedfunction initialized from ||| from	count=1
class	id ||| weighted sparse column	count=1
arg	lower triangular matrix ||| tril event_ndims	count=1
class	total ||| total variation test	count=1
arg	1 or ||| name	count=1
module	menuitem from the ||| debug cli	count=1
function	before ||| batch begin	count=1
arg	highwaywrapper ||| couple_carry_transform_gates carry_bias_init	count=1
module	then the [module_2] ||| [module_1] [module_2]	count=1
arg	an optional batch_norm layer ||| inputs num_outputs kernel_size	count=1
function	the computed [function_2] ||| [function_2] [function_1]	count=1
arg	files given ||| has_header	count=1
function	global default if the ||| get default	count=1
arg	onehot_labels using tf one_hot ||| num_classes on_value off_value	count=1
function	input mask ||| get input mask	count=2
arg	a riemann sum ||| labels predictions weights num_thresholds	count=1
arg	tensor x along axis ||| x axis exclusive reverse	count=1
function	linear_model_fn but returns modelfnops ||| with model fn	count=2
function	step false positives ||| streaming sparse false positive at	count=1
arg	a cell with ||| cell output_size	count=1
arg	state_name ||| state_name value name	count=1
function	returns a function ||| get feed	count=1
function	of number [function_2] ||| [function_1] [function_2]	count=1
function	units ||| units	count=3
function_arg	[function_1] named ||| [arg_2] [function_1]	count=1
function	servers ensures appropriate communication ||| servers	count=1
module	two lists of unique ||| python ops	count=1
function	[function_1] output ||| [function_2] [function_1]	count=9
function	loads [function_2] ||| [function_2] [function_1]	count=4
arg	while maintaining the ||| outputs_collections scope	count=1
function	rnn and ||| rnn	count=1
function_arg	the sparsetensordensematmul [arg_2] ||| [function_1] [arg_2]	count=1
function	page and verify that ||| page	count=1
class	within [class] filtering function ||| [class]	count=1
function	strings ||| dtype string	count=1
module	graph ||| tools quantization	count=3
class	plugin ||| fake plugin	count=1
arg	create batches ||| batch_size capacity enqueue_many	count=1
function	train ||| simple train	count=1
function	logistic regression ||| make logistic	count=1
function	override to define the ||| define	count=1
function	[function_1] dict to ||| [function_1] [function_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] writer [arg_2]	count=3
function	numpy masking ||| versus numpy	count=1
module	returns a ||| python learn dataframe	count=1
function	the domain of this ||| domain	count=1
function	feature spec ||| feature spec	count=1
function	a sprite image from ||| make sprite image	count=1
function	and run [function_2] ||| [function_2] [function_1]	count=6
function	from a graph ||| from	count=1
function	returns the last dimension ||| last dimension	count=1
class	forward ||| loop state	count=1
module	returns ||| contrib keras python keras	count=1
function	a binary operation ||| binary op	count=2
function	of parameters in a ||| total params	count=1
class	"matmul") ||| operation	count=1
function	[function_1] page that ||| [function_2] [function_1]	count=1
class	normal ||| normal linear	count=1
class	for a single ||| summary to event	count=1
module	calculate ||| python training	count=1
function	build a [function_2] ||| [function_1] raw [function_2]	count=1
arg	an item ||| item	count=1
module	that ||| python learn	count=1
function	cholesky ||| cholesky	count=2
function	tuple with ||| create tuple	count=1
class	of a tree ||| tree	count=1
function	size [function_2] ||| [function_2] [function_1]	count=8
arg	ops to ||| ops	count=1
function	time shape ||| missing graph shape	count=1
function	[function_1] argument ||| [function_2] [function_1]	count=2
function	to a richtextlines object ||| lines from rich line	count=1
function	max pool along column ||| max pool along cols	count=1
arg	or index ||| index	count=1
arg	along [arg_2] ||| [arg_2] [arg_1]	count=1
function_arg	call [arg_2] ||| [arg_2] [function_1]	count=3
arg	graph_def into the ||| graph_def	count=1
function	input_fn appropriate for serving ||| serving input fn	count=1
module	evaluates ||| python keras	count=1
module	of beams ||| seq2seq python ops	count=1
function_arg	queue batch [arg_2] ||| [function_1] [arg_2]	count=3
class	the statistics ||| stats	count=1
function	make_linear_model() [function_2] ||| [function_1] two [function_2]	count=2
function	by the sqss for ||| for	count=1
class	represented dense [class_2] ||| [class_2] [class_1]	count=1
function	savedmodel ||| saved model	count=3
function	using client feed ||| tensor feed keys	count=1
class	initializes ||| combined regressor	count=1
arg	representation of the specification ||| spec inputs input_shape input_type	count=1
function	applies dropout ||| dropout	count=1
function	that ||| from	count=1
function	[function_1] existing variable ||| [function_2] [function_1]	count=1
module	erosion ||| python kernel_tests	count=1
arg	does nothing when ||| pred if_true if_false	count=1
function	step ||| step	count=18
arg	with the given dtype ||| shape dtype num_shards	count=1
function	infer the ||| infer state	count=1
class	node-status ||| stepper	count=1
function	proper shape values then ||| assert	count=1
function	collection_name ||| collection proto type	count=1
function	all the variables in ||| convert variables to	count=1
function	factor shards ||| factors	count=1
module	parse ||| tools docs	count=1
module	max of ||| python ops	count=1
arg	its inputs to ||| inputs	count=2
arg	if op was ||| scope op func	count=1
module	the mnist dataset ||| keras datasets	count=1
module	image ||| image	count=2
function	batchnormwithglobalnormalization ||| batch norm with global normalization grad	count=2
class	without extra ||| resnet utils test	count=1
module	true if this ||| python framework	count=1
function	gradient for the ||| grad	count=1
module_class	[module_1] optimizer ||| [module_1] [class_2]	count=4
class	a ||| test upgrade files	count=2
function	random initializer within the ||| initializer	count=1
function	column with ||| column with	count=2
class	of the base feature ||| feature column	count=1
function	input ||| obtain input	count=1
module	the hue [module] an ||| [module]	count=1
function	return the sessionmanager ||| session manager	count=1
function	real valued [function_2] ||| [function_2] [function_1]	count=7
arg	initialize a linearoperatortril ||| tril is_non_singular is_self_adjoint is_positive_definite	count=1
function_arg	[function_1] [arg_2] ||| [function_1] equal [arg_2]	count=5
module	then return tensor ||| python ops distributions	count=1
function	default values ||| default	count=1
class	quantized distribution representing y ||| quantized	count=1
function	precision values ||| precision	count=1
function	the device on which ||| device	count=1
function	for mini batch ||| mini batch	count=1
function	batchwise kl divergence kl(d1 ||| kl	count=1
module	compilation ||| contrib compiler	count=2
module	of integers ||| python ops distributions	count=1
class	eventaccumulator contains ||| mocking event accumulator test	count=1
arg	scrollable text ||| is_refresh highlight_regex	count=1
class	for every loop ||| while context	count=1
function	data type ||| dtype	count=1
arg	texts to a ||| texts mode	count=1
function	shape values then ||| valid sample	count=1
function	export that is ||| export version	count=4
function	print function for ||| tf print	count=1
arg	computes precision@k [arg_2] ||| [arg_2] labels [arg_1]	count=1
module	version with ||| learn learn_io	count=1
function	binary ||| binary	count=10
module_class	into the staging ||| python ops staging	count=1
function	diagonal ||| diag update	count=1
class	creates a deadlineexceedederror ||| deadline exceeded error	count=1
function	header for ||| header from ops and kernels	count=1
function	the output mask ||| output mask	count=3
module	return ||| contrib learn python learn	count=1
function	queue runners ||| start queue runners	count=2
function	calls ||| call	count=2
function	[function_1] override ||| [function_2] [function_1]	count=3
class	version ||| multinomial	count=1
arg	top-k predictions with ||| top_k_predictions	count=1
module	labeled ||| labeled_tensor python ops	count=3
module	s of ||| contrib keras python keras engine	count=3
function	reshape the [function_2] ||| [function_2] [function_1]	count=1
function	tensors linked to ops ||| filter ts from regex	count=1
function	to compute predictions ||| predictions	count=1
function	raw [function_2] ||| [function_1] [function_2]	count=4
class	tests ||| dnnlinear combined regressor test	count=5
function	[function_1] the configuration ||| [function_2] [function_1]	count=1
function	to a maximum average ||| average	count=1
module_class	of this [class_2] ||| [class_2] [module_1]	count=1
arg	to handle syncreplicashook ||| is_chief num_tokens	count=1
arg	cursesui based [arg_2] ||| [arg_2] [arg_1]	count=2
arg	the given name ||| name	count=2
function	the tfdbg [function_2] ||| [function_2] [function_1]	count=1
arg	dtype ||| shape dtype	count=1
arg	of base_type ||| base_type conversion_func	count=1
function	[function_1] with modulus ||| [function_1] [function_2]	count=1
function	of ||| sequences	count=1
function	computes the auc ||| auc	count=1
arg	sum the weights ||| weights metrics_collections	count=5
function	to a richtextlines ||| text lines	count=1
module	instance of ||| python ops	count=1
class	an event ||| summary to event transformer	count=1
module	ops leading to ||| python ops	count=1
function_arg	params [arg_2] ||| [arg_2] [function_1]	count=1
module	the matrix of ||| factorization python ops	count=1
module	constructor ||| python	count=2
module	of name ||| framework python ops	count=1
rep	[module_class_1] [function_arg_2] ||| [module_class_1] [function_arg_2]	count=3
arg	as the input tensor ||| data name	count=1
function	[function_1] details ||| [function_2] [function_1]	count=3
function_arg	[function_1] in tensor_list ||| [function_1] input producer [arg_2]	count=1
function	of source files with ||| source files	count=1
function	a global default if ||| default	count=1
function	to ||| filter ts from	count=1
module	shape values ||| python ops distributions	count=1
class	dict that ||| head	count=1
function	-> _guideref from ||| index	count=1
module	all ||| graph_editor	count=1
module	parameter ||| contrib distributions python	count=1
function	search ||| regex search with	count=1
function	base class ||| operator	count=1
function	gradients for "op" ||| get gradient	count=1
class	debug-wrapper session ||| base debug wrapper session	count=1
function	current position ||| tell	count=1
function	min or [function_2] ||| [function_1] [function_2]	count=4
function_arg	v3 [arg_2] ||| [arg_2] [function_1]	count=1
module	outcome ||| python ops distributions	count=2
function	writes graph_def to ||| write	count=1
function	batch and ||| keyed batch features	count=1
module	single ||| contrib learn python learn estimators	count=1
function	the broadcasted [function_2] ||| [function_1] [function_2]	count=4
arg	list of sequences into ||| sequences mode	count=1
module	of the ||| linalg python ops	count=2
function	for ||| maybe	count=1
function	of the resultant ||| compute elemwise op	count=1
function	real valued ||| optimizer real valued linear	count=1
function	[function_1] [function_2] cdf together ||| [function_1] [function_2]	count=1
function	that output a scalar ||| scalar	count=1
module	all are sessionrunhook raises ||| python	count=1
class	that the stepper ||| node stepper	count=1
function	the page ||| build class page	count=1
class	batch of ||| batch	count=1
arg	dynamicrnnestimator ||| problem_type prediction_type sequence_feature_columns context_feature_columns	count=1
function	[function_1] tensor is ||| [function_2] [function_1]	count=2
function	data [function_2] ||| [function_1] [function_2]	count=3
arg	a state saving ||| cell	count=1
module	for ||| python ops distributions	count=2
class	a pooling ||| pooling test	count=1
module	in this tensor ||| python framework	count=1
class	or tensor in ||| tensor flow	count=1
function	compression for large records ||| read large	count=1
function_arg	resourcevariable [arg_2] ||| [function_1] v [arg_2]	count=3
function_arg	[function_1] [arg_2] ||| [function_1] column [arg_2]	count=2
function_arg	assert the [arg_2] ||| [arg_2] [function_1]	count=4
function	bias ||| test bias	count=1
function	[function_1] squared ||| [function_2] [function_1]	count=8
function	default graph ||| graph def	count=1
function	the sum ||| reduce sum	count=3
function	[function] together ||| test basic [function]	count=1
arg	for precision@k ||| predictions_idx class_id	count=1
function	encodings for planes ||| planes	count=1
function	complex conjugate ||| conj grad	count=1
function_arg	input [arg_2] ||| [function_1] [arg_2]	count=1
class	initializes ||| control flow context	count=1
function	hash ||| hash	count=1
class	the deletion of this ||| handle	count=1
class	this data [class_2] ||| [class_1] [class_2]	count=1
function	evaluates the ||| eval	count=1
function	tf sparsetensor ||| sparse tensor	count=1
function	tensors linked ||| regex	count=1
function	define [function_2] ||| [function_1] [function_2]	count=5
function	computes the minimum of ||| min	count=1
function	spiral ||| spiral	count=2
function	proper shape ||| maybe assert	count=1
function	boots 3 servers ensures ||| test cluster spec propagation three servers one	count=1
module	fetch ||| python client	count=3
arg	the given slicing ||| slicing initializer dtype	count=1
arg	or fn2() based on ||| fn1 fn2 name	count=1
function	representation of the tfdbg ||| tfdbg	count=1
function	the master ||| master	count=1
function	pooling layer for 3d ||| pooling3d	count=1
function	returns a non-reference dtype ||| base	count=1
module	2d ||| keras python keras	count=1
function	updates the ||| update	count=3
function	labels outside the ||| three labels	count=3
module	tensor or list of ||| rnn python ops	count=1
function	a tensor to use ||| tensor	count=1
class	non-reference ||| dtype	count=1
function	[function_1] edge from ||| [function_2] [function_1]	count=3
arg	given value to ||| value dtype name preferred_dtype	count=1
function	graph, returns ||| get	count=1
module	input ||| contrib rnn python ops	count=1
class	r batch ||| pdbase	count=1
function	[function_1] placeholder for ||| [function_2] [function_1]	count=4
module	the saturation [module] an ||| [module]	count=1
function	the end of ||| end	count=3
class	update it with ||| test	count=1
module	this is where the ||| python	count=1
module	[module_1] the current ||| [module_1] [module_2]	count=8
function	create a local ||| init	count=1
arg	gradients for the ||| op grad	count=1
function	features ||| features arbitrary weights	count=2
function	[function_1] format convention ||| [function_2] [function_1]	count=5
function	[function_1] modulus ||| [function_2] [function_1]	count=2
arg	name unique [arg_2] ||| [arg_2] [arg_1]	count=1
function	writes metagraphdef ||| export meta graph	count=1
function	an existing variable with ||| variable	count=2
class	render ||| debug analyzer	count=1
function	axis order on a ||| axis order	count=1
function	gradient for ||| grad	count=2
arg	[arg_1] beta and ||| [arg_1] [arg_2]	count=4
arg	specified min and ||| clip_value_min clip_value_max	count=1
function	list [function_2] ||| [function_1] node without [function_2]	count=3
function	[function_1] the jacobian ||| [function_1] [function_2]	count=3
module	return dict symbol ||| docs	count=1
function	generate configuration ||| generate config	count=1
arg	respect to dense labels ||| labels	count=1
arg	that maps ||| default_value	count=1
module	proper shape values then ||| ops distributions	count=1
function	model function with support ||| model fn	count=1
function	either forward or backward ||| ndlstm base	count=1
module	keras tensors ||| keras	count=1
module	computes the peak memory ||| contrib memory_stats python ops	count=1
module	batch of ||| contrib distributions python ops	count=1
function	count the ||| count params	count=1
function_arg	dense [arg_2] ||| [function_1] [arg_2]	count=10
function	build an [function_2] ||| [function_1] [function_2]	count=3
function	presence of python loops ||| loop grads	count=1
module	of a variable ||| factorization python ops	count=1
module	to __init__ which gets ||| distributions	count=1
function	deregister a [function_2] ||| [function_2] [function_1]	count=1
class	data feeder ||| data feeder	count=1
class	given ||| dir	count=1
class	serves ||| tensor board wsgiapp	count=2
class	fill ||| box op test	count=1
module	learn the ||| python	count=1
function_arg	sprite image [arg_2] ||| [function_1] [arg_2]	count=3
function_arg	list [arg_2] ||| [arg_2] [function_1]	count=1
function	extraction by [function_2] ||| [function_2] values [function_1]	count=4
function	create and ||| create and	count=2
module	to tuples of ||| ops	count=1
module	name -> _guideref ||| tools docs	count=1
module	a sequence of integers ||| preprocessing	count=1
function	to the stochastic ||| stochastic	count=1
arg	saves ||| sess tags signature_def_map	count=1
function	wrap a call to ||| maybe wrap custom getter	count=1
arg	or fn2() based ||| fn1 fn2 name	count=1
module	a summary ||| summary	count=3
class	the event file ||| summary writer	count=2
module	cross-entropy loss using ||| contrib losses python losses	count=1
module	of a debug ||| debug	count=1
function	def from ||| from	count=1
function	a hook ||| hook	count=1
function	brightness ||| brightness	count=1
class	dump (event) file ||| tensor datum	count=1
arg	bias ||| bias	count=1
function	[function_1] image from ||| [function_2] [function_1]	count=3
function	loss for [function_2] ||| [function_2] [function_1]	count=13
arg	steps ||| noutput scope name	count=1
function	[function_1] phase ||| [function_1] [function_2]	count=4
arg	performs ||| x intensity row_axis col_axis	count=1
function	serverdef for this ||| def	count=1
function	run() call ||| run	count=2
function	[function_1] for training ||| [function_1] [function_2]	count=2
arg	registers [arg] unique ||| [arg]	count=1
function_arg	of metrics [arg_2] ||| [function_1] [arg_2]	count=3
function	fingerprint concatenation has collisions ||| hashed output v1 has collision	count=1
function	create and run ||| create and run	count=3
function	the regularization [function_2] ||| [function_2] [function_1]	count=1
function	to build ||| build	count=2
function_arg	[function_1] base_type ||| [arg_2] [function_1]	count=4
function	adjust [function_2] ||| [function_1] [function_2]	count=2
class	the stepper ||| node stepper	count=1
module	the mnist dataset ||| contrib keras python keras datasets	count=1
function	an exception on bad ||| test bad	count=1
function	feed conversion ||| conversion	count=1
function	the proto_type ||| collection proto type	count=1
function	gets an ||| get	count=1
module	a shape representing a ||| python framework	count=1
class	from the generator into ||| generator enqueuer	count=1
function	which reads [function_2] ||| [function_1] [function_2]	count=1
module	numpy image tensor ||| contrib keras python keras preprocessing	count=3
arg	two [arg_2] ||| [arg_1] [arg_2]	count=1
function	[function_1] linear ||| [function_2] [function_1]	count=4
class	transforms each ||| tokenizer	count=1
module	that with integer ||| python learn	count=1
function	[function_1] "operation" ||| [function_2] [function_1]	count=1
function	column [function_2] ||| [function_2] sparse [function_1]	count=1
class	the erosion function ||| erosion	count=1
function	sequence ||| texts to sequences	count=1
function	[function_1] labels ||| [function_2] [function_1]	count=13
class	dictionary ||| categorical	count=1
function	[function_1] sequence ||| [function_2] [function_1]	count=3
function	operations to read ||| read	count=4
function	numpy [function_2] ||| [function_2] [function_1]	count=2
class	sure we don't ||| upgrade	count=1
function	the kind [function_2] ||| [function_1] [function_2]	count=1
arg	an enter op ||| op	count=1
arg	graph ||| graph run_meta	count=1
function	returns the shape ||| shape	count=1
function	build an ||| build	count=3
function_arg	variables [arg_2] ||| [function_1] name [arg_2]	count=1
module	the ||| python feature_column	count=2
class	returns a shape based ||| tensor shape	count=1
class	be ||| slices	count=1
function	conv2d produce the ||| conv2d	count=1
class	the common config ||| config	count=1
function	[function_1] distribution as ||| [function_1] [function_2]	count=2
arg	with export_scope stripped ||| from_node_def export_scope unbound_inputs clear_devices	count=1
module	returns ||| python util	count=1
function	fit coefficients for ||| fit	count=1
function	[function_1] labels for ||| [function_2] [function_1]	count=5
module	the vocabulary dictionary ||| contrib learn	count=1
class	coordinatewise ||| one hot categorical	count=2
module	a ||| python ops distributions	count=2
function	tasks defined ||| tasks	count=1
arg	[arg_1] from graph_def ||| [arg_2] [arg_1]	count=2
function	[function_1] the diagonal ||| [function_2] [function_1]	count=1
arg	computes the percentage of ||| weights name	count=1
module	resnet ||| slim nets	count=1
module	generates ||| python slim data	count=1
module	from ||| contrib learn python learn estimators	count=1
function_arg	[function_1] of data ||| [function_1] [arg_2]	count=1
function	[function_1] name for ||| [function_1] [function_2]	count=3
function	weight and [function_2] ||| [function_2] [function_1]	count=4
function	dict into ||| dict to	count=2
function	converting objects of ||| conversion	count=1
module	_guideref ||| docs	count=1
arg	logits and ||| logits name	count=1
function_arg	create the [arg_2] ||| [arg_2] [function_1]	count=1
function	python traceback of node's ||| node traceback	count=1
function	step update ||| step	count=4
class	create ||| text line reader	count=1
function	applies natural exponential ||| natural exp	count=1
class	registry in a file ||| summary plugin asset	count=1
function	table that maps a ||| table from file	count=1
module	image s ||| image python ops	count=1
function	predictions for the input ||| predict	count=2
class	a graph ||| graph	count=1
module	this cell ||| contrib rnn	count=1
function	run1/add ||| health pills	count=1
function	of scalars in ||| count params	count=1
arg	single ||| x y sample_weight	count=1
function	then return tensor ||| maybe	count=1
arg	protocol buffer with a ||| name values collections	count=1
function	as ||| as tensor	count=1
arg	[arg_1] d2 ||| [arg_1] [arg_2]	count=1
function	second test [function_2] ||| [function_2] [function_1]	count=1
function	reshape ||| reshape	count=3
class	for ||| node stepper cli	count=2
module	a given directory ||| learn	count=1
function	g temporal convolution ||| conv1d	count=1
function	the example indices represented ||| example indices	count=1
function	[function_1] of op ||| [function_2] [function_1]	count=1
function	reduce it ||| reduce	count=1
function	returns the default schedule ||| get default schedule	count=1
function	to ||| to hash bucket fn	count=1
function	to the debug ||| debug	count=1
function_arg	[function_1] loop ||| [arg_2] [function_1]	count=1
function	start threads ||| start	count=1
arg	ndarray ||| numpy_array	count=1
module_class	the [class_2] ||| [module_1] ops tensor [class_2]	count=1
module	convert all elements of ||| python ops	count=1
function	flops ||| get logged ops	count=1
arg	ids in sampled_candidates ||| sampled_candidates num_true seed	count=1
function	add it ||| add op	count=1
function	a menuitem from ||| item	count=1
module	build the [module_2] ||| [module_1] [module_2]	count=8
function	build a [function_2] ||| [function_1] parsing [function_2]	count=1
function	resnet-101 ||| 101	count=1
module_class	[module_1] gradient descent ||| [module_1] [class_2]	count=6
function	inference for incomplete shapes ||| incomplete	count=1
module	computes ||| metrics python ops	count=1
module	from ||| debug	count=1
arg	output ||| tensor_in_sizes	count=4
function	for proper shape ||| maybe	count=1
function	the inputs of the ||| inputs	count=1
arg	tf one_hot ||| num_classes on_value off_value	count=1
arg	tensors are ||| tensors	count=2
module	context to ||| ops	count=1
arg	count of ||| count	count=1
function_arg	[function_1] the input ||| [function_1] [arg_2]	count=1
function	[function_1] of context ||| [function_2] [function_1]	count=1
function	before processing a ||| on batch begin	count=1
function	binary classification ||| binary input fn	count=1
function	table that ||| table	count=2
function_arg	for [arg_2] ||| [arg_2] [function_1]	count=1
function	np ||| np	count=1
class	enqueue ||| runner	count=2
function	[function_1] full covariance ||| [function_2] [function_1]	count=1
function	get an operatorpdidentity to ||| get identity	count=1
function	of bytes ||| bytes to	count=1
arg	a linearestimator object ||| feature_columns head model_dir weight_column_name	count=1
function_arg	[function_1] [arg_2] atomically ||| python lib io atomic [function_1] file [arg_2] contents	count=1
function_arg	[function_1] [arg_2] results through ||| [function_1] [arg_2]	count=1
arg	the op if ||| op	count=1
arg	x gradients ||| x	count=1
class	indexies ||| categorical processor	count=2
class	initialize ||| operator udvhupdate	count=1
class	if the shape is ||| shape	count=1
function	the nodes in ||| graph	count=1
module	each component of a ||| ops	count=5
module	the outputs ||| graph_editor	count=1
function_arg	converts a [arg_2] ||| [arg_2] [function_1]	count=6
function	return [function_2] ||| [function_1] [function_2]	count=1
function	plugin asset from a ||| retrieve plugin asset	count=1
arg	diagonal ||| diag	count=1
class	mappers provided ||| linear classifier	count=1
module_class	[module_1] control outputs ||| [module_1] [class_2]	count=4
arg	update is_row_sweep_var and to ||| processed_row_indices processed_col_indices train_op	count=1
function	the op to fill ||| op	count=1
function	from duplicate ||| duplicate of	count=1
function	a new ||| new	count=4
arg	that comprise the ||| name all_vars	count=1
function	forward or backward ||| ndlstm base	count=1
class	the opdefs from ||| def library	count=1
arg	by normalizing ||| predictions labels normalizer weights	count=1
arg	try to retrieve the ||| element_name	count=1
module	helper ||| factorization python ops	count=2
function	[function] these ||| get [function]	count=1
function	check the rank ||| check	count=1
function	then return tensor version ||| maybe assert	count=1
module_class	[module_1] projection ||| [module_1] input [class_2]	count=1
function	for the ||| ops for	count=1
module	cross-entropy loss using tf ||| losses python losses	count=1
function	containing all ||| all	count=1
module	dataframe into ||| python learn dataframe	count=1
module	of init arg ||| contrib linalg python ops	count=2
arg	row ||| row	count=1
module	creates a cross-entropy loss ||| losses	count=2
function	save ||| sharded save ops	count=2
module	a dataframe with ||| learn dataframe	count=1
function	pool ops in ||| pool shapes	count=1
function	repeats the elements ||| elements	count=1
function	valid types for ||| valid dtypes	count=2
module	of tensor or ||| layers python ops	count=1
module	the total number of ||| contrib metrics python ops	count=1
module_class	the underlying barrier ||| python ops barrier	count=1
function	global step tensor ||| global step	count=2
function	current control [function_2] ||| [function_2] [function_1]	count=2
function	new control [function_2] ||| [function_2] [function_1]	count=2
function	a postfix representation ||| spec structure	count=1
arg	creates a new ||| name shape	count=1
function	start event to ||| start	count=1
function_arg	feature column [arg_2] ||| [function_1] [arg_2]	count=1
function	guide files ||| files	count=1
module	losses ||| losses python losses	count=1
module	[module_1] the ||| [module_1] python [module_2]	count=1
class	whether client ||| curses navigation history	count=1
function	node with ||| batch norm node	count=1
function	various ||| at thresholds	count=1
class	the wrapper should work ||| debug wrapper	count=1
function	shape of batch dimensions ||| batch shape	count=1
arg	pil image instance to ||| img data_format	count=1
function	[function_1] the standard ||| [function_1] [function_2]	count=1
arg	into int64 ids ||| num_oov_buckets vocab_size default_value	count=1
class	this shape or ||| tensor shape	count=2
function	a summary ||| spec summary	count=1
function	feature ||| feature	count=5
function	given estimator ||| estimator	count=1
function	things to ||| unset all	count=1
function	sparse features and ||| optimizer sparse features	count=1
module	the sense of tensors ||| contrib linalg python	count=2
module	of the op (e ||| python framework	count=1
function	with additional [function_2] ||| [function_2] [function_1]	count=2
function	in a bad way ||| test construction pollution	count=1
class	model ||| sdca model	count=3
module	integrate a ||| integrate	count=1
class	[class_1] t ||| [class_1] [class_2]	count=4
arg	start a looperthread ||| timer_interval_secs target args kwargs	count=1
function_arg	[function_1] words ||| [function_1] [arg_2]	count=5
function	segmentmean ||| segment mean	count=1
arg	session ||| session	count=3
function	argument is an ||| hints allowing	count=1
function	and mirror pad ||| and conv	count=1
function	for the graph transform ||| transform graph	count=1
function	to tf [function] ||| [function]	count=3
module	learn ||| contrib	count=1
class	the enqueue ops ||| runner	count=1
module	cell [module_2] ||| [module_2] [module_1]	count=1
module_class	and values [class_2] ||| [module_1] mutable hash [class_2]	count=1
function	have no effect for ||| no	count=1
